<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-07T01:37:20Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dwickern/scala-nameof</title>
    <updated>2025-03-07T01:37:20Z</updated>
    <id>tag:github.com,2025-03-07:/dwickern/scala-nameof</id>
    <link href="https://github.com/dwickern/scala-nameof" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get the name of an variable, function, class member, or type as a string--at compile-time!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#34;nameOf&#34; macro for scala&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dwickern/scala-nameof/actions&#34;&gt;&lt;img src=&#34;https://github.com/dwickern/scala-nameof/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.github.dwickern/scala-nameof_2.13&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.github.dwickern/scala-nameof_2.13/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/com.github.dwickern/scala-nameof_2.13/latest/com/github/dwickern/macros/NameOf.html&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/com.github.dwickern/scala-nameof_2.13/javadoc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Get the name of an variable, function, class member, or type as a string--at compile-time!&lt;/p&gt; &#xA;&lt;p&gt;Inspired by the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/dn986596.aspx&#34;&gt;nameof&lt;/a&gt; operator in C#&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Used to obtain the simple (unqualified) string name of a variable, type, or member. When reporting errors in code, hooking up model-view-controller (MVC) links, firing property changed events, etc., you often want to capture the string name of a method. Using nameof helps keep your code valid when renaming definitions. Before you had to use string literals to refer to definitions, which is brittle when renaming code elements because tools do not know to check these string literals.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Add the library as &#34;provided&#34;, because it&#39;s only needed during compilation and not at runtime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbt&#34;&gt;libraryDependencies += &#34;com.github.dwickern&#34; %% &#34;scala-nameof&#34; % &#34;4.0.0&#34; % &#34;provided&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And import the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.github.dwickern.macros.NameOf._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can use &lt;code&gt;nameOf&lt;/code&gt; to get the name of a variable or class member:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class Person(name: String, age: Int)&#xA;&#xA;def toMap(person: Person) = Map(&#xA;  nameOf(person.name) -&amp;gt; person.name,&#xA;  nameOf(person.age) -&amp;gt; person.age&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// compiles to:&#xA;&#xA;def toMap(person: Person) = Map(&#xA;  &#34;name&#34; -&amp;gt; person.name,&#xA;  &#34;age&#34; -&amp;gt; person.age&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the name of a function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def startCalculation(value: Int): Unit = {&#xA;  println(&#34;Entered &#34; + nameOf(startCalculation _))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// compiles to:&#xA;&#xA;def startCalculation(value: Int): Unit = {&#xA;  println(&#34;Entered startCalculation&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without having an instance of the type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class Person(name: String, age: Int) {&#xA;  def sayHello(other: Person) = s&#34;Hello ${other.name}!&#34;&#xA;}&#xA;&#xA;println(nameOf[Person](_.age))&#xA;println(nameOf[Person](_.sayHello(???)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// compiles to:&#xA;&#xA;println(&#34;age&#34;)&#xA;println(&#34;sayHello&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;nameOfType&lt;/code&gt; to get the unqualified name of a type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;println(nameOfType[java.lang.String])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// compiles to:&#xA;&#xA;println(&#34;String&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And &lt;code&gt;qualifiedNameOfType&lt;/code&gt; to get the qualified name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;println(qualifiedNameOfType[java.lang.String])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// compiles to:&#xA;&#xA;println(&#34;java.lang.String&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;To run tests for all compilation targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt +test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To publish to your local ivy repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt +publishLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To publish to maven central (requires authorization):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dwickern/scala-nameof/master/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt; (MIT).&lt;/p&gt;</summary>
  </entry>
</feed>