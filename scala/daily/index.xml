<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-04T01:37:39Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zio/zio-direct</title>
    <updated>2022-12-04T01:37:39Z</updated>
    <id>tag:github.com,2022-12-04:/zio/zio-direct</id>
    <link href="https://github.com/zio/zio-direct" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Direct-Style Programming for ZIO&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZIO direct&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project Stage&lt;/th&gt; &#xA;   &lt;th&gt;CI&lt;/th&gt; &#xA;   &lt;th&gt;Release&lt;/th&gt; &#xA;   &lt;th&gt;Snapshot&lt;/th&gt; &#xA;   &lt;th&gt;Discord&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zio/zio/wiki/Project-Stages&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project%20Stage-Development-yellowgreen.svg?sanitize=true&#34; alt=&#34;Project stage&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/zio/zio-direct/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-direct_2.12/&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-direct_2.12.svg?sanitize=true&#34; alt=&#34;Release Artifacts&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-direct_2.12/&#34; title=&#34;Sonatype Snapshots&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-direct_2.12.svg?sanitize=true&#34; alt=&#34;Snapshot Artifacts&#34; title=&#34;Sonatype Snapshots&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://discord.gg/2ccFBr4&#34; title=&#34;Discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629491597070827530?logo=discord&#34; alt=&#34;Badge-Discord&#34; title=&#34;chat on discord&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Summary&lt;/h1&gt; &#xA;&lt;p&gt;Direct-Style programming in ZIO based on the Monadless paradigm.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Talk at Functional Scala 2022 &lt;a href=&#34;https://www.slideshare.net/deusaquilus/ziodirect-functional-scala-2022&#34;&gt;https://www.slideshare.net/deusaquilus/ziodirect-functional-scala-2022&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use zio-direct, add the following to your &lt;code&gt;build.sbt&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;dev.zio&#34; % &#34;zio-direct_3&#34; % &#34;1.0.0-RC1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ZIO-Direct allows direct style programming with ZIO. This library provides a &lt;em&gt;syntactic sugar&lt;/em&gt; that is more powerful than for-comprehensions as well as more natural to use. Simply add the &lt;code&gt;.run&lt;/code&gt; suffix to any ZIO effect in order to retrieve it&#39;s value.&lt;/p&gt; &#xA;&lt;p&gt;ZIO-Direct works by using macros to rewrite sequential code into flatMap-chains based on the &lt;a href=&#34;https://github.com/monadless/monadless&#34;&gt;Monadless&lt;/a&gt; paradigm. The values resulting in &lt;code&gt;.run&lt;/code&gt; calls from the ZIO effects are not actually awaited. Instead, they are rolled-up into a chain of flatMaps.&lt;/p&gt; &#xA;&lt;p&gt;For example, in imperative programming operations typically are done in a simple set of steps.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;object FileOps:&#xA;  def read(file: File): String&#xA;  def write(file: File, content: String): Unit&#xA;&#xA;val textA = read(fileA)&#xA;val textB = read(fileB)&#xA;write(fileC, textA + textB)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using functional programming, the equivalent of this functionality is a set of nested flatMap-chains.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;object FileOps&#xA;  def read(file: File): ZIO[Any, Throwable, String]&#xA;  def write(file: File, content: String): ZIO[Any, Throwable, Unit]&#xA;&#xA;read(fileA).flatMap { textA =&amp;gt;&#xA;  read(fileB).flatMap { textB =&amp;gt;&#xA;    write(fileC, textA + textB)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to avoid this complexity scala provides a for-comprehension syntactic sugar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;for {&#xA;  textA &amp;lt;- read(fileA)&#xA;  textB &amp;lt;- read(fileB)&#xA;  _ &amp;lt;- write(fileC, textA + textB)&#xA;} yield ()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unfortunately this syntactic sugar is limited in many cases, for example, inserting a conditional value inside is impossible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;for {&#xA;  textA &amp;lt;- read(fileA)&#xA;  // Not a possible syntax&#xA;  if (fileA.contains(&#34;some string&#34;)) {&#xA;    textB &amp;lt;- read(fileB)&#xA;    _ &amp;lt;- write(fileC, textA + textB)&#xA;  }&#xA;} yield ()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ZIO-Direct offers an equivalent syntactic sugar that is more ergonomic and allows many constructs that for-comprehensions do not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;defer {&#xA;  val textA = read(fileA).run&#xA;  if (fileA.contains(&#34;some string&#34;)) {&#xA;    val textB = read(fileB).run&#xA;    write(fileC, textA + textB).run&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;ZIO-Tailored&lt;/h1&gt; &#xA;&lt;p&gt;ZIO-Direct is specifically tailored to ZIO capabilities as it supports Environment and Error composition in ZIO effects similar to the for-comprehension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val out: ZIO[CustomerConfig &amp;amp; DistributorConfig, CustomerGetException | DistrubutorGetException, (Customer, Distributor)] =&#xA;  defer {&#xA;    // Get a customer-configuration object from the environment and extract its .url field&#xA;    val custUrl: String = ZIO.service[CustomerConfig].run.url&#xA;    // Get a distributor-configuration from the environment and extract its .url field&#xA;    val distUrl: String = ZIO.service[DistributorConfig].run.url&#xA;    (&#xA;      // Use the two configurations to make an HTTP-call&#xA;      parseCustomer(httpGetCustomer(custUrl).run),&#xA;      parseDistrubutor(httpGetDistributor(distUrl).run)&#xA;    )&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Branching and Looping Support&lt;/h1&gt; &#xA;&lt;p&gt;Unlike the for-comprehension, ZIO-Direct supports branching and looping in the use of flatMaps composition. Let&#39;s have a look at a another non-trivial example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;class Database:&#xA;  def nextRow(): ZIO[Any, Throwable, Row]&#xA;  def hasNextRow(): ZIO[Any, Throwable, Boolean]&#xA;  def lockNextRow(): ZIO[Any, Throwable, Boolean]&#xA;object Database:&#xA;  def open: ZIO[Any, Throwable, Database]&#xA;&#xA;defer {&#xA;  // Open a database connection&#xA;  val db = Database.open().run&#xA;  // See if there is is a next-row&#xA;  while (db.hasNextRow().run) {&#xA;    // try to lock, if aquired continue&#xA;    if (db.lockNextRow().run)&#xA;      val nextRow = db.nextRow().run&#xA;      doSomethingWith(nextRow)&#xA;    else&#xA;      waitT()&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: The above database-api is imaginary.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The above code needs to be translated into something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Database.open.flatMap { db =&amp;gt;&#xA;  def whileFun(): ZIO[Any, Throwable, Unit] =&#xA;    db.hasNextRow().flatMap { hasNextRow =&amp;gt;&#xA;      if (hasNextRow)(&#xA;        db.lockNextRow().flatMap { lockNextRow =&amp;gt;&#xA;          if (!lockNextRow)&#xA;            db.nextRow().map(nextRow =&amp;gt; doSomethingWith(nextRow))&#xA;          else&#xA;            ZIO.succeed(waitT())&#xA;        }&#xA;      ).flatMap(_ =&amp;gt; whileFun())&#xA;      else&#xA;        ZIO.unit&#xA;    }&#xA;  whileFun()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that normally this is the exact code that would have to be written to capture such functionality For-comprehensions do not provide a way to do looping and branching so in such cases a combination of flatMaps and recursion is necessary to avoid calling effects unnecessarily.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://zio.github.io/zio-direct/docs/about/about_coc&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Come chat with us on &lt;a href=&#34;https://discord.gg/2ccFBr4&#34; title=&#34;Discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629491597070827530?logo=discord&#34; alt=&#34;Badge-Discord&#34; title=&#34;chat on discord&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zio/zio-direct/main/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>markhibberd/vault</title>
    <updated>2022-12-04T01:37:39Z</updated>
    <id>tag:github.com,2022-12-04:/markhibberd/vault</id>
    <link href="https://github.com/markhibberd/vault" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Vault&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/markhibberd/vault&#34;&gt;&lt;img src=&#34;https://travis-ci.org/markhibberd/vault.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;What is Vault?&lt;/h4&gt; &#xA;&lt;p&gt;Vault is a scala library for interacting with persistence storage through the JDBC database API (or potentially other).&lt;/p&gt; &#xA;&lt;p&gt;Vault is licenced under BSD3 (see &lt;code&gt;LICENCE&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Non existent. But will happen soon. For now here is an example which may or may not help &lt;a href=&#34;https://github.com/markhibberd/vault/raw/master/src/test/scala/vault/Example.scala&#34;&gt;https://github.com/markhibberd/vault/blob/master/src/test/scala/vault/Example.scala&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SBT Settings&lt;/h3&gt; &#xA;&lt;p&gt;Experimental:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;io.mth&#34; %% &#34;vault&#34; % &#34;0.5.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Provenance&lt;/h3&gt; &#xA;&lt;p&gt;Vault was initially developed to support products at &lt;a href=&#34;http://ephox.com&#34;&gt;Ephox&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The library was open-sourced under a &lt;a href=&#34;https://github.com/markhibberd/vault/raw/master/LICENSE&#34;&gt;BSD License&lt;/a&gt;, drawing users, support and improvements from a number of contributors.&lt;/p&gt; &#xA;&lt;p&gt;The initial developers have since left the employment of Ephox and now maintain this fork &lt;code&gt;markhibberd/vault&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is expected that major releases will now come from this repository.&lt;/p&gt;</summary>
  </entry>
</feed>