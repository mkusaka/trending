<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-25T01:52:12Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>olxbr/load-test</title>
    <updated>2022-06-25T01:52:12Z</updated>
    <id>tag:github.com,2022-06-25:/olxbr/load-test</id>
    <link href="https://github.com/olxbr/load-test" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;load-test&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;strong&gt;SearchAPI&lt;/strong&gt; uses &lt;a href=&#34;http://gatling.io&#34;&gt;Gatling&lt;/a&gt; to executes load tests.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/olxbr/load-test/master/src/gatling/resources/conf/application.conf&#34;&gt;application.conf&lt;/a&gt; file that provides all configuration to load tests.&lt;/p&gt; &#xA;&lt;p&gt;You can override each config above using Java property. For example, if you can override &lt;code&gt;gatling.users&lt;/code&gt; property you must use &lt;code&gt;-Dgatling.users=&amp;lt;value&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more details about how to do override, see &lt;a href=&#34;https://raw.githubusercontent.com/olxbr/load-test/master/#how-to-run&#34;&gt;How To Run&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;How To Build&lt;/h2&gt; &#xA;&lt;p&gt;To build this project, you need to execute these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;vivareal/load-test:load-test&lt;/code&gt; docker image will be created.&lt;/p&gt; &#xA;&lt;h2&gt;How To Run&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://gatling.io&#34;&gt;Gatling&lt;/a&gt; works with a &lt;a href=&#34;http://gatling.io/docs/current/quickstart/#a-word-on-scala&#34;&gt;Simulation&lt;/a&gt; concept and for &lt;strong&gt;SearchAPI&lt;/strong&gt; we creates the &lt;a href=&#34;https://raw.githubusercontent.com/olxbr/load-test/master/src/gatling/scala/com/vivareal/search/simulation/SearchAPIv2Simulation.scala&#34;&gt;SearchAPIv2Simulation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There some steps when you run the load tests:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If not already built, builds and runs &lt;code&gt;load-test&lt;/code&gt; docker image.&lt;/li&gt; &#xA; &lt;li&gt;Executes your simulations.&lt;/li&gt; &#xA; &lt;li&gt;Uploads you simulation report on Amazon S3.&lt;/li&gt; &#xA; &lt;li&gt;Notifies report status on Slack with link to access them.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There are two parameters to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LT_ENDPOINT&lt;/code&gt;*: load tests target endpoint.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LT_EXTRA_ARGS&lt;/code&gt;: gatling extra args&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The environment variables with &lt;code&gt;*&lt;/code&gt; are required. You can override each config using &lt;code&gt;LT_EXTRA_ARGS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Local&lt;/h3&gt; &#xA;&lt;p&gt;To run local, you simple use &lt;code&gt;make run-local&lt;/code&gt; with the target ip to load test, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make run-local LT_ENDPOINT=&#34;&amp;lt;TARGET_IP&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;To run using &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt;, you simple use &lt;code&gt;make run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make run LT_ENDPOINT=&#34;&amp;lt;TARGET_IP&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yon can use &lt;code&gt;K8S_RUN_ARGS&lt;/code&gt; to configure &lt;a href=&#34;https://kubernetes.io/docs/user-guide/kubectl-overview&#34;&gt;kubectl run&lt;/a&gt; params.&lt;/p&gt; &#xA;&lt;h3&gt;Running with Gradle&lt;/h3&gt; &#xA;&lt;p&gt;To run using Gradle too and you simple use &lt;code&gt;gatlingRun&lt;/code&gt; task.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew gatlinRun&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The upload and notification process is separated and to do this you must use &lt;code&gt;uploadReport&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew gatlinRun uploadReport&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to Test&lt;/h3&gt; &#xA;&lt;p&gt;No tests currently implemented&lt;/p&gt; &#xA;&lt;h2&gt;How To Deploy&lt;/h2&gt; &#xA;&lt;p&gt;load-test is a tool/lib project and the deploy is subjective according to the project that uses.&lt;/p&gt; &#xA;&lt;p&gt;You may use docker to deploy: &lt;code&gt;make push&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;To push successful docker image, make sure you setup docker credentials.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Creating your own Simulation&lt;/h2&gt; &#xA;&lt;p&gt;Just implement the simulation in package &lt;code&gt;com.vivareal.search.simulation&lt;/code&gt; and sent it in &lt;code&gt;gatling.simulations.include&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew gatlingRun -Dscenario.users=1 -Dgatling.rampUp=30 -Dgatling.maxDuration=60 -Dgatling.simulations.include=**/SimpleRequestSimulation.scala&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can send it in &lt;code&gt;LT_EXTRA_ARGS&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make run LT_EXTRA_ARGS=&#34;-Dgatling.simulations.include=**/SimpleRequestSimulation.scala&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Simple Request Simularion&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s a &lt;code&gt;Simulation&lt;/code&gt; that downloads a &lt;code&gt;csv&lt;/code&gt; file from &lt;code&gt;Graylog&lt;/code&gt; API based on a query and executes the resulting &lt;code&gt;URI&lt;/code&gt;s requests in &lt;code&gt;circle&lt;/code&gt; and &lt;code&gt;during&lt;/code&gt; a configured time.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;graylog.query&lt;/td&gt; &#xA;   &lt;td&gt;Graylog query to fetch URIs&lt;/td&gt; &#xA;   &lt;td&gt;application:cloudflare&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;graylog.urisFile&lt;/td&gt; &#xA;   &lt;td&gt;file name to save the Graylog API result&lt;/td&gt; &#xA;   &lt;td&gt;uris.csv&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;graylog.uriField&lt;/td&gt; &#xA;   &lt;td&gt;the field name of the csv file generated by Graylog API&lt;/td&gt; &#xA;   &lt;td&gt;ClientRequestURI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;graylog.authorization&lt;/td&gt; &#xA;   &lt;td&gt;Graylog API encoded basic auth header&lt;/td&gt; &#xA;   &lt;td&gt;Basic LALALALA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;graylog.range&lt;/td&gt; &#xA;   &lt;td&gt;Time range in seconds for Graylog query&lt;/td&gt; &#xA;   &lt;td&gt;300&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;graylog.limit&lt;/td&gt; &#xA;   &lt;td&gt;Limit of the results for Graylog query&lt;/td&gt; &#xA;   &lt;td&gt;5000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;All above params can be overriden using System Properties.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>olxbr/aws-sqsd</title>
    <updated>2022-06-25T01:52:12Z</updated>
    <id>tag:github.com,2022-06-25:/olxbr/aws-sqsd</id>
    <link href="https://github.com/olxbr/aws-sqsd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple alternative to the Amazon SQS Daemon (&#34;sqsd&#34;) used on AWS Beanstalk worker tier instances, based on https://github.com/mozart-analytics/sqsd&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AWS SQS Worker Daemon&lt;/h1&gt; &#xA;&lt;p&gt;A simple alternative to the Amazon SQS Daemon (&#34;sqsd&#34;) used on AWS Beanstalk worker tier instances.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;IMPORTANT:&lt;/em&gt; In order for &lt;code&gt;sqsd&lt;/code&gt; to work, you have to have configured the AWS Authentication Keys on you environment either as ENV VARS or using any of the other methods that AWS provides. For ways to do this, go &lt;a href=&#34;http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/credentials.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Using Environment Variables&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Property&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Default&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AWS_DEFAULT_REGION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;us-east-1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;The region name of the AWS SQS queue.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;The access key to access the AWS SQS queue.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;The secret key to access the AWS SQS queue.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SQSD_QUEUE_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;Your queue URL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SQSD_WORKER_CONCURRENCY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;Max number of messages process in parallel.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SQSD_WAIT_TIME_SECONDS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;20&lt;/code&gt; (max: &lt;code&gt;20&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;Long polling wait time when querying the queue.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SQSD_WORKER_HTTP_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http://127.0.0.1:80/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;Your service endpoint/path where to POST the messages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SQSD_WORKER_HTTP_REQUEST_CONTENT_TYPE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;application/json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;Message MIME Type.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SQSD_WORKER_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;30000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;Max time that waiting for a worker response in milliseconds.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SQSD_WORKER_HEALTH_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http://127.0.0.1:80/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;Your service endpoint/path for your service health.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SQSD_WORKER_HEALTH_WAIT_TIME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;30&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;Time to between health checks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt compile&#xA;sbt universal:packageZipTarball&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using an SBT&#39;s docker image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -v $PWD:/target -v $HOME/.ivy2:/root/.ivy2 -v $HOME/.m2:/root/.m2 -w /target hseeberger/scala-sbt:8u151-2.12.4-1.1.1 sbt compile&#xA;docker run --rm -it -v $PWD:/target -v $HOME/.ivy2:/root/.ivy2 -v $HOME/.m2:/root/.m2 -w /target hseeberger/scala-sbt:8u151-2.12.4-1.1.1 sbt universal:packageZipTarball&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to build the docker image&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build --tag aws-sqsd:&amp;lt;some version&amp;gt; .&#xA;docker build --tag &amp;lt;some_company&amp;gt;/aws-sqsd:&amp;lt;some version&amp;gt; .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;You should use the pre created GZVR&#39;s image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e SQSD_QUEUE_URL=&amp;lt;queue-url&amp;gt; -it -d run vivareal/aws-sqsd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the image created by yourself&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e SQSD_QUEUE_URL=&amp;lt;queue-url&amp;gt; -it -d run some_image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you found a bug in the source code or if you want to contribute with new features, you can help submitting an issue, even better if you can submit a pull request :)&lt;/p&gt;</summary>
  </entry>
</feed>