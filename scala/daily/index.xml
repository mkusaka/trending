<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-21T01:55:53Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ucb-bar/riscv-sodor</title>
    <updated>2022-06-21T01:55:53Z</updated>
    <id>tag:github.com,2022-06-21:/ucb-bar/riscv-sodor</id>
    <link href="https://github.com/ucb-bar/riscv-sodor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;educational microarchitectures for risc-v isa&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About The Sodor Processor Collection&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: This repo has been updated to be used with the &lt;a href=&#34;https://github.com/ucb-bar/chipyard&#34;&gt;Chipyard&lt;/a&gt; SoC Generator.&lt;/strong&gt; &lt;strong&gt;For the old self-contained version of Sodor (which is no longer maintained), see &lt;a href=&#34;https://github.com/ucb-bar/riscv-sodor/tree/sodor-old&#34;&gt;https://github.com/ucb-bar/riscv-sodor/tree/sodor-old&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Diagrams: &lt;a href=&#34;https://github.com/ucb-bar/riscv-sodor/wiki&#34;&gt;Sodor Github wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;More documentation: &lt;a href=&#34;https://github.com/librecores/riscv-sodor/wiki&#34;&gt;Librecores Sodor wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Downstream development: &lt;a href=&#34;https://github.com/librecores/riscv-sodor&#34;&gt;Librecores Sodor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo has been put together to demonstrate a number of simple &lt;a href=&#34;http://riscv.org&#34;&gt;RISC-V&lt;/a&gt; integer pipelines written in &lt;a href=&#34;http://chisel.eecs.berkeley.edu&#34;&gt;Chisel&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1-stage (essentially an ISA simulator)&lt;/li&gt; &#xA; &lt;li&gt;2-stage (demonstrates pipelining in Chisel)&lt;/li&gt; &#xA; &lt;li&gt;3-stage (uses sequential memory; supports both Harvard and Princeton versions)&lt;/li&gt; &#xA; &lt;li&gt;5-stage (can toggle between fully bypassed or fully interlocked)&lt;/li&gt; &#xA; &lt;li&gt;&#34;bus&#34;-based micro-coded implementation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of the cores implement the RISC-V 32b integer base user-level ISA (RV32I) version 2.0. None of the cores support virtual memory, and thus only implement the Machine-level (M-mode) of the Privileged ISA v1.10 .&lt;/p&gt; &#xA;&lt;p&gt;All processors talk to a simple scratchpad memory (asynchronous, single-cycle), with no backing outer memory (the 3-stage is the exception - its scratchpad is synchronous). Programs are loaded in via JTAG or TSI, scratchpads 3-port memories (instruction, data, debug).&lt;/p&gt; &#xA;&lt;p&gt;This repository is set up to use the Verilog file generated by Chisel3 which is fed to Verilator along with a test harness in C++ to generate and run the Sodor emulators.&lt;/p&gt; &#xA;&lt;p&gt;This repo works great as an undergraduate lab (and has been used by Berkeley&#39;s CS152 class for 3 semesters and counting). See doc/ for an example, as well as for some processor diagrams. Be careful though - admittedly some of those documents may become dated as things like the Privileged ISA evolve.&lt;/p&gt; &#xA;&lt;h1&gt;Getting the repo and Building the processor emulators&lt;/h1&gt; &#xA;&lt;p&gt;This repo is &lt;strong&gt;NOT&lt;/strong&gt; a self-running repository. Please follow the instruction in &lt;a href=&#34;https://chipyard.readthedocs.io/en/latest/&#34;&gt;https://chipyard.readthedocs.io/en/latest/&lt;/a&gt; to set up Chipyard and simulate Sodor cores.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;What is the goal of these cores?&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;First and foremost, to provide a set of easy to understand cores that users can easily modify and play with. Sodor is useful both as a quick introduction to the &lt;a href=&#34;http://riscv.org&#34;&gt;RISC-V ISA&lt;/a&gt; and to the hardware construction language &lt;a href=&#34;http://chisel.eecs.berkeley.edu&#34;&gt;Chisel3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Are there any diagrams of these cores?&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Diagrams of some of the processors can be found either in the &lt;a href=&#34;https://github.com/ucb-bar/riscv-sodor/wiki&#34;&gt;Sodor Github wiki&lt;/a&gt;, in doc/, or in doc/lab1.pdf. A more comprehensive write-up on the micro-code implementation can be found at the &lt;a href=&#34;http://inst.eecs.berkeley.edu/~cs152/sp12/handouts/microcode.pdf&#34;&gt;CS152 website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;How do I generate Verilog code for use on a FPGA?&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chisel3 outputs verilog by default which can be generated by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd emulator/rv32_1stage&#xA;make generated-src/Top.v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;I want to help! Where do I go?&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can participate in the Sodor conversation on &lt;a href=&#34;https://gitter.im/librecores/riscv-sodor&#34;&gt;gitter&lt;/a&gt;. Downstream development is also taking place at &lt;a href=&#34;https://github.com/librecores/riscv-sodor&#34;&gt;Librecores&lt;/a&gt;. Major milestones will be pulled back here. Check it out! We also accept pull requests here!&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;p&gt;Here is an informal list of things that would be nice to get done. Feel free to contribute!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reduce the port count on the scratchpad memory by having the HTIF port share one of the cpu ports.&lt;/li&gt; &#xA; &lt;li&gt;Provide a Verilog test harness, and put the 3-stage on a FPGA.&lt;/li&gt; &#xA; &lt;li&gt;Add support for the ma_addr, ma_fetch ISA tests. This requires detecting misaligned address exceptions.&lt;/li&gt; &#xA; &lt;li&gt;Greatly cleanup the common/csr.scala file, to make it clearer and more understandable.&lt;/li&gt; &#xA; &lt;li&gt;Refactor the stall, kill, fencei, and exception logic of the 5-stage to be more understandable.&lt;/li&gt; &#xA; &lt;li&gt;Update the u-code to properly handle illegal instructions (rv32mi-p-illegal) and to properly handle exceptions generated by the CSR file (rv32mi-p-csr).&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/barstools</title>
    <updated>2022-06-21T01:55:53Z</updated>
    <id>tag:github.com,2022-06-21:/ucb-bar/barstools</id>
    <link href="https://github.com/ucb-bar/barstools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Useful utilities for BAR projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Barstools&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/freechipsproject/ucb-bar/barstools/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Barstools&lt;/strong&gt; is a collection of useful utilities for BAR projects&lt;/p&gt; &#xA;&lt;p&gt;Passes/Transforms that could be useful if added here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check that a module was de-duplicated. Useful for MIM CAD flows and currently done in python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Be sure to publish-local the following repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ucb-bar/chisel-testers (requires ucb-bar/firrtl-interpreter)&lt;/li&gt; &#xA; &lt;li&gt;ucb-bar/firrtl&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt&#xA;&amp;gt; compile&#xA;&amp;gt; runMain barstools.tapeout.transforms.GenerateTop -i &amp;lt;myfile&amp;gt;.fir -o &amp;lt;myfile&amp;gt;.v --syn-top &amp;lt;mysyntop&amp;gt; --harness-top &amp;lt;myharnesstop&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building the macro compiler JAR:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sbt&#xA;[...]&#xA;[info] Set current project to tapeout (in build file:/mnt/data/dev/barstools_pcad/)&#xA;&amp;gt; assembly&#xA;[...]&#xA;[info] SHA-1: 77d4c759c825fd0ea93dfec26dbbb649f6cd5c89&#xA;[info] Packaging [...]/macros/target/scala-2.11/macros-assembly-0.1-SNAPSHOT.jar ...&#xA;[info] Done packaging.&#xA;[success] Total time: 28 s, completed Mar 21, 2018 2:28:34 PM&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/cva6-wrapper</title>
    <updated>2022-06-21T01:55:53Z</updated>
    <id>tag:github.com,2022-06-21:/ucb-bar/cva6-wrapper</id>
    <link href="https://github.com/ucb-bar/cva6-wrapper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wrapper for ETH Ariane Core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVA6 Wrapper&lt;/h1&gt; &#xA;&lt;p&gt;This wraps up the CVA6 6-stage RISC-V CPU (formerly known as Ariane) (&lt;a href=&#34;https://github.com/openhwgroup/cva6&#34;&gt;https://github.com/openhwgroup/cva6&lt;/a&gt;) into a Rocket Chip based tile to be used in Chipyard.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to use this wrapper, refer to (&lt;a href=&#34;https://github.com/ucb-bar/chipyard&#34;&gt;https://github.com/ucb-bar/chipyard&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
</feed>