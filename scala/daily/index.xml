<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-12T01:36:38Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AVSystem/intellij-hocon</title>
    <updated>2024-08-12T01:36:38Z</updated>
    <id>tag:github.com,2024-08-12:/AVSystem/intellij-hocon</id>
    <link href="https://github.com/AVSystem/intellij-hocon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standalone HOCON plugin for IntelliJ IDEA&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IntelliJ IDEA Plugin for &lt;a href=&#34;https://github.com/lightbend/config/raw/master/HOCON.md&#34;&gt;HOCON&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://plugins.jetbrains.com/plugin/10481-hocon&#34;&gt;Plugin page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features and usage instructions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;HOCON file type&lt;/p&gt; &lt;p&gt;Files with &lt;code&gt;*.conf&lt;/code&gt; extensions are automatically interpreted as HOCON files. Because &lt;code&gt;*.conf&lt;/code&gt; is a common extension, you can change this in &lt;code&gt;File -&amp;gt; Settings -&amp;gt; Editor -&amp;gt; File Types&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Syntax highlighting, brace matching and code folding&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AVSystem/intellij-hocon/idea24/img/syntaxhighlighting.png&#34; alt=&#34;syntaxhighligting.png&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configurable color scheme in &lt;code&gt;File -&amp;gt; Settings -&amp;gt; Editor -&amp;gt; Color Scheme -&amp;gt; HOCON&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Code formatter (the IntelliJ &lt;strong&gt;Reformat Code&lt;/strong&gt; action) along with configurable code style in &lt;code&gt;File -&amp;gt; Settings -&amp;gt; Editor -&amp;gt; Code Style -&amp;gt; HOCON&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Breadcrumbs&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AVSystem/intellij-hocon/idea24/img/breadcrumbs.png&#34; alt=&#34;bradcrumbs.png&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Copy Reference&lt;/strong&gt; action&lt;/p&gt; &lt;p&gt;Use this action (e.g. using &lt;code&gt;Ctrl+Alt+Shift+C&lt;/code&gt;) when having the caret at HOCON key in order to copy full path of the HOCON property.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Move Statement Up/Down&lt;/strong&gt; action which can also move entries in and out of objects&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AVSystem/intellij-hocon/idea24/img/movestatement.gif&#34; alt=&#34;movestatement.gif&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Resolution of HOCON includes with navigation&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AVSystem/intellij-hocon/idea24/img/includeresolution.gif&#34; alt=&#34;includeresolution.gif&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Resolution of HOCON substitutions with navigation&lt;/p&gt; &lt;p&gt;Substitutions are resolved in the current file, all the included files and finally in all the &lt;code&gt;reference.conf&lt;/code&gt; files that can be found on the classpath (e.g. in library JARs). This reflects the way HOCON is usually loaded and resolved in runtime using &lt;a href=&#34;https://lightbend.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load-com.typesafe.config.Config-&#34;&gt;&lt;code&gt;ConfigFactory.load&lt;/code&gt;&lt;/a&gt; using &lt;a href=&#34;https://github.com/lightbend/config/&#34;&gt;Typesafe/Lightbend Config&lt;/a&gt; library.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AVSystem/intellij-hocon/idea24/img/substitutionresolution.gif&#34; alt=&#34;substitutionresolution.gif&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;HOCON: Go to Prev/Next Definition&lt;/strong&gt; actions for navigating between subsequent occurrences of the same HOCON path:&lt;/p&gt; &lt;p&gt;These actions reuse keyboard shortcuts of standard &lt;strong&gt;Super Method&lt;/strong&gt; and &lt;strong&gt;Implementation(s)&lt;/strong&gt; actions (e.g. &lt;code&gt;Ctrl+U&lt;/code&gt; and &lt;code&gt;Ctrl+Alt+B&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AVSystem/intellij-hocon/idea24/img/gotoprevnext.gif&#34; alt=&#34;gotoprevnext.gif&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Detection of HOCON path references in string literals of other languages&lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This only works as long as the HOCON path can be resolved in &lt;code&gt;application.conf&lt;/code&gt; files at the root of the classpath (e.g. &lt;code&gt;application.conf&lt;/code&gt; must be directly in one of the &lt;em&gt;sources&lt;/em&gt; or &lt;em&gt;resources&lt;/em&gt; folders of IntelliJ module).&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AVSystem/intellij-hocon/idea24/img/stringlitrefs.gif&#34; alt=&#34;stringlitrefs.gif&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Detection of Java/Scala fully qualified class references in HOCON strings&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AVSystem/intellij-hocon/idea24/img/classreferences.gif&#34; alt=&#34;classreferences.gif&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Quick Documentation&lt;/strong&gt; action&lt;/p&gt; &lt;p&gt;HOCON has no notion of documentation comments but it has two comment styles - &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;//&lt;/code&gt;. Only the &lt;code&gt;#&lt;/code&gt; comments which directly precede a HOCON key will be interpreted as its documentation.&lt;/p&gt; &lt;p&gt;Quick documentation also displays resolved value of a HOCON key.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AVSystem/intellij-hocon/idea24/img/quickdoc.png&#34; alt=&#34;quickdoc.png&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Find Usages&lt;/strong&gt; action on HOCON entries&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Find Usages&lt;/strong&gt; looks for all usages of given HOCON path in the project. This may include other definitions of the same HOCON path or references to that path in HOCON substitutions or string literals (in HOCON and other languages).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Autocompletion&lt;/p&gt; &lt;p&gt;Autocompletion works when overriding configuration options and when referring to them in HOCON substitutions. Suggestions are loaded from current file, all the included files and all the &lt;code&gt;reference.conf&lt;/code&gt; files found on the root of the classpath (e.g. in library JARs). This reflects the way HOCON is usually loaded and resolved in runtime using &lt;a href=&#34;https://lightbend.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load-com.typesafe.config.Config-&#34;&gt;&lt;code&gt;ConfigFactory.load&lt;/code&gt;&lt;/a&gt; using &lt;a href=&#34;https://github.com/lightbend/config/&#34;&gt;Typesafe/Lightbend Config&lt;/a&gt; library.&lt;/p&gt; &lt;p&gt;Autocompletion also works in string literals of other languages but it must be invoked explicitly (e.g. with &lt;code&gt;Ctrl+Space&lt;/code&gt;) and the path being referred must be resolvable in &lt;code&gt;application.conf&lt;/code&gt; files at the root of the classpath (e.g. &lt;code&gt;application.conf&lt;/code&gt; must be directly in one of the &lt;em&gt;sources&lt;/em&gt; or &lt;em&gt;resources&lt;/em&gt; folders of IntelliJ module).&lt;/p&gt; &lt;p&gt;Autocompletion conveniently displays type and resolved value of suggested HOCON entries and is also integrated with &lt;strong&gt;Quick Documentation&lt;/strong&gt; action.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AVSystem/intellij-hocon/idea24/img/autocompletion.gif&#34; alt=&#34;autocompletion.gif&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>