<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-11T01:53:39Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OOPMan/sdps</title>
    <updated>2022-07-11T01:53:39Z</updated>
    <id>tag:github.com,2022-07-11:/OOPMan/sdps</id>
    <link href="https://github.com/OOPMan/sdps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>rockthejvm/zio-course</title>
    <updated>2022-07-11T01:53:39Z</updated>
    <id>tag:github.com,2022-07-11:/rockthejvm/zio-course</id>
    <link href="https://github.com/rockthejvm/zio-course" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official repository for the Rock the JVM ZIO course&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;The Rock the JVM ZIO Course Repository&lt;/h2&gt; &#xA;&lt;p&gt;Powered by &lt;a href=&#34;https://raw.githubusercontent.com/rockthejvm/zio-course/master/rockthejvm.com&#34;&gt;Rock the JVM!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the code we wrote during the Rock the JVM &lt;a href=&#34;https://rockthejvm.com/p/zio&#34;&gt;ZIO course&lt;/a&gt;. Unless explicitly mentioned, the code in this repository is exactly what was caught on camera.&lt;/p&gt; &#xA;&lt;p&gt;This repository uses &lt;strong&gt;Scala 3&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install and setup&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;install your favorite IDE - in the course I work with &lt;a href=&#34;https://jetbrains.com/idea&#34;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;either clone the repo or download as zip&lt;/li&gt; &#xA; &lt;li&gt;open with the IDE as an SBT project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can easily change the code to Scala 2 by changing the &lt;code&gt;scalaVersion&lt;/code&gt; in &lt;code&gt;build.sbt&lt;/code&gt;, removing the &lt;code&gt;utils&lt;/code&gt; package (native to Scala 3) and replacing all &lt;code&gt;given&lt;/code&gt;s with &lt;code&gt;implicit&lt;/code&gt;s. See more &lt;a href=&#34;https://blog.rockthejvm.com/givens-vs-implicits/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Start by cloning this repository and checkout the &lt;code&gt;start&lt;/code&gt; tag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The repository has tags for intermediate states of the code. This is useful to keep track of course progress, and particularly for the harder exercises where we modify the same code. To revert to that state of the code, all you have to do is &lt;code&gt;git checkout (the respective tag)&lt;/code&gt;. The tags are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.1-scala-recap&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.2-variance&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.3-contextual-abstractions-scala-2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.4-contextual-abstractions-scala-3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.1-effects&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.2-effects-exercises&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.3-zio&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.4-zio-exercises&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.5-zio-apps&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.6-zio-error-handling&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.8-layers&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.1-fibers&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.2-fibers-exercises&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.4-interruptions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.5-parallelism&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.6-resources&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.7-blocking&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.8-mastering-interruptions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.9-asynchronous&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.10-schedules&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4.1-ref&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4.2-promise&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4.4-mutex&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4.6-semaphores&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4.7-stm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4.8-stm-data&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4.9-stm-coordination&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;5.1-testing&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;5.2-junit-tests&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;5.3-testing-services&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;5.4-property-based-testing&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Seeing the complete code&lt;/h3&gt; &#xA;&lt;p&gt;Either clone this repo as it is, or do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;For questions or suggestions&lt;/h3&gt; &#xA;&lt;p&gt;If you have changes to suggest to this repo, either&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;submit a GitHub issue&lt;/li&gt; &#xA; &lt;li&gt;tell me in the course Q/A forum&lt;/li&gt; &#xA; &lt;li&gt;submit a pull request!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>chipsalliance/cde</title>
    <updated>2022-07-11T01:53:39Z</updated>
    <id>tag:github.com,2022-07-11:/chipsalliance/cde</id>
    <link href="https://github.com/chipsalliance/cde" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Scala library for Context-Dependent Environments&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CDE&lt;/h1&gt; &#xA;&lt;p&gt;A Scala library for Context-Dependent Environments, where a key-value environment is passed down a module hierarchy and each returned value depends on the key and the queryâ€™s origin. CDE is provably superior to existing parameterization schemes because it avoids introducing non-local source code changes when a design is modified, while also enabling features for large-scale design space exploration of compositions of generators.&lt;/p&gt; &#xA;&lt;h2&gt;User Guide&lt;/h2&gt; &#xA;&lt;p&gt;The library presents its key-value storage under an abstract class &lt;code&gt;Parameters&lt;/code&gt;. Values stored in &lt;code&gt;Parameters&lt;/code&gt; are each associated with a case object extends &lt;code&gt;Field[T]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The main interface for user to create a &lt;code&gt;Parameters&lt;/code&gt; object is using &lt;code&gt;Config&lt;/code&gt; object. Its &lt;code&gt;apply&lt;/code&gt; method takes &lt;code&gt;(View, View, View) =&amp;gt; PartialFunction[Any, Any]&lt;/code&gt; as a lookup table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;//Field MyKey1 contains value of type Int&#xA;case object MyKey1 extends Field[Int]&#xA;//Field MyKey2 contains value of type String, with default value &#34;None&#34;&#xA;case object MyKey2 extends Field[String](&#34;None&#34;)&#xA;&#xA;// The meaning of parameter (site, here, up) will be explained later&#xA;val p: Parameters = Config((site, here, up) =&amp;gt; {&#xA;  case MyKey1 =&amp;gt; 0&#xA;  case MyKey2 =&amp;gt; &#34;MyValue&#34;&#xA;})&#xA;&#xA;// Apply Paramaters object to Field to query&#xA;assert(p(MyKey1) == 0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parameter Overrides&lt;/h3&gt; &#xA;&lt;p&gt;We can use one &lt;code&gt;Parameters&lt;/code&gt; to override another. Each single &lt;code&gt;Config&lt;/code&gt; is like a row in a table, while each &lt;code&gt;Field&lt;/code&gt; is a column in the table. To concat two table together, we have &lt;code&gt;alter&lt;/code&gt; and &lt;code&gt;orElse&lt;/code&gt; methods. &lt;code&gt;alter&lt;/code&gt; puts the rhs at bottom of the table and &lt;code&gt;orElse&lt;/code&gt; puts the rhs at top of the table.&lt;/p&gt; &#xA;&lt;p&gt;A query will inspect the table from bottom to up, row by row, until it finds the first row having the key defined.&lt;/p&gt; &#xA;&lt;p&gt;For example: &lt;code&gt;Config1.alter(Config2).alter(Config3)&lt;/code&gt; yields&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Key1&lt;/th&gt; &#xA;   &lt;th&gt;Key2&lt;/th&gt; &#xA;   &lt;th&gt;Key3&lt;/th&gt; &#xA;   &lt;th&gt;...&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Config1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;V1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Config2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;V2&lt;/td&gt; &#xA;   &lt;td&gt;V3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Config3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;V4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;And now &lt;code&gt;p(Key1) == V2&lt;/code&gt;, &lt;code&gt;p(Key2) == V3&lt;/code&gt; and &lt;code&gt;p(Key3) == V4&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The same &lt;code&gt;Parameters&lt;/code&gt; can also be defined by &lt;code&gt;Config3.orElse(Config2).orElse(Config1)&lt;/code&gt;. There is also deprecated shorthand &lt;code&gt;++&lt;/code&gt; for &lt;code&gt;orElse&lt;/code&gt;, so &lt;code&gt;Config3 ++ Config2 ++ Config1&lt;/code&gt; is also valid.&lt;/p&gt; &#xA;&lt;h3&gt;Environment Reference&lt;/h3&gt; &#xA;&lt;p&gt;Each query contains the entire environment of where the query originates. This is pass to the lookup table of each &lt;code&gt;Config&lt;/code&gt; by &lt;code&gt;(site, here, up)&lt;/code&gt; arguments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;site&lt;/code&gt; dynamically refers to the entire table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;here&lt;/code&gt; dynamically refers to the current row of the table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;up&lt;/code&gt; dynamically refers to the rows appearing up than the current row&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, in the following &lt;code&gt;Parameters&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Key1&lt;/th&gt; &#xA;   &lt;th&gt;Key2&lt;/th&gt; &#xA;   &lt;th&gt;Key3&lt;/th&gt; &#xA;   &lt;th&gt;Key4&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Config1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;site(Key1)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Config2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;here(Key1)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;up(Key2)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Config3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The value for each key is&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key1: 3, given by &lt;code&gt;Config3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Key2: 3, as it is value of &lt;code&gt;Key1&lt;/code&gt; in the entire table&lt;/li&gt; &#xA; &lt;li&gt;Key3: 2, as it is value of &lt;code&gt;Key1&lt;/code&gt; defined in the current row&lt;/li&gt; &#xA; &lt;li&gt;Key4: 1, as it is value of &lt;code&gt;Key2&lt;/code&gt; defined in the upper row, which is in turn value of &lt;code&gt;Key1&lt;/code&gt; defined in the table &lt;em&gt;containing the rows before &lt;code&gt;Config2&lt;/code&gt;&lt;/em&gt;, which is where &lt;code&gt;here(Key1)&lt;/code&gt; originated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If one config layer does not refer environment at all, &lt;code&gt;alterMap&lt;/code&gt; and &lt;code&gt;alterPartial&lt;/code&gt; can be used to avoid create a redundant &lt;code&gt;Config&lt;/code&gt; object, as they accept &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;PartialFunction&lt;/code&gt; as their parameter.&lt;/p&gt; &#xA;&lt;h2&gt;Implementation Details&lt;/h2&gt; &#xA;&lt;p&gt;This section discusses the internal data structure used to track environment information. Normal reader can skip the section.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;alter&lt;/code&gt; and &lt;code&gt;orElse&lt;/code&gt; function wraps two operand as &lt;code&gt;ChainParameters&lt;/code&gt;, which forms a binary tree when &lt;code&gt;alter&lt;/code&gt; are called multiple times. Query on &lt;code&gt;ChainParameters&lt;/code&gt; calls &lt;code&gt;chain&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;chain&lt;/code&gt; method traverses the tree by wrapping the right child in &lt;code&gt;ChainView&lt;/code&gt;, which records &lt;code&gt;up&lt;/code&gt; for later reference, and invoking &lt;code&gt;chain&lt;/code&gt; on the left child. This happens recursively until a leaf node is found. Then if the requested key is not in the node, we can turn to &lt;code&gt;chain&lt;/code&gt; of currently &lt;code&gt;up&lt;/code&gt; node.&lt;/p&gt; &#xA;&lt;p&gt;The following figure illustrates a querying process of &lt;code&gt;Parameters&lt;/code&gt; constructed by &lt;code&gt;C1.alter(C2).alter(C3).orElse(C4)&lt;/code&gt;. &lt;code&gt;chain&lt;/code&gt; is invoked on the node in blue, and &lt;code&gt;ChainView&lt;/code&gt; generated is in red.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chipsalliance/cde/master/doc/ChainParameters.svg?sanitize=true&#34; alt=&#34;Query Example&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>