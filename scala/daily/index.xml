<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-08T01:39:19Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scalameta/scalafmt</title>
    <updated>2022-11-08T01:39:19Z</updated>
    <id>tag:github.com,2022-11-08:/scalameta/scalafmt</id>
    <link href="https://github.com/scalameta/scalafmt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code formatter for Scala&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;scalafmt&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/scalameta/scalafmt/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/scalameta/scalafmt/CI&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/olafurpg/scalafmt/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/7gha7cxm5lw8fsc3&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/scalameta/scalafmt?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/scalameta/scalafmt.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/scalameta/scalafmt&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/dJhS9Hv&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/632642981228314653?label=discord&#34; alt=&#34;Join the discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://index.scala-lang.org/scalameta/scalafmt/scalafmt-core&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/scalameta/scalafmt/scalafmt-core/latest.svg?color=orange&amp;amp;kill_cache=1&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://scalameta.org/scalafmt/&#34;&gt;User documentation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Head over to &lt;a href=&#34;https://scalameta.org/scalafmt/&#34;&gt;the user docs&lt;/a&gt; for instructions on how to install scalafmt.&lt;/p&gt; &#xA;&lt;h3&gt;Quick help&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt compile&lt;/code&gt; or &lt;code&gt;sbt core/compile&lt;/code&gt; (specific project).&lt;/li&gt; &#xA; &lt;li&gt;Run&amp;nbsp;all unit tests: &lt;code&gt;sbt test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run&amp;nbsp;only formatting tests: &lt;code&gt;tests/testOnly *FormatTests&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Write new formatting test: read &lt;a href=&#34;https://raw.githubusercontent.com/scalameta/scalafmt/master/scalafmt-tests/src/test/resources/readme.md&#34;&gt;this doc&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Build docs: See instructions on the &lt;a href=&#34;https://scalameta.org/scalafmt/docs/contributing-website.html&#34;&gt;site&lt;/a&gt; or locally at &lt;code&gt;./docs/contributing-website.md&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Hack on sbt plugin: run &lt;code&gt;sbt scripted&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run jmh benchmarks: &lt;code&gt;./bin/run-benchmarks.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run formatter on millions of lines of code: &lt;code&gt;tests/test:runMain org.scalafmt.ScalafmtProps&lt;/code&gt; (slow, and requires a lot of memory/cpu)&lt;/li&gt; &#xA; &lt;li&gt;Debug performance: after each test run in &lt;code&gt;FormatTests&lt;/code&gt;, a flamegraph report like &lt;a href=&#34;https://github.com/scalameta/scalafmt/issues/140&#34;&gt;this one&lt;/a&gt; is generated in &lt;code&gt;target/index.html&lt;/code&gt;. I usually keep a browser tab open at &lt;code&gt;localhost:3000/target/index.html&lt;/code&gt; along with this background process: &lt;code&gt;browser-sync start --server --files &#34;target/*.html&#34;&lt;/code&gt;. See &lt;a href=&#34;https://www.browsersync.io/&#34;&gt;Browsersync&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Team&lt;/h3&gt; &#xA;&lt;p&gt;The current maintainers (people who can merge pull requests) are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ólafur Páll Geirsson - &lt;a href=&#34;https://github.com/olafurpg&#34;&gt;&lt;code&gt;@olafurpg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pedro J Rodriguez Tavarez - &lt;a href=&#34;https://github.com/pjrt&#34;&gt;&lt;code&gt;@pjrt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Iurii Susuk - &lt;a href=&#34;https://github.com/ysusuk&#34;&gt;&lt;code&gt;@ysusuk&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paul Draper - &lt;a href=&#34;https://github.com/pauldraper&#34;&gt;&lt;code&gt;@pauldraper&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rikito Taniguchi &lt;a href=&#34;https://github.com/tanishiking&#34;&gt;&lt;code&gt;@tanishiking&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mikhail Chugunkov &lt;a href=&#34;https://github.com/poslegm&#34;&gt;&lt;code&gt;@poslegm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An up-to-date list of contributors is available here: &lt;a href=&#34;https://github.com/scalameta/scalafmt/graphs/contributors&#34;&gt;https://github.com/scalameta/scalafmt/graphs/contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We strive to offer a welcoming environment to learn, teach and contribute.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;a href=&#34;http://www.ej-technologies.com/products/jprofiler/overview.html&#34;&gt; &lt;img src=&#34;https://www.ej-technologies.com/images/product_banners/jprofiler_large.png&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.ej-technologies.com/products/jprofiler/overview.html&#34;&gt;JProfiler&lt;/a&gt; generously supports scalafmt with its full-featured Java Profiler.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/intellij-scala</title>
    <updated>2022-11-08T01:39:19Z</updated>
    <id>tag:github.com,2022-11-08:/JetBrains/intellij-scala</id>
    <link href="https://github.com/JetBrains/intellij-scala" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala plugin for IntelliJ IDEA&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;official JetBrains project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JetBrains/intellij-scala/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/JetBrains/intellij-scala/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Scala Plugin Build &amp;amp; Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/aUKpZzeHCK&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/discord?icon=discord&amp;amp;label&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Scala Plugin for IntelliJ IDEA&lt;/h1&gt; &#xA;&lt;p&gt;The plugin adds support for the Scala language:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Coding assistance (highlighting, completion, formatting, refactorings, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Navigation, search, information about types and implicits&lt;/li&gt; &#xA; &lt;li&gt;Integration with sbt and other build tools&lt;/li&gt; &#xA; &lt;li&gt;Testing frameworks support (ScalaTest, Specs2, uTest)&lt;/li&gt; &#xA; &lt;li&gt;Scala debugger, worksheets and Ammonite scripts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(note that HOCON support was moved to a &lt;a href=&#34;https://plugins.jetbrains.com/plugin/10481-hocon&#34;&gt;separate plugin&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;General information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To get information about how to install and use this plugin in IDEA, please use &lt;a href=&#34;https://www.jetbrains.com/idea/help/scala.html&#34;&gt;IntelliJ IDEA online help&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have any question about the Scala plugin, we&#39;d be glad to answer it in &lt;a href=&#34;https://discord.gg/aUKpZzeHCK&#34;&gt;our discord channel&lt;/a&gt; or in &lt;a href=&#34;https://devnet.jetbrains.com/community/idea/scala&#34;&gt;our developer community&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you found a bug, please report it on &lt;a href=&#34;https://youtrack.jetbrains.com/issues/SCL#newissue&#34;&gt;our issue tracker&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to contribute, please see our &lt;a href=&#34;https://blog.jetbrains.com/scala/2016/04/21/how-to-contribute-to-intellij-scala-plugin/&#34;&gt;intro to the Scala plugin internals&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setting up the project&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;In order to take part in Scala plugin development, you need:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;IntelliJ IDEA 2021.3 or higher with a compatible version of Scala plugin&lt;/li&gt; &#xA; &lt;li&gt;JDK 17&lt;/li&gt; &#xA; &lt;li&gt;(optional but &lt;strong&gt;recommended&lt;/strong&gt;) &lt;br&gt; Enable &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/enabling-internal.html&#34;&gt;internal mode&lt;/a&gt; in IDEA to get access to helpful internal actions and debug information&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository to your computer&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/JetBrains/intellij-scala.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Open IntelliJ IDEA, select &lt;code&gt;File -&amp;gt; New -&amp;gt; Project from existing sources&lt;/code&gt;, point to the directory where the Scala plugin repository is and then import it as sbt project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the next step, select JDK 17 as project JDK (create it from an installed JDK if necessary).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the &lt;code&gt;scalaCommunity&lt;/code&gt; run configuration and select the &lt;code&gt;Run&lt;/code&gt; or &lt;code&gt;Debug&lt;/code&gt; button to build and start a development version of IDEA with the Scala plugin.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/welcome.html&#34;&gt;IntelliJ Platform SDK documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Browsing IntelliJ Platform sources&lt;/h2&gt; &#xA;&lt;p&gt;When loading Scala Plugin project in sbt, the IntelliJ platform is downloaded to &lt;code&gt;&amp;lt;home&amp;gt;/.ScalaPluginIC/sdk/&amp;lt;sdk version&amp;gt;/&lt;/code&gt;. IntelliJ platform sources should be automatically attached after project has been imported and indices have been built.&lt;/p&gt; &#xA;&lt;p&gt;However, sometimes this doesn&#39;t happen and the sources are not attached. As a result you see decompiled code when opening a Platform API class. To fix this you can invoke &#34;Attach Intellij Sources&#34; action (you need to enable &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/enabling-internal.html&#34;&gt;internal mode&lt;/a&gt; to access this action)&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;To run tests properly, the plugin needs to be packaged. On the sbt shell:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;packageArtifact&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;runFastTests&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The &#34;fast tests&#34; can take over an hour. To get a quick feedback on project health, run only the type inference tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; runTypeInferenceTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generating test coverage reports&lt;/h2&gt; &#xA;&lt;p&gt;You might want to generate a test coverage report for a given package. It can be done by running for example the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt &#34;project scala-impl;set coverageEnabled := true;project scalaCommunity;testOnly org.jetbrains.plugins.scala.codeInspection.unusedInspections.*;scala-impl/coverageReport&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Close to the very tail of the output of this command you will find a line that gives you the location of the generated report, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[info] Written HTML coverage report [/Users/alice/intellij-scala/scala/scala-impl/target/scala-2.13/scoverage-report/index.html]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in order to continue working from IntelliJ IDEA again you need to perform Build &amp;gt; Rebuild Project.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/testing-plugins.html&#34;&gt;Docs for writing tests for IntelliJ plugins&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;GitHub Actions build&lt;/h2&gt; &#xA;&lt;p&gt;The project is configured to build and run the typeInference tests and fast tests with Github Actions. The full test suite isn&#39;t run to avoid really long build times.&lt;/p&gt; &#xA;&lt;h2&gt;Running the plugin&lt;/h2&gt; &#xA;&lt;h3&gt;Debugging mode&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to try your changes is typically to launch the &lt;code&gt;scalaCommunity&lt;/code&gt; run configuration which is created when you set up the project as described above.&lt;/p&gt; &#xA;&lt;h3&gt;As a standalone plugin&lt;/h3&gt; &#xA;&lt;p&gt;To run and distribute a modified version of the plugin in a regular IntelliJ instance, you need to package it.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;on the sbt shell, run &lt;code&gt;packageArtifactZip&lt;/code&gt;. This will output the generated plugin zip location (typically into &lt;code&gt;&amp;lt;project directory&amp;gt;/target/scala-plugin.zip&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;In IntelliJ, open Preferences, section Plugins, choose &#34;Install plugin from disk...&#34; and navigate to the scala-plugin.zip&lt;/li&gt; &#xA; &lt;li&gt;Restart IntelliJ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;h3&gt;Investigation performance issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;YourKit&lt;/li&gt; &#xA; &lt;li&gt;There is a &#34;Scala plugin profiler&#34; tool window to track invocations of methods with &lt;code&gt;@Cached*&lt;/code&gt; or &lt;code&gt;@Measure&lt;/code&gt; annotations (from &lt;code&gt;org.jetbrains.plugins.scala.macroAnnotations&lt;/code&gt; package) in real time. The tool window is available in &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/enabling-internal.html&#34;&gt;internal mode&lt;/a&gt; or if &lt;code&gt;-Dinternal.profiler.tracing=true&lt;/code&gt; is passed to IDEA using &lt;a href=&#34;https://www.jetbrains.com/help/idea/tuning-the-ide.html#procedure-jvm-options&#34;&gt;custom VM options&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>