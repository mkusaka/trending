<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-12T01:42:58Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>locationtech/geomesa</title>
    <updated>2024-01-12T01:42:58Z</updated>
    <id>tag:github.com,2024-01-12:/locationtech/geomesa</id>
    <link href="https://github.com/locationtech/geomesa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GeoMesa is a suite of tools for working with big geo-spatial data in a distributed fashion.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://geomesa.github.io&#34;&gt;&lt;img align=&#34;center&#34; width=&#34;50%&#34; src=&#34;https://raw.githubusercontent.com/geomesa/geomesa.github.io/main/img/geomesa-2x.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;GeoMesa is an open source suite of tools that enables large-scale geospatial querying and analytics on distributed computing systems. GeoMesa provides spatio-temporal indexing on top of the Accumulo, HBase and Cassandra databases for massive storage of point, line, and polygon data. GeoMesa also provides near real time stream processing of spatio-temporal data by layering spatial semantics on top of Apache Kafka. Through GeoServer, GeoMesa facilitates integration with a wide range of existing mapping clients over standard OGC (Open Geospatial Consortium) APIs and protocols such as WFS and WMS. GeoMesa supports Apache Spark for custom distributed geospatial analytics.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; height=&#34;150px&#34; src=&#34;https://www.geomesa.org/img/geomesa-overview-848x250.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;&lt;img src=&#34;https://pbs.twimg.com/profile_images/2552421256/hv2oas84tv7n3maianiq_normal.png&#34; alt=&#34;LocationTech&#34;&gt; GeoMesa is a member of the &lt;a href=&#34;https://projects.eclipse.org/projects/locationtech.geomesa&#34;&gt;LocationTech&lt;/a&gt; working group of the Eclipse Foundation.&lt;/h4&gt; &#xA;&lt;h2&gt;Join the Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/locationtech/geomesa?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/locationtech/geomesa&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GeoMesa &lt;a href=&#34;https://accounts.eclipse.org/mailing-list/geomesa-users&#34;&gt;Users&lt;/a&gt; and &lt;a href=&#34;https://accounts.eclipse.org/mailing-list/geomesa-dev&#34;&gt;Dev&lt;/a&gt; mailing lists&lt;/li&gt; &#xA; &lt;li&gt;GeoMesa &lt;a href=&#34;https://geomesa.atlassian.net/issues/?jql=order+by+created+DESC&#34;&gt;JIRA&lt;/a&gt; for issue tracking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.geomesa.org/documentation/&#34;&gt;Main documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.geomesa.org/documentation/user/upgrade.html&#34;&gt;Upgrade Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Quick Starts: &lt;a href=&#34;https://www.geomesa.org/documentation/tutorials/geomesa-quickstart-hbase.html&#34;&gt;HBase&lt;/a&gt; | &lt;a href=&#34;https://www.geomesa.org/documentation/tutorials/geomesa-quickstart-accumulo.html&#34;&gt;Accumulo&lt;/a&gt; | &lt;a href=&#34;https://www.geomesa.org/documentation/tutorials/geomesa-quickstart-cassandra.html&#34;&gt;Cassandra&lt;/a&gt; | &lt;a href=&#34;https://www.geomesa.org/documentation/tutorials/geomesa-quickstart-kafka.html&#34;&gt;Kafka&lt;/a&gt; | &lt;a href=&#34;https://www.geomesa.org/documentation/tutorials/geomesa-quickstart-redis.html&#34;&gt;Redis&lt;/a&gt; | &lt;a href=&#34;https://www.geomesa.org/documentation/current/tutorials/geomesa-quickstart-fsds.html&#34;&gt;FileSystem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.geomesa.org/tutorials/&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Current release: &lt;a href=&#34;https://github.com/locationtech/geomesa/releases/tag/geomesa-4.0.4&#34;&gt;4.0.4&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/locationtech/geomesa/releases/download/geomesa-4.0.4/geomesa-hbase_2.12-4.0.4-bin.tar.gz&#34;&gt;&lt;strong&gt;HBase&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/locationtech/geomesa/releases/download/geomesa-4.0.4/geomesa-accumulo_2.12-4.0.4-bin.tar.gz&#34;&gt;&lt;strong&gt;Accumulo&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/locationtech/geomesa/releases/download/geomesa-4.0.4/geomesa-cassandra_2.12-4.0.4-bin.tar.gz&#34;&gt;&lt;strong&gt;Cassandra&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/locationtech/geomesa/releases/download/geomesa-4.0.4/geomesa-kafka_2.12-4.0.4-bin.tar.gz&#34;&gt;&lt;strong&gt;Kafka&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/locationtech/geomesa/releases/download/geomesa-4.0.4/geomesa-redis_2.12-4.0.4-bin.tar.gz&#34;&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/locationtech/geomesa/releases/download/geomesa-4.0.4/geomesa-fs_2.12-4.0.4-bin.tar.gz&#34;&gt;&lt;strong&gt;FileSystem&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/locationtech/geomesa/releases/download/geomesa-4.0.4/geomesa-gt_2.12-4.0.4-bin.tar.gz&#34;&gt;&lt;strong&gt;PostGIS&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Verifying Downloads&lt;/h3&gt; &#xA;&lt;p&gt;Downloads hosted on GitHub include SHA-256 hashes and gpg signatures (.asc files). To verify a download using gpg, import the appropriate key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gpg2 --keyserver hkp://pool.sks-keyservers.net --recv-keys CD24F317&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then verify the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gpg2 --verify geomesa-accumulo_2.12-4.0.4-bin.tar.gz.asc geomesa-accumulo_2.12-4.0.4-bin.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The keys currently used for signing are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key ID&lt;/th&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CD24F317&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Emilio Lahr-Vivaz &amp;lt;elahrvivaz(-at-)ccri.com&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;1E679A56&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;James Hughes &amp;lt;jnh5y(-at-)ccri.com&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Maven Integration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:org.locationtech.geomesa&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/locationtech/geomesa/main/.github/maven-badge.svg?sanitize=true&#34; alt=&#34;Maven&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GeoMesa is hosted on Maven Central. To include it as a dependency, add the desired modules, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.locationtech.geomesa&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;geomesa-hbase-datastore_2.12&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;4.0.4&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GeoMesa depends on several third-party libraries that are only available in separate repositories. To include GeoMesa in your project, add the following repositories to your pom:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;repositories&amp;gt;&#xA;  &amp;lt;!-- geotools --&amp;gt;&#xA;  &amp;lt;repository&amp;gt;&#xA;    &amp;lt;id&amp;gt;osgeo&amp;lt;/id&amp;gt;&#xA;    &amp;lt;url&amp;gt;https://repo.osgeo.org/repository/release&amp;lt;/url&amp;gt;&#xA;  &amp;lt;/repository&amp;gt;&#xA;  &amp;lt;!-- confluent --&amp;gt;&#xA;  &amp;lt;repository&amp;gt;&#xA;    &amp;lt;id&amp;gt;confluent&amp;lt;/id&amp;gt;&#xA;    &amp;lt;url&amp;gt;https://packages.confluent.io/maven/&amp;lt;/url&amp;gt;&#xA;  &amp;lt;/repository&amp;gt;&#xA;&amp;lt;/repositories&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nightly Snapshots&lt;/h3&gt; &#xA;&lt;p&gt;Snapshot versions are published nightly to the Eclipse repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;repository&amp;gt;&#xA;  &amp;lt;id&amp;gt;geomesa-snapshots&amp;lt;/id&amp;gt;&#xA;  &amp;lt;url&amp;gt;https://repo.eclipse.org/content/repositories/geomesa-snapshots&amp;lt;/url&amp;gt;&#xA;  &amp;lt;releases&amp;gt;&#xA;    &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xA;  &amp;lt;/releases&amp;gt;&#xA;  &amp;lt;snapshots&amp;gt;&#xA;    &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xA;  &amp;lt;/snapshots&amp;gt;&#xA;&amp;lt;/repository&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spark Runtimes&lt;/h3&gt; &#xA;&lt;p&gt;GeoMesa publishes &lt;code&gt;spark-runtime&lt;/code&gt; JARs for integration with Spark environments like Databricks. These shaded JARs include all the required dependencies in a single artifact. When importing through Maven, all transitive dependencies can be excluded. There are Spark runtime JARs available for most of the different DataStore implementations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.locationtech.geomesa&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;geomesa-gt-spark-runtime_2.12&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;4.0.4&amp;lt;/version&amp;gt;&#xA;  &amp;lt;exclusions&amp;gt;&#xA;    &amp;lt;exclusion&amp;gt;&#xA;      &amp;lt;!-- if groupId wildcards are not supported, the two main ones are jline:* and org.geotools:* --&amp;gt;&#xA;      &amp;lt;groupId&amp;gt;*&amp;lt;/groupId&amp;gt;&#xA;      &amp;lt;artifactId&amp;gt;*&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;/exclusion&amp;gt;&#xA;  &amp;lt;/exclusions&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These JARs are also included in the &lt;a href=&#34;https://raw.githubusercontent.com/locationtech/geomesa/main/#downloads&#34;&gt;Downloads&lt;/a&gt; bundles, above.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;sbt&lt;/code&gt; Integration&lt;/h2&gt; &#xA;&lt;p&gt;Similarly, integration with &lt;code&gt;sbt&lt;/code&gt; is straightforward:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Add necessary resolvers&#xA;resolvers ++= Seq(&#xA;  &#34;osgeo&#34; at &#34;https://repo.osgeo.org/repository/release&#34;,&#xA;  &#34;confluent&#34; at &#34;https://packages.confluent.io/maven&#34;&#xA;)&#xA;&#xA;// Select desired modules&#xA;libraryDependencies ++= Seq(&#xA;  &#34;org.locationtech.geomesa&#34; %% &#34;geomesa-utils&#34; % &#34;4.0.4&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Development version: 4.1.0-SNAPSHOT&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/locationtech/geomesa/actions/workflows/build-and-test-2.12.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/locationtech/geomesa/actions/workflows/build-and-test-2.12.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/locationtech/geomesa/actions/workflows/build-and-test-2.13.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/locationtech/geomesa/actions/workflows/build-and-test-2.13.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://api.securityscorecards.dev/projects/github.com/locationtech/geomesa&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/locationtech/geomesa/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://adoptium.net/temurin/releases/&#34;&gt;Java JDK 8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maven.apache.org/&#34;&gt;Apache Maven&lt;/a&gt; 3.6 or later&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Docker&lt;/a&gt; (only required for running unit tests)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use Git to download the source code. Navigate to the destination directory, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:locationtech/geomesa.git&#xA;cd geomesa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The project is built using Maven. To build, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn clean install -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full build takes quite a while. To speed it up, you may use multiple threads (&lt;code&gt;-T 1.5C&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To run unit tests, omit the &lt;code&gt;-DskipTests&lt;/code&gt; (note: requires &lt;code&gt;docker&lt;/code&gt; to be available).&lt;/p&gt; &#xA;&lt;h3&gt;Build with Bloop Compile Server&lt;/h3&gt; &#xA;&lt;p&gt;GeoMesa also provides experimental support for the &lt;a href=&#34;https://scalacenter.github.io/bloop/&#34;&gt;Bloop&lt;/a&gt; compile server, which provides fast incremental compilation. To export the GeoMesa build to Bloop, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build/bloop-export.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on using Bloop, refer to the &lt;a href=&#34;https://scalacenter.github.io/bloop/docs/build-tools/maven&#34;&gt;Bloop documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build with Zinc Compile Server&lt;/h3&gt; &#xA;&lt;p&gt;GeoMesa also provides experimental support for the &lt;a href=&#34;https://github.com/typesafehub/zinc&#34;&gt;Zinc&lt;/a&gt; compile server, which provides fast incremental compilation. However, please note that Zinc is no longer actively maintained. To use an existing Zinc server, run maven with &lt;code&gt;-Pzinc&lt;/code&gt;. GeoMesa provides a helper script at &lt;code&gt;build/mvn&lt;/code&gt;, which is a wrapper around Maven that downloads and runs Zinc automatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build/mvn clean install -T8 -DskipTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the Zinc build fails with an error finding &#34;javac&#34;, try setting the JAVA_HOME environment variable to point to the root of your JDK. Example from a Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;JAVA_HOME=&#34;/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home&#34; build/mvn clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scala Cross Build&lt;/h3&gt; &#xA;&lt;p&gt;To build for a different Scala version (e.g. 2.13), run the following script, then build as normal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build/change-scala-version.sh 2.13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building on OS X&lt;/h3&gt; &#xA;&lt;p&gt;When building on OS X and using Docker Desktop in a non-default configuration, you may need to edit &lt;code&gt;~/.testcontainers.properties&lt;/code&gt; to contain the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ScalaOtus/scala-dev-mooc-2023-12</title>
    <updated>2024-01-12T01:42:58Z</updated>
    <id>tag:github.com,2024-01-12:/ScalaOtus/scala-dev-mooc-2023-12</id>
    <link href="https://github.com/ScalaOtus/scala-dev-mooc-2023-12" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>scalacenter/scalac-profiling</title>
    <updated>2024-01-12T01:42:58Z</updated>
    <id>tag:github.com,2024-01-12:/scalacenter/scalac-profiling</id>
    <link href="https://github.com/scalacenter/scalac-profiling" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compilation profiling tool for Scala 2 projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Providing Better Compilation Performance Information&lt;/h1&gt; &#xA;&lt;p&gt;When compile times become a problem, how can Scala developers reason about the relation between their code and compile times?&lt;/p&gt; &#xA;&lt;h2&gt;Maintenance status&lt;/h2&gt; &#xA;&lt;p&gt;This plugin was created at the &lt;a href=&#34;http://scala.epfl.ch&#34;&gt;Scala Center&lt;/a&gt; in 2017 and 2018 as the result of the proposal &lt;a href=&#34;https://github.com/scalacenter/advisoryboard/raw/main/proposals/010-compiler-profiling.md&#34;&gt;SCP-10&lt;/a&gt;, submitted by a &lt;a href=&#34;https://scala.epfl.ch/corporate-membership.html&#34;&gt;corporate member&lt;/a&gt; of the board. The Center is seeking new corporate members to fund activities such as these, to benefit the entire Scala community.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/scalacenter/scalac-profiling/releases/tag/v1.0.0&#34;&gt;Version 1.0&lt;/a&gt; of the plugin supports Scala 2.12.&lt;/p&gt; &#xA;&lt;p&gt;The plugin is now community-maintained, with maintenance overseen by the Center. Thanks to volunteer contributors, there is now a 1.1.0-RC1 &lt;a href=&#34;https://github.com/scalacenter/scalac-profiling/releases/tag/v1.1.0-RC1&#34;&gt;release candidate&lt;/a&gt; targeting Scala 2.13 (in addition to 2.12). We invite interested users to test the release candidate and submit further improvements.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;scalac-profiling&lt;/code&gt; in any sbt project by specifying the following project setting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;addCompilerPlugin(&#34;ch.epfl.scala&#34; %% &#34;scalac-profiling&#34; % &#34;&amp;lt;version&amp;gt;&#34; cross CrossVersion.full)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;To learn how to use the plugin, read &lt;a href=&#34;https://www.scala-lang.org/blog/2018/06/04/scalac-profiling.html&#34;&gt;Speeding Up Compilation Time with &lt;code&gt;scalac-profiling&lt;/code&gt;&lt;/a&gt; in the scala-lang blog.&lt;/p&gt; &#xA;&lt;p&gt;Note that in Scala 2.13, the preferred form of the compiler option to enable statistics is &lt;code&gt;-Vstatistics&lt;/code&gt;. It is part of the family of &lt;code&gt;-V&lt;/code&gt; flags that enable various &#34;verbose&#34; behaviors. (In 2.12, the flag is called &lt;code&gt;-Ystatistics&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;h3&gt;Compiler plugin options&lt;/h3&gt; &#xA;&lt;p&gt;All the compiler plugin options are &lt;strong&gt;prepended by &lt;code&gt;-P:scalac-profiling:&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;generate-global-flamegraph&lt;/code&gt;: Creates a global flamegraph of implicit searches for all compilation units. Use the &lt;code&gt;-P:scalac-profiling:sourceroot&lt;/code&gt; option to manage the root directory, otherwise, a working directory (defined by the &lt;code&gt;user.dir&lt;/code&gt; property) will be picked.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;generate-macro-flamegraph&lt;/code&gt;: Generate a flamegraph for macro expansions. The flamegraph for implicit searches is enabled by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;generate-profiledb&lt;/code&gt;: Generate profiledb.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;print-failed-implicit-macro-candidates&lt;/code&gt;: Print trees of all failed implicit searches that triggered a macro expansion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;print-search-result&lt;/code&gt;: Print the result retrieved by an implicit search. Example: &lt;code&gt;-P:scalac-profiling:print-search-result:$MACRO_ID&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;show-concrete-implicit-tparams&lt;/code&gt;: Use more concrete type parameters in the implicit search flamegraph. Note that it may change the shape of the flamegraph.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;show-profiles&lt;/code&gt;: Show implicit searches and macro expansions by type and call-site.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sourceroot&lt;/code&gt;: Tell the plugin what is the source directory of the project. Example: &lt;code&gt;-P:scalac-profiling:sourceroot:$PROJECT_BASE_DIR&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Historical context&lt;/h2&gt; &#xA;&lt;p&gt;The historical context of this project is quite interesting. For those wondering about the details, see the &lt;a href=&#34;https://raw.githubusercontent.com/scalacenter/scalac-profiling/main/HISTORICALCONTEXT.md&#34;&gt;dedicated section&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>