<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-05T01:39:42Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alephium/alephium</title>
    <updated>2023-12-05T01:39:42Z</updated>
    <id>tag:github.com,2023-12-05:/alephium/alephium</id>
    <link href="https://github.com/alephium/alephium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reference client for Alephium protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alephium&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/alephium/alephium&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/alephium/alephium/branch/master/graph/badge.svg?token=0CK4HQ910R&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/JErgRBfRSB&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/747741246667227157?logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the reference implementation of Alephium, a sharded blockchain that makes programmable money scalable and secure. For more information, please visit the &lt;a href=&#34;https://wiki.alephium.org/&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The protocol&#39;s innovations extend battle-tested ideas from &lt;a href=&#34;https://bitcoin.org/bitcoin.pdf&#34;&gt;Bitcoin&lt;/a&gt; and &lt;a href=&#34;https://ethereum.org/en/whitepaper/&#34;&gt;Ethereum&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BlockFlow algorithm based on UTXO model enables sharding and scalability for today (code + &lt;a href=&#34;https://github.com/alephium/research/raw/master/alephium.pdf&#34;&gt;algorithm paper&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The first sharding algorithm that supports &lt;code&gt;single-step cross-shard transactions&lt;/code&gt;, offering the same user experience as single chain&lt;/li&gt; &#xA;   &lt;li&gt;Simple and elegant &lt;code&gt;PoW based sharding&lt;/code&gt;, does not rely on beacon chain&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Stateful UTXO model&lt;/code&gt; combines the advantages of both eUTXO model and account model (see code, wiki to come) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tokens are first-class citizens and UTXO-based, which are &lt;code&gt;owned by users&lt;/code&gt; directly instead of contracts&lt;/li&gt; &#xA;   &lt;li&gt;Offer the same expressiveness as &lt;code&gt;account model&lt;/code&gt;. DApps can be easily built on top of it with better security&lt;/li&gt; &#xA;   &lt;li&gt;Support &lt;code&gt;multiple participants&lt;/code&gt; in a single smart contract transaction. Multiple calls can be packed into a single transaction too.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Novel VM design resolves many critical challenges of dApp platforms (see code, wiki to come) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Less IO intensive&lt;/li&gt; &#xA;   &lt;li&gt;Flash loan is not available by design&lt;/li&gt; &#xA;   &lt;li&gt;Eliminate many attack vectors of EVM, including unlimited authorization, double dip issue, reentrancy attack, etc&lt;/li&gt; &#xA;   &lt;li&gt;UTXO style &lt;code&gt;fine-grained execution model&lt;/code&gt; reduces risk-free arbitrage&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Front-running mitigation&lt;/code&gt; through random execution of transactions (see code, wiki to come)&lt;/li&gt; &#xA; &lt;li&gt;PoLW algorithm reduces the energy consumption of PoW in the long term (&lt;a href=&#34;https://github.com/alephium/research/raw/master/polw.pdf&#34;&gt;research paper&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Adaptive rewards based on hashrate and timestamp are designed and implemented&lt;/li&gt; &#xA;   &lt;li&gt;Internal mining cost through burning will be activated when hashrate and energy consumption is significantly high&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;The following dependencies must be installed in order to run the JAR deliverable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;java (11+)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;You can obtain our latest single JAR distribution from the GitHub releases and start the application using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -jar alephium-&amp;lt;VERSION&amp;gt;.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build From Source&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;In order to build the project from source the following dependencies must be installed on your system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;java (11+)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org/getting-started/sbt-track/getting-started-with-scala-and-sbt-on-the-command-line.html&#34;&gt;SBT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Single JAR&lt;/h3&gt; &#xA;&lt;p&gt;Use the following command to build a single runnable JAR :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make assembly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting assembly file will appear in &lt;code&gt;/app/target/scala-2.13/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Universal Zip distribution&lt;/h3&gt; &#xA;&lt;p&gt;Use the following command to build a zip distribution including launch scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting package file will appear in the &lt;code&gt;app/target/scala-2.13/universal&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Image&lt;/h3&gt; &#xA;&lt;p&gt;Use the following command to build a docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can define user specific settings in the file &lt;code&gt;$ALEPHIUM_HOME/user.conf&lt;/code&gt;, where by default &lt;code&gt;$ALEPHIUM_HOME&lt;/code&gt; points to &lt;code&gt;~/.alephium&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;There are two kinds of tests:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Unit tests and property based tests, which can be run with the &lt;code&gt;make test&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;Integration tests, which can be run with the &lt;code&gt;make itest&lt;/code&gt; command.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Have a look at our contribution guide described in &lt;a href=&#34;https://raw.githubusercontent.com/alephium/alephium/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;img src=&#34;https://www.yourkit.com/images/yklogo.png&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;YourKit supports open source projects with innovative and intelligent tools for monitoring and profiling Java and .NET applications. YourKit is the creator of &lt;a href=&#34;https://www.yourkit.com/java/profiler/&#34;&gt;YourKit Java Profiler&lt;/a&gt;, &lt;a href=&#34;https://www.yourkit.com/.net/profiler/&#34;&gt;YourKit .NET Profiler&lt;/a&gt;, and &lt;a href=&#34;https://www.yourkit.com/youmonitor/&#34;&gt;YourKit YouMonitor&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>scala/scala-seed.g8</title>
    <updated>2023-12-05T01:39:42Z</updated>
    <id>tag:github.com,2023-12-05:/scala/scala-seed.g8</id>
    <link href="https://github.com/scala/scala-seed.g8" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Giter8 template for a simple hello world app in Scala.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scala 2 seed template&lt;/h1&gt; &#xA;&lt;h2&gt;Template usage&lt;/h2&gt; &#xA;&lt;p&gt;This is a &lt;a href=&#34;http://www.foundweekends.org/giter8/&#34;&gt;Giter8&lt;/a&gt; template for Scala 2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt new scala/scala-seed.g8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Looking for Scala 3 instead?&lt;/h2&gt; &#xA;&lt;p&gt;That&#39;s over at &lt;a href=&#34;https://github.com/scala/scala3.g8&#34;&gt;https://github.com/scala/scala3.g8&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Template license&lt;/h1&gt; &#xA;&lt;p&gt;Written in 2016-2023 by Lightbend, Inc.&lt;/p&gt; &#xA;&lt;p&gt;To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this template to the public domain worldwide. This template is distributed without any warranty. See &lt;a href=&#34;http://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;http://creativecommons.org/publicdomain/zero/1.0/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alephium/explorer-backend</title>
    <updated>2023-12-05T01:39:42Z</updated>
    <id>tag:github.com,2023-12-05:/alephium/explorer-backend</id>
    <link href="https://github.com/alephium/explorer-backend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The explorer backend for Alephium protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alephium explorer backend&lt;/h1&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;1. Install the dependencies&lt;/h3&gt; &#xA;&lt;p&gt;You need to have &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;Postgresql&lt;/a&gt; and &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt; installed in your system.&lt;/p&gt; &#xA;&lt;h3&gt;2. Create the database&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the &lt;code&gt;postgresql&lt;/code&gt; service.&lt;/li&gt; &#xA; &lt;li&gt;Login to the PostgreSQL shell with the default &lt;code&gt;postgres&lt;/code&gt; user: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;psql postgres # or `psql -U postgres` depending on your OS&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ensure that the &lt;code&gt;postgres&lt;/code&gt; role exists, and if not, create it. List all roles: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;postgres=# \du&#xA;&lt;/code&gt;&lt;/pre&gt; Create &lt;code&gt;postgres&lt;/code&gt; role: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;postgres=# CREATE ROLE postgres WITH LOGIN;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Then, create the database: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;postgres=# CREATE DATABASE explorer;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;3. Start the server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sbt app/run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Single Jar&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sbt app/assembly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting assembly file will appear in &lt;code&gt;app/target/scala-2.13/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;5. Restore archived database&lt;/h3&gt; &#xA;&lt;p&gt;Syncing all data from scratch can take a while, you can choose to start from a snapshot instead. Snapshots are available at &lt;a href=&#34;https://archives.alephium.org/&#34;&gt;https://archives.alephium.org/&lt;/a&gt; Download the &lt;code&gt;explore-db&lt;/code&gt; dump you want and simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;psql database_name &amp;lt; dump_file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that &lt;code&gt;database_name&lt;/code&gt; must have been created before, see point 2 on how to do it.&lt;/p&gt; &#xA;&lt;h3&gt;Querying hashes&lt;/h3&gt; &#xA;&lt;p&gt;Hash strings are stored as &lt;a href=&#34;https://www.postgresql.org/docs/9.0/datatype-binary.html&#34;&gt;bytea&lt;/a&gt;. To query a hash string in SQL use the Postgres function &lt;code&gt;decode&lt;/code&gt; which converts it to &lt;code&gt;bytea&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select *&#xA;from &#34;utransactions&#34;&#xA;where &#34;hash&#34; = decode(&#39;f25f43b7fb13b1ec5f1a2d3acd1bebb9d27143cdc4586725162b9d88301b9bd7&#39;, &#39;hex&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;h3&gt;1. Create benchmark database&lt;/h3&gt; &#xA;&lt;p&gt;The benchmark database (set via &lt;a href=&#34;https://raw.githubusercontent.com/alephium/explorer-backend/master/benchmark/src/main/scala/org/alephium/explorer/benchmark/db/BenchmarkSettings.scala&#34;&gt;dbName&lt;/a&gt;) should exist:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE benchmarks;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Set benchmark duration&lt;/h3&gt; &#xA;&lt;p&gt;Update the &lt;code&gt;time&lt;/code&gt; value in the following annotation in &lt;a href=&#34;https://raw.githubusercontent.com/alephium/explorer-backend/master/benchmark/src/main/scala/org/alephium/explorer/benchmark/db/DBBenchmark.scala&#34;&gt;DBBenchmark&lt;/a&gt; to set the benchmark run duration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;@Measurement(iterations = 1, time = 1, timeUnit = TimeUnit.MINUTES)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Executing benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;Execute the following &lt;code&gt;sbt&lt;/code&gt; commands to run JMH benchmarks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt benchmark/jmh:run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The tests are using the Postgresql database and the default &lt;code&gt;postgres&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sbt test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scaladoc&lt;/h2&gt; &#xA;&lt;p&gt;To generate scala-doc run: &lt;code&gt;sbt unidoc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Referencing external libraries in scala-docs&lt;/h3&gt; &#xA;&lt;p&gt;To reference external libraries in scala-docs make sure the library is recognised by adding an &lt;code&gt;apiMapping&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;scalaDocsAPIMapping&lt;/code&gt; in &lt;code&gt;build.sbt&lt;/code&gt; file as a reference for creating this &lt;code&gt;apiMapping&lt;/code&gt; for an external library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def myLibraryAPIMapping(classPath: Classpath, scalaVersion: String): (sbt.File, sbt.URL) =&#xA;  ??? //follow `scalaDocsAPIMapping` in build.sbt&#xA;&#xA;//add the apiMapping to the project that depends on `myLibrary`&#xA;apiMappings ++=&#xA;  Map(&#xA;    myLibraryAPIMapping(&#xA;      classPath = (Compile / fullClasspath).value,&#xA;      scalaVersion = scalaVersion.value&#xA;    )&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Node Customization&lt;/h2&gt; &#xA;&lt;p&gt;The steps below are for developers who want to reference a full node on another computer, such as a Raspberry Pi, that is on the same subnet.&lt;/p&gt; &#xA;&lt;h3&gt;Explorer: &lt;code&gt;/app/src/main/resources/application.conf&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;blockflow {&#xA;    host = &#34;full-node-ip-address&#34;&#xA;    port = 12973&#xA;&#xA;    direct-clique-access = false&#xA;    direct-clique-access = ${?BLOCKFLOW_DIRECT_CLIQUE_ACCESS}&#xA;&#xA;    network-id = 0&#xA;    network-id = ${?BLOCKFLOW_NETWORK_ID}&#xA;    groupNum = 4&#xA;    api-key = &#34;full-node-api-key&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Full Node: &lt;code&gt;user.conf&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;alephium.api.api-key = &#34;full-node-api-key&#34;&#xA;alephium.api.network-interface = &#34;0.0.0.0&#34;&#xA;&#xA;alephium.network.bind-address  = &#34;0.0.0.0:9973&#34;&#xA;alephium.network.internal-address  = &#34;full-node-ip-address:9973&#34;&#xA;alephium.network.coordinator-address  = &#34;full-node-ip-address:9973&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>