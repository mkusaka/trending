<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-07T01:55:53Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DataBiosphere/leonardo</title>
    <updated>2022-06-07T01:55:53Z</updated>
    <id>tag:github.com,2022-06-07:/DataBiosphere/leonardo</id>
    <link href="https://github.com/DataBiosphere/leonardo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Notebook service&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/DataBiosphere/leonardo/actions&#34;&gt;&lt;img src=&#34;https://github.com/DataBiosphere/leonardo/workflows/Unit%20tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/DataBiosphere/leonardo&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/DataBiosphere/leonardo/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Leonardo&lt;/h1&gt; &#xA;&lt;p&gt;Leonardo serves as a way to launch compute within the Terra security boundary. It does so via multiple different cloud hardware virtualization mechanisms, currently leveraging only the Google Cloud Platform.&lt;/p&gt; &#xA;&lt;p&gt;Leonardo supports launching the following services for compute:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spark clusters through &lt;a href=&#34;https://cloud.google.com/dataproc/&#34;&gt;Google Dataproc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Virtual machines through &lt;a href=&#34;https://cloud.google.com/compute&#34;&gt;Google Compute Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes &#39;apps&#39; through &lt;a href=&#34;https://cloud.google.com/kubernetes-engine&#34;&gt;Google Kubernetes Engine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, leonardo supports the launching of custom docker images for Jupyter and Rstudio in virtual machines and Dataproc. It also supports launching applications in Kubernetes, with a spotlight on Galaxy.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For more information on APIs, see &lt;a href=&#34;https://notebooks.firecloud.org/&#34;&gt;swagger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For more information on custom docker images, see the &lt;a href=&#34;https://github.com/DataBiosphere/terra-docker&#34;&gt;terra-docker repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For more information on applications we support in Kubernetes, see the &lt;a href=&#34;https://github.com/DataBiosphere/terra-app&#34;&gt;terra-apps repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For more information on Galaxy, see the &lt;a href=&#34;https://github.com/galaxyproject&#34;&gt;Galaxy Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to consume these APIs and functionality via the &lt;a href=&#34;https://terra.bio/&#34;&gt;Terra UI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We use JIRA instead of the issues page on Github. If you would like to see what we are working you can visit our &lt;a href=&#34;https://broadworkbench.atlassian.net/secure/RapidBoard.jspa?rapidView=35&amp;amp;projectKey=IA&#34;&gt;active sprint&lt;/a&gt; or our &lt;a href=&#34;https://broadworkbench.atlassian.net/secure/RapidBoard.jspa?rapidView=35&amp;amp;projectKey=IA&amp;amp;view=planning&amp;amp;selectedIssue=IA-1753&amp;amp;epics=visible&amp;amp;issueLimit=100&amp;amp;selectedEpic=IA-1715&#34;&gt;backlog&lt;/a&gt; on JIRA. You will need to set-up an account to access, but it is open to the public.&lt;/p&gt; &#xA;&lt;h2&gt;Building and running Leonardo&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/DataBiosphere/leonardo.git &#xA;$ cd leonardo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The instructions to run Leo locally are maintained in this &lt;a href=&#34;https://broadworkbench.atlassian.net/wiki/spaces/IA/pages/104399223/Callisto+Developer+Handbook#CallistoDeveloperHandbook-RunningLeoLocally&#34;&gt;confluence article&lt;/a&gt;. It may ask you to make an account, but no permissions are required to view.&lt;/p&gt; &#xA;&lt;h3&gt;Run Leonardo unit tests&lt;/h3&gt; &#xA;&lt;p&gt;Leonardo requires Java 8 due to a dependency on Java&#39;s DNS SPI functionality. This feature is removed in Java 9 and above.&lt;/p&gt; &#xA;&lt;p&gt;Ensure docker is running. Spin up MySQL locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./docker/run-mysql.sh start leonardo  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, if you see error like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Warning: Using a password on the command line interface can be insecure.&#xA;ERROR 2003 (HY000): Can&#39;t connect to MySQL server on &#39;mysql&#39; (113)&#xA;Warning: Using a password on the command line interface can be insecure.&#xA;ERROR 2003 (HY000): Can&#39;t connect to MySQL server on &#39;mysql&#39; (113)&#xA;Warning: Using a password on the command line interface can be insecure.&#xA;ERROR 2003 (HY000): Can&#39;t connect to MySQL server on &#39;mysql&#39; (113)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;docker system prune -a&lt;/code&gt;. If the error persists, try restart your laptop.&lt;/p&gt; &#xA;&lt;p&gt;Build Leonardo and run all unit tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export JAVA_OPTS=&#34;-Dheadless=false -Duser.timezone=UTC -Xmx4g -Xss2M -Xms4G&#34;&#xA;sbt clean compile &#34;project http&#34; test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run a particular test suite, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt &#34;testOnly *LeoAuthProviderHelperSpec&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or a particular test within a suite, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt &#34;testOnly org.broadinstitute.dsde.workbench.leonardo.runtimes.RuntimeCreationDiskSpec -- -z &#34;create runtime and attach a persistent disk&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;map&lt;/code&gt; is a substring within the test name.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;re done, tear down MySQL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./docker/run-mysql.sh stop leonardo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do &lt;code&gt;docker restart leonardo-mysql&lt;/code&gt; if you see &lt;code&gt;java.sql.SQLNonTransientConnectionException: Too many connections&lt;/code&gt; error&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running tests against FIAB Checking FIAB mysql (fina password in /etc/leonardo.conf in firecloud_leonardo-app_1 container)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it firecloud_leonardo-mysql_1 bash&#xA;root@2f5efbd4f138:/# mysql -u leonardo -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run scalafmt&lt;/h2&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://scalameta.org/scalafmt/docs/installation.html&#34;&gt;scalafmt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt scalafmtAll&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Leonardo docker image&lt;/h2&gt; &#xA;&lt;p&gt;To install git-secrets&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-$xslt&#34;&gt;brew install git-secrets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To ensure git hooks are run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-$xslt&#34;&gt;cp -r hooks/ .git/hooks/&#xA;chmod 755 .git/hooks/apply-git-secrets.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build jar, leonardo docker image, and leonardo-notebooks docker image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./docker/build.sh jar -d build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build jar, leonardo docker image, and leonardo-notebooks docker image and push to repos &lt;code&gt;broadinstitute/leonardo&lt;/code&gt; and &lt;code&gt;broadinstitute/leonardo-notebooks&lt;/code&gt; tagged with git hash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./docker/build.sh jar -d push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the leonardo-notebooks docker image with a given tag&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash ./jupyter-docker/build.sh build &amp;lt;TAG NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To push the leonardo-notebooks docker image you built to repo &lt;code&gt;broadinstitute/leonardo-notebooks&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash ./jupyter-docker/build.sh push &amp;lt;TAG NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>scalikejdbc/scalikejdbc</title>
    <updated>2022-06-07T01:55:53Z</updated>
    <id>tag:github.com,2022-06-07:/scalikejdbc/scalikejdbc</id>
    <link href="https://github.com/scalikejdbc/scalikejdbc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tidy SQL-based DB access library for Scala developers. This library naturally wraps JDBC APIs and provides you easy-to-use APIs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ScalikeJDBC&lt;/h1&gt; &#xA;&lt;h2&gt;Just write SQL and get things done!&lt;/h2&gt; &#xA;&lt;p&gt;ScalikeJDBC is a tidy SQL-based DB access library for Scala that naturally wraps JDBC and provides easy-to-use APIs.&lt;/p&gt; &#xA;&lt;p&gt;ScalikeJDBC is practical and production-ready. Use this library for your real projects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://scalikejdbc.org/&#34;&gt;http://scalikejdbc.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:org.scalikejdbc%20AND%20a:scalikejdbc_2.13&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.scalikejdbc/scalikejdbc_2.13.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://starchart.cc/scalikejdbc/scalikejdbc&#34;&gt;&lt;img src=&#34;https://starchart.cc/scalikejdbc/scalikejdbc.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Gitter Chat for Casual Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;English: &lt;a href=&#34;https://gitter.im/scalikejdbc/en?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;日本語 (Japanese): &lt;a href=&#34;https://gitter.im/scalikejdbc/ja?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/_%E3%83%81%E3%83%A3%E3%83%83%E3%83%88%E3%81%B8.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Just add ScalikeJDBC, a JDBC driver, and an slf4j implementation to your sbt build settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies ++= Seq(&#xA;  &#34;org.scalikejdbc&#34; %% &#34;scalikejdbc&#34;        % &#34;4.0.+&#34;,&#xA;  &#34;com.h2database&#34;  %  &#34;h2&#34;                 % &#34;1.4.+&#34;,&#xA;  &#34;ch.qos.logback&#34;  %  &#34;logback-classic&#34;    % &#34;1.2.+&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a Play2 user, take a look at play-support project, too:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/scalikejdbc/scalikejdbc-play-support&#34;&gt;https://github.com/scalikejdbc/scalikejdbc-play-support&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;First example&lt;/h4&gt; &#xA;&lt;p&gt;After adding the above dependencies to your &lt;code&gt;build.sbt&lt;/code&gt;, run &lt;code&gt;sbt console&lt;/code&gt; and execute the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import scalikejdbc._&#xA;&#xA;// initialize JDBC driver &amp;amp; connection pool&#xA;Class.forName(&#34;org.h2.Driver&#34;)&#xA;ConnectionPool.singleton(&#34;jdbc:h2:mem:hello&#34;, &#34;user&#34;, &#34;pass&#34;)&#xA;&#xA;// ad-hoc session provider on the REPL&#xA;implicit val session: DBSession = AutoSession&#xA;&#xA;// table creation, you can run DDL by using #execute as same as JDBC&#xA;sql&#34;&#34;&#34;&#xA;create table members (&#xA;  id serial not null primary key,&#xA;  name varchar(64),&#xA;  created_at timestamp not null&#xA;)&#xA;&#34;&#34;&#34;.execute.apply()&#xA;&#xA;// insert initial data&#xA;Seq(&#34;Alice&#34;, &#34;Bob&#34;, &#34;Chris&#34;) foreach { name =&amp;gt;&#xA;  sql&#34;insert into members (name, created_at) values (${name}, current_timestamp)&#34;.update.apply()&#xA;}&#xA;&#xA;// for now, retrieves all data as Map value&#xA;val entities: List[Map[String, Any]] = sql&#34;select * from members&#34;.map(_.toMap).list.apply()&#xA;&#xA;// defines entity object and extractor&#xA;import java.time._&#xA;case class Member(id: Long, name: Option[String], createdAt: ZonedDateTime)&#xA;object Member extends SQLSyntaxSupport[Member] {&#xA;  override val tableName = &#34;members&#34;&#xA;  def apply(rs: WrappedResultSet) = new Member(&#xA;    rs.long(&#34;id&#34;), rs.stringOpt(&#34;name&#34;), rs.zonedDateTime(&#34;created_at&#34;))&#xA;}&#xA;&#xA;// find all members&#xA;val members: List[Member] = sql&#34;select * from members&#34;.map(rs =&amp;gt; Member(rs)).list.apply()&#xA;&#xA;// use paste mode (:paste) on the Scala REPL&#xA;val m = Member.syntax(&#34;m&#34;)&#xA;val name = &#34;Alice&#34;&#xA;val alice: Option[Member] = withSQL {&#xA;  select.from(Member as m).where.eq(m.name, name)&#xA;}.map(rs =&amp;gt; Member(rs)).single.apply()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How did it go? If you&#39;d like to know more details or see more practical examples, see the full documentation at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://scalikejdbc.org/&#34;&gt;http://scalikejdbc.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Published source code and binary files have the following copyright:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright scalikejdbc.org&#xA;Apache License, Version 2.0&#xA;http://www.apache.org/licenses/LICENSE-2.0.html&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>twitter/util</title>
    <updated>2022-06-07T01:55:53Z</updated>
    <id>tag:github.com,2022-06-07:/twitter/util</id>
    <link href="https://github.com/twitter/util" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wonderful reusable code from Twitter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Twitter Util&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/twitter/util/actions?query=workflow%3A%22continuous+integration%22+branch%3Adevelop&#34;&gt;&lt;img src=&#34;https://github.com/twitter/util/workflows/continuous%20integration/badge.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/twitter/util&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/twitter/util/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/twitter/util/develop/#status&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/status-active-brightgreen.svg?sanitize=true&#34; alt=&#34;Project status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/twitter/finagle?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/twitter/finagle.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/util-core_2.12&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/util-core_2.12/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A bunch of idiomatic, small, general purpose tools.&lt;/p&gt; &#xA;&lt;p&gt;See the Scaladoc &lt;a href=&#34;https://twitter.github.io/util/docs/#com.twitter.util.package&#34;&gt;here&lt;/a&gt; or check out the &lt;a href=&#34;https://twitter.github.io/util&#34;&gt;user guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is used in production at Twitter (and many other organizations), and is being actively developed and maintained.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/util_2.12&#34;&gt;Releases&lt;/a&gt; are done on an approximately monthly schedule. While &lt;a href=&#34;https://semver.org/&#34;&gt;semver&lt;/a&gt; is not followed, the &lt;a href=&#34;https://raw.githubusercontent.com/twitter/util/develop/CHANGELOG.rst&#34;&gt;changelogs&lt;/a&gt; are detailed and include sections on public API breaks and changes in runtime behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We feel that a welcoming community is important and we ask that you follow Twitter&#39;s &lt;a href=&#34;https://github.com/twitter/.github/raw/main/code-of-conduct.md&#34;&gt;Open Source Code of Conduct&lt;/a&gt; in all interactions with the community.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;release&lt;/code&gt; branch of this repository contains the latest stable release of Util, and weekly snapshots are published to the &lt;code&gt;develop&lt;/code&gt; branch. In general pull requests should be submitted against &lt;code&gt;develop&lt;/code&gt;. See &lt;a href=&#34;https://github.com/twitter/util/raw/release/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details about how to contribute.&lt;/p&gt; &#xA;&lt;h1&gt;Using in your project&lt;/h1&gt; &#xA;&lt;p&gt;An example SBT dependency string for the &lt;code&gt;util-core&lt;/code&gt; library would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val utilCore = &#34;com.twitter&#34; %% &#34;util-core&#34; % &#34;22.4.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Units&lt;/h1&gt; &#xA;&lt;h2&gt;Time&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.conversions.DurationOps._&#xA;&#xA;val duration1 = 1.second&#xA;val duration2 = 2.minutes&#xA;duration1.inMillis // =&amp;gt; 1000L&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Space&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.conversions.StorageUnitOps._&#xA;val amount = 8.megabytes&#xA;amount.inBytes // =&amp;gt; 8388608L&#xA;amount.inKilobytes // =&amp;gt; 8192L&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Futures&lt;/h1&gt; &#xA;&lt;p&gt;A Non-actor re-implementation of Scala Futures.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.conversions.DurationOps._&#xA;import com.twitter.util.{Await, Future, Promise}&#xA;&#xA;val f = new Promise[Int]&#xA;val g = f.map { result =&amp;gt; result + 1 }&#xA;f.setValue(1)&#xA;Await.result(g, 1.second) // =&amp;gt; this blocks for the futures result (and eventually returns 2)&#xA;&#xA;// Another option:&#xA;g.onSuccess { result =&amp;gt;&#xA;  println(result) // =&amp;gt; prints &#34;2&#34;&#xA;}&#xA;&#xA;// Using for expressions:&#xA;val xFuture = Future(1)&#xA;val yFuture = Future(2)&#xA;&#xA;for {&#xA;  x &amp;lt;- xFuture&#xA;  y &amp;lt;- yFuture&#xA;} {&#xA;  println(x + y) // =&amp;gt; prints &#34;3&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Future interrupts&lt;/h2&gt; &#xA;&lt;p&gt;Method &lt;code&gt;raise&lt;/code&gt; on &lt;code&gt;Future&lt;/code&gt; (&lt;code&gt;def raise(cause: Throwable)&lt;/code&gt;) raises the interrupt described by &lt;code&gt;cause&lt;/code&gt; to the producer of this &lt;code&gt;Future&lt;/code&gt;. Interrupt handlers are installed on a &lt;code&gt;Promise&lt;/code&gt; using &lt;code&gt;setInterruptHandler&lt;/code&gt;, which takes a partial function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val p = new Promise[T]&#xA;p.setInterruptHandler {&#xA;  case exc: MyException =&amp;gt;&#xA;    // deal with interrupt..&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Interrupts differ in semantics from cancellation in important ways: there can only be one interrupt handler per promise, and interrupts are only delivered if the promise is not yet complete.&lt;/p&gt; &#xA;&lt;h1&gt;Object Pool&lt;/h1&gt; &#xA;&lt;p&gt;The pool order is FIFO.&lt;/p&gt; &#xA;&lt;h2&gt;A pool of constants&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import scala.collection.mutable&#xA;import com.twitter.util.{Await, SimplePool}&#xA;&#xA;val queue = new mutable.Queue[Int] ++ List(1, 2, 3)&#xA;val pool = new SimplePool(queue)&#xA;&#xA;// Note that the pool returns Futures, it doesn&#39;t block on exhaustion.&#xA;assert(Await.result(pool.reserve()) == 1)&#xA;pool.reserve().onSuccess { item =&amp;gt;&#xA;  println(item) // prints &#34;2&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;A pool of dynamically created objects&lt;/h2&gt; &#xA;&lt;p&gt;Here is a pool of even-number generators. It stores 4 numbers at a time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.util.{Future, FactoryPool}&#xA;&#xA;val pool = new FactoryPool[Int](4) {&#xA;  var count = 0&#xA;  def makeItem() = { count += 1; Future(count) }&#xA;  def isHealthy(i: Int) = i % 2 == 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It checks the health when you successfully reserve an object (i.e., when the Future yields).&lt;/p&gt; &#xA;&lt;h1&gt;Hashing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;util-hashing&lt;/code&gt; is a collection of hash functions and hashing distributors (eg. ketama).&lt;/p&gt; &#xA;&lt;p&gt;To use one of the available hash functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.hashing.KeyHasher&#xA;&#xA;KeyHasher.FNV1_32.hashKey(&#34;string&#34;.getBytes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available hash functions are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FNV1_32&#xA;FNV1A_32&#xA;FNV1_64&#xA;FNV1A_64&#xA;KETAMA&#xA;CRC32_ITU&#xA;HSIEH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use &lt;code&gt;KetamaDistributor&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.hashing.{KetamaDistributor, KetamaNode, KeyHasher}&#xA;&#xA;val nodes = List(KetamaNode(&#34;host:port&#34;, 1 /* weight */, &#34;foo&#34; /* handle */))&#xA;val distributor = new KetamaDistributor(nodes, 1 /* num reps */)&#xA;distributor.nodeForHash(&#34;abc&#34;.##) // =&amp;gt; client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Time and Duration&lt;/h1&gt; &#xA;&lt;p&gt;Like arithmetic on doubles, &lt;code&gt;Time&lt;/code&gt; and &lt;code&gt;Duration&lt;/code&gt; arithmetic is now free of overflows. Instead, they overflow to &lt;code&gt;Top&lt;/code&gt; and &lt;code&gt;Bottom&lt;/code&gt; values, which are analogous to positive and negative infinity.&lt;/p&gt; &#xA;&lt;p&gt;Since the resolution of &lt;code&gt;Time.now&lt;/code&gt; has been reduced (and is also more expensive due to its use of system time), a new &lt;code&gt;Stopwatch&lt;/code&gt; API has been introduced in order to calculate durations of time.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s used simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.util.{Duration, Stopwatch}&#xA;val elapsed: () =&amp;gt; Duration = Stopwatch.start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which is read by applying &lt;code&gt;elapsed&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val duration: Duration = elapsed()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2010 Twitter, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0: &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>