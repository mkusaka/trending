<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-10T01:53:09Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scala/scala</title>
    <updated>2022-06-10T01:53:09Z</updated>
    <id>tag:github.com,2022-06-10:/scala/scala</id>
    <link href="https://github.com/scala/scala" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala 2 compiler and standard library. For bugs, see scala/bug&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome!&lt;/h1&gt; &#xA;&lt;p&gt;This is the home of the &lt;a href=&#34;https://www.scala-lang.org&#34;&gt;Scala 2&lt;/a&gt; standard library, compiler, and language spec.&lt;/p&gt; &#xA;&lt;h1&gt;How to contribute&lt;/h1&gt; &#xA;&lt;p&gt;Issues and bug reports for Scala 2 are located in &lt;a href=&#34;https://github.com/scala/bug&#34;&gt;scala/bug&lt;/a&gt;. That tracker is also where new contributors may find issues to work on: &lt;a href=&#34;https://github.com/scala/bug/labels/good%20first%20issue&#34;&gt;good first issues&lt;/a&gt;, &lt;a href=&#34;https://github.com/scala/bug/labels/help%20wanted&#34;&gt;help wanted&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For coordinating broader efforts, we also use the &lt;a href=&#34;https://github.com/scala/scala-dev/issues&#34;&gt;scala/scala-dev tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To contribute here, please open a &lt;a href=&#34;https://help.github.com/articles/using-pull-requests/#fork--pull&#34;&gt;pull request&lt;/a&gt; from your fork of this repository.&lt;/p&gt; &#xA;&lt;p&gt;Be aware that we can&#39;t accept additions to the standard library, only modifications to existing code. Binary compatibility forbids adding new public classes or public methods. Additions are made to &lt;a href=&#34;https://github.com/scala/scala-library-next&#34;&gt;scala-library-next&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;We require that you sign the &lt;a href=&#34;https://www.lightbend.com/contribute/cla/scala&#34;&gt;Scala CLA&lt;/a&gt; before we can merge any of your work, to protect Scala&#39;s future as open source software.&lt;/p&gt; &#xA;&lt;p&gt;The general workflow is as follows.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Find/file an issue in scala/bug (or submit a well-documented PR right away!).&lt;/li&gt; &#xA; &lt;li&gt;Fork the scala/scala repo.&lt;/li&gt; &#xA; &lt;li&gt;Push your changes to a branch in your forked repo. For coding guidelines, go &lt;a href=&#34;https://github.com/scala/scala#coding-guidelines&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request to scala/scala from your forked repo.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information on building and developing the core of Scala, read the rest of this README, especially for &lt;a href=&#34;https://github.com/scala/scala#get-ready-to-contribute&#34;&gt;setting up your machine&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;Get in touch!&lt;/h1&gt; &#xA;&lt;p&gt;In order to get in touch with other Scala contributors, join the #scala-contributors channel on the &lt;a href=&#34;https://discord.com/invite/scala&#34;&gt;Scala Discord&lt;/a&gt; chat, or post on &lt;a href=&#34;https://contributors.scala-lang.org&#34;&gt;contributors.scala-lang.org&lt;/a&gt; (Discourse).&lt;/p&gt; &#xA;&lt;p&gt;If you need some help with your PR at any time, please feel free to @-mention anyone from the list below, and we will do our best to help you out:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;username&lt;/th&gt; &#xA;   &lt;th&gt;talk to me about...&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/lrytz&#34; height=&#34;50px&#34; title=&#34;Lukas Rytz&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/lrytz&#34;&gt;&lt;code&gt;@lrytz&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;back end, optimizer, named &amp;amp; default arguments, reporters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/retronym&#34; height=&#34;50px&#34; title=&#34;Jason Zaugg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/retronym&#34;&gt;&lt;code&gt;@retronym&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.12.x branch, compiler performance, weird compiler bugs, lambdas&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/SethTisue&#34; height=&#34;50px&#34; title=&#34;Seth Tisue&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SethTisue&#34;&gt;&lt;code&gt;@SethTisue&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;getting started, build, CI, community build, Jenkins, docs, library, REPL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/dwijnand&#34; height=&#34;50px&#34; title=&#34;Dale Wijnand&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dwijnand&#34;&gt;&lt;code&gt;@dwijnand&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;pattern matcher, MiMa, partest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/Ichoran&#34; height=&#34;50px&#34; title=&#34;Rex Kerr&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Ichoran&#34;&gt;&lt;code&gt;@Ichoran&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;collections library, performance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/viktorklang&#34; height=&#34;50px&#34; title=&#34;Viktor Klang&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/viktorklang&#34;&gt;&lt;code&gt;@viktorklang&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;concurrency, futures&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/sjrd&#34; height=&#34;50px&#34; title=&#34;SÃ©bastien Doeraene&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sjrd&#34;&gt;&lt;code&gt;@sjrd&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;interactions with Scala.js&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/NthPortal&#34; height=&#34;50px&#34; title=&#34;Princess | April&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NthPortal&#34;&gt;&lt;code&gt;@NthPortal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;library, concurrency, &lt;code&gt;scala.math&lt;/code&gt;, &lt;code&gt;LazyList&lt;/code&gt;, &lt;code&gt;Using&lt;/code&gt;, warnings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/bishabosha&#34; height=&#34;50px&#34; title=&#34;Jamie Thompson&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bishabosha&#34;&gt;&lt;code&gt;@bishabosha&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TASTy reader&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/joroKr21&#34; height=&#34;50px&#34; title=&#34;Georgi Krastev&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/joroKr21&#34;&gt;&lt;code&gt;@joroKr21&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;higher-kinded types, implicits, variance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;P.S.: If you have some spare time to help out around here, we would be delighted to add your name to this list!&lt;/p&gt; &#xA;&lt;h1&gt;Branches&lt;/h1&gt; &#xA;&lt;p&gt;Target the oldest branch you would like your changes to end up in. We periodically merge forward from older release branches (e.g., 2.12.x) to new ones (e.g. 2.13.x).&lt;/p&gt; &#xA;&lt;p&gt;If your change is difficult to merge forward, you may be asked to also submit a separate PR targeting the newer branch.&lt;/p&gt; &#xA;&lt;p&gt;If your change is version-specific and shouldn&#39;t be merged forward, put &lt;code&gt;[nomerge]&lt;/code&gt; in the PR name.&lt;/p&gt; &#xA;&lt;p&gt;If your change is a backport from a newer branch and thus doesn&#39;t need to be merged forward, put &lt;code&gt;[backport]&lt;/code&gt; in the PR name.&lt;/p&gt; &#xA;&lt;h2&gt;Choosing a branch&lt;/h2&gt; &#xA;&lt;p&gt;Most changes should target 2.13.x. We are increasingly reluctant to target 2.12.x unless there is a special reason (e.g. if an especially bad bug is found, or if there is commercial sponsorship).&lt;/p&gt; &#xA;&lt;p&gt;The 2.11.x branch is now &lt;a href=&#34;https://github.com/scala/scala-dev/issues/451&#34;&gt;inactive&lt;/a&gt; and no further 2.11.x releases are planned (unless unusual, unforeseeable circumstances arise). You should not target 2.11.x without asking maintainers first.&lt;/p&gt; &#xA;&lt;h1&gt;Repository structure&lt;/h1&gt; &#xA;&lt;p&gt;Most importantly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scala/&#xA;+--build.sbt                 The main sbt build definition&#xA;+--project/                  The rest of the sbt build&#xA;+--src/                      All sources&#xA;   +---/library              Scala Standard Library&#xA;   +---/reflect              Scala Reflection&#xA;   +---/compiler             Scala Compiler&#xA;+--test/                     The Scala test suite&#xA;   +---/files                Partest tests&#xA;   +---/junit                JUnit tests&#xA;   +---/scalacheck           ScalaCheck tests&#xA;+--spec/                     The Scala language specification&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but also:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scala/&#xA;   +---/library-aux          Scala Auxiliary Library, for bootstrapping and documentation purposes&#xA;   +---/interactive          Scala Interactive Compiler, for clients such as an IDE (aka Presentation Compiler)&#xA;   +---/intellij             IntelliJ project templates&#xA;   +---/manual               Scala&#39;s runner scripts &#34;man&#34; (manual) pages&#xA;   +---/partest              Scala&#39;s internal parallel testing framework&#xA;   +---/partest-javaagent    Partest&#39;s helper java agent&#xA;   +---/repl                 Scala REPL core&#xA;   +---/repl-frontend        Scala REPL frontend&#xA;   +---/scaladoc             Scala&#39;s documentation tool&#xA;   +---/scalap               Scala&#39;s class file decompiler&#xA;   +---/testkit              Scala&#39;s unit-testing kit&#xA;+--admin/                    Scripts for the CI jobs and releasing&#xA;+--doc/                      Additional licenses and copyrights&#xA;+--scripts/                  Scripts for the CI jobs and releasing&#xA;+--tools/                    Scripts useful for local development&#xA;+--build/                    Build products&#xA;+--dist/                     Build products&#xA;+--target/                   Build products&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Get ready to contribute&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;You need the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java SDK. The baseline version is 8 for both 2.12.x and 2.13.x. It is almost always fine to use a later SDK such as 11 or 15 for local development. CI will verify against the baseline version.&lt;/li&gt; &#xA; &lt;li&gt;sbt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MacOS and Linux work. Windows may work if you use Cygwin. Community help with keeping the build working on Windows and documenting any needed setup is appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Tools we use&lt;/h2&gt; &#xA;&lt;p&gt;We are grateful for the following OSS licenses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ej-technologies.com/products/jprofiler/overview.html&#34;&gt;JProfiler Java profiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yourkit.com/java/profiler/&#34;&gt;YourKit Java Profiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/download/&#34;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build setup&lt;/h2&gt; &#xA;&lt;h3&gt;Basics&lt;/h3&gt; &#xA;&lt;p&gt;During ordinary development, a new Scala build is built by the previously released version, known as the &#34;reference compiler&#34; or, slangily, as &#34;STARR&#34; (stable reference release). Building with STARR is sufficient for most kinds of changes.&lt;/p&gt; &#xA;&lt;p&gt;However, a full build of Scala is &lt;em&gt;bootstrapped&lt;/em&gt;. Bootstrapping has two steps: first, build with STARR; then, build again using the freshly built compiler, leaving STARR behind. This guarantees that every Scala version can build itself.&lt;/p&gt; &#xA;&lt;p&gt;If you change the code generation part of the Scala compiler, your changes will only show up in the bytecode of the library and compiler after a bootstrap. Our CI does a bootstrapped build.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bootstrapping locally&lt;/strong&gt;: To perform a bootstrap, run &lt;code&gt;restarrFull&lt;/code&gt; within an sbt session. This will build and publish the Scala distribution to your local artifact repository and then switch sbt to use that version as its new &lt;code&gt;scalaVersion&lt;/code&gt;. You may then revert back with &lt;code&gt;reload&lt;/code&gt;. Note &lt;code&gt;restarrFull&lt;/code&gt; will also write the STARR version to &lt;code&gt;buildcharacter.properties&lt;/code&gt; so you can switch back to it with &lt;code&gt;restarr&lt;/code&gt; without republishing. This will switch the sbt session to use the &lt;code&gt;build-restarr&lt;/code&gt; and &lt;code&gt;target-restarr&lt;/code&gt; directories instead of &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt;, which avoids wiping out classfiles and incremental metadata. IntelliJ will continue to be configured to compile and run tests using the starr version in &lt;code&gt;versions.properties&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For history on how the current scheme was arrived at, see &lt;a href=&#34;https://groups.google.com/d/topic/scala-internals/gp5JsM1E0Fo/discussion&#34;&gt;https://groups.google.com/d/topic/scala-internals/gp5JsM1E0Fo/discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Building with fatal warnings&lt;/strong&gt;: To make warnings in the project fatal (i.e. turn them into errors), run &lt;code&gt;set Global / fatalWarnings := true&lt;/code&gt; in sbt (replace &lt;code&gt;Global&lt;/code&gt; with the name of a moduleâsuch as &lt;code&gt;reflect&lt;/code&gt;âto only make warnings fatal for that module). To disable fatal warnings again, either &lt;code&gt;reload&lt;/code&gt; sbt, or run &lt;code&gt;set Global / fatalWarnings := false&lt;/code&gt; (again, replace &lt;code&gt;Global&lt;/code&gt; with the name of a module if you only enabled fatal warnings for that module). CI always has fatal warnings enabled.&lt;/p&gt; &#xA;&lt;h3&gt;Using the sbt build&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve started an &lt;code&gt;sbt&lt;/code&gt; session you can run one of the core commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;compile&lt;/code&gt; compiles all sub-projects (library, reflect, compiler, scaladoc, etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scala&lt;/code&gt; / &lt;code&gt;scalac&lt;/code&gt; run the REPL / compiler directly from sbt (accept options / arguments)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enableOptimizer&lt;/code&gt; reloads the build with the Scala optimizer enabled. Our releases are built this way. Enable this when working on compiler performance improvements. When the optimizer is enabled the build will be slower and incremental builds can be incorrect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setupPublishCore&lt;/code&gt; runs &lt;code&gt;enableOptimizer&lt;/code&gt; and configures a version number based on the current Git SHA. Often used as part of bootstrapping: &lt;code&gt;sbt setupPublishCore publishLocal &amp;amp;&amp;amp; sbt -Dstarr.version=&amp;lt;VERSION&amp;gt; testAll&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dist/mkBin&lt;/code&gt; generates runner scripts (&lt;code&gt;scala&lt;/code&gt;, &lt;code&gt;scalac&lt;/code&gt;, etc) in &lt;code&gt;build/quick/bin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dist/mkPack&lt;/code&gt; creates a build in the Scala distribution format in &lt;code&gt;build/pack&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;junit/test&lt;/code&gt; runs the JUnit tests; &lt;code&gt;junit/testOnly *Foo&lt;/code&gt; runs a subset&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scalacheck/test&lt;/code&gt; runs scalacheck tests, use &lt;code&gt;testOnly&lt;/code&gt; to run a subset&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;partest&lt;/code&gt; runs partest tests (accepts options, try &lt;code&gt;partest --help&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;publishLocal&lt;/code&gt; publishes a distribution locally (can be used as &lt;code&gt;scalaVersion&lt;/code&gt; in other sbt projects) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optionally &lt;code&gt;set baseVersionSuffix := &#34;bin-abcd123-SNAPSHOT&#34;&lt;/code&gt; where &lt;code&gt;abcd123&lt;/code&gt; is the git hash of the revision being published. You can also use something custom like &lt;code&gt;&#34;bin-mypatch&#34;&lt;/code&gt;. This changes the version number from &lt;code&gt;2.13.2-SNAPSHOT&lt;/code&gt; to something more stable (&lt;code&gt;2.13.2-bin-abcd123-SNAPSHOT&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Note that the &lt;code&gt;-bin&lt;/code&gt; string marks the version binary compatible. Using it in sbt will cause the &lt;code&gt;scalaBinaryVersion&lt;/code&gt; to be &lt;code&gt;2.13&lt;/code&gt;. If the version is not binary compatible, we recommend using &lt;code&gt;-pre&lt;/code&gt;, e.g., &lt;code&gt;2.14.0-pre-abcd123-SNAPSHOT&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Optionally &lt;code&gt;set publishArtifact in (Compile, packageDoc) in ThisBuild := false&lt;/code&gt; to skip generating / publishing API docs (speeds up the process).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a command results in an error message like &lt;code&gt;a module is not authorized to depend on itself&lt;/code&gt;, it may be that a global sbt plugin is causing a cyclical dependency. Try disabling global sbt plugins (perhaps by temporarily commenting them out in &lt;code&gt;~/.sbt/1.0/plugins/plugins.sbt&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Sandbox&lt;/h4&gt; &#xA;&lt;p&gt;We recommend keeping local test files in the &lt;code&gt;sandbox&lt;/code&gt; directory which is listed in the &lt;code&gt;.gitignore&lt;/code&gt; of the Scala repo.&lt;/p&gt; &#xA;&lt;h4&gt;Incremental compilation&lt;/h4&gt; &#xA;&lt;p&gt;Note that sbt&#39;s incremental compilation is often too coarse for the Scala compiler codebase and re-compiles too many files, resulting in long build times (check &lt;a href=&#34;https://github.com/sbt/sbt/issues/1104&#34;&gt;sbt#1104&lt;/a&gt; for progress on that front). In the meantime you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use IntelliJ IDEA for incremental compiles (see &lt;a href=&#34;https://raw.githubusercontent.com/scala/scala/2.13.x/#ide-setup&#34;&gt;IDE Setup&lt;/a&gt; below) - its incremental compiler is a bit less conservative, but usually correct.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;IDE setup&lt;/h3&gt; &#xA;&lt;p&gt;We suggest using IntelliJ IDEA (see &lt;a href=&#34;https://raw.githubusercontent.com/scala/scala/2.13.x/src/intellij/README.md&#34;&gt;src/intellij/README.md&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;Metals&lt;/a&gt; may also work, but we don&#39;t yet have instructions or sample configuration for that. A pull request in this area would be exceedingly welcome. In the meantime, we are collecting guidance at &lt;a href=&#34;https://github.com/scala/scala-dev/issues/668&#34;&gt;scala/scala-dev#668&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to use IntelliJ&#39;s incremental compiler:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run &lt;code&gt;dist/mkBin&lt;/code&gt; in sbt to get a build and the runner scripts in &lt;code&gt;build/quick/bin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run &#34;Build&#34; - &#34;Make Project&#34; in IntelliJ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now you can edit and build in IntelliJ and use the scripts (compiler, REPL) to directly test your changes. You can also run the &lt;code&gt;scala&lt;/code&gt;, &lt;code&gt;scalac&lt;/code&gt; and &lt;code&gt;partest&lt;/code&gt; commands in sbt. Enable &#34;Ant mode&#34; (explained above) to prevent sbt&#39;s incremental compiler from re-compiling (too many) files before each &lt;code&gt;partest&lt;/code&gt; invocation.&lt;/p&gt; &#xA;&lt;h1&gt;Coding guidelines&lt;/h1&gt; &#xA;&lt;p&gt;Our guidelines for contributing are explained in &lt;a href=&#34;https://raw.githubusercontent.com/scala/scala/2.13.x/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. It contains useful information on our coding standards, testing, documentation, how we use git and GitHub and how to get your code reviewed.&lt;/p&gt; &#xA;&lt;p&gt;You may also want to check out the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://scala-lang.org/contribute/hacker-guide.html&#34;&gt;&#34;Scala Hacker Guide&#34;&lt;/a&gt; covers some of the same ground as this README, but in greater detail and in a more tutorial style, using a running example.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org&#34;&gt;Scala documentation site&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Scala CI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/scala/scala&#34;&gt;&lt;img src=&#34;https://travis-ci.com/scala/scala.svg?branch=2.13.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you submit a PR your commits will be automatically tested by the Scala CI.&lt;/p&gt; &#xA;&lt;p&gt;Our CI setup is always evolving. See &lt;a href=&#34;https://github.com/scala/scala-dev/issues/751&#34;&gt;scala/scala-dev#751&lt;/a&gt; for more details on how things currently work and how we expect they might change.&lt;/p&gt; &#xA;&lt;p&gt;If you see a spurious failure on Jenkins, you can post &lt;code&gt;/rebuild&lt;/code&gt; as a PR comment. The &lt;a href=&#34;https://github.com/scala/scabot&#34;&gt;scabot README&lt;/a&gt; lists all available commands.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to test your patch before having everything polished for review, you can have Travis CI build your branch (make sure you have a fork and have Travis CI enabled for branch builds on it first, and then push your branch). Also feel free to submit a draft PR. In case your draft branch contains a large number of commits (that you didn&#39;t clean up / squash yet for review), consider adding &lt;code&gt;[ci: last-only]&lt;/code&gt; to the PR title. That way only the last commit will be tested, saving some energy and CI-resources. Note that inactive draft PRs will be closed eventually, which does not mean the change is being rejected.&lt;/p&gt; &#xA;&lt;p&gt;CI performs a compiler bootstrap. The first task, &lt;code&gt;validatePublishCore&lt;/code&gt;, publishes a build of your commit to the temporary repository &lt;a href=&#34;https://scala-ci.typesafe.com/artifactory/scala-pr-validation-snapshots&#34;&gt;https://scala-ci.typesafe.com/artifactory/scala-pr-validation-snapshots&lt;/a&gt;. Note that this build is not yet bootstrapped, its bytecode is built using the current STARR. The version number is &lt;code&gt;2.13.2-bin-abcd123-SNAPSHOT&lt;/code&gt; where &lt;code&gt;abcd123&lt;/code&gt; is the commit hash. For binary incompatible builds, the version number is &lt;code&gt;2.14.0-pre-abcd123-SNAPSHOT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use Scala builds in the validation repository locally by adding a resolver and specifying the corresponding &lt;code&gt;scalaVersion&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sbt&#xA;&amp;gt; set resolvers += &#34;pr&#34; at &#34;https://scala-ci.typesafe.com/artifactory/scala-pr-validation-snapshots/&#34;&#xA;&amp;gt; set scalaVersion := &#34;2.12.2-bin-abcd123-SNAPSHOT&#34;&#xA;&amp;gt; console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&#34;Nightly&#34; builds&lt;/h2&gt; &#xA;&lt;p&gt;The Scala CI builds nightly download releases and publishes them to &lt;a href=&#34;https://scala-ci.typesafe.com/artifactory/scala-integration/&#34;&gt;https://scala-ci.typesafe.com/artifactory/scala-integration/&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;Using a nightly build in sbt is explained in &lt;a href=&#34;https://stackoverflow.com/questions/40622878&#34;&gt;this Stack Overflow answer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Although we casually refer to these as &#34;nightly&#34; builds, they aren&#39;t actually built nightly, but &#34;mergely&#34;. That is to say, a build is published for every merged PR.&lt;/p&gt; &#xA;&lt;h2&gt;Scala CI internals&lt;/h2&gt; &#xA;&lt;p&gt;The Scala CI runs as a Jenkins instance on &lt;a href=&#34;https://scala-ci.typesafe.com/&#34;&gt;scala-ci.typesafe.com&lt;/a&gt;, configured by a chef cookbook at &lt;a href=&#34;https://github.com/scala/scala-jenkins-infra&#34;&gt;scala/scala-jenkins-infra&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The build bot that watches PRs, triggers testing builds and applies the &#34;reviewed&#34; label after an LGTM comment is in the &lt;a href=&#34;https://github.com/scala/scabot&#34;&gt;scala/scabot&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;h2&gt;Community build&lt;/h2&gt; &#xA;&lt;p&gt;The Scala community build is an important method for testing Scala releases. A community build can be launched for any Scala commit, even before the commit&#39;s PR has been merged. That commit is then used to build a large number of open-source projects from source and run their test suites.&lt;/p&gt; &#xA;&lt;p&gt;To request a community build run on your PR, just ask in a comment on the PR and a Scala team member (probably @SethTisue) will take care of it. (&lt;a href=&#34;https://github.com/scala/community-builds/wiki#can-i-run-it-against-a-pull-request-in-scalascala&#34;&gt;details&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Community builds run on the Scala Jenkins instance. The jobs are named &lt;code&gt;..-integrate-community-build&lt;/code&gt;. See the &lt;a href=&#34;https://github.com/scala/community-builds&#34;&gt;scala/community-builds&lt;/a&gt; repo.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/hwacha</title>
    <updated>2022-06-10T01:53:09Z</updated>
    <id>tag:github.com,2022-06-10:/ucb-bar/hwacha</id>
    <link href="https://github.com/ucb-bar/hwacha" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microarchitecture implementation of the decoupled vector-fetch accelerator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hwacha Vector-Thread Co-Processor Sources&lt;/h1&gt; &#xA;&lt;p&gt;To use this co-processor, include this repo as a git submodule and add it as to your chip&#39;s &lt;code&gt;build.sbt&lt;/code&gt; as a Project, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lazy val hwacha = Project(file(&#34;hwacha&#34;), &#34;hwacha&#34;)&#xA;  .settings(buildSettings)&#xA;  .dependsOn(rocketchip)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hwacha depends on the Rocket Chip project. Make sure the proper JARs are installed. For more information on how to use this co-processor, refer to (&lt;a href=&#34;https://github.com/ucb-bar/chipyard&#34;&gt;https://github.com/ucb-bar/chipyard&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/SynapseML</title>
    <updated>2022-06-10T01:53:09Z</updated>
    <id>tag:github.com,2022-06-10:/microsoft/SynapseML</id>
    <link href="https://github.com/microsoft/SynapseML" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple and Distributed Machine Learning&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://mmlspark.azureedge.net/icons/mmlspark.svg?sanitize=true&#34; alt=&#34;SynapseML&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Synapse Machine Learning&lt;/h1&gt; &#xA;&lt;p&gt;SynapseML (previously MMLSpark) is an open source library to simplify the creation of scalable machine learning pipelines. SynapseML builds on &lt;a href=&#34;https://github.com/apache/spark&#34;&gt;Apache Spark&lt;/a&gt; and SparkML to enable new kinds of machine learning, analytics, and model deployment workflows. SynapseML adds many deep learning and data science tools to the Spark ecosystem, including seamless integration of Spark Machine Learning pipelines with the &lt;a href=&#34;https://onnx.ai&#34;&gt;Open Neural Network Exchange (ONNX)&lt;/a&gt;, &lt;a href=&#34;https://github.com/Microsoft/LightGBM&#34;&gt;LightGBM&lt;/a&gt;, &lt;a href=&#34;https://azure.microsoft.com/en-us/services/cognitive-services/&#34;&gt;The Cognitive Services&lt;/a&gt;, &lt;a href=&#34;https://vowpalwabbit.org/&#34;&gt;Vowpal Wabbit&lt;/a&gt;, and &lt;a href=&#34;http://www.opencv.org/&#34;&gt;OpenCV&lt;/a&gt;. These tools enable powerful and highly-scalable predictive and analytical models for a variety of datasources.&lt;/p&gt; &#xA;&lt;p&gt;SynapseML also brings new networking capabilities to the Spark Ecosystem. With the HTTP on Spark project, users can embed &lt;strong&gt;any&lt;/strong&gt; web service into their SparkML models. For production grade deployment, the Spark Serving project enables high throughput, sub-millisecond latency web services, backed by your Spark cluster.&lt;/p&gt; &#xA;&lt;p&gt;SynapseML requires Scala 2.12, Spark 3.2+, and Python 3.6+. See the API documentation &lt;a href=&#34;https://mmlspark.blob.core.windows.net/docs/0.9.5/scala/index.html#package&#34;&gt;for Scala&lt;/a&gt; and &lt;a href=&#34;https://mmlspark.blob.core.windows.net/docs/0.9.5/pyspark/index.html&#34;&gt;for PySpark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Topics&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Links&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Build&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://msdata.visualstudio.com/A365/_build/latest?definitionId=17563&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://msdata.visualstudio.com/A365/_apis/build/status/microsoft.SynapseML?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Microsoft/SynapseML&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Microsoft/SynapseML/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Version&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/Microsoft/SynapseML/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-0.9.5-blue&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Microsoft/SynapseML/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-notes-blue&#34; alt=&#34;Release Notes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#sbt&#34;&gt;&lt;img src=&#34;https://mmlspark.blob.core.windows.net/icons/badges/master_version3.svg?sanitize=true&#34; alt=&#34;Snapshot Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Docs&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://mmlspark.blob.core.windows.net/docs/0.9.5/scala/index.html#package&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=api%20docs&amp;amp;message=scala&amp;amp;color=blue&amp;amp;logo=scala&#34; alt=&#34;Scala Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mmlspark.blob.core.windows.net/docs/0.9.5/pyspark/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=api%20docs&amp;amp;message=python&amp;amp;color=blue&amp;amp;logo=python&#34; alt=&#34;PySpark Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/1810.08744&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/academic-paper-7fdcf7&#34; alt=&#34;Academic Paper&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Support&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://gitter.im/Microsoft/MMLSpark?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Microsoft/MMLSpark.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;mailto:synapseml-support@microsoft.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/mail-synapseml--support-brightgreen&#34; alt=&#34;Mail&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Binder&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://mybinder.org/v2/gh/microsoft/SynapseML/master?labpath=notebooks%2Ffeatures&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;Binder&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;summary&gt;&lt;strong&gt;&lt;em&gt;Table of Contents&lt;/em&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#documentation-and-examples&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#setup-and-installation&#34;&gt;Setup and installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#papers&#34;&gt;Publications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#learn-more&#34;&gt;Learn More&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#contributing--feedback&#34;&gt;Contributing &amp;amp; feedback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#other-relevant-projects&#34;&gt;Other relevant projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img width=&#34;800&#34; src=&#34;https://mmlspark.blob.core.windows.net/graphics/Readme/vw-blue-dark-orange.svg?sanitize=true&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img width=&#34;800&#34; src=&#34;https://mmlspark.blob.core.windows.net/graphics/Readme/cog_services_on_spark_2.svg?sanitize=true&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img width=&#34;800&#34; src=&#34;https://mmlspark.blob.core.windows.net/graphics/Readme/decision_tree_recolor.png&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img width=&#34;800&#34; src=&#34;https://mmlspark.blob.core.windows.net/graphics/Readme/mmlspark_serving_recolor.svg?sanitize=true&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://microsoft.github.io/SynapseML/docs/features/vw/about/&#34;&gt;&lt;strong&gt;Vowpal Wabbit on Spark&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://microsoft.github.io/SynapseML/docs/features/cognitive_services/CognitiveServices%20-%20Overview/&#34;&gt;&lt;strong&gt;The Cognitive Services for Big Data&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/&#34;&gt;&lt;strong&gt;LightGBM on Spark&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://microsoft.github.io/SynapseML/docs/features/spark_serving/about/&#34;&gt;&lt;strong&gt;Spark Serving&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Fast, Sparse, and Effective Text Analytics&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Leverage the Microsoft Cognitive Services at Unprecedented Scales in your existing SparkML pipelines&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Train Gradient Boosted Machines with LightGBM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Serve any Spark Computation as a Web Service with Sub-Millisecond Latency&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img width=&#34;800&#34; src=&#34;https://mmlspark.blob.core.windows.net/graphics/Readme/microservice_recolor.png&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img width=&#34;800&#34; src=&#34;https://mmlspark.blob.core.windows.net/graphics/emails/onnxai-ar21_crop.svg?sanitize=true&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img width=&#34;800&#34; src=&#34;https://mmlspark.blob.core.windows.net/graphics/emails/scales.svg?sanitize=true&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img width=&#34;800&#34; src=&#34;https://mmlspark.blob.core.windows.net/graphics/Readme/bindings.png&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://microsoft.github.io/SynapseML/docs/features/cognitive_services/CognitiveServices%20-%20Overview/#arbitrary-web-apis&#34;&gt;&lt;strong&gt;HTTP on Spark&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://microsoft.github.io/SynapseML/docs/features/onnx/about/&#34;&gt;&lt;strong&gt;ONNX on Spark&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://microsoft.github.io/SynapseML/docs/features/responsible_ai/Model%20Interpretation%20on%20Spark/&#34;&gt;&lt;strong&gt;Responsible AI&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://microsoft.github.io/SynapseML/docs/reference/developer-readme/#packagepython&#34;&gt;&lt;strong&gt;Spark Binding Autogeneration&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;An Integration Between Spark and the HTTP Protocol, enabling Distributed Microservice Orchestration&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Distributed and Hardware Accelerated Model Inference on Spark&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Understand Opaque-box Models and Measure Dataset Biases&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Automatically Generate Spark bindings for PySpark and SparklyR&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img width=&#34;150&#34; src=&#34;https://mmlspark.blob.core.windows.net/graphics/emails/isolation forest 3.svg&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img width=&#34;150&#34; src=&#34;https://mmlspark.blob.core.windows.net/graphics/emails/cyberml.svg?sanitize=true&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img width=&#34;150&#34; src=&#34;https://mmlspark.blob.core.windows.net/graphics/emails/conditional_knn.svg?sanitize=true&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://microsoft.github.io/SynapseML/docs/documentation/estimators/estimators_core/#isolationforest&#34;&gt;&lt;strong&gt;Isolation Forest on Spark&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/microsoft/SynapseML/raw/master/notebooks/features/other/CyberML%20-%20Anomalous%20Access%20Detection.ipynb&#34;&gt;&lt;strong&gt;CyberML&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://microsoft.github.io/SynapseML/docs/features/other/ConditionalKNN%20-%20Exploring%20Art%20Across%20Cultures/&#34;&gt;&lt;strong&gt;Conditional KNN&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Distributed Nonlinear Outlier Detection&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Machine Learning Tools for Cyber Security&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Scalable KNN Models with Conditional Queries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation and Examples&lt;/h2&gt; &#xA;&lt;p&gt;For quickstarts, documentation, demos, and examples please see our &lt;a href=&#34;https://aka.ms/spark&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup and installation&lt;/h2&gt; &#xA;&lt;p&gt;First select the correct platform that you are installing SynapseML into:&lt;/p&gt; &#xA;&lt;!--ts--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#synapse-analytics&#34;&gt;Synapse Analytics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#databricks&#34;&gt;Databricks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#python-standalone&#34;&gt;Python Standalone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#spark-submit&#34;&gt;Spark Submit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#sbt&#34;&gt;SBT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#apache-livy-and-hdinsight&#34;&gt;Apachy Livy and HDInsight&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#r-beta&#34;&gt;R (Beta)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/#building-from-source&#34;&gt;Building from Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--te--&gt; &#xA;&lt;h3&gt;Synapse Analytics&lt;/h3&gt; &#xA;&lt;p&gt;In Azure Synapse notebooks please place the following in the first cell of your notebook.&lt;/p&gt; &#xA;&lt;p&gt;For Spark 3.2 Pools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;%%configure -f&#xA;{&#xA;  &#34;name&#34;: &#34;synapseml&#34;,&#xA;  &#34;conf&#34;: {&#xA;      &#34;spark.jars.packages&#34;: &#34;com.microsoft.azure:synapseml_2.12:0.9.5&#34;,&#xA;      &#34;spark.jars.repositories&#34;: &#34;https://mmlspark.azureedge.net/maven&#34;,&#xA;      &#34;spark.jars.excludes&#34;: &#34;org.scala-lang:scala-reflect,org.apache.spark:spark-tags_2.12,org.scalactic:scalactic_2.12,org.scalatest:scalatest_2.12&#34;,&#xA;      &#34;spark.yarn.user.classpath.first&#34;: &#34;true&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Spark 3.1 Pools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;%%configure -f&#xA;{&#xA;  &#34;name&#34;: &#34;synapseml&#34;,&#xA;  &#34;conf&#34;: {&#xA;      &#34;spark.jars.packages&#34;: &#34;com.microsoft.azure:synapseml_2.12:0.9.5-13-d1b51517-SNAPSHOT&#34;,&#xA;      &#34;spark.jars.repositories&#34;: &#34;https://mmlspark.azureedge.net/maven&#34;,&#xA;      &#34;spark.jars.excludes&#34;: &#34;org.scala-lang:scala-reflect,org.apache.spark:spark-tags_2.12,org.scalactic:scalactic_2.12,org.scalatest:scalatest_2.12&#34;,&#xA;      &#34;spark.yarn.user.classpath.first&#34;: &#34;true&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install at the pool level instead of the notebook level &lt;a href=&#34;https://techcommunity.microsoft.com/t5/azure-synapse-analytics-blog/how-to-set-spark-pyspark-custom-configs-in-synapse-workspace/ba-p/2114434&#34;&gt;add the spark properties listed above to the pool configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Databricks&lt;/h3&gt; &#xA;&lt;p&gt;To install SynapseML on the &lt;a href=&#34;http://community.cloud.databricks.com&#34;&gt;Databricks cloud&lt;/a&gt;, create a new &lt;a href=&#34;https://docs.databricks.com/user-guide/libraries.html#libraries-from-maven-pypi-or-spark-packages&#34;&gt;library from Maven coordinates&lt;/a&gt; in your workspace.&lt;/p&gt; &#xA;&lt;p&gt;For the coordinates use: &lt;code&gt;com.microsoft.azure:synapseml_2.12:0.9.5&lt;/code&gt; with the resolver: &lt;code&gt;https://mmlspark.azureedge.net/maven&lt;/code&gt;. Ensure this library is attached to your target cluster(s).&lt;/p&gt; &#xA;&lt;p&gt;Finally, ensure that your Spark cluster has at least Spark 3.2 and Scala 2.12. If you encounter Netty dependency issues please use DBR 10.1.&lt;/p&gt; &#xA;&lt;p&gt;You can use SynapseML in both your Scala and PySpark notebooks. To get started with our example notebooks import the following databricks archive:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;https://mmlspark.blob.core.windows.net/dbcs/SynapseMLExamplesv0.9.5.dbc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Python Standalone&lt;/h3&gt; &#xA;&lt;p&gt;To try out SynapseML on a Python (or Conda) installation you can get Spark installed via pip with &lt;code&gt;pip install pyspark&lt;/code&gt;. You can then use &lt;code&gt;pyspark&lt;/code&gt; as in the above example, or from python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pyspark&#xA;spark = pyspark.sql.SparkSession.builder.appName(&#34;MyApp&#34;) \&#xA;            .config(&#34;spark.jars.packages&#34;, &#34;com.microsoft.azure:synapseml_2.12:0.9.5&#34;) \&#xA;            .getOrCreate()&#xA;import synapse.ml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spark Submit&lt;/h3&gt; &#xA;&lt;p&gt;SynapseML can be conveniently installed on existing Spark clusters via the &lt;code&gt;--packages&lt;/code&gt; option, examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;spark-shell --packages com.microsoft.azure:synapseml_2.12:0.9.5&#xA;pyspark --packages com.microsoft.azure:synapseml_2.12:0.9.5&#xA;spark-submit --packages com.microsoft.azure:synapseml_2.12:0.9.5 MyApp.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SBT&lt;/h3&gt; &#xA;&lt;p&gt;If you are building a Spark application in Scala, add the following lines to your &lt;code&gt;build.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;com.microsoft.azure&#34; % &#34;synapseml_2.12&#34; % &#34;0.9.5&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Apache Livy and HDInsight&lt;/h3&gt; &#xA;&lt;p&gt;To install SynapseML from within a Jupyter notebook served by Apache Livy the following configure magic can be used. You will need to start a new session after this configure cell is executed.&lt;/p&gt; &#xA;&lt;p&gt;Excluding certain packages from the library may be necessary due to current issues with Livy 0.5.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;%%configure -f&#xA;{&#xA;    &#34;name&#34;: &#34;synapseml&#34;,&#xA;    &#34;conf&#34;: {&#xA;        &#34;spark.jars.packages&#34;: &#34;com.microsoft.azure:synapseml_2.12:0.9.5&#34;,&#xA;        &#34;spark.jars.excludes&#34;: &#34;org.scala-lang:scala-reflect,org.apache.spark:spark-tags_2.12,org.scalactic:scalactic_2.12,org.scalatest:scalatest_2.12&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to evaluate SynapseML is via our pre-built Docker container. To do so, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -p 8888:8888 -e ACCEPT_EULA=yes mcr.microsoft.com/mmlspark/release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Navigate to &lt;a href=&#34;http://localhost:8888/&#34;&gt;http://localhost:8888/&lt;/a&gt; in your web browser to run the sample notebooks. See the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/docs/docker.md&#34;&gt;documentation&lt;/a&gt; for more on Docker use.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To read the EULA for using the docker image, run \ &lt;code&gt;docker run -it -p 8888:8888 mcr.microsoft.com/mmlspark/release eula&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;R (Beta)&lt;/h3&gt; &#xA;&lt;p&gt;To try out SynapseML using the R autogenerated wrappers &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/website/docs/reference/R-setup.md&#34;&gt;see our instructions&lt;/a&gt;. Note: This feature is still under development and some necessary custom wrappers may be missing.&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;SynapseML has recently transitioned to a new build infrastructure. For detailed developer docs please see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/website/docs/reference/developer-readme.md&#34;&gt;Developer Readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are an existing synapsemldeveloper, you will need to reconfigure your development setup. We now support platform independent development and better integrate with intellij and SBT. If you encounter issues please reach out to our support email!&lt;/p&gt; &#xA;&lt;h2&gt;Papers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2009.08044&#34;&gt;Large Scale Intelligent Microservices&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2007.07177&#34;&gt;Conditional Image Retrieval&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1810.08744&#34;&gt;MMLSpark: Unifying Machine Learning Ecosystems at Massive Scales&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1804.04031&#34;&gt;Flexible and Scalable Deep Learning with SynapseML&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Visit our &lt;a href=&#34;https://microsoft.github.io/SynapseML/&#34; title=&#34;aka.ms/spark&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Watch our keynote demos at &lt;a href=&#34;https://youtu.be/T_fs4C0aqD0?t=425&#34;&gt;the Spark+AI Summit 2019&lt;/a&gt;, &lt;a href=&#34;https://youtu.be/N3ozCZXeOeU?t=472&#34;&gt;the Spark+AI European Summit 2018&lt;/a&gt;, and &lt;a href=&#34;https://databricks.com/sparkaisummit/north-america/spark-summit-2018-keynotes#Intelligent-cloud&#34; title=&#34;Developing for the Intelligent Cloud and Intelligent Edge&#34;&gt;the Spark+AI Summit 2018&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See how SynapseML is used to &lt;a href=&#34;https://www.microsoft.com/en-us/ai/ai-lab-stories?activetab=pivot1:primaryr3&#34; title=&#34;Identifying snow leopards with AI&#34;&gt;help endangered species&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Explore generative adversarial artwork in &lt;a href=&#34;https://www.microsoft.com/en-us/ai/ai-lab-stories?activetab=pivot1:primaryr4&#34; title=&#34;Generative art at the MET&#34;&gt;our collaboration with The MET and MIT&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Explore &lt;a href=&#34;https://blogs.technet.microsoft.com/machinelearning/2018/03/05/image-data-support-in-apache-spark/&#34; title=&#34;Image Data Support in Apache Spark&#34;&gt;our collaboration with Apache Spark&lt;/a&gt; on image analysis.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing &amp;amp; feedback&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/SynapseML/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for contribution guidelines.&lt;/p&gt; &#xA;&lt;p&gt;To give feedback and/or report an issue, open a &lt;a href=&#34;https://help.github.com/articles/creating-an-issue/&#34;&gt;GitHub Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other relevant projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/VowpalWabbit/vowpal_wabbit&#34;&gt;Vowpal Wabbit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/LightGBM&#34;&gt;LightGBM&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/DMTK&#34;&gt;DMTK: Microsoft Distributed Machine Learning Toolkit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/Recommenders&#34;&gt;Recommenders&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/alipay/jpmml-sparkml-lightgbm&#34;&gt;JPMML-SparkML plugin for converting SynapseML LightGBM models to PMML&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/CNTK&#34;&gt;Microsoft Cognitive Toolkit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;ApacheÂ®, Apache Spark, and SparkÂ® are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>