<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-28T01:52:55Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ucb-bar/rocket-dsp-utils</title>
    <updated>2022-06-28T01:52:55Z</updated>
    <id>tag:github.com,2022-06-28:/ucb-bar/rocket-dsp-utils</id>
    <link href="https://github.com/ucb-bar/rocket-dsp-utils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for integrating DspTools components into a rocket-chip&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ROCKET-DSP-UTILS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ucb-bar/dsptools/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/chick/rocket-dsp-utils/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository is part of a transition to move the rocket subdirectory from &lt;a href=&#34;&#34;&gt;ucb-bar/dsptools&lt;/a&gt; to its own repository&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This README will be filled out later. At the moment it will only contain instructions to run it locally&lt;/p&gt; &#xA;&lt;p&gt;Goals: Get the rocket sub-project of dsptools to run within the chipyard environment. It is based on running using the chipyards rocket-chip commit&lt;/p&gt; &#xA;&lt;p&gt;Steps&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Checkout &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip&#34;&gt;rocket-chip&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;git checkout 3b3169cb04bd5a7be4ec0be04a4cbe1a794c540e&lt;/li&gt; &#xA;   &lt;li&gt;make the following changes to build.sbt so that jars will be produced&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git diff build.sbt&#xA;diff --git a/build.sbt b/build.sbt&#xA;index 09d5f98bd..f2f54af58 100644&#xA;--- a/build.sbt&#xA;+++ b/build.sbt&#xA;@@ -65,14 +65,13 @@ lazy val chiselPluginLib = &#34;edu.berkeley.cs&#34; % &#34;chisel3-plugin&#34; % chiselVersion&#xA;&#xA; lazy val `api-config-chipsalliance` = (project in file(&#34;api-config-chipsalliance/build-rules/sbt&#34;))&#xA;   .settings(commonSettings)&#xA;-  .settings(publishArtifact := false)&#xA; lazy val hardfloat  = (project in file(&#34;hardfloat&#34;))&#xA;   .sourceDependency(chiselRef, chiselLib)&#xA;   .settings(addCompilerPlugin(chiselPluginLib))&#xA;   .settings(commonSettings)&#xA;   .settings(publishArtifact := false)&#xA; lazy val `rocket-macros` = (project in file(&#34;macros&#34;)).settings(commonSettings)&#xA;-  .settings(publishArtifact := false)&#xA;+  // .settings(publishArtifact := false)&#xA; lazy val rocketchip = (project in file(&#34;.&#34;))&#xA;   .sourceDependency(chiselRef, chiselLib)&#xA;   .settings(addCompilerPlugin(chiselPluginLib))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sbt &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;rocket-macros / publishLocal&lt;/li&gt; &#xA;   &lt;li&gt;api-config-chipsalliance / publishLocal&lt;/li&gt; &#xA;   &lt;li&gt;publishLocal&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;should be able to edit/compile/run things &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I have not run all tests yet.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;PLEASE let me know if this does not work for you&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Questionable code is marked with //TODO: CHIPYARD&lt;/li&gt; &#xA; &lt;li&gt;Using local publishing of everything was just to get jump started, can modify build approach after getting things working&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This code is maintained by &lt;a href=&#34;https://github.com/chick&#34;&gt;Chick&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rchain/rchain</title>
    <updated>2022-06-28T01:52:55Z</updated>
    <id>tag:github.com,2022-06-28:/rchain/rchain</id>
    <link href="https://github.com/rchain/rchain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blockchain (smart contract) platform using CBC-Casper proof of stake + rholang for concurrent execution.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RChain&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rchain/rchain/actions?query=workflow%3ACI+branch%3Astaging&#34;&gt;&lt;img src=&#34;https://github.com/rchain/rchain/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/rchain/rchain&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/rchain/rchain/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The open-source RChain project is building a decentralized, economic, censorship-resistant, public compute infrastructure and blockchain. It will host and execute programs popularly referred to as “smart contracts”. It will be trustworthy, scalable, concurrent, with proof-of-stake consensus and content delivery.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.rchain.coop/&#34;&gt;RChain Developer&lt;/a&gt; features project-related tutorials and documentation, project planning information, events calendar, and information for how to engage with this project.&lt;/p&gt; &#xA;&lt;h2&gt;Note on the use of this software&lt;/h2&gt; &#xA;&lt;p&gt;This code has not yet completed a security review. We strongly recommend that you do not use it in production or to transfer items of material value. We take no responsibility for any loss you may incur through the use of this code.&lt;/p&gt; &#xA;&lt;h2&gt;Use the public testnet&lt;/h2&gt; &#xA;&lt;p&gt;The RChain Cooperative maintains a public testnet running the latest version of RNode. Learn more at &lt;a href=&#34;https://rchain.atlassian.net/wiki/spaces/CORE/pages/678756429/RChain+public+testnet+information&#34;&gt;RChain public testnet information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$ docker pull rchain/rnode:latest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debian/Ubuntu&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download a &lt;code&gt;.deb&lt;/code&gt; package from the &lt;a href=&#34;https://github.com/rchain/rchain/releases/&#34;&gt;releases page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ sudo apt install ./rnode_&amp;lt;VERSION&amp;gt;.deb&lt;/code&gt;, where &lt;code&gt;&amp;lt;VERSION&amp;gt;&lt;/code&gt; is something like &lt;code&gt;0.9.18&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;RedHat/Fedora&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download a &lt;code&gt;.rpm&lt;/code&gt; package from the &lt;a href=&#34;https://github.com/rchain/rchain/releases/&#34;&gt;releases page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ sudo rpm -U ./rnode_&amp;lt;VERSION&amp;gt;.noarch.rpm&lt;/code&gt;, where &lt;code&gt;&amp;lt;VERSION&amp;gt;&lt;/code&gt; is something like &lt;code&gt;0.9.18&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Homebrew by following steps at the &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew homepage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ brew install rchain/rchain/rnode&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Docker will be used in the examples port portability reasons, but running the node as a standalone process is very similar.&lt;/p&gt; &#xA;&lt;p&gt;To fetch the latest version of RNode from the remote Docker hub and run it (exit with &lt;code&gt;C-c&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -it -p 40400:40400 rchain/rnode:latest&#xA;&#xA;# With binding of RNode data directory to the host directory $HOME/rnode &#xA;$ docker run -v $HOME/rnode:/var/lib/rnode -it -p 40400:40400 rchain/rnode:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to use both the peer-to-peer network and REPL capabilities of the node, you need to run more than one Docker RNode on the same host, the containers need to be connected to one user-defined network bridge:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker network create rnode-net&#xA;&#xA;$ docker run -dit --name rnode0 --network rnode-net rchain/rnode:latest run -s&#xA;&#xA;$ docker ps&#xA;CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS     NAMES&#xA;ef770b4d4139   rchain/rnode:latest   &#34;bin/rnode --profile…&#34;   23 seconds ago   Up 22 seconds             rnode0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To attach terminal to RNode logstream execute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker logs -f rnode0&#xA;[...]&#xA;08:38:11.460 [main] INFO  logger - Listening for traffic on rnode://137200d47b8bb0fff54a753aabddf9ee2bfea089@172.18.0.2?protocol=40400&amp;amp;discovery=40404&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A repl instance can be invoked in a separate terminal using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -it --rm --name rnode-repl --network rnode-net rchain/rnode:latest --grpc-host rnode0 --grpc-port 40402 repl&#xA;&#xA;  ╦═╗┌─┐┬ ┬┌─┐┬┌┐┌  ╔╗╔┌─┐┌┬┐┌─┐  ╦═╗╔═╗╔═╗╦  &#xA;  ╠╦╝│  ├─┤├─┤││││  ║║║│ │ ││├┤   ╠╦╝║╣ ╠═╝║  &#xA;  ╩╚═└─┘┴ ┴┴ ┴┴┘└┘  ╝╚╝└─┘─┴┘└─┘  ╩╚═╚═╝╩  ╩═╝&#xA;    &#xA;rholang $&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Type &lt;code&gt;@42!(&#34;Hello!&#34;)&lt;/code&gt; in REPL console. This command should result in (&lt;code&gt;rnode0&lt;/code&gt; output):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Evaluating:&#xA;@{42}!(&#34;Hello!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A peer node can be started with the following command (note that &lt;code&gt;--bootstrap&lt;/code&gt; takes the listening address of &lt;code&gt;rnode0&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -it --rm --name rnode1 --network rnode-net rchain/rnode:latest run --bootstrap &#39;rnode://8c775b2143b731a225f039838998ef0fac34ba25@rnode0?protocol=40400&amp;amp;discovery=40404&#39; --host rnode1&#xA;[...]&#xA;15:41:41.818 [INFO ] [node-runner-39      ] [coop.rchain.node.NodeRuntime ] - Starting node that will bootstrap from rnode://8c775b2143b731a225f039838998ef0fac34ba25@rnode0?protocol=40400&amp;amp;discovery=40404&#xA;15:57:37.021 [INFO ] [node-runner-32      ] [coop.rchain.comm.rp.Connect$ ] - Peers: 1&#xA;15:57:46.495 [INFO ] [node-runner-32      ] [c.r.c.util.comm.CommUtil$    ] - Successfully sent ApprovedBlockRequest to rnode://8c775b2143b731a225f039838998ef0fac34ba25@rnode0?protocol=40400&amp;amp;discovery=40404&#xA;15:57:50.463 [INFO ] [node-runner-40      ] [c.r.c.engine.Initializing    ] - Rholang state received and saved to store.&#xA;15:57:50.482 [INFO ] [node-runner-34      ] [c.r.casper.engine.Engine$    ] - Making a transition to Running state.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command should result in (&lt;code&gt;rnode0&lt;/code&gt; output):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;15:57:37.021 [INFO ] [node-runner-42      ] [c.r.comm.rp.HandleMessages$  ] - Responded to protocol handshake request from rnode://e80faf589973c2c1b9b8441790d34a9a0ffdd3ce@rnode1?protocol=40400&amp;amp;discovery=40404&#xA;15:57:37.023 [INFO ] [node-runner-42      ] [coop.rchain.comm.rp.Connect$ ] - Peers: 1&#xA;15:57:46.530 [INFO ] [node-runner-43      ] [c.r.casper.engine.Running$   ] - ApprovedBlock sent to rnode://e80faf589973c2c1b9b8441790d34a9a0ffdd3ce@rnode1?protocol=40400&amp;amp;discovery=40404&#xA;15:57:48.283 [INFO ] [node-runner-43      ] [c.r.casper.engine.Running$   ] - Store items sent to rnode://e80faf589973c2c1b9b8441790d34a9a0ffdd3ce@rnode1?protocol=40400&amp;amp;discovery=40404&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a full list of options rnode accepts, use the &lt;code&gt;--help&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -it --rm rchain/rnode:latest --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration file&lt;/h3&gt; &#xA;&lt;p&gt;Most of the command line options can be specified in a configuration file.&lt;/p&gt; &#xA;&lt;p&gt;The default location of the configuration file is the data directory. An alternative location can be specified with the command line option &lt;code&gt;--config-file &amp;lt;path&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The format of the configuration file is &lt;a href=&#34;https://github.com/lightbend/config/raw/master/HOCON.md&#34;&gt;HOCON&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/rchain/rchain/dev/node/src/main/resources/defaults.conf&#34;&gt;defaults.conf&lt;/a&gt; configuration file shows all options and default values.&lt;/p&gt; &#xA;&lt;p&gt;Example configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;standalone = false&#xA;&#xA;protocol-server {&#xA;  network-id = &#34;testnet&#34;&#xA;  port = 40400&#xA;}&#xA;&#xA;protocol-client {&#xA;  network-id = &#34;testnet&#34;&#xA;  bootstrap = &#34;rnode://de6eed5d00cf080fc587eeb412cb31a75fd10358@52.119.8.109?protocol=40400&amp;amp;discovery=40404&#34;&#xA;}&#xA;&#xA;peers-discovery {&#xA;  port = 40404&#xA;}&#xA;&#xA;api-server {&#xA;  host = &#34;my-rnode.domain.com&#34;&#xA;  port-grpc-external = 40401&#xA;  port-grpc-internal = 40402&#xA;  port-http = 40403&#xA;  port-admin-http = 40405&#xA;}&#xA;&#xA;storage {&#xA;  data-dir = &#34;/my-data-dir&#34;&#xA;}&#xA;&#xA;casper {&#xA;  shard-name = root&#xA;}&#xA;&#xA;metrics {&#xA;  prometheus = false&#xA;  influxdb = false&#xA;  influxdb-udp = false&#xA;  zipkin = false&#xA;  sigar = false&#xA;}&#xA;&#xA;dev-mode = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Compile the project with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sbt clean compile&#xA;&#xA;# With executable and Docker image&#xA;$ sbt clean compile stage docker:publishLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the resulting binary with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./node/target/universal/stage/bin/rnode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more detailed instructions, see the &lt;a href=&#34;https://raw.githubusercontent.com/rchain/rchain/dev/DEVELOPER.md&#34;&gt;developer guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats and filing issues&lt;/h2&gt; &#xA;&lt;h3&gt;Caveats&lt;/h3&gt; &#xA;&lt;p&gt;During this pre-release phase of the RChain software, there are some &lt;a href=&#34;https://github.com/rchain/rchain/issues?q=is%3Aopen+is%3Aissue+label%3Abug&#34;&gt;known issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Filing Issues&lt;/h3&gt; &#xA;&lt;p&gt;File issues in GitHub repository issue tracker: &lt;a href=&#34;https://github.com/rchain/rchain/issues/new/choose&#34;&gt;File a bug&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;We use YourKit to profile rchain performance. YourKit supports open source projects with its full-featured Java Profiler. YourKit, LLC is the creator of &lt;a href=&#34;https://www.yourkit.com/java/profiler/&#34;&gt;YourKit Java Profiler&lt;/a&gt; and &lt;a href=&#34;https://www.yourkit.com/.net/profiler/&#34;&gt;YourKit .NET Profiler&lt;/a&gt;, innovative and intelligent tools for profiling Java and .NET applications.&lt;/p&gt; &#xA;&lt;h2&gt;Licence information&lt;/h2&gt; &#xA;&lt;p&gt;To get summary of licenses being used by the RChain&#39;s dependencies, simply run &lt;code&gt;sbt node/dumpLicenseReport&lt;/code&gt;. The report will be available under &lt;code&gt;node/target/license-reports/rnode-licenses.html&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>