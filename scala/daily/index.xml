<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-14T01:37:16Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/pekko-http</title>
    <updated>2024-10-14T01:37:16Z</updated>
    <id>tag:github.com,2024-10-14:/apache/pekko-http</id>
    <link href="https://github.com/apache/pekko-http" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Streaming-first HTTP server/module of Apache Pekko&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Pekko HTTP&lt;/h1&gt; &#xA;&lt;!--&#xA;[![pekko-http-core Scala version support](https://index.scala-lang.org/pekko/pekko-http/pekko-http-core/latest-by-scala-version.svg)](https://index.scala-lang.org/pekko/pekko-http/pekko-http-core)&#xA;--&gt; &#xA;&lt;p&gt;The Pekko HTTP modules implement a full server- and client-side HTTP stack on top of pekko-actor and pekko-stream. It&#39;s not a web-framework but rather a more general toolkit for providing and consuming HTTP-based services. While interaction with a browser is of course also in scope it is not the primary focus of Pekko HTTP.&lt;/p&gt; &#xA;&lt;p&gt;Pekko HTTP is a fork of &lt;a href=&#34;https://github.com/akka/akka-http&#34;&gt;Akka HTTP&lt;/a&gt; 10.2.x release, prior to the Akka project&#39;s adoption of the Business Source License.&lt;/p&gt; &#xA;&lt;p&gt;Pekko HTTP follows a rather open design and many times offers several different API levels for &#34;doing the same thing&#34;. You get to pick the API level of abstraction that is most suitable for your application. This means that, if you have trouble achieving something using a high-level API, there&#39;s a good chance that you can get it done with a low-level API, which offers more flexibility but might require you to write more application code.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation is available at &lt;a href=&#34;https://pekko.apache.org/docs/pekko-http/current/&#34;&gt;pekko.apache.org&lt;/a&gt;, for &lt;a href=&#34;https://pekko.apache.org/docs/pekko-http/current/scala/http/&#34;&gt;Scala&lt;/a&gt; and &lt;a href=&#34;https://pekko.apache.org/docs/pekko-http/current/java/http/&#34;&gt;Java&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you have installed a Java Development Kit (JDK) version 8 or later.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt; installed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://graphviz.gitlab.io/download/&#34;&gt;Graphviz&lt;/a&gt; is needed for the scaladoc generation build task, which is part of the release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;h2spec&lt;/h3&gt; &#xA;&lt;p&gt;Some tests for HTTP/2 compliance use &lt;a href=&#34;https://github.com/summerwind/h2spec&#34;&gt;h2spec&lt;/a&gt;. The sbt build downloads pre-built binaries from the GitHub releases page for the h2spec project. These binaries are not available for all operating systems. Apple Mac Silicon users may need to install &lt;a href=&#34;https://support.apple.com/en-us/HT211861&#34;&gt;Rosetta&lt;/a&gt; if they do not have it installed already.&lt;/p&gt; &#xA;&lt;h3&gt;Running the Build&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a command window and change directory to your preferred base directory&lt;/li&gt; &#xA; &lt;li&gt;Use git to clone the &lt;a href=&#34;https://github.com/apache/pekko-http&#34;&gt;repo&lt;/a&gt; or download a source release from &lt;a href=&#34;https://pekko.apache.org&#34;&gt;https://pekko.apache.org&lt;/a&gt; (and unzip or untar it, as appropriate)&lt;/li&gt; &#xA; &lt;li&gt;Change directory to the directory where you installed the source (you should have a file called &lt;code&gt;build.sbt&lt;/code&gt; in this directory)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt compile&lt;/code&gt; compiles the main source for project default version of Scala (2.13) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sbt +compile&lt;/code&gt; will compile for all supported versions of Scala&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt test&lt;/code&gt; will compile the code and run the unit tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt testQuick&lt;/code&gt; similar to &lt;code&gt;test&lt;/code&gt; but when repeated in shell mode will only run failing tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt package&lt;/code&gt; will build the jars &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the jars will built into target dirs of the various modules&lt;/li&gt; &#xA;   &lt;li&gt;for the the &#39;http-core&#39; module, the jar will be built to &lt;code&gt;http-core/target/scala-2.13/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt publishLocal&lt;/code&gt; will push the jars to your local Apache Ivy repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt publishM2&lt;/code&gt; will push the jars to your local Apache Maven repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt docs/paradox&lt;/code&gt; will build the docs (the ones describing the module features) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sbt docs/paradoxBrowse&lt;/code&gt; does the same but will open the docs in your browser when complete&lt;/li&gt; &#xA;   &lt;li&gt;the &lt;code&gt;index.html&lt;/code&gt; file will appear in &lt;code&gt;target/paradox/site/main/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt unidoc&lt;/code&gt; will build the Javadocs for all the modules and load them to one place (may require Graphviz, see Prerequisites above) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the &lt;code&gt;index.html&lt;/code&gt; file will appear in &lt;code&gt;target/scala-2.13/unidoc/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt sourceDistGenerate&lt;/code&gt; will generate source release to &lt;code&gt;target/dist/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The version number that appears in filenames and docs is derived, by default. The derived version contains the most git commit id or the date/time (if the directory is not under git control). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can set the version number explicitly when running sbt commands &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;eg &lt;code&gt;sbt &#34;set ThisBuild / version := \&#34;1.0.0\&#34;; sourceDistGenerate&#34;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Or you can add a file called &lt;code&gt;version.sbt&lt;/code&gt; to the same directory that has the &lt;code&gt;build.sbt&lt;/code&gt; containing something like &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;ThisBuild / version := &#34;1.0.0&#34;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions about the contribution process or discuss specific issues, please interact with the community using the following resources.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/pekko-http/discussions&#34;&gt;GitHub discussions&lt;/a&gt;: for questions and general discussion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lists.apache.org/list.html?users@pekko.apache.org&#34;&gt;Pekko users mailing list&lt;/a&gt;: for Pekko development discussions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lists.apache.org/list.html?dev@pekko.apache.org&#34;&gt;Pekko dev mailing list&lt;/a&gt;: for Pekko development discussions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/pekko-http/issues&#34;&gt;GitHub issues&lt;/a&gt;: for bug reports and feature requests. Please search the existing issues before creating new ones. If you are unsure whether you have found a bug, consider asking in GitHub discussions or the mailing list first.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;[stackoverflow-badge]: https://img.shields.io/badge/stackoverflow%3A-pekko--http-blue.svg?style=flat-square&#xA;[stackoverflow]:       https://stackoverflow.com/questions/tagged/pekko-http&#xA;[github-issues-badge]: https://img.shields.io/badge/github%3A-issues-blue.svg?style=flat-square&#xA;[github-issues]:       https://github.com/apache/pekko-http/issues&#xA;[scaladex-badge]:      https://index.scala-lang.org/count.svg?q=dependencies:pekko/pekko-http*&amp;subject=scaladex:&amp;color=blue&amp;style=flat-square&#xA;[scaladex-projects]:   https://index.scala-lang.org/search?q=dependencies:pekko/pekko-http*&#xA;--&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are &lt;em&gt;very&lt;/em&gt; welcome!&lt;/p&gt; &#xA;&lt;p&gt;If you see an issue that you&#39;d like to see fixed, the best way to make it happen is to help out by submitting a pull request. For ideas of where to contribute, &lt;a href=&#34;https://github.com/apache/pekko-http/labels/help%20wanted&#34;&gt;tickets marked as &#34;help wanted&#34;&lt;/a&gt; are a good starting point.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/apache/pekko-http/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more details about the workflow, and general hints on how to prepare your pull request. You can also ask for clarifications or guidance in GitHub issues directly.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache Pekko HTTP is Open Source and available under the Apache 2 License.&lt;/p&gt;</summary>
  </entry>
</feed>