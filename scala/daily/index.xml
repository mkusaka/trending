<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-22T01:42:04Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cloudwu/efkbgfx</title>
    <updated>2024-01-22T01:42:04Z</updated>
    <id>tag:github.com,2024-01-22:/cloudwu/efkbgfx</id>
    <link href="https://github.com/cloudwu/efkbgfx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A bgfx renderer for effekseer runtime&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A bgfx renderer for effekseer runtime&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bgfx : &lt;a href=&#34;https://github.com/bkaradzic/bgfx&#34;&gt;https://github.com/bkaradzic/bgfx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;effekseer : &lt;a href=&#34;https://github.com/effekseer/Effekseer&#34;&gt;https://github.com/effekseer/Effekseer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Status&lt;/h1&gt; &#xA;&lt;p&gt;It&#39;s ready to use, and it keeps up with the latest versions of bgfx and effekseer.&lt;/p&gt; &#xA;&lt;p&gt;All the predefined materials works, but user defined materials are not supported now. It will be supported in future.&lt;/p&gt; &#xA;&lt;p&gt;The callback APIs may change in future , but it will always be simple enough.&lt;/p&gt; &#xA;&lt;p&gt;Contributors are welcome.&lt;/p&gt; &#xA;&lt;h1&gt;Build&lt;/h1&gt; &#xA;&lt;p&gt;Use luamake : &lt;a href=&#34;https://github.com/actboy168/luamake&#34;&gt;https://github.com/actboy168/luamake&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or put source files (in renderer) into your project, and link effekseer library.&lt;/p&gt; &#xA;&lt;h1&gt;How to use&lt;/h1&gt; &#xA;&lt;p&gt;You should initialize a structure &lt;code&gt;EffekseerRendererBGFX::InitArgs&lt;/code&gt; to create a bgfx renderer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;EFXBGFX_API EffekseerRenderer::RendererRef CreateRenderer(struct InitArgs *init);&#xA;EFXBGFX_API Effekseer::ModelRendererRef CreateModelRenderer(EffekseerRenderer::RendererRef renderer, struct InitArgs *init);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These APIs could create the renderer and model renderer for effekseer, See examples for the details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;struct InitArgs {&#xA;&#x9;int squareMaxCount;&#x9;// Max count of sprites&#xA;&#x9;bgfx_view_id_t viewid;&#x9;// The ViewID that effekseer will render to.&#xA;&#x9;bgfx_interface_vtbl_t *bgfx;&#x9;// The bgfx APIs. Use `bgfx_get_interface()`.&#xA;&#xA;&#x9;// Some callback functions, See below for details.&#xA;&#x9;bgfx_shader_handle_t (*shader_load)(const char *mat, const char *name, const char *type, void *ud);&#xA;&#x9;bgfx_texture_handle_t (*texture_get)(int texture_type, void *parm, void *ud);&#x9;// background or depth (with param)&#xA;&#x9;int (*texture_load)(const char *name, int srgb, void *ud);&#xA;&#x9;void (*texture_unload)(int id, void *ud);&#xA;&#x9;bgfx_texture_handle_t (*texture_handle)(int id, void *ud);&#x9;// translate id to handle&#xA;&#x9;void * ud;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bgfx_shader_handle_t shader_load(const char *mat, const char *name, const char *type, void *ud);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When renderer need a shader, it will call this function.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mat&lt;/code&gt; is the material name, NULL for predefined material.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt; is the shader name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt; is &#34;vs&#34; or &#34;fs&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ud&lt;/code&gt; is arguments from &lt;code&gt;InitArgs&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The predefined shaders for bgfx is at &lt;code&gt;shaders&lt;/code&gt; dir, compile them with bgfx toolset by yourself.&lt;/p&gt; &#xA;&lt;p&gt;This function should return a valid bgfx shader handle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int texture_load(const char *name, int srgb, void *ud);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When renderer need a texture, it will call this function.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt; is the texture name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;srgb&lt;/code&gt; true means it should be created as a SRGB texture.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ud&lt;/code&gt; is arguments from &lt;code&gt;InitArgs&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This function should return a texture id. (-1 as invalid) You don&#39;t need load texture immediately, and you can just alloc an id for it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void texture_unload(int id, void *ud);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the texture loaded by &lt;code&gt;texture_load&lt;/code&gt; has not be no longer used by renderer, this function will be called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bgfx_texture_handle_t texture_handle(int id, void *ud);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When renderer use a texture, it will call this function to translate id to bgfx texture handle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bgfx_texture_handle_t texture_get(int texture_type, void *parm, void *ud);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When renderer need the &lt;code&gt;TEXTURE_BACKGROUND&lt;/code&gt; (usually it&#39;s a render target) or the &lt;code&gt;TEXTURE_DEPTH&lt;/code&gt;, it will call this function. When the &lt;code&gt;texture_type&lt;/code&gt; is &lt;code&gt;TEXTURE_DEPTH&lt;/code&gt;, you should offer an additional argument &lt;code&gt;DepthReconstructionParameter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;struct DepthReconstructionParameter {&#xA;&#x9;float DepthBufferScale;&#xA;&#x9;float DepthBufferOffset;&#xA;&#x9;float ProjectionMatrix33;&#xA;&#x9;float ProjectionMatrix34;&#xA;&#x9;float ProjectionMatrix43;&#xA;&#x9;float ProjectionMatrix44;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function should return a valid bgfx texture handle.&lt;/p&gt; &#xA;&lt;p&gt;This callback function can be NULL for optional. If you haven&#39;t offer this callback, some features of effekseer will be disabled.&lt;/p&gt;</summary>
  </entry>
</feed>