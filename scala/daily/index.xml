<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:38:29Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>viperproject/gobra</title>
    <updated>2022-10-16T01:38:29Z</updated>
    <id>tag:github.com,2022-10-16:/viperproject/gobra</id>
    <link href="https://github.com/viperproject/gobra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gobra is an automated, modular verifier for Go programs, based on the Viper verification infrastructure.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/viperproject/gobra/master/.github/docs/gobra.png&#34; height=&#34;250&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/viperproject/gobra/actions?query=workflow%3Atest+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/viperproject/gobra/workflows/test/badge.svg?branch=master&#34; alt=&#34;Test Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/viperproject/gobra/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MPL%202.0-brightgreen.svg?sanitize=true&#34; alt=&#34;License: MPL 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.pm.inf.ethz.ch/research/gobra.html&#34;&gt;Gobra&lt;/a&gt; is a prototype verifier for Go programs, based on the &lt;a href=&#34;https://www.pm.inf.ethz.ch/research/viper.html&#34;&gt;Viper verification infrastructure&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We call annotated Go programs Gobra programs and use the file extension &lt;code&gt;.gobra&lt;/code&gt; for them. A tutorial can be found in &lt;a href=&#34;https://github.com/viperproject/gobra/raw/master/docs/tutorial.md&#34;&gt;&lt;code&gt;docs/tutorial.md&lt;/code&gt;&lt;/a&gt;. More examples can be found in &lt;a href=&#34;https://github.com/viperproject/gobra/raw/master/src/test/resources&#34;&gt;&lt;code&gt;src/test/resources&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compile and Run Gobra&lt;/h2&gt; &#xA;&lt;h3&gt;Preliminaries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 64-Bit (tested with version 11 and 15)&lt;/li&gt; &#xA; &lt;li&gt;SBT (tested with version 1.4.4)&lt;/li&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Z3 and Boogie. Steps (iii) and (iv) are specific to Boogie and only necessary when using Carbon as verification backend. Gobra uses the Silicon verification backend by default. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Get a Z3 executable. A precompiled executable can be downloaded &lt;a href=&#34;https://github.com/Z3Prover/z3/releases&#34;&gt;here&lt;/a&gt;. We tested version 4.8.7 64-Bit.&lt;/li&gt; &#xA;   &lt;li&gt;Set the environment variable &lt;code&gt;Z3_EXE&lt;/code&gt; to the path of your Z3 executable.&lt;/li&gt; &#xA;   &lt;li&gt;Get a Boogie executable. Instructions for compilation are given &lt;a href=&#34;https://github.com/boogie-org/boogie&#34;&gt;here&lt;/a&gt;. &lt;a href=&#34;https://www.mono-project.com/download/stable/&#34;&gt;Mono&lt;/a&gt; is required on Linux and macOS to run Boogie. Alternatively, extract a compiled version from the Viper release tools (&lt;a href=&#34;http://viper.ethz.ch/downloads/ViperToolsReleaseWin.zip&#34;&gt;Windows&lt;/a&gt;, &lt;a href=&#34;http://viper.ethz.ch/downloads/ViperToolsReleaseLinux.zip&#34;&gt;Linux&lt;/a&gt;, &lt;a href=&#34;http://viper.ethz.ch/downloads/ViperToolsReleaseMac.zip&#34;&gt;macOS&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Set the environment variable &lt;code&gt;BOOGIE_EXE&lt;/code&gt; to the path of your Boogie executable.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clone &lt;code&gt;gobra&lt;/code&gt; (this repository) in your computer.&lt;/li&gt; &#xA; &lt;li&gt;Change directory to the &lt;code&gt;gobra&lt;/code&gt; directory created in the previous step.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; to fetch &lt;code&gt;viperserver&lt;/code&gt; and its transitive dependencies (&lt;code&gt;carbon&lt;/code&gt;, &lt;code&gt;silicon&lt;/code&gt; and &lt;code&gt;silver&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;sbt compile&lt;/code&gt; to compile Gobra.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The command &lt;code&gt;sbt assembly&lt;/code&gt; can also be used to produce a fat jar file, which is located by default in &lt;code&gt;target/scala&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running Gobra&lt;/h3&gt; &#xA;&lt;p&gt;Gobra can be run either from sbt or from a compiled jar:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;running from sbt: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;change directory to the &lt;code&gt;gobra&lt;/code&gt; directory obtained from cloning this repository.&lt;/li&gt; &#xA;   &lt;li&gt;run &lt;code&gt;sbt&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;inside the sbt shell, run &lt;code&gt;run - i path/to/file&lt;/code&gt; (e.g., &lt;code&gt;run -i src/test/resources/regressions/examples/swap.gobra&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;running from a compiled jar: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;run &lt;code&gt;java -jar -Xss128m path/to/gobra.jar -i path/to/file&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More information about the available options in Gobra can be found by running &lt;code&gt;run --help&lt;/code&gt; in an sbt shell or &lt;code&gt;java -jar path/to/gobra.jar --help&lt;/code&gt; if you assembled Gobra.&lt;/p&gt; &#xA;&lt;h3&gt;Running the Tests&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;code&gt;gobra&lt;/code&gt; directory, run the command &lt;code&gt;sbt test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Most Gobra sources are licensed under the Mozilla Public License Version 2.0. The &lt;a href=&#34;https://raw.githubusercontent.com/viperproject/gobra/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; lists the exceptions to this rule. Note that source files (whenever possible) should list their license in a short header. Continuous integration checks these file headers. The same checks can be performed locally by running &lt;code&gt;npx github:viperproject/check-license-header#v1 check --config .github/license-check/config.json --strict&lt;/code&gt; in this repository&#39;s root directory.&lt;/p&gt; &#xA;&lt;h2&gt;Get in touch&lt;/h2&gt; &#xA;&lt;p&gt;Do you still have questions? Open an issue or contact us on &lt;a href=&#34;https://gobra.zulipchat.com&#34;&gt;Zulip&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lightbend/kalix-jvm-sdk</title>
    <updated>2022-10-16T01:38:29Z</updated>
    <id>tag:github.com,2022-10-16:/lightbend/kalix-jvm-sdk</id>
    <link href="https://github.com/lightbend/kalix-jvm-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Java and Scala SDKs for Kalix&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kalix Java and Scala SDK&lt;/h1&gt; &#xA;&lt;p&gt;For more information see the documentation for &lt;a href=&#34;https://docs.kalix.io/java/index.html&#34;&gt;implementing Kalix services in Java or Scala&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Parts of the Kalix Java/Scala SDK&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;user-facing packages&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;kalix-java-sdk&lt;/code&gt; and &lt;code&gt;kalix-scala-sdk&lt;/code&gt; The Java/Scala API to build services in Kalix (backed by an implementation in Scala based on Akka gRPC).&lt;/p&gt; &lt;p&gt;See &lt;a href=&#34;https://docs.kalix.io/java/index.html&#34;&gt;Developing with Java or Scala&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;kalix-java-sdk-testkit&lt;/code&gt; and &lt;code&gt;kalix-scala-sdk-testkit&lt;/code&gt; A library to implement integration tests for services with Junit 4 or 5, based on &lt;a href=&#34;https://www.testcontainers.org/&#34;&gt;TestContainers&lt;/a&gt;. Also contains library parts of unit TestKit.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lightbend/kalix-jvm-sdk/main/samples/&#34;&gt;samples&lt;/a&gt; Small example services to illustrate Kalix features. The code provides snippets for the documentation.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;developer tooling&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;codegen/core&lt;/code&gt;, &lt;code&gt;codegen/java-gen&lt;/code&gt;, &lt;code&gt;codegen/scala-gen&lt;/code&gt; Tooling to generate code from Protobuf with annotations.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;maven-java&lt;/code&gt; Maven tooling &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;kalix-maven-plugin&lt;/code&gt; Maven plugin to trigger code generation.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;kalix-maven-archetype-event-sourced-entity&lt;/code&gt; Maven archetype to create a project with an Event-sourced Entity.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;kalix-maven-archetype-value-entity&lt;/code&gt; Maven archetype to create a project with a Value Entity.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sbt-plugin&lt;/code&gt; sbt plugin for code generation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sbt new&lt;/code&gt; (gitter8) templates: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/lightbend/kalix-value-entity.g8&#34;&gt;lightbend/kalix-value-entity.g8&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docs&lt;/code&gt; The documentation feeding into &lt;a href=&#34;https://docs.kalix.io/java/index.html&#34;&gt;Developing with Java or Scala&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;tck&lt;/code&gt; The Technology Compatibility Kit which ensures the Java SDK adheres to the Kalix protocol.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The Kalix Java SDK is Open Source and available under the &lt;a href=&#34;https://raw.githubusercontent.com/lightbend/kalix-jvm-sdk/main/LICENSE&#34;&gt;Apache 2 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>