<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-18T01:44:46Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CodelyTV/scala-ddd-example</title>
    <updated>2023-05-18T01:44:46Z</updated>
    <id>tag:github.com,2023-05-18:/CodelyTV/scala-ddd-example</id>
    <link href="https://github.com/CodelyTV/scala-ddd-example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Î»ðŸŽ¯ Hexagonal Architecture + DDD + CQRS applied in Scala using Akka HTTP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CodelyTV Scala HTTP API&lt;/h1&gt; &#xA;&lt;img src=&#34;http://codely.tv/wp-content/uploads/2016/05/cropped-logo-codelyTV.png&#34; align=&#34;left&#34; width=&#34;192px&#34; height=&#34;192px&#34;&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;0&#34; height=&#34;192px&#34; hspace=&#34;10&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/CodelyTV/cqrs-ddd-scala-example.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/CodelyTV/cqrs-ddd-scala-example&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/CodelyTV/cqrs-ddd-scala-example/master.svg?style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/CodelyTV/cqrs-ddd-scala-example?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/github/CodelyTV/cqrs-ddd-scala-example/master.svg?style=flat-square&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project showing up how you could implement a HTTP API with Scala.&lt;/p&gt; &#xA;&lt;p&gt;This is the first iteration of the project where you will find a very Object Oriented approach. We&#39;ve followed the Ports &amp;amp; Adapters (or Hexagonal Architecture) Software Architecture using &lt;code&gt;trait&lt;/code&gt;s as the domain contracts/ports in order to be implemented by the infrastructure adapters.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/#endpoints&#34;&gt;Endpoints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/#libraries-and-implementation-examples&#34;&gt;Libraries and implementation examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/#environment-setup&#34;&gt;Environment setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/#install-the-needed-tools&#34;&gt;Install the needed tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/#prepare-the-application-environment&#34;&gt;Prepare the application environment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/#run-the-tests-and-start-the-http-server&#34;&gt;Run the tests and start the HTTP server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/#pre-push-git-hook&#34;&gt;Pre-push Git hook&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/#logs&#34;&gt;Logs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/#deploy&#34;&gt;Deploy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Endpoints&lt;/h2&gt; &#xA;&lt;p&gt;One of the goals of this project is to serve as an example for the &lt;a href=&#34;https://pro.codely.tv/library/api-http-con-scala-y-akka/66747/about/&#34;&gt;course on Scala HTTP API (Spanish)&lt;/a&gt; illustrating how to implement several concepts you would commonly find in any production application. In order to accomplish so, we have implemented the following 5 endpoints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /status&lt;/code&gt;: Application status health check.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /videos&lt;/code&gt;: Create new video inserting it into the database and publishing the &lt;code&gt;video_created&lt;/code&gt; domain event to the message queue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /videos&lt;/code&gt;: Obtain all the system videos.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /users&lt;/code&gt;: Create new user inserting it into the database and publishing the &lt;code&gt;user_registered&lt;/code&gt; domain event to the message queue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /users&lt;/code&gt;: Obtain all the system users.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Libraries and implementation examples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th&gt;Implementation examples&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Build tool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/project/Dependencies.scala&#34;&gt;Dependencies&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/project/Configuration.scala&#34;&gt;configuration&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/build.sbt&#34;&gt;build.sbt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Style formatting&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://scalameta.org/scalafmt/&#34;&gt;ScalaFmt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/.scalafmt.conf&#34;&gt;Rules&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTTP server&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://doc.akka.io/docs/akka-http/current/&#34;&gt;Akka HTTP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/main/tv/codely/scala_http_api/entry_point/Routes.scala&#34;&gt;Routes definition&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/main/tv/codely/scala_http_api/entry_point/ScalaHttpApi.scala&#34;&gt;server implementation&lt;/a&gt;,&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/main/tv/codely/scala_http_api/entry_point/controller/video/VideoPostController.scala&#34;&gt;Video POST controller&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/test/tv/codely/scala_http_api/entry_point/VideoEntryPointShould.scala&#34;&gt;its corresponding acceptance test&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSON marshalling&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/spray/spray-json&#34;&gt;Spray JSON&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/main/tv/codely/scala_http_api/module/user/infrastructure/marshaller/UserJsonFormatMarshaller.scala&#34;&gt;User&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/main/tv/codely/scala_http_api/module/user/infrastructure/marshaller/UserNameJsonFormatMarshaller.scala&#34;&gt;User attributes&lt;/a&gt; marshallers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Database integration&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://tpolecat.github.io/doobie/&#34;&gt;Doobie&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/main/tv/codely/scala_http_api/module/video/infrastructure/repository/DoobieMySqlVideoRepository.scala&#34;&gt;Video repository&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/test/tv/codely/scala_http_api/module/video/infrastructure/repository/DoobieMySqlVideoRepositoryShould.scala&#34;&gt;its corresponding integration test&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Domain events publishing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NewMotion/akka-rabbitmq&#34;&gt;Akka RabbitMQ&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/main/tv/codely/scala_http_api/module/shared/infrastructure/message_broker/rabbitmq/RabbitMqMessagePublisher.scala&#34;&gt;Publisher implementation&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/test/tv/codely/scala_http_api/module/shared/infrastructure/message_broker/rabbitmq/RabbitMqMessagePublisherShould.scala&#34;&gt;its corresponding integration test&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Infrastructure management&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/docker-compose.yml&#34;&gt;Docker Compose definition&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logging&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/typesafehub/scala-logging&#34;&gt;ScalaLogging&lt;/a&gt;&lt;br&gt; + &lt;a href=&#34;https://logback.qos.ch/&#34;&gt;Logback&lt;/a&gt;&lt;br&gt; + &lt;a href=&#34;https://github.com/logstash/logstash-logback-encoder&#34;&gt;Logstash encoder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/conf/logback.xml&#34;&gt;Logback configuration&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/main/tv/codely/scala_http_api/module/shared/infrastructure/logger/scala_logging/ScalaLoggingLogger.scala&#34;&gt;logger implementation&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/test/tv/codely/scala_http_api/module/shared/infrastructure/logger/scala_logging/ScalaLoggingLoggerShould.scala&#34;&gt;its corresponding integration test&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Command line command&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/scopt/scopt&#34;&gt;Scopt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/main/tv/codely/scala_http_api/entry_point/cli/DbTablesCreator.scala&#34;&gt;Database tables creation script&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Distribution/deploy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://sbt-native-packager.readthedocs.io/en/latest/&#34;&gt;SBT Native packager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/#Deploy&#34;&gt;Build &amp;amp; deploy instructions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Continuous Integration&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/.travis.yml&#34;&gt;Travis definition&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Acceptance tests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://doc.akka.io/docs/akka-http/current/routing-dsl/testkit.html&#34;&gt;Akka HTTP TestKit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Previously specified acceptance tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Integration tests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.scalatest.org/&#34;&gt;ScalaTest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Previously specified integration tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Unit tests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.scalatest.org/&#34;&gt;ScalaTest&lt;/a&gt;&lt;br&gt; + &lt;a href=&#34;http://scalamock.org/&#34;&gt;ScalaMock&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/src/test/tv/codely/scala_http_api/module/video/application/create/VideoCreatorShould.scala&#34;&gt;Video creator use case test&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Continuous Integration&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;&lt;br&gt; + &lt;a href=&#34;https://github.com/scoverage/sbt-coveralls&#34;&gt;SBT Coveralls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/.travis.yml&#34;&gt;Travis definition&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Environment setup&lt;/h2&gt; &#xA;&lt;h3&gt;Install the needed tools&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository: &lt;code&gt;git clone https://github.com/CodelyTV/cqrs-ddd-scala-example.git cqrs-ddd-scala-example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download and install &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker compose&lt;/a&gt;. We&#39;ll need it in order to run all the project infrastructure.&lt;/li&gt; &#xA; &lt;li&gt;Download and install &lt;a href=&#34;http://www.scala-sbt.org/download.html&#34;&gt;SBT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Prepare the application environment&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/.env.dist&#34;&gt;the Docker environment variables config file&lt;/a&gt; and tune it with your desired values: &lt;code&gt;cp .env.dist .env&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start Docker and bring up the project needed containers: &lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create the database tables in your Docker MySQL container: &lt;code&gt;sbt createDbTables&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Run the tests and start the HTTP server&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enter into the SBT console: &lt;code&gt;sbt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the tests: &lt;code&gt;t&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start the local server: &lt;code&gt;app/run mooc-api&lt;/code&gt; (if you run the app from outside SBT: &lt;code&gt;sbt &#34;app/run mooc-api&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Request for the server status: &lt;code&gt;curl http://localhost:8080/status&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Take a look at the courses related to this repository (Spanish) just in case you&#39;re interested into them! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pro.codely.tv/library/introduccion-a-scala/63278/about/&#34;&gt;IntroducciÃ³n a Scala&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pro.codely.tv/library/api-http-con-scala-y-akka/66747/about/&#34;&gt;API HTTP con Scala y Akka&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pro.codely.tv/library/programacion-funcional-refactorizando-codigo-orientado-a-objetos-con-typeclasses/about/&#34;&gt;ProgramaciÃ³n funcional: Refactorizando cÃ³digo orientado a objetos con TypeClasses&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pro.codely.tv/library/principios-solid-aplicados/77070/about/&#34;&gt;Principios SOLID Aplicados&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pro.codely.tv/library/arquitectura-hexagonal/66748/about/&#34;&gt;Arquitectura Hexagonal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pro.codely.tv/library/cqrs-command-query-responsibility-segregation-3719e4aa/62554/about/&#34;&gt;Command Query Responsibility Segregation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pro.codely.tv/library/comunicacion-entre-microservicios-event-driven-architecture/74823/about/&#34;&gt;ComunicaciÃ³n entre microservicios: Event-Driven Architecture&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pro.codely.tv/library/domain-driven-design-ddd/87157/about/&#34;&gt;Domain-Driven Design&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Pre-push Git hook&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s one Git hook included. It&#39;s inside the &lt;code&gt;doc/hooks&lt;/code&gt; folder and it will run the &lt;code&gt;prep&lt;/code&gt; SBT task before pushing to any remote.&lt;/p&gt; &#xA;&lt;p&gt;This &lt;code&gt;prep&lt;/code&gt; task is intended to run all the checks you consider before pushing. At this very moment, it try to compile and check the code style rules with ScalaFmt.&lt;/p&gt; &#xA;&lt;p&gt;You can define what this task does modifying the &lt;code&gt;prep&lt;/code&gt; task in the &lt;code&gt;build.sbt&lt;/code&gt; file. We like the approach of just running 1 single SBT task as the hook instead of multiple tasks because it&#39;s more efficient (the hook doesn&#39;t have to run SBT multiple times), and also because this way we can control the pre push tasks with the SBT alias defined at the &lt;code&gt;build.sbt&lt;/code&gt; without altering the hooks.&lt;/p&gt; &#xA;&lt;p&gt;In order to install this hook, just &lt;code&gt;cd doc/hooks&lt;/code&gt; and run &lt;code&gt;./install-hooks.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Logs&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve added a logging mechanism thanks to &lt;a href=&#34;https://github.com/qos-ch/logback&#34;&gt;logback&lt;/a&gt; and &lt;a href=&#34;https://github.com/logstash/logstash-logback-encoder/&#34;&gt;logstash-logback-encoder&lt;/a&gt; in order to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Output the log records through the standard output channel (usually, your terminal :P)&lt;/li&gt; &#xA; &lt;li&gt;Store the log records in JSON format in a log file available at &lt;code&gt;var/log/app_log.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compress the historical log files into &lt;code&gt;var/log/app_log-%d{yyyy-MM-dd}.gz&lt;/code&gt; files&lt;/li&gt; &#xA; &lt;li&gt;Delete compressed historical logs older than 10 days&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want more information on the logging policies and appenders, &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/conf/logback.xml&#34;&gt;take a look at the logback.xml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deploy&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;http://sbt-native-packager.readthedocs.io/en/latest/&#34;&gt;SBT Native Packager&lt;/a&gt; in order to package the app in single Jar file that you can execute.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create the universal package: &lt;code&gt;sbt universal:packageBin&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract the generated zip: &lt;code&gt;unzip target/universal/codelytv-cqrs-ddd-scala-example-1.0.zip -d ~/var/www/&lt;/code&gt; which will contain: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bin/&lt;/code&gt;: All the executable binaries of our main classes in Unix and Windows (bat) format&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;lib/&lt;/code&gt;: All the project dependencies jar files.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run the main app binary: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Without specifying any parameters (OK for this example app): &lt;code&gt;~/var/www/codelytv-cqrs-ddd-scala-example-1.0/bin/codelytv-cqrs-ddd-scala-example&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Specifying parameters for the JVM: &lt;code&gt;~/var/www/codelytv-cqrs-ddd-scala-example-1.0/bin/codelytv-cqrs-ddd-scala-example -Dconfig.resource=application/$CONFIG_PATH&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Specifying application parameters: &lt;code&gt;~/var/www/codelytv-cqrs-ddd-scala-example-1.0/bin/codelytv-cqrs-ddd-scala-example -Dconfig.resource=application/$CONFIG_PATH -- -appParam&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This hopefully helpful utility has been developed by &lt;a href=&#34;https://github.com/CodelyTV&#34;&gt;CodelyTV&lt;/a&gt; and &lt;a href=&#34;https://github.com/CodelyTV/cqrs-ddd-scala-example/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll try to maintain this project as simple as possible, but Pull Requests are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/CodelyTV/scala-ddd-example/master/LICENSE&#34;&gt;License&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>