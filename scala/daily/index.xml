<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-26T01:36:46Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>VirtusLab/pekko-serialization-helper</title>
    <updated>2023-08-26T01:36:46Z</updated>
    <id>tag:github.com,2023-08-26:/VirtusLab/pekko-serialization-helper</id>
    <link href="https://github.com/VirtusLab/pekko-serialization-helper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Serialization toolbox for Pekko messages, events and persistent state that helps achieve compile-time guarantee on serializability. No more errors in the runtime!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pekko Serialization Helper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/org.virtuslab.psh&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/org.virtuslab.psh/sbt-pekko-serialization-helper/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/VirtusLab/pekko-serialization-helper/actions&#34;&gt;&lt;img src=&#34;https://github.com/VirtusLab/pekko-serialization-helper/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/VirtusLab/pekko-serialization-helper&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Serialization toolbox for Pekko messages, events and persistent state that helps achieve compile-time guarantee on serializability. There are some Pekko serialization caveats this tool can help with:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/#missing-serialization-binding&#34;&gt;Missing serialization binding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/#incompatibility-of-persistent-data&#34;&gt;Incompatibility of persistent data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/#jackson-pekko-serializer&#34;&gt;Jackson Pekko Serializer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/#missing-codec-registration&#34;&gt;Missing Codec registration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Add the following line to &lt;code&gt;plugins.sbt&lt;/code&gt; (take &lt;code&gt;Version&lt;/code&gt; from the above maven badge or &lt;a href=&#34;https://github.com/VirtusLab/pekko-serialization-helper/releases&#34;&gt;GitHub Releases&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;addSbtPlugin(&#34;org.virtuslab.psh&#34; % &#34;sbt-pekko-serialization-helper&#34; % Version)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and enable the sbt plugin in the target project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;lazy val app = (project in file(&#34;app&#34;))&#xA;  .enablePlugins(PekkoSerializationHelperPlugin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Missing serialization binding&lt;/h2&gt; &#xA;&lt;p&gt;To serialize message, persistent state or event in Pekko, Scala trait needs to be defined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package org&#xA;trait MySer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, a serializer needs to be bound to this trait in a configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;pekko.actor {&#xA;  serializers {&#xA;    jackson-json = &#34;org.apache.pekko.serialization.jackson.JacksonJsonSerializer&#34;&#xA;  }&#xA;  serialization-bindings {&#xA;    &#34;org.MySer&#34; = jackson-json&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/#appendix-b-what-happens-with-serialization-of-messages--events--states-that-do-not-extend-a-base-trait-bound-to-a-serializer&#34;&gt;problem&lt;/a&gt; occurs if a class is not extended with the base trait bound to the serializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;trait MySer&#xA;case class MyMessage() // extends MySer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;pekko-serialization-helper&lt;/code&gt; to the rescue! It detects messages, events and persistent states, and checks whether they extend the given base trait and report an error when they don&#39;t. This ensures that the specified serializer is used by Pekko and protects against an unintended fallback to &lt;a href=&#34;https://pekko.apache.org/docs/pekko/current/serialization.html#java-serialization&#34;&gt;Java serialization&lt;/a&gt; or outright serialization failure.&lt;/p&gt; &#xA;&lt;p&gt;To use, base trait should be annotated with &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/annotation/src/main/scala/org/virtuslab/psh/annotation/SerializabilityTrait.scala&#34;&gt;&lt;code&gt;@org.virtuslab.psh.SerializabilityTrait&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;@SerializabilityTrait&#xA;trait MySerializable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It allows catching errors like these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.apache.pekko.actor.typed.Behavior&#xA;&#xA;object BehaviorTest {&#xA;  sealed trait Command //extends MySerializable&#xA;  def method(msg: Command): Behavior[Command] = ???&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And results in a compile error, preventing non-runtime-safe code from being executed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;test0.scala:7: error: org.random.project.BehaviorTest.Command is used as Pekko message&#xA;but does not extend a trait annotated with org.virtuslab.psh.annotation.SerializabilityTrait.&#xA;Passing an object of a class that does NOT extend a trait annotated with SerializabilityTrait as a message may cause Pekko to&#xA;fall back to Java serialization during runtime.&#xA;&#xA;&#xA;  def method(msg: Command): Behavior[Command] = ???&#xA;                            ^&#xA;test0.scala:6: error: Make sure this type is itself annotated, or extends a type annotated&#xA;with  @org.virtuslab.psh.annotation.SerializabilityTrait.&#xA;  sealed trait Command extends MySerializable&#xA;               ^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compiler plugin only checks the classes in the sbt modules where &lt;code&gt;PekkoSerializationHelperPlugin&lt;/code&gt; is explicitly enabled. It may happen that the base trait (like &lt;code&gt;MySerializable&lt;/code&gt; in the example) lives in an sbt module like &lt;code&gt;core&lt;/code&gt; where the plugin should &lt;strong&gt;not&lt;/strong&gt; be enabled (e.g. for compilation performance reasons). However, &lt;code&gt;MySerializable&lt;/code&gt; needs to be annotated with &lt;code&gt;org.virtuslab.psh.SerializabilityTrait&lt;/code&gt;. In order to have access to the &lt;code&gt;SerializabilityTrait&lt;/code&gt; annotation without enabling the entire suite of compiler plugins, add &lt;code&gt;PekkoSerializationHelperPlugin.annotation&lt;/code&gt; to &lt;code&gt;libraryDependencies&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.virtuslab.psh.PekkoSerializationHelperPlugin&#xA;&#xA;lazy val core = (project in file(&#34;core&#34;))&#xA;  .settings(libraryDependencies += PekkoSerializationHelperPlugin.annotation)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Incompatibility of persistent data&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/docs/typical-tragic-story.png&#34; alt=&#34;Typical tragic story&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A typical problem with a persistence is when the already persisted data is not compatible with the schemas defined in a new version of the application.&lt;/p&gt; &#xA;&lt;p&gt;To solve this, a mix of a compiler plugin and an sbt task can be used for dumping schema of &lt;a href=&#34;https://pekko.apache.org/docs/pekko/current/typed/persistence.html#example-and-core-api&#34;&gt;pekko-persistence&lt;/a&gt; to a file. It can be used for detecting accidental changes of events (journal) and states (snapshots) with a simple &lt;code&gt;diff&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To dump persistence schema for each sbt module where &lt;code&gt;PekkoSerializationHelperPlugin&lt;/code&gt; is enabled, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sbt ashDumpPersistenceSchema&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default file is &lt;code&gt;target/&amp;lt;sbt-module-name&amp;gt;-dump-persistence-schema-&amp;lt;version&amp;gt;.yaml&lt;/code&gt; (&lt;code&gt;target/&lt;/code&gt; of top-level module!) but it can be changed using sbt keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;ashDumpPersistenceSchemaOutputFilename := &#34;file.yaml&#34; // Changes filename&#xA;ashDumpPersistenceSchemaOutputDirectoryPath := &#34;~&#34; // Changes directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example dump&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: org.random.project.Data&#xA;  typeSymbol: trait&#xA;- name: org.random.project.Data.ClassTest&#xA;  typeSymbol: class&#xA;  fields:&#xA;  - name: a&#xA;    typeName: java.lang.String&#xA;  - name: b&#xA;    typeName: scala.Int&#xA;  - name: c&#xA;    typeName: scala.Double&#xA;  parents:&#xA;  - org.random.project.Data&#xA;- name: org.random.project.Data.ClassWithAdditionData&#xA;  typeSymbol: class&#xA;  fields:&#xA;  - name: ad&#xA;    typeName: org.random.project.Data.AdditionalData&#xA;  parents:&#xA;  - org.random.project.Data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;diff&lt;/code&gt; command can be used to check the difference between the version of a schema from &lt;code&gt;develop&lt;/code&gt;/&lt;code&gt;main&lt;/code&gt; branch and the version from the current commit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/docs/easy-to-diff.png&#34; alt=&#34;Easy to diff&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Jackson Pekko Serializer&lt;/h2&gt; &#xA;&lt;p&gt;Using Jackson Serializer for pekko-persistence is also one of the pitfalls and this plugin provides an alternative by using a serializer that uses &lt;a href=&#34;https://circe.github.io/circe/&#34;&gt;Circe&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Dangerous code for Jackson:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class Message(animal: Animal) extends MySer&#xA;&#xA;sealed trait Animal&#xA;&#xA;final case class Lion(name: String) extends Animal&#xA;final case class Tiger(name: String) extends Animal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make this code work, a lot of Jackson annotations should be added:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class Message(animal: Animal) extends MultiDocPrintService&#xA;&#xA;@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = &#34;type&#34;)&#xA;@JsonSubTypes(&#xA;  Array(&#xA;    new JsonSubTypes.Type(value = classOf[Lion], name = &#34;lion&#34;),&#xA;    new JsonSubTypes.Type(value = classOf[Tiger], name = &#34;tiger&#34;)))&#xA;sealed trait Animal&#xA;&#xA;final case class Lion(name: String) extends Animal&#xA;final case class Tiger(name: String) extends Animal&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also if an object is defined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case object Tick&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There will not be exceptions during serialization but Jackson will create another instance of &lt;code&gt;Tick&lt;/code&gt; instead of restoring the &lt;code&gt;object Tick&lt;/code&gt;&#39;s underlying singleton.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;actorRef ! Tick&#xA;&#xA;// Inside the actor:&#xA;def receive = {&#xA;  case Tick =&amp;gt; // this won&#39;t get matched&#xA;} // message will be unhandled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://circe.github.io/circe/&#34;&gt;Circe-based&lt;/a&gt; Pekko serializer can be used. It uses Circe codecs, derived using &lt;a href=&#34;https://circe.github.io/circe/codecs/auto-derivation.html&#34;&gt;Shapeless&lt;/a&gt;, that are generated during compile time (so serializer won&#39;t crash during runtime as reflection-based serializers may do). For a comparison of Circe with other serializers, read &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/#appendix-a-comparison-of-available-pekko-serializers&#34;&gt;Appendix A&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that it is &lt;strong&gt;not&lt;/strong&gt; obligatory to use this serializer for the other features (serializability checker, persistence schema dump) to work. They work as well with e.g. when &lt;a href=&#34;https://pekko.apache.org/docs/pekko/current/serialization-jackson.html&#34;&gt;Jackson serializer&lt;/a&gt; is selected.&lt;/p&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;Add the following to project dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.virtuslab.psh.PekkoSerializationHelperPlugin&#xA;&#xA;lazy val app = (project in file(&#34;app&#34;))&#xA;  // ...&#xA;  .settings(libraryDependencies += PekkoSerializationHelperPlugin.circePekkoSerializer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that enabling &lt;code&gt;PekkoSerializationHelperPlugin&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; add Circe serializer to the classpath automatically, as this sbt plugin can be used to improve safety of other serializers as well.&lt;/p&gt; &#xA;&lt;p&gt;Create a custom serializer by extending &lt;code&gt;CircePekkoSerializer&lt;/code&gt; base class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.virtuslab.psh.circe.CircePekkoSerializer&#xA;&#xA;class ExampleSerializer(actorSystem: ExtendedActorSystem)&#xA;    extends CircePekkoSerializer[MySerializable](actorSystem) {&#xA;&#xA;  override def identifier: Int = 41&#xA;&#xA;  override lazy val codecs = Seq(Register[CommandOne], Register[CommandTwo])&#xA;&#xA;  override lazy val manifestMigrations = Nil&#xA;&#xA;  override lazy val packagePrefix = &#34;org.project&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;CircePekkoSerializer&lt;/code&gt; can be configured to use Gzip compression when serializing payloads greater than defined size (default is without compression).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/circe-pekko-serializer/src/main/resources/reference.conf&#34;&gt;default reference.conf file&lt;/a&gt; with comments for more details about &lt;code&gt;CircePekkoSerializer&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;p&gt;For more guidelines on how to use the serializer, read &lt;a href=&#34;https://pekko.apache.org/docs/pekko/current/serialization.html&#34;&gt;Pekko documentation about serialization&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/circe-pekko-serializer/src/main/scala/org/virtuslab/psh/circe/CircePekkoSerializer.scala&#34;&gt;&lt;code&gt;CircePekkoSerializer&lt;/code&gt;&lt;/a&gt; Scaladoc and look at the &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/examples&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Missing Codec registration&lt;/h2&gt; &#xA;&lt;p&gt;If a codec is not registered, a runtime exception will occur.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.virtuslab.psh.circe.CircePekkoSerializer&#xA;import org.virtuslab.psh.circe.Register&#xA;&#xA;class ExampleSerializer(actorSystem: ExtendedActorSystem)&#xA;  extends CircePekkoSerializer[MySerializable](actorSystem) {&#xA;  // ...&#xA;  override lazy val codecs = Seq(Register[CommandOne]) // WHOOPS someone forgot to register CommandTwo...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;java.lang.RuntimeException: Serialization of [CommandTwo] failed. Call Register[A]&#xA;for this class or its supertype and append result to `def codecs`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To solve that, an annotation &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/annotation/src/main/scala/org/virtuslab/psh/annotation/Serializer.scala&#34;&gt;&lt;code&gt;@org.virtuslab.psh.Serializer&lt;/code&gt;&lt;/a&gt; can be used.&lt;/p&gt; &#xA;&lt;p&gt;During compilation, the plugin gathers all direct descendants of the class marked with &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/annotation/src/main/scala/org/virtuslab/psh/annotation/SerializabilityTrait.scala&#34;&gt;&lt;code&gt;@org.virtuslab.psh.SerializabilityTrait&lt;/code&gt;&lt;/a&gt; and checks the body of classes annotated with &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/annotation/src/main/scala/org/virtuslab/psh/annotation/Serializer.scala&#34;&gt;&lt;code&gt;@org.virtuslab.psh.Serializer&lt;/code&gt;&lt;/a&gt; if they reference all these direct descendants in any way.&lt;/p&gt; &#xA;&lt;p&gt;In practice, this is used for checking a class extending &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/circe-pekko-serializer/src/main/scala/org/virtuslab/psh/circe/CircePekkoSerializer.scala&#34;&gt;CircePekkoSerializer&lt;/a&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.virtuslab.psh.circe.CircePekkoSerializer&#xA;import org.virtuslab.psh.circe.Register&#xA;&#xA;@Serializer(&#xA;  classOf[MySerializable],&#xA;  typeRegexPattern = Register.REGISTRATION_REGEX)&#xA;class ExampleSerializer(actorSystem: ExtendedActorSystem)&#xA;  extends CircePekkoSerializer[MySerializable](actorSystem) {&#xA;    // ...&#xA;    override lazy val codecs = Seq(Register[CommandOne]) // WHOOPS someone forgot to register CommandTwo...&#xA;    // ... but Codec Registration Checker will throw a compilation error here:&#xA;    // `No codec for `CommandOne` is registered in a class annotated with @org.virtuslab.psh.annotation.Serializer`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that as with Serializability Checker and Dump Persistence Schema, this compiler plugin only runs in the sbt modules where &lt;code&gt;PekkoSerializationHelperPlugin&lt;/code&gt; is explicitly enabled.&lt;/p&gt; &#xA;&lt;p&gt;For more information, read &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/annotation/src/main/scala/org/virtuslab/psh/annotation/Serializer.scala&#34;&gt;&lt;code&gt;@Serializer&lt;/code&gt; scaladoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Additional configuration for compiler plugins&lt;/h2&gt; &#xA;&lt;p&gt;All compiler plugins and their verbose modes can be enabled/disabled using two sbt keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;ashCompilerPluginEnable := false // default is true&#xA;ashCompilerPluginVerbose := true // default is false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be done for all compiler plugins, like above, or just one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;ashCodecRegistrationCheckerCompilerPlugin / ashCompilerPluginEnable := false&#xA;ashDumpPersistenceSchemaCompilerPlugin / ashCompilerPluginVerbose := true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;Compile&lt;/code&gt; and &lt;code&gt;Test&lt;/code&gt; scope can be specified:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Compile / ashDumpPersistenceSchemaCompilerPlugin / ashCompilerPluginVerbose := true&#xA;Test / ashCompilerPluginEnable := false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For full list of sbt keys, check &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/sbt-pekko-serialization-helper/src/main/scala/org/virtuslab/psh/PekkoSerializationHelperKeys.scala&#34;&gt;&lt;code&gt;org.virtuslab.psh.PekkoSerializationHelperKeys&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example applications&lt;/h2&gt; &#xA;&lt;p&gt;The simplest example is the pekko-cluster application which uses Pekko Serialization Helper: &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/examples/pekko-cluster-app&#34;&gt;pekko-cluster-app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The second example is the pekko-persistence application which shows usage of the Dump Persistence Schema Compiler Plugin: &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/examples/pekko-persistence-app&#34;&gt;pekko-persistence-app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Step-by-step guide&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/docs/GUIDE.md&#34;&gt;full step-by-step guide&lt;/a&gt; on Pekko Serialization Helper usage.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Guide&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to this project, see &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Appendix A: Comparison of available Pekko Serializers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Serializer&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;Jackson&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://circe.github.io/circe/&#34;&gt;Circe&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers&#34;&gt;Protobuf v3&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://avro.apache.org/docs/current/&#34;&gt;Avro&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/sirthias/borer&#34;&gt;Borer&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/EsotericSoftware/kryo&#34;&gt;Kryo&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Data formats&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON or &lt;a href=&#34;https://cbor.io&#34;&gt;CBOR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON or custom binary&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON or custom binary&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON or CBOR&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;custom binary&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Scala support&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;very poor, even with &lt;a href=&#34;https://github.com/FasterXML/jackson-module-scala&#34;&gt;jackson-module-scala&lt;/a&gt;: &#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;poor support for Scala objects, without configuration (without adding ScalaObjectDeserializerModule usage) creates new instances of singleton types (&lt;code&gt;Foo$&lt;/code&gt;), breaking pattern matching&lt;/li&gt;&#xA;     &lt;li&gt;lacks support of basic scala types like &lt;code&gt;Unit&lt;/code&gt;&lt;/li&gt;&#xA;     &lt;li&gt;without explicit annotation doesn&#39;t work with generics extending &lt;code&gt;AnyVal&lt;/code&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;perfect out of the box&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;perfect with &lt;a href=&#34;https://scalapb.github.io&#34;&gt;ScalaPB&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;perfect with &lt;a href=&#34;https://github.com/sksamuel/avro4s&#34;&gt;Avro4s&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;perfect out of the box&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;perfect out of the box&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pekko support&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pekko.apache.org/docs/pekko/current/serialization-jackson.html&#34;&gt;pekko-serialization-jackson&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/#jackson-pekko-serializer&#34;&gt;serializer provided by this project&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;used by &lt;a href=&#34;https://pekko.apache.org/docs/pekko/current/serialization.html&#34;&gt;pekko-remote&lt;/a&gt; internally&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;requires custom serializer&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;requires custom serializer&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/altoo-ag/pekko-kryo-serialization&#34;&gt;pekko-kryo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compile-time mechanics&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;nothing happens in compile time; everything based on runtime reflection&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;derives codecs via &lt;a href=&#34;https://circe.github.io/circe/codecs/auto-derivation.html&#34;&gt;Shapeless&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;with ScalaPB, generates Scala classes based on *.proto files&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;with Avro4s, derives Avro schemas using &lt;a href=&#34;https://github.com/softwaremill/magnolia&#34;&gt;Magnolia&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;derives codecs &lt;strong&gt;without&lt;/strong&gt; Magnolia&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;with pekko-kryo, optionally derives codecs in compile time, but otherwise uses reflection in runtime&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Runtime safety&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none, uses reflection&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;encoders and decoders are created during compilation&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;*.proto files are validated before compilation&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Avro schema is created during compilation&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;encoders and decoders are created during compilation&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;depends on whether codecs were derived in compile time (then standard for Scala code), or not (than none)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Boilerplate&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;a lot: &#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;ADTs requires amount of annotation equal to or exceeding the actual type definitions&lt;/li&gt;&#xA;     &lt;li&gt;requires explicit serializers and deserializers in certain cases (e.g. enums)&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;every top-level sealed trait must be registered manually - but see &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/pekko-serialization-helper/main/#missing-codec-registration&#34;&gt;Codec Registration Checker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;in case of custom types, a second layer of models is needed&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;sometimes requires annotations&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;every top-level sealed trait must be registered manually; every transitively included class must have an explicitly defined codec&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;every top-level sealed trait must be registered manually&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Schema evolution&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;removing field&lt;/li&gt;&#xA;     &lt;li&gt;adding optional field&lt;/li&gt;&#xA;    &lt;/ul&gt; with &lt;a href=&#34;https://pekko.apache.org/docs/pekko/current/serialization-jackson.html#schema-evolution&#34;&gt;&lt;code&gt;JacksonMigration&lt;/code&gt;&lt;/a&gt;: &#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;adding mandatory field&lt;/li&gt;&#xA;     &lt;li&gt;renaming field&lt;/li&gt;&#xA;     &lt;li&gt;renaming class&lt;/li&gt;&#xA;     &lt;li&gt;support of forward versioning for rolling updates&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;adding optional field&lt;/li&gt;&#xA;     &lt;li&gt;removing optional field&lt;/li&gt;&#xA;     &lt;li&gt;adding required field with default value&lt;/li&gt;&#xA;     &lt;li&gt;removing required field&lt;/li&gt;&#xA;     &lt;li&gt;renaming field&lt;/li&gt;&#xA;     &lt;li&gt;reordering fields&lt;/li&gt;&#xA;     &lt;li&gt;transforming data before deserialization&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;adding optional field&lt;/li&gt;&#xA;     &lt;li&gt;removing optional field&lt;/li&gt;&#xA;     &lt;li&gt;adding required field with default value&lt;/li&gt;&#xA;     &lt;li&gt;removing required field&lt;/li&gt;&#xA;     &lt;li&gt;renaming field&lt;/li&gt;&#xA;     &lt;li&gt;reordering fields&lt;/li&gt;&#xA;     &lt;li&gt;changing between compatible types&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;reordering fields&lt;/li&gt;&#xA;     &lt;li&gt;renaming fields&lt;/li&gt;&#xA;     &lt;li&gt;adding optional field&lt;/li&gt;&#xA;     &lt;li&gt;adding required field with default value&lt;/li&gt;&#xA;     &lt;li&gt;removing field with default value&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;renaming fields&lt;/li&gt;&#xA;     &lt;li&gt;transforming data before deserialization&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;adding field&lt;/li&gt;&#xA;     &lt;li&gt;removing field&lt;/li&gt;&#xA;     &lt;li&gt;renaming field&lt;/li&gt;&#xA;     &lt;li&gt;renaming class&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Appendix B: what happens with serialization of Messages / Events / States that do not extend a base trait bound to a serializer&lt;/h2&gt; &#xA;&lt;p&gt;In runtime, if given Message/Event/State class does not extend a base trait bound to a serializer, the following problems will occur (depending on Pekko version and settings):&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - the default setting for Pekko 2.5 is &lt;code&gt;pekko.actor.allow-java-serialization=on&lt;/code&gt;, whereas &lt;code&gt;pekko.actor.allow-java-serialization=off&lt;/code&gt; is the default setting for Pekko 2.6&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Pekko version&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;pekko.actor.allow-java-serialization=off&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;pekko.actor.allow-java-serialization=on&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.5&lt;/td&gt; &#xA;   &lt;td&gt;Serialization will fail with logs like below:&lt;br&gt;&lt;br&gt;&lt;code&gt;[WARN] [...] Outgoing message attempted to use Java Serialization even though `pekko.actor.allow-java-serialization = off` was set! Message type was: [class sample.cluster.transformation.BackendRegistration$]&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;code&gt;[ERROR] [...] Failed to serialize remote message [class pekko.actor.ActorSelectionMessage] using serializer [class pekko.remote.serialization.MessageContainerSerializer]. Transient association error (association remains live)&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;code&gt;pekko.remote.MessageSerializer$SerializationException: Failed to serialize remote message&lt;/code&gt;&lt;br&gt; &lt;code&gt;[class pekko.actor.ActorSelectionMessage] using serializer [class pekko.remote.serialization.MessageContainerSerializer].&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.remote.MessageSerializer$.serialize(MessageSerializer.scala:67)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.remote.EndpointWriter.$anonfun$serializeMessage$1(Endpoint.scala:1021)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.remote.EndpointWriter.serializeMessage(Endpoint.scala:1021)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.remote.EndpointWriter.writeSend(Endpoint.scala:887)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.remote.EndpointWriter$$anonfun$4.applyOrElse(Endpoint.scala:859)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.actor.Actor.aroundReceive(Actor.scala:539)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.actor.Actor.aroundReceive$(Actor.scala:537)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.remote.EndpointActor.aroundReceive(Endpoint.scala:536)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.actor.ActorCell.receiveMessage(ActorCell.scala:612)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.actor.ActorCell.invoke(ActorCell.scala:581)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.dispatch.Mailbox.processMailbox(Mailbox.scala:268)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.dispatch.Mailbox.run(Mailbox.scala:229)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.dispatch.Mailbox.exec(Mailbox.scala:241)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)&lt;/code&gt;&lt;br&gt; &lt;code&gt;at org.apache.pekko.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)&lt;/code&gt;&lt;br&gt; &lt;code&gt;Caused by: pekko.serialization.DisabledJavaSerializer$JavaSerializationException: Attempted to serialize message using Java serialization while `pekko.actor.allow-java-serialization` was disabled. Check WARNING logs for more details.&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Serialization succeeds - but using Java serialization (which is not a good choice for production). Warning log like below will appear on the startup:&lt;br&gt;&lt;br&gt; &lt;code&gt;[WARN] [...] Using the default Java serializer for class [sample.cluster.transformation.TransformationResult] which is not recommended because of performance implications. Use another serializer or disable this warning using the setting &#39;pekko.actor.warn-about-java-serializer-usage&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.6&lt;/td&gt; &#xA;   &lt;td&gt;Serialization will fail with logs like below:&lt;br&gt;&lt;br&gt; &lt;code&gt;[WARN] [...] - Outgoing message attempted to use Java Serialization even though`pekko.actor.allow-java-serialization = off` was set! Message type was: [class sample.cluster.transformation.Worker$TransformText]&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;code&gt;[ERROR] [...] - Failed to serialize message [sample.cluster.transformation.Worker$TransformText]. pekko.serialization.DisabledJavaSerializer$JavaSerializationException: Attempted to serialize message using Java serialization while `pekko.actor.allow-java-serialization` was disabled. Check WARNING logs for more details&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Serialization succeeds - but using Java serialization (which is not a good choice for production). Warning log like below will appear on the startup:&lt;br&gt;&lt;br&gt; &lt;code&gt;[WARN] [...] Using the default Java serializer for class [sample.cluster.transformation.TransformationResult] which is not recommended because of performance implications. Use another serializer or disable this warning using the setting &#39;pekko.actor.warn-about-java-serializer-usage&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>