<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-09T01:38:37Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ovotech/meters4s</title>
    <updated>2022-10-09T01:38:37Z</updated>
    <id>tag:github.com,2022-10-09:/ovotech/meters4s</id>
    <link href="https://github.com/ovotech/meters4s" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Meters4s&lt;/h1&gt; &#xA;&lt;p&gt;Meters4s is a thin, functional wrapper around &lt;a href=&#34;https://micrometer.io/&#34;&gt;Micrometer&lt;/a&gt; designed to integrate with the &lt;a href=&#34;https://typelevel.org/cats/&#34;&gt;Cats&lt;/a&gt; ecosystem. This allows for in-process metrics aggregation for counters, timers, gauges and distributions.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Add the following dependency to your &lt;code&gt;build.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;com.ovoenergy&#34; %% &#34;meters4s&#34; % &#34;1.1.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for Cats Effect 2.x use the 0.4.x series.&lt;/p&gt; &#xA;&lt;p&gt;You will likely also want to add the module corresponding to whichever monitoring system you want to report metrics to. All systems supported by micrometer can be used by brining in the corresponding micrometer dependency and then using &lt;code&gt;Reporter.fromRegistry&lt;/code&gt; to construct a reporter.&lt;/p&gt; &#xA;&lt;p&gt;For developer convenience we also provide a couple of modules for particular monitoring systems, specifically Datadog and StatsD to provide and ergonomic means for creating reporters for these registries. These can be added to your project as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;com.ovoenergy&#34; %% &#34;meters4s-datadog&#34; % &#34;1.1.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;com.ovoenergy&#34; %% &#34;meters4s-statsd&#34; % &#34;1.1.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For comprehensive API documentation check &lt;a href=&#34;https://ovotech.github.io/meters4s/latest/api/&#34;&gt;the scaladoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A simple usage example for incrementing a counter, backed by a Micrometer &lt;code&gt;SimpleMeterRegistry&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.ovoenergy.meters4s.{Reporter, MetricsConfig}&#xA;import cats.effect.IO&#xA;&#xA;val config = MetricsConfig()&#xA;for {&#xA;  reporter &amp;lt;- Reporter.createSimple[IO](config)&#xA;  counter &amp;lt;- reporter.counter(&#34;my.counter&#34;)&#xA;  _ &amp;lt;- counter.increment&#xA;} yield ()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With Datadog&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.ovoenergy.meters4s.{MetricsConfig, Reporter}&#xA;import com.ovoenergy.meters4s.datadog.{DataDog, DataDogConfig}&#xA;import cats.effect.IO&#xA;&#xA;val datadog =&#xA;  DataDog.createReporter[IO](DataDogConfig(apiKey = &#34;1234&#34;), MetricsConfig())&#xA;datadog.use { reporter =&amp;gt;&#xA;  reporter.counter(&#34;my.counter&#34;).flatMap { counter =&amp;gt; counter.increment }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;This library was heavily inspired by (and in some places copied wholesale from) &lt;a href=&#34;https://github.com/ovotech/http4s-micrometer-metrics&#34;&gt;http4s-micrometer-metrics&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stevenjackson/vagrant-test-automation</title>
    <updated>2022-10-09T01:38:37Z</updated>
    <id>tag:github.com,2022-10-09:/stevenjackson/vagrant-test-automation</id>
    <link href="https://github.com/stevenjackson/vagrant-test-automation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Project using vagrant to setup an ATDD environment ubuntu (precise64) box&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.virtualbox.org&#34;&gt;VirtualBox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://vagrantup.com&#34;&gt;Vagrant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/riotgames/vagrant-berkshelf&#34;&gt;vagrant-berkshelf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/schisamo/vagrant-omnibus&#34;&gt;vagrant-omnibus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current &#34;recipe&#34;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA; &lt;li&gt;vim&lt;/li&gt; &#xA; &lt;li&gt;openssl&lt;/li&gt; &#xA; &lt;li&gt;mysql&lt;/li&gt; &#xA; &lt;li&gt;java&lt;/li&gt; &#xA; &lt;li&gt;rvm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;To use&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ vagrant plugin install vagrant-berkshelf&#xA;$ vagrant plugin install vagrant-omnibus&#xA;$ vagrant up &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From there clone any repositories and bundle accordingly.&lt;/p&gt; &#xA;&lt;p&gt;Any files stored with the Vagrantfile become accessible under the /vagrant directory in the VM. So, a Vagrantfile and Berksfile can be added to an existing repo, providing a way to spin up a testing environment with the test code already installed.&lt;/p&gt; &#xA;&lt;h2&gt;Managing VM&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://vagrantup.com/v1/docs/getting-started/teardown.html&#34;&gt;Vagrant guide&lt;/a&gt; for information on starting and stopping VMs.&lt;/p&gt;</summary>
  </entry>
</feed>