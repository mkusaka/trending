<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-26T01:37:09Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>armanbilge/fs2-io_uring</title>
    <updated>2022-11-26T01:37:09Z</updated>
    <id>tag:github.com,2022-11-26:/armanbilge/fs2-io_uring</id>
    <link href="https://github.com/armanbilge/fs2-io_uring" rel="alternate"></link>
    <summary type="html">&lt;p&gt;they see me ringin&#39;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fs2-io_uring&lt;/h1&gt; &#xA;&lt;p&gt;A library implementing &lt;a href=&#34;https://fs2.io/#/io&#34;&gt;FS2 I/O APIs&lt;/a&gt; for &lt;a href=&#34;https://scala-native.org/&#34;&gt;Scala Native&lt;/a&gt; via the &lt;a href=&#34;https://en.wikipedia.org/wiki/Io_uring&#34;&gt;io_uring&lt;/a&gt; Linux kernel system call interface. The provided implementations are drop-in replacements that can be used to power &lt;a href=&#34;https://http4s.org/v0.23/docs/integrations.html#ember&#34;&gt;http4s Ember&lt;/a&gt;, &lt;a href=&#34;https://github.com/tpolecat/skunk&#34;&gt;Skunk&lt;/a&gt;, and &lt;a href=&#34;https://github.com/davenverse/rediculous&#34;&gt;Rediculous&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At its heart fs2-io_uring is an &lt;a href=&#34;https://github.com/typelevel/cats-effect/discussions/3070&#34;&gt;I/O-integrated runtime&lt;/a&gt; for &lt;a href=&#34;https://typelevel.org/cats-effect/&#34;&gt;Cats Effect&lt;/a&gt;. The library is unique in how close to the bare-metal it is and thus how deeply it integrates with kernel I/O APIs. The implementation is literally Cats Effect sharing memory with and talking directly to the kernel: no JDK, no JNI, no overhead. Nearly all system calls are asynchronous, cancelable, and efficiently submitted in batches via the io_uring API. Even cancelation is async and fully-backpressured.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;com.armanbilge&#34; %%% &#34;fs2-io_uring&#34; % &#34;0.1.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must also install &lt;a href=&#34;https://github.com/axboe/liburing&#34;&gt;liburing&lt;/a&gt;. For performance, I strongly recommend using static linking, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;nativeConfig ~= { c =&amp;gt;&#xA;  c.withCompileOptions(c.compileOptions :+ &#34;-I/home/linuxbrew/.linuxbrew/include&#34;)&#xA;    .withLinkingOptions(c.linkingOptions :+ &#34;/home/linuxbrew/.linuxbrew/lib/liburing.a&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use fs2-io_uring in an application, you should replace &lt;code&gt;IOApp&lt;/code&gt; with &lt;code&gt;UringApp&lt;/code&gt;. For tests, you should override the runtime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;override def munitIORuntime = UringRuntime.global&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you can import from &lt;code&gt;fs2.io.uring.implicits._&lt;/code&gt; to get an implicit io_uring-backed &lt;code&gt;Network&lt;/code&gt; into scope. You may also directly construct instances of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;UringNetwork&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UringSocketGroup&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UringUnixSockets&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Future releases will add support for datagram sockets and non-blocking (!) file I/O.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning and compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Because this library implements FS2 sealed interfaces, but is released and versioned independently, it is not covered by FS2&#39;s usual guarantee of backwards-binary-compatibility. Specifically, updating your FS2 version may cause fs2-io_uring to break.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, you should not add it as a dependency in libraries. Instead, make sure to expose the &lt;code&gt;Network&lt;/code&gt; and &lt;code&gt;UnixSockets&lt;/code&gt; constraints of your library, so that users can substitute the fs2-io_uring implementations of these APIs in their applications.&lt;/p&gt;</summary>
  </entry>
</feed>