<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-28T01:39:31Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bmjames/json4s-zipper</title>
    <updated>2023-09-28T01:39:31Z</updated>
    <id>tag:github.com,2023-09-28:/bmjames/json4s-zipper</id>
    <link href="https://github.com/bmjames/json4s-zipper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pure functional transformations for the json4s and Play JSON ASTs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;json4s-zipper&lt;/h1&gt; &#xA;&lt;p&gt;This is an experimental &lt;a href=&#34;http://en.wikipedia.org/wiki/Zipper_(data_structure)&#34;&gt;zipper&lt;/a&gt; library for the &lt;a href=&#34;http://json4s.org/&#34;&gt;json4s&lt;/a&gt; and &lt;a href=&#34;https://www.playframework.com/documentation/2.3.x/ScalaJson&#34;&gt;Play JSON&lt;/a&gt; ASTs. It is designed to be easy to make compatible with the other JSON libraries, by implementing the &lt;code&gt;JsonLike&lt;/code&gt; typeclass.&lt;/p&gt; &#xA;&lt;p&gt;The goals of this library are twofold:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To implement purely functional modifications to immutable JSON structures;&lt;/li&gt; &#xA; &lt;li&gt;To support writing functions that are reusable with various JSON libraries, including ones not yet in existence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to get it&lt;/h2&gt; &#xA;&lt;p&gt;To use with json4s (3.2.x):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libraryDependencies += &#34;net.bmjames&#34; %% &#34;json-zipper-core&#34; % &#34;0.2&#34;&#xA;&#xA;libraryDependencies += &#34;net.bmjames&#34; %% &#34;json-zipper-json4s&#34; % &#34;0.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use with Play (2.3.x):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libraryDependencies += &#34;net.bmjames&#34; %% &#34;json-zipper-core&#34; % &#34;0.2&#34;&#xA;&#xA;libraryDependencies += &#34;net.bmjames&#34; %% &#34;json-zipper-play&#34; % &#34;0.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;To start with, here is some JSON, parsed into the &lt;code&gt;JValue&lt;/code&gt; AST from json4s. (You can start a REPL in which to follow these examples by running &lt;code&gt;sbt &#34;project test&#34; test:console&lt;/code&gt; from the root of this source tree.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import org.json4s.native.JsonMethods._&#xA;&#xA;val json = parse(&#34;&#34;&#34;{&#34;soups&#34;:[&#34;goulash&#34;,&#34;gumbo&#34;,&#34;minestrone&#34;]}&#34;&#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cursor API (quite stable)&lt;/h3&gt; &#xA;&lt;p&gt;This is the core zipper data type upon which the other APIs are based. It&#39;s a little verbose, but you can use this API directly. Most operations result in an &lt;code&gt;Option[Cursor[_]]&lt;/code&gt;, as they may fail (e.g. if you use &lt;code&gt;field&lt;/code&gt;, but the cursor is not currently on an object).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import net.bmjames.json.json4s._&#xA;import net.bmjames.json.syntax._&#xA;import org.json4s.JString&#xA;&#xA;val cursor = json.cursor // A cursor focusing on the root of the JSON object&#xA;&#xA;val updatedCursor = for {&#xA;  a &amp;lt;- cursor.field(&#34;soups&#34;)         // Go to field &#34;soups&#34;&#xA;  b &amp;lt;- a.prepend(JString(&#34;borscht&#34;)) // Prepend to the array&#xA;} yield b&#xA;&#xA;for (c &amp;lt;- updatedCursor) println(compact(render(c.toJson)))&#xA;// {&#34;soups&#34;:[&#34;borscht&#34;,&#34;goulash&#34;,&#34;gumbo&#34;,&#34;minestrone&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;XPath-style syntax (quite experimental)&lt;/h3&gt; &#xA;&lt;p&gt;This library supports modification of a JSON structure using an xpath-like syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Append the string &#34; is tasty!&#34; to each string in the array within the field &#34;soups&#34;&#xA;val tastySoups = json.mod (&#34;soups&#34; \ *) { case JString(s) =&amp;gt; JString(s + &#34; is tasty!&#34;) }&#xA;&#xA;println(compact(render(tastySoups)))&#xA;// {&#34;soups&#34;:[&#34;goulash is tasty!&#34;,&#34;gumbo is tasty!&#34;,&#34;minestrone is tasty!&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The XPath-like syntax is implemented using the &lt;code&gt;CursorArrow&lt;/code&gt; API. See &lt;a href=&#34;https://raw.githubusercontent.com/bmjames/json4s-zipper/master/test/src/test/scala/com/gu/json/CursorArrowExamples.scala&#34;&gt;CursorArrowExamples&lt;/a&gt; for examples of using &lt;code&gt;CursorArrow&lt;/code&gt; directly.&lt;/p&gt; &#xA;&lt;h3&gt;Lenses (quite stable)&lt;/h3&gt; &#xA;&lt;p&gt;Lenses enable bidirectional transformations on data structures; i.e. the ability to query and update a &lt;em&gt;view&lt;/em&gt; of the structure, with modifications propagating back as changes to the original structure.&lt;/p&gt; &#xA;&lt;p&gt;This library implements Scalaz partial lenses for any data type having a &lt;code&gt;JsonLike&lt;/code&gt; typeclass instance. The get and putback operations are implemented using zippers.&lt;/p&gt; &#xA;&lt;p&gt;The partiality of the lenses is a result of the potential absence of expected elements in the JSON structure. &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; operations return an &lt;code&gt;Option&lt;/code&gt;, and &lt;code&gt;mod&lt;/code&gt; operations which fail will return the original structure unmodified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import net.bmjames.json.Lenses._&#xA;&#xA;// A partial lens focusing on the string value of the 2nd element of field &#34;soups&#34;&#xA;val firstSoup = field(&#34;soups&#34;) &amp;gt;=&amp;gt; elem(1) &amp;gt;=&amp;gt; strVal&#xA;&#xA;// The lens can be used simply to view the value at that location&#xA;firstSoup.get(json)&#xA;// Some(gumbo)&#xA;&#xA;// The lens can also be used to transform the value&#xA;val updatedJson = firstSoup.mod(&#34;shellfish &#34; + _, json)&#xA;&#xA;println(compact(render(updatedJson)))&#xA;// {&#34;soups&#34;:[&#34;goulash&#34;,&#34;shellfish gumbo&#34;,&#34;minestrone&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bmjames/json4s-zipper/master/test/src/test/scala/net/bmjames/json/LensExamples.scala&#34;&gt;LensExamples&lt;/a&gt; for more examples.&lt;/p&gt;</summary>
  </entry>
</feed>