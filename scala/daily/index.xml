<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-27T01:54:12Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wavesplatform/Waves</title>
    <updated>2022-06-27T01:54:12Z</updated>
    <id>tag:github.com,2022-06-27:/wavesplatform/Waves</id>
    <link href="https://github.com/wavesplatform/Waves" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚õìÔ∏è Reference Waves Blockchain Node (client) implementation on Scala&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;üî∑ Waves Node&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/wavesplatform/Waves/actions&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Checks status&#34; src=&#34;https://badgen.net/github/checks/wavesplatform/waves?cache=600&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/wavesplatform/Waves/releases&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Downloads&#34; src=&#34;https://badgen.net/github/assets-dl/wavesplatform/waves?color=blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/wavesplatform/wavesnode&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Docker pulls&#34; src=&#34;https://badgen.net/docker/pulls/wavesplatform/wavesnode?icon=docker&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://twitter.com/wavesprotocol&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Twitter: Waves Tech&#34; src=&#34;https://badgen.net/twitter/follow/wavesprotocol?icon=twitter&amp;amp;label=follow%20on%20Twitter&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://medium.com/wavesprotocol&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Medium: Waves Tech&#34; src=&#34;https://badgen.net/runkit/msmolyakov/get-medium-followers?icon=medium&amp;amp;cache=86400&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://t.me/waves_ride_dapps_dev&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Telegram&#34; src=&#34;https://badgen.net/badge/icon/Waves%20Dev%20Jedi?icon=telegram&amp;amp;label=Telegram&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/msmolyakov/awesome-waves&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Awesome Waves&#34; src=&#34;https://badgen.net/badge/icon/Awesome%20Waves?icon=awesome&amp;amp;label&amp;amp;color=pink&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Waves is an open source &lt;a href=&#34;https://waves.tech/waves-protocol&#34;&gt;blockchain protocol&lt;/a&gt;. &lt;br&gt; You can use it to build your own decentralized applications. Waves provides full blockchain ecosystem including smart contracts language called RIDE.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;‚ú® Demo&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1945126/78667964-88209480-78e2-11ea-9304-72178a6a5974.gif&#34; alt=&#34;Waves Node Run Demo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Waves node is a host connected to the blockchain network with the following functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Processing and validation of &lt;a href=&#34;https://docs.waves.tech/en/blockchain/transaction/transaction-validation&#34;&gt;transactions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generation and storage of &lt;a href=&#34;https://docs.waves.tech/en/blockchain/block/&#34;&gt;blocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Network communication with &lt;a href=&#34;https://docs.waves.tech/en/blockchain/blockchain/#node&#34;&gt;other nodes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.waves.tech/en/waves-node/node-api/&#34;&gt;REST API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.waves.tech/en/waves-node/extensions/&#34;&gt;Extensions&lt;/a&gt; management&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Learn more about Waves Node in the &lt;a href=&#34;https://docs.waves.tech/en/waves-node/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üöÄÔ∏è Getting started&lt;/h2&gt; &#xA;&lt;p&gt;A quick introduction of the minimal setup you need to get a running node.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Prerequisites:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;configuration file for a needed network from &lt;a href=&#34;https://github.com/wavesplatform/Waves/tree/HEAD/node&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;waves-all*.jar&lt;/code&gt; file from &lt;a href=&#34;https://github.com/wavesplatform/Waves/releases&#34;&gt;releases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Linux systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update&#xA;sudo apt-get install openjdk-8-jre&#xA;java -jar node/target/waves-all*.jar path/to/config/waves-{network}.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mac systems (assuming already installed homebrew):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew cask install adoptopenjdk/openjdk/adoptopenjdk8&#xA;java -jar node/target/waves-all*.jar path/to/config/waves-{network}.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows systems (assuming already installed OpenJDK 8):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar node/target/waves-all*.jar path/to/config/waves-{network}.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using docker, follow the &lt;a href=&#34;https://hub.docker.com/r/wavesplatform/wavesnode&#34;&gt;official image documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;More details on how to install a node for different platforms you can &lt;a href=&#34;https://docs.waves.tech/en/waves-node/how-to-install-a-node/how-to-install-a-node&#34;&gt;find in the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üîß Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The best starting point to understand available configuration parameters is &lt;a href=&#34;https://docs.waves.tech/en/waves-node/node-configuration&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to start playing around with configurations is to use default configuration files for different networks; they&#39;re available in &lt;a href=&#34;https://raw.githubusercontent.com/wavesplatform/Waves/version-1.4.x/node/src/main/resources/network-defaults.conf&#34;&gt;network-defaults.conf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Logging configuration with all available levels and parameters is described &lt;a href=&#34;https://docs.waves.tech/en/waves-node/logging-configuration&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üë®‚Äçüíª Development&lt;/h2&gt; &#xA;&lt;p&gt;The node can be built and installed wherever Java can run. To build and test this project, you will have to follow these steps:&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;b&gt;Show instructions&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;1. Setup the environment.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Install Java for your platform:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update&#xA;sudo apt-get install openjdk-8-jre                     # Ubuntu&#xA;# or&#xA;# brew cask install adoptopenjdk/openjdk/adoptopenjdk8 # Mac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Install SBT (Scala Build Tool)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Please follow the SBT installation instructions depending on your platform (&lt;a href=&#34;https://www.scala-sbt.org/1.0/docs/Installing-sbt-on-Linux.html&#34;&gt;Linux&lt;/a&gt;, &lt;a href=&#34;https://www.scala-sbt.org/1.0/docs/Installing-sbt-on-Mac.html&#34;&gt;Mac&lt;/a&gt;, &lt;a href=&#34;https://www.scala-sbt.org/1.0/docs/Installing-sbt-on-Windows.html&#34;&gt;Windows&lt;/a&gt;)&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;2. Clone this repo&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/wavesplatform/Waves.git&#xA;cd Waves&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;3. Compile and run tests&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt checkPR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;4. Run integration tests (optional)&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;Create a Docker image before you run any test:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt node-it/docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Run all tests. You can increase or decrease number of parallel running tests by changing &lt;code&gt;waves.it.max-parallel-suites&lt;/code&gt; system property:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt -Dwaves.it.max-parallel-suites=1 node-it/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Run one test:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt node-it/testOnly *.TestClassName&#xA;# or &#xA;# bash node-it/testOnly full.package.TestClassName&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;5. Build packages&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt packageAll                   # Mainnet&#xA;sbt -Dnetwork=testnet packageAll # Testnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;code&gt;sbt packageAll&lt;/code&gt; ‚Äåproduces only &lt;code&gt;deb&lt;/code&gt; package along with a fat &lt;code&gt;jar&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;6. Install DEB package&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;deb&lt;/code&gt; package is located in target folder. You can replace &#39;*&#39; with actual package name:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dpkg -i node/target/*.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;7. Run an extension project locally during development (optional)&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt &#34;extension-module/run /path/to/configuration&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;8. Configure IntelliJ IDEA (optional)&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;The majority of contributors to this project use IntelliJ IDEA for development, if you want to use it as well please follow these steps:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Click &lt;code&gt;Add configuration&lt;/code&gt; (or &lt;code&gt;Edit configurations...&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;Click &lt;code&gt;+&lt;/code&gt; to add a new configuration, choose &lt;code&gt;Application&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Specify: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Main class: &lt;code&gt;com.wavesplatform.Application&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Program arguments: &lt;code&gt;/path/to/configuration&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Use classpath of module: &lt;code&gt;extension-module&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Click &lt;code&gt;OK&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Run this configuration.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute, please fork the repository and use a feature branch. Pull requests are warmly welcome.&lt;/p&gt; &#xA;&lt;p&gt;For major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate.&lt;/p&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://raw.githubusercontent.com/wavesplatform/Waves/version-1.4.x/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt; during communication with the each other.&lt;/p&gt; &#xA;&lt;h2&gt;‚ÑπÔ∏è Support (get help)&lt;/h2&gt; &#xA;&lt;p&gt;Keep up with the latest news and articles, and find out all about events happening on the &lt;a href=&#34;https://waves.tech/&#34;&gt;Waves Protocol&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/waves_ride_dapps_dev&#34;&gt;Telegram Dev Chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/wavesprotocol&#34;&gt;Waves Blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚õì Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.waves.tech/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Blockchain clients for Mainnet: &lt;a href=&#34;https://waves.exchange/&#34;&gt;Waves Exchange&lt;/a&gt;, &lt;a href=&#34;https://github.com/wavesfx&#34;&gt;Waves FX&lt;/a&gt;, &lt;a href=&#34;https://www.sign-web.app/&#34;&gt;SIGN app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Blockchain clients for Testnet: &lt;a href=&#34;https://testnet.waves.exchange/&#34;&gt;Waves Exchange&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Blockchain Explorer: &lt;a href=&#34;https://wavesexplorer.com/&#34;&gt;Mainnet&lt;/a&gt;, &lt;a href=&#34;https://testnet.wavesexplorer.com/&#34;&gt;Testnet&lt;/a&gt;, &lt;a href=&#34;https://stagenet.wavesexplorer.com/&#34;&gt;Stagenet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://waves-ide.com/&#34;&gt;Ride Online IDE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìù Licence&lt;/h2&gt; &#xA;&lt;p&gt;The code in this project is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/wavesplatform/Waves/version-1.4.x/LICENSE&#34;&gt;MIT license&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üëè Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.yourkit.com/&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/97fa03cac759a772255b93c64ab1c9f76a103681/68747470733a2f2f7777772e796f75726b69742e636f6d2f696d616765732f796b6c6f676f2e706e67&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We use YourKit full-featured Java Profiler to make Waves node faster. YourKit, LLC is the creator of innovative and intelligent tools for profiling Java and .NET applications.&lt;/p&gt; &#xA;&lt;p&gt;Take a look at YourKit&#39;s leading software products: YourKit Java Profiler and YourKit .NET Profiler.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chipsalliance/firrtl</title>
    <updated>2022-06-27T01:54:12Z</updated>
    <id>tag:github.com,2022-06-27:/chipsalliance/firrtl</id>
    <link href="https://github.com/chipsalliance/firrtl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flexible Intermediate Representation for RTL&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/freechipsproject/firrtl/master/doc/images/firrtl_logo.svg?sanitize=true&#34; alt=&#34;FIRRTL&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/freechipsproject/firrtl?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/freechipsproject/firrtl.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/freechipsproject/firrtl&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/chipsalliance/firrtl/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://mergify.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https://gh.mergify.io/badges/chipsalliance/firrtl&amp;amp;style=flat&#34; alt=&#34;Mergify Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Flexible Internal Representation for RTL&lt;/h4&gt; &#xA;&lt;p&gt;Firrtl is an intermediate representation (IR) for digital circuits designed as a platform for writing circuit-level transformations. This repository consists of a collection of transformations (written in Scala) which simplify, verify, transform, or emit their input circuit.&lt;/p&gt; &#xA;&lt;p&gt;A Firrtl compiler is constructed by chaining together these transformations, then writing the final circuit to a file.&lt;/p&gt; &#xA;&lt;p&gt;For a detailed description of Firrtl&#39;s intermediate representation, see the &lt;a href=&#34;https://github.com/chipsalliance/firrtl-spec/releases/latest/download/spec.pdf&#34;&gt;FIRRTL Language Specification&lt;/a&gt; (&lt;a href=&#34;https://github.com/chipsalliance/firrtl-spec&#34;&gt;source&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Wiki Pages and Tutorials&lt;/h4&gt; &#xA;&lt;p&gt;Useful information is on our wiki, located here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/firrtl/wiki&#34;&gt;https://github.com/freechipsproject/firrtl/wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some important pages to read, before writing your own transform:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/firrtl/wiki/Submitting-a-Pull-Request&#34;&gt;Submitting Pull Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/firrtl/wiki/Understanding-Firrtl-Intermediate-Representation&#34;&gt;Understanding Firrtl&#39;s IR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/firrtl/wiki/traversing-a-circuit&#34;&gt;Traversing a Circuit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/firrtl/wiki/Common-Pass-Idioms&#34;&gt;Common Pass Idioms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To write a Firrtl transform, please start with the tutorial here: &lt;a href=&#34;https://github.com/freechipsproject/firrtl/raw/master/src/main/scala/tutorial&#34;&gt;src/main/scala/tutorial&lt;/a&gt;. To run these examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt assembly&#xA;./utils/bin/firrtl -td regress -i regress/RocketCore.fir --custom-transforms tutorial.lesson1.AnalyzeCircuit&#xA;./utils/bin/firrtl -td regress -i regress/RocketCore.fir --custom-transforms tutorial.lesson2.AnalyzeCircuit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Other Tools&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Firrtl syntax highlighting for Vim users: &lt;a href=&#34;https://github.com/azidar/firrtl-syntax&#34;&gt;https://github.com/azidar/firrtl-syntax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Firrtl syntax highlighting for Sublime Text 3 users: &lt;a href=&#34;https://github.com/codelec/highlight-firrtl&#34;&gt;https://github.com/codelec/highlight-firrtl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Firrtl syntax highlighting for Atom users: &lt;a href=&#34;https://atom.io/packages/language-firrtl&#34;&gt;https://atom.io/packages/language-firrtl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Firrtl syntax highlighting, structure view, navigate to corresponding Chisel code for IntelliJ platform: &lt;a href=&#34;https://plugins.jetbrains.com/plugin/14183-easysoc-firrtl&#34;&gt;install&lt;/a&gt;, &lt;a href=&#34;https://github.com/easysoc/easysoc-firrtl&#34;&gt;source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Firrtl mode for Emacs users: &lt;a href=&#34;https://github.com/ibm/firrtl-mode&#34;&gt;https://github.com/ibm/firrtl-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chisel3, an embedded hardware DSL that generates Firrtl: &lt;a href=&#34;https://github.com/freechipsproject/chisel3&#34;&gt;https://github.com/freechipsproject/chisel3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Treadle, a Firrtl Interpreter: &lt;a href=&#34;https://github.com/freechipsproject/treadle&#34;&gt;https://github.com/freechipsproject/treadle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Yosys Verilog-to-Firrtl Front-end: &lt;a href=&#34;https://github.com/cliffordwolf/yosys&#34;&gt;https://github.com/cliffordwolf/yosys&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Installation Instructions&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: The installation instructions should work for OSX/Linux machines. Other environments may not be tested.&lt;/p&gt; &#xA;&lt;h5&gt;Prerequisites&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If not already installed, install &lt;a href=&#34;http://www.veripool.org/projects/verilator/wiki/Installing&#34;&gt;verilator&lt;/a&gt; (Requires at least v3.886)&lt;/li&gt; &#xA; &lt;li&gt;If not already installed, install &lt;a href=&#34;https://github.com/YosysHQ/yosys&#34;&gt;yosys&lt;/a&gt; (Requires at least v0.8)&lt;/li&gt; &#xA; &lt;li&gt;If not already installed, install &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt; (Recommend v1.6.2)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Installation&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository: &lt;code&gt;git clone https://github.com/freechipsproject/firrtl.git &amp;amp;&amp;amp; cd firrtl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile firrtl: &lt;code&gt;sbt compile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run tests: &lt;code&gt;sbt test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build executable (&lt;code&gt;utils/bin/firrtl&lt;/code&gt;): &lt;code&gt;sbt assembly&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can add &lt;code&gt;utils/bin&lt;/code&gt; to your path to call firrtl from other processes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Publish this version locally in order to satisfy other tool chain library dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt publishLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Useful sbt Tips&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run a single test suite: &lt;code&gt;sbt &#34;testOnly firrtlTests.UnitTests&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Continually execute a command: &lt;code&gt;sbt ~compile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Only invoke sbt once:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt&#xA;&amp;gt; compile&#xA;&amp;gt; test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use scalafix to remove unused import and deprecated procedure syntax&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Remove unused import:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt &#34;firrtl/scalafix RemoveUnused&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Remove deprecated procedure syntax&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt &#34;firrtl/scalafix ProcedureSyntax&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using Firrtl as a commandline tool&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;utils/bin/firrtl -i regress/rocket.fir -o regress/rocket.v -X verilog // Compiles rocket-chip to Verilog&#xA;utils/bin/firrtl --help // Returns usage string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using the JQF Fuzzer&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;build.sbt&lt;/code&gt; defines the &lt;code&gt;fuzzer/jqfFuzz&lt;/code&gt; and &lt;code&gt;fuzzer/jqfRepro&lt;/code&gt; tasks. These can be used to randomly generate and run test cases and reproduce failing test cases respectively. These tasks are Scala implementations of the &lt;a href=&#34;https://github.com/rohanpadhye/JQF/tree/master/maven-plugin/src/main/java/edu/berkeley/cs/jqf/plugin&#34;&gt;FuzzGoal and ReproGoal&lt;/a&gt; of the JQF maven plugin and should be functionally identical.&lt;/p&gt; &#xA;&lt;p&gt;The format for the arguments to jqfFuzz are as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt&amp;gt; fuzzer/jqfFuzz &amp;lt;testClassName&amp;gt; &amp;lt;testMethodName&amp;gt; &amp;lt;otherArgs&amp;gt;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  --classpath &amp;lt;value&amp;gt;       the classpath to instrument and load the test class from&#xA;  --outputDirectory &amp;lt;value&amp;gt; the directory to output test results&#xA;  --testClassName &amp;lt;value&amp;gt;   the full class path of the test class&#xA;  --testMethod &amp;lt;value&amp;gt;      the method of the test class to run&#xA;  --excludes &amp;lt;value&amp;gt;        comma-separated list of FQN prefixes to exclude from coverage instrumentation&#xA;  --includes &amp;lt;value&amp;gt;        comma-separated list of FQN prefixes to forcibly include, even if they match an exclude&#xA;  --time &amp;lt;value&amp;gt;            the duration of time for which to run fuzzing&#xA;  --blind                   whether to generate inputs blindly without taking into account coverage feedback&#xA;  --engine &amp;lt;value&amp;gt;          the fuzzing engine, valid choices are zest|zeal&#xA;  --disableCoverage         disable code-coverage instrumentation&#xA;  --inputDirectory &amp;lt;value&amp;gt;  the name of the input directory containing seed files&#xA;  --saveAll                 save ALL inputs generated during fuzzing, even the ones that do not have any unique code coverage&#xA;  --libFuzzerCompatOutput   use libFuzzer like output instead of AFL like stats screen&#xA;  --quiet                   avoid printing fuzzing statistics progress in the console&#xA;  --exitOnCrash             stop fuzzing once a crash is found.&#xA;  --runTimeout &amp;lt;value&amp;gt;      the timeout for each individual trial, in milliseconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;fuzzer/jqfFuzz&lt;/code&gt; sbt task is a thin wrapper around the &lt;code&gt;firrtl.jqf.jqfFuzz&lt;/code&gt; main method that provides the &lt;code&gt;--classpath&lt;/code&gt; argument and a default &lt;code&gt;--outputDirectory&lt;/code&gt; and passes the rest of the arguments to the main method verbatim.&lt;/p&gt; &#xA;&lt;p&gt;The results will be put in the &lt;code&gt;fuzzer/target/JQf/$testClassName/$testMethod&lt;/code&gt; directory. Input files in the &lt;code&gt;fuzzer/target/JQf/$testClassName/$testMethod/corpus&lt;/code&gt; and &lt;code&gt;fuzzer/target/JQf/$testClassName/$testMethod/failures&lt;/code&gt; directories can be passed as inputs to the &lt;code&gt;fuzzer/jqfRepro&lt;/code&gt; task.&lt;/p&gt; &#xA;&lt;p&gt;The format for the arguments to jqfRepro are the same as &lt;code&gt;jqfFuzz&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt&amp;gt; fuzzer/jqfRepro &amp;lt;testClassName&amp;gt; &amp;lt;testMethodName&amp;gt; &amp;lt;otherArgs&amp;gt;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  --classpath &amp;lt;value&amp;gt;      the classpath to instrument and load the test class from&#xA;  --testClassName &amp;lt;value&amp;gt;  the full class path of the test class&#xA;  --testMethod &amp;lt;value&amp;gt;     the method of the test class to run&#xA;  --input &amp;lt;value&amp;gt;          input file or directory to reproduce test case(s)&#xA;  --logCoverage &amp;lt;value&amp;gt;    output file to dump coverage info&#xA;  --excludes &amp;lt;value&amp;gt;       comma-separated list of FQN prefixes to exclude from coverage instrumentation&#xA;  --includes &amp;lt;value&amp;gt;       comma-separated list of FQN prefixes to forcibly include, even if they match an exclude&#xA;  --printArgs              whether to print the args to each test case&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;code&gt;fuzzer/jqfFuzz&lt;/code&gt;, the &lt;code&gt;fuzzer/jqfRepro&lt;/code&gt; sbt task is a thin wrapper around the &lt;code&gt;firrtl.jqf.jqfRepro&lt;/code&gt; main method that provides the &lt;code&gt;--classpath&lt;/code&gt; argument and a default &lt;code&gt;--outputDirectory&lt;/code&gt; and passes the rest of the arguments to the main method verbatim.&lt;/p&gt; &#xA;&lt;h5&gt;Citing Firrtl&lt;/h5&gt; &#xA;&lt;p&gt;If you use Firrtl in a paper, please cite the following ICCAD paper and technical report: &lt;a href=&#34;https://ieeexplore.ieee.org/document/8203780&#34;&gt;https://ieeexplore.ieee.org/document/8203780&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@INPROCEEDINGS{8203780, &#xA;author={A. Izraelevitz and J. Koenig and P. Li and R. Lin and A. Wang and A. Magyar and D. Kim and C. Schmidt and C. Markley and J. Lawson and J. Bachrach}, &#xA;booktitle={2017 IEEE/ACM International Conference on Computer-Aided Design (ICCAD)}, &#xA;title={Reusability is FIRRTL ground: Hardware construction languages, compiler frameworks, and transformations}, &#xA;year={2017}, &#xA;volume={}, &#xA;number={}, &#xA;pages={209-216}, &#xA;keywords={field programmable gate arrays;hardware description languages;program compilers;software reusability;hardware development practices;hardware libraries;open-source hardware intermediate representation;hardware compiler transformations;Hardware construction languages;retargetable compilers;software development;virtual Cambrian explosion;hardware compiler frameworks;parameterized libraries;FIRRTL;FPGA mappings;Chisel;Flexible Intermediate Representation for RTL;Reusability;Hardware;Libraries;Hardware design languages;Field programmable gate arrays;Tools;Open source software;RTL;Design;FPGA;ASIC;Hardware;Modeling;Reusability;Hardware Design Language;Hardware Construction Language;Intermediate Representation;Compiler;Transformations;Chisel;FIRRTL}, &#xA;doi={10.1109/ICCAD.2017.8203780}, &#xA;ISSN={1558-2434}, &#xA;month={Nov},}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-9.html&#34;&gt;https://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-9.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@techreport{Li:EECS-2016-9,&#xA;    Author = {Li, Patrick S. and Izraelevitz, Adam M. and Bachrach, Jonathan},&#xA;    Title = {Specification for the FIRRTL Language},&#xA;    Institution = {EECS Department, University of California, Berkeley},&#xA;    Year = {2016},&#xA;    Month = {Feb},&#xA;    URL = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-9.html},&#xA;    Number = {UCB/EECS-2016-9}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>chipsalliance/treadle</title>
    <updated>2022-06-27T01:54:12Z</updated>
    <id>tag:github.com,2022-06-27:/chipsalliance/treadle</id>
    <link href="https://github.com/chipsalliance/treadle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chisel/Firrtl execution engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Treadle -- A Chisel/Firrtl Execution Engine&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/freechipsproject/firrtl?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/freechipsproject/firrtl.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/freechipsproject/firrtl&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/freechipsproject/treadle/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Treadle&lt;/strong&gt; is an experimental circuit simulator that executes low Firrtl IR. It is based on earlier work on the &lt;a href=&#34;https://github.com/freechipsproject/firrtl-interpreter&#34;&gt;firrtl_interpreter&lt;/a&gt; It will be one of the standard back-ends available as part of the &lt;a href=&#34;https://github.com/ucb-bar/chisel-testers.git&#34;&gt;chisel-testers&lt;/a&gt; project, and thus one of the tools in the &lt;a href=&#34;https://github.com/freechipsproject&#34;&gt;freechipsproject/chisel3&lt;/a&gt; hardware synthesis toolbox. This project provides a test harness supporting a peek, poke expect model.&lt;br&gt; It also provides a interactive simulator shell or repl (see treadle.sh) that allows fine grained incremental execution of a circuit. In combination with a scala debugger such as Eclipse or IntelliJ it can be a very powerful way of analyzing problematic behavior.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ucb-bar/chisel3.git&#34;&gt;Chisel3&lt;/a&gt; is a high-level functional circuit generator. It produces &lt;strong&gt;Flexible Intermediate Representation for RTL&lt;/strong&gt; or &lt;strong&gt;FIRRTL&lt;/strong&gt;. The &lt;a href=&#34;https://github.com/ucb-bar/firrtl.git&#34;&gt;Firrtl&lt;/a&gt; project parses and transforms firrtl. It also provides mechanisms for emitting verilog, for processing by downstream toolchains. &lt;strong&gt;Treadle&lt;/strong&gt; parses and execute the LoFirrtl subset of Firrtl. &lt;strong&gt;Treadle&lt;/strong&gt; has a short spin up time and is close to the performance of verilator simulations. It can be useful for an initial debugging of Chisel circuits and is also used for other forms of circuit analysis.&lt;/p&gt; &#xA;&lt;h2&gt;Using Treadle&lt;/h2&gt; &#xA;&lt;h3&gt;Attach it to your project&lt;/h3&gt; &#xA;&lt;p&gt;If you are using the &lt;a href=&#34;https://github.com/freechipsproject/chisel-testers&#34;&gt;freechipsproject/chisel-testers&lt;/a&gt; you will have access to &lt;strong&gt;Treadle&lt;/strong&gt; through it&#39;s dependency declarations.&lt;/p&gt; &#xA;&lt;p&gt;If chisel-testers is not part of your tool chain then you must add the dependency explicitly. To do so, in your project &lt;code&gt;build.sbt&lt;/code&gt; add a dependency on&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;edu.berkeley.cs&#34; %% &#34;treadle&#34; % &#34;1.1-SNAPSHOT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a number of different ways to specify this dependency in the build.sbt file. If you have based your circuit on the &lt;a href=&#34;https://github.com/freechipsproject/chisel-template.git&#34;&gt;Chisel-template&lt;/a&gt; the addition should look like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies ++= Seq(&#xA;  &#34;edu.berkeley.cs&#34; %% &#34;chisel3&#34; % chiselVersion,&#xA;  &#34;edu.berkeley.cs&#34; %% &#34;chisel-iotesters&#34; % &#34;1.0&#34;,&#xA;  &#34;edu.berkeley.cs&#34; %% &#34;treadle&#34; % &#34;1.1-SNAPSHOT&#34;,&#xA;  &#34;org.scalatest&#34; %% &#34;scalatest&#34; % &#34;3.2.8&#34; % &#34;test&#34;,&#xA;  &#34;org.scalacheck&#34; %% &#34;scalacheck&#34; % &#34;1.12.4&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for other usage consult &lt;strong&gt;sbt&lt;/strong&gt; documentation&lt;/p&gt; &#xA;&lt;h3&gt;Use the Tester Metaphor&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to invoke the interpreter is through a test based harness. The InterpretiveTester is very similar to the chisel ClassicTester, it&#39;s api consists of poke, peek and expect statements. Here is an example of a GCD Circuit&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import chisel3._&#xA;import treadle.TreadleTester&#xA;import org.scalatest.{Matchers, FlatSpec}&#xA;&#xA;object GCDCalculator {&#xA;  def computeGcd(a: Int, b: Int): (Int, Int) = {&#xA;    var x = a&#xA;    var y = b&#xA;    var depth = 1&#xA;    while(y &amp;gt; 0 ) {&#xA;      if (x &amp;gt; y) {&#xA;        x -= y&#xA;      }&#xA;      else {&#xA;        y -= x&#xA;      }&#xA;      depth += 1&#xA;    }&#xA;    (x, depth)&#xA;  }&#xA;}&#xA;&#xA;class GCD extends Module {&#xA;  val io = IO(new Bundle {&#xA;    val a  = Input(UInt(16.W))&#xA;    val b  = Input(UInt(16.W)))&#xA;    val e  = Input(Bool())&#xA;    val z  = Output(UInt(16.W))&#xA;    val v  = Output(Bool())&#xA;  })&#xA;  val x  = Reg(UInt())&#xA;  val y  = Reg(UInt())&#xA;  when(x &amp;gt; y) { x := x - y }&#xA;    .elsewhen(x &amp;lt;= y) { y := y - x }&#xA;  when (io.e) { x := io.a; y := io.b }&#xA;  io.z := x&#xA;  io.v := y === UInt(0)&#xA;}&#xA;&#xA;class TreadleUsageSpec extends FlatSpec with Matchers {&#xA;&#xA;  &#34;GCD&#34; should &#34;return correct values for a range of inputs&#34; in {&#xA;    val s = Driver.emit(() =&amp;gt; new GCD)&#xA;&#xA;    val tester = TreadleTester(s)&#xA;&#xA;    for {&#xA;      i &amp;lt;- 1 to 100&#xA;      j &amp;lt;- 1 to 100&#xA;    } {&#xA;      tester.poke(&#34;io_a&#34;, i)&#xA;      tester.poke(&#34;io_b&#34;, j)&#xA;      tester.poke(&#34;io_e&#34;, 1)&#xA;      tester.step()&#xA;      tester.poke(&#34;io_e&#34;, 0)&#xA;&#xA;      var cycles = 0&#xA;      while (tester.peek(&#34;io_v&#34;) != BigInt(1)) {&#xA;        tester.step()&#xA;        cycles += 1&#xA;      }&#xA;      tester.expect(&#34;io_z&#34;, BigInt(GCDCalculator.computeGcd(i, j)._1))&#xA;      // uncomment the println to see a lot of output&#xA;      // println(f&#34;GCD(${i}%3d, ${j}%3d) =&amp;gt; ${interpretiveTester.peek(&#34;io_z&#34;)}%3d in $cycles%3d cycles&#34;)&#xA;    }&#xA;    tester.report()&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Style conventions ScalaFmt&lt;/h3&gt; &#xA;&lt;p&gt;Treadle is the first repo in the chisel family to use the &lt;a href=&#34;https://scalameta.org/scalafmt/&#34;&gt;ScalaFmt&lt;/a&gt; code formatter. The plan going forward from 12/9/2019 is that all Scala code in PRs to Treadle after that date must be formatted using the specification in the &lt;code&gt;.scalafmt.conf&lt;/code&gt; file. Doing the formatting is simple and can be done via IntelliJ or &lt;code&gt;sbt&lt;/code&gt;. More details can be found on the link above. For the present we are also interested in comments on the formatting decisions we have made. Keep in mind that there is no set of rules that will satisfy everyone.&lt;/p&gt; &#xA;&lt;h3&gt;About ports and names&lt;/h3&gt; &#xA;&lt;p&gt;The firrtl transformations that result in LoFirrtl alter the names of ports. What would be io.a becomes io_a and so forth.&lt;/p&gt;</summary>
  </entry>
</feed>