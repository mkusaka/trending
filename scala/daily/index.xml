<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-06T01:41:58Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>guardian/support-service-lambdas</title>
    <updated>2024-02-06T01:41:58Z</updated>
    <id>tag:github.com,2024-02-06:/guardian/support-service-lambdas</id>
    <link href="https://github.com/guardian/support-service-lambdas" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lambdas covering supporter operations, mostly in life operations&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;support-service-lambdas &lt;a href=&#34;https://app.codacy.com/app/johnduffell/support-service-lambdas?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=guardian/support-service-lambdas&amp;amp;utm_campaign=badger&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/df83c14325bc4c29aeae7e529f49f8a9&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is the reader revenue lambda API/orchestration layer. It is made up of lambdas, defined in the &lt;code&gt;/handlers&lt;/code&gt; directory and libraries defined in the &lt;code&gt;/libs&lt;/code&gt; directory. Code in the repo is mostly Scala but for new lambdas prefer to use Typescript for the following reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is a wider pool of experienced Typescript developers both within the Guardian and outside making it easier to find devs to work on the codebase&lt;/li&gt; &#xA; &lt;li&gt;It enables us to share code between server side applications, client side applications and infrastructure definitions (CDK)&lt;/li&gt; &#xA; &lt;li&gt;Cold start times for Typescript lambdas are typically faster than for Scala ones&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please keep all the various README in this project up to date, and improve them! There should be one in each project and anywhere else you think it would help.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started - Typescript&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://pnpm.io/&#34;&gt;pnpm&lt;/a&gt; as a package manager so make sure you have it &lt;a href=&#34;https://pnpm.io/installation&#34;&gt;installed&lt;/a&gt;, &lt;code&gt;brew install pnpm&lt;/code&gt; is a simple way to do this, then run &lt;code&gt;pnpm install&lt;/code&gt; from the root of the repo to install all dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Each lambda is a separate &lt;a href=&#34;https://pnpm.io/workspaces&#34;&gt;pnpm workspace&lt;/a&gt; which allows us to define common settings and dependencies for all projects, add dependencies between projects build all projects at once and generally facilitates the management of a monorepo&lt;/p&gt; &#xA;&lt;p&gt;Linting rules (&lt;code&gt;.eslintrc.json&lt;/code&gt;), formatting rules (&lt;code&gt;.prettierrc&lt;/code&gt;) and Typescript configuration (&lt;code&gt;tsconfig.json&lt;/code&gt;) are all defined at the root of the repository and use standard Guardian configuration where available.&lt;/p&gt; &#xA;&lt;p&gt;These can also be overridden at a per workspace level, for instance each lambda should override the &lt;code&gt;rootdir&lt;/code&gt; setting through a local &lt;code&gt;tsconfig.json&lt;/code&gt; file as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;extends&#34;: &#34;../../tsconfig.json&#34;,&#xA;  &#34;compilerOptions&#34;: {&#xA;    &#34;rootDir&#34;: &#34;./src&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dependencies can also be managed either at the root workspace level or in individual lambdas. To add dependencies to a specific sub-project you can use &lt;a href=&#34;https://pnpm.io/filtering&#34;&gt;pnpm filtering&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm --filter discount-api add dayjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or simply run the add command in the root directory of the subproject&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm add dayjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add dependencies to the workspace so that they are available to all project you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm --workspace-root add dayjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;however this should only be used for dependencies which really are necessary for all sub-projects.&lt;/p&gt; &#xA;&lt;p&gt;Filtering can also be used to run builds or any other command on a particular sub-project, for instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pnpm --filter discount-api package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started - Scala&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the project in Intellij with Scala plugin installed&lt;/li&gt; &#xA; &lt;li&gt;Open Intellij-&amp;gt;Settings-&amp;gt;sbt (search for it)&lt;/li&gt; &#xA; &lt;li&gt;Turn on sbt shell for project loading and compilation.&lt;/li&gt; &#xA; &lt;li&gt;(optional for better scala 3 support) switch the scala plugin to &#34;nightly&#34; or &#34;early access&#34; rather than Release&lt;/li&gt; &#xA; &lt;li&gt;Go into &#34;handlers&#34; and find the relevant lambda(s), and check (or add) their Getting Started section&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running all Integration tests&lt;/h3&gt; &#xA;&lt;p&gt;These tests do not (yet!) run automatically.&lt;/p&gt; &#xA;&lt;p&gt;You can run the tests that hit external services by running &lt;code&gt;sbt effectsTest:test&lt;/code&gt;. This would need suitable AWS credentials to get hold of the config. You can tag your integration new tests with &lt;code&gt;taggedAs EffectsTest&lt;/code&gt;. This ignores them from the standard &lt;code&gt;sbt test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: You may notice that IntelliJ doesn&#39;t compile the effects tests on-the-fly (as it does with source files) you can re-enable this behaviour by commenting out the contents of the &lt;code&gt;Seq(...)&lt;/code&gt; at the end of the &lt;code&gt;val testSettings&lt;/code&gt; assignent in the top-level &lt;code&gt;build.sbt&lt;/code&gt; . This is also means you can run them with the IntelliJ debugger :)&lt;/p&gt; &#xA;&lt;h3&gt;Testing post deployment to CODE/PROD&lt;/h3&gt; &#xA;&lt;p&gt;The PROD health checks are &lt;a href=&#34;https://www.runscope.com/radar/wrb0ytfjy4a4&#34;&gt;called by blazemeter&lt;/a&gt; every 5 minutes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Generating CloudFormation templates:&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/guardian/support-service-lambdas/main/cdk/README.md&#34;&gt;docs&lt;/a&gt; for setup and running guides.&lt;/p&gt; &#xA;&lt;h2&gt;Adding a new lambda:&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/guardian/support-service-lambdas/main/handlers/HOWTO-create-lambda.md&#34;&gt;this doc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>