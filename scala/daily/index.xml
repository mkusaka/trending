<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-21T01:45:25Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SpinalHDL/NaxRiscv</title>
    <updated>2023-03-21T01:45:25Z</updated>
    <id>tag:github.com,2023-03-21:/SpinalHDL/NaxRiscv</id>
    <link href="https://github.com/SpinalHDL/NaxRiscv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NaxRiscv&lt;/h1&gt; &#xA;&lt;p&gt;An RISC-V core currently characterised by :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Out of order execution with register renaming&lt;/li&gt; &#xA; &lt;li&gt;Superscalar (ex : 2 decode, 3 execution units, 2 retire)&lt;/li&gt; &#xA; &lt;li&gt;(RV32/RV64)IMAFDCSU (Linux / Buildroot works on hardware)&lt;/li&gt; &#xA; &lt;li&gt;High perf config : 2.93 DMIPS/Mhz, 5.02 Coremark/Mhz, 1.67 Embench-iot baseline (Cortex M4) @ 155 Mhz + 13.3 KLUT on Artix 7-3&lt;/li&gt; &#xA; &lt;li&gt;Portable HDL, but target FPGA with distributed ram (Xilinx series 7 is the reference used so far)&lt;/li&gt; &#xA; &lt;li&gt;Target a (relatively) low area usage and high fmax (not the best IPC)&lt;/li&gt; &#xA; &lt;li&gt;Decentralized hardware elaboration (Empty toplevel parametrized with plugins)&lt;/li&gt; &#xA; &lt;li&gt;Frontend implemented around a pipelining framework to ease customisation&lt;/li&gt; &#xA; &lt;li&gt;Non-blocking Data cache with multiple refill and writeback slots&lt;/li&gt; &#xA; &lt;li&gt;BTB + GSHARE + RAS branch predictors&lt;/li&gt; &#xA; &lt;li&gt;Hardware refilled MMU (SV32, SV39)&lt;/li&gt; &#xA; &lt;li&gt;Load to use latency of 3 cycles via the speculative cache hit predictor&lt;/li&gt; &#xA; &lt;li&gt;Pipeline visualisation via verilator simulation and Konata (gem5 file format)&lt;/li&gt; &#xA; &lt;li&gt;JTAG / OpenOCD / GDB support by implementing the RISCV External Debug Support v. 0.13.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To test the project, see the &#34;Running Verilator simulation&#34; section&lt;/p&gt; &#xA;&lt;h1&gt;Online documentation&lt;/h1&gt; &#xA;&lt;p&gt;There is a Read The Doc hosted here :&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spinalhdl.github.io/NaxRiscv-Rtd/main/NaxRiscv/introduction/index.html&#34;&gt;https://spinalhdl.github.io/NaxRiscv-Rtd/main/NaxRiscv/introduction/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Performances / Area&lt;/h1&gt; &#xA;&lt;p&gt;See :&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spinalhdl.github.io/NaxRiscv-Rtd/main/NaxRiscv/performance/index.html&#34;&gt;https://spinalhdl.github.io/NaxRiscv-Rtd/main/NaxRiscv/performance/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Running on hardware&lt;/h1&gt; &#xA;&lt;p&gt;NaxRiscv is currently integrated into &lt;a href=&#34;https://github.com/enjoy-digital/litex&#34;&gt;https://github.com/enjoy-digital/litex&lt;/a&gt;. For instance to run it on the Nexys video board, you can :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 -m litex_boards.targets.digilent_nexys_video --cpu-type=naxriscv --with-video-framebuffer --with-sdcard --build --load&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, note that if you want to run linux on it, it is image compatible with &lt;a href=&#34;https://github.com/litex-hub/linux-on-litex-vexriscv&#34;&gt;https://github.com/litex-hub/linux-on-litex-vexriscv&lt;/a&gt;, you will have to adapte the dts/dtb (removing peripherals).&lt;/p&gt; &#xA;&lt;p&gt;Here is Doom running in linux : &lt;a href=&#34;https://twitter.com/enjoy_digital/status/1493996880593887235?s=20&amp;amp;t=VR734wYewBFsT2Fgvm339Q&#34;&gt;https://twitter.com/enjoy_digital/status/1493996880593887235?s=20&amp;amp;t=VR734wYewBFsT2Fgvm339Q&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Running Verilator simulation&lt;/h1&gt; &#xA;&lt;p&gt;See src/test/cpp/naxriscv/README.md&lt;/p&gt; &#xA;&lt;p&gt;Linux/Buildroot running in simulation :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./obj_dir/VNaxRiscv \&#xA;    --load-bin $LINUX_IMAGES/fw_jump.bin,0x80000000 \&#xA;    --load-bin $LINUX_IMAGES/linux.dtb,0x80F80000 \&#xA;    --load-bin $LINUX_IMAGES/Image,0x80400000 \&#xA;    --load-bin $LINUX_IMAGES/rootfs.cpio,0x81000000 &#xA;OpenSBI v0.8&#xA;   ____                    _____ ____ _____&#xA;  / __ \                  / ____|  _ \_   _|&#xA; | |  | |_ __   ___ _ __ | (___ | |_) || |&#xA; | |  | | &#39;_ \ / _ \ &#39;_ \ \___ \|  _ &amp;lt; | |&#xA; | |__| | |_) |  __/ | | |____) | |_) || |_&#xA;  \____/| .__/ \___|_| |_|_____/|____/_____|&#xA;        | |&#xA;        |_|&#xA;&#xA;Platform Name       : NaxRiscv&#xA;Platform Features   : timer,mfdeleg&#xA;Platform HART Count : 1&#xA;Boot HART ID        : 0&#xA;Boot HART ISA       : rv32imasu&#xA;BOOT HART Features  : scounteren,mcounteren&#xA;BOOT HART PMP Count : 0&#xA;Firmware Base       : 0x80000000&#xA;Firmware Size       : 64 KB&#xA;Runtime SBI Version : 0.2&#xA;&#xA;MIDELEG : 0x00000222&#xA;MEDELEG : 0x0000b109&#xA;[    0.000000] Linux version 5.10.1 (rawrr@rawrr) (riscv32-buildroot-linux-gnu-gcc.br_real (Buildroot 2020.11-rc3-8-g9ef54b7d0b) 10.2.0, GNU ld (GNU Binutils) 2.34) #2 SMP Wed Jan 26 14:18:17 CET 2022&#xA;[    0.000000] earlycon: sbi0 at I/O port 0x0 (options &#39;&#39;)&#xA;[    0.000000] printk: bootconsole [sbi0] enabled&#xA;[    0.000000] Initial ramdisk at: 0x(ptrval) (8388608 bytes)&#xA;[    0.000000] Zone ranges:&#xA;[    0.000000]   Normal   [mem 0x0000000080400000-0x000000008fffffff]&#xA;[    0.000000] Movable zone start for each node&#xA;[    0.000000] Early memory node ranges&#xA;[    0.000000]   node   0: [mem 0x0000000080400000-0x000000008fffffff]&#xA;[    0.000000] Initmem setup node 0 [mem 0x0000000080400000-0x000000008fffffff]&#xA;[    0.000000] SBI specification v0.2 detected&#xA;[    0.000000] SBI implementation ID=0x1 Version=0x8&#xA;[    0.000000] SBI v0.2 TIME extension detected&#xA;[    0.000000] SBI v0.2 IPI extension detected&#xA;[    0.000000] SBI v0.2 RFENCE extension detected&#xA;[    0.000000] SBI v0.2 HSM extension detected&#xA;[    0.000000] riscv: ISA extensions aim&#xA;[    0.000000] riscv: ELF capabilities aim&#xA;[    0.000000] percpu: Embedded 10 pages/cpu s18700 r0 d22260 u40960&#xA;[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 64008&#xA;[    0.000000] Kernel command line: rootwait console=hvc0 earlycon=sbi root=/dev/ram0 init=/sbin/init&#xA;[    0.000000] Dentry cache hash table entries: 32768 (order: 5, 131072 bytes, linear)&#xA;[    0.000000] Inode-cache hash table entries: 16384 (order: 4, 65536 bytes, linear)&#xA;[    0.000000] Sorting __ex_table...&#xA;[    0.000000] mem auto-init: stack:off, heap alloc:off, heap free:off&#xA;[    0.000000] Memory: 241280K/258048K available (4717K kernel code, 553K rwdata, 632K rodata, 166K init, 213K bss, 16768K reserved, 0K cma-reserved)&#xA;[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=1, Nodes=1&#xA;[    0.000000] rcu: Hierarchical RCU implementation.&#xA;[    0.000000] rcu: &#x9;RCU restricting CPUs from NR_CPUS=8 to nr_cpu_ids=1.&#xA;[    0.000000] rcu: RCU calculated value of scheduler-enlistment delay is 25 jiffies.&#xA;[    0.000000] rcu: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=1&#xA;[    0.000000] NR_IRQS: 64, nr_irqs: 64, preallocated irqs: 0&#xA;[    0.000000] riscv-intc: 32 local interrupts mapped&#xA;[    0.000000] random: get_random_bytes called from start_kernel+0x35c/0x4dc with crng_init=0&#xA;[    0.000000] riscv_timer_init_dt: Registering clocksource cpuid [0] hartid [0]&#xA;[    0.000000] clocksource: riscv_clocksource: mask: 0xffffffffffffffff max_cycles: 0x171024e7e0, max_idle_ns: 440795205315 ns&#xA;[    0.000096] sched_clock: 64 bits at 100MHz, resolution 10ns, wraps every 4398046511100ns&#xA;[    0.001452] Console: colour dummy device 80x25&#xA;[    0.001923] printk: console [hvc0] enabled&#xA;[    0.001923] printk: console [hvc0] enabled&#xA;[    0.002597] printk: bootconsole [sbi0] disabled&#xA;[    0.002597] printk: bootconsole [sbi0] disabled&#xA;[    0.003469] Calibrating delay loop (skipped), value calculated using timer frequency.. 200.00 BogoMIPS (lpj=400000)&#xA;[    0.004346] pid_max: default: 32768 minimum: 301&#xA;[    0.006040] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)&#xA;[    0.006715] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)&#xA;[    0.018275] rcu: Hierarchical SRCU implementation.&#xA;[    0.021169] smp: Bringing up secondary CPUs ...&#xA;[    0.021752] smp: Brought up 1 node, 1 CPU&#xA;[    0.024190] devtmpfs: initialized&#xA;[    0.029478] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns&#xA;[    0.030479] futex hash table entries: 256 (order: 2, 16384 bytes, linear)&#xA;[    0.032419] NET: Registered protocol family 16&#xA;[    0.072397] clocksource: Switched to clocksource riscv_clocksource&#xA;[    0.130361] NET: Registered protocol family 2&#xA;[    0.135484] tcp_listen_portaddr_hash hash table entries: 512 (order: 0, 6144 bytes, linear)&#xA;[    0.136588] TCP established hash table entries: 2048 (order: 1, 8192 bytes, linear)&#xA;[    0.137670] TCP bind hash table entries: 2048 (order: 2, 16384 bytes, linear)&#xA;[    0.138674] TCP: Hash tables configured (established 2048 bind 2048)&#xA;[    0.139694] UDP hash table entries: 256 (order: 1, 8192 bytes, linear)&#xA;[    0.140653] UDP-Lite hash table entries: 256 (order: 1, 8192 bytes, linear)&#xA;[    0.145111] Unpacking initramfs...&#xA;[    0.382796] Initramfs unpacking failed: invalid magic at start of compressed archive&#xA;[    0.438458] Freeing initrd memory: 8192K&#xA;[    0.442311] workingset: timestamp_bits=30 max_order=16 bucket_order=0&#xA;[    0.497197] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 254)&#xA;[    0.497827] io scheduler mq-deadline registered&#xA;[    0.498260] io scheduler kyber registered&#xA;[    0.863943] NET: Registered protocol family 10&#xA;[    0.869801] Segment Routing with IPv6&#xA;[    0.870713] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver&#xA;[    0.875543] NET: Registered protocol family 17&#xA;[    0.880356] Freeing unused kernel memory: 164K&#xA;[    0.880786] Kernel memory protection not selected by kernel config.&#xA;[    0.881380] Run /init as init process&#xA;Starting syslogd: OK&#xA;Starting klogd: OK&#xA;Running sysctl: OK&#xA;Saving random seed: [    1.502669] random: dd: uninitialized urandom read (512 bytes read)&#xA;OK&#xA;Starting network: OK&#xA;&#xA;Welcome to Buildroot&#xA;buildroot login: root&#xA;           _  _                     ___      _&#xA;    o O O | \| |   __ _    __ __   | _ \    (_)     ___     __     __ __&#xA;   o      | .` |  / _` |   \ \ /   |   /    | |    (_-&amp;lt;    / _|    \ V /&#xA;  TS__[O] |_|\_|  \__,_|   /_\_\   |_|_\   _|_|_   /__/_   \__|_   _\_/_&#xA; {======|_|&#34;&#34;&#34;&#34;&#34;|_|&#34;&#34;&#34;&#34;&#34;|_|&#34;&#34;&#34;&#34;&#34;|_|&#34;&#34;&#34;&#34;&#34;|_|&#34;&#34;&#34;&#34;&#34;|_|&#34;&#34;&#34;&#34;&#34;|_|&#34;&#34;&#34;&#34;&#34;|_|&#34;&#34;&#34;&#34;&#34;|&#xA;./o--000&#39;&#34;`-0-0-&#39;&#34;`-0-0-&#39;&#34;`-0-0-&#39;&#34;`-0-0-&#39;&#34;`-0-0-&#39;&#34;`-0-0-&#39;&#34;`-0-0-&#39;&#34;`-0-0-&#39;&#xA;login[65]: root login on &#39;console&#39;&#xA;root@buildroot:~# cat /proc/cpuinfo&#xA;processor&#x9;: 0&#xA;hart&#x9;&#x9;: 0&#xA;isa&#x9;&#x9;: rv32ima&#xA;mmu&#x9;&#x9;: sv32&#xA;&#xA;root@buildroot:~# echo 1+2+3*4 | bc&#xA;15&#xA;root@buildroot:~# micropython&#xA;MicroPython v1.13 on 2022-01-26; linux version&#xA;Use Ctrl-D to exit, Ctrl-E for paste mode&#xA;&amp;gt;&amp;gt;&amp;gt; 1+2+3&#xA;6&#xA;&amp;gt;&amp;gt;&amp;gt; import math&#xA;&amp;gt;&amp;gt;&amp;gt; math.sin(math.pi/4)&#xA;0.7071067811865475&#xA;&amp;gt;&amp;gt;&amp;gt; from sys import exit&#xA;&amp;gt;&amp;gt;&amp;gt; exit()&#xA;root@buildroot:~# ls /&#xA;bin      init     linuxrc  opt      run      tmp&#xA;dev      lib      media    proc     sbin     usr&#xA;etc      lib32    mnt      root     sys      var&#xA;root@buildroot:~#&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>sequencer/tilelink</title>
    <updated>2023-03-21T01:45:25Z</updated>
    <id>tag:github.com,2023-03-21:/sequencer/tilelink</id>
    <link href="https://github.com/sequencer/tilelink" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TileLink&lt;/h1&gt; &#xA;&lt;p&gt;Chisel library of TileLink, providing TileLink interconnect datatype declaration.&lt;/p&gt; &#xA;&lt;h2&gt;Pending PRs&lt;/h2&gt; &#xA;&lt;p&gt;Philosophy of this repository is &lt;strong&gt;fast break and fast fix&lt;/strong&gt;. This repository always tracks remote developing branches, it may need some patches to work, &lt;code&gt;make patch&lt;/code&gt; will append below in sequence:&lt;/p&gt; &#xA;&lt;!-- BEGIN-PATCH --&gt; &#xA;&lt;p&gt;rocket-chip &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/pull/2968&#34;&gt;https://github.com/chipsalliance/rocket-chip/pull/2968&lt;/a&gt;&lt;br&gt; rocket-chip &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/pull/3013&#34;&gt;https://github.com/chipsalliance/rocket-chip/pull/3013&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- END-PATCH --&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;h3&gt;BUSIP&lt;/h3&gt; &#xA;&lt;p&gt;These IPs will be ported from RocketChip, but work with the D/I of Chisel3.&lt;/p&gt; &#xA;&lt;h3&gt;Diplomatic&lt;/h3&gt; &#xA;&lt;p&gt;It defines the diplomatic busip, which can be used for diplomatic connection.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sequencer/arithmetic</title>
    <updated>2023-03-21T01:45:25Z</updated>
    <id>tag:github.com,2023-03-21:/sequencer/arithmetic</id>
    <link href="https://github.com/sequencer/arithmetic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>