<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-16T01:55:33Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>marcinzh/effect-zoo</title>
    <updated>2022-08-16T01:55:33Z</updated>
    <id>tag:github.com,2022-08-16:/marcinzh/effect-zoo</id>
    <link href="https://github.com/marcinzh/effect-zoo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Effect Zoo for Scala&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Effect Zoo for Scala 3&lt;/h1&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/ocharles/effect-zoo&#34;&gt;Effect Zoo&lt;/a&gt; for Haskell.&lt;/p&gt; &#xA;&lt;p&gt;Effect Zoo provides:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Code gallery, where we can demonstrate and compare the syntax of different effect systems, when they are assigned the same task. The sources are located &lt;a href=&#34;https://github.com/marcinzh/effect-zoo/tree/main/modules/core/src/main/scala/effect_zoo/contests&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Microbenchmark suite. See running instruction &lt;a href=&#34;https://raw.githubusercontent.com/marcinzh/effect-zoo/main/#running-microbenchmarks&#34;&gt;below&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Or, if you really don&#39;t want to run the microbenchmark yourself ðŸ˜ž, you can just see sample results &lt;a href=&#34;https://gist.github.com/marcinzh/711a0810e7915e0e36c3f8c3ba78a6a0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Included scenarios (contests):&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cdown&lt;/code&gt;: The CountDown scenario from Haskell&#39;s Effect Zoo. Uses single &lt;code&gt;State&lt;/code&gt; effect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sumh&lt;/code&gt;: In the spirit of CountDown, but uses more effects: &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;Writer&lt;/code&gt;, &lt;code&gt;State&lt;/code&gt;, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mulst&lt;/code&gt;: Multiple instances of &lt;code&gt;State&lt;/code&gt; effects used at the same time. Compares overhead of effect stack size, by running the same number of &lt;code&gt;State&lt;/code&gt; operations, spread over a varying number &lt;code&gt;State&lt;/code&gt; effects (1 to 5).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reint&lt;/code&gt;: The Reinterpretation scenario from Haskell&#39;s Effect Zoo. Demonstrates use of custom-defined effects as application modules, and effect reinterpretation as DI mechanism.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Included effect systems:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/typelevel/cats&#34;&gt;Cats Core&lt;/a&gt;. Plain monad transformers, used with manual lifting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/typelevel/cats-mtl&#34;&gt;Cats MTL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/atnos-org/eff&#34;&gt;Cats Eff&lt;/a&gt;. Don&#39;t confuse with &lt;a href=&#34;https://github.com/typelevel/cats-effect&#34;&gt;Cats Effect&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/zio/zio&#34;&gt;ZIO&lt;/a&gt;. ZIO doesn&#39;t come with predefined standard effects such as &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;Writer&lt;/code&gt; and &lt;code&gt;State&lt;/code&gt;. In this project we explore &lt;a href=&#34;https://github.com/marcinzh/effect-zoo/tree/main/modules/core/src/main/scala/effect_zoo/auxx/zio_/rws&#34;&gt;several ways&lt;/a&gt; of implementing them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ZPure from &lt;a href=&#34;https://github.com/zio/zio-prelude&#34;&gt;ZIO Prelude&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/marcinzh/turbolift&#34;&gt;Turbolift&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many more effect systems for Scala (e.g. 3 more implementations of the Eff monad alone), but they are unmaintained and unavailable for Scala 2.13 or 3.x.&lt;/p&gt; &#xA;&lt;h1&gt;Running Microbenchmarks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Step 0:&lt;/strong&gt; Ensure you have a modern terminal.&lt;/p&gt; &lt;p&gt;Without support for Unicode characters and True Color, charts won&#39;t be displayed properly. If you are on Windows, old &lt;code&gt;cmd.exe&lt;/code&gt; or PowerShell will get you garbage on the screen. The &lt;a href=&#34;https://github.com/Microsoft/Terminal&#34;&gt;New Terminal&lt;/a&gt; might work (unconfirmed).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Have sbt installed.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://www.scala-sbt.org/download.html&#34;&gt;https://www.scala-sbt.org/download.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Get a local copy of this repo and launch sbt:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/marcinzh/effect-zoo.git&#xA;cd effect-zoo&#xA;sbt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; From sbt&#39;s command prompt, pick &lt;strong&gt;one&lt;/strong&gt; method:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Run JMH by using predefined alias (takes ~20 minutes to complete):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;runbench&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Run JMH directly, with your own parameters, e.g:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bench/Jmh/run -i 3 -wi 3 -f1 -t1 -r 3 -w 3 .*Cdown&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Run Effect-Zoo&#39;s own, simple microbenchmark tool. It&#39;s less accurate than JMH, but completes much sooner (under 3 minutes):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;diy/run --all&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>bambosan/BSBE-Lite</title>
    <updated>2022-08-16T01:55:33Z</updated>
    <id>tag:github.com,2022-08-16:/bambosan/BSBE-Lite</id>
    <link href="https://github.com/bambosan/BSBE-Lite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a shader for minecraft be&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>mogproject/scalaconfjp-countdown</title>
    <updated>2022-08-16T01:55:33Z</updated>
    <id>tag:github.com,2022-08-16:/mogproject/scalaconfjp-countdown</id>
    <link href="https://github.com/mogproject/scalaconfjp-countdown" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>