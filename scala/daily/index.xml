<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-27T01:38:55Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Snapchat/GiGL</title>
    <updated>2025-07-27T01:38:55Z</updated>
    <id>tag:github.com,2025-07-27:/Snapchat/GiGL</id>
    <link href="https://github.com/Snapchat/GiGL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gigantic Graph Learning (GiGL) Framework: Large-scale training and inference for Graph Neural Networks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GiGL: Gigantic Graph Learning&lt;/h1&gt; &#xA;&lt;p&gt;GiGL is an open-source library for training and inference of Graph Neural Networks at very large (billion) scale.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{only}&#34;&gt;::not html&#xA;&#xA;For best experience in reading GiGL documentation, visit our website:&#xA;https://snapchat.github.io/GiGL/&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Key Features üåü&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;üß† &lt;strong&gt;Versatile GNN Applications&lt;/strong&gt;: Supports easy customization in using GNNs in supervised and unsupervised ML applications like node classification and link prediction.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;üöÄ &lt;strong&gt;Designed for Scalability&lt;/strong&gt;: The architecture is built with horizontal scaling in mind, ensuring cost-effective performance throughout the process of data preprocessing and transformation, model training, and inference.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;üéõÔ∏è &lt;strong&gt;Easy Orchestration&lt;/strong&gt;: Simplified end-to-end orchestration, making it easy for developers to implement, scale, and manage their GNN projects.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation ‚öôÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/docs/user_guide/getting_started/installation.md&#34;&gt;Installation Instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started üöÄ&lt;/h2&gt; &#xA;&lt;p&gt;If you like to get started right away, see our &lt;a href=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/docs/user_guide/getting_started/quick_start.md&#34;&gt;Quick Start Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The best way to get more familiar with GiGL is to go through our detailed &lt;a href=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/docs/user_guide/index.rst&#34;&gt;User Guide&lt;/a&gt; and see our &lt;a href=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/docs/api/index.rst&#34;&gt;API documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Architecture&lt;/h3&gt; &#xA;&lt;p&gt;GiGL includes a range of components, each built to support the platform‚Äôs end-to-end GraphML workflows. For an overview of the architecture and detailed information, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/docs/user_guide/overview/architecture.md&#34;&gt;GiGL Components&lt;/a&gt;. Below, we provide a brief summary for quick reference.&lt;/p&gt; &#xA;&lt;p&gt;The figure below illustrates at a high level how components of GiGL work together. (&lt;span style=&#34;color:purple&#34;&gt;Purple&lt;/span&gt; items are work-in-progress.)&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/docs/assets/images/gigl_system_fig.png&#34; alt=&#34;GiGL System Figure&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;The figure below is a example GiGL workflow with tabularized subgraph sampling for the task of link prediction, in which the model is trained with triplet-style contrastive loss on a set of anchor nodes along with their positives and (in-batch) negatives.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/docs/assets/images/gigl_nablp.png&#34; alt=&#34;gigl_nablp&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;GiGL offers 3 primary methods of usage to run the components for your graph machine learning tasks.&lt;/p&gt; &#xA;&lt;h4&gt;1. Importable GiGL&lt;/h4&gt; &#xA;&lt;p&gt;To easily get started or incorporate GiGL into your existing workflows, you can simply &lt;code&gt;import gigl&lt;/code&gt; and call the &lt;code&gt;.run()&lt;/code&gt; method on its components.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from gigl.src.training.trainer import Trainer&#xA;&#xA;trainer = Trainer()&#xA;trainer.run(task_config_uri, resource_config_uri, job_name)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;2. Command-Line Execution&lt;/h4&gt; &#xA;&lt;p&gt;Each GiGL component can be executed as a standalone module from the command line. This method is useful for batch processing or when integrating into shell scripts.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;python -m \&#xA;    gigl.src.training.trainer \&#xA;    --job_name your_job_name \&#xA;    --task_config_uri gs://your_project_bucket/task_config.yaml \&#xA;    --resource_config_uri &#34;gs://your_project_bucket/resource_config.yaml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;3. Orchestration&lt;/h4&gt; &#xA;&lt;p&gt;GiGL also supports pipeline orchestration using different orchestrators. Currently supported include local, and Vertex AI (backed by Kubeflow Pipelines). This allows you to easily kick off an end-to-end run with little to no code.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/docs/user_guide/getting_started/orchestration.md&#34;&gt;Orchestration Guide&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h4&gt;Configuration üìÑ&lt;/h4&gt; &#xA;&lt;p&gt;Before getting started with running components in GiGL, it‚Äôs important to set up your config files. These are necessary files required for each component to operate. The two required files are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resource Config&lt;/strong&gt;: Details the resource allocation and environmental settings across all GiGL components. This encompasses shared resources for all components, as well as component-specific settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Task Config&lt;/strong&gt;: Specifies task-related configurations, guiding the behavior of components according to the needs of your machine learning task.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To configure these files and customize your GiGL setup, follow our step-by-step guides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/docs/user_guide/config_guides/resource_config_guide.md&#34;&gt;Resource Config Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/docs/user_guide/config_guides/task_config_guide.md&#34;&gt;Task Config Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tests üîß&lt;/h2&gt; &#xA;&lt;p&gt;Testing in GiGL is designed to ensure reliability and robustness across different components of the library. We maintain a wide collection of linting/formatting, unit, integration, cloud end-to-end integration tests, and large scale performance testing.&lt;/p&gt; &#xA;&lt;p&gt;One your PR is &#34;Added to the merge queue&#34;, the changes will only merge once our CI &lt;a href=&#34;https://github.com/Snapchat/GiGL/raw/main/.github/workflows/on-pr-merge.yml&#34;&gt;runs these tests&lt;/a&gt; and all of their status checks succeed. The only caveat to this is the large scale performance testing that runs @ some regular cadence but is not visible to open source users currently.&lt;/p&gt; &#xA;&lt;h3&gt;Types of Tests&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Linting/Formatting Tests&lt;/li&gt; &#xA; &lt;li&gt;Unit Tests&lt;/li&gt; &#xA; &lt;li&gt;Integration Tests - Simulate the pipeline behavior of GiGL components. These tests are crucial for verifying that components function correctly in sequence and that outputs from one component are correctly handled by the next.&lt;/li&gt; &#xA; &lt;li&gt;Cloud Integration Test (end-to-end) - run a full end-to-end GiGL pipeline within GCP, also leveraging cloud services such as Dataflow, Dataproc, and Vertex AI&lt;/li&gt; &#xA; &lt;li&gt;Perfornmance Tests (end-to-end) - not currently exposed publically; but benchmarked against internal datasets on a regular cadence.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;h4&gt;Running tests against an open PR&lt;/h4&gt; &#xA;&lt;p&gt;If you have an open PR, you can also manually kick off these CI tests by leaving one off various comments discussed below. Run all unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{note}&#34;&gt;For safety reasons you will have to be a repo maintainer to be able to run these commands. Alternatively, see&#xA;instructions on how to run the tests locally, or ask a maintainer to run them for you.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;/unit_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run all integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/integration_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run all end-to-end tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/e2e_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running tests locally&lt;/h4&gt; &#xA;&lt;p&gt;The entry point for running all tests is from the &lt;code&gt;Makefile&lt;/code&gt;. We provide some documentation below on how you can run these tests both locally and on an open PR (leveraring our build/testing system).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{note}&#34;&gt;  GiGL&#39;s unit, integration, and e2e tests require the use of a resource config. By default we use the `deployment/configs/unittest_resource_config.yaml` config for our CI/CD systems; but since most users wont have much access needed to compute/storage assets on the resources listed in our config, you won&#39;t be able to run the tests without doing some configuration.&#xA;&#xA;  This is already taken care for you assuming you have already followed [quick start instructions to setup resource config](./docs/user_guide/getting_started/quick_start.md#3-config-setup). You will have a few environment variables exposed in your main shell file (i.e. `~/.zshrc`) that are needed for these tests to function.&#xA;&#xA;  You can verify using command below:&#xA;  ```bash&#xA;  echo $GIGL_TEST_DEFAULT_RESOURCE_CONFIG&#xA;  echo $GIGL_PROJECT&#xA;  echo $GIGL_DOCKER_ARTIFACT_REGISTRY&#xA;  ```&#xA;&#xA;  These environment variables override what is defined in the `Makefile` , allowing you to run tests as discussed below.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Lint/Formatting &amp;amp; Unit Tests&lt;/h5&gt; &#xA;&lt;p&gt;You can run all the linting &amp;amp; Formatting tests by calling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make check_format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run unit tests locally by calling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make unit_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;More Commands and Details&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Runs both Scala and Python unit tests, and the python static type checker&#xA;make unit_test&#xA;&#xA;# Runs just Python unit tests&#xA;make unit_test_py&#xA;# You can also test specific files w/ PY_TEST_FILES=&amp;lt;TEST_FILE_NAME_GLOB&amp;gt;. e.g.:&#xA;make unit_test_py PY_TEST_FILES=&#34;eval_metrics_test.py&#34;&#xA;&#xA;# Runs just Scala unit tests&#xA;make unit_test_scala&#xA;&#xA;# Run the python static type checker `mypy`&#xA;make type_check&#xA;&#xA;# Run all formatting/linting tests&#xA;make check_format&#xA;&#xA;# Runing Formatting/Linting tests individually&#xA;make check_format_py&#xA;make check_format_scala&#xA;make check_format_md&#xA;&#xA;# Try fixing all formatting/linting issues&#xA;make format&#xA;&#xA;# Try fixing Individual formatting/linting issues&#xA;make format_py&#xA;make format_scala&#xA;make format_md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;All unit tests are organized in &lt;code&gt;python/tests/unit&lt;/code&gt; folder, with the python entry point being &lt;code&gt;python/tests/unit/main.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h5&gt;Integration Tests&lt;/h5&gt; &#xA;&lt;p&gt;Assuming you have followed instructions &lt;a href=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/#running-tests-locally&#34;&gt;above&lt;/a&gt;, you should be able to run the integration tests using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make integration_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: These tests may take a while to run!&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;More Commands and Details&lt;/summary&gt; &#xA; &lt;p&gt;If you want to run individual integration tests you can do so as follows:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make integration_test PY_TEST_FILES=&#34;file_loader_test.py&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;All integration tests are organized in &lt;code&gt;python/tests/integration&lt;/code&gt; folder with the python entry point being &lt;code&gt;python/tests/integration/main.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h5&gt;Cloud Integration Test (end-to-end)&lt;/h5&gt; &#xA;&lt;p&gt;We have a few e2e test entrypoints defined in the Makefile i.e. &lt;code&gt;run_cora_nalp_e2e_kfp_test&lt;/code&gt;, &lt;code&gt;run_cora_snc_e2e_kfp_test&lt;/code&gt;, etc. Search for &lt;code&gt;e2e&lt;/code&gt; keyword.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{caution}&#34;&gt;As these are very long running tests, we advise you run them on the PR; leveraging commands [pointed out above](#running-tests-against-an-open-pr).&#xA;i.e. leaving `/e2e_test` comment in your open PR.&#xA;&#xA;If you must run them locally, you will have to manually modify the resource configs for the relevant e2e test you want to run so that it is using resources that you have access to.&#xA;&#xA;We plan on providing better support here in the future.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Contribution üî•&lt;/h2&gt; &#xA;&lt;p&gt;Your contributions are always welcome and appreciated.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are new to open-source, make sure to check read more about it &lt;a href=&#34;https://www.digitalocean.com/community/tutorial_series/an-introduction-to-open-source&#34;&gt;here&lt;/a&gt; and learn more about creating a pull request &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://github.com/Snapchat/GiGL/raw/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resources ‚ùó&lt;/h2&gt; &#xA;&lt;p&gt;You may still have unanswered questions or may be facing issues. If so please see our &lt;a href=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/docs/user_guide/trouble_shooting/faq.md&#34;&gt;FAQ&lt;/a&gt; or our &lt;a href=&#34;https://raw.githubusercontent.com/Snapchat/GiGL/main/docs/user_guide/index.rst&#34;&gt;User Guide&lt;/a&gt; for further guidance.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use GiGL in publications, we would appreciate citations to &lt;a href=&#34;https://arxiv.org/pdf/2502.15054&#34;&gt;our paper&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{zhao2025gigl,&#xA;  title={GiGL: Large-Scale Graph Neural Networks at Snapchat},&#xA;  author={Zhao, Tong and Liu, Yozen and Kolodner, Matthew and Montemayor, Kyle and Ghazizadeh, Elham and Batra, Ankit and Fan, Zihao and Gao, Xiaobin and Guo, Xuan and Ren, Jiwen and Park, Serim and Yu, Peicheng and Yu, Jun and Vij, Shubham and Shah, Neil},&#xA;  booktitle={Proceedings of the 31st ACM SIGKDD Conference on Knowledge Discovery and Data Mining},&#xA;  year={2025}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License üîí&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/snapchat/gigl?tab=License-1-ov-file#readme&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>