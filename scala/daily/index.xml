<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-06T01:38:10Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>underscoreio/essential-slick-code</title>
    <updated>2022-09-06T01:38:10Z</updated>
    <id>tag:github.com,2022-09-06:/underscoreio/essential-slick-code</id>
    <link href="https://github.com/underscoreio/essential-slick-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source Code for the examples in Essential Slick&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Source Code to Accompany &lt;em&gt;Essential Slick&lt;/em&gt;.&lt;/h1&gt; &#xA;&lt;h2&gt;About the Book&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Essential Slick&lt;/em&gt; provides a compact, no-nonsense guide to everything you need to know to use Slick in a commercial setting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chapter 1 provides an abbreviated overview of the library as a whole, demonstrating the fundamentals of data modelling, connecting to the database, and running queries.&lt;/li&gt; &#xA; &lt;li&gt;Chapter 2 covers basic select queries, introducing Slickâ€™s query language and delving into some of the details of type inference and type checking.&lt;/li&gt; &#xA; &lt;li&gt;Chapter 3 covers queries for inserting, updating, and deleting data.&lt;/li&gt; &#xA; &lt;li&gt;Chapter 4 looks at action combinators.&lt;/li&gt; &#xA; &lt;li&gt;Chapter 5 discusses data modelling, including defining custom column and table types.&lt;/li&gt; &#xA; &lt;li&gt;Chapter 6 explores advanced select queries, including joins and aggregates.&lt;/li&gt; &#xA; &lt;li&gt;Chapter 7 provides a brief overview of Plain SQL queries. This is a useful tool when you need fine control over the SQL sent to your database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To find out more about the book and download the preview chapters, see &lt;a href=&#34;https://underscore.io/books/essential-slick/&#34;&gt;Underscore.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you&#39;re looking for the example code for Slick 2.1, use the &lt;a href=&#34;https://github.com/underscoreio/essential-slick-code/tree/2.1&#34;&gt;2.1 branch&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About the Code&lt;/h2&gt; &#xA;&lt;p&gt;The code is organised as a folder for each chapter. Each folder contains an SBT project.&lt;/p&gt; &#xA;&lt;p&gt;Each file is either the examples from the book, or the scaffolding for the exercises.&lt;/p&gt; &#xA;&lt;h3&gt;Chapter 1 (Basics), 2 (Selecting Data), 3 (Creating and Modifying Data), and 4 (Action Combinators)&lt;/h3&gt; &#xA;&lt;p&gt;These projects contain a single source file, &lt;em&gt;main.scala&lt;/em&gt;. Use the SBT &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;~run&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd chapter-01&#xA;$ sbt&#xA;...&#xA;&amp;gt; run&#xA;...&#xA;[info] Running Example&#xA;Creating database table&#xA;&#xA;Inserting test data&#xA;&#xA;Selecting all messages:&#xA;Message(Dave,Hello, HAL. Do you read me, HAL?,1)&#xA;Message(HAL,Affirmative, Dave. I read you.,2)&#xA;Message(Dave,Open the pod bay doors, HAL.,3)&#xA;Message(HAL,I&#39;m sorry, Dave. I&#39;m afraid I can&#39;t do that.,4)&#xA;&#xA;Selecting only messages from HAL:&#xA;Message(HAL,Affirmative, Dave. I read you.,2)&#xA;Message(HAL,I&#39;m sorry, Dave. I&#39;m afraid I can&#39;t do that.,4)&#xA;[success] Total time: 5 s, completed 06/05/2015 2:22:22 PM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chapter 5 (Data Modelling)&lt;/h3&gt; &#xA;&lt;p&gt;Chapter 5 contains several applications. Using the SBT &lt;code&gt;run&lt;/code&gt; command will prompt you for the file to run.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, use &lt;code&gt;runMain&lt;/code&gt; or &lt;code&gt;~runMail&lt;/code&gt; and supply the name of the class to run a particular example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd chapter-05&#xA;$ sbt&#xA;&amp;gt; ~runMain StructureExample&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The examples are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;StructureExample&lt;/code&gt; in &lt;em&gt;structure.scala&lt;/em&gt; - an illustration of separating schema and profile.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HListExampleApp&lt;/code&gt; in &lt;em&gt;hlists.scala&lt;/em&gt; - the HList example from the book.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NestedCaseClassExampleApp&lt;/code&gt; in &lt;em&gt;nested_case_class.scala&lt;/em&gt; - is the exercise on custom case class mapping.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NullExample&lt;/code&gt; in &lt;em&gt;nulls.scala&lt;/em&gt; - where the &lt;code&gt;User&lt;/code&gt; table has an optional &lt;code&gt;email&lt;/code&gt; field.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PKExample&lt;/code&gt; in &lt;em&gt;primary_keys.scala&lt;/em&gt; - the &lt;code&gt;User.id&lt;/code&gt; becomes an &lt;code&gt;Option[Long]&lt;/code&gt;, and the &lt;code&gt;OccupantTable&lt;/code&gt; is added.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ForeignKeyExample&lt;/code&gt; in &lt;em&gt;foreign_keys.scala&lt;/em&gt; - where &lt;code&gt;MessageTable&lt;/code&gt; has a foreign key to the &lt;code&gt;UserTable&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ValueClassesExample&lt;/code&gt; in &lt;em&gt;value_classes.scala&lt;/em&gt; - introduces types for primary keys, as &lt;code&gt;MessagePK&lt;/code&gt; and &lt;code&gt;UserPk&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SumTypesExample&lt;/code&gt; in &lt;em&gt;sum_types.scala&lt;/em&gt; - the message &lt;code&gt;Flag&lt;/code&gt;ing example from the book.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CustomBooleanExample&lt;/code&gt; in &lt;em&gt;custom_boolean.scala&lt;/em&gt; - is the &#34;Custom Boolean&#34; exercise code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Chapter 6 (Joins and Aggregates)&lt;/h3&gt; &#xA;&lt;p&gt;This project contains a &lt;em&gt;chat_schema.scala&lt;/em&gt; file that defines the schema for the chapter. It also defines the method &lt;code&gt;populate&lt;/code&gt; which inserts our standard cast, rooms, and messages into the database.&lt;/p&gt; &#xA;&lt;p&gt;The schema is re-used in the following examples:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;JoinsExample&lt;/code&gt; in &lt;em&gt;joins.scala&lt;/em&gt; - runs through a variety of joins using the sample data in &lt;em&gt;chat_schema.scala&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AggregatesExample&lt;/code&gt; in &lt;em&gt;aggregates.scala&lt;/em&gt; - various group by and aggregation examples..&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;joins.scala&lt;/em&gt; contains much that is commented out. Remove the comments from around the code you are interest in to run it.&lt;/p&gt; &#xA;&lt;h3&gt;Chapter 7 (Plain SQL)&lt;/h3&gt; &#xA;&lt;p&gt;This project contains the following examples:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;SelectExample&lt;/code&gt; in &lt;em&gt;select.scala&lt;/em&gt; - gives examples with the &lt;code&gt;sql&lt;/code&gt; interpolator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UpdateExample&lt;/code&gt; in &lt;em&gt;updates.scala&lt;/em&gt; - gives examples with the &lt;code&gt;sqlu&lt;/code&gt; interpolator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TsqlExample&lt;/code&gt; in &lt;em&gt;tsql.scala&lt;/em&gt; - examples using typed plain queries.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>