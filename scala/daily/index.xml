<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-11T02:00:56Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>databricks/Spark-The-Definitive-Guide</title>
    <updated>2022-06-11T02:00:56Z</updated>
    <id>tag:github.com,2022-06-11:/databricks/Spark-The-Definitive-Guide</id>
    <link href="https://github.com/databricks/Spark-The-Definitive-Guide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spark: The Definitive Guide&#39;s Code Repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spark: The Definitive Guide&lt;/h1&gt; &#xA;&lt;p&gt;This is the central repository for all materials related to &lt;a href=&#34;http://shop.oreilly.com/product/0636920034957.do&#34;&gt;Spark: The Definitive Guide&lt;/a&gt; by Bill Chambers and Matei Zaharia.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This repository is currently a work in progress and new material will be added over time.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51z7TzI-Y3L._SX379_BO1,204,203,200_.jpg&#34; alt=&#34;Spark: The Definitive Guide&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Code from the book&lt;/h1&gt; &#xA;&lt;p&gt;You can find the code from the book in the &lt;code&gt;code&lt;/code&gt; subfolder where it is broken down by language and chapter.&lt;/p&gt; &#xA;&lt;h1&gt;How to run the code&lt;/h1&gt; &#xA;&lt;h2&gt;Run on your local machine&lt;/h2&gt; &#xA;&lt;p&gt;To run the example on your local machine, either pull all data in the &lt;code&gt;data&lt;/code&gt; subfolder to &lt;code&gt;/data&lt;/code&gt; on your computer or specify the path to that particular dataset on your local machine.&lt;/p&gt; &#xA;&lt;h2&gt;Run on Databricks&lt;/h2&gt; &#xA;&lt;p&gt;To run these modules on Databricks, you&#39;re going to need to do two things.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sign up for an account. You can do that &lt;a href=&#34;https://databricks.com/try-databricks&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Import individual Notebooks to run on the platform&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Databricks is a zero-management cloud platform that provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully managed Spark clusters&lt;/li&gt; &#xA; &lt;li&gt;An interactive workspace for exploration and visualization&lt;/li&gt; &#xA; &lt;li&gt;A production pipeline scheduler&lt;/li&gt; &#xA; &lt;li&gt;A platform for powering your favorite Spark-based applications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instructions for importing&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to the notebook you would like to import&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For instance, you might go to &lt;a href=&#34;https://github.com/databricks/Spark-The-Definitive-Guide/raw/master/code/A_Gentle_Introduction_to_Spark-Chapter_3_A_Tour_of_Sparks_Toolset.py&#34;&gt;this page&lt;/a&gt;. Once you do that, you&#39;re going to need to navigate to the &lt;strong&gt;RAW&lt;/strong&gt; version of the file and save that to your Desktop. You can do that by clicking the &lt;strong&gt;Raw&lt;/strong&gt; button. &lt;em&gt;Alternatively, you could just clone the entire repository to your local desktop and navigate to the file on your computer&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Upload that to Databricks&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://docs.databricks.com/user-guide/notebooks/index.html#import-a-notebook&#34;&gt;the instructions&lt;/a&gt; here. Simply open the Databricks workspace and go to import in a given directory. From there, navigate to the file on your computer to upload it. &lt;em&gt;Unfortunately due to a recent security upgrade, notebooks cannot be imported from external URLs. Therefore you must upload it from your computer&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;You&#39;re almost ready to go!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Now you just need to simply run the notebooks! All the examples run on Databricks Runtime 3.1 and above so just be sure to create a cluster with a version equal to or greater than that. Once you&#39;ve created your cluster, attach the notebook.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Replacing the data path in each notebook&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Rather than you having to upload all of the data yourself, you simply have to change the path in each chapter from &lt;code&gt;/data&lt;/code&gt; to &lt;code&gt;/databricks-datasets/definitive-guide/data&lt;/code&gt;. Once you&#39;ve done that, all examples should run without issue. You can use find and replace to do this very efficiently.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SpinalHDL/SpinalHDL</title>
    <updated>2022-06-11T02:00:56Z</updated>
    <id>tag:github.com,2022-06-11:/SpinalHDL/SpinalHDL</id>
    <link href="https://github.com/SpinalHDL/SpinalHDL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala based HDL&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;About SpinalHDL&lt;/h2&gt; &#xA;&lt;p&gt;SpinalHDL is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A language to describe digital hardware&lt;/li&gt; &#xA; &lt;li&gt;Compatible with EDA tools, as it generates VHDL/Verilog files&lt;/li&gt; &#xA; &lt;li&gt;Much more powerful than VHDL, Verilog, and SystemVerilog in its syntax and features&lt;/li&gt; &#xA; &lt;li&gt;Much less verbose than VHDL, Verilog, and SystemVerilog&lt;/li&gt; &#xA; &lt;li&gt;Not an HLS, nor based on the event-driven paradigm&lt;/li&gt; &#xA; &lt;li&gt;Only generates what you asked it in a one-to-one way (no black-magic, no black box)&lt;/li&gt; &#xA; &lt;li&gt;Not introducing area/performance overheads in your design (versus a hand-written VHDL/Verilog design)&lt;/li&gt; &#xA; &lt;li&gt;Based on the RTL description paradigm, but can go much further&lt;/li&gt; &#xA; &lt;li&gt;Allowing you to use Object-Oriented Programming and Functional Programming to elaborate your hardware and verify it&lt;/li&gt; &#xA; &lt;li&gt;Free and can be used in the industry without any license&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation &lt;br&gt; &lt;a href=&#34;https://spinalhdl.github.io/SpinalDoc-RTD/&#34;&gt;https://spinalhdl.github.io/SpinalDoc-RTD/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Presentation of the language &lt;br&gt; &lt;a href=&#34;https://spinalhdl.github.io/SpinalDoc-RTD/master/SpinalHDL/Getting%20Started/presentation.html&#34;&gt;https://spinalhdl.github.io/SpinalDoc-RTD/master/SpinalHDL/Getting%20Started/presentation.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SBT base project &lt;br&gt; &lt;a href=&#34;https://github.com/SpinalHDL/SpinalTemplateSbt&#34;&gt;https://github.com/SpinalHDL/SpinalTemplateSbt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gradle base project &lt;br&gt; &lt;a href=&#34;https://github.com/SpinalHDL/SpinalTemplateGradle&#34;&gt;https://github.com/SpinalHDL/SpinalTemplateGradle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jupyter bootcamp &lt;br&gt; &lt;a href=&#34;https://github.com/SpinalHDL/Spinal-bootcamp&#34;&gt;https://github.com/SpinalHDL/Spinal-bootcamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Workshop &lt;br&gt; &lt;a href=&#34;https://github.com/SpinalHDL/SpinalWorkshop&#34;&gt;https://github.com/SpinalHDL/SpinalWorkshop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google group &lt;br&gt; &lt;a href=&#34;https://groups.google.com/forum/#!forum/spinalhdl-hardware-description-language&#34;&gt;https://groups.google.com/forum/#!forum/spinalhdl-hardware-description-language&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Donation channel &lt;br&gt; &lt;a href=&#34;https://opencollective.com/spinalhdl&#34;&gt;https://opencollective.com/spinalhdl&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/SpinalHDL/SpinalHDL?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/SpinalHDL/SpinalHDL.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/SpinalHDL/SpinalHDL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SpinalHDL/SpinalHDL&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SpinalHDL/SpinalHDL.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Get it&lt;/h2&gt; &#xA;&lt;p&gt;SpinalHDL is simply a set of Scala libraries. Include them into your project and you&#39;re good to go! If you&#39;re unsure about what to do, simply clone one of our example projects (see links above).&lt;/p&gt; &#xA;&lt;h3&gt;SBT (Scala build tool)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scalaVersion := &#34;2.11.12&#34;&#xA;&#xA;libraryDependencies ++= Seq(&#xA;  &#34;com.github.spinalhdl&#34; % &#34;spinalhdl-core_2.11&#34; % &#34;latest.release&#34;,&#xA;  &#34;com.github.spinalhdl&#34; % &#34;spinalhdl-lib_2.11&#34; % &#34;latest.release&#34;,&#xA;  compilerPlugin(&#34;com.github.spinalhdl&#34; % &#34;spinalhdl-idsl-plugin_2.11&#34; % &#34;latest.release&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can force SBT to pick a specific SpinalHDL version by replacing &lt;code&gt;latest.release&lt;/code&gt; with a specific version. See the &lt;a href=&#34;https://github.com/SpinalHDL/SpinalTemplateSbt/raw/master/build.sbt&#34;&gt;SpinalHDL SBT Template project&#39;s &lt;code&gt;build.sbt&lt;/code&gt; file&lt;/a&gt; for a full SBT example.&lt;/p&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;&#x9;mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;&#x9;compile group: &#39;com.github.spinalhdl&#39;, name: &#39;spinalhdl-core_2.11&#39;, version: &#39;1.6.4&#39;&#xA;&#x9;compile group: &#39;com.github.spinalhdl&#39;, name: &#39;spinalhdl-lib_2.11&#39;, version: &#39;1.6.4&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mill(Build Tool)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import mill._&#xA;import mill.scalalib._&#xA;&#xA;object MySpinalModule extends ScalaModule {&#xA;  def scalaVersion = &#34;2.11.12&#34;&#xA;&#xA;  def ivyDeps = Agg(&#xA;    ivy&#34;com.github.spinalhdl::spinalhdl-core:1.6.4&#34;,&#xA;    ivy&#34;com.github.spinalhdl::spinalhdl-lib:1.6.4&#34;,&#xA;  )&#xA;&#xA;  def scalacPluginIvyDeps = Agg(ivy&#34;com.github.spinalhdl::spinalhdl-idsl-plugin:1.6.4&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JAR&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://oss.sonatype.org/content/groups/public/com/github/spinalhdl/spinalhdl-core_2.11/&#xA;https://oss.sonatype.org/content/groups/public/com/github/spinalhdl/spinalhdl-lib_2.11/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The files are available &lt;a href=&#34;https://mvnrepository.com/artifact/com.github.spinalhdl&#34;&gt;on Maven&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;Change logs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/tags&#34;&gt;https://github.com/SpinalHDL/SpinalHDL/tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The SpinalHDL core is using the LGPL3 license while SpinalHDL lib is using the MIT license. That&#39;s for the formalities. But there are some practical statements implied by those licenses:&lt;/p&gt; &#xA;&lt;p&gt;Your freedoms are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use SpinalHDL core and lib in your closed/commercial projects.&lt;/li&gt; &#xA; &lt;li&gt;The generated RTL is yours (.vhd/.v files)&lt;/li&gt; &#xA; &lt;li&gt;Your hardware description is yours (.scala files)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Your obligations (and my wish) are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you modify the SpinalHDL core (the compiler itself), please, share your improvements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, SpinalHDL is provided &#34;as is&#34;, without warranty of any kind.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/ibex-wrapper</title>
    <updated>2022-06-11T02:00:56Z</updated>
    <id>tag:github.com,2022-06-11:/ucb-bar/ibex-wrapper</id>
    <link href="https://github.com/ucb-bar/ibex-wrapper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wrapper for lowRISC Ibex&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ibex Wrapper&lt;/h1&gt; &#xA;&lt;p&gt;This wraps up the 32-bit Ibex embedded core (&lt;a href=&#34;https://github.com/lowRISC/ibex&#34;&gt;https://github.com/lowRISC/ibex&lt;/a&gt;) into a Rocket Chip based tile to be used in Chipyard.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to use this wrapper, refer to (&lt;a href=&#34;https://github.com/ucb-bar/chipyard&#34;&gt;https://github.com/ucb-bar/chipyard&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
</feed>