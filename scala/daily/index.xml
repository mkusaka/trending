<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-05T01:39:37Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ITV/scala-pact</title>
    <updated>2025-05-05T01:39:37Z</updated>
    <id>tag:github.com,2025-05-05:/ITV/scala-pact</id>
    <link href="https://github.com/ITV/scala-pact" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Scala implementation of CDC using the Pact standard&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scala-Pact &lt;a href=&#34;https://travis-ci.com/ITV/scala-pact&#34;&gt;&lt;img src=&#34;https://travis-ci.com/ITV/scala-pact.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A Consumer Driven Contract testing library for Scala and &lt;a href=&#34;http://www.scalatest.org/&#34;&gt;ScalaTest&lt;/a&gt; that follows the &lt;a href=&#34;https://docs.pact.io/&#34;&gt;Pact&lt;/a&gt; standard.&lt;/p&gt; &#xA;&lt;p&gt;Scala-Pact is intended for Scala developers who are looking for a better way to manage the HTTP contracts between their services.&lt;/p&gt; &#xA;&lt;p&gt;If you are just starting out on your pact journey in scala, we recommend checking out &lt;a href=&#34;https://github.com/jbwheatley/pact4s&#34;&gt;pact4s&lt;/a&gt;. This is built directly on top of pact-jvm, and provides support for writing and verifying contracts using &lt;a href=&#34;https://github.com/scalatest/scalatest&#34;&gt;scalaTest&lt;/a&gt;, &lt;a href=&#34;https://github.com/disneystreaming/weaver-test&#34;&gt;weaver-test&lt;/a&gt;, and &lt;a href=&#34;https://github.com/typelevel/munit-cats-effect&#34;&gt;munit-cats-effect-3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Latest version is 4.4.0&lt;/h2&gt; &#xA;&lt;p&gt;Scala-Pact currently only supports &lt;a href=&#34;https://github.com/pact-foundation/pact-specification/tree/version-2&#34;&gt;v2 of the pact specification&lt;/a&gt;. To use pacts with v3+ of the pact specification, use &lt;code&gt;pact4s&lt;/code&gt; instead. This project will not support versions beyond v2.&lt;/p&gt; &#xA;&lt;p&gt;Scala-Pact now has two branches based on SBT requirements.&lt;/p&gt; &#xA;&lt;h4&gt;SBT 1.x compatible (Latest 4.4.0)&lt;/h4&gt; &#xA;&lt;p&gt;All development going forward begins at &lt;code&gt;2.3.x&lt;/code&gt; and resides on the &lt;code&gt;master&lt;/code&gt; branch. For the sake of the maintainer&#39;s sanity, version 2.3.x and beyond will only support Scala 2.12 and SBT 1.x or greater. The project is currently cross-compiled across scala 2.12.12 and 2.13.4.&lt;/p&gt; &#xA;&lt;h4&gt;SBT 0.13.x compatible (Latest 2.2.5)&lt;/h4&gt; &#xA;&lt;p&gt;The reluctantly maintained EOL maintenance version of Scala-Pact lives on a branch called &lt;code&gt;v2.2.x&lt;/code&gt;. These versions support Scala 2.10, 2.11, and 2.12 but are limited by only supporting SBT 0.13.x.&lt;/p&gt; &#xA;&lt;h2&gt;More information&lt;/h2&gt; &#xA;&lt;p&gt;Please visit our &lt;a href=&#34;http://io.itv.com/scala-pact/&#34;&gt;official documentation site&lt;/a&gt; for more details and examples.&lt;/p&gt; &#xA;&lt;p&gt;There is also an &lt;a href=&#34;http://io.itv.com/scala-pact/examples/index.html&#34;&gt;example project&lt;/a&gt; setup for reference.&lt;/p&gt; &#xA;&lt;h2&gt;Getting setup&lt;/h2&gt; &#xA;&lt;p&gt;Scala-Pact goes to great lengths to help you avoid / work around dependency conflicts. This is achieved by splitting the core functionality out of the library requirements which are provided separately. This allows you to align or avoid conflicting dependencies e.g. If your project uses a specific version of Circe, tell Scala-Pact to use Argonaut! One big change between 2.2.x and 2.3.x is that dependencies are now provided by TypeClass rather than just static linking. Please refer to the &lt;a href=&#34;https://github.com/ITV/scala-pact/tree/master/example&#34;&gt;example setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;You&#39;re using SBT 1.x:&lt;/h3&gt; &#xA;&lt;p&gt;There are two approaches to using the scala-pact dsl. The new approach uses a single dependency and mix-ins to use the dsl. The old approach allows more freedom in which http and json library versions are being used, but requires more dependencies and imports.&lt;/p&gt; &#xA;&lt;h4&gt;Mix-ins approach&lt;/h4&gt; &#xA;&lt;p&gt;Add the following lines to your &lt;code&gt;build.sbt&lt;/code&gt; file to setup the test framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;&#xA;import com.itv.scalapact.plugin._&#xA;&#xA;enablePlugins(ScalaPactPlugin)&#xA;        &#xA;libraryDependencies ++= Seq(&#xA;  &#34;com.itv&#34;       %% &#34;scalapact-scalatest-suite&#34;   % &#34;4.4.0&#34; % &#34;test&#34;,&#xA;  &#34;org.scalatest&#34; %% &#34;scalatest&#34;                   % &#34;3.2.9&#34;  % &#34;test&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add this line to your &lt;code&gt;project/plugins.sbt&lt;/code&gt; file to install the plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;addSbtPlugin(&#34;com.itv&#34; % &#34;sbt-scalapact&#34; % &#34;4.4.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both the import and the plugin come pre-packaged with the latest JSON and Http libraries (http4s 0.21.x, and circe 0.13.x).&lt;/p&gt; &#xA;&lt;p&gt;In your consumer test suites, have the test class extend &lt;code&gt;PactForgerSuite&lt;/code&gt;. In your provider test suites, have the test class extend &lt;code&gt;PactVerifySuite&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Without mix-ins&lt;/h4&gt; &#xA;&lt;p&gt;If your project needs more control over the dependencies used by scala-pact, add the following lines to your &lt;code&gt;build.sbt&lt;/code&gt; file to setup the test framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;&#xA;import com.itv.scalapact.plugin._&#xA;&#xA;enablePlugins(ScalaPactPlugin)&#xA;        &#xA;libraryDependencies ++= Seq(&#xA;  &#34;com.itv&#34;       %% &#34;scalapact-circe-0-13&#34;   % &#34;4.4.0&#34; % &#34;test&#34;,&#xA;  &#34;com.itv&#34;       %% &#34;scalapact-http4s-0-21&#34;  % &#34;4.4.0&#34; % &#34;test&#34;,&#xA;  &#34;com.itv&#34;       %% &#34;scalapact-scalatest&#34;    % &#34;4.4.0&#34; % &#34;test&#34;,&#xA;  &#34;org.scalatest&#34; %% &#34;scalatest&#34;              % &#34;3.2.9&#34; % &#34;test&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add this line to your &lt;code&gt;project/plugins.sbt&lt;/code&gt; file to install the plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;addSbtPlugin(&#34;com.itv&#34; % &#34;sbt-scalapact&#34; % &#34;4.4.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This version of the plugin comes pre-packaged with the latest JSON and Http libraries. Thanks to the way SBT works, that one plugin line will work in most cases, but if you&#39;re still having conflicts, you can also do this to use your preferred libraries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt; libraryDependencies ++= Seq(&#xA;   &#34;com.itv&#34; %% &#34;scalapact-argonaut-6-2&#34; % &#34;4.4.0&#34;,&#xA;   &#34;com.itv&#34; %% &#34;scalapact-http4s-0-21&#34;  % &#34;4.4.0&#34;&#xA; )&#xA; &#xA; addSbtPlugin(&#34;com.itv&#34; % &#34;sbt-scalapact-nodeps&#34; % &#34;4.4.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your test suite, you will need the following imports:&lt;/p&gt; &#xA;&lt;p&gt;The DSL/builder import for Consumer tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  import com.itv.scalapact.ScalaPactForger._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or this one for Verification tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  import com.itv.scalapact.ScalaPactVerify._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also need to reference the json and http libraries specified in the &lt;code&gt;build.sbt&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  import com.itv.scalapact.circe09._&#xA;  import com.itv.scalapact.http4s18._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, in case your project has both &lt;code&gt;scalapact-http4s&lt;/code&gt; and &lt;code&gt;scalapact-circe&lt;/code&gt; as dependencies, you could also use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  import com.itv.scalapact.json._&#xA;  import com.itv.scalapact.http._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;You&#39;re using SBT 0.13.x:&lt;/h3&gt; &#xA;&lt;p&gt;Add the following lines to your &lt;code&gt;build.sbt&lt;/code&gt; file to setup the test framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;&#xA;import com.itv.scalapact.plugin._&#xA;&#xA;enablePlugins(ScalaPactPlugin)&#xA;        &#xA;libraryDependencies ++= Seq(&#xA;  &#34;com.itv&#34;       %% &#34;scalapact-circe-0-9&#34;     % &#34;2.2.5&#34; % &#34;test&#34;,&#xA;  &#34;com.itv&#34;       %% &#34;scalapact-http4s-0-18-0&#34; % &#34;2.2.5&#34; % &#34;test&#34;,&#xA;  &#34;com.itv&#34;       %% &#34;scalapact-scalatest&#34;     % &#34;2.2.5&#34; % &#34;test&#34;,&#xA;  &#34;org.scalatest&#34; %% &#34;scalatest&#34;               % &#34;3.0.5&#34; % &#34;test&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add these lines to your &lt;code&gt;project/plugins.sbt&lt;/code&gt; file to install the plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies ++= Seq(&#xA;  &#34;com.itv&#34; %% &#34;scalapact-argonaut-6-2&#34;  % &#34;2.2.5&#34;,&#xA;  &#34;com.itv&#34; %% &#34;scalapact-http4s-0-16-2&#34; % &#34;2.2.5&#34;&#xA;)&#xA;&#xA;addSbtPlugin(&#34;com.itv&#34; % &#34;sbt-scalapact&#34; % &#34;2.2.5&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In you&#39;re test suite, you will need the following import for Consumer tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  import com.itv.scalapact.ScalaPactForger._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or this one for Verification tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  import com.itv.scalapact.ScalaPactVerify._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you can use different versions of Scala-Pact with the plugin and the testing framework, which can make Scala 2.10 compat issues easier to work around while we get the SBT 1.0 release sorted out.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>WhatsApp/eqwalizer</title>
    <updated>2025-05-05T01:39:37Z</updated>
    <id>tag:github.com,2025-05-05:/WhatsApp/eqwalizer</id>
    <link href="https://github.com/WhatsApp/eqwalizer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A type-checker for Erlang&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eqWAlizer&lt;/h1&gt; &#xA;&lt;p&gt;A type-checker for Erlang.&lt;/p&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./logo/eqWAlizer_final_Full_Logo_White_Text.png&#34;&gt; &#xA; &lt;img alt=&#34;eqWAlizer logo&#34; src=&#34;https://raw.githubusercontent.com/WhatsApp/eqwalizer/main/logo/eqWAlizer_final_Full__Logo_Black_Text.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;h2&gt;Using it with rebar3 projects&lt;/h2&gt; &#xA;&lt;p&gt;eqWAlizer is integrated and distributed with ELP (Erlang Language Platform).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use OTP 26 or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://whatsapp.github.io/erlang-language-platform/docs/get-started/install/&#34;&gt;Install ELP&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://whatsapp.github.io/erlang-language-platform/docs/get-started/configure-project/rebar3/&#34;&gt;Add&lt;/a&gt; &lt;code&gt;eqwalizer_support&lt;/code&gt; dependency to your rebar3 project definition (see below)&lt;/li&gt; &#xA; &lt;li&gt;From the project directory run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;elp eqwalize &amp;lt;module&amp;gt;&lt;/code&gt; to type-check a single module&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;elp eqwalize-all&lt;/code&gt; to type-check all &lt;code&gt;src&lt;/code&gt; modules in the project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Adding &lt;code&gt;eqwalizer_support&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{deps, [&#xA;  {eqwalizer_support,&#xA;    {git_subdir,&#xA;        &#34;https://github.com/whatsapp/eqwalizer.git&#34;,&#xA;        {branch, &#34;main&#34;},&#xA;        &#34;eqwalizer_support&#34;}}&#xA;]}.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using it with non-rebar projects&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use OTP 26 or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://whatsapp.github.io/erlang-language-platform/docs/get-started/install/&#34;&gt;Install ELP&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://whatsapp.github.io/erlang-language-platform/docs/get-started/configure-project/custom-project/&#34;&gt;Write a &lt;code&gt;project.json&lt;/code&gt;&lt;/a&gt; file describing your project.&lt;/li&gt; &#xA; &lt;li&gt;From the project directory, assuming your &lt;code&gt;.json&lt;/code&gt; file is called &lt;code&gt;project.json&lt;/code&gt; run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;elp eqwalize &amp;lt;module&amp;gt; --project project.json&lt;/code&gt; to type-check a single module&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;elp eqwalize-all --project project.json&lt;/code&gt; to type-check all &lt;code&gt;src&lt;/code&gt; modules in the project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/WhatsApp/eqwalizer/main/FAQ.md&#34;&gt;the FAQ document&lt;/a&gt; for answers to some common questions, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What&#39;s the difference between eqWAlizer and Dialyzer?&lt;/li&gt; &#xA; &lt;li&gt;Why not extend Dialyzer, rather than creating a new tool?&lt;/li&gt; &#xA; &lt;li&gt;What about Elixir?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Where can I learn more about eqWAlizer, its technical principles, its relation to dialyzer and elixir support feasibility?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.beamrad.io/35&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;eqWAlizer is &lt;a href=&#34;https://raw.githubusercontent.com/WhatsApp/eqwalizer/main/LICENSE&#34;&gt;Apache licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>