<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-01T01:42:44Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mdedetrich/akka-apache</title>
    <updated>2022-10-01T01:42:44Z</updated>
    <id>tag:github.com,2022-10-01:/mdedetrich/akka-apache</id>
    <link href="https://github.com/mdedetrich/akka-apache" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build highly concurrent, distributed, and resilient message-driven applications on the JVM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Akka &lt;a href=&#34;https://index.scala-lang.org/akka/akka/akka-actor&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/akka/akka/akka-actor/latest.svg?sanitize=true&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://travis-ci.com/github/akka/akka&#34;&gt;&lt;img src=&#34;https://api.travis-ci.com/akka/akka.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;We believe that writing correct concurrent &amp;amp; distributed, resilient and elastic applications is too hard. Most of the time it&#39;s because we are using the wrong tools and the wrong level of abstraction.&lt;/p&gt; &#xA;&lt;p&gt;Akka is here to change that.&lt;/p&gt; &#xA;&lt;p&gt;Using the Actor Model we raise the abstraction level and provide a better platform to build correct concurrent and scalable applications. This model is a perfect match for the principles laid out in the &lt;a href=&#34;https://www.reactivemanifesto.org/&#34;&gt;Reactive Manifesto&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For resilience, we adopt the &#34;Let it crash&#34; model which the telecom industry has used with great success to build applications that self-heal and systems that never stop.&lt;/p&gt; &#xA;&lt;p&gt;Actors also provide the abstraction for transparent distribution and the basis for truly scalable and fault-tolerant applications.&lt;/p&gt; &#xA;&lt;p&gt;Learn more at &lt;a href=&#34;https://akka.io/&#34;&gt;akka.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reference Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The reference documentation is available at &lt;a href=&#34;https://doc.akka.io&#34;&gt;doc.akka.io&lt;/a&gt;, for &lt;a href=&#34;https://doc.akka.io/docs/akka/current/scala.html&#34;&gt;Scala&lt;/a&gt; and &lt;a href=&#34;https://doc.akka.io/docs/akka/current/java.html&#34;&gt;Java&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;You can join these groups and chats to discuss and ask Akka related questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Forums: &lt;a href=&#34;https://discuss.akka.io&#34;&gt;discuss.akka.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat room about &lt;em&gt;using&lt;/em&gt; Akka: &lt;a href=&#34;https://gitter.im/akka/akka&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter%3A-akka%2Fakka-blue.svg?style=flat-square&#34; alt=&#34;gitter: akka/akka&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue tracker: &lt;a href=&#34;https://github.com/akka/akka/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github%3A-issues-blue.svg?style=flat-square&#34; alt=&#34;github: akka/akka&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to that, you may enjoy following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://akka.io/blog/news-archive.html&#34;&gt;news&lt;/a&gt; section of the page, which is updated whenever a new version is released&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://akka.io/blog/article-archive.html&#34;&gt;Akka Team Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/akkateam&#34;&gt;@akkateam&lt;/a&gt; on Twitter&lt;/li&gt; &#xA; &lt;li&gt;Questions tagged &lt;a href=&#34;https://stackoverflow.com/questions/tagged/akka&#34;&gt;#akka on StackOverflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Projects built with Akka: &lt;a href=&#34;https://index.scala-lang.org/search?q=dependencies:akka/*&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/count.svg?q=dependencies:akka/*&amp;amp;subject=scaladex:&amp;amp;color=blue&amp;amp;style=flat-square&#34; alt=&#34;akka-dependency-badge&#34; title=&#34;Built with Akka&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contributions are &lt;em&gt;very&lt;/em&gt; welcome!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you see an issue that you&#39;d like to see fixed, or want to shape out some ideas, the best way to make it happen is to help out by submitting a pull request implementing it. We welcome contributions from all, even you are not yet familiar with this project, We are happy to get you started, and will guide you through the process once you&#39;ve submitted your PR.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://index.scala-lang.org/search?q=dependencies:akka/*&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/count.svg?q=dependencies:akka/*&amp;amp;subject=scaladex:&amp;amp;color=blue&amp;amp;style=flat-square&#34; alt=&#34;akka-dependency-badge&#34; title=&#34;Built with Akka&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://github.com/akka/akka/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more details about the workflow, and general hints on how to prepare your pull request. You can also ask for clarifications or guidance in GitHub issues directly, or in the akka/dev chat if a more real time communication would be of benefit.&lt;/p&gt; &#xA;&lt;p&gt;A chat room is available for all questions related to &lt;em&gt;developing and contributing&lt;/em&gt; to Akka: &lt;a href=&#34;https://gitter.im/akka/dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter%3A-akka%2Fdev-blue.svg?style=flat-square&#34; alt=&#34;gitter: akka/dev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Akka is Open Source and available under the Apache 2 License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/ce-semantics-dsl</title>
    <updated>2022-10-01T01:42:44Z</updated>
    <id>tag:github.com,2022-10-01:/input-output-hk/ce-semantics-dsl</id>
    <link href="https://github.com/input-output-hk/ce-semantics-dsl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Denotational semantics for the masses&lt;/h2&gt; &#xA;&lt;p&gt;Denotational semantics via tagless-final. A comprehensive tagless-final library in Scala 3, with an application to blockchain ledgers. In particular we model parts of the Cardano Ledger.&lt;/p&gt; &#xA;&lt;p&gt;From the abstract of the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/ce-semantics-dsl/main/doc/report/report.pdf&#34;&gt;paper&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We use a tagless-final approach to design an Embedded Domain-Specific Language (eDSL) and accompanying infrastructure for the specification and utilization of program semantics. Semantics defined in this way, for blockchain ledgers and other systems, are denotational, directly executable and amenable to multiple interpretations. We provide a layered compiler supported by two families of Abstract Syntax Trees (AST), the former as a direct translation of eDSL-based semantics and the latter suitable for immediate code generation. In addition, we provide a code generator for the Scala programming language as a backend for the compiler. Our design is in Scala, without relying on exotic features like macros or staging. We use the logic of Scala&#39;s implicits to encode algorithmic type reconstruction rules in a straightforward way, lifting the compiler&#39;s type computations at the value level, thus enabling powerful type-preserving code generation from the eDSL. We observe that we can support recursion directly, without resorting to the usual &lt;em&gt;fixpoint&lt;/em&gt; combinators, by letting the compiler tie the knot. As a consequence of this and other design choices, the computations written using our approach are close to what a software engineer would write without thinking about &#34;semantics&#34; or using &#34;too theoretical artifacts&#34;. Thus we deliberately try to bridge the gap between software engineering and formal methods and we provide a methodology for teams with different mindsets to collaborate effectively. The design space is vast but the current results are tangible and our hope is that by exploring it further we can reap many more benefits, helping making &#34;semantics programming&#34; more mainstream. The code is the spec is the code.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>