<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-16T01:45:40Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mcartright/julien</title>
    <updated>2023-07-16T01:45:40Z</updated>
    <id>tag:github.com,2023-07-16:/mcartright/julien</id>
    <link href="https://github.com/mcartright/julien" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Toolkit for Information Retrieval research&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;julien&lt;/h1&gt; &#xA;&lt;p&gt;Julien is a retrieval stack built for performing experiments in Information Retrieval research. The current version of Julien is 0.1, mostly because it&#39;s been under development and I haven&#39;t had time to &lt;em&gt;really&lt;/em&gt; set it up for a release. Right now the documentation is spotty, but I will be shoring it up in the coming weeks. The scaladocs can be found at &lt;a href=&#34;http://ayr.cs.umass.edu/julien-docs/julien&#34;&gt;http://ayr.cs.umass.edu/julien-docs/julien&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h1&gt;Model&lt;/h1&gt; &#xA;&lt;p&gt;Julien is primarily driven by &lt;a href=&#34;http://ayr.cs.umass.edu/julien-docs/julien/#julien.retrieval.Operator&#34;&gt;Operator&lt;/a&gt;s and &lt;a href=&#34;http://ayr.cs.umass.edu/julien-docs/julien/#julien.retrieval.processor.QueryProcessor&#34;&gt;Processor&lt;/a&gt;s.&lt;/p&gt; &#xA;&lt;p&gt;Operators are broken down into &lt;a href=&#34;http://ayr.cs.umass.edu/julien-docs/julien/#julien.retrieval.View&#34;&gt;View&lt;/a&gt;s and &lt;a href=&#34;http://ayr.cs.umass.edu/julien-docs/julien/#julien.retrieval.Feature&#34;&gt;Feature&lt;/a&gt;s - views provide channels of information from the index, and features are functions that operate on information provided to eventually produce scores for documents.&lt;/p&gt; &#xA;&lt;p&gt;Processors encapsulate the logic needed to run a tree of operators over the whole index and return a ranked list of documents. There are other components in making a system, but those two are the most central.&lt;/p&gt; &#xA;&lt;h1&gt;Example: Running a Single Query&lt;/h1&gt; &#xA;&lt;p&gt;Julien was designed to require little outside of specifying the query. In a sense, the philosophy is &#34;if you make the query, it&#39;ll run&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import julien.retrieval._&#xA;&#xA;// Implicit so the index is supplied where needed without you having to fill it in&#xA;implicit val index = Index.disk(&#34;path_to_my_index&#34;)&#xA;&#xA;// Our query...&#xA;val querytext = &#34;pros and cons of the hyperloop&#34;&#xA;&#xA;// Going to transform it by hand - this can always be wrapped in a function&#xA;val root = Combine(&#xA;  querytext.split(&#34; &#34;).map { t =&amp;gt; &#xA;    Dirichlet(Term(t), IndexLengths())&#xA;  }&#xA;)&#xA;&#xA;// Let the object create a processor to run it, and return results&#xA;val results = QueryProcessor(root)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Adding a new Operator&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re into creating new retrieval models, then you&#39;re going to want your own operators. A good place to start is under the &lt;a href=&#34;http://ayr.cs.umass.edu/julien-docs/julien/#julien.retrieval.Operator&#34;&gt;Operator&lt;/a&gt; documentation, which describes the root of all the things used to construct queries.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twitter/twitter-korean-text</title>
    <updated>2023-07-16T01:45:40Z</updated>
    <id>tag:github.com,2023-07-16:/twitter/twitter-korean-text</id>
    <link href="https://github.com/twitter/twitter-korean-text" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Korean tokenizer&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;twitter-korean-text &lt;a href=&#34;https://coveralls.io/r/twitter/twitter-korean-text&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/twitter/twitter-korean-text/badge.png&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;[//]: # (Travis has been deactivated: &lt;a href=&#34;http://travis-ci.org/twitter/twitter-korean-text&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/twitter/twitter-korean-text.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;트위터에서 만든 오픈소스 한국어 처리기&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2017년 4.4 버전 이후의 개발은 &lt;a href=&#34;http://openkoreantext.org&#34;&gt;http://openkoreantext.org&lt;/a&gt; 에서 진행됩니다.&lt;/li&gt; &#xA; &lt;li&gt;We now started an official fork at &lt;a href=&#34;http://openkoreantext.org&#34;&gt;http://openkoreantext.org&lt;/a&gt; as of early 2017. All the development after version 4.4 will be done in open-korean-text.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Scala/Java library to process Korean text with a Java wrapper. twitter-korean-text currently provides Korean normalization and tokenization. Please join our community at &lt;a href=&#34;https://groups.google.com/forum/#!forum/twitter-korean-text&#34;&gt;Google Forum&lt;/a&gt;. The intent of this text processor is not limited to short tweet texts.&lt;/p&gt; &#xA;&lt;p&gt;스칼라로 쓰여진 한국어 처리기입니다. 현재 텍스트 정규화와 형태소 분석, 스테밍을 지원하고 있습니다. 짧은 트윗은 물론이고 긴 글도 처리할 수 있습니다. 개발에 참여하시고 싶은 분은 &lt;a href=&#34;https://groups.google.com/forum/#!forum/twitter-korean-text&#34;&gt;Google Forum&lt;/a&gt;에 가입해 주세요. 사용법을 알고자 하시는 초보부터 코드에 참여하고 싶으신 분들까지 모두 환영합니다.&lt;/p&gt; &#xA;&lt;p&gt;twitter-korean-text의 목표는 빅데이터 등에서 간단한 한국어 처리를 통해 색인어를 추출하는 데에 있습니다. 완전한 수준의 형태소 분석을 지향하지는 않습니다.&lt;/p&gt; &#xA;&lt;p&gt;twitter-korean-text는 normalization, tokenization, stemming, phrase extraction 이렇게 네가지 기능을 지원합니다.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;정규화 normalization (입니닼ㅋㅋ -&amp;gt; 입니다 ㅋㅋ, 샤릉해 -&amp;gt; 사랑해)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;한국어를 처리하는 예시입니닼ㅋㅋㅋㅋㅋ -&amp;gt; 한국어를 처리하는 예시입니다 ㅋㅋ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;토큰화 tokenization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;한국어를 처리하는 예시입니다 ㅋㅋ -&amp;gt; 한국어Noun, 를Josa, 처리Noun, 하는Verb, 예시Noun, 입Adjective, 니다Eomi ㅋㅋKoreanParticle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;어근화 stemming (입니다 -&amp;gt; 이다)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;한국어를 처리하는 예시입니다 ㅋㅋ -&amp;gt; 한국어Noun, 를Josa, 처리Noun, 하다Verb, 예시Noun, 이다Adjective, ㅋㅋKoreanParticle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;어구 추출 phrase extraction&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;한국어를 처리하는 예시입니다 ㅋㅋ -&amp;gt; 한국어, 처리, 예시, 처리하는 예시&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Introductory Presentation: &lt;a href=&#34;https://docs.google.com/presentation/d/10CZj8ry03oCk_Jqw879HFELzOLjJZ0EOi4KJbtRSIeU/&#34;&gt;Google Slides&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Try it here&lt;/h2&gt; &#xA;&lt;p&gt;Gunja Agrawal kindly created a test API webpage for this project: &lt;a href=&#34;http://gunjaagrawal.com/langhack/&#34;&gt;http://gunjaagrawal.com/langhack/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gunja Agrawal님이 만들어주신 테스트 웹 페이지 입니다. &lt;a href=&#34;http://gunjaagrawal.com/langhack/&#34;&gt;http://gunjaagrawal.com/langhack/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Opensourced here: &lt;a href=&#34;https://github.com/gunjaag/twitter-korean-tokenizer-api&#34;&gt;twitter-korean-tokenizer-api&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://twitter.github.io/twitter-korean-text/scaladocs/#com.twitter.penguin.korean.TwitterKoreanProcessor$&#34;&gt;scaladoc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://twitter.github.io/twitter-korean-text&#34;&gt;mavendoc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Maven&lt;/h2&gt; &#xA;&lt;p&gt;To include this in your Maven-based JVM project, add the following lines to your pom.xml:&lt;/p&gt; &#xA;&lt;p&gt;Maven을 이용할 경우 pom.xml에 다음의 내용을 추가하시면 됩니다:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.twitter.penguin&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;korean-text&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;4.4&amp;lt;/version&amp;gt;&#xA;  &amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The maven site is available here &lt;a href=&#34;http://twitter.github.io/twitter-korean-text/&#34;&gt;http://twitter.github.io/twitter-korean-text/&lt;/a&gt; and scaladocs are here &lt;a href=&#34;http://twitter.github.io/twitter-korean-text/scaladocs/&#34;&gt;http://twitter.github.io/twitter-korean-text/scaladocs/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support for other languages.&lt;/h2&gt; &#xA;&lt;h3&gt;.net&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/modamoda&#34;&gt;modamoda&lt;/a&gt; kindly offered a .net wrapper: &lt;a href=&#34;https://github.com/modamoda/TwitterKoreanProcessorCS&#34;&gt;https://github.com/modamoda/TwitterKoreanProcessorCS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;node.js&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Ch0p&#34;&gt;Ch0p&lt;/a&gt; kindly offered a node.js wrapper: &lt;a href=&#34;https://github.com/Ch0p/twtkrjs&#34;&gt;twtkrjs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rokoroku&#34;&gt;Youngrok Kim&lt;/a&gt; kindly offered a node.js wrapper: &lt;a href=&#34;https://github.com/rokoroku/node-twitter-korean-text&#34;&gt;node-twitter-korean-text&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cedar101&#34;&gt;Baeg-il Kim&lt;/a&gt; kindly offered a Python version: &lt;a href=&#34;https://github.com/cedar101/twitter-korean-py&#34;&gt;https://github.com/cedar101/twitter-korean-py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jaepil&#34;&gt;Jaepil Jeong&lt;/a&gt; kindly offered a Python wrapper: &lt;a href=&#34;https://github.com/jaepil/twkorean&#34;&gt;https://github.com/jaepil/twkorean&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python Korean NLP project &lt;a href=&#34;https://github.com/konlpy/konlpy&#34;&gt;KoNLPy&lt;/a&gt; now includes twitter-korean-text. 파이썬에서 쉬운 활용이 가능한 &lt;a href=&#34;https://github.com/konlpy/konlpy&#34;&gt;KoNLPy&lt;/a&gt; 패키지에 twkorean이 포함되었습니다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ruby&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jun85664396&#34;&gt;jun85664396&lt;/a&gt; kindly offered a Ruby wrapper: &lt;a href=&#34;https://github.com/jun85664396/twitter-korean-text-ruby&#34;&gt;twitter-korean-text-ruby&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This provides access to com.twitter.penguin.korean.TwitterKoreanProcessorJava (Java wrapper).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/keepcosmos&#34;&gt;Jaehyun Shin&lt;/a&gt; kindly offered a Ruby wrapper: &lt;a href=&#34;https://github.com/keepcosmos/twitter-korean-text-ruby&#34;&gt;twitter-korean-text-ruby&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This provides access to com.twitter.penguin.korean.TwitterKoreanProcessor (Original Scala Class).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Elastic Search&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/socurites&#34;&gt;socurites&lt;/a&gt;&#39;s Korean analyzer for elasticsearch based on twitter-korean-text: &lt;a href=&#34;https://github.com/socurites/tkt-elasticsearch&#34;&gt;tkt-elasticsearch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Get the source 소스를 원하시는 경우&lt;/h2&gt; &#xA;&lt;p&gt;Clone the git repo and build using maven.&lt;/p&gt; &#xA;&lt;p&gt;Git 전체를 클론하고 Maven을 이용하여 빌드합니다.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/twitter/twitter-korean-text.git&#xA;cd twitter-korean-text&#xA;mvn compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &#39;pom.xml&#39; from your favorite IDE.&lt;/p&gt; &#xA;&lt;h2&gt;Usage 사용 방법&lt;/h2&gt; &#xA;&lt;p&gt;You can find these &lt;a href=&#34;https://raw.githubusercontent.com/twitter/twitter-korean-text/master/examples&#34;&gt;examples&lt;/a&gt; in examples folder.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/twitter-korean-text/master/examples&#34;&gt;examples&lt;/a&gt; 폴더에 사용 방법 예제 파일이 있습니다.&lt;/p&gt; &#xA;&lt;p&gt;from Scala&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.penguin.korean.TwitterKoreanProcessor&#xA;import com.twitter.penguin.korean.phrase_extractor.KoreanPhraseExtractor.KoreanPhrase&#xA;import com.twitter.penguin.korean.tokenizer.KoreanTokenizer.KoreanToken&#xA;&#xA;object ScalaTwitterKoreanTextExample {&#xA;  def main(args: Array[String]) {&#xA;    val text = &#34;한국어를 처리하는 예시입니닼ㅋㅋㅋㅋㅋ #한국어&#34;&#xA;&#xA;    // Normalize&#xA;    val normalized: CharSequence = TwitterKoreanProcessor.normalize(text)&#xA;    println(normalized)&#xA;    // 한국어를 처리하는 예시입니다ㅋㅋ #한국어&#xA;&#xA;    // Tokenize&#xA;    val tokens: Seq[KoreanToken] = TwitterKoreanProcessor.tokenize(normalized)&#xA;    println(tokens)&#xA;    // List(한국어(Noun: 0, 3), 를(Josa: 3, 1),  (Space: 4, 1), 처리(Noun: 5, 2), 하는(Verb: 7, 2),  (Space: 9, 1), 예시(Noun: 10, 2), 입니(Adjective: 12, 2), 다(Eomi: 14, 1), ㅋㅋ(KoreanParticle: 15, 2),  (Space: 17, 1), #한국어(Hashtag: 18, 4))&#xA;&#xA;    // Stemming&#xA;    val stemmed: Seq[KoreanToken] = TwitterKoreanProcessor.stem(tokens)&#xA;&#xA;    println(stemmed)&#xA;    // List(한국어(Noun: 0, 3), 를(Josa: 3, 1),  (Space: 4, 1), 처리(Noun: 5, 2), 하다(Verb: 7, 2),  (Space: 9, 1), 예시(Noun: 10, 2), 이다(Adjective: 12, 3), ㅋㅋ(KoreanParticle: 15, 2),  (Space: 17, 1), #한국어(Hashtag: 18, 4))&#xA;&#xA;    // Phrase extraction&#xA;    val phrases: Seq[KoreanPhrase] = TwitterKoreanProcessor.extractPhrases(tokens, filterSpam = true, enableHashtags = true)&#xA;    println(phrases)&#xA;    // List(한국어(Noun: 0, 3), 처리(Noun: 5, 2), 처리하는 예시(Noun: 5, 7), 예시(Noun: 10, 2), #한국어(Hashtag: 18, 4))&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from Java&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.List;&#xA;&#xA;import scala.collection.Seq;&#xA;&#xA;import com.twitter.penguin.korean.TwitterKoreanProcessor;&#xA;import com.twitter.penguin.korean.TwitterKoreanProcessorJava;&#xA;import com.twitter.penguin.korean.phrase_extractor.KoreanPhraseExtractor;&#xA;import com.twitter.penguin.korean.tokenizer.KoreanTokenizer;&#xA;&#xA;public class JavaTwitterKoreanTextExample {&#xA;  public static void main(String[] args) {&#xA;    String text = &#34;한국어를 처리하는 예시입니닼ㅋㅋㅋㅋㅋ #한국어&#34;;&#xA;&#xA;    // Normalize&#xA;    CharSequence normalized = TwitterKoreanProcessorJava.normalize(text);&#xA;    System.out.println(normalized);&#xA;    // 한국어를 처리하는 예시입니다ㅋㅋ #한국어&#xA;&#xA;&#xA;    // Tokenize&#xA;    Seq&amp;lt;KoreanTokenizer.KoreanToken&amp;gt; tokens = TwitterKoreanProcessorJava.tokenize(normalized);&#xA;    System.out.println(TwitterKoreanProcessorJava.tokensToJavaStringList(tokens));&#xA;    // [한국어, 를, 처리, 하는, 예시, 입니, 다, ㅋㅋ, #한국어]&#xA;    System.out.println(TwitterKoreanProcessorJava.tokensToJavaKoreanTokenList(tokens));&#xA;    // [한국어(Noun: 0, 3), 를(Josa: 3, 1),  (Space: 4, 1), 처리(Noun: 5, 2), 하는(Verb: 7, 2),  (Space: 9, 1), 예시(Noun: 10, 2), 입니(Adjective: 12, 2), 다(Eomi: 14, 1), ㅋㅋ(KoreanParticle: 15, 2),  (Space: 17, 1), #한국어(Hashtag: 18, 4)]&#xA;&#xA;&#xA;    // Stemming&#xA;    Seq&amp;lt;KoreanTokenizer.KoreanToken&amp;gt; stemmed = TwitterKoreanProcessorJava.stem(tokens);&#xA;    System.out.println(TwitterKoreanProcessorJava.tokensToJavaStringList(stemmed));&#xA;    // [한국어, 를, 처리, 하다, 예시, 이다, ㅋㅋ, #한국어]&#xA;    System.out.println(TwitterKoreanProcessorJava.tokensToJavaKoreanTokenList(stemmed));&#xA;    // [한국어(Noun: 0, 3), 를(Josa: 3, 1),  (Space: 4, 1), 처리(Noun: 5, 2), 하다(Verb: 7, 2),  (Space: 9, 1), 예시(Noun: 10, 2), 이다(Adjective: 12, 3), ㅋㅋ(KoreanParticle: 15, 2),  (Space: 17, 1), #한국어(Hashtag: 18, 4)]&#xA;&#xA;&#xA;    // Phrase extraction&#xA;    List&amp;lt;KoreanPhraseExtractor.KoreanPhrase&amp;gt; phrases = TwitterKoreanProcessorJava.extractPhrases(tokens, true, true);&#xA;    System.out.println(phrases);&#xA;    // [한국어(Noun: 0, 3), 처리(Noun: 5, 2), 처리하는 예시(Noun: 5, 7), 예시(Noun: 10, 2), #한국어(Hashtag: 18, 4)]&#xA;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basics&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/twitter-korean-text/master/src/main/scala/com/twitter/penguin/korean/TwitterKoreanProcessor.scala&#34;&gt;TwitterKoreanProcessor.scala&lt;/a&gt; is the central object that provides the interface for all the features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/twitter-korean-text/master/src/main/scala/com/twitter/penguin/korean/TwitterKoreanProcessor.scala&#34;&gt;TwitterKoreanProcessor.scala&lt;/a&gt;에 지원하는 모든 기능을 모아 두었습니다.&lt;/p&gt; &#xA;&lt;h2&gt;Running Tests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;mvn test&lt;/code&gt; will run our unit tests&lt;/p&gt; &#xA;&lt;p&gt;모든 유닛 테스트를 실행하려면 &lt;code&gt;mvn test&lt;/code&gt;를 이용해 주세요.&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;p&gt;We provide tools for quality assurance and test resources. They can be found under &lt;a href=&#34;https://raw.githubusercontent.com/twitter/twitter-korean-text/master/src/main/scala/com/twitter/penguin/korean/qa&#34;&gt;src/main/scala/com/twitter/penguin/korean/qa&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/twitter/twitter-korean-text/master/src/main/scala/com/twitter/penguin/korean/tools&#34;&gt;src/main/scala/com/twitter/penguin/korean/tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/twitter/twitter-korean-text/master/CONTRIBUTING.md&#34;&gt;general contribution guide&lt;/a&gt;. We will add this project-specific contribution guide later.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/twitter-korean-text/master/docs/contribution-guide.md&#34;&gt;설치 및 수정하는 방법 상세 안내&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Performance 처리 속도&lt;/h2&gt; &#xA;&lt;p&gt;Tested on Intel i7 2.3 Ghz&lt;/p&gt; &#xA;&lt;p&gt;Initial loading time (초기 로딩 시간): 2~4 sec&lt;/p&gt; &#xA;&lt;p&gt;Average time per parsing a chunk (평균 어절 처리 시간): 0.12 ms&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tweets (Avg length ~50 chars)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tweets&lt;/th&gt; &#xA;   &lt;th&gt;100K&lt;/th&gt; &#xA;   &lt;th&gt;200K&lt;/th&gt; &#xA;   &lt;th&gt;300K&lt;/th&gt; &#xA;   &lt;th&gt;400K&lt;/th&gt; &#xA;   &lt;th&gt;500K&lt;/th&gt; &#xA;   &lt;th&gt;600K&lt;/th&gt; &#xA;   &lt;th&gt;700K&lt;/th&gt; &#xA;   &lt;th&gt;800K&lt;/th&gt; &#xA;   &lt;th&gt;900K&lt;/th&gt; &#xA;   &lt;th&gt;1M&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Time in Seconds&lt;/td&gt; &#xA;   &lt;td&gt;57.59&lt;/td&gt; &#xA;   &lt;td&gt;112.09&lt;/td&gt; &#xA;   &lt;td&gt;165.05&lt;/td&gt; &#xA;   &lt;td&gt;218.11&lt;/td&gt; &#xA;   &lt;td&gt;270.54&lt;/td&gt; &#xA;   &lt;td&gt;328.52&lt;/td&gt; &#xA;   &lt;td&gt;381.09&lt;/td&gt; &#xA;   &lt;td&gt;439.71&lt;/td&gt; &#xA;   &lt;td&gt;492.94&lt;/td&gt; &#xA;   &lt;td&gt;542.12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Average per tweet: 0.54212 ms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Benchmark test by &lt;a href=&#34;http://konlpy.org/&#34;&gt;KoNLPy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://konlpy.org/ko/v0.4.2/_images/time.png&#34; alt=&#34;Benchmark test&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;http://konlpy.org/ko/v0.4.2/morph/&#34;&gt;http://konlpy.org/ko/v0.4.2/morph/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Author(s)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Will Hohyon Ryu (유호현): &lt;a href=&#34;https://github.com/nlpenguin&#34;&gt;https://github.com/nlpenguin&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/NLPenguin&#34;&gt;https://twitter.com/NLPenguin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2014 Twitter, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0: &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>