<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-10T01:44:34Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pshptr/ScalaLabs</title>
    <updated>2023-12-10T01:44:34Z</updated>
    <id>tag:github.com,2023-12-10:/pshptr/ScalaLabs</id>
    <link href="https://github.com/pshptr/ScalaLabs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala labs and lecture notes. Если заходите посмотреть конспект не забывайте поставить звезду⭐.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ScalaLabs&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Лабораторные работы по дисциплине &#34;ф-прог&#34; (Функциональное программирование) Scala 3, 3 курс 5 семестр БГУИР КСиС ВМСиС 2023. Конспект лекций ниже, после лабораторных работ.&lt;/h2&gt; &#xA;&lt;h4&gt;Мною выполнялись следующие лабораторные работы по варинатам соответственно: лр 1 вар 3, лр 2 вар 2, лр 3 вар 1, лр 4 вар 1, лаб 5 вар общий.&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Конспект лекций:&lt;/h2&gt; &#xA;&lt;h4&gt;(если берёте конспект, то не забывайте пожалуйста ставить звёздочки ⭐)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/Lecture%20Notes/lecture%201.md&#34;&gt;lecture 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/Lecture%20Notes/lecture%202.md&#34;&gt;lecture 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/Lecture%20Notes/lecture%203%20zip.md&#34;&gt;lecture 3 zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/Lecture%20Notes/lecture%204%20string.md&#34;&gt;lecture 4 string&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/Lecture%20Notes/lecture%205%20lazy%20val.md&#34;&gt;lecture 5 lazy val&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/Lecture%20Notes/lecture%206%20string%20builder.md&#34;&gt;lecture 6 string builder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/Lecture%20Notes/lecture%207%20regular%20expressions.md&#34;&gt;lecture 7 regular expressions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/Lecture%20Notes/lecture%208%2002.11.2023.md&#34;&gt;lecture 8 02.11.2023&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/Lecture%20Notes/lecture%209%2009.11.2023.md&#34;&gt;lecture 9 09.11.2023&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/Lecture%20Notes/lecture%2010%20analytics%2016.11.2023.md&#34;&gt;lecture 10 analytics 16.11.2023&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/Lecture%20Notes/lecture%2011%20nlp%2023.11.2023.md&#34;&gt;lecture 11 nlp 23.11.2023&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/Lecture%20Notes/lecture%2012%2007.12.2023.md&#34;&gt;lecture 12 07.12.2023&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/src/main/scala/Lab1.scala&#34;&gt;Лабораторная работа 1. Создание простых S-проектов на основе классов&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Вариант 1.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;p&gt;Построить генератор случайных чисел по следующей схеме. Вводите 10-значное число с клавиатуры. Формируете два новых целых числа A и B: первое A состоит из первых пяти цифр, второе B – из последних цифр введенного числа, начиная с шестой.&lt;br&gt; Перемножаете числа A и B друг на друга. Первые три цифры результата С, будучи поделенными на 1000, дают первое случайное число REZ.&lt;br&gt; Чтобы сформировать следующее случайное число, прибавляете к Z число С и повторяете процесс. Формируете два новых целых числа A и B: первое A состоит из первых пяти цифр, второе B – из последних цифр числа Z, начиная с шестой.&lt;br&gt; Перемножаете числа A и B друг на друга. Первые три цифры результата С, будучи поделенными на 1000, дают второе случайное число.&lt;br&gt; Чтобы сформировать следующее случайное число, прибавляете к Z число С и повторяете процесс. Сформируйте 5 случайных чисел. Если z отрицателен, то это значит, что надо заменить первую цифру единицы на ноль и убрать знак “минус”, кроме того, нужно поддерживать длину строки не меньше 10 символов. Сказанное, демонстрируется следующим примером:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;object Main234 {&#xA;  def main(args: Array[String]): Unit = {&#xA;   print(&#34;Enter the number: &#34;)&#xA;&#xA; var numberString =&#34;&#34;&#xA; var a =0&#xA; var b=0&#xA; var c=0&#xA; var rez: Float =0.0&#xA; var z=0&#xA; numberString = scala.io.StdIn.readLine()&#xA;  if ( (numberString.length() &amp;lt;= 10)) {&#xA;   println(&#34;Incorrect number&#34;);&#xA;   sys.exit(0)  }&#xA;  for (i &amp;lt;- 1 to 10) {&#xA;  a = numberString.substring(0, 5).toInt&#xA;  //println(numberString.length()); &#xA;  b=  numberString.substring(5, 10).toInt&#xA;  c= a*b&#xA;  rez=c.toString().substring(0,3).toFloat / 1000&#xA;  z+=c &#xA;  println(a);&#xA;  println(b);&#xA;  println(c);&#xA;  println(rez); &#xA;  println(&#34;z=&#34;+ z)&#xA;  numberString= numberString.substring(1,numberString.length()-1)&#xA;  numberString=&#34;011&#34;+z &#xA;   } &#xA;  } &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Вариант&amp;nbsp;2.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;p&gt;Использовать предыдущий пример, но только число А получается из цифр, стоящих на четных позициях, а В-на нечетных.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;def substringFromSymbolsAtEvenPositions(str: String): String = {&#xA;  val result = new StringBuilder&#xA;  for (i &amp;lt;- str.indices if i % 2 == 1) {&#xA;    result.append(str(i))&#xA;  }&#xA;  result.toString()&#xA;}&#xA;&#xA; object Main234 {&#xA;  def main(args: Array[String]): Unit = {&#xA;    val originalString = &#34;1234567890&#34;&#xA;    val substring = substringFromSymbolsAtEvenPositions(originalString)&#xA;    println(substring)&#xA;}&#xA;}&#xA;// Сформируйте по этой схеме 5 случайных чисел.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Вариант&amp;nbsp;3.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;p&gt;Построить генератор случайных чисел по следующей схеме. Вводите 10-значное число Z с клавиатуры. Формируете два новых целых числа A и B: первое A состоит из первых пяти цифр, второе B – из последних цифр числа Z, начиная с шестой.&lt;br&gt; Дописываете к числу В число А. Получаете число W. Находите С= Z&lt;em&gt;W. Первые три цифры результата С, будучи поделенными на 1000, дают первое случайное число REZ.&lt;br&gt; Чтобы сформировать следующее случайное число, формируете два новых целых числа A и B: первое A состоит из первых пяти цифр, второе B – из последних цифр числа C, начиная с шестой. Дописываете к числу В число А. Получаете число W. Находите C= C&lt;/em&gt;W. Первые три цифры результата C, будучи поделенными на 1000, дают второе случайное число REZ. Сформируйте 3 случайных чисел по этой схеме.&lt;/p&gt; &#xA;&lt;h4&gt;Вариант&amp;nbsp;4.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;p&gt;Построить генератор случайных чисел по следующей схеме. Вводите 16-значное число Z с клавиатуры. Формируете два новых целых числа A и B: первое A состоит из первых восьми цифр, второе B – из последних цифр числа Z, начиная с девятой.&lt;br&gt; Перемножаете числа A и B друг на друга, получаем число С. Первые три цифры результата С, будучи поделенными на 1000, дают первое случайное число REZ. Чтобы сформировать следующее случайное число, умножаете Z на число С и оставляете 16 цифр в результате. Повторяете процесс для сформированного таким образом числа Z. Формируете два новых целых числа A и B: первое A состоит из первых восьми цифр, второе B – из последних цифр числа Z, начиная с девятой.&lt;br&gt; Перемножаете числа A и B друг на друга. Первые три цифры результата С, будучи поделенными на 1000, дают второе случайное число. Чтобы сформировать следующее случайное число, умножаете Z на число С и повторяете процесс. Сформируйте 5 случайных чисел.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/src/main/scala/Lab2.scala&#34;&gt;Лабораторная работа 2. Работа со списками и функциями&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Вариант 1.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Написать функцию для подсчета суммы элементов списка, значение которых не превосходит 10. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для подсчета суммы первых трех элементов списка из 10 элементов. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для отыскания (минимального) индекса максимального элемента списка. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для проверки того, что список упорядочен по возрастанию. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для проверки наличия одинаковых элементов в списке. Список задать самостоятельно. Функция возвращает значение Да или Нет&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Вариант&amp;nbsp;2.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Написать функцию для подсчета суммы отрицательных элементов списка. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для подсчета суммы последних трех элементов списка из 10 элементов. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для отыскания индексов всех максимальных элементов списка. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для проверки того, что список не упорядочен ни по возрастанию, ни по убыванию. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для проверки наличия трех одинаковых элементов в списке. Список задать самостоятельно. Функция возвращает значение такого элемента.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Вариант&amp;nbsp;3.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Написать функцию для подсчета суммы элементов списка, значение которых лежит в диапазоне [0,5]. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для подсчета суммы элементов списка с номерами, содержащимися в другом списке. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для отыскания индекса минимального элемента списка. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для проверки того, что элементы списка не превосходят заданной величины. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для подсчета числа элементов списка, которые не превосходят заданной величины. Список задать самостоятельно.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Вариант&amp;nbsp;4.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Написать функцию для подсчета суммы элементов списка, значение которых по модулю не превосходит 5. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для подсчета суммы каждого второго элемента списка из 10 элементов. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для отыскания индекса элемента списка, наименее отклоняющегося от среднего значения по списку. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для проверки того, что список содержит квадрат одного из своих элементов. Список задать самостоятельно.&lt;/li&gt; &#xA; &lt;li&gt;Написать функцию для проверки наличия трех разных элементов в списке. Список задать самостоятельно. Функция возвращает значение Да или Нет&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/src/main/scala/Lab3.scala&#34;&gt;Лабораторная работа 3. Работа со строками&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Вариант 1.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to everybody’. C помощью техники регулярных выражений заменить латинские буквы на русские (или на цифры, если русский шрифт не поддерживается)&lt;/li&gt; &#xA; &lt;li&gt;Найти в тексте “When executing the exercise extract all extra words” все слова, начинающиеся на ext.&lt;/li&gt; &#xA; &lt;li&gt;В тексте ‘A big round ball fall to the ground’ заменить артикль the на a.&lt;/li&gt; &#xA; &lt;li&gt;Записать все слова в тексте в обратном порядке.&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to everybody’. Выбросить все гласные.&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to everybody’. Удвоить каждую букву в слове&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to everybody’. Удалить все вхождения буквы y&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to everybody’. Вставить слова with heartness чтобы получить&lt;/li&gt; &#xA; &lt;li&gt;Hello with heartness to everybody&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Вариант&amp;nbsp;2.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Дан текст: ‘1+1=2’. C помощью техники регулярных выражений заменить цифры на слова: 1- one, 2 - two&lt;/li&gt; &#xA; &lt;li&gt;Найти в тексте ‘Being quiet buetiful girl she never thought of buety’ все слова, начинающиеся на bue.&lt;/li&gt; &#xA; &lt;li&gt;В тексте ‘one plus one is something’ заменить one на two.&lt;/li&gt; &#xA; &lt;li&gt;Поменять местами первое и последнее слово в тексте world is nice.&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to all my friends’. Выбросить все согласные.&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to everybody’. Удалить каждую вторую букву в слове&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to everybody’. Удалить все вхождения буквы e&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Be healthy’. Вставить слова always чтобы получить Be always healthy&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Вариант&amp;nbsp;3.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Дан текст: ‘Passport AB-123-456’. C помощью техники регулярных выражений найти числа в этом тексте&lt;/li&gt; &#xA; &lt;li&gt;Найти в тексте ‘Being strong means nothing’ все слова, заканчивающиеся на ing.&lt;/li&gt; &#xA; &lt;li&gt;В тексте ‘123+723=846’ заменить 3 на 4, 6 – на 8.&lt;/li&gt; &#xA; &lt;li&gt;Записать все слова в тексте в случайном порядке. Текст: big dreadful dog runs after small poor cat. Всех слов 8. Номера 1,2,3, …,8.&lt;/li&gt; &#xA; &lt;li&gt;Заменить слово с номером 1 на слово с номером 7, слово с номером 2 на слово с номером 6, слово с номером 4 на слово с номером 5. Замена обоюдная, то есть слова просто меняются местами.&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to everybody’. Выбросить каждую третью букву.&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to everybody’. Удвоить каждую букву в слове&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to everybody’. Удалить все вхождения буквы o&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to everybody Katty, Mikky’. Вывести все слова, начинающиеся с заглавной буквы.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Вариант&amp;nbsp;4.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Дан текст: ‘Passport AB-123-436’. C помощью техники регулярных выражений найти число вхождений цифры 3.&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Passport AB-123-436’. C помощью техники регулярных выражений найти сумму всех цифр в тексте.&lt;/li&gt; &#xA; &lt;li&gt;В тексте ‘123+723=846’ выделить все символы арифметических операций.&lt;/li&gt; &#xA; &lt;li&gt;Записать все слова в тексте в случайном порядке. Текст: big black cat runs after small poor catty. Всех слов 8. Номера 1,2,3, …,8.&lt;/li&gt; &#xA; &lt;li&gt;Заменить слово с номером 1 на слово с номером 4, слово с номером 2 на слово с номером 7, слово с номером 3 на слово с номером 6. Замена обоюдная, то есть слова просто меняются местами.&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to Ronny old nail’. Найти удвоенные вхождения согласных.&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to Ronny old nail’. Найти число слов, записанных с большой буквы.&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello to everybody’. Подсчитать число всех вхождений буквы o&lt;/li&gt; &#xA; &lt;li&gt;Дан текст: ‘Hello agaiN to everybody Katty, Mikky’. Вывести все слова, начинающиеся со строчной буквы.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/src/main/scala/Lab4.scala&#34;&gt;Лабораторная работа 4. Работа с пакетом SPARK&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Вариант 1.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Создать собственный текстовый файл на английском или немецком языке – 4-5 предложений.&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова из текстового файла, исключая stop-слова&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова, содержащие букву t&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова, заканчивающиеся на ing&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова вторая буква которых а&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова, последняя буква которых s&lt;/li&gt; &#xA; &lt;li&gt;Вывести каждое второе слово&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Вариант&amp;nbsp;2.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Создать собственный текстовый файл на английском или немецком языке – 4-5 предложений. Тема - программирование&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова из текстового файла, исключая stop-слова&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова, содержащие вхождение prog&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова, заканчивающиеся на ion&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова третья буква которых r&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова, содержащие как минимум две буквы e&lt;/li&gt; &#xA; &lt;li&gt;Вывести последнее слово&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Вариант&amp;nbsp;3.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Создать собственный текстовый файл на английском или немецком языке – 4-5 предложений. Тема - спорт&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова из текстового файла, исключая stop-слова&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова, содержащие вхождение ball или sport&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова, заканчивающиеся на ion&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова третья буква которых c&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова, длина которых больше 4&lt;/li&gt; &#xA; &lt;li&gt;Вывести предпоследнее слово&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Вариант&amp;nbsp;4.&amp;nbsp;&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Создать собственный текстовый файл на английском или немецком языке – 4-5 предложений. Тема - авто&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова из текстового файла, исключая stop-слова&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова, содержащие вхождение car или avto&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова, заканчивающиеся на my&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова третья буква которых d&lt;/li&gt; &#xA; &lt;li&gt;Вывести все слова, у которых три и более гласных&lt;/li&gt; &#xA; &lt;li&gt;Вывести второе слово&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Доп задания:&lt;/h3&gt; &#xA;&lt;p&gt;1-е задание: написать 2 предложения на английском языке и удалить оттуда все пробелы между словами через регулярные выражения двумя разными способами.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;val sentences = Seq(&#34;This is the first sentence.&#34;, &#34;Here is the second sentence.&#34;)&#xA;val sentenceRDD = spark.sparkContext.parallelize(sentences)&#xA;&#xA;val sentenceWithoutSpaces1 = sentenceRDD.map(sentence =&amp;gt; sentence.replaceAll(&#34; &#34;, &#34;&#34;))&#xA;sentenceWithoutSpaces1.collect().foreach(println)&#xA;&#xA;val sentenceWithoutSpaces2 = sentenceRDD.map(sentence =&amp;gt; sentence.split(&#34; &#34;).mkString(&#34;&#34;))&#xA;sentenceWithoutSpaces2.collect().foreach(println)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;val sentences = Seq(&#34;This is the first sentence.&#34;, &#34;Here is the second sentence.&#34;)&#xA;val sentenceRDD = spark.sparkContext.parallelize(sentences)&#xA;&#xA;val sentencesWithoutSpaces = sentenceRDD.map(sentence =&amp;gt; sentence.replaceAll(&#34;\\s&#34;, &#34;&#34;))&#xA;sentencesWithoutSpaces.collect().foreach(println)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;2-е задание: в слове mother утроить букву t.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;val word = &#34;mother&#34;&#xA;val wordWithTripleT = word.replace(&#34;t&#34;, &#34;ttt&#34;)&#xA;println(wordWithTripleT)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3-e задание: удалить все гласные во всех словах из двух английских предложений из 1-го задания.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;val sentences = Seq(&#34;This is the first sentence.&#34;, &#34;Here is the second sentence.&#34;)&#xA;val sentenceRDD = spark.sparkContext.parallelize(sentences)&#xA;&#xA;val vowels = &#34;aeiouAEIOU&#34;&#xA;val wordsWithoutVowels = sentenceRDD.flatMap(sentence =&amp;gt; {&#xA;  val words = sentence.split(&#34; &#34;)&#xA;  words.map(word =&amp;gt; word.replaceAll(s&#34;[$vowels]&#34;, &#34;&#34;))&#xA;})&#xA;wordsWithoutVowels.collect().foreach(println)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/pshptr/ScalaLabs/raw/master/src/main/scala/Lab5.scala&#34;&gt;Лабораторная работа 5. Работа с базой данных&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;import java.awt.event.{ActionEvent, ActionListener}&#xA;import javax.swing.{JButton, JFrame, JPanel, SwingUtilities}&#xA;&#xA;object  ButtonModule {&#xA;  def main(args: Array[String]): Unit = {&#xA;    SwingUtilities.invokeLater(() =&amp;gt; {&#xA;      val frame = new JFrame(&#34;My Application&#34;)&#xA;      frame.setSize(300, 200)&#xA;      frame.setLocationRelativeTo(null)&#xA;      val panel = new JPanel()&#xA;      val button = new JButton(&#34;Click me!&#34;)&#xA;      panel.add(button)&#xA;&#xA;      button.addActionListener(new ActionListener {&#xA;        override def actionPerformed(e: ActionEvent): Unit = {&#xA;          println(&#34;Hello, world!&#34;)&#xA;        }&#xA;      })&#xA;&#xA;      frame.add(panel)&#xA;      frame.setVisible(true)&#xA;    })&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Наше приложение таково&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import java.awt.event.{ActionEvent, ActionListener}&#xA;import javax.swing.{JButton, JFrame, JPanel, SwingUtilities}&#xA;import java.awt.Dimension&#xA;import javax.swing.{JFrame, JLabel,JTextField, JPanel, SwingUtilities}&#xA;import java.sql.{Connection, DriverManager, ResultSet}&#xA;import java.awt.Color&#xA;&#xA;object ButtonModule  {&#xA;   val frame = new JFrame(&#34;My Application&#34;)&#xA;  frame.setSize(800, 600)&#xA;  frame.setLayout(null)&#xA;  &#xA;  def main(args: Array[String]): Unit = {&#xA;       SwingUtilities.invokeLater(() =&amp;gt; {&#xA;  &#xA; // val panel = new JPanel()&#xA;  val label1=new JLabel(&#34;Title&#34;)&#xA;  val label2=new JLabel(&#34;Price&#34;)&#xA;  label1.setBounds(50,120,100,20)&#xA;  label2.setBounds(200,120,70,20)&#xA;  val button1 = new JButton(&#34;Insert&#34;)&#xA;  val button2 = new JButton(&#34;Select&#34;)&#xA;  val textField = new JTextField(20)&#xA;  val textField2 = new JTextField(20)&#xA;  button1.setBounds(20,80,120,20)&#xA;  button2.setBounds(150,80,250,20)&#xA;  textField.setBounds(20,150,130,20)&#xA;  textField2.setBounds(160,150,130,20)&#xA;  frame.add(button1)&#xA;  frame.add(button2)&#xA;  frame.add(label1)&#xA;  frame.add(textField)&#xA;  frame.add(label2)&#xA;  frame.add(textField2)&#xA;  &#xA;  button1.addActionListener(new ActionListener {&#xA;    override def actionPerformed(e: ActionEvent): Unit = {&#xA;      val url = &#34;jdbc:mysql://localhost:3306/mydb&#34;&#xA;val username = &#34;root&#34;&#xA;val password = &#34;1&#34;&#xA;      Class.forName(&#34;com.mysql.jdbc.Driver&#34;)&#xA;  // Class.forName(&#34;org.gjt.mm.mysql.Driver&#34;)&#xA;&#xA;      val conn = DriverManager.getConnection(url, username, password)&#xA;&#xA;      try {&#xA;       val stmt = conn.createStatement()&#xA;    val rs = stmt.execute(&#34;INSERT INTO sclad VALUES (&#39;&#34; + textField.getText + &#34;&#39;,&#34; + textField2.getText + &#34;)&#34;)&#xA;      &#xA;     &#xA;       textField2.setText(&#34;&#34;)&#xA;       &#xA;      textField.setText(&#34;Added record&#34;)&#xA;     }&#xA;      finally {&#xA;        conn.close()&#xA;             }&#xA;&#xA;      &#xA;      &#xA;   //   textField.setText(&#34;problems&#34;)&#xA;    }&#xA;  })&#xA;    &#xA;  &#xA;  &#xA;  button2.addActionListener(new ActionListener {&#xA;    override def actionPerformed(e: ActionEvent): Unit = {&#xA;      ////////&#xA;      {&#xA;val url = &#34;jdbc:mysql://localhost:3306/mydb&#34;&#xA;val username = &#34;root&#34;&#xA;val password = &#34;1&#34;&#xA;&#xA;Class.forName(&#34;com.mysql.jdbc.Driver&#34;)&#xA;val conn = DriverManager.getConnection(url, username, password)&#xA;&#xA;try {&#xA;   val stmt = conn.createStatement()&#xA;   val prod_name= textField.getText().toString().trim()&#xA;   val rs = stmt.executeQuery(&#34;SELECT * FROM sclad WHERE product = &#39;&#34;+prod_name+&#34;&#39;&#34;)&#xA;   while (rs.next()) {&#xA;     &#xA;     val name = rs.getString(&#34;product&#34;)&#xA;     val price = rs.getInt(&#34;price&#34;)&#xA;    // println(s&#34;name=$name, price=$price&#34;)&#xA;     textField2.setText(&#34;&#34;+price)&#xA;     }&#xA;   } finally {&#xA;conn.close()&#xA;             }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;}&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;      ///////&#xA;      &#xA;      &#xA;   //   textField.setText(&#34;Hello World, You say&#34;)&#xA;    }&#xA;  })&#xA;&#xA;&#xA;  frame.setBackground(Color.BLUE)&#xA;  frame.setLocationRelativeTo(null)&#xA;  frame.setVisible(true)&#xA;  &#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;} } Разберитесь с этим приложением.&lt;/p&gt; &#xA;&lt;h4&gt;Вариант Общий.&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Расширить количество столбцов таблицы sclad, добавив поле количество товара на складе.&lt;/li&gt; &#xA; &lt;li&gt;Вывести товар, дающий максимальную прибыль (количество*цену).&lt;/li&gt; &#xA; &lt;li&gt;Выбрать товар по ограничению (не меньше такой-то величины).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>databricks/devbox</title>
    <updated>2023-12-10T01:44:34Z</updated>
    <id>tag:github.com,2023-12-10:/databricks/devbox</id>
    <link href="https://github.com/databricks/devbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Databricks main line of development is now in the monorepo. Please see &lt;code&gt;devtools/devbox&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Devbox syncer&lt;/h1&gt; &#xA;&lt;p&gt;A one-way sync from laptop to an EC2 instance.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;To prepare an assembly jar, ready to be tested and deployed in the universe/&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./mill launcher.assembly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result can be found in &lt;code&gt;out/launcher/assembly/dest/out.jar&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;To run all tests (takes a long time):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./mill devbox.test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interactive console (REPL)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./mill -i devbox.repl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Release&lt;/h2&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;https://github.com/databricks/devbox/actions?query=workflow%3ARelease&#34;&gt;Github Action&lt;/a&gt; to release Devbox.&lt;/p&gt; &#xA;&lt;p&gt;Just run the workflow on the target branch (usually master) with the new version number and check the &lt;a href=&#34;https://github.com/databricks/devbox/releases&#34;&gt;releases&lt;/a&gt; page&lt;/p&gt;</summary>
  </entry>
</feed>