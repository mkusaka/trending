<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-24T01:41:53Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>heroku/heroku-sbt-plugin</title>
    <updated>2023-12-24T01:41:53Z</updated>
    <id>tag:github.com,2023-12-24:/heroku/heroku-sbt-plugin</id>
    <link href="https://github.com/heroku/heroku-sbt-plugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An sbt plugin for deploying Heroku Scala applications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Heroku sbt Plugin&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/heroku-sbt-plugin/main/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/heroku/sbt-heroku&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/heroku/sbt-heroku/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/heroku/sbt-heroku/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] This plugin is no longer maintained.&lt;/p&gt; &#xA; &lt;p&gt;Heroku offers a build tool independent CLI for the purpose of deploying JAR and WAR files directly to Heroku without using the standard Git workflow. Users that require the functionality of the Heroku sbt Plugin are encouraged to migrate to it.&lt;/p&gt; &#xA; &lt;p&gt;Find out more: &lt;a href=&#34;https://github.com/heroku/heroku-jvm-application-deployer&#34;&gt;Heroku JVM Application Deployer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This plugin is used to deploy Scala and Play applications directly to Heroku without pushing to a Git repository. This is can be useful when deploying from a CI server.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Plugin&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;project/plugins.sbt&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;addSbtPlugin(&#34;com.heroku&#34; % &#34;sbt-heroku&#34; % &#34;2.1.4&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not using Play, then you&#39;ll also need to add the &lt;a href=&#34;https://github.com/sbt/sbt-native-packager&#34;&gt;sbt-native-packager plugin&lt;/a&gt;, which creates a &lt;code&gt;stage&lt;/code&gt; task. Alternatively, you can &lt;a href=&#34;https://raw.githubusercontent.com/heroku/heroku-sbt-plugin/main/#deploying-a-fat-jar&#34;&gt;deploy a fat JAR using sbt-assembly&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Next, add something like this to your &lt;code&gt;build.sbt&lt;/code&gt; if you do not have a Heroku Git repo in your &lt;code&gt;git remote&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;herokuAppName in Compile := &#34;your-heroku-app-name&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, if you have the &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-cli&#34;&gt;Heroku CLI&lt;/a&gt; installed, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ sbt stage deployHeroku&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not have the CLI installed, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ HEROKU_API_KEY=&#34;xxx-xxx-xxxx&#34; sbt stage deployHeroku&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And replace &#34;xxx-xxx-xxxx&#34; with the value of your Heroku API token.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It is required that you use sbt 0.13.5 or greater.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You must use Java 1.7 or higher locally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This plugin has not been tested with Play 2.0 or 2.1.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuring the Plugin&lt;/h3&gt; &#xA;&lt;p&gt;You may set the desired JDK version like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;herokuJdkVersion in Compile := &#34;11&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a list of supported JDK versions, refer to the &lt;a href=&#34;https://devcenter.heroku.com/articles/java-support#supported-java-versions&#34;&gt;Heroku Java Support DevCenter article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can (but probably should not) set configuration variables like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;herokuConfigVars in Compile := Map(&#xA;  &#34;MY_VAR&#34; -&amp;gt; &#34;some value&#34;,&#xA;  &#34;JAVA_OPTS&#34; -&amp;gt; &#34;-XX:+UseCompressedOops&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you adhere to the principles of the &lt;a href=&#34;http://12factor.net/config&#34;&gt;12 Factor app&lt;/a&gt;, Configuration should be strictly seperated from code. Thus, you do not want to tie your configuration to your codebase. There are a few exceptions to this, such as &lt;code&gt;conf/routes&lt;/code&gt;, and some &lt;code&gt;JAVA_OPTS&lt;/code&gt; may be universal. But please use &lt;code&gt;herokuConfigVars&lt;/code&gt; sparingly.&lt;/p&gt; &#xA;&lt;p&gt;Any variable defined in &lt;code&gt;herokuConfigVars&lt;/code&gt; will override defaults. However, if you remove a variable from this list, it will not automatically be removed from your Heroku app (even on the next deploy).&lt;/p&gt; &#xA;&lt;p&gt;You may set process types (similar to a &lt;code&gt;Procfile&lt;/code&gt;) with &lt;code&gt;herokuProcessTypes&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;herokuProcessTypes in Compile := Map(&#xA;  &#34;web&#34; -&amp;gt; &#34;target/universal/stage/bin/my-app -Dhttp.port=$PORT&#34;,&#xA;  &#34;worker&#34; -&amp;gt; &#34;java -jar target/universal/stage/lib/my-worker.jar&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can include additional directories in the slug (they must be relative to the project root):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;herokuIncludePaths in Compile := Seq(&#xA;  &#34;app&#34;, &#34;conf/routes&#34;, &#34;public/javascripts&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run the plugin against all sub-projects (in addition to the root project) by setting the following option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;herokuSkipSubProjects in Compile := false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This defaults to &lt;code&gt;true&lt;/code&gt; (and currently it only runs against all sub-projects or none).&lt;/p&gt; &#xA;&lt;p&gt;You can disable the upload progress in the console by setting the &lt;code&gt;heroku.log.format&lt;/code&gt; system property to &lt;code&gt;false&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sbt -Dheroku.log.format=false deployHeroku&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;code&gt;src/sbt-test&lt;/code&gt; directory for examples.&lt;/p&gt; &#xA;&lt;h2&gt;Deploying a Fat JAR&lt;/h2&gt; &#xA;&lt;p&gt;If you are packaging your application with &lt;a href=&#34;https://github.com/sbt/sbt-assembly&#34;&gt;sbt-assembly&lt;/a&gt; or any other plugin that produces a &#34;fat JAR&#34;, you can deploy that file by adding the following configuration to your &lt;code&gt;build.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;herokuFatJar in Compile := Some((assemblyOutputPath in assembly).value)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If not using sbt-assembly, you may replace &lt;code&gt;(assemblyOutputPath in assembly).value&lt;/code&gt; with the relative path to your JAR file. Then you can deploy by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sbt assembly deployHeroku&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The sbt-heroku plugin will skip the sbt-native-packager bits and deploy your JAR directly to Heroku.&lt;/p&gt; &#xA;&lt;h2&gt;Running a Remote Console&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;sbt-native-packager&lt;/code&gt; version 0.7.6 or greater, sbt-heroku will create a &lt;code&gt;console&lt;/code&gt; process type for you. This command can be run like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ heroku run console -a &amp;lt;appname&amp;gt;&#xA;Running `console` attached to terminal... up, run.5154&#xA;Picked up JAVA_TOOL_OPTIONS: -Xmx384m  -Djava.rmi.server.useCodebaseOnly=true&#xA;Failed to created JLineReader: java.lang.NoClassDefFoundError: scala/tools/jline/console/completer/Completer&#xA;Falling back to SimpleReader.&#xA;Welcome to Scala version 2.10.4 (OpenJDK 64-Bit Server VM, Java 1.8.0_20).&#xA;Type in expressions to have them evaluated.&#xA;Type :help for more information.&#xA;&#xA;scala&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For older versions of Play 2.x it might be necessary to upgrade &lt;code&gt;sbt-native-packager&lt;/code&gt; manually. You can do this by adding the following line of code to your &lt;code&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;addSbtPlugin(&#34;com.typesafe.sbt&#34; % &#34;sbt-native-packager&#34; % &#34;0.7.6&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, the is &lt;a href=&#34;https://issues.scala-lang.org/browse/SI-9199&#34;&gt;a bug in Scala 2.11.6&lt;/a&gt; that causes this console task to fail. Upgrading to Scala 2.11.7 fixes the issue.&lt;/p&gt; &#xA;&lt;h2&gt;Deploying to Multiple Environments&lt;/h2&gt; &#xA;&lt;p&gt;To deploy to multiple Heroku app environments, you can use either system properties, environment variables, or any other native sbt/Java configuration method. For example, you might define your &lt;code&gt;appName&lt;/code&gt; as a Map and choose a value with the system property as a key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;herokuAppName in Compile := Map(&#xA;  &#34;test&#34; -&amp;gt; &#34;your-heroku-app-test&#34;,&#xA;  &#34;stg&#34;  -&amp;gt; &#34;your-heroku-app-stage&#34;,&#xA;  &#34;prod&#34; -&amp;gt; &#34;your-heroku-app-prod&#34;&#xA;).getOrElse(sys.props(&#34;appEnv&#34;), &#34;your-heroku-app-dev&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the sbt command like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ sbt -DappEnv=test stage deployHeroku&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploying from Git Branches&lt;/h3&gt; &#xA;&lt;p&gt;Another option when using multiple environments is to deploy from a Git branch that corresponds to the environment. This is particularly useful if you are using &lt;a href=&#34;https://github.com/nvie/gitflow&#34;&gt;git-flow&lt;/a&gt; or a similar process.&lt;/p&gt; &#xA;&lt;p&gt;First, add the sbt-git plugin ot your &lt;code&gt;project/plugins.sbt&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;resolvers += &#34;jgit-repo&#34; at &#34;http://download.eclipse.org/jgit/maven&#34;&#xA;&#xA;addSbtPlugin(&#34;com.typesafe.sbt&#34; % &#34;sbt-git&#34; % &#34;0.6.4&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in your &lt;code&gt;build.sbt&lt;/code&gt; you can configure the sbt-heroku plugin to deploy to the environment that corresponds to the current Git branch like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.typesafe.sbt.SbtGit._&#xA;&#xA;// ...&#xA;herokuAppName in Compile := Map(&#xA;  &#34;testing&#34;    -&amp;gt; &#34;myapp-testing&#34;,&#xA;  &#34;staging&#34;    -&amp;gt; &#34;myapp-staging&#34;,&#xA;  &#34;production&#34; -&amp;gt; &#34;myapp&#34;&#xA;).getOrElse(git.gitCurrentBranch.value, &#34;myapp-dev&#34;)&#xA;&#xA;showCurrentGitBranch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hacking&lt;/h2&gt; &#xA;&lt;p&gt;In order to run the test suite, you must have the &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-cli&#34;&gt;Heroku CLI&lt;/a&gt; installed. Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ sbt scripted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run an individual test, use a command like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ sbt &#34;scripted settings/config_vars&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The heavy lifting for this plugin is done by the &lt;code&gt;heroku-deploy&lt;/code&gt; library. The source code for that project can be found in the &lt;a href=&#34;https://github.com/heroku/heroku-maven-plugin/tree/main/heroku-deploy&#34;&gt;heroku-maven-plugin repository&lt;/a&gt;. If you need to update that library, do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh-session&#34;&gt;$ git clone https://github.com/heroku/heroku-maven-plugin&#xA;$ cd heroku-maven-plugin/heroku-deploy&#xA;# make your changes&#xA;$ mvn clean install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then update the &lt;code&gt;heroku-deploy&lt;/code&gt; dependency version in the sbt-heroku &lt;code&gt;build.sbt&lt;/code&gt; to whatever version is specified in the heroku-deploy &lt;code&gt;pom.xml&lt;/code&gt;. The next time you run the &lt;code&gt;scripted&lt;/code&gt; tests it will pick up the snapshot version from your local Maven repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>heroku/scala-play-sample</title>
    <updated>2023-12-24T01:41:53Z</updated>
    <id>tag:github.com,2023-12-24:/heroku/scala-play-sample</id>
    <link href="https://github.com/heroku/scala-play-sample" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;This is your new Play 2.0 application&lt;/h1&gt; &#xA;&lt;p&gt;This file will be packaged with your application, when using &lt;code&gt;play dist&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>heroku/predictionio-engine-ur</title>
    <updated>2023-12-24T01:41:53Z</updated>
    <id>tag:github.com,2023-12-24:/heroku/predictionio-engine-ur</id>
    <link href="https://github.com/heroku/predictionio-engine-ur" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal Recommender optimized for deployment to Heroku&lt;/p&gt;&lt;hr&gt;&lt;p&gt;⚠️ &lt;strong&gt;This project is no longer active.&lt;/strong&gt; No further updates are planned.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://predictionio.incubator.apache.org&#34;&gt;PredictionIO&lt;/a&gt; Universal Recommender for &lt;a href=&#34;https://www.heroku.com&#34;&gt;Heroku&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A fork of the &lt;strong&gt;&lt;a href=&#34;https://github.com/actionml/universal-recommender&#34;&gt;Universal Recommender&lt;/a&gt; version 0.5.0&lt;/strong&gt; deployable with the &lt;a href=&#34;https://github.com/heroku/predictionio-buildpack&#34;&gt;PredictionIO buildpack for Heroku&lt;/a&gt;. Due to substantial revisions to support Elasticsearch on Heroku, this fork lags behind the main UR; conceptual differences beyond version 0.5.0 are listed in the &lt;a href=&#34;http://actionml.com/docs/ur_version_log&#34;&gt;UR release log&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The Universal Recommender (UR) is a new type of collaborative filtering recommender based on an algorithm that can use data from a wide variety of user taste indicators—it is called the &lt;a href=&#34;https://mahout.apache.org/users/algorithms/intro-cooccurrence-spark.html&#34;&gt;Correlated Cross-Occurrence algorithm&lt;/a&gt;. …CCO is able to ingest any number of user actions, events, profile data, and contextual information. It then serves results in a fast and scalable way. It also supports item properties for filtering and boosting recommendations and can therefor be considered a hybrid collaborative filtering and content-based recommender.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;—&lt;a href=&#34;https://github.com/actionml/universal-recommender&#34;&gt;upstream docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Heroku app depends on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elements.heroku.com/addons/bonsai&#34;&gt;Bonsai Add-on&lt;/a&gt; to provide the search engine (Elasticsearch 5.x)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://elements.heroku.com/addons/heroku-postgresql&#34;&gt;Heroku Postgres Add-on&lt;/a&gt; to provide the database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo Story 🐸&lt;/h2&gt; &#xA;&lt;p&gt;This engine demonstrates recommendation of &lt;strong&gt;items&lt;/strong&gt; for a &lt;strong&gt;mobile phone user&lt;/strong&gt; based on their &lt;strong&gt;purchase history&lt;/strong&gt;. The model is trained with a small &lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/data/initial-events.json&#34;&gt;example data set&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How To 📚&lt;/h2&gt; &#xA;&lt;p&gt;✏️ Throughout this document, code terms that start with &lt;code&gt;$&lt;/code&gt; represent a value (shell variable) that should be replaced with a customized value, e.g &lt;code&gt;$ENGINE_NAME&lt;/code&gt;…&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;⚠️ &lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🚀 &lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-demo-deployment&#34;&gt;Demo Deployment&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-create-the-app&#34;&gt;Create the app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-configure-the-app&#34;&gt;Configure the app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-provision-elasticsearch&#34;&gt;Provision Elasticsearch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-provision-postgres&#34;&gt;Provision Postgres&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-import-data&#34;&gt;Import data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-deploy-the-app&#34;&gt;Deploy the app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-scale-up&#34;&gt;Scale up&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-retry-release&#34;&gt;Retry release&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-diagnostics&#34;&gt;Diagnostics&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;🎯 &lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-query-for-predictions&#34;&gt;Query for predictions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🛠&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-local-development&#34;&gt;Local development&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-import-sample-data&#34;&gt;Import sample data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-run-pio&#34;&gt;Run &lt;code&gt;pio&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-query-the-local-engine&#34;&gt;Query the local engine&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;🎛 &lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/#user-content-configuration&#34;&gt;Configuration options&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://signup.heroku.com&#34;&gt;Heroku account&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://toolbelt.heroku.com&#34;&gt;Heroku CLI&lt;/a&gt;, command-line tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;git&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo Deployment&lt;/h2&gt; &#xA;&lt;p&gt;Adaptation of the normal &lt;a href=&#34;https://github.com/heroku/predictionio-buildpack/raw/master/CUSTOM.md#user-content-engine&#34;&gt;PIO engine deployment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Create the app&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone \&#xA;  https://github.com/heroku/predictionio-engine-ur.git \&#xA;  pio-engine-ur&#xA;&#xA;cd pio-engine-ur&#xA;&#xA;heroku create $ENGINE_NAME&#xA;heroku buildpacks:add https://github.com/heroku/predictionio-buildpack.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure the app&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;heroku config:set \&#xA;  PIO_EVENTSERVER_APP_NAME=ur \&#xA;  PIO_EVENTSERVER_ACCESS_KEY=$RANDOM-$RANDOM-$RANDOM-$RANDOM-$RANDOM-$RANDOM \&#xA;  PIO_UR_ELASTICSEARCH_CONCURRENCY=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Provision Elasticsearch&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;heroku addons:create bonsai --as PIO_ELASTICSEARCH --version 5.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ensure the &lt;code&gt;--version&lt;/code&gt; you specify is a &lt;a href=&#34;https://docs.bonsai.io/v1.0/docs/supported-elasticsearch-versions&#34;&gt;currently supported version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the Bonsai add-on&#39;s dashboard, verify that Elasticsearch is really the requested version. Only versions greater than 5.1 will work with this Heroku app. &lt;em&gt;Caution: it&#39;s easy to accidentally provision the wrong version.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Provision Postgres&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;heroku addons:create heroku-postgresql:hobby-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use a higher-level, paid plan for anything but a small demo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hobby-basic&lt;/code&gt; is the smallest paid &lt;a href=&#34;https://elements.heroku.com/addons/heroku-postgresql#pricing&#34;&gt;heroku-postgresql plan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Import data&lt;/h3&gt; &#xA;&lt;p&gt;Initial training data is automatically imported from &lt;a href=&#34;https://raw.githubusercontent.com/heroku/predictionio-engine-ur/master/data/initial-events.json&#34;&gt;&lt;code&gt;data/initial-events.json&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;👓 When you&#39;re ready to begin working with your own data, read about strategies for &lt;a href=&#34;https://github.com/heroku/predictionio-buildpack/raw/master/CUSTOM.md#user-content-import-data&#34;&gt;importing data&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Deploy the app&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push heroku master&#xA;&#xA;# Follow the logs to see training &amp;amp; web start-up&#xA;#&#xA;heroku logs -t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;Initial deploy will probably fail due to memory constraints.&lt;/strong&gt; Proceed to scale up.&lt;/p&gt; &#xA;&lt;h3&gt;Scale up&lt;/h3&gt; &#xA;&lt;p&gt;Once deployed, scale up the processes to avoid memory issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;heroku ps:scale \&#xA;  web=1:Standard-2X \&#xA;  release=0:Performance-L \&#xA;  train=0:Performance-L&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;💵 &lt;em&gt;These are paid, &lt;a href=&#34;https://devcenter.heroku.com/articles/dyno-types#available-dyno-types&#34;&gt;professional dyno types&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Retry release&lt;/h3&gt; &#xA;&lt;p&gt;When the release (&lt;code&gt;pio train&lt;/code&gt;) fails due to memory constraints or other transient error, you may use the Heroku CLI &lt;a href=&#34;https://github.com/heroku/heroku-releases-retry&#34;&gt;releases:retry plugin&lt;/a&gt; to rerun the release without pushing a new deployment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# First time, install it.&#xA;heroku plugins:install heroku-releases-retry&#xA;&#xA;# Re-run the release &amp;amp; watch the logs&#xA;heroku releases:retry&#xA;heroku logs -t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Query for predictions&lt;/h2&gt; &#xA;&lt;p&gt;Once deployment completes, the engine is ready to recommend of &lt;strong&gt;items&lt;/strong&gt; for a &lt;strong&gt;mobile phone user&lt;/strong&gt; based on their &lt;strong&gt;purchase history&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Get all recommendations for a user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# an Android user&#xA;curl -X &#34;POST&#34; &#34;http://$ENGINE_NAME.herokuapp.com/queries.json&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d $&#39;{&#34;user&#34;: &#34;100&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# an iPhone user&#xA;curl -X &#34;POST&#34; &#34;http://$ENGINE_NAME.herokuapp.com/queries.json&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d $&#39;{&#34;user&#34;: &#34;200&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get recommendations for a user, excluding &lt;em&gt;phones&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X &#34;POST&#34; &#34;http://$ENGINE_NAME.herokuapp.com/queries.json&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d $&#39;{&#xA;            &#34;user&#34;: &#34;100&#34;,&#xA;            &#34;fields&#34;: [{&#xA;              &#34;name&#34;: &#34;category&#34;,&#xA;              &#34;values&#34;: [&#34;phone&#34;],&#xA;              &#34;bias&#34;: 0&#xA;            }]&#xA;          }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get accessory recommendations for a user excluding &lt;em&gt;phones&lt;/em&gt; &amp;amp; boosting &lt;em&gt;power-related items&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X &#34;POST&#34; &#34;http://$ENGINE_NAME.herokuapp.com/queries.json&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d $&#39;{&#xA;            &#34;user&#34;: &#34;100&#34;,&#xA;            &#34;fields&#34;: [{&#xA;              &#34;name&#34;: &#34;category&#34;,&#xA;              &#34;values&#34;: [&#34;phone&#34;],&#xA;              &#34;bias&#34;: 0&#xA;            },{&#xA;              &#34;name&#34;: &#34;category&#34;,&#xA;              &#34;values&#34;: [&#34;power&#34;],&#xA;              &#34;bias&#34;: 1.5&#xA;            }&#xA;          }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a user with no purchase history, the recommendations will be based on popularity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X &#34;POST&#34; &#34;http://$ENGINE_NAME.herokuapp.com/queries.json&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d $&#39;{&#34;user&#34;: &#34;000&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get recommendations based on similarity with an &lt;em&gt;item&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X &#34;POST&#34; &#34;http://$ENGINE_NAME.herokuapp.com/queries.json&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d $&#39;{&#34;item&#34;: &#34;101&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get recommendations for a &lt;em&gt;user&lt;/em&gt; boosting on similarity with an &lt;em&gt;item&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X &#34;POST&#34; &#34;http://$ENGINE_NAME.herokuapp.com/queries.json&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d $&#39;{&#xA;            &#34;user&#34;: &#34;100&#34;,&#xA;            &#34;item&#34;: &#34;101&#34;&#xA;          }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;👓 See the main &lt;a href=&#34;http://actionml.com/docs/ur_queries&#34;&gt;Universal Recommender query docs&lt;/a&gt; for more parameters. &lt;em&gt;Please note those docs have been updated for the newest version 0.6.0, but this repo provides version 0.5.0. Differences are listed in the &lt;a href=&#34;http://actionml.com/docs/ur_version_log&#34;&gt;UR release log&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Local Development&lt;/h2&gt; &#xA;&lt;h3&gt;Clone Engine Template&lt;/h3&gt; &#xA;&lt;p&gt;Start in this repo&#39;s working directory. If you don&#39;t already have it cloned, then do it now:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone \&#xA;  https://github.com/heroku/predictionio-engine-ur.git \&#xA;  pio-engine-ur&#xA;&#xA;cd pio-engine-ur&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set-up PredictionIO&lt;/h3&gt; &#xA;&lt;p&gt;➡️ &lt;strong&gt;&lt;a href=&#34;https://github.com/heroku/predictionio-buildpack/raw/master/DEV.md&#34;&gt;Setup local development&lt;/a&gt; including Elasticsearch.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bin/pio status&lt;/code&gt; should succeed when this setup is complete.&lt;/p&gt; &#xA;&lt;h3&gt;Import sample data&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/pio app new ur&#xA;PIO_EVENTSERVER_APP_NAME=ur data/import-events -f data/initial-events.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run &lt;code&gt;pio&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/pio build&#xA;bin/pio train -- --driver-memory 2500m&#xA;bin/pio deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Query the local engine&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X &#34;POST&#34; &#34;http://127.0.0.1:8000/queries.json&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d $&#39;{&#xA;            &#34;user&#34;: &#34;100&#34;,&#xA;            &#34;fields&#34;: [{&#xA;              &#34;name&#34;: &#34;category&#34;,&#xA;              &#34;values&#34;: [&#34;phone&#34;],&#xA;              &#34;bias&#34;: 0&#xA;            }]&#xA;          }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PIO_UR_ELASTICSEARCH_CONCURRENCY&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;may increase in-line with the &lt;a href=&#34;https://elements.heroku.com/addons/bonsai&#34;&gt;Bonsai Add-on plan&#39;s&lt;/a&gt; value for &lt;strong&gt;Concurrent Indexing&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;the max for a dedicated Elasticsearch cluster is &#34;unlimited&#34;, but in reality set it to match the number of Spark executor cores&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PIO_UR_ELASTICSEARCH_INDEX_REPLICAS&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;more replicas may improve concurrent search performance&lt;/li&gt; &#xA;   &lt;li&gt;should increase in-line with the number of Elasticsearch nodes (n-1) in the cluster&lt;/li&gt; &#xA;   &lt;li&gt;takes effect after the next training, when a new index is inserted&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>