<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-11T01:45:30Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gvolpe/trading</title>
    <updated>2023-02-11T01:45:30Z</updated>
    <id>tag:github.com,2023-02-11:/gvolpe/trading</id>
    <link href="https://github.com/gvolpe/trading" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ’± Trading application written in Scala 3 that showcases an Event-Driven Architecture (EDA) and Functional Programming (FP)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;trading&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gvolpe/trading/actions&#34;&gt;&lt;img src=&#34;https://github.com/gvolpe/trading/workflows/Elm/badge.svg?sanitize=true&#34; alt=&#34;CI Elm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gvolpe/trading/actions&#34;&gt;&lt;img src=&#34;https://github.com/gvolpe/trading/workflows/Scala/badge.svg?sanitize=true&#34; alt=&#34;CI Scala&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gvolpe/trading/actions&#34;&gt;&lt;img src=&#34;https://github.com/gvolpe/trading/workflows/Tyrian/badge.svg?sanitize=true&#34; alt=&#34;CI Tyrian&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gvolpe/trading/actions/workflows/ci-images.yml&#34;&gt;&lt;img src=&#34;https://github.com/gvolpe/trading/actions/workflows/ci-images.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Registry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gvolpe/trading/actions/workflows/ci-smokey.yml&#34;&gt;&lt;img src=&#34;https://github.com/gvolpe/trading/actions/workflows/ci-smokey.yml/badge.svg?branch=main&#34; alt=&#34;CI Smokey&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Reference application developed in the &lt;a href=&#34;https://leanpub.com/feda&#34;&gt;Functional event-driven architecture: Powered by Scala 3&lt;/a&gt; book.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#web-app&#34;&gt;Web App&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#scalajs&#34;&gt;ScalaJS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#services&#34;&gt;Services&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#lib&#34;&gt;Lib&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#domain&#34;&gt;Domain&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#feed&#34;&gt;Feed&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#forecasts&#34;&gt;Forecasts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#processor&#34;&gt;Processor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#snapshots&#34;&gt;Snapshots&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#alerts&#34;&gt;Alerts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#ws-server&#34;&gt;WS Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#tracing&#34;&gt;Tracing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#x-demo&#34;&gt;X Demo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#x-qa&#34;&gt;X QA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#monitoring&#34;&gt;Monitoring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#topic-compaction&#34;&gt;Topic compaction&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Web App&lt;/h2&gt; &#xA;&lt;p&gt;The web application allows users to subscribe/unsubscribe to/from symbol alerts such as &lt;code&gt;EURUSD&lt;/code&gt;, which are emitted in real-time via Web Sockets.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/imgs/webapp.png&#34; alt=&#34;client&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is written in &lt;a href=&#34;https://elm-lang.org/&#34;&gt;Elm&lt;/a&gt; and can be built as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ nix build .#elm-webapp&#xA;$ open result/index.html # or specify browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s also a development shell handy for local development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ nix develop .#elm&#xA;$ cd web-app&#xA;$ elm make src/Main.elm --output=Main.js&#xA;$ open index.html # or specify browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Nix is not your jam, you can install Elm by following the &lt;a href=&#34;https://guide.elm-lang.org/install/elm.html&#34;&gt;official instructions&lt;/a&gt; and then compile as usual.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd web-app&#xA;$ elm make src/Main.elm --output=Main.js&#xA;$ xdg-open index.html # or specify browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ScalaJS&lt;/h3&gt; &#xA;&lt;p&gt;There is also a replica of the Elm application written in Scala using the &lt;a href=&#34;https://tyrian.indigoengine.io/&#34;&gt;Tyrian&lt;/a&gt; framework that can be built as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sbt &#39;webapp/fullLinkJS&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then run it via Nix as shown below (it requires &lt;a href=&#34;https://nixos.wiki/wiki/Flakes&#34;&gt;flakes&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix run .#tyrian-webapp&#xA;Using cache dir: /home/gvolpe/workspace/trading/modules/ws-client/nix-parcel-cache&#xA;Server running at http://localhost:1234&#xA;âœ¨ Built in 7ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTICE: The &lt;code&gt;nix run&lt;/code&gt; command will create a directory for the Parcel cache, which needs write permissions.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;code&gt;fullLinkJS&lt;/code&gt; to create a fully optimized JS file. However, we can use &lt;code&gt;fastLinkJS&lt;/code&gt; for faster iterations.&lt;/p&gt; &#xA;&lt;p&gt;For such cases, it may be more convenient to use &lt;code&gt;yarn&lt;/code&gt; directly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix develop .#tyrian&#xA;$ cd modules/ws-client&#xA;$ yarn install&#xA;$ yarn build&#xA;$ yarn start&#xA;yarn run v1.22.17&#xA;parcel index.html --no-cache --dist-dir dist --log-level info&#xA;Server running at http://localhost:1234&#xA;âœ¨ Built in 1.82s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, this is not fully reproducible and can&#39;t be guaranteed this will work in the future.&lt;/p&gt; &#xA;&lt;p&gt;Without Nix, you need to install &lt;code&gt;yarn&lt;/code&gt; and &lt;code&gt;parcel&lt;/code&gt;, and use &lt;code&gt;yarn&lt;/code&gt; as shown above.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an overview of all the components of the system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/imgs/overview.png&#34; alt=&#34;overview&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dotted lines: Pulsar messages such as commands and events.&lt;/li&gt; &#xA; &lt;li&gt;Bold lines: read and writes from / to external components (Redis, Postgres, etc).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The back-end application is structured as a mono-repo, and it requires both Apache Pulsar and Redis up and running. To make things easier, you can use the provided &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Build JDK image&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;docker-compose&lt;/code&gt; file depends on declared services to be published on the local docker server. All docker builds are handled within the &lt;code&gt;build.sbt&lt;/code&gt; using &lt;code&gt;sbt-native-packager&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build all of the service images, we have a few options.&lt;/p&gt; &#xA;&lt;p&gt;The first one via the given &lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/modules/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker build -t jdk17-curl modules/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The second one via Nix, from where we can build a slim image also based on &lt;code&gt;openjdk:17-slim-buster&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix build .#slimDocker -o result-jre&#xA;$ docker load -i result-jre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The third one also via Nix, though building a layered image based on the same JDK we use for development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix build .#docker -o result-jre&#xA;$ docker load -i result-jre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The main difference between these three options is the resulting image size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker images | rg jdk17&#xA;jdk17-curl                    latest               0ed94a723ce3   10 months ago   422MB&#xA;jdk17-curl-nix                latest               c28f54e42c21   52 years ago    557MB&#xA;jdk17-curl-slim               latest               dbe24e7a7163   52 years ago    465MB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any image is valid. Feel free to pick your preferred method.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: As of September 2022, the Docker image resulting from &lt;code&gt;nix build .#docker&lt;/code&gt; is no longer compatible with &lt;code&gt;sbt-native-packager&lt;/code&gt;, so either go for &lt;code&gt;nix build&lt;/code&gt; (defaults to the slim image) or build it directly via Docker with the given Dockerfile.&lt;/p&gt; &#xA;&lt;h3&gt;Build service images&lt;/h3&gt; &#xA;&lt;p&gt;Once the base &lt;code&gt;jdk17-curl&lt;/code&gt; image has been built, we can proceed with building all our services&#39; images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sbt docker:publishLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run dependencies: Redis, Kafka, etc&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker-compose up -d pulsar redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/imgs/pulsar.png&#34; alt=&#34;pulsar&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run the Kafka Demo (see more below in &lt;a href=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/#x-demo&#34;&gt;X Demo&lt;/a&gt;), &lt;code&gt;kafka.yml&lt;/code&gt; should be used instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker-compose -f kafka.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running application&lt;/h3&gt; &#xA;&lt;p&gt;If we don&#39;t specify any arguments, then all the containers will be started, including all our services (except &lt;code&gt;feed&lt;/code&gt;), Prometheus, Grafana, and Pulsar Manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker-compose up&#xA;Creating network &#34;trading_app&#34; with the default driver&#xA;Creating trading_pulsar_1 ... done&#xA;Creating trading_redis_1  ... done&#xA;Creating trading_ws-server_1      ... done&#xA;Creating trading_pulsar-manager_1 ... done&#xA;Creating trading_alerts_1         ... done&#xA;Creating trading_processor_1      ... done&#xA;Creating trading_snapshots_1      ... done&#xA;Creating trading_forecasts_1      ... done&#xA;Creating trading_tracing_1        ... done&#xA;Creating trading_prometheus_1     ... done&#xA;Creating trading_grafana_1        ... done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended to run the &lt;code&gt;feed&lt;/code&gt; service directly from &lt;code&gt;sbt&lt;/code&gt; whenever necessary, which publishes random data to the topics where other services are consuming messages from.&lt;/p&gt; &#xA;&lt;h2&gt;Services&lt;/h2&gt; &#xA;&lt;p&gt;The back-end application consists of 9 modules, from which 5 are deployable applications, and 3 are just shared modules. There&#39;s also a demo module and a web application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;modules&#xA;â”œâ”€â”€ alerts&#xA;â”œâ”€â”€ core&#xA;â”œâ”€â”€ domain&#xA;â”œâ”€â”€ feed&#xA;â”œâ”€â”€ forecasts&#xA;â”œâ”€â”€ it&#xA;â”œâ”€â”€ lib&#xA;â”œâ”€â”€ processor&#xA;â”œâ”€â”€ snapshots&#xA;â”œâ”€â”€ tracing&#xA;â”œâ”€â”€ ws-client&#xA;â”œâ”€â”€ ws-server&#xA;â”œâ”€â”€ x-demo&#xA;â””â”€â”€ x-qa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/imgs/dev.png&#34; alt=&#34;backend&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Lib&lt;/h3&gt; &#xA;&lt;p&gt;Capability traits such as &lt;code&gt;Logger&lt;/code&gt;, &lt;code&gt;Time&lt;/code&gt;, &lt;code&gt;GenUUID&lt;/code&gt;, and potential library abstractions such as &lt;code&gt;Consumer&lt;/code&gt; and &lt;code&gt;Producer&lt;/code&gt;, which abstract over different implementations such as Kafka and Pulsar.&lt;/p&gt; &#xA;&lt;h3&gt;Domain&lt;/h3&gt; &#xA;&lt;p&gt;Commands, events, state, and all business-related data modeling.&lt;/p&gt; &#xA;&lt;h3&gt;Core&lt;/h3&gt; &#xA;&lt;p&gt;Core functionality that needs to be shared across different modules such as snapshots, &lt;code&gt;AppTopic&lt;/code&gt;, and &lt;code&gt;TradeEngine&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Feed&lt;/h3&gt; &#xA;&lt;p&gt;Generates random &lt;code&gt;TradeCommand&lt;/code&gt;s and &lt;code&gt;ForecastCommand&lt;/code&gt;s followed by publishing them to the corresponding topics. In the absence of real input data, this random feed puts the entire system to work.&lt;/p&gt; &#xA;&lt;h3&gt;Forecasts&lt;/h3&gt; &#xA;&lt;p&gt;Registers new authors and forecasts, while calculating the author&#39;s reputation.&lt;/p&gt; &#xA;&lt;h3&gt;Processor&lt;/h3&gt; &#xA;&lt;p&gt;The brain of the trading application. It consumes &lt;code&gt;TradeCommand&lt;/code&gt;s, processes them to generate a &lt;code&gt;TradeState&lt;/code&gt; and emitting &lt;code&gt;TradeEvent&lt;/code&gt;s via the &lt;code&gt;trading-events&lt;/code&gt; topic.&lt;/p&gt; &#xA;&lt;h3&gt;Snapshots&lt;/h3&gt; &#xA;&lt;p&gt;It consumes &lt;code&gt;TradeEvent&lt;/code&gt;s and recreates the &lt;code&gt;TradeState&lt;/code&gt; that is persisted as a snapshot, running as a single instance in fail-over mode.&lt;/p&gt; &#xA;&lt;h3&gt;Alerts&lt;/h3&gt; &#xA;&lt;p&gt;The alerts engine consumes &lt;code&gt;TradeEvent&lt;/code&gt;s and emits &lt;code&gt;Alert&lt;/code&gt; messages such as &lt;code&gt;Buy&lt;/code&gt;, &lt;code&gt;StrongBuy&lt;/code&gt; or &lt;code&gt;Sell&lt;/code&gt; via the &lt;code&gt;trading-alerts&lt;/code&gt; topic, according to the configured parameters.&lt;/p&gt; &#xA;&lt;h3&gt;WS Server&lt;/h3&gt; &#xA;&lt;p&gt;It consumes &lt;code&gt;Alert&lt;/code&gt; messages and sends them over Web Sockets whenever there&#39;s an active subscription for the alert.&lt;/p&gt; &#xA;&lt;h3&gt;Tracing&lt;/h3&gt; &#xA;&lt;p&gt;A decentralized application that hooks up on multiple topics and creates traces via the Open Tracing protocol, using the Natchez library and Honeycomb.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/imgs/tracer.png&#34; alt=&#34;tracing&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;All unit tests can be executed via &lt;code&gt;sbt test&lt;/code&gt;. There&#39;s also a small suite of integration tests that can be executed via &lt;code&gt;sbt it/test&lt;/code&gt; (it requires Redis to be up).&lt;/p&gt; &#xA;&lt;h3&gt;X Demo&lt;/h3&gt; &#xA;&lt;p&gt;It contains all the standalone examples shown in the book. It also showcases both &lt;code&gt;KafkaDemo&lt;/code&gt; and &lt;code&gt;MemDemo&lt;/code&gt; programs that use the same &lt;code&gt;Consumer&lt;/code&gt; and &lt;code&gt;Producer&lt;/code&gt; abstractions defined in the &lt;code&gt;lib&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;h4&gt;Pulsar CDC&lt;/h4&gt; &#xA;&lt;p&gt;To run the Pulsar CDC Demo, you need Postgres and Pulsar (make sure no other instances are running). Before running them, we need to download the connector NAR file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ mkdir -p pulsarconf/connectors &amp;amp;&amp;amp; cd pulsarconf/connectors&#xA;$ wget https://archive.apache.org/dist/pulsar/pulsar-2.10.1/connectors/pulsar-io-debezium-postgres-2.10.1.nar&#xA;$ docker-compose -f pulsar-cdc.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once both instances are up and healthy, we can run the Pulsar Debezium connector.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker-compose exec -T pulsar bin/pulsar-admin source localrun --source-config-file /pulsar/conf/debezium-pg.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see this in the logs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Snapshot step 3 - Locking captured tables [public.authors]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;X QA&lt;/h3&gt; &#xA;&lt;p&gt;It contains the &lt;code&gt;smokey&lt;/code&gt; project that models the smoke test for trading.&lt;/p&gt; &#xA;&lt;h2&gt;Monitoring&lt;/h2&gt; &#xA;&lt;p&gt;JVM stats are provided for every service via Prometheus and Grafana.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gvolpe/trading/main/imgs/grafana.png&#34; alt=&#34;grafana&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Topic compaction&lt;/h2&gt; &#xA;&lt;p&gt;Two Pulsar topics can be compacted to speed-up reads on startup, corresponding to &lt;code&gt;Alert&lt;/code&gt; and &lt;code&gt;TradeEvent.Switch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To compact a topic on demand (useful for manual testing), run these commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker-compose exec pulsar bin/pulsar-admin topics compact persistent://public/default/trading-alerts&#xA;Topic compaction requested for persistent://public/default/trading-alerts.&#xA;$ docker-compose exec pulsar bin/pulsar-admin topics compact persistent://public/default/trading-switch-events&#xA;Topic compaction requested for persistent://public/default/trading-switch-events&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In production, one would configure topic compaction to be triggered automatically at the namespace level when certain threshold is reached. For example, to trigger compaction when the backlog reaches 10MB:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker-compose exec pulsar bin/pulsar-admin namespaces set-compaction-threshold --threshold 10M public/default&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>