<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-12T01:41:17Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wassemgtk/llm.scala</title>
    <updated>2024-04-12T01:41:17Z</updated>
    <id>tag:github.com,2024-04-12:/wassemgtk/llm.scala</id>
    <link href="https://github.com/wassemgtk/llm.scala" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extensible implementation of a Language Model (LLM) training framework in Scala.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LLM Training in Scala&lt;/h1&gt; &#xA;&lt;p&gt;This project is an implementation of a Language Model (LLM) training framework in Scala. It provides a set of modules and utilities for building, training, and evaluating language models using the transformer architecture.&lt;/p&gt; &#xA;&lt;p&gt;Inspired by the &lt;a href=&#34;https://github.com/karpathy/llm.c&#34;&gt;llm.c&lt;/a&gt; project, this Scala version aims to provide a clean, efficient, and extensible codebase for training language models.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Transformer-based language model architecture&lt;/li&gt; &#xA; &lt;li&gt;Multi-head self-attention mechanism&lt;/li&gt; &#xA; &lt;li&gt;Positional encoding for sequence information&lt;/li&gt; &#xA; &lt;li&gt;Feed-forward neural network layers&lt;/li&gt; &#xA; &lt;li&gt;Embedding layer for input tokens&lt;/li&gt; &#xA; &lt;li&gt;Layer normalization for stable training&lt;/li&gt; &#xA; &lt;li&gt;GELU activation function&lt;/li&gt; &#xA; &lt;li&gt;Adam optimizer for parameter updates&lt;/li&gt; &#xA; &lt;li&gt;Data loading and batching utilities&lt;/li&gt; &#xA; &lt;li&gt;Tokenization and vocabulary handling&lt;/li&gt; &#xA; &lt;li&gt;Test suite for all modules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;p&gt;The project follows a standard Scala project structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;llm-training/&#xA;  ├── build.sbt&#xA;  └── src/&#xA;      ├── main/&#xA;      │   └── scala/&#xA;      │       └── llm/&#xA;      │           ├── Config.scala&#xA;      │           ├── Model.scala&#xA;      │           ├── Attention.scala&#xA;      │           ├── LayerNorm.scala&#xA;      │           ├── GELU.scala&#xA;      │           ├── Embedding.scala&#xA;      │           ├── PositionalEncoding.scala&#xA;      │           ├── FeedForward.scala&#xA;      │           ├── Transformer.scala&#xA;      │           ├── Optimizer.scala&#xA;      │           ├── DataLoader.scala&#xA;      │           ├── Tokenizer.scala&#xA;      │           ├── Utils.scala&#xA;      │           └── Main.scala&#xA;      └── test/&#xA;          └── scala/&#xA;              └── llm/&#xA;                  ├── ModelSpec.scala&#xA;                  ├── AttentionSpec.scala&#xA;                  ├── LayerNormSpec.scala&#xA;                  ├── GELUSpec.scala&#xA;                  ├── EmbeddingSpec.scala&#xA;                  ├── PositionalEncodingSpec.scala&#xA;                  ├── FeedForwardSpec.scala&#xA;                  ├── TransformerSpec.scala&#xA;                  ├── OptimizerSpec.scala&#xA;                  ├── DataLoaderSpec.scala&#xA;                  ├── TokenizerSpec.scala&#xA;                  └── UtilsSpec.scala&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;src/main/scala/llm/&lt;/code&gt;: Contains the main source code for the language model implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/test/scala/llm/&lt;/code&gt;: Contains the test specifications for each module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build.sbt&lt;/code&gt;: The build configuration file for the Scala project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;project/&lt;/code&gt;: Contains the sbt version and plugin configuration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scala 2.13.8&lt;/li&gt; &#xA; &lt;li&gt;sbt 1.5.5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/wassemgtk/llm.scala.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the project directory:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd llm-training&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile the project:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sbt compile&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Training&lt;/h3&gt; &#xA;&lt;p&gt;To train the language model, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Prepare your training data:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Place your training data file (e.g., &lt;code&gt;tiny_shakespeare_train.bin&lt;/code&gt;) in the &lt;code&gt;data/&lt;/code&gt; directory.&lt;/li&gt; &#xA;   &lt;li&gt;Update the &lt;code&gt;dataFile&lt;/code&gt; value in &lt;code&gt;Main.scala&lt;/code&gt; to point to your training data file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure the model hyperparameters in the &lt;code&gt;Config&lt;/code&gt; case class in &lt;code&gt;Config.scala&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the training script:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sbt run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Monitor the training progress and metrics logged to the console.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Text Generation&lt;/h3&gt; &#xA;&lt;p&gt;To generate text using a trained model, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you have a trained model checkpoint in the &lt;code&gt;checkpoints/&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;modelCheckpoint&lt;/code&gt; value in &lt;code&gt;Main.scala&lt;/code&gt; to point to your trained model checkpoint file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the desired generation parameters (e.g., &lt;code&gt;maxNewTokens&lt;/code&gt;, &lt;code&gt;temperature&lt;/code&gt;) in the &lt;code&gt;Main&lt;/code&gt; object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the text generation script:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sbt run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The generated text will be printed to the console.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;To run the test suite and ensure the correctness of the implemented modules, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will execute all the test specifications in the &lt;code&gt;src/test/scala/llm/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Config&lt;/code&gt; case class in &lt;code&gt;src/main/scala/llm/Config.scala&lt;/code&gt; contains the hyperparameters and configuration settings for the language model. You can modify these values to experiment with different model architectures and training setups.&lt;/p&gt; &#xA;&lt;h2&gt;Model Checkpointing&lt;/h2&gt; &#xA;&lt;p&gt;During training, the model checkpoints will be saved in the &lt;code&gt;checkpoints/&lt;/code&gt; directory. You can use these checkpoints to resume training from a previous state or to generate text using a trained model.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;The project uses the Logback logging library for logging purposes. You can configure the logging settings in the &lt;code&gt;src/main/resources/logback.xml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to this project are welcome! If you find any issues or have suggestions for improvements, please open an issue or submit a pull request on the GitHub repository.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/wassemgtk/llm.scala/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This project is inspired by the &lt;a href=&#34;https://github.com/karpathy/llm.c&#34;&gt;llm.c&lt;/a&gt; project by Andrej Karpathy.&lt;/li&gt; &#xA; &lt;li&gt;The transformer architecture is based on the paper &#34;Attention Is All You Need&#34; by Vaswani et al.&lt;/li&gt; &#xA; &lt;li&gt;The implementation draws inspiration from various open-source language model implementations in the Scala ecosystem.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hyperledger/identus</title>
    <updated>2024-04-12T01:41:17Z</updated>
    <id>tag:github.com,2024-04-12:/hyperledger/identus</id>
    <link href="https://github.com/hyperledger/identus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Enterprise Cloud Agent&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://atalaprism.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hyperledger/identus/main/docs/images/logos/atala-prism-logo.png&#34; alt=&#34;atala-prism-logo&#34; width=&#34;513px&#34; height=&#34;99px&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;i&gt; &lt;font size=&#34;18&#34;&gt; Open Enterprise Cloud Agent &lt;/font&gt; &lt;/i&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://coveralls.io/github/input-output-hk/atala-prism-building-blocks?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/input-output-hk/atala-prism-building-blocks/badge.svg?branch=main&amp;amp;t=91BUzX&amp;amp;kill_cache=1&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/atala-prism-building-blocks/actions/workflows/unit-tests.yml&#34;&gt; &lt;img src=&#34;https://github.com/input-output-hk/atala-prism-building-blocks/actions/workflows/unit-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit tests&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/atala-prism-building-blocks/actions/workflows/integration-tests.yml&#34;&gt; &lt;img src=&#34;https://github.com/input-output-hk/atala-prism-building-blocks/actions/workflows/integration-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;End-to-end tests&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/atala-prism-building-blocks/actions/workflows/performance-tests.yml&#34;&gt; &lt;img src=&#34;https://github.com/input-output-hk/atala-prism-building-blocks/actions/workflows/performance-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Performance tests&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The Enterprise Cloud Agent is a W3C/Aries standards-based cloud agent written in Scala that provides self-sovereign identity services to build products and solutions based on it. The term &#34;cloud&#34; indicates that it operates on servers and is not intended for use on mobile devices.&lt;/p&gt; &#xA;&lt;p&gt;Enterprise Cloud Agent supports standard-based protocols built on top of DIDComm V2 for issuing, verifying, and holding verifiable credentials using both JWT and Hyperledger AnonCreds (coming soon) formats.&lt;/p&gt; &#xA;&lt;p&gt;In order to use the Cloud Agent, you establish a business logic controller responsible for communicating with the agent (initiating HTTP requests and processing webhook notifications). This controller can be created using any programming language capable of sending and receiving HTTP requests.&lt;/p&gt; &#xA;&lt;p&gt;As a result, you can concentrate on crafting self-sovereign identity solutions using well-known web development tools, without the need to delve into the intricacies of lower-level cryptography and identity protocol internals.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rest API&lt;/li&gt; &#xA; &lt;li&gt;DIDComm V2&lt;/li&gt; &#xA; &lt;li&gt;W3C-compliant &lt;code&gt;did:prism&lt;/code&gt; and &lt;code&gt;did:peer&lt;/code&gt; methods&lt;/li&gt; &#xA; &lt;li&gt;Credential types &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JWT&lt;/li&gt; &#xA;   &lt;li&gt;AnonCreds (coming soon)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;HTTP events notification&lt;/li&gt; &#xA; &lt;li&gt;Cardano as a distributed ledger&lt;/li&gt; &#xA; &lt;li&gt;Secrets management with Hashicorp vault&lt;/li&gt; &#xA; &lt;li&gt;Multi-tenancy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example use cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A government issues verifiable credentials (VCs) to its citizens to prove their identity and access government services.&lt;/li&gt; &#xA; &lt;li&gt;An enterprise issues VCs to its employees to prove their employment and access enterprise services.&lt;/li&gt; &#xA; &lt;li&gt;A Web3 authentication service based on verifiable presentations (VPs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Understanding SSI&lt;/h3&gt; &#xA;&lt;p&gt;Before starting to use the Cloud Agent, it is important to understand the basic concepts of self-sovereign identity (SSI). The following resources provide a good introduction to SSI:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atalaprism.io/docs/category/concepts/&#34;&gt;Atala PRISM SSI introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.edx.org/learn/computer-programming/the-linux-foundation-getting-started-with-self-sovereign-identity&#34;&gt;Linux Foundation Course: Getting Started with SSI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Architecture&lt;/h3&gt; &#xA;&lt;p&gt;The next diagram offers a concise architectural overview, depicting a Cloud Agent instance, a controller, the interconnections linking the controller and agent, as well as the external routes to other agents and public ledgers across the Internet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hyperledger/identus/main/docs/images/cloud-agent-architecture-dark.png#gh-dark-mode-only&#34; alt=&#34;Enterprise Cloud Agent architecture&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hyperledger/identus/main/docs/images/cloud-agent-architecture-light.png#gh-light-mode-only&#34; alt=&#34;Enterprise Cloud Agent architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running the Cloud Agent locally on MacOS or Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java (OpenJDK 21)&lt;/li&gt; &#xA; &lt;li&gt;SBT (latest version)&lt;/li&gt; &#xA; &lt;li&gt;Git (for cloning the repository)&lt;/li&gt; &#xA; &lt;li&gt;Docker (for running the PostgreSQL database, Hashicorp Vault, APISIX, and PRISM Node)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens&#34;&gt;GITHUB_TOKEN&lt;/a&gt; environment variable (required for SBT plugins and access to the GitHub packages)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Login to GitHub packages&lt;/h4&gt; &#xA;&lt;p&gt;To login to GitHub packages, you need to create a personal access token and set it as an environment variable together with your GitHub username. Here is an example of how you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export GITHUB_TOKEN=your-personal-access-token&#xA;export GITHUB_USER=your-github-username&#xA;docker login ghcr.io -u $GITHUB_USER -p $GITHUB_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Compile, Test, create the docker image of the Cloud Agent&lt;/h4&gt; &#xA;&lt;p&gt;To compile, test and publish local the image of the Cloud Agent, you can use the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt clean compile test docker:publishLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation and usage&lt;/h3&gt; &#xA;&lt;p&gt;Enterprise Cloud Agent is distributed as a Docker image to be run in a containerized environment. All versions can be found &lt;a href=&#34;https://github.com/orgs/input-output-hk/packages/container/package/prism-agent&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following sections describe how to run the Enterprise Cloud Agent in different configurations.&lt;/p&gt; &#xA;&lt;h4&gt;Configuration&lt;/h4&gt; &#xA;&lt;p&gt;The Enterprise Cloud Agent can be configured to use different types of ledger, secret storage and DID persistence. Any combination of options is available, but the most common configurations are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Configuration&lt;/th&gt; &#xA;   &lt;th&gt;Secret Storage&lt;/th&gt; &#xA;   &lt;th&gt;DIDs persistence&lt;/th&gt; &#xA;   &lt;th&gt;VDR&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dev&lt;/td&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;In-memory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pre-production&lt;/td&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Cardano testnet (preview or preprod)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Production&lt;/td&gt; &#xA;   &lt;td&gt;Hashicorp&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Cardano mainnet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To start playing with Cloud Agent, we recommend using the Dev configuration. Pre-production and production configurations are intended for real-world use cases and require additional more complex configurations of the Cardano stack setup.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you&#39;re interested in a hosted version of Enterprise Cloud Agent, please, contact us at &lt;a href=&#34;https://atalaprism.io&#34;&gt;atalaprism.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;System requirements&lt;/h4&gt; &#xA;&lt;p&gt;System requirements can vary depending on the use case. The following are the minimum requirements for running the Cloud Agent with the Dev configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux or MacOS operating system&lt;/li&gt; &#xA; &lt;li&gt;Docker (with docker-compose support)&lt;/li&gt; &#xA; &lt;li&gt;Modern x86 or ARM-based CPU&lt;/li&gt; &#xA; &lt;li&gt;&amp;gt;=2GB RAM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Running locally in demo mode&lt;/h4&gt; &#xA;&lt;p&gt;Here is a general example of running a Cloud Agent locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PORT=${PORT} PRISM_AGENT_VERSION=${PRISM_AGENT_VERSION} PRISM_NODE_VERSION=${PRISM_NODE_VERSION} \&#xA;  docker compose \&#xA;    -p &#34;${AGENT_ROLE}&#34; \&#xA;    -f ./infrastructure/shared/docker-compose-demo.yml \&#xA;    up --wait&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;PORT&lt;/code&gt; variable is used to specify the port number for the Cloud Agent to listen on. The &lt;code&gt;PRISM_AGENT_VERSION&lt;/code&gt; and &lt;code&gt;PRISM_NODE_VERSION&lt;/code&gt; variables are used to specify the versions of the Cloud Agent and PRISM Node to use. The &lt;code&gt;AGENT_ROLE&lt;/code&gt; variable is used to specify the role of the Cloud Agent. The &lt;code&gt;AGENT_ROLE&lt;/code&gt; variable can be set to &lt;code&gt;issuer&lt;/code&gt;, &lt;code&gt;verifier&lt;/code&gt; or &lt;code&gt;holder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In real life, you will need to start at least two Cloud Agent instances with different roles. For example, you can start one instance with the &lt;code&gt;issuer&lt;/code&gt; role and another one with the &lt;code&gt;holder&lt;/code&gt; role. The &lt;code&gt;issuer&lt;/code&gt; instance will be used to issue verifiable credentials (VCs) and the &lt;code&gt;holder&lt;/code&gt; instance will be used to hold VCs. Here is an example of how you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PORT=8080 PRISM_AGENT_VERSION=${PRISM_AGENT_VERSION} PRISM_NODE_VERSION=2.2.1 \&#xA;  docker compose \&#xA;    -p &#34;issuer&#34; \&#xA;    -f ./infrastructure/shared/docker-compose-demo.yml \&#xA;    up --wait&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PORT=8090 PRISM_AGENT_VERSION=${PRISM_AGENT_VERSION} PRISM_NODE_VERSION=2.2.1 \&#xA;  docker compose \&#xA;    -p &#34;holder&#34; \&#xA;    -f ./infrastructure/shared/docker-compose-demo.yml \&#xA;    up --wait&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the Cloud Agent is started successfully, all the running containers should achieve &lt;code&gt;Healthy&lt;/code&gt; state, and Cloud Agent Rest API should be available at the specified port, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;http://localhost:8080/prism-agent&lt;/code&gt; for the &lt;code&gt;issuer&lt;/code&gt; instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://localhost:8090/prism-agent&lt;/code&gt; for the &lt;code&gt;holder&lt;/code&gt; instance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can check the status of the running containers using the &lt;a href=&#34;https://docs.atalaprism.io/agent-api/#tag/System/operation/systemHealth&#34;&gt;health endpoint&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://localhost:8080/prism-agent/_system/health&#xA;{&#34;version&#34;:&#34;1.19.1&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For more information about all available configuration parameters, please, check &lt;a href=&#34;https://docs.atalaprism.io/docs/atala-prism/prism-cloud-agent/environment-variables&#34;&gt;Cloud Agent configuration&lt;/a&gt; section at the documentation portal and edit the &lt;code&gt;docker-compose-demo.yml&lt;/code&gt; file accordingly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Compatibility between Cloud Agent and PRISM Node&lt;/h4&gt; &#xA;&lt;p&gt;There could be some incompatibilities between the most latest versions of Enterprise Cloud Agent and PRISM Node. Please, use the following table to check the compatibility between the versions:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Cloud Agent&lt;/th&gt; &#xA;   &lt;th&gt;PRISM Node&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;=1.9.2&lt;/td&gt; &#xA;   &lt;td&gt;2.2.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;1.9.2&lt;/td&gt; &#xA;   &lt;td&gt;2.1.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note: it is not guaranteed that the latest version of Enterprise Cloud Agent will work with the latest version of PRISM Node. We recommend using the versions from the table above.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Following the Enterprise Cloud Agent tutorials&lt;/h3&gt; &#xA;&lt;p&gt;The following tutorials will help you get started with the Cloud Agent and issue your first credentials:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atalaprism.io/tutorials/category/dids/&#34;&gt;Creating, updating and deactivating Decentralized Identifiers (DIDs)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atalaprism.io/tutorials/connections/connection&#34;&gt;Setting up connections between agents using out-of-band (OOB) protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atalaprism.io/tutorials/credentials/issue&#34;&gt;Issuing verifiable credentials (VCs)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atalaprism.io/tutorials/credentials/present-proof&#34;&gt;Presenting VC proofs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;User documentation&lt;/h2&gt; &#xA;&lt;p&gt;All extended documentation, tutorials and API references for the PRISM ecosystem can be found at &lt;a href=&#34;https://docs.atalaprism.io/&#34;&gt;https://docs.atalaprism.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://raw.githubusercontent.com/hyperledger/identus/main/CONTRIBUTING.md&#34;&gt;contributions guidelines&lt;/a&gt; and submit your PRs. We enforce &lt;a href=&#34;https://raw.githubusercontent.com/hyperledger/identus/main/DCO.md&#34;&gt;developer certificate of origin (DCO) commit signing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We also welcome issues submitted about problems you encounter in using Enterprise Cloud Agent.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hyperledger/identus/main/LICENSE&#34;&gt;Apache License Version 2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Love the repo? Give our repo a star &lt;span&gt;⭐&lt;/span&gt; &lt;span&gt;⬆&lt;/span&gt;.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>polomarcus/tp</title>
    <updated>2024-04-12T01:41:17Z</updated>
    <id>tag:github.com,2024-04-12:/polomarcus/tp</id>
    <link href="https://github.com/polomarcus/tp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Practical work&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/polomarcus/tp/tree/main/data-engineering&#34;&gt;Data engineering / distributed systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/polomarcus/tp/tree/main/ecodesign&#34;&gt;Ecodesign&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tools you need&lt;/h2&gt; &#xA;&lt;p&gt;Have a stackoverflow account : &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;https://stackoverflow.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Have a github account : &lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;A Scala IDE :&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the IDE &#34;Intellij Idea&#34;: &lt;a href=&#34;https://www.jetbrains.com/fr-fr/idea/download&#34;&gt;https://www.jetbrains.com/fr-fr/idea/download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/fr/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo&#34;&gt;Fork this repo&lt;/a&gt; to have your own copy.&lt;/li&gt; &#xA; &lt;li&gt;Clone your fork on your machine&lt;/li&gt; &#xA; &lt;li&gt;Open Intellij, go to &#34;File&#34; then &#34;Open&#34; and then only select the folder of the current exercice from your fork clone on your computer. Then, on IntelliJ &lt;a href=&#34;https://www.jetbrains.com/help/idea/sdk.html&#34;&gt;set up the scala SDK and JDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Beware&lt;/strong&gt; : For Spark code, we have to use &lt;strong&gt;Java 17&lt;/strong&gt; (JDK17) or inferior, otherwise you&#39;ll have &lt;a href=&#34;https://stackoverflow.com/a/73349341/3535853&#34;&gt;this error&lt;/a&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Extracting Structure Failed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker and Compose&lt;/h3&gt; &#xA;&lt;p&gt;Take time to read and install&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/get-started/overview/&#34;&gt;https://docs.docker.com/get-started/overview/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker --version&#xA;Docker version XX.XX.XX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;https://docs.docker.com/compose/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose --version # Or docker compose --version&#xA;docker-compose version X.XX.X&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fork OR update the repo on your own Github account&lt;/h3&gt; &#xA;&lt;h4&gt;Fork&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click on &lt;a href=&#34;https://github.com/polomarcus/tp/fork&#34;&gt;https://github.com/polomarcus/tp/fork&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Update your fork&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork&#34;&gt;https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>