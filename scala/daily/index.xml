<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-20T01:37:25Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>twitter/bijection</title>
    <updated>2022-11-20T01:37:25Z</updated>
    <id>tag:github.com,2022-11-20:/twitter/bijection</id>
    <link href="https://github.com/twitter/bijection" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reversible conversions between types&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Bijection&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/twitter/bijection&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/twitter/bijection.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/twitter/bijection&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/twitter/bijection.svg?maxAge=2592000&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://index.scala-lang.org/twitter/bijection/bijection-core&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/twitter/bijection/bijection-core/latest.svg?color=orange&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/twitter/bijection?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/twitter/bijection.svg?sanitize=true&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Bijection is an invertible function that converts back and forth between two types, with the contract that a round-trip through the Bijection will bring back the original object. Moreover, the inverse has the same property.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://twitter.github.com/bijection&#34;&gt;current API documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Examples:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;&amp;gt; ./sbt bijection-core/console&#xA;scala&amp;gt; import com.twitter.bijection._&#xA;scala&amp;gt; Bijection[Int, java.lang.Integer](42)&#xA;res0: java.lang.Integer = 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to Bijection, we have Injection. An Injection embeds a type A in a larger space of type B. Every item from A can be round-tripped through B, but not every B can be mapped to A. So Injection is like a pair of function: &lt;code&gt;A =&amp;gt; B, B =&amp;gt; Try[A]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.bijection._&#xA;&#xA;scala&amp;gt; Injection[Int, String](100)&#xA;res0: String = 100&#xA;&#xA;scala&amp;gt; Injection.invert[Int, String](res0)&#xA;res1: Try[Int] = Success(100)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we want to treat an Injection like a Bijection (over a restricted subspace of the larger set), we use the &lt;code&gt;B @@ Rep[A]&lt;/code&gt; syntax, for instance: &lt;code&gt;String @@ Rep[Int]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Bijection[Int, String @@ Rep[Int]](100)&#xA;res2: com.twitter.bijection.package.@@[String,com.twitter.bijection.Rep[Int]] = 100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;invert&lt;/code&gt; to reverse the transformation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; Bijection.invert[Int, String @@ Rep[Int]](res2)&#xA;res3: Int = 100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you &lt;code&gt;import Conversion.asMethod&lt;/code&gt; you can use &lt;code&gt;.as[T]&lt;/code&gt; to use an available Bijection/Injection to &lt;code&gt;T&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import com.twitter.bijection.Conversion.asMethod&#xA;import com.twitter.bijection.Conversion.asMethod&#xA;&#xA;scala&amp;gt; 1.as[java.lang.Integer]&#xA;res6: java.lang.Integer = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bijections and Injections can also be composed. As with functions, &lt;code&gt;andThen&lt;/code&gt; composes forward, &lt;code&gt;compose&lt;/code&gt; composes backward.&lt;/p&gt; &#xA;&lt;p&gt;This example round-trips a long into a GZipped base64-encoded string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; val injection = Injection.long2BigEndian andThen Bijection.bytes2GZippedBase64&#xA;injection: com.twitter.bijection.Injection[Long,Array[Byte]] = &amp;lt;function1&amp;gt;&#xA;&#xA;scala&amp;gt; injection(123456789L)&#xA;res1: com.twitter.bijection.GZippedBase64String = GZippedBase64String(H4sIAAAAAAAAAGNgYGBgjz4rCgBpa5WLCAAAAA==)&#xA;&#xA;scala&amp;gt; injection.invert(res1)&#xA;res2: Try[Long] = Success(123456789)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you have bijections between a path of items you can &lt;code&gt;Bijection.connect&lt;/code&gt; or &lt;code&gt;Injection.connect&lt;/code&gt; them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import com.twitter.bijection.Injection.connect&#xA;import com.twitter.bijection.Injection.connect&#xA;&#xA;scala&amp;gt; import com.twitter.bijection.Base64String&#xA;import com.twitter.bijection.Base64String&#xA;&#xA;scala&amp;gt; import Conversion.asMethod&#xA;import Conversion.asMethod&#xA;&#xA;scala&amp;gt; implicit val long2String2Bytes2B64 = connect[Long,String,Array[Byte],Base64String]&#xA;string2Long2Bytes2B64: com.twitter.bijection.Bijection[String,com.twitter.bijection.Base64String] = &amp;lt;function1&amp;gt;&#xA;&#xA;scala&amp;gt; 243L.as[Base64String]&#xA;res0: com.twitter.bijection.Base64String = Base64String(MjQz)&#xA;&#xA;scala&amp;gt; long2String2Bytes2B64.invert(res0)&#xA;res1: Try[Long] = Success(243)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Bijections/Injections&lt;/h2&gt; &#xA;&lt;p&gt;Bijection implicitly supplies Bijections between:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;all numeric types &amp;lt;-&amp;gt; their boxed java counterparts&lt;/li&gt; &#xA; &lt;li&gt;containers/primitives &amp;lt;-&amp;gt; Json (Injections via bijection-json)&lt;/li&gt; &#xA; &lt;li&gt;thrift/protobuf/avro &amp;lt;-&amp;gt; &lt;code&gt;Array[Byte]&lt;/code&gt; (Injections via bijection-protobuf/bijection-thrift/bijection-avro)&lt;/li&gt; &#xA; &lt;li&gt;all numeric types &amp;lt;-&amp;gt; big-endian &lt;code&gt;Array[Byte]&lt;/code&gt; encodings (Injections)&lt;/li&gt; &#xA; &lt;li&gt;all numeric types &amp;lt;-&amp;gt; String (Injections)&lt;/li&gt; &#xA; &lt;li&gt;Bijections for all &lt;code&gt;asScala&lt;/code&gt;, &lt;code&gt;asJava&lt;/code&gt; pairs provided by &lt;a href=&#34;http://www.scala-lang.org/api/current/scala/collection/JavaConverters$.html&#34;&gt;scala.collection.JavaConverters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;String &amp;lt;-&amp;gt; utf8 encoded bytes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array[Byte]&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;GZippedBytes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array[Byte]&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;Base64String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array[Byte]&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;GZippedBase64String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array[Byte]&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;java.nio.ByteBuffer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Class[T]&lt;/code&gt; &amp;lt;-&amp;gt; String (Injection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A =&amp;gt; B&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;C =&amp;gt; D&lt;/code&gt; (function conversion)&lt;/li&gt; &#xA; &lt;li&gt;Bijection/Injection builders for all tuples. (&lt;code&gt;(String,Int)&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;(Array[Byte], java.lang.Integer)&lt;/code&gt; is built automatically, for example.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally there is a method to generate Bijections between most of Scala&#39;s built in types: &lt;code&gt;Bijection.toContainer[Int,String,List[Int],Vector[String]&lt;/code&gt; returns &lt;code&gt;Bijection[List[Int], Vector[String]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you see a reversible conversion that is not here and related to types in the standard library of Java or Scala, please contribute!&lt;/p&gt; &#xA;&lt;h2&gt;Serialization via Bufferable&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Bufferable[T]&lt;/code&gt; handles putting and getting a type &lt;code&gt;T&lt;/code&gt; into a ByteBuffer in a composable way. &lt;code&gt;Bufferable[T]&lt;/code&gt; instances for all primitives/tuples/containers are provided. Bijections and Injections to any of these types give you binary serialization via Bufferable.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To learn more and find links to tutorials and information around the web, check out the &lt;a href=&#34;https://github.com/twitter/bijection/wiki&#34;&gt;Bijection Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The latest ScalaDocs are hosted on Bijection&#39;s &lt;a href=&#34;http://twitter.github.io/bijection&#34;&gt;Github Project Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Involved + Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests and bug reports are always welcome!&lt;/p&gt; &#xA;&lt;p&gt;Discussion occurs primarily on the &lt;a href=&#34;https://groups.google.com/forum/#!forum/bijection&#34;&gt;Bijection mailing list&lt;/a&gt;. Issues should be reported on the &lt;a href=&#34;https://github.com/twitter/bijection/issues&#34;&gt;GitHub issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We use a lightweight form of project governence inspired by the one used by Apache projects. Please see &lt;a href=&#34;https://github.com/twitter/analytics-infra-governance#contributing-and-committership&#34;&gt;Contributing and Committership&lt;/a&gt; for our code of conduct and our pull request review process. The TL;DR is send us a pull request, iterate on the feedback + discussion, and get a +1 from a &lt;a href=&#34;https://raw.githubusercontent.com/twitter/bijection/develop/COMMITTERS.md&#34;&gt;Committer&lt;/a&gt; in order to get your PR accepted.&lt;/p&gt; &#xA;&lt;p&gt;The current list of active committers (who can +1 a pull request) can be found here: &lt;a href=&#34;https://raw.githubusercontent.com/twitter/bijection/develop/COMMITTERS.md&#34;&gt;Committers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A list of contributors to the project can be found here: &lt;a href=&#34;https://github.com/twitter/bijection/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Maven&lt;/h2&gt; &#xA;&lt;p&gt;Bijection modules are available on maven central. The current groupid and version for all modules is, respectively, &lt;code&gt;&#34;com.twitter&#34;&lt;/code&gt; and &lt;code&gt;0.9.7&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Current published artifacts are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bijection-core&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bijection-protobuf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bijection-thrift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bijection-guava&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bijection-scrooge&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bijection-json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bijection-util&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bijection-clojure&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bijection-netty&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bijection-avro&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bijection-hbase&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every artifact is published against Scala &lt;code&gt;&#34;2.11&#34;&lt;/code&gt;, &lt;code&gt;&#34;2.12&#34;&lt;/code&gt; and &lt;code&gt;&#34;2.13&#34;&lt;/code&gt;. To pull in the jars, make sure to add your desired scala version as a suffix, ie:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bijection-core_2.11&lt;/code&gt; or &lt;code&gt;bijection-core_2.12&lt;/code&gt; or &lt;code&gt;bijection-core_2.13&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Chat&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/twitter/bijection?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/twitter/bijection.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Oscar Boykin &lt;a href=&#34;http://twitter.com/posco&#34;&gt;http://twitter.com/posco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Marius Eriksen &lt;a href=&#34;http://twitter.com/marius&#34;&gt;http://twitter.com/marius&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sam Ritchie &lt;a href=&#34;http://twitter.com/sritchie&#34;&gt;http://twitter.com/sritchie&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2012 Twitter, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0: &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>