<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-30T01:38:22Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>creativescala/krop</title>
    <updated>2023-09-30T01:38:22Z</updated>
    <id>tag:github.com,2023-09-30:/creativescala/krop</id>
    <link href="https://github.com/creativescala/krop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and functional web service library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Krop&lt;/h1&gt; &#xA;&lt;p&gt;A compositional web service library that is easy to use. Let a thousand websites bloom.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://creativescala.org/krop&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;This is an experiment to see if &lt;code&gt;http4s&lt;/code&gt; can be made easy to use. The goal is to have an amazing developer experience while keeping the core practices of functional programming that are currently embodied by &lt;code&gt;http4s&lt;/code&gt;: compositionality and abstraction.&lt;/p&gt; &#xA;&lt;p&gt;Key points:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Single import to access all functionality&lt;/li&gt; &#xA; &lt;li&gt;Default to &lt;code&gt;IO&lt;/code&gt; and hide it&#39;s usage as far as possible. Tagless final is pointless ceremony for most applications.&lt;/li&gt; &#xA; &lt;li&gt;Wrap generic types like &lt;code&gt;Kleisli&lt;/code&gt; so that only domain specific functionality is exposed.&lt;/li&gt; &#xA; &lt;li&gt;Default routing DSL that is discoverable (i.e. not using pattern matching).&lt;/li&gt; &#xA; &lt;li&gt;Make very simple things, like creating mostly static sites, very easy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As an example of what we&#39;re aiming for, take a look at &lt;a href=&#34;https://www.phoenixframework.org/&#34;&gt;the Phoenix framework&lt;/a&gt;. Elixir is not a popular language but this framework has outstanding documentation and a well defined story for every common use case.&lt;/p&gt;</summary>
  </entry>
</feed>