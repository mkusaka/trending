<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-06T01:38:10Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>polentino/redacted</title>
    <updated>2024-04-06T01:38:10Z</updated>
    <id>tag:github.com,2024-04-06:/polentino/redacted</id>
    <link href="https://github.com/polentino/redacted" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prevents leaking sensitive fields defined inside `case class`&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/polentino/redacted/workflows/Scala%20CI/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/polentino/redacted?sort=semver&amp;amp;label=Latest%20Tag&amp;amp;color=limegreen&#34; alt=&#34;GitHub Tag&#34;&gt; &lt;img src=&#34;https://img.shields.io/nexus/r/io.github.polentino/redacted_3.1.3?server=https%3A%2F%2Fs01.oss.sonatype.org&amp;amp;label=Sonatype%20-%20redacted&amp;amp;color=blue&#34; alt=&#34;Sonatype Nexus (Releases)&#34;&gt; &lt;img src=&#34;https://img.shields.io/nexus/r/io.github.polentino/redacted-plugin_3.1.3?server=https%3A%2F%2Fs01.oss.sonatype.org&amp;amp;label=Sonatype%20-%20redacted%20plugin&amp;amp;color=blue&#34; alt=&#34;Sonatype Nexus (Releases)&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Redacted&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Prevents leaking sensitive fields defined inside &lt;code&gt;case class&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/polentino/redacted/main/images/redacted-example.png&#34; alt=&#34;Simple example of @redacted usage&#34; title=&#34;Sample usage&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In Scala, &lt;code&gt;case class&lt;/code&gt;(es) are omnipresent: they are the building blocks for complex business domain models, due to how easily they can be defined and instantiated; on top of that, the Scala compiler provides a convenient &lt;code&gt;toString&lt;/code&gt; method for us that will pretty print in console/log their content, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class UserPreferences(useDarkTheme: Boolean, maxHistoryItems: Int)&#xA;&#xA;val id = 123&#xA;val up = store.getUserPreferencesByID(123)&#xA;log.info(s&#34;user preferences for user $id are $up&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will print&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;user preferences for user 123 are UserPreferences(true, 5)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;However, this becomes a double-edge sword when handling sensitive data: assume you&#39;re writing an HTTP server, and you have a case class to pass its headers around, i.e.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class HttpHeaders(userId: String, apiKey: String, languages: Seq[Locale], correlationId: String)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or a case class representing a user in a DB&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class User(id: UUID, nickname: String, email: String)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you probably wouldn&#39;t want to leak by mistake an &lt;code&gt;apiKey&lt;/code&gt; (for security reasons) or an &lt;code&gt;email&lt;/code&gt; (for PII/GDPR reasons).&lt;/p&gt; &#xA;&lt;p&gt;Sure, you can get creative and define middleware layers/utility methods and so on to circumvent the issue, but wouldn&#39;t it be better if you were simply to say &#34;when I dump &lt;strong&gt;the whole object&lt;/strong&gt;, I don&#39;t want this field to be printed out&#34; ?&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;@redacted&lt;/code&gt; to the rescue!&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;in your &lt;code&gt;build.sbt&lt;/code&gt; file, add the following lines&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val redactedVersion = // use latest version of the library&#xA;resolvers += DefaultMavenRepository,&#xA;libraryDependencies ++= Seq(&#xA;  &#34;io.github.polentino&#34; %% &#34;redacted&#34; % redactedVersion cross CrossVersion.full,&#xA;  compilerPlugin(&#34;io.github.polentino&#34; %% &#34;redacted-plugin&#34; % redactedVersion cross CrossVersion.full)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then, in your case class definitions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import io.github.polentino.redacted.redacted&#xA;&#xA;case class HttpHeaders(userId: UUID, @redacted apiKey: String, languages: Seq[Locale], correlationId: String)&#xA;&#xA;case class User(id: UUID, nickname: String, @redacted email: String)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s all!&lt;/p&gt; &#xA;&lt;p&gt;From now on, every time you&#39;ll try to dump the whole object,or invoke &lt;code&gt;toString&lt;/code&gt; method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val headers: HttpHeaders = HttpHeaders(&#xA;  userId = UUID.randomUUID(),&#xA;  apiKey = &#34;abcdefghijklmnopqrstuvwxyz&#34;,&#xA;  languages = Seq(&#34;it_IT&#34;, &#34;en_US&#34;),&#xA;  correlationId = &#34;corr-id-123&#34;&#xA;)&#xA;val user: User = User(&#xA;  id = UUID.randomUUID(),&#xA;  nickname = &#34;polentino911&#34;,&#xA;  email = &#34;polentino911@somemail.com&#34;&#xA;)&#xA;println(headers)&#xA;println(user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will actually be printed&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;$ HttpHeaders(d58b6a78-5411-4bd4-a0d3-e1ed38b579c4, ***, Seq(it_IT, en_US), corr-id-123)&lt;br&gt; $ User(8b2d4570-d043-473b-a56d-fe98105ccc2b, polentino911, ***)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;But, of course, accessing the field itself will return its content, i.e.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;println(headers.apiKey)&#xA;println(user.email)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will still print the real values:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;$ abcdefghijklmnopqrstuvwxyz&lt;br&gt; $ &lt;a href=&#34;mailto:polentino911@somemail.com&#34;&gt;polentino911@somemail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Nested case class!&lt;/h3&gt; &#xA;&lt;p&gt;It also works with nested case classes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class Wrapper(id: String, user: User)&#xA;&#xA;val wrapper = Wrapper(&#34;id-1&#34;, user) // user is the same object defined above&#xA;println(wrapper)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will print&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Wrapper(id-1,User(8b2d4570-d043-473b-a56d-fe98105ccc2b, polentino911, ***))&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Nested case class with upper level annotation!&lt;/h3&gt; &#xA;&lt;p&gt;It also works with nested case classes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class Wrapper(id: String, @redacted user: User)&#xA;&#xA;val wrapper = Wrapper(&#34;id-1&#34;, user) // user is the same object defined above&#xA;println(wrapper)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will print&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Wrapper(id-1,***)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Given a case class with at least one field annotated with &lt;code&gt;@redacted&lt;/code&gt;, i.e.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;final case class User(id: UUID, @redacted name: String)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the compiler plugin will replace the default implementation of its &lt;code&gt;toString&lt;/code&gt; method with this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;final case class User(id: UUID, @redacted name: String) {&#xA;  def toString(): String = &#34;User(&#34; + this.id + &#34;,***&#34; + &#34;)&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The way it&#39;s done is the following:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/polentino/redacted/main/plugin/src/main/scala/io/github/polentino/redacted/phases/PatchToString.scala&#34;&gt;PatchToString&lt;/a&gt; phase will inspect every class type definition and check whether the class being analysed is a &lt;code&gt;case class&lt;/code&gt;, and if it has at least one of its fields annotated with &lt;code&gt;@redacted&lt;/code&gt; ; if that&#39;s the case, it will then proceed to rewrite the default &lt;code&gt;toString&lt;/code&gt; implementation by selectively returning either the &lt;code&gt;***&lt;/code&gt; string, or the value of the field, depending on the presence (or not) of &lt;code&gt;@redacted&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def toString(): String =&#xA;  &#34;&amp;lt;class name&amp;gt;(&#34; + this.&amp;lt;field not redacted&amp;gt; + &#34;,&#34; + &#34;***&#34; + ... + &#34;)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Improvements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; create Sbt plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add some benchmarks with jmh&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Awesome pointers and ideas by Kit Langton (although it&#39;s about macros and not compiler plugins) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=h9hCm7GRbfE&#34;&gt;Compile-Time Time! — Data Transmogrification Macro From Scratch — Part 1&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=w7pzqHXGnf8&#34;&gt;Compile-Time Time! — Data Transmogrification Macro From Scratch — Part 2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oqYd_Lwj2p0&#34;&gt;Compiler Plugin Development in Scala 3 | Let&#39;s talk about Scala 3&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>