<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-28T01:45:36Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chipsalliance/playground</title>
    <updated>2023-02-28T01:45:36Z</updated>
    <id>tag:github.com,2023-02-28:/chipsalliance/playground</id>
    <link href="https://github.com/chipsalliance/playground" rel="alternate"></link>
    <summary type="html">&lt;p&gt;chipyard in mill :P&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;playground&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This is a template repository for those who want to develop RTL based on rocket-chip and even chipyard, being able to edit all sources from chisel environments without publish them to local ivy. You can add your own submodule in &lt;code&gt;build.sc&lt;/code&gt;.&lt;br&gt; For more information please visit &lt;a href=&#34;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html&#34;&gt;Mill documentation&lt;/a&gt; after adding your own code, you can add your library to playground dependency, and re-index Intellij to add your own library.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;To use this repo as your Chisel development environment, simply follow the steps.&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Clone this repo;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:chipsalliance/playground.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Install dependencies and setup environments:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arch Linux &lt;code&gt;pacman -Syu --noconfirm make parallel wget cmake ninja mill dtc verilator git llvm clang lld protobuf antlr4 numactl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nix &lt;code&gt;nix-shell&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;[Optional] Remove unused dependences to accelerate bsp compile in &lt;code&gt;build.sc&lt;/code&gt; &lt;code&gt;playground.moduleDeps&lt;/code&gt;;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd playground # entry your project directory&#xA;vim build.sc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// build.sc&#xA;&#xA;// Original&#xA;object playground extends CommonModule {&#xA;  override def moduleDeps = super.moduleDeps ++ Seq(myrocketchip, inclusivecache, blocks, rocketdsputils, shells, firesim, boom, chipyard, chipyard.fpga, chipyard.utilities, mychiseltest)&#xA;  ...&#xA;}&#xA;&#xA;// Remove unused dependences, e.g.,&#xA;object playground extends CommonModule {&#xA;  override def moduleDeps = super.moduleDeps ++ Seq(mychiseltest)&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Init and update dependences;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd playground # entry your project directory&#xA;make init     # init the submodules&#xA;make patch    # using the correct patches for some repos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Generate IDE bsp;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make bsp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Open your IDE and wait bsp compile;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;idea . # open IDEA at current directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Enjory your development with playground :)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;IDE support&lt;/h2&gt; &#xA;&lt;p&gt;For mill use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mill mill.bsp.BSP/install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then open by your favorite IDE, which supports &lt;a href=&#34;https://build-server-protocol.github.io/&#34;&gt;BSP&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Pending PRs&lt;/h2&gt; &#xA;&lt;p&gt;Philosophy of this repository is &lt;strong&gt;fast break and fast fix&lt;/strong&gt;. This repository always tracks remote developing branches, it may need some patches to work, &lt;code&gt;make patch&lt;/code&gt; will append below in sequence:&lt;/p&gt; &#xA;&lt;!-- BEGIN-PATCH --&gt; &#xA;&lt;p&gt;rocket-chip-fpga-shells &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip-fpga-shells/pull/8.diff&#34;&gt;https://github.com/chipsalliance/rocket-chip-fpga-shells/pull/8.diff&lt;/a&gt;&lt;br&gt; rocket-chip-inclusive-cache &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip-inclusive-cache/pull/5.diff&#34;&gt;https://github.com/chipsalliance/rocket-chip-inclusive-cache/pull/5.diff&lt;/a&gt;&lt;br&gt; rocket-chip-inclusive-cache &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip-inclusive-cache/pull/7.diff&#34;&gt;https://github.com/chipsalliance/rocket-chip-inclusive-cache/pull/7.diff&lt;/a&gt;&lt;br&gt; rocket-chip-blocks &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip-blocks/pull/2.diff&#34;&gt;https://github.com/chipsalliance/rocket-chip-blocks/pull/2.diff&lt;/a&gt;&lt;br&gt; rocket-chip-blocks &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip-blocks/pull/8.diff&#34;&gt;https://github.com/chipsalliance/rocket-chip-blocks/pull/8.diff&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- END-PATCH --&gt; &#xA;&lt;h2&gt;Why not Chipyard&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Building Chisel and FIRRTL from sources, get rid of any version issue. You can view Chisel/FIRRTL source codes from IDEA.&lt;/li&gt; &#xA; &lt;li&gt;No more make+sbt: Scala dependencies are managed by mill -&amp;gt; bsp -&amp;gt; IDEA, minimal IDEA indexing time.&lt;/li&gt; &#xA; &lt;li&gt;flatten git submodule in dependency, get rid of submodule recursive update.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;So generally, this repo is the fast and cleanest way to start your Chisel project codebase.&lt;/p&gt; &#xA;&lt;h2&gt;Always keep update-to-date&lt;/h2&gt; &#xA;&lt;p&gt;You can use this template and start your own job by appending commits on it. GitHub Action will automatically bump all dependencies, you can merge or rebase &lt;code&gt;chipsalliance/master&lt;/code&gt; to your branch.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd playground # entry your project directory&#xA;git rebase origin/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;System Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Currently, only support &lt;strong&gt;Arch Linux&lt;/strong&gt;, if you are using other distros please install nix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: make&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;git &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: git&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;mill &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: mill&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;wget &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: wget&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GNU Parallel &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: parallel&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Device Tree Compiler &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: dtc&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;protobuf &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: protobuf&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;antlr4 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: antlr4&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SanityTests&lt;/h2&gt; &#xA;&lt;p&gt;This package is the standalone tests to check is bumping correct or not, served as the unittest, this also can be a great example to illustrate usages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTICE: SanityTests also contains additional system dependencies:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clang: bootrom cross compiling and veriltor C++ -&amp;gt; binary compiling &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: clang&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;llvm: gnu toolchain replacement &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: llvm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;lld: LLVM based linker &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: lld&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;verilator -&amp;gt; Verilog -&amp;gt; C++ generation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: verilator numactl&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;cmake -&amp;gt; verilator emulator build system &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: cmake&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ninja -&amp;gt; verilator emulator build system &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arch Linux: ninja&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;rocketchip&lt;/h3&gt; &#xA;&lt;p&gt;This package is a replacement to RocketChip Makefile based generator, it directly generate a simple RocketChip emulator with verilator and linked to spike.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mill sanitytests.rocketchip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;vcu118&lt;/h3&gt; &#xA;&lt;p&gt;This package uses rocketchip and fpga-shells to elaborate FPGA bitstream generator and debug script with board &lt;a href=&#34;https://www.xilinx.com/products/boards-and-kits/vcu118.html&#34;&gt;VCU118&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mill sanitytests.vcu118&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wanna alter this to your own board, you can choose implmenting your own Shell to replace &lt;code&gt;VCU118Shell&lt;/code&gt; in this test.&lt;/p&gt;</summary>
  </entry>
</feed>