<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-13T01:35:36Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>epfl-lara/lisa</title>
    <updated>2025-07-13T01:35:36Z</updated>
    <id>tag:github.com,2025-07-13:/epfl-lara/lisa</id>
    <link href="https://github.com/epfl-lara/lisa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Proof assistant based on first-order logic and set theory&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LISA = LISA Is Sets Automated&lt;/h1&gt; &#xA;&lt;p&gt;LISA is a proof assistant based on first-order logic sequent calculus and set theory. To get started, check the &lt;a href=&#34;https://raw.githubusercontent.com/epfl-lara/lisa/main/refman/lisa.pdf&#34;&gt;Reference Manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;LISA is developed and maintained by the &lt;a href=&#34;https://lara.epfl.ch&#34;&gt;Laboratory for Automated Reasoning and Analysis (LARA)&lt;/a&gt; at the &lt;a href=&#34;https://epfl.ch&#34;&gt;EPFL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For details regarding the design of LISA and techniques implemented here, you can check the following publications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simon Guilloud, Sankalp Gambhir, and Viktor Kunčak. LISA - A Modern Proof System. In 14th International Conference on Interactive Theorem Proving (ITP 2023). LIPIcs, Volume 268, pp. 17:1-17:19 &lt;a href=&#34;https://doi.org/10.4230/LIPIcs.ITP.2023.17&#34;&gt;https://doi.org/10.4230/LIPIcs.ITP.2023.17&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Simon Guilloud, Sankalp Gambhir, Andrea Gilot, Viktor Kuncak: Mechanized HOL Reasoning in Set Theory. In 15th International Conference on Interactive Theorem Proving (ITP 2024): 18:1-18:18&lt;/li&gt; &#xA; &lt;li&gt;Guilloud, S., Bucev, M., Milovančević, D., Kunčak, V. (2023). Formula Normalizations in Verification. In: Enea, C., Lal, A. (eds) Computer Aided Verification. CAV 2023. Lecture Notes in Computer Science, vol 13966. Springer, Cham. &lt;a href=&#34;https://doi.org/10.1007/978-3-031-37709-9_19&#34;&gt;https://doi.org/10.1007/978-3-031-37709-9_19&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation and utilisation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First, &lt;a href=&#34;https://www.scala-lang.org/download/&#34;&gt;install Scala 3 on your system per the official instructions&lt;/a&gt;. You should have obtained Scala 3 and &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Then, clone the present project.&lt;/li&gt; &#xA; &lt;li&gt;In the root folder, run &lt;code&gt;sbt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To execute a file in LISA&#39;s Mathematical Library, type &lt;code&gt;run&lt;/code&gt; in the &lt;code&gt;sbt&lt;/code&gt; interactive console and select a main class to run when prompted (try with &lt;code&gt;SetTheory.scala&lt;/code&gt; first!).&lt;/li&gt; &#xA; &lt;li&gt;On the first run, SBT will install missing packages and compile the project, and outputting the theorems proved in the chosen file.&lt;/li&gt; &#xA; &lt;li&gt;To experiment with the system, type &lt;code&gt;project lisa-examples&lt;/code&gt;, and play around with the examples in &lt;a href=&#34;https://raw.githubusercontent.com/epfl-lara/lisa/main/lisa-examples/src/main/scala/Example.scala&#34;&gt;lisa-examples/src/main/scala/Example.scala&lt;/a&gt;, or create your own file. You can start your own LISA file with the following minimal header: &lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt; object MyLisaFile extends lisa.Main {&#xA;     // your proofs go here&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;We recommend using &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; with the &lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;Metals extension&lt;/a&gt; or &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;JetBrains IntelliJ IDEA&lt;/a&gt; to edit LISA code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Organisation&lt;/h2&gt; &#xA;&lt;h3&gt;Kernel&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;lisa-kernel&lt;/code&gt; package contains the trusted code of LISA, in the sense that all theorems and proofs pass through it to be considered correct. It only can produce theorems and verify proof. Any bug or error in code written outside this package should not possibly break soundness.&lt;/p&gt; &#xA;&lt;p&gt;The kernel essentially contains two elements: formalisation of first-order logic, and formalisation of proofs through sequent calculus.&lt;/p&gt; &#xA;&lt;h3&gt;Utils&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;lisa-utils&lt;/code&gt; package contains a set of utilities to interact with the kernel. Syntactic sugar, a parser and printer for proofs and formulas, unification algorithms, among others. The package also contains LISA&#39;s DSL to write proofs, tactics, and mathematical developments.&lt;/p&gt; &#xA;&lt;p&gt;Most user-developed tactics, syntax, and auxiliary utilities go here.&lt;/p&gt; &#xA;&lt;h2&gt;Interacting with the project&lt;/h2&gt; &#xA;&lt;p&gt;The following commands can be used to perform different actions as configured in the project. Each command (&#34;&lt;code&gt;command&lt;/code&gt;&#34;) can be run within the &lt;code&gt;sbt&lt;/code&gt; console as simply &lt;code&gt;command&lt;/code&gt; or in batch mode from a shell session in the project directory with &lt;code&gt;sbt command&lt;/code&gt; or &lt;code&gt;sbt &#34;command; command; ...&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;run&lt;/code&gt; to execute a LISA file, prompting which file to run&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;runMain classPath&lt;/code&gt; to run a specific main file at &lt;code&gt;classPath&lt;/code&gt; without prompt. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For example: &lt;code&gt;runMain lisa.mathematics.settheory.SetTheory&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt; to compile and execute the test suite&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;assembly&lt;/code&gt; to package LISA as a library&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doc&lt;/code&gt; to generate the Scala documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scalafix&lt;/code&gt; to lint the whole project&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scalafmt&lt;/code&gt; to format the whole project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License and Distribution&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2023 EPFL&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
</feed>