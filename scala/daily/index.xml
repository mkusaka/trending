<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-20T01:44:20Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pingcap/tispark</title>
    <updated>2023-03-20T01:44:20Z</updated>
    <id>tag:github.com,2023-03-20:/pingcap/tispark</id>
    <link href="https://github.com/pingcap/tispark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TiSpark is built for running Apache Spark on top of TiDB/TiKV&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TiSpark&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.pingcap.tispark/tispark-parent&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.pingcap.tispark/tispark-parent/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pingcap/tispark/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/pingcap/tispark.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;TiSpark is a thin layer built for running Apache Spark on top of TiDB/TiKV/TiFlash to answer complex OLAP queries. It enjoys the merits of both the Spark platform and the distributed clusters of TiKV/TiFlash while seamlessly integrated to TiDB.&lt;/p&gt; &#xA;&lt;p&gt;The figure below show the architecture of TiSpark.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pingcap/tispark/master/docs/architecture.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TiSpark integrates well with the Spark Catalyst Engine. It provides precise control of computing, which allows Spark to read data from TiKV efficiently. It also supports index seek, which significantly improves the performance of the point query execution.&lt;/li&gt; &#xA; &lt;li&gt;It utilizes several strategies to push down computing to reduce the size of dataset handling by Spark SQL, which accelerates query execution. It also uses the TiDB built-in statistical information for the query plan optimization.&lt;/li&gt; &#xA; &lt;li&gt;From the perspective of data integration, TiSpark + TiDB provides a solution that performs both transaction and analysis directly on the same platform without building and maintaining any ETLs. It simplifies the system architecture and reduces the cost of maintenance.&lt;/li&gt; &#xA; &lt;li&gt;In addition, you can deploy and utilize the tools from the Spark ecosystem for further data processing and manipulation on TiDB. For example, using TiSpark for data analysis and ETL, retrieving data from TiKV as a data source for machine learning, generating reports from the scheduling system and so on.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TiSpark relies on the availability of TiKV clusters and PDs. You also need to set up and use the Spark clustering platform.&lt;/p&gt; &#xA;&lt;p&gt;Most of the TiSpark logic is inside a thin layer, namely, the &lt;a href=&#34;https://github.com/pingcap/tispark/tree/master/tikv-client&#34;&gt;tikv-client&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;h2&gt;Doc TOC&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pingcap/tispark/master/docs/userguide_3.0.md&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pingcap/tispark/wiki/Dev-Guide&#34;&gt;Dev Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pingcap/tispark/wiki/TiSpark-Benchmark&#34;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About mysql-connector-java&lt;/h2&gt; &#xA;&lt;p&gt;We will not provide the &lt;code&gt;mysql-connector-java&lt;/code&gt; dependency because of the limit of the GPL license.&lt;/p&gt; &#xA;&lt;p&gt;The following versions of TiSpark&#39;s jar will no longer include &lt;code&gt;mysql-connector-java&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TiSpark &amp;gt; 3.0.1&lt;/li&gt; &#xA; &lt;li&gt;TiSpark &amp;gt; 2.5.1 for TiSpark 2.5.x&lt;/li&gt; &#xA; &lt;li&gt;TiSpark &amp;gt; 2.4.3 for TiSpark 2.4.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now, TiSpark needs &lt;code&gt;mysql-connector-java&lt;/code&gt; for writing and auth. Please import &lt;code&gt;mysql-connector-java&lt;/code&gt; manually when you need to write or auth.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;you can import it by putting the jar into spark jars file&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;you can also import it when you submit spark job like&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;spark-submit --jars tispark-assembly-3.0_2.12-3.1.0-SNAPSHOT.jar,mysql-connector-java-8.0.29.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feature Support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature Support&lt;/th&gt; &#xA;   &lt;th&gt;TiSpark 2.4.x&lt;/th&gt; &#xA;   &lt;th&gt;TiSpark 2.5.x&lt;/th&gt; &#xA;   &lt;th&gt;TiSpark 3.0.x&lt;/th&gt; &#xA;   &lt;th&gt;TiSpark master&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL select without tidb_catalog&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL select with tidb_catalog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL delete from with tidb_catalog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DataFrame append&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DataFrame reads&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://github.com/pingcap/tispark/wiki/Feature-Support-Detail&#34;&gt;here&lt;/a&gt; for more detail.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;TiDB starts to support &lt;code&gt;view&lt;/code&gt; since &lt;code&gt;tidb-3.0&lt;/code&gt;. TiSpark currently &lt;strong&gt;does not support&lt;/strong&gt; &lt;code&gt;view&lt;/code&gt;. Users are not be able to observe or access data through &lt;code&gt;view&lt;/code&gt; with TiSpark.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Spark config &lt;code&gt;spark.sql.runSQLOnFiles&lt;/code&gt; should not be set to &lt;code&gt;false&lt;/code&gt;, or you may got &lt;code&gt;Error in query: Table or view not found&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using the style of &#34;{db}.{table}.{colname}&#34; in the condition is not supported, e.g. &lt;code&gt;select * from t where db.t.col1 = 1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Null in aggregration&lt;/code&gt; is not supported, e.g. &lt;code&gt;select sum(null) from t group by col1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The dependency &lt;code&gt;tispark-assembly&lt;/code&gt; should not be packaged into &lt;code&gt;JAR of JARS&lt;/code&gt; file (for example, build with spring-boot-maven-plugin), or you will get &lt;code&gt;ClassNotFoundException&lt;/code&gt;. You can solve it by adding &lt;code&gt;spark-wrapper-spark-version&lt;/code&gt; in your dependency or constructing another forms of jar file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TiSpark doesn&#39;t support GBK character set.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TiSpark doesn&#39;t support the whole collations rule. Currently, TiSpark only supports the following collations: utf8_bin, utf8_general_ci, utf8_unicode_ci, utf8mb4_bin, utf8mb4_general_ci and utf8mb4_unicode_ci.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If &lt;code&gt;spark.sql.ansi.enabled&lt;/code&gt; is false an overflow of sum(bigint) will not cause an error but “wrap” the result, or you can cast bigint to decimal to avoid the overflow.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TiSpark supports retrieving data from table with &lt;code&gt;Expression Index&lt;/code&gt;, but the &lt;code&gt;Expression Index&lt;/code&gt; will not be used by the planner of TiSpark.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Follow us&lt;/h2&gt; &#xA;&lt;h3&gt;Twitter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/PingCAP&#34;&gt;@PingCAP&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Forums&lt;/h3&gt; &#xA;&lt;p&gt;For English users, go to &lt;a href=&#34;https://internals.tidb.io&#34;&gt;TiDB internals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Chinese users, go to &lt;a href=&#34;https://asktug.com&#34;&gt;AskTUG&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;TiSpark is under the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/pingcap/tispark/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ACINQ/eclair</title>
    <updated>2023-03-20T01:44:20Z</updated>
    <id>tag:github.com,2023-03-20:/ACINQ/eclair</id>
    <link href="https://github.com/ACINQ/eclair" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A scala implementation of the Lightning Network.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/.readme/logo.png&#34; alt=&#34;Eclair Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ACINQ/eclair/actions?query=workflow%3A%22Build+%26+Test%22&#34;&gt;&lt;img src=&#34;https://github.com/ACINQ/eclair/workflows/Build%20&amp;amp;%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/acinq/eclair&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/acinq/eclair/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Eclair&lt;/strong&gt; (French for Lightning) is a Scala implementation of the Lightning Network.&lt;/p&gt; &#xA;&lt;p&gt;This software follows the &lt;a href=&#34;https://github.com/lightning/bolts&#34;&gt;Lightning Network Specifications (BOLTs)&lt;/a&gt;. Other implementations include &lt;a href=&#34;https://github.com/ElementsProject/lightning&#34;&gt;core lightning&lt;/a&gt;, &lt;a href=&#34;https://github.com/LightningNetwork/lnd&#34;&gt;lnd&lt;/a&gt;, &lt;a href=&#34;https://github.com/spesmilo/electrum/&#34;&gt;electrum&lt;/a&gt;, and &lt;a href=&#34;https://github.com/lightningdevkit/rust-lightning&#34;&gt;ldk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#lightning-network-specification-compliance&#34;&gt;Lightning Network Specification Compliance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#json-api&#34;&gt;JSON API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#prerequisite-bitcoin-core&#34;&gt;Prerequisite: Bitcoin Core&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#installing-eclair&#34;&gt;Installing Eclair&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#configuration-file&#34;&gt;Configuration file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#configure-bitcoin-core-wallet&#34;&gt;Configure Bitcoin Core wallet&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#java-environment-variables&#34;&gt;Java Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#backup&#34;&gt;Backup&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#plugins&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#testnet-usage&#34;&gt;Testnet usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Lightning Network Specification Compliance&lt;/h2&gt; &#xA;&lt;p&gt;Please see the latest &lt;a href=&#34;https://github.com/ACINQ/eclair/releases&#34;&gt;release note&lt;/a&gt; for detailed information on BOLT compliance.&lt;/p&gt; &#xA;&lt;h2&gt;JSON API&lt;/h2&gt; &#xA;&lt;p&gt;Eclair offers a feature-rich HTTP API that enables application developers to easily integrate.&lt;/p&gt; &#xA;&lt;p&gt;For more information please visit the &lt;a href=&#34;https://acinq.github.io/eclair&#34;&gt;API documentation website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🚨&lt;/span&gt; Eclair&#39;s JSON API should &lt;strong&gt;NOT&lt;/strong&gt; be accessible from the outside world (similarly to Bitcoin Core API)&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please visit our &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/docs&#34;&gt;docs&lt;/a&gt; folder to find detailed instructions on how to &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/docs/Configure.md&#34;&gt;configure&lt;/a&gt; your node, connect to other nodes, open channels, send and receive payments, and help with more advanced scenarios.&lt;/p&gt; &#xA;&lt;p&gt;You will also find detailed &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/docs/Guides.md&#34;&gt;guides&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/docs/FAQ.md&#34;&gt;frequently asked questions&lt;/a&gt; there.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisite: Bitcoin Core&lt;/h3&gt; &#xA;&lt;p&gt;Eclair relies on Bitcoin Core to interface with and monitor the blockchain and to manage on-chain funds: Eclair does not include an on-chain wallet, channel opening transactions are funded by your Bitcoin Core node, and channel closing transactions return funds to your Bitcoin Core node.&lt;/p&gt; &#xA;&lt;p&gt;This means that instead of re-implementing them, Eclair benefits from the verifications and optimisations (including fee management with RBF/CPFP, ...) that are implemented by Bitcoin Core. Eclair uses our own &lt;a href=&#34;https://github.com/ACINQ/bitcoin-kmp&#34;&gt;bitcoin library&lt;/a&gt; to verify data provided by Bitcoin Core.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; This also means that Eclair has strong requirements on how your Bitcoin Core node is configured (see below), and that you must back up your Bitcoin Core wallet as well as your Eclair node (see &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/#configure-bitcoin-core-wallet&#34;&gt;here&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Eclair needs a &lt;em&gt;synchronized&lt;/em&gt;, &lt;em&gt;segwit-ready&lt;/em&gt;, &lt;strong&gt;&lt;em&gt;zeromq-enabled&lt;/em&gt;&lt;/strong&gt;, &lt;em&gt;wallet-enabled&lt;/em&gt;, &lt;em&gt;non-pruning&lt;/em&gt;, &lt;em&gt;tx-indexing&lt;/em&gt; &lt;a href=&#34;https://github.com/bitcoin/bitcoin&#34;&gt;Bitcoin Core&lt;/a&gt; node.&lt;/li&gt; &#xA; &lt;li&gt;You must configure your Bitcoin node to use &lt;code&gt;bech32&lt;/code&gt; or &lt;code&gt;bech32m&lt;/code&gt; (segwit) addresses. If your wallet has &#34;non-segwit UTXOs&#34; (outputs that are neither &lt;code&gt;p2sh-segwit&lt;/code&gt;, &lt;code&gt;bech32&lt;/code&gt; or &lt;code&gt;bech32m&lt;/code&gt;), you must send them to a &lt;code&gt;bech32&lt;/code&gt; or &lt;code&gt;bech32m&lt;/code&gt; address before running Eclair.&lt;/li&gt; &#xA; &lt;li&gt;Eclair requires Bitcoin Core 23.1 or higher. If you are upgrading an existing wallet, you may need to create a new address and send all your funds to that address.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run bitcoind with the following minimal &lt;code&gt;bitcoin.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;server=1&#xA;rpcuser=foo&#xA;rpcpassword=bar&#xA;txindex=1&#xA;addresstype=bech32&#xA;changetype=bech32&#xA;zmqpubhashblock=tcp://127.0.0.1:29000&#xA;zmqpubrawtx=tcp://127.0.0.1:29000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on the actual hardware configuration, it may be useful to provide increased &lt;code&gt;dbcache&lt;/code&gt; parameter value for faster verification and &lt;code&gt;rpcworkqueue&lt;/code&gt; parameter value for better handling of API requests on &lt;code&gt;bitcoind&lt;/code&gt; side.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;# UTXO database cache size, in MiB&#xA;dbcache=2048&#xA;# Number of allowed pending RPC requests (default is 16)&#xA;rpcworkqueue=128&#xA;&#xA;# How many seconds bitcoin will wait for a complete RPC HTTP request.&#xA;# after the HTTP connection is established.&#xA;rpcclienttimeout=30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing Eclair&lt;/h3&gt; &#xA;&lt;p&gt;Eclair is developed in &lt;a href=&#34;https://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;, a powerful functional language that runs on the JVM, and is packaged as a ZIP archive.&lt;/p&gt; &#xA;&lt;p&gt;To run Eclair, you first need to install Java, we recommend that you use &lt;a href=&#34;https://adoptopenjdk.net/?variant=openjdk11&amp;amp;jvmVariant=hotspot&#34;&gt;OpenJDK 11&lt;/a&gt;. Other runtimes also work, but we don&#39;t recommend using them.&lt;/p&gt; &#xA;&lt;p&gt;Then download our latest &lt;a href=&#34;https://github.com/ACINQ/eclair/releases&#34;&gt;release&lt;/a&gt;, unzip the archive and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;eclair-node-&amp;lt;version&amp;gt;-&amp;lt;commit_id&amp;gt;/bin/eclair-node.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then control your node via &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/docs/Usage.md&#34;&gt;eclair-cli&lt;/a&gt; or the &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/docs/API.md&#34;&gt;API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Be careful when following tutorials/guides that may be outdated or incomplete. You must thoroughly read the official eclair documentation before running your own node.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Configuration file&lt;/h3&gt; &#xA;&lt;p&gt;Eclair reads its configuration file, and write its logs, to &lt;code&gt;~/.eclair&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;p&gt;To change your node&#39;s configuration, create a file named &lt;code&gt;eclair.conf&lt;/code&gt; in &lt;code&gt;~/.eclair&lt;/code&gt;. Here&#39;s an example configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;eclair.node-alias=eclair&#xA;eclair.node-color=49daaa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are some of the most common options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eclair.chain&lt;/td&gt; &#xA;   &lt;td&gt;Which blockchain to use: &lt;em&gt;regtest&lt;/em&gt;, &lt;em&gt;testnet&lt;/em&gt;, &lt;em&gt;signet&lt;/em&gt; or &lt;em&gt;mainnet&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;mainnet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eclair.server.port&lt;/td&gt; &#xA;   &lt;td&gt;Lightning TCP port&lt;/td&gt; &#xA;   &lt;td&gt;9735&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eclair.api.enabled&lt;/td&gt; &#xA;   &lt;td&gt;Enable/disable the API&lt;/td&gt; &#xA;   &lt;td&gt;false. By default the API is disabled. If you want to enable it, you must set a password.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eclair.api.port&lt;/td&gt; &#xA;   &lt;td&gt;API HTTP port&lt;/td&gt; &#xA;   &lt;td&gt;8080&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eclair.api.password&lt;/td&gt; &#xA;   &lt;td&gt;API password (BASIC)&lt;/td&gt; &#xA;   &lt;td&gt;&#34;&#34; (must be set if the API is enabled)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eclair.bitcoind.rpcuser&lt;/td&gt; &#xA;   &lt;td&gt;Bitcoin Core RPC user&lt;/td&gt; &#xA;   &lt;td&gt;foo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eclair.bitcoind.rpcpassword&lt;/td&gt; &#xA;   &lt;td&gt;Bitcoin Core RPC password&lt;/td&gt; &#xA;   &lt;td&gt;bar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eclair.bitcoind.zmqblock&lt;/td&gt; &#xA;   &lt;td&gt;Bitcoin Core ZMQ block address&lt;/td&gt; &#xA;   &lt;td&gt;&#34;tcp://127.0.0.1:29000&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eclair.bitcoind.zmqtx&lt;/td&gt; &#xA;   &lt;td&gt;Bitcoin Core ZMQ tx address&lt;/td&gt; &#xA;   &lt;td&gt;&#34;tcp://127.0.0.1:29000&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eclair.bitcoind.wallet&lt;/td&gt; &#xA;   &lt;td&gt;Bitcoin Core wallet name&lt;/td&gt; &#xA;   &lt;td&gt;&#34;&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Quotes are not required unless the value contains special characters. Full syntax guide &lt;a href=&#34;https://github.com/lightbend/config/raw/master/HOCON.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;→ see &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/docs/Configure.md&#34;&gt;here&lt;/a&gt; for more configuration options.&lt;/p&gt; &#xA;&lt;h3&gt;Configure Bitcoin Core wallet&lt;/h3&gt; &#xA;&lt;p&gt;Eclair will use the default loaded Bitcoin Core wallet to fund any channels you choose to open. If you want to use a different wallet from the default one, you must set &lt;code&gt;eclair.bitcoind.wallet&lt;/code&gt; accordingly in your &lt;code&gt;eclair.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Once a wallet is configured, you must be very careful if you want to change it: changing the wallet when you have channels open may result in a loss of funds (or a complex recovery procedure).&lt;/p&gt; &#xA;&lt;p&gt;Eclair will return BTC from closed channels to the wallet configured. Any BTC found in the wallet can be used to fund the channels you choose to open.&lt;/p&gt; &#xA;&lt;h3&gt;Java Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;Some advanced parameters can be changed with java environment variables. Most users won&#39;t need this and can skip this section.&lt;/p&gt; &#xA;&lt;p&gt;However, if you&#39;re seeing Java heap size errors, you can try increasing the maximum memory allocated to the JVM with the &lt;code&gt;-Xmx&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;p&gt;You can for example set it to use up to 512 MB (or any value that fits the amount of RAM on your machine) with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export JAVA_OPTS=-Xmx512m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Using separate &lt;code&gt;datadir&lt;/code&gt; is mandatory if you want to run &lt;strong&gt;several instances of eclair&lt;/strong&gt; on the same machine. You will also have to change ports in &lt;code&gt;eclair.conf&lt;/code&gt; (see above).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eclair.datadir&lt;/td&gt; &#xA;   &lt;td&gt;Path to the data directory&lt;/td&gt; &#xA;   &lt;td&gt;~/.eclair&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eclair.printToConsole&lt;/td&gt; &#xA;   &lt;td&gt;Log to stdout (in addition to eclair.log)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For example, to specify a different data directory you would run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;eclair-node-&amp;lt;version&amp;gt;-&amp;lt;commit_id&amp;gt;/bin/eclair-node.sh -Declair.datadir=/tmp/node1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;Eclair uses &lt;a href=&#34;https://logback.qos.ch&#34;&gt;&lt;code&gt;logback&lt;/code&gt;&lt;/a&gt; for logging. To use a &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/docs/Logging.md&#34;&gt;different configuration&lt;/a&gt;, and override the internal logback.xml, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;eclair-node-&amp;lt;version&amp;gt;-&amp;lt;commit_id&amp;gt;/bin/eclair-node.sh -Dlogback.configurationFile=/path/to/logback-custom.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Backup&lt;/h3&gt; &#xA;&lt;p&gt;You need to backup:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;your Bitcoin Core wallet&lt;/li&gt; &#xA; &lt;li&gt;your Eclair channels&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Bitcoin Core, you need to backup the wallet file for the wallet that Eclair is using. You only need to do this once, when the wallet is created. See &lt;a href=&#34;https://github.com/bitcoin/bitcoin/raw/master/doc/managing-wallets.md&#34;&gt;Managing Wallets&lt;/a&gt; in the Bitcoin Core documentation for more information.&lt;/p&gt; &#xA;&lt;p&gt;For Eclair, the files that you need to backup are located in your data directory. You must backup:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;your seeds (&lt;code&gt;node_seed.dat&lt;/code&gt; and &lt;code&gt;channel_seed.dat&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;your channel database (&lt;code&gt;eclair.sqlite.bak&lt;/code&gt; under directory &lt;code&gt;mainnet&lt;/code&gt;, &lt;code&gt;testnet&lt;/code&gt;, &lt;code&gt;signet&lt;/code&gt; or &lt;code&gt;regtest&lt;/code&gt; depending on which chain you&#39;re running on)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Your seeds never change once they have been created, but your channels will change whenever you receive or send payments. Eclair will create and maintain a snapshot of its database, named &lt;code&gt;eclair.sqlite.bak&lt;/code&gt;, in your data directory, and update it when needed. This file is always consistent and safe to use even when Eclair is running, and this is what you should back up regularly.&lt;/p&gt; &#xA;&lt;p&gt;For example, you could configure a &lt;code&gt;cron&lt;/code&gt; task for your backup job. Or you could configure an optional notification script to be called by eclair once a new database snapshot has been created, using the following option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;eclair.file-backup.notify-script = &#34;/absolute/path/to/script.sh&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure your script is executable and uses an absolute path name for &lt;code&gt;eclair.sqlite.bak&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that depending on your filesystem, in your backup process we recommend first moving &lt;code&gt;eclair.sqlite.bak&lt;/code&gt; to some temporary file before copying that file to your final backup location.&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; x86_64 image is built on each commit on &lt;a href=&#34;https://hub.docker.com/r/acinq/eclair&#34;&gt;docker hub&lt;/a&gt; for running a dockerized eclair-node. For arm64 platforms you can use an &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/contrib/arm64v8.Dockerfile&#34;&gt;arm64 Dockerfile&lt;/a&gt; to build your own arm64 container.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;JAVA_OPTS&lt;/code&gt; environment variable to set arguments to &lt;code&gt;eclair-node&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -ti --rm -e &#34;JAVA_OPTS=-Xmx512m -Declair.api.binding-ip=0.0.0.0 -Declair.node-alias=node-pm -Declair.printToConsole&#34; acinq/eclair&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to persist the data directory, you can make the volume to your host with the &lt;code&gt;-v&lt;/code&gt; argument, as the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -ti --rm -v &#34;/path_on_host:/data&#34; -e &#34;JAVA_OPTS=-Declair.printToConsole&#34; acinq/eclair&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you enabled the API you can check the status of Eclair using the command line tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker exec &amp;lt;container_name&amp;gt; eclair-cli -p foobar getinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;For advanced usage, Eclair supports plugins written in Scala, Java, or any JVM-compatible language.&lt;/p&gt; &#xA;&lt;p&gt;A valid plugin is a jar that contains an implementation of the &lt;a href=&#34;https://raw.githubusercontent.com/ACINQ/eclair/master/eclair-node/src/main/scala/fr/acinq/eclair/Plugin.scala&#34;&gt;Plugin&lt;/a&gt; interface, and a manifest entry for &lt;code&gt;Main-Class&lt;/code&gt; with the FQDN of the implementation.&lt;/p&gt; &#xA;&lt;p&gt;Here is how to run Eclair with plugins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;eclair-node-&amp;lt;version&amp;gt;/bin/eclair-node.sh &amp;lt;plugin1.jar&amp;gt; &amp;lt;plugin2.jar&amp;gt; &amp;lt;...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more details about plugins in the &lt;a href=&#34;https://github.com/ACINQ/eclair-plugins&#34;&gt;eclair-plugins&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;Testnet usage&lt;/h2&gt; &#xA;&lt;p&gt;Eclair is configured to run on mainnet by default, but you can still run it on testnet (or regtest/signet): start your Bitcoin node in testnet mode (add &lt;code&gt;testnet=1&lt;/code&gt; in &lt;code&gt;bitcoin.conf&lt;/code&gt; or start with &lt;code&gt;-testnet&lt;/code&gt;), and change Eclair&#39;s chain parameter and Bitcoin RPC port:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;eclair.chain=testnet&#xA;eclair.bitcoind.rpcport=18332&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For regtest, add &lt;code&gt;regtest=1&lt;/code&gt; in &lt;code&gt;bitcoin.conf&lt;/code&gt; or start with &lt;code&gt;-regtest&lt;/code&gt;, and modify &lt;code&gt;eclair.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;eclair.chain = &#34;regtest&#34;&#xA;eclair.bitcoind.rpcport=18443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For signet, add &lt;code&gt;signet=1&lt;/code&gt; in &lt;code&gt;bitcoin.conf&lt;/code&gt; or start with &lt;code&gt;-signet&lt;/code&gt;, and modify &lt;code&gt;eclair.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;eclair.chain = &#34;signet&#34;&#xA;eclair.bitcoind.rpcport=38332&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also want to take advantage of the new configuration sections in &lt;code&gt;bitcoin.conf&lt;/code&gt; to manage parameters that are network specific, so you can easily run your Bitcoin node on both mainnet and testnet. For example you could use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;server=1&#xA;txindex=1&#xA;addresstype=bech32&#xA;changetype=bech32&#xA;&#xA;[main]&#xA;rpcuser=&amp;lt;your-mainnet-rpc-user-here&amp;gt;&#xA;rpcpassword=&amp;lt;your-mainnet-rpc-password-here&amp;gt;&#xA;zmqpubhashblock=tcp://127.0.0.1:29000&#xA;zmqpubrawtx=tcp://127.0.0.1:29000&#xA;&#xA;[test]&#xA;rpcuser=&amp;lt;your-testnet-rpc-user-here&amp;gt;&#xA;rpcpassword=&amp;lt;your-testnet-rpc-password-here&amp;gt;&#xA;zmqpubhashblock=tcp://127.0.0.1:29001&#xA;zmqpubrawtx=tcp://127.0.0.1:29001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://starblocks.acinq.co/&#34;&gt;Demo Shop&lt;/a&gt; - an example testnet Lightning web shop.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://explorer.acinq.co/&#34;&gt;Network Explorer&lt;/a&gt; - a Lightning network visualization tool.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[1] &lt;a href=&#34;https://lightning.network/lightning-network-paper.pdf&#34;&gt;The Bitcoin Lightning Network: Scalable Off-Chain Instant Payments&lt;/a&gt; by Joseph Poon and Thaddeus Dryja&lt;/li&gt; &#xA; &lt;li&gt;[2] &lt;a href=&#34;https://github.com/ElementsProject/lightning/raw/master/doc/deployable-lightning.pdf&#34;&gt;Reaching The Ground With Lightning&lt;/a&gt; by Rusty Russell&lt;/li&gt; &#xA; &lt;li&gt;[3] &lt;a href=&#34;https://explorer.acinq.co&#34;&gt;Lightning Network Explorer&lt;/a&gt; - Explore testnet LN nodes you can connect to&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>