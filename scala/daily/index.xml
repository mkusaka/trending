<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-01T01:44:16Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>es-meta/esmeta</title>
    <updated>2022-12-01T01:44:16Z</updated>
    <id>tag:github.com,2022-12-01:/es-meta/esmeta</id>
    <link href="https://github.com/es-meta/esmeta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ECMAScript Specification (ECMA-262) Metalanguage&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/es-meta/esmeta/actions&#34;&gt;&lt;img src=&#34;https://github.com/es-meta/esmeta/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/es-meta/esmeta/raw/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/es-meta/esmeta&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/es-meta/esmeta/releases&#34;&gt;&lt;img src=&#34;https://badgen.net/github/release/es-meta/esmeta&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/es-meta/esmeta/pulls&#34;&gt;&lt;img src=&#34;https://badgen.net/github/prs/es-meta/esmeta&#34; alt=&#34;prs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://esmeta.slack.com/&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/slack/esmeta/blue&#34; alt=&#34;slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://es-meta.github.io/&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/site/jekyll/blue&#34; alt=&#34;site&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://es-meta.github.io/esmeta&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/doc/scaladoc/blue&#34; alt=&#34;doc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ESMeta&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;ESMeta&lt;/strong&gt; is an &lt;strong&gt;E&lt;/strong&gt;CMAScript &lt;strong&gt;S&lt;/strong&gt;pecification &lt;strong&gt;Meta&lt;/strong&gt;language. This framework extracts a mechanized specification from a given version of ECMAScript/JavaScript specification (&lt;a href=&#34;https://tc39.es/ecma262/&#34;&gt;ECMA-262&lt;/a&gt;) and automatically generates language-based tools.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#installation-guide&#34;&gt;Installation Guide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#download-esmeta&#34;&gt;Download ESMeta&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#environment-setting&#34;&gt;Environment Setting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#installation-of-esmeta-using--sbt-&#34;&gt;Installation of ESMeta using &lt;code&gt;sbt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#basic-commands&#34;&gt;Basic Commands&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#parsing-and-executing-ecmascript-files&#34;&gt;Parsing and Executing ECMAScript files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#executing-test262-tests&#34;&gt;Executing Test262 tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#supported-features&#34;&gt;Supported Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#interactive-execution-with-ecmascript-double-debugger&#34;&gt;Interactive Execution with ECMAScript Double Debugger&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#conformance-test-synthesizer-from-ecma-262&#34;&gt;Conformance Test Synthesizer from ECMA-262&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#type-analysis-on-ecma-262&#34;&gt;Type Analysis on ECMA-262&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#meta-level-static-analyzer-for-ecmascript&#34;&gt;Meta-Level Static Analyzer for ECMAScript&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#academic-achievement&#34;&gt;Academic Achievement&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#publications&#34;&gt;Publications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/es-meta/esmeta/main/#pldi-2022-tutorial&#34;&gt;PLDI 2022 Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation Guide&lt;/h2&gt; &#xA;&lt;p&gt;We explain how to install ESMeta with the necessary environment settings from scratch. Our framework is developed in Scala, which works on JDK 8+, including GraalVM. So before installation, please install &lt;a href=&#34;https://www.oracle.com/java/technologies/downloads/&#34;&gt;JDK 8+&lt;/a&gt; and &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt;, an interactive build tool for Scala.&lt;/p&gt; &#xA;&lt;h3&gt;Download ESMeta&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/es-meta/esmeta.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment Setting&lt;/h3&gt; &#xA;&lt;p&gt;Insert the following commands to &lt;code&gt;~/.bashrc&lt;/code&gt; (or &lt;code&gt;~/.zshrc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# for ESMeta&#xA;export ESMETA_HOME=&#34;&amp;lt;path to ESMeta&amp;gt;&#34; # IMPORTANT!!!&#xA;export PATH=&#34;$ESMETA_HOME/bin:$PATH&#34; # for executables `esmeta` and etc.&#xA;source $ESMETA_HOME/.completion # for auto-completion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;path to ESMeta&amp;gt;&lt;/code&gt; should be the absolute path of the ESMeta repository.&lt;/p&gt; &#xA;&lt;h3&gt;Installation of ESMeta using &lt;code&gt;sbt&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Please type the following command to 1) update the git submodules, 2) generate binary file &lt;code&gt;bin/esmeta&lt;/code&gt;, and 3) apply the &lt;code&gt;.completion&lt;/code&gt; for auto-completion.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd esmeta &amp;amp;&amp;amp; git submodule update --init &amp;amp;&amp;amp; sbt assembly &amp;amp;&amp;amp; source .completion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you see the following message, ESMeta is successfully installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ esmeta&#xA;# Welcome to ESMeta v0.1.0 - ECMAScript Specification Metalanguage.&#xA;# Please type `esmeta help` to see the help message.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Commands&lt;/h2&gt; &#xA;&lt;p&gt;You can run this framework with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ esmeta &amp;lt;command&amp;gt; &amp;lt;option&amp;gt;* &amp;lt;filename&amp;gt;*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It supports the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;help&lt;/code&gt; shows help messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;extract&lt;/code&gt; extracts specification model from ECMA-262 (&lt;code&gt;ecma262/spec.html&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compile&lt;/code&gt; compiles a specification to an IR program.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build-cfg&lt;/code&gt; builds a control-flow graph (CFG) from an IR program.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tycheck&lt;/code&gt; performs a type analysis of ECMA-262.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parse&lt;/code&gt; parses an ECMAScript file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eval&lt;/code&gt; evaluates an ECMAScript file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;web&lt;/code&gt; starts a web server for an ECMAScript double debugger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test262-test&lt;/code&gt; tests Test262 tests with harness files (default: tests/test262).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;inject&lt;/code&gt; injects assertions to check final state of an ECMAScript file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mutate&lt;/code&gt; mutates an ECMAScript program.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;analyze&lt;/code&gt; analyzes an ECMAScript file using meta-level static analysis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and global options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-silent&lt;/code&gt; does not show final results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-error&lt;/code&gt; shows error stack traces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-status&lt;/code&gt; exits with status.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-time&lt;/code&gt; displays the duration time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-test262dir={string}&lt;/code&gt; sets the directory of Test262 (default: &lt;code&gt;$ESMETA_HOME/tests/test262&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to see the detailed help messages and command-specific options, please use the &lt;code&gt;help&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# show help messages for all commands&#xA;$ esmeta help&#xA;&#xA;# show help messages for specific commands with more details&#xA;$ esmeta help &amp;lt;command&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please use the &lt;code&gt;build-cfg&lt;/code&gt; command to extract a mechanized specification as a control-flow graph from ECMA-262:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ esmeta build-cfg&#xA;# ========================================&#xA;#  extract phase&#xA;# ----------------------------------------&#xA;# ========================================&#xA;#  compile phase&#xA;# ----------------------------------------&#xA;# ========================================&#xA;#  build-cfg phase&#xA;# ----------------------------------------&#xA;# 0: def &amp;lt;BUILTIN&amp;gt;:INTRINSICS.SyntaxError(...): Unknown {&#xA;#   ...&#xA;# }&#xA;# 1: def &amp;lt;INTERNAL&amp;gt;:BuiltinFunctionObject.Construct(...): Normal[Object] | Abrupt[throw] {&#xA;#   ...&#xA;# }&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;build-cfg&lt;/code&gt; command consists of three phases:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &lt;code&gt;extract&lt;/code&gt; phase extracts specification model (&lt;code&gt;esmeta.spec.Spec&lt;/code&gt;) from ECMA-262 (&lt;code&gt;spec.html&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;compile&lt;/code&gt; phase compiles it into a program (&lt;code&gt;esmeta.ir.Program&lt;/code&gt;) in &lt;strong&gt;IRES&lt;/strong&gt;, an &lt;strong&gt;I&lt;/strong&gt;ntermediate &lt;strong&gt;R&lt;/strong&gt;epresentations for &lt;strong&gt;E&lt;/strong&gt;CMAScript &lt;strong&gt;S&lt;/strong&gt;pecification.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;build-cfg&lt;/code&gt; phase builds a control-flow graph (&lt;code&gt;esmeta.cfg.CFG&lt;/code&gt;) for a given IRES program.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can extract mechanized specifications from other versions of ECMA-262 with the &lt;code&gt;-extract:target&lt;/code&gt; option. Please enter any git tag/branch names or commit hash as an input of the option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# extract a mechanized specification from the origin/main branch version of ECMA-262&#xA;$ esmeta build-cfg -extract:target=origin/main&#xA;&#xA;# extract a mechanized specification from the 2c78e6f commit version of ECMA-262&#xA;$ esmeta build-cfg -extract:target=2c78e6f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parsing and Executing ECMAScript files&lt;/h3&gt; &#xA;&lt;p&gt;After extracting mechanized specifications from ECMA-262, you can parse or execute ECMAScript/JavaScript programs. For example, consider the following example JavaScript file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// example.js&#xA;let x; x ??= class {}; function* f() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can parse or execute it with &lt;code&gt;parse&lt;/code&gt; and &lt;code&gt;eval&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# parse example.js&#xA;$ esmeta parse example.js&#xA;&#xA;# execute example.js&#xA;$ esmeta eval example.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Executing Test262 tests&lt;/h3&gt; &#xA;&lt;p&gt;ESMeta supports the execution of &lt;a href=&#34;https://github.com/tc39/test262&#34;&gt;Test262&lt;/a&gt; tests to check the conformance between Test262 and ECMA-262.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run all the applicable Test262 tests&#xA;$ esmeta test262-test&#xA;# ...&#xA;# ========================================&#xA;#  test262-test phase&#xA;# ----------------------------------------&#xA;# - harness                       :    96 tests are removed&#xA;# ...&#xA;# ----------------------------------------&#xA;# - total: 31,537 available tests&#xA;#   - normal: 31,537 tests&#xA;#   - error: 0 tests&#xA;# ----------------------------------------&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to execute specific Test262 files or directories, please list their paths as arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run Test262 tests in a given directory&#xA;$ esmeta test262-test tests/test262/test/language/expressions/addition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Features&lt;/h2&gt; &#xA;&lt;p&gt;ESMeta supports other features utilizing mechanized specifications, including 1) interactive execution of ECMAScript/JavaScript file with a double debugger, 2) conformance test synthesizer, 3) type analysis of ECMA-262, and 4) meta-level static analysis for ECMAScript/JavaScript files. All of them utilize mechanized specifications from ECMA-262. Thus, ESMeta always extracts mechanized specifications as control-flow graphs before performing these features.&lt;/p&gt; &#xA;&lt;h3&gt;Interactive Execution with ECMAScript Double Debugger&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ECMAScript Double Debugger&lt;/strong&gt; extends the ECMAScript/JavaScript interpreter in ESMeta to help you understand how a JavaScript Program runs according to ECMA-262. Currently, it is in an &lt;strong&gt;alpha stage&lt;/strong&gt; and supports only basic features such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Step-by-step execution of ECMA-262 algorithms&lt;/li&gt; &#xA; &lt;li&gt;Line-by-line execution of ECMAScript/JavaScript code&lt;/li&gt; &#xA; &lt;li&gt;Breakpoints by abstract algorithm names in ECMA-262&lt;/li&gt; &#xA; &lt;li&gt;Visualization of ECMA-262 internal states&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can start it with the following instructions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# turn on server of the double debugger&#xA;$ esmeta web&#xA;&#xA;# install and turn on the client-side application using NPM&#xA;$ cd client &amp;amp;&amp;amp; npm install &amp;amp;&amp;amp; npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;A short &lt;a href=&#34;https://youtu.be/syfZ3v6JNg8&#34;&gt;introduction video&lt;/a&gt; is also available.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;1150&#34; alt=&#34;debugger&#34; src=&#34;https://user-images.githubusercontent.com/7039121/151577359-7d6a90af-7940-4904-912e-dd9113b8ba2f.png&#34;&gt; &#xA;&lt;p&gt;We will enhance it with the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add more debugger features: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Show a JavaScript state by refining an ECMAScript state.&lt;/li&gt; &#xA;   &lt;li&gt;Record timestamps during execution for resume &amp;amp; suspend steps (especially for Generator).&lt;/li&gt; &#xA;   &lt;li&gt;...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Show relevant &lt;a href=&#34;https://github.com/tc39/test262&#34;&gt;Test262&lt;/a&gt; tests for each algorithm step in the specification viewer.&lt;/li&gt; &#xA; &lt;li&gt;Show the type of each variable using the type analysis result.&lt;/li&gt; &#xA; &lt;li&gt;Live-edit of &lt;code&gt;ecma262/spec.html&lt;/code&gt; in the specification viewer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Conformance Test Synthesizer from ECMA-262&lt;/h3&gt; &#xA;&lt;p&gt;ESMeta supports the synthesis of JavaScript files as conformance tests. We introduced the main concept of the test synthesis in the &lt;a href=&#34;https://doi.org/10.1109/ICSE43902.2021.00015&#34;&gt;ICSE 2021 paper&lt;/a&gt; with a tool named &lt;a href=&#34;https://github.com/kaist-plrg/jest&#34;&gt;JEST&lt;/a&gt;, a &lt;strong&gt;J&lt;/strong&gt;avaScript &lt;strong&gt;E&lt;/strong&gt;ngines and &lt;strong&gt;S&lt;/strong&gt;pecification &lt;strong&gt;T&lt;/strong&gt;ester. The test synthesis technique consists of two parts: 1) &lt;em&gt;program synthesis&lt;/em&gt; of JavaScript files and 2) &lt;em&gt;assertion injection&lt;/em&gt; based on the mechanized specification extract from ECMA-262.&lt;/p&gt; &#xA;&lt;p&gt;The current version of ESMeta focuses on the assertion injection to a given JavaScript file. If you want to inject assertions into the program conforming to ECMA-262, please use the &lt;code&gt;inject&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# inject assertions based on the semantics described in ECMA-262&#xA;$ esmeta inject example.js&#xA;# ...&#xA;# ========================================&#xA;#  inject phase&#xA;# ----------------------------------------&#xA;# // [EXIT] normal&#xA;# let x; x ??= class {}; function* f() {}&#xA;#&#xA;# $algo.set(f, &#34;GeneratorDeclaration[0,0].InstantiateGeneratorFunctionObject&#34;)&#xA;# $assert.sameValue(Object.getPrototypeOf(f), GeneratorFunction.prototype);&#xA;# $assert.sameValue(Object.isExtensible(f), true);&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It prints the assertion-injected JavaScript program without definitions of assertions. The comment &lt;code&gt;// [EXIT] normal&lt;/code&gt; denotes that this program should normally terminate. From the fourth line, injected assertions represent the expected value stored in variables, objects, or even internal properties.&lt;/p&gt; &#xA;&lt;p&gt;If you want to dump the assertion-injected code to a program, please use the &lt;code&gt;-inject:out&lt;/code&gt; option. If you want to inject definitions of assertions as well, please use the &lt;code&gt;-inject:defs&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ esmeta inject example.js -silent -inject:defs -inject:out=test.js&#xA;# - Dumped an assertion-injected ECMAScript program into test.js.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the future version of ESMeta, we plan to support the program synthesis feature as well.&lt;/p&gt; &#xA;&lt;h3&gt;Type Analysis on ECMA-262&lt;/h3&gt; &#xA;&lt;p&gt;ESMeta provides a type analysis on ECMA-262 to infer unknown types in the specification. We introduced its main concept in the &lt;a href=&#34;https://doi.org/10.1109/ASE51524.2021.9678781&#34;&gt;ASE 2021 paper&lt;/a&gt; with a tool names &lt;a href=&#34;https://github.com/kaist-plrg/jstar&#34;&gt;JSTAR&lt;/a&gt;, a &lt;strong&gt;J&lt;/strong&gt;avaScript &lt;strong&gt;S&lt;/strong&gt;pecification &lt;strong&gt;T&lt;/strong&gt;ype &lt;strong&gt;A&lt;/strong&gt;nalyzer using &lt;strong&gt;R&lt;/strong&gt;efinement. It analyzes types of mechanized specification by performing type analysis of IRES. We utilized &lt;em&gt;condition-based type refinement&lt;/em&gt; to prune out infeasible types in each branch for enhanced analysis precision.&lt;/p&gt; &#xA;&lt;p&gt;If you want to perform a type analysis of &lt;a href=&#34;https://262.ecma-international.org/13.0/&#34;&gt;ES2022&lt;/a&gt; (or ES13), the latest official version of ECMA-262, please type the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ esmeta tycheck&#xA;# ...&#xA;# ========================================&#xA;#  tycheck phase&#xA;# ----------------------------------------&#xA;# - 1806 functions are initial targets.&#xA;# - 2372 functions are analyzed in 32493 iterations.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can perform type analysis on other versions of ECMA-262 with the &lt;code&gt;-extract:target&lt;/code&gt; option. Please enter any git tag/branch names or commit hash as an input of the option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# analyze types for origin/main branch version of ECMA-262&#xA;$ esmeta tycheck -extract:target=origin/main&#xA;&#xA;# analyze types for 2c78e6f commit verison of ECMA-262&#xA;$ esmeta tycheck -extract:target=2c78e6f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Meta-Level Static Analyzer for ECMAScript&lt;/h3&gt; &#xA;&lt;p&gt;ESMeta also supports a meta-level static analyzer for ECMAScript/JavaScript programs based on mechanized specifications extracted from ECMA-262. A mechanized specification is an interpreter that can parse and execute JavaScript programs. We introduced a way to indirectly analyze an ECMAScript/JavaScript program by analyzing its interpreter with a restriction with the given program. We call it &lt;em&gt;meta-level static analysis&lt;/em&gt; and presented this technique at &lt;a href=&#34;https://dl.acm.org/doi/10.1145/3540250.3549097&#34;&gt;ESEC/FSE 2022&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to analyze JavaScript program using a meta-level static analysis, please use the &lt;code&gt;analyze&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ esmeta analyze example.js&#xA;# ...&#xA;# ========================================&#xA;#  analyze phase&#xA;# ----------------------------------------&#xA;# - 108 functions are analyzed in 1688 iterations.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ESMeta supports an interactive Read–eval–print loop (REPL) for the analysis with the &lt;code&gt;-analyze:repl&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ esmeta analyze example.js -analyze:repl&#xA;# ========================================&#xA;#  analyze phase&#xA;# ----------------------------------------&#xA;#&#xA;# command list:&#xA;# - help                     Show help message.&#xA;# ...&#xA;#&#xA;# [1] RunJobs[42]:Call[339] -&amp;gt; {&#xA;#   ...&#xA;# }&#xA;&#xA;analyzer&amp;gt; continue&#xA;# - Static analysis finished. (# iter: 1688)&#xA;&#xA;analyzer&amp;gt; print -expr @REALM.GlobalObject.SubMap.f.Value.SubMap.name.Value&#xA;# &#34;f&#34;&#xA;&#xA;analyzer&amp;gt; exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It showed that the property &lt;code&gt;name&lt;/code&gt; of the global variable &lt;code&gt;f&lt;/code&gt; points to a single string &lt;code&gt;&#34;f&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the future version of ESMeta, we will add more kind documentation for this analyzer REPL.&lt;/p&gt; &#xA;&lt;h2&gt;Academic Achievement&lt;/h2&gt; &#xA;&lt;h3&gt;Publications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[ASE 2020] &lt;a href=&#34;https://doi.org/10.1145/3324884.3416632&#34;&gt;JISET: JavaScript IR-based Semantics Extraction Toolchain&lt;/a&gt; [&lt;a href=&#34;https://github.com/kaist-plrg/jiset&#34;&gt;old repo&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;[ICSE 2021] &lt;a href=&#34;https://doi.org/10.1109/ICSE43902.2021.00015&#34;&gt;JEST: N+1-version Differential Testing of Both JavaScript Engines&lt;/a&gt; [&lt;a href=&#34;https://github.com/kaist-plrg/jest&#34;&gt;old repo&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;[ASE 2021] &lt;a href=&#34;https://doi.org/10.1109/ASE51524.2021.9678781&#34;&gt;JSTAR: JavaScript Specification Type Analyzer using Refinement&lt;/a&gt; [&lt;a href=&#34;https://github.com/kaist-plrg/jstar&#34;&gt;old repo&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;[ESEC/FSE 2022] &lt;a href=&#34;https://doi.org/10.1145/3540250.3549097&#34;&gt;Automatically Deriving JavaScript Static Analyzers from Specifications using Meta-Level Static Analysis&lt;/a&gt; [&lt;a href=&#34;https://github.com/kaist-plrg/jsaver&#34;&gt;old repo&lt;/a&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PLDI 2022 Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: &lt;a href=&#34;https://pldi22.sigplan.org/details/pldi-2022-tutorials/1/Filling-the-gap-between-the-JavaScript-language-specification-and-tools-using-the-JIS&#34;&gt;Filling the gap between the JavaScript language specification and tools using the JISET family&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Presenters: &lt;a href=&#34;https://park.jihyeok.site/&#34;&gt;Jihyeok Park&lt;/a&gt;, &lt;a href=&#34;https://github.com/h2oche&#34;&gt;Seungmin An&lt;/a&gt;, and &lt;a href=&#34;https://plrg.kaist.ac.kr/ryu&#34;&gt;Sukyoung Ryu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://park.jihyeok.site/assets/data/slide/2022/pldi22-tutorial-1.pdf&#34;&gt;Session 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://park.jihyeok.site/assets/data/slide/2022/pldi22-tutorial-2.pdf&#34;&gt;Session 2-1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://park.jihyeok.site/assets/data/slide/2022/pldi22-tutorial-3.pdf&#34;&gt;Session 2-2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Tinkoff/mockingbird</title>
    <updated>2022-12-01T01:44:16Z</updated>
    <id>tag:github.com,2022-12-01:/Tinkoff/mockingbird</id>
    <link href="https://github.com/Tinkoff/mockingbird" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flexible mock server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mockingbird&lt;/h1&gt; &#xA;&lt;p&gt;mockingbird - сервис эмуляции REST-сервисов и сервисов с интерфейсами-очередями&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tinkoff/mockingbird/main/deployment.md&#34;&gt;Руководство по инсталляции&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tinkoff/mockingbird/main/configuration.md&#34;&gt;Руководство по настройке&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tinkoff/mockingbird/main/message-brokers.md&#34;&gt;Работа с очередями&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Общие принципы работы&lt;/h2&gt; &#xA;&lt;p&gt;mockingbird поддерживает следующие сценарии:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;прогон конкретного кейса с конкретным набором событий и HTTP/GRPC ответов&lt;/li&gt; &#xA; &lt;li&gt;постоянная имитация happy-path для обеспечения автономности контура(ов)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Типы конфигураций:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;countdown - автономные конфигурации для тестирования конкретного сценария. Имеют наивысший приоритет при разрешении неоднозначностей. Каждый мок срабатывает n раз (количество задаётся при создании). Автоматически удаляются в полночь.&lt;/li&gt; &#xA; &lt;li&gt;ephemeral - конфигурации, автоматически удаляемые в полночь. Если одновременно вызывают метод/приходит сообщение, для которого подходит countdown и ephemeral моки - сработает countdown.&lt;/li&gt; &#xA; &lt;li&gt;persistent - конфигурация, предназначеная для постоянной работы. Имеет наименьший приоритет&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Пример небольшого кейса (короткая заявка) - в конце спецификации&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Сервисы&lt;/h2&gt; &#xA;&lt;p&gt;Для упорядочения моков в UI и минимизации количества конфликтных ситуаций в mockingbird реализованы т.н. сервисы. Каждый мок (как HTTP так и сценарий) всегда принадлежит к какому-то из сервисом. Сервисы создаются заранее и хранятся в базе. Сервис имеет suffix (являющийся по совместительству уникальным id сервиса) и человекочитаемый name.&lt;/p&gt; &#xA;&lt;h2&gt;Шаблонизатор JSON&lt;/h2&gt; &#xA;&lt;p&gt;Для достижения гибкости при сохранении относительной простоты конфигов в сервисе реализован JSON шаблонизатор. Для начала простой пример:&lt;/p&gt; &#xA;&lt;p&gt;Шаблон:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;description&#34;: &#34;${description}&#34;,&#xA;  &#34;topic&#34;: &#34;${extras.topic}&#34;,&#xA;  &#34;comment&#34;: &#34;${extras.comments.[0].text}&#34;,&#xA;  &#34;meta&#34;: {&#xA;    &#34;field1&#34;: &#34;${extras.fields.[0]}&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Значения для подстановки:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;description&#34;: &#34;Some description&#34;,&#xA;  &#34;extras&#34;: {&#xA;    &#34;fields&#34;: [&#34;f1&#34;, &#34;f2&#34;],&#xA;    &#34;topic&#34;: &#34;Main topic&#34;,&#xA;    &#34;comments&#34;: [&#xA;      {&#34;text&#34;: &#34;First nah!&#34;}, {&#34;text&#34;: &#34;Okay&#34;}&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Результат:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;description&#34;: &#34;Some description&#34;,&#xA;  &#34;topic&#34;: &#34;Main topic&#34;,&#xA;  &#34;comment&#34;: &#34;First nah!&#34;,&#xA;  &#34;meta&#34;: {&#xA;    &#34;field1&#34;: &#34;f1&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;В данный момент поддерживается следующий синтаксис:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;${a.[0].b}&lt;/code&gt; - подстановка значения (JSON)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;${/a/b/c}&lt;/code&gt; - подстановка значения (XPath)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ВНИМАНИЕ! НЕ ИСПОЛЬЗУЙТЕ НЕЙМСПЕЙСЫ В XPATH ВЫРАЖЕНИЯХ&lt;/p&gt; &#xA;&lt;h2&gt;Шаблонизатор XML&lt;/h2&gt; &#xA;&lt;p&gt;Шаблон:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;root&amp;gt;&#xA;    &amp;lt;tag1&amp;gt;${/r/t1}&amp;lt;/tag1&amp;gt;&#xA;    &amp;lt;tag2 a2=&#34;${/r/t2/@a2}&#34;&amp;gt;${/r/t2}&amp;lt;/tag2&amp;gt;&#xA;&amp;lt;/root&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Значения для подстановки:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;r&amp;gt;&#xA;    &amp;lt;t1&amp;gt;test&amp;lt;/t1&amp;gt;&#xA;    &amp;lt;t2 a2=&#34;attr2&#34;&amp;gt;42&amp;lt;/t2&amp;gt;&#xA;&amp;lt;/r&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Результат:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;root&amp;gt;&#xA;    &amp;lt;tag1&amp;gt;test&amp;lt;/tag1&amp;gt;&#xA;    &amp;lt;tag2 a2=&#34;attr2&#34;&amp;gt;42&amp;lt;/tag2&amp;gt;&#xA;&amp;lt;/root&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Состояния (state)&lt;/h2&gt; &#xA;&lt;p&gt;Для поддержки сложных сценариев сервис поддерживает сохранение произвольных состояний. Состояние - документ с произвольной схемой, технически состояние - документ в mongodb. Запись новых состояний может происходить:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;при записи в state (секция persist) с пустым (или отсутствующим) предикатом (секция state)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Манипуляции со state&lt;/h2&gt; &#xA;&lt;p&gt;State аккумулятивно дописывается. Разрешено переписывание полей.&lt;/p&gt; &#xA;&lt;p&gt;Поля, по которым будем производиться поиск (используемые в предикатах) должны начинаться с &#34;_&#34;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;для таких полей будет автоматически создаваться sparse индекс&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Префиксы:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;seed&lt;/code&gt; - значения из блока seed (рандомизируемые на старте заявки)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;state&lt;/code&gt; - текущий state&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;req&lt;/code&gt; - тело запроса (режимы json, jlens, xpath)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;message&lt;/code&gt; - тело собщения (в сценариях)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;query&lt;/code&gt; - query параметры (в заглушках)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pathParts&lt;/code&gt; - значения, извлекаемые из URL (в заглушках)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;extracted&lt;/code&gt; - извлечённые значения&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;headers&lt;/code&gt; - HTTP заголовки&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;a&#34;: &#34;Просто строка&#34;, //В поле &#34;a&#34; записывается константа (может быть любое JSON значение)&#xA;  &#34;b&#34;: &#34;${req.fieldB}&#34;, //В поле &#34;b&#34; записывается значение из поля fieldB запроса&#xA;  &#34;c&#34;: &#34;${state.c}&#34;, //В поле &#34;c&#34; записывается значение из поля &#34;c&#34; текущего состояния&#xA;  &#34;d&#34;: &#34;${req.fieldA}: ${state.a}&#34; //В поле d запишется строка, содержащая req.fieldA и state.a&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Seeding&lt;/h2&gt; &#xA;&lt;p&gt;Иногда возникает необходимость сгенерировать случайное значение и сохранить и/или вернуть его в результате работы мока. Для поддержки таких сценариев сделано поле seed, позволяющее задать переменные, которые будут сгенерированы при инициализации мока. Это позволяет избежать необходимости пересоздавать моки с захардкожеными id&lt;/p&gt; &#xA;&lt;p&gt;В seed&#39;ах поддерживается синтаксис псевдофункций:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;%{randomString(n)}&lt;/code&gt; - подстановка случайной строки длиной n&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%{randomString(&#34;ABCDEF1234567890&#34;, m, n)}&lt;/code&gt; - подстановка случайной строки, состоящей из символов &lt;code&gt;ABCDEF1234567890&lt;/code&gt; длиной в интервале [m, n)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%{randomNumericString(n)}&lt;/code&gt; - подстановка случайной строки, состоящей только из цифр, длиной n&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%{randomInt(n)}&lt;/code&gt; - подстановка случайного Int в диапазоне [0, n)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%{randomInt(m,n)}&lt;/code&gt; - подстановка случайного Int в диапазоне [m, n)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%{randomLong(n)}&lt;/code&gt; - подстановка случайного Long в диапазоне [0, n)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%{randomLong(m,n)}&lt;/code&gt; - подстановка случайного Long в диапазоне [m, n)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%{UUID}&lt;/code&gt; - подстановка случайного UUID&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%{now(yyyy-MM-dd&#39;T&#39;HH:mm:ss)}&lt;/code&gt; - текущее время в заданном &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html&#34;&gt;формате&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%{today(yyyy-MM-dd)}&lt;/code&gt; - текущая дата в заданном &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html&#34;&gt;формате&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Можно определять строки со сложным форматом: &lt;code&gt;%{randomInt(10)}: %{randomLong(10)} | %{randomString(12)}&lt;/code&gt;, поддерживаются все псевдофункции из списка выше&lt;/p&gt; &#xA;&lt;h2&gt;Резолвинг заглушек/сценариев&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Найденые загулшки - кандидаты, оставшиеся после валидации URL, заголовков и тела запроса Найденые сценарии - кандидаты, оставшиеся после валидации тела сообщения&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Найденые заглушки (сценарии)&lt;/th&gt; &#xA;   &lt;th&gt;Требуется состояние&lt;/th&gt; &#xA;   &lt;th&gt;Найдено состояний&lt;/th&gt; &#xA;   &lt;th&gt;Результат&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;/td&gt; &#xA;   &lt;td&gt;нет&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Сработает №1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;/td&gt; &#xA;   &lt;td&gt;да&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Ошибка&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;/td&gt; &#xA;   &lt;td&gt;да&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Сработает №1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;br&gt;№2&lt;/td&gt; &#xA;   &lt;td&gt;нет&lt;br&gt;нет&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Ошибка&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;br&gt;№2&lt;/td&gt; &#xA;   &lt;td&gt;нет&lt;br&gt;да&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;br&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Сработает №1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;br&gt;№2&lt;/td&gt; &#xA;   &lt;td&gt;нет&lt;br&gt;да&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;br&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Сработает №2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;br&gt;№2&lt;/td&gt; &#xA;   &lt;td&gt;нет&lt;br&gt;да&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;br&gt;2 (и более)&lt;/td&gt; &#xA;   &lt;td&gt;Ошибка&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;br&gt;№2&lt;/td&gt; &#xA;   &lt;td&gt;да&lt;br&gt;да&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;br&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Ошибка&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;br&gt;№2&lt;/td&gt; &#xA;   &lt;td&gt;да&lt;br&gt;да&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;br&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Сработает №2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;br&gt;№2&lt;/td&gt; &#xA;   &lt;td&gt;да&lt;br&gt;да&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;br&gt;2 (и более)&lt;/td&gt; &#xA;   &lt;td&gt;Ошибка&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;br&gt;№2&lt;/td&gt; &#xA;   &lt;td&gt;да&lt;br&gt;да&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;br&gt;1 (и более)&lt;/td&gt; &#xA;   &lt;td&gt;Ошибка&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;br&gt;№2&lt;br&gt;№3&lt;/td&gt; &#xA;   &lt;td&gt;да&lt;br&gt;да&lt;br&gt;да&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;br&gt;1&lt;br&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Сработает №2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;br&gt;№2&lt;br&gt;№3&lt;/td&gt; &#xA;   &lt;td&gt;да&lt;br&gt;да&lt;br&gt;да&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;br&gt;1&lt;br&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Ошибка&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;№1&lt;br&gt;№2&lt;br&gt;№3&lt;/td&gt; &#xA;   &lt;td&gt;да&lt;br&gt;да&lt;br&gt;да&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;br&gt;2&lt;br&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Ошибка&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Эмуляция REST сервисов&lt;/h2&gt; &#xA;&lt;p&gt;Алгоритм работы:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Поиск мока по URL/HTTP-verb/заголовков&lt;/li&gt; &#xA; &lt;li&gt;Валидация body&lt;/li&gt; &#xA; &lt;li&gt;Поиск state по предикату&lt;/li&gt; &#xA; &lt;li&gt;Подстановка значений в шаблон ответа&lt;/li&gt; &#xA; &lt;li&gt;Модификация state&lt;/li&gt; &#xA; &lt;li&gt;Отдача response&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Конфигурация HTTP заглушек&lt;/h3&gt; &#xA;&lt;p&gt;HTTP заголовки валидируются на полное соответствие значений, лишние заголовки не являются ошибкой&lt;/p&gt; &#xA;&lt;p&gt;Валидация тела запросы в HTTP заглушках может работать в следующих режимах:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;no_body - запрос должен быть без тела&lt;/li&gt; &#xA; &lt;li&gt;any_body - тело запроса должно быть не пустым, при этом никак не парсится и не проверяется&lt;/li&gt; &#xA; &lt;li&gt;raw - тело запроса никак не парсится и проверяется на полное соответствие с содержимым request.body&lt;/li&gt; &#xA; &lt;li&gt;json - тело запроса должно быть валидным JSON&#39;ом и проверяется на соответствие с содержимым request.body&lt;/li&gt; &#xA; &lt;li&gt;xml - тело запроса должно быть валидным XML и проверяется на соответствие с содержимым request.body&lt;/li&gt; &#xA; &lt;li&gt;jlens - тело запроса должно быть валидным JSON&#39;ом и валидируется по условиям, описаным в request.body&lt;/li&gt; &#xA; &lt;li&gt;xpath - тело запроса должно быть валидным XML и валидируется по условиям, описаным в request.body&lt;/li&gt; &#xA; &lt;li&gt;web_form - тело запроса должно быть в формате x-www-form-urlencoded и валидируется по условиям, описаным в request.body&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Для ответов поддерживаются следующие режимы:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;raw&lt;/li&gt; &#xA; &lt;li&gt;json&lt;/li&gt; &#xA; &lt;li&gt;xml&lt;/li&gt; &#xA; &lt;li&gt;binary&lt;/li&gt; &#xA; &lt;li&gt;proxy&lt;/li&gt; &#xA; &lt;li&gt;json-proxy&lt;/li&gt; &#xA; &lt;li&gt;xml-proxy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Режимы request и response полностью независимы друг от друга (можно сконфигурировать ответ xml&#39;ем на json запрос при желании, кроме режимов json-proxy и xml-proxy)&lt;/p&gt; &#xA;&lt;p&gt;В поле delay можно передать корректный FiniteDuration не дольше 30 секунд&lt;/p&gt; &#xA;&lt;h3&gt;Экстрация данных из URL&lt;/h3&gt; &#xA;&lt;p&gt;Бывает, что URL содержит какой-нибудь идентификатор не как параметр, а как непосредственно часть пути. В таких случаях становится невозможным описать persistent заглушку из-за невозможности полного совпадения пути. На помощь приходит поле pathPattern, в которое можно передать регулярку, на соответствие которой будет проверяться путь. Отмечу, что хоть сопоставление и производится в монге эффективным способом, злоупотребять этой возможностью не стоит и при возможности сопоставления по полному совпадению не следует использовать pathPattern&lt;/p&gt; &#xA;&lt;p&gt;Пример:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;name&#34;: &#34;Sample stub&#34;,&#xA;  &#34;scope&#34;: &#34;persistent&#34;,&#xA;  &#34;pathPattern&#34;: &#34;/pattern/(?&amp;lt;id&amp;gt;\\d+)&#34;,&#xA;  &#34;method&#34;: &#34;GET&#34;,&#xA;  &#34;request&#34;: {&#xA;    &#34;headers&#34;: {},&#xA;    &#34;mode&#34;: &#34;no_body&#34;,&#xA;    &#34;body&#34;: {}&#xA;  },&#xA;  &#34;response&#34;: {&#xA;    &#34;code&#34;: 200,&#xA;    &#34;mode&#34;: &#34;json&#34;,&#xA;    &#34;headers&#34;: {&#34;Content-Type&#34;:  &#34;application/json&#34;},&#xA;    &#34;body&#34;: {&#34;id&#34;: &#34;${pathParts.id}&#34;}&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;То, что нужно извлечь из пути, нужно делать &lt;em&gt;именованой&lt;/em&gt; группой, групп может быть сколько угодно, впоследствии на них можно ссылаться через &lt;code&gt;pathParts.&amp;lt;имя_группы&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Экстракторы&lt;/h3&gt; &#xA;&lt;p&gt;В некоторых случаях нужно подставить в ответ данные, которые невозможно извлечь простыми средствами. Для этих целей были добавлены экстракторы&lt;/p&gt; &#xA;&lt;h4&gt;Экстрактор xcdata&lt;/h4&gt; &#xA;&lt;p&gt;Достаёт значения из XML, лежащего в CDATA&lt;/p&gt; &#xA;&lt;p&gt;конфигурация:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;type&#34;: &#34;xcdata&#34;,&#xA;  &#34;prefix&#34;: &#34;/root/inner/tag&#34;, //Путь до тэга с CDATA&#xA;  &#34;path&#34;: &#34;/path/to&#34; //Путь до нужного тэга&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Экстрактор jcdata&lt;/h4&gt; &#xA;&lt;p&gt;Достаёт значения из JSON, лежащего в CDATA&lt;/p&gt; &#xA;&lt;p&gt;конфигурация:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;type&#34;: &#34;jcdata&#34;,&#xA;  &#34;prefix&#34;: &#34;/root/inner/tag&#34;, //Путь до тэга с CDATA&#xA;  &#34;path&#34;: &#34;path.to&#34; //Путь до нужного значения&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CDATA inlining&lt;/h4&gt; &#xA;&lt;p&gt;Иногда приходится иметь дело с запросами, в которых внутри CDATA лежит XML. В таких случаях можно заинлайнить содержимое DATA с помощью параметра &lt;code&gt;inlineCData&lt;/code&gt; (поддерживается в &lt;code&gt;xpath&lt;/code&gt; и &lt;code&gt;xml&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Примеры&lt;/h3&gt; &#xA;&lt;h4&gt;Полное совпадение, режим json&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;    &#34;name&#34;: &#34;Sample stub&#34;,&#xA;    &#34;method&#34;: &#34;POST&#34;,&#xA;    &#34;path&#34;: &#34;/pos-loans/api/cl/get_partner_lead_info&#34;,&#xA;    &#34;state&#34;: {&#xA;      // Предикаты&#xA;    },&#xA;    &#34;request&#34;: {&#xA;        &#34;headers&#34;: {&#34;Content-Type&#34;: &#34;application/json&#34;},&#xA;        &#34;mode&#34;: &#34;json&#34;,&#xA;        &#34;body&#34;: {&#xA;            &#34;trace_id&#34;: &#34;42&#34;,&#xA;            &#34;account_number&#34;: &#34;228&#34;&#xA;        }&#xA;    },&#xA;    &#34;persist&#34;: {&#xA;      // Модификации состояния&#xA;    },&#xA;    &#34;response&#34;: {&#xA;        &#34;code&#34;: 200,&#xA;        &#34;mode&#34;: &#34;json&#34;,&#xA;        &#34;body&#34;: {&#xA;            &#34;code&#34;: 0,&#xA;            &#34;credit_amount&#34;: 802400,&#xA;            &#34;credit_term&#34;: 120,&#xA;            &#34;interest_rate&#34;: 13.9,&#xA;            &#34;partnum&#34;: &#34;CL3.15&#34;&#xA;        },&#xA;        &#34;headers&#34;: {&#34;Content-Type&#34;: &#34;application/json&#34;},&#xA;        &#34;delay&#34;: &#34;1 second&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Полное совпадение, режим raw&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;    &#34;name&#34;: &#34;Sample stub&#34;,&#xA;    &#34;method&#34;: &#34;POST&#34;,&#xA;    &#34;path&#34;: &#34;/pos-loans/api/evil/soap/service&#34;&#xA;    &#34;state&#34;: {&#xA;      // Предикаты&#xA;    },&#xA;    &#34;request&#34;: {&#xA;        &#34;headers&#34;: {&#34;Content-Type&#34;: &#34;application/xml&#34;},&#xA;        &#34;mode&#34;: &#34;raw&#34;&#xA;        &#34;body&#34;: &#34;&amp;lt;xml&amp;gt;&amp;lt;request type=\&#34;jopa\&#34;&amp;gt;&amp;lt;/request&amp;gt;&amp;lt;/xml&amp;gt;&#34;&#xA;    },&#xA;    &#34;persist&#34;: {&#xA;      // Модификации состояния&#xA;    },&#xA;    &#34;response&#34;: {&#xA;        &#34;code&#34;: 200,&#xA;        &#34;mode&#34;: &#34;raw&#34;&#xA;        &#34;body&#34;: &#34;&amp;lt;xml&amp;gt;&amp;lt;response type=\&#34;jopa\&#34;&amp;gt;&amp;lt;/response&amp;gt;&amp;lt;/xml&amp;gt;&#34;,&#xA;        &#34;headers&#34;: {&#34;Content-Type&#34;: &#34;application/xml&#34;},&#xA;        &#34;delay&#34;: &#34;1 second&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Валидация по условиям, режим jlens&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;    &#34;name&#34;: &#34;Sample stub&#34;,&#xA;    &#34;method&#34;: &#34;POST&#34;,&#xA;    &#34;path&#34;: &#34;/pos-loans/api/cl/get_partner_lead_info&#34;,&#xA;    &#34;state&#34;: {&#xA;      // Предикаты&#xA;    },&#xA;    &#34;request&#34;: {&#xA;        &#34;headers&#34;: {&#34;Content-Type&#34;: &#34;application/json&#34;},&#xA;        &#34;mode&#34;: &#34;jlens&#34;,&#xA;        &#34;body&#34;: {&#xA;            &#34;meta.id&#34;: {&#34;==&#34;: 42}&#xA;        }&#xA;    },&#xA;    &#34;persist&#34;: {&#xA;      // Модификации состояния&#xA;    },&#xA;    &#34;response&#34;: {&#xA;        &#34;code&#34;: 200,&#xA;        &#34;mode&#34;: &#34;json&#34;,&#xA;        &#34;body&#34;: {&#xA;            &#34;code&#34;: 0,&#xA;            &#34;credit_amount&#34;: 802400,&#xA;            &#34;credit_term&#34;: 120,&#xA;            &#34;interest_rate&#34;: 13.9,&#xA;            &#34;partnum&#34;: &#34;CL3.15&#34;&#xA;        },&#xA;        &#34;headers&#34;: {&#34;Content-Type&#34;: &#34;application/json&#34;},&#xA;        &#34;delay&#34;: &#34;1 second&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Валидация по условиям, режим xpath&lt;/h4&gt; &#xA;&lt;p&gt;ВНИМАНИЕ! НЕ ИСПОЛЬЗУЙТЕ НЕЙМСПЕЙСЫ В XPATH ВЫРАЖЕНИЯХ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;    &#34;name&#34;: &#34;Sample stub&#34;,&#xA;    &#34;method&#34;: &#34;POST&#34;,&#xA;    &#34;path&#34;: &#34;/pos-loans/api/cl/get_partner_lead_info&#34;,&#xA;    &#34;state&#34;: {&#xA;      // Предикаты&#xA;    },&#xA;    &#34;request&#34;: {&#xA;        &#34;headers&#34;: {&#34;Content-Type&#34;: &#34;application/xml&#34;},&#xA;        &#34;mode&#34;: &#34;xpath&#34;,&#xA;        &#34;body&#34;: {&#xA;            &#34;/payload/response/id&#34;: {&#34;==&#34;: 42}&#xA;        },&#xA;        &#34;extractors&#34;: {&#34;name&#34;: {...}, ...} //опционально&#xA;    },&#xA;    &#34;persist&#34;: {&#xA;      // Модификации состояния&#xA;    },&#xA;    &#34;response&#34;: {&#xA;        &#34;code&#34;: 200,&#xA;        &#34;mode&#34;: &#34;raw&#34;&#xA;        &#34;body&#34;: &#34;&amp;lt;xml&amp;gt;&amp;lt;response type=\&#34;jopa\&#34;&amp;gt;&amp;lt;/response&amp;gt;&amp;lt;/xml&amp;gt;&#34;,&#xA;        &#34;headers&#34;: {&#34;Content-Type&#34;: &#34;application/xml&#34;},&#xA;        &#34;delay&#34;: &#34;1 second&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Простое проксирование запроса&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;name&#34;: &#34;Simple proxy&#34;,&#xA;  &#34;method&#34;: &#34;POST&#34;,&#xA;  &#34;path&#34;: &#34;/pos-loans/api/cl/get_partner_lead_info&#34;,&#xA;  &#34;state&#34;: {&#xA;      // Предикаты&#xA;  },&#xA;  &#34;request&#34;: {&#xA;    // Спецификация запроса&#xA;  },&#xA;  &#34;response&#34;: {&#xA;    &#34;mode&#34;: &#34;proxy&#34;,&#xA;    &#34;uri&#34;: &#34;http://some.host/api/cl/get_partner_lead_info&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Проксирование с модификацией JSON ответа&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;name&#34;: &#34;Simple proxy&#34;,&#xA;  &#34;method&#34;: &#34;POST&#34;,&#xA;  &#34;path&#34;: &#34;/pos-loans/api/cl/get_partner_lead_info&#34;,&#xA;  &#34;state&#34;: {&#xA;      // Предикаты&#xA;  },&#xA;  &#34;request&#34;: {&#xA;    // Спецификация запроса, mode json или jlens&#xA;  },&#xA;  &#34;response&#34;: {&#xA;    &#34;mode&#34;: &#34;json-proxy&#34;,&#xA;    &#34;uri&#34;: &#34;http://some.host/api/cl/get_partner_lead_info&#34;,&#xA;    &#34;patch&#34;: {&#xA;      &#34;field.innerField&#34;: &#34;${req.someRequestField}&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Проксирование с модификацией XML ответа&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;name&#34;: &#34;Simple proxy&#34;,&#xA;  &#34;method&#34;: &#34;POST&#34;,&#xA;  &#34;path&#34;: &#34;/pos-loans/api/cl/get_partner_lead_info&#34;,&#xA;  &#34;state&#34;: {&#xA;      // Предикаты&#xA;  },&#xA;  &#34;request&#34;: {&#xA;    // Спецификация запроса, mode xml или xpath&#xA;  },&#xA;  &#34;response&#34;: {&#xA;    &#34;mode&#34;: &#34;xml-proxy&#34;,&#xA;    &#34;uri&#34;: &#34;http://some.host/api/cl/get_partner_lead_info&#34;,&#xA;    &#34;patch&#34;: {&#xA;      &#34;/env/someTag&#34;: &#34;${/some/requestTag}&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DSL предикатов валидации JSON и XML&lt;/h3&gt; &#xA;&lt;p&gt;в режимах jlens и xpath поддерживается следующее:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;a&#34;: {&#34;==&#34;: &#34;some value&#34;}, //полное соответствие&#xA;  &#34;b&#34;: {&#34;!=&#34;: &#34;some value&#34;}, //не равно&#xA;  &#34;c&#34;: {&#34;&amp;gt;&#34;: 42} | {&#34;&amp;gt;=&#34;: 42} | {&#34;&amp;lt;&#34;: 42} | {&#34;&amp;lt;=&#34;: 42}, //сравнения, только для чисел, комбинируются&#xA;  &#34;d&#34;: {&#34;~=&#34;: &#34;\d+&#34;}, //сопоставление с regexp,&#xA;  &#34;e&#34;: {&#34;size&#34;: 10}, //длина, для массивов и строк&#xA;  &#34;f&#34;: {&#34;exists&#34;: true} //проверка существования&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ключами в таких объектах является либо путь в json (&#34;a.b.[0].c&#34;) либо xpath (&#34;/a/b/c&#34;) Замечание: в данный момент функции сравнения могут некорректно работать с xpath, указывающими на XML атрибуты. Обойти проблему модно проверкой на существование/несуществование: &lt;code&gt;/tag/otherTag/[@attr=&#39;2&#39;]&#34;: {&#34;exists&#34;: true}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;в режиме jlens дополнительно поддерживаются следующие операции:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;    &#34;g&#34;: {&#34;[_]&#34;: [&#34;1&#34;, 2, true]}, //поле должно содержать одно из перечисленых значений&#xA;    &#34;h&#34;: {&#34;![_]&#34;: [&#34;1&#34;, 2, true]} //поле НЕ должно содержать одно из перечисленых знаечний&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;в режиме xpath дополнительно поддерживаются следующие операции:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  &#34;/some/tag&#34;: {&#34;cdata&#34;: {&#34;==&#34;: &#34;test&#34;}}, //валидация на полное совпадение CDATA, аргумент должен быть СТРОКОЙ&#xA;  &#34;/some/tag&#34;: {&#34;cdata&#34;: {&#34;~=&#34;: &#34;\d+&#34;}}, //валидация DATA регуляркой, аргумент должен быть СТРОКОЙ&#xA;  &#34;/some/tag&#34;: {&#34;jcdata&#34;: {&#34;a&#34;: {&#34;==&#34;: 42}}}, //валидируем содержимое CDATA как JSON, поддерживаются все доступные предикаты&#xA;  &#34;/other/tag&#34;: {&#34;xcdata&#34;: {&#34;/b&#34;: {&#34;==&#34;: 42}}} //валидируем содержимое CDATA как XML, поддерживаются все доступные предикаты&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;в режиме web_form поддерживаются ТОЛЬКО следующие операции: &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;~=&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;[_]&lt;/code&gt;, &lt;code&gt;![_]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Эмуляция GRPC сервисов&lt;/h2&gt; &#xA;&lt;p&gt;Как это устроено под капотом: При создании мока вложеные в запрос proto файлы парсятся и преобразуются в json-представление protobuf схемы. В базе хранится именно json-представление, а не оригинальный proto файл. Первое срабатывание мока может занимать немного больше времени, чем последующие, т.к. при первом срабатывании из json-представляения генерируется декодер protobuf сообщений. После декодирования данные преобразуются в json, который проверяется json-предикатами, задаными в поле requestPredicates. Если условия выполняются - то json из response.data (в режиме fill) сериализуется в protobuf и отдаётся в качестве ответа.&lt;/p&gt; &#xA;&lt;p&gt;Алгоритм работы:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Поиск мока(-ов) по имени метода&lt;/li&gt; &#xA; &lt;li&gt;Валидация body&lt;/li&gt; &#xA; &lt;li&gt;Поиск state по предикату&lt;/li&gt; &#xA; &lt;li&gt;Подстановка значений в шаблон ответа&lt;/li&gt; &#xA; &lt;li&gt;Модификация state&lt;/li&gt; &#xA; &lt;li&gt;Отдача response&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Конфигурация GRPC заглушек&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;    &#34;name&#34;: &#34;Sample stub&#34;,&#xA;    &#34;scope&#34;: &#34;..&#34;,&#xA;    &#34;service&#34;: &#34;test&#34;,&#xA;    &#34;methodName&#34;: &#34;/pos-loans/api/cl/get_partner_lead_info&#34;,&#xA;    &#34;seed&#34;: {&#xA;        &#34;integrationId&#34;: &#34;%{randomString(20)}&#34; //пример&#xA;    },&#xA;    &#34;state&#34;: {&#xA;      // Предикаты&#xA;    },&#xA;    &#34;requestCodecs&#34;: &#34;..&#34;, //proto-файл схемы запроса в base64&#xA;    &#34;requestClass&#34;: &#34;..&#34;, //имя типа запроса из proto файла&#xA;    &#34;responseCodecs&#34;: &#34;..&#34;, //proto-файл схемы ответа в base64&#xA;    &#34;responseClass&#34;: &#34;..&#34;, //имя типа ответа из proto файла&#xA;    &#34;requestPredicates&#34;: {&#xA;        &#34;meta.id&#34;: {&#34;==&#34;: 42}&#xA;    },&#xA;    &#34;persist&#34;: {&#xA;      // Модификации состояния&#xA;    },&#xA;    &#34;response&#34;: {&#xA;        &#34;mode&#34;: &#34;fill&#34;,&#xA;        &#34;data&#34;: {&#xA;            &#34;code&#34;: 0,&#xA;            &#34;credit_amount&#34;: 802400,&#xA;            &#34;credit_term&#34;: 120,&#xA;            &#34;interest_rate&#34;: 13.9,&#xA;            &#34;partnum&#34;: &#34;CL3.15&#34;&#xA;        },&#xA;        &#34;delay&#34;: &#34;1 second&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Эмуляция шинных сервисов&lt;/h2&gt; &#xA;&lt;p&gt;Алгоритм работы:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Поиск мока по source&lt;/li&gt; &#xA; &lt;li&gt;Поиск state по предикату&lt;/li&gt; &#xA; &lt;li&gt;Валидация входящего сообщения&lt;/li&gt; &#xA; &lt;li&gt;Подстановка значений в шаблон ответа&lt;/li&gt; &#xA; &lt;li&gt;Модификация state&lt;/li&gt; &#xA; &lt;li&gt;Отправка response&lt;/li&gt; &#xA; &lt;li&gt;Выполнение колбеков (см. раздел &#34;конфигурация колбеков&#34;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Конфигурация&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tinkoff/mockingbird/main/message-brokers.md&#34;&gt;Работа с очередями&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Конфигурация мока&lt;/h3&gt; &#xA;&lt;p&gt;Для input поддерживаются режимы:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;raw&lt;/li&gt; &#xA; &lt;li&gt;json&lt;/li&gt; &#xA; &lt;li&gt;xml&lt;/li&gt; &#xA; &lt;li&gt;jlens&lt;/li&gt; &#xA; &lt;li&gt;xpath&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Для output поддерживаются режимы:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;raw&lt;/li&gt; &#xA; &lt;li&gt;json&lt;/li&gt; &#xA; &lt;li&gt;xml&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;name&#34;: &#34;Пришла весна&#34;, &#xA;  &#34;service&#34;: &#34;test&#34;,&#xA;  &#34;source&#34;: &#34;rmq_example_autobroker_decision&#34;, //source из конфига&#xA;  &#34;input&#34;: {&#xA;    &#34;mode&#34;: .. //как для HTTP заглушек&#xA;    &#34;payload&#34;: .. //как body для HTTP заглушек&#xA;  },&#xA;  &#34;state&#34;: {&#xA;    // Предикаты&#xA;  },&#xA;  &#34;persist&#34;: { //Опционально&#xA;    // Модификации состояния&#xA;  },&#xA;  &#34;destination&#34;: &#34;rmq_example_q1&#34;, // destination из конфига, опционально&#xA;  &#34;output&#34;: { //Опционально  &#xA;    &#34;mode&#34;: &#34;raw&#34;,&#xA;    &#34;payload&#34;: &#34;..&#34;,&#xA;    &#34;delay&#34;: &#34;1 second&#34;&#xA;  },&#xA;  &#34;callback&#34;: { .. }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Конфигурация колбеков&lt;/h3&gt; &#xA;&lt;p&gt;Для имитации поведения реального мира иногда нужно выполнить вызов HTTP сервиса (пример - забрать GBO когда приходит сообщение) или отправлять дополнительные сообщения в очереди. Для этого можно использовать колбеки. Результат вызова сервиса можно при необходимости распарсить и сохранить в состояние. Коллбеки используют состяние вызвавшего.&lt;/p&gt; &#xA;&lt;h4&gt;Вызов HTTP метода&lt;/h4&gt; &#xA;&lt;p&gt;Для request поддерживаются режимы&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;no_body&lt;/li&gt; &#xA; &lt;li&gt;raw&lt;/li&gt; &#xA; &lt;li&gt;json&lt;/li&gt; &#xA; &lt;li&gt;xml&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Для response поддерживаются режимы&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;json&lt;/li&gt; &#xA; &lt;li&gt;xml&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Обратите внимание! В всю цепочку колбеков передаётся первоначальный стейт, он не изменяется блоком perist (!!!)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;type&#34;: &#34;http&#34;,&#xA;  &#34;request&#34;: {&#xA;    &#34;url&#34;: &#34;http://some.host/api/v2/peka&#34;,&#xA;    &#34;method&#34;: &#34;POST&#34;,&#xA;    &#34;headers&#34;: {&#34;Content-Type&#34;: &#34;application/json&#34;},&#xA;    &#34;mode&#34;: &#34;json&#34;,&#xA;    &#34;body&#34;: {&#xA;      &#34;trace_id&#34;: &#34;42&#34;,&#xA;      &#34;account_number&#34;: &#34;228&#34;&#xA;    }&#xA;  },&#xA;  &#34;responseMode&#34;: &#34;json&#34; | &#34;xml&#34;, //Обязательно только при наличии блока persist&#xA;  &#34;persist&#34;: { //Опционально&#xA;    // Модификации состояния&#xA;  },&#xA;  &#34;delay&#34;: &#34;1 second&#34;, //Задержка ПЕРЕД выполнением колбека, опционально&#xA;  &#34;callback&#34;: { .. } //Опционально&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Отправка сообщения&lt;/h4&gt; &#xA;&lt;p&gt;Для output поддерживаются режимы:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;raw&lt;/li&gt; &#xA; &lt;li&gt;json&lt;/li&gt; &#xA; &lt;li&gt;xml&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;type&#34;: &#34;message&#34;,&#xA;  &#34;destination&#34;: &#34;rmq_example_q1&#34;, // destination из конфига&#xA;  &#34;output&#34;: {&#xA;    &#34;mode&#34;: &#34;raw&#34;,&#xA;    &#34;payload&#34;: &#34;..&#34;&#xA;  },&#xA;  &#34;callback&#34;: { .. } //Опционально&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>apache/incubator-celeborn</title>
    <updated>2022-12-01T01:44:16Z</updated>
    <id>tag:github.com,2022-12-01:/apache/incubator-celeborn</id>
    <link href="https://github.com/apache/incubator-celeborn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Celeborn is an elastic and high-performance service for shuffle and spilled data.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Celeborn (Incubating)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/incubator-celeborn/actions/workflows/maven.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/incubator-celeborn/actions/workflows/maven.yml/badge.svg?sanitize=true&#34; alt=&#34;Celeborn CI&#34;&gt;&lt;/a&gt;&lt;br&gt; Celeborn is dedicated to improving the efficiency and elasticity of different map-reduce engines and provides an elastic, high-efficient management service for shuffle data.&lt;/p&gt; &#xA;&lt;h2&gt;Internals&lt;/h2&gt; &#xA;&lt;h3&gt;Architecture&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/assets/img/rss.jpg&#34; alt=&#34;Celeborn architecture&#34;&gt; Celeborn has three primary components: Master, Worker, and Client. Master manages all resources and syncs shard states with each other based on Raft. Worker processes read-write requests and merges data for each reducer. LifecycleManager maintains metadata of each shuffle and runs within the Spark driver.&lt;/p&gt; &#xA;&lt;h3&gt;Feature&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Disaggregate Compute and storage.&lt;/li&gt; &#xA; &lt;li&gt;Push-based shuffle write and merged shuffle read.&lt;/li&gt; &#xA; &lt;li&gt;High availability and high fault tolerance.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Shuffle Process&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/assets/img/shuffle-procedure.jpg&#34; alt=&#34;Celeborn shuffle&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Mappers lazily ask LifecycleManager to registerShuffle.&lt;/li&gt; &#xA; &lt;li&gt;LifecycleManager requests slots from Master.&lt;/li&gt; &#xA; &lt;li&gt;Workers reserve slots and create corresponding files.&lt;/li&gt; &#xA; &lt;li&gt;Mappers get worker locations from LifecycleManager.&lt;/li&gt; &#xA; &lt;li&gt;Mappers push data to specified workers.&lt;/li&gt; &#xA; &lt;li&gt;Workers merge and replicate data to its peer.&lt;/li&gt; &#xA; &lt;li&gt;Workers flush to disk periodically.&lt;/li&gt; &#xA; &lt;li&gt;Mapper tasks accomplish and trigger MapperEnd event.&lt;/li&gt; &#xA; &lt;li&gt;When all mapper tasks are complete, workers commit files.&lt;/li&gt; &#xA; &lt;li&gt;Reducers ask for file locations.&lt;/li&gt; &#xA; &lt;li&gt;Reducers read shuffle data.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Load Balance&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/assets/img/rss_load_balance.jpg&#34; alt=&#34;Load Balance&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We introduce slots to achieve load balance. We will equally distribute partitions on every Celeborn worker by tracking slots usage. The Slot is a logical concept in Celeborn Worker that represents how many partitions can be allocated on each Celeborn Worker. Celeborn Worker&#39;s slot count is decided by &lt;code&gt;total usable disk size / average shuffle file size&lt;/code&gt;. Celeborn worker&#39;s slot count decreases when a partition is allocated and increments when a partition is freed.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Celeborn supports Spark 2.4/3.0/3.1/3.2/3.3 and only tested under Java 8.&lt;/p&gt; &#xA;&lt;p&gt;Build for Spark&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./dev/make-distribution.sh -Pspark-2.4/-Pspark-3.0/-Pspark-3.1/-Pspark-3.2/-Pspark-3.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;package apache-celeborn-${project.version}-bin.tgz will be generated.&lt;/p&gt; &#xA;&lt;h3&gt;Package Details&lt;/h3&gt; &#xA;&lt;p&gt;Build procedure will create a compressed package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    ├── RELEASE                         &#xA;    ├── bin                             &#xA;    ├── conf                            &#xA;    ├── master-jars                     &#xA;    ├── worker-jars                     &#xA;    ├── sbin                            &#xA;    └── spark          // Spark client jars&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Celeborn server is compatible with all supported Spark versions. You can run different Spark versions with the same Celeborn server. It doesn&#39;t matter whether Celeborn server is compiled with -Pspark-2.4/3.0/3.1/3.2/3.3. However, Celeborn client must be consistent with the version of the Spark. For example, if you are running Spark 2.4, you must compile Celeborn client with -Pspark-2.4; if you are running Spark 3.2, you must compile Celeborn client with -Pspark-3.2.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Celeborn cluster composes of Master and Worker nodes, the Master supports both single and HA mode(Raft-based) deployments.&lt;/p&gt; &#xA;&lt;h3&gt;Deploy Celeborn&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Unzip the tarball to &lt;code&gt;$CELEBORN_HOME&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modify environment variables in &lt;code&gt;$CELEBORN_HOME/conf/celeborn-env.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;EXAMPLE:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;#!/usr/bin/env bash&#xA;CELEBORN_MASTER_MEMORY=4g&#xA;CELEBORN_WORKER_MEMORY=2g&#xA;CELEBORN_WORKER_OFFHEAP_MEMORY=4g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Modify configurations in &lt;code&gt;$CELEBORN_HOME/conf/celeborn-defaults.conf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;EXAMPLE: single master cluster&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;# used by client and worker to connect to master&#xA;celeborn.master.endpoints clb-master:9097&#xA;&#xA;# used by master to bootstrap&#xA;celeborn.master.host clb-master&#xA;celeborn.master.port 9097&#xA;&#xA;celeborn.metrics.enabled true&#xA;celeborn.worker.flush.buffer.size 256k&#xA;celeborn.worker.storage.dirs /mnt/disk1/,/mnt/disk2&#xA;# If your hosts have disk raid or use lvm, set celeborn.worker.monitor.disk.enabled to false&#xA;celeborn.worker.monitor.disk.enabled false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;EXAMPLE: HA cluster&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;# used by client and worker to connect to master&#xA;celeborn.master.endpoints clb-1:9097,clb-2:9098,clb-3:9099&#xA;&#xA;# used by master nodes to bootstrap, every node should know the topology of whole cluster, for each node,&#xA;# `celeborn.ha.master.node.id` should be unique, and `celeborn.ha.master.node.&amp;lt;id&amp;gt;.host` is required&#xA;celeborn.ha.enabled true&#xA;celeborn.ha.master.node.id 1&#xA;celeborn.ha.master.node.1.host clb-1&#xA;celeborn.ha.master.node.1.port 9097&#xA;celeborn.ha.master.node.1.ratis.port 9872&#xA;celeborn.ha.master.node.2.host clb-2&#xA;celeborn.ha.master.node.2.port 9098&#xA;celeborn.ha.master.node.2.ratis.port 9873&#xA;celeborn.ha.master.node.3.host clb-3&#xA;celeborn.ha.master.node.3.port 9099&#xA;celeborn.ha.master.node.3.ratis.port 9874&#xA;celeborn.ha.master.ratis.raft.server.storage.dir /mnt/disk1/rss_ratis/&#xA;&#xA;celeborn.metrics.enabled true&#xA;celeborn.worker.flush.buffer.size 256k&#xA;celeborn.worker.storage.dirs /mnt/disk1/,/mnt/disk2&#xA;# If your hosts have disk raid or use lvm, set celeborn.worker.monitor.disk.enabled to false&#xA;celeborn.worker.monitor.disk.enabled false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Copy Celeborn and configurations to all nodes&lt;/li&gt; &#xA; &lt;li&gt;Start Celeborn master &lt;code&gt;$CELEBORN_HOME/sbin/start-master.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start Celeborn worker For single master cluster : &lt;code&gt;$CELEBORN_HOME/sbin/start-worker.sh rss://&amp;lt;master-host&amp;gt;:&amp;lt;master-port&amp;gt;&lt;/code&gt; For HA cluster :&lt;code&gt;$CELEBORN_HOME/sbin/start-worker.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If Celeborn start success, the output of Master&#39;s log should be like this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-angular2html&#34;&gt;22/10/08 19:29:11,805 INFO [main] Dispatcher: Dispatcher numThreads: 64&#xA;22/10/08 19:29:11,875 INFO [main] TransportClientFactory: mode NIO threads 64&#xA;22/10/08 19:29:12,057 INFO [main] Utils: Successfully started service &#39;MasterSys&#39; on port 9097.&#xA;22/10/08 19:29:12,113 INFO [main] Master: Metrics system enabled.&#xA;22/10/08 19:29:12,125 INFO [main] HttpServer: master: HttpServer started on port 9098.&#xA;22/10/08 19:29:12,126 INFO [main] Master: Master started.&#xA;22/10/08 19:29:57,842 INFO [dispatcher-event-loop-19] Master: Registered worker&#xA;Host: 192.168.15.140&#xA;RpcPort: 37359&#xA;PushPort: 38303&#xA;FetchPort: 37569&#xA;ReplicatePort: 37093&#xA;SlotsUsed: 0()&#xA;LastHeartbeat: 0&#xA;Disks: {/mnt/disk1=DiskInfo(maxSlots: 6679, committed shuffles 0 shuffleAllocations: Map(), mountPoint: /mnt/disk1, usableSpace: 448284381184, avgFlushTime: 0, activeSlots: 0) status: HEALTHY dirs , /mnt/disk3=DiskInfo(maxSlots: 6716, committed shuffles 0 shuffleAllocations: Map(), mountPoint: /mnt/disk3, usableSpace: 450755608576, avgFlushTime: 0, activeSlots: 0) status: HEALTHY dirs , /mnt/disk2=DiskInfo(maxSlots: 6713, committed shuffles 0 shuffleAllocations: Map(), mountPoint: /mnt/disk2, usableSpace: 450532900864, avgFlushTime: 0, activeSlots: 0) status: HEALTHY dirs , /mnt/disk4=DiskInfo(maxSlots: 6712, committed shuffles 0 shuffleAllocations: Map(), mountPoint: /mnt/disk4, usableSpace: 450456805376, avgFlushTime: 0, activeSlots: 0) status: HEALTHY dirs }&#xA;WorkerRef: null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploy Spark client&lt;/h3&gt; &#xA;&lt;p&gt;Copy $CELEBORN_HOME/spark/*.jar to $SPARK_HOME/jars/&lt;/p&gt; &#xA;&lt;h3&gt;Spark Configuration&lt;/h3&gt; &#xA;&lt;p&gt;To use Celeborn, following spark configurations should be added.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;spark.shuffle.manager org.apache.spark.shuffle.celeborn.RssShuffleManager&#xA;# must use kryo serializer because java serializer do not support relocation&#xA;spark.serializer org.apache.spark.serializer.KryoSerializer&#xA;&#xA;# celeborn master&#xA;spark.celeborn.master.endpoints clb-1:9097,clb-2:9098,clb-3:9099&#xA;spark.shuffle.service.enabled false&#xA;&#xA;# options: hash, sort&#xA;# Hash shuffle writer use (partition count) * (celeborn.push.buffer.size) * (spark.executor.cores) memory.&#xA;# Sort shuffle writer use less memory than hash shuffle writer, if your shuffle partition count is large, try to use sort hash writer.  &#xA;spark.celeborn.shuffle.writer.mode hash&#xA;&#xA;# we recommend set spark.celeborn.push.replicate.enabled to true to enable server-side data replication &#xA;spark.celeborn.push.replicate.enabled true&#xA;&#xA;# Support for Spark AQE only tested under Spark 3&#xA;# we recommend set localShuffleReader to false to get better performance of Celeborn&#xA;spark.sql.adaptive.localShuffleReader.enabled false&#xA;&#xA;# we recommend enabling aqe support to gain better performance&#xA;spark.sql.adaptive.enabled true&#xA;spark.sql.adaptive.skewJoin.enabled true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Best Practice&lt;/h3&gt; &#xA;&lt;p&gt;If you want to set up a production-ready Celeborn cluster, your cluster should have at least 3 masters and at least 4 workers. Masters and works can be deployed on the same node but should not deploy multiple masters or workers on the same node. See more detail in &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/docs/configuration.md&#34;&gt;CONFIGURATIONS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Support Spark Dynamic Allocation&lt;/h3&gt; &#xA;&lt;p&gt;We provide a patch to enable users to use Spark with both Dynamic Resource Allocation(DRA) and Celeborn. For Spark2.x check &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/assets/spark-patch/RSS_RDA_spark2.patch&#34;&gt;Spark2 Patch&lt;/a&gt;.&lt;br&gt; For Spark3.x check &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/assets/spark-patch/RSS_RDA_spark3.patch&#34;&gt;Spark3 Patch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Metrics&lt;/h3&gt; &#xA;&lt;p&gt;Celeborn has various metrics. &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/METRICS.md&#34;&gt;METRICS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community and Support&lt;/h2&gt; &#xA;&lt;h3&gt;Subscribe Mailing Lists&lt;/h3&gt; &#xA;&lt;p&gt;Mail List is the most recognized form of communication in Apache community. Contact us through the following mailing list.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Scope&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;mailto:dev@celeborn.apache.org&#34;&gt;dev@celeborn.apache.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Development-related discussions&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;mailto:dev-subscribe@celeborn.apache.org&#34;&gt;Subscribe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;mailto:dev-unsubscribe@celeborn.apache.org&#34;&gt;Unsubscribe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://mail-archives.apache.org/mod_mbox/celeborn-dev/&#34;&gt;Archives&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Report Issues or Submit Pull Request&lt;/h3&gt; &#xA;&lt;p&gt;If you meet any questions, feel free to file a 🔗&lt;a href=&#34;https://issues.apache.org/jira/projects/CELEBORN/issues&#34;&gt;Jira Ticket&lt;/a&gt; or connect us on Slack 🔗&lt;a href=&#34;https://join.slack.com/t/apachecelebor-kw08030/shared_invite/zt-1ju3hd5j8-4Z5keMdzpcVMspe4UJzF4Q&#34;&gt;Slack&lt;/a&gt; and fix it by submitting a 🔗&lt;a href=&#34;https://github.com/apache/incubator-celeborn/pulls&#34;&gt;Pull Request&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to Contribute&lt;/h3&gt; &#xA;&lt;p&gt;This is an active open-source project. We are always open to developers who want to use the system or contribute to it. See more detail in &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-celeborn/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;NOTICE&lt;/h2&gt; &#xA;&lt;p&gt;If you need to fully restart a Celeborn cluster in HA mode, you must clean ratis meta storage first because ratis meta will store expired states of the last running cluster.&lt;/p&gt; &#xA;&lt;p&gt;Here are some instructions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Stop all workers.&lt;/li&gt; &#xA; &lt;li&gt;Stop all masters.&lt;/li&gt; &#xA; &lt;li&gt;Clean all master&#39;s ratis meta storage directory(celeborn.ha.master.ratis.raft.server.storage.dir).&lt;/li&gt; &#xA; &lt;li&gt;Start all masters.&lt;/li&gt; &#xA; &lt;li&gt;Start all workers.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>