<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-03T01:45:56Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>akka/akka-samples</title>
    <updated>2023-02-03T01:45:56Z</updated>
    <id>tag:github.com,2023-02-03:/akka/akka-samples</id>
    <link href="https://github.com/akka/akka-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Akka Sample Projects&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Akka Sample Projects&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a number of projects that illustrate various usages of Akka. Samples are written in Scala and Java and use sbt or maven for build definitions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lambdaworks/zio-elasticsearch</title>
    <updated>2023-02-03T01:45:56Z</updated>
    <id>tag:github.com,2023-02-03:/lambdaworks/zio-elasticsearch</id>
    <link href="https://github.com/lambdaworks/zio-elasticsearch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ZIO Elasticsearch is a type-safe, testable and streaming-friendly ZIO native Elasticsearch client.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/scala-2.13.10-blue?logo=scala&amp;amp;color=red&#34; alt=&#34;scala-version&#34;&gt; &lt;a href=&#34;https://github.com/lambdaworks/zio-elasticsearch/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/lambdaworks/zio-elasticsearch/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ZIO Elasticsearch&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;ZIO Elasticsearch is a type-safe, testable and streaming-friendly ZIO native Elasticsearch client.&lt;/p&gt; &#xA;&lt;p&gt;The library depends on sttp as an HTTP client for executing requests, and other ZIO libraries such as ZIO Schema and ZIO Prelude.&lt;/p&gt; &#xA;&lt;p&gt;The following versions are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scala: 2.12+&lt;/li&gt; &#xA; &lt;li&gt;ZIO: 2&lt;/li&gt; &#xA; &lt;li&gt;Elasticsearch: 7&lt;/li&gt; &#xA; &lt;li&gt;JVM 11+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Elastic Request&lt;/h3&gt; &#xA;&lt;p&gt;We can represent an Elasticsearch request as a generic data type that returns a value of type &lt;code&gt;A&lt;/code&gt;. The library offers a DSL for creating these requests, by specifying their required parameters. For example, we can create a request for deleting a document with a specified index as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;deleteById(IndexName(&#34;index&#34;), DocumentId(&#34;documentId&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see above, index names and document IDs are represented with &lt;code&gt;IndexName&lt;/code&gt; and &lt;code&gt;DocumentId&lt;/code&gt; respectively, using new types from ZIO Prelude, in order to increase type-safety with no runtime overhead. &lt;code&gt;IndexName&lt;/code&gt; also validates the passed string according to Elasticsearch&#39;s naming criteria at compile-time using the &lt;code&gt;apply&lt;/code&gt; method, or with &lt;code&gt;make&lt;/code&gt; at runtime when dealing with a runtime value as an argument.&lt;/p&gt; &#xA;&lt;p&gt;All the DSL methods for request creation can be brought into scope with the following import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import zio.elasticsearch.ElasticRequest._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For methods receiving or returning a document of custom type &lt;code&gt;A&lt;/code&gt;, you must create a schema for &lt;code&gt;A&lt;/code&gt;. Here is an example of creating a schema for a custom type &lt;code&gt;EmployeeDocument&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import zio.schema.{DeriveSchema, Schema}&#xA;&#xA;final case class EmployeeDocument(id: String, name: String, degree: String, age: Int)&#xA;&#xA;object EmployeeDocument {&#xA;  implicit val schema: Schema[EmployeeDocument] = DeriveSchema.gen[EmployeeDocument]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As long as we have the implicit schema value in scope, we can call the aforementioned methods, such as &lt;code&gt;getById&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import EmployeeDocument._&#xA;&#xA;getById[EmployeeDocument](IndexName(&#34;index&#34;), DocumentId(&#34;documentId&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Elastic Query&lt;/h3&gt; &#xA;&lt;p&gt;In order to execute Elasticsearch query requests, both for searching and deleting by query, you first must specify the type of the query along with the corresponding parameters for that type. Queries are described with the &lt;code&gt;ElasticQuery&lt;/code&gt; data type, which can be constructed from the DSL methods found under the following import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import zio.elasticsearch.ElasticQuery._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Query DSL methods that require a field solely accept field types that are defined as Elasticsearch primitives. You can pass field names simply as strings, or you can use the type-safe query methods that make use of ZIO Schema&#39;s accessors. An example with a &lt;code&gt;term&lt;/code&gt; query is shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;term(&#34;name&#34;, &#34;foo bar&#34;)&#xA;&#xA;// type-safe method&#xA;term(EmployeeDocument.name, &#34;foo bar&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also represent a field from nested structures with type-safe query methods, using the &lt;code&gt;/&lt;/code&gt; operator on accessors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import zio.elasticsearch.ElasticQueryAccessorBuilder&#xA;import zio.elasticsearch.ElasticQuery._&#xA;import zio.schema.annotation.fieldName&#xA;import zio.schema.{DeriveSchema, Schema}&#xA;&#xA;final case class Name(&#xA;  @fieldName(&#34;first_name&#34;)&#xA;  firstName: String,&#xA;  @fieldName(&#34;last_name&#34;)&#xA;  lastName: String&#xA;)&#xA;&#xA;object Name {&#xA;  implicit val schema = DeriveSchema.gen[Name]&#xA;&#xA;  val (firstName, lastName) = schema.makeAccessors(ElasticQueryAccessorBuilder)&#xA;}&#xA;&#xA;final case class EmployeeDocument(id: String, name: Name, degree: String, age: Int)&#xA;&#xA;object EmployeeDocument {&#xA;  implicit val schema = DeriveSchema.gen[EmployeeDocument]&#xA;&#xA;  val (id, name, degree, age) = schema.makeAccessors(ElasticQueryAccessorBuilder)&#xA;}&#xA;&#xA;matches(&#34;name.first_name&#34;, &#34;foo&#34;)&#xA;&#xA;// type-safe method&#xA;matches(EmployeeDocument.name / Name.firstName, &#34;foo bar&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Type-safe query methods also have a &lt;code&gt;multiField&lt;/code&gt; parameter, in case you want to use one in queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;term(&#34;degree.keyword&#34;, &#34;baz&#34;)&#xA;&#xA;// type-safe method&#xA;term(EmployeeDocument.degree, multiField = Some(&#34;keyword&#34;), &#34;baz&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, after describing a query, you can pass it to the &lt;code&gt;search&lt;/code&gt;/&lt;code&gt;deleteByQuery&lt;/code&gt; method to obtain the Elastic request corresponding to that query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;search(IndexName(&#34;index&#34;), term(&#34;name.first_name.keyword&#34;, &#34;foo&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fluent API&lt;/h3&gt; &#xA;&lt;p&gt;Both Elastic requests and queries offer a fluent API, so that you can provide optional parameters in chained method calls for each request or query. For example, if we wanted to add routing and refresh parameters to a &lt;code&gt;deleteById&lt;/code&gt; request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;deleteById(IndexName(&#34;index&#34;), DocumentId(&#34;documentId&#34;)).routing(Routing(&#34;routing&#34;)).refreshTrue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like &lt;code&gt;IndexName&lt;/code&gt;, &lt;code&gt;Routing&lt;/code&gt; is a new type that mustn&#39;t be an empty string.&lt;/p&gt; &#xA;&lt;p&gt;And if we wanted to specify lower and upper bounds for a &lt;code&gt;range&lt;/code&gt; query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;range(EmployeeDocument.age).gte(18).lt(100)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Elastic Executor&lt;/h3&gt; &#xA;&lt;p&gt;In order to get the functional effect of executing a specified Elasticsearch request, you must call the &lt;code&gt;execute&lt;/code&gt; method defined on it, which returns a &lt;code&gt;ZIO&lt;/code&gt; that requires an &lt;code&gt;ElasticExecutor&lt;/code&gt;, fails with a &lt;code&gt;Throwable&lt;/code&gt; and returns the relevant value &lt;code&gt;A&lt;/code&gt; for that request.&lt;/p&gt; &#xA;&lt;p&gt;Elastic requests for creating and deleting return &lt;code&gt;CreationOutcome&lt;/code&gt; and &lt;code&gt;DeletionOutcome&lt;/code&gt; respectively if no other meaningful value could be returned, notifying us on the success of the request. Any other kind of error is returned as a &lt;code&gt;Throwable&lt;/code&gt; in the error channel of &lt;code&gt;ZIO&lt;/code&gt; for that Elastic request.&lt;/p&gt; &#xA;&lt;p&gt;If you want to execute multiple Elasticsearch requests in a single API call, you need to use the &lt;code&gt;bulk&lt;/code&gt; method on those Elastic requests, and call &lt;code&gt;execute&lt;/code&gt; on that bulk request instead.&lt;/p&gt; &#xA;&lt;p&gt;To provide the dependency on &lt;code&gt;ElasticExecutor&lt;/code&gt;, you must pass one of the &lt;code&gt;ZLayer&lt;/code&gt;s from the following import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import zio.elasticsearch.ElasticExecutor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, if you want to execute requests on a server running on &lt;code&gt;localhost&lt;/code&gt; and port &lt;code&gt;9200&lt;/code&gt;, you can provide the &lt;code&gt;live&lt;/code&gt; ZLayer to your effect, along with a &lt;code&gt;SttpBackend&lt;/code&gt; and an &lt;code&gt;ElasticConfig&lt;/code&gt; layer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import sttp.client3.SttpBackend&#xA;import sttp.client3.httpclient.zio.HttpClientZioBackend&#xA;import zio.elasticsearch.{ElasticConfig, ElasticExecutor}&#xA;&#xA;val effect: RIO[ElasticExecutor, Boolean] = exists(IndexName(&#34;index&#34;), DocumentId(&#34;document&#34;)).execute&#xA;&#xA;effect.provide(&#xA;  HttpClientZioBackend.layer(),&#xA;  ZLayer.succeed(ElastichConfig(&#34;localhost&#34;, 9200)) &amp;gt;&amp;gt;&amp;gt; ElasticExecutor.live,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the ElasticConfig arguments are the same as specified above, you can simply omit the &lt;code&gt;ElasticConfig&lt;/code&gt; layer and replace &lt;code&gt;ElasticExecutor.live&lt;/code&gt; with &lt;code&gt;ElasticExecutor.local&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;For testing purposes, you can use &lt;code&gt;ElasticExecutor.test&lt;/code&gt;, which is a mocked Elasticsearch executor that doesn&#39;t require an HTTP backend.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// The Elasticsearch requests are executed locally&#xA;effect.provide(&#xA;  HttpClientZioBackend.layer(),&#xA;  ElasticExecutor.local&#xA;)&#xA;&#xA;// The Elasticsearch requests are executed on a mocked executor&#xA;effect.provideLayer(ElasticExecutor.test)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;For a full-fledged example using this library, you can check out the &lt;a href=&#34;https://raw.githubusercontent.com/lambdaworks/zio-elasticsearch/main/modules/example&#34;&gt;example&lt;/a&gt; module, which contains an application with both a description and instructions on how to run it.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lambdaworks/zio-elasticsearch/main/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zio/zio-openai</title>
    <updated>2023-02-03T01:45:56Z</updated>
    <id>tag:github.com,2023-02-03:/zio/zio-openai</id>
    <link href="https://github.com/zio/zio-openai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZIO OpenAI&lt;/h1&gt; &#xA;&lt;p&gt;Library for using the &lt;a href=&#34;https://beta.openai.com/docs/introduction/overview&#34;&gt;OpenAI API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zio/zio/wiki/Project-Stages&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project%20Stage-Development-green.svg?sanitize=true&#34; alt=&#34;Development&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/zio/zio-openai/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Badge&#34;&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-openai_2.13/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-openai_2.13.svg?label=Sonatype%20Release&#34; alt=&#34;Sonatype Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-openai_2.13/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-openai_2.13.svg?label=Sonatype%20Snapshot&#34; alt=&#34;Sonatype Snapshots&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/dev.zio/zio-openai-docs_2.13&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/dev.zio/zio-openai-docs_2.13/javadoc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zio/zio-openai&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/zio/zio-openai?style=social&#34; alt=&#34;ZIO OpenAI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This library provides Scala data types and ZIO services for using the OpenAI API. The &lt;a href=&#34;https://github.com/zivergetech/zio-openai/tree/main/zio-openai-examples/src/main/scala/zio/openai/examples&#34;&gt;examples&lt;/a&gt; directory contains a few examples of how to use the different features of the library.&lt;/p&gt; &#xA;&lt;p&gt;The following example is the translation of &lt;a href=&#34;https://beta.openai.com/docs/quickstart&#34;&gt;OpenAI&#39;s official quickstart example&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import zio.{Console, ZIO, ZIOAppDefault}&#xA;import zio.openai._&#xA;import zio.openai.model.CreateCompletionRequest.Prompt&#xA;import zio.openai.model.Temperature&#xA;&#xA;object Quickstart extends ZIOAppDefault {&#xA;&#xA;  def generatePrompt(animal: String): Prompt =&#xA;    Prompt.String {&#xA;      s&#34;&#34;&#34;Suggest three names for an animal that is a superhero.&#xA;         |&#xA;         |Animal: Cat&#xA;         |Names: Captain Sharpclaw, Agent Fluffball, The Incredible Feline&#xA;         |Animal: Dog&#xA;         |Names: Ruff the Protector, Wonder Canine, Sir Barks-a-Lot&#xA;         |Animal: ${animal.capitalize}&#xA;         |Names:&#34;&#34;&#34;.stripMargin&#xA;    }&#xA;&#xA;  def loop =&#xA;    for {&#xA;      animal &amp;lt;- Console.readLine(&#34;Animal: &#34;)&#xA;      result &amp;lt;- Completions.createCompletion(&#xA;        model = &#34;text-davinci-003&#34;,&#xA;        prompt = generatePrompt(animal),&#xA;        temperature = Temperature(0.6)&#xA;      )&#xA;      _ &amp;lt;- Console.printLine(&#34;Names: &#34; + result.choices.flatMap(_.text.toOption).mkString(&#34;, &#34;))&#xA;    } yield ()&#xA;&#xA;  override def run =&#xA;    loop.forever.provide(Completions.default)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Completions.default&lt;/code&gt; layer initializes the OpenAI client with the default zio-http client configuration and uses ZIO&#39;s &lt;a href=&#34;https://degoes.net/articles/zio-config&#34;&gt;built-in configuration system&lt;/a&gt; to get the OpenAI API key. The default configuration provider looks for the API Key in the &lt;code&gt;OPENAI_APIKEY&lt;/code&gt; environment variable or the &lt;code&gt;openAI.apiKey&lt;/code&gt; system property.&lt;/p&gt; &#xA;&lt;p&gt;If your project is using &lt;code&gt;zio-http&lt;/code&gt; for other purposes as well and you already have a &lt;code&gt;Client&lt;/code&gt; layer set up, you can use the &lt;code&gt;live&lt;/code&gt; variants of the layers (&lt;code&gt;Completions.live&lt;/code&gt;) to share the same client.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Start by adding &lt;code&gt;zio-openai&lt;/code&gt; as a dependency to your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-openai&#34; % &#34;&amp;lt;version&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Learn more on the &lt;a href=&#34;https://zio.dev/zio-flow/&#34;&gt;ZIO OpenAI homepage&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For the general guidelines, see ZIO &lt;a href=&#34;https://zio.dev/about/contributing&#34;&gt;contributor&#39;s guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://zio.dev/about/code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Come chat with us on &lt;a href=&#34;https://discord.gg/2ccFBr4&#34; title=&#34;Discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629491597070827530?logo=discord&#34; alt=&#34;Badge-Discord&#34; title=&#34;chat on discord&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zio/zio-openai/main/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>