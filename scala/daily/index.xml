<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-04T01:48:06Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Chisel-blocks/register_template</title>
    <updated>2023-06-04T01:48:06Z</updated>
    <id>tag:github.com,2023-06-04:/Chisel-blocks/register_template</id>
    <link href="https://github.com/Chisel-blocks/register_template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Template instance generated by init_module.sh from chisel_blocks_utils&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Description of scala module version control principle with git&lt;/h1&gt; &#xA;&lt;p&gt;Generated by init_module.sh of Chisel-blocs-utils, &lt;a href=&#34;https://github.com/Chisel-blocks/chisel-blocks-utils&#34;&gt;https://github.com/Chisel-blocks/chisel-blocks-utils&lt;/a&gt; , 20210130&lt;/p&gt; &#xA;&lt;h2&gt;Principle of operation:&lt;/h2&gt; &#xA;&lt;p&gt;All modules version controlled with this method can be used effortlessly and recursively as git submodules inside similar modules&lt;/p&gt; &#xA;&lt;p&gt;The method of use is &lt;em&gt;always&lt;/em&gt; the same&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;./init_submodules.sh&lt;/code&gt; (if any)&lt;/li&gt; &#xA; &lt;li&gt;Publish locally the submodules you want to use. (embedded to init_submodules.sh)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./configure &amp;amp;&amp;amp; make&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Version strings:&lt;/h2&gt; &#xA;&lt;p&gt;In build.sbt, the version of the current module is of from &#34;module-&#xA; &lt;commit-hash&gt;&#xA;  -SNAPHOT&#34; It is created with line: &#xA;  &lt;code&gt;version := scala.sys.process.Process(&#34;git rev-parse --short HEAD&#34;).!!.mkString.replaceAll(&#34;\\s&#34;, &#34;&#34;)+&#34;-SNAPSHOT&#34;&lt;/code&gt;&#xA; &lt;/commit-hash&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dependencies on similar submodules are defined with the function gitSubmoduleHashSnapshotVersion and with the dependency definitions &lt;code&gt;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;hbwif&#34; % gitSubmoduleHashSnapshotVersion(modulename&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This dependency is satisfied only if there is a locally published (sbt publishLocal) submodule with the submodule hash of the current git submodule.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OBS1&lt;/strong&gt;: Every time a submodule is updated, it must be published locally. See init_submodules.sh for reference. Make it recursive if needed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OBS2&lt;/strong&gt;: If submodules are edited and committed, the changes are visible at the top level ONLY if ALL the entire hierarchy of submodules from bottom module to top are git-added, git-committed and git-pushed. This is how submodules normally operate.&lt;/p&gt; &#xA;&lt;h2&gt;Add your module readme here&lt;/h2&gt; &#xA;&lt;p&gt;Lorem ipsum...&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>debasishg/tradeio3</title>
    <updated>2023-06-04T01:48:06Z</updated>
    <id>tag:github.com,2023-06-04:/debasishg/tradeio3</id>
    <link href="https://github.com/debasishg/tradeio3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sample trading domain model using Scala 3&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tradeio3&lt;/h1&gt; &#xA;&lt;p&gt;Sample trading domain model using Scala 3&lt;/p&gt; &#xA;&lt;h2&gt;Run docker compose&lt;/h2&gt; &#xA;&lt;p&gt;Spins up PostgreSQL in docker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Connect to docker and run psql&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker ps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the container id returned fom docker ps&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker exec -it 2a70a427bec5 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Invoke psql&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;psql -U postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connect to database&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;\c trading;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use database to fetch data&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;select * from accounts;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compile and run tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sbt clean&#xA;$ sbt compile&#xA;$ sbt testOnly&#xA;$ sbt it:testOnly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note running integration tests needs the &lt;code&gt;docker-compose&lt;/code&gt; to run&lt;/p&gt; &#xA;&lt;h2&gt;Run the trading application&lt;/h2&gt; &#xA;&lt;p&gt;The trading application runs with the front office order and execution files as present in &lt;code&gt;modules/core/src/main/resources&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt &#34;project core; runMain tradex.domain.TradeApp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tapir integration&lt;/h2&gt; &#xA;&lt;p&gt;Service integration with tapir is available for selective end-points. Try the instrument query service once the server is started as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt &#34;project core; runMain tradex.domain.Main&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Invoke &lt;a href=&#34;http://localhost:8080/api/instrument/US0378331005&#34;&gt;http://localhost:8080/api/instrument/US0378331005&lt;/a&gt; for a sample instrument query&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Invoke &lt;code&gt;curl -X PUT http://localhost:8080/api/instrument -H &#34;Accept: application/json&#34; -H &#34;Content-Type: application/json&#34; -d @./equity.json&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;with equity.json having the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{&#34;&gt;  &#34;equityData&#34;: {&#xA;    &#34;isin&#34;: &#34;US30303M1027&#34;,&#xA;    &#34;name&#34;: {&#34;value&#34; : &#34;Meta&#34;},&#xA;    &#34;lotSize&#34;: 1,&#xA;    &#34;issueDate&#34;: &#34;2019-08-25T19:10:25&#34;,&#xA;    &#34;unitPrice&#34;: 180.00&#xA;  }&#xA;}```&#xA;&#xA;* Running `TradeApp` will generate trades and insert into trade repository. Run `Main` and invoke http://localhost:8080/api/trade/ibm-123?tradedate=2023-05-28 for a sample trade query&#xA;&#xA;* Invoke http://localhost:8080/docs to use Swagger UI&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>byzer-org/byzer-lang</title>
    <updated>2023-06-04T01:48:06Z</updated>
    <id>tag:github.com,2023-06-04:/byzer-org/byzer-lang</id>
    <link href="https://github.com/byzer-org/byzer-lang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Byzer (former MLSQL): A low-code open-source programming language for data pipeline, analytics and AI.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/byzer-org/byzer-lang/actions/workflows/build_and_test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/byzer-org/byzer-lang/master/images/Byzer_Logo.png&#34; alt=&#34;drawing&#34; width=&#34;200&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Byzer-lang&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Byzer&lt;/strong&gt; (former MLSQL) is a low-code, open-sourced and distributed programming language for data pipeline, analytics and AI in cloud native way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deisgn protocol: Everything is a table.&lt;/strong&gt; Byzer is a SQL-like language, to simplify data pipeline, analytics and AI, combined with built-in algorithms and extensions.&lt;/p&gt; &#xA;&lt;p&gt;We believe that everything is a table, a simple and powerful SQL-like language can significantly reduce human efforts of data development without switching different tools.&lt;/p&gt; &#xA;&lt;h3&gt;Byzer Architecture&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/byzer-org/byzer-lang/master/images/Byzer-arch.png&#34; alt=&#34;Byzer-lang Arch&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can build a data product based on Byzer engine &amp;amp; Byzer-lang without interacting with computing framework directly like Spark in your data APP. Thus will simplify your data app significantly.&lt;/p&gt; &#xA;&lt;p&gt;For example, Byzer org contributes a data app &lt;a href=&#34;https://github.com/byzer-org/byzer-notebook&#34;&gt;Byzer Notebook&lt;/a&gt;, which provides notebook interaction &amp;amp; workflow GUI interaction.&lt;/p&gt; &#xA;&lt;h3&gt;BIP (Byzer Improvement Proposal)&lt;/h3&gt; &#xA;&lt;p&gt;Byzer project uses the &lt;a href=&#34;https://github.com/byzer-org/byzer-lang/wiki&#34;&gt;BIP&lt;/a&gt; for the community collaboration, you can checkout the feature design or architecture design in BIP.&lt;/p&gt; &#xA;&lt;h3&gt;Online Trial&lt;/h3&gt; &#xA;&lt;p&gt;You can access the official website &lt;a href=&#34;https://www.byzer.org/&#34;&gt;https://www.byzer.org/&lt;/a&gt; and try Byzer-lang &amp;amp; Byzer Notebook online.&lt;/p&gt; &#xA;&lt;h3&gt;Download&lt;/h3&gt; &#xA;&lt;p&gt;You can download Byzer engine via:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://download.byzer.org/&#34;&gt;https://download.byzer.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/u/byzer&#34;&gt;Byzer Docker Hub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/byzer-org/byzer-lang/releases&#34;&gt;Github Release&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details, please refer to the &lt;a href=&#34;https://docs.byzer.org/#/byzer-lang/zh-cn/installation/README&#34;&gt;docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;strong&gt;dev/test&lt;/strong&gt; purpose, you can download &lt;a href=&#34;https://docs.byzer.org/#/byzer-lang/zh-cn/installation/server/byzer-all-in-one-deployment&#34;&gt;Byzer All In One Package&lt;/a&gt;, extract and then execute the command below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd {BYZER_HOME}&#xA;$ ./bin/byzer.sh start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And for &lt;strong&gt;production&lt;/strong&gt; purpose, we recommend to use &lt;a href=&#34;https://docs.byzer.org/#/byzer-lang/zh-cn/installation/server/binary-installation&#34;&gt;Byzer Server Package&lt;/a&gt; and deploy it on Hadoop.&lt;/p&gt; &#xA;&lt;p&gt;You can also install &lt;a href=&#34;https://docs.byzer.org/#/byzer-lang/zh-cn/installation/vscode/byzer-vscode-extension-installation&#34;&gt;Byzer VSCode Extension&lt;/a&gt; to use Byzer-lang.&lt;/p&gt; &#xA;&lt;p&gt;For the Docker Image or , please refer to the &lt;a href=&#34;https://docs.byzer.org/#/byzer-lang/zh-cn/installation/README&#34;&gt;docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Byzer Code Example&lt;/h3&gt; &#xA;&lt;p&gt;Below list an example that how to process Github API as a table to get the information of Byzer Org&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Get Github Organization Info&#xA;&#xA;-- set API URL and params&#xA;SET org_name=&#34;byzer-org&#34;;&#xA;SET GITHUB_ORGANIZATION_URL=&#34;https://api.github.com/orgs/${org_name}&#34;;&#xA;&#xA;-- Load Github Organization API as table&#xA;LOAD Rest.`$GITHUB_ORGANIZATION_URL` &#xA; where `config.connect-timeout`=&#34;10s&#34;&#xA; and `config.method`=&#34;GET&#34;&#xA; and `header.accept`=&#34;application/vnd.github.v3+json&#34;&#xA;as github_org;&#xA;&#xA;&#xA;-- decode API response from binary to a json string&#xA;select string(content) as content from github_org as response_content;&#xA;&#xA;-- expand the json string &#xA;run response_content as JsonExpandExt.`` where inputCol=&#34;content&#34; and structColumn=&#34;true&#34; as github_org;&#xA;&#xA;-- retrieve user infomation and process as a table&#xA;select content.* from github_org as org_info;&#xA;&#xA;-- save the table to delta lake&#xA;save overwrite org_info as delta.`github_info_db.byzer_org`;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details about the Byzer-lang grammer, please refer to the user manaual &lt;a href=&#34;https://docs.byzer.org/#/byzer-lang/zh-cn/grammar/outline&#34;&gt;Byzer-lang Grammar&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this repository and clone to local machine&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/{YOUR_GITHUB}/byzer-lang.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Intellj Idea to open the project, choose the scala version &lt;code&gt;2.12.10&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In Intellj Idea Maven Setting, check the profile below&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;gpg&lt;/li&gt; &#xA;   &lt;li&gt;local&lt;/li&gt; &#xA;   &lt;li&gt;scala-2.12&lt;/li&gt; &#xA;   &lt;li&gt;spark-3.0.0&lt;/li&gt; &#xA;   &lt;li&gt;streamingpro-spark-3.0.0-adaptor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click Maven Refresh and wait for Idea load finished&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Find the class &lt;code&gt;tech.mlsql.example.app.LocalSparkServiceApp&lt;/code&gt;, click Debug button then Byzer Engine will be started, then you can access the Byzer Web Console in &lt;a href=&#34;http://localhost:9003/#/&#34;&gt;http://localhost:9003/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;You can refer to the project &lt;a href=&#34;https://github.com/byzer-org/byzer-build&#34;&gt;byzer-org/byzer-build&lt;/a&gt; to check how to build the Byzer engine binary packages and images&lt;/p&gt; &#xA;&lt;h3&gt;How to contribute to Byzer-Lang&lt;/h3&gt; &#xA;&lt;p&gt;If you are planning to contribute to this project, please create an issue at &lt;a href=&#34;https://github.com/byzer-org/byzer-lang/issues&#34;&gt;our Issue page&lt;/a&gt; even if the topic is not related to source code itself (e.g., documentation, new idea and proposal).&lt;/p&gt; &#xA;&lt;p&gt;This is an active open source project for everyone, and we are always open to people who want to use this system or contribute to it.&lt;/p&gt; &#xA;&lt;p&gt;For more details about how to contribute to the Byzer Org, please refer to &lt;a href=&#34;https://docs.byzer.org/#/byzer-lang/zh-cn/appendix/contribute&#34;&gt;How to Contribute&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/byzer-org/byzer-lang/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=byzer-org/byzer-lang&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Slack&lt;/strong&gt;: &lt;a href=&#34;https://byzer-org.slack.com&#34;&gt;byzer-org.slack.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wechat Official Account:&lt;/strong&gt; Byzer Community&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>