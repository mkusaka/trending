<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-15T01:38:58Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>feathr-ai/feathr</title>
    <updated>2022-09-15T01:38:58Z</updated>
    <id>tag:github.com,2022-09-15:/feathr-ai/feathr</id>
    <link href="https://github.com/feathr-ai/feathr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Feathr ‚Äì An Enterprise-Grade, High Performance Feature Store&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Feathr &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; An enterprise-grade, high-performance feature store &lt;/h3&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Important Links: &lt;a href=&#34;https://join.slack.com/t/feathrai/shared_invite/zt-1ffva5u6v-voq0Us7bbKAw873cEzHOSg&#34;&gt;Slack&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/feathr-ai/feathr/discussions&#34;&gt;Discussions&lt;/a&gt;. &lt;a href=&#34;https://feathr-ai.github.io/feathr/&#34;&gt;Docs&lt;/a&gt;. &lt;/h3&gt;  &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/feathr-ai/feathr/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/feathr-ai/feathr/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/feathr-ai/feathr.svg?style=flat&amp;amp;sort=semver&amp;amp;color=blue&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://feathr-ai.github.io/feathr/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-blue.svg?sanitize=true&#34; alt=&#34;Docs Latest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://feathr.readthedocs.io/en/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/readthedocs/feathr?label=Python%20API&#34; alt=&#34;Python API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/6457&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/6457/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Feathr?&lt;/h2&gt; &#xA;&lt;p&gt;Feathr is the feature store that is used in production in LinkedIn for many years and was open sourced in April 2022. It is currently a project under &lt;a href=&#34;https://lfaidata.foundation/blog/2022/09/12/feathr-joins-lf-ai-data-as-new-sandbox-project/&#34;&gt;LF AI &amp;amp; Data Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read our announcement on &lt;a href=&#34;https://engineering.linkedin.com/blog/2022/open-sourcing-feathr---linkedin-s-feature-store-for-productive-m&#34;&gt;Open Sourcing Feathr&lt;/a&gt; and &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/feathr-linkedin-s-feature-store-is-now-available-on-azure/&#34;&gt;Feathr on Azure&lt;/a&gt;, as well as the &lt;a href=&#34;https://lfaidata.foundation/blog/2022/09/12/feathr-joins-lf-ai-data-as-new-sandbox-project/&#34;&gt;announcement from LF AI &amp;amp; Data Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feathr lets you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Define features&lt;/strong&gt; based on raw data sources (batch and streaming) using pythonic APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Register and get features by names&lt;/strong&gt; during model training and model inference.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Share features&lt;/strong&gt; across your team and company.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feathr automatically computes your feature values and joins them to your training data, using point-in-time-correct semantics to avoid data leakage, and supports materializing and deploying your features for use online in production.&lt;/p&gt; &#xA;&lt;h2&gt;üåü Feathr Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battle tested in production for more than 6 years:&lt;/strong&gt; LinkedIn has been using Feathr in production for over 6 years and have a dedicated team improving it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalable with built-in optimizations:&lt;/strong&gt; For example, based on some internal use case, Feathr can process billions of rows and PB scale data with built-in optimizations such as bloom filters and salted joins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich support for point-in-time joins and aggregations:&lt;/strong&gt; Feathr has high performant built-in operators designed for Feature Store, including time-based aggregation, sliding window joins, look-up features, all with point-in-time correctness.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly customizable user-defined functions (UDFs)&lt;/strong&gt; with native PySpark and Spark SQL support to lower the learning curve for data scientists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pythonic APIs&lt;/strong&gt; to access everything with low learning curve; Integrated with model building so data scientists can be productive from day one.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Derived Features&lt;/strong&gt; which is a unique capability across all the feature store solutions. This encourage feature consumers to build features on existing features and encouraging feature reuse.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich type system&lt;/strong&gt; including support for embeddings for advanced machine learning/deep learning scenarios. One of the common use cases is to build embeddings for customer profiles, and those embeddings can be reused across an organization in all the machine learning applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native cloud integration&lt;/strong&gt; with simplified and scalable architecture, which is illustrated in the next section.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature sharing and reuse made easy:&lt;/strong&gt; Feathr has built-in feature registry so that features can be easily shared across different teams and boost team productivity.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚òÅÔ∏è Running Feathr on Cloud with a few simple steps&lt;/h2&gt; &#xA;&lt;p&gt;Feathr has native integrations with Databricks and Azure Synapse:&lt;/p&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://feathr-ai.github.io/feathr/how-to-guides/azure-deployment-arm.html&#34;&gt;Feathr ARM deployment guide&lt;/a&gt; to run Feathr on Azure. This allows you to quickly get started with automated deployment using Azure Resource Manager template.&lt;/p&gt; &#xA;&lt;p&gt;If you want to set up everything manually, you can checkout the &lt;a href=&#34;https://feathr-ai.github.io/feathr/how-to-guides/azure-deployment-cli.html&#34;&gt;Feathr CLI deployment guide&lt;/a&gt; to run Feathr on Azure. This allows you to understand what is going on and set up one resource at a time.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/quickstart_databricks.md&#34;&gt;Quick Start Guide for Feathr on Databricks&lt;/a&gt; to run Feathr with Databricks.&lt;/li&gt; &#xA; &lt;li&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/quickstart_synapse.md&#34;&gt;Quick Start Guide for Feathr on Azure Synapse&lt;/a&gt; to run Feathr with Azure Synapse.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìì Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For more details on Feathr, read our &lt;a href=&#34;https://feathr-ai.github.io/feathr/&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For Python API references, read the &lt;a href=&#34;https://feathr.readthedocs.io/&#34;&gt;Python API Reference&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For technical talks on Feathr, see the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/talks/Feathr%20Feature%20Store%20Talk.pdf&#34;&gt;slides here&lt;/a&gt;. The recording is &lt;a href=&#34;https://www.youtube.com/watch?v=gZg01UKQMTY&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Install Feathr Client Locally&lt;/h2&gt; &#xA;&lt;p&gt;If you want to install Feathr client in a python environment, use this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install feathr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use the latest code from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/feathr-ai/feathr.git#subdirectory=feathr_project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üî° Feathr Highlighted Capabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/concepts/feathr-capabilities.md&#34;&gt;Feathr Full Capabilities&lt;/a&gt; for more examples. Below are a few selected ones:&lt;/p&gt; &#xA;&lt;h3&gt;Feathr UI&lt;/h3&gt; &#xA;&lt;p&gt;Feathr provides an intuitive UI so you can search and explore all the available features and their corresponding lineages.&lt;/p&gt; &#xA;&lt;p&gt;You can use Feathr UI to search features, identify data sources, track feature lineages and manage access controls. Check out the latest live demo &lt;a href=&#34;https://aka.ms/feathrdemo&#34;&gt;here&lt;/a&gt; to see what Feathr UI can do for you. Use one of following accounts when you are prompted to login:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A work or school organization account, includes Office 365 subscribers.&lt;/li&gt; &#xA; &lt;li&gt;Microsoft personal account, this means an account can access to Skype, Outlook.com, OneDrive, and Xbox LIVE.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/images/feathr-ui.png&#34; alt=&#34;Feathr UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information on the Feathr UI and the registry behind it, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/concepts/feature-registry.md&#34;&gt;Feathr Feature Registry&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Rich UDF Support&lt;/h3&gt; &#xA;&lt;p&gt;Feathr has highly customizable UDFs with native PySpark and Spark SQL integration to lower learning curve for data scientists:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add_new_dropoff_and_fare_amount_column(df: DataFrame):&#xA;    df = df.withColumn(&#34;f_day_of_week&#34;, dayofweek(&#34;lpep_dropoff_datetime&#34;))&#xA;    df = df.withColumn(&#34;fare_amount_cents&#34;, df.fare_amount.cast(&#39;double&#39;) * 100)&#xA;    return df&#xA;&#xA;batch_source = HdfsSource(name=&#34;nycTaxiBatchSource&#34;,&#xA;                        path=&#34;abfss://feathrazuretest3fs@feathrazuretest3storage.dfs.core.windows.net/demo_data/green_tripdata_2020-04.csv&#34;,&#xA;                        preprocessing=add_new_dropoff_and_fare_amount_column,&#xA;                        event_timestamp_column=&#34;new_lpep_dropoff_datetime&#34;,&#xA;                        timestamp_format=&#34;yyyy-MM-dd HH:mm:ss&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Defining Window Aggregation Features with Point-in-time correctness&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agg_features = [Feature(name=&#34;f_location_avg_fare&#34;,&#xA;                        key=location_id,                          # Query/join key of the feature(group)&#xA;                        feature_type=FLOAT,&#xA;                        transform=WindowAggTransformation(        # Window Aggregation transformation&#xA;                            agg_expr=&#34;cast_float(fare_amount)&#34;,&#xA;                            agg_func=&#34;AVG&#34;,                       # Apply average aggregation over the window&#xA;                            window=&#34;90d&#34;)),                       # Over a 90-day window&#xA;                ]&#xA;&#xA;agg_anchor = FeatureAnchor(name=&#34;aggregationFeatures&#34;,&#xA;                           source=batch_source,&#xA;                           features=agg_features)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Define features on top of other features - Derived Features&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Compute a new feature(a.k.a. derived feature) on top of an existing feature&#xA;derived_feature = DerivedFeature(name=&#34;f_trip_time_distance&#34;,&#xA;                                 feature_type=FLOAT,&#xA;                                 key=trip_key,&#xA;                                 input_features=[f_trip_distance, f_trip_time_duration],&#xA;                                 transform=&#34;f_trip_distance * f_trip_time_duration&#34;)&#xA;&#xA;# Another example to compute embedding similarity&#xA;user_embedding = Feature(name=&#34;user_embedding&#34;, feature_type=DENSE_VECTOR, key=user_key)&#xA;item_embedding = Feature(name=&#34;item_embedding&#34;, feature_type=DENSE_VECTOR, key=item_key)&#xA;&#xA;user_item_similarity = DerivedFeature(name=&#34;user_item_similarity&#34;,&#xA;                                      feature_type=FLOAT,&#xA;                                      key=[user_key, item_key],&#xA;                                      input_features=[user_embedding, item_embedding],&#xA;                                      transform=&#34;cosine_similarity(user_embedding, item_embedding)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Define Streaming Features&lt;/h3&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://feathr-ai.github.io/feathr/how-to-guides/streaming-source-ingestion.html&#34;&gt;Streaming Source Ingestion Guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Point in Time Joins&lt;/h3&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://feathr-ai.github.io/feathr/concepts/point-in-time-join.html&#34;&gt;Point-in-time Correctness and Point-in-time Join in Feathr&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Running Feathr Examples&lt;/h3&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/samples/product_recommendation_demo.ipynb&#34;&gt;quick start Jupyter Notebook&lt;/a&gt; to try it out. There is also a companion &lt;a href=&#34;https://feathr-ai.github.io/feathr/quickstart_synapse.html&#34;&gt;quick start guide&lt;/a&gt; containing a bit more explanation on the notebook.&lt;/p&gt; &#xA;&lt;h2&gt;üó£Ô∏è Tech Talks on Feathr&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gZg01UKQMTY&#34;&gt;Introduction to Feathr - Beginner&#39;s guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mybuild.microsoft.com/en-US/sessions/5bdff7d5-23e6-4f0d-9175-da8325d05c2a?source=sessions&#34;&gt;Document Intelligence using Azure Feature Store (Feathr) and SynapseML &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2KSM-NLfvY0&#34;&gt;Notebook tutorial: Build a Product Recommendation Machine Learning Model with Feathr Feature Store&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Cloud Integrations and Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/images/architecture.png&#34; alt=&#34;Architecture Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feathr component&lt;/th&gt; &#xA;   &lt;th&gt;Cloud Integrations&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Offline store ‚Äì Object Store&lt;/td&gt; &#xA;   &lt;td&gt;Azure Blob Storage, Azure ADLS Gen2, AWS S3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Offline store ‚Äì SQL&lt;/td&gt; &#xA;   &lt;td&gt;Azure SQL DB, Azure Synapse Dedicated SQL Pools, Azure SQL in VM, Snowflake&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Streaming Source&lt;/td&gt; &#xA;   &lt;td&gt;Kafka, EventHub&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Online store&lt;/td&gt; &#xA;   &lt;td&gt;Redis, &lt;a href=&#34;https://feathr-ai.github.io/feathr/how-to-guides/jdbc-cosmos-notes.html#using-cosmosdb-as-the-online-store&#34;&gt;Azure Cosmos DB&lt;/a&gt;, Aerospike (coming soon)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Feature Registry and Governance&lt;/td&gt; &#xA;   &lt;td&gt;Azure Purview, ANSI SQL such as Azure SQL Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compute Engine&lt;/td&gt; &#xA;   &lt;td&gt;Azure Synapse Spark Pools, Databricks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Machine Learning Platform&lt;/td&gt; &#xA;   &lt;td&gt;Azure Machine Learning, Jupyter Notebook, Databricks Notebook&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Format&lt;/td&gt; &#xA;   &lt;td&gt;Parquet, ORC, Avro, JSON, Delta Lake, CSV&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Credentials&lt;/td&gt; &#xA;   &lt;td&gt;Azure Key Vault&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üöÄ Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support streaming features with transformation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support common data sources and sinks. Read more in the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/#%EF%B8%8F-cloud-integrations-and-architecture&#34;&gt;Cloud Integrations and Architecture&lt;/a&gt; part.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support feature store UI, including Lineage and Search functionalities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support a sandbox Feathr environment for better getting started experience&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support online transformation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More Feathr online client libraries such as Java&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support feature versioning&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support feature monitoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support feature data deletion and retention&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üë®‚Äçüë®‚Äçüë¶‚Äçüë¶ Community Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;Build for the community and build by the community. Check out &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/CONTRIBUTING.md&#34;&gt;Community Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üì¢ Slack Channel&lt;/h2&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://feathrai.slack.com&#34;&gt;Slack channel&lt;/a&gt; for questions and discussions (or click the &lt;a href=&#34;https://join.slack.com/t/feathrai/shared_invite/zt-1ffva5u6v-voq0Us7bbKAw873cEzHOSg&#34;&gt;invitation link&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/constellation</title>
    <updated>2022-09-15T01:38:58Z</updated>
    <id>tag:github.com,2022-09-15:/ucb-bar/constellation</id>
    <link href="https://github.com/ucb-bar/constellation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Chisel RTL generator for network-on-chip interconnects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Constellation NoC Generator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;http://constellation.readthedocs.io&#34;&gt;constellation.readthedocs.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Constellation is a Chisel NoC RTL generator framework designed to provide the core interconnect fabric for heterogeneous many-core, many-accelerator SoCs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Constellation generates &lt;strong&gt;packet-switched wormhole-routed networks with virtual networks and credit-based flow control&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Constellation supports &lt;strong&gt;arbitrary directed graph network topologies&lt;/strong&gt;, including &lt;strong&gt;irregular&lt;/strong&gt; and &lt;strong&gt;hierarchical&lt;/strong&gt; network topologies&lt;/li&gt; &#xA; &lt;li&gt;Constellation includes a &lt;strong&gt;routing algorithm verifier and routing-table compiler&lt;/strong&gt;, which can verify and generate deadlock-free routing tables for arbitrary topologies&lt;/li&gt; &#xA; &lt;li&gt;Constellation is a &lt;strong&gt;protocol-independent transport layer&lt;/strong&gt;, yet is capable of compliant deadlock-free transport of protocols like &lt;strong&gt;AXI-4&lt;/strong&gt; and &lt;strong&gt;TileLink&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Constellation supports drop-in &lt;strong&gt;integration in Chipyard/Rocketchip SoCs&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Constellation is &lt;strong&gt;rigorously tested&lt;/strong&gt;, with almost 100 different tests across as many network configurations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ucb-bar/constellation/master/docs/source/diagrams/bigsoc.svg?raw=true&#34; alt=&#34;Constellation SoC&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Research was partially funded by SLICE Lab industrial sponsors and affiliates Amazon, Apple, Google, Intel, Qualcomm, and Western Digital. The views and opinions of authors expressed herein do not necessarily state or reflect those of the United States Government or any agency thereof.&lt;/p&gt;</summary>
  </entry>
</feed>