<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-29T01:35:54Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SpinalHDL/VexiiRiscv</title>
    <updated>2025-04-29T01:35:54Z</updated>
    <id>tag:github.com,2025-04-29:/SpinalHDL/VexiiRiscv</id>
    <link href="https://github.com/SpinalHDL/VexiiRiscv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Like VexRiscv, but, Harder, Better, Faster, Stronger&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VexiiRiscv&lt;/h1&gt; &#xA;&lt;p&gt;VexiiRiscv (Vex2Risc5) is the successor of VexRiscv. Work in progress, here are its currently implemented features :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RV32/64 I[M][A][F][D][C][S][U][B]&lt;/li&gt; &#xA; &lt;li&gt;Up to 5.24 coremark/Mhz 2.50 dhystone/Mhz&lt;/li&gt; &#xA; &lt;li&gt;In-order execution&lt;/li&gt; &#xA; &lt;li&gt;early [late-alu]&lt;/li&gt; &#xA; &lt;li&gt;single/dual issue (can be asymmetric)&lt;/li&gt; &#xA; &lt;li&gt;BTB, GShare, RAS branch prediction&lt;/li&gt; &#xA; &lt;li&gt;cacheless fetch/load/store&lt;/li&gt; &#xA; &lt;li&gt;Optional I$, D$&lt;/li&gt; &#xA; &lt;li&gt;Optional SV32/SV39 MMU&lt;/li&gt; &#xA; &lt;li&gt;Can run linux / buildroot / Debian&lt;/li&gt; &#xA; &lt;li&gt;Pipeline visualisation in simulation via Konata&lt;/li&gt; &#xA; &lt;li&gt;Lock step simulation via RVLS and Spike&lt;/li&gt; &#xA; &lt;li&gt;AXI4, Wishbone, Tilelink memory busses (RVA is not available in some configs, see the RTD doc SoC main page)&lt;/li&gt; &#xA; &lt;li&gt;... and many other things&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is a demonstration of a quad core VexiiRiscv running debian on FPGA : &lt;a href=&#34;https://youtu.be/dR_jqS13D2c?t=112&#34;&gt;https://youtu.be/dR_jqS13D2c?t=112&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Overall the goal is to have a design which can stretch (through configuration) from Cortex M0 up to a Cortex A53 and potentialy beyond.&lt;/p&gt; &#xA;&lt;p&gt;Here is the online documentation :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spinalhdl.github.io/VexiiRiscv-RTD/master/VexiiRiscv/Introduction/#&#34;&gt;https://spinalhdl.github.io/VexiiRiscv-RTD/master/VexiiRiscv/Introduction/#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spinalhdl.github.io/VexiiRiscv-RTD/master/VexiiRiscv/HowToUse/index.html&#34;&gt;https://spinalhdl.github.io/VexiiRiscv-RTD/master/VexiiRiscv/HowToUse/index.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is the VexiiRiscv&#39;s scala doc (auto-generated from the source code) :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spinalhdl.github.io/VexiiRiscv/doc/vexiiriscv/index.html&#34;&gt;https://spinalhdl.github.io/VexiiRiscv/doc/vexiiriscv/index.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A roadmap is available here :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SpinalHDL/VexiiRiscv/issues/1&#34;&gt;https://github.com/SpinalHDL/VexiiRiscv/issues/1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;TL;DR Getting started&lt;/h1&gt; &#xA;&lt;p&gt;The quickest way for getting started is to pull the Docker image with all the dependencies installed&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the self contained tutorial for a comprehensive step by step instruction manual with screenshots: &lt;a href=&#34;https://spinalhdl.github.io/VexiiRiscv-RTD/master/VexiiRiscv/Tutorial/index.html&#34;&gt;https://spinalhdl.github.io/VexiiRiscv-RTD/master/VexiiRiscv/Tutorial/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After running the generation you&#39;ll find a file named &#34;VexiiRiscv.v&#34; in the root of the repository folder, which you can drag into your Quartus or whatever.&lt;/p&gt; &#xA;&lt;p&gt;We decided to not start covering FPGA boards because there&#39;s just too many, so it&#39;s up to you to define your pin configuration for your specific FPGA board&lt;/p&gt; &#xA;&lt;p&gt;If you want to know what else you can do with sbt, please refer to the complete documentation.&lt;/p&gt; &#xA;&lt;h1&gt;Rebuild the Docker container&lt;/h1&gt; &#xA;&lt;p&gt;In case you wanna rebuild leviathan&#39;s Docker container you can run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build . -f docker/Dockerfile -t vexiiriscv --progress=plain&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>