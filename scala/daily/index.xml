<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-31T01:36:49Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zio/zio-kafka</title>
    <updated>2023-10-31T01:36:49Z</updated>
    <id>tag:github.com,2023-10-31:/zio/zio-kafka</id>
    <link href="https://github.com/zio/zio-kafka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Kafka client for ZIO and ZIO Streams&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZIO Kafka&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zio/zio-kafka&#34;&gt;ZIO Kafka&lt;/a&gt; is a Kafka client for ZIO. It provides a purely functional, streams-based interface to the Kafka client and integrates effortlessly with ZIO and ZIO Streams.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zio/zio/wiki/Project-Stages&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project%20Stage-Production%20Ready-brightgreen.svg?sanitize=true&#34; alt=&#34;Production Ready&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/zio/zio-kafka/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Badge&#34;&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-kafka_2.13/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-kafka_2.13.svg?label=Sonatype%20Release&#34; alt=&#34;Sonatype Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-kafka_2.13/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-kafka_2.13.svg?label=Sonatype%20Snapshot&#34; alt=&#34;Sonatype Snapshots&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/dev.zio/zio-kafka-docs_2.13&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/dev.zio/zio-kafka-docs_2.13/javadoc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zio/zio-kafka&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/zio/zio-kafka?style=social&#34; alt=&#34;ZIO Kafka&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Apache Kafka is a distributed event streaming platform that acts as a distributed publish-subscribe messaging system. It enables us to build distributed streaming data pipelines and event-driven applications.&lt;/p&gt; &#xA;&lt;p&gt;Kafka has a mature Java client for producing and consuming events, but it has a low-level API. ZIO Kafka is a ZIO native client for Apache Kafka. It has a high-level streaming API on top of the Java client. So we can produce and consume events using the declarative concurrency model of ZIO Streams.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;In order to use this library, we need to add the following line in our &lt;code&gt;build.sbt&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-kafka&#34;         % &#34;2.6.0&#34;&#xA;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-kafka-testkit&#34; % &#34;2.6.0&#34; % Test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s write a simple Kafka producer and consumer using ZIO Kafka with ZIO Streams. Before everything, we need a running instance of Kafka. We can do that by saving the following docker-compose script in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file and run &lt;code&gt;docker-compose up&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;2&#39;&#xA;services:&#xA;  zookeeper:&#xA;    image: confluentinc/cp-zookeeper:latest&#xA;    environment:&#xA;      ZOOKEEPER_CLIENT_PORT: 2181&#xA;      ZOOKEEPER_TICK_TIME: 2000&#xA;    ports:&#xA;      - 22181:2181&#xA;  &#xA;  kafka:&#xA;    image: confluentinc/cp-kafka:latest&#xA;    depends_on:&#xA;      - zookeeper&#xA;    ports:&#xA;      - 29092:29092&#xA;    environment:&#xA;      KAFKA_BROKER_ID: 1&#xA;      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181&#xA;      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092&#xA;      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT&#xA;      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT&#xA;      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, we can run our ZIO Kafka Streaming application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import zio._&#xA;import zio.kafka.consumer._&#xA;import zio.kafka.producer.{Producer, ProducerSettings}&#xA;import zio.kafka.serde._&#xA;import zio.stream.ZStream&#xA;&#xA;object MainApp extends ZIOAppDefault {&#xA;  val producer: ZStream[Producer, Throwable, Nothing] =&#xA;    ZStream&#xA;      .repeatZIO(Random.nextIntBetween(0, Int.MaxValue))&#xA;      .schedule(Schedule.fixed(2.seconds))&#xA;      .mapZIO { random =&amp;gt;&#xA;        Producer.produce[Any, Long, String](&#xA;          topic = &#34;random&#34;,&#xA;          key = random % 4,&#xA;          value = random.toString,&#xA;          keySerializer = Serde.long,&#xA;          valueSerializer = Serde.string&#xA;        )&#xA;      }&#xA;      .drain&#xA;&#xA;  val consumer: ZStream[Consumer, Throwable, Nothing] =&#xA;    Consumer&#xA;      .plainStream(Subscription.topics(&#34;random&#34;), Serde.long, Serde.string)&#xA;      .tap(r =&amp;gt; Console.printLine(r.value))&#xA;      .map(_.offset)&#xA;      .aggregateAsync(Consumer.offsetBatches)&#xA;      .mapZIO(_.commit)&#xA;      .drain&#xA;&#xA;  def producerLayer =&#xA;    ZLayer.scoped(&#xA;      Producer.make(&#xA;        settings = ProducerSettings(List(&#34;localhost:29092&#34;))&#xA;      )&#xA;    )&#xA;&#xA;  def consumerLayer =&#xA;    ZLayer.scoped(&#xA;      Consumer.make(&#xA;        ConsumerSettings(List(&#34;localhost:29092&#34;)).withGroupId(&#34;group&#34;)&#xA;      )&#xA;    )&#xA;&#xA;  override def run =&#xA;    producer.merge(consumer)&#xA;      .runDrain&#xA;      .provide(producerLayer, consumerLayer)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ziverge.com/blog/introduction-to-zio-kafka/&#34;&gt;An Introduction to ZIO Kafka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scalac.io/streaming-microservices-with-zio-and-kafka/&#34;&gt;Streaming microservices with ZIO and Kafka&lt;/a&gt; by Aleksandar Skrbic (February 2021)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GECv1ONieLw&#34;&gt;ZIO WORLD - ZIO Kafka&lt;/a&gt; by Aleksandar Skrbic (March 2020) â€” Aleksandar Skrbic presented ZIO Kafka, a critical library for the modern Scala developer, which hides some of the complexities of Kafka.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adopters&lt;/h2&gt; &#xA;&lt;p&gt;Here is a partial list of companies using zio-kafka in production.&lt;/p&gt; &#xA;&lt;p&gt;Want to see your company here? &lt;a href=&#34;https://github.com/zio/zio-kafka/edit/master/docs/index.md&#34;&gt;Submit a PR&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.conduktor.io&#34;&gt;Conduktor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kelkoogroup.com&#34;&gt;KelkooGroup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rocker.com&#34;&gt;Rocker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Learn more on the &lt;a href=&#34;https://zio.dev/zio-kafka&#34;&gt;ZIO Kafka homepage&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For the general guidelines, see ZIO &lt;a href=&#34;https://zio.dev/contributor-guidelines&#34;&gt;contributor&#39;s guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://zio.dev/code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Come chat with us on &lt;a href=&#34;https://discord.gg/2ccFBr4&#34; title=&#34;Discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629491597070827530?logo=discord&#34; alt=&#34;Badge-Discord&#34; title=&#34;chat on discord&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This library is heavily inspired and made possible by the research and implementation done in &lt;a href=&#34;https://github.com/akka/alpakka-kafka&#34;&gt;Alpakka Kafka&lt;/a&gt;, a library maintained by the Akka team and originally written as Reactive Kafka by SoftwareMill.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zio/zio-kafka/master/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2021-2023 Itamar Ravid and the zio-kafka contributors.&lt;/p&gt;</summary>
  </entry>
</feed>