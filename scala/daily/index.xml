<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-02T01:44:40Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>twitter/the-algorithm</title>
    <updated>2023-04-02T01:44:40Z</updated>
    <id>tag:github.com,2023-04-02:/twitter/the-algorithm</id>
    <link href="https://github.com/twitter/the-algorithm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code for Twitter&#39;s Recommendation Algorithm&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Twitter Recommendation Algorithm&lt;/h1&gt; &#xA;&lt;p&gt;The Twitter Recommendation Algorithm is a set of services and jobs that are responsible for constructing and serving the Home Timeline. For an introduction to how the algorithm works, please refer to our &lt;a href=&#34;https://blog.twitter.com/engineering/en_us/topics/open-source/2023/twitter-recommendation-algorithm&#34;&gt;engineering blog&lt;/a&gt;. The diagram below illustrates how major services and jobs interconnect.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/docs/system-diagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;These are the main components of the Recommendation Algorithm included in this repository:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Feature&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/scala/com/twitter/simclusters_v2/README.md&#34;&gt;SimClusters&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Community detection and sparse embeddings into those communities.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/twitter/the-algorithm-ml/raw/main/projects/twhin/README.md&#34;&gt;TwHIN&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dense knowledge graph embeddings for Users and Tweets.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/trust_and_safety_models/README.md&#34;&gt;trust-and-safety-models&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Models for detecting NSFW or abusive content.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/scala/com/twitter/interaction_graph/README.md&#34;&gt;real-graph&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Model to predict likelihood of a Twitter User interacting with another User.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/scala/com/twitter/graph/batch/job/tweepcred/README&#34;&gt;tweepcred&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Page-Rank algorithm for calculating Twitter User reputation.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/recos-injector/README.md&#34;&gt;recos-injector&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Streaming event processor for building input streams for &lt;a href=&#34;https://github.com/twitter/GraphJet&#34;&gt;GraphJet&lt;/a&gt; based services.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/graph-feature-service/README.md&#34;&gt;graph-feature-service&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Serves graph features for a directed pair of Users (e.g. how many of User A&#39;s following liked Tweets from User B).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Candidate Source&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/java/com/twitter/search/README.md&#34;&gt;search-index&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Find and rank In-Network Tweets. ~50% of Tweets come from this candidate source.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/cr-mixer/README.md&#34;&gt;cr-mixer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Coordination layer for fetching Out-of-Network tweet candidates from underlying compute services.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/scala/com/twitter/recos/user_tweet_entity_graph/README.md&#34;&gt;user-tweet-entity-graph&lt;/a&gt; (UTEG)&lt;/td&gt; &#xA;   &lt;td&gt;Maintains an in memory User to Tweet interaction graph, and finds candidates based on traversals of this graph. This is built on the &lt;a href=&#34;https://github.com/twitter/GraphJet&#34;&gt;GraphJet&lt;/a&gt; framework. Several other GraphJet based features and candidate sources are located &lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/scala/com/twitter/recos&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/follow-recommendations-service/README.md&#34;&gt;follow-recommendation-service&lt;/a&gt; (FRS)&lt;/td&gt; &#xA;   &lt;td&gt;Provides Users with recommendations for accounts to follow, and Tweets from those accounts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ranking&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/src/python/twitter/deepbird/projects/timelines/scripts/models/earlybird/README.md&#34;&gt;light-ranker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Light ranker model used by search index (Earlybird) to rank Tweets.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/twitter/the-algorithm-ml/raw/main/projects/home/recap/README.md&#34;&gt;heavy-ranker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Neural network for ranking candidate tweets. One of the main signals used to select timeline Tweets post candidate sourcing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tweet mixing &amp;amp; filtering&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/home-mixer/README.md&#34;&gt;home-mixer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main service used to construct and serve the Home Timeline. Built on &lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/product-mixer/README.md&#34;&gt;product-mixer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/visibilitylib/README.md&#34;&gt;visibility-filters&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Responsible for filtering Twitter content to support legal compliance, improve product quality, increase user trust, protect revenue through the use of hard-filtering, visible product treatments, and coarse-grained downranking.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/timelineranker/README.md&#34;&gt;timelineranker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Legacy service which provides relevance-scored tweets from the Earlybird Search Index and UTEG service.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Software framework&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/navi/navi/README.md&#34;&gt;navi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;High performance, machine learning model serving written in Rust.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/product-mixer/README.md&#34;&gt;product-mixer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Software framework for building feeds of content.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twitter/the-algorithm/main/twml/README.md&#34;&gt;twml&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Legacy machine learning framework built on TensorFlow v1.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We include Bazel BUILD files for most components, but not a top level BUILD or WORKSPACE file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We invite the community to submit GitHub issues and pull requests for suggestions on improving the recommendation algorithm. We are working on tools to manage these suggestions and sync changes to our internal repository. Any security concerns or issues should be routed to our official &lt;a href=&#34;https://hackerone.com/twitter&#34;&gt;bug bounty program&lt;/a&gt; through HackerOne. We hope to benefit from the collective intelligence and expertise of the global community in helping us identify issues and suggest improvements, ultimately leading to a better Twitter.&lt;/p&gt; &#xA;&lt;p&gt;Read our blog on the open source initiative &lt;a href=&#34;https://blog.twitter.com/en_us/topics/company/2023/a-new-era-of-transparency-for-twitter&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mkneissl/default-package-weirdness</title>
    <updated>2023-04-02T01:44:40Z</updated>
    <id>tag:github.com,2023-04-02:/mkneissl/default-package-weirdness</id>
    <link href="https://github.com/mkneissl/default-package-weirdness" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A sample for the weirdness of the empty / unnamed package in Scala / Java.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;A sample for the weirdness of the empty / unnamed package in Scala / Java.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://stackoverflow.com/questions/2030148/whats-the-syntax-to-import-a-class-in-a-default-package-in-java&#34;&gt;http://stackoverflow.com/questions/2030148/whats-the-syntax-to-import-a-class-in-a-default-package-in-java&lt;/a&gt; and &lt;a href=&#34;http://stackoverflow.com/questions/9822008/why-is-my-object-not-a-member-of-package-root-if-its-in-a-separate-source-fil&#34;&gt;http://stackoverflow.com/questions/9822008/why-is-my-object-not-a-member-of-package-root-if-its-in-a-separate-source-fil&lt;/a&gt; .&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>databricks-industry-solutions/CHF-care-quality</title>
    <updated>2023-04-02T01:44:40Z</updated>
    <id>tag:github.com,2023-04-02:/databricks-industry-solutions/CHF-care-quality</id>
    <link href="https://github.com/databricks-industry-solutions/CHF-care-quality" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Calculating quality metrics for congestive heart failure, including MS-DRGs creation&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/databricks-industry-solutions/.github/main/profile/solacc_logo_wide.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Congestive Heart Failure Quality Metrics &amp;amp; MS-DRG as a SQL UDF&lt;/h2&gt; &#xA;&lt;p&gt;Patient Risk and Quality are closely intertwined and as a follow up to &lt;a href=&#34;https://github.com/databricks-industry-solutions/hls-patient-risk&#34;&gt;predicting patient risk&lt;/a&gt;, we then determine which organizations are best suited to treat at risk patients for Congestive Heart Failure (CHF).&lt;/p&gt; &#xA;&lt;p&gt;The measure developed is a value between 0 (good) and 1 (bad) for providers who treat patients with CHF. This measure is part of the Preventative Quality Indicators (PQIs) developed by the Agency for Healthcare Research and Quality (AHRQ).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/databricks-industry-solutions/CHF-care-quality/main/images/chf_pqi_flow.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Measuring Quality with PQI Indicators&lt;/h3&gt; &#xA;&lt;p&gt;PQI indicators are typically assigned to an Affordable Care Organization (ACO) and show an organiation&#39;s effectiveness at preventative treatments. For this measure we are determining which organizations have the best score (closest to 0) to treat Congestive Heart Failure.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://raw.githubusercontent.com/databricks-industry-solutions/CHF-care-quality/main/ahrq-chf-notebook&#34;&gt;notebook&lt;/a&gt; we show an example of calculating quality scores for ACOs using CMS claims data.&lt;/p&gt; &#xA;&lt;h3&gt;Calculating MS-DRGs from a UDF for measurement inputs&lt;/h3&gt; &#xA;&lt;p&gt;MS-DRGs are primarily used to represent inpatient claim payments. The ability to transform many inpatient records into a simple representation has its uses in &lt;a href=&#34;https://github.com/databricks-industry-solutions/CHF-care-quality/raw/main/ahrq-chf-notebook/chf-pqi-scoring.sql#L148&#34;&gt;assessing quality metrics&lt;/a&gt; as well as for predictive modeling on complex events.&lt;/p&gt; &#xA;&lt;p&gt;We provide a &lt;a href=&#34;https://raw.githubusercontent.com/databricks-industry-solutions/CHF-care-quality/main/ms-drg-udf&#34;&gt;spark-udf&lt;/a&gt; as a pre-built &lt;a href=&#34;https://github.com/databricks-industry-solutions/CHF-care-quality/releases&#34;&gt;jar&lt;/a&gt; that allows you to run this calculation directly on Databricks.&lt;/p&gt; &#xA;&lt;h3&gt;Project support for CHF Quality Metric &amp;amp; MS-DRGs&lt;/h3&gt; &#xA;&lt;p&gt;Please note the code in this project is provided for your exploration only, and are not formally supported by Databricks with Service Level Agreements (SLAs). They are provided AS-IS and we do not make any guarantees of any kind. Please do not submit a support ticket relating to any issues arising from the use of these projects. The source in this project is provided subject to the Databricks &lt;a href=&#34;https://raw.githubusercontent.com/databricks-industry-solutions/CHF-care-quality/main/LICENSE&#34;&gt;License&lt;/a&gt;. All included or referenced third party libraries are subject to the licenses set forth below.&lt;/p&gt; &#xA;&lt;p&gt;Any issues discovered through the use of this project should be filed as GitHub Issues on the Repo. They will be reviewed as time permits, but there are no formal SLAs for support.&lt;/p&gt;</summary>
  </entry>
</feed>