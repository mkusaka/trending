<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-03T01:38:54Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zio/zio-jdbc</title>
    <updated>2022-11-03T01:38:54Z</updated>
    <id>tag:github.com,2022-11-03:/zio/zio-jdbc</id>
    <link href="https://github.com/zio/zio-jdbc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small, idiomatic ZIO interface to JDBC.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZIO JDBC&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project Stage&lt;/th&gt; &#xA;   &lt;th&gt;CI&lt;/th&gt; &#xA;   &lt;th&gt;Release&lt;/th&gt; &#xA;   &lt;th&gt;Issues&lt;/th&gt; &#xA;   &lt;th&gt;Discord&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zio/zio/wiki/Project-Stages&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project%20Stage-Research-red.svg?sanitize=true&#34; alt=&#34;Project stage&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/zio/zio-jdbc/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-jdbc_2.12/&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-jdbc_2.12.svg?sanitize=true&#34; alt=&#34;Release Artifacts&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://isitmaintained.com/project/zio/zio-jdbc&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/zio/zio-jdbc.svg?sanitize=true&#34; alt=&#34;Is it maintained?&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://discord.gg/2ccFBr4&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629491597070827530?logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;ZIO JDBC&lt;/em&gt; is a small, idiomatic ZIO interface to JDBC, providing a pleasant and developer-friendly experience to low-level JDBC access.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Idiomatic ZIO 2.0 interface to JDBC&lt;/li&gt; &#xA; &lt;li&gt;Secure, with protection against SQL-injection&lt;/li&gt; &#xA; &lt;li&gt;Fully integrated with core libraries including &lt;em&gt;ZIO Schema&lt;/em&gt;, &lt;em&gt;ZIO Config&lt;/em&gt;, &lt;em&gt;ZIO Logging&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Writing Queries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Basic.scala&lt;/code&gt; (see &lt;code&gt;zio.jdbc.examples&lt;/code&gt; in project)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  val age = 42&#xA;&#xA;val ex0: SqlFragment = sql&#34;create table if not exists users(name varchar(255), age int)&#34;&#xA;&#xA;// Creating SQL statements using interpolation:&#xA;val ex1: SqlFragment = sql&#34;select * from users where age = $age&#34;&#xA;&#xA;// Selecting into tuples:&#xA;val ex2: Sql[(String, Int)] = sql&#34;select name, age from users&#34;.as[(String, Int)]&#xA;&#xA;// Inserting from tuples:&#xA;val ex3: SqlFragment = sql&#34;insert into users (name, age)&#34;.values((&#34;John&#34;, 42))&#xA;&#xA;// dropping table&#xA;val ex4: SqlFragment = sql&#34;drop table if exists users&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Executing Statements&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val res1: ZIO[ZConnectionPool, Throwable, Option[(String, Int)]] = &#xA;  transaction {&#xA;    selectOne(sql&#34;select name, age from users where name = &#39;Sherlock Holmes&#39;&#34;.as[(String, Int)])&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating a Connection Pool&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;&#xA; val createZIOPoolConfig: ULayer[ZConnectionPoolConfig] =&#xA;    ZLayer.succeed(ZConnectionPoolConfig.default)&#xA; &#xA;  val properties = Map(&#xA;    &#34;user&#34;     -&amp;gt; &#34;mysql&#34;,&#xA;    &#34;password&#34; -&amp;gt; &#34;mysql&#34;&#xA;  )&#xA; &#xA;  val connectionPool: ZLayer[ZConnectionPoolConfig, Throwable, ZConnectionPool] =&#xA;    ZConnectionPool.mysql(&#34;localhost&#34;, 3306, &#34;mysql&#34;, properties)&#xA; &#xA;  val live: ZLayer[ZConnectionPoolConfig, Throwable, ZConnectionPool] = createZIOPoolConfig &amp;gt;&amp;gt;&amp;gt; connectionPool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Full Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;App.scala&lt;/code&gt; (see &lt;code&gt;zio.jdbc.examples&lt;/code&gt; in project)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;&#xA;import zio._&#xA;import zio.jdbc._&#xA;import zio.schema.Schema&#xA;&#xA;/**&#xA; * You&#39;ll need the appropriate JDBC driver, and a database running.&#xA; */&#xA;object App extends ZIOAppDefault {&#xA;  final case class User(name: String, age: Int)&#xA;  &#xA;  object User {&#xA;    import Schema.Field&#xA;    &#xA;    implicit val schema: Schema[User] =&#xA;      Schema.CaseClass2[String, Int, User](&#xA;        Field(&#34;name&#34;, Schema[String]),&#xA;        Field(&#34;age&#34;, Schema[Int]),&#xA;        (name, age) =&amp;gt; User(name, age),&#xA;        _.name,&#xA;        _.age&#xA;      )&#xA;    &#xA;    // One can derive a jdbc decoder from a zio-schema or&#xA;    implicit val jdbcDecoder: JdbcDecoder[User] = JdbcDecoder.fromSchema&#xA;    &#xA;    // One can derive a jdbc encoder from a zio-schema &#xA;    implicit val jdbcEncoder: JdbcEncoder[User] = JdbcEncoder.fromSchema&#xA;    &#xA;    // a custom decoder from a tuple&#xA;    // implicit val jdbcDecoder = JdbcDecoder[(String, Int)].map[User](t =&amp;gt; User(t._1, t._2))&#xA;  }&#xA;  &#xA;  val create: ZIO[ZConnectionPool, Throwable, Unit] = transaction {&#xA;    execute(Basic.ex0)&#xA;  }&#xA;  &#xA;  val insertRow: ZIO[ZConnectionPool, Throwable, Long] = transaction {&#xA;    insert(Basic.ex3)&#xA;  }&#xA;  &#xA;  val select: ZIO[ZConnectionPool, Throwable, Chunk[User]] = transaction {&#xA;    selectAll(Basic.ex2.as[User])&#xA;  }&#xA;  &#xA;  val drop: ZIO[ZConnectionPool, Throwable, Unit] = transaction {&#xA;    execute(Basic.ex4)&#xA;  }&#xA;  &#xA;  val createZIOPoolConfig: ULayer[ZConnectionPoolConfig] =&#xA;    ZLayer.succeed(ZConnectionPoolConfig.default)&#xA;  &#xA;  val properties = Map(&#xA;    &#34;user&#34;     -&amp;gt; &#34;postgres&#34;,&#xA;    &#34;password&#34; -&amp;gt; &#34;postgres&#34;&#xA;  )&#xA;  &#xA;  /**&#xA;   * Pre defined ZConnection Pools exist for:&#xA;   *  Postgres, SQL Server, Oracle, MySQL and h2&#xA;   *  custom pools, can also be constructed&#xA;   */&#xA;  val connectionPool: ZLayer[ZConnectionPoolConfig, Throwable, ZConnectionPool] =&#xA;    ZConnectionPool.postgres(&#34;localhost&#34;, 5432, &#34;postgres&#34;, properties)&#xA;  &#xA;  val program: ZIO[ZConnectionPool, Throwable, Chunk[User]] = for {&#xA;    _   &amp;lt;- create *&amp;gt; insertRow&#xA;    res &amp;lt;- select&#xA;    _   &amp;lt;- drop&#xA;  } yield res&#xA;  &#xA;  override def run: ZIO[ZEnv with ZIOAppArgs, Any, Any] =&#xA;    for {&#xA;      results &amp;lt;- program.provideLayer(createZIOPoolConfig &amp;gt;&amp;gt;&amp;gt; connectionPool)&#xA;      _       &amp;lt;- Console.printLine(results.mkString(&#34;\n&#34;))&#xA;    } yield ()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To learn more about &lt;em&gt;ZIO JDBC&lt;/em&gt;, check out the following references:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zio.github.io/zio-jdbc/&#34;&gt;Homepage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zio/zio-jdbc/main/.github/CONTRIBUTING.md&#34;&gt;Contributor&#39;s guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zio/zio-jdbc/main/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-jdbc/issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-jdbc/pulls&#34;&gt;Pull Requests&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>guardian/apps-rendering-api-models</title>
    <updated>2022-11-03T01:38:54Z</updated>
    <id>tag:github.com,2022-11-03:/guardian/apps-rendering-api-models</id>
    <link href="https://github.com/guardian/apps-rendering-api-models" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Models for communicating with the Apps Rendering API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;apps-rendering-api-models&lt;/h1&gt; &#xA;&lt;p&gt;These models are used to communicate with the Apps Rendering API&lt;/p&gt; &#xA;&lt;h2&gt;How to release to NPM&lt;/h2&gt; &#xA;&lt;p&gt;This repository uses &lt;a href=&#34;https://github.com/changesets/changesets&#34;&gt;&lt;code&gt;changesets&lt;/code&gt;&lt;/a&gt; to manage versions and releases.&lt;/p&gt; &#xA;&lt;p&gt;To create a changeset, ensure you are using the correct Node (and associated npm) version defined in &lt;a href=&#34;https://raw.githubusercontent.com/guardian/apps-rendering-api-models/main/.nvmrc&#34;&gt;&lt;code&gt;.nvmrc&lt;/code&gt;&lt;/a&gt; and project dependencies installed by running &lt;code&gt;npm install&lt;/code&gt;. Then:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npx changeset&lt;/code&gt;. Select the type of change and enter a description&lt;/li&gt; &#xA; &lt;li&gt;Commit and push the changeset file to your branch&lt;/li&gt; &#xA; &lt;li&gt;When your feature PR is merged to &lt;code&gt;main&lt;/code&gt;, the &lt;a href=&#34;https://raw.githubusercontent.com/guardian/apps-rendering-api-models/main/.github/workflows/changesets.yaml&#34;&gt;changesets action&lt;/a&gt; will open a PR against &lt;code&gt;main&lt;/code&gt; with the details of all unreleased changes. This is a &#34;Release PR&#34;&lt;/li&gt; &#xA; &lt;li&gt;When ready to release, merge the Release PR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to release a Snapshot to NPM and Sonatype&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a branch which has the changes you want to test&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;strong&gt;Prerelease&lt;/strong&gt; using GitHub Releases &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set the Target to your branch&lt;/li&gt; &#xA;   &lt;li&gt;You must also create a tag for the snapshot release. Use the following format: &lt;code&gt;v0.0.0-YYYY-MM-DD-SNAPSHOT&lt;/code&gt;. For example, &lt;code&gt;v0.0.0-2022-10-20-SNAPSHOT&lt;/code&gt;. It is important the tag &lt;strong&gt;begins&lt;/strong&gt; with &lt;code&gt;v&lt;/code&gt; and &lt;strong&gt;ends&lt;/strong&gt; with &lt;code&gt;-SNAPSHOT&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;To automatically release the snapshot to &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;sonatype&lt;/code&gt;, publish the prerelease&lt;/li&gt; &#xA;   &lt;li&gt;Snapshots are released to the &lt;code&gt;snapshot&lt;/code&gt; tag on &lt;code&gt;npm&lt;/code&gt;. You can install them with &lt;code&gt;npm install @guardian/apps-rendering-api-models@snapshot&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to release to Sonatype&lt;/h2&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a Sonatype account with access to the guardian organisation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Having followed the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/guardian/apps-rendering-api-models/main/#how-to-release-to-npm&#34;&gt;How to release to NPM&lt;/a&gt; (including merging the &#34;Release PR&#34;): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;switch to branch &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In the SBT repl:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbtshell&#34;&gt;clean&#xA;project scalaApiModels&#xA;release with-defaults&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>