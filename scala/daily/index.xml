<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-26T01:48:41Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>reibitto/sbt-welcome</title>
    <updated>2023-01-26T01:48:41Z</updated>
    <id>tag:github.com,2023-01-26:/reibitto/sbt-welcome</id>
    <link href="https://github.com/reibitto/sbt-welcome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An SBT plugin for displaying a welcome message and commonly used tasks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SBT Welcome&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;An SBT plugin for displaying a welcome message and commonly used tasks.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;Upon loading SBT, a welcome message is displayed with common tasks for that project. This is particularly useful for first-time contributors who are not yet familiar with a project and its build setup. Rather than leave them wondering &#34;How do I run the benchmarks?&#34;, &#34;How do I build the microsite/docs?&#34;, etc. you can display these commands on startup. Here&#39;s an example of what it can look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/reibitto/sbt-welcome/master/assets/screenshot.png?raw=true&#34; alt=&#34;screenshot&#34; title=&#34;SBT Welcome screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The bullet points are aliases (which are configurable), meaning you can type &lt;code&gt;d&lt;/code&gt; and it&#39;ll run the 4th line item. The aliases are optional, but can be useful for particularly long commands.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to &lt;code&gt;project/plugins.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;addSbtPlugin(&#34;com.github.reibitto&#34; % &#34;sbt-welcome&#34; % &#34;0.3.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;You can type &lt;code&gt;welcome&lt;/code&gt; to re-print the welcome message (rather than reloading the project).&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;An example configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import sbtwelcome._&#xA;&#xA;logo :=&#xA;  s&#34;&#34;&#34;&#xA;     |       ______ _____                   ______&#xA;     |__________  /___  /_   ___      _________  /__________________ ________&#xA;     |__  ___/_  __ \\  __/   __ | /| / /  _ \\_  /_  ___/  __ \\_  __ `__ \\  _ \\&#xA;     |_(__  )_  /_/ / /_     __ |/ |/ //  __/  / / /__ / /_/ /  / / / / /  __/&#xA;     |/____/ /_.___/\\__/     ____/|__/ \\___//_/  \\___/ \\____//_/ /_/ /_/\\___/&#xA;     |&#xA;     |${version.value}&#xA;     |&#xA;     |${scala.Console.YELLOW}Scala ${scalaVersion.value}${scala.Console.RESET}&#xA;     |&#xA;     |&#34;&#34;&#34;.stripMargin&#xA;&#xA;usefulTasks := Seq(&#xA;  UsefulTask(&#34;~compile&#34;, &#34;Compile with file-watch enabled&#34;),&#xA;  UsefulTask(&#34;fmt&#34;, &#34;Run scalafmt on the entire project&#34;),&#xA;  UsefulTask(&#34;publishLocal&#34;, &#34;Publish the sbt plugin locally so that you can consume it from a different project&#34;),&#xA;  UsefulTask(&#34;cli-client/graalvm-native-image:packageBin&#34;, &#34;Create a native executable of the CLI client&#34;),&#xA;  UsefulTask(&#34;benchmarks/jmh:run&#34;, &#34;Run the benchmarks&#34;)&#xA;)&#xA;&#xA;logoColor := scala.Console.MAGENTA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, each task gets auto-assigned an alias (&lt;code&gt;a&lt;/code&gt; through &lt;code&gt;z&lt;/code&gt;). This can be customized (details below).&lt;/p&gt; &#xA;&lt;p&gt;You can embed any other information in the logo, such as the project version with normal Scala string interpolation like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;logo := s&#34;Some Logo ${version.value}\nScala ${scalaVersion.value}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the default colors like so:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;logoColor := scala.Console.RED&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;aliasColor := scala.Console.CYAN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;commandColor := scala.Console.YELLOW&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;descriptionColor := scala.Console.GREEN&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Defining a custom alias&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;UsefulTask(&#34;all root/scalafmtSbt root/scalafmtAll&#34;, &#34;formats all Scala files in project&#34;).alias(&#34;fmt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disabling the welcome message&lt;/h3&gt; &#xA;&lt;p&gt;In CI you may want to suppress the welcome message you prefer slightly less noise. To do so, use the &lt;code&gt;welcomeEnabled&lt;/code&gt; sbt setting like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;welcomeEnabled := false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll probably want to use an environment variable to set this dynamically so that CI and local development have different values.&lt;/p&gt; &#xA;&lt;h3&gt;Further customizing &lt;code&gt;UsefulTask&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Declaring a &lt;code&gt;UsefulTask&lt;/code&gt; without an alias:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;UsefulTask(&#34;task1&#34;, &#34;description1&#34;).noAlias&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rendering the alias differently&lt;/h4&gt; &#xA;&lt;p&gt;You can define your own prefix or suffix with &lt;code&gt;aliasPrefix&lt;/code&gt; and &lt;code&gt;aliasSuffix&lt;/code&gt;. Or if you want full customization, there&#39;s also &lt;code&gt;formatAlias&lt;/code&gt; which accepts an arbitrary function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;UsefulTask(&#34;task1&#34;, &#34;description1&#34;).noAlias.aliasPrefix(&#34;* &#34;)&#xA;&#xA;UsefulTask(&#34;task2&#34;, &#34;description2&#34;).noAlias.aliasSuffix(&#34; &amp;gt; &#34;)&#xA;&#xA;def customFormatFn: String =&amp;gt; String =&#xA;  a =&amp;gt; if (a.isEmpty) &#34;( ) &#34; else s&#34;($a) &#34;&#xA;  &#xA;UsefulTask(&#34;task3&#34;, &#34;description3&#34;).formatAlias(customFormatFn),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logo&lt;/h3&gt; &#xA;&lt;p&gt;If you want to generate a fancy logo for the &lt;code&gt;logo&lt;/code&gt; field, you can use one of the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wi101/embroidery&#34;&gt;embroidery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://patorjk.com/software/taag&#34;&gt;TAAG&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>