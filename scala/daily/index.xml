<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-01T01:35:39Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scala/scala-parallel-collections</title>
    <updated>2025-01-01T01:35:39Z</updated>
    <id>tag:github.com,2025-01-01:/scala/scala-parallel-collections</id>
    <link href="https://github.com/scala/scala-parallel-collections" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parallel collections standard library module for Scala 2.13+&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scala parallel collections&lt;/h1&gt; &#xA;&lt;p&gt;This Scala standard module contains the package &lt;code&gt;scala.collection.parallel&lt;/code&gt;, with all of the parallel collections that used to be part of the Scala standard library (in Scala 2.10 through 2.12).&lt;/p&gt; &#xA;&lt;p&gt;For Scala 3 and Scala 2.13, this module is a separate JAR that can be omitted from projects that do not use parallel collections.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org/overviews/parallel-collections/overview.html&#34;&gt;https://docs.scala-lang.org/overviews/parallel-collections/overview.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://javadoc.io/doc/org.scala-lang.modules/scala-parallel-collections_2.13&#34;&gt;https://javadoc.io/doc/org.scala-lang.modules/scala-parallel-collections_2.13&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintenance status&lt;/h2&gt; &#xA;&lt;p&gt;This module is community-maintained, under the guidance of the Scala team at Akka. If you are interested in participating, please jump right in on issues and pull requests.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To depend on scala-parallel-collections in sbt, add this to your &lt;code&gt;build.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies +=&#xA;  &#34;org.scala-lang.modules&#34; %% &#34;scala-parallel-collections&#34; % &#34;&amp;lt;version&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your code, adding this import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import scala.collection.parallel.CollectionConverters._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will enable use of the &lt;code&gt;.par&lt;/code&gt; method as in earlier Scala versions.&lt;/p&gt; &#xA;&lt;h3&gt;Cross-building: dependency&lt;/h3&gt; &#xA;&lt;p&gt;This module is published only for the Scala 3 and 2.13, so in a cross-built project, the dependency should take this form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies ++= {&#xA;  CrossVersion.partialVersion(scalaVersion.value) match {&#xA;    case Some((2, major)) if major &amp;lt;= 12 =&amp;gt;&#xA;      Seq()&#xA;    case _ =&amp;gt;&#xA;      Seq(&#34;org.scala-lang.modules&#34; %% &#34;scala-parallel-collections&#34; % &#34;&amp;lt;version&amp;gt;&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way of testing &lt;code&gt;scalaVersion&lt;/code&gt; is robust across varying Scala version number formats (nightlies, milestones, release candidates, community build, etc).&lt;/p&gt; &#xA;&lt;h3&gt;Cross-building: source compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;.par&lt;/code&gt; is problematic in a cross-built project, since in Scala 2.13+ the &lt;code&gt;CollectionConverters._&lt;/code&gt; import shown above is necessary, but in earlier Scala versions, that import will not compile.&lt;/p&gt; &#xA;&lt;p&gt;You may able to avoid the problem by directly constructing your parallel collections rather than going through &lt;code&gt;.par&lt;/code&gt;. For other possible workarounds, see &lt;a href=&#34;https://github.com/scala/scala-parallel-collections/issues/22&#34;&gt;https://github.com/scala/scala-parallel-collections/issues/22&lt;/a&gt;, which is still under discussion.&lt;/p&gt; &#xA;&lt;h2&gt;Releasing&lt;/h2&gt; &#xA;&lt;p&gt;As with other Scala standard modules, build and release infrastructure is provided by the &lt;a href=&#34;https://github.com/scala/sbt-scala-module/&#34;&gt;sbt-scala-module&lt;/a&gt; sbt plugin.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kenshoo/metrics-play</title>
    <updated>2025-01-01T01:35:39Z</updated>
    <id>tag:github.com,2025-01-01:/kenshoo/metrics-play</id>
    <link href="https://github.com/kenshoo/metrics-play" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Metrics module for Play2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;metrics-play&lt;/h1&gt; &#xA;&lt;p&gt;This module provides some support for @codahale &lt;a href=&#34;https://dropwizard.github.io/metrics/4.0.5/&#34;&gt;Metrics&lt;/a&gt; library in a Play2 application (Scala)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kenshoo/metrics-play&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kenshoo/metrics-play.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/github/kenshoo/metrics-play/branch/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/kenshoo/metrics-play/master.svg?sanitize=true&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Play Version: 2.7.0, Metrics Version: 4.0.5, Scala Versions: 2.12.8&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Default Metrics Registry&lt;/li&gt; &#xA; &lt;li&gt;Metrics Servlet&lt;/li&gt; &#xA; &lt;li&gt;Filter to instrument http requests&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add metrics-play dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;    val appDependencies = Seq(&#xA;    ...&#xA;    &#34;com.kenshoo&#34; %% &#34;metrics-play&#34; % &#34;2.7.3_0.8.2&#34;&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable the module:&lt;/p&gt; &#xA;&lt;p&gt;add to application.conf the following line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; play.modules.enabled+=&#34;com.kenshoo.play.metrics.PlayModule&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default Registry&lt;/h3&gt; &#xA;&lt;p&gt;To add a custom metrics, you can use &lt;code&gt;defaultRegistry&lt;/code&gt; which returns an instance of &lt;a href=&#34;https://metrics.dropwizard.io/4.0.5/manual/core&#34;&gt;MetricRegistry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;     import com.kenshoo.play.metrics.Metrics&#xA;     import com.codahale.metrics.Counter&#xA;&#xA;     class SomeController @Inject() (metrics: Metrics) {&#xA;         val counter = metrics.defaultRegistry.counter(&#34;name&#34;)&#xA;         counter.inc()&#xA;     }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Metrics Controller&lt;/h3&gt; &#xA;&lt;p&gt;An implementation of the &lt;a href=&#34;https://metrics.dropwizard.io/4.0.5/manual/servlets#metricsservlet&#34;&gt;metrics-servlet&lt;/a&gt; as a play2 controller.&lt;/p&gt; &#xA;&lt;p&gt;It exports all registered metrics as a json document.&lt;/p&gt; &#xA;&lt;p&gt;To enable the controller add a mapping to conf/routes file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; GET     /admin/metrics              com.kenshoo.play.metrics.MetricsController.metrics&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuration&lt;/h4&gt; &#xA;&lt;p&gt;Some configuration is supported through the default configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;metrics.rateUnit - (default is SECONDS)&#xA;&#xA;metrics.durationUnit (default is SECONDS)&#xA;&#xA;metrics.showSamples [true/false] (default is false)&#xA;&#xA;metrics.jvm - [true/false] (default is true) controls reporting jvm metrics&#xA;&#xA;metrics.logback - [true/false] (default is true) controls reporing logback metrics&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Metrics Filter&lt;/h3&gt; &#xA;&lt;p&gt;An implementation of the Metrics&#39; instrumenting filter for Play2. It records requests duration, number of active requests and counts each return code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;    import com.kenshoo.play.metrics.MetricsFilter&#xA;    import play.api.mvc._&#xA;&#xA;    class Filters @Inject() (metricsFilter: MetricsFilter) extends HttpFilters {&#xA;        val filters = Seq(metricsFilter)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced usage&lt;/h2&gt; &#xA;&lt;p&gt;By default, metrics are prefixed with &#34;com.kenshoo.play.metrics.MetricsFilter&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;com.kenshoo.play.metrics.MetricsFilter.200&#34; : {&#xA;   &#34;count&#34; : 1584456,&#xA;   &#34;m15_rate&#34; : 1.6800220918042639,&#xA;   &#34;m1_rate&#34; : 1.9015104460758263,&#xA;   &#34;m5_rate&#34; : 1.8138545372237085,&#xA;   &#34;mean_rate&#34; : 3.20162010446889,&#xA;   &#34;units&#34; : &#34;events/second&#34;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change the prefix by extending &lt;code&gt;MetricsFilterImpl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package myapp&#xA;&#xA;import javax.inject.Inject&#xA;&#xA;import com.kenshoo.play.metrics.{MetricsImpl, MetricsFilter, Metrics, MetricsFilterImpl}&#xA;import play.api.http.Status&#xA;import play.api.inject.Module&#xA;import play.api.{Configuration, Environment}&#xA;&#xA;class MyMetricsFilter @Inject() (metrics: Metrics) extends MetricsFilterImpl(metrics) {&#xA;&#xA;  // configure metrics prefix&#xA;  override def labelPrefix: String = &#34;foobar&#34;&#xA;&#xA;  // configure status codes to be monitored. other status codes are labeled as &#34;other&#34;&#xA;  override def knownStatuses = Seq(Status.OK)&#xA;}&#xA;&#xA;class MyMetricsModule extends Module {&#xA;  def bindings(environment: Environment, configuration: Configuration) = {&#xA;    Seq(&#xA;      bind[MetricsFilter].to[MyMetricsFilter].eagerly,&#xA;      bind[Metrics].to[MetricsImpl].eagerly&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and add the following line to application.conf&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;play.modules.enabled+=&#34;myapp.MyMetricsModule&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2.7.3_0.8.2 - Minor compatability fix for Play 2.8&lt;/li&gt; &#xA; &lt;li&gt;2.7.3_0.8.1 - Upgrade to play 2.7.3 and support Scala version 2.12.8 / 2.13.0 with dropwizard 4.0.5&lt;/li&gt; &#xA; &lt;li&gt;2.7.0_0.8.0 - Upgrade to play 2.7.0 and Scala 2.12.8 and dropwizard 4.0.5&lt;/li&gt; &#xA; &lt;li&gt;2.6.19_0.7.0 - Upgrade to play 2.6.19 and Scala 2.12.6 and dropwizard 4.0.3&lt;/li&gt; &#xA; &lt;li&gt;2.6.2_0.6.1 - Upgrade to play 2.6 and Scala 2.12. Migration: If you get errors like &#34;No configuration setting found ...&#34; when building fat JARs, check your merge strategy for reference.conf.&lt;/li&gt; &#xA; &lt;li&gt;2.4.0_0.4.0 - Re-implement as Play Module&lt;/li&gt; &#xA; &lt;li&gt;2.4.0_0.3.0 - Upgrade to play 2.4, metrics 3.1.2&lt;/li&gt; &#xA; &lt;li&gt;2.3.0_0.2.1 - Breaking Change! prefix jvm metric names to standardize with dropwizard&lt;/li&gt; &#xA; &lt;li&gt;2.3.0_0.2.0 - Meter uncaught exceptions as 500 Internal Server Error&lt;/li&gt; &#xA; &lt;li&gt;2.3.0_0.1.9 - Add extra http codes, support configurable metrics names for requests filter&lt;/li&gt; &#xA; &lt;li&gt;2.3.0_0.1.8 - Support default registry in play java. Replace MetricsRegistry.default with MetricsRegistry.defaultRegistry (to support java where default is a reserved keyword)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is released under the Apache Public License 2.0.&lt;/p&gt;</summary>
  </entry>
</feed>