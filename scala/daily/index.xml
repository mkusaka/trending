<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-23T01:38:32Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xitrum-framework/xitrum-scalate</title>
    <updated>2023-12-23T01:38:32Z</updated>
    <id>tag:github.com,2023-12-23:/xitrum-framework/xitrum-scalate</id>
    <link href="https://github.com/xitrum-framework/xitrum-scalate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Template engine for Xitrum based on Scalate&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;code&gt;Xitrum &amp;lt;http://xitrum-framework.github.io/&amp;gt;&lt;/code&gt;_ allows you to choose template engines. This library is a template engine for Xitrum. It wraps &lt;code&gt;Scalate &amp;lt;http://scalate.github.io/scalate/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;See CHANGELOG to know which version of xitrum-scalate to use for which version of Xitrum.&lt;/p&gt; &#xA;&lt;p&gt;Config your Xitrum project to use this template engine&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Edit your Xitrum project&#39;s project/plugins.sbt:&#xA;&#xA;::&#xA;&#xA;  // For precompiling Scalate templates in the compile phase of SBT&#xA;  addSbtPlugin(&#34;org.scalatra.scalate&#34; % &#34;sbt-scalate-precompiler&#34; % &#34;1.9.6.0&#34;)&#xA;&#xA;Edit build.sbt:&#xA;&#xA;::&#xA;&#xA;  // Template engine for Xitrum&#xA;  libraryDependencies += &#34;tv.cntt&#34; %% &#34;xitrum-scalate&#34; % &#34;2.9.2&#34;&#xA;&#xA;  // Precompile Scalate templates&#xA;  import org.fusesource.scalate.ScalatePlugin._&#xA;  ScalateKeys.scalateTemplateConfig in Compile := Seq(TemplateConfig(&#xA;    baseDirectory.value / &#34;src&#34; / &#34;main&#34; / &#34;scalate&#34;,&#xA;    Seq(),&#xA;    Seq(Binding(&#34;helper&#34;, &#34;xitrum.Action&#34;, importMembers = true))&#xA;  ))&#xA;&#xA;Edit xitrum.conf:&#xA;&#xA;::&#xA;&#xA;  xitrum {&#xA;    ...&#xA;    template {&#xA;      &#34;xitrum.view.Scalate&#34; {&#xA;        defaultType = jade  # jade, mustache, scaml, or ssp&#xA;      }&#xA;    }&#xA;    ...&#xA;  }&#xA;&#xA;&#34;type&#34; option&#xA;~~~~~~~~~~~~~&#xA;&#xA;In xitrum.conf, you config &#34;defaultType&#34; (see above).&#xA;&#xA;When calling Xitrum&#39;s renderView method, if you want to use template type other&#xA;than the defaultType, set the last argument (options) like this:&#xA;&#xA;::&#xA;&#xA;   renderView(Map(&#34;type&#34; -&amp;gt; &#34;mustache&#34;)&#xA;&#xA;&#34;date&#34; option&#xA;~~~~~~~~~~~~~&#xA;&#xA;If you don&#39;t specify `DateFormat &amp;lt;http://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html&amp;gt;`_,&#xA;``java.text.DateFormat.getDateInstance(DateFormat.DEFAULT, lo)`` will be used,&#xA;where ``lo`` is ``java.util.Locale.forLanguageTag(currentAction.language)``.&#xA;&#xA;::&#xA;&#xA;  renderView(Map(&#34;date&#34; -&amp;gt; myDateFormat)&#xA;&#xA;&#34;number&#34; option&#xA;~~~~~~~~~~~~~~~&#xA;&#xA;If you don&#39;t specify `NumberFormat &amp;lt;http://docs.oracle.com/javase/7/docs/api/java/text/NumberFormat.html&amp;gt;`_,&#xA;``java.text.NumberFormat.getInstance(lo)`` will be used,&#xA;where ``lo`` is ``java.util.Locale.forLanguageTag(currentAction.language)``.&#xA;&#xA;::&#xA;&#xA;  renderView(Map(&#34;date&#34; -&amp;gt; myNumberFormat)&#xA;&#xA;If you want to display an integer number as is, without any number format,&#xA;instead of (Jade example):&#xA;&#xA;::&#xA;&#xA;  = myObject.myInt&#xA;&#xA;Use:&#xA;&#xA;::&#xA;&#xA;  = myObject.myInt.toString&#xA;&#xA;Other utility methods&#xA;~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;You can use methods [view and collection](http://scalate.github.io/scalate/documentation/user-guide.html#Views) of Scalate.&#xA;&#xA;`xitrum.view.Scalate` provides some utility methods so that you can easily&#xA;use Scalate features. See the `API doc &amp;lt;http://xitrum-framework.github.io/xitrum-scalate/&amp;gt;`_.&#xA;&#xA;Ex:&#xA;&#xA;::&#xA;&#xA;  import xitrum.Config&#xA;  import xitrum.view.Scalate&#xA;&#xA;  // In your action:&#xA;  val scalate  = Config.xitrum.template.get.asInstanceOf[Scalate]&#xA;  val template = &#34;p This Jade template is from a string, not from a file.&#34;&#xA;  val string   = scalate.renderJadeString(template)&#xA;  respondInlineView(string)&#xA;&#xA;Log&#xA;~~~&#xA;&#xA;To avoid unnecessary log, you should add these to config/logback.xml:&#xA;&#xA;::&#xA;&#xA;  &amp;lt;logger name=&#34;org.fusesource.scalate&#34; level=&#34;INFO&#34;/&amp;gt;&#xA;  &amp;lt;logger name=&#34;org.fusesource.scalate.util.ClassPathBuilder&#34; level=&#34;ERROR&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>hmrc/pbd-4334-live-test</title>
    <updated>2023-12-23T01:38:32Z</updated>
    <id>tag:github.com,2023-12-23:/hmrc/pbd-4334-live-test</id>
    <link href="https://github.com/hmrc/pbd-4334-live-test" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pbd-4334-live-test&lt;/h1&gt; &#xA;&lt;p&gt;This is a placeholder README.md for a new repository&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This code is open source software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/hmrc/pbd-4334-live-test/main/%22http://www.apache.org/licenses/LICENSE-2.0.html%22&#34;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>