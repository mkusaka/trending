<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-22T01:39:16Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jdegoes/jvm-perf</title>
    <updated>2023-09-22T01:39:16Z</updated>
    <id>tag:github.com,2023-09-22:/jdegoes/jvm-perf</id>
    <link href="https://github.com/jdegoes/jvm-perf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Materials for a workshop on JVM performance optimization&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The JVM is a rock-solid, battle-proven platform for developing and deploying applications. Thousands of engineering years have been invested into the facilities available on it, resulting in sophisticated garbage collection and just-in-time compilation mechanisms. The interaction between this platform and our applications is nuanced and often misunderstood.&lt;/p&gt; &#xA;&lt;p&gt;In this 5-day workshop, the participants will learn about the two major runtime mechanisms of the JVM affecting performance - the JIT compiler and the garbage collector; techniques for writing performant JVM code and effective use of tools for analyzing performance.&lt;/p&gt; &#xA;&lt;h2&gt;Who Should Attend&lt;/h2&gt; &#xA;&lt;p&gt;Engineers, SREs and tech leads responsible for production JVM applications.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Basic knowledge of the JVM; basic experience running JVM applications in production.&lt;/p&gt; &#xA;&lt;h2&gt;Topics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Overview of the JVM&lt;/li&gt; &#xA; &lt;li&gt;Garbage collection on the JVM&lt;/li&gt; &#xA; &lt;li&gt;Types of garbage collectors and choosing a garbage collector for a workload&lt;/li&gt; &#xA; &lt;li&gt;Analyzing allocations in JVM code&lt;/li&gt; &#xA; &lt;li&gt;Writing JVM code that is lean on allocations&lt;/li&gt; &#xA; &lt;li&gt;Analyzing bytecode to pinpoint allocations&lt;/li&gt; &#xA; &lt;li&gt;Monitoring garbage collector performance at runtime&lt;/li&gt; &#xA; &lt;li&gt;Understanding JIT compilation on the JVM&lt;/li&gt; &#xA; &lt;li&gt;Benchmarking code using JMH&lt;/li&gt; &#xA; &lt;li&gt;Analyzing JIT behaviour at runtime&lt;/li&gt; &#xA; &lt;li&gt;Writing JIT-friendly JVM code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Daily Structure&lt;/h2&gt; &#xA;&lt;p&gt;5 days, 4 hours a day starting.&lt;/p&gt; &#xA;&lt;h2&gt;Attendance&lt;/h2&gt; &#xA;&lt;p&gt;Attendance at this workshop is fully remote. Attendees will be provided with a link to a remote meeting session the day before the event, in which they can see and hear the workshop, ask the instructor questions, and chat with other attendees.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;From the UI&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the repository as a &lt;a href=&#34;https://github.com/jdegoes/jvm-perf/archive/master.zip&#34;&gt;zip archive&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Unzip the archive, usually by double-clicking on the file.&lt;/li&gt; &#xA; &lt;li&gt;Configure the source code files in the IDE or text editor of your choice.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;From the Command Line&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open up a terminal window.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/jdegoes/jvm-perf&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch project provided &lt;code&gt;sbt&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd jvm-perf; ./sbt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter continuous compilation mode.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt:jvm-perf&amp;gt; ~ test:compile&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Hint: You might get the following error when starting sbt:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[error] typesafe-ivy-releases: unable to get resource for com.geirsson#sbt-scalafmt;1.6.0-RC4: res=&lt;a href=&#34;https://repo.typesafe.com/typesafe/ivy-releases/com.geirsson/sbt-scalafmt/1.6.0-RC4/jars/sbt-scalafmt.jar&#34;&gt;https://repo.typesafe.com/typesafe/ivy-releases/com.geirsson/sbt-scalafmt/1.6.0-RC4/jars/sbt-scalafmt.jar&lt;/a&gt;: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested targe&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;It&#39;s because you have an outdated Java version, missing some newer certificates. Install a newer Java version, e.g. using &lt;a href=&#34;https://github.com/shyiko/jabba&#34;&gt;Jabba&lt;/a&gt;, a Java version manager. See &lt;a href=&#34;https://stackoverflow.com/a/58669704/1885392&#34;&gt;Stackoverflow&lt;/a&gt; for more details about the error.&lt;/p&gt; &#xA;&lt;h2&gt;Legal&lt;/h2&gt; &#xA;&lt;p&gt;CopyrightÂ© 2023 John A. De Goes. All rights reserved.&lt;/p&gt;</summary>
  </entry>
</feed>