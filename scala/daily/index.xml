<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-18T01:43:48Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>com-lihaoyi/Ammonite</title>
    <updated>2023-06-18T01:43:48Z</updated>
    <id>tag:github.com,2023-06-18:/com-lihaoyi/Ammonite</id>
    <link href="https://github.com/com-lihaoyi/Ammonite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala Scripting&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ammonite &lt;a href=&#34;https://travis-ci.org/lihaoyi/Ammonite&#34;&gt;&lt;img src=&#34;https://travis-ci.org/lihaoyi/Ammonite.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/lihaoyi/ammonite&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/lihaoyi/Ammonite&#34; alt=&#34;Build (Windows)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/lihaoyi/Ammonite?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/lihaoyi&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-sponsor-ff69b4.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is where the code for the &lt;a href=&#34;https://ammonite.io&#34;&gt;Ammonite&lt;/a&gt; project lives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ammonite.io&#34;&gt;Ammonite-REPL&lt;/a&gt;, the improved Scala REPL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use Ammonite and like it, you will probably enjoy the following book by the Author:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.handsonscala.com/&#34;&gt;&lt;em&gt;Hands-on Scala Programming&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Hands-on Scala&lt;/em&gt; has uses Ammonite extensively throughout the book, using Ammonite to accomplish a lot of useful tasks: exploring third party libraries or writing parallel web-crawlers in the REPL, and implementing entire programming languages in Ammonite Scala Scripts. &lt;em&gt;Hands-on Scala&lt;/em&gt; is a great way to level up your skills in Scala in general and Ammonite in particular.&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn more about Ammonite or how to use it, check out the links above, or ask on the &lt;a href=&#34;https://gitter.im/lihaoyi/Ammonite&#34;&gt;Gitter Channel&lt;/a&gt;. The remainder of this document is developer-docs for people who want to work on the Ammonite source code itself.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in living more &#34;on the edge&#34;, we also publish artifacts and the doc-site every commit; the doc-site is available at&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ammonite.io/#UnstableVersions&#34;&gt;https://ammonite.io/#UnstableVersions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And contains instructions on how to download the per-commit executable or depend on the per-commit maven artifact.&lt;/p&gt; &#xA;&lt;p&gt;If you use Ammonite and like it, please support us by donating to our Patreon:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.patreon.com/lihaoyi&#34;&gt;https://www.patreon.com/lihaoyi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Developer Docs&lt;/h1&gt; &#xA;&lt;p&gt;The layout of the repository is roughly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;amm/&lt;/code&gt; is &lt;a href=&#34;https://ammonite.io&#34;&gt;Ammonite&lt;/a&gt;&#39;s core, REPL and script runner&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;terminal/&lt;/code&gt; is the JLine re-implementation used by Ammonite-REPL to provide syntax highlighting and multiline editing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;readme/&lt;/code&gt; is the source code for the &lt;a href=&#34;https://ammonite.io/#Ammonite-Ops&#34;&gt;Documentation&lt;/a&gt;, written in &lt;a href=&#34;https://www.lihaoyi.com/Scalatex/&#34;&gt;Scalatex&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;published/&lt;/code&gt; is a synthetic project used for publishing, excluding the readme and integration tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more detailed information, check out the internals documentation for high-level overviews of some interesting facets of the codebase&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/com-lihaoyi/Ammonite/tree/main/internals-docs&#34;&gt;Internals Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Common Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Manual Testing&lt;/h3&gt; &#xA;&lt;p&gt;Although most features should be unit tested, it&#39;s still useful to fire up a REPL from the current codebase to see things work (or not). There are a variety of shells you can spin up for testing different things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mill -i -w terminal[2.12.6].test.run&lt;/code&gt; is useful for manual testing the terminal interaction; it basically contains a minimal echo-anything terminal, with multiline input based on the count of open- and closed-parentheses. This lets you test all terminal interactions without all the complexity of the Scala compiler, classloaders, etc. that comes in &lt;code&gt;repl/&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mill -i -w amm[2.12.6].run&lt;/code&gt; brings up the Ammonite-REPL using the source code in the repository, and automatically restarts it on-exit if you have made a change to the code. Useful for manual testing both of &lt;code&gt;amm/&lt;/code&gt; as well as &lt;code&gt;ops/&lt;/code&gt;, since you can just &lt;code&gt;import ammonite.ops._&lt;/code&gt; and start using them. Note that this does not bring in filesystem utilities like the &lt;code&gt;wd&lt;/code&gt; variable, &lt;code&gt;cd!&lt;/code&gt; command. You can also pass in the path to a &lt;code&gt;.sc&lt;/code&gt; file to run it using Ammonite&#39;s script runner&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mill -i -w integration[2.12.6].test.run&lt;/code&gt; runs the trivial main method in the &lt;code&gt;integration&lt;/code&gt; subproject, letting you manually test running Ammonite programmatically, whether through &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;debug&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mill -i amm[2.12.6].assembly&lt;/code&gt; creates an assembly at &lt;code&gt;out/amm/2.12.6/assembly/dest/out.jar&lt;/code&gt; that you can then use to test: start a REPL, run scripts, etc. in a standalone environment without being wrapped in Mill build tool&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mill -i amm[2.12.6].launcher&lt;/code&gt; creates a launcher script at &lt;code&gt;out/amm/2.12.6/launcher/dest/run&lt;/code&gt; that can also be used to run Ammonite outside of the Mill build tool.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Automated Testing&lt;/h3&gt; &#xA;&lt;p&gt;While working on an arbitrary &lt;code&gt;xyz&lt;/code&gt; subproject, &lt;code&gt;mill -w xyz.test&lt;/code&gt; runs tests after every change. &lt;code&gt;./mill &#39;amm[2.13.8].test&#39;&lt;/code&gt; can be a bit slow because of the amount of code it compiles, so you may want to specify the test manually via &lt;code&gt;./mill &#39;amm[2.13.8].test path.to.test&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./mill -i &#39;amm[2.13.8].test&#39;&lt;/code&gt; tests the Ammonite Script-runner, without filesystem-shell integration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./mill -i &#39;amm.repl[2.13.8].test&#39;&lt;/code&gt; tests the Ammonite-REPL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./mill -i &#39;terminal[2.13.8].test&#39;&lt;/code&gt; tests the readline re-implementation: keyboard navigation, shortcuts, editing, without any filesystem/scala-repl logic&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./mill -i &#39;integration[2.13.8].test&#39;&lt;/code&gt; kicks off the integration tests, which bundle &lt;code&gt;amm/&lt;/code&gt; and &lt;code&gt;shell/&lt;/code&gt; into their respective jars and invoke them as subprocesses. Somewhat slow, but exercises all the command-line-parsing stuff that the other unit tests do not exercise, and makes sure that everything works when run from &lt;code&gt;.jar&lt;/code&gt;s instead of loose class-files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./mill -i &#39;sshd[2.13.8].test&#39;&lt;/code&gt; tests the remote Ammonite-REPL over sshd.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Publishing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Publishing is automatic, controlled by scripts in the &lt;code&gt;ci/&lt;/code&gt; folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Every commit that lands in main will publish a new &lt;a href=&#34;https://ammonite.io/#UnstableVersions&#34;&gt;unstable version&lt;/a&gt;, that you can already use and download. This includes publishing the unstable version to maven central to the &lt;a href=&#34;https://github.com/com-lihaoyi/Ammonite/releases/tag/snapshot-commit-uploads&#34;&gt;snapshot-commit-uploads&lt;/a&gt; tag, and updating the documentation-site so it&#39;s &lt;a href=&#34;https://ammonite.io/#UnstableVersions&#34;&gt;Unstable Version&lt;/a&gt; download instructions to point to it, though the &#34;main&#34; download/install instructions in the doc-site will not be changed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Every commit that lands in main &lt;em&gt;with a tag&lt;/em&gt; will re-publish a stable version to maven central and upload a new versioned release (using the tag as the version) and the doc-site is updated so the main download/install instructions point at the new published stable version.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In general, if you land a change in main, once CI completes (1-2hrs) you should be able to download it via the &lt;a href=&#34;https://ammonite.io/#UnstableVersions&#34;&gt;Unstable Version&lt;/a&gt; instructions and make use of your changes standalone or in an SBT project.&lt;/p&gt; &#xA;&lt;p&gt;Occasionally, the CI job building and publishing one of the above steps flakes and fails, and needs to be re-run through the travis web interface.&lt;/p&gt; &#xA;&lt;h2&gt;Issue Tags&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve started tagging open issues in the issue tracker to try and keep things neat. This is what the various tags mean:&lt;/p&gt; &#xA;&lt;p&gt;Each issue should only have one of these:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bug&lt;/code&gt;: this behavior clearly wrong, and needs to be fixed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enhancement&lt;/code&gt;: something relatively speccable, that can be worked on, finished, and will make Ammonite better&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wishlist&lt;/code&gt;: could be totally awesome, but we&#39;re uncertain if it is worth doing at all, what it would look like, or if it will ever reach a &#34;finished&#34; state.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And possibly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;help wanted&lt;/code&gt;: I don&#39;t have context, hardware, or for some other reason am unlikely to ever do this. But I know people out there care, so one of you should step up and fix it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;All code PRs should come with&lt;/strong&gt;: a meaningful description, inline-comments for important things, unit tests (positive and negative), and a green build in &lt;a href=&#34;https://travis-ci.org/lihaoyi/Ammonite&#34;&gt;CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Try to keep lines below 80 characters width&lt;/strong&gt;, with a hard limit of 100 characters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PRs for features should generally come with &lt;em&gt;something&lt;/em&gt; added to the &lt;a href=&#34;https://ammonite.io&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;, so people can discover that it exists&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Be prepared to discuss/argue-for your changes if you want them merged&lt;/strong&gt;! You will probably need to refactor so your changes fit into the larger codebase&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;If your code is hard to unit test, and you don&#39;t want to unit test it, that&#39;s ok&lt;/strong&gt;. But be prepared to argue why that&#39;s the case!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;It&#39;s entirely possible your changes won&#39;t be merged&lt;/strong&gt;, or will get ripped out later. This is also the case for my changes, as the Author!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Even a rejected/reverted PR is valuable&lt;/strong&gt;! It helps to explore the solution space, and know what works and what doesn&#39;t. For every line in the repo, at least three lines were tried, committed, and reverted/refactored, and more than 10 were tried without committing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feel free to send Proof-Of-Concept PRs&lt;/strong&gt; that you don&#39;t intend to get merged.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hitachisolutionsamerica/dataestate-benchmarks</title>
    <updated>2023-06-18T01:43:48Z</updated>
    <id>tag:github.com,2023-06-18:/hitachisolutionsamerica/dataestate-benchmarks</id>
    <link href="https://github.com/hitachisolutionsamerica/dataestate-benchmarks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo is the public repository which hosts the TPC benchmarks we use to gauge system performance.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>daizikaikou/learningSpark</title>
    <updated>2023-06-18T01:43:48Z</updated>
    <id>tag:github.com,2023-06-18:/daizikaikou/learningSpark</id>
    <link href="https://github.com/daizikaikou/learningSpark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;学习spark写的scala代码，工具使用的是IDEA2017.1.6,欢迎star&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;learningSpark&lt;/h1&gt; &#xA;&lt;p&gt;开发环境：&lt;/p&gt; &#xA;&lt;p&gt;系统：Win10&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;开发工具：IntelliJ IDEA 2017.1.6 x64&#xA;&#xA;项目管理工具：Apache Maven 3.5.0&#xA;&#xA;JDK 1.8&#xA;&#xA;Scala 2.11.12&#xA;&#xA;Spark 2.1.0&#xA;&#xA;HBase 1.1.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Spark单机环境安装(cdh) &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/103162749&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/103162749&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;spark在Idea中设置日志打印级别&lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/103201704&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/103201704&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spark Streaming处理Socket流简单实例 &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/102667468&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/102667468&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spark Streaming处理文件(本地文件以及hdfs上面的文件) &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/102681368&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/102681368&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SparkStreaming 整合kafka实例 &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/102695485&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/102695485&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SparkStream整合hbase &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/102717092&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/102717092&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;spark转换算子和行动算子介绍 &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/102745211&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/102745211&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;spark rdd介绍 &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/102723021&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/102723021&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spark中的匿名函数介绍 &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/102617622&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/102617622&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;spark函数传递 &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/102799923&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/102799923&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;sparkrdd连接mysql &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/102813737&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/102813737&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spark无状态和有状态转化操作介绍 &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/103185724&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/103185724&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SparkStream连接mysql数据库 &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/103197657&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/103197657&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SparkStream窗口函数 &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/103199008&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/103199008&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;sparkStream之黑名单过滤 &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/103201803&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/103201803&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;sparkStreaming整合Flume的两种方式 &lt;a href=&#34;https://blog.csdn.net/qq_35885488/article/details/103252180&#34;&gt;https://blog.csdn.net/qq_35885488/article/details/103252180&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>