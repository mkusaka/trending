<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-20T01:38:20Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>theiterators/http4s-stir</title>
    <updated>2023-08-20T01:38:20Z</updated>
    <id>tag:github.com,2023-08-20:/theiterators/http4s-stir</id>
    <link href="https://github.com/theiterators/http4s-stir" rel="alternate"></link>
    <summary type="html">&lt;p&gt;http4s-stir offers Pekko HTTP-style (Akka HTTP-style) DSL directives for http4s using cats-effect&#39;s IO as an effect system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;http4s-stir&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to http4s-stir, a library designed to bridge the gap between Pekko HTTP (Akka HTTP) and http4s. This README provides an overview of the library, its usage, project status, and more.&lt;/p&gt; &#xA;&lt;p&gt;http4s-stir offers &lt;a href=&#34;https://github.com/apache/incubator-pekko-http&#34;&gt;Pekko HTTP&lt;/a&gt;-style (Akka HTTP-style) DSL directives for &lt;a href=&#34;https://github.com/http4s/http4s&#34;&gt;http4s&lt;/a&gt; using cats-effect&#39;s IO as an effect system. About 85% of all directives have been ported. Some were omitted due to a lack of support in http4s, while others were modified to fit http4s&#39; distinct architecture. For specifics, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/theiterators/http4s-stir/master/#missing&#34;&gt;Missing&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, there&#39;s a compatibility layer, &lt;a href=&#34;https://github.com/theiterators/http4s-stir/raw/master/core/src/main/scala/pl/iterators/stir/server/directives/Http4sDirectives.scala&#34;&gt;&lt;code&gt;Http4sDirectives&lt;/code&gt;&lt;/a&gt;, for http4s-dsl routes.&lt;/p&gt; &#xA;&lt;p&gt;http4s-stir also furnishes a test kit akin to Pekko&#39;s (Akka&#39;s).&lt;/p&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;In SBT:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;pl.iterators&#34; %% &#34;http4s-stir&#34; % &#34;0.2&#34;&#xA;libraryDependencies += &#34;pl.iterators&#34; %% &#34;http4s-stir-testkit&#34; % &#34;0.2&#34; % Test // if you need this&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;scala-cli&lt;/code&gt; see &lt;a href=&#34;https://raw.githubusercontent.com/theiterators/http4s-stir/master/#example&#34;&gt;this example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s an example in Scala 3 that you can run using scala-cli:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Main.scala&#xA;//&amp;gt; using dep org.typelevel::cats-effect:3.5.1&#xA;//&amp;gt; using dep org.http4s::http4s-dsl:0.23.23&#xA;//&amp;gt; using dep org.http4s::http4s-ember-server:0.23.23&#xA;//&amp;gt; using dep org.http4s::http4s-circe:0.23.23&#xA;//&amp;gt; using dep io.circe::circe-core:0.14.5&#xA;//&amp;gt; using dep io.circe::circe-generic:0.14.5&#xA;//&amp;gt; using dep pl.iterators::http4s-stir:0.2&#xA;&#xA;import org.http4s.Status&#xA;import org.http4s.ember.server.EmberServerBuilder&#xA;import org.http4s.circe.CirceEntityEncoder.*&#xA;import org.http4s.circe.CirceEntityDecoder.*&#xA;import io.circe.*&#xA;import io.circe.generic.semiauto.*&#xA;import cats.effect.IO&#xA;import pl.iterators.stir.server.*&#xA;import pl.iterators.stir.server.Directives.*&#xA;import cats.effect.IOApp&#xA;&#xA;// example rewritten from https://pekko.apache.org/docs/pekko-http/current/introduction.html#using-apache-pekko-http&#xA;var orders: List[Item] = Nil&#xA;&#xA;// domain model&#xA;final case class Item(name: String, id: Long)&#xA;final case class Order(items: List[Item])&#xA;&#xA;// formats for unmarshalling and marshalling&#xA;given Codec[Item] = deriveCodec[Item]&#xA;given Codec[Order] = deriveCodec[Order]&#xA;&#xA;// (fake) async database query api&#xA;def fetchItem(itemId: Long): IO[Option[Item]] = IO.delay {&#xA;  orders.find(o =&amp;gt; o.id == itemId)&#xA;}&#xA;def saveOrder(order: Order): IO[List[Item]] = {&#xA;  orders = order.items ::: orders&#xA;  IO.delay(orders)&#xA;}&#xA;&#xA;val route: Route =&#xA;  concat(&#xA;    get {&#xA;      pathPrefix(&#34;item&#34; / LongNumber) { id =&amp;gt;&#xA;        // there might be no item for a given id&#xA;        val maybeItem: IO[Option[Item]] = fetchItem(id)&#xA;&#xA;        onSuccess(maybeItem) {&#xA;          case Some(item) =&amp;gt; complete(item)&#xA;          case None       =&amp;gt; complete(Status.NotFound)&#xA;        }&#xA;      }&#xA;    },&#xA;    post {&#xA;      path(&#34;create-order&#34;) {&#xA;        entity(as[Order]) { order =&amp;gt;&#xA;          val saved: IO[List[Item]] = saveOrder(order)&#xA;          onSuccess(saved) {&#xA;            _ =&amp;gt; // we are not interested in the result value `Done` but only in the fact that it was successful&#xA;              complete(&#34;order created&#34;)&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  )&#xA;&#xA;object Main extends IOApp.Simple {&#xA;  val run = EmberServerBuilder&#xA;    .default[IO]&#xA;    .withHttpApp(route.toHttpRoutes.orNotFound)&#xA;    .build&#xA;    .use(_ =&amp;gt; IO.never)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Main.test.scala&#xA;//&amp;gt; using test.dep org.specs2::specs2-core:4.19.2&#xA;//&amp;gt; using test.dep pl.iterators::http4s-stir-testkit:0.2&#xA;&#xA;import org.http4s.Status&#xA;import org.http4s.circe.CirceEntityEncoder.*&#xA;import org.http4s.circe.CirceEntityDecoder.*&#xA;import cats.effect.IO&#xA;import cats.effect.unsafe.IORuntime&#xA;import org.specs2.mutable.Specification&#xA;import pl.iterators.stir.testkit.Specs2RouteTest&#xA;&#xA;class MainRoutesSpec extends Specification with Specs2RouteTest {&#xA;    override implicit val runtime: IORuntime = IORuntime.global&#xA;&#xA;    sequential&#xA;    &#34;The routes&#34; should {&#xA;        &#34;create order&#34; in {&#xA;            Post(&#34;/create-order&#34;, Order(List(Item(&#34;foo&#34;, 42)))) ~&amp;gt; route ~&amp;gt; check {&#xA;                responseAs[String] must contain(&#34;order created&#34;)&#xA;                orders.head must beEqualTo(Item(&#34;foo&#34;, 42))&#xA;            }&#xA;        }&#xA;        &#34;retrieve an item if present&#34; in {&#xA;            orders = List(Item(&#34;foo&#34;, 42))&#xA;            Get(&#34;/item/42&#34;) ~&amp;gt; route ~&amp;gt; check {&#xA;                responseAs[Item] must beEqualTo(Item(&#34;foo&#34;, 42))&#xA;            }&#xA;        }&#xA;        &#34;return 404 if item is not present&#34; in {&#xA;            orders = List.empty&#xA;            Get(&#34;/item/42&#34;) ~&amp;gt; route ~&amp;gt; check {&#xA;                status must beEqualTo(Status.NotFound)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more comprehensive example showcasing additional directives see &lt;a href=&#34;https://github.com/theiterators/http4s-stir/raw/master/examples/src/main/scala/Service.scala&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why this library?&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s why I embarked on this project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After the license change for Akka, many contemplated transitioning to http4s and the Typelevel stack. I wanted to simplify this migration.&lt;/li&gt; &#xA; &lt;li&gt;While I&#39;m a fan of cats-effect, I find the http4s DSL verbose and clunky. Marrying Pekko HTTP (Akka HTTP) with cats-effect seemed inelegant, so http4s-stir could be the remedy.&lt;/li&gt; &#xA; &lt;li&gt;I was curious about the internals of both Pekko HTTP and http4s and wanted to determine the feasibility of this project.&lt;/li&gt; &#xA; &lt;li&gt;And, of course, a bit of playful provocation - &lt;a href=&#34;https://raw.githubusercontent.com/theiterators/http4s-stir/master/#whats-with-the-name&#34;&gt;see the next section&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s with the name?&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;stir something up&lt;/strong&gt; (pv)&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;to cause an unpleasant emotion or problem to begin or grow&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are folks who adore http4s but detest Pekko&#39;s (or Akka&#39;s) DSL. Conversely, there are those who champion Pekko&#39;s (or Akka&#39;s) but disdain http4s DSL. I aimed to ruffle feathers from both camps with a hybrid library.&lt;/p&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;p&gt;This library is in preview, intended to collect initial feedback. Yet, I am dedicated to its ongoing maintenance and enhancement, especially as it undergoes real-world testing. Contributions are very welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Missing&lt;/h2&gt; &#xA;&lt;p&gt;Certain directives from the original are either absent or have been modified:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Assuming and converting to/from strict entity&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CacheConditionDirectives&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CodingDirectives&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;directory listing in &lt;code&gt;FileAndResourceDirectives&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RangeDirectives&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;checkSameOrigin&lt;/code&gt; in &lt;code&gt;HeaderDirectives&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;handling of multipart forms in &lt;code&gt;FormFieldDirectives&lt;/code&gt; (but I don&#39;t like it anyway)&lt;/li&gt; &#xA; &lt;li&gt;Some of how akka configures things &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;withSizeLimit&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;withoutSizeLimit&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;requestEntityEmpty&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;requestEntityPresent&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;rejectEmptyResponse&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;extractRequestTimeout&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;withRequestTimeoutResponse&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;AttributeDirectives&lt;/li&gt; &#xA; &lt;li&gt;FramedEntityStreamingDirectives&lt;/li&gt; &#xA; &lt;li&gt;WebSocketDirectives in large part&lt;/li&gt; &#xA; &lt;li&gt;Testkit needed significant changes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Not async anymore&lt;/li&gt; &#xA;   &lt;li&gt;Chunks not supported&lt;/li&gt; &#xA;   &lt;li&gt;Request building incomplete (missing some minor header methods)&lt;/li&gt; &#xA;   &lt;li&gt;All websocket thingies&lt;/li&gt; &#xA;   &lt;li&gt;Some logic of transparent headers and default host info&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;h3&gt;Encountering a Problem?&lt;/h3&gt; &#xA;&lt;p&gt;If you run into any issues, unexpected behavior, or errors, we encourage you to report them. Your feedback is invaluable and helps us improve.&lt;/p&gt; &#xA;&lt;h3&gt;Have a Feature Request?&lt;/h3&gt; &#xA;&lt;p&gt;If there&#39;s a feature you&#39;d like to see, or if you have an idea that would make this project even better, we&#39;d love to hear about it!&lt;/p&gt; &#xA;&lt;h3&gt;How to Report an Issue or Feature Request&lt;/h3&gt; &#xA;&lt;p&gt;Please create a new issue in our &lt;a href=&#34;https://github.com/theiterators/http4s-stir/issues&#34;&gt;http4-stir&lt;/a&gt;. Ensure you provide as much detail as possible:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;For issues:&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Describe the issue you&#39;re facing.&lt;/li&gt; &#xA; &lt;li&gt;Steps to reproduce.&lt;/li&gt; &#xA; &lt;li&gt;Expected behavior.&lt;/li&gt; &#xA; &lt;li&gt;Actual behavior.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;For feature requests:&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Describe the feature and why you believe it would be useful.&lt;/li&gt; &#xA; &lt;li&gt;Any reference or example from other projects/tools, if applicable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By providing detailed information, you&#39;ll help us address your concerns more efficiently.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for your contributions and for helping make this project better for everyone!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;http4s-stir is under the Apache License, Version 2.0 (&#34;the License&#34;). You must comply with this License to use this software. A &lt;a href=&#34;https://github.com/theiterators/http4s-stir/raw/master/LICENSE&#34;&gt;full license text&lt;/a&gt; is available in the repository.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;http4s-stir incorporates significant portions of code adapted from &lt;a href=&#34;https://github.com/apache/incubator-pekko-http&#34;&gt;Pekko HTTP&lt;/a&gt;, a fork of &lt;a href=&#34;https://github.com/akka/akka-http&#34;&gt;Akka HTTP&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>