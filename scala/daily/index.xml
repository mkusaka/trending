<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-18T01:38:20Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ScalaOtus/scala-dev-mooc-2022-11</title>
    <updated>2022-12-18T01:38:20Z</updated>
    <id>tag:github.com,2022-12-18:/ScalaOtus/scala-dev-mooc-2022-11</id>
    <link href="https://github.com/ScalaOtus/scala-dev-mooc-2022-11" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>martinblech/play-mimerender</title>
    <updated>2022-12-18T01:38:20Z</updated>
    <id>tag:github.com,2022-12-18:/martinblech/play-mimerender</id>
    <link href="https://github.com/martinblech/play-mimerender" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Play module for RESTful HTTP Content Negotiation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;play-mimerender&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/martinblech/play-mimerender&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/martinblech/play-mimerender.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Play module for RESTful HTTP Content Negotiation. Lets you define a mapping from your domain objects to different representations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def jsonTransform(s: String) = toJson(Map(&#34;message&#34; -&amp;gt; toJson(s)))&#xA;def jsonpTransform(s: String, r: Request[Any]) = {&#xA;  val callback = r.queryString.getOrElse(&#34;callback&#34;, Nil).headOption&#xA;    .getOrElse(&#34;callback&#34;)&#xA;  Jsonp(callback, jsonTransform(s))&#xA;}&#xA;val m = mapping(&#xA;  &#34;text/html&#34; -&amp;gt; { s: String =&amp;gt; views.html.index(s) },&#xA;  &#34;application/xml&#34; -&amp;gt; { s: String =&amp;gt; &amp;lt;message&amp;gt;{s}&amp;lt;/message&amp;gt; },&#xA;  &#34;application/json&#34; -&amp;gt; jsonTransform _,&#xA;  &#34;text/javascript&#34; -&amp;gt; jsonpTransform _,&#xA;  &#34;text/plain&#34; -&amp;gt; identity[String]_&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then reuse that mapping in your controllers without polluting the domain logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;object Application extends Controller {&#xA;  def index = Action { implicit request =&amp;gt;&#xA;    m.status(200)(&#34;Hello, world!&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and let &lt;code&gt;mimerender&lt;/code&gt; take care of the rest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ # no accept header, gets the first representation (text/html)&#xA;$ curl -i localhost:9000&#xA;HTTP/1.1 200 OK&#xA;Content-Type: text/html&#xA;Vary: Accept&#xA;Content-Length: 130&#xA;&#xA;&amp;lt;!doctype html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body&amp;gt;&#xA;    &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&#xA;$ # a simple text/plain accept header resolves to text/plain&#xA;$ curl -iH &#34;Accept: text/plain&#34; localhost:9000&#xA;HTTP/1.1 200 OK&#xA;Content-Type: text/plain&#xA;Vary: Accept&#xA;Content-Length: 13&#xA;&#xA;Hello, world!&#xA;&#xA;$ # */json;q=0.5,*/xml;q=1.0,*/*;q=0.1 resolves to application/xml&#xA;$ curl -iH &#34;Accept: */json;q=0.5,*/xml;q=1.0,*/*;q=0.1&#34; localhost:9000&#xA;HTTP/1.1 200 OK&#xA;Content-Type: application/xml&#xA;Vary: Accept&#xA;Content-Length: 32&#xA;&#xA;&amp;lt;message&amp;gt;Hello, world!&amp;lt;/message&amp;gt;&#xA;&#xA;$ # application/octet-stream is not supported and it fails like it&#39;s supposed to&#xA;$ # (but you can override this)&#xA;$ curl -iH &#34;Accept: application/octet-stream&#34; localhost:9000&#xA;HTTP/1.1 406 Not Acceptable&#xA;Content-Type: text/plain; charset=utf-8&#xA;Vary: Accept&#xA;Content-Length: 150&#xA;&#xA;None of the supported types (text/html, application/xml, application/json,&#xA;text/plain) is acceptable for the Acccept header &#39;application/octet-stream&#39;&#xA;&#xA;$ # text/javascript produces jsonp with a user-specified callback&#xA;$ curl -iH &#34;Accept: text/javascript&#34; &#34;localhost:9000/?callback=callMe&#34;&#xA;HTTP/1.1 200 OK&#xA;Content-Type: text/javascript&#xA;Vary: Accept&#xA;Content-Length: 36&#xA;&#xA;callMe({&#34;message&#34;:&#34;Hello, world!&#34;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s really not much more to it, except looking at the &lt;code&gt;samples&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Just add the dependency and the resolver in your &lt;code&gt;Build.scala&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val appDependencies = Seq(&#xA;  &#34;mimerender&#34; %% &#34;mimerender&#34; % &#34;0.1.2&#34;&#xA;)&#xA;&#xA;val main = PlayProject(appName, appVersion, appDependencies).settings(&#xA;  resolvers +=&#xA;    Resolver.url(&#34;mimerender github repo&#34;,&#xA;      url(&#34;http://martinblech.github.com/play-mimerender/releases&#34;)&#xA;    )(Resolver.ivyStylePatterns)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;play-mimerender&lt;/code&gt; is a loose Play! 2 port of the Python &lt;a href=&#34;http://github.com/martinblech/play-mimerender&#34;&gt;mimerender&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;code&gt;LICENSE&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>