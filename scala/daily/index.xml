<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-06T01:52:41Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hagay3/skuber</title>
    <updated>2022-07-06T01:52:41Z</updated>
    <id>tag:github.com,2022-07-06:/hagay3/skuber</id>
    <link href="https://github.com/hagay3/skuber" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Scala Kubernetes client library&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hagay3/skuber/master/docs/skuber_logo.png&#34; alt=&#34;skuber logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Scala client for the &lt;a href=&#34;https://kubernetes.io/&#34; target=&#34;_blank&#34;&gt;Kubernetes API&lt;/a&gt;. &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/hagay3/skuber/Continuous%20Integration/master?label=Continuous%20Integration&amp;amp;style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://mvnrepository.com/artifact/io.github.hagay3/skuber_2.12&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.github.hagay3/skuber_2.12?color=green&amp;amp;style=for-the-badge&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/release-date/hagay3/skuber?style=for-the-badge&#34; alt=&#34;Latest release date&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/hagay3/skuber?color=green&amp;amp;style=for-the-badge&#34; alt=&#34;Commit Activity&#34;&gt; &lt;a href=&#34;https://discord.gg/byEh56vFJR&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-5865F2?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://skuber.co/&#34; target=&#34;_blank&#34;&gt;Read the Dcoumentation&lt;/a&gt;. &lt;/strong&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;This example lists pods in &lt;code&gt;kube-system&lt;/code&gt; namespace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import skuber._&#xA;import skuber.json.format._&#xA;import akka.actor.ActorSystem&#xA;import scala.util.{Success, Failure}&#xA;&#xA;implicit val system = ActorSystem()&#xA;implicit val dispatcher = system.dispatcher&#xA;&#xA;val k8s = k8sInit&#xA;val listPodsRequest = k8s.list[PodList](Some(&#34;kube-system&#34;))&#xA;listPodsRequest.onComplete {&#xA;  case Success(pods) =&amp;gt; pods.items.foreach { p =&amp;gt; println(p.name) }&#xA;  case Failure(e) =&amp;gt; throw(e)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://skuber.co&#34;&gt;documentation&lt;/a&gt; and join &lt;a href=&#34;https://discord.gg/byEh56vFJR&#34;&gt;discord community&lt;/a&gt; to ask your questions!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses standard &lt;code&gt;kubeconfig&lt;/code&gt; files for configuration - see the &lt;a href=&#34;https://skuber.co/#/?id=configuration&#34;&gt;configuration guide&lt;/a&gt; for details&lt;/li&gt; &#xA; &lt;li&gt;Refreshing EKS tokens &lt;a href=&#34;https://skuber.co/#/?id=refresh-eks-aws-token&#34;&gt;Refresh EKS Token guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive support for Kubernetes API model represented as Scala case classes&lt;/li&gt; &#xA; &lt;li&gt;Support for core, extensions and other Kubernetes API groups&lt;/li&gt; &#xA; &lt;li&gt;Full support for converting resources between the case class and standard JSON representations&lt;/li&gt; &#xA; &lt;li&gt;Client API for creating, reading, updating, removing, listing and watching resources on a Kubernetes cluster&lt;/li&gt; &#xA; &lt;li&gt;The API is asynchronous and strongly typed e.g. &lt;code&gt;k8s get[Deployment](&#34;nginx&#34;)&lt;/code&gt; returns a value of type &lt;code&gt;Future[Deployment]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fluent API for creating and updating specifications of Kubernetes resources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 8&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes cluster&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A Kubernetes cluster is needed at runtime. For local development purposes, minikube is recommended. To get minikube follow the instructions &lt;a href=&#34;https://github.com/kubernetes/minikube&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Release&lt;/h2&gt; &#xA;&lt;p&gt;You can use the latest release (for 2.12 or 2.13) by adding to your build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbt&#34;&gt;libraryDependencies += &#34;io.github.hagay3&#34; %% &#34;skuber&#34; % &#34;2.7.6&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Building the library from source is very straightforward. Simply run &lt;code&gt;sbt test&lt;/code&gt;in the root directory of the project to build the library (and examples) and run the unit tests to verify the build.&lt;/p&gt; &#xA;&lt;h2&gt;CI + Build&lt;/h2&gt; &#xA;&lt;p&gt;The CI parameters defined in &lt;code&gt;build.sbt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ci.yaml and clean.yaml are generated automatically with &lt;a href=&#34;https://github.com/djspiewak/sbt-github-actions&#34;&gt;sbt-github-actions&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;sbt githubWorkflowGenerate &amp;amp;&amp;amp; bash infra/ci/fix-workflows.sh&lt;/code&gt; in order to regenerate ci.yaml and clean.yaml.&lt;/p&gt; &#xA;&lt;p&gt;CI Running against the following k8s versions&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v1.19.6&lt;/li&gt; &#xA; &lt;li&gt;v1.20.11&lt;/li&gt; &#xA; &lt;li&gt;v1.21.5&lt;/li&gt; &#xA; &lt;li&gt;v1.22.9&lt;/li&gt; &#xA; &lt;li&gt;v1.23.6&lt;/li&gt; &#xA; &lt;li&gt;v1.24.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;skuber supports all other k8s versions, not all of them tested under CI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/releases/&#34;&gt;https://kubernetes.io/releases/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m trying to be responsive to any new issues, you can create github issue or contact me.&lt;/p&gt; &#xA;&lt;p&gt;Skuber chat on discord: &lt;a href=&#34;https://discord.gg/byEh56vFJR&#34;&gt;https://discord.gg/byEh56vFJR&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Email: &lt;a href=&#34;mailto:hagay3@gmail.com&#34;&gt;hagay3@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EffectOrientedProgramming/book</title>
    <updated>2022-07-06T01:52:41Z</updated>
    <id>tag:github.com,2022-07-06:/EffectOrientedProgramming/book</id>
    <link href="https://github.com/EffectOrientedProgramming/book" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Effect-Oriented Programming: Creating Reliable Systems with Scala 3 and ZIO 2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Effect-Oriented Programming&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Creating Reliable Systems with Scala 3 and ZIO 2&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Latest Preview Builds&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://leanpub.com/s/fDHMG3a91OtuihppckOyMA.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://leanpub.com/s/fDHMG3a91OtuihppckOyMA.epub&#34;&gt;EPUB&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer Notes&lt;/h2&gt; &#xA;&lt;p&gt;Steps for configuring your environment to run the book examples and build the book.&lt;/p&gt; &#xA;&lt;h3&gt;First, perform the &lt;a href=&#34;https://github.com/EffectOrientedProgramming/Examples#effect-oriented-programming-book-examples&#34;&gt;Basic Installation Instructions&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This will install Java, Scala, SBT (Scala Build Tool) and several other necessary tools.&lt;/p&gt; &#xA;&lt;h3&gt;Commands for Building &amp;amp; Running the Book Code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository onto your machine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For all the commands shown here, first start &lt;code&gt;sbt&lt;/code&gt; &lt;em&gt;&lt;strong&gt;In A Terminal Shell&lt;/strong&gt;&lt;/em&gt; in the book&#39;s root directory. Do not use IntelliJ IDEA&#39;s &#34;sbt shell&#34; window, which doesn&#39;t work correctly and will cause problems. (It&#39;s OK to use the IntelliJ &#34;Terminal&#34; window). Run &lt;code&gt;sbt&lt;/code&gt; without any arguments to enter &lt;code&gt;sbt&lt;/code&gt; console mode. Once you start &lt;code&gt;sbt&lt;/code&gt; you will see a prompt that looks like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sbt:EffectOrientedProgramming&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contributors, to ensure you don&#39;t break the build and/or inconvenience your collaborators, execute this script in the project root to set up our hooks:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;./bin/setupGitHooks.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile the Chapters:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sbt:EffectOrientedProgramming&amp;gt; mdoc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View the generated manuscripts:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;mdoc&lt;/code&gt; in watch mode:&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sbt:EffectOrientedProgramming&amp;gt; mdoc --watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;Open: &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;src&lt;/code&gt; directory is a playground and you can run a &lt;code&gt;main&lt;/code&gt; this way:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sbt:EffectOrientedProgramming&amp;gt; runMain HelloZio.hello&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To run continuously, precede the command with &lt;code&gt;~&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sbt:EffectOrientedProgramming&amp;gt; ~runMain HelloZio.hello&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To pick a main from all available options, use the &lt;code&gt;run&lt;/code&gt; task:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sbt:EffectOrientedProgramming&amp;gt; run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To format the code examples in the book, run &lt;code&gt;scalafmt&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sbt:EffectOrientedProgramming&amp;gt; scalafmt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Miscellaneous Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Each chapter has a single namespace. The package name is automatically created from the chapter name; e.g. &lt;code&gt;package monads&lt;/code&gt; from &lt;code&gt;05_Monads.md&lt;/code&gt;. If you need a further namespaces, make an &lt;code&gt;object&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To wipe out local changes: &lt;code&gt;git reset --hard HEAD&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make pull commands rebase instead of merge: &lt;code&gt;git config --global pull.rebase true&lt;/code&gt;. Explanation and &lt;a href=&#34;https://spin.atomicobject.com/2020/05/05/git-configurations-default/&#34;&gt;suggested default configurations&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Separate the exercises from the book. The end of each atom simply references the website for exercises. This way the exercises can be changed without modifying the book.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try using Jen (from the bookstore) as a copyeditor, to improve and speed up the process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;functionName&lt;/code&gt; to indicate functions in prose (no empty parens), unless you need to specify parameters in which case use the full parameter list, so it compiles if placed between &lt;code&gt;def&lt;/code&gt; and &lt;code&gt;= ???&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Possibly change to tables generated by a graphics program instead of Markdown tables.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Github as the &#34;source of truth&#34; repository for the book. Authors have full commit privileges, and normally commit rather than doing pull requests. Contributors use pull requests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you do a commit, add a timestamp indicating how much work you put in on that commit. This is not a perfect solution but it does provide more data. Format for Git summary:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;lt;Brief description&amp;gt; #author1 #author2 ... #authorN #time Xh Ym&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Where &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are numbers indicating hours and minutes. &lt;code&gt;X&lt;/code&gt; can be a floating-point number or an integer, while &lt;code&gt;Y&lt;/code&gt; must be an integer. &lt;code&gt;Xh&lt;/code&gt; is not a required argument.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Improved style-checking system (spelling, grammar, formatting). Piggyback on VSCode and/or IntelliJ.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Potential: automatic conversion of book into teaching materials (slides).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Publishing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;eBook through Leanpub.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Print book through Ingram.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Print-ready pages from Leanpub.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Will use the new Markua syntax for automatic generation of the index.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the last two points mean that going from eBook to print book becomes virtually instantaneous, and does not collect baggage in the process (extra things that require maintenance, like an index and custom page layout).&lt;/p&gt;</summary>
  </entry>
</feed>