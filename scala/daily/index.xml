<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-25T01:46:27Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>THU-DSP-LAB/ventus-gpgpu</title>
    <updated>2022-08-25T01:46:27Z</updated>
    <id>tag:github.com,2022-08-25:/THU-DSP-LAB/ventus-gpgpu</id>
    <link href="https://github.com/THU-DSP-LAB/ventus-gpgpu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GPGPU processor supporting RISCV-V extension, developed with Chisel HDL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ventus(承影) GPGPU&lt;/h1&gt; &#xA;&lt;p&gt;GPGPU processor supporting RISCV-V extension, developed with Chisel HDL.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2021-2022 by International Innovation Center of Tsinghua University, Shanghai&lt;/p&gt; &#xA;&lt;p&gt;We are calling for contributors. If you are interested in Ventus GPGPU, please contact &lt;a href=&#34;mailto:yangkx20@mails.tsinghua.edu.cn&#34;&gt;yangkx20@mails.tsinghua.edu.cn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;“承影”在RVV编译器工具链、验证环境开发和硬件设计方面还有很多不足，如果您有意愿参与到“承影”的开发中，欢迎在github上pull request，也欢迎联系 &lt;a href=&#34;mailto:yangkx20@mails.tsinghua.edu.cn&#34;&gt;yangkx20@mails.tsinghua.edu.cn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;8月23日线下活动的ppt已经上传到&lt;a href=&#34;https://github.com/THU-DSP-LAB/ventus-gpgpu-doc/tree/main/slides&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The micro-architecture overview of Ventus(承影) is shown below. Chinese docs is &lt;a href=&#34;https://github.com/THU-DSP-LAB/ventus-gpgpu/raw/master/docs/Ventus-GPGPU-doc.md&#34;&gt;here&lt;/a&gt;. English version will come soon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/THU-DSP-LAB/ventus-gpgpu/master/docs/images/ventus_arch.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For ISA simulator and riscv-gnu-toolchain, see &lt;a href=&#34;https://github.com/THU-DSP-LAB/ventus-gpgpu-isa-simulator&#34;&gt;ventus-gpgpu-isa-simulator&lt;/a&gt; and &lt;a href=&#34;https://github.com/THU-DSP-LAB/riscv-gnu-toolchain&#34;&gt;ventus-riscv-gnu-toolchain&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The tutorial of Chisel development environment configuration comes from &lt;a href=&#34;https://github.com/chipsalliance/playground&#34;&gt;chipsalliance/playground: chipyard in mill :P&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Install dependencies and setup environments:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arch Linux &lt;code&gt;pacman -Syu --noconfirm make parallel wget cmake ninja mill dtc verilator git llvm clang lld protobuf antlr4 numactl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nix &lt;code&gt;nix-shell&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Init and update dependences&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make init&#xA;make patch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;IDE support &lt;code&gt;make bsp # generate IDE bsp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;to generate verilog file, use &lt;code&gt;make verilog&lt;/code&gt;. The output file is &lt;code&gt;GPGPU_axi_top.v&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;to run tests, use &lt;code&gt;make tests&lt;/code&gt;. Output waveform file is at &lt;code&gt;test_run_dir&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;We refer to some open-source design when developing Ventus GPGPU.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sub module&lt;/th&gt; &#xA;   &lt;th&gt;Source&lt;/th&gt; &#xA;   &lt;th&gt;Detail&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CTA scheduler&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/VerticalResearchGroup/miaow&#34;&gt;MIAOW&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Our CTA scheduler module is based on MiaoW ultra-threads dispatcher.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;L2Cache&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sifive/block-inclusivecache-sifive&#34;&gt;block-inclusivecache-sifive&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Our L2Cache design is inspired by Sifive&#39;s block-inclusivicache&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Multiplier&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan&#34;&gt;XiangShan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;We reused Array Multiplier in XiangShan. FPU design is also inspired by XiangShan.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Instructions, Config, ...&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/chipsalliance/rocket-chip&#34;&gt;rocket-chip&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Some modules are sourced from RocketChip&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>lolgab/cosmopolitan-scalajs-example</title>
    <updated>2022-08-25T01:46:27Z</updated>
    <id>tag:github.com,2022-08-25:/lolgab/cosmopolitan-scalajs-example</id>
    <link href="https://github.com/lolgab/cosmopolitan-scalajs-example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal Scala.js executable&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Universal Scala.js executable&lt;/h1&gt; &#xA;&lt;p&gt;This repository shows how you can create Scala.js actually portable executables using &lt;a href=&#34;https://github.com/jart/cosmopolitan&#34;&gt;cosmopolitan&lt;/a&gt; and the &lt;a href=&#34;https://bellard.org/quickjs/&#34;&gt;QuickJS Javascript Engine&lt;/a&gt;. &lt;a href=&#34;https://justine.lol/ape.html&#34;&gt;αcτµαlly pδrταblε εxεcµταblε&lt;/a&gt; is a binary can run natively in many operative systems.&lt;/p&gt; &#xA;&lt;h1&gt;For the impatient&lt;/h1&gt; &#xA;&lt;p&gt;Just run these commands to enjoy a portable Scala.js binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scala-cli package -f --js-mode release main.scala&#xA;zip qjs.com main.js .args&#xA;./qjs.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;You need the quickjs universal binary &lt;code&gt;qjs.com&lt;/code&gt;. I included it in the repo but you can build it yourself with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/jart/cosmopolitan&#xA;cd cosmopolitan&#xA;make -j8 o//third_party/quickjs/qjs.com&#xA;cp o//third_party/quickjs/qjs.com ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can build your Javascript file with your favorite Scala.js toolchain. For example with &lt;code&gt;scala-cli&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scala-cli package --js-mode release main.scala&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you need to add the Scala.js produced &lt;code&gt;main.js&lt;/code&gt; to the &lt;code&gt;qjs.com&lt;/code&gt; binary. APE binaries are also zip archives and can access the files contained in theirselves.&lt;/p&gt; &#xA;&lt;p&gt;You also need to add a &lt;code&gt;.args&lt;/code&gt; file to set some command line arguments to pass to quickjs. In our case we will pass the file name in the &lt;code&gt;/zip&lt;/code&gt; directory, which is a special path containing the files in the zip archive.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zip qjs.com main.js .args&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you created your universal Scala.js binary, you can run in every major operating system with no dependencies.&lt;/p&gt; &#xA;&lt;h1&gt;Fast compile run loop&lt;/h1&gt; &#xA;&lt;p&gt;You don&#39;t need to zip a Javascript file to run it with quickjs. You can just use &lt;code&gt;qjs.com&lt;/code&gt; as a standalone Javascript runtime.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scala-cli package -f -w main.scala &amp;amp;&amp;amp; ./qjs.com main.js&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>