<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-17T01:54:34Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>json4s/json4s</title>
    <updated>2022-06-17T01:54:34Z</updated>
    <id>tag:github.com,2022-06-17:/json4s/json4s</id>
    <link href="https://github.com/json4s/json4s" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JSON library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JSON4S &lt;a href=&#34;https://search.maven.org/search?q=g:org.json4s%20AND%20a:json4s-core_2.12&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.json4s/json4s-core_2.12.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/json4s/json4s?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/json4s/json4s&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;At this moment there are at least 6 json libraries for scala, not counting the java json libraries. All these libraries have a very similar AST. This project aims to provide a single AST to be used by other scala json libraries.&lt;/p&gt; &#xA;&lt;p&gt;At this moment the approach taken to working with the AST has been taken from lift-json and the native package is in fact lift-json but outside of the lift project.&lt;/p&gt; &#xA;&lt;h2&gt;Lift JSON&lt;/h2&gt; &#xA;&lt;p&gt;This project also attempts to set lift-json free from the release schedule imposed by the lift framework. The Lift framework carries many dependencies and as such it&#39;s typically a blocker for many other scala projects when a new version of scala is released.&lt;/p&gt; &#xA;&lt;p&gt;So the native package in this library is in fact verbatim lift-json in a different package name; this means that your import statements will change if you use this library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.json4s._&#xA;import org.json4s.native.JsonMethods._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that everything works exactly the same as it would with lift-json&lt;/p&gt; &#xA;&lt;h2&gt;Jackson&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the native parser there is also an implementation that uses jackson for parsing to the AST. The jackson module includes most of the jackson-module-scala functionality and the ability to use it with the lift-json AST.&lt;/p&gt; &#xA;&lt;p&gt;To use jackson instead of the native parser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.json4s._&#xA;import org.json4s.jackson.JsonMethods._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be aware that the default behavior of the jackson integration is to close the stream when it&#39;s done. If you want to change that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.fasterxml.jackson.databind.SerializationFeature&#xA;org.json4s.jackson.JsonMethods.mapper.configure(SerializationFeature.CLOSE_CLOSEABLE, false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Guide&lt;/h2&gt; &#xA;&lt;p&gt;Parsing and formatting utilities for JSON.&lt;/p&gt; &#xA;&lt;p&gt;A central concept in lift-json library is Json AST which models the structure of a JSON document as a syntax tree.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;sealed abstract class JValue&#xA;case object JNothing extends JValue // &#39;zero&#39; for JValue&#xA;case object JNull extends JValue&#xA;case class JString(s: String) extends JValue&#xA;case class JDouble(num: Double) extends JValue&#xA;case class JDecimal(num: BigDecimal) extends JValue&#xA;case class JInt(num: BigInt) extends JValue&#xA;case class JLong(num: Long) extends JValue&#xA;case class JBool(value: Boolean) extends JValue&#xA;case class JObject(obj: List[JField]) extends JValue&#xA;case class JArray(arr: List[JValue]) extends JValue&#xA;&#xA;type JField = (String, JValue)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All features are implemented in terms of the above AST. Functions are used to transform the AST itself, or to transform the AST between different formats. Common transformations are summarized in a following picture.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/json4s/json4s/master/core/json.png&#34; alt=&#34;Json AST&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Summary of the features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast JSON parser&lt;/li&gt; &#xA; &lt;li&gt;LINQ-style queries&lt;/li&gt; &#xA; &lt;li&gt;Case classes can be used to extract values from parsed JSON&lt;/li&gt; &#xA; &lt;li&gt;Diff &amp;amp; merge&lt;/li&gt; &#xA; &lt;li&gt;DSL to produce valid JSON&lt;/li&gt; &#xA; &lt;li&gt;XPath-like expressions and HOFs to manipulate JSON&lt;/li&gt; &#xA; &lt;li&gt;Pretty and compact printing&lt;/li&gt; &#xA; &lt;li&gt;XML conversions&lt;/li&gt; &#xA; &lt;li&gt;Serialization&lt;/li&gt; &#xA; &lt;li&gt;Low-level pull parser API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can add the json4s as a dependency in following ways. Note, replace {latestVersion} with correct Json4s version.&lt;/p&gt; &#xA;&lt;p&gt;You can find available versions here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=org.json4s&#34;&gt;https://search.maven.org/search?q=org.json4s&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;SBT users&lt;/h3&gt; &#xA;&lt;p&gt;For the native support add the following dependency to your project description:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val json4sNative = &#34;org.json4s&#34; %% &#34;json4s-native&#34; % &#34;{latestVersion}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the Jackson support add the following dependency to your project description:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val json4sJackson = &#34;org.json4s&#34; %% &#34;json4s-jackson&#34; % &#34;{latestVersion}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maven users&lt;/h3&gt; &#xA;&lt;p&gt;For the native support add the following dependency to your pom:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.json4s&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;json4s-native_${scala.version}&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;{latestVersion}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the jackson support add the following dependency to your pom:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;org.json4s&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;json4s-jackson_${scala.version}&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;{latestVersion}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/json4s/json4s/tree/master/ext&#34;&gt;ext&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Support for Enum, Joda-Time, Java 8 Date &amp;amp; Time...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/json4s/json4s/tree/master/scalaz&#34;&gt;scalaz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Applicative style parsing with Scalaz&lt;/p&gt; &#xA;&lt;h1&gt;Parsing JSON&lt;/h1&gt; &#xA;&lt;p&gt;Any valid json can be parsed into internal AST format. For native support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import org.json4s._&#xA;scala&amp;gt; import org.json4s.native.JsonMethods._&#xA;&#xA;scala&amp;gt; parse(&#34;&#34;&#34; { &#34;numbers&#34; : [1, 2, 3, 4] } &#34;&#34;&#34;)&#xA;res0: org.json4s.JValue =&#xA;      JObject(List((numbers,JArray(List(JInt(1), JInt(2), JInt(3), JInt(4))))))&#xA;&#xA;scala&amp;gt; parse(&#34;&#34;&#34;{&#34;name&#34;:&#34;Toy&#34;,&#34;price&#34;:35.35}&#34;&#34;&#34;, useBigDecimalForDouble = true)&#xA;res1: org.json4s.JValue =&#xA;      JObject(List((name,JString(Toy)), (price,JDecimal(35.35))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For jackson support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import org.json4s._&#xA;scala&amp;gt; import org.json4s.jackson.JsonMethods._&#xA;&#xA;scala&amp;gt; parse(&#34;&#34;&#34; { &#34;numbers&#34; : [1, 2, 3, 4] } &#34;&#34;&#34;)&#xA;res0: org.json4s.JValue =&#xA;      JObject(List((numbers,JArray(List(JInt(1), JInt(2), JInt(3), JInt(4))))))&#xA;&#xA;scala&amp;gt; parse(&#34;&#34;&#34;{&#34;name&#34;:&#34;Toy&#34;,&#34;price&#34;:35.35}&#34;&#34;&#34;, useBigDecimalForDouble = true)&#xA;res1: org.json4s.JValue =&#xA;      JObject(List((name,JString(Toy)), (price,JDecimal(35.35))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Producing JSON&lt;/h1&gt; &#xA;&lt;p&gt;You can generate json in 2 modes: either in &lt;code&gt;DoubleMode&lt;/code&gt; or in &lt;code&gt;BigDecimalMode&lt;/code&gt;; the former will map all decimal values into JDoubles, and the latter into JDecimals.&lt;/p&gt; &#xA;&lt;p&gt;For the double mode dsl use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.json4s.JsonDSL._&#xA;// or&#xA;import org.json4s.JsonDSL.WithDouble._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the big decimal mode dsl use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.json4s.JsonDSL.WithBigDecimal._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DSL rules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Primitive types map to JSON primitives.&lt;/li&gt; &#xA; &lt;li&gt;Any seq produces JSON array.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; val json = List(1, 2, 3)&#xA;&#xA;scala&amp;gt; compact(render(json))&#xA;res0: String = [1,2,3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tuple2[String, A] produces field.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; val json = (&#34;name&#34; -&amp;gt; &#34;joe&#34;)&#xA;&#xA;scala&amp;gt; compact(render(json))&#xA;res1: String = {&#34;name&#34;:&#34;joe&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;~ operator produces object by combining fields.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; val json = (&#34;name&#34; -&amp;gt; &#34;joe&#34;) ~ (&#34;age&#34; -&amp;gt; 35)&#xA;&#xA;scala&amp;gt; compact(render(json))&#xA;res2: String = {&#34;name&#34;:&#34;joe&#34;,&#34;age&#34;:35}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;~~ operator works the same as ~ and is useful in situations where ~ is shadowed, eg. when using Spray or akka-http.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; val json = (&#34;name&#34; -&amp;gt; &#34;joe&#34;) ~~ (&#34;age&#34; -&amp;gt; 35)&#xA;&#xA;scala&amp;gt; compact(render(json))&#xA;res2: String = {&#34;name&#34;:&#34;joe&#34;,&#34;age&#34;:35}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any value can be optional. The field and value are completely removed when it doesn&#39;t have a value.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; val json = (&#34;name&#34; -&amp;gt; &#34;joe&#34;) ~ (&#34;age&#34; -&amp;gt; Some(35))&#xA;&#xA;scala&amp;gt; compact(render(json))&#xA;res3: String = {&#34;name&#34;:&#34;joe&#34;,&#34;age&#34;:35}&#xA;&#xA;scala&amp;gt; val json = (&#34;name&#34; -&amp;gt; &#34;joe&#34;) ~ (&#34;age&#34; -&amp;gt; (None: Option[Int]))&#xA;&#xA;scala&amp;gt; compact(render(json))&#xA;res4: String = {&#34;name&#34;:&#34;joe&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extending the dsl&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To extend the dsl with your own classes you must have an implicit conversion in scope of signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;type DslConversion = T =&amp;gt; JValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.json4s._&#xA;import org.json4s.JsonDSL._&#xA;import org.json4s.jackson.JsonMethods._&#xA;&#xA;case class Winner(id: Long, numbers: List[Int])&#xA;case class Lotto(id: Long, winningNumbers: List[Int], winners: List[Winner], drawDate: Option[java.util.Date])&#xA;&#xA;object JsonExample {&#xA;&#xA;  val winners = List(Winner(23, List(2, 45, 34, 23, 3, 5)), Winner(54, List(52, 3, 12, 11, 18, 22)))&#xA;  val lotto = Lotto(5, List(2, 45, 34, 23, 7, 5, 3), winners, None)&#xA;&#xA;  val json =&#xA;    (&#34;lotto&#34; -&amp;gt;&#xA;      (&#34;lotto-id&#34; -&amp;gt; lotto.id) ~&#xA;      (&#34;winning-numbers&#34; -&amp;gt; lotto.winningNumbers) ~&#xA;      (&#34;draw-date&#34; -&amp;gt; lotto.drawDate.map(_.toString)) ~&#xA;      (&#34;winners&#34; -&amp;gt;&#xA;        lotto.winners.map { w =&amp;gt;&#xA;          ((&#34;winner-id&#34; -&amp;gt; w.id) ~&#xA;           (&#34;numbers&#34; -&amp;gt; w.numbers))}))&#xA;&#xA;  def main(args: Array[String]): Unit = {&#xA;    println(compact(render(json)))&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; JsonExample.main(Array.empty[String])&#xA;{&#34;lotto&#34;:{&#34;lotto-id&#34;:5,&#34;winning-numbers&#34;:[2,45,34,23,7,5,3],&#34;winners&#34;:&#xA;[{&#34;winner-id&#34;:23,&#34;numbers&#34;:[2,45,34,23,3,5]},{&#34;winner-id&#34;:54,&#34;numbers&#34;:[52,3,12,11,18,22]}]}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above example produces the following pretty-printed JSON. Notice that draw-date field is not rendered since its value is None:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; pretty(render(JsonExample.json))&#xA;&#xA;{&#xA;  &#34;lotto&#34;:{&#xA;    &#34;lotto-id&#34;:5,&#xA;    &#34;winning-numbers&#34;:[2,45,34,23,7,5,3],&#xA;    &#34;winners&#34;:[{&#xA;      &#34;winner-id&#34;:23,&#xA;      &#34;numbers&#34;:[2,45,34,23,3,5]&#xA;    },{&#xA;      &#34;winner-id&#34;:54,&#xA;      &#34;numbers&#34;:[52,3,12,11,18,22]&#xA;    }]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Merging &amp;amp; Diffing&lt;/h2&gt; &#xA;&lt;p&gt;Two JSONs can be merged and diffed with each other. Please see more examples in &lt;a href=&#34;https://github.com/json4s/json4s/raw/3.6/tests/src/test/scala/org/json4s/MergeExamples.scala&#34;&gt;MergeExamples.scala&lt;/a&gt; and &lt;a href=&#34;https://github.com/json4s/json4s/raw/3.6/tests/src/test/scala/org/json4s/DiffExamples.scala&#34;&gt;DiffExamples.scala&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import org.json4s._&#xA;scala&amp;gt; import org.json4s.jackson.JsonMethods._&#xA;&#xA;scala&amp;gt; val lotto1 = parse(&#34;&#34;&#34;{&#xA;         &#34;lotto&#34;:{&#xA;           &#34;lotto-id&#34;:5,&#xA;           &#34;winning-numbers&#34;:[2,45,34,23,7,5,3],&#xA;           &#34;winners&#34;:[{&#xA;             &#34;winner-id&#34;:23,&#xA;             &#34;numbers&#34;:[2,45,34,23,3,5]&#xA;           }]&#xA;         }&#xA;       }&#34;&#34;&#34;)&#xA;&#xA;scala&amp;gt; val lotto2 = parse(&#34;&#34;&#34;{&#xA;         &#34;lotto&#34;:{&#xA;           &#34;winners&#34;:[{&#xA;             &#34;winner-id&#34;:54,&#xA;             &#34;numbers&#34;:[52,3,12,11,18,22]&#xA;           }]&#xA;         }&#xA;       }&#34;&#34;&#34;)&#xA;&#xA;scala&amp;gt; val mergedLotto = lotto1 merge lotto2&#xA;&#xA;scala&amp;gt; pretty(render(mergedLotto))&#xA;res0: String =&#xA;{&#xA;  &#34;lotto&#34;:{&#xA;    &#34;lotto-id&#34;:5,&#xA;    &#34;winning-numbers&#34;:[2,45,34,23,7,5,3],&#xA;    &#34;winners&#34;:[{&#xA;      &#34;winner-id&#34;:23,&#xA;      &#34;numbers&#34;:[2,45,34,23,3,5]&#xA;    },{&#xA;      &#34;winner-id&#34;:54,&#xA;      &#34;numbers&#34;:[52,3,12,11,18,22]&#xA;    }]&#xA;  }&#xA;}&#xA;&#xA;scala&amp;gt; val Diff(changed, added, deleted) = mergedLotto diff lotto1&#xA;changed: org.json4s.JValue = JNothing&#xA;added: org.json4s.JValue = JNothing&#xA;deleted: org.json4s.JValue = JObject(List((lotto,JObject(List(JField(winners,&#xA;JArray(List(JObject(List((winner-id,JInt(54)), (numbers,JArray(&#xA;List(JInt(52), JInt(3), JInt(12), JInt(11), JInt(18), JInt(22))))))))))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Querying JSON&lt;/h1&gt; &#xA;&lt;h2&gt;&#34;LINQ&#34; style&lt;/h2&gt; &#xA;&lt;p&gt;JSON values can be extracted using for-comprehensions. Please see more examples in &lt;a href=&#34;https://github.com/json4s/json4s/raw/3.6/tests/src/test/scala/org/json4s/JsonQueryExamples.scala&#34;&gt;JsonQueryExamples.scala&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import org.json4s._&#xA;scala&amp;gt; import org.json4s.native.JsonMethods._&#xA;&#xA;scala&amp;gt; val json = parse(&#34;&#34;&#34;&#xA;         { &#34;name&#34;: &#34;joe&#34;,&#xA;           &#34;children&#34;: [&#xA;             {&#xA;               &#34;name&#34;: &#34;Mary&#34;,&#xA;               &#34;age&#34;: 5&#xA;             },&#xA;             {&#xA;               &#34;name&#34;: &#34;Mazy&#34;,&#xA;               &#34;age&#34;: 3&#xA;             }&#xA;           ]&#xA;         }&#xA;       &#34;&#34;&#34;)&#xA;&#xA;scala&amp;gt; for {&#xA;         JObject(child) &amp;lt;- json&#xA;         JField(&#34;age&#34;, JInt(age))  &amp;lt;- child&#xA;       } yield age&#xA;res0: List[BigInt] = List(5, 3)&#xA;&#xA;scala&amp;gt; for {&#xA;         JObject(child) &amp;lt;- json&#xA;         JField(&#34;name&#34;, JString(name)) &amp;lt;- child&#xA;         JField(&#34;age&#34;, JInt(age)) &amp;lt;- child&#xA;         if age &amp;gt; 4&#xA;       } yield (name, age)&#xA;res1: List[(String, BigInt)] = List((Mary,5))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;XPath + HOFs&lt;/h2&gt; &#xA;&lt;p&gt;The json AST can be queried using XPath-like functions. The following REPL session shows the usage of &#39;\&#39;, &#39;\\&#39;, &#39;find&#39;, &#39;filter&#39;, &#39;transform&#39;, &#39;remove&#39; and &#39;values&#39; functions.&lt;/p&gt; &#xA;&lt;p&gt;The example json is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;person&#34;: {&#xA;    &#34;name&#34;: &#34;Joe&#34;,&#xA;    &#34;age&#34;: 35,&#xA;    &#34;spouse&#34;: {&#xA;      &#34;person&#34;: {&#xA;        &#34;name&#34;: &#34;Marilyn&#34;,&#xA;        &#34;age&#34;: 33&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Translated to DSL syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import org.json4s._&#xA;scala&amp;gt; import org.json4s.native.JsonMethods._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import org.json4s.jackson.JsonMethods._&#xA;scala&amp;gt; import org.json4s.JsonDSL._&#xA;&#xA;scala&amp;gt; val json: JObject =&#xA;  (&#34;person&#34; -&amp;gt;&#xA;    (&#34;name&#34; -&amp;gt; &#34;Joe&#34;) ~&#xA;    (&#34;age&#34; -&amp;gt; 35) ~&#xA;    (&#34;spouse&#34; -&amp;gt;&#xA;      (&#34;person&#34; -&amp;gt;&#xA;        (&#34;name&#34; -&amp;gt; &#34;Marilyn&#34;) ~&#xA;        (&#34;age&#34; -&amp;gt; 33)&#xA;      )&#xA;    )&#xA;  )&#xA;&#xA;scala&amp;gt; json \\ &#34;spouse&#34;&#xA;res0: org.json4s.JValue = JObject(List(&#xA;      (person,JObject(List((name,JString(Marilyn)), (age,JInt(33)))))))&#xA;&#xA;scala&amp;gt; compact(render(res0))&#xA;res1: String = {&#34;person&#34;:{&#34;name&#34;:&#34;Marilyn&#34;,&#34;age&#34;:33}}&#xA;&#xA;scala&amp;gt; compact(render(json \\ &#34;name&#34;))&#xA;res2: String = {&#34;name&#34;:&#34;Joe&#34;,&#34;name&#34;:&#34;Marilyn&#34;}&#xA;&#xA;scala&amp;gt; compact(render((json removeField { _ == JField(&#34;name&#34;, JString(&#34;Marilyn&#34;)) }) \\ &#34;name&#34;))&#xA;res3: String = &#34;Joe&#34;&#xA;&#xA;scala&amp;gt; compact(render(json \ &#34;person&#34; \ &#34;name&#34;))&#xA;res4: String = &#34;Joe&#34;&#xA;&#xA;scala&amp;gt; compact(render(json \ &#34;person&#34; \ &#34;spouse&#34; \ &#34;person&#34; \ &#34;name&#34;))&#xA;res5: String = &#34;Marilyn&#34;&#xA;&#xA;scala&amp;gt; json findField {&#xA;         case JField(&#34;name&#34;, _) =&amp;gt; true&#xA;         case _ =&amp;gt; false&#xA;       }&#xA;res6: Option[org.json4s.JValue] = Some((name,JString(Joe)))&#xA;&#xA;scala&amp;gt; json filterField {&#xA;         case JField(&#34;name&#34;, _) =&amp;gt; true&#xA;         case _ =&amp;gt; false&#xA;       }&#xA;res7: List[org.json4s.JField] = List(JField(name,JString(Joe)), JField(name,JString(Marilyn)))&#xA;&#xA;scala&amp;gt; json transformField {&#xA;         case JField(&#34;name&#34;, JString(s)) =&amp;gt; (&#34;NAME&#34;, JString(s.toUpperCase))&#xA;       }&#xA;res8: org.json4s.JValue = JObject(List((person,JObject(List(&#xA;(NAME,JString(JOE)), (age,JInt(35)), (spouse,JObject(List(&#xA;(person,JObject(List((NAME,JString(MARILYN)), (age,JInt(33)))))))))))))&#xA;&#xA;scala&amp;gt; json.values&#xA;res8: scala.collection.immutable.Map[String,Any] = Map(person -&amp;gt; Map(name -&amp;gt; Joe, age -&amp;gt; 35, spouse -&amp;gt; Map(person -&amp;gt; Map(name -&amp;gt; Marilyn, age -&amp;gt; 33))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Indexed path expressions work too and values can be unboxed using type expressions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; val json = parse(&#34;&#34;&#34;&#xA;         { &#34;name&#34;: &#34;joe&#34;,&#xA;           &#34;children&#34;: [&#xA;             {&#xA;               &#34;name&#34;: &#34;Mary&#34;,&#xA;               &#34;age&#34;: 5&#xA;             },&#xA;             {&#xA;               &#34;name&#34;: &#34;Mazy&#34;,&#xA;               &#34;age&#34;: 3&#xA;             }&#xA;           ]&#xA;         }&#xA;       &#34;&#34;&#34;)&#xA;&#xA;scala&amp;gt; (json \ &#34;children&#34;)(0)&#xA;res0: org.json4s.JValue = JObject(List((name,JString(Mary)), (age,JInt(5))))&#xA;&#xA;scala&amp;gt; (json \ &#34;children&#34;)(1) \ &#34;name&#34;&#xA;res1: org.json4s.JValue = JString(Mazy)&#xA;&#xA;scala&amp;gt; json \\ classOf[JInt]&#xA;res2: List[org.json4s.JInt#Values] = List(5, 3)&#xA;&#xA;scala&amp;gt; json \ &#34;children&#34; \\ classOf[JString]&#xA;res3: List[org.json4s.JString#Values] = List(Mary, Mazy)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Extracting values&lt;/h1&gt; &#xA;&lt;p&gt;Case classes can be used to extract values from parsed JSON. Non-existent values can be extracted into scala.Option and strings can be automatically converted into java.util.Dates.&lt;/p&gt; &#xA;&lt;p&gt;Please see more examples in &lt;a href=&#34;https://github.com/json4s/json4s/raw/3.6/tests/src/test/scala/org/json4s/ExtractionExamplesSpec.scala&#34;&gt;ExtractionExampleSpec.scala&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import org.json4s._&#xA;scala&amp;gt; import org.json4s.jackson.JsonMethods._&#xA;&#xA;scala&amp;gt; implicit val formats: Formats = DefaultFormats // Brings in default date formats etc.&#xA;&#xA;scala&amp;gt; case class Child(name: String, age: Int, birthdate: Option[java.util.Date])&#xA;scala&amp;gt; case class Address(street: String, city: String)&#xA;scala&amp;gt; case class Person(name: String, address: Address, children: List[Child])&#xA;&#xA;scala&amp;gt; val json = parse(&#34;&#34;&#34;&#xA;         { &#34;name&#34;: &#34;joe&#34;,&#xA;           &#34;address&#34;: {&#xA;             &#34;street&#34;: &#34;Bulevard&#34;,&#xA;             &#34;city&#34;: &#34;Helsinki&#34;&#xA;           },&#xA;           &#34;children&#34;: [&#xA;             {&#xA;               &#34;name&#34;: &#34;Mary&#34;,&#xA;               &#34;age&#34;: 5,&#xA;               &#34;birthdate&#34;: &#34;2004-09-04T18:06:22Z&#34;&#xA;             },&#xA;             {&#xA;               &#34;name&#34;: &#34;Mazy&#34;,&#xA;               &#34;age&#34;: 3&#xA;             }&#xA;           ]&#xA;         }&#xA;       &#34;&#34;&#34;)&#xA;&#xA;scala&amp;gt; json.extract[Person]&#xA;res0: Person = Person(joe,Address(Bulevard,Helsinki),List(Child(Mary,5,Some(Sat Sep 04 18:06:22 EEST 2004)), Child(Mazy,3,None)))&#xA;&#xA;scala&amp;gt; val addressJson = json  \ &#34;address&#34;  // Extract address object&#xA;scala&amp;gt; addressJson.extract[Address]&#xA;res1: Address = Address(Bulevard,Helsinki)&#xA;&#xA;scala&amp;gt; (json \ &#34;children&#34;).extract[List[Child]]  // Extract list of objects&#xA;res2: List[Child] = List(Child(Mary,5,Some(Sat Sep 04 23:36:22 IST 2004)), Child(Mazy,3,None))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default the constructor parameter names must match json field names. However, sometimes json field names contain characters which are not allowed characters in Scala identifiers. There are two solutions for this. (See &lt;a href=&#34;https://github.com/json4s/json4s/raw/3.6/tests/src/test/scala/org/json4s/LottoExample.scala&#34;&gt;LottoExample.scala&lt;/a&gt; for a bigger example.)&lt;/p&gt; &#xA;&lt;p&gt;Use back ticks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; case class Person(`first-name`: String)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use transform function to postprocess AST:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; case class Person(firstname: String)&#xA;scala&amp;gt; json transformField {&#xA;         case (&#34;first-name&#34;, x) =&amp;gt; (&#34;firstname&#34;, x)&#xA;       }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the json field names are snake case (i.e., separated_by_underscores), but the case class uses camel case (i.e., firstLetterLowercaseAndNextWordsCapitalized), you can convert the keys during the extraction using &lt;code&gt;camelizeKeys&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import org.json4s._&#xA;scala&amp;gt; import org.json4s.native.JsonMethods._&#xA;scala&amp;gt; implicit val formats: Formats = DefaultFormats&#xA;scala&amp;gt; val json = parse(&#34;&#34;&#34;{&#34;first_name&#34;:&#34;Mary&#34;}&#34;&#34;&#34;)&#xA;scala&amp;gt; case class Person(firstName: String)&#xA;&#xA;scala&amp;gt; json.camelizeKeys.extract[Person]&#xA;res0: Person = Person(Mary)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &#34;Serialization&#34; section below for details on converting a class with camel-case fields into json with snake case keys.&lt;/p&gt; &#xA;&lt;p&gt;The extraction function tries to find the best-matching constructor when the case class has auxiliary constructors. For instance, extracting from JSON {&#34;price&#34;:350} into the following case class will use the auxiliary constructor instead of the primary constructor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; case class Bike(make: String, price: Int) {&#xA;         def this(price: Int) = this(&#34;Trek&#34;, price)&#xA;       }&#xA;scala&amp;gt; parse(&#34;&#34;&#34; {&#34;price&#34;:350} &#34;&#34;&#34;).extract[Bike]&#xA;res0: Bike = Bike(Trek,350)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Primitive values can be extracted from JSON primitives or fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; (json \ &#34;name&#34;).extract[String]&#xA;res0: String = &#34;joe&#34;&#xA;&#xA;scala&amp;gt; ((json \ &#34;children&#34;)(0) \ &#34;birthdate&#34;).extract[Date]&#xA;res1: java.util.Date = Sat Sep 04 21:06:22 EEST 2004&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DateFormat can be changed by overriding &#39;DefaultFormats&#39; (or by implementing trait &#39;Formats&#39;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; implicit val formats: Formats = new DefaultFormats {&#xA;         override def dateFormatter = new SimpleDateFormat(&#34;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;)&#xA;       }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A JSON object can be extracted to Map[String, _] too. Each field becomes a key value pair in result Map:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; val json = parse(&#34;&#34;&#34;&#xA;         {&#xA;           &#34;name&#34;: &#34;joe&#34;,&#xA;           &#34;addresses&#34;: {&#xA;             &#34;address1&#34;: {&#xA;               &#34;street&#34;: &#34;Bulevard&#34;,&#xA;               &#34;city&#34;: &#34;Helsinki&#34;&#xA;             },&#xA;             &#34;address2&#34;: {&#xA;               &#34;street&#34;: &#34;Soho&#34;,&#xA;               &#34;city&#34;: &#34;London&#34;&#xA;             }&#xA;           }&#xA;         }&#34;&#34;&#34;)&#xA;&#xA;scala&amp;gt; case class PersonWithAddresses(name: String, addresses: Map[String, Address])&#xA;scala&amp;gt; json.extract[PersonWithAddresses]&#xA;res0: PersonWithAddresses(&#34;joe&#34;, Map(&#34;address1&#34; -&amp;gt; Address(&#34;Bulevard&#34;, &#34;Helsinki&#34;),&#xA;                                     &#34;address2&#34; -&amp;gt; Address(&#34;Soho&#34;, &#34;London&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that when the extraction of an &lt;code&gt;Option[_]&lt;/code&gt; fails, the default behavior of &lt;code&gt;extract&lt;/code&gt; is to return &lt;code&gt;None&lt;/code&gt;. You can make it fail with a [MappingException] by using a custom &lt;code&gt;Formats&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val formats: Formats = DefaultFormats.withStrictOptionParsing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val formats: Formats = new DefaultFormats {&#xA;  override val strictOptionParsing: Boolean = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same happens with collections(for example, List and Map...), the default behavior of &lt;code&gt;extract&lt;/code&gt; is to return an empty instance of the collection. You can make it fail with a [MappingException] by using a custom &lt;code&gt;Formats&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val formats: Formats = DefaultFormats.withStrictArrayExtraction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val formats: Formats = new DefaultFormats {&#xA;  override val strictArrayExtraction: Boolean = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val formats: Formats = DefaultFormats.withStrictMapExtraction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val formats: Formats = new DefaultFormats {&#xA;  override val strictMapExtraction: Boolean = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These settings (&lt;code&gt;strictOptionParsing&lt;/code&gt;, &lt;code&gt;strictArrayExtraction&lt;/code&gt; and &lt;code&gt;strictMapExtraction&lt;/code&gt;) can be enabled with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val formats: Formats = DefaultFormats.strict&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With Json4s 3.6 and higher, &lt;code&gt;apply&lt;/code&gt; functions in companion objects will be evaluated for use during extraction. If this behavior is not desired, you can disable it using the &lt;code&gt;considerCompanionConstructors&lt;/code&gt; on a custom &lt;code&gt;Formats&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val formats: Formats = new DefaultFormats { override val considerCompanionConstructors = false }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When this option is disabled, only primary and secondary constructors will be evaluated for use during extraction.&lt;/p&gt; &#xA;&lt;h2&gt;Handling &lt;code&gt;null&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;null&lt;/code&gt; values of &lt;code&gt;Option&lt;/code&gt;s are always extracted as &lt;code&gt;None&lt;/code&gt;. For other types you can control the behaviour by setting the &lt;code&gt;nullExtractionStrategy&lt;/code&gt; of the &lt;code&gt;Formats&lt;/code&gt; used during extraction. There are three options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Keep&lt;/code&gt;: Leaves null values as they are.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Disallow&lt;/code&gt;: Fails extraction when a &lt;code&gt;null&lt;/code&gt; value is encountered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TreatAsAbsent&lt;/code&gt;: Treats &lt;code&gt;null&lt;/code&gt; values as if they were not present at all.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Serialization&lt;/h1&gt; &#xA;&lt;p&gt;Case classes can be serialized and deserialized. Please see other examples in &lt;a href=&#34;https://github.com/json4s/json4s/raw/3.6/tests/src/test/scala/org/json4s/native/SerializationExamples.scala&#34;&gt;SerializationExamples.scala&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import org.json4s._&#xA;scala&amp;gt; import org.json4s.native.Serialization&#xA;scala&amp;gt; import org.json4s.native.Serialization.{read, write}&#xA;&#xA;scala&amp;gt; implicit val formats: Formats = Serialization.formats(NoTypeHints)&#xA;&#xA;scala&amp;gt; val ser = write(Child(&#34;Mary&#34;, 5, None))&#xA;&#xA;scala&amp;gt; read[Child](ser)&#xA;res1: Child = Child(Mary,5,None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using jackson instead of the native one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import org.json4s._&#xA;scala&amp;gt; import org.json4s.jackson.Serialization&#xA;scala&amp;gt; import org.json4s.jackson.Serialization.{read, write}&#xA;&#xA;scala&amp;gt; implicit val formats: Formats = Serialization.formats(NoTypeHints)&#xA;&#xA;scala&amp;gt; val ser = write(Child(&#34;Mary&#34;, 5, None))&#xA;&#xA;scala&amp;gt; read[Child](ser)&#xA;res1: Child = Child(Mary,5,None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Serialization supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arbitrarily deep case-class graphs&lt;/li&gt; &#xA; &lt;li&gt;All primitive types, including BigInt and Symbol&lt;/li&gt; &#xA; &lt;li&gt;List, Seq, Array, Set and Map (note, keys of the Map must be strings: Map[String, _])&lt;/li&gt; &#xA; &lt;li&gt;scala.Option&lt;/li&gt; &#xA; &lt;li&gt;java.util.Date&lt;/li&gt; &#xA; &lt;li&gt;Polymorphic Lists (see below)&lt;/li&gt; &#xA; &lt;li&gt;Recursive types&lt;/li&gt; &#xA; &lt;li&gt;Serialization of fields of a class (see below)&lt;/li&gt; &#xA; &lt;li&gt;Custom serializer functions for types that are not supported (see below)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the class contains camel-case fields (i.e: firstLetterLowercaseAndNextWordsCapitalized) but you want to produce a json string with snake casing (i.e., separated_by_underscores), you can use the &lt;code&gt;snakizeKeys&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; val ser = write(Person(&#34;Mary&#34;))&#xA;ser: String = {&#34;firstName&#34;:&#34;Mary&#34;}&#xA;&#xA;scala&amp;gt; compact(render(parse(ser).snakizeKeys))&#xA;res0: String = {&#34;first_name&#34;:&#34;Mary&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Serializing polymorphic Lists&lt;/h2&gt; &#xA;&lt;p&gt;Type hints are required when serializing polymorphic (or heterogeneous) Lists. Serialized JSON objects will get an extra field named &#39;jsonClass&#39; (the name can be changed by overriding &#39;typeHintFieldName&#39; from Formats).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; trait Animal&#xA;scala&amp;gt; case class Dog(name: String) extends Animal&#xA;scala&amp;gt; case class Fish(weight: Double) extends Animal&#xA;scala&amp;gt; case class Animals(animals: List[Animal])&#xA;&#xA;scala&amp;gt; implicit val formats: Formats = Serialization.formats(ShortTypeHints(List(classOf[Dog], classOf[Fish])))&#xA;&#xA;scala&amp;gt; val ser = write(Animals(Dog(&#34;pluto&#34;) :: Fish(1.2) :: Nil))&#xA;ser: String = {&#34;animals&#34;:[{&#34;jsonClass&#34;:&#34;Dog&#34;,&#34;name&#34;:&#34;pluto&#34;},{&#34;jsonClass&#34;:&#34;Fish&#34;,&#34;weight&#34;:1.2}]}&#xA;&#xA;scala&amp;gt; read[Animals](ser)&#xA;res0: Animals = Animals(List(Dog(pluto), Fish(1.2)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ShortTypeHints outputs the short classname for all instances of configured objects. FullTypeHints outputs the full classname. Other strategies can be implemented by extending the TypeHints trait.&lt;/p&gt; &#xA;&lt;h2&gt;Serializing fields of a class&lt;/h2&gt; &#xA;&lt;p&gt;To enable serialization of fields, a single FieldSerializer can be added for each type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;implicit val formats: Formats = DefaultFormats + FieldSerializer[WildDog]()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now the type WildDog (and all subtypes) gets serialized with all its fields (+ constructor parameters). FieldSerializer takes two optional parameters, which can be used to intercept the field serialization:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class FieldSerializer[A: Manifest](&#xA;  serializer:   PartialFunction[(String, Any), Option[(String, Any)]] = Map(),&#xA;  deserializer: PartialFunction[JField, JField] = Map()&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those PartialFunctions are called just before a field is serialized or deserialized. Some useful PFs to rename and ignore fields are provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val dogSerializer = FieldSerializer[WildDog](&#xA;  renameTo(&#34;name&#34;, &#34;animalname&#34;) orElse ignore(&#34;owner&#34;),&#xA;  renameFrom(&#34;animalname&#34;, &#34;name&#34;))&#xA;&#xA;implicit val formats: Formats = DefaultFormats + dogSerializer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Support for renaming multiple fields is accomplished by chaining the PFs like so: (do not add more than one FieldSerializer per type)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;id&#34;: &#34;a244&#34;, &#34;start-time&#34;: 12314545, &#34;end-time&#34;: -1}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class Log(id: String, startTime: Long, endTime: Long)&#xA;val logSerializer = FieldSerializer[Log](&#xA;  renameTo(&#34;startTime&#34;, &#34;start-time&#34;) orElse renameTo(&#34;endTime&#34;, &#34;end-time&#34;),&#xA;  renameFrom(&#34;start-time&#34;, &#34;startTime&#34;) orElse renameFrom(&#34;end-time&#34;, &#34;endTime&#34;))&#xA;&#xA;implicit val formats: Formats = DefaultFormats + logSerializer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Serializing classes defined in traits or classes&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve added support for case classes defined in a trait. But they do need custom formats. I&#39;ll explain why and then how.&lt;/p&gt; &#xA;&lt;h5&gt;Why?&lt;/h5&gt; &#xA;&lt;p&gt;For classes defined in a trait it&#39;s a bit difficult to get to their companion object, which is needed to provide default values. We could punt on those but that brings us to the next problem, that the compiler generates an extra field in the constructor of such case classes. The first field in the constructor of those case classes is called &lt;code&gt;$outer&lt;/code&gt; and is of type of the &lt;em&gt;defining trait&lt;/em&gt;. So somehow we need to get an instance of that object, naively we could scan all classes and collect the ones that are implementing the trait, but when there are more than one: which one to take?&lt;/p&gt; &#xA;&lt;h5&gt;How?&lt;/h5&gt; &#xA;&lt;p&gt;I&#39;ve chosen to extend the formats to include a list of companion mappings for those case classes. So you can have formats that belong to your modules and keep the mappings in there. That will then make default values work and provide the much needed &lt;code&gt;$outer&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;trait SharedModule {&#xA;  case class SharedObj(name: String, visible: Boolean = false)&#xA;}&#xA;&#xA;object PingPongGame extends SharedModule&#xA;implicit val formats: Formats =&#xA;  DefaultFormats.withCompanions(classOf[PingPongGame.SharedObj] -&amp;gt; PingPongGame)&#xA;&#xA;val inst = PingPongGame.SharedObj(&#34;jeff&#34;, visible = true)&#xA;val extr = Extraction.decompose(inst)&#xA;extr must_== JObject(&#34;name&#34; -&amp;gt; JString(&#34;jeff&#34;), &#34;visible&#34; -&amp;gt; JBool(true))&#xA;extr.extract[PingPongGame.SharedObj] must_== inst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Serializing non-supported types&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to plug in custom serializer + deserializer functions for any type. Now, if we have a non-case class Interval (thus, not supported by default), we can still serialize it by providing following serializer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; class Interval(start: Long, end: Long) {&#xA;         val startTime = start&#xA;         val endTime = end&#xA;       }&#xA;&#xA;scala&amp;gt; class IntervalSerializer extends CustomSerializer[Interval](format =&amp;gt; (&#xA;         {&#xA;           case JObject(JField(&#34;start&#34;, JInt(s)) :: JField(&#34;end&#34;, JInt(e)) :: Nil) =&amp;gt;&#xA;             new Interval(s.longValue, e.longValue)&#xA;         },&#xA;         {&#xA;           case x: Interval =&amp;gt;&#xA;             JObject(JField(&#34;start&#34;, JInt(BigInt(x.startTime))) ::&#xA;                     JField(&#34;end&#34;,   JInt(BigInt(x.endTime))) :: Nil)&#xA;         }&#xA;       ))&#xA;&#xA;scala&amp;gt; implicit val formats: Formats = Serialization.formats(NoTypeHints) + new IntervalSerializer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A custom serializer is created by providing two partial functions. The first evaluates to a value if it can unpack the data from JSON. The second creates the desired JSON if the type matches.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Module json4s-ext contains extensions to extraction and serialization. The following types are supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Scala enums&#xA;implicit val formats: Formats = org.json4s.DefaultFormats + new org.json4s.ext.EnumSerializer(MyEnum)&#xA;// or&#xA;implicit val formats: Formats = org.json4s.DefaultFormats + new org.json4s.ext.EnumNameSerializer(MyEnum)&#xA;&#xA;// Joda Time&#xA;implicit val formats: Formats = org.json4s.DefaultFormats ++ org.json4s.ext.JodaTimeSerializers.all&#xA;&#xA;// Java 8 Date &amp;amp; Time&#xA;implicit val formats: Formats = org.json4s.DefaultFormats ++ org.json4s.ext.JavaTimeSerializers.all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;XML support&lt;/h1&gt; &#xA;&lt;p&gt;JSON structure can be converted to XML nodes and vice versa. Please see more examples in &lt;a href=&#34;https://github.com/json4s/json4s/raw/3.6/tests/src/test/scala/org/json4s/XmlExamples.scala&#34;&gt;XmlExamples.scala&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; import org.json4s.Xml.{toJson, toXml}&#xA;scala&amp;gt; val xml =&#xA;         &amp;lt;users&amp;gt;&#xA;           &amp;lt;user&amp;gt;&#xA;             &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;&#xA;             &amp;lt;name&amp;gt;Harry&amp;lt;/name&amp;gt;&#xA;           &amp;lt;/user&amp;gt;&#xA;           &amp;lt;user&amp;gt;&#xA;             &amp;lt;id&amp;gt;2&amp;lt;/id&amp;gt;&#xA;             &amp;lt;name&amp;gt;David&amp;lt;/name&amp;gt;&#xA;           &amp;lt;/user&amp;gt;&#xA;         &amp;lt;/users&amp;gt;&#xA;&#xA;scala&amp;gt; val json = toJson(xml)&#xA;scala&amp;gt; pretty(render(json))&#xA;res3: String =&#xA;{&#xA;  &#34;users&#34;:{&#xA;    &#34;user&#34;:[{&#xA;      &#34;id&#34;:&#34;1&#34;,&#xA;      &#34;name&#34;:&#34;Harry&#34;&#xA;    },{&#xA;      &#34;id&#34;:&#34;2&#34;,&#xA;      &#34;name&#34;:&#34;David&#34;&#xA;    }]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, the above example has two problems. First, the ID is converted to String while we might want it as an Int. This is easy to fix by mapping JString(s) to JInt(s.toInt). The second problem is more subtle. The conversion function decides to use a JSON array because there&#39;s more than one &lt;code&gt;user&lt;/code&gt; element in XML. Therefore a structurally equivalent XML document which happens to have just one &lt;code&gt;user&lt;/code&gt; element will generate a JSON document without a JSON array. This is rarely a desired outcome. These both problems can be fixed by the following transformation function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; json transformField {&#xA;         case (&#34;id&#34;, JString(s)) =&amp;gt; (&#34;id&#34;, JInt(s.toInt))&#xA;         case (&#34;user&#34;, x: JObject) =&amp;gt; (&#34;user&#34;, JArray(x :: Nil))&#xA;       }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other direction is supported too. Converting JSON to XML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; toXml(json)&#xA;res5: scala.xml.NodeSeq = NodeSeq(&amp;lt;users&amp;gt;&amp;lt;user&amp;gt;&amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;&amp;lt;name&amp;gt;Harry&amp;lt;/name&amp;gt;&amp;lt;/user&amp;gt;&amp;lt;user&amp;gt;&amp;lt;id&amp;gt;2&amp;lt;/id&amp;gt;&amp;lt;name&amp;gt;David&amp;lt;/name&amp;gt;&amp;lt;/user&amp;gt;&amp;lt;/users&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Low-level pull parser API&lt;/h1&gt; &#xA;&lt;p&gt;The pull parser API is provided for cases requiring extreme performance. It improves parsing performance in two ways. First, no intermediate AST is generated. Second, you can stop parsing at any time, skipping the rest of the stream. Note: This parsing style is recommended only as an optimization. The above-mentioned functional APIs are easier to use.&lt;/p&gt; &#xA;&lt;p&gt;Consider the following example, which shows how to parse one field value from a big JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scala&amp;gt; val json = &#34;&#34;&#34;&#xA;  {&#xA;    ...&#xA;    &#34;firstName&#34;: &#34;John&#34;,&#xA;    &#34;lastName&#34;: &#34;Smith&#34;,&#xA;    &#34;address&#34;: {&#xA;      &#34;streetAddress&#34;: &#34;21 2nd Street&#34;,&#xA;      &#34;city&#34;: &#34;New York&#34;,&#xA;      &#34;state&#34;: &#34;NY&#34;,&#xA;      &#34;postalCode&#34;: 10021&#xA;    },&#xA;    &#34;phoneNumbers&#34;: [&#xA;      { &#34;type&#34;: &#34;home&#34;, &#34;number&#34;: &#34;212 555-1234&#34; },&#xA;      { &#34;type&#34;: &#34;fax&#34;, &#34;number&#34;: &#34;646 555-4567&#34; }&#xA;    ],&#xA;    ...&#xA;  }&#34;&#34;&#34;&#xA;&#xA;scala&amp;gt; val parser = (p: Parser) =&amp;gt; {&#xA;         def parse: BigInt = p.nextToken match {&#xA;           case FieldStart(&#34;postalCode&#34;) =&amp;gt; p.nextToken match {&#xA;             case IntVal(code) =&amp;gt; code&#xA;             case _ =&amp;gt; p.fail(&#34;expected int&#34;)&#xA;           }&#xA;           case End =&amp;gt; p.fail(&#34;no field named &#39;postalCode&#39;&#34;)&#xA;           case _ =&amp;gt; parse&#xA;         }&#xA;&#xA;         parse&#xA;       }&#xA;&#xA;scala&amp;gt; val postalCode = parse(json, parser)&#xA;postalCode: BigInt = 10021&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The pull parser is a function &lt;code&gt;Parser =&amp;gt; A&lt;/code&gt;; in this example it is concretely &lt;code&gt;Parser =&amp;gt; BigInt&lt;/code&gt;. The constructed parser recursively reads tokens until it finds a &lt;code&gt;FieldStart(&#34;postalCode&#34;)&lt;/code&gt; token. After that the next token must be &lt;code&gt;IntVal&lt;/code&gt;; otherwise parsing fails. It returns the parsed integer value and stops parsing immediately.&lt;/p&gt; &#xA;&lt;h1&gt;Kudos&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The original idea for the DSL syntax was taken from the Lift mailing list (&lt;a href=&#34;http://markmail.org/message/lniven2hn22vhupu&#34;&gt;by Marius&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The idea for the AST and rendering was taken from &lt;a href=&#34;http://book.realworldhaskell.org/read/writing-a-library-working-with-json-data.html&#34;&gt;Real World Haskell book&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>VirtusLab/scala-cli</title>
    <updated>2022-06-17T01:54:34Z</updated>
    <id>tag:github.com,2022-06-17:/VirtusLab/scala-cli</id>
    <link href="https://github.com/VirtusLab/scala-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala CLI is a command-line tool to interact with the Scala language. It lets you compile, run, test, and package your Scala code (and more!)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;scala-cli&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VirtusLab/scala-ci/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/VirtusLab/scala-cli/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/org.virtuslab.scala-cli/cli_3&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.virtuslab.scala-cli/cli_3.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/KzQdYkZZza&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/632277896739946517.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=404244&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Scala CLI is an experimental tool to run/compile/test Scala that aims at being a better &lt;code&gt;scala&lt;/code&gt; command. It shares some similarities with build tools, but doesn&#39;t aim at supporting multi-module projects, nor to be extended via a task system.&lt;/p&gt; &#xA;&lt;p&gt;User-facing documentation can be found on our website: &lt;a href=&#34;https://scala-cli.virtuslab.org/&#34;&gt;scala-cli.virtuslab.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developer docs&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Building Scala CLI requires a JVM 17 to work properly.&lt;/p&gt; &#xA;&lt;p&gt;In theory, our build is able to download and install for its own needs JVM 17 on some OSes however it may not work in Intellij / Metals out of the box.&lt;/p&gt; &#xA;&lt;p&gt;The Scala CLI sources ship with Mill launchers, so that Mill itself doesn&#39;t need to be installed on your system.&lt;/p&gt; &#xA;&lt;h3&gt;Common commands&lt;/h3&gt; &#xA;&lt;h4&gt;Running the CLI from sources&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mill -i scala …arguments…&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run unit tests&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mill &#39;build-module[_].test&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run integration tests with the JVM launcher&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mill integration.test.jvm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Filter test suites with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mill integration.test.jvm &#39;scala.cli.integration.RunTestsDefault.*&#39;&#xA;./mill integration.test.jvm &#39;scala.cli.integration.RunTestsDefault.Multiple scripts&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run integration tests with the native launcher&lt;/h4&gt; &#xA;&lt;p&gt;(generating the launcher can take several minutes)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mill integration.test.native&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generate native packages&lt;/h4&gt; &#xA;&lt;p&gt;Build native packagers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;deb&lt;/code&gt; for linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;msi&lt;/code&gt; for windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dmg&lt;/code&gt; and &lt;code&gt;pkg&lt;/code&gt; for macOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(generating native packager for specified format)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mill -i scala package ..arguments... --deb --output &#39;path.deb&#39;&#xA;./mill -i scala package ..arguments... --dmg --output &#39;path.dmg&#39;&#xA;./mill -i scala package ..arguments... --pkg --output &#39;path.pkg&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generate Metals configuration files&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mill mill.contrib.Bloop/install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the command &#34;Metals: Connect to build server&#34;.&lt;/p&gt; &#xA;&lt;p&gt;(Recommended over the Metals import project functionality.)&lt;/p&gt; &#xA;&lt;p&gt;Whenever the build is updated, just do these two steps again.&lt;/p&gt; &#xA;&lt;h4&gt;Generate IntelliJ configuration files&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mill mill.scalalib.GenIdea/idea&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open the scala-cli directory in IntelliJ.&lt;/p&gt; &#xA;&lt;p&gt;(Recommended over the IntelliJ import project functionality.)&lt;/p&gt; &#xA;&lt;p&gt;Whenever the build is updated, run the command above again. IntelliJ should then pick up the new changes.&lt;/p&gt; &#xA;&lt;h4&gt;Generate a native launcher&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mill -i show cli.nativeImage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This prints the path to the generated native image. The file named &lt;code&gt;scala&lt;/code&gt; at the root of the project should also be a link to it. (Note that the link is committed and is always there, whether the files it points at exists or not.)&lt;/p&gt; &#xA;&lt;h4&gt;Generate a JVM launcher&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mill -i show cli.launcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This prints the path to the generated launcher. This launcher is a JAR, that directly re-uses the class directories of the modules of the project (so that cleaning up those classes will break the launcher). If this is a problem (if you wish to run the launcher on another machine or from a Docker image for example), use a native launcher (see above) or a standalone JVM one (see below).&lt;/p&gt; &#xA;&lt;h4&gt;Generate a standalone JVM launcher&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mill -i show cli.standaloneLauncher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This prints the path to the generated launcher. This launcher is a JAR, that embeds JARs of the scala-cli modules, and downloads their dependencies from Maven Central upon first launch (using the coursier cache, just like a coursier bootstrap).&lt;/p&gt; &#xA;&lt;h3&gt;Helper projects&lt;/h3&gt; &#xA;&lt;p&gt;A number of features of Scala CLI are managed from external projects, living under the &lt;a href=&#34;https://github.com/scala-cli&#34;&gt;&lt;code&gt;scala-cli&lt;/code&gt; organization&lt;/a&gt; on GitHub. These projects can be used by Scala CLI as libraries pulled before it&#39;s compiled, but also as binaries. In the latter case, Scala CLI downloads on-the-fly binaries from these repositories&#39; GitHub release assets, and runs them as external processes.&lt;/p&gt; &#xA;&lt;p&gt;For example, here are a few external projects used by Scala CLI:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scala-cli/scala-js-cli-native-image&#34;&gt;scala-js-cli-native-image&lt;/a&gt;: provides a binary running the Scala.js linker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scala-cli/scala-cli-signing&#34;&gt;scala-cli-signing&lt;/a&gt;: provides both libraries and binaries to handle PGP concerns in Scala CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scala-cli/libsodiumjni&#34;&gt;libsodiumjni&lt;/a&gt;: provides minimal JNI bindings for &lt;a href=&#34;https://github.com/jedisct1/libsodium&#34;&gt;libsodium&lt;/a&gt;, that is used by Scala CLI to encrypt secrets uploaded as GitHub repository secrets in the &lt;code&gt;publish setup&lt;/code&gt; sub-command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the full list of those projects and their description, see the &lt;a href=&#34;https://github.com/orgs/scala-cli/repositories&#34;&gt;scala-cli repository list&lt;/a&gt; and the READMEs of each of these projects.&lt;/p&gt; &#xA;&lt;p&gt;The use of external binaries allows to make the Scala CLI binary slimmer and faster to generate, but also allow to lower memory requirements to generate it (allowing to generate these binaries on the GitHub-provided GitHub actions hosts).&lt;/p&gt; &#xA;&lt;h3&gt;Website&lt;/h3&gt; &#xA;&lt;p&gt;The Scala CLI website is built with &lt;a href=&#34;https://v1.docusaurus.io/en/&#34;&gt;Docusaurus&lt;/a&gt; and uses &lt;a href=&#34;https://infima.dev/docs/layout/spacing&#34;&gt;Infima&lt;/a&gt; for styling.&lt;/p&gt; &#xA;&lt;p&gt;Ensure you are using Node &amp;gt;= 14.&lt;/p&gt; &#xA;&lt;h4&gt;Generate the website once&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd website&#xA;yarn&#xA;yarn build&#xA;npm run serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generate the website continuously&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd website&#xA;yarn&#xA;yarn run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verifying the documentation&lt;/h3&gt; &#xA;&lt;p&gt;We have a built-in tool to validate &lt;code&gt;.md&lt;/code&gt; files called &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/scala-cli/main/sclicheck/Readme.md&#34;&gt;Sclicheck&lt;/a&gt;. To check all douments (and this is what we run on CI) run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.github/scripts/check_docs.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also check single documents or directories using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.github/scripts/check_docs.sh &amp;lt;file&amp;gt; &amp;lt;dir&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To debug failing document, Sclicheck has build-in following options: &lt;code&gt;--step&lt;/code&gt; (stop after each command) or &lt;code&gt;--stopAtFailure&lt;/code&gt; (to stop after a failure). To debug getting started guide run following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.github/scripts/check_docs.sh --stopAtFailure docs/getting_started.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scala CLI logos&lt;/h2&gt; &#xA;&lt;p&gt;Package with various logos for scala-cli can be found on &lt;a href=&#34;https://drive.google.com/drive/u/1/folders/1M6JeQXmO4DTBeRBKAFJ5HH2p_hbfQnqS&#34;&gt;google drive&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Launcher script&lt;/h2&gt; &#xA;&lt;p&gt;There is a script &lt;code&gt;scala-cli-src&lt;/code&gt; in the repository root that is intended to work exactly like released scala-cli, but using a binary compiled the worktree. Just add it to your PATH to get the already-released-scala-cli experience.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Instructions on how to release - &lt;a href=&#34;https://github.com/VirtusLab/scala-cli/raw/main/.github/release/release-procedure.md&#34;&gt;Release Procedure&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Debugging BSP server&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to debug BSP sever is using &lt;code&gt;scala-cli-src&lt;/code&gt; script with &lt;code&gt;--bsp-debug-port 5050&lt;/code&gt; flag (the port should be unique to the workspace where BSP will be debugged). In such case BSP will be launched using local source and will run on JVM. It will also expects a debugger running in the listen mode using provided port (so the initialization of the connection can be debugged). In such case we recommend to have option to auto rerun debugging session off (so there is always a debugger instance ready to be used).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>com-lihaoyi/mill</title>
    <updated>2022-06-17T01:54:34Z</updated>
    <id>tag:github.com,2022-06-17:/com-lihaoyi/mill</id>
    <link href="https://github.com/com-lihaoyi/mill" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Your shiny new Java/Scala build tool!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/docs/logo.svg?sanitize=true&#34; alt=&#34;Mill Logo&#34;&gt;&lt;/span&gt; Mill&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://github.com/com-lihaoyi/mill/actions/workflows/actions.yml&#34;&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://github.com/com-lihaoyi/mill/actions/workflows/actions.yml/badge.svg?sanitize=true&#34; alt=&#34;Build and Release&#34;&gt;&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/lihaoyi/mill?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter Chat&#34;&gt;&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://index.scala-lang.org/com-lihaoyi/mill/mill-main&#34;&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/com-lihaoyi/mill/mill-main/latest.svg?sanitize=true&#34; alt=&#34;Mill&#34;&gt;&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/lihaoyi&#34;&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-sponsor-ff69b4.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Your shiny new Scala build tool! Confused by SBT? Frustrated by Maven? Perplexed by Gradle? Give Mill a try!&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA;  &lt;div id=&#34;toctitle&#34;&gt;&#xA;   Table of Contents&#xA;  &lt;/div&gt; &#xA;  &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_how_to_build_and_test&#34;&gt;How to build and test&lt;/a&gt; &#xA;    &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_intellij_setup&#34;&gt;IntelliJ Setup&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_automated_tests&#34;&gt;Automated Tests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_manual_testing&#34;&gt;Manual Testing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_bootstrapping_building_mill_with_your_current_checkout_of_mill&#34;&gt;Bootstrapping: Building Mill with your current checkout of Mill&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_project_layout&#34;&gt;Project Layout&lt;/a&gt; &#xA;    &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_core_modules_that_are_included_in_the_main_assembly&#34;&gt;Core modules that are included in the main assembly&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_worker_modules_that_are_resolved_from_maven_central&#34;&gt;Worker modules that are resolved from Maven Central&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_contrib_modules&#34;&gt;Contrib modules&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_changelog&#34;&gt;Changelog&lt;/a&gt; &#xA;    &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_main_branch&#34;&gt;&#39;main&#39; branch&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_10_4_2022_05_06&#34;&gt;0.10.4 - 2022-05-06&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_10_3_2022_04_11&#34;&gt;0.10.3 - 2022-04-11&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_10_2_2022_03_18&#34;&gt;0.10.2 - 2022-03-18&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_10_1_2022_03_08&#34;&gt;0.10.1 - 2022-03-08&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_10_0_2022_01_14&#34;&gt;0.10.0 - 2022-01-14&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_10_0_m5_2021_12_18&#34;&gt;0.10.0-M5 - 2021-12-18&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_10_0_m4_2021_11_08&#34;&gt;0.10.0-M4 - 2021-11-08&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_10_0_m3_2021_09_29&#34;&gt;0.10.0-M3 - 2021-09-29&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_10_0_m2_2021_09_17&#34;&gt;0.10.0-M2 - 2021-09-17&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_9_12_2022_01_07&#34;&gt;0.9.12 - 2022-01-07&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_9_11_2021_12_15&#34;&gt;0.9.11 - 2021-12-15&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_9_10_2021_11_13&#34;&gt;0.9.10 - 2021-11-13&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_9_9_2021_07_15&#34;&gt;0.9.9 - 2021-07-15&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_9_8_2021_05_27&#34;&gt;0.9.8 - 2021-05-27&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_9_7_2021_05_14&#34;&gt;0.9.7 - 2021-05-14&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_9_6_2021_04_03&#34;&gt;0.9.6 - 2021-04-03&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_9_5_2021_01_26&#34;&gt;0.9.5 - 2021-01-26&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_9_4_2020_12_21&#34;&gt;0.9.4 - 2020-12-21&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_0_9_3_2020_11_26&#34;&gt;0.9.3 - 2020-11-26&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/mill/main/#_older_releases&#34;&gt;Older releases&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_documentation&#34;&gt;Documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;If you want to use Mill in your own projects, check out our documentation:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://com-lihaoyi.github.io/mill&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Here is some quick example, so that you can imagine how it looks:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;import mill._, scalalib._&#xA;&#xA;object foo extends ScalaModule {&#xA;  def scalaVersion = &#34;3.0.2&#34;&#xA;}&#xA;&#xA;object bar extends ScalaModule {&#xA;  def moduleDeps = Seq(foo)&#xA;  def scalaVersion = &#34;3.0.2&#34;&#xA;}&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;If you use Mill and like it, you will probably enjoy the following book by the Author:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.handsonscala.com/&#34;&gt;&lt;em&gt;Hands-on Scala Programming&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;em&gt;Hands-on Scala&lt;/em&gt; has a &lt;em&gt;Chapter 10: Static Build Pipelines&lt;/em&gt; dedicated to Mill, but rest of the book introduces other libraries and tools in a similar style. &lt;em&gt;Hands-on Scala&lt;/em&gt; is a great way to level up your skills in Scala in general and Mill in particular&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The remainder of this readme is developer-documentation targeted at people who wish to work on Mill’s own codebase. The developer docs assume you have read through the user-facing documentation linked above. It’s also worth spending a few minutes reading the following blog posts to get a sense of Mill’s design &amp;amp; motivation:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.lihaoyi.com/post/SowhatswrongwithSBT.html&#34;&gt;&#34;So, what’s wrong with SBT?&#34;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.lihaoyi.com/post/BuildToolsasPureFunctionalPrograms.html&#34;&gt;Build Tools as Pure Functional Programs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.lihaoyi.com/post/MillBetterScalaBuilds.html&#34;&gt;Mill: Better Scala Builds&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_how_to_build_and_test&#34;&gt;How to build and test&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Mill is built using Mill. To begin, first download &amp;amp; install Mill as described in the documentation above. As Mill is under active development, stable releases may not be able to build the current development branch of Mill. It is recommended to install the latest unstable release manually.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_intellij_setup&#34;&gt;IntelliJ Setup&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you are using IntelliJ IDEA to edit Mill’s Scala code, you can create the IntelliJ project files via:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./mill mill.scalalib.GenIdea/idea&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_automated_tests&#34;&gt;Automated Tests&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To run test suites:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./mill main.test&#xA;./mill scalalib.test&#xA;./mill scalajslib.test&#xA;./mill integration.test&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_manual_testing&#34;&gt;Manual Testing&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To manually test Mill on a small build, you can use the &lt;code&gt;scratch&lt;/code&gt; folder:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./mill -i dev.run scratch -w resolve _&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This runs the task &lt;code&gt;resolve _&lt;/code&gt; with your current checkout of Mill on the trivial build defined in &lt;code&gt;scratch/build.sc&lt;/code&gt;. You can modify that build file to add additional modules, files, etc. and see how it behaves.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;More generally, you can use:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./mill -i dev.run [target-dir] [...args]&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To create run your current checkout of Mill in the given &lt;code&gt;target-dir&lt;/code&gt; with the given &lt;code&gt;args&lt;/code&gt;. This is useful e.g. to test a modified version of Mill on some other project’s Mill build.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can also create a launcher-script to let you run the current checkout of Mill without the bootstrap Mill process present:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./mill dev.launcher&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This creates the &lt;code&gt;out/dev/launcher.dest/run&lt;/code&gt; launcher script, which you can then use to run your current checkout of Mill where-ever you’d like. Note that this script relies on the compiled code already present in the Mill &lt;code&gt;out/&lt;/code&gt; folder, and thus isn’t suitable for testing on Mill’s own Mill build since you would be over-writing the compiled code at the same time as the launcher script is using it.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can also run your current checkout of Mill on the build in your &lt;code&gt;scratch/&lt;/code&gt; folder without the bootstrap Mill process being present via:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./mill dev.launcher &amp;amp;&amp;amp; (cd scratch &amp;amp;&amp;amp; ../out/dev/launcher.dest/run -w show thingy)&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_bootstrapping_building_mill_with_your_current_checkout_of_mill&#34;&gt;Bootstrapping: Building Mill with your current checkout of Mill&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To test bootstrapping of Mill’s own Mill build using a version of Mill built from your checkout, you can run&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./mill installLocal&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This creates a standalone assembly at &lt;code&gt;target/mill-release&lt;/code&gt; you can use, which references jars published locally in your &lt;code&gt;~/.ivy2/local&lt;/code&gt; cache. You can then use this standalone assembly to build &amp;amp; re-build your current Mill checkout without worrying about stomping over compiled code that the assembly is using.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This assembly is design to work on bash, bash-like shells and Windows Cmd. If you have another default shell like zsh or fish, you probably need to invoke it with &lt;code&gt;sh ~/mill-release&lt;/code&gt; or prepend the file with a proper shebang.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you want to install into a different location or a different Ivy repository, you can set it’s optional parameters&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;title&#34;&gt;&#xA;     Install into &#xA;     &lt;code&gt;/tmp&lt;/code&gt;&#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./mill inspect installLocal&#xA;[1/1] inspect&#xA;installLocal(build.sc:865)&#xA;    Build and install Mill locally.&#xA;    @param binFile The location where the Mill binary should be installed&#xA;    @param ivyRepo The local Ivy repository where Mill modules should be published to&#xA;...&#xA;$ ./mill installLocal --binFile /tmp/mill --ivyRepo /tmp/millRepo&#xA;...&#xA;Published 44 modules and installed /tmp/mill&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_troubleshooting&#34;&gt;Troubleshooting&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In case of troubles with caching and/or incremental compilation, you can always restart from scratch removing the &lt;code&gt;out&lt;/code&gt; directory:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;os.remove.all -rf out/&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_project_layout&#34;&gt;Project Layout&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The Mill project is organized roughly as follows:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_core_modules_that_are_included_in_the_main_assembly&#34;&gt;Core modules that are included in the main assembly&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;core&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;main.client&lt;/code&gt;, &lt;code&gt;scalalib&lt;/code&gt;, &lt;code&gt;scalajslib&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;These are general lightweight and dependency-free: mostly configuration &amp;amp; wiring of a Mill build and without the heavy lifting.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Heavy lifting is delegated to the worker modules (described below), which the core modules resolve from Maven Central (or from the local filesystem in dev) and load into isolated classloaders.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_worker_modules_that_are_resolved_from_maven_central&#34;&gt;Worker modules that are resolved from Maven Central&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;scalalib.worker&lt;/code&gt;, &lt;code&gt;scalajslib.worker[0.6]&lt;/code&gt;, &lt;code&gt;scalajslib.worker[1.0]&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;These modules are where the heavy-lifting happens, and include heavy dependencies like the Scala compiler, Scala.js optimizer, etc.. Rather than being bundled in the main assembly &amp;amp; classpath, these are resolved separately from Maven Central (or from the local filesystem in dev) and kept in isolated classloaders.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This allows a single Mill build to use multiple versions of e.g. the Scala.js optimizer without classpath conflicts.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_contrib_modules&#34;&gt;Contrib modules&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;contrib/bloop/&lt;/code&gt;, &lt;code&gt;contrib/flyway/&lt;/code&gt;, &lt;code&gt;contrib/scoverage/&lt;/code&gt;, etc.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;These are modules that help integrate Mill with the wide variety of different tools and utilities available in the JVM ecosystem.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;These modules are not as stringently reviewed as the main Mill core/worker codebase, and are primarily maintained by their individual contributors. These are maintained as part of the primary Mill Github repo for easy testing/updating as the core Mill APIs evolve, ensuring that they are always tested and passing against the corresponding version of Mill.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_changelog&#34;&gt;Changelog&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_main_branch&#34;&gt;&#39;main&#39; branch&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.10.4:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/63?closed=1&#34;&gt;milestone after 0.10.4&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.10.4…​main&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_10_4_2022_05_06&#34;&gt;0.10.4 - 2022-05-06&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.10.3:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Switched from ipcsocket to junixsocket library to enhance the robustness of Mill client server communication. This should greatly improve the user experience on Windows.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Internal improvements and better support of GraalVM&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;The Mill Documentation site has now built-in search functionality&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaJsModule&lt;/code&gt;: New targets &lt;code&gt;fastLinkJS&lt;/code&gt; and &lt;code&gt;fullLinkJS&lt;/code&gt; and deprecated &lt;code&gt;fastOpt&lt;/code&gt; and &lt;code&gt;fullOpt&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaJsModule&lt;/code&gt;: Support for &lt;code&gt;ModuleSplitStyle&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;BSP&lt;/code&gt;: Updated to protocol version 2.1.0-M1, added support for test framework names and support for the JVM extension&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;GenIdea&lt;/code&gt;: More consistent ordering of libraries and dependent modules and support for Scala 3.1 language level&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;Bloop&lt;/code&gt;: Added support for runtime dependencies&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Enhanced test suite to cover Mill client server scenarios&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various dependency updates&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/62?closed=1&#34;&gt;milestone 0.10.4&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.10.3…​0.10.4&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_10_3_2022_04_11&#34;&gt;0.10.3 - 2022-04-11&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.10.2:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fixed &lt;code&gt;import $file&lt;/code&gt; for files with hyphens and other symbols in its name&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fixed an issues with truncated output just before Mill finishes&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Mill commands now support arguments of type &lt;code&gt;Task[T]&lt;/code&gt;, which can improve writing re-usable commands, especially, they can be called from other tasks more easily&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;JavaModule&lt;/code&gt;: Improved correctness and performance of &lt;code&gt;compileClasspath&lt;/code&gt; and &lt;code&gt;bspCompileClasspath&lt;/code&gt; targets. This fixes an issue with BSP for large projects. Also, compile-time dependencies no longer sneak into the classpath transitively.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;JavaModule&lt;/code&gt;: Added &lt;code&gt;docJarUseArgsFile&lt;/code&gt; target and fix issue with Windows command length restrictions in &lt;code&gt;docJar&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;BSP&lt;/code&gt; and &lt;code&gt;Bloop&lt;/code&gt;: Better detect foreign modules&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various internal API refinements and improvements&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Reorganized integration test suite and build setup&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/61?closed=1&#34;&gt;milestone 0.10.3&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.10.2…​0.10.3&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_10_2_2022_03_18&#34;&gt;0.10.2 - 2022-03-18&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.10.1:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Mill workers can now implement &lt;code&gt;AutoCloseable&lt;/code&gt; to properly free resources&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaModule&lt;/code&gt;: Fixed &lt;code&gt;repl&lt;/code&gt; start&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;CoursierModule&lt;/code&gt;: Fixed concurrent download issues with coursier (we detect and retry)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;MainModule&lt;/code&gt;: Fixed potential match error with &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;showNamed&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Restructured contrib module documentation&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Internal improvements&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/60?closed=1&#34;&gt;milestone 0.10.2&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.10.1…​0.10.2&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_10_1_2022_03_08&#34;&gt;0.10.1 - 2022-03-08&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.10.0:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;MillClienMain&lt;/code&gt; can now act as universal main to start mill with or without a server process&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Improved &lt;code&gt;show&lt;/code&gt; command that always returns valid JSON&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Added &lt;code&gt;showNamed&lt;/code&gt; command that includes the task names in the output&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Implemented more granular cache invalidation which keeps more caches intact when you split your build setup over multiple &lt;code&gt;.sc&lt;/code&gt; files with &lt;code&gt;import $file&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;The local &lt;code&gt;.mill-jvm-opts&lt;/code&gt; file is no longer restricted to &lt;code&gt;-X&lt;/code&gt; options&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;CoursierModule&lt;/code&gt;: Added &lt;code&gt;coursierCacheCustomizer&lt;/code&gt; to support a &lt;code&gt;FileCache&lt;/code&gt; customizers&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;JavaModule&lt;/code&gt;: the &lt;code&gt;docJar&lt;/code&gt; target no longer includes hidden files&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaModule&lt;/code&gt;: Updated to latest zinc version&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaModule&lt;/code&gt;: Reworked scalac plugins handling for the better and to support Scala 3&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaNativeModule&lt;/code&gt;: fixed &lt;code&gt;Dep.withDottyCompat&lt;/code&gt; behavior&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaJSModule&lt;/code&gt;: support for linking multiple modules&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalafmtModule&lt;/code&gt;: Support for newer Scalafmt versions&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Tool chain: Update to Mill 0.10.0&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Tool chain: we no longer create files outside the mill project directory (e.g. &lt;code&gt;~/mill-release&lt;/code&gt; is now under &lt;code&gt;target/mill-release&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various dependency updates&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Lots of internal improvements&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/59?closed=1&#34;&gt;milestone 0.10.1&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.10.0…​0.10.1&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_10_0_2022_01_14&#34;&gt;0.10.0 - 2022-01-14&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.10.0-M5:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Changed structure of &lt;code&gt;out&lt;/code&gt; directory, &lt;code&gt;out/foo/dest&lt;/code&gt; is now &lt;code&gt;out/foo.dest&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fixed issues with loading of predef scripts&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;--watch&lt;/code&gt; now supports manual re-runs by pressing enter&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Improved subprocess handling&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Published poms can now contain properties and &lt;code&gt;versionScheme&lt;/code&gt; information&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Improved Scala.js support, including more target configuration options and support for Node 17&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Improved Scala Native for version &amp;gt; 0.4.2 and support Scala 3&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Internal improvements, fixes and dependency version updates&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/57?closed=1&#34;&gt;milestone 0.10.0&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.10.0-M5…​0.10.0&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_10_0_m5_2021_12_18&#34;&gt;0.10.0-M5 - 2021-12-18&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;strong&gt;This release breaks binary compatibility for external plugins.&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.10.0-M4:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fixed Log4Shell security vulnerability in &lt;code&gt;ZincWorkerModule&lt;/code&gt; (CVE-2021-44228)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Factored out the testrunner into a new module, which also fixes some potential classloader issues when executing tests (e.g. with JNA)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Removed the limitation of max 22 inputs for tasks&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;--watched&lt;/code&gt; commands can now re-run when pressing enter-key&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;task and arguments of commands can now have hyphens in their name&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Reworked and decluttered the out-folder structure&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;prepareOffline&lt;/code&gt; now has a &lt;code&gt;all&lt;/code&gt; flag to control if all or only some dependency should be prefetched&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Made chaching more effective for targets overridden in stackable-traits&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Further BSP improvements, esp. for Metals and Scala 3&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Lots of other internal improvements and fixes&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various dependency updates&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/55?closed=1&#34;&gt;milestone 0.10.0-M5&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.10.0-M4…​main&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_10_0_m4_2021_11_08&#34;&gt;0.10.0-M4 - 2021-11-08&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.10.0-M3:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;BSP support rework and overhaul of built-in BSP server&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;GenIdea: failures when inspecting and resolving the build are not properly reported&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Coursier: we now implemented a workaround to tackle concurrent downloads issues&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;New &lt;code&gt;+&lt;/code&gt; separator to provide multiple targets (with parameters) via cmdline&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;New &lt;code&gt;--import&lt;/code&gt; cmdline option to run ad-hoc plugins without editing of &lt;code&gt;build.sc&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;New &lt;code&gt;T.ctx().workspace&lt;/code&gt; API to access the project root directory&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various internal improvements and bug fixes&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various refactorings and cleanups&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/54?closed=1&#34;&gt;milestone 0.10.0-M4&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.10.0-M3…​0.10.0-M4&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_10_0_m3_2021_09_29&#34;&gt;0.10.0-M3 - 2021-09-29&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;strong&gt;This is a milestone release. This release breaks binary compatibility for external plugins build for mill 0.9.x. The API is suspected to change before a 0.10.0 releae.&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.10.0-M2:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaModule with PublishModule&lt;/code&gt;: the &lt;code&gt;scala-library&lt;/code&gt; artifact is now always part of the dependencies in published `pom.xml`s and `ivy.xml`s&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;New &lt;code&gt;JavaModule.mandatoryIvyDeps&lt;/code&gt; target to provide essential dependencies like scala-library without forcing the user to call &lt;code&gt;super.ivyDeps&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaJSModule.scalaLibraryIvyDeps&lt;/code&gt; no longer contains the scala-js-library, but only the scala-library; if you need that, use &lt;code&gt;ScalaJSModule.mandatoryIvyDeps&lt;/code&gt; instead.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;import $ivy&lt;/code&gt; support &lt;code&gt;$MILL_BIN_PLATFORM&lt;/code&gt; variable and a new sort notations for external plugins&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;We fixed and enabled lots of tests to run on Windows&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Some generic targets like &lt;code&gt;plan&lt;/code&gt; or &lt;code&gt;path&lt;/code&gt; now also return their output&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;GenIdea&lt;/code&gt;: improved support for Scala 3 projects *&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/53?closed=1&#34;&gt;milestone 0.10.0-M3&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.10.0-M2…​0.10.0-M3&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_10_0_m2_2021_09_17&#34;&gt;0.10.0-M2 - 2021-09-17&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;strong&gt;This is a early milestone release. This release breaks binary compatibility for external plugins build for mill 0.9.x. The API is suspected to change before a 0.10.0 releae.&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.9.9:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Removed deprecated API&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaModule&lt;/code&gt;: added &lt;code&gt;mandatoryScalacOptions&lt;/code&gt; to avoid the common issue that users forget to include mandatory options when defining their own.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Renamed &lt;code&gt;toolsClasspath&lt;/code&gt; targets found in various modules to avoid hard to resolve clashes when mixing traits&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fixed and improved our test suite on Windows&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various fixes and improvements&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various dependency updates&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/51?closed=1&#34;&gt;milestone 0.10.0-M2&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.9.9…​0.10.0-M2&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_9_12_2022_01_07&#34;&gt;0.9.12 - 2022-01-07&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;fixed parsing of command parameters in &lt;code&gt;show&lt;/code&gt; command&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;zinc worker: Updated log4j2 to 2.17.1&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/58?closed=1&#34;&gt;milestone 0.9.12&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.9.11…​0.9.12&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_9_11_2021_12_15&#34;&gt;0.9.11 - 2021-12-15&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;zinc worker: Updated log4j2 to 2.16.0 to fix Log4Shell (CVE-2021-44228) vulnerability&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/56?closed=1&#34;&gt;milestone 0.9.11&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.9.10…​0.9.11&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_9_10_2021_11_13&#34;&gt;0.9.10 - 2021-11-13&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Some feature backports from mill 0.10&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;New &lt;code&gt;+&lt;/code&gt; separator to provide multiple targets (with parameters) via cmdline&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;New &lt;code&gt;--import&lt;/code&gt; cmdline option to run ad-hoc plugins without editing of &lt;code&gt;build.sc&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;import $ivy&lt;/code&gt; support &lt;code&gt;$MILL_BIN_PLATFORM&lt;/code&gt; variable and a new sort notations for external plugins&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/52?closed=1&#34;&gt;milestone 0.9.10&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.9.9…​0.9.10&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_9_9_2021_07_15&#34;&gt;0.9.9 - 2021-07-15&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.9.8:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;BSP: Fixed/improved source item for root project&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Bloop: Prevent compilation during bloop config generation&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;GenIdea: Fix content path of root project (mill-build)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various version bumps&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/50?closed=1&#34;&gt;milestone 0.9.9&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.9.8…​0.9.9&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_9_8_2021_05_27&#34;&gt;0.9.8 - 2021-05-27&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.9.7:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fixed some potential binary incompatibilities with external plugins (builds against older os-lib versions)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fixed location and configuration of mills home path (used for caching of build scripts)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Properly close jar resources - should fix issues in &lt;code&gt;assembly&lt;/code&gt;, esp. on Windows where open resources are locked&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;BSP: Repaired mills BSP server&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;playlib: Fixed issues with the play-contrib module and added support for Play 2.8&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;GenIdea: changed dir for generated mill modules to &lt;code&gt;.idea/mill_modules&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various version bumps, including Scala 2.13.5&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/49?closed=1&#34;&gt;milestone 0.9.8&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.9.7…​0.9.8&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_9_7_2021_05_14&#34;&gt;0.9.7 - 2021-05-14&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;Changes since 0.9.6:&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaModule&lt;/code&gt;: Support for Scala 3&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;CoursierModule&lt;/code&gt;: Support customized dependency resolution (needed to work with ScalaFX)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;TestModule&lt;/code&gt;: Added new &lt;code&gt;testFramework&lt;/code&gt; target and only support one test framework. Deprecated &lt;code&gt;testFrameworks&lt;/code&gt; targets.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;TestModule&lt;/code&gt;: Added new convenience traits to configure popular test frameworks, e.g. &lt;code&gt;TestModule.Junit4&lt;/code&gt;, &lt;code&gt;TestModule.ScalaTest&lt;/code&gt;, &lt;code&gt;TestModule.Utest&lt;/code&gt;, and many more&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;Bloop&lt;/code&gt;: Added support for foreign modules&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Better support for Windows environments&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various internal improvements, cleanups, and deprecations&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various dependencies updates&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Removed tut contrib module because of unmaintained/archived upstream dependency&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/48?closed=1&#34;&gt;milestone 0.9.7&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.9.6…​0.9.7&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_9_6_2021_04_03&#34;&gt;0.9.6 - 2021-04-03&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;The mill project home and repository has been moved to &lt;a href=&#34;https://github.com/com-lihaoyi/mill&#34; class=&#34;bare&#34;&gt;https://github.com/com-lihaoyi/mill&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;repl&lt;/code&gt; and &lt;code&gt;console&lt;/code&gt; targets now support &lt;code&gt;forkArgs&lt;/code&gt; and &lt;code&gt;forkEnv&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Support for Scala 3 release candidates and new Scaladoc 3 tool&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Support for Scala.js on Scala 3&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Scala Native improvements&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Test runner now uses an args file to support running tests on Windows&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;GenIdea: better supports source jars, full config contributions and provided/runtime dependencies&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various dependency updates&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Documentation site reworked to support multiple release versions&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Improved CI setup to better test mill on Windows&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/47?closed=1&#34;&gt;milestone 0.9.6&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.9.5…​0.9.6&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_9_5_2021_01_26&#34;&gt;0.9.5 - 2021-01-26&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Updated zinc to 1.4.4&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Support for Scala Native 0.4.0&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Support for Scala.js ESModule (including Bloop support)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Inner &lt;code&gt;Tests&lt;/code&gt; traits in modules like &lt;code&gt;JavaModule&lt;/code&gt;, &lt;code&gt;ScalaModule&lt;/code&gt; and others now have unique names (&lt;code&gt;JavaModuleTests&lt;/code&gt;, &lt;code&gt;ScalaModuleTests&lt;/code&gt;, etc), to allow for easier customization&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various version bumps of dependencies&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;CI now runs all tests, it did miss some before&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/46?closed=1&#34;&gt;milestone 0.9.5&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.9.4…​0.9.5&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_9_4_2020_12_21&#34;&gt;0.9.4 - 2020-12-21&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Implemented more BSP protocol commands and fixed some glitches with IntelliJ&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Stabilized CI builds&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various fixes and improvements&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Various version bumps&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/45?closed=1&#34;&gt;milestone 0.9.4&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.9.3…​0.9.4&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_0_9_3_2020_11_26&#34;&gt;0.9.3 - 2020-11-26&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;(We also tagged &lt;code&gt;0.9.0&lt;/code&gt;, &lt;code&gt;0.9.1&lt;/code&gt;, and &lt;code&gt;0.9.2&lt;/code&gt;, but due to release difficulties, we ask you not to use them.)&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Replace the built in &lt;code&gt;@main&lt;/code&gt; method functionality with the &lt;a href=&#34;https://github.com/lihaoyi/mainargs&#34;&gt;MainArgs&lt;/a&gt; library&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Note that the MainArgs replacement has some backwards incompatibilities: Short flags like &lt;code&gt;-i&lt;/code&gt; can no longer be passed via &lt;code&gt;--i&lt;/code&gt;, the &lt;code&gt;@doc(&#34;&#34;)&lt;/code&gt; is now &lt;code&gt;@arg(doc = &#34;&#34;)&lt;/code&gt;, &lt;code&gt;Seq[T]&lt;/code&gt; parameters are now passed via repeated &lt;code&gt;--foo&lt;/code&gt; flags rather than comma-separated.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add the ability to relocate/shade files in &lt;code&gt;.assembly&lt;/code&gt; &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/947&#34;&gt;#947&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Twirl enhancements &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/952&#34;&gt;#952&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add &lt;code&gt;scalacPluginClasspath&lt;/code&gt; to Tests &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/956&#34;&gt;#956&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add &lt;code&gt;toMap&lt;/code&gt; methods to &lt;code&gt;BuildInfo&lt;/code&gt; &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/958&#34;&gt;#958&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Bump coursier to version 2.0.0 &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/973&#34;&gt;#973&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Make BSP support a first-class citizen &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/969&#34;&gt;#969&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Omit the suffix in &lt;code&gt;artifactName&lt;/code&gt; in cross modules &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/953&#34;&gt;#953&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Allow test classes with constructor parameters &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/982&#34;&gt;#982&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Proguard contrib module &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/972&#34;&gt;#972&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Support Scala.js useECMAScript2015 option and ModuleKind.ESModule &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/1004&#34;&gt;#1004&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Support Scala.js incremental linking &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/1007&#34;&gt;#1007&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/44?closed=1&#34;&gt;milestone 0.9.3&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.8.0…​0.9.3&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_older_releases&#34;&gt;Older releases&lt;/h3&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_8_0_2020_07_20&#34;&gt;0.8.0 - 2020-07-20&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bump external dependencies: uPickle 1.2.0, Ammonite 2.2.0, etc.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Use default coursier repos (#931)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Work around relative paths issue on windows (#936)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support Scala.js versions &amp;gt;1.0.0 (#934)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/43?closed=1&#34;&gt;milestone 0.8.0&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.7.4…​0.8.0&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_7_4_2020_07_03&#34;&gt;0.7.4 - 2020-07-03&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;new command line options &lt;code&gt;--repl&lt;/code&gt; and &lt;code&gt;--no-server&lt;/code&gt;, deprecated &lt;code&gt;--interactive&lt;/code&gt; option&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support for Scala.js 1.1&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixed missing source maps for Scala.js 1.0 and 1.1&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Improved BSP contrib module&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/42?closed=1&#34;&gt;milestone 0.7.4&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.7.3…​0.7.4&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_7_3&#34;&gt;0.7.3&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/41?closed=1&#34;&gt;milestone 0.7.3&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.7.2…​0.7.3&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_7_2_2020_05_19&#34;&gt;0.7.2 - 2020-05-19&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/40?closed=1&#34;&gt;milestone 0.7.2&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.7.1…​0.7.2&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_7_1_2020_05_17&#34;&gt;0.7.1 - 2020-05-17&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/39?closed=1&#34;&gt;milestone 0.7.1&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.7.0…​0.7.1&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_7_0_2020_05_15&#34;&gt;0.7.0 - 2020-05-15&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Greatly improved parallel builds via &lt;code&gt;-j &amp;lt;n&amp;gt;&lt;/code&gt;/&lt;code&gt;--jobs &amp;lt;n&amp;gt;&lt;/code&gt;, with better scheduling and utilization of multiple cores&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;build.sc&lt;/code&gt; files now uses Scala 2.13.2&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Avoid duplicate target resolution with &lt;code&gt;mill resolve __&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Add ability to pass GPG arguments to publish via &lt;code&gt;--gpgArgs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;-w&lt;/code&gt;/&lt;code&gt;--watch&lt;/code&gt; now works for &lt;code&gt;T.source&lt;/code&gt; targets&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/37?closed=1&#34;&gt;milestone 0.7.0&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.6.3…​0.7.0&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_6_3_2020_05_10&#34;&gt;0.6.3 - 2020-05-10&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Finished incomplete support to publish extra artifacts to IVY repositories (&lt;code&gt;publishLocal&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Improved Sonatype uploads&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;GenIdea&lt;/code&gt;: improvements for shared source dirs and skipped modules&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;ScoverageModule&lt;/code&gt;: Some refactorings to allow better customization&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;More robust classpath handling under Windows&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/38?closed=1&#34;&gt;milestone 0.6.3&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.6.2…​0.6.3&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_6_2_2020_04_22&#34;&gt;0.6.2 - 2020-04-22&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Mill can now execute targets in parallel. This is experimental and need to be enabled with &lt;code&gt;--jobs &amp;lt;n&amp;gt;&lt;/code&gt; option.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;PublishModule&lt;/code&gt;: new &lt;code&gt;publishM2Local&lt;/code&gt; to publish into local Maven repositories&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;PublishModule&lt;/code&gt;: enhanced &lt;code&gt;publishLocal&lt;/code&gt; to specify to ivy repository location&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Windows: Fixed windows launcher and more robust classpath handling&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaNativeModule&lt;/code&gt;: improved compiling and linking support&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;new contrib module &lt;code&gt;VersionFile&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;Dependency&lt;/code&gt;: improved dependency update checker and expose results for programmatic use&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;ǹew contrib module &lt;code&gt;Bintray&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;ǹew contrib module &lt;code&gt;Artifactory&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;fixed testCached support in various modules&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;GenIdea&lt;/code&gt;: improvements, esp. related to source jars&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/36?closed=1&#34;&gt;milestone 0.6.2&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.6.1…​0.6.2&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_6_1_2020_02_24&#34;&gt;0.6.1 - 2020-02-24&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bugfix: Mill now no longer leaks open files (version bump to uPickle 1.0.0)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;New &lt;code&gt;--version&lt;/code&gt; option&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Added Support for Scala.js 1.0.0+&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Added Support for Scala Native 0.4.0-M2&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;JavaModule&lt;/code&gt;: Enhanced &lt;code&gt;ivyDepsTree&lt;/code&gt; to optionally include compile-time and runtime-time dependencies&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;JavaModule&lt;/code&gt;: &lt;code&gt;allSourceFiles&lt;/code&gt; no longer include Scala sources&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;JavaModule&lt;/code&gt;: assembly supports configurable separator when merging resources&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;ScoverageModule&lt;/code&gt;: respect &lt;code&gt;unmanagedClasspath&lt;/code&gt;, added console reporter&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaPBModule&lt;/code&gt;: added more configuration options&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bloop: Fixed inconsistent working directory when executing tests via bloop (forces &lt;code&gt;-Duser.dir&lt;/code&gt; when generating bloop config)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/35?closed=1&#34;&gt;milestone 0.6.1&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.6.0…​0.6.1&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_6_0_2020_01_20&#34;&gt;0.6.0 - 2020-01-20&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support for METALS 0.8.0 in VSCode&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/34?closed=1&#34;&gt;milestone 0.6.0&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.5.9…​0.6.0&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_5_9_2020_01_14&#34;&gt;0.5.9 - 2020-01-14&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bump library versions again&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Alias &lt;code&gt;T.ctx.&lt;strong&gt;&lt;/strong&gt;&lt;/code&gt;&lt;strong&gt; functions to &lt;code&gt;T.&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;T.dest&lt;/code&gt;, &lt;code&gt;T.log&lt;/code&gt;, etc.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bump Mill’s client-connect-to-server timeout, to reduce flakiness when the server is taking a moment to start up&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.5.7…​0.5.9&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;strong&gt;Version 0.5.8 has some binary compatibility issues in requests-scala/geny and should not be used.&lt;/strong&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_5_7_2019_12_28&#34;&gt;0.5.7 - 2019-12-28&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bump library versions: Ammonite 2.0.1, uPickle 0.9.6, Scalatags 0.8.3, OS-Lib 0.6.2, Requests 0.4.7, Geny 0.4.2&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/33?closed=1&#34;&gt;milestone 0.5.7&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.5.5…​0.5.7&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_5_5_0_5_6_2019_12_20&#34;&gt;0.5.5 / 0.5.6 - 2019-12-20&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;(we skipped version 0.5.4 as we had some publishing issues)&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bump library versions: Ammonite 1.9.2, uPickle 0.9.0, Scalatags 0.8.2, OS-Lib 0.5.0, Requests 0.3.0, Geny 0.2.0, uTest 0.7.1&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixed a long standing issue that output of sub-processes are only shown when &lt;code&gt;-i&lt;/code&gt; option was used. Now, you will always seen output of sub-process.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Mill now properly restarts it’s server after it’s version has changed&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;PublishModule&lt;/code&gt;: added ability to publish into non-staging repositories&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaPBModule&lt;/code&gt;: added extra include path option&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/32?closed=1&#34;&gt;milestone 0.5.5&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.5.3…​0.5.5&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_5_3_2019_12_07&#34;&gt;0.5.3 - 2019-12-07&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;GenIdea/idea&lt;/code&gt;: improved support for generated sources and use/download sources in more cases&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;ScalaJS: improvements and support for ScalaJS 0.6.29+ and 1.0.1.RC1&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Introduced new &lt;code&gt;CoursierModule&lt;/code&gt; to use dependency management independent from a compiler&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;ScoverageModule&lt;/code&gt;: better handling of report directories&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaPBModule&lt;/code&gt;: more configuration options&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;various other fixes and improvements&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/31?closed=1&#34;&gt;milestone 0.5.3&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.5.2…​0.5.3&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_5_2_2019_10_17&#34;&gt;0.5.2 - 2019-10-17&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;TestModule&lt;/code&gt;: new `testCached`target, which only re-runs tests after relevant changes&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;TestModule.test&lt;/code&gt;: fixed issue when stacktraces have no filename info&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;Dependency/updates&lt;/code&gt;: fixed issue with reading stale dependencies&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;GenIdea/idea&lt;/code&gt;: no longer shared output directories between mill and IntelliJ IDEA&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;support for Dotty &amp;gt;= 0.18.1&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixed backwards compatibility of mill wrapper script&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Mill now support the Build Server Protocol 2.0 (BSP) and can act as a build server&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;bloop: removed semanticDB dependency&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Documentation updates&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/30?closed=1&#34;&gt;milestone 0.5.2&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.5.1…​0.5.2&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_5_1_2019_09_05&#34;&gt;0.5.1 - 2019-09-05&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;GenIdea: Bug fixes&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;GenIdea: Support for module specific extensions (Facets) and additional config files&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Add ability to define JAR manifests&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Dotty support: Updates and support for binary compiler bridges&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Ivy: improved API to create optional dependendies&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Interpolate &lt;code&gt;$MILL_VERSION&lt;/code&gt; in ivy imports&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Zinc: Fixed logger output&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Scoverage: Upgrade to Scoverage 1.4.0&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Flyway: Upgrade to Flyway 6.0.1&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bloop: Updated semanticDB version to 4.2.2&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Documentation updates&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Improved robustness in release/deployment process&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;For details refer to &lt;a href=&#34;https://github.com/com-lihaoyi/mill/milestone/29?closed=1&#34;&gt;milestone 0.5.1&lt;/a&gt; and the &lt;a href=&#34;https://github.com/com-lihaoyi/mill/compare/0.5.0…​0.5.1&#34;&gt;list of commits&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_5_0&#34;&gt;0.5.0&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Mill now supports a &lt;code&gt;./mill&lt;/code&gt; &lt;a href=&#34;http://com-lihaoyi.github.io/mill/#bootstrap-scripts-linuxos-x-only&#34;&gt;bootstrap script&lt;/a&gt;, allowing a project to pin the version of Mill it requires, as well as letting contributors use &lt;code&gt;./mill …​&lt;/code&gt; to begin development without needing to install Mill beforehand.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support for a &lt;code&gt;.mill-version&lt;/code&gt; file or &lt;code&gt;MILL_VERSION&lt;/code&gt; environment variable for &lt;a href=&#34;http://com-lihaoyi.github.io/mill/#overriding-mill-versions&#34;&gt;Overriding Mill Versions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fix scoverage: inherit repositories from outer project &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/645&#34;&gt;#645&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_4_2&#34;&gt;0.4.2&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Improvements to IntelliJ project generation &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/616&#34;&gt;#616&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Allow configuration of Scala.js&#39; JsEnv &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/628&#34;&gt;#628&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_4_1&#34;&gt;0.4.1&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixes for scala native test suites without test frameworks &lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/627&#34;&gt;#627&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fix publication of artifacts by increasing sonatype timeouts&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bug fixes for Scoverage integration &lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/623&#34;&gt;#623&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_4_0&#34;&gt;0.4.0&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Publish &lt;code&gt;compileIvyDeps&lt;/code&gt; as provided scope (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/535&#34;&gt;535&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Added contrib modules to integrate &lt;a href=&#34;http://com-lihaoyi.github.io/mill/page/contrib-modules.html#bloop&#34;&gt;Bloop&lt;/a&gt;, &lt;a href=&#34;http://com-lihaoyi.github.io/mill/page/contrib-modules.html#flyway&#34;&gt;Flyway&lt;/a&gt;, &lt;a href=&#34;http://com-lihaoyi.github.io/mill/page/contrib-modules.html#play-framework&#34;&gt;Play Framework&lt;/a&gt;, &lt;a href=&#34;http://com-lihaoyi.github.io/mill/page/contrib-modules.html#scoverage&#34;&gt;Scoverage&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Allow configuration of GPG key names when publishing (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/530&#34;&gt;530&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bump Ammonite version to 1.6.7, making &lt;a href=&#34;https://github.com/lihaoyi/requests-scala&#34;&gt;Requests-Scala&lt;/a&gt; available to use in your &lt;code&gt;build.sc&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support for Scala 2.13.0-RC2&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;ScalaFmt support now uses the version specified in &lt;code&gt;.scalafmt.conf&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_3_6&#34;&gt;0.3.6&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Started to splitting out mill.api from mill.core&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Avoid unnecessary dependency downloading by providing fetches per cache policy&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Added detailed dependency download progress to the progress ticker&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixed internal code generator to support large projects&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Zinc worker: compiler bridge can be either pre-compiled or on-demand-compiled&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Zinc worker: configurable scala library/compiler jar discovery&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Zinc worker: configurable compiler cache supporting parallelism&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Version bumps: ammonite 1.6.0, scala 2.12.8, zinc 1.2.5&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Mill now by default fails fast, so in case a build tasks fails, it exits immediately&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Added new &lt;code&gt;-k&lt;/code&gt;/&lt;code&gt;--keep-going&lt;/code&gt; commandline option to disable fail fast behaviour and continue build as long as possible in case of a failure&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_3_5&#34;&gt;0.3.5&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bump uPickle to 0.7.1&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_3_4&#34;&gt;0.3.4&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Mill is now bundled with &lt;a href=&#34;https://github.com/lihaoyi/os-lib&#34;&gt;OS-Lib&lt;/a&gt;, providing a simpler way of dealing with filesystem APIs and subprocesses&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_3_3&#34;&gt;0.3.3&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Added new &lt;code&gt;debug&lt;/code&gt; method to context logger, to log additional debug info into the task specific output dir (&lt;code&gt;out/&amp;lt;task&amp;gt;/log&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Added &lt;code&gt;--debug&lt;/code&gt; option to enable debug output to STDERR&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fix &lt;code&gt;ScalaModule#docJar&lt;/code&gt; task when Scala minor versions differ &lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/475&#34;&gt;475&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_3_2&#34;&gt;0.3.2&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Automatically detect main class to make &lt;code&gt;ScalaModule#assembly&lt;/code&gt; self-executable&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_3_0&#34;&gt;0.3.0&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bump Ammonite to 1.3.2, Fastparse to 2.0.4&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Sped up &lt;code&gt;ScalaModule#docJar&lt;/code&gt; task by about 10x, greatly speeding up publishing&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Add a flag &lt;code&gt;JavaModule#skipIdea&lt;/code&gt; you can override to disable Intellij project generation &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/458&#34;&gt;#458&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Allow sub-domains when publishing &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/441&#34;&gt;#441&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_2_8&#34;&gt;0.2.8&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;mill inspect&lt;/code&gt; now displays out the doc-comment documentation for a task.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Avoid shutdown hook failures in tests &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/422&#34;&gt;#422&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Ignore unreadable output files rather than crashing &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/423&#34;&gt;#423&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Don’t compile hidden files &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/428&#34;&gt;#428&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_2_7&#34;&gt;0.2.7&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Add &lt;code&gt;visualizePlan&lt;/code&gt; command&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Basic build-info plugin in &lt;code&gt;mill-contrib-buildinfo&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;ScalaPB integration in &lt;code&gt;mill-contrib-scalapblib&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixes for Twirl support, now in &lt;code&gt;mill-contrib-twirllib&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support for building Dotty projects &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/397&#34;&gt;#397&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Allow customization of &lt;code&gt;run&lt;/code&gt;/&lt;code&gt;runBackground&lt;/code&gt; working directory via &lt;code&gt;forkWorkingDir&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Reduced executable size, improved incremental compilation in &lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/414&#34;&gt;#414&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_2_6&#34;&gt;0.2.6&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Improve incremental compilation to work with transitive module dependencies&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Speed up hot compilation performance by properly re-using classloaders&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Speed up compilation time of &lt;code&gt;build.sc&lt;/code&gt; files by removing duplicate macro generated routing code&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_2_5&#34;&gt;0.2.5&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Add &lt;code&gt;.runBackground&lt;/code&gt; and &lt;code&gt;.runMainBackground&lt;/code&gt; commands, to run something in the background without waiting for it to return. The process will keep running until it exits normally, or until the same &lt;code&gt;.runBackground&lt;/code&gt; command is run a second time to spawn a new version of the process. Can be used with &lt;code&gt;-w&lt;/code&gt; for auto-reloading of long-running servers.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://com-lihaoyi.github.io/mill/page/common-project-layouts.html#scala-native-modules&#34;&gt;Scala-Native support&lt;/a&gt;. Try it out!&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Add &lt;code&gt;--disable-ticker&lt;/code&gt; to reduce spam in CI&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fix propagation of &lt;code&gt;--color&lt;/code&gt; flag&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_2_4&#34;&gt;0.2.4&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fix resolution of &lt;code&gt;scala-{library,compiler,reflect}&lt;/code&gt; in case of conflict&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Allow configuration of &lt;code&gt;JavaModule&lt;/code&gt; and &lt;code&gt;ScalafmtModule&lt;/code&gt; scala workers&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Allow hyphens in module and task names&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fix publishing of ScalaJS modules to properly handle upstream ScalaJS dependencies&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_2_3&#34;&gt;0.2.3&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Added the &lt;a href=&#34;http://com-lihaoyi.github.io/mill/#visualize&#34;&gt;mill show visualize&lt;/a&gt; command, making it easy to visualize the relationships between various tasks and modules in your Mill build.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Improve Intellij support (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/351&#34;&gt;351&lt;/a&gt;): better jump-to-definition for third-party libraries, no longer stomping over manual configuration, and better handling of &lt;code&gt;import $ivy&lt;/code&gt; in your build file.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support for un-signed publishing and cases where your GPG key has no passphrase (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/346&#34;&gt;346&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Basic support for Twirl, Play Framework’s templating language (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/271&#34;&gt;271&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Better performance for streaming large amounts of stdout from Mill’s daemon process.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Allow configuration of append/exclude rules in &lt;code&gt;ScalaModule#assembly&lt;/code&gt; (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/309&#34;&gt;309&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_2_2&#34;&gt;0.2.2&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Preserve caches when transitioning between &lt;code&gt;-i&lt;/code&gt;/&lt;code&gt;--interactive&lt;/code&gt; and the fast client/server mode (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/329&#34;&gt;329&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Keep Mill daemon running if you Ctrl-C during &lt;code&gt;-w&lt;/code&gt;/&lt;code&gt;--watch&lt;/code&gt; mode (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/327&#34;&gt;327&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Allow &lt;code&gt;mill version&lt;/code&gt; to run without a build file (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/328&#34;&gt;328&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Make &lt;code&gt;docJar&lt;/code&gt; (and thus publishing) robust against scratch files in the source directories (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/334&#34;&gt;334&lt;/a&gt;) and work with Scala compiler options (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/336&#34;&gt;336&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Allow passing Ammonite command-line options to the &lt;code&gt;foo.repl&lt;/code&gt; command (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/333&#34;&gt;333&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Add &lt;code&gt;mill clean&lt;/code&gt; (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/315&#34;&gt;315&lt;/a&gt;) to easily delete the Mill build caches for specific targets&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Improve IntelliJ integration of `MavenModule`s/`SbtModule`s&#39; test folders (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/298&#34;&gt;298&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Avoid showing useless stack traces when &lt;code&gt;foo.test&lt;/code&gt; result-reporting fails or &lt;code&gt;foo.run&lt;/code&gt; fails&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;ScalaFmt support (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/308&#34;&gt;308&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Allow &lt;code&gt;ScalaModule#generatedSources&lt;/code&gt; to allow single files (previous you could only pass in directories)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_2_0&#34;&gt;0.2.0&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Universal (combined batch/sh) script generation for launcher, assembly, and release (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/264&#34;&gt;#264&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Windows client/server improvements (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/262&#34;&gt;#262&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Windows repl support (note: MSYS2 subsystem/shell will be supported when jline3 v3.6.3 is released)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixed Java 9 support&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Remove need for running &lt;code&gt;publishAll&lt;/code&gt; using &lt;code&gt;--interactive&lt;/code&gt; when on OSX and your GPG key has a passphrase&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;First-class support for `JavaModule`s&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Properly pass compiler plugins to Scaladoc (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/282&#34;&gt;#282&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support for ivy version-pinning via &lt;code&gt;ivy&#34;…​&#34;.forceVersion()&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support for ivy excludes via &lt;code&gt;ivy&#34;…​&#34;.exclude()&lt;/code&gt; (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/pull/254&#34;&gt;#254&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Make &lt;code&gt;ivyDepsTree&lt;/code&gt; properly handle transitive dependencies (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/226&#34;&gt;#226&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fix handling of &lt;code&gt;runtime&lt;/code&gt;-scoped ivy dependencies (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/173&#34;&gt;#173&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Make environment variables available to Mill builds (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/257&#34;&gt;#257&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support ScalaCheck test runner (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/286&#34;&gt;#286&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support for using Typelevel Scala (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/275&#34;&gt;#275&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;If a module depends on multiple submodules with different versions of an ivy dependency, only one version is resolved (&lt;a href=&#34;https://github.com/com-lihaoyi/mill/issues/273&#34;&gt;#273&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_1_7&#34;&gt;0.1.7&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support for non-interactive (client/server) mode on Windows.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;More fixes for Java 9&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bumped the Mill daemon timeout from 1 minute to 5 minutes of inactivity before it shuts down.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Avoid leaking Node.js subprocesses when running &lt;code&gt;ScalaJSModule&lt;/code&gt; tests&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Passing command-line arguments with spaces in them to tests no longer parses wrongly&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaModule#repositories&lt;/code&gt;, &lt;code&gt;scalacPluginIvyDeps&lt;/code&gt;, &lt;code&gt;scalacOptions&lt;/code&gt;, &lt;code&gt;javacOptions&lt;/code&gt; are now automatically propagated to &lt;code&gt;Tests&lt;/code&gt; modules&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaJSModule&lt;/code&gt; linking errors no longer show a useless stack trace&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaModule#docJar&lt;/code&gt; now properly uses the compileClasspath rather than runClasspath&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Bumped underlying Ammonite version to &lt;a href=&#34;http://ammonite.io/#1.1.0&#34;&gt;1.1.0&lt;/a&gt;, which provides the improved Windows and Java 9 support&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_1_6&#34;&gt;0.1.6&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixes for non-interactive (client/server) mode on Java 9&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Windows batch (.bat) generation for launcher, assembly, and release&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_1_5&#34;&gt;0.1.5&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Introduced the &lt;code&gt;mill plan foo.bar&lt;/code&gt; command, which shows you what the execution plan of running the &lt;code&gt;foo.bar&lt;/code&gt; task looks like without actually evaluating it.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Mill now generates an &lt;code&gt;out/mill-profile.json&lt;/code&gt; file containing task-timings, to make it easier to see where your mill evaluation time is going&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Introduced &lt;code&gt;ScalaModule#ivyDepsTree&lt;/code&gt; command to show dependencies tree&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Rename &lt;code&gt;describe&lt;/code&gt; to &lt;code&gt;inspect&lt;/code&gt; for consistency with SBT&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;mill resolve&lt;/code&gt; now prints results sorted alphabetically&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Node.js configuration can be customised with &lt;code&gt;ScalaJSModule#nodeJSConfig&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Scala.js &lt;code&gt;fullOpt&lt;/code&gt; now uses Google Closure Compiler after generating the optimized Javascript output&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Scala.js now supports &lt;code&gt;NoModule&lt;/code&gt; and &lt;code&gt;CommonJSModule&lt;/code&gt; module kinds&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Include &lt;code&gt;compileIvyDeps&lt;/code&gt; when generating IntelliJ projects&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixed invalid POM generation&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support for Java 9 (and 10)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixes for Windows support&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixed test classes discovery by skipping interfaces&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Include &#34;optional&#34; artifacts in dependency resolution if they exist&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;out/{module_name}&lt;/code&gt; now added as a content root in generated IntelliJ project&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_1_4&#34;&gt;0.1.4&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Speed up Mill client initialization by another 50-100ms&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Speed up incremental `assembly`s in the common case where upstream dependencies do not change.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Make &lt;code&gt;ScalaJSModule#run&lt;/code&gt; work with main-method discovery&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Make &lt;code&gt;ScalaWorkerModule&lt;/code&gt; user-defineable, so you can use your own custom coursier resolvers when resolving Mill’s own jars&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Simplify definitions of &lt;code&gt;SCM&lt;/code&gt; strings&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Make the build REPL explicitly require &lt;code&gt;-i&lt;/code&gt;/&lt;code&gt;--interactive&lt;/code&gt; to run&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Log a message when Mill is initializing the Zinc compiler interface&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_1_3&#34;&gt;0.1.3&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Greatly reduced the overhead of evaluating Mill tasks, with a warm already-cached &lt;code&gt;mill dev.launcher&lt;/code&gt; now taking ~450ms instead of ~1000ms&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Mill now saves compiled build files in &lt;code&gt;~/.mill/ammonite&lt;/code&gt;, which is configurable via the &lt;code&gt;--home&lt;/code&gt; CLI arg.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixed linking of multi-module Scala.js projects&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_1_2&#34;&gt;0.1.2&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Mill now keeps a long-lived work-daemon around in between commands; this should improve performance of things like &lt;code&gt;compile&lt;/code&gt; which benefit from the warm JVM. You can use &lt;code&gt;-i&lt;/code&gt;/&lt;code&gt;--interactive&lt;/code&gt; for interactive consoles/REPLs and for running commands without the daemon&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Implemented the &lt;code&gt;ScalaModule#launcher&lt;/code&gt; target for easily creating command-line launchers you can run outside of Mill&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;ScalaModule#docJar&lt;/code&gt; no longer fails if you don’t have &lt;code&gt;scala-compiler&lt;/code&gt; on classpath&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Support for multiple &lt;code&gt;testFrameworks&lt;/code&gt; in a test module.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_1_1&#34;&gt;0.1.1&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Fixes for &lt;code&gt;foo.console&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Enable Ammonite REPL integration via &lt;code&gt;foo.repl&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_0_1_0&#34;&gt;0.1.0&lt;/h4&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;First public release&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>