<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-31T01:41:30Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>typelevel/spire</title>
    <updated>2024-12-31T01:41:30Z</updated>
    <id>tag:github.com,2024-12-31:/typelevel/spire</id>
    <link href="https://github.com/typelevel/spire" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Powerful new number types and numeric abstractions for Scala.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/typelevel/spire/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/typelevel/spire/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/QNnHKHq5Ts&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/632277896739946517.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=404244&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/typelevel/spire?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/github/typelevel/spire/coverage.svg?branch=main&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://index.scala-lang.org/typelevel/spire/spire&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/typelevel/spire/spire/latest-by-scala-version.svg?sanitize=true&#34; alt=&#34;spire Scala version support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Spire&lt;/h2&gt; &#xA;&lt;p&gt;Spire is a numeric library for Scala which is intended to be generic, fast, and precise.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://typelevel.org/spire/&#34;&gt;companion microsite&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kostaskougios/terminal21-restapi</title>
    <updated>2024-12-31T01:41:30Z</updated>
    <id>tag:github.com,2024-12-31:/kostaskougios/terminal21-restapi</id>
    <link href="https://github.com/kostaskougios/terminal21-restapi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Terminal 21&lt;/h1&gt; &#xA;&lt;p&gt;Terminal 21 is a library and server that give scala command line programs (i.e. scala-cli scripts) the ability to easily create web user interface (which is based on react and components like chakra etc). See a couple of quick presentations of what can be done at the &lt;a href=&#34;https://www.youtube.com/@terminal21-gf1oh/videos&#34;&gt;terminal 21 youtube channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For scala 3 and jdk21 or better. If you have scala-cli installed, you won&#39;t need to download scala 3 or jdk21, see below for instructions on how to quickly start with terminal21.&lt;/p&gt; &#xA;&lt;p&gt;Terminal21 consist of :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a web server that can be easily deployed on your laptop, home network etc&lt;/li&gt; &#xA; &lt;li&gt;scala apps (scala-cli/ammonite scripts or just normal scala apps) that use the terminal21 UI libs to create user interfaces&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The terminal21 libs have a websocket open with the server, and they send / receive instructions and events. Similarly, the server has a websocket open with the React frontend to do the same. Events like clicks or changes to input boxes instantly update the state in the client scripts.&lt;/p&gt; &#xA;&lt;p&gt;The best and easiest way to start with terminal 21 is via scala-cli and a simple example.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s create a simple hello world script in scala-cli that uses terminal21 server to render the UI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/example-scripts/hello-world.sc&#34;&gt;hello-world.sc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.terminal21.client.*&#xA;import org.terminal21.client.components.*&#xA;&#xA;Sessions.withNewSession(&#34;hello-world&#34;, &#34;Hello World Example&#34;): session =&amp;gt;&#xA;  given ConnectedSession = session&#xA;  Seq(&#xA;    Paragraph(text = &#34;Hello World!&#34;)&#xA;  ).render()&#xA;  session.waitTillUserClosesSession()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we run this, then we can point our browser to the server, and we will see this UI:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/docs/images/hello-world.png&#34; alt=&#34;hello world ui&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The script will wait until the user clicks the close button, which then will invalidate the session it has with the server and terminate the app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/docs/images/hello-world-terminated.png&#34; alt=&#34;hello world ui&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usecases&lt;/h1&gt; &#xA;&lt;p&gt;Due to it&#39;s client-server architecture, terminal21 gives a UI to scripts running i.e. on servers without a desktop environment and can be used for things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;creating text file editors which run on desktop-less servers but still allows us to edit the text file on our browser, see &lt;a href=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/example-scripts/textedit.sc&#34;&gt;textedit.sc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/docs/images/text-editor.png&#34; alt=&#34;text editor&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;creating csv editors and viewers, &lt;a href=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/example-scripts/csv-editor.sc&#34;&gt;csv-editor.sc&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/example-scripts/csv-viewer.sc&#34;&gt;csv-viewer.sc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;messaging apps like &lt;a href=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/example-scripts/postit.sc&#34;&gt;postit.sc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/docs/images/postit.png&#34; alt=&#34;postit&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;even small web based games, maybe starting with &lt;a href=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/example-scripts/bouncing-ball.sc&#34;&gt;bouncing-ball.sc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;POC code at the office can be presented via a scala-cli script + terminal21 UI. The POC code can be imported as a lib in a script.&lt;/li&gt; &#xA; &lt;li&gt;logs can be viewed and searched via scripts&lt;/li&gt; &#xA; &lt;li&gt;... and so on&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Quick start with terminal21&lt;/h1&gt; &#xA;&lt;p&gt;The easiest way to start with terminal21 is to clone this repository. There is a scala-cli script that starts the server (all deps and jdk21 will be downloaded automatically by scala-cli).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/kostaskougios/terminal21-restapi.git&#xA;cd terminal21-restapi/example-scripts&#xA;&#xA;# start the server&#xA;./server.sc&#xA;# ... it will download dependencies &amp;amp; jdk and start the server.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now open your browser to &lt;a href=&#34;http://localhost:8080/ui/&#34;&gt;http://localhost:8080/ui/&lt;/a&gt; . You&#39;ll have the terminal21 UI, will be a bit empty for now, just the settings tab. But we will shortly run some scripts with UI&#39;s.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s run some example scripts. All scripts use project.scala with some common settings and dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/example-scripts/csv-editor.sc&#34;&gt;csv-editor.sc&lt;/a&gt; : edit csv files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./csv-editor.sc -- /tmp/wargame.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(note the &#34;--&#34;: this is a scala-cli parameter needed before passing actual arguments to a script. The actual argument is the csv filename.)&lt;/p&gt; &#xA;&lt;p&gt;Terminal21 UI will now have the csv editor&#39;s tab: &lt;img src=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/docs/images/csv-editor.png&#34; alt=&#34;csv editor&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If we click in a cell, we will be able to change a value. And then use the &#34;Save &amp;amp; Exit&#34; button to save the file and exit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kostaskougios/terminal21-restapi/main/docs/images/csv-editor-change.png&#34; alt=&#34;csv editor&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now feel free to examine and run the rest of the scripts or create your own! I found out MS code works better for scala-cli scripts but please make sure you include the terminal21 libs in the script rather than in &lt;code&gt;project.scala&lt;/code&gt;. This will make autocomplete work better.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ls *.sc&#xA;bouncing-ball.sc csv-editor.sc    csv-viewer.sc    hello-world.sc   postit.sc        server.sc        textedit.sc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Need help?&lt;/h1&gt; &#xA;&lt;p&gt;Please use the discussions of the project to post any questions, comments or ideas.&lt;/p&gt;</summary>
  </entry>
</feed>