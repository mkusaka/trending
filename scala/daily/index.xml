<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-05T01:38:11Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>twitter/algebird</title>
    <updated>2023-04-05T01:38:11Z</updated>
    <id>tag:github.com,2023-04-05:/twitter/algebird</id>
    <link href="https://github.com/twitter/algebird" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Abstract Algebra for Scala&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Algebird&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/twitter/algebird&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/twitter/algebird/develop.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/twitter/algebird&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/twitter/algebird/develop.svg?maxAge=3600&#34; alt=&#34;Codecov branch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://index.scala-lang.org/twitter/algebird/algebird-core&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/twitter/algebird/algebird-core/latest.svg?color=orange&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/twitter/algebird?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/twitter/algebird.svg?sanitize=true&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;Abstract algebra for Scala. This code is targeted at building aggregation systems (via &lt;a href=&#34;https://github.com/twitter/scalding&#34;&gt;Scalding&lt;/a&gt; or &lt;a href=&#34;http://storm.apache.org/&#34;&gt;Apache Storm&lt;/a&gt;). It was originally developed as part of Scalding&#39;s Matrix API, where Matrices had values which are elements of Monoids, Groups, or Rings. Subsequently, it was clear that the code had broader application within Scalding and on other projects within Twitter.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://twitter.github.io/algebird&#34;&gt;Algebird website&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;What can you do with this code?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;&amp;gt; sbt algebird-core/console&#xA;&#xA;Welcome to Scala 2.12.14 (OpenJDK 64-Bit Server VM, Java 11.0.1).&#xA;Type in expressions for evaluation. Or try :help.&#xA;&#xA;scala&amp;gt; import com.twitter.algebird._&#xA;import com.twitter.algebird._&#xA;&#xA;scala&amp;gt; import com.twitter.algebird.Operators._&#xA;import com.twitter.algebird.Operators._&#xA;&#xA;scala&amp;gt; Map(1 -&amp;gt; Max(2)) + Map(1 -&amp;gt; Max(3)) + Map(2 -&amp;gt; Max(4))&#xA;res0: scala.collection.immutable.Map[Int,com.twitter.algebird.Max[Int]] = Map(2 -&amp;gt; Max(4), 1 -&amp;gt; Max(3))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above, the class &lt;code&gt;Max[T]&lt;/code&gt; signifies that the &lt;code&gt;+&lt;/code&gt; operator should actually be &lt;code&gt;max&lt;/code&gt; (this is accomplished by providing an implicit instance of a typeclass for &lt;code&gt;Max&lt;/code&gt; that handles &lt;code&gt;+&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Model a wide class of &#34;reductions&#34; as a sum on some iterator of a particular value type. For example, average, moving average, max/min, set union, approximate set size (in much less memory with HyperLogLog), approximate item counting (using CountMinSketch).&lt;/li&gt; &#xA; &lt;li&gt;All of these combine naturally in tuples, vectors, maps, options and more standard scala classes.&lt;/li&gt; &#xA; &lt;li&gt;Implementations of Monoids for interesting approximation algorithms, such as Bloom filter, HyperLogLog and CountMinSketch. These allow you to think of these sophisticated operations like you might numbers, and add them up in hadoop or online to produce powerful statistics and analytics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To learn more and find links to tutorials and information around the web, check out the &lt;a href=&#34;https://twitter.github.io/algebird&#34;&gt;Algebird website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The latest API docs are hosted on Algebird&#39;s &lt;a href=&#34;https://twitter.github.io/algebird/api/&#34;&gt;ScalaDoc index&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Involved + Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests and bug reports are always welcome! Check out our &lt;a href=&#34;https://twitter.github.io/algebird/contributing.html&#34;&gt;Contributing guide&lt;/a&gt; for information on what we most need help with and how you can get started contributing.&lt;/p&gt; &#xA;&lt;p&gt;Discussion occurs primarily on the Algebird Gitter channel: &lt;a href=&#34;https://gitter.im/twitter/algebird?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/twitter/algebird.svg?sanitize=true&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We also monitor the &lt;a href=&#34;https://groups.google.com/forum/#!forum/algebird&#34;&gt;Algebird mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Issues should be reported on the &lt;a href=&#34;https://github.com/twitter/algebird/issues&#34;&gt;GitHub issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We use a lightweight form of project governance inspired by the one used by Apache projects.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/twitter/analytics-infra-governance#contributing-and-committership&#34;&gt;Contributing and Committership&lt;/a&gt; for our code of conduct and our pull request review process.&lt;/p&gt; &#xA;&lt;p&gt;The TL;DR is send us a pull request, iterate on the feedback + discussion, and get a +1 from a &lt;a href=&#34;https://raw.githubusercontent.com/twitter/algebird/develop/COMMITTERS.md&#34;&gt;Committer&lt;/a&gt; in order to get your PR accepted.&lt;/p&gt; &#xA;&lt;p&gt;The current list of active committers (who can +1 a pull request) can be found here: &lt;a href=&#34;https://raw.githubusercontent.com/twitter/algebird/develop/COMMITTERS.md&#34;&gt;Committers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A list of contributors to the project can be found here: &lt;a href=&#34;https://github.com/twitter/algebird/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Maven&lt;/h2&gt; &#xA;&lt;p&gt;Algebird modules are available on maven central. The current groupid and version for all modules is, respectively, &lt;code&gt;&#34;com.twitter&#34;&lt;/code&gt; and &lt;code&gt;0.13.5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://index.scala-lang.org/twitter/algebird&#34;&gt;Algebird&#39;s page on the Scaladex&lt;/a&gt; for information on all published artifacts and their associated Scala versions. Algebird currently supports Scala 2.10, 2.11 and 2.12.&lt;/p&gt; &#xA;&lt;h2&gt;Projects using Algebird&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/twitter/scalding&#34;&gt;Scalding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mesos/spark/pull/480&#34;&gt;Spark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/avibryant/simmer&#34;&gt;Simmer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twitter/summingbird&#34;&gt;Summingbird&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spotify/scio&#34;&gt;Scio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.packetloop.com&#34;&gt;Packetloop&lt;/a&gt; (see &lt;a href=&#34;https://twitter.com/cloudjunky/status/355073917720858626&#34;&gt;this tweet&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Ebay uses Algebird for machine learning: &lt;a href=&#34;http://www.slideshare.net/VitalyGordon/scalable-and-flexible-machine-learning-with-scala-linkedin&#34;&gt;ScalaDays talk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=16969118&#34;&gt;Apple (FEAR Team)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other projects built with Algebird, as compiled by the Scaladex: &lt;a href=&#34;https://index.scala-lang.org/search?q=dependencies:twitter/algebird-core&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/count.svg?q=dependencies:twitter/algebird*&amp;amp;subject=scaladex:&amp;amp;color=blue&amp;amp;style=flat-square&#34; alt=&#34;Scaladex Dependents&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Oscar Boykin &lt;a href=&#34;http://twitter.com/posco&#34;&gt;http://twitter.com/posco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Avi Bryant &lt;a href=&#34;http://twitter.com/avibryant&#34;&gt;http://twitter.com/avibryant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edwin Chen &lt;a href=&#34;http://twitter.com/echen&#34;&gt;http://twitter.com/echen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ellchow &lt;a href=&#34;http://github.com/ellchow&#34;&gt;http://github.com/ellchow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mike Gagnon &lt;a href=&#34;https://twitter.com/gmike&#34;&gt;https://twitter.com/gmike&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Moses Nakamura &lt;a href=&#34;https://twitter.com/mnnakamura&#34;&gt;https://twitter.com/mnnakamura&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Steven Noble &lt;a href=&#34;http://twitter.com/snoble&#34;&gt;http://twitter.com/snoble&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sam Ritchie &lt;a href=&#34;http://twitter.com/sritchie&#34;&gt;http://twitter.com/sritchie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ashutosh Singhal &lt;a href=&#34;http://twitter.com/daashu&#34;&gt;http://twitter.com/daashu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Argyris Zymnis &lt;a href=&#34;http://twitter.com/argyris&#34;&gt;http://twitter.com/argyris&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2016 Twitter, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Thanks to Yourkit&lt;/h3&gt; &#xA;&lt;p&gt;YourKit supports open source projects with innovative and intelligent tools for monitoring and profiling Java and .NET applications. YourKit is the creator of &lt;a href=&#34;https://www.yourkit.com/java/profiler/&#34;&gt;YourKit Java Profiler&lt;/a&gt;, &lt;a href=&#34;https://www.yourkit.com/.net/profiler/&#34;&gt;YourKit .NET Profiler&lt;/a&gt;, and &lt;a href=&#34;https://www.yourkit.com/youmonitor/&#34;&gt;YourKit YouMonitor&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twitter/bazel-multiversion</title>
    <updated>2023-04-05T01:38:11Z</updated>
    <id>tag:github.com,2023-04-05:/twitter/bazel-multiversion</id>
    <link href="https://github.com/twitter/bazel-multiversion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bazel rules to resolve, fetch and manage 3rdparty JVM dependencies with support for multiple parallel versions of the same dependency. Powered by Coursier.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bazel-multiversion&lt;/h1&gt; &#xA;&lt;p&gt;Transitive Maven artifact resolution that supports multiple versions of the same 3rdparty dependency (an alternative to bazelbuild/rules_jvm_external).&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Step 1: Clone repo&#xA;git clone https://github.com/twitter/bazel-multiversion&#xA;cd bazel-multiversion&#xA;&#xA;# Step 2: Build and run code with different versions of Guava&#xA;cd multiversion-example/&#xA;bazel build tricky/...&#xA;bazel run tricky/user/src/main/scala/bincompat:bin-needs-guava24&#xA;bazel run tricky/user/src/main/scala/bincompat:bin-needs-guava29&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Download GraalVM native image from &lt;a href=&#34;https://github.com/twitter/bazel-multiversion/releases&#34;&gt;https://github.com/twitter/bazel-multiversion/releases&lt;/a&gt;, and put &lt;code&gt;multiversion&lt;/code&gt; in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are 3 ways to configure the dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;BUILDish DSL&lt;/h3&gt; &#xA;&lt;p&gt;BUILDish DSL allows the configuration of dependencies using &lt;code&gt;BUILD&lt;/code&gt; files similar to what is currently done using Pants. See &lt;code&gt;multiversion-example/3rdparty/jvm/&lt;/code&gt; for the examples.&lt;/p&gt; &#xA;&lt;p&gt;To regenerate the &lt;code&gt;3rdparty/jvm_deps.bzl&lt;/code&gt; file, run the following inside the &lt;code&gt;multiversion-example/&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ multiversion import-build --output-path=3rdparty/jvm_deps.bzl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;multiversion_config&lt;/h4&gt; &#xA;&lt;p&gt;Place this at &lt;code&gt;3rdparty/jvm/BUILD&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;multiversion_config(&#xA;  scala_versions = [&#34;2.12.12&#34;],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently only one Scala version can be specified.&lt;/p&gt; &#xA;&lt;h4&gt;jar_library&lt;/h4&gt; &#xA;&lt;p&gt;Place &lt;code&gt;BUILD&lt;/code&gt; files under &lt;code&gt;3rdparty/jvm/com/google/guava/BUILD&lt;/code&gt; where &lt;code&gt;com/google/guava&lt;/code&gt; matches the groupid of the external library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;jar_library(&#xA;  name = &#34;guava&#34;,&#xA;  jars = [&#xA;    jar(&#xA;      org = &#34;com.google.guava&#34;,&#xA;      name = &#34;guava&#34;,&#xA;      rev = &#34;29.0-jre&#34;,&#xA;    )&#xA;  ],&#xA;)&#xA;&#xA;jar_library(&#xA;  name = &#34;guava-24&#34;,&#xA;  jars = [&#xA;    jar(&#xA;      org = &#34;com.google.guava&#34;,&#xA;      name = &#34;guava&#34;,&#xA;      rev = &#34;24.1.1-jre&#34;,&#xA;    ),&#xA;    jar(&#xA;      org = &#34;org.checkerframework&#34;,&#xA;      name = &#34;checker-compat-qual&#34;,&#xA;      rev = &#34;2.0.0&#34;,&#xA;    )&#xA;  ],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Scala libraries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;jar_library(&#xA;  name = &#34;scalameta&#34;,&#xA;  jars = [&#xA;    scala_jar(&#xA;      org = &#34;org.scalameta&#34;,&#xA;      name = &#34;scalameta&#34;,&#xA;      rev = &#34;4.0.0&#34;,&#xA;    )&#xA;  ],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, reference the artifacts in the &lt;code&gt;BUILD&lt;/code&gt; file with their label (location of the Guava &lt;code&gt;BUILD&lt;/code&gt; + &lt;code&gt;/&lt;/code&gt; + name of the &#34;target&#34;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scala_library(&#xA;    name=&#34;hello&#34;,&#xA;    srcs=[&#34;Hello.scala&#34;],&#xA;    deps=[&#xA;        &#34;@maven//:3rdparty/jvm/com/google/guava/guava&#34;,&#xA;    ],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Workspace setup&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;load(&#34;//3rdparty:jvm_deps.bzl&#34;, &#34;jvm_deps&#34;)&#xA;jvm_deps()&#xA;load(&#34;@maven//:jvm_deps.bzl&#34;, &#34;load_jvm_deps&#34;)&#xA;load_jvm_deps()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;YAML or JSON&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to configure the dependencies in one file, create &lt;code&gt;3rdparty.yaml&lt;/code&gt; at the root of monorepo instead To regenerate the &lt;code&gt;3rdparty/jvm_deps.bzl&lt;/code&gt; file, runt the following inside the &lt;code&gt;multiversion-example/&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ multiversion export --output-path=3rdparty/jvm_deps.bzl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify a different path or format for the input configuration using &lt;code&gt;--input-path&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ multiversion export --input-path=config/3rdparty.json --output-path=3rdparty/jvm_deps.bzl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pants&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ multiversion pants-export --output-path=3rdparty/jvm_deps.bzl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Publishing to external repositories&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/twitter/bazel-multiversion/main/rules_jvm_export/&#34;&gt;rules_jvm_export&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/twitter/bazel-multiversion/main/DEVELOP.md&#34;&gt;DEVELOP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright Twitter, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0&lt;/p&gt;</summary>
  </entry>
</feed>