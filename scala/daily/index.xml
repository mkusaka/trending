<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-05T01:56:26Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rockthejvm/spark-essentials</title>
    <updated>2022-06-05T01:56:26Z</updated>
    <id>tag:github.com,2022-06-05:/rockthejvm/spark-essentials</id>
    <link href="https://github.com/rockthejvm/spark-essentials" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official repository for the Rock the JVM Spark Essentials with Scala course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The official repository for the Rock the JVM Spark Essentials with Scala course&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the code we wrote during &lt;a href=&#34;https://rockthejvm.com/course/spark-essentials&#34;&gt;Rock the JVM&#39;s Spark Essentials with Scala&lt;/a&gt; (Udemy version &lt;a href=&#34;https://udemy.com/spark-essentials&#34;&gt;here&lt;/a&gt;) Unless explicitly mentioned, the code in this repository is exactly what was caught on camera.&lt;/p&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;install &lt;a href=&#34;https://docker.com&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;either clone the repo or download as zip&lt;/li&gt; &#xA; &lt;li&gt;open with IntelliJ as an SBT project&lt;/li&gt; &#xA; &lt;li&gt;in a terminal window, navigate to the folder where you downloaded this repo and run &lt;code&gt;docker-compose up&lt;/code&gt; to build and start the PostgreSQL container - we will interact with it from Spark&lt;/li&gt; &#xA; &lt;li&gt;in another terminal window, navigate to &lt;code&gt;spark-cluster/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux/Mac users: build the Docker-based Spark cluster with&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod +x build-images.sh&#xA;./build-images.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows users: build the Docker-based Spark cluster with&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;build-images.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;when prompted to start the Spark cluster, go to the &lt;code&gt;spark-cluster&lt;/code&gt; directory and run &lt;code&gt;docker-compose up --scale spark-worker=3&lt;/code&gt; to spin up the Spark containers with 3 worker nodes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;A Note For Windows users: Adding Winutils&lt;/h3&gt; &#xA;&lt;p&gt;By default, Spark will be unable to write files using the local Spark executor. To write files, you will need to install the Windows Hadoop binaries, aka &lt;a href=&#34;https://github.com/cdarlint/winutils&#34;&gt;winutils&lt;/a&gt;. You can take the latest binary (Hadoop 3.2 as of June 2022), or use Hadoop 2.7 as a fallback.&lt;/p&gt; &#xA;&lt;p&gt;After you download winutils.exe, create a directory anywhere (e.g. &lt;code&gt;C:\\winutils&lt;/code&gt;), then create a &lt;code&gt;bin&lt;/code&gt; directory under that, then place the winutils executable there.&lt;/p&gt; &#xA;&lt;p&gt;You will also need to set the &lt;code&gt;HADOOP_HOME&lt;/code&gt; environment variable to your directory where you added &lt;code&gt;bin\winutils.exe&lt;/code&gt;. In the example above, that would be &lt;code&gt;C:\\winutils&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An alternative to setting the environment variable is to add this line at the beginning of every Spark application we write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;System.setProperty(&#34;hadoop.home.dir&#34;,&#34;C:\\hadoop&#34;) // replace C:\\hadoop with your actual directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to start&lt;/h3&gt; &#xA;&lt;p&gt;Clone this repository and checkout the &lt;code&gt;start&lt;/code&gt; tag by running the following in the repo folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to see the final code&lt;/h3&gt; &#xA;&lt;p&gt;Udemy students: checkout the &lt;code&gt;udemy&lt;/code&gt; branch of the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout udemy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Premium students: checkout the master branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to run an intermediate state&lt;/h3&gt; &#xA;&lt;p&gt;The repository was built while recording the lectures. Prior to each lecture, I tagged each commit so you can easily go back to an earlier state of the repo!&lt;/p&gt; &#xA;&lt;p&gt;The tags are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.1-scala-recap&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.1-dataframes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.2-dataframes-basics-exercise&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.4-datasources&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.5-datasources-part-2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.6-columns-expressions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.7-columns-expressions-exercise&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.8-aggregations&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.9-joins&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.10-joins-exercise&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.1-common-types&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.2-complex-types&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.3-managing-nulls&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.4-datasets&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3.5-datasets-part-2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4.1-spark-sql-shell&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4.2-spark-sql&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;4.3-spark-sql-exercises&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;5.1-rdds&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;5.2-rdds-part-2&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And for premium students, in addition:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;6.1-spark-job-anatomy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;6.2-deploying-to-cluster&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;7.1-taxi&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;7.2-taxi-2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;7.3-taxi-3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;7.4-taxi-4&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When you watch a lecture, you can &lt;code&gt;git checkout&lt;/code&gt; the appropriate tag and the repo will go back to the exact code I had when I started the lecture.&lt;/p&gt; &#xA;&lt;h3&gt;For questions or suggestions&lt;/h3&gt; &#xA;&lt;p&gt;If you have changes to suggest to this repo, either&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;submit a GitHub issue&lt;/li&gt; &#xA; &lt;li&gt;tell me in the course Q/A forum&lt;/li&gt; &#xA; &lt;li&gt;submit a pull request!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>xxf098/shadowsocksr-v2ray-trojan-android</title>
    <updated>2022-06-05T01:56:26Z</updated>
    <id>tag:github.com,2022-06-05:/xxf098/shadowsocksr-v2ray-trojan-android</id>
    <link href="https://github.com/xxf098/shadowsocksr-v2ray-trojan-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A V2Ray, Trojan, ShadowsocksR client for Android&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;A ShadowsocksR, V2Ray and Trojan Client for Android&lt;/h2&gt; &#xA;&lt;p&gt;A fully featured &lt;a href=&#34;https://github.com/breakwa11/shadowsocks-rss/&#34;&gt;ShadowsocksR&lt;/a&gt;, &lt;a href=&#34;https://github.com/v2ray/v2ray-core&#34;&gt;V2Ray&lt;/a&gt; and &lt;a href=&#34;https://trojan-gfw.github.io/trojan/protocol&#34;&gt;Trojan&lt;/a&gt; client for Android, written in Scala.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/xxf098/shadowsocksr-v2ray-android/workflows/build/badge.svg?branch=xxf098%2Fmaster&amp;amp;event=push&#34; alt=&#34;build&#34;&gt; &lt;a href=&#34;https://github.com/xxf098/shadowsocksr-v2ray-android/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/xxf098/shadowsocksr-v2ray-android&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/xxf098/shadowsocksr-v2ray-android/issues/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/xxf098/shadowsocksr-v2ray-android.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PREREQUISITES&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A really fast proxy&lt;/li&gt; &#xA; &lt;li&gt;JDK 1.8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    sudo apt-get install openjdk-8-jdk&#xA;    export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64&#xA;    export PATH=$PATH:$JAVA_HOME/bin&#xA;    java -version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SBT &lt;a href=&#34;https://www.scala-sbt.org/download.html&#34;&gt;0.13.8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android SDK &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build Tools 30+&lt;/li&gt; &#xA;   &lt;li&gt;Android Support Repository and Google Repository (see &lt;code&gt;build.sbt&lt;/code&gt; for version)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Android NDK r21e+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;BUILD with Android Studio&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Warnning: Cannot build in windows&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;a href=&#34;https://developer.android.com/ndk/downloads/older_releases&#34;&gt;Android NDK r20b&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://plugins.jetbrains.com/plugin/1347-scala&#34;&gt;Scala&lt;/a&gt; plugin for IntelliJ IDEA&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set proxy for Android Studio: &lt;code&gt;File | Settings | Appearance &amp;amp; Behavior | System Settings | HTTP Proxy&lt;/code&gt;&lt;br&gt; Set proxy for sbt: &lt;code&gt;File | Settings | Build, Execution, Deployment | Build Tools | sbt&lt;/code&gt;, in &lt;code&gt;VM parameters&lt;/code&gt; input:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  -Dhttps.proxyHost=127.0.0.1&#xA;  -Dhttps.proxyPort=8080&#xA;  -Dhttp.proxyHost=127.0.0.1&#xA;  -Dhttp.proxyPort=8080&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; to &lt;code&gt;/path/to/Android/Sdk&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set environment variable &lt;code&gt;ANDROID_NDK_HOME&lt;/code&gt; to &lt;code&gt;/path/to/Android/android-ndk-r21e&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create your key following the instructions at &lt;a href=&#34;https://developer.android.com/studio/publish/app-signing.html&#34;&gt;https://developer.android.com/studio/publish/app-signing.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Put your key in ~/.keystore or any other place&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;local.properties&lt;/code&gt; from &lt;code&gt;local.properties.example&lt;/code&gt; with your own key information&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  key.alias: abc&#xA;  key.store: /path/to/Android/abc.jks&#xA;  key.store.password: abc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if you installed multiple versions of Java, use &lt;code&gt;sudo update-alternatives --config java&lt;/code&gt; to select Java 8&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Before build apk, make sure inside &lt;code&gt;./project/build.properties&lt;/code&gt;, sbt.version=0.13.18&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Invoke the building like this&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    export https_proxy=http://127.0.0.1:8080 # !important&#xA;    export ANDROID_HOME=/path/to/Android/Sdk&#xA;    export ANDROID_NDK_HOME=/path/to/Android/android-ndk-r20b&#xA;    # install and update all git submodule&#xA;    git submodule update --init&#xA;    # cd ./src/main/jni/shadowsocks-libev &amp;amp;&amp;amp; git checkout Akkariiin/master&#xA;    # Build the App and fix the problems as the error messages indicated&#xA;    sbt native-build clean android:package-release&#xA;    # run app&#xA;    sbt android:run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;If you use x64 linux like Archlinux x86_64, or your linux have new version ncurses lib, you may need install the 32bit version ncurses and link it as follow (make sure all these *.so files in the right location under your system, otherwise you have to copy them to /usr/lib/ and /usr/lib32/ directory):&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    # use Archlinux x86_64 as example&#xA;    &#xA;    # install ncurses x64 and x86 version&#xA;    sudo pacman -S lib32-ncurses ncurses&#xA;    &#xA;    # link the version-6 ncurses to version-5&#xA;    sudo ln -s /usr/lib/libncursesw.so /usr/lib/libncurses.so.5&#xA;    sudo ln -s /usr/lib32/libncursesw.so /usr/lib32/libncurses.so.5&#xA;    &#xA;    # link libncurses to libtinfo&#xA;    sudo ln -s /usr/lib/libncurses.so.5 /usr/lib/libtinfo.so.5&#xA;    sudo ln -s /usr/lib32/libncurses.so.5 /usr/lib32/libtinfo.so.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Integration with Android Studio&lt;/h4&gt; &#xA;&lt;p&gt;Checkout this &lt;a href=&#34;http://srodrigo.me/setting-up-scala-on-android/&#34;&gt;link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rm -rf ~/.android/sbt/exploded-aars/*&lt;/li&gt; &#xA; &lt;li&gt;In Project Settings -&amp;gt; Modules -&amp;gt; shadowsocksr-v2ray-trojan-android, change &lt;code&gt;Structure&lt;/code&gt;, &lt;code&gt;Generated Sources&lt;/code&gt; to correct file path&lt;/li&gt; &#xA; &lt;li&gt;In Run/Debug Configuration -&amp;gt; Before launch, replace &lt;code&gt;Gradle-aware Make&lt;/code&gt; with &lt;code&gt;android:run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;BUILD on Mac OS X (with HomeBrew)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Android SDK and NDK by run &lt;code&gt;brew install android-ndk android-sdk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;export ANDROID_HOME=/usr/local/Cellar/android-sdk/$version&lt;/code&gt; to your .bashrc , then reopen the shell to load it.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;export ANDROID_NDK_HOME=/usr/local/Cellar/android-ndk/$version&lt;/code&gt; to your .bashrc , then reopen the shell to load it.&lt;/li&gt; &#xA; &lt;li&gt;echo &#34;y&#34; | android update sdk --filter tools,platform-tools,build-tools-23.0.2,android-23,extra-google-m2repository --no-ui -a&lt;/li&gt; &#xA; &lt;li&gt;echo &#34;y&#34; | android update sdk --filter extra-android-m2repository --no-ui --no-https -a&lt;/li&gt; &#xA; &lt;li&gt;Create your key following the instructions at &lt;a href=&#34;http://developer.android.com/guide/publishing/app-signing.html#cert&#34;&gt;http://developer.android.com/guide/publishing/app-signing.html#cert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Put your key in ~/.keystore&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;local.properties&lt;/code&gt; from &lt;code&gt;local.properties.example&lt;/code&gt; with your own key information .&lt;/li&gt; &#xA; &lt;li&gt;Invoke the building like this&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    git submodule update --init&#xA;&#xA;    # Build native binaries&#xA;    ./build.sh&#xA;&#xA;    # Build the apk&#xA;    sbt clean android:package-release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OPEN SOURCE LICENSES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;shadowsocks-libev: &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-libev/raw/master/LICENSE&#34;&gt;GPLv3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tun2socks: &lt;a href=&#34;https://github.com/shadowsocks/badvpn/raw/shadowsocks-android/COPYING&#34;&gt;BSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;redsocks: &lt;a href=&#34;https://github.com/shadowsocks/redsocks/raw/master/README&#34;&gt;APL 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL: &lt;a href=&#34;https://github.com/shadowsocks/openssl-android/raw/master/NOTICE&#34;&gt;OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;pdnsd: &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-android/raw/master/src/main/jni/pdnsd/COPYING&#34;&gt;GPLv3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;libev: &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-android/raw/master/src/main/jni/libev/LICENSE&#34;&gt;GPLv2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;libevent: &lt;a href=&#34;https://github.com/shadowsocks/libevent/raw/master/LICENSE&#34;&gt;BSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;v2ray-core: &lt;a href=&#34;https://github.com/v2fly/v2ray-core/raw/master/LICENSE&#34;&gt;BSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;go-tun2socks: &lt;a href=&#34;https://github.com/eycorsican/go-tun2socks/raw/master/LICENSE&#34;&gt;BSD&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LICENSE&lt;/h3&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flix/flix</title>
    <updated>2022-06-05T01:56:26Z</updated>
    <id>tag:github.com,2022-06-05:/flix/flix</id>
    <link href="https://github.com/flix/flix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Flix Programming Language&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/flix/flix/master/docs/logo.png&#34; height=&#34;91px&#34; alt=&#34;The Flix Programming Language&#34; title=&#34;The Flix Programming Language&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Flix&lt;/strong&gt; is a statically typed functional, imperative, and logic programming language.&lt;/p&gt; &#xA;&lt;p&gt;We refer you to the &lt;a href=&#34;https://flix.dev/&#34;&gt;official Flix website (flix.dev)&lt;/a&gt; for more information about Flix.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/flix/Lobby&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitterHQ/gitter.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/flix/flix/master/docs/example.png&#34; height=&#34;627px&#34; alt=&#34;Example Flix Program&#34; title=&#34;Example Flix Program&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/flix/flix/master/docs/BUILD.md&#34;&gt;docs/BUILD.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Flix is available under the Apache 2.0 license.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;We kindly thank &lt;a href=&#34;https://www.ej-technologies.com/&#34;&gt;EJ Technologies&lt;/a&gt; for providing us with &lt;a href=&#34;http://www.ej-technologies.com/products/jprofiler/overview.html&#34;&gt;JProfiler&lt;/a&gt; and &lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains&lt;/a&gt; for providing us with &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>