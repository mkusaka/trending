<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-18T01:37:22Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mviroli/pc2022-code</title>
    <updated>2022-11-18T01:37:22Z</updated>
    <id>tag:github.com,2022-11-18:/mviroli/pc2022-code</id>
    <link href="https://github.com/mviroli/pc2022-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>Tinkoff/muffin</title>
    <updated>2022-11-18T01:37:22Z</updated>
    <id>tag:github.com,2022-11-18:/Tinkoff/muffin</id>
    <link href="https://github.com/Tinkoff/muffin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mattermost API v4 Client for Scala&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/Tinkoff/muffin/master/images/logo.png&#34; height=&#34;100px&#34; style=&#34;padding-left: 20px&#34;&gt; &#xA;&lt;h1&gt;Muffin&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/Tinkoff/muffin/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/tinkoff/muffin/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Mattermost v4 API client for Scala 3.&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add muffin to your project dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbt&#34;&gt;libraryDependencies += &#34;ru.tinkoff&#34; %% &#34;muffin-core&#34; % &#34;latest version in badge&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Choose your integrations and include them, for example circe, http4s, and sttp with AsyncHttpClientCatsBackend:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbt&#34;&gt;libraryDependencies += &#34;ru.tinkoff&#34; %% &#34;muffin-circe-json-interop&#34; % &#34;latest version in badge&#34;&#xA;libraryDependencies += &#34;ru.tinkoff&#34; %% &#34;muffin-sttp-http-interop&#34; % &#34;latest version in badge&#34;&#xA;libraryDependencies += &#34;com.softwaremill.sttp.client3&#34; %% &#34;async-http-client-backend-cats&#34; % &#34;3.7.6&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Full example&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import java.time.{LocalDateTime, ZoneId}&#xA;&#xA;import cats.effect.*&#xA;import sttp.client3.asynchttpclient.cats.AsyncHttpClientCatsBackend&#xA;&#xA;import io.circe.*&#xA;&#xA;import muffin.api.*&#xA;import muffin.model.*&#xA;import muffin.dsl.*&#xA;import muffin.interop.circe.codec&#xA;import muffin.interop.http.Http4sRoute&#xA;&#xA;type Api = ApiClient[IO, Encoder, Decoder]&#xA;&#xA;class SimpleCommandHandler(api: Api){&#xA;  def time(command: CommandAction): IO[AppResponse[Nothing]] = {&#xA;    api.postToChannel(command.channelId, LocalDateTime.now().toString.some).as(ok)&#xA;  }&#xA;}&#xA;&#xA;object Application extends IOApp.Simple {&#xA;    for {&#xA;        backend      &amp;lt;- AsyncHttpClientCatsBackend[IO]()&#xA;        httpClient   &amp;lt;- SttpClient[Task, Task, Encoder, Decoder](backend)&#xA;        given ZoneId &amp;lt;- ZIO.succeed(ZoneId.systemDefault())&#xA;        cfg          = ClientConfig(&#34;base mattermost api url&#34;, &#34;auth token&#34;, &#34;bot name&#34;, &#34;your service base url&#34;)&#xA;        apiClient    = ApiClient[IO, Encoder, Decoder](httpClient, cfg)(codec)&#xA;      &#xA;        handler = SimpleCommandHandler(apiClient)&#xA;      &#xA;        router &amp;lt;- handle(handler).command(_.time).in[Task, Task]&#xA;      &#xA;        _ &amp;lt;- EmberServerBuilder&#xA;          .default[IO]&#xA;          .withHost(ipv4&#34;0.0.0.0&#34;)&#xA;          .withPort(port&#34;8080&#34;)&#xA;          .withHttpApp(Router(&#34;/&#34; -&amp;gt; Http4sRoute.routes(router, codec)).orNotFound)&#xA;          .build&#xA;          .allocated&#xA;          .never&#xA;    } yield ()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples &lt;a href=&#34;https://github.com/little-inferno/muffin/tree/oss/modules/examples&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Supported integrations&lt;/h1&gt; &#xA;&lt;h2&gt;Json integrations&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/circe/circe&#34;&gt;circe&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbt&#34;&gt;libraryDependencies += &#34;ru.tinkoff&#34; %% &#34;muffin-circe-json-interop&#34; % &#34;latest version in badge&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import muffin.interop.circe.codec.given&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/zio/zio-json&#34;&gt;zio-json&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbt&#34;&gt;libraryDependencies += &#34;ru.tinkoff&#34; %% &#34;muffin-zio-json-interop&#34; % &#34;latest version in badge&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import muffin.interop.zio.codec.given&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Http integrations&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/http4s/http4s&#34;&gt;http4s&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbt&#34;&gt;libraryDependencies += &#34;ru.tinkoff&#34; %% &#34;muffin-http4s-http-interop&#34; % &#34;latest version in badge&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import cats.effect.IO&#xA;&#xA;import muffin.interop.http.Http4sRoute&#xA;&#xA;val router: Router[IO] = ???&#xA;val codec = ??? // Choose you codec in json integrations section&#xA;&#xA;val server = EmberServerBuilder&#xA;  .default[IO]&#xA;  .withHost(ipv4&#34;0.0.0.0&#34;)&#xA;  .withPort(port&#34;8080&#34;)&#xA;  .withHttpApp(Router(&#34;/&#34; -&amp;gt; Http4sRoute.routes(app, codec)).orNotFound)&#xA;  .build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/dream11/zio-http&#34;&gt;zio-http&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbt&#34;&gt;libraryDependencies += &#34;ru.tinkoff&#34; %% &#34;muffin-zio-http-interop&#34; % &#34;latest version in badge&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import zio.*&#xA;&#xA;import muffin.interop.http.ZioServer&#xA;import muffin.interop.circe.codec&#xA;&#xA;val router: Router[Task] = ???&#xA;val codec = ??? // Choose you codec in json integrations section&#xA;&#xA;val client = ZioClient[Task, /* Supported json encoder */, /* Supported json decoder */](codec)&#xA;&#xA;&#xA;val server = Server.start(8080, ZioServer.routes(router, codec))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/softwaremill/sttp&#34;&gt;sttp&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbt&#34;&gt;libraryDependencies += &#34;ru.tinkoff&#34; %% &#34;muffin-sttp-http-interop&#34; % &#34;latest version in badge&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import java.time.ZoneId&#xA;&#xA;import cats.effect.IO&#xA;&#xA;import muffin.model.*&#xA;&#xA;val client = SttpClient[IO, IO, /* Supported json encoder */, /* Supported json decoder */](backend, codec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright the maintainers&lt;/p&gt; &#xA;&lt;p&gt;Logos made by &lt;a href=&#34;https://discord.com/channels/662267976984297473/976997500349186119/1016053747639656498&#34;&gt;Midjourney&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>