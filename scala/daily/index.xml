<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-17T01:47:05Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cequence-io/openai-scala-client</title>
    <updated>2023-02-17T01:47:05Z</updated>
    <id>tag:github.com,2023-02-17:/cequence-io/openai-scala-client</id>
    <link href="https://github.com/cequence-io/openai-scala-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala client for OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI Scala Client ü§ñ &lt;a href=&#34;https://cequence.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-0.1.1-green.svg?sanitize=true&#34; alt=&#34;version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-lightgrey.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is a no-nonsense async Scala client for OpenAI API supporting all the available endpoints and params (as defined &lt;a href=&#34;https://beta.openai.com/docs/api-reference&#34;&gt;here&lt;/a&gt;), provided in a single, convenient service called &lt;a href=&#34;https://raw.githubusercontent.com/cequence-io/openai-scala-client/master/openai-core/src/main/scala/io/cequence/openaiscala/service/OpenAIService.scala&#34;&gt;OpenAIService&lt;/a&gt;. The supported calls are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Models&lt;/strong&gt;: &lt;a href=&#34;https://beta.openai.com/docs/api-reference/models/list&#34;&gt;listModels&lt;/a&gt;, and &lt;a href=&#34;https://beta.openai.com/docs/api-reference/models/retrieve&#34;&gt;retrieveModel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Completions&lt;/strong&gt;: &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions/create&#34;&gt;createCompletion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Edits&lt;/strong&gt;: &lt;a href=&#34;https://beta.openai.com/docs/api-reference/edits/create&#34;&gt;createEdit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Images&lt;/strong&gt;: &lt;a href=&#34;https://beta.openai.com/docs/api-reference/images/create&#34;&gt;createImage&lt;/a&gt;, &lt;a href=&#34;https://beta.openai.com/docs/api-reference/images/create-edit&#34;&gt;createImageEdit&lt;/a&gt;, and &lt;a href=&#34;https://beta.openai.com/docs/api-reference/images/create-variation&#34;&gt;createImageVariation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Embeddings&lt;/strong&gt;: &lt;a href=&#34;https://beta.openai.com/docs/api-reference/embeddings/create&#34;&gt;createEmbeddings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Files&lt;/strong&gt;: &lt;a href=&#34;https://beta.openai.com/docs/api-reference/files/list&#34;&gt;listFiles&lt;/a&gt;, &lt;a href=&#34;https://beta.openai.com/docs/api-reference/files/upload&#34;&gt;uploadFile&lt;/a&gt;, &lt;a href=&#34;https://beta.openai.com/docs/api-reference/files/delete&#34;&gt;deleteFile&lt;/a&gt;, &lt;a href=&#34;https://beta.openai.com/docs/api-reference/files/retrieve&#34;&gt;retrieveFile&lt;/a&gt;, and &lt;a href=&#34;https://beta.openai.com/docs/api-reference/files/retrieve-content&#34;&gt;retrieveFileContent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fine-tunes&lt;/strong&gt;: &lt;a href=&#34;https://beta.openai.com/docs/api-reference/fine-tunes/create&#34;&gt;createFineTune&lt;/a&gt;, &lt;a href=&#34;https://beta.openai.com/docs/api-reference/fine-tunes/list&#34;&gt;listFineTunes&lt;/a&gt;, &lt;a href=&#34;https://beta.openai.com/docs/api-reference/fine-tunes/retrieve&#34;&gt;retrieveFineTune&lt;/a&gt;, &lt;a href=&#34;https://beta.openai.com/docs/api-reference/fine-tunes/cancel&#34;&gt;cancelFineTune&lt;/a&gt;, &lt;a href=&#34;https://beta.openai.com/docs/api-reference/fine-tunes/events&#34;&gt;listFineTuneEvents&lt;/a&gt;, and &lt;a href=&#34;https://beta.openai.com/docs/api-reference/fine-tunes/delete-model&#34;&gt;deleteFineTuneModel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Moderations&lt;/strong&gt;: &lt;a href=&#34;https://beta.openai.com/docs/api-reference/moderations/create&#34;&gt;createModeration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that in order to be consistent with the OpenAI API naming, the service function names match exactly the API endpoint titles/descriptions with camelcase. Also, we aimed the lib to be self-contained with the fewest dependencies possible therefore we ended up using only two libs &lt;code&gt;play-ahc-ws-standalone&lt;/code&gt; and &lt;code&gt;play-ws-standalone-json&lt;/code&gt; (at the top level). Additionally, if dependency injection is required we use &lt;code&gt;scala-guice&lt;/code&gt; lib as well.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚úîÔ∏è Important&lt;/strong&gt;: this is a &#34;community-maintained&#34; library and, as such, has no relation to OpenAI company.&lt;/p&gt; &#xA;&lt;p&gt;üëâ Check out an article about the lib/client on &lt;a href=&#34;https://medium.com/@0xbnd/openai-scala-client-is-out-d7577de934ad&#34;&gt;Medium&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation üöÄ&lt;/h2&gt; &#xA;&lt;p&gt;The currently supported Scala versions are &lt;strong&gt;2.12&lt;/strong&gt; and &lt;strong&gt;2.13&lt;/strong&gt; &lt;del&gt;but &lt;strong&gt;Scala 3&lt;/strong&gt;-version will come out soon&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;strong&gt;Scala-3&lt;/strong&gt; version has been released on Feb 13th 2023. Enjoy! üéâ&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(Note that an optional module &lt;code&gt;openai-scala-guice&lt;/code&gt; supports only Scala-2.12 and 2.13)&lt;/p&gt; &#xA;&lt;p&gt;To pull the library you have to add the following dependency to your &lt;em&gt;build.sbt&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;io.cequence&#34; %% &#34;openai-scala-client&#34; % &#34;0.1.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to &lt;em&gt;pom.xml&lt;/em&gt; (if you use maven)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;io.cequence&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;openai-scala-client_2.12&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.1.1&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Config ‚öôÔ∏è&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Env. variables: &lt;code&gt;OPENAI_SCALA_CLIENT_API_KEY&lt;/code&gt; and optionally also &lt;code&gt;OPENAI_SCALA_CLIENT_ORG_ID&lt;/code&gt; (if you have one)&lt;/li&gt; &#xA; &lt;li&gt;File config (default): &lt;a href=&#34;https://raw.githubusercontent.com/cequence-io/openai-scala-client/master/openai-client/src/main/resources/openai-scala-client.conf&#34;&gt;openai-scala-client.conf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage üë®‚Äçüéì&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;I. Obtaining OpenAIService&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;First you need to provide an implicit execution context as well as akka materializer, e.g., as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  implicit val ec = ExecutionContext.global&#xA;  implicit val materializer = Materializer(ActorSystem())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can obtain a service in one of the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default config (expects env. variable(s) to be set as defined in &lt;code&gt;Config&lt;/code&gt; section)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  val service = OpenAIServiceFactory()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  val config = ConfigFactory.load(&#34;path_to_my_custom_config&#34;)&#xA;  val service = OpenAIServiceFactory(config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Without config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  val service = OpenAIServiceFactory(&#xA;     apiKey = &#34;your_api_key&#34;,&#xA;     orgId = Some(&#34;your_org_id&#34;) // if you have one&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Via dependency injection (requires &lt;code&gt;openai-scala-guice&lt;/code&gt; lib)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  class MyClass @Inject() (openAIService: OpenAIService) {...}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;II. Calling functions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Full documentation of each call with its respective inputs and settings is provided in &lt;a href=&#34;https://raw.githubusercontent.com/cequence-io/openai-scala-client/master/openai-core/src/main/scala/io/cequence/openaiscala/service/OpenAIService.scala&#34;&gt;OpenAIService&lt;/a&gt;. Since all the calls are async they return responses wrapped in &lt;code&gt;Future&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;List models&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  service.listModels.map(models =&amp;gt;&#xA;    models.foreach(println)&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retrieve model&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  service.retrieveModel(ModelId.text_davinci_003).map(model =&amp;gt;&#xA;    println(model.getOrElse(&#34;N/A&#34;))&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create completion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  val text = &#34;&#34;&#34;Extract the name and mailing address from this email:&#xA;               |Dear Kelly,&#xA;               |It was great to talk to you at the seminar. I thought Jane&#39;s talk was quite good.&#xA;               |Thank you for the book. Here&#39;s my address 2111 Ash Lane, Crestview CA 92002&#xA;               |Best,&#xA;               |Maya&#xA;             &#34;&#34;&#34;.stripMargin&#xA;&#xA;  service.createCompletion(text).map(completion =&amp;gt;&#xA;    println(completion.choices.head.text)&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create completion with a custom setting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  val text = &#34;&#34;&#34;Extract the name and mailing address from this email:&#xA;               |Dear Kelly,&#xA;               |It was great to talk to you at the seminar. I thought Jane&#39;s talk was quite good.&#xA;               |Thank you for the book. Here&#39;s my address 2111 Ash Lane, Crestview CA 92002&#xA;               |Best,&#xA;               |Maya&#xA;             &#34;&#34;&#34;.stripMargin&#xA;&#xA;  service.createCompletion(&#xA;    text,&#xA;    settings = CreateCompletionSettings(&#xA;      model = ModelId.text_davinci_001,&#xA;      max_tokens = Some(1500),&#xA;      temperature = Some(0.9),&#xA;      presence_penalty = Some(0.2),&#xA;      frequency_penalty = Some(0.2)&#xA;    )&#xA;  ).map(completion =&amp;gt;&#xA;    println(completion.choices.head.text)&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ ü§î&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Wen Scala 3?&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;del&gt;Feb 2023. You are right; we chose the shortest month to do so :)&lt;/del&gt; &lt;strong&gt;Done!&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;I got a timeout exception. How can I change the timeout setting?&lt;/em&gt;&lt;/p&gt; &lt;p&gt;You can do it either by passing the &lt;code&gt;timeouts&lt;/code&gt; param to &lt;code&gt;OpenAIServiceFactory&lt;/code&gt; or, if you use your own configuration file, then you can simply add it there as:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;openai-scala-client {&#xA;    timeouts {&#xA;        requestTimeoutSec = 200&#xA;        readTimeoutSec = 200&#xA;        connectTimeoutSec = 5&#xA;        pooledConnectionIdleTimeoutSec = 60&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;I got an exception like &lt;code&gt;com.typesafe.config.ConfigException$UnresolvedSubstitution: openai-scala-client.conf @ jar:file:.../io/cequence/openai-scala-client_2.13/0.0.1/openai-scala-client_2.13-0.0.1.jar!/openai-scala-client.conf: 4: Could not resolve substitution to a value: ${OPENAI_SCALA_CLIENT_API_KEY}&lt;/code&gt;. What should I do?&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Set the env. variable &lt;code&gt;OPENAI_SCALA_CLIENT_API_KEY&lt;/code&gt;. If you don&#39;t have one register &lt;a href=&#34;https://beta.openai.com/signup&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;It all looks cool. I want to chat with you about your research and development?&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Just shoot us an email at &lt;a href=&#34;mailto:openai-scala-client@cequence.io?subject=Research%20andDevelopment&#34;&gt;openai-scala-client@cequence.io&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License ‚öñÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;This library is available and published as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors üôè&lt;/h2&gt; &#xA;&lt;p&gt;This project is open-source and welcomes any contribution or feedback (&lt;a href=&#34;https://github.com/cequence-io/openai-scala-client/issues&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Development of this library has been supported by &lt;a href=&#34;https://cequence.io&#34;&gt;&lt;img src=&#34;https://cequence.io/favicon-16x16.png&#34;&gt; - Cequence.io&lt;/a&gt; - &lt;code&gt;The future of contracting&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Created and maintained by &lt;a href=&#34;https://peterbanda.net&#34;&gt;Peter Banda&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>scalapro/scalabits</title>
    <updated>2023-02-17T01:47:05Z</updated>
    <id>tag:github.com,2023-02-17:/scalapro/scalabits</id>
    <link href="https://github.com/scalapro/scalabits" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bits of useful scala code to learn from&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;scalabits&lt;/h1&gt; &#xA;&lt;p&gt;Bits of useful scala code to learn from.&lt;/p&gt; &#xA;&lt;p&gt;Ask David or Azad to add you as collaborators.&lt;/p&gt; &#xA;&lt;p&gt;After cloning -&lt;/p&gt; &#xA;&lt;p&gt;10/31/2013 - use sbt 0.13.0. sbteclipse plugin version used not compatible with sbt 0.12.&lt;/p&gt; &#xA;&lt;p&gt;cp branch.sh.template to branch.sh and cutomize it to reflect your environment. . branch.sh [Or equivalent on Windows.]&lt;/p&gt; &#xA;&lt;p&gt;For each project, e.g. circle1:&lt;/p&gt; &#xA;&lt;p&gt;cd circle1 sbt&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;update-classifiers compile test:compile&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note. update-classifiers downloads sources and javadocs&lt;/p&gt; &#xA;&lt;p&gt;sbt eclipse # Creates .project and .classpath for Eclipse.&lt;/p&gt; &#xA;&lt;p&gt;Then -&lt;/p&gt; &#xA;&lt;p&gt;cd .. # The root of all the projects.&lt;/p&gt; &#xA;&lt;p&gt;Bring up Eclipse.&lt;/p&gt; &#xA;&lt;p&gt;Import the projects into Eclipse.&lt;/p&gt; &#xA;&lt;p&gt;Verified working with Eclipse version:&lt;/p&gt; &#xA;&lt;p&gt;Scala IDE build of Eclipse SDK Build id: 3.0.1-vfinal-20130718-1727-Typesafe Eclipse SDK Version: 3.7.2 [included built-in update sites: Scala IDE - http://download.scala-ide.org/sdk/e37/scala210/stable/site The Eclipse Project Updates - http://download.eclipse.org/eclipse/updates/3.7]&lt;/p&gt; &#xA;&lt;p&gt;ScalaTest plugin for Scala IDE 2.9.3.v-3-2 10-201310190806-60feeb3 manually installed&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>escalante/sbt-escalante</title>
    <updated>2023-02-17T01:47:05Z</updated>
    <id>tag:github.com,2023-02-17:/escalante/sbt-escalante</id>
    <link href="https://github.com/escalante/sbt-escalante" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Escalante SBT plugin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sbt-escalante&lt;/h1&gt; &#xA;&lt;p&gt;Escalante SBT plugin&lt;/p&gt; &#xA;&lt;h2&gt;User Guide&lt;/h2&gt; &#xA;&lt;p&gt;First of all, install latest SBT following steps &lt;a href=&#34;http://www.scala-sbt.org/release/docs/Getting-Started/Setup.html&#34;&gt;here&lt;/a&gt;. Escalante requires SBT version &lt;code&gt;0.12.x&lt;/code&gt; or higher.&lt;/p&gt; &#xA;&lt;h3&gt;Set up Escalante SBT plugin in your project&lt;/h3&gt; &#xA;&lt;p&gt;To add Escalante SBT plugin to your build, add the following to &lt;code&gt;project/project/Escalante.scala&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import sbt._&#xA;import Keys._&#xA;&#xA;object Escalante extends Build {&#xA;&#xA;  lazy val pluginProject = Project(&#34;plugins&#34;, file(&#34;.&#34;)).settings(&#xA;    resolvers ++= Seq(&#xA;      &#34;JBoss repository&#34; at &#34;http://repository.jboss.org/nexus/content/groups/public/&#34;,&#xA;      &#34;Project Odd repository&#34; at &#34;http://repository-projectodd.forge.cloudbees.com/upstream/&#34;)&#xA;    ).dependsOn(sbtEscalante)&#xA;&#xA;  lazy val sbtEscalante = uri(&#34;git://github.com/escalante/sbt-escalante.git#0.2.0&#34;)&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, add the following to your root &lt;code&gt;build.sbt&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import sbt._&#xA;import sbt.Keys._&#xA;import io.escalante.sbt.EscalantePlugin._&#xA;import io.escalante.sbt.EscalantePlugin.EscalanteKeys._&#xA;&#xA;escalanteSettings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build a Escalante Lift war&lt;/h3&gt; &#xA;&lt;p&gt;To build a Escalante Lift war, simply run the following from the SBT console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; escalante-lift-war&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this will generate a WAR file called &lt;code&gt;ROOT.war&lt;/code&gt; including compiled classes and resources in &lt;code&gt;src/webapp&lt;/code&gt;. This war file will also include a &lt;code&gt;META-INF/escalante.yml&lt;/code&gt; file which, unless present already in the webapp resource, it will be generated from the build metadata information.&lt;/p&gt; &#xA;&lt;p&gt;The following options are configurable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;liftWarName := &#34;ROOT.war&#34;&lt;/code&gt;: defines the name of the WAR file to generate (default value shown).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;liftVersion&lt;/code&gt;: defines the Lift version of this application, which is primarily used to populate the correct Lift version in the generated &lt;code&gt;META-INF/escalante.yml&lt;/code&gt; descriptor. The default value is extracted from the Lift dependencies defined in the build.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deploy and Run a Escalante Lift war&lt;/h3&gt; &#xA;&lt;p&gt;To run a Escalante Lift application, simply run the following from the SBT console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; escalante-run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This task will first compile classes, call &lt;code&gt;escalante-lift-war&lt;/code&gt; to generate the Escalante Lift war archive, and finally it&#39;ll start an Escalante instance where it will deploy the war archive.&lt;/p&gt; &#xA;&lt;p&gt;The following options are configurable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;escalanteVersion := &#34;0.3.0&#34;&lt;/code&gt; defines the Escalante version in which to run the Lift application (default value shown).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributor Guide&lt;/h2&gt; &#xA;&lt;h3&gt;Getting started as a Contributor&lt;/h3&gt; &#xA;&lt;p&gt;This section focuses on the steps required to build Escalante SBT plugin:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install latest SBT following steps &lt;a href=&#34;http://www.scala-sbt.org/release/docs/Getting-Started/Setup.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute SBT from root of Escalante SBT source code:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[g@:~/sbt-escalante.git]% sbt&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to import source code into IntelliJ, type:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt; gen-idea&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running unit tests&lt;/h3&gt; &#xA;&lt;p&gt;Escalante SBT plugin contains a bunch unit tests which can be run executing the following from the SBT console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; scripted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can run individual unit tests this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; scripted sbt-escalante/run-escalante&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Publishing Plugin Snapshots&lt;/h3&gt; &#xA;&lt;p&gt;To publish a SNAPSHOT of this SBT plugin you need to have credentials to be able to push to JBoss Nexus repository. Once you have these credentials, create a file in &lt;code&gt;.ivy2/.credentials&lt;/code&gt; with these contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;realm=Sonatype Nexus Repository Manager&#xA;host=repository.jboss.org&#xA;user=&amp;lt;YOUR_USER_NAME&amp;gt;&#xA;password=&amp;lt;YOUR_PASSWORD&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once that file is in place, execute the following from the SBT console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Forcing applications to use new Plugin Snapshots&lt;/h3&gt; &#xA;&lt;p&gt;TODO (should just work... &lt;a href=&#34;https://github.com/sbt/sbt/issues/646&#34;&gt;https://github.com/sbt/sbt/issues/646&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
</feed>