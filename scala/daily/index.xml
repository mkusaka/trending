<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-25T01:36:22Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scalacenter/bloop</title>
    <updated>2022-12-25T01:36:22Z</updated>
    <id>tag:github.com,2022-12-25:/scalacenter/bloop</id>
    <link href="https://github.com/scalacenter/bloop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bloop is a build server and CLI tool to compile, test and run Scala fast from any editor or build tool.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/scalacenter/bloop/main/website/static/img/impure-logo-bloop.png&#34; alt=&#34;logo&#34; width=&#34;20%&#34; height=&#34;20%&#34;&gt; &#xA; &lt;h1&gt;Compile, test and run Scala fast&lt;/h1&gt; &#xA; &lt;img alt=&#34;GitHub All Releases&#34; src=&#34;https://img.shields.io/github/downloads/scalacenter/bloop/total.svg?color=orange&amp;amp;style=flat-square&#34;&gt; &#xA; &lt;a href=&#34;https://gitter.im/scalacenter/bloop&#34;&gt; &lt;img alt=&#34;Gitter&#34; src=&#34;https://img.shields.io/gitter/room/scalacenter/bloop.svg?color=red&amp;amp;logo=gitter&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &#xA; &lt;img alt=&#34;GitHub CI&#34; src=&#34;https://github.com/scalacenter/bloop/workflows/Continuous%20Integration/badge.svg?style=flat-square&#34;&gt; &#xA; &lt;img alt=&#34;GitHub release&#34; src=&#34;https://img.shields.io/github/release/scalacenter/bloop.svg?color=green&amp;amp;logo=github&#34;&gt; &#xA; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/scalacenter/bloop.svg?color=blue&amp;amp;style=flat-square&#34;&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;br&gt; &#xA;  &lt;p&gt;Bloop is a build server for the &lt;a href=&#34;https://scala-lang.org&#34;&gt;Scala programming language&lt;/a&gt;. Bloop aspires to provide the &lt;strong&gt;best&lt;/strong&gt; out-of-the-box experience to Scala developers and a solid platform for build tool authors to consume the Scala toolchain; to compile, test or run Scala code.&lt;/p&gt; &#xA;  &lt;p&gt;Bloop integrates with editors, build tools and other Scala tooling project to support many different workflows and allow bespoke integrations.&lt;/p&gt; &#xA;  &lt;br&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Pointers üëá&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;üíª Install bloop in your computer or CI server by following &lt;a href=&#34;https://scalacenter.github.io/bloop/setup&#34;&gt;our &lt;strong&gt;Installation page&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;üìö Learn more about bloop and how to use it from your favorite build tool and editor in &lt;a href=&#34;https://scalacenter.github.io/bloop&#34;&gt;our website&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;‚öôÔ∏è Tool author? Integrate your tool with bloop by reading the &lt;a href=&#34;https://scalacenter.github.io/bloop/docs/integration&#34;&gt;Integration Guide&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;‚ùìQuestions? Unsure if bloop is useful for your use case? Ask right away in our &lt;a href=&#34;https://discord.gg/KWF9zMhJWS&#34;&gt;Discord channel&lt;/a&gt;!&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA; &lt;/div&gt;&#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>UnBCIC-TP2/Oberon-Scala</title>
    <updated>2022-12-25T01:36:22Z</updated>
    <id>tag:github.com,2022-12-25:/UnBCIC-TP2/Oberon-Scala</id>
    <link href="https://github.com/UnBCIC-TP2/Oberon-Scala" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An implementation of the Oberon language using Scala&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Oberon Language&lt;/h2&gt; &#xA;&lt;p&gt;This is an implementation of the Oberon language in Scala.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling and Testing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compiling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sbt compile&#xA;&#xA;[...]&#xA;&#xA;[info] Loading global plugins from /Users/rbonifacio/.sbt/1.0/plugins&#xA;[info] Loading settings for project oberon-scala-build from assembly.sbt,sbt-antlr4.sbt,plugins.sbt ...&#xA;[info] Loading project definition from /Users/rbonifacio/Documents/workspace-scala/Oberon-Scala/project&#xA;[info] Loading settings for project oberon-scala from build.sbt ...&#xA;[info] Set current project to oberon-lang (in build file:/Users/rbonifacio/Documents/workspace-scala/Oberon-Scala/)&#xA;[info] Executing in batch mode. For better performance use sbt&#39;s shell&#xA;[success] Total time: 1 s, completed 25/08/2021 14:34:33&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Executing the test cases&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sbt test&#xA;&#xA;[...]&#xA;&#xA;[info] Run completed in 2 seconds, 286 milliseconds.&#xA;[info] Total number of tests run: 246&#xA;[info] Suites: completed 14, aborted 0&#xA;[info] Tests: succeeded 246, failed 0, canceled 0, ignored 62, pending 0&#xA;[info] All tests passed.&#xA;[success] Total time: 4 s, completed 25/08/2021 14:36:21&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also try a combination of the above commands, for instance &lt;code&gt;sbt compile test&lt;/code&gt;. It is also possible to run &lt;code&gt;sbt&lt;/code&gt; in a &#34;shell&#34; mode (this might save compilation and building time). To start the sbt shell model, just type &lt;code&gt;sbt&lt;/code&gt; in a terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sbt&#xA;[info] Loading global plugins from /Users/rbonifacio/.sbt/1.0/plugins&#xA;[info] Loading settings for project oberon-scala-build from assembly.sbt,sbt-antlr4.sbt,plugins.sbt ...&#xA;[info] Loading project definition from /Users/rbonifacio/Documents/workspace-scala/Oberon-Scala/project&#xA;[info] Loading settings for project oberon-scala from build.sbt ...&#xA;[info] Set current project to oberon-lang (in build file:/Users/rbonifacio/Documents/workspace-scala/Oberon-Scala/)&#xA;[info] sbt server started at local:///Users/rbonifacio/.sbt/1.0/server/5b1186f4048efb7df7ec/sock&#xA;&#xA;sbt:oberon-lang&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now execute &lt;code&gt;sbt&lt;/code&gt; commands directly. See some examples bellow.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sbt:oberon-lang&amp;gt; compile&#xA;&#xA;[success] Total time: 1 s, completed 25/08/2021 14:44:10&#xA;&#xA;sbt:oberon-lang&amp;gt; test&#xA;&#xA;[...]&#xA;&#xA;[info] Run completed in 1 second, 604 milliseconds.&#xA;[info] Total number of tests run: 246&#xA;[info] Suites: completed 14, aborted 0&#xA;[info] Tests: succeeded 246, failed 0, canceled 0, ignored 62, pending 0&#xA;[info] All tests passed.&#xA;[success] Total time: 3 s, completed 25/08/2021 14:44:41&#xA;&#xA;sbt:oberon-lang&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building an executable JAR file&lt;/h3&gt; &#xA;&lt;p&gt;In order to generate an executable JAR file, you can run the &lt;code&gt;sbt assembly&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sbt assembly&#xA;&#xA;[...]&#xA;[info] Run completed in 1 second, 781 milliseconds.&#xA;[info] Total number of tests run: 246&#xA;[info] Suites: completed 14, aborted 0&#xA;[info] Tests: succeeded 246, failed 0, canceled 0, ignored 62, pending 0&#xA;[info] All tests passed.&#xA;&#xA;[info] Assembly up to date: .../target/scala-2.13/oberon-lang-assembly-0.1.1.jar&#xA;[success] Total time: 5 s, completed 25/08/2021 14:45:56&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command generates the &lt;code&gt;oberon-lang-assembly-0.1.1.jar&lt;/code&gt; artifact into the &lt;code&gt;target/scala-2.13/&lt;/code&gt; folder. You can execute thisartifact using the following command, which prints some usage help of our implementation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd target/scala-2.13&#xA;$ java -jar oberon-lang-assembly-0.1.1.jar --help&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>