<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-13T01:53:35Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bitcoin-s/bitcoin-s</title>
    <updated>2022-08-13T01:53:35Z</updated>
    <id>tag:github.com,2022-08-13:/bitcoin-s/bitcoin-s</id>
    <link href="https://github.com/bitcoin-s/bitcoin-s" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bitcoin Implementation in Scala&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bitcoin-s/bitcoin-s/master/website/static/img/bitcoin-s-dark-logo.png&#34; alt=&#34;Bitcoin-S logo&#34;&gt; &lt;a href=&#34;https://github.com/bitcoin-s/bitcoin-s/actions&#34;&gt;&lt;img src=&#34;https://github.com/bitcoin-s/bitcoin-s/workflows/Release/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/bitcoin-s/bitcoin-s?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/bitcoin-s/bitcoin-s/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mvnrepository.com/artifact/org.bitcoin-s&#34;&gt;![Maven Central](https://img.shields.io/badge/Maven%20Central-1.9.2 -brightgreen.svg)&lt;/a&gt; &lt;a href=&#34;https://gitter.im/bitcoin-s-core&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitterHQ/gitter.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feature-rich toolkit for making Bitcoin and Lightning applications on the JVM.&lt;/p&gt; &#xA;&lt;p&gt;For a complete guide on how to get started with Bitcoin-S, see our website at &lt;a href=&#34;https://bitcoin-s.org&#34;&gt;Bitcoin-S.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-s/bitcoin-s/master/#running-bitcoin-s&#34;&gt;Running bitcoin-s&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-s/bitcoin-s/master/#getting-started--non-developers-&#34;&gt;Getting started (non-developers)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-s/bitcoin-s/master/#adding-bitcoin-s-to-your-library&#34;&gt;Adding bitcoin-s to your library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-s/bitcoin-s/master/#docker-images&#34;&gt;Docker images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-s/bitcoin-s/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-s/bitcoin-s/master/#good-first-issues&#34;&gt;Good first issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-s/bitcoin-s/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running bitcoin-s&lt;/h3&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;In this repo, you can just run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;APP_PASSWORD=topsecret docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will spin up a docker environment that starts syncing the backend and will allow you to visit the web frontend of the wallet at &lt;code&gt;localhost:3002&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or you can run the binaries natively, here are the instructions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bitcoin-s/bitcoin-s-ts/tree/master/wallet-server-ui#walletserverui&#34;&gt;Web frontend&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Getting setup (developers)&lt;/h3&gt; &#xA;&lt;p&gt;For a complete guide on how to get setup with bitcoin-s, see our &lt;a href=&#34;https://bitcoin-s.org/docs/getting-setup&#34;&gt;Getting setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This link is intended for setting up development of bitcoin-s. If you want to just install bitcoin-s rather than develop, see &lt;strong&gt;Getting started&lt;/strong&gt; above.&lt;/p&gt; &#xA;&lt;h3&gt;Adding bitcoin-s to your library&lt;/h3&gt; &#xA;&lt;p&gt;The latest release of bitcoin-s is &lt;code&gt;1.9.2 &lt;/code&gt;, here is how you can use the dependencies in your projects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libraryDependencies += &#34;org.bitcoin-s&#34; % &#34;bitcoin-s-secp256k1jni&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-core&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-crypto&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-chain&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-dlc-oracle&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-oracle-explorer-client&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-app-commons&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-db-commons&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-fee-provider&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-bitcoind-rpc&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-eclair-rpc&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-lnd-rpc&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-key-manager&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-node&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-dlc-node&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-wallet&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-dlc-wallet&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-testkit-core&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-testkit&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-zmq&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-tor&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;libraryDependencies += &#34;org.bitcoin-s&#34; %% &#34;bitcoin-s-cli&#34; % &#34;1.9.2&#xA;&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker images&lt;/h4&gt; &#xA;&lt;p&gt;We publish docker images to docker hub on every PR merge and tag on github. You can obtain the images for both the app server and oracle server on these docker hub repos&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/bitcoinscala/bitcoin-s-server/tags?page=1&amp;amp;ordering=last_updated&#34;&gt;bitcoin-s docker hub repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/bitcoinscala/bitcoin-s-oracle-server/tags?page=1&amp;amp;ordering=last_updated&#34;&gt;oracle-server docker hub repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Bitcoin-S is an open source project where anyone is welcome to contribute. All contributions are encouraged and appreciated, whether that is code, testing, documentation or something else entirely.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://bitcoin-s.org/docs/contributing&#34;&gt;here&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Good first issues&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bitcoin-s/bitcoin-s/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;Here&lt;/a&gt; is a list of good first issues that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with the bitcoin-s contribution process.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Bitcoin-s is MIT licensed, as found in the &lt;a href=&#34;https://raw.githubusercontent.com/bitcoin-s/bitcoin-s/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>coursier/coursier</title>
    <updated>2022-08-13T01:53:35Z</updated>
    <id>tag:github.com,2022-08-13:/coursier/coursier</id>
    <link href="https://github.com/coursier/coursier" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pure Scala Artifact Fetching&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Coursier&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/coursier/coursier/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/coursier/coursier/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/coursier/coursier?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/coursier/coursier&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/io.get-coursier/coursier_2.12&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.get-coursier/coursier_2.12.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc-badge.appspot.com/io.get-coursier/coursier-core_2.12&#34;&gt;&lt;img src=&#34;https://javadoc-badge.appspot.com/io.get-coursier/coursier-core_2.12.svg?label=scaladoc&#34; alt=&#34;Scaladoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://get-coursier.io&#34;&gt;website&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;The coursier project welcomes contributions from anybody wishing to participate. All code or documentation that is provided must be licensed with the same license that coursier is licensed with (Apache 2.0, see LICENSE).&lt;/p&gt; &#xA;&lt;p&gt;People are expected to follow the &lt;a href=&#34;https://www.scala-lang.org/conduct&#34;&gt;Scala Code of Conduct&lt;/a&gt; when discussing coursier on GitHub, Gitter channel, or other venues.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to open an issue if you notice a bug, have an idea for a feature, or have a question about the code. Pull requests are also gladly accepted.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;img src=&#34;https://scala.epfl.ch/resources/img/scala-center-swirl.png&#34; width=&#34;40px&#34;&gt; &#xA;&lt;p&gt;Large parts of the developments in coursier since Sep. 2018 have been funded by the &lt;a href=&#34;https://scala.epfl.ch&#34;&gt;Scala Center&lt;/a&gt;, through the employment or contracting of myself (Alexandre Archambault).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>celonis/kafka-ems-connector</title>
    <updated>2022-08-13T01:53:35Z</updated>
    <id>tag:github.com,2022-08-13:/celonis/kafka-ems-connector</id>
    <link href="https://github.com/celonis/kafka-ems-connector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Apache Kafka sink connector for Celonis EMS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Celonis EMS Kafka connector&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/celonis/kafka-ems-connector/main/images/apps_kafka_ems.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;A Kafka Connect sink connector allowing data stored in Apache Kafka to be uploaded to Celonis Execution Management System (EMS) for process mining and execution automation.&lt;/p&gt; &#xA;&lt;h2&gt;Full Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/celonis/kafka-ems-connector/wiki&#34;&gt;Wiki&lt;/a&gt; for full documentation, examples, operational details and other information.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Apache Kafka at least 2.3 version and a Kafka Connect cluster.&lt;/p&gt; &#xA;&lt;h2&gt;Compile, Test and Package&lt;/h2&gt; &#xA;&lt;p&gt;The project uses sbt builds for scala 2.13. Starting with Kafka 2.6 there is one build supporting 2.13&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sbt compile&#xA;sbt test&#xA;sbt assembly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Last command builds the connector artifact as a single jar. The file can be found:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;--connector&#xA; ├ target&#xA;   ├scala-2.13&#xA;      └ kafka-ems-sink-assembly-1.1-SNAPSHOT.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the connector ZIP file. If you&#39;re running Kafka version 2.5 or lower, use the 2.12 archive otherwise use the 2.13 one.&lt;/li&gt; &#xA; &lt;li&gt;Extract the ZIP file contents and copy the contents to the desired location. For example, you can create a directory named &#xA;  &lt;path-to-kafka-installation&gt;&#xA;   /share/kafka/plugins then copy the connector plugin contents.&#xA;  &lt;/path-to-kafka-installation&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add this to the plugin path in your Connect worker properties file. Kafka Connect finds the plugins using its plugin path. A plugin path is a comma-separated list of directories defined in the Kafka Connect worker&#39;s configuration. This might already be set up and therefore there is nothing to do. For example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;plugin.path=/usr/local/share/kafka/plugins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start the Kafka Connect workers with that configuration. Connect will discover all connectors defined within those plugins.&lt;/li&gt; &#xA; &lt;li&gt;Repeat these steps for each machine where Connect is running. Each connector must be available on each worker.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MSK Connect&lt;/h3&gt; &#xA;&lt;p&gt;To create the connector follow the steps provided &lt;a href=&#34;https://docs.aws.amazon.com/msk/latest/developerguide/msk-connect-connectors.html&#34;&gt;here&lt;/a&gt;. The steps involved will require installing a custom connector and for that follow this &lt;a href=&#34;https://docs.aws.amazon.com/msk/latest/developerguide/msk-connect-plugins.html&#34;&gt;link&lt;/a&gt; and use the connector release jar&lt;/p&gt; &#xA;&lt;h3&gt;Azure Event Hub&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re running Event Hub, you can leverage Kafka Connect and the EMS Sink plugin to load data into the EMS platform. The instructions to enable Kafka Connect for Event Hub can be found &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-kafka-connect-tutorial&#34;&gt;here&lt;/a&gt;. Once the installation is done, follow the manual steps to enable the connector before creating an instance of it.&lt;/p&gt; &#xA;&lt;h2&gt;Sample connector configuration&lt;/h2&gt; &#xA;&lt;p&gt;Here is a sample configuration for the connector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;name=kafka2ems&#xA;connector.class=com.celonis.kafka.connect.ems.sink.EmsSinkConnector&#xA;tasks.max=1&#xA;key.converter=org.apache.kafka.connect.storage.StringConverter&#xA;value.converter=org.apache.kafka.connect.json.JsonConverter&#xA;topics=payments &#xA;connect.ems.endpoint=https://***.***.celonis.cloud/continuous-batch-processing/api/v1/***/items&#xA;connect.ems.target.table=payments&#xA;connect.ems.connection.id=****&#xA;connect.ems.commit.size.bytes=10000000&#xA;connect.ems.commit.records=100000&#xA;connect.ems.commit.interval.ms=30000&#xA;connect.ems.tmp.dir=/tmp/ems&#xA;connect.ems.authorization.key=&#34;AppKey ***&#34;&#xA;connect.ems.error.policy=RETRY&#xA;connect.ems.max.retries=20&#xA;connect.ems.retry.interval=60000&#xA;connect.ems.parquet.write.flush.records=1000&#xA;connect.ems.debug.keep.parquet.files=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full list of configuration keys can be found in the wiki.&lt;/p&gt; &#xA;&lt;h2&gt;Release Process&lt;/h2&gt; &#xA;&lt;p&gt;The release process of the connector is automated through &lt;a href=&#34;https://raw.githubusercontent.com/celonis/kafka-ems-connector/main/.github/workflows/build-release.yml&#34;&gt;github actions&lt;/a&gt; which will be triggered after creating a new tag.&lt;/p&gt; &#xA;&lt;p&gt;The process is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git tag -a vx.y.z -m &#34;release description&#34;&#xA;git push origin vx.y.z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The release will be automatically generated after the action has finished successfully.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs and Feedback&lt;/h2&gt; &#xA;&lt;p&gt;For bugs, questions and discussions please use the GitHub Issues.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is open source software licensed under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>