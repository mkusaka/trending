<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-15T01:53:44Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>http4s/http4s</title>
    <updated>2022-06-15T01:53:44Z</updated>
    <id>tag:github.com,2022-06-15:/http4s/http4s</id>
    <link href="https://github.com/http4s/http4s" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal, idiomatic Scala interface for HTTP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Http4s &lt;a href=&#34;https://github.com/http4s/http4s/actions?query=branch%3Aseries%2F0.23+workflow%3A%22Continuous+Integration%22&#34;&gt;&lt;img src=&#34;https://github.com/http4s/http4s/workflows/Continuous%20Integration/badge.svg?branch=series/0.23&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/maven-central/v/org.http4s/http4s-core_2.13?versionPrefix=0.23&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.http4s/http4s-core_2.13?versionPrefix=0.23&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://typelevel.org/projects/#http4s&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/typelevel-library-green.svg?sanitize=true&#34; alt=&#34;Typelevel library&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://typelevel.org/cats/&#34;&gt;&lt;img src=&#34;https://typelevel.org/cats/img/cats-badge.svg?sanitize=true&#34; height=&#34;40px&#34; align=&#34;right&#34; alt=&#34;Cats friendly&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Http4s is a minimal, idiomatic Scala interface for HTTP services. Http4s is Scala&#39;s answer to Ruby&#39;s Rack, Python&#39;s WSGI, Haskell&#39;s WAI, and Java&#39;s Servlets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val http = HttpRoutes.of {&#xA;  case GET -&amp;gt; Root / &#34;hello&#34; =&amp;gt;&#xA;    Ok(&#34;Hello, better world.&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more at &lt;a href=&#34;https://http4s.org/&#34;&gt;http4s.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you run into any difficulties please enable partial unification in your &lt;code&gt;build.sbt&lt;/code&gt; (not needed for Scala 2.13 and beyond, because Scala 2.13.0+ has partial unification switched on by default)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scalacOptions ++= Seq(&#34;-Ypartial-unification&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Running the &lt;strong&gt;blaze&lt;/strong&gt; backend requires a modern, supported version of the JVM to build and run, as it relies on server APIs unavailable before JDK8u252. Any JDK newer than JDK8u252, including 9+ is supported.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;http4s is proud to be a &lt;a href=&#34;https://typelevel.org/&#34;&gt;Typelevel&lt;/a&gt; project. We are committed to providing a friendly, safe and welcoming environment for all, and ask that the community adhere to the &lt;a href=&#34;https://http4s.org/code-of-conduct/&#34;&gt;Scala Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This software is licensed under the Apache 2 license, quoted below.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Copyright 2013-2021 http4s [&lt;a href=&#34;https://http4s.org/&#34;&gt;https://http4s.org&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.yourkit.com/&#34;&gt;&lt;img src=&#34;https://www.yourkit.com/images/yklogo.png&#34; alt=&#34;YourKit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://www.yourkit.com/&#34;&gt;YourKit&lt;/a&gt; for supporting this project&#39;s ongoing performance tuning efforts with licenses to their excellent product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>broadinstitute/sam</title>
    <updated>2022-06-15T01:53:44Z</updated>
    <id>tag:github.com,2022-06-15:/broadinstitute/sam</id>
    <link href="https://github.com/broadinstitute/sam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;workbench identity and access management&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sam - Identity and Access Management (IAM)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://static1.squarespace.com/static/52f51a96e4b0ec7646cd474a/5328b57de4b067106916ef7f/56b3b2167da24f50175975bc/1504623030943/geh502.jpg?format=500w&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;In a nutshell&lt;/h2&gt; &#xA;&lt;p&gt;The crux of IAM in Sam is a policy. A policy says &lt;strong&gt;who&lt;/strong&gt; can &lt;strong&gt;do what&lt;/strong&gt; to a &lt;strong&gt;thing&lt;/strong&gt;. More technically the who is called a &lt;strong&gt;subject&lt;/strong&gt; and can be a user or a group of users, the do what is called an &lt;strong&gt;action&lt;/strong&gt; such as read or update, and the thing is called a &lt;strong&gt;resource&lt;/strong&gt; such as a workspace or project. Resources have types which specify what actions are available for its resources, roles (which are collections of actions) and which role is the &#34;owner&#34; role. The &#34;owner&#34; role should have the appropriate actions to administer a resource. When a resource is created a policy with the owner role is automatically created and the creator is added.&lt;/p&gt; &#xA;&lt;h2&gt;Terms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Subject - an authenticated user or group&lt;/li&gt; &#xA; &lt;li&gt;Resource - something to which access is controlled&lt;/li&gt; &#xA; &lt;li&gt;Action - may be performed on a resource - meant to be as granular as possible&lt;/li&gt; &#xA; &lt;li&gt;Policy - represents the actions a subject may perform on a resource&lt;/li&gt; &#xA; &lt;li&gt;Role - a collection of actions - meant to aggregate actions into a more meaningful, higher level concept&lt;/li&gt; &#xA; &lt;li&gt;Group - a group of subjects (this can include groups)&lt;/li&gt; &#xA; &lt;li&gt;Resource type - defines a class of resources. Each resource has a type which defines &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Available actions&lt;/li&gt; &#xA;   &lt;li&gt;Available roles and actions for each role&lt;/li&gt; &#xA;   &lt;li&gt;Of the available roles which is the “owner” role - this is used when creating a resource to give the creator ownership access&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Guiding Principles&lt;/h3&gt; &#xA;&lt;p&gt;There are no special/super users in this system. All api calls authenticate as subjects with access rights determined by policies in the same way. In other words, this system should use its own policy mechanisms internally for any authorization needs. (Note that this does leave the problem of bootstrapping, i.e. how is the first user created, which can be achieved by scripts outside the system with direct data store level access.) This system can be publicly facing. This does not mean that it will be in all cases but it should be designed with this in mind. Authentication is handled at a higher level than this application, e.g. via OAuth and an OIDC proxy.&lt;/p&gt; &#xA;&lt;h3&gt;Evaluation&lt;/h3&gt; &#xA;&lt;p&gt;Evaluation is the act of determining what a user may access.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Given a user, resource and action emit a yes or no response, i.e. can the user perform the action on the resource?&lt;/li&gt; &#xA; &lt;li&gt;Given a user and a resource type, list all resources and associated roles the user has (directly or indirectly).&lt;/li&gt; &#xA; &lt;li&gt;Given a user and resource, list all the actions the user may perform on that resource&lt;/li&gt; &#xA; &lt;li&gt;Given a user and resource, list all the user’s roles on that resource&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Of these 1 and 2 are the most important from a performance standpoint. Expect 1 to be called for almost every api call in a system. Expect 2 to be called from UI list pages where users generally want a snappy response.&lt;/p&gt; &#xA;&lt;h3&gt;Resource and Policy Management&lt;/h3&gt; &#xA;&lt;p&gt;A resource may be part of a hierarchy of resources. A parent may be set on a resource. To do so, users must have the set_parent action on the resource and the add_child action on the would be parent. Ancestor resources in the hierarchy control permissions on all descendants.&lt;/p&gt; &#xA;&lt;p&gt;A policy is specific to a resource and a resource may have multiple policies. Each policy consists of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A set of subjects&lt;/li&gt; &#xA; &lt;li&gt;A set of actions directly applicable to the resource&lt;/li&gt; &#xA; &lt;li&gt;A set of roles directly applicable to the resource&lt;/li&gt; &#xA; &lt;li&gt;A set of descendant permissions - roles and actions applicable to descendant resources All of the subjects may perform all of the actions/roles in the policy. A policy may also be marked as public effectively meaning all users are members. Each policy has a name that is unique within a resource. Access to actions through policies is additive (i.e. the actions available to a user on a resource is an accumulation of all policies the user is a member of for that resource).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There must be functions to create, delete and manage policies for resources. There must be access control around deleting resources and managing policies. There must be some built-in actions to do so (delete, read-policies, alter-policies).&lt;/p&gt; &#xA;&lt;p&gt;There must be functions to create and delete resources. When a resource is created the caller should be the “owner.” The “owner” role generally will include delete action and actions to control sharing but need not always (e.g. if a resource may never be deleted then an owner would not have delete permissions). The actions that make up the “owner” role are defined by the resource type.&lt;/p&gt; &#xA;&lt;p&gt;Resource types define the set of available actions for all resources of that type. It also defines a set of roles and their associated actions. Roles are useful because it can be cumbersome to deal with granular actions and as a point of extensibility (when new actions are added to resource types, they can be added to roles as well, effectively adding the action to all resources with that role). It is not yet necessary to provide apis to create and maintain resource types, this can be achieved through configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Public Policies&lt;/h3&gt; &#xA;&lt;p&gt;There are some cases where it is desirable to grant actions or roles to all authenticated users. For example, granting read-only access to public workspaces. In this case a policy can be created that has the appropriate actions or roles and set to public. Resources with public policies show up when listing resources for a user. For this reason it is not always desirable to allow everyone to make public policies. Again, the example is public workspaces. Public workspaces show up for everyone and should be curated.&lt;/p&gt; &#xA;&lt;p&gt;To change a policy&#39;s public status the caller must be able to share the policy (either via &lt;code&gt;alter_policies&lt;/code&gt; and &lt;code&gt;share_policy::{policy_name}&lt;/code&gt; actions) &lt;em&gt;and&lt;/em&gt; must have the &lt;code&gt;set_public&lt;/code&gt; action on the resource &lt;code&gt;resource_type_admin/{resource type name}&lt;/code&gt;. &lt;code&gt;resource_type_admin&lt;/code&gt; is an internally created resource type. &lt;code&gt;{resource type name}&lt;/code&gt; is for the resource containing the policy. Note that every resource type in sam has a resource of the same name of type &lt;code&gt;resource_type_admin&lt;/code&gt; which is automatically created. When these resources are created they do not have owners, permissions must be granted via direct postgres changes.&lt;/p&gt; &#xA;&lt;h3&gt;User and Group Management&lt;/h3&gt; &#xA;&lt;p&gt;User - Create, enable, disable, get status. Disabled users should be rejected from any api calls. Enabling a user should reinstate any prior access.&lt;/p&gt; &#xA;&lt;p&gt;Group - Create, delete, read, list, add/remove users and groups. Nested groups are supported. Groups are implemented as a resource type with admin and member roles and policies. There is an additional &lt;code&gt;admin_notifier&lt;/code&gt; role and policy that is public by default which allows any authenticate user to request access to a group. Group admins can set public to false if desired.&lt;/p&gt; &#xA;&lt;h3&gt;Built In Actions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;read_policies - may read all policies of a resource&lt;/li&gt; &#xA; &lt;li&gt;alter_policies - may change any policy of a resource&lt;/li&gt; &#xA; &lt;li&gt;delete - may delete a resource&lt;/li&gt; &#xA; &lt;li&gt;share_policy::{policy name} - may add/remove members to/from specified policy of a resource&lt;/li&gt; &#xA; &lt;li&gt;read_policy::{policy name} - may read specified policy of a resource&lt;/li&gt; &#xA; &lt;li&gt;get_parent - may get a resource&#39;s parent&lt;/li&gt; &#xA; &lt;li&gt;set_parent - may set a resource&#39;s parent&lt;/li&gt; &#xA; &lt;li&gt;add_child - may add a child to a resource&lt;/li&gt; &#xA; &lt;li&gt;remove_child - may remove a child from a resource&lt;/li&gt; &#xA; &lt;li&gt;list_children - may list all of a resource&#39;s children&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UML Model&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/model.png&#34; alt=&#34;Sam Model&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/#uml-class-diagram-relationship&#34;&gt;UML Key&lt;/a&gt; for reference. Note that in this model Group is a Subject. This allows it to be used interchangeably with Users within policies.&lt;/p&gt; &#xA;&lt;h3&gt;ERD&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/sam_erd.png&#34; alt=&#34;Sam ERD&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Sam schema has 3 main sections: users and groups in yellow, resources and policies in green, resource type configuration in purple. Both groups and resources have a hierarchical model (groups can contain groups and resources can have parents). To solve read-query performance issues these hierarchies are also stored in a flattened representation: &lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/src/main/scala/org/broadinstitute/dsde/workbench/sam/dataAccess/PostgresGroupDAO.scala&#34;&gt;sam_group_member_flat&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/src/main/scala/org/broadinstitute/dsde/workbench/sam/dataAccess/EffectivePolicyMutationStatements.scala&#34;&gt;sam_effective_*&lt;/a&gt; tables.&lt;/p&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://petstore.swagger.io/?url=https://raw.githubusercontent.com/broadinstitute/sam/develop/src/main/resources/swagger/api-docs.yaml&#34;&gt;Sam APIs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Java Client Library&lt;/h4&gt; &#xA;&lt;p&gt;for sbt:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;libraryDependencies += &#34;org.broadinstitute.dsde.workbench&#34; %% &#34;sam-client&#34; % &#34;0.1-&amp;lt;git hash&amp;gt;&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;where &lt;code&gt;&amp;lt;git hash&amp;gt;&lt;/code&gt; is the first 7 characters of the commit hash of the HEAD of develop&lt;/p&gt; &#xA;&lt;p&gt;Example Scala Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import org.broadinstitute.dsde.workbench.client.sam.api.ResourcesApi&#xA;import org.broadinstitute.dsde.workbench.client.sam.ApiClient&#xA;&#xA;class SamClient(samBasePath: String) {&#xA;  private def samResourcesApi(accessToken: String): ResourcesApi = {&#xA;    val apiClient = new ApiClient()&#xA;    apiClient.setAccessToken(accessToken)&#xA;    apiClient.setBasePath(samBasePath)&#xA;    new ResourcesApi(apiClient)&#xA;  }&#xA;&#xA;  def checkResourceAction(token: String, samResourceType: String, samResource: String, action: String): Boolean = {&#xA;    val samResourceApi = samResourcesApi(token)&#xA;    samResourceApi.resourceAction(samResourceType, samResource, action)&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cloud Integrations&lt;/h2&gt; &#xA;&lt;h3&gt;Google&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Groups can be mirrored to google groups.&lt;/li&gt; &#xA; &lt;li&gt;Proxy groups - each user with access to google resources should have a google group known as a proxy. The proxy is 1-to-1 with the user and the user is member of the proxy. The proxy group should be used in place of the user in Google IAM policies and Google groups. Users should not be added directly. This allows easy enable and disable functionality by adding/removing users to their proxy groups. It also allows creation of service accounts that can act as the user (see pet service accounts below).&lt;/li&gt; &#xA; &lt;li&gt;Pet service accounts - Google Compute Engine requires a service account to run compute. Service account credentials are the default credentials on any GCE instance. This is the best way at this time to provide credentials to any processes running on a GCE instance. Pet service accounts correspond with 1 and only 1 user, are added to the user’s proxy group and can call system apis as the user. In this way a pet service account can act as the user in all respects that can be controlled by the system (resources outside control of the system need to be manually shared by the user with the proxy group).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Proposed model for accessing external google resources&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/data_access.png&#34; alt=&#34;Data Access&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that Sam does not actually launch workflows create VMs but appears to in this diagram in order to simplify interactions. The key concept is the user of service accounts.&lt;/p&gt; &#xA;&lt;h4&gt;Google integration requires&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a GSuite domain&lt;/li&gt; &#xA; &lt;li&gt;a project with a service account for the sam application&lt;/li&gt; &#xA; &lt;li&gt;service account with access to &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;create PubSub topics and subscriptions&lt;/li&gt; &#xA;   &lt;li&gt;admin google groups in GSuite domain&lt;/li&gt; &#xA;   &lt;li&gt;create service accounts and keys in desired projects (usually easiest to grant this at the org level)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Required Tooling:&lt;/h3&gt; &#xA;&lt;h4&gt;Java:&lt;/h4&gt; &#xA;&lt;p&gt;Make sure you have Java JDK 11 installed. Instructions for our recommended package can be found &lt;a href=&#34;https://adoptopenjdk.net/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Scala:&lt;/h4&gt; &#xA;&lt;p&gt;Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-$xslt&#34;&gt;brew install scala&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To build&lt;/h3&gt; &#xA;&lt;p&gt;Make sure git secrets is installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-$xslt&#34;&gt;brew install git-secrets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run minnie-kenny.sh with -f first time after git-clone to ensure git-secrets is run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./minnie-kenny.sh -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build jar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./docker/build.sh jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build jar and docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./docker/build.sh jar -d build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To run unit tests&lt;/h3&gt; &#xA;&lt;h4&gt;Set up your environment&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;#Spin up a local OpenDJ:&#xA;sh docker/run-opendj.sh start&#xA;#Spin up a local postgres:&#xA;sh docker/run-postgres.sh start&#xA;#Make sure your `SBT_OPTS` are set:&#xA;export SBT_OPTS=&#34;-Dpostgres.host=localhost -Dpostgres.port=5432 -Ddirectory.url=ldap://localhost:3389 -Ddirectory.password=testtesttest&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: if you run Postgres in another way (i.e. you&#39;re running the Postgres Mac app), the unit tests will fail because they will look at that installation instead of the Docker container you&#39;ve spun up. You can either specify a port when starting the Postgres Docker container or quit your Postgres client.&lt;/p&gt; &#xA;&lt;h4&gt;Run tests in sbt&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run tests in intellij&lt;/h4&gt; &#xA;&lt;p&gt;Set up ScalaTest Template:&lt;/p&gt; &#xA;&lt;p&gt;You need to set some default VM parameters for ScalaTest run configurations. In IntelliJ, go to &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Edit Configurations...&lt;/code&gt;, select &lt;code&gt;ScalaTest&lt;/code&gt; under &lt;code&gt;🔧Templates&lt;/code&gt;, and add these VM parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-Dpostgres.host=localhost -Dpostgres.port=5432 -Ddirectory.url=ldap://localhost:3389 -Ddirectory.password=testtesttest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can run unit tests within IntelliJ by clicking the green play button on a unit test.&lt;/p&gt; &#xA;&lt;h5&gt;Connecting to your local Postgres&lt;/h5&gt; &#xA;&lt;p&gt;In order to connect to your local postgres, open up the database tab, select the plus button at the top, data source, and click postgres.&lt;/p&gt; &#xA;&lt;p&gt;From there, set the:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Host: &lt;code&gt;localhost&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Port: &lt;code&gt;5432&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;User: Check &lt;code&gt;src/test/resources/reference.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: Check &lt;code&gt;src/test/resources/reference.conf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Cleaning up after tests&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;#Stop your local opendj:&#xA;sh docker/run-opendj.sh stop&#xA;#Stop your local postgres:&#xA;sh docker/run-postgres.sh stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debugging ScalikeJDBC&lt;/h4&gt; &#xA;&lt;p&gt;To view the SQL commands generated by ScalikeJDBC, set &lt;code&gt;scalikejdbc.global.loggingSQLAndTime.enabled&lt;/code&gt; in &lt;code&gt;src/test/resources/reference.conf&lt;/code&gt; to true&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/automation/README.md&#34;&gt;To run integration tests&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;To run Sam locally&lt;/h3&gt; &#xA;&lt;h4&gt;Local setup&lt;/h4&gt; &#xA;&lt;p&gt;Set up configs using the &lt;a href=&#34;https://github.com/broadinstitute/firecloud-develop#quick-start---how-do-i-set-up-my-configs&#34;&gt;firecloud-develop quick start guide for configs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you haven&#39;t already, add &lt;code&gt;127.0.0.1 local.broadinstitute.org&lt;/code&gt; to &lt;code&gt;/etc/hosts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo sh -c &#34;echo &#39;127.0.0.1       local.broadinstitute.org&#39; &amp;gt;&amp;gt; /etc/hosts&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then start Sam against dev DBs or local DBs following the instructions below.&lt;/p&gt; &#xA;&lt;h5&gt;Using dev DBs&lt;/h5&gt; &#xA;&lt;p&gt;You must be connected to the Broad Internal network to connect to the Dev DBs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Start up local Sam&#xA;sh config/docker-rsync-local-sam.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using local DBs&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Start up local Sam with local opendj and postgres&#xA;LOCAL_OPENDJ=true LOCAL_POSTGRES=true sh config/docker-rsync-local-sam.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: OpenDJ has some heavy memory requirements. If you see the OpenDJ container silently dying when running this command, try opening your Docker Desktop preferenes and increasing the Memory resources, 4GB seems to be sufficient, but more may be needed as well as increasing the Swap space maybe.&lt;/p&gt; &#xA;&lt;h5&gt;Human-Readable Logging&lt;/h5&gt; &#xA;&lt;p&gt;To make Sam output human-readable log messages instead of Stackdriver-compatible messages, add &lt;code&gt;SAM_LOG_APPENDER=Console-Standard&lt;/code&gt; to your environment variables.&lt;/p&gt; &#xA;&lt;h4&gt;Verify that local Sam is running&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://local.broadinstitute.org:50443/status&#34;&gt;Status endpoint: https://local.broadinstitute.org:50443/status&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://local.broadinstitute.org:50443/#/&#34;&gt;Swagger page: https://local.broadinstitute.org:50443/#/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>sbuslab/akka-http-tools</title>
    <updated>2022-06-15T01:53:44Z</updated>
    <id>tag:github.com,2022-06-15:/sbuslab/akka-http-tools</id>
    <link href="https://github.com/sbuslab/akka-http-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;akka-http-tools&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/sbuslab/akka-http-tools&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sbuslab/akka-http-tools.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>