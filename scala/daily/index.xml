<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-22T01:37:22Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jpablo/type-explorer</title>
    <updated>2024-02-22T01:37:22Z</updated>
    <id>tag:github.com,2024-02-22:/jpablo/type-explorer</id>
    <link href="https://github.com/jpablo/type-explorer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code exploration via diagrams&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Type Explorer&lt;/h1&gt; &#xA;&lt;p&gt;Explore the types of your Scala code in a visual way.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;Download the latest release from &lt;a href=&#34;https://github.com/juanpablo-r/type-explorer/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unzip the file and add &lt;code&gt;type-explorer-$version/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are two files in the &lt;code&gt;bin&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type-explorer&lt;/code&gt;: The main executable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;type-explorer-compile-project.sh&lt;/code&gt;: A script to compile your project with semanticdb enabled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JVM 8 or higher&lt;/li&gt; &#xA; &lt;li&gt;SBT based project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Compile your code&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;type-explorer-compile-project.sh&lt;/code&gt; will compile the project in the current directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;❯ cd akka-persistence-jdbc&#xA;❯ type-explorer-compile-project.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile a single module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;❯ type-explorer-compile-project.sh module-name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Run&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;❯ type-explorer&#xA;--------------------------------------------------&#xA;Welcome to Type Explorer!&#xA;name: type-explorer-shared, version: 0.2.0, scalaVersion: 3.3.1, sbtVersion: 1.9.6&#xA;Open your browser at http://localhost:8090/&#xA;Press Ctrl-C to stop the server&#xA;--------------------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;Scala standard library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;❯ git clone https://github.com/scala/scala.git&#xA;❯ cd scala&#xA;&#xA;❯ pwd&#xA;/Users/jpablo/GitHub/scala&#xA;&#xA;❯ type-explorer-compile-project.sh&#xA;&#xA;❯ find . -name &#34;*.semanticdb&#34; | wc -l&#xA;    1215&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initial screen&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jpablo/type-explorer/dev/docs/screenshots/initial-screen.png&#34; alt=&#34;initial-screen&#34; style=&#34;zoom:50%;&#34;&gt; &#xA;&lt;p&gt;Select folder containing semanticdb files and name project&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jpablo/type-explorer/dev/docs/screenshots/base-path.png&#34; alt=&#34;base-path&#34; style=&#34;zoom:50%;&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jpablo/type-explorer/dev/docs/screenshots/project-name.png&#34; alt=&#34;project-name&#34; style=&#34;zoom:50%;&#34;&gt; &#xA;&lt;p&gt;Add a type to the diagram&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jpablo/type-explorer/dev/docs/screenshots/select-type.png&#34; alt=&#34;select-type&#34; style=&#34;zoom:50%;&#34;&gt; &#xA;&lt;p&gt;Add all parents&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jpablo/type-explorer/dev/docs/screenshots/inheritance-diagram.png&#34; alt=&#34;inheritance-diagram&#34; style=&#34;zoom:50%;&#34;&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jpablo/type-explorer/dev/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2024 Juan Pablo Romero and the type-explorer contributors.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SpinalHDL/SpinalTemplateSbt</title>
    <updated>2024-02-22T01:37:22Z</updated>
    <id>tag:github.com,2024-02-22:/SpinalHDL/SpinalTemplateSbt</id>
    <link href="https://github.com/SpinalHDL/SpinalTemplateSbt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A basic SpinalHDL project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SpinalHDL Base Project&lt;/h1&gt; &#xA;&lt;p&gt;This repository is a base project to help Spinal users set-up project without knowledge about Scala and SBT.&lt;/p&gt; &#xA;&lt;h2&gt;If it is your are learning SpinalHDL&lt;/h2&gt; &#xA;&lt;p&gt;You can follow the tutorial on the &lt;a href=&#34;https://spinalhdl.github.io/SpinalDoc-RTD/master/SpinalHDL/Getting%20Started/index.html&#34;&gt;Getting Started&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;More specifically:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;instructions to install tools can be found on the &lt;a href=&#34;https://spinalhdl.github.io/SpinalDoc-RTD/master/SpinalHDL/Getting%20Started/Install%20and%20setup.html#install-and-setup&#34;&gt;Install and setup&lt;/a&gt; page&lt;/li&gt; &#xA; &lt;li&gt;instructions to get this repository locally are available in the &lt;a href=&#34;https://spinalhdl.github.io/SpinalDoc-RTD/master/SpinalHDL/Getting%20Started/Install%20and%20setup.html#create-a-spinalhdl-project&#34;&gt;Create a SpinalHDL project&lt;/a&gt; section.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TL;DR Things have already been set up in my environment, how do I run things to try SpinalHDL?&lt;/h3&gt; &#xA;&lt;p&gt;Once in the &lt;code&gt;SpinalTemplateSbt&lt;/code&gt; directory, when tools are installed, the commands below can be run to use &lt;code&gt;sbt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;// To generate the Verilog from the example&#xA;sbt &#34;runMain projectname.MyTopLevelVerilog&#34;&#xA;&#xA;// To generate the VHDL from the example&#xA;sbt &#34;runMain projectname.MyTopLevelVhdl&#34;&#xA;&#xA;// To run the testbench&#xA;sbt &#34;runMain projectname.MyTopLevelSim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The example hardware description is into &lt;code&gt;hw/spinal/projectname/MyTopLevel.scala&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The testbench is into &lt;code&gt;hw/spinal/projectname/MyTopLevelSim.scala&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When you really start working with SpinalHDL, it is recommended (both for comfort and efficiency) to use an IDE, see the &lt;a href=&#34;https://spinalhdl.github.io/SpinalDoc-RTD/master/SpinalHDL/Getting%20Started/index.html&#34;&gt;Getting started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;If you want to create a new project from this template&lt;/h2&gt; &#xA;&lt;h3&gt;Change project name&lt;/h3&gt; &#xA;&lt;p&gt;You might want to change the project name, which is currently &lt;code&gt;projectname&lt;/code&gt;. To do so (let&#39;s say your actual project name is &lt;code&gt;myproject&lt;/code&gt;; it must be all lowercase with no separators):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update &lt;code&gt;build.sbt&lt;/code&gt; and/or &lt;code&gt;build.sc&lt;/code&gt; by replacing &lt;code&gt;projectname&lt;/code&gt; by the name of your project &lt;code&gt;myproject&lt;/code&gt; (1 occurrence in each file). The better is to replace in both (it will always work), but in some contexts you can keep only one of these two files: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you are sure all people only use &lt;code&gt;sbt&lt;/code&gt;, you can replace only in &lt;code&gt;build.sbt&lt;/code&gt; and remove &lt;code&gt;build.sc&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If you are sure all people only use &lt;code&gt;mill&lt;/code&gt;, you can replace only in &lt;code&gt;build.sc&lt;/code&gt; and remove &lt;code&gt;build.sbt&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Replace in both files for open-source project.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Put all your scala files into &lt;code&gt;hw/spinal/myproject/&lt;/code&gt; (remove the unused &lt;code&gt;hw/spinal/projectname/&lt;/code&gt; folder)&lt;/li&gt; &#xA; &lt;li&gt;Start all your scala files with &lt;code&gt;package myproject&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Change project structure&lt;/h3&gt; &#xA;&lt;p&gt;You can change the project structure as you want. The only restrictions (from Scala environment) are (let&#39;s say your actual project name is &lt;code&gt;myproject&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you must have a &lt;code&gt;myproject&lt;/code&gt; folder and files in it must start with &lt;code&gt;package myproject&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;if you have a file in a subfolder &lt;code&gt;myproject/somepackage/MyElement.scala&lt;/code&gt; it must start with &lt;code&gt;package myproject.somepackage&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt&lt;/code&gt; and &lt;code&gt;mill&lt;/code&gt; must be run right in the folder containing their configurations (recommended to not move these files)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once the project structure is modified, update configurations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In &lt;code&gt;build.sbt&lt;/code&gt; and/or &lt;code&gt;build.sc&lt;/code&gt; (see above) replace &lt;code&gt;/ &#34;hw&#34; / &#34;spinal&#34;&lt;/code&gt; by the new path to the folder containing the &lt;code&gt;myproject&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;In the spinal configuration file (if you kept it, by default it is in &lt;code&gt;projectname/Config.scala&lt;/code&gt;) change the path in &lt;code&gt;targetDirectory = &#34;hw/gen&#34;&lt;/code&gt; to the directory where you want generated files to be written. If you don&#39;t use a config or if it doesn&#39;t contain this element, generated files will be written in the root directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Update this README&lt;/h3&gt; &#xA;&lt;p&gt;Of course you can replace/modify this file to help people with your own project!&lt;/p&gt; &#xA;&lt;h2&gt;Mill Support (Experimental)&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://com-lihaoyi.github.io/mill&#34;&gt;Mill build tool&lt;/a&gt; can be installed and used instead of &lt;code&gt;sbt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;// To generate the Verilog from the example&#xA;mill projectname.runMain projectname.MyTopLevelVerilog&#xA;&#xA;// To generate the VHDL from the example&#xA;mill projectname.runMain projectname.MyTopLevelVhdl&#xA;&#xA;// To run the testbench&#xA;mill projectname.runMain projectname.MyTopLevelSim&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>