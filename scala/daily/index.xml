<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-30T01:52:06Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ucb-bar/berkeley-hardfloat</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/ucb-bar/berkeley-hardfloat</id>
    <link href="https://github.com/ucb-bar/berkeley-hardfloat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Berkeley Hardware Floating-Point Units&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains hardware floating-point units written in Chisel. This library contains parameterized floating-point units for fused multiply-add operations, conversions between integer and floating-point numbers, and conversions between floating-point conversions with different precision.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: These units are works in progress. They may not be yet completely free of bugs, nor are they fully optimized.&lt;/p&gt; &#xA;&lt;h2&gt;Recoded Format&lt;/h2&gt; &#xA;&lt;p&gt;The floating-point units in this repository work on an internal recoded format (exponent has an additional bit) to handle subnormal numbers more efficiently in a microprocessor. A more detailed explanation will come soon, but in the mean time here are some example mappings for single-precision numbers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IEEE format                           Recoded format&#xA;----------------------------------    -----------------------------------&#xA;s 00000000 00000000000000000000000    s 000------ 00000000000000000000000&#xA;s 00000000 00000000000000000000001    s 001101011 00000000000000000000000&#xA;s 00000000 0000000000000000000001f    s 001101100 f0000000000000000000000&#xA;s 00000000 000000000000000000001ff    s 001101101 ff000000000000000000000&#xA;    ...              ...                   ...              ... &#xA;s 00000000 001ffffffffffffffffffff    s 001111111 ffffffffffffffffffff000&#xA;s 00000000 01fffffffffffffffffffff    s 010000000 fffffffffffffffffffff00&#xA;s 00000000 1ffffffffffffffffffffff    s 010000001 ffffffffffffffffffffff0&#xA;s 00000001 fffffffffffffffffffffff    s 010000010 fffffffffffffffffffffff&#xA;s 00000010 fffffffffffffffffffffff    s 010000011 fffffffffffffffffffffff&#xA;    ...              ...                   ...              ... &#xA;s 11111101 fffffffffffffffffffffff    s 101111110 fffffffffffffffffffffff&#xA;s 11111110 fffffffffffffffffffffff    s 101111111 fffffffffffffffffffffff&#xA;s 11111111 00000000000000000000000    s 110------ -----------------------&#xA;s 11111111 fffffffffffffffffffffff    s 111------ fffffffffffffffffffffff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unit-Testing&lt;/h2&gt; &#xA;&lt;p&gt;To unit-test these floating-point units, you need the berkeley-testfloat-3 package.&lt;/p&gt; &#xA;&lt;p&gt;To test floating-point units with the C simulator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>lampepfl/dotty</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/lampepfl/dotty</id>
    <link href="https://github.com/lampepfl/dotty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Scala 3 compiler, also known as Dotty.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dotty&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lampepfl/dotty/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/lampepfl/dotty/workflows/Dotty/badge.svg?branch=master&#34; alt=&#34;Dotty CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/scala&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/632150470000902164&#34; alt=&#34;Join the chat at https://discord.com/invite/scala&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org/scala3/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Try it out&lt;/h1&gt; &#xA;&lt;p&gt;To try it in your project see also the &lt;a href=&#34;https://docs.scala-lang.org/scala3/getting-started.html&#34;&gt;Getting Started User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Building a Local Distribution&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt dist/packArchive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Find the newly-built distributions in &lt;code&gt;dist/target/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;Dotty uses the &lt;a href=&#34;https://www.scala-lang.org/conduct.html&#34;&gt;Scala Code of Conduct&lt;/a&gt; for all communication and discussion. This includes both GitHub, Discord and other more direct lines of communication such as email.&lt;/p&gt; &#xA;&lt;h1&gt;How to Contribute&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org/scala3/guides/contribution/contribution-intro.html&#34;&gt;Getting Started as Contributor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lampepfl/dotty/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Dotty is licensed under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License Version 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zio/zio</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/zio/zio</id>
    <link href="https://github.com/zio/zio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ZIO — A type-safe, composable library for async and concurrent programming in Scala&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zio/zio/master/ZIO.png&#34; alt=&#34;ZIO Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project Stage&lt;/th&gt; &#xA;   &lt;th&gt;CI&lt;/th&gt; &#xA;   &lt;th&gt;Release&lt;/th&gt; &#xA;   &lt;th&gt;Snapshot&lt;/th&gt; &#xA;   &lt;th&gt;Issues&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zio/zio/wiki/Project-Stages&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project%20Stage-Production%20Ready-brightgreen.svg?sanitize=true&#34; alt=&#34;Project stage&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/zio/zio/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/dev/zio/zio_2.12/&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio_2.12.svg?sanitize=true&#34; alt=&#34;Release Artifacts&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio_2.12/&#34; title=&#34;Sonatype Snapshots&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio_2.12.svg?sanitize=true&#34; alt=&#34;Snapshot Artifacts&#34; title=&#34;Sonatype Snapshots&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://isitmaintained.com/project/zio/zio&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/zio/zio.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Scaladoc&lt;/th&gt; &#xA;   &lt;th&gt;Scaladex&lt;/th&gt; &#xA;   &lt;th&gt;Discord&lt;/th&gt; &#xA;   &lt;th&gt;Twitter&lt;/th&gt; &#xA;   &lt;th&gt;Gitpod&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://javadoc.io/doc/dev.zio/zio_2.12/latest/zio/index.html&#34;&gt;Scaladoc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://index.scala-lang.org/zio/zio/zio&#34; title=&#34;Scaladex&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/zio/zio/zio/latest.svg?sanitize=true&#34; alt=&#34;Badge-Scaladex-page&#34; title=&#34;Scaladex&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://discord.gg/2ccFBr4&#34; title=&#34;Discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629491597070827530?logo=discord&#34; alt=&#34;Badge-Discord&#34; title=&#34;chat on discord&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://twitter.com/zioscala&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/zioscala.svg?style=plastic&amp;amp;label=follow&amp;amp;logo=twitter&#34; alt=&#34;Badge-Twitter&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/zio/zio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod ready-to-code&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Welcome to ZIO&lt;/h1&gt; &#xA;&lt;p&gt;ZIO is a zero-dependency Scala library for asynchronous and concurrent programming.&lt;/p&gt; &#xA;&lt;p&gt;Powered by highly-scalable, non-blocking fibers that never waste or leak resources, ZIO lets you build scalable, resilient, and reactive applications that meet the needs of your business.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;High-performance&lt;/strong&gt;. Build scalable applications with 100x the performance of Scala&#39;s &lt;code&gt;Future&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type-safe&lt;/strong&gt;. Use the full power of the Scala compiler to catch bugs at compile time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concurrent&lt;/strong&gt;. Easily build concurrent apps without deadlocks, race conditions, or complexity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Asynchronous&lt;/strong&gt;. Write sequential code that looks the same whether it&#39;s asynchronous or synchronous.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resource-safe&lt;/strong&gt;. Build apps that never leak resources (including threads!), even when they fail.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testable&lt;/strong&gt;. Inject test services into your app for fast, deterministic, and type-safe testing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resilient&lt;/strong&gt;. Build apps that never lose errors, and which respond to failure locally and flexibly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Functional&lt;/strong&gt;. Rapidly compose solutions to complex problems from simple building blocks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more about ZIO, see the following references:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zio.dev/&#34;&gt;Homepage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zio/zio/master/docs/about/contributing.md&#34;&gt;Contributor&#39;s Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zio/zio/master/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio/issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio/pulls&#34;&gt;Pull Requests&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Adopters&lt;/h1&gt; &#xA;&lt;p&gt;Following is a partial list of companies happily using ZIO in production to craft concurrent applications.&lt;/p&gt; &#xA;&lt;p&gt;Want to see your company here? &lt;a href=&#34;https://github.com/zio/zio/edit/master/README.md&#34;&gt;Submit a PR&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://adgear.com/en/&#34;&gt;AdGear / Samsung Ads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.adidas.com/&#34;&gt;Adidas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.adpulse.io/&#34;&gt;adpulse.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.adsquare.com/&#34;&gt;adsquare&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.anduintransact.com/&#34;&gt;Anduin Transactions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ayolab.com/&#34;&gt;Ayolab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://asana.com/&#34;&gt;Asana&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aurinko.io/&#34;&gt;Aurinko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://auto.ru&#34;&gt;auto.ru&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.autoscout24.de&#34;&gt;AutoScout24&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.avast.com&#34;&gt;Avast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bofa.com&#34;&gt;Bank of America&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bpp.it/&#34;&gt;Bpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://broad.app&#34;&gt;Broad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.caesars.com/sportsbook-and-casino&#34;&gt;Caesars Digital&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.calcbank.com.br&#34;&gt;CalcBank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.callhandling.co.uk/&#34;&gt;Call Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.carvana.com&#34;&gt;Carvana&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cellular.de&#34;&gt;Cellular&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloudfarms.com&#34;&gt;Cloudfarms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codecomprehension.com&#34;&gt;CodeComprehension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codept.de/&#34;&gt;Codept&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.colisweb.com/en&#34;&gt;Colisweb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.collibra.com/&#34;&gt;Collibra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.compellon.com/&#34;&gt;Compellon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.complicatedrobot.com/&#34;&gt;Complicated Robot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.conduktor.io&#34;&gt;Conduktor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.contramap.dev&#34;&gt;Contramap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coralogix.com&#34;&gt;Coralogix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://creditkarma.com&#34;&gt;Credit Karma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.currencycloud.com/&#34;&gt;CurrencyCloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://de-solution.com/&#34;&gt;D.E.Solution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datachef.co&#34;&gt;DataChef&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.demandbase.com&#34;&gt;Demandbase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://demyst.com&#34;&gt;Demyst&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devsisters.com/&#34;&gt;Devsisters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.werkenbijdhl.nl/it&#34;&gt;DHL Parcel The Netherlands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.disneyplus.com/&#34;&gt;Disney+ Streaming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doomoolmori.com/&#34;&gt;Doomoolmori&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dowjones.com&#34;&gt;Dow Jones&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dpgrecruitment.nl&#34;&gt;DPG recruitment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dream11.com&#34;&gt;Dream11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iot.telekom.com/en&#34;&gt;Deutsche Telekom IoT GmbH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ebay.com&#34;&gt;eBay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.eaglescience.nl&#34;&gt;Eaglescience&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.edf.fr/&#34;&gt;Electricité de France (EDF)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.enelx.com&#34;&gt;EnelX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://evolution.engineering&#34;&gt;Evolution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://evo.company&#34;&gt;Evo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flipp.com/&#34;&gt;Flipp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fugo.ai&#34;&gt;Fugo.ai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.garnercorp.com/&#34;&gt;Garner Distributed Workflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gleancompany.com&#34;&gt;Glean&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grandparade.co.uk&#34;&gt;GrandParade&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://greyflower.media&#34;&gt;greyflower.media GmbH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hunters.ai&#34;&gt;Hunters.AI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hypefactors.com/&#34;&gt;Hypefactors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.iheart.com/&#34;&gt;iHeartRadio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ihsmarkit.com/&#34;&gt;IHS Markit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://investsuite.com/&#34;&gt;Investsuite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kaizen-solutions.net/&#34;&gt;Kaizen Solutions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kamon.io/&#34;&gt;Kamon APM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kodmagi.se&#34;&gt;Kodmagi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kensu.io&#34;&gt;Kensu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lambdaworks.io/&#34;&gt;LambdaWorks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leadiq.com&#34;&gt;LeadIQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lernkunst.com/&#34;&gt;Lernkunst&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://liveintent.com&#34;&gt;LiveIntent Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lottoland.com&#34;&gt;Lottoland&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matechs.com&#34;&gt;MATECHS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://megogo.net&#34;&gt;Megogo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mylivn.com/&#34;&gt;Mylivn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://newmotion.com&#34;&gt;NewMotion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nexxchange.com&#34;&gt;Nexxchange&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nike.com&#34;&gt;Nike&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nslookup.io&#34;&gt;NsLookup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ocadotechnology.com&#34;&gt;Ocado Technology&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://olyro.de&#34;&gt;Olyro GmbH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://optrak.com&#34;&gt;Optrak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.performance-immo.com/&#34;&gt;Performance Immo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.playtika.com&#34;&gt;Playtika&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ppcsamurai.com/&#34;&gt;PPC Samurai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://prezi.com/&#34;&gt;Prezi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.radix.bio/&#34;&gt;Radix Labs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.railroad19.com&#34;&gt;Railroad19&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.werkenbijrandstad.nl&#34;&gt;Randstad Groep Nederland&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rapidor.co&#34;&gt;Rapidor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pimsolutions.ru/&#34;&gt;PIM Solutions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rewe-digital.com/&#34;&gt;REWE Digital&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://riskident.com/&#34;&gt;Risk Ident&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rocker.com/&#34;&gt;Rocker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rudder.io/&#34;&gt;Rudder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sanjagh.pro/&#34;&gt;Sanjagh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scalac.io/&#34;&gt;Scalac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.securityscorecard.io/&#34;&gt;SecurityScorecard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sentinelone.com/&#34;&gt;SentinelOne&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.signicat.com/&#34;&gt;Signicat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://info.sgmarkets.com/en/&#34;&gt;Société Générale Corporate and Investment Banking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://softwaremill.com/&#34;&gt;SoftwareMill&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.streamweaver.com/&#34;&gt;StreamWeaver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stuart.com/&#34;&gt;Stuart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://teads.com&#34;&gt;Teads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pokemon.com/us/about-pokemon/&#34;&gt;The Pokemon Company International&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tomtom.com&#34;&gt;TomTom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tinka.com/&#34;&gt;Tinka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tinkoff.ru&#34;&gt;Tinkoff&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trackabus.com&#34;&gt;Trackabus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.trainor.no&#34;&gt;Trainor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tranzzo.com&#34;&gt;Tranzzo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://treutech.io&#34;&gt;TreuTech&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tweddle.com&#34;&gt;Tweddle Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.undo.app&#34;&gt;Undo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unit.co&#34;&gt;Unit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://univalence.io&#34;&gt;Univalence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unzer.com&#34;&gt;Unzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vakantiediscounter.nl&#34;&gt;Vakantiediscounter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.verbund.com&#34;&gt;Verbund AG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.waylay.io/&#34;&gt;Waylay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wehkamp.nl&#34;&gt;Wehkamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wolt.com/&#34;&gt;Wolt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://o.yandex.ru&#34;&gt;Yandex.Classifieds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://audela.ca&#34;&gt;Audela&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://valamis.com&#34;&gt;Valamis Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://valsea.com&#34;&gt;Valsea&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://virtuslab.com/&#34;&gt;VirtusLab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getvish.com&#34;&gt;Vish&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vivid.money&#34;&gt;Vivid Money&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zalando.com/&#34;&gt;Zalando&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zooz.com/&#34;&gt;Zooz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Sponsors&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ziverge.com&#34; title=&#34;Ziverge&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zio/zio/master/website/static/img/ziverge.png&#34; alt=&#34;Ziverge&#34; title=&#34;Ziverge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ziverge.com&#34; title=&#34;Ziverge&#34;&gt;Ziverge&lt;/a&gt; is a leading contributor to ZIO.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scalac.io&#34; title=&#34;Scalac&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zio/zio/master/website/static/img/scalac.svg?sanitize=true&#34; alt=&#34;Scalac&#34; title=&#34;Scalac&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scalac.io&#34; title=&#34;Scalac&#34;&gt;Scalac&lt;/a&gt; sponsors ZIO Hackathons and contributes work to multiple projects in ZIO ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://7mind.io&#34; title=&#34;Septimal Mind&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zio/zio/master/website/static/img/septimal_mind.svg?sanitize=true&#34; alt=&#34;Septimal Mind&#34; title=&#34;Septimal Mind&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://7mind.io&#34; title=&#34;Septimal Mind&#34;&gt;Septimal Mind&lt;/a&gt; sponsors work on ZIO Tracing and continuous maintenance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://softwaremill.com&#34; title=&#34;SoftwareMill&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zio/zio/master/website/static/img/softwaremill.svg?sanitize=true&#34; alt=&#34;SoftwareMill&#34; title=&#34;SoftwareMill&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://softwaremill.com&#34; title=&#34;SoftwareMill&#34;&gt;SoftwareMill&lt;/a&gt; generously provides ZIO with paid-for CircleCI build infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.yourkit.com&#34; title=&#34;YourKit&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zio/zio/master/website/static/img/yourkit.png&#34; alt=&#34;YourKit&#34; title=&#34;YourKit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.yourkit.com&#34; title=&#34;YourKit&#34;&gt;YourKit&lt;/a&gt; generously provides use of their monitoring and profiling tools to maximize the performance of ZIO applications.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://zio.dev/&#34;&gt;Learn More on the ZIO Homepage&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/zio/zio/master/docs/about/code_of_conduct.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Come chat with us on &lt;a href=&#34;https://discord.gg/2ccFBr4&#34; title=&#34;Discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629491597070827530?logo=discord&#34; alt=&#34;Badge-Discord&#34; title=&#34;chat on discord&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Legal&lt;/h3&gt; &#xA;&lt;p&gt;Copyright 2017 - 2020 John A. De Goes and the ZIO Contributors. All rights reserved.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chipsalliance/chisel3</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/chipsalliance/chisel3</id>
    <link href="https://github.com/chipsalliance/chisel3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chisel 3: A Modern Hardware Design Language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/docs/src/images/chisel_logo.svg?sanitize=true&#34; alt=&#34;Chisel 3&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Upcoming Events&lt;/h2&gt; &#xA;&lt;h3&gt;Chisel Dev Meeting&lt;/h3&gt; &#xA;&lt;p&gt;Chisel/FIRRTL development meetings happen every Monday and Tuesday from 1100--1200 PT.&lt;/p&gt; &#xA;&lt;p&gt;Call-in info and meeting notes are available &lt;a href=&#34;https://docs.google.com/document/d/1BLP2DYt59DqI-FgFCcjw8Ddl4K-WU0nHmQu0sZ_wAGo/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Chisel Community Conference 2021, Shanghai, China.&lt;/h3&gt; &#xA;&lt;p&gt;CCC is an annual gathering of Chisel community enthusiasts and technical exchange workshop. This year with the support of the Chisel development community and RISC-V World Conference China 2021 Committee, we have brought together designers and developers with hands-on experience in Chisel from home and abroad to share cutting-edge results and experiences from both the open source community as well as industry.&lt;br&gt; English translated recordings version will be updated soon.&lt;br&gt; Looking forward to CCC 2022! See you then!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/freechipsproject/chisel3?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/chipsalliance/chisel3.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/freechipsproject/chisel3&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/chipsalliance/chisel3/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://github.com/chipsalliance/chisel3/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/chipsalliance/chisel3.svg?include_prereleases&amp;amp;sort=semver&#34; alt=&#34;GitHub tag (latest SemVer)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.chisel-lang.org&#34;&gt;&lt;strong&gt;Chisel&lt;/strong&gt;&lt;/a&gt; is a hardware design language that facilitates &lt;strong&gt;advanced circuit generation and design reuse for both ASIC and FPGA digital logic designs&lt;/strong&gt;. Chisel adds hardware construction primitives to the &lt;a href=&#34;https://www.scala-lang.org&#34;&gt;Scala&lt;/a&gt; programming language, providing designers with the power of a modern programming language to write complex, parameterizable circuit generators that produce synthesizable Verilog. This generator methodology enables the creation of re-usable components and libraries, such as the FIFO queue and arbiters in the &lt;a href=&#34;https://www.chisel-lang.org/api/latest/#chisel3.util.package&#34;&gt;Chisel Standard Library&lt;/a&gt;, raising the level of abstraction in design while retaining fine-grained control.&lt;/p&gt; &#xA;&lt;p&gt;For more information on the benefits of Chisel see: &lt;a href=&#34;https://stackoverflow.com/questions/53007782/what-benefits-does-chisel-offer-over-classic-hardware-description-languages&#34;&gt;&#34;What benefits does Chisel offer over classic Hardware Description Languages?&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chisel is powered by &lt;a href=&#34;https://github.com/chipsalliance/firrtl&#34;&gt;FIRRTL (Flexible Intermediate Representation for RTL)&lt;/a&gt;, a hardware compiler framework that performs optimizations of Chisel-generated circuits and supports custom user-defined circuit transformations.&lt;/p&gt; &#xA;&lt;h2&gt;What does Chisel code look like?&lt;/h2&gt; &#xA;&lt;p&gt;Consider an FIR filter that implements a convolution operation, as depicted in this block diagram:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/docs/src/images/fir_filter.svg?sanitize=true&#34; width=&#34;512&#34;&gt; &#xA;&lt;p&gt;While Chisel provides similar base primitives as synthesizable Verilog, and &lt;em&gt;could&lt;/em&gt; be used as such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// 3-point moving sum implemented in the style of a FIR filter&#xA;class MovingSum3(bitWidth: Int) extends Module {&#xA;  val io = IO(new Bundle {&#xA;    val in = Input(UInt(bitWidth.W))&#xA;    val out = Output(UInt(bitWidth.W))&#xA;  })&#xA;&#xA;  val z1 = RegNext(io.in)&#xA;  val z2 = RegNext(z1)&#xA;&#xA;  io.out := (io.in * 1.U) + (z1 * 1.U) + (z2 * 1.U)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the power of Chisel comes from the ability to create generators, such as an FIR filter that is defined by the list of coefficients:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Generalized FIR filter parameterized by the convolution coefficients&#xA;class FirFilter(bitWidth: Int, coeffs: Seq[UInt]) extends Module {&#xA;  val io = IO(new Bundle {&#xA;    val in = Input(UInt(bitWidth.W))&#xA;    val out = Output(UInt(bitWidth.W))&#xA;  })&#xA;  // Create the serial-in, parallel-out shift register&#xA;  val zs = Reg(Vec(coeffs.length, UInt(bitWidth.W)))&#xA;  zs(0) := io.in&#xA;  for (i &amp;lt;- 1 until coeffs.length) {&#xA;    zs(i) := zs(i-1)&#xA;  }&#xA;&#xA;  // Do the multiplies&#xA;  val products = VecInit.tabulate(coeffs.length)(i =&amp;gt; zs(i) * coeffs(i))&#xA;&#xA;  // Sum up the products&#xA;  io.out := products.reduce(_ + _)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use and re-use them across designs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val movingSum3Filter = Module(new FirFilter(8, Seq(1.U, 1.U, 1.U)))  // same 3-point moving sum filter as before&#xA;val delayFilter = Module(new FirFilter(8, Seq(0.U, 1.U)))  // 1-cycle delay as a FIR filter&#xA;val triangleFilter = Module(new FirFilter(8, Seq(1.U, 2.U, 3.U, 2.U, 1.U)))  // 5-point FIR filter with a triangle impulse response&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above can be converted to Verilog using &lt;code&gt;ChiselStage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import chisel3.stage.{ChiselStage, ChiselGeneratorAnnotation}&#xA;&#xA;(new chisel3.stage.ChiselStage).execute(&#xA;  Array(&#34;-X&#34;, &#34;verilog&#34;),&#xA;  Seq(ChiselGeneratorAnnotation(() =&amp;gt; new FirFilter(8, Seq(1.U, 1.U, 1.U)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you may generate some Verilog directly for inspection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val verilogString = chisel3.emitVerilog(new FirFilter(8, Seq(0.U, 1.U)))&#xA;println(verilogString)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Bootcamp Interactive Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://mybinder.org/v2/gh/freechipsproject/chisel-bootcamp/master&#34;&gt;&lt;strong&gt;online Chisel Bootcamp&lt;/strong&gt;&lt;/a&gt; is the recommended way to get started with and learn Chisel. &lt;strong&gt;No setup is required&lt;/strong&gt; (it runs in the browser), nor does it assume any prior knowledge of Scala.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/ucb-bar/chisel-tutorial&#34;&gt;&lt;strong&gt;classic Chisel tutorial&lt;/strong&gt;&lt;/a&gt; contains small exercises and runs on your computer.&lt;/p&gt; &#xA;&lt;h3&gt;A Textbook on Chisel&lt;/h3&gt; &#xA;&lt;p&gt;If you like a textbook to learn Chisel and also a bit of digital design in general, you may be interested in reading &lt;a href=&#34;http://www.imm.dtu.dk/~masca/chisel-book.html&#34;&gt;&lt;strong&gt;Digital Design with Chisel&lt;/strong&gt;&lt;/a&gt;. It is available in English, Chinese, Japanese, and Vietnamese.&lt;/p&gt; &#xA;&lt;h3&gt;Build Your Own Chisel Projects&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/SETUP.md&#34;&gt;the setup instructions&lt;/a&gt; for how to set up your environment to build Chisel locally.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;re ready to build your own circuits in Chisel, &lt;strong&gt;we recommend starting from the &lt;a href=&#34;https://github.com/freechipsproject/chisel-template&#34;&gt;Chisel Template&lt;/a&gt; repository&lt;/strong&gt;, which provides a pre-configured project, example design, and testbench. Follow the &lt;a href=&#34;https://github.com/freechipsproject/chisel-template&#34;&gt;chisel-template README&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;If you insist on setting up your own project from scratch, your project needs to depend on both the chisel3-plugin (Scalac plugin) and the chisel3 library. For example, in SBT this could be expressed as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// build.sbt&#xA;scalaVersion := &#34;2.13.7&#34;&#xA;addCompilerPlugin(&#34;edu.berkeley.cs&#34; % &#34;chisel3-plugin&#34; % &#34;3.5.0&#34; cross CrossVersion.full)&#xA;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;chisel3&#34; % &#34;3.5.0&#34;&#xA;// We also recommend using chiseltest for writing unit tests &#xA;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;chiseltest&#34; % &#34;0.5.0&#34; % &#34;test&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Guide For New Contributors&lt;/h3&gt; &#xA;&lt;p&gt;If you are trying to make a contribution to this project, please read &lt;a href=&#34;https://github.com/Burnleydev1/chisel3/raw/recent_PR/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Design Verification&lt;/h3&gt; &#xA;&lt;p&gt;These simulation-based verification tools are available for Chisel:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/chisel-testers&#34;&gt;&lt;strong&gt;iotesters&lt;/strong&gt;&lt;/a&gt;, specifically &lt;a href=&#34;https://github.com/freechipsproject/chisel-testers/wiki/Using%20the%20PeekPokeTester&#34;&gt;PeekPokeTester&lt;/a&gt;, provides constructs (&lt;code&gt;peek&lt;/code&gt;, &lt;code&gt;poke&lt;/code&gt;, &lt;code&gt;expect&lt;/code&gt;) similar to a non-synthesizable Verilog testbench.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ucb-bar/chisel-testers2&#34;&gt;&lt;strong&gt;testers2&lt;/strong&gt;&lt;/a&gt; is an in-development replacement for PeekPokeTester, providing the same base constructs but with a streamlined interface and concurrency support with &lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Useful Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/chisel-cheatsheet/releases/latest/download/chisel_cheatsheet.pdf&#34;&gt;&lt;strong&gt;Cheat Sheet&lt;/strong&gt;&lt;/a&gt;, a 2-page reference of the base Chisel syntax and libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.chisel-lang.org/api/latest/chisel3/index.html&#34;&gt;&lt;strong&gt;ScalaDoc&lt;/strong&gt;&lt;/a&gt;, a listing, description, and examples of the functionality exposed by Chisel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/freechipsproject/chisel3&#34;&gt;&lt;strong&gt;Gitter&lt;/strong&gt;&lt;/a&gt;, where you can ask questions or discuss anything Chisel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.chisel-lang.org&#34;&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/freechipsproject/www.chisel-lang.org/&#34;&gt;source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scastie.scala-lang.org/9ga9i2DvQymKlA5JjS1ieA&#34;&gt;&lt;strong&gt;Scastie (3.5.0)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.asic-world.com/verilog/veritut.html&#34;&gt;&lt;strong&gt;asic-world&lt;/strong&gt;&lt;/a&gt; If you aren&#39;t familiar with verilog, this is a good tutorial.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are migrating from Chisel2, see &lt;a href=&#34;https://www.chisel-lang.org/chisel3/chisel3-vs-chisel2.html&#34;&gt;the migration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Data Types Overview&lt;/h3&gt; &#xA;&lt;p&gt;These are the base data types for defining circuit components:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/docs/src/images/type_hierarchy.svg?sanitize=true&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributor Documentation&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to get started contributing to Chisel itself, including how to test your version locally against other projects that pull in Chisel using &lt;a href=&#34;https://www.scala-sbt.org/1.x/docs/Library-Dependencies.html&#34;&gt;sbt&#39;s managed dependencies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Useful Resources for Contributors&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#useful-resources&#34;&gt;Useful Resources&lt;/a&gt; for users are also helpful for contributors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/114YihixFBPCfUnv1inqAL8UjsiWfcNWdPHX7SeqlRQc&#34;&gt;&lt;strong&gt;Chisel Breakdown Slides&lt;/strong&gt;&lt;/a&gt;, an introductory talk about Chisel&#39;s internals&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compiling and Testing Chisel&lt;/h3&gt; &#xA;&lt;p&gt;You must first install required dependencies to build Chisel locally, please see &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/SETUP.md&#34;&gt;the setup instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Clone and build the Chisel library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/chipsalliance/chisel3.git&#xA;cd chisel3&#xA;sbt compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run the following unit tests, you will need several tools on your &lt;code&gt;PATH&lt;/code&gt;, namely &lt;a href=&#34;https://www.veripool.org/verilator/&#34;&gt;verilator&lt;/a&gt;, &lt;a href=&#34;http://www.clifford.at/yosys/&#34;&gt;yosys&lt;/a&gt;, &lt;a href=&#34;https://github.com/chipsalliance/espresso&#34;&gt;espresso&lt;/a&gt;, and &lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;z3&lt;/a&gt;. Check that each is installed on your &lt;code&gt;PATH&lt;/code&gt; by running &lt;code&gt;which verilator&lt;/code&gt; and so on.&lt;/p&gt; &#xA;&lt;p&gt;If the compilation succeeded and the dependencies noted above are installed, you can then run the included unit tests by invoking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Projects Against Local Chisel&lt;/h3&gt; &#xA;&lt;p&gt;To use the development version of Chisel (&lt;code&gt;master&lt;/code&gt; branch), you will need to build from source and &lt;code&gt;publishLocal&lt;/code&gt;. The repository version can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/build.sbt&#34;&gt;build.sbt&lt;/a&gt; file. As of the time of writing it was:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;version := &#34;3.6-SNAPSHOT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To publish your version of Chisel to the local Ivy (sbt&#39;s dependency manager) repository, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt publishLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compiled version gets placed in &lt;code&gt;~/.ivy2/local/edu.berkeley.cs/&lt;/code&gt;. If you need to un-publish your local copy of Chisel, remove the directory generated in &lt;code&gt;~/.ivy2/local/edu.berkeley.cs/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to have your projects use this version of Chisel, you should update the &lt;code&gt;libraryDependencies&lt;/code&gt; setting in your project&#39;s build.sbt file to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;chisel3&#34; % &#34;3.6-SNAPSHOT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building Chisel with FIRRTL in the same SBT Project&lt;/h3&gt; &#xA;&lt;p&gt;While we recommend using the library dependency approach as described above, it is possible to build Chisel and FIRRTL in a single SBT project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caveats&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This only works for the &#34;main&#34; configuration; you cannot build the Chisel tests this way because &lt;code&gt;treadle&lt;/code&gt; is only supported as a library dependency.&lt;/li&gt; &#xA; &lt;li&gt;Do not &lt;code&gt;publishLocal&lt;/code&gt; when building this way. The published artifact will be missing the FIRRTL dependency.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This works by using &lt;a href=&#34;http://eed3si9n.com/hot-source-dependencies-using-sbt-sriracha&#34;&gt;sbt-sriracha&lt;/a&gt;, an SBT plugin for toggling between source and library dependencies. It provides two JVM system properties that, when set, will tell SBT to include FIRRTL as a source project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt.sourcemode&lt;/code&gt; - when set to true, SBT will look for FIRRTL in the workspace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt.workspace&lt;/code&gt; - sets the root directory of the workspace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# From root of this repo&#xA;git clone git@github.com:chipsalliance/firrtl.git&#xA;sbt -Dsbt.sourcemode=true -Dsbt.workspace=$PWD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is primarily useful for building projects that themselves want to include Chisel as a source dependency. As an example, see &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip&#34;&gt;Rocket Chip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Chisel3 Architecture Overview&lt;/h3&gt; &#xA;&lt;p&gt;The Chisel3 compiler consists of these main parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The frontend&lt;/strong&gt;, &lt;code&gt;chisel3.*&lt;/code&gt;, which is the publicly visible &#34;API&#34; of Chisel and what is used in Chisel RTL. These just add data to the...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Builder&lt;/strong&gt;, &lt;code&gt;chisel3.internal.Builder&lt;/code&gt;, which maintains global state (like the currently open Module) and contains commands, generating...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The intermediate data structures&lt;/strong&gt;, &lt;code&gt;chisel3.firrtl.*&lt;/code&gt;, which are syntactically very similar to Firrtl. Once the entire circuit has been elaborated, the top-level object (a &lt;code&gt;Circuit&lt;/code&gt;) is then passed to...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Firrtl emitter&lt;/strong&gt;, &lt;code&gt;chisel3.firrtl.Emitter&lt;/code&gt;, which turns the intermediate data structures into a string that can be written out into a Firrtl file for further processing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also included is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The standard library&lt;/strong&gt; of circuit generators, &lt;code&gt;chisel3.util.*&lt;/code&gt;. These contain commonly used interfaces and constructors (like &lt;code&gt;Decoupled&lt;/code&gt;, which wraps a signal with a ready-valid pair) as well as fully parameterizable circuit generators (like arbiters and multiplexors).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chisel Stage&lt;/strong&gt;, &lt;code&gt;chisel3.stage.*&lt;/code&gt;, which contains compilation and test functions that are invoked in the standard Verilog generation and simulation testing infrastructure. These can also be used as part of custom flows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chisel Sub-Projects&lt;/h3&gt; &#xA;&lt;p&gt;Chisel consists of 4 Scala projects; each is its own separate compilation unit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/core&#34;&gt;&lt;code&gt;core&lt;/code&gt;&lt;/a&gt; is the bulk of the source code of Chisel, depends on &lt;code&gt;macros&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/src/main&#34;&gt;&lt;code&gt;src/main&lt;/code&gt;&lt;/a&gt; is the &#34;main&#34; that brings it all together and includes a &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/src/main/scala/chisel3/util&#34;&gt;&lt;code&gt;util&lt;/code&gt;&lt;/a&gt; library, which depends on &lt;code&gt;core&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/plugin&#34;&gt;&lt;code&gt;plugin&lt;/code&gt;&lt;/a&gt; is the compiler plugin, no internal dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/macros&#34;&gt;&lt;code&gt;macros&lt;/code&gt;&lt;/a&gt; is most of the macros used in Chisel, no internal dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code that touches lots of APIs that are private to the &lt;code&gt;chisel3&lt;/code&gt; package should belong in &lt;code&gt;core&lt;/code&gt;, while code that is pure Chisel should belong in &lt;code&gt;src/main&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Which version should I use?&lt;/h3&gt; &#xA;&lt;p&gt;We encourage Chisel users (as opposed to Chisel developers), to use the latest release version of Chisel. This &lt;a href=&#34;https://github.com/freechipsproject/chisel-template&#34;&gt;chisel-template&lt;/a&gt; repository is kept up-to-date, depending on the most recent version of Chisel. The recommended version is also captured near the top of this README, and in the &lt;a href=&#34;https://github.com/chipsalliance/chisel3/releases&#34;&gt;Github releases&lt;/a&gt; section of this repo. If you encounter an issue with a released version of Chisel, please file an issue on GitHub mentioning the Chisel version and provide a simple test case (if possible). Try to reproduce the issue with the associated latest minor release (to verify that the issue hasn&#39;t been addressed).&lt;/p&gt; &#xA;&lt;p&gt;For more information on our versioning policy and what versions of the various Chisel ecosystem projects work together, see &lt;a href=&#34;https://www.chisel-lang.org/chisel3/docs/appendix/versioning.html&#34;&gt;Chisel Project Versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re developing a Chisel library (or &lt;code&gt;chisel3&lt;/code&gt; itself), you&#39;ll probably want to work closer to the tip of the development trunk. By default, the master branches of the chisel repositories are configured to build and publish their version of the code as &lt;code&gt;Z.Y-SNAPSHOT&lt;/code&gt;. Updated SNAPSHOTs are publised on every push to master. You are encouraged to do your development against the latest SNAPSHOT, but note that neither API nor ABI compatibility is guaranteed so your code may break at any time.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twitter/finatra</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/twitter/finatra</id>
    <link href="https://github.com/twitter/finatra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, testable, Scala services built on TwitterServer and Finagle&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Finatra&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/twitter/finatra/actions?query=workflow%3A%22continuous+integration%22+branch%3Adevelop&#34;&gt;&lt;img src=&#34;https://github.com/twitter/finatra/workflows/continuous%20integration/badge.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/twitter/finatra?branch=develop&#34;&gt;&lt;img src=&#34;https://codecov.io/github/twitter/finatra/coverage.svg?branch=develop&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/twitter/finatra/develop/#status&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/status-active-brightgreen.svg?sanitize=true&#34; alt=&#34;Project status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.twitter%22%20AND%20%28a%3A%22finatra-http_2.12%22%20OR%20a%3A%22finatra-thrift_2.12%22%29&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/finatra-http-server_2.12/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/twitter/finatra&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is used in production at Twitter (and many other organizations), and is being actively developed and maintained.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/twitter/finatra/develop/finatra_logo_text.png&#34; title=&#34;Finatra Logo&#34; alt=&#34;Finatra Logo&#34; height=&#34;394&#34; width=&#34;679/&#34;&gt; &#xA;&lt;p&gt;Finatra is a lightweight framework for building fast, testable, scala applications on top of &lt;a href=&#34;https://github.com/twitter/twitter-server&#34;&gt;TwitterServer&lt;/a&gt; and &lt;a href=&#34;https://github.com/twitter/finagle&#34;&gt;Finagle&lt;/a&gt;. Finatra provides an easy-to-use API for creating and &lt;a href=&#34;https://twitter.github.io/finatra/user-guide/testing/index.html&#34;&gt;testing&lt;/a&gt; &lt;a href=&#34;https://twitter.github.io/finagle/guide/Servers.html&#34;&gt;Finagle servers&lt;/a&gt; and &lt;a href=&#34;https://twitter.github.io/util/docs/#com.twitter.app.App&#34;&gt;apps&lt;/a&gt; as well as powerful JSON support, modern logging via &lt;a href=&#34;https://www.slf4j.org/manual.html&#34;&gt;SLF4J&lt;/a&gt;, &lt;a href=&#34;https://twitter.github.io/finagle/guide/Clients.html&#34;&gt;Finagle client&lt;/a&gt; utilities, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Getting involved&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://twitter.github.io/finatra/&#34;&gt;https://twitter.github.io/finatra/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Latest news: &lt;a href=&#34;https://finagle.github.io/blog/&#34;&gt;Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Github Source: &lt;a href=&#34;https://github.com/twitter/finatra/&#34;&gt;https://github.com/twitter/finatra/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gitter: &lt;a href=&#34;https://gitter.im/twitter/finatra&#34;&gt;https://gitter.im/twitter/finatra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mailing List: &lt;a href=&#34;https://groups.google.com/forum/#!forum/finatra-users&#34;&gt;finatra-users@googlegroups.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Production use &lt;a href=&#34;https://twitter.com/&#34;&gt;@Twitter&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;~50 times faster than v1.6 in several benchmarks.&lt;/li&gt; &#xA; &lt;li&gt;Powerful Feature and Integration test support.&lt;/li&gt; &#xA; &lt;li&gt;Optional JSR-330 Dependency Injection using &lt;a href=&#34;https://github.com/google/guice&#34;&gt;Google Guice&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;Jackson&lt;/a&gt;-based JSON parsing supporting required fields, default values, and &lt;a href=&#34;https://twitter.github.io/finatra/user-guide/json/validations.html&#34;&gt;validations&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://logback.qos.ch/&#34;&gt;Logback&lt;/a&gt; &lt;a href=&#34;https://logback.qos.ch/manual/mdc.html&#34;&gt;MDC&lt;/a&gt; integration with &lt;a href=&#34;https://github.com/twitter/util/raw/release/util-core/src/main/scala/com/twitter/util/Local.scala&#34;&gt;com.twitter.util.Local&lt;/a&gt; for contextual logging across &lt;a href=&#34;https://twitter.github.io/util/guide/util-cookbook/futures.html&#34;&gt;futures&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To get started, see the &lt;a href=&#34;https://twitter.github.io/finatra/user-guide/index.html#getting-started&#34;&gt;Getting Started&lt;/a&gt; section of our &lt;a href=&#34;https://twitter.github.io/finatra/user-guide/index.html&#34;&gt;User Guide&lt;/a&gt; to get up and running. Or check out the specific sections for building &lt;a href=&#34;https://twitter.github.io/finatra/user-guide/http/server.html&#34;&gt;HTTP&lt;/a&gt; or &lt;a href=&#34;https://twitter.github.io/finatra/user-guide/thrift/server.html&#34;&gt;Thrift&lt;/a&gt; servers.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;An HTTP controller and server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.finatra.http._&#xA;&#xA;@Singleton&#xA;class ExampleController extends Controller {&#xA;  get(&#34;/&#34;) { request: Request =&amp;gt;&#xA;    &#34;&amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.finatra.http._&#xA;&#xA;class ExampleServer extends HttpServer {&#xA;  override def configureHttp(router: HttpRouter): Unit = {&#xA;    router&#xA;      .filter[CommonFilters]&#xA;      .add[ExampleController]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A Thrift controller and server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.finatra.thrift._&#xA;import com.twitter.scrooge.{Request, Response}&#xA;&#xA;@Singleton&#xA;class ExampleThriftController&#xA;  extends Controller(MyThriftService) {&#xA;&#xA;  handle(MyFunction).withFn { request: Request[MyFunction.Args] =&amp;gt;&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.finatra.thrift._&#xA;&#xA;class ExampleServer extends ThriftServer {&#xA;  override def configureThrift(router: ThriftRouter): Unit = {&#xA;    router&#xA;      .add[ExampleThriftController]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example Projects&lt;/h2&gt; &#xA;&lt;p&gt;Finatra includes working examples which highlight various features of the framework and include tests. These examples are included in the root &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt; build and are thus buildable as part of the entire project.&lt;/p&gt; &#xA;&lt;p&gt;Please take a look through the &lt;a href=&#34;https://raw.githubusercontent.com/twitter/finatra/develop/examples&#34;&gt;examples&lt;/a&gt; for more detailed information on features, testing, building, and running.&lt;/p&gt; &#xA;&lt;h2&gt;Latest version&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/twitter/finatra/tree/release&#34;&gt;release branch&lt;/a&gt; in Github tracks the latest stable &lt;a href=&#34;https://github.com/twitter/finatra/releases&#34;&gt;release&lt;/a&gt;, which is currently:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.twitter%22%20AND%20%28a%3A%22finatra-http_2.12%22%20OR%20a%3A%22finatra-thrift_2.12%22%29&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/finatra-http_2.12/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;available on Maven Central. See the &lt;a href=&#34;https://twitter.github.io/finatra/user-guide/getting-started/basics.html#first-steps&#34;&gt;First Steps&lt;/a&gt; section in the &lt;a href=&#34;https://twitter.github.io/finatra/user-guide/index.html&#34;&gt;User Guide&lt;/a&gt; for how to add dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Releases are done on an approximately monthly schedule. While &lt;a href=&#34;https://semver.org/&#34;&gt;semver&lt;/a&gt; is not followed, the &lt;a href=&#34;https://raw.githubusercontent.com/twitter/finatra/develop/CHANGELOG.rst&#34;&gt;changelogs&lt;/a&gt; are detailed and include sections on public API breaks and changes in runtime behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Development version&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/twitter/finatra/tree/develop&#34;&gt;develop branch&lt;/a&gt; in Github tracks the latest code which is updated every week. If you want to contribute a patch or fix, please use this branch as the basis of your &lt;a href=&#34;https://help.github.com/articles/creating-a-pull-request/&#34;&gt;Pull Request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We feel that a welcoming community is important and we ask that you follow Twitter&#39;s &lt;a href=&#34;https://github.com/twitter/.github/raw/main/code-of-conduct.md&#34;&gt;Open Source Code of Conduct&lt;/a&gt; in all interactions with the community. For more information on providing contributions, please see our &lt;a href=&#34;https://raw.githubusercontent.com/twitter/finatra/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Presentations&lt;/h2&gt; &#xA;&lt;p&gt;Check out our list of presentations: &lt;a href=&#34;https://twitter.github.io/finatra/presentations/&#34;&gt;Finatra Presentations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Steve Cosenza &lt;a href=&#34;https://github.com/scosenza&#34;&gt;https://github.com/scosenza&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Christopher Coco &lt;a href=&#34;https://github.com/cacoco&#34;&gt;https://github.com/cacoco&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A full list of &lt;a href=&#34;https://github.com/twitter/finatra/graphs/contributors?type=a&#34;&gt;contributors&lt;/a&gt; can be found on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/finatra&#34;&gt;@finatra&lt;/a&gt; on Twitter for updates.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2013 Twitter, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0: &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>akka/akka</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/akka/akka</id>
    <link href="https://github.com/akka/akka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build highly concurrent, distributed, and resilient message-driven applications on the JVM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Akka &lt;a href=&#34;https://index.scala-lang.org/akka/akka/akka-actor&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/akka/akka/akka-actor/latest.svg?sanitize=true&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://travis-ci.com/github/akka/akka&#34;&gt;&lt;img src=&#34;https://api.travis-ci.com/akka/akka.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;We believe that writing correct concurrent &amp;amp; distributed, resilient and elastic applications is too hard. Most of the time it&#39;s because we are using the wrong tools and the wrong level of abstraction.&lt;/p&gt; &#xA;&lt;p&gt;Akka is here to change that.&lt;/p&gt; &#xA;&lt;p&gt;Using the Actor Model we raise the abstraction level and provide a better platform to build correct concurrent and scalable applications. This model is a perfect match for the principles laid out in the &lt;a href=&#34;https://www.reactivemanifesto.org/&#34;&gt;Reactive Manifesto&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For resilience, we adopt the &#34;Let it crash&#34; model which the telecom industry has used with great success to build applications that self-heal and systems that never stop.&lt;/p&gt; &#xA;&lt;p&gt;Actors also provide the abstraction for transparent distribution and the basis for truly scalable and fault-tolerant applications.&lt;/p&gt; &#xA;&lt;p&gt;Learn more at &lt;a href=&#34;https://akka.io/&#34;&gt;akka.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reference Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The reference documentation is available at &lt;a href=&#34;https://doc.akka.io&#34;&gt;doc.akka.io&lt;/a&gt;, for &lt;a href=&#34;https://doc.akka.io/docs/akka/current/scala.html&#34;&gt;Scala&lt;/a&gt; and &lt;a href=&#34;https://doc.akka.io/docs/akka/current/java.html&#34;&gt;Java&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;You can join these groups and chats to discuss and ask Akka related questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Forums: &lt;a href=&#34;https://discuss.akka.io&#34;&gt;discuss.akka.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat room about &lt;em&gt;using&lt;/em&gt; Akka: &lt;a href=&#34;https://gitter.im/akka/akka&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter%3A-akka%2Fakka-blue.svg?style=flat-square&#34; alt=&#34;gitter: akka/akka&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue tracker: &lt;a href=&#34;https://github.com/akka/akka/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github%3A-issues-blue.svg?style=flat-square&#34; alt=&#34;github: akka/akka&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to that, you may enjoy following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://akka.io/blog/news-archive.html&#34;&gt;news&lt;/a&gt; section of the page, which is updated whenever a new version is released&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://akka.io/blog/article-archive.html&#34;&gt;Akka Team Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/akkateam&#34;&gt;@akkateam&lt;/a&gt; on Twitter&lt;/li&gt; &#xA; &lt;li&gt;Questions tagged &lt;a href=&#34;https://stackoverflow.com/questions/tagged/akka&#34;&gt;#akka on StackOverflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Projects built with Akka: &lt;a href=&#34;https://index.scala-lang.org/search?q=dependencies:akka/*&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/count.svg?q=dependencies:akka/*&amp;amp;subject=scaladex:&amp;amp;color=blue&amp;amp;style=flat-square&#34; alt=&#34;akka-dependency-badge&#34; title=&#34;Built with Akka&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contributions are &lt;em&gt;very&lt;/em&gt; welcome!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you see an issue that you&#39;d like to see fixed, or want to shape out some ideas, the best way to make it happen is to help out by submitting a pull request implementing it. We welcome contributions from all, even you are not yet familiar with this project, We are happy to get you started, and will guide you through the process once you&#39;ve submitted your PR.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://index.scala-lang.org/search?q=dependencies:akka/*&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/count.svg?q=dependencies:akka/*&amp;amp;subject=scaladex:&amp;amp;color=blue&amp;amp;style=flat-square&#34; alt=&#34;akka-dependency-badge&#34; title=&#34;Built with Akka&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://github.com/akka/akka/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more details about the workflow, and general hints on how to prepare your pull request. You can also ask for clarifications or guidance in GitHub issues directly, or in the akka/dev chat if a more real time communication would be of benefit.&lt;/p&gt; &#xA;&lt;p&gt;A chat room is available for all questions related to &lt;em&gt;developing and contributing&lt;/em&gt; to Akka: &lt;a href=&#34;https://gitter.im/akka/dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter%3A-akka%2Fdev-blue.svg?style=flat-square&#34; alt=&#34;gitter: akka/dev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Akka is Open Source and available under the Apache 2 License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/incubator-kyuubi</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/apache/incubator-kyuubi</id>
    <link href="https://github.com/apache/incubator-kyuubi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Kyuubi is a distributed multi-tenant JDBC server for large-scale data processing and analytics, built on top of Apache Spark&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Kyuubi (Incubating)&lt;/h1&gt; &#xA;&lt;img src=&#34;https://svn.apache.org/repos/asf/comdev/project-logos/originals/kyuubi-1.svg?sanitize=true&#34; alt=&#34;Kyuubi logo&#34; height=&#34;120px&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/incubator-kyuubi/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/apache/incubator-kyuubi?label=release&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/incubator-kyuubi&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/github.com/apache/incubator-kyuubi&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/apache/incubator-kyuubi&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/apache/incubator-kyuubi/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/apache/incubator-kyuubi/Kyuubi/master?style=plastic&#34; alt=&#34;GitHub Workflow Status&#34;&gt; &lt;a href=&#34;https://travis-ci.com/apache/incubator-kyuubi&#34;&gt;&lt;img src=&#34;https://api.travis-ci.com/apache/incubator-kyuubi.svg?branch=master&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kyuubi.apache.org/docs/latest/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/kyuubi/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/apache/incubator-kyuubi&#34; alt=&#34;GitHub top language&#34;&gt; &lt;a href=&#34;https://github.com/apache/incubator-kyuubi/graphs/commit-activity&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/apache/incubator-kyuubi&#34; alt=&#34;Commit activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/apache/incubator-kyuubi&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/apache/incubator-kyuubi.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/apache/incubator-kyuubi&#34; title=&#34;Percentage of issues still open&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/open/apache/incubator-kyuubi.svg?sanitize=true&#34; alt=&#34;Percentage of issues still open&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Kyuubi?&lt;/h2&gt; &#xA;&lt;p&gt;Kyuubi is a distributed multi-tenant Thrift JDBC/ODBC server for large-scale data management, processing, and analytics, built on top of Apache Spark and designed to support more engines (i.e., Flink). It has been open-sourced by NetEase since 2018. We are aiming to make Kyuubi an &#34;out-of-the-box&#34; tool for data warehouses and data lakes.&lt;/p&gt; &#xA;&lt;p&gt;Kyuubi provides a pure SQL gateway through Thrift JDBC/ODBC interface for end-users to manipulate large-scale data with pre-programmed and extensible Spark SQL engines. This &#34;out-of-the-box&#34; model minimizes the barriers and costs for end-users to use Spark at the client side. At the server-side, Kyuubi server and engines&#39; multi-tenant architecture provides the administrators a way to achieve computing resource isolation, data security, high availability, high client concurrency, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-kyuubi/master/docs/imgs/kyuubi_positioning.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A HiveServer2-like API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi-tenant Spark Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Running Spark in a serverless way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Target Users&lt;/h3&gt; &#xA;&lt;p&gt;Kyuubi&#39;s goal is to make it easy and efficient for &lt;code&gt;anyone&lt;/code&gt; to use Spark(maybe other engines soon) and facilitate users to handle big data like ordinary data. Here, &lt;code&gt;anyone&lt;/code&gt; means that users do not need to have a Spark technical background but a human language, SQL only. Sometimes, SQL skills are unnecessary when integrating Kyuubi with Apache Superset, which supports rich visualizations and dashboards.&lt;/p&gt; &#xA;&lt;p&gt;In typical big data production environments with Kyuubi, there should be system administrators and end-users.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;System administrators: A small group consists of Spark experts responsible for Kyuubi deployment, configuration, and tuning.&lt;/li&gt; &#xA; &lt;li&gt;End-users: Focus on business data of their own, not where it stores, how it computes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, the Kyuubi community will continuously optimize the whole system with various features, such as History-Based Optimizer, Auto-tuning, Materialized View, SQL Dialects, Functions, e.t.c.&lt;/p&gt; &#xA;&lt;h3&gt;Usage scenarios&lt;/h3&gt; &#xA;&lt;h4&gt;Port workloads from HiveServer2 to Spark SQL&lt;/h4&gt; &#xA;&lt;p&gt;In typical big data production environments, especially secured ones, all bundled services manage access control lists to restricting access to authorized users. For example, Hadoop YARN divides compute resources into queues. With Queue ACLs, it can identify and control which users/groups can take actions on particular queues. Similarly, HDFS ACLs control access of HDFS files by providing a way to set different permissions for specific users/groups.&lt;/p&gt; &#xA;&lt;p&gt;Apache Spark is a unified analytics engine for large-scale data processing. It provides a Distributed SQL Engine, a.k.a, the Spark Thrift Server(STS), designed to be seamlessly compatible with HiveServer2 and get even better performance.&lt;/p&gt; &#xA;&lt;p&gt;HiveServer2 can identify and authenticate a caller, and then if the caller also has permissions for the YARN queue and HDFS files, it succeeds. Otherwise, it fails. However, on the one hand, STS is a single Spark application. The user and queue to which STS belongs are uniquely determined at startup. Consequently, STS cannot leverage cluster managers such as YARN and Kubernetes for resource isolation and sharing or control the access for callers by the single user inside the whole system. On the other hand, the Thrift Server is coupled in the Spark driver&#39;s JVM process. This coupled architect puts a high risk on server stability and makes it unable to handle high client concurrency or apply high availability such as load balancing as it is stateful.&lt;/p&gt; &#xA;&lt;p&gt;Kyuubi extends the use of STS in a multi-tenant model based on a unified interface and relies on the concept of multi-tenancy to interact with cluster managers to finally gain the ability of resources sharing/isolation and data security. The loosely coupled architecture of the Kyuubi server and engine dramatically improves the client concurrency and service stability of the service itself.&lt;/p&gt; &#xA;&lt;h4&gt;DataLake/LakeHouse Support&lt;/h4&gt; &#xA;&lt;p&gt;The vision of Kyuubi is to unify the portal and become an easy-to-use data lake management platform. Different kinds of workloads, such as ETL processing and BI analytics, can be supported by one platform, using one copy of data, with one SQL interface.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Logical View support via Kyuubi DataLake Metadata APIs&lt;/li&gt; &#xA; &lt;li&gt;Multiple Catalogs support&lt;/li&gt; &#xA; &lt;li&gt;SQL Standard Authorization support for DataLake(coming)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cloud Native Support&lt;/h4&gt; &#xA;&lt;p&gt;Kyuubi can deploy its engines on different kinds of Cluster Managers, such as, Hadoop YARN, Kubernetes, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-kyuubi/master/docs/imgs/kyuubi_migrating_yarn_to_k8s.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The Kyuubi Ecosystem(present and future)&lt;/h3&gt; &#xA;&lt;p&gt;The figure below shows our vision for the Kyuubi Ecosystem. Some of them have been realized, some in development, and others would not be possible without your help.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-kyuubi/master/docs/imgs/kyuubi_ecosystem.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Online Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Since Kyuubi 1.3.0-incubating, the Kyuubi online documentation is hosted by &lt;a href=&#34;https://kyuubi.apache.org/&#34;&gt;https://kyuubi.apache.org/&lt;/a&gt;. You can find the latest Kyuubi documentation on &lt;a href=&#34;https://kyuubi.apache.org/docs/latest/&#34;&gt;this web page&lt;/a&gt;. For 1.2 and earlier versions, please check the &lt;a href=&#34;https://kyuubi.readthedocs.io/en/v1.2.0/&#34;&gt;Readthedocs&lt;/a&gt; directly.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Ready? &lt;a href=&#34;https://kyuubi.apache.org/docs/latest/quick_start/quick_start.html&#34;&gt;Getting Started&lt;/a&gt; with Kyuubi.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-kyuubi/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Contributor over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://api7.ai/contributor-graph?chart=contributorOverTime&amp;amp;repo=apache/incubator-kyuubi&#34;&gt;&lt;img src=&#34;https://contributor-graph-api.apiseven.com/contributors-svg?chart=contributorOverTime&amp;amp;repo=apache/incubator-kyuubi&#34; alt=&#34;Contributor over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Aside&lt;/h2&gt; &#xA;&lt;p&gt;The project took its name from a character of a popular Japanese manga - &lt;code&gt;Naruto&lt;/code&gt;. The character is named &lt;code&gt;Kyuubi Kitsune/Kurama&lt;/code&gt;, which is a nine-tailed fox in mythology. &lt;code&gt;Kyuubi&lt;/code&gt; spread the power and spirit of fire, which is used here to represent the powerful &lt;a href=&#34;http://spark.apache.org&#34;&gt;Apache Spark&lt;/a&gt;. Its nine tails stand for end-to-end multi-tenancy support of this project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache 2.0 License. See the &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-kyuubi/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twitter/util</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/twitter/util</id>
    <link href="https://github.com/twitter/util" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wonderful reusable code from Twitter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Twitter Util&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/twitter/util/actions?query=workflow%3A%22continuous+integration%22+branch%3Adevelop&#34;&gt;&lt;img src=&#34;https://github.com/twitter/util/workflows/continuous%20integration/badge.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/twitter/util&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/twitter/util/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/twitter/util/develop/#status&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/status-active-brightgreen.svg?sanitize=true&#34; alt=&#34;Project status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/twitter/finagle?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/twitter/finagle.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/util-core_2.12&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/util-core_2.12/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A bunch of idiomatic, small, general purpose tools.&lt;/p&gt; &#xA;&lt;p&gt;See the Scaladoc &lt;a href=&#34;https://twitter.github.io/util/docs/#com.twitter.util.package&#34;&gt;here&lt;/a&gt; or check out the &lt;a href=&#34;https://twitter.github.io/util&#34;&gt;user guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is used in production at Twitter (and many other organizations), and is being actively developed and maintained.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/util_2.12&#34;&gt;Releases&lt;/a&gt; are done on an approximately monthly schedule. While &lt;a href=&#34;https://semver.org/&#34;&gt;semver&lt;/a&gt; is not followed, the &lt;a href=&#34;https://raw.githubusercontent.com/twitter/util/develop/CHANGELOG.rst&#34;&gt;changelogs&lt;/a&gt; are detailed and include sections on public API breaks and changes in runtime behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We feel that a welcoming community is important and we ask that you follow Twitter&#39;s &lt;a href=&#34;https://github.com/twitter/.github/raw/main/code-of-conduct.md&#34;&gt;Open Source Code of Conduct&lt;/a&gt; in all interactions with the community.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;release&lt;/code&gt; branch of this repository contains the latest stable release of Util, and weekly snapshots are published to the &lt;code&gt;develop&lt;/code&gt; branch. In general pull requests should be submitted against &lt;code&gt;develop&lt;/code&gt;. See &lt;a href=&#34;https://github.com/twitter/util/raw/release/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details about how to contribute.&lt;/p&gt; &#xA;&lt;h1&gt;Using in your project&lt;/h1&gt; &#xA;&lt;p&gt;An example SBT dependency string for the &lt;code&gt;util-core&lt;/code&gt; library would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val utilCore = &#34;com.twitter&#34; %% &#34;util-core&#34; % &#34;22.4.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Units&lt;/h1&gt; &#xA;&lt;h2&gt;Time&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.conversions.DurationOps._&#xA;&#xA;val duration1 = 1.second&#xA;val duration2 = 2.minutes&#xA;duration1.inMillis // =&amp;gt; 1000L&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Space&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.conversions.StorageUnitOps._&#xA;val amount = 8.megabytes&#xA;amount.inBytes // =&amp;gt; 8388608L&#xA;amount.inKilobytes // =&amp;gt; 8192L&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Futures&lt;/h1&gt; &#xA;&lt;p&gt;A Non-actor re-implementation of Scala Futures.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.conversions.DurationOps._&#xA;import com.twitter.util.{Await, Future, Promise}&#xA;&#xA;val f = new Promise[Int]&#xA;val g = f.map { result =&amp;gt; result + 1 }&#xA;f.setValue(1)&#xA;Await.result(g, 1.second) // =&amp;gt; this blocks for the futures result (and eventually returns 2)&#xA;&#xA;// Another option:&#xA;g.onSuccess { result =&amp;gt;&#xA;  println(result) // =&amp;gt; prints &#34;2&#34;&#xA;}&#xA;&#xA;// Using for expressions:&#xA;val xFuture = Future(1)&#xA;val yFuture = Future(2)&#xA;&#xA;for {&#xA;  x &amp;lt;- xFuture&#xA;  y &amp;lt;- yFuture&#xA;} {&#xA;  println(x + y) // =&amp;gt; prints &#34;3&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Future interrupts&lt;/h2&gt; &#xA;&lt;p&gt;Method &lt;code&gt;raise&lt;/code&gt; on &lt;code&gt;Future&lt;/code&gt; (&lt;code&gt;def raise(cause: Throwable)&lt;/code&gt;) raises the interrupt described by &lt;code&gt;cause&lt;/code&gt; to the producer of this &lt;code&gt;Future&lt;/code&gt;. Interrupt handlers are installed on a &lt;code&gt;Promise&lt;/code&gt; using &lt;code&gt;setInterruptHandler&lt;/code&gt;, which takes a partial function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val p = new Promise[T]&#xA;p.setInterruptHandler {&#xA;  case exc: MyException =&amp;gt;&#xA;    // deal with interrupt..&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Interrupts differ in semantics from cancellation in important ways: there can only be one interrupt handler per promise, and interrupts are only delivered if the promise is not yet complete.&lt;/p&gt; &#xA;&lt;h1&gt;Object Pool&lt;/h1&gt; &#xA;&lt;p&gt;The pool order is FIFO.&lt;/p&gt; &#xA;&lt;h2&gt;A pool of constants&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import scala.collection.mutable&#xA;import com.twitter.util.{Await, SimplePool}&#xA;&#xA;val queue = new mutable.Queue[Int] ++ List(1, 2, 3)&#xA;val pool = new SimplePool(queue)&#xA;&#xA;// Note that the pool returns Futures, it doesn&#39;t block on exhaustion.&#xA;assert(Await.result(pool.reserve()) == 1)&#xA;pool.reserve().onSuccess { item =&amp;gt;&#xA;  println(item) // prints &#34;2&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;A pool of dynamically created objects&lt;/h2&gt; &#xA;&lt;p&gt;Here is a pool of even-number generators. It stores 4 numbers at a time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.util.{Future, FactoryPool}&#xA;&#xA;val pool = new FactoryPool[Int](4) {&#xA;  var count = 0&#xA;  def makeItem() = { count += 1; Future(count) }&#xA;  def isHealthy(i: Int) = i % 2 == 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It checks the health when you successfully reserve an object (i.e., when the Future yields).&lt;/p&gt; &#xA;&lt;h1&gt;Hashing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;util-hashing&lt;/code&gt; is a collection of hash functions and hashing distributors (eg. ketama).&lt;/p&gt; &#xA;&lt;p&gt;To use one of the available hash functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.hashing.KeyHasher&#xA;&#xA;KeyHasher.FNV1_32.hashKey(&#34;string&#34;.getBytes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available hash functions are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FNV1_32&#xA;FNV1A_32&#xA;FNV1_64&#xA;FNV1A_64&#xA;KETAMA&#xA;CRC32_ITU&#xA;HSIEH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use &lt;code&gt;KetamaDistributor&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.hashing.{KetamaDistributor, KetamaNode, KeyHasher}&#xA;&#xA;val nodes = List(KetamaNode(&#34;host:port&#34;, 1 /* weight */, &#34;foo&#34; /* handle */))&#xA;val distributor = new KetamaDistributor(nodes, 1 /* num reps */)&#xA;distributor.nodeForHash(&#34;abc&#34;.##) // =&amp;gt; client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Time and Duration&lt;/h1&gt; &#xA;&lt;p&gt;Like arithmetic on doubles, &lt;code&gt;Time&lt;/code&gt; and &lt;code&gt;Duration&lt;/code&gt; arithmetic is now free of overflows. Instead, they overflow to &lt;code&gt;Top&lt;/code&gt; and &lt;code&gt;Bottom&lt;/code&gt; values, which are analogous to positive and negative infinity.&lt;/p&gt; &#xA;&lt;p&gt;Since the resolution of &lt;code&gt;Time.now&lt;/code&gt; has been reduced (and is also more expensive due to its use of system time), a new &lt;code&gt;Stopwatch&lt;/code&gt; API has been introduced in order to calculate durations of time.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s used simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.twitter.util.{Duration, Stopwatch}&#xA;val elapsed: () =&amp;gt; Duration = Stopwatch.start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which is read by applying &lt;code&gt;elapsed&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val duration: Duration = elapsed()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2010 Twitter, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0: &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/testchipip</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/ucb-bar/testchipip</id>
    <link href="https://github.com/ucb-bar/testchipip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;testchipip&lt;/h1&gt; &#xA;&lt;p&gt;Useful IP components for chips. BAR projects generally use these components with &lt;a href=&#34;https://github.com/freechipsproject/rocket-chip&#34;&gt;rocket-chip&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Blocks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Block device model&lt;/li&gt; &#xA; &lt;li&gt;Clock utilities for Chisel, e.g. clock mux, clock divider, etc.&lt;/li&gt; &#xA; &lt;li&gt;SERDES &amp;lt;-&amp;gt; TileLink&lt;/li&gt; &#xA; &lt;li&gt;Custom serial interface for debug with simulator interface&lt;/li&gt; &#xA; &lt;li&gt;TileLink splitter, switcher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Testchipip can be used in your project in one of two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;As an sbt subproject that depends on rocket-chip, as in &lt;a href=&#34;https://github.com/ucb-bar/chipyard/&#34;&gt;chipyard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;As a maven dependency (e.g. write&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;testchipip&#34; % &#34;1.0-020719-SNAPSHOT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in your build.sbt). Check &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/edu/berkeley/cs/testchipip_2.12/&#34;&gt;sonatype&lt;/a&gt; to see the latest published version.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twitter/finagle</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/twitter/finagle</id>
    <link href="https://github.com/twitter/finagle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fault tolerant, protocol-agnostic RPC system&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/twitter/finagle/raw/develop/doc/src/sphinx/_static/logo_medium.png&#34;&gt;&#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Finagle&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/twitter/finagle/actions?query=workflow%3A%22continuous+integration%22+branch%3Adevelop&#34;&gt;&lt;img src=&#34;https://github.com/twitter/finagle/workflows/continuous%20integration/badge.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/twitter/finagle&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/twitter/finagle/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/twitter/finagle/develop/#status&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/status-active-brightgreen.svg?sanitize=true&#34; alt=&#34;Project status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/twitter/finagle?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/twitter/finagle.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/finagle-core_2.12&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/finagle-core_2.12/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is used in production at Twitter (and many other organizations), and is being actively developed and maintained.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/finagle_2.12&#34;&gt;Releases&lt;/a&gt; are done on an approximately monthly schedule. While &lt;a href=&#34;https://semver.org/&#34;&gt;semver&lt;/a&gt; is not followed, the &lt;a href=&#34;https://raw.githubusercontent.com/twitter/finagle/develop/CHANGELOG.rst&#34;&gt;changelogs&lt;/a&gt; are detailed and include sections on public API breaks and changes in runtime behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Getting involved&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://twitter.github.io/finagle/&#34;&gt;https://twitter.github.io/finagle/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Source: &lt;a href=&#34;https://github.com/twitter/finagle/&#34;&gt;https://github.com/twitter/finagle/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mailing List: &lt;a href=&#34;https://groups.google.com/forum/#!forum/finaglers&#34;&gt;finaglers@googlegroups.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat: &lt;a href=&#34;https://gitter.im/twitter/finagle&#34;&gt;https://gitter.im/twitter/finagle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Blog: &lt;a href=&#34;https://finagle.github.io/blog/&#34;&gt;https://finagle.github.io/blog/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finagle is an extensible RPC system for the JVM, used to construct high-concurrency servers. Finagle implements uniform client and server APIs for several protocols, and is designed for high performance and concurrency. Most of Finagle’s code is protocol agnostic, simplifying the implementation of new protocols.&lt;/p&gt; &#xA;&lt;p&gt;For extensive documentation, please see the &lt;a href=&#34;https://twitter.github.io/finagle/guide/&#34;&gt;user guide&lt;/a&gt; and &lt;a href=&#34;https://twitter.github.io/finagle/docs/com/twitter/finagle&#34;&gt;API documentation&lt;/a&gt; websites. Documentation improvements are always welcome, so please send patches our way.&lt;/p&gt; &#xA;&lt;h2&gt;Adopters&lt;/h2&gt; &#xA;&lt;p&gt;The following are a few of the companies that are using Finagle:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://foursquare.com/&#34;&gt;Foursquare&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ing.nl&#34;&gt;ING Bank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pinterest.com/&#34;&gt;Pinterest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://soundcloud.com/&#34;&gt;SoundCloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tumblr.com/&#34;&gt;Tumblr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a more complete list, please see &lt;a href=&#34;https://github.com/twitter/finagle/raw/release/ADOPTERS.md&#34;&gt;our adopter page&lt;/a&gt;. If your organization is using Finagle, consider adding a link there and sending us a pull request!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We feel that a welcoming community is important and we ask that you follow Twitter&#39;s &lt;a href=&#34;https://github.com/twitter/.github/raw/main/code-of-conduct.md&#34;&gt;Open Source Code of Conduct&lt;/a&gt; in all interactions with the community.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;release&lt;/code&gt; branch of this repository contains the latest stable release of Finagle, and weekly snapshots are published to the &lt;code&gt;develop&lt;/code&gt; branch. In general pull requests should be submitted against &lt;code&gt;develop&lt;/code&gt;. See &lt;a href=&#34;https://github.com/twitter/finagle/raw/release/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details about how to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2010 Twitter, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0: &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/plsi-mdf</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/ucb-bar/plsi-mdf</id>
    <link href="https://github.com/ucb-bar/plsi-mdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Macro description format&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MDF&lt;/h1&gt; &#xA;&lt;h2&gt;Scala library for the MDF format&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>chipsalliance/firrtl</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/chipsalliance/firrtl</id>
    <link href="https://github.com/chipsalliance/firrtl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flexible Intermediate Representation for RTL&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/freechipsproject/firrtl/master/doc/images/firrtl_logo.svg?sanitize=true&#34; alt=&#34;FIRRTL&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/freechipsproject/firrtl?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/freechipsproject/firrtl.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/freechipsproject/firrtl&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/chipsalliance/firrtl/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://mergify.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https://gh.mergify.io/badges/chipsalliance/firrtl&amp;amp;style=flat&#34; alt=&#34;Mergify Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Flexible Internal Representation for RTL&lt;/h4&gt; &#xA;&lt;p&gt;Firrtl is an intermediate representation (IR) for digital circuits designed as a platform for writing circuit-level transformations. This repository consists of a collection of transformations (written in Scala) which simplify, verify, transform, or emit their input circuit.&lt;/p&gt; &#xA;&lt;p&gt;A Firrtl compiler is constructed by chaining together these transformations, then writing the final circuit to a file.&lt;/p&gt; &#xA;&lt;p&gt;For a detailed description of Firrtl&#39;s intermediate representation, see the &lt;a href=&#34;https://github.com/chipsalliance/firrtl-spec/releases/latest/download/spec.pdf&#34;&gt;FIRRTL Language Specification&lt;/a&gt; (&lt;a href=&#34;https://github.com/chipsalliance/firrtl-spec&#34;&gt;source&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Wiki Pages and Tutorials&lt;/h4&gt; &#xA;&lt;p&gt;Useful information is on our wiki, located here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/firrtl/wiki&#34;&gt;https://github.com/freechipsproject/firrtl/wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some important pages to read, before writing your own transform:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/firrtl/wiki/Submitting-a-Pull-Request&#34;&gt;Submitting Pull Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/firrtl/wiki/Understanding-Firrtl-Intermediate-Representation&#34;&gt;Understanding Firrtl&#39;s IR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/firrtl/wiki/traversing-a-circuit&#34;&gt;Traversing a Circuit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/firrtl/wiki/Common-Pass-Idioms&#34;&gt;Common Pass Idioms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To write a Firrtl transform, please start with the tutorial here: &lt;a href=&#34;https://github.com/freechipsproject/firrtl/raw/master/src/main/scala/tutorial&#34;&gt;src/main/scala/tutorial&lt;/a&gt;. To run these examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt assembly&#xA;./utils/bin/firrtl -td regress -i regress/RocketCore.fir --custom-transforms tutorial.lesson1.AnalyzeCircuit&#xA;./utils/bin/firrtl -td regress -i regress/RocketCore.fir --custom-transforms tutorial.lesson2.AnalyzeCircuit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Other Tools&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Firrtl syntax highlighting for Vim users: &lt;a href=&#34;https://github.com/azidar/firrtl-syntax&#34;&gt;https://github.com/azidar/firrtl-syntax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Firrtl syntax highlighting for Sublime Text 3 users: &lt;a href=&#34;https://github.com/codelec/highlight-firrtl&#34;&gt;https://github.com/codelec/highlight-firrtl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Firrtl syntax highlighting for Atom users: &lt;a href=&#34;https://atom.io/packages/language-firrtl&#34;&gt;https://atom.io/packages/language-firrtl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Firrtl syntax highlighting, structure view, navigate to corresponding Chisel code for IntelliJ platform: &lt;a href=&#34;https://plugins.jetbrains.com/plugin/14183-easysoc-firrtl&#34;&gt;install&lt;/a&gt;, &lt;a href=&#34;https://github.com/easysoc/easysoc-firrtl&#34;&gt;source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Firrtl mode for Emacs users: &lt;a href=&#34;https://github.com/ibm/firrtl-mode&#34;&gt;https://github.com/ibm/firrtl-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chisel3, an embedded hardware DSL that generates Firrtl: &lt;a href=&#34;https://github.com/freechipsproject/chisel3&#34;&gt;https://github.com/freechipsproject/chisel3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Treadle, a Firrtl Interpreter: &lt;a href=&#34;https://github.com/freechipsproject/treadle&#34;&gt;https://github.com/freechipsproject/treadle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Yosys Verilog-to-Firrtl Front-end: &lt;a href=&#34;https://github.com/cliffordwolf/yosys&#34;&gt;https://github.com/cliffordwolf/yosys&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Installation Instructions&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: The installation instructions should work for OSX/Linux machines. Other environments may not be tested.&lt;/p&gt; &#xA;&lt;h5&gt;Prerequisites&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If not already installed, install &lt;a href=&#34;http://www.veripool.org/projects/verilator/wiki/Installing&#34;&gt;verilator&lt;/a&gt; (Requires at least v3.886)&lt;/li&gt; &#xA; &lt;li&gt;If not already installed, install &lt;a href=&#34;https://github.com/YosysHQ/yosys&#34;&gt;yosys&lt;/a&gt; (Requires at least v0.8)&lt;/li&gt; &#xA; &lt;li&gt;If not already installed, install &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt; (Recommend v1.6.2)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Installation&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository: &lt;code&gt;git clone https://github.com/freechipsproject/firrtl.git &amp;amp;&amp;amp; cd firrtl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile firrtl: &lt;code&gt;sbt compile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run tests: &lt;code&gt;sbt test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build executable (&lt;code&gt;utils/bin/firrtl&lt;/code&gt;): &lt;code&gt;sbt assembly&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can add &lt;code&gt;utils/bin&lt;/code&gt; to your path to call firrtl from other processes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Publish this version locally in order to satisfy other tool chain library dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt publishLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Useful sbt Tips&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run a single test suite: &lt;code&gt;sbt &#34;testOnly firrtlTests.UnitTests&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Continually execute a command: &lt;code&gt;sbt ~compile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Only invoke sbt once:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt&#xA;&amp;gt; compile&#xA;&amp;gt; test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use scalafix to remove unused import and deprecated procedure syntax&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Remove unused import:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt &#34;firrtl/scalafix RemoveUnused&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Remove deprecated procedure syntax&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt &#34;firrtl/scalafix ProcedureSyntax&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using Firrtl as a commandline tool&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;utils/bin/firrtl -i regress/rocket.fir -o regress/rocket.v -X verilog // Compiles rocket-chip to Verilog&#xA;utils/bin/firrtl --help // Returns usage string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using the JQF Fuzzer&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;build.sbt&lt;/code&gt; defines the &lt;code&gt;fuzzer/jqfFuzz&lt;/code&gt; and &lt;code&gt;fuzzer/jqfRepro&lt;/code&gt; tasks. These can be used to randomly generate and run test cases and reproduce failing test cases respectively. These tasks are Scala implementations of the &lt;a href=&#34;https://github.com/rohanpadhye/JQF/tree/master/maven-plugin/src/main/java/edu/berkeley/cs/jqf/plugin&#34;&gt;FuzzGoal and ReproGoal&lt;/a&gt; of the JQF maven plugin and should be functionally identical.&lt;/p&gt; &#xA;&lt;p&gt;The format for the arguments to jqfFuzz are as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt&amp;gt; fuzzer/jqfFuzz &amp;lt;testClassName&amp;gt; &amp;lt;testMethodName&amp;gt; &amp;lt;otherArgs&amp;gt;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  --classpath &amp;lt;value&amp;gt;       the classpath to instrument and load the test class from&#xA;  --outputDirectory &amp;lt;value&amp;gt; the directory to output test results&#xA;  --testClassName &amp;lt;value&amp;gt;   the full class path of the test class&#xA;  --testMethod &amp;lt;value&amp;gt;      the method of the test class to run&#xA;  --excludes &amp;lt;value&amp;gt;        comma-separated list of FQN prefixes to exclude from coverage instrumentation&#xA;  --includes &amp;lt;value&amp;gt;        comma-separated list of FQN prefixes to forcibly include, even if they match an exclude&#xA;  --time &amp;lt;value&amp;gt;            the duration of time for which to run fuzzing&#xA;  --blind                   whether to generate inputs blindly without taking into account coverage feedback&#xA;  --engine &amp;lt;value&amp;gt;          the fuzzing engine, valid choices are zest|zeal&#xA;  --disableCoverage         disable code-coverage instrumentation&#xA;  --inputDirectory &amp;lt;value&amp;gt;  the name of the input directory containing seed files&#xA;  --saveAll                 save ALL inputs generated during fuzzing, even the ones that do not have any unique code coverage&#xA;  --libFuzzerCompatOutput   use libFuzzer like output instead of AFL like stats screen&#xA;  --quiet                   avoid printing fuzzing statistics progress in the console&#xA;  --exitOnCrash             stop fuzzing once a crash is found.&#xA;  --runTimeout &amp;lt;value&amp;gt;      the timeout for each individual trial, in milliseconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;fuzzer/jqfFuzz&lt;/code&gt; sbt task is a thin wrapper around the &lt;code&gt;firrtl.jqf.jqfFuzz&lt;/code&gt; main method that provides the &lt;code&gt;--classpath&lt;/code&gt; argument and a default &lt;code&gt;--outputDirectory&lt;/code&gt; and passes the rest of the arguments to the main method verbatim.&lt;/p&gt; &#xA;&lt;p&gt;The results will be put in the &lt;code&gt;fuzzer/target/JQf/$testClassName/$testMethod&lt;/code&gt; directory. Input files in the &lt;code&gt;fuzzer/target/JQf/$testClassName/$testMethod/corpus&lt;/code&gt; and &lt;code&gt;fuzzer/target/JQf/$testClassName/$testMethod/failures&lt;/code&gt; directories can be passed as inputs to the &lt;code&gt;fuzzer/jqfRepro&lt;/code&gt; task.&lt;/p&gt; &#xA;&lt;p&gt;The format for the arguments to jqfRepro are the same as &lt;code&gt;jqfFuzz&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt&amp;gt; fuzzer/jqfRepro &amp;lt;testClassName&amp;gt; &amp;lt;testMethodName&amp;gt; &amp;lt;otherArgs&amp;gt;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  --classpath &amp;lt;value&amp;gt;      the classpath to instrument and load the test class from&#xA;  --testClassName &amp;lt;value&amp;gt;  the full class path of the test class&#xA;  --testMethod &amp;lt;value&amp;gt;     the method of the test class to run&#xA;  --input &amp;lt;value&amp;gt;          input file or directory to reproduce test case(s)&#xA;  --logCoverage &amp;lt;value&amp;gt;    output file to dump coverage info&#xA;  --excludes &amp;lt;value&amp;gt;       comma-separated list of FQN prefixes to exclude from coverage instrumentation&#xA;  --includes &amp;lt;value&amp;gt;       comma-separated list of FQN prefixes to forcibly include, even if they match an exclude&#xA;  --printArgs              whether to print the args to each test case&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;code&gt;fuzzer/jqfFuzz&lt;/code&gt;, the &lt;code&gt;fuzzer/jqfRepro&lt;/code&gt; sbt task is a thin wrapper around the &lt;code&gt;firrtl.jqf.jqfRepro&lt;/code&gt; main method that provides the &lt;code&gt;--classpath&lt;/code&gt; argument and a default &lt;code&gt;--outputDirectory&lt;/code&gt; and passes the rest of the arguments to the main method verbatim.&lt;/p&gt; &#xA;&lt;h5&gt;Citing Firrtl&lt;/h5&gt; &#xA;&lt;p&gt;If you use Firrtl in a paper, please cite the following ICCAD paper and technical report: &lt;a href=&#34;https://ieeexplore.ieee.org/document/8203780&#34;&gt;https://ieeexplore.ieee.org/document/8203780&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@INPROCEEDINGS{8203780, &#xA;author={A. Izraelevitz and J. Koenig and P. Li and R. Lin and A. Wang and A. Magyar and D. Kim and C. Schmidt and C. Markley and J. Lawson and J. Bachrach}, &#xA;booktitle={2017 IEEE/ACM International Conference on Computer-Aided Design (ICCAD)}, &#xA;title={Reusability is FIRRTL ground: Hardware construction languages, compiler frameworks, and transformations}, &#xA;year={2017}, &#xA;volume={}, &#xA;number={}, &#xA;pages={209-216}, &#xA;keywords={field programmable gate arrays;hardware description languages;program compilers;software reusability;hardware development practices;hardware libraries;open-source hardware intermediate representation;hardware compiler transformations;Hardware construction languages;retargetable compilers;software development;virtual Cambrian explosion;hardware compiler frameworks;parameterized libraries;FIRRTL;FPGA mappings;Chisel;Flexible Intermediate Representation for RTL;Reusability;Hardware;Libraries;Hardware design languages;Field programmable gate arrays;Tools;Open source software;RTL;Design;FPGA;ASIC;Hardware;Modeling;Reusability;Hardware Design Language;Hardware Construction Language;Intermediate Representation;Compiler;Transformations;Chisel;FIRRTL}, &#xA;doi={10.1109/ICCAD.2017.8203780}, &#xA;ISSN={1558-2434}, &#xA;month={Nov},}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-9.html&#34;&gt;https://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-9.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@techreport{Li:EECS-2016-9,&#xA;    Author = {Li, Patrick S. and Izraelevitz, Adam M. and Bachrach, Jonathan},&#xA;    Title = {Specification for the FIRRTL Language},&#xA;    Institution = {EECS Department, University of California, Berkeley},&#xA;    Year = {2016},&#xA;    Month = {Feb},&#xA;    URL = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-9.html},&#xA;    Number = {UCB/EECS-2016-9}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>lichess-org/lila</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/lichess-org/lila</id>
    <link href="https://github.com/lichess-org/lila" rel="alternate"></link>
    <summary type="html">&lt;p&gt;♞ lichess.org: the forever free, adless and open source chess server ♞&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://lichess.org&#34;&gt;lichess.org&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lichess-org/lila/actions?query=workflow%3A%22Build+server%22&#34;&gt;&lt;img src=&#34;https://github.com/lichess-org/lila/workflows/Build%20server/badge.svg?sanitize=true&#34; alt=&#34;Build server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lichess-org/lila/actions?query=workflow%3A%22Build+assets%22&#34;&gt;&lt;img src=&#34;https://github.com/lichess-org/lila/workflows/Build%20assets/badge.svg?sanitize=true&#34; alt=&#34;Build assets&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/lichess&#34;&gt;&lt;img src=&#34;https://d322cqt584bo4o.cloudfront.net/lichess/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/lichess&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-%40lichess-blue.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/lichess-org/lila/master/public/images/home-bicolor.png&#34; alt=&#34;Lichess homepage&#34; title=&#34;Lichess comes with light and dark theme, this screenshot shows both.&#34;&gt; &#xA;&lt;p&gt;Lila (li[chess in sca]la) is a free online chess game server focused on &lt;a href=&#34;https://lichess.org/games&#34;&gt;realtime&lt;/a&gt; gameplay and ease of use.&lt;/p&gt; &#xA;&lt;p&gt;It features a &lt;a href=&#34;https://lichess.org/games/search&#34;&gt;search engine&lt;/a&gt;, &lt;a href=&#34;https://lichess.org/ief49lif&#34;&gt;computer analysis&lt;/a&gt; distributed with &lt;a href=&#34;https://github.com/lichess-org/fishnet&#34;&gt;fishnet&lt;/a&gt;, &lt;a href=&#34;https://lichess.org/tournament&#34;&gt;tournaments&lt;/a&gt;, &lt;a href=&#34;https://lichess.org/simul&#34;&gt;simuls&lt;/a&gt;, &lt;a href=&#34;https://lichess.org/forum&#34;&gt;forums&lt;/a&gt;, &lt;a href=&#34;https://lichess.org/team&#34;&gt;teams&lt;/a&gt;, &lt;a href=&#34;https://lichess.org/training&#34;&gt;tactic trainer&lt;/a&gt;, a &lt;a href=&#34;https://lichess.org/mobile&#34;&gt;mobile app&lt;/a&gt;, and a &lt;a href=&#34;https://lichess.org/study&#34;&gt;shared analysis board&lt;/a&gt;. The UI is available in more than &lt;a href=&#34;https://crowdin.com/project/lichess&#34;&gt;130 languages&lt;/a&gt; thanks to the community.&lt;/p&gt; &#xA;&lt;p&gt;Lichess is written in &lt;a href=&#34;https://www.scala-lang.org/&#34;&gt;Scala 2.13&lt;/a&gt;, and relies on the &lt;a href=&#34;https://www.playframework.com/&#34;&gt;Play 2.8&lt;/a&gt; framework. &lt;a href=&#34;https://com-lihaoyi.github.io/scalatags/&#34;&gt;scalatags&lt;/a&gt; is used for templating. Pure chess logic is contained in the &lt;a href=&#34;https://github.com/lichess-org/scalachess&#34;&gt;scalachess&lt;/a&gt; submodule. The server is fully asynchronous, making heavy use of Scala Futures and &lt;a href=&#34;https://akka.io&#34;&gt;Akka streams&lt;/a&gt;. WebSocket connections are handled by a &lt;a href=&#34;https://github.com/lichess-org/lila-ws&#34;&gt;separate server&lt;/a&gt; that communicates using &lt;a href=&#34;https://redis.io/&#34;&gt;redis&lt;/a&gt;. Lichess talks to &lt;a href=&#34;https://stockfishchess.org/&#34;&gt;Stockfish&lt;/a&gt; deployed in an &lt;a href=&#34;https://github.com/lichess-org/fishnet&#34;&gt;AI cluster&lt;/a&gt; of donated servers. It uses &lt;a href=&#34;https://www.mongodb.com&#34;&gt;MongoDB&lt;/a&gt; to store more than 1.7 billion games, which are indexed by &lt;a href=&#34;https://github.com/elastic/elasticsearch&#34;&gt;elasticsearch&lt;/a&gt;. HTTP requests and WebSocket connections can be proxied by &lt;a href=&#34;https://nginx.org&#34;&gt;nginx&lt;/a&gt;. The web client is written in &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; and &lt;a href=&#34;https://github.com/snabbdom/snabbdom&#34;&gt;snabbdom&lt;/a&gt;, using &lt;a href=&#34;https://sass-lang.com/&#34;&gt;Sass&lt;/a&gt; to generate CSS. The &lt;a href=&#34;https://lichess.org/blog&#34;&gt;blog&lt;/a&gt; uses a free open content plan from &lt;a href=&#34;https://prismic.io&#34;&gt;prismic.io&lt;/a&gt;. All rated games are published in a &lt;a href=&#34;https://database.lichess.org&#34;&gt;free PGN database&lt;/a&gt;. Browser testing done with &lt;a href=&#34;https://www.browserstack.com&#34;&gt;Browserstack&lt;/a&gt;. Proxy detection done with &lt;a href=&#34;https://www.ip2location.com/database/ip2proxy&#34;&gt;IP2Proxy database&lt;/a&gt;. Please help us &lt;a href=&#34;https://crowdin.com/project/lichess&#34;&gt;translate Lichess with Crowdin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://lichess.org/source&#34;&gt;lichess.org/source&lt;/a&gt; for a list of repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/lichess&#34;&gt;Join us on Discord&lt;/a&gt; for more info. Use &lt;a href=&#34;https://github.com/lichess-org/lila/issues&#34;&gt;GitHub issues&lt;/a&gt; for bug reports and feature requests.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./lila # thin wrapper around sbt&#xA;run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Wiki describes &lt;a href=&#34;https://github.com/lichess-org/lila/wiki/Lichess-Development-Onboarding&#34;&gt;how to setup a development environment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;HTTP API&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to use the &lt;a href=&#34;https://lichess.org/api&#34;&gt;Lichess API&lt;/a&gt; in your applications and websites.&lt;/p&gt; &#xA;&lt;h2&gt;Supported browsers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chromium / Chrome&lt;/td&gt; &#xA;   &lt;td&gt;last 10&lt;/td&gt; &#xA;   &lt;td&gt;Full support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Firefox&lt;/td&gt; &#xA;   &lt;td&gt;61+&lt;/td&gt; &#xA;   &lt;td&gt;Full support (fastest local analysis since FF 79)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Edge&lt;/td&gt; &#xA;   &lt;td&gt;91+&lt;/td&gt; &#xA;   &lt;td&gt;Full support (reasonable support for 17+)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Opera&lt;/td&gt; &#xA;   &lt;td&gt;55+&lt;/td&gt; &#xA;   &lt;td&gt;Reasonable support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Safari&lt;/td&gt; &#xA;   &lt;td&gt;11.1+&lt;/td&gt; &#xA;   &lt;td&gt;Reasonable support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Older browsers (including any version of Internet Explorer) will not work. For your own sake, please upgrade. Security and performance, think about it!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Lila is licensed under the GNU Affero General Public License 3 or any later version at your choice with an exception for Highcharts. See &lt;a href=&#34;https://github.com/lichess-org/lila/raw/master/COPYING.md&#34;&gt;copying&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://lichess.org/thanks&#34;&gt;lichess.org/thanks&lt;/a&gt; and the contributors here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lichess-org/lila/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=lichess-org/lila&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Competence development program&lt;/h2&gt; &#xA;&lt;p&gt;Lichess would like to support its contributors in their competence development by covering costs of relevant training materials and activities. This is a small way to further empower contributors who have given their time to Lichess and to enable or improve additional contributions to Lichess in the future. For more information, including how to apply, check &lt;a href=&#34;https://lichess.org/page/competence-development&#34;&gt;Competence Development for Lichess contributors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>firesim/firesim</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/firesim/firesim</id>
    <link href="https://github.com/firesim/firesim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FireSim: Easy-to-use, Scalable, FPGA-accelerated Cycle-accurate Hardware Simulation in the Cloud&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FireSim: Easy-to-use, Scalable, FPGA-accelerated Cycle-accurate Hardware Simulation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://readthedocs.org/projects/firesim/badge/&#34; alt=&#34;FireSim Documentation Status&#34;&gt; &lt;img src=&#34;https://github.com/firesim/firesim/actions/workflows/firesim-run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Actions Status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#using-firesim&#34;&gt;Using FireSim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#what-is-firesim&#34;&gt;What is FireSim?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#what-can-i-simulate-with-firesim&#34;&gt;What can I simulate with FireSim?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#need-help&#34;&gt;Need help?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#publications&#34;&gt;Publications&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using FireSim&lt;/h2&gt; &#xA;&lt;p&gt;To get started with using FireSim, see the tutorials on the FireSim documentation site: &lt;a href=&#34;https://docs.fires.im/&#34;&gt;https://docs.fires.im/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another good overview (in video format) is our tutorial from the Chisel Community Conference on &lt;a href=&#34;https://www.youtube.com/watch?v=S3OriQnJXYQ&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is FireSim?&lt;/h2&gt; &#xA;&lt;p&gt;FireSim is an &lt;a href=&#34;https://github.com/firesim/firesim&#34;&gt;open-source&lt;/a&gt; cycle-accurate FPGA-accelerated full-system hardware simulation platform that runs on cloud FPGAs (Amazon EC2 F1). FireSim is actively developed in the &lt;a href=&#34;http://bar.eecs.berkeley.edu&#34;&gt;Berkeley Architecture Research Group&lt;/a&gt; in the &lt;a href=&#34;https://eecs.berkeley.edu&#34;&gt;Electrical Engineering and Computer Sciences Department&lt;/a&gt; at the &lt;a href=&#34;https://berkeley.edu&#34;&gt;University of California, Berkeley&lt;/a&gt;. You can learn more about FireSim in the following places:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;FireSim website&lt;/strong&gt;: &lt;a href=&#34;https://fires.im&#34;&gt;https://fires.im&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FireSim ISCA 2018 Paper&lt;/strong&gt;: &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.pdf&#34;&gt;Paper PDF&lt;/a&gt; | &lt;a href=&#34;https://ieeexplore.ieee.org/document/8416816&#34;&gt;IEEE Xplore&lt;/a&gt; | &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3276543&#34;&gt;ACM DL&lt;/a&gt; | &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.bib.txt&#34;&gt;BibTeX&lt;/a&gt; | Selected as one of IEEE Micro’s “Top Picks from Computer Architecture Conferences, 2018”.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FireSim documentation&lt;/strong&gt;: &lt;a href=&#34;https://docs.fires.im&#34;&gt;https://docs.fires.im&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scala API Documentation&lt;/strong&gt;: &lt;a href=&#34;https://fires.im/firesim/latest/api/&#34;&gt;https://fires.im/firesim/latest/api/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Two-minute lightning talk from ISCA 2018&lt;/strong&gt; (FireSim simulating a datacenter): &lt;a href=&#34;https://www.youtube.com/watch?v=4XwoSe5c8lY&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chisel Community Conference Tutorial&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=S3OriQnJXYQ&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Updates/News&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; | &lt;a href=&#34;https://fires.im/blog/&#34;&gt;FireSim Blog&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/firesimproject&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What can I simulate with FireSim?&lt;/h2&gt; &#xA;&lt;p&gt;FireSim can simulate arbitrary hardware designs written in &lt;a href=&#34;https://chisel.eecs.berkeley.edu&#34;&gt;Chisel&lt;/a&gt;. With FireSim, you can write your own RTL (processors, accelerators, etc.) and run it at near-FPGA-prototype speeds on cloud FPGAs, while obtaining cycle-accurate performance results (i.e. matching what you would find if you taped-out a chip). Depending on the hardware design and the simulation scale, FireSim simulations run at &lt;strong&gt;10s to 100s of MHz&lt;/strong&gt;. You can also integrate custom software models for components that you don&#39;t want/need to write as RTL.&lt;/p&gt; &#xA;&lt;p&gt;FireSim was originally developed to simulate datacenters by combining open RTL for RISC-V processors with a custom cycle-accurate network simulation. By default, FireSim provides all the RTL and models necessary to &lt;strong&gt;cycle-exactly&lt;/strong&gt; simulate from &lt;strong&gt;one to thousands of multi-core compute nodes&lt;/strong&gt;, derived directly from &lt;strong&gt;silicon-proven&lt;/strong&gt; and &lt;strong&gt;open&lt;/strong&gt; target-RTL (&lt;a href=&#34;https://riscv.org/&#34;&gt;RISC-V&lt;/a&gt; &lt;a href=&#34;https://github.com/freechipsproject/rocket-chip&#34;&gt;Rocket Chip&lt;/a&gt; and &lt;a href=&#34;https://github.com/ucb-bar/riscv-boom&#34;&gt;BOOM&lt;/a&gt;), with an optional &lt;strong&gt;cycle-accurate network simulation&lt;/strong&gt; tying them together. FireSim also provides a &lt;a href=&#34;https://github.com/firesim/firesim-software&#34;&gt;Linux distribution&lt;/a&gt; that is compatible with the RISC-V systems it simulates and &lt;a href=&#34;https://docs.fires.im/en/latest/Advanced-Usage/Workloads/Defining-Custom-Workloads.html&#34;&gt;automates&lt;/a&gt; the process of including new workloads into this Linux distribution. These simulations run fast enough to interact with Linux on the simulated system at the command line, &lt;a href=&#34;https://twitter.com/firesimproject/status/1031267637303508993&#34;&gt;like a real computer&lt;/a&gt;. Users can even &lt;a href=&#34;http://docs.fires.im/en/latest/Advanced-Usage/Miscellaneous-Tips.html#experimental-support-for-sshing-into-simulated-nodes-and-accessing-the-internet-from-within-simulations&#34;&gt;SSH into simulated systems in FireSim&lt;/a&gt; and access the Internet from within them.&lt;/p&gt; &#xA;&lt;p&gt;Head to the &lt;a href=&#34;https://fires.im&#34;&gt;FireSim Website&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the FireSim Mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/firesim&#34;&gt;https://groups.google.com/forum/#!forum/firesim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Post an issue on this repo&lt;/li&gt; &#xA; &lt;li&gt;Follow on Twitter for project updates: &lt;a href=&#34;https://twitter.com/firesimproject&#34;&gt;@firesimproject&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ISCA 2018&lt;/strong&gt;: FireSim: FPGA-Accelerated Cycle-Exact Scale-Out System Simulation in the Public Cloud&lt;/h3&gt; &#xA;&lt;p&gt;You can learn more about FireSim in our ISCA 2018 paper, which covers the overall FireSim infrastructure and large distributed simulations of networked clusters. This paper was &lt;strong&gt;selected as one of IEEE Micro’s “Top Picks from Computer Architecture Conferences, 2018”.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sagar Karandikar, Howard Mao, Donggyu Kim, David Biancolin, Alon Amid, Dayeol Lee, Nathan Pemberton, Emmanuel Amaro, Colin Schmidt, Aditya Chopra, Qijing Huang, Kyle Kovacs, Borivoje Nikolic, Randy Katz, Jonathan Bachrach, and Krste Asanović. &lt;strong&gt;FireSim: FPGA-Accelerated Cycle-Exact Scale-Out System Simulation in the Public Cloud&lt;/strong&gt;. &lt;em&gt;In proceedings of the 45th International Symposium on Computer Architecture (ISCA’18)&lt;/em&gt;, Los Angeles, CA, June 2018.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.pdf&#34;&gt;Paper PDF&lt;/a&gt; | &lt;a href=&#34;https://ieeexplore.ieee.org/document/8416816&#34;&gt;IEEE Xplore&lt;/a&gt; | &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3276543&#34;&gt;ACM DL&lt;/a&gt; | &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.bib.txt&#34;&gt;BibTeX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;FPGA 2019&lt;/strong&gt;: FASED: FPGA-Accelerated Simulation and Evaluation of DRAM&lt;/h3&gt; &#xA;&lt;p&gt;Our paper from FPGA 2019 details the DRAM model used in FireSim:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;David Biancolin, Sagar Karandikar, Donggyu Kim, Jack Koenig, Andrew Waterman, Jonathan Bachrach, Krste Asanović, &lt;strong&gt;FASED: FPGA-Accelerated Simulation and Evaluation of DRAM&lt;/strong&gt;, &lt;em&gt;In proceedings of the 27th ACM/SIGDA International Symposium on Field-Programmable Gate Arrays&lt;/em&gt;, Seaside, CA, February 2018.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://people.eecs.berkeley.edu/~biancolin/papers/fased-fpga19.pdf&#34;&gt;Paper PDF&lt;/a&gt; | &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3293894&#34;&gt;ACM DL&lt;/a&gt; | &lt;a href=&#34;https://people.eecs.berkeley.edu/~biancolin/bib/fased-fpga19.bib&#34;&gt;BibTeX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;IEEE Micro Top Picks of 2018&lt;/strong&gt;: FireSim: FPGA-Accelerated, Cycle-Accurate Scale-Out System Simulation in the Public Cloud&lt;/h3&gt; &#xA;&lt;p&gt;This article discusses several updates since the FireSim ISCA 2018 paper:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sagar Karandikar, Howard Mao, Donggyu Kim, David Biancolin, Alon Amid, Dayeol Lee, Nathan Pemberton, Emmanuel Amaro, Colin Schmidt, Aditya Chopra, Qijing Huang, Kyle Kovacs, Borivoje Nikolic, Randy Katz, Jonathan Bachrach, and Krste Asanović. &lt;strong&gt;FireSim: FPGA-Accelerated Cycle-Exact Scale-Out System Simulation in the Public Cloud&lt;/strong&gt;. &lt;em&gt;IEEE Micro, vol. 39, no. 3, pp. 56-65, (Micro Top Picks 2018 Issue)&lt;/em&gt;. May-June 2019.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sagark.org/assets/pubs/firesim-micro-top-picks2018.pdf&#34;&gt;Article PDF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ICCAD 2019&lt;/strong&gt;: Golden Gate: Bridging The Resource-Efficiency Gap Between ASICs and FPGA Prototypes&lt;/h3&gt; &#xA;&lt;p&gt;Our paper describing FireSim&#39;s Compiler, &lt;em&gt;Golden Gate&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Albert Magyar, David T. Biancolin, Jack Koenig, Sanjit Seshia, Jonathan Bachrach, Krste Asanović, &lt;strong&gt;Golden Gate: Bridging The Resource-Efficiency Gap Between ASICs and FPGA Prototypes&lt;/strong&gt;, &lt;em&gt;In proceedings of the 39th International Conference on Computer-Aided Design (ICCAD &#39;19)&lt;/em&gt;, Westminster, CO, November 2019.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://davidbiancolin.github.io/papers/goldengate-iccad19.pdf&#34;&gt;Paper PDF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ASPLOS 2020&lt;/strong&gt;: FirePerf: FPGA-Accelerated Full-System Hardware/Software Performance Profiling and Co-Design&lt;/h3&gt; &#xA;&lt;p&gt;Our paper to appear in ASPLOS 2020 discusses system-level profiling features in FireSim:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sagar Karandikar, Albert Ou, Alon Amid, Howard Mao, Randy Katz, Borivoje Nikolić, and Krste Asanović, &lt;strong&gt;FirePerf: FPGA-Accelerated Full-System Hardware/Software Performance Profiling and Co-Design&lt;/strong&gt;, &lt;em&gt;In Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2020)&lt;/em&gt;, Lausanne, Switzerland, March 2020.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sagark.org/assets/pubs/fireperf-asplos2020.pdf&#34;&gt;Paper PDF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;IEEE MICRO 2021&lt;/strong&gt;: Accessible, FPGA Resource-Optimized Simulation of Multi-Clock Systems in FireSim&lt;/h3&gt; &#xA;&lt;p&gt;In this special issue, we describe the automated instance-multithreading optimization and support for multiple clock domains in the simulated target.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;David Biancolin, Albert Magyar, Sagar Karandikar, Alon Amid, Borivoje Nikolić, Jonathan Bachrach, Krste Asanović. &lt;strong&gt;Accessible, FPGA Resource-Optimized Simulation of Multi-Clock Systems in FireSim&lt;/strong&gt;. &lt;em&gt;In IEEE Micro Volume: 41, Issue: 4, July-Aug. 1 2021&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://davidbiancolin.github.io/papers/firesim-micro21.pdf&#34;&gt;Article PDF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find other publications, including publications that &lt;em&gt;use&lt;/em&gt; FireSim on the &lt;a href=&#34;https://fires.im/publications/&#34;&gt;FireSim Website&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chipsalliance/rocket-chip</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/chipsalliance/rocket-chip</id>
    <link href="https://github.com/chipsalliance/rocket-chip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rocket Chip Generator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rocket Chip Generator &lt;span&gt;🚀&lt;/span&gt; &lt;img src=&#34;https://github.com/chipsalliance/rocket-chip/workflows/Continuous%20Integration/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the Rocket chip generator necessary to instantiate the RISC-V Rocket Core. For more information on Rocket Chip, please consult our &lt;a href=&#34;http://www.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-17.html&#34;&gt;technical report&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#quick&#34;&gt;Quick instructions&lt;/a&gt; for those who want to dive directly into the details without knowing exactly what&#39;s in the repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#what&#34;&gt;What&#39;s in the Rocket chip generator repository?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#how&#34;&gt;How should I use the Rocket chip generator?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#emulator&#34;&gt;Using the cycle-accurate Verilator simulation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#fpga&#34;&gt;Mapping a Rocket core down to an FPGA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#vlsi&#34;&gt;Pushing a Rocket core through the VLSI tools&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#param&#34;&gt;How can I parameterize my Rocket chip?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#debug&#34;&gt;Debugging with GDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#ide&#34;&gt;Building Rocket Chip with an IDE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;quick&#34;&gt;&lt;/a&gt; Quick Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Checkout The Code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ucb-bar/rocket-chip.git&#xA;$ cd rocket-chip&#xA;$ git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up the RISCV environment variable&lt;/h3&gt; &#xA;&lt;p&gt;To build the rocket-chip repository, you must point the RISCV environment variable to your rocket-tools installation directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export RISCV=/path/to/riscv/toolchain/installation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rocket-tools repository known to work with rocket-chip is noted in the file riscv-tools.hash. However, any recent rocket-tools should work. You can build rocket-tools as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/freechipsproject/rocket-tools&#xA;$ cd rocket-tools&#xA;$ git submodule update --init --recursive&#xA;$ export RISCV=/path/to/install/riscv/toolchain&#xA;$ export MAKEFLAGS=&#34;$MAKEFLAGS -jN&#34; # Assuming you have N cores on your host system&#xA;$ ./build.sh&#xA;$ ./build-rv32ima.sh (if you are using RV32).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Necessary Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;You may need to install some additional packages to use this repository. Rather than list all dependencies here, please see the appropriate section of the READMEs for each of the subprojects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/rocket-tools/raw/master/README.md&#34;&gt;rocket-tools &#34;Ubuntu Packages Needed&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ucb-bar/chisel3#installation&#34;&gt;chisel3 &#34;Installation&#34;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building The Project&lt;/h3&gt; &#xA;&lt;p&gt;First, to build the C simulator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd emulator&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to build the VCS simulator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd vsim&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In either case, you can run a set of assembly tests or simple benchmarks (Assuming you have N cores on your host system):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make -jN run-asm-tests&#xA;$ make -jN run-bmark-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build a C simulator that is capable of VCD waveform generation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd emulator&#xA;$ make debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to run the assembly tests on the C simulator and generate waveforms:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make -jN run-asm-tests-debug&#xA;$ make -jN run-bmark-tests-debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate FPGA- or VLSI-synthesizable Verilog (output will be in &lt;code&gt;vsim/generated-src&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd vsim&#xA;$ make verilog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the Scala tests (&lt;code&gt;sbt test&lt;/code&gt;) or linter (&lt;code&gt;sbt scalafix&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd regression&#xA;&#xA;# Scala tests&#xA;$ make scalatest SUITE=foo&#xA;&#xA;# Scala linter, automatically modifying files to correct issues&#xA;$ make scalafix SUITE=foo&#xA;&#xA;# Scala linter, only printing out issues&#xA;$ make scalafix-check SUITE=foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Keeping Your Repo Up-to-Date&lt;/h3&gt; &#xA;&lt;p&gt;If you are trying to keep your repo up to date with this GitHub repo, you also need to keep the submodules and tools up to date.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ # Get the newest versions of the files in this repo&#xA;$ git pull origin master&#xA;$ # Make sure the submodules have the correct versions&#xA;$ git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If rocket-tools version changes, you should recompile and install rocket-tools according to the directions in the &lt;a href=&#34;https://github.com/freechipsproject/rocket-tools/raw/master/README.md&#34;&gt;rocket-tools/README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd rocket-tools&#xA;$ ./build.sh&#xA;$ ./build-rv32ima.sh (if you are using RV32)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;what&#34;&gt;&lt;/a&gt; What&#39;s in the Rocket chip generator repository?&lt;/h2&gt; &#xA;&lt;p&gt;The rocket-chip repository is a meta-repository that points to several sub-repositories using &lt;a href=&#34;http://git-scm.com/book/en/Git-Tools-Submodules&#34;&gt;Git submodules&lt;/a&gt;. Those repositories contain tools needed to generate and test SoC designs. This respository also contains code that is used to generate RTL. Hardware generation is done using &lt;a href=&#34;http://chisel.eecs.berkeley.edu&#34;&gt;Chisel&lt;/a&gt;, a hardware construction language embedded in Scala. The rocket-chip generator is a Scala program that invokes the Chisel compiler in order to emit RTL describing a complete SoC. The following sections describe the components of this repository.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;what_submodules&#34;&gt;&lt;/a&gt;Git Submodules&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;Git submodules&lt;/a&gt; allow you to keep a Git repository as a subdirectory of another Git repository. For projects being co-developed with the Rocket Chip Generator, we have often found it expedient to track them as submodules, allowing for rapid exploitation of new features while keeping commit histories separate. As submoduled projects adopt stable public APIs, we transition them to external dependencies. Here are the submodules that are currently being tracked in the rocket-chip repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;chisel3&lt;/strong&gt; (&lt;a href=&#34;https://github.com/ucb-bar/chisel3&#34;&gt;https://github.com/ucb-bar/chisel3&lt;/a&gt;): The Rocket Chip Generator uses &lt;a href=&#34;http://chisel.eecs.berkeley.edu&#34;&gt;Chisel&lt;/a&gt; to generate RTL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;firrtl&lt;/strong&gt; (&lt;a href=&#34;https://github.com/ucb-bar/firrtl&#34;&gt;https://github.com/ucb-bar/firrtl&lt;/a&gt;): &lt;a href=&#34;http://bar.eecs.berkeley.edu/projects/2015-firrtl.html&#34;&gt;Firrtl (Flexible Internal Representation for RTL)&lt;/a&gt; is the intermediate representation of RTL constructions used by Chisel3. The Chisel3 compiler generates a Firrtl representation, from which the final product (Verilog code, C code, etc) is generated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;hardfloat&lt;/strong&gt; (&lt;a href=&#34;https://github.com/ucb-bar/berkeley-hardfloat&#34;&gt;https://github.com/ucb-bar/berkeley-hardfloat&lt;/a&gt;): Hardfloat holds Chisel code that generates parameterized IEEE 754-2008 compliant floating-point units used for fused multiply-add operations, conversions between integer and floating-point numbers, and conversions between floating-point conversions with different precision.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rocket-tools&lt;/strong&gt; (&lt;a href=&#34;https://github.com/freechipsproject/rocket-tools&#34;&gt;https://github.com/freechipsproject/rocket-tools&lt;/a&gt;): We tag a version of RISC-V software tools that work with the RTL committed in this repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;torture&lt;/strong&gt; (&lt;a href=&#34;https://github.com/ucb-bar/riscv-torture&#34;&gt;https://github.com/ucb-bar/riscv-torture&lt;/a&gt;): This module is used to generate and execute constrained random instruction streams that can be used to stress-test both the core and uncore portions of the design.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;what_packages&#34;&gt;&lt;/a&gt;Scala Packages&lt;/h3&gt; &#xA;&lt;p&gt;In addition to submodules that track independent Git repositories, the rocket-chip code base is itself factored into a number of Scala packages. These packages are all found within the src/main/scala directory. Some of these packages provide Scala utilities for generator configuration, while other contain the actual Chisel RTL generators themselves. Here is a brief description of what can be found in each package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;amba&lt;/strong&gt; This RTL package uses diplomacy to generate bus implementations of AMBA protocols, including AXI4, AHB-lite, and APB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;config&lt;/strong&gt; This utility package provides Scala interfaces for configuring a generator via a dynamically-scoped parameterization library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;coreplex&lt;/strong&gt; This RTL package generates a complete coreplex by gluing together a variety of components from other packages, including: tiled Rocket cores, a system bus network, coherence agents, debug devices, interrupt handlers, externally-facing peripherals, clock-crossers and converters from TileLink to external bus protocols (e.g. AXI or AHB).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;devices&lt;/strong&gt; This RTL package contains implementations for peripheral devices, including the Debug module and various TL slaves.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;diplomacy&lt;/strong&gt; This utility package extends Chisel by allowing for two-phase hardware elaboration, in which certain parameters are dynamically negotiated between modules. For more information about diplomacy, see &lt;a href=&#34;https://carrv.github.io/2017/papers/cook-diplomacy-carrv2017.pdf&#34;&gt;this paper&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;groundtest&lt;/strong&gt; This RTL package generates synthesizable hardware testers that emit randomized memory access streams in order to stress-tests the uncore memory hierarchy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;jtag&lt;/strong&gt; This RTL package provides definitions for generating JTAG bus interfaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;regmapper&lt;/strong&gt; This utility package generates slave devices with a standardized interface for accessing their memory-mapped registers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rocket&lt;/strong&gt; This RTL package generates the Rocket in-order pipelined core, as well as the L1 instruction and data caches. This library is intended to be used by a chip generator that instantiates the core within a memory system and connects it to the outside world.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tile&lt;/strong&gt; This RTL package contains components that can be combined with cores to construct tiles, such as FPUs and accelerators.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tilelink&lt;/strong&gt; This RTL package uses diplomacy to generate bus implementations of the TileLink protocol. It also contains a variety of adapters and protocol converters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;system&lt;/strong&gt; This top-level utility package invokes Chisel to elaborate a particular configuration of a coreplex, along with the appropriate testing collateral.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;unittest&lt;/strong&gt; This utility package contains a framework for generateing synthesizable hardware testers of individual modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;util&lt;/strong&gt; This utility package provides a variety of common Scala and Chisel constructs that are re-used across multiple other packages,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;what_else&#34;&gt;&lt;/a&gt;Other Resources&lt;/h3&gt; &#xA;&lt;p&gt;Outside of Scala, we also provide a variety of resources to create a complete SoC implementation and test the generated designs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;bootrom&lt;/strong&gt; Sources for the first-stage bootloader included in the BootROM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;csrc&lt;/strong&gt; C sources for use with Verilator simulation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;docs&lt;/strong&gt; Documentation, tutorials, etc for specific parts of the codebase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;emulator&lt;/strong&gt; Directory in which Verilator simulations are compiled and run.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;project&lt;/strong&gt; Directory used by SBT for Scala compilation and build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;regression&lt;/strong&gt; Defines continuous integration and nightly regression suites.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;scripts&lt;/strong&gt; Utilities for parsing the output of simulations or manipulating the contents of source files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;vsim&lt;/strong&gt; Directory in which Synopsys VCS simulations are compiled and run.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;vsrc&lt;/strong&gt; Verilog sources containing interfaces, harnesses and VPI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;what_toplevel&#34;&gt;&lt;/a&gt;Extending the Top-Level Design&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/ucb-bar/project-template&#34;&gt;this description&lt;/a&gt; of how to create you own top-level design with custom devices.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;how&#34;&gt;&lt;/a&gt; How should I use the Rocket chip generator?&lt;/h2&gt; &#xA;&lt;p&gt;Chisel can generate code for three targets: a high-performance cycle-accurate Verilator, Verilog optimized for FPGAs, and Verilog for VLSI. The rocket-chip generator can target all three backends. You will need a Java runtime installed on your machine, since Chisel is overlaid on top of &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;. Chisel RTL (i.e. rocket-chip source code) is a Scala program executing on top of your Java runtime. To begin, ensure that the ROCKETCHIP environment variable points to the rocket-chip repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ucb-bar/rocket-chip.git&#xA;$ cd rocket-chip&#xA;$ export ROCKETCHIP=`pwd`&#xA;$ git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before going any further, you must point the RISCV environment variable to your rocket-tools installation directory. If you do not yet have rocket-tools installed, follow the directions in the &lt;a href=&#34;https://github.com/freechipsproject/rocket-tools/raw/master/README.md&#34;&gt;rocket-tools/README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export RISCV=/path/to/install/riscv/toolchain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, you will see the following error message while executing any command in the rocket-chip generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;*** Please set environment variable RISCV. Please take a look at README.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;emulator&#34;&gt;&lt;/a&gt; 1) Using the high-performance cycle-accurate Verilator&lt;/h3&gt; &#xA;&lt;p&gt;Your next step is to get the Verilator working. Assuming you have N cores on your host system, do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/emulator&#xA;$ make -jN run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By doing so, the build system will generate C++ code for the cycle-accurate emulator, compile the emulator, compile all RISC-V assembly tests and benchmarks, and run both tests and benchmarks on the emulator. If Make finished without any errors, it means that the generated Rocket chip has passed all assembly tests and benchmarks!&lt;/p&gt; &#xA;&lt;p&gt;You can also run assembly tests and benchmarks separately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make -jN run-asm-tests&#xA;$ make -jN run-bmark-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate vcd waveforms, you can run one of the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make -jN run-debug&#xA;$ make -jN run-asm-tests-debug&#xA;$ make -jN run-bmark-tests-debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or call out individual assembly tests or benchmarks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make output/rv64ui-p-add.out&#xA;$ make output/rv64ui-p-add.vcd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now take a look in the emulator/generated-src directory. You will find Chisel generated Verilog code and its associated C++ code generated by Verilator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ls $ROCKETCHIP/emulator/generated-src&#xA;freechips.rocketchip.system.DefaultConfig&#xA;freechips.rocketchip.system.DefaultConfig.0x0.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0x0.1.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0x2000000.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0x40.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0xc000000.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.anno.json&#xA;freechips.rocketchip.system.DefaultConfig.behav_srams.v&#xA;freechips.rocketchip.system.DefaultConfig.conf&#xA;freechips.rocketchip.system.DefaultConfig.d&#xA;freechips.rocketchip.system.DefaultConfig.dts&#xA;freechips.rocketchip.system.DefaultConfig.fir&#xA;freechips.rocketchip.system.DefaultConfig.graphml&#xA;freechips.rocketchip.system.DefaultConfig.json&#xA;freechips.rocketchip.system.DefaultConfig.memmap.json&#xA;freechips.rocketchip.system.DefaultConfig.plusArgs&#xA;freechips.rocketchip.system.DefaultConfig.rom.conf&#xA;freechips.rocketchip.system.DefaultConfig.v&#xA;TestHarness.anno.json&#xA;$ ls $ROCKETCHIP/emulator/generated-src/freechips.rocketchip.system.DefaultConfig&#xA;VTestHarness__1.cpp&#xA;VTestHarness__2.cpp&#xA;VTestHarness__3.cpp&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, output of the executed assembly tests and benchmarks can be found at emulator/output/*.out. Each file has a cycle-by-cycle dump of write-back stage of the pipeline. Here&#39;s an excerpt of emulator/output/rv64ui-p-add.out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C0: 483 [1] pc=[00000002138] W[r 3=000000007fff7fff][1] R[r 1=000000007fffffff] R[r 2=ffffffffffff8000] inst=[002081b3] add s1, ra, s0&#xA;C0: 484 [1] pc=[0000000213c] W[r29=000000007fff8000][1] R[r31=ffffffff80007ffe] R[r31=0000000000000005] inst=[7fff8eb7] lui t3, 0x7fff8&#xA;C0: 485 [0] pc=[00000002140] W[r 0=0000000000000000][0] R[r 0=0000000000000000] R[r 0=0000000000000000] inst=[00000000] unknown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first [1] at cycle 483, core 0, shows that there&#39;s a valid instruction at PC 0x2138 in the writeback stage, which is 0x002081b3 (add s1, ra, s0). The second [1] tells us that the register file is writing r3 with the corresponding value 0x7fff7fff. When the add instruction was in the decode stage, the pipeline had read r1 and r2 with the corresponding values next to it. Similarly at cycle 484, there&#39;s a valid instruction (lui instruction) at PC 0x213c in the writeback stage. At cycle 485, there isn&#39;t a valid instruction in the writeback stage, perhaps, because of a instruction cache miss at PC 0x2140.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;fpga&#34;&gt;&lt;/a&gt; 2) Mapping a Rocket core to an FPGA&lt;/h3&gt; &#xA;&lt;p&gt;You can generate synthesizable Verilog with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/vsim&#xA;$ make verilog CONFIG=freechips.rocketchip.system.DefaultFPGAConfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Verilog used for the FPGA tools will be generated in vsim/generated-src. Please proceed further with the directions shown in the &lt;a href=&#34;https://github.com/sifive/freedom/raw/master/README.md&#34;&gt;README&lt;/a&gt; of the freedom repository. You can also run Rocket Chip on Amazon EC2 F1 with &lt;a href=&#34;https://github.com/firesim/firesim&#34;&gt;FireSim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have access to VCS, you will be able to run assembly tests and benchmarks in simulation with the following commands (again assuming you have N cores on your host machine):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/vsim&#xA;$ make -jN run CONFIG=freechips.rocketchip.system.DefaultFPGAConfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated output looks similar to those generated from the emulator. Look into vsim/output/*.out for the output of the executed assembly tests and benchmarks.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;vlsi&#34;&gt;&lt;/a&gt; 3) Pushing a Rocket core through the VLSI tools&lt;/h3&gt; &#xA;&lt;p&gt;You can generate Verilog for your VLSI flow with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/vsim&#xA;$ make verilog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now take a look at vsim/generated-src, and the contents of the Top.DefaultConfig.conf file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/vsim/generated-src&#xA;freechips.rocketchip.system.DefaultConfig&#xA;freechips.rocketchip.system.DefaultConfig.0x0.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0x0.1.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0x2000000.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0x40.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0xc000000.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.anno.json&#xA;freechips.rocketchip.system.DefaultConfig.behav_srams.v&#xA;freechips.rocketchip.system.DefaultConfig.conf&#xA;freechips.rocketchip.system.DefaultConfig.d&#xA;freechips.rocketchip.system.DefaultConfig.dts&#xA;freechips.rocketchip.system.DefaultConfig.fir&#xA;freechips.rocketchip.system.DefaultConfig.graphml&#xA;freechips.rocketchip.system.DefaultConfig.json&#xA;freechips.rocketchip.system.DefaultConfig.memmap.json&#xA;freechips.rocketchip.system.DefaultConfig.plusArgs&#xA;freechips.rocketchip.system.DefaultConfig.rom.conf&#xA;freechips.rocketchip.system.DefaultConfig.v&#xA;TestHarness.anno.json&#xA;$ cat $ROCKETCHIP/vsim/generated-src/*.conf&#xA;name data_arrays_0_ext depth 512 width 256 ports mrw mask_gran 8&#xA;name tag_array_ext depth 64 width 88 ports mrw mask_gran 22&#xA;name tag_array_0_ext depth 64 width 84 ports mrw mask_gran 21&#xA;name data_arrays_0_1_ext depth 512 width 128 ports mrw mask_gran 32&#xA;name mem_ext depth 33554432 width 64 ports mwrite,read mask_gran 8&#xA;name mem_2_ext depth 512 width 64 ports mwrite,read mask_gran 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The conf file contains information for all SRAMs instantiated in the flow. If you take a close look at the $ROCKETCHIP/Makefrag, you will see that during Verilog generation, the build system calls a $(mem_gen) script with the generated configuration file as an argument, which will fill in the Verilog for the SRAMs. Currently, the $(mem_gen) script points to vsim/vlsi_mem_gen, which simply instantiates behavioral SRAMs. You will see those SRAMs being appended at the end of vsim/generated-src/Top.DefaultConfig.v. To target vendor-specific SRAMs, you will need to make necessary changes to vsim/vlsi_mem_gen.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, if you have access to VCS, you can run assembly tests and benchmarks with the following commands (again assuming you have N cores on your host machine):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/vsim&#xA;$ make -jN run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated output looks similar to those generated from the emulator. Look into vsim/output/*.out for the output of the executed assembly tests and benchmarks.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;param&#34;&gt;&lt;/a&gt; How can I parameterize my Rocket chip?&lt;/h2&gt; &#xA;&lt;p&gt;By now, you probably figured out that all generated files have a configuration name attached, e.g. &lt;code&gt;freechips.rocketchip.system.DefaultConfig&lt;/code&gt;. Take a look at &lt;code&gt;src/main/scala/system/Configs.scala&lt;/code&gt;. Search for &lt;code&gt;NSets&lt;/code&gt; and &lt;code&gt;NWays&lt;/code&gt; defined in &lt;code&gt;BaseConfig&lt;/code&gt;. You can change those numbers to get a Rocket core with different cache parameters. For example, by changing L1I, NWays to 4, you will get a 32KB 4-way set-associative L1 instruction cache rather than a 16KB 2-way set-associative L1 instruction cache. Towards the end, you can also find that &lt;code&gt;DefaultSmallConfig&lt;/code&gt; inherits all parameters from &lt;code&gt;BaseConfig&lt;/code&gt; but overrides the same parameters of &lt;code&gt;WithNSmallCores&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now take a look at &lt;code&gt;vsim/Makefile&lt;/code&gt;. Search for the &lt;code&gt;CONFIG&lt;/code&gt; variable. By default, it is set to &lt;code&gt;freechips.rocketchip.system.DefaultConfig&lt;/code&gt;. You can also change the CONFIG variable on the make command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/vsim&#xA;$ make -jN CONFIG=freechips.rocketchip.system.DefaultSmallConfig run-asm-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, even by defining CONFIG as an environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export CONFIG=freechips.rocketchip.system.DefaultSmallConfig&#xA;$ make -jN run-asm-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This parameterization is one of the many strengths of processor generators written in Chisel, and will be more detailed in a future blog post, so please stay tuned.&lt;/p&gt; &#xA;&lt;p&gt;To override specific configuration items, such as the number of external interrupts, you can create your own Configuration(s) and compose them with Config&#39;s ++ operator&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class WithNExtInterrupts(nExt: Int) extends Config {&#xA;    (site, here, up) =&amp;gt; {&#xA;        case NExtInterrupts =&amp;gt; nExt&#xA;    }&#xA;}&#xA;class MyConfig extends Config (new WithNExtInterrupts(16) ++ new DefaultSmallConfig)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can build as usual with &lt;code&gt;CONFIG=&amp;lt;MyConfigPackage&amp;gt;.MyConfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;debug&#34;&gt;&lt;/a&gt; Debugging with GDB&lt;/h2&gt; &#xA;&lt;h3&gt;1) Generating the Remote Bit-Bang (RBB) Emulator&lt;/h3&gt; &#xA;&lt;p&gt;The objective of this section is to use GNU debugger to debug RISC-V programs running on the emulator in the same fashion as in &lt;a href=&#34;https://github.com/riscv/riscv-isa-sim#debugging-with-gdb&#34;&gt;Spike&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For that we need to add a Remote Bit-Bang client to the emulator. We can do so by extending our Config with JtagDTMSystem, which will add a DebugTransportModuleJTAG to the DUT and connect a SimJTAG module in the Test Harness. This will allow OpenOCD to interface with the emulator, and GDB can interface with OpenOCD. In the following example we add this Config alteration to &lt;code&gt;src/main/scala/system/Configs.scala&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class DefaultConfigRBB extends Config(&#xA;new WithJtagDTMSystem ++ new WithNBigCores(1) ++ new WithCoherentBusTopology ++ new BaseConfig)&#xA;&#xA;class QuadCoreConfigRBB extends Config(&#xA;new WithJtagDTMSystem ++ new WithNBigCores(4) ++ new WithCoherentBusTopology ++ new BaseConfig)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the emulator with &lt;code&gt;DefaultConfigRBB&lt;/code&gt; configuration we use the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rocket-chip$ cd emulator&#xA;emulator$ CONFIG=freechips.rocketchip.system.DefaultConfigRBB make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also build a debug version capable of generating VCD waveforms using the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emulator$ CONFIG=freechips.rocketchip.system.DefaultConfigRBB make debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default the emulator is generated under the name &lt;code&gt;emulator-freechips.rocketchip.system-DefaultConfigRBB&lt;/code&gt; in the first case and &lt;code&gt;emulator-freechips.rocketchip.system-DefaultConfigRBB-debug&lt;/code&gt; in the second.&lt;/p&gt; &#xA;&lt;h3&gt;2) Compiling and executing a custom program using the emulator&lt;/h3&gt; &#xA;&lt;p&gt;We suppose that &lt;code&gt;helloworld&lt;/code&gt; is our program, you can use &lt;code&gt;crt.S&lt;/code&gt;, &lt;code&gt;syscalls.c&lt;/code&gt; and the linker script &lt;code&gt;test.ld&lt;/code&gt; to construct your own program, check examples stated in &lt;a href=&#34;https://github.com/riscv/riscv-tests&#34;&gt;riscv-tests&lt;/a&gt;. Note that &lt;code&gt;test.ld&lt;/code&gt; loads the program at 0x80000000 so you will need to use &lt;code&gt;-mcmodel=medany&lt;/code&gt; otherwise you will get relocation errors. See &lt;a href=&#34;https://www.sifive.com/blog/2017/09/11/all-aboard-part-4-risc-v-code-models/&#34;&gt;All Aboard, Part 4: The RISC-V Code Models&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;In our case we will use the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;char text[] = &#34;Vafgehpgvba frgf jnag gb or serr!&#34;;&#xA;&#xA;// Don&#39;t use the stack, because sp isn&#39;t set up.&#xA;volatile int wait = 1;&#xA;&#xA;int main()&#xA;{&#xA;    while (wait)&#xA;        ;&#xA;&#xA;    // Doesn&#39;t actually go on the stack, because there are lots of GPRs.&#xA;    int i = 0;&#xA;    while (text[i]) {&#xA;        char lower = text[i] | 32;&#xA;        if (lower &amp;gt;= &#39;a&#39; &amp;amp;&amp;amp; lower &amp;lt;= &#39;m&#39;)&#xA;            text[i] += 13;&#xA;        else if (lower &amp;gt; &#39;m&#39; &amp;amp;&amp;amp; lower &amp;lt;= &#39;z&#39;)&#xA;            text[i] -= 13;&#xA;        i++;&#xA;    }&#xA;&#xA;    while (!wait)&#xA;        ;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First we can test if your program executes well in the simple version of emulator before moving to debugging in step 3 :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./emulator-freechips.rocketchip.system-DefaultConfig helloworld &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional verbose information (clock cycle, pc, instruction being executed) can be printed using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./emulator-freechips.rocketchip.system-DefaultConfig +verbose helloworld 2&amp;gt;&amp;amp;1 | spike-dasm &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;VCD output files can be obtained using the &lt;code&gt;-debug&lt;/code&gt; version of the emulator and are specified using &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--vcd=FILE&lt;/code&gt; arguments. A detailed log file of all executed instructions can also be obtained from the emulator, this is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./emulator-freechips.rocketchip.system-DefaultConfig-debug +verbose -v output.vcd  helloworld 2&amp;gt;&amp;amp;1 | spike-dasm &amp;gt; output.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that generated VCD waveforms and execution log files can be very voluminous depending on the size of the .elf file (i.e. code size + debugging symbols).&lt;/p&gt; &#xA;&lt;p&gt;Please note also that the time it takes the emulator to load your program depends on executable size. Stripping the .elf executable will unsurprisingly make it run faster. For this you can use &lt;code&gt;$RISCV/bin/riscv64-unknown-elf-strip&lt;/code&gt; tool to reduce the size. This is good for accelerating your simulation but not for debugging. Keep in mind that the HTIF communication interface between our system and the emulator relies on &lt;code&gt;tohost&lt;/code&gt; and &lt;code&gt;fromhost&lt;/code&gt; symbols to communicate. This is why you may get the following error when you try to run a totally stripped executable on the emulator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./emulator-freechips.rocketchip.system-DefaultConfig totally-stripped-helloworld &#xA;This emulator compiled with JTAG Remote Bitbang client. To enable, use +jtag_rbb_enable=1.&#xA;Listening on port 46529&#xA;warning: tohost and fromhost symbols not in ELF; can&#39;t communicate with target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To resolve this, we need to strip all the .elf executable but keep &lt;code&gt;tohost&lt;/code&gt; and &lt;code&gt;fromhost&lt;/code&gt; symbols using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$riscv64-unknown-elf-strip -s -Kfromhost -Ktohost helloworld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More details on the GNU strip tool can be found &lt;a href=&#34;https://www.thegeekstuff.com/2012/09/strip-command-examples/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The interest of this step is to make sure your program executes well. To perform debugging you need the original unstripped version, as explained in step 3.&lt;/p&gt; &#xA;&lt;h3&gt;3) Launch the emulator&lt;/h3&gt; &#xA;&lt;p&gt;First, do not forget to compile your program with &lt;code&gt;-g -Og&lt;/code&gt; flags to provide debugging support as explained &lt;a href=&#34;https://github.com/riscv/riscv-isa-sim#debugging-with-gdb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We can then launch the Remote Bit-Bang enabled emulator with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./emulator-freechips.rocketchip.system-DefaultConfigRBB +jtag_rbb_enable=1 --rbb-port=9823 helloworld&#xA;This emulator compiled with JTAG Remote Bitbang client. To enable, use +jtag_rbb_enable=1.&#xA;Listening on port 9823&#xA;Attempting to accept client socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;emulator-freechips.rocketchip.system-DefaultConfigRBB-debug&lt;/code&gt; version instead if you would like to generate VCD waveforms.&lt;/p&gt; &#xA;&lt;p&gt;Please note that if the argument &lt;code&gt;--rbb-port&lt;/code&gt; is not passed, a default free TCP port on your computer will be chosen randomly.&lt;/p&gt; &#xA;&lt;p&gt;Please note also that when debugging with GDB, the .elf file is not actually loaded by the FESVR. In contrast with Spike, it must be loaded from GDB as explained in step 5. So the &lt;code&gt;helloworld&lt;/code&gt; argument may be replaced by any dummy name.&lt;/p&gt; &#xA;&lt;h3&gt;4) Launch OpenOCD&lt;/h3&gt; &#xA;&lt;p&gt;You will need a RISC-V Enabled OpenOCD binary. This is installed with rocket-tools in &lt;code&gt;$(RISCV)/bin/openocd&lt;/code&gt;, or can be compiled manually from riscv-openocd. OpenOCD requires a configuration file, in which we define the RBB port we will use, which is in our case &lt;code&gt;9823&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat cemulator.cfg &#xA;interface remote_bitbang&#xA;remote_bitbang_host localhost&#xA;remote_bitbang_port 9823&#xA;&#xA;set _CHIPNAME riscv&#xA;jtag newtap $_CHIPNAME cpu -irlen 5&#xA;&#xA;set _TARGETNAME $_CHIPNAME.cpu&#xA;target create $_TARGETNAME riscv -chain-position $_TARGETNAME&#xA;&#xA;gdb_report_data_abort enable&#xA;&#xA;init&#xA;halt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then we launch OpenOCD in another terminal using the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$(RISCV)/bin/openocd -f ./cemulator.cfg&#xA;Open On-Chip Debugger 0.10.0+dev-00112-g3c1c6e0 (2018-04-12-10:40)&#xA;Licensed under GNU GPL v2&#xA;For bug reports, read&#xA;http://openocd.org/doc/doxygen/bugs.html&#xA;Warn : Adapter driver &#39;remote_bitbang&#39; did not declare which transports it allows; assuming legacy JTAG-only&#xA;Info : only one transport option; autoselect &#39;jtag&#39;&#xA;Info : Initializing remote_bitbang driver&#xA;Info : Connecting to localhost:9823&#xA;Info : remote_bitbang driver initialized&#xA;Info : This adapter doesn&#39;t support configurable speed&#xA;Info : JTAG tap: riscv.cpu tap/device found: 0x00000001 (mfg: 0x000 (&amp;lt;invalid&amp;gt;), part: 0x0000, ver: 0x0)&#xA;Info : datacount=2 progbufsize=16&#xA;Info : Disabling abstract command reads from CSRs.&#xA;Info : Disabling abstract command writes to CSRs.&#xA;Info : [0] Found 1 triggers&#xA;Info : Examined RISC-V core; found 1 harts&#xA;Info :  hart 0: XLEN=64, 1 triggers&#xA;Info : Listening on port 3333 for gdb connections&#xA;Info : Listening on port 6666 for tcl connections&#xA;Info : Listening on port 4444 for telnet connections&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;-d&lt;/code&gt; flag can be added to the command to show further debug information.&lt;/p&gt; &#xA;&lt;h3&gt;5) Launch GDB&lt;/h3&gt; &#xA;&lt;p&gt;In another terminal launch GDB and point to the elf file you would like to load then run it with the debugger (in this example, &lt;code&gt;helloworld&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ riscv64-unknown-elf-gdb helloworld&#xA;GNU gdb (GDB) 8.0.50.20170724-git&#xA;Copyright (C) 2017 Free Software Foundation, Inc.&#xA;License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;&#xA;This is free software: you are free to change and redistribute it.&#xA;There is NO WARRANTY, to the extent permitted by law.  Type &#34;show copying&#34;&#xA;and &#34;show warranty&#34; for details.&#xA;This GDB was configured as &#34;--host=x86_64-pc-linux-gnu --target=riscv64-unknown-elf&#34;.&#xA;Type &#34;show configuration&#34; for configuration details.&#xA;For bug reporting instructions, please see:&#xA;&amp;lt;http://www.gnu.org/software/gdb/bugs/&amp;gt;.&#xA;Find the GDB manual and other documentation resources online at:&#xA;&amp;lt;http://www.gnu.org/software/gdb/documentation/&amp;gt;.&#xA;For help, type &#34;help&#34;.&#xA;Type &#34;apropos word&#34; to search for commands related to &#34;word&#34;...&#xA;Reading symbols from ./proj1.out...done.&#xA;(gdb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compared to Spike, the C Emulator is very slow, so several problems may be encountered due to timeouts between issuing commands and response from the emulator. To solve this problem, we increase the timeout with the GDB &lt;code&gt;set remotetimeout&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;After that we load our program by performing a &lt;code&gt;load&lt;/code&gt; command. This automatically sets the &lt;code&gt;$PC&lt;/code&gt; to the &lt;code&gt;_start&lt;/code&gt; symbol in our .elf file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(gdb) set remotetimeout 2000&#xA;(gdb) target remote localhost:3333&#xA;Remote debugging using localhost:3333&#xA;0x0000000000010050 in ?? ()&#xA;(gdb) load&#xA;Loading section .text.init, size 0x2cc lma 0x80000000&#xA;Loading section .tohost, size 0x48 lma 0x80001000&#xA;Loading section .text, size 0x98c lma 0x80001048&#xA;Loading section .rodata, size 0x158 lma 0x800019d4&#xA;Loading section .rodata.str1.8, size 0x20 lma 0x80001b30&#xA;Loading section .data, size 0x22 lma 0x80001b50&#xA;Loading section .sdata, size 0x4 lma 0x80001b74&#xA;Start address 0x80000000, load size 3646&#xA;Transfer rate: 40 bytes/sec, 520 bytes/write.&#xA;(gdb) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can proceed as with Spike, debugging works in a similar way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(gdb) print wait&#xA;$1 = 1&#xA;(gdb) print wait=0&#xA;$2 = 0&#xA;(gdb) print text&#xA;$3 = &#34;Vafgehpgvba frgf jnag gb or serr!&#34;&#xA;(gdb) c&#xA;Continuing.&#xA;&#xA;^C&#xA;Program received signal SIGINT, Interrupt.&#xA;main (argc=0, argv=&amp;lt;optimized out&amp;gt;) at src/main.c:33&#xA;33&#x9;    while (!wait)&#xA;(gdb) print wait&#xA;$4 = 0&#xA;(gdb) print text&#xA;$5 = &#34;Instruction sets want to be free!&#34;&#xA;(gdb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further information about GDB debugging is available &lt;a href=&#34;https://sourceware.org/gdb/onlinedocs/gdb/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://sourceware.org/gdb/onlinedocs/gdb/Remote-Debugging.html#Remote-Debugging&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;ide&#34;&gt;&lt;/a&gt; Building Rocket Chip with an IDE&lt;/h2&gt; &#xA;&lt;p&gt;The Rocket Chip Scala build uses the standard Scala build tool SBT. IDEs like &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ&lt;/a&gt; and &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt; are popular in the Scala community and work with Rocket Chip. To use one of these IDEs, there is one minor peculiarity of the Rocket Chip build that must be addressed.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;contributors&#34;&gt;&lt;/a&gt; Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Contributing guidelines can be found in &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A list of contributors can be found &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/graphs/contributors&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;attribution&#34;&gt;&lt;/a&gt; Attribution&lt;/h2&gt; &#xA;&lt;p&gt;If used for research, please cite Rocket Chip by the technical report:&lt;/p&gt; &#xA;&lt;p&gt;Krste Asanović, Rimas Avižienis, Jonathan Bachrach, Scott Beamer, David Biancolin, Christopher Celio, Henry Cook, Palmer Dabbelt, John Hauser, Adam Izraelevitz, Sagar Karandikar, Benjamin Keller, Donggyu Kim, John Koenig, Yunsup Lee, Eric Love, Martin Maas, Albert Magyar, Howard Mao, Miquel Moreto, Albert Ou, David Patterson, Brian Richards, Colin Schmidt, Stephen Twigg, Huy Vo, and Andrew Waterman, &lt;em&gt;&lt;a href=&#34;http://www.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-17.html&#34;&gt;The Rocket Chip Generator&lt;/a&gt;&lt;/em&gt;, Technical Report UCB/EECS-2016-17, EECS Department, University of California, Berkeley, April 2016&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twitter/scrooge</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/twitter/scrooge</id>
    <link href="https://github.com/twitter/scrooge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Thrift parser/generator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scrooge&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/twitter/scrooge/actions?query=workflow%3A%22continuous+integration%22+branch%3Adevelop&#34;&gt;&lt;img src=&#34;https://github.com/twitter/scrooge/workflows/continuous%20integration/badge.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/twitter/scrooge&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/twitter/scrooge/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/twitter/scrooge/develop/#status&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/status-active-brightgreen.svg?sanitize=true&#34; alt=&#34;Project status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/twitter/finagle?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/twitter/finagle.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/scrooge-core_2.12&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/scrooge-core_2.12/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Scrooge is a &lt;a href=&#34;https://thrift.apache.org/&#34;&gt;thrift&lt;/a&gt; code generator written in Scala, which currently generates code for Scala, Java, Cocoa, Android and Lua.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s meant to be a replacement for the apache thrift code generator, and generates conforming, compatible binary codecs by building on top of libthrift. It integrates with the &lt;a href=&#34;https://github.com/twitter/finagle&#34;&gt;finagle&lt;/a&gt; project, exporting stats and finagle APIs, and makes it easy to build high throughput, low latency, robust thrift servers and clients.&lt;/p&gt; &#xA;&lt;p&gt;Part of the motivation behind scrooge&#39;s scala implementation is that since Scala is API-compatible with Java, you can use the apache thrift code generator to generate Java files and use them from within Scala, but the generated code uses Java collections and mutable &#34;bean&#34; classes, causing some annoying boilerplate conversions to be hand-written. Scrooge bypasses the problem by generating Scala code directly. It also uses Scala syntax so the generated code is much more compact.&lt;/p&gt; &#xA;&lt;p&gt;There is a comprehensive set of unit tests, which generate code, compile it, and execute it to verify expectations, as well as gold files to make it easy to review the effects of changes to the generator.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is used in production at Twitter (and many other organizations), and is actively developed and maintained.&lt;/p&gt; &#xA;&lt;h2&gt;Building the develop branch locally&lt;/h2&gt; &#xA;&lt;p&gt;We are not currently publishing snapshots for Scrooge&#39;s dependencies, which means that it may be necessary to publish the &lt;code&gt;develop&lt;/code&gt; branches of these libraries locally in order to work on Scrooge&#39;s &lt;code&gt;develop&lt;/code&gt; branch. To do so you can use our build tool, &lt;a href=&#34;https://github.com/twitter/dodo&#34;&gt;dodo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s https://raw.githubusercontent.com/twitter/dodo/develop/bin/build | bash -s -- --no-test scrooge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have any questions or run into any problems, please create an issue here, tweet at us at &lt;a href=&#34;https://twitter.com/finagle&#34;&gt;@finagle&lt;/a&gt;, or email the Finaglers mailing list.&lt;/p&gt; &#xA;&lt;h2&gt;Full Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.github.io/scrooge/&#34;&gt;https://twitter.github.io/scrooge/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2013 Twitter, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0: &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>broadinstitute/sam</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/broadinstitute/sam</id>
    <link href="https://github.com/broadinstitute/sam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;workbench identity and access management&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sam - Identity and Access Management (IAM)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://static1.squarespace.com/static/52f51a96e4b0ec7646cd474a/5328b57de4b067106916ef7f/56b3b2167da24f50175975bc/1504623030943/geh502.jpg?format=500w&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;In a nutshell&lt;/h2&gt; &#xA;&lt;p&gt;The crux of IAM in Sam is a policy. A policy says &lt;strong&gt;who&lt;/strong&gt; can &lt;strong&gt;do what&lt;/strong&gt; to a &lt;strong&gt;thing&lt;/strong&gt;. More technically the who is called a &lt;strong&gt;subject&lt;/strong&gt; and can be a user or a group of users, the do what is called an &lt;strong&gt;action&lt;/strong&gt; such as read or update, and the thing is called a &lt;strong&gt;resource&lt;/strong&gt; such as a workspace or project. Resources have types which specify what actions are available for its resources, roles (which are collections of actions) and which role is the &#34;owner&#34; role. The &#34;owner&#34; role should have the appropriate actions to administer a resource. When a resource is created a policy with the owner role is automatically created and the creator is added.&lt;/p&gt; &#xA;&lt;h2&gt;Terms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Subject - an authenticated user or group&lt;/li&gt; &#xA; &lt;li&gt;Resource - something to which access is controlled&lt;/li&gt; &#xA; &lt;li&gt;Action - may be performed on a resource - meant to be as granular as possible&lt;/li&gt; &#xA; &lt;li&gt;Policy - represents the actions a subject may perform on a resource&lt;/li&gt; &#xA; &lt;li&gt;Role - a collection of actions - meant to aggregate actions into a more meaningful, higher level concept&lt;/li&gt; &#xA; &lt;li&gt;Group - a group of subjects (this can include groups)&lt;/li&gt; &#xA; &lt;li&gt;Resource type - defines a class of resources. Each resource has a type which defines &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Available actions&lt;/li&gt; &#xA;   &lt;li&gt;Available roles and actions for each role&lt;/li&gt; &#xA;   &lt;li&gt;Of the available roles which is the “owner” role - this is used when creating a resource to give the creator ownership access&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Guiding Principles&lt;/h3&gt; &#xA;&lt;p&gt;There are no special/super users in this system. All api calls authenticate as subjects with access rights determined by policies in the same way. In other words, this system should use its own policy mechanisms internally for any authorization needs. (Note that this does leave the problem of bootstrapping, i.e. how is the first user created, which can be achieved by scripts outside the system with direct data store level access.) This system can be publicly facing. This does not mean that it will be in all cases but it should be designed with this in mind. Authentication is handled at a higher level than this application, e.g. via OAuth and an OIDC proxy.&lt;/p&gt; &#xA;&lt;h3&gt;Evaluation&lt;/h3&gt; &#xA;&lt;p&gt;Evaluation is the act of determining what a user may access.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Given a user, resource and action emit a yes or no response, i.e. can the user perform the action on the resource?&lt;/li&gt; &#xA; &lt;li&gt;Given a user and a resource type, list all resources and associated roles the user has (directly or indirectly).&lt;/li&gt; &#xA; &lt;li&gt;Given a user and resource, list all the actions the user may perform on that resource&lt;/li&gt; &#xA; &lt;li&gt;Given a user and resource, list all the user’s roles on that resource&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Of these 1 and 2 are the most important from a performance standpoint. Expect 1 to be called for almost every api call in a system. Expect 2 to be called from UI list pages where users generally want a snappy response.&lt;/p&gt; &#xA;&lt;h3&gt;Resource and Policy Management&lt;/h3&gt; &#xA;&lt;p&gt;A resource may be part of a hierarchy of resources. A parent may be set on a resource. To do so, users must have the set_parent action on the resource and the add_child action on the would be parent. Ancestor resources in the hierarchy control permissions on all descendants.&lt;/p&gt; &#xA;&lt;p&gt;A policy is specific to a resource and a resource may have multiple policies. Each policy consists of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A set of subjects&lt;/li&gt; &#xA; &lt;li&gt;A set of actions directly applicable to the resource&lt;/li&gt; &#xA; &lt;li&gt;A set of roles directly applicable to the resource&lt;/li&gt; &#xA; &lt;li&gt;A set of descendant permissions - roles and actions applicable to descendant resources All of the subjects may perform all of the actions/roles in the policy. A policy may also be marked as public effectively meaning all users are members. Each policy has a name that is unique within a resource. Access to actions through policies is additive (i.e. the actions available to a user on a resource is an accumulation of all policies the user is a member of for that resource).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There must be functions to create, delete and manage policies for resources. There must be access control around deleting resources and managing policies. There must be some built-in actions to do so (delete, read-policies, alter-policies).&lt;/p&gt; &#xA;&lt;p&gt;There must be functions to create and delete resources. When a resource is created the caller should be the “owner.” The “owner” role generally will include delete action and actions to control sharing but need not always (e.g. if a resource may never be deleted then an owner would not have delete permissions). The actions that make up the “owner” role are defined by the resource type.&lt;/p&gt; &#xA;&lt;p&gt;Resource types define the set of available actions for all resources of that type. It also defines a set of roles and their associated actions. Roles are useful because it can be cumbersome to deal with granular actions and as a point of extensibility (when new actions are added to resource types, they can be added to roles as well, effectively adding the action to all resources with that role). It is not yet necessary to provide apis to create and maintain resource types, this can be achieved through configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Public Policies&lt;/h3&gt; &#xA;&lt;p&gt;There are some cases where it is desirable to grant actions or roles to all authenticated users. For example, granting read-only access to public workspaces. In this case a policy can be created that has the appropriate actions or roles and set to public. Resources with public policies show up when listing resources for a user. For this reason it is not always desirable to allow everyone to make public policies. Again, the example is public workspaces. Public workspaces show up for everyone and should be curated.&lt;/p&gt; &#xA;&lt;p&gt;To change a policy&#39;s public status the caller must be able to share the policy (either via &lt;code&gt;alter_policies&lt;/code&gt; and &lt;code&gt;share_policy::{policy_name}&lt;/code&gt; actions) &lt;em&gt;and&lt;/em&gt; must have the &lt;code&gt;set_public&lt;/code&gt; action on the resource &lt;code&gt;resource_type_admin/{resource type name}&lt;/code&gt;. &lt;code&gt;resource_type_admin&lt;/code&gt; is an internally created resource type. &lt;code&gt;{resource type name}&lt;/code&gt; is for the resource containing the policy. Note that every resource type in sam has a resource of the same name of type &lt;code&gt;resource_type_admin&lt;/code&gt; which is automatically created. When these resources are created they do not have owners, permissions must be granted via direct postgres changes.&lt;/p&gt; &#xA;&lt;h3&gt;User and Group Management&lt;/h3&gt; &#xA;&lt;p&gt;User - Create, enable, disable, get status. Disabled users should be rejected from any api calls. Enabling a user should reinstate any prior access.&lt;/p&gt; &#xA;&lt;p&gt;Group - Create, delete, read, list, add/remove users and groups. Nested groups are supported. Groups are implemented as a resource type with admin and member roles and policies. There is an additional &lt;code&gt;admin_notifier&lt;/code&gt; role and policy that is public by default which allows any authenticate user to request access to a group. Group admins can set public to false if desired.&lt;/p&gt; &#xA;&lt;h3&gt;Built In Actions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;read_policies - may read all policies of a resource&lt;/li&gt; &#xA; &lt;li&gt;alter_policies - may change any policy of a resource&lt;/li&gt; &#xA; &lt;li&gt;delete - may delete a resource&lt;/li&gt; &#xA; &lt;li&gt;share_policy::{policy name} - may add/remove members to/from specified policy of a resource&lt;/li&gt; &#xA; &lt;li&gt;read_policy::{policy name} - may read specified policy of a resource&lt;/li&gt; &#xA; &lt;li&gt;get_parent - may get a resource&#39;s parent&lt;/li&gt; &#xA; &lt;li&gt;set_parent - may set a resource&#39;s parent&lt;/li&gt; &#xA; &lt;li&gt;add_child - may add a child to a resource&lt;/li&gt; &#xA; &lt;li&gt;remove_child - may remove a child from a resource&lt;/li&gt; &#xA; &lt;li&gt;list_children - may list all of a resource&#39;s children&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UML Model&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/model.png&#34; alt=&#34;Sam Model&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/#uml-class-diagram-relationship&#34;&gt;UML Key&lt;/a&gt; for reference. Note that in this model Group is a Subject. This allows it to be used interchangeably with Users within policies.&lt;/p&gt; &#xA;&lt;h3&gt;ERD&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/sam_erd.png&#34; alt=&#34;Sam ERD&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Sam schema has 3 main sections: users and groups in yellow, resources and policies in green, resource type configuration in purple. Both groups and resources have a hierarchical model (groups can contain groups and resources can have parents). To solve read-query performance issues these hierarchies are also stored in a flattened representation: &lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/src/main/scala/org/broadinstitute/dsde/workbench/sam/dataAccess/PostgresGroupDAO.scala&#34;&gt;sam_group_member_flat&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/src/main/scala/org/broadinstitute/dsde/workbench/sam/dataAccess/EffectivePolicyMutationStatements.scala&#34;&gt;sam_effective_*&lt;/a&gt; tables.&lt;/p&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://petstore.swagger.io/?url=https://raw.githubusercontent.com/broadinstitute/sam/develop/src/main/resources/swagger/api-docs.yaml&#34;&gt;Sam APIs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Java Client Library&lt;/h4&gt; &#xA;&lt;p&gt;for sbt:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;libraryDependencies += &#34;org.broadinstitute.dsde.workbench&#34; %% &#34;sam-client&#34; % &#34;0.1-&amp;lt;git hash&amp;gt;&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;where &lt;code&gt;&amp;lt;git hash&amp;gt;&lt;/code&gt; is the first 7 characters of the commit hash of the HEAD of develop&lt;/p&gt; &#xA;&lt;p&gt;Example Scala Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import org.broadinstitute.dsde.workbench.client.sam.api.ResourcesApi&#xA;import org.broadinstitute.dsde.workbench.client.sam.ApiClient&#xA;&#xA;class SamClient(samBasePath: String) {&#xA;  private def samResourcesApi(accessToken: String): ResourcesApi = {&#xA;    val apiClient = new ApiClient()&#xA;    apiClient.setAccessToken(accessToken)&#xA;    apiClient.setBasePath(samBasePath)&#xA;    new ResourcesApi(apiClient)&#xA;  }&#xA;&#xA;  def checkResourceAction(token: String, samResourceType: String, samResource: String, action: String): Boolean = {&#xA;    val samResourceApi = samResourcesApi(token)&#xA;    samResourceApi.resourceAction(samResourceType, samResource, action)&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cloud Integrations&lt;/h2&gt; &#xA;&lt;h3&gt;Google&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Groups can be mirrored to google groups.&lt;/li&gt; &#xA; &lt;li&gt;Proxy groups - each user with access to google resources should have a google group known as a proxy. The proxy is 1-to-1 with the user and the user is member of the proxy. The proxy group should be used in place of the user in Google IAM policies and Google groups. Users should not be added directly. This allows easy enable and disable functionality by adding/removing users to their proxy groups. It also allows creation of service accounts that can act as the user (see pet service accounts below).&lt;/li&gt; &#xA; &lt;li&gt;Pet service accounts - Google Compute Engine requires a service account to run compute. Service account credentials are the default credentials on any GCE instance. This is the best way at this time to provide credentials to any processes running on a GCE instance. Pet service accounts correspond with 1 and only 1 user, are added to the user’s proxy group and can call system apis as the user. In this way a pet service account can act as the user in all respects that can be controlled by the system (resources outside control of the system need to be manually shared by the user with the proxy group).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Proposed model for accessing external google resources&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/data_access.png&#34; alt=&#34;Data Access&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that Sam does not actually launch workflows create VMs but appears to in this diagram in order to simplify interactions. The key concept is the user of service accounts.&lt;/p&gt; &#xA;&lt;h4&gt;Google integration requires&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a GSuite domain&lt;/li&gt; &#xA; &lt;li&gt;a project with a service account for the sam application&lt;/li&gt; &#xA; &lt;li&gt;service account with access to &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;create PubSub topics and subscriptions&lt;/li&gt; &#xA;   &lt;li&gt;admin google groups in GSuite domain&lt;/li&gt; &#xA;   &lt;li&gt;create service accounts and keys in desired projects (usually easiest to grant this at the org level)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Required Tooling:&lt;/h3&gt; &#xA;&lt;h4&gt;Java:&lt;/h4&gt; &#xA;&lt;p&gt;Make sure you have Java JDK 11 installed. Instructions for our recommended package can be found &lt;a href=&#34;https://adoptopenjdk.net/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Scala:&lt;/h4&gt; &#xA;&lt;p&gt;Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-$xslt&#34;&gt;brew install scala&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To build&lt;/h3&gt; &#xA;&lt;p&gt;Make sure git secrets is installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-$xslt&#34;&gt;brew install git-secrets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run minnie-kenny.sh with -f first time after git-clone to ensure git-secrets is run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./minnie-kenny.sh -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build jar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./docker/build.sh jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build jar and docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./docker/build.sh jar -d build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To run unit tests&lt;/h3&gt; &#xA;&lt;h4&gt;Set up your environment&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;#Spin up a local OpenDJ:&#xA;sh docker/run-opendj.sh start&#xA;#Spin up a local postgres:&#xA;sh docker/run-postgres.sh start&#xA;#Make sure your `SBT_OPTS` are set:&#xA;export SBT_OPTS=&#34;-Dpostgres.host=localhost -Dpostgres.port=5432 -Ddirectory.url=ldap://localhost:3389 -Ddirectory.password=testtesttest&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: if you run Postgres in another way (i.e. you&#39;re running the Postgres Mac app), the unit tests will fail because they will look at that installation instead of the Docker container you&#39;ve spun up. You can either specify a port when starting the Postgres Docker container or quit your Postgres client.&lt;/p&gt; &#xA;&lt;h4&gt;Run tests in sbt&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run tests in intellij&lt;/h4&gt; &#xA;&lt;p&gt;Set up ScalaTest Template:&lt;/p&gt; &#xA;&lt;p&gt;You need to set some default VM parameters for ScalaTest run configurations. In IntelliJ, go to &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Edit Configurations...&lt;/code&gt;, select &lt;code&gt;ScalaTest&lt;/code&gt; under &lt;code&gt;🔧Templates&lt;/code&gt;, and add these VM parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-Dpostgres.host=localhost -Dpostgres.port=5432 -Ddirectory.url=ldap://localhost:3389 -Ddirectory.password=testtesttest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can run unit tests within IntelliJ by clicking the green play button on a unit test.&lt;/p&gt; &#xA;&lt;h5&gt;Connecting to your local Postgres&lt;/h5&gt; &#xA;&lt;p&gt;In order to connect to your local postgres, open up the database tab, select the plus button at the top, data source, and click postgres.&lt;/p&gt; &#xA;&lt;p&gt;From there, set the:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Host: &lt;code&gt;localhost&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Port: &lt;code&gt;5432&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;User: Check &lt;code&gt;src/test/resources/reference.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: Check &lt;code&gt;src/test/resources/reference.conf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Cleaning up after tests&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;#Stop your local opendj:&#xA;sh docker/run-opendj.sh stop&#xA;#Stop your local postgres:&#xA;sh docker/run-postgres.sh stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debugging ScalikeJDBC&lt;/h4&gt; &#xA;&lt;p&gt;To view the SQL commands generated by ScalikeJDBC, set &lt;code&gt;scalikejdbc.global.loggingSQLAndTime.enabled&lt;/code&gt; in &lt;code&gt;src/test/resources/reference.conf&lt;/code&gt; to true&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/automation/README.md&#34;&gt;To run integration tests&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;To run Sam locally&lt;/h3&gt; &#xA;&lt;h4&gt;Local setup&lt;/h4&gt; &#xA;&lt;p&gt;Set up configs using the &lt;a href=&#34;https://github.com/broadinstitute/firecloud-develop#quick-start---how-do-i-set-up-my-configs&#34;&gt;firecloud-develop quick start guide for configs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you haven&#39;t already, add &lt;code&gt;127.0.0.1 local.broadinstitute.org&lt;/code&gt; to &lt;code&gt;/etc/hosts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo sh -c &#34;echo &#39;127.0.0.1       local.broadinstitute.org&#39; &amp;gt;&amp;gt; /etc/hosts&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then start Sam against dev DBs or local DBs following the instructions below.&lt;/p&gt; &#xA;&lt;h5&gt;Using dev DBs&lt;/h5&gt; &#xA;&lt;p&gt;You must be connected to the Broad Internal network to connect to the Dev DBs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Start up local Sam&#xA;sh config/docker-rsync-local-sam.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using local DBs&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Start up local Sam with local opendj and postgres&#xA;LOCAL_OPENDJ=true LOCAL_POSTGRES=true sh config/docker-rsync-local-sam.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: OpenDJ has some heavy memory requirements. If you see the OpenDJ container silently dying when running this command, try opening your Docker Desktop preferenes and increasing the Memory resources, 4GB seems to be sufficient, but more may be needed as well as increasing the Swap space maybe.&lt;/p&gt; &#xA;&lt;h4&gt;Verify that local Sam is running&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://local.broadinstitute.org:50443/status&#34;&gt;Status endpoint: https://local.broadinstitute.org:50443/status&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://local.broadinstitute.org:50443/#/&#34;&gt;Swagger page: https://local.broadinstitute.org:50443/#/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>twitter/twitter-server</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/twitter/twitter-server</id>
    <link href="https://github.com/twitter/twitter-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Twitter-Server defines a template from which services at Twitter are built&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TwitterServer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/twitter/twitter-server/actions?query=workflow%3A%22continuous+integration%22+branch%3Adevelop&#34;&gt;&lt;img src=&#34;https://github.com/twitter/twitter-server/workflows/continuous%20integration/badge.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/twitter/twitter-server&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/twitter/twitter-server/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/twitter/twitter-server/develop/#status&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/status-active-brightgreen.svg?sanitize=true&#34; alt=&#34;Project status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/twitter/finagle?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/twitter/finagle.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/twitter-server_2.12&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/twitter-server_2.12/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;TwitterServer defines a template from which servers at Twitter are built. It provides common application components such as an administrative HTTP server, tracing, stats, etc. These features are wired in correctly for use in production at Twitter.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is used in production at Twitter (and many other organizations), and is being actively developed and maintained.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Browse the &lt;a href=&#34;https://twitter.github.io/twitter-server/&#34;&gt;user guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.twitter/twitter-server_2.12&#34;&gt;Releases&lt;/a&gt; are done on an approximately monthly schedule. While &lt;a href=&#34;https://semver.org/&#34;&gt;semver&lt;/a&gt; is not followed, the &lt;a href=&#34;https://raw.githubusercontent.com/twitter/twitter-server/develop/CHANGELOG.rst&#34;&gt;changelogs&lt;/a&gt; are detailed and include sections on public API breaks and changes in runtime behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Getting involved&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://twitter.github.io/twitter-server/&#34;&gt;https://twitter.github.io/twitter-server/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Source: &lt;a href=&#34;https://github.com/twitter/twitter-server/&#34;&gt;https://github.com/twitter/twitter-server/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mailing List: &lt;a href=&#34;https://groups.google.com/forum/#!forum/finaglers&#34;&gt;finaglers@googlegroups.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat: &lt;a href=&#34;https://gitter.im/twitter/finagle&#34;&gt;https://gitter.im/twitter/finagle&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We feel that a welcoming community is important and we ask that you follow Twitter&#39;s &lt;a href=&#34;https://github.com/twitter/.github/raw/main/code-of-conduct.md&#34;&gt;Open Source Code of Conduct&lt;/a&gt; in all interactions with the community.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;release&lt;/code&gt; branch of this repository contains the latest stable release of TwitterServer, and weekly snapshots are published to the &lt;code&gt;develop&lt;/code&gt; branch. In general pull requests should be submitted against &lt;code&gt;develop&lt;/code&gt;. See &lt;a href=&#34;https://github.com/twitter/twitter-server/raw/release/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details about how to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2013 Twitter, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0: &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zio/zio-schema</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/zio/zio-schema</id>
    <link href="https://github.com/zio/zio-schema" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compositional, type-safe schema definitions, which enable auto-derivation of codecs and migrations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZIO-SCHEMA&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project Stage&lt;/th&gt; &#xA;   &lt;th&gt;CI&lt;/th&gt; &#xA;   &lt;th&gt;Release&lt;/th&gt; &#xA;   &lt;th&gt;Issues&lt;/th&gt; &#xA;   &lt;th&gt;Discord&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zio/zio/wiki/Project-Stages&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project%20Stage-Development-yellowgreen.svg?sanitize=true&#34; alt=&#34;Project stage&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/zio/zio-schema/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-schema_2.12/&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-schema_2.12.svg?sanitize=true&#34; alt=&#34;Release Artifacts&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://isitmaintained.com/project/zio/zio-schema&#34;&gt;&lt;img src=&#34;https://isitmaintained.com/badge/resolution/zio/zio-schema.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://discord.gg/2ccFBr4&#34; title=&#34;Discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629491597070827530?logo=discord&#34; alt=&#34;badge-discord&#34; title=&#34;chat on discord&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;ZIO Schema&lt;/em&gt; is a &lt;a href=&#34;https://zio.dev&#34;&gt;ZIO&lt;/a&gt;-based library for modeling the schema of data structures as first-class values.&lt;/p&gt; &#xA;&lt;p&gt;With schema descriptions that can be automatically derived for case classes and sealed traits, &lt;em&gt;ZIO Schema&lt;/em&gt; provide powerful features for free:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Codecs for any supported protocol (JSON, protobuf, etc.), so data structures can be serialized and deserialized in a principled way&lt;/li&gt; &#xA; &lt;li&gt;Diffing, patching, merging, and other generic-data-based operations&lt;/li&gt; &#xA; &lt;li&gt;Migration of data structures from one schema to another compatible schema&lt;/li&gt; &#xA; &lt;li&gt;Derivation of arbitrary type classes (&lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Ord&lt;/code&gt;, etc.) from the structure of the data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When your data structures need to be serialized, deserialized, persisted, or transported across the wire, then &lt;em&gt;ZIO Schema&lt;/em&gt; lets you focus on data modeling and automatically tackle all the low-level, messy details for you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;ZIO Schema&lt;/em&gt; is used by a growing number of ZIO libraries, including &lt;em&gt;ZIO Flow&lt;/em&gt;, &lt;em&gt;ZIO Redis&lt;/em&gt;, &lt;em&gt;ZIO Web&lt;/em&gt;, &lt;em&gt;ZIO SQL&lt;/em&gt; and &lt;em&gt;ZIO DynamoDB&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add in your &lt;code&gt;build.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies ++= Seq(&#xA;  &#34;dev.zio&#34; %% &#34;zio-schema&#34; % &#34;&amp;lt;version&amp;gt;&#34;,&#xA;  // Required for automatic generic derivation of schemas&#xA;  &#34;dev.zio&#34; %% &#34;zio-schema-derivation&#34; % &#34;&amp;lt;version&amp;gt;&#34;,&#xA;  &#34;org.scala-lang&#34; % &#34;scala-reflect&#34;  % scalaVersion.value % &#34;provided&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For the general guidelines, see ZIO &lt;a href=&#34;https://github.com/zio/zio/raw/master/docs/about/contributing.md&#34;&gt;contributor&#39;s guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;TL;DR&lt;/h4&gt; &#xA;&lt;p&gt;Before you submit a PR, make sure your tests are passing, and that the code is properly formatted&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt prepare&#xA;&#xA;sbt test&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/rocket-dsp-utils</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/ucb-bar/rocket-dsp-utils</id>
    <link href="https://github.com/ucb-bar/rocket-dsp-utils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for integrating DspTools components into a rocket-chip&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ROCKET-DSP-UTILS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ucb-bar/dsptools/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/chick/rocket-dsp-utils/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository is part of a transition to move the rocket subdirectory from &lt;a href=&#34;&#34;&gt;ucb-bar/dsptools&lt;/a&gt; to its own repository&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This README will be filled out later. At the moment it will only contain instructions to run it locally&lt;/p&gt; &#xA;&lt;p&gt;Goals: Get the rocket sub-project of dsptools to run within the chipyard environment. It is based on running using the chipyards rocket-chip commit&lt;/p&gt; &#xA;&lt;p&gt;Steps&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Checkout &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip&#34;&gt;rocket-chip&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;git checkout 3b3169cb04bd5a7be4ec0be04a4cbe1a794c540e&lt;/li&gt; &#xA;   &lt;li&gt;make the following changes to build.sbt so that jars will be produced&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git diff build.sbt&#xA;diff --git a/build.sbt b/build.sbt&#xA;index 09d5f98bd..f2f54af58 100644&#xA;--- a/build.sbt&#xA;+++ b/build.sbt&#xA;@@ -65,14 +65,13 @@ lazy val chiselPluginLib = &#34;edu.berkeley.cs&#34; % &#34;chisel3-plugin&#34; % chiselVersion&#xA;&#xA; lazy val `api-config-chipsalliance` = (project in file(&#34;api-config-chipsalliance/build-rules/sbt&#34;))&#xA;   .settings(commonSettings)&#xA;-  .settings(publishArtifact := false)&#xA; lazy val hardfloat  = (project in file(&#34;hardfloat&#34;))&#xA;   .sourceDependency(chiselRef, chiselLib)&#xA;   .settings(addCompilerPlugin(chiselPluginLib))&#xA;   .settings(commonSettings)&#xA;   .settings(publishArtifact := false)&#xA; lazy val `rocket-macros` = (project in file(&#34;macros&#34;)).settings(commonSettings)&#xA;-  .settings(publishArtifact := false)&#xA;+  // .settings(publishArtifact := false)&#xA; lazy val rocketchip = (project in file(&#34;.&#34;))&#xA;   .sourceDependency(chiselRef, chiselLib)&#xA;   .settings(addCompilerPlugin(chiselPluginLib))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sbt &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;rocket-macros / publishLocal&lt;/li&gt; &#xA;   &lt;li&gt;api-config-chipsalliance / publishLocal&lt;/li&gt; &#xA;   &lt;li&gt;publishLocal&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;should be able to edit/compile/run things &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I have not run all tests yet.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;PLEASE let me know if this does not work for you&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Questionable code is marked with //TODO: CHIPYARD&lt;/li&gt; &#xA; &lt;li&gt;Using local publishing of everything was just to get jump started, can modify build approach after getting things working&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This code is maintained by &lt;a href=&#34;https://github.com/chick&#34;&gt;Chick&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/barstools</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/ucb-bar/barstools</id>
    <link href="https://github.com/ucb-bar/barstools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Useful utilities for BAR projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Barstools&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/freechipsproject/ucb-bar/barstools/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Barstools&lt;/strong&gt; is a collection of useful utilities for BAR projects&lt;/p&gt; &#xA;&lt;p&gt;Passes/Transforms that could be useful if added here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check that a module was de-duplicated. Useful for MIM CAD flows and currently done in python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Be sure to publish-local the following repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ucb-bar/chisel-testers (requires ucb-bar/firrtl-interpreter)&lt;/li&gt; &#xA; &lt;li&gt;ucb-bar/firrtl&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt&#xA;&amp;gt; compile&#xA;&amp;gt; runMain barstools.tapeout.transforms.GenerateTop -i &amp;lt;myfile&amp;gt;.fir -o &amp;lt;myfile&amp;gt;.v --syn-top &amp;lt;mysyntop&amp;gt; --harness-top &amp;lt;myharnesstop&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building the macro compiler JAR:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sbt&#xA;[...]&#xA;[info] Set current project to tapeout (in build file:/mnt/data/dev/barstools_pcad/)&#xA;&amp;gt; assembly&#xA;[...]&#xA;[info] SHA-1: 77d4c759c825fd0ea93dfec26dbbb649f6cd5c89&#xA;[info] Packaging [...]/macros/target/scala-2.11/macros-assembly-0.1-SNAPSHOT.jar ...&#xA;[info] Done packaging.&#xA;[success] Total time: 28 s, completed Mar 21, 2018 2:28:34 PM&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>DataBiosphere/leonardo</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/DataBiosphere/leonardo</id>
    <link href="https://github.com/DataBiosphere/leonardo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Notebook service&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/DataBiosphere/leonardo/actions&#34;&gt;&lt;img src=&#34;https://github.com/DataBiosphere/leonardo/workflows/Unit%20tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/DataBiosphere/leonardo&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/DataBiosphere/leonardo/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Leonardo&lt;/h1&gt; &#xA;&lt;p&gt;Leonardo serves as a way to launch compute within the Terra security boundary. It does so via multiple different cloud hardware virtualization mechanisms, currently leveraging only the Google Cloud Platform.&lt;/p&gt; &#xA;&lt;p&gt;Leonardo supports launching the following services for compute:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spark clusters through &lt;a href=&#34;https://cloud.google.com/dataproc/&#34;&gt;Google Dataproc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Virtual machines through &lt;a href=&#34;https://cloud.google.com/compute&#34;&gt;Google Compute Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes &#39;apps&#39; through &lt;a href=&#34;https://cloud.google.com/kubernetes-engine&#34;&gt;Google Kubernetes Engine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, leonardo supports the launching of custom docker images for Jupyter and Rstudio in virtual machines and Dataproc. It also supports launching applications in Kubernetes, with a spotlight on Galaxy.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For more information on APIs, see &lt;a href=&#34;https://notebooks.firecloud.org/&#34;&gt;swagger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For more information on custom docker images, see the &lt;a href=&#34;https://github.com/DataBiosphere/terra-docker&#34;&gt;terra-docker repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For more information on applications we support in Kubernetes, see the &lt;a href=&#34;https://github.com/DataBiosphere/terra-app&#34;&gt;terra-apps repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For more information on Galaxy, see the &lt;a href=&#34;https://github.com/galaxyproject&#34;&gt;Galaxy Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to consume these APIs and functionality via the &lt;a href=&#34;https://terra.bio/&#34;&gt;Terra UI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We use JIRA instead of the issues page on Github. If you would like to see what we are working you can visit our &lt;a href=&#34;https://broadworkbench.atlassian.net/secure/RapidBoard.jspa?rapidView=35&amp;amp;projectKey=IA&#34;&gt;active sprint&lt;/a&gt; or our &lt;a href=&#34;https://broadworkbench.atlassian.net/secure/RapidBoard.jspa?rapidView=35&amp;amp;projectKey=IA&amp;amp;view=planning&amp;amp;selectedIssue=IA-1753&amp;amp;epics=visible&amp;amp;issueLimit=100&amp;amp;selectedEpic=IA-1715&#34;&gt;backlog&lt;/a&gt; on JIRA. You will need to set-up an account to access, but it is open to the public.&lt;/p&gt; &#xA;&lt;h2&gt;Building and running Leonardo&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/DataBiosphere/leonardo.git &#xA;$ cd leonardo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The instructions to run Leo locally are maintained in this &lt;a href=&#34;https://broadworkbench.atlassian.net/wiki/spaces/IA/pages/104399223/Callisto+Developer+Handbook#CallistoDeveloperHandbook-RunningLeoLocally&#34;&gt;confluence article&lt;/a&gt;. It may ask you to make an account, but no permissions are required to view.&lt;/p&gt; &#xA;&lt;h3&gt;Run Leonardo unit tests&lt;/h3&gt; &#xA;&lt;p&gt;Leonardo requires Java 8 due to a dependency on Java&#39;s DNS SPI functionality. This feature is removed in Java 9 and above.&lt;/p&gt; &#xA;&lt;p&gt;Ensure docker is running. Spin up MySQL locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./docker/run-mysql.sh start leonardo  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, if you see error like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Warning: Using a password on the command line interface can be insecure.&#xA;ERROR 2003 (HY000): Can&#39;t connect to MySQL server on &#39;mysql&#39; (113)&#xA;Warning: Using a password on the command line interface can be insecure.&#xA;ERROR 2003 (HY000): Can&#39;t connect to MySQL server on &#39;mysql&#39; (113)&#xA;Warning: Using a password on the command line interface can be insecure.&#xA;ERROR 2003 (HY000): Can&#39;t connect to MySQL server on &#39;mysql&#39; (113)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;docker system prune -a&lt;/code&gt;. If the error persists, try restart your laptop.&lt;/p&gt; &#xA;&lt;p&gt;Build Leonardo and run all unit tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export JAVA_OPTS=&#34;-Dheadless=false -Duser.timezone=UTC -Xmx4g -Xss2M -Xms4G&#34;&#xA;sbt clean compile &#34;project http&#34; test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run a particular test suite, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt &#34;testOnly *LeoAuthProviderHelperSpec&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or a particular test within a suite, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt &#34;testOnly org.broadinstitute.dsde.workbench.leonardo.runtimes.RuntimeCreationDiskSpec -- -z &#34;create runtime and attach a persistent disk&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;map&lt;/code&gt; is a substring within the test name.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;re done, tear down MySQL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./docker/run-mysql.sh stop leonardo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do &lt;code&gt;docker restart leonardo-mysql&lt;/code&gt; if you see &lt;code&gt;java.sql.SQLNonTransientConnectionException: Too many connections&lt;/code&gt; error&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running tests against FIAB Checking FIAB mysql (fina password in /etc/leonardo.conf in firecloud_leonardo-app_1 container)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it firecloud_leonardo-mysql_1 bash&#xA;root@2f5efbd4f138:/# mysql -u leonardo -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run scalafmt&lt;/h2&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://scalameta.org/scalafmt/docs/installation.html&#34;&gt;scalafmt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt scalafmtAll&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Leonardo docker image&lt;/h2&gt; &#xA;&lt;p&gt;To install git-secrets&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-$xslt&#34;&gt;brew install git-secrets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To ensure git hooks are run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-$xslt&#34;&gt;cp -r hooks/ .git/hooks/&#xA;chmod 755 .git/hooks/apply-git-secrets.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build jar, leonardo docker image, and leonardo-notebooks docker image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./docker/build.sh jar -d build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build jar, leonardo docker image, and leonardo-notebooks docker image and push to repos &lt;code&gt;broadinstitute/leonardo&lt;/code&gt; and &lt;code&gt;broadinstitute/leonardo-notebooks&lt;/code&gt; tagged with git hash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./docker/build.sh jar -d push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the leonardo-notebooks docker image with a given tag&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash ./jupyter-docker/build.sh build &amp;lt;TAG NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To push the leonardo-notebooks docker image you built to repo &lt;code&gt;broadinstitute/leonardo-notebooks&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash ./jupyter-docker/build.sh push &amp;lt;TAG NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/FFTGenerator</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/ucb-bar/FFTGenerator</id>
    <link href="https://github.com/ucb-bar/FFTGenerator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MMIO-Based FFT Generator for Chipyard&lt;/h1&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for this repo can be found in the &lt;a href=&#34;https://github.com/ucb-bar/chipyard&#34;&gt;Chipyard&lt;/a&gt; repo, where this project is intended to be used.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;The code for the FFT Generator was adapted from the ADEPT Lab at UC Berkeley&#39;s &lt;a href=&#34;https://adept.eecs.berkeley.edu/projects/hydra-spine/&#34;&gt;Hydra Spine&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;Authors for the original project (in no particular order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;James Dunn, UC Berkeley (&lt;a href=&#34;mailto:dunn@eecs.berkeley.edu&#34;&gt;dunn@eecs.berkeley.edu&lt;/a&gt;) (&lt;code&gt;Deserialize.scala&lt;/code&gt;, &lt;code&gt;Tail.scala&lt;/code&gt;, &lt;code&gt;Unscramble.scala&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Stevo Bailey (&lt;a href=&#34;mailto:stevo.bailey@berkeley.edu&#34;&gt;stevo.bailey@berkeley.edu&lt;/a&gt;) (&lt;code&gt;FFT.scala&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kah109xq/GSS-Cogss</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/kah109xq/GSS-Cogss</id>
    <link href="https://github.com/kah109xq/GSS-Cogss" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implement CSV validation following the W3C&#39;s CSV on the Web standard.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Validate CSV-W based on tests provided by W3C (&lt;a href=&#34;https://w3c.github.io/csvw/tests/#manifest-validation&#34;&gt;https://w3c.github.io/csvw/tests/#manifest-validation&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xxf098/shadowsocksr-v2ray-trojan-android</title>
    <updated>2022-05-30T01:52:06Z</updated>
    <id>tag:github.com,2022-05-30:/xxf098/shadowsocksr-v2ray-trojan-android</id>
    <link href="https://github.com/xxf098/shadowsocksr-v2ray-trojan-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A V2Ray, Trojan, ShadowsocksR client for Android&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;A ShadowsocksR, V2Ray and Trojan Client for Android&lt;/h2&gt; &#xA;&lt;p&gt;A fully featured &lt;a href=&#34;https://github.com/breakwa11/shadowsocks-rss/&#34;&gt;ShadowsocksR&lt;/a&gt;, &lt;a href=&#34;https://github.com/v2ray/v2ray-core&#34;&gt;V2Ray&lt;/a&gt; and &lt;a href=&#34;https://trojan-gfw.github.io/trojan/protocol&#34;&gt;Trojan&lt;/a&gt; client for Android, written in Scala.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/xxf098/shadowsocksr-v2ray-android/workflows/build/badge.svg?branch=xxf098%2Fmaster&amp;amp;event=push&#34; alt=&#34;build&#34;&gt; &lt;a href=&#34;https://github.com/xxf098/shadowsocksr-v2ray-android/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/xxf098/shadowsocksr-v2ray-android&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/xxf098/shadowsocksr-v2ray-android/issues/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/xxf098/shadowsocksr-v2ray-android.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PREREQUISITES&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A really fast proxy&lt;/li&gt; &#xA; &lt;li&gt;JDK 1.8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    sudo apt-get install openjdk-8-jdk&#xA;    export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64&#xA;    export PATH=$PATH:$JAVA_HOME/bin&#xA;    java -version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SBT &lt;a href=&#34;https://www.scala-sbt.org/download.html&#34;&gt;0.13.8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android SDK &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build Tools 30+&lt;/li&gt; &#xA;   &lt;li&gt;Android Support Repository and Google Repository (see &lt;code&gt;build.sbt&lt;/code&gt; for version)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Android NDK r21e+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;BUILD with Android Studio&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Warnning: Cannot build in windows&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;a href=&#34;https://developer.android.com/ndk/downloads/older_releases&#34;&gt;Android NDK r20b&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://plugins.jetbrains.com/plugin/1347-scala&#34;&gt;Scala&lt;/a&gt; plugin for IntelliJ IDEA&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set proxy for Android Studio: &lt;code&gt;File | Settings | Appearance &amp;amp; Behavior | System Settings | HTTP Proxy&lt;/code&gt;&lt;br&gt; Set proxy for sbt: &lt;code&gt;File | Settings | Build, Execution, Deployment | Build Tools | sbt&lt;/code&gt;, in &lt;code&gt;VM parameters&lt;/code&gt; input:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  -Dhttps.proxyHost=127.0.0.1&#xA;  -Dhttps.proxyPort=8080&#xA;  -Dhttp.proxyHost=127.0.0.1&#xA;  -Dhttp.proxyPort=8080&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; to &lt;code&gt;/path/to/Android/Sdk&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set environment variable &lt;code&gt;ANDROID_NDK_HOME&lt;/code&gt; to &lt;code&gt;/path/to/Android/android-ndk-r21e&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create your key following the instructions at &lt;a href=&#34;https://developer.android.com/studio/publish/app-signing.html&#34;&gt;https://developer.android.com/studio/publish/app-signing.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Put your key in ~/.keystore or any other place&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;local.properties&lt;/code&gt; from &lt;code&gt;local.properties.example&lt;/code&gt; with your own key information&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  key.alias: abc&#xA;  key.store: /path/to/Android/abc.jks&#xA;  key.store.password: abc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if you installed multiple versions of Java, use &lt;code&gt;sudo update-alternatives --config java&lt;/code&gt; to select Java 8&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Before build apk, make sure inside &lt;code&gt;./project/build.properties&lt;/code&gt;, sbt.version=0.13.18&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Invoke the building like this&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    export https_proxy=http://127.0.0.1:8080 # !important&#xA;    export ANDROID_HOME=/path/to/Android/Sdk&#xA;    export ANDROID_NDK_HOME=/path/to/Android/android-ndk-r20b&#xA;    # install and update all git submodule&#xA;    git submodule update --init&#xA;    # cd ./src/main/jni/shadowsocks-libev &amp;amp;&amp;amp; git checkout Akkariiin/master&#xA;    # Build the App and fix the problems as the error messages indicated&#xA;    sbt native-build clean android:package-release&#xA;    # run app&#xA;    sbt android:run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;If you use x64 linux like Archlinux x86_64, or your linux have new version ncurses lib, you may need install the 32bit version ncurses and link it as follow (make sure all these *.so files in the right location under your system, otherwise you have to copy them to /usr/lib/ and /usr/lib32/ directory):&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    # use Archlinux x86_64 as example&#xA;    &#xA;    # install ncurses x64 and x86 version&#xA;    sudo pacman -S lib32-ncurses ncurses&#xA;    &#xA;    # link the version-6 ncurses to version-5&#xA;    sudo ln -s /usr/lib/libncursesw.so /usr/lib/libncurses.so.5&#xA;    sudo ln -s /usr/lib32/libncursesw.so /usr/lib32/libncurses.so.5&#xA;    &#xA;    # link libncurses to libtinfo&#xA;    sudo ln -s /usr/lib/libncurses.so.5 /usr/lib/libtinfo.so.5&#xA;    sudo ln -s /usr/lib32/libncurses.so.5 /usr/lib32/libtinfo.so.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Integration with Android Studio&lt;/h4&gt; &#xA;&lt;p&gt;Checkout this &lt;a href=&#34;http://srodrigo.me/setting-up-scala-on-android/&#34;&gt;link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rm -rf ~/.android/sbt/exploded-aars/*&lt;/li&gt; &#xA; &lt;li&gt;In Project Settings -&amp;gt; Modules -&amp;gt; shadowsocksr-v2ray-trojan-android, change &lt;code&gt;Structure&lt;/code&gt;, &lt;code&gt;Generated Sources&lt;/code&gt; to correct file path&lt;/li&gt; &#xA; &lt;li&gt;In Run/Debug Configuration -&amp;gt; Before launch, replace &lt;code&gt;Gradle-aware Make&lt;/code&gt; with &lt;code&gt;android:run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;BUILD on Mac OS X (with HomeBrew)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Android SDK and NDK by run &lt;code&gt;brew install android-ndk android-sdk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;export ANDROID_HOME=/usr/local/Cellar/android-sdk/$version&lt;/code&gt; to your .bashrc , then reopen the shell to load it.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;export ANDROID_NDK_HOME=/usr/local/Cellar/android-ndk/$version&lt;/code&gt; to your .bashrc , then reopen the shell to load it.&lt;/li&gt; &#xA; &lt;li&gt;echo &#34;y&#34; | android update sdk --filter tools,platform-tools,build-tools-23.0.2,android-23,extra-google-m2repository --no-ui -a&lt;/li&gt; &#xA; &lt;li&gt;echo &#34;y&#34; | android update sdk --filter extra-android-m2repository --no-ui --no-https -a&lt;/li&gt; &#xA; &lt;li&gt;Create your key following the instructions at &lt;a href=&#34;http://developer.android.com/guide/publishing/app-signing.html#cert&#34;&gt;http://developer.android.com/guide/publishing/app-signing.html#cert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Put your key in ~/.keystore&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;local.properties&lt;/code&gt; from &lt;code&gt;local.properties.example&lt;/code&gt; with your own key information .&lt;/li&gt; &#xA; &lt;li&gt;Invoke the building like this&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    git submodule update --init&#xA;&#xA;    # Build native binaries&#xA;    ./build.sh&#xA;&#xA;    # Build the apk&#xA;    sbt clean android:package-release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OPEN SOURCE LICENSES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;shadowsocks-libev: &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-libev/raw/master/LICENSE&#34;&gt;GPLv3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tun2socks: &lt;a href=&#34;https://github.com/shadowsocks/badvpn/raw/shadowsocks-android/COPYING&#34;&gt;BSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;redsocks: &lt;a href=&#34;https://github.com/shadowsocks/redsocks/raw/master/README&#34;&gt;APL 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL: &lt;a href=&#34;https://github.com/shadowsocks/openssl-android/raw/master/NOTICE&#34;&gt;OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;pdnsd: &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-android/raw/master/src/main/jni/pdnsd/COPYING&#34;&gt;GPLv3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;libev: &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-android/raw/master/src/main/jni/libev/LICENSE&#34;&gt;GPLv2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;libevent: &lt;a href=&#34;https://github.com/shadowsocks/libevent/raw/master/LICENSE&#34;&gt;BSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;v2ray-core: &lt;a href=&#34;https://github.com/v2fly/v2ray-core/raw/master/LICENSE&#34;&gt;BSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;go-tun2socks: &lt;a href=&#34;https://github.com/eycorsican/go-tun2socks/raw/master/LICENSE&#34;&gt;BSD&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LICENSE&lt;/h3&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>