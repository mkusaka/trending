<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-18T01:32:22Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rockthejvm/scalatags-htmx-demo</title>
    <updated>2024-05-18T01:32:22Z</updated>
    <id>tag:github.com,2024-05-18:/rockthejvm/scalatags-htmx-demo</id>
    <link href="https://github.com/rockthejvm/scalatags-htmx-demo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ScalaTags + htmx + ZIO HTTP Demo&lt;/h1&gt; &#xA;&lt;p&gt;This is a small demo project showcasing an integration between&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ZIO HTTP&lt;/li&gt; &#xA; &lt;li&gt;ScalaTags&lt;/li&gt; &#xA; &lt;li&gt;htmx&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Welcome to Neon Pages: an extremely minimal CRM where you can keep a database of people with name, email, phone number or other data. You can add, remove, edit and search for people in the web app, and bulk-edit/bulk-delete.&lt;/p&gt; &#xA;&lt;p&gt;This is a single-page application (SPA) built with ZIO, ScalaTags and htmx.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rockthejvm/scalatags-htmx-demo/master/static/neon%20pages.png&#34; alt=&#34;neon pages&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to run&lt;/h2&gt; &#xA;&lt;p&gt;This demo project has a main class in &lt;code&gt;Main.scala&lt;/code&gt;, so you can run the project by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to develop&lt;/h2&gt; &#xA;&lt;p&gt;Fork or clone this repo and in an SBT console do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and SBT will pick up your changes as you develop. The server will have to be restarted.&lt;/p&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;p&gt;This application is built with&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a SQLite store, which can be replaced by Postgres or some other database&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zio.dev/zio-quill/&#34;&gt;Quill&lt;/a&gt; for type-safe queries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zio.dev/&#34;&gt;ZIO&lt;/a&gt; for managing effects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zio.dev/zio-http/&#34;&gt;ZIO HTTP&lt;/a&gt; for server endpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://com-lihaoyi.github.io/scalatags/&#34;&gt;ScalaTags&lt;/a&gt; for server-side rendering (SSR)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://htmx.org/&#34;&gt;htmx&lt;/a&gt;, a JavaScript library which manages classic single-page application (SPA) flows and backend calls via custom HTML attributes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &#34;architecture&#34; of the application is layered using ZLayers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;in &lt;code&gt;db&lt;/code&gt; we have layers for the Quill data sources&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;repositories&lt;/code&gt; is layer for type-safe CRUD operations we&#39;re interested in, created with Quill, based on the &lt;code&gt;db&lt;/code&gt; layer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;services&lt;/code&gt; is a layer dedicated to business logic, usually with one or more actions from &lt;code&gt;repositories&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;controllers&lt;/code&gt; is a layer for HTTP endpoints and request/response handling logic, usually delegating to one or more &lt;code&gt;services&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;on top of that, &lt;code&gt;views&lt;/code&gt; is the Scala representation of the web pages (with ScalaTags and htmx attributes), which we serve directly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Besides the classical layers, we have a &lt;code&gt;domain&lt;/code&gt; for the data types and errors we&#39;re using in the app, and a &lt;code&gt;config&lt;/code&gt; layer which can fetch configuration from &lt;code&gt;application.conf&lt;/code&gt;. The application also contains a &lt;code&gt;Flyway&lt;/code&gt; service for migrations.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>scalacenter/sbt-dependency-submission</title>
    <updated>2024-05-18T01:32:22Z</updated>
    <id>tag:github.com,2024-05-18:/scalacenter/sbt-dependency-submission</id>
    <link href="https://github.com/scalacenter/sbt-dependency-submission" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Github Action to submit the dependency graph of an sbt build to the Dependency Submission API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sbt Dependency Submission&lt;/h1&gt; &#xA;&lt;p&gt;A Github action to submit the dependency graph of an &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt; build to the Github &lt;a href=&#34;https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/using-the-dependency-submission-api&#34;&gt;Dependency submission API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before running the workflow, make sure that the &lt;code&gt;Dependency Graph&lt;/code&gt; feature is enabled in the settings of your repository (&lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Code Security and Analysis&lt;/code&gt;). The graph of your sbt build will be visible in the &lt;a href=&#34;https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/exploring-the-dependencies-of-a-repository&#34;&gt;Dependency Graph&lt;/a&gt; page of the &lt;code&gt;Insights&lt;/code&gt; tab.&lt;/p&gt; &#xA;&lt;p&gt;Enable &lt;a href=&#34;https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-supply-chain-security#what-is-dependabot&#34;&gt;Dependabot&lt;/a&gt; in your project settings to receive alerts for vulnerabilities that affect your sbt project.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Any sbt project whose sbt version is equal to or greater than 1.5.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Create a Github Action file under &lt;code&gt;.github/workflows&lt;/code&gt; containing the following definition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# .github/workflows/dependency-graph.yml&#xA;name: Update Dependency Graph&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - main # default branch of the project&#xA;jobs:&#xA;  dependency-graph:&#xA;    name: Update Dependency Graph&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v3&#xA;      - uses: scalacenter/sbt-dependency-submission@v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inputs&lt;/h3&gt; &#xA;&lt;h4&gt;- &lt;code&gt;working-directory&lt;/code&gt; (optional)&lt;/h4&gt; &#xA;&lt;p&gt;The relative path of the working directory of your sbt build. Default value is &lt;code&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;- &lt;code&gt;modules-ignore&lt;/code&gt; (optional)&lt;/h4&gt; &#xA;&lt;p&gt;A list of space-separated names of modules to ignore. The action will not resolve nor submit the dependencies of these modules. The name of a module contains the name of the project and its binary version.&lt;/p&gt; &#xA;&lt;p&gt;Example: &lt;code&gt;foo_2.13 bar_2.13&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;- &lt;code&gt;configs-ignore&lt;/code&gt; (optional)&lt;/h4&gt; &#xA;&lt;p&gt;A list of space-separated names of configurations to ignore. The action will not submit the dependencies of these configurations.&lt;/p&gt; &#xA;&lt;p&gt;Example of configurations are &lt;code&gt;compile&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;scala-tool&lt;/code&gt;, &lt;code&gt;scala-doc-tool&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;- &lt;code&gt;token&lt;/code&gt; (optional)&lt;/h4&gt; &#xA;&lt;p&gt;GitHub Personal Access Token (PAT). Defaults to PAT provided by Action runner.&lt;/p&gt; &#xA;&lt;p&gt;Example: &lt;code&gt;${{ secrets.USER_TOKEN }}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Outputs&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;submission-id&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Once the snapshot of the dependencies has been submitted, GitHub responds with an ID of this snapshot.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;submission-api-url&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The API URL of the submission created by the action. It can be queried to get the submitted snapshot.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;snapshot-json-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Path to the temporary JSON file with the dependency snapshot that has been submitted.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;h5&gt;Excluding some projects or some Scala versions from the dependency submission.&lt;/h5&gt; &#xA;&lt;p&gt;In this example the snapshot will not contain the graphs of &lt;code&gt;foo_2.13&lt;/code&gt; and &lt;code&gt;bar_3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;&#xA;## in .github/workflows/dependency-graph.md&#xA;...&#xA;steps:&#xA;  - uses: actions/checkout@v3&#xA;  - uses: scalacenter/sbt-dependency-submission@v2&#xA;    with:&#xA;      working-directory: ./my-scala-project&#xA;      modules-ignore: foo_2.13 bar_3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Excluding the Scaladoc dependencies.&lt;/h4&gt; &#xA;&lt;p&gt;In this example the snapshot will not contain the dependencies of the scala-doc-tool configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;&#xA;## in .github/workflows/dependency-graph.md&#xA;...&#xA;steps:&#xA;  - uses: actions/checkout@v3&#xA;  - uses: scalacenter/sbt-dependency-submission@v2&#xA;    with:&#xA;      working-directory: ./my-scala-project&#xA;      configs-ignore: scala-doc-tool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;How to generate a snapshot locally?&lt;/h3&gt; &#xA;&lt;p&gt;For troubleshooting, it can be convenient to generate a snapshot locally.&lt;/p&gt; &#xA;&lt;p&gt;To do so you need to install the &lt;code&gt;sbt-dependency-submission&lt;/code&gt; plugin in your sbt project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// In project/plugins.sbt&#xA;addSbtPlugin(&#34;ch.epfl.scala&#34; % &#34;sbt-github-dependency-submission&#34; % &#34;3.0.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After reloading your build, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt:example&amp;gt; githubGenerateSnapshot&#xA;...&#xA;[info] Dependency snapshot written to /tmp/dependency-snapshot-3080240838874963577.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to exclude some modules or configs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt:example&amp;gt; githubGenerateSnapshot {&#34;ignoredModules&#34;:[&#34;server_2.13&#34;], &#34;ignoredConfigs&#34;:[&#34;test&#34;]}&#xA;...&#xA;[info] Dependency snapshot written to /tmp/dependency-snapshot-14803616116503623758.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unexpected Status: 404&lt;/h3&gt; &#xA;&lt;p&gt;This error happens when the &lt;code&gt;Dependency Graph&lt;/code&gt; feature is disabled. You can enable it in &lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Code Security and Analysis&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13123162/177736071-5bd63d3c-d338-4e51-a3c9-ad8d11e35508.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Unexpected Status: 403&lt;/h3&gt; &#xA;&lt;p&gt;This error happens when the workflow does not have the right permission on the repository.&lt;/p&gt; &#xA;&lt;p&gt;First you should check that the workflow is not triggered on PR from forked repositories. It should be triggered by push to the default branch.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;## in .github/workflows/dependency-graph.md&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - main # default branch of the project&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then check that you enabled the read and write permissions for all workflows, at the bottom of the &lt;code&gt;Settings &amp;gt; Actions &amp;gt; General&lt;/code&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13123162/179472237-bffea114-9e99-4736-83ef-00dc7f41149b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you do not want to enable this you can add the write permission on the &lt;code&gt;dependency-graph&lt;/code&gt; workflow only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;## in .github/workflows/dependency-graph.md&#xA;...&#xA;permissions:&#xA;      contents: write # this permission is needed to submit the dependency graph&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;sbt.librarymanagement.ResolveException: Error downloading&lt;/h3&gt; &#xA;&lt;p&gt;This error may happen when you try to access artifacts from private GitHub packages with the default GitHub token. You need to pass personal access token which is allowed to access private packages in the &lt;code&gt;token&lt;/code&gt; input.&lt;/p&gt;</summary>
  </entry>
</feed>