<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-04T01:58:10Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zio/zio-quickstart-restful-webservice</title>
    <updated>2022-07-04T01:58:10Z</updated>
    <id>tag:github.com,2022-07-04:/zio/zio-quickstart-restful-webservice</id>
    <link href="https://github.com/zio/zio-quickstart-restful-webservice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal quickstart ZIO application for writing a RESTful Web Service&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZIO Quickstart: Building RESTful Web Service&lt;/h1&gt; &#xA;&lt;p&gt;This is the simple quickstart for writing a RESTful ZIO Web Service. You can download and run it very quickly. This will give you an idea of how to write similar apps.&lt;/p&gt; &#xA;&lt;p&gt;This quickstart shows how to build a simple RESTful web service using ZIO. It uses&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dream11.github.io/zio-http/&#34;&gt;ZIO HTTP&lt;/a&gt; for the HTTP server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zio.github.io/zio-json/&#34;&gt;ZIO JSON&lt;/a&gt; for the JSON serialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zio.github.io/zio-logging/&#34;&gt;ZIO Logging&lt;/a&gt; for integrate logging with slf4j&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zio.github.io/zio-config/&#34;&gt;ZIO Config&lt;/a&gt; for loading configuration data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart Guide&lt;/h2&gt; &#xA;&lt;p&gt;We have a dedicated article about this quickstart at the ZIO documentation website called &lt;a href=&#34;https://zio.dev/next/quickstarts/restful-webservice&#34;&gt;ZIO Quickstart: Building RESTful Web Service&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running The Example&lt;/h2&gt; &#xA;&lt;p&gt;First, open the console and clone the project using &lt;code&gt;git&lt;/code&gt; (or you can simply download the project) and then change the directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;git clone git@github.com:zio/zio-quickstart-restful-webservice.git &#xA;cd zio-quickstart-restful-webservice&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you are inside the project directory, run the application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;sbt run&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>camunda/feel-scala</title>
    <updated>2022-07-04T01:58:10Z</updated>
    <id>tag:github.com,2022-07-04:/camunda/feel-scala</id>
    <link href="https://github.com/camunda/feel-scala" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FEEL parser and interpreter written in Scala&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FEEL Scala&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/org.camunda.feel/feel-engine&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/org.camunda.feel/feel-engine/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A parser and interpreter for FEEL that is written in Scala (see &lt;a href=&#34;https://camunda.github.io/feel-scala/docs/reference/what-is-feel&#34;&gt;What is FEEL?&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The FEEL engine started as a slack time project, grown to a community-driven project and is now officially maintained by &lt;a href=&#34;https://camunda.org/&#34;&gt;Camunda&lt;/a&gt; &lt;span&gt;ðŸš€&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is integrated in the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.camunda.org/manual/user-guide/dmn-engine/feel/&#34;&gt;Camunda Platform&lt;/a&gt; as part of the DMN engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.camunda.io/docs/product-manuals/concepts/expressions#the-expression-language&#34;&gt;Zeebe&lt;/a&gt; as expression language&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt; &lt;span&gt;âœ¨&lt;/span&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;full support for unary-tests and expressions (DMN 1.2)&lt;/li&gt; &#xA; &lt;li&gt;including built-in functions&lt;/li&gt; &#xA; &lt;li&gt;extensible by own functions and custom object mappers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Please have a look at the &lt;a href=&#34;https://camunda.github.io/feel-scala/docs/reference&#34;&gt;documentation&lt;/a&gt;. It describes how to write FEEL expressions (e.g. data types, language constructs, builtin-functions, etc.), and contains some examples.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Please have a look at the &lt;a href=&#34;https://camunda.github.io/feel-scala/docs/reference/developer-guide/developer-guide-introduction&#34;&gt;documentation&lt;/a&gt;. It describes how to intregrate the engine into your application, and how to extend/customize it.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome ðŸŽ‰ Please have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/camunda/feel-scala/master/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following resources can help to understand some general concepts behind the implementation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lihaoyi.com/post/BuildyourownProgrammingLanguagewithScala.html&#34;&gt;Build your own Programming Language with Scala&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lihaoyi.com/post/EasyParsingwithParserCombinators.html&#34;&gt;Easy Parsing with Parser Combinators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://com-lihaoyi.github.io/fastparse/&#34;&gt;FastParse - Documentation of the Parser Library&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/camunda/feel-scala/master/LICENSE&#34;&gt;Apache License, Version 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zio/zio-quickstart-hello-world</title>
    <updated>2022-07-04T01:58:10Z</updated>
    <id>tag:github.com,2022-07-04:/zio/zio-quickstart-hello-world</id>
    <link href="https://github.com/zio/zio-quickstart-hello-world" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal working example of ZIO Application&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZIO Quickstart Hello World&lt;/h1&gt; &#xA;&lt;p&gt;This is the simplest quickstart for a ZIO application. You can download and run it very quickly. This will give you an idea of how to write similar apps.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart Guide&lt;/h2&gt; &#xA;&lt;p&gt;We have a dedicated article about this quickstart at the ZIO documentation website called &lt;a href=&#34;https://zio.dev/guides/quickstarts/hello-world/&#34;&gt;ZIO Quickstart: Hello World&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running The Example&lt;/h2&gt; &#xA;&lt;p&gt;First, open the console and clone the project using &lt;code&gt;git&lt;/code&gt; (or you can simply download the project) and then change the directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;git clone git@github.com:zio/zio-quickstart-hello-world.git &#xA;cd zio-quickstart-hello-world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you are inside the project directory, run the application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;sbt run&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>