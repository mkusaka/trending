<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-13T01:38:10Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jonoabroad/liftmodules-aws-sns</title>
    <updated>2022-10-13T01:38:10Z</updated>
    <id>tag:github.com,2022-10-13:/jonoabroad/liftmodules-aws-sns</id>
    <link href="https://github.com/jonoabroad/liftmodules-aws-sns" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lift module to plug AWS SNS into your lift application.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AWS SNS Lift Module&lt;/h1&gt; &#xA;&lt;p&gt;Provides a wrapper around the Amazon Web Service Simple Notification Service.&lt;/p&gt; &#xA;&lt;h2&gt;Using this module&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following repository to your SBT project file:&lt;/p&gt; &lt;p&gt;For SBT 0.11:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; resolvers += &#34;liftmodules repository&#34; at &#34;http://repository-liftmodules.forge.cloudbees.com/release/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For SBT 0.7:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; lazy val liftModulesRelease = &#34;liftmodules repository&#34; at &#34;http://repository-liftmodules.forge.cloudbees.com/release/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Include this dependency:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  &#34;net.liftmodules&#34; %% &#34;aws&#34; % &#34;sns&#34; % (liftVersion+&#34;VERSION&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement notification handler&lt;/p&gt; &lt;p&gt;def myhandler = { case msg =&amp;gt; println(&#34;hello %s&#34;.format(msg)) } : HandlerFunction&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extends the SNS class supplying configuration parameters and your handler&lt;/p&gt; &lt;p&gt;object Example extends SNS(SNSConfig(creds,arn,path),myhandler)&lt;/p&gt; &lt;p&gt;Required configuration:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;creds.access = AWS access key &#xA;creds.secret = AWS secret key &#xA;arn  &#x9;&#x9; = topic arn, this needs to exist already&#xA;path&#x9;&#x9; = the path AWS will post notifications to, its a list, i.e List(&#34;my&#34;,&#34;notifications&#34;,&#34;here&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your application&#39;s Boot.boot code initalise the service.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;       Example.init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Publish notifications&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#x9;&#x9;Example ! Publish(&#34;my message&#34;)              &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>OpenCoin/opencoin-issuer-scala</title>
    <updated>2022-10-13T01:38:10Z</updated>
    <id>tag:github.com,2022-10-13:/OpenCoin/opencoin-issuer-scala</id>
    <link href="https://github.com/OpenCoin/opencoin-issuer-scala" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Opencoin issuer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Opencoin Issuer&lt;/h1&gt; &#xA;&lt;p&gt;This is a demo implementation of an &lt;a href=&#34;http://www.opencoin.org&#34;&gt;opencoin&lt;/a&gt; issuer. It is based on the current &lt;a href=&#34;http://okfnpad.org/opencoin-v3&#34;&gt;specification draft&lt;/a&gt; but for simplicity reasons follows a web service approach. The specified message based approach will be implemented later. Different currencies can be located at different base paths. For now one demo currency Gulden is available. A demo issuer is running &lt;a href=&#34;https://mighty-lake-9219.herokuapp.com/&#34;&gt;here&lt;/a&gt;. See it for more details of the provided interface.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Start the server: sbt ~re-start Test the interfaces. For instance: curl &lt;a href=&#34;http://localhost:8080/gulden/cdds/latest&#34;&gt;http://localhost:8080/gulden/cdds/latest&lt;/a&gt; curl -X POST --header &#34;Content-Type:application/json&#34; -d &#34;{&#34;Build&#34;:&#34;your&#34;,&#34;POST&#34;:request}&#34; &lt;a href=&#34;http://localhost:8080/gulden/validation&#34;&gt;http://localhost:8080/gulden/validation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For testing the issuer and its database, the following commands may be entered into the console, started with sbt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import org.scalaquery.session.Database&#xA;val db: Database = Database.forURL(&#34;jdbc:h2:mem:test1;DB_CLOSE_DELAY=-1&#34;, driver = &#34;org.h2.Driver&#34;)&#xA;import org.opencoin.issuer.Issuer&#xA;val issuer = new Issuer(db)&#xA;issuer.init&#xA;import org.opencoin.issuer.Testdata._&#xA;var l = List(coin1, coin2, coin3)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;curl -H &#34;Content-Type: application/json&#34; -i -X POST --data &#34;{&#34;message_reference&#34;:0,&#34;type&#34;:&#34;request cdd serial&#34;}&#34; &lt;a href=&#34;http://localhost:8080/gulden/message-api&#34;&gt;http://localhost:8080/gulden/message-api&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;GPLv3. See LICENSE file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ftison/jdbctester</title>
    <updated>2022-10-13T01:38:10Z</updated>
    <id>tag:github.com,2022-10-13:/ftison/jdbctester</id>
    <link href="https://github.com/ftison/jdbctester" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command line tool to check database connectivity&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jdbctester&lt;/h1&gt; &#xA;&lt;p&gt;Command line tool to check database connectivity&lt;/p&gt; &#xA;&lt;p&gt;Info : Under development. Not already usable.&lt;/p&gt; &#xA;&lt;h2&gt;Syntaxe :&lt;/h2&gt; &#xA;&lt;p&gt;jdbctest.sh --user &#xA; &lt;username&gt;&#xA;   --passwd &#xA;  &lt;password&gt;&#xA;    --url &#xA;   &lt;url&gt;&#xA;     --driver &#xA;    &lt;jdbc driver class name&gt;&lt;/jdbc&gt;&#xA;   &lt;/url&gt;&#xA;  &lt;/password&gt;&#xA; &lt;/username&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Result :&lt;/h2&gt; &#xA;&lt;p&gt;Same return code as a Nagios Plugin.&lt;/p&gt; &#xA;&lt;p&gt;0 = OK. Check is ok&lt;/p&gt; &#xA;&lt;p&gt;1 = WARNING. The plugin was able to check the service, but it appeared to be above some &#34;warning&#34; threshold or did not appear to be working properly&lt;/p&gt; &#xA;&lt;p&gt;2 = CRITICAL. The plugin detected that either the service was not running or it was above some &#34;critical&#34; threshold&lt;/p&gt; &#xA;&lt;p&gt;3 = UNKNOWN. nvalid command line arguments were supplied to the plugin or low-level failures internal to the plugin (such as unable to fork, or open a tcp socket) that prevent it from performing the specified operation.&lt;/p&gt;</summary>
  </entry>
</feed>