<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-22T01:46:46Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ucb-bar/chipyard</title>
    <updated>2024-04-22T01:46:46Z</updated>
    <id>tag:github.com,2024-04-22:/ucb-bar/chipyard</id>
    <link href="https://github.com/ucb-bar/chipyard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Agile RISC-V SoC Design Framework with in-order cores, out-of-order cores, accelerators, and more&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/ucb-bar/chipyard/raw/main/docs/_static/images/chipyard-logo-full.png&#34; alt=&#34;CHIPYARD&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Chipyard Framework &lt;a href=&#34;https://github.com/ucb-bar/chipyard/actions&#34;&gt;&lt;img src=&#34;https://github.com/ucb-bar/chipyard/actions/workflows/chipyard-run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Quick Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stable Documentation&lt;/strong&gt;: &lt;a href=&#34;https://chipyard.readthedocs.io/&#34;&gt;https://chipyard.readthedocs.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Question Forum&lt;/strong&gt;: &lt;a href=&#34;https://groups.google.com/forum/#!forum/chipyard&#34;&gt;https://groups.google.com/forum/#!forum/chipyard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bugs and Feature Requests&lt;/strong&gt;: &lt;a href=&#34;https://github.com/ucb-bar/chipyard/issues&#34;&gt;https://github.com/ucb-bar/chipyard/issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Chipyard&lt;/h2&gt; &#xA;&lt;p&gt;To get started using Chipyard, see the stable documentation on the Chipyard documentation site: &lt;a href=&#34;https://chipyard.readthedocs.io/&#34;&gt;https://chipyard.readthedocs.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Chipyard&lt;/h2&gt; &#xA;&lt;p&gt;Chipyard is an open source framework for agile development of Chisel-based systems-on-chip. It will allow you to leverage the Chisel HDL, Rocket Chip SoC generator, and other &lt;a href=&#34;https://berkeley.edu&#34;&gt;Berkeley&lt;/a&gt; projects to produce a &lt;a href=&#34;https://riscv.org/&#34;&gt;RISC-V&lt;/a&gt; SoC with everything from MMIO-mapped peripherals to custom accelerators. Chipyard contains processor cores (&lt;a href=&#34;https://github.com/freechipsproject/rocket-chip&#34;&gt;Rocket&lt;/a&gt;, &lt;a href=&#34;https://github.com/riscv-boom/riscv-boom&#34;&gt;BOOM&lt;/a&gt;, &lt;a href=&#34;https://github.com/openhwgroup/cva6/&#34;&gt;CVA6 (Ariane)&lt;/a&gt;), accelerators (&lt;a href=&#34;https://www2.eecs.berkeley.edu/Pubs/TechRpts/2015/EECS-2015-262.pdf&#34;&gt;Hwacha&lt;/a&gt;, &lt;a href=&#34;https://github.com/ucb-bar/gemmini&#34;&gt;Gemmini&lt;/a&gt;, &lt;a href=&#34;http://nvdla.org/&#34;&gt;NVDLA&lt;/a&gt;), memory systems, and additional peripherals and tooling to help create a full featured SoC. Chipyard supports multiple concurrent flows of agile hardware development, including software RTL simulation, FPGA-accelerated simulation (&lt;a href=&#34;https://fires.im&#34;&gt;FireSim&lt;/a&gt;), automated VLSI flows (&lt;a href=&#34;https://github.com/ucb-bar/hammer&#34;&gt;Hammer&lt;/a&gt;), and software workload generation for bare-metal and Linux-based systems (&lt;a href=&#34;https://github.com/firesim/FireMarshal/&#34;&gt;FireMarshal&lt;/a&gt;). Chipyard is actively developed in the &lt;a href=&#34;http://bar.eecs.berkeley.edu&#34;&gt;Berkeley Architecture Research Group&lt;/a&gt; in the &lt;a href=&#34;https://eecs.berkeley.edu&#34;&gt;Electrical Engineering and Computer Sciences Department&lt;/a&gt; at the &lt;a href=&#34;https://berkeley.edu&#34;&gt;University of California, Berkeley&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chipyard Stable Documentation: &lt;a href=&#34;https://chipyard.readthedocs.io/&#34;&gt;https://chipyard.readthedocs.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chipyard (x FireSim) Tutorial: &lt;a href=&#34;https://fires.im/tutorial-recent/&#34;&gt;https://fires.im/tutorial-recent/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chipyard Basics slides: &lt;a href=&#34;https://fires.im/asplos23-slides-pdf/02_chipyard_basics.pdf&#34;&gt;https://fires.im/asplos23-slides-pdf/02_chipyard_basics.pdf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the Chipyard Mailing List: &lt;a href=&#34;https://groups.google.com/forum/#!forum/chipyard&#34;&gt;https://groups.google.com/forum/#!forum/chipyard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you find a bug or would like propose a feature, post an issue on this repo: &lt;a href=&#34;https://github.com/ucb-bar/chipyard/issues&#34;&gt;https://github.com/ucb-bar/chipyard/issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ucb-bar/chipyard/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attribution and Chipyard-related Publications&lt;/h2&gt; &#xA;&lt;p&gt;If used for research, please cite Chipyard by the following publication:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{chipyard,&#xA;  author={Amid, Alon and Biancolin, David and Gonzalez, Abraham and Grubb, Daniel and Karandikar, Sagar and Liew, Harrison and Magyar,   Albert and Mao, Howard and Ou, Albert and Pemberton, Nathan and Rigge, Paul and Schmidt, Colin and Wright, John and Zhao, Jerry and Shao, Yakun Sophia and Asanovi\&#39;{c}, Krste and Nikoli\&#39;{c}, Borivoje},&#xA;  journal={IEEE Micro},&#xA;  title={Chipyard: Integrated Design, Simulation, and Implementation Framework for Custom SoCs},&#xA;  year={2020},&#xA;  volume={40},&#xA;  number={4},&#xA;  pages={10-21},&#xA;  doi={10.1109/MM.2020.2996616},&#xA;  ISSN={1937-4143},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chipyard&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A. Amid, et al. &lt;em&gt;IEEE Micro&#39;20&lt;/em&gt; &lt;a href=&#34;https://ieeexplore.ieee.org/document/9099108&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A. Amid, et al. &lt;em&gt;DAC&#39;20&lt;/em&gt; &lt;a href=&#34;https://ieeexplore.ieee.org/document/9218756&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A. Amid, et al. &lt;em&gt;ISCAS&#39;21&lt;/em&gt; &lt;a href=&#34;https://ieeexplore.ieee.org/abstract/document/9401515&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These additional publications cover many of the internal components used in Chipyard. However, for the most up-to-date details, users should refer to the Chipyard docs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generators&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Rocket Chip&lt;/strong&gt;: K. Asanovic, et al., &lt;em&gt;UCB EECS TR&lt;/em&gt;. &lt;a href=&#34;http://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-17.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BOOM&lt;/strong&gt;: C. Celio, et al., &lt;em&gt;Hot Chips 30&lt;/em&gt;. &lt;a href=&#34;https://old.hotchips.org/hc30/1conf/1.03_Berkeley_BROOM_HC30.Berkeley.Celio.v02.pdf&#34;&gt;PDF&lt;/a&gt;. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;SonicBOOM (BOOMv3)&lt;/strong&gt;: J. Zhao, et al., &lt;em&gt;CARRV&#39;20&lt;/em&gt;. &lt;a href=&#34;https://carrv.github.io/2020/papers/CARRV2020_paper_15_Zhao.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;COBRA (BOOM Branch Prediction)&lt;/strong&gt;: J. Zhao, et al., &lt;em&gt;ISPASS&#39;21&lt;/em&gt;. &lt;a href=&#34;https://ieeexplore.ieee.org/document/9408173&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Hwacha&lt;/strong&gt;: Y. Lee, et al., &lt;em&gt;ESSCIRC&#39;14&lt;/em&gt;. &lt;a href=&#34;http://hwacha.org/papers/riscv-esscirc2014.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Gemmini&lt;/strong&gt;: H. Genc, et al., &lt;em&gt;DAC&#39;21&lt;/em&gt;. &lt;a href=&#34;https://arxiv.org/pdf/1911.09925&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sims&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;FireSim&lt;/strong&gt;: S. Karandikar, et al., &lt;em&gt;ISCA&#39;18&lt;/em&gt;. &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.pdf&#34;&gt;PDF&lt;/a&gt;. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;FireSim Micro Top Picks&lt;/strong&gt;: S. Karandikar, et al., &lt;em&gt;IEEE Micro, Top Picks 2018&lt;/em&gt;. &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-micro-top-picks2018.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;FASED&lt;/strong&gt;: D. Biancolin, et al., &lt;em&gt;FPGA&#39;19&lt;/em&gt;. &lt;a href=&#34;https://people.eecs.berkeley.edu/~biancolin/papers/fased-fpga19.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Golden Gate&lt;/strong&gt;: A. Magyar, et al., &lt;em&gt;ICCAD&#39;19&lt;/em&gt;. &lt;a href=&#34;https://davidbiancolin.github.io/papers/goldengate-iccad19.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;FirePerf&lt;/strong&gt;: S. Karandikar, et al., &lt;em&gt;ASPLOS&#39;20&lt;/em&gt;. &lt;a href=&#34;https://sagark.org/assets/pubs/fireperf-asplos2020.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;FireSim ISCA@50 Retrospective&lt;/strong&gt;: S. Karandikar, et al., &lt;em&gt;ISCA@50 Retrospective: 1996-2020&lt;/em&gt;. &lt;a href=&#34;https://sites.coecis.cornell.edu/isca50retrospective/files/2023/06/Karandikar_2018_FireSim.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Chisel&lt;/strong&gt;: J. Bachrach, et al., &lt;em&gt;DAC&#39;12&lt;/em&gt;. &lt;a href=&#34;https://people.eecs.berkeley.edu/~krste/papers/chisel-dac2012.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;FIRRTL&lt;/strong&gt;: A. Izraelevitz, et al., &lt;em&gt;ICCAD&#39;17&lt;/em&gt;. &lt;a href=&#34;https://ieeexplore.ieee.org/document/8203780&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Chisel DSP&lt;/strong&gt;: A. Wang, et al., &lt;em&gt;DAC&#39;18&lt;/em&gt;. &lt;a href=&#34;https://ieeexplore.ieee.org/document/8465790&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;FireMarshal&lt;/strong&gt;: N. Pemberton, et al., &lt;em&gt;ISPASS&#39;21&lt;/em&gt;. &lt;a href=&#34;https://ieeexplore.ieee.org/document/9408192&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VLSI&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Hammer&lt;/strong&gt;: E. Wang, et al., &lt;em&gt;ISQED&#39;20&lt;/em&gt;. &lt;a href=&#34;https://www.isqed.org/English/Archives/2020/Technical_Sessions/113.html&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Hammer&lt;/strong&gt;: H. Liew, et al., &lt;em&gt;DAC&#39;22&lt;/em&gt;. &lt;a href=&#34;https://dl.acm.org/doi/abs/10.1145/3489517.3530672&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This work is supported by the NSF CCRI ENS Chipyard Award #2016662.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HyperDbg/hwdbg</title>
    <updated>2024-04-22T01:46:46Z</updated>
    <id>tag:github.com,2024-04-22:/HyperDbg/hwdbg</id>
    <link href="https://github.com/HyperDbg/hwdbg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HyperDbg&#39;s chip-level hardware debugger&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;hwdbg&#34; title=&#34;hwdbg&#34; src=&#34;https://github.com/HyperDbg/graphics/raw/master/Logos/hwdbg/hwdbg-high-resolution-logo-transparent.png?raw=true&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://hwdbg.hyperdbg.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Badges/Link-Website-orange.svg?sanitize=true&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hwdbg.hyperdbg.org/docs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Badges/Link-Docs-yellow.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hwdbg.hyperdbg.org/api&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Badges/Link-API-green.svg?sanitize=true&#34; alt=&#34;API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://research.hyperdbg.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Badges/Link-Research-pink.svg?sanitize=true&#34; alt=&#34;Published Researches&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HyperDbg/graphics/master/Badges/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;hwdbg&lt;/strong&gt; is a chip-level debugger designed for black-box chip fuzzing, testing, and reverse engineering. The primary goal of &lt;strong&gt;hwdbg&lt;/strong&gt; is to provide control over hardware, enabling monitoring and modification of signals down to the granular level of a single clock cycle. It is written in Chisel and Verilog.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚠️ This project is a work in progress and is not yet ready for testing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;hwdbg&lt;/strong&gt; is a highly customizable debugger designed to ease hardware debugging by bringing software debugging concepts into the hardware debugging domain. &lt;strong&gt;hwdbg&lt;/strong&gt; aims to help with the complexities associated with debugging hardware, including chips and IP cores. Key features of &lt;strong&gt;hwdbg&lt;/strong&gt; include the ability to step through the hardware design at the clock-cycle level, visualize waveforms, inspect values (e.g., like a logical analyzer), and modify signals. Moreover, it is synthesizable into &lt;a href=&#34;https://github.com/HyperDbg/hwdbg-fpga&#34;&gt;FPGAs&lt;/a&gt; and has the potential for fabrication into physical chips.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment Board&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HyperDbg/hwdbg-fpga&#34;&gt;This repository&lt;/a&gt; contains pre-built TCL files to facilitate project creation for running &lt;strong&gt;hwdbg&lt;/strong&gt; on various FPGA development boards.&lt;/p&gt; &#xA;&lt;h2&gt;Output&lt;/h2&gt; &#xA;&lt;p&gt;For generating SystemVerilog files, you need to install &lt;a href=&#34;https://www.chisel-lang.org/docs/installation&#34;&gt;Chisel&lt;/a&gt;. Once installed, use the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sbt run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command prompts you to select a component. The &lt;code&gt;hwdbg.Main&lt;/code&gt; class contains the debugger for synthesis purposes, while the &lt;code&gt;hwdbg.MainWithInitializedBRAM&lt;/code&gt; class includes a pre-initialized Block RAM (BRAM), primarily for simulation and testing.&lt;/p&gt; &#xA;&lt;p&gt;After selecting the appropriate class for synthesis (option &lt;code&gt;1&lt;/code&gt;) or simulation (option &lt;code&gt;2&lt;/code&gt;), the output should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sbt run&#xA;[info] welcome to sbt 1.9.7 (Eclipse Adoptium Java 17.0.10)&#xA;[info] loading settings for project -build-build-build from metals.sbt ...&#xA;[info] loading project definition from /home/sina/HyperDbg//project/project/project&#xA;[info] loading settings for project -build-build from metals.sbt ...&#xA;[info] loading project definition from /home/sina/HyperDbg//project/project&#xA;[success] Generated .bloop/-build-build.json&#xA;[success] Total time: 1 s, completed Apr 16, 2024, 1:49:05 PM&#xA;[info] loading settings for project -build from metals.sbt,plugins.sbt ...&#xA;[info] loading project definition from /home/sina/HyperDbg//project&#xA;[success] Total time: 0 s, completed Apr 16, 2024, 1:49:05 PM&#xA;[info] loading settings for project root from build.sbt ...&#xA;[info] set current project to hwdbg (in build file:/home/sina/HyperDbg/hwdbg/)&#xA;&#xA;Multiple main classes detected. Select one to run:&#xA; [1] hwdbg.Main&#xA; [2] hwdbg.MainWithInitializedBRAM&#xA;&#xA;Enter number: 2&#xA;[info] running hwdbg.MainWithInitializedBRAM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated code for the debugger can be found in the &lt;code&gt;generated&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Testbenches&lt;/h2&gt; &#xA;&lt;p&gt;To test &lt;strong&gt;hwdbg&lt;/strong&gt;, &lt;a href=&#34;https://www.cocotb.org/&#34;&gt;cocotb&lt;/a&gt; should be installed. After that, first, run the debugger (generated SystemVerilog files) and then run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd sim/hwdbg/DebuggerModuleTestingBRAM&#xA;./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command generates a waves file at &lt;code&gt;./sim/hwdbg/DebuggerModuleTestingBRAM/sim_build/DebuggerModuleTestingBRAM.fst&lt;/code&gt; which can be read using &lt;a href=&#34;https://gtkwave.sourceforge.net/&#34;&gt;GTKWave&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd sim/hwdbg/DebuggerModuleTestingBRAM&#xA;gtkwave ./sim_build/DebuggerModuleTestingBRAM.fst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ModelSim&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to use ModelSim instead of GTKWave, you can configure the &lt;code&gt;modelsim.config&lt;/code&gt; file. Please visit &lt;a href=&#34;https://github.com/HyperDbg/hwdbg/raw/main/sim/modelsim/README.md&#34;&gt;here&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;If you want to create the latest version of API documentation, you can run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sbt doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate documentation at &lt;code&gt;./target/scala-{version}/api/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;hwdbg&lt;/strong&gt; and all its submodules and repos, unless a license is otherwise specified, are licensed under &lt;strong&gt;GPLv3&lt;/strong&gt; LICENSE.&lt;/p&gt;</summary>
  </entry>
</feed>