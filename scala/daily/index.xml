<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-15T01:39:43Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>databrickslabs/remorph</title>
    <updated>2024-09-15T01:39:43Z</updated>
    <id>tag:github.com,2024-09-15:/databrickslabs/remorph</id>
    <link href="https://github.com/databrickslabs/remorph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-compiler and Data Reconciler into Databricks Lakehouse&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Databricks Labs Remorph&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/docs/img/remorph-logo.svg?sanitize=true&#34; alt=&#34;Databricks Labs Remorph&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;%5Bhttps://codecov.io/github/databrickslabs/remorph%5D(https://github.com/databrickslabs/remorph)&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/github/databrickslabs/remorph&#34; alt=&#34;lines of code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#introduction&#34;&gt;Introduction&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#remorph&#34;&gt;Remorph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#transpile&#34;&gt;Transpile&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#reconcile&#34;&gt;Reconcile&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#environment-setup&#34;&gt;Environment Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#how-to-use-transpile&#34;&gt;How to use Transpile&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#verify-installation&#34;&gt;Verify Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#execution-pre-set-up&#34;&gt;Execution Pre-Set Up&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#execution&#34;&gt;Execution&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#how-to-use-reconcile&#34;&gt;How to use Reconcile&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#installation-1&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#verify-installation-1&#34;&gt;Verify Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#execution-pre-set-up-1&#34;&gt;Execution Pre-Set Up&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#execution-1&#34;&gt;Execution&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#benchmarks&#34;&gt;Benchmarks&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#Transpile-benchmarks&#34;&gt;Transpile&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#Reconcile-benchmarks&#34;&gt;Reconcile&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#frequently-asked-questions&#34;&gt;Frequently Asked Questions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#Transpile-faq&#34;&gt;Transpile&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#Reconcile-faq&#34;&gt;Reconcile&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#common-error-codes&#34;&gt;Common Error Codes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#project-support&#34;&gt;Project Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;h2&gt;Remorph&lt;/h2&gt; &#xA;&lt;p&gt;Remorph stands as a comprehensive toolkit meticulously crafted to facilitate seamless migrations to Databricks. This suite of tools is dedicated to simplifying and optimizing the entire migration process, offering two distinctive functionalities â€“ Transpile and Reconcile. Whether you are navigating code translation or resolving potential conflicts, Remorph ensures a smooth journey for any migration project. With Remorph as your trusted ally, the migration experience becomes not only efficient but also well-managed, setting the stage for a successful transition to the Databricks platform.&lt;/p&gt; &#xA;&lt;h2&gt;Transpile&lt;/h2&gt; &#xA;&lt;p&gt;Transpile is a self-contained SQL parser, transpiler, and validator designed to interpret a diverse range of SQL inputs and generate syntactically and semantically correct SQL in the Databricks SQL dialect. This tool serves as an automated solution, named Transpile, specifically crafted for migrating and translating SQL scripts from various sources to the Databricks SQL format. Currently, it exclusively supports Snowflake as a source platform, leveraging the open-source SQLglot.&lt;/p&gt; &#xA;&lt;p&gt;Transpile stands out as a comprehensive and versatile SQL transpiler, boasting a robust test suite to ensure reliability. Developed entirely in Python, it not only demonstrates high performance but also highlights syntax errors and provides warnings or raises alerts for dialect incompatibilities based on configurations.&lt;/p&gt; &#xA;&lt;h3&gt;Transpiler Design Flow:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart TD&#xA;    A(Transpile CLI) --&amp;gt; |Directory| B[Transpile All Files In Directory];&#xA;    A --&amp;gt; |File| C[Transpile Single File] ;&#xA;    B --&amp;gt; D[List Files];&#xA;    C --&amp;gt; E(&#34;Sqlglot(transpile)&#34;);&#xA;    D --&amp;gt; E&#xA;    E --&amp;gt; |Parse Error| F(Failed Queries)&#xA;    E --&amp;gt; G{Skip Validations}&#xA;    G --&amp;gt; |Yes| H(Save Output)&#xA;    G --&amp;gt; |No| I{Validate}&#xA;    I --&amp;gt; |Success| H&#xA;    I --&amp;gt; |Fail| J(Flag, Capture)&#xA;    J --&amp;gt; H&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reconcile&lt;/h2&gt; &#xA;&lt;p&gt;Reconcile is an automated tool designed to streamline the reconciliation process between source data and target data residing on Databricks. Currently, the platform exclusively offers support for Snowflake, Oracle and other Databricks tables as the primary data source. This tool empowers users to efficiently identify discrepancies and variations in data when comparing the source with the Databricks target.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Environment Setup&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Databricks CLI&lt;/code&gt; - Ensure that you have the Databricks Command-Line Interface (CLI) installed on your machine. Refer to the installation instructions provided for Linux, MacOS, and Windows, available &lt;a href=&#34;https://docs.databricks.com/en/dev-tools/cli/install.html#install-or-update-the-databricks-cli&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Databricks Connect&lt;/code&gt; - Set up the Databricks workspace configuration file by following the instructions provided &lt;a href=&#34;https://docs.databricks.com/en/dev-tools/auth/index.html#databricks-configuration-profiles&#34;&gt;here&lt;/a&gt;. Note that Databricks labs use &#39;DEFAULT&#39; as the default profile for establishing connections to Databricks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Python&lt;/code&gt; - Verify that your machine has Python version 3.10 or later installed to meet the required dependencies for seamless operation.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Windows&lt;/code&gt; - Install python from &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;here&lt;/a&gt;. Your Windows computer will need a shell environment (&lt;a href=&#34;https://www.git-scm.com/downloads&#34;&gt;GitBash&lt;/a&gt; or &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/about&#34;&gt;WSL&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MacOS/Unix&lt;/code&gt; - Use &lt;a href=&#34;https://formulae.brew.sh/formula/python@3.10&#34;&gt;brew&lt;/a&gt; to install python in macOS/Unix machines&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Installing Databricks CLI on macOS&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/docs/img/macos-databricks-cli-install.gif&#34; alt=&#34;macos-databricks-cli-install&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Install Databricks CLI via curl on Windows&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/docs/img/windows-databricks-cli-install.gif&#34; alt=&#34;windows-databricks-cli-install&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Check Python version on Windows, macOS, and Unix&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/docs/img/check-python-version.gif&#34; alt=&#34;check-python-version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#table-of-contents&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;How to Use Transpile&lt;/h1&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Upon completing the environment setup, install Remorph by executing the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;databricks labs install remorph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/docs/img/transpile-install.gif&#34; alt=&#34;transpile install&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#table-of-contents&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Verify Installation&lt;/h3&gt; &#xA;&lt;p&gt;Verify the successful installation by executing the provided command; confirmation of a successful installation is indicated when the displayed output aligns with the example screenshot provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; databricks labs remorph transpile --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/docs/img/transpile-help.png&#34; alt=&#34;transpile-help&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Execution Pre-Set Up&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Transpile necessitates input in the form of either a directory containing SQL files or a single SQL file.&lt;/li&gt; &#xA; &lt;li&gt;The SQL file should encompass scripts intended for migration to Databricks SQL.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Below is the detailed explanation on the arguments required for Transpile.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;input-sql [Required]&lt;/code&gt; - The path to the SQL file or directory containing SQL files to be transpiled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source [Required]&lt;/code&gt; - The source platform of the SQL scripts. Currently, only Snowflake is supported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;output-folder [Optional]&lt;/code&gt; - The path to the output folder where the transpiled SQL files will be stored. If not specified, the transpiled SQL files will be stored in the same directory as the input SQL file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;skip-validation [Optional]&lt;/code&gt; - The default value is True. If set to False, the transpiler will validate the transpiled SQL scripts against the Databricks catalog and schema provided by user.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;catalog-name [Optional]&lt;/code&gt; - The name of the catalog in Databricks. If not specified, the default catalog &lt;code&gt;transpiler_test&lt;/code&gt; will be used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;schema-name [Optional]&lt;/code&gt; - The name of the schema in Databricks. If not specified, the default schema &lt;code&gt;convertor_test&lt;/code&gt; will be used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Execution&lt;/h3&gt; &#xA;&lt;p&gt;Execute the below command to intialize the transpile process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; databricks labs remorph transpile --input-sql &amp;lt;absolute-path&amp;gt; --source &amp;lt;snowflake&amp;gt; --output-folder &amp;lt;absolute-path&amp;gt; --skip-validation &amp;lt;True|False&amp;gt; --catalog-name &amp;lt;catalog name&amp;gt; --schema-name &amp;lt;schema name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/docs/img/transpile-run.gif&#34; alt=&#34;transpile run&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#table-of-contents&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;How to Use Reconcile&lt;/h1&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install Reconciliation with databricks labs cli.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-commandline&#34;&gt;databricks labs install remorph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/docs/img/recon-install.gif&#34; alt=&#34;reconcile install&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Verify Installation&lt;/h3&gt; &#xA;&lt;p&gt;Verify the successful installation by executing the provided command; confirmation of a successful installation is indicated when the displayed output aligns with the example screenshot provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; databricks labs remorph reconcile --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/docs/img/reconcile-help.png&#34; alt=&#34;reconcile-help&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Execution Pre-Set Up&lt;/h3&gt; &#xA;&lt;p&gt;Once the installation is done, a folder named &lt;strong&gt;.remorph&lt;/strong&gt; will be created in the user workspace&#39;s home folder. To process the reconciliation for specific table sources, we must create a config file that gives the detailed required configurations for the table-specific ones. The file name should be in the format as below and created inside the &lt;strong&gt;.remorph&lt;/strong&gt; folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;recon_config_&amp;lt;SOURCE&amp;gt;_&amp;lt;CATALOG_OR_SCHEMA&amp;gt;_&amp;lt;REPORT_TYPE&amp;gt;.json&#xA;&#xA;Note: For CATALOG_OR_SCHEMA , if CATALOG exists then CATALOG else SCHEMA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;eg:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;source_type&lt;/th&gt; &#xA;   &lt;th&gt;catalog_or_schema&lt;/th&gt; &#xA;   &lt;th&gt;report_type&lt;/th&gt; &#xA;   &lt;th&gt;file_name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;databricks&lt;/td&gt; &#xA;   &lt;td&gt;tpch&lt;/td&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;recon_config_databricks_tpch_all.json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;source1&lt;/td&gt; &#xA;   &lt;td&gt;tpch&lt;/td&gt; &#xA;   &lt;td&gt;row&lt;/td&gt; &#xA;   &lt;td&gt;recon_config_source1_tpch_row.json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;source2&lt;/td&gt; &#xA;   &lt;td&gt;tpch&lt;/td&gt; &#xA;   &lt;td&gt;schema&lt;/td&gt; &#xA;   &lt;td&gt;recon_config_source2_tpch_schema.json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/docs/recon_configurations/README.md&#34;&gt;Reconcile Configuration Guide&lt;/a&gt; for detailed instructions and &lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/docs/recon_configurations/reconcile_config_samples.md&#34;&gt;example configurations&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h3&gt;Execution&lt;/h3&gt; &#xA;&lt;p&gt;Execute the below command to initialize the reconcile process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; databricks labs remorph reconcile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/docs/img/recon-run.gif&#34; alt=&#34;reconcile-run&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#table-of-contents&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Benchmarks&lt;/h1&gt; &#xA;&lt;h2&gt;Transpile-benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;TBD&lt;/p&gt; &#xA;&lt;h2&gt;Reconcile-benchmarks&lt;/h2&gt; &#xA;&lt;h3&gt;tpch &lt;code&gt;1000GB&lt;/code&gt; data details&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Table name&lt;/th&gt; &#xA;   &lt;th&gt;No of rows&lt;/th&gt; &#xA;   &lt;th&gt;Data Size&lt;/th&gt; &#xA;   &lt;th&gt;Set &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;supplier&lt;/td&gt; &#xA;   &lt;td&gt;10M&lt;/td&gt; &#xA;   &lt;td&gt;754.7 MiB&lt;/td&gt; &#xA;   &lt;td&gt;Set 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;customer&lt;/td&gt; &#xA;   &lt;td&gt;150M&lt;/td&gt; &#xA;   &lt;td&gt;11.5 GiB&lt;/td&gt; &#xA;   &lt;td&gt;Set 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;part&lt;/td&gt; &#xA;   &lt;td&gt;200M&lt;/td&gt; &#xA;   &lt;td&gt;5.8 GiB&lt;/td&gt; &#xA;   &lt;td&gt;Set 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;partsupp&lt;/td&gt; &#xA;   &lt;td&gt;800M&lt;/td&gt; &#xA;   &lt;td&gt;39.9 GiB&lt;/td&gt; &#xA;   &lt;td&gt;Set 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;orders&lt;/td&gt; &#xA;   &lt;td&gt;1.5B&lt;/td&gt; &#xA;   &lt;td&gt;62.4 GiB&lt;/td&gt; &#xA;   &lt;td&gt;Set 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lineitem&lt;/td&gt; &#xA;   &lt;td&gt;6B&lt;/td&gt; &#xA;   &lt;td&gt;217.6 GiB&lt;/td&gt; &#xA;   &lt;td&gt;Set 2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Databricks to Databricks Recon&lt;/h3&gt; &#xA;&lt;p&gt;The following benchmarks were conducted on various Databricks clusters. Please note that the reconciliation times listed below do not include cluster startup time.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Cluster1 -- 14.3 LTS (includes Apache Spark 3.5.0, Scala 2.12) &lt;code&gt;Photon Enabled&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VM&lt;/td&gt; &#xA;   &lt;td&gt;Quantity&lt;/td&gt; &#xA;   &lt;td&gt;Total Cores&lt;/td&gt; &#xA;   &lt;td&gt;Total RAM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Driver:&lt;/td&gt; &#xA;   &lt;td&gt;**i3.xlarge**&lt;/td&gt; &#xA;   &lt;td&gt;**1**&lt;/td&gt; &#xA;   &lt;td&gt;**4 cores**&lt;/td&gt; &#xA;   &lt;td&gt;**30.5 GB**&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Workers:&lt;/td&gt; &#xA;   &lt;td&gt;**i3.xlarge**&lt;/td&gt; &#xA;   &lt;td&gt;**10**&lt;/td&gt; &#xA;   &lt;td&gt;**40 cores**&lt;/td&gt; &#xA;   &lt;td&gt;**305 GB**&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Cluster2 -- 14.3 LTS (includes Apache Spark 3.5.0, Scala 2.12) &lt;code&gt;Photon Enabled&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VM&lt;/td&gt; &#xA;   &lt;td&gt;Quantity&lt;/td&gt; &#xA;   &lt;td&gt;Total Cores&lt;/td&gt; &#xA;   &lt;td&gt;Total RAM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Driver:&lt;/td&gt; &#xA;   &lt;td&gt;**i3.2xlarge**&lt;/td&gt; &#xA;   &lt;td&gt;**1**&lt;/td&gt; &#xA;   &lt;td&gt;**8 cores**&lt;/td&gt; &#xA;   &lt;td&gt;**61 GB**&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Workers:&lt;/td&gt; &#xA;   &lt;td&gt;**i3.2xlarge**&lt;/td&gt; &#xA;   &lt;td&gt;**10**&lt;/td&gt; &#xA;   &lt;td&gt;**80 cores**&lt;/td&gt; &#xA;   &lt;td&gt;**610 GB**&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Benchmark&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Data&lt;/th&gt; &#xA;   &lt;th&gt;Cluster1&lt;/th&gt; &#xA;   &lt;th&gt;Cluster2&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;With Threshold&lt;/td&gt; &#xA;   &lt;td&gt;tpch (set 1 and set 2)&lt;/td&gt; &#xA;   &lt;td&gt;1.46 hours&lt;/td&gt; &#xA;   &lt;td&gt;50.12 minutes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Without Threshold&lt;/td&gt; &#xA;   &lt;td&gt;tpch (set 1 and set 2)&lt;/td&gt; &#xA;   &lt;td&gt;1.34 hours&lt;/td&gt; &#xA;   &lt;td&gt;45.58 minutes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Snowflake to Databricks Recon&lt;/h3&gt; &#xA;&lt;p&gt;The following benchmarks were conducted on various Databricks clusters. Please note that the reconciliation times listed below do not include cluster startup time.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Snowflake cluster details&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;b&gt;Type&lt;/b&gt;: Standard&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt;Size&lt;/b&gt;: Large Cluster (8 nodes, 64 cores)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Cluster1 -- 13.3 LTS (includes Apache Spark 3.4.1, Scala 2.12)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VM&lt;/td&gt; &#xA;   &lt;td&gt;Quantity&lt;/td&gt; &#xA;   &lt;td&gt;Total Cores&lt;/td&gt; &#xA;   &lt;td&gt;Total RAM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Driver:&lt;/td&gt; &#xA;   &lt;td&gt;**i3.xlarge**&lt;/td&gt; &#xA;   &lt;td&gt;**1**&lt;/td&gt; &#xA;   &lt;td&gt;**4 cores**&lt;/td&gt; &#xA;   &lt;td&gt;**30.5 GB**&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Workers:&lt;/td&gt; &#xA;   &lt;td&gt;**i3.xlarge**&lt;/td&gt; &#xA;   &lt;td&gt;**16**&lt;/td&gt; &#xA;   &lt;td&gt;**64 cores**&lt;/td&gt; &#xA;   &lt;td&gt;**488 GB**&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Benchmark&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Configuration&lt;/th&gt; &#xA;   &lt;th&gt;Set&lt;/th&gt; &#xA;   &lt;th&gt;Time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spark (deafult)&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;tpch - Set 1&lt;/td&gt; &#xA;   &lt;td&gt;32.01 minutes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spark (deafult)&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;tpch - Set 2&lt;/td&gt; &#xA;   &lt;td&gt;1.01 hours&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JDBC&lt;/td&gt; &#xA;   &lt;td&gt;number_partitions - 10&lt;/td&gt; &#xA;   &lt;td&gt;tpch - Set 1&lt;/td&gt; &#xA;   &lt;td&gt;43.39 minutes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JDBC&lt;/td&gt; &#xA;   &lt;td&gt;number_partitions - 10&lt;/td&gt; &#xA;   &lt;td&gt;tpch - Set 2&lt;/td&gt; &#xA;   &lt;td&gt;1.17 hours&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JDBC&lt;/td&gt; &#xA;   &lt;td&gt;number_partitions - 64&lt;/td&gt; &#xA;   &lt;td&gt;tpch - Set 1&lt;/td&gt; &#xA;   &lt;td&gt;25.95 minutes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JDBC&lt;/td&gt; &#xA;   &lt;td&gt;number_partitions - 64&lt;/td&gt; &#xA;   &lt;td&gt;tpch - Set 2&lt;/td&gt; &#xA;   &lt;td&gt;40.30 minutes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JDBC&lt;/td&gt; &#xA;   &lt;td&gt;number_partitions - 100&lt;/td&gt; &#xA;   &lt;td&gt;tpch - Set 2&lt;/td&gt; &#xA;   &lt;td&gt;1.02 hours&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#table-of-contents&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Frequently Asked Questions&lt;/h1&gt; &#xA;&lt;h2&gt;Transpile-faq&lt;/h2&gt; &#xA;&lt;p&gt;TBD&lt;/p&gt; &#xA;&lt;h2&gt;Reconcile-faq&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Can we reconcile for Databricks without UC as a target?&lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;The reconciliation target is always Databricks with UC enabled. Reconciler supports non-uc Databricks only as a source.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;What would happen if my dataset had duplicate records?&lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Duplicates are not handled in the reconciler. If run with duplicates, it would result in inconsistent output. We can implement some workarounds to handle the duplicates, and the solution varies from dataset to dataset.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Are User Transformations applicable for Schema Validations?&lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;No. User Transformations are not applied for Schema Validation.Only select_columns,drop_columns and column_mapping is valid for schema validation.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Can we apply Aggregate or multi-column transformations as user transformations?&lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;No. Aggregate transformations or multi-column transformations are not supported.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Does Reconciler support all complex data types?&lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Not all complex data types are supported currently.Reconciler do support UDFs for complex datatypes.Please refer here for examples.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Does Reconciler support `Column Threshold Validation` for report type as `row`?&lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;No. Column Threshold Validation is supported only for reports with the report type &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt;, generally tables with primary keys.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/databrickslabs/remorph/main/#table-of-contents&#34;&gt;back to top&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Common Error Codes:&lt;/h2&gt; &#xA;&lt;p&gt;TBD&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Project Support&lt;/h1&gt; &#xA;&lt;p&gt;Please note that all projects in the /databrickslabs github account are provided for your exploration only, and are not formally supported by Databricks with Service Level Agreements (SLAs). They are provided AS-IS and we do not make any guarantees of any kind. Please do not submit a support ticket relating to any issues arising from the use of these projects.&lt;/p&gt; &#xA;&lt;p&gt;Any issues discovered through the use of this project should be filed as GitHub Issues on the Repo. They will be reviewed as time permits, but there are no formal SLAs for support.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>com-lihaoyi/os-lib</title>
    <updated>2024-09-15T01:39:43Z</updated>
    <id>tag:github.com,2024-09-15:/com-lihaoyi/os-lib</id>
    <link href="https://github.com/com-lihaoyi/os-lib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OS-Lib is a simple, flexible, high-performance Scala interface to common OS filesystem and subprocess APIs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OS-Lib&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://github.com/com-lihaoyi/os-lib/actions&#34;&gt;&lt;img src=&#34;https://github.com/com-lihaoyi/os-lib/actions/workflows/run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://gitter.im/lihaoyi/os-lib&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter Chat&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://www.patreon.com/lihaoyi&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-sponsor-ff69b4.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://javadoc.io/doc/com.lihaoyi/os-lib_3&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/com.lihaoyi/os-lib_3/scaladoc.svg?sanitize=true&#34; alt=&#34;API Docs (Scala 3)&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// Make sure working directory exists and is empty&#xA;val wd = os.pwd/&#34;out/splash&#34;&#xA;os.remove.all(wd)&#xA;os.makeDir.all(wd)&#xA;&#xA;// Read/write files&#xA;os.write(wd/&#34;file.txt&#34;, &#34;hello&#34;)&#xA;os.read(wd/&#34;file.txt&#34;) ==&amp;gt; &#34;hello&#34;&#xA;&#xA;// Perform filesystem operations&#xA;os.copy(wd/&#34;file.txt&#34;, wd/&#34;copied.txt&#34;)&#xA;os.list(wd) ==&amp;gt; Seq(wd/&#34;copied.txt&#34;, wd/&#34;file.txt&#34;)&#xA;&#xA;// Invoke subprocesses&#xA;val invoked = os.proc(&#34;cat&#34;, wd/&#34;file.txt&#34;, wd/&#34;copied.txt&#34;).call(cwd = wd)&#xA;invoked.out.trim ==&amp;gt; &#34;hellohello&#34;&#xA;&#xA;// Chain multiple subprocess&#39; stdin/stdout together&#xA;val curl = os.proc(&#34;curl&#34;, &#34;-L&#34; , &#34;https://git.io/fpvpS&#34;).spawn(stderr = os.Inherit)&#xA;val gzip = os.proc(&#34;gzip&#34;, &#34;-n&#34;).spawn(stdin = curl.stdout)&#xA;val sha = os.proc(&#34;shasum&#34;, &#34;-a&#34;, &#34;256&#34;).spawn(stdin = gzip.stdout)&#xA;sha.stdout.trim ==&amp;gt; &#34;acc142175fa520a1cb2be5b97cbbe9bea092e8bba3fe2e95afa645615908229e  -&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;OS-Lib is a simple Scala interface to common OS filesystem and subprocess APIs. OS-Lib aims to make working with files and processes in Scala as simple as any scripting language, while still providing the safety, flexibility and performance you would expect from Scala.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;OS-Lib aims to be a complete replacement for the &lt;code&gt;java.nio.file.Files&lt;/code&gt;/&lt;code&gt;java.nio.file.Paths&lt;/code&gt;, &lt;code&gt;java.lang.ProcessBuilder&lt;/code&gt; &lt;code&gt;scala.io&lt;/code&gt; and &lt;code&gt;scala.sys&lt;/code&gt; APIs. You should not need to drop down to underlying Java APIs, as OS-Lib exposes all relevant capabilities in an intuitive and performant way. OS-Lib has no dependencies and is unopinionated: it exposes the underlying APIs in a concise but straightforward way, without introducing itâ€™s own idiosyncrasies, quirks, or clever DSLs.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;If you use OS-Lib and like it, you will probably enjoy the following book by the Author:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.handsonscala.com/&#34;&gt;&lt;em&gt;Hands-on Scala Programming&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;em&gt;Hands-on Scala&lt;/em&gt; has uses OS-Lib extensively throughout the book, and has the entirety of &lt;em&gt;Chapter 7: Files and Subprocesses&lt;/em&gt; dedicated to OS-Lib. &lt;em&gt;Hands-on Scala&lt;/em&gt; is a great way to level up your skills in Scala in general and OS-Lib in particular.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can also support it by donating to our Patreon:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.patreon.com/lihaoyi&#34; class=&#34;bare&#34;&gt;https://www.patreon.com/lihaoyi&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;For a hands-on introduction to the library, take a look at these two blog posts:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.lihaoyi.com/post/HowtoworkwithFilesinScala.html&#34;&gt;How to work with Files in Scala&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.lihaoyi.com/post/HowtoworkwithSubprocessesinScala.html&#34;&gt;How to work with Subprocesses in Scala&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA;  &lt;div id=&#34;toctitle&#34;&gt;&#xA;   Table of Contents&#xA;  &lt;/div&gt; &#xA;  &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#cookbook&#34;&gt;Cookbook&lt;/a&gt; &#xA;    &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#concatenate-text-files&#34;&gt;Concatenate text files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#spawning-a-subprocess-on-multiple-files&#34;&gt;Spawning a subprocess on multiple files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#curl-url-to-temporary-file&#34;&gt;Curl URL to temporary file&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#recursive-line-count&#34;&gt;Recursive line count&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#largest-three-files&#34;&gt;Largest Three Files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#moving-files-out-of-folder&#34;&gt;Moving files out of folder&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#calculate-word-frequencies&#34;&gt;Calculate word frequencies&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#operations&#34;&gt;Operations&lt;/a&gt; &#xA;    &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#reading-writing&#34;&gt;Reading &amp;amp; Writing&lt;/a&gt; &#xA;      &lt;ul class=&#34;sectlevel3&#34;&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-read&#34;&gt;&lt;code&gt;os.read&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-read-bytes&#34;&gt;&lt;code&gt;os.read.bytes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-read-chunks&#34;&gt;&lt;code&gt;os.read.chunks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-read-lines&#34;&gt;&lt;code&gt;os.read.lines&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-read-lines-stream&#34;&gt;&lt;code&gt;os.read.lines.stream&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-read-inputstream&#34;&gt;&lt;code&gt;os.read.inputStream&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-read-stream&#34;&gt;&lt;code&gt;os.read.stream&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-write&#34;&gt;&lt;code&gt;os.write&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-write-append&#34;&gt;&lt;code&gt;os.write.append&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-write-over&#34;&gt;&lt;code&gt;os.write.over&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-write-outputstream&#34;&gt;&lt;code&gt;os.write.outputStream&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-truncate&#34;&gt;&lt;code&gt;os.truncate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#listing-walking&#34;&gt;Listing &amp;amp; Walking&lt;/a&gt; &#xA;      &lt;ul class=&#34;sectlevel3&#34;&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-list&#34;&gt;&lt;code&gt;os.list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-list-stream&#34;&gt;&lt;code&gt;os.list.stream&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-walk&#34;&gt;&lt;code&gt;os.walk&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-walk-attrs&#34;&gt;&lt;code&gt;os.walk.attrs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-walk-stream&#34;&gt;&lt;code&gt;os.walk.stream&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-walk-stream-attrs&#34;&gt;&lt;code&gt;os.walk.stream.attrs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#manipulating-files-folders&#34;&gt;Manipulating Files &amp;amp; Folders&lt;/a&gt; &#xA;      &lt;ul class=&#34;sectlevel3&#34;&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-exists&#34;&gt;&lt;code&gt;os.exists&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-move&#34;&gt;&lt;code&gt;os.move&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-move-matching&#34;&gt;&lt;code&gt;os.move.matching&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-move-into&#34;&gt;&lt;code&gt;os.move.into&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-move-over&#34;&gt;&lt;code&gt;os.move.over&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-copy&#34;&gt;&lt;code&gt;os.copy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-copy-into&#34;&gt;&lt;code&gt;os.copy.into&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-copy-over&#34;&gt;&lt;code&gt;os.copy.over&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-copy-with-mergefolders&#34;&gt;&lt;code&gt;os.copy&lt;/code&gt; with &lt;code&gt;mergeFolders&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-makedir&#34;&gt;&lt;code&gt;os.makeDir&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-makedir-all&#34;&gt;&lt;code&gt;os.makeDir.all&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-remove&#34;&gt;&lt;code&gt;os.remove&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-remove-all&#34;&gt;&lt;code&gt;os.remove.all&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-hardlink&#34;&gt;&lt;code&gt;os.hardlink&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-symlink&#34;&gt;&lt;code&gt;os.symlink&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-readlink&#34;&gt;&lt;code&gt;os.readLink&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-followlink&#34;&gt;&lt;code&gt;os.followLink&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-temp&#34;&gt;&lt;code&gt;os.temp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-temp-dir&#34;&gt;&lt;code&gt;os.temp.dir&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#filesystem-metadata&#34;&gt;Filesystem Metadata&lt;/a&gt; &#xA;      &lt;ul class=&#34;sectlevel3&#34;&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-stat&#34;&gt;&lt;code&gt;os.stat&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-stat-posix&#34;&gt;&lt;code&gt;os.stat.posix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-isfile&#34;&gt;&lt;code&gt;os.isFile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-isdir&#34;&gt;&lt;code&gt;os.isDir&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-islink&#34;&gt;&lt;code&gt;os.isLink&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-size&#34;&gt;&lt;code&gt;os.size&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-mtime&#34;&gt;&lt;code&gt;os.mtime&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#filesystem-permissions&#34;&gt;Filesystem Permissions&lt;/a&gt; &#xA;      &lt;ul class=&#34;sectlevel3&#34;&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-perms&#34;&gt;&lt;code&gt;os.perms&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-owner&#34;&gt;&lt;code&gt;os.owner&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-group&#34;&gt;&lt;code&gt;os.group&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#spawning-subprocesses&#34;&gt;Spawning Subprocesses&lt;/a&gt; &#xA;      &lt;ul class=&#34;sectlevel3&#34;&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-call&#34;&gt;&lt;code&gt;os.call&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-spawn&#34;&gt;&lt;code&gt;os.spawn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#customizing-the-default-environment&#34;&gt;Customizing the default environment&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#spawning-pipelines-of-subprocesses&#34;&gt;Spawning Pipelines of Subprocesses&lt;/a&gt; &#xA;    &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#watching-for-changes&#34;&gt;Watching for Changes&lt;/a&gt; &#xA;      &lt;ul class=&#34;sectlevel3&#34;&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-watch-watch&#34;&gt;&lt;code&gt;os.watch.watch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#data-types&#34;&gt;Data Types&lt;/a&gt; &#xA;    &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-path&#34;&gt;&lt;code&gt;os.Path&lt;/code&gt;&lt;/a&gt; &#xA;      &lt;ul class=&#34;sectlevel3&#34;&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-relpath&#34;&gt;&lt;code&gt;os.RelPath&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-subpath&#34;&gt;&lt;code&gt;os.SubPath&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#path-operations&#34;&gt;Path Operations&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#constructing-paths&#34;&gt;Constructing Paths&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#roots-and-filesystems&#34;&gt;Roots and filesystems&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-resourcepath&#34;&gt;&lt;code&gt;os.ResourcePath&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-source&#34;&gt;&lt;code&gt;os.Source&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-generator&#34;&gt;&lt;code&gt;os.Generator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-permset&#34;&gt;&lt;code&gt;os.PermSet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#changelog&#34;&gt;Changelog&lt;/a&gt; &#xA;    &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#0-10-7&#34;&gt;0.10.7&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#0-10-6&#34;&gt;0.10.6&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#0-10-5&#34;&gt;0.10.5&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#0-10-4&#34;&gt;0.10.4&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#0-10-3&#34;&gt;0.10.3&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#0-10-2&#34;&gt;0.10.2&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#0-10-1&#34;&gt;0.10.1&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#0-10-0&#34;&gt;0.10.0&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#0-9-3&#34;&gt;0.9.3 - 2024-01-01&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#0-9-2&#34;&gt;0.9.2 - 2023-11-05&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#0-9-1&#34;&gt;0.9.1 - 2023-03-07&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#0-9-0&#34;&gt;0.9.0 - 2022-11-28&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#older-releases&#34;&gt;Older releases&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;To begin using OS-Lib, first add it as a dependency to your projectâ€™s build:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// Mill&#xA;ivy&#34;com.lihaoyi::os-lib:0.10.7&#34;&#xA;// SBT&#xA;&#34;com.lihaoyi&#34; %% &#34;os-lib&#34; % &#34;0.10.7&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://javadoc.io/doc/com.lihaoyi/os-lib_3&#34;&gt;API Documentation (Scala 3)&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;cookbook&#34;&gt;Cookbook&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Most operation in OS-Lib take place on &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-path&#34;&gt;&lt;code&gt;os.Path&lt;/code&gt;&lt;/a&gt;s, which are constructed from a base path or working directory &lt;code&gt;wd&lt;/code&gt;. Most often, the first thing to do is to define a &lt;code&gt;wd&lt;/code&gt; path representing the folder you want to work with:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val wd = os.pwd / &#34;my-test-folder&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can of course multiple base paths, to use in different parts of your program where convenient, or simply work with one of the pre-defined paths &lt;code&gt;os.pwd&lt;/code&gt;, &lt;code&gt;os.root&lt;/code&gt;, or &lt;code&gt;os.home&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;concatenate-text-files&#34;&gt;Concatenate text files&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// Find and concatenate all .txt files directly in the working directory&#xA;os.write(&#xA;  wd / &#34;all.txt&#34;,&#xA;  os.list(wd).filter(_.ext == &#34;txt&#34;).map(os.read)&#xA;)&#xA;&#xA;os.read(wd / &#34;all.txt&#34;) ==&amp;gt;&#xA;  &#34;&#34;&#34;I am cowI am cow&#xA;    |Hear me moo&#xA;    |I weigh twice as much as you&#xA;    |And I look good on the barbecue&#34;&#34;&#34;.stripMargin&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;spawning-a-subprocess-on-multiple-files&#34;&gt;Spawning a subprocess on multiple files&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// Find and concatenate all .txt files directly in the working directory using `cat`&#xA;os.proc(&#34;cat&#34;, os.list(wd).filter(_.ext == &#34;txt&#34;)).call(stdout = wd / &#34;all.txt&#34;)&#xA;&#xA;os.read(wd / &#34;all.txt&#34;) ==&amp;gt;&#xA;  &#34;&#34;&#34;I am cowI am cow&#xA;    |Hear me moo&#xA;    |I weigh twice as much as you&#xA;    |And I look good on the barbecue&#34;&#34;&#34;.stripMargin&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;curl-url-to-temporary-file&#34;&gt;Curl URL to temporary file&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// Curl to temporary file&#xA;val temp = os.temp()&#xA;os.proc(&#34;curl&#34;, &#34;-L&#34; , &#34;https://git.io/fpfTs&#34;).call(stdout = temp)&#xA;&#xA;os.size(temp) ==&amp;gt; 53814&#xA;&#xA;// Curl to temporary file&#xA;val temp2 = os.temp()&#xA;val proc = os.proc(&#34;curl&#34;, &#34;-L&#34; , &#34;https://git.io/fpfTJ&#34;).spawn()&#xA;&#xA;os.write.over(temp2, proc.stdout)&#xA;os.size(temp2) ==&amp;gt; 53814&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;recursive-line-count&#34;&gt;Recursive line count&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// Line-count of all .txt files recursively in wd&#xA;val lineCount = os.walk(wd)&#xA;  .filter(_.ext == &#34;txt&#34;)&#xA;  .map(os.read.lines)&#xA;  .map(_.size)&#xA;  .sum&#xA;&#xA;lineCount ==&amp;gt; 9&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;largest-three-files&#34;&gt;Largest Three Files&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// Find the largest three files in the given folder tree&#xA;val largestThree = os.walk(wd)&#xA;  .filter(os.isFile(_, followLinks = false))&#xA;  .map(x =&amp;gt; os.size(x) -&amp;gt; x).sortBy(-_._1)&#xA;  .take(3)&#xA;&#xA;largestThree ==&amp;gt; Seq(&#xA;  (711, wd / &#34;misc/binary.png&#34;),&#xA;  (81, wd / &#34;Multi Line.txt&#34;),&#xA;  (22, wd / &#34;folder1/one.txt&#34;)&#xA;)&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;moving-files-out-of-folder&#34;&gt;Moving files out of folder&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// Move all files inside the &#34;misc&#34; folder out of it&#xA;import os./&#xA;os.list(wd / &#34;misc&#34;).map(os.move.matching { case p/&#34;misc&#34;/x =&amp;gt; p/x } )&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;calculate-word-frequencies&#34;&gt;Calculate word frequencies&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// Calculate the word frequency of all the text files in the folder tree&#xA;def txt = os.walk(wd).filter(_.ext == &#34;txt&#34;).map(os.read)&#xA;def freq(s: Seq[String]) = s.groupBy(x =&amp;gt; x).mapValues(_.length).toSeq&#xA;val map = freq(txt.flatMap(_.split(&#34;[^a-zA-Z0-9_]&#34;))).sortBy(-_._2)&#xA;map&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;operations&#34;&gt;Operations&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;reading-writing&#34;&gt;Reading &amp;amp; Writing&lt;/h3&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-read&#34;&gt;&lt;code&gt;os.read&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read(arg: os.ReadablePath): String&#xA;os.read(arg: os.ReadablePath, charSet: Codec): String&#xA;os.read(arg: os.Path,&#xA;        offset: Long = 0,&#xA;        count: Int = Int.MaxValue,&#xA;        charSet: Codec = java.nio.charset.StandardCharsets.UTF_8): String&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Reads the contents of a &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-path&#34;&gt;&lt;code&gt;os.Path&lt;/code&gt;&lt;/a&gt; or other &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-source&#34;&gt;&lt;code&gt;os.Source&lt;/code&gt;&lt;/a&gt; as a &lt;code&gt;java.lang.String&lt;/code&gt;. Defaults to reading the entire file as UTF-8, but you can also select a different &lt;code&gt;charSet&lt;/code&gt; to use, and provide an &lt;code&gt;offset&lt;/code&gt;/&lt;code&gt;count&lt;/code&gt; to read from if the source supports seeking.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read(wd / &#34;File.txt&#34;) ==&amp;gt; &#34;I am cow&#34;&#xA;os.read(wd / &#34;folder1/one.txt&#34;) ==&amp;gt; &#34;Contents of folder one&#34;&#xA;os.read(wd / &#34;Multi Line.txt&#34;) ==&amp;gt;&#xA;  &#34;&#34;&#34;I am cow&#xA;    |Hear me moo&#xA;    |I weigh twice as much as you&#xA;    |And I look good on the barbecue&#34;&#34;&#34;.stripMargin&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-read-bytes&#34;&gt;&lt;code&gt;os.read.bytes&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read.bytes(arg: os.ReadablePath): Array[Byte]&#xA;os.read.bytes(arg: os.Path, offset: Long, count: Int): Array[Byte]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Reads the contents of a &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-path&#34;&gt;&lt;code&gt;os.Path&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-source&#34;&gt;&lt;code&gt;os.Source&lt;/code&gt;&lt;/a&gt; as an &lt;code&gt;Array[Byte]&lt;/code&gt;; you can provide an &lt;code&gt;offset&lt;/code&gt;/&lt;code&gt;count&lt;/code&gt; to read from if the source supports seeking.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read.bytes(wd / &#34;File.txt&#34;) ==&amp;gt; &#34;I am cow&#34;.getBytes&#xA;os.read.bytes(wd / &#34;misc/binary.png&#34;).length ==&amp;gt; 711&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-read-chunks&#34;&gt;&lt;code&gt;os.read.chunks&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read.chunks(p: ReadablePath, chunkSize: Int): os.Generator[(Array[Byte], Int)]&#xA;os.read.chunks(p: ReadablePath, buffer: Array[Byte]): os.Generator[(Array[Byte], Int)]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Reads the contents of the given path in chunks of the given size; returns a generator which provides a byte array and an offset into that array which contains the data for that chunk. All chunks will be of the given size, except for the last chunk which may be smaller.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Note that the array returned by the generator is shared between each callback; make sure you copy the bytes/array somewhere else if you want to keep them around.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Optionally takes in a provided input &lt;code&gt;buffer&lt;/code&gt; instead of a &lt;code&gt;chunkSize&lt;/code&gt;, allowing you to re-use the buffer between invocations.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val chunks = os.read.chunks(wd / &#34;File.txt&#34;, chunkSize = 2)&#xA;  .map{case (buf, n) =&amp;gt; buf.take(n).toSeq } // copy the buffer to save the data&#xA;  .toSeq&#xA;&#xA;chunks ==&amp;gt; Seq(&#xA;  Seq[Byte](&#39;I&#39;, &#39; &#39;),&#xA;  Seq[Byte](&#39;a&#39;, &#39;m&#39;),&#xA;  Seq[Byte](&#39; &#39;, &#39;c&#39;),&#xA;  Seq[Byte](&#39;o&#39;, &#39;w&#39;)&#xA;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-read-lines&#34;&gt;&lt;code&gt;os.read.lines&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read.lines(arg: os.ReadablePath): IndexedSeq[String]&#xA;os.read.lines(arg: os.ReadablePath, charSet: Codec): IndexedSeq[String]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Reads the given &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-path&#34;&gt;&lt;code&gt;os.Path&lt;/code&gt;&lt;/a&gt; or other &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-source&#34;&gt;&lt;code&gt;os.Source&lt;/code&gt;&lt;/a&gt; as a string and splits it into lines; defaults to reading as UTF-8, which you can override by specifying a &lt;code&gt;charSet&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read.lines(wd / &#34;File.txt&#34;) ==&amp;gt; Seq(&#34;I am cow&#34;)&#xA;os.read.lines(wd / &#34;Multi Line.txt&#34;) ==&amp;gt; Seq(&#xA;  &#34;I am cow&#34;,&#xA;  &#34;Hear me moo&#34;,&#xA;  &#34;I weigh twice as much as you&#34;,&#xA;  &#34;And I look good on the barbecue&#34;&#xA;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-read-lines-stream&#34;&gt;&lt;code&gt;os.read.lines.stream&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read.lines(arg: os.ReadablePath): os.Generator[String]&#xA;os.read.lines(arg: os.ReadablePath, charSet: Codec): os.Generator[String]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Identical to &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-read-lines&#34;&gt;&lt;code&gt;os.read.lines&lt;/code&gt;&lt;/a&gt;, but streams the results back to you in a &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-generator&#34;&gt;&lt;code&gt;os.Generator&lt;/code&gt;&lt;/a&gt; rather than accumulating them in memory. Useful if the file is large.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read.lines.stream(wd / &#34;File.txt&#34;).count() ==&amp;gt; 1&#xA;os.read.lines.stream(wd / &#34;Multi Line.txt&#34;).count() ==&amp;gt; 4&#xA;&#xA;// Streaming the lines to the console&#xA;for(line &amp;lt;- os.read.lines.stream(wd / &#34;Multi Line.txt&#34;)){&#xA;  println(line)&#xA;}&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-read-inputstream&#34;&gt;&lt;code&gt;os.read.inputStream&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read.inputStream(p: ReadablePath): java.io.InputStream&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Opens a &lt;code&gt;java.io.InputStream&lt;/code&gt; to read from the given file.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val is = os.read.inputStream(wd / &#34;File.txt&#34;) // ==&amp;gt; &#34;I am cow&#34;&#xA;is.read() ==&amp;gt; &#39;I&#39;&#xA;is.read() ==&amp;gt; &#39; &#39;&#xA;is.read() ==&amp;gt; &#39;a&#39;&#xA;is.read() ==&amp;gt; &#39;m&#39;&#xA;is.read() ==&amp;gt; &#39; &#39;&#xA;is.read() ==&amp;gt; &#39;c&#39;&#xA;is.read() ==&amp;gt; &#39;o&#39;&#xA;is.read() ==&amp;gt; &#39;w&#39;&#xA;is.read() ==&amp;gt; -1&#xA;is.close()&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-read-stream&#34;&gt;&lt;code&gt;os.read.stream&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read.stream(p: ReadablePath): geny.Readable&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Opens a &lt;a href=&#34;https://github.com/com-lihaoyi/geny#readable&#34;&gt;geny.Readable&lt;/a&gt; to read from the given file. This allows you to stream data to any other library that supports &lt;code&gt;Readable&lt;/code&gt; without buffering the data in memory, e.g. parsing it via FastParse, deserializing it via uPickle, uploading it via Requests-Scala, etc.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val readable: geny.Readable = os.read.stream(wd / &#34;File.json&#34;)&#xA;&#xA;requests.post(&#34;https://httpbin.org/post&#34;, data = readable)&#xA;&#xA;upickle.default.read(readable)&#xA;&#xA;ujson.read(readable)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-write&#34;&gt;&lt;code&gt;os.write&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.write(target: Path,&#xA;         data: os.Source,&#xA;         perms: PermSet = null,&#xA;         createFolders: Boolean = false): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Writes data from the given file or &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-source&#34;&gt;&lt;code&gt;os.Source&lt;/code&gt;&lt;/a&gt; to a file at the target &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-path&#34;&gt;&lt;code&gt;os.Path&lt;/code&gt;&lt;/a&gt;. You can specify the filesystem permissions of the newly created file by passing in a &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-permset&#34;&gt;&lt;code&gt;os.PermSet&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This throws an exception if the file already exists. To over-write or append to an existing file, see &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-write-over&#34;&gt;&lt;code&gt;os.write.over&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-write-append&#34;&gt;&lt;code&gt;os.write.append&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;By default, this doesnâ€™t create enclosing folders; you can enable this behavior by setting &lt;code&gt;createFolders = true&lt;/code&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.write(wd / &#34;New File.txt&#34;, &#34;New File Contents&#34;)&#xA;os.read(wd / &#34;New File.txt&#34;) ==&amp;gt; &#34;New File Contents&#34;&#xA;&#xA;os.write(wd / &#34;NewBinary.bin&#34;, Array[Byte](0, 1, 2, 3))&#xA;os.read.bytes(wd / &#34;NewBinary.bin&#34;) ==&amp;gt; Array[Byte](0, 1, 2, 3)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-write-append&#34;&gt;&lt;code&gt;os.write.append&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.write.append(target: Path,&#xA;                data: os.Source,&#xA;                perms: PermSet = null,&#xA;                createFolders: Boolean = false): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-write&#34;&gt;&lt;code&gt;os.write&lt;/code&gt;&lt;/a&gt;, except if the file already exists this appends the written data to the existing file contents.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read(wd / &#34;File.txt&#34;) ==&amp;gt; &#34;I am cow&#34;&#xA;&#xA;os.write.append(wd / &#34;File.txt&#34;, &#34;, hear me moo&#34;)&#xA;os.read(wd / &#34;File.txt&#34;) ==&amp;gt; &#34;I am cow, hear me moo&#34;&#xA;&#xA;os.write.append(wd / &#34;File.txt&#34;, &#34;,&#xA;I weigh twice as much as you&#34;)&#xA;os.read(wd / &#34;File.txt&#34;) ==&amp;gt;&#xA;  &#34;I am cow, hear me moo,&#xA;I weigh twice as much as you&#34;&#xA;&#xA;os.read.bytes(wd / &#34;misc/binary.png&#34;).length ==&amp;gt; 711&#xA;os.write.append(wd / &#34;misc/binary.png&#34;, Array[Byte](1, 2, 3))&#xA;os.read.bytes(wd / &#34;misc/binary.png&#34;).length ==&amp;gt; 714&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-write-over&#34;&gt;&lt;code&gt;os.write.over&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.write.over(target: Path,&#xA;              data: os.Source,&#xA;              perms: PermSet = null,&#xA;              offset: Long = 0,&#xA;              createFolders: Boolean = false,&#xA;              truncate: Boolean = true): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-write&#34;&gt;&lt;code&gt;os.write&lt;/code&gt;&lt;/a&gt;, except if the file already exists this over-writes the existing file contents. You can also pass in &lt;code&gt;truncate = false&lt;/code&gt; to avoid truncating the file if the new contents is shorter than the old contents, and an &lt;code&gt;offset&lt;/code&gt; to the file you want to write to.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read(wd / &#34;File.txt&#34;) ==&amp;gt; &#34;I am cow&#34;&#xA;os.write.over(wd / &#34;File.txt&#34;, &#34;You are cow&#34;)&#xA;&#xA;os.read(wd / &#34;File.txt&#34;) ==&amp;gt; &#34;You are cow&#34;&#xA;&#xA;os.write.over(wd / &#34;File.txt&#34;, &#34;We &#34;, truncate = false)&#xA;os.read(wd / &#34;File.txt&#34;) ==&amp;gt; &#34;We  are cow&#34;&#xA;&#xA;os.write.over(wd / &#34;File.txt&#34;, &#34;s&#34;, offset = 8, truncate = false)&#xA;os.read(wd / &#34;File.txt&#34;) ==&amp;gt; &#34;We  are sow&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-write-outputstream&#34;&gt;&lt;code&gt;os.write.outputStream&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.write.outputStream(target: Path,&#xA;                      perms: PermSet = null,&#xA;                      createFolders: Boolean = false,&#xA;                      openOptions: Seq[OpenOption] = Seq(CREATE, WRITE))&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Open a &lt;code&gt;java.io.OutputStream&lt;/code&gt; to write to the given file.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val out = os.write.outputStream(wd / &#34;New File.txt&#34;)&#xA;out.write(&#39;H&#39;)&#xA;out.write(&#39;e&#39;)&#xA;out.write(&#39;l&#39;)&#xA;out.write(&#39;l&#39;)&#xA;out.write(&#39;o&#39;)&#xA;out.close()&#xA;&#xA;os.read(wd / &#34;New File.txt&#34;) ==&amp;gt; &#34;Hello&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-truncate&#34;&gt;&lt;code&gt;os.truncate&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.truncate(p: Path, size: Long): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Truncate the given file to the given size. If the file is smaller than the given size, does nothing.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.read(wd / &#34;File.txt&#34;) ==&amp;gt; &#34;I am cow&#34;&#xA;&#xA;os.truncate(wd / &#34;File.txt&#34;, 4)&#xA;os.read(wd / &#34;File.txt&#34;) ==&amp;gt; &#34;I am&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;listing-walking&#34;&gt;Listing &amp;amp; Walking&lt;/h3&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-list&#34;&gt;&lt;code&gt;os.list&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.list(p: Path): IndexedSeq[Path]&#xA;os.list(p: Path, sort: Boolean = true): IndexedSeq[Path]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Returns all the files and folders directly within the given folder. If the given path is not a folder, raises an error. Can be called via &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-list-stream&#34;&gt;&lt;code&gt;os.list.stream&lt;/code&gt;&lt;/a&gt; to stream the results. To list files recursively, use &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-walk&#34;&gt;&lt;code&gt;os.walk&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;For convenience &lt;code&gt;os.list&lt;/code&gt; sorts the entries in the folder before returning them. You can disable sorted by passing in the flag &lt;code&gt;sort = false&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.list(wd / &#34;folder1&#34;) ==&amp;gt; Seq(wd / &#34;folder1/one.txt&#34;)&#xA;os.list(wd / &#34;folder2&#34;) ==&amp;gt; Seq(&#xA;  wd / &#34;folder2/nestedA&#34;,&#xA;  wd / &#34;folder2/nestedB&#34;&#xA;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-list-stream&#34;&gt;&lt;code&gt;os.list.stream&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.list.stream(p: Path): os.Generator[Path]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-list&#34;&gt;&lt;code&gt;os.list&lt;/code&gt;&lt;/a&gt;, except provides a &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-generator&#34;&gt;&lt;code&gt;os.Generator&lt;/code&gt;&lt;/a&gt; of results rather than accumulating all of them in memory. Useful if the result set is large.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.list.stream(wd / &#34;folder2&#34;).count() ==&amp;gt; 2&#xA;&#xA;// Streaming the listed files to the console&#xA;for(line &amp;lt;- os.list.stream(wd / &#34;folder2&#34;)){&#xA;  println(line)&#xA;}&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-walk&#34;&gt;&lt;code&gt;os.walk&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.walk(path: Path,&#xA;        skip: Path =&amp;gt; Boolean = _ =&amp;gt; false,&#xA;        preOrder: Boolean = true,&#xA;        followLinks: Boolean = false,&#xA;        maxDepth: Int = Int.MaxValue,&#xA;        includeTarget: Boolean = false): IndexedSeq[Path]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Recursively walks the given folder and returns the paths of every file or folder within.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;You can pass in a &lt;code&gt;skip&lt;/code&gt; callback to skip files or folders you are not interested in. This can avoid walking entire parts of the folder hierarchy, saving time as compared to filtering them after the fact.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;By default, the paths are returned as a pre-order traversal: the enclosing folder is occurs first before any of itâ€™s contents. You can pass in &lt;code&gt;preOrder = false&lt;/code&gt; to turn it into a post-order traversal, such that the enclosing folder occurs last after all itâ€™s contents.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;code&gt;os.walk&lt;/code&gt; returns but does not follow symlinks; pass in &lt;code&gt;followLinks = true&lt;/code&gt; to override that behavior. You can also specify a maximum depth you wish to walk via the &lt;code&gt;maxDepth&lt;/code&gt; parameter.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;code&gt;os.walk&lt;/code&gt; does not include the path given to it as part of the traversal by default. Pass in &lt;code&gt;includeTarget = true&lt;/code&gt; to make it do so. The path appears at the start of the traversal of &lt;code&gt;preOrder = true&lt;/code&gt;, and at the end of the traversal if &lt;code&gt;preOrder = false&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.walk(wd / &#34;folder1&#34;) ==&amp;gt; Seq(wd / &#34;folder1/one.txt&#34;)&#xA;&#xA;os.walk(wd / &#34;folder1&#34;, includeTarget = true) ==&amp;gt; Seq(&#xA;  wd / &#34;folder1&#34;,&#xA;  wd / &#34;folder1/one.txt&#34;&#xA;)&#xA;&#xA;os.walk(wd / &#34;folder2&#34;) ==&amp;gt; Seq(&#xA;  wd / &#34;folder2/nestedA&#34;,&#xA;  wd / &#34;folder2/nestedA/a.txt&#34;,&#xA;  wd / &#34;folder2/nestedB&#34;,&#xA;  wd / &#34;folder2/nestedB/b.txt&#34;&#xA;)&#xA;&#xA;os.walk(wd / &#34;folder2&#34;, preOrder = false) ==&amp;gt; Seq(&#xA;  wd / &#34;folder2/nestedA/a.txt&#34;,&#xA;  wd / &#34;folder2/nestedA&#34;,&#xA;  wd / &#34;folder2/nestedB/b.txt&#34;,&#xA;  wd / &#34;folder2/nestedB&#34;&#xA;)&#xA;&#xA;os.walk(wd / &#34;folder2&#34;, maxDepth = 1) ==&amp;gt; Seq(&#xA;  wd / &#34;folder2/nestedA&#34;,&#xA;  wd / &#34;folder2/nestedB&#34;&#xA;)&#xA;&#xA;os.walk(wd / &#34;folder2&#34;, skip = _.last == &#34;nestedA&#34;) ==&amp;gt; Seq(&#xA;  wd / &#34;folder2/nestedB&#34;,&#xA;  wd / &#34;folder2/nestedB/b.txt&#34;&#xA;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-walk-attrs&#34;&gt;&lt;code&gt;os.walk.attrs&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.walk.attrs(path: Path,&#xA;              skip: (Path, os.StatInfo) =&amp;gt; Boolean = (_, _) =&amp;gt; false,&#xA;              preOrder: Boolean = true,&#xA;              followLinks: Boolean = false,&#xA;              maxDepth: Int = Int.MaxValue,&#xA;              includeTarget: Boolean = false): IndexedSeq[(Path, os.StatInfo)]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-walk&#34;&gt;&lt;code&gt;os.walk&lt;/code&gt;&lt;/a&gt;, except it also provides the &lt;code&gt;os.StatInfo&lt;/code&gt; filesystem metadata of every path that it returns. Can save time by allowing you to avoid querying the filesystem for metadata later. Note that &lt;code&gt;os.StatInfo&lt;/code&gt; does not include filesystem ownership and permissions data; use &lt;code&gt;os.stat.posix&lt;/code&gt; on the path if you need those attributes.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val filesSortedBySize = os.walk.attrs(wd / &#34;misc&#34;, followLinks = true)&#xA;  .sortBy{case (p, attrs) =&amp;gt; attrs.size}&#xA;  .collect{case (p, attrs) if attrsisFile =&amp;gt; p}&#xA;&#xA;filesSortedBySize ==&amp;gt; Seq(&#xA;  wd / &#34;misc/echo&#34;,&#xA;  wd / &#34;misc/file-symlink&#34;,&#xA;  wd / &#34;misc/echo_with_wd&#34;,&#xA;  wd / &#34;misc/folder-symlink/one.txt&#34;,&#xA;  wd / &#34;misc/binary.png&#34;&#xA;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-walk-stream&#34;&gt;&lt;code&gt;os.walk.stream&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.walk.stream(path: Path,&#xA;              skip: Path =&amp;gt; Boolean = _ =&amp;gt; false,&#xA;              preOrder: Boolean = true,&#xA;              followLinks: Boolean = false,&#xA;              maxDepth: Int = Int.MaxValue,&#xA;              includeTarget: Boolean = false): os.Generator[Path]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-walk&#34;&gt;&lt;code&gt;os.walk&lt;/code&gt;&lt;/a&gt;, except returns a &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-generator&#34;&gt;&lt;code&gt;os.Generator&lt;/code&gt;&lt;/a&gt; of the results rather than accumulating them in memory. Useful if you are walking very large folder hierarchies, or if you wish to begin processing the output even before the walk has completed.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.walk.stream(wd / &#34;folder1&#34;).count() ==&amp;gt; 1&#xA;&#xA;os.walk.stream(wd / &#34;folder2&#34;).count() ==&amp;gt; 4&#xA;&#xA;os.walk.stream(wd / &#34;folder2&#34;, skip = _.last == &#34;nestedA&#34;).count() ==&amp;gt; 2&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-walk-stream-attrs&#34;&gt;&lt;code&gt;os.walk.stream.attrs&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.walk.stream.attrs(path: Path,&#xA;                     skip: (Path, os.StatInfo) =&amp;gt; Boolean = (_, _) =&amp;gt; false,&#xA;                     preOrder: Boolean = true,&#xA;                     followLinks: Boolean = false,&#xA;                     maxDepth: Int = Int.MaxValue,&#xA;                     includeTarget: Boolean = false): os.Generator[(Path, os.StatInfo)]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-walk-stream&#34;&gt;&lt;code&gt;os.walk.stream&lt;/code&gt;&lt;/a&gt;, except it also provides the filesystem metadata of every path that it returns. Can save time by allowing you to avoid querying the filesystem for metadata later.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;def totalFileSizes(p: os.Path) = os.walk.stream.attrs(p)&#xA;  .collect{case (p, attrs) if attrs.isFile =&amp;gt; attrs.size}&#xA;  .sum&#xA;&#xA;totalFileSizes(wd / &#34;folder1&#34;) ==&amp;gt; 22&#xA;totalFileSizes(wd / &#34;folder2&#34;) ==&amp;gt; 40&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;manipulating-files-folders&#34;&gt;Manipulating Files &amp;amp; Folders&lt;/h3&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-exists&#34;&gt;&lt;code&gt;os.exists&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.exists(p: Path, followLinks: Boolean = true): Boolean&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Checks if a file or folder exists at the specified path&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.exists(wd / &#34;File.txt&#34;) ==&amp;gt; true&#xA;os.exists(wd / &#34;folder1&#34;) ==&amp;gt; true&#xA;os.exists(wd / &#34;doesnt-exist&#34;) ==&amp;gt; false&#xA;&#xA;os.exists(wd / &#34;misc/file-symlink&#34;) ==&amp;gt; true&#xA;os.exists(wd / &#34;misc/folder-symlink&#34;) ==&amp;gt; true&#xA;os.exists(wd / &#34;misc/broken-symlink&#34;) ==&amp;gt; false&#xA;os.exists(wd / &#34;misc/broken-symlink&#34;, followLinks = false) ==&amp;gt; true&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-move&#34;&gt;&lt;code&gt;os.move&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.move(from: Path, to: Path): Unit&#xA;os.move(from: Path, to: Path, createFolders: Boolean): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Moves a file or folder from one path to another. Errors out if the destination path already exists, or is within the source path.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.list(wd / &#34;folder1&#34;) ==&amp;gt; Seq(wd / &#34;folder1/one.txt&#34;)&#xA;os.move(wd / &#34;folder1/one.txt&#34;, wd / &#34;folder1/first.txt&#34;)&#xA;os.list(wd / &#34;folder1&#34;) ==&amp;gt; Seq(wd / &#34;folder1/first.txt&#34;)&#xA;&#xA;os.list(wd / &#34;folder2&#34;) ==&amp;gt; Seq(wd / &#34;folder2/nestedA&#34;, wd / &#34;folder2/nestedB&#34;)&#xA;os.move(wd / &#34;folder2/nestedA&#34;, wd / &#34;folder2/nestedC&#34;)&#xA;os.list(wd / &#34;folder2&#34;) ==&amp;gt; Seq(wd / &#34;folder2/nestedB&#34;, wd / &#34;folder2/nestedC&#34;)&#xA;&#xA;os.read(wd / &#34;File.txt&#34;) ==&amp;gt; &#34;I am cow&#34;&#xA;os.move(wd / &#34;Multi Line.txt&#34;, wd / &#34;File.txt&#34;, replaceExisting = true)&#xA;os.read(wd / &#34;File.txt&#34;) ==&amp;gt;&#xA;  &#34;&#34;&#34;I am cow&#xA;    |Hear me moo&#xA;    |I weigh twice as much as you&#xA;    |And I look good on the barbecue&#34;&#34;&#34;.stripMargin&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-move-matching&#34;&gt;&lt;code&gt;os.move.matching&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.move.matching(t: PartialFunction[Path, Path]): PartialFunction[Path, Unit]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;code&gt;os.move&lt;/code&gt; can also be used as a transformer, via &lt;code&gt;os.move.matching&lt;/code&gt;. This lets you use &lt;code&gt;.map&lt;/code&gt; or &lt;code&gt;.collect&lt;/code&gt; on a list of paths, and move all of them at once, e.g. to rename all &lt;code&gt;.txt&lt;/code&gt; files within a folder tree to &lt;code&gt;.data&lt;/code&gt;:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;import os.{GlobSyntax, /}&#xA;os.walk(wd / &#34;folder2&#34;) ==&amp;gt; Seq(&#xA;  wd / &#34;folder2/nestedA&#34;,&#xA;  wd / &#34;folder2/nestedA/a.txt&#34;,&#xA;  wd / &#34;folder2/nestedB&#34;,&#xA;  wd / &#34;folder2/nestedB/b.txt&#34;&#xA;)&#xA;&#xA;os.walk(wd/&#39;folder2).collect(os.move.matching{case p/g&#34;$x.txt&#34; =&amp;gt; p/g&#34;$x.data&#34;})&#xA;&#xA;os.walk(wd / &#34;folder2&#34;) ==&amp;gt; Seq(&#xA;  wd / &#34;folder2/nestedA&#34;,&#xA;  wd / &#34;folder2/nestedA/a.data&#34;,&#xA;  wd / &#34;folder2/nestedB&#34;,&#xA;  wd / &#34;folder2/nestedB/b.data&#34;&#xA;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-move-into&#34;&gt;&lt;code&gt;os.move.into&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.move.into(from: Path, to: Path): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Move the given file or folder &lt;em&gt;into&lt;/em&gt; the destination folder&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.list(wd / &#34;folder1&#34;) ==&amp;gt; Seq(wd / &#34;folder1/one.txt&#34;)&#xA;os.move.into(wd / &#34;File.txt&#34;, wd / &#34;folder1&#34;)&#xA;os.list(wd / &#34;folder1&#34;) ==&amp;gt; Seq(wd / &#34;folder1/File.txt&#34;, wd / &#34;folder1/one.txt&#34;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-move-over&#34;&gt;&lt;code&gt;os.move.over&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.move.over(from: Path, to: Path): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Move a file or folder from one path to another, and &lt;em&gt;overwrite&lt;/em&gt; any file or folder than may already be present at that path&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.list(wd / &#34;folder2&#34;) ==&amp;gt; Seq(wd / &#34;folder2/nestedA&#34;, wd / &#34;folder2/nestedB&#34;)&#xA;os.move.over(wd / &#34;folder1&#34;, wd / &#34;folder2&#34;)&#xA;os.list(wd / &#34;folder2&#34;) ==&amp;gt; Seq(wd / &#34;folder2/one.txt&#34;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-copy&#34;&gt;&lt;code&gt;os.copy&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.copy(from: Path, to: Path): Unit&#xA;os.copy(from: Path, to: Path, createFolders: Boolean): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Copy a file or folder from one path to another. Recursively copies folders with all their contents. Errors out if the destination path already exists, or is within the source path.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.list(wd / &#34;folder1&#34;) ==&amp;gt; Seq(wd / &#34;folder1/one.txt&#34;)&#xA;os.copy(wd / &#34;folder1/one.txt&#34;, wd / &#34;folder1/first.txt&#34;)&#xA;os.list(wd / &#34;folder1&#34;) ==&amp;gt; Seq(wd / &#34;folder1/first.txt&#34;, wd / &#34;folder1/one.txt&#34;)&#xA;&#xA;os.list(wd / &#34;folder2&#34;) ==&amp;gt; Seq(wd / &#34;folder2/nestedA&#34;, wd / &#34;folder2/nestedB&#34;)&#xA;os.copy(wd / &#34;folder2/nestedA&#34;, wd / &#34;folder2/nestedC&#34;)&#xA;os.list(wd / &#34;folder2&#34;) ==&amp;gt; Seq(&#xA;  wd / &#34;folder2/nestedA&#34;,&#xA;  wd / &#34;folder2/nestedB&#34;,&#xA;  wd / &#34;folder2/nestedC&#34;&#xA;)&#xA;&#xA;os.read(wd / &#34;File.txt&#34;) ==&amp;gt; &#34;I am cow&#34;&#xA;os.copy(wd / &#34;Multi Line.txt&#34;, wd / &#34;File.txt&#34;, replaceExisting = true)&#xA;os.read(wd / &#34;File.txt&#34;) ==&amp;gt;&#xA;  &#34;&#34;&#34;I am cow&#xA;    |Hear me moo&#xA;    |I weigh twice as much as you&#xA;    |And I look good on the barbecue&#34;&#34;&#34;.stripMargin&#xA;    ```&#xA;&#xA;`os.copy` can also be used as a transformer:&#xA;&#xA;```scala&#xA;os.copy.matching(t: PartialFunction[Path, Path]): PartialFunction[Path, Unit]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This lets you use &lt;code&gt;.map&lt;/code&gt; or &lt;code&gt;.collect&lt;/code&gt; on a list of paths, and copy all of them at once:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;paths.map(os.copy.matching{case p/&#34;scala&#34;/file =&amp;gt; p/&#34;java&#34;/file})&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-copy-into&#34;&gt;&lt;code&gt;os.copy.into&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.copy.into(from: Path, to: Path): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Copy the given file or folder &lt;em&gt;into&lt;/em&gt; the destination folder&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.list(wd / &#34;folder1&#34;) ==&amp;gt; Seq(wd / &#34;folder1/one.txt&#34;)&#xA;os.copy.into(wd / &#34;File.txt&#34;, wd / &#34;folder1&#34;)&#xA;os.list(wd / &#34;folder1&#34;) ==&amp;gt; Seq(wd / &#34;folder1/File.txt&#34;, wd / &#34;folder1/one.txt&#34;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-copy-over&#34;&gt;&lt;code&gt;os.copy.over&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.copy.over(from: Path, to: Path): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-copy&#34;&gt;&lt;code&gt;os.copy&lt;/code&gt;&lt;/a&gt;, but if the destination file already exists then overwrite it instead of erroring out.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.list(wd / &#34;folder2&#34;) ==&amp;gt; Seq(wd / &#34;folder2/nestedA&#34;, wd / &#34;folder2/nestedB&#34;)&#xA;os.copy.over(wd / &#34;folder1&#34;, wd / &#34;folder2&#34;)&#xA;os.list(wd / &#34;folder2&#34;) ==&amp;gt; Seq(wd / &#34;folder2/one.txt&#34;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-copy-with-mergefolders&#34;&gt;&lt;code&gt;os.copy&lt;/code&gt; with &lt;code&gt;mergeFolders&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;Since 0.7.5&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;If you want to copy a directory over another but donâ€™t want to overwrite the whole destination directory (and loose itâ€™s content), you can use the &lt;code&gt;mergeFolders&lt;/code&gt; option of &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-copy&#34;&gt;&lt;code&gt;os.copy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.list(wd / &#34;folder1&#34;) ==&amp;gt; Seq(wd / &#34;folder1/one.txt&#34;)&#xA;os.list(wd / &#34;folder2&#34;) ==&amp;gt; Seq(wd / &#34;folder2/nestedA&#34;, wd / &#34;folder2/nestedB&#34;)&#xA;os.copy(wd / &#34;folder1&#34;, wd / &#34;folder2&#34;, mergeFolders = true)&#xA;os.list(wd / &#34;folder2&#34;) ==&amp;gt; Seq(wd / &#34;folder2/one.txt&#34;, wd / &#34;folder2/nestedA&#34;, wd / &#34;folder2/nestedB&#34;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-makedir&#34;&gt;&lt;code&gt;os.makeDir&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.makeDir(path: Path): Unit&#xA;os.makeDir(path: Path, perms: PermSet): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Create a single directory at the specified path. Optionally takes in a &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-permset&#34;&gt;&lt;code&gt;os.PermSet&lt;/code&gt;&lt;/a&gt; to specify the filesystem permissions of the created directory.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Errors out if the directory already exists, or if the parent directory of the specified path does not exist. To automatically create enclosing directories and ignore the destination if it already exists, using &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-makedir-all&#34;&gt;&lt;code&gt;os.makeDir.all&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.exists(wd / &#34;new_folder&#34;) ==&amp;gt; false&#xA;os.makeDir(wd / &#34;new_folder&#34;)&#xA;os.exists(wd / &#34;new_folder&#34;) ==&amp;gt; true&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-makedir-all&#34;&gt;&lt;code&gt;os.makeDir.all&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.makeDir.all(path: Path): Unit&#xA;os.makeDir.all(path: Path,&#xA;               perms: PermSet = null,&#xA;               acceptLinkedDirectory: Boolean = true): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-makedir&#34;&gt;&lt;code&gt;os.makeDir&lt;/code&gt;&lt;/a&gt;, but automatically creates any necessary enclosing directories if they do not exist, and does not raise an error if the destination path already contains a directory. Also does not raise an error if the destination path contains a symlink to a directory, though you can force it to error out in that case by passing in &lt;code&gt;acceptLinkedDirectory = false&lt;/code&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.exists(wd / &#34;new_folder&#34;) ==&amp;gt; false&#xA;os.makeDir.all(wd / &#34;new_folder/inner/deep&#34;)&#xA;os.exists(wd / &#34;new_folder/inner/deep&#34;) ==&amp;gt; true&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-remove&#34;&gt;&lt;code&gt;os.remove&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.remove(target: Path): Boolean&#xA;os.remove(target: Path, checkExists: Boolean = false): Boolean&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Remove the target file or folder. Folders need to be empty to be removed; if you want to remove a folder tree recursively, use &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-remove-all&#34;&gt;&lt;code&gt;os.remove.all&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;true&lt;/code&gt; if the file was present before. It will fail with an exception when the file is missing but &lt;code&gt;checkExists&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, or when the directory to remove is not empty.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.exists(wd / &#34;File.txt&#34;) ==&amp;gt; true&#xA;os.remove(wd / &#34;File.txt&#34;)&#xA;os.exists(wd / &#34;File.txt&#34;) ==&amp;gt; false&#xA;&#xA;os.exists(wd / &#34;folder1/one.txt&#34;) ==&amp;gt; true&#xA;os.remove(wd / &#34;folder1/one.txt&#34;)&#xA;os.remove(wd / &#34;folder1&#34;)&#xA;os.exists(wd / &#34;folder1/one.txt&#34;) ==&amp;gt; false&#xA;os.exists(wd / &#34;folder1&#34;) ==&amp;gt; false&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;When removing symbolic links, it is the link that gets removed, and not its destination:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.remove(wd / &#34;misc/file-symlink&#34;)&#xA;os.exists(wd / &#34;misc/file-symlink&#34;, followLinks = false) ==&amp;gt; false&#xA;os.exists(wd / &#34;File.txt&#34;, followLinks = false) ==&amp;gt; true&#xA;&#xA;os.remove(wd / &#34;misc/folder-symlink&#34;)&#xA;os.exists(wd / &#34;misc/folder-symlink&#34;, followLinks = false) ==&amp;gt; false&#xA;os.exists(wd / &#34;folder1&#34;, followLinks = false) ==&amp;gt; true&#xA;os.exists(wd / &#34;folder1/one.txt&#34;, followLinks = false) ==&amp;gt; true&#xA;&#xA;os.remove(wd / &#34;misc/broken-symlink&#34;)&#xA;os.exists(wd / &#34;misc/broken-symlink&#34;, followLinks = false) ==&amp;gt; false&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;If you wish to remove the destination of a symlink, use &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-readlink&#34;&gt;&lt;code&gt;os.readLink&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-remove-all&#34;&gt;&lt;code&gt;os.remove.all&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.remove.all(target: Path): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Remove the target file or folder; if it is a folder and not empty, recursively removing all itâ€™s contents before deleting it.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.exists(wd / &#34;folder1/one.txt&#34;) ==&amp;gt; true&#xA;os.remove.all(wd / &#34;folder1&#34;)&#xA;os.exists(wd / &#34;folder1/one.txt&#34;) ==&amp;gt; false&#xA;os.exists(wd / &#34;folder1&#34;) ==&amp;gt; false&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;When removing symbolic links, it is the links that gets removed, and not itâ€™s destination:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.remove.all(wd / &#34;misc/file-symlink&#34;)&#xA;os.exists(wd / &#34;misc/file-symlink&#34;, followLinks = false) ==&amp;gt; false&#xA;os.exists(wd / &#34;File.txt&#34;, followLinks = false) ==&amp;gt; true&#xA;&#xA;os.remove.all(wd / &#34;misc/folder-symlink&#34;)&#xA;os.exists(wd / &#34;misc/folder-symlink&#34;, followLinks = false) ==&amp;gt; false&#xA;os.exists(wd / &#34;folder1&#34;, followLinks = false) ==&amp;gt; true&#xA;os.exists(wd / &#34;folder1/one.txt&#34;, followLinks = false) ==&amp;gt; true&#xA;&#xA;os.remove.all(wd / &#34;misc/broken-symlink&#34;)&#xA;os.exists(wd / &#34;misc/broken-symlink&#34;, followLinks = false) ==&amp;gt; false&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;If you wish to remove the destination of a symlink, use &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-readlink&#34;&gt;&lt;code&gt;os.readLink&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-hardlink&#34;&gt;&lt;code&gt;os.hardlink&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.hardlink(src: Path, dest: Path, perms): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Create a hardlink to the source path from the destination path&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.hardlink(wd / &#34;File.txt&#34;, wd / &#34;Linked.txt&#34;)&#xA;os.exists(wd / &#34;Linked.txt&#34;)&#xA;os.read(wd / &#34;Linked.txt&#34;) ==&amp;gt; &#34;I am cow&#34;&#xA;os.isLink(wd / &#34;Linked.txt&#34;) ==&amp;gt; false&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-symlink&#34;&gt;&lt;code&gt;os.symlink&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.symlink(link: Path, dest: FilePath, perms: PermSet = null): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Create a symbolic to the source path from the destination path. Optionally takes a &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-permset&#34;&gt;&lt;code&gt;os.PermSet&lt;/code&gt;&lt;/a&gt; to customize the filesystem permissions of the symbolic link.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.symlink(wd / &#34;File.txt&#34;, wd / &#34;Linked.txt&#34;)&#xA;os.exists(wd / &#34;Linked.txt&#34;)&#xA;os.read(wd / &#34;Linked.txt&#34;) ==&amp;gt; &#34;I am cow&#34;&#xA;os.isLink(wd / &#34;Linked.txt&#34;) ==&amp;gt; true&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;You can create symlinks with either absolute &lt;code&gt;os.Path&lt;/code&gt;s or relative &lt;code&gt;os.RelPath&lt;/code&gt;s:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.symlink(wd / &#34;File.txt&#34;, os.rel/ &#34;Linked2.txt&#34;)&#xA;os.exists(wd / &#34;Linked2.txt&#34;)&#xA;os.read(wd / &#34;Linked2.txt&#34;) ==&amp;gt; &#34;I am cow&#34;&#xA;os.isLink(wd / &#34;Linked2.txt&#34;) ==&amp;gt; true&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Creating absolute and relative symlinks respectively. Relative symlinks are resolved relative to the enclosing folder of the link.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-readlink&#34;&gt;&lt;code&gt;os.readLink&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.readLink(src: Path): os.FilePath&#xA;os.readLink.absolute(src: Path): os.Path&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Returns the immediate destination of the given symbolic link.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.readLink(wd / &#34;misc/file-symlink&#34;) ==&amp;gt; os.up / &#34;File.txt&#34;&#xA;os.readLink(wd / &#34;misc/folder-symlink&#34;) ==&amp;gt; os.up / &#34;folder1&#34;&#xA;os.readLink(wd / &#34;misc/broken-symlink&#34;) ==&amp;gt; os.rel / &#34;broken&#34;&#xA;os.readLink(wd / &#34;misc/broken-abs-symlink&#34;) ==&amp;gt; os.root / &#34;doesnt/exist&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Note that symbolic links can be either absolute &lt;code&gt;os.Path&lt;/code&gt;s or relative &lt;code&gt;os.RelPath&lt;/code&gt;s, represented by &lt;code&gt;os.FilePath&lt;/code&gt;. You can also use &lt;code&gt;os.readLink.absolute&lt;/code&gt; to automatically resolve relative symbolic links to their absolute destination:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.readLink.absolute(wd / &#34;misc/file-symlink&#34;) ==&amp;gt; wd / &#34;File.txt&#34;&#xA;os.readLink.absolute(wd / &#34;misc/folder-symlink&#34;) ==&amp;gt; wd / &#34;folder1&#34;&#xA;os.readLink.absolute(wd / &#34;misc/broken-symlink&#34;) ==&amp;gt; wd / &#34;misc/broken&#34;&#xA;os.readLink.absolute(wd / &#34;misc/broken-abs-symlink&#34;) ==&amp;gt; os.root / &#34;doesnt/exist&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-followlink&#34;&gt;&lt;code&gt;os.followLink&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.followLink(src: Path): Option[Path]&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Attempts to any deference symbolic links in the given path, recursively, and return the canonical path. Returns &lt;code&gt;None&lt;/code&gt; if the path cannot be resolved (i.e. some symbolic link in the given path is broken)&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.followLink(wd / &#34;misc/file-symlink&#34;) ==&amp;gt; Some(wd / &#34;File.txt&#34;)&#xA;os.followLink(wd / &#34;misc/folder-symlink&#34;) ==&amp;gt; Some(wd / &#34;folder1&#34;)&#xA;os.followLink(wd / &#34;misc/broken-symlink&#34;) ==&amp;gt; None&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-temp&#34;&gt;&lt;code&gt;os.temp&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.temp(contents: os.Source = null,&#xA;        dir: Path = null,&#xA;        prefix: String = null,&#xA;        suffix: String = null,&#xA;        deleteOnExit: Boolean = true,&#xA;        perms: PermSet = null): Path&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Creates a temporary file. You can optionally provide a &lt;code&gt;dir&lt;/code&gt; to specify where this file lives, file-&lt;code&gt;prefix&lt;/code&gt; and file-&lt;code&gt;suffix&lt;/code&gt; to customize what it looks like, and a &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-permset&#34;&gt;&lt;code&gt;os.PermSet&lt;/code&gt;&lt;/a&gt; to customize its filesystem permissions.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Passing in a &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-source&#34;&gt;&lt;code&gt;os.Source&lt;/code&gt;&lt;/a&gt; will initialize the contents of that file to the provided data; otherwise it is created empty.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;By default, temporary files are deleted on JVM exit. You can disable that behavior by setting &lt;code&gt;deleteOnExit = false&lt;/code&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val tempOne = os.temp(&#34;default content&#34;)&#xA;os.read(tempOne) ==&amp;gt; &#34;default content&#34;&#xA;os.write.over(tempOne, &#34;Hello&#34;)&#xA;os.read(tempOne) ==&amp;gt; &#34;Hello&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-temp-dir&#34;&gt;&lt;code&gt;os.temp.dir&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.temp.dir(dir: Path = null,&#xA;            prefix: String = null,&#xA;            deleteOnExit: Boolean = true,&#xA;            perms: PermSet = null): Path&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Creates a temporary directory. You can optionally provide a &lt;code&gt;dir&lt;/code&gt; to specify where this file lives, a &lt;code&gt;prefix&lt;/code&gt; to customize what it looks like, and a &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-permset&#34;&gt;&lt;code&gt;os.PermSet&lt;/code&gt;&lt;/a&gt; to customize its filesystem permissions.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;By default, temporary directories are deleted on JVM exit. You can disable that behavior by setting &lt;code&gt;deleteOnExit = false&lt;/code&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val tempDir = os.temp.dir()&#xA;os.list(tempDir) ==&amp;gt; Nil&#xA;os.write(tempDir / &#34;file&#34;, &#34;Hello&#34;)&#xA;os.list(tempDir) ==&amp;gt; Seq(tempDir / &#34;file&#34;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;filesystem-metadata&#34;&gt;Filesystem Metadata&lt;/h3&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-stat&#34;&gt;&lt;code&gt;os.stat&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.stat(p: os.Path, followLinks: Boolean = true): os.StatInfo&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Reads in the basic filesystem metadata for the given file. By default, follows symbolic links to read the metadata of whatever the link is pointing at; set &lt;code&gt;followLinks = false&lt;/code&gt; to disable that and instead read the metadata of the symbolic link itself.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.stat(wd / &#34;File.txt&#34;).size ==&amp;gt; 8&#xA;os.stat(wd / &#34;Multi Line.txt&#34;).size ==&amp;gt; 81&#xA;os.stat(wd / &#34;folder1&#34;).fileType ==&amp;gt; os.FileType.Dir&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-stat-posix&#34;&gt;&lt;code&gt;os.stat.posix&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.stat.posix(p: os.Path, followLinks: Boolean = true): os.PosixStatInfo&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Reads in the posix filesystem metadata for the given file, providing information on permissions and ownership. By default, follows symbolic links to read the metadata of whatever the link is pointing at; set &lt;code&gt;followLinks = false&lt;/code&gt; to disable that and instead read the metadata of the symbolic link itself.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-isfile&#34;&gt;&lt;code&gt;os.isFile&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.isFile(p: Path, followLinks: Boolean = true): Boolean&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the given path is a file. Follows symbolic links by default, pass in &lt;code&gt;followLinks = false&lt;/code&gt; to not do so.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.isFile(wd / &#34;File.txt&#34;) ==&amp;gt; true&#xA;os.isFile(wd / &#34;folder1&#34;) ==&amp;gt; false&#xA;&#xA;os.isFile(wd / &#34;misc/file-symlink&#34;) ==&amp;gt; true&#xA;os.isFile(wd / &#34;misc/folder-symlink&#34;) ==&amp;gt; false&#xA;os.isFile(wd / &#34;misc/file-symlink&#34;, followLinks = false) ==&amp;gt; false&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-isdir&#34;&gt;&lt;code&gt;os.isDir&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.isDir(p: Path, followLinks: Boolean = true): Boolean&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the given path is a folder. Follows symbolic links by default, pass in &lt;code&gt;followLinks = false&lt;/code&gt; to not do so.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.isDir(wd / &#34;File.txt&#34;) ==&amp;gt; false&#xA;os.isDir(wd / &#34;folder1&#34;) ==&amp;gt; true&#xA;&#xA;os.isDir(wd / &#34;misc/file-symlink&#34;) ==&amp;gt; false&#xA;os.isDir(wd / &#34;misc/folder-symlink&#34;) ==&amp;gt; true&#xA;os.isDir(wd / &#34;misc/folder-symlink&#34;, followLinks = false) ==&amp;gt; false&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-islink&#34;&gt;&lt;code&gt;os.isLink&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.isLink(p: Path, followLinks: Boolean = true): Boolean&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the given path is a symbolic link. Follows symbolic links by default, pass in &lt;code&gt;followLinks = false&lt;/code&gt; to not do so.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.isLink(wd / &#34;misc/file-symlink&#34;) ==&amp;gt; true&#xA;os.isLink(wd / &#34;misc/folder-symlink&#34;) ==&amp;gt; true&#xA;os.isLink(wd / &#34;folder1&#34;) ==&amp;gt; false&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-size&#34;&gt;&lt;code&gt;os.size&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.size(p: Path): Long&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Returns the size of the given file, in bytes&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.size(wd / &#34;File.txt&#34;) ==&amp;gt; 8&#xA;os.size(wd / &#34;Multi Line.txt&#34;) ==&amp;gt; 81&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-mtime&#34;&gt;&lt;code&gt;os.mtime&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.mtime(p: Path): Long&#xA;os.mtime.set(p: Path, millis: Long): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Gets or sets the last-modified timestamp of the given file, in milliseconds&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.mtime.set(wd / &#34;File.txt&#34;, 0)&#xA;os.mtime(wd / &#34;File.txt&#34;) ==&amp;gt; 0&#xA;&#xA;os.mtime.set(wd / &#34;File.txt&#34;, 90000)&#xA;os.mtime(wd / &#34;File.txt&#34;) ==&amp;gt; 90000&#xA;os.mtime(wd / &#34;misc/file-symlink&#34;) ==&amp;gt; 90000&#xA;&#xA;os.mtime.set(wd / &#34;misc/file-symlink&#34;, 70000)&#xA;os.mtime(wd / &#34;File.txt&#34;) ==&amp;gt; 70000&#xA;os.mtime(wd / &#34;misc/file-symlink&#34;) ==&amp;gt; 70000&#xA;assert(os.mtime(wd / &#34;misc/file-symlink&#34;, followLinks = false) != 40000)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;filesystem-permissions&#34;&gt;Filesystem Permissions&lt;/h3&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-perms&#34;&gt;&lt;code&gt;os.perms&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.perms(p: Path, followLinks: Boolean = true): PermSet&#xA;os.perms.set(p: Path, arg2: PermSet): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Gets or sets the filesystem permissions of the given file or folder, as an &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-permset&#34;&gt;&lt;code&gt;os.PermSet&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Note that if you want to create a file or folder with a given set of permissions, you can pass in an &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-permset&#34;&gt;&lt;code&gt;os.PermSet&lt;/code&gt;&lt;/a&gt; to &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-write&#34;&gt;&lt;code&gt;os.write&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-makedir&#34;&gt;&lt;code&gt;os.makeDir&lt;/code&gt;&lt;/a&gt;. That will ensure the file or folder is created atomically with the given permissions, rather than being created with the default set of permissions and having &lt;code&gt;os.perms.set&lt;/code&gt; over-write them later&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.perms.set(wd / &#34;File.txt&#34;, &#34;rwxrwxrwx&#34;)&#xA;os.perms(wd / &#34;File.txt&#34;).toString() ==&amp;gt; &#34;rwxrwxrwx&#34;&#xA;os.perms(wd / &#34;File.txt&#34;).toInt() ==&amp;gt; Integer.parseInt(&#34;777&#34;, 8)&#xA;&#xA;os.perms.set(wd / &#34;File.txt&#34;, Integer.parseInt(&#34;755&#34;, 8))&#xA;os.perms(wd / &#34;File.txt&#34;).toString() ==&amp;gt; &#34;rwxr-xr-x&#34;&#xA;&#xA;os.perms.set(wd / &#34;File.txt&#34;, &#34;r-xr-xr-x&#34;)&#xA;os.perms.set(wd / &#34;File.txt&#34;, Integer.parseInt(&#34;555&#34;, 8))&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-owner&#34;&gt;&lt;code&gt;os.owner&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.owner(p: Path, followLinks: Boolean = true): UserPrincipal&#xA;os.owner.set(arg1: Path, arg2: UserPrincipal): Unit&#xA;os.owner.set(arg1: Path, arg2: String): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Gets or sets the owner of the given file or folder. Note that your process needs to be running as the &lt;code&gt;root&lt;/code&gt; user in order to do this.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val originalOwner = os.owner(wd / &#34;File.txt&#34;)&#xA;&#xA;os.owner.set(wd / &#34;File.txt&#34;, &#34;nobody&#34;)&#xA;os.owner(wd / &#34;File.txt&#34;).getName ==&amp;gt; &#34;nobody&#34;&#xA;&#xA;os.owner.set(wd / &#34;File.txt&#34;, originalOwner)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-group&#34;&gt;&lt;code&gt;os.group&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.group(p: Path, followLinks: Boolean = true): GroupPrincipal&#xA;os.group.set(arg1: Path, arg2: GroupPrincipal): Unit&#xA;os.group.set(arg1: Path, arg2: String): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Gets or sets the owning group of the given file or folder. Note that your process needs to be running as the &lt;code&gt;root&lt;/code&gt; user in order to do this.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val originalOwner = os.owner(wd / &#34;File.txt&#34;)&#xA;&#xA;os.owner.set(wd / &#34;File.txt&#34;, &#34;nobody&#34;)&#xA;os.owner(wd / &#34;File.txt&#34;).getName ==&amp;gt; &#34;nobody&#34;&#xA;&#xA;os.owner.set(wd / &#34;File.txt&#34;, originalOwner)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;spawning-subprocesses&#34;&gt;Spawning Subprocesses&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Subprocess are spawned using &lt;code&gt;os.call(cmd: os.Shellable, ...)&lt;/code&gt; or &lt;code&gt;os.spawn(cmd: os.Shellable, ...)&lt;/code&gt; calls, where the &lt;code&gt;cmd: Shellable&lt;/code&gt; sets up the basic command you wish to run and &lt;code&gt;.foo(...)&lt;/code&gt; specifies how you want to run it. &lt;code&gt;os.Shellable&lt;/code&gt; represents a value that can make up part of your subprocess command, and the following values can be used as &lt;code&gt;os.Shellable&lt;/code&gt;s:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;java.lang.String&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;scala.Symbol&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.Path&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.RelPath&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;T: Numeric&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;Iterable[T]&lt;/code&gt;s of any of the above&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;TupleN[T1, T2, â€¦â€‹Tn]&lt;/code&gt;s of any of the above&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Most of the subprocess commands also let you redirect the subprocessâ€™s &lt;code&gt;stdin&lt;/code&gt;/&lt;code&gt;stdout&lt;/code&gt;/&lt;code&gt;stderr&lt;/code&gt; streams via &lt;code&gt;os.ProcessInput&lt;/code&gt; or &lt;code&gt;os.ProcessOutput&lt;/code&gt; values: whether to inherit them from the parent process, stream them into buffers, or output them to files. The following values are common to both input and output:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.Pipe&lt;/code&gt;: the default, this connects the subprocessâ€™s stream to the parent process via pipes; if used on its stdin this lets the parent process write to the subprocess via &lt;code&gt;os.SubProcess#stdin&lt;/code&gt;, and if used on its stdout it lets the parent process read from the subprocess via &lt;code&gt;os.SubProcess#stdout&lt;/code&gt; and &lt;code&gt;os.SubProcess#stderr&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.Inherit&lt;/code&gt;: inherits the stream from the parent process. This lets the subprocess read directly from the parent processâ€™s standard input or write directly to the parent processâ€™s standard output or error. &lt;code&gt;os.Inherit&lt;/code&gt; can be redirected on a threadlocal basis via &lt;code&gt;os.Inherit.in&lt;/code&gt;, &lt;code&gt;.out&lt;/code&gt;, or &lt;code&gt;.err&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.InheritRaw&lt;/code&gt;: identical to &lt;code&gt;os.Inherit&lt;/code&gt;, but without being affected by redirects.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.Path&lt;/code&gt;: connects the subprocessâ€™s stream to the given filesystem path, reading its standard input from a file or writing its standard output/error to the file.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In addition, you can pass any &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-source&#34;&gt;&lt;code&gt;os.Source&lt;/code&gt;&lt;/a&gt;s to a Subprocessâ€™s &lt;code&gt;stdin&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt;s, &lt;code&gt;InputStream&lt;/code&gt;s, &lt;code&gt;Array[Byte]&lt;/code&gt;s, â€¦â€‹), and pass in a &lt;code&gt;os.ProcessOutput&lt;/code&gt; value to &lt;code&gt;stdout&lt;/code&gt;/&lt;code&gt;stderr&lt;/code&gt; to register callbacks that are run when output is received on those streams.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Often, if you are only interested in capturing the standard output of the subprocess but want any errors sent to the console, you might set &lt;code&gt;stderr = os.Inherit&lt;/code&gt; while leaving &lt;code&gt;stdout = os.Pipe&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-call&#34;&gt;&lt;code&gt;os.call&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.call(cmd: os.Shellable,&#xA;        cwd: Path = null,&#xA;        env: Map[String, String] = null,&#xA;        stdin: ProcessInput = Pipe,&#xA;        stdout: ProcessOutput = Pipe,&#xA;        stderr: ProcessOutput = Pipe,&#xA;        mergeErrIntoOut: Boolean = false,&#xA;        timeout: Long = Long.MaxValue,&#xA;        check: Boolean = true,&#xA;        propagateEnv: Boolean = true): os.CommandResult&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;Also callable via `os.proc(cmd).call(â€¦â€‹)`&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Invokes the given subprocess like a function, passing in input and returning a &lt;code&gt;CommandResult&lt;/code&gt;. You can then call &lt;code&gt;result.exitCode&lt;/code&gt; to see how it exited, or &lt;code&gt;result.out.bytes&lt;/code&gt; or &lt;code&gt;result.err.string&lt;/code&gt; to access the aggregated stdout and stderr of the subprocess in a number of convenient ways.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;code&gt;call&lt;/code&gt; provides a number of parameters that let you configure how the subprocess is run:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;cwd&lt;/code&gt;: the working directory of the subprocess&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;env&lt;/code&gt;: any additional environment variables you wish to set in the subprocess&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;stdin&lt;/code&gt;: any data you wish to pass to the subprocessâ€™s standard input&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;stdout&lt;/code&gt;/&lt;code&gt;stderr&lt;/code&gt;: these are &lt;code&gt;os.Redirect&lt;/code&gt;s that let you configure how the processes output/error streams are configured.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;mergeErrIntoOut&lt;/code&gt;: merges the subprocessâ€™s stderr stream into itâ€™s stdout&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;timeout&lt;/code&gt;: how long to wait for the subprocess to complete&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;check&lt;/code&gt;: disable this to avoid throwing an exception if the subprocess fails with a non-zero exit code&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;propagateEnv&lt;/code&gt;: disable this to avoid passing in this parent processâ€™s environment variables to the subprocess&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Note that redirecting &lt;code&gt;stdout&lt;/code&gt;/&lt;code&gt;stderr&lt;/code&gt; elsewhere means that the respective &lt;code&gt;CommandResult#out&lt;/code&gt;/&lt;code&gt;CommandResult#err&lt;/code&gt; values will be empty.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val res = os.call(cmd = (&#39;ls, wd/&#34;folder2&#34;))&#xA;&#xA;res.exitCode ==&amp;gt; 0&#xA;&#xA;res.out.text() ==&amp;gt;&#xA;  &#34;&#34;&#34;nestedA&#xA;    |nestedB&#xA;    |&#34;&#34;&#34;.stripMargin&#xA;&#xA;res.out.trim() ==&amp;gt;&#xA;  &#34;&#34;&#34;nestedA&#xA;    |nestedB&#34;&#34;&#34;.stripMargin&#xA;&#xA;res.out.lines() ==&amp;gt; Seq(&#xA;  &#34;nestedA&#34;,&#xA;  &#34;nestedB&#34;&#xA;)&#xA;&#xA;res.out.bytes&#xA;&#xA;&#xA;// Non-zero exit codes throw an exception by default&#xA;val thrown = intercept[os.SubprocessException]{&#xA;  os.call(cmd = (&#39;ls, &#34;doesnt-exist&#34;), cwd = wd)&#xA;}&#xA;&#xA;assert(thrown.result.exitCode != 0)&#xA;&#xA;// Though you can avoid throwing by setting `check = false`&#xA;val fail = os.call(cmd = (&#39;ls, &#34;doesnt-exist&#34;), cwd = wd, check = false)&#xA;&#xA;assert(fail.exitCode != 0)&#xA;&#xA;&#xA;fail.out.text() ==&amp;gt; &#34;&#34;&#xA;&#xA;assert(fail.err.text().contains(&#34;No such file or directory&#34;))&#xA;&#xA;// You can pass in data to a subprocess&#39; stdin&#xA;val hash = os.call(cmd = (&#34;shasum&#34;, &#34;-a&#34;, &#34;256&#34;), stdin = &#34;Hello World&#34;)&#xA;hash.out.trim() ==&amp;gt; &#34;a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e  -&#34;&#xA;&#xA;// Taking input from a file and directing output to another file&#xA;os.call(cmd = (&#34;base64&#34;), stdin = wd / &#34;File.txt&#34;, stdout = wd / &#34;File.txt.b64&#34;)&#xA;&#xA;os.read(wd / &#34;File.txt.b64&#34;) ==&amp;gt; &#34;SSBhbSBjb3c=&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;If you want to spawn an interactive subprocess, such as &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;less&lt;/code&gt;, or a &lt;code&gt;python&lt;/code&gt; shell, set all of &lt;code&gt;stdin&lt;/code&gt;/&lt;code&gt;stdout&lt;/code&gt;/&lt;code&gt;stderr&lt;/code&gt; to &lt;code&gt;os.Inherit&lt;/code&gt;:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.proc(&#34;vim&#34;).call(stdin = os.Inherit, stdout = os.Inherit, stderr = os.Inherit)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Note that by customizing &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;, you can use the results of &lt;code&gt;os.proc.call&lt;/code&gt; in a streaming fashion, either on groups of bytes:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;var lineCount = 1&#xA;os.call(&#xA;  cmd = (&#39;find, &#34;.&#34;),&#xA;  cwd = wd,&#xA;  stdout = os.ProcessOutput(&#xA;    (buf, len) =&amp;gt; lineCount += buf.slice(0, len).count(_ == &#39;&#xA;&#39;)&#xA;  ),&#xA;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Or on lines of output:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;lineCount ==&amp;gt; 22&#xA;var lineCount = 1&#xA;os.call(&#xA;  cmd = (&#39;find, &#34;.&#34;),&#xA;  cwd = wd,&#xA;  stdout = os.ProcessOutput.Readlines(&#xA;    line =&amp;gt; lineCount += 1&#xA;  ),&#xA;)&#xA;lineCount ==&amp;gt; 22&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-spawn&#34;&gt;&lt;code&gt;os.spawn&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.spawn(cmd: os.Shellable,&#xA;         cwd: Path = null,&#xA;         env: Map[String, String] = null,&#xA;         stdin: os.ProcessInput = os.Pipe,&#xA;         stdout: os.ProcessOutput = os.Pipe,&#xA;         stderr: os.ProcessOutput = os.Pipe,&#xA;         mergeErrIntoOut: Boolean = false,&#xA;         propagateEnv: Boolean = true): os.SubProcess&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;em&gt;Also callable via `os.proc(cmd).spawn(â€¦â€‹)`&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The most flexible of the &lt;code&gt;os.proc&lt;/code&gt; calls, &lt;code&gt;os.spawn&lt;/code&gt; simply configures and starts a subprocess, and returns it as a &lt;code&gt;os.SubProcess&lt;/code&gt;. &lt;code&gt;os.SubProcess&lt;/code&gt; is a simple wrapper around &lt;code&gt;java.lang.Process&lt;/code&gt;, which provides &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and &lt;code&gt;stderr&lt;/code&gt; streams for you to interact with however you like. e.g. You can sending commands to itâ€™s &lt;code&gt;stdin&lt;/code&gt; and reading from itâ€™s &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;To implement pipes, you can spawn a process, take its stdout, and pass it as the stdin of a second spawned process.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Note that if you provide &lt;code&gt;ProcessOutput&lt;/code&gt; callbacks to &lt;code&gt;stdout&lt;/code&gt;/&lt;code&gt;stderr&lt;/code&gt;, the calls to those callbacks take place on newly spawned threads that execute in parallel with the main thread. Thus make sure any data processing you do in those callbacks is thread safe!&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; are &lt;code&gt;java.lang.OutputStream&lt;/code&gt;s and &lt;code&gt;java.lang.InputStream&lt;/code&gt;s enhanced with the &lt;code&gt;.writeLine(s: String)&lt;/code&gt;/&lt;code&gt;.readLine()&lt;/code&gt; methods for easy reading and writing of character and line-based data.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// Start a long-lived python process which you can communicate with&#xA;val sub = os.spawn(&#xA;  cmd = (&#34;python&#34;, &#34;-u&#34;, &#34;-c&#34;, &#34;while True: print(eval(raw_input()))&#34;),&#xA;  cwd = wd&#xA;)&#xA;&#xA;// Sending some text to the subprocess&#xA;sub.stdin.write(&#34;1 + 2&#34;)&#xA;sub.stdin.writeLine(&#34;+ 4&#34;)&#xA;sub.stdin.flush()&#xA;sub.stdout.readLine() ==&amp;gt; &#34;7&#34;&#xA;&#xA;sub.stdin.write(&#34;&#39;1&#39; + &#39;2&#39;&#34;)&#xA;sub.stdin.writeLine(&#34;+ &#39;4&#39;&#34;)&#xA;sub.stdin.flush()&#xA;sub.stdout.readLine() ==&amp;gt; &#34;124&#34;&#xA;&#xA;// Sending some bytes to the subprocess&#xA;sub.stdin.write(&#34;1 * 2&#34;.getBytes)&#xA;sub.stdin.write(&#34;* 4&#xA;&#34;.getBytes)&#xA;sub.stdin.flush()&#xA;sub.stdout.read() ==&amp;gt; &#39;8&#39;.toByte&#xA;&#xA;sub.destroy()&#xA;&#xA;// You can chain multiple subprocess&#39; stdin/stdout together&#xA;val curl = os.spawn(cmd = (&#34;curl&#34;, &#34;-L&#34; , &#34;https://git.io/fpfTs&#34;), stderr = os.Inherit)&#xA;val gzip = os.spawn(cmd = (&#34;gzip&#34;, &#34;-n&#34;), stdin = curl.stdout)&#xA;val sha = os.spawn(cmd = (&#34;shasum&#34;, &#34;-a&#34;, &#34;256&#34;), stdin = gzip.stdout)&#xA;sha.stdout.trim ==&amp;gt; &#34;acc142175fa520a1cb2be5b97cbbe9bea092e8bba3fe2e95afa645615908229e  -&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;customizing-the-default-environment&#34;&gt;Customizing the default environment&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Client-server CLI applications sometimes want to run subprocesses on the server based on the environment of the client. It is possible to customize the default environment passed to subprocesses by setting the &lt;code&gt;os.SubProcess.env&lt;/code&gt; threadlocal:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val clientEnvironment: Map[String, String] = ???&#xA;os.SubProcess.env.withValue(clientEnvironment) {&#xA;  os.call(command) // clientEnvironment is passed by default instead of the system environment&#xA;}&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;spawning-pipelines-of-subprocesses&#34;&gt;Spawning Pipelines of Subprocesses&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;After constructing a subprocess with &lt;code&gt;os.proc&lt;/code&gt;, you can use the &lt;code&gt;pipeTo&lt;/code&gt; method to pipe its output to another subprocess:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val wc = os.proc(&#34;ls&#34;, &#34;-l&#34;)&#xA;  .pipeTo(os.proc(&#34;wc&#34;, &#34;-l&#34;))&#xA;  .call()&#xA;  .out.text()&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This is equivalent to the shell command &lt;code&gt;ls -l | wc -l&lt;/code&gt;. You can chain together as many subprocesses as you like. Note that by using this API you can utilize the broken pipe behaviour of Unix systems. For example, you can take 10 first elements of output from the &lt;code&gt;yes&lt;/code&gt; command, and after the &lt;code&gt;head&lt;/code&gt; command terminates, the &lt;code&gt;yes&lt;/code&gt; command will be terminated as well:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val yes10 = os.proc(&#34;yes&#34;)&#xA;  .pipeTo(os.proc(&#34;head&#34;, &#34;-n&#34;, &#34;10&#34;))&#xA;  .call()&#xA;  .out.text()&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This feature is implemented inside the library and will terminate any process reading the stdin of other process in pipeline on every IO error. This behavior can be disabled via the &lt;code&gt;handleBrokenPipe&lt;/code&gt; flag on &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;spawn&lt;/code&gt; methods. Note that Windows does not support broken pipe behaviour, so a command like`yes` would run forever. &lt;code&gt;handleBrokenPipe&lt;/code&gt; is set to false by default on Windows.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Both &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;spawn&lt;/code&gt; correspond in their behavior to their counterparts in the &lt;code&gt;os.proc&lt;/code&gt;, but &lt;code&gt;spawn&lt;/code&gt; returns the &lt;code&gt;os.ProcessPipeline&lt;/code&gt; instance instead. It offers the same &lt;code&gt;API&lt;/code&gt; as &lt;code&gt;SubProcess&lt;/code&gt;, but will operate on the set of processes instead of a single one.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;code&gt;Pipefail&lt;/code&gt; is enabled by default, so if any of the processes in the pipeline fails, the whole pipeline will have a non-zero exit code. This behavior can be disabled via the &lt;code&gt;pipefail&lt;/code&gt; flag on &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;spawn&lt;/code&gt; methods. Note that the pipefail does not kill the processes in the pipeline, it just sets the exit code of the pipeline to the exit code of the failed process.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;watching-for-changes&#34;&gt;Watching for Changes&lt;/h3&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-watch-watch&#34;&gt;&lt;code&gt;os.watch.watch&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;os.watch.watch(roots: Seq[os.Path], onEvent: Set[os.Path] =&amp;gt; Unit): Unit&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// Mill&#xA;ivy&#34;com.lihaoyi::os-lib-watch:0.10.7&#34;&#xA;// SBT&#xA;&#34;com.lihaoyi&#34; %% &#34;os-lib-watch&#34; % &#34;0.10.7&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Efficiently watches the given &lt;code&gt;roots&lt;/code&gt; folders for changes. Any time the filesystem is modified within those folders, the &lt;code&gt;onEvent&lt;/code&gt; callback is called with the paths to the changed files or folders. Note that &lt;code&gt;os.watch.watch&lt;/code&gt; is under a different artifact than the rest of the &lt;code&gt;os.*&lt;/code&gt; functions, and you need to add a separate dependency to &lt;code&gt;os-lib-watch&lt;/code&gt; in order to pull it in.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Once the call to &lt;code&gt;watch&lt;/code&gt; returns, &lt;code&gt;onEvent&lt;/code&gt; is guaranteed to receive a an event containing the path for:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Every file or folder that gets created, deleted, updated or moved within the watched folders&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;For copied or moved folders, the path of the new folder as well as every file or folder within it.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;For deleted or moved folders, the root folder which was deleted/moved, but &lt;em&gt;without&lt;/em&gt; the paths of every file that was within it at the original location&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Note that &lt;code&gt;watch&lt;/code&gt; does not provide any additional information about the changes happening within the watched &lt;code&gt;roots&lt;/code&gt; folder, apart from the path at which the change happened. It is up to the &lt;code&gt;onEvent&lt;/code&gt; handler to query the filesystem and figure out what happened, and what it wants to do.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Here is an example of use from the Ammonite REPL:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;@ import $ivy.`com.lihaoyi::os-lib-watch:0.10.7`&#xA;&#xA;@ os.watch.watch(Seq(os.pwd / &#34;out&#34;), paths =&amp;gt; println(&#34;paths changed: &#34; + paths.mkString(&#34;, &#34;)))&#xA;&#xA;@ os.write(os.pwd / &#34;out/i am&#34;, &#34;cow&#34;)&#xA;&#xA;paths changed: /Users/lihaoyi/Github/Ammonite/out/i am&#xA;&#xA;@ os.move(os.pwd / &#34;out/i am&#34;, os.pwd / &#34;out/hear me&#34;)&#xA;&#xA;paths changed: /Users/lihaoyi/Github/Ammonite/out/i am,/Users/lihaoyi/Github/Ammonite/out/hear me&#xA;&#xA;@ os.remove.all(os.pwd / &#34;out/version&#34;)&#xA;&#xA;paths changed: /Users/lihaoyi/Github/Ammonite/out/version/log,/Users/lihaoyi/Github/Ammonite/out/version/meta.json,/Users/lihaoyi/Github/Ammonite/out/version&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;data-types&#34;&gt;Data Types&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;os-path&#34;&gt;&lt;code&gt;os.Path&lt;/code&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;OS-Lib uses strongly-typed data-structures to represent filesystem paths. The two basic versions are:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-path&#34;&gt;&lt;code&gt;os.Path&lt;/code&gt;&lt;/a&gt;: an absolute path, starting from the root&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-relpath&#34;&gt;&lt;code&gt;os.RelPath&lt;/code&gt;&lt;/a&gt;: a relative path, not rooted anywhere&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-subpath&#34;&gt;&lt;code&gt;os.SubPath&lt;/code&gt;&lt;/a&gt;: a sub path, without any &lt;code&gt;..&lt;/code&gt; segments, not rooted anywhere&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Generally, almost all commands take absolute &lt;code&gt;os.Path&lt;/code&gt;s. These are basically &lt;code&gt;java.nio.file.Path&lt;/code&gt;s with additional guarantees:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.Path&lt;/code&gt;s are always absolute. Relative paths are a separate type &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-relpath&#34;&gt;&lt;code&gt;os.RelPath&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.Path&lt;/code&gt;s are always canonical. You will never find &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;..&lt;/code&gt; segments in them, and never need to worry about calling &lt;code&gt;.normalize&lt;/code&gt; before operations.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Absolute paths can be created in a few ways:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// Get the process&#39; Current Working Directory. As a convention&#xA;// the directory that &#34;this&#34; code cares about (which may differ&#xA;// from the pwd) is called `wd`&#xA;val wd = os.pwd&#xA;&#xA;// A path nested inside `wd` in multiple segments&#xA;wd / &#34;folder&#34; / &#34;file&#34;&#xA;&#xA;// The RHS of `/` can have multiple segments if-and-only-if it is a literal string&#xA;wd / &#34;folder/file&#34;&#xA;&#xA;// A path starting from the root&#xA;os.root / &#34;folder/file&#34;&#xA;&#xA;// A path with spaces or other special characters&#xA;wd / &#34;My Folder/My File.txt&#34;&#xA;&#xA;// Up one level from the wd&#xA;wd / os.up&#xA;&#xA;// Up two levels from the wd&#xA;wd / os.up / os.up&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;When constructing &lt;code&gt;os.Path`s, the right-hand-side of the `/&lt;/code&gt; operator must be either a non-literal a string expression containing a single path segment or a literal string containing one-or-more path segments. If a non-literal string expression on the RHS contains multiple segments, you need to wrap the RHS in an explicit &lt;code&gt;os.RelPath(â€¦â€‹)&lt;/code&gt; or &lt;code&gt;os.SubPath(â€¦â€‹)&lt;/code&gt; constructor to tell OS-Lib how to interpret it. The single-segment limitation is intended to avoid the developer accidentally introducing &lt;a href=&#34;https://en.wikipedia.org/wiki/Directory_traversal_attack&#34;&gt;Directory Traversal Attacks&lt;/a&gt; or other related bugs when naively constructing paths out of dynamic and potentially untrusted inputs, which is not an issue for literal string since the string value is directly written in the source code and immediately visible.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;code&gt;os.pwd&lt;/code&gt; can be modified in certain scopes via the &lt;code&gt;os.dynamicPwd&lt;/code&gt; dynamic variable, but best practice is not to change it. Instead simply define a new path, e.g.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val target = os.pwd / &#34;target&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Should be sufficient for most needs.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Above, we made use of the &lt;code&gt;os.pwd&lt;/code&gt; built-in path. There are a number of Paths built into OS-Lib:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.pwd&lt;/code&gt;: The current working directory of the process. This canâ€™t be changed in Java, so if you need another path to work with the convention is to define a &lt;code&gt;wd&lt;/code&gt; variable.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.root&lt;/code&gt;: The root of the filesystem.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.home&lt;/code&gt;: The home directory of the current user.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.temp()&lt;/code&gt;/&lt;code&gt;os.temp.dir()&lt;/code&gt;: Creates a temporary file/folder and returns the path.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-relpath&#34;&gt;&lt;code&gt;os.RelPath&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;code&gt;os.RelPath&lt;/code&gt;s represent relative paths. These are basically defined as:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;class RelPath private[ops] (segments0: Array[String], val ups: Int)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The same data structure as Paths, except that they can represent a number of ups before the relative path is applied. They can be created in the following ways:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// The path &#34;folder/file&#34; in multiple segments&#xA;val rel1 = os.rel / &#34;folder&#34; / &#34;file&#34;&#xA;// RHS of `/` can have multiple segments if-and-only-if it is a literal string&#xA;val rel2 = os.rel / &#34;folder/file&#34;&#xA;&#xA;// The path &#34;file&#34;&#xA;val rel3 = os.rel / &#34;file&#34;&#xA;&#xA;// The relative difference between two paths&#xA;val target = os.pwd / &#34;target/file&#34;&#xA;assert((target.relativeTo(os.pwd)) == os.rel / &#34;target/file&#34;)&#xA;&#xA;// `up`s get resolved automatically&#xA;val minus = os.pwd.relativeTo(target)&#xA;val ups = os.up / os.up&#xA;assert(minus == ups)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;In general, very few APIs take relative paths. Their main purpose is to be combined with absolute paths in order to create new absolute paths. e.g.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val target = os.pwd / &#34;target/file&#34;&#xA;val difference = target.relativeTo(os.pwd)&#xA;val newBase = os.root / &#34;code/server&#34;&#xA;assert(newBase / difference == os.root / &#34;code/server/target/file&#34;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;code&gt;os.up&lt;/code&gt; is a relative path that comes in-built:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val target = os.root / &#34;target/file&#34;&#xA;assert(target / os.up == os.root / &#34;target&#34;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Note that all paths, both relative and absolute, are always expressed in a canonical manner:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;assert((os.root / &#34;folder/file&#34; / os.up).toString == &#34;/folder&#34;)&#xA;// not &#34;/folder/file/..&#34;&#xA;&#xA;assert((os.rel / &#34;folder/file&#34; / os.up).toString == &#34;folder&#34;)&#xA;// not &#34;folder/file/..&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;So you donâ€™t need to worry about canonicalizing your paths before comparing them for equality or otherwise manipulating them.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-subpath&#34;&gt;&lt;code&gt;os.SubPath&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;code&gt;os.SubPath&lt;/code&gt;s represent relative paths without any &lt;code&gt;..&lt;/code&gt; segments. These are basically defined as:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;class SubPath private[ops] (segments0: Array[String])&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;They can be created in the following ways:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;// The path &#34;folder/file&#34; in multiple segments&#xA;val sub1 = os.sub / &#34;folder&#34; / &#34;file&#34;&#xA;// RHS of `/` can have multiple segments if-and-only-if it is a literal string&#xA;val sub2 = os.sub / &#34;folder/file&#34;&#xA;&#xA;// The relative difference between two paths&#xA;val target = os.pwd / &#34;out/scratch/file&#34;&#xA;assert((target subRelativeTo os.pwd) == os.sub / &#34;out/scratch/file&#34;)&#xA;&#xA;// Converting os.RelPath to os.SubPath&#xA;val rel3 = os.rel / &#34;folder/file&#34;&#xA;val sub3 = rel3.asSubPath&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;&lt;code&gt;os.SubPath&lt;/code&gt;s are useful for representing paths within a particular folder or directory. You can combine them with absolute &lt;code&gt;os.Path&lt;/code&gt;s to resolve paths within them, without needing to worry about &lt;a href=&#34;https://en.wikipedia.org/wiki/Directory_traversal_attack&#34;&gt;Directory Traversal Attacks&lt;/a&gt; du to accidentally accessing paths outside the destination folder.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val target = os.pwd / &#34;target/file&#34;&#xA;val difference = target.relativeTo(os.pwd)&#xA;val newBase = os.root / &#34;code/server&#34;&#xA;assert(newBase / difference == os.root / &#34;code/server/target/file&#34;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Attempting to construct an &lt;code&gt;os.SubPath&lt;/code&gt; with &lt;code&gt;..&lt;/code&gt; segments results in an exception being thrown:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val target = os.pwd / &#34;out/scratch&#34; /&#xA;&#xA;// `up`s are not allowed in sub paths&#xA;intercept[Exception](os.pwd subRelativeTo target)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Like &lt;code&gt;os.Path&lt;/code&gt;s and &lt;code&gt;os.RelPath&lt;/code&gt;, &lt;code&gt;os.SubPath&lt;/code&gt;s are always canonicalized and can be compared for equality without worrying about different representations.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;path-operations&#34;&gt;Path Operations&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;OS-Libâ€™s paths are transparent data-structures, and you can always access the segments and ups directly. Nevertheless, OS-Lib defines a number of useful operations that handle the common cases of dealing with these paths:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;In this definition, ThisType represents the same type as the current path; e.g. a Pathâ€™s / returns a Path while a RelPathâ€™s / returns a RelPath. Similarly, you can only compare or subtract paths of the same type.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Apart from &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-relpath&#34;&gt;&lt;code&gt;os.RelPath&lt;/code&gt;&lt;/a&gt;s themselves, a number of other data structures are convertible into &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-relpath&#34;&gt;&lt;code&gt;os.RelPath&lt;/code&gt;&lt;/a&gt;s when spliced into a path using &lt;code&gt;/&lt;/code&gt;:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;String&lt;/code&gt;s&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;Symbol&lt;/code&gt;s&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;Array[T]&lt;/code&gt;s where &lt;code&gt;T&lt;/code&gt; is convertible into a RelPath&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;code&gt;Seq[T]&lt;/code&gt;s where &lt;code&gt;T&lt;/code&gt; is convertible into a RelPath&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;constructing-paths&#34;&gt;Constructing Paths&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Apart from built-ins like &lt;code&gt;os.pwd&lt;/code&gt; or &lt;code&gt;os.root&lt;/code&gt; or &lt;code&gt;os.home&lt;/code&gt;, you can also construct Paths from &lt;code&gt;String&lt;/code&gt;s, &lt;code&gt;java.io.File&lt;/code&gt;s or &lt;code&gt;java.nio.file.Path&lt;/code&gt;s:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val relStr = &#34;hello/cow/world/..&#34;&#xA;val absStr = &#34;/hello/world&#34;&#xA;&#xA;assert(&#xA;  RelPath(relStr) == &#34;hello/cow&#34;,&#xA;  // Path(...) also allows paths starting with ~,&#xA;  // which is expanded to become your home directory&#xA;  Path(absStr) == os.root / &#34;hello/world&#34;&#xA;)&#xA;&#xA;// You can also pass in java.io.File and java.nio.file.Path&#xA;// objects instead of Strings when constructing paths&#xA;val relIoFile = new java.io.File(relStr)&#xA;val absNioFile = java.nio.file.Paths.get(absStr)&#xA;&#xA;assert(&#xA;  RelPath(relIoFile) ==  &#34;hello/cow&#34;,&#xA;  Path(absNioFile) == os.root / &#34;hello/world&#34;,&#xA;  Path(relIoFile, root / &#34;base&#34;) == os.root / &#34;base/hello/cow&#34;&#xA;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Trying to construct invalid paths fails with exceptions:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val relStr = &#34;hello/..&#34;&#xA;intercept[java.lang.IllegalArgumentException]{&#xA;  Path(relStr)&#xA;}&#xA;&#xA;val absStr = &#34;/hello&#34;&#xA;intercept[java.lang.IllegalArgumentException]{&#xA;  RelPath(absStr)&#xA;}&#xA;&#xA;val tooManyUpsStr = &#34;/hello/../..&#34;&#xA;intercept[PathError.AbsolutePathOutsideRoot.type]{&#xA;  Path(tooManyUpsStr)&#xA;}&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;As you can see, attempting to parse a relative path with &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-path&#34;&gt;&lt;code&gt;os.Path&lt;/code&gt;&lt;/a&gt; or an absolute path with &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-relpath&#34;&gt;&lt;code&gt;os.RelPath&lt;/code&gt;&lt;/a&gt; throws an exception. If youâ€™re uncertain about what kind of path you are getting, you could use &lt;code&gt;BasePath&lt;/code&gt; to parse it :&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val relStr = &#34;hello/cow/world/..&#34;&#xA;val absStr = &#34;/hello/world&#34;&#xA;assert(&#xA;  FilePath(relStr) == &#34;hello/cow&#34;,&#xA;  FilePath(absStr) == os.root / &#34;hello/world&#34;&#xA;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This converts it into a &lt;code&gt;BasePath&lt;/code&gt;, which is either a &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-path&#34;&gt;&lt;code&gt;os.Path&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-relpath&#34;&gt;&lt;code&gt;os.RelPath&lt;/code&gt;&lt;/a&gt;. Itâ€™s then up to you to pattern-match on the types and decide what you want to do in each case.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;You can also pass in a second argument to &lt;code&gt;Path(..., base)&lt;/code&gt;. If the path being parsed is a relative path, this base will be used to coerce it into an absolute path:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val relStr = &#34;hello/cow/world/..&#34;&#xA;val absStr = &#34;/hello/world&#34;&#xA;val basePath: FilePath = FilePath(relStr)&#xA;assert(&#xA;  os.Path(relStr,   os.root / &#34;base&#34;) == os.root / &#34;base/hello/cow&#34;,&#xA;  os.Path(absStr,   os.root / &#34;base&#34;) == os.root / &#34;hello/world&#34;,&#xA;  os.Path(basePath, os.root / &#34;base&#34;) == os.root / &#34;base/hello/cow&#34;,&#xA;  os.Path(&#34;.&#34;, os.pwd).last != &#34;&#34;&#xA;)&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;For example, if you wanted the common behavior of converting relative paths to absolute based on your current working directory, you can pass in &lt;code&gt;os.pwd&lt;/code&gt; as the second argument to &lt;code&gt;Path(...)&lt;/code&gt;. Apart from passing in Strings or java.io.Files or java.nio.file.Paths, you can also pass in BasePaths you parsed early as a convenient way of converting it to a absolute path, if it isnâ€™t already one.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;In general, OS-Lib is very picky about the distinction between relative and absolute paths, and doesnâ€™t allow &#34;automatic&#34; conversion between them based on current-working-directory the same way many other filesystem APIs (Bash, Java, Python, â€¦â€‹) do. Even in cases where itâ€™s uncertain, e.g. youâ€™re taking user input as a String, you have to either handle both possibilities with BasePath or explicitly choose to convert relative paths to absolute using some base.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;roots-and-filesystems&#34;&gt;Roots and filesystems&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;If you are using a system that supports different roots of paths, e.g. Windows, you can use the argument of &lt;code&gt;os.root&lt;/code&gt; to specify which root you want to use. If not specified, the default root will be used (usually, C on Windows, / on Unix).&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val root = os.root(&#39;C:&#39;) / &#34;Users/me&#34;&#xA;assert(root == os.Path(&#34;C:Usersme&#34;))&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Additionally, custom filesystems can be specified by passing a &lt;code&gt;FileSystem&lt;/code&gt; to &lt;code&gt;os.root&lt;/code&gt;. This allows you to use OS-Lib with non-standard filesystems, such as jar filesystems or in-memory filesystems.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val uri = new URI(&#34;jar&#34;, Paths.get(&#34;foo.jar&#34;).toURI().toString, null);&#xA;val env = new HashMap[String, String]();&#xA;env.put(&#34;create&#34;, &#34;true&#34;);&#xA;val fs = FileSystems.newFileSystem(uri, env);&#xA;val path = os.root(&#34;/&#34;, fs) / &#34;dir&#34;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Note that the jar file system operations suchs as writing to a file are supported only on JVM 11+. Depending on the filesystem, some operations may not be supported - for example, running an &lt;code&gt;os.proc&lt;/code&gt; with pwd in a jar file wonâ€™t work. You may also meet limitations imposed by the implementations - in jar file system, the files are created only after the file system is closed. Until that, the ones created in your program are kept in memory.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;os-resourcepath&#34;&gt;&lt;code&gt;os.ResourcePath&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;In addition to manipulating paths on the filesystem, you can also manipulate &lt;code&gt;os.ResourcePath&lt;/code&gt; in order to read resources off of the Java classpath. By default, the path used to load resources is absolute, using the &lt;code&gt;Thread.currentThread().getContextClassLoader&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val contents = os.read(os.resource / &#34;test/ammonite/ops/folder/file.txt&#34;)&#xA;assert(contents.contains(&#34;file contents lols&#34;))&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;You can also pass in a classloader explicitly to the resource call:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val cl = getClass.getClassLoader&#xA;val contents2 = os.read(os.resource(cl)/ &#34;test/ammonite/ops/folder/file.txt&#34;)&#xA;assert(contents2.contains(&#34;file contents lols&#34;))&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;If you want to load resources relative to a particular class, pass in a class for the resource to be relative, or getClass to get something relative to the current class.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;val cls = classOf[test.os.Testing]&#xA;val contents = os.read(os.resource(cls) / &#34;folder/file.txt&#34;)&#xA;assert(contents.contains(&#34;file contents lols&#34;))&#xA;&#xA;val contents2 = os.read(os.resource(getClass) / &#34;folder/file.txt&#34;)&#xA;assert(contents2.contains(&#34;file contents lols&#34;))&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;In both cases, reading resources is performed as if you did not pass a leading slash into the &lt;code&gt;getResource(&#34;foo/bar&#34;)&lt;/code&gt; call. In the case of &lt;code&gt;ClassLoader#getResource&lt;/code&gt;, passing in a leading slash is never valid, and in the case of &lt;code&gt;Class#getResource&lt;/code&gt;, passing in a leading slash is equivalent to calling &lt;code&gt;getResource&lt;/code&gt; on the ClassLoader.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;OS-Lib ensures you only use the two valid cases in the API, without a leading slash, and not the two cases with a leading slash which are redundant (in the case of &lt;code&gt;Class#getResource&lt;/code&gt;, which can be replaced by &lt;code&gt;ClassLoader#getResource&lt;/code&gt;) or invalid (a leading slash with &lt;code&gt;ClassLoader#getResource&lt;/code&gt;)&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Note that you can only use &lt;code&gt;os.read&lt;/code&gt; from resource paths; you canâ€™t write to them or perform any other filesystem operations on them, since theyâ€™re not really files.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Note also that resources belong to classloaders, and you may have multiple classloaders in your application e.g. if you are running in a servlet or REPL. Make sure you use the correct classloader (or a class belonging to the correct classloader) to load the resources you want, or else it might not find them.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;os-source&#34;&gt;&lt;code&gt;os.Source&lt;/code&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Many operations in OS-Lib operate on &lt;code&gt;os.Source&lt;/code&gt;s. These represent values that can provide data which you can then use to write, transmit, etc.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;By default, the following types of values can be used where-ever &lt;code&gt;os.Source&lt;/code&gt;s are required:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Any &lt;code&gt;geny.Writable&lt;/code&gt; data type:&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;&lt;code&gt;Array[Byte]&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;&lt;code&gt;java.lang.String&lt;/code&gt; (these are treated as UTF-8)&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;&lt;code&gt;java.io.InputStream&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;java.nio.channels.SeekableByteChannel&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Any &lt;code&gt;TraversableOnce[T]&lt;/code&gt; of the above: e.g. &lt;code&gt;Seq[String]&lt;/code&gt;, &lt;code&gt;List[Array[Byte]]&lt;/code&gt;, etc.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Some operations only work on &lt;code&gt;os.SeekableSource&lt;/code&gt;, because they need the ability to seek to specific offsets in the data. Only the following types of values can be used where &lt;code&gt;os.SeekableSource&lt;/code&gt; is required:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;java.nio.channels.SeekableByteChannel&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;code&gt;os.Source&lt;/code&gt; also supports anything that implements the &lt;a href=&#34;https://github.com/com-lihaoyi/geny#writable&#34;&gt;Writable&lt;/a&gt; interface, such as &lt;a href=&#34;https://com-lihaoyi.github.io/upickle/#uJson&#34;&gt;&lt;code&gt;ujson.Value&lt;/code&gt;&lt;/a&gt;s, &lt;a href=&#34;https://com-lihaoyi.github.io/upickle&#34;&gt;uPickle&lt;/a&gt;&#39;s &lt;code&gt;upickle.default.writable&lt;/code&gt; values, or &lt;a href=&#34;https://com-lihaoyi.github.io/scalatags/&#34;&gt;Scalatags&lt;/a&gt;&#39;s &lt;code&gt;Tag&lt;/code&gt;s&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can also convert an &lt;code&gt;os.Path&lt;/code&gt; or &lt;code&gt;os.ResourcePath&lt;/code&gt; to an &lt;code&gt;os.Source&lt;/code&gt; via &lt;code&gt;.toSource&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;os-generator&#34;&gt;&lt;code&gt;os.Generator&lt;/code&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Taken from the &lt;a href=&#34;https://github.com/com-lihaoyi/geny&#34;&gt;geny&lt;/a&gt; library, &lt;code&gt;os.Generator&lt;/code&gt;s are similar to iterators except instead of providing:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;def hasNext(): Boolean&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;def next(): T&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;code&gt;os.Generator&lt;/code&gt;s provide:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;def generate(handleItem: A =&amp;gt; Generator.Action): Generator.Action&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In general, you should not notice much of a difference using &lt;code&gt;Generator&lt;/code&gt;s vs using &lt;code&gt;Iterators&lt;/code&gt;: you can use the same &lt;code&gt;.map&lt;/code&gt;/&lt;code&gt;.filter&lt;/code&gt;/&lt;code&gt;.reduce&lt;/code&gt;/etc. operations on them, and convert them to collections via the same &lt;code&gt;.toList&lt;/code&gt;/&lt;code&gt;.toArray&lt;/code&gt;/etc. conversions. The main difference is that &lt;code&gt;Generator&lt;/code&gt;s can enforce cleanup after traversal completes, so we can ensure open files are closed and resources are released without any accidental leaks.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;os-permset&#34;&gt;&lt;code&gt;os.PermSet&lt;/code&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;code&gt;os.PermSet&lt;/code&gt;s represent the filesystem permissions on a single file or folder. Anywhere an &lt;code&gt;os.PermSet&lt;/code&gt; is required, you can pass in values of these types:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;java.lang.String&lt;/code&gt;s of the form &lt;code&gt;&#34;rw-r-xrwx&#34;&lt;/code&gt;, with &lt;code&gt;r&lt;/code&gt;/&lt;code&gt;w&lt;/code&gt;/&lt;code&gt;x&lt;/code&gt; representing the permissions that are present or dashes &lt;code&gt;-&lt;/code&gt; representing the permissions which are absent&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Octal &lt;code&gt;Int&lt;/code&gt;s of the form &lt;code&gt;Integer.parseInt(&#34;777&#34;, 8)&lt;/code&gt;, matching the octal &lt;code&gt;755&lt;/code&gt; or &lt;code&gt;666&lt;/code&gt; syntax used on the command line&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;Set[PosixFilePermission]&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In places where &lt;code&gt;os.PermSet&lt;/code&gt;s are returned to you, you can then extract the string, int or set representations of the &lt;code&gt;os.PermSet&lt;/code&gt; via:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;perms.toInt(): Int&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;perms.toString(): String&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;perms.value: Set[PosixFilePermission]&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;0-10-7&#34;&gt;0.10.7&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Allow multi-segment paths segments for literals &lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/pull/297&#34; class=&#34;bare&#34;&gt;https://github.com/com-lihaoyi/os-lib/pull/297&lt;/a&gt;: You can now write &lt;code&gt;os.pwd / &#34;foo/bar/qux&#34;&lt;/code&gt; rather than &lt;code&gt;os.pwd / &#34;foo&#34; / &#34;bar&#34; / &#34;qux&#34;&lt;/code&gt;. Note that this is only allowed for string literals, and non-literal path segments still need to be wrapped e.g. &lt;code&gt;def myString = &#34;foo/bar/qux&#34;; os.pwd / os.SubPath(myString)&lt;/code&gt; for security and safety purposes&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;0-10-6&#34;&gt;0.10.6&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Make &lt;code&gt;os.pwd&lt;/code&gt; modifiable via the &lt;code&gt;os.dynamicPwd&lt;/code&gt; dynamic variable &lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/pull/298&#34; class=&#34;bare&#34;&gt;https://github.com/com-lihaoyi/os-lib/pull/298&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;0-10-5&#34;&gt;0.10.5&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Introduce &lt;code&gt;os.SubProcess.env&lt;/code&gt; &lt;code&gt;DynamicVariable&lt;/code&gt; to override default &lt;code&gt;env&lt;/code&gt; (&lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/pull/295&#34; class=&#34;bare&#34;&gt;https://github.com/com-lihaoyi/os-lib/pull/295&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;0-10-4&#34;&gt;0.10.4&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add a lightweight syntax for &lt;code&gt;os.call()&lt;/code&gt; and &lt;code&gt;os.spawn&lt;/code&gt; APIs (&lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/pull/292&#34; class=&#34;bare&#34;&gt;https://github.com/com-lihaoyi/os-lib/pull/292&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add a configurable grace period when subprocesses timeout and have to be terminated to give a chance for shutdown logic to run (&lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/pull/286&#34; class=&#34;bare&#34;&gt;https://github.com/com-lihaoyi/os-lib/pull/286&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;0-10-3&#34;&gt;0.10.3&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.Inherit&lt;/code&gt; now can be redirected on a threadlocal basis via &lt;code&gt;os.Inherit.in&lt;/code&gt;, &lt;code&gt;.out&lt;/code&gt;, or &lt;code&gt;.err&lt;/code&gt;. &lt;code&gt;os.InheritRaw&lt;/code&gt; is available if you do not want the redirects to take effect&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;0-10-2&#34;&gt;0.10.2&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Support &lt;code&gt;os.proc&lt;/code&gt; on Scala Native (&lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/pull/257&#34; class=&#34;bare&#34;&gt;https://github.com/com-lihaoyi/os-lib/pull/257&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;0-10-1&#34;&gt;0.10.1&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fix &lt;code&gt;os.copy&lt;/code&gt; and &lt;code&gt;os.move&lt;/code&gt; directories to root (#267)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;0-10-0&#34;&gt;0.10.0&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Support for Scala-Native 0.5.0&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Dropped support for Scala 2.11.x&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Minimum version of Scala 3 increased to 3.3.1&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;0-9-3&#34;&gt;0.9.3 - 2024-01-01&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fix &lt;code&gt;os.watch&lt;/code&gt; on Windows (#236)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fix propagateEnv = false to not propagate env (#238)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Make os.home a def (#239)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;0-9-2&#34;&gt;0.9.2 - 2023-11-05&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Added new convenience API to create pipes between processes with &lt;code&gt;.pipeTo&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fixed issue with leading &lt;code&gt;..&lt;/code&gt; / &lt;code&gt;os.up&lt;/code&gt; in path segments created from a &lt;code&gt;Seq&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fixed Windows-specific issues with relative paths with leading (back)slashes&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Removed some internal use of deprecated API&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;ScalaDoc now maps some external references to their online sites&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Dependency updates: sourcecode 0.3.1&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Tooling updates: acyclic 0.3.9, Mill 0.11.5, mill-mima 0.0.24, mill-vcs-version 0.4.0, scalafmt 3.7.15&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;0-9-1&#34;&gt;0.9.1 - 2023-03-07&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Refined return types when constructing paths with &lt;code&gt;/&lt;/code&gt; and get rid of long &lt;code&gt;ThisType#ThisType&lt;/code&gt; cascades.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Added a new &lt;code&gt;PathConvertible&lt;/code&gt; to support `URI`s when constructing paths.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;0-9-0&#34;&gt;0.9.0 - 2022-11-28&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.proc&lt;/code&gt; now also supports &lt;code&gt;CharSequence(s)&lt;/code&gt; as &lt;code&gt;Shellable&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ProcessResult&lt;/code&gt; now also contains the actual used command&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fixed handling of &lt;code&gt;atime&lt;/code&gt; and &lt;code&gt;ctime&lt;/code&gt; in &lt;code&gt;StatInfo&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Deleted &lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt; from Scala Native jars, as it is now provided by Scala Native 0.4 itself&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Enabled MiMa checks to CI setup and officially support early semantic versioning since this release&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Documentation improvements&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;older-releases&#34;&gt;Older releases&lt;/h3&gt; &#xA;   &lt;h4 id=&#34;0-8-1-2022-01-31&#34; class=&#34;discrete&#34;&gt;0.8.1 - 2022-01-31&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Added support for Scala Native on Scala 3&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-8-0-2021-12-11&#34; class=&#34;discrete&#34;&gt;0.8.0 - 2021-12-11&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Avoid throwing an exception when sorting identical paths &lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/pull/90&#34;&gt;#90&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Make &lt;code&gt;os.remove&lt;/code&gt; behave more like &lt;code&gt;Files.deleteIfExists&lt;/code&gt; &lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/pull/89&#34;&gt;#89&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Make &lt;code&gt;.ext&lt;/code&gt; on empty paths return &lt;code&gt;&#34;&#34;&lt;/code&gt; rather than crashing &lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/pull/87&#34;&gt;#87&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-7-8-2021-05-27&#34; class=&#34;discrete&#34;&gt;0.7.8 - 2021-05-27&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Restored binary compatibility in &lt;code&gt;os.copy&lt;/code&gt; and &lt;code&gt;os.copy.into&lt;/code&gt; to os-lib versions before 0.7.5&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-7-7-2021-05-14&#34; class=&#34;discrete&#34;&gt;0.7.7 - 2021-05-14&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add support for Scala 3.0.0&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-7-6-2021-04-28&#34; class=&#34;discrete&#34;&gt;0.7.6 - 2021-04-28&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add support for Scala 3.0.0-RC3&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-7-5-2021-04-21&#34; class=&#34;discrete&#34;&gt;0.7.5 - 2021-04-21&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Re-added support for Scala 2.11&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Added new option &lt;code&gt;mergeFolders&lt;/code&gt; to &lt;code&gt;os.copy&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;os.copy now honors &lt;code&gt;followLinks&lt;/code&gt; when copying symbolic links to directories&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-7-4&#34; class=&#34;discrete&#34;&gt;0.7.4&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add support for Scala 3.0.0-RC2&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-7-3&#34; class=&#34;discrete&#34;&gt;0.7.3&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add support for Scala 3.0.0-RC1&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Migration of the CI system from Travis CI to GitHub Actions&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-7-2&#34; class=&#34;discrete&#34;&gt;0.7.2&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add support for Scala 3.0.0-M3&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-7-1&#34; class=&#34;discrete&#34;&gt;0.7.1&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Improve performance of &lt;code&gt;os.write&lt;/code&gt; by buffering output stream to files&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-6-2&#34; class=&#34;discrete&#34;&gt;0.6.2&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Moved the &lt;code&gt;os.Bytes&lt;/code&gt;, &lt;code&gt;os.StreamValue&lt;/code&gt; (now named &lt;code&gt;ByteData&lt;/code&gt;) interfaces into &lt;code&gt;geny&lt;/code&gt; package, for sharing with Requests-Scala&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add &lt;code&gt;os.read.stream&lt;/code&gt; function, that returns a &lt;code&gt;geny.Readable&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-5-0&#34; class=&#34;discrete&#34;&gt;0.5.0&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.Source&lt;/code&gt; now supports any data type that is &lt;code&gt;geny.Writable&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-4-2&#34; class=&#34;discrete&#34;&gt;0.4.2&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Added a new &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-subpath&#34;&gt;&lt;code&gt;os.SubPath&lt;/code&gt;&lt;/a&gt; data type, for safer handling of sub-paths within a directory.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Removed &lt;code&gt;os.proc.stream&lt;/code&gt;, since you can now customize the &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt; of &lt;code&gt;os.proc.call&lt;/code&gt; to handle output in a streaming fashion&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;stderr&lt;/code&gt; in &lt;code&gt;os.proc.call&lt;/code&gt; and &lt;code&gt;os.proc.spawn&lt;/code&gt; defaults to &lt;code&gt;os.Inherit&lt;/code&gt; rather than &lt;code&gt;os.Pipe&lt;/code&gt;; pass in &lt;code&gt;stderr = os.Pipe&lt;/code&gt; explicitly to get back the old behavior&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fix timeout not working with &lt;code&gt;os.proc.call&lt;/code&gt; &lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/issues/27&#34;&gt;#27&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Attempt to fix crasher accessing &lt;code&gt;os.pwd&lt;/code&gt; &lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/issues/24&#34;&gt;#24&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Added an &lt;a href=&#34;https://raw.githubusercontent.com/com-lihaoyi/os-lib/main/#os-watch-watch&#34;&gt;os-lib-watch&lt;/a&gt; package, which can be used to efficiently recursively watch folders for updates &lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/issues/23&#34;&gt;#23&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.stat&lt;/code&gt; no longer provides POSIX owner/permissions related metadata by default &lt;a href=&#34;https://github.com/com-lihaoyi/os-lib/issues/15&#34;&gt;#15&lt;/a&gt;, use &lt;code&gt;os.stat.posix&lt;/code&gt; to fetch that separately&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.stat.full&lt;/code&gt; has been superseded by &lt;code&gt;os.stat&lt;/code&gt; and &lt;code&gt;os.stat.posix&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Removed &lt;code&gt;os.BasicStatInfo&lt;/code&gt;, which has been superseded by &lt;code&gt;os.StatInfo&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-3-0&#34; class=&#34;discrete&#34;&gt;0.3.0&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Support for Scala 2.13.0 final&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-2-8&#34; class=&#34;discrete&#34;&gt;0.2.8&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.ProcessOutput&lt;/code&gt; trait is no longer sealed&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-2-7&#34; class=&#34;discrete&#34;&gt;0.2.7&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Narrow return type of &lt;code&gt;readLink.absolute&lt;/code&gt; from &lt;code&gt;FilePath&lt;/code&gt; to &lt;code&gt;Path&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Fix handling of standaline ` ` in &lt;code&gt;os.SubProcess#stdout.readLine&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-2-6&#34; class=&#34;discrete&#34;&gt;0.2.6&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Remove &lt;code&gt;os.StatInfo#name&lt;/code&gt;, &lt;code&gt;os.BasicStatInfo#name&lt;/code&gt; and &lt;code&gt;os.FullStatInfo#name&lt;/code&gt;, since it is just the last path segment of the stat call and doesnâ€™t properly reflect the actual name of the file on disk (e.g. on case-insensitive filesystems)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.walk.attrs&lt;/code&gt; and &lt;code&gt;os.walk.stream.attrs&lt;/code&gt; now provides a &lt;code&gt;os.BasicFileInfo&lt;/code&gt; to the &lt;code&gt;skip&lt;/code&gt; predicate.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add &lt;code&gt;os.BasePath#baseName&lt;/code&gt;, which returns the section of the path before the &lt;code&gt;os.BasePath#ext&lt;/code&gt; extension.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-2-5&#34; class=&#34;discrete&#34;&gt;0.2.5&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;New &lt;code&gt;os.readLink&lt;/code&gt;/&lt;code&gt;os.readLink.absolute&lt;/code&gt; methods to read the contents of symbolic links without dereferencing them.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;New &lt;code&gt;os.read.chunked(p: Path, chunkSize: Int): os.Generator[(Array[Byte], Int)]&lt;/code&gt; method for conveniently iterating over chunks of a file&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;New &lt;code&gt;os.truncate(p: Path, size: Int)&lt;/code&gt; method&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;SubProcess&lt;/code&gt; streams now implement &lt;code&gt;java.io.DataInput&lt;/code&gt;/&lt;code&gt;DataOutput&lt;/code&gt; for convenience&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;SubProcess&lt;/code&gt; streams are now synchronized for thread-safety&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.write&lt;/code&gt; now has &lt;code&gt;createFolders&lt;/code&gt; default to &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.Generator&lt;/code&gt; now has a &lt;code&gt;.withFilter&lt;/code&gt; method&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.symlink&lt;/code&gt; now allows relative paths&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.remove.all&lt;/code&gt; now properly removes broken symlinks, and no longer recurses into the symlinkâ€™s contents&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.SubProcess&lt;/code&gt; now implements &lt;code&gt;java.lang.AutoCloseable&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;New &lt;code&gt;write.channel&lt;/code&gt; counterpart to &lt;code&gt;read.channel&lt;/code&gt; (and &lt;code&gt;write.over.channel&lt;/code&gt; and &lt;code&gt;write.append.channel&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.PermSet&lt;/code&gt; is now modelled internally as a boxed &lt;code&gt;Int&lt;/code&gt; for performance, and is a case class with proper &lt;code&gt;equals&lt;/code&gt;/&lt;code&gt;hashcode&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;os.read.bytes(arg: Path, offset: Long, count: Int)&lt;/code&gt; no longer leaks open file channels&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Reversed the order of arguments in &lt;code&gt;os.symlink&lt;/code&gt; and &lt;code&gt;os.hardlink&lt;/code&gt;, to match the order of the underlying java NIO functions.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-2-2&#34; class=&#34;discrete&#34;&gt;0.2.2&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Allow chaining of multiple subprocesses &lt;code&gt;stdin&lt;/code&gt;/&lt;code&gt;stdout&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;h4 id=&#34;0-2-0&#34; class=&#34;discrete&#34;&gt;0.2.0&lt;/h4&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;First release&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>