<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-29T01:56:06Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>firesim/icenet</title>
    <updated>2022-06-29T01:56:06Z</updated>
    <id>tag:github.com,2022-06-29:/firesim/icenet</id>
    <link href="https://github.com/firesim/icenet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Network components (NIC, Switch) for FireBox&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>fiatjaf/cliche</title>
    <updated>2022-06-29T01:56:06Z</updated>
    <id>tag:github.com,2022-06-29:/fiatjaf/cliche</id>
    <link href="https://github.com/fiatjaf/cliche" rel="alternate"></link>
    <summary type="html">&lt;p&gt;immortan lightning node daemon&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Client for Lightning-compatible Lite Channels aka &#34;Hosted&#34;&lt;/h1&gt; &#xA;&lt;p&gt;This is an amazing piece of software, still work-in-progress, based on &lt;a href=&#34;https://github.com/fiatjaf/immortan&#34;&gt;IMMORTAN&lt;/a&gt;, that can do Lightning things, it is a &#34;lite node&#34;, as we may call.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Grab a jar from the &lt;a href=&#34;https://github.com/fiatjaf/cliche/releases&#34;&gt;releases page&lt;/a&gt; and run it with &lt;code&gt;java -jar cliche.jar&lt;/code&gt;. This will use &lt;code&gt;~/.config/cliche&lt;/code&gt; as your data directory and create a SQLite database there.&lt;/p&gt; &#xA;&lt;p&gt;To use a different directory do &lt;code&gt;java -Dcliche.datadir=/my/other/directory -jar cliche.jar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In that directory you can have a file called &lt;code&gt;cliche.conf&lt;/code&gt; that can have the same options that we have specified on &lt;a href=&#34;https://github.com/fiatjaf/cliche/raw/master/src/main/resources/reference.conf&#34;&gt;reference.conf&lt;/a&gt;. The settings will default to the ones on &lt;code&gt;reference.conf&lt;/code&gt;. You can also specify the settings as flags like the &lt;code&gt;cliche.datadir&lt;/code&gt; above and these will take precedence even over &lt;code&gt;cliche.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running the native image (no JVM required)&lt;/h3&gt; &#xA;&lt;p&gt;Download the native image from the &lt;a href=&#34;https://github.com/fiatjaf/cliche/releases&#34;&gt;releases page&lt;/a&gt;, call &lt;code&gt;chmod +x&lt;/code&gt; on it and run it with &lt;code&gt;./cliche&lt;/code&gt;. All the rest is the same as above except it doesn&#39;t require a Java Virtual Machine at all (also starts much faster and who knows, maybe it&#39;s faster and leaner too but that remains to be proven).&lt;/p&gt; &#xA;&lt;p&gt;To pass options just do &lt;code&gt;./cliche -Dcliche.datadir=etc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cliche&lt;/code&gt; can be used either via direct communication via STDIN with responses via STDOUT or through a websocket (that is hardcoded to listen at &lt;code&gt;ws://127.0.0.1:12000&lt;/code&gt;). Both interfaces accept either CLI-style commands or JSON-RPC.&lt;/p&gt; &#xA;&lt;p&gt;This is an example session with some commands called and asynchronous events being received:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~&amp;gt; ./cliche&#xA;# initial parameters&#xA;# configs: network=mainnet json.compact=false&#xA;# setting up database&#xA;# setting up pathfinder&#xA;# instantiating channel master&#xA;# instantiating electrum actors&#xA;# loading onchain wallets&#xA;# start electrum, fee rate, fiat rate listeners&#xA;# is operational: true&#xA;# listening for outgoing payments&#xA;# listening for incoming payments&#xA;# waiting for commands&#xA;{&#xA;  &#34;event&#34;:&#34;ready&#34;&#xA;}&#xA;get-info&#xA;{&#xA;  &#34;id&#34;:&#34;&#34;,&#xA;  &#34;result&#34;:{&#xA;    &#34;keys&#34;:{&#xA;      &#34;pub&#34;:&#34;0346e3ba6740af014a12536b063bf8815b3609e95d25a8f800e9af0cb0f7ac318e&#34;,&#xA;      &#34;priv&#34;:&#34;7d1ad0b8fd79e24b5e54656ccfb0ccdd4965a9cacc32df0f1b6aae89ff833b31&#34;,&#xA;      &#34;mnemonics&#34;:&#34;vendor doll ritual dune aisle depart trial dinosaur tilt kick stairs forest&#34;&#xA;    },&#xA;    &#34;block_height&#34;:730099,&#xA;    &#34;wallets&#34;:[{&#xA;      &#34;label&#34;:&#34;Bitcoin&#34;,&#xA;      &#34;balance&#34;:0&#xA;    }],&#xA;    &#34;channels&#34;:[{&#xA;      &#34;id&#34;:&#34;0b703fcce268709197a5cfdeee87a9c8aa4bb9ba2982e35e35ebbf4cb0cf469d&#34;,&#xA;      &#34;balance&#34;:10990&#xA;    }],&#xA;    &#34;known_channels&#34;:{&#xA;      &#34;normal&#34;:78886,&#xA;      &#34;hosted&#34;:1&#xA;    },&#xA;    &#34;outgoing_payments&#34;:[],&#xA;    &#34;fiat_rates&#34;:{&#xA;      &#34;usd&#34;:46571.969&#xA;    },&#xA;    &#34;fee_rates&#34;:{&#xA;      &#34;1&#34;:2916,&#xA;      &#34;10&#34;:1162,&#xA;      &#34;100&#34;:750&#xA;    }&#xA;  }&#xA;}&#xA;create-invoice --msatoshi 12000 --description hello&#xA;{&#xA;  &#34;id&#34;:&#34;&#34;,&#xA;  &#34;result&#34;:{&#xA;    &#34;invoice&#34;:&#34;lnbc120n1p3ys2qgpp5lftl0s00d8y68re249gz86s7mmct4r0vl3p4yhvxwaexs5m3y9dsdqgya6&#xA;xs6tnsp5elpt5dklw9wd8l0g8c5xkky6y6jayc3ar5vfdeejeyhvhjdluggqxqy9gcqcqzys9qrsgqrzjqd98kxkpyw0&#xA;l9tyy8r8q57k7zpy9zjmh6sez752wj6gcumqnj3yxrxwuy87r6hvpnuqqqqqqqqqqqeqqjqq7wrpaz4dezv92uw7jfgt&#xA;5aphq7c5y4rz24756nfzr63wskwhze4af54duph05jh6ycvwadjca5v5y6aucgf697x86fgnj68gmshqkqpuqsenv&#34;,&#xA;    &#34;msatoshi&#34;:12000,&#xA;    &#34;payment_hash&#34;:&#34;fa57f7c1ef69c9a38f2aa95023ea1edef0ba8decfc43525d867772685371215b&#34;,&#xA;    &#34;hints_count&#34;:1&#xA;  }&#xA;}&#xA;{&#xA;  &#34;method&#34;:&#34;payment_received&#34;,&#xA;  &#34;params&#34;:{&#xA;    &#34;preimage&#34;:&#34;51a012f6b18360ed65c3960ebb17ab84120d022768ffb887e82e56463bc729c0&#34;,&#xA;    &#34;msatoshi&#34;:12000,&#xA;    &#34;payment_hash&#34;:&#34;fa57f7c1ef69c9a38f2aa95023ea1edef0ba8decfc43525d867772685371215b&#34;&#xA;  }&#xA;}&#xA;pay-invoice --invoice lnbc120n1p3ys2znpp5ecudgkjpffs9unvcp2pxws3gjs9sm5u78y340cns330vdtn3req&#xA;sdpuve5kzar2v9nr5gpqw35xjueqd9ejqctwypjhsar9wfhxzmpqd9h8vmmfvdjssp5tlzrfn3slaqude9wvl20cn9zm&#xA;38auzj8cygpyuplr4g3297skalsxqy9gcqcqzys9qrsgqrzjqtx3k77yrrav9hye7zar2rtqlfkytl094dsp0ms5majz&#xA;th6gt7ca6uhdkxl983uywgqqqqlgqqqvx5qqjqrzjqd98kxkpyw0l9tyy8r8q57k7zpy9zjmh6sez752wj6gcumqnj3y&#xA;xzhdsmg6qq56utgqqqqqqqqqqqeqqjqurvsq6w7pjse26vyuxta4d9e0w03g2tw3yajks73parppz3dj3f8f73lp7apm&#xA;9pduzc7dhaaelqa7rhczz8359trltwt9930jg3z5ccqn3tq4y&#xA;{&#xA;  &#34;id&#34;:&#34;&#34;,&#xA;  &#34;result&#34;:{&#xA;    &#34;sent&#34;:true,&#xA;    &#34;payee&#34;:&#34;022c43af2ce577c4b95205cc4a1f3746737eb2cc133bf381d5a165e2c759121c33&#34;,&#xA;    &#34;fee_reserve&#34;:10000,&#xA;    &#34;payment_hash&#34;:&#34;ce38d45a414a605e4d980a82674228940b0dd39e392357e2708c5ec6ae711e41&#34;&#xA;  }&#xA;}&#xA;{&#xA;  &#34;method&#34;:&#34;payment_succeeded&#34;,&#xA;  &#34;params&#34;:{&#xA;    &#34;payment_hash&#34;:&#34;ce38d45a414a605e4d980a82674228940b0dd39e392357e2708c5ec6ae711e41&#34;,&#xA;    &#34;fee_msatoshi&#34;:1,&#xA;    &#34;msatoshi&#34;:12001,&#xA;    &#34;preimage&#34;:&#34;0000001124019af4833f82681916f6948e31a4408e53c6427944b4f8dea74670&#34;,&#xA;    &#34;parts&#34;:1&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same methods can be called either with this CLI-like format or with JSON-RPC, like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;id&#34;:&#34;x&#34;,&#34;method&#34;:&#34;create-invoice&#34;,&#34;params&#34;:{&#34;msatoshi&#34;:164000}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Casual Usage&lt;/h2&gt; &#xA;&lt;p&gt;For casual usage you&#39;ll want the CLI-style commands format, so you can just type &lt;code&gt;create-invoice --msatoshi 100000 --description test&lt;/code&gt;, for example, and get a response in your terminal.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The STDIN/STDOUT interface works best if you&#39;re just running &lt;code&gt;cliche&lt;/code&gt; in a terminal. In that case you can just use that same terminal window to execute commands.&lt;/li&gt; &#xA; &lt;li&gt;The websocket interface works fine too, specially if &lt;code&gt;cliche&lt;/code&gt; is running as a service or as a subprocess somewhere else, in that case you can use a CLI tool like &lt;a href=&#34;https://github.com/vi/websocat&#34;&gt;&lt;code&gt;websocat&lt;/code&gt;&lt;/a&gt;, call &lt;code&gt;websocat ws://127.0.0.1:12000&lt;/code&gt; then start typing commands.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Programmatic Usage&lt;/h2&gt; &#xA;&lt;p&gt;For programmatic usage you&#39;ll want the JSON-RPC format so you can distinguish responses by their JSON-RPC ids.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The STDIN/STDOUT interface can be used if a different program (i.e. your Lightning-powered application) actually starts &lt;code&gt;cliche&lt;/code&gt; as a subprocess, then proceeds to write commands to its STDIN and listen to its STDOUT for responses and event notifications. See &lt;a href=&#34;https://github.com/fiatjaf/go-cliche&#34;&gt;go-cliche&lt;/a&gt; for a library that does that.&lt;/li&gt; &#xA; &lt;li&gt;The websocket interface can be used too if &lt;code&gt;cliche&lt;/code&gt; is running as a standalone service -- for example, by systemd, or inside a container. In that case your application just needs to open a websocket connection to &lt;code&gt;ws://127.0.0.1&lt;/code&gt; and start sending commands and listening for responses and event notifications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is intended to be started by a different program and methods to be called by sending data over STDIN and responses from STDOUT.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get-info&lt;/code&gt;, params: none&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;request-hc&lt;/code&gt;, params: &lt;code&gt;pubkey&lt;/code&gt; (string), &lt;code&gt;host&lt;/code&gt; (string), &lt;code&gt;port&lt;/code&gt; (number)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create-invoice&lt;/code&gt;, params: &lt;code&gt;msatoshi&lt;/code&gt; (number, optional), &lt;code&gt;description&lt;/code&gt; (string, optional), &lt;code&gt;description_hash&lt;/code&gt; (string, optional), &lt;code&gt;preimage&lt;/code&gt; (string, optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pay-invoice&lt;/code&gt;, params: &lt;code&gt;invoice&lt;/code&gt; (string), &lt;code&gt;msatoshi&lt;/code&gt; (number, optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;check-payment&lt;/code&gt; (works for both incoming and outgoing payments), params: &lt;code&gt;hash&lt;/code&gt; (string)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list-payments&lt;/code&gt;, params: &lt;code&gt;count&lt;/code&gt; (optional, int)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;accept-override&lt;/code&gt;, params: &lt;code&gt;channel-id&lt;/code&gt; (string)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Notifications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ready&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;payment_succeeded&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;payment_failed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;payment_received&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building and development&lt;/h2&gt; &#xA;&lt;p&gt;For development you can just do &lt;code&gt;sbt run&lt;/code&gt;, and to compile a fat jar that later can be run with just &lt;code&gt;java -jar&lt;/code&gt; do &lt;code&gt;sbt assembly&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your &lt;code&gt;build.sbt&lt;/code&gt; happen to have an Immortan version ending with &lt;code&gt;-SNAPSHOT&lt;/code&gt; that means you either have to build Immortan and publish it locally using that version (&lt;code&gt;sbt publishLocal&lt;/code&gt; on Immortan repository) or you can change to a non-snapshot version. Pick one from &lt;a href=&#34;https://repo1.maven.org/maven2/com/fiatjaf/immortan_2.13/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building the GraalVM Native Image&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download GraalVM 22.0.0.3, here I used java11-linux version from &lt;a href=&#34;https://github.com/gluonhq/graal/releases/tag/gluon-22.0.0.3-Final&#34;&gt;release 22.0.0.3&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Set the environment variable &lt;code&gt;GRAALVM_HOME&lt;/code&gt; to the directory where you unzipped that;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;sbt nativeImage&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;(If something big changes then it might be necessary to run the native image agent again. In that case it might be wise to edit the &lt;code&gt;Main.scala&lt;/code&gt; block guarded by the &lt;code&gt;if (Config.nativeImageAgent)&lt;/code&gt; condition to make sure the most important codepaths are touched during the agent run, then run &lt;code&gt;sbt nativeImageRunAgent&lt;/code&gt; and then &lt;code&gt;sbt nativeImage&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;h2&gt;Uses&lt;/h2&gt; &#xA;&lt;p&gt;This is a list of projects using &lt;code&gt;cliche&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fiatjaf/lntxbot&#34;&gt;@lntxbot&lt;/a&gt;, a Telegram bot that does Lightning tips and payments&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lnbits/infinity&#34;&gt;LNbits Infinity&lt;/a&gt;, a multipurpose extensible web Lightning Wallet provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lnbits/relampago&#34;&gt;relampago&lt;/a&gt;, a Golang library for talking to any kind of Lightning backend&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wiringbits/scala-js-games</title>
    <updated>2022-06-29T01:56:06Z</updated>
    <id>tag:github.com,2022-06-29:/wiringbits/scala-js-games</id>
    <link href="https://github.com/wiringbits/scala-js-games" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple games ported to Scala.js (Scala 3)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scala.js Games (Scala 3)&lt;/h1&gt; &#xA;&lt;p&gt;This is a collection of games ported from Scala 2 to Scala.js (Scala 3): the &lt;a href=&#34;https://github.com/wiringbits/scala-js-games&#34;&gt;source&lt;/a&gt; for each game is written in Scala, and &lt;a href=&#34;https://scala-js.org&#34;&gt;Scala.js&lt;/a&gt; cross compiled to run in the browser targeting the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/HTML/Canvas&#34;&gt;HTML5 Canvas&lt;/a&gt;. The original games can be found &lt;a href=&#34;https://github.com/lihaoyi/scala-js-games&#34;&gt;here&lt;/a&gt; and targeting Scala 2.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scalajs-games.wiringbits.net&#34;&gt;Live demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The games are, in order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;b&gt;Asteroids&lt;/b&gt;: shoot down the asteroid swarms and avoid getting hit!&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;Astrolander&lt;/b&gt;: bring your lander to a a gentle landing on flat ground before you run out of fuel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;Snake&lt;/b&gt;: eat apples to grow long and don&#39;t crash into walls!&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;Pong&lt;/b&gt;: outsmart your AI opponent to get the ball past his paddle (right) to score points!&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;Brick&lt;/b&gt;: use your paddle to bounce the ball up, destroying all the bricks before you run out of balls.&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;Tetris&lt;/b&gt;: collect points by clearing rows and don&#39;t let the screen fill with blocks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt; The controls are generally up-down-left-right and spacebar; they aren&#39;t very complex games. Click on a game to start playing and click somewhere else to pause it. &lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://sdkman.io&#34;&gt;sdkman&lt;/a&gt; - or, make sure to pick the correct java version (see &lt;a href=&#34;https://raw.githubusercontent.com/wiringbits/scala-js-games/master/.sdkmanrc&#34;&gt;.sdkmanrc&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt; - or, make sure to pick the correct node version (see &lt;a href=&#34;https://raw.githubusercontent.com/wiringbits/scala-js-games/master/.nvmrc&#34;&gt;.nvmrc&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clone the repo.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;sbt fastLinkJS&lt;/code&gt; (just to make sure the app compiles).&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install the js dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run dev&lt;/code&gt; to launch the dev server, then, open &lt;code&gt;http://localhost:3000&lt;/code&gt; to load the app.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run build&lt;/code&gt; to prepare the production build.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>