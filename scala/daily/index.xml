<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-03T01:36:38Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cs-au-dk/TIP</title>
    <updated>2024-09-03T01:36:38Z</updated>
    <id>tag:github.com,2024-09-03:/cs-au-dk/TIP</id>
    <link href="https://github.com/cs-au-dk/TIP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Static program analysis for TIP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TIP&lt;/h1&gt; &#xA;&lt;p&gt;TIP is a tiny imperative programming language aimed at teaching the fundamental concepts of static program analysis. This code accompanies the lecture notes on &lt;a href=&#34;http://cs.au.dk/~amoeller/spa/&#34;&gt;Static Program Analysis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 8 (or newer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.scala-lang.org/download/&#34;&gt;Scala 2.12&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We suggest you to use IntelliJ for working on TIP, but all the following options are viable.&lt;/p&gt; &#xA;&lt;h3&gt;IntelliJ IDEA&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the Scala plugin in IntelliJ. (Follow the instructions on &lt;a href=&#34;https://www.jetbrains.com/help/idea/installing-updating-and-uninstalling-repository-plugins.html&#34;&gt;how to install IntelliJ plugins&lt;/a&gt;, search for &#34;Scala&#34; in the plugins menu.)&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal, navigate to the directory where you want to store the TIP project.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git clone https://github.com/cs-au-dk/TIP.git tip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In IntelliJ, click File -&amp;gt; New -&amp;gt; Project from Existing Sources..., choose your new &#39;tip&#39; directory, click OK, choose &#39;Import project from external model&#39;, then &#39;sbt&#39; and &#39;Next&#39;.&lt;/li&gt; &#xA; &lt;li&gt;Select a &#39;Project JDK&#39; (1.8 or newer), and make sure &#39;builds&#39; is enabled under &#39;sbt shell&#34;, &#39;use for&#39; before clicking &#39;Finish&#39;.&lt;/li&gt; &#xA; &lt;li&gt;In the IntelliJ Project overview, move the contents of &#39;ideafiles&#39; into &#39;.idea&#39;, overwriting the existing files.&lt;/li&gt; &#xA; &lt;li&gt;Now reload the project by clicking File -&amp;gt; Invalidate Caches / Restart... -&amp;gt; Just Restart. (Yes, this step is necessary, because of a bug in IntelliJ.)&lt;/li&gt; &#xA; &lt;li&gt;Right-click on &lt;code&gt;Tip.scala&lt;/code&gt; in &lt;code&gt;src/tip&lt;/code&gt;, then select &#34;Run &#39;Tip&#39;&#34;. To supply arguments, use Run... -&amp;gt; Edit Configurations in the Run menu.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;IntelliJ Scala bugs&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important: if you experience spurious type errors reported by IntelliJ for code involving Scala implicits, try disabling type-aware highlighting&lt;/strong&gt; by clicking on the small &lt;code&gt;[T]&lt;/code&gt; icon on the bottom right corner of the window.&lt;/p&gt; &#xA;&lt;h4&gt;IntelliJ performance&lt;/h4&gt; &#xA;&lt;p&gt;If your IntelliJ has high-CPU and high-memory peaks while editing, the following tweaks might be useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Disable type-aware highlighting by clicking on the small &lt;code&gt;[T]&lt;/code&gt; icon on the bottom right corner of the window.&lt;/li&gt; &#xA; &lt;li&gt;Go to Help -&amp;gt; Edit Custom VM Options and increase the JVM memory at least with the following values:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;-Xms500m -Xmx1500m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If still nothing works, try File -&amp;gt; Power Save Mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;IntelliJ Import optimization&lt;/h4&gt; &#xA;&lt;p&gt;IntelliJ offers an option to optimize imports upon commit. We suggest not to use that feature, as it may remove needed imports thereby breaking compilation.&lt;/p&gt; &#xA;&lt;h3&gt;Eclipse&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check that you have installed the &lt;a href=&#34;http://scala-ide.org/&#34;&gt;scala-plugin&lt;/a&gt; for Eclipse.&lt;/li&gt; &#xA; &lt;li&gt;To run TIP from within Eclipse, feed the &lt;a href=&#34;https://raw.githubusercontent.com/cs-au-dk/TIP/master/#tipcmd&#34;&gt;arguments&lt;/a&gt; into the Run Arguments dialog.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Working from the command-line&lt;/h3&gt; &#xA;&lt;p&gt;A wrapper command &lt;code&gt;tip&lt;/code&gt; (&lt;code&gt;tip.bat&lt;/code&gt; for Windows) is provided to compile and run TIP with the given arguments.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./tip -run examples/fib.tip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command-line arguments &lt;a name=&#34;tipcmd&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tip &amp;lt;options&amp;gt; &amp;lt;source&amp;gt; [out]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; can be a file or a directory containing &lt;code&gt;.tip&lt;/code&gt; files and &lt;code&gt;[out]&lt;/code&gt; is an output directory (default: ./out).&lt;/p&gt; &#xA;&lt;p&gt;To see the possible options, run &lt;code&gt;tip&lt;/code&gt; without options. Option &lt;code&gt;-verbose&lt;/code&gt; is recommended when developing and testing analyses.&lt;/p&gt; &#xA;&lt;h2&gt;Visualizing control flow graphs and analysis results&lt;/h2&gt; &#xA;&lt;p&gt;The main function &lt;code&gt;Tip.scala&lt;/code&gt; emits control flow graphs and analysis results as &#34;.dot&#34; files that can be processed by &lt;a href=&#34;https://www.graphviz.org/&#34;&gt;Graphviz&lt;/a&gt; to produce images, for example using the Graphviz dot command-line tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dot -O -Tpng out/example.tip__sign.dot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Program normalization&lt;/h2&gt; &#xA;&lt;p&gt;Some analyses require the programs use restricted subsets of TIP. The following kinds of normalization can be performed automatically:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-normalizecalls&lt;/code&gt;: normalizes function calls to be top-level only and such that arguments are identifiers (e.g. &lt;code&gt;id1 = id2(id3,id4)&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-normalizereturns&lt;/code&gt;: normalizes return expressions to be identifiers (e.g. &lt;code&gt;return id&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-normalizepointers&lt;/code&gt;: normalizes pointer operations to primitive statements (&lt;code&gt;id = alloc P&lt;/code&gt; where &lt;code&gt;P&lt;/code&gt; is null or an integer constant, &lt;code&gt;id1 = &amp;amp;id2&lt;/code&gt;, &lt;code&gt;id1 = id2&lt;/code&gt;, &lt;code&gt;id1 = *id2&lt;/code&gt;, &lt;code&gt;*id1 = id2&lt;/code&gt;, or&lt;code&gt;id = null&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If one or more of these options are enabled, the normalized program is printed to e.g. &lt;code&gt;out/example.tip__normalized.tip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Help to Scala novices&lt;/h2&gt; &#xA;&lt;p&gt;This implementation takes advantage of many cool Scala language features that allow the code to be concise and flexible. Many of these language features are quite intuitive and easy to understand for anyone familiar with object oriented and functional programming, even without prior knowledge of Scala. Still, the following language features deserve some extra attention:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org/tour/traits.html&#34;&gt;traits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org/tour/case-classes.html&#34;&gt;case classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org/tour/singleton-objects.html&#34;&gt;companion objects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org/tour/abstract-types.html&#34;&gt;abstract type members&lt;/a&gt; (see e.g. &lt;a href=&#34;https://raw.githubusercontent.com/cs-au-dk/TIP/master/src/tip/lattices/GenericLattices.scala&#34;&gt;GenericLattices.scala&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org/tour/implicit-parameters.html&#34;&gt;implicit parameters&lt;/a&gt; (see e.g. &lt;a href=&#34;https://raw.githubusercontent.com/cs-au-dk/TIP/master/src/tip/analysis/TypeAnalysis.scala&#34;&gt;TypeAnalysis.scala&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org/tour/implicit-conversions.html&#34;&gt;implicit conversions&lt;/a&gt; (see e.g. &lt;a href=&#34;https://raw.githubusercontent.com/cs-au-dk/TIP/master/src/tip/types/Types.scala&#34;&gt;TipType.ast2typevar&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.scala-lang.org/overviews/core/implicit-classes.html&#34;&gt;implicit classes&lt;/a&gt; (see e.g. &lt;a href=&#34;https://raw.githubusercontent.com/cs-au-dk/TIP/master/src/tip/ast/AstNodeData.scala&#34;&gt;AstNodeData.AstNodeWithDeclaration&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tutorials and extensive documentation for Scala are available at &lt;a href=&#34;http://docs.scala-lang.org/&#34;&gt;http://docs.scala-lang.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Useful tips:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can see what type Scala has inferred for an expression by selecting the expression and pressing Alt+Equals (depending on keyboard settings in Settings -&amp;gt; Keymap -&amp;gt; Scala -&amp;gt; Type Info).&lt;/li&gt; &#xA; &lt;li&gt;You can see what implicit conversion Scala is applying by enabling View -&amp;gt; Show Implicit Hints (and View -&amp;gt; Expand Implicit Hints, for full information).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code style&lt;/h2&gt; &#xA;&lt;p&gt;To avoid using inconsistent code styles and meaningless diffs caused by IDE reformatting we use &lt;a href=&#34;http://scalameta.org/scalafmt/&#34;&gt;scalafmt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The code is automatically formatted upon compilation by SBT.&lt;/p&gt; &#xA;&lt;p&gt;Before committing, please double-check that all the code is in the right format by executing &lt;code&gt;sbt scalafmt&lt;/code&gt;. To automatically format when the file is saved, go to File -&amp;gt; Settings..., under &#39;Editor&#39;, &#39;Code Style&#39;, &#39;Scala&#39;, make sure &#39;Scalafmt&#39; is selected under &#39;Formatter&#39;. (Unfortunately the formatting is only triggered when the file is &lt;em&gt;explicitly&lt;/em&gt; saved with Ctrl-S.)&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cs.au.dk/~amoeller/&#34;&gt;Anders Møller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gmezzetti.name/&#34;&gt;Gianluca Mezzetti&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;with contributions from&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://soft.vub.ac.be/~cderoove/&#34;&gt;Coen De Roover&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://awesom.eu/~acieroid/&#34;&gt;Quentin Stievenart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Erik Krogh Kristensen&lt;/li&gt; &#xA; &lt;li&gt;Christian Budde Christensen&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>