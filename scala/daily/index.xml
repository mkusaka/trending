<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-20T01:39:20Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>seveniruby/AppCrawler</title>
    <updated>2025-03-20T01:39:20Z</updated>
    <id>tag:github.com,2025-03-20:/seveniruby/AppCrawler</id>
    <link href="https://github.com/seveniruby/AppCrawler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;基于appium的app自动遍历工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;appcrawler&lt;/h1&gt; &#xA;&lt;p&gt;Appcrawler是一个基于自动遍历的App爬虫工具，支持Android和IOS，支持真机和模拟器。最大的特点是灵活性高，可通过配置来设定遍历的规则。&lt;/p&gt; &#xA;&lt;h2&gt;quick start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-------------------------------------------------&#xA;appcrawler 全平台自动遍历测试工具&#xA;Q&amp;amp;A: https://ceshiren.com/c/opensource/appcrawler&#xA;author: seveniruby&#xA;-------------------------------------------------&#xA;&#xA;&#xA;Usage: appcrawler [options]&#xA;&#xA;  -a, --app &amp;lt;value&amp;gt;        Android或者iOS的文件地址, 可以是网络地址, 赋值给appium的app选项&#xA;  -e, --encoding &amp;lt;value&amp;gt;   set encoding, such as UTF-8 GBK&#xA;  -c, --conf &amp;lt;value&amp;gt;       配置文件地址&#xA;  -p, --platform &amp;lt;value&amp;gt;   平台类型android或者ios, 默认会根据app后缀名自动判断&#xA;  -t, --maxTime &amp;lt;value&amp;gt;    最大运行时间. 单位为秒. 超过此值会退出. 默认最长运行3个小时&#xA;  -u, --appium &amp;lt;value&amp;gt;     appium的url地址&#xA;  -o, --output &amp;lt;value&amp;gt;     遍历结果的保存目录. 里面会存放遍历生成的截图, 思维导图和日志&#xA;  --capability k1=v1,k2=v2...&#xA;                           appium capability选项, 这个参数会覆盖-c指定的配置模板参数, 用于在模板配置之上的参数微调&#xA;  -y, --yaml &amp;lt;value&amp;gt;       代表配置的yaml语法，比如blackList: [ {xpath: action_night } ]，用于避免使用配置文件的情况&#xA;  -r, --report &amp;lt;value&amp;gt;     输出html和xml报告&#xA;  --template &amp;lt;value&amp;gt;       输出代码模板&#xA;  --master &amp;lt;value&amp;gt;         master的diff.yml文件地址&#xA;  --candidate &amp;lt;value&amp;gt;      candidate环境的diff.yml文件&#xA;  -v, --verbose-debug      是否展示更多debug信息&#xA;  -vv, --verbose-trace     是否展示更多trace信息&#xA;  --demo                   生成demo配置文件学习使用方法&#xA;  --help&#xA;                           示例&#xA;                           appcrawler -a xueqiu.apk&#xA;                           appcrawler -a xueqiu.apk --capability noReset=true&#xA;                           appcrawler -c conf/xueqiu.json -p android -o result/&#xA;                           appcrawler -c xueqiu.yaml --capability udid=[你的udid] -a Snowball.app&#xA;                           appcrawler -c xueqiu.yaml -a Snowball.app -u 4730&#xA;                           appcrawler -c xueqiu.yaml -a Snowball.app -u http://127.0.0.1:4730/wd/hub&#xA;&#xA;                           #生成demo配置文件到当前目录下的demo.yaml&#xA;                           appcrawler --demo&#xA;&#xA;                           #启动已经安装过的app&#xA;                           appcrawler --capability &#34;appPackage=com.xueqiu.android,appActivity=.view.WelcomeActivityAlias&#34;&#xA;&#xA;                           #使用yaml参数&#xA;                           appcrawler -a xueqiu.apk -y &#34;blackList: [ {xpath: action_night}, {xpath: &#39;.*[0-9\\.]{2}.*&#39;} ]&#34;&#xA;&#xA;                           #从已经结束的结果中重新生成报告&#xA;                           appcrawler --report result/&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;配置文件格式&lt;/h2&gt; &#xA;&lt;h3&gt;执行参数与配置文件&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;capability设置：与appium完全一致&lt;/li&gt; &#xA; &lt;li&gt;testcase：用于启动app后的基础测试用例&lt;/li&gt; &#xA; &lt;li&gt;selectedList：遍历范围设定&lt;/li&gt; &#xA; &lt;li&gt;triggerActions：特定条件触发执行动作的设置&lt;/li&gt; &#xA; &lt;li&gt;selectedList：需要被遍历的元素范围&lt;/li&gt; &#xA; &lt;li&gt;firstList：优先被点击&lt;/li&gt; &#xA; &lt;li&gt;lastList：最后被点击&lt;/li&gt; &#xA; &lt;li&gt;tagLimitMax：同祖先（同类型）的元素最多点击多少次&lt;/li&gt; &#xA; &lt;li&gt;backButton：当所有元素都被点击后默认后退控件定位&lt;/li&gt; &#xA; &lt;li&gt;blackList：黑名单&lt;/li&gt; &#xA; &lt;li&gt;maxDepth: 遍历的最大深度&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;配置的最小单元 测试用例模型&lt;/h3&gt; &#xA;&lt;p&gt;testcase的完整形态&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;given：所有的先决条件&lt;/li&gt; &#xA; &lt;li&gt;when：先决条件成立后的行为&lt;/li&gt; &#xA; &lt;li&gt;then：断言集合&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;testcase的简写形态&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;xpath：对应when里的xpath&lt;/li&gt; &#xA; &lt;li&gt;action：对应when的action&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;执行参数比配置文件优先级别高&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;given 前提条件&lt;/li&gt; &#xA; &lt;li&gt;when 执行动作&lt;/li&gt; &#xA; &lt;li&gt;then 写断言&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;简写形态&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;xpath xpath支持xpath表达式、正则、包含&lt;/li&gt; &#xA; &lt;li&gt;action 支持&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;xpath定义&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;xpath &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;//*[@resource-id=‘xxxx’]&lt;/li&gt; &#xA;   &lt;li&gt;//*[contains(@text, ‘密码’)]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;正则 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;^确定$&lt;/li&gt; &#xA;   &lt;li&gt;^.*输入密码&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;包含 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;密码&lt;/li&gt; &#xA;   &lt;li&gt;输入&lt;/li&gt; &#xA;   &lt;li&gt;请&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;action定义&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;&#34; 只是截图记录&lt;/li&gt; &#xA; &lt;li&gt;back 后退&lt;/li&gt; &#xA; &lt;li&gt;backApp 回退到当前的app 默认等价于back行为 可定制&lt;/li&gt; &#xA; &lt;li&gt;monkey 随机事件&lt;/li&gt; &#xA; &lt;li&gt;click&lt;/li&gt; &#xA; &lt;li&gt;longTap&lt;/li&gt; &#xA; &lt;li&gt;xxx() 执行scala或者java代码 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Thread.sleep(3000)&lt;/li&gt; &#xA;   &lt;li&gt;driver.swipe(0.9, 0.5, 0.1, 0.5)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;非以上所有行为是输入 xx ddd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;完整配置文件&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;maxTimeDescription: &#34;最大运行时间&#34;&#xA;maxTime: 10800&#xA;maxDepthDescription: &#34;默认的最大深度10, 结合baseUrl可很好的控制遍历的范围&#34;&#xA;maxDepth: 10&#xA;capabilityDescription: &#34;appium的capability通用配置，其中automationName代表自动化的驱动引擎，除了支持appium的\&#xA;  所有引擎外，额外增加了adb和selenium的支持&#34;&#xA;capability:&#xA;  appActivity: &#34;.ApiDemos&#34;&#xA;  appium: &#34;http://127.0.0.1:4723/wd/hub&#34;&#xA;  noReset: &#34;true&#34;&#xA;  appPackage: &#34;io.appium.android.apis&#34;&#xA;  fullReset: &#34;false&#34;&#xA;testcaseDescription: &#34;测试用例设置，用于遍历开始之前的一些前置操作，比如自动登录&#34;&#xA;testcase:&#xA;  name: &#34;AppCrawler TestCase&#34;&#xA;  steps:&#xA;    - given: []&#xA;      when: null&#xA;      then: []&#xA;      xpath: &#34;/*/*&#34;&#xA;      action: &#34;Thread.sleep(1000)&#34;&#xA;      actions: []&#xA;      times: -1&#xA;triggerActionsDescription: &#34;在遍历过程中需要随时处理的一些操作，比如弹框、登录等&#34;&#xA;triggerActions:&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;permission_allow_button&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: 3&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;允许&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: 3&#xA;selectedListDescription: &#34;默认遍历列表，只有出现在这个列表里的控件范围才会被遍历&#34;&#xA;selectedList:&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[contains(name(), &#39;Button&#39;)]&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[contains(name(), &#39;Text&#39;) and @clickable=&#39;true&#39; and string-length(@text)&amp;lt;10]&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[@clickable=&#39;true&#39;]//*[contains(name(), &#39;Text&#39;) and string-length(@text)&amp;lt;10]&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[contains(name(), &#39;Image&#39;) and @clickable=&#39;true&#39;]&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[@clickable=&#39;true&#39;]/*[contains(name(), &#39;Image&#39;)]&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[contains(name(), &#39;Image&#39;) and @name!=&#39;&#39;]&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[contains(name(), &#39;Text&#39;) and @name!=&#39;&#39; and string-length(@label)&amp;lt;10]&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//a&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[contains(@class, &#39;Text&#39;) and @clickable=&#39;true&#39; and string-length(@text)&amp;lt;10]&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[@clickable=&#39;true&#39;]//*[contains(@class, &#39;Text&#39;) and string-length(@text)&amp;lt;10]&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[contains(@class, &#39;Image&#39;) and @clickable=&#39;true&#39;]&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[@clickable=&#39;true&#39;]/*[contains(@class, &#39;Image&#39;)]&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[@clickable=&#39;true&#39; and contains(@class, &#39;Button&#39;)]&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;blackListDescription: &#34;黑名单列表 matches风格, 默认排除内容包含2个数字的控件&#34;&#xA;blackList:&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;.*[0-9]{2}.*&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;firstListDescription: &#34;优先遍历列表，同时出现在selectedList与firstList中的控件会被优先遍历&#34;&#xA;firstList: []&#xA;lastListDescription: &#34;最后遍历列表，同时出现在selectedList与lastList中的控件会被最后遍历&#34;&#xA;lastList:&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[@selected=&#39;true&#39;]/..//*&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;//*[@selected=&#39;true&#39;]/../..//*&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;backButtonDescription: &#34;后退按钮列表，默认在所有控件遍历完成后，才会最后点击后退按钮。目前具备了自动判断返回按钮的能力，默认不需要配置&#34;&#xA;backButton:&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;Navigate up&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: -1&#xA;xpathAttributesDescription: &#34;在生成一个控件的唯一定位符中应该包含的关键属性&#34;&#xA;xpathAttributes:&#xA;  - &#34;name()&#34;&#xA;  - &#34;name&#34;&#xA;  - &#34;label&#34;&#xA;  - &#34;value&#34;&#xA;  - &#34;resource-id&#34;&#xA;  - &#34;content-desc&#34;&#xA;  - &#34;text&#34;&#xA;  - &#34;id&#34;&#xA;  - &#34;name&#34;&#xA;  - &#34;innerText&#34;&#xA;  - &#34;tag&#34;&#xA;  - &#34;class&#34;&#xA;sortByAttributeDescription: &#34;陆续根据属性进行遍历排序微调，depth表示从dom中最深层的控件开始遍历，list表示dom中列表优先，\&#xA;  selected表示菜单最后遍历，这是默认规则，一般不需要改变&#34;&#xA;sortByAttribute:&#xA;  - &#34;depth&#34;&#xA;  - &#34;list&#34;&#xA;  - &#34;selected&#34;&#xA;findByDescription: &#34;默认生成控件唯一定位符的表达式风格，可选项 default|android|id|xpath，默认会自动判断是否使用android定\&#xA;  位或者ios定位&#34;&#xA;findBy: &#34;xpath&#34;&#xA;baseUrlDescription: &#34;设置一个起始点，从这个起始点开始计算深度，比如默认从登录后的界面开始计算&#34;&#xA;baseUrl: []&#xA;appWhiteListDescription: &#34;app白名单，允许在这些app里进行遍历&#34;&#xA;appWhiteList: []&#xA;urlBlackListDescription: &#34;url黑名单，用于排除某些页面的遍历&#34;&#xA;urlBlackList: []&#xA;urlWhiteListDescription: &#34;url白名单，仅在这些界面内遍历&#34;&#xA;urlWhiteList: []&#xA;beforeStartWaitDescription: &#34;启动一个app默认等待的时间&#34;&#xA;beforeStartWait: 6000&#xA;beforeRestart: []&#xA;beforeElementDescription: &#34;在遍历每个控件之前默认执行的动作&#34;&#xA;beforeElement: []&#xA;afterElementDescription: &#34;在遍历每个控件之后默认执行的动作&#34;&#xA;afterElement: []&#xA;afterElementWaitDescription: &#34;在遍历每个控件之后默认等待的时间，用于等待新页面加载&#34;&#xA;afterElementWait: 500&#xA;afterAllDescription: &#34;在遍历完当前页面内的所有控件后，是否需要刷新或者滑动&#34;&#xA;afterAll: []&#xA;afterAllMaxDescription: &#34;afterAll的最大重试次数，比如连续滑动2次都没新元素即取消&#34;&#xA;afterAllMax: 2&#xA;tagLimitMaxDescription: &#34;相似控件最多点击几次&#34;&#xA;tagLimitMax: 2&#xA;tagLimitDescription: &#34;设置部分相似控件的最大遍历次数&#34;&#xA;tagLimit:&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;确定&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: 1000&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;取消&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: 1000&#xA;  - given: []&#xA;    when: null&#xA;    then: []&#xA;    xpath: &#34;share_comment_guide_btn_name&#34;&#xA;    action: &#34;&#34;&#xA;    actions: []&#xA;    times: 1000&#xA;assertGlobalDescription: &#34;全局断言&#34;&#xA;assertGlobal: []&#xA;suiteNameDescription: &#34;报告中的测试套件名字可以由列表内的控件内容替换，增强报告中关键界面的辨识度&#34;&#xA;suiteName:&#xA;  - &#34;//*[@selected=&#39;true&#39;]//android.widget.TextView/@text&#34;&#xA;screenshotDescription: &#34;是否截图&#34;&#xA;screenshot: true&#xA;reportTitleDescription: &#34;报告的title&#34;&#xA;reportTitle: &#34;AppCrawler&#34;&#xA;resultDirDescription: &#34;结果目录，如果为空会自动创建对应时间戳_报名的结果目录&#34;&#xA;resultDir: &#34;&#34;&#xA;showCancelDescription: &#34;是否展示跳过的控件记录&#34;&#xA;showCancel: true&#xA;pluginListDescription: &#34;插件列表，暂时禁用，太高级了，很多人不会用&#34;&#xA;Description: &#34;。在selectedList firstList lastList等很多配置中，需要填充的是测试步骤Step类型。Step类型由given（\&#xA;  满足条件）when（条件满足的行为）then（断言）三部分组成。Step可以简化为xpath（定位表达式，支持xpath 正则 包含关系）与action（点击\&#xA;  \ 输入等行为）。&#34;&#xA;pluginList: []&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;金牌赞助商（Gold Sponsor）&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ceshiren.com/uploads/default/original/3X/a/2/a270cdc0bf8cb41110ce5999d5278515a0e7cf0f.png&#34; alt=&#34;logo霍格沃兹测试学院&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ceshiren.com/&#34;&gt;霍格沃兹测试开发学社&lt;/a&gt; 是 &lt;a href=&#34;http://qrcode.testing-studio.com/f?from=appcrawler&amp;amp;url=https://ceshiren.com/t/topic/14814&#34;&gt;测吧（北京）科技有限公司&lt;/a&gt; 旗下业界领先的测试开发技术高端教育品牌。 学院课程均由名企一线测试大牛设计，提供实战驱动的系列课程。涵盖移动app自动化测试、接口自动化测试、性能测试、持续集成/持续交付/DevOps 、测试左移、测试右移、测试管理等课程。 &lt;a href=&#34;http://qrcode.testing-studio.com/f?from=appcrawler&amp;amp;url=https://testerh.ke.qq.com?flowToken=1040391&#34;&gt;点击学习!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://qrcode.testing-studio.com/f?from=appcrawler&amp;amp;url=https://ceshiren.com/t/topic/14814&#34;&gt;测吧（北京）科技有限公司&lt;/a&gt; 是一家服务于测试领域的高科技公司，为企业提供全方位的自动化测试技术支持、测试平台开发定制、测试效能提升等咨询与科研合作服务。 先后服务于华为、工信部、信通院等知名企业与机构。&lt;/p&gt; &#xA;&lt;h2&gt;编译&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mvn clean package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;技术交流&lt;/h2&gt; &#xA;&lt;p&gt;由霍格沃兹测试开发学社维护，技术交流与issue提交请移步 &lt;a href=&#34;https://ceshiren.com/c/opensource/appcrawler/&#34;&gt;https://ceshiren.com/c/opensource/appcrawler/&lt;/a&gt; 交流&lt;/p&gt;</summary>
  </entry>
</feed>