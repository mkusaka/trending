<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-06T01:43:36Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GiganticMinecraft/SeichiAssist</title>
    <updated>2023-02-06T01:43:36Z</updated>
    <id>tag:github.com,2023-02-06:/GiganticMinecraft/SeichiAssist</id>
    <link href="https://github.com/GiganticMinecraft/SeichiAssist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ギガンティック☆整地鯖の独自要素を司るプラグイン / A Minecraft(Spigot) Plugin used for Gigantic Seichi Server. Address -&gt; play.seichi.click&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SeichiAssist&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/GiganticMinecraft/SeichiAssist/actions/workflows/build_and_deploy.yml&#34;&gt;&lt;img src=&#34;https://github.com/GiganticMinecraft/SeichiAssist/actions/workflows/build_and_deploy.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;開発環境&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;Intellij IDEA&lt;/a&gt; などの統合開発環境&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://adoptopenjdk.net/?variant=openjdk8&amp;amp;jvmVariant=hotspot&#34;&gt;AdoptOpenJDK 1.8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.scala-lang.org/download/&#34;&gt;Scala 2.13&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.scala-sbt.org/1.x/docs/Setup.html&#34;&gt;sbt 1.6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Spigot 1.12.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;前提プラグイン&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spigotmc.org/resources/coreprotect.8631/download?version=231781&#34;&gt;CoreProtect-2.14.4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spigotmc.org/resources/item-entity-tile-nbt-api.7939/download?version=241690&#34;&gt;item-nbt-api-plugin-1.8.2-SNAPSHOT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.bukkit.org/projects/multiverse-core/files/2428161/download&#34;&gt;Multiverse-Core-2.5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.bukkit.org/projects/multiverse-portals/files/2428333/download&#34;&gt;Multiverse-Portals-2.5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.inventivetalent.org/download/?file=plugin/ParticleAPI_v2.1.1&#34;&gt;ParticleAPI_v2.1.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.bukkit.org/projects/worldborder/files/2415838/download&#34;&gt;WorldBorder1.8.7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.bukkit.org/projects/worldedit/files/2597538/download&#34;&gt;worldedit-bukkit-6.1.9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.bukkit.org/projects/worldguard/files/2610618/download&#34;&gt;worldguard-bukkit-6.2.2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;前提プラグイン(整地鯖内製)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RegenWorld &lt;a href=&#34;https://github.com/GiganticMinecraft/RegenWorld&#34;&gt;リポジトリ&lt;/a&gt; | &lt;a href=&#34;https://redmine.seichi.click/attachments/download/890/RegenWorld-1.0.jar&#34;&gt;jar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ビルド&lt;/h2&gt; &#xA;&lt;p&gt;最初に、Java Development Kit (JDK) 8をインストールする必要があります。 &lt;a href=&#34;https://adoptopenjdk.net/?variant=openjdk8&amp;amp;jvmVariant=hotspot&#34;&gt;AdoptOpenJDK 1.8&lt;/a&gt; のインストールを推奨します。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.scala-sbt.org/1.x/docs/Setup.html&#34;&gt;sbtの公式ページ&lt;/a&gt; に従ってsbtのインストールをします。 sbtがコマンドラインで使える状態で&lt;code&gt;sbt assembly&lt;/code&gt;を実行すると、&lt;code&gt;target/build&lt;/code&gt;フォルダにjarが出力されます。&lt;/p&gt; &#xA;&lt;h3&gt;IntelliJ IDEAの画面からビルドする&lt;/h3&gt; &#xA;&lt;p&gt;IntelliJ IDEAを開発に使用している場合、プロジェクトをsbtプロジェクトとして読み込み、 sbtタブからSeichiAssist -&amp;gt; SeichiAssist -&amp;gt; sbt tasks -&amp;gt; assemblyを実行すれば&lt;code&gt;target/build&lt;/code&gt;フォルダにjarが出力されます。&lt;/p&gt; &#xA;&lt;h2&gt;デバッグ用docker環境&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;docker&lt;/code&gt;及び&lt;code&gt;sbt&lt;/code&gt;が実行可能であるとします。 Linux環境では、&lt;code&gt;./prepare-docker.sh&lt;/code&gt;、Windowsでは&lt;code&gt;prepare-docker.bat&lt;/code&gt;を実行することで デバッグ用のBungeecord + Spigot環境を構築することができます。&lt;/p&gt; &#xA;&lt;p&gt;サーバーやDB等を停止する場合、 &lt;code&gt;docker compose down&lt;/code&gt; を実行してください。&lt;/p&gt; &#xA;&lt;p&gt;なお、SeichiAssistがJava 8以外でコンパイルされた場合は、実行時にエラーとなります。必ずJDKのバージョンを揃えるようにしてください。&lt;/p&gt; &#xA;&lt;h3&gt;デバッグ用環境への接続&lt;/h3&gt; &#xA;&lt;p&gt;DockerマシンのIPアドレス(Linux等なら&lt;code&gt;localhost&lt;/code&gt;)を&lt;code&gt;DOCKER_IP&lt;/code&gt;とします。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker&lt;/code&gt;により各サービスが起動したら、&lt;code&gt;DOCKER_IP&lt;/code&gt;へとMinecraftを接続することができます。 また、&lt;code&gt;DOCKER_IP:8080&lt;/code&gt;へとWebブラウザでアクセスすることで、phpMyAdminを介してデータベースを操作することができます。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/op&lt;/code&gt;などのコマンドを実行するためにSpigotのコンソールにアクセスする必要がある場合、 &lt;code&gt;spigota&lt;/code&gt;または&lt;code&gt;spigotb&lt;/code&gt;へのコンテナ名とともに &lt;code&gt;docker attach [CONTAINER_NAME]&lt;/code&gt; を実行してください。 コンテナ名は &lt;code&gt;docker ps&lt;/code&gt; を実行すると &lt;code&gt;seichiassist_spigotb_1&lt;/code&gt; のような形式で表示されます。 コンソールからは &lt;code&gt;Ctrl+C&lt;/code&gt; で抜けることができます(サーバーは停止されません)。&lt;/p&gt; &#xA;&lt;h2&gt;DBの準備&lt;/h2&gt; &#xA;&lt;h3&gt;ガチャ景品データの準備&lt;/h3&gt; &#xA;&lt;p&gt;初回起動後、DBが作成されますが、ガチャ景品のデータがありません。そのため、次のSQLdumpをインポートします。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redmine.seichi.click/attachments/download/992/gachadata.sql&#34;&gt;gachadata.sql&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;手順は以下の通りです。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;一旦サーバーを起動させる&lt;/li&gt; &#xA; &lt;li&gt;phpMyAdminを開く&lt;/li&gt; &#xA; &lt;li&gt;トップ画面の上部メニューから「データベース」を開く&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;seichiassist&lt;/code&gt;と&lt;code&gt;flyway_managed_schema&lt;/code&gt;にチェックを入れて、「削除」、「OK」&lt;/li&gt; &#xA; &lt;li&gt;「データベースを作成する」の下にあるテキストボックスに&lt;code&gt;seichiassist&lt;/code&gt;と入力し、「作成」&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;seichiassist&lt;/code&gt;のデータベースを開き、上部メニューから「インポート」&lt;/li&gt; &#xA; &lt;li&gt;「File to import」の「ファイルを選択」から、ダウンロードした&lt;code&gt;gachadata.sql&lt;/code&gt;を選択&lt;/li&gt; &#xA; &lt;li&gt;画面下部の「実行」&lt;/li&gt; &#xA; &lt;li&gt;サーバーを再起動させる&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;どうしてもローカルにJavaとかsbtを入れたくない人のための救済策&lt;/h3&gt; &#xA;&lt;p&gt;VSCode + WSLで開発している場合や、純粋にビルドして立ち上げたいだけの場合はランタイムの導入のコストが高いので、以下の方法を使うと便利です。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -rf target/build # 再ビルドしたいなら既存のターゲットは削除&#xA;$ docker run --rm -it -v `pwd`:/app ghcr.io/giganticminecraft/seichiassist-builder:1a64049 sh -c &#34;cd /app &amp;amp;&amp;amp; sbt assembly&#34;&#xA;$ sudo chown -R `whoami` target/build # docker上でsbtを実行するとrootになってしまうため権限を変える&#xA;$ cp -n docker/spigot/eula.txt docker/spigot/serverfiles/eula.txt || true&#xA;$ docker compose up --build -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;protocolディレクトリ以下のクローン&lt;/h2&gt; &#xA;&lt;p&gt;protocol以下のファイルは&lt;code&gt;git clone&lt;/code&gt;では入手することができません。以下のどちらかのコマンドを実行してください:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone --recursive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git submodule update --init --recursive&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;開発スタイル&lt;/h2&gt; &#xA;&lt;h3&gt;ドキュメンテーション&lt;/h3&gt; &#xA;&lt;p&gt;publicなメソッドについては、ドキュメンテーションを記載するよう心がけてください。 その他は各自が必要だと判断した場合のみ記載してください。&lt;/p&gt; &#xA;&lt;h3&gt;Commit Style&lt;/h3&gt; &#xA;&lt;p&gt;1コミットあたりの情報は最小限としてください。 コミットメッセージは&lt;a href=&#34;https://www.conventionalcommits.org/ja/v1.0.0/&#34;&gt;コンベンショナルコミット&lt;/a&gt;を採用することを推奨しています。&lt;/p&gt; &#xA;&lt;h3&gt;デプロイ&lt;/h3&gt; &#xA;&lt;h4&gt;ブランチ&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://qiita.com/KosukeSone/items/514dd24828b485c69a05&#34;&gt;Git-flow&lt;/a&gt; を簡略化したものを使用します。 新規機能の開発など、変更を加える際は&lt;code&gt;develop&lt;/code&gt;ブランチから &amp;lt;任意の文字列&amp;gt; ブランチを作り、そこで作業してください。 開発が終了したら&lt;code&gt;develop&lt;/code&gt;ブランチにマージします。&lt;code&gt;develop&lt;/code&gt;ブランチへ直接コミットすることは避けてください (CIによる検査がコミットの事後となってしまうため)。 &lt;code&gt;master&lt;/code&gt;ブランチは本番環境に反映されます。&lt;/p&gt; &#xA;&lt;h4&gt;リリース&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;develop&lt;/code&gt;ブランチが更新されると、そのコードを基に実行用jarがビルドされ、デバッグ環境に配布されます。デバッグ環境はjarの配布を検知すると自動で再起動し、最新のjarを使用して稼働します。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;デバッグ環境へは、Minecraft Java Editionで&lt;code&gt;play-debug.seichi.click&lt;/code&gt;に接続し、&lt;code&gt;T&lt;/code&gt;キーでチャットを開き、&lt;code&gt;/server deb112&lt;/code&gt;と入力して&lt;code&gt;Enter&lt;/code&gt;を押すとアクセスできます。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt;ブランチが更新されると、そのコードを基に実行用jarがビルドされ、本番環境に配布されます。本番環境は翌再起動時に自動で最新のjarを取り込んで稼働します。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;master&lt;/code&gt;ブランチの更新は必ず &lt;code&gt;develop&lt;/code&gt; または &lt;code&gt;hotfix-*&lt;/code&gt; からのPull Requestによって行ってください。 また、 &lt;code&gt;develop&lt;/code&gt; からのリリース用 Pull Request は &lt;a href=&#34;https://github.com/GiganticMinecraft/SeichiAssist/actions/workflows/create_new_release.yml&#34;&gt;&lt;code&gt;create_new_release&lt;/code&gt;&lt;/a&gt; ワークフローを実行することで作成してください(&lt;code&gt;build.sbt&lt;/code&gt; の自動更新などが行われます)。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;jar以外の自動リリースは未対応です(&lt;code&gt;config.yml&lt;/code&gt;など)。運営チームへ更新を依頼する必要があります。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;各サーバーや環境で共通で構わないパラメータは&lt;code&gt;config.yml&lt;/code&gt;を読まず、コードへの直接実装を推奨します。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;フォーマットおよびlintに関して&lt;/h3&gt; &#xA;&lt;p&gt;フォーマットには&lt;a href=&#34;https://scalameta.org/scalafmt&#34;&gt;scalafmt&lt;/a&gt;、lintには&lt;a href=&#34;https://scalacenter.github.io/scalafix/&#34;&gt;scalafix&lt;/a&gt;を利用しています。&lt;/p&gt; &#xA;&lt;p&gt;コード品質を最低限保つため、PRが受け入れられるにはscalafmtとscalafixの両方のチェックが通る必要があります。そのため、&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IntelliJ IDEAの設定でフォーマットに &lt;code&gt;scalafmt&lt;/code&gt; を使う &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Editor&lt;/code&gt; &amp;gt; &lt;code&gt;Code Style&lt;/code&gt; &amp;gt; &lt;code&gt;Scala&lt;/code&gt; で &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;Formatter&lt;/code&gt; を &lt;code&gt;Scalafmt&lt;/code&gt; に変更&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Reformat on file save&lt;/code&gt; にチェックを付ける&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;PRを送る前に &lt;code&gt;sbt&lt;/code&gt; コンソールで &lt;code&gt;scalafixAll&lt;/code&gt; と &lt;code&gt;scalafmtAll&lt;/code&gt; を実行する&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ようにお願いします。&lt;/p&gt; &#xA;&lt;h2&gt;利用条件&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GiganticMinecraft/SeichiAssist/raw/develop/LICENSE&#34;&gt;GPLv3ライセンス&lt;/a&gt; での公開です。ソースコードの使用規約等はGPLv3ライセンスに従います。&lt;/li&gt; &#xA; &lt;li&gt;当リポジトリのコードの著作権はunchamaが所有しています。&lt;/li&gt; &#xA; &lt;li&gt;独自機能の追加やバグの修正等、ギガンティック☆整地鯖(以下、当サーバー)の発展への寄与を目的としたコードの修正・改変を歓迎しています。その場合、当サーバーのDiscordコミュニティに参加して、当コードに関する詳細なサポートを受けることが出来ます。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ライセンス&lt;/h2&gt; &#xA;&lt;p&gt;このプラグインは、&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache 2.0ライセンス&lt;/a&gt;で配布されている以下の製作物が含まれています。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://osdn.net/projects/ajd4jp/&#34;&gt;AJD4JP 日本用カレンダー処理 Javaクラスライブラリ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>PurpleKingdomGames/ultraviolet</title>
    <updated>2023-02-06T01:43:36Z</updated>
    <id>tag:github.com,2023-02-06:/PurpleKingdomGames/ultraviolet</id>
    <link href="https://github.com/PurpleKingdomGames/ultraviolet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala 3 to GLSL transpiler library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/tterb/atomic-design-ui/raw/master/LICENSEs&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/PurpleKingdomGames/ultraviolet?color=indigo&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PurpleKingdomGames/ultraviolet/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?color=purple&amp;amp;label=latest%20release&amp;amp;query=%24%5B0%5D.name&amp;amp;url=https%3A%2F%2Fapi.github.com%2Frepos%2FPurpleKingdomGames%2Fultraviolet%2Ftags&#34; alt=&#34;Latest Tagged Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/b5CD47g&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/716435281208672356?color=blue&amp;amp;label=discord&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PurpleKingdomGames/ultraviolet/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/PurpleKingdomGames/ultraviolet/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Ultraviolet&lt;/h1&gt; &#xA;&lt;p&gt;Ultraviolet is a Scala 3 to GLSL (versions 100 and 300) transpiler library built on top of Scala 3 inline macros.&lt;/p&gt; &#xA;&lt;p&gt;Examples can be found in the &lt;a href=&#34;https://github.com/PurpleKingdomGames/ultraviolet/tree/main/examples/&#34;&gt;examples directory of this repo&lt;/a&gt;. You can use Ultraviolet to generate GLSL shader code for &lt;a href=&#34;https://github.com/PurpleKingdomGames/indigo&#34;&gt;Indigo&lt;/a&gt;, and also for &lt;a href=&#34;https://www.shadertoy.com/&#34;&gt;ShaderToy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;TL;DR: What is a Shader / Ultraviolet / basic programmer intuition&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve stumbled across this repo and have no idea what all this shader stuff is about:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A shader program is used to render graphics on a GPU.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Think of a tiny C-like program that runs for every pixel on the screen&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ultraviolet allows you to write those programs in Scala 3.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example: ShaderToy&#39;s default program&lt;/h2&gt; &#xA;&lt;p&gt;This program can be run as a Scala-Cli script from &lt;a href=&#34;https://github.com/PurpleKingdomGames/ultraviolet/tree/main/examples/shadertoy&#34;&gt;the examples&lt;/a&gt; and the output pasted into &lt;a href=&#34;https://www.shadertoy.com/new&#34;&gt;ShaderToy&#39;s editor&lt;/a&gt;. The code produced is almost the same as the default ShaderToy template, and when run, looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PurpleKingdomGames/ultraviolet/main/shadertoy_default.png&#34; alt=&#34;ShaderToy&#39;s default shader example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import ultraviolet.shadertoy.*&#xA;import ultraviolet.syntax.*&#xA;&#xA;inline def image =&#xA;  Shader[ShaderToyEnv, Unit] { env =&amp;gt;&#xA;    def mainImage(fragColor: vec4, fragCoord: vec2): vec4 = {&#xA;      // Normalized pixel coordinates (from 0 to 1)&#xA;      val uv: vec2 = fragCoord / env.iResolution.xy&#xA;&#xA;      // Time varying pixel color&#xA;      val col: vec3 = 0.5f + 0.5f * cos(env.iTime + uv.xyx + vec3(0.0f, 2.0f, 4.0f))&#xA;&#xA;      // Output to screen&#xA;      vec4(col, 1.0f)&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The body has comments describing it take directly from the shader toy version, but let&#39;s walk through the Ultraviolet parts:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First we import ultraviolet&#39;s syntax and shadertoy support.&lt;/li&gt; &#xA; &lt;li&gt;Then we define an &lt;code&gt;inline def&lt;/code&gt; (important!) to hold our shader.&lt;/li&gt; &#xA; &lt;li&gt;The shader takes a &lt;code&gt;ShaderToyEnv&lt;/code&gt; environment (that provides globally available data like &lt;code&gt;iTime&lt;/code&gt;) and in this case returns &lt;code&gt;Unit&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The body is a function of environment (&lt;code&gt;env&lt;/code&gt;) to our shader definition.&lt;/li&gt; &#xA; &lt;li&gt;ShaderToy requires a &lt;code&gt;mainImage&lt;/code&gt; function that is usually &lt;code&gt;void&lt;/code&gt; in it&#39;s return type and you have to assign the output color to a known variable. With Ultraviolet&#39;s shader toy support, we return a &lt;code&gt;vec4&lt;/code&gt; and the library will re-write it to do the right thing.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For comparison, here is the GLSL version ShaderToy provides:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-glsl&#34;&gt;void mainImage( out vec4 fragColor, in vec2 fragCoord )&#xA;{&#xA;    // Normalized pixel coordinates (from 0 to 1)&#xA;    vec2 uv = fragCoord/iResolution.xy;&#xA;&#xA;    // Time varying pixel color&#xA;    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));&#xA;&#xA;    // Output to screen&#xA;    fragColor = vec4(col,1.0);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pretty similar! And in fact, converting GLSL examples to Scala + Ultraviolet tends to be quite a straightforward and mechanical process. Much work has been done to make the syntax feel the same or better.&lt;/p&gt; &#xA;&lt;h2&gt;Status: &#34;It works on my machine&#34;&lt;/h2&gt; &#xA;&lt;p&gt;Ultraviolet is in early stage development. It appears to be working well but there will be many, many corner cases that haven&#39;t been found yet. Please report bugs and issues!&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;This project is motivated from two needs:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The most pressing need is that GLSL tooling is patchy, and I&#39;d like to have a much better shadering writing experience both for myself and any other Scala devs whether they&#39;re writing shaders for &lt;a href=&#34;https://indigoengine.io/&#34;&gt;Indigo&lt;/a&gt;, &lt;a href=&#34;https://www.shadertoy.com/&#34;&gt;ShaderToy&lt;/a&gt;, or some other Scala frontend web framework.&lt;/li&gt; &#xA; &lt;li&gt;Indigo is currently locked into WebGL 2.0, and to move to other platforms or rendering technologies means having some way to abstract away from that.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Current Goals&lt;/h2&gt; &#xA;&lt;p&gt;Right now, the goal is an almost like-for-like experience of writing GLSL (for WebGL) in Scala 3, in all it&#39;s very specific procedural glory. It includes a few quality of life improvements such as anonymous functions and function composition, but nothing fancy for now. You can even write unit tests!&lt;/p&gt; &#xA;&lt;p&gt;The library may ultimately diverge from GLSL, and who knows what sort of problems have been caused by using GLSL as a starting point, but replacing GLSL with Scala GLSL-flavoured-shader-experience is the current goal.&lt;/p&gt; &#xA;&lt;p&gt;It is &lt;em&gt;not&lt;/em&gt; a goal to be able to write arbirary Scala and have it turned into GLSL. In other words this isn&#39;t a &#39;full&#39; transpiler (like Scala.js), it&#39;s a useful cross-over subset of Scala and GLSL. As many GLSL language features as can sensibly be represented, and as much Scala as GLSL can be coerced into expressing.&lt;/p&gt; &#xA;&lt;p&gt;Ultimately I&#39;d like to be able to write Shaders in FP friendly Scala that can target more than just GLSL 300, but that is not necessary for Ultraviolet to be useful and fun.&lt;/p&gt; &#xA;&lt;h1&gt;Language feature comparison&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;The goldren rule is: Keep It Simple!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;GLSL is not a general purpose language like Scala is, and while it&#39;s possible to represent most of GLSL in Scala, the opposite is not true.&lt;/p&gt; &#xA;&lt;p&gt;GLSL is for doing maths on simple numeric data types and is, as someone else described it, &#34;a very limited programming model.&#34;&lt;/p&gt; &#xA;&lt;p&gt;For all that, it is &lt;em&gt;very good fun&lt;/em&gt;. Go forth and do maths and make pretty pictures!&lt;/p&gt; &#xA;&lt;h2&gt;Float&#39;s. Everywhere.&lt;/h2&gt; &#xA;&lt;p&gt;In GLSL 300 there are no double types. It was very tempting to make Ultraviolet accept &lt;code&gt;Double&lt;/code&gt;s and write &lt;code&gt;Float&lt;/code&gt;s for a nicer experience, but in later GLSL versions and other shader languages &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Float&lt;/code&gt; are separate so Ultraviolet does &#39;the right thing&#39; and the cost of some user experience.&lt;/p&gt; &#xA;&lt;p&gt;Long story short: If you see an mysterious errors about constructors, you probably just wrote &lt;code&gt;1.0&lt;/code&gt; instead of &lt;code&gt;1.0f&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Built in functions&lt;/h2&gt; &#xA;&lt;p&gt;GLSL comes LOADED with useful functions for doing all kinds of maths.&lt;/p&gt; &#xA;&lt;p&gt;Since all of the implementations are well specified, Ultraviolet has fully implemented about 95% of them in Scala in order to help you write unit tests for your code.&lt;/p&gt; &#xA;&lt;p&gt;The other 5% that cannot be implmented are stubbed, and simply return fixed values. &lt;code&gt;texture2D&lt;/code&gt; for example will always return &lt;code&gt;vec4(0.0f)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Gotcha&#39;s, foot guns, and weird stuff&lt;/h2&gt; &#xA;&lt;h3&gt;Strings? Where we&#39;re going, we don&#39;t need Strings.&lt;/h3&gt; &#xA;&lt;p&gt;GLSL is a C-like language for doing maths. There are no &lt;code&gt;Char&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; types.&lt;/p&gt; &#xA;&lt;h3&gt;No functions as return types&lt;/h3&gt; &#xA;&lt;p&gt;Functions are not first class citizens in GLSL, and so it is not possible (currently) to have a function as a return type of a function. Simple function composition does work, and the &lt;code&gt;Shader&lt;/code&gt; type forms a monad you can &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; over.&lt;/p&gt; &#xA;&lt;h3&gt;Limited support for product types&lt;/h3&gt; &#xA;&lt;p&gt;You cannot make or use arbitrary Product types. For example, it is tempting to just make a little tuple in order to return two values from a function... but you can&#39;t.&lt;/p&gt; &#xA;&lt;p&gt;The closest thing you can do is make use of &#39;structs&#39;, which in Ultraviolet are represented by classes declared in the shader body - but it&#39;s usefulness is limited.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;inline def fragment =&#xA;  Shader[Unit, Unit] { _ =&amp;gt;&#xA;    class Light(&#xA;        val eyePosOrDir: vec3,&#xA;        val isDirectional: Boolean,&#xA;        val intensity: vec3,&#xA;        val attenuation: Float&#xA;    )&#xA;&#xA;    def makeLight(): Light =&#xA;      Light(vec3(1.0f), true, vec3(2.0f), 2.5f)&#xA;&#xA;    def frag: Unit =&#xA;      val x = makeLight()&#xA;      val y = x.eyePosOrDir.y&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;No sum types&lt;/h3&gt; &#xA;&lt;p&gt;There is no way to represent anything like an enum, the closest you can get is using an &lt;code&gt;int&lt;/code&gt; as a flag to switch on in a pattern match.&lt;/p&gt; &#xA;&lt;h3&gt;No forward referencing&lt;/h3&gt; &#xA;&lt;p&gt;In Scala, you can call functions at the bottom of a program from code living at the top. This type of arrangement is called a forward reference, and is not allowed in GLSL.&lt;/p&gt; &#xA;&lt;p&gt;There are compile time validation checks for this.&lt;/p&gt; &#xA;&lt;h3&gt;No, your fancy library won&#39;t work here&lt;/h3&gt; &#xA;&lt;p&gt;Almost every language feature you have available via UltraViolet has required work to allow it to be converted to GLSL. Bringing in your favourite library that adds arbitrary functionality will not work.&lt;/p&gt; &#xA;&lt;h3&gt;Nested functions and function purity&lt;/h3&gt; &#xA;&lt;p&gt;Because functions in Scala are first-class citizens, you can do all sorts of fancy things with them that we take for granted as Scala developers. One such thing is being able to arbitrarily nest functions.&lt;/p&gt; &#xA;&lt;p&gt;In GLSL, functions are special, and can only exist at the top level of the program.&lt;/p&gt; &#xA;&lt;p&gt;In general, this is manageable problem, but there are two rules to follow:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#39;Named&#39; functions e.g. &lt;code&gt;def foo(x: Float): vec2 = ???&lt;/code&gt; &lt;em&gt;cannot&lt;/em&gt; be nested inside one another.&lt;/strong&gt; This is because Ultraviolet will preserve the order of your code including named functions, in order to avoid problems with forward references.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Anonymous functions &lt;em&gt;can&lt;/em&gt; be nested, but &lt;em&gt;must be pure&lt;/em&gt;.&lt;/strong&gt;. Ultraviolet will re-organise anonymous functions, this is what allows us to simulate things like function composition. The price is that anonymous functions must be pure, i.e. they can only produce a value based on their arguments, and cannot make reference to other outside entities that Scala would normally consider to be &#39;in scope&#39;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;These rules should be enforced by compile time program validation for you.&lt;/p&gt; &#xA;&lt;h3&gt;Just write a glsl as a String?&lt;/h3&gt; &#xA;&lt;p&gt;This is completely valid but only if it&#39;s the only contents of the block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Shader {&#xA;  &#34;int foo = 10;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is fine anywhere:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Shader {&#xA;  RawGLSL(&#34;int foo = 10;&#34;)&#xA;  // or&#xA;  raw(&#34;int bar = 11;&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But this will not work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Shader {&#xA;  raw(&#34;int foo = 10;&#34;).trim&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because we can&#39;t do string-y things in GLSL, and trim is a string operation.&lt;/p&gt; &#xA;&lt;h3&gt;Pattern matching weirdness&lt;/h3&gt; &#xA;&lt;p&gt;A pattern match is converted to a switch statement, and in GLSL you can only switch on an Int. So far that&#39;s limiting, but ok.&lt;/p&gt; &#xA;&lt;p&gt;What is totally unintuitive is that on some graphics hardware, in some implmentations, switch statements will process &lt;em&gt;&lt;strong&gt;all&lt;/strong&gt;&lt;/em&gt; branches irrespective of whether they&#39;re going to be used or not.&lt;/p&gt; &#xA;&lt;p&gt;The problem with that, is that if you declare the same variable name in two branches, the GLSL compiler will fail and tell you that you&#39;ve redeclared it. Bonkers, but the takeaway is: Don&#39;t repeat variable names in pattern match branches...&lt;/p&gt; &#xA;&lt;h3&gt;Unofficial reserved words&lt;/h3&gt; &#xA;&lt;p&gt;When writing shaders in Scala, Scala reserved words will be checked and errors shown by the compiler.&lt;/p&gt; &#xA;&lt;p&gt;You shouldn&#39;t have too much trouble with GLSL reserved words because many of them have the same status in Scala, and Ultraviolets validation should catch all the others at compile time.&lt;/p&gt; &#xA;&lt;p&gt;Naming conventions to avoid:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do not call a function something like &lt;code&gt;def xy(v: vec4): ???&lt;/code&gt; because this will likely interfere with the Swizzle mechanisms (e.g. &lt;code&gt;vec3(1.0f).yx&lt;/code&gt;). Not at the point of definition but at the point of use.&lt;/li&gt; &#xA; &lt;li&gt;Do not name anything &lt;code&gt;val0...N&lt;/code&gt; or &lt;code&gt;def0...N&lt;/code&gt;, as this is the naming scheme UltraViolet uses internally when it needs to create identifiers, and you&#39;ll end up in a mess. The &lt;code&gt;val&lt;/code&gt; and &lt;code&gt;def&lt;/code&gt; prefixes where picked in the hope the Scala people would naturally avoid them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Comparison table&lt;/h2&gt; &#xA;&lt;p&gt;Only included are the differences or note worthy features. If they&#39;re the same in both languages they are omitted.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Scala&lt;/th&gt; &#xA;   &lt;th&gt;GLSL&lt;/th&gt; &#xA;   &lt;th&gt;Ultraviolet&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Recursion&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;A stack!&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Char&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uint&lt;/code&gt; / &lt;code&gt;uvec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Double&lt;/code&gt; / &lt;code&gt;dvec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;💡&lt;/td&gt; &#xA;   &lt;td&gt;You can define structs by declaring classes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;for loops&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;💡&lt;/td&gt; &#xA;   &lt;td&gt;In Scala, use the &lt;code&gt;cfor&lt;/code&gt; or &lt;code&gt;_for&lt;/code&gt; methods provided to simulate for-loops.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Imports&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Imported methods and values must be inlined.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Switch statements&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;💡&lt;/td&gt; &#xA;   &lt;td&gt;Scala does not have switch statements, but they can be expressed using pattern matching instead.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;If statements can return values&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pattern matches can return values&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;#define&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Use the &lt;code&gt;@define&lt;/code&gt; annotation. (see note below)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;const&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;@const&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uniform&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;@uniform&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;varying&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;out&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;@in&lt;/code&gt;, &lt;code&gt;@out&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;%&lt;/code&gt; (modulus op)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lambda/Anonymous functions&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;compose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;andThen&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Other comments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Although Ultraviolet is based primarily on GLSL 300, I&#39;ve kept &lt;code&gt;texture2D&lt;/code&gt; and &lt;code&gt;textureCube&lt;/code&gt; from WebGL 1.0 for clarity, and these are automatically rewritten to &lt;code&gt;texture&lt;/code&gt; for WebGL 2.0.&lt;/li&gt; &#xA; &lt;li&gt;Preprocessor directives largely don&#39;t exist, but &lt;code&gt;#define&lt;/code&gt; is supported for special cases where you need to define a global value based on a non-constant value.&lt;/li&gt; &#xA; &lt;li&gt;GLSL headers can be provided via &lt;code&gt;PrinterHeader&lt;/code&gt;s.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Things to know about inlining&lt;/h2&gt; &#xA;&lt;p&gt;Ultraviolet allows you to share / reuse code, as long as it is inlined following Scala 3&#39;s standard inlining rules. However there are things to know about how this will affect your GLSL!&lt;/p&gt; &#xA;&lt;p&gt;Here, &#39;external&#39; means &#39;not inside the body of your shader&#39;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You cannot inline external &lt;code&gt;val&lt;/code&gt;s.&lt;/li&gt; &#xA; &lt;li&gt;You can inline external &lt;code&gt;def&lt;/code&gt;s into your code, but: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A def that is essentially a call by reference val such as &lt;code&gt;inline def x = 1.0f&lt;/code&gt; will have it&#39;s value inlined.&lt;/li&gt; &#xA;   &lt;li&gt;A def that is a function, laid out like a method e.g. &lt;code&gt;inline def foo(c: Int): Int = c + 1&lt;/code&gt; will be inlined.&lt;/li&gt; &#xA;   &lt;li&gt;A def that is an anonymous function will be embedded with a new name and will work exactly as you&#39;d expect, i.e. &lt;code&gt;inline def foo: Int =&amp;gt; Int = c =&amp;gt; c + 1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>