<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-28T01:41:01Z</updated>
  <subtitle>Daily Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>1904labs/streaming-data-pipeline</title>
    <updated>2022-09-28T01:41:01Z</updated>
    <id>tag:github.com,2022-09-28:/1904labs/streaming-data-pipeline</id>
    <link href="https://github.com/1904labs/streaming-data-pipeline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Project as a part of the Hours with Experts - Data Engineering course.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hours with Experts - Streaming Data Pipeline&lt;/h1&gt; &#xA;&lt;p&gt;The code in this repository is a part of the &lt;a href=&#34;https://1904labs.com/our-culture/community/hours-with-experts/&#34;&gt;Hours with Experts&lt;/a&gt; course by &lt;a href=&#34;https://1904labs.com/&#34;&gt;1904labs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To start, clone this repo to your computer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/1904labs/streaming-data-pipeline.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TODO: Full instructions on &lt;a href=&#34;http://hourswith.expert/&#34;&gt;http://hourswith.expert/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are multiple projects inside this repository:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/1904labs/streaming-data-pipeline/main/scala-hello-world&#34;&gt;Scala practice project&lt;/a&gt; -- start here&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/1904labs/streaming-data-pipeline/main/kafka-hello-world&#34;&gt;Kafka practice project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/1904labs/streaming-data-pipeline/main/hbase-hello-world&#34;&gt;HBase practice project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/1904labs/streaming-data-pipeline/main/spark-hello-world&#34;&gt;Spark practice project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/1904labs/streaming-data-pipeline/main/streaming-data-pipeline&#34;&gt;Streaming data pipeline final project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>opendiffy/diffy</title>
    <updated>2022-09-28T01:41:01Z</updated>
    <id>tag:github.com,2022-09-28:/opendiffy/diffy</id>
    <link href="https://github.com/opendiffy/diffy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Diffy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/opendiffy/diffy&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/opendiffy/diffy/master.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/opendiffy/diffy&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/opendiffy/diffy/master.svg?sanitize=true&#34; alt=&#34;Coverage status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/opendiffy/diffy/master/#status&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/status-active-brightgreen.svg?sanitize=true&#34; alt=&#34;Project status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/opendiffy/diffy&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter-join%20chat-green.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/diffy/diffy&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/diffy/diffy&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opendiffy/diffy/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/opendiffy/diffy/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/legalcode&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-CC%20BY%20NC%20ND-blue.svg?sanitize=true&#34; alt=&#34;License: CC&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Diffy is used in production at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://engineering.mixpanel.com/safely-rewriting-mixpanels-highest-throughput-service-in-golang-mixpanel-engineering-62cd69b5ebdb&#34;&gt;Mixpanel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Airbnb &lt;a href=&#34;https://www.infoq.com/presentations/airbnb-services-scalability/&#34;&gt;(Scalabity)&lt;/a&gt; &lt;a href=&#34;https://www.infoq.com/presentations/airbnb-soa-migration/&#34;&gt;(Migration)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.twitter.com/engineering/en_us/a/2015/diffy-testing-services-without-writing-tests.html&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Baidu&lt;/li&gt; &#xA; &lt;li&gt;Bytedance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and blogged about by cloud infrastructure providers like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://microsoft.github.io/code-with-engineering-playbook/automated-testing/shadow-testing/&#34;&gt;Microsoft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/architecture/application-deployment-and-testing-strategies#shadow_test_pattern&#34;&gt;Google&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alibabacloud.com/blog/traffic-management-with-istio-3-traffic-comparison-analysis-based-on-istio_594545&#34;&gt;Alibaba Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.getambassador.io/next-level-testing-with-an-api-gateway-and-continuous-delivery-9cbb9c4564b5&#34;&gt;Datawire&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your organization is using Diffy, consider adding a link here and sending us a pull request!&lt;/p&gt; &#xA;&lt;p&gt;Diffy is being actively developed and maintained by the engineering team at &lt;a href=&#34;https://www.sn126.com&#34;&gt;Sn126&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to contact us via &lt;a href=&#34;https://www.linkedin.com/company/diffy&#34;&gt;linkedin&lt;/a&gt;, &lt;a href=&#34;https://gitter.im/opendiffy/diffy&#34;&gt;gitter&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/diffyproject&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is Diffy?&lt;/h2&gt; &#xA;&lt;p&gt;Diffy finds potential bugs in your service using running instances of your new code and your old code side by side. Diffy behaves as a proxy and multicasts whatever requests it receives to each of the running instances. It then compares the responses, and reports any regressions that may surface from those comparisons. The premise for Diffy is that if two implementations of the service return “similar” responses for a sufficiently large and diverse set of requests, then the two implementations can be treated as equivalent and the newer implementation is regression-free.&lt;/p&gt; &#xA;&lt;h2&gt;How does Diffy work?&lt;/h2&gt; &#xA;&lt;p&gt;Diffy acts as a proxy that accepts requests drawn from any source that you provide and multicasts each of those requests to three different service instances:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A candidate instance running your new code&lt;/li&gt; &#xA; &lt;li&gt;A primary instance running your last known-good code&lt;/li&gt; &#xA; &lt;li&gt;A secondary instance running the same known-good code as the primary instance&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As Diffy receives a request, it is multicast and sent to your candidate, primary, and secondary instances. When those services send responses back, Diffy compares those responses and looks for two things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Raw differences observed between the candidate and primary instances.&lt;/li&gt; &#xA; &lt;li&gt;Non-deterministic noise observed between the primary and secondary instances. Since both of these instances are running known-good code, you should expect responses to be in agreement. If not, your service may have non-deterministic behavior, which is to be expected. &lt;img src=&#34;https://raw.githubusercontent.com/opendiffy/diffy/master/images/diffy_topology.png&#34; alt=&#34;Diffy Topology&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Diffy measures how often primary and secondary disagree with each other vs. how often primary and candidate disagree with each other. If these measurements are roughly the same, then Diffy determines that there is nothing wrong and that the error can be ignored.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;If you are new to Diffy, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/opendiffy/diffy/master/QUICKSTART.md&#34;&gt;Quickstart&lt;/a&gt; guide. If you are looking for advanced deployment configurations, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/opendiffy/diffy/master/ADVANCED.md&#34;&gt;Advanced&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;Please reach out to &lt;a href=&#34;mailto:isotope@sn126.com&#34;&gt;isotope@sn126.com&lt;/a&gt; for support. We look forward to hearing from you.&lt;/p&gt; &#xA;&lt;h3&gt;Code of Conduct&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Bug reports are welcome even if submitted anonymously via fresh github accounts.&lt;/li&gt; &#xA; &lt;li&gt;Anonymous feature and support requests will be ignored.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (C) 2019 Sn126, Inc.&#xA;&#xA;This license allows reusers to copy and distribute the material in &#xA;any medium or format in unadapted form only, for noncommercial purposes &#xA;only, and only so long as attribution is given to the creator. &#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License&#xA;for more details.&#xA;&#xA;You should have received a copy of the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0&#xA;International Public License along with this program. If not, see &#xA;https://creativecommons.org/licenses/by-nc-nd/4.0/.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>gtri-iead/org.gtri.util.iteratee</title>
    <updated>2022-09-28T01:41:01Z</updated>
    <id>tag:github.com,2022-09-28:/gtri-iead/org.gtri.util.iteratee</id>
    <link href="https://github.com/gtri-iead/org.gtri.util.iteratee" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Java interface-front-ended library implemented in Scala for streaming objects between producers and consumers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;org.gtri.util.iteratee&lt;/h1&gt; &#xA;&lt;p&gt;A Java interface-front-ended library implemented in Scala for streaming objects between producers(enumerators) and consumers(iteratees).&lt;/p&gt; &#xA;&lt;h3&gt;Usage Example (Java)&lt;/h3&gt; The following example enumerates an array of integers to an iteratee that simply prints them. ```Java IterateeFactory factory = new IterateeFactory(); Array&#xA;&lt;integer&gt;&#xA;  ints = { 1,2,3 } Enumerator&#xA; &lt;integer&gt;&#xA;   intProducer = new TestEnumerator&#xA;  &lt;integer&gt;&#xA;   (ints); Iteratee&#xA;   &lt;integer,string&gt;&#xA;     intToString = new TestIntToStringTranslator(); Iteratee&#xA;    &lt;string, unit&gt;&#xA;      printer = new TestPrintConsumer&#xA;     &lt;string&gt;&#xA;      (); factory.createPlan(integerProducer, intToString, stringConsumer).run(); assertTrue(result.statusCode().isSuccess()); ``` &#xA;      &lt;h3&gt;Iteratee Implementation Example (Scala)&lt;/h3&gt; An iteratee implementation that prints all input chunks it receives. ```Scala import org.gtri.util.iteratee.api._ import org.gtri.util.iteratee.impl.Iteratees._ import org.gtri.util.iteratee.impl.Iteratees import org.gtri.util.iteratee.impl.ImmutableBuffers.Conversions._ &#xA;      &lt;p&gt;class TestPrintConsumer[A] extends Iteratee[A, Unit] { case class Cont&lt;a href=&#34;&#34;&gt;A&lt;/a&gt; extends Iteratees.Cont[A, Unit] { def apply(items: ImmutableBuffer[A]) = { println(&#34;received=&#34; + items) for (item &amp;lt;- items) { println(item) } Result(this) }&lt;/p&gt; &#xA;      &lt;pre&gt;&lt;code&gt;def endOfInput() = Result(Success())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;p&gt;}&lt;/p&gt; &#xA;      &lt;p&gt;def initialState = Cont() }&lt;/p&gt; &#xA;      &lt;pre&gt;&lt;code&gt;&amp;lt;h3&amp;gt;Enumeratee Implementation Example (Scala)&amp;lt;/h3&amp;gt;&#xA;An enumerator implementation for any java.util.Iterator that groups output into chunks&#xA;```Scala&#xA;import scala.collection.immutable.Traversable&#xA;import org.gtri.util.iteratee.api&#xA;import api._&#xA;import scala.collection.JavaConversions._&#xA;import org.gtri.util.iteratee.impl.SeqEnumerator&#xA;&#xA;class TestEnumerator[A](iterable : java.lang.Iterable[A], chunkSize : java.lang.Integer) extends Enumerator[A] {&#xA;&#xA;  def initialState = new SeqEnumerator(iterable.iterator.toStream,chunkSize).initialState&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;h3&gt;Translating Iteratee Implementation Example (Scala)&lt;/h3&gt; An iteratee implementation that translates an integer to a string. ```Scala import org.gtri.util.iteratee.api._ import org.gtri.util.iteratee.impl.Iteratees._ import org.gtri.util.iteratee.impl.Iteratees import org.gtri.util.iteratee.impl.ImmutableBuffers.Conversions._ &#xA;      &lt;p&gt;class TestIntToStringTranslator extends Iteratee[java.lang.Integer, String] { class Cont extends Iteratees.Cont[java.lang.Integer,String] {&lt;/p&gt; &#xA;      &lt;pre&gt;&lt;code&gt;def apply(items: ImmutableBuffer[java.lang.Integer]) = {&#xA;  println(&#34;translating=&#34; + items)&#xA;  val nextOutput = items.foldLeft(List[String]()) {&#xA;    (list,item) =&amp;gt; {&#xA;      item.toString :: list&#xA;    }&#xA;  }&#xA;  Result(this, nextOutput)&#xA;}&#xA;&#xA;def endOfInput() = Result(Success())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;p&gt;}&lt;/p&gt; &#xA;      &lt;p&gt;def initialState = new Cont() }&lt;/p&gt; &#xA;      &lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/string&gt;&#xA;    &lt;/string,&gt;&#xA;   &lt;/integer,string&gt;&#xA;  &lt;/integer&gt;&#xA; &lt;/integer&gt;&#xA;&lt;/integer&gt;</summary>
  </entry>
</feed>