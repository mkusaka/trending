<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-09T02:04:33Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OpenXiangShan/chisel-playground</title>
    <updated>2023-07-09T02:04:33Z</updated>
    <id>tag:github.com,2023-07-09:/OpenXiangShan/chisel-playground</id>
    <link href="https://github.com/OpenXiangShan/chisel-playground" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chisel Project Template&lt;/h1&gt; &#xA;&lt;p&gt;Another version of the &lt;a href=&#34;https://github.com/ucb-bar/chisel-template&#34;&gt;Chisel template&lt;/a&gt; supporting mill. mill is another Scala/Java build tool without obscure DSL like SBT. It is much faster than SBT.&lt;/p&gt; &#xA;&lt;p&gt;Contents at a glance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt; - helps Git ignore junk like generated files, build products, and temporary files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build.sc&lt;/code&gt; - instructs mill to build the Chisel project&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt; - rules to call mill&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;playground/src/GCD.scala&lt;/code&gt; - GCD source file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;playground/src/DecoupledGCD.scala&lt;/code&gt; - another GCD source file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;playground/src/Elaborate.scala&lt;/code&gt; - wrapper file to call chisel command with the GCD module&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;playground/test/src/GCDSpec.scala&lt;/code&gt; - GCD tester&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feel free to rename or delete files under &lt;code&gt;playground/&lt;/code&gt; or use them as a reference/template.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;First, install mill by referring to the documentation &lt;a href=&#34;https://com-lihaoyi.github.io/mill&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run all tests in this design (recommended for test-driven development):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate Verilog:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make verilog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change FIRRTL Compiler&lt;/h2&gt; &#xA;&lt;p&gt;You can change the FIRRTL compiler between SFC (Scala-based FIRRTL compiler) and MFC (MLIR-based FIRRTL compiler) by modifying the &lt;code&gt;useMFC&lt;/code&gt; variable in &lt;code&gt;playground/src/Elaborate.scala&lt;/code&gt;. The latter one requires &lt;code&gt;firtool&lt;/code&gt;, which is included under &lt;code&gt;utils/&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>softwaremill/sttp</title>
    <updated>2023-07-09T02:04:33Z</updated>
    <id>tag:github.com,2023-07-09:/softwaremill/sttp</id>
    <link href="https://github.com/softwaremill/sttp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Scala HTTP client you always wanted!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/softwaremill/sttp/raw/master/banner.png&#34; alt=&#34;sttp&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://softwaremill.community/c/sttp-client&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discourse-ask%20question-blue&#34; alt=&#34;Ideas, suggestions, problems, questions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/softwaremill/sttp/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/sttp/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.softwaremill.sttp.client4/core_2.12&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.softwaremill.sttp.client4/core_2.12/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/softwaremill/sttp&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/open%20in-gitpod-blue&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The Scala HTTP client that you always wanted!&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is the development version of the upcoming sttp client 4. For the current stable version, see &lt;a href=&#34;https://github.com/softwaremill/sttp/tree/v3&#34;&gt;sttp 3 on GitHub&lt;/a&gt; and its &lt;a href=&#34;https://sttp.softwaremill.com/en/stable&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Welcome!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/softwaremill/sttp&#34;&gt;sttp client&lt;/a&gt; is an open-source library which provides a clean, programmer-friendly API to describe HTTP requests and how to handle responses. Requests are sent using one of the backends, which wrap lower-level Scala or Java HTTP client implementations. The backends can integrate with a variety of Scala stacks, providing both synchronous and asynchronous, procedural and functional interfaces.&lt;/p&gt; &#xA;&lt;p&gt;Backend implementations include the HTTP client that is shipped with Java, as well as ones based on &lt;a href=&#34;https://doc.akka.io/docs/akka-http/current/scala/http/&#34;&gt;akka-http&lt;/a&gt;, &lt;a href=&#34;https://http4s.org&#34;&gt;http4s&lt;/a&gt;, &lt;a href=&#34;http://square.github.io/okhttp/&#34;&gt;OkHttp&lt;/a&gt;. They integrate with &lt;a href=&#34;https://akka.io&#34;&gt;Akka&lt;/a&gt;, &lt;a href=&#34;https://monix.io&#34;&gt;Monix&lt;/a&gt;, &lt;a href=&#34;https://github.com/functional-streams-for-scala/fs2&#34;&gt;fs2&lt;/a&gt;, &lt;a href=&#34;https://github.com/typelevel/cats-effect&#34;&gt;cats-effect&lt;/a&gt;, &lt;a href=&#34;https://github.com/scalaz/scalaz&#34;&gt;scalaz&lt;/a&gt; and &lt;a href=&#34;https://github.com/zio/zio&#34;&gt;ZIO&lt;/a&gt;. Supported Scala versions include 2.12, 2.13 and 3, Scala.JS and Scala Native; supported Java versions include 11+.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a quick example of sttp client in action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import sttp.client4._&#xA;&#xA;val sort: Option[String] = None&#xA;val query = &#34;http language:scala&#34;&#xA;&#xA;// the `query` parameter is automatically url-encoded&#xA;// `sort` is removed, as the value is not defined&#xA;val request = basicRequest.get(uri&#34;https://api.github.com/search/repositories?q=$query&amp;amp;sort=$sort&#34;)&#xA;  &#xA;val backend = DefaultSyncBackend()&#xA;val response = request.send(backend)&#xA;&#xA;// response.header(...): Option[String]&#xA;println(response.header(&#34;Content-Length&#34;)) &#xA;&#xA;// response.body: by default read into an Either[String, String] to indicate failure or success &#xA;println(response.body)                                 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;sttp (v4) documentation is available at &lt;a href=&#34;https://sttp.softwaremill.com/en/latest&#34;&gt;sttp.softwaremill.com/en/latest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;sttp (v3) documentation is available at &lt;a href=&#34;https://sttp.softwaremill.com/en/stable&#34;&gt;sttp.softwaremill.com/en/stable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;sttp (v2) documentation is available at &lt;a href=&#34;https://sttp.softwaremill.com/en/v2&#34;&gt;sttp.softwaremill.com/en/v2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;sttp (v1) documentation is available at &lt;a href=&#34;https://sttp.softwaremill.com/en/v1&#34;&gt;sttp.softwaremill.com/en/v1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;scaladoc is available at &lt;a href=&#34;https://www.javadoc.io/doc/com.softwaremill.sttp.client4/core_2.12/4.0.0-M2&#34;&gt;https://www.javadoc.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart with scala-cli&lt;/h2&gt; &#xA;&lt;p&gt;Add the following directive to the top of your scala file to add the core sttp dependency: If you are using &lt;a href=&#34;https://scala-cli.virtuslab.org&#34;&gt;scala-cli&lt;/a&gt;, you can quickly start experimenting with sttp by copy-pasting the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;//&amp;gt; using lib &#34;com.softwaremill.sttp.client4::core:4.0.0-M2&#34;&#xA;import sttp.client4.quick._&#xA;quickRequest.get(uri&#34;http://httpbin.org/ip&#34;).send()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;quick&lt;/code&gt; package import brings in the sttp API and a pre-configured, global synchronous backend instance.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart with Ammonite&lt;/h2&gt; &#xA;&lt;p&gt;Similarly, using &lt;a href=&#34;http://ammonite.io&#34;&gt;Ammonite&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import $ivy.`com.softwaremill.sttp.client4::core:4.0.0-M2`&#xA;import sttp.client4.quick._&#xA;quickRequest.get(uri&#34;http://httpbin.org/ip&#34;).send()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart with sbt&lt;/h2&gt; &#xA;&lt;p&gt;Add the following dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;&#34;com.softwaremill.sttp.client4&#34; %% &#34;core&#34; % &#34;4.0.0-M2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import sttp.client4._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Type &lt;code&gt;basicRequest.&lt;/code&gt; and see where your IDEâ€™s auto-complete gets you!&lt;/p&gt; &#xA;&lt;h2&gt;Other sttp projects&lt;/h2&gt; &#xA;&lt;p&gt;sttp is a family of Scala HTTP-related projects, and currently includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sttp client: this project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/softwaremill/tapir&#34;&gt;sttp tapir&lt;/a&gt;: Typed API descRiptions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/softwaremill/sttp-model&#34;&gt;sttp model&lt;/a&gt;: simple HTTP model classes (used by client &amp;amp; tapir)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/softwaremill/sttp-shared&#34;&gt;sttp shared&lt;/a&gt;: shared web socket, FP abstractions, capabilities and streaming code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/softwaremill/sttp-apispec&#34;&gt;sttp apispec&lt;/a&gt;: OpenAPI, AsyncAPI and JSON Schema models.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you have a question, suggestion, or hit a problem, feel free to ask on our &lt;a href=&#34;https://softwaremill.community/c/sttp-client&#34;&gt;discourse forum&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Or, if you encounter a bug, something is unclear in the code or documentation, donâ€™t hesitate and open an issue on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;We are also always looking for contributions and new ideas, so if youâ€™d like to get into the project, check out the &lt;a href=&#34;https://github.com/softwaremill/sttp/issues&#34;&gt;open issues&lt;/a&gt;, or post your own suggestions!&lt;/p&gt; &#xA;&lt;p&gt;Note that running the default &lt;code&gt;test&lt;/code&gt; task will run the tests using both the JVM and JS backends, and is likely to run out of memory. If you&#39;d like to run the tests using &lt;em&gt;only&lt;/em&gt; the JVM backend, execute: &lt;code&gt;sbt rootJVM/test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Importing into IntelliJ&lt;/h3&gt; &#xA;&lt;p&gt;By default, when importing to IntelliJ or Metals, only the Scala 2.13/JVM subprojects will be imported. This is controlled by the &lt;code&gt;ideSkipProject&lt;/code&gt; setting in &lt;code&gt;build.sbt&lt;/code&gt; (inside &lt;code&gt;commonSettings&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to work on a different platform or Scala version, simply change this setting temporarily so that the correct subprojects are imported. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// import only Scala 2.13, JS projects&#xA;ideSkipProject := (scalaVersion.value != scala2_13) || !thisProjectRef.value.project.contains(&#34;JS&#34;)&#xA;&#xA;// import only Scala 3, JVM projects&#xA;ideSkipProject := (scalaVersion.value != scala3) || thisProjectRef.value.project.contains(&#34;JS&#34;) || thisProjectRef.value.project.contains(&#34;Native&#34;),&#xA;&#xA;// import only Scala 2.13, Native projects&#xA;ideSkipProject := (scalaVersion.value != scala2_13) || !thisProjectRef.value.project.contains(&#34;Native&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modifying documentation&lt;/h3&gt; &#xA;&lt;p&gt;The documentation is typechecked using &lt;a href=&#34;https://scalameta.org/mdoc/&#34;&gt;mdoc&lt;/a&gt;. The sources for the documentation exist in &lt;code&gt;docs&lt;/code&gt;. Don&#39;t modify the generated documentation in &lt;code&gt;generated-docs&lt;/code&gt;, as these files will get overwritten!&lt;/p&gt; &#xA;&lt;p&gt;When generating documentation, it&#39;s best to set the version to the current one, so that the generated doc files don&#39;t include modifications with the current snapshot version.&lt;/p&gt; &#xA;&lt;p&gt;That is, in sbt run: &lt;code&gt;set version := &#34;4.0.0-M2&#34;&lt;/code&gt;, before running &lt;code&gt;mdoc&lt;/code&gt; in &lt;code&gt;docs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Testing the Scala.JS backend&lt;/h3&gt; &#xA;&lt;p&gt;In order to run tests against JS backend you will need to install &lt;a href=&#34;https://www.google.com/chrome/&#34;&gt;Google Chrome&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building &amp;amp; testing the scala-native backend&lt;/h3&gt; &#xA;&lt;p&gt;By default, sttp-native will &lt;strong&gt;not&lt;/strong&gt; be included in the aggregate build of the root project. To include it, define the &lt;code&gt;STTP_NATIVE&lt;/code&gt; environmental variable before running sbt, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;STTP_NATIVE=1 sbt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might need to install some additional libraries, see the &lt;a href=&#34;http://www.scala-native.org/en/latest/user/setup.html&#34;&gt;scala native&lt;/a&gt; documentation site. On macos, you might additionally need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ln -s /usr/local/opt/openssl/lib/libcrypto.dylib /usr/local/lib/&#xA;ln -s /usr/local/opt/openssl/lib/libssl.dylib /usr/local/lib/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commercial Support&lt;/h2&gt; &#xA;&lt;p&gt;We offer commercial support for sttp and related technologies, as well as development services. &lt;a href=&#34;https://softwaremill.com&#34;&gt;Contact us&lt;/a&gt; to learn more about our offer!&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2017-2023 SoftwareMill &lt;a href=&#34;https://softwaremill.com&#34;&gt;https://softwaremill.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>efuquen/play-cljs</title>
    <updated>2023-07-09T02:04:33Z</updated>
    <id>tag:github.com,2023-07-09:/efuquen/play-cljs</id>
    <link href="https://github.com/efuquen/play-cljs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>