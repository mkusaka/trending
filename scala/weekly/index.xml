<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:45:12Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>feathr-ai/feathr</title>
    <updated>2022-09-25T01:45:12Z</updated>
    <id>tag:github.com,2022-09-25:/feathr-ai/feathr</id>
    <link href="https://github.com/feathr-ai/feathr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Feathr ‚Äì An Enterprise-Grade, High Performance Feature Store&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Feathr &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; An enterprise-grade, high-performance feature store &lt;/h3&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Important Links: &lt;a href=&#34;https://join.slack.com/t/feathrai/shared_invite/zt-1ffva5u6v-voq0Us7bbKAw873cEzHOSg&#34;&gt;Slack&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/feathr-ai/feathr/discussions&#34;&gt;Discussions&lt;/a&gt;. &lt;a href=&#34;https://feathr-ai.github.io/feathr/&#34;&gt;Docs&lt;/a&gt;. &lt;/h3&gt;  &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/feathr-ai/feathr/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/feathr-ai/feathr/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/feathr-ai/feathr.svg?style=flat&amp;amp;sort=semver&amp;amp;color=blue&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://feathr-ai.github.io/feathr/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-blue.svg?sanitize=true&#34; alt=&#34;Docs Latest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://feathr.readthedocs.io/en/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/readthedocs/feathr?label=Python%20API&#34; alt=&#34;Python API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/6457&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/6457/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Feathr?&lt;/h2&gt; &#xA;&lt;p&gt;Feathr is the feature store that is used in production in LinkedIn for many years and was open sourced in April 2022. It is currently a project under &lt;a href=&#34;https://lfaidata.foundation/blog/2022/09/12/feathr-joins-lf-ai-data-as-new-sandbox-project/&#34;&gt;LF AI &amp;amp; Data Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read our announcement on &lt;a href=&#34;https://engineering.linkedin.com/blog/2022/open-sourcing-feathr---linkedin-s-feature-store-for-productive-m&#34;&gt;Open Sourcing Feathr&lt;/a&gt; and &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/feathr-linkedin-s-feature-store-is-now-available-on-azure/&#34;&gt;Feathr on Azure&lt;/a&gt;, as well as the &lt;a href=&#34;https://lfaidata.foundation/blog/2022/09/12/feathr-joins-lf-ai-data-as-new-sandbox-project/&#34;&gt;announcement from LF AI &amp;amp; Data Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feathr lets you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Define features&lt;/strong&gt; based on raw data sources (batch and streaming) using pythonic APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Register and get features by names&lt;/strong&gt; during model training and model inference.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Share features&lt;/strong&gt; across your team and company.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feathr automatically computes your feature values and joins them to your training data, using point-in-time-correct semantics to avoid data leakage, and supports materializing and deploying your features for use online in production.&lt;/p&gt; &#xA;&lt;h2&gt;üåü Feathr Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battle tested in production for more than 6 years:&lt;/strong&gt; LinkedIn has been using Feathr in production for over 6 years and have a dedicated team improving it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalable with built-in optimizations:&lt;/strong&gt; For example, based on some internal use case, Feathr can process billions of rows and PB scale data with built-in optimizations such as bloom filters and salted joins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich support for point-in-time joins and aggregations:&lt;/strong&gt; Feathr has high performant built-in operators designed for Feature Store, including time-based aggregation, sliding window joins, look-up features, all with point-in-time correctness.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly customizable user-defined functions (UDFs)&lt;/strong&gt; with native PySpark and Spark SQL support to lower the learning curve for data scientists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pythonic APIs&lt;/strong&gt; to access everything with low learning curve; Integrated with model building so data scientists can be productive from day one.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Derived Features&lt;/strong&gt; which is a unique capability across all the feature store solutions. This encourage feature consumers to build features on existing features and encouraging feature reuse.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich type system&lt;/strong&gt; including support for embeddings for advanced machine learning/deep learning scenarios. One of the common use cases is to build embeddings for customer profiles, and those embeddings can be reused across an organization in all the machine learning applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native cloud integration&lt;/strong&gt; with simplified and scalable architecture, which is illustrated in the next section.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature sharing and reuse made easy:&lt;/strong&gt; Feathr has built-in feature registry so that features can be easily shared across different teams and boost team productivity.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚òÅÔ∏è Running Feathr on Cloud with a few simple steps&lt;/h2&gt; &#xA;&lt;p&gt;Feathr has native integrations with Databricks and Azure Synapse:&lt;/p&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://feathr-ai.github.io/feathr/how-to-guides/azure-deployment-arm.html&#34;&gt;Feathr ARM deployment guide&lt;/a&gt; to run Feathr on Azure. This allows you to quickly get started with automated deployment using Azure Resource Manager template.&lt;/p&gt; &#xA;&lt;p&gt;If you want to set up everything manually, you can checkout the &lt;a href=&#34;https://feathr-ai.github.io/feathr/how-to-guides/azure-deployment-cli.html&#34;&gt;Feathr CLI deployment guide&lt;/a&gt; to run Feathr on Azure. This allows you to understand what is going on and set up one resource at a time.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/quickstart_databricks.md&#34;&gt;Quick Start Guide for Feathr on Databricks&lt;/a&gt; to run Feathr with Databricks.&lt;/li&gt; &#xA; &lt;li&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/quickstart_synapse.md&#34;&gt;Quick Start Guide for Feathr on Azure Synapse&lt;/a&gt; to run Feathr with Azure Synapse.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìì Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For more details on Feathr, read our &lt;a href=&#34;https://feathr-ai.github.io/feathr/&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For Python API references, read the &lt;a href=&#34;https://feathr.readthedocs.io/&#34;&gt;Python API Reference&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For technical talks on Feathr, see the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/talks/Feathr%20Feature%20Store%20Talk.pdf&#34;&gt;slides here&lt;/a&gt;. The recording is &lt;a href=&#34;https://www.youtube.com/watch?v=gZg01UKQMTY&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Install Feathr Client Locally&lt;/h2&gt; &#xA;&lt;p&gt;If you want to install Feathr client in a python environment, use this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install feathr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use the latest code from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/feathr-ai/feathr.git#subdirectory=feathr_project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üî° Feathr Highlighted Capabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/concepts/feathr-capabilities.md&#34;&gt;Feathr Full Capabilities&lt;/a&gt; for more examples. Below are a few selected ones:&lt;/p&gt; &#xA;&lt;h3&gt;Feathr UI&lt;/h3&gt; &#xA;&lt;p&gt;Feathr provides an intuitive UI so you can search and explore all the available features and their corresponding lineages.&lt;/p&gt; &#xA;&lt;p&gt;You can use Feathr UI to search features, identify data sources, track feature lineages and manage access controls. Check out the latest live demo &lt;a href=&#34;https://aka.ms/feathrdemo&#34;&gt;here&lt;/a&gt; to see what Feathr UI can do for you. Use one of following accounts when you are prompted to login:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A work or school organization account, includes Office 365 subscribers.&lt;/li&gt; &#xA; &lt;li&gt;Microsoft personal account, this means an account can access to Skype, Outlook.com, OneDrive, and Xbox LIVE.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/images/feathr-ui.png&#34; alt=&#34;Feathr UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information on the Feathr UI and the registry behind it, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/concepts/feature-registry.md&#34;&gt;Feathr Feature Registry&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Rich UDF Support&lt;/h3&gt; &#xA;&lt;p&gt;Feathr has highly customizable UDFs with native PySpark and Spark SQL integration to lower learning curve for data scientists:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add_new_dropoff_and_fare_amount_column(df: DataFrame):&#xA;    df = df.withColumn(&#34;f_day_of_week&#34;, dayofweek(&#34;lpep_dropoff_datetime&#34;))&#xA;    df = df.withColumn(&#34;fare_amount_cents&#34;, df.fare_amount.cast(&#39;double&#39;) * 100)&#xA;    return df&#xA;&#xA;batch_source = HdfsSource(name=&#34;nycTaxiBatchSource&#34;,&#xA;                        path=&#34;abfss://feathrazuretest3fs@feathrazuretest3storage.dfs.core.windows.net/demo_data/green_tripdata_2020-04.csv&#34;,&#xA;                        preprocessing=add_new_dropoff_and_fare_amount_column,&#xA;                        event_timestamp_column=&#34;new_lpep_dropoff_datetime&#34;,&#xA;                        timestamp_format=&#34;yyyy-MM-dd HH:mm:ss&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Defining Window Aggregation Features with Point-in-time correctness&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agg_features = [Feature(name=&#34;f_location_avg_fare&#34;,&#xA;                        key=location_id,                          # Query/join key of the feature(group)&#xA;                        feature_type=FLOAT,&#xA;                        transform=WindowAggTransformation(        # Window Aggregation transformation&#xA;                            agg_expr=&#34;cast_float(fare_amount)&#34;,&#xA;                            agg_func=&#34;AVG&#34;,                       # Apply average aggregation over the window&#xA;                            window=&#34;90d&#34;)),                       # Over a 90-day window&#xA;                ]&#xA;&#xA;agg_anchor = FeatureAnchor(name=&#34;aggregationFeatures&#34;,&#xA;                           source=batch_source,&#xA;                           features=agg_features)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Define features on top of other features - Derived Features&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Compute a new feature(a.k.a. derived feature) on top of an existing feature&#xA;derived_feature = DerivedFeature(name=&#34;f_trip_time_distance&#34;,&#xA;                                 feature_type=FLOAT,&#xA;                                 key=trip_key,&#xA;                                 input_features=[f_trip_distance, f_trip_time_duration],&#xA;                                 transform=&#34;f_trip_distance * f_trip_time_duration&#34;)&#xA;&#xA;# Another example to compute embedding similarity&#xA;user_embedding = Feature(name=&#34;user_embedding&#34;, feature_type=DENSE_VECTOR, key=user_key)&#xA;item_embedding = Feature(name=&#34;item_embedding&#34;, feature_type=DENSE_VECTOR, key=item_key)&#xA;&#xA;user_item_similarity = DerivedFeature(name=&#34;user_item_similarity&#34;,&#xA;                                      feature_type=FLOAT,&#xA;                                      key=[user_key, item_key],&#xA;                                      input_features=[user_embedding, item_embedding],&#xA;                                      transform=&#34;cosine_similarity(user_embedding, item_embedding)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Define Streaming Features&lt;/h3&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://feathr-ai.github.io/feathr/how-to-guides/streaming-source-ingestion.html&#34;&gt;Streaming Source Ingestion Guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Point in Time Joins&lt;/h3&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://feathr-ai.github.io/feathr/concepts/point-in-time-join.html&#34;&gt;Point-in-time Correctness and Point-in-time Join in Feathr&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Running Feathr Examples&lt;/h3&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/samples/product_recommendation_demo.ipynb&#34;&gt;quick start Jupyter Notebook&lt;/a&gt; to try it out. There is also a companion &lt;a href=&#34;https://feathr-ai.github.io/feathr/quickstart_synapse.html&#34;&gt;quick start guide&lt;/a&gt; containing a bit more explanation on the notebook.&lt;/p&gt; &#xA;&lt;h2&gt;üó£Ô∏è Tech Talks on Feathr&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gZg01UKQMTY&#34;&gt;Introduction to Feathr - Beginner&#39;s guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mybuild.microsoft.com/en-US/sessions/5bdff7d5-23e6-4f0d-9175-da8325d05c2a?source=sessions&#34;&gt;Document Intelligence using Azure Feature Store (Feathr) and SynapseML &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2KSM-NLfvY0&#34;&gt;Notebook tutorial: Build a Product Recommendation Machine Learning Model with Feathr Feature Store&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Cloud Integrations and Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/images/architecture.png&#34; alt=&#34;Architecture Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feathr component&lt;/th&gt; &#xA;   &lt;th&gt;Cloud Integrations&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Offline store ‚Äì Object Store&lt;/td&gt; &#xA;   &lt;td&gt;Azure Blob Storage, Azure ADLS Gen2, AWS S3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Offline store ‚Äì SQL&lt;/td&gt; &#xA;   &lt;td&gt;Azure SQL DB, Azure Synapse Dedicated SQL Pools, Azure SQL in VM, Snowflake&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Streaming Source&lt;/td&gt; &#xA;   &lt;td&gt;Kafka, EventHub&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Online store&lt;/td&gt; &#xA;   &lt;td&gt;Redis, &lt;a href=&#34;https://feathr-ai.github.io/feathr/how-to-guides/jdbc-cosmos-notes.html#using-cosmosdb-as-the-online-store&#34;&gt;Azure Cosmos DB&lt;/a&gt;, Aerospike (coming soon)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Feature Registry and Governance&lt;/td&gt; &#xA;   &lt;td&gt;Azure Purview, ANSI SQL such as Azure SQL Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compute Engine&lt;/td&gt; &#xA;   &lt;td&gt;Azure Synapse Spark Pools, Databricks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Machine Learning Platform&lt;/td&gt; &#xA;   &lt;td&gt;Azure Machine Learning, Jupyter Notebook, Databricks Notebook&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Format&lt;/td&gt; &#xA;   &lt;td&gt;Parquet, ORC, Avro, JSON, Delta Lake, CSV&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Credentials&lt;/td&gt; &#xA;   &lt;td&gt;Azure Key Vault&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üöÄ Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support streaming features with transformation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support common data sources and sinks. Read more in the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/#%EF%B8%8F-cloud-integrations-and-architecture&#34;&gt;Cloud Integrations and Architecture&lt;/a&gt; part.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support feature store UI, including Lineage and Search functionalities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support a sandbox Feathr environment for better getting started experience&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support online transformation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More Feathr online client libraries such as Java&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support feature versioning&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support feature monitoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support feature data deletion and retention&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üë®‚Äçüë®‚Äçüë¶‚Äçüë¶ Community Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;Build for the community and build by the community. Check out &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/CONTRIBUTING.md&#34;&gt;Community Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üì¢ Slack Channel&lt;/h2&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://feathrai.slack.com&#34;&gt;Slack channel&lt;/a&gt; for questions and discussions (or click the &lt;a href=&#34;https://join.slack.com/t/feathrai/shared_invite/zt-1ffva5u6v-voq0Us7bbKAw873cEzHOSg&#34;&gt;invitation link&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>VirtusLab/iskra</title>
    <updated>2022-09-25T01:45:12Z</updated>
    <id>tag:github.com,2022-09-25:/VirtusLab/iskra</id>
    <link href="https://github.com/VirtusLab/iskra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Typesafe wrapper for Apache Spark DataFrame API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Iskra&lt;/h1&gt; &#xA;&lt;p&gt;Iskra is a Scala 3 wrapper around Apache Spark API which allows writing typesafe and boilerplate-free but still efficient Spark code.&lt;/p&gt; &#xA;&lt;h2&gt;How is it possible to write Spark applications in Scala 3?&lt;/h2&gt; &#xA;&lt;p&gt;Starting from the release of 3.2.0, Spark is cross-compiled also for Scala 2.13, which opens a way to using Spark from Scala 3 code, as Scala 3 projects can depend on Scala 2.13 artifacts.&lt;/p&gt; &#xA;&lt;p&gt;However, one might run into problems when trying to call a method requiring an implicit instance of Spark&#39;s &lt;code&gt;Encoder&lt;/code&gt; type. Derivation of instances of &lt;code&gt;Encoder&lt;/code&gt; relies on presence of a &lt;code&gt;TypeTag&lt;/code&gt; for a given type. However &lt;code&gt;TypeTag&lt;/code&gt;s are not generated by Scala 3 compiler anymore (and there are no plans to support this) so instances of &lt;code&gt;Encoder&lt;/code&gt; cannot be automatically synthesized in most cases.&lt;/p&gt; &#xA;&lt;p&gt;Iskra tries to work around this problem by using its own encoders (unrelated to Spark&#39;s &lt;code&gt;Encoder&lt;/code&gt; type) generated using Scala 3&#39;s new metaprogramming API.&lt;/p&gt; &#xA;&lt;h2&gt;How does Iskra make things typesafe and efficient at the same time?&lt;/h2&gt; &#xA;&lt;p&gt;Iskra provides thin (but strongly typed) wrappers around &lt;code&gt;DataFrame&lt;/code&gt;s, which track types and names of columns at compile time but let Catalyst perform all of its optimizations at runtime.&lt;/p&gt; &#xA;&lt;p&gt;Iskra uses structural types rather than case classes as data models, which gives us a lot of flexibility (no need to explicitly define a new case class when a column is added/removed/renamed!) but we still get compilation errors when we try to refer to a column which doesn&#39;t exist or can&#39;t be used in a given context.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; This library is in its early stage of development - the syntax and type hierarchy might still change, the coverage of Spark&#39;s API is far from being complete and more tests are needed.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add Iskra as a dependency to your project, e.g.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;in a file compiled with Scala CLI:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;//&amp;gt; using lib &#34;org.virtuslab::iskra:0.0.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;when starting Scala CLI REPL:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scala-cli repl --dep org.virtuslab::iskra:0.0.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;in &lt;code&gt;build.sbt&lt;/code&gt; in an sbt project:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;org.virtuslab&#34; %% &#34;iskra&#34; % &#34;0.0.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Iskra is built with Scala 3.1.3 so it&#39;s compatible with Scala 3.1.x and newer minor releases (starting from 3.2.0-RC1 you&#39;ll get code completions for names of columns in REPL and Metals!). Iskra transitively depends on Spark 3.2.0.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Import the basic definitions from the API&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.virtuslab.iskra.api.*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Get a Spark session, e.g.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;given spark: SparkSession =&#xA;  SparkSession&#xA;    .builder()&#xA;    .master(&#34;local&#34;)&#xA;    .appName(&#34;my-spark-app&#34;)&#xA;    .getOrCreate()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Create a typed data frame in either of the two ways:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;by using &lt;code&gt;toTypedDF&lt;/code&gt; extension method on a &lt;code&gt;Seq&lt;/code&gt; of case classes, e.g.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Seq(Foo(1, &#34;abc&#34;), Foo(2, &#34;xyz&#34;)).toTypedDF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;by taking a good old (untyped) data frame and calling &lt;code&gt;typed&lt;/code&gt; extension method on it with a type parameter representing a case class, e.g.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;df.typed[Foo]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you needed to get back to the unsafe world of untyped data frames for some reason, just call &lt;code&gt;.untyped&lt;/code&gt; on a typed data frame.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Follow your intuition of a Spark developer &lt;span&gt;üòâ&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This library intends to maximally resemble the original API of Spark (e.g. by using the same names of methods, etc.) where possible, although trying to make the code feel more like regular Scala without unnecessary boilerplate and adding some other syntactic improvements.&lt;/p&gt; &#xA;&lt;p&gt;Most important differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refer to columns (also with prefixes specifying the alias for a dataframe in case of ambiguities) simply with &lt;code&gt;$.foo.bar&lt;/code&gt; instead of &lt;code&gt;$&#34;foo.bar&#34;&lt;/code&gt; or &lt;code&gt;col(&#34;foo.bar&#34;)&lt;/code&gt;. Use backticks when necessary, e.g. &lt;code&gt;$.`column with spaces` &lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;From inside of &lt;code&gt;.select(...)&lt;/code&gt; or &lt;code&gt;.select{...}&lt;/code&gt; you should return something that is a named column or a tuple of named columns. Because of how Scala syntax works you can write simply &lt;code&gt;.select($.x, $.y)&lt;/code&gt; instead of &lt;code&gt;select(($.x, $.y))&lt;/code&gt;. With braces you can compute intermediate values like&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;.select {&#xA;  val sum = ($.x + $.y).as(&#34;sum&#34;)&#xA;  ($.x, $.y, sum)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Syntax for joins looks slightly more like SQL, but with dots and parentheses as for usual method calls, e.g.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;foos.innerJoin(bars).on($.foos.barId === $.bars.id).select(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As you might have noticed above, the aliases for &lt;code&gt;foos&lt;/code&gt; and &lt;code&gt;bars&lt;/code&gt; were automatically inferred&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;For reference look at the &lt;a href=&#34;https://raw.githubusercontent.com/VirtusLab/iskra/main/src/test/example/&#34;&gt;examples&lt;/a&gt; and the &lt;a href=&#34;https://virtuslab.github.io/iskra/&#34;&gt;API docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Local development&lt;/h2&gt; &#xA;&lt;p&gt;This project is built using &lt;a href=&#34;https://scala-cli.virtuslab.org/&#34;&gt;scala-cli&lt;/a&gt; so just use the traditional commands with &lt;code&gt;.&lt;/code&gt; as root like &lt;code&gt;scala-cli compile .&lt;/code&gt; or &lt;code&gt;scala-cli test .&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flix/flix</title>
    <updated>2022-09-25T01:45:12Z</updated>
    <id>tag:github.com,2022-09-25:/flix/flix</id>
    <link href="https://github.com/flix/flix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Flix Programming Language&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/flix/flix/master/docs/logo.png&#34; height=&#34;91px&#34; alt=&#34;The Flix Programming Language&#34; title=&#34;The Flix Programming Language&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Flix&lt;/strong&gt; is a statically typed functional, imperative, and logic programming language.&lt;/p&gt; &#xA;&lt;p&gt;We refer you to the &lt;a href=&#34;https://flix.dev/&#34;&gt;official Flix website (flix.dev)&lt;/a&gt; for more information about Flix.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/flix/Lobby&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitterHQ/gitter.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/flix/flix/master/docs/example.png&#34; height=&#34;627px&#34; alt=&#34;Example Flix Program&#34; title=&#34;Example Flix Program&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/flix/flix/master/docs/BUILD.md&#34;&gt;docs/BUILD.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Flix is available under the Apache 2.0 license.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;We kindly thank &lt;a href=&#34;https://www.ej-technologies.com/&#34;&gt;EJ Technologies&lt;/a&gt; for providing us with &lt;a href=&#34;http://www.ej-technologies.com/products/jprofiler/overview.html&#34;&gt;JProfiler&lt;/a&gt; and &lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains&lt;/a&gt; for providing us with &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>