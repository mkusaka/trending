<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-04T01:44:32Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nixiesearch/nixiesearch</title>
    <updated>2025-05-04T01:44:32Z</updated>
    <id>tag:github.com,2025-05-04:/nixiesearch/nixiesearch</id>
    <link href="https://github.com/nixiesearch/nixiesearch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hybrid search engine, combining best features of text and semantic search worlds&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nixiesearch: batteries included search engine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://nixiesearch.ai/img/logo-with-title.png&#34; alt=&#34;logo with name&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nixiesearch/nixiesearch/actions&#34;&gt;&lt;img src=&#34;https://github.com/nixiesearch/nixiesearch/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache2-green.svg?sanitize=true&#34; alt=&#34;License: Apache 2&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/nixiesearch/nixiesearch&#34; alt=&#34;Last commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/nixiesearch/nixiesearch&#34; alt=&#34;Last release&#34;&gt; &lt;a href=&#34;https://communityinviter.com/apps/nixiesearch/nixiesearch&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-join%20the%20community-blue?logo=slack&amp;amp;style=social&#34; alt=&#34;Join our slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://demo.nixiesearch.ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/visit-demo-blue&#34; alt=&#34;Visit demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Nixiesearch?&lt;/h2&gt; &#xA;&lt;p&gt;Nixiesearch is a &lt;strong&gt;modern search engine&lt;/strong&gt; that runs on &lt;a href=&#34;https://nixiesearch.ai/deployment/distributed/persistence/s3&#34;&gt;S3-compatible storage&lt;/a&gt;. We built it after dealing with the headaches of running large Elastic/OpenSearch clusters (here&#39;s the &lt;a href=&#34;https://nixiesearch.substack.com/p/nixiesearch-running-lucene-over-s3&#34;&gt;blog post full of pain&lt;/a&gt;), and here’s why it’s awesome:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powered by &lt;a href=&#34;https://lucene.apache.org&#34;&gt;Apache Lucene&lt;/a&gt;&lt;/strong&gt;: You get support for &lt;a href=&#34;https://nixiesearch.ai/reference/languages&#34;&gt;39 languages&lt;/a&gt;, &lt;a href=&#34;https://nixiesearch.ai/features/search/facet&#34;&gt;facets&lt;/a&gt;, &lt;a href=&#34;https://nixiesearch.ai/features/search/filter&#34;&gt;advanced filters&lt;/a&gt;, &lt;a href=&#34;https://nixiesearch.ai/features/autocomplete/index&#34;&gt;autocomplete suggestions&lt;/a&gt;, and the familiar &lt;a href=&#34;https://nixiesearch.ai/features/search/sort&#34;&gt;sorting&lt;/a&gt; features you’re used to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Decoupled &lt;a href=&#34;https://nixiesearch.ai/deployment/distributed/persistence/s3&#34;&gt;S3-based&lt;/a&gt; storage and compute&lt;/strong&gt;: There&#39;s nothing to break. You get risk-free &lt;a href=&#34;https://nixiesearch.ai/tutorial/backup&#34;&gt;backups&lt;/a&gt;, &lt;a href=&#34;https://nixiesearch.ai/tutorial/upgrade&#34;&gt;upgrades&lt;/a&gt;, &lt;a href=&#34;https://nixiesearch.ai/tutorial/schema&#34;&gt;schema changes&lt;/a&gt; and &lt;a href=&#34;https://nixiesearch.ai/tutorial/autoscaling&#34;&gt;auto-scaling&lt;/a&gt;, all on a stateless index stored in S3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pull indexing&lt;/strong&gt;: Supports both offline and online incremental indexing using an &lt;a href=&#34;https://nixiesearch.ai/features/indexing/overview&#34;&gt;Apache Spark based ETL process&lt;/a&gt;. No more POSTing JSON blobs to prod cluster (and overloading it).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No state inside the cluster&lt;/strong&gt;: All changes (settings, indexes, etc.) are just &lt;a href=&#34;https://nixiesearch.ai/reference/config&#34;&gt;config&lt;/a&gt; updates, which makes &lt;a href=&#34;https://nixiesearch.ai/tutorial/schema&#34;&gt;blue-green deployments&lt;/a&gt; of index changes a breeze.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI batteries included&lt;/strong&gt;: &lt;a href=&#34;https://nixiesearch.ai/features/inference/embeddings&#34;&gt;Embedding&lt;/a&gt; and &lt;a href=&#34;https://nixiesearch.ai/features/inference/completions&#34;&gt;LLM inference&lt;/a&gt;, first class &lt;a href=&#34;https://nixiesearch.ai/features/search/rag&#34;&gt;RAG API&lt;/a&gt; support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://nixiesearch.ai/img/arch.png&#34; alt=&#34;NS design diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Search is never easy, but Nixiesearch has your back. It takes care of the toughest parts—like reindexing, capacity planning, and maintenance—so you can save time (and your sanity).&lt;/p&gt; &#xA;&lt;p&gt;!!! note Want to learn more? Go straight to the &lt;a href=&#34;https://www.nixiesearch.ai/quickstart/&#34;&gt;quickstart&lt;/a&gt; and check out &lt;a href=&#34;https://demo.nixiesearch.ai&#34;&gt;the live demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What Nixiesearch is not?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nixiesearch is not a database&lt;/strong&gt;, and was never meant to be. Nixiesearch is a search index for consumer-facing apps to find top-N most relevant documents for a query. For analytical cases consider using good old SQL with &lt;a href=&#34;https://github.com/ClickHouse/ClickHouse&#34;&gt;Clickhouse&lt;/a&gt; or &lt;a href=&#34;https://www.snowflake.com/en/&#34;&gt;Snowflake&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Not a tool to search for logs&lt;/strong&gt;. Log search is about throughput, and Nixiesearch is about relevance. If you plan to use Nixiesearch as a log storage system, please don&#39;t: consider &lt;a href=&#34;https://www.elastic.co/elastic-stack&#34;&gt;ELK&lt;/a&gt; or &lt;a href=&#34;https://github.com/quickwit-oss/quickwit&#34;&gt;Quickwit&lt;/a&gt; as better alternatives.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The difference&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Our elasticsearch cluster has been a pain in the ass since day one with the main fix always &#34;just double the size of the server&#34; to the point where our ES cluster ended up costing more than our entire AWS bill pre-ES &lt;a href=&#34;https://news.ycombinator.com/item?id=30791838&#34;&gt; [HN source] &lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When your search cluster is red again when you accidentally send a wrong JSON to a wrong REST endpoint, you can just write your own S3-based search engine like big guys do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Uber&lt;/strong&gt;: &lt;a href=&#34;https://www.uber.com/en-NL/blog/lucene-version-upgrade/&#34;&gt;Lucene: Uber’s Search Platform Version Upgrade&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Amazon&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=EkkzSLstSAE&#34;&gt;E-Commerce search at scale on Apache Lucene&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Doordash&lt;/strong&gt;: &lt;a href=&#34;https://careers.doordash.com/blog/introducing-doordashs-in-house-search-engine/&#34;&gt;Introducing DoorDash’s in-house search engine&lt;/a&gt;. &lt;img src=&#34;https://nixiesearch.ai/img/doordash.gif&#34; alt=&#34;doordash design&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nixiesearch was inspired by these search engines, but is &lt;a href=&#34;https://raw.githubusercontent.com/nixiesearch/nixiesearch/master/#license&#34;&gt;open-source&lt;/a&gt;. Decoupling search and storage makes ops simpler. Making your search configuration immutable makes it even more simple.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://nixiesearch.ai/img/reindex.gif&#34; alt=&#34;immutable config diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;How it&#39;s different from popular search engines?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vs &lt;a href=&#34;https://www.elastic.co/elasticsearch&#34;&gt;Elastic&lt;/a&gt;: &lt;a href=&#34;https://nixiesearch.ai/features/inference/embeddings&#34;&gt;Embedding inference&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/nixiesearch/nixiesearch/master/features/search/overview.md#hybrid-search-with-reciprocal-rank-fusion&#34;&gt;hybrid search&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/nixiesearch/nixiesearch/master/#&#34;&gt;reranking&lt;/a&gt; are free and open-source. For ES these are part of the &lt;a href=&#34;https://www.elastic.co/subscriptions/cloud&#34;&gt;proprietary cloud&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;vs &lt;a href=&#34;https://raw.githubusercontent.com/nixiesearch/nixiesearch/master/TODO&#34;&gt;OpenSearch&lt;/a&gt;: While OpenSearch can use &lt;a href=&#34;https://opensearch.org/docs/latest/tuning-your-cluster/availability-and-recovery/segment-replication/index/&#34;&gt;S3-based segment replication&lt;/a&gt;, Nixiesearch can also offload cluster state to S3.&lt;/li&gt; &#xA; &lt;li&gt;vs &lt;a href=&#34;https://qdrant.tech/&#34;&gt;Qdrant&lt;/a&gt; and &lt;a href=&#34;https://weaviate.io/&#34;&gt;Weaviate&lt;/a&gt;: Not a sidecar search engine to handle just vector search. &lt;a href=&#34;https://nixiesearch.ai/features/autocomplete/index&#34;&gt;Autocomplete&lt;/a&gt;, &lt;a href=&#34;https://nixiesearch.ai/features/search/facet&#34;&gt;facets&lt;/a&gt;, &lt;a href=&#34;https://nixiesearch.ai/features/search/rag&#34;&gt;RAG&lt;/a&gt; and &lt;a href=&#34;https://nixiesearch.ai/features/inference/embeddings&#34;&gt;embedding inference&lt;/a&gt; out of the box.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Try it out&lt;/h2&gt; &#xA;&lt;p&gt;Get the sample &lt;a href=&#34;https://github.com/metarank/msrd&#34;&gt;MSRD: Movie Search Ranking Dataset&lt;/a&gt; dataset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -o movies.jsonl.gz https://nixiesearch.ai/data/movies.jsonl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&#xA;                                 Dload  Upload   Total   Spent    Left  Speed&#xA;100   162  100   162    0     0   3636      0 --:--:-- --:--:-- --:--:--  3681&#xA;100 32085  100 32085    0     0   226k      0 --:--:-- --:--:-- --:--:--  226k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an index mapping for &lt;code&gt;movies&lt;/code&gt; index in a file &lt;code&gt;config.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;inference:&#xA;  embedding:&#xA;    e5-small:&#xA;      provider: onnx # (1)&#xA;      model: nixiesearch/e5-small-v2-onnx # (2)&#xA;      prompt:&#xA;        query: &#34;query: &#34;&#xA;        doc: &#34;passage: &#34;&#xA;schema:&#xA;  movies: # index name&#xA;    fields:&#xA;      title: # field name&#xA;        type: text&#xA;        search: &#xA;          type: hybrid&#xA;          model: e5-small&#xA;        language: en # language is needed for lexical search&#xA;        suggest: true&#xA;      overview:&#xA;        type: text&#xA;        search: &#xA;          type: hybrid&#xA;          model: e5-small&#xA;        language: en&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We use &lt;a href=&#34;https://onnxruntime.ai/&#34;&gt;ONNX Runtime&lt;/a&gt; for local embedding inference. But you can also use any API-based SaaS embedding provider.&lt;/li&gt; &#xA; &lt;li&gt;Any &lt;a href=&#34;https://sbert.net/&#34;&gt;SBERT&lt;/a&gt;-compatible embedding model can be used, and you can &lt;a href=&#34;https://github.com/nixiesearch/onnx-convert&#34;&gt;convert your own&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Run the Nixiesearch &lt;a href=&#34;https://hub.docker.com/r/nixiesearch/nixiesearch&#34;&gt;docker container&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -itp 8080:8080 -v .:/data nixiesearch/nixiesearch:latest standalone -c /data/config.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;a.nixiesearch.index.sync.LocalIndex$ - Local index movies opened&#xA;ai.nixiesearch.index.Searcher$ - opening index movies&#xA;a.n.main.subcommands.StandaloneMode$ - ███╗   ██╗██╗██╗  ██╗██╗███████╗███████╗███████╗ █████╗ ██████╗  ██████╗██╗  ██╗&#xA;a.n.main.subcommands.StandaloneMode$ - ████╗  ██║██║╚██╗██╔╝██║██╔════╝██╔════╝██╔════╝██╔══██╗██╔══██╗██╔════╝██║  ██║&#xA;a.n.main.subcommands.StandaloneMode$ - ██╔██╗ ██║██║ ╚███╔╝ ██║█████╗  ███████╗█████╗  ███████║██████╔╝██║     ███████║&#xA;a.n.main.subcommands.StandaloneMode$ - ██║╚██╗██║██║ ██╔██╗ ██║██╔══╝  ╚════██║██╔══╝  ██╔══██║██╔══██╗██║     ██╔══██║&#xA;a.n.main.subcommands.StandaloneMode$ - ██║ ╚████║██║██╔╝ ██╗██║███████╗███████║███████╗██║  ██║██║  ██║╚██████╗██║  ██║&#xA;a.n.main.subcommands.StandaloneMode$ - ╚═╝  ╚═══╝╚═╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝&#xA;a.n.main.subcommands.StandaloneMode$ -                                                                                &#xA;o.h.ember.server.EmberServerBuilder - Ember-Server service bound to address: [::]:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build an index for a hybrid search:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -XPUT -d @movies.jsonl http://localhost:8080/movies/_index&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;result&#34;:&#34;created&#34;,&#34;took&#34;:8256}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Send the search query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -XPOST -d &#39;{&#34;query&#34;: {&#34;match&#34;: {&#34;title&#34;:&#34;matrix&#34;}},&#34;fields&#34;: [&#34;title&#34;], &#34;size&#34;:3}&#39;\&#xA;   http://localhost:8080/movies/_search&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;took&#34;: 1,&#xA;  &#34;hits&#34;: [&#xA;    {&#xA;      &#34;_id&#34;: &#34;605&#34;,&#xA;      &#34;title&#34;: &#34;The Matrix Revolutions&#34;,&#xA;      &#34;_score&#34;: 0.016666668&#xA;    },&#xA;    {&#xA;      &#34;_id&#34;: &#34;604&#34;,&#xA;      &#34;title&#34;: &#34;The Matrix Reloaded&#34;,&#xA;      &#34;_score&#34;: 0.016393442&#xA;    },&#xA;    {&#xA;      &#34;_id&#34;: &#34;624860&#34;,&#xA;      &#34;title&#34;: &#34;The Matrix Resurrections&#34;,&#xA;      &#34;_score&#34;: 0.016129032&#xA;    }&#xA;  ],&#xA;  &#34;aggs&#34;: {},&#xA;  &#34;ts&#34;: 1722441735886&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also open &lt;code&gt;http://localhost:8080/_ui&lt;/code&gt; in your web browser for a basic web UI:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.nixiesearch.ai/img/webui.png&#34; alt=&#34;web ui&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more details, see a complete &lt;a href=&#34;https://nixiesearch.ai/quickstart&#34;&gt;Quickstart guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is released under the Apache 2.0 license, as specified in the &lt;a href=&#34;https://github.com/nixiesearch/nixiesearch/raw/master/LICENSE&#34;&gt;License&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>