<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-15T02:04:57Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kazua/works</title>
    <updated>2023-01-15T02:04:57Z</updated>
    <id>tag:github.com,2023-01-15:/kazua/works</id>
    <link href="https://github.com/kazua/works" rel="alternate"></link>
    <summary type="html">&lt;p&gt;works&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/barstools</title>
    <updated>2023-01-15T02:04:57Z</updated>
    <id>tag:github.com,2023-01-15:/ucb-bar/barstools</id>
    <link href="https://github.com/ucb-bar/barstools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Useful utilities for BAR projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Barstools&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/freechipsproject/ucb-bar/barstools/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Barstools&lt;/strong&gt; is a collection of useful utilities for BAR projects&lt;/p&gt; &#xA;&lt;p&gt;Passes/Transforms that could be useful if added here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check that a module was de-duplicated. Useful for MIM CAD flows and currently done in python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Be sure to publish-local the following repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ucb-bar/chisel-testers (requires ucb-bar/firrtl-interpreter)&lt;/li&gt; &#xA; &lt;li&gt;ucb-bar/firrtl&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt&#xA;&amp;gt; compile&#xA;&amp;gt; runMain barstools.tapeout.transforms.GenerateTop -i &amp;lt;myfile&amp;gt;.fir -o &amp;lt;myfile&amp;gt;.v --syn-top &amp;lt;mysyntop&amp;gt; --harness-top &amp;lt;myharnesstop&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building the macro compiler JAR:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sbt&#xA;[...]&#xA;[info] Set current project to tapeout (in build file:/mnt/data/dev/barstools_pcad/)&#xA;&amp;gt; assembly&#xA;[...]&#xA;[info] SHA-1: 77d4c759c825fd0ea93dfec26dbbb649f6cd5c89&#xA;[info] Packaging [...]/macros/target/scala-2.11/macros-assembly-0.1-SNAPSHOT.jar ...&#xA;[info] Done packaging.&#xA;[success] Total time: 28 s, completed Mar 21, 2018 2:28:34 PM&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>riscv-boom/riscv-boom</title>
    <updated>2023-01-15T02:04:57Z</updated>
    <id>tag:github.com,2023-01-15:/riscv-boom/riscv-boom</id>
    <link href="https://github.com/riscv-boom/riscv-boom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SonicBOOM: The Berkeley Out-of-Order Machine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/riscv-boom/riscv-boom/master/docs/figures/evolution.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The Berkeley Out-of-Order RISC-V Processor &lt;a href=&#34;https://circleci.com/gh/riscv-boom/riscv-boom&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/riscv-boom/riscv-boom.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The Berkeley Out-of-Order Machine (BOOM) is a synthesizable and parameterizable open source RV64GC RISC-V core written in the &lt;a href=&#34;https://chisel.eecs.berkeley.edu/&#34;&gt;Chisel&lt;/a&gt; hardware construction language. Created at the University of California, Berkeley in the &lt;a href=&#34;https://bar.eecs.berkeley.edu/&#34;&gt;Berkeley Architecture Research&lt;/a&gt; group, its focus is to create a high performance, synthesizable, and parameterizable core for architecture research. The current version of the BOOM microarchitecture (&lt;a href=&#34;https://carrv.github.io/2020/papers/CARRV2020_paper_15_Zhao.pdf&#34;&gt;SonicBOOM, or BOOMv3&lt;/a&gt;) is performance competitive with commercial high-performance out-of-order cores, achieving 6.2 CoreMarks/MHz.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/riscv-boom/riscv-boom/master/docs/figures/uarch.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;BOOM&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ISA&lt;/td&gt; &#xA;   &lt;td&gt;RISC-V (RV64GC)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Synthesizable&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FPGA&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Parameterized&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IEEE 754 Floating Point&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Atomics&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Caches&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Virtual Memory&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Boots Linux&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Runs SPEC&lt;/td&gt; &#xA;   &lt;td&gt;√&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CoreMark/MHz&lt;/td&gt; &#xA;   &lt;td&gt;6.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;IMPORTANT: Using BOOM&lt;/h2&gt; &#xA;&lt;p&gt;This repository is &lt;strong&gt;NOT A SELF-RUNNING&lt;/strong&gt; repository. To instantiate a BOOM core, please use the &lt;a href=&#34;https://github.com/ucb-bar/chipyard&#34;&gt;Chipyard&lt;/a&gt; SoC generator.&lt;/p&gt; &#xA;&lt;p&gt;The current hash of Chipyard that works with this repository is located in the &lt;code&gt;CHIPYARD.hash&lt;/code&gt; file in the top level directory of this repository. This file is mainly used for CI purposes, since Chipyard should follow the correct version of rocket-chip. For most users, you should be able to clone Chipyard separately and follow the default Chipyard instructions (without having to use the &lt;code&gt;.hash&lt;/code&gt; file).&lt;/p&gt; &#xA;&lt;p&gt;While BOOM is primarily ASIC-optimized, it is also usable on FPGAs. Chipyard provides infrastructure and documentation for deploying BOOM on AWS F1 FPGAs through FireSim.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation and Information&lt;/h2&gt; &#xA;&lt;p&gt;Please check out the BOOM website @ &lt;a href=&#34;https://boom-core.org&#34;&gt;https://boom-core.org&lt;/a&gt; for the most up-to-date information. It contains links to the mailing lists, documentation, design spec., publications and more!&lt;/p&gt; &#xA;&lt;p&gt;If you use BOOMv3 in your published work, please cite BOOM as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{zhaosonicboom,&#xA;  title={SonicBOOM: The 3rd Generation Berkeley Out-of-Order Machine},&#xA;  author={Zhao, Jerry and Korpan, Ben and Gonzalez, Abraham and Asanovic, Krste},&#xA;  booktitle={Fourth Workshop on Computer Architecture Research with RISC-V},&#xA;  year={2020},&#xA;  month={May}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; (&lt;a href=&#34;http://www.boom-core.org&#34;&gt;www.boom-core.org&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mailing List&lt;/strong&gt; (&lt;a href=&#34;https://groups.google.com/forum/#!forum/riscv-boom&#34;&gt;https://groups.google.com/forum/#!forum/riscv-boom&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer!&lt;/h2&gt; &#xA;&lt;p&gt;BOOM is a work-in-progress and remains in active development.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/riscv-boom/riscv-boom/master/CONTRIB_AND_STYLE.md&#34;&gt;CONTRIB_AND_STYLE.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>