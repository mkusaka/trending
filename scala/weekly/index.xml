<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T02:06:18Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>broadinstitute/sam</title>
    <updated>2023-04-30T02:06:18Z</updated>
    <id>tag:github.com,2023-04-30:/broadinstitute/sam</id>
    <link href="https://github.com/broadinstitute/sam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;workbench identity and access management&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sam - Identity and Access Management (IAM)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://static1.squarespace.com/static/52f51a96e4b0ec7646cd474a/5328b57de4b067106916ef7f/56b3b2167da24f50175975bc/1504623030943/geh502.jpg?format=500w&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;In a nutshell&lt;/h2&gt; &#xA;&lt;p&gt;The crux of IAM in Sam is a policy. A policy says &lt;strong&gt;who&lt;/strong&gt; can &lt;strong&gt;do what&lt;/strong&gt; to a &lt;strong&gt;thing&lt;/strong&gt;. More technically the who is called a &lt;strong&gt;subject&lt;/strong&gt; and can be a user or a group of users, the do what is called an &lt;strong&gt;action&lt;/strong&gt; such as read or update, and the thing is called a &lt;strong&gt;resource&lt;/strong&gt; such as a workspace or project. Resources have types which specify what actions are available for its resources, roles (which are collections of actions) and which role is the &#34;owner&#34; role. The &#34;owner&#34; role should have the appropriate actions to administer a resource. When a resource is created a policy with the owner role is automatically created and the creator is added.&lt;/p&gt; &#xA;&lt;h2&gt;Terms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Subject - an authenticated user or group&lt;/li&gt; &#xA; &lt;li&gt;Resource - something to which access is controlled&lt;/li&gt; &#xA; &lt;li&gt;Action - may be performed on a resource - meant to be as granular as possible&lt;/li&gt; &#xA; &lt;li&gt;Policy - represents the actions a subject may perform on a resource&lt;/li&gt; &#xA; &lt;li&gt;Role - a collection of actions - meant to aggregate actions into a more meaningful, higher level concept&lt;/li&gt; &#xA; &lt;li&gt;Group - a group of subjects (this can include groups)&lt;/li&gt; &#xA; &lt;li&gt;Resource type - defines a class of resources. Each resource has a type which defines &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Available actions&lt;/li&gt; &#xA;   &lt;li&gt;Available roles and actions for each role&lt;/li&gt; &#xA;   &lt;li&gt;Of the available roles which is the “owner” role - this is used when creating a resource to give the creator ownership access&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Guiding Principles&lt;/h3&gt; &#xA;&lt;p&gt;There are no special/super users in this system. All api calls authenticate as subjects with access rights determined by policies in the same way. In other words, this system should use its own policy mechanisms internally for any authorization needs. (Note that this does leave the problem of bootstrapping, i.e. how is the first user created, which can be achieved by scripts outside the system with direct data store level access.) This system can be publicly facing. This does not mean that it will be in all cases but it should be designed with this in mind. Authentication is handled at a higher level than this application, e.g. via OAuth and an OIDC proxy.&lt;/p&gt; &#xA;&lt;h3&gt;Evaluation&lt;/h3&gt; &#xA;&lt;p&gt;Evaluation is the act of determining what a user may access.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Given a user, resource and action emit a yes or no response, i.e. can the user perform the action on the resource?&lt;/li&gt; &#xA; &lt;li&gt;Given a user and a resource type, list all resources and associated roles the user has (directly or indirectly).&lt;/li&gt; &#xA; &lt;li&gt;Given a user and resource, list all the actions the user may perform on that resource&lt;/li&gt; &#xA; &lt;li&gt;Given a user and resource, list all the user’s roles on that resource&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Of these 1 and 2 are the most important from a performance standpoint. Expect 1 to be called for almost every api call in a system. Expect 2 to be called from UI list pages where users generally want a snappy response.&lt;/p&gt; &#xA;&lt;h3&gt;Resource and Policy Management&lt;/h3&gt; &#xA;&lt;p&gt;A resource may be part of a hierarchy of resources. A parent may be set on a resource. To do so, users must have the set_parent action on the resource and the add_child action on the would be parent. Ancestor resources in the hierarchy control permissions on all descendants.&lt;/p&gt; &#xA;&lt;p&gt;A policy is specific to a resource and a resource may have multiple policies. Each policy consists of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A set of subjects&lt;/li&gt; &#xA; &lt;li&gt;A set of actions directly applicable to the resource&lt;/li&gt; &#xA; &lt;li&gt;A set of roles directly applicable to the resource&lt;/li&gt; &#xA; &lt;li&gt;A set of descendant permissions - roles and actions applicable to descendant resources All of the subjects may perform all of the actions/roles in the policy. A policy may also be marked as public effectively meaning all users are members. Each policy has a name that is unique within a resource. Access to actions through policies is additive (i.e. the actions available to a user on a resource is an accumulation of all policies the user is a member of for that resource).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There must be functions to create, delete and manage policies for resources. There must be access control around deleting resources and managing policies. There must be some built-in actions to do so (delete, read-policies, alter-policies).&lt;/p&gt; &#xA;&lt;p&gt;There must be functions to create and delete resources. When a resource is created the caller should be the “owner.” The “owner” role generally will include delete action and actions to control sharing but need not always (e.g. if a resource may never be deleted then an owner would not have delete permissions). The actions that make up the “owner” role are defined by the resource type.&lt;/p&gt; &#xA;&lt;p&gt;Resource types define the set of available actions for all resources of that type. It also defines a set of roles and their associated actions. Roles are useful because it can be cumbersome to deal with granular actions and as a point of extensibility (when new actions are added to resource types, they can be added to roles as well, effectively adding the action to all resources with that role). It is not yet necessary to provide apis to create and maintain resource types, this can be achieved through configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Public Policies&lt;/h3&gt; &#xA;&lt;p&gt;There are some cases where it is desirable to grant actions or roles to all authenticated users. For example, granting read-only access to public workspaces. In this case a policy can be created that has the appropriate actions or roles and set to public. Resources with public policies show up when listing resources for a user. For this reason it is not always desirable to allow everyone to make public policies. Again, the example is public workspaces. Public workspaces show up for everyone and should be curated.&lt;/p&gt; &#xA;&lt;p&gt;To change a policy&#39;s public status the caller must be able to share the policy (either via &lt;code&gt;alter_policies&lt;/code&gt; and &lt;code&gt;share_policy::{policy_name}&lt;/code&gt; actions) &lt;em&gt;and&lt;/em&gt; must have the &lt;code&gt;set_public&lt;/code&gt; action on the resource &lt;code&gt;resource_type_admin/{resource type name}&lt;/code&gt;. &lt;code&gt;resource_type_admin&lt;/code&gt; is an internally created resource type. &lt;code&gt;{resource type name}&lt;/code&gt; is for the resource containing the policy. Note that every resource type in sam has a resource of the same name of type &lt;code&gt;resource_type_admin&lt;/code&gt; which is automatically created. When these resources are created they do not have owners, permissions must be granted via direct postgres changes.&lt;/p&gt; &#xA;&lt;h3&gt;User and Group Management&lt;/h3&gt; &#xA;&lt;p&gt;User - Create, enable, disable, get status. Disabled users should be rejected from any api calls. Enabling a user should reinstate any prior access.&lt;/p&gt; &#xA;&lt;p&gt;Group - Create, delete, read, list, add/remove users and groups. Nested groups are supported. Groups are implemented as a resource type with admin and member roles and policies. There is an additional &lt;code&gt;admin_notifier&lt;/code&gt; role and policy that is public by default which allows any authenticate user to request access to a group. Group admins can set public to false if desired.&lt;/p&gt; &#xA;&lt;h3&gt;Built In Actions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;read_policies - may read all policies of a resource&lt;/li&gt; &#xA; &lt;li&gt;alter_policies - may change any policy of a resource&lt;/li&gt; &#xA; &lt;li&gt;delete - may delete a resource&lt;/li&gt; &#xA; &lt;li&gt;share_policy::{policy name} - may add/remove members to/from specified policy of a resource&lt;/li&gt; &#xA; &lt;li&gt;read_policy::{policy name} - may read specified policy of a resource&lt;/li&gt; &#xA; &lt;li&gt;get_parent - may get a resource&#39;s parent&lt;/li&gt; &#xA; &lt;li&gt;set_parent - may set a resource&#39;s parent&lt;/li&gt; &#xA; &lt;li&gt;add_child - may add a child to a resource&lt;/li&gt; &#xA; &lt;li&gt;remove_child - may remove a child from a resource&lt;/li&gt; &#xA; &lt;li&gt;list_children - may list all of a resource&#39;s children&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UML Model&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/model.png&#34; alt=&#34;Sam Model&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/#uml-class-diagram-relationship&#34;&gt;UML Key&lt;/a&gt; for reference. Note that in this model Group is a Subject. This allows it to be used interchangeably with Users within policies.&lt;/p&gt; &#xA;&lt;h3&gt;ERD&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/sam_erd.png&#34; alt=&#34;Sam ERD&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Sam schema can be viewed in sections: users in blue, groups in yellow, resources in orange, policies in green, and resource type configuration in purple. Both groups and resources have a hierarchical model (groups can contain groups and resources can have parents). To solve read-query performance issues these hierarchies are also stored in a flattened representation: &lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/src/main/scala/org/broadinstitute/dsde/workbench/sam/dataAccess/PostgresGroupDAO.scala&#34;&gt;sam_group_member_flat&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/src/main/scala/org/broadinstitute/dsde/workbench/sam/dataAccess/EffectivePolicyMutationStatements.scala&#34;&gt;sam_effective_*&lt;/a&gt; tables.&lt;/p&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://petstore.swagger.io/?url=https://raw.githubusercontent.com/broadinstitute/sam/develop/src/main/resources/swagger/api-docs.yaml&#34;&gt;Sam APIs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Java Client Library&lt;/h4&gt; &#xA;&lt;p&gt;for sbt:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;libraryDependencies += &#34;org.broadinstitute.dsde.workbench&#34; %% &#34;sam-client&#34; % &#34;0.1-&amp;lt;git hash&amp;gt;&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;where &lt;code&gt;&amp;lt;git hash&amp;gt;&lt;/code&gt; is the first 7 characters of the commit hash of the HEAD of develop&lt;/p&gt; &#xA;&lt;p&gt;Example Scala Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import org.broadinstitute.dsde.workbench.client.sam.api.ResourcesApi&#xA;import org.broadinstitute.dsde.workbench.client.sam.ApiClient&#xA;&#xA;class SamClient(samBasePath: String) {&#xA;  private def samResourcesApi(accessToken: String): ResourcesApi = {&#xA;    val apiClient = new ApiClient()&#xA;    apiClient.setAccessToken(accessToken)&#xA;    apiClient.setBasePath(samBasePath)&#xA;    new ResourcesApi(apiClient)&#xA;  }&#xA;&#xA;  def checkResourceAction(token: String, samResourceType: String, samResource: String, action: String): Boolean = {&#xA;    val samResourceApi = samResourcesApi(token)&#xA;    samResourceApi.resourceAction(samResourceType, samResource, action)&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cloud Integrations&lt;/h2&gt; &#xA;&lt;h3&gt;Google&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Groups can be mirrored to google groups.&lt;/li&gt; &#xA; &lt;li&gt;Proxy groups - each user with access to google resources should have a google group known as a proxy. The proxy is 1-to-1 with the user and the user is member of the proxy. The proxy group should be used in place of the user in Google IAM policies and Google groups. Users should not be added directly. This allows easy enable and disable functionality by adding/removing users to their proxy groups. It also allows creation of service accounts that can act as the user (see pet service accounts below).&lt;/li&gt; &#xA; &lt;li&gt;Pet service accounts - Google Compute Engine requires a service account to run compute. Service account credentials are the default credentials on any GCE instance. This is the best way at this time to provide credentials to any processes running on a GCE instance. Pet service accounts correspond with 1 and only 1 user, are added to the user’s proxy group and can call system apis as the user. In this way a pet service account can act as the user in all respects that can be controlled by the system (resources outside control of the system need to be manually shared by the user with the proxy group).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Proposed model for accessing external google resources&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/data_access.png&#34; alt=&#34;Data Access&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that Sam does not actually launch workflows create VMs but appears to in this diagram in order to simplify interactions. The key concept is the user of service accounts.&lt;/p&gt; &#xA;&lt;h4&gt;Google integration requires&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a GSuite domain&lt;/li&gt; &#xA; &lt;li&gt;a project with a service account for the sam application&lt;/li&gt; &#xA; &lt;li&gt;service account with access to &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;create PubSub topics and subscriptions&lt;/li&gt; &#xA;   &lt;li&gt;admin google groups in GSuite domain&lt;/li&gt; &#xA;   &lt;li&gt;create service accounts and keys in desired projects (usually easiest to grant this at the org level)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Required Tooling:&lt;/h3&gt; &#xA;&lt;h4&gt;Java:&lt;/h4&gt; &#xA;&lt;p&gt;Make sure you have Java JDK 17 installed. Instructions for our recommended package can be found &lt;a href=&#34;https://adoptium.net/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;Docker is required for running Sam locally. Docker Desktop can be installed from &lt;a href=&#34;https://docs.docker.com/desktop/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This should also install the &lt;code&gt;kubectl&lt;/code&gt; command, which is required for rendering configs for running Sam locally.&lt;/p&gt; &#xA;&lt;h4&gt;Scala:&lt;/h4&gt; &#xA;&lt;p&gt;Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-$xslt&#34;&gt;brew install scala&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To build&lt;/h3&gt; &#xA;&lt;p&gt;Make sure git secrets is installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-$xslt&#34;&gt;brew install git-secrets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run minnie-kenny.sh with -f first time after git-clone to ensure git-secrets is run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./minnie-kenny.sh -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build jar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./docker/build.sh jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build jar and docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./docker/build.sh jar -d build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Sam Locally&lt;/h3&gt; &#xA;&lt;h4&gt;Credentials&lt;/h4&gt; &#xA;&lt;p&gt;You&#39;ll need to authenticate with Google to run the &lt;code&gt;kubectl&lt;/code&gt; commands. To run Sam locally, dev credentials are required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gcloud container clusters get-credentials terra-dev --region us-central1-a --project broad-dsde-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have permissions, try authenticating using your Firecloud account.&lt;/p&gt; &#xA;&lt;h4&gt;firecloud-develop&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;firecloud-develop&lt;/code&gt; is still required for running the local proxy. Follow the instructions in the &lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/#firecloud-develop-setup&#34;&gt;below section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Render secrets&lt;/h4&gt; &#xA;&lt;p&gt;You only have to do this once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./render_config.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source Environment Variables&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source env/local.env&#xA;source src/main/resources/rendered/secrets.env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Spin Up a Local Postgres&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sh docker/run-postgres.sh start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Spin Up a Local Proxy&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sh docker/run-proxy.sh start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run Sam!&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sbt run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Navigate to &lt;a href=&#34;http://localhost:50443/&#34;&gt;Sam&#39;s (Proxy&#39;s) Swagger page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Debugging in IntelliJ&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/7861-envfile/&#34;&gt;EnvFile IntelliJ Plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up a new &lt;code&gt;Application&lt;/code&gt; run configuration in IntelliJ: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/intellij_local_sam_run.png&#34; alt=&#34;Run Configuration&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run it!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;To run unit tests&lt;/h3&gt; &#xA;&lt;h4&gt;Set up your environment&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Spin up a local postgres:&#xA;sh docker/run-postgres.sh start&#xA;# Make sure your `SBT_OPTS` are set:&#xA;export SBT_OPTS=&#34;-Dpostgres.host=localhost -Dpostgres.port=5432&#34;&#xA;# Source test env vars&#xA;source env/test.env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: if you run Postgres in another way (i.e. you&#39;re running the Postgres Mac app), the unit tests will fail because they will look at that installation instead of the Docker container you&#39;ve spun up. You can either specify a port when starting the Postgres Docker container or quit your Postgres client.&lt;/p&gt; &#xA;&lt;h4&gt;Run tests in sbt&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sbt testOnly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run tests in intellij&lt;/h4&gt; &#xA;&lt;p&gt;Set up ScalaTest Template:&lt;/p&gt; &#xA;&lt;p&gt;You need to set some default VM parameters for ScalaTest run configurations. In IntelliJ, go to &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Edit Configurations...&lt;/code&gt;, select &lt;code&gt;ScalaTest&lt;/code&gt; under &lt;code&gt;🔧Templates&lt;/code&gt;, and add these VM parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-Dpostgres.host=localhost -Dpostgres.port=5432&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also need to set up the EnvFile plugin to pull environment variables from &lt;code&gt;env/test.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then you can run unit tests within IntelliJ by clicking the green play button on a unit test.&lt;/p&gt; &#xA;&lt;h5&gt;Connecting to your local Postgres&lt;/h5&gt; &#xA;&lt;p&gt;In order to connect to your local postgres, open up the database tab, select the plus button at the top, data source, and click postgres.&lt;/p&gt; &#xA;&lt;p&gt;From there, set the:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Host: &lt;code&gt;localhost&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Port: &lt;code&gt;5432&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;User: Check &lt;code&gt;src/test/resources/reference.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Password: Check &lt;code&gt;src/test/resources/reference.conf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Cleaning up after tests&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;#Stop your local postgres:&#xA;sh docker/run-postgres.sh stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debugging ScalikeJDBC&lt;/h4&gt; &#xA;&lt;p&gt;To view the SQL commands generated by ScalikeJDBC, set &lt;code&gt;scalikejdbc.global.loggingSQLAndTime.enabled&lt;/code&gt; in &lt;code&gt;src/test/resources/reference.conf&lt;/code&gt; to true&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/src/main/resources/envFallback.md&#34;&gt;Environment Variable Fallback&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/INDEPENDENT_TESTS.md&#34;&gt;To run Tests Independently of Postgres&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/automation/README.md&#34;&gt;To run integration tests&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Running Sam Locally with firecloud-develop&lt;/h3&gt; &#xA;&lt;h4&gt;firecloud-develop setup&lt;/h4&gt; &#xA;&lt;p&gt;Set up configs using the &lt;a href=&#34;https://github.com/broadinstitute/firecloud-develop#quick-start---how-do-i-set-up-my-configs&#34;&gt;firecloud-develop quick start guide for configs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you haven&#39;t already, add &lt;code&gt;127.0.0.1 local.broadinstitute.org&lt;/code&gt; to &lt;code&gt;/etc/hosts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo sh -c &#34;echo &#39;127.0.0.1       local.broadinstitute.org&#39; &amp;gt;&amp;gt; /etc/hosts&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then start Sam against dev DBs or local DBs following the instructions below.&lt;/p&gt; &#xA;&lt;h5&gt;Using dev DBs&lt;/h5&gt; &#xA;&lt;p&gt;You must be connected to the Broad Internal network to connect to the Dev DBs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Start up local Sam&#xA;sh config/docker-rsync-local-sam.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using local DBs&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Start up local Sam with local postgres&#xA;LOCAL_POSTGRES=true sh config/docker-rsync-local-sam.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Human-Readable Logging&lt;/h5&gt; &#xA;&lt;p&gt;To make Sam output human-readable log messages instead of Stackdriver-compatible messages, add &lt;code&gt;SAM_LOG_APPENDER=Console-Standard&lt;/code&gt; to your environment variables.&lt;/p&gt; &#xA;&lt;h4&gt;Verify that local Sam is running&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://local.broadinstitute.org:50443/status&#34;&gt;Status endpoint: https://local.broadinstitute.org:50443/status&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://local.broadinstitute.org:50443/#/&#34;&gt;Swagger page: https://local.broadinstitute.org:50443/#/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Smoke Tests&lt;/h2&gt; &#xA;&lt;p&gt;Sam includes smoke tests that can be run anywhere and test a running Sam instance on any network accessible host. See the &lt;a href=&#34;https://raw.githubusercontent.com/broadinstitute/sam/develop/smoke_test/README.md&#34;&gt;Smoke Test README&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/chiseltest</title>
    <updated>2023-04-30T02:06:18Z</updated>
    <id>tag:github.com,2023-04-30:/ucb-bar/chiseltest</id>
    <link href="https://github.com/ucb-bar/chiseltest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official testing library for Chisel circuits.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chiseltest&lt;/h1&gt; &#xA;&lt;p&gt;Chiseltest is the &lt;em&gt;batteries-included&lt;/em&gt; testing and formal verification library for &lt;a href=&#34;https://github.com/chipsalliance/chisel3&#34;&gt;Chisel&lt;/a&gt;-based RTL designs. Chiseltest emphasizes tests that are lightweight (minimizes boilerplate code), easy to read and write (understandability), and compose (for better test code reuse).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use chisel-testers as a managed dependency, add this in your build.sbt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;chiseltest&#34; % &#34;0.5.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are also directly depending on the &lt;code&gt;chisel3&lt;/code&gt; library, please &lt;a href=&#34;https://www.chisel-lang.org/chisel3/docs/appendix/versioning.html&#34;&gt;make sure that your chisel3 and chiseltest versions match&lt;/a&gt; to avoid linking errors.&lt;/p&gt; &#xA;&lt;h2&gt;Writing a Test&lt;/h2&gt; &#xA;&lt;p&gt;ChiselTest integrates with the &lt;a href=&#34;http://scalatest.org&#34;&gt;ScalaTest&lt;/a&gt; framework, which provides good IDE and continuous integration support for launching unit tests.&lt;/p&gt; &#xA;&lt;p&gt;Assuming a typical Chisel project with &lt;code&gt;MyModule&lt;/code&gt; defined in &lt;code&gt;src/main/scala/MyModule.scala&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;class MyModule extend Module {&#xA;    val io = IO(new Bundle {&#xA;        val in = Input(UInt(16.W))&#xA;        val out = Output(UInt(16.W))&#xA;    })&#xA;&#xA;    io.out := RegNext(io.in)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new file in &lt;code&gt;src/test/scala/&lt;/code&gt;, for example, &lt;code&gt;BasicTest.scala&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In this file:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the necessary imports: &lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import chisel3._&#xA;import chiseltest._&#xA;import org.scalatest.flatspec.AnyFlatSpec&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a test class: &lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;class BasicTest extends AnyFlatSpec with ChiselScalatestTester {&#xA;  behavior of &#34;MyModule&#34;&#xA;  // test class body here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;AnyFlatSpec&lt;/code&gt; is the &lt;a href=&#34;http://www.scalatest.org/user_guide/selecting_a_style&#34;&gt;default and recommended ScalaTest style for unit testing&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ChiselScalatestTester&lt;/code&gt; provides testdriver functionality and integration (like signal value assertions) within the context of a ScalaTest environment.&lt;/li&gt; &#xA;   &lt;li&gt;For those interested in additional ScalaTest assertion expressibility, &lt;code&gt;Matchers&lt;/code&gt; provides additional &lt;a href=&#34;http://www.scalatest.org/user_guide/using_matchers&#34;&gt;assertion syntax options&lt;/a&gt;. &lt;code&gt;Matchers&lt;/code&gt; is optional as it&#39;s mainly for Scala-land assertions and does not inter-operate with circuit operations.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In the test class, define a test case: &lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;it should &#34;do something&#34; in {&#xA;  // test case body here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; There can be multiple test cases per test class, and we recommend one test class per Module being tested, and one test case per individual test.&lt;/li&gt; &#xA; &lt;li&gt;In the test case, define the module being tested: &lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;test(new MyModule) { c =&amp;gt;&#xA;  // test body here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;code&gt;test&lt;/code&gt; automatically runs the default simulator (which is &lt;a href=&#34;https://github.com/freechipsproject/treadle&#34;&gt;treadle&lt;/a&gt;), and runs the test stimulus in the block. The argument to the test stimulus block (&lt;code&gt;c&lt;/code&gt; in this case) is a handle to the module under test.&lt;/li&gt; &#xA; &lt;li&gt;In the test body, use &lt;code&gt;poke&lt;/code&gt;, &lt;code&gt;step&lt;/code&gt;, and &lt;code&gt;expect&lt;/code&gt; operations to write the test: &lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;c.io.in.poke(0.U)&#xA;c.clock.step()&#xA;c.io.out.expect(0.U)&#xA;c.io.in.poke(42.U)&#xA;c.clock.step()&#xA;c.io.out.expect(42.U)&#xA;println(&#34;Last output value :&#34; + c.io.out.peek().litValue)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;With your test case complete, you can run all the test cases in your project by invoking ScalaTest. If you&#39;re using &lt;a href=&#34;http://scala-sbt.org&#34;&gt;sbt&lt;/a&gt;, you can either run &lt;code&gt;sbt test&lt;/code&gt; from the command line, or &lt;code&gt;test&lt;/code&gt; from the sbt console. &lt;code&gt;testOnly&lt;/code&gt; can also be used to run specific tests.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Usage References&lt;/h3&gt; &#xA;&lt;p&gt;See the test cases for examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucb-bar/chiseltest/main/src/test/scala/chiseltest/tests/BasicTest.scala&#34;&gt;BasicTest&lt;/a&gt; shows basic &lt;code&gt;peek&lt;/code&gt;, &lt;code&gt;poke&lt;/code&gt;, and &lt;code&gt;step&lt;/code&gt; functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucb-bar/chiseltest/main/src/test/scala/chiseltest/tests/QueueTest.scala&#34;&gt;QueueTest&lt;/a&gt; shows example uses of the DecoupledDriver library, providing functions like &lt;code&gt;enqueueNow&lt;/code&gt;, &lt;code&gt;expectDequeueNow&lt;/code&gt;, their sequence variants, &lt;code&gt;expectPeek&lt;/code&gt;, and &lt;code&gt;expectInvalid&lt;/code&gt;. Also, check out the &lt;a href=&#34;https://raw.githubusercontent.com/ucb-bar/chiseltest/main/src/main/scala/chiseltest/DecoupledDriver.scala&#34;&gt;DecoupledDriver&lt;/a&gt; implementation, and note that it is not a special case, but code that any user can write.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucb-bar/chiseltest/main/src/test/scala/chiseltest/tests/BundleLiteralsSpec.scala&#34;&gt;BundleLiteralsSpec&lt;/a&gt; shows examples of using bundle literals to poke and expect bundle wires. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note: Bundle literals are still an experimental chisel3 feature and need to be explicitly imported: &lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import chisel3.experimental.BundleLiterals._&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucb-bar/chiseltest/main/src/test/scala/chiseltest/tests/AluTest.scala&#34;&gt;AlutTest&lt;/a&gt; shows an example of re-using the same test for different data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucb-bar/chiseltest/main/src/test/scala/chiseltest/tests/ShiftRegisterTest.scala&#34;&gt;ShiftRegisterTest&lt;/a&gt; shows an example of using fork/join to define a test helper function, where multiple invocations of it are pipelined using &lt;code&gt;fork&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;New Constructs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fork&lt;/code&gt; to spawn threads, and &lt;code&gt;join&lt;/code&gt; to block (wait) on a thread. Pokes and peeks/expects to wires from threads are checked during runtime to ensure no collisions or unexpected behavior. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;fork&lt;/code&gt;ed threads provide a concurrency abstraction for writing testbenches only, without real parallelism. The test infrastructure schedules threads one at a time, with threads running once per simulation cycle.&lt;/li&gt; &#xA;   &lt;li&gt;Thread order is deterministic, and attempts to follow lexical order (as it would appear from the code text): &lt;code&gt;fork&lt;/code&gt;ed (child) threads run immediately, then return to the spawning (parent) thread. On future cycles, child threads run before their parent, in the order they were spawned.&lt;/li&gt; &#xA;   &lt;li&gt;Only cross-thread operations that round-trip through the simulator (eg, peek-after-poke) are checked. You can do cross-thread operations in Scala (eg, using shared variables) that aren&#39;t checked, but it is up to you to make sure they are correct and intuitive. This is not recommended. In the future, we may provide checked mechanisms for communicating between test threads.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Regions can be associated with a thread, with &lt;code&gt;fork.withRegion(...)&lt;/code&gt;, which act as a synchronization barrier within simulator time steps. This can be used to create monitors that run after other main testdriver threads have been run, and can read wires those threads have poked.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timescope&lt;/code&gt; allows pokes to be scoped - that is, pokes inside the timescope block &#34;disappear&#34; and the wire reverts to its previous value at the end of the block. This fits well with the pattern of assigning a default pull-up/down to a wire, and temporarily overriding that value, for example a Decoupled &lt;code&gt;valid&lt;/code&gt; signal defaulting low but driven high during an enqueue transaction. See &lt;a href=&#34;https://raw.githubusercontent.com/ucb-bar/chiseltest/main/src/test/scala/chiseltest/tests/TimescopeTest.scala&#34;&gt;TimescopeTest&lt;/a&gt; for examples.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Simulator Backends&lt;/h2&gt; &#xA;&lt;p&gt;One of our goals is to keep your tests independent of the underlying simulator as much as possible. Thus, in most cases you should be able to choose from one of our four supported backends and get the exact same test results albeit with differences in execution speed and wave dump quality.&lt;/p&gt; &#xA;&lt;p&gt;We provide full bindings to two popular open-source simulator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chipsalliance/treadle&#34;&gt;treadle&lt;/a&gt;: default, fast startup times, slow execution for larger circuits, supports only VCD&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.veripool.org/wiki/verilator&#34;&gt;verilator&lt;/a&gt;: enable with &lt;code&gt;VerilatorBackendAnnotation&lt;/code&gt;, slow startup, fast execution, supports VCD and FST&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also provide bindings with some feature limitations to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://iverilog.icarus.com/&#34;&gt;iverilog&lt;/a&gt;: open-source, enable with &lt;code&gt;IcarusBackendAnnotation&lt;/code&gt;, supports VCD, FST and LXT&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.synopsys.com/verification/simulation/vcs.html&#34;&gt;vcs&lt;/a&gt;: commercial, enable with &lt;code&gt;VcsBackendAnnotation&lt;/code&gt;, supports VCD and FSDB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Verilator Versions&lt;/h3&gt; &#xA;&lt;p&gt;We currently support the following versions of the &lt;a href=&#34;https://www.veripool.org/wiki/verilator&#34;&gt;verilator&lt;/a&gt; simulator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v4.028&lt;/code&gt;: &lt;a href=&#34;https://packages.ubuntu.com/focal/verilator&#34;&gt;Ubuntu 20.04&lt;/a&gt;, &lt;a href=&#34;https://src.fedoraproject.org/rpms/verilator&#34;&gt;Fedora 32&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v4.032&lt;/code&gt;: &lt;a href=&#34;https://src.fedoraproject.org/rpms/verilator&#34;&gt;Fedora 33&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v4.034&lt;/code&gt;: &lt;a href=&#34;https://chipyard.readthedocs.io/en/latest/Chipyard-Basics/Initial-Repo-Setup.html#requirements&#34;&gt;Chipyard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v4.038&lt;/code&gt;: &lt;a href=&#34;https://packages.ubuntu.com/groovy/verilator&#34;&gt;Ubuntu 20.10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v4.108&lt;/code&gt;: &lt;a href=&#34;https://src.fedoraproject.org/rpms/verilator&#34;&gt;Fedora 34&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v4.202&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h3&gt;How do I rerun with --full-stacktrace?&lt;/h3&gt; &#xA;&lt;p&gt;Whereas Chisel accepts command-line arguments, chiseltest exposes the underlying annotation interface. You can pass annotations to a test by using &lt;code&gt;.withAnnotations(...)&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Top of file&#xA;import chisel3.stage.PrintFullStackTraceAnnotation&#xA;&#xA;// ...&#xA;&#xA;    // Inside your test spec&#xA;    test(new MyModule).withAnnotations(Seq(PrintFullStackTraceAnnotation)) { c =&amp;gt;&#xA;      // test body here&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will remove the chisel3 stacktrace suppression (ie. &lt;code&gt;at ... ()&lt;/code&gt;). However, if you are using ScalaTest, you may notice a shortened stack trace with &lt;code&gt;...&lt;/code&gt; at the end. You can tell ScalaTest to stop suppressing the stack trace by passing &lt;code&gt;-oF&lt;/code&gt; to it. For example (using SBT):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sbt&#xA;&amp;gt; testOnly &amp;lt;spec name&amp;gt; -- -oF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any arguments after &lt;code&gt;--&lt;/code&gt; pass to ScalaTest directly instead of being interpreted by SBT.&lt;/p&gt; &#xA;&lt;h2&gt;Stability&lt;/h2&gt; &#xA;&lt;p&gt;Most APIs that can be accessed through &lt;code&gt;import chiseltest._&lt;/code&gt; are going to remain stable. We are also trying to keep the API provided through &lt;code&gt;import chiseltest.formal._&lt;/code&gt; relatively stable. All other packages are considered internal and thus might change at any time.&lt;/p&gt; &#xA;&lt;h2&gt;Migrating from chisel-testers / iotesters&lt;/h2&gt; &#xA;&lt;h3&gt;Port to new API&lt;/h3&gt; &#xA;&lt;p&gt;The core abstractions (&lt;code&gt;poke&lt;/code&gt;, &lt;code&gt;expect&lt;/code&gt;, &lt;code&gt;step&lt;/code&gt;) are similar to &lt;a href=&#34;https://github.com/freechipsproject/chisel-testers&#34;&gt;chisel-testers&lt;/a&gt;, but the syntax is inverted: instead of doing &lt;code&gt;tester.poke(wire, value)&lt;/code&gt; with a Scala number value, in ChiselTest you would write &lt;code&gt;wire.poke(value)&lt;/code&gt; with a Chisel literal value. Furthermore, as no reference to the tester context is needed, test helper functions can be defined outside a test class and written as libraries.&lt;/p&gt; &#xA;&lt;h3&gt;PeekPokeTester compatibility&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;chiseltest&lt;/code&gt; now provides a compatibility layer that makes it possible to re-use old &lt;code&gt;PeekPokeTester&lt;/code&gt; based tests with little to no changes to the code. We ported the majority of &lt;a href=&#34;https://github.com/freechipsproject/chisel-testers/tree/master/src/test/scala&#34;&gt;tests from the chisel-testers repository&lt;/a&gt; to our &lt;a href=&#34;https://github.com/ucb-bar/chiseltest/tree/main/src/test/scala/chiseltest/iotesters&#34;&gt;new compatibility layer&lt;/a&gt;. While the test itself can mostly remain unchanged, the old &lt;code&gt;Driver&lt;/code&gt; is removed and instead tests are launched with the new &lt;code&gt;test&lt;/code&gt; syntax.&lt;/p&gt; &#xA;&lt;h3&gt;Hardware testers&lt;/h3&gt; &#xA;&lt;p&gt;Hardware testers are synthesizeable tests, most often extending the &lt;code&gt;BasicTester&lt;/code&gt; class provided by &lt;code&gt;chisel3&lt;/code&gt;. You can now directly &lt;a href=&#34;https://github.com/ucb-bar/chiseltest/raw/main/src/test/scala/chiseltest/tests/HardwareTestsTest.scala&#34;&gt;use these tests with &lt;code&gt;chiseltest&lt;/code&gt; through the &lt;code&gt;runUntilStop&lt;/code&gt; function&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ivanopagano/scalemotion</title>
    <updated>2023-04-30T02:06:18Z</updated>
    <id>tag:github.com,2023-04-30:/ivanopagano/scalemotion</id>
    <link href="https://github.com/ivanopagano/scalemotion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple (but not too much) illustrative app in `scala`, targeted for the codemotion 2013 conference in Rome.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scalemotion&lt;/h1&gt; &#xA;&lt;p&gt;Questo progetto consiste di una semplice (ma non troppo) applicazione illustrativa in &lt;code&gt;scala&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Session Abstract&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;scala&lt;/code&gt; language has now come out of the academic scene and reached out to the enterprise audience.&lt;/p&gt; &#xA;&lt;p&gt;Many resources teach the basics of the language, but we will focus on how production code looks like, through a source-level view of a showcase application.&lt;/p&gt; &#xA;&lt;p&gt;The app is designed to avoid the overwhelming complexity of publicly accessible projects, all the while leveraging a good share of the powerful idioms available in &lt;code&gt;scala&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some previous knowledge of &lt;code&gt;scala&lt;/code&gt; or &lt;em&gt;functional programming&lt;/em&gt; is highly recommended.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: no monad has been harmed or mistreated in the making of this app&lt;/p&gt; &#xA;&lt;h2&gt;Intento&lt;/h2&gt; &#xA;&lt;p&gt;Lo scopo è di presentare una proposta di intervento al &lt;a href=&#34;http://roma.codemotion.it/&#34;&gt;codemotion 2013&lt;/a&gt; di Roma con l&#39;idea di mostrare il linguaggio in un contesto applicativo non esclusivamente didattico.&lt;br&gt; Questa esigenza nasce dalla volontà di esporre qualcosa che vada oltre il solito codice pensato &#34;ad-hoc&#34; per mostrare le varie strutture del linguaggio, ma che dia un&#39;idea concreta di prodotto finale.&lt;/p&gt; &#xA;&lt;p&gt;In tal senso l&#39;applicazione dovrebbe essere auto-consistente, completa, purché non troppo sofisticata, per evitare di introdurre troppi concetti ad un eventuale pubblico inesperto.&lt;/p&gt; &#xA;&lt;p&gt;Allo stesso tempo l&#39;obbiettivo è di suscitare la curiosità dello sviluppatore con una discreta esperienza in altri linguaggi a oggetti (prevalentemente &lt;code&gt;java&lt;/code&gt;) o che magari ha già avuto un assaggio di &lt;code&gt;scala&lt;/code&gt; e desidera sapere come i vari tasselli vengono composti in un&#39;applicazione completa.&lt;/p&gt; &#xA;&lt;h2&gt;Contenuto&lt;/h2&gt; &#xA;&lt;p&gt;L&#39;applicazione deve leggere dinamicamente il contenuto di un &lt;em&gt;feed rss&lt;/em&gt; (il caso d&#39;uso è il sito di &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;StackOverflow&lt;/a&gt;) e calcolare poche semplici statistiche da mostrare attraverso uno o più grafici.&lt;br&gt; In una prima edizione potrebbe bastare avere un istogramma delle parole contenute nelle domande del sito.&lt;/p&gt; &#xA;&lt;p&gt;Seguono alcune caratteristiche desiderate:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I dati vengono aggiornati costantemente attraverso la lettura del feed&lt;/li&gt; &#xA; &lt;li&gt;È possibile filtrare i dati scegliendo delle caratteristiche specifiche del feed di interesse, come &lt;code&gt;tag&lt;/code&gt; o &lt;code&gt;autore&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In caso di assenza di connessione ad Internet sarebbe utile poter passare in modo manuale ad uno o più file di contenuti depositati in locale, senza riavvio dell&#39;applicazione&lt;/li&gt; &#xA; &lt;li&gt;Si possono calcolare più statistiche in contemporanea, attraverso l&#39;uso di &lt;code&gt;parallel collections&lt;/code&gt; o delle librerie asincrone di &lt;code&gt;akka&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Sarebbe opportuno avere 2 o più versioni dell&#39;applicazione, per mostrare incrementalmente come introdurre il parallelismo&lt;/li&gt; &#xA; &lt;li&gt;Utilizzo di un&#39;interfaccia &#34;desktop&#34; e non &lt;em&gt;web&lt;/em&gt;, per evitare la complessità introdotta dall&#39;uso di un qualsiasi &lt;em&gt;web-framework&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Inizialmente conterei di utilizzare &lt;a href=&#34;http://www.oracle.com/technetwork/java/javafx/overview/index.html&#34;&gt;JavaFX&lt;/a&gt; con o senza l&#39;ausilio di &lt;a href=&#34;https://code.google.com/p/scalafx/&#34;&gt;scalafx&lt;/a&gt; (fra l&#39;altro dovrebbe avere dei buoni componenti per i grafici)&lt;/li&gt; &#xA; &lt;li&gt;Una &lt;em&gt;test suite&lt;/em&gt; che mostra come viene gestito l&#39;aspetto del &lt;em&gt;testing&lt;/em&gt; in &lt;code&gt;scala&lt;/code&gt;. Al momento viene utilizzato &lt;a href=&#34;http://www.scalatest.org/&#34;&gt;scalatest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;###Note### L&#39;applicazione si accompagnerà con delle &lt;em&gt;slide&lt;/em&gt; che approfondiscono le parti di codice più significative o interessanti.&lt;/p&gt; &#xA;&lt;p&gt;Come già accennato, è preferibile mantenere ridotto il numero di librerie esterne e di costrutti &#34;avanzati&#34; del linguaggio: lo scopo è di dare un &#34;assaggio&#34; di come sia sviluppare in &lt;code&gt;scala&lt;/code&gt;, senza rendere troppo complesso il tutto.&lt;/p&gt; &#xA;&lt;p&gt;Non è previsto che l&#39;applicazione sia sviluppata in modo interamente &#34;funzionale&#34;, nel senso di aderire interamente ai concetti della &lt;em&gt;programmazione funzionale&lt;/em&gt; quali &#34;purity&#34; o &#34;immutability&#34;.&lt;br&gt; Pur facendo uso in modo pratico di questi concetti, non è nello scopo di questa presentazione introdurre il pubblico alla &lt;em&gt;programmazione funzionale&lt;/em&gt; in quanto tale, né tantomeno introdurre nel progetto l&#39;ulteriore complessità che ne deriverebbe.&lt;/p&gt; &#xA;&lt;h2&gt;Contributi&lt;/h2&gt; &#xA;&lt;p&gt;Chiunque lo desideri è invitato a partecipare attivamente, sia allo sviluppo dell&#39;applicazione e delle slide, nonché all&#39;intervento stesso.&lt;br&gt; Al momento sto cercando di realizzare qualcosa di presentabile, prima di fare una richiesta esplicita all&#39;organizzazione dell&#39;evento, ma i tempi sono ridotti e mi sarebbe utile avere un riscontro o il supporto di chiunque fosse interessato, fosse anche solo per aggiungere un commento o una critica.&lt;/p&gt; &#xA;&lt;p&gt;Potete contattarmi all&#39;indirizzo &lt;a href=&#34;mailto:pagoda_5b@hotmail.com&#34;&gt;pagoda_5b@hotmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>