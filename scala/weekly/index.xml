<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-20T01:48:42Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JetBrains/sbt-idea-plugin</title>
    <updated>2025-07-20T01:48:42Z</updated>
    <id>tag:github.com,2025-07-20:/JetBrains/sbt-idea-plugin</id>
    <link href="https://github.com/JetBrains/sbt-idea-plugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Develop IntelliJ plugins with Scala and SBT&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sbt-idea-plugin&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://index.scala-lang.org/jetbrains/sbt-idea-plugin/sbt-idea-plugin&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/jetbrains/sbt-idea-plugin/sbt-idea-plugin/latest.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/jetbrains/sbt-idea-plugin/actions/workflows/scala.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/team.svg?sanitize=true&#34; alt=&#34;JetBrains team project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/aUKpZzeHCK&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/discord?icon=discord&amp;amp;label&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/JetBrains/intellij-scala&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SBT plugin that makes development of IntelliJ Platform plugins in Scala easier by providing features such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Downloading and attaching IntelliJ Platform binaries&lt;/li&gt; &#xA; &lt;li&gt;Setting up the environment for running tests&lt;/li&gt; &#xA; &lt;li&gt;Flexible way to define plugin artifact structure&lt;/li&gt; &#xA; &lt;li&gt;Publishing the plugin to JetBrains plugin repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a comprehensive usage example see &lt;a href=&#34;https://github.com/JetBrains/intellij-scala&#34;&gt;Scala plugin&lt;/a&gt; or &lt;a href=&#34;https://github.com/JetBrains/intellij-hocon/&#34;&gt;HOCON plugin&lt;/a&gt; build definition.&lt;/p&gt; &#xA;&lt;p&gt;A complete list of public IJ plugins implemented in Scala/SBT can be found on &lt;a href=&#34;https://plugins.jetbrains.com/intellij-platform-explorer/?buildSystem=sbt&#34;&gt;IntelliJ Platform Explorer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that some features of this plugin may be used independently, i.e. if you only want to &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#printprojectgraph--taskkeyunit&#34;&gt;print project structure&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#packaging&#34;&gt;package artifacts&lt;/a&gt; you can depend on:&lt;br&gt; &lt;code&gt;&#34;org.jetbrains.scala&#34; % &#34;sbt-declarative-visualizer&#34; % &#34;LATEST_VERSION&#34;&lt;/code&gt; or &lt;br&gt; &lt;code&gt;&#34;org.jetbrains.scala&#34; % &#34;sbt-declarative-packaging&#34; % &#34;LATEST_VERSION&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note, in versions 4.x, and before you had to use group &lt;code&gt;org.jetbrains&lt;/code&gt; instead of &lt;code&gt;org.jetbrains.scala&lt;/code&gt;:&lt;br&gt; &lt;code&gt;&#34;org.jetbrains&#34; % &#34;sbt-declarative-visualizer&#34; % &#34;LATEST_VERSION&#34;&lt;/code&gt; or &lt;br&gt; &lt;code&gt;&#34;org.jetbrains&#34; % &#34;sbt-declarative-packaging&#34; % &#34;LATEST_VERSION&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#known-issues-and-limitations&#34;&gt;Known Issues&lt;/a&gt; section if you come across a problem, and feel free file a bug on the &lt;a href=&#34;https://github.com/JetBrains/sbt-idea-plugin/issues&#34;&gt;Issues&lt;/a&gt; page of this repo if you find one.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart: IJ Plugin Template Project&lt;/h2&gt; &#xA;&lt;p&gt;To quickly create a Scala based IJ Plugin we provide a template project. Create your own repo on GitHub from the &lt;a href=&#34;https://github.com/JetBrains/sbt-idea-example&#34;&gt; JetBrains / &lt;strong&gt;sbt-idea-example&lt;/strong&gt; &lt;/a&gt; template by clicking the green &lt;code&gt;Use this template&lt;/code&gt; button. Clone the sources and open the &lt;code&gt;build.sbt&lt;/code&gt; via &lt;code&gt;File | Open&lt;/code&gt; menu in IDEA by choosing &lt;code&gt;Open as a project&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manual Installation (adding to an already existing sbt build)&lt;/h2&gt; &#xA;&lt;p&gt;From version 1.0.0, this plugin is published for sbt 0.13 and 1.0. From version 3.17.0, this plugin is published for sbt 1.0 only. From version 5.0.0 this plugin is published in a new group &lt;code&gt;org.jetbrains.scala&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Insert into &lt;code&gt;project/plugins.sbt&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;addSbtPlugin(&#34;org.jetbrains.scala&#34; % &#34;sbt-idea-plugin&#34; % &#34;LATEST_VERSION&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, in versions 4.x, and before you had to use group &lt;code&gt;org.jetbrains&lt;/code&gt; instead of &lt;code&gt;org.jetbrains.scala&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;addSbtPlugin(&#34;org.jetbrains&#34; % &#34;sbt-idea-plugin&#34; % &#34;LATEST_VERSION&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#auto-enable-the-plugin&#34;&gt;Enable&lt;/a&gt; the plugin for your desired projects (your main plugin project and all its dependencies)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run SBT and the plugin will automatically download and attach IntelliJ Platform dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start coding&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SBT Related Settings and Tasks&lt;/h2&gt; &#xA;&lt;h3&gt;IntelliJ Platform and Plugin&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;intellijPluginName in ThisBuild :: SettingKey[String]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;name.in(LocalRootProject).value&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Name of your plugin. Better set this beforehand since several other settings such as IntelliJ Platform directories and artifact names depend on it. Please see &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#name-key-in-projects&#34;&gt;name troubleshooting&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;intellijBuild in ThisBuild :: SettingKey[String]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;LATEST-EAP-SNAPSHOT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Selected IDE&#39;s build number. Binaries and sources of this build will be downloaded from the &lt;a href=&#34;https://www.jetbrains.org/intellij/sdk/docs/reference_guide/intellij_artifacts.html&#34;&gt;repository&lt;/a&gt; and used in compilation and testing. You can find build number of your IntelliJ product in &lt;code&gt;Help -&amp;gt; About&lt;/code&gt; dialog. However, it might be incomplete, so it is strongly recommended to verify it against &lt;a href=&#34;https://www.jetbrains.com/intellij-repository/releases&#34;&gt;available releases&lt;/a&gt; and &lt;a href=&#34;https://www.jetbrains.com/intellij-repository/snapshots&#34;&gt;available snapshots&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: minimum supported major IDEA version: &lt;code&gt;242.x&lt;/code&gt; (~&lt;code&gt;2024.2.x&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;intellijPlatform in ThisBuild :: SettingKey[IntelliJPlatform]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;IntelliJPlatform.IdeaCommunity&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Edition of IntelliJ IDE to use in project. Currently available options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IdeaCommunity&lt;/li&gt; &#xA; &lt;li&gt;IdeaUltimate&lt;/li&gt; &#xA; &lt;li&gt;PyCharmCommunity&lt;/li&gt; &#xA; &lt;li&gt;PyCharmProfessional&lt;/li&gt; &#xA; &lt;li&gt;CLion&lt;/li&gt; &#xA; &lt;li&gt;MPS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;intellijPlugins :: SettingKey[IdeaPlugin]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;Seq.empty&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;IntelliJ plugins to depend on. Bundled(internal) plugins are specified by their plugin ID. Plugins from repo can be specified by the plugin&#39;s id, optional version and update channel. Plugins will be checked for compatibility against the &lt;code&gt;intellijBuild&lt;/code&gt; you specified and updated to the latest version unless some specific version is given explicitly. Inter-plugin dependencies are also transitively resolved(e.g. depending on the Scala plugin will automatically attach Java and other plugin dependencies)&lt;/p&gt; &#xA;&lt;p&gt;Plugin IDs can be either searched by plugin name with the help of &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#searchpluginid--mapstring-string-boolean&#34;&gt;searchPluginId&lt;/a&gt; task or &lt;a href=&#34;https://github.com/JetBrains/sbt-idea-plugin/wiki/How-to-find-plugin&#39;s-id&#34;&gt;manually&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can tune plugin resolving on individual plugin level by specifying several options to &lt;code&gt;toPlugin&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;transitive&lt;/code&gt; - use transitive plugin resolution(default: true)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;optionalDeps&lt;/code&gt; - resolve optional plugin dependencies(default: true)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;excludedIds&lt;/code&gt; - blacklist certain plugins from transitive resolution(default: Set.empty)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;❗&lt;/span&gt; Please note that Java support in IJ is implemented by a plugin: &lt;code&gt;com.intellij.java&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;❗&lt;/span&gt; Please remember that you must &lt;a href=&#34;https://jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_dependencies.html#dependency-declaration-in-pluginxml&#34;&gt;declare plugin dependencies in plugin.xml&lt;/a&gt; or your plugin may fail to load.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SBT&#34;&gt;// use properties plugin bundled with IDEA&#xA;intellijPlugins += &#34;com.intellij.properties&#34;.toPlugin&#xA;// use Scala plugin as a dependency&#xA;intellijPlugins += &#34;org.intellij.scala&#34;.toPlugin&#xA;// use Scala plugin version 2023.3.10&#xA;intellijPlugins += &#34;org.intellij.scala:2023.3.10&#34;.toPlugin&#xA;// use latest nightly build from the repo&#xA;intellijPlugins += &#34;org.intellij.scala::Nightly&#34;.toPlugin&#xA;// use specific version from Eap update channel&#xA;intellijPlugins += &#34;org.intellij.scala:2023.3.10:Eap&#34;.toPlugin&#xA;// add JavaScript plugin but without its Grazie plugin dependency&#xA;intellijPlugins += &#34;JavaScript&#34;.toPlugin(excludedIds = Set(&#34;tanvd.grazi&#34;))&#xA;// add custom plugin with id `org.custom.plugin`, download it using the direct link https://org.example/path/to/your/plugin.zip&#xA;intellijPlugins += &#34;org.custom.plugin:https://org.example/path/to/your/plugin.zip&#34;.toPlugin&#xA;// add custom plugin with id `org.custom.plugin` and resolve it from Marketplace.&#xA;//  if it fails to resolve it in Marketplace it will use the fallback download link&#xA;intellijPlugins += &#34;org.custom.plugin&#34;.toPlugin.withFallbackDownloadUrl(&#34;https://org.example/path/to/your/plugin.zip&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;intellijRuntimePlugins :: SettingKey[IdeaPlugin]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;Seq.empty&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;IntelliJ plugins to load at runtime (includes tests). These plugins are not a compile time dependencies and cannot be referenced in code. Useful for testing your plugin in the presence of other plugins.&lt;/p&gt; &#xA;&lt;p&gt;The usage is the same as &lt;code&gt;intellijPlugins&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;searchPluginId :: Map[String, (String, Boolean)]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;searchPluginId [--nobundled|--noremote] &amp;lt;plugin name regexp&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Searches and prints plugins across locally installed IJ sdk and plugin marketplace. Use provided flags to limit search scope to only bundled or marketplace plugins.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; searchPluginId Prop&#xA;[info] bundled          - Properties[com.intellij.properties]&#xA;[info] bundled          - Resource Bundle Editor[com.intellij.properties.bundle.editor]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;jbrInfo :: Option[JbrInfo]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;AutoJbr()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;JetBrains Java runtime version to use when running the IDE with the plugin. By default JBR version is extracted from IDE installation metadata. Only jbr 11 is supported. Available versions can be found on &lt;a href=&#34;https://github.com/JetBrains/JetBrainsRuntime/releases&#34;&gt;jbr bintray&lt;/a&gt;. To disable, set to &lt;code&gt;NoJbr&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;patchPluginXml :: SettingKey[pluginXmlOptions]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;pluginXmlOptions.DISABLED&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define some &lt;a href=&#34;https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_configuration_file.html&#34;&gt;&lt;code&gt;plugin.xml&lt;/code&gt;&lt;/a&gt; fields to be patched when building the artifact. Only the file in &lt;code&gt;target&lt;/code&gt; folder is patched, original sources are left intact. Available options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SBT&#34;&gt;patchPluginXml := pluginXmlOptions { xml =&amp;gt;&#xA;  xml.version           = version.value&#xA;  xml.pluginDescription = &#34;My cool IDEA plugin&#34;&#xA;  xml.changeNotes       = sys.env(&#34;CHANGE_LOG_FROM_CI&#34;)&#xA;  xml.sinceBuild        = (intellijBuild in ThisBuild).value&#xA;  xml.untilBuild        = &#34;193.*&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;intellijVMOptions :: SettingKey[IntellijVMOptions]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Fine tune java VM options for running the plugin with &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#runide-nodebug-suspend-blocking--inputkeyunit&#34;&gt;runIDE&lt;/a&gt; task. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SBT&#34;&gt;intellijVMOptions := intellijVMOptions.value.copy(xmx = 2048, xms = 256) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;ideaConfigOptions :: SettingKey[IdeaConfigBuildingOptions]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Fine tune how IntelliJ run configurations are generated when importing the project in IDEA.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;runIDE [noDebug] [suspend] [blocking] :: InputKey[Unit]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Runs IntelliJ IDE with current plugin. This task is non-blocking by default, so you can continue using SBT console.&lt;/p&gt; &#xA;&lt;p&gt;By default, IDE is run with non-suspending debug agent on port &lt;code&gt;5005&lt;/code&gt;. This can be overridden by either optional arguments above, or by modifying default &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#intellijvmoptions--settingkeyintellijvmoptions&#34;&gt;&lt;code&gt;intellijVMOptions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Publishing and Verification&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;publishPlugin [channel] :: InputKey[String]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Upload and publish your IntelliJ plugin on &lt;a href=&#34;https://plugins.jetbrains.com&#34;&gt;https://plugins.jetbrains.com&lt;/a&gt;. In order to publish to the repo you need to &lt;a href=&#34;http://www.jetbrains.org/intellij/sdk/docs/plugin_repository/api/plugin_upload.html&#34;&gt;obtain permanent token&lt;/a&gt; and either place it into &lt;code&gt;~/.ij-plugin-repo-token&lt;/code&gt; file or pass via &lt;code&gt;IJ_PLUGIN_REPO_TOKEN&lt;/code&gt; env or java property.&lt;/p&gt; &#xA;&lt;p&gt;This task also expects an optional argument - a &lt;a href=&#34;http://www.jetbrains.org/intellij/sdk/docs/plugin_repository/custom_channels.html&#34;&gt;custom release channel&lt;/a&gt;. If omitted, plugin will be published to the default plugin repository channel (Stable)&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;runPluginVerifier :: TaskKey[File]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-plugin-verifier&#34;&gt;IntelliJ Plugin Verifier&lt;/a&gt; integration task allows to check the binary compatibility of the built plugin against the currently used or explicitly specified IntelliJ IDE builds. The task returns a folder with the verification reports.&lt;/p&gt; &#xA;&lt;p&gt;The verification can be customized by changing the default options defined in the &lt;code&gt;pluginVerifierOptions&lt;/code&gt; key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SBT&#34;&gt;pluginVerifierOptions := pluginVerifierOptions.value.copy(&#xA;  version = &#34;1.254&#34;,        // use a specific verifier version&#xA;  offline = true,           // forbid the verifier from reaching the internet&#xA;  overrideIDEs  = Seq(&#34;IC-2019.3.5&#34;, &#34;PS-2019.3.2&#34;), // verify against specific products instead of &#39;intellijBuild&#39;&#xA;  failureLevels = Set(FailureLevel.DEPRECATED_API_USAGES) // only fail if deprecated APIs are used&#xA;   // ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;signPlugin :: TaskKey[File]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Utility task that signs the plugin artifact before uploading to the &lt;a href=&#34;https://plugins.jetbrains.com/marketplace&#34;&gt;JetBrains Marketplace&lt;/a&gt;. Signing is performed using the &lt;a href=&#34;https://github.com/JetBrains/marketplace-zip-signer&#34;&gt;Marketplace zip signer&lt;/a&gt; library. To sign a plugin a valid certificate chain, and a private key are required.&lt;/p&gt; &#xA;&lt;p&gt;Signing is disabled by default at the moment. To enable it and set the options, modify the &lt;code&gt;signPluginOptions&lt;/code&gt; key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SBT&#34;&gt;signPluginOptions := signPluginOptions.value.copy(&#xA;  enabled = true,&#xA;  certFile = Some(file(&#34;/path/to/certificate&#34;)), // or via PLUGIN_SIGN_KEY env var&#xA;  privateKeyFile  = Some(file(&#34;/path/to/privateKey&#34;)), // or via PLUGIN_SIGN_CERT env var&#xA;  keyPassphrase = Some(&#34;keyPassword&#34;) // or None if password is not set(or via PLUGIN_SIGN_KEY_PWD env var)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If signing the plugin artifact zip is enabled via &lt;code&gt;signPluginOptions&lt;/code&gt;, this task will be used a dependency of the &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#publishplugin-channel--inputkeystring&#34;&gt;&lt;code&gt;publishPlugin&lt;/code&gt;&lt;/a&gt; task, so that the artifact is automatically signed before uploading to the &lt;a href=&#34;https://plugins.jetbrains.com/marketplace&#34;&gt;JetBrains Marketplace&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;buildIntellijOptionsIndex :: TaskKey[Unit]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Builds index of options provided by the plugin to make them searchable via &lt;a href=&#34;https://www.jetbrains.com/help/idea/searching-everywhere.html#search_settings&#34;&gt;search everywhere&lt;/a&gt; action. This task should either be manually called instead of &lt;code&gt;packageArtifact&lt;/code&gt; or before &lt;code&gt;packageArtifactZip&lt;/code&gt; since it patches jars already built by &lt;code&gt;packageArtifact&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Packaging&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;packageMethod :: SettingKey[PackagingMethod]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default for root project&lt;/strong&gt;: &lt;code&gt;PackagingMethod.Standalone(targetPath = s&#34;lib/${name.value}.jar&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default for all other subprojects&lt;/strong&gt;: &lt;code&gt;PackagingMethod.MergeIntoParent()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Controls how current project will be treated when packaging the plugin artifact.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SBT&#34;&gt;// produce standalone jar with the same name as the project:&#xA;packageMethod := PackagingMethod.Standalone()&#xA;&#xA;// put all classes of this project into parent&#39;s jar&#xA;// NB: this option supports transitive dependencies on projects: it will walk up the dependency &#xA;// tree to find the first Standalone() project, however if your project has multiple such parents&#xA;// this will result in an error - in this case use MergeIntoOther(project: Project) to expicitly&#xA;// specify in which project to merge into&#xA;packageMethod := PackagingMethod.MergeIntoParent()&#xA;&#xA;// This packages all projects that are marked with the same moduleName into&#xA;// a module jar under lib/modules/&amp;lt;moduleName&amp;gt;.jar&#xA;// Modules are a new mechanism in intellij to better configure dependencies&#xA;// between plugins and builtin modules.&#xA;packageMethod := PackagingMethod.PluginModule(&#34;moduleName&#34;)&#xA;&#xA;// merge all dependencies of this project in a standalone jar&#xA;// being used together with assembleLibraries setting allows sbt-assembly like packaging&#xA;// the project may contain classes but they will be ignored during packaging&#xA;packageMethod := PackagingMethod.DepsOnly(&#34;lib/myProjectDeps.jar&#34;)&#xA;assembleLibraries := true&#xA;&#xA;// skip project alltogether during packaging&#xA;packageMethod := PackagingMethod.Skip()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;packageLibraryMappings :: SettingKey[Seq[(ModuleID, Option[String])]]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default for root project&lt;/strong&gt;: &lt;code&gt;Seq.empty&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default for all other project&lt;/strong&gt;s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SBT&#34;&gt;&#34;org.scala-lang&#34;  % &#34;scala-.*&#34; % &#34;.*&#34;        -&amp;gt; None ::&#xA;&#34;org.scala-lang.modules&#34; % &#34;scala-.*&#34; % &#34;.*&#34; -&amp;gt; None :: Nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sequence of rules to fine-tune how the library dependencies are packaged. By default all dependencies including transitive are placed in the subfolder defined by &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#packagelibrarybasedir--settingkeyfile&#34;&gt;&lt;code&gt;packageLibraryBaseDir&lt;/code&gt;&lt;/a&gt;(defaults to &#34;lib&#34;) of the plugin artifact.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#findlibrarymapping--inputkeyseqstring-seqmodulekey-optionstring&#34;&gt;&lt;code&gt;findLibraryMapping&lt;/code&gt;&lt;/a&gt; task to debug the library mappings&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SBT&#34;&gt;// merge all scalameta jars into a single jar&#xA;packageLibraryMappings += &#34;org.scalameta&#34; %% &#34;.*&#34; % &#34;.*&#34; -&amp;gt; Some(&#34;lib/scalameta.jar&#34;)&#xA;&#xA;// skip packaging protobuf&#xA;packageLibraryMappings += &#34;com.google.protobuf&#34; % &#34;protobuf-java&#34; % &#34;.*&#34; -&amp;gt; None&#xA;&#xA;// rename scala library(strip version suffix)&#xA;packageLibraryMappings += &#34;org.scala-lang&#34; % &#34;scala-library&#34; % scalaVersion -&amp;gt; Some(&#34;lib/scala-library.jar&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;packageLibraryBaseDir :: SettingKey[File]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;file(&#34;lib&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sets the per-project default sub-folder into which external libraries are packaged. Rules from &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#packagefilemappings--taskkeyseqfile-string&#34;&gt;&lt;code&gt;packageLibraryMappings&lt;/code&gt;&lt;/a&gt; will override this setting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt;: This directory must be relative to the &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#packageoutputdir--settingkeyfile&#34;&gt;&lt;code&gt;packageOutputDir&lt;/code&gt;&lt;/a&gt; so don&#39;t prepend values of the keys with absolute paths (such as &lt;code&gt;target&lt;/code&gt; or &lt;code&gt;baseDirectory&lt;/code&gt;) to it&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB!&lt;/strong&gt;: IDEA plugin classloader &lt;strong&gt;only&lt;/strong&gt; adds the &lt;code&gt;lib&lt;/code&gt; folder to the classpath when loading your plugin. Modifying this setting will essentially exclude the libraries of a project from automatic classloading&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SBT&#34;&gt;packageLibraryBaseDir  := file(&#34;lib&#34;) / &#34;third-party&#34;&#xA;&#xA;// protobuf will still be packaged into lib/protobuf.jar&#xA;packageLibraryMappings += &#34;com.google.protobuf&#34; % &#34;protobuf-java&#34; % &#34;.*&#34; -&amp;gt; Some(&#34;lib/protobuf.jar&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;packageFileMappings :: TaskKey[Seq[(File, String)]]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;Seq.empty&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Defines mappings for adding custom files to the artifact or even override files inside jars. Target path is considered to be relative to &lt;code&gt;packageOutputDir&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SBT&#34;&gt;// copy whole folder recursively to artifact root&#xA;packageFileMappings += target.value / &#34;repo&#34; -&amp;gt; &#34;repo/&#34;&#xA;&#xA;// package single file info a jar&#xA;packageFileMappings += &#34;resources&#34; / &#34;ILoopWrapperImpl.scala&#34; -&amp;gt;&#xA;                            &#34;lib/jps/repl-interface-sources.jar&#34;&#xA;                            &#xA;// overwrite some file inside already existing jar of the artifact&#xA;packageFileMappings +=  &#34;resources&#34; / &#34;META-INF&#34; / &#34;plugin.xml&#34; -&amp;gt;&#xA;                            &#34;lib/scalaUltimate.jar!/META-INF/plugin.xml&#34;                            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;packageAdditionalProjects :: SettingKey[Seq[Project]]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;Seq.empty&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default the plugin builds artifact structure based on internal classpath dependencies of the projects in an SBT build(&lt;code&gt;dependsOn(...)&lt;/code&gt;). However, sometimes one may need to package a project that no other depends upon. This setting is used to explicitly tell the plugin which projects to package into the artifact without a need to introduce unwanted classpath dependency.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;shadePatterns :: SettingKey[Seq[ShadePattern]]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;Seq.empty&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Class shading patterns to be applied by JarJar library. Used to resolve name clashes with libraries from IntelliJ platform such as protobuf.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SBT&#34;&gt;shadePatterns += ShadePattern(&#34;com.google.protobuf.**&#34;, &#34;zinc.protobuf.@1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;bundleScalaLibrary in ThisBuild :: SettingKey[Boolean]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Trying to load the same classes in your plugin&#39;s classloader which have already been loaded by a parent classloader will result in classloader constraint violation. A vivid example of this scenario is depending on some other plugin, that bundles scala-library.jar(e.g. Scala plugin for IJ) and still bundling your own.&lt;/p&gt; &#xA;&lt;p&gt;To workaround this issue &lt;code&gt;sbt-idea-plugin&lt;/code&gt; tries to automatically detect if your plugin project has dependencies on other plugins with Scala and filter out scala-library.jar from the resulting artifact. However, the heuristic cannot cover all possible cases and thereby this setting is exposed to allow manual control over bundling the scala-library.jar&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;instrumentThreadingAnnotations :: SettingKey[Boolean]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Generate JVM bytecode to assert that a method is called on the correct IDEA thread. The supported annotations are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;com.intellij.util.concurrency.annotations.RequiresBackgroundThread&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.intellij.util.concurrency.annotations.RequiresEdt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.intellij.util.concurrency.annotations.RequiresReadLock&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.intellij.util.concurrency.annotations.RequiresReadLockAbsence&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.intellij.util.concurrency.annotations.RequiresWriteLock&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/JetBrains/intellij-community/raw/5758eb99b4a1971ebe75cda755693cc930949465/platform/core-api/src/com/intellij/util/concurrency/ThreadingAssertions.java&#34;&gt;IntelliJ IDEA ThreadingAssertions.java&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;packageOutputDir :: SettingKey[File]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;target.value / &#34;plugin&#34; / intellijPluginName.in(ThisBuild).value.removeSpaces&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Folder to place the assembled artifact into.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;packageArtifact :: TaskKey[File]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Builds unpacked plugin distribution. This task traverses dependency graph of the build and uses settings described in the section above to create sub-artifact structure for each project. By default all child projects&#39; classes are merged into the root project jar, which is placed into the &#34;lib&#34; folder of the plugin artifact, all library dependencies including transitive are placed in the &#34;lib&#34; folder as well.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;packageArtifactZip :: TaskKey[File]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Produces ZIP file from the artifact produced by &lt;code&gt;packageArtifact&lt;/code&gt; task. This is later used by &lt;code&gt;publishPlugin&lt;/code&gt; as an artifact to upload.&lt;/p&gt; &#xA;&lt;h3&gt;Utils&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;findLibraryMapping :: InputKey[Seq[(String, Seq[(ModuleKey, Option[String])])]]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Returns detailed info about libraries and their mappings by a library substring. Helps to answer questions such as &#34;Why is this jar in the artifact?&#34; or &#34;Which module introduced this jar?&#34; Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt:scalaUltimate&amp;gt; show findMapping interface&#xA;[info] * (runtimeDependencies,ArrayBuffer((org.scala-sbt:compiler-interface:1.4.0-M12[],Some(lib/jps/compiler-interface.jar)), (org.scala-sbt:util-interface:1.3.0[],Some(lib/jps/sbt-interface.jar))))&#xA;[info] * (repackagedZinc,ArrayBuffer((org.scala-sbt:compiler-interface:1.4.0-M12[],Some(*)), (org.scala-sbt:launcher-interface:1.1.3[],Some(*)), (org.scala-sbt:util-interface:1.3.0[],Some(*))))&#xA;[info] * (compiler-jps,ArrayBuffer((org.scala-sbt:util-interface:1.3.0[],Some(*)), (org.scala-sbt:compiler-interface:1.4.0-M12[],Some(lib/jps/compiler-interface.jar))))&#xA;[info] * (compiler-shared,ArrayBuffer((org.scala-sbt:util-interface:1.3.0[],Some(*)), (org.scala-sbt:compiler-interface:1.4.0-M12[],Some(*))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;printProjectGraph :: TaskKey[Unit]&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Prints ASCII graph of currently selected project to console. Useful for debugging complex builds. &lt;img src=&#34;https://user-images.githubusercontent.com/1345782/65074597-d8172880-d99d-11e9-947e-aa74855e9ff1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running the plugin&lt;/h2&gt; &#xA;&lt;h3&gt;From SBT&lt;/h3&gt; &#xA;&lt;p&gt;To run the plugin from SBT simply use &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#runide-nodebug-suspend-blocking--inputkeyunit&#34;&gt;runIDE&lt;/a&gt; task. Your plugin will be automatically compiled, an artifact built and attached to new IntelliJ instance.&lt;/p&gt; &#xA;&lt;p&gt;Debugger can later be attached to the process remotely - the default port is 5005.&lt;/p&gt; &#xA;&lt;h3&gt;From IDEA&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt-idea-plugin&lt;/code&gt; generates IDEA-readable artifact xml and run configuration on project import&lt;/li&gt; &#xA; &lt;li&gt;After artifact and run configuration have been created(they&#39;re located in &lt;code&gt;.idea&lt;/code&gt; folder of the project) you can run or debug the new run configuration. This will compile the project, build the artifact and attach it to the new IDEA instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;❗&lt;/span&gt; Note that doing an &#34;SBT Refresh&#34; is required after making changes to your build that affect the final artifact(i.e. changing &lt;code&gt;libraryDependencies&lt;/code&gt;), in order to update IDEA configs&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;❗&lt;/span&gt; You may need to &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/sbt-idea-plugin/master/#plugin-artifact-not-built-when-running-from-idea-after-importing-the-project&#34;&gt;manually build the artifact&lt;/a&gt; when running your plugin for the first time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Custom IntelliJ artifacts repo&lt;/h2&gt; &#xA;&lt;p&gt;Under some circumstances using a proxy may be required to access IntelliJ artifacts repo, or there even is a local artifact mirror set up. To use non-default repository for downloading IntelliJ product distributions set &lt;code&gt;sbtidea.ijrepo&lt;/code&gt; jvm property. Example: &lt;code&gt;-Dsbtidea.ijrepo=https://proxy.mycompany.com/intellij-repository&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Auto enable the plugin&lt;/h2&gt; &#xA;&lt;p&gt;Sbt-idea-plugin currently breaks scalaJS compilation, and thereby has autoloading disabled. To enable it either add &lt;code&gt;enablePlugins(SbtIdeaPlugin)&lt;/code&gt; to project definition. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;lazy val hocon = project.in(file(&#34;.&#34;)).settings(&#xA;  scalaVersion  := &#34;2.12.8&#34;,&#xA;  version       := &#34;2019.1.2&#34;,&#xA;  intellijInternalPlugins := Seq(&#34;properties&#34;),&#xA;  libraryDependencies += &#34;com.novocode&#34; % &#34;junit-interface&#34; % &#34;0.11&#34; % &#34;test&#34;,&#xA;).enablePlugins(SbtIdeaPlugin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you with to automatically enable the plugin for all projects in your build, place the following class into top level &lt;code&gt;project&lt;/code&gt; folder of your build.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.jetbrains.sbtidea.AbstractSbtIdeaPlugin&#xA;&#xA;object AutoSbtIdeaPlugin extends AbstractSbtIdeaPlugin {&#xA;  override def trigger  = allRequirements&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Grouping with qualified names is available from Scala plugin version 2024.1.4&lt;/h2&gt; &#xA;&lt;p&gt;In the Scala plugin 2024.1.4 a significant change has been made according to modules grouping and their naming. You can read more about this change &lt;a href=&#34;https://youtrack.jetbrains.com/issue/SCL-21288/Rewrite-deprecated-module-grouping-logic-to-the-new-API-grouping-with-qualified-names-is-now-supported.#focus=Comments-27-8977291.0-0&#34;&gt;here&lt;/a&gt;. Because of this change, it was necessary to change how the project names are generated in packageMapping tasks (&lt;code&gt;packageMappings&lt;/code&gt; and &lt;code&gt;packageMappingsOffline&lt;/code&gt;). To switch between the new and the old projects naming logic, &lt;code&gt;grouping.with.qualified.names.enabled&lt;/code&gt; system property has been introduced. If your Scala plugin version is 2024.1.4 or higher, then in order to generate correct mappings you should set this property to true (&lt;code&gt;-Dgrouping.with.qualified.names.enabled=true&lt;/code&gt;). Otherwise, there is no need to do anything as this value is set to false by default.&lt;/p&gt; &#xA;&lt;h2&gt;Separate modules for production and test sources are available from Scala plugin version 2024.2.444&lt;/h2&gt; &#xA;&lt;p&gt;From the 2024.2.444 Scala plugin version, the option to create separate modules for production and test sources has been introduced. You can read more about this change &lt;a href=&#34;https://youtrack.jetbrains.com/issue/SCL-21157/sbt-represent-production-and-test-sources-as-separate-IntelliJ-modules&#34;&gt;here&lt;/a&gt;. Because of this change, it was necessary to change how the project names (in &lt;code&gt;packageMappings&lt;/code&gt; and &lt;code&gt;packageMappingsOffline&lt;/code&gt; tasks) and module name (in &lt;code&gt;createIDEARunConfiguration&lt;/code&gt; task) are generated. To switch between separate modules for production and test sources and the &#34;old approach&#34; of module generation, &lt;code&gt;separate.prod.test.sources.enabled&lt;/code&gt; system property has been introduced. If your Scala plugin version is 2024.2.444 or higher, and you enabled separate modules for production and test sources in &lt;code&gt;Settings | Build, Execution, Deployment | Build Tools | sbt&lt;/code&gt; then to generate correct mappings and IDEA Run Configuration you should set this property to true (&lt;code&gt;-Dseparate.prod.test.sources.enabled=true&lt;/code&gt;). Otherwise, there is no need to do anything as this value is set to false by default.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues and Limitations&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;name&lt;/code&gt; key in projects&lt;/h3&gt; &#xA;&lt;p&gt;Please do not explicitly set the &lt;code&gt;name&lt;/code&gt; setting key for projects that have &lt;code&gt;SbtIdeaPlugin&lt;/code&gt; attached. SBT will automatically set it from the &lt;code&gt;lazy val&lt;/code&gt;&#39;s name of the project definition.&lt;/p&gt; &#xA;&lt;p&gt;IDEA cannot correctly handle the sutuation when &lt;code&gt;name&lt;/code&gt; key and &lt;code&gt;lazy val&lt;/code&gt;&#39;s name of a project are different, thus making the generated artifact and run configuration xml&#39;s invalid.&lt;/p&gt; &#xA;&lt;p&gt;Related issue: &lt;a href=&#34;https://github.com/JetBrains/sbt-idea-plugin/issues/72&#34;&gt;https://github.com/JetBrains/sbt-idea-plugin/issues/72&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Plugin artifact not built when running from IDEA after importing the project&lt;/h3&gt; &#xA;&lt;p&gt;The generated IDEA run configurations depend on the built artifact of the plugin, so it should be built automatically when running or debugging the generated configuration.&lt;/p&gt; &#xA;&lt;p&gt;However, when the IDEA xml configuration file is created externally, like in the case of &lt;code&gt;sbt-idea-plugin&lt;/code&gt;, it is sometimes not picked up immediately and requires an explicit loading.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to explicitly invoke &lt;code&gt;Build | Build Artifacts | Rebuild&lt;/code&gt; from IDEA after importing the project for the first time(i.e. when xmls are first generated).&lt;/p&gt; &#xA;&lt;h3&gt;Development notes&lt;/h3&gt; &#xA;&lt;p&gt;To publish a new version of &lt;code&gt;sbt-idea-plugin&lt;/code&gt;, just add a new tag in format &lt;code&gt;vA.B.C&lt;/code&gt; (e.g.&lt;code&gt;v3.13.4&lt;/code&gt;) and push it to the main branch. TeamCity will automatically Build/Test/Deploy it in &lt;code&gt;sbt-idea-plugin&lt;/code&gt; configuration. &lt;br&gt; (works in internal network only)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/intellij-scala</title>
    <updated>2025-07-20T01:48:42Z</updated>
    <id>tag:github.com,2025-07-20:/JetBrains/intellij-scala</id>
    <link href="https://github.com/JetBrains/intellij-scala" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala plugin for IntelliJ IDEA&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;official JetBrains project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JetBrains/intellij-scala/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/JetBrains/intellij-scala/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Scala Plugin Build &amp;amp; Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/aUKpZzeHCK&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/discord?icon=discord&amp;amp;label&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Scala Plugin for IntelliJ IDEA&lt;/h1&gt; &#xA;&lt;p&gt;The plugin adds support for the Scala language to &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;. &lt;br&gt; It enables multiple features such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Coding assistance (highlighting, completion, formatting, refactorings, code inspection etc.)&lt;/li&gt; &#xA; &lt;li&gt;Navigation, search, information about types and implicits&lt;/li&gt; &#xA; &lt;li&gt;Integration with build tools: SBT, Maven, Gradle, BSP&lt;/li&gt; &#xA; &lt;li&gt;Testing frameworks support (ScalaTest, MUnit, Specs2, uTest)&lt;/li&gt; &#xA; &lt;li&gt;Scala debugger, worksheets and Ammonite scripts&lt;/li&gt; &#xA; &lt;li&gt;And many more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(note that HOCON support was moved to a &lt;a href=&#34;https://plugins.jetbrains.com/plugin/10481-hocon&#34;&gt;separate plugin&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;General information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To get information about how to install and use this plugin in IDEA, please use &lt;a href=&#34;https://www.jetbrains.com/idea/help/scala.html&#34;&gt;IntelliJ IDEA online help&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have any question about the Scala plugin, we&#39;d be glad to answer it in our &lt;a href=&#34;https://discord.gg/aUKpZzeHCK&#34;&gt;discord channel&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reporting issues&lt;/h3&gt; &#xA;&lt;p&gt;If you found a bug, please report it on our &lt;a href=&#34;https://youtrack.jetbrains.com/issues/SCL#newissue&#34;&gt;issue tracker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/intellij-scala/idea252.x/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setting up the project&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;In order to take part in Scala plugin development, you need:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;IntelliJ IDEA 2022.3 or higher with a compatible version of Scala plugin&lt;/li&gt; &#xA; &lt;li&gt;JDK 17 (you can &lt;a href=&#34;https://www.jetbrains.com/help/idea/sdk.html#define-sdk&#34;&gt;download it via IntelliJ IDEA&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;(optional but &lt;strong&gt;recommended&lt;/strong&gt;) &lt;br&gt; Enable &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/enabling-internal.html&#34;&gt;internal mode&lt;/a&gt; in IDEA to get access to helpful internal actions and debug information&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository to your computer&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/JetBrains/intellij-scala.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Open IntelliJ IDEA. From the Welcome screen or &lt;code&gt;File&lt;/code&gt; menu, click &lt;code&gt;Open&lt;/code&gt;, and point to the directory where you cloned the Scala plugin sources. It will be automatically imported as a sbt project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the next step, select JDK 17 as project JDK (create it from an installed JDK if necessary).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the &lt;code&gt;scalaCommunity&lt;/code&gt; run configuration and select the &lt;code&gt;Run&lt;/code&gt; or &lt;code&gt;Debug&lt;/code&gt; button to build and start a development version of IDEA with the Scala plugin.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running the Plugin&lt;/h2&gt; &#xA;&lt;h3&gt;Debugging mode&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to try your changes is typically to launch the &lt;code&gt;scalaCommunity&lt;/code&gt; run configuration which is created when you set up the project as described above. Under the hood it will launch IntelliJ IDEA with pre-installed Scala Plugin, built from sources.&lt;/p&gt; &#xA;&lt;h3&gt;As a standalone plugin&lt;/h3&gt; &#xA;&lt;p&gt;To run and distribute a modified version of the plugin in a regular IntelliJ instance, you need to package it.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;on the sbt shell, run &lt;code&gt;packageArtifactZip&lt;/code&gt;. This will output the generated plugin zip location (typically into &lt;code&gt;&amp;lt;project directory&amp;gt;/target/scala-plugin.zip&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;In IntelliJ, open Preferences, section Plugins, choose &#34;Install plugin from disk...&#34; and navigate to the scala-plugin.zip&lt;/li&gt; &#xA; &lt;li&gt;Restart IntelliJ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running the Tests&lt;/h2&gt; &#xA;&lt;p&gt;To run tests properly, the plugin needs to be packaged. On the sbt shell:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;packageArtifact&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;runFastTests&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The &#34;fast tests&#34; can take over an hour. To get a quick feedback on project health, run only the type inference tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; runTypeInferenceTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a single test / test class with testOnly&lt;/h3&gt; &#xA;&lt;p&gt;Scala Plugin project configuration is different from the standard sbt project. One of the differences is that you don&#39;t need to add the sbt project name before the test name. Just run &lt;code&gt;testOnly &amp;lt;test name&amp;gt;&lt;/code&gt; without the project prefix. &lt;br&gt; For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; testOnly org.jetbrains.plugins.scala.annotator.Scala3HighlightingTestsMix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitHub Actions build&lt;/h3&gt; &#xA;&lt;p&gt;The project is configured to build and run the typeInference tests and fast tests with Github Actions. &lt;br&gt; The full test suite isn&#39;t run to avoid really long build times.&lt;/p&gt; &#xA;&lt;h2&gt;Common problems&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Error &lt;code&gt;object BuildInfo is already defined ...&lt;/code&gt; during compilation of the project&lt;/strong&gt; &lt;br&gt; BuildInfo is an sbt plugin that exposes some of the sbt build metadata to the main project. We use it to forward some dependencies versions from the build sources to main project sources. Sometimes during import this generated source root is added to the &lt;code&gt;bsp&lt;/code&gt; and &lt;code&gt;sbt-impl&lt;/code&gt; modules multiple times. Make sure it&#39;s only included once by removing duplicates. This can be done in &lt;code&gt;File &amp;gt; Project Structure...&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Can&#39;t browse IntelliJ Platform sources&lt;/strong&gt; &lt;br&gt; When loading Scala Plugin project in sbt, the IntelliJ platform is downloaded to &lt;code&gt;&amp;lt;home&amp;gt;/.ScalaPluginIC/sdk/&amp;lt;sdk version&amp;gt;/&lt;/code&gt;. IntelliJ platform sources should be automatically attached after project has been imported and indices have been built. &lt;br&gt; However, sometimes this doesn&#39;t happen and the sources are not attached. As a result you see decompiled code when opening a Platform API class. &lt;br&gt; &lt;strong&gt;Solution:&lt;/strong&gt; &lt;br&gt; Invoke &#34;Attach Intellij Sources&#34; action (you need to enable &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/enabling-internal.html&#34;&gt;internal mode&lt;/a&gt; to access this action&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After building the project you see git local changes in &lt;code&gt;ImportsPanel.java&lt;/code&gt; (or similar files). All &lt;code&gt;IdeBorderFactory.PlainSmallWithIndent&lt;/code&gt; are replaced with &lt;code&gt;BorderFactory&lt;/code&gt; &lt;br&gt; &lt;strong&gt;Solution&lt;/strong&gt;: enable &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/enabling-internal.html&#34;&gt;internal mode&lt;/a&gt;. &lt;br&gt; UI Designer uses different border class in internal mode, see &lt;code&gt;com.intellij.uiDesigner.make.FormSourceCodeGenerator#borderFactoryClassName&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unexpected local git changes in &lt;code&gt;uiDesigner.xml&lt;/code&gt; or other files in .idea directory&lt;/strong&gt; &lt;br&gt; It may happen due to disable &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/enabling-internal.html&#34;&gt;internal mode&lt;/a&gt; or by enabling it after/during setup. &lt;br&gt; The solution to this problem might be to revert these changes, enable &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/enabling-internal.html&#34;&gt;internal mode&lt;/a&gt; (if it has not already been done) and restart IntelliJ.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The Scala plugin is not loaded when running the &lt;code&gt;scalaCommunity&lt;/code&gt; / &lt;code&gt;scalaUltimate&lt;/code&gt; Run Configuration.&lt;/strong&gt;&lt;br&gt; Unfortunately, there can be multiple reasons for this, like an improperly packaged plugin which cannot be loaded by IDEA at runtime. Check the list of project modules in &lt;code&gt;File &amp;gt; Project Structure...&lt;/code&gt; and make sure that they don&#39;t have a name that starts with &lt;code&gt;scala.&amp;lt;module name&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;scala.structure-view&lt;/code&gt;). This is a bug in the sbt import process. If there are modules like this, then remove all modules from the project (in the same Project Structure window) and reimport the project &lt;code&gt;&amp;lt;sbt tab&amp;gt; &amp;gt; Reload All sbt Projects&lt;/code&gt;. &lt;strong&gt;TLDR&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;File | Project Structure&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Select &#34;Modules&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Remove all modules except &lt;code&gt;-build&lt;/code&gt; modules (they have special icon with sbt) and except root modules like (scalaCommunity or scalaUltimate)&lt;/li&gt; &#xA;   &lt;li&gt;Click &#34;Ok&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Remove &lt;code&gt;target&lt;/code&gt; directory in the project root (the one that contains &lt;code&gt;plugin/Scala&lt;/code&gt; directory)&lt;/li&gt; &#xA;   &lt;li&gt;Reload the project structure&lt;/li&gt; &#xA;   &lt;li&gt;It should be fixed now! Run the main run configuration (&lt;code&gt;scalaCommunity&lt;/code&gt; or &lt;code&gt;scalaUltimate&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;h3&gt;Investigation performance issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;YourKit&lt;/li&gt; &#xA; &lt;li&gt;There is a &#34;Scala plugin profiler&#34; tool window to track invocations of methods with &lt;code&gt;@Cached*&lt;/code&gt; or &lt;code&gt;@Measure&lt;/code&gt; annotations (from &lt;code&gt;org.jetbrains.plugins.scala.macroAnnotations&lt;/code&gt; package) in real time. The tool window is available in &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/enabling-internal.html&#34;&gt;internal mode&lt;/a&gt; or if &lt;code&gt;-Dinternal.profiler.tracing=true&lt;/code&gt; is passed to IDEA using &lt;a href=&#34;https://www.jetbrains.com/help/idea/tuning-the-ide.html#procedure-jvm-options&#34;&gt;custom VM options&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Generating test coverage reports&lt;/h3&gt; &#xA;&lt;p&gt;You might want to generate a test coverage report for a given package. It can be done by running for example the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt &#34;project scala-impl;set coverageEnabled := true;project scalaCommunity;testOnly org.jetbrains.plugins.scala.codeInspection.declarationRedundancy.*;scala-impl/coverageReport&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Close to the very tail of the output of this command you will find a line that gives you the location of the generated report, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[info] Written HTML coverage report [/Users/alice/intellij-scala/scala/scala-impl/target/scala-2.13/scoverage-report/index.html]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in order to continue working from IntelliJ IDEA again you need to perform Build &amp;gt; Rebuild Project.&lt;/p&gt; &#xA;&lt;h3&gt;Lexers and parsers&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/intellij-scala/idea252.x/scala/scala-impl/src/org/jetbrains/plugins/scala/lang/README.md&#34;&gt;our dedicated lexer/parser README&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>