<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-17T01:53:16Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kitlangton/neotype</title>
    <updated>2024-03-17T01:53:16Z</updated>
    <id>tag:github.com,2024-03-17:/kitlangton/neotype</id>
    <link href="https://github.com/kitlangton/neotype" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A friendly newtype library for Scala 3&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;neotype&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/io/github/kitlangton/neotype_3/&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/https/oss.sonatype.org/io.github.kitlangton/neotype_3.svg?sanitize=true&#34; alt=&#34;Release Artifacts&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/io/github/kitlangton/neotype_3/&#34; title=&#34;Sonatype Snapshots&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/https/oss.sonatype.org/io.github.kitlangton/neotype_3.svg?sanitize=true&#34; alt=&#34;Snapshot Artifacts&#34; title=&#34;Sonatype Snapshots&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A friendly newtype library for Scala 3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;&#34;io.github.kitlangton&#34; %% &#34;neotype&#34; % &#34;0.2.4&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compile-time Checked Values&lt;/li&gt; &#xA; &lt;li&gt;Write validations as &lt;strong&gt;plain, old Scala expressions&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Helpful compilation errors (&lt;em&gt;see below&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;No runtime allocations (Thanks to &lt;code&gt;inline&lt;/code&gt; and &lt;code&gt;opaque type&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Integrates with other libraries (e.g. &lt;code&gt;zio-json&lt;/code&gt;, &lt;code&gt;circe&lt;/code&gt;, &lt;code&gt;tapir&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=6AxSX_WX7ek&#34;&gt;5 Minute Video Tour&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;a href=&#34;http://www.youtube.com/watch?v=6AxSX_WX7ek&#34; title=&#34;NEOTYPE TOUR&#34;&gt; &lt;img src=&#34;https://img.youtube.com/vi/6AxSX_WX7ek/maxresdefault.jpg&#34; alt=&#34;NEOTYPE VIDEO TOUR&#34; width=&#34;500&#34; height=&#34;300&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here is how to define a compile-time validated Newtype.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import neotype.*&#xA;&#xA;// 1. Define a newtype.&#xA;object NonEmptyString extends Newtype[String]:&#xA;&#xA;  // 2. Optionally, define a validate method.&#xA;  override inline def validate(input: String): Boolean =&#xA;    input.nonEmpty&#xA;&#xA;// 3. Construct values.&#xA;NonEmptyString(&#34;Hello&#34;) // OK&#xA;NonEmptyString(&#34;&#34;)      // Compile Error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attempting to call &lt;code&gt;NonEmptyString(&#34;&#34;)&lt;/code&gt; would result in the following compilation error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Error: /src/main/scala/examples/Main.scala:9:16&#xA;  NonEmptyString(&#34;&#34;)&#xA;  ^^^^^^^^^^^^^^^^^^&#xA;  —— Newtype Error ——————————————————————————————————————————————————————————&#xA;  NonEmptyString was called with an INVALID String.&#xA;  input: &#34;&#34;&#xA;  check: input.nonEmpty&#xA;  ———————————————————————————————————————————————————————————————————————————&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;Neotype integrates with the following libraries.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;zio-test &lt;code&gt;DeriveGen&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;zio-json&lt;/li&gt; &#xA; &lt;li&gt;zio-config&lt;/li&gt; &#xA; &lt;li&gt;zio-schema&lt;/li&gt; &#xA; &lt;li&gt;play-json&lt;/li&gt; &#xA; &lt;li&gt;tapir&lt;/li&gt; &#xA; &lt;li&gt;quill&lt;/li&gt; &#xA; &lt;li&gt;circe&lt;/li&gt; &#xA; &lt;li&gt;jsoniter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ZIO Json Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import neotype.*&#xA;import neotype.ziojson.given&#xA;import zio.json.*&#xA;&#xA;type NonEmptyString = NonEmptyString.Type&#xA;object NonEmptyString extends Newtype[String]:&#xA;  override inline def validate(value: String): Result =&#xA;    if value.nonEmpty then true else &#34;String must not be empty&#34;&#xA;&#xA;case class Person(name: NonEmptyString, age: Int) derives JsonCodec&#xA;&#xA;val parsed = &#34;&#34;&#34;{&#34;name&#34;: &#34;Kit&#34;, &#34;age&#34;: 30}&#34;&#34;&#34;.fromJson[Person]&#xA;// Right(Person(NonEmptyString(&#34;Kit&#34;), 30))&#xA;&#xA;val failed = &#34;&#34;&#34;{&#34;name&#34;: &#34;&#34;, &#34;age&#34;: 30}&#34;&#34;&#34;.fromJson[Person]&#xA;// Left(&#34;.name(String must not be empty)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By importing &lt;code&gt;neotype.ziojson.given&lt;/code&gt;, we automatically generate a &lt;code&gt;JsonCodec&lt;/code&gt; for &lt;code&gt;NonEmptyString&lt;/code&gt;. Custom failure messages are also supported (by overriding &lt;code&gt;def failureMessage&lt;/code&gt; in the Newtype definition).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pocorall/hello-scaloid-maven</title>
    <updated>2024-03-17T01:53:16Z</updated>
    <id>tag:github.com,2024-03-17:/pocorall/hello-scaloid-maven</id>
    <link href="https://github.com/pocorall/hello-scaloid-maven" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A &#34;Hello, world&#34; of Scaloid for maven.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hello Scaloid for maven&lt;/h1&gt; &#xA;&lt;p&gt;This is a template project that can be a starting point of a new &lt;a href=&#34;https://github.com/pocorall/scaloid&#34;&gt;Scaloid&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;This contains minimum code as possible; therefore easy to run, examine and extend.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maven 3.2 or above&lt;/li&gt; &#xA; &lt;li&gt;Android SDK Level 16 or above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Level 16 is required for building, while this app retains runtime compatibility from API Level 10. Please refer to &lt;code&gt;minSdkVersion&lt;/code&gt; property in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;You can build using Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mvn clean package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will compile the project and generate an APK. The generated APK is signed with the Android debug certificate. To generate a zip-aligned APK that is signed with an actual certificate, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mvn clean package -Prelease&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The configuration for which certificate to use is in pom.xml.&lt;/p&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;Deploy to an Android virtual device (AVD) and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mvn android:deploy android:run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using an IDE&lt;/h2&gt; &#xA;&lt;p&gt;You can use Maven to generate project files for Eclipse or IDEA:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mvn eclipse:eclipse&#xA;$ mvn idea:idea&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We do not recommend to use IDE&#39;s own Android build system, because proguard settings are complicated. Use Maven to build and deploy the project.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h4&gt;Error &lt;code&gt;ANDROID-904-002: Found aidl files: Count = 0&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; is incorrect.&lt;/p&gt; &#xA;&lt;h2&gt;Is the build too slow?&lt;/h2&gt; &#xA;&lt;p&gt;This maven project works completely. But long build time would matter, which usually takes more than 40 seconds. We recommend to &lt;a href=&#34;https://github.com/pocorall/hello-scaloid-sbt&#34;&gt;build your project with sbt&lt;/a&gt;, which enables incremental build. This usually takes only several seconds.&lt;/p&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pocorall/scaloid&#34;&gt;Scaloid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pocorall/scaloid-apidemos&#34;&gt;Scaloid APIdemos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simpligility/android-maven-plugin&#34;&gt;Android Maven Plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Origin&lt;/h2&gt; &#xA;&lt;p&gt;This project is forked from &lt;a href=&#34;https://github.com/rohansingh/android-scala-test&#34;&gt;android-scala-test&lt;/a&gt;. Thanks &lt;a href=&#34;https://github.com/rohansingh&#34;&gt;rohansingh&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>randyunger/blankPlayAkkaCouch</title>
    <updated>2024-03-17T01:53:16Z</updated>
    <id>tag:github.com,2024-03-17:/randyunger/blankPlayAkkaCouch</id>
    <link href="https://github.com/randyunger/blankPlayAkkaCouch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A skeleton Play project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;This is your new Play 2.0 application&lt;/h1&gt; &#xA;&lt;p&gt;This file will be packaged with your application, when using &lt;code&gt;play dist&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>