<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-12T01:59:44Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kitlangton/quotidian</title>
    <updated>2023-03-12T01:59:44Z</updated>
    <id>tag:github.com,2023-03-12:/kitlangton/quotidian</id>
    <link href="https://github.com/kitlangton/quotidian" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A menagerie of macro utilities and extensions for Scala 3&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;quotidian&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/io/github/kitlangton/quotidian_3/&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/https/oss.sonatype.org/io.github.kitlangton/quotidian_3.svg?sanitize=true&#34; alt=&#34;Release Artifacts&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/io/github/kitlangton/quotidian_3/&#34; title=&#34;Sonatype Snapshots&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/https/oss.sonatype.org/io.github.kitlangton/quotidian_3.svg?sanitize=true&#34; alt=&#34;Snapshot Artifacts&#34; title=&#34;Sonatype Snapshots&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A menagerie of macro utilities and extensions for Scala 3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;&#34;io.github.kitlangton&#34; %% &#34;quotidian&#34; % &#34;0.0.6&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Currently, this library supports &lt;code&gt;FromExpr&lt;/code&gt; and &lt;code&gt;ToExpr&lt;/code&gt; derivation. It also contains an opinionated set of extensions and extractors for working with &lt;code&gt;scala.quoted&lt;/code&gt;; these are brought into scope with &lt;code&gt;import quotidian.syntax.*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add &lt;code&gt;FromExpr&lt;/code&gt; derivation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add &lt;code&gt;ToExpr&lt;/code&gt; derivation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support Parameterized Types&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add support for leaving out default values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Derive &lt;code&gt;FromExpr&lt;/code&gt; Instances&lt;/h2&gt; &#xA;&lt;p&gt;Writing &lt;code&gt;FromExpr&lt;/code&gt; instances is a boilerplate-heavy task. Wouldn&#39;t it be better if it were &lt;em&gt;derivable&lt;/em&gt;?&lt;/p&gt; &#xA;&lt;h3&gt;Before&lt;/h3&gt; &#xA;&lt;p&gt;How boring! How trite! üò≠&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import quotidian.*&#xA;import scala.quoted.*&#xA;&#xA;final case class Person(name: String, age: Int, pet: Pet)&#xA;&#xA;object Person:&#xA;  given FromExpr[Person] with&#xA;    def unapply(expr: Expr[Person])(using Quotes): Option[Person] =&#xA;      import quotes.reflect.*&#xA;      expr match&#xA;        case &#39;{ Person(${ Expr(name) }, ${ Expr(age) }, ${ Expr(pet) }) } =&amp;gt;&#xA;          Some(Person(name, age, pet))&#xA;        case _ =&amp;gt; None&#xA;&#xA;  given ToExpr[Person] with&#xA;    def apply(person: Person)(using Quotes): Expr[Person] =&#xA;      import quotes.reflect.*&#xA;      &#39;{ Person(${ Expr(person.name) }, ${ Expr(person.age) }, ${ Expr(person.pet) }) }&#xA;&#xA;final case class Pet(name: String, hasBone: Boolean, favoritePerson: Option[Person])&#xA;&#xA;object Pet:&#xA;  given FromExpr[Pet] with&#xA;    def unapply(expr: Expr[Pet])(using Quotes): Option[Pet] =&#xA;      import quotes.reflect.*&#xA;      expr match&#xA;        case &#39;{ Pet(${ Expr(name) }, ${ Expr(hasBone) }, ${ Expr(favoritePerson) }) } =&amp;gt;&#xA;          Some(Pet(name, hasBone, favoritePerson))&#xA;        case _ =&amp;gt; None&#xA;&#xA;  given ToExpr[Pet] with&#xA;    def apply(pet: Pet)(using Quotes): Expr[Pet] =&#xA;      import quotes.reflect.*&#xA;      &#39;{ Pet(${ Expr(pet.name) }, ${ Expr(pet.hasBone) }, ${ Expr(pet.favoritePerson) }) }&#xA;&#xA;&#xA;enum Fruit:&#xA;  case Apple(variety: String)&#xA;  case Orange(juiciness: Int)&#xA;  case Banana(isYellow: Boolean)&#xA;&#xA;object Fruit:&#xA;  given FromExpr[Fruit] with&#xA;    def unapply(expr: Expr[Fruit])(using Quotes): Option[Fruit] =&#xA;      import quotes.reflect.*&#xA;      expr match&#xA;        case &#39;{ Fruit.Apple(${ Expr(variety) }) }    =&amp;gt; Some(Fruit.Apple(variety))&#xA;        case &#39;{ Fruit.Orange(${ Expr(juiciness) }) } =&amp;gt; Some(Fruit.Orange(juiciness))&#xA;        case &#39;{ Fruit.Banana(${ Expr(isYellow) }) }  =&amp;gt; Some(Fruit.Banana(isYellow))&#xA;        case _ =&amp;gt; None&#xA;&#xA;  given ToExpr[Fruit] with&#xA;    def apply(fruit: Fruit)(using Quotes): Expr[Fruit] =&#xA;      import quotes.reflect.*&#xA;      fruit match&#xA;        case Fruit.Apple(variety)    =&amp;gt; &#39;{ Fruit.Apple(${ Expr(variety) }) }&#xA;        case Fruit.Orange(juiciness) =&amp;gt; &#39;{ Fruit.Orange(${ Expr(juiciness) }) }&#xA;        case Fruit.Banana(isYellow)  =&amp;gt; &#39;{ Fruit.Banana(${ Expr(isYellow) }) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;After&lt;/h3&gt; &#xA;&lt;p&gt;Much better! Much more concise! üòç&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import quotidian.*&#xA;import scala.quoted.*&#xA;&#xA;case class Person(name: String, age: Int, pet: Pet) derives FromExpr, ToExpr&#xA;case class Pet(name: String, hasBone: Boolean, favoritePerson: Option[Person]) derives FromExpr, ToExpr&#xA;&#xA;enum Fruit derives FromExpr, ToExpr:&#xA;  case Apple(variety: String)&#xA;  case Orange(juiciness: Int)&#xA;  case Banana(isYellow: Boolean)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>connollyst/little</title>
    <updated>2023-03-12T01:59:44Z</updated>
    <id>tag:github.com,2023-03-12:/connollyst/little</id>
    <link href="https://github.com/connollyst/little" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://travis-ci.org/connollyst/little.svg?branch=master&#34; alt=&#34;Travis CI Project Build Status&#34; title=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Short Term To Do&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add primitives to toolkit&lt;/li&gt; &#xA; &lt;li&gt;compile programs to expressions&lt;/li&gt; &#xA; &lt;li&gt;add button to run game (?)&lt;/li&gt; &#xA; &lt;li&gt;add support for other events&lt;/li&gt; &#xA; &lt;li&gt;add support for multiple guys&lt;/li&gt; &#xA; &lt;li&gt;add support for obstacles&lt;/li&gt; &#xA; &lt;li&gt;add speech bubbles&lt;/li&gt; &#xA; &lt;li&gt;add food&lt;/li&gt; &#xA; &lt;li&gt;save and load programs&lt;/li&gt; &#xA; &lt;li&gt;add better IDE controls&lt;/li&gt; &#xA; &lt;li&gt;add better memory handling (types, limit, visualization, etc.)&lt;/li&gt; &#xA; &lt;li&gt;code should be time controlled (eg: one Expression per frame)&lt;/li&gt; &#xA; &lt;li&gt;add camera scrolling, tracking, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version 1 (done)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OnSpawn - Move forward&lt;/li&gt; &#xA; &lt;li&gt;OnContact - Turn Randomly&lt;/li&gt; &#xA; &lt;li&gt;OnCloseToFood - Go Toward Food&lt;/li&gt; &#xA; &lt;li&gt;OnGotFood - Stop&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version 2 (done)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backed by GUI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version 3 (done)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Other objects.. can bounce off anything&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version 4 (done)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remove Walls.&lt;/li&gt; &#xA; &lt;li&gt;Scrolling - limited distance from dude&lt;/li&gt; &#xA; &lt;li&gt;Large World - not procedural ATM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;game always running&lt;/li&gt; &#xA; &lt;li&gt;push changes to game on &#39;Run&#39;&lt;/li&gt; &#xA; &lt;li&gt;game follows guy&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cequence-io/openai-scala-client</title>
    <updated>2023-03-12T01:59:44Z</updated>
    <id>tag:github.com,2023-03-12:/cequence-io/openai-scala-client</id>
    <link href="https://github.com/cequence-io/openai-scala-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala client for OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI Scala Client ü§ñ &lt;a href=&#34;https://cequence.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-0.3.0-green.svg?sanitize=true&#34; alt=&#34;version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-lightgrey.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is a no-nonsense async Scala client for OpenAI API supporting all the available endpoints and params &lt;strong&gt;including streaming&lt;/strong&gt;, the newest &lt;strong&gt;ChatGPT completion&lt;/strong&gt;, and &lt;strong&gt;voice routines&lt;/strong&gt; (as defined &lt;a href=&#34;https://beta.openai.com/docs/api-reference&#34;&gt;here&lt;/a&gt;), provided in a single, convenient service called &lt;a href=&#34;https://raw.githubusercontent.com/cequence-io/openai-scala-client/master/openai-core/src/main/scala/io/cequence/openaiscala/service/OpenAIService.scala&#34;&gt;OpenAIService&lt;/a&gt;. The supported calls are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Models&lt;/strong&gt;: &lt;a href=&#34;https://platform.openai.com/docs/api-reference/models/list&#34;&gt;listModels&lt;/a&gt;, and &lt;a href=&#34;https://platform.openai.com/docs/api-reference/models/retrieve&#34;&gt;retrieveModel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Completions&lt;/strong&gt;: &lt;a href=&#34;https://platform.openai.com/docs/api-reference/completions/create&#34;&gt;createCompletion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chat Completions&lt;/strong&gt;: &lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat/create&#34;&gt;createChatCompletion&lt;/a&gt; - &lt;strong&gt;new&lt;/strong&gt;üî•&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Edits&lt;/strong&gt;: &lt;a href=&#34;https://platform.openai.com/docs/api-reference/edits/create&#34;&gt;createEdit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Images&lt;/strong&gt;: &lt;a href=&#34;https://platform.openai.com/docs/api-reference/images/create&#34;&gt;createImage&lt;/a&gt;, &lt;a href=&#34;https://platform.openai.com/docs/api-reference/images/create-edit&#34;&gt;createImageEdit&lt;/a&gt;, and &lt;a href=&#34;https://platform.openai.com/docs/api-reference/images/create-variation&#34;&gt;createImageVariation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Embeddings&lt;/strong&gt;: &lt;a href=&#34;https://platform.openai.com/docs/api-reference/embeddings/create&#34;&gt;createEmbeddings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Audio&lt;/strong&gt;: &lt;a href=&#34;https://platform.openai.com/docs/api-reference/audio/create&#34;&gt;createAudioTranscription&lt;/a&gt; - &lt;strong&gt;new&lt;/strong&gt;üî•, &lt;a href=&#34;https://platform.openai.com/docs/api-reference/audio/create&#34;&gt;createAudioTranslation&lt;/a&gt; - &lt;strong&gt;new&lt;/strong&gt;üî•&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Files&lt;/strong&gt;: &lt;a href=&#34;https://platform.openai.com/docs/api-reference/files/list&#34;&gt;listFiles&lt;/a&gt;, &lt;a href=&#34;https://platform.openai.com/docs/api-reference/files/upload&#34;&gt;uploadFile&lt;/a&gt;, &lt;a href=&#34;https://platform.openai.com/docs/api-reference/files/delete&#34;&gt;deleteFile&lt;/a&gt;, &lt;a href=&#34;https://platform.openai.com/docs/api-reference/files/retrieve&#34;&gt;retrieveFile&lt;/a&gt;, and &lt;a href=&#34;https://platform.openai.com/docs/api-reference/files/retrieve-content&#34;&gt;retrieveFileContent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fine-tunes&lt;/strong&gt;: &lt;a href=&#34;https://platform.openai.com/docs/api-reference/fine-tunes/create&#34;&gt;createFineTune&lt;/a&gt;, &lt;a href=&#34;https://platform.openai.com/docs/api-reference/fine-tunes/list&#34;&gt;listFineTunes&lt;/a&gt;, &lt;a href=&#34;https://platform.openai.com/docs/api-reference/fine-tunes/retrieve&#34;&gt;retrieveFineTune&lt;/a&gt;, &lt;a href=&#34;https://platform.openai.com/docs/api-reference/fine-tunes/cancel&#34;&gt;cancelFineTune&lt;/a&gt;, &lt;a href=&#34;https://platform.openai.com/docs/api-reference/fine-tunes/events&#34;&gt;listFineTuneEvents&lt;/a&gt;, and &lt;a href=&#34;https://platform.openai.com/docs/api-reference/fine-tunes/delete-model&#34;&gt;deleteFineTuneModel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Moderations&lt;/strong&gt;: &lt;a href=&#34;https://platform.openai.com/docs/api-reference/moderations/create&#34;&gt;createModeration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that in order to be consistent with the OpenAI API naming, the service function names match exactly the API endpoint titles/descriptions with camelcase. Also, we aimed the lib to be self-contained with the fewest dependencies possible therefore we ended up using only two libs &lt;code&gt;play-ahc-ws-standalone&lt;/code&gt; and &lt;code&gt;play-ws-standalone-json&lt;/code&gt; (at the top level). Additionally, if dependency injection is required we use &lt;code&gt;scala-guice&lt;/code&gt; lib as well.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚úîÔ∏è Important&lt;/strong&gt;: this is a &#34;community-maintained&#34; library and, as such, has no relation to OpenAI company.&lt;/p&gt; &#xA;&lt;p&gt;üëâ Check out an article about the lib/client on &lt;a href=&#34;https://medium.com/@0xbnd/openai-scala-client-is-out-d7577de934ad&#34;&gt;Medium&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation üöÄ&lt;/h2&gt; &#xA;&lt;p&gt;The currently supported Scala versions are &lt;strong&gt;2.12, 2.13&lt;/strong&gt;, and &lt;strong&gt;3&lt;/strong&gt;. Note that an optional module &lt;code&gt;openai-scala-guice&lt;/code&gt; is available only for Scala 2.12 and 2.13.&lt;/p&gt; &#xA;&lt;p&gt;To pull the library you have to add the following dependency to your &lt;em&gt;build.sbt&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;io.cequence&#34; %% &#34;openai-scala-client&#34; % &#34;0.3.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to &lt;em&gt;pom.xml&lt;/em&gt; (if you use maven)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;io.cequence&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;openai-scala-client_2.12&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.3.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a streaming support use &lt;code&gt;&#34;io.cequence&#34; %% &#34;openai-scala-client-stream&#34; % &#34;0.3.0&#34;&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;Config ‚öôÔ∏è&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Env. variables: &lt;code&gt;OPENAI_SCALA_CLIENT_API_KEY&lt;/code&gt; and optionally also &lt;code&gt;OPENAI_SCALA_CLIENT_ORG_ID&lt;/code&gt; (if you have one)&lt;/li&gt; &#xA; &lt;li&gt;File config (default): &lt;a href=&#34;https://raw.githubusercontent.com/cequence-io/openai-scala-client/master/openai-client/src/main/resources/openai-scala-client.conf&#34;&gt;openai-scala-client.conf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage üë®‚Äçüéì&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;I. Obtaining OpenAIService&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;First you need to provide an implicit execution context as well as akka materializer, e.g., as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  implicit val ec = ExecutionContext.global&#xA;  implicit val materializer = Materializer(ActorSystem())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can obtain a service in one of the following ways.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default config (expects env. variable(s) to be set as defined in &lt;code&gt;Config&lt;/code&gt; section)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  val service = OpenAIServiceFactory()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  val config = ConfigFactory.load(&#34;path_to_my_custom_config&#34;)&#xA;  val service = OpenAIServiceFactory(config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Without config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  val service = OpenAIServiceFactory(&#xA;     apiKey = &#34;your_api_key&#34;,&#xA;     orgId = Some(&#34;your_org_id&#34;) // if you have one&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚úîÔ∏è Important&lt;/strong&gt;: If you want streaming support use &lt;code&gt;OpenAIServiceStreamedFactory&lt;/code&gt; from &lt;code&gt;openai-scala-client-stream&lt;/code&gt; lib instead of &lt;code&gt;OpenAIServiceFactory&lt;/code&gt; (in the three examples above). Two additional functions - &lt;code&gt;createCompletionStreamed&lt;/code&gt; and &lt;code&gt;listFineTuneEventsStreamed&lt;/code&gt; provided by &lt;a href=&#34;https://raw.githubusercontent.com/cequence-io/openai-scala-client/master/openai-client-stream/src/main/scala/io/cequence/openaiscala/service/OpenAIServiceStreamedExtra.scala&#34;&gt;OpenAIServiceStreamedExtra&lt;/a&gt; will be then available.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Via dependency injection (requires &lt;code&gt;openai-scala-guice&lt;/code&gt; lib)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  class MyClass @Inject() (openAIService: OpenAIService) {...}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;II. Calling functions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Full documentation of each call with its respective inputs and settings is provided in &lt;a href=&#34;https://raw.githubusercontent.com/cequence-io/openai-scala-client/master/openai-core/src/main/scala/io/cequence/openaiscala/service/OpenAIService.scala&#34;&gt;OpenAIService&lt;/a&gt;. Since all the calls are async they return responses wrapped in &lt;code&gt;Future&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;List models&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  service.listModels.map(models =&amp;gt;&#xA;    models.foreach(println)&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retrieve model&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  service.retrieveModel(ModelId.text_davinci_003).map(model =&amp;gt;&#xA;    println(model.getOrElse(&#34;N/A&#34;))&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create completion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  val text = &#34;&#34;&#34;Extract the name and mailing address from this email:&#xA;               |Dear Kelly,&#xA;               |It was great to talk to you at the seminar. I thought Jane&#39;s talk was quite good.&#xA;               |Thank you for the book. Here&#39;s my address 2111 Ash Lane, Crestview CA 92002&#xA;               |Best,&#xA;               |Maya&#xA;             &#34;&#34;&#34;.stripMargin&#xA;&#xA;  service.createCompletion(text).map(completion =&amp;gt;&#xA;    println(completion.choices.head.text)&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create completion with a custom setting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  val text = &#34;&#34;&#34;Extract the name and mailing address from this email:&#xA;               |Dear Kelly,&#xA;               |It was great to talk to you at the seminar. I thought Jane&#39;s talk was quite good.&#xA;               |Thank you for the book. Here&#39;s my address 2111 Ash Lane, Crestview CA 92002&#xA;               |Best,&#xA;               |Maya&#xA;             &#34;&#34;&#34;.stripMargin&#xA;&#xA;  service.createCompletion(&#xA;    text,&#xA;    settings = CreateCompletionSettings(&#xA;      model = ModelId.text_davinci_001,&#xA;      max_tokens = Some(1500),&#xA;      temperature = Some(0.9),&#xA;      presence_penalty = Some(0.2),&#xA;      frequency_penalty = Some(0.2)&#xA;    )&#xA;  ).map(completion =&amp;gt;&#xA;    println(completion.choices.head.text)&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create completion with streaming and a custom setting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  val source = service.createCompletionStreamed(&#xA;    prompt = &#34;Write me a Shakespeare poem about two cats playing baseball in Russia using at least 2 pages&#34;,&#xA;    settings = CreateCompletionSettings(&#xA;      model = ModelId.text_davinci_003,&#xA;      max_tokens = Some(1500),&#xA;      temperature = Some(0.9),&#xA;      presence_penalty = Some(0.2),&#xA;      frequency_penalty = Some(0.2)&#xA;    )&#xA;  )&#xA;&#xA;  source.map(completion =&amp;gt; &#xA;    println(completion.choices.head.text)&#xA;  ).runWith(Sink.ignore)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(For this to work you need to use &lt;code&gt;OpenAIServiceStreamedFactory&lt;/code&gt; from &lt;code&gt;openai-scala-client-stream&lt;/code&gt; lib)&lt;/p&gt; &#xA;&lt;h2&gt;FAQ ü§î&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Wen Scala 3?&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;del&gt;Feb 2023. You are right; we chose the shortest month to do so :)&lt;/del&gt; &lt;strong&gt;Done!&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;I got a timeout exception. How can I change the timeout setting?&lt;/em&gt;&lt;/p&gt; &lt;p&gt;You can do it either by passing the &lt;code&gt;timeouts&lt;/code&gt; param to &lt;code&gt;OpenAIServiceFactory&lt;/code&gt; or, if you use your own configuration file, then you can simply add it there as:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;openai-scala-client {&#xA;    timeouts {&#xA;        requestTimeoutSec = 200&#xA;        readTimeoutSec = 200&#xA;        connectTimeoutSec = 5&#xA;        pooledConnectionIdleTimeoutSec = 60&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;I got an exception like &lt;code&gt;com.typesafe.config.ConfigException$UnresolvedSubstitution: openai-scala-client.conf @ jar:file:.../io/cequence/openai-scala-client_2.13/0.0.1/openai-scala-client_2.13-0.0.1.jar!/openai-scala-client.conf: 4: Could not resolve substitution to a value: ${OPENAI_SCALA_CLIENT_API_KEY}&lt;/code&gt;. What should I do?&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Set the env. variable &lt;code&gt;OPENAI_SCALA_CLIENT_API_KEY&lt;/code&gt;. If you don&#39;t have one register &lt;a href=&#34;https://beta.openai.com/signup&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;It all looks cool. I want to chat with you about your research and development?&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Just shoot us an email at &lt;a href=&#34;mailto:openai-scala-client@cequence.io?subject=Research%20andDevelopment&#34;&gt;openai-scala-client@cequence.io&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License ‚öñÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;This library is available and published as open source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors üôè&lt;/h2&gt; &#xA;&lt;p&gt;This project is open-source and welcomes any contribution or feedback (&lt;a href=&#34;https://github.com/cequence-io/openai-scala-client/issues&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Development of this library has been supported by &lt;a href=&#34;https://cequence.io&#34;&gt;&lt;img src=&#34;https://cequence.io/favicon-16x16.png&#34;&gt; - Cequence.io&lt;/a&gt; - &lt;code&gt;The future of contracting&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Created and maintained by &lt;a href=&#34;https://peterbanda.net&#34;&gt;Peter Banda&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>