<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-07T02:03:45Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scalapb/ScalaPB</title>
    <updated>2024-04-07T02:03:45Z</updated>
    <id>tag:github.com,2024-04-07:/scalapb/ScalaPB</id>
    <link href="https://github.com/scalapb/ScalaPB" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Protocol buffer compiler for Scala.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ScalaPB&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://index.scala-lang.org/scalapb/scalapb/scalapb-runtime&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/scalapb/scalapb/scalapb-runtime/latest-by-scala-version.svg?platform=jvm&#34; alt=&#34;ScalaPB runtime version support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/ScalaPB/community&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/ScalaPB/community.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/ScalaPB/community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/scalapb/ScalaPB/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/scalapb/ScalaPB/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ScalaPB is a protocol buffer compiler (&lt;code&gt;protoc&lt;/code&gt;) plugin for Scala. It will generate Scala case classes, parsers and serializers for your protocol buffers.&lt;/p&gt; &#xA;&lt;p&gt;ScalaPB generates case classes that can co-exist in the same project alongside the Java-generated code for ProtocolBuffer. This makes it easy to gradually migrate an existing project from the Java version of protocol buffers to Scala. This is achieved by having the ScalaPB generated code use the proto file as part of the package name (in contrast to Java which uses the file name in CamelCase as an outer class)&lt;/p&gt; &#xA;&lt;p&gt;Each top-level message and enum is written to a separate Scala file. This results in a significant improvement in incremental compilations.&lt;/p&gt; &#xA;&lt;p&gt;Another cool feature of ScalaPB is that it can optionally generate methods that convert a Java protocol buffer to a Scala protocol buffer and vice versa. This is useful if you are gradually migrating a large code base from Java protocol buffers to Scala. The optional Java conversion is required if you want to use &lt;code&gt;fromAscii&lt;/code&gt; (parsing ASCII representation of a protocol buffer). The current implementation delegates to the Java version.&lt;/p&gt; &#xA;&lt;h1&gt;Highlights&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Supports proto2 and proto3&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easily update nested structure in functional way using lenses&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Scala.js integration&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GRPC integration&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compatible with SparkSQL (through a helper library)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Conversion to and from JSON&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support user-defined options (since 0.5.29)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support extensions (since 0.6.0)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Versions&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.6.x&lt;/td&gt; &#xA;   &lt;td&gt;Stable. Supports Protobuf 2.6.x to 3.5.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.5.x&lt;/td&gt; &#xA;   &lt;td&gt;Supports Protobuf 2.6.x and Protobuf 3.1.x.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.4.x&lt;/td&gt; &#xA;   &lt;td&gt;Stable, unsupported. Works with Protobuf 2.6.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;p&gt;To automatically generate Scala case classes for your messages add ScalaPB&#39;s sbt plugin to your project. Create a file named &lt;code&gt;project/protoc.sbt&lt;/code&gt; containing the following line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;addSbtPlugin(&#34;com.thesamet&#34; % &#34;sbt-protoc&#34; % &#34;1.0.6&#34;)&#xA;&#xA;libraryDependencies += &#34;com.thesamet.scalapb&#34; %% &#34;compilerplugin&#34; % &#34;0.11.3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following line to your &lt;code&gt;build.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Compile / PB.targets := Seq(&#xA;  scalapb.gen() -&amp;gt; (Compile / sourceManaged).value / &#34;scalapb&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional configuration options, see &lt;a href=&#34;https://scalapb.github.io/docs/sbt-settings&#34;&gt;ScalaPB SBT Settings&lt;/a&gt; documentation&lt;/p&gt; &#xA;&lt;h1&gt;Using ScalaPB&lt;/h1&gt; &#xA;&lt;p&gt;Documentation is available at &lt;a href=&#34;https://scalapb.github.io/&#34;&gt;ScalaPB website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Questions?&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://scalapb.github.io/docs/contact&#34;&gt;contacting us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;ScalaPB uses ScalaCheck to aggressively test the generated code. The test generates many different sets of proto files. The sets are growing in complexity: number of files, references to messages from other protos, message nesting and so on. Then, test data is generated to populate this protocol schema, then we check that the ScalaPB generated code behaves exactly like the reference implementation in Java.&lt;/p&gt; &#xA;&lt;p&gt;Running the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sbt test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tests take a few minutes to run. There is a smaller test suite called &lt;code&gt;e2e&lt;/code&gt; that uses the sbt plugin to compile the protos and runs a series of ScalaChecks on the outputs. To run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./e2e.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Sponsors&lt;/h1&gt; &#xA;&lt;p&gt;We are very thankful to our sponsors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PentechLtd&#34;&gt;Pentech Ltd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://moia.io&#34;&gt;MOIA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bikaras&#34;&gt;Evgeny Rubtsov (bikaras)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dejvid&#34;&gt;@dejvid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andrew-selvia&#34;&gt;Andrew Selvia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lavrov&#34;&gt;Vitaly Lavrov&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>marcus-downing/rapture-html</title>
    <updated>2024-04-07T02:03:45Z</updated>
    <id>tag:github.com,2024-04-07:/marcus-downing/rapture-html</id>
    <link href="https://github.com/marcus-downing/rapture-html" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rapture HTML library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rapture-html&lt;/h1&gt; &#xA;&lt;p&gt;Rapture HTML library&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>scalagwt/scalagwt-jribble</title>
    <updated>2024-04-07T02:03:45Z</updated>
    <id>tag:github.com,2024-04-07:/scalagwt/scalagwt-jribble</id>
    <link href="https://github.com/scalagwt/scalagwt-jribble" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jribble library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This project defines jribble AST, syntax and provides jribble parsers and printers.&lt;/p&gt; &#xA;&lt;p&gt;In order to build, you need to have simple build tool (sbt) installed. Installation is easy as executing following commands (on Linux):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget http://simple-build-tool.googlecode.com/files/sbt-launch-0.7.4.jar -O ~/bin/sbt-launch-0.7.4.jar&#xA;echo &#39;java -Xmx512M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256m -jar `dirname $0`/sbt-launch-0.7.4.jar &#34;$@&#34;&#39; &amp;gt; ~/bin/sbt&#xA;chmod u+x ~/bin/sbt&#xA;echo &#39;export PATH=$PATH:~/bin&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;source ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or on Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget http://simple-build-tool.googlecode.com/files/sbt-launch-0.7.4.jar -O ~/bin/sbt-launch-0.7.4.jar&#xA;echo &#39;java -Xmx512M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256m -jar `dirname $0`/sbt-launch-0.7.4.jar &#34;$@&#34;&#39; &amp;gt; ~/bin/sbt&#xA;chmod u+x ~/bin/sbt&#xA;echo &#39;export PATH=$PATH:~/bin&#39; &amp;gt;&amp;gt; ~/.bash_profile&#xA;source ~/.bash_profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then type &#39;sbt&#39; and you should see sbt&#39;s console. Useful commands are &#39;compile&#39; and &#39;test&#39;.&lt;/p&gt; &#xA;&lt;p&gt;For more information consult sbt&#39;s homepage: &lt;a href=&#34;http://code.google.com/p/simple-build-tool/&#34;&gt;http://code.google.com/p/simple-build-tool/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>