<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-19T02:20:56Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>delta-io/delta</title>
    <updated>2022-06-19T02:20:56Z</updated>
    <id>tag:github.com,2022-06-19:/delta-io/delta</id>
    <link href="https://github.com/delta-io/delta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source storage framework that enables building a Lakehouse architecture with compute engines including Spark, PrestoDB, Flink, Trino, and Hive and APIs for Scala, Java, Rust, Ruby, and Python.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://docs.delta.io/latest/_static/delta-lake-white.png&#34; width=&#34;200&#34; alt=&#34;Delta Lake Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/delta-io/delta/actions/workflows/test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/delta-io/delta/actions/workflows/test.yaml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/delta-io/delta/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/delta-spark/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/delta-spark.svg?sanitize=true&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Delta Lake is an open-source storage framework that enables building a &lt;a href=&#34;http://cidrdb.org/cidr2021/papers/cidr2021_paper17.pdf&#34;&gt;Lakehouse architecture&lt;/a&gt; with compute engines including Spark, PrestoDB, Flink, Trino, and Hive and APIs for Scala, Java, Rust, Ruby, and Python.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://docs.delta.io&#34;&gt;Delta Lake Documentation&lt;/a&gt; for details.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://docs.delta.io/latest/quick-start.html&#34;&gt;Quick Start Guide&lt;/a&gt; to get started with Scala, Java and Python.&lt;/li&gt; &#xA; &lt;li&gt;Note, this repo is one of many Delta Lake repositories in the &lt;a href=&#34;https://github.com/delta-io&#34;&gt;delta.io&lt;/a&gt; organizations including &lt;a href=&#34;https://github.com/delta-io/connectors&#34;&gt;connectors&lt;/a&gt;, &lt;a href=&#34;https://github.com/delta-io/delta&#34;&gt;delta&lt;/a&gt;, &lt;a href=&#34;https://github.com/delta-io/delta-rs&#34;&gt;delta-rs&lt;/a&gt;, &lt;a href=&#34;https://github.com/delta-io/delta-sharing&#34;&gt;delta-sharing&lt;/a&gt;, &lt;a href=&#34;https://github.com/delta-io/kafka-delta-ingest&#34;&gt;kafka-delta-ingest&lt;/a&gt;, and &lt;a href=&#34;https://github.com/delta-io/website&#34;&gt;website&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following are some of the more popular Delta Lake integrations, refer to &lt;a href=&#34;https://delta.io/integrations/&#34;&gt;delta.io/integrations&lt;/a&gt; for the complete list:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.delta.io/&#34;&gt;Apache Spark™&lt;/a&gt;: This connector allows Apache Spark™ to read from and write to Delta Lake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/delta-io/connectors/tree/master/flink&#34;&gt;Apache Flink (Preview)&lt;/a&gt;: This connector allows Apache Flink to write to Delta Lake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://prestodb.io/docs/current/connector/deltalake.html&#34;&gt;PrestoDB&lt;/a&gt;: This connector allows PrestoDB to read from Delta Lake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trino.io/docs/current/connector/delta-lake.html&#34;&gt;Trino&lt;/a&gt;: This connector allows Trino to read from and write to Delta Lake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.delta.io/latest/delta-standalone.html&#34;&gt;Delta Standalone&lt;/a&gt;: This library allows Scala and Java-based projects (including Apache Flink, Apache Hive, Apache Beam, and PrestoDB) to read from and write to Delta Lake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.delta.io/latest/hive-integration.html&#34;&gt;Apache Hive&lt;/a&gt;: This connector allows Apache Hive to read from Delta Lake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/deltalake/latest/deltalake/&#34;&gt;Delta Rust API&lt;/a&gt;: This library allows Rust (with Python and Ruby bindings) low level access to Delta tables and is intended to be used with data processing frameworks like datafusion, ballista, rust-dataframe, vega, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;em&gt;Table of Contents&lt;/em&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#latest-binaries&#34;&gt;Latest binaries&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#api-documentation&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#compatibility&#34;&gt;Compatibility&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#api-compatibility&#34;&gt;API Compatibility&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#data-storage-compatibility&#34;&gt;Data Storage Compatibility&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#transaction-protocol&#34;&gt;Transaction Protocol&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#requirements-for-underlying-storage-systems&#34;&gt;Requirements for Underlying Storage Systems&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#concurrency-control&#34;&gt;Concurrency Control&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#reporting-issues&#34;&gt;Reporting issues&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Latest Binaries&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.delta.io/latest/&#34;&gt;online documentation&lt;/a&gt; for the latest release.&lt;/p&gt; &#xA;&lt;h2&gt;API Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.delta.io/latest/delta-apidoc.html&#34;&gt;Scala API docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.delta.io/latest/api/java/index.html&#34;&gt;Java API docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.delta.io/latest/api/python/index.html&#34;&gt;Python API docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.delta.io/latest/delta-standalone.html&#34;&gt;Delta Standalone&lt;/a&gt; library is a single-node Java library that can be used to read from and write to Delta tables. Specifically, this library provides APIs to interact with a table’s metadata in the transaction log, implementing the Delta Transaction Log Protocol to achieve the transactional guarantees of the Delta Lake format.&lt;/p&gt; &#xA;&lt;h3&gt;API Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;There are two types of APIs provided by the Delta Lake project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Direct Java/Scala/Python APIs - The classes and methods documented in the &lt;a href=&#34;https://docs.delta.io/latest/delta-apidoc.html&#34;&gt;API docs&lt;/a&gt; are considered as stable public APIs. All other classes, interfaces, methods that may be directly accessible in code are considered internal, and they are subject to change across releases.&lt;/li&gt; &#xA; &lt;li&gt;Spark-based APIs - You can read Delta tables through the &lt;code&gt;DataFrameReader&lt;/code&gt;/&lt;code&gt;Writer&lt;/code&gt; (i.e. &lt;code&gt;spark.read&lt;/code&gt;, &lt;code&gt;df.write&lt;/code&gt;, &lt;code&gt;spark.readStream&lt;/code&gt; and &lt;code&gt;df.writeStream&lt;/code&gt;). Options to these APIs will remain stable within a major release of Delta Lake (e.g., 1.x.x).&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://docs.delta.io/latest/releases.html&#34;&gt;online documentation&lt;/a&gt; for the releases and their compatibility with Apache Spark versions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Data Storage Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Delta Lake guarantees backward compatibility for all Delta Lake tables (i.e., newer versions of Delta Lake will always be able to read tables written by older versions of Delta Lake). However, we reserve the right to break forward compatibility as new features are introduced to the transaction protocol (i.e., an older version of Delta Lake may not be able to read a table produced by a newer version).&lt;/p&gt; &#xA;&lt;p&gt;Breaking changes in the protocol are indicated by incrementing the minimum reader/writer version in the &lt;code&gt;Protocol&lt;/code&gt; &lt;a href=&#34;https://github.com/delta-io/delta/raw/master/core/src/test/scala/org/apache/spark/sql/delta/ActionSerializerSuite.scala&#34;&gt;action&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For the high-level Delta Lake roadmap, see &lt;a href=&#34;http://delta.io/roadmap&#34;&gt;Delta Lake 2022H1 roadmap&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For the detailed timeline, see the &lt;a href=&#34;https://github.com/delta-io/delta/milestones&#34;&gt;project roadmap&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Transaction Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/PROTOCOL.md&#34;&gt;Delta Transaction Log Protocol&lt;/a&gt; document provides a specification of the transaction protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements for Underlying Storage Systems&lt;/h2&gt; &#xA;&lt;p&gt;Delta Lake ACID guarantees are predicated on the atomicity and durability guarantees of the storage system. Specifically, we require the storage system to provide the following.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Atomic visibility&lt;/strong&gt;: There must be a way for a file to be visible in its entirety or not visible at all.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mutual exclusion&lt;/strong&gt;: Only one writer must be able to create (or rename) a file at the final destination.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Consistent listing&lt;/strong&gt;: Once a file has been written in a directory, all future listings for that directory must return that file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.delta.io/latest/delta-storage.html&#34;&gt;online documentation on Storage Configuration&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Concurrency Control&lt;/h2&gt; &#xA;&lt;p&gt;Delta Lake ensures &lt;em&gt;serializability&lt;/em&gt; for concurrent reads and writes. Please see &lt;a href=&#34;https://docs.delta.io/latest/delta-concurrency.html&#34;&gt;Delta Lake Concurrency Control&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting issues&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/delta-io/delta/issues&#34;&gt;GitHub Issues&lt;/a&gt; to track community reported issues. You can also &lt;a href=&#34;https://raw.githubusercontent.com/delta-io/delta/master/#community&#34;&gt;contact&lt;/a&gt; the community for getting answers.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to Delta Lake. See our &lt;a href=&#34;https://github.com/delta-io/delta/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;We also adhere to the &lt;a href=&#34;https://github.com/delta-io/delta/raw/master/CODE_OF_CONDUCT.md&#34;&gt;Delta Lake Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Delta Lake is compiled using &lt;a href=&#34;https://www.scala-sbt.org/1.x/docs/Command-Line-Reference.html&#34;&gt;SBT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To compile, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build/sbt compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate artifacts, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build/sbt package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To execute tests, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build/sbt test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To execute a single test suite, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build/sbt &#39;testOnly org.apache.spark.sql.delta.optimize.OptimizeCompactionSuite&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To execute a single test within and a single test suite, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build/sbt &#39;testOnly *.OptimizeCompactionSuite -- -z &#34;optimize command: on partitioned table - all partitions&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://www.scala-sbt.org/1.x/docs/Command-Line-Reference.html&#34;&gt;SBT docs&lt;/a&gt; for more commands.&lt;/p&gt; &#xA;&lt;h2&gt;IntelliJ Setup&lt;/h2&gt; &#xA;&lt;p&gt;IntelliJ is the recommended IDE to use when developing Delta Lake. To import Delta Lake as a new project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone Delta Lake into, for example, &lt;code&gt;~/delta&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In IntelliJ, select &lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;New Project&lt;/code&gt; &amp;gt; &lt;code&gt;Project from Existing Sources...&lt;/code&gt; and select &lt;code&gt;~/delta&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Under &lt;code&gt;Import project from external model&lt;/code&gt; select &lt;code&gt;sbt&lt;/code&gt;. Click &lt;code&gt;Next&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Under &lt;code&gt;Project JDK&lt;/code&gt; specify a valid Java &lt;code&gt;1.8&lt;/code&gt; JDK and opt to use SBT shell for &lt;code&gt;project reload&lt;/code&gt; and &lt;code&gt;builds&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Finish&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Setup Verification&lt;/h3&gt; &#xA;&lt;p&gt;After waiting for IntelliJ to index, verify your setup by running a test suite in IntelliJ.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Search for and open &lt;code&gt;DeltaLogSuite&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Next to the class declaration, right click on the two green arrows and select &lt;code&gt;Run &#39;DeltaLogSuite&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;If you see errors of the form&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Error:(46, 28) object DeltaSqlBaseParser is not a member of package io.delta.sql.parser&#xA;import io.delta.sql.parser.DeltaSqlBaseParser._&#xA;...&#xA;Error:(91, 22) not found: type DeltaSqlBaseParser&#xA;    val parser = new DeltaSqlBaseParser(tokenStream)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Compile using the SBT CLI: &lt;code&gt;build/sbt compile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Project Structure...&lt;/code&gt; &amp;gt; &lt;code&gt;Modules&lt;/code&gt; &amp;gt; &lt;code&gt;delta-core&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the right panel under &lt;code&gt;Source Folders&lt;/code&gt; remove any &lt;code&gt;target&lt;/code&gt; folders, e.g. &lt;code&gt;target/scala-2.12/src_managed/main [generated]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Apply&lt;/code&gt; and then re-run your test.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache License 2.0, see &lt;a href=&#34;https://github.com/delta-io/delta/raw/master/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;There are two mediums of communication within the Delta Lake community.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Public Slack Channel &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/delta-users/shared_invite/zt-165gcm2g7-0Sc57w7dX0FbfilR9EPwVQ&#34;&gt;Register here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://delta-users.slack.com/&#34;&gt;Login here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/company/deltalake&#34;&gt;Linkedin page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/deltalake&#34;&gt;Youtube channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Public &lt;a href=&#34;https://groups.google.com/forum/#!forum/delta-users&#34;&gt;Mailing list&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SpinalHDL/SpinalHDL</title>
    <updated>2022-06-19T02:20:56Z</updated>
    <id>tag:github.com,2022-06-19:/SpinalHDL/SpinalHDL</id>
    <link href="https://github.com/SpinalHDL/SpinalHDL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala based HDL&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;About SpinalHDL&lt;/h2&gt; &#xA;&lt;p&gt;SpinalHDL is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A language to describe digital hardware&lt;/li&gt; &#xA; &lt;li&gt;Compatible with EDA tools, as it generates VHDL/Verilog files&lt;/li&gt; &#xA; &lt;li&gt;Much more powerful than VHDL, Verilog, and SystemVerilog in its syntax and features&lt;/li&gt; &#xA; &lt;li&gt;Much less verbose than VHDL, Verilog, and SystemVerilog&lt;/li&gt; &#xA; &lt;li&gt;Not an HLS, nor based on the event-driven paradigm&lt;/li&gt; &#xA; &lt;li&gt;Only generates what you asked it in a one-to-one way (no black-magic, no black box)&lt;/li&gt; &#xA; &lt;li&gt;Not introducing area/performance overheads in your design (versus a hand-written VHDL/Verilog design)&lt;/li&gt; &#xA; &lt;li&gt;Based on the RTL description paradigm, but can go much further&lt;/li&gt; &#xA; &lt;li&gt;Allowing you to use Object-Oriented Programming and Functional Programming to elaborate your hardware and verify it&lt;/li&gt; &#xA; &lt;li&gt;Free and can be used in the industry without any license&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation &lt;br&gt; &lt;a href=&#34;https://spinalhdl.github.io/SpinalDoc-RTD/&#34;&gt;https://spinalhdl.github.io/SpinalDoc-RTD/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Presentation of the language &lt;br&gt; &lt;a href=&#34;https://spinalhdl.github.io/SpinalDoc-RTD/master/SpinalHDL/Getting%20Started/presentation.html&#34;&gt;https://spinalhdl.github.io/SpinalDoc-RTD/master/SpinalHDL/Getting%20Started/presentation.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SBT base project &lt;br&gt; &lt;a href=&#34;https://github.com/SpinalHDL/SpinalTemplateSbt&#34;&gt;https://github.com/SpinalHDL/SpinalTemplateSbt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gradle base project &lt;br&gt; &lt;a href=&#34;https://github.com/SpinalHDL/SpinalTemplateGradle&#34;&gt;https://github.com/SpinalHDL/SpinalTemplateGradle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jupyter bootcamp &lt;br&gt; &lt;a href=&#34;https://github.com/SpinalHDL/Spinal-bootcamp&#34;&gt;https://github.com/SpinalHDL/Spinal-bootcamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Workshop &lt;br&gt; &lt;a href=&#34;https://github.com/SpinalHDL/SpinalWorkshop&#34;&gt;https://github.com/SpinalHDL/SpinalWorkshop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google group &lt;br&gt; &lt;a href=&#34;https://groups.google.com/forum/#!forum/spinalhdl-hardware-description-language&#34;&gt;https://groups.google.com/forum/#!forum/spinalhdl-hardware-description-language&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Donation channel &lt;br&gt; &lt;a href=&#34;https://opencollective.com/spinalhdl&#34;&gt;https://opencollective.com/spinalhdl&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/SpinalHDL/SpinalHDL?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/SpinalHDL/SpinalHDL.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/SpinalHDL/SpinalHDL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SpinalHDL/SpinalHDL&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SpinalHDL/SpinalHDL.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Get it&lt;/h2&gt; &#xA;&lt;p&gt;SpinalHDL is simply a set of Scala libraries. Include them into your project and you&#39;re good to go! If you&#39;re unsure about what to do, simply clone one of our example projects (see links above).&lt;/p&gt; &#xA;&lt;h3&gt;SBT (Scala build tool)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scalaVersion := &#34;2.11.12&#34;&#xA;&#xA;libraryDependencies ++= Seq(&#xA;  &#34;com.github.spinalhdl&#34; % &#34;spinalhdl-core_2.11&#34; % &#34;latest.release&#34;,&#xA;  &#34;com.github.spinalhdl&#34; % &#34;spinalhdl-lib_2.11&#34; % &#34;latest.release&#34;,&#xA;  compilerPlugin(&#34;com.github.spinalhdl&#34; % &#34;spinalhdl-idsl-plugin_2.11&#34; % &#34;latest.release&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can force SBT to pick a specific SpinalHDL version by replacing &lt;code&gt;latest.release&lt;/code&gt; with a specific version. See the &lt;a href=&#34;https://github.com/SpinalHDL/SpinalTemplateSbt/raw/master/build.sbt&#34;&gt;SpinalHDL SBT Template project&#39;s &lt;code&gt;build.sbt&lt;/code&gt; file&lt;/a&gt; for a full SBT example.&lt;/p&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;&#x9;mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;&#x9;compile group: &#39;com.github.spinalhdl&#39;, name: &#39;spinalhdl-core_2.11&#39;, version: &#39;1.6.4&#39;&#xA;&#x9;compile group: &#39;com.github.spinalhdl&#39;, name: &#39;spinalhdl-lib_2.11&#39;, version: &#39;1.6.4&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mill(Build Tool)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import mill._&#xA;import mill.scalalib._&#xA;&#xA;object MySpinalModule extends ScalaModule {&#xA;  def scalaVersion = &#34;2.11.12&#34;&#xA;&#xA;  def ivyDeps = Agg(&#xA;    ivy&#34;com.github.spinalhdl::spinalhdl-core:1.6.4&#34;,&#xA;    ivy&#34;com.github.spinalhdl::spinalhdl-lib:1.6.4&#34;,&#xA;  )&#xA;&#xA;  def scalacPluginIvyDeps = Agg(ivy&#34;com.github.spinalhdl::spinalhdl-idsl-plugin:1.6.4&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JAR&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://oss.sonatype.org/content/groups/public/com/github/spinalhdl/spinalhdl-core_2.11/&#xA;https://oss.sonatype.org/content/groups/public/com/github/spinalhdl/spinalhdl-lib_2.11/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The files are available &lt;a href=&#34;https://mvnrepository.com/artifact/com.github.spinalhdl&#34;&gt;on Maven&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;Change logs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SpinalHDL/SpinalHDL/tags&#34;&gt;https://github.com/SpinalHDL/SpinalHDL/tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The SpinalHDL core is using the LGPL3 license while SpinalHDL lib is using the MIT license. That&#39;s for the formalities. But there are some practical statements implied by those licenses:&lt;/p&gt; &#xA;&lt;p&gt;Your freedoms are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use SpinalHDL core and lib in your closed/commercial projects.&lt;/li&gt; &#xA; &lt;li&gt;The generated RTL is yours (.vhd/.v files)&lt;/li&gt; &#xA; &lt;li&gt;Your hardware description is yours (.scala files)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Your obligations (and my wish) are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you modify the SpinalHDL core (the compiler itself), please, share your improvements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, SpinalHDL is provided &#34;as is&#34;, without warranty of any kind.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dream11/zio-http</title>
    <updated>2022-06-19T02:20:56Z</updated>
    <id>tag:github.com,2022-06-19:/dream11/zio-http</id>
    <link href="https://github.com/dream11/zio-http" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A scala library to write Http apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZIO Http&lt;/h1&gt; &#xA;&lt;p&gt;ZIO Http is a scala library for building http apps. It is powered by &lt;a href=&#34;https://zio.dev&#34;&gt;ZIO&lt;/a&gt; and &lt;a href=&#34;http://netty.io&#34;&gt;netty&lt;/a&gt; and aims at being the defacto solution for writing, highly scalable and &lt;a href=&#34;https://raw.githubusercontent.com/dream11/zio-http/main/#benchmarks&#34;&gt;performant&lt;/a&gt; web applications using idiomatic scala.&lt;/p&gt; &#xA;&lt;p&gt;Check out the full documentation here: &lt;a href=&#34;https://dream11.github.io/zio-http&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dream11/zio-http/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt; &lt;a href=&#34;https://discord.com/channels/629491597070827530/819703129267372113&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629491597070827530.svg?logo=discord&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/io/d11/zhttp_2.13/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/io.d11/zhttp_2.13?server=https%3A%2F%2Fs01.oss.sonatype.org&#34; alt=&#34;Sonatype Nexus (Releases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://s01.oss.sonatype.org/content/repositories/snapshots/io/d11/zhttp_2.13/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/io.d11/zhttp_2.13?server=https%3A%2F%2Fs01.oss.sonatype.org&#34; alt=&#34;Sonatype Nexus (Snapshots)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/dream11/zio-http&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/dream11/zio-http.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open.vscode.dev/dream11/zio-http&#34;&gt;&lt;img src=&#34;https://open.vscode.dev/badges/open-in-vscode.svg?sanitize=true&#34; alt=&#34;Open in Visual Studio Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dream11/zio-http/main/#zio-http&#34;&gt;ZIO Http&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dream11/zio-http/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dream11/zio-http/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dream11.github.io/zio-http/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;A simple Http server can be built using a few lines of code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import zio._&#xA;import zhttp.http._&#xA;import zhttp.service.Server&#xA;&#xA;object HelloWorld extends App {&#xA;  val app = Http.collect[Request] {&#xA;    case Method.GET -&amp;gt; !! / &#34;text&#34; =&amp;gt; Response.text(&#34;Hello World!&#34;)&#xA;  }&#xA;&#xA;  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =&#xA;    Server.start(8090, app).exitCode&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;You can checkout more examples in the &lt;a href=&#34;https://github.com/dream11/zio-http/tree/main/example/src/main/scala/example&#34;&gt;example&lt;/a&gt; project —&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/HelloWorld.scala&#34;&gt;Simple Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/HelloWorldAdvanced.scala&#34;&gt;Advanced Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/WebSocketEcho.scala&#34;&gt;WebSocket Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/StreamingResponse.scala&#34;&gt;Streaming Response&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/SimpleClient.scala&#34;&gt;Simple Client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/FileStreaming.scala&#34;&gt;File Streaming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/Authentication.scala&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Steps to run an example&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Edit the &lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/project/BuildHelper.scala#L109&#34;&gt;RunSettings&lt;/a&gt; - modify &lt;code&gt;className&lt;/code&gt; to the example you&#39;d like to run.&lt;/li&gt; &#xA; &lt;li&gt;From sbt shell, run &lt;code&gt;~example/reStart&lt;/code&gt;. You should see &lt;code&gt;Server started on port: 8090&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Send curl request for defined &lt;code&gt;http Routes&lt;/code&gt;, for eg : &lt;code&gt;curl -i &#34;http://localhost:8090/text&#34;&lt;/code&gt; for &lt;code&gt;example.HelloWorld&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Setup via &lt;code&gt;build.sbt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;io.d11&#34; %% &#34;zhttp&#34;      % &#34;[version]&#34;&#xA;libraryDependencies += &#34;io.d11&#34; %% &#34;zhttp-test&#34; % &#34;[version]&#34; % Test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; ZIO Http is compatible with &lt;code&gt;ZIO 1.x&lt;/code&gt; and &lt;code&gt;ZIO 2.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Watch Mode&lt;/h1&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://github.com/spray/sbt-revolver&#34;&gt;sbt-revolver&lt;/a&gt; plugin to start the server and run it in watch mode using &lt;code&gt;~ reStart&lt;/code&gt; command on the SBT console.&lt;/p&gt;</summary>
  </entry>
</feed>