<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-24T02:21:42Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>softwaremill/tapir</title>
    <updated>2022-07-24T02:21:42Z</updated>
    <id>tag:github.com,2022-07-24:/softwaremill/tapir</id>
    <link href="https://github.com/softwaremill/tapir" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Declarative, type-safe web endpoints library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/banner.png&#34; alt=&#34;tapir&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Happy 1.0 birthday, tapir!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/softwaremill/tapir?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/softwaremill/tapir&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/softwaremill/tapir/actions?query=workflow%3A%22CI%22&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.softwaremill.sttp.tapir/tapir-core_2.13&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.softwaremill.sttp.tapir/tapir-core_2.13/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;With tapir, you can describe HTTP API endpoints as immutable Scala values. Each endpoint can contain a number of input and output parameters. An endpoint specification can be interpreted as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a server, given the &#34;business logic&#34;: a function, which computes output parameters based on input parameters. Currently supported: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/server/akkahttp.html&#34;&gt;Akka HTTP&lt;/a&gt; &lt;code&gt;Route&lt;/code&gt;s/&lt;code&gt;Directive&lt;/code&gt;s&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/server/http4s.html&#34;&gt;Http4s&lt;/a&gt; &lt;code&gt;HttpRoutes[F]&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/server/netty.html&#34;&gt;Netty&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/server/finatra.html&#34;&gt;Finatra&lt;/a&gt; &lt;code&gt;FinatraRoute&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/server/play.html&#34;&gt;Play&lt;/a&gt; &lt;code&gt;Route&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/server/vertx.html&#34;&gt;Vert.X&lt;/a&gt; &lt;code&gt;Router =&amp;gt; Route&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/server/ziohttp.html&#34;&gt;ZIO Http&lt;/a&gt; &lt;code&gt;Http&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/server/armeria.html&#34;&gt;Armeria&lt;/a&gt; &lt;code&gt;HttpServiceWithRoutes&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/server/aws.html&#34;&gt;aws&lt;/a&gt; through Lambda/SAM/Terraform&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;a client, which is a function from input parameters to output parameters. Currently supported: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/client/sttp.html&#34;&gt;sttp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/client/play.html&#34;&gt;Play&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/client/http4s.html&#34;&gt;http4s&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;documentation. Currently supported: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/docs/openapi.html&#34;&gt;OpenAPI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tapir.softwaremill.com/en/latest/docs/asyncapi.html&#34;&gt;AsyncAPI&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Depending on how you prefer to explore the library, take a look at one of the &lt;a href=&#34;https://tapir.softwaremill.com/en/latest/examples.html&#34;&gt;examples&lt;/a&gt; or &lt;a href=&#34;https://tapir.softwaremill.com/en/latest/index.html&#34;&gt;head over to the docs&lt;/a&gt; for a more detailed description of how tapir works! Or, use &lt;a href=&#34;https://adopt-tapir.softwaremill.com&#34;&gt;adopt-tapir&lt;/a&gt; to generate a tapir-based project in a couple of clicks!&lt;/p&gt; &#xA;&lt;h2&gt;Why tapir?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;type-safety&lt;/strong&gt;: compile-time guarantees, develop-time completions, read-time information&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;declarative&lt;/strong&gt;: separate the shape of the endpoint (the &#34;what&#34;), from the server logic (the &#34;how&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenAPI / Swagger integration&lt;/strong&gt;: generate documentation from endpoint descriptions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;observability&lt;/strong&gt;: leverage the metadata to report rich metrics and tracing information&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;abstraction&lt;/strong&gt;: re-use common endpoint definitions, as well as individual inputs/outputs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;library, not a framework&lt;/strong&gt;: integrates with your stack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adopters&lt;/h2&gt; &#xA;&lt;p&gt;Is your company already using tapir? We&#39;re continually expanding the &#34;adopters&#34; section in the documentation; the more the merrier! It would be great to feature your company&#39;s logo, but in order to do that, we&#39;ll need written permission to avoid any legal misunderstandings.&lt;/p&gt; &#xA;&lt;p&gt;Please email us at &lt;a href=&#34;mailto:tapir@softwaremill.com&#34;&gt;tapir@softwaremill.com&lt;/a&gt; from your company&#39;s email with a link to your logo (if we can use it, of course!) or with details who to kindly ask for permission to feature the logo in tapir&#39;s documentation. We&#39;ll handle the rest.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.adobe.com&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/adobe.png&#34; alt=&#34;Adobe&#34; width=&#34;160&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.colisweb.com&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/colisweb.png&#34; alt=&#34;Colisweb&#34; width=&#34;160&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://swissborg.com&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/swissborg.png&#34; alt=&#34;Swissborg&#34; width=&#34;160&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://kaizo.com&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/kaizo.png&#34; alt=&#34;Kaizo&#34; width=&#34;160&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.process.st/&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/process_street.png&#34; alt=&#34;Process Street&#34; width=&#34;100&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.tranzzo.com/&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/tranzzo.svg?sanitize=true&#34; alt=&#34;Tranzzo&#34; width=&#34;160&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.kelkoogroup.com&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/kelkoogroup.png&#34; alt=&#34;Kelkoo group&#34; width=&#34;160&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.softwaremill.com/&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/softwaremill.png&#34; alt=&#34;SoftwareMill&#34; width=&#34;160&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.carvana.com&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/carvana.svg?sanitize=true&#34; alt=&#34;Carvana&#34; width=&#34;160&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.moneyfarm.com&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/moneyfarm.png&#34; alt=&#34;Moneyfarm&#34; width=&#34;160&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.ocadogroup.com/about-us/ocado-technology&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/ocado.png&#34; alt=&#34;Ocado Technology&#34; width=&#34;160&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.wegtam.com&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/wegtam.svg?sanitize=true&#34; alt=&#34;Wegtam&#34; width=&#34;160&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.broad.app&#34;&gt;&lt;img src=&#34;https://github.com/softwaremill/tapir/raw/master/doc/adopters/broad.png&#34; alt=&#34;Broad&#34; width=&#34;160&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Teaser&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import sttp.tapir._&#xA;import sttp.tapir.generic.auto._&#xA;import sttp.tapir.json.circe._&#xA;import io.circe.generic.auto._&#xA;&#xA;type Limit = Int&#xA;type AuthToken = String&#xA;case class BooksQuery(genre: String, year: Int)&#xA;case class Book(title: String)&#xA;&#xA;&#xA;// Define an endpoint&#xA;&#xA;val booksListing: PublicEndpoint[(BooksQuery, Limit, AuthToken), String, List[Book], Any] = &#xA;  endpoint&#xA;    .get&#xA;    .in((&#34;books&#34; / path[String](&#34;genre&#34;) / path[Int](&#34;year&#34;)).mapTo[BooksQuery])&#xA;    .in(query[Limit](&#34;limit&#34;).description(&#34;Maximum number of books to retrieve&#34;))&#xA;    .in(header[AuthToken](&#34;X-Auth-Token&#34;))&#xA;    .errorOut(stringBody)&#xA;    .out(jsonBody[List[Book]])&#xA;&#xA;&#xA;// Generate OpenAPI documentation&#xA;&#xA;import sttp.apispec.openapi.circe.yaml._&#xA;import sttp.tapir.docs.openapi.OpenAPIDocsInterpreter&#xA;&#xA;val docs = OpenAPIDocsInterpreter().toOpenAPI(booksListing, &#34;My Bookshop&#34;, &#34;1.0&#34;)&#xA;println(docs.toYaml)&#xA;&#xA;&#xA;// Convert to akka-http Route&#xA;&#xA;import sttp.tapir.server.akkahttp.AkkaHttpServerInterpreter&#xA;import akka.http.scaladsl.server.Route&#xA;import scala.concurrent.Future&#xA;import scala.concurrent.ExecutionContext.Implicits.global&#xA;&#xA;def bookListingLogic(bfy: BooksQuery,&#xA;                     limit: Limit,&#xA;                     at: AuthToken): Future[Either[String, List[Book]]] =&#xA;  Future.successful(Right(List(Book(&#34;The Sorrows of Young Werther&#34;))))&#xA;  &#xA;val booksListingRoute: Route = AkkaHttpServerInterpreter()&#xA;  .toRoute(booksListing.serverLogic((bookListingLogic _).tupled))&#xA;&#xA;&#xA;// Convert to sttp Request&#xA;&#xA;import sttp.tapir.client.sttp.SttpClientInterpreter&#xA;import sttp.client3._&#xA;&#xA;val booksListingRequest: Request[DecodeResult[Either[String, List[Book]]], Any] = &#xA;  SttpClientInterpreter()&#xA;    .toRequest(booksListing, Some(uri&#34;http://localhost:8080&#34;))&#xA;    .apply((BooksQuery(&#34;SF&#34;, 2016), 20, &#34;xyz-abc-123&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;tapir documentation is available at &lt;a href=&#34;http://tapir.softwaremill.com&#34;&gt;tapir.softwaremill.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart with sbt&lt;/h2&gt; &#xA;&lt;p&gt;Add the following dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbt&#34;&gt;&#34;com.softwaremill.sttp.tapir&#34; %% &#34;tapir-core&#34; % &#34;1.0.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import sttp.tapir._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally, type &lt;code&gt;endpoint.&lt;/code&gt; and see where auto-complete gets you!&lt;/p&gt; &#xA;&lt;h3&gt;Scala 2.12&lt;/h3&gt; &#xA;&lt;p&gt;Partial unification is now enabled by default from Scala 2.13. However, if you&#39;re using Scala 2.12 or older, then you&#39;ll need partial unification enabled in the compiler (alternatively, you&#39;ll need to manually provide type arguments in some cases):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sbt&#34;&gt;scalacOptions += &#34;-Ypartial-unification&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sidenote for scala 2.12.4 and higher: if you encounter an issue with compiling your project because of a &lt;code&gt;StackOverflowException&lt;/code&gt; related to &lt;a href=&#34;https://github.com/scala/bug/issues/10604&#34;&gt;this&lt;/a&gt; scala bug, please increase your stack memory. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sbt -J-Xss4M clean compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other sttp projects&lt;/h2&gt; &#xA;&lt;p&gt;sttp is a family of Scala HTTP-related projects, and currently includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/softwaremill/sttp&#34;&gt;sttp client&lt;/a&gt;: the Scala HTTP client you always wanted!&lt;/li&gt; &#xA; &lt;li&gt;sttp tapir: this project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/softwaremill/sttp-model&#34;&gt;sttp model&lt;/a&gt;: simple HTTP model classes (used by client &amp;amp; tapir)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/softwaremill/sttp-shared&#34;&gt;sttp shared&lt;/a&gt;: shared web socket, FP abstractions, capabilities and streaming code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/softwaremill/sttp-apispec&#34;&gt;sttp apispec&lt;/a&gt;: OpenAPI, AsyncAPI and JSON Schema models.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All suggestions welcome :)&lt;/p&gt; &#xA;&lt;p&gt;See the list of &lt;a href=&#34;https://github.com/softwaremill/tapir/issues&#34;&gt;issues&lt;/a&gt; and pick one! Or report your own.&lt;/p&gt; &#xA;&lt;p&gt;If you are having doubts on the &lt;em&gt;why&lt;/em&gt; or &lt;em&gt;how&lt;/em&gt; something works, don&#39;t hesitate to ask a question on &lt;a href=&#34;https://gitter.im/softwaremill/tapir&#34;&gt;gitter&lt;/a&gt; or via github. This probably means that the documentation, scaladocs or code is unclear and be improved for the benefit of all.&lt;/p&gt; &#xA;&lt;h3&gt;Testing locally&lt;/h3&gt; &#xA;&lt;p&gt;The JS tests use &lt;a href=&#34;https://github.com/scala-js/scala-js-env-selenium/issues/119&#34;&gt;Gecko instead of Chrome&lt;/a&gt;, although this causes another problem: out of memory when running JS tests for multiple modules. Work-arounds:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run only JVM tests for a specific Scala version using &lt;code&gt;testJVM2_13&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;test single JS projects&lt;/li&gt; &#xA; &lt;li&gt;use CI (GitHub Actions) to test all projects - the &lt;code&gt;.github/workflows/ci.yml&lt;/code&gt; enumerates them one by one&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can test only server/client/doc/other projects using &lt;code&gt;testServers&lt;/code&gt;, &lt;code&gt;testClients&lt;/code&gt;, &lt;code&gt;testDocs&lt;/code&gt; and &lt;code&gt;testOther&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To verify that the code snippet in docs compile, run &lt;code&gt;compileDocumentation&lt;/code&gt;. A full mdoc run is done during a release (when the documentation is generated).&lt;/p&gt; &#xA;&lt;h2&gt;Commercial Support&lt;/h2&gt; &#xA;&lt;p&gt;We offer commercial support for tapir and related technologies, as well as development services. &lt;a href=&#34;https://softwaremill.com&#34;&gt;Contact us&lt;/a&gt; to learn more about our offer!&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2018-2022 SoftwareMill &lt;a href=&#34;https://softwaremill.com&#34;&gt;https://softwaremill.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>scalameta/metals</title>
    <updated>2022-07-24T02:21:42Z</updated>
    <id>tag:github.com,2022-07-24:/scalameta/metals</id>
    <link href="https://github.com/scalameta/metals" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala language server with rich IDE features 🚀&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Metals&lt;/h1&gt; &#xA;&lt;a href=&#34;https://discord.gg/FaVDrJegEh&#34;&gt; &lt;img alt=&#34;Chat with us on discord&#34; src=&#34;https://img.shields.io/discord/632642981228314653&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://twitter.com/scalameta&#34;&gt; &lt;img alt=&#34;Follow scalameta on Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/scalameta.svg?logo=twitter&amp;amp;color=blue&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://index.scala-lang.org/scalameta/metals/metals&#34;&gt; &lt;img alt=&#34;Find us on scaladex&#34; src=&#34;https://index.scala-lang.org/scalameta/metals/metals/latest.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the website: &lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;https://scalameta.org/metals/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the contributing guide: &lt;a href=&#34;https://scalameta.org/metals/docs/contributors/getting-started.html&#34;&gt;https://scalameta.org/metals/docs/contributors/getting-started.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To learn more about how Metals works, see &lt;a href=&#34;https://raw.githubusercontent.com/scalameta/metals/main/architecture.md&#34;&gt;./architecture.md&lt;/a&gt;. It explains the high-level layout of the source code. Do skim through that document.&lt;/p&gt; &#xA;&lt;h3&gt;Team&lt;/h3&gt; &#xA;&lt;p&gt;The current maintainers (people who can merge pull requests) are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adrien Piquerez - &lt;a href=&#34;https://github.com/adpi2&#34;&gt;&lt;code&gt;@adpi2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arthur McGibbon - &lt;a href=&#34;https://github.com/Arthurm1&#34;&gt;&lt;code&gt;@Arthurm1&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chris Kipp - &lt;a href=&#34;https://github.com/ckipp01&#34;&gt;&lt;code&gt;@ckipp01&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kamil Podsiadło - &lt;a href=&#34;https://github.com/kpodsiad&#34;&gt;&lt;code&gt;@kpodsiad&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ólafur Páll Geirsson - &lt;a href=&#34;https://github.com/olafurpg&#34;&gt;&lt;code&gt;@olafurpg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rikito Taniguchi - &lt;a href=&#34;https://github.com/tanishiking&#34;&gt;&lt;code&gt;@tanishiking&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tomasz Godzik - &lt;a href=&#34;https://github.com/tgodzik&#34;&gt;&lt;code&gt;@tgodzik&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vadim Chelyshov - &lt;a href=&#34;https://github.com/dos65&#34;&gt;&lt;code&gt;@dos65&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Past maintainers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alexey Alekhin - &lt;a href=&#34;https://github.com/laughedelic&#34;&gt;&lt;code&gt;@laughedelic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gabriele Petronella - &lt;a href=&#34;https://github.com/gabro&#34;&gt;&lt;code&gt;@gabro&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Johan Mudsam - &lt;a href=&#34;https://github.com/mudsam&#34;&gt;&lt;code&gt;@mudsam&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Krzysztof Bochenek - &lt;a href=&#34;https://github.com/kpbochenek&#34;&gt;&lt;code&gt;@kpbochenek&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jorge Vicente Cantero - &lt;a href=&#34;https://github.com/jvican&#34;&gt;&lt;code&gt;@jvican&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Marek Żarnowski - &lt;a href=&#34;https://github.com/marek1840&#34;&gt;&lt;code&gt;@marek1840&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shane Delmore - &lt;a href=&#34;https://github.com/ShaneDelmore&#34;&gt;&lt;code&gt;@ShaneDelmore&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;Huge thanks to &lt;a href=&#34;https://github.com/dragos&#34;&gt;&lt;code&gt;@dragos&lt;/code&gt;&lt;/a&gt; for his work on a Scala implementation of the LSP (see: &lt;a href=&#34;https://github.com/dragos/dragos-vscode-scala&#34;&gt;https://github.com/dragos/dragos-vscode-scala&lt;/a&gt;). This project helped us get quickly started with LSP. Since then, we have refactored the project&#39;s original sources to the point where only a few simple case classes remain.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/discover-intellij-idea-for-scala.html&#34;&gt;IntelliJ IDEA&lt;/a&gt;: the most widely used IDE for Scala using a re-implementation of the Scala typechecker.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Metals?&lt;/h2&gt; &#xA;&lt;p&gt;Metals = Meta (from Scalameta) + LS (from Language Server)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chipsalliance/rocket-chip</title>
    <updated>2022-07-24T02:21:42Z</updated>
    <id>tag:github.com,2022-07-24:/chipsalliance/rocket-chip</id>
    <link href="https://github.com/chipsalliance/rocket-chip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rocket Chip Generator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rocket Chip Generator &lt;span&gt;🚀&lt;/span&gt; &lt;img src=&#34;https://github.com/chipsalliance/rocket-chip/workflows/Continuous%20Integration/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the Rocket chip generator necessary to instantiate the RISC-V Rocket Core. For more information on Rocket Chip, please consult our &lt;a href=&#34;http://www.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-17.html&#34;&gt;technical report&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#quick&#34;&gt;Quick instructions&lt;/a&gt; for those who want to dive directly into the details without knowing exactly what&#39;s in the repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#what&#34;&gt;What&#39;s in the Rocket chip generator repository?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#how&#34;&gt;How should I use the Rocket chip generator?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#emulator&#34;&gt;Using the cycle-accurate Verilator simulation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#fpga&#34;&gt;Mapping a Rocket core down to an FPGA&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#vlsi&#34;&gt;Pushing a Rocket core through the VLSI tools&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#param&#34;&gt;How can I parameterize my Rocket chip?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#debug&#34;&gt;Debugging with GDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#ide&#34;&gt;Building Rocket Chip with an IDE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;quick&#34;&gt;&lt;/a&gt; Quick Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Checkout The Code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ucb-bar/rocket-chip.git&#xA;$ cd rocket-chip&#xA;$ git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up the RISCV environment variable&lt;/h3&gt; &#xA;&lt;p&gt;To build the rocket-chip repository, you must point the RISCV environment variable to your rocket-tools installation directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export RISCV=/path/to/riscv/toolchain/installation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rocket-tools repository known to work with rocket-chip is noted in the file riscv-tools.hash. However, any recent rocket-tools should work. You can build rocket-tools as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/freechipsproject/rocket-tools&#xA;$ cd rocket-tools&#xA;$ git submodule update --init --recursive&#xA;$ export RISCV=/path/to/install/riscv/toolchain&#xA;$ export MAKEFLAGS=&#34;$MAKEFLAGS -jN&#34; # Assuming you have N cores on your host system&#xA;$ ./build.sh&#xA;$ ./build-rv32ima.sh (if you are using RV32).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Necessary Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;You may need to install some additional packages to use this repository. Rather than list all dependencies here, please see the appropriate section of the READMEs for each of the subprojects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/rocket-tools/raw/master/README.md&#34;&gt;rocket-tools &#34;Ubuntu Packages Needed&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ucb-bar/chisel3#installation&#34;&gt;chisel3 &#34;Installation&#34;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building The Project&lt;/h3&gt; &#xA;&lt;p&gt;First, to build the C simulator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd emulator&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to build the VCS simulator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd vsim&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In either case, you can run a set of assembly tests or simple benchmarks (Assuming you have N cores on your host system):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make -jN run-asm-tests&#xA;$ make -jN run-bmark-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build a C simulator that is capable of VCD waveform generation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd emulator&#xA;$ make debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to run the assembly tests on the C simulator and generate waveforms:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make -jN run-asm-tests-debug&#xA;$ make -jN run-bmark-tests-debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate FPGA- or VLSI-synthesizable Verilog (output will be in &lt;code&gt;vsim/generated-src&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd vsim&#xA;$ make verilog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the Scala tests (&lt;code&gt;sbt test&lt;/code&gt;) or linter (&lt;code&gt;sbt scalafix&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd regression&#xA;&#xA;# Scala tests&#xA;$ make scalatest SUITE=foo&#xA;&#xA;# Scala linter, automatically modifying files to correct issues&#xA;$ make scalafix SUITE=foo&#xA;&#xA;# Scala linter, only printing out issues&#xA;$ make scalafix-check SUITE=foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Keeping Your Repo Up-to-Date&lt;/h3&gt; &#xA;&lt;p&gt;If you are trying to keep your repo up to date with this GitHub repo, you also need to keep the submodules and tools up to date.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ # Get the newest versions of the files in this repo&#xA;$ git pull origin master&#xA;$ # Make sure the submodules have the correct versions&#xA;$ git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If rocket-tools version changes, you should recompile and install rocket-tools according to the directions in the &lt;a href=&#34;https://github.com/freechipsproject/rocket-tools/raw/master/README.md&#34;&gt;rocket-tools/README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd rocket-tools&#xA;$ ./build.sh&#xA;$ ./build-rv32ima.sh (if you are using RV32)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;what&#34;&gt;&lt;/a&gt; What&#39;s in the Rocket chip generator repository?&lt;/h2&gt; &#xA;&lt;p&gt;The rocket-chip repository is a meta-repository that points to several sub-repositories using &lt;a href=&#34;http://git-scm.com/book/en/Git-Tools-Submodules&#34;&gt;Git submodules&lt;/a&gt;. Those repositories contain tools needed to generate and test SoC designs. This respository also contains code that is used to generate RTL. Hardware generation is done using &lt;a href=&#34;http://chisel.eecs.berkeley.edu&#34;&gt;Chisel&lt;/a&gt;, a hardware construction language embedded in Scala. The rocket-chip generator is a Scala program that invokes the Chisel compiler in order to emit RTL describing a complete SoC. The following sections describe the components of this repository.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;what_submodules&#34;&gt;&lt;/a&gt;Git Submodules&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;Git submodules&lt;/a&gt; allow you to keep a Git repository as a subdirectory of another Git repository. For projects being co-developed with the Rocket Chip Generator, we have often found it expedient to track them as submodules, allowing for rapid exploitation of new features while keeping commit histories separate. As submoduled projects adopt stable public APIs, we transition them to external dependencies. Here are the submodules that are currently being tracked in the rocket-chip repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;chisel3&lt;/strong&gt; (&lt;a href=&#34;https://github.com/ucb-bar/chisel3&#34;&gt;https://github.com/ucb-bar/chisel3&lt;/a&gt;): The Rocket Chip Generator uses &lt;a href=&#34;http://chisel.eecs.berkeley.edu&#34;&gt;Chisel&lt;/a&gt; to generate RTL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;firrtl&lt;/strong&gt; (&lt;a href=&#34;https://github.com/ucb-bar/firrtl&#34;&gt;https://github.com/ucb-bar/firrtl&lt;/a&gt;): &lt;a href=&#34;http://bar.eecs.berkeley.edu/projects/2015-firrtl.html&#34;&gt;Firrtl (Flexible Internal Representation for RTL)&lt;/a&gt; is the intermediate representation of RTL constructions used by Chisel3. The Chisel3 compiler generates a Firrtl representation, from which the final product (Verilog code, C code, etc) is generated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;hardfloat&lt;/strong&gt; (&lt;a href=&#34;https://github.com/ucb-bar/berkeley-hardfloat&#34;&gt;https://github.com/ucb-bar/berkeley-hardfloat&lt;/a&gt;): Hardfloat holds Chisel code that generates parameterized IEEE 754-2008 compliant floating-point units used for fused multiply-add operations, conversions between integer and floating-point numbers, and conversions between floating-point conversions with different precision.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rocket-tools&lt;/strong&gt; (&lt;a href=&#34;https://github.com/freechipsproject/rocket-tools&#34;&gt;https://github.com/freechipsproject/rocket-tools&lt;/a&gt;): We tag a version of RISC-V software tools that work with the RTL committed in this repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;torture&lt;/strong&gt; (&lt;a href=&#34;https://github.com/ucb-bar/riscv-torture&#34;&gt;https://github.com/ucb-bar/riscv-torture&lt;/a&gt;): This module is used to generate and execute constrained random instruction streams that can be used to stress-test both the core and uncore portions of the design.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;what_packages&#34;&gt;&lt;/a&gt;Scala Packages&lt;/h3&gt; &#xA;&lt;p&gt;In addition to submodules that track independent Git repositories, the rocket-chip code base is itself factored into a number of Scala packages. These packages are all found within the src/main/scala directory. Some of these packages provide Scala utilities for generator configuration, while other contain the actual Chisel RTL generators themselves. Here is a brief description of what can be found in each package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;amba&lt;/strong&gt; This RTL package uses diplomacy to generate bus implementations of AMBA protocols, including AXI4, AHB-lite, and APB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;config&lt;/strong&gt; This utility package provides Scala interfaces for configuring a generator via a dynamically-scoped parameterization library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;coreplex&lt;/strong&gt; This RTL package generates a complete coreplex by gluing together a variety of components from other packages, including: tiled Rocket cores, a system bus network, coherence agents, debug devices, interrupt handlers, externally-facing peripherals, clock-crossers and converters from TileLink to external bus protocols (e.g. AXI or AHB).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;devices&lt;/strong&gt; This RTL package contains implementations for peripheral devices, including the Debug module and various TL slaves.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;diplomacy&lt;/strong&gt; This utility package extends Chisel by allowing for two-phase hardware elaboration, in which certain parameters are dynamically negotiated between modules. For more information about diplomacy, see &lt;a href=&#34;https://carrv.github.io/2017/papers/cook-diplomacy-carrv2017.pdf&#34;&gt;this paper&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;groundtest&lt;/strong&gt; This RTL package generates synthesizable hardware testers that emit randomized memory access streams in order to stress-tests the uncore memory hierarchy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;jtag&lt;/strong&gt; This RTL package provides definitions for generating JTAG bus interfaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;regmapper&lt;/strong&gt; This utility package generates slave devices with a standardized interface for accessing their memory-mapped registers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rocket&lt;/strong&gt; This RTL package generates the Rocket in-order pipelined core, as well as the L1 instruction and data caches. This library is intended to be used by a chip generator that instantiates the core within a memory system and connects it to the outside world.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tile&lt;/strong&gt; This RTL package contains components that can be combined with cores to construct tiles, such as FPUs and accelerators.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tilelink&lt;/strong&gt; This RTL package uses diplomacy to generate bus implementations of the TileLink protocol. It also contains a variety of adapters and protocol converters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;system&lt;/strong&gt; This top-level utility package invokes Chisel to elaborate a particular configuration of a coreplex, along with the appropriate testing collateral.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;unittest&lt;/strong&gt; This utility package contains a framework for generateing synthesizable hardware testers of individual modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;util&lt;/strong&gt; This utility package provides a variety of common Scala and Chisel constructs that are re-used across multiple other packages,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;what_else&#34;&gt;&lt;/a&gt;Other Resources&lt;/h3&gt; &#xA;&lt;p&gt;Outside of Scala, we also provide a variety of resources to create a complete SoC implementation and test the generated designs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;bootrom&lt;/strong&gt; Sources for the first-stage bootloader included in the BootROM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;csrc&lt;/strong&gt; C sources for use with Verilator simulation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;docs&lt;/strong&gt; Documentation, tutorials, etc for specific parts of the codebase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;emulator&lt;/strong&gt; Directory in which Verilator simulations are compiled and run.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;project&lt;/strong&gt; Directory used by SBT for Scala compilation and build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;regression&lt;/strong&gt; Defines continuous integration and nightly regression suites.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;scripts&lt;/strong&gt; Utilities for parsing the output of simulations or manipulating the contents of source files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;vsim&lt;/strong&gt; Directory in which Synopsys VCS simulations are compiled and run.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;vsrc&lt;/strong&gt; Verilog sources containing interfaces, harnesses and VPI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;what_toplevel&#34;&gt;&lt;/a&gt;Extending the Top-Level Design&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/ucb-bar/project-template&#34;&gt;this description&lt;/a&gt; of how to create you own top-level design with custom devices.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;how&#34;&gt;&lt;/a&gt; How should I use the Rocket chip generator?&lt;/h2&gt; &#xA;&lt;p&gt;Chisel can generate code for three targets: a high-performance cycle-accurate Verilator, Verilog optimized for FPGAs, and Verilog for VLSI. The rocket-chip generator can target all three backends. You will need a Java runtime installed on your machine, since Chisel is overlaid on top of &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;. Chisel RTL (i.e. rocket-chip source code) is a Scala program executing on top of your Java runtime. To begin, ensure that the ROCKETCHIP environment variable points to the rocket-chip repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ucb-bar/rocket-chip.git&#xA;$ cd rocket-chip&#xA;$ export ROCKETCHIP=`pwd`&#xA;$ git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before going any further, you must point the RISCV environment variable to your rocket-tools installation directory. If you do not yet have rocket-tools installed, follow the directions in the &lt;a href=&#34;https://github.com/freechipsproject/rocket-tools/raw/master/README.md&#34;&gt;rocket-tools/README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export RISCV=/path/to/install/riscv/toolchain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, you will see the following error message while executing any command in the rocket-chip generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;*** Please set environment variable RISCV. Please take a look at README.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;emulator&#34;&gt;&lt;/a&gt; 1) Using the high-performance cycle-accurate Verilator&lt;/h3&gt; &#xA;&lt;p&gt;Your next step is to get the Verilator working. Assuming you have N cores on your host system, do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/emulator&#xA;$ make -jN run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By doing so, the build system will generate C++ code for the cycle-accurate emulator, compile the emulator, compile all RISC-V assembly tests and benchmarks, and run both tests and benchmarks on the emulator. If Make finished without any errors, it means that the generated Rocket chip has passed all assembly tests and benchmarks!&lt;/p&gt; &#xA;&lt;p&gt;You can also run assembly tests and benchmarks separately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make -jN run-asm-tests&#xA;$ make -jN run-bmark-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate vcd waveforms, you can run one of the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make -jN run-debug&#xA;$ make -jN run-asm-tests-debug&#xA;$ make -jN run-bmark-tests-debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or call out individual assembly tests or benchmarks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make output/rv64ui-p-add.out&#xA;$ make output/rv64ui-p-add.vcd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now take a look in the emulator/generated-src directory. You will find Chisel generated Verilog code and its associated C++ code generated by Verilator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ls $ROCKETCHIP/emulator/generated-src&#xA;freechips.rocketchip.system.DefaultConfig&#xA;freechips.rocketchip.system.DefaultConfig.0x0.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0x0.1.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0x2000000.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0x40.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0xc000000.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.anno.json&#xA;freechips.rocketchip.system.DefaultConfig.behav_srams.v&#xA;freechips.rocketchip.system.DefaultConfig.conf&#xA;freechips.rocketchip.system.DefaultConfig.d&#xA;freechips.rocketchip.system.DefaultConfig.dts&#xA;freechips.rocketchip.system.DefaultConfig.fir&#xA;freechips.rocketchip.system.DefaultConfig.graphml&#xA;freechips.rocketchip.system.DefaultConfig.json&#xA;freechips.rocketchip.system.DefaultConfig.memmap.json&#xA;freechips.rocketchip.system.DefaultConfig.plusArgs&#xA;freechips.rocketchip.system.DefaultConfig.rom.conf&#xA;freechips.rocketchip.system.DefaultConfig.v&#xA;TestHarness.anno.json&#xA;$ ls $ROCKETCHIP/emulator/generated-src/freechips.rocketchip.system.DefaultConfig&#xA;VTestHarness__1.cpp&#xA;VTestHarness__2.cpp&#xA;VTestHarness__3.cpp&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, output of the executed assembly tests and benchmarks can be found at emulator/output/*.out. Each file has a cycle-by-cycle dump of write-back stage of the pipeline. Here&#39;s an excerpt of emulator/output/rv64ui-p-add.out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C0: 483 [1] pc=[00000002138] W[r 3=000000007fff7fff][1] R[r 1=000000007fffffff] R[r 2=ffffffffffff8000] inst=[002081b3] add s1, ra, s0&#xA;C0: 484 [1] pc=[0000000213c] W[r29=000000007fff8000][1] R[r31=ffffffff80007ffe] R[r31=0000000000000005] inst=[7fff8eb7] lui t3, 0x7fff8&#xA;C0: 485 [0] pc=[00000002140] W[r 0=0000000000000000][0] R[r 0=0000000000000000] R[r 0=0000000000000000] inst=[00000000] unknown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first [1] at cycle 483, core 0, shows that there&#39;s a valid instruction at PC 0x2138 in the writeback stage, which is 0x002081b3 (add s1, ra, s0). The second [1] tells us that the register file is writing r3 with the corresponding value 0x7fff7fff. When the add instruction was in the decode stage, the pipeline had read r1 and r2 with the corresponding values next to it. Similarly at cycle 484, there&#39;s a valid instruction (lui instruction) at PC 0x213c in the writeback stage. At cycle 485, there isn&#39;t a valid instruction in the writeback stage, perhaps, because of a instruction cache miss at PC 0x2140.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;fpga&#34;&gt;&lt;/a&gt; 2) Mapping a Rocket core to an FPGA&lt;/h3&gt; &#xA;&lt;p&gt;You can generate synthesizable Verilog with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/vsim&#xA;$ make verilog CONFIG=freechips.rocketchip.system.DefaultFPGAConfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Verilog used for the FPGA tools will be generated in vsim/generated-src. Please proceed further with the directions shown in the &lt;a href=&#34;https://github.com/sifive/freedom/raw/master/README.md&#34;&gt;README&lt;/a&gt; of the freedom repository. You can also run Rocket Chip on Amazon EC2 F1 with &lt;a href=&#34;https://github.com/firesim/firesim&#34;&gt;FireSim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have access to VCS, you will be able to run assembly tests and benchmarks in simulation with the following commands (again assuming you have N cores on your host machine):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/vsim&#xA;$ make -jN run CONFIG=freechips.rocketchip.system.DefaultFPGAConfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated output looks similar to those generated from the emulator. Look into vsim/output/*.out for the output of the executed assembly tests and benchmarks.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;vlsi&#34;&gt;&lt;/a&gt; 3) Pushing a Rocket core through the VLSI tools&lt;/h3&gt; &#xA;&lt;p&gt;You can generate Verilog for your VLSI flow with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/vsim&#xA;$ make verilog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now take a look at vsim/generated-src, and the contents of the Top.DefaultConfig.conf file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/vsim/generated-src&#xA;freechips.rocketchip.system.DefaultConfig&#xA;freechips.rocketchip.system.DefaultConfig.0x0.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0x0.1.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0x2000000.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0x40.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.0xc000000.0.regmap.json&#xA;freechips.rocketchip.system.DefaultConfig.anno.json&#xA;freechips.rocketchip.system.DefaultConfig.behav_srams.v&#xA;freechips.rocketchip.system.DefaultConfig.conf&#xA;freechips.rocketchip.system.DefaultConfig.d&#xA;freechips.rocketchip.system.DefaultConfig.dts&#xA;freechips.rocketchip.system.DefaultConfig.fir&#xA;freechips.rocketchip.system.DefaultConfig.graphml&#xA;freechips.rocketchip.system.DefaultConfig.json&#xA;freechips.rocketchip.system.DefaultConfig.memmap.json&#xA;freechips.rocketchip.system.DefaultConfig.plusArgs&#xA;freechips.rocketchip.system.DefaultConfig.rom.conf&#xA;freechips.rocketchip.system.DefaultConfig.v&#xA;TestHarness.anno.json&#xA;$ cat $ROCKETCHIP/vsim/generated-src/*.conf&#xA;name data_arrays_0_ext depth 512 width 256 ports mrw mask_gran 8&#xA;name tag_array_ext depth 64 width 88 ports mrw mask_gran 22&#xA;name tag_array_0_ext depth 64 width 84 ports mrw mask_gran 21&#xA;name data_arrays_0_1_ext depth 512 width 128 ports mrw mask_gran 32&#xA;name mem_ext depth 33554432 width 64 ports mwrite,read mask_gran 8&#xA;name mem_2_ext depth 512 width 64 ports mwrite,read mask_gran 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The conf file contains information for all SRAMs instantiated in the flow. If you take a close look at the $ROCKETCHIP/Makefrag, you will see that during Verilog generation, the build system calls a $(mem_gen) script with the generated configuration file as an argument, which will fill in the Verilog for the SRAMs. Currently, the $(mem_gen) script points to vsim/vlsi_mem_gen, which simply instantiates behavioral SRAMs. You will see those SRAMs being appended at the end of vsim/generated-src/Top.DefaultConfig.v. To target vendor-specific SRAMs, you will need to make necessary changes to vsim/vlsi_mem_gen.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, if you have access to VCS, you can run assembly tests and benchmarks with the following commands (again assuming you have N cores on your host machine):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/vsim&#xA;$ make -jN run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated output looks similar to those generated from the emulator. Look into vsim/output/*.out for the output of the executed assembly tests and benchmarks.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;param&#34;&gt;&lt;/a&gt; How can I parameterize my Rocket chip?&lt;/h2&gt; &#xA;&lt;p&gt;By now, you probably figured out that all generated files have a configuration name attached, e.g. &lt;code&gt;freechips.rocketchip.system.DefaultConfig&lt;/code&gt;. Take a look at &lt;code&gt;src/main/scala/system/Configs.scala&lt;/code&gt;. Search for &lt;code&gt;NSets&lt;/code&gt; and &lt;code&gt;NWays&lt;/code&gt; defined in &lt;code&gt;BaseConfig&lt;/code&gt;. You can change those numbers to get a Rocket core with different cache parameters. For example, by changing L1I, NWays to 4, you will get a 32KB 4-way set-associative L1 instruction cache rather than a 16KB 2-way set-associative L1 instruction cache. Towards the end, you can also find that &lt;code&gt;DefaultSmallConfig&lt;/code&gt; inherits all parameters from &lt;code&gt;BaseConfig&lt;/code&gt; but overrides the same parameters of &lt;code&gt;WithNSmallCores&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now take a look at &lt;code&gt;vsim/Makefile&lt;/code&gt;. Search for the &lt;code&gt;CONFIG&lt;/code&gt; variable. By default, it is set to &lt;code&gt;freechips.rocketchip.system.DefaultConfig&lt;/code&gt;. You can also change the CONFIG variable on the make command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $ROCKETCHIP/vsim&#xA;$ make -jN CONFIG=freechips.rocketchip.system.DefaultSmallConfig run-asm-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, even by defining CONFIG as an environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export CONFIG=freechips.rocketchip.system.DefaultSmallConfig&#xA;$ make -jN run-asm-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This parameterization is one of the many strengths of processor generators written in Chisel, and will be more detailed in a future blog post, so please stay tuned.&lt;/p&gt; &#xA;&lt;p&gt;To override specific configuration items, such as the number of external interrupts, you can create your own Configuration(s) and compose them with Config&#39;s ++ operator&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class WithNExtInterrupts(nExt: Int) extends Config {&#xA;    (site, here, up) =&amp;gt; {&#xA;        case NExtInterrupts =&amp;gt; nExt&#xA;    }&#xA;}&#xA;class MyConfig extends Config (new WithNExtInterrupts(16) ++ new DefaultSmallConfig)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can build as usual with &lt;code&gt;CONFIG=&amp;lt;MyConfigPackage&amp;gt;.MyConfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;debug&#34;&gt;&lt;/a&gt; Debugging with GDB&lt;/h2&gt; &#xA;&lt;h3&gt;1) Generating the Remote Bit-Bang (RBB) Emulator&lt;/h3&gt; &#xA;&lt;p&gt;The objective of this section is to use GNU debugger to debug RISC-V programs running on the emulator in the same fashion as in &lt;a href=&#34;https://github.com/riscv/riscv-isa-sim#debugging-with-gdb&#34;&gt;Spike&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For that we need to add a Remote Bit-Bang client to the emulator. We can do so by extending our Config with JtagDTMSystem, which will add a DebugTransportModuleJTAG to the DUT and connect a SimJTAG module in the Test Harness. This will allow OpenOCD to interface with the emulator, and GDB can interface with OpenOCD. In the following example we add this Config alteration to &lt;code&gt;src/main/scala/system/Configs.scala&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class DefaultConfigRBB extends Config(&#xA;new WithJtagDTMSystem ++ new WithNBigCores(1) ++ new WithCoherentBusTopology ++ new BaseConfig)&#xA;&#xA;class QuadCoreConfigRBB extends Config(&#xA;new WithJtagDTMSystem ++ new WithNBigCores(4) ++ new WithCoherentBusTopology ++ new BaseConfig)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the emulator with &lt;code&gt;DefaultConfigRBB&lt;/code&gt; configuration we use the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rocket-chip$ cd emulator&#xA;emulator$ CONFIG=freechips.rocketchip.system.DefaultConfigRBB make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also build a debug version capable of generating VCD waveforms using the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emulator$ CONFIG=freechips.rocketchip.system.DefaultConfigRBB make debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default the emulator is generated under the name &lt;code&gt;emulator-freechips.rocketchip.system-DefaultConfigRBB&lt;/code&gt; in the first case and &lt;code&gt;emulator-freechips.rocketchip.system-DefaultConfigRBB-debug&lt;/code&gt; in the second.&lt;/p&gt; &#xA;&lt;h3&gt;2) Compiling and executing a custom program using the emulator&lt;/h3&gt; &#xA;&lt;p&gt;We suppose that &lt;code&gt;helloworld&lt;/code&gt; is our program, you can use &lt;code&gt;crt.S&lt;/code&gt;, &lt;code&gt;syscalls.c&lt;/code&gt; and the linker script &lt;code&gt;test.ld&lt;/code&gt; to construct your own program, check examples stated in &lt;a href=&#34;https://github.com/riscv/riscv-tests&#34;&gt;riscv-tests&lt;/a&gt;. Note that &lt;code&gt;test.ld&lt;/code&gt; loads the program at 0x80000000 so you will need to use &lt;code&gt;-mcmodel=medany&lt;/code&gt; otherwise you will get relocation errors. See &lt;a href=&#34;https://www.sifive.com/blog/2017/09/11/all-aboard-part-4-risc-v-code-models/&#34;&gt;All Aboard, Part 4: The RISC-V Code Models&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;In our case we will use the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;char text[] = &#34;Vafgehpgvba frgf jnag gb or serr!&#34;;&#xA;&#xA;// Don&#39;t use the stack, because sp isn&#39;t set up.&#xA;volatile int wait = 1;&#xA;&#xA;int main()&#xA;{&#xA;    while (wait)&#xA;        ;&#xA;&#xA;    // Doesn&#39;t actually go on the stack, because there are lots of GPRs.&#xA;    int i = 0;&#xA;    while (text[i]) {&#xA;        char lower = text[i] | 32;&#xA;        if (lower &amp;gt;= &#39;a&#39; &amp;amp;&amp;amp; lower &amp;lt;= &#39;m&#39;)&#xA;            text[i] += 13;&#xA;        else if (lower &amp;gt; &#39;m&#39; &amp;amp;&amp;amp; lower &amp;lt;= &#39;z&#39;)&#xA;            text[i] -= 13;&#xA;        i++;&#xA;    }&#xA;&#xA;    while (!wait)&#xA;        ;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First we can test if your program executes well in the simple version of emulator before moving to debugging in step 3 :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./emulator-freechips.rocketchip.system-DefaultConfig helloworld &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional verbose information (clock cycle, pc, instruction being executed) can be printed using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./emulator-freechips.rocketchip.system-DefaultConfig +verbose helloworld 2&amp;gt;&amp;amp;1 | spike-dasm &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;VCD output files can be obtained using the &lt;code&gt;-debug&lt;/code&gt; version of the emulator and are specified using &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--vcd=FILE&lt;/code&gt; arguments. A detailed log file of all executed instructions can also be obtained from the emulator, this is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./emulator-freechips.rocketchip.system-DefaultConfig-debug +verbose -v output.vcd  helloworld 2&amp;gt;&amp;amp;1 | spike-dasm &amp;gt; output.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that generated VCD waveforms and execution log files can be very voluminous depending on the size of the .elf file (i.e. code size + debugging symbols).&lt;/p&gt; &#xA;&lt;p&gt;Please note also that the time it takes the emulator to load your program depends on executable size. Stripping the .elf executable will unsurprisingly make it run faster. For this you can use &lt;code&gt;$RISCV/bin/riscv64-unknown-elf-strip&lt;/code&gt; tool to reduce the size. This is good for accelerating your simulation but not for debugging. Keep in mind that the HTIF communication interface between our system and the emulator relies on &lt;code&gt;tohost&lt;/code&gt; and &lt;code&gt;fromhost&lt;/code&gt; symbols to communicate. This is why you may get the following error when you try to run a totally stripped executable on the emulator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./emulator-freechips.rocketchip.system-DefaultConfig totally-stripped-helloworld &#xA;This emulator compiled with JTAG Remote Bitbang client. To enable, use +jtag_rbb_enable=1.&#xA;Listening on port 46529&#xA;warning: tohost and fromhost symbols not in ELF; can&#39;t communicate with target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To resolve this, we need to strip all the .elf executable but keep &lt;code&gt;tohost&lt;/code&gt; and &lt;code&gt;fromhost&lt;/code&gt; symbols using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$riscv64-unknown-elf-strip -s -Kfromhost -Ktohost helloworld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More details on the GNU strip tool can be found &lt;a href=&#34;https://www.thegeekstuff.com/2012/09/strip-command-examples/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The interest of this step is to make sure your program executes well. To perform debugging you need the original unstripped version, as explained in step 3.&lt;/p&gt; &#xA;&lt;h3&gt;3) Launch the emulator&lt;/h3&gt; &#xA;&lt;p&gt;First, do not forget to compile your program with &lt;code&gt;-g -Og&lt;/code&gt; flags to provide debugging support as explained &lt;a href=&#34;https://github.com/riscv/riscv-isa-sim#debugging-with-gdb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We can then launch the Remote Bit-Bang enabled emulator with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./emulator-freechips.rocketchip.system-DefaultConfigRBB +jtag_rbb_enable=1 --rbb-port=9823 helloworld&#xA;This emulator compiled with JTAG Remote Bitbang client. To enable, use +jtag_rbb_enable=1.&#xA;Listening on port 9823&#xA;Attempting to accept client socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;emulator-freechips.rocketchip.system-DefaultConfigRBB-debug&lt;/code&gt; version instead if you would like to generate VCD waveforms.&lt;/p&gt; &#xA;&lt;p&gt;Please note that if the argument &lt;code&gt;--rbb-port&lt;/code&gt; is not passed, a default free TCP port on your computer will be chosen randomly.&lt;/p&gt; &#xA;&lt;p&gt;Please note also that when debugging with GDB, the .elf file is not actually loaded by the FESVR. In contrast with Spike, it must be loaded from GDB as explained in step 5. So the &lt;code&gt;helloworld&lt;/code&gt; argument may be replaced by any dummy name.&lt;/p&gt; &#xA;&lt;h3&gt;4) Launch OpenOCD&lt;/h3&gt; &#xA;&lt;p&gt;You will need a RISC-V Enabled OpenOCD binary. This is installed with rocket-tools in &lt;code&gt;$(RISCV)/bin/openocd&lt;/code&gt;, or can be compiled manually from riscv-openocd. OpenOCD requires a configuration file, in which we define the RBB port we will use, which is in our case &lt;code&gt;9823&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat cemulator.cfg &#xA;interface remote_bitbang&#xA;remote_bitbang_host localhost&#xA;remote_bitbang_port 9823&#xA;&#xA;set _CHIPNAME riscv&#xA;jtag newtap $_CHIPNAME cpu -irlen 5&#xA;&#xA;set _TARGETNAME $_CHIPNAME.cpu&#xA;target create $_TARGETNAME riscv -chain-position $_TARGETNAME&#xA;&#xA;gdb_report_data_abort enable&#xA;&#xA;init&#xA;halt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then we launch OpenOCD in another terminal using the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$(RISCV)/bin/openocd -f ./cemulator.cfg&#xA;Open On-Chip Debugger 0.10.0+dev-00112-g3c1c6e0 (2018-04-12-10:40)&#xA;Licensed under GNU GPL v2&#xA;For bug reports, read&#xA;http://openocd.org/doc/doxygen/bugs.html&#xA;Warn : Adapter driver &#39;remote_bitbang&#39; did not declare which transports it allows; assuming legacy JTAG-only&#xA;Info : only one transport option; autoselect &#39;jtag&#39;&#xA;Info : Initializing remote_bitbang driver&#xA;Info : Connecting to localhost:9823&#xA;Info : remote_bitbang driver initialized&#xA;Info : This adapter doesn&#39;t support configurable speed&#xA;Info : JTAG tap: riscv.cpu tap/device found: 0x00000001 (mfg: 0x000 (&amp;lt;invalid&amp;gt;), part: 0x0000, ver: 0x0)&#xA;Info : datacount=2 progbufsize=16&#xA;Info : Disabling abstract command reads from CSRs.&#xA;Info : Disabling abstract command writes to CSRs.&#xA;Info : [0] Found 1 triggers&#xA;Info : Examined RISC-V core; found 1 harts&#xA;Info :  hart 0: XLEN=64, 1 triggers&#xA;Info : Listening on port 3333 for gdb connections&#xA;Info : Listening on port 6666 for tcl connections&#xA;Info : Listening on port 4444 for telnet connections&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;-d&lt;/code&gt; flag can be added to the command to show further debug information.&lt;/p&gt; &#xA;&lt;h3&gt;5) Launch GDB&lt;/h3&gt; &#xA;&lt;p&gt;In another terminal launch GDB and point to the elf file you would like to load then run it with the debugger (in this example, &lt;code&gt;helloworld&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ riscv64-unknown-elf-gdb helloworld&#xA;GNU gdb (GDB) 8.0.50.20170724-git&#xA;Copyright (C) 2017 Free Software Foundation, Inc.&#xA;License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;&#xA;This is free software: you are free to change and redistribute it.&#xA;There is NO WARRANTY, to the extent permitted by law.  Type &#34;show copying&#34;&#xA;and &#34;show warranty&#34; for details.&#xA;This GDB was configured as &#34;--host=x86_64-pc-linux-gnu --target=riscv64-unknown-elf&#34;.&#xA;Type &#34;show configuration&#34; for configuration details.&#xA;For bug reporting instructions, please see:&#xA;&amp;lt;http://www.gnu.org/software/gdb/bugs/&amp;gt;.&#xA;Find the GDB manual and other documentation resources online at:&#xA;&amp;lt;http://www.gnu.org/software/gdb/documentation/&amp;gt;.&#xA;For help, type &#34;help&#34;.&#xA;Type &#34;apropos word&#34; to search for commands related to &#34;word&#34;...&#xA;Reading symbols from ./proj1.out...done.&#xA;(gdb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compared to Spike, the C Emulator is very slow, so several problems may be encountered due to timeouts between issuing commands and response from the emulator. To solve this problem, we increase the timeout with the GDB &lt;code&gt;set remotetimeout&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;After that we load our program by performing a &lt;code&gt;load&lt;/code&gt; command. This automatically sets the &lt;code&gt;$PC&lt;/code&gt; to the &lt;code&gt;_start&lt;/code&gt; symbol in our .elf file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(gdb) set remotetimeout 2000&#xA;(gdb) target remote localhost:3333&#xA;Remote debugging using localhost:3333&#xA;0x0000000000010050 in ?? ()&#xA;(gdb) load&#xA;Loading section .text.init, size 0x2cc lma 0x80000000&#xA;Loading section .tohost, size 0x48 lma 0x80001000&#xA;Loading section .text, size 0x98c lma 0x80001048&#xA;Loading section .rodata, size 0x158 lma 0x800019d4&#xA;Loading section .rodata.str1.8, size 0x20 lma 0x80001b30&#xA;Loading section .data, size 0x22 lma 0x80001b50&#xA;Loading section .sdata, size 0x4 lma 0x80001b74&#xA;Start address 0x80000000, load size 3646&#xA;Transfer rate: 40 bytes/sec, 520 bytes/write.&#xA;(gdb) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can proceed as with Spike, debugging works in a similar way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(gdb) print wait&#xA;$1 = 1&#xA;(gdb) print wait=0&#xA;$2 = 0&#xA;(gdb) print text&#xA;$3 = &#34;Vafgehpgvba frgf jnag gb or serr!&#34;&#xA;(gdb) c&#xA;Continuing.&#xA;&#xA;^C&#xA;Program received signal SIGINT, Interrupt.&#xA;main (argc=0, argv=&amp;lt;optimized out&amp;gt;) at src/main.c:33&#xA;33&#x9;    while (!wait)&#xA;(gdb) print wait&#xA;$4 = 0&#xA;(gdb) print text&#xA;$5 = &#34;Instruction sets want to be free!&#34;&#xA;(gdb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further information about GDB debugging is available &lt;a href=&#34;https://sourceware.org/gdb/onlinedocs/gdb/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://sourceware.org/gdb/onlinedocs/gdb/Remote-Debugging.html#Remote-Debugging&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;ide&#34;&gt;&lt;/a&gt; Building Rocket Chip with an IDE&lt;/h2&gt; &#xA;&lt;p&gt;The Rocket Chip Scala build uses the standard Scala build tool SBT. IDEs like &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ&lt;/a&gt; and &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt; are popular in the Scala community and work with Rocket Chip. To use one of these IDEs, there is one minor peculiarity of the Rocket Chip build that must be addressed.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;contributors&#34;&gt;&lt;/a&gt; Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Contributing guidelines can be found in &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/rocket-chip/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A list of contributors can be found &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip/graphs/contributors&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;attribution&#34;&gt;&lt;/a&gt; Attribution&lt;/h2&gt; &#xA;&lt;p&gt;If used for research, please cite Rocket Chip by the technical report:&lt;/p&gt; &#xA;&lt;p&gt;Krste Asanović, Rimas Avižienis, Jonathan Bachrach, Scott Beamer, David Biancolin, Christopher Celio, Henry Cook, Palmer Dabbelt, John Hauser, Adam Izraelevitz, Sagar Karandikar, Benjamin Keller, Donggyu Kim, John Koenig, Yunsup Lee, Eric Love, Martin Maas, Albert Magyar, Howard Mao, Miquel Moreto, Albert Ou, David Patterson, Brian Richards, Colin Schmidt, Stephen Twigg, Huy Vo, and Andrew Waterman, &lt;em&gt;&lt;a href=&#34;http://www.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-17.html&#34;&gt;The Rocket Chip Generator&lt;/a&gt;&lt;/em&gt;, Technical Report UCB/EECS-2016-17, EECS Department, University of California, Berkeley, April 2016&lt;/p&gt;</summary>
  </entry>
</feed>