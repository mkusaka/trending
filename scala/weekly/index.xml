<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-21T02:05:23Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zio/zio-schema</title>
    <updated>2024-01-21T02:05:23Z</updated>
    <id>tag:github.com,2024-01-21:/zio/zio-schema</id>
    <link href="https://github.com/zio/zio-schema" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compositional, type-safe schema definitions, which enable auto-derivation of codecs and migrations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZIO Schema&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zio/zio-schema&#34;&gt;ZIO Schema&lt;/a&gt; is a &lt;a href=&#34;https://zio.dev&#34;&gt;ZIO&lt;/a&gt;-based library for modeling the schema of data structures as first-class values.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zio/zio/wiki/Project-Stages&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project%20Stage-Development-green.svg?sanitize=true&#34; alt=&#34;Development&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/zio/zio-schema/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Badge&#34;&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-schema_2.13/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-schema_2.13.svg?label=Sonatype%20Release&#34; alt=&#34;Sonatype Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-schema_2.13/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-schema_2.13.svg?label=Sonatype%20Snapshot&#34; alt=&#34;Sonatype Snapshots&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/dev.zio/zio-schema-docs_2.13&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/dev.zio/zio-schema-docs_2.13/javadoc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zio/zio-schema&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/zio/zio-schema?style=social&#34; alt=&#34;ZIO Schema&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;ZIO Schema helps us to solve some of the most common problems in distributed computing, such as serialization, deserialization, and data migration.&lt;/p&gt; &#xA;&lt;p&gt;It turns a compiled-time construct (the type of a data structure) into a runtime construct (a value that can be read, manipulated, and composed at runtime). A schema is a structure of a data type. ZIO Schema reifies the concept of structure for data types. It makes a high-level description of any data type and makes them first-class values.&lt;/p&gt; &#xA;&lt;p&gt;Creating a schema for a data type helps us to write codecs for that data type. So this library can be a host of functionalities useful for writing codecs and protocols like JSON, Protobuf, CSV, and so forth.&lt;/p&gt; &#xA;&lt;h2&gt;What Problems Does ZIO Schema Solve?&lt;/h2&gt; &#xA;&lt;p&gt;With schema descriptions that can be automatically derived for case classes and sealed traits, &lt;em&gt;ZIO Schema&lt;/em&gt; will be going to provide powerful features for free:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Metaprogramming without macros, reflection, or complicated implicit derivations. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Creating serialization and deserialization codecs for any supported protocol (JSON, Protobuf, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;Deriving standard type classes (&lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Ordering&lt;/code&gt;, etc.) from the structure of the data&lt;/li&gt; &#xA;   &lt;li&gt;Default values for data types&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automate ETL (Extract, Transform, Load) pipelines &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Diffing: diffing between two values of the same type&lt;/li&gt; &#xA;   &lt;li&gt;Patching: applying a diff to a value to update it&lt;/li&gt; &#xA;   &lt;li&gt;Migration: migrating values from one type to another&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Computations as data: Not only we can turn types into values, but we can also turn computations into values. This opens up a whole new world of possibilities concerning distributed computing.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When our data structures need to be serialized, deserialized, persisted, or transported across the wire, then &lt;em&gt;ZIO Schema&lt;/em&gt; lets us focus on data modeling and automatically tackle all the low-level, messy details for us.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;ZIO Schema&lt;/em&gt; is used by a growing number of ZIO libraries, including &lt;a href=&#34;https://zio.dev/zio-flow&#34;&gt;ZIO Flow&lt;/a&gt;, &lt;a href=&#34;https://zio-redis&#34;&gt;ZIO Redis&lt;/a&gt;, &lt;a href=&#34;https://zio.dev/zio-sql&#34;&gt;ZIO SQL&lt;/a&gt; and &lt;a href=&#34;https://zio.dev/zio-dynamodb&#34;&gt;ZIO DynamoDB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;In order to use this library, we need to add the following lines in our &lt;code&gt;build.sbt&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-schema&#34;          % &#34;0.4.17&#34;&#xA;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-schema-avro&#34;     % &#34;0.4.17&#34;&#xA;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-schema-bson&#34;     % &#34;0.4.17&#34;&#xA;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-schema-json&#34;     % &#34;0.4.17&#34;&#xA;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-schema-msg-pack&#34; % &#34;0.4.17&#34;&#xA;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-schema-protobuf&#34; % &#34;0.4.17&#34;&#xA;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-schema-thrift&#34;   % &#34;0.4.17&#34;&#xA;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-schema-zio-test&#34; % &#34;0.4.17&#34;&#xA;&#xA;// Required for the automatic generic derivation of schemas&#xA;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-schema-derivation&#34; % &#34;0.4.17&#34;&#xA;libraryDependencies += &#34;org.scala-lang&#34; % &#34;scala-reflect&#34;  % scalaVersion.value % &#34;provided&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;In this simple example first, we create a schema for &lt;code&gt;Person&lt;/code&gt; and then run the &lt;em&gt;diff&lt;/em&gt; operation on two instances of the &lt;code&gt;Person&lt;/code&gt; data type, and finally, we encode a Person instance using &lt;em&gt;Protobuf&lt;/em&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import zio._&#xA;import zio.stream._&#xA;import zio.schema.codec.{BinaryCodec, ProtobufCodec}&#xA;import zio.schema.{DeriveSchema, Schema}&#xA;&#xA;import java.io.IOException&#xA;&#xA;final case class Person(name: String, age: Int)&#xA;&#xA;object Person {&#xA;  implicit val schema: Schema[Person]    = DeriveSchema.gen&#xA;  val protobufCodec: BinaryCodec[Person] = ProtobufCodec.protobufCodec&#xA;}&#xA;&#xA;object Main extends ZIOAppDefault {&#xA;  def run: ZIO[Any, IOException, Unit] =&#xA;    ZStream&#xA;      .succeed(Person(&#34;John&#34;, 43))&#xA;      .via(Person.protobufCodec.streamEncoder)&#xA;      .runCollect&#xA;      .flatMap(x =&amp;gt;&#xA;        Console.printLine(s&#34;Encoded data with protobuf codec: ${toHex(x)}&#34;)&#xA;      )&#xA;&#xA;  def toHex(chunk: Chunk[Byte]): String =&#xA;    chunk.map(&#34;%02X&#34;.format(_)).mkString&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the output of running the above program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Encoded data with protobuf codec: 0A044A6F686E102B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GfNiDaL5aIM&#34;&gt;Zymposium - ZIO Schema&lt;/a&gt; by John A. De Goes, Adam Fraser, and Kit Langton (May 2021)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lJziseYKvHo&amp;amp;t=481s&#34;&gt;ZIO SCHEMA: A Toolkit For Functional Distributed Computing&lt;/a&gt; by Dan Harris (Functional Scala 2021)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ClePN4P9_pg&#34;&gt;Creating Declarative Query Plans With ZIO Schema&lt;/a&gt; by Dan Harris (ZIO World 2022)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oRLkb6mqvVM&#34;&gt;Describing Data...with free applicative functors (and more)&lt;/a&gt; by Kris Nuttycombe (Scala World) on the idea behind the &lt;a href=&#34;https://github.com/nuttycom/xenomorph&#34;&gt;xenomorph&lt;/a&gt; library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Learn more on the &lt;a href=&#34;https://zio.dev/zio-schema&#34;&gt;ZIO Schema homepage&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For the general guidelines, see ZIO &lt;a href=&#34;https://zio.dev/contributor-guidelines&#34;&gt;contributor&#39;s guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;TL;DR&lt;/h4&gt; &#xA;&lt;p&gt;Before you submit a PR, make sure your tests are passing, and that the code is properly formatted&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt prepare&#xA;&#xA;sbt test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://zio.dev/code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Come chat with us on &lt;a href=&#34;https://discord.gg/2ccFBr4&#34; title=&#34;Discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629491597070827530?logo=discord&#34; alt=&#34;Badge-Discord&#34; title=&#34;chat on discord&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zio/zio-schema/main/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>scala-native/scala-native</title>
    <updated>2024-01-21T02:05:23Z</updated>
    <id>tag:github.com,2024-01-21:/scala-native/scala-native</id>
    <link href="https://github.com/scala-native/scala-native" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Your favorite language gets closer to bare metal.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scala Native&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/scala-native/scala-native/actions/workflows/run-tests-linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Posix Status&#34;&gt; &lt;img src=&#34;https://github.com/scala-native/scala-native/actions/workflows/run-tests-macos.yml/badge.svg?sanitize=true&#34; alt=&#34;MacOS Status&#34;&gt; &lt;img src=&#34;https://github.com/scala-native/scala-native/actions/workflows/run-tests-windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows Status&#34;&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/org.scala-native/tools_2.12&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.scala-native/tools_2.12.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Scala Native is an optimizing ahead-of-time compiler and lightweight managed runtime designed specifically for Scala.&lt;/p&gt; &#xA;&lt;h2&gt;Chat and Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/scala&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/632150470000902164.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=404244&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Getting Started and full documentation can be found at &lt;a href=&#34;https://www.scala-native.org/&#34;&gt;https://www.scala-native.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Online Scaladoc&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://javadoc.io/doc/org.scala-native/nativelib_native0.4_3&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/org.scala-native/nativelib_native0.4_3/javadoc.svg?label=nativelib&#34; alt=&#34;Scaladoc nativelib&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/org.scala-native/javalib_native0.4_2.13&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/org.scala-native/javalib_native0.4_2.13/javadoc.svg?label=javalib&#34; alt=&#34;Scaladoc javalib&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/org.scala-native/clib_native0.4_3&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/org.scala-native/clib_native0.4_3/javadoc.svg?label=clib&#34; alt=&#34;Scaladoc clib&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/org.scala-native/posixlib_native0.4_3&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/org.scala-native/posixlib_native0.4_3/javadoc.svg?label=posixlib&#34; alt=&#34;Scaladoc posixlib&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/org.scala-native/windowslib_native0.4_3&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/org.scala-native/windowslib_native0.4_3/javadoc.svg?label=windowslib&#34; alt=&#34;Scaladoc windowslib&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Scala Native is distributed under the Apache License. &lt;a href=&#34;https://github.com/scala-native/scala-native/raw/main/LICENSE.md&#34;&gt;See LICENSE.md for details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.epfl.ch/en/&#34;&gt;&lt;img src=&#34;https://www.epfl.ch/wp/5.5/wp-content/themes/wp-theme-2018/assets/svg/epfl-logo.svg?refresh=now&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.epfl.ch/en/&#34;&gt;The École polytechnique fédérale de Lausanne (EPFL)&lt;/a&gt; and &lt;a href=&#34;https://www.epfl.ch/labs/lamp/&#34;&gt;LAMP&lt;/a&gt; are funding the development of Scala Native as part of Martin Odersky&#39;s research program for &lt;a href=&#34;https://www.slideshare.net/Odersky/capabilities-for-resources-and-effects-252161040&#34;&gt;Capatibilies for Resources and Effects (Caprese)&lt;/a&gt; in Scala.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://virtuslab.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VirtusLab/scala-cli/main/website/static/img/vl_logo_small.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://virtuslab.com/&#34;&gt;VirtusLab&lt;/a&gt; sponsors Scala Native by providing a full-time engineer designated to the maintenance and future development of Scala Native.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scala-native.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/scala-native/scala-native/main/docs/_static/logo.png&#34; width=&#34;100&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scala-native.org/&#34;&gt;Scala Native&lt;/a&gt; is also powered by the efforts of its open-source community. Check out the list of &lt;a href=&#34;https://github.com/scala-native/scala-native/graphs/contributors&#34;&gt;contributors&lt;/a&gt; to this project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Dinduks/play-download-accelerator</title>
    <updated>2024-01-21T02:05:23Z</updated>
    <id>tag:github.com,2024-01-21:/Dinduks/play-download-accelerator</id>
    <link href="https://github.com/Dinduks/play-download-accelerator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A dummy app I did while trying to learn actors, iteratees and reactive thingies&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;This is your new Play 2.0 application&lt;/h1&gt; &#xA;&lt;p&gt;This file will be packaged with your application, when using &lt;code&gt;play dist&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>