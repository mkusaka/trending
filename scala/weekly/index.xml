<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T02:03:37Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Netflix/osstracker</title>
    <updated>2023-02-26T02:03:37Z</updated>
    <id>tag:github.com,2023-02-26:/Netflix/osstracker</id>
    <link href="https://github.com/Netflix/osstracker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Github organization OSS metrics collector and metrics dashboard&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OSS Tracker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Netflix/osstracker&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Netflix/osstracker.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/osslifecycle/Netflix/osstracker.svg?sanitize=true&#34; alt=&#34;NetflixOSS Lifecycle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OSS Tracker is an application that collects information about a Github organization and aggregates the data across all projects within that organization into a single user interface to be used by various roles within the owning organization.&lt;/p&gt; &#xA;&lt;p&gt;For the community manager, all repositories are listed and metrics are combined for the organization as a whole. A community manager can also organize projects into functional areas and appoint shepherds of these areas to assign management and engineering leads.&lt;/p&gt; &#xA;&lt;p&gt;The shepherds of each functional area can not only assign and maintain leads for each project, but also view aggregated metrics for their area.&lt;/p&gt; &#xA;&lt;p&gt;For individual owners, the OSS tracker gives a daily summary as well as historical information on key repository metrics such as open issues and pull requests, days since last commit, and average time to resolve issues and pull requests.&lt;/p&gt; &#xA;&lt;p&gt;OSS Tracker works by running multiple analysis jobs as part of osstracer-scraper periodically. These jobs populate a project ownership database as well as a time series project statistics database. OSS Tracker then exposes a web application (osstracker-console) that gives visibility into these databases as well as access to control ownership and categorization of each project. In order to decrease the need for advanced visualization, much of the time series data graphing leverages kibana on top of elasticsearch.&lt;/p&gt; &#xA;&lt;h1&gt;More Info&lt;/h1&gt; &#xA;&lt;p&gt;You can see more about OSS Tracker from our meetup &lt;a href=&#34;https://www.youtube.com/watch?v=5s-SS_aXoi0&#34;&gt;video&lt;/a&gt; and &lt;a href=&#34;http://www.slideshare.net/aspyker/netflix-open-source-meetup-season-4-episode-1&#34;&gt;slides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Deployment&lt;/h1&gt; &#xA;&lt;p&gt;For a sample deployment of the OSS Tracker using Terraform + Ansible, you can refer to &lt;a href=&#34;https://github.com/RestComm/netflix-oss-tracker-infra&#34;&gt;this project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Netflix/osstracker.svg?sanitize=true&#34; alt=&#34;Apache 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LICENSE&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2016 Netflix, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>davidillsley/mongomacros</title>
    <updated>2023-02-26T02:03:37Z</updated>
    <id>tag:github.com,2023-02-26:/davidillsley/mongomacros</id>
    <link href="https://github.com/davidillsley/mongomacros" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Experimentation with scala macros and mongo&lt;/p&gt; &#xA;&lt;p&gt;The Macros are in macros/ and the code which uses them in core/ as macros and their users have to be in separate compilation units&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/sql-spark-connector</title>
    <updated>2023-02-26T02:03:37Z</updated>
    <id>tag:github.com,2023-02-26:/microsoft/sql-spark-connector</id>
    <link href="https://github.com/microsoft/sql-spark-connector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Spark Connector for SQL Server and Azure SQL&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/microsoft/sql-spark-connector/master/sql-spark-connector-icon.svg?sanitize=true&#34; alt=&#34;Apache Spark Connector for SQL Server and Azure SQL&#34; width=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Apache Spark Connector for SQL Server and Azure SQL&lt;/h1&gt; &#xA;&lt;p&gt;Born out of Microsoftâ€™s SQL Server Big Data Clusters investments, the Apache Spark Connector for SQL Server and Azure SQL is a high-performance connector that enables you to use transactional data in big data analytics and persists results for ad-hoc queries or reporting. The connector allows you to use any SQL database, on-premises or in the cloud, as an input data source or output data sink for Spark jobs.&lt;/p&gt; &#xA;&lt;p&gt;This library contains the source code for the Apache Spark Connector for SQL Server and Azure SQL.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spark.apache.org/&#34;&gt;Apache Spark&lt;/a&gt; is a unified analytics engine for large-scale data processing.&lt;/p&gt; &#xA;&lt;p&gt;There are three version sets of the connector available through Maven, a 2.4.x, a 3.0.x and a 3.1.x compatible version. All versions can be found &lt;a href=&#34;https://search.maven.org/search?q=spark-mssql-connector&#34;&gt;here&lt;/a&gt; and can be imported using the coordinates below:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Connector&lt;/th&gt; &#xA;   &lt;th&gt;Maven Coordinate&lt;/th&gt; &#xA;   &lt;th&gt;Scala Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spark 2.4.x compatible connector&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;com.microsoft.azure:spark-mssql-connector:1.0.2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spark 3.0.x compatible connector&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;com.microsoft.azure:spark-mssql-connector_2.12:1.1.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spark 3.1.x compatible connector&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;com.microsoft.azure:spark-mssql-connector_2.12:1.2.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spark 3.3.x compatible connector&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;com.microsoft.azure:spark-mssql-connector_2.12:1.3.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Current Releases&lt;/h2&gt; &#xA;&lt;p&gt;The latest Spark 2.4.x compatible connector is on v1.0.2.&lt;/p&gt; &#xA;&lt;p&gt;The latest Spark 3.0.x compatible connector is on v1.1.0.&lt;/p&gt; &#xA;&lt;p&gt;The latest Spark 3.1.x compatible connector is on v1.2.0.&lt;/p&gt; &#xA;&lt;p&gt;For main changes from previous releases and known issues please refer to &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/sql-spark-connector/master/docs/CHANGELIST.md&#34;&gt;CHANGELIST&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for all Spark bindings (Scala, Python, R)&lt;/li&gt; &#xA; &lt;li&gt;Basic authentication and Active Directory (AD) Key Tab support&lt;/li&gt; &#xA; &lt;li&gt;Reordered DataFrame write support&lt;/li&gt; &#xA; &lt;li&gt;Support for write to SQL Server Single instance and Data Pool in SQL Server Big Data Clusters&lt;/li&gt; &#xA; &lt;li&gt;Reliable connector support for Sql Server Single Instance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Versions Supported&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apache Spark&lt;/td&gt; &#xA;   &lt;td&gt;2.4.x, 3.0.x, 3.1.x, 3.3.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scala&lt;/td&gt; &#xA;   &lt;td&gt;2.11, 2.12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft JDBC Driver for SQL Server&lt;/td&gt; &#xA;   &lt;td&gt;8.4.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft SQL Server&lt;/td&gt; &#xA;   &lt;td&gt;SQL Server 2008 or later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Azure SQL Databases&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Azure Synapse (Azure SQL DW) use is not tested with this connector. While it may work, there may be unintended consequences.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supported Options&lt;/h3&gt; &#xA;&lt;p&gt;The Apache Spark Connector for SQL Server and Azure SQL supports the options defined here: &lt;a href=&#34;https://spark.apache.org/docs/latest/sql-data-sources-jdbc.html&#34;&gt;SQL DataSource JDBC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In addition following options are supported&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;reliabilityLevel&lt;/td&gt; &#xA;   &lt;td&gt;&#34;BEST_EFFORT&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;BEST_EFFORT&#34; or &#34;NO_DUPLICATES&#34;. &#34;NO_DUPLICATES&#34; implements an reliable insert in executor restart scenarios&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dataPoolDataSource&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;none implies the value is not set and the connector should write to SQl Server Single Instance. Set this value to data source name to write a Data Pool Table in Big Data Cluster&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isolationLevel&lt;/td&gt; &#xA;   &lt;td&gt;&#34;READ_COMMITTED&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Specify the isolation level&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tableLock&lt;/td&gt; &#xA;   &lt;td&gt;&#34;false&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Implements an insert with TABLOCK option to improve write performance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;schemaCheckEnabled&lt;/td&gt; &#xA;   &lt;td&gt;&#34;true&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Disables strict dataframe and sql table schema check when set to false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Other &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/connect/jdbc/using-bulk-copy-with-the-jdbc-driver?view=sql-server-2017#sqlserverbulkcopyoptions&#34;&gt;Bulk api options&lt;/a&gt; can be set as options on the dataframe and will be passed to bulkcopy apis on write&lt;/p&gt; &#xA;&lt;h2&gt;Performance comparison&lt;/h2&gt; &#xA;&lt;p&gt;Apache Spark Connector for SQL Server and Azure SQL is up to 15x faster than generic JDBC connector for writing to SQL Server. Note performance characteristics vary on type, volume of data, options used and may show run to run variations. The following performance results are the time taken to overwrite a sql table with 143.9M rows in a spark dataframe. The spark dataframe is constructed by reading store_sales HDFS table generated using &lt;a href=&#34;https://github.com/databricks/spark-sql-perf&#34;&gt;spark TPCDS Benchmark&lt;/a&gt;. Time to read store_sales to dataframe is excluded. The results are averaged over 3 runs. &lt;em&gt;Note: The following results were achieved using the Apache Spark 2.4.5 compatible connector. These numbers are not a guarantee of performance.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Connector Type&lt;/th&gt; &#xA;   &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Time to write&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JDBCConnector&lt;/td&gt; &#xA;   &lt;td&gt;Default&lt;/td&gt; &#xA;   &lt;td&gt;Generic JDBC connector with default options&lt;/td&gt; &#xA;   &lt;td&gt;1385s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sql-spark-connector&lt;/td&gt; &#xA;   &lt;td&gt;BEST_EFFORT&lt;/td&gt; &#xA;   &lt;td&gt;Best effort sql-spark-connector with default options&lt;/td&gt; &#xA;   &lt;td&gt;580s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sql-spark-connector&lt;/td&gt; &#xA;   &lt;td&gt;NO_DUPLICATES&lt;/td&gt; &#xA;   &lt;td&gt;Reliable sql-spark-connector&lt;/td&gt; &#xA;   &lt;td&gt;709s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sql-spark-connector&lt;/td&gt; &#xA;   &lt;td&gt;BEST_EFFORT + tabLock=true&lt;/td&gt; &#xA;   &lt;td&gt;Best effort sql-spark-connector with table lock enabled&lt;/td&gt; &#xA;   &lt;td&gt;72s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sql-spark-connector&lt;/td&gt; &#xA;   &lt;td&gt;NO_DUPLICATES + tabLock=true&lt;/td&gt; &#xA;   &lt;td&gt;Reliable sql-spark-connector with table lock enabled&lt;/td&gt; &#xA;   &lt;td&gt;198s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Config&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spark config : &lt;code&gt;num_executors = 20&lt;/code&gt;, &lt;code&gt;executor_memory = &#39;1664m&#39;&lt;/code&gt;, &lt;code&gt;executor_cores = 2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Data Gen config : &lt;code&gt;scale_factor=50&lt;/code&gt;, &lt;code&gt;partitioned_tables=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Data file Store_sales with number of of rows 143,997,590&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Environment&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/big-data-cluster/release-notes-big-data-cluster?view=sql-server-ver15&#34;&gt;SQL Server Big Data Cluster&lt;/a&gt; CU5&lt;/li&gt; &#xA; &lt;li&gt;Master + 6 nodes&lt;/li&gt; &#xA; &lt;li&gt;Each node gen 5 server, 512GB Ram, 4TB NVM per node, NIC 10GB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Commonly Faced Issues&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;java.lang.NoClassDefFoundError: com/microsoft/aad/adal4j/AuthenticationException&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This issue arises from using an older version of the mssql driver (which is now included in this connector) in your hadoop environment. If you are coming from using the previous Azure SQL Connector and have manually installed drivers onto that cluster for AAD compatibility, you will need to remove those drivers.&lt;/p&gt; &#xA;&lt;p&gt;Steps to fix the issue:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you are using a generic Hadoop environment, check and remove the mssql jar: &lt;code&gt;rm $HADOOP_HOME/share/hadoop/yarn/lib/mssql-jdbc-6.2.1.jre7.jar&lt;/code&gt;. If you are using Databricks, add a global or cluster init script to remove old versions of the mssql driver from the &lt;code&gt;/databricks/jars&lt;/code&gt; folder, or add this line to an existing script: &lt;code&gt;rm /databricks/jars/*mssql*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;adal4j&lt;/code&gt; and &lt;code&gt;mssql&lt;/code&gt; packages, I used Maven, but anyway should work. DO NOT install the SQL spark connector this way.&lt;/li&gt; &#xA; &lt;li&gt;Add the driver class to your connection configuration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;connectionProperties = {&#xA;  &#34;Driver&#34;: &#34;com.microsoft.sqlserver.jdbc.SQLServerDriver&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information and explanation, visit the closed &lt;a href=&#34;https://github.com/microsoft/sql-spark-connector/issues/26&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;The Apache Spark Connector for SQL Server and Azure SQL is based on the Spark DataSourceV1 API and SQL Server Bulk API and uses the same interface as the built-in JDBC Spark-SQL connector. This allows you to easily integrate the connector and migrate your existing Spark jobs by simply updating the format parameter with &lt;code&gt;com.microsoft.sqlserver.jdbc.spark&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To include the connector in your projects download this repository and build the jar using SBT.&lt;/p&gt; &#xA;&lt;h3&gt;Migrating from Legacy Azure SQL Connector for Spark&lt;/h3&gt; &#xA;&lt;h4&gt;Receiving &lt;code&gt;java.lang.NoClassDefFoundError&lt;/code&gt; when trying to use the new connector with Azure Databricks?&lt;/h4&gt; &#xA;&lt;p&gt;If you are migrating from the previous Azure SQL Connector for Spark and have manually installed drivers onto that cluster for AAD compatibility, you will most likely need to remove those custom drivers, restore the previous drivers that ship by default with Databricks, uninstall the previous connector, and restart your cluster. You may be better off spinning up a new cluster.&lt;/p&gt; &#xA;&lt;p&gt;With this new connector, you should be able to simply install onto a cluster (new or existing cluster that hasn&#39;t had its drivers modified) or a cluster which previously used modified drivers for the older Azure SQL Connector for Spark provided the modified drivers were removed and the previous default drivers restored.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/microsoft/sql-spark-connector/issues/26&#34;&gt;Issue #26&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Executing custom SQL through the connector&lt;/h3&gt; &#xA;&lt;p&gt;The previous Azure SQL Connector for Spark provided the ability to execute custom SQL code like DML or DDL statements through the connector. This functionality is out-of-scope of this connector since it is based on the DataSource APIs. This functionality is readily provided by libraries like pyodbc or you can use the standard java sql interfaces as well.&lt;/p&gt; &#xA;&lt;p&gt;You can read the closed issue and view community provided alternatives in &lt;a href=&#34;https://github.com/microsoft/sql-spark-connector/issues/21&#34;&gt;Issue #21&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Write to a new SQL Table&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;âš &lt;/span&gt; &lt;strong&gt;Important: using the &lt;code&gt;overwrite&lt;/code&gt; mode will first DROP the table if it already exists in the database by default. Please use this option with due care to avoid unexpected data loss!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;âš &lt;/span&gt; &lt;strong&gt;When using mode &lt;code&gt;overwrite&lt;/code&gt; if you do not use the option &lt;code&gt;truncate&lt;/code&gt;, on recreation of the table indexes will be lost. For example a columnstore table would now be a heap. If you want to maintain existing indexing please also specify option &lt;code&gt;truncate&lt;/code&gt; with value true. i.e &lt;code&gt;.option(&#34;truncate&#34;,true)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;server_name = &#34;jdbc:sqlserver://{SERVER_ADDR}&#34;&#xA;database_name = &#34;database_name&#34;&#xA;url = server_name + &#34;;&#34; + &#34;databaseName=&#34; + database_name + &#34;;&#34;&#xA;&#xA;table_name = &#34;table_name&#34;&#xA;username = &#34;username&#34;&#xA;password = &#34;password123!#&#34; # Please specify password here&#xA;&#xA;try:&#xA;  df.write \&#xA;    .format(&#34;com.microsoft.sqlserver.jdbc.spark&#34;) \&#xA;    .mode(&#34;overwrite&#34;) \&#xA;    .option(&#34;url&#34;, url) \&#xA;    .option(&#34;dbtable&#34;, table_name) \&#xA;    .option(&#34;user&#34;, username) \&#xA;    .option(&#34;password&#34;, password) \&#xA;    .save()&#xA;except ValueError as error :&#xA;    print(&#34;Connector write failed&#34;, error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Append to SQL Table&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:&#xA;  df.write \&#xA;    .format(&#34;com.microsoft.sqlserver.jdbc.spark&#34;) \&#xA;    .mode(&#34;append&#34;) \&#xA;    .option(&#34;url&#34;, url) \&#xA;    .option(&#34;dbtable&#34;, table_name) \&#xA;    .option(&#34;user&#34;, username) \&#xA;    .option(&#34;password&#34;, password) \&#xA;    .save()&#xA;except ValueError as error :&#xA;    print(&#34;Connector write failed&#34;, error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specifying the isolation level&lt;/h3&gt; &#xA;&lt;p&gt;This connector by default uses &lt;code&gt;READ_COMMITTED&lt;/code&gt; isolation level when performing the bulk insert into the database. If you wish to override this to another isolation level, please use the &lt;code&gt;mssqlIsolationLevel&lt;/code&gt; option as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    .option(&#34;mssqlIsolationLevel&#34;, &#34;READ_UNCOMMITTED&#34;) \&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read from SQL Table&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;jdbcDF = spark.read \&#xA;        .format(&#34;com.microsoft.sqlserver.jdbc.spark&#34;) \&#xA;        .option(&#34;url&#34;, url) \&#xA;        .option(&#34;dbtable&#34;, table_name) \&#xA;        .option(&#34;user&#34;, username) \&#xA;        .option(&#34;password&#34;, password).load()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Azure Active Directory Authentication&lt;/h3&gt; &#xA;&lt;h4&gt;Python Example with Service Principal&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;context = adal.AuthenticationContext(authority)&#xA;token = context.acquire_token_with_client_credentials(resource_app_id_url, service_principal_id, service_principal_secret)&#xA;access_token = token[&#34;accessToken&#34;]&#xA;&#xA;jdbc_db = spark.read \&#xA;        .format(&#34;com.microsoft.sqlserver.jdbc.spark&#34;) \&#xA;        .option(&#34;url&#34;, url) \&#xA;        .option(&#34;dbtable&#34;, table_name) \&#xA;        .option(&#34;accessToken&#34;, access_token) \&#xA;        .option(&#34;encrypt&#34;, &#34;true&#34;) \&#xA;        .option(&#34;hostNameInCertificate&#34;, &#34;*.database.windows.net&#34;) \&#xA;        .load()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Python Example with Active Directory Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;jdbc_df = spark.read \&#xA;        .format(&#34;com.microsoft.sqlserver.jdbc.spark&#34;) \&#xA;        .option(&#34;url&#34;, url) \&#xA;        .option(&#34;dbtable&#34;, table_name) \&#xA;        .option(&#34;authentication&#34;, &#34;ActiveDirectoryPassword&#34;) \&#xA;        .option(&#34;user&#34;, user_name) \&#xA;        .option(&#34;password&#34;, password) \&#xA;        .option(&#34;encrypt&#34;, &#34;true&#34;) \&#xA;        .option(&#34;hostNameInCertificate&#34;, &#34;*.database.windows.net&#34;) \&#xA;        .load()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A required dependency must be installed in order to authenticate using Active Directory.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;Scala,&lt;/strong&gt; the &lt;code&gt;com.microsoft.aad.adal4j&lt;/code&gt; artifact will need to be installed.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;Python,&lt;/strong&gt; the &lt;code&gt;adal&lt;/code&gt; library will need to be installed. This is available via pip.&lt;/p&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/sql-spark-connector/master/samples&#34;&gt;sample notebooks&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;The Apache Spark Connector for Azure SQL and SQL Server is an open source project. This connector does not come with any Microsoft support. For issues with or questions about the connector, please create an Issue in this project repository. The connector community is active and monitoring submissions.&lt;/p&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;Visit the Connector project in the &lt;strong&gt;Projects&lt;/strong&gt; tab to see needed / planned items. Feel free to make an issue and start contributing!&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
</feed>