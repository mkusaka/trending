<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-27T01:50:28Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scala/scala3.g8</title>
    <updated>2022-11-27T01:50:28Z</updated>
    <id>tag:github.com,2022-11-27:/scala/scala3.g8</id>
    <link href="https://github.com/scala/scala3.g8" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;scala3.g8: simple scala3-compiled sbt project template&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/scala/scala3.g8/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/scala/scala3.g8/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;http://www.foundweekends.org/giter8/&#34;&gt;Giter8&lt;/a&gt; template for a minimal &lt;a href=&#34;http://dotty.epfl.ch/&#34;&gt;Scala 3&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h2&gt;Template usage&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;sbt&lt;/code&gt;, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt new scala/scala3.g8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in the folder where you want to clone the template.&lt;/p&gt; &#xA;&lt;h2&gt;Template license&lt;/h2&gt; &#xA;&lt;p&gt;Written in 2017 by &lt;a href=&#34;https://github.com/nicolasstucki&#34;&gt;Nicolas Stucki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this template to the public domain worldwide. This template is distributed without any warranty. See &lt;a href=&#34;http://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;http://creativecommons.org/publicdomain/zero/1.0/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joernio/joern</title>
    <updated>2022-11-27T01:50:28Z</updated>
    <id>tag:github.com,2022-11-27:/joernio/joern</id>
    <link href="https://github.com/joernio/joern" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source code analysis platform for C/C++/Java/Binary/Javascript/Python/Kotlin based on code property graphs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Joern - The Bug Hunter&#39;s Workbench&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/joernio/joern/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/joernio/joern/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://index.scala-lang.org/joernio/joern&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/joernio/joern/latest.svg?sanitize=true&#34; alt=&#34;Joern SBT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/joernio/joern/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/joernio/joern/total.svg?sanitize=true&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/vv4MH284Hc&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Discord-lime?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;color=black&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Joern is a platform for analyzing source code, bytecode, and binary executables. It generates code property graphs (CPGs), a graph representation of code for cross-language code analysis. Code property graphs are stored in a custom graph database. This allows code to be mined using search queries formulated in a Scala-based domain-specific query language. Joern is developed with the goal of providing a useful tool for vulnerability discovery and research in static program analysis.&lt;/p&gt; &#xA;&lt;p&gt;Website: &lt;a href=&#34;https://joern.io&#34;&gt;https://joern.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation: &lt;a href=&#34;https://docs.joern.io/&#34;&gt;https://docs.joern.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specification: &lt;a href=&#34;https://cpg.joern.io&#34;&gt;https://cpg.joern.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 11 (newer versions &lt;em&gt;might&lt;/em&gt; work, but have not been properly tested)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;optional&lt;/em&gt;: gcc and g++ (for auto-discovery of C/C++ system header files if included/used in your C/C++ code)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mvn &lt;a href=&#34;https://maven.apache.org/install.html&#34;&gt;https://maven.apache.org/install.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://github.com/joernio/joern/releases/latest/download/joern-install.sh&#xA;chmod +x ./joern-install.sh&#xA;sudo ./joern-install.sh&#xA;joern&#xA;&#xA;Compiling (synthetic)/ammonite/predef/interpBridge.sc&#xA;Compiling (synthetic)/ammonite/predef/replBridge.sc&#xA;Compiling (synthetic)/ammonite/predef/DefaultPredef.sc&#xA;Compiling /home/tmp/shiftleft/joern/(console)&#xA;&#xA;     ██╗ ██████╗ ███████╗██████╗ ███╗   ██╗&#xA;     ██║██╔═══██╗██╔════╝██╔══██╗████╗  ██║&#xA;     ██║██║   ██║█████╗  ██████╔╝██╔██╗ ██║&#xA;██   ██║██║   ██║██╔══╝  ██╔══██╗██║╚██╗██║&#xA;╚█████╔╝╚██████╔╝███████╗██║  ██║██║ ╚████║&#xA; ╚════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝&#xA;&#xA;joern&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the installation script fails for any reason, try&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./joern-install --interactive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developers: IDE setup&lt;/h2&gt; &#xA;&lt;h3&gt;Intellij IDEA&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/download&#34;&gt;Download Intellij Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install and run it&lt;/li&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/1347-scala&#34;&gt;Scala Plugin&lt;/a&gt; - just search and install from within Intellij&lt;/li&gt; &#xA; &lt;li&gt;Important: run &lt;code&gt;sbt&lt;/code&gt; in your local joern clone and keep it open - this will allow us to use the BSP build in the next step&lt;/li&gt; &#xA; &lt;li&gt;Back to Intellij: open project: select your local joern clone: select to open as &lt;code&gt;BSP project&lt;/code&gt; (i.e. &lt;em&gt;not&lt;/em&gt; &lt;code&gt;sbt project&lt;/code&gt;!)&lt;/li&gt; &#xA; &lt;li&gt;Await the import and indexing to complete, then you can start, e.g. &lt;code&gt;Build -&amp;gt; build project&lt;/code&gt; or run a test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;VSCode&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install VSCode and Docker&lt;/li&gt; &#xA; &lt;li&gt;Install the plugin &lt;code&gt;ms-vscode-remote.remote-containers&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open Joern project folder in &lt;a href=&#34;https://docs.microsoft.com/en-us/azure-sphere/app-development/container-build-vscode#build-and-debug-the-project&#34;&gt;VSCode&lt;/a&gt; Visual Studio Code detects the new files and opens a message box saying: &lt;code&gt;Folder contains a Dev Container configuration file. Reopen to folder to develop in a container.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;Reopen in Container&lt;/code&gt; button to reopen the folder in the container created by the &lt;code&gt;.devcontainer/Dockerfile&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Switch to &lt;code&gt;scalameta.metals&lt;/code&gt; sidebar in VSCode, and select &lt;code&gt;import build&lt;/code&gt; in &lt;code&gt;BUILD COMMANDS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;After &lt;code&gt;import build&lt;/code&gt; succeeds, you are ready to start writing code for Joern&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;QueryDB (queries plugin)&lt;/h2&gt; &#xA;&lt;p&gt;Quick way to develop and test QueryDB:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt stage&#xA;./querydb-install.sh&#xA;./joern-scan --list-query-names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The last command prints all available queries - add your own in querydb, run the above commands again to see that your query got deployed. More details in the &lt;a href=&#34;https://raw.githubusercontent.com/joernio/joern/master/querydb/README.md&#34;&gt;separate querydb readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Various static analysis benchmarks that measure Joern are contained under the &lt;code&gt;benchmarks&lt;/code&gt;. The benchmarks are implemented in ScalaTest and can be run using the &lt;code&gt;joern-benchmarks&lt;/code&gt; script. The benchmark results can be found on the &lt;code&gt;benchmarks&lt;/code&gt; subproject&#39;s &lt;code&gt;README&lt;/code&gt;. The currently implemented benchmarks along with the language frontends tested are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://too4words.github.io/securibench-micro/&#34;&gt;Securibench Micro&lt;/a&gt; [&lt;code&gt;javasrc2cpg&lt;/code&gt;, &lt;code&gt;jimple2cpg&lt;/code&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-030-03638-6_27&#34;&gt;IFSpec&lt;/a&gt; (&lt;a href=&#34;https://pp.ipd.kit.edu/uploads/publikationen/ifspec18nordsec.pdf&#34;&gt;paper&lt;/a&gt;) [&lt;code&gt;javasrc2cpg&lt;/code&gt;, &lt;code&gt;jimple2cpg&lt;/code&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/plast-lab/JInfoFlow-bench&#34;&gt;JInfoFlow&lt;/a&gt; (&lt;a href=&#34;https://yanniss.github.io/ptaint-oopsla17-prelim.pdf&#34;&gt;paper&lt;/a&gt;) [&lt;code&gt;javasrc2cpg&lt;/code&gt;, &lt;code&gt;jimple2cpg&lt;/code&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more instructions on how to run benchmarks individually head over to the &lt;code&gt;benchmarks&lt;/code&gt; subproject. If you would like the benchmark results to be written to a file instead of printed to STDOUT, set the path to the environment variable &lt;code&gt;JOERN_BENCHMARK_RESULT_FILE&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>morazow/TurkmenBot</title>
    <updated>2022-11-27T01:50:28Z</updated>
    <id>tag:github.com,2022-11-27:/morazow/TurkmenBot</id>
    <link href="https://github.com/morazow/TurkmenBot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A twitter bot for the türkmen tweets.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Türkmen Twitter Bot&lt;/h1&gt; &#xA;&lt;p&gt;This is a experimental Scala project. A twitter bot answering some commands such as greetings, proses and proverbs in Turkmen language.&lt;/p&gt; &#xA;&lt;p&gt;Currently it responds only two commands,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;@turkmenBot ! Salam&#xA;or&#xA;@turkmenBot ! Nakyl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please do not forget the &#39;!&#39; between mention and command.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;p&gt;I am very open to interesting suggestions, please do suggest! And if you are a developer wanting to improve the code, please submit a PR.&lt;/p&gt; &#xA;&lt;p&gt;Current suggestions,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Retweets some hashtags (#TürkmençeÝaz, #Düşüňýäňmi, wş), easier to implement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Spell check turkmen words. Interesting but harder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#39;nakyllar.txt&#39; is taken from Alashov, &lt;a href=&#34;https://github.com/morazow/cdn&#34;&gt;TmQuotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Some Scala code is inspired from &lt;a href=&#34;https://github.com/jasonbaldridge/twitter4j-tutorial&#34;&gt;twitter4j-tutorial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Under Apache License, please see LICENSE.md.&lt;/p&gt;</summary>
  </entry>
</feed>