<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-14T02:03:53Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>m3dev/octoparts</title>
    <updated>2023-05-14T02:03:53Z</updated>
    <id>tag:github.com,2023-05-14:/m3dev/octoparts</id>
    <link href="https://github.com/m3dev/octoparts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Octoparts, the backend services aggregator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Octoparts &lt;a href=&#34;https://travis-ci.org/m3dev/octoparts&#34;&gt;&lt;img src=&#34;https://travis-ci.org/m3dev/octoparts.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/m3dev/octoparts?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/m3dev/octoparts/badge.svg?branch=develop&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://m3dev.github.io/octoparts/&#34;&gt;See documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also see these &lt;a href=&#34;https://docs.google.com/presentation/d/1dgbLSaEyWydGX6SaPtGeKXX-6p-0OuUvnWFpiOqgoQo/edit?usp=sharing&#34;&gt;Lightning talk slides&lt;/a&gt; from ScalaMatsuri 2014 for a quick explanation of what Octoparts is all about.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>m3dev/promisedcache</title>
    <updated>2023-05-14T02:03:53Z</updated>
    <id>tag:github.com,2023-05-14:/m3dev/promisedcache</id>
    <link href="https://github.com/m3dev/promisedcache" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A caching library with sff4s.Future&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PromisedCache&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;PromisedCache&lt;/code&gt; is a caching library with sff4s.Future.&lt;/p&gt; &#xA;&lt;h1&gt;Settings&lt;/h1&gt; &#xA;&lt;p&gt;Select your favorite cache.&lt;/p&gt; &#xA;&lt;h2&gt;Memcached&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;resolvers += &#34;couchbase.com&#34; at &#34;http://files.couchbase.com/maven2/&#34;&#xA;&#xA;libraryDependencies ++= Seq(&#xA;  &#34;com.m3&#34; %% &#34;promisedcache&#34;   % &#34;0.2.0&#34;,&#xA;  &#34;spy&#34;    %  &#34;spymemcached&#34;    % &#34;2.7.1&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Redis&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies ++= Seq(&#xA;  &#34;com.m3&#34;        %% &#34;promisedcache&#34;   % &#34;0.2.0&#34;,&#xA;  &#34;redis.clients&#34; %  &#34;jedis&#34;           % &#34;2.0.0&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ehcache&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies ++= Seq(&#xA;  &#34;com.m3&#34;         %% &#34;promisedcache&#34;   % &#34;0.2.0&#34;,&#xA;  &#34;net.sf.ehcache&#34; %  &#34;ehcache&#34;         % &#34;1.5.0&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;ls.implicit.ly&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;PromisedCache&lt;/code&gt; itself is available @ ls.implicit.ly&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://ls.implicit.ly/m3dev/promisedcache&#34;&gt;http://ls.implicit.ly/m3dev/promisedcache&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Memcached&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.m3.promisedcache._&#xA;implicit val cacheStore: CacheStore = new CacheStoreOnMemcached(Seq(&#34;localhost:11211&#34;))&#xA;&#xA;import com.m3.promisedcache.Imports._&#xA;import org.scala_tools.time.Imports._&#xA;&#xA;val key: String = &#34;key&#34;&#xA;val f1: sff4s.Future[String] = withCache(key) { &#34;cached forever&#34; }&#xA;&#xA;val key: Int = 12345&#xA;val expiration: DateTime = DateTime.now + 30.minutes&#xA;val f2: sff4s.Future[HeavyOpsResult] = withCache(key, expiration) { &#xA;  heavyOps.result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Redis&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.m3.promisedcache._&#xA;implicit val cacheStore: CacheStore = new CacheStoreOnRedis(Seq(&#34;localhost:6379&#34;))&#xA;&#xA;import com.m3.promisedcache.Imports._&#xA;import org.scala_tools.time.Imports._&#xA;&#xA;val f: sff4s.Future[HeavyOpsResult] = withCache(12345, DateTime.now + 30.minutes) { &#xA;  heavyOps.result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ehcache&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.m3.promisedcache._&#xA;import net.sf.ehcache.Cache&#xA;val ehcache: Cache = new Cache(&#34;cacheName&#34;, 5000, false, false, 60, 60)&#xA;implicit val cacheStore: CacheStore = new CacheStoreOnEhcache(&#34;name&#34;)&#xA;&#xA;import com.m3.promisedcache.Imports._&#xA;import org.scala_tools.time.Imports._&#xA;&#xA;val f: sff4s.Future[HeavyOpsResult] = withCache(12345, DateTime.now + 30.minutes) { &#xA;  heavyOps.result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Collect Futures&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val foo: Future[String] = withCache(&#34;foo&#34;, DateTime.now + 1.minute) {&#xA;  &#34;Scala is a general purpose programming language&#34;&#xA;}&#xA;val bar: Future[String] = withCache(&#34;bar&#34;, DateTime.now + 1.minute) {&#xA;  &#34; designed to express common programming patterns&#34;&#xA;}&#xA;val baz: Future[String] = withCache(&#34;baz&#34;, DateTime.now + 1.minute) {&#xA;  &#34; in a concise, elegant, and type-safe way.&#34;&#xA;}&#xA;&#xA;val msg: Future[String] = for {&#xA;  f &amp;lt;- foo&#xA;  b &amp;lt;- bar&#xA;  bz &amp;lt;- baz&#xA;} yield f + b + bz&#xA;&#xA;println(msg())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Initialize Cache instance&lt;/h2&gt; &#xA;&lt;p&gt;There is a choise between setting up with implicit parameters or initializing &lt;code&gt;Cache&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.m3.promisedcache._&#xA;import org.scala_tools.time.Imports._&#xA;&#xA;val cache: PromisedCache = PromisedCache(new CacheStoreOnMemcached(Seq(&#34;localhost:11211&#34;)))&#xA;&#xA;val f: sff4s.Future[HeavyOpsResult] = cache.withCache(12345, DateTime.now + 30.minutes) { &#xA;  heavyOps.result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;See also&lt;/h1&gt; &#xA;&lt;h2&gt;sff4s&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/eed3si9n/sff4s&#34;&gt;https://github.com/eed3si9n/sff4s&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;scala-time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jorgeortiz85/scala-time&#34;&gt;https://github.com/jorgeortiz85/scala-time&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Apache License, Version 2.0&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>