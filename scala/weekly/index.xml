<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-30T02:05:36Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>coderunner/option-tutorial</title>
    <updated>2023-07-30T02:05:36Z</updated>
    <id>tag:github.com,2023-07-30:/coderunner/option-tutorial</id>
    <link href="https://github.com/coderunner/option-tutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/rocket-dsp-utils</title>
    <updated>2023-07-30T02:05:36Z</updated>
    <id>tag:github.com,2023-07-30:/ucb-bar/rocket-dsp-utils</id>
    <link href="https://github.com/ucb-bar/rocket-dsp-utils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for integrating DspTools components into a rocket-chip&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ROCKET-DSP-UTILS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ucb-bar/dsptools/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/chick/rocket-dsp-utils/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository is part of a transition to move the rocket subdirectory from &lt;a href=&#34;&#34;&gt;ucb-bar/dsptools&lt;/a&gt; to its own repository&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This README will be filled out later. At the moment it will only contain instructions to run it locally&lt;/p&gt; &#xA;&lt;p&gt;Goals: Get the rocket sub-project of dsptools to run within the chipyard environment. It is based on running using the chipyards rocket-chip commit&lt;/p&gt; &#xA;&lt;p&gt;Steps&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Checkout &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip&#34;&gt;rocket-chip&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;git checkout 3b3169cb04bd5a7be4ec0be04a4cbe1a794c540e&lt;/li&gt; &#xA;   &lt;li&gt;make the following changes to build.sbt so that jars will be produced&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git diff build.sbt&#xA;diff --git a/build.sbt b/build.sbt&#xA;index 09d5f98bd..f2f54af58 100644&#xA;--- a/build.sbt&#xA;+++ b/build.sbt&#xA;@@ -65,14 +65,13 @@ lazy val chiselPluginLib = &#34;edu.berkeley.cs&#34; % &#34;chisel3-plugin&#34; % chiselVersion&#xA;&#xA; lazy val `api-config-chipsalliance` = (project in file(&#34;api-config-chipsalliance/build-rules/sbt&#34;))&#xA;   .settings(commonSettings)&#xA;-  .settings(publishArtifact := false)&#xA; lazy val hardfloat  = (project in file(&#34;hardfloat&#34;))&#xA;   .sourceDependency(chiselRef, chiselLib)&#xA;   .settings(addCompilerPlugin(chiselPluginLib))&#xA;   .settings(commonSettings)&#xA;   .settings(publishArtifact := false)&#xA; lazy val `rocket-macros` = (project in file(&#34;macros&#34;)).settings(commonSettings)&#xA;-  .settings(publishArtifact := false)&#xA;+  // .settings(publishArtifact := false)&#xA; lazy val rocketchip = (project in file(&#34;.&#34;))&#xA;   .sourceDependency(chiselRef, chiselLib)&#xA;   .settings(addCompilerPlugin(chiselPluginLib))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sbt &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;rocket-macros / publishLocal&lt;/li&gt; &#xA;   &lt;li&gt;api-config-chipsalliance / publishLocal&lt;/li&gt; &#xA;   &lt;li&gt;publishLocal&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;should be able to edit/compile/run things &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I have not run all tests yet.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;PLEASE let me know if this does not work for you&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Questionable code is marked with //TODO: CHIPYARD&lt;/li&gt; &#xA; &lt;li&gt;Using local publishing of everything was just to get jump started, can modify build approach after getting things working&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This code is maintained by &lt;a href=&#34;https://github.com/chick&#34;&gt;Chick&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>parth-patil/blackjack-scala</title>
    <updated>2023-07-30T02:05:36Z</updated>
    <id>tag:github.com,2023-07-30:/parth-patil/blackjack-scala</id>
    <link href="https://github.com/parth-patil/blackjack-scala" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blackjack game implemented in scala and uses twitter Finagle&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Project Blackjack&lt;/h1&gt; &#xA;&lt;p&gt;This project contains a Blackjack game implemented as a client and server application. The server is written using Finagle and the server exposes a thrift interface. The server supports multiple players playing at the same time.&lt;/p&gt; &#xA;&lt;h1&gt;Playing Blackjack&lt;/h1&gt; &#xA;&lt;p&gt;First you will need to clone this project. Next you need to run the server and the client as follows&lt;/p&gt; &#xA;&lt;h2&gt;Running the Blackjack Finagle Server&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd blackjack&#xA;./sbt&#xA;&amp;gt; compile&#xA;&amp;gt; run -f config/development.scala&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Blackjack client&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd blackjack&#xA;./console 127.0.0.1 9999&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>