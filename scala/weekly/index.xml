<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-15T01:53:40Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ucb-bar/shuttle</title>
    <updated>2023-10-15T01:53:40Z</updated>
    <id>tag:github.com,2023-10-15:/ucb-bar/shuttle</id>
    <link href="https://github.com/ucb-bar/shuttle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Rocket-based RISC-V superscalar in-order core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shuttle: A Rocket-based Superscalar In-order RISC-V Core&lt;/h1&gt; &#xA;&lt;p&gt;Shuttle is a Rocket-based superscalar in-order RISC-V core, supporting the base RV64IMAFDC instruction set with supervisor and user-mode. Shuttle is a 6-stage core that can be configured to be dual, three, or quad-issue, although dual-issue is the most sensible design point. Shuttle is &lt;em&gt;not&lt;/em&gt; designed to meet any power, performance, or area targets. It exists purely as a demonstrative example of another RISC-V CPU design point.&lt;/p&gt; &#xA;&lt;p&gt;The superscalar microarchitecture presents the most advantages for 1) floating-point kernels and 2) RoCC accelerator kernels, as scalar control code can execute concurrently with floating point or RoCC instructions, maintaining high utilization of those units.&lt;/p&gt; &#xA;&lt;p&gt;Shuttle is tape-out proven, and has similar physical design complexity as Rocket.&lt;/p&gt;</summary>
  </entry>
</feed>