<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-18T01:49:59Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>slick/slick</title>
    <updated>2022-12-18T01:49:59Z</updated>
    <id>tag:github.com,2022-12-18:/slick/slick</id>
    <link href="https://github.com/slick/slick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Slick (Scala Language Integrated Connection Kit) is a modern database query and access library for Scala&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Slick&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/nafg&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/nafg?label=Sponsor%20@nafg&#34; alt=&#34;Sponsor1Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://mvnrepository.com/artifact/com.typesafe.slick/slick_2.13&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.typesafe.slick/slick_2.13.svg?sanitize=true&#34; alt=&#34;MavenBadge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/slick/slick/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/slick/slick?label=GitHub+Discussions&#34; alt=&#34;DiscussionsBadge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/yQheBhUtAa&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord%20-%23slick%20on%20Scala%20server-blue&#34; alt=&#34;DiscordBadge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/slick/slick?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;GitterBadge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--  [&lt;snippet include-in-website&gt;] --&gt; &#xA;&lt;p&gt;Slick is an advanced, comprehensive database access library for Scala with strongly-typed, highly composable APIs.&lt;/p&gt; &#xA;&lt;p&gt;Slick makes it easy to use your database in a way that&#39;s natural to it. It allows you to work with relational databases almost as if you were using Scala collections, while at the same time giving you full control over when the database is accessed and how much data is transferred. And by writing your queries in Scala you can benefit from compile-time safety and great compositionality, while retaining the ability to drop down to raw SQL when necessary for custom or advanced database features.&lt;/p&gt; &#xA;&lt;p&gt;Its features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Query API inspired by Scala&#39;s collections API&lt;/li&gt; &#xA; &lt;li&gt;Full control over how the database schema is seen by Slick, by using an explicit representation that can be code-generated from the actual database&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous API using &lt;code&gt;Future&lt;/code&gt; for complete results, and a streaming API that conforms to the &lt;a href=&#34;https://www.reactive-streams.org/&#34;&gt;Reactive Streams&lt;/a&gt; interface, for easy integration with any streaming library, such as &lt;a href=&#34;https://doc.akka.io/docs/akka/current/stream/index.html&#34;&gt;Akka Streams&lt;/a&gt;, &lt;a href=&#34;https://fs2.io/#/&#34;&gt;FS2&lt;/a&gt;, or &lt;a href=&#34;https://github.com/zio/interop-reactive-streams&#34;&gt;ZIO&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Composability at many levels &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Compose actions (steps to run in a database context) with for comprehensions&lt;/li&gt; &#xA;   &lt;li&gt;Compose queries with for comprehensions or combinators&lt;/li&gt; &#xA;   &lt;li&gt;Compose row expressions (column sets, predicates, and column mappings)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A database metadata introspection API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Slick features an advanced query compiler which can generate SQL for a variety of different database engines from the same Scala code, allowing you to focus on application logic without worrying about database-specific syntax and quirks.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Learn&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Full documentation, including Scaladocs and more complex examples, can be found on the &lt;a href=&#34;https://scala-slick.org&#34;&gt;website&lt;/a&gt;. For the latest release you can go straight to &lt;a href=&#34;https://scala-slick.org/doc/stable/&#34;&gt;https://scala-slick.org/doc/stable/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Our friends at &lt;a href=&#34;https://underscore.io/&#34;&gt;&lt;code&gt;underscore.io&lt;/code&gt;&lt;/a&gt; have written &#34;Essential Slick&#34;, an excellent guide to using slick from first principles, and is available &lt;a href=&#34;https://underscore.io/books/essential-slick/&#34;&gt;as a free download&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLmtsMNDRU0BxIFCdPgm77Dx5Ll9SQ76pR&#34;&gt;Videos by Rock the JVM&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get help&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Post questions and suggestions on &lt;a href=&#34;https://github.com/slick/slick/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ask on the &lt;a href=&#34;https://discord.gg/yQheBhUtAa&#34;&gt;#slick channel on the official Scala Discord server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;There is a &lt;a href=&#34;https://gitter.im/slick/slick&#34;&gt;gitter channel&lt;/a&gt; too, but Discord is preferred&lt;/li&gt; &#xA; &lt;li&gt;Report bugs to &lt;a href=&#34;https://github.com/slick/slick/issues&#34;&gt;GitHub issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;As a simple example we will create a Scala object &lt;code&gt;Coffee&lt;/code&gt;, and a table to store instances of this object in the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import slick.jdbc.PostgresProfile.api._&#xA;&#xA;// First declare our Scala object&#xA;final case class Coffee(name: String, price: Double)&#xA;&#xA;// Next define how Slick maps from a database table to Scala objects&#xA;class Coffees(tag: Tag) extends Table[Coffee](tag, &#34;COFFEES&#34;) {&#xA;  def name  = column[String](&#34;NAME&#34;)&#xA;  def price = column[Double](&#34;PRICE&#34;)&#xA;  def * = (name, price).mapTo[Coffee]&#xA;}&#xA;&#xA;// The `TableQuery` object gives us access to Slick&#39;s rich query API&#xA;val coffees = TableQuery[Coffees]&#xA;&#xA;// Inserting is done by appending to our query object&#xA;// as if it were a regular Scala collection&#xA;// SQL: insert into COFFEES (NAME, PRICE) values (&#39;Latte&#39;, 2.50)&#xA;coffees += Coffee(&#34;Latte&#34;, 2.50)&#xA;&#xA;// Fetching data is also done using the query object&#xA;// SQL: select NAME from COFFEES&#xA;coffees.map(_.name)&#xA;&#xA;// More complex queries can be chained together&#xA;// SQL: select NAME, PRICE from COFFEES where PRICE &amp;lt; 10.0 order by NAME&#xA;coffees.filter(_.price &amp;lt; 10.0).sortBy(_.name)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Database support&lt;/h2&gt; &#xA;&lt;p&gt;The following databases are directly supported by Slick, and are currently covered by a large suite of automated tests to ensure compatibility:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Database&lt;/th&gt; &#xA;   &lt;th&gt;JDBC Driver&lt;/th&gt; &#xA;   &lt;th&gt;Tested server version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;org.postgresql&#34; % &#34;postgresql&#34; % &#34;42.5.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Latest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MySQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;mysql&#34; % &#34;mysql-connector-java&#34; % &#34;8.0.30&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Latest&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQLServer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;net.sourceforge.jtds&#34; % &#34;jtds&#34; % &#34;1.3.1&#34;&lt;/code&gt; and&lt;/td&gt; &#xA;   &lt;td&gt;2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;com.microsoft.sqlserver&#34; % &#34;mssql-jdbc&#34; % &#34;7.2.2.jre11&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Oracle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;com.oracle.database.jdbc.debug&#34; % &#34;ojdbc8_g&#34; % &#34;21.6.0.0.1&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;11g&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DB2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;com.ibm.db2.jcc&#34; % &#34;db2jcc&#34; % &#34;db2jcc4&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;11.5.7.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Derby/JavaDB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;org.apache.derby&#34; % &#34;derby&#34; % &#34;10.14.2.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;H2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;com.h2database&#34; % &#34;h2&#34; % &#34;1.4.200&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HSQLDB/HyperSQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;org.hsqldb&#34; % &#34;hsqldb&#34; % &#34;2.5.2&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQLite&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;org.xerial&#34; % &#34;sqlite-jdbc&#34; % &#34;3.39.2.1&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Accessing other database systems is possible, although possibly with a reduced feature set.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Slick is community-maintained: pull requests are very welcome, and we ask that all contributors abide by the &lt;a href=&#34;https://www.lightbend.com/conduct&#34;&gt;Lightbend Community Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lightbend staff (such as @SethTisue) may be able to assist with administrative issues.&lt;/p&gt; &#xA;&lt;!-- [&lt;endsnippet include-in-website&gt;] --&gt;</summary>
  </entry>
  <entry>
    <title>fpinscala/fpinscala</title>
    <updated>2022-12-18T01:49:59Z</updated>
    <id>tag:github.com,2022-12-18:/fpinscala/fpinscala</id>
    <link href="https://github.com/fpinscala/fpinscala" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code, exercises, answers, and hints to go along with the book &#34;Functional Programming in Scala&#34;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitter.im/fpinscala/fpinscala?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/fpinscala/fpinscala&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains exercises, hints, and answers for the book &lt;a href=&#34;http://manning.com/bjarnason/&#34;&gt;Functional Programming in Scala&lt;/a&gt;. Along with the book itself, it&#39;s the closest you&#39;ll get to having your own private functional programming tutor without actually having one.&lt;/p&gt; &#xA;&lt;p&gt;There are two main branches in this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fpinscala/fpinscala/tree/first-edition&#34;&gt;first-edition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fpinscala/fpinscala/tree/second-edition&#34;&gt;second-edition&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Be sure to select the branch which matches the edition of the book you are reading!&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to use this repository:&lt;/p&gt; &#xA;&lt;p&gt;Each chapter in the book develops a fully working library of functions and data types, built up through a series of exercises and example code given in the book text. The shell of this working library and exercise stubs live in &lt;code&gt;src/main/scala/fpinscala/exercises/&amp;lt;chapter-description&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;chapter-description&amp;gt;&lt;/code&gt; is a package name that corresponds to the chapter title (see below). When you begin working on a chapter, we recommend you open the exercise file(s) for that chapter, and when you encounter exercises, implement them in the exercises file and make sure they work.&lt;/p&gt; &#xA;&lt;p&gt;If you get stuck on an exercise, let&#39;s say exercise 4 in the chapter, you can find hints in &lt;code&gt;answerkey/&amp;lt;chapter-description&amp;gt;/04.hint.md&lt;/code&gt; (if no hints are available for a problem, the file will just have a single &#39;-&#39; as its contents) and the answer along with an explanation of the answer and any variations in &lt;code&gt;answerkey/&amp;lt;chapter-description&amp;gt;/04.answer.md&lt;/code&gt;. The finished Scala modules, with all answers for each chapter live in &lt;code&gt;src/main/scala/fpinscala/answers/&amp;lt;chapter-description&amp;gt;&lt;/code&gt;. Please feel free to submit pull requests for alternate answers, improved hints, and so on, so we can make this repo the very best resource for people working through the book.&lt;/p&gt; &#xA;&lt;p&gt;Chapter descriptions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chapter 2: gettingstarted&lt;/li&gt; &#xA; &lt;li&gt;Chapter 3: datastructures&lt;/li&gt; &#xA; &lt;li&gt;Chapter 4: errorhandling&lt;/li&gt; &#xA; &lt;li&gt;Chapter 5: laziness&lt;/li&gt; &#xA; &lt;li&gt;Chapter 6: state&lt;/li&gt; &#xA; &lt;li&gt;Chapter 7: parallelism&lt;/li&gt; &#xA; &lt;li&gt;Chapter 8: testing&lt;/li&gt; &#xA; &lt;li&gt;Chapter 9: parsing&lt;/li&gt; &#xA; &lt;li&gt;Chapter 10: monoids&lt;/li&gt; &#xA; &lt;li&gt;Chapter 11: monads&lt;/li&gt; &#xA; &lt;li&gt;Chapter 12: applicative&lt;/li&gt; &#xA; &lt;li&gt;Chapter 13: iomonad&lt;/li&gt; &#xA; &lt;li&gt;Chapter 14: localeffects&lt;/li&gt; &#xA; &lt;li&gt;Chapter 15: streamingio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup build environment&lt;/h3&gt; &#xA;&lt;p&gt;The project is setup to use &lt;a href=&#34;https://scala-cli.virtuslab.org&#34;&gt;Scala CLI&lt;/a&gt;. First install Scala CLI by following the &lt;a href=&#34;https://scala-cli.virtuslab.org/install&#34;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also likely want an editor that&#39;s aware of Scala syntax. &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;VSCode&lt;/a&gt; with the &lt;a href=&#34;https://scalameta.org/metals/docs/editors/vscode.html&#34;&gt;Metals&lt;/a&gt; extension works great.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;To build the code for the first time, from the root directory of the project (i.e., the directory where this README.md is located):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli compile .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This compiles all exercises and answers. You can also do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli console .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to get a Scala REPL (prompt &lt;code&gt;scala&amp;gt;&lt;/code&gt;) with access to exercises and answers, and then for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scala&amp;gt; import fpinscala.exercises.datastructures.List&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to import the &lt;code&gt;List&lt;/code&gt; data type.&lt;/p&gt; &#xA;&lt;p&gt;To run the sample programs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli run .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gives a list of possible main methods to execute. To run one of them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli run . --main-class fpinscala.answers.gettingstarted.printAbs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a single unit-test, you can specify the fully qualified class name and test name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli test . -- &#39;fpinscala.exercises.gettingstarted.GettingStartedSuite.MyProgram.factorial&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run unit-tests for a package you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli test . -- &#39;fpinscala.exercises.gettingstarted.*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run all unit-tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli test .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, running all tests will result in failures. As you solve exercises, the tests will start to pass.&lt;/p&gt; &#xA;&lt;h3&gt;SBT&lt;/h3&gt; &#xA;&lt;p&gt;Note: an &lt;a href=&#34;https://www.scala-sbt.org&#34;&gt;SBT&lt;/a&gt; build is also provided.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;All code in this repository is &lt;a href=&#34;http://opensource.org/licenses/mit-license.php&#34;&gt;MIT-licensed&lt;/a&gt;. See the LICENSE file for details.&lt;/p&gt; &#xA;&lt;p&gt;Have fun, and good luck! Also be sure to check out &lt;a href=&#34;https://github.com/fpinscala/fpinscala/wiki&#34;&gt;the community wiki&lt;/a&gt; for the &lt;strong&gt;chapter notes&lt;/strong&gt;, links to more reading, and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Paul, Rúnar, and Michael&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Topl/BrambleSc</title>
    <updated>2022-12-18T01:49:59Z</updated>
    <id>tag:github.com,2022-12-18:/Topl/BrambleSc</id>
    <link href="https://github.com/Topl/BrambleSc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Topl&#39;s Brambl SDK implemented in Scala&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BrambleSc&lt;/h1&gt; &#xA;&lt;p&gt;Topl&#39;s Brambl SDK implemented in Scala&lt;/p&gt;</summary>
  </entry>
</feed>