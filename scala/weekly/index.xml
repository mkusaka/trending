<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-28T02:09:02Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>svtk/lecture4-scala</title>
    <updated>2023-05-28T02:09:02Z</updated>
    <id>tag:github.com,2023-05-28:/svtk/lecture4-scala</id>
    <link href="https://github.com/svtk/lecture4-scala" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The code used in a lecture # 4 (28.09)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lecture#4&lt;/h1&gt; &#xA;&lt;p&gt;The code used in a lecture # 4 (28.09)&lt;/p&gt; &#xA;&lt;h1&gt;Task&lt;/h1&gt; &#xA;&lt;p&gt;Implement normalization of a lambda term. Lambda term should be specified like this:&lt;/p&gt; &#xA;&lt;p&gt;Appl(Abst(Var(&#34;x&#34;), Appl(Var(&#34;x&#34;),Var(&#34;y&#34;))),Abst(Var(&#34;x&#34;),Var(&#34;x&#34;)))&lt;/p&gt; &#xA;&lt;p&gt;Use case classes and pattern matching!&lt;/p&gt; &#xA;&lt;p&gt;Send it by e-mail: &lt;a href=&#34;mailto:course.scala@gmail.com&#34;&gt;course.scala@gmail.com&lt;/a&gt; Deadline is 4 October 2012, 21:00&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>liftmodules/jta</title>
    <updated>2023-05-28T02:09:02Z</updated>
    <id>tag:github.com,2023-05-28:/liftmodules/jta</id>
    <link href="https://github.com/liftmodules/jta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lift Java Transaction API integration&lt;/p&gt;&lt;hr&gt;&lt;p&gt;h1. Lift JTA Transaction API&lt;/p&gt; &#xA;&lt;p&gt;To include this module in your Lift project, update your &lt;code&gt;libraryDependencies&lt;/code&gt; in &lt;code&gt;build.sbt&lt;/code&gt; to include:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Lift 2.6.x&lt;/em&gt; for Scala 2.9 and 2.10:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;    &#34;net.liftmodules&#34; %% &#34;jpa_2.6&#34; % &#34;1.2&#34;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Lift 2.5.x&lt;/em&gt; for Scala 2.9 and 2.10:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;    &#34;net.liftmodules&#34; %% &#34;jpa_2.5&#34; % &#34;1.2&#34;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Lift 3.0.x&lt;/em&gt; for Scala 2.10:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;    &#34;net.liftmodules&#34; %% &#34;jpa_3.0&#34; % &#34;1.2-SNAPSHOT&#34;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The semantics are the same as used in the EJB spec. E.g. Required, RequiresNew, Mandatory, Supports, Never. All these are exposed as monadic objects and high-order functions in the TransactionContext object.&lt;/p&gt; &#xA;&lt;p&gt;The implementation is hooked into the Lift&#39;s JPA implementation. Check the ScalaDoc (or the source) for the documentation on usage, semantics etc.&lt;/p&gt; &#xA;&lt;p&gt;There are two versions of the API, one monadic and one using high-order functions.&lt;/p&gt; &#xA;&lt;p&gt;Note: The module package changed from net.liftweb.transaction to net.liftmodules.transaction in May 2012. Please consider this when referencing documentation written before that date.&lt;/p&gt; &#xA;&lt;p&gt;h3. Monadic API&lt;/p&gt; &#xA;&lt;pre&gt;&#xA; for {&#xA;   ctx &amp;lt;- TransactionContext.Required&#xA;   entity &amp;lt;- updatedEntities&#xA;   if !ctx.isRollbackOnly&#xA; } {&#xA;   // transactional stuff&#xA;   ctx.getEntityManager.merge(entity)&#xA; }&#xA;&lt;/pre&gt; &#xA;&lt;pre&gt;&#xA;val users = for {&#xA;   ctx &amp;lt;- TransactionContext.RequiresNew&#xA;   name &amp;lt;- userNames&#xA; } yield {&#xA;   // transactional stuff&#xA;   val query = ctx.getEntityManager.createNamedQuery(&#34;findUserByName&#34;)&#xA;   query.setParameter(&#34;userName&#34;, name)&#xA;   query.getSingleResult&#xA; }&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;h3. High-order functions API&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;TransactionContext.withTxRequired {&#xA;    ... // REQUIRED semantics&#xA;&#xA;  TransactionContext.withTxRequiresNew {&#xA;    ... // REQUIRES_NEW semantics&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;h2. Configuration&lt;/p&gt; &#xA;&lt;p&gt;The configuration is done in the persistence.xml file + the jta.properties. Sample configuration files can be found in the src/main/resources directory. Here are the essential configuration options in the JPA persistence.xml file:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&#xA; &lt;persistence xmlns=&#34;http://java.sun.com/xml/ns/persistence&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:schemalocation=&#34;http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd&#34; version=&#34;1.0&#34;&gt;&#xA;  &#xA;  &lt;persistence-unit name=&#34;LiftPersistenceUnit&#34; transaction-type=&#34;JTA&#34;&gt; &#xA;   &lt;provider&gt;&#xA;    org.hibernate.ejb.HibernatePersistence&#xA;   &lt;/provider&gt; &#xA;   &lt;mapping-file&gt;&#xA;    ...&#xA;   &lt;/mapping-file&gt; &#xA;   &lt;class&gt;&#xA;    ...&#xA;   &lt;/class&gt; &#xA;   &lt;properties&gt; &#xA;    &lt;property name=&#34;hibernate.transaction.manager_lookup_class&#34; value=&#34;net.modules.transaction.hibernate.LiftTransactionManagerLookup&#34; /&gt; &#xA;   &lt;/properties&gt; &#xA;  &lt;/persistence-unit&gt;&#xA;&#xA; &lt;/persistence&gt;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;h2. TODOs&lt;/p&gt; &#xA;&lt;p&gt;Currently it is hard-coded to use the Atomikos Transaction library and the Hibernate JPA implementation. This will have to be configurable + some other options as well. See the TODOs in the code.&lt;/p&gt; &#xA;&lt;p&gt;h1. Jenkins&lt;/p&gt; &#xA;&lt;p&gt;The Jenkins build is triggered on a push to master. The server is at &lt;a href=&#34;https://liftmodules.ci.cloudbees.com/job/jta/&#34;&gt;https://liftmodules.ci.cloudbees.com/job/jta/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mandubian/maquereau</title>
    <updated>2023-05-28T02:09:02Z</updated>
    <id>tag:github.com,2023-05-28:/mandubian/maquereau</id>
    <link href="https://github.com/mandubian/maquereau" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Come on taste my fresh Scala Macrooooos!!!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;maquereau&lt;/h1&gt; &#xA;&lt;p&gt;Come on taste my fresh Scala Macrooooos!!! Here I experiment Scala Macros.&lt;/p&gt; &#xA;&lt;h3&gt;Experiment #1 : Patamorphism @ VerySeriousCompiler&lt;/h3&gt;</summary>
  </entry>
</feed>