<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-11T02:01:35Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>oyvindberg/bleep</title>
    <updated>2023-06-11T02:01:35Z</updated>
    <id>tag:github.com,2023-06-11:/oyvindberg/bleep</id>
    <link href="https://github.com/oyvindberg/bleep" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A bleeping fast scala build tool!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/oyvindberg/bleep?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/oyvindberg/bleep.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/oyvindberg/bleep&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See documentation at &lt;a href=&#34;https://bleep.build/docs/&#34;&gt;https://bleep.build&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;h4&gt;Check out bleep source code&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone --recurse-submodules https://github.com/oyvindberg/bleep.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install bleep&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://bleep.build/docs/installing/&#34;&gt;https://bleep.build/docs/installing/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Use bleep to build bleep&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# compile all projects using scala 2.13&#xA;$ bleep compile jvm213&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Setup in IDE&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bleep setup-ide jvm213&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then open in using metals or intellij.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://bleep.build/docs/usage/selecting-projects/#setting-up-build-in-ide&#34;&gt;setting-up-build-in-ide&lt;/a&gt; for a bit more info.&lt;/p&gt; &#xA;&lt;h4&gt;Run bleep&lt;/h4&gt; &#xA;&lt;p&gt;You have several options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run with bleep &lt;code&gt;bleep run bleep-cli@jvm213&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;bleep.Main&lt;/code&gt; from your IDE&lt;/li&gt; &#xA; &lt;li&gt;generate a native image (&lt;code&gt;bleep native-image&lt;/code&gt;) and run that (the path will be printed). This is slow, but a few things can only be tested this way.&lt;/li&gt; &#xA; &lt;li&gt;generate a shell wrapper script:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# generate script in build directory&#xA;$ bleep setup-dev-script bleep-cli@jvm213&#xA;&#xA;# with this approach you need to compile manually&#xA;$ bleep compile bleep-cli@jvm213&#xA;&#xA;$ ./bleep-cli@jvm213.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generating shell wrapper scripts is currently not implemented on windows, but it&#39;s likely easy to add if you want it.&lt;/p&gt; &#xA;&lt;h4&gt;Submitting code&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All changes go through PRs&lt;/li&gt; &#xA; &lt;li&gt;Code should be formatted correctly (&lt;code&gt;bleep fmt&lt;/code&gt;) and tests should pass (&lt;code&gt;bleep test&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Chisel-blocks/register_template</title>
    <updated>2023-06-11T02:01:35Z</updated>
    <id>tag:github.com,2023-06-11:/Chisel-blocks/register_template</id>
    <link href="https://github.com/Chisel-blocks/register_template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Template instance generated by init_module.sh from chisel_blocks_utils&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Description of scala module version control principle with git&lt;/h1&gt; &#xA;&lt;p&gt;Generated by init_module.sh of Chisel-blocs-utils, &lt;a href=&#34;https://github.com/Chisel-blocks/chisel-blocks-utils&#34;&gt;https://github.com/Chisel-blocks/chisel-blocks-utils&lt;/a&gt; , 20210130&lt;/p&gt; &#xA;&lt;h2&gt;Principle of operation:&lt;/h2&gt; &#xA;&lt;p&gt;All modules version controlled with this method can be used effortlessly and recursively as git submodules inside similar modules&lt;/p&gt; &#xA;&lt;p&gt;The method of use is &lt;em&gt;always&lt;/em&gt; the same&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;./init_submodules.sh&lt;/code&gt; (if any)&lt;/li&gt; &#xA; &lt;li&gt;Publish locally the submodules you want to use. (embedded to init_submodules.sh)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./configure &amp;amp;&amp;amp; make&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Version strings:&lt;/h2&gt; &#xA;&lt;p&gt;In build.sbt, the version of the current module is of from &#34;module-&#xA; &lt;commit-hash&gt;&#xA;  -SNAPHOT&#34; It is created with line: &#xA;  &lt;code&gt;version := scala.sys.process.Process(&#34;git rev-parse --short HEAD&#34;).!!.mkString.replaceAll(&#34;\\s&#34;, &#34;&#34;)+&#34;-SNAPSHOT&#34;&lt;/code&gt;&#xA; &lt;/commit-hash&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dependencies on similar submodules are defined with the function gitSubmoduleHashSnapshotVersion and with the dependency definitions &lt;code&gt;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;hbwif&#34; % gitSubmoduleHashSnapshotVersion(modulename&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This dependency is satisfied only if there is a locally published (sbt publishLocal) submodule with the submodule hash of the current git submodule.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OBS1&lt;/strong&gt;: Every time a submodule is updated, it must be published locally. See init_submodules.sh for reference. Make it recursive if needed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OBS2&lt;/strong&gt;: If submodules are edited and committed, the changes are visible at the top level ONLY if ALL the entire hierarchy of submodules from bottom module to top are git-added, git-committed and git-pushed. This is how submodules normally operate.&lt;/p&gt; &#xA;&lt;h2&gt;Add your module readme here&lt;/h2&gt; &#xA;&lt;p&gt;Lorem ipsum...&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wuhaixing/medications</title>
    <updated>2023-06-11T02:01:35Z</updated>
    <id>tag:github.com,2023-06-11:/wuhaixing/medications</id>
    <link href="https://github.com/wuhaixing/medications" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Play 2 演示程序，具体实现过程请见wiki&lt;/p&gt;&lt;hr&gt;&lt;p&gt;##项目愿景&lt;/p&gt; &#xA;&lt;p&gt;问药！人的一生中总免不了遭受病痛的折磨，药也因此跟我们结下了不解之缘。可看病难，吃药更难。良药苦口是古训，不敢称之为难了。一难难在药价高，越来越高，看个感冒花几百块药钱已经是司空见惯了。二难难在种类多，医生大笔一挥，一张处方下来给你弄个4,5种药，连药理效用都搞不清楚，更不用说这药的底细了。三难难在用法杂，过不过敏，外敷内服，一日几次，一次多少，饭前饭后，水送酒送。。。&lt;/p&gt; &#xA;&lt;h3&gt;自由的技术&lt;/h3&gt; &#xA;&lt;p&gt;勤快人靠笔记，懒人靠科技。在那一刹那，我决定做个应用，帮饱受病痛折磨的人们减轻一点痛苦。初步愿景如下：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;拿到药，用手机对着条码一拍，马上能得到该药品的所有详细信息。&lt;/li&gt; &#xA; &lt;li&gt;针对每种药品制定用药计划（药品信息里应该有建议，接受或简单修改就行），自动设定系统时钟，到用药时间提醒病人用药。&lt;/li&gt; &#xA; &lt;li&gt;记录每次处方的用药时间，开处方的医院，医生，金额&lt;/li&gt; &#xA; &lt;li&gt;跟踪个人的用药史&lt;/li&gt; &#xA; &lt;li&gt;药品排行，药品比价，药品评论&lt;/li&gt; &#xA; &lt;li&gt;医生排行...医生排行...医生排行&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;###伟大的墙&lt;/p&gt; &#xA;&lt;p&gt;所有这些想法都建立在一个很简单的假设上：药品有统一的条码，并且是可以自由获取的公共资源。这个良好的愿望能不能变成现实，还要看看会不会撞上伟大的墙！&lt;/p&gt; &#xA;&lt;p&gt;侦察工作开始了。。。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;for 那些猴急的人&lt;/strong&gt;&lt;br&gt; 初步结论：假设成立，最起码在我昨天捧回家的那一大堆药上，都有条码。有的还有两种条码咧！而且，真的是可以自由获取的公共资源哦。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;经过百度（艾玛），我认为这些条码应该叫&lt;strong&gt;药品本位码&lt;/strong&gt;&lt;sup&gt;[2]&lt;/sup&gt;，可以通过国家食品药品监管局的网站上进行[数据查询][1]，有“国产药品”和“进口药品”两个数据库。&lt;/p&gt; &#xA;&lt;p&gt;国产药品数据库包括的主要信息为：&lt;strong&gt;批准文号&lt;/strong&gt;、药品本位码、药品本位码备注、产品名称、英文名称、商品名、生产单位、规格、剂型、产品类别、批准日期、原批准文号等。&lt;/p&gt; &#xA;&lt;p&gt;进口药品数据库包括的主要信息为：&lt;strong&gt;注册证号&lt;/strong&gt;、原注册证号、药品本位码、药品本位码备注、产品名称（中文）、产品名称（英文）、商品名（中文）、商品名（英文）、公司名称（中文）、公司名称（英文）、剂型（中文）、规格（中文）、注册证号备注、包装规格（中文）、生产厂商（中文）、生产厂商（英文）、厂商地址（中文）、厂商地址（英文）、厂商国家（中文）、厂商国家（英文）、分包装批准文号、发证日期、有效期截止日、分包装企业名称、分包装企业地址、分包装文号批准日期、分包装文号有效期截止日、产品类别、药品本位码、药品本位码备注、地址（中文）、地址（英文）、国家（中文）、国家（英文）。&lt;/p&gt; &#xA;&lt;p&gt;我兴冲冲地拿着盒子一查，发现不对。所以我再次百度（艾玛），觉得这些条码应该叫&lt;strong&gt;药品电子监管码&lt;/strong&gt;&lt;sup&gt;[3]&lt;/sup&gt;，拿着药盒一验证，果然！就是监管码，而且最令人惊喜的是，我昨天开的5种药里，居然有两种药品上都贴了监管码，命中率40%！！！&lt;/p&gt; &#xA;&lt;p&gt;哦，监管码为20位的数字字串，编码规则如下：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;第1位，药品编码为8&lt;/li&gt; &#xA; &lt;li&gt;第2位，区分监管码的级别，一级码，二级码还是三级码&lt;/li&gt; &#xA; &lt;li&gt;第3-7位，资源码，代表产品的生产厂家，药品名称，规格，包装规则等&lt;/li&gt; &#xA; &lt;li&gt;第8-16，单件系列号&lt;/li&gt; &#xA; &lt;li&gt;第17-20位，为加密码&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;所以，可以开始干了&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;[2] 药品本位码属于&lt;strong&gt;国家药品编码&lt;/strong&gt;的一种。药品本位码用于国家药品注册信息管理，药品首次注册登记时赋予本位码，是国家批准注册药品唯一的身份标识；国家药品编码包括&lt;strong&gt;本位码&lt;/strong&gt;、&lt;strong&gt;监管码&lt;/strong&gt;和&lt;strong&gt;分类码&lt;/strong&gt;。本位码由药品国别码、药品类别码、药品本体码、校验码依次连接而成。&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;[3] 国家药监局为建立药品全品种的安全追溯体系，强化药品质量安全监管，确保公众用药安全。决定，凡生产&lt;strong&gt;基本药物品种&lt;/strong&gt;的中标企业，应在2011年3月31日前加入&lt;strong&gt;药品电子监管网&lt;/strong&gt;（www1.drugadmin.com），基本药物品种出厂前，生产企业须按规定在上市产品&lt;strong&gt;最小销售包装&lt;/strong&gt;上加印（贴）统一标识的&lt;strong&gt;药品电子监管码&lt;/strong&gt;，并通过监管网进行数据采集和报送。&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;##项目范围&lt;/p&gt; &#xA;&lt;p&gt;目标明确了，确定解决方案。&lt;/p&gt; &#xA;&lt;p&gt;我们关心的主要域对象有：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;药品：基本资源，主要用于查询，可参照监管局分成国产药和进口药两种&lt;/li&gt; &#xA; &lt;li&gt;处方：用户自行创建的处方记录，插入频繁，定期统计；应该包括(药品，药量，药单价)列表，医生或医院，处方时间&lt;/li&gt; &#xA; &lt;li&gt;用药计划，或者叫疗程：由处方衍生出的事件集，主要包括时间点，药品，用法，用量&lt;/li&gt; &#xA; &lt;li&gt;用户（痛苦悲催的）：你懂的&lt;/li&gt; &#xA; &lt;li&gt;医生（压力山大的）：可有可无吧，患者何苦为难医生。&lt;/li&gt; &#xA; &lt;li&gt;医院：有钱淫&lt;/li&gt; &#xA; &lt;li&gt;药店：要不要呢？先放上吧，毕竟也有推荐的行为&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;至于功能实现，首先要有个网站，然后要有各种手机App。wenyao.com被占了，所以网站就叫&lt;strong&gt;i问药&lt;/strong&gt;吧。各种手机App，就叫问药吧。&lt;/p&gt; &#xA;&lt;p&gt;###iWenyao.com&lt;/p&gt; &#xA;&lt;p&gt;这个网站存在的主要作用是为mobile 提供服务，但因为还担负着演示play框架的重任，所以页面还是需要做几个的，暂定如下：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;首页是药态，近期的排行榜（按用量或金额），或排名靠前药品的折线图。&lt;/li&gt; &#xA; &lt;li&gt;个人主页，当前用药计划，可以按列表和日历两种视图展示&lt;/li&gt; &#xA; &lt;li&gt;用药历史，你曾经吃过的那些药&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;关键组件：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;药品查询，用监管码，同时提供页面查询方式和http服务查询方式（json）&lt;/li&gt; &#xA; &lt;li&gt;小闹钟，定期触发事件，事件监听者以各种方式发送通知&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;先这么多吧，药店地图之类的做不做以后再说。&lt;/p&gt; &#xA;&lt;p&gt;###问药&lt;/p&gt; &#xA;&lt;p&gt;此处略去2000字。。。&lt;/p&gt;</summary>
  </entry>
</feed>