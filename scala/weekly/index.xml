<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-30T01:50:44Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zio/zio-http</title>
    <updated>2022-10-30T01:50:44Z</updated>
    <id>tag:github.com,2022-10-30:/zio/zio-http</id>
    <link href="https://github.com/zio/zio-http" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A scala library to write Http apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZIO Http&lt;/h1&gt; &#xA;&lt;p&gt;ZIO Http is a scala library for building http apps. It is powered by &lt;a href=&#34;https://zio.dev&#34;&gt;ZIO&lt;/a&gt; and &lt;a href=&#34;http://netty.io&#34;&gt;netty&lt;/a&gt; and aims at being the defacto solution for writing, highly scalable and &lt;a href=&#34;https://raw.githubusercontent.com/zio/zio-http/main/#benchmarks&#34;&gt;performant&lt;/a&gt; web applications using idiomatic scala.&lt;/p&gt; &#xA;&lt;p&gt;Check out the full documentation here: &lt;a href=&#34;https://zio.github.io/zio-http&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zio/zio-http/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt; &lt;a href=&#34;https://discord.com/channels/629491597070827530/819703129267372113&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629491597070827530.svg?logo=discord&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-http_2.13/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/dev.zio/zio-http_2.13?server=https%3A%2F%2Foss.sonatype.org&#34; alt=&#34;Sonatype Nexus (Releases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-http_2.13/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/dev.zio/zio-http_2.13?server=https%3A%2F%2Foss.sonatype.org&#34; alt=&#34;Sonatype Nexus (Snapshots)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/zio/zio-http&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/zio/zio-http.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open.vscode.dev/zio/zio-http&#34;&gt;&lt;img src=&#34;https://open.vscode.dev/badges/open-in-vscode.svg?sanitize=true&#34; alt=&#34;Open in Visual Studio Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zio/zio-http/main/#zio-http&#34;&gt;ZIO Http&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zio/zio-http/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zio/zio-http/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zio.github.io/zio-http/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;A simple Http server can be built using a few lines of code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import zio.http._&#xA;import zio.http.Server&#xA;import zio._&#xA;&#xA;object HelloWorld extends ZIOAppDefault {&#xA;&#xA;  val app: HttpApp[Any, Nothing] = Http.collect[Request] {&#xA;    case Method.GET -&amp;gt; !! / &#34;text&#34; =&amp;gt; Response.text(&#34;Hello World!&#34;)&#xA;  }&#xA;&#xA;  override val run =&#xA;    Server.start(8090, app)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;You can checkout more examples in the &lt;a href=&#34;https://github.com/zio/zio-http/tree/main/example/src/main/scala/example&#34;&gt;example&lt;/a&gt; project â€”&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-http/raw/main/zio-http-example/src/main/scala/example/HelloWorld.scala&#34;&gt;Simple Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-http/raw/main/zio-http-example/src/main/scala/example/HelloWorldAdvanced.scala&#34;&gt;Advanced Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-http/raw/main/zio-http-example/src/main/scala/example/WebSocketEcho.scala&#34;&gt;WebSocket Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-http/raw/main/zio-http-example/src/main/scala/example/StreamingResponse.scala&#34;&gt;Streaming Response&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-http/raw/main/zio-http-example/src/main/scala/example/SimpleClient.scala&#34;&gt;Simple Client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-http/raw/main/zio-http-example/src/main/scala/example/FileStreaming.scala&#34;&gt;File Streaming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-http/raw/main/zio-http-example/src/main/scala/example/BasicAuth.scala&#34;&gt;Basic Authentication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-http/raw/main/zio-http-example/src/main/scala/example/AuthenticationClient.scala&#34;&gt;JWT Authentication Client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zio/zio-http/raw/main/zio-http-example/src/main/scala/example/AuthenticationServer.scala&#34;&gt;JWT Authentication Server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Steps to run an example&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Edit the &lt;a href=&#34;https://github.com/zio/zio-http/raw/main/project/BuildHelper.scala#L109&#34;&gt;RunSettings&lt;/a&gt; - modify &lt;code&gt;className&lt;/code&gt; to the example you&#39;d like to run.&lt;/li&gt; &#xA; &lt;li&gt;From sbt shell, run &lt;code&gt;~example/reStart&lt;/code&gt;. You should see &lt;code&gt;Server started on port: 8090&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Send curl request for defined &lt;code&gt;http Routes&lt;/code&gt;, for eg : &lt;code&gt;curl -i &#34;http://localhost:8090/text&#34;&lt;/code&gt; for &lt;code&gt;example.HelloWorld&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Setup via &lt;code&gt;build.sbt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Stable&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;io.d11&#34; %% &#34;zhttp&#34; % &#34;[version]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Snapshot&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;dev.zio&#34; %% &#34;zio-http&#34; % &#34;[version]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; ZIO Http is compatible with &lt;code&gt;ZIO 1.x&lt;/code&gt; and &lt;code&gt;ZIO 2.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Watch Mode&lt;/h1&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://github.com/spray/sbt-revolver&#34;&gt;sbt-revolver&lt;/a&gt; plugin to start the server and run it in watch mode using &lt;code&gt;~ reStart&lt;/code&gt; command on the SBT console.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twitter-archive/snowflake</title>
    <updated>2022-10-30T01:50:44Z</updated>
    <id>tag:github.com,2022-10-30:/twitter-archive/snowflake</id>
    <link href="https://github.com/twitter-archive/snowflake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snowflake is a network service for generating unique ID numbers at high scale with some simple guarantees.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;We have retired the initial release of Snowflake and working on open sourcing the next version based on &lt;a href=&#34;https://twitter.github.io/twitter-server/&#34;&gt;Twitter-server&lt;/a&gt;, in a form that can run anywhere without requiring Twitter&#39;s own infrastructure services.&lt;/p&gt; &#xA;&lt;p&gt;The initial version, released in 2010, was based on Apache Thrift and it predated &lt;a href=&#34;https://twitter.github.io/finagle/&#34;&gt;Finagle&lt;/a&gt;, our building block for RPC services at Twitter. The Snowflake we&#39;re using internally is a full rewrite and heavily relies on existing infrastructure at Twitter to run. We cannot commit to a date but we&#39;re doing our best to add necessary features to make Snowflake fit for many environments outside of Twitter.&lt;/p&gt; &#xA;&lt;p&gt;Source code is still in the repository and is reachable from &lt;a href=&#34;https://github.com/twitter/snowflake/releases/tag/snowflake-2010&#34;&gt;snowflake-2010&lt;/a&gt; tag.&lt;/p&gt; &#xA;&lt;p&gt;We won&#39;t be accepting pull requests or responding to issues for the retired release.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nbd-wtf/obw</title>
    <updated>2022-10-30T01:50:44Z</updated>
    <id>tag:github.com,2022-10-30:/nbd-wtf/obw</id>
    <link href="https://github.com/nbd-wtf/obw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lightweight android bitcoin and lightning wallet&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://nbd.wtf&#34;&gt;&lt;img align=&#34;right&#34; height=&#34;196&#34; src=&#34;https://user-images.githubusercontent.com/1653275/194609043-0add674b-dd40-41ed-986c-ab4a2e053092.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The &lt;em&gt;Open Bitcoin Wallet&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;em&gt;Open Bitcoin Wallet&lt;/em&gt; is an Android Bitcoin and Lightning wallet, a fork of &lt;a href=&#34;https://github.com/btcontract/wallet&#34;&gt;&lt;em&gt;Simple Bitcoin Wallet&lt;/em&gt;&lt;/a&gt; focused on providing a pleasant and simple experience with advanced features.&lt;/p&gt; &#xA;&lt;p&gt;Some of the features it includes are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lightweight Bitcoin wallet that uses Electrum servers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;can use an Electrum server specified by the user or random ones&lt;/li&gt; &#xA;   &lt;li&gt;support for RBF and CPFP&lt;/li&gt; &#xA;   &lt;li&gt;coin control (select which UTXOs to spend or not)&lt;/li&gt; &#xA;   &lt;li&gt;payments to multiple addresses&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Standalone, autonomous Lightning capabilities: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;can connect to any node&lt;/li&gt; &#xA;   &lt;li&gt;open channels, close channels, force-close channels, close channels to specific address&lt;/li&gt; &#xA;   &lt;li&gt;route payments without the use of any third-party service, all routing done on the wallet&lt;/li&gt; &#xA;   &lt;li&gt;offer to retry payments with increased fee tolerance if the first attempts fail&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Hosted Channels &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;lightweight credit-based virtual channels that use an open and interoperable protocol&lt;/li&gt; &#xA;   &lt;li&gt;can open hosted channels to any node that supports the host side of the protocol and can be connected to&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Full TOR support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;built-in TOR, no Orbot needed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Split-payments support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the same invoice from A can be paid by multiple wallets (B, C, D and so on) atomically&lt;/li&gt; &#xA;   &lt;li&gt;perfect for splitting bills at restaurants&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;LNURL support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;lnurl-channel, lnurl-hosted-channel&lt;/li&gt; &#xA;   &lt;li&gt;lnurl-pay, lightning address, comments, message, URL and AES-encrypted &lt;code&gt;successAction&lt;/code&gt;s&lt;/li&gt; &#xA;   &lt;li&gt;lnurl-withdraw&lt;/li&gt; &#xA;   &lt;li&gt;keyauth (lnurl-auth)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1653275/186679611-c5c25d94-752a-4368-a0e4-7e7109fa5548.gif&#34; alt=&#34;obiwan&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;IMMORTAN&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Open Bitcoin Wallet&lt;/em&gt; is based on &lt;a href=&#34;https://github.com/nbd-wtf/immortan&#34;&gt;IMMORTAN&lt;/a&gt;, a versatile, flexible and reasonable library for building lightweight Bitcoin and Lightning wallets.&lt;/p&gt; &#xA;&lt;h2&gt;How to build from source&lt;/h2&gt; &#xA;&lt;p&gt;Run this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/nbd-wtf/obw.git&#xA;cd obw&#xA;./gradlew assembleDebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The APK will be at &lt;code&gt;app/build/outputs/apk/debug&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other commands: &lt;code&gt;./gradlew installDebug&lt;/code&gt;, &lt;code&gt;./gradlew assembleRelease&lt;/code&gt;, &lt;code&gt;./gradlew bundleRelease&lt;/code&gt; (with Gradle options &lt;code&gt;-PSTORE_FILE=... -PSTORE_PASSWORD=... -PKEY_PASSWORD=... -PKEY_ALIAS=...&lt;/code&gt; when signing to publish to Google Play Store).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache.&lt;/p&gt;</summary>
  </entry>
</feed>