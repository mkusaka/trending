<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-26T02:02:14Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>snowplow/enrich</title>
    <updated>2023-03-26T02:02:14Z</updated>
    <id>tag:github.com,2023-03-26:/snowplow/enrich</id>
    <link href="https://github.com/snowplow/enrich" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snowplow Enrichment jobs and library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/snowplow/enrich/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-3.7.0-blue.svg?style=flat&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-Apache--2-blue.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/snowplow/enrich?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/snowplow/enrich/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/snowplow/enrich/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/snowplow/enrich/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Snowplow Enrich&lt;/h1&gt; &#xA;&lt;p&gt;Snowplow Enrich is a set of applications and libraries for processing raw Snowplow events into validated and enriched Snowplow events. It consists of following modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Snowplow Common Enrich - a core library, containing all validation and transformation logic. Published on Maven Central&lt;/li&gt; &#xA; &lt;li&gt;Snowplow Stream Enrich - a set of applications working with Kinesis, Kafka and NSQ. Each asset published as Docker image on DockerHub&lt;/li&gt; &#xA; &lt;li&gt;Snowplow Enrich PubSub - an application for a GCP pipeline that does not require a distributed computing framework. Published as Docker image on DockerHub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Snowplow Enrich provides record-level enrichment only: feeding in 1 raw Snowplow event will yield exactly 1 record out, where a record may be an enriched Snowplow event or a reported bad record.&lt;/p&gt; &#xA;&lt;h2&gt;Find out more&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Technical Docs&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Setup Guide&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Roadmap&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Contributing&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://d3i6fms1cm1j0i.cloudfront.net/github/images/techdocs.png&#34; alt=&#34;i1&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://d3i6fms1cm1j0i.cloudfront.net/github/images/setup.png&#34; alt=&#34;i2&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://d3i6fms1cm1j0i.cloudfront.net/github/images/roadmap.png&#34; alt=&#34;i3&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://d3i6fms1cm1j0i.cloudfront.net/github/images/contributing.png&#34; alt=&#34;i4&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://docs.snowplowanalytics.com/docs/pipeline-components-and-applications/enrichment-components/&#34;&gt;Technical Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://docs.snowplowanalytics.com/docs/getting-started-on-snowplow-open-source/&#34;&gt;Setup Guide&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/snowplow/enrich/issues&#34;&gt;Roadmap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://docs.snowplowanalytics.com/docs/contributing/&#34;&gt;Contributing&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Copyright and license&lt;/h2&gt; &#xA;&lt;p&gt;Snowplow Enrich is copyright 2012-2022 Snowplow Analytics Ltd.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, Version 2.0&lt;/a&gt; (the &#34;License&#34;); you may not use this software except in compliance with the License.&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/FFTGenerator</title>
    <updated>2023-03-26T02:02:14Z</updated>
    <id>tag:github.com,2023-03-26:/ucb-bar/FFTGenerator</id>
    <link href="https://github.com/ucb-bar/FFTGenerator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MMIO-Based FFT Generator for Chipyard&lt;/h1&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for this repo can be found in the &lt;a href=&#34;https://github.com/ucb-bar/chipyard&#34;&gt;Chipyard&lt;/a&gt; repo, where this project is intended to be used.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;The code for the FFT Generator was adapted from the ADEPT Lab at UC Berkeley&#39;s &lt;a href=&#34;https://adept.eecs.berkeley.edu/projects/hydra-spine/&#34;&gt;Hydra Spine&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;Authors for the original project (in no particular order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;James Dunn, UC Berkeley (&lt;a href=&#34;mailto:dunn@eecs.berkeley.edu&#34;&gt;dunn@eecs.berkeley.edu&lt;/a&gt;) (&lt;code&gt;Deserialize.scala&lt;/code&gt;, &lt;code&gt;Tail.scala&lt;/code&gt;, &lt;code&gt;Unscramble.scala&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Stevo Bailey (&lt;a href=&#34;mailto:stevo.bailey@berkeley.edu&#34;&gt;stevo.bailey@berkeley.edu&lt;/a&gt;) (&lt;code&gt;FFT.scala&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Sciss/ScalaFreesound</title>
    <updated>2023-03-26T02:02:14Z</updated>
    <id>tag:github.com,2023-03-26:/Sciss/ScalaFreesound</id>
    <link href="https://github.com/Sciss/ScalaFreesound" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Freesound database queries and downloads for Scala.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ScalaFreesound&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Sciss/ScalaFreesound/actions?query=workflow%3A%22Scala+CI%22&#34;&gt;&lt;img src=&#34;https://github.com/Sciss/ScalaFreesound/workflows/Scala%20CI/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/de.sciss/scalafreesound-core_2.13&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/de.sciss/scalafreesound_2.13/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/sciss&#34;&gt;&lt;img alt=&#34;Donate using Liberapay&#34; src=&#34;https://liberapay.com/assets/widgets/donate.svg?sanitize=true&#34; height=&#34;24&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;statement&lt;/h2&gt; &#xA;&lt;p&gt;ScalaFreesound is a library to query the &lt;a href=&#34;https://freesound.org&#34;&gt;Freesound audio database&lt;/a&gt;. It is (C)opyright 2010–2022 by Hanns Holger Rutz. All rights reserved. It is released under the &lt;a href=&#34;https://github.com/Sciss/ScalaFreesound/raw/main/LICENSE&#34;&gt;GNU Affero General Public License&lt;/a&gt; and comes with absolutely no warranties. To contact the author, send an e-mail to &lt;code&gt;contact@sciss.de&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please consider supporting this project through Liberapay (see badge above) – thank you!&lt;/p&gt; &#xA;&lt;h2&gt;requirements / installation&lt;/h2&gt; &#xA;&lt;p&gt;This project builds with sbt against Scala 2.12, 2.13, Dotty. The last version to support Scala 2.11 was 1.19.0.&lt;/p&gt; &#xA;&lt;p&gt;To link to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libraryDependencies += &#34;de.sciss&#34; %% &#34;scalafreesound&#34;  % v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The current version &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;&#34;2.12.0&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or to link to an individual module&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libraryDependencies += &#34;de.sciss&#34; %% &#34;scalafreesound-core&#34;        % v&#xA;libraryDependencies += &#34;de.sciss&#34; %% &#34;scalafreesound-swing&#34;       % v&#xA;libraryDependencies += &#34;de.sciss&#34; %% &#34;scalafreesound-lucre&#34;       % v&#xA;libraryDependencies += &#34;de.sciss&#34; %% &#34;scalafreesound-views&#34;       % v&#xA;libraryDependencies += &#34;de.sciss&#34; %% &#34;scalafreesound-compression&#34; % v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the &lt;code&gt;core&lt;/code&gt; module provides functions for searching the database and downloading previews and files.&lt;/li&gt; &#xA; &lt;li&gt;the &lt;code&gt;swing&lt;/code&gt; module provides user interface elements for searching and viewing results.&lt;/li&gt; &#xA; &lt;li&gt;the &lt;code&gt;lucre&lt;/code&gt; module provides a bridge to SoundProcesses/.&lt;/li&gt; &#xA; &lt;li&gt;the &lt;code&gt;views&lt;/code&gt; module provides a bridge to &lt;a href=&#34;https://www.sciss.de/mellite/&#34;&gt;Mellite&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;the &lt;code&gt;compression&lt;/code&gt; module provides decoders from FLAC, Ogg, and mp3 to PCM.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see the file &lt;a href=&#34;https://raw.githubusercontent.com/Sciss/ScalaFreesound/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;overview&lt;/h2&gt; &#xA;&lt;p&gt;The easiest to play around is to run &lt;code&gt;sbt test:console&lt;/code&gt; which will import useful symbols and also load the files &lt;code&gt;client.json&lt;/code&gt; and &lt;code&gt;access_token&lt;/code&gt; if found. An implicit &lt;code&gt;Client&lt;/code&gt; is required for searches, and an implicit &lt;code&gt;AccessToken&lt;/code&gt; is required for downloading sounds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import de.sciss.freesound._&#xA;import Implicits._&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have never used Freesound, you must first create an account. Then you need to generate an API key. Go to &lt;a href=&#34;https://www.freesound.org/docs/api/authentication.html#token-authentication&#34;&gt;www.freesound.org/docs/api/authentication.html#token-authentication&lt;/a&gt; and follow the link to &lt;a href=&#34;http://www.freesound.org/apiv2/apply&#34;&gt;www.freesound.org/apiv2/apply&lt;/a&gt;. Once you have created a key, create a file &lt;code&gt;client.json&lt;/code&gt; with the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;id&#34;    : &#34;&amp;lt;client-id&amp;gt;&#34;,&#xA;  &#34;secret&#34;: &#34;&amp;lt;client-secret&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the bits copied from the &lt;strong&gt;Client id&lt;/strong&gt; and &lt;strong&gt;Client secret/Api key&lt;/strong&gt; sections into these two entries. The client keys identify the application that is running queries against the Freesound database, for operations that can be performed without identifying as a particular user. If you don&#39;t want to restart the sbt console to automatically load those keys, simply define them as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;implicit val client = Client(id = &#34;foo&#34;, secret = &#34;bar&#34;) // your correct code here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you should be able to run a query&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val fut = Freesound.textSearch(&#34;water&#34;, Filter(numChannels = 2, sampleRate = 44100, duration = 1.0 to *), sort = Sort.DurationShortest)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The search filter specifies that the sound must be stereophonic at 44.1 kHz sampling rate, and with a duration of at least one second. This returns a &lt;code&gt;Future[Seq[Sound]]&lt;/code&gt;, sorted by duration. So once that is finished, you can access the values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;fut.foreach { res =&amp;gt; println(res.head) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will print something like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Sound(234600,&#xA;  fileName    = Knife Hit Pan Filled With Water 4.wav,&#xA;  tags        = List(impact, hit, metal, water, knife, struck, pong, pan),&#xA;  description = Recorded using a Zoom H4N.,&#xA;  userName    = riddzy,&#xA;  created     = 2014-04-23T17:38:19.079851,&#xA;  license     = http://creativecommons.org/licenses/by/3.0/,&#xA;  pack &#x9;      = None,&#xA;  geoTag      = None,&#xA;  fileType    = Wave,&#xA;  duration    = 1.000,&#xA;  numChannels = 2,&#xA;  sampleRate  = 44100.0,&#xA;  bitDepth    = 16,&#xA;  bitRate     = 1387.0,&#xA;  fileSize    = 177492,&#xA;  numDownloads= 20,&#xA;  avgRating   = 0.0,&#xA;  numRatings  = 0,&#xA;  numComments = 0&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s assume the future is completed, and we assign the first result for simplicity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val sound = fut.value.get.get.head&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The download URL would be this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Freesound.urlSoundBrowse.format(sound.userName, sound.id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Giving &lt;a href=&#34;https://www.freesound.org/people/riddzy/sounds/234600/&#34;&gt;www.freesound.org/people/riddzy/sounds/234600/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Next, we want to download that sound. For this we need an OAuth2 authentication based on our user account. You must open the following website: &lt;a href=&#34;https://www.freesound.org/apiv2/oauth2/authorize/?client_id=########&amp;amp;response_type=code&#34;&gt;https://www.freesound.org/apiv2/oauth2/authorize/?client_id=########&amp;amp;response_type=code&lt;/a&gt; Where &lt;code&gt;########&lt;/code&gt; is replaced by the &lt;strong&gt;Client id&lt;/strong&gt; section of the api-key registration page. This will then give you a message like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Permission granted to application ScalaFreesound!.&#xA;Your authorization code:&#xA;########&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can then generate access keys using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val futAuth = Freesound.getAuth(&amp;lt;code&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And write those keys to disk if we wish:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;futAuth.foreach { implicit auth =&amp;gt; Freesound.writeAuth() }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we&#39;re ready to download the sound file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Freesound.download(sound.id, new java.io.File(sound.fileName))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We should then find the file &lt;code&gt;Knife Hit Pan Filled With Water 4.wav&lt;/code&gt; on the disk.&lt;/p&gt;</summary>
  </entry>
</feed>