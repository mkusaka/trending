<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-28T01:42:00Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hyperledger/identus-cloud-agent</title>
    <updated>2024-04-28T01:42:00Z</updated>
    <id>tag:github.com,2024-04-28:/hyperledger/identus-cloud-agent</id>
    <link href="https://github.com/hyperledger/identus-cloud-agent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Enterprise Cloud Agent&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://atalaprism.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hyperledger/identus-cloud-agent/main/docs/images/logos/atala-prism-logo.png&#34; alt=&#34;atala-prism-logo&#34; width=&#34;513px&#34; height=&#34;99px&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;i&gt; &lt;font size=&#34;18&#34;&gt;Identus Cloud Agent&lt;/font&gt; &lt;/i&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://coveralls.io/github/input-output-hk/atala-prism-building-blocks?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/input-output-hk/atala-prism-building-blocks/badge.svg?branch=main&amp;amp;t=91BUzX&amp;amp;kill_cache=1&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hyperledger/identus-cloud-agent/actions/workflows/unit-tests.yml&#34;&gt; &lt;img src=&#34;https://github.com/hyperledger/identus-cloud-agent/actions/workflows/unit-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit tests&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/hyperledger/identus-cloud-agent/actions/workflows/integration-tests.yml&#34;&gt; &lt;img src=&#34;https://github.com/hyperledger/identus-cloud-agent/actions/workflows/integration-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;End-to-end tests&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/hyperledger/identus-cloud-agent/actions/workflows/performance-tests.yml&#34;&gt; &lt;img src=&#34;https://github.com/hyperledger/identus-cloud-agent/actions/workflows/performance-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Performance tests&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The Cloud Agent is a W3C/Aries standards-based cloud agent written in Scala that provides self-sovereign identity services to build products and solutions based on it. The term &#34;cloud&#34; indicates that it operates on servers and is not intended for use on mobile devices.&lt;/p&gt; &#xA;&lt;p&gt;Cloud Agent supports standard-based protocols built on top of DIDComm V2 for issuing, verifying, and holding verifiable credentials using both JWT and Hyperledger AnonCreds (coming soon) formats.&lt;/p&gt; &#xA;&lt;p&gt;In order to use the Cloud Agent, you establish a business logic controller responsible for communicating with the agent (initiating HTTP requests and processing webhook notifications). This controller can be created using any programming language capable of sending and receiving HTTP requests.&lt;/p&gt; &#xA;&lt;p&gt;As a result, you can concentrate on crafting self-sovereign identity solutions using well-known web development tools, without the need to delve into the intricacies of lower-level cryptography and identity protocol internals.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rest API&lt;/li&gt; &#xA; &lt;li&gt;DIDComm V2&lt;/li&gt; &#xA; &lt;li&gt;W3C-compliant &lt;code&gt;did:prism&lt;/code&gt; and &lt;code&gt;did:peer&lt;/code&gt; methods&lt;/li&gt; &#xA; &lt;li&gt;Credential types &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JWT&lt;/li&gt; &#xA;   &lt;li&gt;AnonCreds (coming soon)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;HTTP events notification&lt;/li&gt; &#xA; &lt;li&gt;Cardano as a distributed ledger&lt;/li&gt; &#xA; &lt;li&gt;Secrets management with Hashicorp vault&lt;/li&gt; &#xA; &lt;li&gt;Multi-tenancy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example use cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A government issues verifiable credentials (VCs) to its citizens to prove their identity and access government services.&lt;/li&gt; &#xA; &lt;li&gt;An enterprise issues VCs to its employees to prove their employment and access enterprise services.&lt;/li&gt; &#xA; &lt;li&gt;A Web3 authentication service based on verifiable presentations (VPs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Understanding SSI&lt;/h3&gt; &#xA;&lt;p&gt;Before starting to use the Cloud Agent, it is important to understand the basic concepts of self-sovereign identity (SSI). The following resources provide a good introduction to SSI:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atalaprism.io/docs/category/concepts/&#34;&gt;Identus SSI introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.edx.org/learn/computer-programming/the-linux-foundation-getting-started-with-self-sovereign-identity&#34;&gt;Linux Foundation Course: Getting Started with SSI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Architecture&lt;/h3&gt; &#xA;&lt;p&gt;The next diagram offers a concise architectural overview, depicting a Cloud Agent instance, a controller, the interconnections linking the controller and agent, as well as the external routes to other agents and public ledgers across the Internet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hyperledger/identus-cloud-agent/main/docs/images/cloud-agent-architecture-dark.png#gh-dark-mode-only&#34; alt=&#34;Cloud Agent architecture&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hyperledger/identus-cloud-agent/main/docs/images/cloud-agent-architecture-light.png#gh-light-mode-only&#34; alt=&#34;Cloud Agent architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running the Cloud Agent locally on MacOS or Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java (OpenJDK 21)&lt;/li&gt; &#xA; &lt;li&gt;SBT (latest version)&lt;/li&gt; &#xA; &lt;li&gt;Git (for cloning the repository)&lt;/li&gt; &#xA; &lt;li&gt;Docker (for running the PostgreSQL database, Hashicorp Vault, APISIX, and PRISM Node)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens&#34;&gt;GITHUB_TOKEN&lt;/a&gt; environment variable (required for SBT plugins and access to the GitHub packages)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Login to GitHub packages&lt;/h4&gt; &#xA;&lt;p&gt;To login to GitHub packages, you need to create a personal access token and set it as an environment variable together with your GitHub username. Here is an example of how you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export GITHUB_TOKEN=your-personal-access-token&#xA;export GITHUB_USER=your-github-username&#xA;docker login ghcr.io -u $GITHUB_USER -p $GITHUB_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Compile, Test, create the docker image of the Cloud Agent&lt;/h4&gt; &#xA;&lt;p&gt;To compile, test and publish local the image of the Cloud Agent, you can use the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt clean compile test docker:publishLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation and usage&lt;/h3&gt; &#xA;&lt;p&gt;Cloud Agent is distributed as a Docker image to be run in a containerized environment. All versions can be found &lt;a href=&#34;https://github.com/orgs/input-output-hk/packages/container/package/cloud-agent&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following sections describe how to run the Cloud Agent in different configurations.&lt;/p&gt; &#xA;&lt;h4&gt;Configuration&lt;/h4&gt; &#xA;&lt;p&gt;The Cloud Agent can be configured to use different types of ledger, secret storage and DID persistence. Any combination of options is available, but the most common configurations are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Configuration&lt;/th&gt; &#xA;   &lt;th&gt;Secret Storage&lt;/th&gt; &#xA;   &lt;th&gt;DIDs persistence&lt;/th&gt; &#xA;   &lt;th&gt;Prism Node&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dev&lt;/td&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;In-memory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pre-production&lt;/td&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Distributed Ledger testnet (preview or preprod)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Production&lt;/td&gt; &#xA;   &lt;td&gt;Hashicorp&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Distributed Ledger mainnet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To start playing with Cloud Agent, we recommend using the Dev configuration. Pre-production and production configurations are intended for real-world use cases and require additional more complex configurations of the Distributed Ledger stack setup.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you&#39;re interested in a hosted version of Cloud Agent, please, contact us at &lt;a href=&#34;https://atalaprism.io&#34;&gt;atalaprism.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;System requirements&lt;/h4&gt; &#xA;&lt;p&gt;System requirements can vary depending on the use case. The following are the minimum requirements for running the Cloud Agent with the Dev configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux or MacOS operating system&lt;/li&gt; &#xA; &lt;li&gt;Docker (with docker-compose support)&lt;/li&gt; &#xA; &lt;li&gt;Modern x86 or ARM-based CPU&lt;/li&gt; &#xA; &lt;li&gt;&amp;gt;=2GB RAM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Running locally in demo mode&lt;/h4&gt; &#xA;&lt;p&gt;Here is a general example of running a Cloud Agent locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PORT=${PORT} AGENT_VERSION=${AGENT_VERSION} PRISM_NODE_VERSION=${PRISM_NODE_VERSION} \&#xA;  docker compose \&#xA;    -p &#34;${AGENT_ROLE}&#34; \&#xA;    -f ./infrastructure/shared/docker-compose-demo.yml \&#xA;    up --wait&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;PORT&lt;/code&gt; variable is used to specify the port number for the Cloud Agent to listen on. The &lt;code&gt;AGENT_VERSION&lt;/code&gt; and &lt;code&gt;PRISM_NODE_VERSION&lt;/code&gt; variables are used to specify the versions of the Cloud Agent and PRISM Node to use. The &lt;code&gt;AGENT_ROLE&lt;/code&gt; variable is used to specify the role of the Cloud Agent. The &lt;code&gt;AGENT_ROLE&lt;/code&gt; variable can be set to &lt;code&gt;issuer&lt;/code&gt;, &lt;code&gt;verifier&lt;/code&gt; or &lt;code&gt;holder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In real life, you will need to start at least two Cloud Agent instances with different roles. For example, you can start one instance with the &lt;code&gt;issuer&lt;/code&gt; role and another one with the &lt;code&gt;holder&lt;/code&gt; role. The &lt;code&gt;issuer&lt;/code&gt; instance will be used to issue verifiable credentials (VCs) and the &lt;code&gt;holder&lt;/code&gt; instance will be used to hold VCs. Here is an example of how you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PORT=8080 AGENT_VERSION=${AGENT_VERSION} PRISM_NODE_VERSION=2.2.1 \&#xA;  docker compose \&#xA;    -p &#34;issuer&#34; \&#xA;    -f ./infrastructure/shared/docker-compose-demo.yml \&#xA;    up --wait&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PORT=8090 AGENT_VERSION=${AGENT_VERSION} PRISM_NODE_VERSION=2.2.1 \&#xA;  docker compose \&#xA;    -p &#34;holder&#34; \&#xA;    -f ./infrastructure/shared/docker-compose-demo.yml \&#xA;    up --wait&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the Cloud Agent is started successfully, all the running containers should achieve &lt;code&gt;Healthy&lt;/code&gt; state, and Cloud Agent Rest API should be available at the specified port, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;http://localhost:8080/cloud-agent&lt;/code&gt; for the &lt;code&gt;issuer&lt;/code&gt; instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://localhost:8090/cloud-agent&lt;/code&gt; for the &lt;code&gt;holder&lt;/code&gt; instance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can check the status of the running containers using the &lt;a href=&#34;https://docs.atalaprism.io/agent-api/#tag/System/operation/systemHealth&#34;&gt;health endpoint&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://localhost:8080/cloud-agent/_system/health&#xA;{&#34;version&#34;:&#34;1.19.1&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For more information about all available configuration parameters, please, check &lt;a href=&#34;https://docs.atalaprism.io/docs/atala-prism/prism-cloud-agent/environment-variables&#34;&gt;Cloud Agent configuration&lt;/a&gt; section at the documentation portal and edit the &lt;code&gt;docker-compose-demo.yml&lt;/code&gt; file accordingly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Compatibility between Cloud Agent and PRISM Node&lt;/h4&gt; &#xA;&lt;p&gt;There could be some incompatibilities between the most latest versions of Cloud Agent and PRISM Node. Please, use the following table to check the compatibility between the versions:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Cloud Agent&lt;/th&gt; &#xA;   &lt;th&gt;PRISM Node&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;=1.9.2&lt;/td&gt; &#xA;   &lt;td&gt;2.2.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;1.9.2&lt;/td&gt; &#xA;   &lt;td&gt;2.1.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note: it is not guaranteed that the latest version of Cloud Agent will work with the latest version of PRISM Node. We recommend using the versions from the table above.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Following the Cloud Agent tutorials&lt;/h3&gt; &#xA;&lt;p&gt;The following tutorials will help you get started with the Cloud Agent and issue your first credentials:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atalaprism.io/tutorials/category/dids/&#34;&gt;Creating, updating and deactivating Decentralized Identifiers (DIDs)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atalaprism.io/tutorials/connections/connection&#34;&gt;Setting up connections between agents using out-of-band (OOB) protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atalaprism.io/tutorials/credentials/issue&#34;&gt;Issuing verifiable credentials (VCs)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.atalaprism.io/tutorials/credentials/present-proof&#34;&gt;Presenting VC proofs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;User documentation&lt;/h2&gt; &#xA;&lt;p&gt;All extended documentation, tutorials and API references for the Identus ecosystem can be found at &lt;a href=&#34;https://docs.atalaprism.io/&#34;&gt;https://docs.atalaprism.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://raw.githubusercontent.com/hyperledger/identus-cloud-agent/main/CONTRIBUTING.md&#34;&gt;contributions guidelines&lt;/a&gt; and submit your PRs. We enforce &lt;a href=&#34;https://raw.githubusercontent.com/hyperledger/identus-cloud-agent/main/DCO.md&#34;&gt;developer certificate of origin (DCO) commit signing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We also welcome issues submitted about problems you encounter in using Cloud Agent.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hyperledger/identus-cloud-agent/main/LICENSE&#34;&gt;Apache License Version 2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Love the repo? Give our repo a star &lt;span&gt;⭐&lt;/span&gt; &lt;span&gt;⬆&lt;/span&gt;.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/chipyard</title>
    <updated>2024-04-28T01:42:00Z</updated>
    <id>tag:github.com,2024-04-28:/ucb-bar/chipyard</id>
    <link href="https://github.com/ucb-bar/chipyard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Agile RISC-V SoC Design Framework with in-order cores, out-of-order cores, accelerators, and more&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/ucb-bar/chipyard/raw/main/docs/_static/images/chipyard-logo-full.png&#34; alt=&#34;CHIPYARD&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Chipyard Framework &lt;a href=&#34;https://github.com/ucb-bar/chipyard/actions&#34;&gt;&lt;img src=&#34;https://github.com/ucb-bar/chipyard/actions/workflows/chipyard-run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Quick Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stable Documentation&lt;/strong&gt;: &lt;a href=&#34;https://chipyard.readthedocs.io/&#34;&gt;https://chipyard.readthedocs.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Question Forum&lt;/strong&gt;: &lt;a href=&#34;https://groups.google.com/forum/#!forum/chipyard&#34;&gt;https://groups.google.com/forum/#!forum/chipyard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bugs and Feature Requests&lt;/strong&gt;: &lt;a href=&#34;https://github.com/ucb-bar/chipyard/issues&#34;&gt;https://github.com/ucb-bar/chipyard/issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Chipyard&lt;/h2&gt; &#xA;&lt;p&gt;To get started using Chipyard, see the stable documentation on the Chipyard documentation site: &lt;a href=&#34;https://chipyard.readthedocs.io/&#34;&gt;https://chipyard.readthedocs.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Chipyard&lt;/h2&gt; &#xA;&lt;p&gt;Chipyard is an open source framework for agile development of Chisel-based systems-on-chip. It will allow you to leverage the Chisel HDL, Rocket Chip SoC generator, and other &lt;a href=&#34;https://berkeley.edu&#34;&gt;Berkeley&lt;/a&gt; projects to produce a &lt;a href=&#34;https://riscv.org/&#34;&gt;RISC-V&lt;/a&gt; SoC with everything from MMIO-mapped peripherals to custom accelerators. Chipyard contains processor cores (&lt;a href=&#34;https://github.com/freechipsproject/rocket-chip&#34;&gt;Rocket&lt;/a&gt;, &lt;a href=&#34;https://github.com/riscv-boom/riscv-boom&#34;&gt;BOOM&lt;/a&gt;, &lt;a href=&#34;https://github.com/openhwgroup/cva6/&#34;&gt;CVA6 (Ariane)&lt;/a&gt;), accelerators (&lt;a href=&#34;https://www2.eecs.berkeley.edu/Pubs/TechRpts/2015/EECS-2015-262.pdf&#34;&gt;Hwacha&lt;/a&gt;, &lt;a href=&#34;https://github.com/ucb-bar/gemmini&#34;&gt;Gemmini&lt;/a&gt;, &lt;a href=&#34;http://nvdla.org/&#34;&gt;NVDLA&lt;/a&gt;), memory systems, and additional peripherals and tooling to help create a full featured SoC. Chipyard supports multiple concurrent flows of agile hardware development, including software RTL simulation, FPGA-accelerated simulation (&lt;a href=&#34;https://fires.im&#34;&gt;FireSim&lt;/a&gt;), automated VLSI flows (&lt;a href=&#34;https://github.com/ucb-bar/hammer&#34;&gt;Hammer&lt;/a&gt;), and software workload generation for bare-metal and Linux-based systems (&lt;a href=&#34;https://github.com/firesim/FireMarshal/&#34;&gt;FireMarshal&lt;/a&gt;). Chipyard is actively developed in the &lt;a href=&#34;http://bar.eecs.berkeley.edu&#34;&gt;Berkeley Architecture Research Group&lt;/a&gt; in the &lt;a href=&#34;https://eecs.berkeley.edu&#34;&gt;Electrical Engineering and Computer Sciences Department&lt;/a&gt; at the &lt;a href=&#34;https://berkeley.edu&#34;&gt;University of California, Berkeley&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chipyard Stable Documentation: &lt;a href=&#34;https://chipyard.readthedocs.io/&#34;&gt;https://chipyard.readthedocs.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chipyard (x FireSim) Tutorial: &lt;a href=&#34;https://fires.im/tutorial-recent/&#34;&gt;https://fires.im/tutorial-recent/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chipyard Basics slides: &lt;a href=&#34;https://fires.im/asplos23-slides-pdf/02_chipyard_basics.pdf&#34;&gt;https://fires.im/asplos23-slides-pdf/02_chipyard_basics.pdf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the Chipyard Mailing List: &lt;a href=&#34;https://groups.google.com/forum/#!forum/chipyard&#34;&gt;https://groups.google.com/forum/#!forum/chipyard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you find a bug or would like propose a feature, post an issue on this repo: &lt;a href=&#34;https://github.com/ucb-bar/chipyard/issues&#34;&gt;https://github.com/ucb-bar/chipyard/issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ucb-bar/chipyard/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attribution and Chipyard-related Publications&lt;/h2&gt; &#xA;&lt;p&gt;If used for research, please cite Chipyard by the following publication:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{chipyard,&#xA;  author={Amid, Alon and Biancolin, David and Gonzalez, Abraham and Grubb, Daniel and Karandikar, Sagar and Liew, Harrison and Magyar,   Albert and Mao, Howard and Ou, Albert and Pemberton, Nathan and Rigge, Paul and Schmidt, Colin and Wright, John and Zhao, Jerry and Shao, Yakun Sophia and Asanovi\&#39;{c}, Krste and Nikoli\&#39;{c}, Borivoje},&#xA;  journal={IEEE Micro},&#xA;  title={Chipyard: Integrated Design, Simulation, and Implementation Framework for Custom SoCs},&#xA;  year={2020},&#xA;  volume={40},&#xA;  number={4},&#xA;  pages={10-21},&#xA;  doi={10.1109/MM.2020.2996616},&#xA;  ISSN={1937-4143},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chipyard&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A. Amid, et al. &lt;em&gt;IEEE Micro&#39;20&lt;/em&gt; &lt;a href=&#34;https://ieeexplore.ieee.org/document/9099108&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A. Amid, et al. &lt;em&gt;DAC&#39;20&lt;/em&gt; &lt;a href=&#34;https://ieeexplore.ieee.org/document/9218756&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A. Amid, et al. &lt;em&gt;ISCAS&#39;21&lt;/em&gt; &lt;a href=&#34;https://ieeexplore.ieee.org/abstract/document/9401515&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These additional publications cover many of the internal components used in Chipyard. However, for the most up-to-date details, users should refer to the Chipyard docs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generators&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Rocket Chip&lt;/strong&gt;: K. Asanovic, et al., &lt;em&gt;UCB EECS TR&lt;/em&gt;. &lt;a href=&#34;http://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-17.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BOOM&lt;/strong&gt;: C. Celio, et al., &lt;em&gt;Hot Chips 30&lt;/em&gt;. &lt;a href=&#34;https://old.hotchips.org/hc30/1conf/1.03_Berkeley_BROOM_HC30.Berkeley.Celio.v02.pdf&#34;&gt;PDF&lt;/a&gt;. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;SonicBOOM (BOOMv3)&lt;/strong&gt;: J. Zhao, et al., &lt;em&gt;CARRV&#39;20&lt;/em&gt;. &lt;a href=&#34;https://carrv.github.io/2020/papers/CARRV2020_paper_15_Zhao.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;COBRA (BOOM Branch Prediction)&lt;/strong&gt;: J. Zhao, et al., &lt;em&gt;ISPASS&#39;21&lt;/em&gt;. &lt;a href=&#34;https://ieeexplore.ieee.org/document/9408173&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Hwacha&lt;/strong&gt;: Y. Lee, et al., &lt;em&gt;ESSCIRC&#39;14&lt;/em&gt;. &lt;a href=&#34;http://hwacha.org/papers/riscv-esscirc2014.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Gemmini&lt;/strong&gt;: H. Genc, et al., &lt;em&gt;DAC&#39;21&lt;/em&gt;. &lt;a href=&#34;https://arxiv.org/pdf/1911.09925&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sims&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;FireSim&lt;/strong&gt;: S. Karandikar, et al., &lt;em&gt;ISCA&#39;18&lt;/em&gt;. &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.pdf&#34;&gt;PDF&lt;/a&gt;. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;FireSim Micro Top Picks&lt;/strong&gt;: S. Karandikar, et al., &lt;em&gt;IEEE Micro, Top Picks 2018&lt;/em&gt;. &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-micro-top-picks2018.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;FASED&lt;/strong&gt;: D. Biancolin, et al., &lt;em&gt;FPGA&#39;19&lt;/em&gt;. &lt;a href=&#34;https://people.eecs.berkeley.edu/~biancolin/papers/fased-fpga19.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Golden Gate&lt;/strong&gt;: A. Magyar, et al., &lt;em&gt;ICCAD&#39;19&lt;/em&gt;. &lt;a href=&#34;https://davidbiancolin.github.io/papers/goldengate-iccad19.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;FirePerf&lt;/strong&gt;: S. Karandikar, et al., &lt;em&gt;ASPLOS&#39;20&lt;/em&gt;. &lt;a href=&#34;https://sagark.org/assets/pubs/fireperf-asplos2020.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;FireSim ISCA@50 Retrospective&lt;/strong&gt;: S. Karandikar, et al., &lt;em&gt;ISCA@50 Retrospective: 1996-2020&lt;/em&gt;. &lt;a href=&#34;https://sites.coecis.cornell.edu/isca50retrospective/files/2023/06/Karandikar_2018_FireSim.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Chisel&lt;/strong&gt;: J. Bachrach, et al., &lt;em&gt;DAC&#39;12&lt;/em&gt;. &lt;a href=&#34;https://people.eecs.berkeley.edu/~krste/papers/chisel-dac2012.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;FIRRTL&lt;/strong&gt;: A. Izraelevitz, et al., &lt;em&gt;ICCAD&#39;17&lt;/em&gt;. &lt;a href=&#34;https://ieeexplore.ieee.org/document/8203780&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Chisel DSP&lt;/strong&gt;: A. Wang, et al., &lt;em&gt;DAC&#39;18&lt;/em&gt;. &lt;a href=&#34;https://ieeexplore.ieee.org/document/8465790&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;FireMarshal&lt;/strong&gt;: N. Pemberton, et al., &lt;em&gt;ISPASS&#39;21&lt;/em&gt;. &lt;a href=&#34;https://ieeexplore.ieee.org/document/9408192&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VLSI&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Hammer&lt;/strong&gt;: E. Wang, et al., &lt;em&gt;ISQED&#39;20&lt;/em&gt;. &lt;a href=&#34;https://www.isqed.org/English/Archives/2020/Technical_Sessions/113.html&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Hammer&lt;/strong&gt;: H. Liew, et al., &lt;em&gt;DAC&#39;22&lt;/em&gt;. &lt;a href=&#34;https://dl.acm.org/doi/abs/10.1145/3489517.3530672&#34;&gt;PDF&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This work is supported by the NSF CCRI ENS Chipyard Award #2016662.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>UnfinishedExperimental/FarmDorf</title>
    <updated>2024-04-28T01:42:00Z</updated>
    <id>tag:github.com,2024-04-28:/UnfinishedExperimental/FarmDorf</id>
    <link href="https://github.com/UnfinishedExperimental/FarmDorf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A little Bot for the browser MMOG Die Stämme/Tribal Wars, little pet project for first steps with scala, slick(functional db mapping), dispatch(async io) and scalaFX&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FarmDorf&lt;/h1&gt; &#xA;&lt;p&gt;A little Bot for the browser MMOG Die Stämme/Tribal Wars, little pet project for first steps with scala, slick(functional db mapping), dispatch(async io) and scalaFX&lt;/p&gt;</summary>
  </entry>
</feed>