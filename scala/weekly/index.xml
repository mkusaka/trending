<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-06T01:49:44Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>firesim/firesim</title>
    <updated>2022-11-06T01:49:44Z</updated>
    <id>tag:github.com,2022-11-06:/firesim/firesim</id>
    <link href="https://github.com/firesim/firesim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FireSim: Easy-to-use, Scalable, FPGA-accelerated Cycle-accurate Hardware Simulation in the Cloud&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FireSim: Easy-to-use, Scalable, FPGA-accelerated Cycle-accurate Hardware Simulation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://readthedocs.org/projects/firesim/badge/&#34; alt=&#34;FireSim Documentation Status&#34;&gt; &lt;img src=&#34;https://github.com/firesim/firesim/actions/workflows/firesim-run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Actions Status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#using-firesim&#34;&gt;Using FireSim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#what-is-firesim&#34;&gt;What is FireSim?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#what-can-i-simulate-with-firesim&#34;&gt;What can I simulate with FireSim?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#need-help&#34;&gt;Need help?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#publications&#34;&gt;Publications&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using FireSim&lt;/h2&gt; &#xA;&lt;p&gt;To get started with using FireSim, see the tutorials on the FireSim documentation site: &lt;a href=&#34;https://docs.fires.im/&#34;&gt;https://docs.fires.im/&lt;/a&gt;. You can also find slides from tutorials that we run at various conferences/events here: &lt;a href=&#34;https://fires.im/tutorial/&#34;&gt;https://fires.im/tutorial/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another good overview (in video format) is our tutorial from the Chisel Community Conference on &lt;a href=&#34;https://www.youtube.com/watch?v=S3OriQnJXYQ&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is FireSim?&lt;/h2&gt; &#xA;&lt;p&gt;FireSim is an &lt;a href=&#34;https://github.com/firesim/firesim&#34;&gt;open-source&lt;/a&gt; cycle-accurate FPGA-accelerated full-system hardware simulation platform that runs on cloud FPGAs (Amazon EC2 F1). FireSim is actively developed in the &lt;a href=&#34;http://bar.eecs.berkeley.edu&#34;&gt;Berkeley Architecture Research Group&lt;/a&gt; in the &lt;a href=&#34;https://eecs.berkeley.edu&#34;&gt;Electrical Engineering and Computer Sciences Department&lt;/a&gt; at the &lt;a href=&#34;https://berkeley.edu&#34;&gt;University of California, Berkeley&lt;/a&gt;. You can learn more about FireSim in the following places:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;FireSim website&lt;/strong&gt;: &lt;a href=&#34;https://fires.im&#34;&gt;https://fires.im&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FireSim ISCA 2018 Paper&lt;/strong&gt;: &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.pdf&#34;&gt;Paper PDF&lt;/a&gt; | &lt;a href=&#34;https://ieeexplore.ieee.org/document/8416816&#34;&gt;IEEE Xplore&lt;/a&gt; | &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3276543&#34;&gt;ACM DL&lt;/a&gt; | &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.bib.txt&#34;&gt;BibTeX&lt;/a&gt; | Selected as one of IEEE Micro’s “Top Picks from Computer Architecture Conferences, 2018”.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FireSim documentation&lt;/strong&gt;: &lt;a href=&#34;https://docs.fires.im&#34;&gt;https://docs.fires.im&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FireSim (+Chipyard) Tutorial&lt;/strong&gt;: &lt;a href=&#34;https://fires.im/tutorial/&#34;&gt;https://fires.im/tutorial/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scala API Documentation&lt;/strong&gt;: &lt;a href=&#34;https://fires.im/firesim/latest/api/&#34;&gt;https://fires.im/firesim/latest/api/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Two-minute lightning talk from ISCA 2018&lt;/strong&gt; (FireSim simulating a datacenter): &lt;a href=&#34;https://www.youtube.com/watch?v=4XwoSe5c8lY&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chisel Community Conference Tutorial&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=S3OriQnJXYQ&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Updates/News&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; | &lt;a href=&#34;https://fires.im/blog/&#34;&gt;FireSim Blog&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/firesimproject&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What can I simulate with FireSim?&lt;/h2&gt; &#xA;&lt;p&gt;FireSim can simulate arbitrary hardware designs written in &lt;a href=&#34;https://chisel.eecs.berkeley.edu&#34;&gt;Chisel&lt;/a&gt;. With FireSim, you can write your own RTL (processors, accelerators, etc.) and run it at near-FPGA-prototype speeds on cloud FPGAs, while obtaining cycle-accurate performance results (i.e. matching what you would find if you taped-out a chip). Depending on the hardware design and the simulation scale, FireSim simulations run at &lt;strong&gt;10s to 100s of MHz&lt;/strong&gt;. You can also integrate custom software models for components that you don&#39;t want/need to write as RTL.&lt;/p&gt; &#xA;&lt;p&gt;FireSim was originally developed to simulate datacenters by combining open RTL for RISC-V processors with a custom cycle-accurate network simulation. By default, FireSim provides all the RTL and models necessary to &lt;strong&gt;cycle-exactly&lt;/strong&gt; simulate from &lt;strong&gt;one to thousands of multi-core compute nodes&lt;/strong&gt;, derived directly from &lt;strong&gt;silicon-proven&lt;/strong&gt; and &lt;strong&gt;open&lt;/strong&gt; target-RTL (&lt;a href=&#34;https://riscv.org/&#34;&gt;RISC-V&lt;/a&gt; &lt;a href=&#34;https://github.com/freechipsproject/rocket-chip&#34;&gt;Rocket Chip&lt;/a&gt; and &lt;a href=&#34;https://github.com/ucb-bar/riscv-boom&#34;&gt;BOOM&lt;/a&gt;), with an optional &lt;strong&gt;cycle-accurate network simulation&lt;/strong&gt; tying them together. FireSim also provides a &lt;a href=&#34;https://github.com/firesim/firesim-software&#34;&gt;Linux distribution&lt;/a&gt; that is compatible with the RISC-V systems it simulates and &lt;a href=&#34;https://docs.fires.im/en/latest/Advanced-Usage/Workloads/Defining-Custom-Workloads.html&#34;&gt;automates&lt;/a&gt; the process of including new workloads into this Linux distribution. These simulations run fast enough to interact with Linux on the simulated system at the command line, &lt;a href=&#34;https://twitter.com/firesimproject/status/1031267637303508993&#34;&gt;like a real computer&lt;/a&gt;. Users can even &lt;a href=&#34;http://docs.fires.im/en/latest/Advanced-Usage/Miscellaneous-Tips.html#experimental-support-for-sshing-into-simulated-nodes-and-accessing-the-internet-from-within-simulations&#34;&gt;SSH into simulated systems in FireSim&lt;/a&gt; and access the Internet from within them.&lt;/p&gt; &#xA;&lt;p&gt;Head to the &lt;a href=&#34;https://fires.im&#34;&gt;FireSim Website&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the FireSim Mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/firesim&#34;&gt;https://groups.google.com/forum/#!forum/firesim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Post an issue on this repo&lt;/li&gt; &#xA; &lt;li&gt;Follow on Twitter for project updates: &lt;a href=&#34;https://twitter.com/firesimproject&#34;&gt;@firesimproject&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ISCA 2018&lt;/strong&gt;: FireSim: FPGA-Accelerated Cycle-Exact Scale-Out System Simulation in the Public Cloud&lt;/h3&gt; &#xA;&lt;p&gt;You can learn more about FireSim in our ISCA 2018 paper, which covers the overall FireSim infrastructure and large distributed simulations of networked clusters. This paper was &lt;strong&gt;selected as one of IEEE Micro’s “Top Picks from Computer Architecture Conferences, 2018”.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sagar Karandikar, Howard Mao, Donggyu Kim, David Biancolin, Alon Amid, Dayeol Lee, Nathan Pemberton, Emmanuel Amaro, Colin Schmidt, Aditya Chopra, Qijing Huang, Kyle Kovacs, Borivoje Nikolic, Randy Katz, Jonathan Bachrach, and Krste Asanović. &lt;strong&gt;FireSim: FPGA-Accelerated Cycle-Exact Scale-Out System Simulation in the Public Cloud&lt;/strong&gt;. &lt;em&gt;In proceedings of the 45th International Symposium on Computer Architecture (ISCA’18)&lt;/em&gt;, Los Angeles, CA, June 2018.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.pdf&#34;&gt;Paper PDF&lt;/a&gt; | &lt;a href=&#34;https://ieeexplore.ieee.org/document/8416816&#34;&gt;IEEE Xplore&lt;/a&gt; | &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3276543&#34;&gt;ACM DL&lt;/a&gt; | &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.bib.txt&#34;&gt;BibTeX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;FPGA 2019&lt;/strong&gt;: FASED: FPGA-Accelerated Simulation and Evaluation of DRAM&lt;/h3&gt; &#xA;&lt;p&gt;Our paper from FPGA 2019 details the DRAM model used in FireSim:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;David Biancolin, Sagar Karandikar, Donggyu Kim, Jack Koenig, Andrew Waterman, Jonathan Bachrach, Krste Asanović, &lt;strong&gt;FASED: FPGA-Accelerated Simulation and Evaluation of DRAM&lt;/strong&gt;, &lt;em&gt;In proceedings of the 27th ACM/SIGDA International Symposium on Field-Programmable Gate Arrays&lt;/em&gt;, Seaside, CA, February 2018.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://people.eecs.berkeley.edu/~biancolin/papers/fased-fpga19.pdf&#34;&gt;Paper PDF&lt;/a&gt; | &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3293894&#34;&gt;ACM DL&lt;/a&gt; | &lt;a href=&#34;https://people.eecs.berkeley.edu/~biancolin/bib/fased-fpga19.bib&#34;&gt;BibTeX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;IEEE Micro Top Picks of 2018&lt;/strong&gt;: FireSim: FPGA-Accelerated, Cycle-Accurate Scale-Out System Simulation in the Public Cloud&lt;/h3&gt; &#xA;&lt;p&gt;This article discusses several updates since the FireSim ISCA 2018 paper:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sagar Karandikar, Howard Mao, Donggyu Kim, David Biancolin, Alon Amid, Dayeol Lee, Nathan Pemberton, Emmanuel Amaro, Colin Schmidt, Aditya Chopra, Qijing Huang, Kyle Kovacs, Borivoje Nikolic, Randy Katz, Jonathan Bachrach, and Krste Asanović. &lt;strong&gt;FireSim: FPGA-Accelerated Cycle-Exact Scale-Out System Simulation in the Public Cloud&lt;/strong&gt;. &lt;em&gt;IEEE Micro, vol. 39, no. 3, pp. 56-65, (Micro Top Picks 2018 Issue)&lt;/em&gt;. May-June 2019.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sagark.org/assets/pubs/firesim-micro-top-picks2018.pdf&#34;&gt;Article PDF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ICCAD 2019&lt;/strong&gt;: Golden Gate: Bridging The Resource-Efficiency Gap Between ASICs and FPGA Prototypes&lt;/h3&gt; &#xA;&lt;p&gt;Our paper describing FireSim&#39;s Compiler, &lt;em&gt;Golden Gate&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Albert Magyar, David T. Biancolin, Jack Koenig, Sanjit Seshia, Jonathan Bachrach, Krste Asanović, &lt;strong&gt;Golden Gate: Bridging The Resource-Efficiency Gap Between ASICs and FPGA Prototypes&lt;/strong&gt;, &lt;em&gt;In proceedings of the 39th International Conference on Computer-Aided Design (ICCAD &#39;19)&lt;/em&gt;, Westminster, CO, November 2019.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://davidbiancolin.github.io/papers/goldengate-iccad19.pdf&#34;&gt;Paper PDF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ASPLOS 2020&lt;/strong&gt;: FirePerf: FPGA-Accelerated Full-System Hardware/Software Performance Profiling and Co-Design&lt;/h3&gt; &#xA;&lt;p&gt;Our paper to appear in ASPLOS 2020 discusses system-level profiling features in FireSim:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sagar Karandikar, Albert Ou, Alon Amid, Howard Mao, Randy Katz, Borivoje Nikolić, and Krste Asanović, &lt;strong&gt;FirePerf: FPGA-Accelerated Full-System Hardware/Software Performance Profiling and Co-Design&lt;/strong&gt;, &lt;em&gt;In Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2020)&lt;/em&gt;, Lausanne, Switzerland, March 2020.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sagark.org/assets/pubs/fireperf-asplos2020.pdf&#34;&gt;Paper PDF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;IEEE MICRO 2021&lt;/strong&gt;: Accessible, FPGA Resource-Optimized Simulation of Multi-Clock Systems in FireSim&lt;/h3&gt; &#xA;&lt;p&gt;In this special issue, we describe the automated instance-multithreading optimization and support for multiple clock domains in the simulated target.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;David Biancolin, Albert Magyar, Sagar Karandikar, Alon Amid, Borivoje Nikolić, Jonathan Bachrach, Krste Asanović. &lt;strong&gt;Accessible, FPGA Resource-Optimized Simulation of Multi-Clock Systems in FireSim&lt;/strong&gt;. &lt;em&gt;In IEEE Micro Volume: 41, Issue: 4, July-Aug. 1 2021&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://davidbiancolin.github.io/papers/firesim-micro21.pdf&#34;&gt;Article PDF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find other publications, including publications that &lt;em&gt;use&lt;/em&gt; FireSim on the &lt;a href=&#34;https://fires.im/publications/&#34;&gt;FireSim Website&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/incubator-livy</title>
    <updated>2022-11-06T01:49:44Z</updated>
    <id>tag:github.com,2022-11-06:/apache/incubator-livy</id>
    <link href="https://github.com/apache/incubator-livy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of Apache livy (Incubating)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Livy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/apache/incubator-livy&#34;&gt;&lt;img src=&#34;https://travis-ci.org/apache/incubator-livy.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apache Livy is an open source REST interface for interacting with &lt;a href=&#34;http://spark.apache.org&#34;&gt;Apache Spark&lt;/a&gt; from anywhere. It supports executing snippets of code or programs in a Spark context that runs locally or in &lt;a href=&#34;http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html&#34;&gt;Apache Hadoop YARN&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interactive Scala, Python and R shells&lt;/li&gt; &#xA; &lt;li&gt;Batch submissions in Scala, Java, Python&lt;/li&gt; &#xA; &lt;li&gt;Multiple users can share the same server (impersonation support)&lt;/li&gt; &#xA; &lt;li&gt;Can be used for submitting jobs from anywhere with REST&lt;/li&gt; &#xA; &lt;li&gt;Does not require any code change to your programs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/incubator-livy/pulls&#34;&gt;Pull requests&lt;/a&gt; are welcomed! But before you begin, please check out the &lt;a href=&#34;http://livy.incubator.apache.org/community#Contributing&#34;&gt;Contributing&lt;/a&gt; section on the &lt;a href=&#34;http://livy.incubator.apache.org/community&#34;&gt;Community&lt;/a&gt; page of our website.&lt;/p&gt; &#xA;&lt;h2&gt;Online Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Guides and documentation on getting started using Livy, example code snippets, and Livy API documentation can be found at &lt;a href=&#34;http://livy.incubator.apache.org&#34;&gt;livy.incubator.apache.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Before Building Livy&lt;/h2&gt; &#xA;&lt;p&gt;To build Livy, you will need:&lt;/p&gt; &#xA;&lt;p&gt;Debian/Ubuntu:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mvn (from &lt;code&gt;maven&lt;/code&gt; package or maven3 tarball)&lt;/li&gt; &#xA; &lt;li&gt;openjdk-8-jdk (or Oracle JDK 8)&lt;/li&gt; &#xA; &lt;li&gt;Python 2.7+&lt;/li&gt; &#xA; &lt;li&gt;R 3.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Redhat/CentOS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mvn (from &lt;code&gt;maven&lt;/code&gt; package or maven3 tarball)&lt;/li&gt; &#xA; &lt;li&gt;java-1.8.0-openjdk (or Oracle JDK 8)&lt;/li&gt; &#xA; &lt;li&gt;Python 2.7+&lt;/li&gt; &#xA; &lt;li&gt;R 3.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MacOS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode command line tools&lt;/li&gt; &#xA; &lt;li&gt;Oracle&#39;s JDK 1.8&lt;/li&gt; &#xA; &lt;li&gt;Maven (Homebrew)&lt;/li&gt; &#xA; &lt;li&gt;Python 2.7+&lt;/li&gt; &#xA; &lt;li&gt;R 3.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Required python packages for building Livy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cloudpickle&lt;/li&gt; &#xA; &lt;li&gt;requests&lt;/li&gt; &#xA; &lt;li&gt;requests-kerberos&lt;/li&gt; &#xA; &lt;li&gt;flake8&lt;/li&gt; &#xA; &lt;li&gt;flaky&lt;/li&gt; &#xA; &lt;li&gt;pytest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run Livy, you will also need a Spark installation. You can get Spark releases at &lt;a href=&#34;https://spark.apache.org/downloads.html&#34;&gt;https://spark.apache.org/downloads.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Livy requires Spark 2.4+. You can switch to a different version of Spark by setting the &lt;code&gt;SPARK_HOME&lt;/code&gt; environment variable in the Livy server process, without needing to rebuild Livy.&lt;/p&gt; &#xA;&lt;h2&gt;Building Livy&lt;/h2&gt; &#xA;&lt;p&gt;Livy is built using &lt;a href=&#34;http://maven.apache.org&#34;&gt;Apache Maven&lt;/a&gt;. To check out and build Livy, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/apache/incubator-livy.git&#xA;cd incubator-livy&#xA;mvn package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default Livy is built against Apache Spark 2.4.5, but the version of Spark used when running Livy does not need to match the version used to build Livy. Livy internally handles the differences between different Spark versions.&lt;/p&gt; &#xA;&lt;p&gt;The Livy package itself does not contain a Spark distribution. It will work with any supported version of Spark without needing to rebuild.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sbuslab/akka-http-tools</title>
    <updated>2022-11-06T01:49:44Z</updated>
    <id>tag:github.com,2022-11-06:/sbuslab/akka-http-tools</id>
    <link href="https://github.com/sbuslab/akka-http-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;akka-http-tools&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/sbuslab/akka-http-tools&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sbuslab/akka-http-tools.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>