<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-24T01:53:21Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/pekko</title>
    <updated>2024-03-24T01:53:21Z</updated>
    <id>tag:github.com,2024-03-24:/apache/pekko</id>
    <link href="https://github.com/apache/pekko" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build highly concurrent, distributed, and resilient message-driven applications using Java/Scala&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Pekko&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/pekko/actions/workflows/nightly-builds.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/pekko/actions/workflows/nightly-builds.yml/badge.svg?sanitize=true&#34; alt=&#34;Nightly Builds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/pekko/actions/workflows/nightly-builds-aeron.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/pekko/actions/workflows/nightly-builds-aeron.yml/badge.svg?branch=main&#34; alt=&#34;Nightly Aeron Tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apache Pekko is an open-source framework for building applications that are concurrent, distributed, resilient and elastic. Pekko uses the Actor Model to provide more intuitive high-level abstractions for concurrency. Using these abstractions, Pekko also provides libraries for persistence, streams, HTTP, and more.&lt;/p&gt; &#xA;&lt;p&gt;Pekko is a fork of &lt;a href=&#34;https://github.com/akka/akka&#34;&gt;Akka&lt;/a&gt; 2.6.x, prior to the Akka project&#39;s adoption of the Business Source License.&lt;/p&gt; &#xA;&lt;h2&gt;Reference Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://pekko.apache.org&#34;&gt;https://pekko.apache.org&lt;/a&gt; for the documentation including the API docs. The docs for all the Apache Pekko modules can be found there.&lt;/p&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;p&gt;The CI build is Linux based (Ubuntu) and most Pekko developers use Macs or Linux machines. There have been reports of issues when building with Windows (&lt;a href=&#34;https://github.com/apache/pekko/issues/829&#34;&gt;#829&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you have installed a Java Development Kit (JDK) version 11 or later.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt; installed and using this JDK.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you also have Java 8 installed (JDK or JRE).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://graphviz.gitlab.io/download/&#34;&gt;Graphviz&lt;/a&gt; is needed for the scaladoc generation build task, which is part of the release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the Build&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a command window and change directory to your preferred base directory&lt;/li&gt; &#xA; &lt;li&gt;Use git to clone the &lt;a href=&#34;https://github.com/apache/pekko&#34;&gt;repo&lt;/a&gt; or download a source release from &lt;a href=&#34;https://pekko.apache.org&#34;&gt;https://pekko.apache.org&lt;/a&gt; (and unzip or untar it, as appropriate)&lt;/li&gt; &#xA; &lt;li&gt;Change directory to the directory where you installed the source (you should have a file called &lt;code&gt;build.sbt&lt;/code&gt; in this directory)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt compile&lt;/code&gt; compiles the main source for project default version of Scala (2.13) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sbt +compile&lt;/code&gt; will compile for all supported versions of Scala&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt test&lt;/code&gt; will compile the code and run the unit tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt testQuick&lt;/code&gt; similar to test but when repeated in shell mode will only run failing tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt testQuickUntilPassed&lt;/code&gt; similar to testQuick but will loop until tests pass.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt package&lt;/code&gt; will build the jars &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the jars will be built into target dirs of the various modules&lt;/li&gt; &#xA;   &lt;li&gt;for the &#39;actor&#39; module, the jar will be built to &lt;code&gt;actor/target/scala-2.13/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt publishLocal&lt;/code&gt; will push the jars to your local Apache Ivy repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt publishM2&lt;/code&gt; will push the jars to your local Apache Maven repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt docs/paradox&lt;/code&gt; will build the docs (the ones describing the module features) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Requires Java 11 minimum&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sbt docs/paradoxBrowse&lt;/code&gt; does the same but will open the docs in your browser when complete&lt;/li&gt; &#xA;   &lt;li&gt;the &lt;code&gt;index.html&lt;/code&gt; file will appear in &lt;code&gt;target/paradox/site/main/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt unidoc&lt;/code&gt; will build the Javadocs for all the modules and load them to one place (may require Graphviz, see Prerequisites above) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the &lt;code&gt;index.html&lt;/code&gt; file will appear in &lt;code&gt;target/scala-2.13/unidoc/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt sourceDistGenerate&lt;/code&gt; will generate source release to &lt;code&gt;target/dist/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The version number that appears in filenames and docs is derived, by default. The derived version contains the most git commit id or the date/time (if the directory is not under git control). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can set the version number explicitly when running sbt commands &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;eg &lt;code&gt;sbt &#34;set ThisBuild / version := \&#34;1.0.0\&#34;; sourceDistGenerate&#34;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Or you can add a file called &lt;code&gt;version.sbt&lt;/code&gt; to the same directory that has the &lt;code&gt;build.sbt&lt;/code&gt; containing something like &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;ThisBuild / version := &#34;1.0.0&#34;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;There are several ways to interact with the Pekko community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/pekko/discussions&#34;&gt;GitHub discussions&lt;/a&gt;: for questions and general discussion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lists.apache.org/list.html?dev@pekko.apache.org&#34;&gt;Pekko dev mailing list&lt;/a&gt;: for Pekko development discussions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lists.apache.org/list.html?users@pekko.apache.org&#34;&gt;Pekko users mailing list&lt;/a&gt;: for Pekko user discussions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/pekko/issues&#34;&gt;GitHub issues&lt;/a&gt;: for bug reports and feature requests. Please search the existing issues before creating new ones. If you are unsure whether you have found a bug, consider asking in GitHub discussions or the mailing list first.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very welcome. If you have an idea on how to improve Pekko, don&#39;t hesitate to create an issue or submit a pull request.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/apache/pekko/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on the development workflow and how to create your pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Apache Pekko is governed by the &lt;a href=&#34;https://www.apache.org/foundation/policies/conduct.html&#34;&gt;Apache code of conduct&lt;/a&gt;. By participating in this project you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache Pekko is available under the Apache License, version 2.0. See &lt;a href=&#34;https://github.com/apache/pekko/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>skhatri/scprog</title>
    <updated>2024-03-24T01:53:21Z</updated>
    <id>tag:github.com,2024-03-24:/skhatri/scprog</id>
    <link href="https://github.com/skhatri/scprog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;scala exercise&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>LoveLonelyTime/Bergamot</title>
    <updated>2024-03-24T01:53:21Z</updated>
    <id>tag:github.com,2024-03-24:/LoveLonelyTime/Bergamot</id>
    <link href="https://github.com/LoveLonelyTime/Bergamot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An exquisite superscalar RV32GC processor.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bergamot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LoveLonelyTime/Bergamot/main/doc/logo-banner.png&#34; alt=&#34;Bergamot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple superscalar RV32GC processor.&lt;/p&gt; &#xA;&lt;p&gt;Bergamot has ALL the structures of a basic superscalar pipeline:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multilevel, dynamic and 2-way superscalar pipeline.&lt;/li&gt; &#xA; &lt;li&gt;4-way parallel sub pipelines for instruction execution.&lt;/li&gt; &#xA; &lt;li&gt;Branch prediction.&lt;/li&gt; &#xA; &lt;li&gt;L1 (I/D) &amp;amp; L2 cache.&lt;/li&gt; &#xA; &lt;li&gt;RISC-V RV32GC architecture.&lt;/li&gt; &#xA; &lt;li&gt;Support mainstream &lt;a href=&#34;https://github.com/torvalds/linux&#34;&gt;Linux&lt;/a&gt; operating system.&lt;/li&gt; &#xA; &lt;li&gt;Interrupts and memory-mapped I/O system.&lt;/li&gt; &#xA; &lt;li&gt;Support AXI bus protocol, free connection of peripherals.&lt;/li&gt; &#xA; &lt;li&gt;Running on FPGA.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And is trying to maintain simplicity as much as possible.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The Bergamot is a simple superscalar RV32GC RISC-V core written in the &lt;a href=&#34;https://chisel.eecs.berkeley.edu/&#34;&gt;Chisel&lt;/a&gt; hardware construction language. Its predecessor is the &lt;a href=&#34;https://github.com/LoveLonelyTime/LLTRISC-V&#34;&gt;LLTRISCV&lt;/a&gt; (5-stage pipeline RV32I RISC-V core). This project aims to develop a relatively simple and high-performance general-purpose RISC-V superscalar processor design, which can be used for teaching and research.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LoveLonelyTime/Bergamot/main/doc/arch.png&#34; alt=&#34;Arch&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Instruction fetch&lt;/h3&gt; &#xA;&lt;p&gt;Bergamot can concatenate two instruction-cache lines at a time, which enables C extensions. The maximum instruction throughput is 2 instructions (16/32 bits) / cycle.&lt;/p&gt; &#xA;&lt;p&gt;Bergamot also has customizable branch prediction components. The default implementation is 2-bit status FSM improving branch hit rate.&lt;/p&gt; &#xA;&lt;h3&gt;Register renaming and ROB&lt;/h3&gt; &#xA;&lt;p&gt;Bergamot uses 2-way register renaming and can remap 6 general-purpose registers at once. Register renaming components writes remapping information to ROB. And send result through data broadcast after the instruction execution is completed. The maximum renaming instructions depends on the size of the ROB and can be freely configured by the user.&lt;/p&gt; &#xA;&lt;h3&gt;Pipeline&lt;/h3&gt; &#xA;&lt;p&gt;Bergamot has a 2-way instruction issuing structure, which can issue two different types of instructions within a single cycle. Meanwhile, it has four sub pipelines for instruction execution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ALU: Execute ALU instructions.&lt;/li&gt; &#xA; &lt;li&gt;Branch: Execute branch instructions to accelerate the execution of branch instructions.&lt;/li&gt; &#xA; &lt;li&gt;Memory: Execute memory access instructions.&lt;/li&gt; &#xA; &lt;li&gt;Float: Execute floating-point calculation instructions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For each execution pipeline, Bergamot can adopt different instruction scheduling strategies. For example, if there is no requirement for the order of instructions, an out-of-order strategy can be adopted. This allows users to freely add functional pipelines.&lt;/p&gt; &#xA;&lt;h3&gt;Retire&lt;/h3&gt; &#xA;&lt;p&gt;In order to match the 2-way superscalar, Bergamot can retire 2 instructions at a time. Retired instructions will update the status of the core.&lt;/p&gt; &#xA;&lt;h3&gt;Memory model&lt;/h3&gt; &#xA;&lt;p&gt;According to the RISC-V specification, Bergamot also follows the RVWMO memory model. For memory read and write, it is sequential. But it has a store queue to improve write cycles. Therefore, Bergamot allows for read and write structures with out of order.&lt;/p&gt; &#xA;&lt;p&gt;Bergamot also has an instruction-cache, an data-cache as the L1 cache. And a shared cache within the core as the L2 cache. The implementation of caching can also be freely configured, depending on the type of device (FPGA/ASIC) you are using.&lt;/p&gt; &#xA;&lt;p&gt;Finally, the core system bus uses &lt;a href=&#34;https://developer.arm.com/Architectures/AMBA&#34;&gt;ARM® AMBA® AXI Protocol&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Future and contribution&lt;/h2&gt; &#xA;&lt;p&gt;Up to now, the implementation of Bergamot is not yet very complete. For example, there is no cache consistency protocol and a spurious atomic instructions implementation. This constrains the multi-core feature of Bergamot.&lt;/p&gt; &#xA;&lt;p&gt;In the future, we will further improve the performance of Bergamot and its multi-core adaptation. If you are interested in this project, welcome to pull requests or contact the repository owner.&lt;/p&gt;</summary>
  </entry>
</feed>