<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:23:20Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stripe/bonsai</title>
    <updated>2022-06-02T02:23:20Z</updated>
    <id>tag:github.com,2022-06-02:/stripe/bonsai</id>
    <link href="https://github.com/stripe/bonsai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Beautiful trees, without the landscaping.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bonsai&lt;/h1&gt; &#xA;&lt;p&gt;Beautiful trees, without the landscaping. Bonsai is a Scala library for transforming arbitrary tree structures into read-only versions that take up a fraction of the space.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Bonsai compresses trees in 2 ways: by using significantly less space to store the tree structure itself (tree compression), and by encoding the node labels in a memory efficient structure (label compression).&lt;/p&gt; &#xA;&lt;h3&gt;What is a &#34;Tree&#34;?&lt;/h3&gt; &#xA;&lt;p&gt;Bonsai works over arbitrary trees, so it assumes a fairly generic interface for interacting with trees. In Bonsai a tree;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;has 0 or 1 root nodes&lt;/li&gt; &#xA; &lt;li&gt;each node has 0 or more children&lt;/li&gt; &#xA; &lt;li&gt;each node has a label attached to it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The actual type of the node is unimportant. What is important is the node labels and the relationships between the nodes (parent, child, sibling, etc). This structure is enough to describe most of the types of trees you are familiar with.&lt;/p&gt; &#xA;&lt;p&gt;Bonsai encodes this notion of trees with the &lt;a href=&#34;https://github.com/stripe/bonsai/raw/master/bonsai-core/src/main/scala/com/stripe/bonsai/TreeOps.scala&#34;&gt;TreeOps type class&lt;/a&gt;. Here is a truncated version of the type class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;trait TreeOps[Tree, Label] {&#xA;&#xA;  /** The type of the nodes in the tree. */&#xA;  type Node&#xA;&#xA;  /**&#xA;   * Returns the root node of the tree.&#xA;   */&#xA;  def root(t: Tree): Option[Node]&#xA;&#xA;  /**&#xA;   * Returns all the direct children of the given node. The order may or may&#xA;   * not matter. TreeOps does not provide any guarantees here.&#xA;   */&#xA;  def children(node: Node): Iterable[Node]&#xA;&#xA;  /**&#xA;   * Returns the label attached to the given node.&#xA;   */&#xA;  def label(node: Node): Label&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The type &lt;code&gt;T&lt;/code&gt; is our actual tree type. The &lt;code&gt;Node&lt;/code&gt; type is the way we reference internal nodes in our tree &lt;code&gt;T&lt;/code&gt;. The actual type of &lt;code&gt;Node&lt;/code&gt; isn&#39;t important, however, and is mostly an implementation detail. The important bit is the &lt;code&gt;Label&lt;/code&gt; type, which is the user-facing data associated with each node.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;bonsai-example&lt;/code&gt; subproject has &lt;a href=&#34;https://github.com/stripe/bonsai/raw/master/bonsai-example/src/main/scala/com/stripe/bonsai/example/Huffman.scala&#34;&gt;an example of a Huffman tree&lt;/a&gt;. A Huffman tree is used to store a Huffman coding for decoding a compressed message (a bitstring). We decode the bitstring, bit-by-bit, using the tree.&lt;/p&gt; &#xA;&lt;p&gt;Starting at the root of the tree, we follow the left child if the current bit is a 0 and the right child if it is a 1. We continue until reaching a leaf node, at which poitn we output the symbol associated with it, then start back at the beginning of the tree. When we&#39;ve exhausted the entire bitstring, we&#39;ll have our decoded message.&lt;/p&gt; &#xA;&lt;p&gt;Here is how we may implement a Huffman tree in Scala:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;sealed trait HuffmanTree[+A]&#xA;case class Branch[+A](zero: HuffmanTree[A], one: HuffmanTree[A]) extends HuffmanTree[A]&#xA;case class Leaf[+A](value: A) extends HuffmanTree[A]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is how we would implement its &lt;code&gt;TreeOps&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.stripe.bonsai.TreeOps&#xA;&#xA;object HuffmanTree {&#xA;  implicit def huffmanTreeOps[A]: TreeOps[HuffmanTree[A], Option[A]] =&#xA;    new TreeOps[HuffmanTree[A], Option[A]] {&#xA;      type Node = HuffmanTree[A]&#xA;&#xA;      def root(tree: HuffmanTree[A]): Option[HuffmanTree[A]] = Some(tree)&#xA;      def children(tree: HuffmanTree[A]): Iterable[HuffmanTree[A]] = tree match {&#xA;        case Branch(l, r) =&amp;gt; l :: r :: Nil&#xA;        case _ =&amp;gt; Nil&#xA;      }&#xA;      def label(tree: HuffmanTree[A]): Option[A] = tree match {&#xA;        case Leaf(value) =&amp;gt; Some(value)&#xA;        case _ =&amp;gt; None&#xA;      }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As long as we are careful to implement all our operations on a Huffman tree by using its more generic &lt;code&gt;TreeOps&lt;/code&gt; interface, rather than &lt;code&gt;HuffmanTree&lt;/code&gt; directly, we can then swap out the actual tree data structure, without affecting the code using it.&lt;/p&gt; &#xA;&lt;p&gt;For example, below we implement a &lt;code&gt;decode&lt;/code&gt; operation as an implicit class using just &lt;code&gt;TreeOps&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import scala.collection.immutable.BitSet&#xA;&#xA;implicit class HuffmanTreeOps[T, A](tree: T)(implicit treeOps: TreeOps[T, Option[A]]) {&#xA;  // Importing treeOps gives us some useful methods on `tree`&#xA;  import treeOps._&#xA;&#xA;  def decode(bits: BitSet, len: Int): Vector[A] = {&#xA;    val root = tree.root.get&#xA;    val (_, result) = (0 until len)&#xA;      .foldLeft((root, Vector.empty[A])) { case ((node, acc), i) =&amp;gt;&#xA;        node.label match {&#xA;          case Some(value) =&amp;gt; (root, acc :+ value)&#xA;          case None if bits(i) =&amp;gt; (node.children.head, acc)&#xA;          case None =&amp;gt; (node.children.iterator.drop(1).next, acc)&#xA;        }&#xA;      }&#xA;    result&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The goal of this indirection through &lt;code&gt;TreeOps&lt;/code&gt; is to let us use a compressed version of the &lt;code&gt;tree&lt;/code&gt; instead of an actual &lt;code&gt;HuffmanTree&lt;/code&gt;, which will see below.&lt;/p&gt; &#xA;&lt;h3&gt;Tree Compression&lt;/h3&gt; &#xA;&lt;p&gt;Bonsai&#39;s tree compression is based off of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Succinct_data_structure&#34; title=&#34;Succinct Data Structures&#34;&gt;succinct data structure&lt;/a&gt; for binary trees. Bonsai supports k-ary trees by first transforming the original tree into a &lt;a href=&#34;https://en.wikipedia.org/wiki/Left-child_right-sibling_binary_tree&#34;&gt;left-child right-sibling tree&lt;/a&gt;, which preserves all the relationships from the original tree, but ensures we have at most 2 children per node. You can read more about the details of the actual compression algorithm used in &lt;a href=&#34;http://www.dcc.uchile.cl/~gnavarro/algoritmos/ps/wea05.pdf&#34;&gt;&#34;Practical Implementation of Rank and Select Queries&#34;&lt;/a&gt;. &lt;strong&gt;The upshot is that we can store the entire structure of a tree in only ~2.73bits per node.&lt;/strong&gt; This replaces the normal strategy of using JVM objects for nodes and references to store the relationships.&lt;/p&gt; &#xA;&lt;p&gt;We actually compress trees by transforming them into &lt;a href=&#34;https://github.com/stripe/bonsai/raw/master/bonsai-core/src/main/scala/com/stripe/bonsai/Tree.scala&#34;&gt;Bonsai &lt;code&gt;Tree&lt;/code&gt;s&lt;/a&gt;. Bonsai&#39;s &lt;code&gt;Tree&lt;/code&gt; constructor takes any arbitrary tree &lt;code&gt;T&lt;/code&gt; that has a &lt;code&gt;TreeOps[T]&lt;/code&gt; available and will return a &lt;a href=&#34;https://github.com/stripe/bonsai/raw/master/bonsai-core/src/main/scala/com/stripe/bonsai/Tree.scala&#34;&gt;&lt;code&gt;Tree&lt;/code&gt;&lt;/a&gt; with the same structure and labels (and &lt;code&gt;Label&lt;/code&gt; type) as the original tree. However, the entire structure and labels of the tree will have been compressed, so this new tree requires significantly less space.&lt;/p&gt; &#xA;&lt;p&gt;In the example in &lt;code&gt;bonsai-example&lt;/code&gt;, we use the Huffman encoding described above to construct a simple Huffman tree for the printable ASCII characters (0x20 -&amp;gt; 0x7E) and compress it using Bonsai&#39;s &lt;code&gt;Tree&lt;/code&gt;. The result is a &lt;strong&gt;11x reduction&lt;/strong&gt; in memory requirements. Since our &lt;code&gt;decode&lt;/code&gt; operation was implemented using &lt;code&gt;TreeOps&lt;/code&gt;, we can use this compressed tree just as we would&#39;ve used the original tree.&lt;/p&gt; &#xA;&lt;p&gt;This example is a bit contrived, since the trees are small to begin with, but you can imagine that applying this to a large random forest yields great results.&lt;/p&gt; &#xA;&lt;h3&gt;Label Compression&lt;/h3&gt; &#xA;&lt;p&gt;Bonsai provides a &lt;a href=&#34;https://github.com/stripe/bonsai/raw/master/bonsai-core/src/main/scala/com/stripe/bonsai/Layout.scala&#34;&gt;Layout&lt;/a&gt; type class, along with some simple combinators, for describing how to (de)serialize your labels. At the lowest level are a set of Layout &#34;primitives&#34; that can encode simple data types into compact data structures. The combinators then allow more complex structures to be described (tuples, &lt;code&gt;Either&lt;/code&gt;, mappings to case classes, etc), without adding much, if any, overhead.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of a &lt;code&gt;Layout&lt;/code&gt; for some &lt;code&gt;Widget&lt;/code&gt; type we made up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.stripe.bonsai.Layout&#xA;&#xA;sealed trait Widget&#xA;case class Sprocket(radius: Int, weight: Option[Double]) extends Widget&#xA;case class Doodad(length: Int, width: Int, weight: Option[Double]) extends Widget&#xA;&#xA;object Widget {&#xA;  implicit val WidgetLayout: Layout[Widget] = {&#xA;    Layout[Either[(Int, Option[Double]), ((Int, Int), Option[Double])]].transform(&#xA;      {&#xA;        case Left((r, wt)) =&amp;gt; Sprocket(r, wt)&#xA;        case Right(((l, w), wt)) =&amp;gt; Doodad(l, w, wt)&#xA;      },&#xA;      {&#xA;        case Sprocket(r, wt) =&amp;gt; Left((r, wt))&#xA;        case Doodad(l, w, wt) =&amp;gt; Right(((l, w), wt))&#xA;      }&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see the &lt;a href=&#34;https://github.com/stripe/bonsai/raw/master/bonsai-example/src/main/scala/com/stripe/bonsai/example/Widget.scala&#34;&gt;full Widget code/example&lt;/a&gt; in the &lt;code&gt;bonsai-example&lt;/code&gt; sub project. In that example, we compress a &lt;code&gt;Vector[Option[Widget]]&lt;/code&gt; using the layout and end up with over a &lt;strong&gt;6x reduction&lt;/strong&gt; in memory requirements.&lt;/p&gt; &#xA;&lt;p&gt;Currently, Bonsai focuses mainly on compressing the overhead of the structure your data requires (eg options, eithers, tuples), rather than the data itself. This will likely change in future releases, and we&#39;ll support better compression for primitive types, as well as things like dictionary encoding for all types.&lt;/p&gt; &#xA;&lt;h1&gt;Using Bonsai in SBT or Maven&lt;/h1&gt; &#xA;&lt;p&gt;Bonsai is published on sonatype. To use it in your SBT project, you can add the following to your &lt;code&gt;build.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;com.stripe&#34; %% &#34;bonsai&#34; % &#34;0.3.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Miscellaneous&lt;/h1&gt; &#xA;&lt;p&gt;Bonsai is Open Source and available under the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;For more help, feel free to contact the authors or create an issue.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Dan-M/dumbsterweb</title>
    <updated>2022-06-02T02:23:20Z</updated>
    <id>tag:github.com,2022-06-02:/Dan-M/dumbsterweb</id>
    <link href="https://github.com/Dan-M/dumbsterweb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Lift web app wrapping Dumbster, the fake Smtp Server&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>firesim/firesim</title>
    <updated>2022-06-02T02:23:20Z</updated>
    <id>tag:github.com,2022-06-02:/firesim/firesim</id>
    <link href="https://github.com/firesim/firesim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FireSim: Easy-to-use, Scalable, FPGA-accelerated Cycle-accurate Hardware Simulation in the Cloud&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FireSim: Easy-to-use, Scalable, FPGA-accelerated Cycle-accurate Hardware Simulation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://readthedocs.org/projects/firesim/badge/&#34; alt=&#34;FireSim Documentation Status&#34;&gt; &lt;img src=&#34;https://github.com/firesim/firesim/actions/workflows/firesim-run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Actions Status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#using-firesim&#34;&gt;Using FireSim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#what-is-firesim&#34;&gt;What is FireSim?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#what-can-i-simulate-with-firesim&#34;&gt;What can I simulate with FireSim?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#need-help&#34;&gt;Need help?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/#publications&#34;&gt;Publications&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using FireSim&lt;/h2&gt; &#xA;&lt;p&gt;To get started with using FireSim, see the tutorials on the FireSim documentation site: &lt;a href=&#34;https://docs.fires.im/&#34;&gt;https://docs.fires.im/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another good overview (in video format) is our tutorial from the Chisel Community Conference on &lt;a href=&#34;https://www.youtube.com/watch?v=S3OriQnJXYQ&#34;&gt;YouTube&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is FireSim?&lt;/h2&gt; &#xA;&lt;p&gt;FireSim is an &lt;a href=&#34;https://github.com/firesim/firesim&#34;&gt;open-source&lt;/a&gt; cycle-accurate FPGA-accelerated full-system hardware simulation platform that runs on cloud FPGAs (Amazon EC2 F1). FireSim is actively developed in the &lt;a href=&#34;http://bar.eecs.berkeley.edu&#34;&gt;Berkeley Architecture Research Group&lt;/a&gt; in the &lt;a href=&#34;https://eecs.berkeley.edu&#34;&gt;Electrical Engineering and Computer Sciences Department&lt;/a&gt; at the &lt;a href=&#34;https://berkeley.edu&#34;&gt;University of California, Berkeley&lt;/a&gt;. You can learn more about FireSim in the following places:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;FireSim website&lt;/strong&gt;: &lt;a href=&#34;https://fires.im&#34;&gt;https://fires.im&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FireSim ISCA 2018 Paper&lt;/strong&gt;: &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.pdf&#34;&gt;Paper PDF&lt;/a&gt; | &lt;a href=&#34;https://ieeexplore.ieee.org/document/8416816&#34;&gt;IEEE Xplore&lt;/a&gt; | &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3276543&#34;&gt;ACM DL&lt;/a&gt; | &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.bib.txt&#34;&gt;BibTeX&lt;/a&gt; | Selected as one of IEEE Micro’s “Top Picks from Computer Architecture Conferences, 2018”.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FireSim documentation&lt;/strong&gt;: &lt;a href=&#34;https://docs.fires.im&#34;&gt;https://docs.fires.im&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scala API Documentation&lt;/strong&gt;: &lt;a href=&#34;https://fires.im/firesim/latest/api/&#34;&gt;https://fires.im/firesim/latest/api/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Two-minute lightning talk from ISCA 2018&lt;/strong&gt; (FireSim simulating a datacenter): &lt;a href=&#34;https://www.youtube.com/watch?v=4XwoSe5c8lY&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chisel Community Conference Tutorial&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=S3OriQnJXYQ&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Updates/News&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; | &lt;a href=&#34;https://fires.im/blog/&#34;&gt;FireSim Blog&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/firesimproject&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What can I simulate with FireSim?&lt;/h2&gt; &#xA;&lt;p&gt;FireSim can simulate arbitrary hardware designs written in &lt;a href=&#34;https://chisel.eecs.berkeley.edu&#34;&gt;Chisel&lt;/a&gt;. With FireSim, you can write your own RTL (processors, accelerators, etc.) and run it at near-FPGA-prototype speeds on cloud FPGAs, while obtaining cycle-accurate performance results (i.e. matching what you would find if you taped-out a chip). Depending on the hardware design and the simulation scale, FireSim simulations run at &lt;strong&gt;10s to 100s of MHz&lt;/strong&gt;. You can also integrate custom software models for components that you don&#39;t want/need to write as RTL.&lt;/p&gt; &#xA;&lt;p&gt;FireSim was originally developed to simulate datacenters by combining open RTL for RISC-V processors with a custom cycle-accurate network simulation. By default, FireSim provides all the RTL and models necessary to &lt;strong&gt;cycle-exactly&lt;/strong&gt; simulate from &lt;strong&gt;one to thousands of multi-core compute nodes&lt;/strong&gt;, derived directly from &lt;strong&gt;silicon-proven&lt;/strong&gt; and &lt;strong&gt;open&lt;/strong&gt; target-RTL (&lt;a href=&#34;https://riscv.org/&#34;&gt;RISC-V&lt;/a&gt; &lt;a href=&#34;https://github.com/freechipsproject/rocket-chip&#34;&gt;Rocket Chip&lt;/a&gt; and &lt;a href=&#34;https://github.com/ucb-bar/riscv-boom&#34;&gt;BOOM&lt;/a&gt;), with an optional &lt;strong&gt;cycle-accurate network simulation&lt;/strong&gt; tying them together. FireSim also provides a &lt;a href=&#34;https://github.com/firesim/firesim-software&#34;&gt;Linux distribution&lt;/a&gt; that is compatible with the RISC-V systems it simulates and &lt;a href=&#34;https://docs.fires.im/en/latest/Advanced-Usage/Workloads/Defining-Custom-Workloads.html&#34;&gt;automates&lt;/a&gt; the process of including new workloads into this Linux distribution. These simulations run fast enough to interact with Linux on the simulated system at the command line, &lt;a href=&#34;https://twitter.com/firesimproject/status/1031267637303508993&#34;&gt;like a real computer&lt;/a&gt;. Users can even &lt;a href=&#34;http://docs.fires.im/en/latest/Advanced-Usage/Miscellaneous-Tips.html#experimental-support-for-sshing-into-simulated-nodes-and-accessing-the-internet-from-within-simulations&#34;&gt;SSH into simulated systems in FireSim&lt;/a&gt; and access the Internet from within them.&lt;/p&gt; &#xA;&lt;p&gt;Head to the &lt;a href=&#34;https://fires.im&#34;&gt;FireSim Website&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the FireSim Mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/firesim&#34;&gt;https://groups.google.com/forum/#!forum/firesim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Post an issue on this repo&lt;/li&gt; &#xA; &lt;li&gt;Follow on Twitter for project updates: &lt;a href=&#34;https://twitter.com/firesimproject&#34;&gt;@firesimproject&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/firesim/firesim/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ISCA 2018&lt;/strong&gt;: FireSim: FPGA-Accelerated Cycle-Exact Scale-Out System Simulation in the Public Cloud&lt;/h3&gt; &#xA;&lt;p&gt;You can learn more about FireSim in our ISCA 2018 paper, which covers the overall FireSim infrastructure and large distributed simulations of networked clusters. This paper was &lt;strong&gt;selected as one of IEEE Micro’s “Top Picks from Computer Architecture Conferences, 2018”.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sagar Karandikar, Howard Mao, Donggyu Kim, David Biancolin, Alon Amid, Dayeol Lee, Nathan Pemberton, Emmanuel Amaro, Colin Schmidt, Aditya Chopra, Qijing Huang, Kyle Kovacs, Borivoje Nikolic, Randy Katz, Jonathan Bachrach, and Krste Asanović. &lt;strong&gt;FireSim: FPGA-Accelerated Cycle-Exact Scale-Out System Simulation in the Public Cloud&lt;/strong&gt;. &lt;em&gt;In proceedings of the 45th International Symposium on Computer Architecture (ISCA’18)&lt;/em&gt;, Los Angeles, CA, June 2018.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.pdf&#34;&gt;Paper PDF&lt;/a&gt; | &lt;a href=&#34;https://ieeexplore.ieee.org/document/8416816&#34;&gt;IEEE Xplore&lt;/a&gt; | &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3276543&#34;&gt;ACM DL&lt;/a&gt; | &lt;a href=&#34;https://sagark.org/assets/pubs/firesim-isca2018.bib.txt&#34;&gt;BibTeX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;FPGA 2019&lt;/strong&gt;: FASED: FPGA-Accelerated Simulation and Evaluation of DRAM&lt;/h3&gt; &#xA;&lt;p&gt;Our paper from FPGA 2019 details the DRAM model used in FireSim:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;David Biancolin, Sagar Karandikar, Donggyu Kim, Jack Koenig, Andrew Waterman, Jonathan Bachrach, Krste Asanović, &lt;strong&gt;FASED: FPGA-Accelerated Simulation and Evaluation of DRAM&lt;/strong&gt;, &lt;em&gt;In proceedings of the 27th ACM/SIGDA International Symposium on Field-Programmable Gate Arrays&lt;/em&gt;, Seaside, CA, February 2018.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://people.eecs.berkeley.edu/~biancolin/papers/fased-fpga19.pdf&#34;&gt;Paper PDF&lt;/a&gt; | &lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3293894&#34;&gt;ACM DL&lt;/a&gt; | &lt;a href=&#34;https://people.eecs.berkeley.edu/~biancolin/bib/fased-fpga19.bib&#34;&gt;BibTeX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;IEEE Micro Top Picks of 2018&lt;/strong&gt;: FireSim: FPGA-Accelerated, Cycle-Accurate Scale-Out System Simulation in the Public Cloud&lt;/h3&gt; &#xA;&lt;p&gt;This article discusses several updates since the FireSim ISCA 2018 paper:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sagar Karandikar, Howard Mao, Donggyu Kim, David Biancolin, Alon Amid, Dayeol Lee, Nathan Pemberton, Emmanuel Amaro, Colin Schmidt, Aditya Chopra, Qijing Huang, Kyle Kovacs, Borivoje Nikolic, Randy Katz, Jonathan Bachrach, and Krste Asanović. &lt;strong&gt;FireSim: FPGA-Accelerated Cycle-Exact Scale-Out System Simulation in the Public Cloud&lt;/strong&gt;. &lt;em&gt;IEEE Micro, vol. 39, no. 3, pp. 56-65, (Micro Top Picks 2018 Issue)&lt;/em&gt;. May-June 2019.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sagark.org/assets/pubs/firesim-micro-top-picks2018.pdf&#34;&gt;Article PDF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ICCAD 2019&lt;/strong&gt;: Golden Gate: Bridging The Resource-Efficiency Gap Between ASICs and FPGA Prototypes&lt;/h3&gt; &#xA;&lt;p&gt;Our paper describing FireSim&#39;s Compiler, &lt;em&gt;Golden Gate&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Albert Magyar, David T. Biancolin, Jack Koenig, Sanjit Seshia, Jonathan Bachrach, Krste Asanović, &lt;strong&gt;Golden Gate: Bridging The Resource-Efficiency Gap Between ASICs and FPGA Prototypes&lt;/strong&gt;, &lt;em&gt;In proceedings of the 39th International Conference on Computer-Aided Design (ICCAD &#39;19)&lt;/em&gt;, Westminster, CO, November 2019.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://davidbiancolin.github.io/papers/goldengate-iccad19.pdf&#34;&gt;Paper PDF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ASPLOS 2020&lt;/strong&gt;: FirePerf: FPGA-Accelerated Full-System Hardware/Software Performance Profiling and Co-Design&lt;/h3&gt; &#xA;&lt;p&gt;Our paper to appear in ASPLOS 2020 discusses system-level profiling features in FireSim:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sagar Karandikar, Albert Ou, Alon Amid, Howard Mao, Randy Katz, Borivoje Nikolić, and Krste Asanović, &lt;strong&gt;FirePerf: FPGA-Accelerated Full-System Hardware/Software Performance Profiling and Co-Design&lt;/strong&gt;, &lt;em&gt;In Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2020)&lt;/em&gt;, Lausanne, Switzerland, March 2020.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sagark.org/assets/pubs/fireperf-asplos2020.pdf&#34;&gt;Paper PDF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;IEEE MICRO 2021&lt;/strong&gt;: Accessible, FPGA Resource-Optimized Simulation of Multi-Clock Systems in FireSim&lt;/h3&gt; &#xA;&lt;p&gt;In this special issue, we describe the automated instance-multithreading optimization and support for multiple clock domains in the simulated target.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;David Biancolin, Albert Magyar, Sagar Karandikar, Alon Amid, Borivoje Nikolić, Jonathan Bachrach, Krste Asanović. &lt;strong&gt;Accessible, FPGA Resource-Optimized Simulation of Multi-Clock Systems in FireSim&lt;/strong&gt;. &lt;em&gt;In IEEE Micro Volume: 41, Issue: 4, July-Aug. 1 2021&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://davidbiancolin.github.io/papers/firesim-micro21.pdf&#34;&gt;Article PDF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find other publications, including publications that &lt;em&gt;use&lt;/em&gt; FireSim on the &lt;a href=&#34;https://fires.im/publications/&#34;&gt;FireSim Website&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>typelevel/cats</title>
    <updated>2022-06-02T02:23:20Z</updated>
    <id>tag:github.com,2022-06-02:/typelevel/cats</id>
    <link href="https://github.com/typelevel/cats" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight, modular, and extensible library for functional programming.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cats&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://typelevel.org/cats/img/cats2.png&#34; alt=&#34;Cats graphic&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://index.scala-lang.org/typelevel/cats/cats-core&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/typelevel/cats/cats-core/latest-by-scala-version.svg?targetType=Js&#34; alt=&#34;cats-core Scala version support&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/typelevel/cats/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt; &lt;a href=&#34;https://opencollective.com/typelevel&#34;&gt;&lt;img src=&#34;https://opencollective.com/typelevel/all/badge.svg?label=financial+contributors&#34; alt=&#34;Financial Contributors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/XF3CXcMzqD&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/632277896739946517.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=404244&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;Cats is a library which provides abstractions for functional programming in the &lt;a href=&#34;https://scala-lang.org&#34;&gt;Scala programming language&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Scala supports both object-oriented and functional programming, and this is reflected in the hybrid approach of the standard library. Cats strives to provide functional programming abstractions that are core, &lt;a href=&#34;https://raw.githubusercontent.com/typelevel/cats/main/#binary-compatibility-and-versioning&#34;&gt;binary compatible&lt;/a&gt;, &lt;a href=&#34;https://typelevel.org/cats/motivations.html#modularity&#34;&gt;modular&lt;/a&gt;, &lt;a href=&#34;https://typelevel.org/cats/motivations.html#approachability&#34;&gt;approachable&lt;/a&gt; and &lt;a href=&#34;https://typelevel.org/cats/motivations.html#efficiency&#34;&gt;efficient&lt;/a&gt;. A broader goal of Cats is to provide a foundation for an &lt;a href=&#34;https://typelevel.org/cats/typelevelEcosystem.html&#34;&gt;ecosystem of pure, typeful libraries&lt;/a&gt; to support functional programming in Scala applications.&lt;/p&gt; &#xA;&lt;p&gt;For more detail about Cats&#39; motivations, go &lt;a href=&#34;https://typelevel.org/cats/motivations.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Why &#34;cats&#34;?&lt;/h3&gt; &#xA;&lt;p&gt;The name is a playful shortening of the word &lt;em&gt;category&lt;/em&gt;, from &#34;&lt;a href=&#34;https://en.wikipedia.org/wiki/Category_theory&#34;&gt;category theory&lt;/a&gt;&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Regardless, you do not need to know anything about category theory to use Cats.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Code Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to &lt;a href=&#34;https://github.com/typelevel/cats/graphs/contributors&#34;&gt;all the people who contribute&lt;/a&gt;. We welcome contributions to Cats and would love for you to help build Cats. See our &lt;a href=&#34;https://raw.githubusercontent.com/typelevel/cats/main/CONTRIBUTING.md&#34;&gt;contributor guide&lt;/a&gt; for more information about how you can get involved as a developer. If you are looking for something to start with, &lt;a href=&#34;https://github.com/typelevel/cats/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;here is a beginner friendly list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Financial Contributors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/typelevel&#34;&gt;Become a financial contributor&lt;/a&gt; and help us sustain our community. Donations directly support office hours for maintainers, better documentation and strategic initiatives.&lt;/p&gt; &#xA;&lt;h4&gt;Platinum Sponsors&lt;/h4&gt; &#xA;&lt;a href=&#34;https://opencollective.com/typelevel/contribute/platinum-sposor-12420/checkout&#34;&gt;Platinum sponsorship&lt;/a&gt; starts at $950 USD/month. &#xA;&lt;div id=&#34;platinum-sponsors&#34;&gt; &#xA; &lt;noscript&gt;&#xA;  Platinum Sponsors appear here at &#xA;  &lt;a href=&#34;&#34;&gt;https://typelevel.org/cats&lt;/a&gt;&#xA; &lt;/noscript&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Gold Sponsors&lt;/h4&gt; &#xA;&lt;a href=&#34;https://opencollective.com/typelevel/contribute/gold-sponsor-12419/checkout&#34;&gt;Gold Sponsorship&lt;/a&gt; starts at $420 USD/month. &#xA;&lt;div id=&#34;gold-sponsors&#34;&gt; &#xA; &lt;noscript&gt;&#xA;  Gold Sponsors appear here at &#xA;  &lt;a href=&#34;&#34;&gt;https://typelevel.org/cats&lt;/a&gt;&#xA; &lt;/noscript&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Silver Sponsors&lt;/h4&gt; &#xA;&lt;a href=&#34;https://opencollective.com/typelevel/contribute/silver-sponsor-11780/checkout&#34;&gt;Silver Sponsorship&lt;/a&gt; starts at $180 USD/month. &#xA;&lt;div id=&#34;silver-sponsors&#34;&gt; &#xA; &lt;noscript&gt;&#xA;  Silver Sponsors appear here at &#xA;  &lt;a href=&#34;&#34;&gt;https://typelevel.org/cats&lt;/a&gt;&#xA; &lt;/noscript&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Backers&lt;/h4&gt; Become a &#xA;&lt;a href=&#34;https://opencollective.com/typelevel/contribute/backer-11779/checkout&#34;&gt;Backer&lt;/a&gt; with a recurring donation of just $5 USD/month. &#xA;&lt;div id=&#34;backers&#34;&gt; &#xA; &lt;noscript&gt;&#xA;  Backers appear here at &#xA;  &lt;a href=&#34;&#34;&gt;https://typelevel.org/cats&lt;/a&gt;&#xA; &lt;/noscript&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Other contributors&lt;/h4&gt; We thankfully accept &#xA;&lt;a href=&#34;https://opencollective.com/typelevel/donate&#34;&gt;one-time and recurring&lt;/a&gt; contributions as well. &#xA;&lt;div id=&#34;other-contributors&#34;&gt; &#xA; &lt;noscript&gt;&#xA;  Other contributors appear here at &#xA;  &lt;a href=&#34;&#34;&gt;https://typelevel.org/cats&lt;/a&gt;&#xA; &lt;/noscript&gt; &#xA;&lt;/div&gt; &amp;lt;script src=&#34;/cats/js/sponsors.js&#34;&amp;gt;&amp;lt;/script&amp;gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Cats is available for &lt;a href=&#34;http://www.scala-js.org/&#34;&gt;Scala.js&lt;/a&gt; and &lt;a href=&#34;https://www.scala-native.org/&#34;&gt;Scala Native&lt;/a&gt;, as well as the standard JVM runtime.&lt;/p&gt; &#xA;&lt;p&gt;Cats relies on improved type inference via the fix for &lt;a href=&#34;https://github.com/scala/bug/issues/2712&#34;&gt;SI-2712&lt;/a&gt;, which is not enabled by default. For &lt;strong&gt;Scala 2.12&lt;/strong&gt; you should add the following to your &lt;code&gt;build.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scalacOptions += &#34;-Ypartial-unification&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Partial unification is on by default since Scala 2.13, the compiler no longer accepts &lt;code&gt;-Ypartial-unification&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;And then create the Cats dependency, by adding the following to your &lt;code&gt;build.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;org.typelevel&#34; %% &#34;cats-core&#34; % &#34;2.3.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will pull in the cats-core module. If you require some other functionality, you can pick-and-choose from amongst these modules (used in place of &lt;code&gt;&#34;cats-core&#34;&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-kernel&lt;/code&gt;: Small set of basic type classes (&lt;em&gt;required&lt;/em&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-core&lt;/code&gt;: Most core type classes and functionality (&lt;em&gt;required&lt;/em&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-laws&lt;/code&gt;: Laws for testing type class instances.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-free&lt;/code&gt;: Free structures such as the free monad, and supporting type classes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-testkit&lt;/code&gt;: lib for writing tests for type class instances using laws.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;algebra&lt;/code&gt;: Type classes to represent algebraic structures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;alleycats-core&lt;/code&gt;: Cats instances and classes which are not lawful.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are several other Cats modules that are in separate repos so that they can maintain independent release cycles.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/cats-effect&#34;&gt;&lt;code&gt;cats-effect&lt;/code&gt;&lt;/a&gt;: standard &lt;code&gt;IO&lt;/code&gt; type together with &lt;code&gt;Sync&lt;/code&gt;, &lt;code&gt;Async&lt;/code&gt; and &lt;code&gt;Effect&lt;/code&gt; type classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/cats-mtl&#34;&gt;&lt;code&gt;cats-mtl&lt;/code&gt;&lt;/a&gt;: transformer typeclasses for Cats&#39; Monads, Applicatives and Functors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/mouse&#34;&gt;&lt;code&gt;mouse&lt;/code&gt;&lt;/a&gt;: a small companion to Cats that provides convenient syntax (aka extension methods)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/kittens&#34;&gt;&lt;code&gt;kittens&lt;/code&gt;&lt;/a&gt;: automatic type class instance derivation for Cats and generic utility functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/cats-tagless&#34;&gt;&lt;code&gt;cats-tagless&lt;/code&gt;&lt;/a&gt;: Utilities for tagless final encoded algebras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/cats-collections&#34;&gt;&lt;code&gt;cats-collections&lt;/code&gt;&lt;/a&gt;: Data structures which facilitate pure functional programming&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/cats-testkit-scalatest&#34;&gt;&lt;code&gt;cats-testkit-scalatest&lt;/code&gt;&lt;/a&gt;: Cats testkit integration with Scalatest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Past release notes for Cats are available in &lt;a href=&#34;https://github.com/typelevel/cats/raw/main/CHANGES.md&#34;&gt;CHANGES.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Links:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://typelevel.org/cats/&#34;&gt;typelevel.org/cats/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ScalaDoc: &lt;a href=&#34;https://typelevel.org/cats/api/&#34;&gt;typelevel.org/cats/api/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Type classes: &lt;a href=&#34;https://typelevel.org/cats/typeclasses.md&#34;&gt;typelevel.org/cats/typeclasses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Data types: &lt;a href=&#34;https://typelevel.org/cats/datatypes.md&#34;&gt;typelevel.org/cats/datatypes.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Algebra overview: &lt;a href=&#34;https://typelevel.org/cats/algebra.md&#34;&gt;typelevel.org/cats/algebra.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Glossary: &lt;a href=&#34;https://typelevel.org/cats/nomenclature.md&#34;&gt;typelevel.org/cats/nomenclature.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Resources for Learners: &lt;a href=&#34;https://typelevel.org/cats/resources_for_learners.md&#34;&gt;typelevel.org/cats/resources_for_learners.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FAQ: &lt;a href=&#34;https://typelevel.org/cats/faq.md&#34;&gt;typelevel.org/cats/faq.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The Typelevel Ecosystem: &lt;a href=&#34;https://typelevel.org/cats/typelevelEcosystem.md&#34;&gt;typelevel.org/cats/typelevelEcosystem.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;Discussion around Cats is currently happening on GitHub issues, PR pages, and Discord:&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://discord.gg/XF3CXcMzqD&#34;&gt;Typelevel Discord&lt;/a&gt; has #cats and #cats-dev channels, as well as community channels such as #beginners. Please join us!&lt;/p&gt; &#xA;&lt;p&gt;People are expected to follow the &lt;a href=&#34;https://www.scala-lang.org/conduct/&#34;&gt;Scala Code of Conduct&lt;/a&gt; when discussing Cats on GitHub, Discord, or other venues.&lt;/p&gt; &#xA;&lt;p&gt;We hope that our community will be respectful, helpful, and kind. If you find yourself embroiled in a situation that becomes heated, or that fails to live up to our expectations, you should disengage and contact one of the &lt;a href=&#34;https://raw.githubusercontent.com/typelevel/cats/main/#maintainers&#34;&gt;project maintainers&lt;/a&gt; in private. We hope to avoid letting minor aggressions and misunderstandings escalate into larger problems.&lt;/p&gt; &#xA;&lt;p&gt;If you are being harassed, please contact one of &lt;a href=&#34;https://raw.githubusercontent.com/typelevel/cats/main/#maintainers&#34;&gt;us&lt;/a&gt; immediately so that we can support you.&lt;/p&gt; &#xA;&lt;h3&gt;Binary compatibility and versioning&lt;/h3&gt; &#xA;&lt;p&gt;After &lt;code&gt;1.0.0&lt;/code&gt; release, we &lt;a href=&#34;https://github.com/typelevel/cats/issues/1233&#34;&gt;decided&lt;/a&gt; to use &lt;em&gt;MAJOR.MINOR.PATCH&lt;/em&gt; &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt; going forward, which is different from the &lt;em&gt;EPOCH.MAJOR.MINOR&lt;/em&gt; scheme common among Java and Scala libraries (including the Scala lang).&lt;/p&gt; &#xA;&lt;p&gt;Cats strives to provide a solid and stable foundation for an ecosystem of FP libraries. Thus, we treat backward binary compatibility maintenance with a high priority. In semantic versioning, backward breaking change is &lt;strong&gt;ONLY&lt;/strong&gt; allowed between &lt;em&gt;MAJOR&lt;/em&gt; versions. We will maintain backward binary compatibility between &lt;em&gt;PATCH&lt;/em&gt; AND &lt;em&gt;MINOR&lt;/em&gt; versions. For example, when we release Cats &lt;code&gt;1.1.0&lt;/code&gt;, it will be backward binary compatible with the previous &lt;code&gt;1.0.x&lt;/code&gt; versions. I.E. the new JAR will be a drop-in replacement for the old one. This is critical when your application has a diamond dependency on Cats - depending on two or more libraries that all depend on Cats. If one library upgrades to the new &lt;code&gt;1.1.0&lt;/code&gt; Cats before the other one does, your application still runs thanks to this backward binary compatibility.&lt;/p&gt; &#xA;&lt;p&gt;Also worth noting is that according to semantic versioning, &lt;em&gt;MINOR&lt;/em&gt; version Y (x.Y.z | x &amp;gt; 0) MUST be incremented if new, backwards compatible functionality is introduced to the public API. It MUST be incremented if any public API functionality is marked as deprecated.&lt;/p&gt; &#xA;&lt;p&gt;Any binary breaking changes will require a &lt;em&gt;MAJOR&lt;/em&gt; version bump, which we will be very cautious about. We will also consider using &lt;code&gt;organization&lt;/code&gt; and package name for major versioning in the future. But that decision is yet to be made.&lt;/p&gt; &#xA;&lt;h3&gt;Adopters&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s a (non-exhaustive) list of companies that use Cats in production. Don&#39;t see yours? &lt;a href=&#34;https://github.com/typelevel/cats/edit/main/README.md&#34;&gt;You can add it in a PR!&lt;/a&gt; And if you can, consider &lt;a href=&#34;https://opencollective.com/typelevel&#34;&gt;supporting us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.47deg.com&#34;&gt;47 Degrees&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://abacusprotocol.com&#34;&gt;Abacus Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://experienceleague.adobe.com/docs/analytics-platform/using/cja-connections/cca/overview.html?lang=en&#34;&gt;Adobe (CCA team)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://anduintransact.com&#34;&gt;Anduin Transactions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=16969118&#34;&gt;Apple Inc. (FEAR team)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.autoscout24.com&#34;&gt;AutoScout24&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://avantstay.com/&#34;&gt;AvantStay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://avast.com&#34;&gt;Avast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.azavea.com/&#34;&gt;Azavea&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.babylonhealth.com/&#34;&gt;BabylonHealth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://banno.com/&#34;&gt;Banno Group inside of Jack Henry &amp;amp; Associates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://basefarm.com/&#34;&gt;Basefarm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://buildo.io&#34;&gt;buildo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getbux.com/&#34;&gt;BUX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.chartboost.com/&#34;&gt;Chartboost&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clearscore.com/&#34;&gt;ClearScore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cleverbase.com/en/&#34;&gt;Cleverbase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codacy.com/&#34;&gt;Codacy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codedx.com/&#34;&gt;Code Dx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codecentric.de&#34;&gt;Codecentric&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cognite.com&#34;&gt;Cognite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.colisweb.com/&#34;&gt;Colisweb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://compstak.com&#34;&gt;CompStak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coya.com/&#34;&gt;Coya&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datumbrain.com/&#34;&gt;Datum Brain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://disney.com/&#34;&gt;Disney&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zd.drip.im&#34;&gt;Dripower LTD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drivetribe.com/&#34;&gt;DriveTribe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dwolla.com/&#34;&gt;Dwolla&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://enear.co&#34;&gt;e.near&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eon.com&#34;&gt;E.ON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.earnest.com&#34;&gt;Earnest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ebay.com&#34;&gt;eBay Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eloquentix.com&#34;&gt;Eloquentix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.esailors.de&#34;&gt;eSailors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://etsy.com&#34;&gt;Etsy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.evolutiongaming.com/&#34;&gt;Evolution Gaming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://market.evotor.ru/&#34;&gt;Evotor Marketplace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://exelonix.com/&#34;&gt;Exelonix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://formation.ai&#34;&gt;formation.ai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://free2move.com&#34;&gt;Free2Move&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gemini.edu&#34;&gt;Gemini Observatory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hellosoda.com&#34;&gt;HelloSoda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hi.fi&#34;&gt;HiFi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.homeaway.com&#34;&gt;HomeAway&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hootsuite.com/&#34;&gt;Hootsuite Inc.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iheart.com&#34;&gt;iHeartRadio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.immobilienscout24.de/&#34;&gt;ImmobilienScout24&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.immozentral.com/&#34;&gt;Immozentral&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ing.com&#34;&gt;ING Bank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inner-product.com&#34;&gt;Inner Product&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.innfactory.de/&#34;&gt;innFactory GmbH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.intenthq.com/&#34;&gt;Intent HQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.iofod.com/&#34;&gt;iofod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.iteratorshq.com/&#34;&gt;Iterators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.itv.com/&#34;&gt;ITV&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kaluza.com&#34;&gt;Kaluza&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lego.com&#34;&gt;Lego&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightform.com/&#34;&gt;Lightform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lookout.com&#34;&gt;Lookout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.medidata.com/&#34;&gt;Medidata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merits.com&#34;&gt;Merit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.metacommerce.ru&#34;&gt;Metacommerce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.myob.com&#34;&gt;MYOB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ncredinburgh.com/&#34;&gt;NCR Edinburgh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jobs.netflix.com&#34;&gt;Netflix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.networkedassets.com/&#34;&gt;NetworkedAssets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nezasa.com&#34;&gt;Nezasa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ocadotechnology.com&#34;&gt;Ocado Technology&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://onairentertainment.com/&#34;&gt;On Air Entertainment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ovoenergy.com&#34;&gt;OVO Energy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://packlink.com/&#34;&gt;Packlink&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://permutive.com/&#34;&gt;Permutive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://precog.com&#34;&gt;Precog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raiffeisen.ru/&#34;&gt;Raiffeisenbank Russia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rakuten.com&#34;&gt;Rakuten&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rbccm.com&#34;&gt;RBC Capital Markets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.realestate.com.au/&#34;&gt;REA Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wearerealitygames.com&#34;&gt;Reality Games&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://revonte.com&#34;&gt;Revonte&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rewardsnetwork.com&#34;&gt;Rewards Network&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rms.com/&#34;&gt;RMS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rudder.io&#34;&gt;Rudder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scala.epfl.ch&#34;&gt;Scala Center&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scalac.io&#34;&gt;Scalac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://securityscorecard.io/&#34;&gt;SecurityScorecard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.seek.com.au/&#34;&gt;SEEK Limited&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snowplowanalytics.com/&#34;&gt;Snowplow Analytics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://softwaremill.com&#34;&gt;SoftwareMill&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spiceworks.com/&#34;&gt;Spiceworks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spotahome.com&#34;&gt;Spotahome&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spotify.com&#34;&gt;Spotify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spotx.tv/&#34;&gt;SpotX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.springernature.com&#34;&gt;SpringerNature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.srf.ch&#34;&gt;SRF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sc.com&#34;&gt;Standard Chartered&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stripe.com&#34;&gt;Stripe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.philips.com/&#34;&gt;SWCoE at Philips&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swop.cx/&#34;&gt;SWOP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tapad.com/&#34;&gt;Tapad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tecsisa.com&#34;&gt;Tecsisa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://teikametrics.com&#34;&gt;Teikametrics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tenable.com&#34;&gt;Tenable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.theguardian.com&#34;&gt;The Guardian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tinkoff.ru&#34;&gt;Tinkoff&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tranzzo.com&#34;&gt;Tranzzo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://underscore.io/&#34;&gt;Underscore Consulting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vidiq.com/&#34;&gt;vidIQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wavesplatform.com/&#34;&gt;Waves Platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wegtam.com&#34;&gt;Wegtam GmbH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wejo.com/&#34;&gt;Wejo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wework.com&#34;&gt;WeWork&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wix.com&#34;&gt;Wix.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wolt.com/&#34;&gt;Wolt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xite.com/&#34;&gt;XITE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zalando.com&#34;&gt;Zalando&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zendesk.com&#34;&gt;Zendesk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Maintainers&lt;/h3&gt; &#xA;&lt;p&gt;The current maintainers (people who can merge pull requests) are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rossabaker&#34;&gt;rossabaker&lt;/a&gt; Ross Baker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/armanbilge&#34;&gt;armanbilge&lt;/a&gt; Arman Bilge&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/johnynek&#34;&gt;johnynek&lt;/a&gt; P. Oscar Boykin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adelbertc&#34;&gt;adelbertc&lt;/a&gt; Adelbert Chang&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danicheg&#34;&gt;danicheg&lt;/a&gt; Daniel Esik&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukaJCB&#34;&gt;LukaJCB&lt;/a&gt; Luka Jacobowitz&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peterneyens&#34;&gt;peterneyens&lt;/a&gt; Peter Neyens&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpolecat&#34;&gt;tpolecat&lt;/a&gt; Rob Norris&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/non&#34;&gt;non&lt;/a&gt; Erik Osheim&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/barambani&#34;&gt;barambani&lt;/a&gt; Filippo Mariotti&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpilquist&#34;&gt;mpilquist&lt;/a&gt; Michael Pilquist&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/milessabin&#34;&gt;milessabin&lt;/a&gt; Miles Sabin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/djspiewak&#34;&gt;djspiewak&lt;/a&gt; Daniel Spiewak&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fthomas&#34;&gt;fthomas&lt;/a&gt; Frank Thomas&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/satorg&#34;&gt;satorg&lt;/a&gt; Sergey Torgashov&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julien-truffaut&#34;&gt;julien-truffaut&lt;/a&gt; Julien Truffaut&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kailuowang&#34;&gt;kailuowang&lt;/a&gt; Kailuo Wang&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Retired committers include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ceedubs&#34;&gt;ceedubs&lt;/a&gt; Cody Allen&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/travisbrown&#34;&gt;travisbrown&lt;/a&gt; Travis Brown&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are currently following a practice of requiring at least two sign-offs to merge code PRs (and for large or contentious issues we may wait for more). For typos, documentation improvements or minor build fix we relax this to a single sign-off. More detail in the &lt;a href=&#34;https://github.com/typelevel/cats/raw/main/PROCESS.md&#34;&gt;process document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Copyright and License&lt;/h3&gt; &#xA;&lt;p&gt;All code is available to you under the MIT license, available at &lt;a href=&#34;http://opensource.org/licenses/mit-license.php&#34;&gt;http://opensource.org/licenses/mit-license.php&lt;/a&gt; and also in the &lt;a href=&#34;https://github.com/typelevel/cats/raw/main/COPYING&#34;&gt;COPYING&lt;/a&gt; file. The design is informed by many other projects, in particular &lt;a href=&#34;https://github.com/scalaz/scalaz&#34;&gt;Scalaz&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright the maintainers, 2015-2022.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>typelevel/cats-effect</title>
    <updated>2022-06-02T02:23:20Z</updated>
    <id>tag:github.com,2022-06-02:/typelevel/cats-effect</id>
    <link href="https://github.com/typelevel/cats-effect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The pure asynchronous runtime for Scala&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cats Effect&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://index.scala-lang.org/typelevel/cats-effect/cats-effect&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/typelevel/cats-effect/cats-effect/latest.svg?color=orange&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/QNnHKHq5Ts&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/632277896739946517.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=404244&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;256px&#34; height=&#34;256px&#34; src=&#34;https://raw.githubusercontent.com/typelevel/cats-effect/series/3.x/images/cats-effect-logo.png&#34;&gt; &#xA;&lt;p&gt;Cats Effect is a high-performance, asynchronous, composable framework for building real-world applications in a purely functional style within the Typelevel ecosystem. It provides a concrete tool, known as &#34;the &lt;code&gt;IO&lt;/code&gt; monad&#34;, for capturing and controlling actions, often referred to as &#34;effects&#34;, that your program wishes to perform within a resource-safe, typed context with seamless support for concurrency and coordination. These effects may be asynchronous (callback-driven) or synchronous (directly returning values); they may return within microseconds or run infinitely.&lt;/p&gt; &#xA;&lt;p&gt;Even more importantly, Cats Effect defines a set of typeclasses which define what it means to be a purely functional runtime system. These abstractions power a thriving ecosystem consisting of streaming frameworks, JDBC database layers, HTTP servers and clients, asynchronous clients for systems like Redis and MongoDB, and so much more! Additionally, you can leverage these abstractions within your own application to unlock powerful capabilities with little-or-no code changes, for example solving problems such as dependency injection, multiple error channels, shared state across modules, tracing, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wired: &lt;strong&gt;3.3.12&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tired: &lt;strong&gt;2.5.5&lt;/strong&gt; (end of life)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;org.typelevel&#34; %% &#34;cats-effect&#34; % &#34;3.3.12&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above represents the core, stable dependency which brings in the entirety of Cats Effect. This is &lt;em&gt;most likely&lt;/em&gt; what you want. All current Cats Effect releases are published for Scala 2.12, 2.13, 3.0, and Scala.js 1.7.&lt;/p&gt; &#xA;&lt;p&gt;Or, if you prefer a less bare-bones starting point, you can try &lt;a href=&#34;https://github.com/typelevel/ce3.g8&#34;&gt;the Giter8 template&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sbt -Dsbt.version=1.5.5 new typelevel/ce3.g8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on your use-case, you may want to consider one of the several other modules which are made available within the Cats Effect release. If you&#39;re a datatype implementer (like &lt;a href=&#34;https://monix.io&#34;&gt;Monix&lt;/a&gt;), you probably only want to depend on &lt;strong&gt;kernel&lt;/strong&gt; (the typeclasses) in your compile scope and &lt;strong&gt;laws&lt;/strong&gt; in your test scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies ++= Seq(&#xA;  &#34;org.typelevel&#34; %% &#34;cats-effect-kernel&#34; % &#34;3.3.12&#34;,&#xA;  &#34;org.typelevel&#34; %% &#34;cats-effect-laws&#34;   % &#34;3.3.12&#34; % Test)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a middleware framework (like &lt;a href=&#34;https://fs2.io/&#34;&gt;Fs2&lt;/a&gt;), you probably want to depend on &lt;strong&gt;std&lt;/strong&gt;, which gives you access to &lt;code&gt;Queue&lt;/code&gt;, &lt;code&gt;Semaphore&lt;/code&gt;, and much more without introducing a hard-dependency on &lt;code&gt;IO&lt;/code&gt; outside of your tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies ++= Seq(&#xA;  &#34;org.typelevel&#34; %% &#34;cats-effect-std&#34; % &#34;3.3.12&#34;,&#xA;  &#34;org.typelevel&#34; %% &#34;cats-effect&#34;     % &#34;3.3.12&#34; % Test)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also find some utility in the &lt;strong&gt;testkit&lt;/strong&gt; and &lt;strong&gt;kernel-testkit&lt;/strong&gt; projects, which contain &lt;code&gt;TestContext&lt;/code&gt;, generators for &lt;code&gt;IO&lt;/code&gt;, and a few other things:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;org.typelevel&#34; %% &#34;cats-effect-testkit&#34; % &#34;3.3.12&#34; % Test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cats Effect provides backward binary compatibility within the 2.x and 3.x version lines, and both forward and backward compatibility within any major/minor line. This is analogous to the versioning scheme used by Cats itself, as well as other major projects such as Scala.js. Thus, any project depending upon Cats Effect 2.2.1 can be used with libraries compiled against Cats Effect 2.0.0 or 2.2.3, but &lt;em&gt;not&lt;/em&gt; with libraries compiled against 2.3.0 or higher.&lt;/p&gt; &#xA;&lt;h3&gt;Updating from Cats Effect 1.x / 2.x&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://typelevel.org/cats-effect/docs/migration-guide&#34;&gt;migration guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Hello, World&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import cats.effect._&#xA;&#xA;object Main extends IOApp.Simple {&#xA;  val run = IO.println(&#34;Hello, World!&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you need the ability to take arguments and return exit codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import cats.effect._&#xA;&#xA;object Main extends IOApp {&#xA;  def run(args: List[String]): IO[ExitCode] =&#xA;    if (args.headOption.map(_ == &#34;--do-it&#34;).getOrElse(false))&#xA;      IO.println(&#34;I did it!&#34;).as(ExitCode.Success)&#xA;    else&#xA;      IO.println(&#34;Didn&#39;t do it&#34;).as(ExitCode(-1))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Five Simple Rules&lt;/h2&gt; &#xA;&lt;p&gt;Any program written using Cats Effect provides incredibly strong guarantees and powerful functionality, performance, safety, and composability, provided you follow each of the following rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wrap &lt;em&gt;all&lt;/em&gt; side-effects&lt;/strong&gt; in &lt;code&gt;delay&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;, &lt;code&gt;blocking&lt;/code&gt;, or &lt;code&gt;interruptible&lt;/code&gt;/&lt;code&gt;interruptibleMany&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(pro tip: try to keep the size of your &lt;code&gt;delay&lt;/code&gt; blocks small; two &lt;code&gt;delay&lt;/code&gt;s with a &lt;code&gt;flatMap&lt;/code&gt; is much better than one big &lt;code&gt;delay&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;bracket&lt;/code&gt; or &lt;code&gt;Resource&lt;/code&gt;&lt;/strong&gt; for anything which must be &lt;code&gt;close&lt;/code&gt;d&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;em&gt;Never&lt;/em&gt; hard-block a thread&lt;/strong&gt; outside of &lt;code&gt;blocking&lt;/code&gt; or &lt;code&gt;interruptible&lt;/code&gt;/&lt;code&gt;interruptibleMany&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &lt;code&gt;IOApp&lt;/code&gt;&lt;/strong&gt; instead of writing your own &lt;code&gt;def main&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Never call anything that has &lt;strong&gt;the word &lt;code&gt;unsafe&lt;/code&gt; in the name&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you follow these rules, and you use libraries and frameworks which also follow these rules, you will get a truly astonishing array of things essentially for free:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extremely high performance, elastic, and scalable applications&lt;/li&gt; &#xA; &lt;li&gt;Proven backpressure mechanisms under extreme load in real deployments&lt;/li&gt; &#xA; &lt;li&gt;Reliable resource safety in all cases&lt;/li&gt; &#xA; &lt;li&gt;Aggressive interruption of unnecessary work (e.g. timeouts), automatically, without any extra implementation effort&lt;/li&gt; &#xA; &lt;li&gt;Composable and modular application architecture (real, &lt;em&gt;practical&lt;/em&gt; functional programming)&lt;/li&gt; &#xA; &lt;li&gt;Simple, safe, and incredibly powerful concurrency mechanisms that get &lt;em&gt;faster&lt;/em&gt; under high contention&lt;/li&gt; &#xA; &lt;li&gt;Highly tuned application runtime with optimized threading and memory management semantics&lt;/li&gt; &#xA; &lt;li&gt;Powerful and orthogonal abstractions which enable architectural decomposition that scales to any problem space&lt;/li&gt; &#xA; &lt;li&gt;Access to an entire ecosystem of uniquely powerful libraries and tooling&lt;/li&gt; &#xA; &lt;li&gt;…and so much more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;img width=&#34;461px&#34; height=&#34;356px&#34; align=&#34;right&#34; alt=&#34;a bar chart showing &#39;Fixed Thread Pool&#39; and &#39;Cats Effect 3&#39;, with the latter being substantially taller than the former&#34; src=&#34;https://raw.githubusercontent.com/typelevel/cats-effect/series/3.x/images/contention.png&#34;&gt; &#xA;&lt;p&gt;Most functional and async frameworks will tout their performance on synthetic microbenchmarks, measuring things like how many &lt;code&gt;flatMap&lt;/code&gt;s they can evaluate per microsecond and so on. However, most programs aren&#39;t just a bunch of &lt;code&gt;flatMap&lt;/code&gt;s, and the true performance bottlenecks are usually in things like contention scaling under high load, memory and other resource management, backpressure, page faults, and such. In these areas, Cats Effect is truly unrivaled on the JVM, and in most cases, applications written in a purely functional style using Cats Effect will &lt;em&gt;exceed&lt;/em&gt; the performance and elasticity of the same applications written in an imperative style.&lt;/p&gt; &#xA;&lt;p&gt;The chart to the right shows the results of a synthetic benchmark simulating an extremely high-contention scheduling scenario. The scenario is typical of something like a microservice handling extremely high requests-per-second, with each request representing some sort of scatter/gather semantic in which many complex asynchronous actions must be taken in parallel to produce a timely response.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/typelevel/cats-effect/raw/220d0106ca0ff6106746a41504b6ab07d8fc9199/benchmarks/src/main/scala/cats/effect/benchmarks/WorkStealingBenchmark.scala&#34;&gt;The benchmark&lt;/a&gt; measures the performance of a typical &#34;disruptor pattern&#34; application written using a fixed thread pool (from &lt;code&gt;java.util.concurrent.Executors&lt;/code&gt;) compared to the same workflow implemented using Cats Effect (specifically version 3.0). The scores are not a typo: Cats Effect is &lt;em&gt;almost 55x faster&lt;/em&gt; than the typical disruptor-style, hand-tuned implementation. Similarly dramatic results are consistently observed when comparing Cats Effect with other popular asynchronous and functional frameworks.&lt;/p&gt; &#xA;&lt;p&gt;As always, benchmarks are one thing, and your application is its own special snowflake with its own performance profile. Always measure and test &lt;em&gt;your application&lt;/em&gt; before assuming that someone else&#39;s performance results apply in your use-case. When in doubt, &lt;a href=&#34;https://discord.gg/QNnHKHq5Ts&#34;&gt;come talk with us&lt;/a&gt; and we&#39;ll give you an honest opinion!&lt;/p&gt; &#xA;&lt;h2&gt;Abstraction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/typelevel/cats-effect/series/3.x/images/hierarchy.svg?sanitize=true&#34; alt=&#34;the cats effect hierarchy of typeclasses as of version 3.0&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cats Effect isn&#39;t just designed to enable high performance applications with out-of-the-box safety and elasticity under load. It was intended first and foremost as a tool for implementing &lt;em&gt;composable&lt;/em&gt; and &lt;em&gt;reasonable&lt;/em&gt; software that is easy to write, easy to test, and easy to evolve as your team and requirements change over time. To achieve this goal, Cats Effect embraces and enables strong, typeful, purely-functional programming styles that are uniquely tailored for the Scala language.&lt;/p&gt; &#xA;&lt;p&gt;The typical Cats Effect system is often built in terms of simple, orthogonal, primitive capabilities which come together to represent all the expressive power necessary to encode a modern asynchronous runtime. Much like how the rules of addition, multiplication, and integers come together to define much of what we understand about basic arithmetic, so too do the rules of &lt;code&gt;Functor&lt;/code&gt;, &lt;code&gt;Monad&lt;/code&gt;, and &lt;code&gt;Concurrent&lt;/code&gt; come together to define the nature of a &lt;em&gt;program&lt;/em&gt; which has all the capabilities you need.&lt;/p&gt; &#xA;&lt;p&gt;By learning and leveraging these capabilities directly, it is possible to write functions and classes which clearly state their requirements and capabilities in a &lt;em&gt;statically typed&lt;/em&gt; and discoverable fashion, improving documentation, readability, and separation of concerns.&lt;/p&gt; &#xA;&lt;p&gt;And, just as with arithmetic, even when you don&#39;t directly leverage the nature of abstract mathematics in your daily life, those laws are still present shaping the world around you and enabling powerful and surprising things like computers and trains and restaurant menus. The laws and abstractions of Cats Effect support a powerful and unique ecosystem of frameworks, giving you access to rich and advanced functionality unparalleled in any language or ecosystem, battle tested in production environments ranging from some of the largest companies in the world to some of the nimblest startups.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/typelevel/cats-effect/series/3.x/CONTRIBUTING.md&#34;&gt;&lt;strong&gt;CONTRIBUTING.md&lt;/strong&gt;&lt;/a&gt; for more details. Lots to do!&lt;/p&gt; &#xA;&lt;h3&gt;Website&lt;/h3&gt; &#xA;&lt;p&gt;To build the documentation site locally, the following dependencies are needed, in addition to &lt;code&gt;sbt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node (14.x ideally)&lt;/li&gt; &#xA; &lt;li&gt;Yarn (any version should work)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: &lt;a href=&#34;https://nixos.org/&#34;&gt;Nix&lt;/a&gt; users can just run &lt;code&gt;nix-shell&lt;/code&gt; at the root directory and follow along the next instructions.&lt;/p&gt; &#xA;&lt;p&gt;Next, check out the documentation branch along with its submodules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout --track origin/docs&#xA;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, build the site.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh host&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything goes well, your browser will open at the end of this.&lt;/p&gt; &#xA;&lt;h2&gt;Tool Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img width=&#34;185px&#34; height=&#34;44px&#34; align=&#34;right&#34; src=&#34;https://www.yourkit.com/images/yklogo.png&#34;&gt;Development of Cats Effect is generously supported in part by &lt;a href=&#34;https://www.yourkit.com&#34;&gt;YourKit&lt;/a&gt; through the use of their excellent Java profiler.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2017-2022 Typelevel&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>digital-asset/daml</title>
    <updated>2022-06-02T02:23:20Z</updated>
    <id>tag:github.com,2022-06-02:/digital-asset/daml</id>
    <link href="https://github.com/digital-asset/daml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Daml smart contract language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.digitalasset.com/developers&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/digital-asset/daml/main/daml-logo.png&#34; alt=&#34;Daml logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.daml.com/getting-started/installation.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/digital-asset/daml.svg?label=Download&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/digital-asset/daml/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/digitalasset/daml/_build/latest?definitionId=4&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/digitalasset/daml/_apis/build/status/digital-asset.daml?branchName=main&amp;amp;label=Build&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0&lt;/p&gt; &#xA;&lt;h1&gt;Welcome to the Daml repository!&lt;/h1&gt; &#xA;&lt;p&gt;This repository hosts all code for the &lt;a href=&#34;https://www.digitalasset.com/developers&#34;&gt;Daml smart contract language and SDK&lt;/a&gt;, originally created by &lt;a href=&#34;https://www.digitalasset.com&#34;&gt;Digital Asset&lt;/a&gt;. Daml is an open-source smart contract language for building future-proof distributed applications on a safe, privacy-aware runtime. The SDK is a set of tools to help you develop applications based on Daml.&lt;/p&gt; &#xA;&lt;h2&gt;Using Daml&lt;/h2&gt; &#xA;&lt;p&gt;To download Daml, follow &lt;a href=&#34;https://docs.daml.com/getting-started/installation.html&#34;&gt;the installation instructions&lt;/a&gt;. Once installed, to try it out, follow the &lt;a href=&#34;https://docs.daml.com/getting-started/quickstart.html&#34;&gt;quickstart guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions about how to use Daml or how to build Daml-based solutions, please join us on the &lt;a href=&#34;https://discuss.daml.com&#34;&gt;Daml forum&lt;/a&gt;. Alternatively, if you prefer asking on StackOverflow, please use &lt;a href=&#34;https://stackoverflow.com/tags/daml&#34;&gt;the &lt;code&gt;daml&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Daml&lt;/h2&gt; &#xA;&lt;p&gt;We warmly welcome &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/daml/main/CONTRIBUTING.md&#34;&gt;contributions&lt;/a&gt;. If you are looking for ideas on how to contribute, please browse our &lt;a href=&#34;https://github.com/digital-asset/daml/issues&#34;&gt;issues&lt;/a&gt;. To build and test Daml:&lt;/p&gt; &#xA;&lt;h3&gt;1. Clone this repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:digital-asset/daml.git&#xA;cd daml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Set up the development dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Our builds require various development dependencies (e.g. Java, Bazel, Python), provided by a tool called &lt;code&gt;dev-env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;On Linux &lt;code&gt;dev-env&lt;/code&gt; can be installed with:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Nix by running: &lt;code&gt;bash &amp;lt;(curl -sSfL https://nixos.org/nix/install)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;dev-env&lt;/code&gt; by running: &lt;code&gt;eval &#34;$(dev-env/bin/dade assist)&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you don&#39;t want to enter &lt;code&gt;dev-env&lt;/code&gt; manually each time using &lt;code&gt;eval &#34;$(dev-env/bin/dade assist)&#34;&lt;/code&gt;, you can also install &lt;a href=&#34;https://direnv.net&#34;&gt;direnv&lt;/a&gt;. This repo already provides a &lt;code&gt;.envrc&lt;/code&gt; file, with an option to add more in a &lt;code&gt;.envrc.private&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h4&gt;Mac&lt;/h4&gt; &#xA;&lt;p&gt;On Mac &lt;code&gt;dev-env&lt;/code&gt; can be installed with:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Nix by running: &lt;code&gt;bash &amp;lt;(curl -sSfL https://nixos.org/nix/install)&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is a &lt;em&gt;multi-user installation&lt;/em&gt; (there is no single-user installation option for macOS). Because of this, you need to configure &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; to use Nix caches:&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Add yourself as a nix trusted user by running &lt;code&gt;echo &#34;extra-trusted-users = $USER&#34; | sudo tee -a /etc/nix/nix.conf&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Restart the &lt;code&gt;nix-daemon&lt;/code&gt; by running &lt;code&gt;sudo launchctl stop org.nixos.nix-daemon &amp;amp;&amp;amp; sudo launchctl start org.nixos.nix-daemon&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter &lt;code&gt;dev-env&lt;/code&gt; by running: &lt;code&gt;eval &#34;$(dev-env/bin/dade assist)&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you don&#39;t want to enter &lt;code&gt;dev-env&lt;/code&gt; manually each time using &lt;code&gt;eval &#34;$(dev-env/bin/dade assist)&#34;&lt;/code&gt;, you can also install &lt;a href=&#34;https://direnv.net&#34;&gt;direnv&lt;/a&gt;. This repo already provides a &lt;code&gt;.envrc&lt;/code&gt; file, with an option to add more in a &lt;code&gt;.envrc.private&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Note that after a macOS update it can appear as if Nix is not installed. This is because macOS updates can modify shell config files in &lt;code&gt;/etc&lt;/code&gt;, which the multi-user installation of Nix modifies as well. A workaround for this problem is to add the following to your shell config file in your &lt;code&gt;$HOME&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Nix&#xA;if [ -e &#39;/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh&#39; ]; then&#xA;  . &#39;/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh&#39;&#xA;fi&#xA;# End Nix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/NixOS/nix/issues/3616&#34;&gt;https://github.com/NixOS/nix/issues/3616&lt;/a&gt; for more information about this issue.&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;On Windows you need to enable long file paths by running the following command in an admin powershell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Set-ItemProperty -Path &#39;HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem&#39; -Name LongPathsEnabled -Type DWord -Value 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need to configure Bazel for Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;build --config windows&#34; &amp;gt; .bazelrc.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, if you are on a Windows ad-hoc or CI machine you can use &lt;code&gt;ci/configure-bazel.sh&lt;/code&gt; instead of performing these steps manually. In that case, you should checkout the &lt;code&gt;daml&lt;/code&gt; repository into the path &lt;code&gt;D:\a\1\s&lt;/code&gt; in order to be able to use remote cache artifacts.&lt;/p&gt; &#xA;&lt;p&gt;Then start &lt;code&gt;dev-env&lt;/code&gt; from PowerShell with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\dev-env\windows\bin\dadew.ps1 install&#xA;.\dev-env\windows\bin\dadew.ps1 sync&#xA;.\dev-env\windows\bin\dadew.ps1 enable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In all new PowerShell processes started, you need to repeat the &lt;code&gt;enable&lt;/code&gt; step.&lt;/p&gt; &#xA;&lt;h3&gt;3. First build and test&lt;/h3&gt; &#xA;&lt;p&gt;We have a single script to build most targets and run the tests. On Linux and Mac run &lt;code&gt;./build.sh&lt;/code&gt;. On Windows run &lt;code&gt;.\build.ps1&lt;/code&gt;. Note that these scripts may take over an hour the first time.&lt;/p&gt; &#xA;&lt;p&gt;To just build do &lt;code&gt;bazel build //...&lt;/code&gt;, and to just test do &lt;code&gt;bazel test //...&lt;/code&gt;. To read more about Bazel and how to use it, see &lt;a href=&#34;https://bazel.build&#34;&gt;the Bazel site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Mac if building is causing trouble complaining about missing nix packages, you can try first running &lt;code&gt;nix-build -A tools -A cached nix&lt;/code&gt; repeatedly until it completes without error.&lt;/p&gt; &#xA;&lt;h3&gt;4. Installing a local copy&lt;/h3&gt; &#xA;&lt;p&gt;On Linux and Mac run &lt;code&gt;daml-sdk-head&lt;/code&gt; which installs a version of the SDK with version number &lt;code&gt;0.0.0&lt;/code&gt;. Set the &lt;code&gt;version:&lt;/code&gt; field in any Daml project to 0.0.0 and it will use the locally installed one.&lt;/p&gt; &#xA;&lt;p&gt;On Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel build //release:sdk-release-tarball&#xA;tar -vxf .\bazel-bin\release\sdk-release-tarball-ce.tar.gz&#xA;cd sdk-*&#xA;daml\daml.exe install . --install-assistant=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That should tell you what to put in the path, something along the lines of &lt;code&gt;C:\Users\admin\AppData\Roaming\daml\bin&lt;/code&gt;. Note that the Windows build is not yet fully functional.&lt;/p&gt; &#xA;&lt;h3&gt;Caching: build speed and disk space considerations&lt;/h3&gt; &#xA;&lt;p&gt;Bazel has a lot of nice properties, but they come at the cost of frequently rebuilding &#34;the world&#34;. To make that bearable, we make extensive use of caching. Most artifacts should be cached in our CDN, which is configured in &lt;code&gt;.bazelrc&lt;/code&gt; in this project.&lt;/p&gt; &#xA;&lt;p&gt;However, even then, you may end up spending a lot of time (and bandwidth!) downloading artifacts from the CDN. To alleviate that, by default, our build will create a subfolder &lt;code&gt;.bazel-cache&lt;/code&gt; in this project and keep an on-disk cache. &lt;strong&gt;This can take about 10GB&lt;/strong&gt; at the time of writing.&lt;/p&gt; &#xA;&lt;p&gt;To disable the disk cache, remove the following lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build:linux --disk_cache=.bazel-cache&#xA;build:darwin --disk_cache=.bazel-cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from the &lt;code&gt;.bazelrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you work with multiple copies of this repository, you can point all of them to the same disk cache by overwriting these configs in either a &lt;code&gt;.bazelrc.local&lt;/code&gt; file in each copy, or a &lt;code&gt;~/.bazelrc&lt;/code&gt; file in your home directory.&lt;/p&gt; &#xA;&lt;h3&gt;Shared memory segment issues&lt;/h3&gt; &#xA;&lt;p&gt;On macOS at least, it looks like our setup does not always properly close the resources PostgreSQL uses. After a number of test runs, you may encounter an error message along the lines of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FATAL:  could not create shared memory segment: No space left on device&#xA;DETAIL:  Failed system call was shmget(key=5432001, size=56, 03600).&#xA;HINT:  This error does *not* mean that you have run out of disk space. It occurs either if all available shared memory IDs have been taken, in which case you need to raise the SHMMNI parameter in your kernel, or because the system&#39;s overall limit for shared memory has been reached.&#xA;        The PostgreSQL documentation contains more information about shared memory configuration.&#xA;child process exited with exit code 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, this is a memory leak, so increasing &lt;code&gt;SHMNI&lt;/code&gt; (or &lt;code&gt;SHMALL&lt;/code&gt; etc.) as suggested will only delay the issue. You can look at the existing shared memory segments on your system by running &lt;code&gt;ipcs -mcopt&lt;/code&gt;; this will print a line per segment, indicating the process ID of the last process to connect to the segment as well as the last access time and the number of currently connected processes.&lt;/p&gt; &#xA;&lt;p&gt;If you identify segments with no connected processes, and you are confident you can remove them, you can do so with &lt;code&gt;ipcrm $sid&lt;/code&gt;, where &lt;code&gt;$sid&lt;/code&gt; is the process ID displayed (as the second column) by &lt;code&gt;ipcs&lt;/code&gt;. Not many macOS applications use shared memory segments; &lt;strong&gt;if you have verified that all the existing memory segments on your machine need to be deleted&lt;/strong&gt;, e.g. because they have all been created by PostgreSQL instances that are no longer running, here is a Bash invocation you can use to remove all shared memory segments from your system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a dangerous command. Make sure you understand what it does before running it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for shmid in $(ipcs -m | sed 1,3d | awk &#39;{print $2}&#39; | sed &#39;$d&#39;); do ipcrm -m $shmid; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Haskell profiling builds&lt;/h3&gt; &#xA;&lt;p&gt;To build Haskell executables with profiling enabled, pass &lt;code&gt;-c dbg&lt;/code&gt; to Bazel, e.g. &lt;code&gt;bazel build -c dbg damlc&lt;/code&gt;. If you want to build the whole SDK with profiling enabled use &lt;code&gt;daml-sdk-head --profiling&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dream11/zio-http</title>
    <updated>2022-06-02T02:23:20Z</updated>
    <id>tag:github.com,2022-06-02:/dream11/zio-http</id>
    <link href="https://github.com/dream11/zio-http" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A scala library to write Http apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZIO Http&lt;/h1&gt; &#xA;&lt;p&gt;ZIO Http is a scala library for building http apps. It is powered by &lt;a href=&#34;https://zio.dev&#34;&gt;ZIO&lt;/a&gt; and &lt;a href=&#34;http://netty.io&#34;&gt;netty&lt;/a&gt; and aims at being the defacto solution for writing, highly scalable and &lt;a href=&#34;https://raw.githubusercontent.com/dream11/zio-http/main/#benchmarks&#34;&gt;performant&lt;/a&gt; web applications using idiomatic scala.&lt;/p&gt; &#xA;&lt;p&gt;Check out the full documentation here: &lt;a href=&#34;https://dream11.github.io/zio-http&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dream11/zio-http/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt; &lt;a href=&#34;https://discord.com/channels/629491597070827530/819703129267372113&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629491597070827530.svg?logo=discord&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/io/d11/zhttp_2.13/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/io.d11/zhttp_2.13?server=https%3A%2F%2Fs01.oss.sonatype.org&#34; alt=&#34;Sonatype Nexus (Releases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://s01.oss.sonatype.org/content/repositories/snapshots/io/d11/zhttp_2.13/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/io.d11/zhttp_2.13?server=https%3A%2F%2Fs01.oss.sonatype.org&#34; alt=&#34;Sonatype Nexus (Snapshots)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/dream11/zio-http&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/dream11/zio-http.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open.vscode.dev/dream11/zio-http&#34;&gt;&lt;img src=&#34;https://open.vscode.dev/badges/open-in-vscode.svg?sanitize=true&#34; alt=&#34;Open in Visual Studio Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dream11/zio-http/main/#zio-http&#34;&gt;ZIO Http&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dream11/zio-http/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dream11/zio-http/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dream11.github.io/zio-http/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;A simple Http server can be built using a few lines of code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import zio._&#xA;import zhttp.http._&#xA;import zhttp.service.Server&#xA;&#xA;object HelloWorld extends App {&#xA;  val app = Http.collect[Request] {&#xA;    case Method.GET -&amp;gt; !! / &#34;text&#34; =&amp;gt; Response.text(&#34;Hello World!&#34;)&#xA;  }&#xA;&#xA;  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =&#xA;    Server.start(8090, app).exitCode&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;You can checkout more examples in the &lt;a href=&#34;https://github.com/dream11/zio-http/tree/main/example/src/main/scala/example&#34;&gt;example&lt;/a&gt; project —&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/HelloWorld.scala&#34;&gt;Simple Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/HelloWorldAdvanced.scala&#34;&gt;Advanced Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/WebSocketEcho.scala&#34;&gt;WebSocket Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/StreamingResponse.scala&#34;&gt;Streaming Response&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/SimpleClient.scala&#34;&gt;Simple Client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/FileStreaming.scala&#34;&gt;File Streaming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/example/src/main/scala/example/Authentication.scala&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Steps to run an example&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Edit the &lt;a href=&#34;https://github.com/dream11/zio-http/raw/main/project/BuildHelper.scala#L109&#34;&gt;RunSettings&lt;/a&gt; - modify &lt;code&gt;className&lt;/code&gt; to the example you&#39;d like to run.&lt;/li&gt; &#xA; &lt;li&gt;From sbt shell, run &lt;code&gt;~example/reStart&lt;/code&gt;. You should see &lt;code&gt;Server started on port: 8090&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Send curl request for defined &lt;code&gt;http Routes&lt;/code&gt;, for eg : &lt;code&gt;curl -i &#34;http://localhost:8090/text&#34;&lt;/code&gt; for &lt;code&gt;example.HelloWorld&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Setup via &lt;code&gt;build.sbt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;io.d11&#34; %% &#34;zhttp&#34;      % &#34;[version]&#34;&#xA;libraryDependencies += &#34;io.d11&#34; %% &#34;zhttp-test&#34; % &#34;[version]&#34; % Test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; ZIO Http is compatible with &lt;code&gt;ZIO 1.x&lt;/code&gt; and &lt;code&gt;ZIO 2.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Watch Mode&lt;/h1&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://github.com/spray/sbt-revolver&#34;&gt;sbt-revolver&lt;/a&gt; plugin to start the server and run it in watch mode using &lt;code&gt;~ reStart&lt;/code&gt; command on the SBT console.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/dsptools</title>
    <updated>2022-06-02T02:23:20Z</updated>
    <id>tag:github.com,2022-06-02:/ucb-bar/dsptools</id>
    <link href="https://github.com/ucb-bar/dsptools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Library of Chisel3 Tools for Digital Signal Processing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DSP Tools Development Environment&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ucb-bar/dsptools/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/ucb-bar/dsptools/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository serves as a good starting point for making and easily testing your various DSP generators in Chisel &lt;em&gt;(1 generator at a time)&lt;/em&gt;. See &lt;a href=&#34;https://chisel.eecs.berkeley.edu&#34;&gt;UC Berkeley Chisel&lt;/a&gt; homepage for more information about Chisel.&lt;/p&gt; &#xA;&lt;p&gt;For a list of common errors, check out the &lt;a href=&#34;https://github.com/ucb-bar/dsptools/wiki/Common-Errors&#34;&gt;wiki page&lt;/a&gt;. Feel free to add your own!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Key Enhancements&lt;/h1&gt; &#xA;&lt;p&gt;Dsptools is a library that can be used with any Chisel library. Some of the goals of dsptools are to enable:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Pipeline delay checking (Isn&#39;t it annoying when the delays of two signals into an operation don&#39;t line up because you forgot to delay a corresponding signal in your haste to close timing?)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enhanced support for designing and testing DSP with generic types (i.e. switching between &lt;strong&gt;DSPReal&lt;/strong&gt; for verifying functional correctness with double-precision floating point and &lt;strong&gt;FixedPoint&lt;/strong&gt; for evaluating fixed-point design metrics by changing a single parameter).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;More useful and universal testing platform for numeric types!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Numbers are displayed in their correct formats instead of hex for peek, poke, and expect operations. Additionally, if your tester extends &lt;strong&gt;DSPTester&lt;/strong&gt;, you can optionally dump your test sequence to a &lt;strong&gt;Verilog testbench&lt;/strong&gt; that replays the test for functional verification on all simulation platforms (i.e. Xilinx, Altera, etc. instead of only VCS). The tolerance of comparisons with expected values can also be changed via &lt;code&gt;DSPTester.setTol(floTol = decimal_tolerance, fixedTol = number_of_bits)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Miscellaneous additional features&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wide range of LUT modules for ease of generating lookup tables from pre-calculated constants (no intermediate representation)&lt;/li&gt; &#xA; &lt;li&gt;Memory modules that abstract out confusion associated with Chisel Mem&lt;/li&gt; &#xA; &lt;li&gt;Generates useful helper files with each Verilog output (constraints, generator parameters used, etc.).&lt;/li&gt; &#xA; &lt;li&gt;Easier to rename modules &amp;amp; signals and have renaming actually succeed.&lt;/li&gt; &#xA; &lt;li&gt;Expanding Support for non-base-2 math.&lt;/li&gt; &#xA; &lt;li&gt;Adds support for numerical processing in the Chisel Environment via &lt;a href=&#34;https://github.com/scalanlp/breeze&#34;&gt;Breeze&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Dsptools is published alongside Chisel, FIRRTL, and the other related projects. It can be used by adding&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;dsptools&#34; % &#34;XXXX&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to your build.sbt, where &lt;code&gt;XXXX&lt;/code&gt; is the desired version. See Github for the latest release. Snapshots are also published on Sonatype, which are beneficial if you want to use the latest features.&lt;/p&gt; &#xA;&lt;p&gt;Projects that dsptools depends on are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ucb-bar/firrtl&#34;&gt;FIRRTL&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ucb-bar/firrtl-interpreter&#34;&gt;FIRRTL Interpreter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ucb-bar/chisel3&#34;&gt;Chisel3&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ucb-bar/chisel-testers&#34;&gt;Chisel Testers&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Numeric Typeclasses&lt;/h1&gt; &#xA;&lt;p&gt;This library defines a number of typeclasses for numeric types. A brief explanation of how typeclasses work in scala can be found &lt;a href=&#34;http://typelevel.org/cats/typeclasses.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://blog.jaceklaskowski.pl/2015/05/15/ad-hoc-polymorphism-in-scala-with-type-classes.html&#34;&gt;here&lt;/a&gt;. Our DSP-specific typeclasses are built on top of &lt;a href=&#34;https://github.com/non/spire&#34;&gt;spire&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The goal of these typeclasses is to make it easy to write chisel modules that treat the number representation as a parameter. For example, using typeclasses you can write chisel that generates an FIR filter for both real and complex numbers. You can also use typeclasses to write chisel that generates a circuit implementation using floating point (via Verilog&#39;s real type). After testing that your circuit implementation works with floating point, you can use the same code to generate a fixed point version of the circuit suitable for synthesis.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For a additional, more detailed description of the Numeric classes in dsptools: see &lt;a href=&#34;https://github.com/ucb-bar/dsptools/raw/master/src/main/scala/dsptools/numbers/README.md&#34;&gt;The Numbers ReadMe&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A generic function in scala is defined like so:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;def func[T](in: T): T&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This means that you can call &lt;code&gt;func(obj)&lt;/code&gt; for an object of any type. If &lt;code&gt;obj&lt;/code&gt; is of type &lt;code&gt;Q&lt;/code&gt;, you can write &lt;code&gt;func[Q](obj)&lt;/code&gt; to specify that we want the &lt;code&gt;Q&lt;/code&gt; version of the generic function &lt;code&gt;func&lt;/code&gt;, but this is only necessary if the scala compiler can&#39;t figure out what &lt;code&gt;Q&lt;/code&gt; is supposed to be.&lt;/p&gt; &#xA;&lt;p&gt;You can also write&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;class SomeClass[T]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;and use &lt;code&gt;T&lt;/code&gt; like it is a real type for any member functions of variables. To write a generic chisel Module, we might try to write&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class Passthrough[T](gen: T) extends Module {&#xA;  val io = new IO(Bundle {&#xA;    val in = Input(gen)&#xA;    val out = Output(gen)&#xA;  })&#xA;  io.out := io.in&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;gen&lt;/code&gt; is a parameter specifying the type you want to use for your IO&#39;s, so you could write &lt;code&gt;Module(new Passthrough(SInt(width=10)))&lt;/code&gt; or &lt;code&gt;Module(new Passthrough(new Bundle { ... }))&lt;/code&gt;. Unfortunately, there&#39;s a problem with this. &lt;code&gt;T&lt;/code&gt; can be any type, and a lot of types don&#39;t make sense, like &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;()=&amp;gt;Unit&lt;/code&gt;. This will not compile, because &lt;code&gt;Input()&lt;/code&gt;, &lt;code&gt;Output()&lt;/code&gt;, and &lt;code&gt;:=&lt;/code&gt; are functions defined on chisel types. We can fix this problem by writing&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;class Passthrough[T&amp;lt;:Data](gen: T) extends Module&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This type constraint means that we have to choose &lt;code&gt;T&lt;/code&gt; to be a subtype of the chisel type &lt;code&gt;Data&lt;/code&gt;. Things like &lt;code&gt;UInt&lt;/code&gt;, &lt;code&gt;SInt&lt;/code&gt;, and &lt;code&gt;Bundle&lt;/code&gt; are subtypes of &lt;code&gt;Data&lt;/code&gt;. Now the example above should compile. This example isn&#39;t very interesting, though. &lt;code&gt;Data&lt;/code&gt; lets you do basic things like assignment and make registers, but doesn&#39;t define any mathematical operations, so if we write&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class Doubler[T&amp;lt;:Data](gen: T) extends Module {&#xA;  val io = IO(new Bundle {&#xA;    val in = Input(gen)&#xA;    val out = Output(gen)&#xA;  })&#xA;  io.out := io.in + io.in&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;it won&#39;t compile. This is where typeclasses come in. This library defines a trait&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;trait Real[T] {&#xA;  ...&#xA;  def plus(x: T, y: T): T&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as well as an implicit conversion so that &lt;code&gt;a+b&lt;/code&gt; gets converted to &lt;code&gt;Real[T].plus(a,b)&lt;/code&gt;. &lt;code&gt;Real[T]&lt;/code&gt; is a typeclass. Typeclasses are a useful pattern in scala, so there is syntactic sugar to make using them easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import dsptools.numbers._&#xA;class Doubler[T&amp;lt;:Data:Real](gen: T) extends Module&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you don&#39;t include the &lt;code&gt;:Real&lt;/code&gt; at the end, the scala compiler will think &lt;code&gt;io.in + io.in&lt;/code&gt; is string concatenation and you&#39;ll get a weird error saying&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[error]  found   : T&#xA;[error]  required: String&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some useful typeclasses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ring&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;defines +, *, -, **, zero, one&lt;/li&gt; &#xA;   &lt;li&gt;defined in &lt;a href=&#34;https://github.com/non/spire&#34;&gt;Spire&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Read: &lt;a href=&#34;https://en.wikipedia.org/wiki/Ring_(mathematics)&#34;&gt;https://en.wikipedia.org/wiki/Ring_(mathematics)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Note: We chose to restrict ourselves to &lt;code&gt;Ring&lt;/code&gt; rather than &lt;code&gt;Field&lt;/code&gt; because division is particularly expensive and nuanced in hardware. Rather than typing &lt;code&gt;a / b&lt;/code&gt; we think it is better to require users to instantiate a module and think about what&#39;s going on.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Eq&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;defines === and =/= (returning chisel Bools!)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PartialOrder&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;extends Eq&lt;/li&gt; &#xA;   &lt;li&gt;defines &amp;gt;, &amp;lt;, &amp;lt;=, &amp;gt;= (returning a &lt;code&gt;ValidIO[ComparisonBundle]&lt;/code&gt; that has &lt;code&gt;valid&lt;/code&gt; false if the objects are not comparable&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Order&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;extends PartialOrder&lt;/li&gt; &#xA;   &lt;li&gt;defines &amp;gt;, &amp;lt;, &amp;lt;=, &amp;gt;=, min, max&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sign&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;defines abs, isSignZero, isSignPositive, isSignNegative, isSignNonZero, isSignNonPositive, isSignNonNegative&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Real&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;extends Ring with Order with Sign&lt;/li&gt; &#xA;   &lt;li&gt;defines ceil, round, floor, isWhole&lt;/li&gt; &#xA;   &lt;li&gt;defines a bunch of conversion methods from ConvertableTo, e.g. fromDouble, fromInt&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Integer&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;extends Real&lt;/li&gt; &#xA;   &lt;li&gt;defines mod&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Rocket-chip&lt;/h1&gt; &#xA;&lt;p&gt;Integration of dsptools with a rocket-chip based project:&lt;/p&gt; &#xA;&lt;p&gt;The github project &lt;a href=&#34;https://github.com/chick/rocket-dsp-utils&#34;&gt;Rocket Dsp Utils&lt;/a&gt; contains useful tools that can be used to integrate components from this project with a rocket-chip based one.&lt;/p&gt; &#xA;&lt;p&gt;These tools formerly were contained in this repo under the &lt;code&gt;rocket&lt;/code&gt; sub-directory.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This code is maintained by &lt;a href=&#34;https://github.com/chick&#34;&gt;Chick&lt;/a&gt;, &lt;a href=&#34;https://github.com/shunshou&#34;&gt;Angie&lt;/a&gt; and &lt;a href=&#34;https://github.com/grebe&#34;&gt;Paul&lt;/a&gt;. Let us know if you have any questions/feedback!&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2015 - 2021 The Regents of the University of California. Released under the Modified (3-clause) BSD license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jaszczur/ScalaXmlProcessing</title>
    <updated>2022-06-02T02:23:20Z</updated>
    <id>tag:github.com,2022-06-02:/jaszczur/ScalaXmlProcessing</id>
    <link href="https://github.com/jaszczur/ScalaXmlProcessing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Trying XML parsing in Scala&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sample output&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Responses for PLMN/RNC-1&#xA;  Response(Undefined,0,Just started)&#xA;  Response(Ongoing,69,Still going)&#xA;  Response(Successfull,100,Everything&#39;s fine)&#xA;end&#xA;Responses for PLMN/RNC-2&#xA;  Response(Failed,100,)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ucb-bar/hwacha</title>
    <updated>2022-06-02T02:23:20Z</updated>
    <id>tag:github.com,2022-06-02:/ucb-bar/hwacha</id>
    <link href="https://github.com/ucb-bar/hwacha" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microarchitecture implementation of the decoupled vector-fetch accelerator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hwacha Vector-Thread Co-Processor Sources&lt;/h1&gt; &#xA;&lt;p&gt;To use this co-processor, include this repo as a git submodule and add it as to your chip&#39;s &lt;code&gt;build.sbt&lt;/code&gt; as a Project, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lazy val hwacha = Project(file(&#34;hwacha&#34;), &#34;hwacha&#34;)&#xA;  .settings(buildSettings)&#xA;  .dependsOn(rocketchip)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hwacha depends on the Rocket Chip project. Make sure the proper JARs are installed. For more information on how to use this co-processor, refer to (&lt;a href=&#34;https://github.com/ucb-bar/chipyard&#34;&gt;https://github.com/ucb-bar/chipyard&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>allenai/deep_qa_experiments</title>
    <updated>2022-06-02T02:23:20Z</updated>
    <id>tag:github.com,2022-06-02:/allenai/deep_qa_experiments</id>
    <link href="https://github.com/allenai/deep_qa_experiments" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scala framework for running experiments with allenai/deep_qa&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://semaphoreci.com/allenai/deep_qa_experiments&#34;&gt;&lt;img src=&#34;https://semaphoreci.com/api/v1/allenai/deep_qa_experiments/branches/master/shields_badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Deep QA Experiments&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains scala code for setting up and running experiments with &lt;a href=&#34;https://github.com/allenai/deep_qa&#34;&gt;DeepQA&lt;/a&gt;. The main point here is to have reasonable pipeline management for setting up data and running comparison experiments between several models on some dataset.&lt;/p&gt; &#xA;&lt;h1&gt;Usage Guide&lt;/h1&gt; &#xA;&lt;p&gt;To use this code, you set up an experiment in scala, then run it using &lt;code&gt;sbt&lt;/code&gt;. Some documentation on how to do this is found in the &lt;a href=&#34;https://raw.githubusercontent.com/allenai/deep_qa_experiments/master/src/main/scala/org/allenai/deep_qa/experiments/&#34;&gt;README for the &lt;code&gt;org.allenai.deep_qa.experiments&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you use this code and think something could be improved, pull requests are very welcome. Opening an issue is ok, too, but we&#39;re a lot more likely to respond to a PR. The primary maintainer of this code is &lt;a href=&#34;https://matt-gardner.github.io/&#34;&gt;Matt Gardner&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This code is released under the terms of the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;GNU General Public License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>