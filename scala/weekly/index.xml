<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:59:54Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chipsalliance/chisel</title>
    <updated>2023-03-05T01:59:54Z</updated>
    <id>tag:github.com,2023-03-05:/chipsalliance/chisel</id>
    <link href="https://github.com/chipsalliance/chisel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chisel: A Modern Hardware Design Language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/docs/src/images/chisel_logo.svg?sanitize=true&#34; alt=&#34;Chisel 3&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;CCC 2022&lt;/h3&gt; &#xA;&lt;p&gt;CCC(Chisel Community Conference) is an annual gathering of Chisel community enthusiasts and technical exchange workshop. With the support of the Chisel development community and RISC-V International, this conference will bring together designers and developers with hands-on experience in Chisel from home and abroad to share cutting-edge results and experiences from both the open source community as well as industry.&lt;/p&gt; &#xA;&lt;p&gt;The recording of CCC 2022 has been uploaded:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8FGnu0Tq3Qk&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=1&#34;&gt;Constellation, a Open-source Chisel NoC Generator for SoCs - Jerry Zhao@UCB BAR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-BUcTwE_URg&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=2&#34;&gt;The formal verification capabilities of chiseltest - Kevin Laeufer@UCB BAR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4vgSrW7Cdkk&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=3&#34;&gt;Chisel Breakdown 03 - Jack Koenig@SiFive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=V3h30s31qfk&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=4&#34;&gt;The Next Generation FIRRTL Compiler is Here! - Prithayan Barua&amp;amp;Hideto Ueno@SiFive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hXaZMQPRXo0&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=5&#34;&gt;Implementing RISC-V Scalar Cryptography/Bitmanip extensions in Chisel - Hongren Zheng@Tsinghua University+PLCT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fPl4eZHh1-M&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=6&#34;&gt;SCIRT: Bridging the Type System Gap for Circuit Generators - Ruikang Wang@Tsinghua University+PLCT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Df1l9h351BM&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=7&#34;&gt;ChiselDB: Mapping Hardware Data Structures to Database Tables for Efficient Data Analysis Jiawei Lin@ICT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FenSOWKBbAw&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=8&#34;&gt;From Chisel to Chips in Fully Open-Source - Martin Schoeberl@DTU&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See you next year :)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Constructing Hardware in a Scala Embedded Language&lt;/strong&gt; (&lt;a href=&#34;https://www.chisel-lang.org&#34;&gt;&lt;strong&gt;Chisel&lt;/strong&gt;&lt;/a&gt;) is an open-source hardware description language (HDL) used to describe digital electronics and circuits at the register-transfer level that facilitates &lt;strong&gt;advanced circuit generation and design reuse for both ASIC and FPGA digital logic designs&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Chisel adds hardware construction primitives to the &lt;a href=&#34;https://www.scala-lang.org&#34;&gt;Scala&lt;/a&gt; programming language, providing designers with the power of a modern programming language to write complex, parameterizable circuit generators that produce synthesizable Verilog. This generator methodology enables the creation of re-usable components and libraries, such as the FIFO queue and arbiters in the &lt;a href=&#34;https://www.chisel-lang.org/api/latest/#chisel3.util.package&#34;&gt;Chisel Standard Library&lt;/a&gt;, raising the level of abstraction in design while retaining fine-grained control.&lt;/p&gt; &#xA;&lt;p&gt;For more information on the benefits of Chisel see: &lt;a href=&#34;https://stackoverflow.com/questions/53007782/what-benefits-does-chisel-offer-over-classic-hardware-description-languages&#34;&gt;&#34;What benefits does Chisel offer over classic Hardware Description Languages?&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chisel is powered by &lt;a href=&#34;https://github.com/chipsalliance/firrtl&#34;&gt;FIRRTL (Flexible Intermediate Representation for RTL)&lt;/a&gt;, a hardware compiler framework that performs optimizations of Chisel-generated circuits and supports custom user-defined circuit transformations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#what-does-chisel-code-look-like&#34;&gt;What does Chisel code look like?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#led-blink&#34;&gt;LED blink&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#fir-filter&#34;&gt;FIR Filter&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#bootcamp-interactive-tutorial&#34;&gt;Bootcamp Interactive Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#a-textbook-on-chisel&#34;&gt;A Textbook on Chisel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#build-your-own-chisel-projects&#34;&gt;Build Your Own Chisel Projects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#guide-for-new-contributors&#34;&gt;Guide For New Contributors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#design-verification&#34;&gt;Design Verification&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#useful-resources&#34;&gt;Useful Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#chisel-dev-meeting&#34;&gt;Chisel Dev Meeting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#data-types-overview&#34;&gt;Data Types Overview&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#contributor-documentation&#34;&gt;Contributor Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#useful-resources-for-contributors&#34;&gt;Useful Resources for Contributors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#compiling-and-testing-chisel&#34;&gt;Compiling and Testing Chisel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#running-projects-against-local-chisel&#34;&gt;Running Projects Against Local Chisel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#building-chisel-with-firrtl-in-the-same-sbt-project&#34;&gt;Building Chisel with FIRRTL in the same SBT Project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#chisel3-architecture-overview&#34;&gt;Chisel3 Architecture Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#chisel-sub-projects&#34;&gt;Chisel Sub-Projects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#which-version-should-i-use&#34;&gt;Which version should I use?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#roadmap&#34;&gt;Chisel Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/freechipsproject/chisel3?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/chipsalliance/chisel3.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/freechipsproject/chisel3&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/chipsalliance/chisel3/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://github.com/chipsalliance/chisel3/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/chipsalliance/chisel3.svg?include_prereleases&amp;amp;sort=semver&#34; alt=&#34;GitHub tag (latest SemVer)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://index.scala-lang.org/chipsalliance/chisel3/chisel3&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/chipsalliance/chisel3/chisel3/latest-by-scala-version.svg?color=blue&#34; alt=&#34;Scala version support&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/edu/berkeley/cs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/edu.berkeley.cs/chisel3_2.13?server=https%3A%2F%2Foss.sonatype.org&#34; alt=&#34;Sonatype Snapshots&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/edu.berkeley.cs/chisel3_2.13/latest&#34;&gt;&lt;img src=&#34;https://www.javadoc.io/badge/edu.berkeley.cs/chisel3_2.13.svg?color=blue&amp;amp;label=Scaladoc&#34; alt=&#34;Scaladoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What does Chisel code look like?&lt;/h2&gt; &#xA;&lt;h3&gt;LED blink&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import chisel3._&#xA;import chisel3.util._&#xA;&#xA;class Blinky(freq: Int, startOn: Boolean = false) extends Module {&#xA;  val io = IO(new Bundle {&#xA;    val led0 = Output(Bool())&#xA;  })&#xA;  // Blink LED every second using Chisel built-in util.Counter&#xA;  val led = RegInit(startOn.B)&#xA;  val (_, counterWrap) = Counter(true.B, freq / 2)&#xA;  when(counterWrap) {&#xA;    led := ~led&#xA;  }&#xA;  io.led0 := led&#xA;}&#xA;object Main extends App {&#xA;  // These lines generate the Verilog output&#xA;  println(&#xA;    new (chisel3.stage.ChiselStage).emitVerilog(&#xA;      new Blinky(1000),&#xA;      Array(&#xA;        &#34;--emission-options=disableMemRandomization,disableRegisterRandomization&#34;&#xA;      )&#xA;    )&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Should output the following Verilog:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand!&lt;/summary&gt; &#xA; &lt;pre class=&#34;hljs&#34;&gt;&lt;code&gt;&#xA;   &lt;div&gt;&#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;module&lt;/span&gt; Blinky( &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;input&lt;/span&gt; clock, &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;input&lt;/span&gt; reset, &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;output&lt;/span&gt; io_led0 ); &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;reg&lt;/span&gt; led; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[main.scala 11:20]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;reg&lt;/span&gt; [&#xA;    &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;:&#xA;    &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] counterWrap_value; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 62:40]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;wire&lt;/span&gt; counterWrap_wrap_wrap = counterWrap_value == &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;9&#39;h1f3&lt;/span&gt;; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 74:24]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;wire&lt;/span&gt; [&#xA;    &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;:&#xA;    &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;_&lt;/span&gt;counterWrap_wrap_value_T_1 = counterWrap_value + &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;9&#39;h1&lt;/span&gt;; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 78:24]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;assign&lt;/span&gt; io_led0 = led; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[main.scala 16:11]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;always&lt;/span&gt; @(&#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;posedge&lt;/span&gt; clock) &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (reset) &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[main.scala 11:20]&lt;/span&gt; led &amp;lt;= &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;1&#39;h0&lt;/span&gt;; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[main.scala 11:20]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (counterWrap_wrap_wrap) &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[main.scala 13:21]&lt;/span&gt; led &amp;lt;= ~led; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[main.scala 14:9]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (reset) &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 62:40]&lt;/span&gt; counterWrap_value &amp;lt;= &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;9&#39;h0&lt;/span&gt;; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 62:40]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (counterWrap_wrap_wrap) &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 88:20]&lt;/span&gt; counterWrap_value &amp;lt;= &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;9&#39;h0&lt;/span&gt;; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 88:28]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt; counterWrap_value &amp;lt;= &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;_&lt;/span&gt;counterWrap_wrap_value_T_1; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 78:15]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;endmodule&lt;/span&gt; &#xA;   &lt;/div&gt;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;FIR Filter&lt;/h3&gt; &#xA;&lt;p&gt;Consider an FIR filter that implements a convolution operation, as depicted in this block diagram:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/docs/src/images/fir_filter.svg?sanitize=true&#34; width=&#34;512&#34;&gt; &#xA;&lt;p&gt;While Chisel provides similar base primitives as synthesizable Verilog, and &lt;em&gt;could&lt;/em&gt; be used as such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// 3-point moving sum implemented in the style of a FIR filter&#xA;class MovingSum3(bitWidth: Int) extends Module {&#xA;  val io = IO(new Bundle {&#xA;    val in = Input(UInt(bitWidth.W))&#xA;    val out = Output(UInt(bitWidth.W))&#xA;  })&#xA;&#xA;  val z1 = RegNext(io.in)&#xA;  val z2 = RegNext(z1)&#xA;&#xA;  io.out := (io.in * 1.U) + (z1 * 1.U) + (z2 * 1.U)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the power of Chisel comes from the ability to create generators, such as an FIR filter that is defined by the list of coefficients:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Generalized FIR filter parameterized by the convolution coefficients&#xA;class FirFilter(bitWidth: Int, coeffs: Seq[UInt]) extends Module {&#xA;  val io = IO(new Bundle {&#xA;    val in = Input(UInt(bitWidth.W))&#xA;    val out = Output(UInt(bitWidth.W))&#xA;  })&#xA;  // Create the serial-in, parallel-out shift register&#xA;  val zs = Reg(Vec(coeffs.length, UInt(bitWidth.W)))&#xA;  zs(0) := io.in&#xA;  for (i &amp;lt;- 1 until coeffs.length) {&#xA;    zs(i) := zs(i-1)&#xA;  }&#xA;&#xA;  // Do the multiplies&#xA;  val products = VecInit.tabulate(coeffs.length)(i =&amp;gt; zs(i) * coeffs(i))&#xA;&#xA;  // Sum up the products&#xA;  io.out := products.reduce(_ + _)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use and re-use them across designs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val movingSum3Filter = Module(new FirFilter(8, Seq(1.U, 1.U, 1.U)))  // same 3-point moving sum filter as before&#xA;val delayFilter = Module(new FirFilter(8, Seq(0.U, 1.U)))  // 1-cycle delay as a FIR filter&#xA;val triangleFilter = Module(new FirFilter(8, Seq(1.U, 2.U, 3.U, 2.U, 1.U)))  // 5-point FIR filter with a triangle impulse response&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above can be converted to Verilog using &lt;code&gt;ChiselStage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import chisel3.stage.{ChiselStage, ChiselGeneratorAnnotation}&#xA;&#xA;(new chisel3.stage.ChiselStage).execute(&#xA;  Array(&#34;-X&#34;, &#34;verilog&#34;),&#xA;  Seq(ChiselGeneratorAnnotation(() =&amp;gt; new FirFilter(8, Seq(1.U, 1.U, 1.U)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you may generate some Verilog directly for inspection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val verilogString = chisel3.emitVerilog(new FirFilter(8, Seq(0.U, 1.U)))&#xA;println(verilogString)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Bootcamp Interactive Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://mybinder.org/v2/gh/freechipsproject/chisel-bootcamp/master&#34;&gt;&lt;strong&gt;online Chisel Bootcamp&lt;/strong&gt;&lt;/a&gt; is the recommended way to get started with and learn Chisel. &lt;strong&gt;No setup is required&lt;/strong&gt; (it runs in the browser), nor does it assume any prior knowledge of Scala.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/ucb-bar/chisel-tutorial&#34;&gt;&lt;strong&gt;classic Chisel tutorial&lt;/strong&gt;&lt;/a&gt; contains small exercises and runs on your computer.&lt;/p&gt; &#xA;&lt;h3&gt;A Textbook on Chisel&lt;/h3&gt; &#xA;&lt;p&gt;If you like a textbook to learn Chisel and also a bit of digital design in general, you may be interested in reading &lt;a href=&#34;http://www.imm.dtu.dk/~masca/chisel-book.html&#34;&gt;&lt;strong&gt;Digital Design with Chisel&lt;/strong&gt;&lt;/a&gt;. It is available in English, Chinese, Japanese, and Vietnamese.&lt;/p&gt; &#xA;&lt;h3&gt;Build Your Own Chisel Projects&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/SETUP.md&#34;&gt;the setup instructions&lt;/a&gt; for how to set up your environment to build Chisel locally.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;re ready to build your own circuits in Chisel, &lt;strong&gt;we recommend starting from the &lt;a href=&#34;https://github.com/freechipsproject/chisel-template&#34;&gt;Chisel Template&lt;/a&gt; repository&lt;/strong&gt;, which provides a pre-configured project, example design, and testbench. Follow the &lt;a href=&#34;https://github.com/freechipsproject/chisel-template&#34;&gt;chisel-template README&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;If you insist on setting up your own project from scratch, your project needs to depend on both the chisel3-plugin (Scalac plugin) and the chisel3 library. For example, in SBT this could be expressed as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// build.sbt&#xA;scalaVersion := &#34;2.13.8&#34;&#xA;addCompilerPlugin(&#34;edu.berkeley.cs&#34; % &#34;chisel3-plugin&#34; % &#34;3.5.4&#34; cross CrossVersion.full)&#xA;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;chisel3&#34; % &#34;3.5.4&#34;&#xA;// We also recommend using chiseltest for writing unit tests&#xA;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;chiseltest&#34; % &#34;0.5.4&#34; % &#34;test&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Guide For New Contributors&lt;/h3&gt; &#xA;&lt;p&gt;If you are trying to make a contribution to this project, please read &lt;a href=&#34;https://github.com/chipsalliance/chisel3/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Design Verification&lt;/h3&gt; &#xA;&lt;p&gt;These simulation-based verification tools are available for Chisel:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ucb-bar/chiseltest&#34;&gt;&lt;strong&gt;chiseltest&lt;/strong&gt;&lt;/a&gt; is the batteries-included testing and formal verification library for Chisel-based RTL designs and a replacement for the former PeekPokeTester, providing the same base constructs but with a streamlined interface and concurrency support with &lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; with internal and Verilator integration for simulations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Useful Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/chisel-cheatsheet/releases/latest/download/chisel_cheatsheet.pdf&#34;&gt;&lt;strong&gt;Cheat Sheet&lt;/strong&gt;&lt;/a&gt;, a 2-page reference of the base Chisel syntax and libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.chisel-lang.org/api/latest/chisel3/index.html&#34;&gt;&lt;strong&gt;ScalaDoc&lt;/strong&gt;&lt;/a&gt;, a listing, description, and examples of the functionality exposed by Chisel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/freechipsproject/chisel3&#34;&gt;&lt;strong&gt;Gitter&lt;/strong&gt;&lt;/a&gt;, where you can ask questions or discuss anything Chisel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.chisel-lang.org&#34;&gt;&lt;strong&gt;Website (3.6 and earlier)&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/freechipsproject/www.chisel-lang.org/&#34;&gt;source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chipsalliance.github.io/chisel3&#34;&gt;&lt;strong&gt;Website (master)&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/website&#34;&gt;source&lt;/a&gt;) (Note that this will replace the above after the 3.6 release)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scastie.scala-lang.org/O3LqeVH7SWyIxD7bZRH8hA&#34;&gt;&lt;strong&gt;Scastie (3.5.3)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.asic-world.com/verilog/veritut.html&#34;&gt;&lt;strong&gt;asic-world&lt;/strong&gt;&lt;/a&gt; If you aren&#39;t familiar with verilog, this is a good tutorial.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are migrating from Chisel2, see &lt;a href=&#34;https://www.chisel-lang.org/chisel3/chisel3-vs-chisel2.html&#34;&gt;the migration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Chisel Dev Meeting&lt;/h3&gt; &#xA;&lt;p&gt;Chisel/FIRRTL development meetings happen every Monday from 1100--1200 PT.&lt;/p&gt; &#xA;&lt;p&gt;Call-in info and meeting notes are available &lt;a href=&#34;https://docs.google.com/document/d/1BLP2DYt59DqI-FgFCcjw8Ddl4K-WU0nHmQu0sZ_wAGo/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Data Types Overview&lt;/h3&gt; &#xA;&lt;p&gt;These are the base data types for defining circuit components:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/docs/src/images/type_hierarchy.svg?sanitize=true&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributor Documentation&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to get started contributing to Chisel itself, including how to test your version locally against other projects that pull in Chisel using &lt;a href=&#34;https://www.scala-sbt.org/1.x/docs/Library-Dependencies.html&#34;&gt;sbt&#39;s managed dependencies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Useful Resources for Contributors&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/#useful-resources&#34;&gt;Useful Resources&lt;/a&gt; for users are also helpful for contributors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/114YihixFBPCfUnv1inqAL8UjsiWfcNWdPHX7SeqlRQc&#34;&gt;&lt;strong&gt;Chisel Breakdown Slides&lt;/strong&gt;&lt;/a&gt;, an introductory talk about Chisel&#39;s internals&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compiling and Testing Chisel&lt;/h3&gt; &#xA;&lt;p&gt;You must first install required dependencies to build Chisel locally, please see &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/SETUP.md&#34;&gt;the setup instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Clone and build the Chisel library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/chipsalliance/chisel3.git&#xA;cd chisel3&#xA;sbt compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run the following unit tests, you will need several tools on your &lt;code&gt;PATH&lt;/code&gt;, namely &lt;a href=&#34;https://www.veripool.org/verilator/&#34;&gt;verilator&lt;/a&gt;, &lt;a href=&#34;https://yosyshq.net/yosys/&#34;&gt;yosys&lt;/a&gt;, &lt;a href=&#34;https://github.com/chipsalliance/espresso&#34;&gt;espresso&lt;/a&gt;, and &lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;z3&lt;/a&gt;. Check that each is installed on your &lt;code&gt;PATH&lt;/code&gt; by running &lt;code&gt;which verilator&lt;/code&gt; and so on.&lt;/p&gt; &#xA;&lt;p&gt;If the compilation succeeded and the dependencies noted above are installed, you can then run the included unit tests by invoking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Projects Against Local Chisel&lt;/h3&gt; &#xA;&lt;p&gt;To use the development version of Chisel (&lt;code&gt;master&lt;/code&gt; branch), you will need to build from source and &lt;code&gt;publishLocal&lt;/code&gt;. The repository version can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/build.sbt&#34;&gt;build.sbt&lt;/a&gt; file. As of the time of writing it was:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;version := &#34;3.6-SNAPSHOT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To publish your version of Chisel to the local Ivy (sbt&#39;s dependency manager) repository, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt publishLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compiled version gets placed in &lt;code&gt;~/.ivy2/local/edu.berkeley.cs/&lt;/code&gt;. If you need to un-publish your local copy of Chisel, remove the directory generated in &lt;code&gt;~/.ivy2/local/edu.berkeley.cs/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to have your projects use this version of Chisel, you should update the &lt;code&gt;libraryDependencies&lt;/code&gt; setting in your project&#39;s build.sbt file to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;chisel3&#34; % &#34;3.6-SNAPSHOT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building Chisel with FIRRTL in the same SBT Project&lt;/h3&gt; &#xA;&lt;p&gt;While we recommend using the library dependency approach as described above, it is possible to build Chisel and FIRRTL in a single SBT project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caveats&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do not &lt;code&gt;publishLocal&lt;/code&gt; when building this way. The published artifact will be missing the FIRRTL dependency.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This works by using &lt;a href=&#34;http://eed3si9n.com/hot-source-dependencies-using-sbt-sriracha&#34;&gt;sbt-sriracha&lt;/a&gt;, an SBT plugin for toggling between source and library dependencies. It provides two JVM system properties that, when set, will tell SBT to include FIRRTL as a source project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt.sourcemode&lt;/code&gt; - when set to true, SBT will look for FIRRTL in the workspace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt.workspace&lt;/code&gt; - sets the root directory of the workspace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# From root of this repo&#xA;git clone git@github.com:chipsalliance/firrtl.git&#xA;sbt -Dsbt.sourcemode=true -Dsbt.workspace=$PWD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is primarily useful for building projects that themselves want to include Chisel as a source dependency. As an example, see &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip&#34;&gt;Rocket Chip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Chisel3 Architecture Overview&lt;/h3&gt; &#xA;&lt;p&gt;The Chisel3 compiler consists of these main parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The frontend&lt;/strong&gt;, &lt;code&gt;chisel3.*&lt;/code&gt;, which is the publicly visible &#34;API&#34; of Chisel and what is used in Chisel RTL. These just add data to the...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Builder&lt;/strong&gt;, &lt;code&gt;chisel3.internal.Builder&lt;/code&gt;, which maintains global state (like the currently open Module) and contains commands, generating...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The intermediate data structures&lt;/strong&gt;, &lt;code&gt;chisel3.firrtl.*&lt;/code&gt;, which are syntactically very similar to Firrtl. Once the entire circuit has been elaborated, the top-level object (a &lt;code&gt;Circuit&lt;/code&gt;) is then passed to...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Firrtl emitter&lt;/strong&gt;, &lt;code&gt;chisel3.firrtl.Emitter&lt;/code&gt;, which turns the intermediate data structures into a string that can be written out into a Firrtl file for further processing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also included is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The standard library&lt;/strong&gt; of circuit generators, &lt;code&gt;chisel3.util.*&lt;/code&gt;. These contain commonly used interfaces and constructors (like &lt;code&gt;Decoupled&lt;/code&gt;, which wraps a signal with a ready-valid pair) as well as fully parameterizable circuit generators (like arbiters and multiplexors).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chisel Stage&lt;/strong&gt;, &lt;code&gt;chisel3.stage.*&lt;/code&gt;, which contains compilation and test functions that are invoked in the standard Verilog generation and simulation testing infrastructure. These can also be used as part of custom flows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chisel Sub-Projects&lt;/h3&gt; &#xA;&lt;p&gt;Chisel consists of 4 Scala projects; each is its own separate compilation unit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/core&#34;&gt;&lt;code&gt;core&lt;/code&gt;&lt;/a&gt; is the bulk of the source code of Chisel, depends on &lt;code&gt;macros&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/src/main&#34;&gt;&lt;code&gt;src/main&lt;/code&gt;&lt;/a&gt; is the &#34;main&#34; that brings it all together and includes a &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/src/main/scala/chisel3/util&#34;&gt;&lt;code&gt;util&lt;/code&gt;&lt;/a&gt; library, which depends on &lt;code&gt;core&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/plugin&#34;&gt;&lt;code&gt;plugin&lt;/code&gt;&lt;/a&gt; is the compiler plugin, no internal dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel/main/macros&#34;&gt;&lt;code&gt;macros&lt;/code&gt;&lt;/a&gt; is most of the macros used in Chisel, no internal dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code that touches lots of APIs that are private to the &lt;code&gt;chisel3&lt;/code&gt; package should belong in &lt;code&gt;core&lt;/code&gt;, while code that is pure Chisel should belong in &lt;code&gt;src/main&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Which version should I use?&lt;/h3&gt; &#xA;&lt;p&gt;We encourage Chisel users (as opposed to Chisel developers), to use the latest release version of Chisel. This &lt;a href=&#34;https://github.com/freechipsproject/chisel-template&#34;&gt;chisel-template&lt;/a&gt; repository is kept up-to-date, depending on the most recent version of Chisel. The recommended version is also captured near the top of this README, and in the &lt;a href=&#34;https://github.com/chipsalliance/chisel3/releases&#34;&gt;Github releases&lt;/a&gt; section of this repo. If you encounter an issue with a released version of Chisel, please file an issue on GitHub mentioning the Chisel version and provide a simple test case (if possible). Try to reproduce the issue with the associated latest minor release (to verify that the issue hasn&#39;t been addressed).&lt;/p&gt; &#xA;&lt;p&gt;For more information on our versioning policy and what versions of the various Chisel ecosystem projects work together, see &lt;a href=&#34;https://www.chisel-lang.org/chisel3/docs/appendix/versioning.html&#34;&gt;Chisel Project Versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re developing a Chisel library (or &lt;code&gt;chisel3&lt;/code&gt; itself), you&#39;ll probably want to work closer to the tip of the development trunk. By default, the master branches of the chisel repositories are configured to build and publish their version of the code as &lt;code&gt;Z.Y-SNAPSHOT&lt;/code&gt;. Updated SNAPSHOTs are publised on every push to master. You are encouraged to do your development against the latest SNAPSHOT, but note that neither API nor ABI compatibility is guaranteed so your code may break at any time.&lt;/p&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;p&gt;See (Roadmap)[https://github.com/chipsalliance/chisel3/blob/master/README.md].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>arainko/ducktape</title>
    <updated>2023-03-05T01:59:54Z</updated>
    <id>tag:github.com,2023-03-05:/arainko/ducktape</id>
    <link href="https://github.com/arainko/ducktape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatic and customizable compile time transformations between similar case classes and sealed traits/enums, essentially a thing that glues your code. Scala 3 only. Or is it duct 🤔&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ducktape&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/io.github.arainko/ducktape_3&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/io.github.arainko/ducktape_3/badge.svg?style=flat-square&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;ducktape&lt;/em&gt; is a library for boilerplate-less and configurable transformations between case classes and enums/sealed traits for Scala 3. Directly inspired by &lt;a href=&#34;https://github.com/scalalandio/chimney&#34;&gt;chimney&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If this project interests you, please drop a 🌟 - these things are worthless but give me a dopamine rush nonetheless.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;io.github.arainko&#34; %% &#34;ducktape&#34; % &#34;0.1.3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: the &lt;a href=&#34;https://www.scala-lang.org/blog/2021/02/16/preventing-version-conflicts-with-versionscheme.html&#34;&gt;version scheme&lt;/a&gt; is set to &lt;code&gt;early-semver&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;1. &lt;em&gt;Case class to case class&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import io.github.arainko.ducktape.*&#xA;&#xA;final case class Person(firstName: String, lastName: String, age: Int)&#xA;final case class PersonButMoreFields(firstName: String, lastName: String, age: Int, socialSecurityNo: String)&#xA;&#xA;val personWithMoreFields = PersonButMoreFields(&#34;John&#34;, &#34;Doe&#34;, 30, &#34;SOCIAL-NUM-12345&#34;)&#xA;// personWithMoreFields: PersonButMoreFields = PersonButMoreFields(&#xA;//   firstName = &#34;John&#34;,&#xA;//   lastName = &#34;Doe&#34;,&#xA;//   age = 30,&#xA;//   socialSecurityNo = &#34;SOCIAL-NUM-12345&#34;&#xA;// )&#xA;&#xA;val transformed = personWithMoreFields.to[Person]&#xA;// transformed: Person = Person(firstName = &#34;John&#34;, lastName = &#34;Doe&#34;, age = 30)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Automatic case class to case class transformations are supported given that the source type has all the fields of the destination type and the types corresponding to these fields have an instance of &lt;code&gt;Transformer&lt;/code&gt; in scope.&lt;/p&gt; &#xA;&lt;p&gt;If these requirements are not met, a compiletime error is issued:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val person = Person(&#34;Jerry&#34;, &#34;Smith&#34;, 20)&#xA;&#xA;person.to[PersonButMoreFields]&#xA;&#xA;// error:&#xA;// No field named &#39;socialSecurityNo&#39; found in Person&#xA;//     .into[Person2]&#xA;//                   ^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. &lt;em&gt;Enum to enum&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import io.github.arainko.ducktape.*&#xA;&#xA;enum Size:&#xA;  case Small, Medium, Large&#xA;&#xA;enum ExtraSize:&#xA;  case ExtraSmall, Small, Medium, Large, ExtraLarge&#xA;&#xA;val transformed = Size.Small.to[ExtraSize]&#xA;// transformed: ExtraSize = Small&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can&#39;t go to a coproduct that doesn&#39;t contain all of our cases (name wise):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val size = ExtraSize.Small.to[Size]&#xA;// error:&#xA;// No child named &#39;ExtraSmall&#39; in Size&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Automatic enum to enum transformations are supported given that the destination enum contains a subset of cases we want to transform into, otherwise a compiletime errors is issued.&lt;/p&gt; &#xA;&lt;h4&gt;3. &lt;em&gt;Case class to case class with config&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;p&gt;As we established earlier, going from &lt;code&gt;Person&lt;/code&gt; to &lt;code&gt;PersonButMoreFields&lt;/code&gt; cannot happen automatically as the former doesn&#39;t have the &lt;code&gt;socialSecurityNo&lt;/code&gt; field, but it has all the other fields - so it&#39;s almost there, we just have to nudge it a lil&#39; bit.&lt;/p&gt; &#xA;&lt;p&gt;We can do so with field configurations in 3 ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set a constant to a specific field with &lt;code&gt;Field.const&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compute the value for a specific field by applying a function with &lt;code&gt;Field.computed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use a different field in its place - &#39;rename&#39; it with &lt;code&gt;Field.renamed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Grab all matching fields from another case class with &lt;code&gt;Field.allMatching&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import io.github.arainko.ducktape.*&#xA;&#xA;final case class Person(firstName: String, lastName: String, age: Int)&#xA;final case class PersonButMoreFields(firstName: String, lastName: String, age: Int, socialSecurityNo: String)&#xA;&#xA;val person = Person(&#34;Jerry&#34;, &#34;Smith&#34;, 20)&#xA;// person: Person = Person(firstName = &#34;Jerry&#34;, lastName = &#34;Smith&#34;, age = 20)&#xA;&#xA;// 1. Set a constant to a specific field&#xA;val withConstant = &#xA;  person&#xA;    .into[PersonButMoreFields]&#xA;    .transform(Field.const(_.socialSecurityNo, &#34;CONSTANT-SSN&#34;))&#xA;// withConstant: PersonButMoreFields = PersonButMoreFields(&#xA;//   firstName = &#34;Jerry&#34;,&#xA;//   lastName = &#34;Smith&#34;,&#xA;//   age = 20,&#xA;//   socialSecurityNo = &#34;CONSTANT-SSN&#34;&#xA;// )&#xA;&#xA;// 2. Compute the value for a specific field by applying a function&#xA;val withComputed = &#xA;  person&#xA;    .into[PersonButMoreFields]&#xA;    .transform(Field.computed(_.socialSecurityNo, p =&amp;gt; s&#34;${p.firstName}-COMPUTED-SSN&#34;))&#xA;// withComputed: PersonButMoreFields = PersonButMoreFields(&#xA;//   firstName = &#34;Jerry&#34;,&#xA;//   lastName = &#34;Smith&#34;,&#xA;//   age = 20,&#xA;//   socialSecurityNo = &#34;Jerry-COMPUTED-SSN&#34;&#xA;// )&#xA;&#xA;// 3. Use a different field in its place - &#39;rename&#39; it&#xA;val withRename = &#xA;  person&#xA;    .into[PersonButMoreFields]&#xA;    .transform(Field.renamed(_.socialSecurityNo, _.firstName))&#xA;// withRename: PersonButMoreFields = PersonButMoreFields(&#xA;//   firstName = &#34;Jerry&#34;,&#xA;//   lastName = &#34;Smith&#34;,&#xA;//   age = 20,&#xA;//   socialSecurityNo = &#34;Jerry&#34;&#xA;// )&#xA;&#xA;final case class FieldSource(lastName: String, socialSecurityNo: String)&#xA;&#xA;// 4. Grab and use all matching fields from a different case class (a compiletime error will be issued if none of the fields match)&#xA;val withAllMatchingFields = &#xA;  person&#xA;    .into[PersonButMoreFields]&#xA;    .transform(Field.allMatching(FieldSource(&#34;SourcedLastName&#34;, &#34;SOURCED-SSN&#34;)))&#xA;// withAllMatchingFields: PersonButMoreFields = PersonButMoreFields(&#xA;//   firstName = &#34;Jerry&#34;,&#xA;//   lastName = &#34;SourcedLastName&#34;,&#xA;//   age = 20,&#xA;//   socialSecurityNo = &#34;SOURCED-SSN&#34;&#xA;// )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case we repeatedly apply configurations to the same field, the latest one is chosen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val withRepeatedConfig =&#xA;  person&#xA;    .into[PersonButMoreFields]&#xA;    .transform(&#xA;      Field.renamed(_.socialSecurityNo, _.firstName),&#xA;      Field.computed(_.socialSecurityNo, p =&amp;gt; s&#34;${p.firstName}-COMPUTED-SSN&#34;),&#xA;      Field.allMatching(FieldSource(&#34;SourcedLastName&#34;, &#34;SOURCED-SSN&#34;)),&#xA;      Field.const(_.socialSecurityNo, &#34;CONSTANT-SSN&#34;)&#xA;    )&#xA;// withRepeatedConfig: PersonButMoreFields = PersonButMoreFields(&#xA;//   firstName = &#34;Jerry&#34;,&#xA;//   lastName = &#34;SourcedLastName&#34;,&#xA;//   age = 20,&#xA;//   socialSecurityNo = &#34;CONSTANT-SSN&#34;&#xA;// )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course we can use this to override the automatic derivation for each field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val withEverythingOverriden = &#xA;  person&#xA;    .into[PersonButMoreFields]&#xA;    .transform(&#xA;      Field.const(_.socialSecurityNo, &#34;CONSTANT-SSN&#34;),&#xA;      Field.const(_.age, 100),&#xA;      Field.const(_.firstName, &#34;OVERRIDEN-FIRST-NAME&#34;),&#xA;      Field.const(_.lastName, &#34;OVERRIDEN-LAST-NAME&#34;),&#xA;    )&#xA;// withEverythingOverriden: PersonButMoreFields = PersonButMoreFields(&#xA;//   firstName = &#34;OVERRIDEN-FIRST-NAME&#34;,&#xA;//   lastName = &#34;OVERRIDEN-LAST-NAME&#34;,&#xA;//   age = 100,&#xA;//   socialSecurityNo = &#34;CONSTANT-SSN&#34;&#xA;// )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Enum to enum with config&lt;/h4&gt; &#xA;&lt;p&gt;Enum transformations, just like case class transformations, can be configured by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;supplying a constant value with &lt;code&gt;Case.const&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;supplying a function that will be applied to the chosen subtype with &lt;code&gt;Case.computed&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import io.github.arainko.ducktape.*&#xA;&#xA;enum Size:&#xA;  case Small, Medium, Large&#xA;&#xA;enum ExtraSize:&#xA;  case ExtraSmall, Small, Medium, Large, ExtraLarge&#xA;&#xA;// Specify a constant for the cases that are not covered automatically&#xA;val withConstants = &#xA;  ExtraSize.ExtraSmall&#xA;    .into[Size]&#xA;    .transform(&#xA;      Case.const[ExtraSize.ExtraSmall.type](Size.Small),&#xA;      Case.const[ExtraSize.ExtraLarge.type](Size.Large)&#xA;    )&#xA;// withConstants: Size = Small&#xA;&#xA;// Specify a function to transform a given case with that function&#xA;val withComputed =&#xA;  ExtraSize.ExtraSmall&#xA;    .into[Size]&#xA;    .transform(&#xA;      Case.computed[ExtraSize.ExtraSmall.type](_ =&amp;gt; Size.Small),&#xA;      Case.computed[ExtraSize.ExtraLarge.type](_ =&amp;gt; Size.Large)&#xA;    )&#xA;// withComputed: Size = Small&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. Method to case class&lt;/h4&gt; &#xA;&lt;p&gt;We can also let &lt;code&gt;ducktape&lt;/code&gt; expand method incovations for us:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import io.github.arainko.ducktape.*&#xA;&#xA;final case class Person1(firstName: String, lastName: String, age: Int)&#xA;final case class Person2(firstName: String, lastName: String, age: Int)&#xA;&#xA;def methodToExpand(lastName: String, age: Int, firstName: String): Person2 =&#xA;  Person2(firstName, lastName, age)&#xA;&#xA;val person1: Person1 = Person1(&#34;John&#34;, &#34;Doe&#34;, 23)&#xA;// person1: Person1 = Person1(firstName = &#34;John&#34;, lastName = &#34;Doe&#34;, age = 23)&#xA;val person2: Person2 = person1.via(methodToExpand)&#xA;// person2: Person2 = Person2(firstName = &#34;John&#34;, lastName = &#34;Doe&#34;, age = 23)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, &lt;code&gt;ducktape&lt;/code&gt; will match the fields from &lt;code&gt;Person&lt;/code&gt; to parameter names of &lt;code&gt;methodToExpand&lt;/code&gt; failing at compiletime if a parameter cannot be matched (be it there&#39;s no name correspondence or a &lt;code&gt;Transformer&lt;/code&gt; between types of two fields with the same name isn&#39;t available):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def methodToExpandButOneMoreArg(lastName: String, age: Int, firstName: String, additionalArg: String): Person2 =&#xA;  Person2(firstName + additionalArg, lastName, age)&#xA;&#xA;person1.via(methodToExpandButOneMoreArg)&#xA;// error:&#xA;// No field named &#39;additionalArg&#39; in Person&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;6. Method to case class with config&lt;/h4&gt; &#xA;&lt;p&gt;Just like transforming between case classes and coproducts we can nudge the derivation in some places to complete the puzzle, let&#39;s tackle the last example once again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def methodToExpandButOneMoreArg(lastName: String, age: Int, firstName: String, additionalArg: String): Person2 =&#xA;  Person2(firstName + additionalArg, lastName, age)&#xA;&#xA;val withConstant = &#xA;  person1&#xA;    .intoVia(methodToExpandButOneMoreArg)&#xA;    .transform(Arg.const(_.additionalArg, &#34;-CONST ARG&#34;))&#xA;// withConstant: Person2 = Person2(&#xA;//   firstName = &#34;John-CONST ARG&#34;,&#xA;//   lastName = &#34;Doe&#34;,&#xA;//   age = 23&#xA;// )&#xA;&#xA;val withComputed = &#xA;  person1&#xA;    .intoVia(methodToExpandButOneMoreArg)&#xA;    .transform(Arg.computed(_.additionalArg, _.lastName + &#34;-COMPUTED&#34;))&#xA;// withComputed: Person2 = Person2(&#xA;//   firstName = &#34;JohnDoe-COMPUTED&#34;,&#xA;//   lastName = &#34;Doe&#34;,&#xA;//   age = 23&#xA;// )&#xA;&#xA;val withRenamed = &#xA;  person1&#xA;    .intoVia(methodToExpandButOneMoreArg)&#xA;    .transform(Arg.renamed(_.additionalArg, _.lastName))&#xA;// withRenamed: Person2 = Person2(&#xA;//   firstName = &#34;JohnDoe&#34;,&#xA;//   lastName = &#34;Doe&#34;,&#xA;//   age = 23&#xA;// )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;7. Automatic wrapping and unwrapping of &lt;code&gt;AnyVal&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Despite being a really flawed abstraction &lt;code&gt;AnyVal&lt;/code&gt; is pretty prevalent in Scala 2 code that you may want to interop with and &lt;code&gt;ducktape&lt;/code&gt; is here to assist you. &lt;code&gt;Transformer&lt;/code&gt; definitions for wrapping and uwrapping &lt;code&gt;AnyVals&lt;/code&gt; are automatically available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import io.github.arainko.ducktape.*&#xA;&#xA;final case class WrappedString(value: String) extends AnyVal&#xA;&#xA;val wrapped = WrappedString(&#34;I am a String&#34;)&#xA;// wrapped: WrappedString = WrappedString(value = &#34;I am a String&#34;)&#xA;&#xA;val unwrapped = wrapped.to[String]&#xA;// unwrapped: String = &#34;I am a String&#34;&#xA;&#xA;val wrappedAgain = unwrapped.to[WrappedString]&#xA;// wrappedAgain: WrappedString = WrappedString(value = &#34;I am a String&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;8. Defining custom &lt;code&gt;Transformers&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If for some reason you need a custom &lt;code&gt;Transformer&lt;/code&gt; in scope but still want to partially rely on the automatic derivation and have all the configuration DSL goodies you can use these:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Transformer.define[Source, Dest].build(&amp;lt;Field/Case configuration&amp;gt;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Transformer.defineVia[Source](someMethod).build(&amp;lt;Arg configuration&amp;gt;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import io.github.arainko.ducktape.*&#xA;&#xA;final case class TestClass(str: String, int: Int)&#xA;final case class TestClassWithAdditionalList(int: Int, str: String, additionalArg: List[String])&#xA;&#xA;def method(str: String, int: Int, additionalArg: List[String]) = TestClassWithAdditionalList(int, str, additionalArg)&#xA;&#xA;val testClass = TestClass(&#34;str&#34;, 1)&#xA;// testClass: TestClass = TestClass(str = &#34;str&#34;, int = 1)&#xA;&#xA;val definedViaTransformer =&#xA;  Transformer&#xA;    .defineVia[TestClass](method)&#xA;    .build(Arg.const(_.additionalArg, List(&#34;const&#34;)))&#xA;// definedViaTransformer: Transformer[TestClass, TestClassWithAdditionalList] = repl.MdocSession$MdocApp6$$Lambda$38661/0x0000000106842c40@680998bb&#xA;&#xA;val definedTransformer =&#xA;  Transformer&#xA;    .define[TestClass, TestClassWithAdditionalList]   &#xA;    .build(Field.const(_.additionalArg, List(&#34;const&#34;)))&#xA;// definedTransformer: Transformer[TestClass, TestClassWithAdditionalList] = repl.MdocSession$MdocApp6$$Lambda$38662/0x0000000106840040@44a6c67d&#xA;&#xA;val transformedVia = definedViaTransformer.transform(testClass)&#xA;// transformedVia: TestClassWithAdditionalList = TestClassWithAdditionalList(&#xA;//   int = 1,&#xA;//   str = &#34;str&#34;,&#xA;//   additionalArg = List(&#34;const&#34;)&#xA;// )&#xA;&#xA;val transformed = definedTransformer.transform(testClass)&#xA;// transformed: TestClassWithAdditionalList = TestClassWithAdditionalList(&#xA;//   int = 1,&#xA;//   str = &#34;str&#34;,&#xA;//   additionalArg = List(&#34;const&#34;)&#xA;// )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usecase: recursive &lt;code&gt;Transformers&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Recursive instances are lazy by nature so automatic derivation will be of no use here, we need to get our hands a little bit dirty:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import io.github.arainko.ducktape.*&#xA;&#xA;final case class Rec[A](value: A, rec: Option[Rec[A]])&#xA;&#xA;given recursive[A, B](using Transformer[A, B]): Transformer[Rec[A], Rec[B]] = &#xA;  Transformer.define[Rec[A], Rec[B]].build()&#xA;&#xA;Rec(&#34;1&#34;, Some(Rec(&#34;2&#34;, Some(Rec(&#34;3&#34;, None))))).to[Rec[Option[String]]]&#xA;// res8: Rec[Option[String]] = Rec(&#xA;//   value = Some(value = &#34;1&#34;),&#xA;//   rec = Some(&#xA;//     value = Rec(&#xA;//       value = Some(value = &#34;2&#34;),&#xA;//       rec = Some(value = Rec(value = Some(value = &#34;3&#34;), rec = None))&#xA;//     )&#xA;//   )&#xA;// )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;A look at the generated code&lt;/h3&gt; &#xA;&lt;p&gt;To inspect the code that is generated you can use &lt;code&gt;Transformer.Debug.showCode&lt;/code&gt;, this method will print the generated code at compile time for you to analyze and see if there&#39;s something funny going on after the macro expands.&lt;/p&gt; &#xA;&lt;p&gt;For the sake of documentation let&#39;s also give some examples of what should be the expected output for some basic usages of &lt;code&gt;ducktape&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Generated code - product transformations&lt;/h4&gt; &#xA;&lt;p&gt;Given a structure of case classes like the ones below let&#39;s examine the output that &lt;code&gt;ducktape&lt;/code&gt; splices into your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import io.github.arainko.ducktape.*&#xA;&#xA;final case class Wrapped[A](value: A) extends AnyVal&#xA;&#xA;case class Person(int: Int, str: Option[String], inside: Inside, collectionOfNumbers: Vector[Float])&#xA;case class Person2(int: Wrapped[Int], str: Option[Wrapped[String]], inside: Inside2, collectionOfNumbers: List[Wrapped[Float]])&#xA;&#xA;case class Inside(str: String, int: Int, inside: EvenMoreInside)&#xA;case class Inside2(int: Int, str: String, inside: Option[EvenMoreInside2])&#xA;&#xA;case class EvenMoreInside(str: String, int: Int)&#xA;case class EvenMoreInside2(str: String, int: Int)&#xA;&#xA;val person = Person(23, Some(&#34;str&#34;), Inside(&#34;insideStr&#34;, 24, EvenMoreInside(&#34;evenMoreInsideStr&#34;, 25)), Vector.empty)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generated code - expansion of &lt;code&gt;.to&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Calling the &lt;code&gt;.to&lt;/code&gt; method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;person.to[Person2]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;expands to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  to[Person](person)[Person2](&#xA;    inline$make$i1[Person, Person2](ForProduct)(&#xA;      (&#xA;        (source: Person) =&amp;gt;&#xA;          new Person2(&#xA;            int = new Wrapped[Int](source.int),&#xA;            str = source.str.map[Wrapped[String]]((src: String) =&amp;gt; new Wrapped[String](src)),&#xA;            inside = new Inside2(&#xA;              int = source.inside.int,&#xA;              str = source.inside.str,&#xA;              inside =&#xA;                Some.apply[EvenMoreInside2](new EvenMoreInside2(str = source.inside.inside.str, int = source.inside.inside.int))&#xA;            ),&#xA;            collectionOfNumbers = source.collectionOfNumbers&#xA;              .map[Wrapped[Float]]((`src₂`: Float) =&amp;gt; new Wrapped[Float](`src₂`))&#xA;              .to[List[Wrapped[Float]] &amp;amp; Iterable[Wrapped[Float]]](iterableFactory[Wrapped[Float]])&#xA;          )&#xA;      ): Transformer[Person, Person2]&#xA;    ): ForProduct[Person, Person2]&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generated code - expansion of &lt;code&gt;.into&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Calling the &lt;code&gt;.into&lt;/code&gt; method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;person&#xA;  .into[Person2]&#xA;  .transform(&#xA;    Field.const(_.str, Some(Wrapped(&#34;ConstString!&#34;))),&#xA;    Field.computed(_.int, person =&amp;gt; Wrapped(person.int + 100)),&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;expands to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  {&#xA;    val AppliedBuilder_this: AppliedBuilder[Person, Person2] = into[Person](person)[Person2]&#xA;&#xA;    {&#xA;      val source$proxy13: Person = AppliedBuilder_this.inline$appliedTo&#xA;&#xA;      {&#xA;        val inside$2: Inside2 = new Inside2(&#xA;          int = source$proxy13.inside.int,&#xA;          str = source$proxy13.inside.str,&#xA;          inside = Some.apply[EvenMoreInside2](&#xA;            new EvenMoreInside2(str = source$proxy13.inside.inside.str, int = source$proxy13.inside.inside.int)&#xA;          )&#xA;        )&#xA;        val collectionOfNumbers$2: List[Wrapped[Float]] = source$proxy13.collectionOfNumbers&#xA;          .map[Wrapped[Float]]((src: Float) =&amp;gt; new Wrapped[Float](src))&#xA;          .to[List[Wrapped[Float]] &amp;amp; Iterable[Wrapped[Float]]](iterableFactory[Wrapped[Float]])&#xA;        val str$2: Some[Wrapped[String]] = Some.apply[Wrapped[String]](Wrapped.apply[String](&#34;ConstString!&#34;))&#xA;        val int$2: Wrapped[Int] = Wrapped.apply[Int](source$proxy13.int.+(100))&#xA;        new Person2(int = int$2, str = str$2, inside = inside$2, collectionOfNumbers = collectionOfNumbers$2)&#xA;      }: Person2&#xA;    }: Person2&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generated code - expansion of &lt;code&gt;.via&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Calling the &lt;code&gt;.via&lt;/code&gt; method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;person.via(Person2.apply)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;expands to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  {&#xA;    val Func$proxy4: FunctionMirror[Function4[Wrapped[Int], Option[Wrapped[String]], Inside2, List[Wrapped[Float]], Person2]] {&#xA;      type Return &amp;gt;: Person2 &amp;lt;: Person2&#xA;    } = FunctionMirror.asInstanceOf[&#xA;      FunctionMirror[Function4[Wrapped[Int], Option[Wrapped[String]], Inside2, List[Wrapped[Float]], Person2]] {&#xA;        type Return &amp;gt;: Person2 &amp;lt;: Person2&#xA;      }&#xA;    ]&#xA;&#xA;    ({&#xA;      val int$proxy2: Wrapped[Int] = new Wrapped[Int](person.int)&#xA;      val str$proxy2: Option[Wrapped[String]] = person.str.map[Wrapped[String]]((src: String) =&amp;gt; new Wrapped[String](src))&#xA;      val inside$proxy2: Inside2 = new Inside2(&#xA;        int = person.inside.int,&#xA;        str = person.inside.str,&#xA;        inside = Some.apply[EvenMoreInside2](new EvenMoreInside2(str = person.inside.inside.str, int = person.inside.inside.int))&#xA;      )&#xA;      val collectionOfNumbers$proxy2: List[Wrapped[Float]] = person.collectionOfNumbers&#xA;        .map[Wrapped[Float]]((`src₂`: Float) =&amp;gt; new Wrapped[Float](`src₂`))&#xA;        .to[List[Wrapped[Float]] &amp;amp; Iterable[Wrapped[Float]]](iterableFactory[Wrapped[Float]])&#xA;      Person2.apply(int$proxy2, str$proxy2, inside$proxy2, collectionOfNumbers$proxy2)&#xA;    }: Return): Return&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generated code - expansion of &lt;code&gt;.intoVia&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Calling the &lt;code&gt;.intoVia&lt;/code&gt; method with subsequent transformation customizations&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;person&#xA;  .intoVia(Person2.apply)&#xA;  .transform(&#xA;    Arg.const(_.str, Some(Wrapped(&#34;ConstStr!&#34;))),&#xA;    Arg.computed(_.int, person =&amp;gt; Wrapped(person.int + 100))&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;expands to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  {&#xA;  val x$4$proxy5: FunctionMirror[Function4[Wrapped[Int], Option[Wrapped[String]], Inside2, List[Wrapped[Float]], Person2]] {&#xA;    type Return &amp;gt;: Person2 &amp;lt;: Person2&#xA;  } = FunctionMirror.asInstanceOf[FunctionMirror[Function4[Wrapped[Int], Option[Wrapped[String]], Inside2, List[Wrapped[Float]], Person2]] {&#xA;    type Return &amp;gt;: Person2 &amp;lt;: Person2&#xA;  }]&#xA;  val builder: AppliedViaBuilder[Person, Return, Function4[Wrapped[Int], Option[Wrapped[String]], Inside2, List[Wrapped[Float]], Person2], Nothing] = inline$instance[Person, x$4$proxy5.Return, Function4[Wrapped[Int], Option[Wrapped[String]], Inside2, List[Wrapped[Float]], Person2], Nothing](person, ((int: Wrapped[Int], str: Option[Wrapped[String]], inside: Inside2, collectionOfNumbers: List[Wrapped[Float]]) =&amp;gt; Person2.apply(int, str, inside, collectionOfNumbers)))&#xA;  val AppliedViaBuilder_this: AppliedViaBuilder[Person, Person2, Function4[Wrapped[Int], Option[Wrapped[String]], Inside2, List[Wrapped[Float]], Person2], FunctionArguments {&#xA;    val int: Wrapped[Int]&#xA;    val str: Option[Wrapped[String]]&#xA;    val inside: Inside2&#xA;    val collectionOfNumbers: List[Wrapped[Float]]&#xA;  }] = builder.asInstanceOf[[ArgSelector &amp;gt;: Nothing &amp;lt;: FunctionArguments] =&amp;gt; AppliedViaBuilder[Person, Return, Function4[Wrapped[Int], Option[Wrapped[String]], Inside2, List[Wrapped[Float]], Person2], ArgSelector][FunctionArguments {&#xA;    val int: Wrapped[Int]&#xA;    val str: Option[Wrapped[String]]&#xA;    val inside: Inside2&#xA;    val collectionOfNumbers: List[Wrapped[Float]]&#xA;  }]]&#xA;&#xA;  ({&#xA;    val source$proxy15: Person = AppliedViaBuilder_this.inline$source&#xA;&#xA;    (AppliedViaBuilder_this.inline$function.apply(Wrapped.apply[Int](source$proxy15.int.+(100)), Some.apply[Wrapped[String]](Wrapped.apply[String](&#34;ConstStr!&#34;)), new Inside2(int = source$proxy15.inside.int, str = source$proxy15.inside.str, inside = Some.apply[EvenMoreInside2](new EvenMoreInside2(str = source$proxy15.inside.inside.str, int = source$proxy15.inside.inside.int))), source$proxy15.collectionOfNumbers.map[Wrapped[Float]](((src: Float) =&amp;gt; new Wrapped[Float](src))).to[List[Wrapped[Float]] &amp;amp; Iterable[Wrapped[Float]]](iterableFactory[Wrapped[Float]])): Person2)&#xA;  }: Person2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Netflix/atlas</title>
    <updated>2023-03-05T01:59:54Z</updated>
    <id>tag:github.com,2023-03-05:/Netflix/atlas</id>
    <link href="https://github.com/Netflix/atlas" rel="alternate"></link>
    <summary type="html">&lt;p&gt;In-memory dimensional time series database.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Atlas&lt;/h1&gt; &#xA;&lt;p&gt;Backend for managing dimensional time series data.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://netflix.github.io/atlas-docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/netflix-atlas&#34;&gt;Mailing List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Netflix/atlas/issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Netflix/atlas/releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2014-2023 Netflix, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
</feed>