<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-18T01:51:13Z</updated>
  <subtitle>Weekly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>devsisters/shardcake</title>
    <updated>2022-09-18T01:51:13Z</updated>
    <id>tag:github.com,2022-09-18:/devsisters/shardcake</id>
    <link href="https://github.com/devsisters/shardcake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sharding and location transparency for Scala&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shardcake&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://s01.oss.sonatype.org/content/repositories/releases/com/devsisters/shardcake-core_2.13/&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/r/https/s01.oss.sonatype.org/com.devsisters/shardcake-core_2.13.svg?sanitize=true&#34; alt=&#34;Release Artifacts&#34; title=&#34;Sonatype Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://s01.oss.sonatype.org/content/repositories/snapshots/com/devsisters/shardcake-core_2.13/&#34; title=&#34;Sonatype Snapshots&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/https/s01.oss.sonatype.org/com.devsisters/shardcake-core_2.13.svg?sanitize=true&#34; alt=&#34;Snapshot Artifacts&#34; title=&#34;Sonatype Snapshots&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shardcake&lt;/strong&gt; is a &lt;strong&gt;Scala open source library&lt;/strong&gt; that makes it easy to distribute entities across multiple servers and interact with those entities using their ID without knowing their actual location (this is also known as &lt;em&gt;location transparency&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Shardcake exposes a &lt;strong&gt;purely functional API&lt;/strong&gt; and depends heavily on &lt;a href=&#34;https://zio.dev&#34;&gt;ZIO&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://devsisters.github.io/shardcake/&#34;&gt;Documentation&lt;/a&gt; explains how to use Shardcake, in particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;how to &lt;a href=&#34;https://devsisters.github.io/shardcake/docs/&#34;&gt;get started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://devsisters.github.io/shardcake/docs/architecture.html&#34;&gt;architecture&lt;/a&gt; behind shardcake&lt;/li&gt; &#xA; &lt;li&gt;how to &lt;a href=&#34;https://devsisters.github.io/shardcake/docs/config.html&#34;&gt;configure&lt;/a&gt; it&lt;/li&gt; &#xA; &lt;li&gt;parts you can &lt;a href=&#34;https://devsisters.github.io/shardcake/docs/customization.html&#34;&gt;customize&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>circe/circe</title>
    <updated>2022-09-18T01:51:13Z</updated>
    <id>tag:github.com,2022-09-18:/circe/circe</id>
    <link href="https://github.com/circe/circe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yet another JSON library for Scala&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;circe&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/circe/circe/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/circe/circe/Continuous%20Integration.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/circe/circe&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/circe/circe/master.svg?sanitize=true&#34; alt=&#34;Coverage status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/circe/circe&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter-join%20chat-green.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/io.circe/circe-core_2.13&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.circe/circe-core_2.13.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;circe is a JSON library for Scala (and &lt;a href=&#34;http://www.scala-js.org/&#34;&gt;Scala.js&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://circe.github.io/circe/&#34;&gt;guide&lt;/a&gt; for more information about why circe exists and how to use it.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;h3&gt;Adopters&lt;/h3&gt; &#xA;&lt;p&gt;Are you using circe? Please consider opening a pull request to list your organization here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://abacusprotocol.com/&#34;&gt;Abacus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://anduintransact.com/&#34;&gt;Anduin Transactions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apolloagriculture.com/&#34;&gt;Apollo Agriculture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.autoscout24.com/&#34;&gt;AutoScout24&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.babylonhealth.com/&#34;&gt;Babylon Health&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://banno.com/&#34;&gt;Banno inside of Jack Henry &amp;amp; Associates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.bbc.co.uk&#34;&gt;BBC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.broadinstitute.org/data-sciences-platform&#34;&gt;Broad Institute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.chartboost.com/&#34;&gt;Chartboost&lt;/a&gt; (sending hundreds of thousands of messages per second on our Ad Exchange)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.cibotechnologies.com&#34;&gt;CiBO Technologies&lt;/a&gt; (using circe to (de)serialize data in support of a sustainable revolution in agriculture)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.clearscore.com&#34;&gt;ClearScore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codacy.com&#34;&gt;Codacy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.colisweb.com&#34;&gt;Colisweb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.connio.com&#34;&gt;Connio&lt;/a&gt; (creating and managing digital twins with Circe and Akka)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.coya.com/&#34;&gt;Coya&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.criteo.com/&#34;&gt;Criteo&lt;/a&gt; (&lt;a href=&#34;https://medium.com/criteo-labs/migrate-a-service-getting-200kqps-from-jackson-to-circe-a475b2718206&#34;&gt;collecting 200.000 events per second from our banners&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datalogue.io&#34;&gt;Datalogue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dreamlines.com/&#34;&gt;Dreamlines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drivetribe.com&#34;&gt;DriveTribe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.earnest.com&#34;&gt;Earnest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co&#34;&gt;Elastic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emmy-sharing.de/en/&#34;&gt;Emmy Sharing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://folio-sec.com/&#34;&gt;FOLIO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://glngn.com&#34;&gt;GLNGN Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gympass.com/&#34;&gt;Gympass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gutefrage.net&#34;&gt;Gutefrage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hellosoda.com/&#34;&gt;Hello Soda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.here.com/&#34;&gt;HERE Technologies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hireproof.io/&#34;&gt;Hireproof&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.holidaycheck.de&#34;&gt;HolidayCheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.immobilienscout24.de/&#34;&gt;ImmobilienScout24&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.immozentral.com/&#34;&gt;Immozentral&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.indix.com&#34;&gt;Indix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.itv.com/&#34;&gt;ITV&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kinoplan.ru/&#34;&gt;Kinoplan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.latitudefinancial.com.au/&#34;&gt;Latitude Financial Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.matchesfashion.com&#34;&gt;MatchesFashion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merits.com&#34;&gt;Merit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.metacommerce.ru&#34;&gt;Metacommerce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mobile.de&#34;&gt;Mobile GmbH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.new-work.se/en/&#34;&gt;New Work&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ocadotechnology.com&#34;&gt;Ocado Technology&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://onairentertainment.com/&#34;&gt;On Air Entertainment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://onfocus.io&#34;&gt;Onfocus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opt-technologies.jp/&#34;&gt;Opt Technologies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ovoenergy.com&#34;&gt;OVO Energy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://panaseer.com&#34;&gt;Panaseer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://permutive.com&#34;&gt;Permutive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://prezi.com&#34;&gt;Prezi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.projectseptember.com&#34;&gt;Project September&lt;/a&gt; (using circe to exchange and store data within the platform and serve data using GraphQL with Sangria)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raster-foundry/raster-foundry/&#34;&gt;Raster Foundry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ravellaw.com/technology/&#34;&gt;Ravel Law&lt;/a&gt; (using circe to (de)serialize data for search, analytics, and visualization of tens of millions of legal opinions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.realestate.com.au/&#34;&gt;REA Group - realestate.com.au&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reonomy.com/&#34;&gt;Reonomy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://resilientplc.com/&#34;&gt;Resilient plc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sky.com/&#34;&gt;Sky&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snowplowanalytics.com/&#34;&gt;Snowplow Analytics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.soundcloud.com&#34;&gt;SoundCloud&lt;/a&gt; (transforming 200,000,000 JSON events every hour in MapReduce ETLs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spotify.com&#34;&gt;Spotify&lt;/a&gt; (using circe for JSON IO in &lt;a href=&#34;https://github.com/spotify/scio&#34;&gt;Scio&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.spotx.tv/&#34;&gt;SpotX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stripe.com&#34;&gt;Stripe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stylight.de&#34;&gt;Stylight&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tabmo-group.io/&#34;&gt;TabMo&lt;/a&gt; (parsing more than 100k events per second with Akka Stream and Spark)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tinkoff.ru/&#34;&gt;Tinkoff&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.theguardian.com&#34;&gt;The Guardian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.threatstack.com/&#34;&gt;Threat Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tranzzo.com/&#34;&gt;Tranzzo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twilio.com&#34;&gt;Twilio&lt;/a&gt; (sending many, many millions of messages a day with Circe and Akka)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://veact.net/&#34;&gt;VEACT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wework.com&#34;&gt;WeWork&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://whisk.com&#34;&gt;Whisk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wideangle.co&#34;&gt;Wide Angle Analytics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zalando.de&#34;&gt;Zalando&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zendesk.com&#34;&gt;Zendesk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other circe organization projects&lt;/h3&gt; &#xA;&lt;p&gt;Please get in touch on &lt;a href=&#34;https://gitter.im/circe/circe&#34;&gt;Gitter&lt;/a&gt; if you have a circe-related project that you&#39;d like to discuss hosting under the &lt;a href=&#34;https://github.com/circe&#34;&gt;circe organization&lt;/a&gt; on GitHub.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/circe/circe-benchmarks&#34;&gt;circe-benchmarks&lt;/a&gt;: Benchmarks for comparing the performance of circe and other JSON libraries for the JVM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/circe/circe-config&#34;&gt;circe-config&lt;/a&gt;: A library for translating between HOCON, Java properties, and JSON documents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/circe/circe-derivation&#34;&gt;circe-derivation&lt;/a&gt;: Experimental generic derivation with improved compile times.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/circe/circe-fs2&#34;&gt;circe-fs2&lt;/a&gt;: A library that provides streaming JSON parsing and decoding built on &lt;a href=&#34;https://github.com/functional-streams-for-scala/fs2&#34;&gt;fs2&lt;/a&gt; and &lt;a href=&#34;https://github.com/non/jawn&#34;&gt;Jawn&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/circe/circe-iteratee&#34;&gt;circe-iteratee&lt;/a&gt;: A library that provides streaming JSON parsing and decoding built on &lt;a href=&#34;https://github.com/travisbrown/iteratee&#34;&gt;iteratee.io&lt;/a&gt; and &lt;a href=&#34;https://github.com/non/jawn&#34;&gt;Jawn&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/circe/circe-jackson&#34;&gt;circe-jackson&lt;/a&gt;: A library that provides &lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;Jackson&lt;/a&gt;-supported parsing and printing for circe.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/circe/circe-spray&#34;&gt;circe-spray&lt;/a&gt;: A library that provides JSON marshallers and unmarshallers for &lt;a href=&#34;http://spray.io/&#34;&gt;Spray&lt;/a&gt; using circe.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/circe/circe-yaml&#34;&gt;circe-yaml&lt;/a&gt;: A library that uses &lt;a href=&#34;https://bitbucket.org/asomov/snakeyaml&#34;&gt;SnakeYAML&lt;/a&gt; to support parsing YAML 1.1 into circe&#39;s &lt;code&gt;Json&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Related projects&lt;/h3&gt; &#xA;&lt;p&gt;The following open source projects are either built on circe or provide circe support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://actor.im/&#34;&gt;Actor Messenger&lt;/a&gt;: A platform for instant messaging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hseeberger/akka-http-json&#34;&gt;akka-http-json&lt;/a&gt;: A library that supports using circe for JSON marshalling and unmarshalling in &lt;a href=&#34;http://doc.akka.io/docs/akka/current/scala/http/&#34;&gt;Akka HTTP&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/knutwalker/akka-stream-json&#34;&gt;akka-stream-json&lt;/a&gt;: A library that provides JSON support for stream based applications using Jawn as a parser with a convenience example for circe.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aishfenton/Argus&#34;&gt;Argus&lt;/a&gt;: Generates models and circe encoders and decoders from JSON schemas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blackdoor/jose&#34;&gt;Blackdoor JOSE&lt;/a&gt;: circe JSON support for blackdoor JOSE and JWT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sirthias.github.io/borer/&#34;&gt;borer&lt;/a&gt;: Allows circe encoders/decoders to be reused for CBOR (de)serialization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/compstak/circe-debezium&#34;&gt;circe-debezium&lt;/a&gt;: Circe codecs for &lt;a href=&#34;https://debezium.io/&#34;&gt;Debezium&lt;/a&gt; payload types&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/compstak/circe-geojson&#34;&gt;circe-geojson&lt;/a&gt;: Circe support for GeoJSON (RFC 7946)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NeQuissimus/circe-kafka&#34;&gt;circe-kafka&lt;/a&gt;: Implicit conversion of Encoder and Decoder into Kafka Serializer/Deserializer/Serde&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/agourlay/cornichon&#34;&gt;cornichon&lt;/a&gt;: A DSL for JSON API testing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dcos/cosmos&#34;&gt;Cosmos&lt;/a&gt;: An API for &lt;a href=&#34;https://dcos.io/&#34;&gt;DCOS&lt;/a&gt; services that uses circe.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fthomas/crjdt&#34;&gt;crjdt&lt;/a&gt;: A conflict-free replicated JSON datatype in Scala.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gnieh/diffson&#34;&gt;diffson&lt;/a&gt;: A Scala diff / patch library for JSON.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sksamuel/elastic4s&#34;&gt;elastic4s&lt;/a&gt;: A Scala client for &lt;a href=&#34;https://www.elastic.co/&#34;&gt;Elasticsearch&lt;/a&gt; with circe support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lloydmeta/enumeratum&#34;&gt;Enumeratum&lt;/a&gt;: Enumerations for Scala with circe integration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/finagle/featherbed&#34;&gt;Featherbed&lt;/a&gt;: A REST client library with circe support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/finagle/finch&#34;&gt;Finch&lt;/a&gt;: A library for building web services with circe support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daviddenton/fintrospect&#34;&gt;fintrospect&lt;/a&gt;: HTTP contracts for &lt;a href=&#34;https://twitter.github.io/finagle/&#34;&gt;Finagle&lt;/a&gt; with circe support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tkrs/fluflu&#34;&gt;fluflu&lt;/a&gt;: A &lt;a href=&#34;http://www.fluentd.org/&#34;&gt;Fluentd&lt;/a&gt; logger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/47deg/github4s&#34;&gt;Github4s&lt;/a&gt;: A GitHub API wrapper written in Scala.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/guardian/content-api-models&#34;&gt;content-api-models&lt;/a&gt;: The Guardian&#39;s Content API Thrift models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/http4s/http4s&#34;&gt;http4s&lt;/a&gt;: A purely functional HTTP library for client and server applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pshirshov/izumi-r2&#34;&gt;IdeaLingua&lt;/a&gt;: Staged Interface Definition and Data Modeling Language &amp;amp; RPC system currently targeting Scala, Go, C# and TypeScript. Scala codegen generates models and JSON codecs using circe.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snowplow/iglu&#34;&gt;Iglu Schema Repository&lt;/a&gt;: A &lt;a href=&#34;http://json-schema.org/&#34;&gt;JSON Schema&lt;/a&gt; repository with circe support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codemettle/jsactor&#34;&gt;jsactor&lt;/a&gt;: An actor library for Scala.js with circe support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/plokhotnyuk/jsoniter-scala/tree/master/jsoniter-scala-circe&#34;&gt;jsoniter-scala-circe&lt;/a&gt;: A booster for faster parsing/printing to/from circe AST and decoding/encoding of &lt;code&gt;java.time._&lt;/code&gt; and &lt;code&gt;BigInt&lt;/code&gt; types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pauldijou.fr/jwt-scala/samples/jwt-circe/&#34;&gt;jwt-circe&lt;/a&gt;: A &lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32&#34;&gt;JSON Web Token&lt;/a&gt; implementation with circe support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/atlassian/kadai-log&#34;&gt;kadai-log&lt;/a&gt;: A logging library with circe support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/msgpack4z/msgpack4z-circe&#34;&gt;msgpack4z-circe&lt;/a&gt;: A &lt;a href=&#34;https://github.com/msgpack/msgpack/raw/master/spec.md&#34;&gt;MessagePack&lt;/a&gt; implementation with circe support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/djx314/ohNoMyCirce&#34;&gt;ohNoMyCirce&lt;/a&gt;: Friendly compile error messages for &lt;a href=&#34;https://github.com/milessabin/shapeless&#34;&gt;shapeless&lt;/a&gt;&#39;s Generic, &lt;a href=&#34;https://github.com/circe&#34;&gt;circe&lt;/a&gt;&#39;s Encoder &amp;amp; Decoder and &lt;a href=&#34;http://slick.lightbend.com/&#34;&gt;slick&lt;/a&gt;&#39;s case class mapping.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jilen/play-circe&#34;&gt;play-circe&lt;/a&gt;: circe support for &lt;a href=&#34;https://www.playframework.com/&#34;&gt;Play!&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sksamuel/pulsar4s&#34;&gt;pulsar4s&lt;/a&gt;: A Scala client for &lt;a href=&#34;https://pulsar.apache.org/&#34;&gt;Apache-Pulsar&lt;/a&gt; with circe support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rapture.io/&#34;&gt;Rapture&lt;/a&gt;: Support for using circe&#39;s parsing and AST in Rapture JSON.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/finagle/roc&#34;&gt;roc&lt;/a&gt;: A PostgreSQL client built on Finagle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sangria-graphql/sangria-circe&#34;&gt;sangria-circe&lt;/a&gt;: circe marshalling for &lt;a href=&#34;http://sangria-graphql.org/&#34;&gt;Sangria&lt;/a&gt;, a &lt;a href=&#34;http://graphql.org/docs/getting-started/&#34;&gt;GraphQL&lt;/a&gt; implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vpavkin/scalist&#34;&gt;scalist&lt;/a&gt;: A &lt;a href=&#34;https://developer.todoist.com/&#34;&gt;Todoist&lt;/a&gt; API client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scala-jsonapi/scala-jsonapi&#34;&gt;scala-jsonapi&lt;/a&gt;: Scala support library for integrating the JSON API spec with Spray, Play! or Circe&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shogowada/scala-json-rpc&#34;&gt;scala-json-rpc&lt;/a&gt;: &lt;a href=&#34;http://www.jsonrpc.org&#34;&gt;JSON-RPC&lt;/a&gt; 2.0 library for Scala and Scala.js&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stephennancekivell/scalatest-json&#34;&gt;scalatest-json-circe&lt;/a&gt;: Scalatest matchers for Json with appropriate equality and descriptive error messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spotify/scio&#34;&gt;Scio&lt;/a&gt;: A Scala API for Apache Beam and Google Cloud Dataflow, uses circe for JSON IO&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/durban/seals/&#34;&gt;seals&lt;/a&gt;: Tools for schema evolution and language-integrated schemata (derives circe encoders and decoders).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/labra/shaclex&#34;&gt;shaclex&lt;/a&gt;: RDF validation using SHACL or ShEx.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tminglei/slick-pg&#34;&gt;Slick-pg&lt;/a&gt;: &lt;a href=&#34;http://slick.lightbend.com/&#34;&gt;Slick&lt;/a&gt; extensions for PostgreSQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/softwaremill/sttp&#34;&gt;sttp&lt;/a&gt;: Scala HTTP client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrdimosthenis.github.io/Synapses&#34;&gt;Synapses&lt;/a&gt;: A lightweight Neural Network library, for js, jvm and .net.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nikdon/telepooz&#34;&gt;telepooz&lt;/a&gt;: A Scala wrapper for the &lt;a href=&#34;https://core.telegram.org/bots/api&#34;&gt;Telegram Bot API&lt;/a&gt; built on circe.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sungiant/zenith&#34;&gt;Zenith&lt;/a&gt;: Functional HTTP library built on circe.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;The following projects provide examples, templates, or benchmarks that include circe:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alanphillips78/akka-http-microservice-blueprint&#34;&gt;https://github.com/alanphillips78/akka-http-microservice-blueprint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bneil/fcs_boilerplate&#34;&gt;https://github.com/bneil/fcs_boilerplate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gvolpe/simple-http4s-api&#34;&gt;https://github.com/gvolpe/simple-http4s-api&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vitorsvieira/akka-http-circe-json-template&#34;&gt;https://github.com/vitorsvieira/akka-http-circe-json-template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stephennancekivell/some-jmh-json-benchmarks-circe-jackson&#34;&gt;https://github.com/stephennancekivell/some-jmh-json-benchmarks-circe-jackson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pauljamescleary/scala-pet-store&#34;&gt;https://github.com/pauljamescleary/scala-pet-store&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors and participation&lt;/h2&gt; &#xA;&lt;p&gt;circe is a fork of &lt;a href=&#34;http://argonaut.io/&#34;&gt;Argonaut&lt;/a&gt;, and if you find it at all useful, you should thank &lt;a href=&#34;https://github.com/markhibberd&#34;&gt;Mark Hibberd&lt;/a&gt;, &lt;a href=&#34;https://github.com/tonymorris&#34;&gt;Tony Morris&lt;/a&gt;, &lt;a href=&#34;https://github.com/xuwei-k&#34;&gt;Kenji Yoshida&lt;/a&gt;, and the rest of the &lt;a href=&#34;https://github.com/argonaut-io/argonaut/graphs/contributors&#34;&gt;Argonaut contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;circe is currently maintained by &lt;a href=&#34;https://github.com/zarthross/&#34;&gt;Darren Gibson&lt;/a&gt; and &lt;a href=&#34;https://github.com/zmccoy/&#34;&gt;Zach McCoy&lt;/a&gt;. After the 1.0 release, all pull requests will require two sign-offs by a maintainer to be merged.&lt;/p&gt; &#xA;&lt;p&gt;The circe project supports the &lt;a href=&#34;https://www.scala-lang.org/conduct/&#34;&gt;Scala code of conduct&lt;/a&gt; and wants all of its channels (Gitter, GitHub, etc.) to be inclusive environments.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/circe/circe/series/0.14.x/CONTRIBUTING.md&#34;&gt;contributors&#39; guide&lt;/a&gt; for details on how to submit a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;circe is licensed under the &lt;strong&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, Version 2.0&lt;/a&gt;&lt;/strong&gt; (the &#34;License&#34;); you may not use this software except in compliance with the License.&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ergoplatform/ergo</title>
    <updated>2022-09-18T01:51:13Z</updated>
    <id>tag:github.com,2022-09-18:/ergoplatform/ergo</id>
    <link href="https://github.com/ergoplatform/ergo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ergo protocol description &amp; reference client implementation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ergo&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the reference implementation of the Ergo Platform protocol, which is an alternative to the &lt;a href=&#34;https://bitcoin.org/bitcoin.pdf&#34;&gt;Bitcoin protocol&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ergo Platform website: &lt;a href=&#34;https://ergoplatform.org/&#34;&gt;https://ergoplatform.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Differences from Bitcoin&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Powerful contracts in the multi-stage extended UTXO model (see &lt;a href=&#34;https://ergoplatform.org/docs/ErgoScript.pdf&#34;&gt;ErgoScript whitepaper&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Memory-hard Proof-of-Work function &lt;a href=&#34;https://docs.ergoplatform.com/ErgoPow.pdf&#34;&gt;Autolykos2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for stateless clients (asymmetric, based on &lt;a href=&#34;https://eprint.iacr.org/2016/994&#34;&gt;https://eprint.iacr.org/2016/994&lt;/a&gt;), &lt;a href=&#34;https://eprint.iacr.org/2017/963.pdf&#34;&gt;NiPoPoWs&lt;/a&gt;, hybrid modes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ScorexFoundation/sigmastate-interpreter&#34;&gt;Alternative transactional language&lt;/a&gt;, which is more powerful that Bitcoin Script but also safe against heavy validation attacks&lt;/li&gt; &#xA; &lt;li&gt;Alternative fee model with &lt;a href=&#34;https://fc18.ifca.ai/bitcoin/papers/bitcoin18-final18.pdf&#34;&gt;mandatory storage-rent component&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Specifications&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://ergoplatform.org/docs/whitepaper.pdf&#34;&gt;White Paper&lt;/a&gt; with a brief description is available. A Yellow Paper with detailed specification is underway and will be available shortly. At the moment, there are &lt;a href=&#34;https://github.com/ergoplatform/ergo/tree/master/papers/yellow&#34;&gt;drafts of the Yellow Paper&lt;/a&gt; available, and currently the reference implementation code should be considered as the specification.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can check our &lt;a href=&#34;https://github.com/ergoplatform/ergo/wiki/Set-up-a-full-node&#34;&gt;Setup A Full Node&lt;/a&gt; wiki page to learn how to manually setup and configure a node.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can run the prepared &lt;a href=&#34;https://raw.githubusercontent.com/ergoplatform/ergo/master/ergo-installer.sh&#34;&gt;ergo-installer.sh&lt;/a&gt; script. With this script you&#39;ll have the latest Ergo node installed without any hassle (only availalbe for Linux distributions):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -s https://raw.githubusercontent.com/ergoplatform/ergo/master/ergo-installer.sh | sh -s -- --api-key=&amp;lt;YOUR_API_KEY&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;In order to build the Ergo node from sources you need JDK (&amp;gt;= 1.8) and SBT to be &lt;a href=&#34;https://docs.scala-lang.org/getting-started/sbt-track/getting-started-with-scala-and-sbt-on-the-command-line.html&#34;&gt;installed&lt;/a&gt; on your machine.&lt;/p&gt; &#xA;&lt;p&gt;In order to simply get a single jar run: &lt;code&gt;sbt assembly&lt;/code&gt; - assembly would appear in &lt;code&gt;target/scala-2.12/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;If you want to create a package for a specific platform with launching scripts the one of the following packager commands could be chosen (depending on desired system type you want to build for):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;universal:packageBin&lt;/code&gt; - Generates a universal zip file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;universal:packageZipTarball&lt;/code&gt; - Generates a universal tgz file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debian:packageBin&lt;/code&gt; - Generates a deb&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker:publishLocal&lt;/code&gt; - Builds a Docker image using the local Docker server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rpm:packageBin&lt;/code&gt; - Generates an rpm&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;universal:packageOsxDmg&lt;/code&gt; - Generates a DMG file with the same contents as the universal zip/tgz.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;windows:packageBin&lt;/code&gt; - Generates an MSI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The final build command should look like: &lt;code&gt;sbt &amp;lt;packager_command&amp;gt;&lt;/code&gt;, example: &lt;code&gt;sbt universal:packageBin&lt;/code&gt;. A resulted package could be found in the &lt;code&gt;target/scala-2.12/&amp;lt;platform_type&amp;gt;&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Running the node&lt;/h2&gt; &#xA;&lt;p&gt;The node can be started in a couple different ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In case you only have a jar: &lt;code&gt;java -jar /path/to/ergo-&amp;lt;version&amp;gt;.jar --&amp;lt;networkId&amp;gt; -c /path/to/local.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using start script from sbt-native-packager: &lt;code&gt;sh /path/to/bin/ergo --&amp;lt;networkId&amp;gt; -c /path/to/local.conf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Available &lt;code&gt;networkId&lt;/code&gt; options: &lt;code&gt;mainnet&lt;/code&gt;, &lt;code&gt;testnet&lt;/code&gt;, &lt;code&gt;devnet&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;UI&lt;/h2&gt; &#xA;&lt;p&gt;Node UI (graphical interface) could be accessed at &lt;code&gt;&amp;lt;node_ip&amp;gt;:&amp;lt;api_port&amp;gt;/panel&lt;/code&gt; in your browser.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/ergoplatform/static-data/raw/master/img/node_ui.png&#34; align=&#34;right&#34;&gt; &#xA;&lt;h2&gt;Docker Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Ergo has officially supported Docker package. To run last Ergo version in mainnet as a console application with logs printed to console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker run --rm -p 9030:9030 -p 127.0.0.1:9053:9053 -v /path/on/host/to/ergo/data:/home/ergo/.ergo ergoplatform/ergo --mainnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will connect to Ergo mainnet with default config and open port &lt;code&gt;9030&lt;/code&gt; globally and &lt;code&gt;9053&lt;/code&gt; locally on the host system. All data will be stored in your host directory &lt;code&gt;/path/on/host/to/ergo/data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run specific Ergo version &lt;code&gt;&amp;lt;VERSION&amp;gt;&lt;/code&gt; as a service with custom config &lt;code&gt;/path/on/host/system/to/myergo.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker run -d \&#xA;    -p 9030:9030 \&#xA;    -p 127.0.0.1:9053:9053 \&#xA;    -v /path/on/host/to/ergo/data:/home/ergo/.ergo \&#xA;    -v /path/on/host/system/to/myergo.conf:/etc/myergo.conf \&#xA;    -e MAX_HEAP=3G \&#xA;    ergoplatform/ergo:&amp;lt;VERSION&amp;gt; --&amp;lt;networkId&amp;gt; -c /etc/myergo.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available versions can be found on &lt;a href=&#34;https://hub.docker.com/r/ergoplatform/ergo/tags&#34;&gt;Ergo Docker image page&lt;/a&gt;, for example, &lt;code&gt;v4.0.43&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This will connect to the Ergo mainnet or testnet following your configuration passed in &lt;code&gt;myergo.conf&lt;/code&gt; and network flag &lt;code&gt;--&amp;lt;networkId&amp;gt;&lt;/code&gt;. Every default config value would be overwritten with corresponding value in &lt;code&gt;myergo.conf&lt;/code&gt;. &lt;code&gt;MAX_HEAP&lt;/code&gt; variable can be used to control how much memory can the node consume.&lt;/p&gt; &#xA;&lt;p&gt;This command also would store your data in &lt;code&gt;/path/on/host/to/ergo/data&lt;/code&gt; on host system, and open ports &lt;code&gt;9030&lt;/code&gt; (node communication) globally and &lt;code&gt;9053&lt;/code&gt; (REST API) locally on host system. The &lt;code&gt;/path/on/host/to/ergo/data&lt;/code&gt; directory must has &lt;code&gt;777&lt;/code&gt; permissions or has owner/group numeric id equal to &lt;code&gt;9052&lt;/code&gt; to be writable by container, as &lt;code&gt;ergo&lt;/code&gt; user inside Docker image (please refer to &lt;a href=&#34;https://raw.githubusercontent.com/ergoplatform/ergo/master/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Ergo node works normally behind NAT, so you can keep closed your &lt;code&gt;9030&lt;/code&gt; port, hence other nodes could not discover and connect to yours one, only your node could initiate connections.&lt;/p&gt; &#xA;&lt;p&gt;It is also a good practice to keep closed REST API port &lt;code&gt;9053&lt;/code&gt;, and connect to your node from inside another container in the same Docker network (this case not covered by this short quick start manual).&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;There are three kinds of tests:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Unit and property tests, run them with &lt;code&gt;sbt test&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;Integration tests, they require for Docker to be installed, then run &lt;code&gt;sudo sbt it:test&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Bootstrapping tests, very slow as they are checking that the node is indeed catching up with the main network in different regimes, they require for Docker too, run as &lt;code&gt;sudo sbt it2:test&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Open project in IDE&lt;/h2&gt; &#xA;&lt;p&gt;Your can use &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt; (Community or Ultimate edition) or &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt; + &lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;Metals&lt;/a&gt;. Before opening the project in IDE make sure it can be built with sbt. You may need to fix dependency resolution errors first.&lt;/p&gt; &#xA;&lt;p&gt;After that you can open the project folder in Idea (File / Open) which will run Project Import Wizard. The wizard will use SBT configuration (build.sbt file) to generate Idea&#39;s project configuration files. You can open &lt;code&gt;File / Project Structure...&lt;/code&gt; dialog to see project configuration. If everything is successful you can compile the project in IDE.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Ergo is open-source and open movement, always in need for testers and developers! Please feel free to discuss development in &lt;a href=&#34;https://discord.gg/kj7s7nb&#34;&gt;Ergo Discord&lt;/a&gt;, #development channel.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ergoplatform/ergo/master/FAQ.md&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>