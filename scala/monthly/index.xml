<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:59:06Z</updated>
  <subtitle>Monthly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>feathr-ai/feathr</title>
    <updated>2022-11-01T01:59:06Z</updated>
    <id>tag:github.com,2022-11-01:/feathr-ai/feathr</id>
    <link href="https://github.com/feathr-ai/feathr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Feathr ‚Äì An Enterprise-Grade, High Performance Feature Store&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Feathr &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; An enterprise-grade, high-performance feature store &lt;/h3&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Important Links: &lt;a href=&#34;https://join.slack.com/t/feathrai/shared_invite/zt-1ffva5u6v-voq0Us7bbKAw873cEzHOSg&#34;&gt;Slack&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/feathr-ai/feathr/discussions&#34;&gt;Discussions&lt;/a&gt;. &lt;a href=&#34;https://feathr-ai.github.io/feathr/&#34;&gt;Docs&lt;/a&gt;. &lt;/h3&gt;  &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/feathr-ai/feathr/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/feathr-ai/feathr/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/feathr-ai/feathr.svg?style=flat&amp;amp;sort=semver&amp;amp;color=blue&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://feathr-ai.github.io/feathr/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-blue.svg?sanitize=true&#34; alt=&#34;Docs Latest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://feathr.readthedocs.io/en/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/readthedocs/feathr?label=Python%20API&#34; alt=&#34;Python API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/6457&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/6457/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Feathr?&lt;/h2&gt; &#xA;&lt;p&gt;Feathr is the feature store that is used in production in LinkedIn for many years and was open sourced in April 2022. It is currently a project under &lt;a href=&#34;https://lfaidata.foundation/blog/2022/09/12/feathr-joins-lf-ai-data-as-new-sandbox-project/&#34;&gt;LF AI &amp;amp; Data Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read our announcement on &lt;a href=&#34;https://engineering.linkedin.com/blog/2022/open-sourcing-feathr---linkedin-s-feature-store-for-productive-m&#34;&gt;Open Sourcing Feathr&lt;/a&gt; and &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/feathr-linkedin-s-feature-store-is-now-available-on-azure/&#34;&gt;Feathr on Azure&lt;/a&gt;, as well as the &lt;a href=&#34;https://lfaidata.foundation/blog/2022/09/12/feathr-joins-lf-ai-data-as-new-sandbox-project/&#34;&gt;announcement from LF AI &amp;amp; Data Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feathr lets you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Define features&lt;/strong&gt; based on raw data sources (batch and streaming) using pythonic APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Register and get features by names&lt;/strong&gt; during model training and model inference.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Share features&lt;/strong&gt; across your team and company.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feathr automatically computes your feature values and joins them to your training data, using point-in-time-correct semantics to avoid data leakage, and supports materializing and deploying your features for use online in production.&lt;/p&gt; &#xA;&lt;h2&gt;üåü Feathr Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battle tested in production for more than 6 years:&lt;/strong&gt; LinkedIn has been using Feathr in production for over 6 years and have a dedicated team improving it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalable with built-in optimizations:&lt;/strong&gt; For example, based on some internal use case, Feathr can process billions of rows and PB scale data with built-in optimizations such as bloom filters and salted joins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich support for point-in-time joins and aggregations:&lt;/strong&gt; Feathr has high performant built-in operators designed for Feature Store, including time-based aggregation, sliding window joins, look-up features, all with point-in-time correctness.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly customizable user-defined functions (UDFs)&lt;/strong&gt; with native PySpark and Spark SQL support to lower the learning curve for data scientists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pythonic APIs&lt;/strong&gt; to access everything with low learning curve; Integrated with model building so data scientists can be productive from day one.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Derived Features&lt;/strong&gt; which is a unique capability across all the feature store solutions. This encourage feature consumers to build features on existing features and encouraging feature reuse.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich type system&lt;/strong&gt; including support for embeddings for advanced machine learning/deep learning scenarios. One of the common use cases is to build embeddings for customer profiles, and those embeddings can be reused across an organization in all the machine learning applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native cloud integration&lt;/strong&gt; with simplified and scalable architecture, which is illustrated in the next section.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature sharing and reuse made easy:&lt;/strong&gt; Feathr has built-in feature registry so that features can be easily shared across different teams and boost team productivity.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚òÅÔ∏è Running Feathr on Cloud with a few simple steps&lt;/h2&gt; &#xA;&lt;p&gt;Feathr has native integrations with Databricks and Azure Synapse:&lt;/p&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://feathr-ai.github.io/feathr/how-to-guides/azure-deployment-arm.html&#34;&gt;Feathr ARM deployment guide&lt;/a&gt; to run Feathr on Azure. This allows you to quickly get started with automated deployment using Azure Resource Manager template.&lt;/p&gt; &#xA;&lt;p&gt;If you want to set up everything manually, you can checkout the &lt;a href=&#34;https://feathr-ai.github.io/feathr/how-to-guides/azure-deployment-cli.html&#34;&gt;Feathr CLI deployment guide&lt;/a&gt; to run Feathr on Azure. This allows you to understand what is going on and set up one resource at a time.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/quickstart_databricks.md&#34;&gt;Quick Start Guide for Feathr on Databricks&lt;/a&gt; to run Feathr with Databricks.&lt;/li&gt; &#xA; &lt;li&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/quickstart_synapse.md&#34;&gt;Quick Start Guide for Feathr on Azure Synapse&lt;/a&gt; to run Feathr with Azure Synapse.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìì Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For more details on Feathr, read our &lt;a href=&#34;https://feathr-ai.github.io/feathr/&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For Python API references, read the &lt;a href=&#34;https://feathr.readthedocs.io/&#34;&gt;Python API Reference&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For technical talks on Feathr, see the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/talks/Feathr%20Feature%20Store%20Talk.pdf&#34;&gt;slides here&lt;/a&gt;. The recording is &lt;a href=&#34;https://www.youtube.com/watch?v=gZg01UKQMTY&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Install Feathr Client Locally&lt;/h2&gt; &#xA;&lt;p&gt;If you want to install Feathr client in a python environment, use this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install feathr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use the latest code from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/feathr-ai/feathr.git#subdirectory=feathr_project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üî° Feathr Highlighted Capabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/concepts/feathr-capabilities.md&#34;&gt;Feathr Full Capabilities&lt;/a&gt; for more examples. Below are a few selected ones:&lt;/p&gt; &#xA;&lt;h3&gt;Feathr UI&lt;/h3&gt; &#xA;&lt;p&gt;Feathr provides an intuitive UI so you can search and explore all the available features and their corresponding lineages.&lt;/p&gt; &#xA;&lt;p&gt;You can use Feathr UI to search features, identify data sources, track feature lineages and manage access controls. Check out the latest live demo &lt;a href=&#34;https://aka.ms/feathrdemo&#34;&gt;here&lt;/a&gt; to see what Feathr UI can do for you. Use one of following accounts when you are prompted to login:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A work or school organization account, includes Office 365 subscribers.&lt;/li&gt; &#xA; &lt;li&gt;Microsoft personal account, this means an account can access to Skype, Outlook.com, OneDrive, and Xbox LIVE.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/images/feathr-ui.png&#34; alt=&#34;Feathr UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information on the Feathr UI and the registry behind it, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/concepts/feature-registry.md&#34;&gt;Feathr Feature Registry&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Rich UDF Support&lt;/h3&gt; &#xA;&lt;p&gt;Feathr has highly customizable UDFs with native PySpark and Spark SQL integration to lower learning curve for data scientists:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add_new_dropoff_and_fare_amount_column(df: DataFrame):&#xA;    df = df.withColumn(&#34;f_day_of_week&#34;, dayofweek(&#34;lpep_dropoff_datetime&#34;))&#xA;    df = df.withColumn(&#34;fare_amount_cents&#34;, df.fare_amount.cast(&#39;double&#39;) * 100)&#xA;    return df&#xA;&#xA;batch_source = HdfsSource(name=&#34;nycTaxiBatchSource&#34;,&#xA;                        path=&#34;abfss://feathrazuretest3fs@feathrazuretest3storage.dfs.core.windows.net/demo_data/green_tripdata_2020-04.csv&#34;,&#xA;                        preprocessing=add_new_dropoff_and_fare_amount_column,&#xA;                        event_timestamp_column=&#34;new_lpep_dropoff_datetime&#34;,&#xA;                        timestamp_format=&#34;yyyy-MM-dd HH:mm:ss&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Defining Window Aggregation Features with Point-in-time correctness&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agg_features = [Feature(name=&#34;f_location_avg_fare&#34;,&#xA;                        key=location_id,                          # Query/join key of the feature(group)&#xA;                        feature_type=FLOAT,&#xA;                        transform=WindowAggTransformation(        # Window Aggregation transformation&#xA;                            agg_expr=&#34;cast_float(fare_amount)&#34;,&#xA;                            agg_func=&#34;AVG&#34;,                       # Apply average aggregation over the window&#xA;                            window=&#34;90d&#34;)),                       # Over a 90-day window&#xA;                ]&#xA;&#xA;agg_anchor = FeatureAnchor(name=&#34;aggregationFeatures&#34;,&#xA;                           source=batch_source,&#xA;                           features=agg_features)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Define features on top of other features - Derived Features&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Compute a new feature(a.k.a. derived feature) on top of an existing feature&#xA;derived_feature = DerivedFeature(name=&#34;f_trip_time_distance&#34;,&#xA;                                 feature_type=FLOAT,&#xA;                                 key=trip_key,&#xA;                                 input_features=[f_trip_distance, f_trip_time_duration],&#xA;                                 transform=&#34;f_trip_distance * f_trip_time_duration&#34;)&#xA;&#xA;# Another example to compute embedding similarity&#xA;user_embedding = Feature(name=&#34;user_embedding&#34;, feature_type=DENSE_VECTOR, key=user_key)&#xA;item_embedding = Feature(name=&#34;item_embedding&#34;, feature_type=DENSE_VECTOR, key=item_key)&#xA;&#xA;user_item_similarity = DerivedFeature(name=&#34;user_item_similarity&#34;,&#xA;                                      feature_type=FLOAT,&#xA;                                      key=[user_key, item_key],&#xA;                                      input_features=[user_embedding, item_embedding],&#xA;                                      transform=&#34;cosine_similarity(user_embedding, item_embedding)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Define Streaming Features&lt;/h3&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://feathr-ai.github.io/feathr/how-to-guides/streaming-source-ingestion.html&#34;&gt;Streaming Source Ingestion Guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Point in Time Joins&lt;/h3&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://feathr-ai.github.io/feathr/concepts/point-in-time-join.html&#34;&gt;Point-in-time Correctness and Point-in-time Join in Feathr&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Running Feathr Examples&lt;/h3&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://github.com/feathr-ai/feathr/raw/main/docs/samples/azure_synapse/product_recommendation_demo.ipynb&#34;&gt;quick start Jupyter Notebook&lt;/a&gt; to try it out. There is also a companion &lt;a href=&#34;https://feathr-ai.github.io/feathr/quickstart_synapse.html&#34;&gt;quick start guide&lt;/a&gt; containing a bit more explanation on the notebook.&lt;/p&gt; &#xA;&lt;h2&gt;üó£Ô∏è Tech Talks on Feathr&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gZg01UKQMTY&#34;&gt;Introduction to Feathr - Beginner&#39;s guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mybuild.microsoft.com/en-US/sessions/5bdff7d5-23e6-4f0d-9175-da8325d05c2a?source=sessions&#34;&gt;Document Intelligence using Azure Feature Store (Feathr) and SynapseML &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2KSM-NLfvY0&#34;&gt;Notebook tutorial: Build a Product Recommendation Machine Learning Model with Feathr Feature Store&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Cloud Integrations and Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/images/architecture.png&#34; alt=&#34;Architecture Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feathr component&lt;/th&gt; &#xA;   &lt;th&gt;Cloud Integrations&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Offline store ‚Äì Object Store&lt;/td&gt; &#xA;   &lt;td&gt;Azure Blob Storage, Azure ADLS Gen2, AWS S3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Offline store ‚Äì SQL&lt;/td&gt; &#xA;   &lt;td&gt;Azure SQL DB, Azure Synapse Dedicated SQL Pools, Azure SQL in VM, Snowflake&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Streaming Source&lt;/td&gt; &#xA;   &lt;td&gt;Kafka, EventHub&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Online store&lt;/td&gt; &#xA;   &lt;td&gt;Redis, &lt;a href=&#34;https://feathr-ai.github.io/feathr/how-to-guides/jdbc-cosmos-notes.html#using-cosmosdb-as-the-online-store&#34;&gt;Azure Cosmos DB&lt;/a&gt;, Aerospike (coming soon)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Feature Registry and Governance&lt;/td&gt; &#xA;   &lt;td&gt;Azure Purview, ANSI SQL such as Azure SQL Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compute Engine&lt;/td&gt; &#xA;   &lt;td&gt;Azure Synapse Spark Pools, Databricks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Machine Learning Platform&lt;/td&gt; &#xA;   &lt;td&gt;Azure Machine Learning, Jupyter Notebook, Databricks Notebook&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Format&lt;/td&gt; &#xA;   &lt;td&gt;Parquet, ORC, Avro, JSON, Delta Lake, CSV&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Credentials&lt;/td&gt; &#xA;   &lt;td&gt;Azure Key Vault&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üöÄ Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support streaming features with transformation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support common data sources and sinks. Read more in the &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/main/#%EF%B8%8F-cloud-integrations-and-architecture&#34;&gt;Cloud Integrations and Architecture&lt;/a&gt; part.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support feature store UI, including Lineage and Search functionalities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support a sandbox Feathr environment for better getting started experience&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support online transformation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More Feathr online client libraries such as Java&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support feature versioning&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support feature monitoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support feature data deletion and retention&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üë®‚Äçüë®‚Äçüë¶‚Äçüë¶ Community Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;Build for the community and build by the community. Check out &lt;a href=&#34;https://raw.githubusercontent.com/feathr-ai/feathr/CONTRIBUTING.md&#34;&gt;Community Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üì¢ Slack Channel&lt;/h2&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://feathrai.slack.com&#34;&gt;Slack channel&lt;/a&gt; for questions and discussions (or click the &lt;a href=&#34;https://join.slack.com/t/feathrai/shared_invite/zt-1ffva5u6v-voq0Us7bbKAw873cEzHOSg&#34;&gt;invitation link&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chipsalliance/chisel3</title>
    <updated>2022-11-01T01:59:06Z</updated>
    <id>tag:github.com,2022-11-01:/chipsalliance/chisel3</id>
    <link href="https://github.com/chipsalliance/chisel3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chisel 3: A Modern Hardware Design Language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/docs/src/images/chisel_logo.svg?sanitize=true&#34; alt=&#34;Chisel 3&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;CCC 2022&lt;/h3&gt; &#xA;&lt;p&gt;CCC(Chisel Community Conference) is an annual gathering of Chisel community enthusiasts and technical exchange workshop. With the support of the Chisel development community and RISC-V International, this conference will bring together designers and developers with hands-on experience in Chisel from home and abroad to share cutting-edge results and experiences from both the open source community as well as industry.&lt;/p&gt; &#xA;&lt;p&gt;The recording of CCC 2022 has been uploaded:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8FGnu0Tq3Qk&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=1&#34;&gt;Constellation, a Open-source Chisel NoC Generator for SoCs - Jerry Zhao@UCB BAR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-BUcTwE_URg&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=2&#34;&gt;The formal verification capabilities of chiseltest - Kevin Laeufer@UCB BAR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4vgSrW7Cdkk&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=3&#34;&gt;Chisel Breakdown 03 - Jack Koenig@SiFive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=V3h30s31qfk&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=4&#34;&gt;The Next Generation FIRRTL Compiler is Here! - Prithayan Barua&amp;amp;Hideto Ueno@SiFive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hXaZMQPRXo0&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=5&#34;&gt;Implementing RISC-V Scalar Cryptography/Bitmanip extensions in Chisel - Hongren Zheng@Tsinghua University+PLCT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fPl4eZHh1-M&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=6&#34;&gt;SCIRT: Bridging the Type System Gap for Circuit Generators - Ruikang Wang@Tsinghua University+PLCT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Df1l9h351BM&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=7&#34;&gt;ChiselDB: Mapping Hardware Data Structures to Database Tables for Efficient Data Analysis Jiawei Lin@ICT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FenSOWKBbAw&amp;amp;list=PL02hojk7ZTSek-Zro6Zdj_nDlp6khGssJ&amp;amp;index=8&#34;&gt;From Chisel to Chips in Fully Open-Source - Martin Schoeberl@DTU&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See you next year :)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Constructing Hardware in a Scala Embedded Language&lt;/strong&gt; (&lt;a href=&#34;https://www.chisel-lang.org&#34;&gt;&lt;strong&gt;Chisel&lt;/strong&gt;&lt;/a&gt;) is an open-source hardware description language (HDL) used to describe digital electronics and circuits at the register-transfer level that facilitates &lt;strong&gt;advanced circuit generation and design reuse for both ASIC and FPGA digital logic designs&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Chisel adds hardware construction primitives to the &lt;a href=&#34;https://www.scala-lang.org&#34;&gt;Scala&lt;/a&gt; programming language, providing designers with the power of a modern programming language to write complex, parameterizable circuit generators that produce synthesizable Verilog. This generator methodology enables the creation of re-usable components and libraries, such as the FIFO queue and arbiters in the &lt;a href=&#34;https://www.chisel-lang.org/api/latest/#chisel3.util.package&#34;&gt;Chisel Standard Library&lt;/a&gt;, raising the level of abstraction in design while retaining fine-grained control.&lt;/p&gt; &#xA;&lt;p&gt;For more information on the benefits of Chisel see: &lt;a href=&#34;https://stackoverflow.com/questions/53007782/what-benefits-does-chisel-offer-over-classic-hardware-description-languages&#34;&gt;&#34;What benefits does Chisel offer over classic Hardware Description Languages?&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chisel is powered by &lt;a href=&#34;https://github.com/chipsalliance/firrtl&#34;&gt;FIRRTL (Flexible Intermediate Representation for RTL)&lt;/a&gt;, a hardware compiler framework that performs optimizations of Chisel-generated circuits and supports custom user-defined circuit transformations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#what-does-chisel-code-look-like&#34;&gt;What does Chisel code look like?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#led-blink&#34;&gt;LED blink&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#fir-filter&#34;&gt;FIR Filter&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#bootcamp-interactive-tutorial&#34;&gt;Bootcamp Interactive Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#a-textbook-on-chisel&#34;&gt;A Textbook on Chisel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#build-your-own-chisel-projects&#34;&gt;Build Your Own Chisel Projects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#guide-for-new-contributors&#34;&gt;Guide For New Contributors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#design-verification&#34;&gt;Design Verification&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#useful-resources&#34;&gt;Useful Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#chisel-dev-meeting&#34;&gt;Chisel Dev Meeting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#data-types-overview&#34;&gt;Data Types Overview&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#contributor-documentation&#34;&gt;Contributor Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#useful-resources-for-contributors&#34;&gt;Useful Resources for Contributors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#compiling-and-testing-chisel&#34;&gt;Compiling and Testing Chisel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#running-projects-against-local-chisel&#34;&gt;Running Projects Against Local Chisel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#building-chisel-with-firrtl-in-the-same-sbt-project&#34;&gt;Building Chisel with FIRRTL in the same SBT Project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#chisel3-architecture-overview&#34;&gt;Chisel3 Architecture Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#chisel-sub-projects&#34;&gt;Chisel Sub-Projects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#which-version-should-i-use&#34;&gt;Which version should I use?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#roadmap&#34;&gt;Chisel Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/freechipsproject/chisel3?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/chipsalliance/chisel3.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/freechipsproject/chisel3&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/chipsalliance/chisel3/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://github.com/chipsalliance/chisel3/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/chipsalliance/chisel3.svg?include_prereleases&amp;amp;sort=semver&#34; alt=&#34;GitHub tag (latest SemVer)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://index.scala-lang.org/chipsalliance/chisel3/chisel3&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/chipsalliance/chisel3/chisel3/latest-by-scala-version.svg?color=blue&#34; alt=&#34;Scala version support&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/edu/berkeley/cs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/edu.berkeley.cs/chisel3_2.13?server=https%3A%2F%2Foss.sonatype.org&#34; alt=&#34;Sonatype Snapshots&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/edu.berkeley.cs/chisel3_2.13/latest&#34;&gt;&lt;img src=&#34;https://www.javadoc.io/badge/edu.berkeley.cs/chisel3_2.13.svg?color=blue&amp;amp;label=Scaladoc&#34; alt=&#34;Scaladoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What does Chisel code look like?&lt;/h2&gt; &#xA;&lt;h3&gt;LED blink&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import chisel3._&#xA;import chisel3.util._&#xA;&#xA;class Blinky(freq: Int, startOn: Boolean = false) extends Module {&#xA;  val io = IO(new Bundle {&#xA;    val led0 = Output(Bool())&#xA;  })&#xA;  // Blink LED every second using Chisel built-in util.Counter&#xA;  val led = RegInit(startOn.B)&#xA;  val (_, counterWrap) = Counter(true.B, freq / 2)&#xA;  when(counterWrap) {&#xA;    led := ~led&#xA;  }&#xA;  io.led0 := led&#xA;}&#xA;object Main extends App {&#xA;  // These lines generate the Verilog output&#xA;  println(&#xA;    new (chisel3.stage.ChiselStage).emitVerilog(&#xA;      new Blinky(1000),&#xA;      Array(&#xA;        &#34;--emission-options=disableMemRandomization,disableRegisterRandomization&#34;&#xA;      )&#xA;    )&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Should output the following Verilog:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand!&lt;/summary&gt; &#xA; &lt;pre class=&#34;hljs&#34;&gt;&lt;code&gt;&#xA;   &lt;div&gt;&#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;module&lt;/span&gt; Blinky( &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;input&lt;/span&gt; clock, &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;input&lt;/span&gt; reset, &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;output&lt;/span&gt; io_led0 ); &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;reg&lt;/span&gt; led; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[main.scala 11:20]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;reg&lt;/span&gt; [&#xA;    &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;:&#xA;    &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] counterWrap_value; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 62:40]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;wire&lt;/span&gt; counterWrap_wrap_wrap = counterWrap_value == &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;9&#39;h1f3&lt;/span&gt;; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 74:24]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;wire&lt;/span&gt; [&#xA;    &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;:&#xA;    &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;] &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;_&lt;/span&gt;counterWrap_wrap_value_T_1 = counterWrap_value + &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;9&#39;h1&lt;/span&gt;; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 78:24]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;assign&lt;/span&gt; io_led0 = led; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[main.scala 16:11]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;always&lt;/span&gt; @(&#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;posedge&lt;/span&gt; clock) &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (reset) &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[main.scala 11:20]&lt;/span&gt; led &amp;lt;= &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;1&#39;h0&lt;/span&gt;; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[main.scala 11:20]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (counterWrap_wrap_wrap) &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[main.scala 13:21]&lt;/span&gt; led &amp;lt;= ~led; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[main.scala 14:9]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (reset) &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 62:40]&lt;/span&gt; counterWrap_value &amp;lt;= &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;9&#39;h0&lt;/span&gt;; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 62:40]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (counterWrap_wrap_wrap) &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 88:20]&lt;/span&gt; counterWrap_value &amp;lt;= &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;9&#39;h0&lt;/span&gt;; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 88:28]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;begin&lt;/span&gt; counterWrap_value &amp;lt;= &#xA;    &lt;span class=&#34;hljs-number&#34;&gt;_&lt;/span&gt;counterWrap_wrap_value_T_1; &#xA;    &lt;span class=&#34;hljs-comment&#34;&gt;// @[Counter.scala 78:15]&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &#xA;    &lt;span class=&#34;hljs-keyword&#34;&gt;endmodule&lt;/span&gt; &#xA;   &lt;/div&gt;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;FIR Filter&lt;/h3&gt; &#xA;&lt;p&gt;Consider an FIR filter that implements a convolution operation, as depicted in this block diagram:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/docs/src/images/fir_filter.svg?sanitize=true&#34; width=&#34;512&#34;&gt; &#xA;&lt;p&gt;While Chisel provides similar base primitives as synthesizable Verilog, and &lt;em&gt;could&lt;/em&gt; be used as such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// 3-point moving sum implemented in the style of a FIR filter&#xA;class MovingSum3(bitWidth: Int) extends Module {&#xA;  val io = IO(new Bundle {&#xA;    val in = Input(UInt(bitWidth.W))&#xA;    val out = Output(UInt(bitWidth.W))&#xA;  })&#xA;&#xA;  val z1 = RegNext(io.in)&#xA;  val z2 = RegNext(z1)&#xA;&#xA;  io.out := (io.in * 1.U) + (z1 * 1.U) + (z2 * 1.U)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the power of Chisel comes from the ability to create generators, such as an FIR filter that is defined by the list of coefficients:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Generalized FIR filter parameterized by the convolution coefficients&#xA;class FirFilter(bitWidth: Int, coeffs: Seq[UInt]) extends Module {&#xA;  val io = IO(new Bundle {&#xA;    val in = Input(UInt(bitWidth.W))&#xA;    val out = Output(UInt(bitWidth.W))&#xA;  })&#xA;  // Create the serial-in, parallel-out shift register&#xA;  val zs = Reg(Vec(coeffs.length, UInt(bitWidth.W)))&#xA;  zs(0) := io.in&#xA;  for (i &amp;lt;- 1 until coeffs.length) {&#xA;    zs(i) := zs(i-1)&#xA;  }&#xA;&#xA;  // Do the multiplies&#xA;  val products = VecInit.tabulate(coeffs.length)(i =&amp;gt; zs(i) * coeffs(i))&#xA;&#xA;  // Sum up the products&#xA;  io.out := products.reduce(_ + _)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use and re-use them across designs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val movingSum3Filter = Module(new FirFilter(8, Seq(1.U, 1.U, 1.U)))  // same 3-point moving sum filter as before&#xA;val delayFilter = Module(new FirFilter(8, Seq(0.U, 1.U)))  // 1-cycle delay as a FIR filter&#xA;val triangleFilter = Module(new FirFilter(8, Seq(1.U, 2.U, 3.U, 2.U, 1.U)))  // 5-point FIR filter with a triangle impulse response&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above can be converted to Verilog using &lt;code&gt;ChiselStage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import chisel3.stage.{ChiselStage, ChiselGeneratorAnnotation}&#xA;&#xA;(new chisel3.stage.ChiselStage).execute(&#xA;  Array(&#34;-X&#34;, &#34;verilog&#34;),&#xA;  Seq(ChiselGeneratorAnnotation(() =&amp;gt; new FirFilter(8, Seq(1.U, 1.U, 1.U)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you may generate some Verilog directly for inspection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val verilogString = chisel3.emitVerilog(new FirFilter(8, Seq(0.U, 1.U)))&#xA;println(verilogString)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Bootcamp Interactive Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://mybinder.org/v2/gh/freechipsproject/chisel-bootcamp/master&#34;&gt;&lt;strong&gt;online Chisel Bootcamp&lt;/strong&gt;&lt;/a&gt; is the recommended way to get started with and learn Chisel. &lt;strong&gt;No setup is required&lt;/strong&gt; (it runs in the browser), nor does it assume any prior knowledge of Scala.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/ucb-bar/chisel-tutorial&#34;&gt;&lt;strong&gt;classic Chisel tutorial&lt;/strong&gt;&lt;/a&gt; contains small exercises and runs on your computer.&lt;/p&gt; &#xA;&lt;h3&gt;A Textbook on Chisel&lt;/h3&gt; &#xA;&lt;p&gt;If you like a textbook to learn Chisel and also a bit of digital design in general, you may be interested in reading &lt;a href=&#34;http://www.imm.dtu.dk/~masca/chisel-book.html&#34;&gt;&lt;strong&gt;Digital Design with Chisel&lt;/strong&gt;&lt;/a&gt;. It is available in English, Chinese, Japanese, and Vietnamese.&lt;/p&gt; &#xA;&lt;h3&gt;Build Your Own Chisel Projects&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/SETUP.md&#34;&gt;the setup instructions&lt;/a&gt; for how to set up your environment to build Chisel locally.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;re ready to build your own circuits in Chisel, &lt;strong&gt;we recommend starting from the &lt;a href=&#34;https://github.com/freechipsproject/chisel-template&#34;&gt;Chisel Template&lt;/a&gt; repository&lt;/strong&gt;, which provides a pre-configured project, example design, and testbench. Follow the &lt;a href=&#34;https://github.com/freechipsproject/chisel-template&#34;&gt;chisel-template README&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;If you insist on setting up your own project from scratch, your project needs to depend on both the chisel3-plugin (Scalac plugin) and the chisel3 library. For example, in SBT this could be expressed as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// build.sbt&#xA;scalaVersion := &#34;2.13.8&#34;&#xA;addCompilerPlugin(&#34;edu.berkeley.cs&#34; % &#34;chisel3-plugin&#34; % &#34;3.5.4&#34; cross CrossVersion.full)&#xA;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;chisel3&#34; % &#34;3.5.4&#34;&#xA;// We also recommend using chiseltest for writing unit tests&#xA;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;chiseltest&#34; % &#34;0.5.4&#34; % &#34;test&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Guide For New Contributors&lt;/h3&gt; &#xA;&lt;p&gt;If you are trying to make a contribution to this project, please read &lt;a href=&#34;https://github.com/chipsalliance/chisel3/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Design Verification&lt;/h3&gt; &#xA;&lt;p&gt;These simulation-based verification tools are available for Chisel:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ucb-bar/chiseltest&#34;&gt;&lt;strong&gt;chiseltest&lt;/strong&gt;&lt;/a&gt; is the batteries-included testing and formal verification library for Chisel-based RTL designs and a replacement for the former PeekPokeTester, providing the same base constructs but with a streamlined interface and concurrency support with &lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; with internal and Verilator integration for simulations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Useful Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freechipsproject/chisel-cheatsheet/releases/latest/download/chisel_cheatsheet.pdf&#34;&gt;&lt;strong&gt;Cheat Sheet&lt;/strong&gt;&lt;/a&gt;, a 2-page reference of the base Chisel syntax and libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.chisel-lang.org/api/latest/chisel3/index.html&#34;&gt;&lt;strong&gt;ScalaDoc&lt;/strong&gt;&lt;/a&gt;, a listing, description, and examples of the functionality exposed by Chisel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/freechipsproject/chisel3&#34;&gt;&lt;strong&gt;Gitter&lt;/strong&gt;&lt;/a&gt;, where you can ask questions or discuss anything Chisel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.chisel-lang.org&#34;&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/freechipsproject/www.chisel-lang.org/&#34;&gt;source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scastie.scala-lang.org/O3LqeVH7SWyIxD7bZRH8hA&#34;&gt;&lt;strong&gt;Scastie (3.5.3)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.asic-world.com/verilog/veritut.html&#34;&gt;&lt;strong&gt;asic-world&lt;/strong&gt;&lt;/a&gt; If you aren&#39;t familiar with verilog, this is a good tutorial.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are migrating from Chisel2, see &lt;a href=&#34;https://www.chisel-lang.org/chisel3/chisel3-vs-chisel2.html&#34;&gt;the migration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Chisel Dev Meeting&lt;/h3&gt; &#xA;&lt;p&gt;Chisel/FIRRTL development meetings happen every Monday from 1100--1200 PT.&lt;/p&gt; &#xA;&lt;p&gt;Call-in info and meeting notes are available &lt;a href=&#34;https://docs.google.com/document/d/1BLP2DYt59DqI-FgFCcjw8Ddl4K-WU0nHmQu0sZ_wAGo/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Data Types Overview&lt;/h3&gt; &#xA;&lt;p&gt;These are the base data types for defining circuit components:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/docs/src/images/type_hierarchy.svg?sanitize=true&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributor Documentation&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to get started contributing to Chisel itself, including how to test your version locally against other projects that pull in Chisel using &lt;a href=&#34;https://www.scala-sbt.org/1.x/docs/Library-Dependencies.html&#34;&gt;sbt&#39;s managed dependencies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Useful Resources for Contributors&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/#useful-resources&#34;&gt;Useful Resources&lt;/a&gt; for users are also helpful for contributors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/114YihixFBPCfUnv1inqAL8UjsiWfcNWdPHX7SeqlRQc&#34;&gt;&lt;strong&gt;Chisel Breakdown Slides&lt;/strong&gt;&lt;/a&gt;, an introductory talk about Chisel&#39;s internals&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compiling and Testing Chisel&lt;/h3&gt; &#xA;&lt;p&gt;You must first install required dependencies to build Chisel locally, please see &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/SETUP.md&#34;&gt;the setup instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Clone and build the Chisel library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/chipsalliance/chisel3.git&#xA;cd chisel3&#xA;sbt compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run the following unit tests, you will need several tools on your &lt;code&gt;PATH&lt;/code&gt;, namely &lt;a href=&#34;https://www.veripool.org/verilator/&#34;&gt;verilator&lt;/a&gt;, &lt;a href=&#34;http://www.clifford.at/yosys/&#34;&gt;yosys&lt;/a&gt;, &lt;a href=&#34;https://github.com/chipsalliance/espresso&#34;&gt;espresso&lt;/a&gt;, and &lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;z3&lt;/a&gt;. Check that each is installed on your &lt;code&gt;PATH&lt;/code&gt; by running &lt;code&gt;which verilator&lt;/code&gt; and so on.&lt;/p&gt; &#xA;&lt;p&gt;If the compilation succeeded and the dependencies noted above are installed, you can then run the included unit tests by invoking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Projects Against Local Chisel&lt;/h3&gt; &#xA;&lt;p&gt;To use the development version of Chisel (&lt;code&gt;master&lt;/code&gt; branch), you will need to build from source and &lt;code&gt;publishLocal&lt;/code&gt;. The repository version can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/build.sbt&#34;&gt;build.sbt&lt;/a&gt; file. As of the time of writing it was:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;version := &#34;3.6-SNAPSHOT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To publish your version of Chisel to the local Ivy (sbt&#39;s dependency manager) repository, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbt publishLocal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compiled version gets placed in &lt;code&gt;~/.ivy2/local/edu.berkeley.cs/&lt;/code&gt;. If you need to un-publish your local copy of Chisel, remove the directory generated in &lt;code&gt;~/.ivy2/local/edu.berkeley.cs/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to have your projects use this version of Chisel, you should update the &lt;code&gt;libraryDependencies&lt;/code&gt; setting in your project&#39;s build.sbt file to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;edu.berkeley.cs&#34; %% &#34;chisel3&#34; % &#34;3.6-SNAPSHOT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building Chisel with FIRRTL in the same SBT Project&lt;/h3&gt; &#xA;&lt;p&gt;While we recommend using the library dependency approach as described above, it is possible to build Chisel and FIRRTL in a single SBT project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caveats&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This only works for the &#34;main&#34; configuration; you cannot build the Chisel tests this way because &lt;code&gt;treadle&lt;/code&gt; is only supported as a library dependency.&lt;/li&gt; &#xA; &lt;li&gt;Do not &lt;code&gt;publishLocal&lt;/code&gt; when building this way. The published artifact will be missing the FIRRTL dependency.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This works by using &lt;a href=&#34;http://eed3si9n.com/hot-source-dependencies-using-sbt-sriracha&#34;&gt;sbt-sriracha&lt;/a&gt;, an SBT plugin for toggling between source and library dependencies. It provides two JVM system properties that, when set, will tell SBT to include FIRRTL as a source project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt.sourcemode&lt;/code&gt; - when set to true, SBT will look for FIRRTL in the workspace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt.workspace&lt;/code&gt; - sets the root directory of the workspace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# From root of this repo&#xA;git clone git@github.com:chipsalliance/firrtl.git&#xA;sbt -Dsbt.sourcemode=true -Dsbt.workspace=$PWD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is primarily useful for building projects that themselves want to include Chisel as a source dependency. As an example, see &lt;a href=&#34;https://github.com/chipsalliance/rocket-chip&#34;&gt;Rocket Chip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Chisel3 Architecture Overview&lt;/h3&gt; &#xA;&lt;p&gt;The Chisel3 compiler consists of these main parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The frontend&lt;/strong&gt;, &lt;code&gt;chisel3.*&lt;/code&gt;, which is the publicly visible &#34;API&#34; of Chisel and what is used in Chisel RTL. These just add data to the...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Builder&lt;/strong&gt;, &lt;code&gt;chisel3.internal.Builder&lt;/code&gt;, which maintains global state (like the currently open Module) and contains commands, generating...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The intermediate data structures&lt;/strong&gt;, &lt;code&gt;chisel3.firrtl.*&lt;/code&gt;, which are syntactically very similar to Firrtl. Once the entire circuit has been elaborated, the top-level object (a &lt;code&gt;Circuit&lt;/code&gt;) is then passed to...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Firrtl emitter&lt;/strong&gt;, &lt;code&gt;chisel3.firrtl.Emitter&lt;/code&gt;, which turns the intermediate data structures into a string that can be written out into a Firrtl file for further processing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also included is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The standard library&lt;/strong&gt; of circuit generators, &lt;code&gt;chisel3.util.*&lt;/code&gt;. These contain commonly used interfaces and constructors (like &lt;code&gt;Decoupled&lt;/code&gt;, which wraps a signal with a ready-valid pair) as well as fully parameterizable circuit generators (like arbiters and multiplexors).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chisel Stage&lt;/strong&gt;, &lt;code&gt;chisel3.stage.*&lt;/code&gt;, which contains compilation and test functions that are invoked in the standard Verilog generation and simulation testing infrastructure. These can also be used as part of custom flows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chisel Sub-Projects&lt;/h3&gt; &#xA;&lt;p&gt;Chisel consists of 4 Scala projects; each is its own separate compilation unit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/core&#34;&gt;&lt;code&gt;core&lt;/code&gt;&lt;/a&gt; is the bulk of the source code of Chisel, depends on &lt;code&gt;macros&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/src/main&#34;&gt;&lt;code&gt;src/main&lt;/code&gt;&lt;/a&gt; is the &#34;main&#34; that brings it all together and includes a &lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/src/main/scala/chisel3/util&#34;&gt;&lt;code&gt;util&lt;/code&gt;&lt;/a&gt; library, which depends on &lt;code&gt;core&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/plugin&#34;&gt;&lt;code&gt;plugin&lt;/code&gt;&lt;/a&gt; is the compiler plugin, no internal dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipsalliance/chisel3/master/macros&#34;&gt;&lt;code&gt;macros&lt;/code&gt;&lt;/a&gt; is most of the macros used in Chisel, no internal dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code that touches lots of APIs that are private to the &lt;code&gt;chisel3&lt;/code&gt; package should belong in &lt;code&gt;core&lt;/code&gt;, while code that is pure Chisel should belong in &lt;code&gt;src/main&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Which version should I use?&lt;/h3&gt; &#xA;&lt;p&gt;We encourage Chisel users (as opposed to Chisel developers), to use the latest release version of Chisel. This &lt;a href=&#34;https://github.com/freechipsproject/chisel-template&#34;&gt;chisel-template&lt;/a&gt; repository is kept up-to-date, depending on the most recent version of Chisel. The recommended version is also captured near the top of this README, and in the &lt;a href=&#34;https://github.com/chipsalliance/chisel3/releases&#34;&gt;Github releases&lt;/a&gt; section of this repo. If you encounter an issue with a released version of Chisel, please file an issue on GitHub mentioning the Chisel version and provide a simple test case (if possible). Try to reproduce the issue with the associated latest minor release (to verify that the issue hasn&#39;t been addressed).&lt;/p&gt; &#xA;&lt;p&gt;For more information on our versioning policy and what versions of the various Chisel ecosystem projects work together, see &lt;a href=&#34;https://www.chisel-lang.org/chisel3/docs/appendix/versioning.html&#34;&gt;Chisel Project Versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re developing a Chisel library (or &lt;code&gt;chisel3&lt;/code&gt; itself), you&#39;ll probably want to work closer to the tip of the development trunk. By default, the master branches of the chisel repositories are configured to build and publish their version of the code as &lt;code&gt;Z.Y-SNAPSHOT&lt;/code&gt;. Updated SNAPSHOTs are publised on every push to master. You are encouraged to do your development against the latest SNAPSHOT, but note that neither API nor ABI compatibility is guaranteed so your code may break at any time.&lt;/p&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;p&gt;See [ROADMAP.md].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lichess-org/lila</title>
    <updated>2022-11-01T01:59:06Z</updated>
    <id>tag:github.com,2022-11-01:/lichess-org/lila</id>
    <link href="https://github.com/lichess-org/lila" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ôû lichess.org: the forever free, adless and open source chess server ‚ôû&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://lichess.org&#34;&gt;lichess.org&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lichess-org/lila/actions?query=workflow%3A%22Build+server%22&#34;&gt;&lt;img src=&#34;https://github.com/lichess-org/lila/workflows/Build%20server/badge.svg?sanitize=true&#34; alt=&#34;Build server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lichess-org/lila/actions?query=workflow%3A%22Build+assets%22&#34;&gt;&lt;img src=&#34;https://github.com/lichess-org/lila/workflows/Build%20assets/badge.svg?sanitize=true&#34; alt=&#34;Build assets&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/lichess&#34;&gt;&lt;img src=&#34;https://d322cqt584bo4o.cloudfront.net/lichess/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/lichess&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-%40lichess-blue.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/lichess-org/lila/master/public/images/home-bicolor.png&#34; alt=&#34;Lichess homepage&#34; title=&#34;Lichess comes with light and dark theme, this screenshot shows both.&#34;&gt; &#xA;&lt;p&gt;Lila (li[chess in sca]la) is a free online chess game server focused on &lt;a href=&#34;https://lichess.org/games&#34;&gt;realtime&lt;/a&gt; gameplay and ease of use.&lt;/p&gt; &#xA;&lt;p&gt;It features a &lt;a href=&#34;https://lichess.org/games/search&#34;&gt;search engine&lt;/a&gt;, &lt;a href=&#34;https://lichess.org/ief49lif&#34;&gt;computer analysis&lt;/a&gt; distributed with &lt;a href=&#34;https://github.com/lichess-org/fishnet&#34;&gt;fishnet&lt;/a&gt;, &lt;a href=&#34;https://lichess.org/tournament&#34;&gt;tournaments&lt;/a&gt;, &lt;a href=&#34;https://lichess.org/simul&#34;&gt;simuls&lt;/a&gt;, &lt;a href=&#34;https://lichess.org/forum&#34;&gt;forums&lt;/a&gt;, &lt;a href=&#34;https://lichess.org/team&#34;&gt;teams&lt;/a&gt;, &lt;a href=&#34;https://lichess.org/training&#34;&gt;tactic trainer&lt;/a&gt;, a &lt;a href=&#34;https://lichess.org/mobile&#34;&gt;mobile app&lt;/a&gt;, and a &lt;a href=&#34;https://lichess.org/study&#34;&gt;shared analysis board&lt;/a&gt;. The UI is available in more than &lt;a href=&#34;https://crowdin.com/project/lichess&#34;&gt;130 languages&lt;/a&gt; thanks to the community.&lt;/p&gt; &#xA;&lt;p&gt;Lichess is written in &lt;a href=&#34;https://www.scala-lang.org/&#34;&gt;Scala 2.13&lt;/a&gt;, and relies on the &lt;a href=&#34;https://www.playframework.com/&#34;&gt;Play 2.8&lt;/a&gt; framework. &lt;a href=&#34;https://com-lihaoyi.github.io/scalatags/&#34;&gt;scalatags&lt;/a&gt; is used for templating. Pure chess logic is contained in the &lt;a href=&#34;https://github.com/lichess-org/scalachess&#34;&gt;scalachess&lt;/a&gt; submodule. The server is fully asynchronous, making heavy use of Scala Futures and &lt;a href=&#34;https://akka.io&#34;&gt;Akka streams&lt;/a&gt;. WebSocket connections are handled by a &lt;a href=&#34;https://github.com/lichess-org/lila-ws&#34;&gt;separate server&lt;/a&gt; that communicates using &lt;a href=&#34;https://redis.io/&#34;&gt;redis&lt;/a&gt;. Lichess talks to &lt;a href=&#34;https://stockfishchess.org/&#34;&gt;Stockfish&lt;/a&gt; deployed in an &lt;a href=&#34;https://github.com/lichess-org/fishnet&#34;&gt;AI cluster&lt;/a&gt; of donated servers. It uses &lt;a href=&#34;https://www.mongodb.com&#34;&gt;MongoDB&lt;/a&gt; to store more than 1.7 billion games, which are indexed by &lt;a href=&#34;https://github.com/elastic/elasticsearch&#34;&gt;elasticsearch&lt;/a&gt;. HTTP requests and WebSocket connections can be proxied by &lt;a href=&#34;https://nginx.org&#34;&gt;nginx&lt;/a&gt;. The web client is written in &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; and &lt;a href=&#34;https://github.com/snabbdom/snabbdom&#34;&gt;snabbdom&lt;/a&gt;, using &lt;a href=&#34;https://sass-lang.com/&#34;&gt;Sass&lt;/a&gt; to generate CSS. The &lt;a href=&#34;https://lichess.org/blog&#34;&gt;blog&lt;/a&gt; uses a free open content plan from &lt;a href=&#34;https://prismic.io&#34;&gt;prismic.io&lt;/a&gt;. All rated games are published in a &lt;a href=&#34;https://database.lichess.org&#34;&gt;free PGN database&lt;/a&gt;. Browser testing done with &lt;a href=&#34;https://www.browserstack.com&#34;&gt;Browserstack&lt;/a&gt;. Proxy detection done with &lt;a href=&#34;https://www.ip2location.com/database/ip2proxy&#34;&gt;IP2Proxy database&lt;/a&gt;. Please help us &lt;a href=&#34;https://crowdin.com/project/lichess&#34;&gt;translate Lichess with Crowdin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://lichess.org/source&#34;&gt;lichess.org/source&lt;/a&gt; for a list of repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/lichess&#34;&gt;Join us on Discord&lt;/a&gt; for more info. Use &lt;a href=&#34;https://github.com/lichess-org/lila/issues&#34;&gt;GitHub issues&lt;/a&gt; for bug reports and feature requests.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./lila # thin wrapper around sbt&#xA;run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Wiki describes &lt;a href=&#34;https://github.com/lichess-org/lila/wiki/Lichess-Development-Onboarding&#34;&gt;how to setup a development environment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;HTTP API&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to use the &lt;a href=&#34;https://lichess.org/api&#34;&gt;Lichess API&lt;/a&gt; in your applications and websites.&lt;/p&gt; &#xA;&lt;h2&gt;Supported browsers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chromium / Chrome&lt;/td&gt; &#xA;   &lt;td&gt;last 10&lt;/td&gt; &#xA;   &lt;td&gt;Full support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Firefox&lt;/td&gt; &#xA;   &lt;td&gt;63+&lt;/td&gt; &#xA;   &lt;td&gt;Full support (fastest local analysis since FF 79)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Edge&lt;/td&gt; &#xA;   &lt;td&gt;91+&lt;/td&gt; &#xA;   &lt;td&gt;Full support (reasonable support for 17+)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Opera&lt;/td&gt; &#xA;   &lt;td&gt;55+&lt;/td&gt; &#xA;   &lt;td&gt;Reasonable support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Safari&lt;/td&gt; &#xA;   &lt;td&gt;11.1+&lt;/td&gt; &#xA;   &lt;td&gt;Reasonable support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Older browsers (including any version of Internet Explorer) will not work. For your own sake, please upgrade. Security and performance, think about it!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Lila is licensed under the GNU Affero General Public License 3 or any later version at your choice with an exception for Highcharts. See &lt;a href=&#34;https://github.com/lichess-org/lila/raw/master/COPYING.md&#34;&gt;copying&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Production architecture (as of July 2022)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lichess-org/lila/master/public/images/architecture.png&#34; alt=&#34;Lichess production server architecture diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://lichess.org/thanks&#34;&gt;lichess.org/thanks&lt;/a&gt; and the contributors here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lichess-org/lila/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=lichess-org/lila&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Competence development program&lt;/h2&gt; &#xA;&lt;p&gt;Lichess would like to support its contributors in their competence development by covering costs of relevant training materials and activities. This is a small way to further empower contributors who have given their time to Lichess and to enable or improve additional contributions to Lichess in the future. For more information, including how to apply, check &lt;a href=&#34;https://lichess.org/page/competence-development&#34;&gt;Competence Development for Lichess contributors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>