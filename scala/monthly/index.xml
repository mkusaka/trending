<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-01T02:22:09Z</updated>
  <subtitle>Monthly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/incubator-pekko</title>
    <updated>2023-06-01T02:22:09Z</updated>
    <id>tag:github.com,2023-06-01:/apache/incubator-pekko</id>
    <link href="https://github.com/apache/incubator-pekko" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build highly concurrent, distributed, and resilient message-driven applications using Java/Scala&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Pekko&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/incubator-pekko/actions/workflows/nightly-builds.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/incubator-pekko/actions/workflows/nightly-builds.yml/badge.svg?sanitize=true&#34; alt=&#34;Nightly Builds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/incubator-pekko/actions/workflows/nightly-builds-aeron.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/incubator-pekko/actions/workflows/nightly-builds-aeron.yml/badge.svg?branch=main&#34; alt=&#34;Nightly Aeron Tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apache Pekko is an open-source framework for building applications that are concurrent, distributed, resilient and elastic. Pekko uses the Actor Model to provide more intuitive high-level abstractions for concurrency. Using these abstractions, Pekko also provides libraries for persistence, streams, HTTP, and more.&lt;/p&gt; &#xA;&lt;p&gt;Pekko is a fork of &lt;a href=&#34;https://github.com/akka/akka&#34;&gt;Akka&lt;/a&gt; 2.6.x, prior to the Akka project&#39;s adoption of the Business Source License.&lt;/p&gt; &#xA;&lt;h2&gt;Reference Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://pekko.apache.org&#34;&gt;https://pekko.apache.org&lt;/a&gt; for the documentation including the API docs. The docs for all the Apache Pekko modules can be found there.&lt;/p&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you have installed a Java Development Kit (JDK) version 11 or later.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt; installed and using this JDK.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you also have Java 8 installed (JDK or JRE).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://graphviz.gitlab.io/download/&#34;&gt;Graphviz&lt;/a&gt; is needed for the scaladoc generation build task, which is part of the release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the Build&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a command window and change directory to your preferred base directory&lt;/li&gt; &#xA; &lt;li&gt;Use git to clone the &lt;a href=&#34;https://github.com/apache/incubator-pekko&#34;&gt;repo&lt;/a&gt; or download a source release from &lt;a href=&#34;https://pekko.apache.org&#34;&gt;https://pekko.apache.org&lt;/a&gt; (and unzip or untar it, as appropriate)&lt;/li&gt; &#xA; &lt;li&gt;Change directory to the directory where you installed the source (you should have a file called &lt;code&gt;build.sbt&lt;/code&gt; in this directory)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt compile&lt;/code&gt; compiles the main source for project default version of Scala (2.13) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sbt +compile&lt;/code&gt; will compile for all supported versions of Scala&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt test&lt;/code&gt; will compile the code and run the unit tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt package&lt;/code&gt; will build the jars &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the jars will built into target dirs of the various modules&lt;/li&gt; &#xA;   &lt;li&gt;for the the &#39;actor&#39; module, the jar will be built to &lt;code&gt;actor/target/scala-2.13/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt publishLocal&lt;/code&gt; will push the jars to your local Apache Ivy repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt publishM2&lt;/code&gt; will push the jars to your local Apache Maven repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt docs/paradox&lt;/code&gt; will build the docs (the ones describing the module features) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Requires Java 11 minimum&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sbt docs/paradoxBrowse&lt;/code&gt; does the same but will open the docs in your browser when complete&lt;/li&gt; &#xA;   &lt;li&gt;the &lt;code&gt;index.html&lt;/code&gt; file will appear in &lt;code&gt;target/paradox/site/main/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt unidoc&lt;/code&gt; will build the Javadocs for all the modules and load them to one place (may require Graphviz, see Prerequisites above) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the &lt;code&gt;index.html&lt;/code&gt; file will appear in &lt;code&gt;target/scala-2.13/unidoc/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sbt sourceDistGenerate&lt;/code&gt; will generate source release to &lt;code&gt;target/dist/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The version number that appears in filenames and docs is derived, by default. The derived version contains the most git commit id or the date/time (if the directory is not under git control). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can set the version number explicitly when running sbt commands &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;eg &lt;code&gt;sbt &#34;set ThisBuild / version := \&#34;1.0.0\&#34;; sourceDistGenerate&#34;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Or you can add a file called &lt;code&gt;version.sbt&lt;/code&gt; to the same directory that has the &lt;code&gt;build.sbt&lt;/code&gt; containing something like &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;ThisBuild / version := &#34;1.0.0&#34;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;There are several ways to interact with the Pekko community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/incubator-pekko/discussions&#34;&gt;GitHub discussions&lt;/a&gt;: for questions and general discussion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lists.apache.org/list.html?dev@pekko.apache.org&#34;&gt;Pekko dev mailing list&lt;/a&gt;: for Pekko development discussions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lists.apache.org/list.html?users@pekko.apache.org&#34;&gt;Pekko users mailing list&lt;/a&gt;: for Pekko user discussions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/incubator-pekko/issues&#34;&gt;GitHub issues&lt;/a&gt;: for bug reports and feature requests. Please search the existing issues before creating new ones. If you are unsure whether you have found a bug, consider asking in GitHub discussions or the mailing list first.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very welcome. If you have an idea on how to improve Pekko, don&#39;t hesitate to create an issue or submit a pull request.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/apache/incubator-pekko/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on the development workflow and how to create your pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Apache Pekko is governed by the &lt;a href=&#34;https://www.apache.org/foundation/policies/conduct.html&#34;&gt;Apache code of conduct&lt;/a&gt;. By participating in this project you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache Pekko is available under the Apache License, version 2.0. See &lt;a href=&#34;https://github.com/apache/incubator-pekko/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>liftmodules/jta</title>
    <updated>2023-06-01T02:22:09Z</updated>
    <id>tag:github.com,2023-06-01:/liftmodules/jta</id>
    <link href="https://github.com/liftmodules/jta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lift Java Transaction API integration&lt;/p&gt;&lt;hr&gt;&lt;p&gt;h1. Lift JTA Transaction API&lt;/p&gt; &#xA;&lt;p&gt;To include this module in your Lift project, update your &lt;code&gt;libraryDependencies&lt;/code&gt; in &lt;code&gt;build.sbt&lt;/code&gt; to include:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Lift 2.6.x&lt;/em&gt; for Scala 2.9 and 2.10:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;    &#34;net.liftmodules&#34; %% &#34;jpa_2.6&#34; % &#34;1.2&#34;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Lift 2.5.x&lt;/em&gt; for Scala 2.9 and 2.10:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;    &#34;net.liftmodules&#34; %% &#34;jpa_2.5&#34; % &#34;1.2&#34;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Lift 3.0.x&lt;/em&gt; for Scala 2.10:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;    &#34;net.liftmodules&#34; %% &#34;jpa_3.0&#34; % &#34;1.2-SNAPSHOT&#34;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;The semantics are the same as used in the EJB spec. E.g. Required, RequiresNew, Mandatory, Supports, Never. All these are exposed as monadic objects and high-order functions in the TransactionContext object.&lt;/p&gt; &#xA;&lt;p&gt;The implementation is hooked into the Lift&#39;s JPA implementation. Check the ScalaDoc (or the source) for the documentation on usage, semantics etc.&lt;/p&gt; &#xA;&lt;p&gt;There are two versions of the API, one monadic and one using high-order functions.&lt;/p&gt; &#xA;&lt;p&gt;Note: The module package changed from net.liftweb.transaction to net.liftmodules.transaction in May 2012. Please consider this when referencing documentation written before that date.&lt;/p&gt; &#xA;&lt;p&gt;h3. Monadic API&lt;/p&gt; &#xA;&lt;pre&gt;&#xA; for {&#xA;   ctx &amp;lt;- TransactionContext.Required&#xA;   entity &amp;lt;- updatedEntities&#xA;   if !ctx.isRollbackOnly&#xA; } {&#xA;   // transactional stuff&#xA;   ctx.getEntityManager.merge(entity)&#xA; }&#xA;&lt;/pre&gt; &#xA;&lt;pre&gt;&#xA;val users = for {&#xA;   ctx &amp;lt;- TransactionContext.RequiresNew&#xA;   name &amp;lt;- userNames&#xA; } yield {&#xA;   // transactional stuff&#xA;   val query = ctx.getEntityManager.createNamedQuery(&#34;findUserByName&#34;)&#xA;   query.setParameter(&#34;userName&#34;, name)&#xA;   query.getSingleResult&#xA; }&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;h3. High-order functions API&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;TransactionContext.withTxRequired {&#xA;    ... // REQUIRED semantics&#xA;&#xA;  TransactionContext.withTxRequiresNew {&#xA;    ... // REQUIRES_NEW semantics&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;h2. Configuration&lt;/p&gt; &#xA;&lt;p&gt;The configuration is done in the persistence.xml file + the jta.properties. Sample configuration files can be found in the src/main/resources directory. Here are the essential configuration options in the JPA persistence.xml file:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;&#xA; &lt;persistence xmlns=&#34;http://java.sun.com/xml/ns/persistence&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:schemalocation=&#34;http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd&#34; version=&#34;1.0&#34;&gt;&#xA;  &#xA;  &lt;persistence-unit name=&#34;LiftPersistenceUnit&#34; transaction-type=&#34;JTA&#34;&gt; &#xA;   &lt;provider&gt;&#xA;    org.hibernate.ejb.HibernatePersistence&#xA;   &lt;/provider&gt; &#xA;   &lt;mapping-file&gt;&#xA;    ...&#xA;   &lt;/mapping-file&gt; &#xA;   &lt;class&gt;&#xA;    ...&#xA;   &lt;/class&gt; &#xA;   &lt;properties&gt; &#xA;    &lt;property name=&#34;hibernate.transaction.manager_lookup_class&#34; value=&#34;net.modules.transaction.hibernate.LiftTransactionManagerLookup&#34; /&gt; &#xA;   &lt;/properties&gt; &#xA;  &lt;/persistence-unit&gt;&#xA;&#xA; &lt;/persistence&gt;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;h2. TODOs&lt;/p&gt; &#xA;&lt;p&gt;Currently it is hard-coded to use the Atomikos Transaction library and the Hibernate JPA implementation. This will have to be configurable + some other options as well. See the TODOs in the code.&lt;/p&gt; &#xA;&lt;p&gt;h1. Jenkins&lt;/p&gt; &#xA;&lt;p&gt;The Jenkins build is triggered on a push to master. The server is at &lt;a href=&#34;https://liftmodules.ci.cloudbees.com/job/jta/&#34;&gt;https://liftmodules.ci.cloudbees.com/job/jta/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>akka/akka-http</title>
    <updated>2023-06-01T02:22:09Z</updated>
    <id>tag:github.com,2023-06-01:/akka/akka-http</id>
    <link href="https://github.com/akka/akka-http" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Streaming-first HTTP server/module of Akka&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Akka HTTP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://index.scala-lang.org/akka/akka-http/akka-http-core&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/akka/akka-http/akka-http-core/latest-by-scala-version.svg?sanitize=true&#34; alt=&#34;akka-http-core Scala version support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Akka HTTP modules implement a full server- and client-side HTTP stack on top of akka-actor and akka-stream. It&#39;s not a web-framework but rather a more general toolkit for providing and consuming HTTP-based services. While interaction with a browser is of course also in scope it is not the primary focus of Akka HTTP.&lt;/p&gt; &#xA;&lt;p&gt;Akka HTTP follows a rather open design and many times offers several different API levels for &#34;doing the same thing&#34;. You get to pick the API level of abstraction that is most suitable for your application. This means that, if you have trouble achieving something using a high-level API, there&#39;s a good chance that you can get it done with a low-level API, which offers more flexibility but might require you to write more application code.&lt;/p&gt; &#xA;&lt;p&gt;Learn more at &lt;a href=&#34;https://akka.io/&#34;&gt;akka.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation is available at &lt;a href=&#34;https://doc.akka.io/docs/akka-http/current/&#34;&gt;doc.akka.io&lt;/a&gt;, for &lt;a href=&#34;https://doc.akka.io/docs/akka-http/current/scala/http/&#34;&gt;Scala&lt;/a&gt; and &lt;a href=&#34;https://doc.akka.io/docs/akka-http/current/java/http/&#34;&gt;Java&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;You can join these groups and chats to discuss and ask Akka related questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Forums: &lt;a href=&#34;https://discuss.akka.io&#34;&gt;discuss.akka.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat room about &lt;em&gt;using&lt;/em&gt; Akka HTTP: &lt;a href=&#34;https://gitter.im/akka/akka&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter%3A-akka%2Fakka-blue.svg?style=flat-square&#34; alt=&#34;gitter: akka/akka&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Q&amp;amp;A: &lt;a href=&#34;https://stackoverflow.com/questions/tagged/akka-http&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow%3A-akka--http-blue.svg?style=flat-square&#34; alt=&#34;stackoverflow: #akka-http&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue tracker: &lt;a href=&#34;https://github.com/akka/akka-http/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github%3A-issues-blue.svg?style=flat-square&#34; alt=&#34;github: akka/akka-http&#34;&gt;&lt;/a&gt; (Please use the issue tracker for bugs and reasonable feature requests. Please ask usage questions on the other channels.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of our forums, chat rooms, and issue trackers are governed by our &lt;a href=&#34;https://www.lightbend.com/conduct&#34;&gt;Code Of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition to that, you may enjoy following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://akka.io/blog/news-archive.html&#34;&gt;news&lt;/a&gt; section of the page, which is updated whenever a new version is released&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://akka.io/blog&#34;&gt;Akka Team Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/akkateam&#34;&gt;@akkateam&lt;/a&gt; on Twitter&lt;/li&gt; &#xA; &lt;li&gt;Projects built with Akka HTTP: &lt;a href=&#34;https://index.scala-lang.org/search?q=dependencies:akka/akka-http*&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/count.svg?q=dependencies:akka/akka-http*&amp;amp;subject=scaladex:&amp;amp;color=blue&amp;amp;style=flat-square&#34; alt=&#34;Built with Akka HTTP&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are &lt;em&gt;very&lt;/em&gt; welcome!&lt;/p&gt; &#xA;&lt;p&gt;If you see an issue that you&#39;d like to see fixed, the best way to make it happen is to help out by submitting a pull request. For ideas of where to contribute, &lt;a href=&#34;https://github.com/akka/akka-http/labels/help%20wanted&#34;&gt;tickets marked as &#34;help wanted&#34;&lt;/a&gt; are a good starting point.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/akka/akka-http/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more details about the workflow, and general hints on how to prepare your pull request. You can also ask for clarifications or guidance in GitHub issues directly, or in the &lt;a href=&#34;https://gitter.im/akka/dev&#34;&gt;akka/dev&lt;/a&gt; chat if a more real-time communication would be of benefit.&lt;/p&gt; &#xA;&lt;p&gt;A chat room is available for all questions related to &lt;em&gt;developing and contributing&lt;/em&gt; to Akka: &lt;a href=&#34;https://gitter.im/akka/dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter%3A-akka%2Fdev-blue.svg?style=flat-square&#34; alt=&#34;gitter: akka/dev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Maintenance&lt;/h2&gt; &#xA;&lt;p&gt;This project is maintained by Lightbend&#39;s core Akka Team as well as the extended Akka HTTP Team, consisting of excellent and experienced developers who have shown their dedication and knowledge about HTTP and the codebase. This team may grow dynamically, and it is possible to propose new members to it.&lt;/p&gt; &#xA;&lt;p&gt;Joining the extended team in such form gives you, in addition to street-cred, of course committer rights to this repository as well as higher impact onto the roadmap of the project. Come and join us!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Akka HTTP is licensed under the Business Source License 1.1, see LICENSE.txt.&lt;/p&gt;</summary>
  </entry>
</feed>