<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-01T02:21:46Z</updated>
  <subtitle>Monthly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OpenXiangShan/XiangShan</title>
    <updated>2023-07-01T02:21:46Z</updated>
    <id>tag:github.com,2023-07-01:/OpenXiangShan/XiangShan</id>
    <link href="https://github.com/OpenXiangShan/XiangShan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source high-performance RISC-V processor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XiangShan&lt;/h1&gt; &#xA;&lt;p&gt;XiangShan (香山) is an open-source high-performance RISC-V processor project.&lt;/p&gt; &#xA;&lt;p&gt;中文说明&lt;a href=&#34;https://raw.githubusercontent.com/OpenXiangShan/XiangShan/master/readme.zh-cn.md&#34;&gt;在此&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2020-2022 by Institute of Computing Technology, Chinese Academy of Sciences.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2020-2022 by Peng Cheng Laboratory.&lt;/p&gt; &#xA;&lt;h2&gt;Docs and slides&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan-doc&#34;&gt;XiangShan-doc&lt;/a&gt; is our official documentation repository. It contains design spec., technical slides, tutorial and more.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Micro-architecture documentation of XiangShan has been published. Please check out &lt;a href=&#34;https://xiangshan-doc.readthedocs.io&#34;&gt;https://xiangshan-doc.readthedocs.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;h3&gt;MICRO 2022: Towards Developing High Performance RISC-V Processors Using Agile Methodology&lt;/h3&gt; &#xA;&lt;p&gt;Our paper introduces XiangShan and the practice of agile development methodology on high performance RISC-V processors. It covers some representative tools we have developed and used to accelerate the chip development process, including design, functional verification, debugging, performance validation, etc. This paper is awarded all three available badges for artifact evaluation (Available, Functional, and Reproduced).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/OpenXiangShan/XiangShan-doc/raw/main/publications/images/artifacts_available_dl.jpg&#34; alt=&#34;Artifacts Available&#34;&gt; &lt;img src=&#34;https://github.com/OpenXiangShan/XiangShan-doc/raw/main/publications/images/artifacts_evaluated_functional_dl.jpg&#34; alt=&#34;Artifacts Evaluated — Functional&#34;&gt; &lt;img src=&#34;https://github.com/OpenXiangShan/XiangShan-doc/raw/main/publications/images/results_reproduced_dl.jpg&#34; alt=&#34;Results Reproduced&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan-doc/raw/main/publications/micro2022-xiangshan.pdf&#34;&gt;Paper PDF&lt;/a&gt; | &lt;a href=&#34;https://ieeexplore.ieee.org/abstract/document/9923860&#34;&gt;IEEE Xplore&lt;/a&gt; | &lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan-doc/raw/main/publications/micro2022-xiangshan.bib&#34;&gt;BibTeX&lt;/a&gt; | &lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan-doc/raw/main/publications/micro2022-xiangshan-slides.pdf&#34;&gt;Presentation Slides&lt;/a&gt; | &lt;a href=&#34;https://www.bilibili.com/video/BV1FB4y1j7Jy&#34;&gt;Presentation Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Follow us&lt;/h2&gt; &#xA;&lt;p&gt;Wechat/微信：香山开源处理器&lt;/p&gt; &#xA;&lt;div align=&#34;left&#34;&gt;&#xA; &lt;img width=&#34;340&#34; height=&#34;117&#34; src=&#34;https://raw.githubusercontent.com/OpenXiangShan/XiangShan/master/images/wechat.png&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Zhihu/知乎：&lt;a href=&#34;https://www.zhihu.com/people/openxiangshan&#34;&gt;香山开源处理器&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Weibo/微博：&lt;a href=&#34;https://weibo.com/u/7706264932&#34;&gt;香山开源处理器&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can contact us through &lt;a href=&#34;mailto:xiangshan-all@ict.ac.cn&#34;&gt;our mail list&lt;/a&gt;. All mails from this list will be archived to &lt;a href=&#34;https://www.mail-archive.com/xiangshan-all@ict.ac.cn/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The first stable micro-architecture of XiangShan is called Yanqihu (雁栖湖) &lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan/tree/yanqihu&#34;&gt;on the yanqihu branch&lt;/a&gt;, which has been developed since June 2020.&lt;/p&gt; &#xA;&lt;p&gt;The second stable micro-architecture of XiangShan is called Nanhu (南湖) &lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan/tree/nanhu&#34;&gt;on the nanhu branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The current version of XiangShan, also known as Kunminghu (昆明湖), is still under development on the master branch.&lt;/p&gt; &#xA;&lt;p&gt;The micro-architecture overview of Nanhu (南湖) is shown below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OpenXiangShan/XiangShan/master/images/xs-arch-nanhu.svg?sanitize=true&#34; alt=&#34;xs-arch-nanhu&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sub-directories Overview&lt;/h2&gt; &#xA;&lt;p&gt;Some of the key directories are shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── src&#xA;│   └── main/scala         # design files&#xA;│       ├── device         # virtual device for simulation&#xA;│       ├── system         # SoC wrapper&#xA;│       ├── top            # top module&#xA;│       ├── utils          # utilization code&#xA;│       ├── xiangshan      # main design code&#xA;│       └── xstransforms   # some useful firrtl transforms&#xA;├── scripts                # scripts for agile development&#xA;├── fudian                 # floating unit submodule of XiangShan&#xA;├── huancun                # L2/L3 cache submodule of XiangShan&#xA;├── difftest               # difftest co-simulation framework&#xA;└── ready-to-run           # pre-built simulation images&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;IDE Support&lt;/h2&gt; &#xA;&lt;h3&gt;bsp&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;make bsp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;IDEA&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;make idea&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generate Verilog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make verilog&lt;/code&gt; to generate verilog code. The output file is &lt;code&gt;build/XSTop.v&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Refer to &lt;code&gt;Makefile&lt;/code&gt; for more information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Run Programs by Simulation&lt;/h2&gt; &#xA;&lt;h3&gt;Prepare environment&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set environment variable &lt;code&gt;NEMU_HOME&lt;/code&gt; to the &lt;strong&gt;absolute path&lt;/strong&gt; of the &lt;a href=&#34;https://github.com/OpenXiangShan/NEMU&#34;&gt;NEMU project&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set environment variable &lt;code&gt;NOOP_HOME&lt;/code&gt; to the &lt;strong&gt;absolute path&lt;/strong&gt; of the XiangShan project.&lt;/li&gt; &#xA; &lt;li&gt;Set environment variable &lt;code&gt;AM_HOME&lt;/code&gt; to the &lt;strong&gt;absolute path&lt;/strong&gt; of the &lt;a href=&#34;https://github.com/OpenXiangShan/nexus-am&#34;&gt;AM project&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;mill&lt;/code&gt;. Refer to &lt;a href=&#34;https://com-lihaoyi.github.io/mill/mill/Intro_to_Mill.html#_installation&#34;&gt;the Manual section in this guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clone this project and run &lt;code&gt;make init&lt;/code&gt; to initialize submodules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run with simulator&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://verilator.org/guide/latest/&#34;&gt;Verilator&lt;/a&gt;, the open-source Verilog simulator.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make emu&lt;/code&gt; to build the C++ simulator &lt;code&gt;./build/emu&lt;/code&gt; with Verilator.&lt;/li&gt; &#xA; &lt;li&gt;Refer to &lt;code&gt;./build/emu --help&lt;/code&gt; for run-time arguments of the simulator.&lt;/li&gt; &#xA; &lt;li&gt;Refer to &lt;code&gt;Makefile&lt;/code&gt; and &lt;code&gt;verilator.mk&lt;/code&gt; for more information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make emu CONFIG=MinimalConfig EMU_THREADS=2 -j10&#xA;./build/emu -b 0 -e 0 -i ./ready-to-run/coremark-2-iteration.bin --diff ./ready-to-run/riscv64-nemu-interpreter-so&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting Guide&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan/wiki/Troubleshooting-Guide&#34;&gt;Troubleshooting Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;In the development of XiangShan, some sub-modules from the open-source community are employed. All relevant usage is listed below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sub-module&lt;/th&gt; &#xA;   &lt;th&gt;Source&lt;/th&gt; &#xA;   &lt;th&gt;Detail&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;L2 Cache/LLC&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ucb-bar/block-inclusivecache-sifive&#34;&gt;Sifive block-inclusivecache&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Our new L2/L3 design are inspired by Sifive&#39;s &lt;code&gt;block-inclusivecache&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Diplomacy/TileLink&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/chipsalliance/rocket-chip&#34;&gt;Rocket-chip&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;We reused the Diplomacy framework and TileLink utility that exist in rocket-chip to negotiate bus.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We are grateful for the support of the open-source community and encourage other open-source projects to reuse our code within the scope of the &lt;a href=&#34;https://raw.githubusercontent.com/OpenXiangShan/XiangShan/master/LICENSE&#34;&gt;license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>oap-project/gluten</title>
    <updated>2023-07-01T02:21:46Z</updated>
    <id>tag:github.com,2023-07-01:/oap-project/gluten</id>
    <link href="https://github.com/oap-project/gluten" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gluten: Plugin to Double SparkSQL&#39;s Performance&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;b&gt;This plugin is still under active development now, and doesn&#39;t have a stable release. Welcome to evaluate it. If you encounter any issues or have any suggestions, please submit to our issue list. We&#39;d love to hear your feedback&lt;/b&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;1 Introduction&lt;/h1&gt; &#xA;&lt;h2&gt;1.1 Problem Statement&lt;/h2&gt; &#xA;&lt;p&gt;Apache Spark is a stable, mature project that has been under development for many years. The project has been proven to be one of the best frameworks to scale out of processing petabyte-scale datasets. However, the Spark community has had to address performance challenges that required various optimizations over time. A key optimization introduced in Spark 2.0 replaced Volcano mode with whole-stage code-generation to achieve a 2x speedup. Since then most of the optimization works at the query plan level. The operator&#39;s performance stopped to grow.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/47296334/199853029-b6d0ea19-f8e4-4f62-9562-2838f7f159a7.png&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;On the other side, SQL engine is researched for years. There are product or libraries like Clickhouse, Arrow or Velox. By using features like native implementation, columnar data format as well as vectorized data processing, these libraries outperform much of Spark&#39;s JVM based SQL engine. However these libraries are running on single node.&lt;/p&gt; &#xA;&lt;h2&gt;1.2 Gluten&#39;s Solution&lt;/h2&gt; &#xA;&lt;p&gt;“Gluten” is Latin for glue. Main goal of project Gluten is to “glue&#34; the SparkSQL and native libraries. So we can take use of and benefit from Spark SQL&#39;s scale out framework as well native libraries&#39; high performance.&lt;/p&gt; &#xA;&lt;p&gt;The basic rule of Gluten&#39;s design is that we would reuse spark&#39;s whole control flow and as many JVM code as possible but offload the compute intensive data processing part to native code. Here is what Gluten does:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Transform Spark’s whole stage physical plan to Substrait plan and send to native&lt;/li&gt; &#xA; &lt;li&gt;Offload performance critical data processing to native library&lt;/li&gt; &#xA; &lt;li&gt;Define clear JNI interfaces for native libraries&lt;/li&gt; &#xA; &lt;li&gt;Switch the native backends easily&lt;/li&gt; &#xA; &lt;li&gt;Reuse Spark’s distributed control flow&lt;/li&gt; &#xA; &lt;li&gt;Manage data sharing between JVM and native&lt;/li&gt; &#xA; &lt;li&gt;Extend support to native accelerators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1.3 Target User&lt;/h2&gt; &#xA;&lt;p&gt;Gluten targets to the Spark administrators and Spark users who want to improve their spark cluster&#39;s performance fundamentally. Gluten is a plugin to Spark. It&#39;s designed to offload the SQL engine to native without any dataframe API or SQL query changes. SparkSQL users can run their current Spark job on Gluten seamlessly, no code changes are needed. However as a plugin, Gluten needs some configurations to enable it when you start Spark context. All configurations are listed &lt;a href=&#34;https://github.com/oap-project/gluten/raw/main/docs/Configuration.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1.4 References:&lt;/h2&gt; &#xA;&lt;p&gt;You may click below links for more related information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0Q6gHT_N-1U&#34;&gt;Gluten Intro Video at Data AI Summit 2022&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/intel-analytics-software/accelerate-spark-sql-queries-with-gluten-9000b65d1b4e&#34;&gt;Gluten Intro Article at Medium.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cn.kyligence.io/blog/gluten-spark/&#34;&gt;Gluten Intro Article at Kyligence.io(in Chinese)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://engineering.fb.com/2023/03/09/open-source/velox-open-source-execution-engine/&#34;&gt;Velox Intro from Meta&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;2 Architecture&lt;/h1&gt; &#xA;&lt;p&gt;The overview chart is like below. Spark physical plan is transformed to substrait plan. Substrait is to create a well defined cross-language specification for data compute operations. More details can be found from &lt;a href=&#34;https://substrait.io/&#34;&gt;https://substrait.io/&lt;/a&gt;. Then substrait plan is passed to native through JNI call. In native the operator chain should be built and start to run. We use Spark3.0&#39;s columnar API as the data interface, so the native library should return Columnar Batch to Spark. We may need to wrap the columnar batch for each native backend. Gluten&#39;s c++ code use Apache Arrow data format as its basic data format, so the returned data to Spark JVM is ArrowColumnarBatch.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/47296334/199617207-1140698a-4d53-462d-9bc7-303d14be060b.png&#34; width=&#34;800&#34;&gt; &lt;/p&gt; There are several native libraries we may offload. Currently we are working on Clickhouse and Velox as native backend. Velox is a C++ database acceleration library which provides reusable, extensible, and high-performance data processing components. More details can be found from https://github.com/facebookincubator/velox/. Gluten can also be easily extended to any accelerator libraries as backend. &#xA;&lt;p&gt;There are several key component in Gluten:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Query plan conversion which convert Spark&#39;s physical plan into substrait plan in each stage.&lt;/li&gt; &#xA; &lt;li&gt;Unified memory management in Spark is used to control the native memory allocation as well&lt;/li&gt; &#xA; &lt;li&gt;Columnar shuffle is used to shuffle columnar data directly. The shuffle service still reuses the one in Spark core. The exchange operator is reimplemented to support columnar data format&lt;/li&gt; &#xA; &lt;li&gt;For unsupported operators or functions Gluten fallback the operator to Vanilla Spark. There are C2R and R2C converter to convert the columnar data and Spark&#39;s internal row data. Both C2R and R2C are implemented natively as well&lt;/li&gt; &#xA; &lt;li&gt;Metrics are very important to get insight of Spark&#39;s execution, identify the issues or bottlenecks. Gluten collects the metrics from native library and shows in Spark UI.&lt;/li&gt; &#xA; &lt;li&gt;Shim layer is used to support multiple releases of Spark. Gluten only plans to support the latest 2-3 spark stable releases, with no plans to add support on older spark releases. Current support is on Spark 3.2 and Spark 3.3.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;3 Usage&lt;/h1&gt; &#xA;&lt;p&gt;Gluten is still under active development now. There are two ways to use Gluten.&lt;/p&gt; &#xA;&lt;h1&gt;3.1 Use Prebuilt jar&lt;/h1&gt; &#xA;&lt;p&gt;One Way is use released binary jar. Here is the simple example. we support centos7/8 and ubuntu20.04/22.04 now.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;spark-shell \&#xA; --master yarn --deploy-mode client \&#xA; --conf spark.plugins=io.glutenproject.GlutenPlugin \&#xA; --conf spark.gluten.sql.columnar.backend.lib=velox \&#xA; --conf spark.gluten.loadLibFromJar=true \&#xA; --conf spark.shuffle.manager=org.apache.spark.shuffle.sort.ColumnarShuffleManager \&#xA; --jars https://github.com/oap-project/gluten/releases/download/0.5.0/gluten-velox-bundle-spark3.2_2.12-ubuntu_20.04-0.5.0-SNAPSHOT.jar,https://github.com/oap-project/gluten/releases/download/0.5.0/gluten-thirdparty-lib-ubuntu-20.04.jar &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;3.2 Custom Build&lt;/h1&gt; &#xA;&lt;p&gt;Another way is build from source, copy the jar to your spark jars, then enable Gluten plugin when you start your spark context. Here is the simple example. Refer to Velox or Clickhouse backend below for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export gluten_jvm_jar = /PATH/TO/GLUTEN/backends-velox/target/&amp;lt;gluten-jar&amp;gt;&#xA;spark-shell &#xA;  --master yarn --deploy-mode client \&#xA;  --conf spark.plugins=io.glutenproject.GlutenPlugin \&#xA;  --conf spark.gluten.sql.columnar.backend.lib=velox or ch \&#xA;  --conf spark.driver.extraClassPath=${gluten_jvm_jar} \&#xA;  --conf spark.executor.extraClassPath=${gluten_jvm_jar} \&#xA;  --conf spark.shuffle.manager=org.apache.spark.shuffle.sort.ColumnarShuffleManager \&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.2.1 Build and Install Gluten with Velox backend&lt;/h3&gt; &#xA;&lt;img src=&#34;https://github.com/facebookincubator/velox/raw/main/static/logo.svg?sanitize=true&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;If you would like to build and try Gluten with &lt;strong&gt;Velox&lt;/strong&gt; backend, please follow the steps in &lt;a href=&#34;https://raw.githubusercontent.com/oap-project/gluten/main/docs/get-started/Velox.md&#34;&gt;Build with Velox&lt;/a&gt; to build and install the necessary libraries, compile Velox and try out the TPC-H workload.&lt;/p&gt; &#xA;&lt;h3&gt;3.2.2 Build and Install Gluten with ClickHouse backend&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oap-project/gluten/main/docs/image/ClickHouse/logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to build and try Gluten with &lt;strong&gt;ClickHouse&lt;/strong&gt; backend, please follow the steps in &lt;a href=&#34;https://raw.githubusercontent.com/oap-project/gluten/main/docs/get-started/ClickHouse.md&#34;&gt;Build with ClickHouse Backend&lt;/a&gt;. ClickHouse backend is developed by &lt;a href=&#34;https://kyligence.io/&#34;&gt;Kyligence&lt;/a&gt;, please visit &lt;a href=&#34;https://github.com/Kyligence/ClickHouse&#34;&gt;https://github.com/Kyligence/ClickHouse&lt;/a&gt; for more infomation.&lt;/p&gt; &#xA;&lt;h3&gt;3.2.3 Build script parameters&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oap-project/gluten/main/docs/get-started/GlutenUsage.md&#34;&gt;Gluten Usage&lt;/a&gt; listed the parameters and their default value of build command for your reference&lt;/p&gt; &#xA;&lt;h3&gt;3.2.4 Jar conflicts&lt;/h3&gt; &#xA;&lt;p&gt;With the latest version of Gluten, there should not be any jar conflict anymore. If you still get hit with such issues, please following the below instructions.&lt;/p&gt; &#xA;&lt;p&gt;The potentially conflicting libraries include protobuf (Both Velox and CK backend), flatbuffers (Velox backend), and arrow-* (Velox backend). These libraries are compiled from source and packed into Gluten.jars. Jvm should search them from Gluten.jar firstly and load them. But for some reason jvm loads the jars from spark_home/jars which causes conflict. You may use below commands to remove the jars from spark_home/jars. We are still investigating the root cause. Welcome to share if you have good solution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm -rf $SPARK_HOME/jars/protobuf-*&#xA;# velox backend only&#xA;rm -rf $SPARK_HOME/jars/flatbuffers-*&#xA;rm -rf $SPARK_HOME/jars/arrow-*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;4 Contribution&lt;/h1&gt; &#xA;&lt;p&gt;Gluten project welcomes everyone to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;4.1 Community&lt;/h2&gt; &#xA;&lt;p&gt;Currently we communicate with all developers and users in a wechat group(Chinese only), and a Spark channel in Velox Slack group. Contact us if you would like to join in. Refer to Contact info below&lt;/p&gt; &#xA;&lt;h2&gt;4.2 Bug Reports&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to submit any bugs, issues or enhancement requirements to github issue list. Be sure to follow the bug fill template so we can solve it quickly. If you already implement a PR and would like to contribute, you may submit an issue firstly and refer to the issue in the PR.&lt;/p&gt; &#xA;&lt;h2&gt;4.3 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Unfortunately we haven&#39;t organized the documentation site for Gluten. Currently all document is hold in &lt;a href=&#34;https://github.com/oap-project/gluten/tree/main/docs&#34;&gt;docs&lt;/a&gt;. Ping us if you would like to know more details about the Gluten design. Gluten is still under development now, and some designs may change. Feel free to talk with us and share other design and ideas.&lt;/p&gt; &#xA;&lt;p&gt;CppCodingStyle.md is provided for the purpose of helping C++ developers to contribute code, this work is still in progress, so propose a new modification PR without any hesitation if you have good ideas. &lt;a href=&#34;https://github.com/oap-project/gluten/tree/main/docs/developers/CppCodingStyle.md&#34;&gt;CppCodingStyle.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;5 Performance&lt;/h1&gt; &#xA;&lt;p&gt;We use Decision Support Benchmark1(TPC-H Like) to evaluate the performance for Gluten project. Decision Support Benchmark1 is a query set modified from &lt;a href=&#34;http://tpc.org/tpch/default5.asp&#34;&gt;TPC-H benchmark&lt;/a&gt;. Because some features are not fully supported, there are some changes during the testing. Firstly we change column data type like Decimal to Double and Date to String. Secondly we use Parquet file format for Velox testing &amp;amp; MergeTree file format for Clickhouse testing compared to Parquet file format as baseline. Thirdly we modify the SQLs to use double and string data type for both Gluten and baseline, please check &lt;a href=&#34;https://raw.githubusercontent.com/oap-project/gluten/main/backends-velox/workload/tpch&#34;&gt;Decision Support Benchmark1&lt;/a&gt; has the script and queries as the examples to run the performance testing for Velox backend.&lt;/p&gt; &#xA;&lt;p&gt;The testing environment is using single node with 2TB datasize and using Spark3.1.1 for both baseline and Gluten. The Decision Support Benchmark1 result shows an average speedup of 2.07x and up to 8.1X speedup in a single query with Gluten and Velox backend. Spark3.2 performance is pretty close. Performance data is tested in Sep. 2022. Contact us if you&#39;d like to know latest performance number &lt;img src=&#34;https://raw.githubusercontent.com/oap-project/gluten/main/docs/image/velox_decision_support_bench1_22queries_performance.png&#34; alt=&#34;Performance&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The testing environment is using a 8-nodes AWS cluster with 1TB datasize and using Spark3.1.1 for both baseline and Gluten. The Decision Support Benchmark1 result shows an average speedup of 2.12x and up to 3.48x speedup with Gluten and Clickhouse backend. &lt;img src=&#34;https://raw.githubusercontent.com/oap-project/gluten/main/docs/image/clickhouse_decision_support_bench1_22queries_performance.png&#34; alt=&#34;Performance&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;6 License&lt;/h1&gt; &#xA;&lt;p&gt;Gluten is under Apache 2.0 license(&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;7 Contact&lt;/h1&gt; &#xA;&lt;p&gt;Gluten was initiated by Intel and Kyligence in 2022. Several companies such as Intel, Kyligence, BIGO, Meituan and others, are actively participating in the development of Gluten. If you are interested in Gluten project, please contact below email address for further discussion.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:rui.mo@intel.com&#34;&gt;rui.mo@intel.com&lt;/a&gt;; &lt;a href=&#34;mailto:binwei.yang@intel.com&#34;&gt;binwei.yang@intel.com&lt;/a&gt;; &lt;a href=&#34;mailto:weiting.chen@intel.com&#34;&gt;weiting.chen@intel.com&lt;/a&gt;; &lt;a href=&#34;mailto:chang.chen@kyligence.io&#34;&gt;chang.chen@kyligence.io&lt;/a&gt;; &lt;a href=&#34;mailto:zhichao.zhang@kyligence.io&#34;&gt;zhichao.zhang@kyligence.io&lt;/a&gt;; &lt;a href=&#34;mailto:neng.liu@kyligence.io&#34;&gt;neng.liu@kyligence.io&lt;/a&gt;; &lt;a href=&#34;mailto:zuochunwei@meituan.com&#34;&gt;zuochunwei@meituan.com&lt;/a&gt;;&lt;a href=&#34;mailto:yangchuan.zy@alibaba-inc.com&#34;&gt;yangchuan.zy@alibaba-inc.com&lt;/a&gt;;&lt;a href=&#34;mailto:xiyu.zk@alibaba-inc.com&#34;&gt;xiyu.zk@alibaba-inc.com&lt;/a&gt;;&lt;a href=&#34;mailto:joey.ljy@alibaba-inc.com&#34;&gt;joey.ljy@alibaba-inc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oap-project/gluten/main/docs/image/intel_logo.jpg&#34; width=&#34;200&#34;&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;img src=&#34;https://raw.githubusercontent.com/oap-project/gluten/main/docs/image/kyligence_logo.png&#34; width=&#34;500&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/oap-project/gluten/main/docs/image/bigo_logo.png&#34; width=&#34;200&#34;&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/oap-project/gluten/main/docs/image/meituan_logo.png&#34; width=&#34;200&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Intel, the Intel logo, Arc, Intel Atom, Intel Core, Iris, OpenVINO, the OpenVINO logo, Pentium, VTune, and Xeon are trademarks of Intel Corporation or its subsidiaries.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Other names and brands may be claimed as the property of others.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(C) Intel Corporation&lt;/p&gt; &#xA;&lt;h5&gt;* LEGAL NOTICE: Your use of this software and any required dependent software (the &#34;Software Package&#34;) is subject to the terms and conditions of the software license agreements for the Software Package, which may also include notices, disclaimers, or license terms for third party or open source software included in or with the Software Package, and your use indicates your acceptance of all such terms. Please refer to the &#34;TPP.txt&#34; or other similarly-named text file included with the Software Package for additional details.&lt;/h5&gt;</summary>
  </entry>
  <entry>
    <title>bambosan/Bicubic-Shaders-BE</title>
    <updated>2023-07-01T02:21:46Z</updated>
    <id>tag:github.com,2023-07-01:/bambosan/Bicubic-Shaders-BE</id>
    <link href="https://github.com/bambosan/Bicubic-Shaders-BE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bicubic Shader BE&lt;/h1&gt; &#xA;&lt;h3&gt;A shaders for Minecraft: Bedrock Edition that aims to be beautiful look with colorful tone and some visual features&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bambosan.github.io/Bicubic-Shaders-BE/&#34;&gt;See more&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>