<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-01T01:56:19Z</updated>
  <subtitle>Monthly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>typelevel/cats</title>
    <updated>2023-01-01T01:56:19Z</updated>
    <id>tag:github.com,2023-01-01:/typelevel/cats</id>
    <link href="https://github.com/typelevel/cats" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight, modular, and extensible library for functional programming.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cats&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://typelevel.org/cats/img/cats2.png&#34; alt=&#34;Cats graphic&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://index.scala-lang.org/typelevel/cats/cats-core&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/typelevel/cats/cats-core/latest-by-scala-version.svg?targetType=Js&#34; alt=&#34;cats-core Scala version support&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/typelevel/cats/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt; &lt;a href=&#34;https://opencollective.com/typelevel&#34;&gt;&lt;img src=&#34;https://opencollective.com/typelevel/all/badge.svg?label=financial+contributors&#34; alt=&#34;Financial Contributors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/XF3CXcMzqD&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/632277896739946517.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=404244&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;Cats is a library which provides abstractions for functional programming in the &lt;a href=&#34;https://scala-lang.org&#34;&gt;Scala programming language&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Scala supports both object-oriented and functional programming, and this is reflected in the hybrid approach of the standard library. Cats strives to provide functional programming abstractions that are core, &lt;a href=&#34;https://raw.githubusercontent.com/typelevel/cats/main/#binary-compatibility-and-versioning&#34;&gt;binary compatible&lt;/a&gt;, &lt;a href=&#34;https://typelevel.org/cats/motivations.html#modularity&#34;&gt;modular&lt;/a&gt;, &lt;a href=&#34;https://typelevel.org/cats/motivations.html#approachability&#34;&gt;approachable&lt;/a&gt; and &lt;a href=&#34;https://typelevel.org/cats/motivations.html#efficiency&#34;&gt;efficient&lt;/a&gt;. A broader goal of Cats is to provide a foundation for an &lt;a href=&#34;https://typelevel.org/cats/typelevelEcosystem.html&#34;&gt;ecosystem of pure, typeful libraries&lt;/a&gt; to support functional programming in Scala applications.&lt;/p&gt; &#xA;&lt;p&gt;For more detail about Cats&#39; motivations, go &lt;a href=&#34;https://typelevel.org/cats/motivations.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Why &#34;cats&#34;?&lt;/h3&gt; &#xA;&lt;p&gt;The name is a playful shortening of the word &lt;em&gt;category&lt;/em&gt;, from &#34;&lt;a href=&#34;https://en.wikipedia.org/wiki/Category_theory&#34;&gt;category theory&lt;/a&gt;&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Regardless, you do not need to know anything about category theory to use Cats.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Code Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to &lt;a href=&#34;https://github.com/typelevel/cats/graphs/contributors&#34;&gt;all the people who contribute&lt;/a&gt;. We welcome contributions to Cats and would love for you to help build Cats. See our &lt;a href=&#34;https://raw.githubusercontent.com/typelevel/cats/main/CONTRIBUTING.md&#34;&gt;contributor guide&lt;/a&gt; for more information about how you can get involved as a developer. If you are looking for something to start with, &lt;a href=&#34;https://github.com/typelevel/cats/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;here is a beginner friendly list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Financial Contributors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/typelevel&#34;&gt;Become a financial contributor&lt;/a&gt; and help us sustain our community. Donations directly support office hours for maintainers, better documentation and strategic initiatives.&lt;/p&gt; &#xA;&lt;h4&gt;Platinum Sponsors&lt;/h4&gt; &#xA;&lt;a href=&#34;https://opencollective.com/typelevel/contribute/platinum-sposor-12420/checkout&#34;&gt;Platinum sponsorship&lt;/a&gt; starts at $950 USD/month. &#xA;&lt;div id=&#34;platinum-sponsors&#34;&gt; &#xA; &lt;noscript&gt;&#xA;  Platinum Sponsors appear here at &#xA;  &lt;a href=&#34;&#34;&gt;https://typelevel.org/cats&lt;/a&gt;&#xA; &lt;/noscript&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Gold Sponsors&lt;/h4&gt; &#xA;&lt;a href=&#34;https://opencollective.com/typelevel/contribute/gold-sponsor-12419/checkout&#34;&gt;Gold Sponsorship&lt;/a&gt; starts at $420 USD/month. &#xA;&lt;div id=&#34;gold-sponsors&#34;&gt; &#xA; &lt;noscript&gt;&#xA;  Gold Sponsors appear here at &#xA;  &lt;a href=&#34;&#34;&gt;https://typelevel.org/cats&lt;/a&gt;&#xA; &lt;/noscript&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Silver Sponsors&lt;/h4&gt; &#xA;&lt;a href=&#34;https://opencollective.com/typelevel/contribute/silver-sponsor-11780/checkout&#34;&gt;Silver Sponsorship&lt;/a&gt; starts at $180 USD/month. &#xA;&lt;div id=&#34;silver-sponsors&#34;&gt; &#xA; &lt;noscript&gt;&#xA;  Silver Sponsors appear here at &#xA;  &lt;a href=&#34;&#34;&gt;https://typelevel.org/cats&lt;/a&gt;&#xA; &lt;/noscript&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Backers&lt;/h4&gt; Become a &#xA;&lt;a href=&#34;https://opencollective.com/typelevel/contribute/backer-11779/checkout&#34;&gt;Backer&lt;/a&gt; with a recurring donation of just $5 USD/month. &#xA;&lt;div id=&#34;backers&#34;&gt; &#xA; &lt;noscript&gt;&#xA;  Backers appear here at &#xA;  &lt;a href=&#34;&#34;&gt;https://typelevel.org/cats&lt;/a&gt;&#xA; &lt;/noscript&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Other contributors&lt;/h4&gt; We thankfully accept &#xA;&lt;a href=&#34;https://opencollective.com/typelevel/donate&#34;&gt;one-time and recurring&lt;/a&gt; contributions as well. &#xA;&lt;div id=&#34;other-contributors&#34;&gt; &#xA; &lt;noscript&gt;&#xA;  Other contributors appear here at &#xA;  &lt;a href=&#34;&#34;&gt;https://typelevel.org/cats&lt;/a&gt;&#xA; &lt;/noscript&gt; &#xA;&lt;/div&gt; &amp;lt;script src=&#34;/cats/js/sponsors.js&#34;&amp;gt;&amp;lt;/script&amp;gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Cats is available for &lt;a href=&#34;http://www.scala-js.org/&#34;&gt;Scala.js&lt;/a&gt; and &lt;a href=&#34;https://www.scala-native.org/&#34;&gt;Scala Native&lt;/a&gt;, as well as the standard JVM runtime.&lt;/p&gt; &#xA;&lt;p&gt;Cats relies on improved type inference via the fix for &lt;a href=&#34;https://github.com/scala/bug/issues/2712&#34;&gt;SI-2712&lt;/a&gt;, which is not enabled by default. For &lt;strong&gt;Scala 2.12&lt;/strong&gt; you should add the following to your &lt;code&gt;build.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;scalacOptions += &#34;-Ypartial-unification&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Partial unification is on by default since Scala 2.13, the compiler no longer accepts &lt;code&gt;-Ypartial-unification&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;And then create the Cats dependency, by adding the following to your &lt;code&gt;build.sbt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;libraryDependencies += &#34;org.typelevel&#34; %% &#34;cats-core&#34; % &#34;2.8.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will pull in the cats-core module. If you require some other functionality, you can pick-and-choose from amongst these modules (used in place of &lt;code&gt;&#34;cats-core&#34;&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-kernel&lt;/code&gt;: Small set of basic type classes (&lt;em&gt;required&lt;/em&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-core&lt;/code&gt;: Most core type classes and functionality (&lt;em&gt;required&lt;/em&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-laws&lt;/code&gt;: Laws for testing type class instances.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-free&lt;/code&gt;: Free structures such as the free monad, and supporting type classes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cats-testkit&lt;/code&gt;: lib for writing tests for type class instances using laws.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;algebra&lt;/code&gt;: Type classes to represent algebraic structures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;alleycats-core&lt;/code&gt;: Cats instances and classes which are not lawful.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are several other Cats modules that are in separate repos so that they can maintain independent release cycles.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/cats-effect&#34;&gt;&lt;code&gt;cats-effect&lt;/code&gt;&lt;/a&gt;: standard &lt;code&gt;IO&lt;/code&gt; type together with &lt;code&gt;Sync&lt;/code&gt;, &lt;code&gt;Async&lt;/code&gt; and &lt;code&gt;Effect&lt;/code&gt; type classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/cats-mtl&#34;&gt;&lt;code&gt;cats-mtl&lt;/code&gt;&lt;/a&gt;: transformer typeclasses for Cats&#39; Monads, Applicatives and Functors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/mouse&#34;&gt;&lt;code&gt;mouse&lt;/code&gt;&lt;/a&gt;: a small companion to Cats that provides convenient syntax (aka extension methods)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/kittens&#34;&gt;&lt;code&gt;kittens&lt;/code&gt;&lt;/a&gt;: automatic type class instance derivation for Cats and generic utility functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/cats-tagless&#34;&gt;&lt;code&gt;cats-tagless&lt;/code&gt;&lt;/a&gt;: Utilities for tagless final encoded algebras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/cats-collections&#34;&gt;&lt;code&gt;cats-collections&lt;/code&gt;&lt;/a&gt;: Data structures which facilitate pure functional programming&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/typelevel/cats-testkit-scalatest&#34;&gt;&lt;code&gt;cats-testkit-scalatest&lt;/code&gt;&lt;/a&gt;: Cats testkit integration with Scalatest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Past release notes for Cats are available in &lt;a href=&#34;https://github.com/typelevel/cats/raw/main/CHANGES.md&#34;&gt;CHANGES.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Links:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://typelevel.org/cats/&#34;&gt;typelevel.org/cats/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ScalaDoc: &lt;a href=&#34;https://typelevel.org/cats/api/&#34;&gt;typelevel.org/cats/api/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Type classes: &lt;a href=&#34;https://typelevel.org/cats/typeclasses.html&#34;&gt;typelevel.org/cats/typeclasses.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Data types: &lt;a href=&#34;https://typelevel.org/cats/datatypes.html&#34;&gt;typelevel.org/cats/datatypes.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Algebra overview: &lt;a href=&#34;https://typelevel.org/cats/algebra.html&#34;&gt;typelevel.org/cats/algebra.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Glossary: &lt;a href=&#34;https://typelevel.org/cats/nomenclature.html&#34;&gt;typelevel.org/cats/nomenclature.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Resources for Learners: &lt;a href=&#34;https://typelevel.org/cats/resources_for_learners.html&#34;&gt;typelevel.org/cats/resources_for_learners.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FAQ: &lt;a href=&#34;https://typelevel.org/cats/faq.html&#34;&gt;typelevel.org/cats/faq.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The Typelevel Ecosystem: &lt;a href=&#34;https://typelevel.org/cats/typelevelEcosystem.html&#34;&gt;typelevel.org/cats/typelevelEcosystem.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;Discussion around Cats is currently happening on GitHub issues, PR pages, and Discord:&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://discord.gg/XF3CXcMzqD&#34;&gt;Typelevel Discord&lt;/a&gt; has #cats and #cats-dev channels, as well as community channels such as #beginners. Please join us!&lt;/p&gt; &#xA;&lt;p&gt;People are expected to follow the &lt;a href=&#34;https://www.scala-lang.org/conduct/&#34;&gt;Scala Code of Conduct&lt;/a&gt; when discussing Cats on GitHub, Discord, or other venues.&lt;/p&gt; &#xA;&lt;p&gt;We hope that our community will be respectful, helpful, and kind. If you find yourself embroiled in a situation that becomes heated, or that fails to live up to our expectations, you should disengage and contact one of the &lt;a href=&#34;https://raw.githubusercontent.com/typelevel/cats/main/#maintainers&#34;&gt;project maintainers&lt;/a&gt; in private. We hope to avoid letting minor aggressions and misunderstandings escalate into larger problems.&lt;/p&gt; &#xA;&lt;p&gt;If you are being harassed, please contact one of &lt;a href=&#34;https://raw.githubusercontent.com/typelevel/cats/main/#maintainers&#34;&gt;us&lt;/a&gt; immediately so that we can support you.&lt;/p&gt; &#xA;&lt;h3&gt;Binary compatibility and versioning&lt;/h3&gt; &#xA;&lt;p&gt;After &lt;code&gt;1.0.0&lt;/code&gt; release, we &lt;a href=&#34;https://github.com/typelevel/cats/issues/1233&#34;&gt;decided&lt;/a&gt; to use &lt;em&gt;MAJOR.MINOR.PATCH&lt;/em&gt; &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt; going forward, which is different from the &lt;em&gt;EPOCH.MAJOR.MINOR&lt;/em&gt; scheme common among Java and Scala libraries (including the Scala lang).&lt;/p&gt; &#xA;&lt;p&gt;Cats strives to provide a solid and stable foundation for an ecosystem of FP libraries. Thus, we treat backward binary compatibility maintenance with a high priority. In semantic versioning, backward breaking change is &lt;strong&gt;ONLY&lt;/strong&gt; allowed between &lt;em&gt;MAJOR&lt;/em&gt; versions. We will maintain backward binary compatibility between &lt;em&gt;PATCH&lt;/em&gt; AND &lt;em&gt;MINOR&lt;/em&gt; versions. For example, when we release Cats &lt;code&gt;1.1.0&lt;/code&gt;, it will be backward binary compatible with the previous &lt;code&gt;1.0.x&lt;/code&gt; versions. I.E. the new JAR will be a drop-in replacement for the old one. This is critical when your application has a diamond dependency on Cats - depending on two or more libraries that all depend on Cats. If one library upgrades to the new &lt;code&gt;1.1.0&lt;/code&gt; Cats before the other one does, your application still runs thanks to this backward binary compatibility.&lt;/p&gt; &#xA;&lt;p&gt;Also worth noting is that according to semantic versioning, &lt;em&gt;MINOR&lt;/em&gt; version Y (x.Y.z | x &amp;gt; 0) MUST be incremented if new, backwards compatible functionality is introduced to the public API. It MUST be incremented if any public API functionality is marked as deprecated.&lt;/p&gt; &#xA;&lt;p&gt;Any binary breaking changes will require a &lt;em&gt;MAJOR&lt;/em&gt; version bump, which we will be very cautious about. We will also consider using &lt;code&gt;organization&lt;/code&gt; and package name for major versioning in the future. But that decision is yet to be made.&lt;/p&gt; &#xA;&lt;h3&gt;Adopters&lt;/h3&gt; &#xA;&lt;p&gt;A (non-exhaustive) list of companies that use Cats in production is featured in &lt;a href=&#34;https://raw.githubusercontent.com/typelevel/cats/main/ADOPTERS.md&#34;&gt;ADOPTERS.md&lt;/a&gt;. Don&#39;t see yours? &lt;a href=&#34;https://github.com/typelevel/cats/edit/main/ADOPTERS.md&#34;&gt;You can add it in a PR!&lt;/a&gt; And if you can, consider &lt;a href=&#34;https://opencollective.com/typelevel&#34;&gt;supporting us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Maintainers&lt;/h3&gt; &#xA;&lt;p&gt;The current maintainers (people who can merge pull requests) are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rossabaker&#34;&gt;rossabaker&lt;/a&gt; Ross Baker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/armanbilge&#34;&gt;armanbilge&lt;/a&gt; Arman Bilge&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/johnynek&#34;&gt;johnynek&lt;/a&gt; P. Oscar Boykin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adelbertc&#34;&gt;adelbertc&lt;/a&gt; Adelbert Chang&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danicheg&#34;&gt;danicheg&lt;/a&gt; Daniel Esik&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukaJCB&#34;&gt;LukaJCB&lt;/a&gt; Luka Jacobowitz&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peterneyens&#34;&gt;peterneyens&lt;/a&gt; Peter Neyens&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpolecat&#34;&gt;tpolecat&lt;/a&gt; Rob Norris&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/non&#34;&gt;non&lt;/a&gt; Erik Osheim&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/barambani&#34;&gt;barambani&lt;/a&gt; Filippo Mariotti&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpilquist&#34;&gt;mpilquist&lt;/a&gt; Michael Pilquist&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/milessabin&#34;&gt;milessabin&lt;/a&gt; Miles Sabin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/djspiewak&#34;&gt;djspiewak&lt;/a&gt; Daniel Spiewak&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fthomas&#34;&gt;fthomas&lt;/a&gt; Frank Thomas&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/satorg&#34;&gt;satorg&lt;/a&gt; Sergey Torgashov&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julien-truffaut&#34;&gt;julien-truffaut&lt;/a&gt; Julien Truffaut&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kailuowang&#34;&gt;kailuowang&lt;/a&gt; Kailuo Wang&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Retired committers include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ceedubs&#34;&gt;ceedubs&lt;/a&gt; Cody Allen&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/travisbrown&#34;&gt;travisbrown&lt;/a&gt; Travis Brown&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are currently following a practice of requiring at least two sign-offs to merge code PRs (and for large or contentious issues we may wait for more). For typos, documentation improvements or minor build fix we relax this to a single sign-off. More detail in the &lt;a href=&#34;https://github.com/typelevel/cats/raw/main/PROCESS.md&#34;&gt;process document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Copyright and License&lt;/h3&gt; &#xA;&lt;p&gt;All code is available to you under the MIT license, available at &lt;a href=&#34;http://opensource.org/licenses/mit-license.php&#34;&gt;http://opensource.org/licenses/mit-license.php&lt;/a&gt; and also in the &lt;a href=&#34;https://github.com/typelevel/cats/raw/main/COPYING&#34;&gt;COPYING&lt;/a&gt; file. The design is informed by many other projects, in particular &lt;a href=&#34;https://github.com/scalaz/scalaz&#34;&gt;Scalaz&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright the maintainers, 2015-2022.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>awslabs/deequ</title>
    <updated>2023-01-01T01:56:19Z</updated>
    <id>tag:github.com,2023-01-01:/awslabs/deequ</id>
    <link href="https://github.com/awslabs/deequ" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deequ is a library built on top of Apache Spark for defining &#34;unit tests for data&#34;, which measure data quality in large datasets.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Deequ - Unit Tests for Data&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/deequ/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/awslabs/deequ.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/awslabs/deequ/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/awslabs/deequ.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/awslabs/deequ&#34;&gt;&lt;img src=&#34;https://travis-ci.com/awslabs/deequ.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.amazon.deequ/deequ&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.amazon.deequ/deequ/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Deequ is a library built on top of Apache Spark for defining &#34;unit tests for data&#34;, which measure data quality in large datasets. We are happy to receive feedback and &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/deequ/master/CONTRIBUTING.md&#34;&gt;contributions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Python users may also be interested in PyDeequ, a Python interface for Deequ. You can find PyDeequ on &lt;a href=&#34;https://github.com/awslabs/python-deequ&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://pydeequ.readthedocs.io/en/latest/README.html&#34;&gt;readthedocs&lt;/a&gt;, and &lt;a href=&#34;https://pypi.org/project/pydeequ/&#34;&gt;PyPI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements and Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deequ&lt;/strong&gt; depends on Java 8. Deequ version 2.x only runs with Spark 3.1, and vice versa. If you rely on a previous Spark version, please use a Deequ 1.x version (legacy version is maintained in legacy-spark-3.0 branch). We provide legacy releases compatible with Apache Spark versions 2.2.x to 3.0.x. The Spark 2.2.x and 2.3.x releases depend on Scala 2.11 and the Spark 2.4.x, 3.0.x, and 3.1.x releases depend on Scala 2.12.&lt;/p&gt; &#xA;&lt;p&gt;Available via &lt;a href=&#34;http://mvnrepository.com/artifact/com.amazon.deequ/deequ&#34;&gt;maven central&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Choose the latest release that matches your Spark version from the &lt;a href=&#34;https://repo1.maven.org/maven2/com/amazon/deequ/deequ/&#34;&gt;available versions&lt;/a&gt;. Add the release as a dependency to your project. For example, for Spark 3.1.x:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Maven&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;com.amazon.deequ&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;deequ&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;2.0.0-spark-3.1&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;sbt&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libraryDependencies += &#34;com.amazon.deequ&#34; % &#34;deequ&#34; % &#34;2.0.0-spark-3.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deequ&lt;/strong&gt;&#39;s purpose is to &#34;unit-test&#34; data to find errors early, before the data gets fed to consuming systems or machine learning algorithms. In the following, we will walk you through a toy example to showcase the most basic usage of our library. An executable version of the example is available &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/deequ/master/src/main/scala/com/amazon/deequ/examples/BasicExample.scala&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deequ&lt;/strong&gt; works on tabular data, e.g., CSV files, database tables, logs, flattened json files, basically anything that you can fit into a Spark dataframe. For this example, we assume that we work on some kind of &lt;code&gt;Item&lt;/code&gt; data, where every item has an id, a productName, a description, a priority and a count of how often it has been viewed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class Item(&#xA;  id: Long,&#xA;  productName: String,&#xA;  description: String,&#xA;  priority: String,&#xA;  numViews: Long&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our library is built on &lt;a href=&#34;https://spark.apache.org/&#34;&gt;Apache Spark&lt;/a&gt; and is designed to work with very large datasets (think billions of rows) that typically live in a distributed filesystem or a data warehouse. For the sake of simplicity in this example, we just generate a few toy records though.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val rdd = spark.sparkContext.parallelize(Seq(&#xA;  Item(1, &#34;Thingy A&#34;, &#34;awesome thing.&#34;, &#34;high&#34;, 0),&#xA;  Item(2, &#34;Thingy B&#34;, &#34;available at http://thingb.com&#34;, null, 0),&#xA;  Item(3, null, null, &#34;low&#34;, 5),&#xA;  Item(4, &#34;Thingy D&#34;, &#34;checkout https://thingd.ca&#34;, &#34;low&#34;, 10),&#xA;  Item(5, &#34;Thingy E&#34;, null, &#34;high&#34;, 12)))&#xA;&#xA;val data = spark.createDataFrame(rdd)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most applications that work with data have implicit assumptions about that data, e.g., that attributes have certain types, do not contain NULL values, and so on. If these assumptions are violated, your application might crash or produce wrong outputs. The idea behind &lt;strong&gt;deequ&lt;/strong&gt; is to explicitly state these assumptions in the form of a &#34;unit-test&#34; for data, which can be verified on a piece of data at hand. If the data has errors, we can &#34;quarantine&#34; and fix it, before we feed it to an application.&lt;/p&gt; &#xA;&lt;p&gt;The main entry point for defining how you expect your data to look is the &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/deequ/master/src/main/scala/com/amazon/deequ/VerificationSuite.scala&#34;&gt;VerificationSuite&lt;/a&gt; from which you can add &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/deequ/master/src/main/scala/com/amazon/deequ/checks/Check.scala&#34;&gt;Checks&lt;/a&gt; that define constraints on attributes of the data. In this example, we test for the following properties of our data:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;there are 5 rows in total&lt;/li&gt; &#xA; &lt;li&gt;values of the &lt;code&gt;id&lt;/code&gt; attribute are never NULL and unique&lt;/li&gt; &#xA; &lt;li&gt;values of the &lt;code&gt;productName&lt;/code&gt; attribute are never NULL&lt;/li&gt; &#xA; &lt;li&gt;the &lt;code&gt;priority&lt;/code&gt; attribute can only contain &#34;high&#34; or &#34;low&#34; as value&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;numViews&lt;/code&gt; should not contain negative values&lt;/li&gt; &#xA; &lt;li&gt;at least half of the values in &lt;code&gt;description&lt;/code&gt; should contain a url&lt;/li&gt; &#xA; &lt;li&gt;the median of &lt;code&gt;numViews&lt;/code&gt; should be less than or equal to 10&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In code this looks as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.amazon.deequ.VerificationSuite&#xA;import com.amazon.deequ.checks.{Check, CheckLevel, CheckStatus}&#xA;&#xA;&#xA;val verificationResult = VerificationSuite()&#xA;  .onData(data)&#xA;  .addCheck(&#xA;    Check(CheckLevel.Error, &#34;unit testing my data&#34;)&#xA;      .hasSize(_ == 5) // we expect 5 rows&#xA;      .isComplete(&#34;id&#34;) // should never be NULL&#xA;      .isUnique(&#34;id&#34;) // should not contain duplicates&#xA;      .isComplete(&#34;productName&#34;) // should never be NULL&#xA;      // should only contain the values &#34;high&#34; and &#34;low&#34;&#xA;      .isContainedIn(&#34;priority&#34;, Array(&#34;high&#34;, &#34;low&#34;))&#xA;      .isNonNegative(&#34;numViews&#34;) // should not contain negative values&#xA;      // at least half of the descriptions should contain a url&#xA;      .containsURL(&#34;description&#34;, _ &amp;gt;= 0.5)&#xA;      // half of the items should have less than 10 views&#xA;      .hasApproxQuantile(&#34;numViews&#34;, 0.5, _ &amp;lt;= 10))&#xA;    .run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After calling &lt;code&gt;run&lt;/code&gt;, &lt;strong&gt;deequ&lt;/strong&gt; translates your test to a series of Spark jobs, which it executes to compute metrics on the data. Afterwards it invokes your assertion functions (e.g., &lt;code&gt;_ == 5&lt;/code&gt; for the size check) on these metrics to see if the constraints hold on the data. We can inspect the &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/deequ/master/src/main/scala/com/amazon/deequ/VerificationResult.scala&#34;&gt;VerificationResult&lt;/a&gt; to see if the test found errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import com.amazon.deequ.constraints.ConstraintStatus&#xA;&#xA;&#xA;if (verificationResult.status == CheckStatus.Success) {&#xA;  println(&#34;The data passed the test, everything is fine!&#34;)&#xA;} else {&#xA;  println(&#34;We found errors in the data:\n&#34;)&#xA;&#xA;  val resultsForAllConstraints = verificationResult.checkResults&#xA;    .flatMap { case (_, checkResult) =&amp;gt; checkResult.constraintResults }&#xA;&#xA;  resultsForAllConstraints&#xA;    .filter { _.status != ConstraintStatus.Success }&#xA;    .foreach { result =&amp;gt; println(s&#34;${result.constraint}: ${result.message.get}&#34;) }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we run the example, we get the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;We found errors in the data:&#xA;&#xA;CompletenessConstraint(Completeness(productName)): Value: 0.8 does not meet the requirement!&#xA;PatternConstraint(containsURL(description)): Value: 0.4 does not meet the requirement!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test found that our assumptions are violated! Only 4 out of 5 (80%) of the values of the &lt;code&gt;productName&lt;/code&gt; attribute are non-null and only 2 out of 5 (40%) values of the &lt;code&gt;description&lt;/code&gt; attribute did contain a url. Fortunately, we ran a test and found the errors, somebody should immediately fix the data :)&lt;/p&gt; &#xA;&lt;h2&gt;More examples&lt;/h2&gt; &#xA;&lt;p&gt;Our library contains much more functionality than what we showed in the basic example. We are in the process of adding &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/deequ/master/src/main/scala/com/amazon/deequ/examples/&#34;&gt;more examples&lt;/a&gt; for its advanced features. So far, we showcase the following functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/deequ/raw/master/src/main/scala/com/amazon/deequ/examples/metrics_repository_example.md&#34;&gt;Persistence and querying of computed metrics of the data with a MetricsRepository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/deequ/raw/master/src/main/scala/com/amazon/deequ/examples/data_profiling_example.md&#34;&gt;Data profiling&lt;/a&gt; of large data sets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/deequ/raw/master/src/main/scala/com/amazon/deequ/examples/anomaly_detection_example.md&#34;&gt;Anomaly detection&lt;/a&gt; on data quality metrics over time&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/deequ/raw/master/src/main/scala/com/amazon/deequ/examples/constraint_suggestion_example.md&#34;&gt;Automatic suggestion of constraints&lt;/a&gt; for large datasets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/deequ/raw/master/src/main/scala/com/amazon/deequ/examples/algebraic_states_example.md&#34;&gt;Incremental metrics computation on growing data and metric updates on partitioned data&lt;/a&gt; (advanced)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to reference this package in a research paper, please cite:&lt;/p&gt; &#xA;&lt;p&gt;Sebastian Schelter, Dustin Lange, Philipp Schmidt, Meltem Celikel, Felix Biessmann, and Andreas Grafberger. 2018. &lt;a href=&#34;http://www.vldb.org/pvldb/vol11/p1781-schelter.pdf&#34;&gt;Automating large-scale data quality verification&lt;/a&gt;. Proc. VLDB Endow. 11, 12 (August 2018), 1781-1794.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is licensed under the Apache 2.0 License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gatling/gatling</title>
    <updated>2023-01-01T01:56:19Z</updated>
    <id>tag:github.com,2023-01-01:/gatling/gatling</id>
    <link href="https://github.com/gatling/gatling" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern Load Testing as Code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gatling &lt;a href=&#34;https://github.com/gatling/gatling/actions/workflows/build.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/gatling/gatling/actions/workflows/build.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/io.gatling/gatling-core/&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/io.gatling/gatling-core/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;What is Gatling ?&lt;/h2&gt; &#xA;&lt;p&gt;Gatling is a load test tool. It officially supports HTTP, WebSocket, Server-Sent-Events and JMS.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Finding fancy GUIs not that convenient for describing load tests, what you want is a friendly expressive DSL?&lt;/li&gt; &#xA; &lt;li&gt;Wanting something more convenient than huge XML dumps to store in your source version control system?&lt;/li&gt; &#xA; &lt;li&gt;Fed up with having to host a farm of injecting servers because your tool uses blocking IO and one-thread-per-user architecture?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Gatling is for you!&lt;/p&gt; &#xA;&lt;h2&gt;Underlying technologies&lt;/h2&gt; &#xA;&lt;p&gt;Gatling is developed in Scala and built upon :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://netty.io&#34;&gt;Netty&lt;/a&gt; for non blocking HTTP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://akka.io&#34;&gt;Akka&lt;/a&gt; for virtual users orchestration ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Questions, help?&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://gatling.io/docs/current/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://community.gatling.io&#34;&gt;Gatling Community Forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Found a real bug? Raise an &lt;a href=&#34;https://github.com/gatling/gatling/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Partners&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img alt=&#34;Takima&#34; src=&#34;https://raw.githubusercontent.com/gatling/gatling/main/images/logo-takima-1-nom-bas.png&#34; width=&#34;80&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/gatling/gatling/main/images/highsoft_logo.png&#34; alt=&#34;Highsoft AS&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;</summary>
  </entry>
</feed>