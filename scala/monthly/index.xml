<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-01T02:28:22Z</updated>
  <subtitle>Monthly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/incubator-streampark</title>
    <updated>2023-12-01T02:28:22Z</updated>
    <id>tag:github.com,2023-12-01:/apache/incubator-streampark</id>
    <link href="https://github.com/apache/incubator-streampark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;StreamPark, Make stream processing easier! easy-to-use streaming application development framework and operation platform&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://streampark.apache.org/image/logo_name.png&#34; alt=&#34;StreamPark Logo&#34; title=&#34;Apache StreamPark Logo&#34; width=&#34;600&#34;&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;A magical framework that makes stream processing easier!&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-blue.svg?style=for-the-badge&amp;amp;label=license&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/incubator-streampark/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/apache/streampark?style=for-the-badge&amp;amp;label=stars&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/incubator-streampark/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/apache/streampark.svg?style=for-the-badge&amp;amp;label=release&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://streampark.apache.org/download&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/apache/streampark/total.svg?style=for-the-badge&amp;amp;label=downloads&#34; alt=&#34;total downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ASFStreamPark&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ASFStreamPark?label=follow&amp;amp;logo=twitter&amp;amp;style=for-the-badge&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://streampark.apache.org&#34;&gt;Website&lt;/a&gt;&lt;/strong&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp; &lt;strong&gt;&lt;a href=&#34;https://streampark.apache.org/docs/intro&#34;&gt;Document&lt;/a&gt;&lt;/strong&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp; &lt;strong&gt;&lt;a href=&#34;https://github.com/apache/incubator-streampark/issues/507&#34;&gt;FAQ&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://streampark.apache.org/image/dashboard-preview.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üöÄ What is StreamPark?&lt;/h2&gt; &#xA;&lt;h4&gt;StreamPark is a stream processing development framework and professional management platform. &lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;StreamPark is a streaming application development framework. Aimed at ease building and managing streaming applications, StreamPark provides development framework for writing stream processing application with Apache Flink and Apache Spark, More other engines will be supported in the future. Also, StreamPark is a professional management platform for streaming application , including application development, debugging, interactive query, deployment, operation, maintenance, etc. It was initially known as StreamX and renamed to StreamPark in August 2022.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üéâ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache Flink &amp;amp; Spark application development scaffold&lt;/li&gt; &#xA; &lt;li&gt;Support multiple versions of Flink &amp;amp; Spark&lt;/li&gt; &#xA; &lt;li&gt;Wide range of out-of-the-box connectors&lt;/li&gt; &#xA; &lt;li&gt;One-stop stream processing operation platform&lt;/li&gt; &#xA; &lt;li&gt;Support catalog„ÄÅolap„ÄÅstreaming-warehouse etc.&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://streampark.apache.org/image/sqlide.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üî® How to Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:apache/incubator-streampark.git&#xA;cd incubator-streampark&#xA;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;üóÑ Details:how to &lt;a href=&#34;https://streampark.apache.org/docs/user-guide/development&#34;&gt;Development&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üßë‚Äçüíª Downloads&lt;/h2&gt; &#xA;&lt;p&gt;Download address for run-directly software package : &lt;a href=&#34;https://streampark.apache.org/download&#34;&gt;https://streampark.apache.org/download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Click &lt;a href=&#34;https://streampark.apache.org/docs/user-guide/quick-start&#34;&gt;Document&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h2&gt;üíã Our users&lt;/h2&gt; &#xA;&lt;p&gt;Various companies and organizations use StreamPark for research, production and commercial products. Are you using this project? &lt;a href=&#34;https://github.com/apache/incubator-streampark/issues/163&#34;&gt;Welcome to add your company&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://streampark.apache.org/image/users.png&#34; alt=&#34;Our users&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü§ù Contribution&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/incubator-streampark/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üôã Submit Pull Request and Issues&lt;/h3&gt; &#xA;&lt;p&gt;You can submit any ideas as &lt;a href=&#34;https://github.com/apache/incubator-streampark/pulls&#34;&gt;pull requests&lt;/a&gt; or as &lt;a href=&#34;https://github.com/apache/incubator-streampark/issues/new/choose&#34;&gt;issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you&#39;re new to posting issues, we ask that you read &lt;a href=&#34;http://www.catb.org/~esr/faqs/smart-questions.html&#34;&gt;&lt;em&gt;How To Ask Questions The Smart Way&lt;/em&gt;&lt;/a&gt; (&lt;strong&gt;This guide does not provide actual support services for this project!&lt;/strong&gt;), &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/bugs.html&#34;&gt;How to Report Bugs Effectively&lt;/a&gt; prior to posting. Well written bug reports help us help you!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;üçª How to Contribute&lt;/h3&gt; &#xA;&lt;p&gt;We welcome your suggestions, comments (including criticisms), comments and contributions. See üîó&lt;a href=&#34;https://streampark.apache.org/community/submit_guide/submit_code&#34;&gt;How to Contribute&lt;/a&gt; and üîó&lt;a href=&#34;https://streampark.apache.org/community/submit_guide/submit_code&#34;&gt;Code Submission Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thank you to all the people who already contributed to StreamPark!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/incubator-streampark/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=apache/streampark&#34; alt=&#34;contrib graph&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, Version 2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üí¨ Social Media&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ASFStreamPark&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/people/streampark&#34;&gt;Zhihu&lt;/a&gt; (in Chinese)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/455330087&#34;&gt;bilibili&lt;/a&gt; (in Chinese)&lt;/li&gt; &#xA; &lt;li&gt;WeChat Official Account (in Chinese, scan the QR code to follow)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://streampark.apache.org/image/wx_qr.png&#34; alt=&#34;Join the Group&#34; height=&#34;350px&#34;&gt;&lt;br&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>digital-asset/daml</title>
    <updated>2023-12-01T02:28:22Z</updated>
    <id>tag:github.com,2023-12-01:/digital-asset/daml</id>
    <link href="https://github.com/digital-asset/daml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Daml smart contract language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.digitalasset.com/developers&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/digital-asset/daml/main/daml-logo.png&#34; alt=&#34;Daml logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.daml.com/getting-started/installation.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/digital-asset/daml.svg?label=Download&amp;amp;sort=semver&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/digital-asset/daml/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/digitalasset/daml/_build/latest?definitionId=4&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/digitalasset/daml/_apis/build/status/digital-asset.daml?branchName=main&amp;amp;label=Build&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0&lt;/p&gt; &#xA;&lt;h1&gt;Welcome to the Daml repository!&lt;/h1&gt; &#xA;&lt;p&gt;This repository hosts all code for the &lt;a href=&#34;https://www.digitalasset.com/developers&#34;&gt;Daml smart contract language and SDK&lt;/a&gt;, originally created by &lt;a href=&#34;https://www.digitalasset.com&#34;&gt;Digital Asset&lt;/a&gt;. Daml is an open-source smart contract language for building future-proof distributed applications on a safe, privacy-aware runtime. The SDK is a set of tools to help you develop applications based on Daml.&lt;/p&gt; &#xA;&lt;h2&gt;Using Daml&lt;/h2&gt; &#xA;&lt;p&gt;To download Daml, follow &lt;a href=&#34;https://docs.daml.com/getting-started/installation.html&#34;&gt;the installation instructions&lt;/a&gt;. Once installed, to try it out, follow the &lt;a href=&#34;https://docs.daml.com/getting-started/quickstart.html&#34;&gt;quickstart guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions about how to use Daml or how to build Daml-based solutions, please join us on the &lt;a href=&#34;https://discuss.daml.com&#34;&gt;Daml forum&lt;/a&gt;. Alternatively, if you prefer asking on StackOverflow, please use &lt;a href=&#34;https://stackoverflow.com/tags/daml&#34;&gt;the &lt;code&gt;daml&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Daml&lt;/h2&gt; &#xA;&lt;p&gt;We warmly welcome &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/daml/main/CONTRIBUTING.md&#34;&gt;contributions&lt;/a&gt;. If you are looking for ideas on how to contribute, please browse our &lt;a href=&#34;https://github.com/digital-asset/daml/issues&#34;&gt;issues&lt;/a&gt;. To build and test Daml:&lt;/p&gt; &#xA;&lt;h3&gt;1. Clone this repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:digital-asset/daml.git&#xA;cd daml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Set up the development dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Our builds require various development dependencies (e.g. Java, Bazel, Python), provided by a tool called &lt;code&gt;dev-env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;On Linux &lt;code&gt;dev-env&lt;/code&gt; can be installed with:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Nix by running: &lt;code&gt;bash &amp;lt;(curl -sSfL https://nixos.org/nix/install)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;dev-env&lt;/code&gt; by running: &lt;code&gt;eval &#34;$(dev-env/bin/dade assist)&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you don&#39;t want to enter &lt;code&gt;dev-env&lt;/code&gt; manually each time using &lt;code&gt;eval &#34;$(dev-env/bin/dade assist)&#34;&lt;/code&gt;, you can also install &lt;a href=&#34;https://direnv.net&#34;&gt;direnv&lt;/a&gt;. This repo already provides a &lt;code&gt;.envrc&lt;/code&gt; file, with an option to add more in a &lt;code&gt;.envrc.private&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h4&gt;Mac&lt;/h4&gt; &#xA;&lt;p&gt;On Mac &lt;code&gt;dev-env&lt;/code&gt; can be installed with:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Nix by running: &lt;code&gt;bash &amp;lt;(curl -sSfL https://nixos.org/nix/install)&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is a &lt;em&gt;multi-user installation&lt;/em&gt; (there is no single-user installation option for macOS). Because of this, you need to configure &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; to use Nix caches:&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Add yourself as a nix trusted user by running &lt;code&gt;echo &#34;extra-trusted-users = $USER&#34; | sudo tee -a /etc/nix/nix.conf&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Restart the &lt;code&gt;nix-daemon&lt;/code&gt; by running &lt;code&gt;sudo launchctl stop org.nixos.nix-daemon &amp;amp;&amp;amp; sudo launchctl start org.nixos.nix-daemon&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter &lt;code&gt;dev-env&lt;/code&gt; by running: &lt;code&gt;eval &#34;$(dev-env/bin/dade assist)&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you don&#39;t want to enter &lt;code&gt;dev-env&lt;/code&gt; manually each time using &lt;code&gt;eval &#34;$(dev-env/bin/dade assist)&#34;&lt;/code&gt;, you can also install &lt;a href=&#34;https://direnv.net&#34;&gt;direnv&lt;/a&gt;. This repo already provides a &lt;code&gt;.envrc&lt;/code&gt; file, with an option to add more in a &lt;code&gt;.envrc.private&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Note that after a macOS update it can appear as if Nix is not installed. This is because macOS updates can modify shell config files in &lt;code&gt;/etc&lt;/code&gt;, which the multi-user installation of Nix modifies as well. A workaround for this problem is to add the following to your shell config file in your &lt;code&gt;$HOME&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Nix&#xA;if [ -e &#39;/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh&#39; ]; then&#xA;  . &#39;/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh&#39;&#xA;fi&#xA;# End Nix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/NixOS/nix/issues/3616&#34;&gt;https://github.com/NixOS/nix/issues/3616&lt;/a&gt; for more information about this issue.&lt;/p&gt; &#xA;&lt;h5&gt;MacOS M1&lt;/h5&gt; &#xA;&lt;p&gt;The above procedure will use and build native arm64 M1 binaries for this project. However, note that at the time of writing the CI system of the Daml project does not yet include MacOS M1 nodes. Therefore, the M1 configuration is untested on CI, and the remote cache is not populated with native M1 artifacts.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter issues with a native M1 build, then you can configure project to build x86-64 binaries instead and run them through Rosetta. To do that replace the contents of the file &lt;code&gt;nix/system.nix&lt;/code&gt; with the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;&#34;x86_64-darwin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;On Windows you need to enable long file paths by running the following command in an admin powershell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Set-ItemProperty -Path &#39;HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem&#39; -Name LongPathsEnabled -Type DWord -Value 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need to configure Bazel for Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;build --config windows&#34; &amp;gt; .bazelrc.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, if you are on a Windows ad-hoc or CI machine you can use &lt;code&gt;ci/configure-bazel.sh&lt;/code&gt; instead of performing these steps manually. In that case, you should checkout the &lt;code&gt;daml&lt;/code&gt; repository into the path &lt;code&gt;D:\a\1\s&lt;/code&gt; in order to be able to use remote cache artifacts.&lt;/p&gt; &#xA;&lt;p&gt;Then start &lt;code&gt;dev-env&lt;/code&gt; from PowerShell with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\dev-env\windows\bin\dadew.ps1 install&#xA;.\dev-env\windows\bin\dadew.ps1 sync&#xA;.\dev-env\windows\bin\dadew.ps1 enable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In all new PowerShell processes started, you need to repeat the &lt;code&gt;enable&lt;/code&gt; step.&lt;/p&gt; &#xA;&lt;h3&gt;3. Lint, build, and test&lt;/h3&gt; &#xA;&lt;p&gt;We have a single script to build most targets and run the tests. On Linux and Mac run &lt;code&gt;./build.sh&lt;/code&gt;. On Windows run &lt;code&gt;.\build.ps1&lt;/code&gt;. Note that these scripts may take over an hour the first time.&lt;/p&gt; &#xA;&lt;p&gt;To just build do &lt;code&gt;bazel build //...&lt;/code&gt;, and to just test do &lt;code&gt;bazel test //...&lt;/code&gt;. To read more about Bazel and how to use it, see &lt;a href=&#34;https://bazel.build&#34;&gt;the Bazel site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Mac if building is causing trouble complaining about missing nix packages, you can try first running &lt;code&gt;nix-build -A tools -A cached nix&lt;/code&gt; repeatedly until it completes without error.&lt;/p&gt; &#xA;&lt;p&gt;CI will run a few checks with regards to formatting, linting, presence of copyright headers, and so on. In order to make sure your PR can smoothly go through those checks, we use a tool called &lt;a href=&#34;https://pre-commit.com/&#34;&gt;&lt;code&gt;pre-commit&lt;/code&gt;&lt;/a&gt;. The tool is managed by Nix and you don&#39;t have to install it. If you use &lt;code&gt;direnv&lt;/code&gt;, the tool will automatically install a &lt;code&gt;pre-push&lt;/code&gt; hook that will run the relevant checks right before you push. This will give you a chance to apply necessary amendments before your contribution reaches CI. If you don&#39;t use &lt;code&gt;direnv&lt;/code&gt; you can still use the tool by activating it manually (have a look at how it&#39;s done in &lt;code&gt;.envrc&lt;/code&gt;). If you use &lt;code&gt;direnv&lt;/code&gt; but prefer to not use the tool at all, you can add the line &lt;code&gt;export DADE_NO_PRE_COMMIT=anything_really&lt;/code&gt; to &lt;code&gt;.envrc.private&lt;/code&gt;. You can also customize the phase at which the hooks will run by exporting the environment variable &lt;code&gt;DADE_PRE_COMMIT_HOOK_TYPE&lt;/code&gt; and setting it to one of the supported stages (&lt;code&gt;pre-commit&lt;/code&gt; is a common choice, but the default when installed via &lt;code&gt;direnv&lt;/code&gt; will be &lt;code&gt;pre-push&lt;/code&gt; to reduce the times the hooks will run while still making sure that you can have a tight feedback loop to fix linting errors).&lt;/p&gt; &#xA;&lt;h3&gt;4. Installing a local copy&lt;/h3&gt; &#xA;&lt;p&gt;On Linux and Mac run &lt;code&gt;daml-sdk-head&lt;/code&gt; which installs a version of the SDK with version number &lt;code&gt;0.0.0&lt;/code&gt;. Set the &lt;code&gt;version:&lt;/code&gt; field in any Daml project to 0.0.0 and it will use the locally installed one.&lt;/p&gt; &#xA;&lt;p&gt;On Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel build //release:sdk-release-tarball&#xA;tar -vxf .\bazel-bin\release\sdk-release-tarball-ce.tar.gz&#xA;cd sdk-*&#xA;daml\daml.exe install . --install-assistant=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That should tell you what to put in the path, something along the lines of &lt;code&gt;C:\Users\admin\AppData\Roaming\daml\bin&lt;/code&gt;. Note that the Windows build is not yet fully functional.&lt;/p&gt; &#xA;&lt;h3&gt;Caching: build speed and disk space considerations&lt;/h3&gt; &#xA;&lt;p&gt;Bazel has a lot of nice properties, but they come at the cost of frequently rebuilding &#34;the world&#34;. To make that bearable, we make extensive use of caching. Most artifacts should be cached in our CDN, which is configured in &lt;code&gt;.bazelrc&lt;/code&gt; in this project.&lt;/p&gt; &#xA;&lt;p&gt;However, even then, you may end up spending a lot of time (and bandwidth!) downloading artifacts from the CDN. To alleviate that, by default, our build will create a subfolder &lt;code&gt;.bazel-cache&lt;/code&gt; in this project and keep an on-disk cache. &lt;strong&gt;This can take about 10GB&lt;/strong&gt; at the time of writing.&lt;/p&gt; &#xA;&lt;p&gt;To disable the disk cache, remove the following lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build:linux --disk_cache=.bazel-cache&#xA;build:darwin --disk_cache=.bazel-cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from the &lt;code&gt;.bazelrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you work with multiple copies of this repository, you can point all of them to the same disk cache by overwriting these configs in either a &lt;code&gt;.bazelrc.local&lt;/code&gt; file in each copy, or a &lt;code&gt;~/.bazelrc&lt;/code&gt; file in your home directory.&lt;/p&gt; &#xA;&lt;h3&gt;Shared memory segment issues&lt;/h3&gt; &#xA;&lt;p&gt;On macOS at least, it looks like our setup does not always properly close the resources PostgreSQL uses. After a number of test runs, you may encounter an error message along the lines of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FATAL:  could not create shared memory segment: No space left on device&#xA;DETAIL:  Failed system call was shmget(key=5432001, size=56, 03600).&#xA;HINT:  This error does *not* mean that you have run out of disk space. It occurs either if all available shared memory IDs have been taken, in which case you need to raise the SHMMNI parameter in your kernel, or because the system&#39;s overall limit for shared memory has been reached.&#xA;        The PostgreSQL documentation contains more information about shared memory configuration.&#xA;child process exited with exit code 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, this is a memory leak, so increasing &lt;code&gt;SHMNI&lt;/code&gt; (or &lt;code&gt;SHMALL&lt;/code&gt; etc.) as suggested will only delay the issue. You can look at the existing shared memory segments on your system by running &lt;code&gt;ipcs -mcopt&lt;/code&gt;; this will print a line per segment, indicating the process ID of the last process to connect to the segment as well as the last access time and the number of currently connected processes.&lt;/p&gt; &#xA;&lt;p&gt;If you identify segments with no connected processes, and you are confident you can remove them, you can do so with &lt;code&gt;ipcrm $sid&lt;/code&gt;, where &lt;code&gt;$sid&lt;/code&gt; is the process ID displayed (as the second column) by &lt;code&gt;ipcs&lt;/code&gt;. Not many macOS applications use shared memory segments; &lt;strong&gt;if you have verified that all the existing memory segments on your machine need to be deleted&lt;/strong&gt;, e.g. because they have all been created by PostgreSQL instances that are no longer running, here is a Bash invocation you can use to remove all shared memory segments from your system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a dangerous command. Make sure you understand what it does before running it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for shmid in $(ipcs -m | sed 1,3d | awk &#39;{print $2}&#39; | sed &#39;$d&#39;); do ipcrm -m $shmid; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Haskell profiling builds&lt;/h3&gt; &#xA;&lt;p&gt;To build Haskell executables with profiling enabled, pass &lt;code&gt;-c dbg&lt;/code&gt; to Bazel, e.g. &lt;code&gt;bazel build -c dbg damlc&lt;/code&gt;. If you want to build the whole SDK with profiling enabled use &lt;code&gt;daml-sdk-head --profiling&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joernio/joern</title>
    <updated>2023-12-01T02:28:22Z</updated>
    <id>tag:github.com,2023-12-01:/joernio/joern</id>
    <link href="https://github.com/joernio/joern" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source code analysis platform for C/C++/Java/Binary/Javascript/Python/Kotlin based on code property graphs. Discord https://discord.gg/vv4MH284Hc&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Joern - The Bug Hunter&#39;s Workbench&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/joernio/joern/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/joernio/joern/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://index.scala-lang.org/joernio/joern&#34;&gt;&lt;img src=&#34;https://index.scala-lang.org/joernio/joern/latest.svg?sanitize=true&#34; alt=&#34;Joern SBT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/joernio/joern/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/joernio/joern/total.svg?sanitize=true&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/vv4MH284Hc&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Discord-lime?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;color=black&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Joern is a platform for analyzing source code, bytecode, and binary executables. It generates code property graphs (CPGs), a graph representation of code for cross-language code analysis. Code property graphs are stored in a custom graph database. This allows code to be mined using search queries formulated in a Scala-based domain-specific query language. Joern is developed with the goal of providing a useful tool for vulnerability discovery and research in static program analysis.&lt;/p&gt; &#xA;&lt;p&gt;Website: &lt;a href=&#34;https://joern.io&#34;&gt;https://joern.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation: &lt;a href=&#34;https://docs.joern.io/&#34;&gt;https://docs.joern.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specification: &lt;a href=&#34;https://cpg.joern.io&#34;&gt;https://cpg.joern.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;News / Changelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Joern v2.0.0 &lt;a href=&#34;https://raw.githubusercontent.com/joernio/joern/master/changelog/2.0.0-scala3.md&#34;&gt;upgrades from Scala2 to Scala3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Joern v1.2.0 removes the &lt;code&gt;overflowdb.traversal.Traversal&lt;/code&gt; class. This change is not completely backwards compatible. See &lt;a href=&#34;https://raw.githubusercontent.com/joernio/joern/master/changelog/traversal_removal.md&#34;&gt;here&lt;/a&gt; for a detailed writeup.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 19 (other versions &lt;em&gt;might&lt;/em&gt; work, but have not been properly tested)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;optional&lt;/em&gt;: gcc and g++ (for auto-discovery of C/C++ system header files if included/used in your C/C++ code)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mvn &lt;a href=&#34;https://maven.apache.org/install.html&#34;&gt;https://maven.apache.org/install.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://github.com/joernio/joern/releases/latest/download/joern-install.sh&#xA;chmod +x ./joern-install.sh&#xA;sudo ./joern-install.sh&#xA;joern&#xA;&#xA;     ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó&#xA;     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë&#xA;     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë&#xA;‚ñà‚ñà   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë&#xA;‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë&#xA; ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù&#xA;Version: 2.0.1&#xA;Type `help` to begin&#xA;&#xA;joern&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the installation script fails for any reason, try&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./joern-install --interactive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker based execution&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -v /tmp:/tmp -v $(pwd):/app:rw -w /app -t ghcr.io/joernio/joern joern&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run joern in server mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -v /tmp:/tmp -v $(pwd):/app:rw -w /app -t ghcr.io/joernio/joern joern --server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Almalinux 9 requires the CPU to support SSE4.2. For kvm64 VM use the Almalinux 8 version instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -v /tmp:/tmp -v $(pwd):/app:rw -w /app -t ghcr.io/joernio/joern-alma8 joern&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;A new release is &lt;a href=&#34;https://raw.githubusercontent.com/joernio/joern/master/.github/workflows/release.yml&#34;&gt;created automatically&lt;/a&gt; once per day. Contributers can also manually run the &lt;a href=&#34;https://github.com/joernio/joern/actions/workflows/release.yml&#34;&gt;release workflow&lt;/a&gt; if they need the release sooner.&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;h3&gt;Contribution Guidelines&lt;/h3&gt; &#xA;&lt;p&gt;Thank you for taking time to contribute to Joern! Here are a few guidelines to ensure your pull request will get merged as soon as possible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try to make use of the templates as far as possible, however they may not suit all needs. The minimum we would like to see is: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A title that briefly describes the change and purpose of the PR, preferably with the affected module in square brackets, e.g. &lt;code&gt;[javasrc2cpg] Addition Operator Fix&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A short description of the changes in the body of the PR. This could be in bullet points or paragraphs.&lt;/li&gt; &#xA;   &lt;li&gt;A link or reference to the related issue, if any exists.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Do not: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Immediately CC/@/email spam other contributors, the team will review the PR and assign the most appropriate contributor to review the PR. Joern is maintained by industry partners and researchers alike, for the most part with their own goals and priorities, and additional help is largely volunteer work. If your PR is going stale, then reach out to us in follow-up comments with @&#39;s asking for an explanation of priority or planning of when it may be addressed (if ever, depending on quality).&lt;/li&gt; &#xA;   &lt;li&gt;Leave the description body empty, this makes reviewing the purpose of the PR difficult.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Remember to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Remember to format your code, i.e. run &lt;code&gt;sbt scalafmt Test/scalafmt&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add a unit test to verify your change.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;IDE setup&lt;/h3&gt; &#xA;&lt;h4&gt;Intellij IDEA&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/download&#34;&gt;Download Intellij Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install and run it&lt;/li&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/1347-scala&#34;&gt;Scala Plugin&lt;/a&gt; - just search and install from within Intellij.&lt;/li&gt; &#xA; &lt;li&gt;Important: open &lt;code&gt;sbt&lt;/code&gt; in your local joern repository, run &lt;code&gt;compile&lt;/code&gt; and keep it open - this will allow us to use the BSP build in the next step&lt;/li&gt; &#xA; &lt;li&gt;Back to Intellij: open project: select your local joern clone: select to open as &lt;code&gt;BSP project&lt;/code&gt; (i.e. &lt;em&gt;not&lt;/em&gt; &lt;code&gt;sbt project&lt;/code&gt;!)&lt;/li&gt; &#xA; &lt;li&gt;Await the import and indexing to complete, then you can start, e.g. &lt;code&gt;Build -&amp;gt; build project&lt;/code&gt; or run a test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;VSCode&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install VSCode and Docker&lt;/li&gt; &#xA; &lt;li&gt;Install the plugin &lt;code&gt;ms-vscode-remote.remote-containers&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open Joern project folder in &lt;a href=&#34;https://docs.microsoft.com/en-us/azure-sphere/app-development/container-build-vscode#build-and-debug-the-project&#34;&gt;VSCode&lt;/a&gt; Visual Studio Code detects the new files and opens a message box saying: &lt;code&gt;Folder contains a Dev Container configuration file. Reopen to folder to develop in a container.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;Reopen in Container&lt;/code&gt; button to reopen the folder in the container created by the &lt;code&gt;.devcontainer/Dockerfile&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Switch to &lt;code&gt;scalameta.metals&lt;/code&gt; sidebar in VSCode, and select &lt;code&gt;import build&lt;/code&gt; in &lt;code&gt;BUILD COMMANDS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;After &lt;code&gt;import build&lt;/code&gt; succeeds, you are ready to start writing code for Joern&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;QueryDB (queries plugin)&lt;/h2&gt; &#xA;&lt;p&gt;Quick way to develop and test QueryDB:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbt stage&#xA;./querydb-install.sh&#xA;./joern-scan --list-query-names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The last command prints all available queries - add your own in querydb, run the above commands again to see that your query got deployed. More details in the &lt;a href=&#34;https://raw.githubusercontent.com/joernio/joern/master/querydb/README.md&#34;&gt;separate querydb readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Various static analysis benchmarks that measure Joern are contained under the &lt;code&gt;benchmarks&lt;/code&gt;. The benchmarks are implemented in ScalaTest and can be run using the &lt;code&gt;joern-benchmarks&lt;/code&gt; script. The benchmark results can be found on the &lt;code&gt;benchmarks&lt;/code&gt; subproject&#39;s &lt;code&gt;README&lt;/code&gt;. The currently implemented benchmarks along with the language frontends tested are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://too4words.github.io/securibench-micro/&#34;&gt;Securibench Micro&lt;/a&gt; [&lt;code&gt;javasrc2cpg&lt;/code&gt;, &lt;code&gt;jimple2cpg&lt;/code&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-030-03638-6_27&#34;&gt;IFSpec&lt;/a&gt; (&lt;a href=&#34;https://pp.ipd.kit.edu/uploads/publikationen/ifspec18nordsec.pdf&#34;&gt;paper&lt;/a&gt;) [&lt;code&gt;javasrc2cpg&lt;/code&gt;, &lt;code&gt;jimple2cpg&lt;/code&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/plast-lab/JInfoFlow-bench&#34;&gt;JInfoFlow&lt;/a&gt; (&lt;a href=&#34;https://yanniss.github.io/ptaint-oopsla17-prelim.pdf&#34;&gt;paper&lt;/a&gt;) [&lt;code&gt;javasrc2cpg&lt;/code&gt;, &lt;code&gt;jimple2cpg&lt;/code&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more instructions on how to run benchmarks individually head over to the &lt;code&gt;benchmarks&lt;/code&gt; subproject. If you would like the benchmark results to be written to a file instead of printed to STDOUT, set the path to the environment variable &lt;code&gt;JOERN_BENCHMARK_RESULT_FILE&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>