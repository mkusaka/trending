<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-01T02:17:43Z</updated>
  <subtitle>Monthly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fpinscala/fpinscala</title>
    <updated>2024-01-01T02:17:43Z</updated>
    <id>tag:github.com,2024-01-01:/fpinscala/fpinscala</id>
    <link href="https://github.com/fpinscala/fpinscala" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code, exercises, answers, and hints to go along with the book &#34;Functional Programming in Scala&#34;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitter.im/fpinscala/fpinscala?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/fpinscala/fpinscala&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains exercises, hints, and answers for the book &lt;a href=&#34;http://manning.com/bjarnason/&#34;&gt;Functional Programming in Scala&lt;/a&gt;. Along with the book itself, it&#39;s the closest you&#39;ll get to having your own private functional programming tutor without actually having one.&lt;/p&gt; &#xA;&lt;p&gt;There are two main branches in this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fpinscala/fpinscala/tree/first-edition&#34;&gt;first-edition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fpinscala/fpinscala/tree/second-edition&#34;&gt;second-edition&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Be sure to select the branch which matches the edition of the book you are reading!&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how to use this repository:&lt;/p&gt; &#xA;&lt;p&gt;Each chapter in the book develops a fully working library of functions and data types, built up through a series of exercises and example code given in the book text. The shell of this working library and exercise stubs live in &lt;code&gt;src/main/scala/fpinscala/exercises/&amp;lt;chapter-description&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;chapter-description&amp;gt;&lt;/code&gt; is a package name that corresponds to the chapter title (see below). When you begin working on a chapter, we recommend you open the exercise file(s) for that chapter, and when you encounter exercises, implement them in the exercises file and make sure they work.&lt;/p&gt; &#xA;&lt;p&gt;If you get stuck on an exercise, let&#39;s say exercise 4 in the chapter, you can find hints in &lt;code&gt;answerkey/&amp;lt;chapter-description&amp;gt;/04.hint.md&lt;/code&gt; (if no hints are available for a problem, the file will just have a single &#39;-&#39; as its contents) and the answer along with an explanation of the answer and any variations in &lt;code&gt;answerkey/&amp;lt;chapter-description&amp;gt;/04.answer.md&lt;/code&gt;. The finished Scala modules, with all answers for each chapter live in &lt;code&gt;src/main/scala/fpinscala/answers/&amp;lt;chapter-description&amp;gt;&lt;/code&gt;. Please feel free to submit pull requests for alternate answers, improved hints, and so on, so we can make this repo the very best resource for people working through the book.&lt;/p&gt; &#xA;&lt;p&gt;Chapter descriptions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chapter 2: gettingstarted&lt;/li&gt; &#xA; &lt;li&gt;Chapter 3: datastructures&lt;/li&gt; &#xA; &lt;li&gt;Chapter 4: errorhandling&lt;/li&gt; &#xA; &lt;li&gt;Chapter 5: laziness&lt;/li&gt; &#xA; &lt;li&gt;Chapter 6: state&lt;/li&gt; &#xA; &lt;li&gt;Chapter 7: parallelism&lt;/li&gt; &#xA; &lt;li&gt;Chapter 8: testing&lt;/li&gt; &#xA; &lt;li&gt;Chapter 9: parsing&lt;/li&gt; &#xA; &lt;li&gt;Chapter 10: monoids&lt;/li&gt; &#xA; &lt;li&gt;Chapter 11: monads&lt;/li&gt; &#xA; &lt;li&gt;Chapter 12: applicative&lt;/li&gt; &#xA; &lt;li&gt;Chapter 13: iomonad&lt;/li&gt; &#xA; &lt;li&gt;Chapter 14: localeffects&lt;/li&gt; &#xA; &lt;li&gt;Chapter 15: streamingio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup build environment&lt;/h3&gt; &#xA;&lt;p&gt;The project is setup to use &lt;a href=&#34;https://scala-cli.virtuslab.org&#34;&gt;Scala CLI&lt;/a&gt;. First install Scala CLI by following the &lt;a href=&#34;https://scala-cli.virtuslab.org/install&#34;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also likely want an editor that&#39;s aware of Scala syntax. &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;VSCode&lt;/a&gt; with the &lt;a href=&#34;https://scalameta.org/metals/docs/editors/vscode.html&#34;&gt;Metals&lt;/a&gt; extension works great.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;To build the code for the first time, from the root directory of the project (i.e., the directory where this README.md is located):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli compile .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This compiles all exercises and answers. You can also do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli console .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to get a Scala REPL (prompt &lt;code&gt;scala&amp;gt;&lt;/code&gt;) with access to exercises and answers, and then for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scala&amp;gt; import fpinscala.exercises.datastructures.List&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to import the &lt;code&gt;List&lt;/code&gt; data type.&lt;/p&gt; &#xA;&lt;p&gt;To run the sample programs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli run .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gives a list of possible main methods to execute. To run one of them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli run . --main-class fpinscala.answers.gettingstarted.printAbs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a single unit-test, you can specify the fully qualified class name and test name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli test . -- &#39;fpinscala.exercises.gettingstarted.GettingStartedSuite.MyProgram.factorial&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run unit-tests for a package you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli test . -- &#39;fpinscala.exercises.gettingstarted.*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run all unit-tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ scala-cli test .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, running all tests will result in failures. As you solve exercises, the tests will start to pass.&lt;/p&gt; &#xA;&lt;h3&gt;SBT&lt;/h3&gt; &#xA;&lt;p&gt;Note: an &lt;a href=&#34;https://www.scala-sbt.org&#34;&gt;SBT&lt;/a&gt; build is also provided.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;All code in this repository is &lt;a href=&#34;http://opensource.org/licenses/mit-license.php&#34;&gt;MIT-licensed&lt;/a&gt;. See the LICENSE file for details.&lt;/p&gt; &#xA;&lt;p&gt;Have fun, and good luck! Also be sure to check out &lt;a href=&#34;https://github.com/fpinscala/fpinscala/wiki&#34;&gt;the community wiki&lt;/a&gt; for the &lt;strong&gt;chapter notes&lt;/strong&gt;, links to more reading, and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Paul, RÃºnar, and Michael&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chipsalliance/rocket-chip-inclusive-cache</title>
    <updated>2024-01-01T02:17:43Z</updated>
    <id>tag:github.com,2024-01-01:/chipsalliance/rocket-chip-inclusive-cache</id>
    <link href="https://github.com/chipsalliance/rocket-chip-inclusive-cache" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An RTL generator for a last-level shared inclusive TileLink cache controller&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rocket Chip SoC Inclusive Cache Generator&lt;/h1&gt; &#xA;&lt;p&gt;This &lt;code&gt;block&lt;/code&gt; package contains an RTL generator for creating instances of a coherent, last-level, inclusive cache. The &lt;code&gt;InclusiveCache&lt;/code&gt; controller enforces coherence among a set of caching clients using an invalidation-based coherence policy implemetated on top of the the TileLink 1.8.1 coherence messaging protocol. This policy is implemented using a full-map of directory bits stored with each cache block&#39;s metadata tag.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;InclusiveCache&lt;/code&gt; is a TileLink adapter; it can be used as a drop-in replacement for Rocket-Chip&#39;s &lt;code&gt;tilelink.BroadcastHub&lt;/code&gt; coherence manager. It additionally supplies a SW-controlled interface for flusing cache blocks based on physical addresses.&lt;/p&gt; &#xA;&lt;p&gt;The following parameters of the cache are easily &lt;code&gt;Config&lt;/code&gt;-urable: size, ways, banking and sub-banking factors, external bandwidth, network interface buffering.&lt;/p&gt; &#xA;&lt;p&gt;Stand-alone unit tests coming soon.&lt;/p&gt; &#xA;&lt;p&gt;This repository is a replacement for &lt;a href=&#34;https://github.com/sifive/block-inclusivecache-sifive&#34;&gt;https://github.com/sifive/block-inclusivecache-sifive&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>riscv-boom/riscv-boom</title>
    <updated>2024-01-01T02:17:43Z</updated>
    <id>tag:github.com,2024-01-01:/riscv-boom/riscv-boom</id>
    <link href="https://github.com/riscv-boom/riscv-boom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SonicBOOM: The Berkeley Out-of-Order Machine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/riscv-boom/riscv-boom/master/docs/figures/evolution.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The Berkeley Out-of-Order RISC-V Processor &lt;a href=&#34;https://circleci.com/gh/riscv-boom/riscv-boom&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/riscv-boom/riscv-boom.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The Berkeley Out-of-Order Machine (BOOM) is a synthesizable and parameterizable open source RV64GC RISC-V core written in the &lt;a href=&#34;https://chisel.eecs.berkeley.edu/&#34;&gt;Chisel&lt;/a&gt; hardware construction language. Created at the University of California, Berkeley in the &lt;a href=&#34;https://bar.eecs.berkeley.edu/&#34;&gt;Berkeley Architecture Research&lt;/a&gt; group, its focus is to create a high performance, synthesizable, and parameterizable core for architecture research. The current version of the BOOM microarchitecture (&lt;a href=&#34;https://carrv.github.io/2020/papers/CARRV2020_paper_15_Zhao.pdf&#34;&gt;SonicBOOM, or BOOMv3&lt;/a&gt;) is performance competitive with commercial high-performance out-of-order cores, achieving 6.2 CoreMarks/MHz.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/riscv-boom/riscv-boom/master/docs/figures/uarch.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;BOOM&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ISA&lt;/td&gt; &#xA;   &lt;td&gt;RISC-V (RV64GC)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Synthesizable&lt;/td&gt; &#xA;   &lt;td&gt;â&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FPGA&lt;/td&gt; &#xA;   &lt;td&gt;â&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Parameterized&lt;/td&gt; &#xA;   &lt;td&gt;â&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IEEE 754 Floating Point&lt;/td&gt; &#xA;   &lt;td&gt;â&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Atomics&lt;/td&gt; &#xA;   &lt;td&gt;â&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Caches&lt;/td&gt; &#xA;   &lt;td&gt;â&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Virtual Memory&lt;/td&gt; &#xA;   &lt;td&gt;â&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Boots Linux&lt;/td&gt; &#xA;   &lt;td&gt;â&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Runs SPEC&lt;/td&gt; &#xA;   &lt;td&gt;â&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CoreMark/MHz&lt;/td&gt; &#xA;   &lt;td&gt;6.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;IMPORTANT: Using BOOM&lt;/h2&gt; &#xA;&lt;p&gt;This repository is &lt;strong&gt;NOT A SELF-RUNNING&lt;/strong&gt; repository. To instantiate a BOOM core, please use the &lt;a href=&#34;https://github.com/ucb-bar/chipyard&#34;&gt;Chipyard&lt;/a&gt; SoC generator.&lt;/p&gt; &#xA;&lt;p&gt;The current hash of Chipyard that works with this repository is located in the &lt;code&gt;CHIPYARD.hash&lt;/code&gt; file in the top level directory of this repository. This file is mainly used for CI purposes, since Chipyard should follow the correct version of rocket-chip. For most users, you should be able to clone Chipyard separately and follow the default Chipyard instructions (without having to use the &lt;code&gt;.hash&lt;/code&gt; file).&lt;/p&gt; &#xA;&lt;p&gt;While BOOM is primarily ASIC-optimized, it is also usable on FPGAs. Chipyard provides infrastructure and documentation for deploying BOOM on AWS F1 FPGAs through FireSim.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation and Information&lt;/h2&gt; &#xA;&lt;p&gt;Please check out the BOOM website @ &lt;a href=&#34;https://boom-core.org&#34;&gt;https://boom-core.org&lt;/a&gt; for the most up-to-date information. It contains links to the mailing lists, documentation, design spec., publications and more!&lt;/p&gt; &#xA;&lt;p&gt;If you use BOOMv3 in your published work, please cite BOOM as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{zhaosonicboom,&#xA;  title={SonicBOOM: The 3rd Generation Berkeley Out-of-Order Machine},&#xA;  author={Zhao, Jerry and Korpan, Ben and Gonzalez, Abraham and Asanovic, Krste},&#xA;  booktitle={Fourth Workshop on Computer Architecture Research with RISC-V},&#xA;  year={2020},&#xA;  month={May}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; (&lt;a href=&#34;http://www.boom-core.org&#34;&gt;www.boom-core.org&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mailing List&lt;/strong&gt; (&lt;a href=&#34;https://groups.google.com/forum/#!forum/riscv-boom&#34;&gt;https://groups.google.com/forum/#!forum/riscv-boom&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer!&lt;/h2&gt; &#xA;&lt;p&gt;BOOM is a work-in-progress and remains in active development.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/riscv-boom/riscv-boom/master/CONTRIB_AND_STYLE.md&#34;&gt;CONTRIB_AND_STYLE.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>