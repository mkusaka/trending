<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Scala Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T02:52:45Z</updated>
  <subtitle>Monthly Trending of Scala in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>digital-asset/daml</title>
    <updated>2022-06-04T02:52:45Z</updated>
    <id>tag:github.com,2022-06-04:/digital-asset/daml</id>
    <link href="https://github.com/digital-asset/daml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Daml smart contract language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.digitalasset.com/developers&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/digital-asset/daml/main/daml-logo.png&#34; alt=&#34;Daml logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.daml.com/getting-started/installation.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/digital-asset/daml.svg?label=Download&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/digital-asset/daml/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/digitalasset/daml/_build/latest?definitionId=4&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/digitalasset/daml/_apis/build/status/digital-asset.daml?branchName=main&amp;amp;label=Build&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0&lt;/p&gt; &#xA;&lt;h1&gt;Welcome to the Daml repository!&lt;/h1&gt; &#xA;&lt;p&gt;This repository hosts all code for the &lt;a href=&#34;https://www.digitalasset.com/developers&#34;&gt;Daml smart contract language and SDK&lt;/a&gt;, originally created by &lt;a href=&#34;https://www.digitalasset.com&#34;&gt;Digital Asset&lt;/a&gt;. Daml is an open-source smart contract language for building future-proof distributed applications on a safe, privacy-aware runtime. The SDK is a set of tools to help you develop applications based on Daml.&lt;/p&gt; &#xA;&lt;h2&gt;Using Daml&lt;/h2&gt; &#xA;&lt;p&gt;To download Daml, follow &lt;a href=&#34;https://docs.daml.com/getting-started/installation.html&#34;&gt;the installation instructions&lt;/a&gt;. Once installed, to try it out, follow the &lt;a href=&#34;https://docs.daml.com/getting-started/quickstart.html&#34;&gt;quickstart guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions about how to use Daml or how to build Daml-based solutions, please join us on the &lt;a href=&#34;https://discuss.daml.com&#34;&gt;Daml forum&lt;/a&gt;. Alternatively, if you prefer asking on StackOverflow, please use &lt;a href=&#34;https://stackoverflow.com/tags/daml&#34;&gt;the &lt;code&gt;daml&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Daml&lt;/h2&gt; &#xA;&lt;p&gt;We warmly welcome &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/daml/main/CONTRIBUTING.md&#34;&gt;contributions&lt;/a&gt;. If you are looking for ideas on how to contribute, please browse our &lt;a href=&#34;https://github.com/digital-asset/daml/issues&#34;&gt;issues&lt;/a&gt;. To build and test Daml:&lt;/p&gt; &#xA;&lt;h3&gt;1. Clone this repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:digital-asset/daml.git&#xA;cd daml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Set up the development dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Our builds require various development dependencies (e.g. Java, Bazel, Python), provided by a tool called &lt;code&gt;dev-env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;On Linux &lt;code&gt;dev-env&lt;/code&gt; can be installed with:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Nix by running: &lt;code&gt;bash &amp;lt;(curl -sSfL https://nixos.org/nix/install)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;dev-env&lt;/code&gt; by running: &lt;code&gt;eval &#34;$(dev-env/bin/dade assist)&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you don&#39;t want to enter &lt;code&gt;dev-env&lt;/code&gt; manually each time using &lt;code&gt;eval &#34;$(dev-env/bin/dade assist)&#34;&lt;/code&gt;, you can also install &lt;a href=&#34;https://direnv.net&#34;&gt;direnv&lt;/a&gt;. This repo already provides a &lt;code&gt;.envrc&lt;/code&gt; file, with an option to add more in a &lt;code&gt;.envrc.private&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h4&gt;Mac&lt;/h4&gt; &#xA;&lt;p&gt;On Mac &lt;code&gt;dev-env&lt;/code&gt; can be installed with:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Nix by running: &lt;code&gt;bash &amp;lt;(curl -sSfL https://nixos.org/nix/install)&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is a &lt;em&gt;multi-user installation&lt;/em&gt; (there is no single-user installation option for macOS). Because of this, you need to configure &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; to use Nix caches:&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Add yourself as a nix trusted user by running &lt;code&gt;echo &#34;extra-trusted-users = $USER&#34; | sudo tee -a /etc/nix/nix.conf&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Restart the &lt;code&gt;nix-daemon&lt;/code&gt; by running &lt;code&gt;sudo launchctl stop org.nixos.nix-daemon &amp;amp;&amp;amp; sudo launchctl start org.nixos.nix-daemon&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter &lt;code&gt;dev-env&lt;/code&gt; by running: &lt;code&gt;eval &#34;$(dev-env/bin/dade assist)&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you don&#39;t want to enter &lt;code&gt;dev-env&lt;/code&gt; manually each time using &lt;code&gt;eval &#34;$(dev-env/bin/dade assist)&#34;&lt;/code&gt;, you can also install &lt;a href=&#34;https://direnv.net&#34;&gt;direnv&lt;/a&gt;. This repo already provides a &lt;code&gt;.envrc&lt;/code&gt; file, with an option to add more in a &lt;code&gt;.envrc.private&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Note that after a macOS update it can appear as if Nix is not installed. This is because macOS updates can modify shell config files in &lt;code&gt;/etc&lt;/code&gt;, which the multi-user installation of Nix modifies as well. A workaround for this problem is to add the following to your shell config file in your &lt;code&gt;$HOME&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Nix&#xA;if [ -e &#39;/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh&#39; ]; then&#xA;  . &#39;/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh&#39;&#xA;fi&#xA;# End Nix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/NixOS/nix/issues/3616&#34;&gt;https://github.com/NixOS/nix/issues/3616&lt;/a&gt; for more information about this issue.&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;On Windows you need to enable long file paths by running the following command in an admin powershell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Set-ItemProperty -Path &#39;HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem&#39; -Name LongPathsEnabled -Type DWord -Value 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need to configure Bazel for Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;build --config windows&#34; &amp;gt; .bazelrc.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, if you are on a Windows ad-hoc or CI machine you can use &lt;code&gt;ci/configure-bazel.sh&lt;/code&gt; instead of performing these steps manually. In that case, you should checkout the &lt;code&gt;daml&lt;/code&gt; repository into the path &lt;code&gt;D:\a\1\s&lt;/code&gt; in order to be able to use remote cache artifacts.&lt;/p&gt; &#xA;&lt;p&gt;Then start &lt;code&gt;dev-env&lt;/code&gt; from PowerShell with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\dev-env\windows\bin\dadew.ps1 install&#xA;.\dev-env\windows\bin\dadew.ps1 sync&#xA;.\dev-env\windows\bin\dadew.ps1 enable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In all new PowerShell processes started, you need to repeat the &lt;code&gt;enable&lt;/code&gt; step.&lt;/p&gt; &#xA;&lt;h3&gt;3. First build and test&lt;/h3&gt; &#xA;&lt;p&gt;We have a single script to build most targets and run the tests. On Linux and Mac run &lt;code&gt;./build.sh&lt;/code&gt;. On Windows run &lt;code&gt;.\build.ps1&lt;/code&gt;. Note that these scripts may take over an hour the first time.&lt;/p&gt; &#xA;&lt;p&gt;To just build do &lt;code&gt;bazel build //...&lt;/code&gt;, and to just test do &lt;code&gt;bazel test //...&lt;/code&gt;. To read more about Bazel and how to use it, see &lt;a href=&#34;https://bazel.build&#34;&gt;the Bazel site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Mac if building is causing trouble complaining about missing nix packages, you can try first running &lt;code&gt;nix-build -A tools -A cached nix&lt;/code&gt; repeatedly until it completes without error.&lt;/p&gt; &#xA;&lt;h3&gt;4. Installing a local copy&lt;/h3&gt; &#xA;&lt;p&gt;On Linux and Mac run &lt;code&gt;daml-sdk-head&lt;/code&gt; which installs a version of the SDK with version number &lt;code&gt;0.0.0&lt;/code&gt;. Set the &lt;code&gt;version:&lt;/code&gt; field in any Daml project to 0.0.0 and it will use the locally installed one.&lt;/p&gt; &#xA;&lt;p&gt;On Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel build //release:sdk-release-tarball&#xA;tar -vxf .\bazel-bin\release\sdk-release-tarball-ce.tar.gz&#xA;cd sdk-*&#xA;daml\daml.exe install . --install-assistant=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That should tell you what to put in the path, something along the lines of &lt;code&gt;C:\Users\admin\AppData\Roaming\daml\bin&lt;/code&gt;. Note that the Windows build is not yet fully functional.&lt;/p&gt; &#xA;&lt;h3&gt;Caching: build speed and disk space considerations&lt;/h3&gt; &#xA;&lt;p&gt;Bazel has a lot of nice properties, but they come at the cost of frequently rebuilding &#34;the world&#34;. To make that bearable, we make extensive use of caching. Most artifacts should be cached in our CDN, which is configured in &lt;code&gt;.bazelrc&lt;/code&gt; in this project.&lt;/p&gt; &#xA;&lt;p&gt;However, even then, you may end up spending a lot of time (and bandwidth!) downloading artifacts from the CDN. To alleviate that, by default, our build will create a subfolder &lt;code&gt;.bazel-cache&lt;/code&gt; in this project and keep an on-disk cache. &lt;strong&gt;This can take about 10GB&lt;/strong&gt; at the time of writing.&lt;/p&gt; &#xA;&lt;p&gt;To disable the disk cache, remove the following lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;build:linux --disk_cache=.bazel-cache&#xA;build:darwin --disk_cache=.bazel-cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from the &lt;code&gt;.bazelrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you work with multiple copies of this repository, you can point all of them to the same disk cache by overwriting these configs in either a &lt;code&gt;.bazelrc.local&lt;/code&gt; file in each copy, or a &lt;code&gt;~/.bazelrc&lt;/code&gt; file in your home directory.&lt;/p&gt; &#xA;&lt;h3&gt;Shared memory segment issues&lt;/h3&gt; &#xA;&lt;p&gt;On macOS at least, it looks like our setup does not always properly close the resources PostgreSQL uses. After a number of test runs, you may encounter an error message along the lines of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FATAL:  could not create shared memory segment: No space left on device&#xA;DETAIL:  Failed system call was shmget(key=5432001, size=56, 03600).&#xA;HINT:  This error does *not* mean that you have run out of disk space. It occurs either if all available shared memory IDs have been taken, in which case you need to raise the SHMMNI parameter in your kernel, or because the system&#39;s overall limit for shared memory has been reached.&#xA;        The PostgreSQL documentation contains more information about shared memory configuration.&#xA;child process exited with exit code 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, this is a memory leak, so increasing &lt;code&gt;SHMNI&lt;/code&gt; (or &lt;code&gt;SHMALL&lt;/code&gt; etc.) as suggested will only delay the issue. You can look at the existing shared memory segments on your system by running &lt;code&gt;ipcs -mcopt&lt;/code&gt;; this will print a line per segment, indicating the process ID of the last process to connect to the segment as well as the last access time and the number of currently connected processes.&lt;/p&gt; &#xA;&lt;p&gt;If you identify segments with no connected processes, and you are confident you can remove them, you can do so with &lt;code&gt;ipcrm $sid&lt;/code&gt;, where &lt;code&gt;$sid&lt;/code&gt; is the process ID displayed (as the second column) by &lt;code&gt;ipcs&lt;/code&gt;. Not many macOS applications use shared memory segments; &lt;strong&gt;if you have verified that all the existing memory segments on your machine need to be deleted&lt;/strong&gt;, e.g. because they have all been created by PostgreSQL instances that are no longer running, here is a Bash invocation you can use to remove all shared memory segments from your system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a dangerous command. Make sure you understand what it does before running it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for shmid in $(ipcs -m | sed 1,3d | awk &#39;{print $2}&#39; | sed &#39;$d&#39;); do ipcrm -m $shmid; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Haskell profiling builds&lt;/h3&gt; &#xA;&lt;p&gt;To build Haskell executables with profiling enabled, pass &lt;code&gt;-c dbg&lt;/code&gt; to Bazel, e.g. &lt;code&gt;bazel build -c dbg damlc&lt;/code&gt;. If you want to build the whole SDK with profiling enabled use &lt;code&gt;daml-sdk-head --profiling&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>