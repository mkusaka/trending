<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-05T01:36:30Z</updated>
  <subtitle>Weekly Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>save-nix-together/open-letter</title>
    <updated>2024-05-05T01:36:30Z</updated>
    <id>tag:github.com,2024-05-05:/save-nix-together/open-letter</id>
    <link href="https://github.com/save-nix-together/open-letter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;an open letter to the NixOS foundation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open Letter to the NixOS Foundation&lt;/h1&gt; &#xA;&lt;p&gt;The full content of the letter can be viewed at &lt;a href=&#34;https://save-nix-together.org&#34;&gt;save-nix-together.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Signing&lt;/h2&gt; &#xA;&lt;p&gt;This is the singing repo for the &lt;em&gt;open letter to the NixOS foundation&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://github.com/save-nix-together/open-letter/edit/main/content/posts/signatures.md&#34;&gt;sign the open letter here&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If GitHub asks you to fork the letter, press the green button in the center to do so.&lt;/li&gt; &#xA; &lt;li&gt;Add your signature anywhere on the list. It can be anything -- handle + email, name + email, just handle, just name, etc.&lt;/li&gt; &#xA; &lt;li&gt;Click the green &#34;commit changes&#34; button at the top right.&lt;/li&gt; &#xA; &lt;li&gt;Click green &#34;&lt;em&gt;propose changes&lt;/em&gt;&#34; button on the dialog that appears to open a PR.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tobychui/zoraxy</title>
    <updated>2024-05-05T01:36:30Z</updated>
    <id>tag:github.com,2024-05-05:/tobychui/zoraxy</id>
    <link href="https://github.com/tobychui/zoraxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;General purpose (reverse) proxy and forwarding tool for networking noobs. Now written in Go!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tobychui/zoraxy/main/img/title.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Zoraxy&lt;/h1&gt; &#xA;&lt;p&gt;General purpose request (reverse) proxy and forwarding tool for networking noobs. Now written in Go!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Zoraxy v3 HTTP proxy config is not compatible with the older v2. If you are looking for the legacy version of Zoraxy, take a look at the &lt;a href=&#34;https://github.com/tobychui/zoraxy/tree/v2&#34;&gt;v2 branch&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple to use interface with detail in-system instructions&lt;/li&gt; &#xA; &lt;li&gt;Reverse Proxy (HTTP/2) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Virtual Directory&lt;/li&gt; &#xA;   &lt;li&gt;WebSocket Proxy (automatic, no set-up needed)&lt;/li&gt; &#xA;   &lt;li&gt;Basic Auth&lt;/li&gt; &#xA;   &lt;li&gt;Alias Hostnames&lt;/li&gt; &#xA;   &lt;li&gt;Custom Headers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Redirection Rules&lt;/li&gt; &#xA; &lt;li&gt;TLS / SSL setup and deploy &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ACME features like auto-renew to serve your sites in http&lt;strong&gt;s&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;SNI support (and SAN certs)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Blacklist / Whitelist by country or IP address (single IP, CIDR or wildcard for beginners)&lt;/li&gt; &#xA; &lt;li&gt;Global Area Network Controller Web UI (ZeroTier not included)&lt;/li&gt; &#xA; &lt;li&gt;TCP Tunneling / Proxy&lt;/li&gt; &#xA; &lt;li&gt;Integrated Up-time Monitor&lt;/li&gt; &#xA; &lt;li&gt;Web-SSH Terminal&lt;/li&gt; &#xA; &lt;li&gt;Utilities &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CIDR IP converters&lt;/li&gt; &#xA;   &lt;li&gt;mDNS Scanner&lt;/li&gt; &#xA;   &lt;li&gt;IP Scanner&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Others &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Basic single-admin management mode&lt;/li&gt; &#xA;   &lt;li&gt;External permission management system for easy system integration&lt;/li&gt; &#xA;   &lt;li&gt;SMTP config for password reset&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tobychui/zoraxy/releases/latest/download/zoraxy_windows_amd64.exe&#34;&gt;Windows&lt;/a&gt; /&lt;a href=&#34;https://github.com/tobychui/zoraxy/releases/latest/download/zoraxy_linux_amd64&#34;&gt;Linux (amd64)&lt;/a&gt; /&lt;a href=&#34;https://github.com/tobychui/zoraxy/releases/latest/download/zoraxy_linux_arm64&#34;&gt;Linux (arm64)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For other systems or architectures, please see &lt;a href=&#34;https://github.com/tobychui/zoraxy/releases/latest/&#34;&gt;Release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build from Source&lt;/h2&gt; &#xA;&lt;p&gt;Requires Go 1.22 or higher&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/tobychui/zoraxy&#xA;cd ./zoraxy/src/&#xA;go mod tidy&#xA;go build&#xA;&#xA;sudo ./zoraxy -port=:8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Zoraxy provides basic authentication system for standalone mode. To use it in standalone mode, follow the instructionss below for your desired deployment platform.&lt;/p&gt; &#xA;&lt;h3&gt;Standalone Mode&lt;/h3&gt; &#xA;&lt;p&gt;Standalone mode is the default mode for Zoraxy. This allows a single account to manage your reverse proxy server, just like a home router. This mode is suitable for new owners to homelabs or makers starting growing their web services into multiple servers.&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ./zoraxy -port=:8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;Download the binary executable and double click the binary file to start it.&lt;/p&gt; &#xA;&lt;h4&gt;Raspberry Pi&lt;/h4&gt; &#xA;&lt;p&gt;The installation method is same as Linux. If you are using a Raspberry Pi 4 or newer models, pick the arm64 release. For older version of Pis, use the arm (armv6) version instead.&lt;/p&gt; &#xA;&lt;h4&gt;Other ARM SBCs or Android phone with Termux&lt;/h4&gt; &#xA;&lt;p&gt;The installation method is same as Linux. For other ARM SBCs, please refer to your SBC&#39;s CPU architecture and pick the one that is suitable for your device.&lt;/p&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/tobychui/zoraxy/tree/main/docker&#34;&gt;/docker&lt;/a&gt; folder for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Start Paramters&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage of zoraxy:&#xA;  -autorenew int&#xA;        ACME auto TLS/SSL certificate renew check interval (seconds) (default 86400)&#xA;  -fastgeoip&#xA;        Enable high speed geoip lookup, require 1GB extra memory (Not recommend for low end devices)&#xA;  -info&#xA;        Show information about this program in JSON&#xA;  -log&#xA;        Log terminal output to file (default true)&#xA;  -mdns&#xA;        Enable mDNS scanner and transponder (default true)&#xA;  -noauth&#xA;        Disable authentication for management interface&#xA;  -port string&#xA;        Management web interface listening port (default &#34;:8000&#34;)&#xA;  -sshlb&#xA;        Allow loopback web ssh connection (DANGER)&#xA;  -version&#xA;        Show version of this server&#xA;  -webfm&#xA;        Enable web file manager for static web server root folder (default true)&#xA;  -webroot string&#xA;        Static web server root folder. Only allow chnage in start paramters (default &#34;./www&#34;)&#xA;  -ztauth string&#xA;        ZeroTier authtoken for the local node&#xA;  -ztport int&#xA;        ZeroTier controller API port (default 9993)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;External Permission Management Mode&lt;/h3&gt; &#xA;&lt;p&gt;If you already have an upstream reverse proxy server in place with permission management, you can use Zoraxy in noauth mode. To enable noauth mode, start Zoraxy with the following flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./zoraxy -noauth=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: For security reaons, you should only enable no-auth if you are running Zoraxy in a trusted environment or with another authentication management proxy in front.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tobychui/zoraxy/main/img/screenshots/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tobychui/zoraxy/main/img/screenshots/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;More screenshots on the wikipage &lt;a href=&#34;https://github.com/tobychui/zoraxy/wiki/Screenshots&#34;&gt;Screenshots&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;There is a wikipage with &lt;a href=&#34;https://github.com/tobychui/zoraxy/wiki/FAQ---Frequently-Asked-Questions&#34;&gt;Frequently-Asked-Questions&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Global Area Network Controller&lt;/h2&gt; &#xA;&lt;p&gt;This project also compatible with &lt;a href=&#34;https://www.zerotier.com/&#34;&gt;ZeroTier&lt;/a&gt;. However, due to licensing issues, ZeroTier is not included in the binary.&lt;/p&gt; &#xA;&lt;p&gt;To use Zoraxy with ZeroTier, assuming you already have a valid license, install ZeroTier on your host and then run Zoraxy in sudo mode (or Run As Administrator if you are on Windows). The program will automatically grab the authtoken in the correct location on your host.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer not to run Zoraxy in sudo mode or you have some weird installation profile, you can also pass in the ZeroTier auth token using the following flags::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./zoraxy -ztauth=&#34;your_zerotier_authtoken&#34; -ztport=9993&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ZeroTier auth token can usually be found at &lt;code&gt;/var/lib/zerotier-one/authtoken.secret&lt;/code&gt; or &lt;code&gt;C:\ProgramData\ZeroTier\One\authtoken.secret&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This allows you to have an infinite number of network members in your Global Area Network controller. For more technical details, see &lt;a href=&#34;https://docs.zerotier.com/self-hosting/network-controllers/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Web SSH&lt;/h2&gt; &#xA;&lt;p&gt;Web SSH currently only supports Linux based OSes. The following platforms are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;linux/amd64&lt;/li&gt; &#xA; &lt;li&gt;linux/arm64&lt;/li&gt; &#xA; &lt;li&gt;linux/armv6 (experimental)&lt;/li&gt; &#xA; &lt;li&gt;linux/386 (experimental)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Loopback Connection&lt;/h3&gt; &#xA;&lt;p&gt;Loopback web SSH connection, by default, is disabled. This means that if you are trying to connect to an address like 127.0.0.1 or localhost, the system will reject your connection for security reasons. To enable loopback for testing or development purpose, use the following flags to override the loopback checking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./zoraxy -sshlb=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sponsor This Project&lt;/h2&gt; &#xA;&lt;p&gt;If you like the project and want to support us, please consider a donation. You can use the links below&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paypal.me/tobychui&#34;&gt;tobychui (Primary author)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PassiveLemon (Docker compatibility maintainer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is open-sourced under AGPL. I open-sourced this project so everyone can check for security issues and benefit all users. &lt;strong&gt;If you plan to use this project in a commercial environment (which violate the AGPL terms), please contact &lt;a href=&#34;mailto:toby@imuslab.com&#34;&gt;toby@imuslab.com&lt;/a&gt; for an alternative license.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ironhack-labs/lab-react-iron-travels</title>
    <updated>2024-05-05T01:36:30Z</updated>
    <id>tag:github.com,2024-05-05:/ironhack-labs/lab-react-iron-travels</id>
    <link href="https://github.com/ironhack-labs/lab-react-iron-travels" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/23629340/40541063-a07a0a8a-601a-11e8-91b5-2f13e4e6b441.png&#34; alt=&#34;logo_ironhack_blue 7&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LAB | React Iron Travels&lt;/h1&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;h2&gt;Learning Goals&lt;/h2&gt; &lt;/summary&gt; &#xA; &lt;p&gt;This exercise allows you to practice and apply the concepts and techniques taught in class.&lt;/p&gt; &#xA; &lt;p&gt;Upon completion of this exercise, you will be able to:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Render array data as a list in a React app&lt;/li&gt; &#xA;  &lt;li&gt;Correctly set a &lt;code&gt;key&lt;/code&gt; attribute to the list of items&lt;/li&gt; &#xA;  &lt;li&gt;Remove items from a list&lt;/li&gt; &#xA;  &lt;li&gt;Use operators &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; to conditionally render content&lt;/li&gt; &#xA;  &lt;li&gt;Extract new components and split the responsibilities of components&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In this exercise, you will practice rendering lists from array data and using conditional rendering in React.&lt;/p&gt; &#xA;&lt;p&gt;The objective of this exercise is to create a small React app that displays different travel plans, for a fictional company - Iron Travels (keeping in line with our Iron-labeling tradition at Ironhack).&lt;/p&gt; &#xA;&lt;p&gt;The app that you will be creating may seem simple, but the concepts you are practicing are fundamental to every application or web platform. By working with lists and conditional rendering on a smaller scale, you will gain practical knowledge of how they work and how to use them. Once you understand these concepts, you will be able to apply them in different ways and build a variety of apps.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://education-team-2020.s3.eu-west-1.amazonaws.com/web-dev/labs/lab-react-iron-travels/00-introduction.png&#34; alt=&#34;Example - Finished LAB&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork this repo&lt;/li&gt; &#xA; &lt;li&gt;Clone this repo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd lab-react-iron-travels&#xA;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Upon completion, run the following commands:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git add .&#xA;git commit -m &#34;done&#34;&#xA;git push origin master&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a Pull Request and submit your assignment.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Iteration 0 | Components folder&lt;/h3&gt; &#xA;&lt;p&gt;Inside of the &lt;code&gt;src/&lt;/code&gt; folder, create a new folder named &lt;code&gt;components&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;components&lt;/code&gt; folder to store all the components that you create in the following iterations.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Iteration 1 | List and Keys - &lt;code&gt;TravelList&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Create a&amp;nbsp;&lt;code&gt;TravelList&lt;/code&gt;&amp;nbsp;component that displays the list of all the items coming from the file&amp;nbsp;&lt;code&gt;src/data/travel-plans.json&lt;/code&gt;. Remember to import the json data in the component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import travelPlansData from &#34;../assets/travel-plans.json&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;TravelList /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Expected Result&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://education-team-2020.s3.eu-west-1.amazonaws.com/web-dev/labs/lab-react-iron-travels/01-list.png&#34; alt=&#34;TravelList component basic&#34; width=&#34;700&#34;&gt; &lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Hint&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;After importing the JSON data remember to store it in the component state. Use the &lt;code&gt;useState&lt;/code&gt; hook to create a new state variable.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Iteration 2 | Conditional Rendering - Labels&lt;/h3&gt; &#xA;&lt;p&gt;Update the &lt;code&gt;TravelList&lt;/code&gt; component to display labels based on the cost (&lt;code&gt;totalCost&lt;/code&gt; property) of each travel plan. Here’s how you should implement it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Travel plans that cost &lt;strong&gt;&lt;code&gt;350&lt;/code&gt; or less&lt;/strong&gt; should have a label &lt;strong&gt;Great Deal&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Travel plans that cost &lt;strong&gt;&lt;code&gt;1500&lt;/code&gt; or more&lt;/strong&gt; should have the label &lt;strong&gt;Premium&lt;/strong&gt;.&lt;/p&gt; &lt;br&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, if the travel plan includes an all-inclusive package (&lt;code&gt;allInclusive&lt;/code&gt; property), render a label &lt;strong&gt;All Inclusive&lt;/strong&gt; in addition to the cost label.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Expected Result&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://education-team-2020.s3.eu-west-1.amazonaws.com/web-dev/labs/lab-react-iron-travels/02-labels.png&#34; alt=&#34;TravelList items with labels&#34; width=&#34;700&#34;&gt; &lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Iteration 3 | Removing Items - Delete Button&lt;/h3&gt; &#xA;&lt;p&gt;Update the &lt;code&gt;TravelList&lt;/code&gt; component and display a delete button on each list item. When the user clicks on the button, the corresponding travel plan should be removed from the list.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Expected Result&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://education-team-2020.s3.eu-west-1.amazonaws.com/web-dev/labs/lab-react-iron-travels/03-delete-items.gif&#34; alt=&#34;Delete list item&#34; width=&#34;700&#34;&gt; &lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Hint&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;You can use the &lt;code&gt;id&lt;/code&gt; property of each travel plan to identify the item to remove.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Bonus: Iteration 4 | Extract Component&lt;/h3&gt; &#xA;&lt;p&gt;Create a new component named &lt;code&gt;TravelPlanCard&lt;/code&gt; and move the JSX code that renders each travel plan from the &lt;code&gt;TravelList&lt;/code&gt; component to the new component. The component should take 1 prop:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;plan&lt;/code&gt;: An object with the travel plan data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;  &amp;lt;TravelPlanCard plan={plan} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Bonus: Iteration 5 | Favorites&lt;/h3&gt; &#xA;&lt;p&gt;Render a separate new list with the heading &lt;em&gt;&lt;strong&gt;Favorites&lt;/strong&gt;&lt;/em&gt; on the right side of the current list. Each list item should have a favorite button (&lt;kbd&gt;♡&lt;/kbd&gt;) in addition to the delete button.&lt;/p&gt; &#xA;&lt;p&gt;When the user clicks on the favorite button (&lt;kbd&gt;♡&lt;/kbd&gt;) the corresponding travel plan should be added to the favorites list.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the background color of the button should change with each click. You can use the following array of colors: &lt;code&gt;[&#34;purple&#34;, &#34;blue&#34;, &#34;green&#34;, &#34;yellow&#34;, &#34;orange&#34;, &#34;red&#34;]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;TravelList /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Expected Result&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://education-team-2020.s3.eu-west-1.amazonaws.com/web-dev/labs/lab-react-iron-travels/04-favorites.gif&#34; alt=&#34;Favorites list&#34; width=&#34;700&#34;&gt; &lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Happy coding! &lt;span&gt;💙&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
</feed>