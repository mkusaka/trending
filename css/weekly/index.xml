<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-05T08:36:40Z</updated>
  <subtitle>Weekly Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joy-of-react/word-clone</title>
    <updated>2023-02-05T08:36:40Z</updated>
    <id>tag:github.com,2023-02-05:/joy-of-react/word-clone</id>
    <link href="https://github.com/joy-of-react/word-clone" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Word Game&lt;/h1&gt; &#xA;&lt;h2&gt;Joy of React, Project I&lt;/h2&gt; &#xA;&lt;p&gt;In this project, we&#39;ll recreate a popular online word game, Wordle:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joy-of-react/word-clone/main/docs/wordle-demo.gif&#34; alt=&#34;Demo showing the finished product, our Wordle clone&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In Wordle, users have 6 attempts to guess a 5-letter word. You&#39;re helped along the way by ruling out letters that aren&#39;t in the word, and being told whether the correct letters are in the correct location or not.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This project is created with create-react-app. It&#39;s intended to be run locally, on your computer, using Node.js and NPM.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re not sure how to run a local development server, or if you run into some trouble, check out the &lt;a href=&#34;https://courses.joshwcomeau.com/joy-of-react/project-wordle/03-dev-server&#34;&gt;“Local Development” instructions&lt;/a&gt;. It includes all the info you need to know, including troubleshooting common issues.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE: This project is tricky!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;This project is meant to be challenging, because I believe that the best way to learn is to be challenged. Depending on your experience level, though, you may feel like it&#39;s unreasonably difficult.&lt;/p&gt; &#xA; &lt;p&gt;This workshop is split into 5 exercises, and each exercise has a solution video. If you spend more than 10 minutes stuck on an exercise, I encourage you to &lt;strong&gt;watch the solution.&lt;/strong&gt; If things are still unclear after that, please ask questions in the Discord community!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Exercise 1: GuessInput&lt;/h2&gt; &#xA;&lt;p&gt;First thing’s first: we need a way to submit guesses!&lt;/p&gt; &#xA;&lt;p&gt;In the standard Wordle game, a global event listener registers keypresses. This isn&#39;t very accessible, and so we&#39;re going to do things a little bit differently.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll render a little form that holds a text input:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joy-of-react/word-clone/main/docs/guess-input.png&#34; alt=&#34;Screenshot showing the guess input UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Your job in this first exercise is to create a new component for this UI, and render it inside the &lt;code&gt;Game&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a minimal representation of the markup expected to be produced by this new component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form class=&#34;guess-input-wrapper&#34;&amp;gt;&#xA;  &amp;lt;label for=&#34;guess-input&#34;&amp;gt;Enter guess:&amp;lt;/label&amp;gt;&#xA;  &amp;lt;input id=&#34;guess-input&#34; type=&#34;text&#34; /&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is the &lt;em&gt;minimal&lt;/em&gt; markup required, for the styles to be applied and for accessibility. &lt;strong&gt;It isn&#39;t set in stone!&lt;/strong&gt; Feel free to make tweaks in order to match all of the acceptance criteria below.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a quick screen recording of the expected result:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joy-of-react/word-clone/main/docs/submit-guess.gif&#34; alt=&#34;Screen recording showing the guess being entered. It gets logged to the console, and erased from the input&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Acceptance Criteria:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new component. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Don&#39;t forget, you can use an NPM script to generate the scaffolding for you!)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;This component should render a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag, including a label and a text input.&lt;/li&gt; &#xA; &lt;li&gt;The text input should be controlled by React state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The user&#39;s input should be converted to ALL UPPERCASE.&lt;/strong&gt; No lower-case letters allowed.&lt;/li&gt; &#xA; &lt;li&gt;The input should have a minimum and maximum length of 5.&lt;/li&gt; &#xA; &lt;li&gt;When the form is submitted: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The entered value should be logged to the console (for now)&lt;/li&gt; &#xA;   &lt;li&gt;The input should be reset to an empty string.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exercise 2: Keeping track of guesses&lt;/h2&gt; &#xA;&lt;p&gt;Instead of obliterating the user&#39;s guess, let&#39;s add it to a list, so we can show the user all of their previously-submitted guesses!&lt;/p&gt; &#xA;&lt;p&gt;For now, we aren&#39;t worrying about any game-logic stuff. We&#39;re still setting up the scaffolding, getting some of the component + DOM structure in place.&lt;/p&gt; &#xA;&lt;p&gt;Our goal in this exercise is to render each of the user&#39;s guesses:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joy-of-react/word-clone/main/docs/printed-word-list.gif&#34; alt=&#34;Screen recording showing each guess printed out above the text input from the last exercise&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;And here&#39;s an example of the expected DOM structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&#34;guess-results&#34;&amp;gt;&#xA;  &amp;lt;p class=&#34;guess&#34;&amp;gt;FIRST&amp;lt;/p&amp;gt;&#xA;  &amp;lt;p class=&#34;guess&#34;&amp;gt;GUESS&amp;lt;/p&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Acceptance Criteria:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A new component should be created, to render previous guesses.&lt;/li&gt; &#xA; &lt;li&gt;When the user submits their guess, that value should be rendered within this new component.&lt;/li&gt; &#xA; &lt;li&gt;There should be no key warnings in the console!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exercise 3: Guess slots&lt;/h2&gt; &#xA;&lt;p&gt;In the real Wordle game, the initial screen shows 6 rows of 5 squares:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joy-of-react/word-clone/main/docs/wordle-squares.png&#34; alt=&#34;Screenshot of real Wordle, showing a 5x6 grid&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this exercise, we&#39;ll update our code to display a similar grid. We&#39;ll show 6 rows of guesses, no matter how many guesses the user has submitted, and each row will consist of 5 cells.&lt;/p&gt; &#xA;&lt;p&gt;As the user submits guesses, their guess will populate the cells:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joy-of-react/word-clone/main/docs/words-in-cells.gif&#34; alt=&#34;Screen recording showing each guess being added to the 5x6 grid&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We need to update our DOM structure for the &lt;code&gt;GuessResults&lt;/code&gt; component so that it looks something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&#34;guess-results&#34;&amp;gt;&#xA;  &amp;lt;p class=&#34;guess&#34;&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;F&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;I&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;R&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;S&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;T&amp;lt;/span&amp;gt;&#xA;  &amp;lt;/p&amp;gt;&#xA;  &amp;lt;p class=&#34;guess&#34;&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;G&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;U&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;E&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;S&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;S&amp;lt;/span&amp;gt;&#xA;  &amp;lt;/p&amp;gt;&#xA;  &amp;lt;p class=&#34;guess&#34;&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;  &amp;lt;/p&amp;gt;&#xA;  &amp;lt;p class=&#34;guess&#34;&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;  &amp;lt;/p&amp;gt;&#xA;  &amp;lt;p class=&#34;guess&#34;&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;  &amp;lt;/p&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Things to know:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are two things that should help you tackle this exercise:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You can use the &lt;code&gt;range&lt;/code&gt; utility to create arrays of a specified length to map over. It&#39;s provided in &lt;code&gt;/src/utils.js&lt;/code&gt;. Check out the “Range Utility” lesson in the course for more info on how to use it.&lt;/li&gt; &#xA; &lt;li&gt;Inside &lt;code&gt;/src/constants.js&lt;/code&gt;, you&#39;ll find a constant, &lt;code&gt;NUM_OF_GUESSES_ALLOWED&lt;/code&gt;. You should import and use this constant when generating the set of guesses. This would make it easy for us to change the difficulty of the game later on, by increasing/decreasing the # of guesses.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Acceptance Criteria:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new &lt;code&gt;Guess&lt;/code&gt; component. 6 instances should be rendered at all times, no matter how many guesses have been submitted.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;Guess&lt;/code&gt; component should render 5 spans, each with the class of &lt;code&gt;cell&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Each cell should contain a letter, if the &lt;code&gt;Guess&lt;/code&gt; instance has been given a value. If not, the cell should be blank.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;NUM_OF_GUESSES_ALLOWED&lt;/code&gt; constant, when needed.&lt;/li&gt; &#xA; &lt;li&gt;No &lt;code&gt;key&lt;/code&gt; warnings in the console.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exercise 4: Game logic&lt;/h2&gt; &#xA;&lt;p&gt;Alright: over the first 3 exercises, we&#39;ve been setting up all of the structure and scaffolding. It&#39;s time to do some game-logic stuff!&lt;/p&gt; &#xA;&lt;p&gt;In this exercise, we&#39;ll add some CSS classes to color the background of each cell, based on the results and the correct answer:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joy-of-react/word-clone/main/docs/words-with-backgrounds.gif&#34; alt=&#34;Screen recording. The guesses are applied to the game board, and the background colors update accordingly&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inside &lt;code&gt;/src/game-helpers.js&lt;/code&gt;, you&#39;ll find a helper function, &lt;code&gt;checkGuess&lt;/code&gt;. As parameters, it takes a single guess, as well as the correct answer. It returns an array that contains the status for each letter.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;checkGuess(&#39;WHALE&#39;, &#39;LEARN&#39;);&#xA;/*&#xA;  Returns:&#xA;&#xA;  [&#xA;    { letter: &#39;W&#39;, status: &#39;incorrect&#39; },&#xA;    { letter: &#39;H&#39;, status: &#39;incorrect&#39; },&#xA;    { letter: &#39;A&#39;, status: &#39;correct&#39; },&#xA;    { letter: &#39;L&#39;, status: &#39;misplaced&#39; },&#xA;    { letter: &#39;E&#39;, status: &#39;misplaced&#39; },&#xA;  ]&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are 3 possible statuses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;correct&lt;/strong&gt; — this slot is perfect. It&#39;s the right letter in the right place.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;misplaced&lt;/strong&gt; — this letter does exist in the word, but in a different slot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;incorrect&lt;/strong&gt; — this letter is not found in the word at all.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the example above, &lt;code&gt;W&lt;/code&gt; and &lt;code&gt;H&lt;/code&gt; aren&#39;t found in the word &lt;code&gt;LEARN&lt;/code&gt;, and so they&#39;re marked as “incorrect”. &lt;code&gt;A&lt;/code&gt; is correct, since it&#39;s in the 3rd slot in each word. The other two letters, &lt;code&gt;L&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt;, are meant to be in other slots.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;These statuses correspond with CSS classes.&lt;/strong&gt; The &lt;code&gt;correct&lt;/code&gt; status has a &lt;code&gt;correct&lt;/code&gt; class name, which will apply the green background when applied to a cell. Same thing for &lt;code&gt;misplaced&lt;/code&gt; and &lt;code&gt;incorrect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Your task is to use this function to validate the user&#39;s guesses, and apply the correct CSS classes. The final output for a given guess should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p class=&#34;guess&#34;&amp;gt;&#xA;  &amp;lt;span class=&#34;cell incorrect&#34;&amp;gt;W&amp;lt;/span&amp;gt;&#xA;  &amp;lt;span class=&#34;cell incorrect&#34;&amp;gt;H&amp;lt;/span&amp;gt;&#xA;  &amp;lt;span class=&#34;cell correct&#34;&amp;gt;A&amp;lt;/span&amp;gt;&#xA;  &amp;lt;span class=&#34;cell misplaced&#34;&amp;gt;L&amp;lt;/span&amp;gt;&#xA;  &amp;lt;span class=&#34;cell misplaced&#34;&amp;gt;E&amp;lt;/span&amp;gt;&#xA;&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Acceptance Criteria:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Import the &lt;code&gt;checkGuess&lt;/code&gt; function from &lt;code&gt;/src/game-helpers.js&lt;/code&gt;, and use it to validate each of the user&#39;s guesses&lt;/li&gt; &#xA; &lt;li&gt;When rendering the letters in the &lt;code&gt;Guess&lt;/code&gt; component, apply the letter&#39;s &lt;code&gt;status&lt;/code&gt; to the &lt;code&gt;cell&lt;/code&gt; element.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Empty&#34; guess slots should have the same markup as before: &lt;code&gt;&amp;lt;span class=&#34;cell&#34;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exercise 5: winning and losing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re so close! We only have one concern left: ending the game.&lt;/p&gt; &#xA;&lt;p&gt;If the user wins the game, a happy banner should be shown:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joy-of-react/word-clone/main/docs/happy-banner.png&#34; alt=&#34;Screenshot of a won game, showing a green success banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the user loses the game, by contrast, a sad banner should be shown:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joy-of-react/word-clone/main/docs/sad-banner.png&#34; alt=&#34;Screenshot of a won game, showing a red failure banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The user wins the game when their guessed word is identical to the &lt;code&gt;answer&lt;/code&gt;. They lose the game if they submit 6 guesses without winning.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&#34;happy banner&#34;&amp;gt;&#xA;  &amp;lt;p&amp;gt;&#xA;    &amp;lt;strong&amp;gt;Congratulations!&amp;lt;/strong&amp;gt; Got it in&#xA;    &amp;lt;strong&amp;gt;3 guesses&amp;lt;/strong&amp;gt;.&#xA;  &amp;lt;/p&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&#34;sad banner&#34;&amp;gt;&#xA;  &amp;lt;p&amp;gt;Sorry, the correct answer is &amp;lt;strong&amp;gt;LEARN&amp;lt;/strong&amp;gt;.&amp;lt;/p&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the game is over, one of these banners should be shown, and the text input should be disabled so that no new guesses can be typed or submitted.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Acceptance Criteria:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the user wins the game, a happy banner should be shown.&lt;/li&gt; &#xA; &lt;li&gt;If the user loses the game, a sad banner should be shown&lt;/li&gt; &#xA; &lt;li&gt;When the game is over, the text input should be disabled.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s up to you to decide how to structure the banner! Feel free to create new component(s) if you think it&#39;s warranted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Stretch Goals&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re looking for an additional challenge, give these stretch goals a shot!&lt;/p&gt; &#xA;&lt;p&gt;Unlike the standard exercises, no solution video is available for these goals, though the raw solution source code is available. See the solutions page on the Course Platform.&lt;/p&gt; &#xA;&lt;p&gt;Also, feel free to come up with &lt;em&gt;your own&lt;/em&gt; stretch goals! If there&#39;s a thing you&#39;d like to implement, go for it!!&lt;/p&gt; &#xA;&lt;h2&gt;Visual Keyboard&lt;/h2&gt; &#xA;&lt;p&gt;In the real Wordle game, a keyboard is shown below the guesses:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joy-of-react/word-clone/main/docs/bottom-keyboard-original.png&#34; alt=&#34;Screenshot of the Wordle game, showing a keyboard below the game board&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This keyboard is an important game element, since it makes it easy to tell which letters have already been tested.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what the keyboard looked like in my implementation:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joy-of-react/word-clone/main/docs/bottom-keyboard-clone.png&#34; alt=&#34;Screenshot of our Wordle clone, showing a keyboard below the game board&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: Styling isn&#39;t provided for stretch goals.&lt;/strong&gt; You&#39;ll need to come up with your own CSS. You can add it to &lt;code&gt;src/styles.css&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Relatedly:&lt;/strong&gt; When you add a keyboard, it&#39;ll likely be pushed &#34;below the fold&#34; on smaller windows. Don&#39;t worry about trying to fit everything in the viewport at once.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Acceptance Criteria:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Render 3 rows of letters at the bottom of the screen&lt;/li&gt; &#xA; &lt;li&gt;The colors of each letter should match the colors shown in the game board: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Correct letters should have a green background and white text&lt;/li&gt; &#xA;   &lt;li&gt;Misplaced letters should have a yellow background and white text&lt;/li&gt; &#xA;   &lt;li&gt;Incorrect letters should have a dark gray background and white text&lt;/li&gt; &#xA;   &lt;li&gt;Unused letters should have a light gray background and black text&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;No need to include &#34;Enter&#34; and &#34;Backspace&#34; keys.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t worry too much about the styling, trying to get the alignment to look exactly like a real keyboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Restart button&lt;/h2&gt; &#xA;&lt;p&gt;One of Wordle&#39;s hooks is that you can only play 1 game per day: there&#39;s a new word for all users every day. As a result, there&#39;s no &#34;restart button&#34;, you just have to wait until the next day.&lt;/p&gt; &#xA;&lt;p&gt;In our clone, we aren&#39;t picking a new word every day, we&#39;re picking a new word when the app first loads.&lt;/p&gt; &#xA;&lt;p&gt;Update the game so that it can be restarted. Add a &#34;Restart game&#34; button to the banner shown when the user wins or loses.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;HINT:&lt;/em&gt; This will require moving the &lt;code&gt;answer&lt;/code&gt; into state. You&#39;ll want to do the random word selection inside a callback function, the secondary way to initialize state described here: &lt;a href=&#34;https://courses.joshwcomeau.com/joy-of-react/02-state/03-use-state#initial-value&#34;&gt;https://courses.joshwcomeau.com/joy-of-react/02-state/03-use-state#initial-value&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Acceptance Criteria:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &#34;Restart Game&#34; button is shown at the end of the game. You can put this button in the &lt;code&gt;GameOverBanner&lt;/code&gt;, or wherever else you&#39;d like!&lt;/li&gt; &#xA; &lt;li&gt;Clicking the button should select a new correct word and reset all other state.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>elad2412/the-new-css-reset</title>
    <updated>2023-02-05T08:36:40Z</updated>
    <id>tag:github.com,2023-02-05:/elad2412/the-new-css-reset</id>
    <link href="https://github.com/elad2412/the-new-css-reset" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The New Simple and Lighter CSS Reset&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;⏪ The New CSS Reset&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A package that resets some of the default, user agent based, styles.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It &lt;strong&gt;doesn&#39;t&lt;/strong&gt; affect the &lt;code&gt;display&lt;/code&gt; property and special HTML elements like &lt;code&gt;iframe&lt;/code&gt;, &lt;code&gt;canvas&lt;/code&gt;, &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;svg&lt;/code&gt; and &lt;code&gt;video&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This package is using the new CSS features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The global CSS reset keywords, &lt;code&gt;unset&lt;/code&gt; and &lt;code&gt;revert&lt;/code&gt; keywords.&lt;/li&gt; &#xA; &lt;li&gt;The new property of &lt;code&gt;all&lt;/code&gt; which can reset all properties combined.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;:where()&lt;/code&gt; pseudo-class to remove specificity.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;:not()&lt;/code&gt; pseudo-class with multi arguments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;This package is built with the understanding that we don’t want to use default styles we are getting from the browsers, except for the &lt;code&gt;display&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;h2&gt;How to get started?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run &lt;code&gt;npm i the-new-css-reset&lt;/code&gt; OR &lt;a href=&#34;https://raw.githubusercontent.com/elad2412/the-new-css-reset/main/css/reset.css&#34;&gt;Download the Latest Version&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Once installed, you can use it in two different ways:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Import &lt;code&gt;/css/reset.css&lt;/code&gt; before the regular styles of the project.&lt;/li&gt; &#xA; &lt;li&gt;Include the following snippet in one of the JavaScript/TypeScript entry files:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#34;the-new-css-reset/css/reset.css&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Want to exclude some of the resets?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can revert to the default styles of the browser!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;input[type=&#34;checkbox&#34;],&#xA;input[type=&#34;radio&#34;] {&#xA;    all: revert;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or all input elements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;input,&#xA;textarea,&#xA;select {&#xA;   all: revert;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessibility Recommendation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;To keep your website accessible, don&#39;t forget to take care of the &lt;code&gt;:focus&lt;/code&gt; states.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;:focus { /* focus styles */ }&#xA;&#xA;/* or/and */&#xA;&#xA;:focus-visible { /* keyboard only focus styles */ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Browser Support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png&#34; alt=&#34;Chrome&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png&#34; alt=&#34;Edge&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png&#34; alt=&#34;Firefox&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari/safari_48x48.png&#34; alt=&#34;Safari&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/opera/opera_48x48.png&#34; alt=&#34;Opera&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/samsung-internet/samsung-internet_48x48.png&#34; alt=&#34;Samsung Internet&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;88+ ✔&lt;/td&gt; &#xA;   &lt;td&gt;88+ ✔&lt;/td&gt; &#xA;   &lt;td&gt;84+ ✔&lt;/td&gt; &#xA;   &lt;td&gt;14+ ✔&lt;/td&gt; &#xA;   &lt;td&gt;75+ ✔&lt;/td&gt; &#xA;   &lt;td&gt;15+ ✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>cncf/landscape</title>
    <updated>2023-02-05T08:36:40Z</updated>
    <id>tag:github.com,2023-02-05:/cncf/landscape</id>
    <link href="https://github.com/cncf/landscape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌄 The Cloud Native Interactive Landscape filters and sorts hundreds of projects and products, and shows details including GitHub stars, funding or market cap, first and last commits, contributor counts, headquarters location, and recent tweets.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/cncf/landscape/raw/master/landscape.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod ready-to-code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/1767&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/1767/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://david-dm.org/cncf/landscape&#34;&gt;&lt;img src=&#34;https://img.shields.io/david/cncf/landscape.svg?style=flat-square&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.netlify.com/sites/landscape/deploys&#34;&gt;&lt;img src=&#34;https://api.netlify.com/api/v1/badges/91337728-8166-4c8f-bc39-9159bf97dcbc/deploy-status&#34; alt=&#34;Netlify Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Cloud Native Landscape&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cncf/artwork/master/other/cncf-landscape/horizontal/color/cncf-landscape-horizontal-color.png&#34; alt=&#34;Cloud Native Landscape Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#cloud-native-landscape&#34;&gt;Cloud Native Landscape&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#interactive-version&#34;&gt;Interactive Version&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#how-to-run-on-your-computer&#34;&gt;How to Run on your computer:&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#new-entries&#34;&gt;New Entries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#logos&#34;&gt;Logos&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#dont-use-svgs-with-embedded-text&#34;&gt;Don&#39;t Use SVGs with Embedded Text&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#corrections&#34;&gt;Corrections&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#external-data&#34;&gt;External Data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#best-practices-badge&#34;&gt;Best Practices Badge&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#non-updated-items&#34;&gt;Non-Updated Items&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#formats&#34;&gt;Formats&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#vulnerability-reporting&#34;&gt;Vulnerability reporting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#adjusting-the-landscape-view&#34;&gt;Adjusting the Landscape View&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.cncf.io&#34;&gt;CNCF&lt;/a&gt; Cloud Native Landscape Project is intended as a map through the previously uncharted terrain of cloud native technologies. This attempts to categorize most of the projects and product offerings in the cloud native space. There are many routes to deploying a cloud native application, with CNCF Projects representing a particularly well-traveled path. It has been built in collaboration with &lt;a href=&#34;https://www.redpoint.com/&#34;&gt;Redpoint Ventures&lt;/a&gt; and &lt;a href=&#34;http://www.amplifypartners.com/&#34;&gt;Amplify Partners&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The software for the interactive landscape has been extracted to &lt;a href=&#34;https://github.com/cncf/landscapeapp&#34;&gt;https://github.com/cncf/landscapeapp&lt;/a&gt; where it is used for other landscapes as well. This repo includes all of the data and images specific to the CNCF landscapes.&lt;/p&gt; &#xA;&lt;h2&gt;Interactive Version&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://landscape.cncf.io&#34;&gt;landscape.cncf.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to Run on your computer:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you have node.js installed locally&lt;/strong&gt;, just run &lt;code&gt;./server.js&lt;/code&gt; from the root directory of the project and open &lt;a href=&#34;http://localhost:8001&#34;&gt;http://localhost:8001&lt;/a&gt; once the site is updated.&lt;/p&gt; &#xA;&lt;p&gt;It requires any node.js version 14+ to be installed, does not use any npm package. It is both a server and a site builder - after any change the new site is built.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you prefer to use Docker&lt;/strong&gt;, run &lt;code&gt;make serve-docker&lt;/code&gt;. This will build and run a container serving the landscape at &lt;a href=&#34;http://localhost:8001&#34;&gt;http://localhost:8001&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;New Entries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cncf/toc/raw/master/DEFINITION.md&#34;&gt;Cloud native&lt;/a&gt; projects with at least 300 GitHub stars that clearly fit in an existing category are generally included. Put the project in the single category where it best fits.&lt;/li&gt; &#xA; &lt;li&gt;We generally will only list a company&#39;s product in one box, to represent its major or best-known offering. We occasionally make exceptions for large companies. Note that if we allowed listing the same product or project in multiple boxes, the over 600 logos on the landscape would multiply to many times that many.&lt;/li&gt; &#xA; &lt;li&gt;We are unlikely to create a new category for products/projects as we&#39;d rather find the best home with the current options.&lt;/li&gt; &#xA; &lt;li&gt;We are generally not including commercial versions of open source software. The exception is that we are showing all Certified Kubernetes implementations.&lt;/li&gt; &#xA; &lt;li&gt;Closed source products need to link to a clear description of your product; no stealth mode companies.&lt;/li&gt; &#xA; &lt;li&gt;Your project or company needs a logo and the logo needs to include the name.&lt;/li&gt; &#xA; &lt;li&gt;Crunchbase organization should be the company or organization that controls the software. That is normally the owner of the trademark, whether or not a trademark has been formally filed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you think your company or project should be included, please open a pull request to add it in alphabetical order to &lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/landscape.yml&#34;&gt;landscape.yml&lt;/a&gt;. For the logo, add an SVG to the &lt;code&gt;hosted_logos&lt;/code&gt; directory and reference it there.&lt;/p&gt; &#xA;&lt;p&gt;Netlify will generate a staging server for you to preview your updates. Please check that the logo and information appear correctly and then add &lt;code&gt;LGTM&lt;/code&gt; to the pull request confirming your review and requesting a merge.&lt;/p&gt; &#xA;&lt;h2&gt;Logos&lt;/h2&gt; &#xA;&lt;p&gt;The following rules will produce the most readable and attractive logos:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We require SVGs, as they are smaller, display correctly at any scale, and work on all modern browsers. If you only have the logo in another vector format (like AI or EPS), please open an issue and we&#39;ll convert it to an SVG for you, or you can often do it yourself at &lt;a href=&#34;https://cloudconvert.com/&#34;&gt;https://cloudconvert.com/&lt;/a&gt;. Note that you may need to zip your file to attach it to a GitHub issue. Please note that we require pure SVGs and will reject SVGs that contain embedded PNGs, since they have the same problems of being bigger and not scaling seamlessly. We also require that SVGs convert fonts to outlines so that they will render correctly whether or not a font is installed. See &lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/#dont-use-svgs-with-embedded-text&#34;&gt;Don&#39;t Use SVGs with Embedded Text&lt;/a&gt; below.&lt;/li&gt; &#xA; &lt;li&gt;When multiple variants exist, use stacked (not horizontal) logos. For example, we use the second column (stacked), not the first (horizontal), of CNCF project &lt;a href=&#34;https://github.com/cncf/artwork/#cncf-incubating-logos&#34;&gt;logos&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t use reversed logos (i.e., with a non-white, non-transparent background color). If you only have a reversed logo, create an issue with it attached and we&#39;ll produce a non-reversed version for you.&lt;/li&gt; &#xA; &lt;li&gt;Logos must include the company, product or project name in English. It&#39;s fine to also include words from another language. If you don&#39;t have a version of your logo with the name in it, please open an issue and we&#39;ll create one for you (and please specify the font).&lt;/li&gt; &#xA; &lt;li&gt;Match the item name to the English words in the logos. So an Acme Rocket logo that shows &#34;Rocket&#34; should have product name &#34;Rocket&#34;, while if the logo shows &#34;Acme Rocket&#34;, the product name should be &#34;Acme Rocket&#34;. Otherwise, logos looks out of place when you sort alphabetically.&lt;/li&gt; &#xA; &lt;li&gt;Logos should include a company and/or product name but no tagline, which allows them to be larger and more readable. The only exception is if the only format that the logo is ever shown includes the tagline.&lt;/li&gt; &#xA; &lt;li&gt;Google images is often the best way to find a good version of the logo (but ensure it&#39;s the up-to-date version). Search for &lt;a href=&#34;https://www.google.com/search?q=grpc+logo&amp;amp;tbs=ift:svg,imgo:1&amp;amp;tbm=isch&#34;&gt;grpc logo filetype:svg&lt;/a&gt; but substitute your project or product name for grpc.&lt;/li&gt; &#xA; &lt;li&gt;Upload the SVG to the &lt;code&gt;hosted_logos&lt;/code&gt; directory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Don&#39;t Use SVGs with Embedded Text&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cncf/landscapeapp/raw/master/README.md#svgs-cant-include-text&#34;&gt;Directions&lt;/a&gt; for fixing.&lt;/p&gt; &#xA;&lt;h2&gt;Corrections&lt;/h2&gt; &#xA;&lt;p&gt;Please open a pull request with edits to &lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/landscape.yml&#34;&gt;landscape.yml&lt;/a&gt;. The file &lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/processed_landscape.yml&#34;&gt;processed_landscape.yml&lt;/a&gt; is generated and so should never be edited directly.&lt;/p&gt; &#xA;&lt;p&gt;If the error is with data from &lt;a href=&#34;https://www.crunchbase.com/&#34;&gt;Crunchbase&lt;/a&gt; you should open an account there and edit the data. If you don&#39;t like a project description, edit it in GitHub. If your project isn&#39;t showing the license correctly, you may need to paste the unmodified text of the license into a LICENSE file at the root of your project in GitHub, in order for GitHub to serve the license information correctly.&lt;/p&gt; &#xA;&lt;h2&gt;External Data&lt;/h2&gt; &#xA;&lt;p&gt;The canonical source for all data is &lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/landscape.yml&#34;&gt;landscape.yml&lt;/a&gt;. Once a day, we download data for projects and companies from the following sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project info from GitHub&lt;/li&gt; &#xA; &lt;li&gt;Funding info from &lt;a href=&#34;https://www.crunchbase.com/&#34;&gt;Crunchbase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Market cap data from Yahoo Finance&lt;/li&gt; &#xA; &lt;li&gt;CII Best Practices Badge &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/&#34;&gt;data&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The update server enhances the source data with the fetched data and saves the result in &lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/processed_landscape.yml&#34;&gt;processed_landscape.yml&lt;/a&gt; and as a JSON &lt;a href=&#34;https://landscape.cncf.io/data/items.json&#34;&gt;file&lt;/a&gt;, the latter of which is what the app loads to display data.&lt;/p&gt; &#xA;&lt;h2&gt;Best Practices Badge&lt;/h2&gt; &#xA;&lt;p&gt;As explained at &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/&#34;&gt;https://bestpractices.coreinfrastructure.org/&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The Linux Foundation (LF) Core Infrastructure Initiative (CII) Best Practices badge is a way for Free/Libre and Open Source Software (FLOSS) projects to show that they follow best practices. Projects can voluntarily self-certify, at no cost, by using this web application to explain how they follow each best practice. The CII Best Practices Badge is inspired by the many badges available to projects on GitHub. Consumers of the badge can quickly assess which FLOSS projects are following best practices and as a result are more likely to produce higher-quality secure software.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The interactive landscape displays the status (or non-existence) of a badge for each open-source project. There&#39;s also a feature not available through the filter bar to see all items &lt;a href=&#34;https://landscape.cncf.io/bestpractices=yes&#34;&gt;with&lt;/a&gt; and &lt;a href=&#34;https://landscape.cncf.io/bestpractices=no&#34;&gt;without&lt;/a&gt; badges. Note that a passing badge is a requirement for projects to &lt;a href=&#34;https://github.com/cncf/toc/raw/master/process/graduation_criteria.adoc&#34;&gt;graduate&lt;/a&gt; in the CNCF.&lt;/p&gt; &#xA;&lt;p&gt;For projects using a GitHub organisation, and the url used for the badge is the organisation not the repository, &lt;code&gt;url_for_bestpractices&lt;/code&gt; needs to be specified in the projects section in the &lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/landscape.yml&#34;&gt;landscape.yml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Non-Updated Items&lt;/h2&gt; &#xA;&lt;p&gt;We generally remove open source projects that have not had a commit in over 3 months. Note that for projects not hosted on GitHub, we need them to mirror to GitHub to fetch updates, and we try to work with projects when their mirrors are broken. Here is view of projects sorted by last update (ignoring categories like KCSPs, Certified Kubernetes, and members): &lt;a href=&#34;https://landscape.cncf.io/card-mode?category=provisioning,runtime,orchestration-management,app-definition-and-development,paa-s-container-service,serverless,observability-and-analysis,runtime,installable-platform&amp;amp;license=open-source&amp;amp;grouping=no&amp;amp;sort=latest-commit&#34;&gt;https://landscape.cncf.io/card-mode?category=provisioning,runtime,orchestration-management,app-definition-and-development,paa-s-container-service,serverless,observability-and-analysis,runtime,installable-platform&amp;amp;license=open-source&amp;amp;grouping=no&amp;amp;sort=latest-commit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We generally remove closed source products when they have not tweeted in over 3 months. This doesn&#39;t apply to Chinese companies without Twitter accounts, since Twitter is blocked there. Here is a view of products sorted by last tweet (ignoring categories like KCSPs, Certified Kubernetes, and members): &lt;a href=&#34;https://landscape.cncf.io/card-mode?category=provisioning,runtime,orchestration-management,app-definition-and-development,paa-s-container-service,serverless,observability-and-analysis&amp;amp;license=not-open-source&amp;amp;grouping=no&amp;amp;sort=latest-tweet&#34;&gt;https://landscape.cncf.io/card-mode?category=provisioning,runtime,orchestration-management,app-definition-and-development,paa-s-container-service,serverless,observability-and-analysis&amp;amp;license=not-open-source&amp;amp;grouping=no&amp;amp;sort=latest-tweet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Items that have been removed can apply to be re-added using the regular New Entries criteria above.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains data received from &lt;a href=&#34;http://www.crunchbase.com&#34;&gt;Crunchbase&lt;/a&gt;. This data is not licensed pursuant to the Apache License. It is subject to Crunchbase’s Data Access Terms, available at &lt;a href=&#34;https://data.crunchbase.com/docs/terms&#34;&gt;https://data.crunchbase.com/docs/terms&lt;/a&gt;, and is only permitted to be used with Linux Foundation landscape projects.&lt;/p&gt; &#xA;&lt;p&gt;Everything else is under the Apache License, Version 2.0, except for project and product logos, which are generally copyrighted by the company that created them, and are simply cached here for reliability. The trail map, static landscape, serverless landscape, and &lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/landscape.yml&#34;&gt;landscape.yml&lt;/a&gt; file are alternatively available under the &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons Attribution 4.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Formats&lt;/h2&gt; &#xA;&lt;p&gt;The CNCF Cloud Native Landscape is available in these formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://landscape.cncf.io/images/landscape.png&#34;&gt;PNG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://landscape.cncf.io/images/landscape.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The CNCF Serverless Landscape is available in these formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://landscape.cncf.io/images/serverless.png&#34;&gt;PNG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://landscape.cncf.io/images/serverless.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install and run locally with the &lt;a href=&#34;https://github.com/cncf/landscapeapp#installing-locally&#34;&gt;install directions&lt;/a&gt;. It&#39;s not necessary to install locally if you just want to edit &lt;a href=&#34;https://raw.githubusercontent.com/cncf/landscape/master/landscape.yml&#34;&gt;landscape.yml&lt;/a&gt;. You can do so via the GitHub web interface.&lt;/p&gt; &#xA;&lt;h2&gt;Vulnerability reporting&lt;/h2&gt; &#xA;&lt;p&gt;Please open an &lt;a href=&#34;https://github.com/cncf/landscape/issues/new&#34;&gt;issue&lt;/a&gt; or, for sensitive information, email &lt;a href=&#34;mailto:info@cncf.io&#34;&gt;info@cncf.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Adjusting the Landscape View&lt;/h2&gt; &#xA;&lt;p&gt;The file src/components/MainContent2.js describes the key elements of a landscape big picture. It specifies where to put these sections: App Definition and Development, Orchestration &amp;amp; Management, Runtime, Provisioning, Cloud, Platform, Observability and Analysis, Special. Also it specifies where to locate the link to the serverless preview and an info with a QR code.&lt;/p&gt; &#xA;&lt;p&gt;All these elements should have &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; properties to position them. &lt;code&gt;rows&lt;/code&gt; and &lt;code&gt;cols&lt;/code&gt; specify how much columns or rows we expect in a given horizontal or vertical section.&lt;/p&gt; &#xA;&lt;p&gt;When we see that those elements can not fit the sections, we need to either increase the width of all the horizontal sections, or increase height and amount of rows in a single horizontal section and adjust the position of sections below.&lt;/p&gt; &#xA;&lt;p&gt;Beside that, we have to adjust the width of a parent div (1620), the width in a &lt;code&gt;src/components/BigPicture/FullscreenLandscape.js&lt;/code&gt; (1640) and the width in a &lt;code&gt;tools/renderLandscape.js&lt;/code&gt; (6560, because of x4 zoom and margins)&lt;/p&gt; &#xA;&lt;p&gt;Serverless has a same approach, files are &lt;code&gt;src/components/BigPicture/ServerlessContent.js&lt;/code&gt;, &lt;code&gt;src/components/BigPicture/FullscreenServerless.js&lt;/code&gt; and &lt;code&gt;tools/renderLandscape.js&lt;/code&gt;, with a full width of 3450 (because of x3 zoom and margins)&lt;/p&gt; &#xA;&lt;p&gt;Sometimes the total height is changed too, then we need to adjust the height the same way as we adjust the width.&lt;/p&gt; &#xA;&lt;p&gt;We have an experimental &lt;code&gt;fitWidth&lt;/code&gt; property, it is good when you want to get rid of an extra space on the right of a section.&lt;/p&gt; &#xA;&lt;p&gt;The best way to test that layout is ok, is to visit &lt;code&gt;/landscape&lt;/code&gt; and &lt;code&gt;/serverless&lt;/code&gt;, and if it looks ok, run &lt;code&gt;PORT=3000 babel-node tools/renderLandscape&lt;/code&gt; and see the rendered png files, they are in &lt;code&gt;src/images&lt;/code&gt; folder&lt;/p&gt;</summary>
  </entry>
</feed>