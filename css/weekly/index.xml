<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-21T01:54:27Z</updated>
  <subtitle>Weekly Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sakofchit/system.css</title>
    <updated>2022-08-21T01:54:27Z</updated>
    <id>tag:github.com,2022-08-21:/sakofchit/system.css</id>
    <link href="https://github.com/sakofchit/system.css" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A design system for building retro Apple interfaces&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/goRcNZK.png&#34; alt=&#34;system.css&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sakofchit.github.io/system.css/&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;System.css is a CSS library for building interfaces that resemble Apple&#39;s System OS which ran from 1984-1991. Design-wise, not much really changed from System 1 to System 6; however this library is based on System 6 as it was the final monochrome version of MacOS.&lt;/p&gt; &#xA;&lt;p&gt;Fortunately, this library does not use any JavaScript and is compatible with any front-end framework of your choice. Most styles can also be overwritten to allow for deeper customization.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a couple ways you can get started with System.css!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Import from CDN (easiest)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your head tag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/@sakun/system.css&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s some starter code to help you get started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;    &amp;lt;title&amp;gt;System.css Starter&amp;lt;/title&amp;gt;&#xA;    &amp;lt;meta charset=&#34;UTF-8&#34; /&amp;gt;&#xA;    &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/@sakun/system.css&#34; /&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;    &amp;lt;div class=&#34;window&#34; style=&#34;width:30rem;&#34;&amp;gt;&#xA;        &amp;lt;div class=&#34;title-bar&#34;&amp;gt; &#xA;            &amp;lt;button aria-label=&#34;Close&#34; class=&#34;close&#34;&amp;gt;&amp;lt;/button&amp;gt;&#xA;            &amp;lt;h1 class=&#34;title&#34;&amp;gt;System.css&amp;lt;/h1&amp;gt;&#xA;            &amp;lt;button aria-label=&#34;Resize&#34; class=&#34;resize&#34;&amp;gt;&amp;lt;/button&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&#34;separator&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;        &#xA;        &amp;lt;div class=&#34;window-pane&#34;&amp;gt;&#xA;            Hello world!&#xA;        &amp;lt;/div&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&#xA;    &amp;lt;div class=&#34;window&#34; style=&#34;width:30rem;&#34;&amp;gt;&#xA;        &amp;lt;div class=&#34;title-bar&#34;&amp;gt; &#xA;            &amp;lt;button aria-label=&#34;Close&#34; class=&#34;close&#34;&amp;gt;&amp;lt;/button&amp;gt;&#xA;            &amp;lt;h1 class=&#34;title&#34;&amp;gt;Search&amp;lt;/h1&amp;gt;&#xA;            &amp;lt;button aria-label=&#34;Resize&#34; disabled class=&#34;hidden&#34;&amp;gt;&amp;lt;/button&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div class=&#34;separator&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;        &#xA;        &amp;lt;div class=&#34;modeless-dialog&#34;&amp;gt;&#xA;            &amp;lt;section class=&#34;field-row&#34; style=&#34;justify-content: flex-start&#34;&amp;gt;&#xA;                &amp;lt;label for=&#34;text_find&#34; class=&#34;modeless-text&#34;&amp;gt;Find:&amp;lt;/label&amp;gt;&#xA;                &amp;lt;input id=&#34;text_find&#34; type=&#34;text&#34; style=&#34;width:100%;&#34; placeholder=&#34;&#34;&amp;gt;&#xA;            &amp;lt;/section&amp;gt;&#xA;            &amp;lt;section class=&#34;field-row&#34; style=&#34;justify-content: flex-end&#34;&amp;gt;&#xA;                &amp;lt;button class=&#34;btn&#34;&amp;gt;Cancel&amp;lt;/button&amp;gt;&#xA;                &amp;lt;button class=&#34;btn&#34; style=&#34;width:95px;&#34;&amp;gt;Find&amp;lt;/button&amp;gt;&#xA;            &amp;lt;/section&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Import from &lt;a href=&#34;https://www.npmjs.com/package/@sakun/system.css&#34;&gt;npmjs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm i @sakun/system.css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository and run &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm start&lt;/code&gt; to start the development environment.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Everything you&#39;ll need can be found in &lt;a href=&#34;https://github.com/sakofchit/system.css/raw/main/style.css&#34;&gt;style.css&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing, Credits, etc.&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for checking this project out! This library was made in good fun and was largely inspired by &lt;a href=&#34;https://github.com/jdan/98.css&#34;&gt;98.css&lt;/a&gt;. The Chicago 12pt and Geneva 9pt fonts are recreations by &lt;a href=&#34;https://twitter.com/blogmywiki&#34;&gt;@blogmywiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;System.css is still in beta! I recreated components based on Apple&#39;s Human Interface Guidelines. However, there&#39;s still a pretty good chance that I&#39;ve might&#39;ve missed/overlooked something essential. I&#39;ve also had to recreate most of the assets, which can also be found &lt;a href=&#34;https://github.com/sakofchit/system.css/tree/main/icon&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you find a bug, consider opening an issue. If there&#39;s something that you&#39;d like to add, please feel free to create a PR!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to see what else I&#39;m up to, consider following me on &lt;a href=&#34;https://twitter.com/sakofchit&#34;&gt;Twitter&lt;/a&gt; or checking out my &lt;a href=&#34;https://sakun.co&#34;&gt;personal site&lt;/a&gt; :)&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://getcssscan.com/?ref=systemcss&#34;&gt;&lt;img src=&#34;https://d33wubrfki0l68.cloudfront.net/6da92d1f39c939204d13f67ec76e725362b41e70/55cb0/img/logo.png&#34; alt=&#34;CSS Scan&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://getcssscan.com/?ref=systemcss&#34;&gt;CSS Scan&lt;/a&gt;: The fastest and easiest way to check, copy and edit CSS&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>connorferster/handcalcs</title>
    <updated>2022-08-21T01:54:27Z</updated>
    <id>tag:github.com,2022-08-21:/connorferster/handcalcs</id>
    <link href="https://github.com/connorferster/handcalcs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python library for converting Python calculations into rendered latex.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;img src=&#34;https://travis-ci.org/connorferster/handcalcs.svg?branch=master&#34;&gt; &lt;a href=&#34;https://coveralls.io/github/connorferster/handcalcs?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/connorferster/handcalcs/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/handcalcs&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/handcalcs&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/connorferster/handcalcs&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/dm/handcalcs&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/handcalcs.jpg&#34;&gt;&lt;br&gt; Covert art by &lt;a href=&#34;https://www.instagram.com/joshuahoibergtattoos/&#34;&gt;Joshua Hoiberg&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;handcalcs:&lt;br&gt;Python calculations in Jupyter,&lt;br&gt;as though you wrote them by hand.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;handcalcs&lt;/code&gt; is a library to render Python calculation code automatically in Latex, but in a manner that mimics how one might format their calculation if it were written with a pencil: write the symbolic formula, &lt;strong&gt;followed by numeric substitutions&lt;/strong&gt;, and then the result.&lt;/p&gt; &#xA;&lt;p&gt;Because &lt;code&gt;handcalcs&lt;/code&gt; shows the numeric substitution, the calculations become significantly easier to check and verify by hand.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/connorferster/handcalcs#basic-demo&#34;&gt;Basic Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/connorferster/handcalcs#installing&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/connorferster/handcalcs#basic-usage-1-as-a-jupyter-cell-magic-render&#34;&gt;Basic Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/connorferster/handcalcs#basic-usage-2-as-a-decorator-on-your-functions-handcalc&#34;&gt;Enhanced Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/connorferster/handcalcs#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/connorferster/handcalcs#pdf-printing-in-jupyter&#34;&gt;PDF Printing in Jupyter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/connorferster/handcalcs#expected-behaviours&#34;&gt;Expected Behaviours&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/connorferster/handcalcs#gotchas&#34;&gt;Gotchas and Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/connorferster/handcalcs#youtube-tutorials&#34;&gt;YouTube Tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/connorferster/handcalcs/wiki&#34;&gt;Applications and Compatibility with Other Libraries (wiki)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/basic_demo1.gif&#34; alt=&#34;handcalcs demo 1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;You can install using pip:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install handcalcs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage 1: As a Jupyter cell magic (&lt;code&gt;%%render&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;handcalcs&lt;/code&gt; is intended to be used with either Jupyter Notebook or Jupyter Lab as a &lt;em&gt;cell magic&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, import the module and run the cell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import handcalcs.render&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: This will import both &lt;code&gt;%%tex&lt;/code&gt; and &lt;code&gt;%%render&lt;/code&gt; magics in the Jupyter Notebook.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Then, in any cell that you want to render with &lt;code&gt;handcalcs&lt;/code&gt;, just use the render cell magic at the top of your cell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%render&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%render&#xA;a = 2&#xA;b = 3&#xA;c = 2*a + b/3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;That is it!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once rendered, you can then export your notebook as a PDF, provided you have a Latex environment installed on your system. If you are new to working with Latex and would like to install it on your system so you can use this functionality, please see the section &lt;a href=&#34;https://github.com/connorferster/handcalcs/wiki&#34;&gt;Installing Tex&lt;/a&gt;, in the wiki.&lt;/p&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;%%tex&lt;/code&gt; command to convert any Python code snippet into a valid LaTex. For Example:&lt;/p&gt; &#xA;&lt;p&gt;First import &lt;code&gt;handcalcs&lt;/code&gt;. We are also importing a few properties/functions from &lt;strong&gt;math&lt;/strong&gt; package for the example below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import handcalcs.render&#xA;from math import sqrt, pi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can use the &lt;code&gt;%%tex&lt;/code&gt; magic!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%tex&#xA;a = 2 / 3 * sqrt(pi)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will produce a LaTeX output as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\[&#xA;\begin{aligned}&#xA;a &amp;amp;= \frac{ 2 }{ 3 } \cdot \sqrt{ \pi } = \frac{ 2 }{ 3 } \cdot \sqrt{ 3.142 } &amp;amp;= 1.182&#xA;\end{aligned}&#xA;\]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage 2: As a decorator on your functions, &lt;code&gt;@handcalc()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Shout-out to @eriknw for developing &lt;a href=&#34;https://github.com/eriknw/innerscope&#34;&gt;innerscope&lt;/a&gt; and proactively integrating it into &lt;code&gt;handcalcs&lt;/code&gt;. Thank you!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Start by importing the &lt;code&gt;@handcalc()&lt;/code&gt; decorator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from handcalcs.decorator import handcalc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@handcalc([override: str = &#34;&#34;, precision: int = 3, left: str = &#34;&#34;, right: str = &#34;&#34;, jupyter_display: bool = False])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns a tuple consisting of &lt;code&gt;(latex_code: str, locals: dict)&lt;/code&gt;, where &lt;code&gt;locals&lt;/code&gt; is a dictionary of all variables in the scope of the function namespace.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;override&lt;/code&gt; is a str representing one of the acceptable override tags (see below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;precision&lt;/code&gt; is an int to alter the of decimal precision displayed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; are strings that can precede and follow the encoded Latex string, such as &lt;code&gt;\\[&lt;/code&gt; and &lt;code&gt;\\]&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jupyter_display&lt;/code&gt;, when True, will return only the &lt;code&gt;locals&lt;/code&gt; dictionary and instead will display the encoded Latex string rendering with &lt;code&gt;display(Latex(latex_code))&lt;/code&gt; from &lt;code&gt;IPython.display&lt;/code&gt;. Will return an error if not used within&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In your decorated function, everything between &lt;code&gt;def my_calc(...)&lt;/code&gt; and a return statement (if any) is now like the code in a Jupyter cell, except it&#39;s a standard Python function.&lt;/p&gt; &#xA;&lt;p&gt;Used in this way, you can use &lt;code&gt;@handcalc()&lt;/code&gt; to dynamically generate Latex code for display in Jupyter and non-Jupypter Python environments (e.g. streamlit).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/decorator.png&#34; alt=&#34;Parameters&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Override tags&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;handcalcs&lt;/code&gt; makes certain assumptions about how you would like your calculation formatted and does not allow for a great deal of customization in this regard. However, there are currently &lt;strong&gt;four&lt;/strong&gt; customizations you can make using &lt;code&gt;# override tags&lt;/code&gt; as an argument after the &lt;code&gt;%%render&lt;/code&gt; cell magic. Additionally, you can also specify the number of decimals of precision to display. You can only use &lt;strong&gt;one&lt;/strong&gt; override tag per cell &lt;strong&gt;but&lt;/strong&gt; you can combine an override tag with a precision setting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Override tags can be used with both the Jupyter cell magic and the function decorator&lt;/strong&gt;. To use a override tag with the decorator, you just supply it as an argument, e.g. &lt;code&gt;@handcalc(override=&#39;params&#39;, precision=2)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;I will compare a basic rendering of the quadratic formula (below) with the change achieved with each override tag.&lt;/p&gt; &#xA;&lt;h3&gt;Basic rendering:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/quadratic_formula_basic.png&#34; alt=&#34;Parameters&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;params&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;handcalcs&lt;/code&gt; renders lines of code vertically, one after the other. However, when you are assigning variables, or displaying resulting variables, you may not want to waste all of that vertical space.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;params&lt;/code&gt; override tag, your list of parameters will instead render in three columns, thereby saving vertical space. Additionally, onsly the result will be shown, no calculations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/quadratic_formula_params.png&#34; alt=&#34;Params override example&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Adjust precision:&lt;/h3&gt; &#xA;&lt;p&gt;The number of decimal places in a cell can be adjusted by providing an integer after &lt;code&gt;%%render&lt;/code&gt; to indicate the decimal precision to be displayed. Can be combined with another override tag.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/quadratic_formula_precision.png&#34; alt=&#34;Precision override example&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;long&lt;/code&gt; and &lt;code&gt;short&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;To save vertical space, &lt;code&gt;handcalcs&lt;/code&gt; &lt;em&gt;attempts&lt;/em&gt; to figure out how long your calculation is and, if it is short enough, renders it out fully on one line.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;handcalcs&lt;/code&gt;&#39;s internal test deems the calculation as being too long to fit onto one line, it breaks it out into multiple lines.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;# long&lt;/code&gt; or &lt;code&gt;# short&lt;/code&gt; override tags to override the length check and display the calculation in the &#34;Long&#34; format or the &#34;Short&#34; format for all calculations in the cell. e.g.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;long: Spans multiple lines as though you had a long equation&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/quadratic_formula_long.png&#34; alt=&#34;Long override example&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;short: Forced to a single line as though you had a short equation&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    # Format for &#34;short&#34; calculations (can fit on one line):&#xA;    c = 2*a + b/3 = 2*(2) + (3)/3 = 5&#xA;&#xA;    # Format for &#34;long&#34; calculations (requires multi-line format)&#xA;    c = 2*a + b/3&#xA;      = 2*(2) + (3)/3&#xA;      = 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/quadratic_formula_short.png&#34; alt=&#34;Short override example&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;symbolic&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The primary purpose of &lt;code&gt;handcalcs&lt;/code&gt; is to render the full calculation with the numeric substitution. This allows for easy traceability and verification of the calculation.&lt;/p&gt; &#xA;&lt;p&gt;However, there may be instances when it is preferred to simply display calculations symbolically. For example, you can use the &lt;code&gt;symbolic&lt;/code&gt; tag to use &lt;code&gt;handcalcs&lt;/code&gt; as a fast way to render Latex equations symbolically.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you may prefer to render out all of input parameters in one cell, your formulae symbolically in the following cell, and then all the final values in the last cell, skipping the numeric substitution process entirely.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that even if you use the &lt;code&gt;symbolic&lt;/code&gt; tag with your calculations, you still need to declare those variables (by assigning values to them) ahead of time in order for your calculation to be valid Python.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/quadratic_formula_symbolic.png&#34; alt=&#34;Short override example&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;sympy&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is intended to be used only with &lt;code&gt;sympy&lt;/code&gt; loaded. Sympy allows for symbolic manipulation, solving, and integration of algebraic expressions. Sympy will render its own objects in Latex without handcalcs.&lt;/p&gt; &#xA;&lt;p&gt;If you are manipulating a sympy expression or sympy equation for the purpose of calculation, you can use &lt;code&gt;handcalcs&lt;/code&gt; to handle the substitution and calculation of your resulting expression. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Re-assigning your symbolic variables to numbers will clobber them as sympy variables. However, you are done with these now, right? So, it&#39;s no problem. If you need to work symbolically again, just re-run your notebook cells from the top.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/sympy.png&#34; alt=&#34;Sympy demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Units Packages Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;handcalcs&lt;/code&gt; was designed to be used with the units package, &lt;a href=&#34;https://github.com/connorferster/forallpeople&#34;&gt;forallpeople&lt;/a&gt; (and &lt;a href=&#34;https://github.com/connorferster/forallpeople&#34;&gt;forallpeople&lt;/a&gt; was designed to be compatible with &lt;code&gt;handcalcs&lt;/code&gt;). However, it has been recently reported that &lt;a href=&#34;https://pint.readthedocs.org&#34;&gt;pint&lt;/a&gt; can work to good effect, also.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/forallpeople.png&#34; alt=&#34;display variable demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For potential compatibility with other units packages, please see &lt;a href=&#34;https://github.com/connorferster/handcalcs/wiki&#34;&gt;the wiki.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Quickly display the values of many variables&lt;/h3&gt; &#xA;&lt;p&gt;No more &lt;code&gt;print&lt;/code&gt; statements needed. Just plop your variables onto a line and they will all be displayed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/display_var.png&#34; alt=&#34;display variable demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Get Just the Latex Code, without the render&lt;/h3&gt; &#xA;&lt;p&gt;If you just want to generate the rendered Latex code directly to use in your own Latex files, you can use the &lt;code&gt;%%tex&lt;/code&gt; cell magic instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%%tex&#xA;a = 2&#xA;b = 3&#xA;c = 2*a + b/3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can just copy and paste the result into your own LaTeX document.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/tex.png&#34; alt=&#34;tex cell magic demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Subscripts (and sub-subscripts, etc.)&lt;/h3&gt; &#xA;&lt;p&gt;Subscripts in variable names are automatically created when &lt;code&gt;_&lt;/code&gt; is used in the variable name. Sub-subscripts are nested for each separate &lt;code&gt;_&lt;/code&gt; used in series.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/subscripts.png&#34; alt=&#34;Subscripts demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Greek symbols&lt;/h3&gt; &#xA;&lt;p&gt;Any variable name that contains a Greek letter (e.g. &#34;pi&#34;, &#34;upsilon&#34;, &#34;eta&#34;, etc.) as a string or substring will be replaced by the appropriate Latex code to represent that Greek letter.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using lower case letters as your variable name will make a lower case Greek letter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using a Capitalized Name for your variable will render it as an upper case Greek letter.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/greeks.png&#34; alt=&#34;Greek symbols demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Functions, built-in or custom&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Python functions in your calculation, eg. &lt;code&gt;min()&lt;/code&gt; or &lt;code&gt;tan()&lt;/code&gt;, they will be replaced with Latex code to represent that function in Latex.&lt;/p&gt; &#xA;&lt;p&gt;If you are creating your own functions, then they will be rendered in Latex as a custom operator.&lt;/p&gt; &#xA;&lt;p&gt;If you are using a function with the name &lt;code&gt;sqrt&lt;/code&gt; (whether your own custom implementation or from &lt;code&gt;math.sqrt&lt;/code&gt;), then it will be rendered as the radical sign.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/functions.png&#34; alt=&#34;Functions&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Rendered in-line Comments&lt;/h3&gt; &#xA;&lt;p&gt;Any comments placed after a line of calculation will be rendered as an inline comment in the Latex.&lt;/p&gt; &#xA;&lt;p&gt;This makes it convenient to make notes along side your calculations to briefly explain where you may have acquired or derived a particular value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/comments.png&#34; alt=&#34;Comments&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Skip the substitution&lt;/h3&gt; &#xA;&lt;p&gt;Any calculation entirely wrapped in parentheses, &lt;code&gt;()&lt;/code&gt;, will be rendered as just &lt;code&gt;param = result&lt;/code&gt;, without the substitution.&lt;/p&gt; &#xA;&lt;p&gt;This can be convient when you want to calculate a parameter on the fly and not have it be the focus of the calculation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/no_subs.png&#34; alt=&#34;Skip the substitution&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Conditional statements&lt;/h3&gt; &#xA;&lt;p&gt;Many calculations in the &#34;real world&#34; are dependent on context.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;handcalcs&lt;/code&gt; allows for the inclusion of some simple conditional statements into its code in a way that makes it easier to understand the context of the calculation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/conditionals.png&#34; alt=&#34;Conditional calculations&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Multiple &#34;lines&#34; of calculations can be used after the conditional expression provided that they are all on the same line and separated with &#34;&lt;code&gt;;&lt;/code&gt;&#34;. See &lt;a href=&#34;https://github.com/connorferster/handcalcs#expected-behaviours&#34;&gt;Expected Behaviours&lt;/a&gt; for more context.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Numeric integration&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;scipy.quad&lt;/code&gt; to perform numeric integration on a pre-defined function and have &lt;code&gt;handcalcs&lt;/code&gt; perform a basic rendering of it.&lt;/p&gt; &#xA;&lt;p&gt;This behaviour is triggered if you use a function with either &lt;code&gt;integrate&lt;/code&gt; or &lt;code&gt;quad&lt;/code&gt; in the name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/integration.png&#34; alt=&#34;Numeric integration&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&#34;Prime&#34; notation&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you need to write &#34;prime&#34; on your variables:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/connorferster/handcalcs/main/docs/images/prime.png&#34; alt=&#34;Prime Notation&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;PDF Printing in Jupyter&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: With &lt;code&gt;nbconvert&lt;/code&gt; v6.0, templates are handled in a different manner that is incompatible with the below method. Be sure to use &lt;code&gt;nbconvert&lt;/code&gt; v5.6.1 to allow template installation and swapping.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Jupyter Notebooks/Lab are able to print notebooks to PDF through two methods. Both can produce great results with handcalcs:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Export to HTML&lt;/strong&gt;: Open the exported HTML page in your browser and print to PDF using your system&#39;s own PDF printer &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: No additional software required, you can include images copy-pasted into your Jupyter notebook, and you can change the scale of the printed PDF in your brower&#39;s print window.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;Cons: Page breaks can be less graceful on html output and you cannot otherwise customize the output further like you can with a .tex file&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Export to PDF (via Latex)&lt;/strong&gt;: Using your previously installed Latex distribution, Jupyter will first export your notebook to a .tex file and then render the file to PDF. This requires you to have a Latex distribution already installed on your system (Instructions: &lt;a href=&#34;https://miktex.org/howto/install-miktex&#34;&gt;windows&lt;/a&gt;, &lt;a href=&#34;https://tug.org/mactex/mactex-download.html&#34;&gt;mac os&lt;/a&gt;, &lt;a href=&#34;https://linuxconfig.org/how-to-install-latex-on-ubuntu-20-04-focal-fossa-linux&#34;&gt;ubuntu&lt;/a&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: Page breaks tend to work better and you have the ability to customize your output further using the generated .tex file&lt;/li&gt; &#xA;   &lt;li&gt;Cons: Cannot easily rescale the PDF print (e.g. to ensure really long equations fit on the page) and you cannot include images copy/pasted into your Notebook. Images can be used but must be linked in with Markdown and the file must reside in the same directory as your Notebook.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;PDF notebooks made with handcalcs tend to look better if the code input cells are suppressed. To make this convenient, handcalcs ships with two modified nbconvert template files that can be installed by running a function in Jupyter before exporting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;handcalcs.install_templates.install_html(swap_in:str = &#34;&#34;, swap_out:str = &#34;full.tpl&#34;, restore:bool = False)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;handcalcs.install_templates.install_latex(swap_in:str = &#34;&#34;, swap_out:str = &#34;article.tplx&#34;, restore:bool = False)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;swap_in&lt;/code&gt;&lt;/strong&gt;: the name of the handcalcs template file you wish to install. When not provided, the function will print a list of available templates whose names are acceptable inputs for this argument.&lt;br&gt; &lt;strong&gt;&lt;code&gt;swap_out&lt;/code&gt;&lt;/strong&gt;: the name of the nbconvert template file you wish to replace (default file is nbconvert&#39;s default html or latex template, respectively)&lt;br&gt; &lt;strong&gt;&lt;code&gt;restore&lt;/code&gt;&lt;/strong&gt;: when set to &lt;code&gt;True&lt;/code&gt;, the function will remove your previously installed template file and restore the default nbconvert template.&lt;/p&gt; &#xA;&lt;h3&gt;Design rationale&lt;/h3&gt; &#xA;&lt;p&gt;While there are methods for manually changing the template that nbconvert uses, this has to be performed on the command line as a separate conversion step. This default template override approach is not available from within the Jupyter GUI interface.&lt;/p&gt; &#xA;&lt;p&gt;I have found that the easiest and most reliable way to quickly change the default export behaviour is to swap out and replace the default template files. By using this approach, you can export your notebooks directly from the Jupyter GUI menu options and have your notebooks look how you wish without fussing with multiple configuration settings that may or may not take.&lt;/p&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;When handcalcs installs these templates, they make a semi-permanent change to your templates that will persist for all of your other notebooks that you print from with Jupyter, regardless of whether you are working with handcalcs or not. It does this because it is &#34;physically&#34; swapping out and replacing your nbconvert default template files for your local installation meaning it will persist past the end of your Jupyter session.&lt;/p&gt; &#xA;&lt;p&gt;This change can be reverted at any time by using the &lt;code&gt;restore = True&lt;/code&gt; argument. Additionally, the function will not let you repeatedly install the same template. If you wish to install another template, the function will prompt you to run the function with &lt;code&gt;restore = True&lt;/code&gt; before attempting another installation.&lt;/p&gt; &#xA;&lt;p&gt;In this way, handcalcs can fully manage these template installations for you. However, if you manually alter the file names of an installed handcalcs template in the nbconvert templates directory, there is no guarantee that your original template can be successfully restored.&lt;/p&gt; &#xA;&lt;h3&gt;Example of use&lt;/h3&gt; &#xA;&lt;p&gt;You can perform the same below process using either &lt;code&gt;install_html&lt;/code&gt; or &lt;code&gt;install_latex&lt;/code&gt; functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from handcalcs.install_templates import install_html&#xA;&amp;gt;&amp;gt;&amp;gt; from handcalcs.install_templates import install_latex&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; install_html() # Use with no arguments to discover available templates&#xA;Available templates:&#xA; [&#39;full_html_noinputs.tpl&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; install_html(&#39;full_html_noinputs.tpl&#39;) # Select the template you wish to install&#xA;/usr/Name/path/to/your/nbconvert/templates/dir/html/full.tpl&#xA;-is now-&#xA;/usr/Name/path/to/your/nbconvert/templates/dir/html/full_swapped.tpl&#xA;&#xA;/usr/Name/path/to/your/handcalcs/templates/dir/html/full_html_noinputs.tpl&#xA;-is now-&#xA;/usr/Name/path/to/your/nbconvert/templates/dir/html/full.tpl&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; install_html(restore = True) # To revert this change to your template files&#xA;/user/Name/path/to/your/nbconvert/templates/dir/html/full.tpl&#xA;-was restored from-&#xA;/user/Name/path/to/your/nbconvert/templates/dir/html/full_swapped.tpl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Expected Behaviours&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;handcalcs&lt;/code&gt; is intended to render arithmetical calculations written in Python code. It is not intended to render arbitrary Python into Latex.&lt;/p&gt; &#xA;&lt;p&gt;Given that, handcalcs only renders a small subset of Python and there is a lot that will not work, especially anything that happens over multiple lines (e.g. function definitions, &lt;code&gt;for&lt;/code&gt; loops, &lt;code&gt;with&lt;/code&gt; statements, etc.).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;handcalcs&lt;/code&gt; works by parsing individual &lt;em&gt;lines&lt;/em&gt; of Python within a cell. It does not parse the cell as a whole. Therefore all statements to be rendered must be contained on a single line.&lt;/p&gt; &#xA;&lt;h3&gt;Accepted datatypes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;handcalcs&lt;/code&gt; will make an attempt to render all datatypes. However, it cannot yet render all &#34;collection&#34; based data types, e.g. &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;dict&lt;/code&gt;. If you are using a collection to hold argument functions, e.g. &lt;code&gt;sum((23, 123, 45))&lt;/code&gt;, use a &lt;code&gt;tuple&lt;/code&gt; to ensure it is rendered properly. Alternatively, you can use one-dimensional &lt;code&gt;numpy&lt;/code&gt; arrays (vectors) with handcalcs.&lt;/p&gt; &#xA;&lt;p&gt;Objects are rendered into Latex by two main approaches:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If the object has a &lt;code&gt;_repr_latex_()&lt;/code&gt; method defined, then that method is used.&lt;/p&gt; &lt;p&gt;a) If the object has some alternate method for rendering itself into Latex code, e.g. &lt;code&gt;.latex()&lt;/code&gt; or &lt;code&gt;.to_latex()&lt;/code&gt;, that will be attempted as well.&lt;/p&gt; &lt;p&gt;In order for the representation to be rendered properly, the object&#39;s Latex represention must use commands that are implemented with MathJax and/or Katex.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the object does not have a Latex method, then &lt;code&gt;str()&lt;/code&gt; is used.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you are using object types which have str methods that render as &lt;code&gt;&amp;lt;MyObject: value=34&amp;gt;&lt;/code&gt;, then that&#39;s what the Latex interpreter will see and attempt to render.&lt;/p&gt; &#xA;&lt;h3&gt;Arithmetic operators&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;+&lt;/code&gt; renders as &lt;code&gt;+&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&lt;/code&gt; renders as &lt;code&gt;-&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*&lt;/code&gt; renders as the &#34;dot operator&#34; (Latex: \cdot)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/&lt;/code&gt; always renders as a fraction&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;**&lt;/code&gt; renders as superscripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%&lt;/code&gt; renders as the &#34;mod function&#34; (Latex: \mod)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently &lt;code&gt;//&lt;/code&gt; is not rendered but you can easily use &lt;code&gt;math.floor&lt;/code&gt; as a function instead.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;for&lt;/code&gt; loops and other iterations&lt;/h3&gt; &#xA;&lt;p&gt;Showing rendered iterations is not supported. The intention for use is that you perform your iterations in a cell that is not rendered and then, once the iteration has produced the desired resulting value, you render the result in a separate cell.&lt;/p&gt; &#xA;&lt;h2&gt;Gotchas&lt;/h2&gt; &#xA;&lt;p&gt;Because &lt;code&gt;handcalcs&lt;/code&gt; is designed for use within the Jupyter environment, and because Jupyter cells can be run out of order, there exists the possibility of having a big mess of beautifully rendered but &lt;strong&gt;completely incorrect&lt;/strong&gt; calculations if you &lt;em&gt;re-use variable names throughout your notebook&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;handcalcs&lt;/code&gt; uses the notebook&#39;s user namespace dictionary to look up values for all variables in the namespace. If your calculations are re-using variable names throughout the notebook, then the dictionary entry for that name may not be what you think it is when you run cells out of the order originally intended.&lt;/p&gt; &#xA;&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; re-use variable names to good effect throughout a notebook, &lt;em&gt;IFF&lt;/em&gt; the cells are run in the correct order (easier if this is just top to bottom).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;On this note: if you are using &lt;code&gt;handcalcs&lt;/code&gt; for any kind of reporting that may become a legal document (e.g. design engineering calculations), it is up to YOU to ensure that the results are what you expect them to be. &lt;code&gt;handcalcs&lt;/code&gt; is free and open-source software and the author(s) are not responsible for incorrect calculations that result from its use.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;That being said, the very purpose for the way &lt;code&gt;handcalcs&lt;/code&gt; renders its math is to make it very easy to confirm and verify calculations by hand.&lt;/p&gt; &#xA;&lt;h2&gt;YouTube Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Getting Started with handcalcs (assumes zero Python knowledge)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZNFhLCWqA_g&#34;&gt;https://www.youtube.com/watch?v=ZNFhLCWqA_g&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Engineering Calculations: handcalcs-on-Jupyter vs. Excel&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=n9Uzy3Eb-XI&#34;&gt;https://www.youtube.com/watch?v=n9Uzy3Eb-XI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Applications and Compatibility with OPP (Other People&#39;s Packages)&lt;/h2&gt; &#xA;&lt;p&gt;** Please see &lt;a href=&#34;https://github.com/connorferster/handcalcs/wiki&#34;&gt;the wiki&lt;/a&gt; for applications of &lt;code&gt;handcalcs&lt;/code&gt; in education and engineering, in addition to examples of using &lt;code&gt;handcalcs&lt;/code&gt; with other Python libraries such &lt;a href=&#34;https://github.com/connorferster/handcalcs/wiki/Handcalcs-on--Streamlit&#34;&gt;streamlit&lt;/a&gt; and &lt;a href=&#34;https://github.com/connorferster/handcalcs/wiki/Handcalcs-on-Papermill&#34;&gt;papermill&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sharu725/online-cv</title>
    <updated>2022-08-21T01:54:27Z</updated>
    <id>tag:github.com,2022-08-21:/sharu725/online-cv</id>
    <link href="https://github.com/sharu725/online-cv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal Jekyll Theme to host your resume (CV)&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://jekyll-themes.com&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/featured%20on-JT-red.svg?sanitize=true&#34; height=&#34;20&#34; alt=&#34;Jekyll Themes Shield&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Orbit&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This theme is designed by Xiaoying Riley at &lt;a href=&#34;http://themes.3rdwavemedia.com/&#34;&gt;3rd Wave Media&lt;/a&gt;. Visit her &lt;a href=&#34;http://themes.3rdwavemedia.com/&#34;&gt;website&lt;/a&gt; for more themes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;I have made this into a Jekyll Theme. Checkout the live demo &lt;a href=&#34;https://online-cv.webjeda.com&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Desktop&lt;/th&gt; &#xA;   &lt;th&gt;Mobile&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://online-cv.webjeda.com/assets/images/desktop.png?raw=true&#34; width=&#34;600&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://online-cv.webjeda.com/assets/images/mobile.png?raw=true&#34; width=&#34;250&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharu725/online-cv/fork&#34;&gt;Fork&lt;/a&gt; the repository&lt;/li&gt; &#xA; &lt;li&gt;Go to settings and set master branch as Github Pages source.&lt;/li&gt; &#xA; &lt;li&gt;Your new site should be ready at &lt;code&gt;https://&amp;lt;username&amp;gt;.github.io/online-cv/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Printable version of the site can be found at &lt;code&gt;https://&amp;lt;username&amp;gt;.github.io/online-cv/print&lt;/code&gt;. Use a third party link &lt;a href=&#34;https://pdflayer.com/&#34;&gt;https://pdflayer.com/&lt;/a&gt;, &lt;a href=&#34;https://www.web2pdfconvert.com/&#34;&gt;https://www.web2pdfconvert.com/&lt;/a&gt; etc to get the printable PDF.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Change all the details from one place: &lt;code&gt;_data/data.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;To preview/edit localy with docker&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;docker-compose.yml&lt;/em&gt; file is used to create a container that is reachable under &lt;a href=&#34;http://localhost:4000&#34;&gt;http://localhost:4000&lt;/a&gt;. Changes &lt;em&gt;_data/data.yml&lt;/em&gt; will be visible after a while.&lt;/p&gt; &#xA;&lt;h2&gt;Skins&lt;/h2&gt; &#xA;&lt;p&gt;There are 6 color schemes available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Blue&lt;/th&gt; &#xA;   &lt;th&gt;Turquoise&lt;/th&gt; &#xA;   &lt;th&gt;Green&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://online-cv.webjeda.com/assets/images/blue.jpg&#34; width=&#34;300&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://online-cv.webjeda.com/assets/images/turquoise.jpg&#34; width=&#34;300&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://online-cv.webjeda.com/assets/images/green.jpg&#34; width=&#34;300&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Berry&lt;/th&gt; &#xA;   &lt;th&gt;Orange&lt;/th&gt; &#xA;   &lt;th&gt;Ceramic&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://online-cv.webjeda.com/assets/images/berry.jpg&#34; width=&#34;300&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://online-cv.webjeda.com/assets/images/orange.jpg&#34; width=&#34;300&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://online-cv.webjeda.com/assets/images/ceramic.jpg&#34; width=&#34;300&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/nelsonmestevao&#34;&gt;Nelson Estevão&lt;/a&gt; for all the &lt;a href=&#34;https://github.com/sharu725/online-cv/commits?author=nelsonmestevao&#34;&gt;contributions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/t-h-e&#34;&gt;t-h-e(sfrost)&lt;/a&gt; for all the &lt;a href=&#34;https://github.com/sharu725/online-cv/commits?author=t-h-e&#34;&gt;contributions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out for more themes: &lt;a href=&#34;http://jekyll-themes.com&#34;&gt;&lt;strong&gt;Jekyll Themes&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#sharu725/online-cv&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=sharu725/online-cv&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>