<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T01:52:30Z</updated>
  <subtitle>Weekly Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>opera-gaming/gxmods</title>
    <updated>2023-02-26T01:52:30Z</updated>
    <id>tag:github.com,2023-02-26:/opera-gaming/gxmods</id>
    <link href="https://github.com/opera-gaming/gxmods" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Documentation for GX mods&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;What are Opera GX Mods?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/opera-gaming/gxmods/main/images/gxmods.png&#34; alt=&#34;GXMods&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;GX Mods are a collection of customizations that allow users to create unique browsing experiences within Opera GX. With GX Mods, users can modify the browser&#39;s appearance, sounds, music, theme, wallpaper and even web content using web modding and shaders.&lt;/p&gt; &#xA;&lt;p&gt;Users can install multiple mods and choose which elements to enable, giving them full control over the desired final effect.&lt;/p&gt; &#xA;&lt;h2&gt;What can be done with mods?&lt;/h2&gt; &#xA;&lt;p&gt;With mod customization, authors have complete control over what is included and how deep the modifications go. Mods can range in modifications from small keyboard sound packs to &lt;em&gt;Mega Mods&lt;/em&gt; that incorporate all possible changes.&lt;/p&gt; &#xA;&lt;p&gt;The following areas provide ample opportunities to unleash creativity:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Background music - dynamic music that fits browsing&lt;/li&gt; &#xA; &lt;li&gt;Keyboard sounds - mechanical keyboard, typewriter, or sci-fi terminal sounds&lt;/li&gt; &#xA; &lt;li&gt;Browser sounds - opening and closing tabs, clicking, flipping switches, etc.&lt;/li&gt; &#xA; &lt;li&gt;Wallpaper - light and dark versions (static and animated)&lt;/li&gt; &#xA; &lt;li&gt;Theme - color theme for light and dark mode&lt;/li&gt; &#xA; &lt;li&gt;Web modding - tuning web pages to create unique appearances&lt;/li&gt; &#xA; &lt;li&gt;Shaders - applying visual effects to the whole screen while browsing.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to load sample mods?&lt;/h2&gt; &#xA;&lt;p&gt;As a quick start you can try some of the &lt;a href=&#34;https://raw.githubusercontent.com/opera-gaming/gxmods/main/mods&#34;&gt;sample mods&lt;/a&gt; provided.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open Extensions view (opera:extensions)&lt;/li&gt; &#xA; &lt;li&gt;Enable Developer mode in top right corner&lt;/li&gt; &#xA; &lt;li&gt;Click Load unpacked and point to directory with manifest.json&lt;/li&gt; &#xA; &lt;li&gt;Loaded mod will shown in Mods view (opera:mods)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to create mods?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opera-gaming/gxmods/main/documentation/mods.md&#34;&gt;Documentation&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/opera-gaming/gxmods/main/documentation/guidelines.md&#34;&gt;guildelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to build and share mod?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open extensions view (opera:extensions)&lt;/li&gt; &#xA; &lt;li&gt;Enable Developer mode in top right corner&lt;/li&gt; &#xA; &lt;li&gt;Click Pack extension and point to directory with manifest.json&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will produce .CRX file that you can share with friends. Drag and drop it into Opera GX to install that mod.&lt;/p&gt; &#xA;&lt;h2&gt;Will there be a store?&lt;/h2&gt; &#xA;&lt;p&gt;Yes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/react-hooks-dq-components</title>
    <updated>2023-02-26T01:52:30Z</updated>
    <id>tag:github.com,2023-02-26:/learn-co-curriculum/react-hooks-dq-components</id>
    <link href="https://github.com/learn-co-curriculum/react-hooks-dq-components" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Discussion Questions: Components&lt;/h1&gt; &#xA;&lt;p&gt;Get together in groups and clone down this repository. Your goal for this discussion question is to recreate the app in this demo image:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/learn-co-curriculum/react-hooks-dq-components/master/demo.png&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The components are already provided for you in the &lt;code&gt;src/components&lt;/code&gt; folder. It&#39;s your job to put them all together!&lt;/p&gt; &#xA;&lt;p&gt;Start by discussing the image of the demo app and decide what components belong where. For example, here&#39;s how you might break up a site like Yelp into components:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/learn-co-curriculum/react-hooks-dq-components/master/yelp-components.png&#34; alt=&#34;yelp components&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve decided on your component hierarchy, it&#39;s time to start coding!&lt;/p&gt; &#xA;&lt;p&gt;First, run the application in the browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ npm install&#xA;$ npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting from the &lt;code&gt;App&lt;/code&gt; component, add all the necessary components based on your component hierarchy. For example, if you decided to put the &lt;code&gt;TopMenu&lt;/code&gt; and &lt;code&gt;SideMenu&lt;/code&gt; in the &lt;code&gt;App&lt;/code&gt; component, here&#39;s how it would look:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#34;react&#34;;&#xA;import TopMenu from &#34;./TopMenu&#34;;&#xA;import SideMenu from &#34;./SideMenu&#34;;&#xA;&#xA;function App() {&#xA;  return (&#xA;    &amp;lt;div className=&#34;app-container&#34;&amp;gt;&#xA;      &amp;lt;TopMenu /&amp;gt;&#xA;      &amp;lt;SideMenu /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&#xA;export default App;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to check your progress in the browser as you start adding components and work on getting your app to match the demo image.&lt;/p&gt; &#xA;&lt;h2&gt;Bonus&lt;/h2&gt; &#xA;&lt;p&gt;If you finish early, have a look at the &lt;code&gt;AlbumList&lt;/code&gt; component. You&#39;ll notice there is an array of album data being imported in this file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { albums } from &#34;../data/albums&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See if you can use this array to dynamically generate the &lt;code&gt;Album&lt;/code&gt; components instead of hard-coding them.&lt;/p&gt; &#xA;&lt;p&gt;Check out the React docs on &lt;a href=&#34;https://reactjs.org/docs/lists-and-keys.html&#34;&gt;Lists and Keys&lt;/a&gt; for a hint!.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>youking-lib/ai-assistant</title>
    <updated>2023-02-26T01:52:30Z</updated>
    <id>tag:github.com,2023-02-26:/youking-lib/ai-assistant</id>
    <link href="https://github.com/youking-lib/ai-assistant" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Online AI assistant power by chatgpt, support multiple API_KEY for load balance&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This project is developed based on other excellent projects on Github, including but not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vercel/next.js&#34;&gt;nextjs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/transitive-bullshit/chatgpt-api&#34;&gt;chatgpt-api&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/f/awesome-chatgpt-prompts&#34;&gt;awesome-chatgpt-prompts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to the selfless contributions of these developers.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support multiple OpenAPI keys by creating multiple ChatAPI clients for load balancing&lt;/li&gt; &#xA; &lt;li&gt;Supports conversation&lt;/li&gt; &#xA; &lt;li&gt;Supports switching of assistant role&lt;/li&gt; &#xA; &lt;li&gt;Supports PC/Mobile devices&lt;/li&gt; &#xA; &lt;li&gt;Custom OpenAI API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; TODO: Persistent conversation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; TODO: Supports login&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/youking-lib/ai-assistant/main/public/WX20230212-192111.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/youking-lib/ai-assistant/main/public/WX20230212-192222.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Wechat Group&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/youking-lib/ai-assistant/main/public/1521676536655_.pic.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;If you want to experience it directly, you can visit &lt;a href=&#34;https://ai.gonote.io&#34;&gt;ai-assistant demo&lt;/a&gt;. (If you find that it is unable to answer, it might be because the key balance is insufficient, you can raise an issue)&lt;/p&gt; &#xA;&lt;h3&gt;Deploy with vercel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fyouking-lib%2Fai-assistant&amp;amp;env=OPENAI_API_KEY&amp;amp;envDescription=OpenAI%20API%20Key&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Deploy with pm2&lt;/h3&gt; &#xA;&lt;p&gt;prerequisites&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nodejs&lt;/li&gt; &#xA; &lt;li&gt;npm&lt;/li&gt; &#xA; &lt;li&gt;ensure your server can access api.openai.com&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ping ai.openai.com&#xA;curl https://api.openai.com # re &#39;Invalid URL (GET /)&#39; message means ok.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;clone &lt;code&gt;ai-assistant&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/youking-lib/ai-assistant.git&#xA;npm i -g pnpm pm2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;add &lt;code&gt;.env&lt;/code&gt; file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# SITE_GOOGLE_ANALYTICS=&#xA;# Supports multi API_KEY, split with &#39;,&#39;&#xA;OPENAI_API_KEY=KEY_1,KEY_2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;deploy&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh deploy.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploy with docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# TODO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Local&lt;/h3&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;deploy with pm2&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this project.&lt;/li&gt; &#xA; &lt;li&gt;Add the .env file (or .env.local for development purposes, which will not be committed).&lt;/li&gt; &#xA; &lt;li&gt;Run the following script:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;pnpm i&#xA;pnpm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server has started and is now running on localhost at port 3000.&lt;/p&gt;</summary>
  </entry>
</feed>