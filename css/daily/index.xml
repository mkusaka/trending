<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-08T01:31:34Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BloomTech-Labs/BandersnatchStarter</title>
    <updated>2023-04-08T01:31:34Z</updated>
    <id>tag:github.com,2023-04-08:/BloomTech-Labs/BandersnatchStarter</id>
    <link href="https://github.com/BloomTech-Labs/BandersnatchStarter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bandersnatch Project&lt;/h1&gt; &#xA;&lt;p&gt;Read the Documentation for information on how to get started.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bandersnatch.herokuapp.com&#34;&gt;Deployed App&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tech Stack&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Logic: Python3&lt;/li&gt; &#xA; &lt;li&gt;API Framework: Flask&lt;/li&gt; &#xA; &lt;li&gt;Templates: Jinja2&lt;/li&gt; &#xA; &lt;li&gt;Structure: HTML5&lt;/li&gt; &#xA; &lt;li&gt;Styling: CSS3&lt;/li&gt; &#xA; &lt;li&gt;Database: MongoDB&lt;/li&gt; &#xA; &lt;li&gt;Graphs: Altair&lt;/li&gt; &#xA; &lt;li&gt;Machine Learning: Scikit&lt;/li&gt; &#xA; &lt;li&gt;Hosting: Heroku&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Provided Code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTML Templates&lt;/li&gt; &#xA; &lt;li&gt;CSS Styles&lt;/li&gt; &#xA; &lt;li&gt;API Framework&lt;/li&gt; &#xA; &lt;li&gt;Miscellaneous Helper Files&lt;/li&gt; &#xA; &lt;li&gt;Sprint Specific Documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Primary Features by URL&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/&lt;/code&gt;: Splash Page&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/data&lt;/code&gt;: Tabular Data&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/view&lt;/code&gt;: Dynamic Visualizations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/model&lt;/code&gt;: Interactive Machine Learning Model&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Primary Goals&lt;/h3&gt; &#xA;&lt;p&gt;For best results, complete each sprint in order, before going on to the next sprint.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sprint 1: Database Operations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Develop a database interface class&lt;/li&gt; &#xA;   &lt;li&gt;Create random data&lt;/li&gt; &#xA;   &lt;li&gt;Populate the database with at least 1000 datapoints&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sprint 2: Dynamic Visualizations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Notebook exploration&lt;/li&gt; &#xA;   &lt;li&gt;Chart function&lt;/li&gt; &#xA;   &lt;li&gt;API integration&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sprint 3: Machine Learning Model &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Notebook exploration&lt;/li&gt; &#xA;   &lt;li&gt;Machine Learning interface class&lt;/li&gt; &#xA;   &lt;li&gt;Model serialization (save and open)&lt;/li&gt; &#xA;   &lt;li&gt;API model integration&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Stretch Goals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use ElephantSQL instead of MongoDB&lt;/li&gt; &#xA; &lt;li&gt;Use Plotly instead of Altair&lt;/li&gt; &#xA; &lt;li&gt;Use PyTorch instead of Scikit&lt;/li&gt; &#xA; &lt;li&gt;Use FastAPI instead of Flask&lt;/li&gt; &#xA; &lt;li&gt;Add the ability for the user to reset &amp;amp; reseed the database&lt;/li&gt; &#xA; &lt;li&gt;Add the ability for the user to re-train the machine learning model&lt;/li&gt; &#xA; &lt;li&gt;Add the ability for the user to download a working serialized model and dataset&lt;/li&gt; &#xA; &lt;li&gt;Add authentication to sensitive pages&lt;/li&gt; &#xA; &lt;li&gt;Use a different set of features to train the model&lt;/li&gt; &#xA; &lt;li&gt;Use your own dataset entirely&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;OS Specific Notes: Gunicorn is not Windows compatible!&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows users should not use the &lt;code&gt;run.sh&lt;/code&gt; shell script, as it depends on gunicorn.&lt;/li&gt; &#xA; &lt;li&gt;Windows users should use &lt;code&gt;py -m app.main&lt;/code&gt; to start the app with Flask acting as the server.&lt;/li&gt; &#xA; &lt;li&gt;Mac and Linux users can use &lt;code&gt;./run.sh&lt;/code&gt; script or type the command directly &lt;code&gt;python3 -m gunicorn app.main:APP&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Feel free to modify the shell scripts to suit your needs, these are intended to run locally.&lt;/li&gt; &#xA; &lt;li&gt;In any case you should not modify the Procfile, this is the run script for the remote server.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sukepc0824/Twitter-Dog2Bird</title>
    <updated>2023-04-08T01:31:34Z</updated>
    <id>tag:github.com,2023-04-08:/sukepc0824/Twitter-Dog2Bird</id>
    <link href="https://github.com/sukepc0824/Twitter-Dog2Bird" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>