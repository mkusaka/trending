<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-10T01:32:17Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Consensys/doc.zk-evm</title>
    <updated>2023-08-10T01:32:17Z</updated>
    <id>tag:github.com,2023-08-10:/Consensys/doc.zk-evm</id>
    <link href="https://github.com/Consensys/doc.zk-evm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;zk-EVM documentation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linea documentation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://linea.build/&#34;&gt;Linea&lt;/a&gt; is a developer-ready Layer 2 network, scaling Ethereum by providing an Ethereum-equivalent environment in which to execute transactions, which are then submitted to Ethereum Mainnet through a zero-knowledge rollup.&lt;/p&gt; &#xA;&lt;p&gt;This documentation repository is built using &lt;a href=&#34;https://docusaurus.io/&#34;&gt;Docusaurus&lt;/a&gt;, and the doc site is published at &lt;a href=&#34;https://docs.linea.build/&#34;&gt;&lt;code&gt;docs.linea.build&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute to the docs&lt;/h2&gt; &#xA;&lt;p&gt;See something missing? Error in our documentation? Create an issue &lt;a href=&#34;https://github.com/Consensys/doc.zk-evm/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, help us improve our documentation! View the &lt;a href=&#34;https://docs-template.consensys.net/&#34;&gt;Consensys doc contribution guidelines&lt;/a&gt; for information on how to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs-template.consensys.net/contribute/submit-a-contribution&#34;&gt;Submit a contribution&lt;/a&gt; using forks and pull requests.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;https://docs-template.consensys.net/contribute/style-guide&#34;&gt;documentation style guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs-template.consensys.net/contribute/format-markdown&#34;&gt;Format your Markdown&lt;/a&gt; correctly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs-template.consensys.net/contribute/preview&#34;&gt;Preview the docs&lt;/a&gt; locally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute to community tutorials&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve created more fleshed out guides and tutorials, we&#39;d love to feature your content in our community tutorials section. &lt;a href=&#34;https://github.com/Consensys/doc.zk-evm/fork&#34;&gt;Fork our repo&lt;/a&gt;, create a pull request, and tag us for review!&lt;/p&gt; &#xA;&lt;p&gt;You can learn how to add a post under the &lt;code&gt;/blog&lt;/code&gt; directory by following the Docusaurus instructions for &lt;a href=&#34;https://docusaurus.io/docs/blog#adding-posts&#34;&gt;adding posts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute to the Zero-Knowledge Glossary&lt;/h2&gt; &#xA;&lt;p&gt;Diving into zero-knowledge rollups and getting stumped by the technical jargon? We&#39;ve started an open source Zero-Knowledge glossary to define some common terms you might encounter as you dive into the L2 landscape.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Consensys/doc.zk-evm/fork&#34;&gt;Fork our repo&lt;/a&gt;, and add a term in alphabetical order to &lt;code&gt;docs/reference/glossary.md&lt;/code&gt;. Then, make a pull request and tag us for review!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jaiswaladi246/Petclinic</title>
    <updated>2023-08-10T01:32:17Z</updated>
    <id>tag:github.com,2023-08-10:/jaiswaladi246/Petclinic</id>
    <link href="https://github.com/jaiswaladi246/Petclinic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spring PetClinic Sample Application&lt;/h1&gt; &#xA;&lt;h1&gt;Modified By DevOps Shack &lt;a href=&#34;https://www.youtube.com/@devopsshack&#34;&gt;https://www.youtube.com/@devopsshack&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-petclinic/spring-framework-petclinic/actions/workflows/maven-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/spring-petclinic/spring-framework-petclinic/actions/workflows/maven-build.yml/badge.svg?sanitize=true&#34; alt=&#34;Java CI with Maven&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=spring-petclinic_spring-framework-petclinic&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=spring-petclinic_spring-framework-petclinic&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=spring-petclinic_spring-framework-petclinic&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=spring-petclinic_spring-framework-petclinic&amp;amp;metric=coverage&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project allows the Spring community to maintain a Petclinic version with a plain old &lt;strong&gt;Spring Framework configuration&lt;/strong&gt; and with a &lt;strong&gt;3-layer architecture&lt;/strong&gt; (i.e. presentation --&amp;gt; service --&amp;gt; repository). The &#34;canonical&#34; implementation is now based on Spring Boot, Thymeleaf and &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/%5Bhttps://github.com/spring-projects/spring-petclinic/pull/200&#34;&gt;aggregate-oriented domain&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Understanding the Spring Petclinic application with a few diagrams&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://fr.slideshare.net/AntoineRey/spring-framework-petclinic-sample-application&#34;&gt;See the presentation here&lt;/a&gt; (2017 update)&lt;/p&gt; &#xA;&lt;h2&gt;Running petclinic locally&lt;/h2&gt; &#xA;&lt;h3&gt;With Maven command line&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/spring-petclinic/spring-framework-petclinic.git&#xA;cd spring-framework-petclinic&#xA;./mvnw jetty:run-war&#xA;# For Windows : ./mvnw.cmd jetty:run-war&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -p 8080:8080 springcommunity/spring-framework-petclinic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then access petclinic here: &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;1042&#34; alt=&#34;petclinic-screenshot&#34; src=&#34;https://cloud.githubusercontent.com/assets/838318/19727082/2aee6d6c-9b8e-11e6-81fe-e889a5ddfded.png&#34;&gt; &#xA;&lt;h2&gt;In case you find a bug/suggested improvement for Spring Petclinic&lt;/h2&gt; &#xA;&lt;p&gt;Our issue tracker is available here: &lt;a href=&#34;https://github.com/spring-petclinic/spring-framework-petclinic/issues&#34;&gt;https://github.com/spring-petclinic/spring-framework-petclinic/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Database configuration&lt;/h2&gt; &#xA;&lt;p&gt;In its default configuration, Petclinic uses an in-memory database (H2) which gets populated at startup with data.&lt;/p&gt; &#xA;&lt;p&gt;A similar setups is provided for MySQL and PostgreSQL in case a persistent database configuration is needed. To run petclinic locally using persistent database, it is needed to run with profile defined in main pom.xml file.&lt;/p&gt; &#xA;&lt;p&gt;For MySQL database, it is needed to run with &#39;MySQL&#39; profile defined in main pom.xml file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mvnw jetty:run-war -P MySQL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before do this, would be good to check properties defined in MySQL profile inside pom.xml file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;properties&amp;gt;&#xA;    &amp;lt;jpa.database&amp;gt;MYSQL&amp;lt;/jpa.database&amp;gt;&#xA;    &amp;lt;jdbc.driverClassName&amp;gt;com.mysql.cj.jdbc.Driver&amp;lt;/jdbc.driverClassName&amp;gt;&#xA;    &amp;lt;jdbc.url&amp;gt;jdbc:mysql://localhost:3306/petclinic?useUnicode=true&amp;lt;/jdbc.url&amp;gt;&#xA;    &amp;lt;jdbc.username&amp;gt;petclinic&amp;lt;/jdbc.username&amp;gt;&#xA;    &amp;lt;jdbc.password&amp;gt;petclinic&amp;lt;/jdbc.password&amp;gt;&#xA;&amp;lt;/properties&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could start MySQL locally with whatever installer works for your OS, or with docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -e MYSQL_USER=petclinic -e MYSQL_PASSWORD=petclinic -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=petclinic -p 3306:3306 mysql:5.7.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For PostgreSQL database, it is needed to run with &#39;PostgreSQL&#39; profile defined in main pom.xml file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mvnw jetty:run-war -P PostgreSQL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before do this, would be good to check properties defined in PostgreSQL profile inside pom.xml file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;properties&amp;gt;&#xA;    &amp;lt;jpa.database&amp;gt;POSTGRESQL&amp;lt;/jpa.database&amp;gt;&#xA;    &amp;lt;jdbc.driverClassName&amp;gt;org.postgresql.Driver&amp;lt;/jdbc.driverClassName&amp;gt;&#xA;    &amp;lt;jdbc.url&amp;gt;jdbc:postgresql://localhost:5432/petclinic&amp;lt;/jdbc.url&amp;gt;&#xA;    &amp;lt;jdbc.username&amp;gt;postgres&amp;lt;/jdbc.username&amp;gt;&#xA;    &amp;lt;jdbc.password&amp;gt;petclinic&amp;lt;/jdbc.password&amp;gt;&#xA;&amp;lt;/properties&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could also start PostgreSQL locally with whatever installer works for your OS, or with docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name postgres-petclinic -e POSTGRES_PASSWORD=petclinic -e POSTGRES_DB=petclinic -p 5432:5432 -d postgres:9.6.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Persistence layer choice&lt;/h2&gt; &#xA;&lt;p&gt;The persistence layer have 3 available implementations: JPA (default), JDBC and Spring Data JPA. The default JPA implementation could be changed by using a Spring profile: &lt;code&gt;jdbc&lt;/code&gt;, &lt;code&gt;spring-data-jpa&lt;/code&gt; and &lt;code&gt;jpa&lt;/code&gt;.&lt;br&gt; As an example, you may use the &lt;code&gt;-Dspring.profiles.active=jdbc&lt;/code&gt; VM options to start the application with the JDBC implementation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mvnw jetty:run-war -Dspring.profiles.active=jdbc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Working with Petclinic in your IDE&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;The following items should be installed in your system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 8 or newer (full JDK not a JRE)&lt;/li&gt; &#xA; &lt;li&gt;Maven 3.3+ (&lt;a href=&#34;http://maven.apache.org/install.html&#34;&gt;http://maven.apache.org/install.html&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;git command line tool (&lt;a href=&#34;https://help.github.com/articles/set-up-git&#34;&gt;https://help.github.com/articles/set-up-git&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Jetty 9.4+ or Tomcat 9+&lt;/li&gt; &#xA; &lt;li&gt;Your prefered IDE &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Eclipse with the m2e plugin. Note: when m2e is available, there is an m2 icon in Help -&amp;gt; About dialog. If m2e is not there, just follow the install process here: &lt;a href=&#34;http://www.eclipse.org/m2e/&#34;&gt;http://www.eclipse.org/m2e/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://spring.io/tools&#34;&gt;Spring Tools Suite&lt;/a&gt; (STS)&lt;/li&gt; &#xA;   &lt;li&gt;IntelliJ IDEA&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Steps:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;On the command line&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/spring-petclinic/spring-framework-petclinic.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Inside Eclipse or STS&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;File -&amp;gt; Import -&amp;gt; Maven -&amp;gt; Existing Maven project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then either build on the command line &lt;code&gt;./mvnw generate-resources&lt;/code&gt; or using the Eclipse launcher (right click on project and &lt;code&gt;Run As -&amp;gt; Maven install&lt;/code&gt;) to generate the CSS. Configure a Jetty or a Tomcat web container then deploy the &lt;code&gt;spring-petclinic.war&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Inside IntelliJ IDEA&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In the main menu, select&amp;nbsp;&lt;code&gt;File &amp;gt; Open&lt;/code&gt; and select the&amp;nbsp;Petclinic &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/pom.xml&#34;&gt;pom.xml&lt;/a&gt;. Click on the &lt;code&gt;Open&lt;/code&gt; button.&lt;/p&gt; &#xA;&lt;p&gt;CSS files are generated from the Maven build. You can either build them on the command line &lt;code&gt;./mvnw generate-resources&lt;/code&gt; or right click on the &lt;code&gt;spring-petclinic&lt;/code&gt; project then &lt;code&gt;Maven -&amp;gt; Generates sources and Update Folders&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Go to the &lt;code&gt;Run -&amp;gt; Edit Configuration&lt;/code&gt; then configure a Tomcat or a Jetty web container. Deploy the &lt;code&gt;spring-petclinic.war&lt;/code&gt; file. Run the application by clicking on the &lt;code&gt;Run&lt;/code&gt; icon.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Navigate to Petclinic&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; in your browser.&lt;/p&gt; &#xA;&lt;h2&gt;Working with Petclinic in IntelliJ IDEA&lt;/h2&gt; &#xA;&lt;h3&gt;prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;The following items should be installed in your system:&lt;/p&gt; &#xA;&lt;h2&gt;Looking for something in particular?&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Java Config&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java config branch&lt;/td&gt; &#xA;   &lt;td&gt;Petclinic uses XML configuration by default. In case you&#39;d like to use Java Config instead, there is a Java Config branch available &lt;a href=&#34;https://github.com/spring-petclinic/spring-framework-petclinic/tree/javaconfig&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Inside the &#39;Web&#39; layer&lt;/th&gt; &#xA;   &lt;th&gt;Files&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spring MVC - XML integration&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/resources/spring/mvc-view-config.xml&#34;&gt;mvc-view-config.xml&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spring MVC - ContentNegotiatingViewResolver&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/resources/spring/mvc-view-config.xml&#34;&gt;mvc-view-config.xml&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSP custom tags&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/webapp/WEB-INF/tags&#34;&gt;WEB-INF/tags&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/webapp/WEB-INF/jsp/owners/createOrUpdateOwnerForm.jsp&#34;&gt;createOrUpdateOwnerForm.jsp&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript dependencies&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/pom.xml&#34;&gt;JavaScript libraries are declared as webjars in the pom.xml&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Static resources config&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/resources/spring/mvc-core-config.xml#L30&#34;&gt;Resource mapping in Spring configuration&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Static resources usage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/webapp/WEB-INF/tags/htmlHeader.tag&#34;&gt;htmlHeader.tag&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/webapp/WEB-INF/tags/footer.tag&#34;&gt;footer.tag&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Thymeleaf&lt;/td&gt; &#xA;   &lt;td&gt;In the late 2016, the original &lt;a href=&#34;https://github.com/spring-projects/spring-petclinic&#34;&gt;Spring Petclinic&lt;/a&gt; has moved from JSP to Thymeleaf.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&#39;Service&#39; and &#39;Repository&#39; layers&lt;/th&gt; &#xA;   &lt;th&gt;Files&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Transactions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/resources/spring/business-config.xml&#34;&gt;business-config.xml&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/java/org/springframework/samples/petclinic/service/ClinicServiceImpl.java&#34;&gt;ClinicServiceImpl.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cache&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/resources/spring/tools-config.xml&#34;&gt;tools-config.xml&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/java/org/springframework/samples/petclinic/service/ClinicServiceImpl.java&#34;&gt;ClinicServiceImpl.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bean Profiles&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/resources/spring/business-config.xml&#34;&gt;business-config.xml&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/test/java/org/springframework/samples/petclinic/service/ClinicServiceJdbcTests.java&#34;&gt;ClinicServiceJdbcTests.java&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/java/org/springframework/samples/petclinic/PetclinicInitializer.java&#34;&gt;PetclinicInitializer.java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JDBC&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/resources/spring/business-config.xml&#34;&gt;business-config.xml&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/java/org/springframework/samples/petclinic/repository/jdb&#34;&gt;jdbc folder&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JPA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/resources/spring/business-config.xml&#34;&gt;business-config.xml&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/java/org/springframework/samples/petclinic/repository/jpa&#34;&gt;jpa folder&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spring Data JPA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/resources/spring/business-config.xml&#34;&gt;business-config.xml&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/src/main/java/org/springframework/samples/petclinic/repository/springdatajpa&#34;&gt;springdatajpa folder&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Publishing a Docker image&lt;/h2&gt; &#xA;&lt;p&gt;This application uses &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/%5Bhttps://github.com/GoogleContainerTools/jib&#34;&gt;Google Jib&lt;/a&gt; to build an optimized Docker image into the &lt;a href=&#34;https://cloud.docker.com/u/springcommunity/repository/docker/springcommunity/spring-framework-petclinic/&#34;&gt;Docker Hub&lt;/a&gt; repository. The &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/pom.xml&#34;&gt;pom.xml&lt;/a&gt; has been configured to publish the image with a the &lt;code&gt;springcommunity/spring-framework-petclinic&lt;/code&gt; image name.&lt;/p&gt; &#xA;&lt;p&gt;Jib containerizes this WAR project by using the &lt;a href=&#34;https://github.com/GoogleContainerTools/distroless/tree/master/java/jetty&#34;&gt;distroless Jetty&lt;/a&gt; as a base image.&lt;/p&gt; &#xA;&lt;p&gt;Build and push the container image of Petclinic to the Docker Hub registry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mvn jib:build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interesting Spring Petclinic forks&lt;/h2&gt; &#xA;&lt;p&gt;The Spring Petclinic master branch in the main &lt;a href=&#34;https://github.com/spring-projects/spring-petclinic&#34;&gt;spring-projects&lt;/a&gt; GitHub org is the &#34;canonical&#34; implementation, currently based on Spring Boot and Thymeleaf.&lt;/p&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://github.com/spring-petclinic/spring-framework-petclinic&#34;&gt;spring-framework-petclinic&lt;/a&gt; project is one of the &lt;a href=&#34;https://spring-petclinic.github.io/docs/forks.html&#34;&gt;several forks&lt;/a&gt; hosted in a special GitHub org: &lt;a href=&#34;https://github.com/spring-petclinic&#34;&gt;spring-petclinic&lt;/a&gt;. If you have a special interest in a different technology stack that could be used to implement the Pet Clinic then please join the community there.&lt;/p&gt; &#xA;&lt;h2&gt;Interaction with other open source projects&lt;/h2&gt; &#xA;&lt;p&gt;One of the best parts about working on the Spring Petclinic application is that we have the opportunity to work in direct contact with many Open Source projects. We found some bugs/suggested improvements on various topics such as Spring, Spring Data, Bean Validation and even Eclipse! In many cases, they&#39;ve been fixed/implemented in just a few days. Here is a list of them:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Issue&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spring JDBC: simplify usage of NamedParameterJdbcTemplate&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jira.springsource.org/browse/SPR-10256&#34;&gt;SPR-10256&lt;/a&gt; and &lt;a href=&#34;https://jira.springsource.org/browse/SPR-10257&#34;&gt;SPR-10257&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bean Validation / Hibernate Validator: simplify Maven dependencies and backward compatibility&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hibernate.atlassian.net/browse/HV-790&#34;&gt;HV-790&lt;/a&gt; and &lt;a href=&#34;https://hibernate.atlassian.net/browse/HV-792&#34;&gt;HV-792&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spring Data: provide more flexibility when working with JPQL queries&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jira.springsource.org/browse/DATAJPA-292&#34;&gt;DATAJPA-292&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dandelion: improves the DandelionFilter for Jetty support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dandelion/dandelion/issues/113&#34;&gt;113&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Approved by the Spring team, this repo is a fork of the &lt;a href=&#34;https://github.com/spring-projects/spring-petclinic&#34;&gt;spring-projects/spring-petclinic&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/issues&#34;&gt;issue tracker&lt;/a&gt; is the preferred channel for bug reports, features requests and submitting pull requests.&lt;/p&gt; &#xA;&lt;p&gt;For pull requests, editor preferences are available in the &lt;a href=&#34;https://raw.githubusercontent.com/jaiswaladi246/Petclinic/main/.editorconfig&#34;&gt;editor config&lt;/a&gt; for easy use in common text editors. Read more and download plugins at &lt;a href=&#34;http://editorconfig.org&#34;&gt;http://editorconfig.org&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>avenger11/Apple-HomePlay</title>
    <updated>2023-08-10T01:32:17Z</updated>
    <id>tag:github.com,2023-08-10:/avenger11/Apple-HomePlay</id>
    <link href="https://github.com/avenger11/Apple-HomePlay" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Custom Apple theme and configuration for Home Assistant&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HomeOS Dashboard&lt;/h1&gt; &#xA;&lt;p&gt;My take on Apple Home Dashboard Design for Home Assistant.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m running Home Assistant OS Supervised VM hosted on a NAS DS920+. The Wall Mount tablet is a FireHD 10 from amazon running Fully Kiosk Browser.&lt;/p&gt; &#xA;&lt;p&gt;See interaction on Youtube &lt;a href=&#34;https://www.youtube.com/watch?v=zyPGEAOFoiQ&#34;&gt;https://www.youtube.com/watch?v=zyPGEAOFoiQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Version 2.2.0&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/avenger11/Apple-HomePlay/assets/37946892/f0c2ce67-736e-4506-8871-17e1a1254c90&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/avenger11/Apple-HomePlay/assets/37946892/843753b8-6b19-4091-a9f2-3bbbe4befbba&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Architecture&lt;/h1&gt; &#xA;&lt;p&gt;This is the keyplan for the layout.&lt;/p&gt; &#xA;&lt;p&gt;The code for the custom:grid-layout can be edited within homeplay.yaml&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234449029-eb518f05-ca48-468b-9ef2-6d73abda07d9.png&#34; width=&#34;40%&#34; height=&#34;40%&#34;&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234452580-5278f1b3-c71f-4653-8507-8d89ed29911f.png&#34; width=&#34;60%&#34; height=&#34;60%&#34;&gt; &#xA;&lt;h1&gt;TOPBAR | Quick Glance at your house state&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234453082-ec540557-25c0-4b81-8a8f-f41089791a24.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234453091-24e6d17b-5850-47d8-91a8-15fbf390157f.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234453106-393cc3c1-20c3-412e-904e-bd4e2973acd7.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dynamic Dual Tone Icon&lt;/li&gt; &#xA; &lt;li&gt;Climat chips will change color based on heating or cooling&lt;/li&gt; &#xA; &lt;li&gt;SVG Icons can be found under button_card_template/icon-svg-dualtone.yaml&lt;/li&gt; &#xA; &lt;li&gt;Heavy use of template that are found in button_card_template directory&lt;/li&gt; &#xA; &lt;li&gt;Popup for battery level (more to come)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234737716-e039c402-9a8c-4b80-95f1-01bf7a79f02e.png&#34; width=&#34;40%&#34; height=&#34;40%&#34;&gt; &#xA;&lt;p&gt;These custom button are integrated in a custom:hui-element – horizontal stack center to the screen.&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234737747-07818cf9-6d7f-4e0b-868a-2e229689eeb5.png&#34; width=&#34;40%&#34; height=&#34;40%&#34;&gt; &#xA;&lt;h1&gt;LEFT COLUMN | Weather Card&lt;/h1&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234737981-17ce3c72-89f2-4ca9-b6c5-e850b9f8f10f.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &#xA;&lt;p&gt;Weather background change based on condition and day/night (screenshot from weather app). The background can be found in www/weather folder. I’m using the weather code from the Montréal Environnement Canada Integration and a Value template in configuration.yaml to differentiate between day and night.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234737871-760f7af8-5c04-431c-b1f9-39ecef1b4a64.png&#34; width=&#34;25%&#34; height=&#34;25%&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234737875-6635c314-f8dc-4039-b1d2-f32e74d33831.png&#34; width=&#34;25%&#34; height=&#34;25%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;One example: The high and low temperature in the card use a value template as well to format properly&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234737956-17515b79-dc90-40e7-80e6-8176586b4da1.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &#xA;&lt;h1&gt;LEFT COLUMN | Calendar Card&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Calendar Card from Atomic Calendar.&lt;/li&gt; &#xA; &lt;li&gt;Heavily modified with Card Mod.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234738068-32f7286f-703f-482f-bf3a-a0db17d7f365.png&#34; width=&#34;25%&#34; height=&#34;25%&#34;&gt; &#xA;&lt;h1&gt;CENTER COLUMN | Home view map&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple floor by swaping or using the level button&lt;/li&gt; &#xA; &lt;li&gt;Image change based on day and night&lt;/li&gt; &#xA; &lt;li&gt;The floor plan have been designed in &lt;a href=&#34;https://www.sweethome3d.com/&#34;&gt;Sweet Home 3D&lt;/a&gt; and edited.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234738924-f882810a-8815-49fa-81af-027dd9f8f43a.png&#34; width=&#34;40%&#34; height=&#34;40%&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234738933-a550a9d3-363b-4ca0-bcc4-7f905b726a5b.png&#34; width=&#34;40%&#34; height=&#34;40%&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;RIGHT SIDE | highlight card&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234757521-0b5d624e-8156-437f-a92a-d4243921dc2c.gif&#34; alt=&#34;Lavage&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/236594194-75aa3790-a11f-46f4-bb08-3a4f6183092e.png&#34; width=&#34;10%&#34; height=&#34;10%&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234738133-73cd420a-1eea-4935-8576-96744aae5348.png&#34; width=&#34;10%&#34; height=&#34;10%&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;TASK BAR |&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234738185-5866cfe7-f777-47d0-a140-66f442b4f126.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37946892/234738193-1ec31a2c-2f42-4527-a433-ca20ed0d7d8a.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Custom Cards from HACS&lt;/h2&gt; &#xA;&lt;p&gt;Ensure to install those custom card before using this configuration via HACS&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomasloven/lovelace-layout-card&#34;&gt;Lovelace-Layout-Card&lt;/a&gt; by Thomas loven.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bramkragten/swipe-card&#34;&gt;Swipe-card&lt;/a&gt; by Bram Kragten.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/custom-cards/button-card&#34;&gt;Button-card&lt;/a&gt; by RomRider.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomasloven/lovelace-card-mod&#34;&gt;Lovelace-Card-mod&lt;/a&gt; by Thomas loven&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/totaldebug/atomic-calendar-revive&#34;&gt;Atomic Calendar Revive&lt;/a&gt; by marksie1988&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NemesisRE/kiosk-mode&#34;&gt;Kiosk Mode&lt;/a&gt; by NemesisRE&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pkissling/clock-weather-card&#34;&gt;Clock weather card&lt;/a&gt; by pkissling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Custom integration from HACS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomasloven/hass-fontawesome&#34;&gt;Fontawesome&lt;/a&gt; by Thomas loven.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomasloven/hass-browser_mod&#34;&gt;Browser_mod&lt;/a&gt; by Thomas loven.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;inspired by the great work of &lt;a href=&#34;https://github.com/matt8707/hass-config&#34;&gt;Mattias Persson&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/lukevink/hass-config-lajv&#34;&gt;lukevink&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;d like to support me and future projects:&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🌟&lt;/span&gt; Star my repo, if you like what you see :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/sebhome&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>