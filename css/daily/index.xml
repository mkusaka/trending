<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-29T01:33:53Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>reworkcss/css</title>
    <updated>2023-06-29T01:33:53Z</updated>
    <id>tag:github.com,2023-06-29:/reworkcss/css</id>
    <link href="https://github.com/reworkcss/css" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CSS parser / stringifier for Node.js&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;css &lt;a href=&#34;https://travis-ci.org/reworkcss/css&#34;&gt;&lt;img src=&#34;https://travis-ci.org/reworkcss/css.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;CSS parser / stringifier.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm install css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var css = require(&#39;css&#39;);&#xA;var obj = css.parse(&#39;body { font-size: 12px; }&#39;, options);&#xA;css.stringify(obj, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;css.parse(code, [options])&lt;/h3&gt; &#xA;&lt;p&gt;Accepts a CSS string and returns an AST &lt;code&gt;object&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;options&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;silent: silently fail on parse errors.&lt;/li&gt; &#xA; &lt;li&gt;source: the path to the file containing &lt;code&gt;css&lt;/code&gt;. Makes errors and source maps more helpful, by letting them know where code comes from.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;css.stringify(object, [options])&lt;/h3&gt; &#xA;&lt;p&gt;Accepts an AST &lt;code&gt;object&lt;/code&gt; (as &lt;code&gt;css.parse&lt;/code&gt; produces) and returns a CSS string.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;options&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;indent: the string used to indent the output. Defaults to two spaces.&lt;/li&gt; &#xA; &lt;li&gt;compress: omit comments and extraneous whitespace.&lt;/li&gt; &#xA; &lt;li&gt;sourcemap: return a sourcemap along with the CSS output. Using the &lt;code&gt;source&lt;/code&gt; option of &lt;code&gt;css.parse&lt;/code&gt; is strongly recommended when creating a source map. Specify &lt;code&gt;sourcemap: &#39;generator&#39;&lt;/code&gt; to return the SourceMapGenerator object instead of serializing the source map.&lt;/li&gt; &#xA; &lt;li&gt;inputSourcemaps: (enabled by default, specify &lt;code&gt;false&lt;/code&gt; to disable) reads any source maps referenced by the input files when generating the output source map. When enabled, file system access may be required for reading the referenced source maps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var ast = css.parse(&#39;body { font-size: 12px; }&#39;, { source: &#39;source.css&#39; });&#xA;&#xA;var css = css.stringify(ast);&#xA;&#xA;var result = css.stringify(ast, { sourcemap: true });&#xA;result.code // string with CSS&#xA;result.map // source map object&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Errors&lt;/h3&gt; &#xA;&lt;p&gt;Errors thrown during parsing have the following properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;message: &lt;code&gt;String&lt;/code&gt;. The full error message with the source position.&lt;/li&gt; &#xA; &lt;li&gt;reason: &lt;code&gt;String&lt;/code&gt;. The error message without position.&lt;/li&gt; &#xA; &lt;li&gt;filename: &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. The value of &lt;code&gt;options.source&lt;/code&gt; if passed to &lt;code&gt;css.parse&lt;/code&gt;. Otherwise &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;line: &lt;code&gt;Integer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;column: &lt;code&gt;Integer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;source: &lt;code&gt;String&lt;/code&gt;. The portion of code that couldn&#39;t be parsed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When parsing with the &lt;code&gt;silent&lt;/code&gt; option, errors are listed in the &lt;code&gt;parsingErrors&lt;/code&gt; property of the &lt;a href=&#34;https://raw.githubusercontent.com/reworkcss/css/master/#stylesheet&#34;&gt;&lt;code&gt;stylesheet&lt;/code&gt;&lt;/a&gt; node instead of being thrown.&lt;/p&gt; &#xA;&lt;p&gt;If you create any errors in plugins such as in &lt;a href=&#34;https://github.com/reworkcss/rework&#34;&gt;rework&lt;/a&gt;, you &lt;strong&gt;must&lt;/strong&gt; set the same properties for consistency.&lt;/p&gt; &#xA;&lt;h2&gt;AST&lt;/h2&gt; &#xA;&lt;p&gt;Interactively explore the AST with &lt;a href=&#34;http://iamdustan.com/reworkcss_ast_explorer/&#34;&gt;http://iamdustan.com/reworkcss_ast_explorer/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Common properties&lt;/h3&gt; &#xA;&lt;p&gt;All nodes have the following properties.&lt;/p&gt; &#xA;&lt;h4&gt;position&lt;/h4&gt; &#xA;&lt;p&gt;Information about the position in the source string that corresponds to the node.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Object&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;start: &lt;code&gt;Object&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;line: &lt;code&gt;Number&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;column: &lt;code&gt;Number&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;end: &lt;code&gt;Object&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;line: &lt;code&gt;Number&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;column: &lt;code&gt;Number&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;source: &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. The value of &lt;code&gt;options.source&lt;/code&gt; if passed to &lt;code&gt;css.parse&lt;/code&gt;. Otherwise &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;content: &lt;code&gt;String&lt;/code&gt;. The full source string passed to &lt;code&gt;css.parse&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The line and column numbers are 1-based: The first line is 1 and the first column of a line is 1 (not 0).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;position&lt;/code&gt; property lets you know from which source file the node comes from (if available), what that file contains, and what part of that file was parsed into the node.&lt;/p&gt; &#xA;&lt;h4&gt;type&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;String&lt;/code&gt;. The possible values are the ones listed in the Types section below.&lt;/p&gt; &#xA;&lt;h4&gt;parent&lt;/h4&gt; &#xA;&lt;p&gt;A reference to the parent node, or &lt;code&gt;null&lt;/code&gt; if the node has no parent.&lt;/p&gt; &#xA;&lt;h3&gt;Types&lt;/h3&gt; &#xA;&lt;p&gt;The available values of &lt;code&gt;node.type&lt;/code&gt; are listed below, as well as the available properties of each node (other than the common properties listed above.)&lt;/p&gt; &#xA;&lt;h4&gt;stylesheet&lt;/h4&gt; &#xA;&lt;p&gt;The root node returned by &lt;code&gt;css.parse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;stylesheet: &lt;code&gt;Object&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;rules: &lt;code&gt;Array&lt;/code&gt; of nodes with the types &lt;code&gt;rule&lt;/code&gt;, &lt;code&gt;comment&lt;/code&gt; and any of the at-rule types.&lt;/li&gt; &#xA;   &lt;li&gt;parsingErrors: &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;Error&lt;/code&gt;s. Errors collected during parsing when option &lt;code&gt;silent&lt;/code&gt; is true.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;rule&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;selectors: &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;String&lt;/code&gt;s. The list of selectors of the rule, split on commas. Each selector is trimmed from whitespace and comments.&lt;/li&gt; &#xA; &lt;li&gt;declarations: &lt;code&gt;Array&lt;/code&gt; of nodes with the types &lt;code&gt;declaration&lt;/code&gt; and &lt;code&gt;comment&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;declaration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;property: &lt;code&gt;String&lt;/code&gt;. The property name, trimmed from whitespace and comments. May not be empty.&lt;/li&gt; &#xA; &lt;li&gt;value: &lt;code&gt;String&lt;/code&gt;. The value of the property, trimmed from whitespace and comments. Empty values are allowed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;comment&lt;/h4&gt; &#xA;&lt;p&gt;A rule-level or declaration-level comment. Comments inside selectors, properties and values etc. are lost.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;comment: &lt;code&gt;String&lt;/code&gt;. The part between the starting &lt;code&gt;/*&lt;/code&gt; and the ending &lt;code&gt;*/&lt;/code&gt; of the comment, including whitespace.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;charset&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@charset&lt;/code&gt; at-rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;charset: &lt;code&gt;String&lt;/code&gt;. The part following &lt;code&gt;@charset &lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;custom-media&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@custom-media&lt;/code&gt; at-rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;name: &lt;code&gt;String&lt;/code&gt;. The &lt;code&gt;--&lt;/code&gt;-prefixed name.&lt;/li&gt; &#xA; &lt;li&gt;media: &lt;code&gt;String&lt;/code&gt;. The part following the name.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;document&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@document&lt;/code&gt; at-rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;document: &lt;code&gt;String&lt;/code&gt;. The part following &lt;code&gt;@document &lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;vendor: &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. The vendor prefix in &lt;code&gt;@document&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt; if there is none.&lt;/li&gt; &#xA; &lt;li&gt;rules: &lt;code&gt;Array&lt;/code&gt; of nodes with the types &lt;code&gt;rule&lt;/code&gt;, &lt;code&gt;comment&lt;/code&gt; and any of the at-rule types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;font-face&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@font-face&lt;/code&gt; at-rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;declarations: &lt;code&gt;Array&lt;/code&gt; of nodes with the types &lt;code&gt;declaration&lt;/code&gt; and &lt;code&gt;comment&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;host&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@host&lt;/code&gt; at-rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rules: &lt;code&gt;Array&lt;/code&gt; of nodes with the types &lt;code&gt;rule&lt;/code&gt;, &lt;code&gt;comment&lt;/code&gt; and any of the at-rule types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;import&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@import&lt;/code&gt; at-rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;import: &lt;code&gt;String&lt;/code&gt;. The part following &lt;code&gt;@import &lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;keyframes&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@keyframes&lt;/code&gt; at-rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;name: &lt;code&gt;String&lt;/code&gt;. The name of the keyframes rule.&lt;/li&gt; &#xA; &lt;li&gt;vendor: &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. The vendor prefix in &lt;code&gt;@keyframes&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt; if there is none.&lt;/li&gt; &#xA; &lt;li&gt;keyframes: &lt;code&gt;Array&lt;/code&gt; of nodes with the types &lt;code&gt;keyframe&lt;/code&gt; and &lt;code&gt;comment&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;keyframe&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;values: &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;String&lt;/code&gt;s. The list of “selectors” of the keyframe rule, split on commas. Each “selector” is trimmed from whitespace.&lt;/li&gt; &#xA; &lt;li&gt;declarations: &lt;code&gt;Array&lt;/code&gt; of nodes with the types &lt;code&gt;declaration&lt;/code&gt; and &lt;code&gt;comment&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;media&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@media&lt;/code&gt; at-rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;media: &lt;code&gt;String&lt;/code&gt;. The part following &lt;code&gt;@media &lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;rules: &lt;code&gt;Array&lt;/code&gt; of nodes with the types &lt;code&gt;rule&lt;/code&gt;, &lt;code&gt;comment&lt;/code&gt; and any of the at-rule types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;namespace&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@namespace&lt;/code&gt; at-rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;namespace: &lt;code&gt;String&lt;/code&gt;. The part following &lt;code&gt;@namespace &lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;page&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@page&lt;/code&gt; at-rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;selectors: &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;String&lt;/code&gt;s. The list of selectors of the rule, split on commas. Each selector is trimmed from whitespace and comments.&lt;/li&gt; &#xA; &lt;li&gt;declarations: &lt;code&gt;Array&lt;/code&gt; of nodes with the types &lt;code&gt;declaration&lt;/code&gt; and &lt;code&gt;comment&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;supports&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@supports&lt;/code&gt; at-rule.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;supports: &lt;code&gt;String&lt;/code&gt;. The part following &lt;code&gt;@supports &lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;rules: &lt;code&gt;Array&lt;/code&gt; of nodes with the types &lt;code&gt;rule&lt;/code&gt;, &lt;code&gt;comment&lt;/code&gt; and any of the at-rule types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;CSS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {&#xA;  background: #eee;&#xA;  color: #888;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parse tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;type&#34;: &#34;stylesheet&#34;,&#xA;  &#34;stylesheet&#34;: {&#xA;    &#34;rules&#34;: [&#xA;      {&#xA;        &#34;type&#34;: &#34;rule&#34;,&#xA;        &#34;selectors&#34;: [&#xA;          &#34;body&#34;&#xA;        ],&#xA;        &#34;declarations&#34;: [&#xA;          {&#xA;            &#34;type&#34;: &#34;declaration&#34;,&#xA;            &#34;property&#34;: &#34;background&#34;,&#xA;            &#34;value&#34;: &#34;#eee&#34;,&#xA;            &#34;position&#34;: {&#xA;              &#34;start&#34;: {&#xA;                &#34;line&#34;: 2,&#xA;                &#34;column&#34;: 3&#xA;              },&#xA;              &#34;end&#34;: {&#xA;                &#34;line&#34;: 2,&#xA;                &#34;column&#34;: 19&#xA;              }&#xA;            }&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;declaration&#34;,&#xA;            &#34;property&#34;: &#34;color&#34;,&#xA;            &#34;value&#34;: &#34;#888&#34;,&#xA;            &#34;position&#34;: {&#xA;              &#34;start&#34;: {&#xA;                &#34;line&#34;: 3,&#xA;                &#34;column&#34;: 3&#xA;              },&#xA;              &#34;end&#34;: {&#xA;                &#34;line&#34;: 3,&#xA;                &#34;column&#34;: 14&#xA;              }&#xA;            }&#xA;          }&#xA;        ],&#xA;        &#34;position&#34;: {&#xA;          &#34;start&#34;: {&#xA;            &#34;line&#34;: 1,&#xA;            &#34;column&#34;: 1&#xA;          },&#xA;          &#34;end&#34;: {&#xA;            &#34;line&#34;: 4,&#xA;            &#34;column&#34;: 2&#xA;          }&#xA;        }&#xA;      }&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elixir-europe-training/CodeReproducibility</title>
    <updated>2023-06-29T01:33:53Z</updated>
    <id>tag:github.com,2023-06-29:/elixir-europe-training/CodeReproducibility</id>
    <link href="https://github.com/elixir-europe-training/CodeReproducibility" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Current URL: https://elixir-europe-training.github.io/CodeReproducibility/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Code Reproducibility&lt;/h1&gt; &#xA;&lt;h2&gt;Training on sustainable code development&lt;/h2&gt; &#xA;&lt;p&gt;The project Code Reproducibility was launched in 2022 and aims to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;equip learners with core skills and best practices required to develop sustainable code and good software development practices.&lt;/li&gt; &#xA; &lt;li&gt;build collaborations with existing communities/groups that promote software development best practices and reproducibility.&lt;/li&gt; &#xA; &lt;li&gt;create a community of reproducibility training experts that will enable us to create, maintain and teach the reproducibility training programme developed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The repository is for the website development of the Code Reproducibility.&lt;/p&gt; &#xA;&lt;h2&gt;Website:&lt;/h2&gt; &#xA;&lt;p&gt;Coming Soon!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-CC%20BY%204.0-lightgrey.svg?sanitize=true&#34; alt=&#34;CC BY 4.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Organisers&lt;/h2&gt; &#xA;&lt;p&gt;The project is part of ELIXIR Europe, and it is led by Alexia Cardona (ELIXIR-UK) and Nazeefa Fatima (ELIXIR-Norway).&lt;/p&gt; &#xA;&lt;h2&gt;Attribution&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ELIXIR-Belgium/elixir-toolkit-theme&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ELIXIR%20toolkit%20theme-jekyll-blue?color=0d6efd&#34; alt=&#34;theme badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The website is based on &lt;a href=&#34;https://github.com/ELIXIR-Belgium/elixir-toolkit-theme&#34;&gt;ELIXIR Toolkit Theme&lt;/a&gt; which is developed by &lt;a href=&#34;https://github.com/ELIXIR-Belgium&#34;&gt;ELIXIR Belgium&lt;/a&gt; and it is available under &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>codepath/site-week4-project3-lifetracker-starter</title>
    <updated>2023-06-29T01:33:53Z</updated>
    <id>tag:github.com,2023-06-29:/codepath/site-week4-project3-lifetracker-starter</id>
    <link href="https://github.com/codepath/site-week4-project3-lifetracker-starter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CURRENT - 2023 SITE Starter Code for LifeTracker Assignment starter code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Project #3: LifeTracker Application&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Data is the new oil - Clive Humbly&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Everywhere around us is data waiting to be collected and utilized. In recent years, we&#39;ve seen the rise of applications and services that exist to quantify concepts that were previously hard to capture. FitBit, Apple Health, and Woop are all $1 billion dollar services to offer tracking statistics about how we live our lives. The LifeTracker app you&#39;ll be building will do exactly that - track your life by quantifying your activity.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;By the end of this project you will be able to...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Develop a full-fledged authentication system using PostgreSQL and &lt;code&gt;bcrypt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Provide users with an Express API they can interact with to store user-related activity&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Construct multiple models that implement the core business logic associated with tracking users&#39; lives&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write SQL queries that aggregate user statistics and provide summary overviews about their activity&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Design a React frontend that interacts with the API using an API service class&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build multiple pages and forms that communicate with the server using HTTP requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Employ &lt;code&gt;useEffect&lt;/code&gt; and &lt;code&gt;useState&lt;/code&gt; hooks to manage application state on the frontend&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Store user-authenticated JWT tokens in the browser&#39;s local storage for persisted authentication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Application Features&lt;/h2&gt; &#xA;&lt;h3&gt;Core Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;The Landing Page:&lt;/strong&gt; Display a large hero image and a brief blurb on what this application is about. &lt;em&gt;Note:&lt;/em&gt; This is the only page that unauthenticated users should be able to view.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Registration Page:&lt;/strong&gt; A form that allows the user to sign up with their email, password, username, first name, and last name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Login Page:&lt;/strong&gt; A form that allows users to login with email and password.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When a user first authenticates, they should be redirected to an authenticated view (i.e., the detailed activity page). When they sign out, all frontend data should be reset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;The Nav Bar:&lt;/strong&gt; Implement customized views for users who are logged in vs not logged in. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the user is logged in, it should display a &lt;strong&gt;Sign Out&lt;/strong&gt; button.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If no user is logged in, it should display &lt;strong&gt;Login&lt;/strong&gt; and &lt;strong&gt;Register&lt;/strong&gt; buttons.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Display a logo on the far left side, and contain links to the individual detailed activity pages.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Users should have the ability to track at least &lt;strong&gt;one&lt;/strong&gt; type of activity (i.e., nutrition, exercise, sleep, etc.). Each activity should be tracked on separate pages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Detailed Activity Page:&lt;/strong&gt; Display and enter activities. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Display a feed of all previously tracked activities.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A form to enter relevant information (i.e., if tracking nutrition, the user can enter calories, timestamp, image, category, etc.).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Each activity tracked is given a unique ID for easy lookup.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Deploy your website with Render. Check out our &lt;a href=&#34;https://courses.codepath.org/snippets/site/render_deployment_guide&#34;&gt;Render Deployment Guide&lt;/a&gt; for detailed instructions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stretch Features&lt;/h3&gt; &#xA;&lt;p&gt;Implement any of the following features to improve the application:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Users have access to an overview Activity page that shows one summary statistic about each of the three types of activity tracked (i.e., total number of minutes exercised, average calories consumed, max hours of sleep in one night, etc.). These summary statistics should be created using the &lt;code&gt;AVG&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, &lt;code&gt;COUNT&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt;, functions in SQL queries and served from a dedicated API endpoint. &lt;em&gt;Note: Summary statistics should not be calculated on the frontend.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Each model (i.e &lt;code&gt;nutrition&lt;/code&gt;, &lt;code&gt;exercise&lt;/code&gt;, and &lt;code&gt;sleep&lt;/code&gt;) should also implement a &lt;code&gt;fetchById&lt;/code&gt; method that queries the database for a record by its id and only serves it to users who own that resource. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You should also create a new dynamic route on the frontend that displays detail about a single record. For instance, &lt;code&gt;nutrition/detail/:id&lt;/code&gt; should show a page with all the information about a single nutrition item.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Provide a dropdown that allows users to filter activity based on a certain attribute of any activity item. Example: filter exercise or nutrition by category, or filter sleep by the week/month it was recorded.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Calculate aggregate statistics based on time periods - such as daily, weekly, monthly aggregates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a page that shows all other users that use the LifeTracker application and allow users to follow each other. You&#39;ll want to create a new table to store this data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement &lt;code&gt;security&lt;/code&gt; middleware on the API that allows only authenticated users to access resources and allows users to only access resources about themselves.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building the app&lt;/h3&gt; &#xA;&lt;h4&gt;The &lt;code&gt;App&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;code&gt;App&lt;/code&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Be wrapped by an element with the class name of &lt;code&gt;app&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Contain the routes for the app&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render the &lt;code&gt;Navbar&lt;/code&gt; component on every route&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render a &lt;code&gt;BrowserRouter&lt;/code&gt; component that contains a &lt;code&gt;Routes&lt;/code&gt; component with the following routes: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;/&lt;/code&gt; - Render the &lt;code&gt;Landing&lt;/code&gt; component&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;/login&lt;/code&gt; - Render the &lt;code&gt;LoginPage&lt;/code&gt; component&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;/register&lt;/code&gt; - Render the &lt;code&gt;RegistrationPage&lt;/code&gt; component&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;/activity&lt;/code&gt; - Render the &lt;code&gt;ActivityPage&lt;/code&gt; component &lt;strong&gt;only&lt;/strong&gt; if the user is logged in, otherwise it renders the &lt;code&gt;AccessForbidden&lt;/code&gt; component&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;/nutrition/*&lt;/code&gt; - Render the &lt;code&gt;NutritionPage&lt;/code&gt;component &lt;strong&gt;only&lt;/strong&gt; if the user is logged in, otherwise it renders the&lt;code&gt;AccessForbidden&lt;/code&gt; component&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;*&lt;/code&gt; - Anything else renders the &lt;code&gt;NotFound&lt;/code&gt; component&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Handling API Requests&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a &lt;code&gt;constants.js&lt;/code&gt; file at the root of the project that exports the following variables: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;PRODUCTION_API_BASE_URL&lt;/code&gt; - set to whatever URL the production API is deployed at&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;DEVELOPMENT_API_BASE_URL&lt;/code&gt; - set to &lt;code&gt;&#34;http://localhost:3001&#34;&lt;/code&gt; for development&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;API_BASE_URL&lt;/code&gt; - If &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; is &lt;code&gt;production&lt;/code&gt;, set this to &lt;code&gt;PRODUCTION_API_BASE_URL&lt;/code&gt;, otherwise set it to &lt;code&gt;DEVELOPMENT_API_BASE_URL&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a &lt;code&gt;services&lt;/code&gt; directory at the root of the project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inside the &lt;code&gt;services&lt;/code&gt; directory, create an &lt;code&gt;apiClient.js&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;apiClient.js&lt;/code&gt; file, import the &lt;code&gt;axios&lt;/code&gt; package and the &lt;code&gt;API_BASE_URL&lt;/code&gt; constant from the &lt;code&gt;constants.js&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Define a new class in that file called &lt;code&gt;ApiClient&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Give it a constructor function that accepts a single parameter - &lt;code&gt;remoteHostUrl&lt;/code&gt;. The constructor should attach the &lt;code&gt;remoteHostUrl&lt;/code&gt; parameter to a new instance with &lt;code&gt;this.remoteHostUrl = remoteHostUrl&lt;/code&gt;. It should also set &lt;code&gt;this.token = null&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Export default a new instance of the &lt;code&gt;ApiClient&lt;/code&gt; class.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add an additional method called &lt;code&gt;setToken&lt;/code&gt; that accepts a single parameter - &lt;code&gt;token&lt;/code&gt; and attaches it to the instance.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a utility method called &lt;code&gt;request&lt;/code&gt; that uses &lt;code&gt;axios&lt;/code&gt; to issue HTTP requests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add a &lt;code&gt;login&lt;/code&gt; method that uses the &lt;code&gt;request&lt;/code&gt; method to send an HTTP request to the &lt;code&gt;auth/login&lt;/code&gt; endpoint&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add a &lt;code&gt;signup&lt;/code&gt; method that uses the &lt;code&gt;request&lt;/code&gt; method to send an HTTP request to the &lt;code&gt;auth/register&lt;/code&gt; endpoint&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add a &lt;code&gt;fetchUserFromToken&lt;/code&gt; method that uses the &lt;code&gt;request&lt;/code&gt; method to send an HTTP request to the &lt;code&gt;auth/me&lt;/code&gt; endpoint&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Add as many other methods as needed when making API requests.&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Manage Authentication State&lt;/h4&gt; &#xA;&lt;p&gt;Update the &lt;code&gt;App&lt;/code&gt; component to manage authentication state:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a state variable called &lt;code&gt;appState&lt;/code&gt; with a function called &lt;code&gt;setAppState&lt;/code&gt; to update that state. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Initialize &lt;code&gt;appState&lt;/code&gt; with an object containing properties like &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;isAuthenticated&lt;/code&gt;, &lt;code&gt;nutrition&lt;/code&gt;, &lt;code&gt;sleep&lt;/code&gt;, and &lt;code&gt;exercise&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement a &lt;code&gt;useEffect&lt;/code&gt; hook to fetch the user data. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Define an asynchronous function named &lt;code&gt;fetchUser&lt;/code&gt; to fetch the user data. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inside the &lt;code&gt;fetchUser&lt;/code&gt; function, retrieve a token from &lt;code&gt;localStorage&lt;/code&gt; using &lt;code&gt;localStorage.getItem(&#34;lifetracker_token&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Call the &lt;code&gt;setToken&lt;/code&gt; function from the &lt;code&gt;apiClient.js&lt;/code&gt; file.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make an API call to fetch user data using the &lt;code&gt;fetchUser&lt;/code&gt; function from the &lt;code&gt;apiClient.js&lt;/code&gt; file and extract the &lt;code&gt;data&lt;/code&gt; from the response.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If &lt;code&gt;data&lt;/code&gt; is not null and not undefined, update the component&#39;s state using the &lt;code&gt;setAppState&lt;/code&gt; function. Pass a callback to &lt;code&gt;setAppState&lt;/code&gt; that takes the previous state and returns a new state object.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the callback, use the spread operator (&lt;code&gt;...&lt;/code&gt;) to copy the previous state&#39;s properties to the new state object.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Assign the following properties from the &lt;code&gt;data&lt;/code&gt; object to the new state object: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;user&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;token&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Assign at least &lt;strong&gt;one&lt;/strong&gt; of the following properties from the &lt;code&gt;data&lt;/code&gt; object to the new state object: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;nutrition&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;exercise&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;sleep&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Call the &lt;code&gt;setAppState&lt;/code&gt; with a new state object to update the component&#39;s state.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Outside the &lt;code&gt;fetchUser&lt;/code&gt; function, call &lt;code&gt;fetchUser&lt;/code&gt; to trigger the initial data fetch when the component mounts.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The effect should be triggered whenever the value of &lt;code&gt;appState.isAuthenticated&lt;/code&gt; changes.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;Loading&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;Loading&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;loading&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render an element with the class name of &lt;code&gt;loading-message&lt;/code&gt; that contains the text &lt;code&gt;&#34;Loading&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;Navbar&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;Navbar&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by a &lt;code&gt;nav&lt;/code&gt; element with the class name of &lt;code&gt;navbar&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render the app&#39;s logo as an element with the class name of &lt;code&gt;logo&lt;/code&gt;. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inside that element should be a &lt;code&gt;Link&lt;/code&gt; component from &lt;code&gt;react-router-dom&lt;/code&gt; that navigates the user to the &lt;code&gt;/&lt;/code&gt; route when clicked.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inside that &lt;code&gt;Link&lt;/code&gt; component should be the application&#39;s logo (text or image).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render the &lt;code&gt;NavLinks.jsx&lt;/code&gt; component with links to each of the resources and the &lt;code&gt;/activity&lt;/code&gt; route.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;NavLinks&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;NavLinks&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;nav-links&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render a &lt;code&gt;Link&lt;/code&gt; element from &lt;code&gt;react-router-dom&lt;/code&gt; for: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;/activity&lt;/code&gt; route with a label of &lt;code&gt;Activity&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;/nutrition&lt;/code&gt; route with a label of &lt;code&gt;Nutrition&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A route for any other resource page&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If a valid user is logged in, it should render an element with the class name of &lt;code&gt;logout-button&lt;/code&gt; that calls the &lt;code&gt;logoutUser&lt;/code&gt; function when clicked. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;logoutUser&lt;/code&gt; function should remove the &lt;code&gt;lifetracker_token&lt;/code&gt; from local storage and refresh the page so that all user data is reset.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If no valid user is logged in: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render a &lt;code&gt;Link&lt;/code&gt; element that redirects to the &lt;code&gt;/login&lt;/code&gt; route with the label &lt;code&gt;Login&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render a &lt;code&gt;Link&lt;/code&gt; element that redirects to the &lt;code&gt;/register&lt;/code&gt; route with the label &lt;code&gt;Sign Up&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;LoginForm&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;LoginForm&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;login-form&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render an input element for the following fields: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;email&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;password&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Each &lt;code&gt;input&lt;/code&gt; element in the form should have a class name of &lt;code&gt;form-input&lt;/code&gt; and should have the following props set: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;name&lt;/code&gt; - the &lt;code&gt;name&lt;/code&gt; of the &lt;code&gt;input&lt;/code&gt; field being rendered (&lt;code&gt;email&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;type&lt;/code&gt; - the type of the &lt;code&gt;input&lt;/code&gt; element (&lt;code&gt;text&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;value&lt;/code&gt; - the current value of the &lt;code&gt;input&lt;/code&gt; element&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;onChange&lt;/code&gt; - the &lt;code&gt;onChange&lt;/code&gt; handler function&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Validate the &lt;code&gt;email&lt;/code&gt; field. If the user has entered text into the &lt;code&gt;email&lt;/code&gt; field and it doesn&#39;t contain an &lt;code&gt;@&lt;/code&gt; symbol, then an error message should be displayed in an element with the class name of &lt;code&gt;error&lt;/code&gt; indicating that the entry is not a valid email.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Gracefully handle errors: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the user has attempted to login and gotten a &lt;code&gt;401&lt;/code&gt; error, then an error message should be displayed in an element with the class name of &lt;code&gt;error&lt;/code&gt; indicating that the &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; combination is incorrect.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the user has attempted to login and gotten a &lt;code&gt;400&lt;/code&gt; or &lt;code&gt;422&lt;/code&gt; error, then an error message should be displayed in an element with the class name of &lt;code&gt;error&lt;/code&gt; indicating what went wrong.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; There should be a &lt;code&gt;button&lt;/code&gt; element with the class name of &lt;code&gt;submit-login&lt;/code&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should contain the text &lt;code&gt;&#34;Login&#34;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When clicked, it should call the &lt;code&gt;loginUser&lt;/code&gt; function&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;LoginPage&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;LoginPage&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;login-page&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Using either a custom hook, context, or manually set state, check to see if a user is already logged in &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the user is already logged in, redirect them to the &lt;code&gt;/activity&lt;/code&gt; page.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If no user is authenticated, render the &lt;code&gt;LoginForm&lt;/code&gt; component and pass it any props it needs.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;RegistrationForm&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;RegistrationForm&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;registration-form&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Should render an input element for the following fields: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;email&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;username&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;firstName&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;lastName&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;password&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;passwordConfirm&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Each &lt;code&gt;input&lt;/code&gt; element in the form should have a class name of &lt;code&gt;form-input&lt;/code&gt; and should have the following props set: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;name&lt;/code&gt; - the &lt;code&gt;name&lt;/code&gt; of the &lt;code&gt;input&lt;/code&gt; field being rendered (&lt;code&gt;email&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;passwordConfirm&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;type&lt;/code&gt; - the type of the &lt;code&gt;input&lt;/code&gt; element (&lt;code&gt;text&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;value&lt;/code&gt; - the current value of the &lt;code&gt;input&lt;/code&gt; element&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;onChange&lt;/code&gt; - the &lt;code&gt;onChange&lt;/code&gt; handler function&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Validate the &lt;code&gt;email&lt;/code&gt; field: If the user has entered text into the &lt;code&gt;email&lt;/code&gt; field and it doesn&#39;t contain an &lt;code&gt;@&lt;/code&gt; symbol, then an error message should be displayed in an element with the class name of &lt;code&gt;error&lt;/code&gt; indicating that the entry is not a valid email.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Validate the &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;passwordConfirm&lt;/code&gt; fields: If the user has entered text into the &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;passwordConfirm&lt;/code&gt; fields and they don&#39;t match, then a message should be displayed in an element with the &lt;code&gt;className&lt;/code&gt; of &lt;code&gt;error&lt;/code&gt; with a message that contains the text: &lt;code&gt;passwords don&#39;t match&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Gracefully handle errors: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the user has attempted to login and gotten a &lt;code&gt;401&lt;/code&gt; error, then the &lt;code&gt;errors&lt;/code&gt; object should contain a &lt;code&gt;form&lt;/code&gt; property that contains a message indicating that the &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; combination is incorrect.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the user has attempted to login and gotten a &lt;code&gt;400&lt;/code&gt; or &lt;code&gt;422&lt;/code&gt; error, then the &lt;code&gt;errors&lt;/code&gt; object should contain a &lt;code&gt;form&lt;/code&gt; property that contains a message indicating what went wrong.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; There should be a &lt;code&gt;button&lt;/code&gt; element with the &lt;code&gt;className&lt;/code&gt; of &lt;code&gt;submit-registration&lt;/code&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should contain the text &lt;code&gt;&#34;Create Account&#34;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When clicked, it should call the &lt;code&gt;signupUser&lt;/code&gt; function&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;RegistrationPage&lt;/code&gt; component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;RegistrationPage&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;registration-page&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Using either a custom hook, context, or manually handled state, check to see if a user is already logged in &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the user is already logged in, it should redirect them to the &lt;code&gt;/activity&lt;/code&gt; page&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If no user is authenticated, it should render the &lt;code&gt;RegistrationForm&lt;/code&gt; component and pass it any props it needs&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;LandingPage&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;LandingPage&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;landing-page&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render an element with the class name of &lt;code&gt;hero&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inside it, display a large hero image using an &lt;code&gt;img&lt;/code&gt; element with the class name of &lt;code&gt;hero-img&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render a brief blurb on what this application is about inside an element with the class name of &lt;code&gt;cta&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Allow unauthenticated access&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;ActivityPage&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;ActivityPage&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;activity-page&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Take the &lt;code&gt;appState&lt;/code&gt; and &lt;code&gt;setAppState&lt;/code&gt; as props and extract all the necessary data from it.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the &lt;code&gt;isProcessing&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt;, it should render the &lt;code&gt;Loading&lt;/code&gt; component.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the &lt;code&gt;isProcessing&lt;/code&gt; flag is &lt;code&gt;false&lt;/code&gt;, it should render the &lt;code&gt;ActivityFeed&lt;/code&gt; component and pass it the appropriate props.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;ActivityFeed&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;ActivityFeed&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;activity-feed&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Accept &lt;strong&gt;at least&lt;/strong&gt; the following props: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;totalCaloriesPerDay&lt;/code&gt; - an array of items containing summary data about the total calories consumed per day&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;avgCaloriesPerCategory&lt;/code&gt; - an array of items containing summary data about the average calories consumed per category&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Any other props as needed&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inside an element with the class name of &lt;code&gt;per-category&lt;/code&gt;, it should: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render the text: &lt;code&gt;&#34;Average Calories Per Category&lt;/code&gt; inside an &lt;code&gt;h4&lt;/code&gt; element&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Take the first &lt;code&gt;6&lt;/code&gt; or less items in the &lt;code&gt;avgCaloriesPerCategory&lt;/code&gt; array and render a &lt;code&gt;SummaryStat&lt;/code&gt; component for each item. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Pass the calories &lt;strong&gt;rounded down to one decimal place&lt;/strong&gt; as the &lt;code&gt;stat&lt;/code&gt; prop&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Pass the string of &lt;code&gt;calories&lt;/code&gt; as the &lt;code&gt;label&lt;/code&gt; prop&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Pass the &lt;code&gt;category&lt;/code&gt; as the &lt;code&gt;substat&lt;/code&gt; prop&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inside an element with the class name of &lt;code&gt;per-day&lt;/code&gt;, it should: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render the text: &lt;code&gt;&#34;Total Calories Per Day&lt;/code&gt; inside an &lt;code&gt;h4&lt;/code&gt; element&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; For each item in the &lt;code&gt;totalCaloriesPerDay&lt;/code&gt; array, render a &lt;code&gt;SummaryStat&lt;/code&gt; component. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Pass the calories &lt;strong&gt;rounded down to the nearest whole number&lt;/strong&gt; as the &lt;code&gt;stat&lt;/code&gt; prop&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Pass the string of &lt;code&gt;calories&lt;/code&gt; as the &lt;code&gt;label&lt;/code&gt; prop&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Pass the &lt;code&gt;date&lt;/code&gt; in the format &lt;code&gt;dd/mm/yyyy&lt;/code&gt; - example: &lt;code&gt;07/02/2022&lt;/code&gt; - as the &lt;code&gt;substat&lt;/code&gt; prop&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;SummaryStat&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;SummaryStat&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;summary-stat&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Accept &lt;strong&gt;at least&lt;/strong&gt; the following props: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;stat&lt;/code&gt; - the primary statistic to display&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;label&lt;/code&gt; - the unit label assigned to the statistic&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;substat&lt;/code&gt; - a secondary statistic related to the primary statistic&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render the &lt;code&gt;stat&lt;/code&gt; prop inside an element with the class name of &lt;code&gt;primary-statistic&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render the &lt;code&gt;label&lt;/code&gt; prop inside an element with the class name of &lt;code&gt;stat-label&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render the &lt;code&gt;substat&lt;/code&gt; prop inside an element with the class name of &lt;code&gt;secondary-statistic&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;NutritionPage&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;NutritionPage&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;nutrition-page&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Take the &lt;code&gt;appState&lt;/code&gt; and &lt;code&gt;setAppState&lt;/code&gt; as props and extract all the necessary data from it.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render a nested &lt;code&gt;Routes&lt;/code&gt; component from &lt;code&gt;react-router-dom&lt;/code&gt;. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; There should be multiple &lt;code&gt;Route&lt;/code&gt; components: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;/nutrition&lt;/code&gt; route should render the &lt;code&gt;NutritionOverview&lt;/code&gt; component&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;/nutrition/create&lt;/code&gt; route should render the &lt;code&gt;NutritionNew&lt;/code&gt; component&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;/nutrition/id/:nutritionId&lt;/code&gt; should render the &lt;code&gt;NutritionDetail&lt;/code&gt; component&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Any other route should render the &lt;code&gt;NotFound&lt;/code&gt; component&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;NutritionOverview&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;NutritionOverview&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;nutrition-overview&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Take the &lt;code&gt;appState&lt;/code&gt; and &lt;code&gt;setAppState&lt;/code&gt; as props and extract all the necessary data from it. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the &lt;code&gt;error&lt;/code&gt; state variable has a valid string in it, it should render the &lt;code&gt;error&lt;/code&gt; message inside an element with the class name of &lt;code&gt;error&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If &lt;code&gt;isLoading&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, it should render the &lt;code&gt;Loading&lt;/code&gt; component&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If &lt;code&gt;isLoading&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, it should render the &lt;code&gt;NutritionFeed&lt;/code&gt; component and pass it the appropriate props&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Near the top of the component, it should render a &lt;code&gt;Link&lt;/code&gt; component that directs to the &lt;code&gt;/nutrition/create&lt;/code&gt; route and contains the text: &lt;code&gt;&#34;Record Nutrition&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;NutritionFeed&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;NutritionFeed&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;nutrition-feed&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Receive &lt;strong&gt;at least&lt;/strong&gt; the following props: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;nutritions&lt;/code&gt; - an array of &lt;code&gt;nutrition&lt;/code&gt; items&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the &lt;code&gt;nutritions&lt;/code&gt; array has no items in it, render an empty message that says &lt;code&gt;Nothing here yet&lt;/code&gt; inside an element with the class name of &lt;code&gt;empty-message&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the &lt;code&gt;nutritions&lt;/code&gt; array does have items in it: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; For each item in the &lt;code&gt;nutritions&lt;/code&gt; array, it should render a &lt;code&gt;NutritionCard&lt;/code&gt; component&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;NutritionNew&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;NutritionNew&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;nutrition-new&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render the &lt;code&gt;NutritionForm&lt;/code&gt; component and pass it the appropriate props&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;NutritionForm&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;NutritionForm&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;nutrition-form&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render an input element for the following fields: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;name&lt;/code&gt; - name of the nutrition item (defaults to an empty string)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;calories&lt;/code&gt; - number of calories in the nutrition item (defaults to 1)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;imageUrl&lt;/code&gt; - the &lt;code&gt;url&lt;/code&gt; of an image to show for this nutrition item (defaults to an empty string)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;category&lt;/code&gt; - the category that this nutrition item belongs to, like fruit, meat, soda, snack, nuts, etc. (defaults to an empty string)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Each &lt;code&gt;input&lt;/code&gt; element in the form should have a class name of &lt;code&gt;form-input&lt;/code&gt; and should have the following props set: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;name&lt;/code&gt; - the &lt;code&gt;name&lt;/code&gt; of the &lt;code&gt;input&lt;/code&gt; field being rendered (&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;calories&lt;/code&gt;, &lt;code&gt;imageUrl&lt;/code&gt;, &lt;code&gt;category&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;type&lt;/code&gt; - the type of the &lt;code&gt;input&lt;/code&gt; element (&lt;code&gt;text&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, etc.)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;value&lt;/code&gt; - the current value of the &lt;code&gt;input&lt;/code&gt; element&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;onChange&lt;/code&gt; - the &lt;code&gt;onChange&lt;/code&gt; handler function&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Gracefully handle errors: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If any of the required fields are left blank, there should be an error message inside of an element with the class name of &lt;code&gt;error&lt;/code&gt; indicating which fields are required.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the user has attempted to create a nutrition entry and gotten a &lt;code&gt;400&lt;/code&gt; or &lt;code&gt;422&lt;/code&gt; error, then that message should be displayed inside an element with the class name of &lt;code&gt;error&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; There should be a &lt;code&gt;button&lt;/code&gt; element with the class name of &lt;code&gt;submit-nutrition&lt;/code&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Contain the text &lt;code&gt;&#34;Save&#34;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When clicked, it should call a function that creates a new nutrition entry&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; After the form has been successfully submitted: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Ensure that the new nutrition entry is stored in the &lt;code&gt;nutrition&lt;/code&gt; context&#39;s &lt;code&gt;nutritions&lt;/code&gt; array and is displayed in the &lt;code&gt;NutritionFeed&lt;/code&gt; component&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Fetch the &lt;code&gt;activity&lt;/code&gt; data again so that new summary stats will be calculated&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;NutritionDetail&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;NutritionDetail.jsx&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Render JSX that is wrapped by an element with the class name of &lt;code&gt;nutrition-detail&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Leverage the &lt;code&gt;useParams&lt;/code&gt; hook from &lt;code&gt;react-router-dom&lt;/code&gt; to extract the &lt;code&gt;nutritionId&lt;/code&gt; param from the URL&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When the component is mounted to the screen... &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should make a &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;/nutrition/:nutritionId&lt;/code&gt; endpoint with the &lt;code&gt;axios.get&lt;/code&gt; method.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;:nutritionId&lt;/code&gt; part of the request should be replaced with the &lt;code&gt;nutritionId&lt;/code&gt; pulled from the URL.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When the initial request is loading, it should render an &lt;code&gt;h1&lt;/code&gt; element with the class name of &lt;code&gt;loading&lt;/code&gt; and contain the text &lt;code&gt;&#34;Loading...&#34;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Store the &lt;code&gt;nutrition&lt;/code&gt; received by the request in state and then render a &lt;code&gt;NutritionCard&lt;/code&gt; component for that nutrition.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If no &lt;code&gt;nutrition&lt;/code&gt; is found with that &lt;code&gt;id&lt;/code&gt;, it should render the &lt;code&gt;NotFound&lt;/code&gt; component&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;NutritionCard&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;NutritionCard&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Render JSX that is wrapped by an element with the class name of &lt;code&gt;nutrition-card&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Accept &lt;strong&gt;at least&lt;/strong&gt; the following props:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;nutrition&lt;/code&gt; - should be a nutrition entry object containing the following attributes: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;imageUrl&lt;/code&gt; - (not required)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;name&lt;/code&gt; - (required)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;calories&lt;/code&gt; - (required)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;category&lt;/code&gt; - (required)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;createdAt&lt;/code&gt; - (required)&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Render the &lt;code&gt;name&lt;/code&gt; of the &lt;code&gt;nutrition&lt;/code&gt; entry inside an element with the class name of &lt;code&gt;nutrition-name&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;If the &lt;code&gt;nutrition&lt;/code&gt; entry has a valid &lt;code&gt;imageUrl&lt;/code&gt; attribute, render an &lt;code&gt;img&lt;/code&gt; element with the class name of &lt;code&gt;nutrition-image&lt;/code&gt; and use that &lt;code&gt;imageUrl&lt;/code&gt; as its &lt;code&gt;src&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Render the &lt;code&gt;calories&lt;/code&gt; attribute of the &lt;code&gt;nutrition&lt;/code&gt; entry inside an element with the class name of &lt;code&gt;nutrition-calories&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Render the &lt;code&gt;category&lt;/code&gt; attribute of the &lt;code&gt;nutrition&lt;/code&gt; entry inside an element with the class name of &lt;code&gt;nutrition-category&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Render the &lt;code&gt;createdAt&lt;/code&gt; attribute of the &lt;code&gt;nutrition&lt;/code&gt; entry in the format &lt;code&gt;dd/mm/yyyy&lt;/code&gt; - example: &lt;code&gt;07/02/2022&lt;/code&gt; - inside an element with the class name of &lt;code&gt;nutrition-date&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;DO THE SAME FOR ANY OTHER RESOURCE THAT IS IN THE APPLICATION&lt;/strong&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Choose whatever resources you want!&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implement the &lt;code&gt;ProtectedRoute&lt;/code&gt; Component&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build the &lt;strong&gt;&lt;code&gt;ProtectedRoute&lt;/code&gt;&lt;/strong&gt; component to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Take the &lt;code&gt;appState&lt;/code&gt; and &lt;code&gt;setAppState&lt;/code&gt; as props and extract all the necessary data from it.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Accept a component as the &lt;code&gt;element&lt;/code&gt; prop and render that component.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the application isn&#39;t currently loading and no user is found, render the &lt;code&gt;LoginPage&lt;/code&gt; component instead of rendering the route the user intended to go to. This way, we can ensure that only authenticated users can access the provided component.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Any unauthenticated user should be shown the &lt;code&gt;LoginPage&lt;/code&gt; component with a message indicating that they need to authenticate first&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Update the &lt;code&gt;LoginPage&lt;/code&gt; component so that it accepts a &lt;code&gt;message&lt;/code&gt; prop that is displayed in the login form - if it exists.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make sure to protect the entire &lt;code&gt;ActivityPage&lt;/code&gt; component route and the &lt;code&gt;NutritionPage&lt;/code&gt; component route (along with any other private resource pages). Don&#39;t protect the &lt;code&gt;LandingPage&lt;/code&gt; component or the &lt;code&gt;LoginPage&lt;/code&gt; and &lt;code&gt;RegistrationPage&lt;/code&gt; components, as they should be public.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;Here are the pieces of functionality that should be built out for the backend:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Project setup&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; First things first, bootstrap the Express application with some essential files and starter code&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a &lt;code&gt;.gitignore&lt;/code&gt; file, an &lt;code&gt;app.js&lt;/code&gt; file, an &lt;code&gt;app.test.js&lt;/code&gt; file, and a &lt;code&gt;server.js&lt;/code&gt; file&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make sure &lt;code&gt;node_modules&lt;/code&gt; are added to the &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add dependencies for &lt;code&gt;express@next&lt;/code&gt;, &lt;code&gt;morgan&lt;/code&gt;, &lt;code&gt;cors&lt;/code&gt;, and &lt;code&gt;nodemon&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Install new dependencies for &lt;code&gt;bcrypt&lt;/code&gt;, &lt;code&gt;jsonwebtoken&lt;/code&gt;, &lt;code&gt;colors&lt;/code&gt;, &lt;code&gt;dotenv&lt;/code&gt;, &lt;code&gt;pg&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add a &lt;code&gt;.env&lt;/code&gt; file to the root of the repo and include the following environment variables &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;PORT&lt;/code&gt; (default to &lt;code&gt;3001&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; (set to a long random string)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;BCRYPT_WORK_FACTOR&lt;/code&gt; (set to &lt;code&gt;13&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;DATABASE_USER&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;DATABASE_PASS&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;DATABASE_HOST&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;DATABASE_PORT&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;DATABASE_NAME&lt;/code&gt; - (set to &lt;code&gt;lifetracker&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;DATABASE_TEST_NAME&lt;/code&gt; - (set to &lt;code&gt;lifetracker_test&lt;/code&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add a &lt;code&gt;config.test.js&lt;/code&gt; file &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write tests that check to make sure that: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; is set to &lt;code&gt;test&lt;/code&gt; when the test suite is run&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; There is an &lt;code&gt;IS_TESTING&lt;/code&gt; variable that is exported, which should only be true if &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; is set to &lt;code&gt;test&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write tests to ensure that certain environment variables are exported from the &lt;code&gt;config.js&lt;/code&gt; file and can be imported: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;PORT&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;BCRYPT_WORK_FACTOR&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;IS_TESTING&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write tests to ensure that a &lt;code&gt;getDatabaseUri&lt;/code&gt; function is exported from the &lt;code&gt;config.js&lt;/code&gt; file &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;getDatabaseUri&lt;/code&gt; function should: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Check to see if a valid &lt;code&gt;process.env.DATABASE_URL&lt;/code&gt; environment variable exists, and return that if it does.&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When &lt;code&gt;IS_TESTING&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;getDatabaseUri&lt;/code&gt; function should use the test database&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Otherwise, it should combine the proper database environment variables into a database connection string if no &lt;code&gt;process.env.DATABASE_URL&lt;/code&gt; environment variable exists&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add a &lt;code&gt;config.js&lt;/code&gt; file &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Use the &lt;code&gt;dotenv&lt;/code&gt; package to parse the environment variables from the &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Export each of the environment variables from the &lt;code&gt;config.js&lt;/code&gt; file until the tests pass&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write a &lt;code&gt;getDatabaseUri&lt;/code&gt; function so that all the tests pass&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The project should now be ready to go!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;PostgreSQL database&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Time bring in a PostgreSQL database client as the application&#39;s persistence layer&lt;/li&gt; &#xA;   &lt;li&gt;Make sure the PostgreSQL server is running&lt;/li&gt; &#xA;   &lt;li&gt;Create two files at the root of the project: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;lifetracker-schema.sql&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; This script should: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a &lt;code&gt;users&lt;/code&gt; table with the following columns: &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;id&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;username&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;password&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;first_name&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;last_name&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;email&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;created_at&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;updated_at&lt;/code&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a &lt;code&gt;nutrition&lt;/code&gt; table with the following columns: &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;id&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;name&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;category&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;calories&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;image_url&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;user_id&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;created_at&lt;/code&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Any other tables&lt;/strong&gt; that the application might depend on&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;lifetracker.sql&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; This script should: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 1. Let the user know that they&#39;re about to delete the &lt;code&gt;lifetracker&lt;/code&gt; database and prompt them to confirm that is what they want.&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 2. Drop the &lt;code&gt;lifetracker&lt;/code&gt; database and then create a new &lt;code&gt;lifetracker&lt;/code&gt; database, before connecting to the &lt;code&gt;lifetracker&lt;/code&gt; database.&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 3. It should then run the &lt;code&gt;lifetracker-schema.sql&lt;/code&gt; file.&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Follow the exact same steps for &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;3&lt;/code&gt;, but with the &lt;code&gt;lifetracker_test&lt;/code&gt; database.&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Setup the database by running &lt;code&gt;psql -f lifetracker.sql&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a new file at the root of the project called &lt;code&gt;db.js&lt;/code&gt;. In that file: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Import the &lt;code&gt;getDatabaseUri&lt;/code&gt; function from the &lt;code&gt;config.js&lt;/code&gt; file.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Initialize a new PostgreSQL client with the &lt;code&gt;pg&lt;/code&gt; package and connect to PostgreSQL using any necessary config variables.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Connect to PostgreSQL and log a message to the terminal on success or failure.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Export the connected database client&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A database client is now ready to be used!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Server&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Build out a bare-bones Express server with a health check route and an adequate middleware pipeline.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a &lt;code&gt;utils&lt;/code&gt; directory &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;utils&lt;/code&gt; directory, create an &lt;code&gt;errors.js&lt;/code&gt; file.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create error classes inside the file that will be used throughout the app.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;app.test.js&lt;/code&gt; file, write tests that: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Ensure that the Express application responds to &lt;code&gt;GET&lt;/code&gt; requests to the &lt;code&gt;/&lt;/code&gt; route with a JSON object of &lt;code&gt;{ &#34;ping&#34;: &#34;pong&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Check that middleware like &lt;code&gt;morgan&lt;/code&gt; and &lt;code&gt;cors&lt;/code&gt; exist, along with the JSON &lt;code&gt;body-parser&lt;/code&gt; middleware from &lt;code&gt;express&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Include an &lt;code&gt;afterAll&lt;/code&gt; hook that calls &lt;code&gt;await db.end()&lt;/code&gt; so that any open database connections close when all the tests are finished.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add code to the &lt;code&gt;app.js&lt;/code&gt; and &lt;code&gt;server.js&lt;/code&gt; file to get a simple server running along with responding to &lt;code&gt;GET&lt;/code&gt; requests to the &lt;code&gt;/&lt;/code&gt; route&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create error classes inside the &lt;code&gt;utils/errors.js&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add &lt;code&gt;404&lt;/code&gt; and generic error handler middleware to the &lt;code&gt;app.js&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;server.js&lt;/code&gt; file: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Import the Express app and the &lt;code&gt;config.js&lt;/code&gt; file&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Have the &lt;code&gt;app&lt;/code&gt; listen on the port specified by &lt;code&gt;config.PORT&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test out the fancy new Express server by starting it up in a new terminal window!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Common Test Configuration&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It would probably be helpful to create some common test functions that can be used throughout the application&#39;s testing suite.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a new directory called &lt;code&gt;tests&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Now, touch a new file at &lt;code&gt;tests/common.js&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In that file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Import the &lt;code&gt;db&lt;/code&gt; client&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create and export four functions: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;commonBeforeAll&lt;/code&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Actions that should happen before any tests in a particular file run.&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; This should include things like executing queries that delete all items from any tables in the test database that might have been added during testing&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;commonBeforeEach&lt;/code&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Actions that should happen before any &lt;strong&gt;single&lt;/strong&gt; test in a particular file runs.&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; This should include things like starting a database transaction&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;commonAfterEach&lt;/code&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Actions that should happen after any &lt;strong&gt;single&lt;/strong&gt; test in a particular file runs.&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; This should include things like rolling back any database actions before they&#39;re committed&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;commonAfterAll&lt;/code&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Actions that should occur after all tests in a particular file run.&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; This should include things like ending any open database client connections&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Authentication&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Go ahead and build out a full-fledged authentication flow using PostgreSQL, &lt;code&gt;bcrypt&lt;/code&gt;, and JSON Web Tokens. For it all to work, we&#39;ll need a &lt;code&gt;User&lt;/code&gt; model, a &lt;code&gt;security&lt;/code&gt; middleware, some &lt;code&gt;tokens&lt;/code&gt; utility functions, and the appropriate &lt;code&gt;auth&lt;/code&gt; routes.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add new directories for &lt;code&gt;models&lt;/code&gt;, &lt;code&gt;routes&lt;/code&gt;, and &lt;code&gt;middleware&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;strong&gt;User&lt;/strong&gt; model &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;models&lt;/code&gt; directory, create two new files: &lt;code&gt;models/user.js&lt;/code&gt; and &lt;code&gt;models/user.test.js&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;User&lt;/code&gt; model should have &lt;strong&gt;at least&lt;/strong&gt; the following static methods: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;login&lt;/code&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;register&lt;/code&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;fetchUserByEmail&lt;/code&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;models/user.test.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;login&lt;/code&gt; method. Write test cases for: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; User can login successfully with proper credentials&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Unknown email throws &lt;code&gt;UnauthorizedError&lt;/code&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Invalid credentials throws &lt;code&gt;UnauthorizedError&lt;/code&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;register&lt;/code&gt; method. Write test cases for: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; User can successfully register with proper credentials&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Registering with duplicate email throws &lt;code&gt;BadRequestError&lt;/code&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Registering with duplicate username throws &lt;code&gt;BadRequestError&lt;/code&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Registering with invalid email throws &lt;code&gt;BadRequestError&lt;/code&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;fetchUserByEmail&lt;/code&gt; method:. Write test cases for: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A valid email returns a user from the database&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Invalid emails are handled correctly&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It will probably be important to use the &lt;code&gt;beforeAll&lt;/code&gt;, &lt;code&gt;afterAll&lt;/code&gt;, &lt;code&gt;beforeEach&lt;/code&gt;, and &lt;code&gt;afterEach&lt;/code&gt; hooks to add and delete users from the database before running the tests&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;models/user.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Import the &lt;code&gt;bcrypt&lt;/code&gt; package, the &lt;code&gt;db&lt;/code&gt; client, and the app &lt;code&gt;config&lt;/code&gt;.&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement the features outlined in the tests until they&#39;re all passing.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;strong&gt;tokens&lt;/strong&gt; utility functions &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;utils&lt;/code&gt; directory, create two new files: &lt;code&gt;utils/tokens.js&lt;/code&gt; and &lt;code&gt;utils/tokens.test.js&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; At the bare minimum, two functions will be needed: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; One that accepts a JSON payload as an argument and converts it into a JWT&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; One that accepts a JWT as an argument, validates it, and returns the JSON payload encoded within - if it&#39;s valid&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;utils/tokens.test.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write test cases for: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Can create valid JWT tokens for user payloads&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Can extract a payload from a valid JWT with the correct secret&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; No payload gets returned when invalid tokens are parsed&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;utils/tokens.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement the features outlined in the tests until they&#39;re all passing&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;strong&gt;security&lt;/strong&gt; middleware &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;middleware&lt;/code&gt; directory, create two new files: &lt;code&gt;middleware/security.js&lt;/code&gt; and &lt;code&gt;middleware/security.test.js&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; One middleware will be responsible for extracting a user from a valid JWT in the request: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Checking the &lt;code&gt;Authentication&lt;/code&gt; header of each request for the existence of a JWT.&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If one exists, it should extract the token, validate it, extract the encoded JSON payload, and attach it to the response&#39;s &lt;code&gt;locals&lt;/code&gt; property&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; One middleware will be responsible for ensuring that an authenticated user exists: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Checking that a valid user exists on the response&#39;s &lt;code&gt;locals&lt;/code&gt; property&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If one does, the middleware should simply call next&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If no valid user exists, it should throw an &lt;code&gt;UnauthorizedError&lt;/code&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;middleware/security.test.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;Authentication&lt;/code&gt; header parsing middleware &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write test cases for: &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Extracts user from valid JWT in &lt;code&gt;Authentication&lt;/code&gt; header&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; No user is stored when no valid JWT exists in the &lt;code&gt;Authentication&lt;/code&gt; header&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; No user is stored when an invalid JWT is in the &lt;code&gt;Authentication&lt;/code&gt; header&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the middleware that ensures an authenticated user exists &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write test cases for: &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Doesn&#39;t throw an error when a valid user is present&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws an &lt;code&gt;UnauthorizedError&lt;/code&gt; when no valid user is present&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;middleware/security.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement the features outlined in the tests until they&#39;re all passing&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;app.js&lt;/code&gt; file, add the &lt;code&gt;Authentication&lt;/code&gt; header parsing middleware to the Express app&#39;s middleware pipeline&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;strong&gt;/auth&lt;/strong&gt; routes &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;routes&lt;/code&gt; directory, create two new files: &lt;code&gt;routes/auth.js&lt;/code&gt; and &lt;code&gt;routes/auth.test.js&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A new Express router should be created. It should handle: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;/me&lt;/code&gt; endpoint &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should send a JSON response back to the client with the user info like so: &lt;code&gt;{ &#34;user&#34;: { &#34;email&#34;: &#34;user@gmail.com&#34;, ... } }&lt;/code&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A &lt;code&gt;POST&lt;/code&gt; request to the &lt;code&gt;/login&lt;/code&gt; endpoint &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should accept a request body with &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; keys&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should send a JSON response back to the client with a new JWT and user info like so: &lt;code&gt;{ &#34;token&#34;: &#34;e2c2...&#34;, &#34;user&#34;: { &#34;email&#34;: &#34;user@gmail.com&#34;, ... } }&lt;/code&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A &lt;code&gt;POST&lt;/code&gt; request to the &lt;code&gt;/register&lt;/code&gt; endpoint &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should accept a request body with &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt;, and &lt;code&gt;password&lt;/code&gt; keys&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should send a JSON response back to the client with a &lt;code&gt;201&lt;/code&gt; status code, along with a new JWT and user info like so: &lt;code&gt;{ &#34;token&#34;: &#34;e2c2...&#34;, &#34;user&#34;: { &#34;email&#34;: &#34;user@gmail.com&#34;, ... } }&lt;/code&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should be mounted at the &lt;code&gt;/auth&lt;/code&gt; endpoint in the &lt;code&gt;app.js&lt;/code&gt; file&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;routes/auth.test.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;POST /auth/login&lt;/code&gt; endpoint &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write test cases for: &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Allows user to register with valid credentials and responds with JSON containing a valid token and user in the &#34;token&#34; and &#34;user&#34; fields&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws &lt;code&gt;UnauthorizedError&lt;/code&gt; when user doesn&#39;t exist in database&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws &lt;code&gt;UnauthorizedError&lt;/code&gt; when user provides wrong password&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws &lt;code&gt;BadRequestError&lt;/code&gt; when user doesn&#39;t provide password&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws &lt;code&gt;BadRequestError&lt;/code&gt; when user doesn&#39;t provide email&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;POST /auth/register&lt;/code&gt; endpoint &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write test cases for: &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Allows user to login successfully with valid credentials and responds with a &lt;code&gt;201&lt;/code&gt; status code, along with JSON containing a valid token and user in the &#34;token&#34; and &#34;user&#34; fields&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws &lt;code&gt;BadRequestError&lt;/code&gt; when user doesn&#39;t provide one of the required fields&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws &lt;code&gt;BadRequestError&lt;/code&gt; when user provides email that already exists&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws &lt;code&gt;BadRequestError&lt;/code&gt; when user provides username that already exists&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;POST /auth/me&lt;/code&gt; endpoint &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write test cases for: &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Provides the user with their user info when a valid JWT is present in the &lt;code&gt;Authentication&lt;/code&gt; header of the request&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws an &lt;code&gt;UnauthorizedError&lt;/code&gt; when no valid user is logged in&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;routes/auth.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a new Express router&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement the features outlined in the tests until they&#39;re all passing&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;app.js&lt;/code&gt; file:&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Mount the router at the &lt;code&gt;/auth&lt;/code&gt; endpoint&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; There should now be a full-fledged authentication system in place!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Resources and Permissions&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Next, implement the functionality to allow users to save instances of things they&#39;ve drank/eaten, so that they can track their own nutrition data! Also make sure users can only access the data that they themselves have created. No other user should be able to see any data owned by another user!&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;strong&gt;Nutrition&lt;/strong&gt; model &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;models&lt;/code&gt; directory, create two new files: &lt;code&gt;models/nutrition.js&lt;/code&gt; and &lt;code&gt;models/nutrition.test.js&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;Nutrition&lt;/code&gt; model should have &lt;strong&gt;at least&lt;/strong&gt; the following static methods: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;createNutrition&lt;/code&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Should insert a new nutrition instance into the database when values are supplied for all of the required fields: &lt;code&gt;&#34;name&#34;&lt;/code&gt;, &lt;code&gt;&#34;category&#34;&lt;/code&gt;, &lt;code&gt;&#34;calories&#34;&lt;/code&gt;, and &lt;code&gt;&#34;image_url&#34;&lt;/code&gt;. The &lt;code&gt;quantity&lt;/code&gt; field should default to &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The new nutrition instance should have its &lt;code&gt;user_id&lt;/code&gt; field set to the &lt;code&gt;id&lt;/code&gt; of the authenticated user&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Should throw a &lt;code&gt;BadRequestError&lt;/code&gt; (&lt;code&gt;400&lt;/code&gt; status code) or &lt;code&gt;UnprocessableEntityError&lt;/code&gt; (&lt;code&gt;422&lt;/code&gt; status code) when any of those values are not supplied.&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;fetchNutritionById&lt;/code&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When supplied with a valid &lt;code&gt;id&lt;/code&gt;, fetches the a nutrition instance from the database that matches that &lt;code&gt;id&lt;/code&gt;.&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If no nutrition instance matches that &lt;code&gt;id&lt;/code&gt;, throws a &lt;code&gt;NotFoundError&lt;/code&gt; (&lt;code&gt;404&lt;/code&gt; status code)&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;listNutritionForUser&lt;/code&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Should list all nutrition instances in the database that are owned by a particular user&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;models/nutrition.test.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;createNutrition&lt;/code&gt; method. Write test cases for: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A user can create a nutrition instance when they supply the appropriate values&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The appropriate error is thrown when any of the provided errors are invalid&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The user that creates the nutrition instance now owns that nutrition instance&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;fetchNutritionById&lt;/code&gt; method. Write test cases for: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Fetches the nutrition instance that matches the supplied &lt;code&gt;id&lt;/code&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws a &lt;code&gt;NotFoundError&lt;/code&gt; when no nutrition instances matches the supplied &lt;code&gt;id&lt;/code&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;listNutritionForUser&lt;/code&gt; method. Write test cases for: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Fetches all nutrition instances belonging to a particular user&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Doesn&#39;t include any nutrition instances belonging to a different user&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Returns an empty array if no nutrition instances are found in the database that belong to that user&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;models/nutrition.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement the features outlined in the tests until they&#39;re all passing&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;strong&gt;permissions&lt;/strong&gt; middleware &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;middleware&lt;/code&gt; directory, create two new files: &lt;code&gt;middleware/permissions.js&lt;/code&gt; and &lt;code&gt;middleware/permissions.test.js&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Though more functions will need to be added here as the number of resources grows, for now only 1 function needs to be created.&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;authedUserOwnsNutrition&lt;/code&gt; middleware function should: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Probably be called after the &lt;code&gt;requireAuthenticatedUser&lt;/code&gt; security middleware in any route&#39;s middleware pipeline&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Extract a parameter from the request endpoint that corresponds to the &lt;code&gt;id&lt;/code&gt; of the nutrition instance&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Query the database for that nutrition instance&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Check that it is owned by the authenticated user &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If it doesn&#39;t, it should throw a &lt;code&gt;ForbiddenError&lt;/code&gt; (&lt;code&gt;403&lt;/code&gt; status code)&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If the nutrition instance does belong to the authenticated user, it should attach it to the &lt;code&gt;locals&lt;/code&gt; property of the &lt;code&gt;response&lt;/code&gt; as its &lt;code&gt;nutrition&lt;/code&gt; property so that it doesn&#39;t need to be fetched again by the database (this isn&#39;t required, but is probably a good idea).&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;middleware/permissions.test.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;authedUserOwnsNutrition&lt;/code&gt; middleware function &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write test cases for: &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws error if authenticated user doesn&#39;t own nutrition&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws &lt;code&gt;NotFoundError&lt;/code&gt; if &lt;code&gt;id&lt;/code&gt; of nutrition isn&#39;t found in database&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Doesn&#39;t throw error if authenticated user is nutrition owner&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; (OPTIONAL) Attaches the &lt;code&gt;nutrition&lt;/code&gt; to the &lt;code&gt;locals&lt;/code&gt; property of the response when the user owns the nutrition instance&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;middleware/permissions.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement the features outlined in the tests until they&#39;re all passing&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;strong&gt;/nutrition&lt;/strong&gt; routes &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;routes&lt;/code&gt; directory, create two new files: &lt;code&gt;routes/nutrition.js&lt;/code&gt; and &lt;code&gt;routes/nutrition.test.js&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A new Express router should be created that will be mounted at the &lt;code&gt;/nutrition&lt;/code&gt; endpoint. It should handle: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;GET&lt;/code&gt; requests to the &lt;code&gt;/&lt;/code&gt; endpoint &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should send a JSON response back to the client with all of the user-owned nutrition instances in an array like so: &lt;code&gt;{ &#34;nutritions&#34;: [...] }&lt;/code&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;POST&lt;/code&gt; requests to the &lt;code&gt;/&lt;/code&gt; endpoint &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should accept a request body with one &lt;code&gt;nutrition&lt;/code&gt; key containing an object with all the attributes of the &lt;code&gt;nutrition&lt;/code&gt; entry&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should send a JSON response back to the client with a &lt;code&gt;201&lt;/code&gt; status code, and the newly created nutrition instance like so: &lt;code&gt;{ &#34;nutrition&#34;: { ... } }&lt;/code&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;GET&lt;/code&gt; requests to the &lt;code&gt;/:nutritionId&lt;/code&gt; endpoint &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should send a JSON response back to the client with the nutrition instance that matches the &lt;code&gt;:nutritionId&lt;/code&gt; parameter like so: &lt;code&gt;{ &#34;nutrition&#34;: { ... } }&lt;/code&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;routes/nutrition.test.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;GET /nutrition&lt;/code&gt; endpoint &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write test cases for: &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Returns an array of all &lt;code&gt;nutrition&lt;/code&gt; entries belonging to the user&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Other user&#39;s entries aren&#39;t included in the &lt;code&gt;nutritions&lt;/code&gt; array&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws &lt;code&gt;UnauthorizedError&lt;/code&gt; if no valid user is logged in&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;POST /nutrition&lt;/code&gt; endpoint &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write test cases for: &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Authenticated users can create a new &lt;code&gt;nutrition&lt;/code&gt; entry when providing values for all the required fields&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The new &lt;code&gt;nutrition&lt;/code&gt; entry belongs to the user that created it&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws a &lt;code&gt;BadRequestError&lt;/code&gt; if any of the required fields are missing&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws an &lt;code&gt;UnauthorizedError&lt;/code&gt; if no valid user is logged in&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;GET /nutrition/:nutritionId&lt;/code&gt; endpoint &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write test cases for: &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Nutrition owner can fetch a &lt;code&gt;nutrition&lt;/code&gt; entry when providing a valid &lt;code&gt;id&lt;/code&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws a &lt;code&gt;403 ForbiddenError&lt;/code&gt; if a user tries to access a &lt;code&gt;nutrition&lt;/code&gt; instance that does not belong to them&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws a &lt;code&gt;404 NotFoundError&lt;/code&gt; when the &lt;code&gt;nutritionId&lt;/code&gt; does not match any nutrition in the database&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws a &lt;code&gt;401 UnauthorizedError&lt;/code&gt; if no valid user is logged in&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;routes/nutrition.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement the features outlined in the tests until they&#39;re all passing&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Additional Resources&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create model and routes files for 1-2 additional resources that your app will track (sleep, exercise, steps, floors climbed, meditation, mood, heartrate, music practice, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Summary Statistics&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; One of the last features of the API will be a model that calculates summary statistic on the different resources that users are tracking. This includes statistics like average calories per day, or max calories per category. To do that, we&#39;ll create a new &lt;code&gt;Activity&lt;/code&gt; model and an &lt;code&gt;activity&lt;/code&gt; route that will be used to populate the frontend.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;strong&gt;Activity&lt;/strong&gt; model &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;models&lt;/code&gt; directory, create two new files: &lt;code&gt;models/Activity.js&lt;/code&gt; and &lt;code&gt;models/Activity.test.js&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;Activity&lt;/code&gt; model should have &lt;strong&gt;at least&lt;/strong&gt; the following static methods: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;calculateDailyCaloriesSummaryStats&lt;/code&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Should execute a SQL query that calculates &lt;strong&gt;at least&lt;/strong&gt; the total calories consumed per day (aliased as &lt;code&gt;totalCaloriesPerDay&lt;/code&gt;), along with the day (aliased as &lt;code&gt;date&lt;/code&gt;).&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The query should return a row for &lt;strong&gt;each day&lt;/strong&gt; containing the total calories consumed per day, and the average caloric content per nutrition entry. &#xA;            &lt;ul&gt; &#xA;             &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; For instance, here&#39;s a set of 7 &lt;strong&gt;simplified&lt;/strong&gt; nutrition item entries (actual data will look different): &#xA;              &lt;ul&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 1, user_id: 1, calories: 100, category: &#34;candy&#34;, created_at: &#34;12-22-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;2&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 2, user_id: 1, calories: 200, category: &#34;drink&#34;, created_at: &#34;12-22-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;3&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 3, user_id: 1, calories: 200, category: &#34;fruit&#34;, created_at: &#34;12-23-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;4&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 4, user_id: 1, calories: 400, category: &#34;dairy&#34;, created_at: &#34;12-23-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;5&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 5, user_id: 1, calories: 400, category: &#34;drink&#34;, created_at: &#34;12-23-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;6&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 6, user_id: 1, calories: 700, category: &#34;fruit&#34;, created_at: &#34;12-24-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;7&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 7, user_id: 1, calories: 100, category: &#34;fruit&#34;, created_at: &#34;12-24-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;              &lt;/ul&gt; &lt;/li&gt; &#xA;             &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The summary stats returned from the query should look like this: &#xA;              &lt;ul&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ date: &#34;12-22-2022&#34;, totalCaloriesPerDay: 300 }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;2&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ date: &#34;12-23-2022&#34;, totalCaloriesPerDay: 1000 }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;3&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ date: &#34;12-24-2022&#34;, totalCaloriesPerDay: 800 }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;              &lt;/ul&gt; &lt;/li&gt; &#xA;            &lt;/ul&gt; &lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;calculatePerCategoryCaloriesSummaryStats&lt;/code&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Should execute a SQL query that calculates &lt;strong&gt;at least&lt;/strong&gt; the average calories consumed per category (aliased as &lt;code&gt;avgCaloriesPerCategory&lt;/code&gt; and &lt;strong&gt;rounded down to one decimal place&lt;/strong&gt;), along with the category (aliased as &lt;code&gt;category&lt;/code&gt;).&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The query should return a row for &lt;strong&gt;each day&lt;/strong&gt; containing the total calories consumed per day, and the average caloric content per nutrition entry. &#xA;            &lt;ul&gt; &#xA;             &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; For instance, here&#39;s a set of 7 &lt;strong&gt;simplified&lt;/strong&gt; nutrition item entries (actual data will look different): &#xA;              &lt;ul&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 1, user_id: 1, calories: 100, category: &#34;candy&#34;, created_at: &#34;12-22-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;2&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 2, user_id: 1, calories: 200, category: &#34;drink&#34;, created_at: &#34;12-22-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;3&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 3, user_id: 1, calories: 200, category: &#34;fruit&#34;, created_at: &#34;12-23-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;4&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 4, user_id: 1, calories: 400, category: &#34;dairy&#34;, created_at: &#34;12-23-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;5&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 5, user_id: 1, calories: 400, category: &#34;drink&#34;, created_at: &#34;12-23-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;6&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 6, user_id: 1, calories: 700, category: &#34;fruit&#34;, created_at: &#34;12-24-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;7&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ id: 7, user_id: 1, calories: 100, category: &#34;fruit&#34;, created_at: &#34;12-24-2022&#34; }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;              &lt;/ul&gt; &lt;/li&gt; &#xA;             &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The summary stats returned from the query should look like this: &#xA;              &lt;ul&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ category: &#34;candy&#34;, avgCaloriesPerCategory: 100.0 }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;2&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ category: &#34;drink&#34;, avgCaloriesPerCategory: 300.0 }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;3&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ category: &#34;fruit&#34;, avgCaloriesPerCategory: 266.6 }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;               &lt;li&gt; &#xA;                &lt;ol start=&#34;4&#34;&gt; &#xA;                 &lt;li&gt;&lt;code&gt;{ category: &#34;dairy&#34;, avgCaloriesPerCategory: 400.0 }&lt;/code&gt;&lt;/li&gt; &#xA;                &lt;/ol&gt; &lt;/li&gt; &#xA;              &lt;/ul&gt; &lt;/li&gt; &#xA;            &lt;/ul&gt; &lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;models/Activity.test.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;calculateDailyCaloriesSummaryStats&lt;/code&gt; method. Write test cases for: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;calculateDailyCaloriesSummaryStats&lt;/code&gt; method correctly calculates summary statistics per day&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Only uses the &lt;code&gt;nutrition&lt;/code&gt; entries belonging to the user when calculating summary statistics&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Returns an empty array when the user has no &lt;code&gt;nutrition&lt;/code&gt; entries&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;calculatePerCategoryCaloriesSummaryStats&lt;/code&gt; method. Write test cases for: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;code&gt;calculatePerCategoryCaloriesSummaryStats&lt;/code&gt; method correctly calculates average calories per category summary statistics&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Only uses the &lt;code&gt;nutrition&lt;/code&gt; entries belonging to the user when calculating summary statistics&lt;/li&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Returns an empty array when the user has no &lt;code&gt;nutrition&lt;/code&gt; entries&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;models/Activity.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement the features outlined in the tests until they&#39;re all passing&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The &lt;strong&gt;/activity&lt;/strong&gt; routes &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;routes&lt;/code&gt; directory, create two new files: &lt;code&gt;routes/activity.js&lt;/code&gt; and &lt;code&gt;routes/activity.test.js&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A new Express router should be created that will be mounted at the &lt;code&gt;/activity&lt;/code&gt; endpoint. It should handle: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;GET&lt;/code&gt; requests to the &lt;code&gt;/&lt;/code&gt; endpoint &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; It should send a JSON response back to the client with summary stats for each resource in the following format: &#xA;            &lt;ul&gt; &#xA;             &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;{ &#34;nutrition&#34;: { &#34;calories&#34;: { &#34;perDay&#34;: [...], &#34;perCategory&#34;: [...] }, ...anyOtherStats }, ...statsForOtherResources }&lt;/code&gt;&lt;/li&gt; &#xA;            &lt;/ul&gt; &lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;routes/activity.test.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the &lt;code&gt;GET /activity&lt;/code&gt; endpoint &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write test cases for: &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Provides a JSON response containing arrays of summary stats for resources, attributes, and metrics&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Correctly calculates &lt;code&gt;totalCaloriesPerDay&lt;/code&gt; for a user&#39;s &lt;code&gt;nutrition&lt;/code&gt; entries&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Correctly calculates &lt;code&gt;avgCaloriesPerCategory&lt;/code&gt; for a user&#39;s &lt;code&gt;nutrition&lt;/code&gt; entries&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Only returns summary stats based on entries that the currently authenticated user owns&lt;/li&gt; &#xA;           &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Throws an &lt;code&gt;UnauthenticatedError&lt;/code&gt; if no valid user is logged in&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In the &lt;code&gt;routes/activity.js&lt;/code&gt; file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement the features outlined in the tests until they&#39;re all passing&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Commit all work to &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>