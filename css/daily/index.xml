<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-19T01:25:54Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>beeper/themes</title>
    <updated>2024-03-19T01:25:54Z</updated>
    <id>tag:github.com,2024-03-19:/beeper/themes</id>
    <link href="https://github.com/beeper/themes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Community Themes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Community-built themes for Beeper Desktop&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] We are currently rebuilding a large portion of the Beeper Desktop app. Included in this rewrite is a rethinking of how themes will work, centered around CSS variables. In the meantime, themes may not be fully supported, and new theme variables may be volatile between updates. Any themes written before ~March 2024 will likely not appear correctly in any new updates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Community-built themes are not entitled to the usual level of customer support on Beeper. If you need help with themes, please join [#beeper:beeper.com] instead of asking in your support room.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Beeper Desktop is fully customizable. You can use custom CSS to give Beeper Desktop a personalized look. If you build a nice theme, consider submitting a pull request to this repo to share it with other Beeper users!&lt;/p&gt; &#xA;&lt;h3&gt;How to use themes&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click &lt;a href=&#34;https://github.com/beeper/themes/tree/main/themes&#34;&gt;Themes&lt;/a&gt; -&amp;gt; select the theme you would like to try&lt;/li&gt; &#xA; &lt;li&gt;Select the text content and copy. This code is called CSS.&lt;/li&gt; &#xA; &lt;li&gt;Open Beeper Desktop -&amp;gt; Settings -&amp;gt; Appearance&lt;/li&gt; &#xA; &lt;li&gt;Paste what you copied earlier into the box and hit &lt;code&gt;Apply&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note:&lt;/em&gt; Custom themes may cause problems visually with Beeper. We have not tested any of the themes on this site. If you encounter issues with a theme, please disable it by deleting the text from Settings -&amp;gt; Appearance and clicking &lt;code&gt;Apply&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to submit a new theme&lt;/h3&gt; &#xA;&lt;p&gt;Create a Pull Request to this repro with the CSS file, screenshot and short description. View &lt;a href=&#34;https://github.com/beeper/themes/tree/main/variables.scss&#34;&gt;variables.scss&lt;/a&gt; for all default values.&lt;/p&gt; &#xA;&lt;h1&gt;Gallery&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/beeper/themes/raw/main/themes/windows95.png&#34; alt=&#34;image&#34;&gt; &lt;a href=&#34;https://github.com/beeper/themes/raw/main/themes/windows95.css&#34;&gt;&lt;strong&gt;Windows 95 (light)&lt;/strong&gt;&lt;/a&gt; by @imjoshin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/beeper/themes/raw/main/themes/bubbly.png&#34; alt=&#34;image&#34;&gt; &lt;a href=&#34;https://github.com/beeper/themes/raw/main/themes/bubbly.css&#34;&gt;&lt;strong&gt;Bubbly&lt;/strong&gt;&lt;/a&gt; by @imjoshin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Legacy&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1048265/192404286-6120c693-586f-4374-8ff0-a7a4ec267202.png&#34; alt=&#34;image&#34;&gt; &lt;a href=&#34;https://github.com/beeper/themes/raw/main/legacy/glenlipka-hybrid-light.css&#34;&gt;&lt;strong&gt;Hybrid Light&lt;/strong&gt;&lt;/a&gt; by @glenlipka&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1048265/192404393-a95a0299-19da-4afe-8de4-da4fe8c44ca9.png&#34; alt=&#34;image&#34;&gt; &lt;a href=&#34;https://github.com/beeper/themes/raw/main/legacy/glenlipka-hybrid-dark.css&#34;&gt;&lt;strong&gt;Hybrid Dark&lt;/strong&gt;&lt;/a&gt; by @glenlipka&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4341881/184789029-0a8f03bc-1691-4998-875a-90f79d6bab82.png&#34; alt=&#34;image&#34;&gt; &lt;a href=&#34;https://github.com/Madelena/metrology-for-beeper&#34;&gt;&lt;strong&gt;Metrology&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&#34;https://github.com/Madelena&#34;&gt;@Madelena&lt;/a&gt; &lt;br&gt; Dark/light modes and multiple colors included. Based on Metro Design System.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4341881/184405906-45f67b70-dd0b-4457-8d55-8633cf497abc.png&#34; alt=&#34;image&#34;&gt; &lt;a href=&#34;https://github.com/Madelena/metrology-for-beeper&#34;&gt;&lt;strong&gt;Metrology&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&#34;https://github.com/Madelena&#34;&gt;@Madelena&lt;/a&gt; &lt;br&gt; Dark/light modes and multiple colors included. Based on Metro Design System.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>Phillip-England/templ-quickstart</title>
    <updated>2024-03-19T01:25:54Z</updated>
    <id>tag:github.com,2024-03-19:/Phillip-England/templ-quickstart</id>
    <link href="https://github.com/Phillip-England/templ-quickstart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scaffold an http server using Go, HTMX, Templ, and Tailwind quick and easy.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;templ-quickstart&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;templ-quickstart provides a quick and easy way to scaffold an Go http server. The tech stack included in this repo includes Go, HTMX, Templ, and Tailwind.&lt;/p&gt; &#xA;&lt;h2&gt;Core Technologies&lt;/h2&gt; &#xA;&lt;p&gt;As mentioned above, this project depends on some awesome technologies. Let me start by giving credit where credit is due:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; - Version 1.22.0 or greater required&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://templ.guide/&#34;&gt;Templ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cosmtrek/air&#34;&gt;Air&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://htmx.org/&#34;&gt;Htmx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwindcss&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Clone the Repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/phillip-england/templ-quickstart &amp;lt;target-directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd &amp;lt;target-directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go mod tidy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a .env file and include a PORT variable&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch .env; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;PORT=8080&#34; &amp;gt; .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Steps and Serving&lt;/h2&gt; &#xA;&lt;p&gt;This project requires a build step. The following are commands needed to build your html and css output.&lt;/p&gt; &#xA;&lt;h3&gt;Templ HTML Generation&lt;/h3&gt; &#xA;&lt;p&gt;With templ installed and the binary somewhere on your PATH, run the following to generate your HTML components and templates (remove --watch to simply build and not hot reload)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;templ generate --watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CSS File Generation&lt;/h3&gt; &#xA;&lt;p&gt;With the &lt;a href=&#34;https://tailwindcss.com/blog/standalone-cli&#34;&gt;Tailwind Binary&lt;/a&gt; installed and moved somewhere on your PATH, run the following to generate your CSS output for your tailwind classes (remove --watch to simply build and not hot reload)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tailwindcss -i ./static/css/input.css -o ./static/css/output.css --watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Serving with Air&lt;/h3&gt; &#xA;&lt;p&gt;With the &lt;a href=&#34;https://github.com/cosmtrek/air&#34;&gt;Air Binary&lt;/a&gt; installed and moved somewhere on your PATH, run the following to serve and hot reload the application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;air&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure air, you can modify .air.toml in the root of the project. (it will be auto-generated after the first time you run air in your repo)&lt;/p&gt; &#xA;&lt;h2&gt;Project Overview&lt;/h2&gt; &#xA;&lt;p&gt;This project has a few core concepts to help you get going, let&#39;s start with ./main.go&lt;/p&gt; &#xA;&lt;h3&gt;Main - ./main.go&lt;/h3&gt; &#xA;&lt;p&gt;This is our applications entry-point and does a few things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Here, we load in our .env file and then we initialize our mux server.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;_ = godotenv.Load()&#xA;mux := http.NewServeMux()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;We define a few basic routes for our server. I will go into these routes in more depth later. In short, these routes enable you to use static files in your project, to use a favicon.ico, and sets up a view found at &#34;/&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;mux.HandleFunc(&#34;GET /favicon.ico&#34;, view.ServeFavicon)&#xA;mux.HandleFunc(&#34;GET /static/&#34;, view.ServeStaticFiles)&#xA;mux.HandleFunc(&#34;GET /&#34;, func(w http.ResponseWriter, r *http.Request) {&#xA;    middleware.Chain(w, r, view.Home)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please take note of this line here as it will be important in the next section when we discuss middleware:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;middleware.Chain(w, r, view.Home)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;We serve our application on the PORT defined at ./.env&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Println(fmt.Sprintf(&#34;server is running on port %s&#34;, os.Getenv(&#34;PORT&#34;)))&#xA;err := http.ListenAndServe(&#34;:&#34;+os.Getenv(&#34;PORT&#34;), mux)&#xA;if err != nil {&#xA;    fmt.Println(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Middleware - ./internal/middleware/middleware.go&lt;/h3&gt; &#xA;&lt;p&gt;Custom middleware can be implemented with ease in this project. Lets first start with our middleware chain.&lt;/p&gt; &#xA;&lt;p&gt;This function enables you to tack on middleware at the end of a handler instead of having to deeply-nest middleware components (which is what you would usually expect).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#xA;type CustomContext struct {&#xA;&#x9;context.Context&#xA;&#x9;StartTime time.Time&#xA;}&#xA;&#xA;type CustomHandler func(ctx *CustomContext, w http.ResponseWriter, r *http.Request)&#xA;&#xA;type CustomMiddleware func(ctx *CustomContext, w http.ResponseWriter, r *http.Request) error&#xA;&#xA;func Chain(w http.ResponseWriter, r *http.Request, handler CustomHandler, middleware ...CustomMiddleware) {&#xA;&#x9;customContext := &amp;amp;CustomContext{&#xA;&#x9;&#x9;Context:   context.Background(),&#xA;&#x9;&#x9;StartTime: time.Now(),&#xA;&#x9;}&#xA;&#x9;for _, mw := range middleware {&#xA;&#x9;&#x9;err := mw(customContext, w, r)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;handler(customContext, w, r)&#xA;&#x9;Log(customContext, w, r)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll notice we are using a few custom types here. In short, this function works by initializing a custom context, iterating through our middleware, and then finally calling our handler and logger. The custom context is passed through each middleware, enabling you to store and access context values throughout the chain. If a middleware returns an error, the chain will stop executing. This enables you to allow your middleware to write responses early and avoid calling the handler in case of an error.&lt;/p&gt; &#xA;&lt;h3&gt;Creating Custom Middleware&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you want to create custom middleware. Here is how to do so:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If this middleware requires some context, add the context value to the CustomContext type.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type CustomContext struct {&#xA;    context.Context&#xA;    StartTime time.Time&#xA;    NewContextValue string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Define your new middleware functions (remember middleware must match the CustomMiddleware type definition).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// this middleware will be placed early in the chain&#xA;func EarlyMiddleware(ctx *CustomContext, w http.ResponseWriter, r *http.Request) error {&#xA;&#x9;ctx.NewContextValue = &#34;I was set early in the chain&#34; // set your new context value&#xA;&#x9;return nil&#xA;}&#xA;&#xA;// this middleware will be place late in the chain&#xA;func LateMiddleware(ctx *CustomContext, w http.ResponseWriter, r *http.Request) error {&#xA;&#x9;fmt.Println(ctx.NewContextValue) // outputs &#34;I was set early in the chain&#34;&#xA;&#x9;return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Include the middleware in your Chain func in your routes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// modified version of ./main.go&#xA;mux.HandleFunc(&#34;GET /&#34;, func(w http.ResponseWriter, r *http.Request) {&#xA;    middleware.Chain(w, r, view.Home, middleware.EarlyMiddleware, middleware.LateMiddleware)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Easily create custom middleware without the need to deeply nest your routes.&lt;/p&gt; &#xA;&lt;h3&gt;Views - ./internal/view/view.go&lt;/h3&gt; &#xA;&lt;p&gt;Our views are straightforward and rely on templ to generate html content. Here is an example of the Home view found at ./internal/view/view.go&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Home(ctx *middleware.CustomContext, w http.ResponseWriter, r *http.Request) {&#xA;&#x9;if r.URL.Path != &#34;/&#34; { // enables us to catch all non-existing routes and throw a 404&#xA;&#x9;&#x9;http.NotFound(w, r)&#xA;&#x9;&#x9;return&#xA;&#x9;&#xA;&#x9;}&#xA;&#x9;template.Base(&#xA;&#x9;&#x9;&#34;Templ Quickstart - Zoom!&#34;,&#xA;&#x9;&#x9;[]templ.Component{&#xA;&#x9;&#x9;&#x9;component.TextAndTitle(&#34;I&#39;m a Component!&#34;, &#34;I am included as a content item in the Base Template!&#34;),&#xA;&#x9;&#x9;&#x9;component.TextAndTitle(&#34;I&#39;m another Component!&#34;, &#34;I am also included in the Base Template!&#34;),&#xA;&#x9;&#x9;},&#xA;&#x9;).Render(ctx, w)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s zoom in on the template.Base. This function is pretty simple. It takes in a title and an array of templ.Component. Take note of the Render func called at the end of the component. This is what actually writes our html bytes to the response writer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;template.Base(&#xA;    &#34;Templ Quickstart - Zoom!&#34;,&#xA;    []templ.Component{&#xA;        component.TextAndTitle(&#34;I&#39;m a Component!&#34;, &#34;I am included as a content item in the Base Template!&#34;),&#xA;        component.TextAndTitle(&#34;I&#39;m another Component!&#34;, &#34;I am also included in the Base Template!&#34;),&#xA;    },&#xA;).Render(ctx, w)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Templates - ./internal/template/template.templ&lt;/h3&gt; &#xA;&lt;p&gt;Our templates are included in this file. Here is the Base template discussed in the previous section. This function simply takes in a title and an array of templ.Component. For more info on templ syntax, please visit &lt;a href=&#34;https://raw.githubusercontent.com/Phillip-England/templ-quickstart/main/templ.guide&#34;&gt;Templ.guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;templ Base(title string, content []templ.Component) {&#xA;    &amp;lt;html&amp;gt;&#xA;        &amp;lt;head&amp;gt;&#xA;            &amp;lt;meta charset=&#34;UTF-8&#34;&amp;gt;&amp;lt;/meta&amp;gt;&#xA;            &amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&amp;gt;&amp;lt;/meta&amp;gt;&#xA;            &amp;lt;script src=&#34;https://unpkg.com/htmx.org@1.9.11&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;            &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;/static/css/output.css&#34;&amp;gt;&amp;lt;/link&amp;gt;&#xA;            &amp;lt;title&amp;gt;{name}&amp;lt;/title&amp;gt;&#xA;        &amp;lt;/head&amp;gt;&#xA;            @component.Banner()&#xA;        &amp;lt;body&amp;gt;&#xA;            &amp;lt;main class=&#39;p-6 grid gap-4&#39;&amp;gt;&#xA;                for _, contentItem := range content {&#xA;                    @contentItem&#xA;                }&#xA;            &amp;lt;/main&amp;gt;&#xA;        &amp;lt;/body&amp;gt;&#xA;    &amp;lt;/html&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also note, htmx and your tailwind output are included in the head of this template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/htmx.org@1.9.11&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;/static/css/output.css&#34;&amp;gt;&amp;lt;/link&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Components - ./internal/component/component.templ&lt;/h3&gt; &#xA;&lt;p&gt;Comonents are very similar to templates. Here is an example of the TextAndTitle component used in ./internal/view/view.go&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;templ TextAndTitle(title string, text string) {&#xA;    &amp;lt;div&amp;gt;&#xA;        &amp;lt;h1 class=&#39;text-lg font-bold&#39;&amp;gt;{title}&amp;lt;/h1&amp;gt;&#xA;        &amp;lt;p class=&#39;text-sm&#39;&amp;gt;{text}&amp;lt;/p&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Abhishekyadav450/CipherGuard</title>
    <updated>2024-03-19T01:25:54Z</updated>
    <id>tag:github.com,2024-03-19:/Abhishekyadav450/CipherGuard</id>
    <link href="https://github.com/Abhishekyadav450/CipherGuard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/abhishek8573944525/CipherGuard/assets/161330829/9f289e91-f49d-46c8-9b10-d8fc377b16c6&#34; alt=&#34;Screenshot (69)&#34;&gt; &lt;img src=&#34;https://github.com/abhishek8573944525/CipherGuard/assets/161330829/48cc79a2-e6f5-4ac2-bf53-adc7eedfbe03&#34; alt=&#34;Screenshot (70)&#34;&gt; &lt;img src=&#34;https://github.com/abhishek8573944525/CipherGuard/assets/161330829/ae34109f-6bff-4ced-a1ed-7caa146dd1ec&#34; alt=&#34;Screenshot (71)&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CipherGuard&lt;/h1&gt; &#xA;&lt;h1&gt;Encryption-decryption-html-css-js&lt;/h1&gt; &#xA;&lt;p&gt;#Click on the Enviroment,click on View Deployment to see the output #Full Stack Development #Created by Pain&lt;/p&gt;</summary>
  </entry>
</feed>