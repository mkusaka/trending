<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-08T01:32:20Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>argyleink/transition.css</title>
    <updated>2023-05-08T01:32:20Z</updated>
    <id>tag:github.com,2023-05-08:/argyleink/transition.css</id>
    <link href="https://github.com/argyleink/transition.css" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Drop-in CSS transitions&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dt/transition.css.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/transition.css.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/l/transition.css.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://api.netlify.com/api/v1/badges/58d0ecf5-6241-4209-aa35-cf09983e0b37/deploy-status&#34; alt=&#34;Netlify Status&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://codepen.io/argyleink/pen/zYqYpEB&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/argyleink/transition.css/raw/main/gif/kitchen-sink.gif?raw=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;46 pre-built transitions!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Hands on at &lt;a href=&#34;https://codepen.io/argyleink/pen/RwrzGJb&#34;&gt;Codepen&lt;/a&gt; or preview all @ &lt;a href=&#34;https://transition.style&#34;&gt;transition.style&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Basics&lt;/h2&gt; &#xA;&lt;p&gt;Import the CSS and set an attribute on some HTML: &lt;a href=&#34;https://codepen.io/argyleink/pen/QWNRXEG&#34;&gt;try on Codepen&lt;/a&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/argyleink/transition.css/raw/main/gif/wipe-up.gif?raw=true&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/transition-style&#34;&amp;gt;&#xA;&#xA;&amp;lt;div transition-style=&#34;in:wipe:up&#34;&amp;gt;&#xA;  üëç&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;NPM&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;npm i transition-style&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;import from &lt;strong&gt;CSS&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import &#34;transition-style&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;or import from &lt;strong&gt;JS&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#39;transition-style&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CDN&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;https://unpkg.com/transition-style&lt;/code&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Individual Category Bundles&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Circles&lt;/strong&gt; &lt;code&gt;https://unpkg.com/transition-style/transition.circles.min.css&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Squares&lt;/strong&gt; &lt;code&gt;https://unpkg.com/transition-style/transition.squares.min.css&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Polygons&lt;/strong&gt; &lt;code&gt;https://unpkg.com/transition-style/transition.polygons.min.css&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wipes&lt;/strong&gt; &lt;code&gt;https://unpkg.com/transition-style/transition.wipes.min.css&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Import category bundles from NPM too &lt;code&gt;import &#34;transition-style/transition.circles.min.css&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;üëâ The Hackpack&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;https://unpkg.com/transition-style/transition.hackpack.min.css&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;More options, more control, smaller import&lt;/strong&gt;&lt;br&gt; by importing only the custom properties and base styles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;compose custom transition combinations&lt;/li&gt; &#xA; &lt;li&gt;create multi-part transitions&lt;/li&gt; &#xA; &lt;li&gt;bring your own architecture with classes or CSS-in-JS or anything!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codepen.io/argyleink/pen/MWyJxLx&#34;&gt;The Hackpack Sandbox&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Custom properties ship with each &lt;code&gt;.min.css&lt;/code&gt; as well&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;üîó Bookmarklet&lt;/h3&gt; &#xA;&lt;p&gt;Try transition.css on almost any &lt;em&gt;existing&lt;/em&gt; site! Just copy üìã the following, create a new bookmark, and paste in the URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;javascript:(function(){var a=document.createElement(&#34;link&#34;);a.rel=&#34;stylesheet&#34;;a.href=&#34;https://unpkg.com/transition-style&#34;;document.head.append(a);})();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now go to a website and click the bookmark to try it out! Animations automatically run when you manually add classes in dev tools, or run code like this in the console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&#39;body&#39;).setAttribute(&#39;transition-style&#39;,&#39;in:circle:bottom-right&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Caveat: this bookmarklet doesn&#39;t work on websites that have a strict CSP set up.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://github.com/argyleink/transition.css/raw/main/gif/opposing-corner-fold.gif?raw=true&#34;&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After &lt;code&gt;transition.css&lt;/code&gt; has been added to your project, add an attribute to an element and watch the magic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div transition-style=&#34;in:circle:bottom-right&#34;&amp;gt;&#xA;  A transitioned IN element&#xA;&amp;lt;/div&amp;gt;&#xA;&#xA;&amp;lt;div transition-style=&#34;out:wipe:down&#34;&amp;gt;&#xA;  A transitioned OUT element&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;if nothing is happening when using the attributes, it&#39;s likely &lt;code&gt;transition.css&lt;/code&gt; has not loaded&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; Attributes were chosen as the default so there&#39;s no question which transition is active. **There can be only 1 at a time.** With classes, for example, what happens when multiple &#34;transition in&#34; classes are applied to an element? Transition.css chooses to default with a state machine approach so things like a classname collision doesn&#39;t need solved. See the [custom](#custom) section below for ways to use classes and/or the shape custom properties so transition.css can fit into your development environment. The built in attribute based approach is very easy to hack, customize and escape. &#xA;&lt;h4&gt;Using &lt;code&gt;@keyframes&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Each bundle ships with the &lt;code&gt;@keyframes&lt;/code&gt; declared, and you can use them as you see fit. You can use these to build your own animations or just hook into the presets in your own way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.main--state-in {&#xA;  animation: wipe-in-left;&#xA;  animation-duration: 2s;&#xA;  animation-fill-mode: both;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Checkout the &lt;a href=&#34;https://github.com/argyleink/transition.css/raw/main/src&#34;&gt;src&lt;/a&gt; to find the names of the &lt;code&gt;@keyframe&lt;/code&gt; animations. They follow a pattern like the attributes, so you should be able to assume what they are with decent accuracy.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;Using CSS Custom Properties&lt;/h4&gt; &#xA;&lt;p&gt;Each bundle ships with clearly named custom properties which contain the state and geometry needed to orchestrate custom transitions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.overrides {&#xA;  --transition__duration: 1s;            /* default: 2.5s */&#xA;  --transition__easing: ease-in-out;     /* default: cubic-bezier(.25, 1, .30, 1) */&#xA;  --transition__delay: 1s;               /* default: 0 */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or target a specific transition and override it&#39;s defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;[transition=&#34;in:wipe:up&#34;] {&#xA;  --transition__duration: 1s;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;Custom&lt;/h4&gt; &#xA;&lt;p&gt;Go off the rails and build your own transitions with these variables. There&#39;s even the &lt;code&gt;The Hackpack&lt;/code&gt; which is exclusively the custom props ü§òüíÄ Here&#39;s how you can compose a brand new transition from the custom property primitives:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@keyframes circle-swoop {&#xA;  from {&#xA;    clip-path: var(--circle-top-right-out);&#xA;  }&#xA;  to {&#xA;    clip-path: var(--circle-bottom-right-in);&#xA;  }&#xA;}&#xA;&#xA;.--in-custom {&#xA;  --transition__duration: 1s;&#xA;  --transition__easing: ease-in-out;&#xA;  animation-name: circle-swoop;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in the HTML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div transition-style class=&#34;--in-custom&#34;&amp;gt;&#xA;  A custom transitioned element&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The only rule is that you must transition from the same type of shapes&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;At this point you&#39;re using Transition.css to it&#39;s maximum. You can reach a huge set of transitions by using the custom properties. Have fun!&lt;/p&gt; &#xA;&lt;h4&gt;Play&lt;/h4&gt; &#xA;&lt;p&gt;Play and experiment with &lt;a href=&#34;https://codepen.io/argyleink/pen/RwrzGJb&#34;&gt;this Codepen&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;code&gt;svelte&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;Production&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;npm run bundle&lt;/code&gt; concurrently bundles and minifies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>radxa-docs/documentation</title>
    <updated>2023-05-08T01:32:20Z</updated>
    <id>tag:github.com,2023-05-08:/radxa-docs/documentation</id>
    <link href="https://github.com/radxa-docs/documentation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Radxa Documentation&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;sidebar_label: &#39;Welcome&#39; sidebar_position: 1&lt;/h2&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;The Radxa Documentation Center is the place for tutorials and guides for supporting Radxa SBCs and accessories, maintained by the Radxa team and community.&lt;/p&gt; &#xA;&lt;h1&gt;Problems encountered&lt;/h1&gt; &#xA;&lt;p&gt;If you encounter any problems while using this documentation, please &lt;a href=&#34;https://github.com/radxa-docs/documentation/issues&#34;&gt;submit an issue via Github&lt;/a&gt; and we will respond as soon as possible.&lt;/p&gt; &#xA;&lt;h1&gt;Join the community&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official Forum: &lt;a href=&#34;http://forum.radxa.com&#34;&gt;Radxa Forum&lt;/a&gt; - Main technical support channel, both English and Chinese are supported, Chinese content should be posted in the &lt;a href=&#34;https://forum.radxa.com/c/world/china&#34;&gt;Chinese section&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Discord Community: &lt;a href=&#34;https://rock.sh/go&#34;&gt;Radxa Discord&lt;/a&gt; - Instant chatting and discussion group, English only&lt;/li&gt; &#xA; &lt;li&gt;QQ Group: 591048098 - QQ Discussion group, mostly Chinese&lt;/li&gt; &#xA; &lt;li&gt;QQ Channel: &lt;a href=&#34;https://pd.qq.com/s/23wlhn9j8&#34;&gt;Radxa QQ Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WeChat group: &lt;img src=&#34;https://raw.githubusercontent.com/radxa-docs/documentation/main/zh/img/wechat_group/ROCK5B.png&#34; alt=&#34;Radxa ROCK5B&#34;&gt;, mostly Chinese&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attention&lt;/h2&gt; &#xA;&lt;p&gt;We do not recommend discussing technical issues or seeking help in closed environment such as (WeChat group / QQ group and other APPs that cannot be crawled by search engines), but try to discuss technical issues in open places such as official forums or Github issues. The main purpose of WeChat / QQ group is to socialize and quickly find like-minded people.&lt;/p&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;We warmly welcome everyone to give feedback on Radxa documentation, contribute patches, add content, and showcase your creations. Just send us PR.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kodekloudhub/kodekloud-engineer</title>
    <updated>2023-05-08T01:32:20Z</updated>
    <id>tag:github.com,2023-05-08:/kodekloudhub/kodekloud-engineer</id>
    <link href="https://github.com/kodekloudhub/kodekloud-engineer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kodekloud-engineer&lt;/h1&gt; &#xA;&lt;p&gt;View this site here &lt;a href=&#34;https://kodekloudhub.github.io/kodekloud-engineer/&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>