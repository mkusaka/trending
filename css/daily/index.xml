<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-16T01:36:53Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>elad2412/the-new-css-reset</title>
    <updated>2022-06-16T01:36:53Z</updated>
    <id>tag:github.com,2022-06-16:/elad2412/the-new-css-reset</id>
    <link href="https://github.com/elad2412/the-new-css-reset" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The New Simple and Lighter CSS Reset&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The New CSS Reset&lt;/h1&gt; &#xA;&lt;p&gt;This new CSS reset is using the new CSS features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The global CSS reset keywords, ‘unset’ and ‘revert’ keywords.&lt;/li&gt; &#xA; &lt;li&gt;The new property of ‘all’ which can reset all properties combined.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;:where()&lt;/code&gt; pseudo-class to remove specificity.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;:not()&lt;/code&gt; pseudo-class with multi arguments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is the-new-css-reset resetting?&lt;/h2&gt; &#xA;&lt;p&gt;This CSS reset is built from the understanding that we don’t want to use default styles we are getting from the browsers, except the ‘display’ property.&lt;/p&gt; &#xA;&lt;p&gt;This CSS reset removes all the default styles which we are getting on specific HTML elements except the ‘display’ property, as I already mentioned, and special HTML elements like &lt;code&gt;iframe&lt;/code&gt;, &lt;code&gt;canvas&lt;/code&gt;, &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;svg&lt;/code&gt;, and &lt;code&gt;video&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case you want the default style of the browser of a specific HTML element back, you can revert back to the default styles of the browser. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;input[type=&#34;checkbox&#34;],&#xA;input[type=&#34;radio&#34;] {&#xA;    all: revert;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or all input elements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;input,&#xA;textarea,&#xA;select {&#xA;   all: revert;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elad2412/the-new-css-reset/main/css/reset.css&#34;&gt;Download the Latest Version&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;NPM and How to Use?&lt;/h2&gt; &#xA;&lt;p&gt;The package name on NPM is &#39;the-new-css-reset&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Import &lt;code&gt;/css/reset.css&lt;/code&gt; before the regular styles of the project.&lt;/p&gt; &#xA;&lt;p&gt;In a React project, insert it to the main entry file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#34;the-new-css-reset/css/reset.css&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessibility Recommendation&lt;/h2&gt; &#xA;&lt;p&gt;To keep your website accessibly, don&#39;t forget to take care of the &lt;code&gt;:focus&lt;/code&gt; states.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;:focus { /* focus styles */ }&#xA;&#xA;/* or/and */&#xA;&#xA;:focus-visible { /* keyboard only focus styles */ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Browser Support&lt;/h2&gt; &#xA;&lt;p&gt;All evergreen browsers&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chrome, Edge: version 88+&lt;/li&gt; &#xA; &lt;li&gt;FireFox: version 84+&lt;/li&gt; &#xA; &lt;li&gt;Safari/iOS browsers: version 14+&lt;/li&gt; &#xA; &lt;li&gt;Opera: version 75+&lt;/li&gt; &#xA; &lt;li&gt;Samsung Browser: version 15+&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SwiftGGTeam/the-swift-programming-language-in-chinese</title>
    <updated>2022-06-16T01:36:53Z</updated>
    <id>tag:github.com,2022-06-16:/SwiftGGTeam/the-swift-programming-language-in-chinese</id>
    <link href="https://github.com/SwiftGGTeam/the-swift-programming-language-in-chinese" rel="alternate"></link>
    <summary type="html">&lt;p&gt;中文版 Apple 官方 Swift 教程《The Swift Programming Language》&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;《The Swift Programming Language》in Chinese&lt;/h1&gt; &#xA;&lt;p&gt;中文版 Apple 官方 Swift 教程《The Swift Programming Language》&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/&#34;&gt;英文原版在线版&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;在线阅读&lt;/h1&gt; &#xA;&lt;p&gt;使用 GitBook 制作，可以在 &lt;a href=&#34;https://swiftgg.gitbook.io/swift/&#34;&gt;GitBook&lt;/a&gt; 网站阅读。&lt;/p&gt; &#xA;&lt;h1&gt;当前阶段&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;更新到 Swift 5.5，2021-06-07&lt;/li&gt; &#xA; &lt;li&gt;更新到 Swift 5.4，2021-04-26&lt;/li&gt; &#xA; &lt;li&gt;更新到 Swift 5.3，2020-09-16&lt;/li&gt; &#xA; &lt;li&gt;更新到 Swift 5.2，2020-02-15&lt;/li&gt; &#xA; &lt;li&gt;更新到 Swift 5.1，2019-11-11&lt;/li&gt; &#xA; &lt;li&gt;更新到 Swift 5.0，2019-04-05&lt;/li&gt; &#xA; &lt;li&gt;更新到 Swift 4.2，2019-01-29&lt;/li&gt; &#xA; &lt;li&gt;更新到 Swift 4.1，2018-04-12，感谢 &lt;a href=&#34;https://github.com/Mylittleswift&#34;&gt;@Mylittleswift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;更新到 Swift 3.0，2016-09-23&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;贡献力量&lt;/h1&gt; &#xA;&lt;p&gt;如果想做出贡献的话，你可以：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;参与翻译&lt;/li&gt; &#xA; &lt;li&gt;帮忙校对，挑错别字、病句等等&lt;/li&gt; &#xA; &lt;li&gt;提出修改建议&lt;/li&gt; &#xA; &lt;li&gt;提出术语翻译建议&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;翻译建议&lt;/h1&gt; &#xA;&lt;p&gt;如果你有兴趣参与项目，请仔细阅读说明：&lt;/p&gt; &#xA;&lt;p&gt;排版格式和流程说明：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;翻译排版格式要求参考 SwiftGG &lt;a href=&#34;https://github.com/SwiftGGTeam/translation/raw/master/SwiftGG%20%E6%8E%92%E7%89%88%E6%8C%87%E5%8D%97.md&#34;&gt;排版指南&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pull Request 发起方式参考 SwiftGG &lt;a href=&#34;https://github.com/SwiftGGTeam/translation/raw/master/%E7%BF%BB%E8%AF%91%E6%B5%81%E7%A8%8B%E6%A6%82%E8%BF%B0%E5%8F%8APR%E8%AF%B4%E6%98%8E.md#%E5%A6%82%E4%BD%95%E5%8F%91%E8%B5%B7-pull-request&#34;&gt;Pull Request 说明&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;原版文档差异比较：&lt;/p&gt; &#xA;&lt;p&gt;在翻译时可以通过 Calibre 软件对 &lt;a href=&#34;https://github.com/SwiftGGTeam/the-swift-programming-language-in-chinese/tree/gh-pages/document&#34;&gt;document 目录下&lt;/a&gt; 不同版本的文档进行 diff，检查待更新部分。&lt;/p&gt; &#xA;&lt;p&gt;diff 操作如下：&lt;/p&gt; &#xA;&lt;p&gt;将最新文档加入到 Calibre 中，点击 &lt;strong&gt;Edit Book&lt;/strong&gt;，然后在编辑界面选择 &lt;strong&gt;File&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Compare to other book&lt;/strong&gt; 检查各模块的更新内容，详见 &lt;a href=&#34;https://manual.calibre-ebook.com/diff.html&#34;&gt;链接&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;其他说明：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;相关术语请严格按照术语表来翻译，如果有问题可以发 Issue 大家一起讨论&lt;/li&gt; &#xA; &lt;li&gt;使用 Markdown 进行翻译，文件名必须使用英文&lt;/li&gt; &#xA; &lt;li&gt;翻译后的文档请放到 source 文件夹下的对应章节中，然后 Pull Request 即可，我们会用 GitBook 编译成网页&lt;/li&gt; &#xA; &lt;li&gt;有其他任何问题都欢迎发 Issue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;术语表&lt;/h1&gt; &#xA;&lt;p&gt;翻译术语的时候请参考这个对照表：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;术语&lt;/th&gt; &#xA;   &lt;th&gt;备选翻译&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;result builder&lt;/td&gt; &#xA;   &lt;td&gt;结果构造器&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;property wrapper&lt;/td&gt; &#xA;   &lt;td&gt;属性包装器（&lt;a href=&#34;https://github.com/SwiftGGTeam/the-swift-programming-language-in-chinese/issues/982#issuecomment-536244784&#34;&gt;翻译相关讨论&lt;/a&gt;）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;projected value&lt;/td&gt; &#xA;   &lt;td&gt;被呈现值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wrapped value&lt;/td&gt; &#xA;   &lt;td&gt;被包装值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;argument&lt;/td&gt; &#xA;   &lt;td&gt;实参&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;parameter&lt;/td&gt; &#xA;   &lt;td&gt;形参&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;variadic parameters&lt;/td&gt; &#xA;   &lt;td&gt;可变参数&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;associated type&lt;/td&gt; &#xA;   &lt;td&gt;关联类型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;range&lt;/td&gt; &#xA;   &lt;td&gt;区间&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type property&lt;/td&gt; &#xA;   &lt;td&gt;类型属性&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unary operator&lt;/td&gt; &#xA;   &lt;td&gt;一元运算符&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;binary operator&lt;/td&gt; &#xA;   &lt;td&gt;二元运算符&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ternary operator&lt;/td&gt; &#xA;   &lt;td&gt;三元运算符&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;labeled statement&lt;/td&gt; &#xA;   &lt;td&gt;具名语句&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conform protocol&lt;/td&gt; &#xA;   &lt;td&gt;遵循协议&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;availability-condition&lt;/td&gt; &#xA;   &lt;td&gt;可用性条件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fallthrough&lt;/td&gt; &#xA;   &lt;td&gt;贯穿&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;branch statement&lt;/td&gt; &#xA;   &lt;td&gt;分支语句&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;control transfer statement&lt;/td&gt; &#xA;   &lt;td&gt;控制传递语句&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type annotation&lt;/td&gt; &#xA;   &lt;td&gt;类型注解&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type identifier&lt;/td&gt; &#xA;   &lt;td&gt;类型标识符&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;metatype type&lt;/td&gt; &#xA;   &lt;td&gt;元类型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;protocol composition type&lt;/td&gt; &#xA;   &lt;td&gt;复合协议类型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;associated value&lt;/td&gt; &#xA;   &lt;td&gt;关联值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;raw value&lt;/td&gt; &#xA;   &lt;td&gt;原始值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;computed property&lt;/td&gt; &#xA;   &lt;td&gt;计算属性&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stored property&lt;/td&gt; &#xA;   &lt;td&gt;存储属性&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;operator&lt;/td&gt; &#xA;   &lt;td&gt;运算符&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;playground&lt;/td&gt; &#xA;   &lt;td&gt;不翻译&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;   &lt;td&gt;数组&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dictionary&lt;/td&gt; &#xA;   &lt;td&gt;字典&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;list&lt;/td&gt; &#xA;   &lt;td&gt;列表&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;statement&lt;/td&gt; &#xA;   &lt;td&gt;语句&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;expression&lt;/td&gt; &#xA;   &lt;td&gt;表达式&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;optional&lt;/td&gt; &#xA;   &lt;td&gt;可选&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;implicitly unwrapped optional&lt;/td&gt; &#xA;   &lt;td&gt;隐式解包可选值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;optional binding&lt;/td&gt; &#xA;   &lt;td&gt;可选绑定&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;optional chaining&lt;/td&gt; &#xA;   &lt;td&gt;可选链&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;collection&lt;/td&gt; &#xA;   &lt;td&gt;集合&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;convention&lt;/td&gt; &#xA;   &lt;td&gt;约定&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iterate&lt;/td&gt; &#xA;   &lt;td&gt;迭代&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nest&lt;/td&gt; &#xA;   &lt;td&gt;嵌套&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inheritance&lt;/td&gt; &#xA;   &lt;td&gt;继承&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;override&lt;/td&gt; &#xA;   &lt;td&gt;重写&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;base class&lt;/td&gt; &#xA;   &lt;td&gt;基类&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;designated initializer&lt;/td&gt; &#xA;   &lt;td&gt;指定构造器&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;convenience initializer&lt;/td&gt; &#xA;   &lt;td&gt;便利构造器&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;automatic reference counting&lt;/td&gt; &#xA;   &lt;td&gt;自动引用计数&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type inference&lt;/td&gt; &#xA;   &lt;td&gt;类型推断&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type casting&lt;/td&gt; &#xA;   &lt;td&gt;类型转换&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unwrapped&lt;/td&gt; &#xA;   &lt;td&gt;解包&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wrapped&lt;/td&gt; &#xA;   &lt;td&gt;包装&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;note&lt;/td&gt; &#xA;   &lt;td&gt;注意&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;closure&lt;/td&gt; &#xA;   &lt;td&gt;闭包&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tuple&lt;/td&gt; &#xA;   &lt;td&gt;元组&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;first-class&lt;/td&gt; &#xA;   &lt;td&gt;一等&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;deinitializer&lt;/td&gt; &#xA;   &lt;td&gt;析构器&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;initializer&lt;/td&gt; &#xA;   &lt;td&gt;构造器&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;initialization&lt;/td&gt; &#xA;   &lt;td&gt;构造过程&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;deinitialization&lt;/td&gt; &#xA;   &lt;td&gt;析构过程&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;getter&lt;/td&gt; &#xA;   &lt;td&gt;不翻译&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setter&lt;/td&gt; &#xA;   &lt;td&gt;不翻译&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;subscript&lt;/td&gt; &#xA;   &lt;td&gt;下标&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;property&lt;/td&gt; &#xA;   &lt;td&gt;属性&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;attribute&lt;/td&gt; &#xA;   &lt;td&gt;特性或者属性，根据上下文&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;method&lt;/td&gt; &#xA;   &lt;td&gt;方法&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enumeration&lt;/td&gt; &#xA;   &lt;td&gt;枚举&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;structure&lt;/td&gt; &#xA;   &lt;td&gt;结构体&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;protocol&lt;/td&gt; &#xA;   &lt;td&gt;协议&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;extension&lt;/td&gt; &#xA;   &lt;td&gt;扩展&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;generic&lt;/td&gt; &#xA;   &lt;td&gt;泛型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;literal value&lt;/td&gt; &#xA;   &lt;td&gt;字面量&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;alias&lt;/td&gt; &#xA;   &lt;td&gt;别名&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;assertion&lt;/td&gt; &#xA;   &lt;td&gt;断言&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;conditional compilation&lt;/td&gt; &#xA;   &lt;td&gt;条件编译&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;opaque type&lt;/td&gt; &#xA;   &lt;td&gt;不透明类型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;function&lt;/td&gt; &#xA;   &lt;td&gt;函数&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;runtime&lt;/td&gt; &#xA;   &lt;td&gt;运行时&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;贡献者&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SwiftGGTeam/the-swift-programming-language-in-chinese/raw/gh-pages/source/contributors.md&#34;&gt;贡献者列表&lt;/a&gt;，感谢大家！&lt;/p&gt; &#xA;&lt;h1&gt;协议&lt;/h1&gt; &#xA;&lt;p&gt;和 &lt;a href=&#34;https://swift.org/documentation/&#34;&gt;苹果官方文档&lt;/a&gt; 协议一致：&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons Attribution 4.0 International (CC BY 4.0) License&lt;/a&gt;。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-1-practice-toy-tale</title>
    <updated>2022-06-16T01:36:53Z</updated>
    <id>tag:github.com,2022-06-16:/learn-co-curriculum/phase-1-practice-toy-tale</id>
    <link href="https://github.com/learn-co-curriculum/phase-1-practice-toy-tale" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Toy Tale&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set up event listeners to respond to user events&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;fetch()&lt;/code&gt; to make a &#34;GET&#34; request, then render the returned toys to the DOM&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;fetch()&lt;/code&gt; to make a &#34;POST&#34; request to create a new toy, then add it to the DOM&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;fetch()&lt;/code&gt; to make a &#34;PATCH&#34; request that updates an existing toy, then render the updated information to the DOM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ve got a friend in need! Your friend Andy recently misplaced all their toys! Let&#39;s write an app that helps Andy keep track of them. For this lab, you will need to pull together everything you&#39;ve learned about manipulating the DOM, responding to events, and communicating with the server. Specifically, you will need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Access the list of toys from an API (mocked using JSON Server) and render each of them in a &#34;card&#34; on the page&lt;/li&gt; &#xA; &lt;li&gt;Hook up a form that enables users to add new toys. Create an event listener so that, when the form is submitted, the new toy is persisted to the database and a new card showing the toy is added to the DOM&lt;/li&gt; &#xA; &lt;li&gt;Create an event listener that gives users the ability to click a button to &#34;like&#34; a toy. When the button is clicked, the number of likes should be updated in the database and the updated information should be rendered to the DOM&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The final product should look like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-1/communicating-with-the-server/toy_tale.gif&#34; alt=&#34;Toy Tale working app&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this lab does not contain tests. You will be working from the requirements described below and verifying that your code is working correctly in the browser.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Start Up the Server&lt;/h2&gt; &#xA;&lt;p&gt;All of the toy data is stored in the &lt;code&gt;db.json&lt;/code&gt; file. You&#39;ll want to access this data using a JSON server. Run &lt;code&gt;json-server --watch db.json&lt;/code&gt; to start the server.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For users of the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&#34;&gt;Live Server VSCode extension&lt;/a&gt;, if the page is reloading when you initiate a fetch request, you&#39;ll need to set up some additional configuration for Live Server to play nicely with &lt;code&gt;json-server&lt;/code&gt;. Follow the steps in &lt;a href=&#34;https://gist.github.com/ihollander/cc5f36c6447d15dea6a16f68d82aacf7&#34;&gt;this gist&lt;/a&gt; (you&#39;ll only need to do this once), then come back to this lesson.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This will create a server storing all of our lost toy data with restful routes at &lt;code&gt;http://localhost:3000/toys&lt;/code&gt;. You can also check out the information for each individual toy at &lt;code&gt;http://localhost:3000/toys/:id&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; we are using &lt;code&gt;:id&lt;/code&gt; here as a variable value that indicates the path to a specific toy. To navigate (or send a request) to that path, the &lt;code&gt;id&lt;/code&gt; number will be inserted into the URL in place of &lt;code&gt;:id&lt;/code&gt;, e.g., &lt;code&gt;http://localhost:3000/toys/1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Open a second tab in the terminal then open &lt;code&gt;index.html&lt;/code&gt; in the browser and take a look at the page. The CSS has all been provided for you so that, when you create the cards to display each toy, you just need to add a CSS class to style them.&lt;/p&gt; &#xA;&lt;p&gt;If you click on the &#34;Add a new toy!&#34; button, you&#39;ll see that it exposes a form where the user can submit information for a new toy. To re-hide the form, click the button a second time. If you take a look inside &lt;code&gt;index.js&lt;/code&gt;, you&#39;ll see that the code implementing that functionality has been provided for you. You will be writing the code to wire up the &#34;Create Toy&#34; button.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Fetch Andy&#39;s Toys&lt;/h3&gt; &#xA;&lt;p&gt;On the &lt;code&gt;index.html&lt;/code&gt; page, there is a &lt;code&gt;div&lt;/code&gt; with the &lt;code&gt;id&lt;/code&gt; &#34;toy-collection.&#34;&lt;/p&gt; &#xA;&lt;p&gt;When the page loads, make a &#39;GET&#39; request to fetch all the toy objects. With the response data, make a &lt;code&gt;&amp;lt;div class=&#34;card&#34;&amp;gt;&lt;/code&gt; for each toy and add it to the toy-collection &lt;code&gt;div&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Add Toy Info to the Card&lt;/h3&gt; &#xA;&lt;p&gt;Each card should have the following child elements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;h2&lt;/code&gt; tag with the toy&#39;s name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;img&lt;/code&gt; tag with the &lt;code&gt;src&lt;/code&gt; of the toy&#39;s image attribute and the class name &#34;toy-avatar&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;p&lt;/code&gt; tag with how many likes that toy has&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;button&lt;/code&gt; tag with a class &#34;like-btn&#34; and an id attribute set to the toy&#39;s id number&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After all of that, the toy card should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&#34;card&#34;&amp;gt;&#xA;  &amp;lt;h2&amp;gt;Woody&amp;lt;/h2&amp;gt;&#xA;  &amp;lt;img src=&#34;[toy_image_url]&#34; class=&#34;toy-avatar&#34; /&amp;gt;&#xA;  &amp;lt;p&amp;gt;4 Likes&amp;lt;/p&amp;gt;&#xA;  &amp;lt;button class=&#34;like-btn&#34; id=&#34;[toy_id]&#34;&amp;gt;Like ❤️&amp;lt;/button&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add a New Toy&lt;/h3&gt; &#xA;&lt;p&gt;When a user submits the toy form, two things should happen:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;POST&lt;/code&gt; request should be sent to &lt;code&gt;http://localhost:3000/toys&lt;/code&gt; and the new toy added to Andy&#39;s Toy Collection.&lt;/li&gt; &#xA; &lt;li&gt;If the post is successful, the toy should be added to the DOM without reloading the page.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to send a POST request via &lt;code&gt;fetch()&lt;/code&gt;, give the &lt;code&gt;fetch()&lt;/code&gt; a second argument of an object. This object should specify the method as &lt;code&gt;POST&lt;/code&gt; and also provide the appropriate headers and the JSON data for the request. The headers and body should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;headers:&#xA;{&#xA;  &#34;Content-Type&#34;: &#34;application/json&#34;,&#xA;  Accept: &#34;application/json&#34;&#xA;}&#xA;&#xA;body: JSON.stringify({&#xA;  &#34;name&#34;: &#34;Jessie&#34;,&#xA;  &#34;image&#34;: &#34;https://vignette.wikia.nocookie.net/p__/images/8/88/Jessie_Toy_Story_3.png/revision/latest?cb=20161023024601&amp;amp;path-prefix=protagonist&#34;,&#xA;  &#34;likes&#34;: 0&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For examples, refer to the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Supplying_request_options&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Increase a Toy&#39;s Likes&lt;/h3&gt; &#xA;&lt;p&gt;When a user clicks on a toy&#39;s like button, two things should happen:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;patch&lt;/code&gt; request (i.e., &lt;code&gt;method: &#34;PATCH&#34;&lt;/code&gt;) should be sent to the server at &lt;code&gt;http://localhost:3000/toys/:id&lt;/code&gt;, updating the number of likes that the specific toy has&lt;/li&gt; &#xA; &lt;li&gt;If the patch is successful, the toy&#39;s like count should be updated in the DOM without reloading the page&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;patch&lt;/code&gt; request enables us to &lt;strong&gt;update&lt;/strong&gt; an existing toy. The request will look very similar to our &#34;POST&#34; request &lt;strong&gt;except&lt;/strong&gt; that we need to include the &lt;code&gt;id&lt;/code&gt; of the toy we&#39;re updating in the path.&lt;/p&gt; &#xA;&lt;p&gt;To get this working, you will need to add an event listener to each toy&#39;s &#34;Like&#34; button. When the button is clicked for a toy, your code should:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;capture that toy&#39;s id,&lt;/li&gt; &#xA; &lt;li&gt;calculate the new number of likes,&lt;/li&gt; &#xA; &lt;li&gt;submit the &lt;code&gt;patch&lt;/code&gt; request, and&lt;/li&gt; &#xA; &lt;li&gt;update the toy&#39;s card in the DOM based on the &lt;code&gt;Response&lt;/code&gt; returned by the fetch request.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The headers and body should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;headers:&#xA;{&#xA;  &#34;Content-Type&#34;: &#34;application/json&#34;,&#xA;  Accept: &#34;application/json&#34;&#xA;}&#xA;&#xA;body: JSON.stringify({&#xA;  &#34;likes&#34;: newNumberOfLikes&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;patch&lt;/code&gt; method updates the property or properties included in the body of a &lt;code&gt;fetch&lt;/code&gt; request but leaves the remaining properties as they are. For our example, the &lt;code&gt;likes&lt;/code&gt; property will be updated by our &lt;code&gt;patch&lt;/code&gt; request but the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;image&lt;/code&gt; properties will remain unchanged.&lt;/p&gt; &#xA;&lt;p&gt;If your request isn&#39;t working, make sure your headers and keys match the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Supplying_request_options&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;HINT&lt;/strong&gt;: You will be creating two event listeners for this lab. The first one will be on the &#34;Create Toy&#34; button, which is provided in the app&#39;s &lt;code&gt;index.html&lt;/code&gt; file. The second one, however, will be on the &#34;Likes&#34; button on each individual toy card. Given that the toy cards will be rendered to the DOM dynamically from the &lt;code&gt;Response&lt;/code&gt; returned by the &lt;code&gt;fetch&lt;/code&gt; &#34;GET&#34; request, think about &lt;strong&gt;when&lt;/strong&gt; it makes sense to add the event listener to each toy&#39;s &#34;Like&#34; button.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;Once you get everything working, take a moment to appreciate how far you&#39;ve come. You now have the skills needed to respond to user events, persist changes to a database, and manipulate the DOM in response. You have created your first fully-functioning web app that combines all three of the pillars.&lt;/p&gt; &#xA;&lt;p&gt;Congratulations!&lt;/p&gt;</summary>
  </entry>
</feed>