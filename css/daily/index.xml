<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-08T01:33:27Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>johniwasz/whetstone.chatgpt</title>
    <updated>2023-03-08T01:33:27Z</updated>
    <id>tag:github.com,2023-03-08:/johniwasz/whetstone.chatgpt</id>
    <link href="https://github.com/johniwasz/whetstone.chatgpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple light-weight library that wraps GPT-3 API completions.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/johniwasz/whetstone.chatgpt/actions/workflows/codeql.yml&#34;&gt;&lt;img src=&#34;https://github.com/johniwasz/whetstone.chatgpt/actions/workflows/codeql.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Whetstone.ChatGPT&lt;/h1&gt; &#xA;&lt;p&gt;A simple light-weight library that wraps the GPT-3 API with support for dependency injection.&lt;/p&gt; &#xA;&lt;p&gt;Supported features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Completions&lt;/li&gt; &#xA; &lt;li&gt;Edits&lt;/li&gt; &#xA; &lt;li&gt;Files&lt;/li&gt; &#xA; &lt;li&gt;Fine Tunes&lt;/li&gt; &#xA; &lt;li&gt;Images&lt;/li&gt; &#xA; &lt;li&gt;Embeddings&lt;/li&gt; &#xA; &lt;li&gt;Moderations&lt;/li&gt; &#xA; &lt;li&gt;Response streaming&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a video walkthrough of a Blazor web app built on this library, please click the image below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ifs98S9ktJU&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/ifs98S9ktJU/0.jpg&#34; alt=&#34;You Tube Walkthrough&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is deployed to github pages and available at: &lt;a href=&#34;https://johniwasz.github.io/whetstone.chatgpt/&#34;&gt;GPT-3 UI&lt;/a&gt;. Source for the Blazor web app is at &lt;a href=&#34;https://github.com/johniwasz/whetstone.chatgpt/tree/main/src/examples/blazor/Whetstone.ChatGPT.Blazor.App/Whetstone.ChatGPT.Blazor.App&#34;&gt;Whetstone.ChatGPT.Blazor.App&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/johniwasz/whetstone.chatgpt/tree/main/src/examples&#34;&gt;Examples&lt;/a&gt; include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/johniwasz/whetstone.chatgpt/tree/main/src/examples/Whetstone.ChatGPT.SimpleCommandlineBot&#34;&gt;Command line bot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/johniwasz/whetstone.chatgpt/tree/main/src/examples/twitter-webhook&#34;&gt;Azure Function Twitter Webhook&lt;/a&gt; that responds to DMs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependency Injection Quickstart&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;services.Configure&amp;lt;ChatGPTCredentials&amp;gt;(options =&amp;gt;&#xA;{    &#xA;    options.ApiKey = &#34;YOURAPIKEY&#34;;&#xA;    options.Organization = &#34;YOURORGANIZATIONID&#34;;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;services.AddHttpClient();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;services.AddHttpClient&amp;lt;IChatGPTClient, ChatGPTClient&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure &lt;code&gt;IChatGPTClient&lt;/code&gt; service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;services.AddScoped&amp;lt;IChatGPTClient, ChatGPTClient&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Completion&lt;/h2&gt; &#xA;&lt;p&gt;GPT-3 Completions use &lt;a href=&#34;https://beta.openai.com/docs/models&#34;&gt;models&lt;/a&gt; to answer a wide variety of tasks, including but not limited to classification, sentiment analysis, answering questions, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Completion Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;This shows a direct useage of the &lt;strong&gt;text-davinci-003&lt;/strong&gt; model without any prompts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;using Whetstone.ChatGPT;&#xA;using Whetstone.ChatGPT.Models;&#xA;&#xA;. . .&#xA;&#xA;IChatGPTClient client = new ChatGPTClient(&#34;YOURAPIKEY&#34;);&#xA;&#xA;var gptRequest = new ChatGPTCompletionRequest&#xA;{&#xA;    Model = ChatGPTCompletionModels.Davinci,&#xA;    Prompt = &#34;How is the weather?&#34;&#xA;};&#xA;&#xA;var response = await client.CreateCompletionAsync(gptRequest);&#xA;&#xA;Console.WriteLine(response.GetCompletionText());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GPT-3 is not deterministic. One of the test runs of the sample above returned:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The weather can vary greatly depending on location. In general, you can expect temperatures to be moderate and climate to be comfortable, but it is always best to check the forecast for your specific area.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Completion Code Sample&lt;/h3&gt; &#xA;&lt;p&gt;A C# console application that uses completions is available at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/johniwasz/whetstone.chatgpt/tree/main/src/examples/Whetstone.ChatGPT.CommandLineBot&#34;&gt;Whetstone.ChatGPT.CommandLineBot (chatgpt-marv)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This sample includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Authentication&lt;/li&gt; &#xA; &lt;li&gt;Created a completion request using a prompt&lt;/li&gt; &#xA; &lt;li&gt;Processing completion responses&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Editing Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To use submit an edit completion request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;using Whetstone.ChatGPT;&#xA;using Whetstone.ChatGPT.Models;&#xA;&#xA;. . .&#xA;&#xA;IChatGPTClient client = new ChatGPTClient(&#34;YOURAPIKEY&#34;);&#xA;&#xA;var gptEditRequest = new ChatGPTCreateEditRequest&#xA;{             &#xA;    Input = &#34;What day of the wek is it?&#34;,&#xA;    Instruction = &#34;Fix spelling mistakes&#34;&#xA;};&#xA;&#xA;var response = await client.CreateEditAsync(gptEditRequest);&#xA;&#xA;Console.WriteLine(response.GetEditedText());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One of the test runs returned:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;What day of the week is it?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;File Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;How to create a upload a new fine tuning file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;&#xA;List&amp;lt;ChatGPTFineTuneLine&amp;gt; tuningInput = new()&#xA;{&#xA;    new ChatGPTFineTuneLine(&#34;&amp;lt;PROMPT&amp;gt;&#34;, &#34;&amp;lt;COMPLETION&amp;gt;&#34;),&#xA;    new ChatGPTFineTuneLine(&#34;&amp;lt;PROMPT&amp;gt;&#34;, &#34;&amp;lt;COMPLETION&amp;gt;&#34;),&#xA;    . . .&#xA;};&#xA;&#xA;byte[] tuningText = tuningInput.ToJsonLBinary();&#xA;&#xA;string fileName = &#34;finetuningsample.jsonl&#34;;&#xA;&#xA;ChatGPTUploadFileRequest? uploadRequest = new ChatGPTUploadFileRequest&#xA;{&#xA;    File = new ChatGPTFileContent&#xA;    {&#xA;        FileName = fileName,&#xA;        Content = tuningText&#xA;    }&#xA;};&#xA;&#xA;ChatGPTFileInfo? uploadedFileInfo;&#xA;using (IChatGPTClient client = new ChatGPTClient(&#34;YOURAPIKEY&#34;))&#xA;{&#xA;    uploadedFileInfo = await client.UploadFileAsync(uploadRequest);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fine Tuning Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Once the file has been created, get the fileId, and reference it when creating a new fine tuning.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;using (IChatGPTClient client = new ChatGPTClient(&#34;YOURAPIKEY&#34;))&#xA;{&#xA;  var fileList = await client.ListFilesAsync();&#xA;  var foundFile =  fileList.Data.First(x =&amp;gt; x.Filename.Equals(&#34;finetuningsample.jsonl&#34;));&#xA;&#xA;  ChatGPTCreateFineTuneRequest tuningRequest = new ChatGPTCreateFineTuneRequest&#xA;  {&#xA;     TrainingFileId = foundFile.Id&#xA;  };&#xA;&#xA;  ChatGPTFineTuneJob? tuneResponse = await client.CreateFineTuneAsync(tuningRequest);&#xA;&#xA;  string fineTuneId = tuneResponse.Id;&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Processing the fine tuning request will take some time. Once it finishes, the &lt;strong&gt;Status&lt;/strong&gt; will report &#34;succeeded&#34; and it&#39;s ready to be used in a completion request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;using (IChatGPTClient client = new ChatGPTClient(&#34;YOURAPIKEY&#34;))&#xA;{&#xA;  ChatGPTFineTuneJob? tuneResponse = await client.RetrieveFineTuneAsync(&#34;FINETUNEID&#34;);&#xA;&#xA;  if(tuneResponse.Status.Equals(&#34;succeeded&#34;))&#xA;  {&#xA;    var gptRequest = new ChatGPTCompletionRequest&#xA;    {&#xA;      Model = ChatGPTCompletionModels.Davinci,&#xA;      Prompt = &#34;How is the weather?&#34;&#xA;    };&#xA;&#xA;    var response = await client.CreateCompletionAsync(gptRequest);&#xA;&#xA;    Console.WriteLine(response.GetCompletionText());&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Image Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example that generates a 1024x1024 image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;ChatGPTCreateImageRequest imageRequest = new()&#xA;{&#xA;    Prompt = &#34;A sail boat&#34;,&#xA;    Size = CreatedImageSize.Size1024,&#xA;    ResponseFormat = CreatedImageFormat.Base64&#xA;};&#xA;&#xA;using (IChatGPTClient client = new ChatGPTClient(&#34;YOURAPIKEY&#34;))&#xA;{&#xA;    ChatGPTImageResponse? imageResponse = await client.CreateImageAsync(imageRequest);&#xA;&#xA;    var imageData = imageResponse?.Data[0];&#xA;&#xA;    if (imageData != null)&#xA;    {&#xA;        byte[] imageBytes = await client.DownloadImageAsync(imageData);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ART3MISTICAL/dotfiles</title>
    <updated>2023-03-08T01:33:27Z</updated>
    <id>tag:github.com,2023-03-08:/ART3MISTICAL/dotfiles</id>
    <link href="https://github.com/ART3MISTICAL/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My dotfiles&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dotfiles&lt;/h1&gt; &#xA;&lt;h1&gt;Old rices are on releases page&lt;/h1&gt; &#xA;&lt;h1&gt;Preview:&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/68769374/222545699-f826acc0-abe1-431e-806b-89e9bb3720da.png&#34; alt=&#34;gnome-rice&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Extensions:&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://extensions.gnome.org/extension/5338/aylurs-widgets/&#34;&gt; Aylurs-widgets &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://extensions.gnome.org/extension/4451/logo-menu/&#34;&gt; Logo Menu &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://extensions.gnome.org/extension/5237/rounded-window-corners/&#34;&gt; Rounded Window Corners &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://extensions.gnome.org/extension/1460/vitals/&#34;&gt; Vitals &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/pop-os/shell&#34;&gt; Pop Shell &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://extensions.gnome.org/extension/5090/space-bar/&#34;&gt; Space Bar &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://extensions.gnome.org/extension/4356/top-bar-organizer/&#34;&gt; Top Bar Organizer &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Music player: &lt;a href=&#34;https://flathub.org/apps/details/io.bassi.Amberol&#34;&gt; Amberol &lt;/a&gt;&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>bryanbraun/after-dark-css</title>
    <updated>2023-03-08T01:33:27Z</updated>
    <id>tag:github.com,2023-03-08:/bryanbraun/after-dark-css</id>
    <link href="https://github.com/bryanbraun/after-dark-css" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Recreating After Dark screensavers in CSS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;After Dark in CSS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bryanbraun/after-dark-css/gh-pages/img/flying-toasters-css.jpg&#34; alt=&#34;Flying Toasters in CSS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Do you longingly reminisce about the days when flying toasters graced your screen? Do words like &#34;Confetti Factory&#34; and &#34;Daredevil Dan&#34; make your heart skip a beat?&lt;/p&gt; &#xA;&lt;p&gt;If so, then never fear—CSS is here! Using modern CSS techniques like animations and transforms, we can imitate several of your favorite After Dark™ screensavers.&lt;/p&gt; &#xA;&lt;p&gt;The animations were made with CSS alone. No animated gifs or JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://bryanbraun.github.io/after-dark-css/&#34;&gt;See them here!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Just for fun.&lt;/p&gt; &#xA;&lt;h2&gt;License?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The HTML &amp;amp; CSS is licensed with &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;The MIT License&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://usemodify.com/fonts/chicago/&#34;&gt;ChicagoFLF font&lt;/a&gt; is licensed with &lt;a href=&#34;https://scripts.sil.org/ofl&#34;&gt;The SIL Open Font License&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Images are copyright &lt;a href=&#34;https://en.wikipedia.org/wiki/Berkeley_Systems&#34;&gt;Berkeley Systems&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Full reuse is probably ok, but use at your own risk! &lt;a href=&#34;https://github.com/bryanbraun/after-dark-css/issues/3#issuecomment-127814083&#34;&gt;For more details, see this comment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks to:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/jonathansampson&#34;&gt;Jonathon Sampson&lt;/a&gt;, &lt;a href=&#34;http://codepen.io/keithclark/&#34;&gt;Keith Clark&lt;/a&gt;, &lt;a href=&#34;http://www.cssnewbie.com/pure-css-bouncing-ball&#34;&gt;Rob Glazebrook&lt;/a&gt;, &lt;a href=&#34;http://ned.highline.edu/~ryan-j/200/final/&#34;&gt;Ryan Justice&lt;/a&gt; and others for posting tutorials &amp;amp; demos on CSS animations. &lt;a href=&#34;http://www.masswerk.at/flyer/&#34;&gt;N. Landsteiner&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=M1w1SQ3ezh8&#34;&gt;David Donarumo&lt;/a&gt;, and &lt;a href=&#34;http://www.youtube.com/watch?v=ANnYbX54oU4&#34;&gt;Lazy Game Reviews&lt;/a&gt; for online preservation of what the original screensavers looked like. Robin Casady for the Public Domain &lt;a href=&#34;http://christtrekker.users.sourceforge.net/fnt/chicago.shtml&#34;&gt;ChicagoFLF&lt;/a&gt; font. The original screensavers and artwork are © 1989 Berkeley Systems Inc.&lt;/p&gt;</summary>
  </entry>
</feed>