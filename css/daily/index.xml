<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-15T01:27:56Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Training360/html5-halado</title>
    <updated>2023-11-15T01:27:56Z</updated>
    <id>tag:github.com,2023-11-15:/Training360/html5-halado</id>
    <link href="https://github.com/Training360/html5-halado" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTML5 haladó tanfolyam anyaga.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;html5-halado&lt;/h1&gt; &#xA;&lt;p&gt;HTML5 haladó tanfolyam anyaga.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FilipJirsak-Czechitas/j2w-ukol06</title>
    <updated>2023-11-15T01:27:56Z</updated>
    <id>tag:github.com,2023-11-15:/FilipJirsak-Czechitas/j2w-ukol06</id>
    <link href="https://github.com/FilipJirsak-Czechitas/j2w-ukol06" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zadání úkolu č. 7.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Úkol 6 – Vizitky 3.0&lt;/h1&gt; &#xA;&lt;p&gt;Aplikaci pro zobrazování vizitek upravíme tak, aby údaje o vizitkách měla uložené v databázi. Údaje se tak (konečně!) nebudou ztrácet při restartu aplikace. Jako výchozí repository použij toto repository, je zde nakonfigurovaná databáze. Pokud sis v předchozích úkolech s vizitkami upravovala vzhled stránky, můžeš úpravené styly a stránky použít i zde.&lt;/p&gt; &#xA;&lt;p&gt;Aplikace bude na úvodní stránce zobrazovat seznam vizitek (šablona &lt;code&gt;seznam.ftlh&lt;/code&gt;). Po kliknutí na vizitku se zobrazí její detail – stránka s jednou vizitkou, pod vizitkou bude mapa (šablona &lt;code&gt;vizitka.ftlh&lt;/code&gt;). Na titulní stránce je také tlačítko pro přidání vizitky. To zobrazí formulář pro přidání vizitky – šablona &lt;code&gt;formular.ftlh&lt;/code&gt;. Úpravu a mazání vizitky implementovat nemusíš, ale můžeš to udělat jako bonusový úkol.&lt;/p&gt; &#xA;&lt;p&gt;Repository obsahuje skripty pro vytvoření databáze a vzorové šablony stránek. V Java kódu obsahuje jenom třídu &lt;code&gt;Application&lt;/code&gt; – všechny ostatní třídy musíš vytvořit ty.&lt;/p&gt; &#xA;&lt;p&gt;Databáze obsahuje jednu tabulku pojmenovanou &lt;code&gt;vizitka&lt;/code&gt;. Tabulka obsahuje následující sloupečky:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;id&lt;/code&gt; – číselný identifikátor vizitky, primární klíč – v Javě pro něj použij typ &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cele_jmeno&lt;/code&gt; – nezapomeň, že v entitě bude property pojmenovaná &lt;code&gt;celeJmeno&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;firma&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ulice&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;obec&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;psc&lt;/code&gt; – PSČ je v databázi uložené jako text o délce 5 znaků&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;email&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;telefon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;web&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Všechny textové řetězce mají maximální délku 100 znaků, s výjimkou PSČ, které má vždy 5 znaků, a s výjimkou telefonního čísla, které má maximálně 20 znaků. Údaje &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;telefon&lt;/code&gt; a &lt;code&gt;web&lt;/code&gt; jsou v databázi nepovinné, ostatní údaje jsou povinné. V entitě bude také read-only property &lt;code&gt;celaAdresa&lt;/code&gt;, která poskládá adresu z ulice, PSČ a obce. tato property se použije v detailu vizitky pro zobrazení mapy.&lt;/p&gt; &#xA;&lt;p&gt;Pokud se chce do tabulky v databázi podívat, spusť jednou aplikaci, aby se databáze vytvořila. Připojovací URL, které se zadává při konfiguraci panelu Database v IntelliJ Idea, najdeš v souboru &lt;code&gt;src/main/resources/application.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Kód, který v controlleru zajistí, aby se prázdné stringy převedly na &lt;code&gt;null&lt;/code&gt;, je zde:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@InitBinder&#xA;public void nullStringBinding(WebDataBinder binder) {&#xA;  binder.registerCustomEditor(String.class, new StringTrimmerEditor(true));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Udělej fork zdrojového repository do svého účtu na GitHubu, případně pokračuj ve svém úkolu z předchozí lekce.&lt;/li&gt; &#xA; &lt;li&gt;Naklonuj si repository &lt;strong&gt;ze svého účtu&lt;/strong&gt; na GitHubu na lokální počítač.&lt;/li&gt; &#xA; &lt;li&gt;Spusť si naklonovanou aplikaci, aby se vytvotřila databáze. V prohlížeči se na stránce &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt; zatím bude zobrazovat jen chyba, v aplikaci není žádný controller.&lt;/li&gt; &#xA; &lt;li&gt;Zprovozni si panel Database v IntelliJ Idea, ať si můžeš ověřit, co je v databázi. Připojovací URL, které se zadává při konfiguraci panelu Database v IntelliJ Idea, najdeš v souboru &lt;code&gt;src/main/resources/application.yaml&lt;/code&gt;. Na panelu se vytváří nový &lt;em&gt;Data Source&lt;/em&gt;, databáze je &lt;em&gt;H2&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Vytvoři si controller (nezapomeň na odpovídající anotaci třídy), která bude odpovídat na požadavky &lt;code&gt;GET&lt;/code&gt; na URL &lt;code&gt;/&lt;/code&gt;. Metoda zobrazí view &lt;code&gt;seznam&lt;/code&gt;, zatím bez dat. Ověř si, že se v prohlížeči zobrazí stránka s jednou vizitkou a jednou prázdnou vizitkou, která funguje jako tlačítko pro přidání.&lt;/li&gt; &#xA; &lt;li&gt;Vytvoř entitu &lt;code&gt;Vizitka&lt;/code&gt;, nezapomeň na správnou anotaci třídy. Přidej fieldy na základě popisu tabulky výše a z fieldů vygeneruj properties. Vlastní konstruktor není potřeba (Java automaticky vytvoří bezparametrický konstruktor, který nám stačí). Nezapomeň field &lt;code&gt;id&lt;/code&gt; označit anotacemi – jde o databázový identifikátor a databáze ho má generovat automaticky.&lt;/li&gt; &#xA; &lt;li&gt;Vytvoř respository pro přístup k databázové tabulce s vizitkami. Na jménu repository nezáleží, nezapomeň však na správnou anotaci. Repository nebude třída (&lt;code&gt;class&lt;/code&gt;), ale rozhraní (&lt;code&gt;interface&lt;/code&gt;) a rozšiřuje (&lt;code&gt;extends&lt;/code&gt;) rozhraní &lt;code&gt;CrudRepository&lt;/code&gt;. Při rozšiřování &lt;code&gt;CrudRepository&lt;/code&gt; je potřeba uvést typ entity (&lt;code&gt;Vizitka&lt;/code&gt;) a typ primárního klíče (databázového identifikátoru) &lt;code&gt;Integer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Uprav controller tak, že bude mít field pro repository. Vytvoř pro controller konstruktor, který dostane repository jako vstupí parametr a uloží si ho do fieldu, aby bylo možné repository později v controlleru používat.&lt;/li&gt; &#xA; &lt;li&gt;Uprav metodu controlleru, která zobrazuje seznam vizitek, aby z repository získala seznam vizitek voláním &lt;code&gt;findAll()&lt;/code&gt;. Seznam vizitek vlož do modelu pod nějakým klíčem, třeba &lt;code&gt;seznam&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Uprav šablonu &lt;code&gt;seznam.ftlh&lt;/code&gt; tak, aby pomocí &lt;code&gt;[#list]&lt;/code&gt; procházela seznam vizitek a vypisovala je na stránku. Teď si zase můžeš v prohlížeči zkontrolovat, že se úvodní stránka zobrazuje správně a už na ní není jedna vizitka, ale všechny vizitky zadané v databázi. Můžeš si otevřít tabulku vizitka v IntelliJ Idea a přidat do ní nový záznam nebo záznam upravit a ověřit, že se v prohlížeči po obnově stránky data změní.&lt;/li&gt; &#xA; &lt;li&gt;Zkontroluj, že správně fungují odkaz na úvodní stránce – první vizitka by měla odkazovat na adresu &lt;code&gt;http://localhost:8080/1&lt;/code&gt;, druhá na &lt;code&gt;http://localhost:8080/2&lt;/code&gt;. Čísla za lomítkem jsou ID databázového záznamum tj. nemusí začínat jedničkou.&lt;/li&gt; &#xA; &lt;li&gt;Zprovozni metodu controlleru, která bude reagovat na požadavky metodou &lt;code&gt;GET&lt;/code&gt;, které budou mít v URL hned za lomítkem číslo. Číslo bude předáno jako parametr dovnitř metody. Na základě tohoto ID načti pomocí repository z databáze jeden záznam s odpovídajícím ID. Dostaneš na výstupu typ &lt;code&gt;Optional&amp;lt;Vizitka&amp;gt;&lt;/code&gt;. Ověříš, zda je v &lt;code&gt;Optional&lt;/code&gt; přítomná hodnota. Pokud ano, vložíš ji do modelu a zobrazíš pomocí šablony &lt;code&gt;vizitka.ftlh&lt;/code&gt;. Pokud v &lt;code&gt;Optional&lt;/code&gt; nebudou data přítomná (vizitka s daným ID neexistuje), ukončíš metodu voláním &lt;code&gt;return&lt;/code&gt; s návratovým kódem, který prohlížeči signalizuje stav &lt;code&gt;404 Not found&lt;/code&gt; – stránka nenalezena. Použij k tomu tento kód: &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;return ResponseEntity.notFound().build();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Uprav šablou &lt;code&gt;vizitka.ftlh&lt;/code&gt;, aby zobrazovala data z modelu. Pro zobrazení mapy použij property &lt;code&gt;celaAdresa&lt;/code&gt;. HTML kód pro zobrazení adresy bude vypadat takto (předpokládám, že údaje o vizitce jsou v modelu uložené pod klíčem &lt;code&gt;vizitka&lt;/code&gt;): &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;iframe style=&#34;border:none&#34; src=&#34;https://frame.mapy.cz/?q=${vizitka.celaAdresa?url}&#34; width=&#34;100%&#34; height=&#34;100%&#34; frameborder=&#34;0&#34;&amp;gt;&amp;lt;/iframe&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Vyzkoušej v prohlížeči, že se správně zobrazují detaily vizitky. A také že se zobrazí v prohlížeči chyba (je to stránka zobrazená přímo prohlížečem), pokud v adrese zadáš nějaké neexistující ID.&lt;/li&gt; &#xA; &lt;li&gt;Do controlleru přidej metodu, která bude reagovat na &lt;code&gt;GET&lt;/code&gt; požadavky na adrese &lt;code&gt;/nova&lt;/code&gt;. Metoda jen zobrazí šablonu &lt;code&gt;formular.ftlh&lt;/code&gt;. Uprav formulář tak, aby odesílal data metodou &lt;code&gt;POST&lt;/code&gt; na adresu &lt;code&gt;/nova&lt;/code&gt;. Vyzkoušej v prohlížeči, že funguje odkaz na přidání vizitky na úvodní stránce.&lt;/li&gt; &#xA; &lt;li&gt;Do controlleru přidej POST metodu, která bude reagovat na &lt;code&gt;POST&lt;/code&gt; požadavky na adrese &lt;code&gt;/nova&lt;/code&gt;. Jako parametr bude přijímat entitu &lt;code&gt;Vizitka&lt;/code&gt;, použijeme ji i pro přenos dat z formuláře. Použij metodu &lt;code&gt;save()&lt;/code&gt; repository pro uložení vizitky. Po uložení vizitky přesměruj uživatele na úvodní stránku. Vyzkoušej v prohlížeči, že funguje přidání vizitky.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bonus 1&lt;/strong&gt; Formulář pro přidání vizitky má už na sobě validace. To jsou však jen doporučení pro prohlížeč, uživatel je může obejít – může si např. v prohlížeči stránku upravit tak, že validace odstraní. V našem případě by nanejvýš poškodil své vlastní vizitky, navíc povinnost údajů hlídá i databáze (ta ale třeba pustí prázdné jméno – kontroluje jenom zda není &lt;code&gt;null&lt;/code&gt;). V reálné aplikaci je tedy vždy potřeba kontrolovat vstup uživatele i na serveru. Můžeš tedy jako bonus doplnit do entity i validační anotace, přidat validaci do controlleru a podle výsledku validace zjišťovat, zda znovu zobrazit formulář, nebo zda je validace bez chyb a je možné záznam uložit do databáze. Pro validaci PSČ můžeš použít anotaci &lt;code&gt;@Pattern(regexp = &#34;\\d{5}&#34;)&lt;/code&gt; – uvedený regulární výraz kontroluje, že text obsahuje přesně pět číslic. Tip – pokud nechceš odebírat všechny klientské validace z formuláře, stačí na formulář (HTML element &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;) přidat prázdný atribut &lt;code&gt;novalidate&lt;/code&gt;. Tím se validace v prohlížeči vypnou.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bonus 2&lt;/strong&gt; Můžeš na stránku s detailem přidat tlačítko pro mazání vizitky, případně pro její úpravu. Tlačítko pro úpravu by uživatele přesměrovalo na stránku s formulářem, kde budou předvyplněné současné údaje. Po uložení přesměruj uživatele zpět na stránku s detailem vizitky, kde už uživatel uvidí změněné údaje. Po smazání vizitky uživatele přesměruj na úvodní stránku. V controlleru přidej metody, které zobrazí formulář pro editaci (metodou &lt;code&gt;GET&lt;/code&gt;), uloží upravenou vizitku (metoda bude volána metodou &lt;code&gt;POST&lt;/code&gt;) a metodu, která smaže vizitku určenou ID (také metoda &lt;code&gt;POST&lt;/code&gt;). Metoda pro uložení vizitky by opět měla validovat vstupní data a zobrazit znovu formulář s validačními chybami, pokud je nějaký údaj špatně nebo chybí.&lt;/li&gt; &#xA; &lt;li&gt;Zkontroluj, zda vše funguje.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Commitni&lt;/em&gt; a &lt;em&gt;pushnni&lt;/em&gt; změny (výsledný kód) do svého repository na GitHubu.&lt;/li&gt; &#xA; &lt;li&gt;Vlož odkaz na své repository jako řešení úkolu na portálu &lt;a href=&#34;https://moje.czechitas.cz&#34;&gt;Moje Czechitas&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Odkazy&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;odkaz na stránku &lt;a href=&#34;https://java.czechitas.cz/2023-podzim/java-2-online/lekce-8.html&#34;&gt;Lekce 8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java SE 17 &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/&#34;&gt;Javadoc&lt;/a&gt; – dokumentace všech tříd, které jsou součástí základní Javy ve verzi 17.&lt;/li&gt; &#xA; &lt;li&gt;Dokumentace &lt;a href=&#34;https://spring.io/projects/spring-boot#learn&#34;&gt;Spring Boot&lt;/a&gt; – odsud je anotace &lt;code&gt;@SpringBootApplication&lt;/code&gt; a třída &lt;code&gt;SpringApplication&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Dokumentace &lt;a href=&#34;https://spring.io/projects/spring-framework#learn&#34;&gt;Spring Framework&lt;/a&gt; – odsud jsou anotace &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@GetRequest&lt;/code&gt; a třída &lt;code&gt;ModelAndView&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Dokumentace &lt;a href=&#34;https://freemarker.apache.org/docs/&#34;&gt;Freemarker&lt;/a&gt; – šablonovací systém pro HTML použitý v projektu.&lt;/li&gt; &#xA; &lt;li&gt;Dokumentace &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/Forms&#34;&gt;HTML formulářů&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt; – jeden z CSS frameworků&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://icons.getbootstrap.com&#34;&gt;Bootstrap Icons&lt;/a&gt; – sada ikon pro použití na webu&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unsplash.com&#34;&gt;Unsplash&lt;/a&gt; – obrázky a fotografie k použití zdarma&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>