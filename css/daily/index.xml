<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-17T01:37:52Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LearnOpenGL-CN/LearnOpenGL-CN</title>
    <updated>2022-07-17T01:37:52Z</updated>
    <id>tag:github.com,2022-07-17:/LearnOpenGL-CN/LearnOpenGL-CN</id>
    <link href="https://github.com/LearnOpenGL-CN/LearnOpenGL-CN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;http://learnopengl.com 系列教程的简体中文翻译&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LearnOpenGL中文化工程&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LearnOpenGL-CN/LearnOpenGL-CN/actions/workflows/deploy.yml&#34;&gt;&lt;img src=&#34;https://github.com/LearnOpenGL-CN/LearnOpenGL-CN/actions/workflows/deploy.yml/badge.svg?branch=new-theme&#34; alt=&#34;Status badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;learnopengl.com系列教程的中文翻译，目前正在校对及翻译中。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;英文原版&lt;/strong&gt;：&lt;a href=&#34;https://learnopengl.com/&#34;&gt;learnopengl.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;目前状态&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;原文大部分代码都有改变（使用的新的库），需要从头开始重新校对（Krasjet正在处理中，最重要的配置部分已经更新完毕）&lt;/li&gt; &#xA; &lt;li&gt;5-2节之后都没有按照新版的格式来排版，而且错误极多，也没有统一译名，需要进行整体的修改（Krasjet正在处理中，可能比较漫长）&lt;/li&gt; &#xA; &lt;li&gt;从头校对整体修改之后的文章（志愿者希望）&lt;/li&gt; &#xA; &lt;li&gt;PBL 章节和 In Practice 章节下还有几篇教程没有翻译（志愿者希望）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;阅读地址&lt;/h2&gt; &#xA;&lt;p&gt;目前Host在GitHub上，可以&lt;a href=&#34;https://learnopengl-cn.github.io/&#34;&gt;点击这里&lt;/a&gt;进行阅读。&lt;/p&gt; &#xA;&lt;p&gt;旧版本的Host在Read The Docs内（不定时更新），可以&lt;a href=&#34;http://learnopengl-cn.readthedocs.io/&#34;&gt;点击这里&lt;/a&gt;进行阅读。&lt;/p&gt; &#xA;&lt;h2&gt;认领翻译&lt;/h2&gt; &#xA;&lt;p&gt;由于我们的志愿者来自五湖四海，为了避免冲突。请志愿者们先Clone这个Repository 。同步到本地后找到要翻译的文章，创建一个如下所示的只包含作者、翻译者和原文链接信息的Markdown文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;原文     | [英文标题](原文地址)&#xA;      ---|---&#xA;作者     | JoeyDeVries&#xA;翻译     | [翻译]&#xA;校对     | 暂无&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;译文的文件命名统一规范为：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;两位数的章序列&amp;gt; &amp;lt;章名称&amp;gt;/&amp;lt;两位数节序列&amp;gt; 节名称.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果有小节的话：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;两位数的章序列&amp;gt; &amp;lt;章名称&amp;gt;/&amp;lt;两位数节序列&amp;gt; 节名称/&amp;lt;两位数小节序列&amp;gt; 小节名称.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;例如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;01 Getting started/01 OpenGL.md&#xA;或&#xA;05 Advanced Lighting/03 Shadows/02 Point Shadows.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;翻译之前请先阅读&lt;a href=&#34;https://github.com/LearnOpenGL-CN/LearnOpenGL-CN/raw/new-theme/styleguide.md&#34;&gt;样式指南&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;之后请联系我们，将您加入LearnOpenGL-CN组织，然后提交并Push您的翻译。或者您也可以Fork这个工程在本地编辑之后发送Pull Request。&lt;/p&gt; &#xA;&lt;h2&gt;样式指南&lt;/h2&gt; &#xA;&lt;p&gt;在文档的写作过程中，请遵守我们的&lt;a href=&#34;https://github.com/LearnOpenGL-CN/LearnOpenGL-CN/raw/new-theme/styleguide.md&#34;&gt;样式指南&lt;/a&gt;方便之后的校对以及修改工作。&lt;/p&gt; &#xA;&lt;h2&gt;构建&lt;/h2&gt; &#xA;&lt;p&gt;首先请安装Python，2和3都可以，之后初始化环境：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install mkdocs&#xA;$ python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;初始化以后，每次构建只需要输入以下指令即可，构建后的文件在&lt;code&gt;site&lt;/code&gt;文件夹内：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdocs build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果只是想测试的话，请输入以下指令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdocs serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;部署的网页可以通过&lt;code&gt;127.0.0.1:8000&lt;/code&gt;来访问。&lt;/p&gt; &#xA;&lt;h2&gt;建议&lt;/h2&gt; &#xA;&lt;p&gt;如果您发现教程有任何错误的话，欢迎Fork这个工程并发送Pull Request到 &lt;code&gt;new-theme&lt;/code&gt; 分支。如果您不想修改的话，可以点击页面上方的 &lt;code&gt;Issues&lt;/code&gt; 按钮提交一个Issue，我们看到后会及时更正。如果是对教程的内容有问题，请先查看原文，如果不是翻译错误的话，请直接在原网站评论区向作者（JoeyDeVries）反馈。&lt;/p&gt; &#xA;&lt;h2&gt;联系方式&lt;/h2&gt; &#xA;&lt;p&gt;QQ群：383745868&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>v2fly/v2ray-examples</title>
    <updated>2022-07-17T01:37:52Z</updated>
    <id>tag:github.com,2022-07-17:/v2fly/v2ray-examples</id>
    <link href="https://github.com/v2fly/v2ray-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;v2ray-core 的模板们&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;v2ray-examples&lt;/h1&gt; &#xA;&lt;p&gt;这里是一些供参考的 V2Ray 配置示例，内容与时俱进，自动化脚本等请勿从这里拉取配置。&lt;/p&gt; &#xA;&lt;p&gt;感谢 vTemplate 的作者 KiriKira、雨落无声和 Project V 的所有开发人员。&lt;/p&gt; &#xA;&lt;h2&gt;贡献指南&lt;/h2&gt; &#xA;&lt;p&gt;欢迎你将自己使用的配置制作模板，提交 PR。&lt;/p&gt; &#xA;&lt;p&gt;模板应遵守以下标准：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;缩进使用 4 个空格&lt;/li&gt; &#xA; &lt;li&gt;方 (花) 括号不换行&lt;/li&gt; &#xA; &lt;li&gt;不需要的字段应该移除&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;log&lt;/code&gt; 部分只留 &lt;code&gt;loglevel&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;对于 &lt;code&gt;outbounds&lt;/code&gt;，客户端应有 &lt;code&gt;proxy&lt;/code&gt; 和 &lt;code&gt;direct&lt;/code&gt;，服务端应有 &lt;code&gt;direct&lt;/code&gt; 和 &lt;code&gt;block&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;除非是适用于特定场景的模板，否则应当将 &lt;code&gt;geoip:private&lt;/code&gt; 路由到 &lt;code&gt;direct&lt;/code&gt; 出站 (服务端配置路由到 &lt;code&gt;block&lt;/code&gt; 出站)&lt;/li&gt; &#xA; &lt;li&gt;除非是适用于特定场景的模板，否则配置文件中不应出现 DNS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uuid&lt;/code&gt; 应留空，由用户自行填写。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;routing&lt;/code&gt; 中的 &lt;code&gt;domainStrategy&lt;/code&gt; 保持默认，即 &lt;code&gt;AsIs&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;举例&lt;/h3&gt; &#xA;&lt;!-- 此处 yaml 仅用作语法高亮，实际内容为 json --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;{&#xA;    &#34;log&#34;: {&#xA;        &#34;loglevel&#34;: &#34;warning&#34;&#xA;    },&#xA;    &#34;routing&#34;: {},&#xA;    &#34;inbounds&#34;: [],&#xA;    &#34;outbounds&#34;: []&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;客户端&lt;/h3&gt; &#xA;&lt;!-- 此处 yaml 仅用作语法高亮，实际内容为 json --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;{&#xA;    &#34;log&#34;: {&#xA;        &#34;loglevel&#34;: &#34;warning&#34;&#xA;    },&#xA;    &#34;routing&#34;: {&#xA;        &#34;domainStrategy&#34;: &#34;AsIs&#34;,&#xA;        &#34;rules&#34;: [&#xA;            {&#xA;                &#34;ip&#34;: [&#xA;                    &#34;geoip:private&#34;&#xA;                ],&#xA;                &#34;outboundTag&#34;: &#34;direct&#34;,&#xA;                &#34;type&#34;: &#34;field&#34;&#xA;            }&#xA;        ]&#xA;    },&#xA;    &#34;inbounds&#34;: [&#xA;        {&#xA;            &#34;port&#34;: 1080,&#xA;            &#34;protocol&#34;: &#34;socks&#34;,&#xA;            &#34;settings&#34;: {&#xA;                &#34;auth&#34;: &#34;noauth&#34;,&#xA;                &#34;udp&#34;: true&#xA;            },&#xA;            &#34;tag&#34;: &#34;socks&#34;&#xA;        }&#xA;    ],&#xA;    &#34;outbounds&#34;: [&#xA;        {&#xA;            &#34;protocol&#34;: &#34;vmess&#34;,&#xA;            &#34;settings&#34;: {&#xA;                &#34;vnext&#34;: [&#xA;                    {&#xA;                        &#34;users&#34;: [&#xA;                            {&#xA;                                &#34;id&#34;: &#34;&#34;&#xA;                            }&#xA;                        ],&#xA;                        &#34;port&#34;: 1234,&#xA;                        &#34;address&#34;: &#34;Your_IP_Address&#34;&#xA;                    }&#xA;                ]&#xA;            }&#xA;        },&#xA;        {&#xA;            &#34;protocol&#34;: &#34;freedom&#34;,&#xA;            &#34;tag&#34;: &#34;direct&#34;&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;服务端&lt;/h3&gt; &#xA;&lt;!-- 此处 yaml 仅用作语法高亮，实际内容为 json --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;{&#xA;    &#34;log&#34;: {&#xA;        &#34;loglevel&#34;: &#34;warning&#34;&#xA;    },&#xA;    &#34;routing&#34;: {&#xA;        &#34;domainStrategy&#34;: &#34;AsIs&#34;,&#xA;        &#34;rules&#34;: [&#xA;            {&#xA;                &#34;ip&#34;: [&#xA;                    &#34;geoip:private&#34;&#xA;                ],&#xA;                &#34;outboundTag&#34;: &#34;blocked&#34;,&#xA;                &#34;type&#34;: &#34;field&#34;&#xA;            }&#xA;        ]&#xA;    },&#xA;    &#34;inbounds&#34;: [&#xA;        {&#xA;            &#34;port&#34;: 1234,&#xA;            &#34;protocol&#34;: &#34;vmess&#34;,&#xA;            &#34;settings&#34;: {&#xA;                &#34;clients&#34;: [&#xA;                    {&#xA;                        &#34;id&#34;: &#34;&#34;,&#xA;                    }&#xA;                ]&#xA;            }&#xA;        }&#xA;    ],&#xA;    &#34;outbounds&#34;: [&#xA;        {&#xA;            &#34;protocol&#34;: &#34;freedom&#34;&#xA;        },&#xA;        {&#xA;            &#34;protocol&#34;: &#34;blackhole&#34;,&#xA;            &#34;tag&#34;: &#34;blocked&#34;&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;如何选取适合自己的配置：&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/v2fly/v2ray-examples/master/how-to-choose/how-to-choose-a-v2ray-plan.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;附加说明：&lt;br&gt; 尽管 Websocket+TLS+Web 可能称得上是现阶段最好的方案，但&lt;strong&gt;绝对&lt;/strong&gt;不是推荐新手一上来就尝试的方案，更不是 V2Ray 唯一的用法。&lt;br&gt; 同时，你应当了解，每个地区的网络状况不同 (主要指对不同协议的 QoS 程度)，你可以将所有配置都尝试一遍来寻找最适合自己的，尽量少问、最好不问“为什么我的 V2Ray 这么慢？”这样的问题。&lt;/p&gt; &#xA;&lt;h2&gt;最后&lt;/h2&gt; &#xA;&lt;p&gt;祝你玩的愉快！&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/react-hooks-information-flow-code-along</title>
    <updated>2022-07-17T01:37:52Z</updated>
    <id>tag:github.com,2022-07-17:/learn-co-curriculum/react-hooks-information-flow-code-along</id>
    <link href="https://github.com/learn-co-curriculum/react-hooks-information-flow-code-along" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Information Flow&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understand the flow of information between components with props&lt;/li&gt; &#xA; &lt;li&gt;Use callback functions as props to update state in a parent component&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In this lesson, we&#39;ll explore how to pass callback functions as props in order to change state in a parent component.&lt;/p&gt; &#xA;&lt;h2&gt;How Does Information Flow Between Components?&lt;/h2&gt; &#xA;&lt;p&gt;We already know how to use props to pass information &lt;em&gt;down&lt;/em&gt; from parent to child. But how would we do the reverse? How might we have a &lt;strong&gt;child&lt;/strong&gt; component send data &lt;em&gt;up&lt;/em&gt; to its &lt;strong&gt;parent&lt;/strong&gt; component?&lt;/p&gt; &#xA;&lt;p&gt;In order to propagate information in the opposite direction, we can send a &lt;strong&gt;callback function as props&lt;/strong&gt; from the parent component to its child.&lt;/p&gt; &#xA;&lt;p&gt;This allows the callback to be &lt;em&gt;owned&lt;/em&gt; by a different component than the one invoking it. Once invoked, the callback can send data to or change state in the parent component that &lt;em&gt;owns&lt;/em&gt; it, instead of the child component that &lt;em&gt;invoked&lt;/em&gt; it.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Assuming you&#39;ve pulled down the starter code and ran &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;npm start&lt;/code&gt;, you should see a few rectangles in your browser. The large outer rectangle will be a random color every time you refresh the page, but the two smaller rectangles inside will always have a white background.&lt;/p&gt; &#xA;&lt;p&gt;Take a moment to familiarize yourself with the code base. We have a simple application that renders a single &lt;code&gt;Parent&lt;/code&gt; component and two &lt;code&gt;Child&lt;/code&gt; components. The component hierarchy is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;App&#xA;└───Parent&#xA;    ├───Child&#xA;    └───Child&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deliverables Part 1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When either &lt;code&gt;Child&lt;/code&gt; component is clicked, the &lt;code&gt;Parent&lt;/code&gt; component should change color.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;src/randomColorGenerator.js&lt;/code&gt; has a helper function &lt;code&gt;getRandomColor()&lt;/code&gt; implemented for you that generates a random color.&lt;/p&gt; &#xA;&lt;h3&gt;Changing the color of Parent&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Parent&lt;/code&gt; component has a state variable called &lt;code&gt;color&lt;/code&gt; that is initially set to a random color. To update state, we&#39;ll create a simple &lt;code&gt;handleChangeColor&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Parent() {&#xA;  const randomColor = getRandomColor();&#xA;  const [color, setColor] = useState(randomColor); // initial value for color state&#xA;&#xA;  function handleChangeColor() {&#xA;    const newRandomColor = getRandomColor();&#xA;    setColor(newRandomColor); // update color state to a new value&#xA;  }&#xA;&#xA;  return (&#xA;    &amp;lt;div className=&#34;parent&#34; style={{ backgroundColor: color }}&amp;gt;&#xA;      &amp;lt;Child /&amp;gt;&#xA;      &amp;lt;Child /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But we are going to want to run this &lt;code&gt;handleChangeColor()&lt;/code&gt; function when either &lt;code&gt;Child&lt;/code&gt; component is clicked. So we are going to pass this state changing function &lt;em&gt;as a prop&lt;/em&gt; to both &lt;code&gt;Child&lt;/code&gt; components.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;return (&#xA;  &amp;lt;div className=&#34;parent&#34; style={{ backgroundColor: color }}&amp;gt;&#xA;    &amp;lt;Child onChangeColor={handleChangeColor} /&amp;gt;&#xA;    &amp;lt;Child onChangeColor={handleChangeColor} /&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, &lt;code&gt;Child&lt;/code&gt; will have a prop called &lt;code&gt;onChangeColor&lt;/code&gt; that is a &lt;em&gt;function&lt;/em&gt;. Specifically, it is the same function object as our &lt;code&gt;Parent&lt;/code&gt;&#39;s &lt;code&gt;handleChangeColor&lt;/code&gt; function. Want to see for yourself? Put a &lt;code&gt;console.log&lt;/code&gt; inside the &lt;code&gt;Child&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Child({ onChangeColor }) {&#xA;  console.log(onChangeColor);&#xA;  return &amp;lt;div className=&#34;child&#34; style={{ backgroundColor: &#34;#FFF&#34; }} /&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can now use this &lt;code&gt;onChangeColor&lt;/code&gt; prop as an event handler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;console.log(onChangeColor);&#xA;return (&#xA;  &amp;lt;div&#xA;    onClick={onChangeColor}&#xA;    className=&#34;child&#34;&#xA;    style={{ backgroundColor: &#34;#FFF&#34; }}&#xA;  /&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And ta-da! Now, if you go to the app, clicking on &lt;em&gt;either&lt;/em&gt; of the white rectangle &lt;code&gt;Child&lt;/code&gt; components will cause the &lt;code&gt;Parent&lt;/code&gt; component to change color.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s walk though those steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When the &lt;code&gt;div&lt;/code&gt; in the &lt;code&gt;Child&lt;/code&gt; component is clicked, it will use the &lt;code&gt;onChangeColor&lt;/code&gt; variable to determine what function to run&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;onChangeColor&lt;/code&gt; is a prop that is passed down from the &lt;code&gt;Parent&lt;/code&gt; component, which references the &lt;code&gt;handleChangeColor&lt;/code&gt; function&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;handleChangeColor&lt;/code&gt; function is the function that will actually run when the &lt;code&gt;div&lt;/code&gt; is clicked, and will update state in the &lt;code&gt;Parent&lt;/code&gt; component&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now, let&#39;s add one more feature!&lt;/p&gt; &#xA;&lt;h2&gt;Deliverables Part 2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When either &lt;code&gt;Child&lt;/code&gt; component is clicked, it should change its own background color to a random color, and the other &lt;code&gt;Child&lt;/code&gt; component should change to &lt;em&gt;that same&lt;/em&gt; color.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now, we could put some state in our &lt;code&gt;Child&lt;/code&gt; component to keep track of its color. However:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sibling components cannot pass data to each other directly&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data can only flow up and down between parent and child&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So if we update the color of one &lt;code&gt;Child&lt;/code&gt; component, we have no way to pass that data to the &lt;em&gt;other&lt;/em&gt; &lt;code&gt;Child&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;p&gt;The solution is to store the color of the &lt;code&gt;Child&lt;/code&gt; in the state of the &lt;code&gt;Parent&lt;/code&gt; component. Then, we let the &lt;code&gt;Parent&lt;/code&gt; component handle the passing of that data to each of its children components. We&#39;ll start by creating a variable to keep track of the color of the &lt;code&gt;Child&lt;/code&gt; components using state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Parent() {&#xA;  const randomColor = getRandomColor();&#xA;  const [color, setColor] = useState(randomColor);&#xA;  const [childrenColor, setChildrenColor] = useState(&#34;#FFF&#34;);&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the data that represents the color of the two &lt;code&gt;Child&lt;/code&gt; components lives in &lt;code&gt;Parent&lt;/code&gt;, we should pass that data down as props:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;return (&#xA;  &amp;lt;div className=&#34;parent&#34; style={{ backgroundColor: color }}&amp;gt;&#xA;    &amp;lt;Child color={childrenColor} onChangeColor={handleChangeColor} /&amp;gt;&#xA;    &amp;lt;Child color={childrenColor} onChangeColor={handleChangeColor} /&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now let&#39;s actually use that props data in the &lt;code&gt;Child&lt;/code&gt; component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Child({ onChangeColor, color }) {&#xA;  return (&#xA;    &amp;lt;div&#xA;      onClick={onChangeColor}&#xA;      className=&#34;child&#34;&#xA;      style={{ backgroundColor: color }}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lastly, we have to update the &lt;code&gt;handleChangeColor()&lt;/code&gt; function in &lt;code&gt;Parent&lt;/code&gt; to change not just the &lt;code&gt;color&lt;/code&gt; state, but also the &lt;code&gt;childrenColor&lt;/code&gt;. To practice sending data &lt;em&gt;back&lt;/em&gt; to the parent, let&#39;s change our &lt;code&gt;handleChangeColor&lt;/code&gt; to take in an argument of &lt;code&gt;newChildColor&lt;/code&gt; and then use that variable to update the state of the &lt;code&gt;Child&lt;/code&gt; component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function handleChangeColor(newChildColor) {&#xA;  const newRandomColor = getRandomColor();&#xA;  setColor(newRandomColor);&#xA;  setChildrenColor(newChildColor);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that the function takes in an argument, we can create a new function in our &lt;code&gt;Child&lt;/code&gt; component that invokes &lt;code&gt;onChangeColor&lt;/code&gt; and passes in a random color as the argument; we also need to update the component&#39;s &lt;code&gt;onClick&lt;/code&gt; callback to be that new function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Child({ onChangeColor, color }) {&#xA;  function handleClick() {&#xA;    const newColor = getRandomColor();&#xA;    onChangeColor(newColor);&#xA;  }&#xA;&#xA;  return (&#xA;    &amp;lt;div&#xA;      onClick={handleClick}&#xA;      className=&#34;child&#34;&#xA;      style={{ backgroundColor: color }}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wow! Check out the finished product in the browser! When either &lt;code&gt;Child&lt;/code&gt; component is clicked, the &lt;code&gt;Parent&lt;/code&gt; changes to a random color, and both &lt;code&gt;Child&lt;/code&gt; components change to a different random color.&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;For information to propagate &lt;strong&gt;down&lt;/strong&gt; the component tree, parents pass &lt;code&gt;props&lt;/code&gt; to their children.&lt;/p&gt; &#xA;&lt;p&gt;For information to propagate &lt;strong&gt;up&lt;/strong&gt; the component tree, we must invoke &lt;strong&gt;callbacks&lt;/strong&gt; that were passed from parents to children as &lt;code&gt;props&lt;/code&gt;. When invoking the callback, we can pass any needed values from the child component to the parent component as arguments.&lt;/p&gt; &#xA;&lt;p&gt;Components of the same level (sibling components) cannot communicate directly! We can only communicate up and down the component tree. So if multiple components need to share the same information, that state should live in the parent component (or a more general ancestor).&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/lifting-state-up.html&#34;&gt;Lifting State Up&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>