<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-19T01:26:55Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>itscodenation/flw1-u4l2-23-24-student-exercises</title>
    <updated>2024-04-19T01:26:55Z</updated>
    <id>tag:github.com,2024-04-19:/itscodenation/flw1-u4l2-23-24-student-exercises</id>
    <link href="https://github.com/itscodenation/flw1-u4l2-23-24-student-exercises" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lesson 4.1 - API&lt;/h1&gt; &#xA;&lt;p&gt;An &lt;strong&gt;API (Application Programming Interface)&lt;/strong&gt; acts as a bridge that allows different applications to communicate and share data. It simplifies the process of connecting different software components and systems.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Why APIs?&lt;/strong&gt; Imagine your favorite weather app. It needs weather data to function, right? This data is often obtained from a weather API that provides updated information from around the world.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Understanding How APIs Work&lt;/h2&gt; &#xA;&lt;p&gt;Think of an API as a restaurant menu. The menu lists various dishes you can order, just like an API provides a list of data or functionalities you can request.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sending a Request:&lt;/strong&gt; When you order a dish, the kitchen prepares it. Similarly, when you send a request to an API, the system behind the API processes this request.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Receiving a Response:&lt;/strong&gt; Once the dish is ready, it&#39;s served to you. Likewise, the API sends back data (the response) after processing your request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API Syntax and Fetching Data&lt;/h2&gt; &#xA;&lt;p&gt;To use an API in your application, you&#39;ll typically start by &#34;fetching&#34; the API&#39;s data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;fetch(url)&#xA;  .then(response =&amp;gt; response.json()) // Converts response to JSON&#xA;  .then(data =&amp;gt; {&#xA;    console.log(data); // Here you can handle the data&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Important Concepts:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fetching a URL:&lt;/strong&gt; This can be done inside or outside of a function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;.then Method:&lt;/strong&gt; Used in JavaScript primarily for API calls to handle the data after fetching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JSON (JavaScript Object Notation):&lt;/strong&gt; A format for structuring data, made up of objects and arrays.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Creating Your Own Database&lt;/h2&gt; &#xA;&lt;p&gt;While there are many free APIs available, you might not find one that perfectly fits your project. The good news is you can create your own &lt;code&gt;db.json&lt;/code&gt; file with the data you need, and fetch data from it in the same way you would with an external API.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Happy Coding! 😊&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheBridge-FullStackDeveloper/front-join</title>
    <updated>2024-04-19T01:26:55Z</updated>
    <id>tag:github.com,2024-04-19:/TheBridge-FullStackDeveloper/front-join</id>
    <link href="https://github.com/TheBridge-FullStackDeveloper/front-join" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React + nodeJS&lt;/h1&gt; &#xA;&lt;h2&gt;Pasos a seguir&lt;/h2&gt; &#xA;&lt;p&gt;Antes de empezar con la clase tienes que tener en cuentas lo siguiente:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clona primero este repositorio. Este repositorio será nuestro BACK&lt;/li&gt; &#xA; &lt;li&gt;Crea un archivo &lt;code&gt;.env&lt;/code&gt;donde introducirás tu &lt;code&gt;PORT&lt;/code&gt; y &lt;code&gt;MONGO_URI&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Instala las dependencias&lt;/li&gt; &#xA; &lt;li&gt;Levanta el servidor. Estará en &lt;a href=&#34;http://localhost:3000/&#34;&gt;localhost:3000&lt;/a&gt;. Si tienes otro servicio levantado en ese puerto cámbialo.&lt;/li&gt; &#xA; &lt;li&gt;npm start para levantar el servicio.&lt;/li&gt; &#xA; &lt;li&gt;Ve a &lt;code&gt;POSTMAN&lt;/code&gt; u otro servicio que se puedan hacer peticiones POST, GET, DELETE, PUT...&lt;/li&gt; &#xA; &lt;li&gt;Usa el método POST en &lt;a href=&#34;http://localhost:3000/create&#34;&gt;http://localhost:3000/create&lt;/a&gt; para crear tareas. El modelo es sencillo, usa algo así en el &lt;code&gt;body&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;    &#34;title&#34;: &#34;Aprender JS&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Crea varias con diferentes títulos y así poder verlas y trabajar con ellas (3 o 4 están bien).&lt;/p&gt; &#xA;&lt;p&gt;Deja levantado el back para poder acceder a él desde POSTMAN y REACT&lt;/p&gt; &#xA;&lt;h3&gt;FRONT:&lt;/h3&gt; &#xA;&lt;p&gt;Sigue los pasos del vídeo&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RelicInc/react-todo-app-training</title>
    <updated>2024-04-19T01:26:55Z</updated>
    <id>tag:github.com,2024-04-19:/RelicInc/react-todo-app-training</id>
    <link href="https://github.com/RelicInc/react-todo-app-training" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;環境構築&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;以下のコマンドを順に実行してください&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;npm install&#xA;docker-compose exec app npx prisma migrate dev&#xA;docker-compose exec app npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; にアクセスしてください&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;※特にサーバーサイド・DB まわりのコマンドは docker 上で実行しないと正しく動作しないので注意してください&lt;/p&gt; &#xA;&lt;h2&gt;API の動作テスト用 curl コマンド&lt;/h2&gt; &#xA;&lt;h3&gt;GET 系&lt;/h3&gt; &#xA;&lt;p&gt;ブラウザで URL を叩いてください&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;全件取得: &lt;a href=&#34;http://localhost:3000/api/todo&#34;&gt;http://localhost:3000/api/todo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;一件取得: &lt;a href=&#34;http://localhost:3000/api/todo/1&#34;&gt;http://localhost:3000/api/todo/1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GET 以外&lt;/h3&gt; &#xA;&lt;p&gt;terminal から curl コマンドを叩いてください。 data の中身や URL の id 部分を変えることでリクエストの内容を変更できます&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# CREATE&#xA;curl -XPOST -H &#34;Content-type: application/json&#34; -d &#39;{&#34;value&#34;: &#34;POST TEST&#34;}&#39; &#39;http://localhost:3000/api/todo&#39;&#xA;&#xA; # UPDATE&#xA;curl -XPUT -H &#34;Content-type: application/json&#34; -d &#39;{&#34;value&#34;: &#34;UPDATE TEST&#34;, &#34;status&#34;: &#34;DONE&#34;}&#39; &#39;http://localhost:3000/api/todo/1&#39;&#xA;&#xA; # DELETE&#xA;curl -XDELETE &#39;http://localhost:3000/api/todo/1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DB を GUI で確認・CRUD 操作したい時&lt;/h2&gt; &#xA;&lt;p&gt;terminal で以下コマンドを実行し、 &lt;a href=&#34;http://localhost:5555&#34;&gt;http://localhost:5555&lt;/a&gt; にアクセスしてください&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose exec app npx prisma studio&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>