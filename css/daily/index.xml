<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-25T01:27:19Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MilanBhanuka/Sample_Codes</title>
    <updated>2023-10-25T01:27:19Z</updated>
    <id>tag:github.com,2023-10-25:/MilanBhanuka/Sample_Codes</id>
    <link href="https://github.com/MilanBhanuka/Sample_Codes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HACKTOBERFEST2023&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>tictail/bounce.js</title>
    <updated>2023-10-25T01:27:19Z</updated>
    <id>tag:github.com,2023-10-25:/tictail/bounce.js</id>
    <link href="https://github.com/tictail/bounce.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create beautiful CSS3 powered animations in no time.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bounce.js&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://bouncejs.com&#34;&gt;Bounce.js&lt;/a&gt; is a tool and JS library for generating beautiful CSS3 powered keyframe animations. The tool on &lt;a href=&#34;http://bouncejs.com&#34;&gt;bouncejs.com&lt;/a&gt; allows you to generate static keyframes that can be used without any extra JavaScript, but if you&#39;d like your application to generate these on the fly, you can use the Bounce.js library.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The library is available to install from Bower or NPM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bower install bounce.js &#xA;# OR&#xA;$ npm install bounce.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also view and download all releases &lt;a href=&#34;https://github.com/tictail/bounce.js/releases&#34;&gt;from here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To create an animation, instantiate a new &lt;code&gt;Bounce&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var bounce = new Bounce();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Bounce&lt;/code&gt; object is what you&#39;ll use to first build your animation from the different components &lt;code&gt;scale&lt;/code&gt;, &lt;code&gt;rotate&lt;/code&gt;, &lt;code&gt;translate&lt;/code&gt; and &lt;code&gt;skew&lt;/code&gt;. This can then either be defined as a named animation for later use, or directly applied to elements on the page.&lt;/p&gt; &#xA;&lt;h3&gt;Adding Animation Components&lt;/h3&gt; &#xA;&lt;p&gt;As mentioned above, you&#39;ll use the &lt;code&gt;scale&lt;/code&gt;, &lt;code&gt;rotate&lt;/code&gt;, &lt;code&gt;translate&lt;/code&gt; and &lt;code&gt;skew&lt;/code&gt; methods to build your animation, just like with the Bounce.js tool. All of these methods accept a number of common options (explained further down) and &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; parameters that define the start and end points of the animation. Note that all of these methods are chainable.&lt;/p&gt; &#xA;&lt;h4&gt;scale&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;var bounce = new Bounce();&#xA;bounce.scale({&#xA;  from: { x: 0.5, y: 0.5 },&#xA;  to: { x: 1, y: 1 }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; parameters define the scale of the element on X (width) and Y (height) as a ratio. The example above animates the element from half size to full. (&lt;a href=&#34;http://goo.gl/W7f9he&#34;&gt;See it in action&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;rotate&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;var bounce = new Bounce();&#xA;bounce.rotate({&#xA;  from: 0,&#xA;  to: 90&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; parameters define the rotation of the element in degrees. The example above animates the element a quarter rotation to the right. (&lt;a href=&#34;http://goo.gl/WWyopK&#34;&gt;See it in action&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;translate&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;var bounce = new Bounce();&#xA;bounce.translate({&#xA;  from: { x: 0, y: 0 },&#xA;  to: { x: 100, y: 0 }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; parameters define the translation (position) of the element on X and Y in pixels. The example above animates the element 100 pixels to the right. (&lt;a href=&#34;http://goo.gl/lVeiKO&#34;&gt;See it in action&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;skew&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;var bounce = new Bounce();&#xA;bounce.skew({&#xA;  from: { x: 0, y: 0 },&#xA;  to: { x: 20, y: 0 }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; parameters define the skew of the element on X and Y in degrees. The example above animates the skew of the element 20 degrees on the horizontal axis. (&lt;a href=&#34;http://goo.gl/lQ5YPZ&#34;&gt;See it in action&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Common Animation Parameters&lt;/h4&gt; &#xA;&lt;p&gt;All of the above methods accept these additional parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;duration&lt;/strong&gt;: The duration of the animation in ms. &lt;em&gt;Defaults to 1000&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;delay&lt;/strong&gt;: The delay of the animation in ms. &lt;em&gt;Defaults to 0&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;easing&lt;/strong&gt;: One of &lt;code&gt;&#34;bounce&#34;&lt;/code&gt;, &lt;code&gt;&#34;sway&#34;&lt;/code&gt;, &lt;code&gt;&#34;hardbounce&#34;&lt;/code&gt;, &lt;code&gt;&#34;hardsway&#34;&lt;/code&gt;. These are the same as in the &#34;Easing&#34; menu in the tool. &lt;em&gt;Defaults to &#34;bounce&#34;&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;bounces&lt;/strong&gt;: The number of bounces in the animation. &lt;em&gt;Defaults to 4&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;stiffness&lt;/strong&gt;: The stiffness of the bounces in the animation, should be a value between 1 and 5. &lt;em&gt;Defaults to 3&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using the Animation&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve built your animation, you can either choose to define it as a named keyframe animation, or directly apply it to any element in the DOM.&lt;/p&gt; &#xA;&lt;h4&gt;define&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;var bounce = new Bounce();&#xA;bounce.rotate({&#xA;  from: 0,&#xA;  to: 90&#xA;});&#xA;bounce.define(&#34;my-animation&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Defines an animation with the given name. The animation can then be used in your CSS with &lt;code&gt;animation: my-animation 1s linear both;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;applyTo&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;var bounce = new Bounce();&#xA;bounce.rotate({&#xA;  from: 0,&#xA;  to: 90&#xA;});&#xA;bounce.applyTo(document.querySelectorAll(&#34;.animation-target&#34;));&#xA;// or with jQuery: bounce.applyTo($(&#34;.animation-target&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Directly applies the animation to a single or a list of elements. This method also accepts a number of options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;loop&lt;/strong&gt;: Loops the animation infinitely if set to &lt;code&gt;true&lt;/code&gt;. &lt;em&gt;Defaults to false.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;remove&lt;/strong&gt;: Removes the animation once it is complete. If your animation ends in a state different from what the element had before, the element will return to its original state &lt;strong&gt;in some browsers&lt;/strong&gt;. &lt;em&gt;Defaults to false&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;onComplete&lt;/strong&gt;: A callback function to be run after the animation is complete.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re using jQuery, the method will return a promise to be used instead of the &lt;code&gt;onComplete&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bounce.applyTo($(&#34;.animation-target&#34;)).then(function() { &#xA;  console.log(&#34;Animation Complete&#34;); &#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Remove&lt;/h4&gt; &#xA;&lt;p&gt;An animation can also manually be removed once it has been defined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bounce.remove()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Browser Support&lt;/h3&gt; &#xA;&lt;p&gt;You can check for support in the current browser with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Bounce.isSupported()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The library should work in all browser that support both &lt;a href=&#34;http://caniuse.com/#feat=transforms3d&#34;&gt;3D transforms&lt;/a&gt; and &lt;a href=&#34;http://caniuse.com/#feat=transforms3d&#34;&gt;keyframe animations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Full Example&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s a full example of building the &lt;a href=&#34;http://goo.gl/et2XBk&#34;&gt;Splat animation preset&lt;/a&gt; in the tool and applying it to an element with class &lt;code&gt;animation-target&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var bounce = new Bounce();&#xA;bounce&#xA;  .translate({&#xA;    from: { x: -300, y: 0 },&#xA;    to: { x: 0, y: 0 },&#xA;    duration: 600,&#xA;    stiffness: 4&#xA;  })&#xA;  .scale({&#xA;    from: { x: 1, y: 1 },&#xA;    to: { x: 0.1, y: 2.3 },&#xA;    easing: &#34;sway&#34;,&#xA;    duration: 800,&#xA;    delay: 65,&#xA;    stiffness: 2&#xA;  })&#xA;  .scale({&#xA;    from: { x: 1, y: 1},&#xA;    to: { x: 5, y: 1 },&#xA;    easing: &#34;sway&#34;,&#xA;    duration: 300,&#xA;    delay: 30,&#xA;  })&#xA;  .applyTo(document.querySelectorAll(&#34;.animation-target&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to run the Bounce.js site locally, and edit the JavaScript library, you can do so by cloning this repo and running the following commands (assuming that you have Node, NPM and Bower installed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Install dependencies&#xA;$ npm install&#xA;$ bower install&#xA;&#xA;# Start the server on localhost:9000. Watches for changes, automatically recompiles files and refreshes the browser.&#xA;$ grunt serve &#xA;&#xA;# Run the tests&#xA;$ grunt test&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Azure-Samples/azure-sql-db-session-recommender</title>
    <updated>2023-10-25T01:27:19Z</updated>
    <id>tag:github.com,2023-10-25:/Azure-Samples/azure-sql-db-session-recommender</id>
    <link href="https://github.com/Azure-Samples/azure-sql-db-session-recommender" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build a recommender using OpenAI, Azure Functions, Azure Static Web Apps, Azure SQL DB, Data API builder and Text Embeddings&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;p&gt;page_type: sample languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;csharp&lt;/li&gt; &#xA; &lt;li&gt;sql&lt;/li&gt; &#xA; &lt;li&gt;tsql products:&lt;/li&gt; &#xA; &lt;li&gt;azure-functions&lt;/li&gt; &#xA; &lt;li&gt;azure-sql-database&lt;/li&gt; &#xA; &lt;li&gt;static-web-apps&lt;/li&gt; &#xA; &lt;li&gt;sql-server&lt;/li&gt; &#xA; &lt;li&gt;azure-sql-managed-instance&lt;/li&gt; &#xA; &lt;li&gt;azure-sqlserver-vm&lt;/li&gt; &#xA; &lt;li&gt;dotnet&lt;/li&gt; &#xA; &lt;li&gt;azure-openai name: Session Recommender using Azure SQL DB, Open AI and Vector Search description: Build a session recommender using Jamstack and Event-Driven architecture, using Azure SQL DB to store and search vectors embeddings generated using OpenAI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Session Recommender Sample&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/azure-sql-db-session-recommender/main/_docs/session-recommender-architecture.png&#34; alt=&#34;Architecture Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A session recommender built using&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/static-web-apps/overview&#34;&gt;Azure Static Web Apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/&#34;&gt;Azure OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/functions-overview?pivots=programming-language-csharp&#34;&gt;Azure Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlservercentral.com/articles/the-sql-developer-experience-beyond-rdbms&#34;&gt;Azure SQL Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/dab&#34;&gt;Data API builder&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details on the solution check also the following articles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.to/azure/how-i-built-a-session-recommender-in-1-hour-using-open-ai-5419&#34;&gt;How I built a session recommender in 1 hour using Open AI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/azure-sql/vector-similarity-search-with-azure-sql-database-and-openai/&#34;&gt;Vector Similarity Search with Azure SQL database and OpenAI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have &lt;a href=&#34;https://learn.microsoft.com/en-us/cli/azure/&#34;&gt;AZ CLI installed&lt;/a&gt;. It is also recommeneded to use VS Code with the Azure Functions extension installed.&lt;/p&gt; &#xA;&lt;h3&gt;Create the resource group&lt;/h3&gt; &#xA;&lt;p&gt;Create a new resource group using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;az group create -g &amp;lt;your-resource-group-name&amp;gt; -l &amp;lt;location&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create the Azure OpenAI service&lt;/h3&gt; &#xA;&lt;p&gt;Create a new &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/create-resource?pivots=cli&#34;&gt;Azure OpenAI service&lt;/a&gt; in the resource group created in the previous step using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;az cognitiveservices account create --name &amp;lt;your-openai-name&amp;gt; --resource-group &amp;lt;your-resource-group-name&amp;gt; --kind OpenAI --sku s0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#embeddings-models&#34;&gt;embedding model&lt;/a&gt; using the &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/create-resource?pivots=web-portal&#34;&gt;Azure OpenAI&lt;/a&gt; and name it &lt;code&gt;embeddings&lt;/code&gt;. Make sure to use the &lt;code&gt;text-embedding-ada-002&lt;/code&gt; mode. Once the resource is created, create a &lt;code&gt;azuredeploy.parameters.json&lt;/code&gt; file using the provided sample file and add the API key and the API url. If you want to also test everything locally, also create a &lt;code&gt;.env&lt;/code&gt; file from the provided sample and add the API key and url also there.&lt;/p&gt; &#xA;&lt;h3&gt;Deploy the solution&lt;/h3&gt; &#xA;&lt;p&gt;Fork this repository and then clone the forked respository locally.&lt;/p&gt; &#xA;&lt;h4&gt;Deploy the database&lt;/h4&gt; &#xA;&lt;p&gt;Create an new &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-sql/database/single-database-create-quickstart?view=azuresql&amp;amp;tabs=azure-portal&#34;&gt;Azure SQL database&lt;/a&gt;, then run the &lt;code&gt;./database/setup-database.sql&lt;/code&gt; script to set up the database.&lt;/p&gt; &#xA;&lt;p&gt;It is recommened to use Azure Data Studio to run the script. Make sure that the &lt;code&gt;SQLCMD&lt;/code&gt; mode is enabled. To enable &lt;code&gt;SQLCMD&lt;/code&gt; mode, click on the &lt;code&gt;SQLCMD&lt;/code&gt; button in the toolbar.&lt;/p&gt; &#xA;&lt;p&gt;Before running the script set the values for the SQLCMD variable on top of the script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:setvar OpenAIUrl https://&amp;lt;your-openai-service&amp;gt;.openai.azure.com&#xA;:setvar OpenAIKey &amp;lt;your-key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;using the value from the OpenAI service created in the previous step.&lt;/p&gt; &#xA;&lt;p&gt;Then run the script to create the database objects.&lt;/p&gt; &#xA;&lt;h4&gt;Deploy Static Web App and Azure Function&lt;/h4&gt; &#xA;&lt;p&gt;Replace the placeholders values in the &lt;code&gt;azuredeploy.parameters.json&lt;/code&gt; file with the correct values for your environment. Follow the documentation here: &lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens&#34;&gt;Managing your personal access tokens&lt;/a&gt; to get the GitHub token needed to deploy the Static Web App. Make sure the token created is a &#34;classic&#34; token that has access to the following scopes: &lt;strong&gt;repo, workflow, write:packages&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then run the following command to create the resources in Azure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;az deployment group create --resource-group &amp;lt;your-resource-group-name&amp;gt; --template-file main.bicep --parameters azuredeploy.parameters.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The deployment process will create&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Static Web App&lt;/li&gt; &#xA; &lt;li&gt;Function&lt;/li&gt; &#xA; &lt;li&gt;Storage Account&lt;/li&gt; &#xA; &lt;li&gt;Application Insight&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The deployment process will also automatically deploy the code of the referenced repository intpo the created Static Web App.&lt;/p&gt; &#xA;&lt;h4&gt;Configure the Static Web App&lt;/h4&gt; &#xA;&lt;p&gt;Now that the Static Web App has been deployed, it needs to be linked the Static Web App to the created database using the &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/static-web-apps/database-overview&#34;&gt;Database Connections&lt;/a&gt; feature. Follow the instructions in the &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/static-web-apps/database-configuration#configure-database-connectivity&#34;&gt;Configure database connectivity&lt;/a&gt; to configure the database connection.&lt;/p&gt; &#xA;&lt;h4&gt;Deploy the Azure Function&lt;/h4&gt; &#xA;&lt;p&gt;To upload the Azure Function code to Azure it is recommeded to use Visual Studio Code, and the &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/functions-develop-vs-code?tabs=node-v3%2Cpython-v2%2Cisolated-process&amp;amp;pivots=programming-language-csharp&#34;&gt;Azure Function extension&lt;/a&gt;: right click on the &lt;code&gt;/func&lt;/code&gt; folder, select &#34;Deploy to Function App&#34; and then select the function app that has was created in &#39;Deploy Static Web App and Azure Function&#39; step.&lt;/p&gt; &#xA;&lt;p&gt;Another option is to use AZ CLI. First build the function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd func&#xA;dotnet publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then compress the content of the &lt;code&gt;publish&lt;/code&gt; folder (sample for PowerShell):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Compress-Archive .\bin\Debug\net6.0\publish\* SessionProcessor.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the depoy it via AZ CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;az functionapp deploy --clean true --src-path .\SessionProcessor.zip -g &amp;lt;resource-group&amp;gt; -n &amp;lt;function-app-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Azure function must be deployed as a stand-alone resource and cannot be deployed as a managed function within the Static Web App. Static Web Apps managed functions only support HTTP triggers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Test the solution&lt;/h3&gt; &#xA;&lt;p&gt;Add a new row to the &lt;code&gt;Sessions&lt;/code&gt; table using the following SQL statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;insert into web.sessions &#xA;    (title, abstract)&#xA;values&#xA;    (&#39;Building a session recommender using OpenAI and Azure SQL&#39;, &#39;In this fun and demo-driven session you’ll learn how to integrate Azure SQL with OpenAI to generate text embeddings, store them in the database, index them and calculate cosine distance to build a session recommender. And once that is done, you’ll publish it as a REST and GraphQL API to be consumed by a modern JavaScript frontend. Sounds pretty cool, uh? Well, it is!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;immediately the deployed Azure Function will get executed in response to the &lt;code&gt;INSERT&lt;/code&gt; statement. The Azure Function will call the OpenAI service to generate the text embedding for the session title and abstract, and then store the embedding in the database, specifically in the &lt;code&gt;web.session_abstract_embeddings&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from web.session_abstract_embeddings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now open the URL associated with the created Static Web App to see the session recommender in action. You can get the URL from the Static Web App overview page in the Azure portal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/azure-sql-db-session-recommender/main/_docs/session-recommender.png&#34; alt=&#34;Website running&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Run the solution locally&lt;/h3&gt; &#xA;&lt;p&gt;The whole solution can be executed locally, using &lt;a href=&#34;https://github.com/Azure/static-web-apps-cli&#34;&gt;Static Web App CLI&lt;/a&gt; and &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=windows%2Cisolated-process%2Cnode-v4%2Cpython-v2%2Chttp-trigger%2Ccontainer-apps&amp;amp;pivots=programming-language-csharp&#34;&gt;Azure Function CLI&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>