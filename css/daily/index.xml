<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-05T01:29:13Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Gkilgore/7_Computed_Properties</title>
    <updated>2024-05-05T01:29:13Z</updated>
    <id>tag:github.com,2024-05-05:/Gkilgore/7_Computed_Properties</id>
    <link href="https://github.com/Gkilgore/7_Computed_Properties" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>lelandrichardson/knockout-paged</title>
    <updated>2024-05-05T01:29:13Z</updated>
    <id>tag:github.com,2024-05-05:/lelandrichardson/knockout-paged</id>
    <link href="https://github.com/lelandrichardson/knockout-paged" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Knockout Extension/Plugin for common paged-data scenarios&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#Knockout-Paged.js : A Knockout Paging Plugin&lt;/p&gt; &#xA;&lt;p&gt;##How does it work?&lt;/p&gt; &#xA;&lt;p&gt;knockout-paged.js works by extending &lt;code&gt;ko.observableArray.fn&lt;/code&gt; to include an &lt;code&gt;asPaged&lt;/code&gt; method. This method, called as a method of an instantiated &lt;code&gt;ko.observableArray&lt;/code&gt;, returns the same observable array, except that it has a couple of additional propertied hanging off of it which can be used for paging. (Note: the underlying array is not modified at all)&lt;/p&gt; &#xA;&lt;p&gt;###What are the additional properties?&lt;/p&gt; &#xA;&lt;p&gt;The following properties are added to the instance of the observable array:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;current&lt;/code&gt; (&lt;em&gt;Type:&lt;/em&gt; &lt;code&gt;ko.observable(Number)&lt;/code&gt; ) &lt;br&gt; An observable of the current page number (starting from 1)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pagedItems&lt;/code&gt; (&lt;em&gt;Type:&lt;/em&gt; &lt;code&gt;ko.observableArray&lt;/code&gt; ) &lt;br&gt; An observable array containing only the items of the current page. (ie, the &#34;paged items&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pageSize&lt;/code&gt; (&lt;em&gt;Type:&lt;/em&gt; &lt;code&gt;Number&lt;/code&gt; ) &lt;br&gt; The integer value of the page size (default is 10)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isLoading&lt;/code&gt; (&lt;em&gt;Type:&lt;/em&gt; &lt;code&gt;ko.observable(Boolean)&lt;/code&gt; ) &lt;br&gt; An observable indicating whether or not data is currently being retrieved from the server (only ever true for Ajaxified datasets)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;next&lt;/code&gt; (method) &lt;br&gt; If enabled, loads the next page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;previous&lt;/code&gt; (method) &lt;br&gt; If enabled, loads the previous page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;goToPage&lt;/code&gt; (method(&lt;code&gt;Number&lt;/code&gt;)) &lt;br&gt; Goes to the designated page. (Indexed starting at 1)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clearCache&lt;/code&gt; (method) &lt;br&gt; Clears the cache (for ajax-based pagination)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div&gt;&lt;/div&gt; &#xA;&lt;p&gt;The paged observable array can be created by using one of the three different method signatures:&lt;/p&gt; &#xA;&lt;p&gt;##How do I use it?&lt;/p&gt; &#xA;&lt;p&gt;###Page locally available data easily&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// data is already loaded on the client&#xA;.asPaged(Number pageSize) =&amp;gt; ko.observableArray (self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pageSize&lt;/code&gt; : A &lt;code&gt;Number&lt;/code&gt; (Integer expected) indicating the desired page size for the observable array&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt; : The &lt;code&gt;ko.observableArray&lt;/code&gt; instance that &lt;code&gt;.asPaged&lt;/code&gt; was called on, augmented with the paging methods&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var ExampleViewModel = function(){&#xA;    this.apples = ko.observableArray().asPaged(10);&#xA;    &#xA;    //... data can be loaded at any time&#xA;    this.apples.push({type: &#39;Jazz&#39;, state: &#39;Ripe&#39;});&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div&gt;&lt;/div&gt; &#xA;&lt;p&gt;###Page server-side dataset with Url Template&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// data is to be loaded via ajax, with a regular URL structure&#xA;.asPaged(Number pageSize, String templateUrl) =&amp;gt; ko.observableArray (self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pageSize&lt;/code&gt; : A &lt;code&gt;Number&lt;/code&gt; (Integer expected) indicating the desired page size for the observable array&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;templateUrl&lt;/code&gt; : A &lt;code&gt;String&lt;/code&gt; representing the URL template to be used to grab the data from the server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;returns&lt;/strong&gt; : The &lt;code&gt;ko.observableArray&lt;/code&gt; instance that &lt;code&gt;.asPaged&lt;/code&gt; was called on, augmented with the paging methods&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var Example = function(){&#xA;    // apples is empty. will automatically load first page, and any other page which is requested&#xA;    // by using the provided url template&#xA;    this.apples = ko.observableArray().asPaged(10,&#39;/url/to/get/apples?page={page}&amp;amp;pageSize={pageSize}&#39;);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div&gt;&lt;/div&gt; &#xA;&lt;p&gt;###Configure it to do what you need with options hash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.asPaged(Object config) =&amp;gt; ko.observableArray (self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case we simply pass in an object hash with whatever options we want to set. The following options are made available:&lt;/p&gt; &#xA;&lt;table class=&#34;table table-bordered&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pageSize&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The desired page size. Expected to be an integer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;async&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Whether or not the dataset will be loaded asynchronously or not. Note: this may be overridden if async-only options are provided when this is set to false or vice-versa. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; A string template for a URL optionally containing any of the following formatters: &lt;code&gt;{page}&lt;/code&gt;, &lt;code&gt;{pageSize}&lt;/code&gt;, &lt;code&gt;{start}&lt;/code&gt;, &lt;code&gt;{end}&lt;/code&gt; which will then be replaced with the corresponding data. For example, &lt;code&gt;&#39;/resource/list/start/{start}/end/{end}&#39;&lt;/code&gt; will produce &lt;code&gt;&#39;/resource/list/start/0/end/10&#39;&lt;/code&gt; on initialization with default options. &lt;b&gt;Note: async only&lt;/b&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; A function which will be expected to receive a single parameter which is an object hash containing the properties &lt;code&gt;page&lt;/code&gt;, &lt;code&gt;pageSize&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;, and return the to be requested to get the corresponding page of data. &lt;b&gt;Note: async only&lt;/b&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cache&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Boolean representing whether or not the data retrieved from the server should be reused the next time the page is requested. Default is &lt;code&gt;true&lt;/code&gt; &lt;b&gt;Note: async only&lt;/b&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mapFromServer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; A callback function which is called on AJAX success with the AJAX response as the only parameter. The callback is expected to return the array to be the current page. &lt;b&gt;Note: async only&lt;/b&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; A constructor function which will be mapped to the data being pulled from the server. &lt;b&gt;Note: async only&lt;/b&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ajaxOptions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; An options hash to be passed into the jQuery &lt;code&gt;$.ajax&lt;/code&gt; method when a page is requested asnchronously. &lt;b&gt;Note: async only&lt;/b&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can see the &lt;a href=&#34;http://jsfiddle.net/lelandrichardson/npCB5/&#34;&gt;local data functionality demonstrated in jsFiddle here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can see the &lt;a href=&#34;http://jsfiddle.net/lelandrichardson/r9f2r/&#34;&gt;asynchronous functionality demonstrated in jsFiddle here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, the source had to be hacked a little bit in order to work with jsFiddle&#39;s JSON echo API, but it demonstrates the asynchronous nature of the pager that can be achieved. If I get a bit further with this project, I will provide some more complete examples and update this article.&lt;/p&gt; &#xA;&lt;p&gt;There is also a tutorial on Tech.Pro which was the origin of this plugin:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://tech.pro/tutorial/1235/handling-paged-datasets-in-knockoutjs&#34; title=&#34;Handling Paged Datasets in Knockout.js&#34;&gt;Handling Paged Datasets in Knockout.js&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;##Future Development&lt;/p&gt; &#xA;&lt;p&gt;As this is a plugin that I believe I myself will use, I would like to keep improving on it. I am open to suggestions on the best way to do that. If you have opinions on how this API should change or be improved, please share! (or submit a pull request).&lt;/p&gt; &#xA;&lt;p&gt;My major plans for it right now (other than fixing bugs and making it more robust) is to add support for RESTful endpoints.&lt;/p&gt; &#xA;&lt;p&gt;My thoughts is this could go something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var Example = function(){&#xA;    // instead of providing a url template, you would simply provide the resource name &#xA;    // and it would do the rest of the work&#xA;    this.apples = ko.observableArray().asPaged({&#xA;        pageSize: 10,&#xA;        resource: &#39;/apple&#39;&#xA;    });&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RESTful API&#39;s have an entirely different way of handling paged datasets, which is by sending back one or more &#34;next&#34;, &#34;prev&#34;, &#34;first&#34;, and &#34;last&#34; URLs along with the response. I intend on adding handling of this by default soon, and I think this could result in a very clean API. I am certainly open to suggestions here as well.&lt;/p&gt; &#xA;&lt;p&gt;##License&lt;/p&gt; &#xA;&lt;p&gt;MIT license - &lt;a href=&#34;http://www.opensource.org/licenses/mit-license.php&#34;&gt;http://www.opensource.org/licenses/mit-license.php&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>