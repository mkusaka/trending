<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-16T01:33:36Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Qihoo360/WatchAD2.0</title>
    <updated>2023-07-16T01:33:36Z</updated>
    <id>tag:github.com,2023-07-16:/Qihoo360/WatchAD2.0</id>
    <link href="https://github.com/Qihoo360/WatchAD2.0" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WatchAD2.0是一款针对域威胁的日志分析与监控系统&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WatchAD2.0域威胁感知系统&lt;/h1&gt; &#xA;&lt;h2&gt;一、产品简述&lt;/h2&gt; &#xA;&lt;p&gt;WatchAD2.0是360信息安全中心开发的一款针对域安全的日志分析与监控系统，它可以收集所有域控上的事件日志、网络流量，通过特征匹配、协议分析、历史行为、敏感操作和蜜罐账户等方式来检测各种已知与未知威胁，功能覆盖了大部分目前的常见内网域渗透手法。相较于WatchAD1.0，有以下提升：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;更丰富的检测能力：新增了账户可疑活动监测场景，加强了权限提升、权限维持等场景检测能力，涵盖包括异常账户/活动、Zerologon提权、SPN劫持、影子票证等更多检测面。&lt;/li&gt; &#xA; &lt;li&gt;基于Golang重构分析引擎：将开发语言从Python重构为Golang，利用其更高效的并发能力，提高对海量日志及流量等数据处理效率，确保告警检出及时有效。&lt;/li&gt; &#xA; &lt;li&gt;整合简化架构：Web平台和检测引擎整合，简化部署过程，用户只依赖消息队列和存储组件即可完成部署。在提高系统的性能和稳定性的同时，也使得系统更加高效和易用，为用户提供更好的体验。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;二、总体架构&lt;/h2&gt; &#xA;&lt;p&gt;WatchAD2.0分为四部分， 日志收集Agent、规则检测及日志分析引擎、缓存数据库、Web控制端，架构如下图所示。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Qihoo360/WatchAD2.0/master/images/Architecture.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;其中流量检测链路暂不开源&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;三、目前支持的具体检测功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;异常活动检测：证书服务活动、创建机器账户事件活动、创建类似DC的用户账户、重置用户账户密码活动、TGT 票据相关活动；&lt;/li&gt; &#xA; &lt;li&gt;凭证盗取：AS-REP 异常的流量请求、Kerberoasting 攻击行为、本地Dump Ntds文件利用；&lt;/li&gt; &#xA; &lt;li&gt;横向移动：目录服务复制、异常的显示凭据登录行为、远程命令执行；&lt;/li&gt; &#xA; &lt;li&gt;权限提升：ACL 异常修改行为、滥用证书服务权限提升、烂土豆提权、MS17-010、新增GPO监控、NTLM 中继检测、基于资源的约束委派、SPN 劫持、攻击打印服务、ZeroLogon 提权攻击；&lt;/li&gt; &#xA; &lt;li&gt;权限维持：DCShadow 权限维持、DSRM 密码重置、GPO 权限委派、SamAccountName欺骗攻击、影子票证、Sid History 权限维持、万能密钥、可用于持久化的异常权限；&lt;/li&gt; &#xA; &lt;li&gt;防御绕过：系统日志清空、关闭系统日志服务；&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;自定义检测规则：在{project_home}/detect_plugins/event_log/目录下可以修改或添加规则，需重新编译以使其生效。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;四、平台展示&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Qihoo360/WatchAD2.0/master/images/Platform.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;五、编译&amp;amp;部署&amp;amp;运行指南&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;服务端部署操作：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker部署（推荐）：&lt;br&gt; WatchAD2.0依赖的组件有kafka、zookpeer，go1.17.1，可使用docker一键部署，操作如下： 在项目根目录下新建&lt;code&gt;.env&lt;/code&gt;文件，修改kafka地址、域控连接信息：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#KAFKA配置&#xA;#外部可访问到的kafka地址&#xA;KAFKAHOST=10.10.10.10&#xA;KAFKAADV=PLAINTEXT://10.10.10.10:9092&#xA;BROKER=10.10.10.10:9092&#xA;&#xA;#Mongo配置&#xA;MONGOUSER=IATP&#xA;MONGOPWD=IATP-by-360&#xA;&#x9;&#xA;#域控配置&#xA;DCNAME=&#34;demo.com&#34;&#xA;DCSERVER=10.10.10.11&#xA;DCUSER=&#34;IATP&#34;&#xA;DCPWD=&#34;Pass123&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;执行以下命令，以启动WatchAD2.0相关依赖组件、检测引擎及WEB服务。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose build&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;手工部署：&lt;br&gt; 需提前准备Kafka集群和MongoDB集群。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;编译go程序 使用go1.17.1版本在项目根目录下执行编译命令： &lt;code&gt;go mod vendor&amp;amp;&amp;amp;go build -o ./main main.go&lt;/code&gt; 将编译好的文件iatp及iatp_wbm目录拷贝至服务器&lt;/li&gt; &#xA; &lt;li&gt;初始化数据库信息 &lt;code&gt;./main init --mongourl mongodb://mongo:password@127.0.0.1:27017&lt;/code&gt; 该操作将mongourl配置写入到 /etc/iatp.conf 配置文件中,如果需要重装需删除该文件再次由程序生成&lt;/li&gt; &#xA; &lt;li&gt;配置认证域LDAP 由于web 管理端依赖于LDAP进行身份验证,所以需提前配置好认证域LDAP的相关配置 &lt;code&gt;./main init --mongourl mongodb://mongo: password@127.0.0.1:27017 --domainname demo.com --domainserver 10.10.10.11 --username &#34;IATP&#34; --password &#34;Pass123&#34; --ssl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;初始化数据表索引 &lt;code&gt;./main init --mongourl mongodb://mongo: password@127.0.0.1:27017 --index&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;初始化kafka消费者配置 修改为与kafka集群匹配的Brokers、Topic、Group等信息 &lt;code&gt;./main init -source --sourcename ITEvent --sourceengine event_log --brokers 10.10.10.10:9092 --topic winlogbeat --group sec-ata --oldest false --kafka true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Web管理端配置 &lt;code&gt;./main web --init --authdomain demo.com --user IATP&lt;/code&gt; 设置初始需要登录的用户账户,该用户账户需要和ldap中的值保持一致.&lt;/li&gt; &#xA; &lt;li&gt;启动主检测引擎 &lt;code&gt;./main run --engine_start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;启动Web控制端 &lt;code&gt;./main run --web_start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;客户端部署操作：&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;开启审核&lt;/strong&gt;&lt;br&gt; 我们的分析基础是所有域控的所有事件日志，所以首先需要打开域控上的安全审核选项，让域控记录所有类型的事件日志。这里以 windows server 2016为例，在 本地安全策略 -&amp;gt; 安全设置 -&amp;gt; 本地策略 -&amp;gt; 审核策略，打开所有审核选项：&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Qihoo360/WatchAD2.0/master/images/AuditPolicy.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;安装winlogbeat&lt;/strong&gt;&lt;br&gt; 我们的分析基础是所有域控的所有事件日志，建议在所有域控服务器上安装winlogbeat，否则会产生误报和漏报。 前往&lt;a href=&#34;https://www.elastic.co/cn/downloads/beats/winlogbeat&#34;&gt;官网下载&lt;/a&gt;对应版本的winlogbeat，建议版本为7.6.1，其它版本的字段可能有变动，存在不兼容的可能性。&lt;br&gt; 参照如下示例修改配置文件winlogbeat.yml，假设kafka的IP为10.10.10.10，此时配置文件为：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;winlogbeat.event_logs:&#xA;  - name: Security&#xA;    ignore_older: 1h&#xA;output.kafka:&#xA;    hosts: [&#34;10.10.10.10:9092&#34;]&#xA;    topic: winlogbeat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;参照&lt;a href=&#34;https://www.elastic.co/guide/en/beats/winlogbeat/current/winlogbeat-installation.html&#34;&gt;官网教程&lt;/a&gt;安装winlogbeat服务即可&lt;/p&gt;</summary>
  </entry>
</feed>