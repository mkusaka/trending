<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-20T01:19:15Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BuilderIO/hydration-overlay</title>
    <updated>2023-12-20T01:19:15Z</updated>
    <id>tag:github.com,2023-12-20:/BuilderIO/hydration-overlay</id>
    <link href="https://github.com/BuilderIO/hydration-overlay" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Overlay for hydration errors with explicit diff between renders.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hydration Overlay üïµÔ∏è&lt;/h1&gt; &#xA;&lt;p&gt;This package displays an overlay during Hydration Errors, providing an explicit diff between the server-side and client-side renders.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BuilderIO/hydration-overlay/main/imgs/after.png&#34; alt=&#34;after&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @builder.io/react-hydration-overlay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;HydrationOverlay&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;First, wrap the root of your app in the &lt;code&gt;HydrationOverlay&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { HydrationOverlay } from &#34;@builder.io/react-hydration-overlay&#34;;&#xA;&#xA;const App = () =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;HydrationOverlay&amp;gt;&#xA;      &amp;lt;YourApp /&amp;gt;&#xA;    &amp;lt;/HydrationOverlay&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugin&lt;/h3&gt; &#xA;&lt;p&gt;Second, add the plugin for your framework. Currently, we support Next.js &amp;amp; Webpack.&lt;/p&gt; &#xA;&lt;h4&gt;Next.js&lt;/h4&gt; &#xA;&lt;p&gt;in &lt;code&gt;next.config.js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {&#xA;  withHydrationOverlay,&#xA;} = require(&#34;@builder.io/react-hydration-overlay/next&#34;);&#xA;&#xA;/** @type {import(&#39;next&#39;).NextConfig} */&#xA;const nextConfig = {&#xA;  /** your config here */&#xA;};&#xA;&#xA;module.exports = withHydrationOverlay({&#xA;  /**&#xA;   * Optional: `appRootSelector` is the selector for the root element of your app. By default, it is `#__next` which works&#xA;   * for Next.js apps with pages directory. If you are using the app directory, you should change this to `main`.&#xA;   */&#xA;  appRootSelector: &#34;main&#34;,&#xA;})(nextConfig);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Webpack&lt;/h4&gt; &#xA;&lt;p&gt;Here is an example (still with Next), but using the Webpack helper directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const {&#xA;  withHydrationOverlayWebpack,&#xA;} = require(&#34;@builder.io/react-hydration-overlay/webpack&#34;);&#xA;&#xA;/** @type {import(&#39;next&#39;).NextConfig} */&#xA;const nextConfig = {&#xA;  reactStrictMode: true,&#xA;  webpack: (config, options) =&amp;gt; {&#xA;    config = withHydrationOverlayWebpack({&#xA;      appRootSelector: &#34;#__next&#34;,&#xA;      isMainAppEntryPoint: (entryPointName) =&amp;gt;&#xA;        !options.isServer &amp;amp;&amp;amp;&#xA;        (entryPointName === &#34;pages/_app&#34; || entryPointName === &#34;main-app&#34;),&#xA;    })(config);&#xA;    return config;&#xA;  },&#xA;};&#xA;&#xA;module.exports = nextConfig;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This package is currently in beta. Please report any issues you find!&lt;/li&gt; &#xA; &lt;li&gt;This package is not intended for production use. We highly recommend you remove this package from your production builds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;This package works by comparing the HTML received from the server with the HTML rendered by the client, which has one improtant consequence. React re-renders the entire app when hydration fails, potentially introducing even more changes.&lt;/p&gt; &#xA;&lt;p&gt;The biggest example is &lt;code&gt;style&lt;/code&gt; attributes: React appends &lt;code&gt;;&lt;/code&gt; to each one and alters the whitespace. In &lt;a href=&#34;https://x.com/samijaber_/status/1734760349662957906?s=20&#34;&gt;more extreme examples&lt;/a&gt;, it causes enormous diffs for properties like &lt;code&gt;all: unset&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, this tool will give you false positives for style changes.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The plugin injects &lt;code&gt;hydration-overlay-initializer.js&lt;/code&gt; into your app&#39;s entry point. This script reads the HTML from the server and stores it, and then listens for hydration errors and stores the resulting HTML then.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;HydrationOverlay&lt;/code&gt; component reads both HTML strings and compares them, and renders the overlay.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;To add support for other frameworks, what is needed is a plugin that injects the &lt;code&gt;hydration-overlay-initializer.js&lt;/code&gt; script into the app&#39;s entry point. See &lt;a href=&#34;https://raw.githubusercontent.com/BuilderIO/hydration-overlay/main/packages/lib/src/next-plugin.ts&#34;&gt;next-plugin.ts&lt;/a&gt; for more information. PRs welcome!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Next.js&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Remix&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Vite SSR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Release process&lt;/h2&gt; &#xA;&lt;h3&gt;Add changesets&lt;/h3&gt; &#xA;&lt;p&gt;in the same PR where your change is made, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pnpm c:add&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and follow instructions to add changesets. You can then merge your PR.&lt;/p&gt; &#xA;&lt;h3&gt;Merge automated PR&lt;/h3&gt; &#xA;&lt;p&gt;Once your PR is merged, the &lt;code&gt;changeset&lt;/code&gt; bot will open a PR with the changeset. You can merge this PR once CI passes. This will trigger a release.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.builder.io/m/developers&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/844291/230786554-eb225eeb-2f6b-4286-b8c2-535b1131744a.png&#34;&gt; &#xA;   &lt;img width=&#34;250&#34; alt=&#34;Made with love by Builder.io&#34; src=&#34;https://user-images.githubusercontent.com/844291/230786555-a58479e4-75f3-4222-a6eb-74c5af953eac.png&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Atuti/Chato</title>
    <updated>2023-12-20T01:19:15Z</updated>
    <id>tag:github.com,2023-12-20:/Atuti/Chato</id>
    <link href="https://github.com/Atuti/Chato" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a web project done by the students of BSc Electronics Technology of the University of Eastern Africa, Baraton.&lt;/p&gt; &#xA;&lt;p&gt;It is a realtime chat application developed by Spring Boot and WebSocket. The application allows users to join and leave chat rooms in real time communcation between server and clients.&lt;/p&gt; &#xA;&lt;p&gt;Ensure you can first compile java applications on your machine before downloading this project. In your editor of choice(We recommend Vs Code because of its simplicity) open the project. After opening the project run it by keying the combination ctrl + f5 or by clicking the run option in the menu and clicking run without debugging. Ensure you have extensions for maven and springboot tools enabled.&lt;/p&gt; &#xA;&lt;p&gt;Proceed to your browser and type &#34;localhost:8080&#34; in you address bar ans click enter. Enter your name and use &#34;password&#34; as your password. This will let you into the chatroom.&lt;/p&gt; &#xA;&lt;p&gt;To test the capability of many users joining, open the same url in another browser and login using another name.&lt;/p&gt; &#xA;&lt;p&gt;In your code, proceed to the file ChatMessage.java that is in the package &#34;com.electronics.Chato.model&#34; for further directions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/actions-learning-pathway</title>
    <updated>2023-12-20T01:19:15Z</updated>
    <id>tag:github.com,2023-12-20:/github/actions-learning-pathway</id>
    <link href="https://github.com/github/actions-learning-pathway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learning pathway resources for building, testing, and deploying a GitHub Action to GitHub Pages.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Essentials of GitHub Actions learning pathway demo repository&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the core web application files and configuration you&#39;ll need to follow along through the &lt;a href=&#34;https://resources.github.com/learn/pathways/essentials/automated-application-deployment-with-github-actions-and-pages&#34;&gt;Essentials of automated application deployment with GitHub Actions &amp;amp; GitHub Pages&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;To follow along with the step-by-step instructions in the Essentials module, you will need to create a copy of this repository by doing the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click &lt;strong&gt;Use this template&lt;/strong&gt; above the file list and select &lt;strong&gt;Create a new repository&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;strong&gt;Owner&lt;/strong&gt; dropdown menu to select the account you want to own the repository.&lt;/li&gt; &#xA; &lt;li&gt;Name your repository &lt;code&gt;actions-learning-pathway&lt;/code&gt; and add a simple description to make it easier to identify later.&lt;/li&gt; &#xA; &lt;li&gt;Set the default visibility for the repo to public, as private repositories use Actions minutes, while public repositories can use GitHub-hosted runners for free.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Click Create repository from template and we‚Äôre ready to build our first Actions workflow!&lt;/p&gt; &#xA;&lt;p&gt;If you have arrived here from the &lt;a href=&#34;https://resources.github.com/learn/pathways/automation/intermediate/workflow-automation-with-github-actions/&#34;&gt;Intermediate automation strategies with GitHub Actions&lt;/a&gt; module without following the first module, copy the contents of the &lt;code&gt;/demo-files&lt;/code&gt; folder into the &lt;code&gt;.github/workflows&lt;/code&gt; folder to follow along.&lt;/p&gt;</summary>
  </entry>
</feed>