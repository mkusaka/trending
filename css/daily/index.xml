<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-09T01:28:46Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>spring-petclinic/spring-petclinic-microservices</title>
    <updated>2024-08-09T01:28:46Z</updated>
    <id>tag:github.com,2024-08-09:/spring-petclinic/spring-petclinic-microservices</id>
    <link href="https://github.com/spring-petclinic/spring-petclinic-microservices" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Distributed version of Spring Petclinic built with Spring Cloud&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Distributed version of the Spring PetClinic Sample Application built with Spring Cloud&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spring-petclinic/spring-petclinic-microservices/actions/workflows/maven-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/spring-petclinic/spring-petclinic-microservices/actions/workflows/maven-build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This microservices branch was initially derived from &lt;a href=&#34;https://github.com/spring-petclinic/spring-petclinic-angular1&#34;&gt;AngularJS version&lt;/a&gt; to demonstrate how to split sample Spring application into &lt;a href=&#34;http://www.martinfowler.com/articles/microservices.html&#34;&gt;microservices&lt;/a&gt;. To achieve that goal, we use Spring Cloud Gateway, Spring Cloud Circuit Breaker, Spring Cloud Config, Micrometer Tracing, Resilience4j, Open Telemetry and the Eureka Service Discovery from the &lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-netflix&#34;&gt;Spring Cloud Netflix&lt;/a&gt; technology stack.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codespaces.new/spring-petclinic/spring-petclinic-microservices&#34;&gt;&lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; alt=&#34;Open in GitHub Codespaces&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Starting services locally without Docker&lt;/h2&gt; &#xA;&lt;p&gt;Every microservice is a Spring Boot application and can be started locally using IDE (&lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt; plugin has to be set up) or &lt;code&gt;../mvnw spring-boot:run&lt;/code&gt; command. Please note that supporting services (Config and Discovery Server) must be started before any other application (Customers, Vets, Visits and API). Startup of Tracing server, Admin server, Grafana and Prometheus is optional. If everything goes well, you can access the following services at given location:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discovery Server - &lt;a href=&#34;http://localhost:8761&#34;&gt;http://localhost:8761&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Config Server - &lt;a href=&#34;http://localhost:8888&#34;&gt;http://localhost:8888&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AngularJS frontend (API Gateway) - &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customers, Vets and Visits Services - random port, check Eureka Dashboard&lt;/li&gt; &#xA; &lt;li&gt;Tracing Server (Zipkin) - &lt;a href=&#34;http://localhost:9411/zipkin/&#34;&gt;http://localhost:9411/zipkin/&lt;/a&gt; (we use &lt;a href=&#34;https://github.com/openzipkin/zipkin/tree/main/zipkin-server&#34;&gt;openzipkin&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Admin Server (Spring Boot Admin) - &lt;a href=&#34;http://localhost:9090&#34;&gt;http://localhost:9090&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Grafana Dashboards - &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prometheus - &lt;a href=&#34;http://localhost:9091&#34;&gt;http://localhost:9091&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can tell Config Server to use your local Git repository by using &lt;code&gt;native&lt;/code&gt; Spring profile and setting &lt;code&gt;GIT_REPO&lt;/code&gt; environment variable, for example: &lt;code&gt;-Dspring.profiles.active=native -DGIT_REPO=/projects/spring-petclinic-microservices-config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Starting services locally with docker-compose&lt;/h2&gt; &#xA;&lt;p&gt;In order to start entire infrastructure using Docker, you have to build images by executing &lt;code&gt;bash ./mvnw clean install -P buildDocker &lt;/code&gt; This requires &lt;code&gt;Docker&lt;/code&gt; or &lt;code&gt;Docker desktop&lt;/code&gt; to be installed and running.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can also build all the images on &lt;code&gt;Podman&lt;/code&gt;, which requires Podman or Podman Desktop to be installed and running.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mvnw clean install -PbuildDocker -Dcontainer.executable=podman&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the Docker OCI image is build for an &lt;code&gt;linux/amd64&lt;/code&gt; platform. For other architectures, you could change it by using the &lt;code&gt;-Dcontainer.platform&lt;/code&gt; maven command line argument. For instance, if you target container images for an Apple M2, you could use the command line with the &lt;code&gt;linux/arm64&lt;/code&gt; architecture:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mvnw clean install -P buildDocker -Dcontainer.platform=&#34;linux/arm64&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once images are ready, you can start them with a single command &lt;code&gt;docker-compose up&lt;/code&gt; or &lt;code&gt;podman-compose up&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Containers startup order is coordinated with the &lt;code&gt;service_healthy&lt;/code&gt; condition of the Docker Compose &lt;a href=&#34;https://github.com/compose-spec/compose-spec/raw/main/spec.md#depends_on&#34;&gt;depends-on&lt;/a&gt; expression and the &lt;a href=&#34;https://github.com/compose-spec/compose-spec/raw/main/spec.md#healthcheck&#34;&gt;healthcheck&lt;/a&gt; of the service containers. After starting services, it takes a while for API Gateway to be in sync with service registry, so don&#39;t be scared of initial Spring Cloud Gateway timeouts. You can track services availability using Eureka dashboard available by default at &lt;a href=&#34;http://localhost:8761&#34;&gt;http://localhost:8761&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; branch uses an Eclipse Temurin with Java 17 as Docker base image.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: Under MacOSX or Windows, make sure that the Docker VM has enough memory to run the microservices. The default settings are usually not enough and make the &lt;code&gt;docker-compose up&lt;/code&gt; painfully slow.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Starting services locally with docker-compose and Java&lt;/h2&gt; &#xA;&lt;p&gt;If you experience issues with running the system via docker-compose you can try running the &lt;code&gt;./scripts/run_all.sh&lt;/code&gt; script that will start the infrastructure services via docker-compose and all the Java based applications via standard &lt;code&gt;nohup java -jar ...&lt;/code&gt; command. The logs will be available under &lt;code&gt;${ROOT}/target/nameoftheapp.log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each of the java based applications is started with the &lt;code&gt;chaos-monkey&lt;/code&gt; profile in order to interact with Spring Boot Chaos Monkey. You can check out the (README)[scripts/chaos/README.md] for more information about how to use the &lt;code&gt;./scripts/chaos/call_chaos.sh&lt;/code&gt; helper script to enable assaults.&lt;/p&gt; &#xA;&lt;h2&gt;Understanding the Spring Petclinic application&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://fr.slideshare.net/AntoineRey/spring-framework-petclinic-sample-application&#34;&gt;See the presentation of the Spring Petclinic Framework version&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://javaetmoi.com/2018/10/architecture-microservices-avec-spring-cloud/&#34;&gt;A blog post introducing the Spring Petclinic Microsevices&lt;/a&gt; (french language)&lt;/p&gt; &#xA;&lt;p&gt;You can then access petclinic here: &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/docs/application-screenshot.png&#34; alt=&#34;Spring Petclinic Microservices screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Architecture diagram of the Spring Petclinic Microservices&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/docs/microservices-architecture-diagram.jpg&#34; alt=&#34;Spring Petclinic Microservices architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;In case you find a bug/suggested improvement for Spring Petclinic Microservices&lt;/h2&gt; &#xA;&lt;p&gt;Our issue tracker is available here: &lt;a href=&#34;https://github.com/spring-petclinic/spring-petclinic-microservices/issues&#34;&gt;https://github.com/spring-petclinic/spring-petclinic-microservices/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Database configuration&lt;/h2&gt; &#xA;&lt;p&gt;In its default configuration, Petclinic uses an in-memory database (HSQLDB) which gets populated at startup with data. A similar setup is provided for MySql in case a persistent database configuration is needed. Dependency for Connector/J, the MySQL JDBC driver is already included in the &lt;code&gt;pom.xml&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h3&gt;Start a MySql database&lt;/h3&gt; &#xA;&lt;p&gt;You may start a MySql database with docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -e MYSQL_ROOT_PASSWORD=petclinic -e MYSQL_DATABASE=petclinic -p 3306:3306 mysql:5.7.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or download and install the MySQL database (e.g., MySQL Community Server 5.7 GA), which can be found here: &lt;a href=&#34;https://dev.mysql.com/downloads/&#34;&gt;https://dev.mysql.com/downloads/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use the Spring &#39;mysql&#39; profile&lt;/h3&gt; &#xA;&lt;p&gt;To use a MySQL database, you have to start 3 microservices (&lt;code&gt;visits-service&lt;/code&gt;, &lt;code&gt;customers-service&lt;/code&gt; and &lt;code&gt;vets-services&lt;/code&gt;) with the &lt;code&gt;mysql&lt;/code&gt; Spring profile. Add the &lt;code&gt;--spring.profiles.active=mysql&lt;/code&gt; as programm argument.&lt;/p&gt; &#xA;&lt;p&gt;By default, at startup, database schema will be created and data will be populated. You may also manually create the PetClinic database and data by executing the &lt;code&gt;&#34;db/mysql/{schema,data}.sql&#34;&lt;/code&gt; scripts of each 3 microservices. In the &lt;code&gt;application.yml&lt;/code&gt; of the &lt;a href=&#34;https://github.com/spring-petclinic/spring-petclinic-microservices-config&#34;&gt;Configuration repository&lt;/a&gt;, set the &lt;code&gt;initialization-mode&lt;/code&gt; to &lt;code&gt;never&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are running the microservices with Docker, you have to add the &lt;code&gt;mysql&lt;/code&gt; profile into the (Dockerfile)[docker/Dockerfile]:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ENV SPRING_PROFILES_ACTIVE docker,mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the &lt;code&gt;mysql section&lt;/code&gt; of the &lt;code&gt;application.yml&lt;/code&gt; from the &lt;a href=&#34;https://github.com/spring-petclinic/spring-petclinic-microservices-config&#34;&gt;Configuration repository&lt;/a&gt;, you have to change the host and port of your MySQL JDBC connection string.&lt;/p&gt; &#xA;&lt;h2&gt;Custom metrics monitoring&lt;/h2&gt; &#xA;&lt;p&gt;Grafana and Prometheus are included in the &lt;code&gt;docker-compose.yml&lt;/code&gt; configuration, and the public facing applications have been instrumented with &lt;a href=&#34;https://micrometer.io&#34;&gt;MicroMeter&lt;/a&gt; to collect JVM and custom business metrics.&lt;/p&gt; &#xA;&lt;p&gt;A JMeter load testing script is available to stress the application and generate metrics: &lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/spring-petclinic-api-gateway/src/test/jmeter/petclinic_test_plan.jmx&#34;&gt;petclinic_test_plan.jmx&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/docs/grafana-custom-metrics-dashboard.png&#34; alt=&#34;Grafana metrics dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using Prometheus&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prometheus can be accessed from your local machine at &lt;a href=&#34;http://localhost:9091&#34;&gt;http://localhost:9091&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using Grafana with Prometheus&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An anonymous access and a Prometheus datasource are setup.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;Spring Petclinic Metrics&lt;/code&gt; Dashboard is available at the URL &lt;a href=&#34;http://localhost:3000/d/69JXeR0iw/spring-petclinic-metrics&#34;&gt;http://localhost:3000/d/69JXeR0iw/spring-petclinic-metrics&lt;/a&gt;. You will find the JSON configuration file here: &lt;a href=&#34;&#34;&gt;docker/grafana/dashboards/grafana-petclinic-dashboard.json&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You may create your own dashboard or import the &lt;a href=&#34;https://grafana.com/dashboards/4701&#34;&gt;Micrometer/SpringBoot dashboard&lt;/a&gt; via the Import Dashboard menu item. The id for this dashboard is &lt;code&gt;4701&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom metrics&lt;/h3&gt; &#xA;&lt;p&gt;Spring Boot registers a lot number of core metrics: JVM, CPU, Tomcat, Logback... The Spring Boot auto-configuration enables the instrumentation of requests handled by Spring MVC. All those three REST controllers &lt;code&gt;OwnerResource&lt;/code&gt;, &lt;code&gt;PetResource&lt;/code&gt; and &lt;code&gt;VisitResource&lt;/code&gt; have been instrumented by the &lt;code&gt;@Timed&lt;/code&gt; Micrometer annotation at class level.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;customers-service&lt;/code&gt; application has the following custom metrics enabled: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;@Timed: &lt;code&gt;petclinic.owner&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;@Timed: &lt;code&gt;petclinic.pet&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;visits-service&lt;/code&gt; application has the following custom metrics enabled: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;@Timed: &lt;code&gt;petclinic.visit&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Looking for something in particular?&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Spring Cloud components&lt;/th&gt; &#xA;   &lt;th&gt;Resources&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Configuration server&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/spring-petclinic-config-server/src/main/resources/application.yml&#34;&gt;Config server properties&lt;/a&gt; and &lt;a href=&#34;https://github.com/spring-petclinic/spring-petclinic-microservices-config&#34;&gt;Configuration repository&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Service Discovery&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/spring-petclinic-discovery-server&#34;&gt;Eureka server&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/spring-petclinic-vets-service/src/main/java/org/springframework/samples/petclinic/vets/VetsServiceApplication.java&#34;&gt;Service discovery client&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;API Gateway&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/spring-petclinic-api-gateway/pom.xml&#34;&gt;Spring Cloud Gateway starter&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/spring-petclinic-api-gateway/src/main/resources/application.yml&#34;&gt;Routing configuration&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker Compose&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://spring.io/guides/gs/spring-boot-docker/&#34;&gt;Spring Boot with Docker guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/docker-compose.yml&#34;&gt;docker-compose file&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Circuit Breaker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/spring-petclinic-api-gateway/src/main/java/org/springframework/samples/petclinic/api/boundary/web/ApiGatewayController.java&#34;&gt;Resilience4j fallback method&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Grafana / Prometheus Monitoring&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://micrometer.io/&#34;&gt;Micrometer implementation&lt;/a&gt;, &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-metrics.html&#34;&gt;Spring Boot Actuator Production Ready Metrics&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Front-end module&lt;/th&gt; &#xA;   &lt;th&gt;Files&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Node and NPM&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/spring-petclinic-ui/pom.xml&#34;&gt;The frontend-maven-plugin plugin downloads/installs Node and NPM locally then runs Bower and Gulp&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bower&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/spring-petclinic-ui/bower.json&#34;&gt;JavaScript libraries are defined by the manifest file bower.json&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gulp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/spring-petclinic-ui/gulpfile.js&#34;&gt;Tasks automated by Gulp: minify CSS and JS, generate CSS from LESS, copy other static resources&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Angular JS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/spring-petclinic-ui/src/scripts/&#34;&gt;app.js, controllers and templates&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Pushing to a Docker registry&lt;/h2&gt; &#xA;&lt;p&gt;Docker images for &lt;code&gt;linux/amd64&lt;/code&gt; and &lt;code&gt;linux/arm64&lt;/code&gt; platforms have been published into DockerHub in the &lt;a href=&#34;https://hub.docker.com/u/springcommunity&#34;&gt;springcommunity&lt;/a&gt; organization. You can pull an image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull springcommunity/spring-petclinic-config-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may prefer to build then push images to your own Docker registry.&lt;/p&gt; &#xA;&lt;h3&gt;Choose your Docker registry&lt;/h3&gt; &#xA;&lt;p&gt;You need to define your target Docker registry. Make sure you&#39;re already logged in by running &lt;code&gt;docker login &amp;lt;endpoint&amp;gt;&lt;/code&gt; or &lt;code&gt;docker login&lt;/code&gt; if you&#39;re just targeting Docker hub.&lt;/p&gt; &#xA;&lt;p&gt;Setup the &lt;code&gt;REPOSITORY_PREFIX&lt;/code&gt; env variable to target your Docker registry. If you&#39;re targeting Docker hub, simple provide your username, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export REPOSITORY_PREFIX=springcommunity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For other Docker registries, provide the full URL to your repository, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export REPOSITORY_PREFIX=harbor.myregistry.com/petclinic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To push Docker image for the &lt;code&gt;linux/amd64&lt;/code&gt; and the &lt;code&gt;linux/arm64&lt;/code&gt; platform to your own registry, please use the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mvn clean install -Dmaven.test.skip -P buildDocker -Ddocker.image.prefix=${REPOSITORY_PREFIX} -Dcontainer.build.extraarg=&#34;--push&#34; -Dcontainer.platform=&#34;linux/amd64,linux/arm64&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;scripts/pushImages.sh&lt;/code&gt; and &lt;code&gt;scripts/tagImages.sh&lt;/code&gt; shell scripts could also be used once you build your image with the &lt;code&gt;buildDocker&lt;/code&gt; maven profile. The &lt;code&gt;scripts/tagImages.sh&lt;/code&gt; requires to declare the &lt;code&gt;VERSION&lt;/code&gt; env variable.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling the CSS&lt;/h2&gt; &#xA;&lt;p&gt;There is a &lt;code&gt;petclinic.css&lt;/code&gt; in &lt;code&gt;spring-petclinic-api-gateway/src/main/resources/static/css&lt;/code&gt;. It was generated from the &lt;code&gt;petclinic.scss&lt;/code&gt; source, combined with the &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; library. If you make changes to the &lt;code&gt;scss&lt;/code&gt;, or upgrade Bootstrap, you will need to re-compile the CSS resources using the Maven profile &lt;code&gt;css&lt;/code&gt; of the &lt;code&gt;spring-petclinic-api-gateway&lt;/code&gt;module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd spring-petclinic-api-gateway&#xA;mvn generate-resources -P css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interesting Spring Petclinic forks&lt;/h2&gt; &#xA;&lt;p&gt;The Spring Petclinic &lt;code&gt;main&lt;/code&gt; branch in the main &lt;a href=&#34;https://github.com/spring-projects/spring-petclinic&#34;&gt;spring-projects&lt;/a&gt; GitHub org is the &#34;canonical&#34; implementation, currently based on Spring Boot and Thymeleaf.&lt;/p&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://github.com/spring-petclinic/spring-petclinic-microservices/&#34;&gt;spring-petclinic-microservices&lt;/a&gt; project is one of the &lt;a href=&#34;https://spring-petclinic.github.io/docs/forks.html&#34;&gt;several forks&lt;/a&gt; hosted in a special GitHub org: &lt;a href=&#34;https://github.com/spring-petclinic&#34;&gt;spring-petclinic&lt;/a&gt;. If you have a special interest in a different technology stack that could be used to implement the Pet Clinic then please join the community there.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/spring-petclinic/spring-petclinic-microservices/issues&#34;&gt;issue tracker&lt;/a&gt; is the preferred channel for bug reports, features requests and submitting pull requests.&lt;/p&gt; &#xA;&lt;p&gt;For pull requests, editor preferences are available in the &lt;a href=&#34;https://raw.githubusercontent.com/spring-petclinic/spring-petclinic-microservices/main/.editorconfig&#34;&gt;editor config&lt;/a&gt; for easy use in common text editors. Read more and download plugins at &lt;a href=&#34;http://editorconfig.org&#34;&gt;http://editorconfig.org&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>