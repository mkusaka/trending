<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-13T01:26:10Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheBridge-FullStackDeveloper/ejercicio-useState</title>
    <updated>2024-03-13T01:26:10Z</updated>
    <id>tag:github.com,2024-03-13:/TheBridge-FullStackDeveloper/ejercicio-useState</id>
    <link href="https://github.com/TheBridge-FullStackDeveloper/ejercicio-useState" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ejercicio: Cambio de Nombre del Profesor&lt;/h1&gt; &#xA;&lt;p&gt;En este ejercicio tendrás que poner en práctica lo aprendido con useState. Para ello se pide que hagas una lista de nombres de tus profesores y que cada vez que cliques en uno de ellos cambie el nombre del profesor. Los pasos a seguir son los siguientes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clonate este repositorio y en el componente funcional &lt;code&gt;App&lt;/code&gt;, importa &lt;code&gt;useState&lt;/code&gt; desde React.&lt;/li&gt; &#xA; &lt;li&gt;Define dos variables de estado utilizando &lt;code&gt;useState&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: inicializada con el valor &lt;code&gt;&#34;Sofía&#34;&lt;/code&gt;, que representa el nombre actual del profesor.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;newName&lt;/code&gt;: inicializada con el valor &lt;code&gt;&#39;&#39;&lt;/code&gt;, que representa el nuevo nombre ingresado por el usuario.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;En el JSX del componente, renderiza un título &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; con el texto &#34;Teacher Name&#34; seguido del valor de &lt;code&gt;name&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renderiza una lista &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; con tres elementos &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, cada uno con un nombre de profesor diferente: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;El texto de cada elemento &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; debe ser uno de los nombres predefinidos (&#34;Data&#34;, &#34;Reyes&#34;, &#34;Yolanda&#34;).&lt;/li&gt; &#xA;   &lt;li&gt;Al hacer clic en cada elemento de la lista, se debe cambiar el nombre del profesor mostrado en el título a uno de los nombres predefinidos correspondientes.&lt;/li&gt; &#xA;   &lt;li&gt;Utiliza la función &lt;code&gt;setName&lt;/code&gt; proporcionada por &lt;code&gt;useState&lt;/code&gt; para actualizar el nombre del profesor cuando se haga clic en un elemento de la lista.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Bonus&lt;/h2&gt; &#xA;&lt;p&gt;Como reto, te proponemos que modifiques el ejercicio anterior y en vez de tener que clicar en el nombre para cambiar su valor crees un formulario que cuando se envíe cambie el nombre:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Modifica el componente &lt;code&gt;App&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Implementa una función &lt;code&gt;changeName&lt;/code&gt; que se encargue de actualizar el nombre del profesor: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Verifica que &lt;code&gt;newName&lt;/code&gt; no esté vacío antes de actualizar el nombre.&lt;/li&gt; &#xA;   &lt;li&gt;Actualiza el estado &lt;code&gt;name&lt;/code&gt; con el valor de &lt;code&gt;newName&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Restablece &lt;code&gt;newName&lt;/code&gt; a una cadena vacía después de actualizar el nombre.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;En el JSX del componente, renderiza un formulario &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; con los siguientes elementos: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Un campo de entrada de texto &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; con el atributo &lt;code&gt;type&lt;/code&gt; establecido en &lt;code&gt;&#34;text&#34;&lt;/code&gt;, el atributo &lt;code&gt;value&lt;/code&gt; vinculado a &lt;code&gt;newName&lt;/code&gt;, el atributo &lt;code&gt;onChange&lt;/code&gt; que actualiza &lt;code&gt;newName&lt;/code&gt; cuando cambia el valor y el atributo &lt;code&gt;placeholder&lt;/code&gt; con el texto &#34;add a name&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;Un botón &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; con el tipo establecido en &lt;code&gt;&#34;submit&#34;&lt;/code&gt; y el texto &#34;Add&#34;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Utiliza la función &lt;code&gt;changeName&lt;/code&gt; para manejar el evento &lt;code&gt;onSubmit&lt;/code&gt; del formulario. Esto asegurará que el nombre se actualice cuando el formulario se envíe.&lt;/li&gt; &#xA; &lt;li&gt;Exporta el componente &lt;code&gt;App&lt;/code&gt; al final del archivo.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>PolarExpress/marketplace-frontend</title>
    <updated>2024-03-13T01:26:10Z</updated>
    <id>tag:github.com,2024-03-13:/PolarExpress/marketplace-frontend</id>
    <link href="https://github.com/PolarExpress/marketplace-frontend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;frontend-standalone&lt;/h1&gt; &#xA;&lt;p&gt;This is the standalone version of the frontend for the GraphPolaris add-on marketplace.&lt;/p&gt; &#xA;&lt;p&gt;Uses &lt;a href=&#34;https://vitejs.dev/&#34;&gt;Vite&lt;/a&gt;, &lt;a href=&#34;https://vitest.dev/&#34;&gt;Vitest&lt;/a&gt;, and &lt;a href=&#34;https://github.com/testing-library/react-testing-library&#34;&gt;React Testing Library&lt;/a&gt; to create a modern &lt;a href=&#34;https://react.dev/&#34;&gt;React&lt;/a&gt; app compatible with &lt;a href=&#34;https://create-react-app.dev/&#34;&gt;Create React App&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Scripts&lt;/h2&gt; &#xA;&lt;p&gt;Use with &lt;code&gt;npm run &amp;lt;arg&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;arg&amp;gt;&lt;/code&gt; is one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dev&lt;/code&gt;/&lt;code&gt;start&lt;/code&gt; - start dev server and open browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build&lt;/code&gt; - build for production&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;preview&lt;/code&gt; - locally preview production build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt; - launch test runner&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;storybook&lt;/code&gt; - start Storybook.js.&lt;br&gt; Note: by adding &lt;code&gt;?path=/onboarding&lt;/code&gt; to the URL (or replacing an existing path if it is already there), a short guide to Storybook.js will be started. This is only possible as long as the default stories exist.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test-storybook&lt;/code&gt; - run the storybook tests and produces a coverage report. Requires a local running instance of storybook.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test-storybook:ci&lt;/code&gt; - builds storybook and run the storybook tests. Must not have an instance of storybook running.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build-tailwind&lt;/code&gt; - rebuild the Tailwind CSS stylesheet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;format&lt;/code&gt; - run Prettier on the code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lint&lt;/code&gt; - run eslint on the code. Append &lt;code&gt; -- --fix&lt;/code&gt; to also attempt to automatically fix problems it encounters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/create-react-app/tree/main/packages/cra-template&#34;&gt;Create React App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react&#34;&gt;Vite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vitest-dev/vitest/tree/main/examples/react-testing-lib&#34;&gt;Vitest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Web-programming-4022/css-Gaming-website</title>
    <updated>2024-03-13T01:26:10Z</updated>
    <id>tag:github.com,2024-03-13:/Web-programming-4022/css-Gaming-website</id>
    <link href="https://github.com/Web-programming-4022/css-Gaming-website" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Second practice - including CSS attributes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CSS Gaming Website&lt;/h1&gt; &#xA;&lt;p&gt;This repository is for practicing CSS attributes for a gaming website.&lt;/p&gt; &#xA;&lt;h2&gt;Attention&lt;/h2&gt; &#xA;&lt;p&gt;Ensure you enter the last four digits of your student number at the end of the forked repo name.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This is the second practice session focusing on incorporating CSS attributes into the gaming website project.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Please follow these instructions carefully:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Fork this repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the forked repository to your local machine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Design the website based on the &lt;a href=&#34;https://www.figma.com/file/auNugnfKF5eREyI5PqGurR/gaming-website?type=design&amp;amp;node-id=0%3A1&amp;amp;mode=design&amp;amp;t=wodZzQgJISCRspQE-1&#34;&gt;Figma design&lt;/a&gt;, focusing only on phase 1.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure the directory structure as follows: assets --fonts --images styles scripts index.html&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the HTML semantic you learned in the last project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pay attention to commented messages in the Figma design.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make the palette for default variables using &lt;code&gt;:root&lt;/code&gt; in CSS.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>