<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-21T01:32:29Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sb2nov/week2-devops</title>
    <updated>2023-06-21T01:32:29Z</updated>
    <id>tag:github.com,2023-06-21:/sb2nov/week2-devops</id>
    <link href="https://github.com/sb2nov/week2-devops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Intro to DevOps - Week 2 Project Starter Code&lt;/h1&gt; &#xA;&lt;h1&gt;Goal&lt;/h1&gt; &#xA;&lt;h2&gt;Containerize two Flask web services and use Docker Compose to orchestrate them&lt;/h2&gt; &#xA;&lt;h3&gt;For our week 2 project, we will be containerizing two Flask apps, one generates a Random Quote, and the other service consumes this and displays it on a neat front end.&lt;/h3&gt; &#xA;&lt;h3&gt;Then we shall be using Docker Swarm to orchestrate the services to achieve our end goal. This exercise will help us understand a real-world use case of Docker and Docker Swarm better.&lt;/h3&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;&lt;br&gt; Basic knowledge of programming and APIs is needed. &lt;br&gt; &lt;br&gt; The tutorial on how to start a Docker Container is here - &lt;a href=&#34;https://docs.docker.com/language/python/build-images/&#34;&gt;https://docs.docker.com/language/python/build-images/&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Environment Setup - Things needed to run Project 2&lt;/h2&gt; &#xA;&lt;p&gt;Install Docker Desktop from here - &lt;a href=&#34;https://docs.docker.com/desktop/&#34;&gt;https://docs.docker.com/desktop/&lt;/a&gt;. Choose the distribution of your choice but we will be using Windows. Docker compose, the CLI tools come along with Docker Desktop.&lt;/p&gt; &#xA;&lt;p&gt;Download the starter file from here - (&lt;a href=&#34;https://github.com/sb2nov/corise-zignite-devops-cc&#34;&gt;https://github.com/sb2nov/corise-zignite-devops-cc&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Test if Docker is installed by running the following command in the terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run hello-world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything is installed right you get a response &#39;Hello from Docker! We are all good to go, let&#39;s start off our Week 2 project then!&lt;/p&gt; &#xA;&lt;h1&gt;Steps&lt;/h1&gt; &#xA;&lt;p&gt;Download or Clone the repo &lt;a href=&#34;https://github.com/sb2nov/corise-zignite-devops-cc/tree/starter_code&#34;&gt;https://github.com/sb2nov/corise-zignite-devops-cc/tree/starter_code&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a Docker File within the cloned Repository&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vim Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Python application directory structure should now look like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;quote_gen&#xA;|____ static&#xA;|____ templates&#xA;|____ app.py&#xA;|____ requirements.txt&#xA;|____ Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;quote_disp&#xA;|____ static&#xA;|____ templates&#xA;|____ app.py&#xA;|____ requirements.txt&#xA;|____ Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s create a basic container in each of the directories&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM python:3.8-slim-buster&#xA;COPY . /app&#xA;WORKDIR /app&#xA;RUN pip install -r requirements.txt&#xA;ENTRYPOINT [ &#34;python&#34; ]&#xA;CMD [ &#34;app.py&#34; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s see what each of these commands means -&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt; FROM python - gets a Python distribution from Docker Images &lt;br&gt; &lt;br&gt; WORKDIR Changes the working directory &lt;br&gt; &lt;br&gt; COPY Copies the content of Workdir into a new directory &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build the Docker Images -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd quote_gen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build --tag quote-gen-service .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd quote_disp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build --tag quote-disp-service .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run Docker Container&lt;/p&gt; &#xA;&lt;p&gt;With the Docker images created, let’s get the containers up and running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd quote_gen&#xA;docker run --name quote-gen-container -p 84:84 quote-gen-service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd quote_disp&#xA;docker run --name quote-disp-container -p 85:85 quote-disp-service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let’s run docker container ls to get a list of containers created&lt;/p&gt; &#xA;&lt;p&gt;Create Docker Network&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker network create quote-network&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and running the followng command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker network inspect quote-network&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s add our containers to the quote-network&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker network connect quote-network quote-gen-container&#xA;docker network connect quote-network quote-disp-container&#xA;docker network inspect quote-network&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You see the following output -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[&#xA;    {&#xA;        &#34;Name&#34;: &#34;quote-network&#34;,&#xA;        &#34;Id&#34;: &#34;999c81eb87c4b687921ea474abd1e59875447a96d2477ae190dcccc40f882d8a&#34;,&#xA;        &#34;Created&#34;: &#34;2023-04-24T04:45:15.9081804Z&#34;,&#xA;        &#34;Scope&#34;: &#34;local&#34;,&#xA;        &#34;Driver&#34;: &#34;bridge&#34;,&#xA;        &#34;EnableIPv6&#34;: false,&#xA;        &#34;IPAM&#34;: {&#xA;            &#34;Driver&#34;: &#34;default&#34;,&#xA;            &#34;Options&#34;: {},&#xA;            &#34;Config&#34;: [&#xA;                {&#xA;                    &#34;Subnet&#34;: &#34;172.19.0.0/16&#34;,&#xA;                    &#34;Gateway&#34;: &#34;172.19.0.1&#34;&#xA;                }&#xA;            ]&#xA;        },&#xA;        &#34;Internal&#34;: false,&#xA;        &#34;Attachable&#34;: false,&#xA;        &#34;Ingress&#34;: false,&#xA;        &#34;ConfigFrom&#34;: {&#xA;            &#34;Network&#34;: &#34;&#34;&#xA;        },&#xA;        &#34;ConfigOnly&#34;: false,&#xA;        &#34;Containers&#34;: {&#xA;            &#34;2636f9d91e5468029981d499fc7e0b46a204d8fc3b16e5e7e6e912651ce8dd4a&#34;: {&#xA;                &#34;Name&#34;: &#34;quote-disp-container&#34;,&#xA;                &#34;EndpointID&#34;: &#34;a4eb7320b1585b43a10499a73059e8f50fb8d5e33f9aee433b1b7e5e0b1dee85&#34;,&#xA;                &#34;MacAddress&#34;: &#34;02:42:ac:13:00:03&#34;,&#xA;                &#34;IPv4Address&#34;: &#34;172.19.0.3/16&#34;,&#xA;                &#34;IPv6Address&#34;: &#34;&#34;&#xA;            },&#xA;            &#34;557e1ff9f220704ad9f76d94ebe5d3c433dc20ed44798831af6f2bfe68176583&#34;: {&#xA;                &#34;Name&#34;: &#34;quote-gen-container&#34;,&#xA;                &#34;EndpointID&#34;: &#34;191f2b22ec8a92256d47b152a06eeaeead9f05a13799f48d43d9c5410daceebb&#34;,&#xA;                &#34;MacAddress&#34;: &#34;02:42:ac:13:00:02&#34;,&#xA;                &#34;IPv4Address&#34;: &#34;172.19.0.2/16&#34;,&#xA;                &#34;IPv6Address&#34;: &#34;&#34;&#xA;            }&#xA;        },&#xA;        &#34;Options&#34;: {},&#xA;        &#34;Labels&#34;: {}&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s see if the dockers are communicating&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;StatusCode        : 200&#xA;StatusDescription : OK&#xA;Content           : &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;/static/css/style.css&#34;&amp;gt;&#xA;                    &amp;lt;title&amp;gt;Docker App Quote &amp;lt;/title&amp;gt;&#xA;                    &amp;lt;div class=&#34;screen&#34;&amp;gt;&#xA;                      &amp;lt;div class=&#34;screen-image&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;                      &amp;lt;div class=&#34;screen-overlay&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;                      &amp;lt;div class=&#34;screen-...&#xA;RawContent        : HTTP/1.1 200 OK&#xA;                    Connection: close&#xA;                    Content-Length: 503&#xA;                    Content-Type: text/html; charset=utf-8&#xA;                    Date: Mon, 24 Apr 2023 04:51:36 GMT&#xA;                    Server: Werkzeug/2.2.3 Python/3.8.16&#xA;&#xA;                    &amp;lt;link rel=&#34;stylesheet&#34; hre...&#xA;Forms             : {}&#xA;Headers           : {[Connection, close], [Content-Length, 503], [Content-Type, text/html; charset=utf-8], [Date, Mon, 24 Apr  &#xA;                    2023 04:51:36 GMT]...}&#xA;Images            : {}&#xA;InputFields       : {}&#xA;Links             : {@{innerHTML=; innerText=; outerHTML=&amp;lt;A class=link href=&#34;https://youtube.com/@Hyperplexed&#34;&#xA;                    target=_blank&amp;gt;&amp;lt;/A&amp;gt;; outerText=; tagName=A; class=link; href=https://youtube.com/@Hyperplexed;&#xA;                    target=_blank}}&#xA;ParsedHtml        : mshtml.HTMLDocumentClass&#xA;RawContentLength  : 503&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They seem to be working!&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s create a Docker Compose Manifest to orchestrate our services&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#34;3.7&#34;&#xA;services:&#xA;  web1:&#xA;    build: ./quote_gen&#xA;    container_name: gen&#xA;    ports:&#xA;      - &#34;5000:5000&#34;&#xA;  web2:&#xA;    build: ./quote_disp&#xA;    container_name: disp&#xA;    expose:&#xA;      - &#34;5000&#34;&#xA;    ports:&#xA;      - &#34;5001:5000&#34;&#xA;    depends_on:&#xA;      - web1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s understand the commands in our Compose YAML file -&lt;/p&gt; &#xA;&lt;p&gt;version: - Compose file versions that run our Docker Compose&lt;/p&gt; &#xA;&lt;p&gt;services: the components or services that run within the docker-compose manifest&lt;/p&gt; &#xA;&lt;p&gt;Eg - Our website is a service, we can have a database service or a unit testing service, an application server, etc&lt;/p&gt; &#xA;&lt;p&gt;Under service, we have our website - service name, build - looks for a docker image, context - specifies where to look&lt;/p&gt; &#xA;&lt;p&gt;ports: -80:80&lt;/p&gt; &#xA;&lt;p&gt;Run Docker Compose&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;[+] Running 3/3&#xA; - Network corise-zignite-devops-cc_default  Created                                                                      0.8s &#xA; - Container gen                             Created                                                                      0.6s&#xA; - Container disp                            Created                                                                      0.1s&#xA;Attaching to disp, gen&#xA;gen   |  * Serving Flask app &#39;app&#39;&#xA;gen   |  * Debug mode: on&#xA;gen   | WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. &#xA;gen   |  * Running on all addresses (0.0.0.0)&#xA;gen   |  * Running on http://127.0.0.1:5000&#xA;gen   |  * Running on http://172.26.0.2:5000&#xA;gen   | Press CTRL+C to quit&#xA;gen   |  * Restarting with stat&#xA;gen   |  * Debugger is active!&#xA;gen   |  * Debugger PIN: 930-011-562&#xA;disp  |  * Serving Flask app &#39;app&#39;&#xA;disp  |  * Debug mode: on&#xA;disp  | WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.&#xA;disp  |  * Running on all addresses (0.0.0.0)&#xA;disp  |  * Running on http://127.0.0.1:5000&#xA;disp  |  * Running on http://172.26.0.3:5000&#xA;disp  | Press CTRL+C to quit&#xA;disp  |  * Restarting with stat&#xA;disp  |  * Debugger is active!&#xA;disp  |  * Debugger PIN: 112-266-209&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;You can find a link to the Docker Compose tutorial &lt;a href=&#34;https://docs.docker.com/compose/gettingstarted/&#34;&gt;https://docs.docker.com/compose/gettingstarted/&lt;/a&gt;&lt;/h2&gt;</summary>
  </entry>
</feed>