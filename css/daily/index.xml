<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-10T01:25:51Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>piyushsachdeva/10weeksofcloudops</title>
    <updated>2024-04-10T01:25:51Z</updated>
    <id>tag:github.com,2024-04-10:/piyushsachdeva/10weeksofcloudops</id>
    <link href="https://github.com/piyushsachdeva/10weeksofcloudops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;10WeeksOfCloudops Challenge&lt;/h1&gt; &#xA;&lt;h2&gt;Why are we doing this challenge? ü§∑‚Äç‚ôÇÔ∏è&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Self Learning and Development üõ†Ô∏èüìö&lt;/li&gt; &#xA; &lt;li&gt;To gain hands-on experience in building real-time use cases.&lt;/li&gt; &#xA; &lt;li&gt;To develop the ability to justify your hands-on experience on your resume.&lt;/li&gt; &#xA; &lt;li&gt;Showcase your skills through GitHub, blogs, and social media.üöÄ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üîó Join our community üëá&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtube.com/@techtutorialswithpiyush&#34;&gt;&lt;img src=&#34;https://www.freeiconspng.com/thumbs/youtube-icon/video-youtube-icon--14.png&#34; height=&#34;60px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/FMtJ2bVRUE&#34;&gt;&lt;img src=&#34;https://img.icons8.com/color/2x/discord--v2.png&#34; height=&#34;60px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/piyushsachdeva/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/91791257/235086411-9ec7aa5e-c095-44ce-b9e6-57b3bc3fead2.png&#34; height=&#34;60px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/thecloudopscomm&#34;&gt;&lt;img src=&#34;https://i.postimg.cc/pVqVTNJd/X-logo.png&#34; height=&#34;60px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/thecloudopscomm/&#34;&gt;&lt;img src=&#34;https://img.icons8.com/fluency/2x/linkedin.png&#34; height=&#34;60px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.instagram.com/techtutorialswithpiyush/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/91791257/235086447-47658b7b-71fa-4baf-830a-3ba9b3a76a47.png&#34; height=&#34;60px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributions are welcome:&lt;/h3&gt; &#xA;&lt;p&gt;You can raise the pull request to contribute to the course material; do not forget to star the repository.&lt;/p&gt; &#xA;&lt;h2&gt;Frequently asked questions üëá&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;What is the #10WeeksOfCloudOps challenge?&lt;/strong&gt; The #10WeeksOfCloudOps challenge involves building 10 cloud and DevOps projects over 10 weeks, with one project per week.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;What are the benefits of taking this challenge?&lt;/strong&gt; This challenge is about learning together as a community, gaining hands-on experience, receiving feedback from IT professionals, and growing together.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;How do I submit my task?&lt;/strong&gt; To submit your task, could you create a blog post on your preferred blogging platform and share it on LinkedIn or Twitter? Mention me (Piyush Sachdeva) and use the hashtag #10WeeksOfCloudOps. I will be tracking submissions using this hashtag.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;In which cloud are we focusing on ‚òÅ?&lt;/strong&gt; You can complete the challenge using any of the three major cloud platforms: AWS, Azure, or GCP.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Which CICD tools are we focusing on?&lt;/strong&gt; You can use any Continuous Integration and Continuous Deployment (CICD) tool.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;What should I do if I get stuck?&lt;/strong&gt; If you encounter any issues or have questions, post them in the üìï-help channel. Someone from the community will assist you. Don&#39;t hesitate to ask for help!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Can I join the challenge late?&lt;/strong&gt; Absolutely! Feel free to join at any time. Remember, this is a learning opportunity, not a competition. We will review late submissions at the end of the 10th week, but priority will be given to those who submit on time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Will there be prizes for the winners?&lt;/strong&gt; Yes, there will be prizes at the end of the 10th week. While we don&#39;t have any sponsors yet, @Agile Guru and I (Piyush Sachdeva) will sponsor the prizes. Please contact me if you&#39;d like to contribute to this cause and support the prize fund. üéÅ&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>TheBridge-FullStackDeveloper/hooks</title>
    <updated>2024-04-10T01:25:51Z</updated>
    <id>tag:github.com,2024-04-10:/TheBridge-FullStackDeveloper/hooks</id>
    <link href="https://github.com/TheBridge-FullStackDeveloper/hooks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;CUSTOM HOOKS&lt;/h2&gt; &#xA;&lt;h3&gt;Creando un Hook Personalizado con useEffect y useState&lt;/h3&gt; &#xA;&lt;p&gt;En este ejercicio, crearemos un hook personalizado utilizando los hooks &lt;code&gt;useEffect&lt;/code&gt; y &lt;code&gt;useState&lt;/code&gt;. Los hooks personalizados nos permiten reutilizar l√≥gica en diferentes componentes.&lt;/p&gt; &#xA;&lt;p&gt;Con este hook conseguiremos hacer fetch a cualquier API para luego manejar los datos.&lt;/p&gt; &#xA;&lt;p&gt;Vamos a elegir las APIs de Pokemon y Rick and Morty, donde nos traeremos un personaje en cada caso:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  const urlPokemon = &#39;https://pokeapi.co/api/v2/pokemon/1&#39;;&#xA;  const urlRick = &#39;https://rickandmortyapi.com/api/character/1&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sigue estos pasos para crear un hook personalizado:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Crearemos nuestro custom hook en el archivo &lt;code&gt;hooks/useCustomHook.js&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Importa los hooks necesarios de React que vamos a usar&lt;/li&gt; &#xA; &lt;li&gt;Define tu funci√≥n de hook. El nombre de la funci√≥n debe comenzar con &lt;code&gt;use&lt;/code&gt; para indicar que es un hook&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Y ahora crea tu hook con &lt;code&gt;useEffect&lt;/code&gt; y &lt;code&gt;useState&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;Utilizando el Hook Personalizado&lt;/h3&gt; &#xA;&lt;p&gt;Para utilizar el hook personalizado en tus componentes, sigue estos pasos:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Importa el hook personalizado en tu archivo de componente, en este caso ser√° en &lt;code&gt;App.jsx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Llama al hook personalizado dentro de tu componente &lt;code&gt;App.jsx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Crearemos nuestra plantilla para poder renderizar el personaje de Pokemon con su nombre e imagen y el de Rick and Morty.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#xA;//ejemplo&#xA;&amp;lt;h2&amp;gt;Personaje Pokemon&amp;lt;/h2&amp;gt;&#xA;&amp;lt;p&amp;gt;aqu√≠ el nombre&amp;lt;/p&amp;gt;&#xA;&amp;lt;img src=&#34;aqui la imagen&#34;  /&amp;gt;&#xA;&#xA;&amp;lt;h2&amp;gt;Personaje Rick and Morty&amp;lt;/h2&amp;gt;&#xA;&amp;lt;p&amp;gt;aqu√≠ el nombre&amp;lt;/p&amp;gt;&#xA;&amp;lt;img src=&#34;aqui la imagen&#34;  /&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Una vez funcione puedes probar a hacerlo por componentes pas√°ndole las &lt;code&gt;props&lt;/code&gt; de nombre e imagen.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iamstevendao/vue-tel-input</title>
    <updated>2024-04-10T01:25:51Z</updated>
    <id>tag:github.com,2024-04-10:/iamstevendao/vue-tel-input</id>
    <link href="https://github.com/iamstevendao/vue-tel-input" rel="alternate"></link>
    <summary type="html">&lt;p&gt;International Telephone Input with Vue&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;100&#34; alt=&#34;vue-tel-input-logo&#34; src=&#34;https://vue-tel-input.iamstevendao.com/hero.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;vue-tel-input&lt;/h1&gt; &#xA;&lt;p&gt;International Telephone Input with Vue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/vue-tel-input&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/vue-tel-input.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iamstevendao/vue-tel-input&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/iamstevendao/vue-tel-input.svg?sanitize=true&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; alt=&#34;In-action GIF&#34; src=&#34;https://thumbs.gfycat.com/EducatedPoliteBluefintuna-size_restricted.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Documentation and Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vue-tel-input.iamstevendao.com/&#34;&gt;Visit the website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Vue 2 Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vue-tel-input@legacy&lt;/code&gt;: &lt;a href=&#34;https://vue-tel-input.iamstevendao.com/guide/legacy.html&#34;&gt;Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iamstevendao/vue-tel-input/releases&#34;&gt;Go to Github Releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the plugin:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install vue-tel-input&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the plugin into your app:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import Vue from &#39;vue&#39;;&#xA;import VueTelInput from &#39;vue-tel-input&#39;;&#xA;import &#39;vue-tel-input/vue-tel-input.css&#39;;&#xA;&#xA;const app = createApp(App);&#xA;app.use(VueTelInput);&#xA;app.mount(&#39;#app&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iamstevendao/vue-tel-input/main/#installation&#34;&gt;More info on installation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the &lt;code&gt;vue-tel-input&lt;/code&gt; component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;vue-tel-input v-model=&#34;phone&#34;&amp;gt;&amp;lt;/vue-tel-input&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;npm&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  npm install vue-tel-input&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the plugin into Vue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { createApp } from &#39;vue&#39;;&#xA;import App from &#39;./App.vue&#39;;&#xA;import VueTelInput from &#39;vue-tel-input&#39;;&#xA;import &#39;vue-tel-input/vue-tel-input.css&#39;;&#xA;&#xA;const globalOptions = {&#xA;  mode: &#39;auto&#39;,&#xA;};&#xA;&#xA;const app = createApp(App);&#xA;app.use(VueTelInput, globalOptions); // Define default global options here (optional)&#xA;app.mount(&#39;#app&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;View all available options in &lt;a href=&#34;https://vue-tel-input.iamstevendao.com/usage/props.html&#34;&gt;Props&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Or use the component directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;template&amp;gt;&#xA;  &amp;lt;vue-tel-input v-model=&#34;phone&#34; mode=&#34;international&#34;&amp;gt;&amp;lt;/vue-tel-input&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&#xA;&amp;lt;script&amp;gt;&#xA;  import { ref } from &#39;vue&#39;;&#xA;  import { VueTelInput } from &#39;vue-tel-input&#39;;&#xA;  import &#39;vue-tel-input/vue-tel-input.css&#39;;&#xA;&#xA;  export default {&#xA;    components: {&#xA;      VueTelInput,&#xA;    },&#xA;&#xA;    setup() {&#xA;      const phone = ref(null);&#xA;&#xA;      return {&#xA;        value,&#xA;      };&#xA;    },&#xA;  };&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Browser&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/vue-tel-input&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/vue-tel-input/dist/vue-tel-input.css&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;If Vue is detected in the Page, the plugin is installed automatically.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Otherwise, manually install the plugin into Vue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;app.use(window[&#39;vue-tel-input&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Component lazy loading&lt;/h3&gt; &#xA;&lt;p&gt;Since the library is about 200kb of JavaScript and 100kb of CSS in order to improve initial page loading time you might consider importing it asynchronously only when user navigates to the page where the library is actually needed. The technique is called &lt;a href=&#34;https://webpack.js.org/guides/lazy-loading/&#34;&gt;Lazy Load&lt;/a&gt; and you can use it in some modern bundlers like Webpack and Rollup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- your-component.vue--&amp;gt;&#xA;&amp;lt;template&amp;gt;&#xA;  &amp;lt;vue-tel-input v-model=&#34;value&#34;&amp;gt;&amp;lt;/vue-tel-input&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  const VueTelInput = () =&amp;gt;&#xA;    Promise.all([&#xA;      import(/* webpackChunkName: &#34;chunk-vue-tel-input&#34; */ &#39;vue-tel-input&#39;),&#xA;      import(/* webpackChunkName: &#34;chunk-vue-tel-input&#34; */ &#39;vue-tel-input/vue-tel-input.css&#39;),&#xA;    ]).then(([{ VueTelInput }]) =&amp;gt; VueTelInput);&#xA;&#xA;  export default {&#xA;    components: {&#xA;      VueTelInput,&#xA;    },&#xA;  };&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you see, we don&#39;t use Vue SFC &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; tag here to import component&#39;s css as it would result in CSS going to the main/vendors bundle instead of being downloaded on demand.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Clone the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git clone https://github.com/iamstevendao/vue-tel-input.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to the project directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  cd vue-tel-input&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the server&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2018 Steven Dao. Released under the &lt;a href=&#34;https://github.com/iamstevendao/vue-tel-input/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;made with ‚ù§ by &lt;a href=&#34;https://github.com/iamstevendao&#34;&gt;Steven&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>