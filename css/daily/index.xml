<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub CSS Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-07T01:37:39Z</updated>
  <subtitle>Daily Trending of CSS in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nimsandu/spicetify-bloom</title>
    <updated>2022-07-07T01:37:39Z</updated>
    <id>tag:github.com,2022-07-07:/nimsandu/spicetify-bloom</id>
    <link href="https://github.com/nimsandu/spicetify-bloom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spicetify theme inspired by Microsoft&#39;s Fluent Design&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Bloom&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/khanhas/spicetify-cli&#34;&gt;Spicetify&lt;/a&gt; theme inspired by Microsoft&#39;s &lt;a href=&#34;https://www.microsoft.com/design/fluent&#34;&gt;Fluent Design System&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h2&gt;please star and help to shape the future by commenting&lt;/h2&gt;  &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nimsandu/spicetify-bloom/main/Dark-1.png&#34; alt=&#34;dark-1&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;h2&gt;Dependencies&lt;/h2&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/khanhas/spicetify-cli&#34;&gt;Spicetify&lt;/a&gt; version 2.7.0 or newer, latest version always recommended.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Segoe#Segoe_UI&#34;&gt;Segoe UI&lt;/a&gt; font family, comes pre-installed on Windows Vista and newer. Segoe UI versions older than 5.37 (older than Windows 8.0) are not officially supported but may work.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h2&gt;Installation&lt;/h2&gt; &#xA; &lt;h3&gt;Windows (PowerShell)&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-WebRequest -UseBasicParsing &#34;https://raw.githubusercontent.com/nimsandu/spicetify-bloom/main/install.ps1&#34; | Invoke-Expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Linux/macOS (Bash)&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://raw.githubusercontent.com/nimsandu/spicetify-bloom/main/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Important&lt;/h3&gt; &#xA; &lt;p&gt;if you install theme using above command you dont need to do anything else to apply the theme&lt;/p&gt; &#xA; &lt;h3&gt;OR DOWNLOAD Release script (powershell or shell) and run on your machine&lt;/h3&gt; &#xA; &lt;h3&gt;Spicetify Marketplace&lt;/h3&gt; &#xA; &lt;p&gt;You may alternatively install spicetify-fluent from within the Spicetify Marketplace.&lt;br&gt; Simply install the &lt;a href=&#34;https://github.com/spicetify/spicetify-marketplace&#34;&gt;spicetify-marketplace&lt;/a&gt; by following it&#39;s installation instructions and look for and install the theme from within the Marketplace Button.&lt;/p&gt; &#xA; &lt;h3&gt;Important&lt;/h3&gt; &#xA; &lt;p&gt;if you are experiencing bugs after installing theme via marketplace then proceed following steps 1-reset the marketplace by clicking the settings icon on marketplace&amp;gt;scroll all the way down&amp;gt;click [reset marketplace] 2run following commands on appropriate shell &amp;lt;&lt;/p&gt; &#xA; &lt;h1&gt;Windows (PowerShell)&lt;/h1&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-WebRequest -UseBasicParsing &#34;https://raw.githubusercontent.com/nimsandu/spicetify-bloom/main/install.ps1&#34; | Invoke-Expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h1&gt;Linux/macOS (Bash)&lt;/h1&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://raw.githubusercontent.com/nimsandu/spicetify-bloom/main/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;h3&gt;Important&lt;/h3&gt; &#xA; &lt;p&gt;For the sidebar playlists to show properly, ensure that these two lines are added in the Patch section of your &lt;code&gt;config-xpui.ini&lt;/code&gt; file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[Patch]&#xA;xpui.js_find_8008 = ,(\w+=)32,&#xA;xpui.js_repl_8008 = ,${1}56,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h2&gt;Customization&lt;/h2&gt; &#xA; &lt;p&gt;apply the theme using these commands&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;spicetify config current_theme Bloom&#xA;spicetify config color_scheme dark&#xA;spicetify apply&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;More Options&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;You can change the accent color in the theme folder&#39;s color.ini file.&lt;/li&gt; &#xA;  &lt;li&gt;If you are using Windows, you can hide the window controls by adding the flag &lt;code&gt;--transparent-window-controls&lt;/code&gt; after Spotify.exe in your Spotify shortcut.&lt;/li&gt; &#xA;  &lt;li&gt;Use &#34;Sidebar config&#34; in the Spotify profile menu to hide/unhide and stick/unstick the Liked Songs and My Episodes icons in the sidebar.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h2&gt;Credits&lt;/h2&gt; &#xA; &lt;p&gt;special thanks and the concept belongs to williamckha another thanx for @dilith the milkgod customized the theme by williamckha (&lt;a href=&#34;https://github.com/williamckha/spicetify-fluent&#34;&gt;https://github.com/williamckha/spicetify-fluent&lt;/a&gt;) Based off &lt;a href=&#34;https://github.com/schnensch0/ziro&#34;&gt;Ziro&lt;/a&gt; theme by &lt;a href=&#34;https://github.com/schnensch0&#34;&gt;schnensch&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/microsoft/fluentui-system-icons&#34;&gt;Fluent UI System Icons&lt;/a&gt; by Microsoft Corporation&lt;br&gt; &lt;a href=&#34;https://github.com/phosphor-icons/phosphor-icons&#34;&gt;Phosphor Icons&lt;/a&gt; by Phosphor Icons&lt;/p&gt; &#xA; &lt;h2&gt;License&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nimsandu/spicetify-bloom/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>reduxjs/redux-essentials-example-app</title>
    <updated>2022-07-07T01:37:39Z</updated>
    <id>tag:github.com,2022-07-07:/reduxjs/redux-essentials-example-app</id>
    <link href="https://github.com/reduxjs/redux-essentials-example-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Example app for the Redux Essentials tutorial&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Redux Essentials Tutorial Example&lt;/h1&gt; &#xA;&lt;p&gt;This project contains the setup and code from the &#34;Redux Essentials&#34; tutorial in the Redux docs ( &lt;a href=&#34;https://redux.js.org/tutorials/essentials/part-1-overview-concepts&#34;&gt;https://redux.js.org/tutorials/essentials/part-1-overview-concepts&lt;/a&gt; ).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch has a single commit that already has the initial project configuration in place. You can use this to follow along with the instructions from the tutorial.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;tutorial-steps&lt;/code&gt; branch has the actual code commits from the tutorial. You can look at these to see how the official tutorial actually implements each piece of functionality along the way.&lt;/p&gt; &#xA;&lt;p&gt;This project was bootstrapped with &lt;a href=&#34;https://github.com/facebook/create-react-app&#34;&gt;Create React App&lt;/a&gt;, using the &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt; and &lt;a href=&#34;https://redux-toolkit.js.org/&#34;&gt;Redux Toolkit&lt;/a&gt; template.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are using Node 17, this project may not start correctly due to a known issue with Webpack and Node&#39;s OpenSSL changes, which causes an error message containing &lt;code&gt;ERR_OSSL_EVP_UNSUPPORTED&lt;/code&gt;.&lt;br&gt; You can work around this by setting a &lt;code&gt;NODE_OPTIONS=--openssl-legacy-provider&lt;/code&gt; environment variable before starting the dev server. Details: &lt;a href=&#34;https://github.com/webpack/webpack/issues/14532#issuecomment-947012063&#34;&gt;https://github.com/webpack/webpack/issues/14532#issuecomment-947012063&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Available Scripts&lt;/h2&gt; &#xA;&lt;p&gt;In the project directory, you can run:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;yarn start&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Runs the app in the development mode.&lt;br&gt; Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to view it in the browser.&lt;/p&gt; &#xA;&lt;p&gt;The page will reload if you make edits.&lt;br&gt; You will also see any lint errors in the console.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;yarn test&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Launches the test runner in the interactive watch mode.&lt;br&gt; See the section about &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/running-tests&#34;&gt;running tests&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;yarn build&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt; It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt; &#xA;&lt;p&gt;The build is minified and the filenames include the hashes.&lt;br&gt; Your app is ready to be deployed!&lt;/p&gt; &#xA;&lt;p&gt;See the section about &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/deployment&#34;&gt;deployment&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;You can learn more in the &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/getting-started&#34;&gt;Create React App documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn React, check out the &lt;a href=&#34;https://reactjs.org/&#34;&gt;React documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>learn-co-curriculum/phase-1-mock-cc-ramen-rater</title>
    <updated>2022-07-07T01:37:39Z</updated>
    <id>tag:github.com,2022-07-07:/learn-co-curriculum/phase-1-mock-cc-ramen-rater</id>
    <link href="https://github.com/learn-co-curriculum/phase-1-mock-cc-ramen-rater" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Phase 1 Mock Code Challenge: Ramen Rater&lt;/h1&gt; &#xA;&lt;h2&gt;Learning Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Access information from an API using a GET request and use it to update the DOM&lt;/li&gt; &#xA; &lt;li&gt;Listen for user events and update the DOM in response&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Today you&#39;ll be building an app for rating ramen. You will be using a local API and building out the frontend for our app.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Use this gif as an example of how the app should work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://curriculum-content.s3.amazonaws.com/phase-1/phase-1-mock-cc-ramen-rater/demo-gif.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;json-server --watch db.json&lt;/code&gt; to get the backend started&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;index.html&lt;/code&gt; file on your browser&lt;/li&gt; &#xA; &lt;li&gt;Write your code in the &lt;code&gt;index.js&lt;/code&gt; file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Endpoints&lt;/h2&gt; &#xA;&lt;p&gt;Your base URL for your API will be: &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The endpoints you may need are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/ramens&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/ramens/:id&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feel free to add any additional classes or ids to any elements in the HTML file as you see fit.&lt;/p&gt; &#xA;&lt;h2&gt;Core Deliverables&lt;/h2&gt; &#xA;&lt;p&gt;As a user, I can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See all ramen images in the &lt;code&gt;div&lt;/code&gt; with the id of &lt;code&gt;ramen-menu&lt;/code&gt;. When the page loads, request the data from the server to get all the ramen objects. Then, display the image for each of the ramen using an &lt;code&gt;img&lt;/code&gt; tag inside the &lt;code&gt;#ramen-menu&lt;/code&gt; div.&lt;/li&gt; &#xA; &lt;li&gt;Click on an image from the &lt;code&gt;#ramen-menu&lt;/code&gt; div and see all the info about that ramen displayed inside the &lt;code&gt;#ramen-detail&lt;/code&gt; div and where it says &lt;code&gt;insert comment here&lt;/code&gt; and &lt;code&gt;insert rating here&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a new ramen after submitting the &lt;code&gt;new-ramen&lt;/code&gt; form. The new ramen should be added to the&lt;code&gt;#ramen-menu&lt;/code&gt; div. The new ramen does not need to persist; in other words, if you refresh the page, it&#39;s okay that the new ramen is no longer on the page.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced Deliverables&lt;/h2&gt; &#xA;&lt;p&gt;These deliverables are not required to pass the code challenge, but if you have the extra time, or even after the code challenge, they are a great way to stretch your skills.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you are going to attempt these advanced deliverables, please be sure to have a working commit with all the Core Deliverables first!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;As a user, I can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the details for the first ramen as soon as the page loads (without clicking on an image)&lt;/li&gt; &#xA; &lt;li&gt;Update the rating and comment for a ramen by submitting a form. Changes should be reflected on the frontend. No need to persist. You can add this HTML to the &lt;code&gt;index.html&lt;/code&gt; file to create the edit form:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form id=&#34;edit-ramen&#34;&amp;gt;&#xA;  &amp;lt;h4&amp;gt;Update the Featured Ramen&amp;lt;/h4&amp;gt;&#xA;  &amp;lt;label for=&#34;rating&#34;&amp;gt;Rating: &amp;lt;/label&amp;gt;&#xA;  &amp;lt;input type=&#34;number&#34; name=&#34;rating&#34; id=&#34;new-rating&#34; /&amp;gt;&#xA;  &amp;lt;label for=&#34;new-comment&#34;&amp;gt;Comment: &amp;lt;/label&amp;gt;&#xA;  &amp;lt;textarea name=&#34;new-comment&#34; id=&#34;new-comment&#34;&amp;gt;&amp;lt;/textarea&amp;gt;&#xA;  &amp;lt;input type=&#34;submit&#34; value=&#34;Update&#34; /&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Delete a ramen (you can add a &#34;delete&#34; button if you&#39;d like, or use an existing element to handle the delete action). The ramen should be removed from the &lt;code&gt;ramen-menu&lt;/code&gt; div, and should not be displayed in the &lt;code&gt;ramen-detail&lt;/code&gt; div. No need to persist.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extra Advanced Deliverables&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need these endpoints for the advanced deliverables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;POST &lt;code&gt;/ramens&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;DELETE &lt;code&gt;/ramens/:id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;PATCH &lt;code&gt;/ramens/:id&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As a user, I can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;persist my updates to a ramen&#39;s rating and comment. (PATCH request)&lt;/li&gt; &#xA; &lt;li&gt;persist new ramens that I create (POST request)&lt;/li&gt; &#xA; &lt;li&gt;persist any ramen deletions (DELETE request)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>