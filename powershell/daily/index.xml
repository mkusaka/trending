<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-07T01:35:20Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>azuwis/pianotrans</title>
    <updated>2022-12-07T01:35:20Z</updated>
    <id>tag:github.com,2022-12-07:/azuwis/pianotrans</id>
    <link href="https://github.com/azuwis/pianotrans" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple GUI for ByteDance&#39;s Piano Transcription with Pedals&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Simple GUI for ByteDance&#39;s Piano Transcription with Pedals&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/azuwis/pianotrans/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/azuwis/pianotrans/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bytedance/piano_transcription&#34;&gt;ByteDance&#39;s Piano Transcription&lt;/a&gt; is the PyTorch implementation of the piano transcription system, &#34;High-resolution Piano Transcription with Pedals by Regressing Onsets and Offsets Times &lt;code&gt;[1]&lt;/code&gt;&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Using this, we can transcribe piano recordings into MIDI files with pedals.&lt;/p&gt; &#xA;&lt;p&gt;This is a simple GUI and packaging for Windows and &lt;a href=&#34;https://nixos.org&#34;&gt;Nix on Linux/macOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/azuwis/pianotrans/master/screenshots/windows.png&#34; width=&#34;49%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/azuwis/pianotrans/master/screenshots/macos.png&#34; width=&#34;49%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/azuwis/pianotrans/master/screenshots/midi.png&#34; width=&#34;98.6%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Requirement&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OS: Windows 7 or later (64-bit), Linux, macOS (Intel/M1)&lt;/li&gt; &#xA; &lt;li&gt;Memory: at least 4G&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only Windows 10, Debian Linux 10, and macOS 12.1 M1 are tested.&lt;/p&gt; &#xA;&lt;h3&gt;How to use on Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads&#34;&gt;Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017 and 2019&lt;/a&gt; &lt;code&gt;vc_redist_x64.exe&lt;/code&gt; and install&lt;/li&gt; &#xA; &lt;li&gt;Download and unpack &lt;a href=&#34;https://github.com/azuwis/PianoTrans/releases/download/v1.0/PianoTrans-v1.0.7z&#34;&gt;PianoTrans-v1.0.7z&lt;/a&gt; (1.5GB download, unpack using &lt;a href=&#34;https://www.7-zip.org/download.html&#34;&gt;7zip&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Close other apps to free memory, need at least 2G free memory&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;PianoTrans.exe&lt;/code&gt; in &lt;code&gt;PianoTrans&lt;/code&gt; directory&lt;/li&gt; &#xA; &lt;li&gt;Choose audio/video files, hold &lt;code&gt;CTRL&lt;/code&gt; to select multiple files&lt;/li&gt; &#xA; &lt;li&gt;Result MIDI files are in the same directory as the input files&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you want right click menu, run &lt;code&gt;RightClickMenuRegister.bat&lt;/code&gt;, then you can select multiple audio/video files, right click and choose &lt;code&gt;Piano Transcribe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PianoTrans automatically uses GPU for inference, if you encounter any problem, you can try &lt;code&gt;PianoTrans-CPU.bat&lt;/code&gt; to force using CPU.&lt;/p&gt; &#xA;&lt;h3&gt;How to use on Linux/macOS using Nix&lt;/h3&gt; &#xA;&lt;p&gt;Note: This howto is for &lt;a href=&#34;https://nixos.org&#34;&gt;Nix&lt;/a&gt; on Linux/macOS, if you don&#39;t use Nix, you can also follow the upstream &lt;a href=&#34;https://github.com/qiuqiangkong/piano_transcription_inference&#34;&gt;install and usage&lt;/a&gt; guide for Python pip instead.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the terminal&lt;/li&gt; &#xA; &lt;li&gt;Install and setup Nix: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh &amp;lt;(curl -L https://nixos.org/nix/install) --daemon&#xA;mkdir -p ~/.config/nix&#xA;echo &#39;experimental-features = nix-command flakes&#39; &amp;gt; ~/.config/nix/nix.conf&#xA;&lt;/code&gt;&lt;/pre&gt; See &lt;a href=&#34;https://nixos.org/download.html&#34;&gt;https://nixos.org/download.html&lt;/a&gt; for more details&lt;/li&gt; &#xA; &lt;li&gt;Use Nix to install pianotrans: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix profile install github:azuwis/pianotrans&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pianotrans&lt;/code&gt; to open the GUI, choose audio/video files, hold &lt;code&gt;âŒ˜&lt;/code&gt; to select multiple files&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For CLI usage, run &lt;code&gt;pianotrans file1 file2 ...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To upgrade pianotrans, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nix profile list&#xA;0 github:azuwis/pianotrans#defaultPackage.aarch64-linux github:azuwis/pianotrans/e19d5fd12f4295816fad49f6398e2e53ed2d2b7a#defaultPackage.aarch64-linux /nix/store/zdalndvcralish8d43drzslv0p4pm97v-python3.9-pianotrans-0.2.1&#xA;# list nix profiles, `0` is pianotrans&#xA;$ nix --option tarball-ttl 1 profile upgrade 0&#xA;$ nix profile list&#xA;0 github:azuwis/pianotrans#defaultPackage.aarch64-linux github:azuwis/pianotrans/e944720dd0dfcc2b87dcc39c1fdaab086eba4ca6#defaultPackage.aarch64-linux /nix/store/rv5iikrdvc7jrc7mqs8mkc21qh2gklhx-python3.9-pianotrans-1.0&#xA;# pianotrans upgraded to v1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;p&gt;Q: Can you improve transcription result?&lt;/p&gt; &#xA;&lt;p&gt;A: This project is about packaging for &lt;a href=&#34;https://github.com/bytedance/piano_transcription&#34;&gt;https://github.com/bytedance/piano_transcription&lt;/a&gt;, as long as it gives you MIDI files, all other issues are out of scope of this project.&lt;/p&gt; &#xA;&lt;p&gt;You should report to the upstream project here &lt;a href=&#34;https://github.com/bytedance/piano_transcription/issues&#34;&gt;https://github.com/bytedance/piano_transcription/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Changelog&lt;/h3&gt; &#xA;&lt;h4&gt;[1.0] - 2022-02-21&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support Linux/macOS using Nix&lt;/li&gt; &#xA; &lt;li&gt;All platforms: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add real GUI alongside CLI&lt;/li&gt; &#xA;   &lt;li&gt;GUI allow adding files to transcribe queue&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Windows: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Right-click menu supports multiple files (need to re-run &lt;code&gt;RightClickMenuRegister.bat&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Update pytorch to 1.10.2&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;[0.2.1] - 2021-12-23&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update pytorch to 1.10.1.&lt;/li&gt; &#xA; &lt;li&gt;Update piano-transcription-inference to 0.0.5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;[0.2] - 2021-09-27&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update pytorch to 1.9.1.&lt;/li&gt; &#xA; &lt;li&gt;Add PianoTrans-CPU.bat to force using CPU for inference.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;[0.1] - 2021-02-02&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initial release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cite&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; Qiuqiang Kong, Bochen Li, Xuchen Song, Yuan Wan, and Yuxuan Wang. &#34;High-resolution Piano Transcription with Pedals by Regressing Onsets and Offsets Times.&#34; arXiv preprint arXiv:2010.01815 (2020). &lt;a href=&#34;https://arxiv.org/pdf/2010.01815.pdf&#34;&gt;[pdf]&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>potatoqualitee/fossilize</title>
    <updated>2022-12-07T01:35:20Z</updated>
    <id>tag:github.com,2022-12-07:/potatoqualitee/fossilize</id>
    <link href="https://github.com/potatoqualitee/fossilize" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mastodon Backup GitHub Action&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fossilize - Mastodon account backup tool&lt;/h1&gt; &#xA;&lt;p&gt;This Action will help you backup Mastodon account items to CSV files, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follows&lt;/li&gt; &#xA; &lt;li&gt;Mutes&lt;/li&gt; &#xA; &lt;li&gt;Account blocks&lt;/li&gt; &#xA; &lt;li&gt;Lists&lt;/li&gt; &#xA; &lt;li&gt;Bookmarks&lt;/li&gt; &#xA; &lt;li&gt;Domain blocks&lt;/li&gt; &#xA; &lt;li&gt;Followers&lt;/li&gt; &#xA; &lt;li&gt;Posts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The export is performed using the Mastodon API and an Access Token.&lt;/p&gt; &#xA;&lt;p&gt;Note that Followers and Posts cannot be imported using Mastodon&#39;s import web interface. Also, posts are exported in JSON format because they are more complex.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s how you&#39;d export your follows, lists, blocks, mutes, domain_blocks, bookmarks, followers, and posts if your account is on the dataplatform.social Mastodon instance. This will export the files to &lt;code&gt;./backups&lt;/code&gt; then attach a zip of the &lt;code&gt;./backups&lt;/code&gt; as an artifact to the workflow run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: Backup account to files&#xA;  uses: potatoqualitee/fossilize@v1&#xA;    with:&#xA;        server: dataplatform.social&#xA;    env:&#xA;        ACCESS_TOKEN: &#34;${{ secrets.ACCESS_TOKEN }}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that Mastodon limits API calls to 300 per 5 minutes, which averages 1 second so each call will have a delay of one second, so that&#39;s why there seems to be a slight delay.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Pre-requisites&lt;/h2&gt; &#xA;&lt;h3&gt;Get a Mastodon Bearer Token&lt;/h3&gt; &#xA;&lt;p&gt;A Mastodon token is required for this Action to work. Fortuantely, it&#39;s very easy to get one.&lt;/p&gt; &#xA;&lt;p&gt;Go to your Mastodon profile/client/webpage and click Preferences -&amp;gt; Development -&amp;gt; New Application -&amp;gt; Application name: Whatever you like, I named mine Imports -&amp;gt; Limit Permissions (optional) -&amp;gt; Submit&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you limit your permissions too much when you create the app, you may need to recreate it. I was too strict with my permissions and it &lt;em&gt;looked&lt;/em&gt; like I could edit them but the edit is like a secondary scope&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Click new application link -&amp;gt; Your access token&lt;/p&gt; &#xA;&lt;h3&gt;Add GitHub Secrets&lt;/h3&gt; &#xA;&lt;p&gt;Once you have your authentication information, you will need to them to your &lt;a href=&#34;https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/managing-encrypted-secrets-for-your-repository-and-organization-for-github-codespaces#adding-secrets-for-a-repository&#34;&gt;repository secrets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I named my secret &lt;code&gt;ACCESS_TOKEN&lt;/code&gt;. You can use any secretname you want, though you must ensure that your environmental variables are named appropriately, as seen in the sample code.&lt;/p&gt; &#xA;&lt;h3&gt;Create workflows&lt;/h3&gt; &#xA;&lt;p&gt;Finally, create a workflow &lt;code&gt;.yml&lt;/code&gt; file in your repositories &lt;code&gt;.github/workflows&lt;/code&gt; directory. An &lt;a href=&#34;https://raw.githubusercontent.com/potatoqualitee/fossilize/main/#example-workflow&#34;&gt;example workflow&lt;/a&gt; is available below. For more information, reference the GitHub Help Documentation for &lt;a href=&#34;https://help.github.com/en/articles/configuring-a-workflow#creating-a-workflow-file&#34;&gt;Creating a workflow file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Inputs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;server&lt;/code&gt; - Your Mastodon server. If you are &lt;a href=&#34;mailto:dbatools@dataplatform.social&#34;&gt;dbatools@dataplatform.social&lt;/a&gt;, this would be dataplatform.social.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;path&lt;/code&gt; - The path to the directory that will hold the CSV files, defaults to &lt;code&gt;./backups&lt;/code&gt;. This Action will create the directory if it does not exist.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt; - Which items to backup. Options include: follows, lists, blocks, mutes, domain_blocks, bookmarks, followers, posts and all. Defaults to all.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;auto-artifact&lt;/code&gt; - Attach the csv files as an artifact to this workflow. Default is true.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;artifact-name&lt;/code&gt; - The name of the artifact. Default is mastodon-backup.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;verbose&lt;/code&gt; - Show verbose output. Defaults to true.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Outputs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;csv-path&lt;/code&gt; - The backup directory file path&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example workflows&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;Fossilize&lt;/code&gt; action to backup your account to CSV each night at midnight and attach the zip as an artifact&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Backup Mastodon Account&#xA;on:&#xA;  workflow_dispatch:&#xA;  schedule:&#xA;    - cron: &#34;0 0 * * *&#34;&#xA;jobs:&#xA;  backup:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - name: Checkout the code&#xA;        uses: actions/checkout@v3&#xA;&#xA;      - name: Backup Mastodon Account&#xA;        uses: potatoqualitee/fossilize@v1&#xA;        id: backup&#xA;        with:&#xA;          server: dataplatform.social&#xA;        env:&#xA;          ACCESS_TOKEN: &#34;${{ secrets.ACCESS_TOKEN }}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s some extra examples for the inputs.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Input&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Another Example&lt;/th&gt; &#xA;   &lt;th&gt;And Another&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;server&lt;/td&gt; &#xA;   &lt;td&gt;dataplatform.social&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;mailto:dbatools@dataplatform.social&#34;&gt;dbatools@dataplatform.social&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dataplatform.social&#34;&gt;https://dataplatform.social&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;td&gt;/tmp/backups&lt;/td&gt; &#xA;   &lt;td&gt;./backups&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Want to run this locally?&lt;/h3&gt; &#xA;&lt;p&gt;Just add your &lt;code&gt;$env:ACCESS_TOKEN&lt;/code&gt; environmental variables to your &lt;code&gt;$profile&lt;/code&gt; and reload, clone the repo, change directories, modify this command and run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;./main.ps1 -Server yourinstance.tld -Path C:\temp\backups&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;You may also enjoy...&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/actions/mastodon-influx&#34;&gt;Mastodon Influx&lt;/a&gt; - This Action will help you import CSV files to Mastodon, including: Follows, Mutes, Account blocks, Lists, Bookmarks, and Domain blocks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/actions/twitter-exodus&#34;&gt;Twitter Exodus&lt;/a&gt; - This Action helps Twitter communities find members on Mastodon. Searches lists, hashtags, account followers and more for Mastodon links in their name, bio or pinned tweet. Once found, their info is exported to a CSV file that can be imported into Mastodon.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netnerds.net/2022/11/alias-mastodon-github-pages/&#34;&gt;Using GitHub Pages to Setup an Alias on Mastodon&lt;/a&gt; - This tutorial can help you keep your social media presence without running your own Mastodon server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;p&gt;You tell me! I&#39;m open to suggestions. But also&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add more account compontents after I make a Mastodon module, then I can just export it from there&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The scripts and documentation in this project are released under the &lt;a href=&#34;https://raw.githubusercontent.com/potatoqualitee/fossilize/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>