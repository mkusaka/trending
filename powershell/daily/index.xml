<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-27T01:42:07Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>susMdT/SharpAgent</title>
    <updated>2023-02-27T01:42:07Z</updated>
    <id>tag:github.com,2023-02-27:/susMdT/SharpAgent</id>
    <link href="https://github.com/susMdT/SharpAgent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C# havoc implant&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SharpAgent&lt;/h1&gt; &#xA;&lt;p&gt;C# havoc implant&lt;/p&gt; &#xA;&lt;p&gt;A .NET Framework test agent for Havoc C2. I just wanna learn how to make c2 implants. Will receive updates for now.&lt;br&gt; Just modify the handler to your teamserver. Also it&#39;s probably really buggy right now.&lt;/p&gt; &#xA;&lt;p&gt;Supports http/s, but can only call back to one host address&lt;br&gt; Arguments with multiple spaces are buggy right now&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;exit&lt;/td&gt; &#xA;   &lt;td&gt;Tasks the implant to exit&lt;/td&gt; &#xA;   &lt;td&gt;exit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ls&lt;/td&gt; &#xA;   &lt;td&gt;List directories&lt;/td&gt; &#xA;   &lt;td&gt;ls \program files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;shell&lt;/td&gt; &#xA;   &lt;td&gt;Run a command via cmd.exe /c&lt;/td&gt; &#xA;   &lt;td&gt;shell net localgroup &#34;Printer Operators&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;upload&lt;/td&gt; &#xA;   &lt;td&gt;Upload a file&lt;/td&gt; &#xA;   &lt;td&gt;upload /etc/passwd \windows\temp\bruh.txt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;download&lt;/td&gt; &#xA;   &lt;td&gt;Download a file&lt;/td&gt; &#xA;   &lt;td&gt;download \windows\temp\bruh.txt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bofexec*&lt;/td&gt; &#xA;   &lt;td&gt;Run a beacon object file in memory&lt;/td&gt; &#xA;   &lt;td&gt;bofexec /opt/whoami.x64.o&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inline_assembly&lt;/td&gt; &#xA;   &lt;td&gt;Run a .NET assembly in memory&lt;/td&gt; &#xA;   &lt;td&gt;inline_assembly /opt/Seatbelt.exe&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inline_pe&lt;/td&gt; &#xA;   &lt;td&gt;Run a PE in memory&lt;/td&gt; &#xA;   &lt;td&gt;inline_pe /opt/mimikatz.exe&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;powershell_import&lt;/td&gt; &#xA;   &lt;td&gt;Load a powershell script&lt;/td&gt; &#xA;   &lt;td&gt;powershell_import /opt/Invoke-Mimikatz.ps1 mmk&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;powershell_list&lt;/td&gt; &#xA;   &lt;td&gt;List powershell scripts accessible to agent&lt;/td&gt; &#xA;   &lt;td&gt;powershell_list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;powershell&lt;/td&gt; &#xA;   &lt;td&gt;Run some powershell (doesn&#39;t spawn powershell.exe)&lt;/td&gt; &#xA;   &lt;td&gt;powershell Invoke-Mimikatz -Command &#34;coffee exit&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;powershell_free&lt;/td&gt; &#xA;   &lt;td&gt;Remove powershell script&lt;/td&gt; &#xA;   &lt;td&gt;powershell_free mmk&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;bofexec is incredbibly funky right now and baically experiemental. When client can take multiple args (unless its a skill issue from me) then arg support will be resolved.&lt;br&gt; Also I cannot guarantee the lack of a memory leak. I have not done extensive testing and highly do not reccomend using this for anything other than fun or like hackthebox lmao&lt;/p&gt; &#xA;&lt;h2&gt;Some OPSEC BS&lt;/h2&gt; &#xA;&lt;p&gt;idk shit so this is my guess of the situation based on my code&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;this implant is literally a sussy c# binary.&lt;/li&gt; &#xA; &lt;li&gt;4 NTAPIs are stuck within the RWX JIT space (where the sacrifical Gate* methods are).&lt;/li&gt; &#xA; &lt;li&gt;No obfuscation, assembly name is &#34;HavocImplant&#34;, and strings are used instead of hashes for invoking ntapi&lt;/li&gt; &#xA; &lt;li&gt;inline_pe clears the PE header, but after execution, doesn&#39;t seem to clear the managed byte array of the PE. I think the unmanaged one used for execution is cleaned up successfully though. Also leaves conhost.exe (hidden) cause I can&#39;t figure out how to close it properly.&lt;/li&gt; &#xA; &lt;li&gt;bofexec currently has the bof objectfile in the resource section. However, it could be downloaded into memory instead (for future me)&lt;/li&gt; &#xA; &lt;li&gt;inline assembly creates a sacrificial appdomain to load assembly.&lt;/li&gt; &#xA; &lt;li&gt;shell spawns cmd&lt;/li&gt; &#xA; &lt;li&gt;powershell scripts are stored in plaintext in memory&lt;/li&gt; &#xA; &lt;li&gt;i have not tested if powershell bypasses script block logging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;RastaMouse - SharpC2 Drone command interface/handling, filesystem listing&lt;br&gt; codex_tf2 - PyHmmm + documentation on comm structure&lt;br&gt; thiagomayllart - DarkMelkor for inline assembly&lt;br&gt; Nettitude - Bofexec and Inline PE base&lt;br&gt; Octoberfest7 - Capturing Inline PE output with Windows Application&lt;br&gt; mgeeky - Stracciatella is powershell magic ChatGPT - String formatting, manual deserialization, json stuff&lt;/p&gt;</summary>
  </entry>
</feed>