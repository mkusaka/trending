<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-08T01:42:24Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alflokken/PSAuthClient</title>
    <updated>2024-02-08T01:42:24Z</updated>
    <id>tag:github.com,2024-02-08:/alflokken/PSAuthClient</id>
    <link href="https://github.com/alflokken/PSAuthClient" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PowerShell OAuth2.0/OpenID Connect (OIDC) Client.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PSAuthClient&lt;/h1&gt; &#xA;&lt;p&gt;PSAuthClient is a flexible PowerShell OAuth2.0/OpenID Connect (OIDC) Client.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for a &lt;a href=&#34;https://raw.githubusercontent.com/alflokken/PSAuthClient/main/#examples-of-openid-connect-oidc-and-oauth20-grants&#34;&gt;wide range of grants&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;a href=&#34;https://learn.microsoft.com/en-us/microsoft-edge/webview2/&#34;&gt;WebView2&lt;/a&gt; to support modern web experiences where interaction is required.&lt;/li&gt; &#xA; &lt;li&gt;Includes &lt;a href=&#34;https://raw.githubusercontent.com/alflokken/PSAuthClient/main/#Tools&#34;&gt;useful tools&lt;/a&gt; for decoding tokens and validating jwt signatures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alflokken/PSAuthClient/main/docs/images/spotify_auth.gif&#34; alt=&#34;Auth client in use&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;The module is available from PSGallery, alternatively &lt;a href=&#34;https://github.com/alflokken/PSAuthClient/releases/download/v1.0.1/PSAuthClient.zip&#34;&gt;download&lt;/a&gt; and place the module in &#39;$home\Documents\WindowsPowerShell\Modules or &#39;$env:ProgramFiles\PowerShell\Modules&#39; manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Install-Module PSAuthClient -Scope:CurrentUser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;See links for function documentation, usage and examples.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alflokken/PSAuthClient/main/docs/Invoke-OAuth2AuthorizationEndpoint.md&#34;&gt;Invoke-OAuth2AuthorizationEndpoint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Uses WebView2 (embedded browser based on Microsoft Edge) to request authorization, this ensures support for modern web pages and capabilities like SSO, Windows Hello, FIDO key login, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alflokken/PSAuthClient/main/docs/Invoke-OAuth2DeviceAuthorizationEndpoint.md&#34;&gt;Invoke-OAuth2DeviceAuthorizationEndpoint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Get device verification code and end-user code from the device authorization endpoint, which then can be used to request tokens from the token endpoint.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alflokken/PSAuthClient/main/docs/Invoke-OAuth2TokenEndpoint.md&#34;&gt;Invoke-OAuth2TokenEndpoint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build and send token exchange requests to the OAuth2.0 Token Endpoint.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alflokken/PSAuthClient/main/docs/Get-OidcDiscoveryMetadata.md&#34;&gt;Get-OidcConfigurationMetadata&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Retreive OpenID Connect Discovery endpoint metadata.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alflokken/PSAuthClient/main/docs/ConvertFrom-JsonWebToken.md&#34;&gt;ConvertFrom-JsonWebToken&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert (decode) a JSON Web Token (JWT) to a PowerShell object.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alflokken/PSAuthClient/main/docs/Test-JsonWebTokenSignature.md&#34;&gt;Test-JsonWebTokenSignature&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Attempt to validate the signature of a JSON Web Token (JWT) by using the issuer discovery metadata to get the signing certificate. (If no signing certificate or secret was provided.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alflokken/PSAuthClient/main/docs/New-PkceChallenge.md&#34;&gt;New-PkceChallenge&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generate code_verifier and code_challenge for PKCE (authorization code flow).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alflokken/PSAuthClient/main/docs/New-Oauth2JwtAssertion.md&#34;&gt;New-Oauth2JwtAssertion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create and sign JWT Assertions using either a client_certificate (x509certificate2 or RSA Private key) or client_secret (for HMAC-based signature).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alflokken/PSAuthClient/main/docs/Clear-WebView2Cache.md&#34;&gt;Clear-WebView2Cache&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Removes PSAuthClient WebView2 user data folder (UDF) which is used to store browser data such as cookies, permissions and cached resources.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Examples of OpenID Connect (OIDC) and OAuth2.0 Grants&lt;/h1&gt; &#xA;&lt;p&gt;OpenID Connect is an extension of OAuth2 that adds an identity layer to the authorization framework. This allows a client to verify the identity of the user and obtain basic profile information. OIDC grants contains &#39;openid&#39; scope and the identity provider will return a &#39;id_token&#39; with user information (claims).&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Parameters that are used (and modified) troughout the examples below.&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$authorization_endpoint = &#34;https://login.microsoftonline.com/example.org/oauth2/v2.0/authorize&#34;&#xA;$token_endpoint = &#34;https://login.microsoftonline.com/example.org/oauth2/v2.0/token&#34;&#xA;&#xA;$splat = @{&#xA;    client_id = &#34;5eda97cf-2963-41e9-bea0-b6ba2bbf8f99&#34;&#xA;    scope = &#34;user.read openid offline_access&#34;&#xA;    redirect_uri = &#34;https://login.microsoftonline.com/common/oauth2/nativeclient&#34;&#xA;    customParameters = @{ &#xA;        prompt = &#34;none&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Authorization Code Grant with Proof Key for Code Exchange (PKCE)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$code = Invoke-OAuth2AuthorizationEndpoint -uri $authorization_endpoint @splat&#xA;&#xA;client_id                      5eda97cf-2963-41e9-bea0-b6ba2bbf8f99&#xA;code_verifier                  ig0Sly4Kdjc_e77Zsp5..PKi.TbqzSNz_CEKsamyPRI5~uRr4_&#xA;nonce                          o180HoFS2k5y0gj.spbYos.IPUS8-SqSf4cx0Z7x&#xA;redirect_uri                   https://login.microsoftonline.com/common/oauth2/nativeclient&#xA;code                           0.AUcAjvFfm8BTokWLwpwMj2CyxiGBP5hz2ZpErJuc3chlhOUNAVw.AgABAAIAAAA...&#xA;&#xA;$token = Invoke-OAuth2TokenEndpoint -uri $token_endpoint @code&#xA;&#xA;token_type      : Bearer&#xA;scope           : User.Read profile openid email&#xA;expires_in      : 5340&#xA;ext_expires_in  : 5340&#xA;access_token    : eyJ0eXAiOiJKV1QiLCJub25jZSI6IlhFMjJvBXRyVDBkQ1Z1cG7zbEFJQk1kU1RxLS5xQUppS3Fpbr...&#xA;refresh_token   : 0.AUcAjvFfm8BTokWLwpwMj2CyxiGBP5hz2ZpErJuc3chlhOUNAVw.AgABAAEAAAAmoFfGtYxvRrNr...&#xA;id_token        : eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImtXYmthYTZxczh3c1RuQndpaU5ZT2hIYm...&#xA;expiry_datetime : 31.01.2024 14:11:08&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Authorization Code Grant&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$code = Invoke-OAuth2AuthorizationEndpoint -uri $authorization_endpoint @splat -usePkce:$false&#xA;&#xA;nonce                          UYhqAG~GLvZqGj4hnlTkYFJY9LVcS9TrWiq.8n8Vu&#xA;redirect_uri                   https://login.microsoftonline.com/common/oauth2/nativeclient&#xA;client_id                      5eda97cf-2963-41e9-bea0-b6ba2bbf8f99&#xA;code                           0.AUcAjvFfm8BTokWLwpwMj2CyxiGBP5hz2ZpErJuc3chlhOUNAVw.AgABAAmoFfG...&#xA;&#xA;$token = Invoke-OAuth2TokenEndpoint -uri $token_endpoint @code&#xA;&#xA;token_type      : Bearer&#xA;scope           : User.Read profile openid email&#xA;expires_in      : 3848&#xA;ext_expires_in  : 3848&#xA;access_token    : eyJ0eXAiOiJKV1QiLCJub62jZSI6ImhDRkwxMjVHdE85SmNqS0NWMFZQLWxTd2Z0Zm12LXFsV2VDR0...&#xA;refresh_token   : 0.AUcAjvFfm8BTokWLwpwMkJCyxiGBP5hz2ZpErJuc3chlhOUNAVw.AgABAAEAAAAmoFfGtYxjHyNf...&#xA;id_token        : eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImtXYmthYTZxczh3c1RuQndpaU547ZT2hI...&#xA;expiry_datetime : 31.01.2024 14:05:18&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Authorization Code Grant with Client Authentication (secret)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$splat.redirect_uri = &#34;https://localhost/web&#34;&#xA;$code = Invoke-OAuth2AuthorizationEndpoint -uri $authorization_endpoint @splat &#xA;&#xA;client_id                      5eda97cf-2963-41e9-bea0-b6ba2bbf8f99&#xA;code_verifier                  jWe-ecfnqZ.weAxbb-qHiZ3oe7LZ-tEyWq~7UB9RcNfZn65Xq2zPO7-8rv-5tp24p...&#xA;nonce                          HRBD6BuH9PQM2_Kmuqj6KTranVVcuL80fsEpll-9nppaZp0H3CQaYhaqQ2VqUV8&#xA;redirect_uri                   https://localhost/web&#xA;code                           0.AUcAjvFfm8BTokWLwpwMj2CyxiGBP5hz2ZpErJuc3chlhOUNAVw.AgABAAIAAAm...&#xA;&#xA;$token = Invoke-OAuth2TokenEndpoint -uri $token_endpoint @code -client_secret $client_secret&#xA;&#xA;token_type      : Bearer&#xA;scope           : User.Read profile openid email&#xA;expires_in      : 4069&#xA;ext_expires_in  : 4069&#xA;access_token    : eyJ0eXAiOiJKG1QqLCJub25jZSI5IllOTzdpTmdXZnMtSmSSY1hpZk45bTdoa2E0WnNpWFY5ckswen...&#xA;refresh_token   : 0.AUcAjvFfmC9TokWLwpwMj2CyxiGBP5hz2ZpRrJuc3chlhOUGAVw.AgABAAEAAAAmoFfGtYxvRrNf...&#xA;id_token        : eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImtXYmthYTZxczh3c1RuQndpaU5ZT2hIYm...&#xA;expiry_datetime : 31.01.2024 14:28:58&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Refresh Token Grant&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$token = Invoke-OAuth2TokenEndpoint -uri $token_endpoint -refresh_token $token.refresh_token -client_id $splat.client_id -scope $splat.scope -nonce $code.nonce&#xA;&#xA;token_type      : Bearer&#xA;scope           : User.Read profile openid email&#xA;expires_in      : 3951&#xA;ext_expires_in  : 3951&#xA;access_token    : eyJ0eXAiOiJKR1QiLCJsf52jZSI6IjdCbkI2VDc5OGJZVlh3ZHdIRWVOMGducUVKQVBEUnBPcTZhMm...&#xA;refresh_token   : 0.AUcAjvFfm1BTokWLkjrMj3CyxiGBP5hz4ZpErJuc3chlhOUNAVw.AgABAAEAAAAmoFfGtDxvRrNa...&#xA;id_token        : eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImtXYmthYTZxczh3c1RuQndsapaU5ZT2hI...&#xA;expiry_datetime : 31.01.2024 14:16:56&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Client Credentials Grant (client_secret_basic)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$splat.Remove(&#34;customParameters&#34;)&#xA;$splat.scope = &#34;.default&#34;&#xA;$token = Invoke-OAuth2TokenEndpoint -uri $token_endpoint @splat -client_secret (Invoke-Cache -keyName &#34;PSC_Test-ClientSecret&#34;) -client_auth_method client_secret_basic&#xA;&#xA;token_type      : Bearer&#xA;expires_in      : 3599&#xA;ext_expires_in  : 3599&#xA;access_token    : eyJ0eXAiOiJKV1DiLCJub25jZSI3IjUtQjB0bXBSNHhzYWtJSW8wOFY5ejFGVGRTWDF5blZfalNVX2...&#xA;expiry_datetime : 31.01.2024 14:14:06&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Client Credentials Grant (client_secret_post)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$token = Invoke-OAuth2TokenEndpoint -uri $token_endpoint @splat -client_secret (Invoke-Cache -keyName &#34;PSC_Test-ClientSecret&#34; -asSecureString)&#xA;&#xA;token_type      : Bearer&#xA;expires_in      : 3599&#xA;ext_expires_in  : 3599&#xA;access_token    : eyJ0eXAiOiJKV1QiGCJub25jZSI3ImtIeW5MWTNyUjdja0lZd1RTQWVSRi1yRnVYYUx0Y6VaU11NEF...&#xA;expiry_datetime : 31.01.2024 14:16:10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Client Credentials Grant (client_secret_jwt)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Microsoft Graph DOES NOT support client_secret_jwt, but if they did, this is how you would do it.&#xA;$token = Invoke-OAuth2TokenEndpoint -uri $token_endpoint @splat -client_secret $client_secret -client_auth_method &#34;client_secret_jwt&#34;&#xA;&#xA;error          error_description&#xA;-----          -----------------&#xA;invalid_client AADSTS5002723: Invalid JWT token. No certificate SHA-1 thumbprint, certificate SH...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Client Credentials Grant certificate (private_key_jwt)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$token = Invoke-OAuth2TokenEndpoint -uri $token_endpoint @splat -client_certificate &#34;Cert:\CurrentUser\My\8ade399dddc5973e04e34ac19fe8f8759ba059b8&#34;&#xA;&#xA;token_type      : Bearer&#xA;expires_in      : 3599&#xA;ext_expires_in  : 3599&#xA;access_token    : eyJ0eXAiOiJKV1QiLCJub21jZSI2InpBUjQ6UTBRc7dzYkcxOVJibQ032s2UUxrckZUcm9BYmwgdh0...&#xA;expiry_datetime : 31.01.2024 14:20:03&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Implicit Grant (OAuth2.0)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$splat.redirect_uri = &#34;https://localhost/spa&#34;&#xA;$splat.scope = &#34;User.Read&#34;&#xA;$token = Invoke-OAuth2AuthorizationEndpoint -uri $authorization_endpoint @splat -response_type &#34;token&#34; -usePkce:$false&#xA;&#xA;expires_in                     4371&#xA;expiry_datetime                31.01.2024 14:39:19&#xA;scope                          User.Read profile openid email&#xA;session_state                  5c044a56-543e-4bcc-a94f-d411ddec5a87&#xA;access_token                   eyJ0eXAiOiJKV1QiLCJkj76jZSI6InlaZzBmU1NGV1M1UmllaFRHc01jMWJkSFNIZ...&#xA;token_type                     Bearer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Implicit Grant (OIDC)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$token = Invoke-OAuth2AuthorizationEndpoint -uri $authorization_endpoint @splat -response_type &#34;token id_token&#34; -usePkce:$false&#xA;&#xA;nonce                          NtKwrnSuV7xQQiya.jNXF940RQkS0OMlTcQDCOOgJay8a2qi0.MO4KKX8xc-XWUa&#xA;expires_in                     4949&#xA;id_token                       eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImtXYmthYTZxczh3c1RuQ...&#xA;expiry_datetime                31.01.2024 14:46:35&#xA;scope                          User.Read profile openid email&#xA;session_state                  5c044a56-543e-4bcc-a94f-d411ddec5a87&#xA;access_token                   eyJ0eXAiOiJKV1QiLCJub51jZSI6Ik2saWhWbkdCMzNYUnI0VTF5VUVYLXA0Zkp6K...&#xA;token_type                     Bearer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Hybrid Grant&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$splat.scope = &#34;user.read openid offline_access&#34;&#xA;$splat.redirect_uri = &#34;http://localhost&#34;&#xA;$splat.usePkce = $true&#xA;$token = Invoke-OAuth2AuthorizationEndpoint -uri $authorization_endpoint  @splat -response_type &#34;code id_token&#34;&#xA;&#xA;nonce                          7B61P-.ST87WdKZ9TPF~1a5sMkPs.atxj8sBCmY2mHHfEKRotmK37dxDl&#xA;code_verifier                  w6Fvr5LTkex0k.aRJhL9rZeEDNSO5sdc8zeQYlstYJuZ2K9ck2azZ~Luxeaw2CCSd...&#xA;id_token                       eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImtXYmthYTZxczh3c1RuQ...&#xA;client_id                      5eda97cf-2963-41e9-bea0-b6ba2bbf8f99&#xA;session_state                  5c044a56-543e-4bcc-a94f-d411ddec5a87&#xA;redirect_uri                   http://localhost&#xA;code                           0.AUcAjvFfm8BTokWLwpwMj2CyxiGBP5hz2ZpErJuc3chlhOUNAVw.AgABAAAAAmo...&#xA;&#xA;$token.Remove(&#34;id_token&#34;); $token.Remove(&#34;session_state&#34;)&#xA;$tokens = Invoke-OAuth2TokenEndpoint -uri $token_endpoint @token&#xA;&#xA;nonce                          da1EE3-RRVJO.fFeCEw2TvG7hK46AWFWHJCOBeRfnJ6o&#xA;code_verifier                  ~4fYq2QcXlSIZN_vZ7pnKsO5VZ0Pq39hsdQOAziqDqsGNL-JGP~&#xA;client_id                      5eda97cf-2963-41e9-bea0-b6ba2bbf8f99&#xA;redirect_uri                   http://localhost&#xA;code                           0.AUcAjvFfm8BTokWLwpwMj2CyxiGBP5hz2ZpErJuc3chlhOUNAVw.AgABAAIAAAA...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Implicit Flow (by Form_Post)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$splat.redirect_uri = &#34;http://localhost:5001/&#34;&#xA;$customParameters = @{ &#xA;    prompt = &#34;none&#34; # login, none, consent, select_account&#xA;}&#xA;$token = Invoke-OAuth2AuthorizationEndpoint -uri $authorization_endpoint  @splat -response_type &#34;code id_token&#34; -response_mode &#34;form_post&#34;&#xA;&#xA;nonce                          iOJ6n7jBlYAL_TrYlFjfKwOsPklX1-4iR&#xA;code_verifier                  j1v4ZEjF4AE.lMfsQ36UzF6OoBp.zwuJ7Qkez9XQX~4lGo9pnxxtN.P4ulFhkwBaZ...&#xA;id_token                       eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImtXYmthYTZxczh3c1RuQ...&#xA;client_id                      5eda97cf-2963-41e9-bea0-b6ba2bbf8f99&#xA;session_state                  5c044a56-543e-4bcc-a94f-d411ddec5a87&#xA;redirect_uri                   http://localhost:5001/&#xA;code                           0.AUcAjvFfm8BTokWLwpwMj2CyxiGBP5hz2ZpErJuc3chlhOUNAVw.AgABAAIAmoF...&#xA;&#xA;&#xA;$token.Remove(&#34;id_token&#34;); $token.Remove(&#34;session_state&#34;)&#xA;$tokens = Invoke-OAuth2TokenEndpoint -uri $token_endpoint @token&#xA;&#xA;token_type      : Bearer&#xA;scope           : User.Read profile openid email&#xA;expires_in      : 4840&#xA;ext_expires_in  : 4840&#xA;access_token    : eyJ0eXAiOiJKV1QiLCJub55jZSI6IlRsTFVNS5MyaEpscDNfNzKH75GXMXI0WndKMnlKJSJzFdzJEb...&#xA;refresh_token   : 0.AUcAjvFfm8BTokSLwpwMj2CyxiGBP5kH76pErJuc3chlhOUNAVw.AgABAAEAPKIZ-AgDs_wSA9P9...&#xA;id_token        : eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImtXYmthYTZxczh3c1RuQndpaU5ZT2hIYm...&#xA;expiry_datetime : 31.01.2024 14:54:54&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Device Code Grant&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$deviceCode = Invoke-OAuth2DeviceAuthorizationEndpoint -uri &#34;https://login.microsoftonline.com/$tenantId/oauth2/v2.0/devicecode&#34; -client_id $splat.client_id -scope $splat.scope&#xA;&#xA;user_code        : L8EFTXRY3&#xA;device_code      : LAQABAAEAAAAmoFfGtYxvRrNriQdPKIZ-2b64dTFbGcmRF3rSBagHQGtBcyz0K_XV8ltq-nXz8Ks6...&#xA;verification_uri : https://microsoft.com/devicelogin&#xA;expires_in       : 900&#xA;interval         : 5&#xA;message          : To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the co...&#xA;&#xA;# Pop interactive browser&#xA;Invoke-WebView2 -uri &#34;https://microsoft.com/devicelogin&#34; -UrlCloseConditionRegex &#34;//appverify$&#34; -title &#34;Device Code Flow&#34; | Out-Null&#xA;&#xA;# After user-interaction has been completed.&#xA;$token = Invoke-OAuth2TokenEndpoint -uri $token_endpoint -device_code $deviceCode.device_code -client_id $splat.client_id&#xA;&#xA;token_type      : Bearer&#xA;scope           : User.Read profile openid email&#xA;expires_in      : 5320&#xA;ext_expires_in  : 5320&#xA;access_token    : eyJ0eXAiOiJKV1QiKH6Gb25jZSI5IjlzanppVWtNSlkR4WxfWjBRWFJRZUl4TEdyaDBad05TQ01sQ1...&#xA;refresh_token   : 0.AUcAjvFfm8BlORWLwpwMj2CyxiGBP5hz2ZpErkU62chlhOUNAVw.AgABAAEAAAAmoFfGtYxvRrlK...&#xA;id_token        : eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImtXYmthYTZxczh3c1RuQndpaU5ZT2hIYm...&#xA;expiry_datetime : 31.01.2024 15:07:19&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Resource Owner Password Flow (ROPC)&lt;/b&gt;&lt;/summary&gt; no thanks, tom hanks. &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Tools&lt;/h1&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;OIDC Discovery&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Retreive OpenID Connect Discovery metadata.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-OidcDiscoveryMetadata &#34;https://login.microsoftonline.com/common&#34;&#xA;&#xA;token_endpoint                        : https://login.microsoftonline.com/common/oauth2/token&#xA;token_endpoint_auth_methods_supported : {client_secret_post, private_key_jwt, client_secret_basic}&#xA;jwks_uri                              : https://login.microsoftonline.com/common/discovery/keys&#xA;response_modes_supported              : {query, fragment, form_post}&#xA;subject_types_supported               : {pairwise}&#xA;id_token_signing_alg_values_supported : {RS256}&#xA;response_types_supported              : {code, id_token, code id_token, token id_tokenÔÇª}&#xA;scopes_supported                      : {openid}&#xA;issuer                                : https://sts.windows.net/{tenantid}/&#xA;microsoft_multi_refresh_token         : True&#xA;authorization_endpoint                : https://login.microsoftonline.com/common/oauth2/authorize&#xA;device_authorization_endpoint         : https://login.microsoftonline.com/common/oauth2/devicecode&#xA;http_logout_supported                 : True&#xA;frontchannel_logout_supported         : True&#xA;end_session_endpoint                  : https://login.microsoftonline.com/common/oauth2/logout&#xA;claims_supported                      : {sub, iss, cloud_instance_name, cloud_instance_host_name}&#xA;check_session_iframe                  : https://login.microsoftonline.com/common/oauth2/checksession&#xA;userinfo_endpoint                     : https://login.microsoftonline.com/common/openid/userinfo&#xA;kerberos_endpoint                     : https://login.microsoftonline.com/common/kerberos&#xA;tenant_region_scope                   : &#xA;cloud_instance_name                   : microsoftonline.com&#xA;cloud_graph_host_name                 : graph.windows.net&#xA;msgraph_host                          : graph.microsoft.com&#xA;rbac_url                              : https://pas.windows.net&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Decode JWT&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Convert (decode) a JSON Web Token (JWT) to a PowerShell object.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS&amp;gt; ConvertFrom-JsonWebToken &#34;ew0KICAidHlwIjogIkpXVCIsDQogICJhbGciOiAiUlMyNTYiDQp9.ew0KICAi...&#34;&#xA;&#xA;header    : @{typ=JWT; alg=RS256}&#xA;exp       : 1706784929&#xA;echo      : Hello World!&#xA;nbf       : 1706784629&#xA;sub       : PSAuthClient&#xA;iss       : https://example.org&#xA;jti       : 27913c80-40d1-46a3-89d5-d3fb9f0d1e4e&#xA;iat       : 1706784629&#xA;aud       : PSAuthClient&#xA;signature : OHIxRGxuaXVLTjh4eXhRZ0VWYmZ3SHNlQ29iOUFBUVRMK1dqWUpWMEVXMD0&#xA;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Validate JWT Signature&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Attempt to validate the signature of a JSON Web Token (JWT) by using the issuer discovery metadata to get the signing certificate. (If no signing certificate or secret was provided.)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS&amp;gt; Test-JsonWebTokenSignature -jwtInput $jwt&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Build JWT Assertions&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Create and sign JWT Assertions using either a client_certificate (x509certificate2 or RSA Private key) or client_secret (for HMAC-based signature).&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS&amp;gt; New-Oauth2JwtAssertion -issuer &#34;test&#34; -subject &#34;test1&#34; -audience &#34;test2&#34; -jwtId &#34;123&#34; -customClaims @{ claim1 = &#34;test&#34; } -client_secret &#34;secret&#34;&#xA;&#xA;client_assertion_jwt           ew0KICAiYWxnIjogIlJTMjU2IiwNCiAgInR5cCI6ICJKV1QiDQp9.ew0KICAianRp...&#xA;client_assertion_type          urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#xA;header                         @{alg=RS256; typ=JWT}&#xA;payload                        @{jti=123; claim1=test; aud=test2; exp=1706793151; nbf=170679285...}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Generate a PKCE Challenge&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Generate code_verifier and code_challenge for PKCE (authorization code flow).&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS&amp;gt; New-PkceChallenge&#xA;&#xA;code_verifier                  Vpq2YXOsD~1DRM-jBPR6bt8R-3dWQAHNLVLUIDxh7SkWpOT3A0grpenqKne5rAHcVKsTi-ya8-lGBxJ0NS7zavdcFbfdN0yFQ5kYOFbWBh3&#xA;code_challenge                 TW-3r-6mxRWjhkkxmYOabLlwIQ0JkQ0ndxzOSLJvCoU&#xA;code_challenge_method          S256&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>