<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-25T01:41:28Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joeavanzato/Trawler</title>
    <updated>2023-04-25T01:41:28Z</updated>
    <id>tag:github.com,2023-04-25:/joeavanzato/Trawler</id>
    <link href="https://github.com/joeavanzato/Trawler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PowerShell script to help Incident Responders discover adversary persistence mechanisms.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/joeavanzato/Trawler/main/logo.png&#34; height=&#34;200&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Dredging Windows for Persistence &lt;/h1&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;Trawler is a PowerShell script designed to help Incident Responders discover potential indicators of compromise on Windows hosts, primarily focused on persistence mechanisms including Scheduled Tasks, Services, Registry Modifications, Startup Items, Binary Modifications and more.&lt;/p&gt; &#xA;&lt;p&gt;Currently, trawler can detect most of the persistence techniques specifically called out by MITRE and Atomic Red Team with more detections being added on a regular basis.&lt;/p&gt; &#xA;&lt;h2&gt;Main Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scanning Windows OS for a variety of persistence techniques (Listed below)&lt;/li&gt; &#xA; &lt;li&gt;CSV Output with MITRE Technique and Investigation Jumpstart Metadata&lt;/li&gt; &#xA; &lt;li&gt;Analysis and Remediation Guidance Documentation (&lt;a href=&#34;https://github.com/joeavanzato/Trawler/wiki/Analysis-and-Remediation-Guidance&#34;&gt;https://github.com/joeavanzato/Trawler/wiki/Analysis-and-Remediation-Guidance&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dynamic Risk Assignment for each detection&lt;/li&gt; &#xA; &lt;li&gt;Built-in Allow Lists for common Windows configurations spanning Windows 10/Server 2012|2016|2019|2022 to reduce noise&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How do I use it?&lt;/h2&gt; &#xA;&lt;p&gt;Just download and run trawler.ps1 from an Administrative PowerShell/cmd prompt - any detections will be displayed in the console as well as written to a CSV (&#39;detections.csv&#39;) in the current working directory. The generated CSV will contain Detection Name, Source, Risk, Metadata and the relevant MITRE Technique.&lt;/p&gt; &#xA;&lt;p&gt;Or use this one-liner from an Administrative PowerShell terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/joeavanzato/Trawler/main/trawler.ps1&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Certain detections have allow-lists built-in to help remove noise from default Windows configurations (10/2016/2019/2022) - expected Scheduled Tasks, Services, etc. Of course, it is always possible for attackers to hijack these directly and masquerade with great detail as a default OS process - take care to use multiple forms of analysis and detection when dealing with skillful adversaries.&lt;/p&gt; &#xA;&lt;p&gt;If you have examples or ideas for additional detections, please feel free to submit an Issue or PR with relevant technical details/references - the code-base is a little messy right now and will be cleaned up over time.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, if you identify obvious false positives, please let me know by opening an issue or PR on GitHub! The obvious culprits for this will be non-standard COMs, Services or Tasks.&lt;/p&gt; &#xA;&lt;h3&gt;CLI Parameters&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;-hide : Suppress Detection output to console&#xA;-snapshot : Capture a &#34;persistence snapshot&#34; of the current system, defaulting to &#34;$PSScriptRoot\snapshot.csv&#34;&#xA;-snapshotpath : Define a custom file-path for saving snapshot output to.&#xA;-outpath : Define a custom file-path for saving detection output to (defaults to &#34;$PSScriptRoot\detections.csv&#34;)&#xA;-loadsnapshot : Define the path for an existing snapshot file to load as an allow-list reference&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What separates this from PersistenceSniper?&lt;/h2&gt; &#xA;&lt;p&gt;PersistenceSniper is an awesome tool - I&#39;ve used it heavily in the past - but there are a few key points that differentiate these utilities&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;trawler is (currently) a local utility - it would be pretty straight-forward to wrap it in a loop and use WinRM/PowerShell Sessions to execute it on remote hosts though&lt;/li&gt; &#xA; &lt;li&gt;trawler implements allow-listing for many &#39;noisy&#39; detections to help remove expected detections from default configurations of Windows (10/2016/2019/2022) and these are constantly being updated &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PersistenceSniper does not contain any type of allow-listing - therefore, there is more noise generated when considering items such as Services, Scheduled Tasks, general COM DLL scanning, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;trawler&#39;s output is much more simplified - Name, Risk, Source, MITRE Technique and Metadata are the only items provided for each detection to help analysts jump-start their persistence hunting efforts&lt;/li&gt; &#xA; &lt;li&gt;Regex is used heavily to help detect &#39;suspicious&#39; keywords in various critical areas&lt;/li&gt; &#xA; &lt;li&gt;trawler supports &#39;snapshotting&#39; a system (for example, an enterprise golden image) then using the generated snapshot as an allow-list to reduce noise.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Overall, these tools are extremely similar but approach the problem from slightly different angles - PersistenceSniper provides all information back to the analyst for review while Trawler tries to limit what is returned to only results that are likely to be potential adversary persistence mechanisms. As such, there is a possibility for false-negatives with trawler if an adversary completely mimics an allow-listed item.&lt;/p&gt; &#xA;&lt;h2&gt;Tuning to your environment&lt;/h2&gt; &#xA;&lt;p&gt;Trawler supports loading an allow-list from a &#39;snapshot&#39; - to do this requires two steps.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &#39;.\trawler.ps1 -snapshot&#39; on a &#34;Golden Image&#34; representing the servers in your environment - once complete, in addition to the standard &#39;detections.csv&#39; a file named &#39;snapshots.csv&#39; will be generated&lt;/li&gt; &#xA; &lt;li&gt;This file can then be used as input to trawler when running on other hosts and the data will be loaded dynamically as an allow-list for each appropriate detection &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&#39;.\trawler.ps1&#39; -loadsnapshot &#34;path\to\snapshot.csv&#34;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it - all relevant detections will then draw from the snapshot file as an allow-list to reduce noise and identify any potential changes to the base image that may have occurred.&lt;/p&gt; &#xA;&lt;p&gt;(Allow-listing is implemented for most of the checks but not all - still being actively implemented)&lt;/p&gt; &#xA;&lt;h2&gt;Example Images&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/joeavanzato/Trawler/main/sample.PNG&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/joeavanzato/Trawler/main/sample2.PNG&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/joeavanzato/Trawler/main/sample3.PNG&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What is inspected?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scheduled Tasks&lt;/li&gt; &#xA; &lt;li&gt;Users&lt;/li&gt; &#xA; &lt;li&gt;Services&lt;/li&gt; &#xA; &lt;li&gt;Running Processes&lt;/li&gt; &#xA; &lt;li&gt;Network Connections&lt;/li&gt; &#xA; &lt;li&gt;WMI Event Consumers (CommandLine/Script)&lt;/li&gt; &#xA; &lt;li&gt;Startup Item Discovery&lt;/li&gt; &#xA; &lt;li&gt;BITS Jobs Discovery&lt;/li&gt; &#xA; &lt;li&gt;Windows Accessibility Feature Modifications&lt;/li&gt; &#xA; &lt;li&gt;PowerShell Profile Existence&lt;/li&gt; &#xA; &lt;li&gt;Office Addins from Trusted Locations&lt;/li&gt; &#xA; &lt;li&gt;SilentProcessExit Monitoring&lt;/li&gt; &#xA; &lt;li&gt;Winlogon Helper DLL Hijacking&lt;/li&gt; &#xA; &lt;li&gt;Image File Execution Option Hijacking&lt;/li&gt; &#xA; &lt;li&gt;RDP Shadowing&lt;/li&gt; &#xA; &lt;li&gt;UAC Setting for Remote Sessions&lt;/li&gt; &#xA; &lt;li&gt;Print Monitor DLLs&lt;/li&gt; &#xA; &lt;li&gt;LSA Security and Authentication Package Hijacking&lt;/li&gt; &#xA; &lt;li&gt;Time Provider DLLs&lt;/li&gt; &#xA; &lt;li&gt;Print Processor DLLs&lt;/li&gt; &#xA; &lt;li&gt;Boot/Logon Active Setup&lt;/li&gt; &#xA; &lt;li&gt;User Initialization Logon Script Hijacking&lt;/li&gt; &#xA; &lt;li&gt;ScreenSaver Executable Hijacking&lt;/li&gt; &#xA; &lt;li&gt;Netsh DLLs&lt;/li&gt; &#xA; &lt;li&gt;AppCert DLLs&lt;/li&gt; &#xA; &lt;li&gt;AppInit DLLs&lt;/li&gt; &#xA; &lt;li&gt;Application Shimming&lt;/li&gt; &#xA; &lt;li&gt;COM Object Hijacking&lt;/li&gt; &#xA; &lt;li&gt;LSA Notification Hijacking&lt;/li&gt; &#xA; &lt;li&gt;&#39;Office test&#39; Usage&lt;/li&gt; &#xA; &lt;li&gt;Office GlobalDotName Usage&lt;/li&gt; &#xA; &lt;li&gt;Terminal Services DLL Hijacking&lt;/li&gt; &#xA; &lt;li&gt;Autodial DLL Hijacking&lt;/li&gt; &#xA; &lt;li&gt;Command AutoRun Processor Abuse&lt;/li&gt; &#xA; &lt;li&gt;Outlook OTM Hijacking&lt;/li&gt; &#xA; &lt;li&gt;Trust Provider Hijacking&lt;/li&gt; &#xA; &lt;li&gt;LNK Target Scanning (Suspicious Terms, Multiple Extensions, Multiple EXEs)&lt;/li&gt; &#xA; &lt;li&gt;&#39;Phantom&#39; Windows DLL Names loaded into running process (eg. un-signed WptsExtensions.dll)&lt;/li&gt; &#xA; &lt;li&gt;Scanning Critical OS Directories for Unsigned EXEs/DLLs&lt;/li&gt; &#xA; &lt;li&gt;Un-Quoted Service Path Hijacking&lt;/li&gt; &#xA; &lt;li&gt;PATH Binary Hijacking&lt;/li&gt; &#xA; &lt;li&gt;Common File Association Hijacks and Suspicious Keywords&lt;/li&gt; &#xA; &lt;li&gt;Suspicious Certificate Hunting&lt;/li&gt; &#xA; &lt;li&gt;GPO Script Discovery/Scanning&lt;/li&gt; &#xA; &lt;li&gt;NLP Development Platform DLL Overrides&lt;/li&gt; &#xA; &lt;li&gt;AeDebug/.NET/Script/Process/WER Debug Replacements&lt;/li&gt; &#xA; &lt;li&gt;Explorer &#39;Load&#39;&lt;/li&gt; &#xA; &lt;li&gt;Windows Terminal startOnUserLogin Hijacks&lt;/li&gt; &#xA; &lt;li&gt;App Path Mismatches&lt;/li&gt; &#xA; &lt;li&gt;Service DLL/ImagePath Mismatches&lt;/li&gt; &#xA; &lt;li&gt;Non-Standard GPO Extension DLLs&lt;/li&gt; &#xA; &lt;li&gt;Potential HKCR COM Hijacks&lt;/li&gt; &#xA; &lt;li&gt;Non-Standard LSA Extensions&lt;/li&gt; &#xA; &lt;li&gt;DNSServerLevelPluginDll Presence&lt;/li&gt; &#xA; &lt;li&gt;Explorer\MyComputer Utility Hijack&lt;/li&gt; &#xA; &lt;li&gt;Terminal Services InitialProgram Check&lt;/li&gt; &#xA; &lt;li&gt;RDP Startup Programs&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Telemetry Commands&lt;/li&gt; &#xA; &lt;li&gt;Non-Standard AMSI Providers&lt;/li&gt; &#xA; &lt;li&gt;Internet Settings LUI Error DLL&lt;/li&gt; &#xA; &lt;li&gt;PeerDist\Extension DLL&lt;/li&gt; &#xA; &lt;li&gt;ErrorHandler.CMD Checks&lt;/li&gt; &#xA; &lt;li&gt;Built-In Diagnostics DLL&lt;/li&gt; &#xA; &lt;li&gt;MiniDumpAuxiliary DLLs&lt;/li&gt; &#xA; &lt;li&gt;KnownManagedDebugger DLLs&lt;/li&gt; &#xA; &lt;li&gt;WOW64 Compatibility Layer DLLs&lt;/li&gt; &#xA; &lt;li&gt;EventViewer MSC Hijack&lt;/li&gt; &#xA; &lt;li&gt;Uninstall Strings Scan&lt;/li&gt; &#xA; &lt;li&gt;PolicyManager DLLs&lt;/li&gt; &#xA; &lt;li&gt;SEMgr Wallet DLL&lt;/li&gt; &#xA; &lt;li&gt;WER Runtime Exception Handlers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add Analysis/Remediation Guidance to each detection in the GitHub Wiki (In-Progress)&lt;/li&gt; &#xA; &lt;li&gt;Browser Extension Analysis (?)&lt;/li&gt; &#xA; &lt;li&gt;RID Hijacking [https://www.ired.team/offensive-security/persistence/rid-hijacking][https://pentestlab.blog/2020/02/12/persistence-rid-hijacking/]&lt;/li&gt; &#xA; &lt;li&gt;PowerAutomate Checks&lt;/li&gt; &#xA; &lt;li&gt;ShadowPad Indicators [https://www.secureworks.com/research/shadowpad-malware-analysis, https://www.hexacorn.com/blog/2023/02/25/beyond-good-ol-run-key-part-141/]&lt;/li&gt; &#xA; &lt;li&gt;OBS Startup Script Scanning [https://www.hexacorn.com/blog/2023/04/14/beyond-good-ol-run-key-part-142/]&lt;/li&gt; &#xA; &lt;li&gt;SQL Server Management Addins [https://www.hexacorn.com/blog/2019/09/28/beyond-good-ol-run-key-part-117/]&lt;/li&gt; &#xA; &lt;li&gt;AutoPlay Handler Inspection [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers\Handlers]&lt;/li&gt; &#xA; &lt;li&gt;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Setup\Pending\SPReviewEnabler&lt;/li&gt; &#xA; &lt;li&gt;OCSetup [https://www.hexacorn.com/blog/2019/11/09/beyond-good-ol-run-key-part-122/]&lt;/li&gt; &#xA; &lt;li&gt;Remote Access Tool Checks (VNC, TeamViewer, AnyDesk, Zoho, etc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;MITRE Techniques Evaluated&lt;/h2&gt; &#xA;&lt;p&gt;Please be aware that some of these are (of course) more detected than others - for example, we are not detecting all possible registry modifications but rather inspecting certain keys for obvious changes and using the generic MITRE technique &#34;Modify Registry&#34; where no other technique is applicable. For other items such as COM hijacking, we are inspecting all entries in the relevant registry section, checking against &#39;known-good&#39; patterns and bubbling up unknown or mismatched values, resulting in a much more complete detection surface for that particular technique.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;T1037: Boot or Logon Initialization Scripts&lt;/li&gt; &#xA; &lt;li&gt;T1037.001: Boot or Logon Initialization Scripts: Logon Script (Windows)&lt;/li&gt; &#xA; &lt;li&gt;T1037.005: Boot or Logon Initialization Scripts: Startup Items&lt;/li&gt; &#xA; &lt;li&gt;T1055.001: Process Injection: Dynamic-link Library Injection&lt;/li&gt; &#xA; &lt;li&gt;T1059: Command and Scripting Interpreter&lt;/li&gt; &#xA; &lt;li&gt;T1071: Application Layer Protocol&lt;/li&gt; &#xA; &lt;li&gt;T1098: Account Manipulation&lt;/li&gt; &#xA; &lt;li&gt;T1112: Modify Registry&lt;/li&gt; &#xA; &lt;li&gt;T1053: Scheduled Task/Job&lt;/li&gt; &#xA; &lt;li&gt;T1136: Create Account&lt;/li&gt; &#xA; &lt;li&gt;T1137.001: Office Application Office Template Macros&lt;/li&gt; &#xA; &lt;li&gt;T1137.002: Office Application Startup: Office Test&lt;/li&gt; &#xA; &lt;li&gt;T1137.006: Office Application Startup: Add-ins&lt;/li&gt; &#xA; &lt;li&gt;T1197: BITS Jobs&lt;/li&gt; &#xA; &lt;li&gt;T1505.005: Server Software Component: Terminal Services DLL&lt;/li&gt; &#xA; &lt;li&gt;T1543.003: Create or Modify System Process: Windows Service&lt;/li&gt; &#xA; &lt;li&gt;T1546: Event Triggered Execution&lt;/li&gt; &#xA; &lt;li&gt;T1546.001: Event Triggered Execution: Change Default File Association&lt;/li&gt; &#xA; &lt;li&gt;T1546.002: Event Triggered Execution: Screensaver&lt;/li&gt; &#xA; &lt;li&gt;T1546.003: Event Triggered Execution: Windows Management Instrumentation Event Subscription&lt;/li&gt; &#xA; &lt;li&gt;T1546.007: Event Triggered Execution: Netsh Helper DLL&lt;/li&gt; &#xA; &lt;li&gt;T1546.008: Event Triggered Execution: Accessibility Features&lt;/li&gt; &#xA; &lt;li&gt;T1546.009: Event Triggered Execution: AppCert DLLs&lt;/li&gt; &#xA; &lt;li&gt;T1546.010: Event Triggered Execution: AppInit DLLs&lt;/li&gt; &#xA; &lt;li&gt;T1546.011: Event Triggered Execution: Application Shimming&lt;/li&gt; &#xA; &lt;li&gt;T1546.012: Event Triggered Execution: Image File Execution Options Injection&lt;/li&gt; &#xA; &lt;li&gt;T1546.013: Event Triggered Execution: PowerShell Profile&lt;/li&gt; &#xA; &lt;li&gt;T1546.015: Event Triggered Execution: Component Object Model Hijacking&lt;/li&gt; &#xA; &lt;li&gt;T1547.002: Boot or Logon Autostart Execution: Authentication Packages&lt;/li&gt; &#xA; &lt;li&gt;T1547.003: Boot or Logon Autostart Execution: Time Providers&lt;/li&gt; &#xA; &lt;li&gt;T1547.004: Boot or Logon Autostart Execution: Winlogon Helper DLL&lt;/li&gt; &#xA; &lt;li&gt;T1547.005: Boot or Logon Autostart Execution: Security Support Provider&lt;/li&gt; &#xA; &lt;li&gt;T1547.009: Boot or Logon Autostart Execution: Shortcut Modification&lt;/li&gt; &#xA; &lt;li&gt;T1547.012: Boot or Logon Autostart Execution: Print Processors&lt;/li&gt; &#xA; &lt;li&gt;T1547.014: Boot or Logon Autostart Execution: Active Setup&lt;/li&gt; &#xA; &lt;li&gt;T1553: Subvert Trust Controls&lt;/li&gt; &#xA; &lt;li&gt;T1553.004: Subvert Trust Controls: Install Root Certificate&lt;/li&gt; &#xA; &lt;li&gt;T1556.002: Modify Authentication Process: Password Filter DLL&lt;/li&gt; &#xA; &lt;li&gt;T1574: Hijack Execution Flow&lt;/li&gt; &#xA; &lt;li&gt;T1574.007: Hijack Execution Flow: Path Interception by PATH Environment Variable&lt;/li&gt; &#xA; &lt;li&gt;T1574.009: Hijack Execution Flow: Path Interception by Unquoted Path&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;This tool would not exist without the amazing InfoSec community - the most notable references I used are provided below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/last-byte/PersistenceSniper&#34;&gt;PersistenceSniper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://attack.mitre.org/tactics/TA0003/&#34;&gt;MITRE ATT&amp;amp;CK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://persistence-info.github.io/&#34;&gt;Persistence Info GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hexacorn.com/blog/2017/01/28/beyond-good-ol-run-key-all-parts/&#34;&gt;Hexacorn - Persistence Series&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ired.team/&#34;&gt;IRED&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings&#34;&gt;PayloadsAllTheThings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>LocalizeLimbusCompany/LLC_ChineseFontAsset</title>
    <updated>2023-04-25T01:41:28Z</updated>
    <id>tag:github.com,2023-04-25:/LocalizeLimbusCompany/LLC_ChineseFontAsset</id>
    <link href="https://github.com/LocalizeLimbusCompany/LLC_ChineseFontAsset" rel="alternate"></link>
    <summary type="html">&lt;p&gt;中文字体&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LLC_ChineseFontAsset&lt;a href=&#34;https://raw.githubusercontent.com/LocalizeLimbusCompany/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/LocalizeLimbusCompany/LLC_ChineseFontAsset/total.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;中文字体&lt;/p&gt;</summary>
  </entry>
</feed>