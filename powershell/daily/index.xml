<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-25T01:50:36Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mgeeky/ProtectMyTooling</title>
    <updated>2022-07-25T01:50:36Z</updated>
    <id>tag:github.com,2022-07-25:/mgeeky/ProtectMyTooling</id>
    <link href="https://github.com/mgeeky/ProtectMyTooling" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-Packer allowing to daisy-chain over 29 packers, obfuscators and other Red Team oriented weaponry. Featured with artifacts watermarking, IOCs collection &amp; PE Backdooring. You feed it with your implant, it does a lot of sneaky things and spits out obfuscated executable.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mgeeky/ProtectMyTooling/master/images/1.png&#34; alt=&#34;1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Don&#39;t Detect Tools - Detect Techniques&lt;/h1&gt; &#xA;&lt;p&gt;Rationale behind releasing this software was outlined in an acompanying blog post:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mgeeky.tech/protectmytooling/&#34;&gt;ProtectMyTooling - Don&#39;t detect tools, detect techniques&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;Script that wraps around multitude of packers, protectors, obfuscators, shellcode loaders, encoders, generators to produce complex protected Red Team implants. Your perfect companion in Malware Development CI/CD pipeline, &lt;strong&gt;helping watermark your artifacts, collect IOCs, backdoor and more&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ProtectMyToolingGUI.py&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mgeeky/ProtectMyTooling/master/images/3.png&#34; alt=&#34;3.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;ProtectMyTooling&lt;/code&gt; you can quickly obfuscate your binaries without having to worry about clicking through all the Dialogs, interfaces, menus, creating projects to obfuscate a single binary, clicking through all the options available and wasting time about all that nonsense. It takes you straight to the point - to obfuscate your tool.&lt;/p&gt; &#xA;&lt;p&gt;Aim is to offer the most convenient interface possible and allow to leverage &lt;em&gt;a daisy-chain of multiple packers&lt;/em&gt; combined on a single binary.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s right - we can launch &lt;code&gt;ProtectMyTooling&lt;/code&gt; with several packers at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\&amp;gt; py ProtectMyTooling.py hyperion,upx mimikatz.exe mimikatz-obf.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above example will firstly pass &lt;code&gt;mimikatz.exe&lt;/code&gt; to the Hyperion for obfuscation, and then the result will be provided to UPX for compression. Resulting with &lt;code&gt;UPX(Hyperion(file))&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports multiple different PE Packers, .NET Obfuscators, Shellcode Loaders/Builders&lt;/li&gt; &#xA; &lt;li&gt;Allows daisy-chaining packers where output from a packer is passed to the consecutive one: &lt;code&gt;callobf,hyperion,upx&lt;/code&gt; will produce artifact &lt;code&gt;UPX(Hyperion(CallObf(file)))&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Collects IOCs at every obfuscation step so that auditing &amp;amp; Blue Team requests can be satisfied&lt;/li&gt; &#xA; &lt;li&gt;Offers functionality to inject custom Watermarks to resulting PE artifacts - in DOS Stub, Checksum, as a standalone PE Section, to file&#39;s Overlay&lt;/li&gt; &#xA; &lt;li&gt;Comes up with a handy Cobalt Strike aggressor script bringing &lt;code&gt;protected-upload&lt;/code&gt; and &lt;code&gt;protected-execute-assembly&lt;/code&gt; commands&lt;/li&gt; &#xA; &lt;li&gt;Straightforward command line usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This tool was designed to work on Windows, as most packers natively target that platform.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some features may work however on Linux just fine, nonetheless that support is not fully tested, please report bugs and issues.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First, &lt;strong&gt;disable your AV&lt;/strong&gt; and add &lt;code&gt;contrib&lt;/code&gt; directory to exclusions. That directory contains obfuscators, protectors which will get flagged by AV and removed.&lt;/li&gt; &#xA; &lt;li&gt;Then clone this repository&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; git clone --recurse https://github.com/Binary-Offensive/ProtectMyTooling&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Actual installation is straightforward:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS C:\ProtectMyTooling&amp;gt; .\install.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash# ./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gimmicks&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;code&gt;ScareCrow&lt;/code&gt; packer to run on Windows 10, there needs to be &lt;code&gt;WSL&lt;/code&gt; installed and &lt;code&gt;bash.exe&lt;/code&gt; available (in &lt;code&gt;%PATH%&lt;/code&gt;). Then, in WSL one needs to have &lt;code&gt;golang&lt;/code&gt; installed in version at least &lt;code&gt;1.16&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmd&amp;gt; bash&#xA;bash$ sudo apt update ; sudo apt upgrade -y ; sudo apt install golang=2:1.18~3 -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;To plug-in supported obfuscators, change default options or point &lt;strong&gt;ProtectMyTooling&lt;/strong&gt; to your obfuscator executable path, you will need to adjust &lt;code&gt;config\ProtectMyTooling.yaml&lt;/code&gt; configuration file.&lt;/p&gt; &#xA;&lt;p&gt;There is also &lt;code&gt;config\sample-full-config.yaml&lt;/code&gt; file containing all the available options for all the supported packers, serving as reference point.&lt;/p&gt; &#xA;&lt;h2&gt;Friendly reminder&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If your produced binary crashes or doesn&#39;t run as expected - try using different packers chain.&lt;/li&gt; &#xA; &lt;li&gt;Packers don&#39;t guarantee stability of produced binaries, therefore ProtectMyTooling cannot as well.&lt;/li&gt; &#xA; &lt;li&gt;While chaining, carefully match output-&amp;gt;input payload formats according to what consecutive packer expects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Before &lt;code&gt;ProtectMyTooling&lt;/code&gt;&#39;s first use, it is essential to adjust program&#39;s YAML configuration file &lt;code&gt;ProtectMyTooling.yaml&lt;/code&gt;. The order of parameters processal is following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Firstly default parameters are used&lt;/li&gt; &#xA; &lt;li&gt;Then they&#39;re overwritten by values coming from YAML&lt;/li&gt; &#xA; &lt;li&gt;Finally, whatever is provided in command line will overwrite corresponding values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There, supported packer paths and options shall be set to enable.&lt;/p&gt; &#xA;&lt;h3&gt;Scenario 1: Simple ConfuserEx obfuscation&lt;/h3&gt; &#xA;&lt;p&gt;Usage is very simple, all it takes is to pass the name of obfuscator to choose, input and output file paths:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\&amp;gt; py ProtectMyTooling.py confuserex Rubeus.exe Rubeus-obf.exe&#xA;&#xA;    ::::::::::.:::::::..      ...  :::::::::::.,::::::  .,-::::::::::::::::&#xA;     `;;;```.;;;;;;``;;;;  .;;;;;;;;;;;;;;;\&#39;&#39;&#39;;;;;\&#39;\&#39;&#39;&#39;,;;;&#39;````;;;;;;;;\&#39;\&#39;&#39;&#39;&#xA;      `]]nnn]]&#39; [[[,/[[[&#39; ,[[     \[[,  [[     [[cccc [[[           [[&#xA;       $$$&#34;&#34;    $$$$$$c   $$$,     $$$  $$     $$&#34;&#34;&#34;&#34; $$$           $$&#xA;       888o     888b &#34;88bo&#34;888,_ _,88P  88,    888oo,_`88bo,__,o,   88,&#xA;    .  YMMMb :.-:.MM   ::-. &#34;YMMMMMP&#34;   MMM    &#34;&#34;&#34;&#34;YUMMM&#34;YUMMMMMP&#34;  MMM&#xA;    ;;,.    ;;;&#39;;;.   ;;;;&#39;&#xA;    [[[[, ,[[[[, &#39;[[,[[[&#39;&#xA;    $$$$$$$$&#34;$$$   c$$&#34;&#xA;    888 Y88&#34; 888o,8P&#34;`&#xA;    ::::::::::::mM...        ...     :::    :::::.    :::. .,-:::::/&#xA;    ;;;;;;;;\&#39;&#39;&#39;.;;;;;;;.  .;;;;;;;.  ;;;    ;;`;;;;,  `;;,;;-&#39;````&#39;&#xA;         [[   ,[[     \[[,[[     \[[,[[[    [[[ [[[[[. &#39;[[[[   [[[[[[/&#xA;         $$   $$$,     $$$$$,     $$$$$&#39;    $$$ $$$ &#34;Y$c$&#34;$$c.    &#34;$$&#xA;         88,  &#34;888,_ _,88&#34;888,_ _,88o88oo,._888 888    Y88`Y8bo,,,o88o&#xA;         MMM    &#34;YMMMMMP&#34;  &#34;YMMMMMP&#34;&#34;&#34;&#34;&#34;YUMMMMM MMM     YM  `&#39;YMUP&#34;YMM&#xA;&#xA;    Red Team implants protection swiss knife.&#xA;&#xA;    Multi-Packer wrapping around multitude of packers, protectors, shellcode loaders, encoders.&#xA;    Mariusz Banach / mgeeky &#39;20-&#39;22, &amp;lt;mb@binary-offensive.com&amp;gt;&#xA;    v0.15&#xA;&#xA;[.] Processing x86 file: &#34;\Rubeus.exe&#34;&#xA;[.] Generating output of ConfuserEx(&amp;lt;file&amp;gt;)...&#xA;&#xA;[+] SUCCEEDED. Original file size: 417280 bytes, new file size ConfuserEx(&amp;lt;file&amp;gt;): 756224, ratio: 181.23%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scenario 2: Simple ConfuserEx obfuscation followed by artifact test&lt;/h3&gt; &#xA;&lt;p&gt;One can also obfuscate the file and immediately attempt to launch it (also with supplied optional parameters) to ensure it runs fine with options &lt;code&gt;-r --cmdline CMDLINE&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\&amp;gt; py ProtectMyTooling.py confuserex Rubeus.exe Rubeus-obf.exe -r --cmdline &#34;hash /password:foobar&#34;&#xA;&#xA;    [...]&#xA;&#xA;[.] Processing x86 file: &#34;\Rubeus.exe&#34;&#xA;[.] Generating output of ConfuserEx(&amp;lt;file&amp;gt;)...&#xA;&#xA;[+] SUCCEEDED. Original file size: 417280 bytes, new file size ConfuserEx(&amp;lt;file&amp;gt;): 758272, ratio: 181.72%&#xA;&#xA;&#xA;Running application to test it...&#xA;&#xA;   ______        _&#xA;  (_____ \      | |&#xA;   _____) )_   _| |__  _____ _   _  ___&#xA;  |  __  /| | | |  _ \| ___ | | | |/___)&#xA;  | |  \ \| |_| | |_) ) ____| |_| |___ |&#xA;  |_|   |_|____/|____/|_____)____/(___/&#xA;&#xA;  v2.0.0&#xA;&#xA;&#xA;[*] Action: Calculate Password Hash(es)&#xA;&#xA;[*] Input password             : foobar&#xA;[*]       rc4_hmac             : BAAC3929FABC9E6DCD32421BA94A84D4&#xA;&#xA;[!] /user:X and /domain:Y need to be supplied to calculate AES and DES hash types!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scenario 3: Complex malware obfuscation with watermarking and IOCs collection&lt;/h3&gt; &#xA;&lt;p&gt;Below use case takes &lt;code&gt;beacon.exe&lt;/code&gt; on input and feeds it consecutively into &lt;code&gt;CallObf&lt;/code&gt; -&amp;gt; &lt;code&gt;UPX&lt;/code&gt; -&amp;gt; &lt;code&gt;Hyperion&lt;/code&gt; packers.&lt;/p&gt; &#xA;&lt;p&gt;Then it will inject specified &lt;code&gt;fooobar&lt;/code&gt; watermark to the final generated output artifact&#39;s DOS Stub as well as modify that artifact&#39;s checksum with value &lt;code&gt;0xAABBCCDD&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, ProtectMyTooling will capture all IOCs (md5, sha1, sha256, imphash, and other metadata) and save them in auxiliary CSV file. That file can be used for IOC matching as engagement unfolds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS&amp;gt; py .\ProtectMyTooling.py callobf,upx,hyperion beacon.exe beacon-obf.exe -i -I operation_chimera -w dos-stub=fooobar -w checksum=0xaabbccdd&#xA;&#xA;    [...]&#xA;&#xA;[.] Processing x64 file: &#34;beacon.exe&#34;&#xA;[&amp;gt;] Generating output of CallObf(&amp;lt;file&amp;gt;)...&#xA;&#xA;[.] Before obfuscation file&#39;s PE IMPHASH:       17b461a082950fc6332228572138b80c&#xA;[.] After obfuscation file&#39;s PE IMPHASH:        378d9692fe91eb54206e98c224a25f43&#xA;[&amp;gt;] Generating output of UPX(CallObf(&amp;lt;file&amp;gt;))...&#xA;&#xA;[&amp;gt;] Generating output of Hyperion(UPX(CallObf(&amp;lt;file&amp;gt;)))...&#xA;&#xA;[+] Setting PE checksum to 2864434397 (0xaabbccdd)&#xA;[+] Successfully watermarked resulting artifact file.&#xA;[+] IOCs written to: beacon-obf-ioc.csv&#xA;&#xA;[+] SUCCEEDED. Original file size: 288256 bytes, new file size Hyperion(UPX(CallObf(&amp;lt;file&amp;gt;))): 175616, ratio: 60.92%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Produced IOCs evidence CSV file will look as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;timestamp,filename,author,context,comment,md5,sha1,sha256,imphash&#xA;2022-06-10 03:15:52,beacon.exe,mgeeky@commandoVM,Input File,test,dcd6e13754ee753928744e27e98abd16,298de19d4a987d87ac83f5d2d78338121ddb3cb7,0a64768c46831d98c5667d26dc731408a5871accefd38806b2709c66cd9d21e4,17b461a082950fc6332228572138b80c&#xA;2022-06-10 03:15:52,y49981l3.bin,mgeeky@commandoVM,Obfuscation artifact: CallObf(&amp;lt;file&amp;gt;),test,50bbce4c3cc928e274ba15bff0795a8c,15bde0d7fbba1841f7433510fa9aa829f8441aeb,e216cd8205f13a5e3c5320ba7fb88a3dbb6f53ee8490aa8b4e1baf2c6684d27b,378d9692fe91eb54206e98c224a25f43&#xA;2022-06-10 03:15:53,nyu2rbyx.bin,mgeeky@commandoVM,Obfuscation artifact: UPX(CallObf(&amp;lt;file&amp;gt;)),test,4d3584f10084cded5c6da7a63d42f758,e4966576bdb67e389ab1562e24079ba9bd565d32,97ba4b17c9bd9c12c06c7ac2dc17428d509b64fc8ca9e88ee2de02c36532be10,9aebf3da4677af9275c461261e5abde3&#xA;2022-06-10 03:15:53,beacon-obf.exe,mgeeky@commandoVM,Obfuscation artifact: Hyperion(UPX(CallObf(&amp;lt;file&amp;gt;))),test,8b706ff39dd4c8f2b031c8fa6e3c25f5,c64aad468b1ecadada3557cb3f6371e899d59790,087c6353279eb5cf04715ef096a18f83ef8184aa52bc1d5884e33980028bc365,a46ea633057f9600559d5c6b328bf83d&#xA;2022-06-10 03:15:53,beacon-obf.exe,mgeeky@commandoVM,Output obfuscated artifact,test,043318125c60d36e0b745fd38582c0b8,a7717d1c47cbcdf872101bd488e53b8482202f7f,b3cf4311d249d4a981eb17a33c9b89eff656fff239e0d7bb044074018ec00e20,a46ea633057f9600559d5c6b328bf83d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Packers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ProtectMyTooling&lt;/code&gt; was designed to support not only Obfuscators/Packers but also all sort of builders/generators/shellcode loaders usable from the command line.&lt;/p&gt; &#xA;&lt;p&gt;At the moment, program supports various Commercial and Open-Source packers/obfuscators. Those Open-Source ones are bundled within the project. Commercial ones will require user to purchase the product and configure its location in &lt;code&gt;ProtectMyTooling.yaml&lt;/code&gt; file to point the script where to find them.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EgeBalci/amber&#34;&gt;&lt;code&gt;Amber&lt;/code&gt;&lt;/a&gt; - Reflective PE Packer that takes EXE/DLL on input and produces EXE/PIC shellcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Charterino/AsStrongAsFuck&#34;&gt;&lt;code&gt;AsStrongAsFuck&lt;/code&gt;&lt;/a&gt; - A console obfuscator for .NET assemblies by Charterino&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/d35ha/CallObfuscator&#34;&gt;&lt;code&gt;CallObfuscator&lt;/code&gt;&lt;/a&gt; - Obfuscates specific windows apis with different apis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mkaring/ConfuserEx&#34;&gt;&lt;code&gt;ConfuserEx&lt;/code&gt;&lt;/a&gt; - Popular .NET obfuscator, forked from &lt;a href=&#34;https://github.com/mkaring&#34;&gt;Martin Karing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheWover/donut&#34;&gt;&lt;code&gt;Donut&lt;/code&gt;&lt;/a&gt; - Popular PE loader that takes EXE/DLL/.NET on input and produces a PIC shellcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://enigmaprotector.com/&#34;&gt;&lt;code&gt;Enigma&lt;/code&gt;&lt;/a&gt; - A powerful system designed for comprehensive protection of executable files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nullsecurity.net/tools/binary.html&#34;&gt;&lt;code&gt;Hyperion&lt;/code&gt;&lt;/a&gt; - runtime encrypter for 32-bit and 64-bit portable executables. It is a reference implementation and bases on the paper &#34;Hyperion: Implementation of a PE-Crypter&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.eziriz.com/intellilock.htm&#34;&gt;&lt;code&gt;IntelliLock&lt;/code&gt;&lt;/a&gt; - combines strong license security, highly adaptable licensing functionality/schema with reliable assembly protection&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danielbohannon/Invoke-Obfuscation&#34;&gt;&lt;code&gt;InvObf&lt;/code&gt;&lt;/a&gt; - Obfuscates Powershell scripts with &lt;code&gt;Invoke-Obfuscation&lt;/code&gt; (by Daniell Bohannon)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AnErrupTion/LoGiC.NET&#34;&gt;&lt;code&gt;LoGiC.NET&lt;/code&gt;&lt;/a&gt; - A more advanced free and open .NET obfuscator using dnlib by AnErrupTion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/optiv/Mangle&#34;&gt;&lt;code&gt;Mangle&lt;/code&gt;&lt;/a&gt; - Takes input EXE/DLL file and produces output one with cloned certificate, removed Golang-specific IoCs and bloated size. By Matt Eidelberg (@Tyl0us).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.autohotkey.com/mpress/mpress_web.htm&#34;&gt;&lt;code&gt;MPRESS&lt;/code&gt;&lt;/a&gt; - MPRESS compressor by Vitaly Evseenko. Takes input EXE/DLL/.NET/MAC-DARWIN (x86/x64) and compresses it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.eziriz.com/dotnet_reactor.htm&#34;&gt;&lt;code&gt;NetReactor&lt;/code&gt;&lt;/a&gt; - Unmatched .NET code protection system which completely stops anyone from decompiling your code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pelock.com/pl/produkty/netshrink&#34;&gt;&lt;code&gt;NetShrink&lt;/code&gt;&lt;/a&gt; - an exe packer aka executable compressor, application password protector and virtual DLL binder for Windows &amp;amp; Linux .NET applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/icyguider/Nimcrypt2&#34;&gt;&lt;code&gt;Nimcrypt2&lt;/code&gt;&lt;/a&gt; - Generates Nim loader running input .NET, PE or Raw Shellcode. Authored by &lt;a href=&#34;https://twitter.com/icyguider&#34;&gt;(@icyguider)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chvancooten/NimPackt-v1&#34;&gt;&lt;code&gt;NimPackt-v1&lt;/code&gt;&lt;/a&gt; - Takes Shellcode or .NET Executable on input, produces EXE or DLL loader. Brought to you by Cas van Cooten &lt;a href=&#34;https://twitter.com/chvancooten&#34;&gt;(@chvancooten)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/S3cur3Th1sSh1t-Sponsors/NimSyscallPacker&#34;&gt;&lt;code&gt;NimSyscallPacker&lt;/code&gt;&lt;/a&gt; - Takes PE/Shellcode/.NET executable and generates robust Nim+Syscalls EXE/DLL loader. Sponsorware authored by &lt;a href=&#34;https://twitter.com/ShitSecure&#34;&gt;(@S3cur3Th1sSh1t)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jadams/Packer64&#34;&gt;&lt;code&gt;Packer64&lt;/code&gt;&lt;/a&gt; - wrapper around John Adams&#39; &lt;code&gt;Packer64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hasherezade/pe_to_shellcode&#34;&gt;&lt;code&gt;pe2shc&lt;/code&gt;&lt;/a&gt; - Converts PE into a shellcode. By yours truly &lt;a href=&#34;https://twitter.com/hasherezade&#34;&gt;@hasherezade&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/v-p-b/peCloakCapstone/raw/master/peCloak.py&#34;&gt;&lt;code&gt;peCloak&lt;/code&gt;&lt;/a&gt; - A Multi-Pass Encoder &amp;amp; Heuristic Sandbox Bypass AV Evasion Tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/avast/pe_tools&#34;&gt;&lt;code&gt;peresed&lt;/code&gt;&lt;/a&gt; - Uses &lt;em&gt;&#34;peresed&#34;&lt;/em&gt; from &lt;strong&gt;avast/pe_tools&lt;/strong&gt; to remove all existing PE Resources and signature &lt;em&gt;(think of Mimikatz icon).&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/optiv/ScareCrow&#34;&gt;&lt;code&gt;ScareCrow&lt;/code&gt;&lt;/a&gt; - EDR-evasive x64 shellcode loader that produces DLL/CPL/XLL/JScript/HTA artifact loader&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EgeBalci/sgn&#34;&gt;&lt;code&gt;sgn&lt;/code&gt;&lt;/a&gt; - Shikata ga nai (仕方がない) encoder ported into go with several improvements. Takes shellcode, produces encoded shellcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.red-gate.com/products/dotnet-development/smartassembly/&#34;&gt;&lt;code&gt;SmartAssembly&lt;/code&gt;&lt;/a&gt; - obfuscator that helps protect your application against reverse-engineering or modification, by making it difficult for a third-party to access your source code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/monoxgas/sRDI&#34;&gt;&lt;code&gt;sRDI&lt;/code&gt;&lt;/a&gt; - Convert DLLs to position independent shellcode. Authored by: &lt;a href=&#34;https://twitter.com/monoxgas&#34;&gt;Nick Landers, @monoxgas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oreans.com/Themida.php&#34;&gt;&lt;code&gt;Themida&lt;/code&gt;&lt;/a&gt; - Advanced Windows software protection system&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://upx.github.io/&#34;&gt;&lt;code&gt;UPX&lt;/code&gt;&lt;/a&gt; - a free, portable, extendable, high-performance executable packer for several executable formats.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vmpsoft.com/&#34;&gt;&lt;code&gt;VMProtect&lt;/code&gt;&lt;/a&gt; - protects code by executing it on a virtual machine with non-standard architecture that makes it extremely difficult to analyze and crack the software&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can quickly list supported packers using &lt;code&gt;-L&lt;/code&gt; option (table columns are chosen depending on Terminal width, the wider the more information revealed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\&amp;gt; py ProtectMyTooling.py -L&#xA;    [...]&#xA;&#xA;    Red Team implants protection swiss knife.&#xA;&#xA;    Multi-Packer wrapping around multitude of packers, protectors, shellcode loaders, encoders.&#xA;    Mariusz Banach / mgeeky &#39;20-&#39;22, &amp;lt;mb@binary-offensive.com&amp;gt;&#xA;    v0.15&#xA;&#xA;+----+----------------+-------------+-----------------------+-----------------------------+------------------------+--------------------------------------------------------+&#xA;| #  |      Name      |     Type    |       Licensing       |            Input            |         Output         |                         Author                         |&#xA;+----+----------------+-------------+-----------------------+-----------------------------+------------------------+--------------------------------------------------------+&#xA;| 1  |     amber      | open-source |    Shellcode Loader   |              PE             |     EXE, Shellcode     |                       Ege Balci                        |&#xA;| 2  | asstrongasfuck | open-source |    .NET Obfuscator    |             .NET            |          .NET          |                 Charterino, klezVirus                  |&#xA;| 3  |    backdoor    | open-source |    Shellcode Loader   |          Shellcode          |           PE           |              Mariusz Banach, @mariuszbit               |&#xA;| 4  |    callobf     | open-source |  PE EXE/DLL Protector |              PE             |           PE           |                Mustafa Mahmoud, @d35ha                 |&#xA;| 5  |   confuserex   | open-source |    .NET Obfuscator    |             .NET            |          .NET          |                        mkaring                         |&#xA;| 6  |  donut-packer  | open-source |  Shellcode Converter  | PE, .NET, VBScript, JScript |       Shellcode        |                        TheWover                        |&#xA;| 7  |     enigma     |  commercial |  PE EXE/DLL Protector |              PE             |           PE           |          The Enigma Protector Developers Team          |&#xA;| 8  |    hyperion    | open-source |  PE EXE/DLL Protector |              PE             |           PE           |                   nullsecurity team                    |&#xA;| 9  |  intellilock   |  commercial |    .NET Obfuscator    |              PE             |           PE           |                         Eziriz                         |&#xA;| 10 |     invobf     | open-source | Powershell Obfuscator |          Powershell         |       Powershell       |                    Daniel Bohannon                     |&#xA;| 11 |    logicnet    | open-source |    .NET Obfuscator    |             .NET            |          .NET          |                 AnErrupTion, klezVirus                 |&#xA;| 12 |     mangle     | open-source |   Executable Signing  |              PE             |           PE           |                Matt Eidelberg (@Tyl0us)                |&#xA;| 13 |     mpress     |   freeware  | PE EXE/DLL Compressor |              PE             |           PE           |                    Vitaly Evseenko                     |&#xA;| 14 |   netreactor   |  commercial |    .NET Obfuscator    |             .NET            |          .NET          |                         Eziriz                         |&#xA;| 15 |   netshrink    | open-source |    .NET Obfuscator    |             .NET            |          .NET          |                     Bartosz Wójcik                     |&#xA;| 16 |   nimcrypt2    | open-source |    Shellcode Loader   |     PE, .NET, Shellcode     |           PE           |                       @icyguider                       |&#xA;| 17 |    nimpackt    | open-source |    Shellcode Loader   |       .NET, Shellcode       |           PE           |             Cas van Cooten (@chvancooten)              |&#xA;| 18 |   nimsyscall   | sponsorware |    Shellcode Loader   |     PE, .NET, Shellcode     |           PE           |                    @S3cur3Th1sSh1t                     |&#xA;| 19 |    packer64    | open-source | PE EXE/DLL Compressor |              PE             |           PE           |                  John Adams, @jadams                   |&#xA;| 20 |     pe2shc     | open-source |  Shellcode Converter  |              PE             |       Shellcode        |                      @hasherezade                      |&#xA;| 21 |    pecloak     | open-source |  PE EXE/DLL Protector |              PE             |           PE           |     Mike Czumak, @SecuritySift, buherator / v-p-b      |&#xA;| 22 |    peresed     | open-source |  PE EXE/DLL Protector |              PE             |           PE           |                  Martin Vejnár, Avast                  |&#xA;| 23 |   scarecrow    | open-source |    Shellcode Loader   |          Shellcode          | DLL, JScript, CPL, XLL |                Matt Eidelberg (@Tyl0us)                |&#xA;| 24 |      sgn       | open-source |   Shellcode Encoder   |          Shellcode          |       Shellcode        |                       Ege Balci                        |&#xA;| 25 | smartassembly  |  commercial |    .NET Obfuscator    |             .NET            |          .NET          |                        Red-Gate                        |&#xA;| 26 |      srdi      | open-source |   Shellcode Encoder   |             DLL             |       Shellcode        |                Nick Landers, @monoxgas                 |&#xA;| 27 |    themida     |  commercial |  PE EXE/DLL Protector |              PE             |           PE           |                         Oreans                         |&#xA;| 28 |      upx       | open-source | PE EXE/DLL Compressor |              PE             |           PE           | Markus F.X.J. Oberhumer, László Molnár, John F. Reiser |&#xA;| 29 |   vmprotect    |  commercial |  PE EXE/DLL Protector |              PE             |           PE           |                        vmpsoft                         |&#xA;+----+----------------+-------------+-----------------------+-----------------------------+------------------------+--------------------------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Above are the packers that are supported, but that doesn&#39;t mean that you have them configured and ready to use. To prepare their usage, you must first supply necessary binaries to the &lt;code&gt;contrib&lt;/code&gt; directory and then configure your YAML file accordingly.&lt;/p&gt; &#xA;&lt;h1&gt;RedWatermarker - built-in Artifact watermarking&lt;/h1&gt; &#xA;&lt;h2&gt;Artifact watermarking &amp;amp; IOC collection&lt;/h2&gt; &#xA;&lt;p&gt;This program is intended for professional Red Teams and is perfect to be used in a typical implant-development CI/CD pipeline. As a red teamer I&#39;m always expected to deliver decent quality list of IOCs matching back to all of my implants as well as I find it essential to watermark all my implants for bookkeeping, attribution and traceability purposes.&lt;/p&gt; &#xA;&lt;p&gt;To accommodate these requirements, ProtectMyTooling brings basic support for them.&lt;/p&gt; &#xA;&lt;h3&gt;Artifact Watermarking&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ProtectMyTooling&lt;/code&gt; can apply watermarks after obfuscation rounds simply by using &lt;code&gt;--watermark&lt;/code&gt; option.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;py ProtectMyTooling [...] -w dos-stub=fooooobar -w checksum=0xaabbccdd -w section=.coco,ALLYOURBASEAREBELONG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a standalone approach, included in &lt;code&gt;RedWatermarker.py&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;It takes executable artifact on input and accepts few parameters denoting where to inject a watermark and what value shall be inserted.&lt;/p&gt; &#xA;&lt;p&gt;Example run will set PE Checksum to 0xAABBCCDD, inserts &lt;code&gt;foooobar&lt;/code&gt; to PE file&#39;s DOS Stub (bytes containing &lt;em&gt;This program cannot be run...&lt;/em&gt;), appends &lt;code&gt;bazbazbaz&lt;/code&gt; to file&#39;s overlay and then create a new PE section named &lt;code&gt;.coco&lt;/code&gt; append it to the end of file and fill that section with preset marker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;py RedWatermarker.py beacon-obf.exe -c 0xaabbccdd -t fooooobar -e bazbazbaz -s .coco,ALLYOURBASEAREBELONG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full watermarker usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmd&amp;gt; py RedWatermarker.py --help&#xA;&#xA;                      ;&#xA;                      ED.&#xA;                     ,E#Wi&#xA;  j.               f#iE###G.&#xA;  EW,            .E#t E#fD#W;&#xA;  E##j          i#W,  E#t t##L&#xA;  E###D.       L#D.   E#t  .E#K,&#xA;  E#jG#W;    :K#Wfff; E#t    j##f&#xA;  E#t t##f   i##WLLLLtE#t    :E#K:&#xA;  E#t  :K#E:  .E#L    E#t   t##L&#xA;  E#KDDDD###i   f#E:  E#t .D#W;                  ,;                                                      G:              ,;&#xA;  E#f,t#Wi,,,    ,WW; E#tiW#G.                 f#i j.                                          j.        E#,    :      f#i j.&#xA;  E#t  ;#W: ;     .D#;E#K##i .. GEEEEEEEL    .E#t  EW,                 ..       :           .. EW,       E#t  .GE    .E#t  EW,&#xA;  DWi   ,K.DL       ttE##D. ;W, ,;;L#K;;.   i#W,   E##j               ,W,     .Et          ;W, E##j      E#t j#K;   i#W,   E##j&#xA;  f.     :K#L     LWL E#t  j##,    t#E     L#D.    E###D.            t##,    ,W#t         j##, E###D.    E#GK#f    L#D.    E###D.&#xA;  EW:   ;W##L   .E#f  L:  G###,    t#E   :K#Wfff;  E#jG#W;          L###,   j###t        G###, E#jG#W;   E##D.   :K#Wfff;  E#jG#W;&#xA;  E#t  t#KE#L  ,W#;     :E####,    t#E   i##WLLLLt E#t t##f       .E#j##,  G#fE#t      :E####, E#t t##f  E##Wi   i##WLLLLt E#t t##f&#xA;  E#t f#D.L#L t#K:     ;W#DG##,    t#E    .E#L     E#t  :K#E:    ;WW; ##,:K#i E#t     ;W#DG##, E#t  :K#E:E#jL#D:  .E#L     E#t  :K#E:&#xA;  E#jG#f  L#LL#G      j###DW##,    t#E      f#E:   E#KDDDD###i  j#E.  ##f#W,  E#t    j###DW##, E#KDDDD###E#t ,K#j   f#E:   E#KDDDD###i&#xA;  E###;   L###j      G##i,,G##,    t#E       ,WW;  E#f,t#Wi,,,.D#L    ###K:   E#t   G##i,,G##, E#f,t#Wi,,E#t   jD    ,WW;  E#f,t#Wi,,,&#xA;  E#K:    L#W;     :K#K:   L##,    t#E        .D#; E#t  ;#W: :K#t     ##D.    E#t :K#K:   L##, E#t  ;#W: j#t          .D#; E#t  ;#W:&#xA;  EG      LE.     ;##D.    L##,     fE          tt DWi   ,KK:...      #G      .. ;##D.    L##, DWi   ,KK: ,;            tt DWi   ,KK:&#xA;  ;       ;@      ,,,      .,,       :                                j          ,,,      .,,&#xA;&#xA;&#xA;    Watermark thy implants, track them in VirusTotal&#xA;    Mariusz Banach / mgeeky &#39;22, (@mariuszbit)&#xA;    &amp;lt;mb@binary-offensive.com&amp;gt;&#xA;&#xA;usage: RedWatermarker.py [options] &amp;lt;infile&amp;gt;&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;&#xA;Required arguments:&#xA;  infile                Input implant file&#xA;&#xA;Optional arguments:&#xA;  -C, --check           Do not actually inject watermark. Check input file if it contains specified watermarks.&#xA;  -v, --verbose         Verbose mode.&#xA;  -d, --debug           Debug mode.&#xA;  -o PATH, --outfile PATH&#xA;                        Path where to save output file with watermark injected. If not given, will modify infile.&#xA;&#xA;PE Executables Watermarking:&#xA;  -t STR, --dos-stub STR&#xA;                        Insert watermark into PE DOS Stub (This program cannot be run...).&#xA;  -c NUM, --checksum NUM&#xA;                        Preset PE checksum with this value (4 bytes). Must be number. Can start with 0x for hex value.&#xA;  -e STR, --overlay STR&#xA;                        Append watermark to the file&#39;s Overlay (at the end of the file).&#xA;  -s NAME,STR, --section NAME,STR&#xA;                        Append a new PE section named NAME and insert watermark there. Section name must be shorter than 8 characters. Section will be marked Read-Only, non-executable.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently only PE files watermarking is supported, but in the future Office documents and other formats are to be added as well.&lt;/p&gt; &#xA;&lt;h3&gt;IOCs Collection&lt;/h3&gt; &#xA;&lt;p&gt;IOCs may be collected by simply using &lt;code&gt;-i&lt;/code&gt; option in &lt;code&gt;ProtectMyTooling&lt;/code&gt; run.&lt;/p&gt; &#xA;&lt;p&gt;They&#39;re being collected at the following phases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;on the input file&lt;/li&gt; &#xA; &lt;li&gt;after each obfuscation round on an intermediary file&lt;/li&gt; &#xA; &lt;li&gt;on the final output file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They will contain following fields saved in form of a CSV file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;author&lt;/code&gt; - formed as &lt;code&gt;username@hostname&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;context&lt;/code&gt; - whether a record points to an input, output or intermediary file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;comment&lt;/code&gt; - value adjusted by the user through &lt;code&gt;-I value&lt;/code&gt; option&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;md5&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sha1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sha256&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;imphash&lt;/code&gt; - PE Imports Hash, if available&lt;/li&gt; &#xA; &lt;li&gt;(TODO) &lt;code&gt;typeref_hash&lt;/code&gt; - .NET TypeRef Hash, if available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Resulting will be a CSV file named &lt;code&gt;outfile-ioc.csv&lt;/code&gt; stored side by side to generated output artifact. That file is written in APPEND mode, meaning it will receive all subsequent IOCs.&lt;/p&gt; &#xA;&lt;h1&gt;RedBackdoorer - built-in PE Backdooring&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;ProtectMyTooling&lt;/code&gt; utilizes my own &lt;code&gt;RedBackdoorer.py&lt;/code&gt; script which provides few methods for backdooring PE executables. Support comes as a dedicated packer named &lt;code&gt;backdoor&lt;/code&gt;. Example usage:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Takes Cobalt Strike shellcode on input and encodes with SGN (Shikata Ga-Nai) then backdoors SysInternals DbgView64.exe then produces Amber EXE reflective loader&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS&amp;gt; py ProtectMyTooling.py sgn,backdoor,amber beacon64.bin dbgview64-infected.exe -B dbgview64.exe&#xA;&#xA;    ::::::::::.:::::::..      ...  :::::::::::.,::::::  .,-::::::::::::::::&#xA;     `;;;```.;;;;;;``;;;;  .;;;;;;;;;;;;;;;;;;;,;;;&#39;````;;;;;;;;&#xA;      `]]nnn]]&#39; [[[,/[[[&#39; ,[[     \[[,  [[     [[cccc [[[           [[&#xA;       $$$&#34;&#34;    $$$$$$c   $$$,     $$$  $$     $$&#34;&#34;&#34;&#34; $$$           $$&#xA;       888o     888b &#34;88bo&#34;888,_ _,88P  88,    888oo,_`88bo,__,o,   88,&#xA;    .  YMMMb :.-:.MM   ::-. &#34;YMMMMMP&#34;   MMM    &#34;&#34;&#34;&#34;YUMMM&#34;YUMMMMMP&#34;  MMM&#xA;    ;;,.    ;;;&#39;;;.   ;;;;&#39;&#xA;    [[[[, ,[[[[, &#39;[[,[[[&#39;&#xA;    $$$$$$$$&#34;$$$   c$$&#34;&#xA;    888 Y88&#34; 888o,8P&#34;`&#xA;    ::::::::::::mM...        ...     :::    :::::.    :::. .,-:::::/&#xA;    ;;;;;;;;.;;;;;;;.  .;;;;;;;.  ;;;    ;;`;;;;,  `;;,;;-&#39;````&#39;&#xA;         [[   ,[[     \[[,[[     \[[,[[[    [[[ [[[[[. &#39;[[[[   [[[[[[/&#xA;         $$   $$$,     $$$$$,     $$$$$&#39;    $$$ $$$ &#34;Y$c$&#34;$$c.    &#34;$$&#xA;         88,  &#34;888,_ _,88&#34;888,_ _,88o88oo,._888 888    Y88`Y8bo,,,o88o&#xA;         MMM    &#34;YMMMMMP&#34;  &#34;YMMMMMP&#34;&#34;&#34;&#34;&#34;YUMMMMM MMM     YM  `&#39;YMUP&#34;YMM&#xA;&#xA;    Red Team implants protection swiss knife.&#xA;&#xA;    Multi-Packer wrapping around multitude of packers, protectors, shellcode loaders, encoders.&#xA;    Mariusz Banach / mgeeky &#39;20-&#39;22, &amp;lt;mb@binary-offensive.com&amp;gt;&#xA;    v0.15&#xA;&#xA;[.] Processing x64 file :  beacon64.bin&#xA;[&amp;gt;] Generating output of sgn(&amp;lt;file&amp;gt;)...&#xA;[&amp;gt;] Generating output of backdoor(sgn(&amp;lt;file&amp;gt;))...&#xA;[&amp;gt;] Generating output of Amber(backdoor(sgn(&amp;lt;file&amp;gt;)))...&#xA;&#xA;[+] SUCCEEDED. Original file size: 265959 bytes, new file size Amber(backdoor(sgn(&amp;lt;file&amp;gt;))): 1372672, ratio: 516.12%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full RedBackdoorer usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmd&amp;gt; py RedBackdoorer.py --help&#xA;&#xA;     ██▀███ ▓█████▓█████▄&#xA;    ▓██ ▒ ██▓█   ▀▒██▀ ██▌&#xA;    ▓██ ░▄█ ▒███  ░██   █▌&#xA;    ▒██▀▀█▄ ▒▓█  ▄░▓█▄   ▌&#xA;    ░██▓ ▒██░▒████░▒████▓&#xA;    ░ ▒▓ ░▒▓░░ ▒░ ░▒▒▓  ▒&#xA;      ░▒ ░ ▒░░ ░  ░░ ▒  ▒&#xA;      ░░   ░   ░   ░ ░  ░&#xA;     ▄▄▄▄   ▄▄▄░  ░  ▄████▄  ██ ▄█▓█████▄ ▒█████  ▒█████  ██▀███ ▓█████ ██▀███&#xA;    ▓█████▄▒████▄  ░▒██▀ ▀█  ██▄█▒▒██▀ ██▒██▒  ██▒██▒  ██▓██ ▒ ██▓█   ▀▓██ ▒ ██▒&#xA;    ▒██▒ ▄█▒██  ▀█▄ ▒▓█    ▄▓███▄░░██   █▒██░  ██▒██░  ██▓██ ░▄█ ▒███  ▓██ ░▄█ ▒&#xA;    ▒██░█▀ ░██▄▄▄▄██▒▓▓▄ ▄██▓██ █▄░▓█▄   ▒██   ██▒██   ██▒██▀▀█▄ ▒▓█  ▄▒██▀▀█▄&#xA;    ░▓█  ▀█▓▓█   ▓██▒ ▓███▀ ▒██▒ █░▒████▓░ ████▓▒░ ████▓▒░██▓ ▒██░▒████░██▓ ▒██▒&#xA;    ░▒▓███▀▒▒▒   ▓▒█░ ░▒ ▒  ▒ ▒▒ ▓▒▒▒▓  ▒░ ▒░▒░▒░░ ▒░▒░▒░░ ▒▓ ░▒▓░░ ▒░ ░ ▒▓ ░▒▓░&#xA;    ▒░▒   ░  ▒   ▒▒ ░ ░  ▒  ░ ░▒ ▒░░ ▒  ▒  ░ ▒ ▒░  ░ ▒ ▒░  ░▒ ░ ▒░░ ░  ░ ░▒ ░ ▒░&#xA;     ░    ░  ░   ▒  ░       ░ ░░ ░ ░ ░  ░░ ░ ░ ▒ ░ ░ ░ ▒   ░░   ░   ░    ░░   ░&#xA;     ░           ░  ░ ░     ░  ░     ░       ░ ░     ░ ░    ░       ░  ░  ░&#xA;          ░         ░              ░&#xA;&#xA;&#xA;    Your finest PE backdooring companion.&#xA;    Mariusz Banach / mgeeky &#39;22, (@mariuszbit)&#xA;    &amp;lt;mb@binary-offensive.com&amp;gt;&#xA;&#xA;usage: RedBackdoorer.py [options] &amp;lt;mode&amp;gt; &amp;lt;shellcode&amp;gt; &amp;lt;infile&amp;gt;&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;&#xA;Required arguments:&#xA;  mode                  PE Injection mode, see help epilog for more details.&#xA;  shellcode             Input shellcode file&#xA;  infile                PE file to backdoor&#xA;&#xA;Optional arguments:&#xA;  -o PATH, --outfile PATH&#xA;                        Path where to save output file with watermark injected. If not given, will modify infile.&#xA;  -v, --verbose         Verbose mode.&#xA;&#xA;Backdooring options:&#xA;  -n NAME, --section-name NAME&#xA;                        If shellcode is to be injected into a new PE section, define that section name. Section name must not be longer than 7 characters. Default: .qcsw&#xA;  -i IOC, --ioc IOC     Append IOC watermark to injected shellcode to facilitate implant tracking.&#xA;&#xA;Authenticode signature options:&#xA;  -r, --remove-signature&#xA;                        Remove PE Authenticode digital signature since its going to be invalidated anyway.&#xA;&#xA;------------------&#xA;&#xA;PE Backdooring &amp;lt;mode&amp;gt; consists of two comma-separated options.&#xA;First one denotes where to store shellcode, second how to run it:&#xA;&#xA;&amp;lt;mode&amp;gt;&#xA;&#xA;    save,run&#xA;      |   |&#xA;      |   +---------- 1 - change AddressOfEntryPoint&#xA;      |               2 - hijack branching instruction at Original Entry Point (jmp, call, ...)&#xA;      |               3 - setup TLS callback&#xA;      |&#xA;      +-------------- 1 - store shellcode in the middle of a code section&#xA;                      2 - append shellcode to the PE file in a new PE section&#xA;Example:&#xA;&#xA;    py RedBackdoorer.py 1,2 beacon.bin putty.exe putty-infected.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Cobalt Strike Integration&lt;/h1&gt; &#xA;&lt;p&gt;There is also a script that integrates &lt;code&gt;ProtectMyTooling.py&lt;/code&gt; used as a wrapper around configured PE/.NET Packers/Protectors in order to easily transform input executables into their protected and compressed output forms and then upload or use them from within CobaltStrike.&lt;/p&gt; &#xA;&lt;p&gt;The idea is to have an automated process of protecting all of the uploaded binaries or .NET assemblies used by execute-assembly and forget about protecting or obfuscating them manually before each usage. The added benefit of an automated approach to transform executables is the ability to have the same executable protected each time it&#39;s used, resulting in unique samples launched on target machines. That should nicely deceive EDR/AV enterprise-wide IOC sweeps while looking for the same artefact on different machines.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the protected-execute-assembly command has the ability to look for assemblies of which only name were given in a preconfigured assemblies directory (set in dotnet_assemblies_directory setting).&lt;/p&gt; &#xA;&lt;p&gt;To use it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Load &lt;code&gt;CobaltStrike/ProtectMyTooling.cna&lt;/code&gt; in your Cobalt Strike.&lt;/li&gt; &#xA; &lt;li&gt;Go to the menu and setup all the options&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mgeeky/ProtectMyTooling/master/images/options.png&#34; alt=&#34;options&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Then in your Beacon&#39;s console you&#39;ll have following commands available:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;protected-execute-assembly&lt;/code&gt; - Executes a local, previously protected and compressed .NET program in-memory on target.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protected-upload&lt;/code&gt; - Takes an input file, protects it if its PE executable and then uploads that file to specified remote location.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Basically these commands will open input files, pass the firstly to the &lt;code&gt;CobaltStrike/cobaltProtectMyTooling.py&lt;/code&gt; script, which in turn calls out to &lt;code&gt;ProtectMyTooling.py&lt;/code&gt;. As soon as the binary gets obfuscated, it will be passed to your beacon for execution/uploading.&lt;/p&gt; &#xA;&lt;h2&gt;Cobalt Strike related Options&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a list of options required by the Cobalt Strike integrator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python3_interpreter_path&lt;/code&gt; - Specify a path to Python3 interpreter executable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protect_my_tooling_dir&lt;/code&gt; - Specify a path to ProtectMyTooling main directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protect_my_tooling_config&lt;/code&gt; - Specify a path to ProtectMyTooling configuration file with various packers options&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dotnet_assemblies_directory&lt;/code&gt; - Specify local path .NET assemblies should be looked for if not found by execute-assembly&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cache_protected_executables&lt;/code&gt; - Enable to cache already protected executables and reuse them when needed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protected_executables_cache_dir&lt;/code&gt; - Specify a path to a directory that should store cached protected executables&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_exe_x86_packers_chain&lt;/code&gt; - Native x86 EXE executables protectors/packers chain&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_exe_x64_packers_chain&lt;/code&gt; - Native x64 EXE executables protectors/packers chain&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_dll_x86_packers_chain&lt;/code&gt; - Native x86 DLL executables protectors/packers chain&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_dll_x64_packers_chain&lt;/code&gt; - Native x64 DLL executables protectors/packers chain&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_dotnet_packers_chain&lt;/code&gt; - .NET executables protectors/packers chain&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ScareCrow&lt;/code&gt; is very tricky to run from Windows. What worked for me is following: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Run on Windows 10 and have WSL installed (&lt;code&gt;bash.exe&lt;/code&gt; command available in Windows)&lt;/li&gt; &#xA;   &lt;li&gt;Have &lt;code&gt;golang&lt;/code&gt; installed in WSL at version &lt;code&gt;1.16+&lt;/code&gt; (tested on &lt;code&gt;1.18&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Make sure to have &lt;code&gt;PackerScareCrow.Run_ScareCrow_On_Windows_As_WSL = True&lt;/code&gt; set&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Credits due &amp;amp; used technology&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;All packer, obfuscator, converter, loader credits goes to their authors. This tool is merely a wrapper around their technology!&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hopefully none of them mind me adding such wrappers. Should there be concerns - please reach out to me.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;ProtectMyTooling&lt;/em&gt; also uses &lt;a href=&#34;https://github.com/moloch--/denim&#34;&gt;&lt;code&gt;denim.exe&lt;/code&gt;&lt;/a&gt; by &lt;strong&gt;moloch--&lt;/strong&gt; by some Nim-based packers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write custom PE injector and offer it as a &#34;protector&#34;&lt;/li&gt; &#xA; &lt;li&gt;Add watermarking to other file formats such as Office documents, WSH scripts (VBS, JS, HTA) and containers&lt;/li&gt; &#xA; &lt;li&gt;Add support for a few other Packers/Loaders/Generators in upcoming future: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/med0x2e/GadgetToJScript&#34;&gt;&lt;code&gt;GadgetToJScript&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Tylous/Limelighter&#34;&gt;&lt;code&gt;Limelighter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/phra/PEzor&#34;&gt;&lt;code&gt;PEZor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rapid7/metasploit-framework&#34;&gt;&lt;code&gt;msfevenom&lt;/code&gt;&lt;/a&gt; - two variants, one for input shellcode, the other for executable&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Use of this tool as well as any other projects I&#39;m author of for illegal purposes, unsolicited hacking, cyber-espionage is strictly prohibited. This and other tools I distribute help professional Penetration Testers, Security Consultants, Security Engineers and other security personnel in improving their customer networks cyber-defence capabilities.&lt;br&gt; In no event shall the authors or copyright holders be liable for any claim, damages or other liability arising from illegal use of this software.&lt;/p&gt; &#xA;&lt;p&gt;If there are concerns, copyright issues, threats posed by this software or other inquiries - I am open to collaborate in responsibly addressing them.&lt;/p&gt; &#xA;&lt;p&gt;The tool exposes handy interface for using mostly open-source or commercially available packers/protectors/obfuscation software, therefore not introducing any immediately new threats to the cyber-security landscape as is.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;☕ Show Support ☕&lt;/h3&gt; &#xA;&lt;p&gt;This and other projects are outcome of sleepless nights and &lt;strong&gt;plenty of hard work&lt;/strong&gt;. If you like what I do and appreciate that I always give back to the community, &lt;a href=&#34;https://github.com/sponsors/mgeeky&#34;&gt;Consider buying me a coffee&lt;/a&gt; &lt;em&gt;(or better a beer)&lt;/em&gt; just to say thank you! 💪&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;   Mariusz Banach / mgeeky, &#39;20-&#39;22&#xA;   &amp;lt;mb [at] binary-offensive.com&amp;gt;&#xA;   (https://github.com/mgeeky) &#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>sans-blue-team/DeepBlueCLI</title>
    <updated>2022-07-25T01:50:36Z</updated>
    <id>tag:github.com,2022-07-25:/sans-blue-team/DeepBlueCLI</id>
    <link href="https://github.com/sans-blue-team/DeepBlueCLI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DeepBlueCLI&lt;/h1&gt; &#xA;&lt;p&gt;DeepBlueCLI - a PowerShell Module for Threat Hunting via Windows Event Logs&lt;/p&gt; &#xA;&lt;p&gt;Eric Conrad, Backshore Communications, LLC&lt;/p&gt; &#xA;&lt;p&gt;deepblue &lt;code&gt;at&lt;/code&gt; backshore &lt;code&gt;dot&lt;/code&gt; net&lt;/p&gt; &#xA;&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/eric_conrad&#34;&gt;@eric_conrad&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://ericconrad.com&#34;&gt;http://ericconrad.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sample EVTX files are in the .\evtx directory&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If your antivirus freaks out after downloading DeepBlueCLI: it&#39;s likely reacting to the included EVTX files in the .\evtx directory (which contain command-line logs of malicious attacks, among other artifacts). EVTX files are not harmful. You may need to configure your antivirus to ignore the DeepBlueCLI directory.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sans-blue-team/DeepBlueCLI/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sans-blue-team/DeepBlueCLI/master/#windows-event-logs-processed&#34;&gt;Windows Event Logs processed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sans-blue-team/DeepBlueCLI/master/#detected-events&#34;&gt;Detected events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sans-blue-team/DeepBlueCLI/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sans-blue-team/DeepBlueCLI/master/#output&#34;&gt;Output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sans-blue-team/DeepBlueCLI/master/#logging-setup&#34;&gt;Logging setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/sans-blue-team/DeepBlueCLI/master/READMEs/README-DeepBlue.py.md&#34;&gt;DeepBlue.py Readme&lt;/a&gt; for information on DeepBlue.py&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/sans-blue-team/DeepBlueCLI/master/READMEs/README-DeepBlueHash.md&#34;&gt;DeepBlueHash Readme&lt;/a&gt; for information on DeepBlueHash (detective safelisting using Sysmon event logs)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;.\DeepBlue.ps1 &amp;lt;event log name&amp;gt; &amp;lt;evtx filename&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/sans-blue-team/DeepBlueCLI/master/READMEs/Set-ExecutionPolicy.md&#34;&gt;Set-ExecutionPolicy Readme&lt;/a&gt; if you receive a &#39;running scripts is disabled on this system&#39; error.&lt;/p&gt; &#xA;&lt;h3&gt;Process local Windows security event log (PowerShell must be run as Administrator):&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;.\DeepBlue.ps1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.\DeepBlue.ps1 -log security&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Process local Windows system event log:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;.\DeepBlue.ps1 -log system&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Process evtx file:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\new-user-security.evtx&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Windows Event Logs processed&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows Security&lt;/li&gt; &#xA; &lt;li&gt;Windows System&lt;/li&gt; &#xA; &lt;li&gt;Windows Application&lt;/li&gt; &#xA; &lt;li&gt;Windows PowerShell&lt;/li&gt; &#xA; &lt;li&gt;Sysmon&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Command Line Logs processed&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/sans-blue-team/DeepBlueCLI/master/#logging-setup&#34;&gt;Logging setup&lt;/a&gt; section below for how to configure these logs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows Security event ID 4688&lt;/li&gt; &#xA; &lt;li&gt;Windows PowerShell event IDs 4103 and 4104&lt;/li&gt; &#xA; &lt;li&gt;Sysmon event ID 1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Detected events&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Suspicious account behavior &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;User creation&lt;/li&gt; &#xA;   &lt;li&gt;User added to local/global/universal groups&lt;/li&gt; &#xA;   &lt;li&gt;Password guessing (multiple logon failures, one account)&lt;/li&gt; &#xA;   &lt;li&gt;Password spraying via failed logon (multiple logon failures, multiple accounts)&lt;/li&gt; &#xA;   &lt;li&gt;Password spraying via explicit credentials&lt;/li&gt; &#xA;   &lt;li&gt;Bloodhound (admin privileges assigned to the same account with multiple Security IDs)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Command line/Sysmon/PowerShell auditing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Long command lines&lt;/li&gt; &#xA;   &lt;li&gt;Regex searches&lt;/li&gt; &#xA;   &lt;li&gt;Obfuscated commands&lt;/li&gt; &#xA;   &lt;li&gt;PowerShell launched via WMIC or PsExec&lt;/li&gt; &#xA;   &lt;li&gt;PowerShell Net.WebClient Downloadstring&lt;/li&gt; &#xA;   &lt;li&gt;Compressed/Base64 encoded commands (with automatic decompression/decoding)&lt;/li&gt; &#xA;   &lt;li&gt;Unsigned EXEs or DLLs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Service auditing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Suspicious service creation&lt;/li&gt; &#xA;   &lt;li&gt;Service creation errors&lt;/li&gt; &#xA;   &lt;li&gt;Stopping/starting the Windows Event Log service (potential event log manipulation)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mimikatz &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;lsadump::sam&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;EMET &amp;amp; Applocker Blocks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;...and more&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Event&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Event log manipulation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\disablestop-eventlog.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metasploit native target (security)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\metasploit-psexec-native-target-security.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metasploit native target (system)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\metasploit-psexec-native-target-system.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metasploit PowerShell target (security)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt; .\DeepBlue.ps1 .\evtx\metasploit-psexec-powershell-target-security.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metasploit PowerShell target (system)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt; .\DeepBlue.ps1 .\evtx\metasploit-psexec-powershell-target-system.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mimikatz &lt;code&gt;lsadump::sam&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\mimikatz-privesc-hashdump.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;New user creation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\new-user-security.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Obfuscation (encoding)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\Powershell-Invoke-Obfuscation-encoding-menu.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Obfuscation (string)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\Powershell-Invoke-Obfuscation-string-menu.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Password guessing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\smb-password-guessing-security.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Password spraying&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\password-spray.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerSploit (security)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\powersploit-security.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerSploit (system)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\powersploit-system.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PSAttack&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\psattack-security.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;User added to administrator group&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\new-user-security.evtx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Output&lt;/h2&gt; &#xA;&lt;p&gt;DeepBlueCLI outputs in PowerShell objects, allowing a variety of output methods and types, including JSON, HTML, CSV, etc.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Output Type&lt;/th&gt; &#xA;   &lt;th&gt;Syntax&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSV&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\psattack-security.evtx | ConvertTo-Csv&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Format list (default)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\psattack-security.evtx | Format-List&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Format table&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\psattack-security.evtx | Format-Table&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GridView&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\psattack-security.evtx | Out-GridView&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\psattack-security.evtx | ConvertTo-Html&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\psattack-security.evtx | ConvertTo-Json&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.\DeepBlue.ps1 .\evtx\psattack-security.evtx | ConvertTo-Xml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Logging setup&lt;/h2&gt; &#xA;&lt;h3&gt;Security event 4688 (Command line auditing):&lt;/h3&gt; &#xA;&lt;p&gt;Enable Windows command-line auditing: &lt;a href=&#34;https://support.microsoft.com/en-us/kb/3004375&#34;&gt;https://support.microsoft.com/en-us/kb/3004375&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Security event 4625 (Failed logons):&lt;/h3&gt; &#xA;&lt;p&gt;Requires auditing logon failures: &lt;a href=&#34;https://technet.microsoft.com/en-us/library/cc976395.aspx&#34;&gt;https://technet.microsoft.com/en-us/library/cc976395.aspx&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PowerShell auditing (PowerShell 5.0):&lt;/h3&gt; &#xA;&lt;p&gt;DeepBlueCLI uses module logging (PowerShell event 4103) and script block logging (4104). It does not use transcription.&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html&#34;&gt;https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To get the PowerShell commandline (and not just script block) on Windows 7 through Windows 8.1, add the following to \Windows\System32\WindowsPowerShell\v1.0\profile.ps1&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$LogCommandHealthEvent = $true&#xA;$LogCommandLifecycleEvent = $true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the following for more information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://logrhythm.com/blog/powershell-command-line-logging/&#34;&gt;https://logrhythm.com/blog/powershell-command-line-logging/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hackerhurricane.blogspot.com/2014/11/i-powershell-logging-what-everyone.html&#34;&gt;http://hackerhurricane.blogspot.com/2014/11/i-powershell-logging-what-everyone.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you: &lt;a href=&#34;https://twitter.com/heinzarelli&#34;&gt;@heinzarelli&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/hackerhurricane&#34;&gt;@HackerHurricane&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sysmon&lt;/h3&gt; &#xA;&lt;p&gt;Install Sysmon from Sysinternals: &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon&#34;&gt;https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DeepBlue and DeepBlueHash currently use Sysmon events, 1, 6 and 7.&lt;/p&gt; &#xA;&lt;p&gt;Log SHA256 hashes. Others are fine; DeepBlueHash will use SHA256.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MicrosoftDocs/microsoft-365-docs-pr.tr-TR</title>
    <updated>2022-07-25T01:50:36Z</updated>
    <id>tag:github.com,2022-07-25:/MicrosoftDocs/microsoft-365-docs-pr.tr-TR</id>
    <link href="https://github.com/MicrosoftDocs/microsoft-365-docs-pr.tr-TR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a name=&#34;overview&#34;&gt;&lt;/a&gt;Genel Bakış&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;learn-how-to-contribute&#34;&gt;&lt;/a&gt;Nasıl katkıda bulunarak bulun ola&lt;/h2&gt; &#xA;&lt;p&gt;İlgilenen herkes konulara katkıda bulunabilirsiniz. Katkıda bulunmak için, çalışmanız birleştirilen içerik kümesine doğrudan gider. Daha sonra E-docs.microsoft.com gösterilir ve katkıda bulunan olarak şu kişi olarak listelenirsiniz: &lt;a href=&#34;https://github.com/MicrosoftDocs/microsoft-365-docs/graphs/contributors&#34;&gt;https://github.com/MicrosoftDocs/microsoft-365-docs/graphs/contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;quickly-update-an-article-using-githubcom&#34;&gt;&lt;/a&gt;GitHub.com&#39;ı kullanarak bir makaleyi hızlı bir şekilde güncelleştirme&lt;/h3&gt; &#xA;&lt;p&gt;Yalnızca seyrek veya küçük güncelleştirmeler yapan katkıda bulunanlar, herhangi bir ek yazılım yüklemek zorunda kalmadan dosyayı doğrudan GitHub.com&#39;da düzenleyebilir. Bu makalede nasıl olduğu ortayalanmıştır. &lt;a href=&#34;https://www.microsoft.com/videoplayer/embed/RE1XQTG&#34;&gt;Bu iki dakikalık videoda&lt;/a&gt; nasıl katkıda bulun bulunmak da yer a kısar.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;GitHub.com&#39;da GitHub.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bir sayfada düzenlemek istediğiniz sayfaya docs.microsoft.com.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sayfanın sağ tarafında Düzenle&#39;ye &lt;strong&gt;(kalem&lt;/strong&gt; simgesi) tıklayın.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MicrosoftDocs/microsoft-365-docs-pr.tr-TR/live/microsoft-365/media/quick-update-edit.png&#34; alt=&#34;Belge üzerinde Düzenle docs.microsoft.com.&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dosya üzerinde ilgili GitHub dosyası açılır ve Burada Bu dosyayı düzenle kalem &lt;strong&gt;simgesine tıklamanız&lt;/strong&gt; gerekir.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MicrosoftDocs/microsoft-365-docs-pr.tr-TR/live/microsoft-365/media/quick-update-github.png&#34; alt=&#34;Belge üzerinde Düzenle github.com.&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Konu, dosyada değişiklik yapabilirsiniz satır numaralı bir düzenleme sayfasında açılır. Dosya GitHub Markdown dili kullanılarak yazılır ve düzenlenebilir. Markdown&#39;ı kullanma hakkında yardım için bkz. &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;Markdown&#39;da Ustalık Sahibi Olmak&lt;/a&gt;. Değişikliklerinizi &lt;strong&gt;ilerlerken&lt;/strong&gt; görüntülemek için Değişiklikleri önizleme sekmesini seçin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Değişiklik yapmayı bitirdikten sonra, sayfanın &lt;strong&gt;en altındaki&lt;/strong&gt; Dosya değişikliğini öner bölümüne gidin:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Kısa bir başlık gereklidir. Varsayılan olarak başlık dosyanın adıdır, ancak bunu değiştirebilirsiniz.&lt;/li&gt; &#xA;   &lt;li&gt;İsteğe bağlı olarak, İsteğe bağlı genişletilmiş açıklama &lt;strong&gt;ekle kutusuna daha fazla ayrıntı girebilirsiniz&lt;/strong&gt; .&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Hazırsanız, yeşil Dosya değişikliğini öner &lt;strong&gt;düğmesine&lt;/strong&gt; tıklayın.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MicrosoftDocs/microsoft-365-docs-pr.tr-TR/live/microsoft-365/media/propose-file-change.png&#34; alt=&#34;Dosya değişikliği önerin bölümü.&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Görüntülenen &lt;strong&gt;Karşılaştırma değişiklikleri sayfasında&lt;/strong&gt; , yeşil Çekme isteği &lt;strong&gt;oluştur düğmesine&lt;/strong&gt; tıklayın.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MicrosoftDocs/microsoft-365-docs-pr.tr-TR/live/microsoft-365/media/comparing-changes-page.png&#34; alt=&#34;Değişiklikler sayfasını karşılaştırma.&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Görüntülenen &lt;strong&gt;Çekme isteği aç sayfasında&lt;/strong&gt; yeşil Çekme isteği oluştur &lt;strong&gt;düğmesine&lt;/strong&gt; tıklayın.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MicrosoftDocs/microsoft-365-docs-pr.tr-TR/live/microsoft-365/media/open-a-pull-request-page.png&#34; alt=&#34;Çekme isteği sayfasını açın.&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Son birkaç adımda ne göreceğinizi, verim bilgisinde izinlerinizi belirler. Özel ayrıcalıklarınız yok olan kişiler, Dosya &lt;strong&gt;değişikliği öner bölümünü ve&lt;/strong&gt; sonraki onay sayfalarını açıklandığı gibi görebilirler. Kendi çekme isteklerini oluşturma ve onaylama izinleri olan kişiler, yeni bir dal oluşturmak için ek seçenekler ve daha az onay sayfası oluşturmak için ek seçeneklerle benzer Değişiklikler yapın bölümünü görebilirler.&lt;br&gt;&lt;br&gt;Burada önemli olan şu şekildedir: Artık eksilene kadar size sunulan tüm yeşil düğmelere tıklayın.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Konunun meta verilerinde tanımlanan yazara bu bilgi bildirilecek ve bir süre sonra konu yeniden güncelleştirilecek şekilde değişikliklerinizi gözden geçirip docs.microsoft.com. Güncelleştirmelerle ilgili sorularınız veya sorunlarınız varsa, yazar size sorar.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;microsoft-open-source-code-of-conduct&#34;&gt;&lt;/a&gt;Microsoft Açık Kaynak Kullanım Şartları&lt;/h2&gt; &#xA;&lt;p&gt;Bu projede &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Açık Kaynak Kullanım Şartları&lt;/a&gt; benimsenmiştir.&lt;/p&gt; &#xA;&lt;p&gt;Daha fazla bilgi için Yürütme &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Kuralları SSS&lt;/a&gt; bölümüne bakın veya diğer &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; veya yorumlarınızı görmek için ilgili bölüme ulaşın.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;contributing&#34;&gt;&lt;/a&gt;Katkıda bulunan&lt;/h3&gt; &#xA;&lt;p&gt;Bu proje katılımları ve önerileri karşılar. Çoğu katkı için, gerekli olduğu ve aslında gerekli olduğunu beyan edilen Katılımcı Lisans Sözleşmesi&#39;ne (SÇALI) onaylamanızı gerektirir ve gerçekten de katkınızı kullanma haklarınızı bize kabul edersiniz. Ayrıntılar için ziyaret edin &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bir çekme isteği gönderdiğinizde, bir CIA-bot, AYRıCAT sağlamanız ve PR&#39;yi uygun şekilde süslemeniz (ör. etiket, açıklama) gerekip gerek olmadığını otomatik olarak belirler. Robot tarafından sağlanan yönergeleri takip edin. Bunu, TÜM ELKPİ&#39;mizi kullanarak tüm repozda tek bir kez yapmak zorunda oluruz.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;legal-notices&#34;&gt;&lt;/a&gt;Yasal Bildirimler&lt;/h3&gt; &#xA;&lt;p&gt;Microsoft ve tüm katkıda bulunanlar size &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;creative Commons Attribution 4.0&lt;/a&gt; Uluslararası Genel Lisans altındaki bu depoda yer alan Microsoft belgeleri ve diğer içerik için lisans, İtFİS dosyasına bakın &lt;a href=&#34;https://raw.githubusercontent.com/MicrosoftDocs/microsoft-365-docs-pr.tr-TR/live/LICENSE&#34;&gt;&lt;/a&gt; ve &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt; Lisansı altındaki depoda bulunan herhangi bir koda lisans veren bir lisans vermek için LISANS &lt;a href=&#34;https://raw.githubusercontent.com/MicrosoftDocs/microsoft-365-docs-pr.tr-TR/live/LICENSE-CODE&#34;&gt;KODU&lt;/a&gt; dosyasına bakın.&lt;/p&gt; &#xA;&lt;p&gt;Microsoft, Windows, Microsoft Azure ve/veya diğer Microsoft ürün ve hizmetleri Microsoft&#39;un ABD ve/veya diğer ülkelerdeki ticari markaları veya tescilli ticari markaları olabilir.&lt;/p&gt; &#xA;&lt;p&gt;Bu projenin lisansları size Microsoft adlarını, logolarını veya ticari markalarını kullanma hakları vermekle aynı değildir. Microsoft&#39;un genel ticari marka yönergeleri burada bulunabilir &lt;a href=&#34;https://go.microsoft.com/fwlink/?LinkID=254653&#34;&gt;https://go.microsoft.com/fwlink/?LinkID=254653&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Gizlilik bilgilerine &lt;a href=&#34;https://privacy.microsoft.com/&#34;&gt;https://privacy.microsoft.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Microsoft ve tüm katkıda bulunanlar, ima, etopla ya da başka herhangi bir şekilde ilgili telif hakkı, patent veya ticari marka kapsamında diğer tüm hakları rezerve ediyor.&lt;/p&gt;</summary>
  </entry>
</feed>