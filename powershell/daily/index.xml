<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-04T01:41:19Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rvrsh3ll/TokenTactics</title>
    <updated>2023-08-04T01:41:19Z</updated>
    <id>tag:github.com,2023-08-04:/rvrsh3ll/TokenTactics</id>
    <link href="https://github.com/rvrsh3ll/TokenTactics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Azure JWT Token Manipulation Toolset&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TokenTactics&lt;/h1&gt; &#xA;&lt;p&gt;Azure JSON Web Token (&#34;JWT&#34;) Manipulation Toolset&lt;/p&gt; &#xA;&lt;p&gt;Azure access tokens allow you to authenticate to certain endpoints as a user who signs in with a device code. Even if they used multi-factor authentication. Once you have a user&#39;s access token, it may be possible to access certain apps such as Outlook, SharePoint, OneDrive, MSTeams and more.&lt;/p&gt; &#xA;&lt;p&gt;For instance, if you have a Graph or MSGraph token, you can then connect to Azure and dump users, groups, etc. You could then, depending on conditional access policies, switch to an Azure Core Management token and run &lt;a href=&#34;https://github.com/BloodHoundAD/AzureHound&#34;&gt;AzureHound&lt;/a&gt;. Then, switch to an Outlook token and read/send emails or MS Teams and read/send messages!&lt;/p&gt; &#xA;&lt;p&gt;For more on Azure token types &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens&#34;&gt;Microsoft identity platform access tokens&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are some example requests to endpoints in the resources folder. There is also an example phishing template for device code phishing.&lt;/p&gt; &#xA;&lt;p&gt;You may also use these tokens with &lt;a href=&#34;https://o365blog.com/aadinternals/&#34;&gt;AAD Internals&lt;/a&gt; as well. We strongly recommended to check this amazing tool out.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Import-Module .\TokenTactics.psd1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Help Get-Azure-Token&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Invoke-RefreshToSubstrateToken&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Generate Device Code&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-AzureToken -Client MSGraph&lt;/code&gt; Once the user has logged in, you&#39;ll be presented with the JWT and it will be saved in the $response variable. To access the access token use &lt;code&gt;$response.access_token&lt;/code&gt; from your PowerShell window to display the token. You may also display the refresh token with &lt;code&gt;$response.refresh_token&lt;/code&gt;. Hint: You&#39;ll want the refresh token to keep refreshing to new access tokens! By default, Get-AzureToken results are logged to TokenLog.log.&lt;/p&gt; &#xA;&lt;h4&gt;DOD/Mil Device Code&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-AzureToken -Client DODMSGraph&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Refresh or Switch Tokens&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Invoke-RefreshToOutlookToken -domain myclient.org -refreshToken 0.A&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$OutlookToken.access_token&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Connect&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Connect-AzureAD -AadAccessToken $response.access_token -AccountId user@myclient.org&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Refresh a PRT&lt;/h3&gt; &#xA;&lt;p&gt;Once a PRT has been captured, auth with roadrecon to obtain your access_token and refresh_token. When refreshing with TokenTactics, use ClientID 1b730954-1685-4b74-9bfd-dac224a7b894.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Invoke-RefreshToMSGraphToken -domain myclient.org -ClientId 1b730954-1685-4b74-9bfd-dac224a7b894 -refreshToken 0.A&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Clear tokens&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Invoke-ClearToken -Token All&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Command -Module TokenTactics&#xA;&#xA;CommandType     Name                                               Version    Source&#xA;-----------     ----                                               -------    ------&#xA;Function        Invoke-ClearToken                                        0.0.2      TokenTactics&#xA;Function        Invoke-DumpOWAMailboxViaMSGraphApi                       0.0.2      TokenTactics&#xA;Function        Invoke-ForgeUserAgent                                    0.0.2      TokenTactics&#xA;Function        Get-AzureToken                                           0.0.2      TokenTactics&#xA;Function        Get-TenantID                                             0.0.2      TokenTactics&#xA;Function        Invoke-OpenOWAMailboxInBrowser                           0.0.2      TokenTactics&#xA;Function        Invoke-ParseJWTtoken                                     0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToAzureCoreManagementToken                 0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToAzureManagementToken                     0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToDODMSGraphToken                          0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToGraphToken                               0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToMAMToken                                 0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToMSGraphToken                             0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToMSManageToken                            0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToMSTeamsToken                             0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToO365SuiteUXToken                         0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToOfficeAppsToken                          0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToOfficeManagementToken                    0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToOutlookToken                             0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToSubstrateToken                           0.0.2      TokenTactics&#xA;Function        Invoke-RefreshToYammerToken                              0.0.2      TokenTactics&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authors and contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boku7&#34;&gt;@0xBoku&lt;/a&gt; co-author and researcher.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TokenTactic&#39;s methods are highly influenced by the great research of Dr Nestori Syynimaa at &lt;a href=&#34;https://o365blog.com/&#34;&gt;https://o365blog.com/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>f-bader/TokenTacticsV2</title>
    <updated>2023-08-04T01:41:19Z</updated>
    <id>tag:github.com,2023-08-04:/f-bader/TokenTacticsV2</id>
    <link href="https://github.com/f-bader/TokenTacticsV2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fork of the great TokenTactics with support for CAE and token endpoint v2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TokenTactics v2&lt;/h1&gt; &#xA;&lt;p&gt;This is an updated version of &lt;a href=&#34;https://github.com/rvrsh3ll/TokenTactics&#34;&gt;TokenTactics&lt;/a&gt; originally written by Stephan Borosh &lt;a href=&#34;https://github.com/rvrsh3ll&#34;&gt;@rvrsh3ll&lt;/a&gt; &amp;amp; Bobby Cooke &lt;a href=&#34;https://github.com/boku7&#34;&gt;@0xBoku&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;New Features in v2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Switched to &lt;code&gt;v2.0&lt;/code&gt; of the Azure AD OAuth2 endpoint&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/concept-continuous-access-evaluation&#34;&gt;continuous access evaluation&lt;/a&gt; using the new &lt;code&gt;-UseCAE&lt;/code&gt; switch&lt;/li&gt; &#xA; &lt;li&gt;Made &lt;code&gt;ClientId&lt;/code&gt; a parameter&lt;/li&gt; &#xA; &lt;li&gt;Changed &lt;code&gt;client_id&lt;/code&gt; for MSTeams&lt;/li&gt; &#xA; &lt;li&gt;Added support for OneDrive and SharePoint&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;IssuedAt&lt;/code&gt;, &lt;code&gt;NotBefore&lt;/code&gt;, &lt;code&gt;ExpirationDate&lt;/code&gt; and &lt;code&gt;ValidForHours&lt;/code&gt; in &lt;code&gt;ConvertFrom-JWTtoken&lt;/code&gt; output in human readable format&lt;/li&gt; &#xA; &lt;li&gt;Refactored the codebase to have less redudant code and make it easier to extend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;0.2.1 (2023-07-21)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for Linux as a device platform&lt;/li&gt; &#xA; &lt;li&gt;Support for OS/2 as a device platform &lt;span&gt;üòÅ&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;0.2.2 (2023-07-22)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backported &lt;a href=&#34;https://github.com/rvrsh3ll/TokenTactics/commit/9b364e45e39c70cc3d0a0c5ca85d36e395df8930&#34;&gt;Yammer token support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Backported &lt;a href=&#34;https://github.com/rvrsh3ll/TokenTactics/commit/1e46bf26bcc799d4796b621e7f778fd0a24806ff&#34;&gt;switch to allowed PowerShell verbs&lt;/a&gt;, added alias for backward compatibility&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;0.2.3 (2023-07-23)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backported &lt;a href=&#34;https://github.com/rvrsh3ll/TokenTactics/pull/9/&#34;&gt;pull request&lt;/a&gt; by &lt;a href=&#34;https://github.com/rotarydrone&#34;&gt;rotarydrone&lt;/a&gt; to convert ESTSAuth to access token&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Azure JSON Web Token (&#34;JWT&#34;) Manipulation Toolset&lt;/h2&gt; &#xA;&lt;p&gt;Azure access tokens allow you to authenticate to certain endpoints as a user who signs in with a device code. If you are in possesion of a &lt;a href=&#34;https://github.com/secureworks/family-of-client-ids-research&#34;&gt;FOCI (Family of Client IDs)&lt;/a&gt; capable refresh token you can use it to get access tokens to all known &lt;a href=&#34;https://github.com/secureworks/family-of-client-ids-research/raw/main/known-foci-clients.csv&#34;&gt;FOCI capable endpoints&lt;/a&gt;. Since the refresh-token also contains the infomration if the user has done multi-factor authentication you can use this. Once you have a user&#39;s access token, it may be possible to access certain apps such as Outlook, SharePoint, OneDrive, MSTeams and more.&lt;/p&gt; &#xA;&lt;p&gt;For instance, if you have a Graph or MSGraph refresh token, you can then connect to Azure and dump users, groups, etc. You could then, depending on conditional access policies, switch to an Azure Core Management token and run &lt;a href=&#34;https://github.com/BloodHoundAD/AzureHound&#34;&gt;AzureHound&lt;/a&gt;. Then, get an Outlook access token and read/send emails or MS Teams and read/send teams messages!&lt;/p&gt; &#xA;&lt;p&gt;For more on Azure token types &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens&#34;&gt;Microsoft identity platform access tokens&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are some example requests to endpoints in the resources folder. There is also an example phishing template for device code phishing.&lt;/p&gt; &#xA;&lt;p&gt;You may also use these tokens with &lt;a href=&#34;https://o365blog.com/aadinternals/&#34;&gt;AAD Internals&lt;/a&gt; as well. We strongly recommended to check this amazing tool out.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module .\TokenTactics.psd1&#xA;Get-Help Get-AzureToken&#xA;Invoke-RefreshToSubstrateToken -Domain &#34;myclient.org&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get refresh token using Device Code flow&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-AzureToken -Client MSGraph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the user has logged in, you&#39;ll be presented with the JWT and it will be saved in the &lt;code&gt;$response&lt;/code&gt; variable. To access the access token use &lt;code&gt;$response.access_token&lt;/code&gt; from your PowerShell window to display the token. You may also display the refresh token with &lt;code&gt;$response.refresh_token&lt;/code&gt;. Hint: You&#39;ll want the refresh token to keep refreshing to new tokens!&lt;/p&gt; &#xA;&lt;h4&gt;DOD/Mil Device Code&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-AzureToken -Client DODMSGraph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get a Refresh Token from ESTSAuth* Cookie&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-AzureTokenFromESTSCookie -ESTSAuthCookie &#34;0.AbcApTk...&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This module uses authorization code flow to obtain an access token and refresh token using ESTSAuth (or ESTSAuthPersistent) cookie. Useful if you have phished a session via Evilginx or have otherwise obtained this cookie.&lt;/p&gt; &#xA;&lt;p&gt;Be sure to use the right cookie! &lt;code&gt;ESTSAuthPersistent&lt;/code&gt; is only useful when a CA policy actually grants a persistent session. Otherwise, you should use &lt;code&gt;ESTSAuth&lt;/code&gt;. You can usually tell which one to use based on length, the longer cookie is the one you want to use :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: This may not work in all cases as it may require user interaction. If this is the case, either use the Device Code flow above, or try &lt;code&gt;roadtx interactiveauth --estscookie&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This feature was backported from the &lt;a href=&#34;https://github.com/rvrsh3ll/TokenTactics/pull/9/&#34;&gt;pull request&lt;/a&gt; by &lt;a href=&#34;https://github.com/rotarydrone&#34;&gt;rotarydrone&lt;/a&gt; in the original repo.&lt;/p&gt; &#xA;&lt;h3&gt;Refresh to new access token&lt;/h3&gt; &#xA;&lt;p&gt;If you do not specify a refresh token the cmdlets will use &lt;code&gt;$response.refresh_token&lt;/code&gt; as a default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-RefreshToOutlookToken -domain &#34;myclient.org&#34;&#xA;&#xA;$OutlookToken.access_token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connect to AzureAD using access token&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Connect-AzureAD -AadAccessToken $response.access_token -AccountId user@myclient.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connect to MgGraph using access token&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-RefreshToMSGraphToken -Domain &#34;myclient.org&#34;&#xA;Connect-MgGraph -AccessToken $MSGraphToken.access_token -Scopes &#34;User.Read.All&#34;,&#34;Group.ReadWrite.All&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clear tokens&lt;/h3&gt; &#xA;&lt;p&gt;This will remove any token variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Clear-Token -Token All&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Continuous Access Evaluation&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/concept-continuous-access-evaluation&#34;&gt;continuous access evaluation&lt;/a&gt; Microsoft implements addition security measures, but also extend the maximum livetime of an access token to 24 hours. Certain CAE capable service like MSGraph, Exchange, Teams and SharePoint can blocke access tokens based on certain events triggered by Azure AD. Currently those critical events are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User Account is deleted or disabled&lt;/li&gt; &#xA; &lt;li&gt;Password for a user is changed or reset&lt;/li&gt; &#xA; &lt;li&gt;Multi-factor authentication is enabled for the user&lt;/li&gt; &#xA; &lt;li&gt;Administrator explicitly revokes all refresh tokens for a user&lt;/li&gt; &#xA; &lt;li&gt;High user risk detected by Azure AD Identity Protection (not in Teams and SharePoint Online)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-RefreshToMSGraphToken -Domain &#34;myclient.org&#34; -UseCAE&#xA;if ( $global:MSGraphTokenValidForHours -gt 23) { &#34;MSGraph token is CAE capable&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use with AAD Internals&lt;/h3&gt; &#xA;&lt;p&gt;If you have AADInternals installed as well you can use the created access tokens.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-RefreshToMSTeamsToken -UseCAE -Domain &#34;myclient.org&#34;&#xA;Set-AADIntTeamsStatusMessage -Message &#34;My cool status message&#34; -AccessToken $MSTeamsToken.access_token -Verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Command -Module TokenTactics&#xA;&#xA;CommandType     Name                                               Version    Source&#xA;-----------     ----                                               -------    ------&#xA;Function        Clear-Token                                        0.2.2      TokenTactics&#xA;Function        ConvertFrom-JWTtoken                               0.2.2      TokenTactics&#xA;Function        Get-AzureToken                                     0.2.2      TokenTactics&#xA;Function        Get-ForgedUserAgent                                0.2.2      TokenTactics&#xA;Function        Get-TenantID                                       0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToAzureCoreManagementToken           0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToAzureManagementToken               0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToDODMSGraphToken                    0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToGraphToken                         0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToMAMToken                           0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToMSGraphToken                       0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToMSManageToken                      0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToMSTeamsToken                       0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToOfficeAppsToken                    0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToOfficeManagementToken              0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToOneDriveToken                      0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToOutlookToken                       0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToSharePointToken                    0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToSubstrateToken                     0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToToken                              0.2.2      TokenTactics&#xA;Function        Invoke-RefreshToYammerToken                        0.2.2      TokenTactics&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authors and contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rvrsh3ll&#34;&gt;@rvrsh3ll&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boku7&#34;&gt;@0xBoku&lt;/a&gt; co-author and researcher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/f-bader&#34;&gt;@f-bader&lt;/a&gt; updated CAE capable version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TokenTactic&#39;s methods are highly influenced by the great research of Dr Nestori Syynimaa at &lt;a href=&#34;https://o365blog.com/&#34;&gt;https://o365blog.com/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>