<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-28T01:31:58Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yanghaoi/CobaltStrike_CNA</title>
    <updated>2023-10-28T01:31:58Z</updated>
    <id>tag:github.com,2023-10-28:/yanghaoi/CobaltStrike_CNA</id>
    <link href="https://github.com/yanghaoi/CobaltStrike_CNA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;使用多种WinAPI进行权限维持的CobaltStrike脚本，包含API设置系统服务，设置计划任务，管理用户等。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;0x01 简介&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;    EasyPersistent,是一个用于windows系统上权限维持的Cobalt Strike CNA 脚本。&#xA;    脚本整合了一些常用的权限维持方法，使用反射DLL模块可使用API对系统服务、计划任务等常见权限维持方法进行可视化操作（强烈建议使用白名单进程进行操作）。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;脚本功能菜单：&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/TWnuefByhIG4pUz.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;设置常用路径 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;全局路径参数设置&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;文件控制 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;文件属性、文件权限的查看和修改&lt;/li&gt; &#xA;   &lt;li&gt;文件符号链接的创建&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;注册表 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;注册表的增加、删除、查询&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;系统服务 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;系统服务的创建、查询、删除、SDDL设置&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;用户操作 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;系统用户账户的添加、删除、修改、查询、克隆、激活、禁用&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;启动目录 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;系统启动目录文件的查询、写入&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;计划任务 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;计划任务的查询、写入、删除&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DLL加载 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MSDTC服务、Explorer程序DLL劫持&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;BITS任务 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;BITS任务的添加、查询、删除&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;WMI事件 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;WMI事件订阅的添加、查询、删除&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;0x02 使用方法&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;GUI界面参数根据理解填写，可能部分位置有Bug，欢迎提交issues.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;示例&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/yanghaoi/Cobalt_Strike_CNA@latest/EasyCNA/img/Easy.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;文件控制&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;主要是attrib、takeown、icacls、mklink几个命令的使用。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/roz3lRmSMKIPt9e.png&#34; alt=&#34;attrib&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/wkOAtBhsy2jdnUi.png&#34; alt=&#34;icacls&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;注册表&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;通过Reg命令执行操作，支持对以下位置进行操作：Run, RunOnce, RunOnceEx,Logon Scripts,Winlogon Shell, Winlogon Userinit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/lQxtfZ6BqNi3Hha.png&#34; alt=&#34;添加Run键&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;添加方法带有/f选项，可用于更新键值：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/qD5mvLPWzVnYJMS.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;查询位置分为单个键查询和一键查询所有(选项里有的)启动项位置，查询所有比较暴力：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/Tnf7q3Xe9gLi2oR.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;其他Tips:&#xA;针对x86和x64注册表位置可使用下拉选项进行选择;&#xA;使用时请注意HKLM和HKCU位置，x86和x64的不同;&#xA;HKLM位置可能需要管理员权限，SYSTEM权限在写入HKCU位置会出现问题。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;系统服务&lt;/h2&gt; &#xA;&lt;h3&gt;系统服务主要使用SC命令和一些API进行操作&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/U5dmp2qBsInbkwY.png&#34; alt=&#34;添加服务&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;脚本中提供了两个服务程序TransitEXE.exe和uinit.exe，其中uinit.exe为一个启动后会返回服务失败的程序，用于错误回调执行，TransitEXE.exe服务程序实现代码参考[CreateService](https://github.com/uknowsec/CreateService)，主要进行了以下修改：&#xA;1. 注释RC4加密部分&#xA;2. 修改资源ID默认为100&#xA;3. 增加互斥体检测退出服务功能&#xA;4. 增加进程守护功能&#xA;在ReflectiveDll的实现中，根据微软文档主要进行了以下功能开发：&#xA;1. 设置服务描述，设置多种启动类型添加，设置SDDL安全描述符&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;服务守护进程&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/yanghaoi/Cobalt_Strike_CNA@latest/EasyCNA/img/service.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;服务名称和显示名称在SCM中的位置&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/e98aHuMYl4T62NI.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;添加服务时，为了方便测试，脚本对一些参数进行字符随机化，并对各个流程进行了调试信息输出：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/nldPAxI5v1TwCbr.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;添加服务后的显示：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/Ttzg3VHwlNI2Gom.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;在这里，只需要选择一个二进制文件上传，点击添加即可，之后脚本会根据需要上传某个服务程序。如果是TransitEXE，反射DLL会将执行命令写入到服务程序资源信息中，随后启动服务，服务程序落地后启动后会提取出自身资源信息中的命令行，使用CreateProcess第二个参数来执行。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;程序描述部分支持中文描述&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/T1sHqSUhfzmo4lp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/eYR7mjAtcMyuQqz.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;触发器启动&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;在命令行中的触发器使用了网络触发器：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd?linenums&#34;&gt;sc triggerinfo ServiceName start/networkon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;API中使用的是硬件接口触发:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/KBX6dTwJDbRa2Y3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;安全描述符设置&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;在API中通过ConvertStringSecurityDescriptorToSecurityDescriptor和SetServiceObjectSecurity设置服务的安全描述符，如果进行一些限制设置需要SYSTEM权限(注意如果在administrator权限下设置了SDDL限制，那么会导致OpenService Failed的情况)：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/KAlwPI87nfqtaMQ.png&#34; alt=&#34;SDDL设置后无法操作服务&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;服务启动失败回调&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;启动服务失败后会有回调命令执行:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/3b284j6vSRsPliX.png&#34; alt=&#34;服务启动失败回调命令执行&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;其他&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;- 两个服务程序可以写成一个，只是uinit.exe是先写的；&#xA;- 其他设置SDDL、修改服务、查询、删除部分功能没有完全强大，只能说是够用。&#xA;- 脚本中默认的目录C:\360\不存在，会导致上传文件失败([-] could not upload file: 3)，可以修改默认目录，net helpmsg查询详细错误情况。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;用户操作&lt;/h2&gt; &#xA;&lt;h3&gt;查询用户：&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;使用CS自带命令bnet()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/eNvgYhQJ1HqF8xm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;添加用户:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;集成了CMD命令、API、参数欺骗。API添加和查询用户：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/yanghaoi/Cobalt_Strike_CNA@latest/EasyCNA/img/AddUser_api.png&#34; alt=&#34;&#34;&gt; 自带参数欺骗添加用户： &lt;img src=&#34;https://cdn.jsdelivr.net/gh/yanghaoi/Cobalt_Strike_CNA@latest/EasyCNA/img/AddUser.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;克隆用户:&lt;/h3&gt; &#xA;&lt;p&gt;通过 &lt;a href=&#34;https://github.com/yanghaoi/ridhijack&#34;&gt;ridhijack&lt;/a&gt;实现。&lt;/p&gt; &#xA;&lt;h3&gt;账户激活与禁用:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;这里的功能最初是为了激活Guest的，后面增加了不同组的添加、移除、账户激活禁用，主要就是使用api进行一些操作，然后我源码找不到了...:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/rh1dPbFcVQfCp8I.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;启动目录&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;主要就是两个位置:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp&#xA;C:\Users\&amp;lt;User&amp;gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;程序可以写入到目录中进行自启动，但是不能设置隐藏属性。(一次测试不知道怎么搞的这个启动目录被搞成了其他位置C:\，启动后会弹出该目录下的文件夹，杀软会毫无反应。记录到了这个现象，还没进行深入研究。)&#xA;&#xA;在选项中可以设置远程文件名和执行方式，为直接上传和API重启写入:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/LqA3kydp1BnDX8e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;API重启写入利用函数MoveFile设置在重启后写入，可以绕过一些AV程序对启动目录的监控。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;计划任务&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;计划任务的操作可由SCHTASKS命令行和API来完成，由于命令行实现功能和API有差距(命令行无法设置描述和创建者)所以分开写了两个操作界面：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/lnozb6sgk9SxADL.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;通过命令行注册：&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/noROGcd5vCP8y39.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;通过API注册：&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/02/a2LYiZPhTC1Gm64.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;优化选项：&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt; - 添加任务时未对文件是否存在进行判断,未增加文件上传选项；&#xA; - 命令行模式中的描述可以删除。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;其他:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt; - API中使用\Everyone身份，如果没有已登录用户，可能导致启动失败。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DLL加载&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;利用msdtc服务加载oci.dll和Explorer加载linkinfo.dll原理进行DLL劫持，系统启动后可进行权限维持，通过禁用系统重定向不同位数下的system32目录进行了操作，方便简单：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;msdtc&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/03/WYnj4TCeqdAw8mo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/03/qiNfplJwCDnFE2s.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;注意：&#xA;在64位系统中生成的DLL要是64位的才能执行，在CobaltStrike4.3中要勾选x64 payload，其他版本中64位DLL+ x86 Payload上线的是x86的rundll32.exe,x64payload上线的是x64的msdtc.exe。&#xA;&#xA;使用64位rundll32程序加载位于C:\windows\system32\下的32位dll,出错:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/03/81rzaPtfOIvWXGn.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;那么使用C:\Windows\SysWOW64\rundll32.exe下的32位DLL加载C:\windows\system32\32.dll能成功吗？&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/03/uq2OQT6VU5LBPCj.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;可以看到也是不行的，猜测因为windows的重定向机制，使用32位程序时，系统会去找32位的system目录(SysWOW64)，把C:\windows\system32\32.dll复制到SysWOW64那就可以加载了：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/03/jadmQ3v7uYiX1Jb.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;可以看到果然如此！&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Explorer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;会在用户登录后加载C:\windows\linkinfo.dll，同样需要与系统位数对应的DLL。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bitsadmin Jobs&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;简单使用bitsadmin命令进行操作，据说仅适用于Windows7、8、Server 2008和Server 2012，还咩做实验。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;WMI事件订阅&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;使用powershell脚本来进行WMI事件订阅设置。&#xA;预置了6种触发方式：移动设备、用户登录、进程启动、时间间隔、某个时间、重启：&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/03/e4RbwHMU1CoDVli.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/07/04/tCmEeL2Uw7cuqO1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;0x03 免责声明&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本项目实现中可能会对一些系统服务、底层API进行调用，实现过程中可能会导致系统异常，无法启动，请自行测试；&lt;/li&gt; &#xA; &lt;li&gt;本项目仅用于作者进行代码学习、系统研究等实验目的，作者不承担任何责任。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;0x04 参考链接或源码&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/uknowsec/CreateService&#34;&gt;https://github.com/uknowsec/CreateService&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/v1ncilazy/BypassAddUser&#34;&gt;https://github.com/v1ncilazy/BypassAddUser&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/An0nySec/ShadowUser&#34;&gt;https://github.com/An0nySec/ShadowUser&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/Sw4mpf0x/PowerLurk&#34;&gt;https://github.com/Sw4mpf0x/PowerLurk&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>