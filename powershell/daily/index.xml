<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:36:00Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ZephrFish/AzureAttackKit</title>
    <updated>2022-09-25T01:36:00Z</updated>
    <id>tag:github.com,2022-09-25:/ZephrFish/AzureAttackKit</id>
    <link href="https://github.com/ZephrFish/AzureAttackKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of Azure Tools to Pull down for Attacking an Environment + quick tips and other useful information&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AzureAttackKit&lt;/h1&gt; &#xA;&lt;p&gt;Collection of Azure Tools to Pull down for Attacking an Env from a windows machine or Cloudshell.&lt;/p&gt; &#xA;&lt;h2&gt;Pre-Requisites&lt;/h2&gt; &#xA;&lt;p&gt;Git for Windows if you want to auto pull down the latest versions of everything via powershell.&lt;/p&gt; &#xA;&lt;h2&gt;Cloning&lt;/h2&gt; &#xA;&lt;p&gt;To pull down all the modules you can run the following to pull the submodules:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/ZephrFish/AzureAttackKit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note there is a zipped version of all the submodules if you need it quickly called &lt;code&gt;AZ-AttackKit.zip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Setup.ps1 contains the following lines to install the required modules to access azure and the various assocated modules. You may need to do &lt;code&gt;powershell -ep bypass&lt;/code&gt; if scripts are disabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Module Az -Force -Confirm:$false -AllowClobber -Scope CurrentUser&#xA;Install-Module AzureAD -Force -Confirm:$false -AllowClobber -Scope CurrentUser&#xA;Install-Module Microsoft.Graph -Force -Confirm:$false -AllowClobber -Scope CurrentUser&#xA;Install-Module MSOnline -Force -Confirm:$false -AllowClobber -Scope CurrentUser       &#xA;Install-Module AzureADPreview -Force -Confirm:$false -AllowClobber -Scope CurrentUser &#xA;Install-Module AADInternals -Force -Confirm:$false -AllowClobber -Scope CurrentUser     &#xA;&#xA;Import-Module Az&#xA;Import-Module AzureAD&#xA;Import-Module AADInternals&#xA;Import-Module .\MicroBurst-master\MicroBurst.psm1&#xA;Import-Module .\AzureRT-master\AzureRT.ps1&#xA;Import-Module .\PowerZure\PowerZure.psm1&#xA;Import-Module AADInternals&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the modules are installed you will need to connect an Azure account using the following three commands (if you&#39;re on Cloudshell use &lt;code&gt;Connect-AzAccount -UseDeviceAuthentication&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;. .\Setup.ps1&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Connect-ADandAZ&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the above fails run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Connect-AzAccount&#xA;Connect-AzureAD&#xA;Connect-MSolService&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Included Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PowerZure + Cloudshell&lt;/li&gt; &#xA; &lt;li&gt;AzureHound&lt;/li&gt; &#xA; &lt;li&gt;AzureRT&lt;/li&gt; &#xA; &lt;li&gt;MicroBurst&lt;/li&gt; &#xA; &lt;li&gt;AADInternals&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Wins&lt;/h2&gt; &#xA;&lt;p&gt;Pull all the subscriptions you have access to then iterate through them, change Get-ARTAccess(Which uses AzureRT) to whatever tool you want to run across the subscription.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$enabledSubs = Get-AzSubscription |  Where-Object{$_.State -eq &#34;Enabled&#34;} | select Id&#xA;foreach ($SubName in $enabledSubs) {&#xA;    $IDOut = $SubName.id&#xA;    Get-ARTAccess -SubscriptionID $IDOut | Out-File &#34;$IDOut.txt&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use PowerZure to pull runbook content for each sub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$enabledSubs = Get-AzSubscription |  Where-Object{$_.State -eq &#34;Enabled&#34;} | select Id&#xA;foreach ($SubName in $enabledSubs) {    &#xA;    $IDOut = $SubName.id&#xA;    Set-AzContext -Subscription &#34;$IDOut&#34;&#xA;    Get-AzureRunbookContent -All&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://github.com/ZephrFish/AzureAttackKit/raw/main/AAK/Commands.md&#34;&gt;Commands&lt;/a&gt; file for additonal quick wins. The &lt;a href=&#34;https://github.com/ZephrFish/AzureAttackKit/raw/main/AAK/Tools.md&#34;&gt;tools notes&lt;/a&gt; also has some useful tips on tools to check out in addition to those linked in this repo.&lt;/p&gt; &#xA;&lt;h2&gt;Regexes for Searching Through Files&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;description = &#34;Azure Service Principal Client Secret&#34;&#xA;regex = &#39;&#39;&#39;(?i)(secret|key|password)\s*:?=?\s*[&#39;\&#34;][0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}[&#39;\&#34;]&#39;&#39;&#39;&#xA;[[rules]]&#xA;description = &#34;Azure DevOps Personal Access Token&#34;&#xA;regex = &#39;&#39;&#39;(?i)(pat|token)\s*:?=?\s*[&#39;\&#34;]([a-z0-9]{52})[&#39;\&#34;]&#39;&#39;&#39;&#xA;[[rules]]&#xA;description = &#34;Azure Account Key&#34;&#xA;regex = &#39;&#39;&#39;(?i)(secret|key)\s*:?=?\s*[&#39;\&#34;]([a-zA-Z0-9!@#$%^&amp;amp;*()_+\-=\[\]{};&#39;:&#34;\\|,.&amp;lt;&amp;gt;\/?]{88})[&#39;\&#34;]&#39;&#39;&#39;&#xA;tags = [&#34;Azure Storage Account&#34;, &#34;Azure Cosmos DB&#34;]&#xA;[[rules]]&#xA;description = &#34;Azure Storage Connection String&#34;&#xA;regex = &#39;&#39;&#39;DefaultEndpointsProtocol=https;AccountName=[a-z0-9]{3,24};AccountKey=[a-zA-Z0-9!@#$%^&amp;amp;*()_+\-=\[\]{};&#39;:&#34;\\|,.&amp;lt;&amp;gt;\/?]{88};EndpointSuffix=.+&#39;&#39;&#39;&#xA;[[rules]]&#xA;description = &#34;Azure Cosmos DB Connection String&#34;&#xA;regex = &#39;&#39;&#39;AccountEndpoint=https:\/\/.+:443\/;AccountKey=[a-zA-Z0-9!@#$%^&amp;amp;*()_+\-=\[\]{};&#39;:&#34;\\|,.&amp;lt;&amp;gt;\/?]{88};&#39;&#39;&#39;&#xA;[[rules]]&#xA;description = &#34;Generic Secret&#34;&#xA;regex = &#39;&#39;&#39;(?i)secret\s*:?=?\s*[&#39;\&#34;][0-9a-zA-Z-_/]{8,40}[&#39;\&#34;]&#39;&#39;&#39;&#xA;# rules from trufflehog&#xA;[[rules]]&#xA;description = &#34;Amazon MWS Auth Token&#34;&#xA;regex = &#39;&#39;&#39;amzn\\.mws\\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}&#39;&#39;&#39;&#xA;[[rules]]&#xA;description = &#34;AWS AppSync GraphQL Key&#34;&#xA;regex = &#39;&#39;&#39;da2-[a-z0-9]{26}&#39;&#39;&#39;&#xA;[[rules]]&#xA;description = &#34;Google OAuth&#34;&#xA;regex = &#39;&#39;&#39;[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com&#39;&#39;&#39;&#xA;tags = [&#34;Cloud Platform&#34;, &#34;Drive&#34;, &#34;Gmail&#34;, &#34;YouTube&#34;]&#xA;[[rules]]&#xA;description = &#34;Google API Key&#34;&#xA;regex = &#39;&#39;&#39;AIza[0-9A-Za-z\\-_]{35}&#39;&#39;&#39;&#xA;tags = [&#34;Cloud Platform&#34;, &#34;Drive&#34;, &#34;Gmail&#34;, &#34;YouTube&#34;]&#xA;[[rules]]&#xA;description = &#34;Google OAuth Access Token&#34;&#xA;regex = &#39;&#39;&#39;ya29\\.[0-9A-Za-z\\-_]+&#39;&#39;&#39;&#xA;[[rules]]&#xA;description = &#34;MailChimp API Key&#34;&#xA;regex = &#39;&#39;&#39;[0-9a-f]{32}-us[0-9]{1,2}&#39;&#39;&#39;&#xA;[[rules]]&#xA;description = &#34;Mailgun API Key&#34;&#xA;regex = &#39;&#39;&#39;key-[0-9a-zA-Z]{32}&#39;&#39;&#39;&#xA;[[rules]]&#xA;description = &#34;Square Access Token&#34;&#xA;regex = &#39;&#39;&#39;sq0atp-[0-9A-Za-z\\-_]{22}&#39;&#39;&#39;&#xA;[[rules]]&#xA;description = &#34;Square OAuth Secret&#34;&#xA;regex = &#39;&#39;&#39;sq0csp-[0-9A-Za-z\\-_]{43}&#39;&#39;&#39;&#xA;[[rules]]&#xA;description = &#34;Telegram Bot API Key&#34;&#xA;regex = &#39;&#39;&#39;[0-9]+:AA[0-9A-Za-z\\-_]{33}&#39;&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Templates&lt;/h2&gt; &#xA;&lt;p&gt;Template for connecting with clientID and information&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$tenantid = &#34;&amp;lt;INSET TENANT ID&amp;gt;&#34;&#xA;$clientid = &#34;&amp;lt;INSERT CLIENT ID/USERNAME&amp;gt;&#34;&#xA;$clientsecret = &#34;&amp;lt;INSERT CLIENT SECRET/PASSWORD&#34;&#xA;$subscription = &#34;&amp;lt;INSERT SUBCRIPTION&amp;gt;&#34;&#xA;$mycred = New-Object System.Management.Automation.PSCredential($clientid,(ConvertTo-SecureString $clientsecret -AsPlainText -Force))&#xA;Connect-AzAccount -Credential $mycred -Tenant $tenantid -ServicePrincipal -Subscription $subscription&#xA;# Below is if you need to also authenticate to Az as well&#xA;az login --service-principal -u $clientid -p $clientsecret --tenant $tenantid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plan&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Work in progress but I have started work on a snaffler-like tool for crawling storage accounts and using storage explorer to see what can be found.&lt;/li&gt; &#xA; &lt;li&gt;Extract the various powershell scripts used for pulling info via AzureRT, PowerZure &amp;amp; MicroBurst and build a tool for quick wins, similar to AutoPwn&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>