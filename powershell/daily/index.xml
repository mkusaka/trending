<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-21T01:44:32Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BC-SECURITY/Beginners-Guide-to-Obfuscation</title>
    <updated>2022-08-21T01:44:32Z</updated>
    <id>tag:github.com,2022-08-21:/BC-SECURITY/Beginners-Guide-to-Obfuscation</id>
    <link href="https://github.com/BC-SECURITY/Beginners-Guide-to-Obfuscation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Evading Detection: A Beginner&#39;s Guide to Obfuscation&lt;/h1&gt; &#xA;&lt;p&gt;Defenders are constantly adapting their security to counter new threats. Our mission is to identify how they plan on securing their systems and avoid being identified as a threat. This is a hands-on class to learn the methodology behind malware delivery and avoiding detection. This workshop explores the inner workings of Microsoft&#39;s Antimalware Scan Interface (AMSI), Windows Defender, and Event Tracing for Windows (ETW). We will learn how to employ obfuscated malware using Visual Basic (VB), PowerShell, and C# to avoid Microsoft&#39;s defenses. Students will learn to build AMSI bypass techniques, obfuscate payloads from dynamic and static signature detection methods, and learn about alternative network evasion methods.&lt;/p&gt; &#xA;&lt;h2&gt;Objectives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understand the use and employment of obfuscation in red teaming.&lt;/li&gt; &#xA; &lt;li&gt;Demonstrate the concept of least obfuscation.&lt;/li&gt; &#xA; &lt;li&gt;Introduce Microsoft&#39;s Antimalware Scan Interface (AMSI) and explain its importance.&lt;/li&gt; &#xA; &lt;li&gt;Demonstrate obfuscation methodology for .NET payloads.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>openiddict/openiddict-samples</title>
    <updated>2022-08-21T01:44:32Z</updated>
    <id>tag:github.com,2022-08-21:/openiddict/openiddict-samples</id>
    <link href="https://github.com/openiddict/openiddict-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ASP.NET Core and Microsoft.Owin/ASP.NET 4.x samples for OpenIddict&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenIddict samples&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains samples demonstrating &lt;strong&gt;how to use &lt;a href=&#34;https://github.com/openiddict/openiddict-core&#34;&gt;OpenIddict&lt;/a&gt; with the different OAuth 2.0/OpenID Connect flows&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The &lt;code&gt;dev&lt;/code&gt; branch has been updated to use &lt;a href=&#34;https://kevinchalet.com/2022/06/22/openiddict-4-0-preview1-is-out/&#34;&gt;OpenIddict 4.0 preview1&lt;/a&gt;. For samples targeting OpenIddict 3.1.1, &lt;a href=&#34;https://github.com/openiddict/openiddict-samples/tree/master&#34;&gt;switch to the &lt;code&gt;master&lt;/code&gt; branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;ASP.NET Core samples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Aridka&#34;&gt;Aridka&lt;/a&gt;: client credentials demo, with a .NET console acting as the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Balosar&#34;&gt;Balosar&lt;/a&gt;: authorization code flow demo, with a Blazor WASM application acting as the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Contruum&#34;&gt;Contruum&lt;/a&gt;: conformance tests project using Razor Pages and 2 hardcoded user identities, meant to be used with &lt;a href=&#34;https://www.certification.openid.net/&#34;&gt;the OIDC certification suite&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Dantooine&#34;&gt;Dantooine&lt;/a&gt;: BFF Blazor WASM application hosted in ASP.NET Core with YARP proxy for downstream API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Hollastin&#34;&gt;Hollastin&lt;/a&gt;: resource owner password credentials demo, with a .NET console acting as the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Imynusoph&#34;&gt;Imynusoph&lt;/a&gt;: refresh token grant demo, with a .NET console acting as the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Matty&#34;&gt;Matty&lt;/a&gt;: device authorization flow demo, with a .NET console acting as the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Mimban&#34;&gt;Mimban&lt;/a&gt;: authorization code flow demo using minimal APIs and Steam delegation for user authentication, with a .NET console acting as the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Velusia&#34;&gt;Velusia&lt;/a&gt;: authorization code flow demo, with an ASP.NET Core application acting as the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Weytta&#34;&gt;Weytta&lt;/a&gt;: authorization code flow with Integrated Windows Authentication support and a .NET console acting as the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Zirku&#34;&gt;Zirku&lt;/a&gt;: authorization code flow demo using minimal APIs with 2 hard-coded user identities, a .NET console acting as the client and two API projects using introspection (Api1) and local validation (Api2).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;OWIN/ASP.NET 4.8 samples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Fornax&#34;&gt;Fornax&lt;/a&gt;: authorization code flow demo using ASP.NET Web Forms 4.8 and OWIN/Katana, with a .NET console acting as the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Mortis&#34;&gt;Mortis&lt;/a&gt;: authorization code flow demo, with an ASP.NET MVC 5.2 application acting as the client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openiddict/openiddict-samples/dev/samples/Kalarba&#34;&gt;Kalarba&lt;/a&gt;: resource owner password credentials demo using OWIN/Katana, ASP.NET Web API and the OpenIddict degraded mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;External samples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Looking for additional samples to help you get started with OpenIddict?&lt;/strong&gt; Don&#39;t miss these interesting samples maintained by the community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/damienbod/AspNetCoreOpeniddict&#34;&gt;Angular and Blazor samples&lt;/a&gt;&lt;/strong&gt; by &lt;a href=&#34;https://github.com/damienbod&#34;&gt;Damien Bowden&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Certification&lt;/h2&gt; &#xA;&lt;p&gt;Unlike many other identity providers, &lt;strong&gt;OpenIddict is not a turnkey solution but a framework that requires writing custom code&lt;/strong&gt; to be operational (typically, at least an authorization controller), making it a poor candidate for the certification program.&lt;/p&gt; &#xA;&lt;p&gt;While a reference implementation could be submitted as-is, &lt;strong&gt;this wouldn&#39;t guarantee that implementations deployed by OpenIddict users would be standard-compliant.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Instead, &lt;strong&gt;developers are encouraged to execute the conformance tests against their own deployment&lt;/strong&gt; once they&#39;ve implemented their own logic.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This repository contains &lt;a href=&#34;https://github.com/openiddict/openiddict-samples/tree/dev/samples/Contruum/Contruum.Server&#34;&gt;a dedicated sample&lt;/a&gt; specially designed to be used with the OpenID Connect Provider Certification tool and demonstrate that OpenIddict can be easily used in a certified implementation. To allow executing the certification tests as fast as possible, that sample doesn&#39;t include any membership or consent feature (two hardcoded identities are proposed for tests that require switching between identities).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Security policy&lt;/h2&gt; &#xA;&lt;p&gt;Security issues and bugs should be reported privately by emailing &lt;a href=&#34;mailto:security@openiddict.com&#34;&gt;security@openiddict.com&lt;/a&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you need support, please make sure you &lt;a href=&#34;https://github.com/sponsors/kevinchalet&#34;&gt;sponsor the project&lt;/a&gt; before creating a GitHub ticket. If you&#39;re not a sponsor, you can post your questions on Gitter or StackOverflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gitter: &lt;a href=&#34;https://gitter.im/openiddict/openiddict-core&#34;&gt;https://gitter.im/openiddict/openiddict-core&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;StackOverflow: &lt;a href=&#34;https://stackoverflow.com/questions/tagged/openiddict&#34;&gt;https://stackoverflow.com/questions/tagged/openiddict&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenIddict&lt;/strong&gt; is actively maintained by &lt;strong&gt;&lt;a href=&#34;https://github.com/kevinchalet&#34;&gt;Kévin Chalet&lt;/a&gt;&lt;/strong&gt;. Contributions are welcome and can be submitted using pull requests.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;strong&gt;Apache License&lt;/strong&gt;. This means that you can use, modify and distribute it freely. See &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0.html&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mdgrs-mei/PoshTaskbarItem</title>
    <updated>2022-08-21T01:44:32Z</updated>
    <id>tag:github.com,2022-08-21:/mdgrs-mei/PoshTaskbarItem</id>
    <link href="https://github.com/mdgrs-mei/PoshTaskbarItem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A PowerShell module that helps you make a simple UI for your script on the Windows taskbar.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;PoshTaskbarItem&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/mdgrs-mei/PoshTaskbarItem/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mdgrs-mei/PoshTaskbarItem&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.powershellgallery.com/packages/PoshTaskbarItem&#34;&gt;&lt;img src=&#34;https://img.shields.io/powershellgallery/p/PoshTaskbarItem&#34; alt=&#34;PowerShell Gallery&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.powershellgallery.com/packages/PoshTaskbarItem&#34;&gt;&lt;img src=&#34;https://img.shields.io/powershellgallery/dt/PoshTaskbarItem&#34; alt=&#34;PowerShell Gallery&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/mdgrs-mei/PoshTaskbarItem/actions/workflows/pester-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/mdgrs-mei/PoshTaskbarItem/actions/workflows/pester-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Pester Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;PoshTaskbarItem&lt;/em&gt; is a PowerShell module that helps you make a simple UI for your script on the Windows taskbar.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81177095/184648943-38273e0f-048f-4f4f-b335-f43d3e173619.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Application icons on the Windows taskbar have some useful features such as ThumbButton, ProgressIndicator and overlay icons. &lt;em&gt;PoshTaskbarItem&lt;/em&gt; enables you to utilize these taskbar item features from PowerShell without caring about WPF programming. It will help you create simple and easily accessible GUIs for your utility scripts.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Example&lt;/h2&gt; &#xA;&lt;p&gt;The following code creates a taskbar icon showing a decreasing counter as an overlay badge. Clicking the icon resets the counter. This example is small but it should show a general idea of the module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$counter = 10&#xA;$ti = New-TaskbarItem -Title &#34;Countdown&#34; -OnClicked {&#xA;    $script:counter = 10&#xA;    UpdateUi&#xA;}&#xA;&#xA;Set-TaskbarItemTimerFunction $ti -IntervalInMillisecond 1000 {&#xA;    $script:counter = [Math]::Max($script:counter-1, 0)&#xA;    UpdateUi&#xA;}&#xA;&#xA;function UpdateUi&#xA;{&#xA;    Set-TaskbarItemOverlayBadge $ti -Text $script:counter -BackgroundColor &#34;LightSeaGreen&#34;&#xA;    Set-TaskbarItemProgressIndicator $ti -Progress ($script:counter/10) -State Paused&#xA;}&#xA;&#xA;Show-TaskbarItem $ti&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81177095/184890354-ad60b9cd-b918-41ad-b2a8-bd36b9e0c506.gif&#34; alt=&#34;Countdown&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This module has been tested on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10 and 11&lt;/li&gt; &#xA; &lt;li&gt;Windows PowerShell 5.1 and PowerShell 7.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;PoshTaskbarItem&lt;/em&gt; is available on the PowerShell Gallery. You can install the module with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Install-Module -Name PoshTaskbarItem -Scope CurrentUser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Typical Code Structure&lt;/h2&gt; &#xA;&lt;p&gt;The following will be the typical code structure of a script that uses this module:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a TaskbarItem. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;New-TaskbarItem&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set static information of the TaskbarItem including the TimerFunction. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Set-TaskbarItemTimerFunction&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Add-TaskbarItemJumpTask&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Add-TaskbarItemThumbButton&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In the script block you specified to the TimerFunction or OnClicked callbacks, update the information of the TaskbarItem. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Set-TaskbarItemDescription&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Set-TaskbarItemOverlayBadge&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Set-TaskbarItemOverlayIcon&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Set-TaskbarItemProgressIndicator&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Show the TaskbarItem. The function does not return until the window is closed so everything needs to be handled in the callbacks. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Show-TaskbarItem&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;In the following code examples, it is assumed that the TaskbarItem object is stored in the variable &lt;code&gt;$ti&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ti = New-TaskbarItem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Description&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81177095/184888853-8fa8ada8-c7a4-4845-ad49-817cd8fe6338.png&#34; alt=&#34;Description&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-TaskbarItemDescription $ti &#34;Description is shown here&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Description is a text displayed on top of the taskbar preview window. It is shown by a mouse over.&lt;/p&gt; &#xA;&lt;h3&gt;Thumb Button&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81177095/184888921-283873ae-a1a6-4505-a656-022be39c04c7.png&#34; alt=&#34;ThumbButton&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$thumbButton = New-TaskbarItemThumbButton $ti -Description &#34;Increment Badge Counter&#34; -IconResourcePath &#34;imageres.dll&#34; -IconResourceIndex 101 -OnClicked {&#xA;    Write-Host &#34;Clicked.&#34;&#xA;}&#xA;Add-TaskbarItemThumbButton $ti $thumbButton&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ThumbButtons are the buttons displayed at the bottom of the preview window. You can add maximum 7 ThumbButtons to a TaskbarItem.&lt;/p&gt; &#xA;&lt;h3&gt;Overlay Badge&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81177095/184888975-5f6d0a5b-7120-4b42-8130-36c92ed317f3.png&#34; alt=&#34;OverlayBadge&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-TaskbarItemOverlayBadge $ti -Text &#34;2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OverlayBadge is a text badge displayed on the taskbar icon. The size of the badge and the font are changeable by parameters but 2 characters might be the maximum considering the space.&lt;/p&gt; &#xA;&lt;h3&gt;Overlay Icon&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81177095/184889028-d18a7476-9a9b-4d6f-9a47-2ff8f3bbc506.png&#34; alt=&#34;OverlayIcon&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-TaskbarItemOverlayIcon $ti -IconResourcePath imageres.dll -IconResourceIndex 79&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of a text badge, you can also show an image as an overlay icon.&lt;/p&gt; &#xA;&lt;h3&gt;Icon Flashing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81177095/184889102-4b12a6d6-6a14-4189-aca5-541e51ce677d.png&#34; alt=&#34;IconFlashing&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Start-TaskbarItemFlashing $ti -Count 3&#xA;# ...&#xA;Stop-TaskbarItemFlashing $ti&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can flash the taskbar icon to get more attention of the user.&lt;/p&gt; &#xA;&lt;h3&gt;Changing Application Icons&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81177095/185406314-b1657a74-fc2f-44a2-8d45-04639bf2f6be.png&#34; alt=&#34;AppIcon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you run a script that uses &lt;em&gt;PoshTaskbarItem&lt;/em&gt;, the PowerShell icon is shown on the taskbar by default. If you want to assign a new icon to your script, you have to create a shortcut that runs your script. You would also want to hide the PowerShell console so the command to create the shortcut will be like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;New-TaskbarItemShortcut -Path &#34;D:\YourApp.lnk&#34; -IconResourcePath &#34;imageres.dll&#34; -IconResourceIndex 144 -TargetPath &#34;powershell.exe&#34; -Arguments &#34;-ExecutionPolicy Bypass -WindowStyle Hidden -File D:\YourScript.ps1&#34; -WindowStyle Minimized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;IconResourcePath&lt;/h3&gt; &#xA;&lt;p&gt;Some of the functions take &lt;code&gt;IconResourcePath&lt;/code&gt; and &lt;code&gt;IconResourceIndex&lt;/code&gt; parameters to specify icon images. For &lt;code&gt;IconResourcePath&lt;/code&gt;, you can use a relative path from the current directory, a relative path from &lt;code&gt;$env:PATH&lt;/code&gt; or full path to a file that contains icon resources. The supported files are &lt;code&gt;.dll&lt;/code&gt;, &lt;code&gt;.exe&lt;/code&gt;, &lt;code&gt;.ico&lt;/code&gt; and image files (&lt;code&gt;.png&lt;/code&gt;, &lt;code&gt;.bmp&lt;/code&gt;, &lt;code&gt;.tif&lt;/code&gt;, &lt;code&gt;.gif&lt;/code&gt; and &lt;code&gt;.jpg&lt;/code&gt;). Depending on the function, image files are converted to &lt;code&gt;.ico&lt;/code&gt; files which are placed next to the original image files. &lt;code&gt;IconResourceIndex&lt;/code&gt; is a zero-based index value that specifies which one to use in case the resource file has multiple icon resources.&lt;/p&gt; &#xA;&lt;p&gt;On Windows 10 or 11, &lt;code&gt;imageres.dll&lt;/code&gt; or &lt;code&gt;shell32.dll&lt;/code&gt; has a lot of useful icons. You can see what kind of icons they have from the &#39;Change Icon&#39; button in the shortcut property.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/81177095/185643184-e4987ab5-784f-4d3a-9a3f-fc8686c32ff6.png&#34; alt=&#34;IconResource&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help and more Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command&lt;/code&gt; can list all the available functions in the module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Command -Module PoshTaskbarItem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the detailed help of a function, please try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Help Add-TaskbarItemJumpTask -Full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more code examples, please see the scripts under &lt;a href=&#34;https://raw.githubusercontent.com/mdgrs-mei/PoshTaskbarItem/main/Examples&#34;&gt;Examples&lt;/a&gt; folder.&lt;/p&gt;</summary>
  </entry>
</feed>