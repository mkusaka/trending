<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-13T01:52:34Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>arcadesdude/BRU</title>
    <updated>2022-07-13T01:52:34Z</updated>
    <id>tag:github.com,2022-07-13:/arcadesdude/BRU</id>
    <link href="https://github.com/arcadesdude/BRU" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bloatware Removal Utility, for automating removal of pre-installed, factory bloatware from devices running Windows 7-10 and newer. Silently removes items selected if possible. Preselects common bloatware. Can remove Win10 UWP/Metro/Modern/Windows Store apps and provisioned apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bloatware Removal Utility (BRU) &lt;img src=&#34;https://raw.githubusercontent.com/arcadesdude/BRU/master/BRU.PNG?raw=true&#34; alt=&#34;BRU&#34; title=&#34;BRU Icon&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Bloatware Removal Utility, for automating removal of pre-installed, factory bloatware from devices running Windows 7-10 and newer. Silently removes items selected if possible. Preselects common bloatware. Can remove Win10 UWP/Metro/Modern/Windows Store apps and provisioned apps.&lt;/p&gt; &#xA;&lt;p&gt;Bloatware Removal Utility Removes common bloatware from HP, Dell, Lenovo, Sony, Etc Supports Powershell 2+, Windows 7/Server 2008 R2 (Winver 6.1+) and newer - including removing Win8/10+ UWP (metro/modern) Apps. Reboot before running this script and after running it (if anything is removed)&lt;/p&gt; &#xA;&lt;h1&gt;Intended use&lt;/h1&gt; &#xA;&lt;p&gt;MSPs (Managed Service Providers), IT Professionals, Computer Repair shops and those who need to uninstall bloatware on a machine may find this useful. Careful! It will pre-select Microsoft Office and other applications you may want to keep. Review the list prior to clicking on &#39;Remove Selected&#39; as it will be uninstalled and not recoverable. Use at your own risk!&lt;/p&gt; &#xA;&lt;p&gt;Imaging would be a good way to set up multiple computers of the same model as there are sometimes issues with restoring images to dissimilar hardware. Also if you happen to have many different models of machines or would like to quickly and quietly remove the default bloatware that comes with many HP, Dell, and a few others this script supports this can automate that process to save you time and free you up for other more pressing concerns. This script will bring up the uninstallers and remove items silently in most cases. I&#39;ve used it mostly for HP ProBook/EliteBook/ProDesk and varients and also Dell Insprion/Lattitude/OptiPlex/Precision. HP is by far the worst when it comes to preinstalled bloatware.&lt;/p&gt; &#xA;&lt;h1&gt;History/Inspiration&lt;/h1&gt; &#xA;&lt;p&gt;I&#39;ve credited many of the original ideas and parts that helped make up this script inside it with comments on the relevant sections. There were some &#39;HP bloatware&#39; removal scripts out there but they didn&#39;t get everything and weren&#39;t totally automated. I&#39;ve tried to make this as automated as possible but still feel those scripts were valuable in getting the right approach to solve this problem and contributed to my work so they are appropriately attributted as well.&lt;/p&gt; &#xA;&lt;h1&gt;Creating the Uninstall Helpers folder&lt;/h1&gt; &#xA;&lt;p&gt;Supporting files that are needed should be saved to the &#34;BRU-uninstall-helpers&#34; folder (named exactly that without the quotes).&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll need to create that folder and get the appropriate uninstall helper files to support removal of programs like: McAfee products HP JumpStart Apps HP Client Security Manager Office Click-2-Run apps (Preinstalled O365 which prevents Business licensed versions from installing)&lt;/p&gt; &#xA;&lt;p&gt;The folder &#39;BRU-Uninstall-Helpers&#39; should be in the same location as the PS1/BAT files:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/arcadesdude/BRU/master/BRU-Uninstall-Helpers-Folder-Layout.PNG?raw=true&#34; alt=&#34;BRU-Uninstall-Helpers-Folder-Layout&#34; title=&#34;Folder Layout&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The contents of the &#39;BRU-Uninstall-Helpers&#39; folder.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/arcadesdude/BRU/master/BRU-Uninstall-Helpers-Folder-Contents.PNG?raw=true&#34; alt=&#34;BRU-Uninstall-Helpers-Folder-Contents&#34; title=&#34;Folder Contents&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Obtaining Specific Bloatware Uninstall Helpers&lt;/h1&gt; &#xA;&lt;p&gt;streams.exe (for unblocking files and preventing script from getting closed without warning by Windows SmartScreen) Streams v1.6 By Mark Russinovich may be downloaded from: &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/streams&#34;&gt;https://docs.microsoft.com/en-us/sysinternals/downloads/streams&lt;/a&gt; Place the streams.exe in the BRU-uninstall-helpers folder (streams64.exe is not needed). When the .Bat file is run as administrator it will check for streams.exe and run the commands to remove the Zone.Identifier info that it was downloaded from the internet. If it isn&#39;t removed, Windows Smartscreen may suddenly close the Powershell script before it is able to run.&lt;/p&gt; &#xA;&lt;p&gt;devcon HP Client Security Manager Uses DevCon to disable/reenable DVD/CD drive during uninstallation to prevent an HP uninstaller bug. &lt;a href=&#34;https://networchestration.wordpress.com/2016/07/11/how-to-obtain-device-console-utility-devcon-exe-without-downloading-and-installing-the-entire-windows-driver-kit-100-working-method/&#34;&gt;https://networchestration.wordpress.com/2016/07/11/how-to-obtain-device-console-utility-devcon-exe-without-downloading-and-installing-the-entire-windows-driver-kit-100-working-method/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WASP HP JumpStart Apps or &#39;VIP Access&#39; (Comes with old Norton) Uses the WASP uninstall helper &lt;a href=&#34;https://wasp.codeplex.com/&#34;&gt;https://wasp.codeplex.com/&lt;/a&gt; It is a dll file called WASP.dll.&lt;/p&gt; &#xA;&lt;p&gt;To get the WASP.dll file Download from &lt;a href=&#34;https://web.archive.org/web/20210701003323/https://codeplexarchive.blob.core.windows.net/archive/projects/WASP/WASP.zip&#34;&gt;https://web.archive.org/web/20210701003323/https://codeplexarchive.blob.core.windows.net/archive/projects/WASP/WASP.zip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the zip file, Go to the releases\4\55453160-4bf6-41a4-be7f-7cacc781b9b6 file and rename it .zip&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14213202/45259074-6ff93400-b392-11e8-8bd4-3514069a80d4.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14213202/45259088-9fa83c00-b392-11e8-8e84-e8fbf9d9d9fe.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The file you need is inside that as WASP.dll, (ver 1.2.0.0, 42kb).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/14213202/45259092-bc447400-b392-11e8-8de2-b4e0e0ac7db1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The snap-ins aren&#39;t needed just the dll file.&lt;/p&gt; &#xA;&lt;p&gt;OffScrub23.vbs Microsoft Office/C2R Office365 Preinstalled Apps Uses updated OffScrubc23.vbs for 2013/2016/2017/2018 &lt;a href=&#34;https://github.com/OfficeDev/Office-IT-Pro-Deployment-Scripts/raw/master/Office-ProPlus-Deployment/Deploy-OfficeClickToRun/OffScrubc2r.vbs&#34;&gt;https://github.com/OfficeDev/Office-IT-Pro-Deployment-Scripts/blob/master/Office-ProPlus-Deployment/Deploy-OfficeClickToRun/OffScrubc2r.vbs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MCRP.exe McAfee (Consumer) Applications Uses MCRP.exe &lt;a href=&#34;http://us.mcafee.com/apps/supporttools/mcpr/mcpr.asp&#34;&gt;http://us.mcafee.com/apps/supporttools/mcpr/mcpr.asp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;For silent / command line usage see the next section. Below is for GUI usage (default).&lt;/p&gt; &#xA;&lt;p&gt;Right Click and run as administrator on the BAT file (not the PS1) file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/arcadesdude/BRU/master/run-as-admin.PNG?raw=true&#34; alt=&#34;Run as Administrator&#34; title=&#34;Run As Administrator&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The program will get all installed software and show you a list you can pick from what you want to be removed (silently if possible). It may take 30 seconds to 3-4 minutes to show depending on the speed of the device it is running on and the total number of installed programs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/arcadesdude/BRU/master/GUI1.PNG?raw=true&#34; alt=&#34;GUI&#34; title=&#34;List of programs GUI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Carefully review the selected items. Remember this is intended for factory fresh systems to remove bloatware and prepare them for your specific setup -- intended for preparers of computers and IT professionals. Don&#39;t simply click remove selected without reviewing the program list.&lt;/p&gt; &#xA;&lt;p&gt;Disclaimers aside, The pre-selected items are built from fuzzy, regex patterns which you can modify in the script. It matches bloatware against lists of items, and doesn&#39;t match other items (like drivers and such). Special cases are handled after the general list and done in a specific order (as some programs require others to be removed first (HP Client Security Manager is one such program that needs several programs removed prior to its removal, for example)).&lt;/p&gt; &#xA;&lt;p&gt;Check the Options if you want to change automatic reboot after uninstall of all programs, confirmation prompts and System restore point options. There are some specific Windows 10 options as well.&lt;/p&gt; &#xA;&lt;p&gt;The setting recommended UWP apps auto download off option is supposed to stop UWP and windows store &#39;recommended&#39; applications from being automatically pushed and installed. In newer windows versions 1703 and on, it may not actually work (or on non-educational/enterprise versions of Windows 10). Note that whenever a windows update is installed, Windows tends to reinstall these UWP/suggested/recommended applications which end up being games or promotional content.&lt;/p&gt; &#xA;&lt;p&gt;The other Windows 10 specific option &#39;set default start menu layout for new users&#39; will not affect any existing accounts or current users. If a new user profile is created it will though. What this does is once the bloatware UWP apps are removed, they&#39;re also unpinned from the start menu so the new user won&#39;t see the uninstalled UWP bloatware applicaitons. This doesn&#39;t always seems to work and may give an error about the tiledatabase unless windows is updated first. So for setting up the computer, create your setup admin account first, update windows completely, then run this script to remove the bloatware and set the default start menu layout, then create the new user account which should start off without the default tiles pinned to the start menu.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/arcadesdude/BRU/master/BRU-2.PNG?raw=true&#34; alt=&#34;BRU-Script-Running&#34; title=&#34;BRU Script Running&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Silent / Command line usage&lt;/h1&gt; &#xA;&lt;p&gt;To run from command line launch either an admin command prompt and type powershell or launch an administrator powershell.&lt;/p&gt; &#xA;&lt;p&gt;You may have to set your execution policy to allow scripts to run. If you have Windows SmartScreen on you may have to right click the ps1 file and click Properties then Unblock file and OK. Or use the PS3+ command &lt;code&gt;Unblock-file&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Set-ExecutionPolicy -ExecutionPolicy RemoteSigned&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following command line options are supported.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-silent (or -quiet or -s)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Silent mode. Without this switch the GUI will run and manual user input will be required.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-nd (or -id or -ignoredefault or -ignoredefaults or -ignoredefaultsuggestions or -nodefaultsuggestions)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will not reference the built in suggestions lists so you&#39;ll need to use this with &lt;code&gt;-include, -exclude and/or -includelast (-specialcases)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-reboot -rebootafterremoval&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Reboots after running silently. You can check the log (see next section) for details after script runs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-include -includefirst&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will allow you to choose what you want to include. This comes after the default list if that is used or, if you want to not use the built in suggestions be sure to use the -nd switch (or other above aliases) to prevent the default detection list of including what you don&#39;t want. You would include using &lt;em&gt;Regular Expressions&lt;/em&gt; (escaped and case-INsensitive). The list to include is separated by | if you need to use | in the program name you can escape it with a preceeding backslash \ Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;`&#34;-include &#34;PROGRAM\ NAME|Something-else|HP\ .*&#34;`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;-exclude -filter&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will allow you to exclude (not detect) items you don&#39;t want to match. This matches text in Regular Expressions but it is escaped in the program so you would enter examples such as:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt; -exclude &#39;&#34;keyboard&#34;,&#34;driver&#34;&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have more than one item and are using Powershell Version 2, you&#39;ll need to wrap the strings into a single quoted string (like in the example above). If you&#39;re using newer Powershell versions you don&#39;t have to do that and can just put in the items to match in quotes separated by commas without having to wrap the entire string in single quotes.&lt;/p&gt; &#xA;&lt;p&gt;What you put into each &#34;string&#34; above will turn into a single Regex escaped string like &lt;code&gt;&#34;.*keyboard|driver.*&#34;&lt;/code&gt; That is done automatically by the program so you don&#39;t have to escape it here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-includelast -specialcases&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is for programs you want uninstalled AFTER everything else. Useful for stuff that needs to come after other stuff to be removed properly (&lt;code&gt;*cough*&lt;/code&gt; HP Client Security Manager &lt;code&gt;*cough*&lt;/code&gt;). This matches text in Regular Expressions but it is escaped in the program so you would enter examples such as:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt; -includelast &#39;&#34;HP Client Security Manager&#34;,&#34;HP Support Assistant&#34;&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have more than one item and are using Powershell Version 2, you&#39;ll need to wrap the strings into a single quoted string (like in the example above). If you&#39;re using newer Powershell versions you don&#39;t have to do that and can just put in the items to match in quotes separated by commas without having to wrap the entire string in single quotes.&lt;/p&gt; &#xA;&lt;p&gt;What you put into each &#34;string&#34; above will turn into a single Regex escaped string like &lt;code&gt;&#34;.*HP\ Client\ Security\ Manager|HP\ Support\ Assistant.*&#34;&lt;/code&gt; You don&#39;t have to do that but it is good to know that happens in the program automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-includefile -selectionfile [File Path (default: c:\BRU\BRU-Saved-Selection.xml)]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This uses the saved file that is created in the GUI with the &#39;File, Export Selection&#39; option to create the selection list file used when running silently.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/arcadesdude/BRU/master/BRU-4.PNG?raw=true&#34; alt=&#34;BRU-File-Export-Selection&#34; title=&#34;BRU File Export Selection&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If using this includefile option, the options ignoredefaults, include, exclude, includelast (specialcases) are all ignored and not applied. This also skips the default suggestions list. This assumes the file supplied has programs already chosen and ready to remove. Speeds up removal of bloatware for batches of the same selections (i.e. all same model with same installed bloatware).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-win10leaverecommendedappsdownloadon&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will keep the default Windows 10 option for Windows to download those random, recommended game apps like Candy Crush and such. If you don&#39;t include this option this script will set the registry keys to stop that unwanted behavior (default).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-win10leavestartmenuadson -keepstartads&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This option will keep the Win10 ContentDeliveryManager Ads that appear in the start menu. Not having this option will remove the ads and export the default option so new default accounts won&#39;t see them. It doesn&#39;t affect existing Windows accounts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-norestorepoint -skiprestorepoint -nr&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This skips the Windows Restore Point creation attempt which is on by default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-dry -dr -dryrun -detect -detectonly -whatif&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dry Run / Detect Only / WhatIf mode will not remove anything but show you what your -include and -exclude (and -specialcases) filters will target if you&#39;re working on trying to target just specific software to be removed.&lt;/p&gt; &#xA;&lt;h1&gt;Full example from Powershell admin prompt:&lt;/h1&gt; &#xA;&lt;p&gt;Remove All HP apps and do the Client Security Manager and Support Assistant last: &lt;code&gt;.\Bloatware-Removal-Utility.ps1 -silent -nd -includelast &#39;&#34;HP Client Security Manager&#34;,&#34;HP Support Assistant&#34;&#39; -include &#39;&#34;HP\ .*&#34;&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you find a setup that works for you you can modify the batch script to specify the options. The current batch script will also run the streams.exe program if you&#39;ve included it in the uninstall helpers folder to remove the download zone information from the PS1/VBS/BAT/EXE files so Windows SmartScreen doesn&#39;t stop the script from running when launching.&lt;/p&gt; &#xA;&lt;h1&gt;Log&lt;/h1&gt; &#xA;&lt;p&gt;Logfile will be saved in c:\BRU (or you can edit script to suit your needs). If running with the automatic reboot option this is handy to see if something did not automatically uninstall and what error message was given.&lt;/p&gt; &#xA;&lt;h1&gt;After running&lt;/h1&gt; &#xA;&lt;p&gt;Be sure to reboot after running this as some programs need a reboot when uninstalling. Also you can compare the programs and features list of currently installed programs and see if there is anything left you would need to manually uninstall.&lt;/p&gt; &#xA;&lt;h1&gt;Version History&lt;/h1&gt; &#xA;&lt;p&gt;05/20/2021&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed Office 365 detection (MS Calls it Microsoft 365 now) thanks to jduke-halls&lt;/li&gt; &#xA; &lt;li&gt;Added Feature to save GUI selection list to file and then use that silently. Good for customizing different &#39;batches&#39; or brands of bloatware for removal.&lt;/li&gt; &#xA; &lt;li&gt;Changed HP UWP app detection, now targets company prefix of HP (AD2F1837) instead of by individual app names&lt;/li&gt; &#xA; &lt;li&gt;Added UWP not match exclusion for &#34;HPPCHardwareDiagnostics&#34;&lt;/li&gt; &#xA; &lt;li&gt;Added back Powershell v2 support (updated BAT file to use STA mode if PSv2 or lower to support dialog boxes and removed * output streams redirector (which is PSv3+ only).&lt;/li&gt; &#xA; &lt;li&gt;Attempt alternate method of suppressing errors when removing UWP apps that are already removed.&lt;/li&gt; &#xA; &lt;li&gt;Updated README&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;03/21/2021&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Updated comments, haven&#39;t been testing Powershell 2 so updated to show support for 3+ (it may still work in 2 but I haven&#39;t been testing in it and dropping support for version 2).&lt;/li&gt; &#xA; &lt;li&gt;Updated removing McAfee from taskbar (unpinning) if it was there after McAfee removal. Removed verbose output when deleting the MCPR during McAfee Removal.&lt;/li&gt; &#xA; &lt;li&gt;Fixed some UWP apps not getting removed by adding additional removal and suppressing most removal output (sometimes Win 10 Version 2004 still shows error removing on the 2nd and 3rd attempts when it worked on the first attempt). Apps like Lenovo Vantage are removed correctly on the 2nd removal attempt now (some apps would always fail on first attempt due to Windows bug). Found the fix in a Lenovo uninstall script.&lt;/li&gt; &#xA; &lt;li&gt;Tweaked default suggested uninstall list, Lenovo apps no longer need a space after &#39;Lenovo&#39; to be considered for the default list.&lt;/li&gt; &#xA; &lt;li&gt;Added Microsoft Getstarted UWP app (Welcome to Windows &#39;tour&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;Lenovo System Update&#34; to exclude list by default&lt;/li&gt; &#xA; &lt;li&gt;Fixed/Updated Core regular expression matching again for more consistent include/exclude when using command line options.&lt;/li&gt; &#xA; &lt;li&gt;Added some edge cases error handling when the programs list is very small to not throw an error.&lt;/li&gt; &#xA; &lt;li&gt;Updated README&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;10/07/2020&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed Matching issues. Rewrote core matching and fixed issues matching when exclude list blank in silent/cli options.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;09/20/2020&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed Matching issues. Rewrote core matching and fixed out of order or match/not match issues with command line options.&lt;/li&gt; &#xA; &lt;li&gt;Updated Inclusion/Exclusion default suggestions.&lt;/li&gt; &#xA; &lt;li&gt;Excluded &#34;Dell MD Storage&#34; from default suggestions&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;HPSureShield&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;HPSupportAssistant&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;HPPrivacySettings&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;FarmHeroesSaga&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;Norton&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;Norton Security&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Minor display fixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;01/28/2020&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added LenovoUtility (Vantage) UWP app detection to the list of suggested apps to remove.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;11/27/2019&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added Added ASUS software including ASUSGiftBox, ASUSPCAssistant (MyASUS) and McAfee Security (UWP) app detection to the list of suggested apps to remove.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;11/23/2019&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added logging full command line options if run silently&lt;/li&gt; &#xA; &lt;li&gt;Fixed &lt;a href=&#34;https://github.com/arcadesdude/BRU/issues/5&#34;&gt;https://github.com/arcadesdude/BRU/issues/5&lt;/a&gt; &#34;-includelast or -specialcases not working&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;10/17/2019&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &#34;HPInc.EnergyStar&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;HPPrinterControl&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;HPPrivacySettings&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;HPSupportAssistant&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;HPSystemEventUtility&#34; UWP app to suggested apps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;08/29/2019&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed minor bug in programs list generation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;06/02/2019&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed bug in function refreshProgramsList when adding registry results from multiple keys&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;03/24/2019&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed detection of MS Office UWP apps&lt;/li&gt; &#xA; &lt;li&gt;Fixed selection bug when generating default detected list of bloatware when running in command line options mode with more than one match&lt;/li&gt; &#xA; &lt;li&gt;Added silent removal support for &#34;Lenovo App Explorer&#34;&lt;/li&gt; &#xA; &lt;li&gt;Updated documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;10/06/2018&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added silent command line options, custom include/exclude lists, dry run/WhatIf option, etc - see Silent / Command line usage section&lt;/li&gt; &#xA; &lt;li&gt;Added URL in GUI about window to the github link&lt;/li&gt; &#xA; &lt;li&gt;Fixed match detection bugs and updated comments to match what they are. Only the included items need to be manually Regex escaped&lt;/li&gt; &#xA; &lt;li&gt;Fixed Batch file launcher to fix SmartScreen issues (to prevent Windows SmartScreen from closing script window)&lt;/li&gt; &#xA; &lt;li&gt;Fixed GUI list checked items when refreshing programs list&lt;/li&gt; &#xA; &lt;li&gt;Updated McAfee uninstall helper launch args&lt;/li&gt; &#xA; &lt;li&gt;Updated documentation, fixed typos, etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;9/16/2018&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added streams.exe command in batch file (from Sysinternals) to remove Zone.Identifier so scripts won&#39;t get closed without warning by Windows SmartScreen. You&#39;ll need to download that separately and put streams.exe in the BRU-uninstall-helpers folder. See &#34;Obtaining Specific Bloatware Uninstall Helpers&#34;&lt;/li&gt; &#xA; &lt;li&gt;Changed Windows Store version of Office detection for preinstalled UWP Office&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;CookingFever&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;DragonManiaLegends&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;HPBusinessSlimKeyboard&#34; UWP app to suggested apps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;6/05/2018&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &#34;Viber&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;ACGMediaPlayer&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;BlueEdge.OneCalendar&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;HiddenCityMysteryofShadows&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;LenovoCompanion&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;LenovoCorporation.LenovoID&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;LenovoCorporation.LenovoSettings&#34; UWP app to suggested apps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;4/13/2018&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &#34;McAfeeSecurity&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;LinkedInforWindows&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;MediaSuiteEssentials&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;Power2Go&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;PowerDirector&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;PowerMediaPlayer&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;DellCustomerConnect&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;DellHelpSupport&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;DellProductRegistration&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;Microsoft.Office.Desktop&#34; UWP app to suggested apps (Windows Store version of Office)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;3/01/2018&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &#34;HPWorkWise64&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Excluded &#34;HP Battery Recall Utility&#34; from suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Fixed - Increased delay in between removing UWP apps from 2 seconds to 4 seconds&lt;/li&gt; &#xA; &lt;li&gt;Added Screenshot of script running/removing bloatware&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2/28/2018&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &#34;SpotifyAB&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;CaesarsSlotsFreeCasino&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;DisneyMagicKingdoms&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;DolbyAccess&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;Duolingo&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;PhototasticCollage&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;PicsArt&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;TheNewYorkTimes&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;TuneInRadio&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;WinZipUniversal&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;Wunderlist&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Added &#34;XINGAG.XING&#34; UWP app to suggested apps&lt;/li&gt; &#xA; &lt;li&gt;Option &#39;After removal set &#34;recommended&#34; UWP app auto-downloads off&#39; now also sets HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager\SystemPaneSuggestionsEnabled to 0&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dahlbyk/posh-git</title>
    <updated>2022-07-13T01:52:34Z</updated>
    <id>tag:github.com,2022-07-13:/dahlbyk/posh-git</id>
    <link href="https://github.com/dahlbyk/posh-git" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A PowerShell environment for Git&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;posh-git&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/dahlbyk/posh-git?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/dahlbyk/posh-git.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/dahlbyk/posh-git&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.powershellgallery.com/packages/posh-git&#34;&gt;&lt;img src=&#34;https://img.shields.io/powershellgallery/dt/posh-git.svg?sanitize=true&#34; alt=&#34;PowerShell Gallery&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chocolatey.org/packages/poshgit/&#34;&gt;&lt;img src=&#34;https://img.shields.io/chocolatey/dt/poshgit.svg?sanitize=true&#34; alt=&#34;posh-git on Chocolatey&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Table of contents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dahlbyk/posh-git/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dahlbyk/posh-git/master/#versions&#34;&gt;Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dahlbyk/posh-git/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dahlbyk/posh-git/master/#using-posh-git&#34;&gt;Using posh-git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dahlbyk/posh-git/master/#git-status-summary-information&#34;&gt;Git status summary information&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dahlbyk/posh-git/master/#customization-variables&#34;&gt;Customization variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dahlbyk/posh-git/master/#customizing-the-posh-git-prompt&#34;&gt;Customizing the posh-git prompt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dahlbyk/posh-git/master/#based-on-work-by&#34;&gt;Based on work by&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;posh-git is a PowerShell module that integrates Git and PowerShell by providing Git status summary information that can be displayed in the PowerShell prompt, e.g.:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dahlbyk/posh-git/wiki/images/PromptDefaultLong.png&#34; alt=&#34;C:\Users\Keith\GitHub\posh-git [main ≡ +0 ~1 -0 | +0 ~1 -0 !]&gt; &#34; title=&#34;~\GitHub\posh-git [main ≡ +0 ~1 -0 | +0 ~1 -0 !]&gt; &#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;posh-git also provides tab completion support for common git commands, branch names, paths and more. For example, with posh-git, PowerShell can tab complete git commands like &lt;code&gt;checkout&lt;/code&gt; by typing &lt;code&gt;git ch&lt;/code&gt; and pressing the &lt;kbd&gt;tab&lt;/kbd&gt; key. That will tab complete to &lt;code&gt;git checkout&lt;/code&gt; and if you keep pressing &lt;kbd&gt;tab&lt;/kbd&gt;, it will cycle through other command matches such as &lt;code&gt;cherry&lt;/code&gt; and &lt;code&gt;cherry-pick&lt;/code&gt;. You can also tab complete remote names and branch names e.g.: &lt;code&gt;git pull or&amp;lt;tab&amp;gt; ma&amp;lt;tab&amp;gt;&lt;/code&gt; tab completes to &lt;code&gt;git pull origin main&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;h3&gt;posh-git v1.0&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Windows (AppVeyor)&lt;/th&gt; &#xA;   &lt;th&gt;Linux/macOS (Travis)&lt;/th&gt; &#xA;   &lt;th&gt;Code Coverage Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ci.appveyor.com/project/dahlbyk/posh-git/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/eb8erd5afaa01w80/branch/master?svg=true&amp;amp;pendingText=master%20%E2%80%A3%20pending&amp;amp;failingText=master%20%E2%80%A3%20failing&amp;amp;passingText=master%20%E2%80%A3%20passing&#34; alt=&#34;master build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://travis-ci.org/dahlbyk/posh-git&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dahlbyk/posh-git.svg?branch=master&#34; alt=&#34;master build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://coveralls.io/github/dahlbyk/posh-git?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/dahlbyk/posh-git/badge.svg?branch=master&#34; alt=&#34;master build coverage&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/master/README.md&#34;&gt;README&lt;/a&gt; • &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports Windows PowerShell 5.x&lt;/li&gt; &#xA; &lt;li&gt;Supports PowerShell Core 6+ on all platforms&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;ANSI escape sequences&lt;/a&gt; for color customization&lt;/li&gt; &#xA; &lt;li&gt;Includes breaking changes from v0.x (&lt;a href=&#34;https://github.com/dahlbyk/posh-git/issues/328&#34;&gt;roadmap&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;All SSH commands removed&lt;/strong&gt; from &lt;code&gt;posh-git&lt;/code&gt; and moved into the new module &lt;a href=&#34;https://github.com/dahlbyk/posh-sshell&#34;&gt;posh-sshell&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Releases&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v1.1.0 ( &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.1.0/README.md&#34;&gt;README&lt;/a&gt; • &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.1.0/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; )&lt;/li&gt; &#xA; &lt;li&gt;v1.0.0 ( &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.0.0/README.md&#34;&gt;README&lt;/a&gt; • &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.0.0/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; )&lt;/li&gt; &#xA; &lt;li&gt;v1.0.0-beta5 ( &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.0.0-beta5/README.md&#34;&gt;README&lt;/a&gt; • &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.0.0-beta5/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; )&lt;/li&gt; &#xA; &lt;li&gt;v1.0.0-beta4 ( &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.0.0-beta4/README.md&#34;&gt;README&lt;/a&gt; • &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.0.0-beta4/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; )&lt;/li&gt; &#xA; &lt;li&gt;v1.0.0-beta3 ( &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.0.0-beta3/README.md&#34;&gt;README&lt;/a&gt; • &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.0.0-beta3/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; )&lt;/li&gt; &#xA; &lt;li&gt;v1.0.0-beta2 ( &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.0.0-beta2/README.md&#34;&gt;README&lt;/a&gt; • &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.0.0-beta2/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; )&lt;/li&gt; &#xA; &lt;li&gt;v1.0.0-beta1 ( &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.0.0-beta1/README.md&#34;&gt;README&lt;/a&gt; • &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v1.0.0-beta1/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;posh-git v0.x&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Windows (AppVeyor)&lt;/th&gt; &#xA;   &lt;th&gt;Code Coverage Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ci.appveyor.com/project/dahlbyk/posh-git/branch/v0&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/eb8erd5afaa01w80/branch/v0?svg=true&amp;amp;pendingText=v0%20%E2%80%A3%20pending&amp;amp;failingText=v0%20%E2%80%A3%20failing&amp;amp;passingText=v0%20%E2%80%A3%20passing&#34; alt=&#34;v0 build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://coveralls.io/github/dahlbyk/posh-git?branch=v0&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/dahlbyk/posh-git/badge.svg?branch=v0&#34; alt=&#34;v0 build coverage&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v0/README.md&#34;&gt;README&lt;/a&gt; • &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v0/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports Windows PowerShell 3+&lt;/li&gt; &#xA; &lt;li&gt;Does not support PowerShell Core&lt;/li&gt; &#xA; &lt;li&gt;Avoids breaking changes, maintaining v0.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Releases&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v0.7.3 ( &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v0.7.3/README.md&#34;&gt;README&lt;/a&gt; • &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v0.7.3/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; )&lt;/li&gt; &#xA; &lt;li&gt;v0.7.1 ( &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v0.7.1/README.md&#34;&gt;README&lt;/a&gt; • &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v0.7.1/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; )&lt;/li&gt; &#xA; &lt;li&gt;v0.7.0 ( &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v0.7.0/README.md&#34;&gt;README&lt;/a&gt; • &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v0.7.0/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;These installation instructions, as well as rest of this readme, applies only to version 1.x of posh-git. For v0.x installation instructions see this &lt;a href=&#34;https://github.com/dahlbyk/posh-git/raw/v0/README.md&#34;&gt;README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Before installing posh-git make sure the following prerequisites have been met.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows PowerShell 5.x or PowerShell Core 6.0. You can get PowerShell Core 6.0 for Windows, Linux or macOS from &lt;a href=&#34;https://github.com/PowerShell/PowerShell#get-powershell&#34;&gt;here&lt;/a&gt;. Check your PowerShell version by executing &lt;code&gt;$PSVersionTable.PSVersion&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Windows, script execution policy must be set to either &lt;code&gt;RemoteSigned&lt;/code&gt; or &lt;code&gt;Unrestricted&lt;/code&gt;. Check the script execution policy setting by executing &lt;code&gt;Get-ExecutionPolicy&lt;/code&gt;. If the policy is not set to one of the two required values, run PowerShell as Administrator and execute &lt;code&gt;Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Confirm&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Git must be installed and available via the PATH environment variable. Check that &lt;code&gt;git&lt;/code&gt; is accessible from PowerShell by executing &lt;code&gt;git --version&lt;/code&gt; from PowerShell. If &lt;code&gt;git&lt;/code&gt; is not recognized as the name of a command, verify that you have Git installed. If not, install Git from &lt;a href=&#34;https://git-scm.com&#34;&gt;https://git-scm.com&lt;/a&gt;. If you have Git installed, make sure the path to git is in your PATH environment variable.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installing posh-git via PowerShellGet on Linux, macOS and Windows&lt;/h3&gt; &#xA;&lt;p&gt;posh-git is available on the &lt;a href=&#34;https://www.powershellgallery.com/packages/posh-git/1.0.0&#34;&gt;PowerShell Gallery&lt;/a&gt; and can be installed using the built-in PowerShellGet module.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Windows PowerShell 5.x or PowerShell &amp;gt;= v6 (&lt;code&gt;pwsh&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute one of the following two commands from an elevated PowerShell prompt, depending on whether (A) you&#39;ve never installed posh-git, or (B) you&#39;ve already installed a previous version:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# (A) You&#39;ve never installed posh-git from the PowerShell Gallery&#xA;PowerShellGet\Install-Module posh-git -Scope CurrentUser -Force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you&#39;re asked to trust packages from the PowerShell Gallery, answer &lt;code&gt;yes&lt;/code&gt; to continue installation of posh-git&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;OR&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# (B) You&#39;ve already installed a previous version of posh-git from the PowerShell Gallery&#xA;PowerShellGet\Update-Module posh-git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installing posh-git via Chocolatey&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to manage posh-git as a Windows package, you can use &lt;a href=&#34;https://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt; to install posh-git. If you don&#39;t have Chocolatey, you can install it from the &lt;a href=&#34;https://chocolatey.org/install&#34;&gt;Chocolately Install page&lt;/a&gt;. With Chocolatey installed, execute the following command to install posh-git:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install poshgit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing posh-git via Scoop&lt;/h3&gt; &#xA;&lt;p&gt;Another popular package manager for Windows is &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt;, which you can also use to install posh-git. With Scoop installed, execute these commands to install posh-git and import it into your profile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;scoop bucket add extras&#xA;scoop install posh-git&#xA;Add-PoshGitToProfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing posh-git Manually&lt;/h3&gt; &#xA;&lt;p&gt;If you need to test/debug changes prior to contributing here, or would otherwise prefer to install posh-git without the aid of a package manager, you can execute &lt;code&gt;Import-Module &amp;lt;path-to-src\posh-git.psd1&amp;gt;&lt;/code&gt;. For example, if you have git cloned posh-git to &lt;code&gt;~\git\posh-git&lt;/code&gt; you can import this version of posh-git by executing &lt;code&gt;Import-Module ~\git\posh-git\src\posh-git.psd1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using posh-git&lt;/h2&gt; &#xA;&lt;p&gt;After you have installed posh-git, you need to configure your PowerShell session to use the posh-git module.&lt;/p&gt; &#xA;&lt;h3&gt;Step 1: Import posh-git&lt;/h3&gt; &#xA;&lt;p&gt;The first step is to import the module into your PowerShell session which will enable git tab completion. You can do this with the command &lt;code&gt;Import-Module posh-git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Step 2: Import posh-git from your PowerShell profile&lt;/h3&gt; &#xA;&lt;p&gt;You do not want to have to manually execute the &lt;code&gt;Import-Module&lt;/code&gt; command every time you open a new PowerShell prompt. Let&#39;s have PowerShell import this module for you in each new PowerShell session. We can do this by either executing the command &lt;code&gt;Add-PoshGitToProfile&lt;/code&gt; or by editing your PowerShell profile script and adding the command &lt;code&gt;Import-Module posh-git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want posh-git to be available in all your PowerShell hosts (console, ISE, etc) then execute &lt;code&gt;Add-PoshGitToProfile -AllHosts&lt;/code&gt;. This will add a line containing &lt;code&gt;Import-Module posh-git&lt;/code&gt; to the file &lt;code&gt;$profile.CurrentUserAllHosts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want posh-git to be available in just the current host, then execute &lt;code&gt;Add-PoshGitToProfile&lt;/code&gt;. This will add the same command but to the file &lt;code&gt;$profile.CurrentUserCurrentHost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want posh-git to be available for all users on the system, start PowerShell as Administrator or via sudo (&lt;code&gt;sudo pwsh&lt;/code&gt;) on Linux/macOS then execute &lt;code&gt;Add-PoshGitToProfile -AllUsers -AllHosts&lt;/code&gt;. This will add the import command to &lt;code&gt;$profile.AllUsersAllHosts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to configure posh-git for all users but only for the current host, drop the &lt;code&gt;-AllHosts&lt;/code&gt; parameter and the command will modify &lt;code&gt;$profile.AllUsersCurrentHost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d prefer, you can manually edit the desired PowerShell profile script. Open (or create) your profile script with the command &lt;code&gt;notepad $profile.CurrentUserAllHosts&lt;/code&gt;. In the profile script, add the following line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module posh-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Save the profile script, then close PowerShell and open a new PowerShell session. Type &lt;code&gt;git fe&lt;/code&gt; and then press &lt;kbd&gt;tab&lt;/kbd&gt;. If posh-git has been imported, that command should tab complete to &lt;code&gt;git fetch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want posh-git to detect your own aliases for git, then you &lt;em&gt;must&lt;/em&gt; have set the alias &lt;em&gt;before&lt;/em&gt; importing posh-git. So if you have &lt;code&gt;Set-Alias g git&lt;/code&gt; then ensure it is executed before &lt;code&gt;Import-Module posh-git&lt;/code&gt;, and &lt;code&gt;g checkout&lt;/code&gt; will complete as if you&#39;d typed &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Git status summary information&lt;/h2&gt; &#xA;&lt;p&gt;The Git status summary information provides a wealth of &#34;Git status&#34; information at a glance, all the time in your prompt.&lt;/p&gt; &#xA;&lt;p&gt;By default, the status summary has the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[{HEAD-name} S +A ~B -C !D | +E ~F -G !H W]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;[&lt;/code&gt; (&lt;code&gt;BeforeStatus&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;{HEAD-name}&lt;/code&gt; is the current branch, or the SHA of a detached HEAD&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cyan means the branch matches its remote&lt;/li&gt; &#xA;   &lt;li&gt;Green means the branch is ahead of its remote (green light to push)&lt;/li&gt; &#xA;   &lt;li&gt;Red means the branch is behind its remote&lt;/li&gt; &#xA;   &lt;li&gt;Yellow means the branch is both ahead of and behind its remote&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;S&lt;/code&gt; represents the branch status in relation to remote (tracked origin) branch.&lt;/p&gt; &lt;p&gt;Note: This status information reflects the state of the remote tracked branch after the last &lt;code&gt;git fetch/pull&lt;/code&gt; of the remote. Execute &lt;code&gt;git fetch&lt;/code&gt; to update to the latest on the default remote repo. If you have multiple remotes, execute &lt;code&gt;git fetch --all&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;≡&lt;/code&gt; = The local branch is at the same commit level as the remote branch (&lt;code&gt;BranchIdenticalStatus&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;↑&amp;lt;num&amp;gt;&lt;/code&gt; = The local branch is ahead of the remote branch by the specified number of commits; a &lt;code&gt;git push&lt;/code&gt; is required to update the remote branch (&lt;code&gt;BranchAheadStatus&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;↓&amp;lt;num&amp;gt;&lt;/code&gt; = The local branch is behind the remote branch by the specified number of commits; a &lt;code&gt;git pull&lt;/code&gt; is required to update the local branch (&lt;code&gt;BranchBehindStatus&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;a&amp;gt;↕&amp;lt;b&amp;gt;&lt;/code&gt; = The local branch is both ahead of the remote branch by the specified number of commits (a) and behind by the specified number of commits (b); a rebase of the local branch is required before pushing local changes to the remote branch (&lt;code&gt;BranchBehindAndAheadStatus&lt;/code&gt;). NOTE: this status is only available if &lt;code&gt;$GitPromptSettings.BranchBehindAndAheadDisplay&lt;/code&gt; is set to &lt;code&gt;Compact&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;×&lt;/code&gt; = The local branch is tracking a branch that is gone from the remote (&lt;code&gt;BranchGoneStatus&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ABCD&lt;/code&gt; represent the index; &lt;code&gt;|&lt;/code&gt; (&lt;code&gt;DelimStatus&lt;/code&gt;); &lt;code&gt;EFGH&lt;/code&gt; represent the working directory&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;+&lt;/code&gt; = Added files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;~&lt;/code&gt; = Modified files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-&lt;/code&gt; = Removed files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;!&lt;/code&gt; = Conflicted files&lt;/li&gt; &#xA;   &lt;li&gt;As with &lt;code&gt;git status&lt;/code&gt; output, index status is displayed in dark green and working directory status in dark red&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;W&lt;/code&gt; represents the overall status of the working directory&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;!&lt;/code&gt; = There are unstaged changes in the working tree (&lt;code&gt;LocalWorkingStatusSymbol&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;~&lt;/code&gt; = There are uncommitted changes i.e. staged changes in the working tree waiting to be committed (&lt;code&gt;LocalStagedStatusSymbol&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;None = There are no unstaged or uncommitted changes to the working tree (&lt;code&gt;LocalDefaultStatusSymbol&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;]&lt;/code&gt; (&lt;code&gt;AfterStatus&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The symbols and surrounding text can be customized by the corresponding properties on &lt;code&gt;$GitPromptSettings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, a status of &lt;code&gt;[main ≡ +0 ~2 -1 | +1 ~1 -0]&lt;/code&gt; corresponds to the following &lt;code&gt;git status&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# On branch main&#xA;#&#xA;# Changes to be committed:&#xA;#   (use &#34;git reset HEAD &amp;lt;file&amp;gt;...&#34; to unstage)&#xA;#&#xA;#        modified:   this-changed.txt&#xA;#        modified:   this-too.txt&#xA;#        deleted:    gone.ps1&#xA;#&#xA;# Changed but not updated:&#xA;#   (use &#34;git add &amp;lt;file&amp;gt;...&#34; to update what will be committed)&#xA;#   (use &#34;git checkout -- &amp;lt;file&amp;gt;...&#34; to discard changes in working directory)&#xA;#&#xA;#        modified:   not-staged.ps1&#xA;#&#xA;# Untracked files:&#xA;#   (use &#34;git add &amp;lt;file&amp;gt;...&#34; to include in what will be committed)&#xA;#&#xA;#        new.file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization variables&lt;/h2&gt; &#xA;&lt;p&gt;posh-git adds variables to your session to let you customize it, including &lt;code&gt;$GitPromptSettings&lt;/code&gt;, &lt;code&gt;$GitTabSettings&lt;/code&gt;, and &lt;code&gt;$TortoiseGitSettings&lt;/code&gt;. For an example of how to configure your PowerShell profile script to import the posh-git module and create a custom prompt function that displays git status info, see the &lt;a href=&#34;https://raw.githubusercontent.com/dahlbyk/posh-git/master/#customizing-the-posh-git-prompt&#34;&gt;Customizing Your PowerShell Prompt&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;p&gt;Note on performance: Displaying file status in the git prompt for a very large repo can be prohibitively slow. Rather than turn off file status entirely (&lt;code&gt;$GitPromptSettings.EnableFileStatus = $false&lt;/code&gt;), you can disable it on a repo-by-repo basis by adding individual repository paths to &lt;code&gt;$GitPromptSettings.RepositoriesInWhichToDisableFileStatus&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing the posh-git prompt&lt;/h2&gt; &#xA;&lt;p&gt;When you import the posh-git module, it will replace PowerShell&#39;s default prompt function with a new prompt function. The posh-git prompt function will display Git status summary information when the current directory is inside a Git repository. posh-git will not replace the prompt function if it has detected that you have your own, customized prompt function.&lt;/p&gt; &#xA;&lt;p&gt;The prompt function provided by posh-git creates a prompt that looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dahlbyk/posh-git/wiki/images/PromptDefault.png&#34; alt=&#34;~\GitHub\posh-git [main ≡]&gt; &#34; title=&#34;~\GitHub\posh-git [main ≡]&gt; &#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can customize the posh-git prompt function or define your own custom prompt function. The rest of this section covers how to customize posh-git&#39;s prompt function using the global variable &lt;code&gt;$GitPromptSettings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you&#39;d like to make any of following changes permanent, i.e. available whenever you start PowerShell, put the corresponding setting(s) in one of your profile scripts after the line that imports posh-git.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For instance, you can customize the default prompt prefix to display a colored timestamp with these settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$GitPromptSettings.DefaultPromptPrefix.Text = &#39;$(Get-Date -f &#34;MM-dd HH:mm:ss&#34;) &#39;&#xA;$GitPromptSettings.DefaultPromptPrefix.ForegroundColor = [ConsoleColor]::Magenta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will change the prompt to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dahlbyk/posh-git/wiki/images/PromptPrefix.png&#34; alt=&#34;02-18 13:45:19 ~\GitHub\posh-git [main ≡]&gt; &#34; title=&#34;02-18 13:45:19 ~\GitHub\posh-git [main ≡]&gt;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would prefer not to have any path under your home directory abbreviated with &lt;code&gt;~&lt;/code&gt;, use the following setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$GitPromptSettings.DefaultPromptAbbreviateHomeDirectory = $false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will change the prompt to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dahlbyk/posh-git/wiki/images/PromptNoAbbrevHome.png&#34; alt=&#34;C:\Users\Keith\GitHub\posh-git [main ≡]&gt; &#34; title=&#34;C:\Users\Keith\GitHub\posh-git [main ≡]&gt; &#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to change the color of the path, you can use the following setting on Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$GitPromptSettings.DefaultPromptPath.ForegroundColor = &#39;Orange&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Setting the ForegroundColor to a color name, other than one of the standard ConsoleColor names, only works on Windows. On Windows, posh-git uses the &lt;code&gt;[System.Drawing.ColorTranslator]::FromHtml(string colorName)&lt;/code&gt; method to parse a color name as an HTML color. For a complete list of HTML colors, see this &lt;a href=&#34;https://www.w3schools.com/colors/colors_names.asp&#34;&gt;W3Schools page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you are on Linux or macOS and desire an Orange path, you will need to specify the RGB value for Orange e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$GitPromptSettings.DefaultPromptPath.ForegroundColor = 0xFFA500&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will change the prompt to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dahlbyk/posh-git/wiki/images/PromptOrangePath.png&#34; alt=&#34;~\GitHub\posh-git [main]&gt; &#34; title=&#34;~\GitHub\posh-git [main ≡]&gt; &#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to make your prompt span two lines, with a newline after the Git status summary, use this setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$GitPromptSettings.DefaultPromptBeforeSuffix.Text = &#39;`n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will change the prompt to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dahlbyk/posh-git/wiki/images/PromptTwoLine.png&#34; alt=&#34;~\GitHub\posh-git [main ≡]&#xA;&gt; &#34; title=&#34;~\GitHub\posh-git [main ≡]&#xA;&gt; &#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can swap the order of the path and the Git status summary with the following setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$GitPromptSettings.DefaultPromptWriteStatusFirst = $true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will change the prompt to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dahlbyk/posh-git/wiki/images/PromptStatusFirst.png&#34; alt=&#34;[main ≡] ~\GitHub\posh-git&gt; &#34; title=&#34;[main ≡] ~\GitHub\posh-git&gt; &#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can combine these settings to customize the posh-git prompt fairly significantly. In the &lt;code&gt;DefaultPromptSuffix&lt;/code&gt; field below, we are prepending the PowerShell history id number before the prompt char &lt;code&gt;&amp;gt;&lt;/code&gt; e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$GitPromptSettings.DefaultPromptWriteStatusFirst = $true&#xA;$GitPromptSettings.DefaultPromptBeforeSuffix.Text = &#39;`n$([DateTime]::now.ToString(&#34;MM-dd HH:mm:ss&#34;))&#39;&#xA;$GitPromptSettings.DefaultPromptBeforeSuffix.ForegroundColor = 0x808080&#xA;$GitPromptSettings.DefaultPromptSuffix = &#39; $((Get-History -Count 1).id + 1)$(&#34;&amp;gt;&#34; * ($nestedPromptLevel + 1)) &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will change the prompt to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dahlbyk/posh-git/wiki/images/PromptCustom.png&#34; alt=&#34;[main ≡] ~\GitHub\posh-git&#xA;02-18 14:04:35 38&gt; &#34; title=&#34;[main ≡] ~\GitHub\posh-git&#xA;02-18 14:04:35 38&gt; &#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Finally, the path portion of the prompt can be contained within delimiters. For instance, if you would like the containing characters to be red, curly braces, the following settings can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$GitPromptSettings.BeforePath = &#39;{&#39;&#xA;$GitPromptSettings.AfterPath = &#39;}&#39;&#xA;$GitPromptSettings.BeforePath.ForegroundColor = &#39;Red&#39;&#xA;$GitPromptSettings.AfterPath.ForegroundColor = &#39;Red&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With these additional values, the previous prompt would become&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dahlbyk/posh-git/wiki/images/PromptCustomDelim.png&#34; alt=&#34;[main ≡] {~\GitHub\posh-git}&#xA;02-18 14:04:35 38&gt; &#34; title=&#34;[main ≡] {~\GitHub\posh-git}&#xA;02-18 14:04:35 38&gt; &#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prompt Layouts&lt;/h3&gt; &#xA;&lt;p&gt;For reference, the following layouts show the relative position of the various parts of the posh-git prompt. Note that &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; denotes parts of the prompt that may not appear depending on the status of settings and whether or not the current dir is in a Git repository. To simplify the layout, &lt;code&gt;DP&lt;/code&gt; is being used as an abbreviation for &lt;code&gt;DefaultPrompt&lt;/code&gt; settings.&lt;/p&gt; &#xA;&lt;p&gt;Default prompt layout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{DPPrefix}{BeforePath}{DPPath}{AfterPath}{PathStatusSeparator}&amp;lt;{BeforeStatus}{Status}{AfterStatus}&amp;gt;{DPBeforeSuffix}&amp;lt;{DPDebug}&amp;gt;&amp;lt;{DPTimingFormat}&amp;gt;{DPSuffix}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prompt layout when DefaultPromptWriteStatusFirst is set to $true:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{DPPrefix}&amp;lt;{BeforeStatus}{Status}{AfterStatus}&amp;gt;{PathStatusSeparator}{BeforePath}{DPPath}{AfterPath}{DPBeforeSuffix}&amp;lt;{DPDebug}&amp;gt;&amp;lt;{DPTimingFormat}&amp;gt;{DPSuffix}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Displaying Error Information&lt;/h3&gt; &#xA;&lt;p&gt;If you want to display the error status of the last command, you can use the values stored in the &lt;code&gt;$global:GitPromptValues&lt;/code&gt; object which includes the value of &lt;code&gt;$LastExitCode&lt;/code&gt; and &lt;code&gt;$?&lt;/code&gt; (represented by the property &lt;code&gt;DollarQuestion&lt;/code&gt;). Here is a prompt customization that displays a Red exit code value when &lt;code&gt;$LastExitCode&lt;/code&gt; is non-zero or a Red &lt;code&gt;!&lt;/code&gt; if &lt;code&gt;$?&lt;/code&gt; is &lt;code&gt;$false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;function global:PromptWriteErrorInfo() {&#xA;    if ($global:GitPromptValues.DollarQuestion) { return }&#xA;&#xA;    if ($global:GitPromptValues.LastExitCode) {&#xA;        &#34;`e[31m(&#34; + $global:GitPromptValues.LastExitCode + &#34;) `e[0m&#34;&#xA;    }&#xA;    else {&#xA;        &#34;`e[31m! `e[0m&#34;&#xA;    }&#xA;}&#xA;&#xA;$global:GitPromptSettings.DefaultPromptBeforeSuffix.Text = &#39;`n$(PromptWriteErrorInfo)$([DateTime]::now.ToString(&#34;MM-dd HH:mm:ss&#34;))&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a PowerShell command fails, this is the prompt you will see:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dahlbyk/posh-git/wiki/images/PromptError1.png&#34; alt=&#34;~\GitHub\posh-git [main ≡]&#xA;! 07-01 22:36:31&gt; &#34; title=&#34;~\GitHub\posh-git [main ≡]&#xA;! 07-01 22:36:31&gt; &#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;When an external application returns a non-zero exit code, 1 in this case, you will see the exit code in the prompt:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dahlbyk/posh-git/wiki/images/PromptError2.png&#34; alt=&#34;~\GitHub\posh-git [main ≡]&#xA;(1) 07-01 22:32:28&gt; &#34; title=&#34;~\GitHub\posh-git [main ≡]&#xA;(1) 07-01 22:32:28&gt; &#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that until you run an external application that sets &lt;code&gt;$LASTEXITCODE&lt;/code&gt; to zero or you manually set the variable to 0, you will see the exit code for any error. In addition to &lt;code&gt;LastExitCode&lt;/code&gt; and &lt;code&gt;DollarQuestion&lt;/code&gt;, &lt;code&gt;$global:GitPromptValues&lt;/code&gt; also has &lt;code&gt;IsAdmin&lt;/code&gt; and &lt;code&gt;LastPrompt&lt;/code&gt; properties. The &lt;code&gt;LastPrompt&lt;/code&gt; property contains the ANSI escaped string that was used for the last prompt. This can be useful for debugging your prompt display particularly when using ANSI/VT sequences.&lt;/p&gt; &#xA;&lt;h3&gt;$GitPromptScriptBlock&lt;/h3&gt; &#xA;&lt;p&gt;If you require even more customization than &lt;code&gt;$GitPromptSettings&lt;/code&gt; provides, you can create your own prompt function to show whatever information you want. See the &lt;a href=&#34;https://github.com/dahlbyk/posh-git/wiki/Customizing-Your-PowerShell-Prompt&#34;&gt;Customizing Your PowerShell Prompt&lt;/a&gt; wiki page for details.&lt;/p&gt; &#xA;&lt;p&gt;However, if you need a custom prompt just to perform some non-prompt logic, you can still use posh-git&#39;s prompt function to write out the prompt string. This can be done with the &lt;code&gt;$GitPromptScriptBlock&lt;/code&gt; variable as shown below e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# my profile.ps1&#xA;function prompt {&#xA;    # Your non-prompt logic here&#xA;&#xA;    # Have posh-git display its default prompt&#xA;    &amp;amp; $GitPromptScriptBlock&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you&#39;d like to write prompt text before and/or after the posh-git prompt, you can use posh-git&#39;s &lt;code&gt;Write-Prompt&lt;/code&gt; command as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# my profile.ps1&#xA;function prompt {&#xA;    # Your non-prompt logic here&#xA;    $prompt = Write-Prompt &#34;Text before posh-git prompt &#34; -ForegroundColor ([ConsoleColor]::Green)&#xA;    $prompt += &amp;amp; $GitPromptScriptBlock&#xA;    $prompt += Write-Prompt &#34;Text after posh-git prompt&#34; -ForegroundColor ([ConsoleColor]::Magenta)&#xA;    if ($prompt) { &#34;$prompt &#34; } else { &#34; &#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Based on work by&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keith Dahlby, &lt;a href=&#34;http://solutionizing.net/&#34;&gt;http://solutionizing.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mark Embling, &lt;a href=&#34;http://www.markembling.info/&#34;&gt;http://www.markembling.info/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jeremy Skinner, &lt;a href=&#34;http://www.jeremyskinner.co.uk/&#34;&gt;http://www.jeremyskinner.co.uk/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hausec/PowerZure</title>
    <updated>2022-07-13T01:52:34Z</updated>
    <id>tag:github.com,2022-07-13:/hausec/PowerZure</id>
    <link href="https://github.com/hausec/PowerZure" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PowerShell framework to assess Azure security&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/d5B0U0B.png&#34; alt=&#34;powerzure&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;For a list of functions, their usage, and more, check out &lt;a href=&#34;https://powerzure.readthedocs.io&#34;&gt;https://powerzure.readthedocs.io&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;What is PowerZure?&lt;/h2&gt; &#xA;&lt;p&gt;PowerZure is a PowerShell project created to assess and exploit resources within Microsoft’s cloud platform, Azure. PowerZure was created out of the need for a framework that can both perform reconnaissance &lt;strong&gt;and&lt;/strong&gt; exploitation of Azure, AzureAD, and the associated resources.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;Az&#34; &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/azure/?view=azps-4.2.0&#34;&gt;Azure PowerShell&lt;/a&gt; module is the primary module used in PowerZure, as it handles most requests interacting with Azure resources. The Az module interacts using the Azure REST API. It can be installed via PowerShell command &lt;code&gt;Install-Module -Name Az&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The AzureAD PowerShell Module is also used and is for handling AzureAD requests. The AzureAD module uses the Microsoft Graph API and can be installed via the PowerShell command &lt;code&gt;Install-Module -Name AzureAD&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;RTFM: &lt;a href=&#34;https://powerzure.readthedocs.io&#34;&gt;https://powerzure.readthedocs.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ipmo C:\path\to\PowerZure.psd1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have multiple subscriptions, you must set the main subscription with &lt;code&gt;Set-AzureSubscription&lt;/code&gt;. If you do not do this, things will fail.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;p&gt;You can type &lt;code&gt;Show-AzureCurrentUser&lt;/code&gt; to view the current signed-in user&#39;s roles in Azure and Azure AD.&lt;/p&gt; &#xA;&lt;p&gt;You can also type &lt;code&gt;Get-AzureTargets&lt;/code&gt; to compare your current signed-in user&#39;s roles and their scope to resources within Azure.&lt;/p&gt; &#xA;&lt;p&gt;For target finding, I recommend using &lt;a href=&#34;https://posts.specterops.io/introducing-bloodhound-4-0-the-azure-update-9b2b26c5e350&#34;&gt;AzureHound&lt;/a&gt;, the Azure component to &lt;a href=&#34;https://github.com/BloodHoundAD/BloodHound&#34;&gt;BloodHound&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Author &amp;amp; License&lt;/h2&gt; &#xA;&lt;p&gt;Author: Ryan Hausknecht (@haus3c)&lt;/p&gt; &#xA;&lt;p&gt;License: BSD-3&lt;/p&gt;</summary>
  </entry>
</feed>