<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-09T01:41:04Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>0xBallpoint/LOAD</title>
    <updated>2023-03-09T01:41:04Z</updated>
    <id>tag:github.com,2023-03-09:/0xBallpoint/LOAD</id>
    <link href="https://github.com/0xBallpoint/LOAD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lord Of Active Directory - automatic vulnerable active directory on AWS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xBallpoint/LOAD/main/docs/img/LOAD.jpg&#34; alt=&#34;load.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Intro&lt;/h1&gt; &#xA;&lt;p&gt;Based on AWS-Redteam-Lab and OCD GOAD&lt;/p&gt; &#xA;&lt;p&gt;The price for running the lab for 125 hours during one month is approximately 14$. With Free Tier you get 750h of EC2 per month, there is 6 machines so 125h. But you only get 30Gb of storage. So you need storage for the other 5 VMs : 30Gb * 5 = 150Gb = 14$ / month&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Just like the GOAD project, the installation is in two part :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;providing : it is made with terraform, it configures your AWS VPC, network, and EC2 (virtual machines)&lt;/li&gt; &#xA; &lt;li&gt;provisioning : it is made with ansible, it will install all the stuff to make the lab running like an active directory network&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Provisioning&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;So far the lab has only been tested on a linux machine, but it should work as well on macOS. Ansible has some problems with Windows hosts so I don&#39;t know about that.&lt;/p&gt; &#xA;&lt;p&gt;For the setup to work properly you need to install:&lt;/p&gt; &#xA;&lt;h2&gt;Ansible&lt;/h2&gt; &#xA;&lt;h3&gt;Ansible with docker&lt;/h3&gt; &#xA;&lt;p&gt;If you want to do the provisioning from a docker container you could launch the following command to prepare the container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker build -t loadansible .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ansible on your host&lt;/h3&gt; &#xA;&lt;p&gt;If you want to play ansible from your host you should launch the following commands :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a python &amp;gt;= 3.8 virtualenv&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install git&#xA;git clone git@github.com:0xBallpoint/LOAD.git&#xA;cd LOAD/ansible&#xA;sudo apt install python3.8-venv&#xA;python3.8 -m virtualenv .venv&#xA;source .venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install &lt;code&gt;ansible&lt;/code&gt; and &lt;code&gt;pywinrm&lt;/code&gt; in the .venv &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ansible following the extensive guide on their website &lt;a href=&#34;https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html&#34;&gt;ansible&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Tested with ansible-core (2.12)&lt;/li&gt; &#xA;   &lt;li&gt;pywinrm be sure you got the pywinrm package installed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m pip install --upgrade pip&#xA;python3 -m pip install ansible-core==2.12.6&#xA;python3 -m pip install pywinrm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install all the ansible-galaxy requirements &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ansible windows&lt;/li&gt; &#xA;   &lt;li&gt;ansible community.windows&lt;/li&gt; &#xA;   &lt;li&gt;ansible community.general&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ansible-galaxy install -r requirements.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Terraform&lt;/h2&gt; &#xA;&lt;p&gt;You need to install Terraform following their guide on their website &lt;a href=&#34;https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli&#34;&gt;hashicorp.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to manually install Terraform on Linux :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y gnupg software-properties-common&#xA;&#xA;# Install the HasiCorp GPG key&#xA;wget -O- https://apt.releases.hashicorp.com/gpg | \&#xA;    gpg --dearmor | \&#xA;    sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg&#xA;&#xA;# Verify the key&#39;s fingerprint&#xA;gpg --no-default-keyring \&#xA;    --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \&#xA;    --fingerprint&#xA;# It must match E8A0 32E0 94D8 EB4E A189 D270 DA41 8C88 A321 9F7B (from https://www.hashicorp.com/security)&#xA;&#xA;# Add the official HashiCorp repository to your system&#xA;echo &#34;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \&#xA;    https://apt.releases.hashicorp.com $(lsb_release -cs) main&#34; | \&#xA;    sudo tee /etc/apt/sources.list.d/hashicorp.list&#xA;&#xA;# Update, install, verify&#xA;sudo apt update&#xA;sudo apt install terraform&#xA;terraform -help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AWS CLI&lt;/h3&gt; &#xA;&lt;p&gt;You will need the AWS CLI to configure your access keys to AWS. You should follow the install guide on their website &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html&#34;&gt;docs.aws.amazon.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Linux :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl &#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&#34; -o &#34;awscliv2.zip&#34;&#xA;unzip awscliv2.zip&#xA;sudo ./aws/install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Start / Setup&lt;/h1&gt; &#xA;&lt;p&gt;The default domain will be middle-earth.local, on the subnet 10.0.1.0/24 and each machine has only been allocated with 1CPU and 1024MB of memory (t2.micro). If you want to change some of these performance settings you can modify the file : &lt;code&gt;terraform/ami-instance.tf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To have the lab up and running this is the commands you should do:&lt;/p&gt; &#xA;&lt;h2&gt;VMs creation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pwd&#xA;/opt/LOAD  # place yourself in the LOAD folder (where you cloned the project)&#xA;cd terraform # start with AWS configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The next steps show you how to configure your VMs on AWS:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;var.tf.example&lt;/code&gt; to &lt;code&gt;var.tf&lt;/code&gt; and change values :&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;REGION : change according to your favorite region&lt;/li&gt; &#xA;   &lt;li&gt;MANAGEMENT_IPS : add your IPv4 addresses that can access your lab&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On your AWS console, you should create a terraform user and get your AWS keys:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Go to &lt;a href=&#34;https://us-east-1.console.aws.amazon.com/iamv2/home#/users&#34;&gt;https://us-east-1.console.aws.amazon.com/iamv2/home#/users&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;In user name : &lt;code&gt;terraform&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Select AWS credential type : &lt;code&gt;Access key - Programmatic access&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add the permissions you want&lt;/li&gt; &#xA;   &lt;li&gt;Create user&lt;/li&gt; &#xA;   &lt;li&gt;Copy &lt;code&gt;Access key ID&lt;/code&gt; and &lt;code&gt;Secret access key&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the keys on your machine with AWS CLI:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aws configure --profile terraform&#xA;    AWS Access Key ID [None]: &amp;lt;access_key_id&amp;gt;&#xA;    AWS Secret Access Key [None]: &amp;lt;secret_access_key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Create SSH keys for terraform:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd LOAD&#xA;ssh-keygen -t rsa -N &#34;&#34; -b 2048 -C &#34;TerraformKey&#34; -f ./terraform/keys/TerraformKey&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run Terraform&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;terraform apply&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to destroy your lab :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;terraform destroy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;VMs provisioning&lt;/h2&gt; &#xA;&lt;p&gt;Everytime your EC2 instances start, you have to change their public IP in the &lt;code&gt;ansible/hosts&lt;/code&gt; file. Add the output of this command at the end of the file :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aws ec2 describe-instances --profile terraform --region eu-central-1 --query &#34;Reservations[*].Instances[*].{Name:Tags[?Key==&#39;Name&#39;].Value|[],PublicIP:PublicIpAddress}&#34; --filters &#34;Name=instance-state-name,Values=running&#34; --output text |tac |awk &#39;NR%2 ==0 {print $0}; NR%2 != 0 {print &#34;[&#34;tolower(substr($2,5))&#34;]&#34;};&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure the VMs use the command &lt;code&gt;ansible-playbook&lt;/code&gt;. Usual time to run : 1h30&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ansible-playbook main.yml # this will configure the vms in order to play ansible when the vms are ready&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the provisioning from the docker container run (you should be in the same folder as the Dockerfile. Not tested yet):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker run -ti --rm --network host -h loadansible -v $(pwd):/load -w /load/ansible loadansible ansible-playbook main.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes an error can occur during the install. Most of the times, you can just run the playbook again and it should work. In order to run playbooks one by one :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# The main.yml playbook is build in multiples parts. each parts can be re-run independently but the play order must be keep in cas you want to play one by one :&#xA;&#xA;ansible-playbook prepare.yml         # updates, passwords, dns settings...&#xA;ansible-playbook ad-servers.yml      # create servers configuration&#xA;ansible-playbook ad-trusts.yml       # create the trust relationships&#xA;ansible-playbook ad-data.yml         # import the ad datas : users/groups...&#xA;ansible-playbook ad-groups.yml       # set the rights and the group domains relations&#xA;ansible-playbook servers.yml         # create IIS and MSSQL&#xA;ansible-playbook adcs.yml            # add adcs and adcs templates&#xA;ansible-playbook ad-acl.yml          # set ACL&#xA;ansible-playbook linux.yml           # configure linux entrypoint with GLPI&#xA;&#xA;ansible-playbook security.yml        # enable or disable windows defender here&#xA;ansible-playbook vulnerabilities.yml # specifics vulns linked to the scenario are here&#xA;&#xA;# You can also install wireguard VPN on the linux host, for that check the VPN paragraph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to play only a specific part of a playbook, you can use tags (always put &lt;code&gt;data&lt;/code&gt; as a tag):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ansible-playbook servers.yml&#xA;ansible-playbook servers.yml --tags data,iis&#xA;ansible-playbook linux.yml --tags data,glpi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;AWS CLI&lt;/h1&gt; &#xA;&lt;p&gt;Some commands to help you manage your AWS lab (it&#39;s ugly but it works):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# aws cli profile : terraform&#xA;# region : eu-central-1 &#xA;&#xA;# Disable instance metadata&#xA;for i in $(aws ec2 --profile terraform --region eu-central-1 describe-instances --filters &#34;Name=tag:Name,Values=lab-*&#34; --query &#39;Reservations[].Instances[].InstanceId&#39; |cut -d &#39;&#34;&#39; -f2); do aws ec2 --profile terraform --region eu-central-1 modify-instance-metadata-options --http-endpoint disabled --instance-id $i --output json --no-cli-pager;done&#xA;&#xA;# Start instances&#xA;aws ec2 --profile terraform --region eu-central-1 start-instances --instance-ids `aws ec2 --profile terraform --region eu-central-1 describe-instances --filters &#34;Name=tag:Name,Values=lab-*&#34; &#34;Name=instance-state-name,Values=stopping,stopped&#34; --query &#39;Reservations[].Instances[].InstanceId&#39; --output text`&#xA;&#xA;# Get running instance and output it to ansible format&#xA;aws ec2 describe-instances --profile terraform --region eu-central-1 --query &#34;Reservations[*].Instances[*].{Name:Tags[?Key==&#39;Name&#39;].Value|[],PublicIP:PublicIpAddress}&#34; --filters &#34;Name=instance-state-name,Values=running&#34; --output text |tac |awk &#39;NR%2 ==0 {print $0}; NR%2 != 0 {print &#34;[&#34;tolower(substr($2,5))&#34;]&#34;};&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;VPN Server&lt;/h1&gt; &#xA;&lt;p&gt;Optionally, you can add a VPN server on the Linux host, and configure as many clients as you want. Start by generating keys for the VPN server and change the number of clients:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install wireguard&#xA;&#xA;# generate wireguard keys&#xA;privkey=$(wg genkey) sh -c &#39;echo &#34;&#xA;    server_privkey: $privkey&#xA;    server_pubkey: $(echo $privkey | wg pubkey)&#34;&#39;&#xA;&#xA;# encrypt server_privkey with ansible-vault and &#xA;ansible-vault encrypt_string --ask-vault-password --stdin-name server_privkey&#xA;&#xA;# Add the result to group_vars/all.yml&#xA;# You can change the number of client configuration files it will create. By default it creates 6 clients.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the VPN playbook with this command (it will change the clients keys everytime you run the command):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ansible-playbook --ask-vault-password vpn.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you get this error &lt;code&gt;Timeout (12s) waiting for privilege escalation prompt&lt;/code&gt;, just run the command again.&lt;/p&gt; &#xA;&lt;p&gt;You will find you client configuration file in &lt;code&gt;ansible/wireguard/lab_client[0-9].conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To connect to the VPN, you need to copy the client files with the private key to your local host in &lt;code&gt;/etc/wireguard/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You start the VPN connexion for the first client with :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo wg-quick up lab_client1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will get an IP in 10.0.20.0/24&lt;/p&gt; &#xA;&lt;h1&gt;Vulnerabilities&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xBallpoint/LOAD/main/docs/schema_middle-earth.png&#34; alt=&#34;schema&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LINUX&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;SHIRE (srv02)&#xA;    - GLPI SQLi&#xA;    - GLPI-htmlawed-CVE-2022-35914&#xA;&#xA;USERS&#xA;    - privesc user with vulnerable crontab&#xA;    - privesc root with password in bash_history and sudo nopasswd for /bin/systemctl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ERIADOR.MIDDLE-EARTH.LOCAL&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;RIVENDELL (dc02)&#xA;    - anonymous RPC (enum users, pass pol, groups / rpcclient)&#xA;    - brute force users names&#xA;&#xA;ELF&#xA;    - celebrian    Responder crack hash (bot 3min)&#xA;    - elrond:      Responder with NTLM relay domain admin (bot 5min)&#xA;&#xA;HOBBIT&#xA;    - bilbo:       password in description&#xA;    - pippin:      ASREPROAST &#xA;    - merry:       Constrained delegation with protocol transition / Kerberoasting&#xA;    - froddo:&#xA;    - sam:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MIDDLE-EARTH.LOCAL&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;MINAS-TIRITH(dc01)&#xA;    - Open share RW, LNK exploit&#xA;    - khamul.easterling : Open backup share, with GPO with cpassword, password increment&#xA;&#xA;MORIA (srv01)&#xA;    - MSSQL trusted link : donPapi to get sql_svc password&#xA;    - mitm6 SRV01 -&amp;gt; DC01&#xA;&#xA;MEN&#xA;    - denethor:    DOMAIN ADMIN&#xA;    - theoden:     ACL self-self-membership-on-group DOMAIN ADMIN&#xA;    - faramir:     ACL genericwrite-on-user Denethor&#xA;    - boromir:     ACL genericall-on-user Denethor&#xA;                   ACL forcechangepassword on Faramir &#xA;                   WriteDACL MEN &#xA;&#xA;FELLOWSHIP&#xA;    - legolas:     execute as user on MSSQL&#xA;                   KERBEROASTING &#xA;    - gimli:       ACL genericall-on-computer MORIA&#xA;                   ACL writeproperty-self-membership DOMAIN ADMIN&#xA;    - aragorn:     execute as login on mssql / administrator&#xA;    - gandalf:     mssql admin&#xA;                   group cross domain&#xA;                   mssql trusted link&#xA;                   ACL writeproperty-self-membership Domain Admins #TODO change for someone who is not administrator, he has DCSYNC (administrator?)&#xA;&#xA;ENTS&#xA;    - treebeard:   ACL writeproperty-on-group DOMAIN ADMIN&#xA;    - skinbark:    ACL genericall-on-group DOMAIN ADMIN&#xA;    - ginglas:     ACL write owner on group DOMAIN ADMIN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MORDOR.LOCAL&lt;/h2&gt; &#xA;&lt;h3&gt;Computers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;BARAD-DUR (dc03)&#xA;    - Coerced DC + ntlmrelayx to ldaps&#xA;    - ADCS ESC1, ESC2, ESC3, ESC4, ESC8&#xA;    - NTLM downgrade attack&#xA;&#xA;MINAS-MORGL (srv03)&#xA;    - IIS upload webshell&#xA;    - Privilege escalation Windows 2016 : SeImpersontePrivilege&#xA;&#xA;DARKFORCE&#xA;    - sauron:     domain admin MORDOR&#xA;    - saruman:    mssql admin / GenericAll on gothmog (shadow credentials) / GenericAll on ECS4&#xA;    - balrog:&#xA;&#xA;PRISONER&#xA;    - gollum:     mssql trusted link&#xA;                  password spray -&amp;gt; user=pwd&#xA;ORC&#xA;    - gothmog:    DOMAIN ADMIN&#xA;    - lurtz:&#xA;    - ugluk:&#xA;    - guritz:&#xA;&#xA;NAZGUL&#xA;    - angmar:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ToDo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; connect linux server to AD for SSH&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; RemotePotato0 on sam&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Change GLPI credentials automatically&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; LAPS&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>