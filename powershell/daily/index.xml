<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-11T01:43:16Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>d4rckh/im-a-sandbox</title>
    <updated>2023-03-11T01:43:16Z</updated>
    <id>tag:github.com,2023-03-11:/d4rckh/im-a-sandbox</id>
    <link href="https://github.com/d4rckh/im-a-sandbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;make your machine look like a sandbox/vm ðŸ¤–&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ImASandbox&lt;/h1&gt; &#xA;&lt;p&gt;Make your machine look like a sandbox/vm. This &lt;em&gt;might&lt;/em&gt; harden your computer against infections.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Have fake processes like &lt;code&gt;Wireshark.exe&lt;/code&gt;, &lt;code&gt;ProcessHacker.exe&lt;/code&gt;, etc. be created at startup&lt;/li&gt; &#xA; &lt;li&gt;Create VM software artifacts like dlls and services&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open Powershell as Administrator&lt;/li&gt; &#xA; &lt;li&gt;Disable Windows Defender&#39;s real time protection&lt;/li&gt; &#xA; &lt;li&gt;Clone the GitHub repostiroy&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;.\ImASandox.ps1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Save the script output to a file&lt;/li&gt; &#xA; &lt;li&gt;Enable Windows Defender back&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Removing&lt;/h2&gt; &#xA;&lt;p&gt;Currently, there isn&#39;t a way to revert the changes made. Fortunately, the script logs every change to the console, making it easy for you to track what got modified.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ouromoros/PowerGPT</title>
    <updated>2023-03-11T01:43:16Z</updated>
    <id>tag:github.com,2023-03-11:/ouromoros/PowerGPT</id>
    <link href="https://github.com/ouromoros/PowerGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Do anything in Windows PowerShell using natural language&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;PowerGPTâš¡&lt;/h2&gt; &#xA;&lt;p&gt;Writing shell scripts can be difficult and boring. This module will help you do any common task/batch processing in Windows terminal in seconds even if you know nothing about PowerShell.&lt;/p&gt; &#xA;&lt;p&gt;Just type and run &lt;code&gt;PowerGPT &amp;lt;your task&amp;gt;&lt;/code&gt; like this and the GPT model will do the rest for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ PowerGPT &#34;list all files in current folder with created date&#34;&#xA;Will execute script:&#xA;-----&#xA;Get-ChildItem | Select-Object Name, CreationTime&#xA;-----&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even for PowerShell experts, typing a few words and let the AI model do the dirty work certainly sounds like a better way to go ;)&lt;/p&gt; &#xA;&lt;p&gt;The script is implemented purely in PowerSell and packaged as a PowerShell module.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Module PowerGPT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You will need an OpenAI API key to use this module&lt;/strong&gt;. The command will ask input for the API key on first use. To reset the API key, use &lt;code&gt;-ResetConfig&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Basic Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ PowerGPT &#34;list all files in current folder with created date&#34;&#xA;Will execute script:&#xA;-----&#xA;Get-ChildItem | Select-Object Name, CreationTime&#xA;-----&#xA;continue?([y]es, [n]o): &#xA;&#xA;$ PowerGPT &#34;extract compressed.tar.gz&#34;&#xA;Will execute script:&#xA;-----&#xA;# Extract compressed.tar.gz in Windows using PowerShell&#xA;# First, check if the tar command is available&#xA;if (!(Get-Command tar -ErrorAction SilentlyContinue)) {&#xA;    # If not, install the tar command&#xA;    Invoke-WebRequest -Uri &#34;http://gnuwin32.sourceforge.net/downlinks/tar.exe.zip&#34; -OutFile &#34;tar.exe.zip&#34;&#xA;    Expand-Archive -Path &#34;tar.exe.zip&#34; -DestinationPath &#34;$env:ProgramFiles\GnuWin32&#34;&#xA;    # Add the tar command to the PATH&#xA;    $env:Path += &#34;;$env:ProgramFiles\GnuWin32&#34;&#xA;}&#xA;# Extract the compressed.tar.gz file&#xA;tar -xvzf compressed.tar.gz&#xA;-----&#xA;continue?([y]es, [n]o):&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ PowerGPT &#34;print the first line of all the files that begin with poet_ in current folder&#34;&#xA;Will execute script:&#xA;-----&#xA;Get-ChildItem -Path . -Filter &#34;poet_*&#34; | ForEach-Object {Get-Content $_.FullName | Select-Object -First 1}&#xA;-----&#xA;continue?([y]es, [n]o):&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For complex task, the tool will behave smartly and provide choices for user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ PowerGPT &#34;print first lines and last lines for each file in current folder&#34;&#xA;The description is too vague, do you mean:&#xA;[0] For each file in current directory, print the first line and then print the last line of the file.&#xA;[1] For each file in current directory, print the first line of the file. After that, for each file, print the last line of the file.&#xA;Choose one description that matches your task: : 1&#xA;Will execute script:&#xA;-----&#xA;Get-ChildItem | ForEach-Object {&#xA;    $file = $_.FullName&#xA;    Write-Host &#34;First line of $file:&#34;&#xA;    Get-Content $file -TotalCount 1&#xA;}&#xA;Get-ChildItem | ForEach-Object {&#xA;    $file = $_.FullName&#xA;    Write-Host &#34;Last line of $file:&#34;&#xA;    Get-Content $file -Tail 1&#xA;}&#xA;-----&#xA;continue?([y]es, [n]o)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible for it to write script using common library in other languages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ PowerGPT &#34;retrieve AzureDevops artifact for a build&#34; -ShellVariant C#&#xA;The description is a little vague, do you mean:&#xA;[0] Use AzureDevops REST API to retrieve the artifact for a build.&#xA;[1] Use AzureDevops SDK to retrieve the artifact for a build.&#xA;Choose one description that matches your task, or [n]o: 0&#xA;using System;&#xA;using System.Net.Http;&#xA;using System.Threading.Tasks;&#xA;&#xA;class Program&#xA;{&#xA;    static async Task Main(string[] args)&#xA;    {&#xA;        var organization = &#34;your_organization&#34;;&#xA;        var project = &#34;your_project&#34;;&#xA;        var buildId = &#34;your_build_id&#34;;&#xA;        var token = &#34;your_token&#34;;&#xA;&#xA;        var client = new HttpClient();&#xA;        client.DefaultRequestHeaders.Add(&#34;Authorization&#34;, $&#34;Bearer {token}&#34;);&#xA;&#xA;        var url = $&#34;https://dev.azure.com/{organization}/{project}/_apis/build/builds/{buildId}/artifacts?api-version=5.1&#34;;&#xA;        var response = await client.GetAsync(url);&#xA;        var content = await response.Content.ReadAsStringAsync();&#xA;        Console.WriteLine(content);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>