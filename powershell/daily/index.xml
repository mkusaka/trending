<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-01T01:33:05Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jdhitsolutions/PSScriptTools</title>
    <updated>2023-08-01T01:33:05Z</updated>
    <id>tag:github.com,2023-08-01:/jdhitsolutions/PSScriptTools</id>
    <link href="https://github.com/jdhitsolutions/PSScriptTools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ”§ ðŸ”¨ A set of PowerShell functions you might use to enhance your own functions and scripts or to facilitate working in the console. Most should work in both Windows PowerShell and PowerShell 7, even cross-platform. Any operating system limitations should be handled on a per command basis. The Samples folder contains demonstration script files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PSScriptTools Overview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/powershellgallery/v/PSScripttools.png?style=for-the-badge&amp;amp;logo=powershell&amp;amp;label=PowerShell%20Gallery&#34; alt=&#34;PSGallery Version&#34;&gt;&lt;img src=&#34;https://img.shields.io/powershellgallery/dt/PSScripttools.png?style=for-the-badge&amp;amp;label=Downloads&#34; alt=&#34;PSGallery Downloads&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Abstract&lt;/h2&gt; &#xA;&lt;p&gt;This module contains a collection of functions, variables, and format files that you can use to enhance your PowerShell scripting work or get more done from a PowerShell prompt with less typing. Most of the commands are designed to work cross-platform. Please post any questions, problems, or feedback in the &lt;a href=&#34;https://github.com/jdhitsolutions/PSScriptTools/issues&#34;&gt;Issues&lt;/a&gt; section of this module&#39;s GitHub repository. Feedback is greatly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;The contents of this file and other documentation can be viewed using the &lt;code&gt;Open-PSScriptToolsHelp&lt;/code&gt; command. You can also use &lt;code&gt;Get-PSScriptTools&lt;/code&gt; to see a summary of module commands.&lt;/p&gt; &#xA;&lt;p&gt;Please note that code samples have been formatted to &lt;em&gt;fit an *80-character&lt;/em&gt; width.* Some example code breaks lines without using line continuation characters. I&#39;m trusting that you can figure out how to run the example.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#General-Tools&#34;&gt;General Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#File-Tools&#34;&gt;File Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Editor-Integrations&#34;&gt;Editor Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Graphical-Tools&#34;&gt;Graphical Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Hashtable-Tools&#34;&gt;Hashtable Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Select-Functions&#34;&gt;Select Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Time-Functions&#34;&gt;Time Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Console-Utilities&#34;&gt;Console Utilities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Format-Functions&#34;&gt;Format Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Scripting-Tools&#34;&gt;Scripting Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Ansi-Tools&#34;&gt;ANSI Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Other-Module-Features&#34;&gt;Other Module Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Related-Modules&#34;&gt;Related Modules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#Compatibility&#34;&gt;Compatibility&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can get the current release from this repository or install this from the &lt;a href=&#34;https://powershellgallery.com&#34;&gt;PowerShell Gallery&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Install-Module PSScriptTools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in PowerShell 7:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Install-Module PSScriptTools [-scope CurrentUser] [-force]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting in v2.2.0, the module was restructured to better support &lt;code&gt;Desktop&lt;/code&gt; and &lt;code&gt;Core&lt;/code&gt; editions. However, starting with v2.13.0, the module design has reverted. All module commands will be exported. Anything that is platform-specific should be handled on a per-command basis. It is assumed you will be running this module in Windows PowerShell 5.1 or PowerShell 7.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to install this module from the PowerShell Gallery and not GitHub.&lt;/p&gt; &#xA;&lt;p&gt;To remove the module from your system, you can easily uninstall it with common PowerShell commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Module PSScriptTools | Remove-Module&#xA;Uninstall-Module PSScriptTools -AllVersions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;General Tools&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-MyCounter.md&#34;&gt;Get-MyCounter&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MyCounter&lt;/code&gt; is an enhanced version of the legacy &lt;code&gt;Get-Counter&lt;/code&gt; cmdlet, which is available on Windows platforms to retrieve performance counter data. One of the challenges with using &lt;code&gt;Get-Counter&lt;/code&gt; is how it formats results. The information may be easy to read on the screen, but it is cumbersome to use in a pipelined expression.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MyCounter&lt;/code&gt; takes the same information and writes a custom object to the pipeline that is easier to work with. You can pipe counters from &lt;code&gt;Get-Counter&lt;/code&gt; to &lt;code&gt;Get-MyCounter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-mycounter1.png&#34; alt=&#34;Get-MyCounter&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-mycounter2.png&#34; alt=&#34;Get-MyCounter Remote&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;One advantage of &lt;code&gt;Get-MyCounter&lt;/code&gt; over &lt;code&gt;Get-Counter&lt;/code&gt; is that the performance data is easier to work with.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-MyCounter &#39;\IPv4\datagrams/sec&#39; -MaxSamples 60 -SampleInterval 5 -computer SRV1 | Export-CSV  c:\work\srv1_ipperf.csv -NoTypeInformation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the performance counter is sampled 60 times every 5 seconds and the data is exported to a CSV file which could easily be opened in Microsoft Excel. Here&#39;s a sample of the output object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;Computername : SRV1&#xA;Category     : ipv4&#xA;Counter      : datagrams/sec&#xA;Instance     :&#xA;Value        : 66.0818918347238&#xA;Timestamp    : 11/4/2022 11:31:29 AM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MyCounter&lt;/code&gt; writes a custom object to the pipeline which has an associated formatting file with custom views.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-mycounter3.png&#34; alt=&#34;Get-MyCounter view&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-DirectoryInfo.md&#34;&gt;Get-DirectoryInfo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command, which has an alias of &lt;em&gt;dw&lt;/em&gt;, is designed to provide quick access to top-level directory information. The default behavior is to show the total number of files in the immediate directory. Although the command will also capture the total file size in the immediate directory. You can use the Depth parameter to recurse through a specified number of levels. The default displays use ANSI escape sequences.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/dw-1.png&#34; alt=&#34;Get-DirectoryInfo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The command output will use a wide format by default. However, other wide views are available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/dw-2.png&#34; alt=&#34;Get-DirectoryInfo MB&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use the object in other ways.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/dw-3.png&#34; alt=&#34;Get-DirectoryInfo table&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-FormatView.md&#34;&gt;Get-FormatView&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;PowerShell&#39;s formatting system includes several custom views that display objects in different ways. Unfortunately, this information is not readily available to a typical PowerShell user. This command displays the available views for a given object type.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-formatview.png&#34; alt=&#34;Get-FormatView&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This command has an alias of &lt;code&gt;gfv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Copy-PSFunction.md&#34;&gt;Copy-PSFunction&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command is designed to solve the problem when you want to run a function loaded locally on a remote computer. &lt;code&gt;Copy-PSFunction&lt;/code&gt; will copy a PowerShell function that is loaded in your current PowerShell session to a remote PowerShell session. The remote session must already be created. The copied function only exists remotely for the duration of the remote PowerShell session.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$s = New-PSSession -ComputerName win10 -cred $art&#xA;Copy-PSFunction Get-Status -Session $s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once copied, you might use &lt;code&gt;Invoke-Command&lt;/code&gt; to run it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-Command { Get-Status -AsString } -session $s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the function relies on external or additional files, you will have to copy them to the remote session separately.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-PSProfile.md&#34;&gt;Get-PSProfile&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command is designed for Windows systems and makes it easy to identify all possible PowerShell profile scripts. Including those for hosts such as VSCode or the PowerShell ISE. The command writes a custom object to the pipeline which has defined formatting. The default view is a table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-PSProfile&#xA;&#xA;&#xA;   Name: PowerShell&#xA;&#xA;Scope                  Path                                                                Exists&#xA;-----                  ----                                                                ------&#xA;AllUsersCurrentHost    C:\Program Files\PowerShell\7\Microsoft.PowerShell_profile.ps1      False&#xA;AllUsersAllHosts       C:\Program Files\PowerShell\7\profile.ps1                           False&#xA;CurrentUserAllHosts    C:\Users\Jeff\Documents\PowerShell\profile.ps1                      True&#xA;CurrentUserCurrentHost C:\Users\Jeff\Documents\PowerShell\Microsoft.PowerShell_profile.ps1 True&#xA;&#xA;&#xA;   Name: Windows PowerShell&#xA;&#xA;Scope                  Path                                                                        Exists&#xA;-----                  ----                                                                        ------&#xA;AllUsersCurrentHost    C:\WINDOWS\System32\WindowsPowerShell\v1.0\Microsoft.PowerShell_profile.ps1 True&#xA;AllUsersAllHosts       C:\WINDOWS\System32\WindowsPowerShell\v1.0\profile.ps1                      True&#xA;CurrentUserAllHosts    C:\Users\Jeff\Documents\WindowsPowerShell\profile.ps1                       True&#xA;CurrentUserCurrentHost C:\Users\Jeff\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1  True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a list view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; get-psprofile | Where-Object {$_.name -eq &#39;powershell&#39;} | Format-List&#xA;&#xA;&#xA;   Name: PowerShell&#xA;&#xA;&#xA;Scope        : AllUsersCurrentHost&#xA;Path         : C:\Program Files\PowerShell\7\Microsoft.PowerShell_profile.ps1&#xA;Exists       : False&#xA;LastModified :&#xA;&#xA;Scope        : AllUsersAllHosts&#xA;Path         : C:\Program Files\PowerShell\7\profile.ps1&#xA;Exists       : False&#xA;LastModified :&#xA;&#xA;Scope        : CurrentUserAllHosts&#xA;Path         : C:\Users\Jeff\Documents\PowerShell\profile.ps1&#xA;Exists       : True&#xA;LastModified : 9/9/2020 2:35:45 PM&#xA;&#xA;Scope        : CurrentUserCurrentHost&#xA;Path         : C:\Users\Jeff\Documents\PowerShell\Microsoft.PowerShell_profile.ps1&#xA;Exists       : True&#xA;LastModified : 9/9/2020 2:03:44 PM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-MyAlias.md&#34;&gt;Get-MyAlias&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Often you might define aliases for functions and scripts you use all of the time. It may be difficult sometimes to remember them all or to find them in the default &lt;code&gt;Get-Alias&lt;/code&gt; output. This command will list all currently defined aliases that are not part of the initial PowerShell state.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/gma-1.png&#34; alt=&#34;Get-MyAlias&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;These are all aliases defined in the current session that aren&#39;t part of the initial session state. You can filter aliases to make it easier to find those that aren&#39;t defined in a module. These aliases should be ones created in your stand-alone scripts or PowerShell profile.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/gma-2.png&#34; alt=&#34;Get-MyAlias No Module&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The PSScriptTools module also includes a custom formatting file for alias objects which you can use with &lt;code&gt;Get-Alias&lt;/code&gt; or &lt;code&gt;Get-MyAlias&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Alias | Sort-Object Source | Format-Table -View source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/alias-source.png&#34; alt=&#34;Alias source&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This command has an alias of &lt;code&gt;gma&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-ModuleCommand.md&#34;&gt;Get-ModuleCommand&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is an alternative to &lt;code&gt;Get-Command&lt;/code&gt; to make it easier to see at a glance what commands are contained within a module and what they can do. By default, &lt;code&gt;Get-ModuleCommand&lt;/code&gt; looks for loaded modules. Use &lt;code&gt;-ListAvailable&lt;/code&gt; to see commands in the module not currently loaded. Note that if the help file is malformed or missing, you might get oddly formatted results.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-ModuleCommand PSCalendar&#xA;&#xA;&#xA;       Verb: Get&#xA;&#xA;  Name                           Alias           Type      Synopsis&#xA;  ----                           -----           ----      --------&#xA;  Get-Calendar                   cal             Function  Displays a visua...&#xA;&#xA;&#xA;      Verb: Show&#xA;&#xA;  Name                           Alias           Type      Synopsis&#xA;  ----                           -----           ----      --------&#xA;  Show-Calendar                  scal            Function  Display a color...&#xA;  Show-GuiCalendar               gcal            Function  Display a WPF-b...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get module commands using the default formatted view. There is also a default view for &lt;code&gt;Format-List&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-PSScriptTools.md&#34;&gt;Get-PSScriptTools&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use this command to get a summary list of functions in this module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;&#xA;PS C:\&amp;gt; Get-PSScriptTools&#xA;&#xA;&#xA;   Verb: Add&#xA;&#xA;Name             Alias                Synopsis&#xA;----             -----                --------&#xA;Add-Border                            Create a text border around a string.&#xA;&#xA;&#xA;   Verb: Compare&#xA;&#xA;Name            Alias                Synopsis&#xA;----            -----                --------&#xA;Compare-Module  cmo                  Compare PowerShell module versions.&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s another way you could use this command to list functions with defined aliases in the PSScriptTools module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-PSScriptTools | Where-Object alias |&#xA;Select-Object Name,alias,Synopsis&#xA;&#xA;Name                   Alias Synopsis&#xA;----                   ----- --------&#xA;Compare-Module         cmo   Compare PowerShell module versions.&#xA;Convert-EventLogRecord clr   Convert EventLogRecords to structured objects&#xA;ConvertFrom-Text       cft   Convert structured text to objects.&#xA;ConvertFrom-UTCTime    frut  Convert a datetime value from universal&#xA;ConvertTo-LocalTime    clt   Convert a foreign time to local&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Convert-EventLogRecord.md&#34;&gt;Convert-EventLogRecord&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When you use &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.diagnostics/get-winevent?view=powershell-7&amp;amp;WT.mc_id=ps-gethelp&#34;&gt;Get-WinEvent&lt;/a&gt;, the results are objects you can work with in PowerShell. However, often, there is additional information that is part of the event log record, such as replacement strings, that are used to construct a message. This additional information is not readily exposed. You can use this command to convert the results of a &lt;code&gt;Get-WinEvent&lt;/code&gt; command into a PowerShell custom object with additional information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-WinEvent -FilterHashtable @{Logname=&#39;System&#39;;ID=7045} -MaxEvents 1|&#xA;Convert-EventLogRecord&#xA;&#xA;&#xA;LogName      : System&#xA;RecordType   : Information&#xA;TimeCreated  : 1/21/2020 3:49:46 PM&#xA;ID           : 7045&#xA;ServiceName  : Netwrix Account Lockout Examiner&#xA;ImagePath    : &#34;C:\Program Files (x86)\Netwrix\Account Lockout Examiner&#xA;              \ALEService.exe&#34;&#xA;ServiceType  : user mode service&#xA;StartType    : auto start&#xA;AccountName  : bovine320\jeff&#xA;Message      : A service was installed in the system.&#xA;&#xA;               Service Name:  Netwrix Account Lockout Examiner&#xA;               Service File Name:  &#34;C:\Program Files (x86)\Netwrix\Account&#xA;               Lockout Examiner\ALEService.exe&#34;&#xA;               Service Type:  user mode service&#xA;               Service Start Type:  auto start&#xA;               Service Account:  bovine320\jeff&#xA;Keywords     : {Classic}&#xA;Source       : Service Control Manager&#xA;Computername : Bovine320&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-WhoIs.md&#34;&gt;Get-WhoIs&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will retrieve WhoIs information from the ARIN database for a given IPv4 address.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-WhoIs 208.67.222.222 | Select-Object -Property *&#xA;&#xA;IP                     : 208.67.222.222&#xA;Name                   : OPENDNS-NET-1&#xA;RegisteredOrganization : Cisco OpenDNS, LLC&#xA;City                   : San Francisco&#xA;StartAddress           : 208.67.216.0&#xA;EndAddress             : 208.67.223.255&#xA;NetBlocks              : 208.67.216.0/21&#xA;Updated                : 3/2/2012 8:03:18 AM&#xA;&#xA;PS C:\&amp;gt; &#39;1.1.1.1&#39;,&#39;8.8.8.8&#39;,&#39;208.67.222.222&#39;| Get-WhoIs | Format-List&#xA;&#xA;IP                     : 1.1.1.1&#xA;Name                   : APNIC-1&#xA;RegisteredOrganization : Asia Pacific Network Information Centre&#xA;City                   : South Brisbane&#xA;StartAddress           : 1.0.0.0&#xA;EndAddress             : 1.255.255.255&#xA;NetBlocks              : 1.0.0.0/8&#xA;Updated                : 7/30/2010 9:23:43 AM&#xA;&#xA;IP                     : 8.8.8.8&#xA;Name                   : LVLT-GOGL-8-8-8&#xA;RegisteredOrganization : Google LLC&#xA;City                   : Mountain View&#xA;StartAddress           : 8.8.8.0&#xA;EndAddress             : 8.8.8.255&#xA;NetBlocks              : 8.8.8.0/24&#xA;Updated                : 3/14/2014 4:52:05 PM&#xA;&#xA;IP                     : 208.67.222.222&#xA;Name                   : OPENDNS-NET-1&#xA;RegisteredOrganization : Cisco OpenDNS, LLC&#xA;City                   : San Francisco&#xA;StartAddress           : 208.67.216.0&#xA;EndAddress             : 208.67.223.255&#xA;NetBlocks              : 208.67.216.0/21&#xA;Updated                : 3/2/2012 8:03:18 AM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This module includes a custom format file for these results.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Compare-Module.md&#34;&gt;Compare-Module&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this command to compare module versions between what is installed against an online repository like the PSGallery&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Compare-Module Platyps&#xA;&#xA;&#xA;Name             : platyPS&#xA;OnlineVersion    : 0.14.0&#xA;InstalledVersion : 0.14.0,0.12.0,0.11.1,0.10.2,0.9.0&#xA;PublishedDate    : 4/3/2019 12:46:30 AM&#xA;UpdateNeeded     : False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can compare and manage multiple modules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Compare-Module | Where UpdateNeeded |&#xA;Out-GridView -title &#34;Select modules to update&#34; -outputMode multiple |&#xA;Foreach { Update-Module $_.name }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example compares modules and sends the results to &lt;code&gt;Out-GridView&lt;/code&gt;. Use &lt;code&gt;Out-GridView&lt;/code&gt; as an object picker to decide what modules to update.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-WindowsVersion.md&#34;&gt;Get-WindowsVersion&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is a PowerShell version of the &lt;code&gt;winver.exe&lt;/code&gt; utility. This command uses PowerShell remoting to query the registry on a remote machine to retrieve Windows version information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-WindowsVersion -Computername win10,srv1,srv2 -Credential company\artd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-windowsversion.png&#34; alt=&#34;get windows version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The output has a default table view but there are other properties you might want to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-WindowsVersion | Select-Object *&#xA;&#xA;&#xA;ProductName    : Microsoft Windows 11 Pro&#xA;ReleaseVersion : 22H2&#xA;EditionID      : Professional&#xA;ReleaseID      : 2009&#xA;Build          : 22622.598&#xA;Branch         : ni_release&#xA;InstalledUTC   : 5/12/2022 1:01:53 PM&#xA;Computername   : WINDESK11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Beginning with version 2.45.0, &lt;code&gt;Get-WindowsVersion&lt;/code&gt; will use the command-line tool &lt;code&gt;systeminfo.exe&lt;/code&gt; to retrieve the operating system name. If this fails, then the registry value will be used. Windows 11 systems don&#39;t yet reflect with Windows 11 name in the registry.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-WindowsVersionString.md&#34;&gt;Get-WindowsVersionString&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This command is a variation of &lt;code&gt;Get-WindowsVersion&lt;/code&gt; that returns a formatted string with version information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-WindowsVersionString&#xA;PROSPERO Windows 10 Pro Version Professional (OS Build 19042.906)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/New-PSDriveHere.md&#34;&gt;New-PSDriveHere&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This function will create a new PSDrive at the specified location. The default is the current location, but you can specify any PSPath. by default, the function will take the last word of the path and use it as the name of the new PSDrive.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\users\jeff\documents\Enterprise Mgmt Webinar&amp;gt; new-psdrivehere -setlocation&#xA;PS Webinar:\&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the first word in the leaf location or specify something completely different.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;New-PSDrivehere \\ds416\backup\ Backup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-MyVariable.md&#34;&gt;Get-MyVariable&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This function will return all variables not defined by PowerShell or by this function itself. The default is to return all user-created variables from the global scope, but you can also specify a scope such as &lt;code&gt;script&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;, or a number 0 through 5.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-MyVariable&#xA;&#xA;NName Value                  Type&#xA;---- -----                  ----&#xA;a    bits                   ServiceController&#xA;dt   10/22/2020 10:49:38 AM DateTime&#xA;foo  123                    Int32&#xA;r    {1, 2, 3, 4...}        Object[]&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on the value and how PowerShell chooses to display it, you may not see the type.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/ConvertFrom-Text.md&#34;&gt;ConvertFrom-Text&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command can be used to convert text from a file or a command-line tool into objects. It uses a regular expression pattern with named captures and turns the result into a custom object. You have the option of specifying a type name in case you are using custom format files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; $arp = &#39;(?&amp;lt;IPAddress&amp;gt;(\d{1,3}\.){3}\d{1,3})\s+(?&amp;lt;MAC&amp;gt;(\w{2}-){5}\w{2})\s+(?&amp;lt;Type&amp;gt;\w+$)&#39;&#xA;PS C:\&amp;gt; arp -g -N 172.16.10.22 | Select-Object -skip 3 |&#xA;foreach {$_.Trim()} | ConvertFrom-Text $arp -TypeName arpData -NoProgress&#xA;&#xA;IPAddress          MAC                        Type&#xA;---------          ---                        ----&#xA;172.16.10.1        b6-fb-e4-16-41-be       dynamic&#xA;172.16.10.100      00-11-32-58-7b-10       dynamic&#xA;172.16.10.115      5c-aa-fd-0c-bf-fa       dynamic&#xA;172.16.10.120      5c-1d-d9-58-81-51       dynamic&#xA;172.16.10.159      3c-e1-a1-17-6d-0a       dynamic&#xA;172.16.10.162      00-0e-58-ce-8b-b6       dynamic&#xA;172.16.10.178      00-0e-58-8c-13-ac       dynamic&#xA;172.16.10.185      d0-04-01-26-b5-61       dynamic&#xA;172.16.10.186      e8-b2-ac-95-92-98       dynamic&#xA;172.16.10.197      fc-77-74-9f-f4-2f       dynamic&#xA;172.16.10.211      14-20-5e-93-42-fb       dynamic&#xA;172.16.10.222      28-39-5e-3b-04-33       dynamic&#xA;172.16.10.226      00-0e-58-e9-49-c0       dynamic&#xA;172.16.10.227      48-88-ca-e1-a6-00       dynamic&#xA;172.16.10.239      5c-aa-fd-83-f1-a4       dynamic&#xA;172.16.255.255     ff-ff-ff-ff-ff-ff        static&#xA;224.0.0.2          01-00-5e-00-00-02        static&#xA;224.0.0.7          01-00-5e-00-00-07        static&#xA;224.0.0.22         01-00-5e-00-00-16        static&#xA;224.0.0.251        01-00-5e-00-00-fb        static&#xA;224.0.0.252        01-00-5e-00-00-fc        static&#xA;239.255.255.250    01-00-5e-7f-ff-fa        static&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example uses a previously created and imported format.ps1xml file for the custom type name.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-PSWho.md&#34;&gt;Get-PSWho&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will provide a summary of relevant information for the current user in a PowerShell Session. You might use this to troubleshoot an end-user problem running a script or command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-PSWho&#xA;&#xA;User            : WINDESK11\Art&#xA;Elevated        : True&#xA;Computername    : WINDESK11&#xA;OperatingSystem : Microsoft Windows 11 Pro [64-bit]&#xA;OSVersion       : 10.0.22622&#xA;PSVersion       : 5.1.22621.436&#xA;Edition         : Desktop&#xA;PSHost          : ConsoleHost&#xA;WSMan           : 3.0&#xA;ExecutionPolicy : RemoteSigned&#xA;Culture         : English (United States)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also turn this into a text block using the &lt;code&gt;AsString&lt;/code&gt; parameter. This is helpful when you want to include the output in some type of report.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/Add-Border-ansi2.png&#34; alt=&#34;PSWho Report&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Find-CimClass.md&#34;&gt;Find-CimClass&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This function is designed to search an entire CIM repository for a class name. Sometimes, you may have a guess about a class name but not know the full name or even the correct namespace. &lt;code&gt;Find-CimClass&lt;/code&gt; will recursively search for a given class name. You can use wildcards and search remote computers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/find-cimclass.png&#34; alt=&#34;find-cimclass&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Out-VerboseTee.md&#34;&gt;Out-VerboseTee&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command is intended to let you see your verbose output and write the verbose messages to a log file. It will only work if the verbose pipeline is enabled, usually when your command is run with -Verbose. This function is designed to be used within your scripts and functions. You either have to hard-code a file name or find some other way to define it in your function or control script. You could pass a value as a parameter or set it as a &lt;code&gt;PSDefaultParameterValue&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This command has aliases of &lt;code&gt;Tee-Verbose&lt;/code&gt; and &lt;code&gt;tv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Begin {&#xA;    $log = New-RandomFilename -useTemp -extension log&#xA;    Write-Detail &#34;Starting $($MyInvocation.MyCommand)&#34; -Prefix begin |&#xA;    Tee-Verbose $log&#xA;    Write-Detail &#34;Logging verbose output to $log&#34; -prefix begin |&#xA;    Tee-Verbose -append&#xA;    Write-Detail &#34;Initializing data array&#34; -Prefix begin |&#xA;    Tee-Verbose $log -append&#xA;    $data = @()&#xA;} #begin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the command is run with -Verbose you will see the verbose output &lt;strong&gt;and&lt;/strong&gt; it will be saved to the specified log file.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Remove-Runspace.md&#34;&gt;Remove-Runspace&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Over the course of your PowerShell work, you may discover that some commands and scripts can leave behind runspaces such as &lt;code&gt;ConvertTo-WPFGrid&lt;/code&gt;. You may even deliberately be creating additional runspaces. These runspaces will remain until you exit your PowerShell session. Or use this command to cleanly close and dispose of runspaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-RunSpace | where ID -gt 1 | Remove-RunSpace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get all runspaces with an ID greater than 1, which is typically your current session, and remove the runspace.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-PSLocation.md&#34;&gt;Get-PSLocation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A simple function to get common locations. This can be useful with cross-platform scripting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/pslocation-win.png&#34; alt=&#34;windows locations&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/pslocation-linux.png&#34; alt=&#34;linux locations&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-PowerShellEngine.md&#34;&gt;Get-PowerShellEngine&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this command to quickly get the path to the PowerShell executable. In Windows, you should get a result like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-PowerShellEngine&#xA;C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But PowerShell on non-Windows platforms is a bit different:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS /home/jhicks&amp;gt; Get-PowerShellEngine&#xA;/opt/microsoft/powershell/7/pwsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also get detailed information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-powershellengine1.png&#34; alt=&#34;Windows PowerShell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-powershellengine2.png&#34; alt=&#34;PowerShell Core on Windows&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-powershellengine3.png&#34; alt=&#34;PowerShell Core on Linux&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Results will vary depending on whether you are running PowerShell on Windows nor non-Windows systems.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-PathVariable.md&#34;&gt;Get-PathVariable&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Over time, as you add and remove programs, your &lt;code&gt;%PATH%&lt;/code&gt; might change. An application may add a location but not remove it when you uninstall the application. This command makes it easier to identify locations and whether they are still good.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-PathVariable&#xA;&#xA;Scope   UserName Path                                                    Exists&#xA;-----   -------- ----                                                    ------&#xA;User    Jeff     C:\Program Files\kdiff3                                   True&#xA;User    Jeff     C:\Program Files (x86)\Bitvise SSH Client                 True&#xA;User    Jeff     C:\Program Files\OpenSSH                                  True&#xA;User    Jeff     C:\Program Files\Intel\WiFi\bin\                          True&#xA;User    Jeff     C:\Program Files\Common Files\Intel\WirelessCommon\       True&#xA;User    Jeff     C:\Users\Jeff\AppData\Local\Programs\Microsoft VS Co...   True&#xA;User    Jeff     C:\Program Files (x86)\Vale\                              True&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;File Tools&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-LastModifiedFile.md&#34;&gt;Get-LastModifiedFile&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Get files last modified within a certain interval. The default is 24 hours.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-LastModifiedFile -Path c:\work&#xA;&#xA;    Directory: C:\work&#xA;&#xA;Mode                 LastWriteTime         Length Name&#xA;----                 -------------         ------ ----&#xA;-a---          11/30/2021  1:52 PM           2010 a.txt&#xA;-a---          11/30/2021  1:52 PM           5640 b.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But you can specify other ranges.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-LastModifiedFile -Path c:\scripts -filter *.xml -Interval Months -IntervalCount 6&#xA;&#xA;    Directory: C:\Scripts&#xA;&#xA;Mode                 LastWriteTime         Length Name&#xA;----                 -------------         ------ ----&#xA;-a---           8/31/2021  7:12 PM          17580 DefaultDomainPolicy.xml&#xA;-a---           8/31/2021  7:12 PM          17290 PKIAutoEnroll.xml&#xA;-a---           8/31/2021  8:43 PM           9786 sample-gpo.xml&#xA;-a---           8/31/2021  7:24 PM          50062 TestUser.xml&#xA;-a---           6/22/2021  7:47 PM           4628 vaults.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might use this command with other PowerShell commands to get usage statistics.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-LastModifiedFile -Path c:\scripts -Recurse -Interval Years -IntervalCount 1 |&#xA;&amp;gt;&amp;gt; Group-Object {$_.LastWriteTime.month} |&#xA;&amp;gt;&amp;gt; Select-Object @{Name=&#34;Month&#34;;Expression = {&#34;{0:MMM}&#34; -f (Get-Date -Month $_.Name)}},&#xA;&amp;gt;&amp;gt; Count&#xA;&#xA;Month Count&#xA;----- -----&#xA;Jan     152&#xA;Feb     200&#xA;Mar     228&#xA;Apr     169&#xA;May     106&#xA;Jun      92&#xA;Jul      86&#xA;Aug     112&#xA;Sep     109&#xA;Oct     136&#xA;Nov     225&#xA;Dec     216&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-FileExtensionInfo.md&#34;&gt;Get-FileExtensionInfo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will search a given directory and produce a report of all files based on their file extension. This command is only available in PowerShell 7. The extension with the largest total size will be highlighted in color.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/gfei.png&#34; alt=&#34;Get-FileExtensionInfo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Test-EmptyFolder.md&#34;&gt;Test-EmptyFolder&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will test if a given folder path is empty of all files anywhere in the path. This includes hidden files. The command will return True even if there are empty sub-folders. The default output is True or False but you can use -PassThru to get more information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-ChildItem c:\work -Directory | Test-EmptyFolder -PassThru |&#xA;Where-Object {$_.IsEmpty} |&#xA;Foreach-Object { Remove-Item -LiteralPath $_.path -Recurse -force -whatif}&#xA;&#xA;What if: Performing the operation &#34;Remove Directory&#34; on target &#34;C:\work\demo3&#34;.&#xA;What if: Performing the operation &#34;Remove Directory&#34; on target &#34;C:\work\installers&#34;.&#xA;What if: Performing the operation &#34;Remove Directory&#34; on target &#34;C:\work\new&#34;.&#xA;What if: Performing the operation &#34;Remove Directory&#34; on target &#34;C:\work\sqlback&#34;.&#xA;What if: Performing the operation &#34;Remove Directory&#34; on target &#34;C:\work\todd&#34;.&#xA;What if: Performing the operation &#34;Remove Directory&#34; on target &#34;C:\work\[data]&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Find all empty sub-folders under C:\Work and pipe them to &lt;code&gt;Remove-Item&lt;/code&gt;. This is one way to remove empty folders. The example is piping objects to &lt;code&gt;ForEach-Object&lt;/code&gt; so that &lt;code&gt;Remove-Item&lt;/code&gt; can use the -LiteralPath parameter because &lt;code&gt;C:\work\[data]&lt;/code&gt; is a non-standard path.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-FolderSizeInfo.md&#34;&gt;Get-FolderSizeInfo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this command to quickly get the size of a folder. You also have the option to include hidden files. The command will measure all files in all subdirectories.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-FolderSizeInfo c:\work&#xA;&#xA;Computername    Path                        TotalFiles     TotalSize&#xA;------------    ----                        ----------     ---------&#xA;BOVINE320       C:\work                            931     137311146&#xA;&#xA;&#xA;PS C:\&amp;gt; Get-FolderSizeInfo c:\work -Hidden&#xA;&#xA;Computername    Path                         TotalFiles     TotalSize&#xA;------------    ----                         ----------     ---------&#xA;BOVINE320       C:\work                            1375     137516856&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command includes a format file with an additional view to display the total size in KB, MB, GB, or TB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-ChildItem D:\ -Directory | Get-FolderSizeInfo -Hidden |&#xA;Where-Object TotalSize -gt 1gb | Sort-Object TotalSize -Descending |&#xA;Format-Table -View gb&#xA;&#xA;Computername    Path                               TotalFiles   TotalSizeGB&#xA;------------    ----                              ----------   -----------&#xA;BOVINE320       D:\Autolab                               159      137.7192&#xA;BOVINE320       D:\VMDisks                                18      112.1814&#xA;BOVINE320       D:\ISO                                    17       41.5301&#xA;BOVINE320       D:\FileHistory                        104541       36.9938&#xA;BOVINE320       D:\Vagrant                                13       19.5664&#xA;BOVINE320       D:\Vms                                    83        5.1007&#xA;BOVINE320       D:\2016                                 1130        4.9531&#xA;BOVINE320       D:\video                                 125         2.592&#xA;BOVINE320       D:\blog                                21804        1.1347&#xA;BOVINE320       D:\pstranscripts                      122092        1.0914&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can use the &lt;code&gt;name&lt;/code&gt; view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-ChildItem c:\work -Directory | Get-FolderSizeInfo -Hidden |&#xA;Where-Object {$_.totalsize -ge 2mb} | Format-Table -view name&#xA;&#xA;&#xA;   Path: C:\work&#xA;&#xA;Name                    TotalFiles      TotalKB&#xA;----                    ----------      -------&#xA;A                               20    5843.9951&#xA;keepass                         15     5839.084&#xA;PowerShellBooks                 26    4240.3779&#xA;sunday                          47   24540.6523&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Optimize-Text.md&#34;&gt;Optimize-Text&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this command to clean and optimize content from text files. Sometimes text files have blank lines, or the content has trailing spaces. These sorts of issues can cause problems when passing the content to other commands.&lt;/p&gt; &#xA;&lt;p&gt;This command will strip out any lines that are blank or have nothing by white space, and trim leading and trailing spaces. The optimized text is then written back to the pipeline. Optionally, you can specify a property name. This can be useful when your text file is a list of computer names and you want to take advantage of pipeline binding.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-FileItem.md&#34;&gt;Get-FileItem&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A PowerShell version of the CLI &lt;code&gt;where.exe&lt;/code&gt; command. You can search with a simple or regex pattern.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; pswhere winword.exe -Path c:\ -Recurse -first&#xA;&#xA;C:\Program Files\Microsoft Office\root\Office16\WINWORD.EXE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you might see errors for directories where you don&#39;t have access permission. This is normal.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/New-CustomFileName.md&#34;&gt;New-CustomFileName&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will generate a custom file name based on a template string that you provide.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; New-CustomFileName %computername_%day%monthname%yr-%time.log&#xA;COWPC_28Nov19-142138.log&#xA;&#xA;PS C:\&amp;gt; New-CustomFileName %dayofweek-%####.dat&#xA;Tuesday-3128.dat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create a template string using any of these variables. Most of these should be self-explanatory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;%username&lt;/li&gt; &#xA; &lt;li&gt;%computername&lt;/li&gt; &#xA; &lt;li&gt;%year - 4-digit year&lt;/li&gt; &#xA; &lt;li&gt;%yr - 2-digit year&lt;/li&gt; &#xA; &lt;li&gt;%monthname - The abbreviated month name&lt;/li&gt; &#xA; &lt;li&gt;%month - The month number&lt;/li&gt; &#xA; &lt;li&gt;%dayofweek - The full name of the week day&lt;/li&gt; &#xA; &lt;li&gt;%day&lt;/li&gt; &#xA; &lt;li&gt;%hour&lt;/li&gt; &#xA; &lt;li&gt;%minute&lt;/li&gt; &#xA; &lt;li&gt;%time&lt;/li&gt; &#xA; &lt;li&gt;%string - A random string&lt;/li&gt; &#xA; &lt;li&gt;%guid&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also insert a random number using &lt;code&gt;%&lt;/code&gt; followed by a &lt;code&gt;#&lt;/code&gt; character for each digit you want.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;22 = %##&#xA;654321 = %######&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/New-RandomFilename.md&#34;&gt;New-RandomFilename&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Create a new random file name. The default is a completely random name, including the extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; New-RandomFilename&#xA;fykxecvh.ipw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But you can specify an extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; New-RandomFilename -extension dat&#xA;emevgq3r.dat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally you can create a random file name using the TEMP folder or your HOME folder. On Windows platforms, this will default to your Documents folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; New-RandomFilename -extension log -UseHomeFolder&#xA;C:\Users\Jeff\Documents\kbyw4fda.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux machines, it will be the home folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS /mnt/c/scripts&amp;gt; New-RandomFilename -home -Extension tmp&#xA;/home/jhicks/oces0epq.tmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/ConvertTo-Markdown.md&#34;&gt;ConvertTo-Markdown&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command is designed to accept pipelined output and create a markdown document. The pipeline output will be formatted as a text block or a table You can optionally define a title, content to appear before the output, and content to appear after the output. You can run a command like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Service Bits,Winrm |&#xA;Convertto-Markdown -title &#34;Service Check&#34; -precontent &#34;## $($env:computername)&#34;&#xA;-postcontent &#34;_report $(Get-Date)_&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which generates this markdown:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;    # Service Check&#xA;&#xA;    ## THINKX1&#xA;&#xA;    ```dos&#xA;&#xA;    Status   Name               DisplayName&#xA;    ------   ----               -----------&#xA;    Running  Bits               Background Intelligent Transfer Ser...&#xA;    Running  Winrm              Windows Remote Management (WS-Manag...&#xA;    ```&#xA;&#xA;    _report 09/25/2021 09:57:12_&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also have the option to format the output as a markdown table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;ConvertTo-Markdown -title &#34;OS Summary&#34; -PreContent &#34;## $($env:computername)&#34; -postcontent &#34;_Confidential_&#34; -AsTable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which creates this markdown output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# OS Summary&#xA;&#xA;## THINKX1-JH&#xA;&#xA;| ProductName | EditionID | ReleaseID | Build | Branch | InstalledUTC | Computername |&#xA;| ----------- | --------- | --------- | ----- | ------ | ------------ | ------------ |&#xA;| Windows 10 Pro | Professional | 2009 | 22000.376 | co_release | 08/10/2021 00:17:07 | THINKX1-JH |&#xA;&#xA;_Confidential_&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/convert-markdown-table.png&#34; alt=&#34;convertto-markdown table&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can create a list table with the property name in one columen and the value in the second column.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-WindowsVersion | ConvertTo-Markdown -title &#34;OS Summary&#34; -PreContent &#34;## $($env:computername)&#34; -postcontent &#34;_Confidential_&#34; -AsList&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# OS Summary&#xA;&#xA;## THINKX1-JH&#xA;&#xA;|    |    |&#xA;|----|----|&#xA;|ProductName|Windows 10 Pro|&#xA;|EditionID|Professional|&#xA;|ReleaseID|2009|&#xA;|Build|22000.376|&#xA;|Branch|co_release|&#xA;|InstalledUTC|8/10/2021 12:17:07 AM|&#xA;|Computername|THINKX1-JH|&#xA;&#xA;_Confidential_&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/convert-markdown-list.png&#34; alt=&#34;convertto-markdown list&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Because the function writes markdown to the pipeline you will need to pipe it to a command &lt;code&gt;Out-File&lt;/code&gt; to create a file.&lt;/p&gt; &#xA;&lt;h2&gt;Editor Integrations&lt;/h2&gt; &#xA;&lt;p&gt;Because this module is intended to make scripting easier for you, it adds a few editor-specific features if you import this module in either the PowerShell ISE or Visual Studio Code. The VS Code features assume you are using the integrated PowerShell terminal.&lt;/p&gt; &#xA;&lt;h3&gt;Insert ToDo&lt;/h3&gt; &#xA;&lt;p&gt;One such feature is the ability to insert ToDo statements into PowerShell files. If you are using the PowerShell ISE or VS Code and import this module, it will add the capability to insert a line like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;    # [12/13/2020 16:52:40] TODO: Add parameters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the PowerShell ISE, you will get a new menu under Add-Ons.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/todo-1.png&#34; alt=&#34;new menu&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use the menu or keyboard shortcut which will launch an input box.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/todo-2.png&#34; alt=&#34;input box&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The comment will be inserted at the current cursor location.&lt;/p&gt; &#xA;&lt;p&gt;In VS Code, access the command palette (Ctrl+Shift+P) and then &lt;code&gt;PowerShell: Show Additional Commands from PowerShell Modules&lt;/code&gt;. Select &lt;code&gt;Insert ToDo&lt;/code&gt; from the list, and you&#39;ll get the same input box. Note that this will only work for PowerShell files.&lt;/p&gt; &#xA;&lt;h3&gt;Set Terminal Location&lt;/h3&gt; &#xA;&lt;p&gt;Another feature is the ability to set your terminal location to match that of the currently active file. For example, if the current file is located in C:\Scripts\Foo and your terminal location is D:\Temp\ABC, you can quickly jump to the file location.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS D:\Temp\ABC\&amp;gt; sd&#xA;PS C:\Scripts\Foo\&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full command name is &lt;code&gt;Set-LocationToFile&lt;/code&gt; but you&#39;ll find it easier to use the &lt;code&gt;sd&lt;/code&gt; or &lt;code&gt;jmp&lt;/code&gt; aliases. This command will also clear the host.&lt;/p&gt; &#xA;&lt;h2&gt;Graphical Tools&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Invoke-InputBox.md&#34;&gt;Invoke-InputBox&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This function is a graphical replacement for &lt;code&gt;Read-Host&lt;/code&gt;. It creates a simple WPF form that you can use to get user input. The value of the text box will be written to the pipeline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$name = Invoke-InputBox -Prompt &#34;Enter a user name&#34; -Title &#34;New User Setup&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/ibx-1.png&#34; alt=&#34;input box&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also capture a secure string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-Inputbox -Prompt &#34;Enter a password for $Name&#34; -AsSecureString&#xA; -BackgroundColor red&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/ibx-2.png&#34; alt=&#34;secure input box&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This example also demonstrates that you can change the form&#39;s background color. This function will &lt;strong&gt;not&lt;/strong&gt; work in PowerShell Core.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/New-WPFMessageBox.md&#34;&gt;New-WPFMessageBox&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This function creates a Windows Presentation Foundation (WPF) based message box. This is intended to replace the legacy MsgBox function from VBScript and the Windows Forms library. The command uses a set of predefined button sets, each of which will close the form and write a value to the pipeline.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OK = 1&lt;/li&gt; &#xA; &lt;li&gt;Cancel = 0&lt;/li&gt; &#xA; &lt;li&gt;Yes = $True&lt;/li&gt; &#xA; &lt;li&gt;No = $False&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also create an ordered hashtable of your own buttons and values. It is assumed you will typically use this function in a script where you can capture the output and take some action based on the value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;New-WPFMessageBox -Message &#34;Are you sure you want to do this?&#34;&#xA;-Title Confirm -Icon Question -ButtonSet YesNo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/wpfbox-1.png&#34; alt=&#34;A YesNo WPF Message box&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also create your own custom button set as well as modify the background color.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;New-WPFMessageBox -Message &#34;Select a system option from these choices:&#34;&#xA;-Title &#34;You Decide&#34; -Background cornsilk -Icon Warning&#xA;-CustomButtonSet ([ordered]@{&#34;Reboot&#34;=1;&#34;Shutdown&#34;=2;&#34;Cancel&#34;=3})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/wpfbox-2.png&#34; alt=&#34;A customized WPF Message box&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/ConvertTo-WPFGrid.md&#34;&gt;ConvertTo-WPFGrid&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command is an alternative to &lt;code&gt;Out-GridView&lt;/code&gt;. It works much the same way. Run a PowerShell command and pipe it to this command. The output will be displayed in an auto-sized data grid. You can click on column headings to sort. You can resize columns and you can re-order columns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Eventlog -list -ComputerName DOM1,SRV1,SRV2 |&#xA;Select Machinename,Log,MaximumKilobytes,Overflowaction,&#xA;@{Name=&#34;RetentionDays&#34;;Expression={$_.MinimumRetentionDays}},&#xA;@{Name=&#34;Entries&#34;;Expression = {$_.entries.count}} |&#xA;ConvertTo-WPFGrid -Title &#34;Event Log Report&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/wpfgrid.png&#34; alt=&#34;Displaying Eventlog Info&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also automatically refresh the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Process | Sort-Object WS -Descending |&#xA;Select-Object -first 20 ID,Name,WS,VM,PM,Handles,StartTime |&#xA;ConvertTo-WPFGrid -Refresh -timeout 20 -Title &#34;Top Processes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/wpfgrid2.png&#34; alt=&#34;Displaying Top Processes&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that in v2.4.0 the form layout was modified and may not be reflected in these screenshots.&lt;/p&gt; &#xA;&lt;h2&gt;Hashtable Tools&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Convert-CommandToHashtable.md&#34;&gt;Convert-CommandToHashtable&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command is intended to convert a long PowerShell expression with named parameters into a splatting alternative.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Convert-CommandToHashtable -Text &#34;get-eventlog -listlog&#xA;-computername a,b,c,d -erroraction stop&#34;&#xA;&#xA;$paramHash = @{&#xA;  listlog = $True&#xA;   computername = &#34;a&#34;,&#34;b&#34;,&#34;c&#34;,&#34;d&#34;&#xA;   erroraction = &#34;stop&#34;&#xA;}&#xA;&#xA;Get-EventLog @paramHash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The idea is that you can copy the output of the command into a script file.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Convert-HashtableString.md&#34;&gt;Convert-HashtableString&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This function is similar to &lt;code&gt;Import-PowerShellDataFile&lt;/code&gt;. But where that command can only process a file, this command will take any hashtable-formatted string and convert it into an actual hashtable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-Content c:\work\test.psd1 | Unprotect-CMSMessage |&#xA;Convert-HashtableString&#xA;&#xA;Name                           Value&#xA;----                           -----&#xA;CreatedBy                      BOVINE320\Jeff&#xA;CreatedAt                      10/02/2020 21:28:47 UTC&#xA;Computername                   Think51&#xA;Error&#xA;Completed                      True&#xA;Date                           10/02/2020 21:29:35 UTC&#xA;Scriptblock                    restart-service spooler -force&#xA;CreatedOn                      BOVINE320&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test.psd1 file is protected as a CMS Message. In this example, the contents are decoded as a string which is then in turn converted into an actual hashtable.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Convert-HashtableToCode.md&#34;&gt;Convert-HashtableToCode&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this command to convert a hashtable into its text or string equivalent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; $h = @{Name=&#34;SRV1&#34;;Asset=123454;Location=&#34;Omaha&#34;}&#xA;PS C:\&amp;gt; Convert-HashtableToCode $h&#xA;@{&#xA;        Name = &#39;SRV1&#39;&#xA;        Asset = 123454&#xA;        Location = &#39;Omaha&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Convert a hashtable object to a string equivalent that you can copy into your script.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/ConvertTo-Hashtable.md&#34;&gt;ConvertTo-Hashtable&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will take an object and create a hashtable based on its properties. You can have the hashtable exclude some properties as well as properties that have no value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-Process -id $pid | Select-Object name,id,handles,workingset |&#xA;ConvertTo-Hashtable&#xA;&#xA;Name                           Value&#xA;----                           -----&#xA;WorkingSet                     418377728&#xA;Name                           powershell_ise&#xA;Id                             3456&#xA;Handles                        958&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Join-Hashtable.md&#34;&gt;Join-Hashtable&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will combine two hash tables into a single hash table. &lt;code&gt;Join-Hashtable&lt;/code&gt; will test for duplicate keys. If any of the keys from the first, or primary hashtable are found in the secondary hashtable, you will be prompted for which to keep. Or you can use &lt;code&gt;-Force&lt;/code&gt; which will always keep the conflicting key from the first hashtable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; $a=@{Name=&#34;Jeff&#34;;Count=3;Color=&#34;Green&#34;}&#xA;PS C:\&amp;gt; $b=@{Computer=&#34;HAL&#34;;Enabled=$True;Year=2020;Color=&#34;Red&#34;}&#xA;PS C:\&amp;gt; Join-Hashtable $a $b&#xA;Duplicate key Color&#xA;A Green&#xA;B Red&#xA;Which key do you want to KEEP \[AB\]?: A&#xA;&#xA;Name                           Value&#xA;----                           -----&#xA;Year                           2020&#xA;Name                           Jeff&#xA;Enabled                        True&#xA;Color                          Green&#xA;Computer                       HAL&#xA;Count                          3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Rename-Hashtable.md&#34;&gt;Rename-Hashtable&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command allows you to rename a key in an existing hashtable or ordered dictionary object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; $h = Get-Service Spooler | ConvertTo-Hashtable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The hashtable in $h has a Machinename property which can be renamed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Rename-Hashtable -Name h -Key Machinename -NewKey Computername&#xA;-PassThru&#xA;&#xA;Name                           Value&#xA;----                           -----&#xA;ServiceType                    Win32OwnProcess, InteractiveProcess&#xA;ServiceName                    Spooler&#xA;Container&#xA;CanPauseAndContinue            False&#xA;RequiredServices               {RPCSS, http}&#xA;ServicesDependedOn             {RPCSS, http}&#xA;Computername                   .&#xA;CanStop                        True&#xA;StartType                      Automatic&#xA;Site&#xA;ServiceHandle                  SafeServiceHandle&#xA;DisplayName                    Print Spooler&#xA;CanShutdown                    False&#xA;Status                         Running&#xA;Name                           Spooler&#xA;DependentServices              {Fax}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Select Functions&lt;/h2&gt; &#xA;&lt;p&gt;The module contains several functions that simplify the use of &lt;code&gt;Select-Object&lt;/code&gt; or &lt;code&gt;Select-Object&lt;/code&gt; in conjunction with &lt;code&gt;Where-Object&lt;/code&gt;. The commands are intended to make it easier to select objects in a pipelined expression. The commands include features so that you can sort the incoming objects on a given property first.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Select-First.md&#34;&gt;Select-First&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Normally, you might run a command with &lt;code&gt;Select-Object&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Process | Select-Object -first 5 -Property WS -Descending&#xA;&#xA;Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName&#xA;-------  ------    -----      -----     ------     --  -- -----------&#xA;    696      89   615944     426852     391.97   7352   0 sqlservr&#xA;    541      78   262532     274576     278.41   6208   8 Code&#xA;   1015      70   227824     269504     137.39  16484   8 powershell_ise&#xA;   1578     111   204852     254640      98.58  21332   8 firefox&#xA;    884      44   221872     245712     249.23  12456   8 googledrivesync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To streamline the process a bit, you can use &lt;code&gt;Select-First&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Process | Select-First 5 -Property WS -Descending&#xA;&#xA;Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName&#xA;-------  ------    -----      -----     ------     --  -- -----------&#xA;    696      89   615944     426852     391.97   7352   0 sqlservr&#xA;    541      78   262532     274576     278.41   6208   8 Code&#xA;   1015      70   227824     269504     137.39  16484   8 powershell_ise&#xA;   1578     111   204852     254640      98.58  21332   8 firefox&#xA;    884      44   221872     245712     249.23  12456   8 googledrivesync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even better, use the command alias &lt;em&gt;first&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Process | Sort-Object ws -Descending | first 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Select-Last.md&#34;&gt;Select-Last&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can perform a similar operation using &lt;code&gt;Select-Last&lt;/code&gt; or its alias &lt;em&gt;last&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-ChildItem -Path c:\scripts\*.ps1 | Sort-Object lastwritetime | last 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Select-After.md&#34;&gt;Select-After&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Select-After&lt;/code&gt; is a simplified version of &lt;code&gt;Select-Object&lt;/code&gt;. The premise is that you can pipe a collection of objects to this command and select objects after a given datetime, based on a property, like LastWriteTime, which is the default. This command has an alias of &lt;em&gt;after&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-ChildItem -Path c:\scripts\ -file | after 11/1/2020&#xA;&#xA;&#xA;    Directory: C:\Scripts&#xA;&#xA;Mode                 LastWriteTime         Length Name&#xA;----                 -------------         ------ ----&#xA;-a---           11/2/2020 11:08 AM           3522 Get-ServiceWPFRunspace.ps1&#xA;-a---           11/1/2020 11:05 AM           5321 Trace.ps1&#xA;-a---           11/2/2020 11:39 AM           2321 WinFormDemo2.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can specify property depending on the object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Process | after (Get-Date).Addminutes(-1) -Property StartTime&#xA;&#xA; NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName&#xA; ------    -----      -----     ------      --  -- -----------&#xA;     13     3.14      13.73       0.05   19156   2 notepad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is selecting all processes that started within the last minute.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Select-Before.md&#34;&gt;Select-Before&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Select-Before&lt;/code&gt; is the opposite of &lt;code&gt;Select-After&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-ChildItem -Path c:\scripts -file | before 1/1/2008&#xA;&#xA;&#xA;    Directory: C:\Scripts&#xA;&#xA;Mode                 LastWriteTime         Length Name&#xA;----                 -------------         ------ ----&#xA;-a---           12/5/2007  2:19 PM          29618 1000MaleNames.txt&#xA;-a---            4/8/2006 10:27 AM           3779 530215.ps1&#xA;-a---            8/7/2005  1:00 AM           4286 ADUser.wsc&#xA;-a---           9/18/2006  9:27 PM           1601 allserviceinfo.ps1&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As with &lt;code&gt;Select-After&lt;/code&gt;, you can specify a property to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-AdUser -filter * -Properties WhenCreated |&#xA;Before 11/1/2020 -Property WhenCreated | Select-Object Name,WhenCreated&#xA;&#xA;&#xA;Name           WhenCreated&#xA;----           -----------&#xA;Administrator  10/26/2020 6:47:39 PM&#xA;Guest          10/26/2020 6:47:39 PM&#xA;DefaultAccount 10/26/2020 6:47:39 PM&#xA;krbtgt         10/26/2020 6:50:47 PM&#xA;MaryL          10/26/2020 6:56:24 PM&#xA;ArtD           10/26/2020 6:56:24 PM&#xA;AprilS         10/26/2020 6:56:25 PM&#xA;MikeS          10/26/2020 6:56:25 PM&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Select-Newest.md&#34;&gt;Select-Newest&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Select-Newest&lt;/code&gt; is designed to make it easier to select X number of objects based on a datetime property. The default property value is LastWriteTime.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-ChildItem -Path d:\temp -file | newest 10&#xA;&#xA;&#xA;    Directory: D:\temp&#xA;&#xA;Mode              LastWriteTime        Length Name&#xA;----              -------------        ------ ----&#xA;-a---        11/4/2020  5:12 PM       5149954 watcherlog.txt&#xA;-a---        11/3/2020 10:00 PM          3215 DailyIncremental_202011031000.txt&#xA;-a---        11/2/2020 10:00 PM         11152 DailyIncremental_202011021000.txt&#xA;-a---        11/2/2020  3:40 PM           852 t.ps1&#xA;-a---        11/1/2020 10:00 PM          2376 DailyIncremental_202011011000.txt&#xA;-a---       10/31/2020 10:00 PM          3150 DailyIncremental_202010311000.txt&#xA;-a---       10/30/2020 10:07 PM         17844 WeeklyFull_202010301000.txt&#xA;-a---       10/30/2020  1:00 PM        208699 datatfile-5.png&#xA;-a---       10/30/2020 12:57 PM       1264567 datatfile-4.png&#xA;-a---       10/30/2020 12:27 PM        421341 datatfile-3.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or specify a property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-ADUser -filter * -Properties WhenCreated |&#xA; Select-Newest 5 -Property WhenCreated |&#xA; Select-object DistinguishedName,WhenCreated&#xA;&#xA;DistinguishedName                                WhenCreated&#xA;-----------------                                -----------&#xA;CN=Marcia Brady,OU=Employees,DC=Company,DC=Pri   11/4/2020 3:15:27 PM&#xA;CN=Gladys Kravitz,OU=Employees,DC=Company,DC=Pri 11/4/2020 3:14:45 PM&#xA;CN=S.Talone,OU=Employees,DC=Company,DC=Pri       10/26/2020 3:56:31 PM&#xA;CN=A.Fieldhouse,OU=Employees,DC=Company,DC=Pri   10/26/2020 3:56:31 PM&#xA;CN=K.Moshos,OU=Employees,DC=Company,DC=Pri       10/26/2020 3:56:31 PM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Select-Oldest.md&#34;&gt;Select-Oldest&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Select-Oldest&lt;/code&gt; is the opposite of &lt;code&gt;Select-Newest&lt;/code&gt; and works the same way.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Process | newest 5 -Property StartTime&#xA;&#xA;Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName&#xA;-------  ------    -----      -----     ------     --  -- -----------&#xA;    145       8     1692       7396       0.02   9676   0 SearchFilterHost&#xA;    344      13     2604      13340       0.02  33668   0 SearchProtocolHost&#xA;    114       7     1340       6116       0.02  35028   0 svchost&#xA;    140       8     2684       8796       0.03  32552   0 svchost&#xA;    118       8     1580       7476       0.02  35668   0 svchost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These custom Select commands are not necessarily designed for performance and there may be better ways to achieve the same results from these examples.&lt;/p&gt; &#xA;&lt;h2&gt;Time Functions&lt;/h2&gt; &#xA;&lt;p&gt;The module has a couple of date and time-related commands.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/ConvertTo-UTCTime.md&#34;&gt;ConvertTo-UTCTime&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convert a local datetime value to universal time. The default is to convert the current time, but you can specify a datetime value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; ConvertTo-UTCTime&#xA;&#xA;Monday, March 4, 2019 5:51:26 PM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Convert a datetime that is UTC-5 to universal time.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/ConvertFrom-UTCTime.md&#34;&gt;ConvertFrom-UTCTime&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; ConvertFrom-UTCTime &#34;3/4/2019 6:00PM&#34;&#xA;&#xA;Monday, March 4, 2019 1:00:00 PM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Convert a universal datetime to the local time.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-MyTimeInfo.md&#34;&gt;Get-MyTimeInfo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Display a group of time settings for a collection of locations. This command is a PowerShell equivalent of a world clock. It will display a datetime value against a collection of locations. You can specify an ordered hashtable of locations and time zones. You can run a command like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[System.TimeZoneinfo]::GetSystemTimeZones() | Out-GridView&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-TimeZone -ListAvailable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To discover time zone names. Note that the ID is case-sensitive. You can then use the command like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-MyTimeInfo -Locations ([ordered]@{Seattle=&#34;Pacific Standard time&#34;;&#xA;&#34;New Zealand&#34; = &#34;New Zealand Standard Time&#34;}) -HomeTimeZone&#xA;&#34;central standard time&#34; | Select Now,Home,Seattle,&#39;New Zealand&#39;&#xA;&#xA;Now                 Home                 Seattle              New Zealand&#xA;---                 ----                 -------              -----------&#xA;3/4/2019 1:18:36 PM 3/4/2019 12:18:36 PM 3/4/2019 10:18:36 AM 3/5/2019 7:18:36 AM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a handy command when traveling and your laptop is using a locally derived time and you want to see the time in other locations. It is recommended that you set a PSDefaultParameter value for the HomeTimeZone parameter in your PowerShell profile.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/ConvertTo-LocalTime.md&#34;&gt;ConvertTo-LocalTime&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;It can be tricky sometimes to see a time in a foreign location and try to figure out the local time. This command attempts to simplify this process. In addition to the remote time, you need the base UTC offset for the remote location.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-TimeZone -ListAvailable | Where-Object id -match Hawaii&#xA;&#xA;&#xA;Id                         : Hawaiian Standard Time&#xA;DisplayName                : (UTC-10:00) Hawaii&#xA;StandardName               : Hawaiian Standard Time&#xA;DaylightName               : Hawaiian Daylight Time&#xA;BaseUtcOffset              : -10:00:00&#xA;SupportsDaylightSavingTime : False&#xA;&#xA;PS C:\&amp;gt; ConvertTo-LocalTime &#34;10:00AM&#34; -10:00:00&#xA;&#xA;Thursday, March 14, 2019 4:00:00 PM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the user is first determining the UTC offset for Hawaii. Then 10:00 AM, in say Honolulu, is converted to local time, which in this example is in the Eastern Time zone.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-TZList.md&#34;&gt;Get-TZList&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command uses a free and publicly available REST API offered by &lt;a href=&#34;http://worldtimeapi.org&#34;&gt;http://worldtimeapi.org&lt;/a&gt; to get a list of time zone areas. You can get a list of all areas or by geographic location. Use &lt;code&gt;Get-TZData&lt;/code&gt; to then retrieve details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-TZList Australia&#xA;Australia/Adelaide&#xA;Australia/Brisbane&#xA;Australia/Broken_Hill&#xA;Australia/Currie&#xA;Australia/Darwin&#xA;Australia/Eucla&#xA;Australia/Hobart&#xA;Australia/Lindeman&#xA;Australia/Lord_Howe&#xA;Australia/Melbourne&#xA;Australia/Perth&#xA;Australia/Sydney&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-TZData.md&#34;&gt;Get-TZData&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command also uses the API from worldtimeapi.org to retrieve details about a given time zone area.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-TZData Australia/Hobart&#xA;&#xA;Timezone                     Label        Offset     DST                  Time&#xA;--------                     -----        ------     ---                  ----&#xA;Australia/Hobart             AEDT       11:00:00    True  3/16/2019 3:43:14 AM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Time value is the current time at the remote location. The command presents a formatted object but you can also get the raw data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-TZData Australia/Hobart -Raw&#xA;&#xA;&#xA;week_number  : 11&#xA;utc_offset   : +11:00&#xA;unixtime     : 1552668285&#xA;timezone     : Australia/Hobart&#xA;dst_until    : 2019-04-06T16:00:00+00:00&#xA;dst_from     : 2020-10-06T16:00:00+00:00&#xA;dst          : True&#xA;day_of_year  : 75&#xA;day_of_week  : 6&#xA;datetime     : 2019-03-16T03:44:45.689655+11:00&#xA;abbreviation : AEDT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/ConvertTo-LexicalTime.md&#34;&gt;ConvertTo-LexicalTime&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When working with timespans or durations in XML files, such as those from scheduled tasks, the format is a little different than what you might expect. The specification is described at &lt;a href=&#34;https://www.w3.org/TR/xmlschema-2/#duration&#34;&gt;https://www.w3.org/TR/xmlschema-2/#duration&lt;/a&gt;. Use this command to convert a timespan into a lexical format you can use in an XML file where you need to specify a duration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; ConvertTo-LexicalTimespan (New-TimeSpan -Days 7 -hours 12)&#xA;&#xA;P7DT12H&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/ConvertFrom-LexicalTime.md&#34;&gt;ConvertFrom-LexicalTime&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Likewise, you might need to convert a lexical value back into a timespan.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; ConvertFrom-LexicalTimeSpan P7DT12H&#xA;&#xA;&#xA;Days              : 7&#xA;Hours             : 12&#xA;Minutes           : 0&#xA;Seconds           : 0&#xA;Milliseconds      : 0&#xA;Ticks             : 6480000000000&#xA;TotalDays         : 7.5&#xA;TotalHours        : 180&#xA;TotalMinutes      : 10800&#xA;TotalSeconds      : 648000&#xA;TotalMilliseconds : 648000000&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These functions were first described at &lt;a href=&#34;https://jdhitsolutions.com/blog/powershell/7101/converting-lexical-timespans-with-powershell/&#34;&gt;https://jdhitsolutions.com/blog/powershell/7101/converting-lexical-timespans-with-powershell/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Console Utilities&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-PSSessionInfo.md&#34;&gt;Get-PSSessionInfo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-PSSessionInfo&lt;/code&gt; will display a summary of your current PowerShell session. It should work on all platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/pssessioninfo-windows.png&#34; alt=&#34;Windows session&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/pssessioninfo-linux.png&#34; alt=&#34;Linux session&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are running in a PowerShell console session, and the Elevated value is True, it will be displayed in color. The Memory and Runtime values are calculated ScriptProperties.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Out-Copy.md&#34;&gt;Out-Copy&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command is intended for writers and those who need to document with PowerShell. You can pipe any command to this function, and you will get the regular output in your PowerShell session. Simultaneously, a copy of the output will be sent to the Windows clipboard. The copied output will include a prompt constructed from the current location unless you use the &lt;code&gt;CommandOnly&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;p&gt;You can run a command like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Process | Sort WS -Descending | Select -first 5 | Out-Copy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this text will be copied to the clipboard.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-Process | Sort WS -Descending | Select -first 5&#xA;&#xA;Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName&#xA;-------  ------    -----      -----     ------     --  -- -----------&#xA;   1849     253   810320     820112     445.38  17860   1 firefox&#xA;    765      61   949028     758200      23.36   6052   0 sqlservr&#xA;    446     115   441860     471032      28.59  18204   1 Teams&#xA;   2307     192   313204     459616     325.23  15748   1 firefox&#xA;   2050     163   451744     433772      94.63  19780   1 thunderbird&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Out-More.md&#34;&gt;Out-More&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command provides a PowerShell alternative to the cmd.exe &lt;strong&gt;MORE&lt;/strong&gt; command, which doesn&#39;t work in the PowerShell ISE. When you have screens of information, you can page it with this function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Service | Out-More&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/out-more.png&#34; alt=&#34;out-more&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This also works in PowerShell 7.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Out-ConditionalColor.md&#34;&gt;Out-ConditionalColor&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;This command is marked as deprecated and will be removed in a future release.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This command is designed to take pipeline input and display it in a colorized format, based on a set of conditions. Unlike &lt;code&gt;Write-Host&lt;/code&gt;, which doesn&#39;t write to the pipeline, this command will write output to the pipeline. You can use a simple hashtable to define a color if the given property matches the hashtable key.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/occ-1.png&#34; alt=&#34;out-conditionalcolor-1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can specify an ordered hashtable for more complex processing. &lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/occ-2.png&#34; alt=&#34;out-conditionalcolor-2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This command doesn&#39;t always work depending on the type of object you pipe to it. The problem appears to be related to the formatting system. Development and testing are ongoing.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Set-ConsoleTitle.md&#34;&gt;Set-ConsoleTitle&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Set the title bar of the current PowerShell console window.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;if (Test-IsAdministrator) {&#xA;  Set-ConsoleTitle &#34;Administrator:  $($PSVersionTable.PSVersion)&#34;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Set-ConsoleColor.md&#34;&gt;Set-ConsoleColor&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;This command is marked as deprecated and will be removed in a future release.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Configure the foreground or background color of the current PowerShell console window. Note that if you are running the PSReadline module, this command won&#39;t work. You should use &lt;code&gt;Set-PSReadlineOption&lt;/code&gt; or similar command to configure your session settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-ConsoleColor -background DarkGray -foreground Yellow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Add-Border.md&#34;&gt;Add-Border&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will create a character or text-based border around a line of text. You might use this to create a formatted text report or to improve the display of information on the screen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Add-Border $env:computername&#xA;&#xA;*************&#xA;*   COWPC   *&#xA;*************&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting in v2.23.0 you can also use ANSI escape sequences to color the text and/or the border.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/add-border-ansi.png&#34; alt=&#34;ANSI border&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$params =@{&#xA;  textblock = (Get-PSWho -AsString ).trim()&#xA;  ANSIBorder = &#34;`e[38;5;214m&#34;&#xA;  Character = ([char]0x25CA)&#xA;  ANSIText = &#34;`e[38;5;225m&#34;&#xA;}&#xA;Add-Border @params&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/add-border-ansi3.png&#34; alt=&#34;ANSI diamond border&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Show-Tree.md&#34;&gt;Show-Tree&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Show-Tree&lt;/code&gt; will display the specified path as a graphical tree in the console. This is intended as a PowerShell alternative to the DOS &lt;code&gt;tree&lt;/code&gt; command. This function should work for any type of PowerShell provider and can be used to explore providers used for configuration like the WSMan provider or the registry. By default, the output will only show directory or equivalent structures. But you can opt to include items well as item details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/show-tree1.png&#34; alt=&#34;show file system tree&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are running PowerShell 7 and specifying a file system path, you can display the tree in a colorized format by using the &lt;code&gt;-InColor&lt;/code&gt; dynamic parameter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/show-tree2.png&#34; alt=&#34;show file system tree&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Beginning with module version 2.21.0, this command uses ANSI Color schemes from a JSON file. You can customize the file if you wish. See the &lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/#PSAnsiMap&#34;&gt;PSAnsiMap&lt;/a&gt; section of this README.&lt;/p&gt; &#xA;&lt;p&gt;This command has an alias of &lt;code&gt;pstree&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; pstree c:\work\alpha -files -properties LastWriteTime,Length&#xA;&#xA;C:\work\Alpha\&#xA;+-- LastWriteTime = 02/28/2020 11:19:32&#xA;+--bravo&#xA;|  +-- LastWriteTime = 02/28/2020 11:20:30&#xA;|  +--delta&#xA;|  |  +-- LastWriteTime = 02/28/2020 11:17:35&#xA;|  |  +--FunctionDemo.ps1&#xA;|  |  |  +-- Length = 888&#xA;|  |  |  \-- LastWriteTime = 06/01/2009 15:50:47&#xA;|  |  +--function-form.ps1&#xA;|  |  |  +-- Length = 1117&#xA;|  |  |  \-- LastWriteTime = 04/17/2019 17:18:28&#xA;|  |  +--function-logstamp.ps1&#xA;|  |  |  +-- Length = 598&#xA;|  |  |  \-- LastWriteTime = 05/23/2007 11:39:55&#xA;|  |  +--FunctionNotes.ps1&#xA;|  |  |  +-- Length = 617&#xA;|  |  |  \-- LastWriteTime = 02/24/2016 08:59:03&#xA;|  |  \--Function-SwitchTest.ps1&#xA;|  |     +-- Length = 242&#xA;|  |     \-- LastWriteTime = 06/09/2008 15:55:44&#xA;|  +--gamma&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example is using parameter and command aliases. You can display a tree listing with files including user-specified properties. Use a value of * to show all properties.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/New-RedGreenGradient.md&#34;&gt;New-RedGreenGradient&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;New-RedGreenGradient&lt;/code&gt;, which displays a bar going from red to green. This might be handy when you want to present a visual indicator.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/redgreen.png&#34; alt=&#34;New-RedGreenGradient&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Format Functions&lt;/h2&gt; &#xA;&lt;p&gt;The module contains a set of simple commands to make it easier to format values.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Format-Percent.md&#34;&gt;Format-Percent&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Treat a value as a percentage. This will write a [double] and not include the % sign.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Format-Percent -Value 123.5646MB -total 1GB -Decimal 4&#xA;12.0669&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Format-String.md&#34;&gt;Format-String&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this command to perform one of several string manipulation &#34;tricks&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Format-String &#34;powershell&#34; -Reverse -Case Proper&#xA;Llehsrewop&#xA;PS C:\&amp;gt; Format-String PowerShell -Randomize&#xA;wSlhoeePlr&#xA;PS C:\&amp;gt; Format-String &#34;!MySecretPWord&#34; -Randomize&#xA;-Replace @{S=&#34;$&#34;;e=&amp;amp;{Get-Random -min 1 -max 9};o=&#34;^&#34;} -Reverse&#xA;yr7!^7WcMtr$Pd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Format-Value.md&#34;&gt;Format-Value&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will format a given numeric value. By default, it will treat the number as an integer. Or you can specify a certain number of decimal places. The command will also allow you to format the value in KB, MB, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Format-Value 1235465676 -Unit kb&#xA;1206509&#xA;PS C:\&amp;gt; Format-Value 123.45 -AsCurrency&#xA;$123.45&#xA;PS C:\&amp;gt; (Get-Process | Measure-Object ws -sum).sum |&#xA;Format-Value -Unit mb | Format-Value -AsNumber&#xA;9,437&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or pull it all together:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-CimInstance Win32_OperatingSystem |&#xA;Select-Object @{Name = &#34;TotalMemGB&#34;;&#xA;Expression={Format-Value $_.TotalVisibleMemorySize -Unit mb}},&#xA;@{Name=&#34;FreeMemGB&#34;;&#xA;Expression={Format-Value $_.FreePhysicalMemory -unit mb -Decimal 2}},&#xA;@{Name=&#34;PctFree&#34;;&#xA;Expression={Format-Percent -Value $_.FreePhysicalMemory `&#xA;-Total $_.totalVisibleMemorySize -Decimal 2}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;TotalMemGB FreeMemGB PctFree&#xA;---------- --------- -------&#xA;        32     14.05   44.06&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scripting Tools&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-TypeMember.md&#34;&gt;Get-TypeMember&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command is an alternative to using &lt;code&gt;Get-Member&lt;/code&gt;. Specify a type name to see a simple view of an object&#39;s members. The output will only show native members, including static methods, but not those added by PowerShell such as ScriptProperties.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/typemember-static.png&#34; alt=&#34;static members&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The command will highlight properties that are enumerations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/typemember-enum.png&#34; alt=&#34;enum properties&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The hightlighting only works in the console and VSCode.&lt;/p&gt; &#xA;&lt;p&gt;The output includes a property set type extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-TypeMember datetime -MemberType method | Select MethodSyntax&#xA;&#xA;Name                 ReturnType      IsStatic Syntax&#xA;----                 ----------      -------- ------&#xA;Add                  System.DateTime    False $obj.Add([TimeSpan]value)&#xA;AddDays              System.DateTime    False $obj.AddDays([Double]value)&#xA;AddHours             System.DateTime    False $obj.AddHours([Double]value)&#xA;AddMilliseconds      System.DateTime    False $obj.AddMilliseconds([Double]value)&#xA;AddMinutes           System.DateTime    False $obj.AddMinutes([Double]value)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can use the custom view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-TypeMember datetime -MemberType method | Format-Table -View Syntax&#xA;&#xA;&#xA;   Type: System.DateTime&#xA;&#xA;Name                 ReturnType Syntax&#xA;----                 ---------- ------&#xA;Add                  DateTime   $obj.Add([TimeSpan]value)&#xA;AddDays              DateTime   $obj.AddDays([Double]value)&#xA;AddHours             DateTime   $obj.AddHours([Double]value)&#xA;AddMilliseconds      DateTime   $obj.AddMilliseconds([Double]value)&#xA;AddMinutes           DateTime   $obj.AddMinutes([Double]value)&#xA;AddMonths            DateTime   $obj.AddMonths([Int32]months)&#xA;AddSeconds           DateTime   $obj.AddSeconds([Double]value)&#xA;AddTicks             DateTime   $obj.AddTicks([Int64]value)&#xA;AddYears             DateTime   $obj.AddYears([Int32]value)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/New-PSDynamicParameter.md&#34;&gt;New-PSDynamicParameter&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will create the code for a dynamic parameter that you can insert into your PowerShell script file. You need to specify a parameter name and a condition. The condition value is code that would run inside an If statement. Use a value like $True if you want to add it later in your scripting editor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; New-PSDynamicParameter -Condition &#34;$PSEdition -eq &#39;Core&#39;&#34; -ParameterName ANSI -Alias color -Comment &#34;Create a parameter to use ANSI if running PowerShell 7&#34; -ParameterType switch&#xA;&#xA;    DynamicParam {&#xA;    # Create a parameter to use ANSI if running PowerShell 7&#xA;        If (Core -eq &#39;Core&#39;) {&#xA;&#xA;        $paramDictionary = New-Object -Type System.Management.Automation.RuntimeDefinedParameterDictionary&#xA;&#xA;        # Defining parameter attributes&#xA;        $attributeCollection = New-Object -Type System.Collections.ObjectModel.Collection[System.Attribute]&#xA;        $attributes = New-Object System.Management.Automation.ParameterAttribute&#xA;        $attributes.ParameterSetName = &#39;__AllParameterSets&#39;&#xA;        $attributeCollection.Add($attributes)&#xA;&#xA;        # Adding a parameter alias&#xA;        $dynalias = New-Object System.Management.Automation.AliasAttribute -ArgumentList &#39;color&#39;&#xA;        $attributeCollection.Add($dynalias)&#xA;&#xA;        # Defining the runtime parameter&#xA;        $dynParam1 = New-Object -Type System.Management.Automation.RuntimeDefinedParameter(&#39;ANSI&#39;, [Switch], $attributeCollection)&#xA;        $paramDictionary.Add(&#39;ANSI&#39;, $dynParam1)&#xA;&#xA;        return $paramDictionary&#xA;    } # end if&#xA;} #end DynamicParam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates dynamic parameter code that you can use in a PowerShell function. Normally you would save this output to a file or copy it to the clipboard so that you can paste it into your scripting editor.&lt;/p&gt; &#xA;&lt;p&gt;You can also use a WPF-based front-end command, &lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/New-PSDynamicParameterForm.md&#34;&gt;New-PSDynamicParameterForm&lt;/a&gt;. You can enter the values in the form. Required values are indicated by an asterisk.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/new-psdynamicparameter-form.png&#34; alt=&#34;New-PSDynamicParameterForm&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clicking &lt;code&gt;Create&lt;/code&gt; will generate the dynamic parameter code and copy it to the Windows clipboard. You can then paste it into your scripting editor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;DynamicParam {&#xA;&#xA;    If ($Filter -eq &#39;domain&#39;) {&#xA;&#xA;    $paramDictionary = New-Object -Type System.Management.Automation.RuntimeDefinedParameterDictionary&#xA;&#xA;    # Defining parameter attributes&#xA;    $attributeCollection = New-Object -Type System.Collections.ObjectModel.Collection[System.Attribute]&#xA;    $attributes = New-Object System.Management.Automation.ParameterAttribute&#xA;    $attributes.ParameterSetName = &#39;__AllParameterSets&#39;&#xA;    $attributes.ValueFromPipelineByPropertyName = $True&#xA;&#xA;    # Adding ValidatePattern parameter validation&#xA;    $value = &#39;^\w+-\w+$&#39;&#xA;    $v = New-Object System.Management.Automation.ValidatePatternAttribute($value)&#xA;    $AttributeCollection.Add($v)&#xA;&#xA;    # Adding ValidateNotNullOrEmpty parameter validation&#xA;    $v = New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute&#xA;    $AttributeCollection.Add($v)&#xA;    $attributeCollection.Add($attributes)&#xA;&#xA;    # Adding a parameter alias&#xA;    $dynalias = New-Object System.Management.Automation.AliasAttribute -ArgumentList &#39;cn&#39;&#xA;    $attributeCollection.Add($dynalias)&#xA;&#xA;    # Defining the runtime parameter&#xA;    $dynParam1 = New-Object -Type System.Management.Automation.RuntimeDefinedParameter(&#39;Computername&#39;, [String], $attributeCollection)&#xA;    $paramDictionary.Add(&#39;Computername&#39;, $dynParam1)&#xA;&#xA;    return $paramDictionary&#xA;} # end if&#xA;} #end DynamicParam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you import the PSScriptTools module in the PowerShell ISE, you will get a menu shortcut under Add-Ins.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/new-psdynamicparameter-ise.png&#34; alt=&#34;New-PSDynamicParameter ISE&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you import the module in VS Code using the integrated PowerShell terminal, it will a new command. In the command palette, use `PowerShell: Show Additional Commands from PowerShell Modules&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/new-psdynamicparameter-vscode.png&#34; alt=&#34;New-PSDynamicParameter VSCode&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-PSUnique.md&#34;&gt;Get-PSUnique&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For the most part, objects you work with in PowerShell are guaranteed to be unique. But you might import data where there is the possibility of duplicate items. Consider this CSV sample.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$Obj = &#34;Animal,Snack,Color&#xA;Horse,Quiche,Chartreuse&#xA;Cat,Doritos,Red&#xA;Cat,Pringles,Yellow&#xA;Dog,Doritos,Yellow&#xA;Dog,Doritos,Yellow&#xA;Rabbit,Pretzels,Green&#xA;Rabbit,Popcorn,Green&#xA;Marmoset,Cheeseburgers,Black&#xA;Dog,Doritos,White&#xA;Dog,Doritos,White&#xA;Dog,Doritos,White&#xA;&#34; | ConvertFrom-Csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are duplicate objects you might want to filter out. For that task, you can use &lt;code&gt;Get-PSUnique&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; $obj | Get-PSUnique | Sort-Object animal&#xA;&#xA;Animal   Snack         Color&#xA;------   -----         -----&#xA;Cat      Pringles      Yellow&#xA;Cat      Doritos       Red&#xA;Dog      Doritos       White&#xA;Dog      Doritos       Yellow&#xA;Horse    Quiche        Chartreuse&#xA;Marmoset Cheeseburgers Black&#xA;Rabbit   Popcorn       Green&#xA;Rabbit   Pretzels      Green&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The duplicate items have been removed. This command works best with simple objects. If your objects have nested object properties, you will need to test if this command can properly filter for unique items.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Test-IsElevated.md&#34;&gt;Test-IsElevated&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This simple command will test if the current PowerShell session is running elevated, or as Administrator. On Windows platforms, the function uses the .NET Framework to test. On non-Windows platforms, the command tests the user&#39;s UID value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Test-IsElevated&#xA;False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;Get-PSWho&lt;/code&gt; command to get more information.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/New-FunctionItem.md&#34;&gt;New-FunctionItem&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;{Get-Date -format g | Set-Clipboard} | New-FunctionItem -name Copy-Date&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script block has been converted into a function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; get-command copy-date&#xA;&#xA;CommandType     Name                        Version    Source&#xA;-----------     ----                        -------    ------&#xA;Function        Copy-Date&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use this function to create a quick function definition directly from the console. This lets you quickly prototype a function. If you are happy with it, you can &#34;export&#34; to a file with &lt;code&gt;Show-FunctionItem&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Show-FunctionItem.md&#34;&gt;Show-FunctionItem&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will display a loaded function as it might look in a code editor. You could use this command to export a loaded function to a file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Show-FunctionItem Copy-Date | Out-File c:\scripts\Copy-Date.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/ConvertToTitleCase.md&#34;&gt;ConvertTo-TitleCase&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is a simple command that uses &lt;code&gt;[System.Globalization.CultureInfo]&lt;/code&gt; to convert a string to title case.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; ConvertTo-TitleCase &#34;disk usage report&#34;&#xA;Disk Usage Report&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Trace-Message.md&#34;&gt;Trace-Message&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Trace-Message&lt;/code&gt; is designed to be used with your script or function on a Windows platform. Its purpose is to create a graphical trace window using Windows Presentation Foundation (WPF). Inside the function or script, you can use this command to send messages to the window. When finished, you have the option to save the output to a text file.&lt;/p&gt; &#xA;&lt;p&gt;There are three steps to using this function. First, in your code, you need to create a boolean global variable called TraceEnabled. When the value is $True, the Trace-Message command will run. When set to false, the command will be ignored. Second, you need to initialize a form, specifying the title and dimensions. Finally, you can send trace messages to the window. All messages are prepended with a timestamp.&lt;/p&gt; &#xA;&lt;p&gt;Here is a code excerpt from &lt;code&gt;$PSSamplePath\Get-Status.ps1&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Function Get-Status {&#xA;&#xA;    [cmdletbinding(DefaultParameterSetName = &#39;name&#39;)]&#xA;    [alias(&#34;gst&#34;)]&#xA;    Param(&#xA;        ...&#xA;        [Parameter(HelpMessage=&#34;Enable with grapical trace window&#34;)]&#xA;        [switch]$Trace&#xA;    )&#xA;&#xA;    Begin {&#xA;        Write-Verbose &#34;[$((Get-Date).TimeOfDay) BEGIN  ] Starting $($MyInvocation.MyCommand)&#34;&#xA;        if ($trace) {&#xA;            $global:TraceEnabled = $True&#xA;            $traceTitle = &#34;{0} Trace Log&#34; -f $($MyInvocation.MyCommand)&#xA;            Trace-Message -title $traceTitle&#xA;            Trace &#34;Starting $($MyInvocation.MyCommand)&#34;&#xA;        }&#xA;    } #begin&#xA;      Process {&#xA;        Write-Verbose &#34;[$((Get-Date).TimeOfDay) PROCESS] Using parameter set $($PSCmdlet.ParameterSetName)&#34;&#xA;        Trace-Message -message &#34;Using parameter set: $($PSCmdlet.ParameterSetName)&#34;&#xA;    ...&#xA;      } #close function&#xA;    $data = Get-Status -trace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The trace window starts with pre-defined metadata.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/trace.png&#34; alt=&#34;Trace Sample&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Your output might vary from this screenshot.&lt;/em&gt; You have the option to Save the text. The default location is &lt;code&gt;$env:temp.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-CommandSyntax.md&#34;&gt;Get-CommandSyntax&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Some PowerShell commands are provider-aware and may have special syntax or parameters depending on what PSDrive you are using when you run the command. In Windows PowerShell, the help system could show you syntax based on a given path. However, this no longer appears to work. &lt;code&gt;Get-CommandSyntax&lt;/code&gt; is intended as an alternative and should work in both Windows PowerShell and PowerShell 7.&lt;/p&gt; &#xA;&lt;p&gt;Specify a cmdlet or function name, and the output will display the syntax detected when using different providers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-CommandSyntax -Name Get-Item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dynamic parameters will be highlighted with an ANSI-escape sequence.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-commandsyntax.png&#34; alt=&#34;Get-CommandSyntax&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This command has an alias of &lt;em&gt;gsyn&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Test-Expression.md&#34;&gt;Test-Expression&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The primary command can be used to test a PowerShell expression or scriptblock for a specified number of times and calculate the average runtime, in milliseconds, over all the tests.&lt;/p&gt; &#xA;&lt;h4&gt;Why&lt;/h4&gt; &#xA;&lt;p&gt;When you run a single test with &lt;code&gt;Measure-Command&lt;/code&gt; the result might be affected by any number of factors. Likewise, running multiple tests may also be influenced by things such as caching. The goal of this module is to provide a test framework where you can run a test repeatedly with either a static or random interval between each test. The results are aggregated and analyzed. Hopefully, this will provide a more meaningful or realistic result.&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;The output will also show the median and trimmed values, as well as some metadata about the current PowerShell session.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; $cred = Get-credential globomantics\administrator&#xA;PS C:\&amp;gt; Test-Expression {&#xA;  param($cred)&#xA;  Get-WmiObject win32_logicaldisk -computer chi-dc01 -credential $cred&#xA;  } -argumentList $cred&#xA;&#xA;Tests        : 1&#xA;TestInterval : 0.5&#xA;AverageMS    : 1990.6779&#xA;MinimumMS    : 1990.6779&#xA;MaximumMS    : 1990.6779&#xA;MedianMS     : 1990.6779&#xA;TrimmedMS    :&#xA;PSVersion    :5.1.17763.134&#xA;OS           : Microsoft Windows 10 Pro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run multiple tests with random time intervals.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt;Test-Expression {&#xA;  param([string[]]$Names)&#xA;  Get-Service $names&#xA;  } -count 5 -IncludeExpression -argumentlist @(&#39;bits&#39;,&#39;wuauserv&#39;,&#39;winrm&#39;) `&#xA;  -RandomMinimum .5 -RandomMaximum 5.5&#xA;&#xA;Tests        : 5&#xA;TestInterval : Random&#xA;AverageMS    : 1.91406&#xA;MinimumMS    : 0.4657&#xA;MaximumMS    : 7.5746&#xA;MedianMS     : 0.4806&#xA;TrimmedMS    : 0.51&#xA;PSVersion    : 5.1.17763.134&#xA;OS           : Microsoft Windows 10 Pro&#xA;Expression   : param([string[]]$Names) Get-Service $names&#xA;Arguments    : {bits, wuauserv, winrm}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For very long-running tests, you can run them as a background job.&lt;/p&gt; &#xA;&lt;h4&gt;Graphical Testing&lt;/h4&gt; &#xA;&lt;p&gt;The module also includes a graphical command called &lt;code&gt;Test-ExpressionForm&lt;/code&gt;. This is intended to serve as both an entry and results form.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/testexpressionform.png&#34; alt=&#34;Test Expression&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you quit the form the last result will be written to the pipeline including all metadata, the scriptblock, and any arguments.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Copy-HelpExample.md&#34;&gt;Copy-HelpExample&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command is designed to make it (slightly) easier to copy code snippets from help examples. Specify the name of a function or cmdlet, presumably one with documented help examples, and you will be offered a selection of code snippets to copy to the clipboard. Code snippets have been trimmed of blank lines, most prompts, and comments. Many examples include command output. You will have to manually remove what you don&#39;t want after pasting.&lt;/p&gt; &#xA;&lt;p&gt;The default behavior is to use a console-based menu, which works cross-platform.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/copy-helpexample-1.png&#34; alt=&#34;Copy-HelpExample&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enter the number of the code to copy to the clipboard. Enter multiple numbers separated by commas.&lt;/p&gt; &#xA;&lt;p&gt;If you are running a Windows platform, there is a dynamic help parameter to use &lt;code&gt;Out-GridView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Copy-HelpExample Stop-Service -UseGridView&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/copy-helpexample-2.png&#34; alt=&#34;Copy-HelpExample GridView&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are running this in the PowerShell ISE this is the default behavior, even if you don&#39;t specify the parameter.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-GitSize.md&#34;&gt;Get-GitSize&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this command to determine how much space the hidden &lt;code&gt;.git&lt;/code&gt; folder is consuming.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\scripts\PSScriptTools&amp;gt; Get-GitSize&#xA;&#xA;Path                                          Files          SizeKB&#xA;----                                          -----          ------&#xA;C:\scripts\PSScriptTools                        751       6859.9834&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the default formatted view. The object has other properties you can use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;Name         : PSScriptTools&#xA;Path         : C:\scripts\PSScriptTools&#xA;Files        : 751&#xA;Size         : 7024623&#xA;Date         : 3/5/2020 2:57:06 PM&#xA;Computername : BOVINE320&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Remove-MergedBranch.md&#34;&gt;Remove-MergedBranch&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;code&gt;git&lt;/code&gt; you may create some branches. Presumably, you merge these branches into the main or master branch. You can use this command to remove all merged branches other than &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;main&lt;/code&gt;, and the current branch. You must be at the root of your project to run this command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\MyProject&amp;gt; Remove-MergedBranch&#xA;&#xA;Remove merged branch from MyProject?&#xA;2.1.1&#xA;[Y] Yes  [N] No  [S] Suspend  [?] Help (default is &#34;Y&#34;): n&#xA;&#xA;Remove merged branch from MyProject?&#xA;dev1&#xA;[Y] Yes  [N] No  [S] Suspend  [?] Help (default is &#34;Y&#34;): y&#xA;Deleted branch dev1 (was 75f6ab8).&#xA;&#xA;Remove merged branch from MyProject?&#xA;dev2&#xA;[Y] Yes  [N] No  [S] Suspend  [?] Help (default is &#34;Y&#34;): y&#xA;Deleted branch dev2 (was 75f6ab8).&#xA;&#xA;Remove merged branch from MyProject?&#xA;patch-254&#xA;[Y] Yes  [N] No  [S] Suspend  [?] Help (default is &#34;Y&#34;): n&#xA;&#xA;PS C:\MyProject&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, you will be prompted to remove each branch.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Test-WithCulture.md&#34;&gt;Test-WithCulture&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When writing PowerShell commands, sometimes the culture you are running under becomes critical. For example, European countries use a different datetime format than North Americans, which might present a problem with your script or command. Unless you have a separate computer running under a foreign culture, it is difficult to test. This command will allow you to test a scriptblock or even a file under a different culture, such as DE-DE for German.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Test-WithCulture fr-fr -Scriptblock {&#xA;    Get-winEvent -log system -max 500 |&#xA;    Select-Object -Property TimeCreated,ID,OpCodeDisplayName,Message |&#xA;    Sort-Object -property TimeCreated |&#xA;    Group-Object {$_.TimeCreated.ToShortDateString()} -NoElement}&#xA;&#xA;Count Name&#xA;----- ----&#xA;  165 10/07/2019&#xA;  249 11/07/2019&#xA;   17 12/07/2019&#xA;   16 13/07/2019&#xA;   20 14/07/2019&#xA;   26 15/07/2019&#xA;    7 16/07/2019&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Copy-Command.md&#34;&gt;Copy-Command&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will copy a PowerShell command, including parameters and help to a new user-specified command. You can use this to create a &#34;wrapper&#34; function or to easily create a proxy function. The default behavior is to create a copy of the command complete with the original comment-based help block.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-ParameterInfo.md&#34;&gt;Get-ParameterInfo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;Get-Command&lt;/code&gt;, this function will return information about parameters for any loaded cmdlet or function. Common parameters like &lt;code&gt;Verbose&lt;/code&gt; and &lt;code&gt;ErrorAction&lt;/code&gt; are omitted. &lt;code&gt;Get-ParameterInfo&lt;/code&gt; returns a custom object with the most useful information an administrator might need to know. The custom object includes default format views for a list and table.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-parameterinfo-1.png&#34; alt=&#34;Get-ParameterInfo summary&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-parameterinfo-2.png&#34; alt=&#34;Get-ParameterInfo list&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/New-PSFormatXML.md&#34;&gt;New-PSFormatXML&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When defining custom objects with a new typename, PowerShell by default will display all properties. However, you may wish to have a specific default view, be it a table or a list. Or you may want to have different views display the object differently. Format directives are stored in format.ps1xml files which can be tedious to create. This command simplifies that process.&lt;/p&gt; &#xA;&lt;p&gt;Define a custom object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$tname = &#34;myThing&#34;&#xA;$obj = [PSCustomObject]@{&#xA;  PSTypeName   = $tname&#xA;  Name         = &#34;Jeff&#34;&#xA;  Date         = (Get-Date)&#xA;  Computername = $env:computername&#xA;  OS           = (Get-CimInstance Win32_OperatingSystem).caption&#xA;}&#xA;$upParams = @{&#xA;  TypeName = $tname&#xA;  MemberType = &#34;ScriptProperty&#34;&#xA;  MemberName = &#34;Runtime&#34;&#xA;  value =  {(Get-Date) - [datetime]&#34;1/1/2019&#34;}&#xA;  force = $True&#xA;}&#xA;Update-TypeData @upParams&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The custom object looks like this by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; $obj&#xA;&#xA;Name         : Jeff&#xA;Date         : 2/10/2019 8:49:10 PM&#xA;Computername : BOVINE320&#xA;OS           : Microsoft Windows 10 Pro&#xA;Runtime      : 40.20:49:43.9205882&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can create new formatting directives.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$tname = &#34;myThing&#34;&#xA;$params = @{&#xA;  Properties = &#34;Name&#34;,&#34;Date&#34;,&#34;Computername&#34;,&#34;OS&#34;&#xA;  FormatType = &#34;Table&#34;&#xA;  Path = &#34;C:\scripts\$tname.format.ps1xml&#34;&#xA;}&#xA;$obj | New-PSFormatXML @params&#xA;&#xA;$params.Properties= &#34;Name&#34;,&#34;OS&#34;,&#34;Runtime&#34;&#xA;$params.Add(&#34;Viewname&#34;,&#34;runtime&#34;)&#xA;$params.Add(Append,$True)&#xA;$obj | New-PSFormatXML  @params&#xA;&#xA;$params.formatType = &#34;list&#34;&#xA;$params.remove(&#34;Properties&#34;)&#xA;$obj | New-PSFormatXML @params&#xA;&#xA;Update-FormatData -appendpath $params.path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is what the object looks like now:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; $obj&#xA;&#xA;Name Date                 Computername Operating System&#xA;---- ----                 ------------ ----------------&#xA;Jeff 2/10/2019 8:49:10 PM BOVINE320    Microsoft Windows 10 Pro&#xA;&#xA;PS C:\&amp;gt; $obj | Format-Table -View runtime&#xA;&#xA;Name OS Runtime&#xA;---- -- -------&#xA;Jeff    40.20:56:24.5411481&#xA;&#xA;PS C:\&amp;gt; $obj | Format-List&#xA;&#xA;&#xA;Name            : Jeff&#xA;Date            : Sunday, February 10, 2019&#xA;Computername    : BOVINE320&#xA;OperatingSystem : Microsoft Windows 10 Pro&#xA;Runtime         : 40.21:12:01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting with v2.31.0, you can also use a hashtable to define custom properties from scriptblocks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt; $p = @{&#xA;    FormatType = &#34;List&#34;&#xA;    ViewName = &#34;run&#34;&#xA;    Path  = &#34;c:\scripts\run.ps1xml&#34;&#xA;    Properties = &#34;ID&#34;,&#34;Name&#34;,&#34;Path&#34;,&#34;StartTime&#34;,&#xA;    @{Name=&#34;Runtime&#34;;Expression={(Get-Date) - $_.starttime}}&#xA; }&#xA; Get-Process -id $pid | New-PSFormatXML @p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run this command from Visual Studio Code and specify &lt;code&gt;-PassThru&lt;/code&gt;, the resulting file will be opened in your editor.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Test-IsPSWindows.md&#34;&gt;Test-IsPSWindows&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;PowerShell 7 introduced the &lt;code&gt;$IsWindows&lt;/code&gt; variable. However, it is not available on Windows PowerShell. Use this command to perform a simple test if the computer is either running Windows or using the &lt;code&gt;Desktop&lt;/code&gt; PSEdition. The command returns &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Write-Detail.md&#34;&gt;Write-Detail&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command is designed to be used within your functions and scripts to make it easier to write a detailed message that you can use as verbose output. The assumption is that you are using an advanced function with a &lt;code&gt;Begin&lt;/code&gt;, &lt;code&gt;Process&lt;/code&gt;, and &lt;code&gt;End&lt;/code&gt; scriptblocks. You can create a detailed message to indicate what part of the code is being executed. The output can be configured to include a datetime stamp or just the time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; write-detail &#34;Getting file information&#34; -Prefix Process -Date&#xA;9/15/2020 11:42:43 [PROCESS] Getting file information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a script you might use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Begin {&#xA;    Write-Detail &#34;Starting $($MyInvocation.MyCommand)&#34; -Prefix begin -time |&#xA;    Write-Verbose&#xA;    $tabs = &#34;`t&#34; * $tab&#xA;    Write-Detail &#34;Using a tab of $tab&#34; -Prefix BEGIN -time | Write-Verbose&#xA;} #begin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Save-GitSetup.md&#34;&gt;Save-GitSetup&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command is intended for Windows users to easily download the latest 64-bit version of &lt;code&gt;Git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Save-GitSetup -Path c:\work -PassThru&#xA;&#xA;&#xA;    Directory: C:\work&#xA;&#xA;Mode                 LastWriteTime         Length Name&#xA;----                 -------------         ------ ----&#xA;-a---           1/23/2020  4:31 PM       46476880 Git-2.25.0-64-bit.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need to manually install the file. Or you can try something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Save-GitSetup -Path c:\work -PassThru | Invoke-Item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ANSI Tools&lt;/h2&gt; &#xA;&lt;p&gt;Note: ANSI tools related to the filesystem are not loaded on computers where &lt;code&gt;PSStyle&lt;/code&gt; is detected.&lt;/p&gt; &#xA;&lt;p&gt;This module includes several custom format files for common objects like services. You can run &lt;code&gt;Get-Service&lt;/code&gt; and pipe it to the custom table view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Service | Format-Table -view ansi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will display the service status color-coded.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/serviceansi.png&#34; alt=&#34;ServiceAnsi&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANSI formatting will only work in a PowerShell 5.1 console window or VS Code. It will not display properly in the PowerShell ISE or older versions of PowerShell.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PSAnsiMap&lt;/h3&gt; &#xA;&lt;p&gt;I have done something similar for output from &lt;code&gt;Get-ChildItem&lt;/code&gt;. The module includes a JSON file that is exported as a global variable called &lt;code&gt;PSAnsiFileMap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; $PSAnsiFileMap&#xA;&#xA;Description    Pattern                                Ansi&#xA;-----------    -------                                ----&#xA;PowerShell     \.ps(d|m)?1$&#xA;Text           \.(txt)|(md)|(log)$&#xA;DataFile       \.(json)|(xml)|(csv)$&#xA;Executable     \.(exe)|(bat)|(cmd)|(sh)$&#xA;Graphics       \.(jpg)|(png)|(gif)|(bmp)|(jpeg)$&#xA;Media          \.(mp3)|(m4v)|(wav)|(au)|(flac)|(mp4)$&#xA;Archive        \.(zip)|(rar)|(tar)|(gzip)$&#xA;TopContainer&#xA;ChildContainer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The map includes ANSI settings for different file types. You won&#39;t see the ANSI value in the output. The module will add a custom table view called &lt;code&gt;ansi&lt;/code&gt; which you can use to display colorized file results.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/ansi-file-format.png&#34; alt=&#34;ANSI File listing&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The mapping file is user-customizable. Copy the &lt;code&gt;psansifilemap.json&lt;/code&gt; file from the module&#39;s root directory to $HOME. When you import this module, if the file is found, it will be imported and used as &lt;code&gt;psansifilemap&lt;/code&gt;, otherwise, the module&#39;s file will be used.&lt;/p&gt; &#xA;&lt;p&gt;The file will look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  {&#xA;    &#34;Description&#34;: &#34;PowerShell&#34;,&#xA;    &#34;Pattern&#34;: &#34;\\.ps(d|m)?1$&#34;,&#xA;    &#34;Ansi&#34;: &#34;\u001b[38;2;252;127;12m&#34;&#xA;  },&#xA;  {&#xA;    &#34;Description&#34;: &#34;Text&#34;,&#xA;    &#34;Pattern&#34;: &#34;\\.(txt)|(md)|(log)$&#34;,&#xA;    &#34;Ansi&#34;: &#34;\u001b[38;2;58;120;255m&#34;&#xA;  },&#xA;  {&#xA;    &#34;Description&#34;: &#34;DataFile&#34;,&#xA;    &#34;Pattern&#34;: &#34;\\.(json)|(xml)|(csv)$&#34;,&#xA;    &#34;Ansi&#34;: &#34;\u001b[38;2;249;241;165m&#34;&#xA;  },&#xA;  {&#xA;    &#34;Description&#34;: &#34;Executable&#34;,&#xA;    &#34;Pattern&#34;: &#34;\\.(exe)|(bat)|(cmd)|(sh)$&#34;,&#xA;    &#34;Ansi&#34;: &#34;\u001b[38;2;197;15;31m&#34;&#xA;  },&#xA;  {&#xA;    &#34;Description&#34;: &#34;Graphics&#34;,&#xA;    &#34;Pattern&#34;: &#34;\\.(jpg)|(png)|(gif)|(bmp)|(jpeg)$&#34;,&#xA;    &#34;Ansi&#34;: &#34;\u001b[38;2;255;0;255m&#34;&#xA;  },&#xA;  {&#xA;    &#34;Description&#34;: &#34;Media&#34;,&#xA;    &#34;Pattern&#34;: &#34;\\.(mp3)|(m4v)|(wav)|(au)|(flac)|(mp4)$&#34;,&#xA;    &#34;Ansi&#34;: &#34;\u001b[38;2;255;199;6m&#34;&#xA;  },&#xA;  {&#xA;    &#34;Description&#34;: &#34;Archive&#34;,&#xA;    &#34;Pattern&#34;: &#34;\\.(zip)|(rar)|(tar)|(gzip)$&#34;,&#xA;    &#34;Ansi&#34;: &#34;\u001b[38;2;118;38;113m&#34;&#xA;  },&#xA;  {&#xA;    &#34;Description&#34;: &#34;TopContainer&#34;,&#xA;    &#34;Pattern&#34;: &#34;&#34;,&#xA;    &#34;Ansi&#34;: &#34;\u001b[38;2;0;255;255m&#34;&#xA;  },&#xA;  {&#xA;    &#34;Description&#34;: &#34;ChildContainer&#34;,&#xA;    &#34;Pattern&#34;: &#34;&#34;,&#xA;    &#34;Ansi&#34;: &#34;\u001b[38;2;255;255;0m&#34;&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create or modify file groups. The Pattern value should be a regular expression pattern to match the filename. Don&#39;t forget you will need to escape characters for the JSON format. The ANSI value will be an ANSI escape sequence. You can use &lt;code&gt;\u001b&lt;/code&gt; for the `&lt;code&gt;e&lt;/code&gt; character.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer not to edit JSON files, you can use the PSAnsiFileMap commands from this module.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-PSAnsiFileMap.md&#34;&gt;Get-PSAnsiFileMap&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This command will display the value of the &lt;code&gt;$PSAnsiFileMap&lt;/code&gt; variable, but will also show the ANSI sequence using the sequence itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-psansifilemap.png&#34; alt=&#34;get-psansifilemap&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Set-PSAnsiFileMap.md&#34;&gt;Set-PSAnsiFileMap&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use this command to modify an existing entry. You need to specify a regular expression pattern to match the filename and/or an ANSI escape sequence. If the entry description doesn&#39;t exist, you will need to specify the regex pattern and the ANSI sequence to add the entry to $PSAnsiFileMap.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-PSAnsiFileMap Archive -Ansi &#34;`e[38;5;75m&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Remove-PSAnsiFileEntry.md&#34;&gt;Remove-PSAnsiFileEntry&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you need to, you can remove an entry from &lt;code&gt;$PSAnsiFileMap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Remove-PSAnsiFileEntry DevFiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Export-PSAnsiFileMap.md&#34;&gt;Export-PSAnsiFileMap&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Any changes you make to &lt;code&gt;$PSAnsiFileMap&lt;/code&gt; will only last until you import the module again. To make the change permanent, use &lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Export-PSAnsiFileMap.md&#34;&gt;Export-PSAnsiFileMap&lt;/a&gt;. This will create the &lt;code&gt;psansifilemap.json&lt;/code&gt; file in your &lt;code&gt;$HOME&lt;/code&gt; directory. When you import the PSSCriptTools module, if this file is found, it will be imported. Otherwise, the default module file will be used.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Convert-HtmlToAnsi.md&#34;&gt;Convert-HtmlToAnsi&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This simple function is designed to convert an HTML color code like #ff5733 into an ANSI escape sequence.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;PS C:\&amp;gt; Convert-HtmlToAnsi &#34;#ff5733&#34;&#xA;[38;2;255;87;51m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the resulting value you still need to construct an ANSI string with the escape character and the closing [0m.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/convert-htmltoansi.png&#34; alt=&#34;convert html to ansi&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In PowerShell 7 you can use &lt;code&gt;`e&lt;/code&gt;. Or &lt;code&gt;$([char]27)&lt;/code&gt; which works in all PowerShell versions.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/New-ANSIBar.md&#34;&gt;New-ANSIBar&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use this command to create colorful bars using ANSI escape sequences based on a 256-color scheme. The default behavior is to create a gradient bar that goes from first to last values in the range and then back down again. Or you can create a single gradient that runs from the beginning of the range to the end. You can use one of the default characters or specify a custom one.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/ansibar.png&#34; alt=&#34;New-ANSIBar&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Write-ANSIProgress.md&#34;&gt;Write-ANSIProgress&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You could also use &lt;code&gt;Write-ANSIProgress&lt;/code&gt; to show a custom ANSI bar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/write-ansprogress-1.png&#34; alt=&#34;Write-ANSIProgress simple&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/write-ansprogress-2.png&#34; alt=&#34;write-ANSIProgress in code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can use it in your code to display a console progress bar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$sb = {&#xA;  Clear-Host&#xA;  $top = Get-ChildItem c:\scripts -Directory&#xA;  $i = 0&#xA;  $out=@()&#xA;  $pos = $host.UI.RawUI.CursorPosition&#xA;  Foreach ($item in $top) {&#xA;      $i++&#xA;      $pct = [math]::round($i/$top.count,2)&#xA;      Write-ANSIProgress -PercentComplete $pct -position $pos&#xA;      Write-Host &#34;  Processing $(($item.fullname).padright(80))&#34;&#xA;      -ForegroundColor Yellow -NoNewline&#xA;      $out+= Get-ChildItem -Path $item -Recurse -file |&#xA;      Measure-Object -property length -sum |&#xA;      Select-Object @{Name=&#34;Path&#34;;Expression={$item.fullname}},Count,&#xA;      @{Name=&#34;Size&#34;;Expression={$_.Sum}}&#xA;  }&#xA;  Write-Host &#34;&#34;&#xA;  $out | Sort-Object -property Size -Descending&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/write-ansprogress-3.png&#34; alt=&#34;Write-ANSIProgress script&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Show-ANSISequence.md&#34;&gt;Show-ANSISequence&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;Show-ANSISequence&lt;/code&gt; to preview how it will look in your PowerShell session. You might get a different appearance in Windows Terminal depending on the color scheme you are using.&lt;/p&gt; &#xA;&lt;p&gt;The default behavior is to show basic sequences.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/show-ansi-basic.png&#34; alt=&#34;show basic ansi sequence&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also view foreground and or background settings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/show-ansi-foreground.png&#34; alt=&#34;show ansi foreground&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can even use an RGB value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/show-ansi-rgb.png&#34; alt=&#34;show ansi rgb sequence&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The escape character will match what is acceptable in your version of PowerShell. These screenshots are showing PowerShell 7.&lt;/p&gt; &#xA;&lt;h2&gt;Other Module Features&lt;/h2&gt; &#xA;&lt;p&gt;These are additional items in the module that you might find useful in your PowerShell work.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Format Views&lt;/h3&gt; &#xA;&lt;p&gt;The module includes several custom &lt;code&gt;format.ps1xml&lt;/code&gt; files that define additional views for common objects. Some of these have already been demonstrated elsewhere in this document.&lt;/p&gt; &#xA;&lt;p&gt;For example, there is a custom table view for Aliases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-Alias | Sort-Object Source | Format-Table -view Source&#xA;&#xA;&#xA;   Source:&#xA;&#xA;Name                 Definition&#xA;----                 ----------&#xA;nmo                  New-Module&#xA;ni                   New-Item&#xA;npssc                New-PSSessionConfigurationFile&#xA;nv                   New-Variable&#xA;nsn                  New-PSSession&#xA;...&#xA;&#xA;   Source: Microsoft.PowerShell.Management 3.1.0.0&#xA;&#xA;Name                 Definition&#xA;----                 ----------&#xA;gtz                  Get-TimeZone&#xA;stz                  Set-TimeZone&#xA;...&#xA;&#xA;&#xA;   Source: Microsoft.PowerShell.Utility 3.1.0.0&#xA;&#xA;Name                 Definition&#xA;----                 ----------&#xA;fhx                  Format-Hex&#xA;CFS                  ConvertFrom-String&#xA;&#xA;&#xA;   Source: PSScriptTools 2.31.0&#xA;&#xA;Name                 Definition&#xA;----                 ----------&#xA;clr                  Convert-EventLogRecord&#xA;gsi                  Get-FolderSizeInfo&#xA;wver                 Get-WindowsVersion&#xA;gpi                  Get-ParameterInfo&#xA;che                  Copy-HelpExample&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some custom formats use ANSI to highlight information, assuming you are running in PowerShell Console Host.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/get-alias-option.png&#34; alt=&#34;alias options&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this format view, ReadOnly aliases are displayed in Red.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Get-FormatView.md&#34;&gt;Get-FormatView&lt;/a&gt; to discover available format views. Or if you&#39;d like to create your own custom views look at &lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/New-PSFormatXML.md&#34;&gt;New-PSFormatXML&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom Type Extensions&lt;/h3&gt; &#xA;&lt;p&gt;When you import the module, you will also get custom type extensions. These are designed to make it easier to work with common objects in PowerShell.&lt;/p&gt; &#xA;&lt;h4&gt;System.IO.FileInfo&lt;/h4&gt; &#xA;&lt;p&gt;The module will extend file objects with the following alias properties:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;New Alias&lt;/th&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Size&lt;/td&gt; &#xA;   &lt;td&gt;Length&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Created&lt;/td&gt; &#xA;   &lt;td&gt;CreationTime&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Modified&lt;/td&gt; &#xA;   &lt;td&gt;LastWriteTime&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You also have new script properties&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Script Property&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ModifiedAge&lt;/td&gt; &#xA;   &lt;td&gt;A timespan between the current date the and last write time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CreatedAge&lt;/td&gt; &#xA;   &lt;td&gt;A timespan between the current date the and creation time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SizeKB&lt;/td&gt; &#xA;   &lt;td&gt;The file size formatted in KB to 2 decimal places&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SizeMB&lt;/td&gt; &#xA;   &lt;td&gt;The file size formatted in MB to 2 decimal places&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-ChildItem C:\work\pswork.xml | Select-Object Name,Size,SizeKB,SizeMB,Created,CreatedAge,Modified,ModifiedAge&#xA;&#xA;Name        : pswork.xml&#xA;Size        : 32072432&#xA;SizeKB      : 31320.73&#xA;SizeMB      : 30.59&#xA;Created     : 1/5/2021 6:46:43 PM&#xA;CreatedAge  : 175.17:47:00.4966770&#xA;Modified    : 1/6/2021 11:53:20 AM&#xA;ModifiedAge : 175.00:40:23.3527674&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;System.Diagnostics.Process&lt;/h4&gt; &#xA;&lt;p&gt;The module will extend process objects with a &lt;code&gt;Runtime&lt;/code&gt; script property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;PS C:\&amp;gt; Get-Process | Sort-Object runtime -Descending |&#xA;Select-Object -first 5 -Property ID,Name,Runtime&#xA;&#xA; Id Name          Runtime&#xA; -- ----          -------&#xA;120 Secure System 20:44:51.6139043&#xA;204 Registry      20:44:51.3661961&#xA;  4 System        20:44:48.2820565&#xA;704 smss          20:44:48.2726401&#xA;820 csrss         20:44:44.7760844&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Idle process will have a null value for this property.&lt;/p&gt; &#xA;&lt;h3&gt;PSSpecialChar&lt;/h3&gt; &#xA;&lt;p&gt;A number of the commands in this module can use special characters. To make it easier, when you import the module, it will create a global variable that is a hash table of common special characters. Because it is a hashtable, you can add to it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/psspecialchar.png&#34; alt=&#34;PSSpecialChar&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The names are the same as used in &lt;code&gt;CharMap.exe&lt;/code&gt;. Don&#39;t let the naming confuse you. It may say &lt;code&gt;BlackSquare&lt;/code&gt;, but the color will depend on how you use it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-WindowsVersionString |&#xA;Add-Border -border $PSSpecialChar.BlackSmallSquare `&#xA;-ANSIBorder &#34;$([char]0x1b)[38;5;214m&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/psspecialchar-border.png&#34; alt=&#34;PSSpecialChar Border&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sample Scripts&lt;/h3&gt; &#xA;&lt;p&gt;This PowerShell module contains several functions you might use to enhance your functions and scripts. The &lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/samples&#34;&gt;Samples&lt;/a&gt; folder contains demonstration script files. You can access the folder in PowerShell using the &lt;code&gt;$PSSamplePath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dir $pssamplepath&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The samples provide suggestions on how you might use some of the commands in this module. The scripts are offered &lt;strong&gt;AS-IS&lt;/strong&gt; and are for demonstration purposes only.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/images/processpercent.png&#34; alt=&#34;ProcessPercent.ps1&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Open-PSScriptToolsHelp.md&#34;&gt;Open-PSScriptToolsHelp&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve created a PDF version of this document which I thought you might find useful since it includes screenshots and sample output rendered nicer than what you can get in PowerShell help. Run &lt;code&gt;Open-PSScriptToolsHelp&lt;/code&gt; to open the PDF using the default associated application.&lt;/p&gt; &#xA;&lt;h2&gt;Deprecated Commands&lt;/h2&gt; &#xA;&lt;p&gt;The following commands have been marked as deprecated and will be removed in a future release.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Set-ConsoleColor.md&#34;&gt;Set-ConsoleColor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jdhitsolutions/PSScriptTools/master/docs/Out-ConditionalColor.md&#34;&gt;Out-ConditionalColor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Modules&lt;/h2&gt; &#xA;&lt;p&gt;If you find this module useful, you might also want to look at my PowerShell tools for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jdhitsolutions/PSReleaseTools&#34;&gt;Keeping up to date with PowerShell 7.x releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jdhitsolutions/PSProjectStatus&#34;&gt;Module and Project Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jdhitsolutions/PSTypeExtensionTools&#34;&gt;Creating and managing custom type extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jdhitsolutions/ScheduledJobTools&#34;&gt;Managing scheduled jobs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jdhitsolutions/PSFunctionTools&#34;&gt;Automating the PowerShell scripting process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jdhitsolutions/PSWorkItem&#34;&gt;A simple command-line task and to-do manager&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Where possible, module commands have been tested with PowerShell 7.x, but not on every platform. If you encounter problems, have suggestions, or have other feedback, please post an &lt;a href=&#34;https://github.com/jdhitsolutions/PSScriptTools/issues&#34;&gt;issue&lt;/a&gt;. It is assumed you will &lt;strong&gt;not&lt;/strong&gt; be running these commands on any edition of PowerShell Core, i.e PowerShell 6.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>soteria-security/365Inspect</title>
    <updated>2023-08-01T01:33:05Z</updated>
    <id>tag:github.com,2023-08-01:/soteria-security/365Inspect</id>
    <link href="https://github.com/soteria-security/365Inspect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A PowerShell script that automates the security assessment of Microsoft Office 365 environments.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Purpose&lt;/h1&gt; &#xA;&lt;p&gt;Further the state of O365 security by authoring a PowerShell script that automates the security assessment of Microsoft Office 365 environments.&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;365&lt;em&gt;Inspect&lt;/em&gt; requires the administrative PowerShell modules for Exchange administration, Microsoft Graph, Microsoft Teams, and the Sharepoint administration module.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;365&lt;em&gt;Inspect&lt;/em&gt; is now compatible with PowerShell Core (6+), and requires a Microsoft Windows operating system due to required module dependencies.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The 365&lt;em&gt;Inspect&lt;/em&gt;.ps1 PowerShell script will validate the installed modules and minimum version of the modules necessary for the Inspectors to function.&lt;/p&gt; &#xA;&lt;p&gt;If you do not have these modules installed, you will be prompted to install them, and with your approval, the script will attempt installation. Otherwise, you should be able to install them with the following commands in an administrative PowerShell prompt, or by following the instructions at the references below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Module -Name ExchangeOnlineManagement -AllowClobber -Force&#xA;&#xA;Install-Module -Name Microsoft.Online.SharePoint.PowerShell -AllowClobber -Force&#xA;&#xA;Install-Module -Name Microsoft.Graph -AllowClobber -Force&#xA;&#xA;Install-Module -Name MicrosoftTeams -AllowClobber -Force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/exchange/exchange-online-powershell-v2?view=exchange-ps&#34;&gt;Install Exchange Online PowerShell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/sharepoint/sharepoint-online/connect-sharepoint-online?view=sharepoint-ps&#34;&gt;Install SharePoint&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/graph/powershell/installation&#34;&gt;Install Microsoft Graph SDK&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/microsoftteams/teams-powershell-install&#34;&gt;Install Microsoft Teams PowerShell Module&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once the above are installed, download the 365&lt;em&gt;Inspect&lt;/em&gt; source code folder from Github using your browser or by using &lt;em&gt;git clone&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As you will run 365&lt;em&gt;Inspect&lt;/em&gt; with administrative privileges, you should place it in a logical location and make sure the contents of the folder are readable and writable only by the administrative user. This is especially important if you intend to install 365&lt;em&gt;Inspect&lt;/em&gt; in a location where it will be executed frequently or used as part of an automated process. &lt;strong&gt;NOTE:&lt;/strong&gt; 365&lt;em&gt;Inspect&lt;/em&gt; does not need to be run in an administrative PowerShell window to function.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;To run 365&lt;em&gt;Inspect&lt;/em&gt;, open a PowerShell console and navigate to the folder you downloaded 365&lt;em&gt;Inspect&lt;/em&gt; into:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd 365Inspect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will interact with 365&lt;em&gt;Inspect&lt;/em&gt; by executing the main script file, 365Inspect.ps1, from within the PowerShell command prompt.&lt;/p&gt; &#xA;&lt;p&gt;All 365&lt;em&gt;Inspect&lt;/em&gt; requires to inspect your O365 tenant is access via an O365 account with proper permissions, so most of the command line parameters relate to the organization being assessed and the method of authentication.&lt;/p&gt; &#xA;&lt;p&gt;Execution of 365&lt;em&gt;Inspect&lt;/em&gt; looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\365Inspect.ps1 -OutPath &amp;lt;value&amp;gt; -UserPrincipalName myuser@mytenant.onmicrosoft.com -Auth &amp;lt;MFA|ALREADY_AUTHED&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, to log in by entering your credentials in a browser with MFA support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    .\365Inspect.ps1 -OutPath ..\365_report -UserPrincipalName myuser@mytenant.onmicrosoft.com -Auth MFA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;365&lt;em&gt;Inspect&lt;/em&gt; now supports report output to HTML (default value), CSV, and XML formats.&lt;/p&gt; &#xA;&lt;p&gt;For example, CSV reports can be generated by calling the -ReportType parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    .\365Inspect.ps1 -OutPath ..\365_report -UserPrincipalName myuser@mytenant.onmicrosoft.com -Auth MFA -ReportType CSV&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;365&lt;em&gt;Inspect&lt;/em&gt; can be run with only specified Inspector modules, or conversely, by excluding specified modules.&lt;/p&gt; &#xA;&lt;p&gt;For example, to log in by entering your credentials in a browser with MFA support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    .\365Inspect.ps1 -OutPath ..\365_report -UserPrincipalName myuser@mytenant.onmicrosoft.com -Auth MFA -SelectedInspectors inspector1, inspector2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    .\365Inspect.ps1 -OutPath ..\365_report -Auth MFA -ExcludedInspectors inspector1, inspector2, inspector3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To break down the parameters further:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;OutPath&lt;/em&gt; is the path to a folder where the report generated by 365&lt;em&gt;Inspect&lt;/em&gt; will be placed. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Required? Yes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Auth&lt;/em&gt; is a selector that should be one of the literal values &#34;MFA&#34; or &#34;ALREADY_AUTHED&#34;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Auth&lt;/em&gt; controls how 365&lt;em&gt;Inspect&lt;/em&gt; will authenticate to all of the Office 365 services.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Auth MFA&lt;/em&gt; will produce a graphical popup in which you can type your credentials and even enter an MFA code for MFA-enabled accounts.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Auth ALREADY_AUTHED&lt;/em&gt; instructs 365&lt;em&gt;Inspect&lt;/em&gt; not to authenticate before scanning. This may be preferable if you are executing 365&lt;em&gt;Inspect&lt;/em&gt; from a PowerShell prompt where you already have valid sessions for all of the described services, such as one where you have already executed 365&lt;em&gt;Inspect&lt;/em&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Required? Yes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;SelectedInspectors&lt;/em&gt; is the name or names of the inspector or inspectors you wish to run with 365&lt;em&gt;Inspect&lt;/em&gt;. If multiple inspectors are selected they must be comma separated. Only the named inspectors will be run. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Required? No&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;ExcludedInspectors&lt;/em&gt; is the name or names of the inspector or inspectors you wish to prevent from running with 365&lt;em&gt;Inspect&lt;/em&gt;. If multiple inspectors are selected they must be comma separated. All modules other included modules will be run. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Required? No&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;UserPrincipalName&lt;/em&gt; - UserPrincipalName of the assessor, this is included to reduce the number of times you need to enter credentials in supported modules. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Required? Yes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;ReportType&lt;/em&gt; - Output format of the generated report. Current supported vales are HTML (default), CSV, and XML. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Required? No&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When you execute 365&lt;em&gt;Inspect&lt;/em&gt; with &lt;em&gt;-Auth MFA&lt;/em&gt;, it may produce several graphical login prompts that you must sequentially log into. This is normal behavior as Exchange, SharePoint etc. have separate administration modules and each requires a different login session. If you simply log in the requested number of times, 365&lt;em&gt;Inspect&lt;/em&gt; should begin to execute. This is the opposite of fun and we&#39;re seeking a workaround, but needless to say we feel the results are worth the minute spent looking at MFA codes.&lt;/p&gt; &#xA;&lt;p&gt;As 365&lt;em&gt;Inspect&lt;/em&gt; executes, it will steadily print status updates indicating which inspection task is running.&lt;/p&gt; &#xA;&lt;p&gt;365&lt;em&gt;Inspect&lt;/em&gt; may take some time to execute. This time scales with the size and complexity of the environment under test. For example, some inspection tasks involve scanning the account configuration of all users. This may occur near-instantly for an organization with 50 users, or could take entire minutes (!) for an organization with 10000.&lt;/p&gt; &#xA;&lt;h1&gt;Output&lt;/h1&gt; &#xA;&lt;p&gt;365&lt;em&gt;Inspect&lt;/em&gt; creates the directory specified in the out_path parameter. This directory is the result of the entire 365&lt;em&gt;Inspect&lt;/em&gt; inspection. It contains four items of note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Report.html&lt;/em&gt;: graphical report that describes the O365 security issues identified by 365&lt;em&gt;Inspect&lt;/em&gt;, lists O365 objects that are misconfigured, and provides remediation advice.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Various text files named [Inspector-Name]&lt;/em&gt;: these are raw output from inspector modules and contain a list (one item per line) of misconfigured O365 objects that contain the described security flaw. For example, if a module Inspect-FictionalMFASettings were to detect all users who do not have MFA set up, the file &#34;Inspect-FictionalMFASettings&#34; in the report ZIP would contain one user per line who does not have MFA set up. This information is only dumped to a file in cases where more than 15 affected objects are discovered. If less than 15 affected objects are discovered, the objects are listed directly in the main HTML report body.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Report.zip&lt;/em&gt;: zipped version of this entire directory, for convenient distribution of the results in cases where some inspector modules generated a large amount of findings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Log directory&lt;/em&gt;: 365&lt;em&gt;Inspect&lt;/em&gt; logs any errors encountered during the scripts execution to a timestamped log file found in the Log directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CSV Output&lt;/h3&gt; &#xA;&lt;p&gt;Due to the nature of some of the returned items, the csv report is delimited on the carat (^) character. It is recommended to open the CSV report in a text editor rather than Excel, as Excel defaults to a comma (,) delimiter and will render the report incorrectly. Once opened in a text editor, the data may be pasted into Excel.&lt;/p&gt; &#xA;&lt;h1&gt;Change Log&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;365&lt;em&gt;Inspect&lt;/em&gt;&#39;s HTML report format has changed &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Include new visual indicators of risk in the form of two charts &lt;img src=&#34;https://raw.githubusercontent.com/soteria-security/365Inspect/main/Images/Charts.png&#34; alt=&#34;Risk Charts&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Separated the PowerShell commands from the remediation steps and added syntax highlighting &lt;img src=&#34;https://raw.githubusercontent.com/soteria-security/365Inspect/main/Images/PowerShell.png&#34; alt=&#34;PowerShell Commands&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Moved the list of Inspectors executed to an appendix at the bottom of the report &lt;img src=&#34;https://raw.githubusercontent.com/soteria-security/365Inspect/main/Images/Appendix.png&#34; alt=&#34;Appendix&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Necessary Privileges&lt;/h1&gt; &#xA;&lt;p&gt;365&lt;em&gt;Inspect&lt;/em&gt; can&#39;t run properly unless the O365 account you authenticate with has appropriate privileges. 365&lt;em&gt;Inspect&lt;/em&gt; requires, at minimum, the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Global Administrator&lt;/li&gt; &#xA; &lt;li&gt;SharePoint Administrator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We realize that these are extremely permissive roles, unfortunately due to the use of Microsoft Graph, we are restricted from using lesser privileges by Microsoft. Application and Cloud Application Administrator roles (used to grant delegated and application permissions) are restricted from granting permissions for Microsoft Graph or Azure AD PowerShell modules. &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/roles/permissions-reference#application-administrator&#34;&gt;https://docs.microsoft.com/en-us/azure/active-directory/roles/permissions-reference#application-administrator&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Developing Inspector Modules&lt;/h1&gt; &#xA;&lt;p&gt;365&lt;em&gt;Inspect&lt;/em&gt; is designed to be easy to expand, with the hope that it enables individuals and organizations to either utilize their own 365&lt;em&gt;Inspect&lt;/em&gt; modules internally, or publish those modules for the O365 community.&lt;/p&gt; &#xA;&lt;p&gt;All of 365&lt;em&gt;Inspect&lt;/em&gt;&#39;s inspector modules are stored in the .\inspectors folder.&lt;/p&gt; &#xA;&lt;p&gt;It is simple to create an inspector module. Inspectors have two files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;ModuleName.ps1&lt;/em&gt;: the PowerShell source code of the inspector module. Should return a list of all O365 objects affected by a specific issue, represented as strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;ModuleName.json&lt;/em&gt;: metadata about the inspector itself. For example, the finding name, description, remediation information, and references.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Templates are included in the Templates folder. Simply add your code and values in the respective locations. The PowerShell and JSON file names must be identical for 365&lt;em&gt;Inspect&lt;/em&gt; to recognize that the two belong together. There are numerous examples in 365&lt;em&gt;Inspect&lt;/em&gt;&#39;s built-in suite of modules, but we&#39;ll put an example here too.&lt;/p&gt; &#xA;&lt;p&gt;Example .ps1 file, BypassingSafeAttachments.ps1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Define a function that we will later invoke.&#xA;# 365Inspect&#39;s built-in modules all follow this pattern.&#xA;function Inspect-BypassingSafeAttachments {&#xA;&#x9;# Query some element of the O365 environment to inspect. Note that we did not have to authenticate to Exchange&#xA;&#x9;# to fetch these transport rules within this module; assume main 365Inspect harness has logged us in already.&#xA;&#x9;$safe_attachment_bypass_rules = (Get-TransportRule | Where { $_.SetHeaderName -eq &#34;X-MS-Exchange-Organization-SkipSafeAttachmentProcessing&#34; }).Identity&#xA;&#x9;&#xA;&#x9;# If some of the parsed O365 objects were found to have the security flaw this module is inspecting for,&#xA;&#x9;# return a list of strings representing those objects. This is what will end up as the &#34;Affected Objects&#34;&#xA;&#x9;# field in the report.&#xA;&#x9;If ($safe_attachment_bypass_rules.Count -ne 0) {&#xA;&#x9;&#x9;return $safe_attachment_bypass_rules&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;# If none of the parsed O365 objects were found to have the security flaw this module is inspecting for,&#xA;&#x9;# returning $null indicates to 365Inspect that there were no findings for this module.&#xA;&#x9;return $null&#xA;}&#xA;&#xA;# Return the results of invoking the inspector function.&#xA;return Inspect-BypassingSafeAttachments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example .json file, BypassingSafeAttachments.json:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;FindingName&#34;: &#34;Do Not Bypass the Safe Attachments Filter&#34;,&#xA;    &#34;Description&#34;: &#34;In Exchange, it is possible to create mail transport rules that bypass the Safe Attachments detection capability. The rules listed above bypass the Safe Attachments capability. Consider reviewing these rules, as bypassing the Safe Attachments capability even for a subset of senders could be considered insecure depending on the context or may be an indicator of compromise.&#34;,&#xA;    &#34;Remediation&#34;: &#34;Navigate to the Mail Flow &amp;amp;rarr; Rules screen in the Exchange Admin Center. Look for the offending rules and begin the process of assessing who created them and whether they are necessary to the continued function of the organization. If they are not, remove the rules.&#34;,&#xA;    &#34;DefaultValue&#34;: &#34;None&#34;,&#xA;    &#34;ExpectedValue&#34;: &#34;None&#34;,&#xA;    &#34;ReturnedValue&#34;: &#34;&#34;,&#xA;    &#34;Impact&#34;: &#34;Critical&#34;,&#xA;    &#34;AffectedObjects&#34;: &#34;&#34;,&#xA;    &#34;Service&#34;: &#34;Exchange&#34;,  Valid values are Exchange, SharePoint, Teams, Intune, AzureAD, SecurityandCompliance, Tenant //&#xA;    &#34;PowerShell&#34;: &#34;&#34;,&#xA;    &#34;References&#34;: [&#xA;        {&#xA;            &#34;Url&#34;: &#34;https://docs.microsoft.com/en-us/exchange/security-and-compliance/mail-flow-rules/manage-mail-flow-rules&#34;,&#xA;            &#34;Text&#34;: &#34;Manage Mail Flow Rules in Exchange Online&#34;&#xA;        },&#xA;        {&#xA;            &#34;Url&#34;: &#34;https://www.undocumented-features.com/2018/05/10/atp-safe-attachments-safe-links-and-anti-phishing-policies-or-all-the-policies-you-can-shake-a-stick-at/#Bypass_Safe_Attachments_Processing&#34;,&#xA;            &#34;Text&#34;: &#34;Undocumented Features: Safe Attachments, Safe Links, and Anti-Phishing Policies&#34;&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you drop these two files in the .\inspectors folder, they are considered part of 365&lt;em&gt;Inspect&lt;/em&gt;&#39;s module inventory and will run the next time you execute 365&lt;em&gt;Inspect&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You have just created the BypassingSafeAttachments Inspector module. That&#39;s all!&lt;/p&gt; &#xA;&lt;p&gt;365&lt;em&gt;Inspect&lt;/em&gt; will throw a pretty loud and ugly error if something in your module doesn&#39;t work or doesn&#39;t follow 365&lt;em&gt;Inspect&lt;/em&gt; conventions, so monitor the command line output.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We encourage community involvement and contributions! Please check out our &lt;a href=&#34;https://raw.githubusercontent.com/soteria-security/365Inspect/main/.github/ISSUE_TEMPLATE/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;About Security&lt;/h1&gt; &#xA;&lt;p&gt;365&lt;em&gt;Inspect&lt;/em&gt; is a script harness that runs other inspector script modules stored in the .\inspectors folder. As with any other script you may run with elevated privileges, you should observe certain security hygiene practices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No untrusted user should have write access to the 365&lt;em&gt;Inspect&lt;/em&gt; folder/files, as that user could then overwrite scripts or templates therein and induce you to run malicious code.&lt;/li&gt; &#xA; &lt;li&gt;No script module should be placed in .\inspectors unless you trust the source of that script module.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>HoussemDellai/aca-course</title>
    <updated>2023-08-01T01:33:05Z</updated>
    <id>tag:github.com,2023-08-01:/HoussemDellai/aca-course</id>
    <link href="https://github.com/HoussemDellai/aca-course" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repository with templates and code showing how to work with Azure Container Apps (ACA)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aca-course&lt;/h1&gt; &#xA;&lt;p&gt;Repository with templates and code showing how to work with Azure Container Apps (ACA)&lt;/p&gt; &#xA;&lt;p&gt;ghcr.io/houssemdellai/containerapps-album-backend:v1 Port number : 3500&lt;/p&gt; &#xA;&lt;p&gt;ghcr.io/houssemdellai/containerapps-album-frontend:v1 Port number: 3000 Env: API_BASE_URL: &lt;a href=&#34;https://aca-album-backend.purplebay-a36f87ae.westeurope.azurecontainerapps.io&#34;&gt;https://aca-album-backend.purplebay-a36f87ae.westeurope.azurecontainerapps.io&lt;/a&gt; From &lt;a href=&#34;https://github.com/HoussemDellai/containerapps-albumui/pkgs/container/containerapps-album-frontend&#34;&gt;https://github.com/HoussemDellai/containerapps-albumui/pkgs/container/containerapps-album-frontend&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>