<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-05T01:34:53Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>acx0/csgo-cfg</title>
    <updated>2023-09-05T01:34:53Z</updated>
    <id>tag:github.com,2023-09-05:/acx0/csgo-cfg</id>
    <link href="https://github.com/acx0/csgo-cfg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CS:GO/CS2 config&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>jessehouwing/azure-pipelines-variable-tasks</title>
    <updated>2023-09-05T01:34:53Z</updated>
    <id>tag:github.com,2023-09-05:/jessehouwing/azure-pipelines-variable-tasks</id>
    <link href="https://github.com/jessehouwing/azure-pipelines-variable-tasks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple build tasks to manipulate variables.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Release Notes&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;05-12-2022&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Changed: Upped version to 3.*&lt;/li&gt; &#xA;  &lt;li&gt;Updated to &lt;code&gt;Azure-pipelines-task-lib@4&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Updated to Node 16 (available in &lt;code&gt;@3&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Removed Node 6 support from v3 (available for backwards-compat through &lt;code&gt;@2&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Dropped dependency on core-js for v3.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;19-10-2021&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Added: Ability to update ReleaseName with the new command string required in Azure DevOps 2020.&lt;/li&gt; &#xA;  &lt;li&gt;Added: Backwards compat option for Azure DevOps 2019 and below&lt;/li&gt; &#xA;  &lt;li&gt;Changed: Upped version number to 2.*&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;15-04-2020&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Fixed: &lt;a href=&#34;https://github.com/jessehouwing/azure-pipelines-variable-tasks/issues/48&#34;&gt;#48 Update to latest task-lib contains a breaking change&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Added: &#34;Use Tasklib&#34; option under Advanced section to control escape behavior introduced in &lt;a href=&#34;https://github.com/microsoft/azure-pipelines-task-lib/commits/master/node/taskcommand.ts&#34;&gt;recent tasklib&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Updated: moved to latest Task SDK and dependencies&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;23-01-2018&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Changed: Re-implemented Variable-Set in v3 PowerShell handler for better performance.&lt;/li&gt; &#xA;  &lt;li&gt;Fixed: Pad-left and Pad-right now uses core-js library.&lt;/li&gt; &#xA;  &lt;li&gt;Updated: moved to latest Task SDK and dependencies.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;17-11-2017&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Fixed: Set Build.BuldNumber doesn&#39;t work on most recent Windows Build agents. Updated to VSTS-Task-Lib 2.1.0 to fix.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;1-9-2016&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Fixed: Expand Variable Task throws an error on Agent 2.x, you can now remove this task, it is no longer needed. The new agent will automatically expand all variables.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;20-5-2016&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Removed: Preview flag&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;19-5-2016&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Fixed: Replace with &#34;&#34; would result in &#34;nullOriginalValue&#34;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;This Extension contains a slowly growing collection of tasks that help you manipulate and (soon) validate the values of build variables.&lt;/p&gt; &#xA;&lt;h1&gt;Set Variable&lt;/h1&gt; &#xA;&lt;p&gt;Have you ever wanted to change the value of a variable between multiple build steps? Simply add the &lt;strong&gt;Set Variable&lt;/strong&gt; task to your workflow and tell it which value you want to assign to which variable.&lt;/p&gt; &#xA;&lt;p&gt;You can use the value of other build variables to setup the value.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Set: &#39;Build.DropLocation&#39; to &#39;\\share\drops$(Build.DefinitionName)$(Build.BuildNumber)&#39;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;em&gt;Variablename&lt;/em&gt;: &lt;code&gt;Build.DropLocation&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;em&gt;Value&lt;/em&gt;: &lt;code&gt;\\share\drops\$(Build.DefinitionName)\$(Build.BuildNumber)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;By assigning to the &lt;code&gt;Build.BuildNumber&lt;/code&gt; variable, the build number of the Build will be updated/overwritten.&lt;/p&gt; &#xA;&lt;h1&gt;Transform value and assign to Variable&lt;/h1&gt; &#xA;&lt;p&gt;If you need to do more advanced transformations of your values, use the transform task. You can use it to encode/decode the value and apply a number of simpe string manipulations, including Search &amp;amp; Replace, Change Case, Trim, Pad etc.&lt;/p&gt; &#xA;&lt;p&gt;You can use the value of other build variables to setup the value.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Transform: &#39;your value here&#39; and assign to Variable: VariableName&#39;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;em&gt;Input Value&lt;/em&gt;: &lt;code&gt;\\share\drops\$(Build.DefinitionName)\$(Build.BuildNumber)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;em&gt;Variablename&lt;/em&gt;: &lt;code&gt;Build.DropLocation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;By assigning to the &lt;code&gt;Build.BuildNumber&lt;/code&gt; variable, the build number of the Build will be updated/overwritten.&lt;/p&gt; &#xA;&lt;p&gt;You can apply the following manipulations (they&#39;ll be exectuted in the specified order):&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Manipulation&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;[x] &lt;em&gt;Search &amp;amp; Replace&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Use: &lt;code&gt;Basic&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Search: &lt;code&gt;$Build.DefinitionName&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Replacement: &lt;code&gt;%%Placeholder%%&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;[x] Trim&lt;/li&gt; &#xA;  &lt;li&gt;[ ] Slice&lt;/li&gt; &#xA;  &lt;li&gt;[ ] Substring&lt;/li&gt; &#xA;  &lt;li&gt;[ ] Change Case&lt;/li&gt; &#xA;  &lt;li&gt;[ ] Pad&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;And finally you can transform (encode/decode) the string using:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Base64&lt;/li&gt; &#xA;  &lt;li&gt;Uri&lt;/li&gt; &#xA;  &lt;li&gt;UriComponent&lt;/li&gt; &#xA;  &lt;li&gt;AddSlashes / StripSlashes&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Expand Variables [DEPRECATED]&lt;/h1&gt; &#xA;&lt;p&gt;Have you ever wanted to use the value from one variable in another variable? Unfortunately, that&#39;s not possible with the standard Variables screen.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Build.DropLocation&lt;/td&gt; &#xA;   &lt;td&gt;\\share\drops$(Build.DefinitionName)$(Build.BuildNumber)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Will simply send the literal text to the tasks in your workflow.&lt;/p&gt; &#xA;&lt;p&gt;Add the Expand Variable(s) task to the top of your build steps and it will take care of the expansion for you. It even supportes multiple levels of nested variables!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Expand variable: &#39;Build.DropLocation&#39;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;em&gt;Variablename(s)&lt;/em&gt;: &lt;code&gt;Build.DropLocation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Will expand your drop location variable to:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Build.DropLocation&lt;/td&gt; &#xA;   &lt;td&gt;\\share\drops\My Definition\My Definition_1.2.123&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;And to make your life easier it now supports simply expanding all your variables!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Expand variable: &#39;*&#39;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;em&gt;Variablename(s)&lt;/em&gt;: &lt;code&gt;*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://github.com/jessehouwing/vsts-variable-tasks/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you like this extension, please leave a review and feedback. If you&#39;d have suggestions or an issue, please &lt;a href=&#34;https://github.com/jessehouwing/vsts-variable-tasks/issues&#34;&gt;file an issue to give me a chance to fix it&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>federella/CVE-2023-41717</title>
    <updated>2023-09-05T01:34:53Z</updated>
    <id>tag:github.com,2023-09-05:/federella/CVE-2023-41717</id>
    <link href="https://github.com/federella/CVE-2023-41717" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository is to provide a write-up and PoC for CVE-2023-41717.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2023-41717&lt;/h1&gt; &#xA;&lt;p&gt;Inappropriate file type control in Zscaler Proxy versions 3.6.1.25 and prior allows local attackers to bypass file download/upload restrictions.&lt;/p&gt; &#xA;&lt;h2&gt;Executive Summary&lt;/h2&gt; &#xA;&lt;p&gt;During the summer of 2022, I have found a vulnerability affecting the ZScaler proxy (versions 3.6.1.25 and prior). This vulnerability would allow local attackers to bypass the restriction on downloads/uploads of password-protected archives using tools like Burp or even native Microsoft utilities like Bitsadmin, which relies on the Background Intelligent Transfer Service (BITS) protocol.&lt;/p&gt; &#xA;&lt;p&gt;Per Microsoft’s documentation, the BITS protocol &lt;em&gt;“defines a way to transfer large payloads from a client to an HTTP server or vice versa, even in the face of interruptions, by sending the payload in multiple fragments”&lt;/em&gt;. This allows to bypass restrictions based on file type as Zscaler is not able to properly reconstruct the file across multiple requests.&lt;/p&gt; &#xA;&lt;p&gt;Although this proof of concept will focus only on the &lt;em&gt;download&lt;/em&gt; aspect, this vulnerability applies to the uploads as well.&lt;/p&gt; &#xA;&lt;h2&gt;Proof of Concept&lt;/h2&gt; &#xA;&lt;p&gt;In this section, two different methods for bypassing Zscaler’s restrictions on downloading password-protected archives are highlighted. Tests were performed on version 3.6.1.25 of the client, using the following &lt;a href=&#34;https://www.malware-traffic-analysis.net/2022/10/04/2022-10-04-IOCs-for-IcedID-infection-with-Cobalt-Strike.txt.zip&#34;&gt;URL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Method 1: Manual crafting of HTTP requests&lt;/h3&gt; &#xA;&lt;p&gt;The first method involves modifying HTTP request, which can be done either using a browser or a tool like Burp Suite. For the sake of this test, I have chosen the former.&lt;/p&gt; &#xA;&lt;p&gt;The image below shows the request being intercepted and blocked by Zscaler. The request is then retransmitted after adding the &lt;code&gt;Range&lt;/code&gt; header with value &lt;code&gt;bytes = 0-x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is an arbitrary value smaller than the total file size.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/federella/CVE-2023-41717/raw/main/images/1.png&#34; alt=&#34;ZScaler blocking password-protected downloads&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once the request is retransmitted, a response with status code “206 Partial Content” is received. The response headers will show the total file size, while the response payload is encoded in base64.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/federella/CVE-2023-41717/raw/main/images/2.png&#34; alt=&#34;Sample response 1/2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/federella/CVE-2023-41717/raw/main/images/3.png&#34; alt=&#34;Sample response 2/2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The requests are repeated by manually increasing the byte range value, until the last file chunk is reached.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/federella/CVE-2023-41717/raw/main/images/4.png&#34; alt=&#34;Multiple requests&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The resulting payload can be reconstructed in various ways: for this test, a custom Powershell script has been used (you can find it in &lt;strong&gt;Reconstruct-Payload.ps1&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The MD5 hash of the reconstructed zip file (&lt;code&gt;CE6CFFEA60C6CDF40C998E56B6EFBD20&lt;/code&gt;) matches the expected one found on Virus Total.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/federella/CVE-2023-41717/raw/main/images/5.png&#34; alt=&#34;PowerShell Script&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/federella/CVE-2023-41717/raw/main/images/6.png&#34; alt=&#34;Resulting hash&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/federella/CVE-2023-41717/raw/main/images/7.png&#34; alt=&#34;Hash check on VT&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Method 2: BITS&lt;/h3&gt; &#xA;&lt;p&gt;The second method leverages Microsoft&#39;s BITS protocol, which natively splits the download requests in chunks.&lt;/p&gt; &#xA;&lt;p&gt;This test has been done using the CLI utility &lt;strong&gt;bitsadmin.exe&lt;/strong&gt;, with the following command line:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bitsadmin.exe /transfer &amp;lt;job name&amp;gt; /download /priority normal &amp;lt;URL&amp;gt; &amp;lt;path_destination_file&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/federella/CVE-2023-41717/raw/main/images/8.png&#34; alt=&#34;Bitsadmin commandline&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/federella/CVE-2023-41717/raw/main/images/9.png&#34; alt=&#34;Bitsadmin test&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The resulting zip’s MD5 hash matches the one found in the previous section.&lt;/p&gt;</summary>
  </entry>
</feed>