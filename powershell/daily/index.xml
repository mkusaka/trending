<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-02T01:44:08Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dell/iDRAC-Redfish-Scripting</title>
    <updated>2023-02-02T01:44:08Z</updated>
    <id>tag:github.com,2023-02-02:/dell/iDRAC-Redfish-Scripting</id>
    <link href="https://github.com/dell/iDRAC-Redfish-Scripting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python and PowerShell scripting for Dell EMC PowerEdge iDRAC REST API with DMTF Redfish&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iDRAC-Redfish-Scripting&lt;/h1&gt; &#xA;&lt;p&gt;Python and PowerShell scripting for Dell EMC PowerEdge iDRAC REST API with DMTF Redfish.&lt;/p&gt; &#xA;&lt;p&gt;Sample scripts written in Python and PowerShell that illustrate using the integrated Dell Remote Access Controller (iDRAC) REST API with Redfish to manage Dell EMC PowerEdge servers.&lt;/p&gt; &#xA;&lt;p&gt;Powershell cmdlets can also be installed from Powershell gallery using Install-Module. Recommended to install IdracRedfishSupport module which will import all iDRAC cmdlets.&lt;/p&gt; &#xA;&lt;p&gt;For Python, you can leverage either individual python scripts or install iDRAC Python Redfish module. This module is an interactive session with an iDRAC which allows you to perform multiple workflows like firwmare updates or configuration changes to BIOS, NIC or Storage. You can install this module by running &#34;pip3 install IdracRedfishSupport&#34;.&lt;/p&gt; &#xA;&lt;p&gt;When executing any script or cmdlet, if your username or password has special characters or passing in domain name along with username, make sure to surround the argument value with double quotes.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;p&gt;&#34;testdomain.i\aduser&#34;, &#34;testdomain.i/aduser&#34;, &#34;&lt;a href=&#34;mailto:aduser@testdomain.i&#34;&gt;aduser@testdomain.i&lt;/a&gt;&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Redfish Overview&lt;/h2&gt; &#xA;&lt;p&gt;There are various Out-of-Band (OOB) systems management standards available in the industry today. However, there is no single standard that can be easily used within emerging programming standards, can be readily implemented within embedded systems, and can meet the demands of today’s evolving IT solution models. New IT solutions models have placed new demands on systems management solutions to support expanded scale, higher security, and multi-vendor openness, while also aligning with modern DevOps tools and processes. Recognizing these needs, Dell EMC and other IT solutions leaders within the Distributed Management Task Force (DMTF) undertook the creation of a new management interface standard. After a multi-year effort, the new standard, Redfish v1.0, was announced in July, 2015.&lt;/p&gt; &#xA;&lt;p&gt;Redfish’s key benefits include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increased simplicity and usability&lt;/li&gt; &#xA; &lt;li&gt;Encrypted connections and generally heightened security&lt;/li&gt; &#xA; &lt;li&gt;A programmatic interface that can easily be controlled through scripts&lt;/li&gt; &#xA; &lt;li&gt;Based on widely-used standards for web APIs and data formats&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Redfish has been designed to support the full range of server architectures from monolithic servers to converged infrastructure and hyper-scale architecture. The Redfish data model, which defines the structure and format of data representing server status, inventory and available operational functions, is vendor-neutral. Administrators can then create management automation scripts that can manage any Redfish compliant server. This is crucial for the efficient operation of a heterogonous server fleet.&lt;/p&gt; &#xA;&lt;p&gt;Using Redfish also has significant security benefits: unlike legacy management protocols, Redfish utilizes HTTPS encryption for secure and reliable communication. All Redfish network traffic, including event notifications, can be sent encrypted across the network.&lt;/p&gt; &#xA;&lt;p&gt;Redfish provides a highly organized and easily accessible method to interact with a server using scripting tools. The web interface employed by Redfish is supported by many programming languages, and its tree-like structure makes information easier to locate. Data returned from a Redfish query can be turned into a searchable dictionary consisting of key-value-pairs. By looking at the values in the dictionary, it is easy to locate settings and current status of a Redfish managed system. These settings can then be updated and actions issued to one or multiple systems.&lt;/p&gt; &#xA;&lt;h2&gt;iDRAC with Lifecycle Controller Overview&lt;/h2&gt; &#xA;&lt;p&gt;The Integrated Dell Remote Access Controller (iDRAC) is designed to enhance the productivity of server administrators and improve the overall availability of PowerEdge servers. iDRAC alerts administrators to server problems, enabling remote server management, and reducing the need for an administrator to physically visit the server. iDRAC with Lifecycle Controller allows administrators to deploy, update, monitor and manage Dell servers from any location without the use of agents in a one-to-one or one-to-many method. This out-of-band management allows configuration changes and firmware updates to be managed from Dell EMC, appropriate third-party consoles, and custom scripting directly to iDRAC with Lifecycle Controller using supported industry-standard API’s. To support the Redfish standard, the iDRAC with Lifecycle Controller includes support for the iDRAC REST API in addition to support for the IPMI, SNMP, and WS-Man standard APIs. The iDRAC REST API builds upon the Redfish standard to provide a RESTful interface for Dell EMC value-add operations including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Information on all iDRAC with Lifecycle Controller out-of-band services—web server, SNMP, virtual media, SSH, Telnet, IPMI, and KVM&lt;/li&gt; &#xA; &lt;li&gt;Expanded storage subsystem reporting covering controllers, enclosures, and drives&lt;/li&gt; &#xA; &lt;li&gt;For the PowerEdge FX2 modular server, detailed chassis information covering power supplies, temperatures, and fans&lt;/li&gt; &#xA; &lt;li&gt;With the iDRAC Service Module (iSM) installed under the server OS, the API provides detailed inventory and status reporting for host network interfaces including such details as IP address, subnet mask, and gateway for the Host OS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learning more about iDRAC and Redfish&lt;/h2&gt; &#xA;&lt;p&gt;For complete information concerning iDRAC with Lifecycle Controller, see the documents at &lt;a href=&#34;http://www.dell.com/idracmanuals&#34;&gt;http://www.dell.com/idracmanuals&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;See iDRAC whitepapers below for more information about overview of Redfish support, detailed workflow examples or commonly asked questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://en.community.dell.com/techcenter/extras/m/white_papers/20442330&#34;&gt;Implementation of the DMTF Redfish API on Dell PowerEdge Servers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://en.community.dell.com/techcenter/extras/m/white_papers/20443207&#34;&gt;RESTful Server Configuration with iDRAC REST API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.dell.com/content/manual9969682-idrac9-racadm-to-redfish-mapping.pdf?language=en-us&#34;&gt;iDRAC RACADM to Redfish Mapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.dell.com/content/manual24821844-idrac9-user-interface-to-redfish-mapping.pdf?language=en-us&#34;&gt;iDRAC User Interface to Redfish Mapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.dell.com/content/manual16004247-idrac-redfish-faq.pdf?language=en-us&#34;&gt;iDRAC Redfish FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For details on the DMTF Redfish standard, visit &lt;a href=&#34;https://www.dmtf.org/standards/redfish&#34;&gt;https://www.dmtf.org/standards/redfish&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;iDRAC REST API with Redfish Scripting Library&lt;/h2&gt; &#xA;&lt;p&gt;This GitHub library contains example Python and PowerShell scripts that illustrate the usage of the iDRAC REST API with Redfish to perform many different workflows which include:&lt;/p&gt; &#xA;&lt;p&gt;BIOS operations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get / Set BIOS attributes&lt;/li&gt; &#xA; &lt;li&gt;Get / Set BIOS boot order, boot source state&lt;/li&gt; &#xA; &lt;li&gt;Set next one-time boot device&lt;/li&gt; &#xA; &lt;li&gt;Set BIOS to default settings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;iDRAC operations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change an iDRAC user password&lt;/li&gt; &#xA; &lt;li&gt;Set iDRAC to default settings&lt;/li&gt; &#xA; &lt;li&gt;Get iDRAC Lifecycle Controller logs&lt;/li&gt; &#xA; &lt;li&gt;Get / Set iDRAC, Lifecycle Controller, and System Attributes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Firmware operations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get server firmware inventory&lt;/li&gt; &#xA; &lt;li&gt;Perform a single server device firmware update&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Server operations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Export / Import Server Configuration Profile (SCP)&lt;/li&gt; &#xA; &lt;li&gt;Preview SCP Import&lt;/li&gt; &#xA; &lt;li&gt;Get / Set server power state&lt;/li&gt; &#xA; &lt;li&gt;Get server storage inventory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Storage operations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create virtual disk&lt;/li&gt; &#xA; &lt;li&gt;Reset controller&lt;/li&gt; &#xA; &lt;li&gt;Set / Rekey / Remove controller encryption&lt;/li&gt; &#xA; &lt;li&gt;Assign / Unassign DHS / GHS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Prerequisites&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PowerEdge 12G/13G/14G/15G servers&lt;/li&gt; &#xA; &lt;li&gt;Minimum iDRAC 7/8 FW 2.40.40.40, iDRAC9 FW 3.00.00.00&lt;/li&gt; &#xA; &lt;li&gt;Python 3.x&lt;/li&gt; &#xA; &lt;li&gt;PowerShell 5.0 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Please note this code is provided as-is and currently not supported by Dell.&lt;/p&gt; &#xA;&lt;h2&gt;Report problems or provide feedback&lt;/h2&gt; &#xA;&lt;p&gt;If you run into any problems or would like to provide feedback, please open an issue here &lt;a href=&#34;https://github.com/dell/idrac-Redfish-Scripting/issues&#34;&gt;https://github.com/dell/idrac-Redfish-Scripting/issues&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>okibcn/wslcompact</title>
    <updated>2023-02-02T01:44:08Z</updated>
    <id>tag:github.com,2023-02-02:/okibcn/wslcompact</id>
    <link href="https://github.com/okibcn/wslcompact" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compacts the size of the WSL images by removing unused space.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WSLCOMPACT&lt;/h1&gt; &#xA;&lt;p&gt;Compacts the size of the WSL images by removing unused empty space.&lt;/p&gt; &#xA;&lt;p&gt;(Do you like this utility? give it a ⭐)&lt;/p&gt; &#xA;&lt;h2&gt;FEATURES&lt;/h2&gt; &#xA;&lt;p&gt;The Windows Subsystem for Linux (WSL) uses VHDX image files to store the ext4 filesystem, but it lacks an effective way to shrink the image when the files are removed. This utility compacts the vhdx virtual images of the WSL2 distros. It achieves the minimum possible size. The program provides the following info for each installed distro:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Distro&#39;s name.&lt;/li&gt; &#xA; &lt;li&gt;image file location.&lt;/li&gt; &#xA; &lt;li&gt;Current size of the image file.&lt;/li&gt; &#xA; &lt;li&gt;Estimated compacted size.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default it will perform in info mode, no action on images. If no distro is specified, it will target all the installed images sequentially. It operates in safe mode during the compact process, preventing any unwanted side effect in case of failure.&lt;/p&gt; &#xA;&lt;h2&gt;INSTALLATION&lt;/h2&gt; &#xA;&lt;p&gt;The easier way to install wslcompact is by using &lt;strong&gt;&lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop package manager&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If it is not yet installed in your system, Install Scoop by opening a PowerShell terminal (version 5.1 or later) and running in powershell:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time&#xA;irm get.scoop.sh | iex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add the wslcompact utility directly from its bucket:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;scoop bucket add .oki https://github.com/okibcn/Bucket&#xA;scoop install wslcompact&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update the app just type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;scoop update wslcompact&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To remove the app just type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;scoop uninstall wslcompact&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;USAGE&lt;/h2&gt; &#xA;&lt;p&gt;The usage is straightforward:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Calling &lt;code&gt;wslcompact&lt;/code&gt; without arguments lists all the WSL images and information. No action on images will be performed.&lt;/li&gt; &#xA; &lt;li&gt;You can select specific distros by passing their names as parameters, for instance &lt;code&gt;wslcompact Ubuntu&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When using the &lt;code&gt;-c&lt;/code&gt; compact option, wslcompact will modify the images after confirmation.&lt;/li&gt; &#xA; &lt;li&gt;There is a special mode for data partitions. &lt;code&gt;-d&lt;/code&gt; allows the compact of data partitions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;the utility ensures a minimal size and you end up with contiguous files for faster access in old HD-based systems. Should you need the list of names of your distros, it is accessible by typing &lt;code&gt;wsl -l&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   Usage: wslcompact [OPTIONS] [DISTROS]&#xA;&#xA;   wslcompact compacts the images of WSL distros by removing unsused space.&#xA;   If no option is provided, it will default to info mode, without modifying any image.&#xA;   If no distro is provided it will process all the installed images.&#xA;   NOTE: WSL will be shutdown for compacting the images.&#xA;&#xA;   Options:&#xA;   no opt. Provides name, image file path, current size, and estimated new size information.&#xA;       -c   Compacting mode: process the selected distros compacting the images.&#xA;       -y   replaces selected images without asking for confirmation.&#xA;       -d   Enable the processing of data images. Default is disabled.&#xA;       -h   Prints this help&#xA;&#xA;   Examples:&#xA;       wslcompact&#xA;       wslcompact -c -d&#xA;       wslcompact -c -y Ubuntu Kali&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if your C: drive doesn&#39;t have enough temporal free space, the program won&#39;t compact that distro. Just change the TEMP folder before calling the function. So, instead of a simple &lt;code&gt;wslcompact&lt;/code&gt;, just do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;$env:TEMP=&#34;Z:\your temp\folder&#34;&#xA;wslcompact&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The new TEMP folder will be active only for that PowerShell terminal session, so no problem at all for the rest of the system and it won&#39;t leave garbage.&lt;/p&gt; &#xA;&lt;h2&gt;EXAMPLES&lt;/h2&gt; &#xA;&lt;p&gt;A typical operation would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS&amp;gt; wslcompact&#xA; WSL compact, v4.2023.01.31&#xA; (C) 2023 Oscar Lopez&#xA; wslcompact -h for help. For more information visit: https://github.com/okibcn/wslcompact&#xA;&#xA; Distro&#39;s name:  Ubuntu&#xA; Image file:     C:\Users\Oki\WSL\Ubuntu\ext4.vhdx&#xA; Current size:   12864 MB&#xA; Estimated size: 7700 ± 188 MB&#xA; The estimated process time using an SSD is about 2 minutes.&#xA;&#xA; Distro&#39;s name:  Kali&#xA; Image file:     C:\Users\Oki\WSL\Kali\ext4.vhdx&#xA; Current size:   1579 MB&#xA; Estimated size: 723 ± 18 MB&#xA; The estimated process time using an SSD is about 1 minutes.&#xA;&#xA; Distro&#39;s name:  Arch&#xA; Image file:     C:\Users\Oki\WSL\Arch\ext4.vhdx&#xA; Current size:   1075 MB&#xA; Estimated size: 860 ± 21 MB&#xA; The estimated process time using an SSD is about 1 minutes.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compacting the Ubuntu image with confirmation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS&amp;gt; wslcompact -c Ubuntu&#xA; WSL compact, v4.2023.01.31&#xA; (C) 2023 Oscar Lopez&#xA; wslcompact -h for help. For more information visit: https://github.com/okibcn/wslcompact&#xA;&#xA; Distro&#39;s name:  Ubuntu&#xA; Image file:     C:\Users\Oki\WSL\Ubuntu\ext4.vhdx&#xA; Current size:   12864 MB&#xA; Estimated size: 7700 ± 188 MB&#xA; The estimated process time using an SSD is about 2 minutes.&#xA; NOTE: You can safely cancel at any time by pressing Ctrl-C&#xA; Import in progress, this may take a few minutes.&#xA;The operation completed successfully.&#xA; New Image compacted from 12864 MB to 7728 MB&#xA; Do you want to apply changes and use the new image (y/N): y&#xA; Image replaced for distro: Ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Remitly/Creativity-in-the-face-of-adversity</title>
    <updated>2023-02-02T01:44:08Z</updated>
    <id>tag:github.com,2023-02-02:/Remitly/Creativity-in-the-face-of-adversity</id>
    <link href="https://github.com/Remitly/Creativity-in-the-face-of-adversity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Files for blog post&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Creativity-in-the-face-of-adversity&lt;/h1&gt; &#xA;&lt;p&gt;Files for blog post&lt;/p&gt;</summary>
  </entry>
</feed>