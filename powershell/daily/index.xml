<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-12T01:36:13Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YannickRe/azuredevops-buildagents</title>
    <updated>2024-02-12T01:36:13Z</updated>
    <id>tag:github.com,2024-02-12:/YannickRe/azuredevops-buildagents</id>
    <link href="https://github.com/YannickRe/azuredevops-buildagents" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate self-hosted build agents for Azure DevOps, just like Microsoft does.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DevOps Build Agents&lt;/h1&gt; &#xA;&lt;p&gt;This project generates self-hosted build agents based on the &lt;a href=&#34;https://github.com/actions/runner-images&#34;&gt;official Microsoft-hosted build agents images&lt;/a&gt;, in an Azure DevOps Pipeline. The resulting Azure Managed Image will be associated to the existing Virtual Machine Scale Set so that new VM&#39;s will be using the newly generated image. This Virtual Machine Scale Set is managed by Azure DevOps as a &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/agents?view=azure-devops&amp;amp;tabs=browser&amp;amp;WT.mc_id=M365-MVP-5003400#azure-virtual-machine-scale-set-agents&#34;&gt;Azure Virtual Machine Scale Set Agent&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently supports Windows Server 2019, Windows Server 2022, Ubuntu 2004 and Ubuntu 2204 images.&lt;/p&gt; &#xA;&lt;h2&gt;Available pipelines&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YannickRe/azuredevops-buildagents/main/buildagent-generation.yml&#34;&gt;buildagent-generation.yml&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Checkout the latest &lt;code&gt;main&lt;/code&gt; branch from &lt;a href=&#34;https://github.com/actions/runner-images&#34;&gt;actions/runner-images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Build the VM with Packer&lt;/li&gt; &#xA;   &lt;li&gt;Clean up remaining temporary Azure resources&lt;/li&gt; &#xA;   &lt;li&gt;Add Azure Managed Image to Azure Compute Gallery or Update Virtual Machine Scale Set with the new image&lt;/li&gt; &#xA;   &lt;li&gt;Remove Azure Managed Image when using Azure Compute Gallery&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YannickRe/azuredevops-buildagents/main/managedimage-cleanup.yml&#34;&gt;managedimage-cleanup.yml&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Remove unused Azure Managed Images or old Gallery image versions, depending on selection&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preparation&lt;/h2&gt; &#xA;&lt;p&gt;The pipeline requires Azure resources for the temporary building of the VM image, Azure resources for running the resulting Agent Pool, and some configuration in Azure DevOps.&lt;/p&gt; &#xA;&lt;h2&gt;Azure Compute Gallery&lt;/h2&gt; &#xA;&lt;p&gt;Create (if you donÂ´t have one) an Azure Compute Gallery in your Azure subscription, and create the following VM Image Definitions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ubuntu2004-agentpool-full (OS: Linux)&lt;/li&gt; &#xA; &lt;li&gt;ubuntu2204-agentpool-full (OS: Linux)&lt;/li&gt; &#xA; &lt;li&gt;windows2019-agentpool-full (OS: Windows)&lt;/li&gt; &#xA; &lt;li&gt;windows2022-agentpool-full (OS: Windows)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This step will be automated in a later stage.&lt;/p&gt; &#xA;&lt;h3&gt;Azure Resources for Packer execution&lt;/h3&gt; &#xA;&lt;p&gt;The Azure resources are created with the &lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/azure/new-azureps-module-az?WT.mc_id=M365-MVP-5003400&#34;&gt;Azure PowerShell Module&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Connect to Azure&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;Connect-AzAccount -UseDeviceAuthentication&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Create resource group that will store the Packer temporary resources&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;New-AzResourceGroup -Name &#34;DevOps-PackerResources&#34; -Location &#34;West Europe&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Create Azure AD Service Principal, output client secret and client id&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$sp = New-AzADServicePrincipal -DisplayName &#34;DevOps-Packer&#34;&#xA;$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($sp.Secret)&#xA;$plainPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)&#xA;$plainPassword&#xA;$sp.ApplicationId&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Make the Service Principal a Contributor on the subscription&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;New-AzRoleAssignment -RoleDefinitionName Contributor -ServicePrincipalName $sp.ApplicationId&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Azure Virtual Machine Scale Set&lt;/h3&gt; &#xA;&lt;p&gt;To use an Azure Virtual Machine Scale Set as an Azure DevOps Scale Set Agent it has to adhere to a certain set of requirements. &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/scale-set-agents?view=azure-devops&amp;amp;WT.mc_id=M365-MVP-5003400#create-the-scale-set&#34;&gt;The documentation&lt;/a&gt; contains all the required information, but at the time of writing the following things were important:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;VM size&lt;/strong&gt;: at least &lt;em&gt;Standard_D4s_v4&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Overprovisioning&lt;/strong&gt;: &lt;em&gt;no&lt;/em&gt;, Azure DevOps will decide whether or not new VM&#39;s (and thus Agents) need to be provisioned&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Upgrade policy&lt;/strong&gt;: &lt;em&gt;manual&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Azure DevOps Scale Set Agent&lt;/h3&gt; &#xA;&lt;p&gt;The Virtual Machine Scale Set from the previous step needs to be registered as an Agent Pool in Azure DevOps. &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/scale-set-agents?view=azure-devops&amp;amp;WT.mc_id=M365-MVP-5003400#create-the-scale-set-agent-pool&#34;&gt;The instructions are very clear&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add an Agent Pool of type &#34;Azure virtual machine scale set&#34;&lt;/li&gt; &#xA; &lt;li&gt;Use a service connection to select the scale set from the previous step (only supported via &lt;code&gt;Secret&lt;/code&gt; authentication, not &lt;code&gt;Certificate&lt;/code&gt; or &lt;code&gt;Managed Identity&lt;/code&gt; authentication)&lt;/li&gt; &#xA; &lt;li&gt;Give the agent pool a name&lt;/li&gt; &#xA; &lt;li&gt;Enter the required configuration values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Azure DevOps Variable Group&lt;/h3&gt; &#xA;&lt;p&gt;Create a Variable Group in the Azure DevOps project running the pipeline, and give it a name. It needs to contain the following variables with their appropriate value:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AZURE_AGENTS_RESOURCE_GROUP&lt;/td&gt; &#xA;   &lt;td&gt;Resource Group that contains the Virtual Machine Scale Sets to be used as Scale Set Agents in Azure DevOps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AZURE_LOCATION&lt;/td&gt; &#xA;   &lt;td&gt;Azure location where Packer will create the temporary resources&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AZURE_RESOURCE_GROUP&lt;/td&gt; &#xA;   &lt;td&gt;Resource group that will be used by Packer to put the resulting Azure Managed Image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AZURE_SUBSCRIPTION&lt;/td&gt; &#xA;   &lt;td&gt;Subscription ID of the Azure Subscription that is used to host the temporary resources.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BUILD_AGENT_VNET_NAME&lt;/td&gt; &#xA;   &lt;td&gt;Name of the existing VNet to use for the VM created by Packer, put $null if you want packer to create a new one&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BUILD_AGENT_VNET_RESOURCE_GROUP&lt;/td&gt; &#xA;   &lt;td&gt;Name of the resource group containing the existing VNet to use for the VM created by Packer, put $null if you don&#39;t have this&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BUILD_AGENT_SUBNET_NAME&lt;/td&gt; &#xA;   &lt;td&gt;Name of the existing subnet to use for the VM created by Packer, put $null if you don&#39;t have this&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AZURE_TENANT&lt;/td&gt; &#xA;   &lt;td&gt;Tenant ID of the Azure tenant that has the Azure Resource Groups and Subscription.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CLIENT_ID&lt;/td&gt; &#xA;   &lt;td&gt;Id of the Azure AD application that has appropriate permissions on the Subscription to create temporary resources and finalizing the Scale Set configuration. See output from scripts above.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CLIENT_SECRET&lt;/td&gt; &#xA;   &lt;td&gt;Application secret to be used fot the connection in combination with the Client Id. See output from scripts above.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RUN_VALIDATION_FLAG&lt;/td&gt; &#xA;   &lt;td&gt;Wether or not to run a validation on diskspace. Set the value to &lt;code&gt;false&lt;/code&gt; unless you know what you are doing ;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GALLERY_NAME&lt;/td&gt; &#xA;   &lt;td&gt;(required for option galleryvm) Name of the Azure Compute Gallery to store images for Agent Pool VM Scale Sets.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GALLERY_RESOURCE_GROUP&lt;/td&gt; &#xA;   &lt;td&gt;(required for option galleryvm) Name of the resource group containing the Azure Compute Gallery.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VMSS_Windows2019&lt;/td&gt; &#xA;   &lt;td&gt;(required for option vmss) Name of the Azure Virtual Machine Scale Set that will run Build Agents on Windows Server 2019. Support comma seperated list of names.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VMSS_Windows2022&lt;/td&gt; &#xA;   &lt;td&gt;(required for option vmss) Name of the Azure Virtual Machine Scale Set that will run Build Agents on Windows Server 2022. Support comma seperated list of names.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VMSS_Ubuntu2004&lt;/td&gt; &#xA;   &lt;td&gt;(required for option vmss) Name of the Azure Virtual Machine Scale Set that will run Build Agents on Ubuntu 20.04. Support comma seperated list of names.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VMSS_Ubuntu2204&lt;/td&gt; &#xA;   &lt;td&gt;(required for option vmss) Name of the Azure Virtual Machine Scale Set that will run Build Agents on Ubuntu 22.04. Support comma seperated list of names.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Pipeline runtime parameters&lt;/h2&gt; &#xA;&lt;h3&gt;Build Agent Generation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YannickRe/azuredevops-buildagents/main/assets/BuildAgentGeneration-Queue.png&#34; alt=&#34;Runtime parameters for Build Agent Generation&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build Agent Image&lt;/strong&gt;: which image to build, choice between &lt;code&gt;Windows Server 2019&lt;/code&gt;, &lt;code&gt;Windows Server 2022&lt;/code&gt;, &lt;code&gt;Ubuntu 20.04&lt;/code&gt; and &lt;code&gt;Ubuntu 22.04&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;runner-images Version&lt;/strong&gt;: which source code of the runner-images to build, choice between &lt;code&gt;alpha&lt;/code&gt; (latest main branch), &lt;code&gt;prerelease&lt;/code&gt; (latest prerelease version), and &lt;code&gt;release&lt;/code&gt; (latest stable release)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Variable Group&lt;/strong&gt;: name of the Variable Group containing the variables necessary for execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Agent Pool&lt;/strong&gt;: the Agent Pool to use for running the pipeline&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Update Method&lt;/strong&gt;: select type of deployment. &lt;em&gt;vmss&lt;/em&gt; (VM Scale Set) or &lt;em&gt;galleryvm&lt;/em&gt; (Gallery VM Image). The build VM can be connected straight to a VM Scale Set (classic method) or via a Gallery VM Image (modern method).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Managed Image Cleanup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YannickRe/azuredevops-buildagents/main/assets/ManagedImageCleanup-Queue.png&#34; alt=&#34;Runtime parameters for Managed Images Cleanup&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Variable Group&lt;/strong&gt;: name of the Variable Group containing the variables necessary for execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Delete vmss (VM Scale Set) or galleryvm (Gallery VM) image?&lt;/strong&gt;: should it delete orphaned Managed Images or old versions of the image in an Azure Compute Gallery&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;Templated version&lt;/h3&gt; &#xA;&lt;p&gt;Both YML file are designed in a way that allows anyone to simply include them using the &#34;template&#34; instruction. You will need to create a service connection under your Azure DevOps instance before moving with the configuration.&lt;/p&gt; &#xA;&lt;p&gt;Assuming the service connection has been setup, under your own repository, within an Azure Pipeline YML file, include the following resource:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;resources:&#xA;  repositories:&#xA;    - repository: azuredevops-buildagents&#xA;      type: github&#xA;      name: YannickRe/azuredevops-buildagents&#xA;      endpoint: &amp;lt;your-service-connection-name&amp;gt;&#xA;      ref: refs/heads/main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will tell your pipeline that you&#39;re dependent upon this repository. Then, the following instructions can be freely customized to your needs. If you need some stages to be ran before the steps within this repository, then include them inside your pipeline, then call the desired template from the repository.&lt;/p&gt; &#xA;&lt;p&gt;Calling a template is easy as doing the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stages:&#xA;  - stage: InsertAnyCustomStageHere&#xA;    displayName: &#39;My Stage&#39;&#xA;    [...]&#xA;  - stage: BuildImage&#xA;    displayName: Build Image&#xA;    pool:&#xA;      name: &amp;lt;agent-pool&amp;gt;&#xA;    jobs:&#xA;    - template: buildagent-generation-template.yml@azuredevops-buildagents&#xA;      parameters: &#xA;        image_type: &amp;lt;image-type&amp;gt;&#xA;        runner_images_version: &amp;lt;runner_images_version&amp;gt;&#xA;        variable_group: &amp;lt;variable-group&amp;gt;&#xA;        agent_pool: &amp;lt;agent-pool&amp;gt;&#xA;        repository_base_path: &amp;lt;repository_base_path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Template parameters&lt;/h3&gt; &#xA;&lt;p&gt;When calling a template, you must provide certain parameters. For reference, please open the file which interests you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YannickRe/azuredevops-buildagents/main/buildagent-generation.yml&#34;&gt;buildagent-generation.yml&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YannickRe/azuredevops-buildagents/main/managedimage-cleanup.yml&#34;&gt;managedimage-cleanup.yml&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is one important element you must be aware of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;repository_base_path &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This variable dictates how the agent should resolve the assets within this repository. When used, two things will happen: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;First, it will clone the repository resource specified within your YML file, which represents &lt;em&gt;this&lt;/em&gt; repository&lt;/li&gt; &#xA;     &lt;li&gt;It will also use it to properly resolve the path where this repository resides on your pipeline agent&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;When a remote template is referenced within an Azure Pipeline YML file, it doesn&#39;t clone the repository. Providing this parameter will make sure these templates understands they need to clone it before being able to run any of the scripts.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional parameter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;depends_on &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can force the jobs within this repository to depend upon your own set of tasks. To use it, simply provide the name of the job which the next job within the template should depend on.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The rest is quite self explanatory. Use the other parameters to provide the remaining required details for building / cleaning the images.&lt;/p&gt; &#xA;&lt;h2&gt;Good to know&lt;/h2&gt; &#xA;&lt;h3&gt;Packer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.packer.io/&#34;&gt;Packer&lt;/a&gt; is an open source tool for creating identical machine images for multiple platforms from a single source configuration. Important to know: while building the image, Packer will spin up a VM in Azure to run the installation instructions, sys-prep that image after completion and cleanup all the temporary resources.&lt;/p&gt; &#xA;&lt;h3&gt;Scale Set Agents&lt;/h3&gt; &#xA;&lt;p&gt;Azure virtual machine scale set agents are a form of self-hosted agents that can be autoscaled to meet demands. This elasticity reduces the need to run dedicated agents all the time.&lt;/p&gt; &#xA;&lt;h3&gt;Pipeline runtime&lt;/h3&gt; &#xA;&lt;p&gt;Generating the images takes a long time, so don&#39;t be surprised. A Windows Server 2019 image takes about 6 to 7h&#39;s to generate, a Ubuntu 20.04 image takes about 4h&#39;s.&lt;/p&gt; &#xA;&lt;h3&gt;Chicken or the egg&lt;/h3&gt; &#xA;&lt;p&gt;Generating the image through Packer takes longer than 1h (see previous bullet point), and thus can&#39;t be run on the free tier of the Microsoft Hosted Agents (limited to 1h runs). It can only be run on the paid tier of the Microsoft Hosted Agent, or it needs an existing self-hosted agent to run.&lt;br&gt; In this project, the initial run of the project is done on a paid Microsoft Hosted Agent and then switched over to the newly generated self-hosted agent scale set. At some point this worked, but currently Microsoft is more strictly enforcing the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&amp;amp;tabs=yaml#capabilities-and-limitations&#34;&gt;6 hour&lt;/a&gt; runtime limit on Microsoft Hosted Agents. This can be worked around by first creating a self hosted Linux build agent using this process and then using the freshly generated agent to create a Windows image, or be setting up a basic self hosted agent first and use that to generate the full blown build agent.&lt;br&gt; This might be resolved in the near future when changes are made to the images &lt;a href=&#34;https://github.com/actions/virtual-environments/issues/3809&#34;&gt;regarding .NET runtime installation&lt;/a&gt;, which should significantly reduce the build time.&lt;/p&gt; &#xA;&lt;h2&gt;Agent Pool Usage&lt;/h2&gt; &#xA;&lt;p&gt;See documentation for &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/pools-queues?view=azure-devops&amp;amp;tabs=yaml%2cbrowser&amp;amp;WT.mc_id=M365-MVP-5003400#choosing-a-pool-and-agent-in-your-pipeline&#34;&gt;YAML-based pipelines&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/pools-queues?view=azure-devops&amp;amp;tabs=classic%2cbrowser&amp;amp;WT.mc_id=M365-MVP-5003400#choosing-a-pool-and-agent-in-your-pipeline&#34;&gt;Classic pipelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Azure CLI access denied error on Windows Host Pool&lt;/h2&gt; &#xA;&lt;p&gt;Please make sure to disable the &#34;Configure VMs to run interactive tests&#34; in your Windows Agent pool setting, otherwise the Azure CLI will generate access denied errors when running a pipeline.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/extensions-samples</title>
    <updated>2024-02-12T01:36:13Z</updated>
    <id>tag:github.com,2024-02-12:/dotnet/extensions-samples</id>
    <link href="https://github.com/dotnet/extensions-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Enriched Capabilities&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a suite of samples for the out-of-box &lt;a href=&#34;https://github.com/dotnet/extensions/&#34;&gt;.NET Platform Extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/dnceng-public/public/_build/latest?definitionId=276&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng-public/public/_apis/build/status/dotnet.extensions-samples?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aka.ms/dotnet-discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/732297728826277939?style=flat-square&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;color=7289DA&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How can I contribute?&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! Many people all over the world have helped make this project better.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/extensions-samples/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; explains what kinds of contributions we welcome&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/extensions-samples/main/docs/building.md&#34;&gt;Build instructions&lt;/a&gt; explains how to build and test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting security issues and security bugs&lt;/h2&gt; &#xA;&lt;p&gt;Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the &lt;a href=&#34;https://www.microsoft.com/msrc/faqs-report-an-issue&#34;&gt;Security TechCenter&lt;/a&gt;. You can also find these instructions in this repo&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/extensions-samples/main/SECURITY.md&#34;&gt;Security doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also see info about related &lt;a href=&#34;https://www.microsoft.com/msrc/bounty-dot-net-core&#34;&gt;Microsoft .NET Core and ASP.NET Core Bug Bounty Program&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://source.dot.net&#34;&gt;.NET Core source index&lt;/a&gt; / &lt;a href=&#34;https://referencesource.microsoft.com&#34;&gt;.NET Framework source index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/api&#34;&gt;API Reference docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apisof.net&#34;&gt;.NET API Catalog&lt;/a&gt; (incl. APIs from daily builds and API usage info)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/dotnet-api-docs/wiki&#34;&gt;API docs writing guidelines&lt;/a&gt; - useful when writing /// comments&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/dotnet-discord&#34;&gt;.NET Discord Server&lt;/a&gt; - a place to discuss the development of .NET and its ecosystem&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;.NET Foundation&lt;/h2&gt; &#xA;&lt;p&gt;This project is a &lt;a href=&#34;https://www.dotnetfoundation.org/projects&#34;&gt;.NET Foundation&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;There are many .NET related projects on GitHub.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/dotnet&#34;&gt;.NET home repo&lt;/a&gt;&amp;nbsp;- links to 100s of .NET projects, from Microsoft and the community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/aspnet/core&#34;&gt;ASP.NET Core home&lt;/a&gt; - the best place to start learning about ASP.NET Core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the &lt;a href=&#34;https://contributor-covenant.org&#34;&gt;Contributor Covenant&lt;/a&gt; to clarify expected behavior in our community. For more information, see the &lt;a href=&#34;https://www.dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;General .NET OSS discussions: &lt;a href=&#34;https://github.com/dotnet-foundation/Home/discussions&#34;&gt;.NET Foundation Discussions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;.NET (including the runtime repo) is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/extensions-samples/main/LICENSE.TXT&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
</feed>