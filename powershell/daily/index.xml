<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-29T01:35:12Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dfinke/Tiny-PowerShell-Projects</title>
    <updated>2022-11-29T01:35:12Z</updated>
    <id>tag:github.com,2022-11-29:/dfinke/Tiny-PowerShell-Projects</id>
    <link href="https://github.com/dfinke/Tiny-PowerShell-Projects" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learning PowerShell through test-driven development of games and puzzles&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Try It&lt;/h1&gt; &#xA;&lt;p&gt;Try the puzzles online in a Jupyter Notebook. No installs needed.&lt;/p&gt; &#xA;&lt;p&gt;Click here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mybinder.org/v2/gh/dfinke/Tiny-PowerShell-Projects/master&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;Binder&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tiny PowerShell Projects&lt;/h1&gt; &#xA;&lt;p&gt;This is the code repository for &lt;em&gt;Tiny &lt;strong&gt;PowerShell&lt;/strong&gt; Projects&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I ported it from the Manning Publications book, &lt;em&gt;Tiny Python Projects&lt;/em&gt;, by Ken Youens-Clark:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Python repo is here: &lt;a href=&#34;https://github.com/kyclark/tiny_python_projects&#34;&gt;https://github.com/kyclark/tiny_python_projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The Python book is here: &lt;a href=&#34;https://www.manning.com/books/tiny-python-projects?a_aid=youens&amp;amp;a_bid=b6485d52&#34;&gt;https://www.manning.com/books/tiny-python-projects?a_aid=youens&amp;amp;a_bid=b6485d52&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One of the many cool aspects of this not only the approach to learning &lt;code&gt;PowerShell&lt;/code&gt; this way, additionally, you can head over to the &lt;code&gt;Python&lt;/code&gt; repo and see how it is done in that language. Could be you are here because you&#39;re a Pythonista, and want to see how PoShers do it.&lt;/p&gt; &#xA;&lt;p&gt;Either way, it&#39;s the same puzzles implemented in both languages, and you can use the tests provided, to do Test Driven Development and prove these and your solutions work, as you make changes.&lt;/p&gt; &#xA;&lt;h2&gt;The approach&lt;/h2&gt; &#xA;&lt;p&gt;There is a directory for each chapter of the book. There is a README to describe each exercise. Each directory contains a &lt;code&gt;test.ps1&lt;/code&gt; program you can use with &lt;code&gt;Invoke-Pester&lt;/code&gt; to check that you have written the program correctly.&lt;/p&gt; &#xA;&lt;p&gt;In addition, each directory has two &lt;code&gt;PowerShell&lt;/code&gt; scripts, one called &lt;code&gt;AllTest.ps1&lt;/code&gt;, and the other &lt;code&gt;solution1.ps1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;AllTest&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;AllTest.ps1&lt;/code&gt; does something very &lt;em&gt;beneficial&lt;/em&gt;. It looks in that chapters directory for all files that match the wildcard &lt;code&gt;solution*.ps1&lt;/code&gt;, and one by one copies it to a &lt;code&gt;ps1&lt;/code&gt; that is expected in the &lt;code&gt;test.ps1&lt;/code&gt;, and the last step, it calls &lt;code&gt;Invoke-Pester&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This allows you to keep the original solution supplied, and you can then create as many solutions as you&#39;d like to test different ways to solve the puzzle. This lets you experiment with different ways to use a regex, arrays, hash tables or other approaches, in order to figure out better ways to handle this. The different solutions can sit side by side with the others and the &lt;code&gt;test.ps1&lt;/code&gt; can be automatically run against all.&lt;/p&gt; &#xA;&lt;h2&gt;Testing is Integral&lt;/h2&gt; &#xA;&lt;p&gt;The testing step is integral to writing and solving these challenges.&lt;/p&gt; &#xA;&lt;p&gt;Using a &#34;test-driven development&#34; mentality, where you write tests &lt;em&gt;before&lt;/em&gt; you write code, is very much recommended.&lt;/p&gt; &#xA;&lt;p&gt;The tests should define what it means for a program to be correct, and then you write programs to satisfy the tests.&lt;/p&gt; &#xA;&lt;p&gt;All the tests have been written for you, and you should write your own functions and tests. Practice is key.&lt;/p&gt; &#xA;&lt;p&gt;You should run the test suite after every change to your program to ensure you are making progress!&lt;/p&gt; &#xA;&lt;h2&gt;Chapters&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/01_hello&#34;&gt;Chapter 1: How to write and test a PowerShell program&lt;/a&gt; How to create a PowerShell program that prints a string and takes a parameter. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/01_hello/hello.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/02_crowsnest&#34;&gt;Chapter 2: Crow&#39;s Nest&lt;/a&gt; How to write a PowerShell program that accepts a single, positional argument and creates a newly formatted output string. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/02_crowsnest/crowsnest.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/03_picnic&#34;&gt;Chapter 3: Picnic&lt;/a&gt; Writing a PowerShell program that accepts multiple string arguments and formats the results depending on the number of items. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/03_picnic/picnic.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/04_jump_the_five&#34;&gt;Chapter 4: Jump The Five&lt;/a&gt; Writing a PowerShell program to encode the numerals in a given text using an algorithm called &#34;Jump The Five.&#34; Use of a dictionary as a lookup table, characters not in the dictionary remain unchanged. Introduction to encoding/decoding text, basic idea of encryption. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/04_jump_the_five/jump.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/05_howler&#34;&gt;Chapter 5: Howler&lt;/a&gt; Writing a PowerShell program that can process input text either from the command line or from a file.The output prints either to STDOUT or to a file. Learning about how to read/write the contents of a file. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/05_howler/howler.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/06_wc&#34;&gt;Chapter 6: Word Count&lt;/a&gt; Writing a PowerShell program to emulate a word count program. Validates and processes multiple file inputs as well as STDIN and creates output of the counts of lines, words, and characters for each file. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/06_wc/wc.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/07_gashlycrumb&#34;&gt;Chapter 7: Gashlycrumb&lt;/a&gt; Writing a PowerShell program that processes an input file to build a lookup table (dictionary) that is used with multiple positional arguments to translate to the values from the file. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/07_gashlycrumb/gashlycrumb.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/08_apples_and_bananas&#34;&gt;Chapter 8: Apples and Bananas&lt;/a&gt; Writing a PowerShell program to find and replace elements in a string. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/08_apples_and_bananas/apples.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/09_abuse&#34;&gt;Chapter 9: Abuse&lt;/a&gt; Writing a PowerShell program to generate Shakespearean insults by randomly combining some number of adjectives with a randomly chosen noun. Learning about randomness, seeds, and testing. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/09_abuse/abuse.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/10_telephone&#34;&gt;Chapter 10: Telephone&lt;/a&gt; Using probabilistic and deterministic approaches to randomly mutate a string. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/10_telephone/telephone.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/11_bottles_of_beer&#34;&gt;Chapter 11: Bottles of Beer&lt;/a&gt; Writing a PowerShell program to produce the verse to the &#34;99 Bottles of Beer&#34; song from a given starting point. Learning to count down, format strings, algorithm design. A focus on writing a function and unit test, exploring ways to incorporate our function to generate the verses from for loops. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/11_bottles_of_beer/bottles.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/12_ransom&#34;&gt;Chapter 12: Ransom&lt;/a&gt; Writing a PowerShell program that will randomly capitalize letters in a given piece of text for the nefarious purpose of creating a ransom note. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/12_ransom/ransom.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/13_twelve_days&#34;&gt;Chapter 13: Twelve Days of Christmas&lt;/a&gt; Writing a PowerShell program to create the verses for &#34;The Twelve Days of Christmas&#34; from a given day. Learning how to write a function and the test for it, then using the function in a list to generate the output. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/13_twelve_days/twelve_days.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/14_rhymer&#34;&gt;Chapter 14: The Rhymer&lt;/a&gt; Writing a PowerShell program that can split off any initial consonants from a word and append a list of prefixes to create new rhyming &#34;words.&#34; Exploration of regular expressions to handle words with no initial consonants, with one or more leading consonants, and nothing but consonants. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/14_rhymer/rhymer.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/15_kentucky_friar&#34;&gt;Chapter 15: The Kentucky Friar&lt;/a&gt; In this chapter we delve further into regular expressions, first learning how to split a string using a regex so we can separate things that look like &#34;words&#34; from non-words like punctuation and whitespace. Then we try to identify the word &#34;you&#34; (case-insensitive) to turn into &#34;y&#39;all&#34; and any 2-syllable words ending in &#34;-ing&#34; so we can replace the final &#34;g&#34; with an apostrophe so that &#34;cooking&#34; becomes &#34;cookin&#39;&#34; but &#34;swing&#34; would remain &#34;swing.&#34; We then apply this to an entire body of text to Kentucky fry the words with amusing results. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/15_kentucky_friar/friar.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dfinke/Tiny-PowerShell-Projects/tree/master/16_scrambler&#34;&gt;Chapter 16: The Scrambler&lt;/a&gt; Writing a PowerShell program to find each &#34;word&#34; in a body of text and then scramble the letters such that the first and last letters remain in place, then reconstructing the text for output. Using regular expressions to split text, using &lt;code&gt;Sort-Object { Get-Random }&lt;/code&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/dfinke/Tiny-PowerShell-Projects/master/16_scrambler/scrambler.ps1&#34;&gt;[source code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- * [Chapter 17: Mad Libs]() Writing a PowerShell program to play the classic Mad Libs game. Reading an input file with placeholders for parts of speech like &#34;adjective&#34; or &#34;noun.&#34; Getting the inputs to replace those from the user interactively via the &#34;input()&#34; function or taking them from the command-line arguments. Using regular expressions to find and replace the placeholders. Learning about greedy regex and how to make them not greedy. Using the `re.findall()` and `re.sub()` functions. Using `sys.exit()` to prematurely exit a program with an error message/value. --&gt; &#xA;&lt;!-- # Videos&#xA;&#xA;I&#39;ve been making videos for each chapter on my YouTube channel:&#xA;&#xA;https://www.youtube.com/user/kyclark&#xA;&#xA;Here are the videos I&#39;ve completed so far:&#xA;&#xA;* [Chapter 1: How to write and test a Python program](https://www.youtube.com/playlist?list=PLhOuww6rJJNP7UvTeF6_tQ1xcubAs9hvO): How to create a Python program, understanding comments and the shebang, how to make a program executable and install into your $PATH, how to write a main() function, add docstrings, format your code, and run tests.&#xA;&#xA;* [Chapter 2: Crow&#39;s Nest](https://www.youtube.com/playlist?list=PLhOuww6rJJNPBqIwfD-0RedqsitBliLhT): How to write a Python program that accepts a single, positional argument and creates a newly formatted output string.&#xA;&#xA;* [Chapter 3: Picnic](https://www.youtube.com/playlist?list=PLhOuww6rJJNMuQohHrNxRjhFTR9UlUOIa): Writing a Python program that accepts multiple string arguments and formats the results depending on the number of items.&#xA;&#xA;* [Chapter 4: Jump The Five](https://www.youtube.com/playlist?list=PLhOuww6rJJNNd1Mbu3h6SGfhD-8rRxLTp): Writing a Python program to encode the numerals in a given text using an algorithm called &#34;Jump The Five.&#34; Use of a dictionary as a lookup table, characters not in the dictionary remain unchanged. Introduction to encoding/decoding text, basic idea of encryption.&#xA;&#xA;* [Chapter 5: Howler](https://www.youtube.com/playlist?list=PLhOuww6rJJNNzo5zqtx0388myQkUKyrQz): Writing a Python program that can process input text either from the command line or from a file.The output prints either to STDOUT or to a file.  Learning about &#34;os.path.isfile&#34;, how to &#34;open&#34; a file handle for reading/writing, how to read/write the contents of a file.&#xA;&#xA;* [Chapter 6: Word Count](https://www.youtube.com/playlist?list=PLhOuww6rJJNOGPw5Mu5FyhnumZjb9F6kk): Writing a Python program to emulate the `wc` (word count) program. Validates and processes multiple file inputs as well as STDIN and creates output of the counts of lines, words, and bytes for each file optionally with a &#34;total&#34; if more than one file is provided.&#xA;&#xA;* [Chapter 7: Gashlycrumb](https://www.youtube.com/playlist?list=PLhOuww6rJJNMxWy34-9jlD2ulZxaA7mxV): Writing a Python program that processes an input file to build a lookup table (dictionary) that is used with multiple positional arguments to translate to the values from the file.&#xA;&#xA;* [Chapter 8: Apples and Bananas](https://www.youtube.com/playlist?list=PLhOuww6rJJNMe_qrKzw6jtxzHkTOszozs): Writing a Python program to find and replace elements in a string. Exploring multiple ways to write the same idea from for loops to list comprehensions to higher-order functions like map().&#xA;&#xA;* [Chapter 9: Abuse](https://www.youtube.com/playlist?list=PLhOuww6rJJNOWShq53st6NjXacHHaJurn): Writing a Python program to generate Shakespearean insults by randomly combining some number of adjectives with a randomly chosen noun. Learning about randomness, seeds, testing, how to use triple-quoted strings.&#xA;&#xA;* [Chapter 10: Telephone](https://www.youtube.com/playlist?list=PLhOuww6rJJNN0T5ZKUFuEDo3ykOs1zxPU): Using probabalistic and deterministc approaches to randomly mutating a string.&#xA;&#xA;* [Chapter 11: Bottles of Beer](https://www.youtube.com/playlist?list=PLhOuww6rJJNNGDXdGGfp3RDXBMhJwj0Ij): Writing a Python program to produce the verse to the &#34;99 Bottles of Beer&#34; song from a given starting point. Learning to count down, format strings, algorithm design. A focus on writing a function and unit test, exploring ways to incorporate our function to generate the verses from for loops to list comprehensions to map().&#xA;&#xA;* [Chapter 12: Ransom](https://www.youtube.com/playlist?list=PLhOuww6rJJNMxWhckg7FO4cEx57WgHbd_): Writing a Python program that will randomly capitalize letters in a given piece of text for the nefarious purpose of creating a ransom note. Exploration of for loops, list comprehensions, and the map() function.&#xA;&#xA;* [Chapter 13: Twelve Days of Christmas](https://www.youtube.com/playlist?list=PLhOuww6rJJNNZEMX12PE1OvSKy02UQoB4): Writing a Python program to create the verses for &#34;The Twelve Days of Christmas&#34; from a given day. Learning how to write a function and the test for it, then using the function in a list comprehension and a map to generate the output.&#xA;&#xA;* [Chapter 14: The Rhymer](https://www.youtube.com/playlist?list=PLhOuww6rJJNPNn2qa5ATHJ0qd-JUgM_s0): Writing a Python program that can split off any initial consonants from a word and append a list of prefixes to create new rhyming &#34;words.&#34; Exploration of regular expressions to handle words with no initial consonants, with one or more leading consonants, and nothing but consonants. Writing a `stemmer()` function and the `test_stemmer()` function to understand it. Using list comprehensions with guard statements and how that relates to the `filter()` function.&#xA;&#xA;* [Chapter 15: The Kentucky Friar](https://www.youtube.com/playlist?list=PLhOuww6rJJNMflxi3aRAQTqG7mvOXRObW): In this chapter we delve further into regular expressions, first learning how to split a string using a regex so we can separate things that look like &#34;words&#34; from non-words like punctuation and whitespace. Then we try to identify the word &#34;you&#34; (case-insensitive) to turn into &#34;y&#39;all&#34; and any 2-syllable words ending in &#34;-ing&#34; so we can replace the final &#34;g&#34; with an apostrophe so that &#34;cooking&#34; becomes &#34;cookin&#39;&#34; but &#34;swing&#34; would remain &#34;swing.&#34; We then apply this to an entire body of text to Kentucky fry the words with amusing results.&#xA;&#xA;* [Chapter 16: The Scrambler](https://www.youtube.com/playlist?list=PLhOuww6rJJNPcLby3JXlKSo6duCIjh93S): Writing a Python program to find each &#34;word&#34; in a body of text and then scramble the letters such that the first and last letters remain in place, then reconstructing the text for output. Using regular expressions to split text, using `random.shuffle()` and understanding in-place mutation vs returning a new value. Comparing `for` loops to list comprehensions and the &#34;map()&#34; function.&#xA;&#xA;* [Chapter 17: Mad Libs](https://www.youtube.com/playlist?list=PLhOuww6rJJNPnNx_Emds00y2RX1Tbk59r): Writing a Python program to play the classic Mad Libs game. Reading an input file with placeholders for parts of speech like &#34;adjective&#34; or &#34;noun.&#34; Getting the inputs to replace those from the user interactively via the &#34;input()&#34; function or taking them from the command-line arguments. Using regular expressions to find and replace the placeholders. Learning about greedy regex and how to make them not greedy. Using the `re.findall()` and `re.sub()` functions. Using `sys.exit()` to prematurely exit a program with an error message/value.&#xA;&#xA;# Forking GitHub repo&#xA;&#xA;First use the GitHub interface to &#34;fork&#34; this repository into your own account. Then do `git clone` of *your* repository to get a local copy. Inside that checkout, do:&#xA;&#xA;````&#xA;git remote add upstream https://github.com/kyclark/tiny_python_projects.git &#xA;````&#xA;&#xA;This will allow you to `git pull upstream master` in order to get updates. When you create new files, `git add/commit/push` them to *your* repository. (Please do not create pull requests on *my* repository -- unless, of course, you have suggestions for improving my repo!).&#xA;&#xA;# Copyright&#xA;&#xA;© Ken Youens-Clark 2019-2020 --&gt;</summary>
  </entry>
</feed>