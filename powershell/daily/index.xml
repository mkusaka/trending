<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T01:52:35Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SNGWN/Burp-Suite</title>
    <updated>2022-06-04T01:52:35Z</updated>
    <id>tag:github.com,2022-06-04:/SNGWN/Burp-Suite</id>
    <link href="https://github.com/SNGWN/Burp-Suite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;|| Activate Burp Suite Pro with Key-Generator and Key-Loader ||&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h1&gt;Burp Suite Professional Installation steps for Windows&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;--&amp;gt; Open Powershell and execute below command to set Script Execution Policy.&#xA;&#x9;Set-ExecutionPolicy -ExecutionPolicy bypass -Scope process&#xA;--&amp;gt; Now Execute Windows_Setup.ps1 file in Powershell to Complete Installation.&#xA;&#x9;./Windows_Setup.ps1&#xA;--&amp;gt; For Start Menu Entry, copy **Burp-Suite-Pro.vbs** file to &#xA;&#x9;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Burp Suite Professional Installation steps for Kali-Linux&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;--&amp;gt; Execute Kali_Linux_Setup.sh file as root user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Burp Suite Pro Activation Steps&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Modify License String like &#34;license to Siddharth&#34;&#xA;2. Copy License key from keygen.jar and paste in Burp Suite Pro and click Next.&#xA;3. Select Manual Activation Option on your bottom Right in Burp Suite Pro.&#xA;4. Copy License Request from BurpSuite_Pro and paste in Keygenerator.&#xA;5. Copy license response from Keygenerator and paste in Burp Suite Pro, then next and Done.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Executing Burp Suite Profession after Activation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;--&amp;gt; Windows :-: You can start Burp Suite Professional from Start Menu.&#xA;--&amp;gt; Kali Linux :-: You can start Burp Suite Professional by writing **burp** in terminal.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Videos For Reference&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;--&amp;gt; Kali Linux :-: https://youtu.be/Gex6EQ4AKTA&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>MicrosoftDocs/windows-powershell-docs</title>
    <updated>2022-06-04T01:52:35Z</updated>
    <id>tag:github.com,2022-06-04:/MicrosoftDocs/windows-powershell-docs</id>
    <link href="https://github.com/MicrosoftDocs/windows-powershell-docs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo is used to contribute to Windows 10, Windows Server 2016, and MDOP PowerShell module documentation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Windows IT professional documentation&lt;/h1&gt; &#xA;&lt;p&gt;Welcome! This repository houses the Windows 10, Windows Server 2016, and MDOP PowerShell module docs that are written for IT professionals.&lt;/p&gt; &#xA;&lt;p&gt;Edits to this content are published in the following places:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/windows/get-started?view=win10-ps&#34;&gt;Windows 10 and Windows Server 2016&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/mdop/get-started?view=win-mdop2-ps&#34;&gt;Microsoft Desktop Optimization Pack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;PowerShell Updatable Help (CabGen) CI Build Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apidrop.visualstudio.com/Content%20CI/_build/latest?definitionId=5077&amp;amp;repoName=MicrosoftDocs%2Fwindows-powershell-docs&amp;amp;branchName=live&#34;&gt;&lt;img src=&#34;https://apidrop.visualstudio.com/Content%20CI/_apis/build/status/PROD/CabGen(PowerShell_Updatable_Help)/GitHub_MicrosoftDocs_windows-powershell-docs/46a32786-a1f6-1250-e1e1-2a4554025dc9_cabgen_Publish-Updatable-Help?repoName=MicrosoftDocs%2Fwindows-powershell-docs&amp;amp;branchName=live&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We actively merge contributions into this repository via &lt;a href=&#34;https://help.github.com/articles/using-pull-requests/&#34;&gt;pull request&lt;/a&gt; into the &lt;em&gt;main&lt;/em&gt; branch. If you are not a Microsoft employee, before you submit a pull request you must &lt;a href=&#34;https://cla.microsoft.com/&#34;&gt;sign a Contribution License Agreement&lt;/a&gt; to ensure that the community is free to use your submissions. For more information on contributing, read our &lt;a href=&#34;https://raw.githubusercontent.com/MicrosoftDocs/windows-powershell-docs/main/CONTRIBUTING.md&#34;&gt;contributions guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information, see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Yamato-Security/WELA</title>
    <updated>2022-06-04T01:52:35Z</updated>
    <id>tag:github.com,2022-06-04:/Yamato-Security/WELA</id>
    <link href="https://github.com/Yamato-Security/WELA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WELA (Windows Event Log Analyzer): The Swiss Army knife for Windows Event Logs! ゑ羅（ウェラ）&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;img alt=&#34;WELA Logo&#34; src=&#34;https://raw.githubusercontent.com/Yamato-Security/WELA/main/WELA-Logo.png&#34; width=&#34;20%&#34;&gt; &lt;/p&gt;&#xA; &lt;h1&gt; WELA (Windows Event Log Analyzer) ゑ羅 &lt;/h1&gt; [&#xA; &lt;b&gt;English&lt;/b&gt;] | [&#xA; &lt;a href=&#34;https://raw.githubusercontent.com/Yamato-Security/WELA/main/README-Japanese.md&#34;&gt;日本語&lt;/a&gt;] &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Yamato-Security/wela?style=plastic&amp;amp;label=GitHub%F0%9F%AA%9FStars&#34; alt=&#34;tag-1&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/Yamato-Security/wela?display_name=tag&amp;amp;label=latest-version&amp;amp;style=plastic&#34; alt=&#34;tag-2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Windows Event Log Analyzer) aims to be the Swiss Army knife for Windows event logs. Currently, WELA&#39;s greatest functionality is creating an easy-to-analyze logon timeline in to order to aid in fast forensics and incident response. WELA&#39;s logon timeline generator will consolodate only the useful information in multiple logon log entries (4624, 4634, 4647, 4672, 4776) into single events, perform data reduction by ignoring around 90% of the noise, and will convert any hard to read data (such as hex status codes) into human readable format.&lt;/p&gt; &#xA;&lt;p&gt;Tested on Windows Powershell 5.1 but may work with previous versions. It will unfortunately NOT work with Powershell Core as there is no built-in functionality to read Windows event logs.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Written in PowerShell so is easy to read and customize.&lt;/li&gt; &#xA; &lt;li&gt;Fast Forenscis Logon Timeline Generator &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Detect lateral movement, system usage, suspicious logons, vulnerable protocol usage, etc...&lt;/li&gt; &#xA;   &lt;li&gt;90%+ noise reduction for logon events&lt;/li&gt; &#xA;   &lt;li&gt;Calculate Logon Elapsed Time&lt;/li&gt; &#xA;   &lt;li&gt;GUI analysis&lt;/li&gt; &#xA;   &lt;li&gt;Logon Type Summary&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Live Analysis and Offline Analysis&lt;/li&gt; &#xA; &lt;li&gt;Japanese support&lt;/li&gt; &#xA; &lt;li&gt;Event ID Statistics&lt;/li&gt; &#xA; &lt;li&gt;Output to CSV to analyze in Timeline Explorer, etc...&lt;/li&gt; &#xA; &lt;li&gt;Analyze NTLM usage before disabling NTLM&lt;/li&gt; &#xA; &lt;li&gt;Sigma rules&lt;/li&gt; &#xA; &lt;li&gt;Custom attack detection rules&lt;/li&gt; &#xA; &lt;li&gt;Remote analysis&lt;/li&gt; &#xA; &lt;li&gt;Logon Statistics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;At the moment, please use a Windows Powershell 5.1. You will need local Administrator access for live analysis.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;    Analysis Source (Specify one):&#xA;        -LiveAnalysis : Creates a timeline based on the live host&#39;s log&#xA;        -LogFile &amp;lt;path-to-logfile&amp;gt; : Creates a timelime from an offline .evtx file&#xA;        -LogDirectory &amp;lt;path-to-logfiles&amp;gt; (Warning: not fully implemented.) : Analyze offline .evtx files&#xA;        -RemoteLiveAnalysis : Creates a timeline based on the remote host&#39;s log&#xA;&#xA;    Analysis Type (Specify one):&#xA;        -AnalyzeNTLM_UsageBasic : Returns basic NTLM usage based on the NTLM Operational log&#xA;        -AnalyzeNTLM_UsageDetailed : Returns detailed NTLM usage based on the NTLM Operational log&#xA;        -EventID_Statistics : Output event ID statistics&#xA;        -LogonTimeline : Output a condensed timeline of user logons based on the Security log&#xA;        -SecurityAuthenticationSummary : Output a summary of authentication events for each logon type based on the Security log&#xA;&#xA;    Analysis Options:&#xA;        -StartTimeline &#34;&amp;lt;YYYY-MM-DD HH:MM:SS&amp;gt;&#34; : Specify the start of the timeline&#xA;        -EndTimeline &#34;&amp;lt;YYYY-MM-DD HH:MM:SS&amp;gt;&#34; : Specify the end of the timeline&#xA;&#xA;    -LogonTimeline Analysis Options:&#xA;        -IsDC : Specify if the logs are from a DC&#xA;&#xA;    Output Types (Default: Standard Output):&#xA;        -SaveOutput &amp;lt;outputfile-path&amp;gt; : Output results to a text file&#xA;        -OutputCSV : Outputs to CSV&#xA;        -OutputGUI : Outputs to the Out-GridView GUI&#xA;&#xA;    General Output Options:&#xA;        -USDateFormat : Output the dates in MM-DD-YYYY format (Default: YYYY-MM-DD)&#xA;        -EuropeDateFormat : Output the dates in DD-MM-YYYY format (Default: YYYY-MM-DD)&#xA;        -UTC : Output in UTC time (default is the local timezone)&#xA;        -Japanese : Output in Japanese&#xA;&#xA;    -LogonTimeline Output Options:&#xA;        -HideTimezone : Hides the timezone&#xA;        -ShowLogonID : Show logon IDs&#xA;&#xA;    Other:&#xA;        -ShowContributors : Show the contributors&#xA;        -QuietLogo : Do not display the WELA logo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Useful Options&lt;/h2&gt; &#xA;&lt;h3&gt;Show event ID statistics to get a grasp of what kind of events there are:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;./WELA.ps1 -LogFile .\Security.evtx -EventIDStatistics&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a timeline via offline analysis outputted to a GUI in UTC time:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\WELA.ps1 -LogFile .\Security.evtx -LogonTimeline -OutputGUI -UTC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Analyze NTLM Operational logs for NTLM usage before disabling it:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\WELA.ps1 -LogFile .\DC1-NTLM-Operational.evtx -AnalyzeNTLM_UsageBasic &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Security logon statistics on a live machine:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\WELA.ps1 -LiveAnalysis -SecurityAuthenticationSummary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;Logon Timeline GUI:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Yamato-Security/WELA/main/Screenshots/Screenshot-LogonTimelineGUI.png&#34; alt=&#34;Logon Timeline GUI&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Human Readable Timeline:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Yamato-Security/WELA/main/Screenshots/Screenshot-HumanReadableTimeline.png&#34; alt=&#34;Logon Timeline GUI&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Logon Type Statistics:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Yamato-Security/WELA/main/Screenshots/Screenshot-LogonStatistics.png&#34; alt=&#34;Logon Statistics&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Event ID Statistics:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Yamato-Security/WELA/main/Screenshots/Screenshot-EventIDStatistics.png&#34; alt=&#34;Event ID Statistics&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Logon Type Summary:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Yamato-Security/WELA/main/Screenshots/Screenshot-LogonTypeSummary.png&#34; alt=&#34;Logon Type Summary&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;NTLM Authentication Analysis:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Yamato-Security/WELA/main/Screenshots/Screenshot-NTLM-Statistics-EN.png&#34; alt=&#34;Logon Type Summary&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related Windows Event Log Threat Hunting Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ahmedkhlief/APT-Hunter&#34;&gt;APT-Hunter&lt;/a&gt; - Attack detection tool written in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/countercept/chainsaw&#34;&gt;Chainsaw&lt;/a&gt; - Sigma-based attack detection tool written in Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sans-blue-team/DeepBlueCLI&#34;&gt;DeepBlueCLI&lt;/a&gt; - Attack detection tool written in Powershell.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES&#34;&gt;EVTX ATTACK Samples&lt;/a&gt; - EVTX Attack sample event log files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Yamato-Security/hayabusa/raw/main/README-English.md&#34;&gt;Hayabusa&lt;/a&gt; - Sigma-based attack detection and fast forensics timeline generator by &lt;a href=&#34;https://github.com/Yamato-Security/&#34;&gt;Yamato Security&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Yamato-Security/RustyBlue&#34;&gt;RustyBlue&lt;/a&gt; Rust port of DeepBlueCLI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SigmaHQ/sigma&#34;&gt;Sigma&lt;/a&gt; - generic SIEM rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.securityonion.net/en/2.3/so-import-evtx.html&#34;&gt;so-import-evtx&lt;/a&gt; - Import evtx files into Security Onion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wagga40/Zircolite&#34;&gt;Zircolite&lt;/a&gt; - Sigma-based attack detection tool written in Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;We would love any form of contributing. Pull requests are the best but feature requests, notifying us of bugs, etc... are also very welcome.&lt;/p&gt;</summary>
  </entry>
</feed>