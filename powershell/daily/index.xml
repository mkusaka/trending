<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:39:52Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>atomiczsec/My-Payloads</title>
    <updated>2023-10-22T01:39:52Z</updated>
    <id>tag:github.com,2023-10-22:/atomiczsec/My-Payloads</id>
    <link href="https://github.com/atomiczsec/My-Payloads" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of my payloads for the bash bunny, rubber ducky, FlipperZero, and OMG cable&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hak5 &amp;amp; FlipperZero HID Attack Payloads &amp;amp; Functions&lt;/h1&gt; &#xA;&lt;p&gt;This repository is a collection of payloads that I have designed for use with various hardware hacking tools. These tools include the USB Rubber Ducky, the Bash Bunny, the OMG cable, and the FlipperZero. The payloads in this repository are primarily written in powershell and duckyscript, which are programming languages commonly used in the development of payloads for these types of tools. If you have any questions or need help with any of the scripts in this repository, you can reach out to me using the contact information provided. The payloads in this repository can be used to perform a variety of tasks, such as automating processes, executing commands, or exploiting vulnerabilities in systems. They can be particularly useful for penetration testing, cybersecurity research, and other activities that involve interacting with or manipulating computer systems.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;Quick Refrence&lt;/h3&gt; &#xA; &lt;a href=&#34;https://twitter.com/atomiczsec&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/atomiczsec?style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/atomiczsec/My-Payloads/&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/atomiczsec/My-Payloads&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/atomiczsec/&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/followers/atomiczsec?style=social&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;img src=&#34;https://github.com/atomiczsec/My-Payloads/raw/main/Assets/read.png?&#34; width=&#34;1000&#34;&gt; &#xA;&lt;p&gt;To learn more about Hak5 or the Flipper Zero , please visit their websites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.hak5.org&#34;&gt;www.hak5.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://flipperzero.one/&#34;&gt;www.flipperzero.one&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;DISCLAIMER: This repository is for educational purposes only and is not intended for real-world usage. The creators of this repository are not responsible for any harm or damage that may occur as a result of using the information or code provided in this repository. By accessing and using this repository, you acknowledge and agree that you do so at your own risk.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dafthack/GraphRunner</title>
    <updated>2023-10-22T01:39:52Z</updated>
    <id>tag:github.com,2023-10-22:/dafthack/GraphRunner</id>
    <link href="https://github.com/dafthack/GraphRunner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Post-exploitation Toolset for Interacting with the Microsoft Graph API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GraphRunner&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dafthack/GraphRunner/assets/2296229/d9b6843c-8c69-4d9d-bed4-38e5e2269574&#34; alt=&#34;GraphRunner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;GraphRunner is a post-exploitation toolset for interacting with the Microsoft Graph API. It provides various tools for performing reconnaissance, persistence, and pillaging of data from a Microsoft Entra ID (Azure AD) account.&lt;/p&gt; &#xA;&lt;p&gt;It consists of three separate parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A PowerShell script where the majority of modules are located&lt;/li&gt; &#xA; &lt;li&gt;An HTML GUI that can leverage an access token to navigate and pillage a user&#39;s account&lt;/li&gt; &#xA; &lt;li&gt;A simple PHP redirector for harvesting authentication codes during an OAuth flow&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Main Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Search and export email&lt;/li&gt; &#xA; &lt;li&gt;Search and export SharePoint and OneDrive files accessible to a user&lt;/li&gt; &#xA; &lt;li&gt;Search all Teams chats and channels visible to the user and export full conversations&lt;/li&gt; &#xA; &lt;li&gt;Deploy malicious apps&lt;/li&gt; &#xA; &lt;li&gt;Discover misconfigured mailboxes that are exposed&lt;/li&gt; &#xA; &lt;li&gt;Clone security groups to carry out watering hole attacks&lt;/li&gt; &#xA; &lt;li&gt;Find groups that can be modified directly by your user or where membership rules can be abused to gain access&lt;/li&gt; &#xA; &lt;li&gt;Search all user attributes for specific terms&lt;/li&gt; &#xA; &lt;li&gt;Leverage a GUI built on the Graph API to pillage a user&#39;s account&lt;/li&gt; &#xA; &lt;li&gt;Dump conditional access policies&lt;/li&gt; &#xA; &lt;li&gt;Dump app registrations and external apps including consent and scope to identify potentially malicious apps&lt;/li&gt; &#xA; &lt;li&gt;Tools to complete OAuth flow during consent grant attacks&lt;/li&gt; &#xA; &lt;li&gt;GraphRunner doesn&#39;t rely on any third-party libraries or modules&lt;/li&gt; &#xA; &lt;li&gt;Works with Windows and Linux&lt;/li&gt; &#xA; &lt;li&gt;Continuously refresh your token package&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;As GraphRunner is a post-exploitation tool most of the modules rely on having authenticated access tokens. To assist with this there are multiple modules for obtaining and working with both user and application (service principal) tokens.&lt;/p&gt; &#xA;&lt;p&gt;A good starting place is to import the PowerShell script and run the Get-GraphTokens module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Import-Module .\GraphRunner.ps1&#xA;Get-GraphTokens&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, check out the &lt;a href=&#34;https://github.com/dafthack/GraphRunner/wiki&#34;&gt;wiki&lt;/a&gt; for the full user guide and information about individual modules.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cloud-Architekt/AzurePrivilegedIAM</title>
    <updated>2023-10-22T01:39:52Z</updated>
    <id>tag:github.com,2023-10-22:/Cloud-Architekt/AzurePrivilegedIAM</id>
    <link href="https://github.com/Cloud-Architekt/AzurePrivilegedIAM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docs and samples for privileged identity and access management in Microsoft Azure and Microsoft Entra.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Privileged Identity &amp;amp; Access in Microsoft Entra&lt;/h1&gt; &#xA;&lt;p&gt;Docs, resources and samples to implement a secure privileged identity and access management in Microsoft Azure and Microsoft Entra.&lt;/p&gt; &#xA;&lt;h2&gt;üìù Classification of Roles and Permissions&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve created an approach to automate classification of role actions based on Microsoft&#39;s Enterprise Access Model. Samples of the classification file which I&#39;ve created for the implementation in EntraOps can be found here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cloud-Architekt/AzurePrivilegedIAM/raw/main/EntraOps_Classification/Classification_AadResources.json&#34;&gt;EntraOps - Defined Classification of Entra ID Role Actions in JSON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cloud-Architekt/AzurePrivilegedIAM/raw/main/EntraOps_Classification/Classification_AppRoles.json&#34;&gt;EntraOps - Defined Classification of Microsoft Graph API Permissions in JSON&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The generated classification (based on the previous definition files) are also available and can be used as lookup in analytics rules (in Microsoft Sentinel) or to built your own automation and/or entity enrichment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cloud-Architekt/AzurePrivilegedIAM/raw/main/Classification/Classification_EntraIdDirectoryRoles.json&#34;&gt;Classified Entra ID Roles in JSON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cloud-Architekt/AzurePrivilegedIAM/main/Classification/Classification_AppRoles.json&#34;&gt;Classified Microsoft Graph API Permissions in JSON&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sample queries to use classification in KQL queries in Microsoft Sentinel can be found here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cloud-Architekt/AzureSentinel/raw/main/Hunting%20Queries/EID-PrivilegedIdentities/DirectoryRoleMemberWithClassification.kusto&#34;&gt;List of (active/permanent) Directory role member with enriched classification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cloud-Architekt/AzureSentinel/raw/main/Hunting%20Queries/EID-PrivilegedIdentities/AddedAppRolesWithClassification.kusto&#34;&gt;Added API Permissions with enriched classification from EntraOps Privileged EAM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The helper script to create classification by using the definition of classification are available here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cloud-Architekt/AzurePrivilegedIAM/main/Get-EntraOpsClassificationDirectoryRoles.ps1&#34;&gt;Script for Classification of Entra ID Roles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cloud-Architekt/AzurePrivilegedIAM/main/Scripts/Get-EntraOpsClassificationAppRoles.ps1&#34;&gt;Script for Classification of Microsoft Graph API Permission&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Side Note: The classification export of App Roles (&lt;code&gt;Get-EntraOpsClassificationAppRoles&lt;/code&gt;) can also include a list of &#34;Authorized Api Calls&#34; by using the Parameter &lt;code&gt;IncludeAuthorizedApiCalls&lt;/code&gt;. This information will be enriched from the GitHub project &#34;&lt;a href=&#34;https://github.com/merill/graphpermissions.github.io&#34;&gt;graphpermissions.github.io&lt;/a&gt;&#34; (created by &lt;a href=&#34;https://github.com/merill&#34;&gt;Merill Fernando&lt;/a&gt;). Kudos to Merill!&lt;/p&gt; &#xA;&lt;h3&gt;üì¢ Call for Community Contributors!&lt;/h3&gt; &#xA;&lt;p&gt;Mostly, role actions and permissions on Control Plane has been classified. There are still a high number of &#34;unclassified&#34; role actions and maybe also some classified roles which should be reviewed or may assessed differently. As already described, the source for all classification will be managed in the &#34;&lt;a href=&#34;https://github.com/Cloud-Architekt/AzurePrivilegedIAM/tree/main/EntraOps_Classification&#34;&gt;EntraOps_Classification&lt;/a&gt;&#34; files and should be the single point for modification to this project. I would be more than happy to see contributions by the community which helps to increase the coverage and quality of the classification for the Enterprise Access Model. Feel free to create PR, issues or contact me if you have any further questions or feedback.&lt;/p&gt; &#xA;&lt;h2&gt;üîÅ Lifecycle Workflows&lt;/h2&gt; &#xA;&lt;p&gt;On- and Offboarding of Privileged Accounts can be automated with the Entra ID Governance feature &#34;Lifecycle workflows&#34;. Samples for the custom tasks can be found here and are described in the blog post &#34;&lt;a href=&#34;https://www.cloud-architekt.net/manage-privileged-identities-with-azuread-identity-governance/&#34;&gt;Automated Lifecycle Workflows for Privileged Identities with Azure AD Identity Governance&lt;/a&gt;&#34;&lt;/p&gt; &#xA;&lt;h2&gt;üìÑ Role Definition Matrix of Personas for Privileged Access in Microsoft Azure&lt;/h2&gt; &#xA;&lt;p&gt;Various articles on Microsoft Learn describes Roles and Personas for privileged access in Azure. I&#39;ve created a role definition matrix to compare the descriptions of personas but also tiering levels from Enterprise Access Model. Check out the &#34;&lt;a href=&#34;https://github.com/Cloud-Architekt/AzurePrivilegedIAM/raw/main/EAS_EAM_AzureRBAC_TabularSummary.pdf&#34;&gt;EAS_EAM_AzureRBAC_TabularSummary.pdf&lt;/a&gt;&#34;&lt;/p&gt; &#xA;&lt;h2&gt;ü§ñ Scripts for Automation and Definition of Classification&lt;/h2&gt; &#xA;&lt;p&gt;Examples for PowerShell Scripts to export a list of privileged assignments in Azure (incl. Azure Billing/Enterprise Agreement) and also helper files for Classification can be found &lt;a href=&#34;https://github.com/Cloud-Architekt/AzurePrivilegedIAM/tree/main/Scripts&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>