<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-09T01:37:17Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>1njected/CMLoot</title>
    <updated>2022-12-09T01:37:17Z</updated>
    <id>tag:github.com,2022-12-09:/1njected/CMLoot</id>
    <link href="https://github.com/1njected/CMLoot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find interesting files stored on (System Center) Configuration Manager (SCCM/CM) SMB shares&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CMLoot&lt;/h1&gt; &#xA;&lt;p&gt;CMLoot was created to easily find interesting files stored on System Center Configuration Manager (SCCM/CM) SMB shares. The shares are used for distributing software to Windows clients in Windows enterprise environments and can contains scripts/configuration files with passwords, certificates (pfx), etc. Most SCCM deployments are configured to allow all users to read the files on the shares, sometimes it is limited to computer accounts.&lt;/p&gt; &#xA;&lt;p&gt;The Content Library of SCCM/CM have a &#34;complex&#34; (annoying) file structure which CMLoot will untangle for you: &lt;a href=&#34;https://techcommunity.microsoft.com/t5/configuration-manager-archive/understanding-the-configuration-manager-content-library/ba-p/273349&#34;&gt;https://techcommunity.microsoft.com/t5/configuration-manager-archive/understanding-the-configuration-manager-content-library/ba-p/273349&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Essentially the DataLib folder contains .INI files, the .INI file are named the original filename + .INI. The .INI file contains a hash of the file, and the file itself is stored in the FileLib in format of &amp;lt;folder name: 4 first chars of the hash&amp;gt;\fullhash.&lt;/p&gt; &#xA;&lt;h3&gt;CM Access Accounts&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to apply Access control to packages in CM. This however only protects the folder for the file descriptor (DataLib), not the actual file itself. CMLoot will during inventory record any package that it can&#39;t access (Access denied) to the file &#xA; &lt;inventoryfile&gt;&#xA;  _noaccess.txt. Invoke-CMLootHunt can then use this file to enumerate the actual files that the access control is trying to protect.&#xA; &lt;/inventoryfile&gt;&lt;/p&gt; &#xA;&lt;h3&gt;OPSEC&lt;/h3&gt; &#xA;&lt;p&gt;Windows Defender for Endpoint (EDR) or other security mechanisms might trigger because the script parses a lot of files over SMB.&lt;/p&gt; &#xA;&lt;h3&gt;HOWTO&lt;/h3&gt; &#xA;&lt;p&gt;Find CM servers by searching for them in Active Directory or by fetching this reqistry key on a workstation with System Center installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\SMS\DP -Name ManagementPoints).ManagementPoints&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There may be multiple CM servers deployed and they can contain different files so be sure to find all of them.&lt;/p&gt; &#xA;&lt;p&gt;Then you need to create an inventory file which is just a text file containing references to file descriptors (.INI). The following command will parse all .INI files on the SCCM server to create a list of files available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS&amp;gt; Invoke-CMLootInventory -SCCMHost sccm01.domain.local -Outfile sccmfiles.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use the inventory file created above to download files of interest:&lt;/p&gt; &#xA;&lt;p&gt;Select files using GridView (Milage may vary with large inventory files):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS&amp;gt; Invoke-CMLootDownload -InventoryFile .\sccmfiles.txt -GridSelect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download a single file, by coping a line in the inventory text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS&amp;gt; Invoke-CMLootDownload -SingleFile \\sccm\SCCMContentLib$\DataLib\SC100001.1\x86\MigApp.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download all files with a certain file extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS&amp;gt; Invoke-CMLootDownload -InventoryFile .\sccmfiles.txt -Extension ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Files will by default download to CMLootOut in the folder from which you execute the script, can be changed with -OutFolder parameter. Files are saved in the format of (folder: filext)\(first 4 chars of hash&amp;gt;_original filename).&lt;/p&gt; &#xA;&lt;p&gt;Hunt for files that CMLootInventory found inaccessible:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Invoke-CMLootHunt -SCCMHost sccm -NoAccessFile sccmfiles_noaccess.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bulk extract MSI files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Invoke-CMLootExtract -Path .\CMLootOut\msi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DEMO&lt;/h3&gt; &#xA;&lt;p&gt;Run inventory, scanning available files: &lt;img src=&#34;https://raw.githubusercontent.com/1njected/CMLoot/main/demo/inventory.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Select files using GridSelect: &lt;img src=&#34;https://raw.githubusercontent.com/1njected/CMLoot/main/demo/gridselect.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download all extensions: &lt;img src=&#34;https://raw.githubusercontent.com/1njected/CMLoot/main/demo/extension.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hunt &#34;inaccessible&#34; files and MSI extract: &lt;img src=&#34;https://raw.githubusercontent.com/1njected/CMLoot/main/demo/hunt.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Author&lt;/h3&gt; &#xA;&lt;p&gt;Tomas Rzepka / WithSecure&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>actions/python-versions</title>
    <updated>2022-12-09T01:37:17Z</updated>
    <id>tag:github.com,2022-12-09:/actions/python-versions</id>
    <link href="https://github.com/actions/python-versions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python builds for Actions Virtual Environments&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Python for Actions&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the code and scripts that we use to build Python packages used in &lt;a href=&#34;https://github.com/actions/runner-images&#34;&gt;runner-images&lt;/a&gt; and accessible through the &lt;a href=&#34;https://github.com/actions/setup-python&#34;&gt;setup-python&lt;/a&gt; Action. File &lt;a href=&#34;https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json&#34;&gt;versions-manifest.json&lt;/a&gt; contains the list of available and released versions.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Caution: this is prepared for and only permitted for use by actions &lt;code&gt;runner-images&lt;/code&gt; and &lt;code&gt;setup-python&lt;/code&gt; action.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Currently under development and in use for beta and preview actions. This repo is undergoing rapid changes.&lt;/p&gt; &#xA;&lt;p&gt;Some versions are pre-installed on &lt;a href=&#34;https://github.com/actions/runner-images&#34;&gt;runner-images&lt;/a&gt; images. More versions will (soon!) be available to install on-the-fly through the &lt;a href=&#34;https://github.com/actions/setup-python&#34;&gt;&lt;code&gt;setup-python&lt;/code&gt;&lt;/a&gt; action.&lt;/p&gt; &#xA;&lt;h2&gt;Adding new versions&lt;/h2&gt; &#xA;&lt;p&gt;We are trying to build and release new versions of Python as soon as they are released. Please open an issue in &lt;a href=&#34;https://github.com/actions/setup-python/issues&#34;&gt;actions/setup-python&lt;/a&gt; if any versions are missing.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! See &lt;a href=&#34;https://raw.githubusercontent.com/actions/python-versions/main/CONTRIBUTING.md&#34;&gt;Contributor&#39;s Guide&lt;/a&gt; for more details about contribution process and code structure&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MScholtes/PS2EXE</title>
    <updated>2022-12-09T01:37:17Z</updated>
    <id>tag:github.com,2022-12-09:/MScholtes/PS2EXE</id>
    <link href="https://github.com/MScholtes/PS2EXE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Module to compile powershell scripts to executables&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;If your compiled script is mistakenly detected as malware, the best way to prevent this is to certify the executable.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please do not use PS2EXE to create harmful programs!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PS2EXE&lt;/h1&gt; &#xA;&lt;p&gt;Overworking of the great script of Ingo Karstein with GUI support. The GUI output and input is activated with one switch, real windows executables are generated. With Powershell 5.x support and graphical front end.&lt;/p&gt; &#xA;&lt;p&gt;Module version.&lt;/p&gt; &#xA;&lt;p&gt;You find the script based version here (&lt;a href=&#34;https://github.com/MScholtes/TechNet-Gallery&#34;&gt;https://github.com/MScholtes/TechNet-Gallery&lt;/a&gt;) and here: &lt;a href=&#34;https://gallery.technet.microsoft.com/PS2EXE-GUI-Convert-e7cb69d5&#34;&gt;PS2EXE-GUI: &#34;Convert&#34; PowerShell Scripts to EXE Files with GUI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Author: Markus Scholtes&lt;/p&gt; &#xA;&lt;p&gt;Version: 1.0.12&lt;/p&gt; &#xA;&lt;p&gt;Date: 2021-12-25&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS C:\&amp;gt; Install-Module ps2exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(on Powershell V4 you may have to install PowershellGet before) or download from here: &lt;a href=&#34;https://www.powershellgallery.com/packages/ps2exe/&#34;&gt;https://www.powershellgallery.com/packages/ps2exe/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;  Invoke-ps2exe .\source.ps1 .\target.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;  ps2exe .\source.ps1 .\target.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;compiles &#34;source.ps1&#34; into the executable target.exe (if &#34;.\target.exe&#34; is omitted, output is written to &#34;.\source.exe&#34;).&lt;/p&gt; &#xA;&lt;p&gt;or start Win-PS2EXE for a graphical front end with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;  Win-PS2EXE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parameter&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;ps2exe [-inputFile] &#39;&amp;lt;file_name&amp;gt;&#39; [[-outputFile] &#39;&amp;lt;file_name&amp;gt;&#39;]&#xA;       [-prepareDebug] [-x86|-x64] [-lcid &amp;lt;id&amp;gt;] [-STA|-MTA] [-noConsole] [-UNICODEEncoding]&#xA;       [-credentialGUI] [-iconFile &#39;&amp;lt;filename&amp;gt;&#39;] [-title &#39;&amp;lt;title&amp;gt;&#39;] [-description &#39;&amp;lt;description&amp;gt;&#39;]&#xA;       [-company &#39;&amp;lt;company&amp;gt;&#39;] [-product &#39;&amp;lt;product&amp;gt;&#39;] [-copyright &#39;&amp;lt;copyright&amp;gt;&#39;] [-trademark &#39;&amp;lt;trademark&amp;gt;&#39;]&#xA;       [-version &#39;&amp;lt;version&amp;gt;&#39;] [-configFile] [-noOutput] [-noError] [-noVisualStyles] [-exitOnCancel]&#xA;       [-DPIAware] [-winFormsDPIAware] [-requireAdmin] [-supportOS] [-virtualize] [-longPaths]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;       inputFile = Powershell script that you want to convert to executable (file has to be UTF8 or UTF16 encoded)&#xA;      outputFile = destination executable file name or folder, defaults to inputFile with extension &#39;.exe&#39;&#xA;    prepareDebug = create helpful information for debugging    &#xA;      x86 or x64 = compile for 32-bit or 64-bit runtime only&#xA;            lcid = location ID for the compiled executable. Current user culture if not specified&#xA;      STA or MTA = &#39;Single Thread Apartment&#39; or &#39;Multi Thread Apartment&#39; mode&#xA;       noConsole = the resulting executable will be a Windows Forms app without a console window&#xA; UNICODEEncoding = encode output as UNICODE in console mode&#xA;   credentialGUI = use GUI for prompting credentials in console mode&#xA;        iconFile = icon file name for the compiled executable&#xA;           title = title information (displayed in details tab of Windows Explorer&#39;s properties dialog)&#xA;     description = description information (not displayed, but embedded in executable)&#xA;         company = company information (not displayed, but embedded in executable)&#xA;         product = product information (displayed in details tab of Windows Explorer&#39;s properties dialog)&#xA;       copyright = copyright information (displayed in details tab of Windows Explorer&#39;s properties dialog)&#xA;       trademark = trademark information (displayed in details tab of Windows Explorer&#39;s properties dialog)&#xA;         version = version information (displayed in details tab of Windows Explorer&#39;s properties dialog)&#xA;      configFile = write config file (&amp;lt;outputfile&amp;gt;.exe.config)&#xA;        noOutput = the resulting executable will generate no standard output (includes verbose and information channel)&#xA;         noError = the resulting executable will generate no error output (includes warning and debug channel)&#xA;  noVisualStyles = disable visual styles for a generated windows GUI application (only with -noConsole)&#xA;    exitOnCancel = exits program when Cancel or &#34;X&#34; is selected in a Read-Host input box (only with -noConsole)&#xA;        DPIAware = if display scaling is activated, GUI controls will be scaled if possible&#xA;winFormsDPIAware = if display scaling is activated, WinForms use DPI scaling (requires Windows 10 and .Net 4.7 or up)&#xA;    requireAdmin = if UAC is enabled, compiled executable run only in elevated context (UAC dialog appears if required)&#xA;       supportOS = use functions of newest Windows versions (execute [Environment]::OSVersion to see the difference)&#xA;      virtualize = application virtualization is activated (forcing x86 runtime)&#xA;       longPaths = enable long paths ( &amp;gt; 260 characters) if enabled on OS (works only with Windows 10 or up)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A generated executable has the following reserved parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-debug              Forces the executable to be debugged. It calls &#34;System.Diagnostics.Debugger.Launch()&#34;.&#xA;-extract:&amp;lt;FILENAME&amp;gt; Extracts the powerShell script inside the executable and saves it as FILENAME.&#xA;                    The script will not be executed.&#xA;-wait               At the end of the script execution it writes &#34;Hit any key to exit...&#34; and waits for a key to be pressed.&#xA;-end                All following options will be passed to the script inside the executable.&#xA;                    All preceding options are used by the executable itself and will not be passed to the script.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Remarks&lt;/h2&gt; &#xA;&lt;h3&gt;List of cmdlets not implemented:&lt;/h3&gt; &#xA;&lt;p&gt;The basic input/output commands had to be rewritten in C# for PS2EXE. Not implemented are &lt;em&gt;Write-Progress&lt;/em&gt; in console mode (too much work) and &lt;em&gt;Start-Transcript&lt;/em&gt;/&lt;em&gt;Stop-Transcript&lt;/em&gt; (no proper reference implementation by Microsoft).&lt;/p&gt; &#xA;&lt;h3&gt;GUI mode output formatting:&lt;/h3&gt; &#xA;&lt;p&gt;Per default in powershell outputs of commandlets are formatted line per line (as an array of strings). When your command generates 10 lines of output and you use GUI output, 10 message boxes will appear each awaiting for an OK. To prevent this pipe your commandto the comandlet Out-String. This will convert the output to one string array with 10 lines, all output will be shown in one message box (for example: dir C:\ | Out-String).&lt;/p&gt; &#xA;&lt;h3&gt;Parameter processing:&lt;/h3&gt; &#xA;&lt;p&gt;Compiled scripts process parameters like the original script does. One restriction comes from the Windows environment: for all executables all parameters have the type STRING, if there is no implicit conversion for your parameter type you have to convert explicitly in your script. You can even pipe content to the executable with the same restriction (all piped values have the type STRING).&lt;/p&gt; &#xA;&lt;h3&gt;Password security:&lt;/h3&gt; &#xA;&lt;p&gt;Never store passwords in your compiled script! One can simply decompile the script with the parameter -extract. For example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Output.exe -extract:C:\Output.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will decompile the script stored in Output.exe.&lt;/p&gt; &#xA;&lt;h3&gt;Script variables:&lt;/h3&gt; &#xA;&lt;p&gt;Since PS2EXE converts a script to an executable, script related variables are not available anymore. Especially the variable $PSScriptRoot is empty.&lt;/p&gt; &#xA;&lt;p&gt;The variable $MyInvocation is set to other values than in a script.&lt;/p&gt; &#xA;&lt;p&gt;You can retrieve the script/executable path independant of compiled/not compiled with the following code (thanks to JacquesFS):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;if ($MyInvocation.MyCommand.CommandType -eq &#34;ExternalScript&#34;)&#xA; { $ScriptPath = Split-Path -Parent -Path $MyInvocation.MyCommand.Definition }&#xA; else&#xA; { $ScriptPath = Split-Path -Parent -Path ([Environment]::GetCommandLineArgs()[0]) &#xA;     if (!$ScriptPath){ $ScriptPath = &#34;.&#34; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Window in background in -noConsole mode:&lt;/h3&gt; &#xA;&lt;p&gt;When an external window is opened in a script with -noConsole mode (i.e. for Get-Credential or for a command that needs a cmd.exe shell) the next window is opened in the background.&lt;/p&gt; &#xA;&lt;p&gt;The reason for this is that on closing the external window windows tries to activate the parent window. Since the compiled script has no window, the parent window of the compiled script is activated instead, normally the window of Explorer or Powershell.&lt;/p&gt; &#xA;&lt;p&gt;To work around this, $Host.UI.RawUI.FlushInputBuffer() opens an invisible window that can be activated. The following call of $Host.UI.RawUI.FlushInputBuffer() closes this window (and so on).&lt;/p&gt; &#xA;&lt;p&gt;The following example will not open a window in the background anymore as a single call of &#34;ipconfig | Out-String&#34; will do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$Host.UI.RawUI.FlushInputBuffer()&#xA;ipconfig | Out-String&#xA;$Host.UI.RawUI.FlushInputBuffer()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changes:&lt;/h2&gt; &#xA;&lt;h3&gt;1.0.12 / 2022-11-22&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;new parameter -winFormsDPIAware to support scaling for WinForms in noConsole mode (only Windows 10 or up)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.11 / 2021-11-21&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fixed password longer than 24 characters error&lt;/li&gt; &#xA; &lt;li&gt;new parameter -DPIAware to support scaling in noConsole mode&lt;/li&gt; &#xA; &lt;li&gt;new parameter -exitOnCancel to stop program execution on cancel in input boxes (only in noConsole mode)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.10 / 2021-04-10&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;parameter outputFile now accepts a target folder (without filename)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.9 / 2021-02-28&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;new parameter UNICODEEncoding to output as UNICODE&lt;/li&gt; &#xA; &lt;li&gt;changed parameter debug to prepareDebug&lt;/li&gt; &#xA; &lt;li&gt;finally dared to use advanced parameters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.8 / 2020-10-24&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;refactored&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.7 / 2020-08-21&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bug fix for simultanous progress bars in one pipeline&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.6 / 2020-08-10&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;prompt for choice behaves like Powershell now (console mode only)&lt;/li&gt; &#xA; &lt;li&gt;(limited) support for Powershell Core (starts Windows Powershell in the background)&lt;/li&gt; &#xA; &lt;li&gt;fixed processing of negative parameter values&lt;/li&gt; &#xA; &lt;li&gt;support for animated progress bars (noConsole mode only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.5 / 2020-07-11&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;support for nested progress bars (noConsole mode only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.4 / 2020-04-19&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application.EnableVisualStyles() as default for GUI applications, new parameter -noVisualStyles to prevent this&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.3 / 2020-02-15&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;converted files from UTF-16 to UTF-8 to allow git diff&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ignore control keys in secure string request in console mode&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.2 / 2020-01-08&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added examples to github&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.1 / 2019-12-16&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fixed &#34;unlimited window width for GUI windows&#34; issue in ps2exe.ps1 and Win-PS2EXE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.0 / 2019-11-08&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;first stable module version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;0.0.0 / 2019-09-15&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;experimental&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>