<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-24T01:39:43Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nickvourd/Windows-Local-Privilege-Escalation-Cookbook</title>
    <updated>2023-12-24T01:39:43Z</updated>
    <id>tag:github.com,2023-12-24:/nickvourd/Windows-Local-Privilege-Escalation-Cookbook</id>
    <link href="https://github.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Windows Local Privilege Escalation Cookbook&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Windows Local Privilege Escalation Cookbook (In Progress)&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/Pictures/Windows-Funny.jpg&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Description (Keynote)&lt;/h2&gt; &#xA;&lt;p&gt;This Cookbook was created with the main purpose of helping people understand local privilege escalation techniques on Windows environments. Moreover, it can be used for both attacking and defensive purposes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; This Cookbook focuses only on misconfiguration vulnerabilities on Windows workstations/servers/machines.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Evasion techniques to bypass security protections, endpoints, and antivirus are not included in this cookbook. I created this PowerShell script, &lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/Lab-Setup-Scripts/TurnOffAV.ps1&#34;&gt;TurnOffAV.ps1&lt;/a&gt;, which permanently disables Windows Defender. Run this with local Administrator privileges.&lt;/p&gt; &#xA;&lt;p&gt;The main structure of this Cookbook includes the following sections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Description (of the vulnerability)&lt;/li&gt; &#xA; &lt;li&gt;Lab Setup&lt;/li&gt; &#xA; &lt;li&gt;Enumeration&lt;/li&gt; &#xA; &lt;li&gt;Exploitation&lt;/li&gt; &#xA; &lt;li&gt;Mitigation&lt;/li&gt; &#xA; &lt;li&gt;(Useful) References&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I hope to find this CookBook useful and learn new stuff 😉.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/#windows-local-privilege-escalation-cookbook&#34;&gt;Windows Local Privilege Escalation Cookbook&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/#description-keynote&#34;&gt;Description (Keynote)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/#useful-tools&#34;&gt;Useful Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/#vulnerabilities&#34;&gt;Vulnerabilities&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful Tools&lt;/h2&gt; &#xA;&lt;p&gt;In the following table, some popular and useful tools for Windows local privilege escalation are presented:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Author&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/GhostPack/SharpUp&#34;&gt;SharpUp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C#&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/harmj0y&#34;&gt;@harmj0y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SharpUp is a C# port of various PowerUp functionality&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/PowerShellMafia/PowerSploit/raw/master/Privesc/PowerUp.ps1&#34;&gt;PowerUp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PowerShell&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/harmj0y&#34;&gt;@harmj0y&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PowerUp aims to be a clearinghouse of common Windows privilege escalation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/AlessandroZ/BeRoot&#34;&gt;BeRoot&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/AlessandroZ&#34;&gt;AlessandroZ&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BeRoot(s) is a post exploitation tool to check common Windows misconfigurations to find a way to escalate our privilege&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/enjoiz/Privesc&#34;&gt;Privesc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PowerShell&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/enjoiz&#34;&gt;enjoiz&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows PowerShell script that finds misconfiguration issues which can lead to privilege escalation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS/winPEASexe&#34;&gt;Winpeas&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C#&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/hacktricks_live&#34;&gt;@hacktricks_live&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows local Privilege Escalation Awesome Script&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;This Cookbook presents the following Windows vulnerabilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/Notes/AlwaysInstallElevated.md&#34;&gt;AlwaysInstallElevated&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/Notes/LogonAutostartExecutionRegistryRunKeys.md&#34;&gt;Logon Autostart Execution (Registry Run Keys)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/Notes/LogonAutostartExecutionStartupFolder.md&#34;&gt;Logon Autostart Execution (Startup Folder)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/Notes/LeakedCredentialsPowerShellHistory.md&#34;&gt;Leaked Credentials (PowerShell History)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/Notes/ScheduledTaskJob.md&#34;&gt;Scheduled Task/Job&lt;/a&gt;*&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/Notes/SeBackupPrivilege.md&#34;&gt;SeBackupPrivilege&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SeImpersonatePrivilege&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Windows-Local-Privilege-Escalation-Cookbook/master/Notes/StoredCredentialsRunas.md&#34;&gt;Stored Credentials (Runas)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unquoted Service Path&lt;/li&gt; &#xA; &lt;li&gt;Weak Service Binary Permissions&lt;/li&gt; &#xA; &lt;li&gt;Weak Service Permissions&lt;/li&gt; &#xA; &lt;li&gt;Weak Registry Permissions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Privilege_escalation&#34;&gt;Privilege Escalation Wikipedia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Flangvik/SharpCollection&#34;&gt;SharpCollection GitHub by Flangvik&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.metasploit.com/&#34;&gt;Metasploit Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Hackplayers/evil-winrm&#34;&gt;Evil-WinRM GitHub by Hackplayers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WWE7VIpgd5I&amp;amp;list=PLDrNMcTNhhYrBNZ_FdtMq-gLFQeUZFzWV&amp;amp;index=13&#34;&gt;Windows Privilege Escalation Youtube Playlist by Conda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GhostPack/Seatbelt&#34;&gt;Seatbelt GitHub by GhostPack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite&#34;&gt;Sysinternals Suite Microsoft&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Lifailon/PS-Commands</title>
    <updated>2023-12-24T01:39:43Z</updated>
    <id>tag:github.com,2023-12-24:/Lifailon/PS-Commands</id>
    <link href="https://github.com/Lifailon/PS-Commands" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Large database of notes about PowerShell cmdlets in Russian language.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/Lifailon/PS-Commands/raw/rsa/Logo/PowerShell-Commands.png&#34; alt=&#34;Image alt&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#help&#34;&gt;Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#object&#34;&gt;Object&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#datatype&#34;&gt;DataType&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#bit&#34;&gt;Bit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#credential&#34;&gt;Credential&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#winevent&#34;&gt;WinEvent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#firewall&#34;&gt;Firewall&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#defender&#34;&gt;Defender&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#windowsupdate&#34;&gt;WindowsUpdate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#dism&#34;&gt;DISM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#scheduled&#34;&gt;Scheduled&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#network&#34;&gt;Network&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#shutdown&#34;&gt;Shutdown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#localaccounts&#34;&gt;LocalAccounts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#smb&#34;&gt;SMB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#activedirectory&#34;&gt;ActiveDirectory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#repadmin&#34;&gt;repadmin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#dcdiag&#34;&gt;dcdiag&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#ntdsutil&#34;&gt;ntdsutil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#gpo&#34;&gt;GPO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#servermanager&#34;&gt;ServerManager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#dnsserver&#34;&gt;DNS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#dhcpserver&#34;&gt;DHCP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#dfs&#34;&gt;DFS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#storagereplica&#34;&gt;StorageReplica&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#package-manager&#34;&gt;Package-Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#ps2exe&#34;&gt;PS2EXE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#nssm&#34;&gt;NSSM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#jobs&#34;&gt;Jobs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#smtp&#34;&gt;SMTP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#hyper-v&#34;&gt;Hyper-V&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#vmwarepowercli&#34;&gt;VMWare/PowerCLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#exchangeemshell&#34;&gt;Exchange/EMShell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#truenas&#34;&gt;TrueNAS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#veeam&#34;&gt;Veeam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#rest-api&#34;&gt;REST API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#telegram&#34;&gt;Telegram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#pode&#34;&gt;Pode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#selenium&#34;&gt;Selenium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#ie&#34;&gt;IE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#com&#34;&gt;COM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#dotnet&#34;&gt;dotNET&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#console-api&#34;&gt;Console API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#drawing&#34;&gt;Drawing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#objectevent&#34;&gt;ObjectEvent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#sockets&#34;&gt;Sockets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#excel&#34;&gt;Excel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#csv&#34;&gt;CSV&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#xml&#34;&gt;XML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#yaml&#34;&gt;YAML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#html&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#sqlite&#34;&gt;SQLite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#mssql&#34;&gt;MSSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#influxdb&#34;&gt;InfluxDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#telegraf&#34;&gt;Telegraf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#cdata&#34;&gt;CData&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#odbc&#34;&gt;ODBC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#postgresql&#34;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#wmi&#34;&gt;WMI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#regedit&#34;&gt;Regedit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#snmp&#34;&gt;SNMP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#zabbix&#34;&gt;Zabbix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#pki&#34;&gt;pki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#openssl&#34;&gt;OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#openvpn&#34;&gt;OpenVPN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#route&#34;&gt;Route&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#nat&#34;&gt;NAT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#wireguard&#34;&gt;WireGuard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#vpnclient&#34;&gt;VpnClient&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#proxy&#34;&gt;Proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#openssh&#34;&gt;OpenSSH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#winrm&#34;&gt;WinRM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#dsc&#34;&gt;DSC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#git&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lifailon/PS-Commands/rsa/#ansible&#34;&gt;Ansible&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Help&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Verb&lt;/code&gt; действия/глаголы, утвержденные для использования в командлетах &lt;br&gt; &lt;code&gt;Get-Command *Language*&lt;/code&gt; поиск команды по имени &lt;br&gt; &lt;code&gt;(Get-Command Get-Language).Module&lt;/code&gt; узнать к какому модулю принадлежит команда &lt;br&gt; &lt;code&gt;Get-Command Get-Content | fl Module,DLL&lt;/code&gt; узнать принадлежность команды к модулю и dll &lt;br&gt; &lt;code&gt;Get-Command -Module LanguagePackManagement&lt;/code&gt; отобразить список команд указанного модуля &lt;br&gt; &lt;code&gt;(Get-Module LanguagePackManagement).ExportedCommands.Values&lt;/code&gt; отобразить список команд указанного модуля &lt;br&gt; &lt;code&gt;Get-Language | Get-Member&lt;/code&gt; отобразить список методов команды (действия), объекты вывода и Event (события объектов: Click) &lt;br&gt; &lt;code&gt;(Get-Help Get-Service).Aliases&lt;/code&gt; узнать псевдонимом команды &lt;br&gt; &lt;code&gt;Get-Alias gsv&lt;/code&gt; узнать имя команды по псевдониму &lt;br&gt; &lt;code&gt;Get-Help Get-Service&lt;/code&gt; синтаксис &lt;br&gt; &lt;code&gt;Get-Help Get-Service -Parameter *&lt;/code&gt; описание всех параметров &lt;br&gt; &lt;code&gt;Get-Help Get-Service -Online&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Help Get-Service -ShowWindow&lt;/code&gt; описание параметров в GUI с фильтрацией &lt;br&gt; &lt;code&gt;Show-Command&lt;/code&gt; вывести список команд в GUI &lt;br&gt; &lt;code&gt;Show-Command Get-Service&lt;/code&gt; список параметров команды в GUI &lt;br&gt; &lt;code&gt;Invoke-Expression&lt;/code&gt; iex принимает текст для выполнения в консоли как команды &lt;br&gt; &lt;code&gt;$PSVersionTable&lt;/code&gt; версия PowerShell &lt;br&gt; &lt;code&gt;Set-ExecutionPolicy Unrestricted&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-ExecutionPolicy&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Metadata = New-Object System.Management.Automation.CommandMetaData (Get-Command Get-Service)&lt;/code&gt; получить информацию о командлете &lt;br&gt; &lt;code&gt;[System.Management.Automation.ProxyCommand]::Create($Metadata)&lt;/code&gt; исходный код функции&lt;/p&gt; &#xA;&lt;h1&gt;Object&lt;/h1&gt; &#xA;&lt;h3&gt;Variable&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$var = Read-Host &#34;Enter&#34;&lt;/code&gt; ручной ввод &lt;br&gt; &lt;code&gt;$pass = Read-Host &#34;Enter Password&#34; -AsSecureString&lt;/code&gt; скрывать набор &lt;br&gt; &lt;code&gt;$global:path = &#34;\\path&#34;&lt;/code&gt; задать глобальную переменную, например в функции &lt;br&gt; &lt;code&gt;$using:srv&lt;/code&gt; использовать переменную текущей сесси в Invoke-сессии &lt;br&gt; &lt;code&gt;Get-Variable&lt;/code&gt; отобразить все переменные &lt;br&gt; &lt;code&gt;ls variable:/&lt;/code&gt; отобразить все переменные &lt;br&gt; &lt;code&gt;Get-Variable *srv*&lt;/code&gt; найти переменную по имени &lt;br&gt; &lt;code&gt;Get-Variable -Scope Global&lt;/code&gt; отобразить все глобальные переменные &lt;br&gt; &lt;code&gt;Get-Variable Error&lt;/code&gt; последняя команда с ошибкой &lt;br&gt; &lt;code&gt;Remove-Variable -Name *&lt;/code&gt; очистить все переменные &lt;br&gt; &lt;code&gt;$LASTEXITCODE&lt;/code&gt; содержит код вывода последней запущенной программы, например ping. Если код возврата положительный (True), то $LastExitCode = 0&lt;/p&gt; &#xA;&lt;h3&gt;ENV&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ChildItem Env:&lt;/code&gt; отобразить все переменные окружения &lt;br&gt; &lt;code&gt;$env:PSModulePath&lt;/code&gt; директории импорта модулей &lt;br&gt; &lt;code&gt;$env:userprofile&lt;/code&gt; &lt;br&gt; &lt;code&gt;$env:computername&lt;/code&gt; &lt;br&gt; &lt;code&gt;$env:username&lt;/code&gt; &lt;br&gt; &lt;code&gt;$env:userdnsdomain&lt;/code&gt; &lt;br&gt; &lt;code&gt;$env:logonserver&lt;/code&gt; &lt;br&gt; &lt;code&gt;([DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).Name&lt;/code&gt; &lt;br&gt; &lt;code&gt;[Environment]::GetFolderPath(&#39;ApplicationData&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;History&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-History&lt;/code&gt; история команд текущей сессии &lt;br&gt; &lt;code&gt;(Get-History)[-1].Duration.TotalSeconds&lt;/code&gt; время выполнения последней команды &lt;br&gt; &lt;code&gt;(Get-PSReadLineOption).HistorySavePath&lt;/code&gt; путь к сохраненному файлу с 4096 последних команд (из модуля PSReadLine) &lt;br&gt; &lt;code&gt;Get-Content (Get-PSReadlineOption).HistorySavePath | Select-String Get&lt;/code&gt; поиск по содержимому файла (GREP) &lt;br&gt; &lt;code&gt;Set-PSReadlineOption -MaximumHistoryCount 10000&lt;/code&gt; изменить количество сохраняемых команд в файл &lt;br&gt; &lt;code&gt;Get-PSReadLineOption | select MaximumHistoryCount&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-PSReadlineOption -HistorySaveStyle SaveNothing&lt;/code&gt; отключить ведение журнала &lt;br&gt; &lt;code&gt;F2&lt;/code&gt; переключиться с InlineView на ListView&lt;/p&gt; &#xA;&lt;h3&gt;Clipboard&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Set-Clipboard $srv&lt;/code&gt; скопировать в буфер обмена &lt;br&gt; &lt;code&gt;Get-Clipboard&lt;/code&gt; вставить&lt;/p&gt; &#xA;&lt;h3&gt;Write&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Write-Host -ForegroundColor Black -BackgroundColor Green &#34;Test&#34; -NoNewline&lt;/code&gt; &lt;br&gt; &lt;code&gt;Write-Error Test&lt;/code&gt; &lt;br&gt; &lt;code&gt;Foreach ($n in 1..100) {Write-Progress -Activity &#34;Test Progress&#34; -PercentComplete $n}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Array&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$srv = @(&#34;server-01&#34;, &#34;server-02&#34;)&lt;/code&gt; создать массив &lt;br&gt; &lt;code&gt;$srv += @(&#34;server-03&#34;)&lt;/code&gt; добавить в массив новый элемент &lt;br&gt; &lt;code&gt;$srv.Count&lt;/code&gt; отобразить кол-во элементов в массиве &lt;br&gt; &lt;code&gt;Out-String&lt;/code&gt; построчный вывод&lt;/p&gt; &#xA;&lt;h3&gt;Index&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$srv[0]&lt;/code&gt; вывести первое значение элемента массива &lt;br&gt; &lt;code&gt;$srv[0] = Name&lt;/code&gt; замена элемента в массиве &lt;br&gt; &lt;code&gt;$srv[0].Length&lt;/code&gt; узнать кол-во символов первого значения в массиве &lt;br&gt; &lt;code&gt;$srv[10..100]&lt;/code&gt; срез&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$array = &#34;a&#34;,&#34;b&#34;,&#34;c&#34;,&#34;d&#34;&#xA;$num = 0&#xA;foreach ($a in $array) {&#xA;$num += 1&#xA;$index = [array]::IndexOf($array, $a) # узнать номер индекса по зачению&#xA;$array[$index] = $num # пересобрать исходный массив&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HashTable&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$hashtable = @{&#34;User&#34; = &#34;$env:username&#34;; &#34;Server&#34; = &#34;$env:computername&#34;} # создать&#xA;$hashtable += @{&#34;User2&#34; = &#34;$env:username&#34;; &#34;Server2&#34; = &#34;$env:computername&#34;} # добавить ключи&#xA;$hashtable.Keys # список всех ключей&#xA;$hashtable[&#34;User&#34;] # получить значение (Values) по ключу&#xA;$hashtable[&#34;User&#34;] = &#34;Test&#34; # изменить&#xA;$hashtable.Remove(&#34;User&#34;) # удалить ключ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$Tag = @{$true = &#39;dev&#39;; $false = &#39;prod&#39;}[([System.Net.Dns]::GetHostEntry(&#34;localhost&#34;).HostName) -match &#39;.*.TestDomain$&#39;]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Collections/List&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$Collections = New-Object System.Collections.Generic.List[System.Object]&#xA;$Collections.Add([PSCustomObject]@{User = $env:username; Server = $env:computername})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PSCustomObject&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$CustomObject = [PSCustomObject][ordered]@{User = $env:username; Server = $env:computername}&#xA;$CustomObject | Add-Member –MemberType NoteProperty –Name Arr –Value @(1,2,3) # добавить Property (свойство/стобец)&#xA;$CustomObject.Arr = @(1,3,5) # изменить содержимое&#xA;$CustomObject.PsObject.Properties.Remove(&#39;User&#39;) # удалить Property&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add-Member&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$ScriptBlock = {Get-Service}&#xA;$CustomObject | Add-Member -Name &#34;TestMethod&#34; -MemberType ScriptMethod -Value $ScriptBlock # Добавить Method&#xA;$CustomObject | Get-Member&#xA;$CustomObject.TestMethod()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Class&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Class CustomClass {&#xA;[string]$User&#xA;[string]$Server&#xA;Start([bool]$Param1) {&#xA;If ($Param1) {Write-Host &#34;Start Function&#34;}}&#xA;}&#xA;&#xA;$Class = New-Object -TypeName CustomClass&#xA;$Class.User = $env:username&#xA;$Class.Server = $env:computername&#xA;$Class.Start(1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pipeline&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$obj | Add-Member -MemberType NoteProperty -Name &#34;Type&#34; -Value &#34;user&#34; -Force&lt;/code&gt; добавление объкта вывода NoteProperty &lt;br&gt; &lt;code&gt;$obj | Add-Member -MemberType NoteProperty -Name &#34;User&#34; -Value &#34;admin&#34; -Force&lt;/code&gt; изменеие содержимого для сущности объекта User &lt;br&gt; &lt;code&gt;ping $srv | Out-Null&lt;/code&gt; перенаправить результат вывода в Out-Null&lt;/p&gt; &#xA;&lt;h3&gt;Select-Object&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Process | Select-Object -Property *&lt;/code&gt; отобразить все доступные объекты вывода &lt;br&gt; &lt;code&gt;Get-Process | select -Unique &#34;Name&#34;&lt;/code&gt; удалить повторяющиеся значения в массиве &lt;br&gt; &lt;code&gt;Get-Process | select -ExpandProperty ProcessName&lt;/code&gt; преобразовать из объекта-коллекции в массив (вывести содержимое без наименовая столбца) &lt;br&gt; &lt;code&gt;(Get-Process | ? Name -match iperf).Modules&lt;/code&gt; список используемых модулей процессом&lt;/p&gt; &#xA;&lt;h3&gt;Expression&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;ps | Sort-Object -Descending CPU | select -first 10 ProcessName, # сортировка по CPU, вывести первых 10 значений (-first)&#xA;@{Name=&#34;ProcessorTime&#34;; Expression={$_.TotalProcessorTime -replace &#34;\.\d+$&#34;}}, # затрачено процессорного времени в минутах&#xA;@{Name=&#34;Memory&#34;; Expression={[string]([int]($_.WS / 1024kb))+&#34;MB&#34;}}, # делим байты на КБ&#xA;@{Label=&#34;RunTime&#34;; Expression={((Get-Date) - $_.StartTime) -replace &#34;\.\d+$&#34;}} # вычесть из текущего времени - время запуска, и удалить milisec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Select-String&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ipconfig /all | Select-String dns&lt;/code&gt; поиск текста&lt;/p&gt; &#xA;&lt;h3&gt;Format-Table/Format-List&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Process | ft ProcessName, StartTime -Autosize&lt;/code&gt; автоматическая группировка размера столбцов&lt;/p&gt; &#xA;&lt;h3&gt;Measure-Object&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Process | Measure | select Count&lt;/code&gt; кол-во объектов &lt;br&gt; &lt;code&gt;Get-Process | Measure -Line -Word -Character&lt;/code&gt; кол-во строк, слов и Char объектов &lt;br&gt; &lt;code&gt;Get-Process | Measure-Object PM -sum | Select-Object Count,@{Name=&#34;MEM_MB&#34;; Expression={[int]($_.Sum/1mb)}}&lt;/code&gt; кол-во процессов и общий объем занятой памяти в МБайт&lt;/p&gt; &#xA;&lt;h3&gt;Compare-Object&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Compare-Object -ReferenceObject (Get-Content -Path .\file1.txt) -DifferenceObject (Get-Content -Path .\file2.txt)&lt;/code&gt; сравнение двух файлов &lt;br&gt; &lt;code&gt;$group1 = Get-ADGroupMember -Identity &#34;Domain Admins&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$group2 = Get-ADGroupMember -Identity &#34;Enterprise Admins&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Compare-Object -ReferenceObject $group1 -DifferenceObject $group2 -IncludeEqual&lt;/code&gt; &lt;code&gt;==&lt;/code&gt; нет изменений &lt;br&gt; &lt;code&gt;&amp;lt;=&lt;/code&gt; есть изменения в $group1 &lt;br&gt; &lt;code&gt;=&amp;gt;&lt;/code&gt; есть изменения в $group2&lt;/p&gt; &#xA;&lt;h3&gt;Where-Object (?)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Process | Where-Object {$_.ProcessName -match &#34;zabbix&#34;}&lt;/code&gt; фильтрация/поиск процессов по имени свойства объекта &lt;br&gt; &lt;code&gt;Get-Process | where CPU -gt 10 | Sort-Object -Descending CPU&lt;/code&gt; вывести объекты, где значения CPU больше 10 &lt;br&gt; &lt;code&gt;Get-Process | where WS -gt 200MB&lt;/code&gt; отобразить процессы где WS выше 200МБ &lt;br&gt; &lt;code&gt;Get-Service | where Name -match &#34;zabbix&#34;&lt;/code&gt; поиск службы &lt;br&gt; &lt;code&gt;Get-Service -ComputerName $srv | Where {$_.Name -match &#34;WinRM&#34;} | Restart-Service&lt;/code&gt; перезапустить службу на удаленном компьютере &lt;br&gt; &lt;code&gt;(Get-Service).DisplayName&lt;/code&gt; вывести значения свойства массива &lt;br&gt; &lt;code&gt;netstat -an | where {$_ -match 443}&lt;/code&gt; &lt;br&gt; &lt;code&gt;netstat -an | ?{$_ -match 443}&lt;/code&gt; &lt;br&gt; &lt;code&gt;(netstat -an) -match 443&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sort-Object&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Process | Sort-Object -Descending CPU | ft&lt;/code&gt; обратная (-Descending) сортировка по CPU &lt;br&gt; &lt;code&gt;$path[-1..-10]&lt;/code&gt; обратная сборка массива без сортировки&lt;/p&gt; &#xA;&lt;h3&gt;Last/First&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Process | Sort-Object -Descending CPU | select -First 10&lt;/code&gt; вывести первых 10 объектов &lt;br&gt; &lt;code&gt;Get-Process | Sort-Object -Descending CPU | select -Last 10&lt;/code&gt; вывести последних 10 объектов&lt;/p&gt; &#xA;&lt;h3&gt;oh-my-posh&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;winget install JanDeDobbeleer.OhMyPosh -s winget&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-PoshThemes&lt;/code&gt; &lt;br&gt; &lt;code&gt;oh-my-posh init pwsh --config &#34;$env:POSH_THEMES_PATH/di4am0nd.omp.json&#34; | Invoke-Expression&lt;/code&gt; blue-owl,montys,jblab_2021,easy-term,cinnamon,jtracey93,cert &lt;br&gt; &lt;code&gt;New-Item -Path $PROFILE -Type File -Force&lt;/code&gt; &lt;br&gt; &lt;code&gt;notepad $PROFILE&lt;/code&gt; &lt;br&gt; &lt;code&gt;oh-my-posh init pwsh --config &#34;$env:POSH_THEMES_PATH/di4am0nd.omp.json&#34; | Invoke-Expression&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NPP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;pwsh -NoExit -ExecutionPolicy Unrestricted -WindowStyle Maximized -File &#34;$(FULL_CURRENT_PATH)&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;%AppData%\Notepad++` themes/shortcuts.xml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&amp;gt;&#xA;&amp;lt;NotepadPlus&amp;gt;&#xA;    &amp;lt;InternalCommands /&amp;gt;&#xA;    &amp;lt;Macros&amp;gt;&#xA;        &amp;lt;Macro name=&#34;`+\+&amp;amp;gt;&#34; Ctrl=&#34;yes&#34; Alt=&#34;no&#34; Shift=&#34;no&#34; Key=&#34;190&#34;&amp;gt;&#xA;            &amp;lt;Action type=&#34;0&#34; message=&#34;2453&#34; wParam=&#34;0&#34; lParam=&#34;0&#34; sParam=&#34;&#34; /&amp;gt;&#xA;            &amp;lt;Action type=&#34;1&#34; message=&#34;2170&#34; wParam=&#34;0&#34; lParam=&#34;0&#34; sParam=&#34;`&#34; /&amp;gt;&#xA;            &amp;lt;Action type=&#34;0&#34; message=&#34;2451&#34; wParam=&#34;0&#34; lParam=&#34;0&#34; sParam=&#34;&#34; /&amp;gt;&#xA;            &amp;lt;Action type=&#34;0&#34; message=&#34;2451&#34; wParam=&#34;0&#34; lParam=&#34;0&#34; sParam=&#34;&#34; /&amp;gt;&#xA;            &amp;lt;Action type=&#34;1&#34; message=&#34;2170&#34; wParam=&#34;0&#34; lParam=&#34;0&#34; sParam=&#34; &#34; /&amp;gt;&#xA;            &amp;lt;Action type=&#34;1&#34; message=&#34;2170&#34; wParam=&#34;0&#34; lParam=&#34;0&#34; sParam=&#34;\&#34; /&amp;gt;&#xA;            &amp;lt;Action type=&#34;0&#34; message=&#34;2300&#34; wParam=&#34;0&#34; lParam=&#34;0&#34; sParam=&#34;&#34; /&amp;gt;&#xA;        &amp;lt;/Macro&amp;gt;&#xA;    &amp;lt;/Macros&amp;gt;&#xA;    &amp;lt;UserDefinedCommands&amp;gt;&#xA;        &amp;lt;Command name=&#34;PowerShell7&#34; Ctrl=&#34;no&#34; Alt=&#34;yes&#34; Shift=&#34;no&#34; Key=&#34;116&#34;&amp;gt;pwsh -NoExit -ExecutionPolicy Unrestricted -WindowStyle Maximized -File &amp;amp;quot;$(FULL_CURRENT_PATH)&amp;amp;quot;&amp;lt;/Command&amp;gt;&#xA;    &amp;lt;/UserDefinedCommands&amp;gt;&#xA;    &amp;lt;PluginCommands /&amp;gt;&#xA;    &amp;lt;ScintillaKeys /&amp;gt;&#xA;&amp;lt;/NotepadPlus&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Parsing text to Markdown:&lt;/code&gt; &lt;br&gt; &lt;code&gt;Macros: FnLeft+&#39;+FnRight+FnRight+\s\\+Down&lt;/code&gt; &lt;br&gt; &lt;code&gt;Replace: &#34;# &#34;,&#34;&#39;&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#x9;&#x9;# Обозначает любой символ&#xA;\&#x9;&#x9;# Экранирующий символ. Символы которые экранируются: ^, [, ., $, {, *, (, ), \, +, |, ?, &amp;lt;, &amp;gt;&#xA;^&#x9;&#x9;# Начало строки&#xA;$&#x9;&#x9;# Конец строки&#xA;\n&#x9;&#x9;# Новая строка&#xA;\d&#x9;&#x9;# Любая цифра&#xA;\D&#x9;&#x9;# Не цифра&#xA;\w&#x9;&#x9;# Любая буква латиницы, цифра, или знак подчёркивания&#xA;\W&#x9;&#x9;# Не латиница, не цифра, не подчёркивание&#xA;\s&#x9;&#x9;# Пробел, табуляция, перенос строки&#xA;\S&#x9;&#x9;# Не пробел&#xA;\b&#x9;&#x9;# Граница слова. Применяется когда нужно выделить, что искомые символы являются словом, а не частью другого слова&#xA;\B&#x9;&#x9;# Не граница слова&#xA;\&amp;lt;&#x9;&#x9;# Начало слова&#xA;\&amp;gt;&#x9;&#x9;# Конец слова&#xA;\A&#x9;&#x9;# Начало текста&#xA;\Z&#x9;&#x9;# Конец текста&#xA;*&#x9;&#x9;# Повторитель. Означает что предшествующий символ может работать 0 и более раз&#xA;+&#x9;&#x9;# Количество предшествующего не менее 1-го.&#xA;?&#x9;&#x9;# Ограничитель. Не более одного раза&#xA;|&#x9;&#x9;# Или. Соединяет несколько вариантов&#xA;()&#x9;&#x9;# В круглые скобки заключаются все комбинации с &#34;или&#34; и поиск начала и конца строк&#xA;[ ]&#x9; &#x9;# В квадратных скобках задаются символы к поиску, например [a-яА-Я], или [0-9]&#xA;[^ ]&#x9;# Исключает из поиска символы указанные в квадратных скобках&#xA;{ }&#x9;&#x9;# В фигурных скобках указывается точное количество вхождений&#xA;\d{2}&#x9;# Найти две цифры&#xA;\d{2,4}&#x9;# Найти две или четыре&#xA;{4,}&#x9;# Найти четыре и более&#xA;&#xA;^\s{1,}#.+` поиск вначале строки комментария и пробел после него 1 или больше и любое кол-во символов&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Regex&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;-replace &#34;1&#34;,&#34;2&#34;&lt;/code&gt; замена элементов в индексах массива (везде где присутствует 1, заменить на 2), для удаления используется только первое значение &lt;br&gt; &lt;code&gt;-split &#34; &#34;&lt;/code&gt; преобразовать строку в массив, разделителем указан пробел, которой удаляется ($url.Split(&#34;/&#34;)[-1]) &lt;br&gt; &lt;code&gt;-join &#34; &#34;&lt;/code&gt; преобразовать массив (коллекцию) в единую строку (string), добавить разделителем пробел \&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-like *txt*&lt;/code&gt; поиск по маскам wildcard, выводит значение на экран &lt;br&gt; &lt;code&gt;-match txt&lt;/code&gt; поиска по шаблонам, проверка на соответствие содержимого текста &lt;br&gt; &lt;code&gt;-match &#34;zabbix|rpc&#34;&lt;/code&gt; условия, для поиска по нескольким словам &lt;br&gt; &lt;code&gt;-NotMatch&lt;/code&gt; проверка на отсутствие вхождения \&lt;/p&gt; &#xA;&lt;h3&gt;Matches&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$ip = &#34;192.168.10.1&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ip -match &#34;(\.\d{1,3})\.\d{1,2}&#34;&lt;/code&gt; True &lt;br&gt; &lt;code&gt;$Matches&lt;/code&gt; отобразить все подходящие переменные последнего поиска, которые входят и не входят в группы ()&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$String = &#34;09/14/2017 12:00:27 - mtbill_post_201709141058.txt 7577_Delivered: OK&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$String -Match &#34;.*(?=\.txt)&#34; | Out-Null&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Matches[0][-4..-1] -Join &#34;&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$string.Substring($string.IndexOf(&#34;.txt&#34;)-4, 4)&lt;/code&gt; 2-й вариант (IndexOf)`&lt;/p&gt; &#xA;&lt;h3&gt;Форматирование (.NET method format)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;[string]::Format(&#34;{1} {0}&#34;,&#34;Index0&#34;,&#34;Index1&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;&#34;{1} {0}&#34; -f &#34;Index0&#34;,&#34;Index1&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;&#34;{0:###-##-##}&#34; -f 1234567&lt;/code&gt; записать число в другом формате (#) &lt;br&gt; &lt;code&gt;&#34;{0:0000}&#34; -f 123&lt;/code&gt; вывести число в формате не меньше 4 знаков (0123) &lt;br&gt; &lt;code&gt;&#34;{0:P0}&#34; -f (220/1000)&lt;/code&gt; посчитать в процентах (P) &lt;br&gt; &lt;code&gt;&#34;{0:P}&#34; -f (512MB/1GB)&lt;/code&gt; сколько % составляет 512Мб от 1Гб &lt;br&gt; &lt;code&gt;&#34;{0:0.0%}&#34; -f 0.123&lt;/code&gt; умножить на 100%&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$gp = Get-Process | sort cpu -Descending | select -First 10&#xA;foreach ($p in $gp) {&#xA;&#34;{0} - {1:N2}&#34; -f $p.processname, $p.cpu # округлить&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Условный оператор&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$rh = Read-Host&lt;/code&gt; &lt;br&gt; &lt;code&gt;if ($rh -eq 1) {ipconfig} elseif ($rh -eq 2) {getmac} else {hostname}&lt;/code&gt; &lt;br&gt; Если условие if () является истенным ($True), выполнить действие в {} &lt;br&gt; Если условие if () является ложным ($False), выполнить действие не обязательного оператора else &lt;br&gt; Условие Elseif идёт после условия if для проверки дополнительных условий перед выполнение оператора else. Оператор, который первый вернет $True, отменит выполнение следующих дополнительных условий &lt;br&gt; Если передать переменную в условие без оператора, то будет проверяться наличие значения у переменной на $True/$False &lt;br&gt; &lt;code&gt;if ((tnc $srv -Port 80).TcpTestSucceeded) {&#34;Opened port&#34;} else {&#34;Closed port&#34;}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Операторы&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;-eq&lt;/code&gt; равно (equal) &lt;br&gt; &lt;code&gt;-ceq&lt;/code&gt; учитывать регистр &lt;br&gt; &lt;code&gt;-ne&lt;/code&gt; не равно (not equal) &lt;br&gt; &lt;code&gt;-gt&lt;/code&gt; больше (greater) &lt;br&gt; &lt;code&gt;-ge&lt;/code&gt; больше или равно &lt;br&gt; &lt;code&gt;-lt&lt;/code&gt; меньше (less) &lt;br&gt; &lt;code&gt;-le&lt;/code&gt; меньше или равно &lt;br&gt; &lt;code&gt;-in&lt;/code&gt; проверить на наличие (5 -in @(1,2,3,4,5)) &lt;br&gt; &lt;code&gt;-NOT&lt;/code&gt; логическое НЕТ !(Test-Path $path) &lt;br&gt; &lt;code&gt;-and&lt;/code&gt; логическое И &lt;br&gt; &lt;code&gt;-or&lt;/code&gt; логическое ИЛИ &lt;br&gt; &lt;code&gt;if ((($1 -eq 1) -and ($2 -eq 2)) -or ($1 -ne 3)) {&#34;$true&#34;} else {&#34;$false&#34;}&lt;/code&gt; два условия: (если $1 = 1 и $2 = 2) или $1 не равно 3&lt;/p&gt; &#xA;&lt;h3&gt;Pipeline Operators&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Write-Output &#34;First&#34; &amp;amp;&amp;amp; Write-Output &#34;Second&#34;&lt;/code&gt; две успешные команды выполняются &lt;br&gt; &lt;code&gt;Write-Error &#34;Bad&#34; &amp;amp;&amp;amp; Write-Output &#34;Second&#34;&lt;/code&gt; первая команда завершается ошибкой, из-за чего вторая команда не выполняется &lt;br&gt; &lt;code&gt;Write-Error &#34;Bad&#34; || Write-Output &#34;Second&#34;&lt;/code&gt; первая команда завершается ошибкой, поэтому выполняется вторая команда &lt;br&gt; &lt;code&gt;Write-Output &#34;First&#34; || Write-Output &#34;Second&#34;&lt;/code&gt; первая команда выполнена успешно, поэтому вторая команда не выполняется&lt;/p&gt; &#xA;&lt;h3&gt;Invocation Operator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$addr = &#34;8.8.8.8&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ping = &#34;ping&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;&amp;amp; $ping $addr&lt;/code&gt; запускает текст как команду&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;amp; $ping $addr &amp;amp;&lt;/code&gt; запустить команду в фоне &lt;br&gt; &lt;code&gt;(Get-Job)[-1] | Receive-Job -Keep&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Специальные символы&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;\d&lt;/code&gt; число от 0 до 9 (20-07-2022 эквивалент: &#34;\d\d-\d\d-\d\d\d\d&#34;) &lt;br&gt; &lt;code&gt;\D&lt;/code&gt; обозначает любой символ, кроме цифры. Удаления всех символов, кроме цифр: [int]$(&#34;123 test&#34; -replace &#34;\D&#34;) &lt;br&gt; &lt;code&gt;\w&lt;/code&gt; буква от &#34;a&#34; до &#34;z&#34; и от &#34;A&#34; до &#34;Z&#34; или число от 0 до 9 &lt;br&gt; &lt;code&gt;\s&lt;/code&gt; пробел, эквивалент: &#34; &#34; &lt;br&gt; &lt;code&gt;\n&lt;/code&gt; новая строка &lt;br&gt; &lt;code&gt;\b&lt;/code&gt; маска, определяет начало и конец целого словосочетания для поиска &lt;br&gt; &lt;code&gt;.&lt;/code&gt; обозначает любой символ, кроме новой строки &lt;br&gt; &lt;code&gt;\&lt;/code&gt; экранирует любой специальны символ (метасимвол). Используется, если нужно указать конкретный символ, вместо специального ({ } [ ] / \ + * . $ ^ | ?) &lt;br&gt; &lt;code&gt;+&lt;/code&gt; повторяется 1 и более раз (\s+) &lt;br&gt; &lt;code&gt;{1,25}&lt;/code&gt; квантификатор, указывает количество повторений символа слева на право (от 1 до 25 раз) &lt;br&gt; &lt;code&gt;[]&lt;/code&gt; поиск совпадения любой буквы, например, [A-z0-9] от A до z и цифры от 0 до 9 (&#34;192.168.1.1&#34; -match &#34;192.1[6-7][0-9]&#34;)&lt;/p&gt; &#xA;&lt;h3&gt;Якори&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;^&lt;/code&gt; или &lt;code&gt;\A&lt;/code&gt; определяет начало строки. $url -replace &#39;^&#39;,&#39;https:&#39;&lt;code&gt;добавить в начало; \&lt;/code&gt;$&lt;code&gt;или&lt;/code&gt;\Z&lt;code&gt;обозначают конец строки. $ip -replace &#34;\d{1,3}$&#34;,&#34;0&#34; \&lt;/code&gt;(?=text)&lt;code&gt;поиск слова слева. Пишем слева на право от искомого (ищет только целые словосочетания) &#34;Server:\s(.{1,30})\s(?=$username)&#34; \&lt;/code&gt;(?&amp;lt;=text)&lt;code&gt; поиск слова справа. $in_time -replace &#34;.+(?&amp;lt;=Last)&#34;&lt;/code&gt; удалить все до слова Last &lt;br&gt; &lt;code&gt;(?!text)&lt;/code&gt; не совпадает со словом слева &lt;br&gt; &lt;code&gt;(?&amp;lt;!text)&lt;/code&gt; не совпадает со словом справа&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$test = &#34;string&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$test -replace &#34;.{1}$&#34;&lt;/code&gt; удалить любое кол-во символов в конце строки &lt;br&gt; &lt;code&gt;$test -replace &#34;^.{1}&#34;&lt;/code&gt; удалить любое кол-во символов в начале строки \&lt;/p&gt; &#xA;&lt;h3&gt;Группы захвата&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$date = &#39;12.31.2021&#39;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$date -replace &#39;^(\d{2}).(\d{2})&#39;,&#39;$2.$1&#39;&lt;/code&gt; поменять местами &lt;br&gt; &lt;code&gt;$1&lt;/code&gt; содержимое первой группы в скобках &lt;br&gt; &lt;code&gt;$2&lt;/code&gt; содержимое второй группы&lt;/p&gt; &#xA;&lt;h1&gt;DataType&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;$srv.GetType()&lt;/code&gt; узнать тип данных &lt;br&gt; &lt;code&gt;$srv -is [string]&lt;/code&gt; проверка на соответствие типа данных &lt;br&gt; &lt;code&gt;$srv -isnot [System.Object]&lt;/code&gt; проверка на несоответствие &lt;br&gt; &lt;code&gt;[Object]&lt;/code&gt; массив (BaseType:System.Array) &lt;br&gt; &lt;code&gt;[DateTime]&lt;/code&gt; формат времени (BaseType:System.ValueType) &lt;br&gt; &lt;code&gt;[Bool]/[Boolean]&lt;/code&gt; логическое значение ($True/$False) или 1/0 (1 бит) наличие/отсуствие напряжения &lt;br&gt; &lt;code&gt;[Byte]&lt;/code&gt; 8-битное (1 байт) целое число без знака (0..255) &lt;br&gt; &lt;code&gt;[Int16]&lt;/code&gt; 16-битное знаковое целое число от -32767 до 32767 (тип данных WORD 0..65535) &lt;br&gt; &lt;code&gt;[Int]&lt;/code&gt; 32-битное (4 байта) знаковое целое число от –2147483648 до 2147483647 (DWORD) &lt;br&gt; &lt;code&gt;[Int64]&lt;/code&gt; 64-битное от -9223372036854775808 до 9223372036854775808 (LWORD) &lt;br&gt; &lt;code&gt;[Decimal]&lt;/code&gt; 128-битное десятичное значение от –79228162514264337593543950335 до 79228162514264337593543950335 &lt;br&gt; &lt;code&gt;[Single]&lt;/code&gt; число с плавающей запятой (32-разрядное) &lt;br&gt; &lt;code&gt;[Double]&lt;/code&gt; число с плавающей запятой с двойной точностью (64-разрядное) &lt;br&gt; &lt;code&gt;[String]&lt;/code&gt; неизменяемая строка символов Юникода фиксированной длины (BaseType:System.Object)&lt;/p&gt; &#xA;&lt;h3&gt;Math&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;[math] | Get-Member -Static&lt;/code&gt; &lt;br&gt; &lt;code&gt;[math]::Pow(2,4)&lt;/code&gt; 2 в 4 степени &lt;br&gt; &lt;code&gt;[math]::Truncate(1.8)&lt;/code&gt; грубое округление, удаляет дробную часть &lt;br&gt; &lt;code&gt;[math]::Ceiling(1.8)&lt;/code&gt; округляет число в большую сторону до ближайшего целого значения &lt;br&gt; &lt;code&gt;[math]::Floor(-1.8)&lt;/code&gt; округляет число в меньшую сторону &lt;br&gt; &lt;code&gt;[math]::Min(33,22)&lt;/code&gt; возвращает наименьшее значение двух значений &lt;br&gt; &lt;code&gt;[math]::Max(33,22)&lt;/code&gt; возвращает наибольшее значение двух значений&lt;/p&gt; &#xA;&lt;h3&gt;Round&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;[double]::Round(87.5, 0)&lt;/code&gt; 88 (нечетное), в .NET по умолчанию используется округление в средней точке ToEven, где *.5 значения округляются до ближайшего четного целого числа. &lt;br&gt; &lt;code&gt;[double]::Round(88.5, 0)&lt;/code&gt; 88 (четное) &lt;br&gt; &lt;code&gt;[double]::Round(88.5, 0, 1)&lt;/code&gt; 89 (округлять в большую сторону) &lt;br&gt; &lt;code&gt;[double]::Round(1234.56789, 2)&lt;/code&gt; округлить до 2 символов после запятой&lt;/p&gt; &#xA;&lt;h3&gt;ToString&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;(4164539/1MB).ToString(&#34;0.00&#34;)&lt;/code&gt; разделить на дважды на 1024/1024 и округлить до 3,97&lt;/p&gt; &#xA;&lt;h3&gt;Char&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;[Char]&lt;/code&gt; cимвол Юникода (16-разрядный) &lt;br&gt; &lt;code&gt;$char = $srv.ToCharArray()&lt;/code&gt; разбить строку [string] на массив [System.Array] из букв \&lt;/p&gt; &#xA;&lt;h3&gt;Switch&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$MMM = Get-Date -UFormat &#34;%m&#34;&#xA;switch($MMM) {&#xA;&#34;01&#34; {$Month = &#39;Jan&#39;}&#xA;&#34;02&#34; {$Month = &#39;Feb&#39;}&#xA;&#34;03&#34; {$Month = &#39;Mar&#39;}&#xA;&#34;04&#34; {$Month = &#39;Apr&#39;}&#xA;&#34;05&#34; {$Month = &#39;May&#39;}&#xA;&#34;06&#34; {$Month = &#39;Jun&#39;}&#xA;&#34;07&#34; {$Month = &#39;Jul&#39;}&#xA;&#34;08&#34; {$Month = &#39;Aug&#39;}&#xA;&#34;09&#34; {$Month = &#39;Sep&#39;}&#xA;&#34;10&#34; {$Month = &#39;Oct&#39;}&#xA;&#34;11&#34; {$Month = &#39;Nov&#39;}&#xA;&#34;12&#34; {$Month = &#39;Dec&#39;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;function switch&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Function fun-switch (&#xA;[switch]$param&#xA;) {&#xA;If ($param) {&#34;yes&#34;} else {&#34;no&#34;}&#xA;}&#xA;fun-switch -param&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Bit&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Двоичное    Десятичное&#xA;1           1&#xA;10          2&#xA;11          3&#xA;100         4&#xA;101         5&#xA;110         6&#xA;111         7&#xA;1000        8&#xA;1001        9&#xA;1010        10&#xA;1011        11&#xA;1100        12&#xA;1101        13&#xA;1110        14&#xA;1111        15&#xA;1 0000      16&#xA;&#xA;Двоичное    Десятичное  Номер разряда&#xA;1           1           0&#xA;10          2           1&#xA;100         4           2&#xA;1000        8           3&#xA;1 0000      16          4&#xA;10 0000     32          5&#xA;100 0000    64          6&#xA;1000 0000   128         7&#xA;1 0000 0000 256         8&#xA;&#xA;Из двоичного =&amp;gt; десятичное (1-й вариант по таблице)&#xA;1001 0011 = 1000 0000 + 1 0000 + 10 + 1 = 128 + 16 + 2 + 1 = 147&#xA;&#xA;2-й вариант&#xA;7654 3210 (разряды двоичного выражения) = (1*2^7)+(0*2^6)+(0*2^5)+(1*2^4)+(0*2^3)+(0*2^2)+(1*2^1)+(1*2^0) = 147&#xA;[math]::Pow(2,7) + [math]::Pow(2,4) + [math]::Pow(2,1) + [math]::Pow(2,0) = 147` исключить 0 и сложить степень&#xA;&#xA;Из десятичного =&amp;gt; двоичное (1-й вариант по таблице)&#xA;347 вычесть ближайшие 256 = 91 (+ 1 0000 0000 забрать двоичный остаток)&#xA;91  - 64  = 27 ближайшее 16 (+ 100 0000)&#xA;27  - 16  = 11 ближайшее 8 (+ 1 0000)&#xA;11  - 8   = 3  ближайшее 2 (+ 1000)&#xA;3   - 2   = 1 (+ 10)&#xA;1   - 1   = 0 (+ 1)&#xA;1 0101 1011&#xA;&#xA;2-й вариант&#xA;Последовательное деления числа на 2, предворительно забирая остаток для получения четного числа в меньшую сторону&#xA;347 - 346 = остаток 1, (347-1)/2 = 173&#xA;173 - 172 = остаток 1, (172-1)/2 = 86&#xA;86  - 86  = остаток 0, 86/2 = 43&#xA;43  - 42  = остаток 1, (43-1)/2 = 21&#xA;21  - 20  = остаток 1, (21-1)/2 = 10&#xA;10  - 10  = остаток 0, 10/2 = 5&#xA;5   - 4   = остаток 1, (5-1)/2 = 2&#xA;2   - 2   = остаток 0, 2/2 = 1&#xA;1   - 2   = остаток 1, (1-1)/2 = 0&#xA;Результат деления записывается снизу вверх&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bit Convertor&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function ConvertTo-Bit {&#xA;    param (&#xA;        [Int]$int&#xA;    )&#xA;    [array]$bits = @()&#xA;    $test = $true&#xA;    while ($test -eq $true) {&#xA;        if (($int/2).GetType() -match [double]) {&#xA;            $int = ($int-1)/2&#xA;            [array]$bits += 1&#xA;        }&#xA;        elseif (($int/2).GetType() -match [int]) {&#xA;            $int = $int/2&#xA;            [array]$bits += 0&#xA;        }&#xA;        if ($int -eq 0) {&#xA;            $test = $false&#xA;        }&#xA;    }&#xA;    $bits =  $bits[-1..-999]&#xA;    ([string]($bits)) -replace &#34;\s&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ConvertTo-Bit 347&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function ConvertFrom-Bit {&#xA;    param (&#xA;        $bit&#xA;    )&#xA;    [int]$int = 0&#xA;    $bits = $bit.ToString().ToCharArray()&#xA;    $index = ($bits.Count)-1&#xA;    foreach ($b in $bits) {&#xA;        if ($b -notlike 0) {&#xA;            $int += [math]::Pow(2,$index)&#xA;        }&#xA;    $index -= 1&#xA;    }&#xA;    $int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ConvertFrom-Bit 10010011&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Process pwsh | fl ProcessorAffinity&lt;/code&gt; привязка процесса к ядрам, представляет из себя битовую маску (bitmask), где каждому биту соответствует ядро процессора. Если для ядра отмечено сходство (affinity), то бит выставляется в 1, если нет — то в 0. Например, если выбраны все 16 ядер, то это 1111 1111 1111 1111 или 65535. &lt;br&gt; &lt;code&gt;(Get-Process pwsh).ProcessorAffinity = 15&lt;/code&gt; 0000000000001111 присвоить 4 первых ядра &lt;br&gt; &lt;code&gt;(Get-Process pwsh).ProcessorAffinity = 61440&lt;/code&gt; 1111000000000000 присвоить 4 последних ядра &lt;br&gt; &lt;code&gt;(Get-Process pwsh).ProcessorAffinity = (ConvertFrom-Bit 1111000000000000)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Property&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$srv.Count&lt;/code&gt; кол-во элементов в массиве &lt;br&gt; &lt;code&gt;$srv.Length&lt;/code&gt; содержит количество символом строки переменной [string] или количество значений (строк) объекта &lt;br&gt; &lt;code&gt;$srv.Chars(2)&lt;/code&gt; отобразить 3-й символ в строке &lt;br&gt; &lt;code&gt;$srv[2]&lt;/code&gt; отобразить 3-ю строку в массиве&lt;/p&gt; &#xA;&lt;h3&gt;Method&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$srv.Insert(0,&#34;https://&#34;)&lt;/code&gt; добавить значение перед первым символом &lt;br&gt; &lt;code&gt;$srv.Substring(4)&lt;/code&gt; удалить (из всего массива) первые 4 символа &lt;br&gt; &lt;code&gt;$srv.Remove(3)&lt;/code&gt; удалить из всего массива все после 3 символа &lt;br&gt; &lt;code&gt;$string = &#34;123&#34;&lt;/code&gt; создать строку &lt;br&gt; &lt;code&gt;$int = [convert]::ToInt32($string)&lt;/code&gt; преобразовать строку в тип данных число &lt;br&gt; &lt;code&gt;[string]::Concat($text,$num)&lt;/code&gt; объеденить переменные в одну строку &lt;br&gt; &lt;code&gt;[string]::Join(&#34;:&#34;,$text,$num)&lt;/code&gt; объеденить используя разделитель &lt;br&gt; &lt;code&gt;[string]::Compare($text,$num,$true)&lt;/code&gt; выдает 0 при совпадении или 1/-1 при несовпадении, $true (без учета регистра) или $false (с учетом регистра) &lt;br&gt; &lt;code&gt;[string]::Equals($text,$num)&lt;/code&gt; производит сравнение двух строк и выдает $true при их совпадении или $false при несовпадении &lt;br&gt; &lt;code&gt;[string]::IsNullOrEmpty($text)&lt;/code&gt; проверяет наличие строки, если строка пуста $true, если нет $false &lt;br&gt; &lt;code&gt;[string]::IsNullOrWhiteSpace($text2)&lt;/code&gt; проверяет на наличие только символов пробел, табуляция или символ новой строки&lt;/p&gt; &#xA;&lt;h3&gt;DateTime&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-TimeZone&lt;/code&gt; часовой пояс &lt;br&gt; &lt;code&gt;[DateTime]::UtcNow&lt;/code&gt; время в формате UTC 0 &lt;br&gt; &lt;code&gt;(Get-Date).AddHours(-3)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Date = (Get-Date -Format &#34;dd/MM/yyyy hh:mm:ss&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Date = Get-Date -f &#34;dd/MM/yyyy&#34;&lt;/code&gt; получаем тип данных [string] &lt;br&gt; &lt;code&gt;[DateTime]$gDate = Get-Date &#34;$Date&#34;&lt;/code&gt; преобразовать в тип [DateTime] &lt;br&gt; &lt;code&gt;[int32]$days=($fDate-$gDate).Days&lt;/code&gt; получить разницу в днях &lt;br&gt; &lt;code&gt;&#34;5/7/07&#34; -as [DateTime]&lt;/code&gt; преобразовать входные данные в тип данных [DateTime] &lt;br&gt; &lt;code&gt;New-TimeSpan -Start $VBRRP.CreationTimeUTC -End $VBRRP.CompletionTimeUTC&lt;/code&gt; получить разницу во времени&lt;/p&gt; &#xA;&lt;h3&gt;Measure-Command&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;(Measure-Command {ping ya.ru}).TotalSeconds&lt;/code&gt; узнать только время выполнения &lt;br&gt; &lt;code&gt;(Get-History)[-1] | select @{Name=&#34;RunTime&#34;; Expression={$_.EndExecutionTime - $_.StartExecutionTime}},ExecutionStatus,CommandLine&lt;/code&gt; посчитать время работы последней [-1] (select -Last 1) выполненной команды и узнать ее статус&lt;/p&gt; &#xA;&lt;h3&gt;Timer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$start_time = Get-Date&lt;/code&gt; зафиксировать время до выполнения команды &lt;br&gt; &lt;code&gt;$end_time = Get-Date&lt;/code&gt; зафиксировать время по завершению &lt;br&gt; &lt;code&gt;$time = $end_time - $start_time&lt;/code&gt; высчитать время работы скрипта &lt;br&gt; &lt;code&gt;$min = $time.minutes&lt;/code&gt; &lt;br&gt; &lt;code&gt;$sec = $time.seconds&lt;/code&gt; &lt;br&gt; &lt;code&gt;Write-Host &#34;$min минут $sec секунд&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$timer = [System.Diagnostics.Stopwatch]::StartNew()&lt;/code&gt; запустить таймер &lt;br&gt; &lt;code&gt;$timer.IsRunning&lt;/code&gt; статус работы таймера &lt;br&gt; &lt;code&gt;$timer.Elapsed.TotalSeconds&lt;/code&gt; отобразить время с момента запуска (в секундах) &lt;br&gt; &lt;code&gt;$timer.Stop()&lt;/code&gt; остановить таймер&lt;/p&gt; &#xA;&lt;h3&gt;Foreach&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$list = 100..110&lt;/code&gt; создать массив из цифр от 100 до 110 &lt;br&gt; &lt;code&gt;foreach ($srv in $list) {ping 192.168.3.$srv -n 1 -w 50}&lt;/code&gt; $srv хранит текущий элемент из $list и повторяет команду до последнего элемента в массиве &lt;br&gt; &lt;code&gt;$foreach.Current&lt;/code&gt; текущий элемент в цикле &lt;br&gt; &lt;code&gt;$foreach.Reset()&lt;/code&gt; обнуляет итерацию, перебор начнется заново, что приводит к бесконечному циклу &lt;br&gt; &lt;code&gt;$foreach.MoveNext()&lt;/code&gt; переход к следующему элементу в цикле&lt;/p&gt; &#xA;&lt;h3&gt;ForEach-Object (%)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;100..110 | %{ping -n 1 -w 50 192.168.3.$_ &amp;gt; $null&lt;/code&gt; &lt;br&gt; &lt;code&gt;if ($LastExitCode -eq 0) {Write-Host &#34;192.168.3.$_&#34; -ForegroundColor green&lt;/code&gt; &lt;br&gt; &lt;code&gt;} else {&lt;/code&gt; &lt;br&gt; &lt;code&gt;Write-Host &#34;192.168.3.$_&#34;-ForegroundColor Red}}&lt;/code&gt; &lt;br&gt; &lt;code&gt;%&lt;/code&gt; передать цикл через конвеер (ForEach-Object) &lt;br&gt; &lt;code&gt;$_&lt;/code&gt; переменная цикла и конвеера ($PSItem) &lt;br&gt; &lt;code&gt;gwmi Win32_QuickFixEngineering | where {$_.InstalledOn.ToString() -match &#34;2022&#34;} | %{($_.HotFixID.Substring(2))}&lt;/code&gt; gwmi создает массив, вывод команды передается where для поиска подходящих под критерии объектов. По конвееру передается в цикл для удаления первых (2) символов методом Substring из всех объектов HotFixID.&lt;/p&gt; &#xA;&lt;h3&gt;While&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$srv = &#34;yandex.ru&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$out2 = &#34;Есть пинг&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$out3 = &#34;Нет пинга&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$out = $false`` предварительно сбросить переменную, While проверяет условие до запуска цикла \ &lt;/code&gt;While ($out -eq $false){`` пока условие является $true, цикл будет повторяться &lt;br&gt; &lt;code&gt;$out = ping -n 1 -w 50 $srv&lt;/code&gt; &lt;br&gt; `if ($out -match &#34;ttl&#34;) {$out = $true; $out2} else {$out = $false; $out3; sleep 1}` &lt;br&gt; `}`&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;while ($True){`` запустить бесконечный цикл \ &lt;/code&gt;$result = ping yandex.ru -n 1 -w 50&lt;code&gt;\&lt;/code&gt;if ($result -match &#34;TTL&#34;){&lt;code&gt; условие, при котором будет выполнен break \ `Write-Host &#34;Сайт доступен&#34;` \ `break&lt;/code&gt; остановит цикл &lt;br&gt; &lt;code&gt;} else {Write-Host &#34;Сайт недоступен&#34;; sleep 1}&lt;/code&gt; &lt;br&gt; &lt;code&gt;}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Try-Catch-Finally&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Try {$out = pping 192.168.3.1}&#xA;Catch {Write-Warning &#34;$($error[0])&#34;} # выводит в случае ошибки (вместо ошибки)&#xA;finally {$out = &#34;End&#34;} # выполняется в конце в любом случае&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$Error&lt;/code&gt; выводит все ошибки текущего сеанса &lt;br&gt; &lt;code&gt;$Error[0].InvocationInfo&lt;/code&gt; развернутый отчет об ошибке &lt;br&gt; &lt;code&gt;$Error.clear()&lt;/code&gt; &lt;br&gt; &lt;code&gt;$LASTEXITCODE&lt;/code&gt; результат выполнения последней команды (0 - успех) &lt;br&gt; &lt;code&gt;exit 1&lt;/code&gt; код завершения, который возвращается $LASTEXITCODE&lt;/p&gt; &#xA;&lt;h1&gt;Files&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;$file = [System.IO.File]::Create(&#34;$home\desktop\test.txt&#34;)&lt;/code&gt; создать файл &lt;br&gt; &lt;code&gt;$file.Close()&lt;/code&gt; закрыть файл &lt;br&gt; &lt;code&gt;[System.IO.File]::ReadAllLines(&#34;$home\desktop\test.txt&#34;)&lt;/code&gt; прочитать файл &lt;br&gt; &lt;code&gt;$file = New-Object System.IO.StreamReader(&#34;$home\desktop\test.txt&#34;)&lt;/code&gt; файл будет занят процессом PowerShell &lt;br&gt; &lt;code&gt;$file | gm&lt;/code&gt; &lt;br&gt; &lt;code&gt;$file.ReadLine()&lt;/code&gt; построчный вывод &lt;br&gt; &lt;code&gt;$file.ReadToEnd()&lt;/code&gt; прочитать файл целиком&lt;/p&gt; &#xA;&lt;h3&gt;Read/Write Bytes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$file = [io.file]::ReadAllBytes(&#34;$home\desktop\powershell.jpg&#34;)&lt;/code&gt; метод открывает двоичный файл, считывает его в массив байт и закрывает файл &lt;br&gt; &lt;code&gt;[io.file]::WriteAllBytes(&#34;$home\desktop\tloztotk-2.jpg&#34;,$file)&lt;/code&gt; сохранить байты в файл (можно использовать для выгрузки двоичных файлов из БД)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Content $home/desktop\test.txt -Wait&lt;/code&gt; аналог tail &lt;br&gt; &lt;code&gt;Test-Path $path&lt;/code&gt; проверить доступность пути &lt;br&gt; &lt;code&gt;Get-ChildItem $path -Filter *.txt -Recurse&lt;/code&gt; отобразить содержимое каталога (Alias: ls/gci/dir) и дочерних каталогов (-Recurse) и отфильтровать вывод &lt;br&gt; &lt;code&gt;Get-Location&lt;/code&gt; отобразить текущие месторасположение (Alias: pwd/gl) &lt;br&gt; &lt;code&gt;Set-Location $path&lt;/code&gt; перемещение по каталогам (Alias: cd/sl) &lt;br&gt; &lt;code&gt;Invoke-Item $path&lt;/code&gt; открыть файл (Alias: ii/start) &lt;br&gt; &lt;code&gt;Get-ItemProperty $env:userprofile\Documents\dns-list.txt | select FullName,Directory,Name,BaseName,Extension&lt;/code&gt; свойтсва файла &lt;br&gt; &lt;code&gt;Get-ItemProperty -Path $path\* | select FullName,CreationTime,LastWriteTime&lt;/code&gt; свойства файлов содержимого директории, дата их создания и последнего изменения &lt;br&gt; &lt;code&gt;New-Item -Path &#34;C:\test\&#34; -ItemType &#34;Directory&#34;&lt;/code&gt; создать директорию (Alias: mkdir/md) &lt;br&gt; &lt;code&gt;New-Item -Path &#34;C:\test\file.txt&#34; -ItemType &#34;File&#34; -Value &#34;Добавить текст в файл&#34;&lt;/code&gt; создать файл &lt;br&gt; &lt;code&gt;&#34;test&#34; &amp;gt; &#34;C:\test\file.txt&#34;&lt;/code&gt; заменить содержимое &lt;br&gt; &lt;code&gt;&#34;test&#34; &amp;gt;&amp;gt; &#34;C:\test\file.txt&#34;&lt;/code&gt; добавить строку в файл &lt;br&gt; &lt;code&gt;New-Item -Path &#34;C:\test\test\file.txt&#34; -Force&lt;/code&gt; ключ используется для создания отсутствующих в пути директорий или перезаписи файла если он уже существует &lt;br&gt; &lt;code&gt;Move-Item&lt;/code&gt; перемещение объектов (Alias: mv/move) &lt;br&gt; &lt;code&gt;Remove-Item &#34;$path\&#34; -Recurse&lt;/code&gt; удаление всех файлов внутри каталога, без запроса подверждения (Alias: rm/del) &lt;br&gt; &lt;code&gt;Remove-Item $path -Recurse -Include &#34;*.txt&#34;,&#34;*.temp&#34; -Exclude &#34;log.txt&#34;&lt;/code&gt; удалить все файлы с расширением txt и temp ([Array]), кроме log.txt &lt;br&gt; &lt;code&gt;Rename-Item &#34;C:\test\*.*&#34; &#34;*.jpg&#34;&lt;/code&gt; переименовать файлы по маске (Alias: ren) &lt;br&gt; &lt;code&gt;Copy-Item&lt;/code&gt; копирование файлов и каталогов (Alias: cp/copy) &lt;br&gt; &lt;code&gt;Copy-Item -Path &#34;\\server-01\test&#34; -Destination &#34;C:\&#34; -Recurse&lt;/code&gt; копировать директорию с ее содержимым (-Recurse) &lt;br&gt; &lt;code&gt;Copy-Item -Path &#34;C:\*.txt&#34; -Destination &#34;C:\test\&#34;&lt;/code&gt; знак &#39;&#39; в конце Destination используется для переноса папки внутрь указанной, отсутствие, что это новое имя директории &lt;br&gt; &lt;code&gt;Copy-Item -Path &#34;C:\*&#34; -Destination &#34;C:\test\&#34; -Include &#39;*.txt&#39;,&#39;*.jpg&#39;&lt;/code&gt; копировать объекты с указанным расширением (Include) &lt;br&gt; &lt;code&gt;Copy-Item -Path &#34;C:\*&#34; -Destination &#34;C:\test\&#34; -Exclude &#39;*.jpeg&#39;&lt;/code&gt; копировать объекты, за исключением файлов с расширением (Exclude) &lt;br&gt; &lt;code&gt;$log = Copy-Item &#34;C:\*.txt&#34; &#34;C:\test\&#34; -PassThru&lt;/code&gt; вывести результат копирования (логирование) в переменную, можно забирать строки с помощью индексов $log[0].FullName&lt;/p&gt; &#xA;&lt;h3&gt;Clear-env-Temp-14-days&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$ls = Get-Item $env:TEMP\*.tmp # считать все файлы с указанным расширением&#xA;$date = (Get-Date).AddDays(-14)&#xA;foreach ($l in $ls) {&#xA;    if ($l.LastWriteTime -le $date) {&#xA;        $l.FullName&#xA;        Remove-Item $l.FullName -Recurse&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Filehash&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Filehash -Algorithm SHA256 &#34;$env:USERPROFILE\Documents\RSA.conf.txt&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Microsoft.PowerShell.Archive&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Compress-Archive -Path $sourcepath -DestinationPath $dstpath -CompressionLevel Optimal&lt;/code&gt; архивировать &lt;br&gt; &lt;code&gt;Expand-Archive .\powerlinefonts.zip&lt;/code&gt; разархивировать&lt;/p&gt; &#xA;&lt;h1&gt;Credential&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;$Cred = Get-Credential&lt;/code&gt; сохраняет креды в переменные $Cred.Username и $Cred.Password &lt;br&gt; &lt;code&gt;$Cred.GetNetworkCredential().password&lt;/code&gt; извлечь пароль &lt;br&gt; &lt;code&gt;cmdkey /generic:&#34;TERMSRV/$srv&#34; /user:&#34;$username&#34; /pass:&#34;$password&#34;&lt;/code&gt; добавить указанные креды аудентификации на на терминальный сервер для подключения без пароля &lt;br&gt; &lt;code&gt;mstsc /admin /v:$srv&lt;/code&gt; авторизоваться &lt;br&gt; &lt;code&gt;cmdkey /delete:&#34;TERMSRV/$srv&#34;&lt;/code&gt; удалить добавленные креды аудентификации из системы &lt;br&gt; &lt;code&gt;rundll32.exe keymgr.dll,KRShowKeyMgr&lt;/code&gt; хранилище Stored User Names and Password &lt;br&gt; &lt;code&gt;Get-Service VaultSvc&lt;/code&gt; служба для работы Credential Manager &lt;br&gt; &lt;code&gt;Install-Module CredentialManager&lt;/code&gt; установить модуль управления Credential Manager к хранилищу PasswordVault из PowerShell &lt;br&gt; &lt;code&gt;[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]&#39;Tls11,Tls12&#39;&lt;/code&gt; для устаноки модуля &lt;br&gt; &lt;code&gt;Get-StoredCredential&lt;/code&gt; получить учетные данные из хранилища Windows Vault &lt;br&gt; &lt;code&gt;Get-StrongPassword&lt;/code&gt; генератор пароля &lt;br&gt; &lt;code&gt;New-StoredCredential -UserName test -Password &#34;123456&#34;&lt;/code&gt; добавить учетную запись &lt;br&gt; &lt;code&gt;Remove-StoredCredential&lt;/code&gt; удалить учетную запись &lt;br&gt; &lt;code&gt;$Cred = Get-StoredCredential | where {$_.username -match &#34;admin&#34;}&lt;/code&gt; &lt;br&gt; &lt;code&gt;$pass = $cred.password&lt;/code&gt; &lt;br&gt; &lt;code&gt;$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($pass)&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Out-Gridview&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Service -cn $srv | Out-GridView -Title &#34;Service $srv&#34; -OutputMode Single –PassThru | Restart-Service&lt;/code&gt; перезапустить выбранную службу&lt;/p&gt; &#xA;&lt;h3&gt;Out-File&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Read-Host –AsSecureString | ConvertFrom-SecureString | Out-File &#34;$env:userprofile\desktop\password.txt&#34;&lt;/code&gt; писать в файл. Преобразовать пароль в формат SecureString с использованием шифрования Windows Data Protection API (DPAPI)&lt;/p&gt; &#xA;&lt;h3&gt;Get-Content (gc/cat/type)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$password = gc &#34;$env:userprofile\desktop\password.txt&#34; | ConvertTo-SecureString&lt;/code&gt; читать хэш пароля из файла с помощью ключей, хранящихся в профиле текущего пользователя, который невозможно прочитать на другом копьютере&lt;/p&gt; &#xA;&lt;h3&gt;AES Key&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$AESKey = New-Object Byte[] 32&lt;/code&gt; &lt;br&gt; &lt;code&gt;[Security.Cryptography.RNGCryptoServiceProvider]::Create().GetBytes($AESKey)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$AESKey | Out-File &#34;C:\password.key&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Cred.Password | ConvertFrom-SecureString -Key (Get-Content &#34;C:\password.key&#34;) | Set-Content &#34;C:\password.txt&#34;&lt;/code&gt; сохранить пароль в файл используя внешний ключ &lt;br&gt; &lt;code&gt;$pass = Get-Content &#34;C:\password.txt&#34; | ConvertTo-SecureString -Key (Get-Content &#34;\\Server\Share\password.key&#34;)&lt;/code&gt; расшифровать пароль на втором компьютере&lt;/p&gt; &#xA;&lt;h1&gt;WinEvent&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-WinEvent -ListLog *&lt;/code&gt; отобразить все доступные журналы логов &lt;br&gt; &lt;code&gt;Get-WinEvent -ListLog * | where RecordCount -ne 0 | where RecordCount -ne $null | sort -Descending RecordCount&lt;/code&gt; отобразить не пустые журналы с сортировкой по кол-ву записей &lt;br&gt; &lt;code&gt;Get-WinEvent -ListProvider * | ft&lt;/code&gt; отобразить всех провайдеров приложений &lt;br&gt; &lt;code&gt;Get-WinEvent -ListProvider GroupPolicy&lt;/code&gt; найти в какой журнал LogLinks {Application} пишутся логи приложения &lt;br&gt; &lt;code&gt;Get-WinEvent -ListProvider *smb*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-WinEvent -ListLog * | where logname -match SMB | sort -Descending RecordCount&lt;/code&gt; найти все журналы по имени &lt;br&gt; &lt;code&gt;Get-WinEvent -LogName &#34;Microsoft-Windows-SmbClient/Connectivity&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-WinEvent -ListProvider *firewall*&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Filter XPath/Hashtable&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-WinEvent -FilterHashtable @{LogName=&#34;Security&#34;;ID=4624}&lt;/code&gt; найти логи по ID в журнале Security &lt;br&gt; &lt;code&gt;Get-WinEvent -FilterHashtable @{LogName=&#34;System&#34;;Level=2}&lt;/code&gt; найти все записи ошибки (1 - критический, 3 - предупреждение, 4 - сведения) &lt;br&gt; &lt;code&gt;Get-WinEvent -FilterHashtable @{LogName=&#34;System&#34;;Level=2;ProviderName=&#34;Service Control Manager&#34;}&lt;/code&gt; отфильтровать по имени провайдера&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;([xml](Get-WinEvent -FilterHashtable @{LogName=&#34;Security&#34;;ID=4688} -MaxEvents 1).ToXml()).Event.EventData.Data&lt;/code&gt; отобразить все свойства, хранимые в EventData (Message) &lt;br&gt; &lt;code&gt;Get-WinEvent -FilterHashtable @{logname=&#34;security&#34;;ID=4688} -MaxEvents 1 | select timecreated,{$_.Properties[5].value}&lt;/code&gt; отфильтровать время события и имя запущенного процесса&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$query = &#39;&#xA;&amp;lt;QueryList&amp;gt;&#xA;    &amp;lt;Query Id=&#34;0&#34; Path=&#34;Security&#34;&amp;gt;&#xA;        &amp;lt;Select Path=&#34;Security&#34;&amp;gt;&#xA;&#x9;&#x9;    *[System[EventID=4688]] and &#xA;            *[EventData[Data[@Name=&#34;NewProcessName&#34;]=&#34;C:\Windows\System32\autochk.exe&#34; or Data[@Name=&#34;NewProcessName&#34;]=&#34;C:\Windows\System32\services.exe&#34;]]&#xA;        &amp;lt;/Select&amp;gt;&#xA;    &amp;lt;/Query&amp;gt;&#xA;&amp;lt;/QueryList&amp;gt;&#xA;&#39;&#xA;&#xA;Get-WinEvent -LogName Security -FilterXPath $query&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reboot&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$query = &#39;&#xA;&amp;lt;QueryList&amp;gt;&#xA;    &amp;lt;Query Id=&#34;0&#34; Path=&#34;System&#34;&amp;gt;&#xA;        &amp;lt;Select Path=&#34;System&#34;&amp;gt;&#xA;&#x9;&#x9;    *[&#xA;&#x9;&#x9;&#x9;System[&#xA;&#x9;&#x9;&#x9;EventID=41 or&#xA;&#x9;&#x9;&#x9;EventID=1074 or&#xA;&#x9;&#x9;&#x9;EventID=1076 or&#xA;&#x9;&#x9;&#x9;EventID=6005 or&#xA;&#x9;&#x9;&#x9;EventID=6006 or&#xA;&#x9;&#x9;&#x9;EventID=6008 or&#xA;&#x9;&#x9;&#x9;EventID=6009 or&#xA;&#x9;&#x9;&#x9;EventID=6013&#xA;&#x9;&#x9;&#x9;]&#xA;&#x9;&#x9;&#x9;]&#xA;        &amp;lt;/Select&amp;gt;&#xA;    &amp;lt;/Query&amp;gt;&#xA;&amp;lt;/QueryList&amp;gt;&#xA;&#39;&#xA;Get-WinEvent -LogName System -FilterXPath $query&#xA;&#xA;41  ` Система была перезагружена без корректного завершения работы.&#xA;1074` Система была корректного выключена пользователем или процессом.&#xA;1076` Следует за Event ID 6008 и означает, что первый пользователь (с правом выключения системы) подключившийся к серверу после неожиданной перезагрузки или выключения, указал причину этого события.&#xA;6005` Запуск &#34;Журнала событий Windows&#34; (Event Log). Указывает на включение системы.&#xA;6006` Остановка «Журнала событий Windows». Указывает на выключение системы.&#xA;6008` Предыдущее выключение системы было неожиданным.&#xA;6009` Версия операционной системы, зафиксированная при загрузке системы.&#xA;6013` Время работы системы (system uptime) в секундах.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logon&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$srv = &#34;localhost&#34;&#xA;$FilterXPath = &#39;&amp;lt;QueryList&amp;gt;&amp;lt;Query Id=&#34;0&#34;&amp;gt;&amp;lt;Select&amp;gt;*[System[EventID=21]]&amp;lt;/Select&amp;gt;&amp;lt;/Query&amp;gt;&amp;lt;/QueryList&amp;gt;&#39;&#xA;$RDPAuths = Get-WinEvent -ComputerName $srv -LogName &#34;Microsoft-Windows-TerminalServices-LocalSessionManager/Operational&#34; -FilterXPath $FilterXPath&#xA;[xml[]]$xml = $RDPAuths | Foreach {$_.ToXml()}&#xA;$EventData = Foreach ($event in $xml.Event) {&#xA;New-Object PSObject -Property @{&#xA;&#34;Connection Time&#34; = (Get-Date ($event.System.TimeCreated.SystemTime) -Format &#39;yyyy-MM-dd hh:mm K&#39;)&#xA;&#34;User Name&#34; = $event.UserData.EventXML.User&#xA;&#34;User ID&#34; = $event.UserData.EventXML.SessionID&#xA;&#34;User Address&#34; = $event.UserData.EventXML.Address&#xA;&#34;Event ID&#34; = $event.System.EventID&#xA;}}&#xA;$EventData | ft&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;EventLog&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-EventLog -List&lt;/code&gt; отобразить все корневые журналы логов и их размер &lt;br&gt; &lt;code&gt;Clear-EventLog Application&lt;/code&gt; очистить логи указанного журнала &lt;br&gt; &lt;code&gt;Get-EventLog -LogName Security -InstanceId 4624&lt;/code&gt; найти логи по ID в журнале Security&lt;/p&gt; &#xA;&lt;h1&gt;Firewall&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$days = 5&#xA;$obj = @()&#xA;$fw = Get-WinEvent &#34;Microsoft-Windows-Windows Firewall With Advanced Security/Firewall&#34;&#xA;foreach ($temp_fw in $fw) {&#xA;if ($temp_fw.id -eq 2097) { # 2004&#xA;    $type = &#34;Added Rule&#34;&#xA;}&#xA;elseif ($temp_fw.id -eq 2006) {&#xA;    $type = &#34;Deleted Rule&#34;&#xA;}&#xA;$port = $temp_fw.Properties[7] | select -ExpandProperty value&#xA;$name = $temp_fw.Properties[1] | select -ExpandProperty value&#xA;$obj += [PSCustomObject]@{&#xA;    Time = $temp_fw.TimeCreated;&#xA;    Type = $type;&#xA;    Port = $port;&#xA;    Name = $name}&#xA;}&#xA;$obj | Where-Object time -gt (Get-Date).AddDays(-$days)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;New-NetFirewallRule -Profile Any -DisplayName &#34;Open Port 135 RPC&#34; -Direction Inbound -Protocol TCP -LocalPort 135&lt;/code&gt; открыть in-порт &lt;br&gt; &lt;code&gt;Get-NetFirewallRule | where DisplayName -match kms | select *&lt;/code&gt; найти правило по имени &lt;br&gt; &lt;code&gt;Get-NetFirewallPortFilter | where LocalPort -like 80&lt;/code&gt; найти действующие правило по номеру порта&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Get-NetFirewallRule -Enabled True -Direction Inbound | select -Property DisplayName,&#xA;@{Name=&#39;Protocol&#39;;Expression={($_ | Get-NetFirewallPortFilter).Protocol}},&#xA;@{Name=&#39;LocalPort&#39;;Expression={($_ | Get-NetFirewallPortFilter).LocalPort}},&#xA;@{Name=&#39;RemotePort&#39;;Expression={($_ | Get-NetFirewallPortFilter).RemotePort}},&#xA;@{Name=&#39;RemoteAddress&#39;;Expression={($_ | Get-NetFirewallAddressFilter).RemoteAddress}},&#xA;Enabled,Profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Firewall-Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Module Firewall-Manager&lt;/code&gt; &lt;br&gt; &lt;code&gt;Export-FirewallRules -Name * -CSVFile $home\documents\fw.csv&lt;/code&gt; -Inbound -Outbound -Enabled -Disabled -Allow -Block (фильтр правил для экспорта) &lt;br&gt; &lt;code&gt;Import-FirewallRules -CSVFile $home\documents\fw.csv&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Defender&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Import-Module Defender&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Command -Module Defender&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-MpComputerStatus&lt;/code&gt; &lt;br&gt; &lt;code&gt;(Get-MpComputerStatus).AntivirusEnabled&lt;/code&gt; статус работы антивируса&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$session = NewCimSession -ComputerName hostname&lt;/code&gt; подключиться к удаленному компьютеру, используется WinRM &lt;br&gt; &lt;code&gt;Get-MpComputerStatus -CimSession $session | fl fullscan*&lt;/code&gt; узнать дату последнего сканирования на удаленном компьютере&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MpPreference&lt;/code&gt; настройки &lt;br&gt; &lt;code&gt;(Get-MpPreference).ScanPurgeItemsAfterDelay&lt;/code&gt; время хранения записей журнала защитника в днях &lt;br&gt; &lt;code&gt;Set-MpPreference -ScanPurgeItemsAfterDelay 30&lt;/code&gt; изменить время хранения &lt;br&gt; &lt;code&gt;ls &#34;C:\ProgramData\Microsoft\Windows Defender\Scans\History&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-MpPreference | select disable*&lt;/code&gt; отобразить статус всех видов проверок/сканирований &lt;br&gt; &lt;code&gt;Set-MpPreference -DisableRealtimeMonitoring $true&lt;/code&gt; отключить защиту Defender в реальном времени (использовать только ручное сканирование) &lt;br&gt; &lt;code&gt;Set-MpPreference -DisableRemovableDriveScanning $false&lt;/code&gt; включить сканирование USB накопителей &lt;br&gt; &lt;code&gt;Get-MpPreference | select excl*&lt;/code&gt; отобразить список всех исключений &lt;br&gt; &lt;code&gt;(Get-MpPreference).ExclusionPath&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-MpPreference -ExclusionPath C:\install&lt;/code&gt; добавить директорию в исключение &lt;br&gt; &lt;code&gt;Remove-MpPreference -ExclusionPath C:\install&lt;/code&gt; удалить из исключения &lt;br&gt; &lt;code&gt;New-ItemProperty -Path &#34;HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender&#34; -Name DisableAntiSpyware -Value 1 -PropertyType DWORD -Force&lt;/code&gt; полностью отключить Windows Defender&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Set-MpPreference -SignatureDefinitionUpdateFileSharesSources \\FileShare1\Updates&lt;/code&gt; для обновления из сетевой папки нужно предварительно скачать файлы с сигнатурами баз с сайта &lt;a href=&#34;https://www.microsoft.com/security/portal/definitions/adl.aspx&#34;&gt;https://www.microsoft.com/security/portal/definitions/adl.aspx&lt;/a&gt; и поместить в сетевой каталог &lt;code&gt;Update-MpSignature -UpdateSource FileShares&lt;/code&gt; изменить источник обновлений (MicrosoftUpdateServer – сервера обновлений MS в интернете, InternalDefinitionUpdateServer — внутренний WSUS сервер) &lt;br&gt; &lt;code&gt;Update-MpSignature&lt;/code&gt; обновить сигнатуры&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Start-MpScan -ScanType QuickScan&lt;/code&gt; быстрая проверка или FullScan &lt;br&gt; &lt;code&gt;Start-MpScan -ScanType FullScan -AsJob&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-MpPreference -RemediationScheduleDay 1-7&lt;/code&gt; выбрать дни, начиная с воскресенья или 0 каждый день, 8 - сбросить &lt;br&gt; &lt;code&gt;Set-MpPreference -ScanScheduleQuickScanTime 14:00:00&lt;/code&gt; &lt;br&gt; &lt;code&gt;Start-MpScan -ScanType CustomScan -ScanPath &#34;C:\Program Files&#34;&lt;/code&gt; сканировать выбранную директорию&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MpThreat&lt;/code&gt; история угроз и тип угрозы (ThreatName: HackTool/Trojan) &lt;br&gt; &lt;code&gt;Get-MpThreatCatalog&lt;/code&gt; список известных видов угроз &lt;br&gt; &lt;code&gt;Get-MpThreatDetection&lt;/code&gt; история защиты (активных и прошлые) и ID угрозы &lt;br&gt; &lt;code&gt;Get-MpThreat -ThreatID 2147760253&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ls &#34;C:\ProgramData\Microsoft\Windows Defender\Quarantine\&#34;&lt;/code&gt; директория хранения файлов в карантине &lt;br&gt; &lt;code&gt;cd &#34;C:\Program Files\Windows Defender\&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;.\MpCmdRun.exe -restore -name $ThreatName&lt;/code&gt; восстановить файл из карантина &lt;br&gt; &lt;code&gt;.\MpCmdRun.exe -restore -filepath $path_file&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WindowsUpdate&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Hotfix | Sort-Object -Descending InstalledOn&lt;/code&gt; список установленных обновлений (информация из cimv2) &lt;br&gt; &lt;code&gt;Get-Hotfix -Description &#34;Security update&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-CimInstance Win32_QuickFixEngineering&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Command -Module WindowsUpdate&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-WindowsUpdateLog&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Service uhssvc&lt;/code&gt; служба Microsoft Health Update Tools, которая отвечает за предоставление обновлений&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Module -Name PSWindowsUpdate -Scope CurrentUser&lt;/code&gt; &lt;br&gt; &lt;code&gt;Import-Module PSWindowsUpdate&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Command -Module PSWindowsUpdate&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-WindowsUpdate&lt;/code&gt; список обновлений для скачать и установить с сервера WSUS или Microsoft Update &lt;br&gt; &lt;code&gt;Get-WindowsUpdate -Download&lt;/code&gt; загрузить все обновления &lt;br&gt; &lt;code&gt;Get-WindowsUpdate –Install&lt;/code&gt; установить все обновления &lt;br&gt; &lt;code&gt;Install-WindowsUpdate -MicrosoftUpdate -AcceptAll -IgnoreReboot&lt;/code&gt; установить все обновления без перезагрузки &lt;br&gt; &lt;code&gt;Get-WindowsUpdate -KBArticleID KB2267602, KB4533002 -Install&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-WindowsUpdate -KBArticleID KB2538243 -Hide&lt;/code&gt; скрыть обновления, что бы они никогда не устанавливались &lt;br&gt; &lt;code&gt;Get-WindowsUpdate –IsHidden&lt;/code&gt; отобразить скрытые обновления (Hide-WindowsUpdate) &lt;br&gt; &lt;code&gt;Remove-WindowsUpdate -KBArticleID KB4011634 -NoRestart&lt;/code&gt; удалить обновление &lt;br&gt; &lt;code&gt;Uninstall-WindowsUpdate&lt;/code&gt; удалить обновление &lt;br&gt; &lt;code&gt;Add-WUServiceManager&lt;/code&gt; регистрация сервера обновления (Windows Update Service Manager) &lt;br&gt; &lt;code&gt;Enable-WURemoting&lt;/code&gt; включить правила Windows Defender, разрешающие удаленное использование командлета PSWindowsUpdate &lt;br&gt; &lt;code&gt;Get-WUApiVersion&lt;/code&gt; версия Windows Update Agent &lt;br&gt; &lt;code&gt;Get-WUHistory&lt;/code&gt; список всех установленных обновлений (история обновлений) &lt;br&gt; &lt;code&gt;Get-WUHistory | Where-Object {$_.Title -match &#34;KB4517389&#34;}&lt;/code&gt; поиск обновления &lt;br&gt; &lt;code&gt;Get-WULastResults&lt;/code&gt; даты последнего поиска и установки обновлений &lt;br&gt; &lt;code&gt;Get-WURebootStatus&lt;/code&gt; проверить, нужна ли перезагрузка для применения конкретного обновления &lt;br&gt; &lt;code&gt;Get-WUServiceManager&lt;/code&gt; выводит источники обновлений &lt;br&gt; &lt;code&gt;Get-WUInstallerStatus&lt;/code&gt; статус службы Windows Installer &lt;br&gt; &lt;code&gt;Remove-WUServiceManager&lt;/code&gt; отключить Windows Update Service Manager&lt;/p&gt; &#xA;&lt;h1&gt;DISM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command -Module Dism -Name *Driver*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Export-WindowsDriver -Online -Destination C:\Users\Lifailon\Documents\Drivers\&lt;/code&gt; извлечение драйверов из текущей системы (C:\Windows\System32\DriverStore\FileRepository), выгружает список файлов, которые необходимы для установки драйвера (dll,sys,exe) в соответствии со списком файлов, указанных в секции [CopyFiles] inf-файла драйвера. &lt;br&gt; &lt;code&gt;Export-WindowsDriver -Path C:\win_image -Destination C:\drivers&lt;/code&gt; извлечь драйвера из офлайн образа Windows, смонтированного в каталог c:\win_image &lt;br&gt; &lt;code&gt;$BackupDrivers = Export-WindowsDriver -Online -Destination C:\Drivers&lt;/code&gt; &lt;br&gt; &lt;code&gt;$BackupDrivers | ft Driver,ClassName,ProviderName,Date,Version,ClassDescription&lt;/code&gt; список драйверов в объектном представлении &lt;br&gt; &lt;code&gt;$BackupDrivers | where classname -match printer&lt;/code&gt; &lt;br&gt; &lt;code&gt;pnputil.exe /add-driver C:\drivers\*.inf /subdirs /install&lt;/code&gt; установить все (параметр subdirs) драйвера из указанной папки (включая вложенные)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sfc /scannow&lt;/code&gt; проверить целостность системных файлов с помощью утилиты SFC (System File Checker), в случае поиска ошибок, попробует восстановить их оригинальные копии из хранилища системных компонентов Windows (каталог C:\Windows\WinSxS). Вывод работы логируется в C:\Windows\Logs\CBS с тегом SR &lt;br&gt; &lt;code&gt;Get-ComputerInfo | select *&lt;/code&gt; подробная информация о системе (WindowsVersion,WindowsEditionId,&lt;em&gt;Bios&lt;/em&gt;) &lt;br&gt; &lt;code&gt;Get-WindowsImage -ImagePath E:\sources\install.wim&lt;/code&gt; список доступных версий в образе &lt;br&gt; &lt;code&gt;Repair-WindowsImage -Online –ScanHealth&lt;/code&gt; &lt;br&gt; &lt;code&gt;Repair-WindowsImage -Online -RestoreHealth&lt;/code&gt; восстановление хранилища системных компонентов &lt;br&gt; &lt;code&gt;Repair-WindowsImage -Online -RestoreHealth -Source E:\sources\install.wim:3 –LimitAccess&lt;/code&gt; восстановление в оффлайн режиме из образа по номеру индекса&lt;/p&gt; &#xA;&lt;h1&gt;Scheduled&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;$Trigger = New-ScheduledTaskTrigger -At 01:00am -Daily&lt;/code&gt; 1:00 ночи &lt;br&gt; &lt;code&gt;$Trigger = New-ScheduledTaskTrigger –AtLogon&lt;/code&gt; запуск при входе пользователя в систему &lt;br&gt; &lt;code&gt;$Trigger = New-ScheduledTaskTrigger -AtStartup&lt;/code&gt; при запуске системы &lt;br&gt; &lt;code&gt;$User = &#34;NT AUTHORITY\SYSTEM&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Action = New-ScheduledTaskAction -Execute &#34;PowerShell.exe&#34; -Argument &#34;$home\Documents\DNS-Change-Tray-1.3.ps1&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Action = New-ScheduledTaskAction -Execute &#34;PowerShell.exe&#34; -Argument &#34;-NoProfile -NoLogo -NonInteractive -ExecutionPolicy Unrestricted -WindowStyle Hidden -File $home\Documents\DNS-Change-Tray-1.3.ps1&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Register-ScheduledTask -TaskName &#34;DNS-Change-Tray-Startup&#34; -Trigger $Trigger -User $User -Action $Action -RunLevel Highest –Force&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ScheduledTask | ? state -ne Disabled&lt;/code&gt; список всех активных заданий &lt;br&gt; &lt;code&gt;Start-ScheduledTask DNS-Change-Tray-Startup&lt;/code&gt; запустить задание немедленно &lt;br&gt; &lt;code&gt;Get-ScheduledTask DNS-Change-Tray-Startup | Disable-ScheduledTask&lt;/code&gt; отключить задание &lt;br&gt; &lt;code&gt;Get-ScheduledTask DNS-Change-Tray-Startup | Enable-ScheduledTask&lt;/code&gt; включить задание &lt;br&gt; &lt;code&gt;Unregister-ScheduledTask DNS-Change-Tray-Startup&lt;/code&gt; удалить задание &lt;br&gt; &lt;code&gt;Export-ScheduledTask DNS-Change-Tray-Startup | Out-File $home\Desktop\Task-Export-Startup.xml&lt;/code&gt; экспортировать задание в xml &lt;br&gt; &lt;code&gt;Register-ScheduledTask -Xml (Get-Content $home\Desktop\Task-Export-Startup.xml | Out-String) -TaskName &#34;DNS-Change-Tray-Startup&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Network&lt;/h1&gt; &#xA;&lt;h3&gt;ping&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Test-Connection -Count 1 $srv1, $srv2&lt;/code&gt; отправить icmp-пакет двум хостам &lt;br&gt; &lt;code&gt;Test-Connection $srv -ErrorAction SilentlyContinue&lt;/code&gt; не выводить ошибок, если хост не отвечает &lt;br&gt; &lt;code&gt;Test-Connection -Source $srv1 -ComputerName $srv2&lt;/code&gt; пинг с удаленного компьютера&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Test-PingNetwork {&#xA;param (&#xA;    [Parameter(Mandatory,ValueFromPipeline)][string[]]$Network,&#xA;    [ValidateRange(100,10000)][int]$Timeout = 100&#xA;)&#xA;$ping = New-Object System.Net.NetworkInformation.Ping&#xA;$Network  = $Network -replace &#34;0$&#34;&#xA;$net = @()&#xA;foreach ($r in @(1..254)) {&#xA;    $net += &#34;$network$r&#34;&#xA;}&#xA;foreach ($n in $net) {&#xA;    $ping.Send($n, $timeout) | select @{Name=&#34;Address&#34;; Expression={$n -replace &#34;.+\.&#34;}}, Status&#xA;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Test-PingNetwork -Network 192.168.3.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;Test-PingNetwork -Network 192.168.3.0 -Timeout 1000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-CimInstance -Class Win32_PingStatus -Filter &#34;Address=&#39;127.0.0.1&#39;&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-CimInstance -Class Win32_PingStatus -Filter &#34;Address=&#39;127.0.0.1&#39;&#34; | Format-Table -Property Address,ResponseTime,StatusCode -Autosize&lt;/code&gt; 0 - успех &lt;br&gt; &lt;code&gt;&#39;127.0.0.1&#39;,&#39;8.8.8.8&#39; | ForEach-Object -Process {Get-CimInstance -Class Win32_PingStatus -Filter (&#34;Address=&#39;$_&#39;&#34;) | Select-Object -Property Address,ResponseTime,StatusCode}&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ips = 1..254 | ForEach-Object -Process {&#39;192.168.1.&#39; + $_}&lt;/code&gt; сформировать массив из ip-адресов подсети&lt;/p&gt; &#xA;&lt;h3&gt;dhcp&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-CimInstance -Class Win32_NetworkAdapterConfiguration -Filter &#34;DHCPEnabled=$true&#34;&lt;/code&gt; отобразить адаптеры с включенным DHCP &lt;br&gt; &lt;code&gt;$wql = &#39;SELECT * from Win32_NetworkAdapterConfiguration WHERE IPEnabled=True and DHCPEnabled=False&#39;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Invoke-CimMethod -MethodName ReleaseDHCPLease -Query $wql&lt;/code&gt; включение DHCP на всех адаптерах &lt;br&gt; &lt;code&gt;Invoke-CimMethod -ClassName Win32_NetworkAdapterConfiguration -MethodName ReleaseDHCPLeaseAll&lt;/code&gt; отменить аренду адресов DHCP на всех адаптерах &lt;br&gt; &lt;code&gt;Invoke-CimMethod -ClassName Win32_NetworkAdapterConfiguration -MethodName RenewDHCPLeaseAll&lt;/code&gt; обновить аренду адресов DHCP на всех адаптерах&lt;/p&gt; &#xA;&lt;h3&gt;port&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;tnc $srv -p 5985&lt;/code&gt; &lt;br&gt; &lt;code&gt;tnc $srv -CommonTCPPort WINRM&lt;/code&gt; HTTP,RDP,SMB &lt;br&gt; &lt;code&gt;tnc ya.ru –TraceRoute -Hops 2&lt;/code&gt; TTL=2 &lt;br&gt; &lt;code&gt;tnc ya.ru -DiagnoseRouting&lt;/code&gt; маршрутизация до хоста, куда (DestinationPrefix: 0.0.0.0/0) через (NextHop: 192.168.1.254)&lt;/p&gt; &#xA;&lt;h3&gt;nslookup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nslookup ya.ru 1.1.1.1&lt;/code&gt; с указанием DNS сервера &lt;br&gt; &lt;code&gt;nslookup -type=any ya.ru&lt;/code&gt; указать тип записи &lt;br&gt; &lt;code&gt;Resolve-DnsName ya.ru -Type MX&lt;/code&gt; ALL,ANY,A,NS,SRV,CNAME,PTR,TXT(spf) &lt;br&gt; &lt;code&gt;[System.Net.Dns]::GetHostEntry(&#34;ya.ru&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ipconfig&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-NetIPConfiguration&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-NetIPConfiguration -InterfaceIndex 14 -Detailed&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Adapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-NetAdapter&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-NetIPInterface -InterfaceIndex 14 -Dhcp Disabled&lt;/code&gt; отключить DHCP &lt;br&gt; &lt;code&gt;Get-NetAdapter -InterfaceIndex 14 | New-NetIPAddress –IPAddress 192.168.3.99 -DefaultGateway 192.168.3.1 -PrefixLength 24&lt;/code&gt; задать/добавить статический IP-адрес &lt;br&gt; &lt;code&gt;Set-NetIPAddress -InterfaceIndex 14 -IPAddress 192.168.3.98&lt;/code&gt; изменить IP-адреас на адаптере &lt;br&gt; &lt;code&gt;Remove-NetIPAddress -InterfaceIndex 14 -IPAddress 192.168.3.99&lt;/code&gt; удалить IP-адрес на адаптере &lt;br&gt; &lt;code&gt;Set-NetIPInterface -InterfaceIndex 14 -Dhcp Enabled&lt;/code&gt; включить DHCP&lt;/p&gt; &#xA;&lt;h3&gt;DNSClient&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-DNSClientServerAddress&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-DNSClientServerAddress -InterfaceIndex 14 -ServerAddresses 8.8.8.8&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;DNSCache&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-DnsClientCache&lt;/code&gt; отобразить кэшированные записи клиента DNS &lt;br&gt; &lt;code&gt;Clear-DnsClientCache&lt;/code&gt; очистить кэш&lt;/p&gt; &#xA;&lt;h3&gt;Binding&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-NetAdapterBinding -Name Ethernet -IncludeHidden -AllBindings&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-NetAdapterBinding -Name &#34;Беспроводная сеть&#34; -DisplayName &#34;IP версии 6 (TCP/IPv6)&#34; | Set-NetAdapterBinding -Enabled $false&lt;/code&gt; отключить IPv6 на адаптере&lt;/p&gt; &#xA;&lt;h3&gt;TCPSetting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-NetTCPSetting&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-NetTCPSetting -SettingName DatacenterCustom,Datacenter -CongestionProvider DCTCP&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-NetTCPSetting -SettingName DatacenterCustom,Datacenter -CwndRestart True&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-NetTCPSetting -SettingName DatacenterCustom,Datacenter -ForceWS Disabled&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;netstat&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;netstat -anop tcp&lt;/code&gt; -n/-f/-b &lt;br&gt; &lt;code&gt;Get-NetTCPConnection -State Established,Listen | ? LocalPort -Match 3389&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-NetTCPConnection -State Established,Listen | ? RemotePort -Match 22&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-NetUDPEndpoint | ? LocalPort -Match 514&lt;/code&gt; netstat -ap udp`&lt;/p&gt; &#xA;&lt;h3&gt;Statistics&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;netstat -se&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-NetAdapterStatistics&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;hostname&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$env:computername&lt;/code&gt; &lt;br&gt; &lt;code&gt;hostname.exe&lt;/code&gt; &lt;br&gt; &lt;code&gt;(Get-CIMInstance CIM_ComputerSystem).Name&lt;/code&gt; &lt;br&gt; &lt;code&gt;(New-Object -ComObject WScript.Network).ComputerName&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Environment]::MachineName&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Net.Dns]::GetHostName()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;arp&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ipconfig /all | Select-String &#34;физ&#34;&lt;/code&gt; grep &lt;br&gt; &lt;code&gt;Get-NetNeighbor -AddressFamily IPv4&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Get-ARP {&#xA;Param (&#xA;$proxy,&#xA;$search&#xA;)&#xA;if (!$proxy) {&#xA;$arp = arp -a&#xA;}&#xA;if ($proxy) {&#xA;$arp = icm $proxy {arp -a}&#xA;}&#xA;$mac = $arp[3..260]&#xA;$mac = $mac -replace &#34;^\s\s&#34;&#xA;$mac = $mac -replace &#34;\s{1,50}&#34;,&#34; &#34;&#xA;$mac_coll = New-Object System.Collections.Generic.List[System.Object]&#xA;foreach ($m in $mac) {&#xA;$smac = $m -split &#34; &#34;&#xA;$mac_coll.Add([PSCustomObject]@{&#xA;IP = $smac[0];&#xA;MAC = $smac[1];&#xA;Type = $smac[2]&#xA;})&#xA;}&#xA;if ($search) {&#xA;if ($search -NotMatch &#34;\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}&#34;) {&#xA;#$ns = nslookup $search&#xA;#$ns = $ns[-2]&#xA;#$global:ns = $ns -replace &#34;Address:\s{1,10}&#34;&#xA;$rdns = Resolve-DnsName $search -ErrorAction Ignore&#xA;$ns = $rdns.IPAddress&#xA;if ($ns -eq $null) {&#xA;return&#xA;}&#xA;} else {&#xA;$ns = $search&#xA;}&#xA;$mac_coll = $mac_coll | ? ip -Match $ns&#xA;}&#xA;$mac_coll&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ARP -search 192.168.3.100&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-ARP -search 192.168.3.100 -proxy dc-01&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;rdp&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ItemProperty -Path &#34;HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&#34; -Name &#34;PortNumber&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-ItemProperty -Path &#34;HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&#34; -Name &#34;PortNumber&#34; -Value &#34;3390&#34;&lt;/code&gt; изменить RDP-порт &lt;br&gt; &lt;code&gt;New-NetFirewallRule -Profile Any -DisplayName &#34;RDP 3390&#34; -Direction Inbound -Protocol TCP -LocalPort 3390&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-ItemProperty -Path &#34;HKLM:\System\CurrentControlSet\Control\Terminal Server\&#34; -Name &#34;fDenyTSConnections&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-ItemProperty -Path &#34;HKLM:\System\CurrentControlSet\Control\Terminal Server\&#34; -Name &#34;fDenyTSConnections&#34; -Value 0&lt;/code&gt; включить rdp &lt;br&gt; &lt;code&gt;reg add &#34;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&#34; /v fDenyTSConnections /t REG_DWORD /d 0 /f&lt;/code&gt; &lt;br&gt; &lt;code&gt;(gcim -Class Win32_TerminalServiceSetting -Namespace root\CIMV2\TerminalServices).SetAllowTSConnections(0)&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Service TermService | Restart-Service -Force&lt;/code&gt; перезапустить rdp-службу&lt;/p&gt; &#xA;&lt;h1&gt;shutdown&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;shutdown /r /o&lt;/code&gt; перезагрузка в безопасный режим &lt;br&gt; &lt;code&gt;shutdown /s /t 600 /c &#34;Power off after 10 minutes&#34;&lt;/code&gt; выключение &lt;br&gt; &lt;code&gt;shutdown /s /f&lt;/code&gt; принудительное закрытие приложений &lt;br&gt; &lt;code&gt;shutdown /a&lt;/code&gt; отмена &lt;br&gt; &lt;code&gt;shutdown /r /t 0 /m \\192.168.3.100&lt;/code&gt; &lt;br&gt; &lt;code&gt;Restart-Computer -ComputerName 192.168.3.100 -Protocol WSMan&lt;/code&gt; через WinRM &lt;br&gt; &lt;code&gt;Restart-Computer –ComputerName 192.168.3.100 –Force&lt;/code&gt; через WMI &lt;br&gt; &lt;code&gt;Set-ItemProperty -Path &#34;HKLM:\SOFTWARE\Microsoft\PolicyManager\default\Start\HideShutDown&#34; -Name &#34;value&#34; -Value 1&lt;/code&gt; скрыть кнопку выключения &lt;br&gt; &lt;code&gt;Set-ItemProperty -Path &#34;HKLM:\SOFTWARE\Microsoft\PolicyManager\default\Start\HideRestart&#34; -Name &#34;value&#34; -Value 1&lt;/code&gt; скрыть кнопку перезагрузки&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Start-Shutdown {&#xA;    &amp;lt;#&#xA;    .SYNOPSIS&#xA;    Module for shutdown and restart the computer at a specified time&#xA;    .DESCRIPTION&#xA;    Example:&#xA;    # Start-Shutdown -Time &#34;18:00&#34;&#xA;    # Start-Shutdown -Restart -Time &#34;18:00&#34;&#xA;    # Start-Shutdown -Cancel&#xA;    .LINK&#xA;    https://github.com/Lifailon/PS-Commands&#xA;    #&amp;gt;&#xA;    param(&#xA;        [string]$Time,&#xA;        [switch]$Restart,&#xA;        [switch]$Cancel&#xA;    )&#xA;    if ($Time) {&#xA;        $currentDateTime = Get-Date&#xA;        $shutdownTime = Get-Date $Time&#xA;        if ($shutdownTime -lt $currentDateTime) {&#xA;            $shutdownTime = $shutdownTime.AddDays(1)&#xA;        }&#xA;        $timeUntilShutdown = $shutdownTime - $currentDateTime&#xA;        $secondsUntilShutdown = [math]::Round($timeUntilShutdown.TotalSeconds)&#xA;    }&#xA;    if ($Cancel) {&#xA;        Start-Process -FilePath &#34;shutdown.exe&#34; -ArgumentList &#34;/a&#34;&#xA;    } elseif ($Restart) {&#xA;        Write-Host &#34;The computer will restart after $($timeUntilShutdown.Hours) hours and $($timeUntilShutdown.Minutes) minutes.&#34;&#xA;        Start-Process -FilePath &#34;shutdown.exe&#34; -ArgumentList &#34;/r&#34;, &#34;/f&#34;, &#34;/t&#34;, &#34;$secondsUntilShutdown&#34;&#xA;    } else {&#xA;        Write-Host &#34;The computer will shutdown after $($timeUntilShutdown.Hours) hours and $($timeUntilShutdown.Minutes) minutes.&#34;&#xA;        Start-Process -FilePath &#34;shutdown.exe&#34; -ArgumentList &#34;/s&#34;, &#34;/f&#34;, &#34;/t&#34;, &#34;$secondsUntilShutdown&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;LocalAccounts&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command -Module Microsoft.PowerShell.LocalAccounts&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-LocalUser&lt;/code&gt; список пользователей &lt;br&gt; &lt;code&gt;Get-LocalGroup&lt;/code&gt; список групп &lt;br&gt; &lt;code&gt;New-LocalUser &#34;1C&#34; -Password $Password -FullName &#34;1C Domain&#34;&lt;/code&gt; создать пользователя &lt;br&gt; &lt;code&gt;Set-LocalUser -Password $Password 1C&lt;/code&gt; изменить пароль &lt;br&gt; &lt;code&gt;Add-LocalGroupMember -Group &#34;Administrators&#34; -Member &#34;1C&#34;&lt;/code&gt; добавить в группу Администраторов &lt;br&gt; &lt;code&gt;Get-LocalGroupMember &#34;Administrators&#34;&lt;/code&gt; члены группы&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;@(&#34;vproxy-01&#34;,&#34;vproxy-02&#34;,&#34;vproxy-03&#34;) | %{&#xA;icm $_ {Add-LocalGroupMember -Group &#34;Administrators&#34; -Member &#34;support4&#34;}&#xA;icm $_ {Get-LocalGroupMember &#34;Administrators&#34;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;SMB&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-SmbServerConfiguration&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-SmbServerConfiguration -EnableSMB1Protocol $false -Force&lt;/code&gt; отключить протокол SMB v1 &lt;br&gt; &lt;code&gt;Get-WindowsFeature | Where-Object {$_.name -eq &#34;FS-SMB1&#34;} | ft Name,Installstate&lt;/code&gt; модуль ServerManager, проверить установлен ли компонент SMB1 &lt;br&gt; &lt;code&gt;Install-WindowsFeature FS-SMB1&lt;/code&gt; установить SMB1 &lt;br&gt; &lt;code&gt;Uninstall-WindowsFeature –Name FS-SMB1 –Remove&lt;/code&gt; удалить SMB1 клиента (понадобится перезагрузка) &lt;br&gt; &lt;code&gt;Get-WindowsOptionalFeature -Online&lt;/code&gt; модуль DISM, для работы с компонентами Windows &lt;br&gt; &lt;code&gt;Disable-WindowsOptionalFeature -Online -FeatureName SMB1Protocol -Remove&lt;/code&gt; удалить SMB1 &lt;br&gt; &lt;code&gt;Set-SmbServerConfiguration –AuditSmb1Access $true&lt;/code&gt; включить аудит SMB1 &lt;br&gt; &lt;code&gt;Get-SmbConnection&lt;/code&gt; список активных сессий и используемая версия SMB (Dialect) &lt;br&gt; &lt;code&gt;Get-SmbOpenFile | select ClientUserName,ClientComputerName,Path,SessionID&lt;/code&gt; список открытых файлов &lt;br&gt; &lt;code&gt;Get-SmbShare&lt;/code&gt; список сетевых папок &lt;br&gt; &lt;code&gt;New-SmbShare -Name xl-share -Path E:\test&lt;/code&gt; создать новую общую сетевую папку (расшарить) &lt;br&gt; &lt;code&gt;-EncryptData $True&lt;/code&gt; включить шифрование SMB &lt;br&gt; &lt;code&gt;-Description&lt;/code&gt; имя в сетевом окружении &lt;br&gt; &lt;code&gt;-ReadAccess &#34;domain\username&#34;&lt;/code&gt; доступ на чтение &lt;br&gt; &lt;code&gt;-ChangeAccess&lt;/code&gt; доступ на запись &lt;br&gt; &lt;code&gt;-FullAccess&lt;/code&gt; полный доступ &lt;br&gt; &lt;code&gt;-NoAccess ALL&lt;/code&gt; нет прав &lt;br&gt; &lt;code&gt;-FolderEnumerationMode [AccessBased | Unrestricted]&lt;/code&gt; позволяет скрыть в сетевой папке объекты, на которых у пользователя нет доступа с помощью Access-Based Enumeration (ABE) &lt;br&gt; &lt;code&gt;Get-SmbShare xl-share | Set-SmbShare -FolderEnumerationMode AccessBased&lt;/code&gt; ключить ABE для всех расшаренных папок &lt;br&gt; &lt;code&gt;Remove-SmbShare xl-share -force&lt;/code&gt; удалить сетевой доступ (шару) &lt;br&gt; &lt;code&gt;Get-SmbShareAccess xl-share&lt;/code&gt; вывести список доступов безопасности к шаре &lt;br&gt; &lt;code&gt;Revoke-SmbShareAccess xl-share -AccountName Everyone –Force&lt;/code&gt; удалить группу из списка доступов &lt;br&gt; &lt;code&gt;Grant-SmbShareAccess -Name xl-share -AccountName &#34;domain\XL-Share&#34; -AccessRight Change –force&lt;/code&gt; изменить/добавить разрешения на запись (Full,Read) &lt;br&gt; &lt;code&gt;Grant-SmbShareAccess -Name xl-share -AccountName &#34;все&#34; -AccessRight Change –force&lt;/code&gt; &lt;br&gt; &lt;code&gt;Block-SmbShareAccess -Name xl-share -AccountName &#34;domain\noAccess&#34; -Force&lt;/code&gt; принудительный запрет &lt;br&gt; &lt;code&gt;New-SmbMapping -LocalPath X: -RemotePath \\$srv\xl-share -UserName support4 -Password password –Persistent $true&lt;/code&gt; подключить сетевой диск &lt;br&gt; &lt;code&gt;-Persistent&lt;/code&gt; восстановление соединения после отключения компьютера или сети &lt;br&gt; &lt;code&gt;-SaveCredential&lt;/code&gt; позволяет сохранить учетные данные пользователя для подключения в диспетчер учетных данных Windows Credential Manager &lt;br&gt; &lt;code&gt;Stop-Process -Name &#34;explorer&#34; | Start-Process -FilePath &#34;C:\Windows\explorer.exe&#34;&lt;/code&gt; перезапустить процесс для отображения в проводнике &lt;br&gt; &lt;code&gt;Get-SmbMapping&lt;/code&gt; список подключенных сетевых дисков &lt;br&gt; &lt;code&gt;Remove-SmbMapping X: -force&lt;/code&gt; отмонтировать сетевой диск &lt;br&gt; &lt;code&gt;$CIMSession = New-CIMSession –Computername $srv&lt;/code&gt; создать сеанс CIM (аудентификация на SMB) &lt;br&gt; &lt;code&gt;Get-SmbOpenFile -CIMSession $CIMSession | select ClientUserName,ClientComputerName,Path | Out-GridView -PassThru | Close-SmbOpenFile -CIMSession $CIMSession -Confirm:$false –Force&lt;/code&gt; закрыть файлы (открыть к ним сетевой доступ)&lt;/p&gt; &#xA;&lt;h3&gt;Get-Acl&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;(Get-Acl \\$srv\xl-share).access&lt;/code&gt; доступ ACL на уровне NTFS &lt;br&gt; &lt;code&gt;Get-Acl C:\Drivers | Set-Acl C:\Distr&lt;/code&gt; скопировать NTFS разрешения с одной папки и применить их на другую&lt;/p&gt; &#xA;&lt;h3&gt;NTFSSecurity&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Module -Name NTFSSecurity -force&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Item &#34;\\$srv\xl-share&#34; | Get-NTFSAccess&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-NTFSAccess -Path &#34;\\$srv\xl-share&#34; -Account &#34;domain\xl-share&#34; -AccessRights Fullcontrol -PassThru&lt;/code&gt; добавить &lt;br&gt; &lt;code&gt;Remove-NTFSAccess -Path &#34;\\$srv\xl-share&#34; -Account &#34;domain\xl-share&#34; -AccessRights FullControl -PassThru&lt;/code&gt; удалить &lt;br&gt; &lt;code&gt;Get-ChildItem -Path &#34;\\$srv\xl-share&#34; -Recurse -Force | Clear-NTFSAccess&lt;/code&gt; удалить все разрешения, без удаления унаследованных разрешений &lt;br&gt; &lt;code&gt;Get-ChildItem -Path &#34;\\$srv\xl-share&#34; -Recurse -Force | Enable-NTFSAccessInheritance&lt;/code&gt; включить NTFS наследование для всех объектов в каталоге&lt;/p&gt; &#xA;&lt;h3&gt;Storage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command -Module Storage&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Disk&lt;/code&gt; список логических дисков &lt;br&gt; &lt;code&gt;Get-Partition&lt;/code&gt; отобразить разделы на всех дисках &lt;br&gt; &lt;code&gt;Get-Volume&lt;/code&gt; список логичких разделов &lt;br&gt; &lt;code&gt;Get-PhysicalDisk&lt;/code&gt; список физических дисков &lt;br&gt; &lt;code&gt;Initialize-Disk 1 –PartitionStyle MBR&lt;/code&gt; инициализировать диск &lt;br&gt; &lt;code&gt;New-Partition -DriveLetter D –DiskNumber 1 -Size 500gb&lt;/code&gt; создать раздел (выделить все место -UseMaximumSize) &lt;br&gt; &lt;code&gt;Format-Volume -DriveLetter D -FileSystem NTFS -NewFileSystemLabel Disk-D&lt;/code&gt; форматировать раздел &lt;br&gt; &lt;code&gt;Set-Partition -DriveLetter D -IsActive $True&lt;/code&gt; сделать активным &lt;br&gt; &lt;code&gt;Remove-Partition -DriveLetter D –DiskNumber 1&lt;/code&gt; удалить раздел &lt;br&gt; &lt;code&gt;Clear-Disk -Number 1 -RemoveData&lt;/code&gt; очистить диск &lt;br&gt; &lt;code&gt;Repair-Volume –driveletter C –Scan&lt;/code&gt; Check disk &lt;br&gt; &lt;code&gt;Repair-Volume –driveletter C –SpotFix&lt;/code&gt; &lt;br&gt; &lt;code&gt;Repair-Volume –driverletter C -Scan –Cimsession $CIMSession&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;iSCSI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;New-IscsiVirtualDisk -Path D:\iSCSIVirtualDisks\iSCSI2.vhdx -Size 20GB&lt;/code&gt; создать динамический vhdx-диск (для фиксированного размера -UseFixed) &lt;br&gt; &lt;code&gt;New-IscsiServerTarget -TargetName iscsi-target-2 -InitiatorIds &#34;IQN:iqn.1991-05.com.microsoft:srv3.contoso.com&#34;&lt;/code&gt; создать Target &lt;br&gt; &lt;code&gt;Get-IscsiServerTarget | fl TargetName, LunMappings&lt;/code&gt; &lt;br&gt; &lt;code&gt;Connect-IscsiTarget -NodeAddress &#34;iqn.1995-05.com.microsoft:srv2-iscsi-target-2-target&#34; -IsPersistent $true&lt;/code&gt; подключиться инициатором к таргету &lt;br&gt; &lt;code&gt;Get-IscsiTarget | fl&lt;/code&gt; &lt;br&gt; &lt;code&gt;Disconnect-IscsiTarget -NodeAddress ″iqn.1995-05.com.microsoft:srv2-iscsi-target-2-target″ -Confirm:$false&lt;/code&gt; отключиться&lt;/p&gt; &#xA;&lt;h1&gt;ActiveDirectory&lt;/h1&gt; &#xA;&lt;h3&gt;RSAT (Remote Server Administration Tools)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;DISM.exe /Online /add-capability /CapabilityName:Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0 /CapabilityName:Rsat.GroupPolicy.Management.Tools~~~~0.0.1.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-WindowsCapability –online –Name Rsat.Dns.Tools~~~~0.0.1.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-WindowsCapability -Online -Name Rsat.DHCP.Tools~~~~0.0.1.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-WindowsCapability –online –Name Rsat.FileServices.Tools~~~~0.0.1.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-WindowsCapability -Online -Name Rsat.WSUS.Tools~~~~0.0.1.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-WindowsCapability -Online -Name Rsat.CertificateServices.Tools~~~~0.0.1.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-WindowsCapability -Online -Name Rsat.RemoteDesktop.Services.Tools~~~~0.0.1.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-WindowsCapability -Name RSAT* -Online | Select-Object -Property DisplayName, State&lt;/code&gt; отобразить список установленных компанентов&lt;/p&gt; &#xA;&lt;h3&gt;Import-Module ActiveDirectory&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$Session = New-PSSession -ComputerName $srv&lt;/code&gt; -Credential $cred&lt;code&gt;\&lt;/code&gt;Export-PSsession -Session $Session -Module ActiveDirectory -OutputModule ActiveDirectory&lt;code&gt;экспортировать модуль из удаленной сесси (например, с DC) \&lt;/code&gt;Remove-PSSession -Session $Session&lt;code&gt;\&lt;/code&gt;Import-Module ActiveDirectory&lt;code&gt;\&lt;/code&gt;Get-Command -Module ActiveDirectory`&lt;/p&gt; &#xA;&lt;h3&gt;ADSI (Active Directory Service Interface)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$d0 = $env:userdnsdomain&lt;/code&gt; &lt;br&gt; &lt;code&gt;$d0 = $d0 -split &#34;\.&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$d1 = $d0[0]&lt;/code&gt; &lt;br&gt; &lt;code&gt;$d2 = $d0[1]&lt;/code&gt; &lt;br&gt; &lt;code&gt;$group = [ADSI]&#34;LDAP://OU=Domain Controllers,DC=$d1,DC=$d2&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$group | select *&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$Local_User = [ADSI]&#34;WinNT://./Администратор,user&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Local_User | Get-Member&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Local_User.Description&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Local_User.LastLogin&lt;/code&gt; время последней авторизации локального пользователя&lt;/p&gt; &#xA;&lt;h3&gt;LDAP (Lightweight Directory Access Protocol)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$ldapsearcher = New-Object System.DirectoryServices.DirectorySearcher&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ldapsearcher.SearchRoot = &#34;LDAP://OU=Domain Controllers,DC=$d1,DC=$d2&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ldapsearcher.Filter = &#34;(objectclass=computer)&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$dc = $ldapsearcher.FindAll().path&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$usr = $env:username&lt;/code&gt; cписок групп текущего пользователя &lt;br&gt; &lt;code&gt;$ldapsearcher = New-Object System.DirectoryServices.DirectorySearcher&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ldapsearcher.Filter = &#34;(&amp;amp;(objectCategory=User)(samAccountName=$usr))&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$usrfind = $ldapsearcher.FindOne()&lt;/code&gt; &lt;br&gt; &lt;code&gt;$groups = $usrfind.properties.memberof -replace &#34;(,OU=.+)&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$groups = $groups -replace &#34;(CN=)&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;DC (Domain Component) - компонент доменного имени &lt;br&gt; OU (Organizational Unit) - организационные подразделения (type), используются для упорядочения объектов &lt;br&gt; Container - так же используется для упорядочения объектов, контейнеры в отличии от подраделений не могут быть переименованы, удалены, созданы или связаны с объектом групповой политики (Computers, Domain Controllers, Users) &lt;br&gt; DN (Distinguished Name) — уникальное имя объекта и местоположение в лесу AD. В DN описывается содержимое атрибутов в дереве (путь навигации), требуемое для доступа к конкретной записи или ее поиска &lt;br&gt; CN (Common Name) - общее имя&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(Get-ADObject (Get-ADRootDSE).DefaultNamingContext -Properties wellKnownObjects).wellKnownObjects&lt;/code&gt; отобразить отобразить контейнеры по умолчанию &lt;br&gt; &lt;code&gt;redircmp OU=Client Computers,DC=root,DC=domain,DC=local&lt;/code&gt; изменить контейнер компьютеров по умолчанию &lt;br&gt; &lt;code&gt;redirusr&lt;/code&gt; изменить контейнер пользователей по умолчанию&lt;/p&gt; &#xA;&lt;h3&gt;LAPS (Local Admin Password Management)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Import-module AdmPwd.ps&lt;/code&gt; импортировать модуль &lt;br&gt; &lt;code&gt;Get-AdmPwdPassword -ComputerName NAME&lt;/code&gt; посмотреть пароль &lt;br&gt; &lt;code&gt;Reset-AdmPwdPassword -ComputerName NAME&lt;/code&gt; изменить пароль &lt;br&gt; &lt;code&gt;Get-ADComputer -Filter * -SearchBase &#34;DC=$d1,DC=$d2&#34; | Get-AdmPwdPassword -ComputerName {$_.Name} | select ComputerName,Password,ExpirationTimestamp | Out-GridView&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-ADComputer -Identity $srv | Get-AdmPwdPassword -ComputerName {$_.Name} | select ComputerName,Password,ExpirationTimestamp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Recycle Bin&lt;/h3&gt; &#xA;&lt;p&gt;Удаленные объекты хранятся в корзине AD в течении времени захоронения (определяется в атрибуте домена msDS-deletedObjectLifetime), заданном для леса. По умолчанию это 180 дней. Если данный срок прошел, объект все еще остается в контейнере Deleted Objects, но большинство его атрибутов и связей очищаются (Recycled Object). После истечения периода tombstoneLifetime (по умолчанию также 180 дней, но можно увеличить) объект полностью удаляется из AD автоматическим процессом очистки. &lt;br&gt; &lt;code&gt;Get-ADForest domain.local&lt;/code&gt; отобразить уровень работы леса &lt;br&gt; &lt;code&gt;Set-ADForestMode -Identity domain.local -ForestMode Windows2008R2Forest -force&lt;/code&gt; увеличить уровень работы леса &lt;br&gt; &lt;code&gt;Enable-ADOptionalFeature –Identity &#34;CN=Recycle Bin Feature,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=domain,DC=local&#34; –Scope ForestOrConfigurationSet –Target &#34;domain.local&#34;&lt;/code&gt; включить корзину &lt;br&gt; &lt;code&gt;Get-ADOptionalFeature &#34;Recycle Bin Feature&#34; | select-object name,EnabledScopes&lt;/code&gt; если значение EnabledScopes не пустое, значит в домене корзина Active Directory включена &lt;br&gt; &lt;code&gt;Get-ADObject -Filter &#39;Name -like &#34;*tnas*&#34;&#39; -IncludeDeletedObjects&lt;/code&gt; найти удаленную (Deleted: True) УЗ (ObjectClass: user) в AD &lt;br&gt; &lt;code&gt;Get-ADObject -Filter &#39;Name -like &#34;*tnas*&#34;&#39; –IncludeDeletedObjects -Properties *| select-object Name, sAMAccountName, LastKnownParent, memberOf, IsDeleted | fl&lt;/code&gt; проверить значение атрибута IsDeleted, контейнер, в котором находился пользователе перед удалением (LastKnownParent) и список групп, в которых он состоял &lt;br&gt; &lt;code&gt;Get-ADObject –filter {Deleted -eq $True -and ObjectClass -eq &#34;user&#34;} –includeDeletedObjects&lt;/code&gt; вывести список удаленных пользователей &lt;br&gt; &lt;code&gt;Restore-ADObject -Identity &#34;3dc33c7c-b912-4a19-b1b7-415c1395a34e&#34;&lt;/code&gt; восстановить по значению атрибута ObjectGUID &lt;br&gt; &lt;code&gt;Get-ADObject -Filter &#39;SAMAccountName -eq &#34;tnas-01&#34;&#39; –IncludeDeletedObjects | Restore-ADObject&lt;/code&gt; восстановить по SAMAccountName &lt;br&gt; &lt;code&gt;Get-ADObject -Filter {Deleted -eq $True -and ObjectClass -eq &#39;group&#39; -and Name -like &#39;*Allow*&#39;} –IncludeDeletedObjects | Restore-ADObject –Verbose&lt;/code&gt; восстановить группу или компьютер&lt;/p&gt; &#xA;&lt;h3&gt;thumbnailPhoto&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$photo = [byte[]](Get-Content C:\Install\adm.jpg -Encoding byte)&lt;/code&gt; преобразовать файл картинки в массив байтов (jpeg/bmp файл, размером фото до 100 Кб и разрешением 96×96) &lt;br&gt; &lt;code&gt;Set-ADUser support4 -Replace @{thumbnailPhoto=$photo}&lt;/code&gt; задать значение атрибута thumbnailPhoto&lt;/p&gt; &#xA;&lt;h3&gt;ADDomainController&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ADDomainController&lt;/code&gt; выводит информацию о текущем контроллере домена (LogonServer), который используется данным компьютером для аутентификации (DC выбирается при загрузке в соответствии с топологией сайтов AD) &lt;br&gt; &lt;code&gt;Get-ADDomainController -Discover -Service PrimaryDC&lt;/code&gt; найти контроллер с ролью PDC в домене &lt;br&gt; &lt;code&gt;Get-ADDomainController -Filter * | ft HostName,IPv4Address,Name,Site,OperatingSystem,IsGlobalCatalog&lt;/code&gt; список все DC, принадлежность к сайту, версии ОС и GC&lt;/p&gt; &#xA;&lt;p&gt;При загрузке ОС служба NetLogon делает DNS запрос со списком контроллеров домена (к SRV записи _ldap._tcp.dc.&lt;em&gt;msdcs.domain&lt;/em&gt;), DNS возвращает список DC в домене с записью Service Location (SRV). Клиент делает LDAP запрос к DC для определения сайта AD по своему IP адресу. Клиент через DNS запрашивает список контроллеров домена в сайте (в разделе _tcp.sitename._sites...).&lt;/p&gt; &#xA;&lt;p&gt;USN (Update Sequence Numbers) - счетчик номера последовательного обновления, который существует у каждого объекта AD. При репликации контроллеры обмениваются значениями USN, объект с более низким USN будет при репликации перезаписан объектом с более высоким USN. Находится в свойствах - Object (включить View - Advanced Features). Каждый контроллер домена содержит отдельный счетчик USN, который начинает отсчет в момент запуска процесса Dcpromo и продолжает увеличивать значения в течение всего времени существования контроллера домена. Значение счетчика USN увеличивается каждый раз, когда на контроллере домена происходит транзакция, это операции создания, обновления или удаления объекта.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ADDomainController -Filter * | % {&lt;/code&gt; отобразить USN объекта на всех DC в домене&lt;code&gt;\&lt;/code&gt;Get-ADUser -Server $_.HostName -Identity support4 -Properties uSNChanged | select SamAccountName,uSNChanged&lt;code&gt;\&lt;/code&gt;}`&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dcpromo /forceremoval&lt;/code&gt; принудительно выполнит понижение в роли контроллера домена до уровня рядового сервера. После понижения роли выполняется удаление всех ссылок в домене на этот контроллер. Далее производит включение сервера в состав домена, и выполнение обратного процесса, т.е. повышение сервера до уровня контроллера домена.&lt;/p&gt; &#xA;&lt;h3&gt;ADComputer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nltest /DSGETDC:$env:userdnsdomain&lt;/code&gt; узнать на каком DC аудентифицирован хост (Logon Server) &lt;br&gt; &lt;code&gt;nltest /SC_RESET:$env:userdnsdomain\srv-dc2.$env:userdnsdomain&lt;/code&gt; переключить компьютер на другой контроллер домена AD вручную (The command completed successfully) &lt;br&gt; &lt;code&gt;Get-ADComputer –Identity $env:computername -Properties PasswordLastSet&lt;/code&gt; время последней смены пароля на сервере &lt;br&gt; &lt;code&gt;Test-ComputerSecureChannel –verbose&lt;/code&gt; проверить доверительные отношения с доменом (соответствует ли локальный пароль компьютера паролю, хранящемуся в AD) &lt;br&gt; &lt;code&gt;Reset-ComputerMachinePassword -Credential domain\admin&lt;/code&gt; принудительно обновить пароль &lt;br&gt; &lt;code&gt;Netdom ResetPWD /Server:dc-01 /UserD:domain\admin /PasswordD:*&lt;/code&gt; сбросить хэш пароля компьютера в домене (перезагрузка не требуется) &lt;br&gt; &lt;code&gt;Search-ADAccount -AccountDisabled -ComputersOnly | select Name,LastLogonDate,Enabled&lt;/code&gt; отобразить все отключенные компьютеры&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ADComputer -Filter * -Properties * | select name&lt;/code&gt; список всех компьютеров в домене (Filter), вывести все свойства (Properties) &lt;br&gt; &lt;code&gt;Get-ADComputer -Identity $srv -Properties * | ft Name,LastLogonDate,PasswordLastSet,ms-Mcs-AdmPwd -Autosize&lt;/code&gt; конкретного компьютера в AD (Identity) &lt;br&gt; &lt;code&gt;Get-ADComputer -SearchBase &#34;OU=Domain Controllers,DC=$d1,DC=$d2&#34; -Filter * -Properties * | ft Name, LastLogonDate, distinguishedName -Autosize&lt;/code&gt; поиск в базе по DN (SearchBase)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(Get-ADComputer -Filter {enabled -eq &#34;true&#34;}).count&lt;/code&gt; получить общее количество активных (незаблокированных) компьютеров &lt;br&gt; &lt;code&gt;(Get-ADComputer -Filter {enabled -eq &#34;true&#34; -and OperatingSystem -like &#34;*Windows Server 2016*&#34;}).count&lt;/code&gt; кол-во активных копьютеров с ОС WS 2016&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ADComputer -Filter * -Properties * | select @{Label=&#34;Ping Status&#34;; Expression={&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ping = ping -n 1 -w 50 $_.Name&lt;/code&gt; &lt;br&gt; &lt;code&gt;if ($ping -match &#34;TTL&#34;) {&#34;Online&#34;} else {&#34;Offline&#34;}&lt;/code&gt; &lt;br&gt; &lt;code&gt;}},&lt;/code&gt; &lt;br&gt; &lt;code&gt;@{Label=&#34;Status&#34;; Expression={&lt;/code&gt; &lt;br&gt; &lt;code&gt;if ($_.Enabled -eq &#34;True&#34;) {$_.Enabled -replace &#34;True&#34;,&#34;Active&#34;} else {$_.Enabled -replace &#34;False&#34;,&#34;Blocked&#34;}&lt;/code&gt; &lt;br&gt; &lt;code&gt;}}, Name, IPv4Address, OperatingSystem, @{Label=&#34;UserOwner&#34;; Expression={$_.ManagedBy -replace &#34;(CN=|,.+)&#34;}&lt;/code&gt; &lt;br&gt; &lt;code&gt;},Created | Out-GridView&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ADUser&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ADUser -Identity support4 -Properties *&lt;/code&gt; список всех атрибутов &lt;br&gt; &lt;code&gt;Get-ADUser -Identity support4 -Properties DistinguishedName, EmailAddress, Description&lt;/code&gt; путь DN, email и описание &lt;br&gt; &lt;code&gt;Get-ADUser -Filter {(Enabled -eq &#34;True&#34;) -and (mail -ne &#34;null&#34;)} -Properties mail | ft Name,mail&lt;/code&gt; список активных пользователей и есть почтовый ящик &lt;br&gt; &lt;code&gt;Get-ADUser -Filter {SamAccountName -like &#34;*&#34;} | Measure-Object&lt;/code&gt; посчитать кол-во всех аккаунтов (Count) &lt;br&gt; &lt;code&gt;Get-ADUser -Filter * -Properties WhenCreated | sort WhenCreated | ft Name, whenCreated&lt;/code&gt; дата создания &lt;br&gt; &lt;code&gt;Get-ADUser -Identity support4 -property LockedOut | select samaccountName,Name,Enabled,Lockedout&lt;/code&gt; &lt;br&gt; &lt;code&gt;Enabled=True&lt;/code&gt; учетная запись включена - да &lt;br&gt; &lt;code&gt;Lockedout=False&lt;/code&gt; учетная запись заблокирована (например, политикой паролей) - нет &lt;br&gt; &lt;code&gt;Get-ADUser -Identity support4 | Unlock-ADAccount&lt;/code&gt; разблокировать учетную запись &lt;br&gt; &lt;code&gt;Disable-ADAccount -Identity support4&lt;/code&gt; отключить учетную запись &lt;br&gt; &lt;code&gt;Enable-ADAccount -Identity support4&lt;/code&gt; включить учетную запись &lt;br&gt; &lt;code&gt;Search-ADAccount -LockedOut&lt;/code&gt; найти все заблокированные учетные записи &lt;br&gt; &lt;code&gt;Search-ADAccount -AccountDisabled | select Name,LastLogonDate,Enabled&lt;/code&gt; отобразить все отключенные учетные записи с временем последнего входа&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ADUser -Identity support4 -Properties PasswordLastSet,PasswordExpired,PasswordNeverExpires&lt;/code&gt; &lt;br&gt; &lt;code&gt;PasswordLastSet&lt;/code&gt; время последней смены пароля &lt;br&gt; &lt;code&gt;PasswordExpired=False&lt;/code&gt; пароль истек - нет &lt;br&gt; &lt;code&gt;PasswordNeverExpires=True&lt;/code&gt; срок действия пароля не истекает - да &lt;br&gt; &lt;code&gt;Set-ADAccountPassword support4 -Reset -NewPassword (ConvertTo-SecureString -AsPlainText &#34;password&#34; -Force -Verbose)&lt;/code&gt; изменить пароль учетной записи &lt;br&gt; &lt;code&gt;Set-ADUser -Identity support4 -ChangePasswordAtLogon $True&lt;/code&gt; смена пароля при следующем входе в систему&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$day = (Get-Date).adddays(-90)&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-ADUser -filter {(passwordlastset -le $day)} | ft&lt;/code&gt; пользователи, которые не меняли свой пароль больше 90 дней&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$day = (Get-Date).adddays(-30)&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-ADUser -filter {(Created -ge $day)} -Property Created | select Name,Created&lt;/code&gt; Новые пользователи за 30 дней&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$day = (Get-Date).adddays(-360)&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-ADUser -Filter {(LastLogonTimestamp -le $day)} -Property LastLogonTimestamp | select Name,SamAccountName,@{n=&#39;LastLogonTimestamp&#39;;e={[DateTime]::FromFileTime($_.LastLogonTimestamp)}} | sort -Descending LastLogonTimestamp&lt;/code&gt; пользователи, которые не логинились больше 360 дней. Репликация атрибута LastLogonTimestamp составляет от 9 до 14 дней. &lt;br&gt; &lt;code&gt;| Disable-ADAccount $_.SamAccountName&lt;/code&gt; заблокировать &lt;br&gt; &lt;code&gt;-WhatIf&lt;/code&gt; отобразить вывод без применения изменений&lt;/p&gt; &#xA;&lt;h3&gt;ADGroupMember&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;(Get-ADUser -Identity support4 -Properties MemberOf).memberof&lt;/code&gt; список групп в которых состоит пользователь &lt;br&gt; &lt;code&gt;Get-ADGroupMember -Identity &#34;Domain Admins&#34; | Select Name,SamAccountName&lt;/code&gt; список пользователей в группе &lt;br&gt; &lt;code&gt;Add-ADGroupMember -Identity &#34;Domain Admins&#34; -Members support5&lt;/code&gt; добавить в группу &lt;br&gt; &lt;code&gt;Remove-ADGroupMember -Identity &#34;Domain Admins&#34; -Members support5 -force&lt;/code&gt; удалить из группы &lt;br&gt; &lt;code&gt;Get-ADGroup -filter * | where {!($_ | Get-ADGroupMember)} | Select Name&lt;/code&gt; отобразить список пустых групп (-Not)&lt;/p&gt; &#xA;&lt;h3&gt;ADReplication&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command -Module ActiveDirectory -Name *Replication*&lt;/code&gt; список всех командлетов модуля &lt;br&gt; &lt;code&gt;Get-ADReplicationFailure -Target dc-01&lt;/code&gt; список ошибок репликации с партнерами &lt;br&gt; &lt;code&gt;Get-ADReplicationFailure -Target $env:userdnsdomain -Scope Domain&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-ADReplicationPartnerMetadata -Target dc-01 | select Partner,LastReplicationAttempt,LastReplicationSuccess,LastReplicationResult,LastChangeUsn&lt;/code&gt; время последней и время успешной репликации с партнерами &lt;br&gt; &lt;code&gt;Get-ADReplicationUpToDatenessVectorTable -Target dc-01&lt;/code&gt; Update Sequence Number (USN) увеличивается каждый раз, когда на контроллере домена происходит транзакция (операции создания, обновления или удаления объекта), при репликации DC обмениваются значениями USN, объект с более низким USN при репликации будет перезаписан высоким USN.&lt;/p&gt; &#xA;&lt;h1&gt;repadmin&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;repadmin /replsummary&lt;/code&gt; отображает время последней репликации на всех DC по направлению (Source и Destination) и их состояние с учетом партнеров &lt;br&gt; &lt;code&gt;repadmin /showrepl $srv&lt;/code&gt; отображает всех партнеров по реплкации и их статус для всех разделов Naming Contexts (DC=ForestDnsZones, DC=DomainDnsZones, CN=Schema, CN=Configuration) &lt;br&gt; &lt;code&gt;repadmin /replicate $srv2 $srv1 DC=domain,DC=local &lt;/code&gt; выполнить репликацию с $srv1 на $srv2 только указанный раздела домена &lt;br&gt; &lt;code&gt;repadmin /SyncAll /AdeP&lt;/code&gt; запустить межсайтовую исходящую репликацию всех разделов от текущего сервера со всеми партнерами по репликации &lt;br&gt; &lt;code&gt;/A&lt;/code&gt; выполнить для всех разделов NC &lt;br&gt; &lt;code&gt;/d&lt;/code&gt; в сообщениях идентифицировать серверы по DN (вместо GUID DNS - глобальным уникальным идентификаторам) &lt;br&gt; &lt;code&gt;/e&lt;/code&gt; межсайтовая синхронизация (по умолчанию синхронизирует только с DC текущего сайта) &lt;br&gt; &lt;code&gt;/P&lt;/code&gt; извещать об изменениях с этого сервера (по умолчанию: опрашивать об изменениях) &lt;br&gt; &lt;code&gt;repadmin /Queue $srv&lt;/code&gt; отображает кол-во запросов входящей репликации (очередь), которое необходимо обработать (причиной может быть большое кол-во партнеров или формирование 1000 объектов скриптом) &lt;br&gt; &lt;code&gt;repadmin /showbackup *&lt;/code&gt; узнать дату последнего Backup&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Error: 1722&lt;/code&gt; сервер rpc недоступен (ошибка отката репликации). Проверить имя домена в настройках сетевого адаптера, первым должен идти адрес DNS-сервера другого контроллера домена, вторым свой адрес. &lt;br&gt; &lt;code&gt;Get-Service -ComputerName $srv | select name,status | ? name -like &#34;RpcSs&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Service -ComputerName $srv -Name RpcSs -RequiredServices&lt;/code&gt; зависимые службы &lt;br&gt; Зависимые службы RPC: &lt;br&gt; &#34;Служба сведений о подключенных сетях&#34; - должен быть включен отложенный запуск. Если служба срабатывает до &#34;службы списка сетей&#34;, может падать связь с доменом (netlogon) &lt;br&gt; &#34;Центр распространения ключей Kerberos&#34; &lt;br&gt; &#34;DNS-сервер&#34; &lt;br&gt; &lt;code&gt;nslookup $srv&lt;/code&gt; &lt;br&gt; &lt;code&gt;tnc $srv -p 135&lt;/code&gt; &lt;br&gt; &lt;code&gt;repadmin /retry&lt;/code&gt; повторить попытку привязки к целевому DC, если была ошибка 1722 или 1753 (RPC недоступен)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;repadmin /showrepl $srv&lt;/code&gt; &lt;br&gt; &lt;code&gt;Last attempt @ 2022-07-15 10:46:01 завершена с ошибкой, результат 8456 (0x2108)&lt;/code&gt; при проверки showrepl этого партнера, его ошибка: 8457 (0x2109) &lt;br&gt; &lt;code&gt;Last success @ 2022-07-11 02:29:46&lt;/code&gt; последний успех &lt;br&gt; Когда репликация автоматически отключена, ОС записывает в DSA - not writable одно из четырех значений: &lt;br&gt; &lt;code&gt;Path: HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\NTDS\Parameters&lt;/code&gt; &lt;br&gt; &lt;code&gt;Dsa Not Writable&lt;/code&gt; &lt;br&gt; &lt;code&gt;#define DSA_WRITABLE_GEN 1&lt;/code&gt; версия леса несовместима с ОС &lt;br&gt; &lt;code&gt;#define DSA_WRITABLE_NO_SPACE 2&lt;/code&gt; на диске, где размещена база данных Active Directory или файлы журналов (логи), недостаточно свободного места &lt;br&gt; &lt;code&gt;#define DSA_WRITABLE_USNROLLBCK 4&lt;/code&gt; откат USN произошел из-за неправильного отката базы данных Active Directory во времени (восстановление из снапшота) &lt;br&gt; &lt;code&gt;#define DSA_WRITABLE_CORRUPT_UTDV 8&lt;/code&gt; вектор актуальности поврежден на локальном контроллере домена&lt;/p&gt; &#xA;&lt;h1&gt;dcdiag&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;dcdiag /s:&amp;lt;DomainController&amp;gt; [/n:&amp;lt;NamingContext&amp;gt;] [[/u:&amp;lt;domain\user&amp;gt;] [/p:&amp;lt;password&amp;gt;]] [{/a|/e}{/q|/v}] [/f:&amp;lt;LogFile&amp;gt;] [/ferr:&amp;lt;ErrorLog&amp;gt;] [/test:&amp;lt;test&amp;gt;] [/fix]&lt;/code&gt; &lt;br&gt; &lt;code&gt;dcdiag /Test:replications /s:dc-01&lt;/code&gt; отображает ошибки репликации &lt;br&gt; &lt;code&gt;dcdiag /Test:DNS /e /v /q&lt;/code&gt; тест DNS &lt;br&gt; &lt;code&gt;/a&lt;/code&gt; проверка всех серверов данного сайта &lt;br&gt; &lt;code&gt;/e&lt;/code&gt; проверка всех серверов предприятия &lt;br&gt; &lt;code&gt;/q&lt;/code&gt; выводить только сообщения об ошибках &lt;br&gt; &lt;code&gt;/v&lt;/code&gt; выводить подробную информацию &lt;br&gt; &lt;code&gt;/fix&lt;/code&gt; автоматически исправляет ошибки &lt;br&gt; &lt;code&gt;/test:&lt;/code&gt; &lt;br&gt; &lt;code&gt;NetLogons&lt;/code&gt; проверка наличие прав на выполнение репликации &lt;br&gt; &lt;code&gt;Connectivity&lt;/code&gt; проверяет регистрацию DNS для каждого контроллера домена, отправляет тестовый эхо-пакет на каждый контроллер домена и проверяет подключение по протоколам LDAP и RPC к каждому контроллеру домена &lt;br&gt; &lt;code&gt;Services&lt;/code&gt; проверяет работоспособность всех служб, необходимых для работы контроллера домена, на указанном контроллере домена &lt;br&gt; &lt;code&gt;Systemlog&lt;/code&gt; проверяет наличие ошибок в журналах контроллера домена &lt;br&gt; &lt;code&gt;FRSEvent&lt;/code&gt; проверяет ошибки репликации в работе службы репликации файлов, что может означать наличие проблем в репликации SYSVOL и, таким образом, целостности копий объектов групповых политик &lt;br&gt; &lt;code&gt;FSMOCheck&lt;/code&gt; не проверяет роли хозяев операций, а вместо этого запрашивает сервер глобального каталога, первичный контроллер домена, предпочтительный сервер времени, сервер времени и центр распространения ключей (контроллер домена может подключиться к KDC, PDC, серверу глобального каталога) &lt;br&gt; &lt;code&gt;KnowsOfRoleHolders&lt;/code&gt; пgроверяет возможность подключения контроллеров домена ко всем пяти хозяевам операций (ролями FSMO) &lt;br&gt; &lt;code&gt;MachineAccount&lt;/code&gt; проверяет правильность регистрации учетной записи целевого компьютера и правильность объявлений служб этого компьютера (корректность доверительных отношения с доменом). Если обнаружена ошибка, ее можно исправить с помощью утилиты dcdiag, указав параметры /fixmachineaccount или /recreatemachineaccount &lt;br&gt; &lt;code&gt;Advertising&lt;/code&gt; проверяет, правильно ли контроллер домена сообщает о себе и о своей роли хозяина операций. Этот тест завершиться неудачно, если служба NetLogon не запущена &lt;br&gt; &lt;code&gt;CheckSDRefDom&lt;/code&gt; проверяет правильность доменов ссылок дескрипторов безопасности для каждого раздела каталогов программ &lt;br&gt; &lt;code&gt;CrossRefValidation&lt;/code&gt; проверяет правильность перекрестных ссылок для доменов &lt;br&gt; &lt;code&gt;RRSSysvol&lt;/code&gt; проверяет состояние готовности для FRS SYSVOL &lt;br&gt; &lt;code&gt;Intersite&lt;/code&gt; проверяет наличие ошибок, которые могут помешать нормальной репликации между сайтами. Компания Microsoft предупреждает, что иногда результаты этого теста могут оказаться неточными &lt;br&gt; &lt;code&gt;KCCEvent&lt;/code&gt; проверяет безошибочность создания объектов соединений для репликации между сайтами &lt;br&gt; &lt;code&gt;NCSecDesc&lt;/code&gt; проверяет правильность разрешений для репликации в дескрипторах безопасности для заголовков контекста именования &lt;br&gt; &lt;code&gt;ObjectsReplicated&lt;/code&gt; проверяет правильность репликации агента сервера каталогов и объектов учетных записей компьютеров &lt;br&gt; &lt;code&gt;OutboundSecureChannels&lt;/code&gt; проверяется наличие безопасных каналов между всеми контроллерами домена в интересующем домене &lt;br&gt; &lt;code&gt;Replications&lt;/code&gt; проверяет возможность репликации между контроллерами домена и сообщает обо всех ошибках при репликации &lt;br&gt; &lt;code&gt;RidManager&lt;/code&gt; проверяет работоспособность и доступность хозяина относительных идентификаторов &lt;br&gt; &lt;code&gt;VerifyEnterpriseReferences&lt;/code&gt; проверяет действительность системных ссылок службы репликации файлов для всех объектов на всех контроллерах домена в лесу &lt;br&gt; &lt;code&gt;VerifyReferences&lt;/code&gt; проверяет действительность системных ссылок службы репликации файлов для всех объектов на указанном контроллере домена &lt;br&gt; &lt;code&gt;VerifyReplicas&lt;/code&gt; проверяет действительность всех разделов каталога приложения на всех серверах, принимающих участие в репликации&lt;/p&gt; &#xA;&lt;h1&gt;ntdsutil&lt;/h1&gt; &#xA;&lt;p&gt;Перенос БД AD (ntds.dit): &lt;br&gt; &lt;code&gt;Get-Acl C:\Windows\NTDS | Set-Acl D:\AD-DB&lt;/code&gt; скопировать NTFS разрешения на новый каталог &lt;br&gt; &lt;code&gt;Stop-Service -ComputerName dc -name NTDS&lt;/code&gt; остановить службу Active Directory Domain Services &lt;br&gt; &lt;code&gt;ntdsutil&lt;/code&gt; запустить утилиту ntdsutil &lt;br&gt; &lt;code&gt;activate instance NTDS&lt;/code&gt; выбрать активный экземпляр базы AD &lt;br&gt; &lt;code&gt;files&lt;/code&gt; перейдем в контекст files, в котором возможно выполнение операция с файлами базы ntds.dit &lt;br&gt; &lt;code&gt;move DB to D:\AD-DB\&lt;/code&gt; перенести базу AD в новый каталог (предварительно нужно его создать) &lt;br&gt; &lt;code&gt;info&lt;/code&gt; проверить, что БД находится в новом каталоге &lt;br&gt; &lt;code&gt;move logs to D:\AD-DB\&lt;/code&gt; переместим в тот же каталог файлы с журналами транзакций &lt;br&gt; &lt;code&gt;quit&lt;/code&gt; &lt;br&gt; &lt;code&gt;Start-Service -ComputerName dc -name NTDS&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Сброс пароля DSRM (режим восстановления служб каталогов): &lt;br&gt; &lt;code&gt;ntdsutil&lt;/code&gt; &lt;br&gt; &lt;code&gt;set dsrm password&lt;/code&gt; &lt;br&gt; &lt;code&gt;reset password on server NULL&lt;/code&gt; &lt;br&gt; новый пароль &lt;br&gt; подтверждение пароля &lt;br&gt; &lt;code&gt;quit&lt;/code&gt; &lt;br&gt; &lt;code&gt;quit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Синхронизировать с паролем УЗ в AD: &lt;br&gt; &lt;code&gt;ntdsutil&lt;/code&gt; &lt;br&gt; &lt;code&gt;set dsrm password&lt;/code&gt; &lt;br&gt; &lt;code&gt;sync from domain account dsrmadmin&lt;/code&gt; &lt;br&gt; &lt;code&gt;quit&lt;/code&gt; &lt;br&gt; &lt;code&gt;quit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ошибка 0x00002e2 при загрузке ОС. &lt;br&gt; Загрузиться в режиме восстанавления WinRE (Windows Recovery Environment) - Startup Settings - Restart - DSRM (Directory Services Restore Mode) &lt;br&gt; &lt;code&gt;reagentc /boottore&lt;/code&gt; shutdown /f /r /o /t 0 перезагрузка в режиме WinRE - ОС на базе WinPE (Windows Preinstallation Environment), образ winre.wim находится на скрытом разделе System Restore &lt;br&gt; На контроллере домена единственная локальная учетная запись — администратор DSRM. Пароль создается при установке роли контроллера домена ADDS на сервере (SafeModeAdministratorPassword). &lt;br&gt; &lt;code&gt;ntdsutil&lt;/code&gt; &lt;br&gt; &lt;code&gt;activate instance ntds&lt;/code&gt; &lt;br&gt; &lt;code&gt;Files&lt;/code&gt; &lt;br&gt; &lt;code&gt;Info&lt;/code&gt; &lt;br&gt; &lt;code&gt;integrity&lt;/code&gt; проверить целостность БД &lt;br&gt; Ошибка: Failed to open DIT for AD DS/LDS instance NTDS. Error -2147418113 &lt;br&gt; &lt;code&gt;mkdir c:\ntds_bak&lt;/code&gt; &lt;br&gt; &lt;code&gt;xcopy c:\Windows\NTDS\*.* c:\ntds_bak&lt;/code&gt; backup содержимого каталога с БД &lt;br&gt; &lt;code&gt;esentutl /g c:\windows\ntds\ntds.dit&lt;/code&gt; проверим целостность файла &lt;br&gt; Вывод: Integrity check completed. Database is CORRUPTED ошибка, база AD повреждена &lt;br&gt; &lt;code&gt;esentutl /p c:\windows\ntds\ntds.dit&lt;/code&gt; исправить ошибки &lt;br&gt; Вывод: Operation completed successfully in xx seconds. нет ошибок &lt;br&gt; &lt;code&gt;esentutl /g c:\windows\ntds\ntds.dit&lt;/code&gt; проверим целостность файла &lt;br&gt; Выполнить анализ семантики базы с помощью ntdsutil: &lt;br&gt; &lt;code&gt;ntdsutil&lt;/code&gt; &lt;br&gt; &lt;code&gt;activate instance ntds&lt;/code&gt; &lt;br&gt; &lt;code&gt;semantic database analysis&lt;/code&gt; &lt;br&gt; &lt;code&gt;go&lt;/code&gt; &lt;br&gt; &lt;code&gt;go fixup&lt;/code&gt; исправить семантические ошибки &lt;br&gt; Сжать файл БД: &lt;br&gt; &lt;code&gt;activate instance ntds&lt;/code&gt; &lt;br&gt; &lt;code&gt;files&lt;/code&gt; &lt;br&gt; &lt;code&gt;compact to C:\Windows\NTDS\TEMP&lt;/code&gt; &lt;br&gt; &lt;code&gt;copy C:\Windows\NTDS\TEMP\ntds.dit C:\Windows\NTDS\ntds.dit&lt;/code&gt; заменить оригинальный файл ntds.dit &lt;br&gt; &lt;code&gt;Del C:\Windows\NTDS\*.log&lt;/code&gt; удалить все лог файлы из каталога NTDS&lt;/p&gt; &#xA;&lt;h1&gt;GPO&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command -Module GroupPolicy&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-GPO -Domain domain.local -All | ft&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-GPO -Name LAPS&lt;/code&gt; &lt;br&gt; &lt;code&gt;[xml](Get-GPOReport LAPS -ReportType Xml)&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-GPPermission -Name LAPS -All&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-GPO LAPS | New-GPLink -Target &#34;ou=servers,dc=domain,dc=local&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-GPLink -Name LAPS -Target &#34;ou=servers,dc=domain,dc=local&#34; -LinkEnabled No&lt;/code&gt; &lt;br&gt; &lt;code&gt;Backup-GPO -Name LAPS -Path &#34;$home\Desktop&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Backup-GPO -All -Path &#34;$home\Desktop&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Restore-GPO -Name LAPS -Path C:\Backup\GPOs\&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ServerManager&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command *WindowsFeature*&lt;/code&gt; source module ServerManager &lt;br&gt; &lt;code&gt;Get-WindowsFeature -ComputerName &#34;localhost&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-WindowsFeature | where Installed -eq $True&lt;/code&gt; список установленных ролей и компонентов &lt;br&gt; &lt;code&gt;Get-WindowsFeature | where FeatureType -eq &#34;Role&#34;&lt;/code&gt; отсортировать по списку ролей &lt;br&gt; &lt;code&gt;Install-WindowsFeature -Name DNS&lt;/code&gt; установить роль &lt;br&gt; &lt;code&gt;Get-Command *DNS*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-DnsServerSetting -ALL&lt;/code&gt; &lt;br&gt; &lt;code&gt;Uninstall-WindowsFeature -Name DNS&lt;/code&gt; удалить роль&lt;/p&gt; &#xA;&lt;h3&gt;PSWA&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-WindowsFeature -Name WindowsPowerShellWebAccess -IncludeManagementTools&lt;/code&gt; &lt;br&gt; &lt;code&gt;Install-PswaWebApplication -UseTestCertificate&lt;/code&gt; Создать веб-приложение /pswa &lt;br&gt; &lt;code&gt;Add-PswaAuthorizationRule -UserGroupName &#34;$domain\Domain Admins&#34; -ComputerName * -ConfigurationName * -RuleName &#34;For Admins&#34;&lt;/code&gt; добавить права авторизации&lt;/p&gt; &#xA;&lt;h3&gt;WSB (Windows Server Backup)&lt;/h3&gt; &#xA;&lt;p&gt;При создании backup DC через WSB, создается копия состояния системы (System State), куда попадает база AD (NTDS.DIT), объекты групповых политик, содержимое каталога SYSVOL, реестр, метаданные IIS, база AD CS, и другие системные файлы и ресурсы. Резервная копия создается через службу теневого копирования VSS. &lt;br&gt; &lt;code&gt;Get-WindowsFeature Windows-Server-Backup&lt;/code&gt; проверить установлена ли роль &lt;br&gt; &lt;code&gt;Add-Windowsfeature Windows-Server-Backup –Includeallsubfeature&lt;/code&gt; установить роль&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$path=&#34;\\$srv\bak-dc\dc-03\&#34;&#xA;[string]$TargetUNC=$path+(get-date -f &#39;yyyy-MM-dd&#39;)&#xA;if ((Test-Path -Path $path) -eq $true) {New-Item -Path $TargetUNC -ItemType directory} # если путь доступен, создать новую директорию по дате&#xA;$WBadmin_cmd = &#34;wbadmin.exe START BACKUP -backupTarget:$TargetUNC -systemState -noverify -vssCopy -quiet&#34;&#xA;# $WBadmin_cmd = &#34;wbadmin start backup -backuptarget:$path -include:C:\Windows\NTDS\ntds.dit -quiet&#34; # Backup DB NTDS&#xA;Invoke-Expression $WBadmin_cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RDS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command -Module RemoteDesktop&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-RDServer -ConnectionBroker $broker&lt;/code&gt; список всех серверов в фермеы, указывается полное доменное имя при обращение к серверу с ролью RDCB &lt;br&gt; &lt;code&gt;Get-RDRemoteDesktop -ConnectionBroker $broker&lt;/code&gt; список коллекций &lt;br&gt; &lt;code&gt;(Get-RDLicenseConfiguration -ConnectionBroker $broker | select *).LicenseServer&lt;/code&gt; список серверов с ролью RDL &lt;br&gt; &lt;code&gt;Get-RDUserSession -ConnectionBroker $broker&lt;/code&gt; список всех активных пользователей &lt;br&gt; &lt;code&gt;Disconnect-RDUser -HostServer $srv -UnifiedSessionID $id -Force&lt;/code&gt; отключить сессию пользователя &lt;br&gt; &lt;code&gt;Get-RDAvailableApp -ConnectionBroker $broker -CollectionName C03&lt;/code&gt; список установленного ПО на серверах в коллекции &lt;br&gt; &lt;code&gt;(Get-RDSessionCollectionConfiguration -ConnectionBroker $broker -CollectionName C03 | select *).CustomRdpProperty&lt;/code&gt; use redirection server name:i:1 &lt;br&gt; &lt;code&gt;Get-RDConnectionBrokerHighAvailability&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;DNSServer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command -Module DnsServer&lt;/code&gt; &lt;br&gt; &lt;code&gt;Show-DnsServerCache&lt;/code&gt; отобразить весь кэш DNS-сервера &lt;br&gt; &lt;code&gt;Show-DnsServerCache | where HostName -match ru&lt;/code&gt; &lt;br&gt; &lt;code&gt;Clear-DnsServerCache&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-DnsServerCache&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-DnsServerDiagnostics&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$zone = icm $srv {Get-DnsServerZone} | select ZoneName,ZoneType,DynamicUpdate,ReplicationScope,SecureSecondaries,&#xA;DirectoryPartitionName | Out-GridView -Title &#34;DNS Server: $srv&#34; –PassThru&#xA;$zone_name = $zone.ZoneName&#xA;if ($zone_name -ne $null) {&#xA;icm $srv {Get-DnsServerResourceRecord -ZoneName $using:zone_name | sort RecordType | select RecordType,HostName, @{&#xA;Label=&#34;IPAddress&#34;; Expression={$_.RecordData.IPv4Address.IPAddressToString}},TimeToLive,Timestamp&#xA;} | select RecordType,HostName,IPAddress,TimeToLive,Timestamp | Out-GridView -Title &#34;DNS Server: $srv&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Sync-DnsServerZone –passthru&lt;/code&gt; синхронизировать зоны с другими DC в домене &lt;br&gt; &lt;code&gt;Remove-DnsServerZone -Name domain.local&lt;/code&gt; удалить зону &lt;br&gt; &lt;code&gt;Get-DnsServerResourceRecord -ZoneName domain.local -RRType A&lt;/code&gt; вывести все А-записи в указанной зоне &lt;br&gt; &lt;code&gt;Add-DnsServerResourceRecordA -Name new-host-name -IPv4Address 192.168.1.100 -ZoneName domain.local -TimeToLive 01:00:00 -CreatePtr&lt;/code&gt; создать А-запись и PTR для нее &lt;br&gt; &lt;code&gt;Remove-DnsServerResourceRecord -ZoneName domain.local -RRType A -Name new-host-name –Force&lt;/code&gt; удалить А-запись&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$DNSServer = &#34;DC-01&#34;&#xA;$DNSFZone = &#34;domain.com&#34;&#xA;$DataFile = &#34;C:\Scripts\DNS-Create-A-Records-from-File.csv&#34;&#xA;# cat $DataFile&#xA;# &#34;HostName;IP&#34;&#xA;# &#34;server-01;192.168.1.10&#34;&#xA;$DNSRR = [WmiClass]&#34;\\$DNSServer\root\MicrosoftDNS:MicrosoftDNS_ResourceRecord&#34;&#xA;$ConvFile = $DataFile + &#34;_unicode&#34;&#xA;Get-Content $DataFile | Set-Content $ConvFile -Encoding Unicode&#xA;Import-CSV $ConvFile -Delimiter &#34;;&#34; | ForEach-Object {&#xA;$FQDN = $_.HostName + &#34;.&#34; + $DNSFZone&#xA;$IP = $_.HostIP&#xA;$TextA = &#34;$FQDN IN A $IP&#34;&#xA;[Void]$DNSRR.CreateInstanceFromTextRepresentation($DNSServer,$DNSFZone,$TextA)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DHCPServer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command -Module DhcpServer&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$mac = icm $srv -ScriptBlock {Get-DhcpServerv4Scope | Get-DhcpServerv4Lease} | select AddressState,&#xA;HostName,IPAddress,ClientId,DnsRegistration,DnsRR,ScopeId,ServerIP | Out-GridView -Title &#34;HDCP Server: $srv&#34; –PassThru&#xA;(New-Object -ComObject Wscript.Shell).Popup($mac.ClientId,0,$mac.HostName,64)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Add-DhcpServerv4Reservation -ScopeId 192.168.1.0 -IPAddress 192.168.1.10 -ClientId 00-50-56-C0-00-08 -Description &#34;new reservation&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;DFS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;dfsutil /root:\\domain.sys\public /export:C:\export-dfs.txt&lt;/code&gt; экспорт конфигурации namespace root &lt;br&gt; &lt;code&gt;dfsutil /AddFtRoot /Server:\\$srv /Share:public&lt;/code&gt; на новой машине предварительно создать корень на основе домена &lt;br&gt; &lt;code&gt;dfsutil /root:\\domain.sys\public /import:C:\export-dfs.txt /&amp;lt;verify /set&lt;/code&gt; Import (перед импортом данных в существующий корень DFS, утилита создает резервную копию конфигурации корня в текущем каталоге, из которого запускается утилита dfsutil) &lt;br&gt; &lt;code&gt;/verify&lt;/code&gt; выводит изменения, которые будут внесены в процессе импорта, без применения &lt;br&gt; &lt;code&gt;/set&lt;/code&gt; меняет целевое пространство имен путем полной перезаписи и замены на конфигурацию пространства имен из импортируемого файла &lt;br&gt; &lt;code&gt;/merge&lt;/code&gt; импортирует конфигурацию пространства имен в дополнение к существующей конфигурации для слияния, параметры из файла конфигурации будут иметь больший приоритет, чем существующие параметры пространства имен&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Export-DfsrClone&lt;/code&gt; экспортирует клонированную базу данных репликации DFS и параметры конфигурации тома &lt;br&gt; &lt;code&gt;Get-DfsrCloneState&lt;/code&gt; получает состояние операции клонирования базы данных &lt;br&gt; &lt;code&gt;Import-DfsrClone&lt;/code&gt; импортирует клонированную базу данных репликации DFS и параметры конфигурации тома&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;net use x: \\$srv1\public\*&lt;/code&gt; примонтировать диск &lt;br&gt; &lt;code&gt;Get-DfsrFileHash x:\* | Out-File C:\$srv1.txt&lt;/code&gt; забрать hash всех файлов диска в файл (файлы с одинаковыми хешами всегда являются точными копиями друг друга) &lt;br&gt; &lt;code&gt;net use x: /d&lt;/code&gt; отмонтировать &lt;br&gt; &lt;code&gt;net use x: \\$srv2\public\*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-DfsrFileHash x:\* | Out-File C:\$srv2.txt&lt;/code&gt; &lt;br&gt; &lt;code&gt;net use x: /d&lt;/code&gt; &lt;br&gt; &lt;code&gt;Compare-Object -ReferenceObject (Get-Content C:\$srv1.txt) -DifferenceObject (Get-Content C:\$srv2.txt) -IncludeEqual&lt;/code&gt; сравнить содержимое файлов&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-DfsrBacklog -DestinationComputerName &#34;fs-06&#34; -SourceComputerName &#34;fs-05&#34; -GroupName &#34;folder-rep&#34; -FolderName &#34;folder&#34; -Verbose&lt;/code&gt; получает список ожидающих обновлений файлов между двумя партнерами репликации DFS &lt;br&gt; &lt;code&gt;Get-DfsrConnection&lt;/code&gt; отображает группы репликации, участников и статус &lt;br&gt; &lt;code&gt;Get-DfsReplicatedFolder&lt;/code&gt; отображает имя и полный путь к папкам реликации в системе DFS &lt;br&gt; &lt;code&gt;Get-DfsrState -ComputerName fs-06 -Verbose&lt;/code&gt; состояние репликации DFS для члена группы &lt;br&gt; &lt;code&gt;Get-DfsReplicationGroup&lt;/code&gt; отображает группы репликации и их статус &lt;br&gt; &lt;code&gt;Add-DfsrConnection&lt;/code&gt; создает соединение между членами группы репликации &lt;br&gt; &lt;code&gt;Add-DfsrMember&lt;/code&gt; добавляет компьютеры в группу репликации &lt;br&gt; &lt;code&gt;ConvertFrom-DfsrGuid&lt;/code&gt; преобразует идентификаторы GUID в понятные имена в заданной группы репликации &lt;br&gt; &lt;code&gt;Get-DfsrConnectionSchedule&lt;/code&gt; получает расписание соединений между членами группы репликации &lt;br&gt; &lt;code&gt;Get-DfsrGroupSchedule&lt;/code&gt; извлекает расписание группы репликации &lt;br&gt; &lt;code&gt;Get-DfsrIdRecord&lt;/code&gt; получает записи ID для реплицированных файлов или папок из базы данных репликации DFS &lt;br&gt; &lt;code&gt;Get-DfsrMember&lt;/code&gt; получает компьютеры в группе репликации &lt;br&gt; &lt;code&gt;Get-DfsrMembership&lt;/code&gt; получает параметры членства для членов групп репликации &lt;br&gt; &lt;code&gt;Get-DfsrPreservedFiles&lt;/code&gt; получает список файлов и папок, ранее сохраненных репликацией DFS &lt;br&gt; &lt;code&gt;Get-DfsrServiceConfiguration&lt;/code&gt; получает параметры службы репликации DFS для членов группы &lt;br&gt; &lt;code&gt;Grant-DfsrDelegation&lt;/code&gt; предоставляет разрешения участникам безопасности для группы репликации &lt;br&gt; &lt;code&gt;Revoke-DfsrDelegation&lt;/code&gt; отменяет разрешения участников безопасности для группы репликации &lt;br&gt; &lt;code&gt;New-DfsReplicationGroup&lt;/code&gt; создает группу репликации &lt;br&gt; &lt;code&gt;New-DfsReplicatedFolder&lt;/code&gt; создает реплицированную папку в группе репликации &lt;br&gt; &lt;code&gt;Remove-DfsrConnection&lt;/code&gt; удаляет соединение между членами группы репликации &lt;br&gt; &lt;code&gt;Remove-DfsReplicatedFolder&lt;/code&gt; удаляет реплицированную папку из группы репликации &lt;br&gt; &lt;code&gt;Remove-DfsReplicationGroup&lt;/code&gt; удаляет группу репликации &lt;br&gt; &lt;code&gt;Remove-DfsrMember&lt;/code&gt; удаляет компьютеры из группы репликации &lt;br&gt; &lt;code&gt;Restore-DfsrPreservedFiles&lt;/code&gt; восстанавливает файлы и папки, ранее сохраненные репликацией DFS &lt;br&gt; &lt;code&gt;Set-DfsrConnection&lt;/code&gt; изменяет параметры соединения между членами группы репликации &lt;br&gt; &lt;code&gt;Set-DfsrConnectionSchedule&lt;/code&gt; изменяет параметры расписания соединений между членами группы репликации &lt;br&gt; &lt;code&gt;Set-DfsReplicatedFolder&lt;/code&gt; изменяет настройки реплицированной папки &lt;br&gt; &lt;code&gt;Set-DfsReplicationGroup&lt;/code&gt; изменяет группу репликации &lt;br&gt; &lt;code&gt;Set-DfsrGroupSchedule&lt;/code&gt; изменяет расписание группы репликации &lt;br&gt; &lt;code&gt;Set-DfsrMember&lt;/code&gt; изменяет информацию о компьютере-участнике в группе репликации &lt;br&gt; &lt;code&gt;Set-DfsrMembership&lt;/code&gt; настраивает параметры членства для членов группы репликации &lt;br&gt; &lt;code&gt;Set-DfsrServiceConfiguration&lt;/code&gt; изменяет параметры службы репликации DFS &lt;br&gt; &lt;code&gt;Sync-DfsReplicationGroup&lt;/code&gt; синхронизирует репликацию между компьютерами независимо от расписания &lt;br&gt; &lt;code&gt;Suspend-DfsReplicationGroup&lt;/code&gt; приостанавливает репликацию между компьютерами независимо от расписания &lt;br&gt; &lt;code&gt;Update-DfsrConfigurationFromAD&lt;/code&gt; инициирует обновление службы репликации DFS &lt;br&gt; &lt;code&gt;Write-DfsrHealthReport&lt;/code&gt; создает отчет о работоспособности репликации DFS &lt;br&gt; &lt;code&gt;Write-DfsrPropagationReport&lt;/code&gt; создает отчеты для тестовых файлов распространения в группе репликации &lt;br&gt; &lt;code&gt;Start-DfsrPropagationTest&lt;/code&gt; создает тестовый файл распространения в реплицированной папке&lt;/p&gt; &#xA;&lt;h1&gt;StorageReplica&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-WindowsFeature Storage-Replica –IncludeManagementTools -Restart&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Command -Module StorageReplica&lt;/code&gt; &lt;br&gt; &lt;code&gt;Test-SRTopology&lt;/code&gt; проверить соответствует ли сервер и канал связи технологии Storage Replica &lt;br&gt; &lt;code&gt;New-SRPartnership -SourceComputerName srv-01 -SourceRGName srv-01-rep-group-01 -SourceVolumeName D: -SourceLogVolumeName L: -DestinationComputerName srv-02 -DestinationRGName srv-02-rep-group-01 -DestinationVolumeName D: -DestinationLogVolumeName L: -LogSizeInBytes 1GB&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Counter -Counter &#34;\Storage Replica Statistics(*)&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-WinEvent -ProviderName Microsoft-Windows-StorageReplica -max 10&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-SRPartnership -ReplicationMode Asynchronous&lt;/code&gt; переключить режим репликации на асинхронный &lt;br&gt; &lt;code&gt;Set-SRPartnership -NewSourceComputerName srv-02 -SourceRGName srv-02-rep-group-01 -DestinationComputerName srv-01 -DestinationRGName srv-01-rep-group-01&lt;/code&gt; изменить вручную направление репликации данных, переведя вторичную копию в онлайн режим (при выходе из строя основного сервера) &lt;br&gt; &lt;code&gt;Get-SRGroup&lt;/code&gt; информация о состояние группы реплизации &lt;br&gt; &lt;code&gt;Get-SRPartnerShip&lt;/code&gt; информация о направлении репликации &lt;br&gt; &lt;code&gt;(Get-SRGroup).Replicas | Select-Object numofbytesremaining&lt;/code&gt; проверить длину очереди копирования &lt;br&gt; &lt;code&gt;Get-SRPartnership | Remove-SRPartnership&lt;/code&gt; удалить реплизацию на основном сервере &lt;br&gt; &lt;code&gt;Get-SRGroup | Remove-SRGroup&lt;/code&gt; удалить реплизацию на обоих серверах&lt;/p&gt; &#xA;&lt;h1&gt;Package-Manager&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Import-Module PackageManagement&lt;/code&gt; импортировать модуль &lt;br&gt; &lt;code&gt;Get-Module PackageManagement&lt;/code&gt; информация о модуле &lt;br&gt; &lt;code&gt;Get-Command -Module PackageManagement&lt;/code&gt; отобразить все командлеты модуля &lt;br&gt; &lt;code&gt;Get-Package&lt;/code&gt; отобразить все установленные пакеты PowerShellGallery &lt;br&gt; &lt;code&gt;Get-Package -ProviderName msi,Programs&lt;/code&gt; список установленных программ &lt;code&gt;[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12&lt;/code&gt; включить использование протокол TLS 1.2 (если не отключены протоколы TLS 1.0 и 1.1) &lt;br&gt; &lt;code&gt;Find-PackageProvider&lt;/code&gt; поиск провайдеров &lt;br&gt; &lt;code&gt;Install-PackageProvider PSGallery -force&lt;/code&gt; установить источник &lt;br&gt; &lt;code&gt;Install-PackageProvider NuGet -force&lt;/code&gt; &lt;br&gt; &lt;code&gt;Install-PackageProvider Chocolatey -force&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-PackageSource&lt;/code&gt; источники установки пакетов &lt;br&gt; &lt;code&gt;Set-PackageSource -Name PSGallery -Trusted&lt;/code&gt; по умолчанию &lt;br&gt; &lt;code&gt;Find-Package -Name *Veeam* -Source PSGallery&lt;/code&gt; поиск пакетов с указанием источника &lt;br&gt; &lt;code&gt;Install-Package -Name VeeamLogParser -ProviderName PSGallery -scope CurrentUser&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Command *Veeam*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Import-Module -Name VeeamLogParser&lt;/code&gt; загрузить модуль &lt;br&gt; &lt;code&gt;Get-Module VeeamLogParser | select -ExpandProperty ExportedCommands&lt;/code&gt; отобразить список функций&lt;/p&gt; &#xA;&lt;h3&gt;winget&lt;/h3&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://github.com/microsoft/winget-cli&#34;&gt;https://github.com/microsoft/winget-cli&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;winget list&lt;/code&gt; список установленных пакетов &lt;br&gt; &lt;code&gt;winget search VLC&lt;/code&gt; найти пакет &lt;br&gt; &lt;code&gt;winget show VideoLAN.VLC&lt;/code&gt; информация о пакете &lt;br&gt; &lt;code&gt;winget show VideoLAN.VLC --versions&lt;/code&gt; список доступных версий в репозитории &lt;br&gt; &lt;code&gt;winget install VideoLAN.VLC&lt;/code&gt; установить пакет &lt;br&gt; &lt;code&gt;winget uninstall VideoLAN.VLC&lt;/code&gt; удалить пакет &lt;br&gt; &lt;code&gt;winget download jqlang.jq&lt;/code&gt; загрузкить пакет (&lt;a href=&#34;https://github.com/jqlang/jq/releases/download/jq-1.7/jq-windows-amd64.exe&#34;&gt;https://github.com/jqlang/jq/releases/download/jq-1.7/jq-windows-amd64.exe&lt;/a&gt;) &lt;br&gt; &lt;code&gt;winget install jqlang.jq&lt;/code&gt; добавляет в переменную среду и псевдоним командной строки jq &lt;br&gt; &lt;code&gt;winget uninstall jqlang.jq&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;jqlang-install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;[uri]$url = $($(irm https://api.github.com/repos/jqlang/jq/releases/latest).assets.browser_download_url -match &#34;windows-amd64&#34;).ToString() # получить версию latest на GitHub&#xA;irm $url -OutFile &#34;C:\Windows\System32\jq.exe&#34; # загрузить jq.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NuGet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Invoke-RestMethod https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile &#34;$env:TEMP\nuget.exe&#34;&#xA;Invoke-Expression &#34;$env:TEMP/nuget.exe search Selenium.WebDriver&#34;&#xA;Set-Location $env:TEMP&#xA;Invoke-Expression &#34;$env:TEMP/nuget.exe install Selenium.WebDriver&#34;&#xA;Get-Item *Selenium*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chocolatey&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;choco -v&lt;/code&gt; &lt;br&gt; &lt;code&gt;choco -help&lt;/code&gt; &lt;br&gt; &lt;code&gt;choco list&lt;/code&gt; &lt;br&gt; &lt;code&gt;choco install adobereader&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Scoop&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Set-ExecutionPolicy RemoteSigned -Scope CurrentUser&lt;/code&gt; &lt;br&gt; &lt;code&gt;irm get.scoop.sh | iex&lt;/code&gt; установка &lt;br&gt; &lt;code&gt;scoop help&lt;/code&gt; &lt;br&gt; &lt;code&gt;scoop search jq&lt;/code&gt; &lt;br&gt; &lt;code&gt;scoop info jq&lt;/code&gt; &lt;br&gt; &lt;code&gt;(scoop info jq).version&lt;/code&gt; &lt;br&gt; &lt;code&gt;scoop cat jq&lt;/code&gt; &lt;br&gt; &lt;code&gt;scoop download jq&lt;/code&gt; C:\Users\lifailon\scoop\cache &lt;br&gt; &lt;code&gt;scoop install jq&lt;/code&gt; C:\Users\lifailon\scoop\apps\jq\1.7 &lt;br&gt; &lt;code&gt;scoop list&lt;/code&gt; &lt;br&gt; &lt;code&gt;(scoop list).version&lt;/code&gt; &lt;br&gt; &lt;code&gt;scoop uninstall jq&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PS2EXE&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Module ps2exe -Repository PSGallery&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Module -ListAvailable&lt;/code&gt; список всех модулей &lt;br&gt; &lt;code&gt;-noConsole&lt;/code&gt; использовать GUI, без окна консоли powershell &lt;br&gt; &lt;code&gt;-noOutput&lt;/code&gt; выполнение в фоне &lt;br&gt; &lt;code&gt;-noError&lt;/code&gt; без вывода ошибок &lt;br&gt; &lt;code&gt;-requireAdmin&lt;/code&gt; при запуске запросить права администратора &lt;br&gt; &lt;code&gt;-credentialGUI&lt;/code&gt; вывод диалогового окна для ввода учетных данных &lt;br&gt; &lt;code&gt;Invoke-ps2exe -inputFile &#34;$home\Desktop\WinEvent-Viewer-1.1.ps1&#34; -outputFile &#34;$home\Desktop\WEV-1.1.exe&#34; -iconFile &#34;$home\Desktop\log_48px.ico&#34; -title &#34;WinEvent-Viewer&#34; -noConsole -noOutput -noError&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NSSM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;$powershell_Path = (Get-Command powershell).Source&lt;/code&gt; &lt;br&gt; &lt;code&gt;$NSSM_Path = (Get-Command &#34;C:\WinPerf-Agent\NSSM-2.24.exe&#34;).Source&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Script_Path = &#34;C:\WinPerf-Agent\WinPerf-Agent-1.1.ps1&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Service_Name = &#34;WinPerf-Agent&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;&amp;amp; $NSSM_Path install $Service_Name $powershell_Path -ExecutionPolicy Bypass -NoProfile -f $Script_Path&lt;/code&gt; создать Service &lt;br&gt; &lt;code&gt;&amp;amp; $NSSM_Path start $Service_Name&lt;/code&gt; запустить &lt;br&gt; &lt;code&gt;&amp;amp; $NSSM_Path status $Service_Name&lt;/code&gt; статус &lt;br&gt; &lt;code&gt;$Service_Name | Restart-Service&lt;/code&gt; перезапустить &lt;br&gt; &lt;code&gt;$Service_Name | Get-Service&lt;/code&gt; статус &lt;br&gt; &lt;code&gt;$Service_Name | Stop-Service&lt;/code&gt; остановить &lt;br&gt; &lt;code&gt;&amp;amp; $NSSM_Path set $Service_Name description &#34;Check performance CPU and report email&#34;&lt;/code&gt; изменить описание &lt;br&gt; &lt;code&gt;&amp;amp; $NSSM_Path remove $Service_Name&lt;/code&gt; удалить&lt;/p&gt; &#xA;&lt;h1&gt;Jobs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Job&lt;/code&gt; получение списка задач &lt;br&gt; &lt;code&gt;Start-Job&lt;/code&gt; запуск процесса &lt;br&gt; &lt;code&gt;Stop-Job&lt;/code&gt; остановка процесса &lt;br&gt; &lt;code&gt;Suspend-Job&lt;/code&gt; приостановка работы процесса &lt;br&gt; &lt;code&gt;Resume-Job&lt;/code&gt; восстановление работы процесса &lt;br&gt; &lt;code&gt;Wait-Job&lt;/code&gt; ожидание вывода команды &lt;br&gt; &lt;code&gt;Receive-Job&lt;/code&gt; получение результатов выполненного процесса &lt;br&gt; &lt;code&gt;Remove-Job&lt;/code&gt; удалить задачу&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Start-PingJob ($Network) {&#xA;$RNetwork = $Network -replace &#34;\.\d{1,3}$&#34;,&#34;.&#34;&#xA;foreach ($4 in 1..254) {&#xA;$ip = $RNetwork+$4&#xA;# создаем задания, забираем 3-ю строку вывода и добавляем к выводу ip-адрес:&#xA;(Start-Job {&#34;$using:ip : &#34;+(ping -n 1 -w 50 $using:ip)[2]}) | Out-Null&#xA;}&#xA;while ($True){&#xA;$status_job = (Get-Job).State[-1] # забираем статус последнего задания&#xA;if ($status_job -like &#34;Completed&#34;){ # проверяем на выполнение (задания выполняются по очереди сверху вниз)&#xA;$ping_out = Get-Job | Receive-Job # если выполнен, забираем вывод всех заданий&#xA;Get-Job | Remove-Job -Force # удаляем задания&#xA;$ping_out&#xA;break # завершаем цикл&#xA;}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Start-PingJob -Network 192.168.3.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;(Measure-Command {Start-PingJob -Network 192.168.3.0}).TotalSeconds&lt;/code&gt; 60 Seconds&lt;/p&gt; &#xA;&lt;h3&gt;ThreadJob&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Module -Name ThreadJob&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Module ThreadJob -list&lt;/code&gt; &lt;br&gt; &lt;code&gt;Start-ThreadJob {ping ya.ru} | Out-Null&lt;/code&gt; создать фоновую задачу &lt;br&gt; &lt;code&gt;Get-Job | Receive-Job -Keep&lt;/code&gt; отобразить и не удалять вывод &lt;br&gt; &lt;code&gt;(Get-Job).HasMoreData&lt;/code&gt; если False, то вывод команы удален &lt;br&gt; &lt;code&gt;(Get-Job)[-1].Output&lt;/code&gt; отобразить вывод последней задачи&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Start-PingThread ($Network) {&#xA;$RNetwork = $Network -replace &#34;\.\d{1,3}$&#34;,&#34;.&#34;&#xA;foreach ($4 in 1..254) {&#xA;$ip = $RNetwork+$4&#xA;# создаем задания, забираем 3-ю строку вывода и добавляем к выводу ip-адрес:&#xA;(Start-ThreadJob {&#34;$using:ip : &#34;+(ping -n 1 -w 50 $using:ip)[2]}) | Out-Null&#xA;}&#xA;while ($True){&#xA;$status_job = (Get-Job).State[-1] # забираем статус последнего задания&#xA;if ($status_job -like &#34;Completed&#34;){ # проверяем на выполнение (задания выполняются по очереди сверху вниз)&#xA;$ping_out = Get-Job | Receive-Job # если выполнен, забираем вывод всех заданий&#xA;Get-Job | Remove-Job -Force # удаляем задания&#xA;$ping_out&#xA;break # завершаем цикл&#xA;}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Start-PingThread -Network 192.168.3.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;(Measure-Command {Start-PingThread -Network 192.168.3.0}).TotalSeconds&lt;/code&gt; 24 Seconds&lt;/p&gt; &#xA;&lt;h3&gt;PoshRSJob&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Start-PingRSJob ($Network) {&#xA;$RNetwork = $Network -replace &#34;\.\d{1,3}$&#34;,&#34;.&#34;&#xA;foreach ($4 in 1..254) {&#xA;$ip = $RNetwork+$4&#xA;(Start-RSJob {&#34;$using:ip : &#34;+(ping -n 1 -w 50 $using:ip)[2]}) | Out-Null&#xA;}&#xA;$ping_out = Get-RSJob | Receive-RSJob&#xA;$ping_out&#xA;Get-RSJob | Remove-RSJob&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Start-PingRSJob -Network 192.168.3.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;(Measure-Command {Start-PingRSJob -Network 192.168.3.0}).TotalSeconds&lt;/code&gt; 10 Seconds&lt;/p&gt; &#xA;&lt;h1&gt;SMTP&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Send-SMTP {&#xA;param (&#xA;[Parameter(Mandatory = $True)]$mess&#xA;)&#xA;$srv_smtp = &#34;smtp.yandex.ru&#34; &#xA;$port = &#34;587&#34;&#xA;$from = &#34;login1@yandex.ru&#34; &#xA;$to = &#34;login2@yandex.ru&#34; &#xA;$user = &#34;login1&#34;&#xA;$pass = &#34;password&#34;&#xA;$subject = &#34;Service status on Host: $hostname&#34;&#xA;$Message = New-Object System.Net.Mail.MailMessage&#xA;$Message.From = $from&#xA;$Message.To.Add($to) &#xA;$Message.Subject = $subject &#xA;$Message.IsBodyHTML = $true &#xA;$Message.Body = &#34;&amp;lt;h1&amp;gt; $mess &amp;lt;/h1&amp;gt;&#34;&#xA;$smtp = New-Object Net.Mail.SmtpClient($srv_smtp, $port)&#xA;$smtp.EnableSSL = $true &#xA;$smtp.Credentials = New-Object System.Net.NetworkCredential($user, $pass);&#xA;$smtp.Send($Message) &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Send-SMTP $(Get-Service)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Hyper-V&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-WindowsFeature -Name Hyper-V -IncludeManagementTools -Restart&lt;/code&gt; установить роль на Windows Server &lt;br&gt; &lt;code&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V –All&lt;/code&gt; установить роль на Windows Desktop &lt;br&gt; &lt;code&gt;Get-Command -Module hyper-v&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VMHost&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;New-VMSwitch -name NAT -SwitchType Internal # создать виртуальный коммутатор и адаптер для него&#xA;Get-NetAdapter | where InterfaceDescription -match Hyper-V # список сетевых адаптеров&#xA;New-NetNat -Name LocalNat -InternalIPInterfaceAddressPrefix &#34;192.168.3.0/24&#34; # задать сеть&#xA;Get-NetAdapter &#34;vEthernet (NAT)&#34; | New-NetIPAddress -IPAddress 192.168.3.200 -AddressFamily IPv4 -PrefixLength 24 # присвоить адрес, необходимо на ВМ указать шлюз 192.168.3.200, что бы находиться за NAT, или в настройка ВМ указать соответствующий адаптер&#xA;Add-NetNatStaticMapping -NatName LocalNat -Protocol TCP -ExternalIPAddress 0.0.0.0 -ExternalPort 2222 -InternalIPAddress 192.168.3.103 -InternalPort 2121 # проброс, вест трафик который приходит на хост Hyper-V TCP/2222, будет перенаправляться на соответствующий порт виртуальной машины за NAT.&#xA;(Get-NetAdapter | where Name -match NAT).Status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-NetNatStaticMapping&lt;/code&gt; отобразить пробросы (NAT) &lt;br&gt; &lt;code&gt;Get-NetNat&lt;/code&gt; список сетей &lt;br&gt; &lt;code&gt;Remove-NetNatStaticMapping -StaticMappingID 0&lt;/code&gt; удалить проброс &lt;br&gt; &lt;code&gt;Remove-NetNat -Name LocalNat&lt;/code&gt; удалить сеть&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;New-VMSwitch -Name Local -AllowManagementOS $True -NetAdapterName &#34;Ethernet 4&#34; -SwitchType External&lt;/code&gt; создать вшений (External) виртуальный коммутатор &lt;br&gt; &lt;code&gt;$VMName = &#34;hv-dc-01&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$VM = @{&#xA;Name = $VMName&#xA;MemoryStartupBytes = 4Gb&#xA;Generation = 2&#xA;NewVHDPath = &#34;D:\VM\$VMName\$VMName.vhdx&#34;&#xA;NewVHDSizeBytes = 50Gb&#xA;BootDevice = &#34;VHD&#34;&#xA;Path = &#34;D:\VM\$VMName&#34;&#xA;SwitchName = &#34;NAT&#34;&#xA;}&#xA;New-VM @VM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Set-VMDvdDrive -VMName $VMName -Path &#34;C:\Users\Lifailon\Documents\WS-2016.iso&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;New-VHD -Path &#34;D:\VM\$VMName\disk_d.vhdx&#34; -SizeBytes 10GB&lt;/code&gt; создать VHDX диск &lt;br&gt; &lt;code&gt;Add-VMHardDiskDrive -VMName $VMName -Path &#34;D:\VM\$VMName\disk_d.vhdx&#34;&lt;/code&gt; примонтировать диск &lt;br&gt; &lt;code&gt;Get-VM –VMname $VMName | Set-VM –AutomaticStartAction Start&lt;/code&gt; автозапуск &lt;br&gt; &lt;code&gt;Get-VM -Name $VMName | Set-VMMemory -StartupBytes 8Gb&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-VMProcessor $VMName -Count 2&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VM -Name $VMName | Checkpoint-VM -SnapshotName &#34;Snapshot-1&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Restore-VMCheckpoint -Name Snapshot-1&#34; -VMName $VMName -Confirm:$false&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VM | Select -ExpandProperty NetworkAdapters | Select VMName,IPAddresses,Status&lt;/code&gt; получить IP адрес всех ВМ &lt;br&gt; &lt;code&gt;vmconnect.exe localhost $VMHost&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-NetTCPConnection -State Established,Listen | Where-Object LocalPort -Match 2179&lt;/code&gt; найти порт слушателя &lt;code&gt;Get-Process -Id (Get-NetTCPConnection -State Established,Listen | Where-Object LocalPort -Match 2179).OwningProcess&lt;/code&gt; найти процесс по ID (vmms/VMConnect) &lt;br&gt; &lt;code&gt;New-NetFirewallRule -Name &#34;Hyper-V&#34; -DisplayName &#34;Hyper-V&#34; -Group &#34;Hyper-V&#34; -Direction Inbound -Protocol TCP -LocalPort 2179 -Action Allow -Profile Public&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-LocalGroupMember -Group &#34;Администраторы Hyper-V&#34;&lt;/code&gt; или &#34;Hyper-V Administrators&#34; &lt;br&gt; &lt;code&gt;Add-LocalGroupMember -Group &#34;Администраторы Hyper-V&#34; -Member &#34;lifailon&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VM * | select name,ID&lt;/code&gt; добавить id в RDCMan для подключения &lt;br&gt; &lt;code&gt;Grant-VMConnectAccess -ComputerName plex-01 -VMName hv-devops-01 -UserName lifailon&lt;/code&gt; дать доступ на подключение не администратору &lt;br&gt; &lt;code&gt;Grant-VMConnectAccess -ComputerName huawei-book -VMName hv-devops-01 -UserName lifailon&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VMConnectAccess&lt;/code&gt; &lt;br&gt; &lt;code&gt;Revoke-VMConnectAccess -VMName hv-devops-01 -UserName lifailon&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Error: &lt;code&gt;Unknown disconnection reason 3848&lt;/code&gt; - добавить ключи реестра на стороне клиента&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Credssp\PolicyDefaults\AllowFreshCredentialsDomain -Name Hyper-V -PropertyType String -Value &#34;Microsoft Virtual Console Service/*&#34; -Force&#xA;New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Credssp\PolicyDefaults\AllowDefaultCredentials -Name Hyper-V -PropertyType String -Value &#34;Microsoft Virtual Console Service/*&#34; -Force&#xA;New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Credssp\PolicyDefaults\AllowFreshCredentialsWhenNTLMOnlyDomain -Name Hyper-V -PropertyType String -Value &#34;Microsoft Virtual Console Service/*&#34; -Force&#xA;ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Credssp\PolicyDefaults\AllowDefaultCredentialsDomain -Name Hyper-V -PropertyType String -Value &#34;Microsoft Virtual Console Service/*&#34; -Force&#xA;New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Credssp\PolicyDefaults\AllowFreshCredentials -Name Hyper-V -PropertyType String -Value &#34;Microsoft Virtual Console Service/*&#34; -Force&#xA;New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Credssp\PolicyDefaults\AllowFreshCredentialsWhenNTLMOnly -Name Hyper-V -PropertyType String -Value &#34;Microsoft Virtual Console Service/*&#34; -Force&#xA;New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Credssp\PolicyDefaults\AllowSavedCredentialsWhenNTLMOnly -Name Hyper-V -PropertyType String -Value &#34;Microsoft Virtual Console Service/*&#34; -Force&#xA;New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Credssp\PolicyDefaults\AllowSavedCredentials -Name Hyper-V -PropertyType String -Value &#34;Microsoft Virtual Console Service/*&#34; -Force&#xA;New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Credssp\PolicyDefaults\AllowSavedCredentialsDomain -Name Hyper-V -PropertyType String -Value &#34;Microsoft Virtual Console Service/*&#34; -Force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;VMWare/PowerCLI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Module -Name VMware.PowerCLI # -AllowClobber&lt;/code&gt; установить модуль (PackageProvider: nuget) &lt;br&gt; &lt;code&gt;Get-Module -ListAvailable VMware* | Select Name,Version&lt;/code&gt; &lt;br&gt; &lt;code&gt;Import-Module VMware.VimAutomation.Core&lt;/code&gt; импортировать в сессию &lt;br&gt; &lt;code&gt;Get-PSProvider | format-list Name,PSSnapIn,ModuleName&lt;/code&gt; список оснасток Windows PowerShell&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-PowerCLIConfiguration&lt;/code&gt; конфигурация подключения &lt;br&gt; &lt;code&gt;Set-PowerCLIConfiguration -Scope AllUsers -InvalidCertificateAction ignore -confirm:$false&lt;/code&gt; eсли используется самоподписанный сертификат, изменить значение параметра InvalidCertificateAction с Unset на Ignore/Warn &lt;br&gt; &lt;code&gt;Set-PowerCLIConfiguration -Scope AllUsers -ParticipateInCeip $false&lt;/code&gt; отключить уведомление сбора данных через VMware Customer Experience Improvement Program (CEIP)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Read-Host –AsSecureString | ConvertFrom-SecureString | Out-File &#34;$home\Documents\vcsa_password.txt&#34;&lt;/code&gt; зашифровать пароль и сохранить в файл &lt;br&gt; &lt;code&gt;$esxi = &#34;vcsa.domain.local&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$user = &#34;administrator@vsphere.local&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$pass = Get-Content &#34;$home\Documents\vcsa_password.txt&#34; | ConvertTo-SecureString&lt;/code&gt; прочитать пароль &lt;br&gt; &lt;code&gt;$pass = &#34;password&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $user ,$pass&lt;/code&gt; &lt;br&gt; &lt;code&gt;Connect-VIServer $esxi -User $Cred.Username -Password $Cred.GetNetworkCredential().password&lt;/code&gt; подключиться, используя PSCredential ($Cred) &lt;br&gt; &lt;code&gt;Connect-VIServer $esxi -User $user -Password $pass&lt;/code&gt; подключиться, используя логин и пароль&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command –Module *vmware*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Command –Module *vmware* -name *get*iscsi*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-IScsiHbaTarget&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Datacenter&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Cluster&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VMHost&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VMHost | select Name,Model,ProcessorType,MaxEVCMode,NumCpu,CpuTotalMhz,CpuUsageMhz,MemoryTotalGB,MemoryUsageGB&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VMHostDisk | select VMHost,ScsiLun,TotalSectors&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Datastore&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Datastore TNAS-vmfs-4tb-01&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Datastore TNAS-vmfs-4tb-01 | get-vm&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Datastore -RelatedObject vm-01&lt;/code&gt; &lt;br&gt; &lt;code&gt;(Get-Datastore TNAS-vmfs-4tb-01).ExtensionData.Info.GetType()&lt;/code&gt; &lt;br&gt; &lt;code&gt;(Get-Datastore TNAS-vmfs-4tb-01).ExtensionData.Info.Vmfs.Extent&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command –Module *vmware* -name *disk*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VM vm-01 | Get-Datastore&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VM vm-01 | Get-HardDisk&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VM | Get-HardDisk | select Parent,Name,CapacityGB,StorageFormat,FileName | ft&lt;/code&gt; &lt;br&gt; &lt;code&gt;Copy-HardDisk&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VM | Get-Snapshot&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VM | where {$_.Powerstate -eq &#34;PoweredOn&#34;}&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VMHost esxi-05 | Get-VM | where {$_.Powerstate -eq &#34;PoweredOff&#34;} | Move-VM –Destination (Get-VMHost esxi-06)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-VM | select Name,VMHost,PowerState,NumCpu,MemoryGB,&lt;/code&gt; &lt;br&gt; &lt;code&gt;@{Name=&#34;UsedSpaceGB&#34;; Expression={[int32]($_.UsedSpaceGB)}},@{Name=&#34;ProvisionedSpaceGB&#34;; Expression={[int32]($_.ProvisionedSpaceGB)}},&lt;/code&gt; &lt;br&gt; &lt;code&gt;CreateDate,CpuHotAddEnabled,MemoryHotAddEnabled,CpuHotRemoveEnabled,Notes&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-VMGuest vm-01 | Update-Tools&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VMGuest vm-01 | select OSFullName,IPAddress,HostName,State,Disks,Nics,ToolsVersion&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VMGuest * | select -ExpandProperty IPAddress&lt;/code&gt; &lt;br&gt; &lt;code&gt;Restart-VMGuest -vm vm-01 -Confirm:$False&lt;/code&gt; &lt;br&gt; &lt;code&gt;Start-VM -vm vm-01 -Confirm:$False&lt;/code&gt; &lt;br&gt; &lt;code&gt;Shutdown-VMGuest -vm vm-01 -Confirm:$false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;New-VM –Name vm-01 -VMHost esxi-06 –ResourcePool Production –DiskGB 60 –DiskStorageFormat Thin –Datastore TNAS-vmfs-4tb-01&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VM vm-01 | Copy-VMGuestFile -Source &#34;\\$srv\Install\Soft\Btest.exe&#34; -Destination &#34;C:\Install\&#34; -LocalToGuest -GuestUser USER -GuestPassword PASS -force&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-VM -name vm-01 | Export-VApp -Destination C:\Install -Format OVF&lt;/code&gt; Export template (.ovf, .vmdk, .mf) &lt;br&gt; &lt;code&gt;Get-VM -name vm-01 | Export-VApp -Destination C:\Install -Format OVA&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-VMHostNetworkAdapter | select VMHost,Name,Mac,IP,@{Label=&#34;Port Group&#34;; Expression={$_.ExtensionData.Portgroup}} | ft&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VM | Get-NetworkAdapter | select Parent,Name,Id,Type,MacAddress,ConnectionState,WakeOnLanEnabled | ft&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command –Module *vmware* -name *event*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VIEvent -MaxSamples 1000 | where {($_.FullFormattedMessage -match &#34;power&#34;)} | select username,CreatedTime,FullFormattedMessage&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-logtype | select Key,SourceEntityId,Filename,Creator,Info&lt;/code&gt; &lt;br&gt; &lt;code&gt;(Get-Log vpxd:vpxd.log).Entries | select -Last 50&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command –Module *vmware* -name *syslog*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-VMHostSysLogServer -VMHost esxi-05 -SysLogServer &#34;tcp://192.168.3.100&#34; -SysLogServerPort 3515&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VMHostSysLogServer -VMHost esxi-05&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Exchange/EMShell&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;$srv_cas = &#34;exchange-cas&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$session_exchange = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri http://$srv_cas/PowerShell/&lt;/code&gt; -Credential $Cred -Authentication Kerberos &lt;br&gt; &lt;code&gt;Get-PSSession&lt;/code&gt; &lt;br&gt; &lt;code&gt;Import-PSSession $session_exchange -DisableNameChecking&lt;/code&gt; импортировать в текущую сессию&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ExchangeServer | select name,serverrole,admindisplayversion,Edition,OriginatingServer,WhenCreated,WhenChanged,DataPath | ft&lt;/code&gt; список всех серверов&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ImapSettings&lt;/code&gt; настройки IMAP &lt;br&gt; &lt;code&gt;Get-ExchangeCertificate&lt;/code&gt; список сертификатов &lt;br&gt; &lt;code&gt;Get-ExchangeCertificate -Thumbprint &#34;5CEC8544D4743BC279E5FEA1679F79F5BD0C2B3A&#34; | Enable-ExchangeCertificate -Services IMAP, POP, IIS, SMTP&lt;/code&gt; &lt;br&gt; &lt;code&gt;iisreset&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-ClientAccessService | fl identity, *uri*&lt;/code&gt; настройки службы автообнаружения в Exchange 2016 &lt;br&gt; &lt;code&gt;Get-ClientAccessService -Identity $srv | Set-ClientAccessService -AutoDiscoverServiceInternalUri https://mail.domain.ru/Autodiscover/Autodiscover.xml&lt;/code&gt; изменить на внешний адрес &lt;br&gt; &lt;code&gt;Get-OutlookAnywhere&lt;/code&gt; OA позволяет клиентам Outlook подключаться к своим почтовым ящикам за пределами локальной сети (без использования VPN) &lt;br&gt; &lt;code&gt;Get-WebServicesVirtualDirectory&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-OwaVirtualDirectory&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-ActiveSyncVirtualDirectory&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-OabVirtualDirectory&lt;/code&gt; виртуальная директория автономной адресной книги &lt;br&gt; &lt;code&gt;Get-OabVirtualDirectory -Server $srv | Set-OabVirtualDirectory -InternalUrl &#34;https://mail.domain.ru/OAB&#34; -ExternalUrl &#34;https://mail.domain.ru/OAB&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Roles&lt;/h3&gt; &#xA;&lt;p&gt;MS (Mailbox) - сервер с БД почтовых ящиков и общих папок, отвечает только за их размещение и не выполняет маршрутизацию никаких сообщений. &lt;br&gt; CAS (Client Access Server) - обработка клиентских подключений к почтовым ящикам, которые создаются клиентами Outlook Web Access (HTTP для Outlook Web App), Outlook Anywhere, ActiveSync (для мобильных устройств), интернет протоколы POP3 и IMAP4, MAPI для клиентов Microsoft Outlook. &lt;br&gt; Hub Transort - ответвечает за маршрутизацию сообщений интернета и инфраструктурой Exchange, а также между серверами Exchange. Сообщения всегда маршрутизируются с помощью роли транспортного сервера-концентратора, даже если почтовые ящики источника и назначения находятся в одной базе данных почтовых ящиков. &lt;br&gt; Relay - роль пограничного транспортного сервера (шлюз SMTP в периметре сети).&lt;/p&gt; &#xA;&lt;p&gt;SCP (Service Connection Point) - запись прописывается в AD, при создание сервера CAS. Outlook запрашивает SCP, выбирает те, которые находятся в одном сайте с ним и по параметру WhenCreated – по дате создания, выбирая самый старый. &lt;br&gt; Autodiscover. Outlook выбирает в качестве сервера Client Access тот, который прописан в атрибуте RPCClientAccessServer базы данных пользователя. Сведения о базе данных и сервере mailbox, на котором она лежит, берутся из AD.&lt;/p&gt; &#xA;&lt;h3&gt;MessageTrackingLog&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MessageTrackingLog -ResultSize Unlimited | select Timestamp,Sender,Recipients,RecipientCount,MessageSubject,Source,EventID,ClientHostname,ServerHostname,ConnectorId, @{Name=&#34;MessageSize&#34;; Expression={[string]([int]($_.TotalBytes / 1024))+&#34; KB&#34;}},@{Name=&#34;MessageLatency&#34;; Expression={$_.MessageLatency -replace &#34;\.\d+$&#34;}}&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-MessageTrackingLog -Start (Get-Date).AddHours(-24) -ResultSize Unlimited | where {[string]$_.recipients -like &#34;*@yandex.ru&#34;}&lt;/code&gt; вывести сообщения за последние 24 часа, где получателем был указанный домен &lt;br&gt; -Start &#34;04/01/2023 09:00:00&#34; -End &#34;04/01/2023 18:00:00&#34; - поиск по указанному промежутку времени &lt;br&gt; -MessageSubject &#34;Тест&#34; - поиск по теме письма &lt;br&gt; -Recipients &#34;&lt;a href=&#34;mailto:support4@domain.ru&#34;&gt;support4@domain.ru&lt;/a&gt;&#34; - поиск по получателю &lt;br&gt; -Sender - поиск по отправителю &lt;br&gt; -EventID – поиск по коду события сервера (RECEIVE, SEND, FAIL, DSN, DELIVER, BADMAIL, RESOLVE, EXPAND, REDIRECT, TRANSFER, SUBMIT, POISONMESSAGE, DEFER) &lt;br&gt; -Server – поиск на определенном транспортном сервере &lt;br&gt; -messageID – трекинг письма по его ID&lt;/p&gt; &#xA;&lt;h3&gt;Mailbox&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Mailbox -Database &#34;it2&#34;&lt;/code&gt; список почтовых серверов в базе данных &lt;br&gt; &lt;code&gt;Get-Mailbox -resultsize unlimited | ? Emailaddresses -like &#34;support4&#34; | format-list name,emailaddresses,database,servername&lt;/code&gt; какую БД, сервер и smtp-адреса использует почтовый ящик &lt;br&gt; &lt;code&gt;Get-Mailbox -Database $db_name -Archive&lt;/code&gt; отобразить архивные почтовые ящики&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MailboxFolderStatistics -Identity &#34;support4&#34; -FolderScope All | select Name,ItemsInFolder,FolderSize&lt;/code&gt; отобразить кол-во писем и размер в каждой папке &lt;br&gt; &lt;code&gt;Get-MailboxStatistics &#34;support4&#34; | select DisplayName,LastLoggedOnUserAccount,LastLogonTime,LastLogoffTime,ItemCount,TotalItemSize,DeletedItemCount,TotalDeletedItemSize,Database,ServerName&lt;/code&gt; общее кол-во писем, их размер, время последнего входа и выхода, имя сервера и БД &lt;br&gt; &lt;code&gt;Get-Mailbox -Server s2 | Get-MailboxStatistics | where {$_.Lastlogontime -lt (get-date).AddDays(-30)} | Sort Lastlogontime -desc | ft displayname,Lastlogontime,totalitemsize&lt;/code&gt; ящики, которые не использовались 30 и более дней&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Enable-Mailbox -Identity support9 -Database test_base&lt;/code&gt; создать почтовый ящик для существующего пользователя в AD &lt;br&gt; &lt;code&gt;New-Mailbox -Name $login -UserPrincipalName &#34;$login@$domain&#34; -Database $select_db -OrganizationalUnit $path -Password (ConvertTo-SecureString -String &#34;$password&#34; -AsPlainText -Force)&lt;/code&gt; создать новый почтовый ящик без привязки к пользователю AD &lt;br&gt; &lt;code&gt;Get-MailboxDatabase -Database $db_name | Remove-MailboxDatabase&lt;/code&gt; удалить БД&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Set-MailBox &#34;support4&#34; -PrimarySmtpAddress support24@domain.ru -EmailAddressPolicyEnabled $false&lt;/code&gt; добавить и изменить основной SMTP-адрес электронной почты для пользователя &lt;br&gt; &lt;code&gt;Set-Mailbox -Identity &#34;support4&#34; -DeliverToMailboxAndForward $true -ForwardingSMTPAddress &#34;username@outlook.com&#34;&lt;/code&gt; включить переадресацию почты (электронная почта попадает в почтовый ящик пользователя support4 и одновременно пересылается по адресу &lt;a href=&#34;mailto:username@outlook.com&#34;&gt;username@outlook.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;MoveRequest&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Mailbox -Database $db_in | New-MoveRequest -TargetDatabase $db_out&lt;/code&gt; переместить все почтовые ящики из одной БД в другую &lt;br&gt; &lt;code&gt;New-MoveRequest -Identity $db_in -TargetDatabase $db_out&lt;/code&gt; переместить один почтовый ящик &lt;br&gt; &lt;code&gt;Get-MoveRequest | Suspend-MoveRequest&lt;/code&gt; остановить запросы перемещения &lt;br&gt; &lt;code&gt;Get-MoveRequest | Remove-MoveRequest&lt;/code&gt; удалить запросы на перемещение &lt;br&gt; &lt;code&gt;Get-MoveRequest | Get-MoveRequestStatistics&lt;/code&gt; статус перемещения&lt;/p&gt; &#xA;&lt;p&gt;Status: &lt;br&gt; Cleanup - нужно подождать &lt;br&gt; Queued - в очереди &lt;br&gt; InProgress - в процессе &lt;br&gt; Percent Complete - процент выполнения &lt;br&gt; CompletionInProgress - завершение процесса &lt;br&gt; Completed - завершено&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Remove-MoveRequest -Identity $db_name&lt;/code&gt; завершить процесс перемещения (убрать статус перемещения с почтового ящика и очистить список перемещений) &lt;br&gt; &lt;code&gt;Get-MailboxDatabase | Select Name, MailboxRetention&lt;/code&gt; после перемещения ящиков, размер базы не изменится, полное удаление из базы произойдет, как пройдет количество дней, выставленное в параметре MailboxRetention &lt;br&gt; &lt;code&gt;Set-MailboxDatabase -MailboxRetention &#39;0.00:00:00&#39; -Identity $db_name&lt;/code&gt; изменить значение&lt;/p&gt; &#xA;&lt;h3&gt;Archive&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Enable-Mailbox -Identity $name -Archive&lt;/code&gt; включить архив для пользователя &lt;br&gt; &lt;code&gt;Get-Mailbox $name | New-MoveReques –ArchiveOnly –ArchiveTargetDatabase DBArch&lt;/code&gt; переместить архивный почтовый ящик в другую БД &lt;br&gt; &lt;code&gt;Get-Mailbox $name | fl Name,Database,ArchiveDatabase&lt;/code&gt; место расположения БД пользователя и БД его архива &lt;br&gt; &lt;code&gt;Disable-Mailbox -Identity $name -Archive&lt;/code&gt; отключить архив &lt;br&gt; &lt;code&gt;Connect-Mailbox -Identity &#34;8734c04e-981e-4ccf-a547-1c1ac7ebf3e2&#34; -Archive -User $name -Database it2&lt;/code&gt; подключение архива пользователя к указанному почтовому ящику &lt;br&gt; &lt;code&gt;Get-Mailbox $name | Set-Mailbox -ArchiveQuota 20GB -ArchiveWarningQuota 19GB&lt;/code&gt; настроить квоты хранения архива&lt;/p&gt; &#xA;&lt;h3&gt;Quota&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Mailbox -Identity $mailbox | fl IssueWarningQuota, ProhibitSendQuota, ProhibitSendReceiveQuota, UseDatabaseQuotaDefaults&lt;/code&gt; отобразить квоты почтового ящика &lt;br&gt; IssueWarningQuota — квота, при достижении которой Exchange отправит уведомление &lt;br&gt; ProhibitSendQuota — при достижении будет запрещена отправка &lt;br&gt; ProhibitSendReceiveQuota — при достижении будет запрещена отправка и получение &lt;br&gt; UseDatabaseQuotaDefaults — используется ли квота БД или false - индвидиуальные &lt;br&gt; &lt;code&gt;Set-Mailbox -Identity $mailbox -UseDatabaseQuotaDefaults $false -IssueWarningQuota &#34;3 GB&#34; -ProhibitSendQuota &#34;4 GB&#34; -ProhibitSendReceiveQuota &#34;5 GB&#34;&lt;/code&gt; задать квоту для пользователя&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MailboxDatabase $db_name | fl Name, *Quota&lt;/code&gt; отобразить квоты наложенные на БД &lt;br&gt; &lt;code&gt;Set-MailboxDatabase $db -ProhibitSendReceiveQuota &#34;5 GB&#34; -ProhibitSendQuota &#34;4 GB&#34; -IssueWarningQuota &#34;3 GB&#34;&lt;/code&gt; настроить квоты на БД&lt;/p&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MailboxDatabase -Status | select ServerName,Name,DatabaseSize&lt;/code&gt; список и размер всех БД на всех MX-серверах &lt;br&gt; &lt;code&gt;New-MailboxDatabase -Name it_2022 -EdbFilePath E:\Bases\it_2022\it_2022.edb -LogFolderPath G:\Logs\it_2022 -OfflineAddressBook &#34;Default Offline Address List&#34; -server exch-mx-01&lt;/code&gt; создать БД &lt;br&gt; &lt;code&gt;Restart-Service MSExchangeIS&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Service | Where {$_ -match &#34;exchange&#34;} | Restart-Service&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-MailboxDatabase -Server exch-01&lt;/code&gt; список баз данных на MX-сервере &lt;br&gt; &lt;code&gt;New-MoveRequest -Identity &#34;support4&#34; -TargetDatabase it_2022&lt;/code&gt; переместить почтовый ящик в новую БД &lt;br&gt; &lt;code&gt;Move-Databasepath $db_name –EdbFilepath &#34;F:\DB\$db_name\$db_name.edb&#34; –LogFolderpath &#34;E:\DB\$db_name\logs\&#34;&lt;/code&gt; переместить БД и транзакционные логи на другой диск &lt;br&gt; &lt;code&gt;Set-MailboxDatabase -CircularLoggingEnabled $true -Identity $db_name&lt;/code&gt; включить циклическое ведение журнала (Circular Logging), где последовательно пишутся 4 файла логов по 5 МБ, после чего первый лог-файл перезаписывается &lt;br&gt; &lt;code&gt;Set-MailboxDatabase -CircularLoggingEnabled $false -Identity $db_name&lt;/code&gt; отключить циклическое ведение журнала &lt;br&gt; &lt;code&gt;Get-MailboxDatabase -Server &#34;exch-mx-01&#34; -Status | select EdbFilePath,LogFolderPath,LogFilePrefix&lt;/code&gt; путь к БД, логам, имя текущего актуального лог-файла&lt;/p&gt; &#xA;&lt;h3&gt;MailboxRepairRequest&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;New-MailboxRepairRequest -Database it2 -CorruptionType ProvisionedFolder, SearchFolder, AggregateCounts, Folderview&lt;/code&gt; запустить последовательный тест (в конкретный момент времени не доступен один почтовый ящик) и исправление ошибок на прикладном уровне &lt;br&gt; &lt;code&gt;Get-MailboxRepairRequest -Database it2&lt;/code&gt; прогресс выполнения &lt;br&gt; Позволяет исправить: &lt;br&gt; ProvisionedFolder – нарушения логической структуры папок &lt;br&gt; SearchFolder – ошибки в папках поиска &lt;br&gt; AggregateCounts – проверка и исправление информации о количестве элементов в папках и их размере &lt;br&gt; FolderView – неверное содержимое, отображаемое представлениями папок&lt;/p&gt; &#xA;&lt;h3&gt;eseutil&lt;/h3&gt; &#xA;&lt;p&gt;При отправке/получении любого письма Exchange сначала вносит информацию в транзакционный лог, и только потом сохраняет элемент непосредственно в базу данных. Размер одного лог файла - 1 Мб. Есть три способа урезания логов: DAG, Backup на базе Volume Shadow Copy, Circular Logging.&lt;/p&gt; &#xA;&lt;p&gt;Ручное удаление журналов транзакций: &lt;br&gt; &lt;code&gt;cd E:\MS_Exchange_2010\MailBox\Reg_v1_MailBoxes\&lt;/code&gt; перейти в каталог с логами &lt;br&gt; &lt;code&gt;ls E*.chk&lt;/code&gt; узнать имя файла, в котором находится информация из контрольной точки фиксации журналов &lt;br&gt; &lt;code&gt;eseutil /mk .\E18.chk&lt;/code&gt; узнать последний файл журнала, действия из которого были занесены в БД Exchange &lt;br&gt; &lt;code&gt;Checkpoint: (0x561299,8,16)&lt;/code&gt; 561299 имя файла, который был последним зафиксирован (его информация уже в базе данных) &lt;br&gt; Находим в проводнике файл E0500561299.txt, можно удалять все файлы журналов, которые старше найденного файла&lt;/p&gt; &#xA;&lt;p&gt;Восстановление БД (если две копии БД с ошибкой): &lt;br&gt; &lt;code&gt;Get-MailboxDatabaseCopyStatus -Identity db_name\* | Format-List Name,Status,ContentIndexState&lt;/code&gt; &lt;br&gt; Status : FailedAndSuspended &lt;br&gt; ContentIndexState : Failed &lt;br&gt; Status : Dismounted &lt;br&gt; ContentIndexState : Failed&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MailboxDatabase -Server exch-mx-01 -Status | fl Name,EdbFilePath,LogFolderPath&lt;/code&gt; проверить расположение базы и транзакционных логов &lt;br&gt; LogFolderPath - директория логов &lt;br&gt; E18 - имя транкзакционного лога (из него читаются остальные логи) &lt;br&gt; &lt;code&gt;dismount-Database db_name&lt;/code&gt; отмантировать БД &lt;br&gt; &lt;code&gt;eseutil /mh D:\MS_Exchange_2010\Mailbox\db_name\db_name.edb&lt;/code&gt; проверить базу &lt;br&gt; State: Dirty Shutdown - несогласованное состояние, означает, что часть транзакций не перенесена в базу, например, после того, как была осуществлена аварийная перезагрузка сервера. &lt;br&gt; &lt;code&gt;eseutil /ml E:\MS_Exchange_2010\MailBox\db_name\E18&lt;/code&gt; проверка целостности транзакционных логи, если есть логи транзакций и они не испорчены, то можно восстановить из них, из файла E18 считываются все логи, должен быть статус - ОК&lt;/p&gt; &#xA;&lt;p&gt;Soft Recovery (мягкое восстановление) - необходимо перевести базу в состояние корректного отключения (Clear shutdown) путем записи недостающих файлов журналов транзакций в БД. &lt;br&gt; &lt;code&gt;eseutil /R E18 /l E:\MS_Exchange_2010\MailBox\db_name\ /d D:\MS_Exchange_2010\Mailbox\db_name\db_name.edb&lt;/code&gt; &lt;br&gt; &lt;code&gt;eseutil /R E18 /a /i /l E:\MS_Exchange_2010\MailBox\db_name\ /d D:\MS_Exchange_2010\Mailbox\db_name\db_name.edb&lt;/code&gt; если с логами что-то не так, можно попробовать восстановить базу игнорируя ошибку в логах &lt;br&gt; &lt;code&gt;eseutil /mk D:\MS_Exchange_2010\Mailbox\db_name\db_name.edb&lt;/code&gt; cостоянии файла контрольных точек &lt;br&gt; &lt;code&gt;eseutil /g D:\MS_Exchange_2010\Mailbox\db_name\db_name.edb&lt;/code&gt; проверка целостности БД &lt;br&gt; &lt;code&gt;eseutil /k D:\MS_Exchange_2010\Mailbox\db_name\db_name.edb&lt;/code&gt; проверка контрольных сумм базы (CRC)&lt;/p&gt; &#xA;&lt;p&gt;Hard Recovery - если логи содержат ошибки и база не восстанавливается, то восстанавливаем базу без логов. &lt;br&gt; &lt;code&gt;eseutil /p D:\MS_Exchange_2010\Mailbox\db_name\db_name.edb&lt;/code&gt; &lt;br&gt; /p - удалит поврежденные страницы, эта информация будет удалена из БД и восстановит целостность &lt;br&gt; &lt;code&gt;esetuil /d D:\MS_Exchange_2010\Mailbox\db_name\db_name.edb&lt;/code&gt; выполнить дефрагментацию (если был потерян большой объем данных, то может сильно снизиться производительность) &lt;br&gt; После выполнения команд необходимо вручную удалить все файлы с расширением log в папке MDBDATA, перед попыткой смонтировать базу данных. &lt;br&gt; &lt;code&gt;isinteg -s &#34;db_name.edb&#34; -test alltests&lt;/code&gt; проверьте целостность базы данных &lt;br&gt; &lt;code&gt;isinteg -s &#34;server_name&#34; -fix -test -alltests&lt;/code&gt; если проверка будет провалена. Выполнять команду до тех пор, пока у всех ошибок не станет статус 0 или статус не перестанет меняться, иногда необходимо 3 прохода для достижения результата. &lt;br&gt; &lt;code&gt;eseutil /mh D:\MS_Exchange_2010\Mailbox\db_name\db_name.edb | Select-String -Pattern &#34;State:&#34;,&#34;Log Required:&#34;&lt;/code&gt; проверить статус &lt;br&gt; State: Clear shutdown - успешный статус &lt;br&gt; &lt;code&gt;Log Required&lt;/code&gt; требуются ли файлы журналов, необходимые базе, чтобы перейти в согласованное состояние. Если база размонтирована корректно, то это значение будет равняться 0. &lt;br&gt; &lt;code&gt;mount-Database -force db_name&lt;/code&gt; примонтировать БД &lt;br&gt; &lt;code&gt;Get-MailboxDatabase –Status db_name | fl Mounted&lt;/code&gt; статус БД &lt;br&gt; &lt;code&gt;New-MailboxRepairRequest -Database db_name -CorruptionType SearchFolder,AggregateCounts,ProvisionedFolder,FolderView&lt;/code&gt; восстановление логической целостности данных &lt;br&gt; После этого восстановить Index. &lt;br&gt; Если индексы не восстанавливаются, но БД монтируется, то перенести почтовые ящики в новую БД.&lt;/p&gt; &#xA;&lt;p&gt;Восстановление БД из Backup:&lt;/p&gt; &#xA;&lt;p&gt;1-й вариант:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Отмантировать текущую БД и удалить или переименовать директорию с файлами текущей БД.&lt;/li&gt; &#xA; &lt;li&gt;Восстановить в ту же директорию из Backup базу с логами.&lt;/li&gt; &#xA; &lt;li&gt;Запустить мягкое восстановление БД (Soft Recovery).&lt;/li&gt; &#xA; &lt;li&gt;Примониторвать.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;2-й вариант:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Отмантировать и удалить текущую БД.&lt;/li&gt; &#xA; &lt;li&gt;Восстановить БД с логами из Backup в любое место.&lt;/li&gt; &#xA; &lt;li&gt;Запустить мягкое восстановление БД (Soft Recovery).&lt;/li&gt; &#xA; &lt;li&gt;Создать новую БД.&lt;/li&gt; &#xA; &lt;li&gt;Создать Recovery Database и смонтировать в нее восстановленную из бэкапа БД, скопировать из неё почтовые ящики в новую БД и переключить на них пользователей.&lt;/li&gt; &#xA; &lt;li&gt;Если использовать Dial Tone Recovery, то так же перенести из временной БД промежуточные данные почтовых ящиков.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;3-й вариант:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Восстановить целостность Soft Repair или Hard Recovery.&lt;/li&gt; &#xA; &lt;li&gt;Создать новую БД. Указывать в свойствах: «база может быть перезаписана при восстановлении».&lt;/li&gt; &#xA; &lt;li&gt;Если база была только что оздана и еще не была подмонтирована, то эта папка будет пуста, туда перемещаем базу из Backup, которая была обработана ESEUTIL вместе со всеми файлами. Указать имя .edb такое же, которое было при создании новой базы.&lt;/li&gt; &#xA; &lt;li&gt;Монтируем базу.&lt;/li&gt; &#xA; &lt;li&gt;Перенацеливаем ящики со старой (Mailbox_DB_02), неисправной базы, на новую базу (Mailbox_DB_02_02): &lt;code&gt;Get-Mailbox -Database Mailbox_DB_02 | where {$_.ObjectClass -NotMatch &#39;(SystemAttendantMailbox|ExOleDbSystemMailbox)&#39;} | Set-Mailbox -Database Mailbox_DB_02_02&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Восстановление логической целостности данных: &lt;code&gt;New-MailboxRepairRequest -Database &#34;Mailbox_DB_02_02&#34; -CorruptionType ProvisionedFolder, SearchFolder, AggregateCounts, Folderview&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Dial Tone Recovery&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Mailbox -Database &#34;MailboxDB&#34; | Set-Mailbox -Database &#34;TempDB&#34;&lt;/code&gt; перенацелить ящики с одной БД (нерабочей) на другую (пустую) &lt;br&gt; &lt;code&gt;Get-Mailbox -Database TempDB&lt;/code&gt; отобразить почтовые ящики в БД TempDB &lt;br&gt; &lt;code&gt;Restart-Service MSExchangeIS&lt;/code&gt; перезапустить службу Mailbox Information Store (банка данных), иначе пользователи будут по-прежнему пытаться подключиться к старой БД &lt;br&gt; &lt;code&gt;iisreset&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Mailbox -Database &#34;TempDB&#34; | Set-Mailbox -Database &#34;MailboxDB&#34;&lt;/code&gt; после восстановления старой БД, нужно переключить пользователей с временной БД обратно &lt;br&gt; После этого сделать слияние с временной БД с помощью Recovery.&lt;/p&gt; &#xA;&lt;h3&gt;Recovery database (RDB)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;New-MailboxDatabase –Recovery –Name RecoveryDB –Server $exch_mx –EdbFilePath &#34;D:\TempDB\TempDB.edb&#34; -LogFolderPath &#34;D:\TempDB&#34;&lt;/code&gt; для переноса новых писем из временной БД в основную необходим только сам файл TempDB.edb со статусом Clean Shutdown, из нее необходимо создать служебную БД (ключ -Recovery) &lt;br&gt; &lt;code&gt;Mount-Database &#34;D:\TempDB\TempDB.edb&#34;&lt;/code&gt; примонтировать БД &lt;br&gt; &lt;code&gt;Get-MailboxStatistics -Database RecoveryDB&lt;/code&gt; &lt;br&gt; &lt;code&gt;New-MailboxRestoreRequest –SourceDatabase RecoveryDB –SourceStoreMailbox support –TargetMailbox support&lt;/code&gt; скопировать данные почтового ящика с DisplayName: support из RecoveryDB в почтовый ящик с псевдонимом support существующей базы. По умолчанию ищет в почтовой базе совпадающие LegacyExchangeDN либо проверяет совпадение адреса X500, если нужно восстановить данные в другой ящик, нужно указывать ключ -AllowLegacyDNMisMatch &lt;br&gt; &lt;code&gt;New-MailboxRestoreRequest –SourceDatabase RecoveryDB –SourceStoreMailbox support –TargetMailbox support –TargetRootFolder &#34;Restore&#34;&lt;/code&gt; скопировать письма в отдельную папку в ящике назначения (создается автоматически), возможно восстановить содержимое конкретной папки -IncludeFolders &#34;#Inbox#&#34; &lt;br&gt; &lt;code&gt;Get-MailboxRestoreRequest | Get-MailboxRestoreRequestStatistics&lt;/code&gt; статус запроса восстановления &lt;br&gt; &lt;code&gt;Get-MailboxRestoreRequestStatistics -Identity support&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-MailboxRestoreRequest -Status Completed | Remove-MailboxRestoreRequest&lt;/code&gt; удалить все успешные запросы&lt;/p&gt; &#xA;&lt;h3&gt;Transport&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-TransportServer $srv_cas | select MaxConcurrentMailboxDeliveries,MaxConcurrentMailboxSubmissions,MaxConnectionRatePerMinute,MaxOutboundConnections,MaxPerDomainOutboundConnections,PickupDirectoryMaxMessagesPerMinute&lt;/code&gt; настройки пропускной способности транспортного сервера &lt;br&gt; MaxConcurrentMailboxDeliveries — максимальное количество одновременных потоков, которое может открыть сервер для отправки писем. &lt;br&gt; MaxConcurrentMailboxSubmissions — максимальное количество одновременных потоков, которое может открыть сервер для получения писем. &lt;br&gt; MaxConnectionRatePerMinute — максимальное возможная скорость открытия входящих соединений в минуту. &lt;br&gt; MaxOutboundConnections — максимальное возможное количество соединений, которое может открыть Exchange для отправки. &lt;br&gt; MaxPerDomainOutboundConnections — максимальное возможное количество исходящих соединений, которое может открыть Exchange для одного удаленного домена. &lt;br&gt; PickupDirectoryMaxMessagesPerMinute — скорость внутренней обработки сообщений в минуту (распределение писем по папкам). &lt;br&gt; &lt;code&gt;Set-TransportServer exchange-cas -MaxConcurrentMailboxDeliveries 21 -MaxConcurrentMailboxSubmissions 21 -MaxConnectionRatePerMinute 1201 -MaxOutboundConnections 1001 -MaxPerDomainOutboundConnections 21 -PickupDirectoryMaxMessagesPerMinute 101&lt;/code&gt; изменить значения&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-TransportConfig | select MaxSendSize, MaxReceiveSize&lt;/code&gt; ограничение размера сообщения на уровне траспорта (наименьший приоритет, после коннектора и почтового ящика). &lt;br&gt; &lt;code&gt;New-TransportRule -Name AttachmentLimit -AttachmentSizeOver 15MB -RejectMessageReasonText &#34;Sorry, messages with attachments over 15 MB are not accepted&#34;&lt;/code&gt; создать транспортное правило для проверки размера вложения&lt;/p&gt; &#xA;&lt;h3&gt;Connector&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ReceiveConnector | select Name,MaxMessageSize,RemoteIPRanges,WhenChanged&lt;/code&gt; ограничения размера сообщения на уровне коннектора (приоритет ниже, чем у почтового ящика) &lt;br&gt; &lt;code&gt;Set-ReceiveConnector ((Get-ReceiveConnector).Identity)[-1] -MaxMessageSize 30Mb&lt;/code&gt; изменить размер у последнего коннектора в списке (приоритет выше, чем у траспорта) &lt;br&gt; &lt;code&gt;Get-Mailbox &#34;support4&#34; | select MaxSendSize, MaxReceiveSize&lt;/code&gt; наивысший приоритет &lt;br&gt; &lt;code&gt;Set-Mailbox &#34;support4&#34; -MaxSendSize 30MB -MaxReceiveSize 30MB&lt;/code&gt; изменить размер&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Set-SendConnector -Identity &#34;ConnectorName&#34; -Port 26&lt;/code&gt; изменить порт коннектора отправки &lt;br&gt; &lt;code&gt;Get-SendConnector &#34;proxmox&#34; | select port&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ReceiveConnector | select Name,MaxRecipientsPerMessage&lt;/code&gt; по умолчанию Exchange принимает ограниченное количество адресатов в одном письме (200) &lt;br&gt; &lt;code&gt;Set-ReceiveConnector ((Get-ReceiveConnector).Identity)[-1] -MaxRecipientsPerMessage 50&lt;/code&gt; изменить значение &lt;br&gt; &lt;code&gt;Set-ReceiveConnector ((Get-ReceiveConnector).Identity)[-1] -MessageRateLimit 1000&lt;/code&gt; задать лимит обработки сообщений в минуту для коннектора&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-OfflineAddressbook | Update-OfflineAddressbook&lt;/code&gt; обновить OAB &lt;br&gt; &lt;code&gt;Get-ClientAccessServer | Update-FileDistributionService&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PST&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;New-MailboxExportRequest -Mailbox $name -filepath &#34;\\$srv\pst\$name.PST&#34; # -ContentFilter {(Received -lt &#34;01/01/2021&#34;)} -Priority Highest/Lower # -IsArchive&lt;/code&gt; выполнить экспорт из архива пользователя &lt;br&gt; &lt;code&gt;New-MailboxExportRequest -Mailbox $name -IncludeFolders &#34;#Inbox#&#34; -FilePath &#34;\\$srv\pst\$name.PST&#34;&lt;/code&gt; только папку входящие &lt;br&gt; &lt;code&gt;New-MailboxImportRequest -Mailbox $name &#34;\\$srv\pst\$name.PST&#34;&lt;/code&gt; импорт из PST &lt;br&gt; &lt;code&gt;Get-MailboxExportRequest&lt;/code&gt; статус запросов &lt;br&gt; &lt;code&gt;Get-MailboxExportRequest -Status Completed | Remove-MailboxExportRequest&lt;/code&gt; удалить успешно завершенные запросы &lt;br&gt; &lt;code&gt;Remove-MailboxExportRequest -RequestQueue MBXDB01 -RequestGuid 25e0eaf2-6cc2-4353-b83e-5cb7b72d441f&lt;/code&gt; отменить экспорт&lt;/p&gt; &#xA;&lt;h3&gt;DistributionGroup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-DistributionGroup&lt;/code&gt; список групп рассылки &lt;br&gt; &lt;code&gt;Get-DistributionGroupMember &#34;!_Офис&#34;&lt;/code&gt; список пользователей в группе &lt;br&gt; &lt;code&gt;Add-DistributionGroupMember -Identity &#34;!_Офис&#34; -Member &#34;$name@$domain&#34;&lt;/code&gt; добавить в группу рассылки &lt;br&gt; &lt;code&gt;Remove-DistributionGroupMember -Identity &#34;!_Офис&#34; -Member &#34;$name@$domain&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;New-DistributionGroup -Name &#34;!_Тест&#34; -Members &#34;$name@$domain&#34;&lt;/code&gt; создать группу &lt;br&gt; &lt;code&gt;Set-DistributionGroup -Identity &#34;support4&#34; -HiddenFromAddressListsEnabled $true (или Set-Mailbox)&lt;/code&gt; скрыть из списка адресов Exchange&lt;/p&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Search-Mailbox -Identity &#34;support4&#34; -SearchQuery &#39;Тема:&#34;Mikrotik DOWN&#34;&#39;&lt;/code&gt; поиск писем по теме &lt;br&gt; &lt;code&gt;Search-Mailbox -Identity &#34;support4&#34; -SearchQuery &#39;Subject:&#34;Mikrotik DOWN&#34;&#39;&lt;/code&gt;&lt;br&gt; &lt;code&gt;Search-Mailbox -Identity &#34;support4&#34; -SearchQuery &#39;attachment -like:&#34;*.rar&#34;&#39;&lt;/code&gt;&lt;br&gt; &lt;code&gt;Search-Mailbox -Identity &#34;support4&#34; -SearchQuery &#34;отправлено: &amp;lt; 01/01/2020&#34; -DeleteContent -Force&lt;/code&gt; удаление писем по дате&lt;/p&gt; &#xA;&lt;p&gt;Формат даты в зависимости от региональных настроек сервера: &lt;br&gt; &lt;code&gt;20/07/2018&lt;/code&gt; &lt;br&gt; &lt;code&gt;07/20/2018&lt;/code&gt; &lt;br&gt; &lt;code&gt;20-Jul-2018&lt;/code&gt; &lt;br&gt; &lt;code&gt;20/July/2018&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;AuditLog&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-AdminAuditLogConfig&lt;/code&gt; настройки аудита &lt;br&gt; &lt;code&gt;Set-Mailbox -Identity &#34;support4&#34; -AuditOwner HardDelete&lt;/code&gt; добавить логирование HardDelete писем &lt;br&gt; &lt;code&gt;Set-mailbox -identity &#34;support4&#34; -AuditlogAgelimit 120&lt;/code&gt; указать время хранения &lt;br&gt; &lt;code&gt;Get-mailbox -identity &#34;support4&#34; | Format-list Audit*&lt;/code&gt; данные аудита &lt;br&gt; &lt;code&gt;Search-MailboxAuditLog -Identity &#34;support4&#34; -LogonTypes Delegate -ShowDetails -Start &#34;2022-02-22 18:00&#34; -End &#34;2022-03-22 18:00&#34;&lt;/code&gt; просмотр логов &lt;br&gt; &lt;code&gt;Search-AdminAuditLog -StartDate &#34;02/20/2022&#34; | ft CmdLetName,Caller,RunDate,ObjectModified -Autosize&lt;/code&gt; поиск событий истории выполненых команд в журнале аудита Exchange&lt;/p&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Test-ServiceHealth&lt;/code&gt; проверить доступность ролей сервера: почтовых ящиков, клиентского доступа, единой системы обмена сообщениями, траспортного сервера &lt;br&gt; &lt;code&gt;$mx_srv_list | %{Test-MapiConnectivity -Server $_}&lt;/code&gt; проверка подключения MX-серверов к БД &lt;br&gt; &lt;code&gt;Test-MAPIConnectivity -Database $db&lt;/code&gt; проверка возможности логина в базу &lt;br&gt; &lt;code&gt;Test-MAPIConnectivity –Identity $user@$domain&lt;/code&gt; проверка возможности логина в почтовый ящик &lt;br&gt; &lt;code&gt;Test-ComputerSecureChannel&lt;/code&gt; проверка работы службы AD &lt;br&gt; &lt;code&gt;Test-MailFlow&lt;/code&gt; результат тестового потока почты&lt;/p&gt; &#xA;&lt;h3&gt;Queue&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-TransportServer | %{Get-Queue -Server $_.Name}&lt;/code&gt; отобразить очереди на всех транспортных серверах &lt;br&gt; &lt;code&gt;Get-Queue -Identity EXCHANGE-CAS\155530 | Format-List&lt;/code&gt; подробная информация об очереди &lt;br&gt; &lt;code&gt;Get-Queue -Identity EXCHANGE-CAS\155530 | Get-Message -ResultSize Unlimited | Select FromAddress,Recipients&lt;/code&gt; отобразить список отправителей (FromAddress) и список получателей в очереди (Recipients) &lt;br&gt; &lt;code&gt;Get-Message -Queue EXCHANGE-CAS\155530&lt;/code&gt; отобразить индентификатор сообщений в конкретной очереди (сервер\очередь\идентификатор письма) &lt;br&gt; &lt;code&gt;Resume-Message EXCHANGE-CAS\155530\444010&lt;/code&gt; повторить отправку письма из очереди &lt;br&gt; &lt;code&gt;Retry-Queue -Filter {Status -eq &#34;Retry&#34;}&lt;/code&gt; принудительно повторить отправку всех сообщений c статусом &#34;Повторить&#34; &lt;br&gt; &lt;code&gt;Get-Queue -Identity EXCHANGE-CAS\155530 | Get-Message -ResultSize unlimited | Remove-Message -WithNDR $False&lt;/code&gt; очистить очередь &lt;br&gt; &lt;code&gt;Get-transportserver EXCHANGE-CAS | Select MessageExpirationTimeout&lt;/code&gt; отобразить время жизни сообщений в очереди (по умолчанию, 2 дня)&lt;/p&gt; &#xA;&lt;p&gt;Error Exchange 452 4.3.1 Insufficient system resources - окончание свободного места на диске, на котором находятся очереди службы Exchange Hub Transport, за мониторинг отвечает компонент доступных ресурсов Back Pressure, который в том числе отслеживает свободное место на диске &lt;br&gt; Порог Medium (90%) — перестать принимать по SMTP почту от внешних отправителей (почта от MAPI клиентов при этом обрабатывается) &lt;br&gt; Порог High (99%) — обработка потока почты полностью прекращается &lt;br&gt; Решение: очистить, например логи IIS (C:\inetpub\logs\LogFiles\W3SVC1), увеличить размер диска, отключить мониторинг Back Pressure (плохой вариант) или перенести транспортные очередь на другой диск достаточного объёма.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Service | ? name -like &#34;MSExchangeTransport&#34; | Stop-Service&lt;/code&gt; остановить служу очереди &lt;br&gt; &lt;code&gt;Rename-Item &#34;C:\Program Files\Microsoft\Exchange Server\V15\TransportRoles\data\Queue&#34; &#34;C:\Program Files\Microsoft\Exchange Server\V15\TransportRoles\data\Queue_old&#34;&lt;/code&gt; очистить базу очереди &lt;br&gt; &lt;code&gt;C:\Program Files\Microsoft\Exchange Server\V15\Bin\EdgeTransport.exe.config&lt;/code&gt; конфигурационный файл, который содержит путь к бд с очередью (блок &#xA; &lt;appsettings&gt;&#xA;   ключи &#xA;  &lt;add key=&#34;QueueDatabasePath&#34; value=&#34;$new_path&#34; /&gt; и QueueDatabaseLoggingPath) &#xA;  &lt;br&gt; Для переноса БД, необходимо переместить существующие файлы базы данных Mail.que и Trn.chk (контрольные точки для отслеживания записи в логах) из исходного местоположения в новое. Переместите существующие файлы журнала транзакций Trn.log, Trntmp.log, Trn nnnn.log , Trnres00001.jrs, Trnres00002.jrs и Temp.edb из старого расположения в новое. tmp.edb — временный файл для проверки схемы самой базы, перености не нужно. &#xA;  &lt;br&gt; После запуска службы транспорта удалить старую базу данных очереди и файлы журнала транзакций из старого расположения.&#xA; &lt;/appsettings&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Defrag&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MailboxDatabase -Status | ft Name, DatabaseSize, AvailableNewMailboxSpace&lt;/code&gt; &lt;br&gt; DatabaseSize - текущий размер базы &lt;br&gt; AvailableNewMailboxSpace - объём пустых страниц, пространство, которое можно освободить при дефрагментации &lt;br&gt; (DatabaseSize — AvailableNewMailboxSpace) x 1,1 - необходимо дополнительно иметь свободного места не менее 110% от текущего размера базы (без учета пустых страниц) &lt;br&gt; &lt;code&gt;cd $path&lt;/code&gt; &lt;br&gt; &lt;code&gt;Dismount-Database &#34;$path\$db_name&#34;&lt;/code&gt; отмонтировать БД &lt;br&gt; &lt;code&gt;eseutil /d &#34;$path\$db_name.edb&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Mount-Database &#34;$path\$db&#34;&lt;/code&gt; примонтировать БД&lt;/p&gt; &#xA;&lt;h3&gt;DAG (Database Availability Group)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-WindowsFeature -Name Failover-Clustering -ComputerName EXCH-MX-01&lt;/code&gt; основывается на технологии Windows Server Failover Cluster &lt;br&gt; &lt;code&gt;New-DatabaseAvailabilityGroup -Name dag-01 -WitnessServer fs-05 -WitnessDirectory C:\witness_exchange1&lt;/code&gt; создать группу с указанием файлового свидетеля для кворума &lt;br&gt; Quorum - это процесс голосования, в котором для принятия решения нужно иметь большинство голосов, что бы сделать текущую копию базы данных активной. &lt;br&gt; WitnessDirectory — используется для хранения данных файлового ресурса-свидетеля. &lt;br&gt; &lt;code&gt;Set-DatabaseAvailabilityGroup dag-01 –DatabaseAvailabilityGroupIPAdress $ip&lt;/code&gt; изменить ip-адрес группы &lt;br&gt; &lt;code&gt;Get-DatabaseAvailabilityGroup&lt;/code&gt; список всех групп &lt;br&gt; &lt;code&gt;Get-DatabaseAvailabilityGroup -Identity dag-01&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-DatabaseAvailabilityGroupServer -Identity dag-01 -MailboxServer EXCH-MX-01&lt;/code&gt; добавить первый сервер (все БД на серверах в DAG должны храниться по одинаковому пути) &lt;br&gt; &lt;code&gt;Add-MailboxDatabaseCopy -Identity db_name -MailboxServer EXCH-MX-04&lt;/code&gt; добавить копию БД &lt;br&gt; &lt;code&gt;Get-MailboxDatabaseCopyStatus -Identity db_name\* | select Name,Status,LastInspectedLogTime&lt;/code&gt; статус и время последнего копирования журнала транзакий&lt;/p&gt; &#xA;&lt;p&gt;Status: &lt;br&gt; Mounted - рабочая база &lt;br&gt; Suspended - приостановлено копирование &lt;br&gt; Healthy - рабочая пассивная копия &lt;br&gt; ServiceDown - недоступна (выключен сервер) &lt;br&gt; Dismounted - отмонтирована &lt;br&gt; FailedAndSuspended - ошибка и приостановка копирования &lt;br&gt; Resynchronizing - процесс синхронизация, где будет постепенно уменьшаться длина очереди &lt;br&gt; CopyQueue Length - длина репликационной очереди копирования (0 - значит все изменения из активной базы реплицированы в пассивную копию)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Resume-MailboxDatabaseCopy -Identity db_name\EXCH-MX-04&lt;/code&gt; возобновить (Resume) или запустить копирование бд на EXCH-MX-04 (из статуса Suspended в Healthy) &lt;br&gt; &lt;code&gt;Suspend-MailboxDatabaseCopy -Identity db_name\EXCH-MX-04&lt;/code&gt; остановить копирование (в статус Suspended) &lt;br&gt; &lt;code&gt;Update-MailboxDatabaseCopy -Identity db_name\EXCH-MX-04 -DeleteExistingFiles&lt;/code&gt; обновить копию БД (сделать Full Backup) &lt;br&gt; &lt;code&gt;Set-MailboxDatabaseCopy -Identity db_name\EXCH-MX-04 -ActivationPreference 1&lt;/code&gt; изменить приоритет для активации копий БД (какую использовать, 1 – самое высокое значение) &lt;br&gt; &lt;code&gt;Move-ActiveMailboxDatabase db_name -ActivateOnServer EXCH-MX-04 -MountDialOverride:None -Confirm:$false&lt;/code&gt; включить копию БД в DAG (переключиться на активную копию) &lt;br&gt; &lt;code&gt;Remove-MailboxDatabaseCopy -Identity db_name\EXCH-MX-04 -Confirm:$False&lt;/code&gt; удалить копии пассивной базы в DAG-группе (у БД должно быть отключено ведение циклического журнала) &lt;br&gt; &lt;code&gt;Remove-DatabaseAvailabilityGroupServer -Identity dag-01 -MailboxServer EXCH-MX-04 -ConfigurationOnly&lt;/code&gt; удалить MX сервер из группы DAG &lt;br&gt; &lt;code&gt;Import-Module FailoverClusters&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-ClusterNode EXCH-MX-04 | Remove-ClusterNode -Force&lt;/code&gt; удалить отказавший узел из Windows Failover Cluster&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-DatabaseAvailabilityGroup | Get-DatabaseAvailabilityGroupHealth&lt;/code&gt; мониторинг&lt;/p&gt; &#xA;&lt;h3&gt;Index&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MailboxDatabaseCopyStatus * | select name,status,ContentIndexState,ContentIndexErrorMessage,ActiveDatabaseCopy,LatestCopyBackupTime,CopyQueueLength&lt;/code&gt; узнать состояние работы индксов БД и текст ошибки, на каком сервере активная копия БД, дата последней копии и текущая очередь &lt;br&gt; &lt;code&gt;Get-MailboxDatabaseCopyStatus -Identity $db_name\* | Format-List Name,ContentIndexState&lt;/code&gt; отобразить список всех копий конкретной БД на всех серверах, и статус их индексов, если у второго сервера статус Healthy, можно восстановить из него &lt;br&gt; &lt;code&gt;Get-MailboxDatabaseCopyStatus -Identity $db_name\EXCH-MX-04 | Update-MailboxDatabaseCopy -SourceServer EXCH-MX-01 -CatalogOnly&lt;/code&gt; восстановить БД из копии &lt;br&gt; &lt;code&gt;cd %PROGRAMFILES%\Microsoft\Exchange Server\V14\Scripts&lt;/code&gt; или v15 для Exchange 2016 &lt;br&gt; &lt;code&gt;.\ResetSearchIndex.ps1 $db_name&lt;/code&gt; скрипт восстановления индекса&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-MailboxDatabaseCopyStatus * | where {$_.ContentIndexState -eq &#34;Failed&#34; -or $_.ContentIndexState -eq &#34;FailedAndSuspended&#34;}&lt;/code&gt; отобразить у какой БД произошел сбой работы (FailedAndSuspended) или индекса (ContentIndexState)&lt;/p&gt; &#xA;&lt;h1&gt;TrueNAS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;import-Module TrueNas&lt;/code&gt; &lt;br&gt; &lt;code&gt;(Get-Module TrueNas).ExportedCommands&lt;/code&gt; &lt;br&gt; &lt;code&gt;Connect-TrueNasServer -Server tnas-01 -SkipCertificateCheck&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-TrueNasCertificate&lt;/code&gt; настройки сертификата &lt;br&gt; &lt;code&gt;Get-TrueNasSetting&lt;/code&gt; настройки языка, time zone, syslog level и server, https port &lt;br&gt; &lt;code&gt;Get-TrueNasUser&lt;/code&gt; список пользователей &lt;br&gt; &lt;code&gt;Get-TrueNasSystemVersion&lt;/code&gt; характеристики (Physical Memory, Model, Cores) и Uptime &lt;br&gt; &lt;code&gt;Get-TrueNasSystemAlert&lt;/code&gt; snmp для оповещений &lt;br&gt; &lt;code&gt;Get-TrueNasSystemNTP&lt;/code&gt; список используемых NTP серверов &lt;br&gt; &lt;code&gt;Get-TrueNasDisk&lt;/code&gt; список разделов физического диска &lt;br&gt; &lt;code&gt;Get-TrueNasInterface&lt;/code&gt; сетевые интерфейсы &lt;br&gt; &lt;code&gt;Get-TrueNasGlobalConfig&lt;/code&gt; сетевые настройки &lt;br&gt; &lt;code&gt;Get-TrueNasDnsServer&lt;/code&gt; настроенные DNS-сервера &lt;br&gt; &lt;code&gt;Get-TrueNasIscsiTarget&lt;/code&gt; отобразить ID группы инициаторов использующих таргет, используемый portal, authentification и authen-method &lt;br&gt; &lt;code&gt;Get-TrueNasIscsiInitiator&lt;/code&gt; отобразить группы инициаторов &lt;br&gt; &lt;code&gt;Get-TrueNasIscsiPortal&lt;/code&gt; слушатель (Listen) и порт &lt;br&gt; &lt;code&gt;Get-TrueNasIscsiExtent&lt;/code&gt; список ISCSi Target (статус работы, путь) &lt;br&gt; &lt;code&gt;Get-TrueNasPool&lt;/code&gt; список pool (Id, Path, Status, Healthy) &lt;br&gt; &lt;code&gt;Get-TrueNasVolume -Type FILESYSTEM&lt;/code&gt; список pool файловых систем &lt;br&gt; &lt;code&gt;Get-TrueNasVolume -Type VOLUME&lt;/code&gt; список разделов в pool и их размер &lt;br&gt; &lt;code&gt;Get-TrueNasService | ft&lt;/code&gt; список служб и их статус &lt;br&gt; &lt;code&gt;Start-TrueNasService ssh&lt;/code&gt; запустить службу &lt;br&gt; &lt;code&gt;Stop-TrueNasService ssh&lt;/code&gt; остановить службу&lt;/p&gt; &#xA;&lt;h1&gt;Veeam&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Set-ExecutionPolicy AllSigned&lt;/code&gt; or Set-ExecutionPolicy Bypass -Scope Process &lt;br&gt; &lt;code&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;))&lt;/code&gt; &lt;br&gt; &lt;code&gt;choco install veeam-backup-and-replication-console&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Module Veeam.Backup.PowerShell&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Command -Module Veeam.Backup.PowerShell&lt;/code&gt; or Get-VBRCommand &lt;br&gt; &lt;code&gt;Connect-VBRServer -Server $srv -Credential $cred&lt;/code&gt; or -User and -Password&lt;code&gt; - Port 9392&lt;/code&gt; default &lt;br&gt; &lt;code&gt;Get-VBRJob&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VBRCommand *get*backup*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VBRComputerBackupJob&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VBRBackup&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VBRBackupRepository&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VBRBackupSession&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VBRBackupServerCertificate&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VBRRestorePoint&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-VBRViProxy&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;REST API&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;$iwr = Invoke-WebRequest -Uri $url&lt;/code&gt; &lt;br&gt; &lt;code&gt;$iwr | Get-Member&lt;/code&gt; &lt;br&gt; &lt;code&gt;$iwr.Content&lt;/code&gt; &lt;br&gt; &lt;code&gt;$iwr.StatusCode -eq 200&lt;/code&gt; &lt;br&gt; &lt;code&gt;$iwr.Headers&lt;/code&gt; &lt;br&gt; &lt;code&gt;$iwr.ParsedHtml | Select lastModified&lt;/code&gt; &lt;br&gt; &lt;code&gt;$iwr.Links | fl title,innerText,href&lt;/code&gt; &lt;br&gt; &lt;code&gt;$iwr.Images.src&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt; - Read &lt;br&gt; &lt;strong&gt;POST&lt;/strong&gt; - Create &lt;br&gt; &lt;strong&gt;PATCH&lt;/strong&gt; - Partial update/modify &lt;br&gt; &lt;strong&gt;PUT&lt;/strong&gt; - Update/replace &lt;br&gt; &lt;strong&gt;DELETE&lt;/strong&gt; - Remove&lt;/p&gt; &#xA;&lt;h3&gt;Download Image&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Download-Image {&#xA;param (&#xA;    [Parameter(Mandatory = $True)]$url&#xA;)&#xA;    $folder = $url -replace &#34;http.+://&#34; -replace &#34;/&#34;,&#34;-&#34; -replace &#34;-$&#34;&#xA;    $path = &#34;$home\Pictures\$folder&#34;&#xA;    if (Test-Path $path) {&#xA;        Remove-Item $path -Recurse -Force&#xA;        New-Item -ItemType Directory $path &amp;gt; $null&#xA;    } else {&#xA;        New-Item -ItemType Directory $path &amp;gt; $null&#xA;    }&#xA;    $irm = Invoke-WebRequest -Uri $url&#xA;    foreach ($img in $irm.Images.src) {&#xA;        $name = $img -replace &#34;.+/&#34;&#xA;        Start-Job {&#xA;            Invoke-WebRequest $using:img -OutFile &#34;$using:path\$using:name&#34;&#xA;        } &amp;gt; $null&#xA;    }&#xA;    while ($True){&#xA;        $status_job = (Get-Job).State[-1]&#xA;        if ($status_job -like &#34;Completed&#34;){&#xA;        Get-Job | Remove-Job -Force&#xA;        break&#xA;    }}&#xA;    $count_all = $irm.Images.src.Count&#xA;    $count_down = (Get-Item $path\*).count&#xA;    &#34;Downloaded $count_down of $count_all files to $path&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Download-Image -url https://losst.pro/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Token&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;https://veeam-11:9419/swagger/ui/index.html&#xA;$Header = @{&#xA;&#34;x-api-version&#34; = &#34;1.0-rev2&#34;&#xA;}&#xA;$Body = @{&#xA;&#34;grant_type&#34; = &#34;password&#34;&#xA;&#34;username&#34; = &#34;$login&#34;&#xA;&#34;password&#34; = &#34;$password&#34;&#xA;}&#xA;$vpost = iwr &#34;https://veeam-11:9419/api/oauth2/token&#34; -Method POST -Headers $Header -Body $Body -SkipCertificateCheck&#xA;$vtoken = (($vpost.Content) -split &#39;&#34;&#39;)[3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GET&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$token = $vtoken | ConvertTo-SecureString -AsPlainText –Force&#xA;$vjob = iwr &#34;https://veeam-11:9419/api/v1/jobs&#34; -Method GET -Headers $Header -Authentication Bearer -Token $token -SkipCertificateCheck&#xA;&#xA;$Header = @{&#xA;&#34;x-api-version&#34; = &#34;1.0-rev1&#34;&#xA;&#34;Authorization&#34; = &#34;Bearer $vtoken&#34;&#xA;}&#xA;$vjob = iwr &#34;https://veeam-11:9419/api/v1/jobs&#34; -Method GET -Headers $Header -SkipCertificateCheck&#xA;$vjob = $vjob.Content | ConvertFrom-Json&#xA;&#xA;$vjob = Invoke-RestMethod &#34;https://veeam-11:9419/api/v1/jobs&#34; -Method GET -Headers $Header -SkipCertificateCheck&#xA;$vjob.data.virtualMachines.includes.inventoryObject&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Telegram&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;@BotFather (https://t.me/BotFather) /newbot&lt;/code&gt; &lt;br&gt; &lt;code&gt;https://api.telegram.org/bot&amp;lt;token&amp;gt;/&amp;lt;endpoint&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Get-FromTelegram {&#xA;param (&#xA;    $token = &#34;687...:AAF...&#34;,&#xA;    [switch]$last,&#xA;    [switch]$date&#xA;)&#xA;$endpoint = &#34;getUpdates&#34;&#xA;$url      = &#34;https://api.telegram.org/bot$token/$endpoint&#34;&#xA;$result   = Invoke-RestMethod -Uri $url&#xA;if ($date) {&#xA;$Collections = New-Object System.Collections.Generic.List[System.Object]&#xA;foreach ($r in $($result.result)) {&#xA;    $EpochTime = [DateTime]&#34;1/1/1970&#34;&#xA;    $TimeZone = Get-TimeZone&#xA;    $UTCTime = $EpochTime.AddSeconds($r.message.date)&#xA;    $d = $UTCTime.AddMinutes($TimeZone.BaseUtcOffset.TotalMinutes)&#xA;&#x9;#$d&#xA;    $Collections.Add([PSCustomObject]@{&#xA;        Message = $r.message.text;&#xA;        Date    = $d&#xA;    })&#xA;}&#xA;$Collections&#xA;} else {&#xA;if ($last) {&#xA;    $result.result.message.text[-1] # прочитать последнее сообщение&#xA;} else {&#xA;    $result.result.message.text&#xA;}&#xA;#$result.result.message.chat.id[-1] # получить индивидуальный chat_id с ботом&#xA;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-FromTelegram&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-FromTelegram -last&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-FromTelegram -date&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://core.telegram.org/bots/api#sendmessage&#34;&gt;https://core.telegram.org/bots/api#sendmessage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Send-ToTelegram {&#xA;param (&#xA;[Parameter(Mandatory = $True)]$Text,&#xA;$token    = &#34;687...:AAF...&#34;,&#xA;$chat     = &#34;125468108&#34;&#xA;)&#xA;$endpoint = &#34;sendMessage&#34;&#xA;$url      = &#34;https://api.telegram.org/bot$token/$endpoint&#34;&#xA;$Body = @{&#xA;chat_id = $Chat&#xA;text    = $Text&#xA;}&#xA;Invoke-RestMethod -Uri $url -Body $Body&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Send-ToTelegram -Text &#34;Send test from powershell&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$LastDate = (Get-FromTelegram -date)[-1].Date&#xA;while ($true) {&#xA;    $LastMessage  = (Get-FromTelegram -date)[-1]&#xA;    Start-Sleep 1&#xA;    $LastDateTest = $LastMessage.Date&#xA;    if (($LastMessage.Message -match &#34;/Service&#34;) -and ($LastDate -ne $LastDateTest)) {&#xA;        $ServiceName = $($LastMessage.Message -split &#34; &#34;)[-1]&#xA;        $Result = $(Get-Service $ServiceName -ErrorAction Ignore).Status&#xA;        if ($Result) {&#xA;            Send-ToTelegram -Text $Result&#xA;        } else {&#xA;            Send-ToTelegram -Text &#34;Service not found&#34;&#xA;        }&#xA;        $LastDate = $LastDateTest&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;/Service vpnagent&lt;/code&gt; &lt;br&gt; &lt;code&gt;/Service WinRM&lt;/code&gt; &lt;br&gt; &lt;code&gt;/Service test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Pode&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Start-PodeServer {&#xA;    Add-PodeEndpoint -Address localhost -Port &#34;8080&#34; -Protocol &#34;HTTP&#34;&#xA;    ### Get info endpoints&#xA;    Add-PodeRoute -Path &#34;/&#34; -Method &#34;GET&#34; -ScriptBlock {&#xA;        Write-PodeJsonResponse -Value @{&#xA;        &#34;service&#34;=&#34;/api/service&#34;;&#xA;        &#34;process&#34;=&#34;/api/process&#34;&#xA;        }&#xA;    }&#xA;    ### GET&#xA;    Add-PodeRoute -Path &#34;/api/service&#34; -Method &#34;GET&#34; -ScriptBlock {&#xA;        Write-PodeJsonResponse -Value $(&#xA;            Get-Service | Select-Object Name,@{&#xA;                Name=&#34;Status&#34;; Expression={[string]$_.Status}&#xA;            },@{&#xA;                Name=&#34;StartType&#34;; Expression={[string]$_.StartType}&#xA;            } | ConvertTo-Json&#xA;        )&#xA;    }&#xA;    Add-PodeRoute -Path &#34;/api/process&#34; -Method &#34;GET&#34; -ScriptBlock {&#xA;        Write-PodeJsonResponse -Value $(&#xA;            Get-Process | Sort-Object -Descending CPU | Select-Object -First 15 ProcessName,&#xA;            @{Name=&#34;ProcessorTime&#34;; Expression={$_.TotalProcessorTime -replace &#34;\.\d+$&#34;}},&#xA;            @{Name=&#34;Memory&#34;; Expression={[string]([int]($_.WS / 1024kb))+&#34;MB&#34;}},&#xA;            @{Label=&#34;RunTime&#34;; Expression={((Get-Date) - $_.StartTime) -replace &#34;\.\d+$&#34;}}&#xA;        )&#xA;    }&#xA;    Add-PodeRoute -Path &#34;/api/process-html&#34; -Method &#34;GET&#34; -ScriptBlock {&#xA;        Write-PodeHtmlResponse -Value (&#xA;            Get-Process | Sort-Object -Descending CPU | Select-Object -First 15 ProcessName,&#xA;            @{Name=&#34;ProcessorTime&#34;; Expression={$_.TotalProcessorTime -replace &#34;\.\d+$&#34;}},&#xA;            @{Name=&#34;Memory&#34;; Expression={[string]([int]($_.WS / 1024kb))+&#34;MB&#34;}},&#xA;            @{Label=&#34;RunTime&#34;; Expression={((Get-Date) - $_.StartTime) -replace &#34;\.\d+$&#34;}} # Auto ConvertTo-Html&#xA;        )&#xA;    }&#xA;    ### POST&#xA;    Add-PodeRoute -Path &#34;/api/service&#34; -Method &#34;POST&#34; -ScriptBlock {&#xA;        # https://pode.readthedocs.io/en/latest/Tutorials/WebEvent/&#xA;        # $WebEvent | Out-Default&#xA;        $Value = $WebEvent.Data[&#34;ServiceName&#34;]&#xA;        $Status = (Get-Service -Name $Value).Status&#xA;        Write-PodeJsonResponse -Value @{&#xA;            &#34;Name&#34;=&#34;$Value&#34;;&#xA;            &#34;Status&#34;=&#34;$Status&#34;;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;irm http://localhost:8080/api/service -Method Get&lt;/code&gt; &lt;br&gt; &lt;code&gt;irm http://localhost:8080/api/process -Method Get&lt;/code&gt; &lt;br&gt; &lt;code&gt;http://localhost:8080/api/process-html&lt;/code&gt; использовать браузер &lt;br&gt; &lt;code&gt;irm http://localhost:8080/api/service -Method Post -Body @{&#34;ServiceName&#34; = &#34;AnyDesk&#34;}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Selenium&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Invoke-Expression(New-Object Net.WebClient).DownloadString(&#34;https://raw.githubusercontent.com/Lifailon/Deploy-Selenium/rsa/Deploy-Selenium-Drivers.ps1&#34;)&lt;/code&gt; установка всех драйверов и Chromium подходящей версии для драйвера&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$path = &#34;$home\Documents\Selenium\&#34;&#xA;$ChromeDriver = &#34;$path\ChromeDriver.exe&#34;&#xA;$WebDriver = &#34;$path\WebDriver.dll&#34;&#xA;$SupportDriver = &#34;$path\WebDriver.Support.dll&#34;&#xA;$Chromium = (Get-ChildItem $path -Recurse | Where-Object Name -like chrome.exe).FullName&#xA;Add-Type -Path $WebDriver&#xA;Add-Type -Path $SupportDriver&#xA;try {&#xA;    $ChromeOptions = New-Object OpenQA.Selenium.Chrome.ChromeOptions&#xA;    $ChromeOptions.BinaryLocation = $Chromium&#xA;    $ChromeOptions.AddArgument(&#34;start-maximized&#34;)&#xA;    $ChromeOptions.AcceptInsecureCertificates = $True&#xA;    $Selenium = New-Object OpenQA.Selenium.Chrome.ChromeDriver($ChromeDriver, $ChromeOptions)&#xA;    $Selenium.Navigate().GoToUrl(&#34;https://translate.google.la/&#34;)&#xA;&#xA;    $buttons = $selenium.FindElements([OpenQA.Selenium.By]::TagName(&#39;button&#39;)) # найти все элементы по TagName&#xA;    $buttons = $selenium.FindElements([OpenQA.Selenium.By]::CssSelector(&#39;button&#39;)) # найти все Button используя CSS selector&#xA;    $Image = $buttons | Where-Object Text -Match &#34;Изображения&#34; # отфильтровать элементы по Label или Text&#xA;    $Image.Click() # нажать на Button&#xA;    $Text = $buttons | Where-Object Text -Match &#34;Текст&#34;&#xA;&#x9;$Text.Click()&#xA;    $textarea = $Selenium.FindElements([OpenQA.Selenium.By]::TagName(&#34;textarea&#34;)) # найти все элементы с тэгом textarea&#xA;    $textarea.Count # количество найденных элементов&#xA;    $text1 = $textarea | Where-Object ComputedAccessibleLabel -like &#34;Исходный текст&#34; # отфильтровать по Lable&#xA;    $text1 = $textarea | Where-Object ComputedAccessibleRole -like combobox # отфильтровать по роли &#xA;    $text1 = $selenium.FindElements([OpenQA.Selenium.By]::ClassName(&#34;er8xn&#34;)) # найти элемент по имени класса (class=&#34;&#34;)&#xA;    $text1.SendKeys(&#34;Hello&#34;) # ввести текст в поле&#xA;    Start-Sleep 1&#xA;    $text2 = $selenium.FindElements([OpenQA.Selenium.By]::ClassName(&#34;ryNqvb&#34;))&#xA;    $out = $text2.Text # получить результат перевода из второго textarea&#xA;    Write-Host $out -ForegroundColor Green&#xA;}&#xA;finally {&#xA;    $Selenium.Close()&#xA;    $Selenium.Quit()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;IE&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;$ie.document.IHTMLDocument3_getElementsByTagName(&#34;input&#34;) | select name&lt;/code&gt; получить имена всех Input Box &lt;br&gt; &lt;code&gt;$ie.document.IHTMLDocument3_getElementsByTagName(&#34;button&#34;) | select innerText&lt;/code&gt; получить имена всех Button &lt;br&gt; &lt;code&gt;$ie.Document.documentElement.innerHTML&lt;/code&gt; прочитать сырой Web Content (&amp;lt;input name=&#34;login&#34; tabindex=&#34;100&#34; class=&#34;input__control input__input&#34; id=&#34;uniq32005644019429136&#34; spellcheck=&#34;false&#34; placeholder=&#34;Логин&#34;) &lt;br&gt; &lt;code&gt;$All_Elements = $ie.document.IHTMLDocument3_getElementsByTagName(&#34;*&#34;)&lt;/code&gt; забрать все элементы &lt;br&gt; &lt;code&gt;$Go_Button = $All_Elements | ? innerText -like &#34;go&#34;&lt;/code&gt; поиск элемента по имени &lt;br&gt; &lt;code&gt;$Go_Button | select ie9_tagName&lt;/code&gt; получить TagName (SPAN) для быстрого дальнейшего поиска &lt;br&gt; &lt;code&gt;$SPAN_Elements = $ie.document.IHTMLDocument3_getElementsByTagName(&#34;SPAN&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$ie = New-Object -ComObject InternetExplorer.Application&#xA;$ie.navigate(&#34;https://yandex.ru&#34;)&#xA;$ie.visible = $true&#xA;$ie.document.IHTMLDocument3_getElementByID(&#34;login&#34;).value = &#34;Login&#34;&#xA;$ie.document.IHTMLDocument3_getElementByID(&#34;passwd&#34;).value = &#34;Password&#34;&#xA;$Button_Auth = ($ie.document.IHTMLDocument3_getElementsByTagName(&#34;button&#34;)) | ? innerText -match &#34;Войти&#34;&#xA;$Button_Auth.Click()&#xA;$Result = $ie.Document.documentElement.innerHTML&#xA;$ie.Quit()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;COM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;$wshell = New-Object -ComObject Wscript.Shell&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell | Get-Member&lt;/code&gt; &lt;br&gt; &lt;code&gt;$link = $wshell.CreateShortcut(&#34;$Home\Desktop\Yandex.lnk&#34;)&lt;/code&gt; создать ярлык &lt;br&gt; &lt;code&gt;$link | Get-Member&lt;/code&gt; &lt;br&gt; &lt;code&gt;$link.TargetPath = &#34;https://yandex.ru&#34;&lt;/code&gt; куда ссылается (метод TargetPath объекта $link где хранится объект CreateShortcut) &lt;br&gt; &lt;code&gt;$link.Save()&lt;/code&gt; сохранить&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Set-WinUserLanguageList -LanguageList en-us,ru -Force&lt;/code&gt; изменить языковую раскладку клавиатуры&lt;/p&gt; &#xA;&lt;h3&gt;Wscript.Shell.SendKeys&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;(New-Object -ComObject Wscript.shell).SendKeys([char]173)&lt;/code&gt; включить/выключить звук &lt;br&gt; &lt;code&gt;$wshell.Exec(&#34;notepad.exe&#34;)&lt;/code&gt; запустить приложение &lt;br&gt; &lt;code&gt;$wshell.AppActivate(&#34;Блокнот&#34;)&lt;/code&gt; развернуть запущенное приложение&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$wshell.SendKeys(&#34;Login&#34;)&lt;/code&gt; текст &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{A 5}&#34;)&lt;/code&gt; напечатать букву 5 раз подряд &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;%{TAB}&#34;)&lt;/code&gt; ALT+TAB &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;^&#34;)&lt;/code&gt; CTRL &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;%&#34;)&lt;/code&gt; ALT &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;+&#34;)&lt;/code&gt; SHIFT &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{DOWN}&#34;)&lt;/code&gt; вниз &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{UP}&#34;)&lt;/code&gt; вверх &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{LEFT}&#34;)&lt;/code&gt; влево &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{RIGHT}&#34;)&lt;/code&gt; вправо &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{PGUP}&#34;)&lt;/code&gt; PAGE UP &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{PGDN}&#34;)&lt;/code&gt; PAGE DOWN &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{BACKSPACE}&#34;)&lt;/code&gt; BACKSPACE/BKSP/BS &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{DEL}&#34;)&lt;/code&gt; DEL/DELETE &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{INS}&#34;)&lt;/code&gt; INS/INSERT &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{PRTSC}&#34;)&lt;/code&gt; PRINT SCREEN &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{ENTER}&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{ESC}&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{TAB}&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{END}&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{HOME}&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{BREAK}&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{SCROLLLOCK}&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{CAPSLOCK}&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{NUMLOCK}&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{F1}&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{F12}&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.SendKeys(&#34;{+}{^}{%}{~}{(}{)}{[}{]}{{}{}}&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Get-AltTab {&#xA;(New-Object -ComObject wscript.shell).SendKeys(&#34;%{Tab}&#34;)&#xA;Start-Sleep $(Get-Random -Minimum 30 -Maximum 180)&#xA;Get-AltTab&#xA;}&#xA;Get-AltTab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wscript.Shell.Popup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$wshell = New-Object -ComObject Wscript.Shell&lt;/code&gt; &lt;br&gt; &lt;code&gt;$output = $wshell.Popup(&#34;Выберите действие?&#34;,0,&#34;Заголовок&#34;,4)&lt;/code&gt; &lt;br&gt; &lt;code&gt;if ($output -eq 6) {&#34;yes&#34;} elseif ($output -eq 7) {&#34;no&#34;} else {&#34;no good&#34;}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Type:&#xA;0 ОК&#xA;1 ОК и Отмена&#xA;2 Стоп, Повтор, Пропустить&#xA;3 Да, Нет, Отмена&#xA;4 Да и Нет&#xA;5 Повтор и Отмена&#xA;16 Stop&#xA;32 Question&#xA;48 Exclamation&#xA;64 Information&#xA;&#xA;Output:&#xA;-1 Timeout&#xA;1 ОК&#xA;2 Отмена&#xA;3 Стоп&#xA;4 Повтор&#xA;5 Пропустить&#xA;6 Да&#xA;7 Нет&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WScript.Network&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$wshell = New-Object -ComObject WScript.Network&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell | Get-Member&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.UserName&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.ComputerName&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.UserDomain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Shell.Application&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$wshell = New-Object -ComObject Shell.Application&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell | Get-Member&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.Explore(&#34;C:\&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$wshell.Windows() | Get-Member&lt;/code&gt; получить доступ к открытым в проводнике или браузере Internet Explorer окон&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$shell = New-Object -Com Shell.Application&lt;/code&gt; &lt;br&gt; &lt;code&gt;$RecycleBin = $shell.Namespace(10)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$RecycleBin.Items()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Outlook&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$Outlook = New-Object -ComObject Outlook.Application&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Outlook | Get-Member&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Outlook.Version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$Outlook = New-Object -ComObject Outlook.Application&#xA;$Namespace = $Outlook.GetNamespace(&#34;MAPI&#34;)&#xA;$Folder = $namespace.GetDefaultFolder(4)` исходящие&#xA;$Folder = $namespace.GetDefaultFolder(6)` входящие&#xA;$Explorer = $Folder.GetExplorer()&#xA;$Explorer.Display()&#x9;&#xA;$Outlook.Quit()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Microsoft.Update&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;(New-Object -com &#39;Microsoft.Update.AutoUpdate&#39;).Settings&lt;/code&gt; &lt;br&gt; &lt;code&gt;(New-Object -com &#39;Microsoft.Update.AutoUpdate&#39;).Results&lt;/code&gt; &lt;br&gt; &lt;code&gt;(New-Timespan -Start ((New-Object -com &#39;Microsoft.Update.AutoUpdate&#39;).Results|Select -ExpandProperty LastInstallationSuccessDate) -End (Get-Date)).hours&lt;/code&gt; кол-во часов, прошедших с последней даты установки обновления безопасности в Windows.&lt;/p&gt; &#xA;&lt;h1&gt;dotNET&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;[System.Diagnostics.EventLog] | select Assembly,Module&lt;/code&gt; &lt;br&gt; &lt;code&gt;$EventLog = [System.Diagnostics.EventLog]::new(&#34;Application&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$EventLog = New-Object -TypeName System.Diagnostics.EventLog -ArgumentList Application,192.168.3.100&lt;/code&gt; &lt;br&gt; &lt;code&gt;$EventLog | Get-Member -MemberType Method&lt;/code&gt; &lt;br&gt; &lt;code&gt;$EventLog.MaximumKilobytes&lt;/code&gt; максимальный размер журнала &lt;br&gt; &lt;code&gt;$EventLog.Entries&lt;/code&gt; просмотреть журнал &lt;br&gt; &lt;code&gt;$EventLog.Clear()&lt;/code&gt; очистить журнал&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Join-Path C: Install Test&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.IO.Path]::Combine(&#34;C:&#34;, &#34;Install&#34;, &#34;Test&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Match&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;[System.Math] | Get-Member -Static -MemberType Methods&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Math]::Max(2,7)&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Math]::Min(2,7)&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Math]::Floor(3.9)&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Math]::Truncate(3.9)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;GeneratePassword&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Add-Type -AssemblyName System.Web&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Web.Security.Membership]::GeneratePassword(10,2)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;SoundPlayer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$CriticalSound = New-Object System.Media.SoundPlayer&#xA;$CriticalSound.SoundLocation = &#34;C:\WINDOWS\Media\Windows Critical Stop.wav&#34;&#xA;$CriticalSound.Play()&#xA;&#xA;$GoodSound = New-Object System.Media.SoundPlayer&#xA;$GoodSound.SoundLocation = &#34;C:\WINDOWS\Media\tada.wav&#34;&#xA;$GoodSound.Play()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Static Class&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;[System.Environment] | Get-Member -Static&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Environment]::OSVersion&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Environment]::Version&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Environment]::MachineName&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Environment]::UserName&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;[System.Diagnostics.Process] | Get-Member -Static&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Diagnostics.Process]::Start(&#39;notepad.exe&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;[Clicker]&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$cSource = @&#39;&#xA;using System;&#xA;using System.Drawing;&#xA;using System.Runtime.InteropServices;&#xA;using System.Windows.Forms;&#xA;public class Clicker&#xA;{&#xA;//https://msdn.microsoft.com/en-us/library/windows/desktop/ms646270(v=vs.85).aspx&#xA;[StructLayout(LayoutKind.Sequential)]&#xA;struct INPUT&#xA;{ &#xA;    public int        type; // 0 = INPUT_MOUSE,&#xA;                            // 1 = INPUT_KEYBOARD&#xA;                            // 2 = INPUT_HARDWARE&#xA;    public MOUSEINPUT mi;&#xA;}&#xA;//https://msdn.microsoft.com/en-us/library/windows/desktop/ms646273(v=vs.85).aspx&#xA;[StructLayout(LayoutKind.Sequential)]&#xA;struct MOUSEINPUT&#xA;{&#xA;    public int    dx ;&#xA;    public int    dy ;&#xA;    public int    mouseData ;&#xA;    public int    dwFlags;&#xA;    public int    time;&#xA;    public IntPtr dwExtraInfo;&#xA;}&#xA;//This covers most use cases although complex mice may have additional buttons&#xA;//There are additional constants you can use for those cases, see the msdn page&#xA;const int MOUSEEVENTF_MOVED      = 0x0001 ;&#xA;const int MOUSEEVENTF_LEFTDOWN   = 0x0002 ;&#xA;const int MOUSEEVENTF_LEFTUP     = 0x0004 ;&#xA;const int MOUSEEVENTF_RIGHTDOWN  = 0x0008 ;&#xA;const int MOUSEEVENTF_RIGHTUP    = 0x0010 ;&#xA;const int MOUSEEVENTF_MIDDLEDOWN = 0x0020 ;&#xA;const int MOUSEEVENTF_MIDDLEUP   = 0x0040 ;&#xA;const int MOUSEEVENTF_WHEEL      = 0x0080 ;&#xA;const int MOUSEEVENTF_XDOWN      = 0x0100 ;&#xA;const int MOUSEEVENTF_XUP        = 0x0200 ;&#xA;const int MOUSEEVENTF_ABSOLUTE   = 0x8000 ;&#xA;const int screen_length          = 0x10000 ;&#xA;//https://msdn.microsoft.com/en-us/library/windows/desktop/ms646310(v=vs.85).aspx&#xA;[System.Runtime.InteropServices.DllImport(&#34;user32.dll&#34;)]&#xA;extern static uint SendInput(uint nInputs, INPUT[] pInputs, int cbSize);&#xA;public static void LeftClickAtPoint(int x, int y)&#xA;{&#xA;    //Move the mouse&#xA;    INPUT[] input = new INPUT[3];&#xA;    input[0].mi.dx = x*(65535/System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width);&#xA;    input[0].mi.dy = y*(65535/System.Windows.Forms.Screen.PrimaryScreen.Bounds.Height);&#xA;    input[0].mi.dwFlags = MOUSEEVENTF_MOVED | MOUSEEVENTF_ABSOLUTE;&#xA;    //Left mouse button down&#xA;    input[1].mi.dwFlags = MOUSEEVENTF_LEFTDOWN;&#xA;    //Left mouse button up&#xA;    input[2].mi.dwFlags = MOUSEEVENTF_LEFTUP;&#xA;    SendInput(3, input, Marshal.SizeOf(input[0]));&#xA;}&#xA;}&#xA;&#39;@&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Add-Type -TypeDefinition $cSource -ReferencedAssemblies System.Windows.Forms,System.Drawing&lt;/code&gt; &lt;br&gt; &lt;code&gt;[Clicker]::LeftClickAtPoint(1900,1070)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;[Audio]&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Add-Type -Language CsharpVersion3 -TypeDefinition @&#34;&#xA;using System.Runtime.InteropServices;&#xA;[Guid(&#34;5CDF2C82-841E-4546-9722-0CF74078229A&#34;), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]&#xA;interface IAudioEndpointVolume {&#xA;// f(), g(), ... are unused COM method slots. Define these if you care&#xA;int f(); int g(); int h(); int i();&#xA;int SetMasterVolumeLevelScalar(float fLevel, System.Guid pguidEventContext);&#xA;int j();&#xA;int GetMasterVolumeLevelScalar(out float pfLevel);&#xA;int k(); int l(); int m(); int n();&#xA;int SetMute([MarshalAs(UnmanagedType.Bool)] bool bMute, System.Guid pguidEventContext);&#xA;int GetMute(out bool pbMute);&#xA;}&#xA;[Guid(&#34;D666063F-1587-4E43-81F1-B948E807363F&#34;), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]&#xA;interface IMMDevice {&#xA;int Activate(ref System.Guid id, int clsCtx, int activationParams, out IAudioEndpointVolume aev);&#xA;}&#xA;[Guid(&#34;A95664D2-9614-4F35-A746-DE8DB63617E6&#34;), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]&#xA;interface IMMDeviceEnumerator {&#xA;int f(); // Unused&#xA;int GetDefaultAudioEndpoint(int dataFlow, int role, out IMMDevice endpoint);&#xA;}&#xA;[ComImport, Guid(&#34;BCDE0395-E52F-467C-8E3D-C4579291692E&#34;)] class MMDeviceEnumeratorComObject { }&#xA;public class Audio {&#xA;static IAudioEndpointVolume Vol() {&#xA;var enumerator = new MMDeviceEnumeratorComObject() as IMMDeviceEnumerator;&#xA;IMMDevice dev = null;&#xA;Marshal.ThrowExceptionForHR(enumerator.GetDefaultAudioEndpoint(/*eRender*/ 0, /*eMultimedia*/ 1, out dev));&#xA;IAudioEndpointVolume epv = null;&#xA;var epvid = typeof(IAudioEndpointVolume).GUID;&#xA;Marshal.ThrowExceptionForHR(dev.Activate(ref epvid, /*CLSCTX_ALL*/ 23, 0, out epv));&#xA;return epv;&#xA;}&#xA;public static float Volume {&#xA;get {float v = -1; Marshal.ThrowExceptionForHR(Vol().GetMasterVolumeLevelScalar(out v)); return v;}&#xA;set {Marshal.ThrowExceptionForHR(Vol().SetMasterVolumeLevelScalar(value, System.Guid.Empty));}&#xA;}&#xA;public static bool Mute {&#xA;get { bool mute; Marshal.ThrowExceptionForHR(Vol().GetMute(out mute)); return mute; }&#xA;set { Marshal.ThrowExceptionForHR(Vol().SetMute(value, System.Guid.Empty)); }&#xA;}&#xA;}&#xA;&#34;@&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;[Audio]::Volume = 0.50&lt;/code&gt; &lt;br&gt; &lt;code&gt;[Audio]::Mute = $true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;NetSessionEnum&lt;/h3&gt; &#xA;&lt;p&gt;Function: &lt;a href=&#34;https://learn.microsoft.com/ru-ru/windows/win32/api/lmshare/nf-lmshare-netsessionenum?redirectedfrom=MSDN&#34;&gt;https://learn.microsoft.com/ru-ru/windows/win32/api/lmshare/nf-lmshare-netsessionenum?redirectedfrom=MSDN&lt;/a&gt; &lt;br&gt; Source: &lt;a href=&#34;https://fuzzysecurity.com/tutorials/24.html&#34;&gt;https://fuzzysecurity.com/tutorials/24.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Invoke-NetSessionEnum {&#xA;param (&#xA;[Parameter(Mandatory = $True)][string]$HostName&#xA;)&#xA;Add-Type -TypeDefinition @&#34;&#xA;using System;&#xA;using System.Diagnostics;&#xA;using System.Runtime.InteropServices;&#xA;[StructLayout(LayoutKind.Sequential)]&#xA;public struct SESSION_INFO_10&#xA;{&#xA;    [MarshalAs(UnmanagedType.LPWStr)]public string OriginatingHost;&#xA;    [MarshalAs(UnmanagedType.LPWStr)]public string DomainUser;&#xA;    public uint SessionTime;&#xA;    public uint IdleTime;&#xA;}&#xA;public static class Netapi32&#xA;{&#xA;[DllImport(&#34;Netapi32.dll&#34;, SetLastError=true)]&#xA;    public static extern int NetSessionEnum(&#xA;        [In,MarshalAs(UnmanagedType.LPWStr)] string ServerName,&#xA;        [In,MarshalAs(UnmanagedType.LPWStr)] string UncClientName,&#xA;        [In,MarshalAs(UnmanagedType.LPWStr)] string UserName,&#xA;        Int32 Level,&#xA;        out IntPtr bufptr,&#xA;        int prefmaxlen,&#xA;        ref Int32 entriesread,&#xA;        ref Int32 totalentries,&#xA;        ref Int32 resume_handle);&#xA;         &#xA;[DllImport(&#34;Netapi32.dll&#34;, SetLastError=true)]&#xA;    public static extern int NetApiBufferFree(&#xA;        IntPtr Buffer);&#xA;}&#xA;&#34;@&#xA;# Create SessionInfo10 Struct&#xA;$SessionInfo10 = New-Object SESSION_INFO_10&#xA;$SessionInfo10StructSize = [System.Runtime.InteropServices.Marshal]::SizeOf($SessionInfo10)` Grab size to loop bufptr&#xA;$SessionInfo10 = $SessionInfo10.GetType()` Hacky, but we need this ;))&#xA;# NetSessionEnum params&#xA;$OutBuffPtr = [IntPtr]::Zero` Struct output buffer&#xA;$EntriesRead = $TotalEntries = $ResumeHandle = 0` Counters &amp;amp; ResumeHandle&#xA;$CallResult = [Netapi32]::NetSessionEnum($HostName, &#34;&#34;, &#34;&#34;, 10, [ref]$OutBuffPtr, -1, [ref]$EntriesRead, [ref]$TotalEntries, [ref]$ResumeHandle)&#xA;if ($CallResult -ne 0){&#xA;echo &#34;Mmm something went wrong!`nError Code: $CallResult&#34;&#xA;}&#xA;else {&#xA;if ([System.IntPtr]::Size -eq 4) {&#xA;echo &#34;`nNetapi32::NetSessionEnum Buffer Offset  --&amp;gt; 0x$(&#34;{0:X8}&#34; -f $OutBuffPtr.ToInt32())&#34;&#xA;}&#xA;else {&#xA;echo &#34;`nNetapi32::NetSessionEnum Buffer Offset  --&amp;gt; 0x$(&#34;{0:X16}&#34; -f $OutBuffPtr.ToInt64())&#34;&#xA;}&#xA;echo &#34;Result-set contains $EntriesRead session(s)!&#34;&#xA;# Change buffer offset to int&#xA;$BufferOffset = $OutBuffPtr.ToInt64()&#xA;# Loop buffer entries and cast pointers as SessionInfo10&#xA;for ($Count = 0; ($Count -lt $EntriesRead); $Count++){&#xA;$NewIntPtr = New-Object System.Intptr -ArgumentList $BufferOffset&#xA;$Info = [system.runtime.interopservices.marshal]::PtrToStructure($NewIntPtr,[type]$SessionInfo10)&#xA;$Info&#xA;$BufferOffset = $BufferOffset + $SessionInfo10StructSize&#xA;}&#xA;echo &#34;`nCalling NetApiBufferFree, no memleaks here!&#34;&#xA;[Netapi32]::NetApiBufferFree($OutBuffPtr) |Out-Null&#xA;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Invoke-NetSessionEnum localhost&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CopyFile&lt;/h3&gt; &#xA;&lt;p&gt;Function: &lt;a href=&#34;https://learn.microsoft.com/ru-ru/windows/win32/api/winbase/nf-winbase-copyfile&#34;&gt;https://learn.microsoft.com/ru-ru/windows/win32/api/winbase/nf-winbase-copyfile&lt;/a&gt; &lt;br&gt; Source: &lt;a href=&#34;https://devblogs.microsoft.com/scripting/use-powershell-to-interact-with-the-windows-api-part-1/&#34;&gt;https://devblogs.microsoft.com/scripting/use-powershell-to-interact-with-the-windows-api-part-1/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$MethodDefinition = @&#34;&#xA;[DllImport(&#34;kernel32.dll&#34;, CharSet = CharSet.Unicode)]&#xA;public static extern bool CopyFile(string lpExistingFileName, string lpNewFileName, bool bFailIfExists);&#xA;&#34;@&#xA;$Kernel32 = Add-Type -MemberDefinition $MethodDefinition -Name &#34;Kernel32&#34; -Namespace &#34;Win32&#34; -PassThru&#xA;$Kernel32::CopyFile(&#34;$($Env:SystemRoot)\System32\calc.exe&#34;, &#34;$($Env:USERPROFILE)\Desktop\calc.exe&#34;, $False) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ShowWindowAsync&lt;/h3&gt; &#xA;&lt;p&gt;Function: &lt;a href=&#34;https://learn.microsoft.com/ru-ru/windows/win32/api/winuser/nf-winuser-showwindowasync&#34;&gt;https://learn.microsoft.com/ru-ru/windows/win32/api/winuser/nf-winuser-showwindowasync&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$Signature = @&#34;&#xA;[DllImport(&#34;user32.dll&#34;)]public static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);&#xA;&#34;@&#xA;$ShowWindowAsync = Add-Type -MemberDefinition $Signature -Name &#34;Win32ShowWindowAsync&#34; -Namespace Win32Functions -PassThru&#xA;$ShowWindowAsync | Get-Member -Static&#xA;$ShowWindowAsync::ShowWindowAsync((Get-Process -Id $pid).MainWindowHandle, 2)&#xA;$ShowWindowAsync::ShowWindowAsync((Get-Process -Id $Pid).MainWindowHandle, 3)&#xA;$ShowWindowAsync::ShowWindowAsync((Get-Process -Id $Pid).MainWindowHandle, 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GetAsyncKeyState&lt;/h3&gt; &#xA;&lt;p&gt;Function: &lt;a href=&#34;https://learn.microsoft.com/ru-ru/windows/win32/api/winuser/nf-winuser-getasynckeystate&#34;&gt;https://learn.microsoft.com/ru-ru/windows/win32/api/winuser/nf-winuser-getasynckeystate&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Add-Type -AssemblyName System.Windows.Forms&lt;/code&gt; &lt;br&gt; &lt;code&gt;[int][System.Windows.Forms.Keys]::F1&lt;/code&gt; определить номер [Int] клавиши по ее названию &lt;br&gt; &lt;code&gt;65..90 | % {&#34;{0} = {1}&#34; -f $_, [System.Windows.Forms.Keys]$_}&lt;/code&gt; порядковый номер букв (A..Z)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Get-ControlKey {&#xA;$key = 112&#xA;$Signature = @&#39;&#xA;[DllImport(&#34;user32.dll&#34;, CharSet=CharSet.Auto, ExactSpelling=true)] &#xA;public static extern short GetAsyncKeyState(int virtualKeyCode); &#xA;&#39;@&#xA;Add-Type -MemberDefinition $Signature -Name Keyboard -Namespace PsOneApi&#xA;[bool]([PsOneApi.Keyboard]::GetAsyncKeyState($key) -eq -32767)&#xA;}&#xA;&#xA;Write-Warning &#39;Press F1 to exit&#39;&#xA;while ($true) {&#xA;Write-Host &#39;.&#39; -NoNewline&#xA;if (Get-ControlKey) {&#xA;break&#xA;}&#xA;Start-Sleep -Seconds 0.5&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Console API&lt;/h1&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://powershell.one/tricks/input-devices/detect-key-press&#34;&gt;https://powershell.one/tricks/input-devices/detect-key-press&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;[Console] | Get-Member -Static&lt;/code&gt; &lt;br&gt; &lt;code&gt;[Console]::BackgroundColor = &#34;Blue&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;[Console]::OutputEncoding&lt;/code&gt; используемая кодировка в текущей сессии &lt;br&gt; &lt;code&gt;[Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding(&#34;utf-8&#34;)&lt;/code&gt; изменить кодировку для отображения кириллицы &lt;br&gt; &lt;code&gt;[Console]::outputEncoding = [System.Text.Encoding]::GetEncoding(&#34;cp866&#34;)&lt;/code&gt; для ISE &lt;br&gt; &lt;code&gt;[Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding(&#34;windows-1251&#34;)&lt;/code&gt; для ps2exe &lt;br&gt; &lt;code&gt;Get-Service | Out-File $home\Desktop\Service.txt -Encoding oem&lt;/code&gt; &amp;gt; &lt;br&gt; &lt;code&gt;Get-Service | Out-File $home\Desktop\Service.txt -Append&lt;/code&gt; &amp;gt;&amp;gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;do {&#xA;if ([Console]::KeyAvailable) {&#xA;$keyInfo = [Console]::ReadKey($true)&#xA;break&#xA;}&#xA;Write-Host &#34;.&#34; -NoNewline&#xA;sleep 1&#xA;} while ($true)&#xA;Write-Host&#xA;$keyInfo&#xA;&#xA;function Get-KeyPress {&#xA;param (&#xA;[Parameter(Mandatory)][ConsoleKey]$Key,&#xA;[System.ConsoleModifiers]$ModifierKey = 0&#xA;)&#xA;if ([Console]::KeyAvailable) {&#xA;$pressedKey = [Console]::ReadKey($true)&#xA;$isPressedKey = $key -eq $pressedKey.Key&#xA;if ($isPressedKey) {&#xA;$pressedKey.Modifiers -eq $ModifierKey&#xA;} else {&#xA;[Console]::Beep(1800, 200)&#xA;$false&#xA;}}}&#xA;&#xA;Write-Warning &#39;Press Ctrl+Shift+Q to exit&#39;&#xA;do {&#xA;Write-Host &#34;.&#34; -NoNewline&#xA;$pressed = Get-KeyPress -Key Q -ModifierKey &#39;Control,Shift&#39;&#xA;if ($pressed) {break}&#xA;sleep 1&#xA;} while ($true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Drawing&lt;/h1&gt; &#xA;&lt;p&gt;API: &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/api/system.drawing?view=net-7.0&amp;amp;redirectedfrom=MSDN&#34;&gt;https://learn.microsoft.com/en-us/dotnet/api/system.drawing?view=net-7.0&amp;amp;redirectedfrom=MSDN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Add-Type -AssemblyName System.Drawing&#xA;$Width = 800&#xA;$Height = 400&#xA;$image = New-Object System.Drawing.Bitmap($Width,$Height)&#xA;$graphic = [System.Drawing.Graphics]::FromImage($image)&#xA;$background_color = [System.Drawing.Brushes]::Blue # задать цвет фона (синий)&#xA;$graphic.FillRectangle($background_color, 0, 0, $image.Width, $image.Height)&#xA;$text_color = [System.Drawing.Brushes]::White # задать цвет текста (белый)&#xA;$font = New-Object System.Drawing.Font(&#34;Arial&#34;, 20, [System.Drawing.FontStyle]::Bold) # задать шрифт&#xA;$text = &#34;PowerShell&#34; # указать текст&#xA;$text_position = New-Object System.Drawing.RectangleF(320, 180, 300, 100)  # задать положение текста (x, y, width, height)&#xA;$graphic.DrawString($text, $font, $text_color, $text_position) # нанести текст на изображение&#xA;$image.Save(&#34;$home\desktop\powershell_image.bmp&#34;, [System.Drawing.Imaging.ImageFormat]::Bmp) # сохранить изображение&#xA;$image.Dispose() # освобождение ресурсов&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$path = &#34;$home\desktop\powershell_image.bmp&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Invoke-Item $path&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$src_image = [System.Drawing.Image]::FromFile($path)&#xA;$Width = 400&#xA;$Height = 200&#xA;$dst_image = New-Object System.Drawing.Bitmap -ArgumentList $src_image, $Width, $Height # изменить размер изображения&#xA;$dst_image.Save(&#34;$home\desktop\powershell_image_resize.bmp&#34;, [System.Drawing.Imaging.ImageFormat]::Bmp)&#xA;&#xA;$rotated_image = $src_image.Clone() # создать копию исходного изображения&#xA;$rotated_image.RotateFlip([System.Drawing.RotateFlipType]::Rotate180FlipNone) # перевернуть изображение на 180 градусов&#xA;$rotated_image.Save(&#34;$home\desktop\powershell_image_rotated.bmp&#34;, [System.Drawing.Imaging.ImageFormat]::Bmp)&#xA;$src_image.Dispose() # закрыть (отпустить) исходный файл&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;ObjectEvent&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$Timer = New-Object System.Timers.Timer&#xA;$Timer.Interval = 1000&#xA;Register-ObjectEvent -InputObject $Timer -EventName Elapsed -SourceIdentifier Timer.Output -Action {&#xA;$Random = Get-Random -Min 0 -Max 100&#xA;Write-Host $Random &#xA;}&#xA;$Timer.Enabled = $True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$Timer.Enabled = $False&lt;/code&gt; остановить &lt;br&gt; &lt;code&gt;$Timer | Get-Member -MemberType Event&lt;/code&gt; отобразить список всех событий объекта &lt;br&gt; &lt;code&gt;Get-EventSubscriber&lt;/code&gt; список зарегистрированных подписок на события в текущей сессии &lt;br&gt; &lt;code&gt;Unregister-Event -SourceIdentifier Timer.Output&lt;/code&gt; удаляет регистрацию подписки на событие по имени события (EventName) или все * &lt;br&gt; &lt;code&gt;-Forward&lt;/code&gt; перенаправляет события из удаленного сеанса (New-PSSession) в локальный сеанс &lt;br&gt; &lt;code&gt;-SupportEvent&lt;/code&gt; не выводит результат регистрации события на экран (и Get-EventSubscriber и Get-Job)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Register-EngineEvent -SourceIdentifier PowerShell.Exiting -Action {&#xA;$date = Get-Date -f hh:mm:ss&#xA;(New-Object -ComObject Wscript.Shell).Popup(&#34;PowerShell Exit: $date&#34;,0,&#34;Action&#34;,64)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Sockets&lt;/h1&gt; &#xA;&lt;h3&gt;UDP Socket&lt;/h3&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://cloudbrothers.info/en/test-udp-connection-powershell/&#34;&gt;https://cloudbrothers.info/en/test-udp-connection-powershell/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Start-UDPServer {&#xA;param(&#xA;$Port = 5201&#xA;)&#xA;$RemoteComputer = New-Object System.Net.IPEndPoint([System.Net.IPAddress]::Any, 0)&#xA;do {&#xA;$UdpObject = New-Object System.Net.Sockets.UdpClient($Port)&#xA;$ReceiveBytes = $UdpObject.Receive([ref]$RemoteComputer)&#xA;$UdpObject.Close()&#xA;$ASCIIEncoding = New-Object System.Text.ASCIIEncoding&#xA;[string]$ReturnString = $ASCIIEncoding.GetString($ReceiveBytes)&#xA;[PSCustomObject]@{&#xA;LocalDateTime = $(Get-Date -UFormat &#34;%Y-%m-%d %T&#34;)&#xA;ClientIP      = $RemoteComputer.address.ToString()&#xA;ClientPort    = $RemoteComputer.Port.ToString()&#xA;Message       = $ReturnString&#xA;}&#xA;} while (1)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Start-UDPServer -Port 5201&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Test-NetUDPConnection&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Test-NetUDPConnection {&#xA;param(&#xA;[string]$ComputerName = &#34;127.0.0.1&#34;,&#xA;[int32]$PortServer    = 5201,&#xA;[int32]$PortClient    = 5211,&#xA;$Message&#xA;)&#xA;begin {&#xA;$UdpObject = New-Object system.Net.Sockets.Udpclient($PortClient)&#xA;$UdpObject.Connect($ComputerName, $PortServer)&#xA;}&#xA;process {&#xA;$ASCIIEncoding = New-Object System.Text.ASCIIEncoding&#xA;if (!$Message) {$Message = Get-Date -UFormat &#34;%Y-%m-%d %T&#34;}&#xA;$Bytes = $ASCIIEncoding.GetBytes($Message)&#xA;[void]$UdpObject.Send($Bytes, $Bytes.length)&#xA;}&#xA;end {&#xA;$UdpObject.Close()&#xA;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Test-NetUDPConnection -ComputerName 127.0.0.1 -PortServer 5201&lt;/code&gt; &lt;br&gt; &lt;code&gt;Test-NetUDPConnection -ComputerName 127.0.0.1 -PortServer 514 -Message &#34;&amp;lt;30&amp;gt;May 31 00:00:00 HostName multipathd[784]: Test message&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;TCP Socket&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Start-TCPServer {&#xA;param(&#xA;$Port = 5201&#xA;)&#xA;do {&#xA;$TcpObject = New-Object System.Net.Sockets.TcpListener($port)&#xA;$ReceiveBytes = $TcpObject.Start()&#xA;$ReceiveBytes = $TcpObject.AcceptTcpClient()&#xA;$TcpObject.Stop()&#xA;$ReceiveBytes.Client.RemoteEndPoint | select Address,Port&#xA;} while (1)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Start-TCPServer -Port 5201&lt;/code&gt; &lt;br&gt; &lt;code&gt;Test-NetConnection -ComputerName 127.0.0.1 -Port 5201&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;WakeOnLan&lt;/h3&gt; &#xA;&lt;p&gt;Broadcast package consisting of 6 byte filled &#34;0xFF&#34; and then 96 byte where the mac address is repeated 16 times&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Send-WOL {&#xA;param (&#xA;[Parameter(Mandatory = $True)]$Mac,&#xA;$IP,&#xA;[int]$Port = 9&#xA;)&#xA;$Mac = $Mac.replace(&#34;:&#34;, &#34;-&#34;)&#xA;if (!$IP) {$IP = [System.Net.IPAddress]::Broadcast}&#xA;$SynchronizationChain = [byte[]](,0xFF * 6)&#xA;$ByteMac = $Mac.Split(&#34;-&#34;) | %{[byte](&#34;0x&#34; + $_)}&#xA;$Package = $SynchronizationChain + ($ByteMac * 16)&#xA;$UdpClient = New-Object System.Net.Sockets.UdpClient&#xA;$UdpClient.Connect($IP, $port)&#xA;$UdpClient.Send($Package, $Package.Length)&#xA;$UdpClient.Close()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Send-WOL -Mac &#34;D8-BB-C1-70-A3-4E&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Send-WOL -Mac &#34;D8-BB-C1-70-A3-4E&#34; -IP 192.168.3.100&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Encoding&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$ByteText = [System.Text.Encoding]::UTF8.GetBytes(&#34;password&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Text = [System.Text.Encoding]::UTF8.GetString($ByteText)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Base64&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$text = &#34;password&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$byte = [System.Text.Encoding]::Unicode.GetBytes($text)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$base64 = [System.Convert]::ToBase64String($byte)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$decode_base64 = [System.Convert]::FromBase64String($base64)&lt;/code&gt; &lt;br&gt; &lt;code&gt;$decode_string = [System.Text.Encoding]::Unicode.GetString($decode_base64)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$path_image = &#34;$home\Documents\1200x800.jpg&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$BBase64 = [System.Convert]::ToBase64String((Get-Content $path_image -Encoding Byte))&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-Type -assembly System.Drawing&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Image = [System.Drawing.Bitmap]::FromStream([IO.MemoryStream][Convert]::FromBase64String($BBase64))&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Image.Save(&#34;$home\Desktop\1200x800.jpg&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;HTTP Listener&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$httpListener = New-Object System.Net.HttpListener&#xA;$httpListener.Prefixes.Add(&#34;http://+:8888/&#34;)&#xA;$httpListener.Start()&#xA;while (!([console]::KeyAvailable)) {&#xA;$info = Get-Service | select name,status | ConvertTo-HTML&#xA;$context = $httpListener.GetContext()&#xA;$context.Response.StatusCode = 200&#xA;$context.Response.ContentType = &#39;text/HTML&#39;&#xA;$WebContent = $info&#xA;$EncodingWebContent = [Text.Encoding]::UTF8.GetBytes($WebContent)&#xA;$context.Response.OutputStream.Write($EncodingWebContent , 0, $EncodingWebContent.Length)&#xA;$context.Response.Close()&#xA;Get-NetTcpConnection -LocalPort 8888&#xA;(Get-Date).datetime&#xA;}&#xA;$httpListener.Close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WebClient&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;[System.Net.WebClient] | Get-Member&lt;/code&gt; &lt;br&gt; &lt;code&gt;(New-Object Net.WebClient).DownloadString(&#34;https://raw.githubusercontent.com/Lifailon/PowerShell-Commands/rsa/README.md&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Certificate&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Get-WebCertificate ($srv) {&#xA;$iwr = iwr $srv&#xA;$status_code = $iwr.StatusCode&#xA;$status = $iwr.BaseResponse.StatusCode&#xA;$info = $iwr.BaseResponse.Server&#xA;$spm = [System.Net.ServicePointManager]::FindServicePoint($srv)&#xA;$date_end = $spm.Certificate.GetExpirationDateString()&#xA;$cert_name = ($spm.Certificate.Subject) -replace &#34;CN=&#34;&#xA;$cert_owner = ((($spm.Certificate.Issuer) -split &#34;, &#34;) | where {$_ -match &#34;O=&#34;}) -replace &#34;O=&#34;&#xA;$Collections = New-Object System.Collections.Generic.List[System.Object]&#xA;$Collections.Add([PSCustomObject]@{&#xA;Host = $srv;&#xA;Server = $info;&#xA;Status =  $status;&#xA;StatusCode = $status_code;&#xA;Certificate = $cert_name;&#xA;Issued = $cert_owner;&#xA;End = $date_end&#xA;})&#xA;$Collections&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-WebCertificate https://google.com&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Excel&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$path = &#34;$home\Desktop\Services-to-Excel.xlsx&#34;&#xA;$Excel = New-Object -ComObject Excel.Application&#xA;$Excel.Visible = $false` отключить открытие GUI&#xA;$ExcelWorkBook = $Excel.Workbooks.Add()` Создать книгу&#xA;$ExcelWorkSheet = $ExcelWorkBook.Worksheets.Item(1)` Создать лист&#xA;$ExcelWorkSheet.Name = &#34;Services&#34;` задать имя листа&#xA;$ExcelWorkSheet.Cells.Item(1,1) = &#34;Name service&#34;&#xA;# Задать имена столбцов:&#xA;$ExcelWorkSheet.Cells.Item(1,2) = &#34;Description&#34;&#xA;$ExcelWorkSheet.Cells.Item(1,3) = &#34;Status&#34;&#xA;$ExcelWorkSheet.Cells.Item(1,4) = &#34;Startup type&#34;&#xA;$ExcelWorkSheet.Rows.Item(1).Font.Bold = $true` выделить жирным шрифтом&#xA;$ExcelWorkSheet.Rows.Item(1).Font.size=14&#xA;# Задать ширину колонок:&#xA;$ExcelWorkSheet.Columns.Item(1).ColumnWidth=30&#xA;$ExcelWorkSheet.Columns.Item(2).ColumnWidth=80&#xA;$ExcelWorkSheet.Columns.Item(3).ColumnWidth=15&#xA;$ExcelWorkSheet.Columns.Item(4).ColumnWidth=25&#xA;$services =  Get-Service&#xA;$counter = 2` задать начальный номер строки для записи&#xA;foreach ($service in $services) {&#xA;$status = $service.Status&#xA;if ($status -eq 1) {&#xA;$status_type = &#34;Stopped&#34;&#xA;} elseif ($status -eq 4) {&#xA;$status_type = &#34;Running&#34;&#xA;}&#xA;$Start = $service.StartType&#xA;if ($Start -eq 1) {&#xA;$start_type = &#34;Delayed start&#34;&#xA;} elseif ($Start -eq 2) {&#xA;$start_type = &#34;Automatic&#34;&#xA;} elseif ($Start -eq 3) {&#xA;$start_type = &#34;Manually&#34;&#xA;} elseif ($Start -eq 4) {&#xA;$start_type = &#34;Disabled&#34;&#xA;}&#xA;$ExcelWorkSheet.Columns.Item(1).Rows.Item($counter) = $service.Name&#xA;$ExcelWorkSheet.Columns.Item(2).Rows.Item($counter) = $service.DisplayName&#xA;$ExcelWorkSheet.Columns.Item(3).Rows.Item($counter) = $status_type&#xA;$ExcelWorkSheet.Columns.Item(4).Rows.Item($counter) = $start_type&#xA;if ($status_type -eq &#34;Running&#34;) {&#xA;$ExcelWorkSheet.Columns.Item(3).Rows.Item($counter).Font.Bold = $true&#xA;}&#xA;$counter++` +1 увеличить для счетчика строки Rows&#xA;}&#xA;$ExcelWorkBook.SaveAs($path)&#xA;$ExcelWorkBook.close($true)&#xA;$Excel.Quit()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Excel.Application.Open&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$path = &#34;$home\Desktop\Services-to-Excel.xlsx&#34;&#xA;$Excel = New-Object -ComObject Excel.Application&#xA;$Excel.Visible = $false&#xA;$ExcelWorkBook = $excel.Workbooks.Open($path)` открыть xlsx-файл&#xA;$ExcelWorkBook.Sheets | select Name,Index` отобразить листы&#xA;$ExcelWorkSheet = $ExcelWorkBook.Sheets.Item(1)` открыть лист по номеру Index&#xA;1..100 | %{$ExcelWorkSheet.Range(&#34;A$_&#34;).Text}` прочитать значение из столбца А строки c 1 по 100&#xA;$Excel.Quit()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ImportExcel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Module -Name ImportExcel&lt;/code&gt; &lt;br&gt; &lt;code&gt;$data | Export-Excel .\Data.xlsx&lt;/code&gt; &lt;br&gt; &lt;code&gt;$data = Import-Excel .\Data.xlsx&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$data = ps&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Chart = New-ExcelChartDefinition -XRange CPU -YRange WS -Title &#34;Process&#34; -NoLegend&lt;/code&gt; &lt;br&gt; &lt;code&gt;$data | Export-Excel .\ps.xlsx -AutoNameRange -ExcelChartDefinition $Chart -Show&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CSV&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Service | Select Name,DisplayName,Status,StartType | Export-Csv -path &#34;$home\Desktop\Get-Service.csv&#34; -Append -Encoding Default&lt;/code&gt; экспортировать в csv (-Encoding UTF8) &lt;br&gt; &lt;code&gt;Import-Csv &#34;$home\Desktop\Get-Service.csv&#34; -Delimiter &#34;,&#34;&lt;/code&gt; импортировать массив&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$data = ConvertFrom-Csv @&#34;&#xA;Region,State,Units,Price&#xA;West,Texas,927,923.71&#xA;$null,Tennessee,466,770.67&#xA;&#34;@&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$systeminfo = systeminfo /FO csv | ConvertFrom-Csv&lt;/code&gt; вывод работы программы в CSV и конвертация в объект &lt;br&gt; &lt;code&gt;$systeminfo.&#34;Полный объем физической памяти&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$systeminfo.&#34;Доступная физическая память&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ConvertFrom-String&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;&#39;&#xA;log = &#xA;{&#xA;   level = 4;&#xA;};&#xA;&#39; | ConvertFrom-String` создает PSCustomObject (разбивает по пробелам, удаляет все пробелы и пустые строки)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ConvertFrom-StringData&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;&#34;&#xA;key1 = value1&#xA;key2 = value2&#xA;&#34; | ConvertFrom-StringData # создает Hashtable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;XML&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$xml = [xml](Get-Content $home\desktop\test.rdg)` прочитать содержимое XML-файла&#xA;$xml.load(&#34;$home\desktop\test.rdg&#34;)` открыть файл&#xA;$xml.RDCMan.file.group.properties.name` имена групп&#xA;$xml.RDCMan.file.group.server.properties` имена всех серверов&#xA;$xml.RDCMan.file.group[3].server.properties` список серверов в 4-й группе&#xA;($xml.RDCMan.file.group[3].server.properties | ? name -like ADIRK).Name = &#34;New-Name&#34;` изменить значение&#xA;$xml.RDCMan.file.group[3].server[0].properties.displayName = &#34;New-displayName&#34; &#xA;$xml.RDCMan.file.group[3].server[1].RemoveAll()` удалить объект (2-й сервер в списке)&#xA;$xml.Save($file)` сохранить содержимое объекта в файла&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Service | Export-Clixml -path $home\desktop\test.xml&lt;/code&gt; экспортировать объект PowerShell в XML &lt;br&gt; &lt;code&gt;Import-Clixml -Path $home\desktop\test.xml&lt;/code&gt; импортировать объект XML в PowerShell &lt;br&gt; &lt;code&gt;ConvertTo-Xml (Get-Service)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Get-CredToXML&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function Get-CredToXML {&#xA;    param (&#xA;        $CredFile = &#34;$home\Documents\cred.xml&#34;&#xA;    )&#xA;    if (Test-Path $CredFile) {&#xA;        Import-Clixml -path $CredFile&#xA;    }&#xA;    elseif (!(Test-Path $CredFile)) {&#xA;        $Cred = Get-Credential -Message &#34;Enter credential&#34;&#xA;        if ($Cred -ne $null) {&#xA;        $Cred | Export-CliXml -Path $CredFile&#xA;        $Cred&#xA;    }&#xA;    else {&#xA;        return&#xA;    }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$Cred = Get-CredToXML&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Login = $Cred.UserName&lt;/code&gt; &lt;br&gt; &lt;code&gt;$PasswordText = $Cred.GetNetworkCredential().password&lt;/code&gt; получить пароль в текстовом виде&lt;/p&gt; &#xA;&lt;h3&gt;XmlWriter (Extensible Markup Language)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$XmlWriterSettings = New-Object System.Xml.XmlWriterSettings&#xA;$XmlWriterSettings.Indent = $true` включить отступы&#xA;$XmlWriterSettings.IndentChars = &#34;    &#34;` задать отступ&#xA;&#xA;$XmlFilePath = &#34;$home\desktop\test.xml&#34;&#xA;$XmlObjectWriter = [System.XML.XmlWriter]::Create($XmlFilePath, $XmlWriterSettings)` создать документ&#xA;$XmlObjectWriter.WriteStartDocument()` начать запись в документ&#xA;&#xA;$XmlObjectWriter.WriteComment(&#34;Comment&#34;)&#xA;$XmlObjectWriter.WriteStartElement(&#34;Root&#34;)` создать стартовый элемент, который содержит дочерние объекты&#xA;    $XmlObjectWriter.WriteStartElement(&#34;Configuration&#34;)` создать первый дочерний элемент для BaseSettings&#xA;        $XmlObjectWriter.WriteElementString(&#34;Language&#34;,&#34;RU&#34;)&#xA;        $XmlObjectWriter.WriteStartElement(&#34;Fonts&#34;)   &#x9;&#x9;# &amp;lt;Fonts&amp;gt;&#xA;            $XmlObjectWriter.WriteElementString(&#34;Name&#34;,&#34;Arial&#34;)&#xA;            $XmlObjectWriter.WriteElementString(&#34;Size&#34;,&#34;12&#34;)&#xA;        $XmlObjectWriter.WriteEndElement()               &#x9;# &amp;lt;/Fonts&amp;gt;&#xA;    $XmlObjectWriter.WriteEndElement()` конечный элемент &amp;lt;/Configuration&amp;gt;&#xA;$XmlObjectWriter.WriteEndElement()` конечный элемент &amp;lt;/Root&amp;gt;&#xA;&#xA;$XmlObjectWriter.WriteEndDocument()` завершить запись в документ&#xA;$XmlObjectWriter.Flush()&#xA;$XmlObjectWriter.Close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CreateElement&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$xml = [xml](gc $home\desktop\test.xml)&#xA;$xml.Root.Configuration.Fonts&#xA;$NewElement = $xml.CreateElement(&#34;Fonts&#34;)` выбрать элемент куда добавить&#xA;$NewElement.set_InnerXML(&#34;&amp;lt;Name&amp;gt;Times New Roman&amp;lt;/Name&amp;gt;&amp;lt;Size&amp;gt;14&amp;lt;/Size&amp;gt;&#34;)` Заполнить значениями дочерние элементы Fonts&#xA;$xml.Root.Configuration.AppendChild($NewElement)` добавить элемент новой строкой в Configuration (родитель Fonts)&#xA;$xml.Save(&#34;$home\desktop\test.xml&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;JSON&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$log = &#39;&#xA;{&#xA;  &#34;log&#34;: {&#xA;    &#34;level&#34;: 7&#xA;  }&#xA;}&#xA;&#39; | ConvertFrom-Json&#xA;&#xA;Get-Service | ConvertTo-Json&#xA;&#xA;$OOKLA  = &#39;&#xA;{&#xA;&#34;result&#34; : &#xA;{&#34;date&#34;:1683534970,&#34;id&#34;:&#34;14708271987&#34;,&#34;connection_icon&#34;:&#34;wireless&#34;,&#34;download&#34;:33418,&#34;upload&#34;:35442,&#34;latency&#34;:15,&#34;distance&#34;:50,&#34;country_code&#34;:&#34;RU&#34;,&#34;server_id&#34;:2707,&#34;server_name&#34;:&#34;Bryansk&#34;,&#34;sponsor_name&#34;:&#34;DOM.RU&#34;,&#34;sponsor_url&#34;:null,&#34;connection_mode&#34;:&#34;multi&#34;,&#34;isp_name&#34;:&#34;Resource Link&#34;,&#34;isp_rating&#34;:&#34;4.0&#34;,&#34;test_rank&#34;:63,&#34;test_grade&#34;:&#34;B-&#34;,&#34;test_rating&#34;:4,&#34;idle_latency&#34;:&#34;17&#34;,&#34;download_latency&#34;:&#34;116&#34;,&#34;upload_latency&#34;:&#34;75&#34;,&#34;additional_servers&#34;:&#xA;[{&#34;server_id&#34;:8191,&#34;server_name&#34;:&#34;Bryansk&#34;,&#34;sponsor_name&#34;:&#34;SectorTelecom.ru&#34;},{&#34;server_id&#34;:46278,&#34;server_name&#34;:&#34;Fokino&#34;,&#34;sponsor_name&#34;:&#34;Fokks - Promyshlennaya avtomatika Ltd.&#34;},{&#34;server_id&#34;:18218,&#34;server_name&#34;:&#34;Bryansk&#34;,&#34;sponsor_name&#34;:&#34;RIA-link Ltd.&#34;}],&#xA;&#34;path&#34;:&#34;result\u002F14708271987&#34;,&#34;hasSecondary&#34;:true&#xA;}&#xA;}&#xA;&#39; | ConvertFrom-Json&#xA;$ookla.result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;YAML&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Import-Module PSYaml` используется в Docker/Ansible&#xA;$netplan = &#34;&#xA;network:` словарь по типу - ключ : значение с вложенными словарями&#xA;  ethernets:&#xA;    ens160:&#xA;      dhcp4: yes&#xA;      dhcp6: no&#xA;      nameservers:&#xA;        addresses:` [8.8.8.8, 1.1.1.1]` список данных (строк)&#xA;&#x9;&#x9;  - 8.8.8.8&#xA;&#x9;&#x9;  - 1.1.1.1&#xA;  version: 2&#xA;&#34;&#xA;$network = ConvertFrom-Yaml $netplan&#xA;$network.Values.ethernets.ens160.nameservers&#xA;&#xA;$DataType = &#34;&#xA;int: !!int 10.1&#xA;flo: !!float 10.1&#xA;str: !!str string&#xA;bool: !!bool` boolean&#xA;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;HTML&lt;/h1&gt; &#xA;&lt;h3&gt;ConvertFrom-Html&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function ConvertFrom-Html {&#xA;    param (&#xA;        [Parameter(ValueFromPipeline)]$url&#xA;    )&#xA;    $irm = Invoke-RestMethod $url&#xA;    $HTMLFile = New-Object -ComObject HTMLFile&#xA;    $Bytes = [System.Text.Encoding]::Unicode.GetBytes($irm)&#xA;    $HTMLFile.write($Bytes)&#xA;    ($HTMLFile.all | where {$_.tagname -eq &#34;body&#34;}).innerText&#xA;}&#xA;&#xA;$apache_status = &#34;http://192.168.3.102/server-status&#34;&#xA;$apache_status | ConvertFrom-Html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ConvertTo-Html&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Process | select Name, CPU | ConvertTo-Html -As Table &amp;gt; &#34;$home\desktop\proc-table.html&#34;&lt;/code&gt; вывод в формате List (Format-List) или Table (Format-Table)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$servers = &#34;ya.ru&#34;,&#34;ya.com&#34;,&#34;google.com&#34;&#xA;$path = &#34;$home\Desktop\Ping.html&#34; &#xA;$header = @&#34;&#xA;&amp;lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Strict//EN&#34; &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&#34;&amp;gt;&#xA;&amp;lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34; lang=&#34;en&#34; xml:lang=&#34;en&#34;&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;&amp;lt;title&amp;gt;Отчет о статусе серверов&amp;lt;/title&amp;gt;&#xA;&amp;lt;style type=&#34;text/css&#34;&amp;gt;&#xA;&amp;lt;!--&#xA;body {&#xA;background-color: #E0E0E0;&#xA;font-family: sans-serif&#xA;}&#xA;table, th, td {&#xA;background-color: white;&#xA;border-collapse:collapse;&#xA;border: 1px solid black;&#xA;padding: 5px&#xA;}&#xA;--&amp;gt;&#xA;&amp;lt;/style&amp;gt;&#xA;&#34;@&#xA;$body = @&#34;&#xA;&amp;lt;h1&amp;gt;Ping status&amp;lt;/h1&amp;gt;&#xA;&amp;lt;p&amp;gt;$(get-date -Format &#34;dd.MM.yyyy hh:mm&#34;).&amp;lt;/p&amp;gt;&#xA;&#34;@&#xA;$results = foreach ($server in $servers) { &#xA;    if (Test-Connection $server -Count 1 -ea 0 -Quiet) { &#xA;        $status = &#34;Up&#34; &#xA;    }&#xA;    else { &#xA;        $status = &#34;Down&#34;&#xA;    }&#xA;    [PSCustomObject]@{&#xA;        Name = $server&#xA;        Status = $status&#xA;    }&#xA;}&#xA;$results | ConvertTo-Html -head $header -body $body | foreach {&#xA;    $_ -replace &#34;&amp;lt;td&amp;gt;Down&amp;lt;/td&amp;gt;&#34;,&#34;&amp;lt;td style=&#39;background-color:#FF8080&#39;&amp;gt;Down&amp;lt;/td&amp;gt;&#34; -replace &#34;&amp;lt;td&amp;gt;Up&amp;lt;/td&amp;gt;&#34;,&#34;&amp;lt;td style=&#39;background-color:#5BCCF3&#39;&amp;gt;Up&amp;lt;/td&amp;gt;&#34;&#xA;} | Out-File $path&#xA;Invoke-Item $path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PSWriteHTML&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Import-Module PSWriteHTML&#xA;(Get-Module PSWriteHTML).ExportedCommands&#xA;Get-Service | Out-GridHtml -FilePath ~\Desktop\Get-Service-Out-GridHtml.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HtmlReport&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Import-Module HtmlReport&#xA;$topVM = ps | Sort PrivateMemorySize -Descending | Select -First 10 | %{,@(($_.ProcessName + &#34; &#34; + $_.Id), $_.PrivateMemorySize)}&#xA;$topCPU = ps | Sort CPU -Descending | Select -First 10 | %{,@(($_.ProcessName + &#34; &#34; + $_.Id), $_.CPU)}&#xA;New-Report -Title &#34;Piggy Processes&#34; -Input {&#xA;New-Chart Bar &#34;Top VM Users&#34; -input $topVm&#xA;New-Chart Column &#34;Top CPU Overall&#34; -input $topCPU&#xA;ps | Select ProcessName, Id, CPU, WorkingSet, *MemorySize | New-Table &#34;All Processes&#34;&#xA;} &amp;gt; ~\Desktop\Get-Process-HtmlReport.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;SQLite&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$path = &#34;$home\Documents\Get-Service.db&#34;&#xA;$Module = Get-Module MySQLite&#xA;if ($Module -eq $null) {&#xA;Install-Module MySQLite -Repository PSGallery -Scope CurrentUser&#xA;}&#xA;Import-Module MySQLite&#xA;New-MySQLiteDB -Path $path # создать БД&#xA;Invoke-MySQLiteQuery -Path $path -Query &#34;CREATE TABLE Service (Name TEXT NOT NULL, DisplayName TEXT NOT NULL, Status TEXT NOT NULL);&#34; # создать таблицу&#xA;&#xA;$Service = Get-Service | select Name,DisplayName,Status&#xA;foreach ($S in $Service) {&#xA;$Name = $S.Name&#xA;$DName = $S.DisplayName&#xA;$Status = $S.Status&#xA;Invoke-MySQLiteQuery -Path $path -Query &#34;INSERT INTO Service (Name, DisplayName, Status) VALUES (&#39;$Name&#39;, &#39;$DName&#39;, &#39;$Status&#39;);&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;(Get-MySQLiteDB $path).Tables&lt;/code&gt; список таблиц в базе &lt;br&gt; &lt;code&gt;Invoke-MySQLiteQuery -Path $path -Query &#34;SELECT name FROM sqlite_master WHERE type=&#39;table&#39;;&#34;&lt;/code&gt; список таблиц в базе &lt;br&gt; &lt;code&gt;Invoke-MySQLiteQuery -Path $path -Query &#34;DROP TABLE Service;&#34;&lt;/code&gt; удалить таблицу&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$TableName = &#34;Service&#34;&#xA;Invoke-MySQLiteQuery -Path $path -Query &#34;SELECT * FROM $TableName&#34; # прочитать содержимое таблицы (в формате объекта)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Service | select Name,DisplayName,Status | ConvertTo-MySQLiteDB -Path $path -TableName Service -force&lt;/code&gt; конвертировать объект в таблицу&lt;/p&gt; &#xA;&lt;h3&gt;Database password&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$Connection = New-SQLiteConnection -DataSource $path&#xA;$Connection.ChangePassword(&#34;password&#34;)&#xA;$Connection.Close()&#xA;Invoke-SqliteQuery -Query &#34;SELECT * FROM Service&#34; -DataSource &#34;$path;Password=password&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;MySQL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;apt -y install mysql-server mysql-client&lt;/code&gt; &lt;br&gt; &lt;code&gt;mysql -V&lt;/code&gt; &lt;br&gt; &lt;code&gt;systemctl status mysql&lt;/code&gt; &lt;br&gt; &lt;code&gt;mysqladmin -u root password&lt;/code&gt; задать пароль root&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/mysql/mysql.conf.d/mysqld.cnf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[mysqld]&#xA;user            = mysql&#xA;# pid-file      = /var/run/mysqld/mysqld.pid&#xA;# socket        = /var/run/mysqld/mysqld.sock&#xA;# port          = 3306&#xA;# datadir       = /var/lib/mysql&#xA;# tmpdir                = /tmp&#xA;bind-address            = 0.0.0.0&#xA;mysqlx-bind-address     = 0.0.0.0&#xA;log_error = /var/log/mysql/error.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;systemctl restart mysql&lt;/code&gt; &lt;br&gt; &lt;code&gt;ss -tulnp | grep 3306&lt;/code&gt; &lt;br&gt; &lt;code&gt;ufw allow 3306/tcp&lt;/code&gt; &lt;br&gt; &lt;code&gt;nc -zv 192.168.1.253 3306&lt;/code&gt; &lt;br&gt; &lt;code&gt;tnc 192.168.1.253 -p 3306&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mysql -u root -p&lt;/code&gt; &lt;br&gt; &lt;code&gt;SELECT user(), now(), version();&lt;/code&gt; &lt;br&gt; &lt;code&gt;quit;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mysql -u root -p -e &#39;SHOW TABLES FROM db_aduser;&#39;&lt;/code&gt; отобразить список таблиц без подключения к консоли MySQL&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CREATE&lt;/code&gt; создать БД, пользователя, таблицу &lt;br&gt; &lt;code&gt;ALTER&lt;/code&gt; управление столбцами таблице &lt;br&gt; &lt;code&gt;DROP&lt;/code&gt; удалить БД, пользователя, таблицу &lt;br&gt; &lt;code&gt;USE&lt;/code&gt; выбрать БД &lt;br&gt; &lt;code&gt;SHOW&lt;/code&gt; вывесли список БД, прав доступа пользователя (GRANTS), названия столбцов и их свойства &lt;br&gt; &lt;code&gt;GRANT&lt;/code&gt; дать доступ пользователю к БД &lt;br&gt; &lt;code&gt;REVOKE&lt;/code&gt; удалить доступ пользователя к БД &lt;br&gt; &lt;code&gt;UPDATE&lt;/code&gt; изменить права доступа, значения с таблице &lt;br&gt; &lt;code&gt;FLUSH&lt;/code&gt; обновить права доступа &lt;br&gt; &lt;code&gt;SELECT&lt;/code&gt; отобразить выбранную БД, вывести список пользователей, выборка данных в таблице &lt;br&gt; &lt;code&gt;INSERT&lt;/code&gt; внести данные &lt;br&gt; &lt;code&gt;DELETE&lt;/code&gt; удалить данные в (FROM) таблице&lt;/p&gt; &#xA;&lt;h3&gt;DATA TYPE&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;VARCHAR(N)&lt;/code&gt; строка переменной длины, в формате ASCII, где один символ занимает 1 байт, числом N указывается максимальная возможная длина строки &lt;br&gt; &lt;code&gt;NVARCHAR(N)&lt;/code&gt; строка переменной длины, в формате Unicode, где один символ занимает 2 байта &lt;br&gt; &lt;code&gt;CHAR(N)/nchar(N)&lt;/code&gt; строка фиксированной длины, которая всегда дополняется справа пробелами до длины N и в базе данных она занимает ровно N символов &lt;br&gt; &lt;code&gt;INT&lt;/code&gt; целое число, от -2147483648 до 2147483647, занимает 4 байта &lt;br&gt; &lt;code&gt;FLOAT&lt;/code&gt; число, в котором может присутствовать десятичная точка (запятая) &lt;br&gt; &lt;code&gt;BIT&lt;/code&gt; флаг, Да - 1 или Нет - 0 &lt;br&gt; &lt;code&gt;DATE&lt;/code&gt; формат даты, например 25.05.2023 &lt;br&gt; &lt;code&gt;TIME&lt;/code&gt; 23:30:55.1234567 &lt;br&gt; &lt;code&gt;DATETIME&lt;/code&gt; 25.05.2023 23:30:55.1234567&lt;/p&gt; &#xA;&lt;h3&gt;DATABASE&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;SHOW databases;                                                                     # вывести список БД&#xA;CREATE DATABASE db_aduser;                                                          # создать БД&#xA;CREATE DATABASE db_rep DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;  # создать БД с кодировкой UTF-8&#xA;DROP DATABASE db_rep;                                                               # удалить БД&#xA;USE db_aduser;                                                                      # выбрать/переключиться на выбранную БД&#xA;SELECT database();                                                                  # отобразить выбранную БД&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;USER&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;SELECT USER,HOST FROM mysql.user;                                     # вывести список УЗ&#xA;CREATE USER posh@localhost IDENTIFIED BY &#39;1qaz!QAZ&#39;;                  # создать УЗ, которая будет подключаться с локального сервера&#xA;CREATE USER posh@localhost IDENTIFIED BY &#39;1qaz!QAZ&#39;;                  # создать УЗ, которая будет подключаться с указанного сервера&#xA;CREATE USER posh@&#39;192.168.3.99&#39; IDENTIFIED BY &#39;1qaz!QAZ&#39;;             # УЗ для доступа с конкретного сервера&#xA;CREATE USER &#39;admin&#39;@&#39;%&#39; IDENTIFIED BY &#39;Admin12#&#39;;                     # УЗ для доступа с любого сервера (% - wildcard)&#xA;DROP USER posh@localhost;                                             # удалить пользователя&#xA;SHOW GRANTS FOR posh@&#39;%&#39;;                                             # отобразить права доступа пользователя&#xA;GRANT ALL PRIVILEGES ON db_aduser.* TO posh@&#39;192.168.3.99&#39;;           # полный доступ для posh к БД db_aduser&#xA;GRANT ALL PRIVILEGES ON *.* TO posh@&#39;%&#39;;                              # доступ к всем БД c любого клиентского хоста&#xA;GRANT SELECT,DELETE ON mysql.* TO posh@&#39;%&#39;;                           # права SELECT и DELETE на встроенную БД mysql&#xA;REVOKE DELETE ON mysql.* FROM posh@&#39;%&#39;;                               # удалить доступ DELETE&#xA;UPDATE mysql.user SET super_priv=&#39;Y&#39; WHERE USER=&#39;posh&#39; AND host=&#39;%&#39;;  # изменить привелегии для пользователя&#xA;SELECT USER,HOST,super_priv FROM mysql.user;                          # список УЗ и таблица с правами SUPER privilege&#xA;FLUSH PRIVILEGES;                                                     # обновить права доступа&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TABLE&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;SHOW TABLES;               # отобразить список всех таблиц&#xA;SHOW TABLES LIKE &#39;%user&#39;;  # поиск таблицы по wildcard-имени&#xA;CREATE TABLE table_aduser (id INT NOT NULL AUTO_INCREMENT, Name VARCHAR(100), email VARCHAR(100), PRIMARY KEY (ID));  # создать таблицу&#xA;DROP TABLE table_aduser;   # удалить таблицу&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;COLUMN&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;SHOW COLUMNS FROM table_aduser;                                                         # отобразить название стобцов и их свойства&#xA;ALTER TABLE table_aduser DROP COLUMN id;                                                # удалить столбец id&#xA;ALTER TABLE table_aduser ADD COLUMN info VARCHAR(10);                                   # добавить столбец info&#xA;ALTER TABLE table_aduser CHANGE info new_info VARCHAR(100);                             # изменить имя столбца info на new_info и его тип данных&#xA;ALTER TABLE table_aduser ADD COLUMN (id INT NOT NULL AUTO_INCREMENT, PRIMARY KEY (ID)); # добавить столбец id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;INSERT&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;INSERT table_aduser (Name,email) VALUES (&#39;Alex&#39;,&#39;no-email&#39;);&#xA;INSERT table_aduser (Name,email) VALUES (&#39;Alex&#39;,&#39;no-email&#39;);&#xA;INSERT table_aduser (Name) VALUES (&#39;Support&#39;);&#xA;INSERT table_aduser (Name) VALUES (&#39;Jack&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SELECT&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;SELECT * FROM table_aduser;                     # содержимое всех стобцов в выбранной (FROM) таблице&#xA;SELECT Name,email FROM table_aduser;            # содержимое указанных стобцов&#xA;SELECT DISTINCT Name,Email FROM table_aduser;   # отобразить уникальные записи (без повторений)&#xA;SELECT * FROM table_aduser ORDER BY Name;       # отсортировать по Name&#xA;SELECT * FROM table_aduser ORDER BY Name DESC;  # обратная сортировка&#xA;SELECT COUNT(*) FROM table_aduser;              # количество строк в таблице&#xA;SELECT COUNT(new_info) FROM table_aduser;       # количество строк в столбце&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WHERE&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;NOT; AND; OR                                                  # по приоритетам условий&#xA;SELECT * FROM table_aduser WHERE Name = &#39;Alex&#39;;               # поиск по содержимому&#xA;SELECT * FROM table_aduser WHERE NOT Name != &#39;Alex&#39;;          # условие NOT где Name не равен значению&#xA;SELECT * FROM table_aduser WHERE email != &#39;&#39;;                 # вывести строки, где содержимое email не рано null&#xA;SELECT * FROM table_aduser WHERE email != &#39;&#39; OR id &amp;gt; 1000;    # или id выше 1000&#xA;SELECT * FROM table_aduser WHERE Name RLIKE &#34;support&#34;;        # регистронезависемый (RLIKE) поиск&#xA;SELECT * FROM table_aduser WHERE Name RLIKE &#34;^support&#34;;       # начинаются только с этого словосочетания&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DELETE&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;SELECT * FROM table_aduser WHERE Name RLIKE &#34;alex&#34;;   # найти и проверить значения перед удалением&#xA;DELETE FROM table_aduser WHERE Name RLIKE &#34;alex&#34;;     # Query OK, 2 rows affected # удалено две строки&#xA;DELETE FROM table_aduser;                             # удалить ВСЕ значения&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UPDATE&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;SELECT * FROM table_aduser WHERE Name = &#39;Jack&#39;;             # найти и проверить значение перед изменением&#xA;UPDATE table_aduser SET Name = &#39;Alex&#39; WHERE Name = &#39;Jack&#39;;  # изменить значение &#39;Jack&#39; на &#39;Alex&#39;&#xA;UPDATE db_aduser.table_aduser SET Name=&#39;BCA&#39; WHERE id=1;    # изменить значение в строке с ID 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CHECK&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;CHECK TABLE db_aduser.table_aduser;     # проверить&#xA;ANALYZE TABLE db_aduser.table_aduser;   # анализировать&#xA;OPTIMIZE TABLE db_aduser.table_aduser;  # оптимизировать&#xA;REPAIR TABLE db_aduser.table_aduser;    # восстановить&#xA;TRUNCATE TABLE db_aduser.table_aduser;  # очистить&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DUMP&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;mysqldump -u root -p --databases db_aduser &amp;gt; /bak/db_aduser.sql&#xA;mysql -u root -p db_aduser &amp;lt; /bak/db_aduser.sql&#xA;&#xA;crontab -e&#xA;00 22 * * * /usr/bin/mysqldump -uroot -p1qaz!QAZ db_zabbix | /bin/bzip2 &amp;gt; `date +/dump/zabbix/zabbix-\%d-\%m-\%Y-\%H:\%M.bz2`&#xA;00 23 * * * /usr/bin/mysqldump -uroot -p1qaz!QAZ db_zabbix &amp;gt; `date +/dump/smb/zabbix-\%d-\%m-\%Y-\%H:\%M.sql`&#xA;0 0 * * * find /dump/zabbix -mtime +7 -exec rm {} \;&#xA;&#xA;mysqldump -u root --single-transaction db_zabbix &amp;gt; /dump/zabbix/db_zabbix.sql&#xA;mysql -u user_zabbix -p -e &#39;CREATE DATABASE db_zabbix;&#39;&#xA;mysql -u user_zabbix -p db_zabbix &amp;lt; /root/db_zabbix.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;innodb_force_recovery&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sed -i &#39;/innodb_force_recovery/d&#39; /etc/mysql/my.cnf # удалить&#xA;mode=6; sed -i &#34;/^\[mysqld\]/{N;s/$/\ninnodb_force_recovery=$mode/}&#34; /etc/mysql/my.cnf # добавить mode 6&#xA;systemctl restart mysql&#xA;&#xA;[mysqld]&#xA;innodb_force_recovery=1 # сервер пытается начать работу независимо от того, есть ли поврежденные данные InnoDB или нет&#xA;innodb_force_recovery=2 # удается восстановить работу за счет остановки потока команд, которые были частично выполнены или не выполнены (не запускает фоновые операции)&#xA;innodb_force_recovery=3 # отменяет откат после восстановления поврежденных файлов (не пытается откатить транзакции)&#xA;innodb_force_recovery=6 # запуск СУБД в режиме read only&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MySQL Connector NET&lt;/h3&gt; &#xA;&lt;h3&gt;Add-ADUser&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$ip = &#34;192.168.1.253&#34;&#xA;$user = &#34;posh&#34;&#xA;$pass = &#34;1qaz!QAZ&#34;&#xA;$db = &#34;db_aduser&#34;&#xA;Add-Type –Path &#34;$home\Documents\MySQL-Connector-NET\8.0.31-4.8\MySql.Data.dll&#34;&#xA;$Connection = [MySql.Data.MySqlClient.MySqlConnection]@{&#xA;ConnectionString=&#34;server=$ip;uid=$user;pwd=$pass;database=$db&#34;&#xA;}&#xA;$Connection.Open()&#xA;$Command = New-Object MySql.Data.MySqlClient.MySqlCommand&#xA;$Command.Connection = $Connection&#xA;$UserList = Get-ADUser -filter * -properties name,EmailAddress&#xA;foreach ($user in $UserList) {&#xA;$uname=$user.Name&#xA;$uemail=$user.EmailAddress&#xA;$Command.CommandText = &#34;INSERT INTO table_aduser (Name,Email) VALUES (&#39;$uname&#39;,&#39;$uemail&#39;)&#34;&#xA;$Command.ExecuteNonQuery()&#xA;}&#xA;$Connection.Close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get-ADUser&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$ip = &#34;192.168.1.253&#34;&#xA;$user = &#34;posh&#34;&#xA;$pass = &#34;1qaz!QAZ&#34;&#xA;$db = &#34;db_aduser&#34;&#xA;Add-Type –Path &#34;$home\Documents\MySQL-Connector-NET\8.0.31-4.8\MySql.Data.dll&#34;&#xA;$Connection = [MySql.Data.MySqlClient.MySqlConnection]@{&#xA;ConnectionString = &#34;server=$ip;uid=$user;pwd=$pass;database=$db&#34;&#xA;}&#xA;$Connection.Open()&#xA;$Command = New-Object MySql.Data.MySqlClient.MySqlCommand&#xA;$Command.Connection = $Connection&#xA;$MYSQLDataAdapter = New-Object MySql.Data.MySqlClient.MySqlDataAdapter&#xA;$MYSQLDataSet = New-Object System.Data.DataSet&#xA;$Command.CommandText = &#34;SELECT * FROM table_aduser&#34;&#xA;$MYSQLDataAdapter.SelectCommand = $Command&#xA;$NumberOfDataSets = $MYSQLDataAdapter.Fill($MYSQLDataSet, &#34;data&#34;)&#xA;$Collections = New-Object System.Collections.Generic.List[System.Object]&#xA;foreach($DataSet in $MYSQLDataSet.tables[0]) {&#xA;$Collections.Add([PSCustomObject]@{&#xA;Name = $DataSet.name;&#xA;Mail = $DataSet.email&#xA;})&#xA;}&#xA;$Connection.Close()&#xA;$Collections&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;MSSQL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;wget -qO- https://packages.microsoft.com/keys/microsoft.asc | apt-key add -&lt;/code&gt; импортировать GPG-ключ для репозитория &lt;br&gt; &lt;code&gt;https://packages.microsoft.com/config/ubuntu/&lt;/code&gt; выбрать репозиторий и скопировать URL &lt;br&gt; &lt;code&gt;add-apt-repository &#34;$(wget -qO- https://packages.microsoft.com/config/ubuntu/20.04/mssql-server-2019.list)&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;apt-get update&lt;/code&gt; обновить список пакетов &lt;br&gt; &lt;code&gt;apt-get install mssql-server&lt;/code&gt; &lt;br&gt; &lt;code&gt;/opt/mssql/bin/mssql-conf setup&lt;/code&gt; скрипт начальной конфигурации (выбрать редакцию, 3 - express и русский язык 9 из 11) &lt;br&gt; &lt;code&gt;systemctl status mssql-server&lt;/code&gt; &lt;br&gt; &lt;code&gt;curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -&lt;/code&gt; установить клиент &lt;br&gt; &lt;code&gt;curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | tee /etc/apt/sources.list.d/msprod.list&lt;/code&gt; &lt;br&gt; &lt;code&gt;apt-get update&lt;/code&gt; &lt;br&gt; &lt;code&gt;apt-get install mssql-tools&lt;/code&gt; &lt;br&gt; &lt;code&gt;echo &#39;export PATH=&#34;$PATH:/opt/mssql-tools/bin&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt; добавить в домашний каталог файла bashrc, что бы не писать путь к исполняемому файлу &lt;br&gt; &lt;code&gt;export PATH=&#34;$PATH:/opt/mssql-tools/bin&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;iptables -I INPUT 1 -p tcp --dport 1433 -j ACCEPT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sqlcmd -S localhost -U SA&#xA;CREATE DATABASE itinvent&#xA;go&#xA;SELECT name FROM master.dbo.sysdatabases&#xA;go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;System.Data.SqlClient&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$user = &#34;itinvent&#34;&#xA;$pass = &#34;itinvent&#34;&#xA;$db   = &#34;itinvent&#34;&#xA;$srv  = &#34;192.168.3.103&#34;&#xA;$SqlConnection = New-Object System.Data.SqlClient.SqlConnection&#xA;$SqlConnection.ConnectionString = &#34;server=$srv;database=$db;user id=$user;password=$pass;Integrated Security=false&#34;&#xA;&#xA;$SqlCommand = New-Object System.Data.SqlClient.SqlCommand` класс формата команды&#xA;$SqlCommand.CommandText = &#34;SELECT * FROM ITINVENT.dbo.USERS&#34;` отобразить содержимое таблицы&#xA;#$SqlCommand.CommandText = &#34;SELECT LICENCE_DATE,DESCR,MODEL_NO,TYPE_NO FROM ITINVENT.dbo.ITEMS where LICENCE_DATE IS NOT NULL&#34;&#xA;$SqlCommand.Connection = $SqlConnection` передать формат подключения&#xA;$SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter` создать адаптер подключения для выполнения SELECT запросов к БД&#xA;$SqlAdapter.SelectCommand = $SqlCommand` передать команду&#xA;&#xA;$DataSet = New-Object System.Data.DataSet` создать объект приема данных формата XML&#xA;$SqlAdapter.Fill($DataSet)` заполнить данными полученные от адаптера (возвращает кол-во объектов)&#xA;$SqlConnection.Close()&#xA;$Data = $DataSet.Tables&#xA;$Data[0] | ft&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SqlClient INSERT&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$user = &#34;itinvent&#34;&#xA;$pass = &#34;itinvent&#34;&#xA;$db   = &#34;db_test&#34;&#xA;$srv  = &#34;192.168.3.103&#34;&#xA;$sql = &#34;INSERT INTO table_test (column_user) VALUES (&#39;lifailon&#39;)&#34;` добавить данные в таблицу table_test в колонку column_user&#xA;$SqlConnection = New-Object System.Data.SqlClient.SqlConnection&#xA;$SqlConnection.ConnectionString = &#34;server=$srv;database=$db;user id=$user;password=$pass;Integrated Security=false&#34;&#xA;$SqlCommand = New-Object System.Data.SqlClient.SqlCommand&#xA;$SqlCommand.CommandText = $sql&#xA;$SqlCommand.Connection = $SqlConnection&#xA;$SqlConnection.Open()&#xA;$rowsAffected = $SqlCommand.ExecuteNonQuery();` для запросов INSERT/UPDATE/DELETE не используется SqlDataAdapter&#xA;$SqlConnection.Close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSMS INSERT&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;USE [db_test]&#xA;GO&#xA;INSERT INTO [dbo].[table_test]&#xA;           ([column_user])&#xA;     VALUES&#xA;           (&#39;lifailon&#39;)&#xA;GO&#xA;SELECT TOP (1000) [column_user]&#xA;FROM [db_test].[dbo].[table_test]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;T-SQL&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;DDL (Data Definition Language / Язык определения данных). К этому типу относятся команды, которые создают базу данных, таблицы, индексы, хранимые процедуры. &lt;br&gt; &lt;code&gt;CREATE&lt;/code&gt; создает объекты базы данных (саму базу даных, таблицы, индексы и т.д.) &lt;br&gt; &lt;code&gt;ALTER&lt;/code&gt; изменяет объекты базы данных &lt;br&gt; &lt;code&gt;DROP&lt;/code&gt; удаляет объекты базы данных &lt;br&gt; &lt;code&gt;TRUNCATE&lt;/code&gt; удаляет все данные из таблиц&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DML (Data Manipulation Language / Язык манипуляции данными). К этому типу относят команды по выбору, обновлению, добавлению и удалению данных. &lt;br&gt; &lt;code&gt;SELECT&lt;/code&gt; извлекает данные из БД &lt;br&gt; &lt;code&gt;UPDATE&lt;/code&gt; обновляет данные &lt;br&gt; &lt;code&gt;INSERT&lt;/code&gt; добавляет новые данные &lt;br&gt; &lt;code&gt;DELETE&lt;/code&gt; удаляет данные&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DCL (Data Control Language / Язык управления доступа к данным). К этому типу относят команды, которые управляют правами по доступу к данным. &lt;br&gt; &lt;code&gt;GRANT&lt;/code&gt; предоставляет права для доступа к данным &lt;br&gt; &lt;code&gt;REVOKE&lt;/code&gt; отзывает права на доступ к данным&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- Переменные&#xA;DECLARE @text NVARCHAR(20), @int INT;&#xA;SET @text=&#39;Test&#39;;&#xA;SET @int = 21;&#xA;select @text,@int&#xA;&#xA;-- Имена сервера и экземпляра &#xA;Select @@SERVERNAME as [Server\Instance]; &#xA;&#xA;-- версия SQL Server &#xA;Select @@VERSION as SQLServerVersion; &#xA;&#xA;-- Текущая БД (БД, в контексте которой выполняется запрос)&#xA;Select DB_NAME() AS CurrentDB_Name;&#xA;&#xA;-- Время работы с момента запуска сервера&#xA;SELECT  @@Servername AS ServerName ,&#xA;        create_date AS  ServerStarted ,&#xA;        DATEDIFF(s, create_date, GETDATE()) / 86400.0 AS DaysRunning ,&#xA;        DATEDIFF(s, create_date, GETDATE()) AS SecondsRunnig&#xA;FROM    sys.databases&#xA;WHERE   name = &#39;tempdb&#39;;&#xA;&#xA;-- Количество активных соединений&#xA;SELECT  @@Servername AS Server ,&#xA;        DB_NAME(database_id) AS DatabaseName ,&#xA;        COUNT(database_id) AS Connections ,&#xA;        Login_name AS  LoginName ,&#xA;        MIN(Login_Time) AS Login_Time ,&#xA;        MIN(COALESCE(last_request_end_time, last_request_start_time))&#xA;                                                         AS  Last_Batch&#xA;FROM    sys.dm_exec_sessions&#xA;WHERE   database_id &amp;gt; 0&#xA;        AND DB_NAME(database_id) NOT IN ( &#39;master&#39;, &#39;msdb&#39; )&#xA;GROUP BY database_id ,&#xA;         login_name&#xA;ORDER BY DatabaseName;&#xA;&#xA;-- Статус Backup&#xA;SELECT  @@Servername AS ServerName ,&#xA;        d.Name AS DBName ,&#xA;        MAX(b.backup_finish_date) AS LastBackupCompleted&#xA;FROM    sys.databases d&#xA;        LEFT OUTER JOIN msdb..backupset b&#xA;                    ON b.database_name = d.name&#xA;                       AND b.[type] = &#39;D&#39;&#xA;GROUP BY d.Name&#xA;ORDER BY d.Name;&#xA;&#xA;-- Путь к Backup&#xA;SELECT  @@Servername AS ServerName ,&#xA;        d.Name AS DBName ,&#xA;        b.Backup_finish_date ,&#xA;        bmf.Physical_Device_name&#xA;FROM    sys.databases d&#xA;        INNER JOIN msdb..backupset b ON b.database_name = d.name&#xA;                                        AND b.[type] = &#39;D&#39;&#xA;        INNER JOIN msdb.dbo.backupmediafamily bmf ON b.media_set_id = bmf.media_set_id&#xA;ORDER BY d.NAME ,&#xA;        b.Backup_finish_date DESC; &#xA;&#xA;-- Вывести список всех БД, модели восстановления и путь к mdf/ldf&#xA;EXEC sp_helpdb; &#xA;SELECT  @@SERVERNAME AS Server ,&#xA;        d.name AS DBName ,&#xA;        create_date ,&#xA;        recovery_model_Desc AS RecoveryModel ,&#xA;        m.physical_name AS FileName&#xA;FROM    sys.databases d&#xA;        JOIN sys.master_files m ON d.database_id = m.database_id&#xA;ORDER BY d.name;&#xA;&#xA;-- Размер БД&#xA;with fs&#xA;as&#xA;(&#xA;    select database_id, type, size * 8.0 / 1024 size&#xA;    from sys.master_files&#xA;)&#xA;select &#xA;    name,&#xA;    (select sum(size) from fs where type = 0 and fs.database_id = db.database_id) DataFileSizeMB,&#xA;    (select sum(size) from fs where type = 1 and fs.database_id = db.database_id) LogFileSizeMB&#xA;from sys.databases &#xA;&#xA;-- Поиск таблицы по маске имени (вывод: названия схемы где распологается объект, тип объекта, дата создания и последней модификации):&#xA;select [object_id], [schema_id],&#xA;&#x9;   schema_name([schema_id]) as [schema_name], &#xA;&#x9;   [name], &#xA;&#x9;   [type], &#xA;&#x9;   [type_desc], &#xA;&#x9;   [create_date], &#xA;&#x9;   [modify_date]&#xA;from sys.all_objects&#xA;-- where [name]=&#39;INVENT&#39;;&#xA;where [name] like &#39;%INVENT%&#39;;&#xA;&#xA;-- Кол-во строк в таблицах&#xA;SELECT  @@ServerName AS Server ,&#xA;        DB_NAME() AS DBName ,&#xA;        OBJECT_SCHEMA_NAME(p.object_id) AS SchemaName ,&#xA;        OBJECT_NAME(p.object_id) AS TableName ,&#xA;        i.Type_Desc ,&#xA;        i.Name AS IndexUsedForCounts ,&#xA;        SUM(p.Rows) AS Rows&#xA;FROM    sys.partitions p&#xA;        JOIN sys.indexes i ON i.object_id = p.object_id&#xA;                              AND i.index_id = p.index_id&#xA;WHERE   i.type_desc IN ( &#39;CLUSTERED&#39;, &#39;HEAP&#39; )&#xA;                             -- This is key (1 index per table) &#xA;        AND OBJECT_SCHEMA_NAME(p.object_id) &amp;lt;&amp;gt; &#39;sys&#39;&#xA;GROUP BY p.object_id ,&#xA;        i.type_desc ,&#xA;        i.Name&#xA;ORDER BY SchemaName ,&#xA;        TableName; &#xA;&#xA;-- Найти строковое (nvarchar) значение 2023 по всем таблицам базы данных&#xA;-- Отображается в какой таблице и столбце хранится значение, а также количество найденных пары таблица-колонка&#xA;set nocount on&#xA;declare @name varchar(128), @substr nvarchar(4000), @column varchar(128)&#xA;set @substr = &#39;%2023%&#39;&#xA;declare @sql nvarchar(max);&#xA;create table`rslt &#xA;(table_name varchar(128), field_name varchar(128), [value] nvarchar(max))&#xA;declare s cursor for select table_name as table_name from information_schema.tables where table_type = &#39;BASE TABLE&#39; order by table_name&#xA;open s&#xA;fetch next from s into @name&#xA;while @@fetch_status = 0&#xA;begin&#xA;declare c cursor for &#xA;select quotename(column_name) as column_name from information_schema.columns &#xA;where data_type in (&#39;text&#39;, &#39;ntext&#39;, &#39;varchar&#39;, &#39;char&#39;, &#39;nvarchar&#39;, &#39;char&#39;, &#39;sysname&#39;, &#39;int&#39;, &#39;tinyint&#39;) and table_name  = @name&#xA;set @name = quotename(@name)&#xA;open c&#xA;fetch next from c into @column&#xA;while @@fetch_status = 0&#xA;begin&#xA;--print &#39;Processing table - &#39; + @name + &#39;, column - &#39; + @column&#xA;set @sql=&#39;insert into`rslt select &#39;&#39;&#39; + @name + &#39;&#39;&#39; as Table_name, &#39;&#39;&#39; + @column + &#39;&#39;&#39;, cast(&#39; + @column + &#xA;&#39; as nvarchar(max)) from&#39; + @name + &#39; where cast(&#39; + @column + &#39; as nvarchar(max)) like &#39;&#39;&#39; + @substr + &#39;&#39;&#39;&#39;;&#xA;print @sql;&#xA;exec(@sql);&#xA;fetch next from c into @column;&#xA;end&#xA;close c&#xA;deallocate c&#xA;fetch next from s into @name&#xA;end&#xA;select table_name as [Table Name], field_name as [Field Name], count(*) as [Found Mathes] from`rslt&#xA;group by table_name, field_name&#xA;order by table_name, field_name&#xA;drop table`rslt&#xA;close s&#xA;deallocate s&#xA;&#xA;-- Поиск в таблице [CI_HISTORY] и столбцу [HIST_ID]:&#xA;SELECT * FROM ITINVENT.dbo.CI_HISTORY where [HIST_ID] like &#39;%2023%&#39;;&#xA;&#xA;-- Узнать фрагментацию индексов&#xA;DECLARE @db_id SMALLINT;&#xA;SET @db_id = DB_ID(N&#39;itinvent&#39;);&#xA;IF @db_id IS NULL&#xA;BEGIN;&#xA;    PRINT N&#39;Неправильное имя базы&#39;;&#xA;END;&#xA;ELSE&#xA;BEGIN;&#xA;&#x9;SELECT&#xA;&#x9;&#x9;object_id AS [ID объекта],&#xA;&#x9;&#x9;index_id AS [ID индекса],&#xA;&#x9;&#x9;index_type_desc AS [Тип индекса],&#xA;&#x9;&#x9;avg_fragmentation_in_percent AS [Фрагментация в %]&#xA;&#x9;&#x9;&#xA;&#x9;FROM sys.dm_db_index_physical_stats(@db_id, NULL, NULL, NULL , &#39;LIMITED&#39;)&#xA;&#x9; &#xA;&#x9;ORDER BY [avg_fragmentation_in_percent] DESC;&#xA;END;&#xA;GO&#xA;&#xA;-- TempDB&#xA;-- Initial size - начальный/минимальный размер БД (1024 MB)&#xA;-- Autogrowh - прирост (512MB)&#xA;-- По умолчанию tempdb настроена на авто-расширение (Autogrow) и при каждой перезагрузке SQL Server пересоздаёт файлы этой БД с минимальным размером инициализации.&#xA;-- Увеличив размер инициализации файлов tempdb, можно свести к минимуму затраты системных ресурсов на операции авто-расширения.&#xA;&#xA;-- Изменить путь к БД:&#xA;USE master;&#xA;GO&#xA;ALTER DATABASE tempdb&#xA;MODIFY FILE (NAME = tempdev, FILENAME = &#39;F:\tempdb.mdf&#39;);&#xA;GO&#xA;ALTER DATABASE tempdb&#xA;MODIFY FILE (NAME = temp2, FILENAME = &#39;F:\tempdb_mssql_2.ndf&#39;);&#xA;GO&#xA;ALTER DATABASE tempdb&#xA;MODIFY FILE (NAME = temp3, FILENAME = &#39;F:\tempdb_mssql_3.ndf&#39;);&#xA;GO&#xA;ALTER DATABASE tempdb&#xA;MODIFY FILE (NAME = temp4, FILENAME = &#39;F:\tempdb_mssql_4.ndf&#39;);&#xA;GO&#xA;ALTER DATABASE tempdb&#xA;MODIFY FILE (NAME = temp5, FILENAME = &#39;F:\tempdb_mssql_5.ndf&#39;);&#xA;GO&#xA;ALTER DATABASE tempdb&#xA;MODIFY FILE (NAME = temp6, FILENAME = &#39;F:\tempdb_mssql_6.ndf&#39;);&#xA;GO&#xA;ALTER DATABASE tempdb&#xA;MODIFY FILE (NAME = temp7, FILENAME = &#39;F:\tempdb_mssql_7.ndf&#39;);&#xA;GO&#xA;ALTER DATABASE tempdb&#xA;MODIFY FILE (NAME = temp8, FILENAME = &#39;F:\tempdb_mssql_8.ndf&#39;);&#xA;GO&#xA;ALTER DATABASE tempdb&#xA;MODIFY FILE (NAME = templog, FILENAME = &#39;F:\templog.ldf&#39;);&#xA;GO&#xA;&#xA;-- Указать размер файла:&#xA;MODIFY FILE (NAME = temp2, FILENAME = &#39;F:\tempdb_mssql_2.ndf&#39; , SIZE = 1048576KB , FILEGROWTH = 524288KB);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Тип резервной копии&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full (Полная копия). Когда стартует полное резервирование, записывается Log Sequence Number (LSN - последовательный номер журнала), а так же LSN записывается и при завершении полного резервирования. Этот LSN является механизмом, используемым SQL Server, чтобы знать, в каком порядке выполнялись операторы INSERT, UPDATE или DELETE. При этом наличие записанных LSN начала и окончания, как части полного бэкапа, обеспечивает согласованное с точки зрения транзакций резервное копирование, поскольку при полном резервном копировании учитываются изменения, произошедшие во время резервного копирования. Это обеспечивает обработку таких транзакций в процессе восстановления бэкапа.&lt;/li&gt; &#xA; &lt;li&gt;Differential (дифференциальная/разностная копия). Хранит данных, изменившиеся с момента последней Полной резервной копии. При восстановлении нужно сначала восстановить Полную резервную копию в режиме NORECOVERY, потом можно применить любую из последующих Разностных копий, без предыдущей Полной резервной копии Разностная копия бесполезна. Каждая последующая Разностная копия будет хранить все данные, входящие в предыдущую Разностную резервную копию, сделанную после предыдущей Полной копии.&lt;/li&gt; &#xA; &lt;li&gt;Incremental (инкрементальная/копия журналов транзакций). Резервное копирования журнала транзакций копирует все транзакции, которые произошли с момента последнего резервного копирования, а затем урезает журнал транзакций для освобождения дискового пространства. Транзакции происходят в определенном порядке (LSN), бэкап журнала поддерживает этот порядок транзакций. Бэкапы журналов транзакций должны восстанавливаться по порядку. Для восстановления базы данных потребуется вся цепочка резервных копий: полная и все последующие инкрементальные журнала транзакций.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Модели восстановления&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple (Простая). Хранится только необходимый для жизни остаток журнала транзакций. Журнал транзакций (лог) автоматически очищается. Создание резервных копий журнала транзакций невозможна, поэтому остается самое ограниченное число опций по восстановлению. Недоступен функционал: Always On, Point-In-Time восстановление, Резервные копии журнала транзакций.&lt;/li&gt; &#xA; &lt;li&gt;Full (Полная). Хранится журнал транзакций всех изменений в БД с момента последнего резервного копирования журнала транзакций. Журнал транзакций не будет очищаться до тех пор, пока не будет сделана резервная копия журнала транзакций.&lt;/li&gt; &#xA; &lt;li&gt;Bulk logged (С неполным протоколированием). Идентична Full, за исключение: SELECT INTO, BULK INSERT и BCP, INSERT INTO SELECT, операции с индексами (CREATE INDEX, ALTER INDEX REBUILD, DROP INDEX)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Системные БД&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;master. Хранятся все данные системного уровня (конфигурация системы, сведенья об учетных записях входа, информация обо всех других базах данных) для экземпляра SQL Server.&lt;/li&gt; &#xA; &lt;li&gt;tempdb. Рабочее пространство для временных объектов, таких как глобальные или локальные временные таблицы, временные хранимые процедуры, табличные переменные и курсоры. Пересоздаётся при каждом запуске SQL Server.&lt;/li&gt; &#xA; &lt;li&gt;model. Используется в качестве шаблона для всех баз данных, создаваемых в экземпляре SQL Server, все содержимое базы данных model, включая параметры базы данных, копируется в создаваемую базу данных. Так как база данных tempdb создается каждый раз при запуске SQL Server, база данных model всегда должна существовать в системе SQL Server.&lt;/li&gt; &#xA; &lt;li&gt;msdb. Используется агентом SQL Server для создания расписания предупреждений (оператор) и выполнение заданий, а также другими компонентами. SQL Server хранит полный журнал резервного копирования и восстановления в базе данных msdb. Для отправки почты оператору используется: USE [msdb].&lt;/li&gt; &#xA; &lt;li&gt;resource. Доступная только для чтения база данных, которая содержит все системные объекты, например sys.objects, физически хранятся в базе данных resource, но логически присутствуют в схеме sys каждой базы данных.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Регламентные операции&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Проверка целостности базы данных&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;DBCC CHECKDB&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Индексы. Индексы используются для быстрого поиска данных без необходимости поиска/просмотра всех строк в таблице базы данных при каждом обращении к таблице базы данных. Индекс ускоряет процесс запроса, предоставляя быстрый доступ к строкам данных в таблице, аналогично тому, как указатель в книге помогает вам быстро найти необходимую информацию. Индексы предоставляют путь для быстрого поиска данных на основе значений в этих столбцах. Для каждого индекса обязательно хранится его статистика. MS SQL Server самостоятельно создает и изменяет индексы при работе с базой. С течением времени данные в индексе становятся фрагментированными, т.е. разбросанными по базе данных, что серьезно снижает производительность запросов. Если фрагментация составляет от 5 до 30% (стандартно в задании 15%), то рекомендуется ее устранить с помощью реорганизации, при фрагментации выше 30% (по умолчанию в задаче &amp;gt; 30% фрагментации и число страниц &amp;gt; 1000) необходимо полное перестроение индексов. После перестроения планово используется только реорганизация.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Реорганизация (Reorganize) или дефрагментация индекса — это серия небольших локальных перемещений страниц так, чтобы индекс не был фрагментирован. После реорганизации статистика не обновляется. Во время выполнения почти все данные доступны, пользователи смогут работать.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;sp_msforeachtable N&#39;DBCC INDEXDEFRAG (&amp;lt;имя базы данных&amp;gt;, &#39;&#39;?&#39;&#39;)&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Перестроение (Rebuild) индексов (или задача в мастере планов обслуживания: Восстановить индекс) запускает процесс полного построения индексов. В версии MS SQL Server Standard происходит отключение всех клиентов от базы на время выполнения операции. После перестроения обязательно обновляется статистика.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;sp_msforeachtable N&#39;DBCC DBREINDEX (&#39;&#39;?&#39;&#39;)&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Обновление статистики. Статистика — небольшая таблица (обычно до 200 строк), в которой хранится обобщенная информация о том, какие значения и как часто встречаются в таблице. На основании статистики сервер принимает решение, как лучше построить запрос. Когда происходят запросы к БД (например, SELECT) вы получаете данные, но не описываете то, как эти данные должны быть извлечены. В получении и обработке данных помогает статистика. Во время выполнения процедуры обновления статистики данные не блокируются.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;exec sp_msforeachtable N&#39;UPDATE STATISTICS ? WITH FULLSCAN&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Очистка процедурного кэша, выполняется после обновления статистики. Оптимизатор MS SQL Server кэширует планы запросов для их повторного выполнения. Это делается для того, чтобы экономить время, затрачиваемое на компиляцию запроса в том случае, если такой же запрос уже выполнялся и его план известен. После обновия статистики, не будет очищен процедурный кэш, то SQL Server может выбрать старый (неоптимальный) план запроса из кэша вместо того, чтобы построить новый (более оптимальный) план.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;DBCC FREEPROCCACHE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;InfluxDB&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://community.influxdata.com/t/influxdb-1-7-11-download-links/18898%60&#34;&gt;https://community.influxdata.com/t/influxdb-1-7-11-download-links/18898`&lt;/a&gt; InfluxDB1 &lt;br&gt; &lt;code&gt;wget https://dl.influxdata.com/influxdb/releases/influxdb2-2.7.1-windows-amd64.zip -UseBasicParsing -OutFile influxdb2-2.7.1-windows-amd64.zip&lt;/code&gt; скачать InfluxDB2 &lt;br&gt; &lt;code&gt;Expand-Archive .\influxdb2-2.7.1-windows-amd64.zip -DestinationPath &#39;C:\Program Files\InfluxData\influxdb\&#39;&lt;/code&gt; разархивировать &lt;br&gt; &lt;code&gt;cd &#34;C:\Program Files\InfluxData\influxdb\influxdb2_windows_amd64&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;.\influxd.exe&lt;/code&gt; &lt;br&gt; &lt;code&gt;.\influxd -h&lt;/code&gt; &lt;br&gt; &lt;code&gt;http://localhost:8086/&lt;/code&gt; базовая настройка &lt;br&gt; API Token: &lt;code&gt;wqsqOIR3d-PYmiJQYir4sX_NjtKKyh8ZWbfX1ZlfEEpAH3Z2ylcHx3XZzUA36XO3HIosiCFkhi4EoWfHxwIlAA==&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CLI Client&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;wget https://dl.influxdata.com/influxdb/releases/influxdb2-client-2.7.3-windows-amd64.zip?_gl=1*76m6hu*_ga*MTg0OTc4MzkzNC4xNjg4MTM5NzQ4*_ga_CNWQ54SDD8*MTY4ODE2MjA0My41LjEuMTY4ODE2MzI5Ni4yMi4wLjA. -UseBasicParsing -OutFile influxdb2-client-2.7.3-windows-amd64.zip&lt;/code&gt; &lt;br&gt; &lt;code&gt;Expand-Archive .\influxdb2-client-2.7.3-windows-amd64.zip -DestinationPath &#39;C:\Program Files\InfluxData\influx&#39;&lt;/code&gt; &lt;br&gt; &lt;code&gt;cd &#34;C:\Program Files\InfluxData\influx&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.\influx org list&lt;/code&gt; отобразить список пользователей организаций &lt;br&gt; &lt;code&gt;.\influx auth list&lt;/code&gt; отобразить список пользователей и токенов &lt;br&gt; &lt;code&gt;.\influx v1 shell&lt;/code&gt; консоль &lt;br&gt; &lt;code&gt;.\influx v1 dbrp list&lt;/code&gt; список БД&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\influx config create --config-name main `&#xA;--host-url &#34;http://localhost:8086&#34; `&#xA;--org &#34;test&#34; `&#xA;--token &#34;wqsqOIR3d-PYmiJQYir4sX_NjtKKyh8ZWbfX1ZlfEEpAH3Z2ylcHx3XZzUA36XO3HIosiCFkhi4EoWfHxwIlAA==&#34; `&#xA;--active` создать и активировать конфигурацию, что бы не передавать свой хост InfluxDB, токен API и организацию с каждой командой&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;.\influx config list&lt;/code&gt; список конфигураций &lt;br&gt; &lt;code&gt;.\influx config list --json | ConvertFrom-Json&lt;/code&gt; отобразить конфигурацию с выводом токена &lt;br&gt; &lt;code&gt;.\influx server-config | ConvertFrom-Json&lt;/code&gt; текущая конфигурация сервера&lt;/p&gt; &#xA;&lt;h3&gt;bucket&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;.\influx bucket create --name test-bucket -c main&lt;/code&gt; создать корзину &lt;br&gt; &lt;code&gt;.\influx write --bucket test-bucket --url https://influx-testdata.s3.amazonaws.com/air-sensor-data-annotated.csv&lt;/code&gt; записать данные из CSV в созданную корзину (Flux language) &lt;br&gt; &lt;code&gt;.\influx query &#39;from(bucket:\&#34;test-bucket\&#34;) |&amp;gt; range(start:-30m) |&amp;gt; mean()&#39;&lt;/code&gt; получить записанные данные&lt;/p&gt; &#xA;&lt;h3&gt;user&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;.\influx user create -n root -o test&lt;/code&gt; создать пользователя (-o &#xA; &lt;org-name&gt;&#xA;  ) &#xA;  &lt;br&gt; &#xA;  &lt;code&gt;.\influx user password -n admin -p &#34;password&#34;&lt;/code&gt; изменить/задать пароль &#xA;  &lt;br&gt; &#xA;  &lt;code&gt;.\influx user list&lt;/code&gt; список пользователей &#xA;  &lt;br&gt; &#xA;  &lt;code&gt;influx user delete -i &amp;lt;user-id&amp;gt;&lt;/code&gt;&#xA; &lt;/org-name&gt;&lt;/p&gt; &#xA;&lt;h3&gt;deb&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;wget https://repos.influxdata.com/debian/packages/influxdb2-2.7.1-amd64.deb&lt;/code&gt; &lt;br&gt; &lt;code&gt;dpkg -i influxdb2-2.7.1-amd64.deb&lt;/code&gt; &lt;br&gt; &lt;code&gt;systemctl start influxd.service&lt;/code&gt; &lt;br&gt; &lt;code&gt;systemctl status influxd.service&lt;/code&gt; &lt;br&gt; &lt;code&gt;netstat -natpl | grep 80[8-9][3-9]&lt;/code&gt; &lt;br&gt; &lt;code&gt;ps aux | grep influxdb | grep -Ev &#34;grep&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/influxdb/config.toml&lt;/code&gt; v2 &lt;br&gt; &lt;code&gt;http-bind-address = &#34;192.168.3.101:8086&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/influxdb/influxdb.conf&lt;/code&gt; v1&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[http]&#xA;  enabled = true` включить API&#xA;  bind-address = &#34;192.168.3.104:8086&#34;&#xA;  auth-enabled = true` включить авторизацию&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;apt install influxdb-client&lt;/code&gt; &lt;br&gt; &lt;code&gt;influx&lt;/code&gt; &lt;br&gt; &lt;code&gt;influx --host 192.168.3.104 --username admin --password password&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;USERS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;SHOW USERS&lt;/code&gt; отобразить пользователей и их права доступа &lt;br&gt; &lt;code&gt;CREATE USER admin WITH PASSWORD &#39;password&#39; WITH ALL PRIVILEGES&lt;/code&gt; создать пользователя &lt;br&gt; &lt;code&gt;GRANT ALL PRIVILEGES TO &#34;admin&#34;&lt;/code&gt; предоставить права доступа &lt;br&gt; &lt;code&gt;GRANT READ ON &#34;database&#34; TO &#34;admin&#34;&lt;/code&gt; доступ на чтение для БД или запись (WRITE) &lt;br&gt; &lt;code&gt;REVOKE ALL PRIVILEGES FROM &#34;admin&#34;&lt;/code&gt; отозвать права доступа &lt;br&gt; &lt;code&gt;SHOW GRANTS FOR &#34;admin&#34;&lt;/code&gt; БД и привелегии доступа для указанного пользователя &lt;br&gt; &lt;code&gt;SET PASSWORD FOR &#34;admin&#34; = &#39;new_password&#39;&lt;/code&gt; изменить пароль &lt;br&gt; &lt;code&gt;DROP USER &#34;admin&#34;&lt;/code&gt; удалить пользователя&lt;/p&gt; &#xA;&lt;h3&gt;DATABASE&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;CREATE DATABASE powershell&lt;/code&gt; создать БД &lt;br&gt; &lt;code&gt;SHOW DATABASES&lt;/code&gt; отобразить список БД &lt;br&gt; &lt;code&gt;DROP DATABASE powershell&lt;/code&gt; удалить БД &lt;br&gt; &lt;code&gt;USE powershell&lt;/code&gt; &lt;br&gt; &lt;code&gt;SHOW measurements&lt;/code&gt; отобразить все таблицы &lt;br&gt; &lt;code&gt;INSERT performance,host=console,counter=CPU value=0.88&lt;/code&gt; записать данные в таблицу performance&lt;/p&gt; &#xA;&lt;h3&gt;SELECT/WHERE&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;SELECT * FROM performance&lt;/code&gt; отобразить все данные в таблице &lt;br&gt; &lt;code&gt;SELECT value FROM performance&lt;/code&gt; отфильтровать по столбцу value (только Field Keys) &lt;br&gt; &lt;code&gt;SELECT * FROM performance limit 10&lt;/code&gt; отобразить 10 единиц данных &lt;br&gt; &lt;code&gt;SELECT * FROM performance WHERE time &amp;gt; now() -2d&lt;/code&gt; отобразить данные за последние 2 дня &lt;br&gt; &lt;code&gt;SELECT * FROM performance WHERE time &amp;gt; now() +3h -5m&lt;/code&gt; данные за последние 5 минут (+3 часа от текущего времени по UTC 0 -5 минут) &lt;br&gt; &lt;code&gt;SELECT * FROM performance WHERE counter = &#39;CPU&#39;&lt;/code&gt; выборка по тэгу &lt;br&gt; &lt;code&gt;SELECT upload/1000 FROM speedtest WHERE upload/1000 &amp;lt;= 250&lt;/code&gt; выборка по столбцу upload и разделить вывод на 1000, вывести upload меньше 250 &lt;br&gt; &lt;code&gt;DELETE FROM performance WHERE time &amp;gt; now() -1h&lt;/code&gt; удалить данные за последние 1/4 часа &lt;br&gt; &lt;code&gt;DELETE FROM performance WHERE time &amp;lt; now() -24h&lt;/code&gt; удалить данные старше 24 часов&lt;/p&gt; &#xA;&lt;h3&gt;REGEX&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;SELECT * FROM &#34;performance&#34; WHERE host =~ /.*-Pro/&lt;/code&gt; приблизительно равно любое значение и на конце -Pro &lt;br&gt; &lt;code&gt;SELECT * FROM &#34;win_pdisk&#34; WHERE instance =~/.*C:/ and time &amp;gt; now() - 5m&lt;/code&gt; и &lt;br&gt; &lt;code&gt;SELECT * FROM &#34;win_pdisk&#34; WHERE instance =~/.*E:/ or instance =~ /.*F:/&lt;/code&gt; или &lt;br&gt; &lt;code&gt;SELECT * FROM &#34;win_pdisk&#34; WHERE instance !~ /.*Total/&lt;/code&gt; не равно (исключить) \&lt;/p&gt; &#xA;&lt;h3&gt;GROUP BY tag_key&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;SELECT * FROM &#34;win_pdisk&#34; WHERE instance !~ /.*Total/ and instance !~/.*C:/ GROUP BY instance&lt;/code&gt; группировать результаты по тегу&lt;/p&gt; &#xA;&lt;h3&gt;Functions(field_key)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.influxdata.com/influxdb/v1.8/query_language/functions/&#34;&gt;https://docs.influxdata.com/influxdb/v1.8/query_language/functions/&lt;/a&gt; \&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SELECT instance,LAST(Avg._Disk_Read_Queue_Length) FROM &#34;win_pdisk&#34; GROUP BY instance&lt;/code&gt; отфильтровать вывод по последнему/текущему значению &lt;br&gt; &lt;code&gt;SELECT instance,FIRST(Avg._Disk_Read_Queue_Length) FROM &#34;win_pdisk&#34; GROUP BY instance&lt;/code&gt; отфильтровать вывод по первому значению за весь или указанный отрезок времени &lt;br&gt; &lt;code&gt;SELECT instance,MIN(Avg._Disk_Read_Queue_Length) FROM &#34;win_pdisk&#34; GROUP BY instance&lt;/code&gt; отфильтровать вывод с отображением минимального значения &lt;br&gt; &lt;code&gt;SELECT instance,MAX(Avg._Disk_Read_Queue_Length) FROM &#34;win_pdisk&#34; GROUP BY instance&lt;/code&gt; отфильтровать вывод с отображением максимального значения &lt;br&gt; &lt;code&gt;SELECT SUM(Bytes_Received_persec) FROM &#34;win_net&#34; GROUP BY instance&lt;/code&gt; суммах всех значений &lt;br&gt; &lt;code&gt;SELECT COUNT(Bytes_Received_persec) FROM &#34;win_net&#34; WHERE Bytes_Received_persec &amp;gt;= 0 GROUP BY instance&lt;/code&gt; кол-во данных, где значение выше или равно 0 &lt;br&gt; &lt;code&gt;SELECT MEAN(Bytes_Received_persec) FROM &#34;win_net&#34; WHERE Bytes_Received_persec &amp;lt; 1000 GROUP BY instance&lt;/code&gt; среднее значение данных с показателем от 0 до 1000 (509)&lt;/p&gt; &#xA;&lt;h3&gt;POLICY&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;CREATE DATABASE powershell WITH DURATION 48h REPLICATION 1 NAME &#34;del2d&#34;&lt;/code&gt; создать БД с политикой хранения 2 дня &lt;br&gt; &lt;code&gt;CREATE RETENTION POLICY del2h ON powershell DURATION 2h REPLICATION 1&lt;/code&gt; создать новую политику хранения для БД &lt;br&gt; &lt;code&gt;CREATE RETENTION POLICY del6h ON powershell DURATION 6h REPLICATION 1 SHARD DURATION 2h&lt;/code&gt; указать период хранения 6 часов + 2 часа до очистки (по умолчанию 1ч или больше) &lt;br&gt; &lt;code&gt;ALTER RETENTION POLICY del6h ON powershell DEFAULT&lt;/code&gt; изменить (ALTER) политику хранения для БД на del6h (DEFAULT) &lt;br&gt; &lt;code&gt;DROP RETENTION POLICY del2d ON powershell&lt;/code&gt; удаление политики хранения приводит к безвозвратному удалению всех измерений (таблиц) и данных, хранящихся в политике хранения&lt;/p&gt; &#xA;&lt;h3&gt;API POST&lt;/h3&gt; &#xA;&lt;p&gt;Вместо таблиц в InfluxDB имеются измерения. Вместо столбцов в ней есть теги и поля.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   Table                        Tag (string/int)                          Field (double/int)           TIMESTAMP&#xA;measurement,Tag_Keys1=Tag_Values1,Tag_Keys2=Tag_Values2 Field_Keys1=&#34;Values&#34;,Field_Keys2=&#34;Values&#34; 0000000000000000000&#xA;           1                                           2                                         3&#xA;&#xA;$ip        = &#34;192.168.3.104&#34;&#xA;$port      = &#34;8086&#34;&#xA;$db        = &#34;powershell&#34;&#xA;$table     = &#34;speedtest&#34;&#xA;$ipp       = $ip+&#34;:&#34;+$port&#xA;$url       = &#34;http://$ipp/write?db=$db&#34;&#xA;$user      = &#34;admin&#34;&#xA;$pass      = &#34;password&#34; | ConvertTo-SecureString -AsPlainText -Force&#xA;$cred      = [System.Management.Automation.PSCredential]::new($user,$pass)&#xA;$unixtime  = (New-TimeSpan -Start (Get-Date &#34;01/01/1970&#34;) -End (Get-Date)).TotalSeconds&#xA;$timestamp = ([string]$unixtime -replace &#34;\..+&#34;) + &#34;000000000&#34;&#xA;&#xA;Invoke-RestMethod -Method POST -Uri $url -Body &#34;$table,host=$(hostname) download=200000,upload=300000,ping=3 $timestamp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API GET&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;curl http://192.168.3.104:8086/query --data-urlencode &#34;q=SHOW DATABASES&#34;&lt;/code&gt; pwsh7 (ConvertFrom-Json) and bash&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$dbs = irm &#34;http://192.168.3.104:8086/query?q=SHOW DATABASES&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$dbs = irm &#34;http://192.168.3.104:8086/query?epoch=ms&amp;amp;u=admin&amp;amp;p=password&amp;amp;q=SHOW DATABASES&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$dbs.results.series.values&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$ip    = &#34;192.168.3.104&#34;&#xA;$port  = &#34;8086&#34;&#xA;$db    = &#34;powershell&#34;&#xA;$table = &#34;speedtest&#34;&#xA;$query = &#34;SELECT * FROM $table&#34;&#xA;$ipp   = $ip+&#34;:&#34;+$port&#xA;$url   = &#34;http://$ipp/query?db=$db&amp;amp;q=$query&#34;&#xA;$data  = Invoke-RestMethod -Method GET -Uri $url` -Credential $cred &#xA;$data.results.series.name   ` имя таблицы&#xA;$data.results.series.columns` столбцы/ключи&#xA;$data.results.series.values ` данные построчно&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Endpoints&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.influxdata.com/influxdb/v1.7/tools/api/&#34;&gt;https://docs.influxdata.com/influxdb/v1.7/tools/api/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$stats = irm http://192.168.3.104:8086/debug/vars` статистика сервера&#xA;$stats.&#34;database:powershell&#34;.values` кол-во таблиц к БД&#xA;$stats.queryExecutor.values` количество query-запросов (обращений к endpoint /query)&#xA;$stats.write.values` количество write-запросов&#xA;$stats.system.uptime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;http://192.168.3.104:8086/debug/requests&lt;/code&gt; кол-во клиентских HTTP-запросов к конечным точкам /writeи /query &lt;br&gt; &lt;code&gt;http://192.168.3.104:8086/debug/pprof&lt;/code&gt; &lt;br&gt; &lt;code&gt;http://192.168.3.104:8086/ping&lt;/code&gt; &lt;br&gt; &lt;code&gt;http://192.168.3.104:8086/query&lt;/code&gt; &lt;br&gt; &lt;code&gt;http://192.168.3.104:8086/write&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;http://192.168.3.99:8086/api/v2/setup&lt;/code&gt; &lt;br&gt; &lt;code&gt;http://192.168.3.99:8086/api/v2/config&lt;/code&gt; &lt;br&gt; &lt;code&gt;http://192.168.3.99:8086/api/v2/write&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PingTo-InfluxDB&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;while ($true) {&#xA;&#x9;$tz = (Get-TimeZone).BaseUtcOffset.TotalMinutes&#xA;&#x9;$unixtime  = (New-TimeSpan -Start (Get-Date &#34;01/01/1970&#34;) -End ((Get-Date).AddMinutes(-$tz))).TotalSeconds` -3h UTC&#xA;&#x9;$timestamp = ([string]$unixtime -replace &#34;\..+&#34;) + &#34;000000000&#34;&#xA;&#x9;$tnc = tnc 8.8.8.8&#xA;&#x9;$Status = $tnc.PingSucceeded&#xA;&#x9;$RTime = $tnc.PingReplyDetails.RoundtripTime&#xA;&#x9;Invoke-RestMethod -Method POST -Uri &#34;http://192.168.3.104:8086/write?db=powershell&#34; -Body &#34;ping,host=$(hostname) status=$status,rtime=$RTime $timestamp&#34;&#xA;&#x9;sleep 1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;SELECT * FROM ping WHERE status = false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PerformanceTo-InfluxDB&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function ConvertTo-Encoding ([string]$From, [string]$To) {&#xA;    Begin {&#xA;        $encFrom = [System.Text.Encoding]::GetEncoding($from)&#xA;        $encTo = [System.Text.Encoding]::GetEncoding($to)&#xA;    }&#xA;    Process {&#xA;        $bytes = $encTo.GetBytes($_)&#xA;        $bytes = [System.Text.Encoding]::Convert($encFrom, $encTo, $bytes)&#xA;        $encTo.GetString($bytes)&#xA;    }&#xA;}&#xA;&#xA;$localization = (Get-Culture).LCID` текущая локализация&#xA;if ($localization -eq 1049) {&#xA;&#x9;$performance = &#34;\\$(hostname)\Процессор(_Total)\% загруженности процессора&#34; | ConvertTo-Encoding UTF-8 windows-1251` декодировать кириллицу&#xA;} else {&#xA;&#x9;$performance = &#34;\Processor(_Total)\% Processor Time&#34;&#xA;}&#xA;&#xA;$tz = (Get-TimeZone).BaseUtcOffset.TotalMinutes&#xA;while ($true) {&#xA;&#x9;$unixtime  = (New-TimeSpan -Start (Get-Date &#34;01/01/1970&#34;) -End ((Get-Date).AddMinutes(-$tz))).TotalSeconds` -3h UTC&#xA;&#x9;$timestamp = ([string]$unixtime -replace &#34;\..+&#34;) + &#34;000000000&#34;&#xA;&#x9;[double]$value = (Get-Counter $performance).CounterSamples.CookedValue.ToString(&#34;0.00&#34;).replace(&#34;,&#34;,&#34;.&#34;)` округлить в тип данных Double&#xA;&#x9;Invoke-RestMethod -Method POST -Uri &#34;http://192.168.3.104:8086/write?db=powershell&#34; -Body &#34;performance,host=$(hostname),counter=CPU value=$value $timestamp&#34;&#xA;&#x9;sleep 5&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Service&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$powershell_Path = (Get-Command powershell).Source&#xA;$NSSM_Path = &#34;C:\NSSM\NSSM-2.24.exe&#34;&#xA;$Script_Path = &#34;C:\NSSM\PerformanceTo-InfluxDB.ps1&#34;&#xA;$Service_Name = &#34;PerformanceTo-InfluxDB&#34;&#xA;&amp;amp; $NSSM_Path install $Service_Name $powershell_Path -ExecutionPolicy Bypass -NoProfile -f $Script_Path&#xA;Get-Service $Service_Name | Start-Service&#xA;Get-Service $Service_Name | Set-Service -StartupType Automatic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Telegraf&lt;/h1&gt; &#xA;&lt;p&gt;Plugins: &lt;a href=&#34;https://docs.influxdata.com/telegraf/v1.27/plugins/#input-plugins&#34;&gt;https://docs.influxdata.com/telegraf/v1.27/plugins/#input-plugins&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;iwr https://dl.influxdata.com/telegraf/releases/telegraf-1.27.1_windows_amd64.zip -UseBasicParsing -OutFile telegraf-1.27.1_windows_amd64.zip&lt;/code&gt; &lt;br&gt; &lt;code&gt;Expand-Archive .\telegraf-1.27.1_windows_amd64.zip -DestinationPath &#34;C:\Telegraf&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;rm telegraf-1.27.1_windows_amd64.zip&lt;/code&gt; &lt;br&gt; &lt;code&gt;cd C:\Telegraf&lt;/code&gt; &lt;br&gt; &lt;code&gt;.\telegraf.exe -sample-config --input-filter cpu:mem:dns_query --output-filter influxdb &amp;gt; telegraf_nt.conf&lt;/code&gt; создать конфигурацию с выбарнными плагинами для сбора метрик &lt;br&gt; &lt;code&gt;Start-Process notepad++ C:\Telegraf\telegraf_nt.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[outputs.influxdb]]&#xA;  urls = [&#34;http://192.168.3.104:8086&#34;]&#xA;  database = &#34;telegraf_nt&#34;&#xA;  username = &#34;user&#34;&#xA;  password = &#34;pass&#34;&#xA;[[inputs.cpu]]&#xA;  percpu = false&#xA;  totalcpu = true&#xA;[[inputs.dns_query]]&#xA;  servers = [&#34;8.8.8.8&#34;]&#xA;  network = &#34;udp&#34;&#xA;  domains = [&#34;.&#34;]&#xA;  record_type = &#34;A&#34;&#xA;  port = 53&#xA;  timeout = &#34;2s&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;.\telegraf.exe --test -config C:\Telegraf\telegraf_nt.conf&lt;/code&gt; тест конфигурации (получения метрик с выводом в консоль) &lt;br&gt; &lt;code&gt;C:\Telegraf\telegraf.exe -config C:\Telegraf\telegraf_nt.conf&lt;/code&gt; запустить telegraf (тест отправки данных) &lt;br&gt; &lt;code&gt;.\telegraf.exe --config &#34;C:\Telegraf\telegraf_nt.conf&#34; --service install&lt;/code&gt; создать службу &lt;br&gt; &lt;code&gt;Get-Service telegraf | Start-Service&lt;/code&gt; &lt;br&gt; &lt;code&gt;.\telegraf.exe --service uninstall&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;USE telegraf&lt;/code&gt; &lt;br&gt; &lt;code&gt;SELECT usage_idle,usage_system,usage_user FROM cpu&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Elasticsearch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Module -Name Elastic.Console -AllowPrerelease&lt;/code&gt; &lt;a href=&#34;https://github.com/elastic/powershell/raw/master/Elastic.Console/README.md&#34;&gt;https://github.com/elastic/powershell/blob/master/Elastic.Console/README.md&lt;/a&gt; &lt;br&gt; &lt;code&gt;Get-Command -Module Elastic.Console&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-ElasticsearchVersion&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-ElasticsearchVersion 7.3.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;Invoke-Elasticsearch&lt;/code&gt; REST API запросы&lt;/p&gt; &#xA;&lt;h1&gt;CData&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.powershellgallery.com/profiles/CData&#34;&gt;https://www.powershellgallery.com/profiles/CData&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://www.cdata.com/kb/tech/elasticsearch-ado-powershell.rst&#34;&gt;https://www.cdata.com/kb/tech/elasticsearch-ado-powershell.rst&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Module ElasticsearchCmdlets&lt;/code&gt; &lt;a href=&#34;https://www.powershellgallery.com/packages/ElasticsearchCmdlets/23.0.8565.1&#34;&gt;https://www.powershellgallery.com/packages/ElasticsearchCmdlets/23.0.8565.1&lt;/a&gt; &lt;br&gt; &lt;code&gt;Import-Module ElasticsearchCmdlets&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Command -Module ElasticsearchCmdlets&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$elasticsearch = Connect-Elasticsearch  -Server &#34;$Server&#34; -Port &#34;$Port&#34; -User &#34;$User&#34; -Password &#34;$Password&#34;&#xA;$shipcity = &#34;New York&#34;&#xA;$orders = Select-Elasticsearch -Connection $elasticsearch -Table &#34;Orders&#34; -Where &#34;ShipCity = `&#39;$ShipCity`&#39;&#34;` поиск и получение данных&#xA;$orders = Invoke-Elasticsearch -Connection $elasticsearch -Query &#39;SELECT * FROM Orders WHERE ShipCity = @ShipCity&#39; -Params @{&#39;@ShipCity&#39;=&#39;New York&#39;}` SQL запросы&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ADO.NET Assembly&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Package CData.Elasticsearch&lt;/code&gt; &lt;a href=&#34;https://www.nuget.org/packages/CData.Elasticsearch&#34;&gt;https://www.nuget.org/packages/CData.Elasticsearch&lt;/a&gt; &lt;br&gt; &lt;code&gt;[Reflection.Assembly]::LoadFile(&#34;C:\Program Files\PackageManagement\NuGet\Packages\CData.Elasticsearch.23.0.8565\lib\net40\System.Data.CData.Elasticsearch.dll&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$connect = New-Object System.Data.CData.Elasticsearch.ElasticsearchConnection(&#34;Server=127.0.0.1;Port=9200;User=admin;Password=123456;&#34;)&#xA;$connect.Open()&#xA;$sql = &#34;SELECT OrderName, Freight from Orders&#34;&#xA;$da = New-Object System.Data.CData.Elasticsearch.ElasticsearchDataAdapter($sql, $conn)&#xA;$dt = New-Object System.Data.DataTable&#xA;$da.Fill($dt)&#xA;$dt.Rows | foreach {&#xA;Write-Host $_.ordername $_.freight&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UPDATE&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Update-Elasticsearch -Connection $Elasticsearch -Columns @(&#39;OrderName&#39;,&#39;Freight&#39;) -Values @(&#39;MyOrderName&#39;, &#39;MyFreight&#39;) -Table Orders -Id &#34;MyId&#34;&#xA;&#xA;$cmd =  New-Object System.Data.CData.Elasticsearch.ElasticsearchCommand(&#34;UPDATE Orders SET ShipCity=&#39;New York&#39; WHERE Id = @myId&#34;, $conn)&#xA;$cmd.Parameters.Add(new System.Data.CData.Elasticsearch.ElasticsearchParameter(&#34;@myId&#34;,&#34;10456255-0015501366&#34;))&#xA;$cmd.ExecuteNonQuery()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;INSERT&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Add-Elasticsearch -Connection $Elasticsearch -Table Orders -Columns @(&#34;OrderName&#34;, &#34;Freight&#34;) -Values @(&#34;MyOrderName&#34;, &#34;MyFreight&#34;)&#xA;&#xA;$cmd =  New-Object System.Data.CData.Elasticsearch.ElasticsearchCommand(&#34;INSERT INTO Orders (ShipCity) VALUES (@myShipCity)&#34;, $conn)&#xA;$cmd.Parameters.Add(new System.Data.CData.Elasticsearch.ElasticsearchParameter(&#34;@myShipCity&#34;,&#34;New York&#34;))&#xA;$cmd.ExecuteNonQuery()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DELETE&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Remove-Elasticsearch -Connection $Elasticsearch -Table &#34;Orders&#34; -Id &#34;MyId&#34;&#xA;&#xA;$cmd =  New-Object System.Data.CData.Elasticsearch.ElasticsearchCommand(&#34;DELETE FROM Orders WHERE Id=@myId&#34;, $conn)&#xA;$cmd.Parameters.Add(new System.Data.CData.Elasticsearch.ElasticsearchParameter(&#34;@myId&#34;,&#34;001d000000YBRseAAH&#34;))&#xA;$cmd.ExecuteNonQuery()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;ODBC&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command -Module Wdac&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-OdbcDriver | ft&lt;/code&gt; список установленных драйверов&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-client-apps-ps1.html&#34;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-client-apps-ps1.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$connectstring = &#34;DSN=Local Elasticsearch;&#34;&#xA;$sql = &#34;SELECT * FROM library&#34;&#xA;$conn = New-Object System.Data.Odbc.OdbcConnection($connectstring)&#xA;$conn.open()&#xA;$cmd = New-Object system.Data.Odbc.OdbcCommand($sql,$conn)&#xA;$da = New-Object system.Data.Odbc.OdbcDataAdapter($cmd)&#xA;$dt = New-Object system.Data.datatable&#xA;$null = $da.fill($dt)&#xA;$conn.close()&#xA;$dt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;PostgreSQL&lt;/h1&gt; &#xA;&lt;p&gt;Скачать и установить драйвер: &lt;a href=&#34;https://www.postgresql.org/ftp/odbc/versions/msi/&#34;&gt;https://www.postgresql.org/ftp/odbc/versions/msi/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$dbServer = &#34;192.168.3.101&#34;&#xA;$port = &#34;5432&#34;&#xA;$dbName = &#34;test&#34;&#xA;$dbUser = &#34;admin&#34;&#xA;$dbPass = &#34;admin&#34;&#xA;$szConnect = &#34;Driver={PostgreSQL Unicode(x64)};Server=$dbServer;Port=$port;Database=$dbName;Uid=$dbUser;Pwd=$dbPass;&#34; &#xA;&#xA;$cnDB = New-Object System.Data.Odbc.OdbcConnection($szConnect)&#xA;$dsDB = New-Object System.Data.DataSet&#xA;try {&#xA;    $cnDB.Open()&#xA;    $adDB = New-Object System.Data.Odbc.OdbcDataAdapter&#xA;    $adDB.SelectCommand = New-Object System.Data.Odbc.OdbcCommand(&#34;SELECT id, name, age, login FROM public.users&#34; , $cnDB)&#xA;    $adDB.Fill($dsDB)&#xA;    $cnDB.Close()&#xA;}&#xA;catch [System.Data.Odbc.OdbcException] {&#xA;    $_.Exception&#xA;    $_.Exception.Message&#xA;    $_.Exception.ItemName&#xA;}&#xA;foreach ($row in $dsDB[0].Tables[0].Rows) {&#xA;    $row.login&#xA;    $row.age&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;WMI&lt;/h1&gt; &#xA;&lt;h3&gt;WMI/CIM (Windows Management Instrumentation/Common Information Model)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-WmiObjec -ComputerName localhost -Namespace root -class &#34;__NAMESPACE&#34; | select name,__namespace&lt;/code&gt; отобразить дочернии Namespace (логические иерархические группы) &lt;br&gt; &lt;code&gt;Get-WmiObject -List&lt;/code&gt; отобразить все классы пространства имен &#34;root\cimv2&#34; (по умолчанию), свойства (описывают конфигурацию и текущее состояние управляемого ресурса) и их методы (какие действия позволяет выполнить над этим ресурсом) &lt;br&gt; &lt;code&gt;Get-WmiObject -List | Where-Object {$_.name -match &#34;video&#34;}&lt;/code&gt; поиск класса по имени, его свойств и методов &lt;br&gt; &lt;code&gt;Get-WmiObject -ComputerName localhost -Class Win32_VideoController&lt;/code&gt; отобразить содержимое свойств класса&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gwmi -List | where name -match &#34;service&#34; | ft -auto&lt;/code&gt; если в таблице присутствуют Methods, то можно взаимодействовать {StartService, StopService} &lt;br&gt; &lt;code&gt;gwmi -Class win32_service | select *&lt;/code&gt; отобразить список всех служб и всех их свойств &lt;br&gt; &lt;code&gt;Get-CimInstance Win32_service&lt;/code&gt; обращается на прямую к &#34;root\cimv2&#34; &lt;br&gt; &lt;code&gt;gwmi win32_service -Filter &#34;name=&#39;Zabbix Agent&#39;&#34;&lt;/code&gt; отфильтровать вывод по имени &lt;br&gt; &lt;code&gt;(gwmi win32_service -Filter &#34;name=&#39;Zabbix Agent&#39;&#34;).State&lt;/code&gt; отобразить конкретное свойство &lt;br&gt; &lt;code&gt;gwmi win32_service -Filter &#34;State = &#39;Running&#39;&#34;&lt;/code&gt; отфильтровать запущенные службы &lt;br&gt; &lt;code&gt;gwmi win32_service -Filter &#34;StartMode = &#39;Auto&#39;&#34;&lt;/code&gt; отфильтровать службы по методу запуска &lt;br&gt; &lt;code&gt;gwmi -Query &#39;select * from win32_service where startmode=&#34;Auto&#34;&#39;&lt;/code&gt; WQL-запрос (WMI Query Language) &lt;br&gt; &lt;code&gt;gwmi win32_service | Get-Member -MemberType Method&lt;/code&gt; отобразить все методы взаимодействия с описание применения (Delete, StartService) &lt;br&gt; &lt;code&gt;(gwmi win32_service -Filter &#39;name=&#34;Zabbix Agent&#34;&#39;).Delete()&lt;/code&gt; удалить службу &lt;br&gt; &lt;code&gt;(gwmi win32_service -Filter &#39;name=&#34;MSSQL$MSSQLE&#34;&#39;).StartService()&lt;/code&gt; запустить службу&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-CimInstance -ComputerName $srv Win32_OperatingSystem | select LastBootUpTime&lt;/code&gt; время последнего включения &lt;br&gt; &lt;code&gt;gwmi -ComputerName $srv -Class Win32_OperatingSystem | select LocalDateTime,LastBootUpTime&lt;/code&gt; текущее время и время последнего включения &lt;br&gt; &lt;code&gt;gwmi Win32_OperatingSystem | Get-Member -MemberType Method&lt;/code&gt; методы reboot и shutdown &lt;br&gt; &lt;code&gt;(gwmi Win32_OperatingSystem -EnableAllPrivileges).Reboot()&lt;/code&gt; используется с ключем повышения привелегий &lt;br&gt; &lt;code&gt;(gwmi Win32_OperatingSystem -EnableAllPrivileges).Win32Shutdown(0)&lt;/code&gt; завершение сеанса пользователя&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$system = Get-WmiObject -Class Win32_OperatingSystem&#xA;$InstallDate = [Management.ManagementDateTimeconverter]::ToDateTime($system.installdate)` Получаем дату установки ОС&#xA;$AfterInstallDays = ((Get-Date) — $Installdate).Days` Вычисляем время, прошедшее с момента установки&#xA;$ShortInstallDate = &#34;{0:yyyy-MM-dd HH:MM}&#34; -f ($InstallDate)&#xA;&#34;Система установлена: $ShortInstallDate (Прошло $AfterInstalldays дней)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;(Get-WmiObject win32_battery).estimatedChargeRemaining&lt;/code&gt; заряд батареи в процентах &lt;br&gt; &lt;code&gt;gwmi Win32_UserAccount&lt;/code&gt; доменные пользователи &lt;br&gt; &lt;code&gt;(gwmi Win32_SystemUsers).PartComponent&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-CimInstance -ClassName Win32_LogonSession&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-CimInstance -ClassName Win32_BIOS&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gwmi -list -Namespace root\CIMV2\Terminalservices&lt;/code&gt; &lt;br&gt; &lt;code&gt;(gwmi -Class Win32_TerminalServiceSetting -Namespace root\CIMV2\TerminalServices).AllowTSConnections&lt;/code&gt; &lt;br&gt; &lt;code&gt;(gwmi -Class Win32_TerminalServiceSetting -Namespace root\CIMV2\TerminalServices).SetAllowTSConnections(1)&lt;/code&gt; включить RDP&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$srv = &#34;localhost&#34;&#xA;gwmi Win32_logicalDisk -ComputerName $srv | where {$_.Size -ne $null} | select @{&#xA;Label=&#34;Value&#34;; Expression={$_.DeviceID}}, @{Label=&#34;AllSize&#34;; Expression={&#xA;[string]([int]($_.Size/1Gb))+&#34; GB&#34;}},@{Label=&#34;FreeSize&#34;; Expression={&#xA;[string]([int]($_.FreeSpace/1Gb))+&#34; GB&#34;}}, @{Label=&#34;Free%&#34;; Expression={&#xA;[string]([int]($_.FreeSpace/$_.Size*100))+&#34; %&#34;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NLA (Network Level Authentication)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;(gwmi -class &#34;Win32_TSGeneralSetting&#34; -Namespace root\cimv2\Terminalservices -Filter &#34;TerminalName=&#39;RDP-tcp&#39;&#34;).UserAuthenticationRequired&lt;/code&gt; &lt;br&gt; &lt;code&gt;(gwmi -class &#34;Win32_TSGeneralSetting&#34; -Namespace root\cimv2\Terminalservices -Filter &#34;TerminalName=&#39;RDP-tcp&#39;&#34;).SetUserAuthenticationRequired(1)&lt;/code&gt; включить NLA &lt;br&gt; &lt;code&gt;Get-ItemProperty -Path &#34;HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&#34; -Name SecurityLayer&lt;/code&gt; отобразить значение (2) &lt;br&gt; &lt;code&gt;Get-ItemProperty -Path &#34;HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&#34; -Name UserAuthentication&lt;/code&gt; отобразить значение (1) &lt;br&gt; &lt;code&gt;Set-ItemProperty -Path &#34;HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&#34; -Name SecurityLayer -Value 0&lt;/code&gt; изменить значение &lt;br&gt; &lt;code&gt;Set-ItemProperty -Path &#34;HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&#34; -Name UserAuthentication -Value 0&lt;/code&gt; &lt;br&gt; &lt;code&gt;REG ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\CredSSP\Parameters /v AllowEncryptionOracle /t REG_DWORD /d 2&lt;/code&gt; отключить на клиентском компьютере проверку версии CredSSP, если на целевом комьютере-сервере не установлены обновления KB4512509 от мая 2018 года&lt;/p&gt; &#xA;&lt;h1&gt;Regedit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-PSDrive&lt;/code&gt; список всех доступных дисков/разделов, их размер и веток реестра &lt;br&gt; &lt;code&gt;cd HKLM:\&lt;/code&gt; HKEY_LOCAL_MACHINE &lt;br&gt; &lt;code&gt;cd HKCU:\&lt;/code&gt; HKEY_CURRENT_USER &lt;br&gt; &lt;code&gt;Get-Item&lt;/code&gt; получить информацию о ветке реестра &lt;br&gt; &lt;code&gt;New-Item&lt;/code&gt; создать новый раздел реестра &lt;br&gt; &lt;code&gt;Remove-Item&lt;/code&gt; удалить ветку реестра &lt;br&gt; &lt;code&gt;Get-ItemProperty&lt;/code&gt; получить значение ключей/параметров реестра (это свойства ветки реестра, аналогично свойствам файла) &lt;br&gt; &lt;code&gt;Set-ItemProperty&lt;/code&gt; изменить название или значение параметра реестра &lt;br&gt; &lt;code&gt;New-ItemProperty&lt;/code&gt; создать параметр реестра &lt;br&gt; &lt;code&gt;Remove-ItemProperty&lt;/code&gt; удалить параметр&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Select DisplayName&lt;/code&gt; список установленных программ &lt;br&gt; &lt;code&gt;Get-Item HKCU:\SOFTWARE\Microsoft\Office\16.0\Outlook\Profiles\Outlook\9375CFF0413111d3B88A00104B2A6676\00000002&lt;/code&gt; посмотреть содержимое Items &lt;br&gt; &lt;code&gt;(Get-ItemProperty HKCU:\SOFTWARE\Microsoft\Office\16.0\Outlook\Profiles\Outlook\9375CFF0413111d3B88A00104B2A6676\00000002).&#34;New Signature&#34;&lt;/code&gt; отобразить значение (Value) свойства (Property) Items &lt;br&gt; &lt;code&gt;$reg_path = &#34;HKCU:\SOFTWARE\Microsoft\Office\16.0\Outlook\Profiles\Outlook\9375CFF0413111d3B88A00104B2A6676\00000002&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$sig_name = &#34;auto&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-ItemProperty -Path $reg_path -Name &#34;New Signature&#34; -Value $sig_name&lt;/code&gt; изменить или добавить в корне ветки (Path) свойство (Name) со значением (Value) &lt;br&gt; &lt;code&gt;Set-ItemProperty -Path $reg_path -Name &#34;Reply-Forward Signature&#34; -Value $sig_name&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Windows Registry Editor Version 5.00&#xA;[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\taskmgr.exe]&#xA;&#34;Debugger&#34;=&#34;\&#34;C:\\Windows\\System32\\Taskmgr.exe\&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;(Get-Counter -ListSet *).CounterSetName&lt;/code&gt; вывести список всех доступных счетчиков производительности в системе &lt;br&gt; &lt;code&gt;(Get-Counter -ListSet *memory*).Counter&lt;/code&gt; поиск по wildcard-имени во всех счетчиках (включая дочернии) &lt;br&gt; &lt;code&gt;Get-Counter &#34;\Memory\Available MBytes&#34;&lt;/code&gt; объем свободной оперативной памяти &lt;br&gt; &lt;code&gt;Get-Counter -cn $srv &#34;\LogicalDisk(*)\% Free Space&#34;&lt;/code&gt; % свободного места на всех разделах дисков &lt;br&gt; &lt;code&gt;(Get-Counter &#34;\Process(*)\ID Process&#34;).CounterSamples&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Counter &#34;\Processor(_Total)\% Processor Time&#34; –ComputerName $srv -MaxSamples 5 -SampleInterval 2&lt;/code&gt; 5 проверок каждые 2 секунды &lt;br&gt; &lt;code&gt;Get-Counter &#34;\Процессор(_Total)\% загруженности процессора&#34; -Continuous&lt;/code&gt; непрерывно &lt;br&gt; &lt;code&gt;(Get-Counter &#34;\Процессор(*)\% загруженности процессора&#34;).CounterSamples&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(Get-Counter -ListSet *интерфейс*).Counter&lt;/code&gt; найти все счетчики &lt;br&gt; &lt;code&gt;Get-Counter &#34;\Сетевой интерфейс(*)\Всего байт/с&#34;&lt;/code&gt; отобразить все адаптеры (выбрать действующий по трафику)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$WARNING = 25&#xA;$CRITICAL = 50&#xA;$TransferRate = ((Get-Counter &#34;\\huawei-mb-x-pro\сетевой интерфейс(intel[r] wi-fi 6e ax211 160mhz)\всего байт/с&#34;&#xA;).countersamples | select -ExpandProperty CookedValue)*8&#xA;$NetworkUtilisation = [math]::round($TransferRate/1000000000*100,2)&#xA;if ($NetworkUtilisation -gt $CRITICAL){&#xA;Write-Output &#34;CRITICAL: $($NetworkUtilisation) % Network utilisation, $($TransferRate.ToString(&#39;N0&#39;)) b/s&#34;   &#xA;#exit 2&#x9;&#x9;&#xA;}&#xA;if ($NetworkUtilisation -gt $WARNING){&#xA;Write-Output &#34;WARNING: $($NetworkUtilisation) % Network utilisation, $($TransferRate.ToString(&#39;N0&#39;)) b/s&#34;&#xA;#exit 1&#xA;}&#xA;Write-Output &#34;OK: $($NetworkUtilisation) % Network utilisation, $($TransferRate.ToString(&#39;N0&#39;)) b/s&#34;   &#xA;#exit 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;SNMP&lt;/h1&gt; &#xA;&lt;h3&gt;Setup SNMP Service&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-WindowsFeature SNMP-Service,SNMP-WMI-Provider -IncludeManagementTools&lt;/code&gt; установить роль SNMP и WMI провайдер через Server Manager &lt;br&gt; &lt;code&gt;Get-WindowsFeature SNMP*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-WindowsCapability -Online -Name SNMP.Client~~~~0.0.1.0&lt;/code&gt; установить компонент Feature On Demand для Windows 10/11&lt;code&gt;\&lt;/code&gt;Get-Service SNMP*&lt;code&gt;\&lt;/code&gt;Get-NetFirewallrule -DisplayName &lt;em&gt;snmp&lt;/em&gt; | ft&lt;code&gt;\&lt;/code&gt;Get-NetFirewallrule -DisplayName &lt;em&gt;snmp&lt;/em&gt; | Enable-NetFirewallRule`&lt;/p&gt; &#xA;&lt;h3&gt;Setting SNMP Service via Regedit&lt;/h3&gt; &#xA;&lt;p&gt;Agent: &lt;br&gt; &lt;code&gt;New-ItemProperty -Path &#34;HKLM:\SYSTEM\CurrentControlSet\services\SNMP\Parameters\RFC1156Agent&#34; -Name &#34;sysContact&#34; -Value &#34;lifailon-user&#34;&lt;/code&gt; создать (New) или изменить (Set) &lt;br&gt; &lt;code&gt;New-ItemProperty -Path &#34;HKLM:\SYSTEM\CurrentControlSet\services\SNMP\Parameters\RFC1156Agent&#34; -Name &#34;sysLocation&#34; -Value &#34;plex-server&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Security: &lt;br&gt; &lt;code&gt;New-Item -Path &#34;HKLM:\SYSTEM\CurrentControlSet\services\SNMP\Parameters\TrapConfiguration\public&#34;&lt;/code&gt; создать новый community string &lt;br&gt; &lt;code&gt;New-ItemProperty -Path &#34;HKLM:\SYSTEM\CurrentControlSet\Services\SNMP\Parameters\ValidCommunities&#34; -Name &#34;public&#34; -Value 16&lt;/code&gt; назначить права на public &lt;br&gt; &lt;code&gt;1 — NONE&lt;/code&gt; &lt;br&gt; &lt;code&gt;2 — NOTIFY&lt;/code&gt; позволяет получать SNMP ловушки &lt;br&gt; &lt;code&gt;4 — READ ONLY&lt;/code&gt; позволяет получать данные с устройства &lt;br&gt; &lt;code&gt;8 — READ WRITE&lt;/code&gt; позволяет получать данные и изменять конфигурацию устройства &lt;br&gt; &lt;code&gt;16 — READ CREATE&lt;/code&gt; позволяет читать данные, изменять и создавать объекты &lt;br&gt; &lt;code&gt;New-ItemProperty -Path &#34;HKLM:\SYSTEM\CurrentControlSet\Services\SNMP\Parameters\PermittedManagers&#34; -Name &#34;1&#34; -Value &#34;192.168.3.99&#34;&lt;/code&gt; от кого разрешено принимать запросы &lt;br&gt; &lt;code&gt;Get-Service SNMP | Restart-Service&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;snmpwalk&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;snmpwalk -v 2c -c public 192.168.3.100&lt;/code&gt; &lt;br&gt; &lt;code&gt;snmpwalk -v 2c -c public -O e 192.168.3.100&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Module -Name SNMP&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-SnmpData -IP 192.168.3.100 -OID 1.3.6.1.2.1.1.4.0 -UDPport 161 -Community public&lt;/code&gt; &lt;br&gt; &lt;code&gt;(Get-SnmpData -IP 192.168.3.100 -OID 1.3.6.1.2.1.1.4.0).Data&lt;/code&gt; &lt;br&gt; &lt;code&gt;Invoke-SnmpWalk -IP 192.168.3.100 -OID 1.3.6.1.2.1.1&lt;/code&gt; пройтись по дереву OID &lt;br&gt; &lt;code&gt;Invoke-SnmpWalk -IP 192.168.3.100 -OID 1.3.6.1.2.1.25.6.3.1.2&lt;/code&gt; список установленного ПО &lt;br&gt; &lt;code&gt;Invoke-SnmpWalk -IP 192.168.3.100 -OID 1.3.6.1.2.1.25.2.3.1&lt;/code&gt; список разделов и памяти (C: D: Virtual Memory и Physical Memory) &lt;br&gt; &lt;code&gt;Set-SnmpData&lt;/code&gt; изменение данных на удаленном устройстве&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Module -Name SNMPv3&lt;/code&gt; &lt;br&gt; &lt;code&gt;Invoke-SNMPv3Get&lt;/code&gt; получение данных по одному OID &lt;br&gt; &lt;code&gt;Invoke-SNMPv3Set&lt;/code&gt; изменение данных &lt;br&gt; &lt;code&gt;Invoke-SNMPv3Walk&lt;/code&gt; обход по дереву OID &lt;br&gt; &lt;code&gt;Invoke-SNMPv3Walk -UserName lifailon -Target 192.168.3.100 -AuthSecret password -PrivSecret password -OID 1.3.6.1.2.1.1 -AuthType MD5 -PrivType AES128&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Lextm.SharpSnmpLib&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://api.nuget.org/v3-flatcontainer/lextm.sharpsnmplib/12.5.2/lextm.sharpsnmplib.12.5.2.nupkg&#34;&gt;https://api.nuget.org/v3-flatcontainer/lextm.sharpsnmplib/12.5.2/lextm.sharpsnmplib.12.5.2.nupkg&lt;/a&gt; &lt;br&gt; &lt;code&gt;Add-Type -LiteralPath &#34;$home\Desktop\lextm.sharpsnmplib-12.5.2\net471\SharpSnmpLib.dll&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$port = 161&#xA;$OID = &#34;1.3.6.1.2.1.1.4.0&#34;&#xA;$variableList = New-Object Collections.Generic.List[Lextm.SharpSnmpLib.Variable]&#xA;$variableList.Add([Lextm.SharpSnmpLib.Variable]::new([Lextm.SharpSnmpLib.ObjectIdentifier]::new($OID)))&#xA;$timeout = 3000&#xA;[Net.IPAddress]$ip = &#34;192.168.3.100&#34;&#xA;$endpoint = New-Object Net.IpEndPoint $ip, $port&#xA;$Community = &#34;public&#34;&#xA;[Lextm.SharpSnmpLib.VersionCode]$Version = &#34;V2&#34;&#xA;&#xA;$message = [Lextm.SharpSnmpLib.Messaging.Messenger]::Get(&#xA;$Version,&#xA;$endpoint,&#xA;$Community,&#xA;$variableList,&#xA;$TimeOut&#xA;)&#xA;$message.Data.ToString()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Walk&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;[Lextm.SharpSnmpLib.ObjectIdentifier]$OID = &#34;1.3.6.1.2.1.1&#34; # дерево или конечный OID&#xA;$WalkMode = [Lextm.SharpSnmpLib.Messaging.WalkMode]::WithinSubtree # режим обхода по дереву&#xA;$results = New-Object Collections.Generic.List[Lextm.SharpSnmpLib.Variable]&#xA;$message = [Lextm.SharpSnmpLib.Messaging.Messenger]::Walk(&#xA;  $Version,&#xA;  $endpoint,&#xA;  $Community,&#xA;  $OID,&#xA;  $results,&#xA;  $TimeOut,&#xA;  $WalkMode&#xA;)&#xA;$results&#xA;&#xA;$results2 = @()&#xA;foreach ($d in $results) {&#xA;$results2 +=[PSCustomObject]@{&#39;ID&#39;=$d.id.ToString();&#39;Data&#39;=$d.Data.ToString()} # перекодировать вывод построчно в строку&#xA;}&#xA;$results2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Zabbix&lt;/h1&gt; &#xA;&lt;h3&gt;Zabbix Agent Deploy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$url = &#34;https://cdn.zabbix.com/zabbix/binaries/stable/6.4/6.4.5/zabbix_agent2-6.4.5-windows-amd64-static.zip&#34;&#xA;$path = &#34;$home\Downloads\zabbix-agent2-6.4.5.zip&#34;&#xA;$WebClient = New-Object System.Net.WebClient&#xA;$WebClient.DownloadFile($url, $path)` скачать файл&#xA;Expand-Archive $path -DestinationPath &#34;C:\zabbix-agent2-6.4.5\&#34;` разархивировать&#xA;Remove-Item $path` удалить архив&#xA;New-NetFirewallRule -DisplayName &#34;Zabbix-Agent&#34; -Profile Any -Direction Inbound -Action Allow -Protocol TCP -LocalPort 10050,10051` открыть порты в FW&#xA;&#xA;$Zabbix_Server = &#34;192.168.3.102&#34;&#xA;$conf = &#34;C:\zabbix-agent2-6.4.5\conf\zabbix_agent2.conf&#34;&#xA;$cat = cat $conf&#xA;$rep = $cat -replace &#34;Server=.+&#34;,&#34;Server=$Zabbix_Server&#34;&#xA;$rep | Select-String Server=&#xA;$rep &amp;gt; $conf&#xA;&#xA;$exe = &#34;C:\zabbix-agent2-6.4.5\bin\zabbix_agent2.exe&#34;&#xA;.$exe --config $conf --install` установить службу&#xA;Get-Service *Zabbix*Agent* | Start-Service` запустить службу&#xA;#.$exe --config $conf --uninstall` удалить службу&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;zabbix_sender&lt;/h3&gt; &#xA;&lt;p&gt;Создать host - задать произвольное имя (powershell-host) и добавить в группу &lt;br&gt; Создать Items: &lt;br&gt; Name: Service Count &lt;br&gt; Type: Zabbix trapper &lt;br&gt; Key: service.count &lt;br&gt; Type of Information: Numeric&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$path = &#34;C:\zabbix-agent2-6.4.5\bin&#34;&#xA;$scount = (Get-Service).Count&#xA;.$path\zabbix_sender.exe -z 192.168.3.102 -s &#34;powershell-host&#34; -k service.count -o $scount&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;zabbix_get&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;apt install zabbix-get&lt;/code&gt; &lt;br&gt; &lt;code&gt;nano /etc/zabbix/zabbix_agentd.conf&lt;/code&gt; &lt;br&gt; &lt;code&gt;Server=127.0.0.1,192.168.3.102,192.168.3.99&lt;/code&gt; добавить сервера для получения данных zabbix_get с агента (как их запрашивает сервер)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.$path\zabbix_get -s 192.168.3.101 -p 10050 -k agent.version&lt;/code&gt; проверить версию агента &lt;br&gt; &lt;code&gt;.$path\zabbix_get -s 192.168.3.101 -p 10050 -k agent.ping&lt;/code&gt; 1 - ok &lt;br&gt; &lt;code&gt;.$path\zabbix_get -s 192.168.3.101 -p 10050 -k net.if.discovery&lt;/code&gt; список сетевых интерфейсов &lt;br&gt; &lt;code&gt;.$path\zabbix_get -s 192.168.3.101 -p 10050 -k net.if.in[&#34;ens33&#34;]&lt;/code&gt; &lt;br&gt; &lt;code&gt;.$path\zabbix_get -s 192.168.3.101 -p 10050 -k net.if.out[&#34;ens33&#34;]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;UserParameter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;UserParameter=process.count,powershell -Command &#34;(Get-Process).Count&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;UserParameter=process.vm[*],powershell -Command &#34;(Get-Process $1).ws&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Test: &lt;br&gt; &lt;code&gt;C:\zabbix-agent2-6.4.5\bin\zabbix_get.exe -s 127.0.0.1 -p 10050 -k process.count&lt;/code&gt; &lt;br&gt; &lt;code&gt;C:\zabbix-agent2-6.4.5\bin\zabbix_get.exe -s 127.0.0.1 -p 10050 -k process.vm[zabbix_agent2] &lt;/code&gt;&lt;br&gt; &lt;code&gt;C:\zabbix-agent2-6.4.5\bin\zabbix_get.exe -s 127.0.0.1 -p 10050 -k process.vm[powershell]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Создать новые Items: &lt;br&gt; key: &lt;code&gt;process.count&lt;/code&gt; &lt;br&gt; key: &lt;code&gt;process.vm[zabbix_agent2]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Include&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Добавить параметр Include для включения конфигурационных файлов подключаемых плагинов &lt;code&gt;&#39;Include=.\zabbix_agent2.d\plugins.d\*.conf&#39; &amp;gt;&amp;gt; C:\zabbix-agent2-6.4.5\conf\zabbix_agent2.conf&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Создать конфигурационный файл с пользовательскими параметрами в каталоге, путь к которому указан в zabbix_agentd.conf &lt;br&gt; &lt;code&gt;&#39;UserParameter=Get-Query-Param[*],powershell.exe -noprofile -executionpolicy bypass -File C:\zabbix-agent2-6.4.5\conf\zabbix_agent2.d\scripts\User-Sessions\Get-Query-Param.ps1 $1&#39; &amp;gt; C:\zabbix-agent2-6.4.5\conf\zabbix_agent2.d\plugins.d\User-Sessions.conf&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Поместить скрипт Get-Query-Param.ps1 в каталог, путь к которому указан в User-Sessions.conf. Скрипт содержим пользовательские параметры, которые он принимает от Zabbix сервера для передачи их в функции скрипта.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Param([string]$select)&#xA;if ($select -eq &#34;ACTIVEUSER&#34;) {&#xA;(Get-Query | where status -match &#34;Active&#34;).User&#xA;}&#xA;if ($select -eq &#34;INACTIVEUSER&#34;) {&#xA;(Get-Query | where status -match &#34;Disconnect&#34;).User&#xA;}&#xA;if ($select -eq &#34;ACTIVECOUNT&#34;) {&#xA;(Get-Query | where status -match &#34;Active&#34;).Status.Count&#xA;}&#xA;if ($select -eq &#34;INACTIVECOUNT&#34;) {&#xA;(Get-Query | where status -match &#34;Disconnect&#34;).Status.Count&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Проверить работу скрипта:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;$path = &#34;C:\zabbix-agent2-6.4.5\conf\zabbix_agent2.d\scripts\User-Sessions&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;.$path\Get-Query-Param.ps1 ACTIVEUSER&lt;/code&gt; &lt;br&gt; &lt;code&gt;.$path\Get-Query-Param.ps1 INACTIVEUSER&lt;/code&gt; &lt;br&gt; &lt;code&gt;.$path\Get-Query-Param.ps1 ACTIVECOUNT&lt;/code&gt; &lt;br&gt; &lt;code&gt;.$path\Get-Query-Param.ps1 INACTIVECOUNT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Создать Items с ключами:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Query-Param[ACTIVEUSER]&lt;/code&gt; Type: Text &lt;br&gt; &lt;code&gt;Get-Query-Param[INACTIVEUSER]&lt;/code&gt; Type: Text &lt;br&gt; &lt;code&gt;Get-Query-Param[ACTIVECOUNT]&lt;/code&gt; Type: Int &lt;br&gt; &lt;code&gt;Get-Query-Param[INACTIVECOUNT]&lt;/code&gt; Type: Int&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Макросы:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;{$ACTIVEMAX} = 16&lt;/code&gt; &lt;br&gt; &lt;code&gt;{$ACTIVEMIN} = 0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Триггеры:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;last(/Windows-User-Sessions/Get-Query-Param[ACTIVECOUNT])&amp;gt;{$ACTIVEMAX}&lt;/code&gt; &lt;br&gt; &lt;code&gt;min(/Windows-User-Sessions/Get-Query-Param[ACTIVECOUNT],24h)={$ACTIVEMIN}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;zabbix_agent2.conf&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Агент может работать в пассивном (сервер забирает сам информацию) и активном режиме (агент сам отправляет):&#xA;Server=192.168.3.102&#xA;ServerActive=192.168.3.102&#xA;# Требуется указать hostname для ServerActive:&#xA;Hostname=huawei-book-01&#xA;# Если не указано, используется для генерации имени хоста (игнорируется, если имя хоста определено):&#xA;# HostnameItem=system.hostname&#xA;# Как часто обновляется список активных проверок, в секундах (Range: 60-3600):&#xA;RefreshActiveChecks=120&#xA;# IP-адрес источника для исходящих соединений:&#xA;# SourceIP=&#xA;# Агент будет слушать на этом порту соединения с сервером (Range: 1024-32767):&#xA;# ListenPort=10050&#xA;# Список IP-адресов, которые агент должен прослушивать через запятую&#xA;# ListenIP=0.0.0.0&#xA;# Агент будет прослушивать этот порт для запросов статуса HTTP (Range: 1024-32767):&#xA;# StatusPort=&#xA;ControlSocket=\\.\pipe\agent.sock&#xA;# Куда вести журнал (file/syslog/console):&#xA;LogType=file&#xA;LogFile=C:\zabbix-agent2-6.4.5\zabbix_agent2.log&#xA;# Размер лога от 0-1024 MB (0 - отключить автоматическую ротацию логов)&#xA;LogFileSize=100&#xA;# Уровень логирования. 4 - для отладки (выдает много информации)&#xA;DebugLevel=4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API Token&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.zabbix.com/documentation/current/en/manual/api/reference&#34;&gt;https://www.zabbix.com/documentation/current/en/manual/api/reference&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ip = &#34;192.168.3.102&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$url = &#34;http://$ip/zabbix/api_jsonrpc.php&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$data = @{&#xA;    &#34;jsonrpc&#34;=&#34;2.0&#34;;&#xA;    &#34;method&#34;=&#34;user.login&#34;;&#xA;    &#34;params&#34;=@{&#xA;        &#34;username&#34;=&#34;Admin&#34;;` в версии до 6.4 параметр &#34;user&#34;&#xA;        &#34;password&#34;=&#34;zabbix&#34;;&#xA;    };&#xA;    &#34;id&#34;=1;&#xA;}&#xA;$token = (Invoke-RestMethod -Method POST -Uri $url -Body ($data | ConvertTo-Json) -ContentType &#34;application/json&#34;).Result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$token = &#34;2eefd25fdf1590ebcdb7978b5bcea1fff755c65b255da8cbd723181b639bb789&#34;&lt;/code&gt; сгенерировать токен в UI (&lt;a href=&#34;http://192.168.3.102/zabbix/zabbix.php?action=token.list&#34;&gt;http://192.168.3.102/zabbix/zabbix.php?action=token.list&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;user.get&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$data = @{&#xA;    &#34;jsonrpc&#34;=&#34;2.0&#34;;&#xA;    &#34;method&#34;=&#34;user.get&#34;;&#xA;    &#34;params&#34;=@{&#xA;    };&#xA;    &#34;auth&#34;=$token;&#xA;    &#34;id&#34;=1;&#xA;}&#xA;$users = (Invoke-RestMethod -Method POST -Uri $url -Body ($data | ConvertTo-Json) -ContentType &#34;application/json&#34;).Result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;problem.get&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$data = @{&#xA;    &#34;jsonrpc&#34;=&#34;2.0&#34;;&#xA;    &#34;method&#34;=&#34;problem.get&#34;;&#xA;    &#34;params&#34;=@{&#xA;    };&#xA;    &#34;auth&#34;=$token;&#xA;    &#34;id&#34;=1;&#xA;}&#xA;(Invoke-RestMethod -Method POST -Uri $url -Body ($data | ConvertTo-Json) -ContentType &#34;application/json&#34;).Result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;host.get&lt;/h3&gt; &#xA;&lt;p&gt;Получить список всех хостов (имя и id)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.zabbix.com/documentation/current/en/manual/api/reference/host&#34;&gt;https://www.zabbix.com/documentation/current/en/manual/api/reference/host&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;host.create - creating new hosts &lt;br&gt; host.delete - deleting hosts &lt;br&gt; host.get - retrieving hosts &lt;br&gt; host.massadd - adding related objects to hosts &lt;br&gt; host.massremove - removing related objects from hosts &lt;br&gt; host.massupdate - replacing or removing related objects from hosts &lt;br&gt; host.update - updating hosts&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$data = @{&#xA;    &#34;jsonrpc&#34;=&#34;2.0&#34;;&#xA;    &#34;method&#34;=&#34;host.get&#34;;&#xA;    &#34;params&#34;=@{&#xA;        &#34;output&#34;=@(` отфильтровать вывод&#xA;            &#34;hostid&#34;;&#xA;            &#34;host&#34;;&#xA;        );&#xA;    };&#xA;    &#34;id&#34;=2;&#xA;    &#34;auth&#34;=$token;&#xA;}&#xA;$hosts = (Invoke-RestMethod -Method POST -Uri $url -Body ($data | ConvertTo-Json) -ContentType &#34;application/json&#34;).Result&#xA;$host_id = $hosts[3].hostid` забрать id хоста по индексу&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;item.get&lt;/h3&gt; &#xA;&lt;p&gt;Получить id элементов данных по наименованию ключа для конкретного хоста&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$data = @{&#xA;    &#34;jsonrpc&#34;=&#34;2.0&#34;;&#xA;    &#34;method&#34;=&#34;item.get&#34;;&#xA;    &#34;params&#34;=@{&#xA;        &#34;hostids&#34;=@($host_id);` отфильтровать по хосту&#xA;    };&#xA;    &#34;auth&#34;=$token;&#xA;    &#34;id&#34;=1;&#xA;}&#xA;$items = (Invoke-RestMethod -Method POST -Uri $url -Body ($data | ConvertTo-Json) -ContentType &#34;application/json&#34;).Result&#xA;$items_id = ($items | where key_ -match system.uptime).itemid` забрать id элемента данных&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;history.get&lt;/h3&gt; &#xA;&lt;p&gt;Получить всю историю элемента данных по его id&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$data = @{&#xA;    &#34;jsonrpc&#34;=&#34;2.0&#34;;&#xA;    &#34;method&#34;=&#34;history.get&#34;;&#xA;    &#34;params&#34;=@{&#xA;        &#34;hostids&#34;=@($host_id); ` фильтрация по хосту&#xA;        &#34;itemids&#34;=@($items_id);` фильтрация по элементу данных&#xA;    };&#xA;    &#34;auth&#34;=$token;&#xA;    &#34;id&#34;=1;&#xA;}&#xA;$items_data_uptime = (Invoke-RestMethod -Method POST -Uri $url -Body ($data | ConvertTo-Json) -ContentType &#34;application/json&#34;).Result` получить все данные по ключу у конкретного хоста&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Convert Secconds To TimeSpan and DateTime&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$sec = $items_data_uptime.value&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function ConvertSecondsTo-TimeSpan {&#xA;    param (&#xA;        $insec&#xA;    )&#xA;    $TimeSpan = [TimeSpan]::fromseconds($insec)&#xA;    &#34;{0:dd&#39; day &#39;hh\:mm\:ss}&#34; -f $TimeSpan&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$UpTime = ConvertSecondsTo-TimeSpan $sec[-1]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Convert From Unix Time&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$time = $items_data_uptime.clock&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;function ConvertFrom-UnixTime {&#xA;    param (&#xA;        $intime&#xA;    )&#xA;    $EpochTime = [DateTime]&#34;1/1/1970&#34;&#xA;    $TimeZone = Get-TimeZone&#xA;    $UTCTime = $EpochTime.AddSeconds($intime)&#xA;    $UTCTime.AddMinutes($TimeZone.BaseUtcOffset.TotalMinutes)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$GetDataTime = ConvertFrom-UnixTime $time[-1]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;($hosts | where hostid -eq $host_id).host&lt;/code&gt; получить имя хоста &lt;br&gt; &lt;code&gt;$UpTime&lt;/code&gt; последнее полученное значение времени работы хоста &lt;br&gt; &lt;code&gt;$GetDataTime&lt;/code&gt; время последнего полученного значения&lt;/p&gt; &#xA;&lt;h1&gt;pki&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;New-SelfSignedCertificate -CertStoreLocation Cert:\LocalMachine\My -DnsName &#34;$env:computername&#34; -FriendlyName &#34;Test Certificate&#34; -NotAfter (Get-Date).AddYears(5)&lt;/code&gt; создать самоподписанный сертификат (в LocalMachine\My - Сертификаты компьютера\Личное) с сроком действия 5 лет&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ChildItem -Path Cert:\CurrentUser\Root\&lt;/code&gt; список всех установленных сертификатов в хранилище Доверенные корневые ЦС Текущего пользователя &lt;br&gt; &lt;code&gt;Get-ChildItem -Path Cert:\CurrentUser\My\&lt;/code&gt; список самозаверяющих сертификатов в Личное хранилище Текущего пользователя &lt;br&gt; &lt;code&gt;Get-ChildItem -Path Cert:\LocalMachine\My\&lt;/code&gt; список самозаверяющих сертификатов в Личное хранилище Локального компьютера &lt;br&gt; &lt;code&gt;Get-ChildItem -Path Cert:\LocalMachine\My\ | select NotBefore,NotAfter,Thumbprint,Subject&lt;/code&gt; срок действия сертификата &lt;br&gt; &lt;code&gt;Get-ChildItem -Path Cert:\LocalMachine\My\ | where Thumbprint -eq D9356FB774EE0E6206B7D5B59B99102CA5B17BDA&lt;/code&gt; поиск сертификат по отпечатку&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-ChildItem -Path $env:APPDATA\Microsoft\SystemCertificates\My\Certificates\&lt;/code&gt; сертификаты в файловой системе, каждый файл соответствует сертификату, установленному в личном хранилище текущего пользователя &lt;br&gt; &lt;code&gt;Get-ChildItem -Path $env:APPDATA\Microsoft\SystemCertificates\My\Keys\&lt;/code&gt; ссылки на объекты закрытых ключей, созданных поставщиком хранилища ключей (KSP) &lt;br&gt; &lt;code&gt;Get-ChildItem -Path HKCU:\Software\Microsoft\SystemCertificates\CA\Certificates | ft -AutoSize&lt;/code&gt; список сертификатов в реестре вошедшего в систему пользователя&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$cert = (Get-ChildItem -Path Cert:\CurrentUser\My\)[1]&lt;/code&gt; выбрать сертификат &lt;br&gt; &lt;code&gt;$cert | Remove-Item&lt;/code&gt; удалить сертификат&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Export-Certificate -FilePath $home\Desktop\certificate.cer -Cert $cert&lt;/code&gt; экспортировать сертификат &lt;br&gt; &lt;code&gt;$cert.HasPrivateKey&lt;/code&gt; проверить наличие закрытого ключа &lt;br&gt; &lt;code&gt;$pass = &#34;password&#34; | ConvertTo-SecureString -AsPlainText -Force&lt;/code&gt; создать пароль для шифрования закрытого ключа &lt;br&gt; &lt;code&gt;Export-PfxCertificate -FilePath $home\Desktop\certificate.pfx -Password $pass -Cert $certificate&lt;/code&gt; экспортировать сертификат с закрытым ключем&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Import-Certificate -FilePath $home\Desktop\certificate.cer -CertStoreLocation Cert:\CurrentUser\My&lt;/code&gt; импортировать сертификат &lt;br&gt; &lt;code&gt;Import-PfxCertificate -Exportable -Password $pass -CertStoreLocation Cert:\CurrentUser\My -FilePath $home\Desktop\certificate.pfx&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;OpenSSL&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Invoke-WebRequest -Uri https://slproweb.com/download/Win64OpenSSL_Light-3_1_1.msi -OutFile $home\Downloads\OpenSSL-Light-3.1.1.msi&#xA;Start-Process $home\Downloads\OpenSSL-Light-3.1.1.msi -ArgumentList &#39;/quiet&#39; -Wait` установить msi пакет в тихом режиме (запуск от имени Администратора)&#xA;rm $home\Downloads\OpenSSL-Light-3.1.1.msi&#xA;cd &#34;C:\Program Files\OpenSSL-Win64\bin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Изменить пароль для PFX &lt;br&gt; &lt;code&gt;openssl pkcs12 -in &#34;C:\Cert\domain.ru.pfx&#34; -out &#34;C:\Cert\domain.ru.pem&#34; -nodes&lt;/code&gt; экспортируем имеющийся сертификат и закрытый ключ в .pem-файл без пароля с указанием текущего пароля &lt;br&gt; &lt;code&gt;openssl pkcs12 -export -in &#34;C:\Cert\domain.ru.pem&#34; -out &#34;C:\Cert\domain.ru_password.pfx&#34; -nodes&lt;/code&gt; конвертируем .pem обратно в .pfx c указанием нового пароля&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Конвертация из закрытого и открытого ключа PEM в PFX &lt;br&gt; &lt;code&gt;openssl pkcs12 -export -in &#34;C:\tmp\vpn\vpn.itproblog.ru-crt.pem&#34; -inkey &#34;C:\tmp\vpn\vpn.itproblog.ru-key.pem&#34; -out &#34;C:\tmp\vpn\vpn.iiproblog.ru.pfx&#34;&lt;/code&gt; &lt;br&gt; in – путь до файла с открытым ключом &lt;br&gt; inkey – путь до файла с закрытым ключом &lt;br&gt; out – путь до файла, в который будет конвертирован сертификат (pfx)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Конвертация PFX в CRT &lt;br&gt; &lt;code&gt;openssl pkcs12 -in &#34;C:\OpenSSL-Win64\bin\_.domain.ru.pfx&#34; -clcerts -out &#34;C:\OpenSSL-Win64\bin\_.domain.ru.crt&#34;&lt;/code&gt; указывается текущий и 2 раза новый пароль PEM pass phrase (файл содержит EGIN CERTIFICATE и BEGIN ENCRYPTED PRIVATE KEY) &lt;br&gt; &lt;code&gt;openssl pkcs12 -in &#34;C:\OpenSSL-Win64\bin\_.domain.ru.pfx&#34; -clcerts -nokeys -out &#34;C:\OpenSSL-Win64\bin\_.domain.ru.crt&#34;&lt;/code&gt; без ключа, получить открытую часть (файл содержит только EGIN CERTIFICATE)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Конвертация PFX в KEY &lt;br&gt; &lt;code&gt;openssl pkcs12 -in &#34;C:\OpenSSL-Win64\bin\_.domain.ru.pfx&#34; -nocerts -out &#34;C:\OpenSSL-Win64\bin\_.domain.ru.key&#34;&lt;/code&gt; файл содержит только BEGIN ENCRYPTED PRIVATE KEY&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Снять пароль к закрытого ключа .key &lt;br&gt; &lt;code&gt;openssl rsa -in &#34;C:\OpenSSL-Win64\bin\_.domain.ru.key&#34; -out &#34;C:\OpenSSL-Win64\bin\_.domain.ru-decrypted.key&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CRT и KEY в PFX: &lt;br&gt; &lt;code&gt;openssl pkcs12 -inkey certificate.key -in certificate.crt -export -out certificate.pfx&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;OpenVPN&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Invoke-WebRequest -Uri https://swupdate.openvpn.org/community/releases/OpenVPN-2.6.5-I001-amd64.msi -OutFile $home\Downloads\OpenVPN-2.6.5.msi&lt;/code&gt; &lt;br&gt; &lt;code&gt;Start-Process $home\Downloads\OpenVPN-2.6.5.msi -ArgumentList &#39;/quiet /SELECT_OPENSSL_UTILITIES=1&#39; -Wait&lt;/code&gt; &lt;br&gt; &lt;code&gt;msiexec /i $home\Downloads\OpenVPN-2.6.5.msi ADDLOCAL=EasyRSA /passive /quiet # установить отдельный компонент EasyRSA Certificate Management Scripts&lt;/code&gt; &lt;br&gt; &lt;code&gt;# msiexec /i $home\Downloads\OpenVPN-2.6.5.msi ADDLOCAL=OpenVPN.Service,Drivers,Drivers.Wintun,OpenVPN,OpenVPN.GUI,OpenVPN.GUI.OnLogon,EasyRSA /passive&lt;/code&gt; выборочная установка &lt;br&gt; &lt;code&gt;# Invoke-WebRequest -Uri https://github.com/OpenVPN/easy-rsa/releases/download/v3.1.5/EasyRSA-3.1.5-win64.zip -OutFile $home\Downloads\EasyRSA-3.1.5.zip&lt;/code&gt; скачать отдельный пакет EasyRSA &lt;br&gt; &lt;code&gt;rm $home\Downloads\OpenVPN-2.6.5.msi&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cd &#34;C:\Program Files\OpenVPN\easy-rsa&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Copy-Item vars.example vars&lt;/code&gt; файл конфигурации для EasyRSA&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set_var EASYRSA_TEMP_DIR &#34;$EASYRSA_PKI&#34;&#xA;set_var EASYRSA_REQ_COUNTRY &#34;RU&#34;&#xA;set_var EASYRSA_REQ_PROVINCE &#34;MSK&#34;&#xA;set_var EASYRSA_REQ_CITY &#34;MSK&#34;&#xA;set_var EASYRSA_REQ_ORG &#34;FAILON.NET&#34;&#xA;set_var EASYRSA_REQ_EMAIL &#34;lifailon@domain.ru&#34;&#xA;set_var EASYRSA_REQ_OU &#34;IT&#34;&#xA;#set_var EASYRSA_KEY_SIZE 2048&#xA;#set_var EASYRSA_CA_EXPIRE 3650&#xA;#set_var EASYRSA_CERT_EXPIRE 825&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;.\EasyRSA-Start.bat&lt;/code&gt; среда EasyRSA Shell &lt;br&gt; &lt;code&gt;easyrsa init-pki&lt;/code&gt; инициализация PKI, создает директорию: C:\Program Files\OpenVPN\easy-rsa\pki и читает переменные файла \easy-rsa\vars &lt;br&gt; &lt;code&gt;easyrsa build-ca&lt;/code&gt; генерация корневого CA с указанием пароля и произвольное имя сервера (\pki\ca.crt и \pki\private\ca.key) &lt;br&gt; &lt;code&gt;easyrsa gen-req server nopass&lt;/code&gt; генерация запроса сертификата и ключ для сервера OpenVPN - yes (\pki\reqs\server.req и \pki\private\server.key) &lt;br&gt; &lt;code&gt;easyrsa sign-req server server&lt;/code&gt; подписать запрос на выпуск сертификата сервера с помощью CA - yes (\pki\issued\server.crt) &lt;br&gt; &lt;code&gt;easyrsa gen-dh&lt;/code&gt; создать ключ Диффи-Хеллмана (\pki\dh.pem) &lt;br&gt; &lt;code&gt;easyrsa gen-req client1&lt;/code&gt; nopass&lt;code&gt; генерация запроса сертификата и ключ для клиента OpenVPN (\pki\reqs\client1.req и \pki\private\client1.key)&lt;/code&gt; &lt;br&gt; &lt;code&gt;easyrsa sign-req client client1&lt;/code&gt; подписать запрос на выпуск сертификата клиента с помощью CA - yes (\pki\issued\client1.crt) &lt;br&gt; &lt;code&gt;easyrsa revoke client1&lt;/code&gt; отозвать сертификат пользователя &lt;br&gt; &lt;code&gt;openssl rsa -in &#34;C:\Program Files\OpenVPN\easy-rsa\pki\private\client1.key&#34; -out &#34;C:\Program Files\OpenVPN\easy-rsa\pki\private\client1_nopass.key&#34;&lt;/code&gt; снять защиту паролем для ключа (BEGIN ENCRYPTED PRIVATE KEY -&amp;gt; BEGIN PRIVATE KEY) &lt;br&gt; &lt;code&gt;exit&lt;/code&gt; &lt;br&gt; &lt;code&gt;cd &#34;C:\Program Files\OpenVPN\bin&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;.\openvpn --genkey secret ta.key&lt;/code&gt; генерация ключа tls-auth (\bin\ta.key) &lt;br&gt; &lt;code&gt;Move-Item &#34;C:\Program Files\OpenVPN\bin\ta.key&#34; &#34;C:\Program Files\OpenVPN\easy-rsa\pki\&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;server.ovpn&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;# Copy-Item &#34;C:\Program Files\OpenVPN\sample-config\server.ovpn&#34; &#34;C:\Program Files\OpenVPN\config-auto\server.ovpn&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;New-Item -ItemType File -Path &#34;C:\Program Files\OpenVPN\config-auto\server.ovpn&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;port 1194&#xA;proto udp&#xA;# Что именно инкапсулировать в туннеле (ethernet фреймы - tap или ip пакеты - tun)&#xA;dev tun&#xA;ca &#34;C:\\Program Files\\OpenVPN\\easy-rsa\\pki\\ca.crt&#34;&#xA;cert &#34;C:\\Program Files\\OpenVPN\\easy-rsa\\pki\\issued\\server.crt&#34;&#xA;key &#34;C:\\Program Files\\OpenVPN\\easy-rsa\\pki\\private\\server.key&#34;&#xA;dh &#34;C:\\Program Files\\OpenVPN\\easy-rsa\\pki\\dh.pem&#34;&#xA;server 192.168.4.0 255.255.255.0&#xA;# Хранит список сопоставления ip для клиентов, что бы назначить тот же адрес при перезапуске сервера&#xA;# ifconfig-pool-persist &#34;C:\\Program Files\\OpenVPN\\dhcp-client-list.txt&#34;&#xA;# Разрешить клиентам подключаться под одним ключом&#xA;# duplicate-cn&#xA;# max-clients 30&#xA;# Разрешить обмен трафиком между клиентами&#xA;client-to-client&#xA;# compress&#xA;tls-auth &#34;C:\\Program Files\\OpenVPN\\easy-rsa\\pki\\ta.key&#34; 0&#xA;cipher AES-256-GCM&#xA;keepalive 20 60&#xA;# Не перечитавать файлы ключей при перезапуске туннеля&#xA;persist-key&#xA;# Оставляет без изменения устройства tun/tap при перезапуске OpenVPN&#xA;persist-tun&#xA;status &#34;C:\\Program Files\\OpenVPN\\log\\status.log&#34;&#xA;log &#34;C:\\Program Files\\OpenVPN\\log\\openvpn.log&#34;&#xA;verb 3&#xA;mute 20&#xA;windows-driver wintun&#xA;# Открыть доступ к подсети за сервером&#xA;push &#34;route 192.168.3.0 255.255.255.0&#34;&#xA;push &#34;route 192.168.4.0 255.255.255.0&#34;&#xA;# Завернуть все запросы клиента (в том числе Интернет трафик) на OpenVPN сервер&#xA;# push &#34;redirect-gateway def1&#34;&#xA;# push &#34;dhcp-option DNS 192.168.3.101&#34;&#xA;# push &#34;dhcp-option DOMAIN failon.net&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;New-NetFirewallRule -DisplayName &#34;AllowOpenVPN-In&#34; -Direction Inbound -Protocol UDP –LocalPort 1194 -Action Allow&lt;/code&gt; на сервере &lt;br&gt; &lt;code&gt;New-NetFirewallRule -DisplayName &#34;AllowOpenVPN-Out&#34; -Direction Outbound -Protocol UDP –LocalPort 1194 -Action Allow&lt;/code&gt; на клиенте &lt;br&gt; &lt;code&gt;Get-Service *openvpn* | Restart-Service&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;client.ovpn&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;# Copy-Item &#34;C:\Program Files\OpenVPN\sample-config\client.ovpn&#34; &#34;C:\Program Files\OpenVPN\config-auto\client.ovpn&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;New-Item -ItemType File -Path &#34;C:\Program Files\OpenVPN\config-auto\client.ovpn&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;client&#xA;dev tun&#xA;proto udp&#xA;remote 26.115.154.67 1194&#xA;resolv-retry infinite&#xA;nobind&#xA;persist-key&#xA;persist-tun&#xA;ca ca.crt&#xA;cert client1.crt&#xA;key client1.key&#xA;remote-cert-tls server&#xA;tls-auth ta.key 1&#xA;cipher AES-256-GCM&#xA;connect-retry-max 25&#xA;# Использовать драйвер wintun и полный путь до сертификатов при использовании openvpn gui&#xA;windows-driver wintun&#xA;verb 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;iwr -Uri https://openvpn.net/downloads/openvpn-connect-v3-windows.msi -OutFile &#34;$home\downloads\OpenVPN-Connect-3.msi&#34;&lt;/code&gt; &lt;br&gt; Передать конфигурацию и ключи: &lt;br&gt; &lt;code&gt;client.ovpn&lt;/code&gt; &lt;br&gt; &lt;code&gt;ca.crt&lt;/code&gt; &lt;br&gt; &lt;code&gt;dh.pem&lt;/code&gt; &lt;br&gt; &lt;code&gt;ta.key&lt;/code&gt; &lt;br&gt; &lt;code&gt;client1.crt&lt;/code&gt; &lt;br&gt; &lt;code&gt;client1.key&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Route&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Service RemoteAccess | Stop-Service&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-ItemProperty -Path &#34;HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters&#34; -Name &#34;IPEnableRouter&#34; -Value 1&lt;/code&gt; включает IP маршрутизацию &lt;br&gt; &lt;code&gt;(Get-ItemProperty &#34;HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters&#34;).IPEnableRouter&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-NetIPInterface | select ifIndex,InterfaceAlias,AddressFamily,ConnectionState,Forwarding | ft&lt;/code&gt; отобразить сетевые интерфейсы &lt;br&gt; &lt;code&gt;Set-NetIPInterface -ifIndex 13 -Forwarding Enabled&lt;/code&gt; включить переадресацию на интерфейсе&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sysctl net.ipv4.ip_forward=1&lt;/code&gt; &lt;br&gt; &lt;code&gt;echo &#34;sysctl net.ipv4.ip_forward = 1&#34; &amp;gt;&amp;gt; /etc/sysctl.conf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-NetRoute&lt;/code&gt; &lt;br&gt; &lt;code&gt;New-NetRoute -DestinationPrefix &#34;192.168.3.0/24&#34; -NextHop &#34;192.168.4.1&#34; -InterfaceIndex 8&lt;/code&gt; &lt;br&gt; &lt;code&gt;route -p add 192.168.3.0 mask 255.255.255.0 192.168.4.1 metric 1&lt;/code&gt; &lt;br&gt; &lt;code&gt;route -p change 192.168.3.0 mask 255.255.255.0 192.168.4.1 metric 2&lt;/code&gt; &lt;br&gt; &lt;code&gt;route -p add 192.168.3.0 mask 255.255.255.0 192.168.4.1 metric 1 if 7&lt;/code&gt; указать номер сетевого интерфейса на который необходимо посылать пакет (Wintun Userspace Tunnel) &lt;br&gt; &lt;code&gt;route print -4&lt;/code&gt; &lt;br&gt; &lt;code&gt;route delete 192.168.3.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tracert 192.168.3.101&lt;/code&gt; с 192.168.4.6&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1    17 ms     *       22 ms  192.168.4.1&#xA;2    12 ms    13 ms    14 ms  192.168.3.101&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;route add -net 192.168.4.0 netmask 255.255.255.0 gw 192.168.3.100&lt;/code&gt; &lt;br&gt; &lt;code&gt;route -e&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;traceroute 192.168.4.6&lt;/code&gt; с 192.168.3.101&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1  192.168.3.100 (192.168.3.100)  0.148 ms  0.110 ms  0.106 ms&#xA;2  192.168.4.6 (192.168.4.6)  14.573 ms * *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ping 192.168.3.101 -t&lt;/code&gt; с 192.168.4.6 &lt;br&gt; &lt;code&gt;tcpdump -n -i ens33 icmp&lt;/code&gt; на 192.168.3.101&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;14:36:34.533771 IP 192.168.4.6 &amp;gt; 192.168.3.101: ICMP echo request, id 1, seq 2962, length 40 # отправил запрос&#xA;14:36:34.533806 IP 192.168.3.101 &amp;gt; 192.168.4.6: ICMP echo reply, id 1, seq 2962, length 40 # отправил ответ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;NAT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command -Module NetNat&lt;/code&gt; &lt;br&gt; &lt;code&gt;New-NetNat -Name LocalNat -InternalIPInterfaceAddressPrefix &#34;192.168.3.0/24&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-NetNatStaticMapping -NatName LocalNat -Protocol TCP -ExternalIPAddress 0.0.0.0 -ExternalPort 80 -InternalIPAddress 192.168.3.102 -InternalPort 80&lt;/code&gt; &lt;br&gt; &lt;code&gt;Remove-NetNatStaticMapping -StaticMappingID 0&lt;/code&gt; &lt;br&gt; &lt;code&gt;Remove-NetNat -Name LocalNat&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WireGuard&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Invoke-WebRequest &#34;https://download.wireguard.com/windows-client/wireguard-amd64-0.5.3.msi&#34; -OutFile &#34;$home\Downloads\WireGuard-Client-0.5.3.msi&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;msiexec.exe /i &#34;$home\Downloads\WireGuard-Client-0.5.3.msi&#34; DO_NOT_LAUNCH=1 /qn&lt;/code&gt; &lt;br&gt; &lt;code&gt;Invoke-WebRequest &#34;http://www.wiresock.net/downloads/wiresock-vpn-gateway-x64-1.1.4.1.msi&#34; -OutFile &#34;$home\Downloads\WireSock-VPN-Gateway-1.1.4.1.msi&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;msiexec.exe /i &#34;http://www.wiresock.net/downloads/wiresock-vpn-gateway-x64-1.1.4.1.msi&#34; /qn&lt;/code&gt; &lt;br&gt; &lt;code&gt;$env:Path = [System.Environment]::GetEnvironmentVariable(&#34;Path&#34;,&#34;Machine&#34;) + &#34;;&#34; + [System.Environment]::GetEnvironmentVariable(&#34;Path&#34;,&#34;User&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;wg-quick-config -add -start&lt;/code&gt; &lt;br&gt; &lt;code&gt;26.115.154.67:8181&lt;/code&gt; &lt;br&gt; &lt;code&gt;192.168.21.4/24&lt;/code&gt; &lt;br&gt; &lt;code&gt;Successfully saved client configuration: C:\ProgramData\NT KERNEL\WireSock VPN Gateway\wsclient_1.conf&lt;/code&gt; &lt;br&gt; &lt;code&gt;Successfully saved server configuration: C:\ProgramData\NT KERNEL\WireSock VPN Gateway\wiresock.conf&lt;/code&gt; &lt;br&gt; &lt;code&gt;get-service *wire*&lt;/code&gt; &lt;br&gt; &lt;code&gt;wg show&lt;/code&gt; &lt;br&gt; &lt;code&gt;wg-quick-config -add -restart&lt;/code&gt; add client&lt;/p&gt; &#xA;&lt;p&gt;wiresock.conf&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Interface]&#xA;PrivateKey = gCHC0g2JPwr6sXPiaOL4/KTkMyjN9TculrJUA/GORV8=&#xA;Address = 192.168.21.5/24&#xA;ListenPort = 8181&#xA;&#xA;[Peer]&#xA;PublicKey = NoSxjew2RCHiUzI6mlahjd4I+0EcLsoYom/H01z91yU=&#xA;AllowedIPs = 192.168.21.6/32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;wsclient_1.conf (добавить маршруты для клиента в AllowedIPs)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Interface]&#xA;PrivateKey = yIpRQRmaGrrk9Y+49E8JhEpFmKzSeecvUAdeNgf1hUM=&#xA;Address = 192.168.21.6/24&#xA;DNS = 8.8.8.8, 1.1.1.1&#xA;MTU = 1420&#xA;&#xA;[Peer]&#xA;PublicKey = Fp7674VSYeGj8CYt6RCKR7Qz1y/IKUXCw8ImOFhX3hk=&#xA;AllowedIPs = 192.168.21.0/24, 192.168.3.0/24&#xA;Endpoint = 26.115.154.67:8181&#xA;PersistentKeepalive = 25&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;VpnClient&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-Command -Module VpnClient&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-VpnConnection -Name &#34;vpn-failon&#34; -ServerAddress &#34;26.115.154.67&#34; -TunnelType L2TP -L2tpPsk &#34;123098&#34; -EncryptionLevel &#34;Required&#34; -AuthenticationMethod MSChapv2 -RememberCredential -AllUserConnection –PassThru -Force&lt;/code&gt; &lt;br&gt; &lt;code&gt;-TunnelType PPTP/L2TP/SSTP/IKEv2/Automatic&lt;/code&gt; &lt;br&gt; &lt;code&gt;-L2tpPsk&lt;/code&gt; использовать общий ключ для аутентификации (без параметра, для L2TP аутентификации используется сертификат) &lt;br&gt; &lt;code&gt;-AuthenticationMethod Pap/Chap/MSChapv2/Eap/MachineCertificate&lt;/code&gt; &lt;br&gt; &lt;code&gt;-EncryptionLevel NoEncryption/Optional/Required/Maximum/Custom&lt;/code&gt; &lt;br&gt; &lt;code&gt;-SplitTunneling&lt;/code&gt; заворачивать весь трафик через VPN-туннель (включение Use default gateway on remote network в настройках параметра VPN адаптера) &lt;br&gt; &lt;code&gt;-UseWinlogonCredential&lt;/code&gt; использовать учетные данные текущего пользователя для аутентификации на VPN сервере &lt;br&gt; &lt;code&gt;-RememberCredential&lt;/code&gt; разрешить сохранять учетные данные для VPN подключения (учетная запись и пароль сохраняются в диспетчер учетных данных Windows после первого успешного подключения) &lt;br&gt; &lt;code&gt;-DnsSuffix domain.local&lt;/code&gt; &lt;br&gt; &lt;code&gt;-AllUserConnection&lt;/code&gt; разрешить использовать VPN подключение для всех пользователей компьютера (сохраняется в конфигурационный файл: C:\ProgramData\Microsoft\Network\Connections\Pbk\rasphone.pbk)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Module -Name VPNCredentialsHelper&lt;/code&gt; модуль для сохранения логина и пароля в Windows Credential Manager для VPN подключения &lt;br&gt; &lt;code&gt;Set-VpnConnectionUsernamePassword -connectionname vpn-failon -username user1 -password password&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rasdial &#34;vpn-failon&#34;&lt;/code&gt; подключиться &lt;br&gt; &lt;code&gt;Get-VpnConnection -AllUserConnection | select *&lt;/code&gt; список VPN подключения, доступных для всех пользователей, найстройки и текущий статус подключения (ConnectionStatus) &lt;br&gt; &lt;code&gt;Add-VpnConnectionRoute -ConnectionName vpn-failon -DestinationPrefix 192.168.3.0/24 –PassThru&lt;/code&gt; динамически добавить в таблицу маршрутизации маршрут, который будет активен при подключении к VPN &lt;br&gt; &lt;code&gt;Remove-VpnConnection -Name vpn-failon -AllUserConnection -Force&lt;/code&gt; удалить&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Set-VpnConnection -Name &#34;vpn-failon&#34; -SplitTunneling $True&lt;/code&gt; включить раздельное тунеллирование &lt;br&gt; &lt;code&gt;Add-VpnConnectionRoute -ConnectionName &#34;vpn-failon&#34; -DestinationPrefix 172.22.22.0/24&lt;/code&gt; настроить маршрутизацию к указанной подсети через VPN-соединение &lt;br&gt; &lt;code&gt;(Get-VpnConnection -ConnectionName &#34;vpn-failon&#34;).routes&lt;/code&gt; отобразить таблицу маршрутизации для указанного соединения &lt;br&gt; &lt;code&gt;Remove-VpnConnectionRoute -ConnectionName &#34;vpn-failon&#34; -DestinationPrefix &#34;172.22.23.0/24&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Proxy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;$user = &#34;lifailon&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$pass = &#34;Proxy&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;$SecureString = ConvertTo-SecureString $pass -AsPlainText -Force&lt;/code&gt; &lt;br&gt; &lt;code&gt;$Credential = New-Object System.Management.Automation.PSCredential($user, $SecureString)&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Net.Http.HttpClient]::DefaultProxy = New-Object System.Net.WebProxy(&#34;http://192.168.3.100:9090&#34;)&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Net.Http.HttpClient]::DefaultProxy.Credentials = [System.Net.CredentialCache]::DefaultCredentials&lt;/code&gt; &lt;br&gt; &lt;code&gt;[System.Net.Http.HttpClient]::DefaultProxy.Credentials = $Credential&lt;/code&gt; &lt;br&gt; &lt;code&gt;Invoke-RestMethod http://ifconfig.me/ip&lt;/code&gt; &lt;br&gt; &lt;code&gt;Invoke-RestMethod https://kinozal.tv/rss.xml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;OpenSSH&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-WindowsCapability -Online | ? Name -like &#39;OpenSSH.Client*&#39;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-WindowsCapability -Online -Name OpenSSH.Client*&lt;/code&gt; &lt;br&gt; &lt;code&gt;dism /Online /Add-Capability /CapabilityName:OpenSSH.Client~~~~0.0.1.0&lt;/code&gt; &lt;br&gt; &lt;code&gt;iwr https://github.com/PowerShell/Win32-OpenSSH/releases/download/v9.2.2.0p1-Beta/OpenSSH-Win64-v9.2.2.0.msi -OutFile $home\Downloads\OpenSSH-Win64-v9.2.2.0.msi&lt;/code&gt; скачать &lt;br&gt; &lt;code&gt;msiexec /i $home\Downloads\OpenSSH-Win64-v9.2.2.0.msi&lt;/code&gt; установить msi пакет &lt;br&gt; &lt;code&gt;Set-Service sshd -StartupType Automatic&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-NetTCPConnection | where LocalPort -eq 22&lt;/code&gt; &lt;br&gt; &lt;code&gt;New-NetFirewallRule -Name sshd -DisplayName &#39;OpenSSH Server (sshd)&#39; -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-NetFirewallRule -Name *ssh*&lt;/code&gt; &lt;br&gt; &lt;code&gt;Start-Process notepad++ C:\Programdata\ssh\sshd_config&lt;/code&gt; конфигурационный файл &lt;br&gt; &lt;code&gt;GSSAPIAuthentication yes&lt;/code&gt; включить Kerberos аутентификацию (через AD) &lt;br&gt; &lt;code&gt;SyslogFacility LOCAL0&lt;/code&gt; включить локальное ведение журнала в файл (C:\ProgramData\ssh\logs\sshd.log) &lt;br&gt; &lt;code&gt;LogLevel INFO&lt;/code&gt; &lt;br&gt; &lt;code&gt;Restart-Service sshd&lt;/code&gt; &lt;br&gt; &lt;code&gt;ssh -K $srv&lt;/code&gt; выполнить Kerberos аутентификацию &lt;br&gt; &lt;code&gt;ssh Lifailon@192.168.3.99 -p 22&lt;/code&gt; &lt;br&gt; &lt;code&gt;pwsh -command Get-Service&lt;/code&gt; &lt;br&gt; &lt;code&gt;ssh -L 3101:192.168.3.101:22 -R 3101:192.168.3.101:22 lifailon@192.168.3.101 -p 22&lt;/code&gt; SSH Tunnel lifailon@localhost:3101 -&amp;gt; 192.168.3.101:3101&lt;/p&gt; &#xA;&lt;h1&gt;WinRM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Enter-PSSession -ComputerName $srv&lt;/code&gt; подключиться к PowerShell сессии через PSRemoting. Подключение возможно только по FQDN-имени &lt;br&gt; &lt;code&gt;Invoke-Command $srv -ScriptBlock {Get-ComputerInfo}&lt;/code&gt; выполнение команды через PSRemoting &lt;br&gt; &lt;code&gt;$session = New-PSSession $srv&lt;/code&gt; открыть сессию &lt;br&gt; &lt;code&gt;Get-PSSession&lt;/code&gt; отобразить активные сессии &lt;br&gt; &lt;code&gt;icm -Session $session {$srv = $using:srv}&lt;/code&gt; передать переменную текущей сессии ($using) в удаленную &lt;br&gt; &lt;code&gt;Disconnect-PSSession $session&lt;/code&gt; закрыть сессию &lt;br&gt; &lt;code&gt;Remove-PSSession $session&lt;/code&gt; удалить сессию &lt;br&gt; &lt;code&gt;Import-Module -Name ActiveDirectory -PSSession $srv&lt;/code&gt; импортировать модуль с удаленного компьютера в локальную сессию&lt;/p&gt; &#xA;&lt;h3&gt;Windows Remote Management Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;winrm quickconfig -quiet&lt;/code&gt; изменит запуск службы WinRM на автоматический, задаст стандартные настройки WinRM и добавить исключения для портов в fw &lt;br&gt; &lt;code&gt;Enable-PSRemoting –Force&lt;/code&gt; включить PowerShell Remoting, работает только для доменного и частного сетевых профилей Windows &lt;br&gt; &lt;code&gt;Enable-PSRemoting -SkipNetworkProfileCheck -Force&lt;/code&gt; для настройки компьютера в общей (public) сети (работает с версии powershell 6)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$NetProfiles = Get-NetConnectionProfile&lt;/code&gt; отобразить профили сетевых подключений &lt;br&gt; &lt;code&gt;Set-NetConnectionProfile -InterfaceIndex $NetProfiles[1].InterfaceIndex -NetworkCategory Private&lt;/code&gt; изменить тип сети для профиля (DomainAuthenticated/Public) &lt;br&gt; &lt;code&gt;(Get-CimInstance -ClassName Win32_ComputerSystem).PartOfDomain&lt;/code&gt; проверить, что компьютер добавлен в домен AD &lt;br&gt; &lt;code&gt;Get-Service WinRM | Set-Service -StartupType AutomaticDelayedStart&lt;/code&gt; отложенный запуск &lt;br&gt; &lt;code&gt;Get-Service -Name winrm -RequiredServices&lt;/code&gt; статус зависимых служб &lt;br&gt; &lt;code&gt;New-NetFirewallRule -Profile Any -DisplayName &#34;WinRM HTTP&#34; -Direction Inbound -Protocol TCP -LocalPort 5985,5986&lt;/code&gt; &lt;br&gt; &lt;code&gt;Test-NetConnection $srv -port 5895&lt;/code&gt; проверить порт &lt;br&gt; &lt;code&gt;Test-WSMan $srv -ErrorAction Ignore&lt;/code&gt; проверить работу WinRM на удаленном компьютере (игнорировать вывод ошибок для скрипта) или локально (localhost)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$Cert = New-SelfSignedCertificate -CertStoreLocation Cert:\LocalMachine\My -DnsName &#34;$env:computername&#34; -FriendlyName &#34;WinRM HTTPS Certificate&#34; -NotAfter (Get-Date).AddYears(5)&lt;/code&gt; создать самоподписанный сертификат &lt;br&gt; &lt;code&gt;$Thumbprint = $Cert.Thumbprint&lt;/code&gt; забрать отпечаток &lt;br&gt; &lt;code&gt;New-Item -Path WSMan:\Localhost\Listener -Transport HTTPS -Address * -CertificateThumbprint $Thumbprint -Name WinRM_HTTPS_Listener -Force&lt;/code&gt; создать прослушиватель &lt;br&gt; &lt;code&gt;New-NetFirewallRule -DisplayName &#39;WinRM HTTPS&#39; -Profile Domain,Private -Direction Inbound -Action Allow -Protocol TCP -LocalPort 5986&lt;/code&gt; открыть порт в fw&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$selector_set = @{&#xA;    Address = &#34;*&#34;&#xA;    Transport = &#34;HTTPS&#34;&#xA;}&#xA;$value_set = @{&#xA;    CertificateThumbprint = &#34;66ABFDA044D8C85135048186E2FDC0DBE6125163&#34;&#xA;}&#xA;New-WSManInstance -ResourceURI &#34;winrm/config/Listener&#34; -SelectorSet $selector_set -ValueSet $value_set&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;winrm get winrm/config&lt;/code&gt; отобразить всю конфигурацию (Client/Service) &lt;br&gt; &lt;code&gt;winrm get winrm/config/service/auth&lt;/code&gt; конфигурация авторизации на сервере &lt;br&gt; &lt;code&gt;winrm enumerate winrm/config/listener&lt;/code&gt; текущая конфигурация прослушивателей WinRM (отображает отпечаток сертификата для HTTPS 5986) &lt;br&gt; &lt;code&gt;Get-ChildItem -Path Cert:\LocalMachine\My\ | where Thumbprint -eq D9356FB774EE0E6206B7D5B59B99102CA5B17BDA | select *&lt;/code&gt; информация о сертификате&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ls WSMan:\localhost\Client&lt;/code&gt; конфигурацию клиента &lt;br&gt; &lt;code&gt;ls WSMan:\localhost\Service&lt;/code&gt; конфигурация сервера &lt;br&gt; &lt;code&gt;ls WSMan:\localhost\Service\auth&lt;/code&gt; список всех конфигураций аутентификации WinRM сервера &lt;br&gt; &lt;code&gt;Set-Item -path WSMan:\localhost\Service\auth\basic -value $true&lt;/code&gt; разрешить локальную аутентификацию к текущему серверу &lt;br&gt; &lt;code&gt;ls HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WSMAN&lt;/code&gt; настройки в реестре (например, для включения аудентификации в \Service\auth_basic = 1) &lt;br&gt; &lt;code&gt;Set-Item WSMan:\localhost\Client\TrustedHosts -Value 192.168.* -Force&lt;/code&gt; добавить доверенные хосты в конфигурацию на клиенте, чтобы работала Negotiate аутентификация через NTLM &lt;br&gt; &lt;code&gt;Set-Item WSMan:\localhost\Client\TrustedHosts -Value 192.168.3.100 -Concatenate -Force&lt;/code&gt; добавить второй компьютер &lt;br&gt; &lt;code&gt;ls WSMan:\localhost\Client\TrustedHosts&lt;/code&gt; &lt;br&gt; &lt;code&gt;Set-Item WSMan:\localhost\Client\AllowUnencrypted $true&lt;/code&gt; включить передача незашифрованных данных конфигурации клиента &lt;br&gt; &lt;code&gt;Set-Item WSMan:\localhost\Service\AllowUnencrypted $true&lt;/code&gt; включить передача незашифрованных данных конфигурации сервера (необходимо быть в private сети)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-PSSessionConfiguration&lt;/code&gt; проверить, включен ли PSremoting и вывести список пользователей и групп, которым разрешено подключаться через WinRM &lt;br&gt; &lt;code&gt;Set-PSSessionConfiguration -Name Microsoft.PowerShell -ShowSecurityDescriptorUI&lt;/code&gt; назначить права доступа через дескриптор безопасности текущей сессии (до перезагруки) &lt;br&gt; &lt;code&gt;(Get-PSSessionConfiguration -Name &#34;Microsoft.PowerShell&#34;).SecurityDescriptorSDDL&lt;/code&gt; получить настройки дескриптора в формате SDDL &lt;br&gt; &lt;code&gt;Set-PSSessionConfiguration -Name Microsoft.PowerShell -SecurityDescriptorSDDL $SDDL&lt;/code&gt; применить настройки дескриптора на другом компьютере без использования GUI \&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;New-LocalUser &#34;WinRM-Writer&#34; -Password (ConvertTo-SecureString -AsPlainText &#34;123098&#34;)&lt;/code&gt; создать пользователя &lt;br&gt; &lt;code&gt;Add-LocalGroupMember -Group &#34;Remote Management Users&#34; -Member &#34;WinRM-Writer&#34;&lt;/code&gt; добавить пользователя WinRM-Writer в локальную группу доступа &#34;Пользователи удаленного управления&#34; &lt;br&gt; &lt;code&gt;cmdkey /add:192.168.3.99 /user:WinRM-Writer /pass:123098&lt;/code&gt; сохранить пароль в CredentialManager &lt;code&gt;cmdkey /list&lt;/code&gt; &lt;br&gt; &lt;code&gt;Import-Module CredentialManager&lt;/code&gt; &lt;br&gt; &lt;code&gt;Add-Type -AssemblyName System.Web&lt;/code&gt; &lt;br&gt; &lt;code&gt;New-StoredCredential -Target 192.168.3.99 -UserName WinRM-Writer -Password 123098 -Comment WinRM&lt;/code&gt; сохранить пароль в CredentialManager (из PS5) &lt;br&gt; &lt;code&gt;Get-StoredCredential -AsCredentialObject&lt;/code&gt; &lt;br&gt; &lt;code&gt;$cred = Get-StoredCredential -Target 192.168.3.99&lt;/code&gt; &lt;br&gt; &lt;code&gt;Enter-PSSession -ComputerName 192.168.3.99 -Credential $cred -Authentication Negotiate&lt;/code&gt; &lt;br&gt; &lt;code&gt;Enter-PSSession -ComputerName 192.168.3.99 -Credential $cred -Authentication Basic -Port 5985&lt;/code&gt; работает при отключении allowunencrypted на стороне сервера и клиента &lt;br&gt; &lt;code&gt;winrs -r:http://192.168.3.100:5985/wsman -u:WinRM-Writer -p:123098 ipconfig&lt;/code&gt; передать команду через winrs (-?) &lt;br&gt; &lt;code&gt;winrs -r:https://192.168.3.100:5985/wsman -u:WinRM-Writer -p:123098 -ssl ipconfig&lt;/code&gt; через https &lt;br&gt; &lt;code&gt;pwsh -Command &#34;Install-Module -Name PSWSMan&#34;&lt;/code&gt; установить модуль для использования в Linux системе&lt;/p&gt; &#xA;&lt;h3&gt;Kerberos&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;.\CheckMaxTokenSize.ps1 -Principals login -OSEmulation $true -Details $true&lt;/code&gt; узнать размер токена пользователя в домене &lt;br&gt; &lt;code&gt;Get-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Kerberos\Parameters | select maxtokensize&lt;/code&gt; максимальный размер токена на сервере &lt;br&gt; &lt;code&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\HTTP\Parameters&lt;/code&gt; изменить размера, если заголовок пакета аутентификации превышает 16 Кб (из за большого кол-ва групп) &lt;br&gt; &lt;code&gt;MaxFieldLength увеличить до 0000ffff (65535)&lt;/code&gt; &lt;br&gt; &lt;code&gt;MaxRequestBytes увеличить до 0000ffff (65535)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;DSC&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Import-Module PSDesiredStateConfiguration&lt;/code&gt; &lt;br&gt; &lt;code&gt;(Get-Module PSDesiredStateConfiguration).ExportedCommands&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-DscLocalConfigurationManager&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get-DscResource&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-DscResource -Name File -Syntax&lt;/code&gt; &lt;a href=&#34;https://learn.microsoft.com/ru-ru/powershell/dsc/reference/resources/windows/fileresource?view=dsc-1.1&#34;&gt;https://learn.microsoft.com/ru-ru/powershell/dsc/reference/resources/windows/fileresource?view=dsc-1.1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Ensure = Present&lt;/code&gt; настройка должна быть включена (каталог должен присутствовать, процесс должен быть запущен, если нет – создать, запустить) &lt;br&gt; &lt;code&gt;Ensure = Absent&lt;/code&gt; настройка должна быть выключена (каталога быть не должно, процесс не должен быть запущен, если нет – удалить, остановить)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Configuration TestConfiguraion&#xA;{&#xA;    Ctrl+Space&#xA;}&#xA;&#xA;Configuration DSConfigurationProxy &#xA;{&#xA;    Node vproxy-01 &#xA;    {&#xA;        File CreateDir&#xA;        {&#xA;            Ensure = &#34;Present&#34;&#xA;            Type = &#34;Directory&#34;&#xA;            DestinationPath = &#34;C:\Temp&#34;&#xA;        }&#xA;        Service StopW32time&#xA;        {&#xA;            Name = &#34;w32time&#34;&#xA;            State = &#34;Stopped&#34;` Running&#xA;        }&#xA;&#x9;&#x9;WindowsProcess RunCalc&#xA;        {&#xA;            Ensure = &#34;Present&#34;&#xA;            Path = &#34;C:\WINDOWS\system32\calc.exe&#34;&#xA;            Arguments = &#34;&#34;&#xA;        }&#xA;        Registry RegSettings&#xA;        {&#xA;            Ensure = &#34;Present&#34;&#xA;            Key = &#34;HKEY_LOCAL_MACHINE\SOFTWARE\MySoft&#34;&#xA;            ValueName = &#34;TestName&#34;&#xA;            ValueData = &#34;TestValue&#34;&#xA;            ValueType = &#34;String&#34;&#xA;        }&#xA;#&#x9;&#x9;WindowsFeature IIS&#xA;#       {&#xA;#            Ensure = &#34;Present&#34;&#xA;#            Name = &#34;Web-Server&#34;&#xA;#       }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;$Path = (DSConfigurationProxy).DirectoryName&lt;/code&gt; &lt;br&gt; &lt;code&gt;Test-DscConfiguration -Path $Path | select *&lt;/code&gt; ResourcesInDesiredState - уже настроено, ResourcesNotInDesiredState - не настроено (не соответствует) &lt;br&gt; &lt;code&gt;Start-DscConfiguration -Path $Path&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Job&lt;/code&gt; &lt;br&gt; &lt;code&gt;$srv = &#34;vproxy-01&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Service -ComputerName $srv | ? name -match w32time # Start-Service&lt;/code&gt; &lt;br&gt; &lt;code&gt;icm $srv {Get-Process | ? ProcessName -match calc} | ft # Stop-Process -Force&lt;/code&gt; &lt;br&gt; &lt;code&gt;icm $srv {ls C:\ | ? name -match Temp} | ft&lt;/code&gt; rm`&lt;/p&gt; &#xA;&lt;h1&gt;Git&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;git --version&lt;/code&gt; &lt;br&gt; &lt;code&gt;git config --global user.name &#34;Lifailon&#34;&lt;/code&gt; добавить имя для коммитов &lt;br&gt; &lt;code&gt;git config --global user.email &#34;lifailon@yandex.ru&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;git config --global --edit&lt;/code&gt; &lt;br&gt; &lt;code&gt;ssh-keygen -t rsa -b 4096&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Service | where name -match &#34;ssh-agent&#34; | Set-Service -StartupType Automatic&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Service | where name -match &#34;ssh-agent&#34; | Start-Service&lt;/code&gt; &lt;br&gt; &lt;code&gt;Get-Service | where name -match &#34;ssh-agent&#34; | select Name,Status,StartType&lt;/code&gt; &lt;br&gt; &lt;code&gt;ssh-agent&lt;/code&gt; &lt;br&gt; &lt;code&gt;ssh-add C:\Users\Lifailon\.ssh\id_rsa&lt;/code&gt; &lt;br&gt; &lt;code&gt;cat ~\.ssh\id_rsa.pub | Set-Clipboard&lt;/code&gt; copy to &lt;a href=&#34;https://github.com/settings/keys&#34;&gt;https://github.com/settings/keys&lt;/a&gt; &lt;br&gt; &lt;code&gt;cd $home\Documents\Git&lt;/code&gt; &lt;br&gt; &lt;code&gt;git clone git@github.com:Lifailon/PowerShell-Commands&lt;/code&gt; &lt;br&gt; &lt;code&gt;cd PowerShell-Commands&lt;/code&gt; &lt;br&gt; &lt;code&gt;git grep powershell&lt;/code&gt; поиск текста в файлах &lt;br&gt; &lt;code&gt;git pull&lt;/code&gt; синхронизировать изменения из хранилища &lt;br&gt; &lt;code&gt;git status&lt;/code&gt; отобразить статус изменений по файлам &lt;br&gt; &lt;code&gt;git diff&lt;/code&gt; отобразить изменения построчно &lt;br&gt; &lt;code&gt;git add .&lt;/code&gt; добавить (проиндексировать) изменения во всех файлах &lt;br&gt; &lt;code&gt;git commit -m &#34;added file and changed file&#34;&lt;/code&gt; сохранить изменения с комментарием &lt;br&gt; &lt;code&gt;git push&lt;/code&gt; синхронизировать локальные изменения с репозиторием &lt;br&gt; &lt;code&gt;git branch dev&lt;/code&gt; создать новую ветку &lt;br&gt; &lt;code&gt;git switch dev&lt;/code&gt; переключиться на другую ветку &lt;br&gt; &lt;code&gt;git push --set-upstream origin dev&lt;/code&gt; добавить ветку &lt;br&gt; &lt;code&gt;git branch -d dev&lt;/code&gt; удалить ветку &lt;br&gt; &lt;code&gt;git diff rsa&lt;/code&gt; сравнить файлы текущей ветки с файлами в указанной ветки rsa &lt;br&gt; &lt;code&gt;git merge dev&lt;/code&gt; слияние текущей ветки (rsa/master) с указанной (dev) &lt;br&gt; &lt;code&gt;git log --oneline --all&lt;/code&gt; лог коммитов &lt;br&gt; &lt;code&gt;git log --graph&lt;/code&gt; коммиты и следование веток &lt;br&gt; &lt;code&gt;git show d01f09dead3a6a8d75dda848162831c58ca0ee13&lt;/code&gt; отобразить подробный лог по номеру коммита &lt;br&gt; &lt;code&gt;git checkout filename&lt;/code&gt; откатить изменения, если не было команды add &lt;br&gt; &lt;code&gt;git checkout d01f09dead3a6a8d75dda848162831c58ca0ee13&lt;/code&gt; переключить локальные файлы рабочей копии на указанный коммит (изменить HEAD на указанный коммит) &lt;br&gt; &lt;code&gt;git reset HEAD filename&lt;/code&gt; откатить изменения последнего индекса, если был add но не было commit, тем самым вернуться до последней зафиксированный версии (коммита) и потом выполнить checkout &lt;br&gt; &lt;code&gt;git reset --mixed HEAD filename&lt;/code&gt; изменения, содержащиеся в отменяемом коммите, не должны исчезнуть, они будут сохранены в виде локальных изменений в рабочей копии &lt;br&gt; &lt;code&gt;git restore filename&lt;/code&gt; отменить все локальные изменения в рабочей копии &lt;br&gt; &lt;code&gt;git restore --source d01f09dead3a6a8d75dda848162831c58ca0ee13 filename&lt;/code&gt; восстановить файл на указанную версию по хэшу индентификатора коммита &lt;br&gt; &lt;code&gt;git revert HEAD --no-edit&lt;/code&gt; отменить последний коммит, без указания комментария (события записываются в git log) &lt;br&gt; &lt;code&gt;git reset --hard d01f09dead3a6a8d75dda848162831c58ca0ee13&lt;/code&gt; удалить все коммиты до указанного (и откатиться до него)&lt;/p&gt; &#xA;&lt;h1&gt;Ansible&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;apt -y update &amp;amp;&amp;amp; apt -y upgrade&lt;/code&gt; &lt;br&gt; &lt;code&gt;apt -y install ansible&lt;/code&gt; v2.10.8 &lt;br&gt; &lt;code&gt;apt -y install ansible-core&lt;/code&gt; v2.12.0 &lt;br&gt; &lt;code&gt;apt -y install sshpass&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-galaxy collection install ansible.windows&lt;/code&gt; установить коллекцию модулей &lt;br&gt; &lt;code&gt;ansible-galaxy collection install community.windows&lt;/code&gt; &lt;br&gt; &lt;code&gt;ansible-galaxy collection list | grep windows&lt;/code&gt; &lt;br&gt; &lt;code&gt;ansible-config dump | grep DEFAULT_MODULE_PATH&lt;/code&gt; путь хранения модулей&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;apt-get -y install python-dev libkrb5-dev krb5-user&lt;/code&gt; пакеты для Kerberos аутентификации &lt;br&gt; &lt;code&gt;apt install python3-pip&lt;/code&gt; &lt;br&gt; &lt;code&gt;pip3 install requests-kerberos&lt;/code&gt; &lt;br&gt; &lt;code&gt;nano /etc/krb5.conf&lt;/code&gt; настроить [realms] и [domain_realm] &lt;br&gt; &lt;code&gt;kinit -C support4@domail.local&lt;/code&gt; &lt;br&gt; &lt;code&gt;klist&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible --version&lt;/code&gt; &lt;br&gt; &lt;code&gt;config file = None&lt;/code&gt; &lt;br&gt; &lt;code&gt;nano /etc/ansible/ansible.cfg&lt;/code&gt; файл конфигурации&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[defaults]&#xA;inventory = /etc/ansible/hosts&#xA;# uncomment this to disable SSH key host checking&#xA;# Отключить проверку ключа ssh (для подключения используя пароль)&#xA;host_key_checking = False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/hosts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[us]&#xA;pi-hole-01 ansible_host=192.168.3.101&#xA;zabbix-01 ansible_host=192.168.3.102&#xA;grafana-01 ansible_host=192.168.3.103&#xA;netbox-01 ansible_host=192.168.3.104&#xA;&#xA;[all:vars]&#xA;ansible_ssh_port=2121&#xA;ansible_user=lifailon&#xA;ansible_password=123098&#xA;path_user=/home/lifailon&#xA;ansible_python_interpreter=/usr/bin/python3&#xA;&#xA;[ws]&#xA;huawei-book-01 ansible_host=192.168.3.99&#xA;plex-01 ansible_host=192.168.3.100&#xA;&#xA;[ws:vars]&#xA;ansible_port=5985&#xA;#ansible_port=5986&#xA;ansible_user=Lifailon&#xA;#ansible_user=support4@DOMAIN.LOCAL&#xA;ansible_password=123098&#xA;ansible_connection=winrm&#xA;ansible_winrm_scheme=http&#xA;ansible_winrm_transport=basic&#xA;#ansible_winrm_transport=kerberos&#xA;ansible_winrm_server_cert_validation=ignore&#xA;validate_certs=false&#xA;&#xA;[win_ssh]&#xA;huawei-book-01 ansible_host=192.168.3.99&#xA;plex-01 ansible_host=192.168.3.100&#xA;&#xA;[win_ssh:vars]&#xA;ansible_python_interpreter=C:\Users\Lifailon\AppData\Local\Programs\Python\Python311\` добавить переменную среды интерпритатора Python в Windows&#xA;ansible_connection=ssh&#xA;#ansible_shell_type=cmd&#xA;ansible_shell_type=powershell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-inventory --list&lt;/code&gt; проверить конфигурацию (читает в формате JSON) или YAML (-y) с просмотром все применяемых переменных&lt;/p&gt; &#xA;&lt;h1&gt;Modules&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible us -m ping&lt;/code&gt; &lt;br&gt; &lt;code&gt;ansible win_ssh -m ping&lt;/code&gt; &lt;br&gt; &lt;code&gt;ansible us -m shell -a &#34;uptime &amp;amp;&amp;amp; df -h | grep lv&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;ansible us -m setup | grep -iP &#34;mem|proc&#34;&lt;/code&gt; информация о железе &lt;br&gt; &lt;code&gt;ansible us -m apt -a &#34;name=mc&#34; -b&lt;/code&gt; повысить привилегии sudo (-b) &lt;br&gt; &lt;code&gt;ansible us -m service -a &#34;name=ssh state=restarted enabled=yes&#34; -b&lt;/code&gt; перезапустить службу &lt;br&gt; &lt;code&gt;echo &#34;echo test&#34; &amp;gt; test.sh&lt;/code&gt; &lt;br&gt; &lt;code&gt;ansible us -m copy -a &#34;src=test.sh dest=/root mode=777&#34; -b&lt;/code&gt; &lt;br&gt; &lt;code&gt;ansible us -a &#34;ls /root&#34; -b&lt;/code&gt; &lt;br&gt; &lt;code&gt;ansible us -a &#34;cat /root/test.sh&#34; -b&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-doc -l | grep win_&lt;/code&gt; список всех модулей Windows (&lt;a href=&#34;https://docs.ansible.com/ansible/latest/collections/ansible/windows/&#34;&gt;https://docs.ansible.com/ansible/latest/collections/ansible/windows/&lt;/a&gt;) &lt;br&gt; &lt;code&gt;ansible ws -m win_ping&lt;/code&gt; windows модуль &lt;br&gt; &lt;code&gt;ansible ws -m win_ping -u WinRM-Writer&lt;/code&gt; указать логин &lt;br&gt; &lt;code&gt;ansible ws -m setup&lt;/code&gt; собрать подробную информацию о системе &lt;br&gt; &lt;code&gt;ansible ws -m win_whoami&lt;/code&gt; информация о правах доступах, группах доступа &lt;br&gt; &lt;code&gt;ansible ws -m win_shell -a &#39;$PSVersionTable&#39;&lt;/code&gt; &lt;br&gt; &lt;code&gt;ansible ws -m win_shell -a &#39;Get-Service | where name -match &#34;ssh|winrm&#34;&#39;&lt;/code&gt; &lt;br&gt; &lt;code&gt;ansible ws -m win_service -a &#34;name=sshd state=stopped&#34;&lt;/code&gt; &lt;br&gt; &lt;code&gt;ansible ws -m win_service -a &#34;name=sshd state=started&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_shell (vars/debug)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/PowerShell-Vars.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA; ` Указать коллекцию модулей&#xA;  collections:&#xA;  - ansible.windows&#xA; ` Задать переменные&#xA;  vars:&#xA;    SearchName: PermitRoot&#xA;  tasks:&#xA;  - name: Get port ssh&#xA;    win_shell: |&#xA;      Get-Content &#34;C:\Programdata\ssh\sshd_config&#34; | Select-String &#34;{{SearchName}}&#34;&#xA;   ` Передать вывод в переменную&#xA;    register: command_output&#xA;  - name: Output port ssh&#xA;   ` Вывести переменную на экран&#xA;    debug:&#xA;      var: command_output.stdout_lines&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/PowerShell-Vars.yml&lt;/code&gt; &lt;br&gt; &lt;code&gt;ansible-playbook /etc/ansible/PowerShell-Vars.yml --extra-vars &#34;SearchName=&#39;LogLevel|Syslog&#39;&#34;&lt;/code&gt; передать переменную&lt;/p&gt; &#xA;&lt;h3&gt;win_powershell&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/powershell-param.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Run PowerShell script with parameters&#xA;    ansible.windows.win_powershell:&#xA;      parameters:&#xA;        Path: C:\Temp&#xA;        Force: true&#xA;      script: |&#xA;        [CmdletBinding()]&#xA;        param (&#xA;          [String]$Path,&#xA;          [Switch]$Force&#xA;        )&#xA;        New-Item -Path $Path -ItemType Directory -Force:$Force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/powershell-param.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_chocolatey&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/setup-adobe-acrobat.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Install Acrobat Reader&#xA;    win_chocolatey:&#xA;      name: adobereader&#xA;      state: present&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/setup-adobe-acrobat.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/setup-openssh.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: install the Win32-OpenSSH service&#xA;    win_chocolatey:&#xA;      name: openssh&#xA;      package_params: /SSHServerFeature&#xA;      state: present&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/setup-openssh.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_regedit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/win-set-shell-ssh-ps7.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Set the default shell to PowerShell 7 for Windows OpenSSH&#xA;    win_regedit:&#xA;      path: HKLM:\SOFTWARE\OpenSSH&#xA;      name: DefaultShell&#xA;     ` data: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe&#xA;      data: &#39;C:\Program Files\PowerShell\7\pwsh.exe&#39;&#xA;      type: string&#xA;      state: present&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/win-set-shell-ssh-ps7.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_service&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/win-service.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Start service&#xA;    win_service:&#xA;      name: sshd&#xA;      state: started&#xA;#     state: stopped&#xA;#     state: restarted&#xA;#     start_mode: auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/win-service.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_service_info&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/get-service.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Get info for a single service&#xA;    win_service_info:&#xA;      name: sshd&#xA;    register: service_info&#xA;  - name: Print returned information&#xA;    ansible.builtin.debug:&#xA;      var: service_info.services&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/get-service.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;fetch/slurp&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/copy-from-win-to-local.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Retrieve remote file on a Windows host&#xA;#   Скопировать файл из Windows-системы&#xA;    ansible.builtin.fetch:&#xA;#   Прочитать файл (передать в память в формате Base64)&#xA;#   ansible.builtin.slurp:&#xA;      src: C:\Telegraf\telegraf.conf&#xA;      dest: /root/telegraf.conf&#xA;      flat: yes&#xA;    register: telegraf_conf&#xA;  - name: Print returned information&#xA;    ansible.builtin.debug:&#xA;      msg: &#34;{{ telegraf_conf[&#39;content&#39;] | b64decode }}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/copy-from-win-to-local.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_copy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;echo &#34;Get-Service | where name -eq vss | Start-Service&#34; &amp;gt; /home/lifailon/Start-Service-VSS.ps1&lt;/code&gt; &lt;br&gt; &lt;code&gt;nano /etc/ansible/copy-file-to-win.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Copy file to win hosts&#xA;    win_copy:&#xA;      src: /home/lifailon/Start-Service-VSS.ps1&#xA;      dest: C:\Users\Lifailon\Desktop\Start-Service-VSS.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/copy-file-to-win.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;curl -OL https://github.com/PowerShell/PowerShell/releases/download/v7.3.6/PowerShell-7.3.6-win-x64.msi&lt;/code&gt; &lt;br&gt; &lt;code&gt;nano /etc/ansible/copy-file-to-win.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Copy file to win hosts&#xA;    win_copy:&#xA;      src: /home/lifailon/PowerShell-7.3.6-win-x64.msi&#xA;      dest: C:\Install\PowerShell-7.3.6.msi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/copy-file-to-win.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_command&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/run-script-ps1.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Run PowerShell Script&#xA;    win_command: powershell -ExecutionPolicy ByPass -File C:\Users\Lifailon\Desktop\Start-Service-VSS.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/run-script-ps1.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_package&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/setup-msi-package.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Install MSI Package&#xA;    win_package:&#xA;#     path: C:\Install\7z-23.01.msi&#xA;      path: C:\Install\PowerShell-7.3.6.msi&#xA;      arguments:&#xA;        - /quiet&#xA;        - /passive&#xA;        - /norestart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/setup-msi-package.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_firewall_rule&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/win-fw-open.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Open RDP port&#xA;    win_firewall_rule:&#xA;      name: Open RDP port&#xA;      localport: 3389&#xA;      action: allow&#xA;      direction: in&#xA;      protocol: tcp&#xA;      state: present&#xA;      enabled: yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/win-fw-open.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_group&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/win-creat-group.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Create a new group&#xA;    win_group:&#xA;      name: deploy&#xA;      description: Deploy Group&#xA;      state: present&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/win-creat-group.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_group_membership&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/add-user-to-group.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Add a local and domain user to a local group&#xA;    win_group_membership:&#xA;      name: deploy&#xA;      members:&#xA;        - WinRM-Writer&#xA;      state: present&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/add-user-to-group.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_user&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/creat-win-user.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Creat user&#xA;    win_user:&#xA;      name: test&#xA;      password: 123098&#xA;      state: present&#xA;      groups:&#xA;        - deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/creat-win-user.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/delete-win-user.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Delete user&#xA;    ansible.windows.win_user:&#xA;      name: test&#xA;      state: absent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/delete-win-user.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_feature&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/install-feature.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Install Windows Feature&#xA;      win_feature:&#xA;        name: SNMP-Service&#xA;        state: present&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/install-feature.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_reboot&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/win-reboot.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Reboot a slow machine that might have lots of updates to apply&#xA;    win_reboot:&#xA;      reboot_timeout: 3600&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/win-reboot.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_find&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/win-ls.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Find files in multiple paths&#xA;    ansible.windows.win_find:&#xA;      paths:&#xA;      - D:\Install\OpenSource&#xA;      patterns: [&#39;*.rar&#39;,&#39;*.zip&#39;,&#39;*.msi&#39;]&#xA;     ` Файл созданный менее 7 дней назад&#xA;      age: -7d&#xA;     ` Размер файла больше 10MB&#xA;      size: 10485760&#xA;     ` Рекурсивный поиск (в дочерних директориях)&#xA;      recurse: true&#xA;    register: command_output&#xA;  - name: Output&#xA;    debug:&#xA;      var: command_output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/win-ls.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_uri&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/rest-get.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: REST GET request to endpoint github&#xA;    ansible.windows.win_uri:&#xA;      url: https://api.github.com/repos/Lifailon/pSyslog/releases/latest&#xA;    register: http_output&#xA;  - name: Output&#xA;    debug:&#xA;      var: http_output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/rest-get.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_updates&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nano /etc/ansible/win-update.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- hosts: ws&#xA;  tasks:&#xA;  - name: Install only particular updates based on the KB numbers&#xA;    ansible.windows.win_updates:&#xA;      category_names:&#xA;      - SecurityUpdates&#xA;      - CriticalUpdates&#xA;      - UpdateRollups&#xA;      - Drivers&#xA;     ` Фильтрация&#xA;     ` accept_list:&#xA;     ` - KB2267602&#xA;     ` Поиск обновлений&#xA;     ` state: searched&#xA;     ` Загрузить обновления&#xA;     ` state: downloaded&#xA;     ` Установить обновления&#xA;      state: installed&#xA;      log_path: C:\Ansible-Windows-Upadte-Log.txt&#xA;      reboot: false&#xA;    register: wu_output&#xA;  - name: Output&#xA;    debug:&#xA;      var: wu_output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ansible-playbook /etc/ansible/win-update.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;win_chocolatey&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/install&#34;&gt;https://chocolatey.org/install&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://community.chocolatey.org/api/v2/package/chocolatey&#34;&gt;https://community.chocolatey.org/api/v2/package/chocolatey&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://docs.chocolatey.org/en-us/guides/organizations/organizational-deployment-guide&#34;&gt;https://docs.chocolatey.org/en-us/guides/organizations/organizational-deployment-guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- name: Ensure Chocolatey installed from internal repo&#xA;  win_chocolatey:&#xA;    name: chocolatey&#xA;    state: present&#xA;&#x9;# source: URL-адрес внутреннего репозитория&#xA;    source: https://community.chocolatey.org/api/v2/ChocolateyInstall.ps1&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>