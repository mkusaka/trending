<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-23T01:37:24Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TrimarcJake/BlueTuxedo</title>
    <updated>2023-10-23T01:37:24Z</updated>
    <id>tag:github.com,2023-10-23:/TrimarcJake/BlueTuxedo</id>
    <link href="https://github.com/TrimarcJake/BlueTuxedo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiny tool to find and fix common misconfigurations in Active Directory-integrated DNS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BlueTuxedo&lt;/h1&gt; &#xA;&lt;p&gt;A tiny tool built to find and fix common misconfigurations in Active Directory-Integrated DNS&lt;/p&gt; &#xA;&lt;h2&gt;Basic Use:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/TrimarcJake/BlueTuxedo.git&#xA;cd BlueTuxedo&#xA;Import-Module .\BlueTuxedo.psd1&#xA;Invoke-BlueTuxedo&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Malandrone/PowerDecode</title>
    <updated>2023-10-23T01:37:24Z</updated>
    <id>tag:github.com,2023-10-23:/Malandrone/PowerDecode</id>
    <link href="https://github.com/Malandrone/PowerDecode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PowerDecode is a PowerShell-based tool that allows to deobfuscate PowerShell scripts obfuscated across multiple layers. The tool performs code dynamic analysis, extracting malware hosting URLs and checking http response.It can also detect if the malware attempts to inject shellcode into memory.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Malandrone/PowerDecode/main/Logo.PNG&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PowerDecode&lt;/h1&gt; &#xA;&lt;p&gt;PowerDecode is a PowerShell-based tool for de-obfuscating PowerShell scripts obfuscated across multiple layers in different obfuscation forms including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;String concatenate/reorder/reverse/replace&lt;/li&gt; &#xA; &lt;li&gt;Base64 encoding&lt;/li&gt; &#xA; &lt;li&gt;ASCII encoding&lt;/li&gt; &#xA; &lt;li&gt;Compression deflate/GZIP&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The tool performs also code dynamic analysis, gathering useful informations about malware activity including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTTP response status of URLs&lt;/li&gt; &#xA; &lt;li&gt;Declared Variables&lt;/li&gt; &#xA; &lt;li&gt;Payloads download attempts&lt;/li&gt; &#xA; &lt;li&gt;Attempts to start processes&lt;/li&gt; &#xA; &lt;li&gt;Shellcode injection attempts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dynamic analysis requires script execution. Use the tool only in a isolated execution environment ( VirtualBox for example)&lt;/li&gt; &#xA; &lt;li&gt;Before de-obfuscating make sure the script is executable (automatic de-obfuscation process fails if script contains some syntax errors)&lt;/li&gt; &#xA; &lt;li&gt;Windows Defender might avoid the tool from working properly. Disable it temporarily if necessary.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;REQUIREMENTS&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows PowerShell v5.1&lt;/li&gt; &#xA; &lt;li&gt;OS Windows 10 64 bit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to use the tool&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable scripts execution: launch PowerShell as Administrator and run the command:&lt;/p&gt; &lt;p&gt;&lt;code&gt;Set-ExecutionPolicy bypass&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If it doesn&#39;t work, open Registry Editor as Administrator and go to:&lt;/p&gt; &lt;p&gt;&lt;code&gt;Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\PowerShell&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Set the parameter &#34;ExecutionPolicy&#34; on value &#34;Bypass&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Disable any antivirus software in order to allow the tool to analyze malware without interruption.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on &lt;strong&gt;PowerDecode.bat&lt;/strong&gt; to start the GUI&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PowerDecode can work in two different modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic decode mode&lt;/li&gt; &#xA; &lt;li&gt;Manual decode mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Automatic decode mode&lt;/h3&gt; &#xA;&lt;p&gt;Obfuscation layers of an input script are automatically detected and removed. A dynamic analysis is performed on the final layer. The following options are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[1]-Decode a script from a single file:&lt;/strong&gt; takes as input a file to analyze and a folder to save the report file (if this last is not set, report file will be saved in the PowerDecode folder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2]-Decode multiple scripts from a folder:&lt;/strong&gt; takes as input a folder containg some files to analyze and a folder to save the report files (if this last is not set, report files will be saved in the PowerDecode folder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[0]-Go back:&lt;/strong&gt; returns to the previous menu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Manual decode mode&lt;/h3&gt; &#xA;&lt;p&gt;User can select a set of tasks to perform on an input script to manually remove obfuscation layers. The following options are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[1]-Decode full script by regex:&lt;/strong&gt; regular expression supported by PowerDecode are applied to the input string to remove a single obfuscation layer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2]-Decode full script by IEX overriding:&lt;/strong&gt; input string is executed in a local environment where Invoke-Expression cmdlet is replaced with Write-Output cmdlet (might execute malicious actions!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[3]-Decode base64:&lt;/strong&gt; removes base64 encoding&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[4]-Decode deflate payload:&lt;/strong&gt; removes deflatestream compression&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[5]-Decode GZIP payload:&lt;/strong&gt; removes GZIPstream compression&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[6]-Replace a string (raw):&lt;/strong&gt; replaces a piece of the loaded script with a substring entered by the user&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[7]-Replace a string (evaluate):&lt;/strong&gt; replaces a piece of the loaded script with its execution output (might execute malicious actions!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[8]-URLs analysis:&lt;/strong&gt; extracts URLs and checks their HTTP response status code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[9]-Get variables content:&lt;/strong&gt; extracts declared variables and shows their names and contents (might execute malicious actions!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[10]-Shellcode check:&lt;/strong&gt; extracts shellcode as hexadecimal instructions. This feature could be efficiently integrated with &lt;a href=&#34;http://sandsprite.com/blogs/index.php?uid=7&amp;amp;pid=152&#34;&gt;SCDBG&lt;/a&gt;. In order to activate the debugger, the scdbg.exe file must be placed on the PowerDecode\ folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[11]-Get VirusTotal rating:&lt;/strong&gt; Shows the &lt;a href=&#34;https://www.virustotal.com/&#34;&gt;VirusTotal&lt;/a&gt; rating of the malware via API call&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[12]-Undo last decoding task:&lt;/strong&gt; deletes the last layer of code obtained&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[13]-Report preview:&lt;/strong&gt; shows all collected data as it will be saved on the report file&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[14]-Store and export report file:&lt;/strong&gt; saves all collected data on a .txt report file and stores the sample in the MalwareRepository.db&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[0]-Go back:&lt;/strong&gt; returns to the previous menu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Malware repository&lt;/h3&gt; &#xA;&lt;p&gt;PowerDecode includes a malware database( MalwareRepository.db) based on &lt;a href=&#34;https://www.litedb.org/&#34;&gt;LiteDB&lt;/a&gt;. On this section, following options are avaiable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[1]-Query DB for a script:&lt;/strong&gt; checks if a script from an input file is stored on DB and if it is present, shows its de-obfuscated version&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2]-Query DB for a URL:&lt;/strong&gt; checks if an input URL is stored on DB and also shows stored malwares that connect to it&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[3]-Query DB for shellcode:&lt;/strong&gt; checks if an input shellcode(string of hex values) is stored on DB and if it is present shows stored malwares that inject it&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[4]-Malware statistics:&lt;/strong&gt; shows some statistics about malware samples stored on MalwareRepository.db&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[5]-Export all original scripts:&lt;/strong&gt; allows to export all orginal malware samples from MalwareRepository.db to an output folder. Each sample will be saved on a .txt file. WARNING: use this feature only on a isolated execution environment, exported files are malicious!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[6]-Export all URLs:&lt;/strong&gt; allows to export all stored URLs from MalwareRepository.db to an output file&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[6]-Export all Shellcodes:&lt;/strong&gt; allows to export all stored shellcodes from MalwareRepository.db to an output folder. Each sample will be saved on a .txt file&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[0]-Go back:&lt;/strong&gt; returns to the previous menu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;Following parameters can be set:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;[1]-Storage mode:&lt;/strong&gt; if it is set to &#34;Enabled&#34; analyzed scripts will be stored on MalwareRepository.db&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[2]-Step-by-step mode:&lt;/strong&gt; if it is set to &#34;Enabled&#34;, decoding multiple scripts from a folder, the user is asked for confirmation before continuing with the analysis of the next file&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[3]-Set VirusTotal API key:&lt;/strong&gt; allows to load a VirusTotal API key to interact with the VirusTotal API&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[4]-Set execution timeout:&lt;/strong&gt; allows to set the maximum time limit in seconds of script execution during de-obfuscation process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;GPL-3.0&lt;/p&gt; &#xA;&lt;h3&gt;Paper&lt;/h3&gt; &#xA;&lt;p&gt;G. M. Malandrone, G. Virdis, G. Giacinto , D. Maiorca. &lt;a href=&#34;http://ceur-ws.org/Vol-2940/paper19.pdf&#34;&gt;PowerDecode: a PowerShell Script Decoder Dedicated to Malware Analysis&lt;/a&gt;. 5th Italian Conference on CyberSecurity (ITASEC), 2021.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Nonary/ResolutionAutomation</title>
    <updated>2023-10-23T01:37:24Z</updated>
    <id>tag:github.com,2023-10-23:/Nonary/ResolutionAutomation</id>
    <link href="https://github.com/Nonary/ResolutionAutomation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automates changing the host resolution to match the client resolution of Moonlight, with capabilities of supersampling if required&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Host Resolution Matching for Moonlight Streaming&lt;/h2&gt; &#xA;&lt;p&gt;This script changes your host resolution to match exactly with Moonlight&#39;s resolution. This is mostly used for users who have different aspect ratios between the client and host, or anyone who wishes to match the resolution while streaming.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Host must be Windows.&lt;/li&gt; &#xA; &lt;li&gt;Sunshine 0.21.0 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Caveats&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If using Windows 11, you&#39;ll need to set the default terminal to Windows Console Host as there is currently a bug in Windows Terminal that prevents hidden consoles from working properly. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;That can be changed at Settings &amp;gt; Privacy &amp;amp; security &amp;gt; Security &amp;gt; For developers &amp;gt; Terminal [Let Windows decide] &amp;gt;&amp;gt; (change to) &amp;gt;&amp;gt; Terminal [Windows Console Host]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The script will stop working if you move the folder, simply reinstall it to resolve that issue.&lt;/li&gt; &#xA; &lt;li&gt;Due to Windows API restrictions, this script does not work on cold reboots (hard crashes or shutdowns of your computer). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you&#39;re cold booting, simply sign into the computer using the &#34;Desktop&#34; app on Moonlight, then end the stream, then start it again.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;GFE Users&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You&#39;ll need to use the Geforce Experience version of this script instead. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The current release for Geforce Experience users is: &lt;a href=&#34;https://github.com/Nonary/ResolutionAutomation/releases/tag/2.0.15_gfe&#34;&gt;https://github.com/Nonary/ResolutionAutomation/releases/tag/2.0.15_gfe&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation Instructions&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Store the downloaded folder in a location you intend to keep. If you delete this folder or move it, the automation will stop working.&lt;/li&gt; &#xA; &lt;li&gt;To install, double click the Install.bat file.&lt;/li&gt; &#xA; &lt;li&gt;To uninstall, double click the Uninstall.bat file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This script will ask for elevated rights because Sunshine configuration is be locked from modifications for non-administrator users.&lt;/p&gt; &#xA;&lt;h3&gt;How it Works&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When you start streaming any application in Sunshine, it will start the script.&lt;/li&gt; &#xA; &lt;li&gt;The script reads the environment variables passed to it via Sunshine, which contains client information such as screen resolution.&lt;/li&gt; &#xA; &lt;li&gt;It sets the host&#39;s resolution to match the Moonlight resolution (including refresh rate), unless overridden with the &lt;code&gt;overrides&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;The script waits for Sunshine to be suspended for more than 120 seconds or until the user ends the stream.&lt;/li&gt; &#xA; &lt;li&gt;It sets the host resolution back to the same resolution it was prior to starting the stream (including refresh rate).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will only work if the resolution is available to be used, so you will need to make sure to use NVIDIA Custom Resolution or CRU to add the client resolution first.&lt;/p&gt; &#xA;&lt;h3&gt;Overrides File&lt;/h3&gt; &#xA;&lt;p&gt;You may have a mobile device that you wish to stream at a lower resolution to save bandwidth or some devices may perform better when streaming at a lower resolution. If you want your host to change the resolution to something higher than the client, use the &lt;code&gt;overrides&lt;/code&gt; file to do this.&lt;/p&gt; &#xA;&lt;h4&gt;Format&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;WidthxHeightxRefresh=WidthxHeightxRefresh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resolution on the left is what triggers the override, and the one on the right is what the host will be set to.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;To stream at 720p and keep the host at 4k resolution, you would add this line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1280x700x60=3840x2160x60&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>