<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-18T01:39:15Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JamieDixon/GraphViz-C-Sharp-Wrapper</title>
    <updated>2023-11-18T01:39:15Z</updated>
    <id>tag:github.com,2023-11-18:/JamieDixon/GraphViz-C-Sharp-Wrapper</id>
    <link href="https://github.com/JamieDixon/GraphViz-C-Sharp-Wrapper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GraphViz C# Wrapper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nuget&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;PM&amp;gt; Install-Package GraphViz.NET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Project Description&lt;/h1&gt; &#xA;&lt;p&gt;This is a C# wrapper for the GraphViz graph generator.&lt;/p&gt; &#xA;&lt;p&gt;Pass in a dot string and an output type and voila, your graph is generated.&lt;/p&gt; &#xA;&lt;p&gt;The output file is returned to you as a byte array to do as you please.&lt;/p&gt; &#xA;&lt;p&gt;This library acts as a wrapper for the GraphViz command line tools. The graphviz command line tools may be downloaded from graphviz.org/Download.php, and need to be placed in the &#39;graphviz&#39; folder relative to the GraphVizWrapper dll upon deployment.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;using GraphVizWrapper;&#xA;using GraphVizWrapper.Commands;&#xA;using GraphVizWrapper.Queries;&#xA;&#xA;// These three instances can be injected via the IGetStartProcessQuery, &#xA;//                                               IGetProcessStartInfoQuery and &#xA;//                                               IRegisterLayoutPluginCommand interfaces&#xA;&#xA;var getStartProcessQuery = new GetStartProcessQuery();&#xA;var getProcessStartInfoQuery = new GetProcessStartInfoQuery();&#xA;var registerLayoutPluginCommand = new RegisterLayoutPluginCommand(getProcessStartInfoQuery, getStartProcessQuery);&#xA;&#xA;// GraphGeneration can be injected via the IGraphGeneration interface&#xA;&#xA;var wrapper = new GraphGeneration(getStartProcessQuery, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  getProcessStartInfoQuery, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  registerLayoutPluginCommand);&#xA;&#xA;byte[] output = wrapper.GenerateGraph(&#34;digraph{a -&amp;gt; b; b -&amp;gt; c; c -&amp;gt; a;}&#34;, Enums.GraphReturnType.Png);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Install GraphViz&lt;/h3&gt; &#xA;&lt;p&gt;If you haven&#39;t already, download and install GraphViz from graphviz.org/Download.php. Make sure the &#39;graphVizLocation&#39; key in each of the following files points to the &#39;bin&#39; folder of your installation:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;/src/GraphVizWrapper/App.config /src/GraphVizWrapper.Tests/App.config /sample-applications\MVC4\GraphVizWrapper-MVC4Sample/Web.config&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Clone the repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;git clone https://github.com/JamieDixon/GraphViz-C-Sharp-Wrapper.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add MSBuild to PATH&lt;/h3&gt; &#xA;&lt;p&gt;If you haven&#39;t used this before, you need to add the .Net4 framework to your PATH environment variable. Instructions on how to do so may be found &lt;a href=&#34;http://stackoverflow.com/a/12608705/2388930&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;In the terminal (command prompt), change directory to the build folder and run the build.bat file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Batchfile&#34;&gt;cd build&#xA;build.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the GraphVizWrapper project, configure the necessary GraphViz files and move them into the GraphvizWrapper bin folder and then build/configure the sample project(s) included.&lt;/p&gt; &#xA;&lt;h3&gt;Copy files to your own project&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve run the build you&#39;re ready to move the necessary files to your own project. You&#39;ll need the GraphVizWrapper.dll file from the bin folder &lt;del&gt;along with the GraphViz folder (the dll and this folder must reside at the same level and be placed into the bin of your application at build time)&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;You must either include the GraphViz folder (containing the files from the /bin folder of your installation), or specify the location of this folder inside either your app.config or web.config using the graphVizLocation key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;appSettings&amp;gt;&#xA;    &amp;lt;add key=&#34;graphVizLocation&#34; value=&#34;C:\Program Files (x86)\Graphviz2.38\bin&#34; /&amp;gt;&#xA;&amp;lt;/appSettings&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the sample application&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you&#39;ve run build.bat&lt;/li&gt; &#xA; &lt;li&gt;Navigate to sample-applications/MVC4&lt;/li&gt; &#xA; &lt;li&gt;Open the GraphVizWrapper-MVC4Sample.sln in Visual Studio. F5 to run the project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The sample takes a binary dependency on GraphVizWrapper.dll which is placed into the lib folder when you run build.bat&lt;/p&gt; &#xA;&lt;p&gt;If you make modifications to the GraphVizWrapper you&#39;ll need to run build.bat again to make sure this sample application has the latest version of GraphVizWrapper.dll&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This sample application demonstrated one way of displaying the returned graph byte array to a user in an MVC4 application:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Controller Action Method:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;using GraphVizWrapper;&#xA;using GraphVizWrapper.Commands;&#xA;using GraphVizWrapper.Queries;&#xA;&#xA;var bytes = this.graphVizWrapper.GenerateGraph(&#34;digraph{a -&amp;gt; b; b -&amp;gt; c; c -&amp;gt; a;}&#34;, Enums.GraphReturnType.Jpg);&#xA;            &#xA;// Alternatively you could save the image on the server as a file.&#xA;var viewModel = string.Format(&#34;data:image/jpg;base64,{0}&#34;, Convert.ToBase64String(bytes));&#xA;ViewBag.Data = viewModel;&#xA;return this.View();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Razor View&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Razor&#34;&gt;&amp;lt;img src=&#34;@ViewBag.Data&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>