<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-08T01:43:05Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>f-bader/SentinelARConverter</title>
    <updated>2023-07-08T01:43:05Z</updated>
    <id>tag:github.com,2023-07-08:/f-bader/SentinelARConverter</id>
    <link href="https://github.com/f-bader/SentinelARConverter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sentinel Analytics Rule converter PowerShell module&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/f-bader/SentinelARConverter/main/images/banner.png&#34; alt=&#34;SentinelARConverter Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Sentinel Analytics Rule converter&lt;/h1&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Install-Module SentinelARConverter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to convert?&lt;/h2&gt; &#xA;&lt;p&gt;You can convert a Sentinel Analytics rule in the &lt;a href=&#34;https://github.com/Azure/Azure-Sentinel/wiki/Query-Style-Guide&#34;&gt;YAML format&lt;/a&gt; to an &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/templates/microsoft.insights/alertrules?pivots=deployment-language-arm-template&#34;&gt;Azure ARM template&lt;/a&gt; or vice versa.&lt;/p&gt; &#xA;&lt;p&gt;For more information about this cmdlet, please &lt;a href=&#34;https://cloudbrothers.info/en/convert-sentinel-analytics-rules/&#34;&gt;read my blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ARM to YAML&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Convert-SentinelARArmToYaml -Filename &#34;C:\Users\User\Downloads\Azure_Sentinel_analytic_rule.json&#34; -UseOriginalFilename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new file named &lt;code&gt;Azure_Sentinel_analytic_rule.yaml&lt;/code&gt; without any other interaction.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Convert-SentinelARArmToYaml -Filename &#34;C:\Users\User\Downloads\Azure_Sentinel_analytic_rule.json&#34; -UseDisplayNameAsFilename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new file named &lt;code&gt;DisplayNameOfTheAnalyticsRule.yaml&lt;/code&gt; without any other interaction.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Convert-SentinelARArmToYaml -Filename &#34;C:\Users\User\Downloads\Azure_Sentinel_analytic_rule.json&#34; -UseIdAsFilename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new file named &lt;code&gt;UUID-OfTheAnalyticsRule.yaml&lt;/code&gt; without any other interaction.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Get-Content &#34;C:\Users\User\Downloads\Azure_Sentinel_analytic_rule.json&#34; | Convert-SentinelARArmToYaml -OutFile &#34;C:\Users\User\Downloads\Azure_Sentinel_analytic_rule.yaml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case you can pipe the ARM template content to the cmdlet, but you must define a output file if it should be written to disk&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Get-Content &#34;C:\Users\User\Downloads\Azure_Sentinel_analytic_rule.json&#34; | Convert-SentinelARArmToYaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no output file path is given, the output will be send to &lt;code&gt;stdout&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;All those work regardless of the content of the ARM file. If the ARM template contains is more than one Analytics Rule all rules are converted. &lt;br&gt; If you use the &lt;code&gt;-UseOriginalFilename&lt;/code&gt; or &lt;code&gt;-OutFile&lt;/code&gt; all analytics rules after the first are named &lt;code&gt;filename_n.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/f-bader/SentinelARConverter/main/images/Convert-SentinelARArmToYaml-Multiple.gif&#34; alt=&#34;Workflow to export multiple Analytic Rules from Sentinel and convert them to YAML in one go.&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;YAML to ARM&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Convert-SentinelARYamlToArm -Filename &#34;C:\Users\User\Downloads\Azure_Sentinel_analytic_rule.yaml&#34; -UseOriginalFilename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new file named &lt;code&gt;Azure_Sentinel_analytic_rule.json&lt;/code&gt; without any other interaction.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Get-Content &#34;C:\Users\User\Downloads\Azure_Sentinel_analytic_rule.yaml&#34; | Convert-SentinelARYamlToArm -OutFile &#34;C:\Users\User\Downloads\Azure_Sentinel_analytic_rule.json&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case you can pipe the YAML content to the cmdlet, but you must define a output file if it should be written to disk.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Get-Content &#34;C:\Users\User\Downloads\Azure_Sentinel_analytic_rule.yaml&#34; | Convert-SentinelARArmToYaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no output file path is given, the output will be send to &lt;code&gt;stdout&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;v2.0.1&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FIX: Updated ARM API version to 2022-11-01-preview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v2.0.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FEATURE: Adds processing of multiple analytic rules per ARM-template&lt;/li&gt; &#xA; &lt;li&gt;BREAKING: Changes behavior from OutFile from a filename to a prefix when converting multiple resources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v1.2.2&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FEATURE: Always add a version property. Default 1.0.0&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>eversinc33/Invoke-Pre2kSpray</title>
    <updated>2023-07-08T01:43:05Z</updated>
    <id>tag:github.com,2023-07-08:/eversinc33/Invoke-Pre2kSpray</id>
    <link href="https://github.com/eversinc33/Invoke-Pre2kSpray" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modified DomainPasswordSpray version to enumerate machine accounts and perform a pre2k password spray.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Invoke-Pre2kSpray&lt;/h1&gt; &#xA;&lt;p&gt;Modified DomainPasswordSpray version to enumerate machine accounts and perform a pre2k password spray.&lt;/p&gt; &#xA;&lt;h3&gt;Example Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Current domain, write output to file&#xA;Invoke-Pre2kSpray -OutFile valid-creds.txt&#xA;&#xA;# Specify domain, disable confirmation prompt&#xA;Invoke-Pre2kSpray -Domain test.local -Force&#xA;&#xA;# Filter out accounts with pwdlastset in the last 30 days, to speed things up. Those are probably normal machine accounts that rotate their passwords&#xA;Invoke-Pre2kSpray -Filter&#xA;&#xA;# Try with an empty password&#xA;Invoke-Pre2kSpray -NoPass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;References / Credits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dafthack/DomainPasswordSpray&#34;&gt;https://github.com/dafthack/DomainPasswordSpray&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.trustedsec.com/blog/diving-into-pre-created-computer-accounts/&#34;&gt;https://www.trustedsec.com/blog/diving-into-pre-created-computer-accounts/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@garrfoster for pointing out to me that the authentication via NTLM was wrong, which lead to false negatives and for providing me with the correct kerberos authentication code :)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>