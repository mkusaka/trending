<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:37:19Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lamw/vsphere-8-lab-deployment</title>
    <updated>2022-10-16T01:37:19Z</updated>
    <id>tag:github.com,2022-10-16:/lamw/vsphere-8-lab-deployment</id>
    <link href="https://github.com/lamw/vsphere-8-lab-deployment" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automated vSphere 8.x Lab Deployment&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Automated vSphere &amp;amp; vSAN 8 Lab Deployment&lt;/h1&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lamw/vsphere-8-lab-deployment/master/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lamw/vsphere-8-lab-deployment/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lamw/vsphere-8-lab-deployment/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lamw/vsphere-8-lab-deployment/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lamw/vsphere-8-lab-deployment/master/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lamw/vsphere-8-lab-deployment/master/#sample-execution&#34;&gt;Sample Execution&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Similar to previous &#34;Automated Lab Deployment Scripts&#34; (such as &lt;a href=&#34;https://www.williamlam.com/2016/11/vghetto-automated-vsphere-lab-deployment-for-vsphere-6-0u2-vsphere-6-5.html&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://www.williamlam.com/2017/10/vghetto-automated-nsx-t-2-0-lab-deployment.html&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://www.williamlam.com/2018/06/vghetto-automated-pivotal-container-service-pks-lab-deployment.html&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://www.williamlam.com/2020/04/automated-vsphere-7-and-vsphere-with-kubernetes-lab-deployment-script.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://www.williamlam.com/2020/10/automated-vsphere-with-tanzu-lab-deployment-script.html&#34;&gt;here&lt;/a&gt;), this script makes it very easy for anyone to deploy a vSphere 8.x environment for learning and educational purposes.&lt;/p&gt; &#xA;&lt;p&gt;Below is a diagram of what is deployed as part of the solution and you simply need to have an existing vSphere environment running that is managed by vCenter Server and with enough resources (CPU, Memory and Storage) to deploy this &#34;Nested&#34; lab.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lamw/vsphere-8-lab-deployment/master/screenshots/screenshot-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;10/11/2022&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Initial Release&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vCenter Server running at least vSphere 7.x or later &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If your physical storage is vSAN, please ensure you&#39;ve applied the following setting as mentioned &lt;a href=&#34;https://www.williamlam.com/2013/11/how-to-run-nested-esxi-on-top-of-vsan.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Desktop (Windows, Mac or Linux) with latest PowerShell Core and PowerCLI 12.1 Core installed. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://blogs.vmware.com/PowerCLI/2018/03/installing-powercli-10-0-0-macos.html&#34;&gt; instructions here&lt;/a&gt; for more details&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;vSphere 8.x OVAs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://customerconnect.vmware.com/downloads/get-download?downloadGroup=VC800&#34;&gt;vCenter Server Appliance 8.0 Build 20519528&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://download3.vmware.com/software/vmw-tools/nested-esxi/Nested_ESXi8.0_IA_Appliance_Template_v2.ova&#34;&gt;Nested ESXi 8.0 IA OVA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Before you can run the script, you will need to edit the script and update a number of variables to match your deployment environment. Details on each section is described below including actual values used in my home lab environment.&lt;/p&gt; &#xA;&lt;p&gt;This section describes the credentials to your physical vCenter Server in which the vSphere 8.x lab environment will be deployed to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$VIServer = &#34;FILL-ME-IN&#34;&#xA;$VIUsername = &#34;FILL-ME-IN&#34;&#xA;$VIPassword = &#34;FILL-ME-IN&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This section describes the location of the files required for deployment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$NestedESXiApplianceOVA = &#34;/Volumes/Storage/Software/VMware/Lab/Nested_ESXi8.0_IA_Appliance_Template_v2.ova&#34;&#xA;$VCSAInstallerPath = &#34;/Volumes/Storage/Software/VMware/Lab/VMware-VCSA-all-8.0.0-20519528&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The path to the VCSA Installer must be the extracted contents of the ISO&lt;/p&gt; &#xA;&lt;p&gt;This section defines the number of Nested ESXi VMs to deploy along with their associated IP Address(s). The names are merely the display name of the VMs when deployed. At a minimum, you should deploy at least three hosts, but you can always add additional hosts and the script will automatically take care of provisioning them correctly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$NestedESXiHostnameToIPs = @{&#xA;    &#34;esxi-1&#34; = &#34;192.168.30.181&#34;&#xA;    &#34;esxi-2&#34; = &#34;192.168.30.182&#34;&#xA;    &#34;esxi-3&#34; = &#34;192.168.30.183&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This section describes the resources allocated to each of the Nested ESXi VM(s). Depending on your usage, you may need to increase the resources. For Memory and Disk configuration, the unit is in GB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$NestedESXivCPU = &#34;4&#34;&#xA;$NestedESXivMEM = &#34;10&#34; #GB&#xA;$NestedESXiCachingvDisk = &#34;8&#34; #GB&#xA;$NestedESXiCapacityvDisk = &#34;40&#34; #GB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This section describes the VCSA deployment configuration such as the VCSA deployment size, Networking &amp;amp; SSO configurations. If you have ever used the VCSA CLI Installer, these options should look familiar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$VCSADeploymentSize = &#34;tiny&#34;&#xA;$VCSADisplayName = &#34;vcsa-1&#34;&#xA;$VCSAIPAddress = &#34;192.168.30.180&#34;&#xA;$VCSAHostname = &#34;192.168.30.180&#34; #Change to IP if you don&#39;t have valid DNS&#xA;$VCSAPrefix = &#34;24&#34;&#xA;$VCSASSODomainName = &#34;vsphere.local&#34;&#xA;$VCSASSOPassword = &#34;VMware1!&#34;&#xA;$VCSARootPassword = &#34;VMware1!&#34;&#xA;$VCSASSHEnable = &#34;true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This section describes the location as well as the generic networking settings applied to Nested ESXi VCSA &amp;amp; NSX VMs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$VMDatacenter = &#34;Primp-Datacenter&#34;&#xA;$VMCluster = &#34;Supermicro-Cluster&#34;&#xA;$VMNetwork = &#34;VM Network&#34;&#xA;$VMDatastore = &#34;sm-vsanDatastore&#34;&#xA;$VMNetmask = &#34;255.255.255.0&#34;&#xA;$VMGateway = &#34;192.168.30.1&#34;&#xA;$VMDNS = &#34;192.168.30.2&#34;&#xA;$VMNTP = &#34;45.87.78.35&#34;&#xA;$VMPassword = &#34;VMware1!&#34;&#xA;$VMDomain = &#34;primp-industries.local&#34;&#xA;$VMSyslog = &#34;172.17.33.3&#34;&#xA;$VMFolder = &#34;Workloads&#34;&#xA;# Applicable to Nested ESXi only&#xA;$VMSSH = &#34;true&#34;&#xA;$VMVMFS = &#34;false&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This section describes the configuration of the new vCenter Server from the deployed VCSA. &lt;strong&gt;Default values are sufficient.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$NewVCDatacenterName = &#34;Datacenter&#34;&#xA;$NewVCVSANClusterName = &#34;Cluster&#34;&#xA;$NewVCVDSName = &#34;VDS&#34;&#xA;$NewVCMgmtPortgroupName = &#34;DVPG-Management-Network&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have saved your changes, you can now run the PowerCLI script as you normally would.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;There is additional verbose logging that outputs as a log file in your current working directory &lt;strong&gt;vsphere-vsan-8-lab-deployment.log&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sample Execution&lt;/h2&gt; &#xA;&lt;p&gt;Here is a screenshot of running the script if all basic pre-reqs have been met and the confirmation message before starting the deployment:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lamw/vsphere-8-lab-deployment/master/screenshots/screenshot-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is an example output of a completed deployment:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lamw/vsphere-8-lab-deployment/master/screenshots/screenshot-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Deployment time will vary based on underlying physical infrastructure resources. In my lab, this took ~37min to complete.&lt;/p&gt; &#xA;&lt;p&gt;Once completed, you will end up with your deployed vSphere &amp;amp; vSAN 8 Lab which is placed into a vApp&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lamw/vsphere-8-lab-deployment/master/screenshots/screenshot-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kfosaaen/PS_MultiCrack_kf_branch</title>
    <updated>2022-10-16T01:37:19Z</updated>
    <id>tag:github.com,2022-10-16:/kfosaaen/PS_MultiCrack_kf_branch</id>
    <link href="https://github.com/kfosaaen/PS_MultiCrack_kf_branch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powershell script for cracking halfLMchall password hashes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;PLEASE NOTE:&lt;/p&gt; &#xA;&lt;p&gt;I have stopped updating this branch of my code, please go to the NetSPI github to get the latest version: &lt;a href=&#34;https://github.com/NetSPI/PS_MultiCrack&#34;&gt;https://github.com/NetSPI/PS_MultiCrack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;READ ME&lt;/p&gt; &#xA;&lt;p&gt;-You need to specify your rcrack, john, perl, and rainbow table directories in the script-&lt;/p&gt; &#xA;&lt;p&gt;Usage: PS_MultiCrack.ps1 INPUT_FILE OUTPUT_FILE&lt;/p&gt; &#xA;&lt;p&gt;Hashes in the input file need to be in this format: Domain\User:::LMHASH:NTLMHASH:1122334455667788&lt;/p&gt; &#xA;&lt;p&gt;The output file writes to the directory that you run this script from.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mdgrs-mei/FancyClearHost</title>
    <updated>2022-10-16T01:37:19Z</updated>
    <id>tag:github.com,2022-10-16:/mdgrs-mei/FancyClearHost</id>
    <link href="https://github.com/mdgrs-mei/FancyClearHost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clears your PowerShell host in a fancy way.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;FancyClearHost&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/mdgrs-mei/FancyClearHost/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mdgrs-mei/FancyClearHost&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.powershellgallery.com/packages/FancyClearHost&#34;&gt;&lt;img src=&#34;https://img.shields.io/powershellgallery/p/FancyClearHost&#34; alt=&#34;PowerShell Gallery&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.powershellgallery.com/packages/FancyClearHost&#34;&gt;&lt;img src=&#34;https://img.shields.io/powershellgallery/dt/FancyClearHost&#34; alt=&#34;PowerShell Gallery&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/mdgrs-mei/FancyClearHost/actions/workflows/pester-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/mdgrs-mei/FancyClearHost/actions/workflows/pester-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Pester Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Clears your PowerShell host in a fancy way.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/81177095/194883476-fed364b3-a641-4626-8a6a-0743d8b6f5b1.mp4&#34;&gt;https://user-images.githubusercontent.com/81177095/194883476-fed364b3-a641-4626-8a6a-0743d8b6f5b1.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This module has been tested on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10 and 11&lt;/li&gt; &#xA; &lt;li&gt;Windows PowerShell 5.1 and PowerShell 7.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;FancyClearHost&lt;/em&gt; is available on the PowerShell Gallery. You can install the module with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Install-Module -Name FancyClearHost -Scope CurrentUser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Just call &lt;code&gt;Clear-HostFancily&lt;/code&gt; function to play random animations, and type &#39;q&#39; to quit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Clear-HostFancily&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can play a specific animation by adding &lt;code&gt;Mode&lt;/code&gt; parameter and control the speed by &lt;code&gt;Speed&lt;/code&gt; paramerter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Clear-HostFancily -Mode Falling -Speed 0.5&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>