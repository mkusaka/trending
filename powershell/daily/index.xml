<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-07T01:36:51Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GoFetchAD/GoFetch</title>
    <updated>2023-10-07T01:36:51Z</updated>
    <id>tag:github.com,2023-10-07:/GoFetchAD/GoFetch</id>
    <link href="https://github.com/GoFetchAD/GoFetch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GoFetch is a tool to automatically exercise an attack plan generated by the BloodHound application.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GoFetch&lt;/h1&gt; &#xA;&lt;p&gt;GoFetch is a tool to automatically exercise an attack plan generated by the &lt;a href=&#34;https://github.com/BloodHoundAD/BloodHound&#34;&gt;BloodHound&lt;/a&gt; application.&lt;/p&gt; &#xA;&lt;p&gt;GoFetch first loads a path of local admin users and computers generated by BloodHound and converts it to its own attack plan format. Once the attack plan is ready, GoFetch advances towards the destination according to plan step by step, by successively applying remote code execution techniques and compromising credentials with Mimikatz.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/5SpDAxUx7Uk&#34;&gt;Watch Invoke-GoFetch in action&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;GoFetch has two different versions:&lt;/h4&gt; &#xA;&lt;h5&gt;Chain reaction:&lt;/h5&gt; &#xA;&lt;p&gt;Invoke-GoFetch (written in PowerShell to avoid Python installation prereq), implements a recursion that reads the full path, dumps the relevant credentials with Invoke-Mimikatz, and then copy and execute itself using Invoke-PsExec on the next relevant machine guided by the network path.&lt;/p&gt; &#xA;&lt;h5&gt;One computer to rule them all:&lt;/h5&gt; &#xA;&lt;p&gt;Python based code (&lt;a href=&#34;https://www.youtube.com/watch?v=dPsLVE0R1Tg&#34;&gt;a video of this version demonstrated at BlackHat Europe 2016&lt;/a&gt;), using a technique where one centralized computer is doing the job of connecting to each computer in the path, in the right order, to steal credentials (using Mimikatz), and use them to connect to the next machine in the path.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started with Invoke-GoFetch&lt;/h2&gt; &#xA;&lt;p&gt;Place GoFetch folder on the first machine of the attack path, in a session of the first user.&lt;/p&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;-PathToGraph - Path to the BloodHound exported Graph which includes a path between two users.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;-PathToPayload (optional) -&lt;br&gt; Path to local payload file .exe/.bat/.ps1 to run on next nodes in the path.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage to get the credentials along the path:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\Invoke-GoFetch.ps1 -PathToGraph .\pathFromBloodHound.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage to get the credentails along the path and execute additional payload on each:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\Invoke-GoFetch.ps1 -PathToGraph .\graphExample.json -PathToPayload .\payload.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Invoke-GoFetch is able to run from any version of Windows through Windows 7 that has PowerShell v2 or higher installed and .Net 3.5 or higher.&lt;/li&gt; &#xA; &lt;li&gt;Invoke-Mimikatz - is included with a change in the Mimikatz DLL which allows the execution of the PowerShell file with additional arguments.&lt;/li&gt; &#xA; &lt;li&gt;Invoke-Psexec - is included without changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Logic&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/27280621/26783367/770afb40-4a00-11e7-8dc1-d45919d0b551.JPG&#34; alt=&#34;Alt text&#34; title=&#34;Invoke-GoFetch Logic&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ItaiGrady&#34;&gt;Itai Grady&lt;/a&gt; - &lt;em&gt;Changes in Mimikatz DLL &amp;amp; C.R&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Man Nguyen (usrid0)&lt;/a&gt; - &lt;em&gt;Testing &amp;amp; Demo Video&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/TalBeerySec&#34;&gt;Tal Be&#39;ery&lt;/a&gt; - &lt;em&gt;Name &amp;amp; Original Idea&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/danmor84&#34;&gt;Dan Mor&lt;/a&gt; - &lt;em&gt;Logo&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/TaltheMaor&#34;&gt;Tal Maor&lt;/a&gt; - &lt;em&gt;Code&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the list of &lt;a href=&#34;https://github.com/GoFetchAD/GoFetch/graphs/contributors&#34;&gt;contributors&lt;/a&gt; who participated in this project.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for great tools that reminds us every day to secure our machines.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BloodHoundAD/BloodHound&#34;&gt;BloodHound&lt;/a&gt; - developed by &lt;a href=&#34;https://www.twitter.com/_wald0&#34;&gt;@_wald0&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/CptJesus&#34;&gt;@CptJesus&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/harmj0y&#34;&gt;@harmj0y&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PowerShellMafia/PowerSploit/raw/master/Exfiltration/Invoke-Mimikatz.ps1&#34;&gt;Invoke-Mimikatz&lt;/a&gt; - &lt;a href=&#34;https://twitter.com/JosephBialek&#34;&gt;@JosephBialek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gentilkiwi/mimikatz&#34;&gt;Mimikatz&lt;/a&gt; - &lt;a href=&#34;https://twitter.com/gentilkiwi&#34;&gt;@gentilkiwi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EmpireProject/Empire/raw/master/data/module_source/lateral_movement/Invoke-PsExec.ps1&#34;&gt;Invoke-PsExec&lt;/a&gt; - &lt;a href=&#34;https://twitter.com/harmj0y&#34;&gt;@harmj0y&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/GoFetchAD/GoFetch/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; file for details&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rs-services/RightScalePowerShell</title>
    <updated>2023-10-07T01:36:51Z</updated>
    <id>tag:github.com,2023-10-07:/rs-services/RightScalePowerShell</id>
    <link href="https://github.com/rs-services/RightScalePowerShell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Powershell examples, hints and code snippets for and from the RightScale team&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;===== RightScale and Windows Automation Powershell dump&lt;/h1&gt; &#xA;&lt;p&gt;Not that it&#39;s all that difficult to figure out, but it&#39;s always helpful when someone who&#39;s already figured something out shares it so you don&#39;t have to go reinvent the wheel. While I won&#39;t promise that these will be the most elegant, well written or even legible scripts in the world, my goal in organizing this is to provide a place for RightScalers who work in Windows to come and get examples and get some help in managing their servers automatically in the cloud.&lt;/p&gt; &#xA;&lt;p&gt;There are a few big ones that come to mind as far as important things to figure out, so you&#39;ll see a breakdown of a few different topics and lines of development in this repository;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RightScale API calls and how-to&#39;s using PowerShell&lt;/li&gt; &#xA; &lt;li&gt;Idempotent strategies and examples&lt;/li&gt; &#xA; &lt;li&gt;Simple install scripts and pointers to where they exist in RightScale&lt;/li&gt; &#xA; &lt;li&gt;Other random learnings, tips and tricks that we&#39;ve picked up along the way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let us know if there&#39;s something specific you&#39;re looking for, if the code is helpful or even if you just want to let us know to keep it up! Thanks for visiting and best of luck in your PowerShell efforts!&lt;/p&gt; &#xA;&lt;p&gt;Best,&lt;/p&gt; &#xA;&lt;p&gt;RightScale Windows Professional Services Team&lt;/p&gt;</summary>
  </entry>
</feed>