<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-16T01:40:38Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>petripaavola/Get-IntuneManagementExtensionDiagnostics</title>
    <updated>2023-03-16T01:40:38Z</updated>
    <id>tag:github.com,2023-03-16:/petripaavola/Get-IntuneManagementExtensionDiagnostics</id>
    <link href="https://github.com/petripaavola/Get-IntuneManagementExtensionDiagnostics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get-IntuneManagementExtensionDiagnostics script analyzes Intune IME logs and shows events in Timeline&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Get-IntuneManagementExtensionDiagnostics v1.1&lt;/h1&gt; &#xA;&lt;p&gt;This script &lt;strong&gt;analyzes&lt;/strong&gt; Microsoft Intune Management Extension (IME) log(s) and creates timeline report from found events.&lt;/p&gt; &#xA;&lt;p&gt;For Win32App delivery it also shows summary of download statistics with estimated network bandwidth and &lt;strong&gt;Delivery Optimization&lt;/strong&gt; statistics.&lt;/p&gt; &#xA;&lt;p&gt;It also includes really capable &lt;strong&gt;-LogViewerUI&lt;/strong&gt; for Intune log(s) viewing and troubleshooting.&lt;/p&gt; &#xA;&lt;p&gt;Go to script &lt;a href=&#34;https://raw.githubusercontent.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/main/Get-IntuneManagementExtensionDiagnostics.ps1&#34;&gt;Get-IntuneManagementExtensionDiagnostics.ps1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/main/pics/Get-IntuneManagementExtensionDiagnostics-Observed_Timeline_v1.1.png&#34; width=&#34;33%&#34; height=&#34;33%&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/main/pics/Win32App-DeliveryOptimization.png&#34; width=&#34;33%&#34; height=&#34;33%&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/main/pics/Get-IntuneManagementExtensionDiagnostics-LogViewerUI01_1.1.png&#34; width=&#34;33%&#34; height=&#34;33%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Timeline report includes information about Intune events&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Win32App&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WinGetApp&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powershell scripts&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Proactive Remedation scripts&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;custom Compliance Policy scripts&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Windows Autopilot ESP phases and other information is also shown on timeline.&lt;/p&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt; script from PowershellGallery with command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Save-Script Get-IntuneManagementExtensionDiagnostics -Path ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run script&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Get-IntuneManagementExtensionDiagnostics.ps1&#xA;&#xA;# or to get Intune Powershell script names from Graph API use -Online parameter&#xA;./Get-IntuneManagementExtensionDiagnostics.ps1 -Online&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;-Online&lt;/strong&gt; parameter will download Powershell script names from Graph API. Win32App and WinGetApp names are detected from Intune log files.&lt;br&gt; -Online parameter requires Intune Powershell management module &lt;strong&gt;Microsoft.Graph.Intune&lt;/strong&gt; installation.&lt;/p&gt; &#xA;&lt;p&gt;You can install Intune Powershell management module to your user account with command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Module -Name Microsoft.Graph.Intune -Scope CurrentUser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;In Windows Autopilot Shift-F10 Command Prompt during Windows Autopilot Pre-Provisioning or Enrollment Status Page&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Powershell.exe&#xA;cd C:\ProgramData&#xA;Set-ExecutionPolicy bypass -Scope Process&#xA;Save-Script Get-IntuneManagementExtensionDiagnostics -Path ./&#xA;./Get-IntuneManagementExtensionDiagnostics.ps1&#xA;&#xA;# -Online when you need to get displayNames to Powershell scripts&#xA;./Get-IntuneManagementExtensionDiagnostics.ps1 -Online&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;-AllLogEntries&lt;/strong&gt; &lt;strong&gt;-AllLogFiles&lt;/strong&gt;&lt;br&gt; Open all supported log files (IntuneManagementExtension and AgentExecutor) automatically and also show all log events&lt;br&gt; &lt;strong&gt;These options prevents showing UIs which asks same information&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\Get-IntuneManagementExtensionDiagnostics.ps1 -Online -AllLogEntries -AllLogFiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;-LogFile&lt;/strong&gt;&lt;br&gt; Open log file specifying fullpath to logfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Get-IntuneManagementExtensionDiagnostics.ps1 -LOGFile -LOGFile &#34;C:\temp\MDMDiagReport\IntuneManagementExtension.log&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;-LogFilesFolder&lt;/strong&gt;&lt;br&gt; Open log files folder and show UI where you can select what Intune log files to open.&lt;/p&gt; &#xA;&lt;p&gt;You can copy Intune client logs from &lt;strong&gt;C:\ProgramData\Microsoft\IntuneManagementExtension\Logs&lt;/strong&gt; folder and analyze logs in another device.&lt;br&gt; Or you can download Intune logs from remote computer with Intune action &lt;strong&gt;Collect Diagnostics&lt;/strong&gt; and analyze in another device.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Get-IntuneManagementExtensionDiagnostics.ps1 -LogFilesFolder &#34;C:\temp\MDMDiagReport&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;-ShowAllTimelineEntries&lt;/strong&gt;&lt;br&gt; Shows start events on Timeline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Get-IntuneManagementExtensionDiagnostics.ps1 -ShowAllTimelineEntries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Intune Powershell scripts&#39; outputs and errors can be also shown in Timeline view with parameters&lt;br&gt; &lt;strong&gt;-ShowStdOutInTimeline&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;-ShowErrorsInTimeline&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;-ShowErrorsSummary&lt;/strong&gt;&lt;br&gt; This shows instantly what is problem with failed Powershell scripts&lt;/p&gt; &#xA;&lt;p&gt;There are many more Parameters but these should get you started.&lt;/p&gt; &#xA;&lt;h3&gt;LogViewerUI - better than cmtrace.exe ?-)&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/main/pics/Get-IntuneManagementExtensionDiagnostics-LogViewerUI01_1.1.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &#xA;&lt;p&gt;Script also includes really capable Log Viewer UI when script is started with parameter &lt;strong&gt;-ShowLogViewerUI&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Get-IntuneManagementExtensionDiagnostics.ps1 -Online -ShowLogViewerUI -ConvertAllKnownGuidsToClearText&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LogViewerUI (Out-GridView) looks a lot like cmtrace.exe tool but it is better because all found Timeline events are added to log for easier debugging.&lt;/p&gt; &#xA;&lt;p&gt;Parameter &lt;strong&gt;-ConvertAllKnownGuidsToClearText&lt;/strong&gt; replaces all known GUIDs to real App and script names. This makes viewing log 1000% easier.&lt;/p&gt; &#xA;&lt;p&gt;LogViewerUI has good search and filtering capabilities. Try to filter known log entries in Timeline:&lt;br&gt; &lt;strong&gt;Add criteria -&amp;gt; ProcessRunTime -&amp;gt; is not empty&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Selecting last line (RELOAD) and OK will reload log file.&lt;/p&gt; &#xA;&lt;p&gt;Script can merge multiple log files so especially in LogViewerUI you can see Powershell command outputs from AgentExecutor.log&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/tree/main/pics&#34;&gt;screenshots&lt;/a&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/main/pics/Get-IntuneManagementExtensionDiagnostics-LogViewerUI01_1.1.png&#34; width=&#34;200&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/main/pics/Get-IntuneManagementExtensionDiagnostics-LogViewerUI02-FilterKnownEvents.png&#34; width=&#34;200&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/main/pics/Get-IntuneManagementExtensionDiagnostics-LogViewerUI03-FilterKnownEvents.png&#34; width=&#34;200&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/main/pics/Get-IntuneManagementExtensionDiagnostics-LogViewerUI04.png&#34; width=&#34;200&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/main/pics/Get-IntuneManagementExtensionDiagnostics-LogViewerUI05-FilterKnownEvents.png&#34; width=&#34;200&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/main/pics/Get-IntuneManagementExtensionDiagnostics-LogViewerUI06-ClearFilterKnownEvents.png&#34; width=&#34;200&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/petripaavola/Get-IntuneManagementExtensionDiagnostics/main/pics/Get-IntuneManagementExtensionDiagnostics-LogViewerUI07-FastSearch.png&#34; width=&#34;200&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Backlog:&lt;/h3&gt; &#xA;&lt;p&gt;There are many features in development and planned in future. Stay tuned :)&lt;/p&gt; &#xA;&lt;h3&gt;Known issues:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WinGetApp install may be detected falsepositive wrong. There is WinGet App install fail and empty App name and UserName in Timeline view. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Status: Fixed in version 1.1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Win32App Uninstall is shown as Install at least in Supercedende case &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Verified that intent is not gathered right in Win32App and WinGetApp install/uninstall&lt;/li&gt; &#xA;   &lt;li&gt;Status: Fixed in version 1.1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cyberark/epv-api-scripts</title>
    <updated>2023-03-16T01:40:38Z</updated>
    <id>tag:github.com,2023-03-16:/cyberark/epv-api-scripts</id>
    <link href="https://github.com/cyberark/epv-api-scripts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;These API scripts enable CyberArk users to automate privileged account management task like account creation, user management, and more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EPV REST API scripts examples&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;REST APIs can provide end-to-end automation for key Privileged Access Management tasks, saving time and simplifying workloads for CyberArk &lt;a href=&#34;https://www.cyberark.com/products/privileged-account-security-solution/core-privileged-account-security/&#34;&gt;Core PAS&lt;/a&gt; users. This repository of downloadable REST API example scripts show users how to automate key processes across their Core PAS implementation, including securing privileged accounts, accessing data in CyberArk safes, responding to security events detected by Privileged Threat Analytics, and managing user accounts. REST APIs are part of the default PVWA installation for most CyberArk customers and can be implemented immediately.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt; These scripts were made available as examples to show customers how to use CyberArk REST APIs. They are not as a supported product of CyberArk.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;The Main Goal&lt;/h2&gt; &#xA;&lt;p&gt;Enable CyberArk users to automate and simplify privileged account management tasks via REST APIs such as account workflow, onboarding rules, permissions granting, and more.&lt;/p&gt; &#xA;&lt;h2&gt;REST API Technical Requirements&lt;/h2&gt; &#xA;&lt;h4&gt;SDK Supported Platforms&lt;/h4&gt; &#xA;&lt;p&gt;The PAS SDK is a RESTful API that can be invoked by any RESTful client for various programming and scripting environments, including Java, C#, Perl, PHP, Python and Ruby.&lt;/p&gt; &#xA;&lt;h4&gt;The PAS SDK&lt;/h4&gt; &#xA;&lt;p&gt;The PAS SDK enables you to perform activities on PAS objects via a REST Web Service interface. Each PAS object has its own URL path in the PVWA website that can be accessed using the relevant HTTPS request verb. Learn more about the technical specifications in our official &lt;a href=&#34;https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/Latest/en/Content/WebServices/Implementing%20Privileged%20Account%20Security%20Web%20Services%20.htm&#34;&gt;REST API technical documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;p&gt;Additional solutions for mitigating risk can be found in the &lt;a href=&#34;https://cyberark-customers.force.com/mplace/s/&#34;&gt;CyberArk Marketplace&lt;/a&gt;, a trusted platform for customers to easily find partner integrations with CyberArk Core PAS and other projects. Contributors to the Marketplace include strategic partners, customers, and over 130 leading security solution providers that are members of the CyberArk &lt;a href=&#34;https://www.cyberark.com/partners/alliance-partners/&#34;&gt;C&lt;sup&gt;3&lt;/sup&gt; Alliance&lt;/a&gt;. The C&lt;sup&gt;3&lt;/sup&gt; Alliance offers more than 225 certified out-of-the-box integrations to help protect customer environments against pervasive threats and emerging attacks. CyberArk Marketplace users can find effective solutions for mitigating emerging risks, build upon existing integrations to develop customized solutions, and collaborate with other contributors to address evolving security challenges. CyberArk Marketplace is an industry destination for collaboration and identifying integrated solutions that advance privileged access management.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/cyberark/epv-api-scripts/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING&lt;/code&gt;&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This repository is licensed under Apache License 2.0 - see &lt;a href=&#34;https://raw.githubusercontent.com/cyberark/epv-api-scripts/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 2022 CyberArk Software Ltd. All rights reserved.&lt;/p&gt;</summary>
  </entry>
</feed>