<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-27T01:33:35Z</updated>
  <subtitle>Daily Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SwiftOnSecurity/OrgKit</title>
    <updated>2024-03-27T01:33:35Z</updated>
    <id>tag:github.com,2024-03-27:/SwiftOnSecurity/OrgKit</id>
    <link href="https://github.com/SwiftOnSecurity/OrgKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provision a brand-new company with proper defaults in Windows, Offic365, and Azure&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OrgKit&lt;/h1&gt; &#xA;&lt;p&gt;Provision a brand-new company with proper defaults in Windows, Office365, and Azure.&lt;/p&gt; &#xA;&lt;h2&gt;Mission&lt;/h2&gt; &#xA;&lt;p&gt;OrgKit is designed to provide a series of templates to &#34;boot-up&#34; a new highly-documented IT environment for a mid-size organization, serve as a public example of what&#39;s possible, be a gold-standard implementation, and allow informed decisions by companies who do not know what&#39;s really done by other businesses.&lt;/p&gt; &#xA;&lt;p&gt;The specific target is a company having to start-over after a complete network compromise, or the spin-up of a new subsidiary business.&lt;/p&gt; &#xA;&lt;h2&gt;Preliminary sources&lt;/h2&gt; &#xA;&lt;p&gt;If you want to jump ahead, here&#39;s some of the work I will be citing in addition to my own, and which you can go ahead and use yourself&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cisecurity.org/&#34;&gt;Center for Internet Security&lt;/a&gt; baselines&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unassassinable/PAW&#34;&gt;PAW&lt;/a&gt; by &lt;a href=&#34;https://github.com/unassassinable&#34;&gt;Rich &#34;unassassinable&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mxk/win10-secure-baseline-gpo&#34;&gt;win10-secure-baseline-gpo&lt;/a&gt; by &lt;a href=&#34;https://github.com/mxk&#34;&gt;Maxim Khitrov &#34;mxk&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Disassembler0/Win10-Initial-Setup-Script&#34;&gt;Win10-Initial-Setup-Script&lt;/a&gt; by &lt;a href=&#34;https://github.com/Disassembler0&#34;&gt;&#34;Disassembler0&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PaulSec/awesome-windows-domain-hardening&#34;&gt;awesome-windows-domain-hardening&lt;/a&gt; by &lt;a href=&#34;https://github.com/PaulSec&#34;&gt;&#34;PaulSec&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nsacyber/Windows-Secure-Host-Baseline&#34;&gt;Windows-Secure-Host-Baseline&lt;/a&gt; by &lt;a href=&#34;https://github.com/nsacyber&#34;&gt;The NSA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/palantir/windows-event-forwarding&#34;&gt;windows-event-forwarding&lt;/a&gt; by &lt;a href=&#34;https://github.com/palantir&#34;&gt;Palantir&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Design decisions&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s important to note that the reason a comprehensive repository of Microsoft product configuration guidance for organizations is so rare is because the entire ecosystem is designed to be customized per-organization. However, most organizations are not equipped nor understand the breadth of what this really means. This divergent configuration history of their customers, along with fears about having to support it, then prevents Microsoft providing strong defaults and guidance in a generic form.&lt;/p&gt; &#xA;&lt;h3&gt;Powershell DSC&lt;/h3&gt; &#xA;&lt;p&gt;Strictly, Powershell DSC is the correct tool to build and maintain a Windows environment with this level of centralized design and vision. It is a great set of abilities, and it will likely be included in the future. However, this project is aimed at Windows administrators who will already be intimidated by the breadth of new technologies and concepts, and need to run the system over a long-term with other staff.&lt;/p&gt; &#xA;&lt;p&gt;Powershell DSC is currently a specialized skill designed to revert anything done outside its central control. It requires whole-organization buy-in, and for that reason, the kind of use-cases for this set of guidance cannot rely on it.&lt;/p&gt; &#xA;&lt;h3&gt;Group Policy&lt;/h3&gt; &#xA;&lt;h2&gt;Project operations&lt;/h2&gt; &#xA;&lt;p&gt;None of this project is sold as unique work or groundbreaking. Where possible, it will reference the existing work of others, or heavily credit them in adaptation - with their permission. Many IT organizations have a set of capabilities similar to this. They press a button and can build an entire company, just like this. However, it is proprietary work product their staff cannot publicly share. This is intended to remediate that.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FriedrichWeinmann/EntraAuth</title>
    <updated>2024-03-27T01:33:35Z</updated>
    <id>tag:github.com,2024-03-27:/FriedrichWeinmann/EntraAuth</id>
    <link href="https://github.com/FriedrichWeinmann/EntraAuth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Entra Authentication Module&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the Entra Authentication Module project. Your one stop for authenticating to any service behind Microsoft Entra Authentication.&lt;/p&gt; &#xA;&lt;p&gt;Whether you just want a token ... or for someone to deal with all of the nasty details of executing API requests.&lt;/p&gt; &#xA;&lt;p&gt;Functionally, if you liked the good old MSAL.PS and are looking for a successor, look no further.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;To use this module, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Install-Module EntraAuth -Scope CurrentUser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you have PowerShell 7.4 or later:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Install-PSResource EntraAuth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;To profit from the module, you basically ...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect to a service&lt;/li&gt; &#xA; &lt;li&gt;Then execute requests against it or retrieve its token&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some common services come preconfigured (e.g. Graph, GraphBeta or the Security API), for others you might first need to register the service.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note for module developers: There is a dedicated chapter at the bottom with important advice.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Preparing to Authenticate&lt;/h2&gt; &#xA;&lt;p&gt;For those new to connecting to and executing against APIs that require Entra authentication, we have prepared a guide, explaining the different authentication options, which to chose when and what you need to do to prepare outside of the code.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FriedrichWeinmann/EntraAuth/master/docs/overview.md&#34;&gt;Guide to Authentication&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Connect&lt;/h2&gt; &#xA;&lt;p&gt;To connect you always need a ClientID and a TenantID for the App Registration you are using for logon. Depending on how you want to authenticate, this App Registration may need some configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Browser (default): In the &lt;code&gt;Authentication&lt;/code&gt; tab in the portal, register a &#39;Mobile and Desktop Applications&#39; Platform with the &#39;&lt;a href=&#34;http://localhost&#34;&gt;http://localhost&lt;/a&gt;&#39; redirect uri.&lt;/li&gt; &#xA; &lt;li&gt;DeviceCode: In the &lt;code&gt;Authentication&lt;/code&gt; tab in the portal, register a &#39;Web&#39; Platform with the &#39;&lt;a href=&#34;http://localhost&#34;&gt;http://localhost&lt;/a&gt;&#39; redirect uri and enable &lt;code&gt;Allow public client flows&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ClientSecret: In the &lt;code&gt;certificate &amp;amp; secrets&lt;/code&gt; tab create a secret and provide it as a SecureString when connecting&lt;/li&gt; &#xA; &lt;li&gt;Certificate: In the &lt;code&gt;certificate &amp;amp; secrets&lt;/code&gt; tab register a certificate and provide it when connecting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example connect calls for each flow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Example values, fill in the appropriate ones from your App Registration&#xA;$ClientID = &#39;d6a3ffb9-6217-40d6-bfb2-f5769b65970a&#39;&#xA;$TenantID = &#39;a948c2b3-8eb2-498a-9108-c32aeeaa0f97&#39;&#xA;&#xA;# Browser Based&#xA;Connect-EntraService -ClientID $ClientID -TenantID $TenantID&#xA;Connect-EntraService -ClientID $ClientID -TenantID $TenantID -Service Endpoint&#xA;&#xA;# DeviceCode authentication&#xA;Connect-EntraService -ClientID $ClientID -TenantID $TenantID -DeviceCode&#xA;Connect-EntraService -ClientID $ClientID -TenantID $TenantID -DeviceCode -Service Endpoint&#xA;&#xA;# Client Secret Based&#xA;$secret = Get-ClipBoard | ConvertTo-SecureString -AsPlainText -Force # Assuming the secret is in your clipboard&#xA;Connect-EntraService -ClientID $ClientID -TenantID $TenantID -ClientSecret $secret&#xA;Connect-EntraService -ClientID $ClientID -TenantID $TenantID -ClientSecret $secret -Service Endpoint&#xA;&#xA;## Certificate Based&#xA;Connect-EntraService -ClientID $ClientID -TenantID $TenantID -Certificate $cert&#xA;Connect-EntraService -ClientID $ClientID -TenantID $TenantID -CertificateThumbprint E1AE5158CA92CC9AA53D955217567B30E68647BD&#xA;Connect-EntraService -ClientID $ClientID -TenantID $TenantID -CertificateName &#39;CN=Whatever&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Default Service&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;By default, the service connected to is the Microsoft Graph API. The same default is also used for requests. To change the default, you can use the &lt;code&gt;-MakeDefault&lt;/code&gt; parameter when connecting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Connect-EntraService -ClientID $ClientID -TenantID $TenantID -Service Endpoint -MakeDefault&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would make the &lt;code&gt;Endpoint&lt;/code&gt; service the new default service for new connections or requests.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Multiple Services&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;It is quite possible to be connected to multiple services in parallel. Even if you use the same app registration for both services, you need to connect for each service individually. You can however perform all connections using the same app registration in the same call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Connect-EntraService -ClientID $ClientID -TenantID $TenantID -ClientSecret $secret -Service Endpoint, Graph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Graph &amp;amp; Graph Beta&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The Graph and the Graph Beta are registered as separate services. However, both can theoretically use the same token data ... but this module can&#39;t unify them properly without additional inconsistencies.&lt;/p&gt; &#xA;&lt;p&gt;However, when specifying the request (see below), rather than providing the relative api path, you can provide the full http-starting url instead. So if you mostly want to use v1.0 but have this one request that must be made in beta, you can specify the full url for that call and don&#39;t need separate connections.&lt;/p&gt; &#xA;&lt;h2&gt;Requests&lt;/h2&gt; &#xA;&lt;p&gt;Once connected to a service, executing requests against that service becomes quite simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Request information from the default service&#xA;Invoke-EntraRequest -Path me&#xA;&#xA;# Request information from the GraphBeta service&#xA;Invoke-EntraRequest -Service GraphBeta -Path me&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Query Modifiers&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can modify requests by adding query parameters. Either you specify them in your path, or you use the &lt;code&gt;-Query&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-EntraRequest -Path &#39;users?$select=displayName,givenName,id&#39;&#xA;&#xA;Invoke-EntraRequest -Path users -Query @{&#xA;    &#39;$select&#39; = &#39;displayName&#39;, &#39;givenName&#39;, &#39;id&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the Token&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you want direct access to the token and just do your own thing. There are two ways to get a token:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ask for it during the request&lt;/li&gt; &#xA; &lt;li&gt;Retrieve it after connecting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All tokens are maintained in the module for its runtime, but it will only maintain the latest iteration for a single service.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# During the Connectiong&#xA;$token = Connect-EntraService -ClientID $ClientID -TenantID $TenantID -Service GraphBeta -PassThru&#xA;&#xA;# After already being connected&#xA;$token = Get-EntraToken -Service GraphBeta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once obtained, a token can be used either in &lt;code&gt;Invoke-EntraRequest&lt;/code&gt; or in your own code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Reuse token&#xA;Invoke-EntraRequest -Path me -Token $token&#xA;&#xA;# Get Authentication header and use that&#xA;Invoke-RestMethod -Uri &#39;https://graph.microsoft.com/v1.0/users&#39; -Headers $token.GetHeader()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;Getheader()&lt;/code&gt; method will automatically refresh expiring tokens if needed. Directly accessing the &lt;code&gt;.AccessToken&lt;/code&gt; property is possible, but will not refresh tokens.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Registering Services&lt;/h2&gt; &#xA;&lt;p&gt;So, that whole thing is all nice and everything, but ... what if we want a token for a service not prepared in the module? What if it&#39;s an app that only exists in your own tenant? What if it&#39;s a function app only your team uses? Or some Microsoft Product that was released a year after this module and we just never updated it?&lt;/p&gt; &#xA;&lt;p&gt;Well, that is where our &lt;code&gt;*-EntraService&lt;/code&gt; commands come in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Get-EntraService&lt;/code&gt; to see all currently configured services&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Register-EntraService&lt;/code&gt; to add new services&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Set-EntraService&lt;/code&gt; to modify the configuration of an existing service&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The main one is &lt;code&gt;Register-EntraService&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$graphCfg = @{&#xA;    Name          = &#39;Graph&#39;&#xA;    ServiceUrl    = &#39;https://graph.microsoft.com/v1.0&#39;&#xA;    Resource      = &#39;https://graph.microsoft.com&#39;&#xA;    DefaultScopes = @()&#xA;    HelpUrl       = &#39;https://developer.microsoft.com/en-us/graph/quick-start&#39;&#xA;    Header        = @{ }&#xA;    NoRefresh     = $false&#xA;}&#xA;Register-EntraService @graphCfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Name&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The name the service is referenced by.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Service Url&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The base url all request from &lt;code&gt;Invoke-EntraRequest&lt;/code&gt; using the service use, unless their requests specify the full web url. If your API calls look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://graph.microsoft.com/v1.0/users&#xA;https://graph.microsoft.com/v1.0/me&#xA;https://graph.microsoft.com/v1.0/messages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;https://graph.microsoft.com/v1.0&lt;/code&gt; would be the Service url. Effectively, you must provide any Url element after this value.&lt;/p&gt; &#xA;&lt;p&gt;This property only matters when you use &lt;code&gt;Invoke-EntraRequest&lt;/code&gt; or directly read it off the token properties.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Resource&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This is the ID of the resource connecting to. To figure out the value needed here, go to the &lt;code&gt;API Permission&lt;/code&gt; tab on the App Registration and click on the respective header in your list of scopes (e.g. &lt;code&gt;Microsoft Graph (##)&lt;/code&gt;): The value under the display name at the top is the Resource. This could be a url such as &lt;code&gt;https://graph.microsoft.com&lt;/code&gt; but can also be something like &lt;code&gt;api://&amp;lt;some weird guid&amp;gt;&lt;/code&gt; and has no fixed relationship to the requests URLs.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Default Scopes&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In delegate mode, we sometimes ask for what scopes we need (which may lead to users being prompted to consent them). If a service is a bit pointless to use without some minimal scopes and you want to make it more comfortable to use, you can provide the default set of scopes here. If the user does not specify any scopes during the connect, then at least these are asked for.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not used in application authentication flow or for the ROPC flow&lt;/li&gt; &#xA; &lt;li&gt;Can lead to failure if the application does not have these scopes configured&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Help Url&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Pure documentation in case you want to help users figure out how to use your service.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Header&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Additional values to include in the header for all requests. For example, if you always must specify a specific content-type, this can be included here.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NoRefresh&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Tokens only last so long. With a certificate or a Client Secret, that&#39;s no problem - just silently do the authentication again and that&#39;s it. However, interactive logons using the browser would then force the user to logon again and again.&lt;/p&gt; &#xA;&lt;p&gt;To make this less painful, a refresh token can be requested on the first interactive logon, allowing the silent renewal of tokens. This is done automatically by default, so no need to meddle with that. Usually.&lt;/p&gt; &#xA;&lt;p&gt;Some services may not support this and some security policies interfere as well for administrative accounts, so refresh tokens may not be desired. Configuring a service to not refresh means interactive logons will prompt again once the token has expired.&lt;/p&gt; &#xA;&lt;h2&gt;Module building on EntraAuth&lt;/h2&gt; &#xA;&lt;p&gt;As a module author, building on EntraAuth for authentication purposes, there are two important aspects to using this module:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default Service&lt;/li&gt; &#xA; &lt;li&gt;What Service to use&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Default Service&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Above, we described how to chose / override the default Service &lt;code&gt;Invoke-EntraRequest&lt;/code&gt; is going to use. &lt;em&gt;DO NOT USE THIS!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is going to risk confusing the user who may expect another default of their own choice. It may also lead to conflict with other modules and unexpected errors.&lt;/p&gt; &#xA;&lt;p&gt;If you do not always want to specify the service name or connection token, set the default value in your psm1 file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$PSDefaultParameterValues[&#39;Invoke-EntraRequest:Service&#39;] = &#39;MyService&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is going to apply to your entire module but not affect others.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;What Service to use&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Let us assume your module wants to execute graph requests. For this you could use the default Graph service. If you do, that means the user only needs to log on once and all modules using EntraAuth can use the same connection.&lt;/p&gt; &#xA;&lt;p&gt;However, that also means you have a single app and need all the scopes &lt;em&gt;all&lt;/em&gt; module need on the App Registration or you risk a lot of fun with insufficient scopes.&lt;/p&gt; &#xA;&lt;p&gt;Instead we recommend registering your own, module-specific service (e.g. &lt;code&gt;&#34;MyModule.Graph&#34;&lt;/code&gt;) with the exact same settings as the default graph service (see above). That way, you can be sure that you have a dedicated connection and any errors about insufficient scopes are at least well earned and not a hard to troubleshoot conflict.&lt;/p&gt;</summary>
  </entry>
</feed>