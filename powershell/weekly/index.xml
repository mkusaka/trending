<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-03T02:19:52Z</updated>
  <subtitle>Weekly Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ItzLevvie/MicrosoftTeams-msinternal</title>
    <updated>2022-07-03T02:19:52Z</updated>
    <id>tag:github.com,2022-07-03:/ItzLevvie/MicrosoftTeams-msinternal</id>
    <link href="https://github.com/ItzLevvie/MicrosoftTeams-msinternal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This project was created from PowerShell which allows people to download the latest internal build of Microsoft Teams.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>danielbohannon/Invoke-Obfuscation</title>
    <updated>2022-07-03T02:19:52Z</updated>
    <id>tag:github.com,2022-07-03:/danielbohannon/Invoke-Obfuscation</id>
    <link href="https://github.com/danielbohannon/Invoke-Obfuscation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PowerShell Obfuscator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Invoke-Obfuscation v1.8&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/danielbohannon/danielbohannon.github.io/raw/master/Invoke-Obfuscation%20Screenshot.png&#34; alt=&#34;Invoke-Obfuscation Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Invoke-Obfuscation is a PowerShell v2.0+ compatible PowerShell command and script obfuscator.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;In the Fall of 2015 I decided to begin researching the flexibility of PowerShell&#39;s language and began cataloguing the various ways to accomplish a handful of common techniques that most attackers use on a regular basis.&lt;/p&gt; &#xA;&lt;p&gt;Initially focusing on encoded command and remote download cradle syntaxes, I discovered that various escape characters that did not hinder the execution of the command persisted in the command line arguments, both in the running process as well as what is logged in Security EID 4688 and Sysmon EID 1 event logs. This led me to systematically explore ways of obfuscating each kind of &#34;token&#34; found in any PowerShell command or script.&lt;/p&gt; &#xA;&lt;p&gt;I then explored more obscure ways to perform string-level obfuscation, various encoding/encrypting techniques (like ASCII/hex/octal/binary and even SecureString), and finally PowerShell launch techniques to abstract the command line arguments from powershell.exe and to push it back to the parent and even grandparent process.&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;Attackers and commodity malware have started using extremely basic obfuscation techniques to hide the majority of the command from the command line arguments of powershell.exe. I developed this tool to aid the Blue Team in simulating obfuscated commands based on what I currently know to be syntactically possible in PowerShell 2.0-5.0 so that they can test their detection capabilities of these techniques.&lt;/p&gt; &#xA;&lt;p&gt;The tool&#39;s sole purpose is to break any assumptions that we as defenders may have concerning how PowerShell commands can appear on the command line. My hope is that it will encourage the Blue Team to shift to looking for Indicators of Obfuscation on the command line in addition to updating PowerShell logging to include Module, ScriptBlock and Transcription logging as these sources simplify most aspects of the obfuscation techniques generated by this tool.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;While all of the layers of obfuscation have been built out into separate scripts, most users will find the &lt;code&gt;Invoke-Obfuscation&lt;/code&gt; function to be the easiest way to explorer and visualize the obfuscation techniques that this framework currently supports.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The source code for Invoke-Obfuscation is hosted at Github, and you may download, fork and review it from this repository (&lt;a href=&#34;https://github.com/danielbohannon/Invoke-Obfuscation&#34;&gt;https://github.com/danielbohannon/Invoke-Obfuscation&lt;/a&gt;). Please report issues or feature requests through Github&#39;s bug tracker associated with this project.&lt;/p&gt; &#xA;&lt;p&gt;To install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Import-Module ./Invoke-Obfuscation.psd1&#xA;Invoke-Obfuscation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Invoke-Obfuscation is released under the Apache 2.0 license.&lt;/p&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;v1.0 - 2016-09-25 DerbyCon 6.0 (Louisville, Kentucky USA): PUBLIC Release of Invoke-Obfuscation.&lt;/p&gt; &#xA;&lt;p&gt;v1.1 - 2016-10-09 SANS DFIR Summit (Prague, Czech Republic): Added -f format operator re-ordering functionality to all applicable TOKEN obfuscation functions. Also added additional syntax options for setting variable values.&lt;/p&gt; &#xA;&lt;p&gt;v1.2 - 2016-10-20 CODE BLUE (Tokyo, Japan): Added Type TOKEN obfuscation (direct type casting with string obfuscation options for type name).&lt;/p&gt; &#xA;&lt;p&gt;v1.3 - 2016-10-22 Hacktivity (Budapest, Hungary): Added two new LAUNCHERs: CLIP+ and CLIP++. Also added additional (and simpler) array char conversion syntax for all ENCODING functions that does not require For-EachObject/%.&lt;/p&gt; &#xA;&lt;p&gt;v1.4 - 2016-10-28 BruCON (Ghent, Belgium): Added new BXOR ENCODING function. Also enhanced randomized case for all components of all ENCODING functions as well as for PowerShell execution flags for all LAUNCHERs. Finally, added -EP shorthand option for -ExecutionPolicy to all LAUNCHERs as well as the optional integer representation of the -WindowStyle PowerShell execution flag: Normal (0), Hidden (1), Minimized (2), Maximized (3).&lt;/p&gt; &#xA;&lt;p&gt;v1.5 - 2016-11-04 Blue Hat (Redmond, Washington USA): Added WMIC LAUNCHER with some randomization of WMIC command line arguments.&lt;/p&gt; &#xA;&lt;p&gt;v1.6 - 2017-01-24 Blue Hat IL (Tel Aviv, Israel):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added CLI functionality: E.g., Invoke-Obfuscation -ScriptBlock {Write-Host &#39;CLI FTW!&#39;} -Command &#39;Token\All\1, Encoding\1,Launcher\Stdin++\234,Clip&#39; -Quiet -NoExit&lt;/li&gt; &#xA; &lt;li&gt;Added UNDO functionality to remove one layer of obfuscation at a time.&lt;/li&gt; &#xA; &lt;li&gt;Removed Whitespace obfuscation from Token\All\1 to speed up large script obfuscation.&lt;/li&gt; &#xA; &lt;li&gt;Added Process Argument Tree output for all launchers to aid defenders.&lt;/li&gt; &#xA; &lt;li&gt;Added base menu auto-detect functionality to avoid needing to use BACK or HOME: E.g., if you ran TOKEN then ALL then 1, then just type LAUNCHER and you will get to the LAUNCHER menu without needing to type HOME or BACK to get back to the home menu.&lt;/li&gt; &#xA; &lt;li&gt;Added multi-command syntax utilized by CLI and interactive mode: E.g., Token\All\1,String\3,Encoding\5,Launcher\Ps\234,Clip&lt;/li&gt; &#xA; &lt;li&gt;Added regex capability to all menu and obfuscation commands: E.g., Token**,String[13],Encoding(1|6),Launcher.*[+]{2}\234,Clip&lt;/li&gt; &#xA; &lt;li&gt;Added OUT FILEPATH single command functionality.&lt;/li&gt; &#xA; &lt;li&gt;Added decoding if powershell -enc syntax is entered as a SCRIPTBLOCK value.&lt;/li&gt; &#xA; &lt;li&gt;Added alias ForEach to ForEach-Object/% randomized syntax options in all ENCODING functions.&lt;/li&gt; &#xA; &lt;li&gt;Added -Key -Ke -K KEY substring syntax options to Out-SecureStringCommand.ps1.&lt;/li&gt; &#xA; &lt;li&gt;Added more thorough case randomization to all \Home\String obfuscation functions.&lt;/li&gt; &#xA; &lt;li&gt;Added -ST/-STA (Single-Threaded Apartment) flags to CLIP+ and CLIP++ launcher functions since they are required if running on PowerShell 2.0.&lt;/li&gt; &#xA; &lt;li&gt;Added Get-Item/GI/Item syntax everywhere where Get-ChildItem is used to get variable values.&lt;/li&gt; &#xA; &lt;li&gt;Added Set-Item variable instantiation syntax to TYPE obfuscation function.&lt;/li&gt; &#xA; &lt;li&gt;Added additional Invoke-Expression/IEX syntax using PowerShell automatic variables and environment variable value concatenations in Out-ObfuscatedStringCommand.ps1&#39;s Out-EncapsulatedInvokeExpression function and copied to all launchers, STRING and ENCODING functions to add numerous command-line syntaxes for IEX.&lt;/li&gt; &#xA; &lt;li&gt;Added two new JOIN syntaxes for String\Reverse and all ENCODING obfuscation options:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Added [String]::Join(&#39;&#39;,$string) JOIN syntax&lt;/li&gt; &#xA; &lt;li&gt;Added OFS-variable JOIN syntax (Output Field Separator automatic variable)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added two more SecureString syntaxes to Encoding\5:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;PtrToStringAnsi / SecureStringToGlobalAllocAnsi&lt;/li&gt; &#xA; &lt;li&gt;PtrToStringBSTR / SecureStringToBSTR&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added six GetMember alternate syntaxes for several SecureString members:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;PtrToStringAuto, ([Runtime.InteropServices.Marshal].GetMembers()[3].Name).Invoke&lt;/li&gt; &#xA; &lt;li&gt;PtrToStringAuto, ([Runtime.InteropServices.Marshal].GetMembers()[5].Name).Invoke&lt;/li&gt; &#xA; &lt;li&gt;PtrToStringUni , ([Runtime.InteropServices.Marshal].GetMembers()[2].Name).Invoke&lt;/li&gt; &#xA; &lt;li&gt;PtrToStringUni , ([Runtime.InteropServices.Marshal].GetMembers()[4].Name).Invoke&lt;/li&gt; &#xA; &lt;li&gt;PtrToStringAnsi, ([Runtime.InteropServices.Marshal].GetMembers()[0].Name).Invoke&lt;/li&gt; &#xA; &lt;li&gt;PtrToStringAnsi, ([Runtime.InteropServices.Marshal].GetMembers()[1].Name).Invoke&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Updated Out-ObfuscatedTokenCommand.ps1 so that VARIABLE obfuscation won&#39;t encapsulate variables in ${} if they are already encapsulated (so ${${var}} won&#39;t happen as this causes errors).&lt;/li&gt; &#xA; &lt;li&gt;Replaced Invoke-Obfuscation.psm1 with Invoke-Obfuscation.psd1 (thanks @Carlos_Perez).&lt;/li&gt; &#xA; &lt;li&gt;Fixed several TOKEN-level obfuscation bugs reported by @cobbr_io and @IISResetMe.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;v1.7 - 2017-03-03 nullcon (Goa, India):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added 3 new LAUNCHERs: RUNDLL, RUNDLL++ and MSHTA++&lt;/li&gt; &#xA; &lt;li&gt;Added additional ExecutionContext wildcard variable strings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;v1.8 - 2017-07-27 Black Hat (Las Vegas, Nevada USA):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added 2 new ENCODING options: Special Characters and Whitespace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;v1.8.1 - 2017-12-19:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added COMPRESS function for easier conversion of multi-line scripts to a one-liner command while drastically reducing the command length for cmd.exe command line length limitation purposes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;v1.8.2 - 2018-01-04:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added AST obfuscation functions, which obfuscates by manipulating the structure of the AbstractSyntaxTree without using many special characters.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>k8gege/K8tools</title>
    <updated>2022-07-03T02:19:52Z</updated>
    <id>tag:github.com,2022-07-03:/k8gege/K8tools</id>
    <link href="https://github.com/k8gege/K8tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;K8工具合集(内网渗透/提权工具/远程溢出/漏洞利用/扫描工具/密码破解/免杀工具/Exploit/APT/0day/Shellcode/Payload/priviledge/BypassUAC/OverFlow/WebShell/PenTest) Web GetShell Exploit(Struts2/Zimbra/Weblogic/Tomcat/Apache/Jboss/DotNetNuke/zabbix)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;K8tools&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/k8gege&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Author-k8gege-blueviolet&#34; alt=&#34;Author&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/k8gege/K8tools/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/k8gege/K8tools&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/k8gege/K8tools/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/k8gege/K8tools&#34; alt=&#34;Github Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/k8gege/K8tools/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/k8gege/K8tools&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/k8gege/K8tools/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/k8gege/K8tools&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://k8gege.org/k8img/title/gun5.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;声明: 工具仅供安全研究或授权渗透，非法用途后果自负。&lt;br&gt; 下载: &lt;a href=&#34;https://github.com/k8gege/K8tools&#34;&gt;https://github.com/k8gege/K8tools&lt;/a&gt;&lt;br&gt; 文档: &lt;a href=&#34;http://k8gege.org/p/72f1fea6.html&#34;&gt;http://k8gege.org/p/72f1fea6.html&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;PS: 不定期更新,文件比较大，可按需下载。工具有BUG或建议可直接Github上留言&lt;br&gt; 提权工具均可在远控Cmd或WebShell运行，大部份经过修改编译兼容性稳定性更好&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;最新工具&lt;/h3&gt; &#xA;&lt;p&gt;部分工具仅在小密圈发布&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: center; width: 710px; border: green solid 0px;&#34;&gt; &#xA; &lt;img alt=&#34;&#34; src=&#34;http://k8gege.org/img/k8team.jpg&#34; style=&#34;display: inline-block;width: 250px;height: 300px;&#34;&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>