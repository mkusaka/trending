<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-14T02:20:39Z</updated>
  <subtitle>Weekly Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>last-byte/PersistenceSniper</title>
    <updated>2022-08-14T02:20:39Z</updated>
    <id>tag:github.com,2022-08-14:/last-byte/PersistenceSniper</id>
    <link href="https://github.com/last-byte/PersistenceSniper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Powershell script that can be used by Blue Teams, Incident Responders and System Administrators to hunt persistences implanted in Windows machines.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.powershellgallery.com/packages/PersistenceSniper/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/top/last-byte/PersistenceSniper?label=Powershell&#34; alt=&#34;language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.powershellgallery.com/packages/PersistenceSniper/&#34;&gt;&lt;img src=&#34;https://img.shields.io/powershellgallery/p/PersistenceSniper?color=informational&amp;amp;label=Platform&#34; alt=&#34;platform badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.powershellgallery.com/packages/PersistenceSniper/&#34;&gt;&lt;img src=&#34;https://img.shields.io/powershellgallery/v/PersistenceSniper?label=PS%20Gallery%20Version&#34; alt=&#34;version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.powershellgallery.com/packages/PersistenceSniper/&#34;&gt;&lt;img src=&#34;https://img.shields.io/powershellgallery/dt/PersistenceSniper?label=Downloads&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.powershellgallery.com/packages/PersistenceSniper/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/last-byte/PersistenceSniper/CI?label=Github%20CI&#34; alt=&#34;workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/last-byte/PersistenceSniper?color=bright%20green&amp;amp;label=License&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table class=&#34;tg&#34;&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th class=&#34;tg-0pky&#34;&gt;&lt;h1 align=&#34;center&#34;&gt;PersistenceSniper&lt;/h1&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td class=&#34;tg-0pky&#34;&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://blog.notso.pro/img/persistencesniper2.png&#34; width=&#34;60%&#34;&gt; &lt;/p&gt;&lt;p&gt;PersistenceSniper is a Powershell script that can be used by Blue Teams, Incident Responders and System Administrators to hunt persistences implanted in Windows machines. The script is also available on &lt;a href=&#34;https://www.powershellgallery.com/packages/PersistenceSniper/1.0&#34;&gt;Powershell Gallery&lt;/a&gt;.&lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;The Why&lt;/h2&gt; &#xA;&lt;p&gt;Why writing such a tool, you might ask. Well, for starters, I tried looking around and I did not find a tool which suited my particular use case, which was looking for known persistence techniques, automatically, across multiple machines, while also being able to quickly and easily parse and compare results. Sure, &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns&#34;&gt;Sysinternals&#39; Autoruns&lt;/a&gt; is an amazing tool and it&#39;s definitely worth using, but, given it outputs results in non-standard formats and can&#39;t be run remotely unless you do some shenanigans with its command line equivalent, I did not find it a good fit for me. Plus, some of the techniques I implemented so far in PersistenceSniper have not been implemented into Autoruns yet, as far as I know. Anyway, if what you need is an easy to use, GUI based tool with lots of already implemented features, Autoruns is the way to go, otherwise let PersistenceSniper have a shot, it won&#39;t miss it :)&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Using PersistenceSniper is as simple as firing up Powershell as Administrator and running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; git clone https://github.com/last-byte/PersistenceSniper&#xA;PS C:\&amp;gt; Import-Module .\PersistenceSniper\PersistenceSniper\PersistenceSniper.psd1&#xA;PS C:\&amp;gt; Find-AllPersistence&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer sticking to the Powershell Gallery version (which is automatically updated through a Github action every time a new version is pushed here on Github), open up Powershell as Administrator and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; Install-Module PersistenceSniper&#xA;PS C:\&amp;gt; Import-Module PersistenceSniper&#xA;PS C:\&amp;gt; Find-AllPersistence&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need a detailed explanation of how to use the tool or which parameters are available and how they work, PersistenceSniper&#39;s &lt;code&gt;Find-AllPersistence&lt;/code&gt; supports Powershell&#39;s help features, so you can get detailed, updated help by using the following command after importing the module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Get-Help -Name Find-AllPersistence -Full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PersistenceSniper&#39;s &lt;code&gt;Find-AllPersistence&lt;/code&gt; returns an array of objects of type PSCustomObject with the following properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$PersistenceObject = [PSCustomObject]@{&#xA;      &#39;ComputerName&#39; = $ComputerName&#xA;      &#39;Technique&#39; = $Technique&#xA;      &#39;Classification&#39; = $Classification&#xA;      &#39;Path&#39; = $Path&#xA;      &#39;Value&#39; = $Value&#xA;      &#39;Access Gained&#39; = $AccessGained&#xA;      &#39;Note&#39; = $Note&#xA;      &#39;Reference&#39; = $Reference&#xA;      &#39;Signature&#39; = Find-CertificateInfo (Get-ExecutableFromCommandLine $Value)&#xA;      &#39;IsBuiltinBinary&#39; = Get-IfBuiltinBinary (Get-ExecutableFromCommandLine $Value)&#xA;      &#39;IsLolbin&#39; = Get-IfLolBin (Get-ExecutableFromCommandLine $Value)&#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows for easy output formatting and filtering. Let&#39;s say you only want to see the persistences that will allow the attacker to regain access as NT AUTHORITY\SYSTEM (aka System):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; Find-AllPersistence | Where-Object &#34;Access Gained&#34; -EQ &#34;System&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://blog.notso.pro/img/findallpersistenceexample01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Of course, being PersistenceSniper a Powershell-based tool, some cool tricks can be performed, like passing its output to &lt;code&gt;Out-GridView&lt;/code&gt; in order to have a GUI-based table to interact with.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://blog.notso.pro/img/findallpersistenceexample03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interpreting results&lt;/h2&gt; &#xA;&lt;p&gt;As already introduced, &lt;code&gt;Find-AllPersistence&lt;/code&gt; outputs an array of Powershell Custom Objects. Each object has the following properties, which can be used to filter, sort and better understand the different techniques the function looks for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ComputerName: this is fairly straightforward. If you run &lt;code&gt;Find-AllPersistence&lt;/code&gt; without a &lt;code&gt;-ComputerName&lt;/code&gt; parameter, PersistenceSniper will run only on the local machine. Otherwise it will run on the remote computer(s) you specify;&lt;/li&gt; &#xA; &lt;li&gt;Technique: this is the name of the technique itself, as it&#39;s commonly known in the community;&lt;/li&gt; &#xA; &lt;li&gt;Classification: this property can be used to quickly identify techniques based on their MITRE ATT&amp;amp;CK technique and subtechnique number. For those techniques which don&#39;t have a MITRE ATT&amp;amp;CK classification, other classifications are used, the most common being &lt;a href=&#34;https://www.hexacorn.com/blog/2017/01/28/beyond-good-ol-run-key-all-parts/&#34;&gt;Hexacorn&#39;s one&lt;/a&gt; since a lot of techniques were discovered by him. When a technique&#39;s source cannot be reliably identified, the &#34;Uncatalogued Technique N.#&#34; classification is used;&lt;/li&gt; &#xA; &lt;li&gt;Path: this is the path, on the filesystem or in the registry, at which the technique has been implanted;&lt;/li&gt; &#xA; &lt;li&gt;Value: this is the value of the registry property the techniques uses, or the name of the executable/library used, in case it&#39;s a technique which relies on planting something on the filesystem;&lt;/li&gt; &#xA; &lt;li&gt;Access Gained: this is the kind of access the technique grants the attacker. If it&#39;s a Run key under HKCU for example, the access gained will be at a user level, while if it&#39;s under HKLM it will be at system level;&lt;/li&gt; &#xA; &lt;li&gt;Note: this is a quick explanation of the technique, so that its workings can be easily grasped;&lt;/li&gt; &#xA; &lt;li&gt;Reference: this is a link to a more in-depth explanation of the technique, should the analyst need to study it more;&lt;/li&gt; &#xA; &lt;li&gt;Signature: this property reports information on the signature of the binary associated with the persistence technique found;&lt;/li&gt; &#xA; &lt;li&gt;IsBuiltinBinary: this boolean property reports if the binary associated with the persistence technique found is normally found on the Operating System and is considered builtin;&lt;/li&gt; &#xA; &lt;li&gt;IsLolbin: this boolean property is set to True if the the binary associated with the persistence technique found is a &lt;a href=&#34;https://lolbas-project.github.io/&#34;&gt;LOLBin&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dealing with false positives&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s face it, hunting for persistence techniques also comes with having to deal with a lot of false positives. This happens because, while some techniques are almost never legimately used, many indeed are by legit software which needs to autorun on system boot or user login.&lt;/p&gt; &#xA;&lt;p&gt;This poses a challenge, which in many environments can be tackled by creating a CSV file containing known false positives. If your organization deploys systems using something like a golden image, you can run PersistenceSniper on a system you just created, get a CSV of the results and use it to filter out results on other machines. This approach comes with the following benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not having to manage a whitelist of persistences which can be tedious and error-prone;&lt;/li&gt; &#xA; &lt;li&gt;Tailoring the false positives to the organizations, and their organizational units, which use the tool;&lt;/li&gt; &#xA; &lt;li&gt;Making it harder for attackers who want to blend in false positives by not publicly disclosing them in the tool&#39;s code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;Find-AllPersistence&lt;/code&gt; comes with parameters allowing direct output of the findings to a CSV file, while also being able to take a CSV file as input and diffing the results.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; Find-AllPersistence -DiffCSV false_positives.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://blog.notso.pro/img/findallpersistenceexample02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Looking for persistences by taking incremental snapshots&lt;/h2&gt; &#xA;&lt;p&gt;One cool way to use PersistenceSniper my mate &lt;a href=&#34;https://twitter.com/dottor_morte&#34;&gt;Riccardo&lt;/a&gt; suggested is to use it in an incremental way: you could setup a Scheduled Task which runs every X hours, takes in the output of the previous iteration through the &lt;code&gt;-DiffCSV&lt;/code&gt; parameter and outputs the results to a new CSV. By keeping track of the incremental changes, you should be able to spot within a reasonably small time frame new persistences implanted on the machine you are monitoring.&lt;/p&gt; &#xA;&lt;h2&gt;Persistence techniques implemented so far&lt;/h2&gt; &#xA;&lt;p&gt;The topic of persistence, especially on Windows machines, is one of those which see new discoveries basically every other week. Given the sheer amount of persistence techniques found so far by researchers, I am still in the process of implementing them. So far the following &lt;strong&gt;32 techniques&lt;/strong&gt; have been implemented successfully:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/001/&#34;&gt;Run Key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/001/&#34;&gt;RunOnce Key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1546/012/&#34;&gt;Image File Execution Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.hexacorn.com/blog/2018/12/30/beyond-good-ol-run-key-part-98/&#34;&gt;Natural Language Development Platform 6 DLL Override Path&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/&#34;&gt;AEDebug Keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.hexacorn.com/blog/2019/09/20/beyond-good-ol-run-key-part-116/&#34;&gt;Windows Error Reporting Debugger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/&#34;&gt;Windows Error Reporting ReflectDebugger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://persistence-info.github.io/Data/cmdautorun.html&#34;&gt;Command Prompt AutoRun&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://persistence-info.github.io/Data/windowsload.html&#34;&gt;Explorer Load&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/004/&#34;&gt;Winlogon Userinit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/004/&#34;&gt;Winlogon Shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://twitter.com/nas_bench/status/1550836225652686848&#34;&gt;Windows Terminal startOnUserLogin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1546/009/&#34;&gt;AppCertDlls DLL Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/&#34;&gt;App Paths Hijacking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/&#34;&gt;ServiceDll Hijacking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://persistence-info.github.io/Data/gpoextension.html&#34;&gt;Group Policy Extensions DLLs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://persistence-info.github.io/Data/mpnotify.html&#34;&gt;Winlogon MPNotify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.hexacorn.com/blog/2018/04/22/beyond-good-ol-run-key-part-76/&#34;&gt;CHM Helper DLL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.hexacorn.com/blog/2018/04/23/beyond-good-ol-run-key-part-77/&#34;&gt;Hijacking of hhctrl.ocx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/001/&#34;&gt;Startup Folder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1037/001/&#34;&gt;User Init Mpr Logon Script&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.hexacorn.com/blog/2015/01/13/beyond-good-ol-run-key-part-24/&#34;&gt;AutodialDLL Winsock Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://persistence-info.github.io/Data/lsaaextension.html&#34;&gt;LSA Extensions DLL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://persistence-info.github.io/Data/serverlevelplugindll.html&#34;&gt;ServerLevelPluginDll DNS Server DLL Hijacking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/002/&#34;&gt;LSA Authentication Packages DLL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/005/&#34;&gt;LSA Security Packages DLL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/004/&#34;&gt;Winlogon Notify Packages DLL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.hexacorn.com/blog/2017/01/18/beyond-good-ol-run-key-part-55/&#34;&gt;Explorer Tools Hijacking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/&#34;&gt;.NET DbgManagedDebugger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.hexacorn.com/blog/2022/01/16/beyond-good-ol-run-key-part-135/&#34;&gt;ErrorHandler.cmd Hijacking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1546/003/&#34;&gt;WMI Subscriptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://attack.mitre.org/techniques/T1543/003/&#34;&gt;Windows Services&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The techniques implemented in this script have already been published by skilled researchers around the globe, so it&#39;s right to give credit where credit&#39;s due. This project wouldn&#39;t be around if it weren&#39;t for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hexacorn.com/&#34;&gt;Hexacorn&lt;/a&gt; and his never-ending &lt;a href=&#34;https://www.hexacorn.com/blog/2017/01/28/beyond-good-ol-run-key-all-parts/&#34;&gt;Beyond good ol&#39; Run key series&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/0gtweet/&#34;&gt;Grzegorz Tworek&lt;/a&gt; and his amazing &lt;a href=&#34;https://persistence-info.github.io/&#34;&gt;persistence-info.github.io website&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;All the other researchers who disclosed cool and unknown persistence techniques.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;d also like to give credits to my fellow mates at &lt;a href=&#34;https://aptw.tf/about/&#34;&gt;@APTortellini&lt;/a&gt;, in particular &lt;a href=&#34;https://twitter.com/dottor_morte&#34;&gt;Riccardo Ancarani&lt;/a&gt;, for the flood of ideas that helped it grow from a puny text-oriented script to a full-fledged Powershell tool.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is under the &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;CC0 1.0 Universal&lt;/a&gt; license. TL;DR: you can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permission.&lt;/p&gt; &#xA;&lt;h2&gt;Closing words&lt;/h2&gt; &#xA;&lt;p&gt;If you want, you can &lt;a href=&#34;https://www.buymeacoffee.com/last0x00&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Coffee&#34; height=&#34;41&#34; width=&#34;174&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>silverhack/monkey365</title>
    <updated>2022-08-14T02:20:39Z</updated>
    <id>tag:github.com,2022-08-14:/silverhack/monkey365</id>
    <link href="https://github.com/silverhack/monkey365" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Monkey365 provides a tool for security consultants to easily conduct not only Microsoft 365, but also Azure subscriptions and Azure Active Directory security configuration reviews.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/5271640/181045413-1d17333c-0533-404a-91be-2070ccc6ee29.png&#34; width=&#34;45%&#34; height=&#34;45%&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/silverhack/monkey365&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/silverhack/monkey365&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/silverhack/monkey365&#34;&gt;&lt;img alt=&#34;Pester&#34; src=&#34;https://github.com/silverhack/monkey365/actions/workflows/pester.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/silverhack/monkey365&#34;&gt;&lt;img alt=&#34;ScriptAnalyzer&#34; src=&#34;https://github.com/silverhack/monkey365/actions/workflows/psa.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/silverhack/monkey365&#34;&gt;&lt;img alt=&#34;Lines&#34; src=&#34;https://img.shields.io/tokei/lines/github/silverhack/monkey365&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/tr1ana&#34;&gt;&lt;img alt=&#34;Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/tr1ana?style=social&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;i&gt;Monkey 365&lt;/i&gt; is an Open Source security tool that can be used to easily conduct not only Microsoft 365, but also Azure subscriptions and Azure Active Directory security configuration reviews without the significant overhead of learning tool APIs or complex admin panels from the start. To help with this effort, Monkey365 also provides several ways to identify security gaps in the desired tenant setup and configuration. Monkey 365 provides valuable recommendations on how to best configure those settings to get the most out of your Microsoft 365 tenant or Azure subscription. &lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Monkey 365 is a plugin-based PowerShell module that can be used to review the security posture of your cloud environment. With Monkey 365 you can scan for potential misconfigurations and security issues in public cloud accounts according to security best practices and compliance standards, across Azure, Azure AD, and Microsoft 365 core applications.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can either download the latest zip by clicking &lt;a href=&#34;https://github.com/silverhack/monkey365/archive/refs/heads/main.zip&#34;&gt;this link&lt;/a&gt; or download Monkey 365 by cloning the &lt;a href=&#34;https://github.com/silverhack/monkey365.git&#34;&gt;repository&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Once downloaded, you must extract the file and extract the files to a suitable directory. Once you have unzipped the zip file, you can use the PowerShell V3 Unblock-File cmdlet to unblock files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-ChildItem -Recurse c:\monkey365 | Unblock-File&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have installed the monkey365 module on your system, you will likely want to import the module with the Import-Module cmdlet. Assuming that monkey365 is located in the &lt;code&gt;PSModulePath&lt;/code&gt;, PowerShell would load monkey365 into active memory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module monkey365&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If monkey365 is not located on a &lt;code&gt;PSModulePath&lt;/code&gt; path, you can use an explicit path to import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module C:\temp\monkey365&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;Force&lt;/code&gt; parameter in case you want to reimport the monkey365 module into the same session&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Import-Module C:\temp\monkey365 -Force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Basic Usage&lt;/h1&gt; &#xA;&lt;p&gt;The following command will provide the list of available command line options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Help Invoke-Monkey365&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a list of examples use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Help Invoke-Monkey365 -Examples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a list of all options and examples with detailed info use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Get-Help Invoke-Monkey365 -Detailed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following example will retrieve data and metadata from Azure AD and SharePoint Online and then print results. If credentials are not supplied, Monkey365 will prompt for credentials.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$param = @{&#xA;    Instance = &#39;Office365&#39;;&#xA;    Analysis = &#39;SharePointOnline&#39;;&#xA;    PromptBehavior = &#39;SelectAccount&#39;;&#xA;    IncludeAzureActiveDirectory = $true;&#xA;    ExportTo = &#39;PRINT&#39;;&#xA;}&#xA;$assets = Invoke-Monkey365 @param&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional information such as Installation or advanced usage can be found in the following &lt;a href=&#34;https://silverhack.github.io/monkey365/&#34;&gt;link&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>12Knocksinna/Office365itpros</title>
    <updated>2022-08-14T02:20:39Z</updated>
    <id>tag:github.com,2022-08-14:/12Knocksinna/Office365itpros</id>
    <link href="https://github.com/12Knocksinna/Office365itpros" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Office 365 for IT Pros PowerShell examples&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Office365itpros&lt;/h1&gt; &#xA;&lt;p&gt;Office 365 for IT Pros PowerShell examples&lt;/p&gt; &#xA;&lt;p&gt;We store PowerShell examples from the Office 365 for IT Pros ebook here. For more information about the book, see &lt;a href=&#34;https://office365foritpros.com&#34;&gt;https://office365foritpros.com&lt;/a&gt;. We document how we use the scripts at &lt;a href=&#34;https://office365itpros.com/office-365-github-repository/&#34;&gt;https://office365itpros.com/office-365-github-repository/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>