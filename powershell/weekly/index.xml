<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub PowerShell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-11T01:51:21Z</updated>
  <subtitle>Weekly Trending of PowerShell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>securityjoes/MasterParser</title>
    <updated>2024-02-11T01:51:21Z</updated>
    <id>tag:github.com,2024-02-11:/securityjoes/MasterParser</id>
    <link href="https://github.com/securityjoes/MasterParser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MasterParser is a powerful DFIR tool designed for analyzing and parsing Linux logs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MasterParser v2.3&lt;/h1&gt; &#xA;&lt;h4&gt;Stop wasting time, let MasterParser do the work!&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/YosfanEilay/MasterParser/assets/132997318/c6cbcc3f-e966-4329-aec0-c6fe8bc80bb2&#34; alt=&#34;MasterParserBanner&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is MasterParser ?&lt;/h2&gt; &#xA;&lt;p&gt;MasterParser stands as a robust Digital Forensics and Incident Response tool meticulously crafted for the analysis of Linux logs within the var/log directory. Specifically designed to expedite the investigative process for security incidents on Linux systems, MasterParser adeptly scans supported logs, such as auth.log for example, extract critical details including SSH logins, user creations, event names, IP addresses and much more. The tool&#39;s generated summary presents this information in a clear and concise format, enhancing efficiency and accessibility for Incident Responders. Beyond its immediate utility for DFIR teams, MasterParser proves invaluable to the broader InfoSec and IT community, contributing significantly to the swift and comprehensive assessment of security events on Linux platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Logs Format&lt;/h2&gt; &#xA;&lt;p&gt;This is the list of supported log formats within the var/log directory that MasterParser can analyze. &lt;br&gt; In future updates, MasterParser will support additional log formats for analysis.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Supported Log Formats List&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;auth.log&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Feature &amp;amp; Log Format Requests:&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to propose the addition of a new feature \ log format, &lt;br&gt; kindly submit your request by creating an issue &lt;br&gt; &lt;a href=&#34;https://github.com/YosfanEilay/MasterParser/issues/new&#34;&gt;Click here to create a request&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How To Use ?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/YosfanEilay/AuthLogParser/assets/132997318/2d663c04-88a3-412b-aa5c-99ad48d45ba1&#34; alt=&#34;howto use&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How To Use - Text Guide&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From this GitHub repository press on &#34;&amp;lt;&amp;gt; Code&#34; and then press on &#34;Download ZIP&#34;.&lt;/li&gt; &#xA; &lt;li&gt;From &#34;MasterParser-main.zip&#34; export the folder &#34;MasterParser-main&#34; to you Desktop.&lt;/li&gt; &#xA; &lt;li&gt;Open a PowerSehll terminal and navigate to the &#34;MasterParser-main&#34; folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# How to navigate to &#34;MasterParser-main&#34; folder from the PS terminal&#xA;PS C:\&amp;gt; cd &#34;C:\Users\user\Desktop\MasterParser-main\&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Now you can execute the tool, for example see the tool command menu, do this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# How to show MasterParser menu&#xA;PS C:\Users\user\Desktop\MasterParser-main&amp;gt; .\MasterParser.ps1 -O Menu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;To run the tool, put all your /var/log/* logs in to the 01-Logs folder, and execute the tool like this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# How to run MasterParser&#xA;PS C:\Users\user\Desktop\MasterParser-main&amp;gt; .\MasterParser.ps1 -O Start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;That&#39;s it, enjoy the tool!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How To Use - Video Guide&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/YosfanEilay/MasterParser/assets/132997318/d26b4b3f-7816-42c3-be7f-7ee3946a2c70&#34;&gt;https://github.com/YosfanEilay/MasterParser/assets/132997318/d26b4b3f-7816-42c3-be7f-7ee3946a2c70&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Top MasterParser Social Media Posts&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Social Media Posts&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1. &lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:7144214785243492352/&#34;&gt;First Tool Post&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2. &lt;a href=&#34;https://www.helpnetsecurity.com/2024/01/08/authlogparser-open-source-analyzing-linux-authentication-logs/&#34;&gt;First Tool Story Publication By Help Net Security&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>NetSPI/MicroBurst</title>
    <updated>2024-02-11T01:51:21Z</updated>
    <id>tag:github.com,2024-02-11:/NetSPI/MicroBurst</id>
    <link href="https://github.com/NetSPI/MicroBurst" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of scripts for assessing Microsoft Azure security&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://notpayloads.blob.core.windows.net/images/Microburst_Github.png&#34; alt=&#34;MicroBurstLogo&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/NetSPI/MicroBurst/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-New%20BSD-blue.svg?sanitize=true&#34; alt=&#34;licence badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NetSPI/MicroBurst/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/NetSPI/MicroBurst.svg?sanitize=true&#34; alt=&#34;stars badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NetSPI/MicroBurst/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/NetSPI/MicroBurst.svg?sanitize=true&#34; alt=&#34;forks badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NetSPI/MicroBurst/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/NetSPI/MicroBurst.svg?sanitize=true&#34; alt=&#34;issues badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/kfosaaen.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;MicroBurst: A PowerShell Toolkit for Attacking Azure&lt;/h3&gt; &#xA;&lt;p&gt;MicroBurst includes functions and scripts that support Azure Services discovery, weak configuration auditing, and post exploitation actions such as credential dumping. It is intended to be used during penetration tests where Azure is in use.&lt;/p&gt; &#xA;&lt;h3&gt;Author, Contributors, and License&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Author: Karl Fosaaen (&lt;a href=&#34;https://twitter.com/kfosaaen&#34;&gt;@kfosaaen&lt;/a&gt;), NetSPI&lt;/li&gt; &#xA; &lt;li&gt;Contributors: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Scott Sutherland (&lt;a href=&#34;https://twitter.com/_nullbind&#34;&gt;@_nullbind&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Thomas Elling (&lt;a href=&#34;https://twitter.com/thomas_elling&#34;&gt;@thomaselling&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Jake Karnes (&lt;a href=&#34;https://twitter.com/jakekarnes42&#34;&gt;@jakekarnes42&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Josh Magri (&lt;a href=&#34;https://twitter.com/passthehashbrwn&#34;&gt;@passthehashbrwn&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;License: BSD 3-Clause&lt;/li&gt; &#xA; &lt;li&gt;Required Dependencies: Az, Azure, AzureRM, AzureAD, and MSOnline PowerShell Modules are all used in different scripts&lt;/li&gt; &#xA; &lt;li&gt;Dependencies Note: Originally written with the AzureRM PS modules, older scripts have been ported to their newer Az equivalents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Importing the Module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Import-Module .\MicroBurst.psm1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will import all applicable functions based off of the currently installed modules in your environment.&lt;/p&gt; &#xA;&lt;p&gt;If you want to simplify the trusting of the code files, use the following &#34;Unblock-File&#34; command to recursively trust each of the downloaded files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dir -Recurse .\MicroBurst-master | Unblock-File&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recommended Modules to install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/azure/new-azureps-module-az?view=azps-3.6.1&#34;&gt;Az&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/azuread/?view=azureadps-2.0&#34;&gt;AzureAd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/msonline/?view=azureadps-1.0&#34;&gt;MSOnline&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Related Blogs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/a-beginners-guide-to-gathering-azure-passwords/&#34;&gt;A Beginners Guide to Gathering Azure Passwords&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/enumerating-azure-services/&#34;&gt;Anonymously Enumerating Azure Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/anonymously-enumerating-azure-file-resources/&#34;&gt;Anonymously Enumerating Azure File Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/exporting-azure-runas-certificates/&#34;&gt;Get-AzurePasswords: Exporting Azure RunAs Certificates for Persistence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/azure-automation-accounts-key-stores&#34;&gt;Using Azure Automation Accounts to Access Key Vaults&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/running-powershell-scripts-on-azure-vms&#34;&gt;Running PowerShell on Azure VMs at Scale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/&#34;&gt;Maintaining Azure Persistence via Automation Accounts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/decrypting-azure-vm-extension-settings-with-get-azurevmextensionsettings/&#34;&gt;Decrypting Azure VM Extension Settings with Get-AzureVMExtensionSettings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/attacking-azure-with-custom-script-extensions/&#34;&gt;Attacking Azure with Custom Script Extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/lateral-movement-azure-app-services/&#34;&gt;Lateral Movement in Azure App Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/encrypting-password-data-in-get-azpasswords/&#34;&gt;Get-AzPasswords: Encrypting Automation Password Data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netspi.com/azure-privilege-escalation-using-managed-identities/&#34;&gt;Azure Privilege Escalation Using Managed Identities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.netspi.com/blog/technical/cloud-penetration-testing/azure-persistence-with-desired-state-configurations/&#34;&gt;Azure Persistence with Desired State Configurations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.netspi.com/blog/technical/cloud-penetration-testing/extract-credentials-from-azure-kubernetes-service/&#34;&gt;How To Extract Credentials from Azure Kubernetes Service (AKS)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Presentations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/CUTwkuiRgqg&#34;&gt;Extracting all the Azure Passwords - DEF CON 29 - Cloud Village&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://notpayloads.blob.core.windows.net/slides/ExtractingalltheAzurePasswords.pdf&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=EYtw-XPml0w&#34;&gt;Adventures in Azure Privilege Escalation - DerbyCon 9&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://notpayloads.blob.core.windows.net/slides/Azure-PrivEsc-DerbyCon9.pdf&#34;&gt;DerbyCon 9 (2019) Slides&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=IdORwgxDpkw&#34;&gt;Attacking Azure Environments with PowerShell - DerbyCon 8&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/kfosaaen/derbycon-8-attacking-azure-environments-with-powershell&#34;&gt;DerbyCon 8 (2018) Slides&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/kfosaaen/bsides-portland-attacking-azure-environments-with-powershell&#34;&gt;BSidesPDX (2018) Slides&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wiki Information&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/NetSPI/MicroBurst/wiki&#34;&gt;MicroBurst Wiki&lt;/a&gt; for more information on the usage of the toolkit and the available functions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>x0xr00t/Automated-MUlti-UAC-Bypass</title>
    <updated>2024-02-11T01:51:21Z</updated>
    <id>tag:github.com,2024-02-11:/x0xr00t/Automated-MUlti-UAC-Bypass</id>
    <link href="https://github.com/x0xr00t/Automated-MUlti-UAC-Bypass" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automated Multi UAC BYPASS for win10|win11|ws2019|ws2022&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Automated Multi UAC bypass&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automated os version selector to run UAC based on OS versions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Affected OS Versions&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;win 10&lt;/li&gt; &#xA; &lt;li&gt;win 11&lt;/li&gt; &#xA; &lt;li&gt;win server 2019&lt;/li&gt; &#xA; &lt;li&gt;win server 2022&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;windows 10 versions support&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10 Home&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 Pro&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 Education&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 Enterprise&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 Enterprise 2015 LTSB&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 Enterprise LTSC 2019&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 Enterprise LTSC 2021&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 Mobile and Mobile Enterprise&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 IoT Core&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 Iot Entreprise LTSC 2021&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;windows 11 version support&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 11 Home&lt;/li&gt; &#xA; &lt;li&gt;windows 11 team&lt;/li&gt; &#xA; &lt;li&gt;Windows 11 Pro&lt;/li&gt; &#xA; &lt;li&gt;Windows 11 Education&lt;/li&gt; &#xA; &lt;li&gt;Windows 11 Enterprise&lt;/li&gt; &#xA; &lt;li&gt;Windows 11 Pro Education&lt;/li&gt; &#xA; &lt;li&gt;Windows 11 Pro for Workstations&lt;/li&gt; &#xA; &lt;li&gt;Windows 11 Mixed Reality&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Windows Server 2019 Support&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows Server 2019 Datacenter evolution&lt;/li&gt; &#xA; &lt;li&gt;Windows Server 2019 Standard&lt;/li&gt; &#xA; &lt;li&gt;Windows Server 2019 Datacenter&lt;/li&gt; &#xA; &lt;li&gt;Windows Server 2019 Essentials&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Windows Server 2022 Support&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows Server 2022 Datacenter Evolution&lt;/li&gt; &#xA; &lt;li&gt;Windows Server 2022 Datacenter&lt;/li&gt; &#xA; &lt;li&gt;Windows Server 2022 Standard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Version not supported ??&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make a ticket and list the windows version with the ticket, it will help me to work out a fix faster.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Compile DLL&lt;/h1&gt; &#xA;&lt;p&gt;You can do it with the .ps1 or manual wit these one liners.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;output to working dir &lt;code&gt;Add-Type -TypeDefinition ([IO.File]::ReadAllText(&#34;$pwd\sl0puacb.cs&#34;)) -ReferencedAssemblies &#34;System.Windows.Forms&#34; -OutputAssembly &#34;sl0p.dll&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;output to system 32 &lt;code&gt;Add-Type -TypeDefinition ([IO.File]::ReadAllText(&#34;$pwd\sl0puacb.cs&#34;)) -ReferencedAssemblies &#34;System.Windows.Forms&#34; -OutputAssembly &#34;C:\Windows \system32\sl0p.dll&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Set-ExecutionPolicy -ExecutionPolicy {Unrestricted or Bypass} -Scope CurrentUser&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Or use one of the bypasses like &lt;code&gt;type file.ps1 | poweshell.exe -no-profile&lt;/code&gt; or what ever suites&lt;/li&gt; &#xA; &lt;li&gt;Add a automation process to disable tamper once uac been invoked (this can be done!!)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup 23h2&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fetch the location of powershell.exe for either v2 or v7.&lt;/li&gt; &#xA; &lt;li&gt;add a variable or make it auto check the exec location of powershell.exe&lt;/li&gt; &#xA; &lt;li&gt;add that dir to Start-Process {location}powershell.exe -Verb RunAs -ArgumentList (&#39;-noprofile -noexit -file &#34;{0}&#34; -elevated&#39; -f ($myinvocation.MyCommand.Definition))&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Set-ExecutionPolicy -ExecutionPolicy {Unrestricted or Bypass} -Scope CurrentUser&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Or use one of the bypasses like &lt;code&gt;type file.ps1 | poweshell.exe -no-profile&lt;/code&gt; or what ever suites&lt;/li&gt; &#xA; &lt;li&gt;Add a automation process to disable tamper once uac been invoked (this can be done!!)&lt;/li&gt; &#xA; &lt;li&gt;run the ps1 file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download these files from either this repo directly if machine has inet capabilities. (Or download these files and serve them with python :D)&lt;/li&gt; &#xA; &lt;li&gt;Get the files on the system&lt;/li&gt; &#xA; &lt;li&gt;cd to dir&lt;/li&gt; &#xA; &lt;li&gt;./{File}.ps1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Change log&lt;/h1&gt; &#xA;&lt;p&gt;v1.5.8-beta rolled out&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Changed main file &lt;code&gt;.ps1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;code&gt;sl0p.dll&lt;/code&gt; &amp;lt;&amp;lt; Generated from the new .cs (old files in backup folder, including old .cs and old dll).&lt;/li&gt; &#xA; &lt;li&gt;Added xor Encoding&lt;/li&gt; &#xA; &lt;li&gt;Added xor Decoding&lt;/li&gt; &#xA; &lt;li&gt;Added Obfuscate data&lt;/li&gt; &#xA; &lt;li&gt;Added Debfuscate&lt;/li&gt; &#xA; &lt;li&gt;Added Clear Event Logs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;main file change&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.ps1 file been re-dev by &lt;code&gt;keytrap-x86&lt;/code&gt; Thanks sir, Tips hat.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Issues&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Feel free to make issue ticket, if sum is not working, or support blocks missing.&lt;/li&gt; &#xA; &lt;li&gt;To assist me when creating a ticket, list ur windows version pulled with powershell and list it with the ticket.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Opened the discussion section for idea&#39;s to improve.&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Feel free to bring idea&#39;s for improvements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Legal Disclaimer:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;I am not responsible for U using it on non authorized systems, make sure u use it on systems u own or are authorized on.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;x0xr00t&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>