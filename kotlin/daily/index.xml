<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-01T01:32:36Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MMRLApp/MMRL</title>
    <updated>2025-02-01T01:32:36Z</updated>
    <id>tag:github.com,2025-02-01:/MMRLApp/MMRL</id>
    <link href="https://github.com/MMRLApp/MMRL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MMRL is an Android app that helps manage your own modules repository.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MMRL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/MMRLApp/MMRL?label=Latest%20Release&#34; alt=&#34;GitHub Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fplay.cuzi.workers.dev%2Fplay%3Fi%3Dcom.dergoogler.mmrl%26l%3DInstalls%26m%3D%24shortinstalls&amp;amp;label=Google%20Play&amp;amp;color=red&#34; alt=&#34;Google Play Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/MMRLApp/MMRL/total?label=GitHub%20Downloads&#34; alt=&#34;GitHub Downloads (all assets, all releases)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;MMRL is an Android app that helps manage your own modules repository.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Comprehensive Root Manager Support&lt;/strong&gt;: Full compatibility with Magisk, KernelSU, and APatch for diverse root management options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WebUI with Advanced Features&lt;/strong&gt;: Includes &lt;a href=&#34;https://developer.android.com/develop/ui/compose/layouts/insets&#34;&gt;Edge-to-Edge&lt;/a&gt; support and dynamic app themes for a seamless user experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bulk Installation Support&lt;/strong&gt;: Effortlessly install modules in bulk, both online and locally.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Module Dependency Management&lt;/strong&gt;: Simplifies module installation for end-users by automatically handling module dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Magisk Modules Repositories&lt;/strong&gt;: A community-driven platform that allows anyone to contribute and access Magisk modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Transparency with Blacklist&lt;/strong&gt;: Clear visibility into which modules or actions are restricted, ensuring users can make informed decisions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable Module Pages&lt;/strong&gt;: Personalize module pages with categories, screenshots, icons, covers, and other content for a tailored presentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transparency of Included Files&lt;/strong&gt;: Detailed breakdown of all files within modules, including APKs, service files, and more, for full user awareness.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Analytics Dashboard&lt;/strong&gt;: Display module-related analytics on the homepage, offering valuable insights into module usage and trends.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MMRLApp/MMRL/master/fastlane/metadata/android/en-US/images/phoneScreenshots/1.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MMRLApp/MMRL/master/fastlane/metadata/android/en-US/images/phoneScreenshots/2.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MMRLApp/MMRL/master/fastlane/metadata/android/en-US/images/phoneScreenshots/3.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MMRLApp/MMRL/master/fastlane/metadata/android/en-US/images/phoneScreenshots/4.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MMRLApp/MMRL/master/fastlane/metadata/android/en-US/images/phoneScreenshots/5.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MMRLApp/MMRL/master/fastlane/metadata/android/en-US/images/phoneScreenshots/6.png&#34; width=&#34;32%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Supported Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android 8.0 ~ 14&lt;/li&gt; &#xA; &lt;li&gt;Magisk 24.0 ~ latest&lt;/li&gt; &#xA; &lt;li&gt;KernelSU 0.5.1 ~ latest&lt;/li&gt; &#xA; &lt;li&gt;APatch 10253 ~ latest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Translate&lt;/h2&gt; &#xA;&lt;p&gt;Get involved with MMRL by translating it into your language!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hosted.weblate.org/engage/mmrl/&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widget/mmrl/multi-auto.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Modules Repository&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MMRLApp/MMRL-Util&#34;&gt;MMRLApp/MMRL-Util&lt;/a&gt;: A command line interface for building modules repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tabler/tabler-icons.git&#34;&gt;tabler/tabler-icons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MRepoApp/MRepo&#34;&gt;MRepoApp/MRepo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>openai/openai-java</title>
    <updated>2025-02-01T01:32:36Z</updated>
    <id>tag:github.com,2025-02-01:/openai/openai-java</id>
    <link href="https://github.com/openai/openai-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Java library for the OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI Java API Library&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; The OpenAI Java API Library is currently in &lt;em&gt;beta&lt;/em&gt;.&lt;/p&gt; &#xA; &lt;p&gt;There may be minor breaking changes.&lt;/p&gt; &#xA; &lt;p&gt;Have thoughts or feedback? &lt;a href=&#34;https://github.com/openai/openai-java/issues/new&#34;&gt;File an issue&lt;/a&gt; or comment on &lt;a href=&#34;https://community.openai.com/t/your-feedback-requested-java-sdk/1061029&#34;&gt;this thread&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- x-release-please-start-version --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://central.sonatype.com/artifact/com.openai/openai-java/0.20.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.openai/openai-java&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/com.openai/openai-java/0.20.0&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/com.openai/openai-java/0.20.0/javadoc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- x-release-please-end --&gt; &#xA;&lt;p&gt;The OpenAI Java SDK provides convenient access to the OpenAI REST API from applications written in Java.&lt;/p&gt; &#xA;&lt;p&gt;The REST API documentation can be found on &lt;a href=&#34;https://platform.openai.com/docs&#34;&gt;platform.openai.com&lt;/a&gt;. Javadocs are also available on &lt;a href=&#34;https://javadoc.io/doc/com.openai/openai-java/0.0.1&#34;&gt;javadoc.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;!-- x-release-please-start-version --&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;com.openai:openai-java:0.20.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maven&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.openai&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;openai-java&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.20.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- x-release-please-end --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This library requires Java 8 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-java/main/openai-java-example/src/main/java/com/openai/example&#34;&gt;&lt;code&gt;openai-java-example&lt;/code&gt;&lt;/a&gt; directory for complete and runnable examples.&lt;/p&gt; &#xA;&lt;h3&gt;Configure the client&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;OpenAIOkHttpClient.builder()&lt;/code&gt; to configure the client. At a minimum you need to set &lt;code&gt;.apiKey()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;&#xA;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;    .apiKey(&#34;My API Key&#34;)&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternately, set the environment with &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;, &lt;code&gt;OPENAI_ORG_ID&lt;/code&gt; or &lt;code&gt;OPENAI_PROJECT_ID&lt;/code&gt;, and use &lt;code&gt;OpenAIOkHttpClient.fromEnv()&lt;/code&gt; to read from the environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;&#xA;OpenAIClient client = OpenAIOkHttpClient.fromEnv();&#xA;&#xA;// Note: you can also call fromEnv() from the client builder, for example if you need to set additional properties&#xA;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;    .fromEnv()&#xA;    // ... set properties on the builder&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Environment variable&lt;/th&gt; &#xA;   &lt;th&gt;Required&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;apiKey&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;organization&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_ORG_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;project&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_PROJECT_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;—&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Read the documentation for more configuration options.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Example: creating a resource&lt;/h3&gt; &#xA;&lt;p&gt;To create a new chat completion, first use the &lt;code&gt;ChatCompletionCreateParams&lt;/code&gt; builder to specify attributes, then pass that to the &lt;code&gt;create&lt;/code&gt; method of the &lt;code&gt;completions&lt;/code&gt; service.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.models.ChatCompletion;&#xA;import com.openai.models.ChatCompletionCreateParams;&#xA;import com.openai.models.ChatModel;&#xA;&#xA;ChatCompletionCreateParams params = ChatCompletionCreateParams.builder()&#xA;    .addUserMessage(&#34;Say this is a test&#34;)&#xA;    .model(ChatModel.O3_MINI)&#xA;    .build();&#xA;ChatCompletion chatCompletion = client.chat().completions().create(params);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: listing resources&lt;/h3&gt; &#xA;&lt;p&gt;The OpenAI API provides a &lt;code&gt;list&lt;/code&gt; method to get a paginated list of jobs. You can retrieve the first page by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.models.FineTuningJob;&#xA;import com.openai.models.FineTuningJobListPage;&#xA;&#xA;FineTuningJobListPage page = client.fineTuning().jobs().list();&#xA;for (FineTuningJob job : page.data()) {&#xA;    System.out.println(job);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;FineTuningJobListParams&lt;/code&gt; builder to set parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.models.FineTuningJobListPage;&#xA;import com.openai.models.FineTuningJobListParams;&#xA;&#xA;FineTuningJobListParams params = FineTuningJobListParams.builder()&#xA;    .after(&#34;after&#34;)&#xA;    .limit(20L)&#xA;    .build();&#xA;FineTuningJobListPage page1 = client.fineTuning().jobs().list(params);&#xA;&#xA;// Using the `from` method of the builder you can reuse previous params values:&#xA;FineTuningJobListPage page2 = client.fineTuning().jobs().list(FineTuningJobListParams.builder()&#xA;    .from(params)&#xA;    .build());&#xA;&#xA;// Or easily get params for the next page by using the helper `getNextPageParams`:&#xA;FineTuningJobListPage page3 = client.fineTuning().jobs().list(params.getNextPageParams(page2));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-java/main/#pagination&#34;&gt;Pagination&lt;/a&gt; below for more information on transparently working with lists of objects without worrying about fetching each page.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Requests&lt;/h2&gt; &#xA;&lt;h3&gt;Parameters and bodies&lt;/h3&gt; &#xA;&lt;p&gt;To make a request to the OpenAI API, you generally build an instance of the appropriate &lt;code&gt;Params&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-java/main/#undocumented-request-params&#34;&gt;Undocumented request params&lt;/a&gt; for how to send arbitrary parameters.&lt;/p&gt; &#xA;&lt;h2&gt;Responses&lt;/h2&gt; &#xA;&lt;h3&gt;Response validation&lt;/h3&gt; &#xA;&lt;p&gt;When receiving a response, the OpenAI Java SDK will deserialize it into instances of the typed model classes. In rare cases, the API may return a response property that doesn&#39;t match the expected Java type. If you directly access the mistaken property, the SDK will throw an unchecked &lt;code&gt;OpenAIInvalidDataException&lt;/code&gt; at runtime. If you would prefer to check in advance that that response is completely well-typed, call &lt;code&gt;.validate()&lt;/code&gt; on the returned model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.models.ChatCompletion;&#xA;&#xA;ChatCompletion chatCompletion = client.chat().completions().create().validate();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Response properties as JSON&lt;/h3&gt; &#xA;&lt;p&gt;In rare cases, you may want to access the underlying JSON value for a response property rather than using the typed version provided by this SDK. Each model property has a corresponding JSON version, with an underscore before the method name, which returns a &lt;code&gt;JsonField&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.core.JsonField;&#xA;import java.util.Optional;&#xA;&#xA;JsonField field = responseObj._field();&#xA;&#xA;if (field.isMissing()) {&#xA;  // Value was not specified in the JSON response&#xA;} else if (field.isNull()) {&#xA;  // Value was provided as a literal null&#xA;} else {&#xA;  // See if value was provided as a string&#xA;  Optional&amp;lt;String&amp;gt; jsonString = field.asString();&#xA;&#xA;  // If the value given by the API did not match the shape that the SDK expects&#xA;  // you can deserialise into a custom type&#xA;  MyClass myObj = responseObj._field().asUnknown().orElseThrow().convert(MyClass.class);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Additional model properties&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes, the server response may include additional properties that are not yet available in this library&#39;s types. You can access them using the model&#39;s &lt;code&gt;_additionalProperties&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.core.JsonValue;&#xA;&#xA;JsonValue secret = errorObject._additionalProperties().get(&#34;secret_field&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Pagination&lt;/h2&gt; &#xA;&lt;p&gt;For methods that return a paginated list of results, this library provides convenient ways access the results either one page at a time, or item-by-item across all pages.&lt;/p&gt; &#xA;&lt;h3&gt;Auto-pagination&lt;/h3&gt; &#xA;&lt;p&gt;To iterate through all results across all pages, you can use &lt;code&gt;autoPager&lt;/code&gt;, which automatically handles fetching more pages for you:&lt;/p&gt; &#xA;&lt;h3&gt;Synchronous&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.models.FineTuningJob;&#xA;import com.openai.models.FineTuningJobListPage;&#xA;&#xA;// As an Iterable:&#xA;FineTuningJobListPage page = client.fineTuning().jobs().list(params);&#xA;for (FineTuningJob job : page.autoPager()) {&#xA;    System.out.println(job);&#xA;};&#xA;&#xA;// As a Stream:&#xA;client.fineTuning().jobs().list(params).autoPager().stream()&#xA;    .limit(50)&#xA;    .forEach(job -&amp;gt; System.out.println(job));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Asynchronous&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Using forEach, which returns CompletableFuture&amp;lt;Void&amp;gt;:&#xA;asyncClient.fineTuning().jobs().list(params).autoPager()&#xA;    .forEach(job -&amp;gt; System.out.println(job), executor);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual pagination&lt;/h3&gt; &#xA;&lt;p&gt;If none of the above helpers meet your needs, you can also manually request pages one-by-one. A page of results has a &lt;code&gt;data()&lt;/code&gt; method to fetch the list of objects, as well as top-level &lt;code&gt;response&lt;/code&gt; and other methods to fetch top-level data about the page. It also has methods &lt;code&gt;hasNextPage&lt;/code&gt;, &lt;code&gt;getNextPage&lt;/code&gt;, and &lt;code&gt;getNextPageParams&lt;/code&gt; methods to help with pagination.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.models.FineTuningJob;&#xA;import com.openai.models.FineTuningJobListPage;&#xA;&#xA;FineTuningJobListPage page = client.fineTuning().jobs().list(params);&#xA;while (page != null) {&#xA;    for (FineTuningJob job : page.data()) {&#xA;        System.out.println(job);&#xA;    }&#xA;&#xA;    page = page.getNextPage().orElse(null);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Error handling&lt;/h2&gt; &#xA;&lt;p&gt;This library throws exceptions in a single hierarchy for easy handling:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;OpenAIException&lt;/code&gt;&lt;/strong&gt; - Base exception for all exceptions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;OpenAIServiceException&lt;/code&gt;&lt;/strong&gt; - HTTP errors with a well-formed response body we were able to parse. The exception message and the &lt;code&gt;.debuggingRequestId()&lt;/code&gt; will be set by the server.&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;400&lt;/th&gt; &#xA;     &lt;th&gt;BadRequestException&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;401&lt;/td&gt; &#xA;     &lt;td&gt;AuthenticationException&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;403&lt;/td&gt; &#xA;     &lt;td&gt;PermissionDeniedException&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;404&lt;/td&gt; &#xA;     &lt;td&gt;NotFoundException&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;422&lt;/td&gt; &#xA;     &lt;td&gt;UnprocessableEntityException&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;429&lt;/td&gt; &#xA;     &lt;td&gt;RateLimitException&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;5xx&lt;/td&gt; &#xA;     &lt;td&gt;InternalServerException&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;others&lt;/td&gt; &#xA;     &lt;td&gt;UnexpectedStatusCodeException&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;OpenAIIoException&lt;/code&gt;&lt;/strong&gt; - I/O networking errors&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;OpenAIInvalidDataException&lt;/code&gt;&lt;/strong&gt; - any other exceptions on the client side, e.g.:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We failed to serialize the request body&lt;/li&gt; &#xA;   &lt;li&gt;We failed to parse the response body (has access to response code and body)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Microsoft Azure OpenAI&lt;/h2&gt; &#xA;&lt;p&gt;To use this library with &lt;a href=&#34;https://learn.microsoft.com/azure/ai-services/openai/overview&#34;&gt;Azure OpenAI&lt;/a&gt;, use the same OpenAI client builder but with the Azure-specific configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;        // Gets the API key from the `AZURE_OPENAI_KEY` environment variable&#xA;        .fromEnv()&#xA;        // Set the Azure Entra ID&#xA;        .credential(BearerTokenCredential.create(AuthenticationUtil.getBearerTokenSupplier(&#xA;                new DefaultAzureCredentialBuilder().build(), &#34;https://cognitiveservices.azure.com/.default&#34;)))&#xA;        .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the complete Azure OpenAI example in the &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-java/main/openai-java-example/src/main/java/com/openai/example/AzureEntraIdExample.java&#34;&gt;&lt;code&gt;openai-java-example&lt;/code&gt;&lt;/a&gt; directory. The other examples in the directory also work with Azure as long as the client is configured to use it.&lt;/p&gt; &#xA;&lt;h2&gt;Network options&lt;/h2&gt; &#xA;&lt;h3&gt;Retries&lt;/h3&gt; &#xA;&lt;p&gt;Requests that experience certain errors are automatically retried 2 times by default, with a short exponential backoff. Connection errors (for example, due to a network connectivity problem), 408 Request Timeout, 409 Conflict, 429 Rate Limit, and &amp;gt;=500 Internal errors will all be retried by default. You can provide a &lt;code&gt;maxRetries&lt;/code&gt; on the client builder to configure this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;&#xA;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;    .fromEnv()&#xA;    .maxRetries(4)&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Timeouts&lt;/h3&gt; &#xA;&lt;p&gt;Requests time out after 10 minutes by default. You can configure this on the client builder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;import java.time.Duration;&#xA;&#xA;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;    .fromEnv()&#xA;    .timeout(Duration.ofSeconds(30))&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Proxies&lt;/h3&gt; &#xA;&lt;p&gt;Requests can be routed through a proxy. You can configure this on the client builder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;import java.net.InetSocketAddress;&#xA;import java.net.Proxy;&#xA;&#xA;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;    .fromEnv()&#xA;    .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(&#34;example.com&#34;, 8080)))&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Making custom/undocumented requests&lt;/h2&gt; &#xA;&lt;p&gt;This library is typed for convenient access to the documented API. If you need to access undocumented params or response properties, the library can still be used.&lt;/p&gt; &#xA;&lt;h3&gt;Undocumented request params&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-java/main/#example-creating-a-resource&#34;&gt;Example: creating a resource&lt;/a&gt; above, we used the &lt;code&gt;ChatCompletionCreateParams.builder()&lt;/code&gt; to pass to the &lt;code&gt;create&lt;/code&gt; method of the &lt;code&gt;completions&lt;/code&gt; service.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes, the API may support other properties that are not yet supported in the Java SDK types. In that case, you can attach them using raw setters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.core.JsonValue;&#xA;import com.openai.models.ChatCompletionCreateParams;&#xA;&#xA;ChatCompletionCreateParams params = ChatCompletionCreateParams.builder()&#xA;    .putAdditionalHeader(&#34;Secret-Header&#34;, &#34;42&#34;)&#xA;    .putAdditionalQueryParam(&#34;secret_query_param&#34;, &#34;42&#34;)&#xA;    .putAdditionalBodyProperty(&#34;secretProperty&#34;, JsonValue.from(&#34;42&#34;))&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;putAdditionalProperty&lt;/code&gt; method on nested headers, query params, or body objects.&lt;/p&gt; &#xA;&lt;h3&gt;Undocumented response properties&lt;/h3&gt; &#xA;&lt;p&gt;To access undocumented response properties, you can use &lt;code&gt;res._additionalProperties()&lt;/code&gt; on a response object to get a map of untyped fields of type &lt;code&gt;Map&amp;lt;String, JsonValue&amp;gt;&lt;/code&gt;. You can then access fields like &lt;code&gt;res._additionalProperties().get(&#34;secret_prop&#34;).asString()&lt;/code&gt; or use other helpers defined on the &lt;code&gt;JsonValue&lt;/code&gt; class to extract it to a desired type.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;We use the standard &lt;a href=&#34;https://github.com/square/okhttp/tree/master/okhttp-logging-interceptor&#34;&gt;OkHttp logging interceptor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can enable logging by setting the environment variable &lt;code&gt;OPENAI_LOG&lt;/code&gt; to &lt;code&gt;info&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ export OPENAI_LOG=info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to &lt;code&gt;debug&lt;/code&gt; for more verbose logging.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ export OPENAI_LOG=debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Semantic versioning&lt;/h2&gt; &#xA;&lt;p&gt;This package generally follows &lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;SemVer&lt;/a&gt; conventions, though certain backwards-incompatible changes may be released as minor versions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Changes to library internals which are technically public but not intended or documented for external use. &lt;em&gt;(Please open a GitHub issue to let us know if you are relying on such internals.)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Changes that we do not expect to impact the vast majority of users in practice.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.&lt;/p&gt; &#xA;&lt;p&gt;We are keen for your feedback; please open an &lt;a href=&#34;https://www.github.com/openai/openai-java/issues&#34;&gt;issue&lt;/a&gt; with questions, bugs, or suggestions.&lt;/p&gt;</summary>
  </entry>
</feed>