<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-11T02:34:19Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>skydoves/Orbital</title>
    <updated>2023-11-11T02:34:19Z</updated>
    <id>tag:github.com,2023-11-11:/skydoves/Orbital</id>
    <link href="https://github.com/skydoves/Orbital" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü™ê Jetpack Compose Multiplatform library that allows you to implement dynamic transition animations such as shared element transitions.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Orbital&lt;/h1&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://devlibrary.withgoogle.com/products/android/repos/skydoves-Orbitary&#34;&gt;&lt;img alt=&#34;Google&#34; src=&#34;https://skydoves.github.io/badges/google-devlib.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves/Orbital/actions/workflows/android.yml&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/skydoves/Orbital/actions/workflows/android.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://androidweekly.net/issues/issue-525&#34;&gt;&lt;img alt=&#34;Android Weekly&#34; src=&#34;https://skydoves.github.io/badges/android-weekly.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://us12.campaign-archive.com/?u=f39692e245b94f7fb693b6d82&amp;amp;id=68710ad80a&#34;&gt;&lt;img alt=&#34;Kotlin Weekly&#34; src=&#34;https://skydoves.github.io/badges/kotlin-weekly.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves&#34;&gt;&lt;img alt=&#34;Profile&#34; src=&#34;https://skydoves.github.io/badges/skydoves.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ü™ê Jetpack Compose animation library that allows you to implement animations such as shared element transition. This library support Kotlin Multiplatform (Android, iOS, Desktop, macOS, and js) &lt;/p&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/skydoves/Orbital/main/previews/preview0.gif&#34; width=&#34;270&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/skydoves/Orbital/main/previews/preview1.gif&#34; width=&#34;270&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/skydoves/Orbital/main/previews/preview3.gif&#34; width=&#34;270&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22com.github.skydoves%22%20AND%20a:%22orbital%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/orbital.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;p&gt;Add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation(&#34;com.github.skydoves:orbital:0.3.2&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is an experimental library that demonstrates various animations with Jetpack Compose. Please make sure that your project uses Jetpack Compose &lt;code&gt;1.5.4&lt;/code&gt;, Compose Compiler &lt;code&gt;1.5.4&lt;/code&gt;, and Kotlin &lt;code&gt;1.9.20&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For Kotlin Multiplatform, add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle.kts&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;sourceSets {&#xA;    val commonMain by getting {&#xA;        dependencies {&#xA;            implementation(&#34;com.github.skydoves:orbital:$version&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can implement three kinds of animations with Orbital: &lt;strong&gt;Movement&lt;/strong&gt;, &lt;strong&gt;Transformation&lt;/strong&gt;, and &lt;strong&gt;Shared Element Transition&lt;/strong&gt;. Basically, you can run animation with &lt;code&gt;Orbital&lt;/code&gt; Composable function, which provides &lt;code&gt;OrbitalScope&lt;/code&gt; that allows you to create animations.&lt;/p&gt; &#xA;&lt;h3&gt;Transformation&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/skydoves/Orbital/main/previews/preview1.gif&#34; width=&#34;300px&#34; align=&#34;center&#34;&gt; &#xA;&lt;p&gt;The example below shows how to implement resizing animation with the &lt;code&gt;animateTransformation&lt;/code&gt; extension of the &lt;code&gt;OrbitalScope&lt;/code&gt;. The &lt;code&gt;rememberContentWithOrbitalScope&lt;/code&gt; allows you to create custom animations such as &lt;code&gt;animateTransformation&lt;/code&gt; on the &lt;code&gt;OrbitalScope&lt;/code&gt;. You can apply the &lt;code&gt;animateTransformation&lt;/code&gt; animation to specific Composables and customize its &lt;code&gt;AnimationSpec&lt;/code&gt; as seen the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;  val transformationSpec = SpringSpec&amp;lt;IntSize&amp;gt;(&#xA;    dampingRatio = Spring.DampingRatioMediumBouncy,&#xA;    stiffness = 200f&#xA;  )&#xA;&#xA;  var isTransformed by rememberSaveable { mutableStateOf(false) }&#xA;  val poster = rememberContentWithOrbitalScope {&#xA;    GlideImage(&#xA;      modifier = if (isTransformed) {&#xA;        Modifier.size(300.dp, 620.dp)&#xA;      } else {&#xA;        Modifier.size(100.dp, 220.dp)&#xA;      }.animateTransformation(this, transformationSpec),&#xA;      imageModel = ItemUtils.urls[0],&#xA;      contentScale = ContentScale.Fit&#xA;    )&#xA;  }&#xA;&#xA;  Orbital(&#xA;    modifier = Modifier&#xA;      .clickable { isTransformed = !isTransformed }&#xA;  ) {&#xA;    Column(&#xA;      Modifier.fillMaxSize(),&#xA;      horizontalAlignment = Alignment.CenterHorizontally,&#xA;      verticalArrangement = Arrangement.Center&#xA;    ) {&#xA;      poster()&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Movement&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/skydoves/Orbital/main/previews/preview2.gif&#34; width=&#34;300px&#34; align=&#34;center&#34;&gt; &#xA;&lt;p&gt;The example below shows how to implement movement animation with the &lt;code&gt;animateMovement&lt;/code&gt; extension of the &lt;code&gt;OrbitalScope&lt;/code&gt;. The &lt;code&gt;rememberContentWithOrbitalScope&lt;/code&gt; allows you to create custom animations such as &lt;code&gt;animateMovement&lt;/code&gt; on the &lt;code&gt;OrbitalScope&lt;/code&gt;. You can apply the &lt;code&gt;animateMovement&lt;/code&gt; animation to specific Composables and customize its &lt;code&gt;AnimationSpec&lt;/code&gt; as seen the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;  val movementSpec = SpringSpec&amp;lt;IntOffset&amp;gt;(&#xA;    dampingRatio = Spring.DampingRatioMediumBouncy,&#xA;    stiffness = 200f&#xA;  )&#xA;  &#xA;  var isTransformed by rememberSaveable { mutableStateOf(false) }&#xA;  val poster = rememberContentWithOrbitalScope {&#xA;    GlideImage(&#xA;      modifier = if (isTransformed) {&#xA;        Modifier.size(360.dp, 620.dp)&#xA;      } else {&#xA;        Modifier.size(130.dp, 220.dp)&#xA;      }.animateMovement(this, movementSpec),&#xA;      imageModel = ItemUtils.urls[3],&#xA;      contentScale = ContentScale.Fit&#xA;    )&#xA;  }&#xA;&#xA;  Orbital(&#xA;    modifier = Modifier&#xA;      .clickable { isTransformed = !isTransformed }&#xA;  ) {&#xA;    if (isTransformed) {&#xA;      Column(&#xA;        Modifier.fillMaxSize(),&#xA;        horizontalAlignment = Alignment.CenterHorizontally,&#xA;        verticalArrangement = Arrangement.Center&#xA;      ) {&#xA;        poster()&#xA;      }&#xA;    } else {&#xA;      Column(&#xA;        Modifier&#xA;          .fillMaxSize()&#xA;          .padding(20.dp),&#xA;        horizontalAlignment = Alignment.End,&#xA;        verticalArrangement = Arrangement.Bottom&#xA;      ) {&#xA;        poster()&#xA;      }&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shared Element Transition&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/skydoves/Orbital/main/previews/preview3.gif&#34; width=&#34;300px&#34; align=&#34;center&#34;&gt; &#xA;&lt;p&gt;The example below shows how to implement shared element transition with the &lt;code&gt;animateSharedElementTransition&lt;/code&gt; extension of the &lt;code&gt;OrbitalScope&lt;/code&gt;. The &lt;code&gt;rememberContentWithOrbitalScope&lt;/code&gt; allows you to create custom animations such as &lt;code&gt;animateSharedElementTransition&lt;/code&gt; on the &lt;code&gt;OrbitalScope&lt;/code&gt;. You can apply the &lt;code&gt;animateSharedElementTransition&lt;/code&gt; animation to specific Composables and customize its &lt;code&gt;AnimationSpec&lt;/code&gt;. Also, you can set the different &lt;code&gt;AnimationSpec&lt;/code&gt;s for the movement and transformation as seen the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;private fun OrbitalSharedElementTransitionExample() {&#xA;  var isTransformed by rememberSaveable { mutableStateOf(false) }&#xA;  val item = MockUtils.getMockPosters()[3]&#xA;  val poster = rememberContentWithOrbitalScope {&#xA;    GlideImage(&#xA;      modifier = if (isTransformed) {&#xA;        Modifier.fillMaxSize()&#xA;      } else {&#xA;        Modifier.size(130.dp, 220.dp)&#xA;      }.animateSharedElementTransition(&#xA;        this,&#xA;        SpringSpec(stiffness = 500f),&#xA;        SpringSpec(stiffness = 500f)&#xA;      ),&#xA;      imageModel = item.poster,&#xA;      contentScale = ContentScale.Fit&#xA;    )&#xA;  }&#xA;&#xA;  Orbital(&#xA;    modifier = Modifier&#xA;      .clickable { isTransformed = !isTransformed }&#xA;  ) {&#xA;    if (isTransformed) {&#xA;      PosterDetails(&#xA;        poster = item,&#xA;        sharedElementContent = { poster() },&#xA;        pressOnBack = {}&#xA;      )&#xA;    } else {&#xA;      Column(&#xA;        Modifier&#xA;          .fillMaxSize()&#xA;          .padding(20.dp),&#xA;        horizontalAlignment = Alignment.End,&#xA;        verticalArrangement = Arrangement.Bottom&#xA;      ) {&#xA;        poster()&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: LookaheadLayout is a very experimental API, so measuring complex Composables might throw exceptions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Shared Element Transition with Multiple Items&lt;/h3&gt; &#xA;&lt;p&gt;The example below shows how to implement shared element transition with multipe items. The basic concept of the usage is the same as the &lt;strong&gt;Shared Element Transition&lt;/strong&gt; example.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/skydoves/Orbital/main/previews/preview0.gif&#34; width=&#34;300px&#34; align=&#34;center&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;  var isTransformed by rememberSaveable { mutableStateOf(false) }&#xA;  val items = rememberContentWithOrbitalScope {&#xA;    ItemUtils.urls.forEach { url -&amp;gt;&#xA;      GlideImage(&#xA;        modifier = if (isTransformed) {&#xA;          Modifier.size(140.dp, 180.dp)&#xA;        } else {&#xA;          Modifier.size(100.dp, 220.dp)&#xA;        }&#xA;          .animateSharedElementTransition(movementSpec, transformationSpec)&#xA;          .padding(8.dp),&#xA;        imageModel = url,&#xA;        contentScale = ContentScale.Fit&#xA;      )&#xA;    }&#xA;  }&#xA;&#xA;  Orbital(&#xA;    modifier = Modifier&#xA;      .fillMaxSize()&#xA;      .clickable { isTransformed = !isTransformed },&#xA;    isTransformed = isTransformed,&#xA;    onStartContent = {&#xA;      Column(&#xA;        Modifier.fillMaxSize(),&#xA;        horizontalAlignment = Alignment.CenterHorizontally,&#xA;        verticalArrangement = Arrangement.Center&#xA;      ) {&#xA;        items()&#xA;      }&#xA;    },&#xA;    onTransformedContent = {&#xA;      Row(&#xA;        verticalAlignment = Alignment.CenterVertically&#xA;      ) { items() }&#xA;    }&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shared Element Transition With LazyList&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/skydoves/Orbital/main/previews/preview4.gif&#34; width=&#34;300px&#34; align=&#34;center&#34;&gt; &#xA;&lt;p&gt;The provided code example illustrates the implementation of shared element transformation (container transform) with a lazy list, such as &lt;code&gt;LazyColumn&lt;/code&gt; and &lt;code&gt;LazyRow&lt;/code&gt;. The &lt;code&gt;OrbitalScope&lt;/code&gt; function initiates a scope in which all layout scopes will be measured and pre-calculated for size and position across all child layouts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun OrbitalLazyColumnSample() {&#xA;  val mocks = MockUtils.getMockPosters()&#xA;&#xA;  Orbital {&#xA;    LazyColumn {&#xA;      items(mocks, key = { it.name }) { poster -&amp;gt;&#xA;        var expanded by rememberSaveable { mutableStateOf(false) }&#xA;        AnimatedVisibility(&#xA;          remember { MutableTransitionState(false) }&#xA;            .apply { targetState = true },&#xA;          enter = fadeIn(),&#xA;        ) {&#xA;          Orbital(modifier = Modifier&#xA;            .fillMaxWidth()&#xA;            .clickable {&#xA;              expanded = !expanded&#xA;            }&#xA;            .background(color = poster.color, shape = RoundedCornerShape(10.dp))) {&#xA;            val title = rememberMovableContentOf {&#xA;              Column(&#xA;                modifier = Modifier&#xA;                  .padding(10.dp)&#xA;                  .animateBounds(Modifier),&#xA;              ) {&#xA;                Text(&#xA;                  text = poster.name,&#xA;                  fontSize = 18.sp,&#xA;                  color = Color.Black,&#xA;                  fontWeight = FontWeight.Bold,&#xA;                )&#xA;&#xA;                Text(&#xA;                  text = poster.description,&#xA;                  color = Color.Gray,&#xA;                  fontSize = 12.sp,&#xA;                  maxLines = 3,&#xA;                  overflow = TextOverflow.Ellipsis,&#xA;                  fontWeight = FontWeight.Bold,&#xA;                )&#xA;              }&#xA;            }&#xA;            val image = rememberMovableContentOf {&#xA;              GlideImage(&#xA;                imageModel = { poster.poster },&#xA;                component = rememberImageComponent {&#xA;                  +CrossfadePlugin()&#xA;                },&#xA;                modifier = Modifier&#xA;                  .padding(10.dp)&#xA;                  .animateBounds(&#xA;                    if (expanded) {&#xA;                      Modifier.fillMaxWidth()&#xA;                    } else {&#xA;                      Modifier.size(80.dp)&#xA;                    },&#xA;                    spring(stiffness = Spring.StiffnessLow),&#xA;                  )&#xA;                  .clip(RoundedCornerShape(5.dp)),&#xA;                imageOptions = ImageOptions(requestSize = IntSize(600, 600)),&#xA;              )&#xA;            }&#xA;&#xA;            if (expanded) {&#xA;              Column {&#xA;                image()&#xA;                title()&#xA;              }&#xA;            } else {&#xA;              Row {&#xA;                image()&#xA;                title()&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should bear in mind these three aspects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Orbital&lt;/strong&gt;: The &lt;code&gt;Orbital&lt;/code&gt; function starts a scope, which measures and pre-calculates the layout size and position for all child layouts. Fundamentally, it initiates a reusable Compose node for the given content, which makes all magic things under the hood. You can utilize the &lt;code&gt;Orbital&lt;/code&gt; in nested ways based on your specific scenarios, as illustrated in the code above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rememberMovableContentOf&lt;/strong&gt;: Utilize this function to remember a movable Composable function, allowing it to be relocated within the Compose tree. All items intended for transformation should be pre-defined using this function, enabling you to display different content based on various situations. All content defined using &lt;code&gt;rememberMovableContentOf&lt;/code&gt; must be employed within the &lt;code&gt;Orbital&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;animateBounds&lt;/strong&gt;: This serves as the delegate of the &lt;code&gt;Modifier&lt;/code&gt; to compute distinct layout sizes based on various situations. It should be used in conjunction with the &lt;code&gt;rememberMovableContentOf&lt;/code&gt; function.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Find this repository useful? &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Support it by joining &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves/Orbital/stargazers&#34;&gt;stargazers&lt;/a&gt;&lt;/strong&gt; for this repository. &lt;span&gt;‚≠ê&lt;/span&gt; &lt;br&gt; Also, &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves&#34;&gt;follow me&lt;/a&gt;&lt;/strong&gt; on GitHub for my next creations! ü§©&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;Designed and developed by 2022 skydoves (Jaewoong Eum)&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>nise-nabe/gradle-helloworld</title>
    <updated>2023-11-11T02:34:19Z</updated>
    <id>tag:github.com,2023-11-11:/nise-nabe/gradle-helloworld</id>
    <link href="https://github.com/nise-nabe/gradle-helloworld" rel="alternate"></link>
    <summary type="html">&lt;p&gt;hello, gradle.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HelloWorld&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nise-nabe/gradle-helloworld/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/nise-nabe/gradle-helloworld/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/nise-nabe/gradle-helloworld/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/nise-nabe/gradle-helloworld/tree/master.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Environment Variable&lt;/th&gt; &#xA;   &lt;th&gt;Value to set&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ORG_GRADLE_PROJECT_HelloGithubPackageUsername&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;your github username&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ORG_GRADLE_PROJECT_HelloGithubPackagePassword&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;your PAT &lt;code&gt;read:package&lt;/code&gt; permission&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>