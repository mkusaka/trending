<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-29T01:36:56Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>markusfisch/BinaryEye</title>
    <updated>2022-10-29T01:36:56Z</updated>
    <id>tag:github.com,2022-10-29:/markusfisch/BinaryEye</id>
    <link href="https://github.com/markusfisch/BinaryEye" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yet another barcode scanner for Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Binary Eye&lt;/h1&gt; &#xA;&lt;p&gt;Yet another barcode scanner for Android. As if there weren&#39;t &lt;a href=&#34;https://play.google.com/store/search?q=barcode%20scanner&amp;amp;c=apps&#34;&gt;enough&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This one is free, without any ads and open source.&lt;/p&gt; &#xA;&lt;p&gt;Works in portrait and landscape orientation, can read inverted codes, comes in Material Design and can also generate barcodes.&lt;/p&gt; &#xA;&lt;p&gt;Binary Eye uses the &lt;a href=&#34;https://github.com/zxing-cpp/zxing-cpp&#34;&gt;ZXing-C++&lt;/a&gt; (&#34;Zebra Crossing&#34;) barcode scanning library.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/markusfisch/BinaryEye/master/fastlane/metadata/android/en-US/images/phoneScreenshots/screencap-scanning.png&#34; alt=&#34;Screenshot Gallery&#34; width=&#34;160&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/markusfisch/BinaryEye/master/fastlane/metadata/android/en-US/images/phoneScreenshots/screencap-scanning-cropped.png&#34; alt=&#34;Screenshot Gallery&#34; width=&#34;160&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/markusfisch/BinaryEye/master/fastlane/metadata/android/en-US/images/phoneScreenshots/screencap-decoded.png&#34; alt=&#34;Screenshot Theme&#34; width=&#34;160&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/markusfisch/BinaryEye/master/fastlane/metadata/android/en-US/images/phoneScreenshots/screencap-compose-barcode.png&#34; alt=&#34;Screenshot Editor&#34; width=&#34;160&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://f-droid.org/en/packages/de.markusfisch.android.binaryeye/&#34;&gt;&lt;img alt=&#34;Get it on F-Droid&#34; src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; height=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://play.google.com/store/apps/details?id=de.markusfisch.android.binaryeye&#34;&gt;&lt;img alt=&#34;Get it on Google Play&#34; src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Barcode Formats&lt;/h2&gt; &#xA;&lt;h3&gt;Read&lt;/h3&gt; &#xA;&lt;p&gt;ZXing can read the following barcode formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Aztec_Code&#34;&gt;AZTEC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Codabar&#34;&gt;CODABAR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Code_39&#34;&gt;CODE 39&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Code_93&#34;&gt;CODE 93&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Code_128&#34;&gt;CODE 128&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_Matrix&#34;&gt;DATA MATRIX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/EAN-8&#34;&gt;EAN 8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/International_Article_Number&#34;&gt;EAN 13&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Interleaved_2_of_5&#34;&gt;ITF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/MaxiCode&#34;&gt;MAXICODE&lt;/a&gt; (partial)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/PDF417&#34;&gt;PDF417&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/QR_code&#34;&gt;QR CODE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/QR_code#Micro_QR_code&#34;&gt;Micro QR Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/GS1_DataBar&#34;&gt;RSS 14&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/GS1_DataBar&#34;&gt;RSS EXPANDED&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Universal_Product_Code&#34;&gt;UPC A&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Universal_Product_Code#UPC-E&#34;&gt;UPC E&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Universal_Product_Code#EAN-13&#34;&gt;UPC EAN EXTENSION&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Generate&lt;/h3&gt; &#xA;&lt;p&gt;ZXing can generate the following barcode formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Aztec_Code&#34;&gt;AZTEC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Codabar&#34;&gt;CODABAR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Code_39&#34;&gt;CODE 39&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Code_128&#34;&gt;CODE 128&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_Matrix&#34;&gt;DATA MATRIX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/EAN-8&#34;&gt;EAN 8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/International_Article_Number&#34;&gt;EAN 13&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Interleaved_2_of_5&#34;&gt;ITF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/PDF417&#34;&gt;PDF 417&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/QR_code&#34;&gt;QR CODE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Universal_Product_Code&#34;&gt;UPC A&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deep Links and Intents&lt;/h2&gt; &#xA;&lt;h3&gt;Deep Links&lt;/h3&gt; &#xA;&lt;p&gt;You can invoke Binary Eye with a web URI intent from anything that can open URIs. There are two options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;binaryeye://scan&#34;&gt;binaryeye://scan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://markusfisch.de/BinaryEye&#34;&gt;http(s)://markusfisch.de/BinaryEye&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you want to get the scanned contents, you can add a &lt;code&gt;ret&lt;/code&gt; query argument with a (URL encoded) URI template. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://markusfisch.de/BinaryEye?ret=http%3A%2F%2Fexample.com%2F%3Fresult%3D%7BRESULT%7D&#34;&gt;http://markusfisch.de/BinaryEye?ret=http%3A%2F%2Fexample.com%2F%3Fresult%3D{RESULT}&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Supported symbols are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RESULT&lt;/code&gt; - scanned content&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RESULT_BYTES&lt;/code&gt; - raw result as a hex string&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FORMAT&lt;/code&gt; - barcode format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;META&lt;/code&gt; - the meta data, if available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SCAN Intent&lt;/h3&gt; &#xA;&lt;p&gt;You can also use Binary Eye from other apps by using the &lt;code&gt;com.google.zxing.client.android.SCAN&lt;/code&gt; Intent with &lt;a href=&#34;https://developer.android.com/reference/android/app/Activity#startActivityForResult(android.content.Intent,%20int)&#34;&gt;startActivityForResult()&lt;/a&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;startActivityForResult(&#xA;&#x9;Intent(&#34;com.google.zxing.client.android.SCAN&#34;),&#xA;&#x9;SOME_NUMBER&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And process the result in &lt;a href=&#34;https://developer.android.com/reference/android/app/Activity#onActivityResult(int,%20int,%20android.content.Intent)&#34;&gt;onActivityResult()&lt;/a&gt; of your &lt;code&gt;Activity&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;override fun onActivityResult(&#xA;&#x9;requestCode: Int,&#xA;&#x9;resultCode: Int,&#xA;&#x9;data: Intent?&#xA;) {&#xA;&#x9;when (requestCode) {&#xA;&#x9;&#x9;SOME_NUMBER -&amp;gt; if (resultCode == RESULT_OK) {&#xA;&#x9;&#x9;&#x9;val result = data.getStringExtra(&#34;SCAN_RESULT&#34;)&#xA;&#x9;&#x9;&#x9;…&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using AndroidX, this would be the new, &lt;a href=&#34;https://developer.android.com/training/basics/intents/result&#34;&gt;recommended way&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class YourActivity : Activity() {&#xA;&#x9;private val resultLauncher = registerForActivityResult(StartActivityForResult()) { result -&amp;gt;&#xA;&#x9;&#x9;if (result.resultCode == Activity.RESULT_OK) {&#xA;&#x9;&#x9;&#x9;val scan = result.data?.getStringExtra(&#34;SCAN_RESULT&#34;)&#xA;&#x9;&#x9;&#x9;…&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;fun openScanner() {&#xA;&#x9;&#x9;resultLauncher.launch(Intent(&#34;com.google.zxing.client.android.SCAN&#34;))&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>