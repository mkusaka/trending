<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-04T01:32:09Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>supershadoe/delta</title>
    <updated>2025-04-04T01:32:09Z</updated>
    <id>tag:github.com,2025-04-04:/supershadoe/delta</id>
    <link href="https://github.com/supershadoe/delta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hotspot manager using Shizuku API&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;delta&lt;/h2&gt; &#xA;&lt;p&gt;This is an in-development app to create hotspots on stock Android with more functionalities like a blocklist, usage limits, etc.&lt;/p&gt; &#xA;&lt;p&gt;This app can also trigger hotspot on devices like Samsung Tabs where tethering is hidden from Settings app and SystemUI for Wi-Fi only devices.&lt;/p&gt; &#xA;&lt;p&gt;App was tested on a Pixel 6A with Android 15, compatibility with other devices is questionable at best as Android&#39;s internals change without a stable API.&lt;/p&gt; &#xA;&lt;p&gt;The app is supposed to work on devices with Android &amp;gt;= 11 (R), feel free to file an issue if it doesn&#39;t work as expected.&lt;/p&gt; &#xA;&lt;h3&gt;How to use&lt;/h3&gt; &#xA;&lt;p&gt;Get the release APK from GitHub releases and install; also get Shizuku app from Play Store.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ImranR98/Obtainium&#34;&gt;&lt;img src=&#34;https://github.com/ImranR98/Obtainium/raw/main/assets/graphics/badge_obtainium.png&#34; alt=&#34;Get it on Obtainium&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;p&gt;Check out the roadmap &lt;a href=&#34;https://github.com/users/supershadoe/projects/6/views/3&#34;&gt;here&lt;/a&gt; for better representation of the current status of the project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Trigger hotspot from in-app&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Connected devices info&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Edit hotspot settings from app&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Turn off automatically&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Blocklist&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Timed connections/Usage limits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Localization&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to translate the project to a language that you are fluent in, you can contribute through &lt;a href=&#34;https://crowdin.com/project/delta-app&#34;&gt;Crowdin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open up a discussion on &lt;a href=&#34;https://github.com/supershadoe/delta/discussions/new?category=ideas&#34;&gt;GitHub&lt;/a&gt; or &lt;a href=&#34;mailto:shadoe@shadoe.dev&#34;&gt;mail me&lt;/a&gt; to enable any language on Crowdin other than the ones already enabled.&lt;/p&gt; &#xA;&lt;h3&gt;Want to contribute?&lt;/h3&gt; &#xA;&lt;p&gt;Check out this &lt;a href=&#34;https://github.com/supershadoe/delta/contribute&#34;&gt;page&lt;/a&gt; on how to start! &lt;span&gt;ü§ó&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RevenueCat/purchases-android</title>
    <updated>2025-04-04T01:32:09Z</updated>
    <id>tag:github.com,2025-04-04:/RevenueCat/purchases-android</id>
    <link href="https://github.com/RevenueCat/purchases-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android in-app purchases and subscriptions made easy.&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt;üòª In-App Subscriptions Made Easy üòª&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RevenueCat/purchases-android/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/RevenueCat/purchases-android.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RevenueCat/purchases-android/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/RevenueCat/purchases-android.svg?style=flat&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;RevenueCat is a powerful, reliable, and free to use in-app purchase server with cross-platform support. Our open-source framework provides a backend and a wrapper around StoreKit and Google Play Billing to make implementing in-app purchases and subscriptions easy.&lt;/p&gt; &#xA;&lt;p&gt;Whether you are building a new app or already have millions of customers, you can use RevenueCat to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fetch products, make purchases, and check subscription status with our &lt;a href=&#34;https://docs.revenuecat.com/docs/installation&#34;&gt;native SDKs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Host and &lt;a href=&#34;https://docs.revenuecat.com/docs/entitlements&#34;&gt;configure products&lt;/a&gt; remotely from our dashboard.&lt;/li&gt; &#xA; &lt;li&gt;Analyze the most important metrics for your app business &lt;a href=&#34;https://docs.revenuecat.com/docs/charts&#34;&gt;in one place&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;See customer transaction histories, chart lifetime value, and &lt;a href=&#34;https://docs.revenuecat.com/docs/customers&#34;&gt;grant promotional subscriptions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Get notified of real-time events through &lt;a href=&#34;https://docs.revenuecat.com/docs/webhooks&#34;&gt;webhooks&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Send enriched purchase events to analytics and attribution tools with our easy integrations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sign up to &lt;a href=&#34;https://app.revenuecat.com/signup&#34;&gt;get started for free&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Purchases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Purchases&lt;/em&gt; is the client for the &lt;a href=&#34;https://www.revenuecat.com/&#34;&gt;RevenueCat&lt;/a&gt; subscription and purchase tracking system. It is an open source framework that provides a wrapper around &lt;code&gt;BillingClient&lt;/code&gt; and the RevenueCat backend to make implementing in-app subscriptions in &lt;code&gt;Android&lt;/code&gt; easy - receipt validation and status tracking included!&lt;/p&gt; &#xA;&lt;h2&gt;Migration Guides&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Migrating from v4.x.x to v5.x.x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RevenueCat/purchases-android/main/migrations/v5-MIGRATION.md&#34;&gt;V5 API Migration Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Migrating from v5.x.x to v6.x.x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RevenueCat/purchases-android/main/migrations/v6-MIGRATION.md&#34;&gt;V6 API Migration Guide&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;RevenueCat SDK Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;RevenueCat&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;Server-side receipt validation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚û°Ô∏è&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.revenuecat.com/docs/webhooks&#34;&gt;Webhooks&lt;/a&gt; - enhanced server-to-server communication with events for purchases, renewals, cancellations, and more&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üéØ&lt;/td&gt; &#xA;   &lt;td&gt;Subscription status tracking - know whether a user is subscribed whether they&#39;re on iOS, Android or web&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üìä&lt;/td&gt; &#xA;   &lt;td&gt;Analytics - automatic calculation of metrics like conversion, mrr, and churn&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üìù&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.revenuecat.com/docs&#34;&gt;Online documentation&lt;/a&gt; up to date&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üîÄ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.revenuecat.com/integrations&#34;&gt;Integrations&lt;/a&gt; - over a dozen integrations to easily send purchase data where you need it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üíØ&lt;/td&gt; &#xA;   &lt;td&gt;Well maintained - &lt;a href=&#34;https://github.com/RevenueCat/purchases-android/releases&#34;&gt;frequent releases&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üìÆ&lt;/td&gt; &#xA;   &lt;td&gt;Great support - &lt;a href=&#34;https://revenuecat.zendesk.com&#34;&gt;Help Center&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For more detailed information, you can view our complete documentation at &lt;a href=&#34;https://docs.revenuecat.com/docs&#34;&gt;docs.revenuecat.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://docs.revenuecat.com/docs/&#34;&gt;Quickstart Guide&lt;/a&gt; for more information on how to install the SDK.&lt;/p&gt; &#xA;&lt;p&gt;Or view / build our Android sample app:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RevenueCat/purchases-android/main/examples/MagicWeather&#34;&gt;MagicWeather&lt;/a&gt; (open it on a different Android Studio window)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 8+&lt;/li&gt; &#xA; &lt;li&gt;Kotlin 1.7.0+&lt;/li&gt; &#xA; &lt;li&gt;Minimum target: Android 5.0+ (API level 21+)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SDK Reference&lt;/h2&gt; &#xA;&lt;p&gt;Our full SDK reference &lt;a href=&#34;https://sdk.revenuecat.com/android/index.html&#34;&gt;can be found here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! To learn how you can contribute, please see the &lt;a href=&#34;https://raw.githubusercontent.com/RevenueCat/purchases-android/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/kotlinconf-app</title>
    <updated>2025-04-04T01:32:09Z</updated>
    <id>tag:github.com,2025-04-04:/JetBrains/kotlinconf-app</id>
    <link href="https://github.com/JetBrains/kotlinconf-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KotlinConf Schedule Application&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;JetBrains incubator project&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;KotlinConf App&lt;/h1&gt; &#xA;&lt;p&gt;This is the official KotlinConf App! We hope you enjoy(ed) the conference and sessions. This repository contains the source code of the application.&lt;/p&gt; &#xA;&lt;p&gt;All pieces of the application are implemented in &lt;em&gt;Kotlin&lt;/em&gt;. Backend, frontend and mobile apps are Kotlin applications. Yes, Kotlin is powering all parts of the story. Did I already say that? Okay, let&#39;s get to the details:&lt;/p&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;KotlinConf App is connecting to the server running in the cloud to get information about sessions, speakers, favorites and votes. It is developed using &lt;a href=&#34;https://ktor.io&#34;&gt;Ktor&lt;/a&gt;, an asynchronous Kotlin web framework.&lt;/p&gt; &#xA;&lt;p&gt;The server polls &lt;a href=&#34;https://sessionize.com&#34;&gt;Sessionize&lt;/a&gt; service, which is used for planning the conference. Once in a while, it connects to APIs to get the latest information about sessions, speakers, and timeline. It then augments and republishes this information for clients to consume. It also provides a couple of extra APIs to save your favorites and accumulate votes.&lt;/p&gt; &#xA;&lt;h3&gt;iOS, Android, Browser and Desktop Applications&lt;/h3&gt; &#xA;&lt;p&gt;All applications are developed within a single codebase using &lt;a href=&#34;https://kotlinlang.org/docs/multiplatform.html&#34;&gt;Kotlin Multiplatform technology&lt;/a&gt;. The UI is implemented using &lt;a href=&#34;https://www.jetbrains.com/lp/compose-multiplatform/&#34;&gt;Compose Multiplatform UI framework&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to build and run&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK &amp;gt;= 17&lt;/li&gt; &#xA; &lt;li&gt;Android Studio with Android SDK&lt;/li&gt; &#xA; &lt;li&gt;XCode with iOS SDK&lt;/li&gt; &#xA; &lt;li&gt;Create a file &lt;code&gt;local.properties&lt;/code&gt; in the root directory of the project, pointing to your Android SDK installation. On Mac OS, the contents should be &lt;code&gt;sdk.dir=/Users/&amp;lt;your username&amp;gt;/Library/Android/sdk&lt;/code&gt;. On other OSes, please adjust accordingly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the Android app&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the project in Android Studio or &lt;a href=&#34;https://www.jetbrains.com/fleet/&#34;&gt;JetBrains Fleet&lt;/a&gt; and wait until the project finishes loading.&lt;/li&gt; &#xA; &lt;li&gt;In Android Studio, select the &lt;code&gt;androidApp&lt;/code&gt; run configuration from the drop-down list within the &lt;a href=&#34;https://developer.android.com/studio/intro#user-interface&#34;&gt;toolbar&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;a href=&#34;https://developer.android.com/studio/run/rundebugconfig#running&#34;&gt;run icon&lt;/a&gt; to start the simulator.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running the iOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the project in Android Studio or &lt;a href=&#34;https://www.jetbrains.com/fleet/&#34;&gt;JetBrains Fleet&lt;/a&gt; and wait until the project finishes loading.&lt;/li&gt; &#xA; &lt;li&gt;In Android Studio, select the &lt;code&gt;KotlinConf&lt;/code&gt; run configuration from the drop-down list within the &lt;a href=&#34;https://developer.android.com/studio/intro#user-interface&#34;&gt;toolbar&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;a href=&#34;https://developer.android.com/studio/run/rundebugconfig#running&#34;&gt;run icon&lt;/a&gt; to start the simulator.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running the desktop app&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./gradlew :shared:run&lt;/code&gt; to start the desktop application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the backend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./gradlew :backend:run&lt;/code&gt; to start the server&lt;/li&gt; &#xA; &lt;li&gt;All API will be available at &lt;code&gt;http://0.0.0.0:8080&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the browser app&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To run the web app in the browser, run &lt;code&gt;./gradlew :shared:wasmJsBrowserRun&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;http://localhost:8000&lt;/code&gt; in your browser after build to see the app.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>