<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-13T01:37:20Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>khushpanchal/NewsApp</title>
    <updated>2024-01-13T01:37:20Z</updated>
    <id>tag:github.com,2024-01-13:/khushpanchal/NewsApp</id>
    <link href="https://github.com/khushpanchal/NewsApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MVVM News Architecture using Jetpack Compose, Kotlin, Hilt, Retrofit, Coroutines, Flow, Room, and many more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NewsApp&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to NewsApp, a news application built with MVVM architecture and Jetpack Compose.&lt;/p&gt; &#xA;&lt;h2&gt;Major Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jetpack Compose&lt;/strong&gt; for modern UI&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Offline caching&lt;/strong&gt; with a &lt;strong&gt;single source of truth&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MVVM architecture&lt;/strong&gt; for a clean and scalable codebase&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kotlin&lt;/strong&gt; and &lt;strong&gt;Kotlin DSL&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dagger Hilt&lt;/strong&gt; for efficient dependency injection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Retrofit&lt;/strong&gt; for seamless networking&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Room DB&lt;/strong&gt; for local storage of news articles&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coroutines&lt;/strong&gt; and &lt;strong&gt;Flow&lt;/strong&gt; for asynchronous programming&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;StatFlow&lt;/strong&gt; for streamlined state management&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pagination&lt;/strong&gt; to efficiently load and display news articles&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unit tests&lt;/strong&gt; and &lt;strong&gt;UI tests&lt;/strong&gt; for robust code coverage&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instant search&lt;/strong&gt; for quick access to relevant news&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Navigation&lt;/strong&gt; for smooth transitions between screens&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WebView&lt;/strong&gt; for a seamless reading experience&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WorkManager&lt;/strong&gt; for periodic news fetching&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Notification&lt;/strong&gt; for alerting about latest news&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coil&lt;/strong&gt; for efficient image loading&lt;/li&gt; &#xA; &lt;li&gt;Pull to refresh for refreshing news content&lt;/li&gt; &#xA; &lt;li&gt;Swipe to delete for managing saved news articles&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;mvvm-architecture&#34; src=&#34;https://github.com/khushpanchal/NewsApp/raw/master/assets/News_app_architecture.jpeg&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features Implemented&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Show top news articles&lt;/li&gt; &#xA; &lt;li&gt;Filter news by country, language, and source&lt;/li&gt; &#xA; &lt;li&gt;Save news articles for future reference&lt;/li&gt; &#xA; &lt;li&gt;Search for specific news articles&lt;/li&gt; &#xA; &lt;li&gt;View news articles in a WebView for a detailed reading experience&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependency Use&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jetpack Compose for UI: Modern UI toolkit for building native Android UIs&lt;/li&gt; &#xA; &lt;li&gt;Coil for Image Loading: Efficiently loads and caches images&lt;/li&gt; &#xA; &lt;li&gt;Retrofit for Networking: A type-safe HTTP client for smooth network requests&lt;/li&gt; &#xA; &lt;li&gt;Dagger Hilt for Dependency Injection: Simplifies dependency injection&lt;/li&gt; &#xA; &lt;li&gt;Room for Database: A SQLite object mapping library for local data storage&lt;/li&gt; &#xA; &lt;li&gt;Paging Compose for Pagination: Simplifies the implementation of paginated lists&lt;/li&gt; &#xA; &lt;li&gt;Mockito, JUnit, Turbine for Testing: Ensures the reliability of the application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Run the Project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the Repository:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/khushpanchal/NewsApp.git&#xA;cd NewsApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visit newsapi.org and sign up for an API key, Copy the API key provided&lt;/li&gt; &#xA; &lt;li&gt;Open the build.gradle.kts file in the app module. Find the following line&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;buildConfigField(&#34;String&#34;, &#34;API_KEY&#34;, &#34;\&#34;&amp;lt;Add your API Key&amp;gt;\&#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace &#34;Add your API Key&#34; with the API key you obtained&lt;/li&gt; &#xA; &lt;li&gt;Build and run the NewsApp.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Complete Project Folder Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;|── NewsApplication.kt&#xA;├── common&#xA;│&amp;nbsp;&amp;nbsp; ├── Const.kt&#xA;│&amp;nbsp;&amp;nbsp; ├── NoInternetException.kt&#xA;│&amp;nbsp;&amp;nbsp; ├── dispatcher&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── DefaultDispatcherProvider.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── DispatcherProvider.kt&#xA;│&amp;nbsp;&amp;nbsp; ├── logger&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── AppLogger.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── Logger.kt&#xA;│&amp;nbsp;&amp;nbsp; ├── networkhelper&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── NetworkHelper.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── NetworkHelperImpl.kt&#xA;│&amp;nbsp;&amp;nbsp; └── util&#xA;│&amp;nbsp;&amp;nbsp;     ├── EntityUtil.kt&#xA;│&amp;nbsp;&amp;nbsp;     ├── NavigationUtil.kt&#xA;│&amp;nbsp;&amp;nbsp;     ├── TimeUtil.kt&#xA;│&amp;nbsp;&amp;nbsp;     ├── Util.kt&#xA;│&amp;nbsp;&amp;nbsp;     └── ValidationUtil.kt&#xA;├── data&#xA;│&amp;nbsp;&amp;nbsp; ├── database&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── AppDatabaseService.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── ArticleDatabase.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── DatabaseService.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── dao&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── ArticleDao.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── SavedArticleDao.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── entity&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── Article.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── SavedArticleEntity.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── SavedSourceEntity.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └── Source.kt&#xA;│&amp;nbsp;&amp;nbsp; ├── model&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── ApiArticle.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── ApiSource.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── Country.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── Language.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── News.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── Sources.kt&#xA;│&amp;nbsp;&amp;nbsp; ├── network&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── ApiInterface.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── ApiKeyInterceptor.kt&#xA;│&amp;nbsp;&amp;nbsp; └── repository&#xA;│&amp;nbsp;&amp;nbsp;     └── NewsRepository.kt&#xA;├── di&#xA;│&amp;nbsp;&amp;nbsp; ├── module&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── ApplicationModule.kt&#xA;│&amp;nbsp;&amp;nbsp; └── qualifiers.kt&#xA;├── ui&#xA;│&amp;nbsp;&amp;nbsp; ├── NewsActivity.kt&#xA;│&amp;nbsp;&amp;nbsp; ├── base&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── CommonUI.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── NewsDestination.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── NewsNavigation.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── UIState.kt&#xA;│&amp;nbsp;&amp;nbsp; ├── components&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── Article.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── FilterItem.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── FilterItemListLayout.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── NewsListLayout.kt&#xA;│&amp;nbsp;&amp;nbsp; ├── paging&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── NewsPagingSource.kt&#xA;│&amp;nbsp;&amp;nbsp; ├── screens&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── ArticleScreen.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── FilterScreen.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── NewsScreen.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── SavedScreen.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── SearchScreen.kt&#xA;│&amp;nbsp;&amp;nbsp; ├── theme&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── Color.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── Theme.kt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── Type.kt&#xA;│&amp;nbsp;&amp;nbsp; └── viewmodels&#xA;│&amp;nbsp;&amp;nbsp;     ├── NewsViewModel.kt&#xA;│&amp;nbsp;&amp;nbsp;     ├── SearchViewModel.kt&#xA;│&amp;nbsp;&amp;nbsp;     ├── SharedViewModel.kt&#xA;│&amp;nbsp;&amp;nbsp;     └── filters&#xA;│&amp;nbsp;&amp;nbsp;         ├── CountryFilterViewModel.kt&#xA;│&amp;nbsp;&amp;nbsp;         ├── LanguageFilterViewModel.kt&#xA;│&amp;nbsp;&amp;nbsp;         └── SourceFilterViewModel.kt&#xA;└── worker&#xA;    └── NewsWorker.kt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;screenshots&#34; src=&#34;https://github.com/khushpanchal/NewsApp/raw/master/assets/News_app.jpeg&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;If this project helps you, show love ❤️ by putting a ⭐ on this project ✌️&lt;/h2&gt; &#xA;&lt;h2&gt;Contribute to the project&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to improve or add features to the project. Create an issue or find the pending issue. All pull requests are welcome 😄&lt;/p&gt;</summary>
  </entry>
</feed>