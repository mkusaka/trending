<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-01T01:38:04Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>unit-mesh/build-your-ai-coding-assistant</title>
    <updated>2024-01-01T01:38:04Z</updated>
    <id>tag:github.com,2024-01-01:/unit-mesh/build-your-ai-coding-assistant</id>
    <link href="https://github.com/unit-mesh/build-your-ai-coding-assistant" rel="alternate"></link>
    <summary type="html">&lt;p&gt;有手就会 《构建你自己的 AI 辅助编码助手》 —— 介绍如何 DIY 一个端到端（从 IDE 插件、模型选型、数据集构建到模型微调）的 AI 辅助编程工具，类似于 GitHub Copilot、JetBrains AI Assistant、AutoDev 等。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/phodal/build-ai-coding-assistant&#34;&gt;构建你自己的 AI 辅助编码助手&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/unit-mesh/build-your-ai-coding-assistant/master/images/cover.jpeg&#34; alt=&#34;Cover&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;2023 年，生成式 AI 的火爆，让越来越多的组织开始引入 AI 辅助编码。与在 2021 年发布的 GitHub Copilot 稍有差异的是，代码补全只是重多场景中的一个。 大量的企业内部在探索结合需求生成完整代码、代码审查等场景，也引入生成式 AI，来提升开发效率。&lt;/p&gt; &#xA;&lt;p&gt;在这个背景下，我们（Thoughtworks）也开发了一系列的开源工具，以帮助更多的组织构建自己的 AI 辅助编码助手：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unit-mesh/auto-dev&#34;&gt;AutoDev&lt;/a&gt;，基于 JetBrains 平台的全流程 AI 辅助编码工具。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unit-mesh/unit-eval&#34;&gt;Unit Eval&lt;/a&gt;，代码补全场景下的高质量数据集构建与生成工具。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unit-mesh/unit-minions&#34;&gt;Unit Minions&lt;/a&gt;，在需求生成、测试生成等测试场景下，基于数据蒸馏的数据集构建工具。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;由于，我们设计 AutoDev 时，各类开源模型也在不断演进。在这个背景下，它的步骤是：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;构建 IDE 插件与度量体系设计。基于公开模型 API，编写和丰富 IDE 插件功能。&lt;/li&gt; &#xA; &lt;li&gt;模型评估体系与微调试验。&lt;/li&gt; &#xA; &lt;li&gt;围绕意图的数据工程与模型演进。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;也因此，这个教程也是围绕于这三个步骤展开的。 除此，基于我们的经验，本教程的示例技术栈：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;插件：Intellij IDEA。AutoDev 是基于 Intellij IDEA 构建的，并且自带静态代码分析能力，所以基于它作为示例。我们也提供了 VSCode 插件的参考架构，你可以在这个基础上进行开发。&lt;/li&gt; &#xA; &lt;li&gt;模型：&lt;a href=&#34;https://huggingface.co/deepseek-ai/deepseek-coder-6.7b-instruct&#34;&gt;DeepSeek Coder 6.7b&lt;/a&gt;。基于 Llama 2 架构，与 Llama 生态兼容&lt;/li&gt; &#xA; &lt;li&gt;微调：Deepspeed + 官方脚本 + Unit Eval。&lt;/li&gt; &#xA; &lt;li&gt;GPU：RTX 4090x2 + &lt;a href=&#34;https://openbayes.com/console/signup?r=phodal_uVxU&#34;&gt;OpenBayes&lt;/a&gt;。（PS: 用我的专用邀请链接，注册 OpenBayes，双方各获得 60 分钟 RTX 4090 使用时长，支持累积，永久有效： &lt;a href=&#34;https://openbayes.com/console/signup?r=phodal_uVxU&#34;&gt;https://openbayes.com/console/signup?r=phodal_uVxU&lt;/a&gt; ）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;由于，我们在 AI 方面的经验相对比较有限，难免会有一些错误，所以，我们也希望能够与更多的开发者一起，来构建这个开源项目。&lt;/p&gt; &#xA;&lt;h2&gt;功能设计：定义你的 AI 助手&lt;/h2&gt; &#xA;&lt;p&gt;结合 JetBrains 2023《开发者生态系统》报告的&lt;a href=&#34;https://www.jetbrains.com/zh-cn/lp/devecosystem-2023/ai/&#34;&gt;人工智能部分&lt;/a&gt; ，我们可以总结出一些通用的场景，这些场景反映了在开发过程中生成式 AI 可以发挥作用的领域。以下是一些主要的场景：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;代码自动补全： 在日常编码中，生成式 AI 可以通过分析上下文和学习代码模式，提供智能的代码自动补全建议，从而提高开发效率。&lt;/li&gt; &#xA; &lt;li&gt;解释代码： 生成式 AI 能够解释代码，帮助开发者理解特定代码片段的功能和实现方式，提供更深层次的代码理解支持。&lt;/li&gt; &#xA; &lt;li&gt;生成代码： 通过学习大量的代码库和模式，生成式 AI 可以生成符合需求的代码片段，加速开发过程，尤其在重复性工作中发挥重要作用。&lt;/li&gt; &#xA; &lt;li&gt;代码审查： 生成式 AI 能够进行代码审查，提供高质量的建议和反馈，帮助开发者改进代码质量、遵循最佳实践。&lt;/li&gt; &#xA; &lt;li&gt;自然语言查询： 开发者可以使用自然语言查询与生成式 AI 进行交互，提出问题或请求，以获取相关代码片段、文档或解释，使得开发者更轻松地获取需要的信息。&lt;/li&gt; &#xA; &lt;li&gt;其它。诸如于重构、提交信息生成、建模、提交总结等。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;而在我们构建 AutoDev 时，也发现了诸如于创建 SQL DDL、生成需求、TDD 等场景。所以。我们提供了自定义场景的能力，以让开发者可以自定义自己的 AI 能力，详细见：&lt;a href=&#34;https://ide.unitmesh.cc/customize&#34;&gt;https://ide.unitmesh.cc/customize&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;场景驱动架构设计：平衡模型速度与能力&lt;/h3&gt; &#xA;&lt;p&gt;在日常编码时，会存在几类不同场景，对于 AI 响应速度的要求也是不同的（仅作为示例）：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;场景&lt;/th&gt; &#xA;   &lt;th&gt;响应速度&lt;/th&gt; &#xA;   &lt;th&gt;生成质量要求&lt;/th&gt; &#xA;   &lt;th&gt;大小预期&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;代码补全&lt;/td&gt; &#xA;   &lt;td&gt;快&lt;/td&gt; &#xA;   &lt;td&gt;中&lt;/td&gt; &#xA;   &lt;td&gt;6B&lt;/td&gt; &#xA;   &lt;td&gt;代码补全是日常编码中最常用的场景，响应速度至关重要。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;单元测试生成&lt;/td&gt; &#xA;   &lt;td&gt;快&lt;/td&gt; &#xA;   &lt;td&gt;中&lt;/td&gt; &#xA;   &lt;td&gt;6B~&lt;/td&gt; &#xA;   &lt;td&gt;单元测试生成的上下文较少，响应速度和AI质量同样重要。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;文档生成&lt;/td&gt; &#xA;   &lt;td&gt;中&lt;/td&gt; &#xA;   &lt;td&gt;中&lt;/td&gt; &#xA;   &lt;td&gt;6B~&lt;/td&gt; &#xA;   &lt;td&gt;文档生成需要充分理解代码结构，速度和质量同样重要。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;代码审查&lt;/td&gt; &#xA;   &lt;td&gt;快&lt;/td&gt; &#xA;   &lt;td&gt;中&lt;/td&gt; &#xA;   &lt;td&gt;6B~&lt;/td&gt; &#xA;   &lt;td&gt;代码审查需要高质量的建议，同时响应速度也需尽可能快。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;代码重构&lt;/td&gt; &#xA;   &lt;td&gt;中&lt;/td&gt; &#xA;   &lt;td&gt;高&lt;/td&gt; &#xA;   &lt;td&gt;32B~&lt;/td&gt; &#xA;   &lt;td&gt;代码重构可能需要更多上下文理解，响应速度可适度减缓。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;需求生成&lt;/td&gt; &#xA;   &lt;td&gt;中&lt;/td&gt; &#xA;   &lt;td&gt;高&lt;/td&gt; &#xA;   &lt;td&gt;32B~&lt;/td&gt; &#xA;   &lt;td&gt;需求生成是相对复杂的场景，响应速度可以适度放缓，确保准确性。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;自然语言代码搜索与解释&lt;/td&gt; &#xA;   &lt;td&gt;中-低&lt;/td&gt; &#xA;   &lt;td&gt;高&lt;/td&gt; &#xA;   &lt;td&gt;32B~&lt;/td&gt; &#xA;   &lt;td&gt;自然语言代码搜索与解释是相对复杂的场景，响应速度可以适度放缓，确保准确性。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;PS：这里的 32B 仅作为一个量级表示，因为在更大的模型下，效果会更好。&lt;/p&gt; &#xA;&lt;p&gt;因此，我们将其总结为：&lt;strong&gt;一大一中一微&lt;/strong&gt;三模型，提供全面 AI 辅助编码：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;高质量大模型：32B~。用于代码重构、需求生成、自然语言代码搜索与解释等场景。&lt;/li&gt; &#xA; &lt;li&gt;高响应速度中模型：6B~。用于代码补全、单元测试生成、文档生成、代码审查等场景。&lt;/li&gt; &#xA; &lt;li&gt;向量化微模型：~100M。用于在 IDE 中进行向量化，诸如：代码相似度、代码相关度等。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;重点场景介绍：补全模式&lt;/h4&gt; &#xA;&lt;p&gt;AI 代码补全能结合 IDE 工具分析代码上下文和程序语言的规则，由 AI 自动生成或建议代码片段。在类似于 GitHub Copilot 的代码补全工具中， 通常会分为三种细分模式：&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;行内补全（Inline）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;类似于 FIM（fill in the middle）的模式，补全的内容在当前行中。诸如于：&lt;code&gt;BlotPost blogpost = new&lt;/code&gt;，补全为：&lt;code&gt; BlogPost();&lt;/code&gt;， 以实现：&lt;code&gt;BlogPost blogpost = new BlogPost();&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;我们可以 &lt;a href=&#34;https://huggingface.co/deepseek-ai/deepseek-coder-6.7b-base&#34;&gt;Deepseek Coder&lt;/a&gt; 作为例子，看在这个场景下的效果：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;｜fim▁begin｜&amp;gt;def quick_sort(arr):&#xA;    if len(arr) &amp;lt;= 1:&#xA;        return arr&#xA;    pivot = arr[0]&#xA;    left = []&#xA;    right = []&#xA;&amp;lt;｜fim▁hole｜&amp;gt;&#xA;        if arr[i] &amp;lt; pivot:&#xA;            left.append(arr[i])&#xA;        else:&#xA;            right.append(arr[i])&#xA;    return quick_sort(left) + [pivot] + quick_sort(right)&amp;lt;｜fim▁end｜&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在这里，我们就需要结合光标前和光标后的代码。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;块内补全（InBlock）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;通过上下文学习（In-Context Learning）来实现，补全的内容在当前函数块中。诸如于，原始的代码是：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun createBlog(blogDto: CreateBlogDto): BlogPost {&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;补全的代码为：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;    val blogPost = BlogPost(&#xA;    title = blogDto.title,&#xA;    content = blogDto.content,&#xA;    author = blogDto.author&#xA;)&#xA;return blogRepository.save(blogPost)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;块间补全（AfterBlock）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;通过上下文学习（In-Context Learning）来实现，在当前函数块之后补全，如：在当前函数块之后补全一个新的函数。诸如于，原始的代码是：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun createBlog(blogDto: CreateBlogDto): BlogPost {&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;补全的代码为：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun updateBlog(id: Long, blogDto: CreateBlogDto): BlogPost {&#xA;    //...&#xA;}&#xA;&#xA;fun deleteBlog(id: Long) {&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在我们构建对应的 AI 补全功能时，也需要考虑应用到对应的模式数据集，以提升补全的质量，提供更好的用户体验。&lt;/p&gt; &#xA;&lt;p&gt;编写本文里的一些相关资源：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeium.com/blog/why-code-completion-needs-fill-in-the-middle&#34;&gt;Why your AI Code Completion tool needs to Fill in the Middle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://transferlab.ai/blog/autodev/&#34;&gt;Exploring Custom LLM-Based Coding Assistance Functions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;重点场景介绍：代码解释&lt;/h4&gt; &#xA;&lt;p&gt;代码解释旨在帮助开发者更有效地管理和理解大型代码库。这些助手能够回答关于代码库的问题、 提供文档、搜索代码、识别错误源头、减少代码重复等， 从而提高开发效率、降低错误率，并减轻开发者的工作负担。&lt;/p&gt; &#xA;&lt;p&gt;在这个场景下，取决于我们预期的生成质量，通常会由一大一微或一中一微两个模型组成，更大的模型在生成的质量上结果更好。结合，我们在 &lt;a href=&#34;https://github.com/unit-mesh/chocolate-factory&#34;&gt;Chocolate Factory&lt;/a&gt; 工具中的设计经验，通常这样的功能可以分为几步：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;理解用户意图：借助大模型理解用户意图，将其转换为对应的 AI Agent 能力调用或者 function calling 。&lt;/li&gt; &#xA; &lt;li&gt;转换意图搜索：借助模型将用户意图转换为对应的代码片段、文档或解释，结合传统搜索、路径搜索和向量化搜索等技术，进行搜索及排序。&lt;/li&gt; &#xA; &lt;li&gt;输出结果：交由大模型对最后的结果进行总结，输出给用户。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;作为一个 RAG 应用，其分为 indexing 和 query 两个部分。&lt;/p&gt; &#xA;&lt;p&gt;在 indexing 阶段，我们需要将代码库进行索引，并涉及到文本分割、向量化、数据库索引等技术。 其中最有挑战的一个内容是拆分，我们参考的折分规则是：&lt;a href=&#34;https://docs.sweep.dev/blogs/chunking-2m-files&#34;&gt;https://docs.sweep.dev/blogs/chunking-2m-files&lt;/a&gt; 。即：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;代码的平均 Token 到字符比例约为1:5（300 个 Token），而嵌入模型的 Token 上限为 512 个。&lt;/li&gt; &#xA; &lt;li&gt;1500 个字符大约对应于 40 行，大致相当于一个小到中等大小的函数或类。&lt;/li&gt; &#xA; &lt;li&gt;挑战在于尽可能接近 1500 个字符，同时确保分块在语义上相似且相关上下文连接在一起。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;在不同的场景下，我们也可以通过不同的方式进行折分，如在 &lt;a href=&#34;https://github.com/unit-mesh/chocolate-factory&#34;&gt;Chocolate Factory&lt;/a&gt; 是通过 AST 进行折分，以保证生成上下文的质量。&lt;/p&gt; &#xA;&lt;p&gt;在 querying 阶段，需要结合我们一些传统的搜索技术，如：向量化搜索、路径搜索等，以保证搜索的质量。同时，在中文场景下，我们也需要考虑到转换为中文 的问题，如：将英文转换为中文，以保证搜索的质量。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;相关工具：&lt;a href=&#34;https://github.com/BloopAI/bloop&#34;&gt;https://github.com/BloopAI/bloop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;相关资源： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.phodal.com/blog/prompt-strategy-code-semantic-search/&#34;&gt;Prompt 策略：代码库 AI 助手的语义化搜索设计&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;其它：日常辅助&lt;/h4&gt; &#xA;&lt;p&gt;对于日常辅助来说，我们也可以通过生成式 AI 来实现，如：自动创建 SQL DDL、自动创建测试用例、自动创建需求等。这些只需要通过自定义提示词， 结合特定的领域知识，便可以实现，这里不再赘述。&lt;/p&gt; &#xA;&lt;h2&gt;架构设计：上下文工程&lt;/h2&gt; &#xA;&lt;p&gt;除了模型之外，上下文也是影响 AI 辅助能力的重要因素。在我们构建 AutoDev 时，我们也发现了两种不同的上下文模式：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;相关上下文：基于静态代码分析的上下文生成，可以构建更好质量的上下文，以生成更高质量的代码和测试等，依赖于 IDE 的静态代码分析能力。&lt;/li&gt; &#xA; &lt;li&gt;相似上下文：基于相似式搜索的上下文，可以构建更多的上下文，以生成更多的代码和测试等，与平台能力无关。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;简单对比如下：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;相关上下文&lt;/th&gt; &#xA;   &lt;th&gt;相似上下文&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;检索技术&lt;/td&gt; &#xA;   &lt;td&gt;静态代码分析&lt;/td&gt; &#xA;   &lt;td&gt;相似式搜索&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;数据结构信息&lt;/td&gt; &#xA;   &lt;td&gt;AST、CFG&lt;/td&gt; &#xA;   &lt;td&gt;Similar Chunk&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;跨平台能力&lt;/td&gt; &#xA;   &lt;td&gt;依赖于 IDE，或者独立的解析器&lt;/td&gt; &#xA;   &lt;td&gt;不依赖具体平台&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;上下文质量&lt;/td&gt; &#xA;   &lt;td&gt;极高&lt;/td&gt; &#xA;   &lt;td&gt;高&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;生成结果&lt;/td&gt; &#xA;   &lt;td&gt;极高&lt;/td&gt; &#xA;   &lt;td&gt;高&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;构建成本&lt;/td&gt; &#xA;   &lt;td&gt;依赖于语言、平台&lt;/td&gt; &#xA;   &lt;td&gt;低&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;在支持 IDE 有限时，相关上下文的才会带来更高的&lt;strong&gt;性价高&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;相似上下文架构：GitHub Copilot 案例&lt;/h3&gt; &#xA;&lt;p&gt;GitHub Copilot 采用了相似上下文的架构模式，其精略的架构分层如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;监听用户操作（IDE API ）。监听用户的 Run Action、快捷键、UI 操作、输入等，以及最近的文档操作历史（20 个文件）。&lt;/li&gt; &#xA; &lt;li&gt;IDE 胶水层（Plugin）。作为 IDE 与底层 Agent 的胶水层，处理输入和输出。&lt;/li&gt; &#xA; &lt;li&gt;上下文构建（Agent）。JSON RPC Server，处理 IDE 的各种变化，对源码进行分析，封装为 “prompt” （疑似） 并发送给服务器。&lt;/li&gt; &#xA; &lt;li&gt;服务端（Server）。处理 prompt 请求，并交给 LLM 服务端处理。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;在 “公开” 的 &lt;a href=&#34;https://github.com/thakkarparth007/copilot-explorer&#34;&gt;Copilot-Explorer&lt;/a&gt; 项目的研究资料里，可以看到 Prompt 是如何构建出来的。如下是发送到的 prompt 请求：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;prefix&#34;: &#34;# Path: codeviz\\app.py\n#....&#34;,&#xA;  &#34;suffix&#34;: &#34;if __name__ == &#39;__main__&#39;:\r\n    app.run(debug=True)&#34;,&#xA;  &#34;isFimEnabled&#34;: true,&#xA;  &#34;promptElementRanges&#34;: [&#xA;    {&#xA;      &#34;kind&#34;: &#34;PathMarker&#34;,&#xA;      &#34;start&#34;: 0,&#xA;      &#34;end&#34;: 23&#xA;    },&#xA;    {&#xA;      &#34;kind&#34;: &#34;SimilarFile&#34;,&#xA;      &#34;start&#34;: 23,&#xA;      &#34;end&#34;: 2219&#xA;    },&#xA;    {&#xA;      &#34;kind&#34;: &#34;BeforeCursor&#34;,&#xA;      &#34;start&#34;: 2219,&#xA;      &#34;end&#34;: 3142&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;用于构建 prompt 的 &lt;code&gt;prefix&lt;/code&gt; 部分，是由 promptElements 构建了，其中包含了：&lt;code&gt;BeforeCursor&lt;/code&gt;, &lt;code&gt;AfterCursor&lt;/code&gt;, &lt;code&gt;SimilarFile&lt;/code&gt;, &lt;code&gt;ImportedFile&lt;/code&gt;, &lt;code&gt;LanguageMarker&lt;/code&gt;, &lt;code&gt;PathMarker&lt;/code&gt;, &lt;code&gt;RetrievalSnippet&lt;/code&gt; 等类型。从几种 &lt;code&gt;PromptElementKind&lt;/code&gt; 的名称，我们也可以看出其真正的含义。&lt;/li&gt; &#xA; &lt;li&gt;用于构建 prompt 的 &lt;code&gt;suffix&lt;/code&gt; 部分，则是由光标所在的部分决定的，根据 tokens 的上限（2048 ）去计算还有多少位置放下。而这里的 Token 计算则是真正的 LLM 的 token 计算，在 Copilot 里是通过 Cushman002 计算的，诸如于中文的字符的 token 长度是不一样的，如： &lt;code&gt;{ context: &#34;console.log(&#39;你好，世界&#39;)&#34;, lineCount: 1, tokenLength: 30 }&lt;/code&gt; ，其中 context 中的内容的 length 为 20，但是 tokenLength 是 30，中文字符共 5 个（包含 &lt;code&gt;，&lt;/code&gt; ）的长度，单个字符占的 token 就是 3。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如下是一个更详细的 Java 应用的上下文示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Path: src/main/cc/unitmesh/demo/infrastructure/repositories/ProductRepository.java&#xA;// Compare this snippet from src/main/cc/unitmesh/demo/domain/product/Product.java:&#xA;// ....&#xA;// Compare this snippet from src/main/cc/unitmesh/demo/application/ProductService.java:&#xA;// ...&#xA;// @Component&#xA;// public class ProductService {&#xA;//     //...&#xA;// }&#xA;// &#xA;package cc.unitmesh.demo.repositories;&#xA;&#xA;// ...&#xA;&#xA;@Component&#xA;public class ProductRepository {&#xA;//...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在计算上下文里，GitHub Copilot 采用的是 &lt;a href=&#34;https://en.wikipedia.org/wiki/Jaccard_index&#34;&gt;Jaccard 系数&lt;/a&gt; (Jaccard Similarity) ，这部分的实现是在 Agent 实现，更详细的逻辑可以参考： &lt;a href=&#34;https://github.com/mengjian-github/copilot-analysis&#34;&gt;花了大半个月，我终于逆向分析了Github Copilot&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;相关资源：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.phodal.com/blog/llm-context-engineering/&#34;&gt;上下文工程：基于 Github Copilot 的实时能力分析与思考&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;相关上下文架构：AutoDev 与 JetBrains AI Assistant 案例&lt;/h3&gt; &#xA;&lt;p&gt;如上所述，相关代码依赖于&lt;strong&gt;静态代码分析&lt;/strong&gt;，主要借助于代码的结构信息，如：AST、CFG、DDG 等。在不同的场景和平台之下，我们可以结合不同的静态代码分析工具， 如下是常见的一些静态代码分析工具：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;TreeSitter&lt;/a&gt;，由 GitHub 开发的用于生成高效的自定义语法分析器的框架。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/psi.html&#34;&gt;Intellij PSI&lt;/a&gt; （Program Structure Interface），由 JetBrains 开发的用于其 IDE 的静态代码分析接口。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://langserver.org/&#34;&gt;LSP&lt;/a&gt;（Language Server Protocol），由微软开发的用于 IDE 的通用语言服务器协议。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phodal/chapi&#34;&gt;Chapi&lt;/a&gt; (common hierarchical abstract parser implementation) ，由笔者（@phodal）开发的用于通用的静态代码分析工具。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;在补全场景下，通过静态代码分析，我们可以得到当前的上下文，如：当前的函数、当前的类、当前的文件等。如下是一个 AutoDev 的生成单元测试的上下文示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// here are related classes:&#xA;// &#39;filePath: /Users/phodal/IdeaProjects/untitled/src/main/java/cc/unitmesh/untitled/demo/service/BlogService.java&#xA;// class BlogService {&#xA;//   blogRepository&#xA;//   + public BlogPost createBlog(BlogPost blogDto)&#xA;//   + public BlogPost getBlogById(Long id)&#xA;//   + public BlogPost updateBlog(Long id, BlogPost blogDto)&#xA;//   + public void deleteBlog(Long id)&#xA;// }&#xA;// &#39;filePath: /Users/phodal/IdeaProjects/untitled/src/main/java/cc/unitmesh/untitled/demo/dto/CreateBlogRequest.java&#xA;// class CreateBlogRequest ...&#xA;// &#39;filePath: /Users/phodal/IdeaProjects/untitled/src/main/java/cc/unitmesh/untitled/demo/entity/BlogPost.java&#xA;// class BlogPost {...&#xA;@ApiOperation(value = &#34;Create a new blog&#34;)&#xA;@PostMapping(&#34;/&#34;)&#xA;public BlogPost createBlog(@RequestBody CreateBlogRequest request) {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在这个示例中，会分析 &lt;code&gt;createBlog&lt;/code&gt; 函数的上下文，获取函数的输入和输出类： &lt;code&gt;CreateBlogRequest&lt;/code&gt;、&lt;code&gt;BlogPost&lt;/code&gt; 信息，以及 BlogService 类信息，作为上下文（在注释中提供）提供给模型。在这时，模型会生成更准确的构造函数，以及更准确的测试用例。&lt;/p&gt; &#xA;&lt;p&gt;由于相关上下文依赖于对不同语言的静态代码分析、不同 IDE 的 API，所以，我们也需要针对不同的语言、不同的 IDE 进行适配。在构建成本上，相对于相似上下文成本更高。&lt;/p&gt; &#xA;&lt;h2&gt;步骤 1：构建 IDE 插件与度量体系设计&lt;/h2&gt; &#xA;&lt;p&gt;IDE、编辑器作为开发者的主要工具，其设计和学习成本也相对比较高。首先，我们可以用官方提供的模板生成：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-platform-plugin-template&#34;&gt;IDEA 插件模板&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/api/get-started/your-first-extension&#34;&gt;VSCode 插件生成&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;然后，再往上添加功能（是不是很简单），当然不是。以下是一些可以参考的 IDEA 插件资源：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-community&#34;&gt;Intellij Community 版本源码&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-sdk-code-samples&#34;&gt;IntelliJ SDK Docs Code Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intellij-rust/intellij-rust&#34;&gt;Intellij Rust&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;当然了，更合适的是参考&lt;a href=&#34;https://github.com/unit-mesh/auto-dev&#34;&gt;AutoDev 插件&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;JetBrains 插件&lt;/h3&gt; &#xA;&lt;p&gt;可以直接使用官方的模板来生成对应的插件：&lt;a href=&#34;https://github.com/JetBrains/intellij-platform-plugin-template&#34;&gt;https://github.com/JetBrains/intellij-platform-plugin-template&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/JetBrains/intellij-platform-plugin-template/raw/main/.github/readme/use-this-template.png&#34; alt=&#34;Use this template&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;对于 IDEA 插件实现来说，主要是通过 Action 和 Listener 来实现的，只需要在 &lt;code&gt;plugin.xml&lt;/code&gt; 中注册即可。 详细可以参考官方文档：&lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/welcome.html&#34;&gt;IntelliJ Platform Plugin SDK&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;版本兼容与兼容架构&lt;/h4&gt; &#xA;&lt;p&gt;由于我们前期未 AutoDev 考虑到对 IDE 版本的兼容问题，后期为了兼容旧版本的 IDE，我们需要对插件进行兼容性处理。所以，如官方文档：&lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/build-number-ranges.html&#34;&gt;Build Number Ranges&lt;/a&gt; 中所描述，我们可以看到不同版本，对于 JDK 的要求是不一样的，如下是不同版本的要求：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Branch number&lt;/th&gt; &#xA;   &lt;th&gt;IntelliJ Platform version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/233&#34;&gt;233&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2023.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/232&#34;&gt;232&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2023.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/231&#34;&gt;231&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2023.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/223&#34;&gt;223&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/222&#34;&gt;222&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.2 NOTE Java 17 is now required (&lt;a href=&#34;https://blog.jetbrains.com/platform/2022/08/intellij-project-migrates-to-java-17/&#34;&gt;blog post&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/221&#34;&gt;221&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/213&#34;&gt;213&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/212&#34;&gt;212&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/211&#34;&gt;211&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/203&#34;&gt;203&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020.3 NOTE Java 11 is now required (&lt;a href=&#34;https://blog.jetbrains.com/platform/2020/09/intellij-project-migrates-to-java-11/&#34;&gt;blog post&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;并配置到 &lt;code&gt;gradle.properties&lt;/code&gt; 中：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;pluginSinceBuild = 223&#xA;pluginUntilBuild = 233.*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;后续配置兼容性比较麻烦，可以参考 AutoDev 的设计。&lt;/p&gt; &#xA;&lt;h4&gt;补全模式：Inlay&lt;/h4&gt; &#xA;&lt;p&gt;在自动代码补全上，国内的厂商主要参考的是 GitHub Copilot 的实现，逻辑也不复杂。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;采用快捷键方式触发&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;其主要是在 Action 里监听用户的输入，然后:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;   &lt;th&gt;快捷键&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;requestCompletions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;获取当前的上下文，然后通过模型获取补全结果&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;applyInlays&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TAB&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;将补全结果展示在 IDE 上&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;disposeInlays&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ESC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;取消补全&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cycleNextInlays&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;切换到下一个补全结果&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cyclePrevInlays&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;[&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;切换到上一个补全结果&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;采用自动触发方式&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;其主要通过 &lt;code&gt;EditorFactoryListener&lt;/code&gt; 监听用户的输入，然后：根据不同的输入，触发不同的补全结果。核心代码如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class AutoDevEditorListener : EditorFactoryListener {&#xA;    override fun editorCreated(event: EditorFactoryEvent) {&#xA;        //...&#xA;        editor.document.addDocumentListener(AutoDevDocumentListener(editor), editorDisposable)&#xA;        editor.caretModel.addCaretListener(AutoDevCaretListener(editor), editorDisposable)&#xA;        //...&#xA;    }&#xA;&#xA;    class AutoDevCaretListener(val editor: Editor) : CaretListener {&#xA;        override fun caretPositionChanged(event: CaretEvent) {&#xA;            //...&#xA;            val wasTypeOver = TypeOverHandler.getPendingTypeOverAndReset(editor)&#xA;            //...&#xA;            llmInlayManager.disposeInlays(editor, InlayDisposeContext.CaretChange)&#xA;        }&#xA;    }&#xA;&#xA;    class AutoDevDocumentListener(val editor: Editor) : BulkAwareDocumentListener {&#xA;        override fun documentChangedNonBulk(event: DocumentEvent) {&#xA;            //...&#xA;            val llmInlayManager = LLMInlayManager.getInstance()&#xA;            llmInlayManager&#xA;                .editorModified(editor, changeOffset)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;再根据不同的输入，触发不同的补全结果，并对结构进行处理。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;渲染补全代码&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;随后，我们需要实现一个 Inlay Render，它继承自 &lt;code&gt;EditorCustomElementRenderer&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h4&gt;日常辅助功能开发&lt;/h4&gt; &#xA;&lt;p&gt;结合 IDE 的接口能力，我们需要添加对应的 Action，以及对应的 Group，以及对应的 Icon。如下是一个 Action 的示例：&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;add-to-group group-id=&#34;ShowIntentionsGroup&#34; relative-to-action=&#34;ShowIntentionActions&#34; anchor=&#34;after&#34;/&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;如下是 AutoDev 的一些 ActionGroup：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Group ID&lt;/th&gt; &#xA;   &lt;th&gt;AI 用途&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ShowIntentionsGroup&lt;/td&gt; &#xA;   &lt;td&gt;代码重构、代码解释、代码生成、代码测试&lt;/td&gt; &#xA;   &lt;td&gt;用于在代码上下文中显示提示，以及通过 &lt;code&gt;Alt + Enter&lt;/code&gt; 和 macOS 上的 &lt;code&gt;⌥ + Enter&lt;/code&gt; 快捷键来访问。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConsoleEditorPopupMenu&lt;/td&gt; &#xA;   &lt;td&gt;修复错误&lt;/td&gt; &#xA;   &lt;td&gt;在控制台中显示的菜单，如程序运行结构的控制台。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vcs.MessageActionGroup&lt;/td&gt; &#xA;   &lt;td&gt;代码信息生成&lt;/td&gt; &#xA;   &lt;td&gt;用于在 VCS 中编写提交信息的菜单。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vcs.Log.ContextMenu&lt;/td&gt; &#xA;   &lt;td&gt;代码审查、代码解释、代码生成&lt;/td&gt; &#xA;   &lt;td&gt;用于在 VCS 中查看日志的菜单，可实现的功能：AI 检视代码、生成发布日志。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EditorPopupMenu&lt;/td&gt; &#xA;   &lt;td&gt;皆可&lt;/td&gt; &#xA;   &lt;td&gt;右键菜单，还可添加对应的 ActionGroup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;在编写 ShowIntentionsGroup 时，我们可以参考 AutoDev 的实现来构建对应的 Group：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#xA;&amp;lt;group id=&#34;AutoDevIntentionsActionGroup&#34; class=&#34;cc.unitmesh.devti.intentions.IntentionsActionGroup&#34;&#xA;       icon=&#34;cc.unitmesh.devti.AutoDevIcons.AI_COPILOT&#34; searchable=&#34;false&#34;&amp;gt;&#xA;    &amp;lt;add-to-group group-id=&#34;ShowIntentionsGroup&#34; relative-to-action=&#34;ShowIntentionActions&#34; anchor=&#34;after&#34;/&amp;gt;&#xA;&amp;lt;/group&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;多语言上下文架构&lt;/h4&gt; &#xA;&lt;p&gt;由于 Intellij 的平台策略，使得运行于 Java IDE（Intellij IDEA）与在其它 IDE 如 Python IDE（Pycharm）之间的差异性变得更大。我们需要提供基于多平台产品的兼容性，详细介绍可以参考：&lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html&#34;&gt;Plugin Compatibility with IntelliJ Platform Products&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;首先，将插件的架构进一步模块化，即针对于不同的语言，提供不同的模块。如下是 AutoDev 的模块化架构：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java/   # Java 语言插件&#xA;  src/main/java/cc/unitmesh/autodev/ # Java 语言入口&#xA;  src/main/resources/META-INF/plugin.xml&#xA;plugin/ # 多平台入口&#xA;  src/main/resources/META-INF/plugin.xml&#xA;src/    # 即核心模块&#xA;  main/resource/META-INF/core.plugin.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在 &lt;code&gt;plugin/plugin.xml&lt;/code&gt; 中，我们需要添加对应的 &lt;code&gt;depends&lt;/code&gt;，以及 &lt;code&gt;extensions&lt;/code&gt;，如下是一个示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;idea-plugin package=&#34;cc.unitmesh&#34; xmlns:xi=&#34;http://www.w3.org/2001/XInclude&#34; allow-bundled-update=&#34;true&#34;&amp;gt;&#xA;    &amp;lt;xi:include href=&#34;/META-INF/core.xml&#34; xpointer=&#34;xpointer(/idea-plugin/*)&#34;/&amp;gt;&#xA;    &amp;lt;content&amp;gt;&#xA;        &amp;lt;module name=&#34;cc.unitmesh.java&#34;/&amp;gt;&#xA;            &amp;lt;!--  其它模块 --&amp;gt;&#xA;    &amp;lt;/content&amp;gt;&#xA;&amp;lt;/idea-plugin&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;而在 &lt;code&gt;java/plugin.xml&lt;/code&gt; 中，我们需要添加对应的 &lt;code&gt;depends&lt;/code&gt;，以及 &lt;code&gt;extensions&lt;/code&gt;，如下是一个示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;idea-plugin package=&#34;cc.unitmesh.java&#34;&amp;gt;&#xA;  &amp;lt;!--suppress PluginXmlValidity --&amp;gt;&#xA;  &amp;lt;dependencies&amp;gt;&#xA;    &amp;lt;plugin id=&#34;com.intellij.modules.java&#34;/&amp;gt;&#xA;    &amp;lt;plugin id=&#34;org.jetbrains.plugins.gradle&#34;/&amp;gt;&#xA;  &amp;lt;/dependencies&amp;gt;&#xA;&amp;lt;/idea-plugin&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;随后，Intellij 会自动加载对应的模块，以实现多语言的支持。根据我们预期支持的不同语言，便需要对应的 &lt;code&gt;plugin.xml&lt;/code&gt;，诸如于：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cc.unitmesh.javascript.xml&#xA;cc.unitmesh.rust.xml&#xA;cc.unitmesh.python.xml&#xA;cc.unitmesh.kotlin.xml&#xA;cc.unitmesh.java.xml&#xA;cc.unitmesh.go.xml&#xA;cc.unitmesh.cpp.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;最后，在不同的语言模块里，实现对应的功能即可。&lt;/p&gt; &#xA;&lt;h3&gt;上下文构建&lt;/h3&gt; &#xA;&lt;p&gt;为了简化这个过程，我们使用 Unit Eval 来展示如何构建两种类似的上下文。&lt;/p&gt; &#xA;&lt;h4&gt;静态代码分析&lt;/h4&gt; &#xA;&lt;p&gt;通过静态代码分析，我们可以得到当前的函数、当前的类、当前的文件等。再结合路径相似性，寻找最贴进的上下文。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;private fun findRelatedCode(container: CodeContainer): List&amp;lt;CodeDataStruct&amp;gt; {&#xA;    // 1. collects all similar data structure by imports if exists in a file tree&#xA;    val byImports = container.Imports&#xA;        .mapNotNull {&#xA;            context.fileTree[it.Source]?.container?.DataStructures&#xA;        }&#xA;        .flatten()&#xA;&#xA;    // 2. collects by inheritance tree for some node in the same package&#xA;    val byInheritance = container.DataStructures&#xA;        .map {&#xA;            (it.Implements + it.Extend).mapNotNull { i -&amp;gt;&#xA;                context.fileTree[i]?.container?.DataStructures&#xA;            }.flatten()&#xA;        }&#xA;        .flatten()&#xA;&#xA;    val related = (byImports + byInheritance).distinctBy { it.NodeName }&#xA;    // 3. convert all similar data structure to uml&#xA;    return related&#xA;}&#xA;&#xA;class RelatedCodeStrategyBuilder(private val context: JobContext) : CodeStrategyBuilder {&#xA;    override fun build(): List&amp;lt;TypedIns&amp;gt; {&#xA;        // ...&#xA;        val findRelatedCodeDs = findRelatedCode(container)&#xA;        val relatedCodePath = findRelatedCodeDs.map { it.FilePath }&#xA;        val jaccardSimilarity = SimilarChunker.pathLevelJaccardSimilarity(relatedCodePath, currentPath)&#xA;        val relatedCode = jaccardSimilarity.mapIndexed { index, d -&amp;gt;&#xA;            findRelatedCodeDs[index] to d&#xA;        }.sortedByDescending {&#xA;            it.second&#xA;        }.take(3).map {&#xA;            it.first&#xA;        }&#xA;        //...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;上述的代码，我们可以通过代码的 Imports 信息作为相关代码的一部分。再通过代码的继承关系，来寻找相关的代码。最后，通过再路径相似性，来寻找最贴近的上下文。&lt;/p&gt; &#xA;&lt;h4&gt;相关代码分析&lt;/h4&gt; &#xA;&lt;p&gt;先寻找，再通过代码相似性，来寻找相关的代码。核心逻辑所示：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun pathLevelJaccardSimilarity(chunks: List&amp;lt;String&amp;gt;, text: String): List&amp;lt;Double&amp;gt; {&#xA;    //...&#xA;}&#xA;fun tokenize(chunk: String): List&amp;lt;String&amp;gt; {&#xA;    return chunk.split(Regex(&#34;[^a-zA-Z0-9]&#34;)).filter { it.isNotBlank() }&#xA;}&#xA;fun similarityScore(set1: Set&amp;lt;String&amp;gt;, set2: Set&amp;lt;String&amp;gt;): Double {&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;详细见：&lt;a href=&#34;https://github.com/unit-mesh/unit-eval/raw/master/unit-core/src/main/kotlin/cc/unitmesh/core/intelli/SimilarChunker.kt&#34;&gt;SimilarChunker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;VSCode 插件&lt;/h3&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;h4&gt;TreeSitter&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;TreeSitter 是一个用于生成高效的自定义语法分析器的框架，由 GitHub 开发。它使用 LR（1）解析器，这意味着它可以在 O（n）时间内解析任何语言，而不是 O（n²）时间。它还使用了一种称为“语法树的重用”的技术，该技术使其能够在不重新解析整个文件的情况下更新语法树。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;由于 TreeSitter 已经提供了多语言的支持，你可以使用 Node.js、Rust 等语言来构建对应的插件。详细见：&lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;TreeSitter&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;根据我们的意图不同，使用 TreeSitter 也有不同的方式：&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;解析 Symbol&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;在代码自然语言搜索引擎 &lt;a href=&#34;https://github.com/BloopAI/bloop&#34;&gt;Bloop&lt;/a&gt; 中，我们使用 TreeSitter 来解析 Symbol，以实现更好的搜索质量。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;;; methods&#xA;(method_declaration &#xA;  name: (identifier) @hoist.definition.method)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;随后，根据不同的类型来决定如何显示：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;pub static JAVA: TSLanguageConfig = TSLanguageConfig {&#xA;    language_ids: &amp;amp;[&#34;Java&#34;],&#xA;    file_extensions: &amp;amp;[&#34;java&#34;],&#xA;    grammar: tree_sitter_java::language,&#xA;    scope_query: MemoizedQuery::new(include_str!(&#34;./scopes.scm&#34;)),&#xA;    hoverable_query: MemoizedQuery::new(&#xA;        r#&#34;&#xA;        [(identifier)&#xA;         (type_identifier)] @hoverable&#xA;        &#34;#,&#xA;    ),&#xA;    namespaces: &amp;amp;[&amp;amp;[&#xA;        // variables&#xA;        &#34;local&#34;,&#xA;        // functions&#xA;        &#34;method&#34;,&#xA;        // namespacing, modules&#xA;        &#34;package&#34;,&#xA;        &#34;module&#34;,&#xA;        // types&#xA;        &#34;class&#34;,&#xA;        &#34;enum&#34;,&#xA;        &#34;enumConstant&#34;,&#xA;        &#34;record&#34;,&#xA;        &#34;interface&#34;,&#xA;        &#34;typedef&#34;,&#xA;        // misc.&#xA;        &#34;label&#34;,&#xA;    ]],&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chunk 代码&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;如下是 &lt;a href=&#34;https://docs.sweep.dev/blogs/chunking-improvements&#34;&gt;Improving LlamaIndex’s Code Chunker by Cleaning Tree-Sitter CSTs&lt;/a&gt; 中的 TreeSitter 的使用方式：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tree_sitter import Tree&#xA; &#xA;def chunker(&#xA;&#x9;tree: Tree,&#xA;&#x9;source_code: bytes,&#xA;&#x9;MAX_CHARS=512 * 3,&#xA;&#x9;coalesce=50 # Any chunk less than 50 characters long gets coalesced with the next chunk&#xA;) -&amp;gt; list[Span]:&#xA; &#xA;    # 1. Recursively form chunks based on the last post (https://docs.sweep.dev/blogs/chunking-2m-files)&#xA;    def chunk_node(node: Node) -&amp;gt; list[Span]:&#xA;        chunks: list[Span] = []&#xA;        current_chunk: Span = Span(node.start_byte, node.start_byte)&#xA;        node_children = node.children&#xA;        for child in node_children:&#xA;            if child.end_byte - child.start_byte &amp;gt; MAX_CHARS:&#xA;                chunks.append(current_chunk)&#xA;                current_chunk = Span(child.end_byte, child.end_byte)&#xA;                chunks.extend(chunk_node(child))&#xA;            elif child.end_byte - child.start_byte + len(current_chunk) &amp;gt; MAX_CHARS:&#xA;                chunks.append(current_chunk)&#xA;                current_chunk = Span(child.start_byte, child.end_byte)&#xA;            else:&#xA;                current_chunk += Span(child.start_byte, child.end_byte)&#xA;        chunks.append(current_chunk)&#xA;        return chunks&#xA;    chunks = chunk_node(tree.root_node)&#xA; &#xA;    # 2. Filling in the gaps&#xA;    for prev, curr in zip(chunks[:-1], chunks[1:]):&#xA;        prev.end = curr.start&#xA;    curr.start = tree.root_node.end_byte&#xA; &#xA;    # 3. Combining small chunks with bigger ones&#xA;    new_chunks = []&#xA;    current_chunk = Span(0, 0)&#xA;    for chunk in chunks:&#xA;        current_chunk += chunk&#xA;        if non_whitespace_len(current_chunk.extract(source_code)) &amp;gt; coalesce \&#xA;            and &#34;\n&#34; in current_chunk.extract(source_code):&#xA;            new_chunks.append(current_chunk)&#xA;            current_chunk = Span(chunk.end, chunk.end)&#xA;    if len(current_chunk) &amp;gt; 0:&#xA;        new_chunks.append(current_chunk)&#xA; &#xA;    # 4. Changing line numbers&#xA;    line_chunks = [Span(get_line_number(chunk.start, source_code),&#xA;                    get_line_number(chunk.end, source_code)) for chunk in new_chunks]&#xA; &#xA;    # 5. Eliminating empty chunks&#xA;    line_chunks = [chunk for chunk in line_chunks if len(chunk) &amp;gt; 0]&#xA; &#xA;    return line_chunks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;度量体系设计&lt;/h3&gt; &#xA;&lt;h4&gt;常用指标&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;代码接受率&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;AI 生成的代码被开发者接受的比例。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;入库率&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;AI 生成的代码被开发者入库的比例。&lt;/p&gt; &#xA;&lt;h4&gt;开发者体验驱动&lt;/h4&gt; &#xA;&lt;p&gt;如微软和 GitHub 所构建的：&lt;a href=&#34;https://dl.acm.org/doi/10.1145/3595878&#34;&gt;DevEx: What Actually Drives Productivity: The developer-centric approach to measuring and improving productivity&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;-&lt;/th&gt; &#xA;   &lt;th&gt;反馈回路&lt;/th&gt; &#xA;   &lt;th&gt;认知负荷&lt;/th&gt; &#xA;   &lt;th&gt;流畅状态&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;感知 &lt;br&gt; 人的态度和观点&lt;/td&gt; &#xA;   &lt;td&gt;• 对自动化测试速度和输出的满意度&lt;br&gt;• 对验证本地更改所需时间的满意度&lt;br&gt;• 对部署更改至生产环境所需时间的满意度&lt;/td&gt; &#xA;   &lt;td&gt;• 对代码库复杂性的感知&lt;br&gt;• 调试生产系统的易用性&lt;br&gt;• 理解文档的易用性&lt;/td&gt; &#xA;   &lt;td&gt;• 对专注度和避免中断的感知&lt;br&gt;• 对任务或项目目标清晰度的满意度&lt;br&gt;• 值班对生产的中断感知&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;工作流 &lt;br&gt; 系统和流程行为&lt;/td&gt; &#xA;   &lt;td&gt;• 生成CI结果所需时间&lt;br&gt;• 代码审查周转时间&lt;br&gt;• 部署交付时间（将更改发布至生产所需时间）&lt;/td&gt; &#xA;   &lt;td&gt;• 获取技术问题答案所需时间&lt;br&gt;• 部署更改所需的手动步骤&lt;br&gt;• 文档改进的频率&lt;/td&gt; &#xA;   &lt;td&gt;• 无会议或中断的时间块数量&lt;br&gt;• 未计划任务或请求的频率&lt;br&gt;• 需要团队关注的事故频率&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;绩效指标 &lt;br&gt; 北极星指标&lt;/td&gt; &#xA;   &lt;td&gt;• 传递软件的整体感知轻松度&lt;br&gt;• 员工参与度或满意度&lt;br&gt;• 感知生产力&lt;/td&gt; &#xA;   &lt;td&gt;同左&lt;/td&gt; &#xA;   &lt;td&gt;同左&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;步骤 2：模型评估体系与微调试验&lt;/h2&gt; &#xA;&lt;p&gt;主流的论文和评估数据集以 &lt;a href=&#34;https://github.com/openai/human-eval&#34;&gt;HumanEval&lt;/a&gt; 为主，而我们想构建的是面向企业用途的编码模型。所以，我们暂时 不会针对于这个数据集进行评估，而是结合我们的业务场景，来构建对应的评估体系。&lt;/p&gt; &#xA;&lt;p&gt;简单来说，HumanEval 以 Python 语言为主，导致各种模型、数据集在 Python 能力强，而像 Java 的能力弱、少。所以，我们在持续优化自身的数据集， 并构建更好的数据工程。&lt;/p&gt; &#xA;&lt;p&gt;我们的微调模型下载：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/unit-mesh/autodev-deepseek-6.7b-finetunes&#34;&gt;https://huggingface.co/unit-mesh/autodev-deepseek-6.7b-finetunes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenBayes: &lt;a href=&#34;https://openbayes.com/console/phodal/models/rCmer1KQSgp/9/overview&#34;&gt;deepseek-coder-6.7b-instruct-finetune&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;由于我们使用的是国内云 GPU，受限于网络问题，我们在 HuggingFace 上的模型更新速度比较慢（有时速度慢，就懒得更新了）。&lt;/p&gt; &#xA;&lt;h3&gt;模型选择与测试&lt;/h3&gt; &#xA;&lt;p&gt;在结合公开 API 的大语言模型之后，我们就可以构建基本的 IDE 功能。随后，应该进一步探索适合于内部的模型，以适合于组织内部的效果。&lt;/p&gt; &#xA;&lt;h4&gt;模型选择&lt;/h4&gt; &#xA;&lt;p&gt;现有的开源模型里采用 LLaMA 架构相对比较多，并且由于其模型的质量比较高，其生态也相对比较完善。因此，我们也采用 LLaMA 架构来构建，即：&lt;a href=&#34;https://huggingface.co/deepseek-ai/deepseek-coder-6.7b-base&#34;&gt;DeepSeek Coder&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h4&gt;OpenBayes 平台部署与测试&lt;/h4&gt; &#xA;&lt;p&gt;随后，我们需要部署模型，并提供一个对应的 API，这个 API 需要与我们的 IDE 接口保持一致。这里我们采用了 OpenBayes 平台来部署模型。详细见：&lt;code&gt;code/server&lt;/code&gt; 目录下的相关代码。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;python server-python38.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如下是适用于 OpenBayes 的代码，以在后台提供公网 API：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if __name__ == &#34;__main__&#34;:&#xA;    try:&#xA;        meta = requests.get(&#39;http://localhost:21999/gear-status&#39;, timeout=5).json()&#xA;        url = meta[&#39;links&#39;].get(&#39;auxiliary&#39;)&#xA;        if url:&#xA;            print(&#34;打开该链接访问:&#34;, url)&#xA;    except Exception:&#xA;        pass&#xA;&#xA;    uvicorn.run(app, host=&#34;0.0.0.0&#34;, port=8080)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;随后，在 IDE 插件中，我们就可以结合他们来测试功能。&lt;/p&gt; &#xA;&lt;h4&gt;大规模模型部署&lt;/h4&gt; &#xA;&lt;p&gt;结合模型量化技术，如 INT4，可以实现 6B 模型在消费级的显卡上进行本地部署。&lt;/p&gt; &#xA;&lt;p&gt;（TODO)&lt;/p&gt; &#xA;&lt;h3&gt;模型微调&lt;/h3&gt; &#xA;&lt;p&gt;有监督微调（SFT）是指采用预先训练好的神经网络模型，并针对你自己的专门任务在少量的监督数据上对其进行重新训练的技术。&lt;/p&gt; &#xA;&lt;h3&gt;数据驱动的微调方法&lt;/h3&gt; &#xA;&lt;p&gt;结合 【&lt;a href=&#34;https://cloud.baidu.com/doc/WENXINWORKSHOP/s/Xlkb0e6eu&#34;&gt;SFT最佳实践&lt;/a&gt; 】中提供的权衡考虑：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;样本数量少于 1000 且需注重基座模型的通用能力：优先考虑 LoRA。&lt;/li&gt; &#xA; &lt;li&gt;如果特定任务数据样本较多且主要注重这些任务效果：使用 SFT。&lt;/li&gt; &#xA; &lt;li&gt;如果希望结合两者优势：将特定任务的数据与通用任务数据进行混合配比后，再使用这些训练方法能得到更好的效果。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这就意味着：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;任务类型&lt;/th&gt; &#xA;   &lt;th&gt;样本数量&lt;/th&gt; &#xA;   &lt;th&gt;通用编码数据集&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IDE AI 功能支持&lt;/td&gt; &#xA;   &lt;td&gt;少于 1000&lt;/td&gt; &#xA;   &lt;td&gt;需要&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;内部代码补全&lt;/td&gt; &#xA;   &lt;td&gt;大于 10,000&lt;/td&gt; &#xA;   &lt;td&gt;不需要&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IDE + 代码补全&lt;/td&gt; &#xA;   &lt;td&gt;大于 10,000&lt;/td&gt; &#xA;   &lt;td&gt;需要&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;通常来说，我们测试是结合 IDE 的功能，以及代码补全的功能，因此，我们需要合并两个数据集。&lt;/p&gt; &#xA;&lt;h3&gt;数据集构建&lt;/h3&gt; &#xA;&lt;p&gt;根据不同的模型，其所需要的指令也是不同的。如下是一个基于 DeepSeek + DeepSpeed 的数据集示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;instruction&#34;: &#34;Write unit test for following code.\n&amp;lt;SomeCode&amp;gt;&#34;,&#xA;  &#34;output&#34;: &#34;&amp;lt;TestCode&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;下面是 LLaMA 模型的数据集示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;instruction&#34;: &#34;Write unit test for following code.&#34;,&#xA;  &#34;input&#34;: &#34;&amp;lt;SomeCode&amp;gt;&#34;,&#xA;  &#34;output&#34;: &#34;&amp;lt;TestCode&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;数据集构建&lt;/h4&gt; &#xA;&lt;p&gt;我们构建 &lt;a href=&#34;https://github.com/unit-mesh/unit-eval&#34;&gt;Unit Eval&lt;/a&gt; 项目，以生成更适合于 AutoDev 的数据集。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;代码补全。行内（Inline）、块内（InBlock）、块间（AfterBlock）三种场景。&lt;/li&gt; &#xA; &lt;li&gt;单元测试生成。生成符合上下文的单元测试。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;而为了提供 IDE 中的其他功能支持，我们结合了开源数据集，以及数据蒸馏的方式来构建数据集。&lt;/p&gt; &#xA;&lt;h4&gt;开源数据集&lt;/h4&gt; &#xA;&lt;p&gt;在 GitHub、HuggingFace 等平台上，有一些开源的数据集。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2312.02120&#34;&gt;Magicoder: Source Code Is All You Need&lt;/a&gt; 中开源的两个数据集：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/ise-uiuc/Magicoder-OSS-Instruct-75K&#34;&gt;https://huggingface.co/datasets/ise-uiuc/Magicoder-OSS-Instruct-75K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/ise-uiuc/Magicoder-Evol-Instruct-110K&#34;&gt;https://huggingface.co/datasets/ise-uiuc/Magicoder-Evol-Instruct-110K&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;在 License 合适的情况下，我们可以直接使用这些数据集；在不合适的情况下，我们可以拿来做一些实验。&lt;/p&gt; &#xA;&lt;h4&gt;数据蒸馏&lt;/h4&gt; &#xA;&lt;p&gt;数据蒸馏。过去的定义是，即将大型真实数据集（训练集）作为输入，并输出一个小的合成蒸馏数据集。但是，我们要做的是直接用 OpenAI 这一类公开 API 的模型：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;生成符合预期的数据集。&lt;/li&gt; &#xA; &lt;li&gt;对数据集进行筛选，以保证数据集的质量。&lt;/li&gt; &#xA; &lt;li&gt;对数据集进行扩充，以保证数据集的多样性。&lt;/li&gt; &#xA; &lt;li&gt;对数据集进行标注，以保证数据集的可用性。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;微调示例：OpenBayes + DeepSeek&lt;/h3&gt; &#xA;&lt;p&gt;在这里我们使用的是，以及 DeepSeek 官方提供的脚本来进行微调。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;云 GPU： &lt;a href=&#34;https://openbayes.com/console/signup?r=phodal_uVxU&#34;&gt;OpenBayes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GPU 算力：4090x2 （目测和微调参数有关，但是我试了几次 4090 还是不行）&lt;/li&gt; &#xA; &lt;li&gt;微调脚本：&lt;a href=&#34;https://github.com/deepseek-ai/DeepSeek-Coder&#34;&gt;https://github.com/deepseek-ai/DeepSeek-Coder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;数据集：6000&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;我在 OpenBayes 上传了的 DeepSeek 模型：&lt;a href=&#34;https://openbayes.com/console/phodal/models/zV91IERweWd/1/overview&#34;&gt;OpenBayes deepseek-coder-6.7b-instruct&lt;/a&gt;，你可以在创建时直接使用这个模型。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/unit-mesh/build-your-ai-coding-assistant/master/images/finetune-model-choice.jpg&#34; alt=&#34;Finetune Model Choice&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;数据集示例 1&lt;/h4&gt; &#xA;&lt;p&gt;由 Unit Eval + OSS Instruct 数据集构建而来：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;150 条补全（Inline，InBlock，AfterBlock）数据集。&lt;/li&gt; &#xA; &lt;li&gt;150 条单元测试数据集。&lt;/li&gt; &#xA; &lt;li&gt;3700 条 OSS Instruct 数据集。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;而从结果来看，如何保持高质量的数据是最大的挑战。&lt;/p&gt; &#xA;&lt;p&gt;测试视频：&lt;a href=&#34;https://www.bilibili.com/video/BV1si4y1h7Vw/&#34;&gt;开源 AI 辅助编程方案：Unit Mesh 端到端打通 v0.0.1 版本&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;在 Unit Eval &lt;a href=&#34;https://github.com/unit-mesh/unit-eval/releases/tag/v0.3.2&#34;&gt;0.3.2&lt;/a&gt; 版本里&lt;/p&gt; &#xA;&lt;p&gt;组成如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Merge and shuffle records from different files&#xA;merge_jsonl(&#xA;    output_file=merged_file,&#xA;    input_files=[oss_instruction, &#39;code_bugfix_cleaned_5K.json&#39;, &#39;codeGPT_CN_cleaned_20K.json&#39;,&#xA;                 &#39;code_summarization_CN_cleaned_10K.json&#39;, &#39;java-code-completion.jsonl&#39;, &#39;java-test-gen.jsonl&#39;,&#xA;                 &#39;kotlin-completion-11929.jsonl&#39;, &#39;kotlin-java-comments-3715.jsonl&#39;],&#xA;    lines_per_file=[4000, 4000, 15000, 8000, 5000, 3000, 3000, 2000 ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;参数示例：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DATA_PATH=&#34;/openbayes/home/summary.jsonl&#34;&#xA;OUTPUT_PATH=&#34;/openbayes/home/output&#34;&#xA;&#xA;MODEL_PATH=&#34;/openbayes/input/input0/&#34;&#xA;&#xA;!cd DeepSeek-Coder/finetune &amp;amp;&amp;amp; deepspeed finetune_deepseekcoder.py \&#xA;    --model_name_or_path $MODEL_PATH \&#xA;    --data_path $DATA_PATH \&#xA;    --output_dir $OUTPUT_PATH \&#xA;    --num_train_epochs 1 \&#xA;    --model_max_length 1024 \&#xA;    --per_device_train_batch_size 8 \&#xA;    --per_device_eval_batch_size 1 \&#xA;    --gradient_accumulation_steps 1 \&#xA;    --evaluation_strategy &#34;no&#34; \&#xA;    --save_strategy &#34;steps&#34; \&#xA;    --save_steps 375 \&#xA;    --save_total_limit 10 \&#xA;    --learning_rate 1e-4 \&#xA;    --warmup_steps 10 \&#xA;    --logging_steps 1 \&#xA;    --lr_scheduler_type &#34;cosine&#34; \&#xA;    --gradient_checkpointing True \&#xA;    --report_to &#34;tensorboard&#34; \&#xA;    --deepspeed configs/ds_config_zero3.json \&#xA;    --bf16 True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;运行日志：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...&#xA;  0%|                                                   | 0/375 [00:00&amp;lt;?, ?it/s]`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...&#xA;{&#39;loss&#39;: 0.6934, &#39;learning_rate&#39;: 0.0, &#39;epoch&#39;: 0.0}                            &#xA;{&#39;loss&#39;: 0.3086, &#39;learning_rate&#39;: 3.0102999566398115e-05, &#39;epoch&#39;: 0.01}        &#xA;{&#39;loss&#39;: 0.3693, &#39;learning_rate&#39;: 4.771212547196624e-05, &#39;epoch&#39;: 0.01}         &#xA;{&#39;loss&#39;: 0.3374, &#39;learning_rate&#39;: 6.020599913279623e-05, &#39;epoch&#39;: 0.01}         &#xA;{&#39;loss&#39;: 0.4744, &#39;learning_rate&#39;: 6.989700043360187e-05, &#39;epoch&#39;: 0.01}         &#xA;{&#39;loss&#39;: 0.3465, &#39;learning_rate&#39;: 7.781512503836436e-05, &#39;epoch&#39;: 0.02}         &#xA;{&#39;loss&#39;: 0.4258, &#39;learning_rate&#39;: 8.450980400142567e-05, &#39;epoch&#39;: 0.02}         &#xA;{&#39;loss&#39;: 0.4027, &#39;learning_rate&#39;: 9.030899869919434e-05, &#39;epoch&#39;: 0.02}         &#xA;{&#39;loss&#39;: 0.2844, &#39;learning_rate&#39;: 9.542425094393248e-05, &#39;epoch&#39;: 0.02}         &#xA;{&#39;loss&#39;: 0.3783, &#39;learning_rate&#39;: 9.999999999999999e-05, &#39;epoch&#39;: 0.03}   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其它：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;详细的 Notebook 见：&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/build-your-ai-coding-assistant/master/code/finetune/finetune.ipynb&#34;&gt;code/finetune/finetune.ipynb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;微调参数，详细见：&lt;a href=&#34;https://huggingface.co/docs/transformers/v4.36.1/zh/main_classes/trainer&#34;&gt;Trainer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;发布模型&lt;/h3&gt; &#xA;&lt;p&gt;发布到 &lt;a href=&#34;https://huggingface.co/docs/hub/repositories-getting-started&#34;&gt;Huggingface&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;先配置 lfs：&lt;code&gt;git lfs install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git init .&#xA;git lfs track &#34;*.safetensors&#34;&#xA;git add .gitattributes &#xA;&#xA;git add .&#xA;git commit -m &#34;First model version&#34;&#xA;git push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;步骤 3：围绕意图的数据工程与模型演进&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://unitmesh.cc/uniteval/overview.png&#34; alt=&#34;Unit Tools Workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unit Eval 是一个针对于构建高质量代码微调的开源工具箱。其三个核心设计原则：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;统一提示词（Prompt）。统一工具-微调-评估底层的提示词。&lt;/li&gt; &#xA; &lt;li&gt;代码质量管道。诸如于代码复杂性、代码坏味道、测试坏味道、API 设计味道等。&lt;/li&gt; &#xA; &lt;li&gt;可扩展的质量阈。自定义规则、自定义阈值、自定义质量类型等。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;即要解决易于测试的数据集生成，以及易于评估的模型评估问题。&lt;/p&gt; &#xA;&lt;h3&gt;IDE 指令设计与演化&lt;/h3&gt; &#xA;&lt;p&gt;AutoDev 早期采用的是 OpenAI API，其模型能力较强，因此在指令设计上比较强大。而当我们需要微调里，我们需要更简单、易于区分的指令来构建。&lt;/p&gt; &#xA;&lt;h4&gt;模板指令&lt;/h4&gt; &#xA;&lt;p&gt;如下是在 AutoDev 中精简化后的 Prompt 示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Write unit test for following code.&#xA;&#xA;${context.testFramework}&#xA;${context.coreFramework}&#xA;${context.testSpec}&#xA;&#xA;```${context.language}&#xA;${context.related_model} &#xA;${context.selection}&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中包含了：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;技术栈上下文&lt;/li&gt; &#xA; &lt;li&gt;测试技术栈上下文&lt;/li&gt; &#xA; &lt;li&gt;代码块（类、函数）的输入和输出信息&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;而这个模板指令，也是我们在 Unit Eval 中所采用的指令。&lt;/p&gt; &#xA;&lt;h4&gt;统一指令模板&lt;/h4&gt; &#xA;&lt;p&gt;为了实现统一的指令模板，我们引入了 Apache Velocity 模板引擎来实现，并通过 Chocolate Factory 实现底层的通用逻辑：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;工具侧。在 IDE 插件中，直接通过 Velocity 模板引擎、基于 Chocolate Factory 来实现指令的生成。&lt;/li&gt; &#xA; &lt;li&gt;数据集成。在 Unit Eval 中，生成适用于模板的数据集。&lt;/li&gt; &#xA; &lt;li&gt;结果评估。基于 Chocolate Factory 的实现，对模板的结果进行评估。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;高质量数据集生成&lt;/h3&gt; &#xA;&lt;p&gt;年初（2023 年 4 月），我们做了一系列的代码微调探索， 在那篇 《&lt;a href=&#34;https://www.phodal.com/blog/llm-lora-for-engineering-effectiveness-solution/&#34;&gt;AI 研发提效的正确姿势：开源 LLM + LoRA&lt;/a&gt; 》里，企业应该开始着力于：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;规范与流程标准化&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;工程化的数据准备&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;高质量的脱敏数据&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;只有微调是不够的，模型需要与工具紧密相结合。&lt;/p&gt; &#xA;&lt;h4&gt;质量流水线设计示例&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://unitmesh.cc/uniteval/code-quality-workflow.png&#34; alt=&#34;Code Quality Workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;基于 Thoughtworks 在软件工程的丰富经验，以及 Thoughtworks 的架构治理开源工具 &lt;a href=&#34;https://archguard.org/&#34;&gt;ArchGuard&lt;/a&gt; 作为基础设施。 在 UnitEval 中，我们也将代码质量的筛选构建成 pipeline 的方式：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;代码复杂度。在当前的版本设计里，可以直接通过代码复杂度来决定是否放代码文件进入数据库。&lt;/li&gt; &#xA; &lt;li&gt;不同的坏味道检查类型。诸如于代码坏味道、测试坏味道等。&lt;/li&gt; &#xA; &lt;li&gt;特定的规则检查。Controller 的 API 设计、Repository 的 SQL 设计 等。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;而基于 ArchGuard 中所提供的丰富代码质量和架构质量分析能力，诸如 OpenAPI、 SCA（软件依赖分析）能力，我们也在思考未来是否也加入相关的设计。&lt;/p&gt; &#xA;&lt;h4&gt;实现高质量数据集生成&lt;/h4&gt; &#xA;&lt;p&gt;如下是 Unit Eval 0.3.0 的主要代码逻辑：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val codeDir = GitUtil&#xA;    .checkoutCode(config.url, config.branch, tempGitDir, config.gitDepth)&#xA;    .toFile().canonicalFile&#xA;&#xA;logger.info(&#34;start walk $codeDir&#34;)&#xA;&#xA;val languageWorker = LanguageWorker()&#xA;val workerManager = WorkerManager(&#xA;    WorkerContext(&#xA;        config.codeContextStrategies,&#xA;        config.codeQualityTypes,&#xA;        config.insOutputConfig,&#xA;        pureDataFileName = config.pureDataFileName(),&#xA;        config.completionTypes,&#xA;        config.maxCompletionEachFile,&#xA;        config.completionTypeSize,&#xA;        qualityThreshold = InsQualityThreshold(&#xA;            complexity = InsQualityThreshold.MAX_COMPLEXITY,&#xA;            fileSize = InsQualityThreshold.MAX_FILE_SIZE,&#xA;            maxLineInCode = config.maxLineInCode,&#xA;            maxCharInCode = config.maxCharInCode,&#xA;            maxTokenLength = config.maxTokenLength,&#xA;        )&#xA;    )&#xA;)&#xA;workerManager.init(codeDir, config.language)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;随后是根据不同的质量门禁，来进行不同的质量检查：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun filterByThreshold(job: InstructionFileJob) {&#xA;    val summary = job.fileSummary&#xA;    if (!supportedExtensions.contains(summary.extension)) {&#xA;        return&#xA;    }&#xA;&#xA;    // limit by complexity&#xA;    if (summary.complexity &amp;gt; context.qualityThreshold.complexity) {&#xA;        logger.info(&#34;skip file ${summary.location} for complexity ${summary.complexity}&#34;)&#xA;        return&#xA;    }&#xA;&#xA;    // like js minified file&#xA;    if (summary.binary || summary.generated || summary.minified) {&#xA;        return&#xA;    }&#xA;&#xA;    // if the file size is too large, we just try 64k&#xA;    if (summary.bytes &amp;gt; context.qualityThreshold.fileSize) {&#xA;        logger.info(&#34;skip file ${summary.location} for size ${summary.bytes}&#34;)&#xA;        return&#xA;    }&#xA;&#xA;    // limit by token length&#xA;    val encoded = enc.encode(job.code)&#xA;    val length = encoded.size&#xA;    if (length &amp;gt; context.qualityThreshold.maxTokenLength) {&#xA;        logger.info(&#34;skip file ${summary.location} for over ${context.qualityThreshold.maxTokenLength} tokens&#34;)&#xA;        println(&#34;| filename: ${summary.filename} |  tokens: $length | complexity: ${summary.complexity} | code: ${summary.lines} | size: ${summary.bytes} | location: ${summary.location} |&#34;)&#xA;        return&#xA;    }&#xA;&#xA;    val language = SupportedLang.from(summary.language)&#xA;    val worker = workers[language] ?: return&#xA;    worker.addJob(job)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在过虑之后，我们就可以由不同语言的 Worker 来进行处理，诸如 JavaWorker、PythonWorker 等。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val lists = jobs.map { job -&amp;gt;&#xA;    val jobContext = JobContext(&#xA;        job,&#xA;        context.qualityTypes,&#xA;        fileTree,&#xA;        context.insOutputConfig,&#xA;        context.completionTypes,&#xA;        context.maxCompletionInOneFile,&#xA;        project = ProjectContext(&#xA;            compositionDependency = context.compositionDependency,&#xA;        ),&#xA;        context.qualityThreshold&#xA;    )&#xA;&#xA;    context.codeContextStrategies.map { type -&amp;gt;&#xA;        val codeStrategyBuilder = type.builder(jobContext)&#xA;        codeStrategyBuilder.build()&#xA;    }.flatten()&#xA;}.flatten()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;根据用户选择的上下文策略，我们就可以构建出不同的上下文，如：相关上下文、相似上下文等&lt;/p&gt; &#xA;&lt;h4&gt;在上下文策略中检查代码质量&lt;/h4&gt; &#xA;&lt;p&gt;SimilarChunksStrategyBuilder 主要逻辑如下&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;使用配置中指定的规则检查以识别存在问题的数据结构。&lt;/li&gt; &#xA; &lt;li&gt;收集所有具有相似数据结构的数据结构。&lt;/li&gt; &#xA; &lt;li&gt;为每个被识别的数据结构中的函数构建完成生成器。&lt;/li&gt; &#xA; &lt;li&gt;过滤掉具有空的前置和后置光标的完成生成器。&lt;/li&gt; &#xA; &lt;li&gt;使用JavaSimilarChunker计算块补全的相似块。&lt;/li&gt; &#xA; &lt;li&gt;为每个完成生成器创建SimilarChunkIns对象，包括语言、前置光标、相似块、后置光标、输出和类型的相关信息。&lt;/li&gt; &#xA; &lt;li&gt;返回生成的SimilarChunkIns对象的列表。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;在规则检查里，我们可以通过不同的规则来检查不同的代码质量问题，如：代码坏味道、测试坏味道、API 设计味道等。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun create(types: List&amp;lt;CodeQualityType&amp;gt;, thresholds: Map&amp;lt;String, Int&amp;gt; = mapOf()): List&amp;lt;QualityAnalyser&amp;gt; {&#xA;    return types.map { type -&amp;gt;&#xA;        when (type) {&#xA;            CodeQualityType.BadSmell -&amp;gt; BadsmellAnalyser(thresholds)&#xA;            CodeQualityType.TestBadSmell -&amp;gt; TestBadsmellAnalyser(thresholds)&#xA;            CodeQualityType.JavaController -&amp;gt; JavaControllerAnalyser(thresholds)&#xA;            CodeQualityType.JavaRepository -&amp;gt; JavaRepositoryAnalyser(thresholds)&#xA;            CodeQualityType.JavaService -&amp;gt; JavaServiceAnalyser(thresholds)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;附：相关资源&lt;/h2&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;h3&gt;开源 AI 辅助工具&lt;/h3&gt; &#xA;&lt;h3&gt;开源模型&lt;/h3&gt; &#xA;&lt;h3&gt;开源数据集&lt;/h3&gt;</summary>
  </entry>
</feed>