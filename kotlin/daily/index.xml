<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-26T01:32:00Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MohamedRejeb/compose-rich-editor</title>
    <updated>2024-12-26T01:32:00Z</updated>
    <id>tag:github.com,2024-12-26:/MohamedRejeb/compose-rich-editor</id>
    <link href="https://github.com/MohamedRejeb/compose-rich-editor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Rich text editor library for both Jetpack Compose and Compose Multiplatform, fully customizable, supports HTML and Markdown.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Compose Rich Editor&lt;/h1&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://kotlinlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kotlin-2.0.21-blue.svg?logo=kotlin&#34; alt=&#34;Kotlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.jetbrains.com/lp/compose-multiplatform&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/compose-1.7.0-blue.svg?logo=jetpackcompose&#34; alt=&#34;Compose&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MohamedRejeb&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MohamedRejeb/MohamedRejeb/main/badges/mohamedrejeb.svg?sanitize=true&#34; alt=&#34;MohamedRejeb&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-green.svg?sanitize=true&#34; alt=&#34;Apache-2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34; alt=&#34;API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/search?q=g:%22com.mohamedrejeb.richeditor%22%20AND%20a:%22richeditor-compose%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.mohamedrejeb.richeditor/richeditor-compose/1.0.0-rc10&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MohamedRejeb/compose-rich-editor/main/docs/images/logo-large-light.svg#gh-light-mode-only&#34; alt=&#34;Compose Rich Editor&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MohamedRejeb/compose-rich-editor/main/docs/images/logo-large-dark.svg#gh-dark-mode-only&#34; alt=&#34;Compose Rich Editor&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A rich text editor library for both Jetpack Compose and Compose Multiplatform, fully customizable and supports the common rich text editor features&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiplatform&lt;/strong&gt;: Compose Rich Editor supports Compose Multiplatform (Android, iOS, Desktop, Web).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy to use&lt;/strong&gt;: Compose Rich Editor&#39;s API leverages Kotlin&#39;s language features for simplicity and minimal boilerplate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WYSIWYG&lt;/strong&gt;: Compose Rich Editor is a WYSIWYG editor that supports the most common text styling features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;Slack Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MohamedRejeb/compose-rich-editor/main/docs/images/screenshot-01.png&#34; alt=&#34;Slack Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Html to Rich Text&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MohamedRejeb/compose-rich-editor/main/docs/images/screenshot-02.png&#34; alt=&#34;Slack Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Markdown to Rich Text&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MohamedRejeb/compose-rich-editor/main/docs/images/screenshot-03.png&#34; alt=&#34;Slack Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22com.mohamedrejeb.richeditor%22%20AND%20a:%22richeditor-compose%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.mohamedrejeb.richeditor/richeditor-compose/1.0.0-rc10&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Compose Rich Editor is available on &lt;code&gt;mavenCentral()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;com.mohamedrejeb.richeditor:richeditor-compose:1.0.0-rc10&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22com.mohamedrejeb.richeditor%22%20AND%20a:%22richeditor-compose%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.mohamedrejeb.richeditor/richeditor-compose/1.0.0-rc10&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Kotlin version&lt;/th&gt; &#xA;   &lt;th&gt;Compose version&lt;/th&gt; &#xA;   &lt;th&gt;Compose Rich Editor version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0.21&lt;/td&gt; &#xA;   &lt;td&gt;1.7.0&lt;/td&gt; &#xA;   &lt;td&gt;1.0.0-rc10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0.20&lt;/td&gt; &#xA;   &lt;td&gt;1.6.11&lt;/td&gt; &#xA;   &lt;td&gt;1.0.0-rc09&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0.10&lt;/td&gt; &#xA;   &lt;td&gt;1.6.11&lt;/td&gt; &#xA;   &lt;td&gt;1.0.0-rc06&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0.0&lt;/td&gt; &#xA;   &lt;td&gt;1.6.10&lt;/td&gt; &#xA;   &lt;td&gt;1.0.0-rc05-k2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.9.24&lt;/td&gt; &#xA;   &lt;td&gt;1.6.10&lt;/td&gt; &#xA;   &lt;td&gt;1.0.0-rc05&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h4&gt;RichTextState&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;RichTextEditor&lt;/code&gt; composable to create a rich text editor.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;RichTextEditor&lt;/code&gt; composable requires a &lt;code&gt;RichTextState&lt;/code&gt; to manage the editor&#39;s state.&lt;/p&gt; &#xA;&lt;p&gt;To create a &lt;code&gt;RichTextState&lt;/code&gt;, use the &lt;code&gt;rememberRichTextState&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val state = rememberRichTextState()&#xA;&#xA;RichTextEditor(&#xA;    state = state,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Styling Spans&lt;/h4&gt; &#xA;&lt;p&gt;To style spans, &lt;code&gt;RichTextState&lt;/code&gt; provides &lt;code&gt;toggleSpanStyle&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Toggle a span style.&#xA;richTextState.toggleSpanStyle(SpanStyle(fontWeight = FontWeight.Bold))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the current span style of the selection, use &lt;code&gt;RichTextState.currentSpanStyle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Get the current span style.&#xA;val currentSpanStyle = richTextState.currentSpanStyle&#xA;val isBold = currentSpanStyle.fontWeight = FontWeight.Bold&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Styling Paragraphs&lt;/h4&gt; &#xA;&lt;p&gt;To style paragraphs, &lt;code&gt;RichTextState&lt;/code&gt; provides &lt;code&gt;toggleParagraphStyle&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Toggle a paragraph style.&#xA;richTextState.toggleParagraphStyle(ParagraphStyle(textAlign = TextAlign.Center))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the current paragraph style of the selection, use &lt;code&gt;RichTextState.currentParagraphStyle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Get the current paragraph style.&#xA;val currentParagraphStyle = richTextState.currentParagraphStyle&#xA;val isCentered = currentParagraphStyle.textAlign = TextAlign.Center&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add links&lt;/h4&gt; &#xA;&lt;p&gt;To add links, &lt;code&gt;RichTextState&lt;/code&gt; provides &lt;code&gt;addLink&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Add link after selection.&#xA;richTextState.addLink(&#xA;    text = &#34;Compose Rich Editor&#34;,&#xA;    url = &#34;https://github.com/MohamedRejeb/Compose-Rich-Editor&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get if the current selection is a link, use &lt;code&gt;RichTextState.isLink&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Get if the current selection is a link.&#xA;val isLink = richTextState.isLink&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, links will be opened by your platform&#39;s &lt;code&gt;UriHandler&lt;/code&gt;, if however you want to handle the links on your own, you can override the composition local as such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val myUriHandler by remember {&#xA;    mutableStateOf(object : UriHandler {&#xA;        override fun openUri(uri: String) {&#xA;            // Handle the clicked link however you want&#xA;        }&#xA;    })&#xA;}&#xA;CompositionLocalProvider(LocalUriHandler provides myUriHandler) {&#xA;    RichText( ... )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add Code Blocks&lt;/h4&gt; &#xA;&lt;p&gt;To add code blocks, &lt;code&gt;RichTextState&lt;/code&gt; provides &lt;code&gt;toggleCodeSpan&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Toggle code span.&#xA;richTextState.toggleCodeSpan()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get if the current selection is a code block, use &lt;code&gt;RichTextState.isCodeSpan&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Get if the current selection is a code span.&#xA;val isCodeSpan = richTextState.isCodeSpan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ordered and Unordered Lists&lt;/h4&gt; &#xA;&lt;p&gt;You can add ordered and unordered lists using &lt;code&gt;RichTextState&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Toggle ordered list.&#xA;richTextState.toggleOrderedList()&#xA;&#xA;// Toggle unordered list.&#xA;richTextState.toggleUnorderedList()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get if the current selection is an ordered or unordered list, using &lt;code&gt;RichTextState&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Get if the current selection is an ordered list.&#xA;val isOrderedList = richTextState.isOrderedList&#xA;&#xA;// Get if the current selection is an unordered list.&#xA;val isUnorderedList = richTextState.isUnorderedList&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customizing the rich text configuration&lt;/h4&gt; &#xA;&lt;p&gt;Some of the rich text editor&#39;s features can be customized, such as the color of the links and the code blocks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;richTextState.config.linkColor = Color.Blue&#xA;richTextState.config.linkTextDecoration = TextDecoration.Underline&#xA;richTextState.config.codeSpanColor = Color.Yellow&#xA;richTextState.config.codeSpanBackgroundColor = Color.Transparent&#xA;richTextState.config.codeSpanStrokeColor = Color.LightGray&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HTML import and export&lt;/h4&gt; &#xA;&lt;p&gt;To convert HTML to &lt;code&gt;RichTextState&lt;/code&gt;, use &lt;code&gt;RichTextState.setHtml&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val html = &#34;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Compose Rich Editor&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&#34;&#xA;richTextState.setHtml(html)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To convert &lt;code&gt;RichTextState&lt;/code&gt; to HTML, use &lt;code&gt;RichTextState.toHtml&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val html = richTextState.toHtml()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Markdown import and export&lt;/h4&gt; &#xA;&lt;p&gt;To convert Markdown to &lt;code&gt;RichTextState&lt;/code&gt;, use &lt;code&gt;RichTextState.setMarkdown&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val markdown = &#34;**Compose** *Rich* Editor&#34;&#xA;richTextState.setMarkdown(markdown)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To convert &lt;code&gt;RichTextState&lt;/code&gt; to Markdown, use &lt;code&gt;RichTextState.toMarkdown&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val markdown = richTextState.toMarkdown()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out Compose Rich Editor&#39;s &lt;a href=&#34;https://mohamedrejeb.github.io/compose-rich-editor/&#34;&gt;full documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Web live demo&lt;/h2&gt; &#xA;&lt;p&gt;You can try out the web demo &lt;a href=&#34;https://compose-richeditor.netlify.app/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve found an error in this sample, please file an issue. &lt;br&gt; Feel free to help out by sending a pull request &lt;span&gt;❤️&lt;/span&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRejeb/Compose-Rich-Editor/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Find this library useful? &lt;span&gt;❤️&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Support it by joining &lt;strong&gt;&lt;a href=&#34;https://github.com/MohamedRejeb/Compose-Rich-Editor/stargazers&#34;&gt;stargazers&lt;/a&gt;&lt;/strong&gt; for this repository. &lt;span&gt;⭐&lt;/span&gt; &lt;br&gt; Also, &lt;strong&gt;&lt;a href=&#34;https://github.com/MohamedRejeb&#34;&gt;follow me&lt;/a&gt;&lt;/strong&gt; on GitHub for more libraries! 🤩&lt;/p&gt; &#xA;&lt;p&gt;You can always &lt;a href=&#34;https://www.buymeacoffee.com/MohamedRejeb&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.buymeacoffee.com/button-api/?text=Buy%20me%20a%20coffee&amp;amp;emoji=&amp;amp;slug=MohamedRejeb&amp;amp;button_colour=FFDD00&amp;amp;font_colour=000000&amp;amp;font_family=Cookie&amp;amp;outline_colour=000000&amp;amp;coffee_colour=ffffff&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;Copyright 2023 Mohamed Rejeb&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>