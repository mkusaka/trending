<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-11T01:32:42Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>modelcontextprotocol/kotlin-sdk</title>
    <updated>2025-05-11T01:32:42Z</updated>
    <id>tag:github.com,2025-05-11:/modelcontextprotocol/kotlin-sdk</id>
    <link href="https://github.com/modelcontextprotocol/kotlin-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Kotlin SDK for Model Context Protocol servers and clients. Maintained in collaboration with JetBrains&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Kotlin SDK&lt;/h1&gt; &#xA;&lt;p&gt;Kotlin implementation of the &lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol&lt;/a&gt; (MCP), providing both client and server capabilities for integrating with LLM surfaces.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The Model Context Protocol allows applications to provide context for LLMs in a standardized way, separating the concerns of providing context from the actual LLM interaction. This Kotlin SDK implements the full MCP specification, making it easy to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build MCP clients that can connect to any MCP server&lt;/li&gt; &#xA; &lt;li&gt;Create MCP servers that expose resources, prompts and tools&lt;/li&gt; &#xA; &lt;li&gt;Use standard transports like stdio, SSE, and WebSocket&lt;/li&gt; &#xA; &lt;li&gt;Handle all MCP protocol messages and lifecycle events&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/kotlin-sdk/main/samples/kotlin-mcp-server&#34;&gt;kotlin-mcp-server&lt;/a&gt;: shows how to set up a Kotlin MCP server with different tools and other features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/kotlin-sdk/main/samples/weather-stdio-server&#34;&gt;weather-stdio-server&lt;/a&gt;: shows how to build a Kotlin MCP server providing weather forecast and alerts using STDIO transport.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/kotlin-sdk/main/samples/kotlin-mcp-client&#34;&gt;kotlin-mcp-client&lt;/a&gt;: demonstrates building an interactive Kotlin MCP client that connects to an MCP server via STDIO and integrates with Anthropic’s API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add the new repository to your build file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;dependencies {&#xA;    implementation(&#34;io.modelcontextprotocol:kotlin-sdk:0.5.0&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Creating a Client&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import io.modelcontextprotocol.kotlin.sdk.client.Client&#xA;import io.modelcontextprotocol.kotlin.sdk.client.StdioClientTransport&#xA;import io.modelcontextprotocol.kotlin.sdk.Implementation&#xA;&#xA;val client = Client(&#xA;    clientInfo = Implementation(&#xA;        name = &#34;example-client&#34;,&#xA;        version = &#34;1.0.0&#34;&#xA;    )&#xA;)&#xA;&#xA;val transport = StdioClientTransport(&#xA;    inputStream = processInputStream,&#xA;    outputStream = processOutputStream&#xA;)&#xA;&#xA;// Connect to server&#xA;client.connect(transport)&#xA;&#xA;// List available resources&#xA;val resources = client.listResources()&#xA;&#xA;// Read a specific resource&#xA;val resourceContent = client.readResource(&#xA;    ReadResourceRequest(uri = &#34;file:///example.txt&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a Server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import io.modelcontextprotocol.kotlin.sdk.server.Server&#xA;import io.modelcontextprotocol.kotlin.sdk.server.ServerOptions&#xA;import io.modelcontextprotocol.kotlin.sdk.server.StdioServerTransport&#xA;import io.modelcontextprotocol.kotlin.sdk.ServerCapabilities&#xA;&#xA;val server = Server(&#xA;    serverInfo = Implementation(&#xA;        name = &#34;example-server&#34;,&#xA;        version = &#34;1.0.0&#34;&#xA;    ),&#xA;    options = ServerOptions(&#xA;        capabilities = ServerCapabilities(&#xA;            resources = ServerCapabilities.Resources(&#xA;                subscribe = true,&#xA;                listChanged = true&#xA;            )&#xA;        )&#xA;    )&#xA;)&#xA;&#xA;// Add a resource&#xA;server.addResource(&#xA;    uri = &#34;file:///example.txt&#34;,&#xA;    name = &#34;Example Resource&#34;,&#xA;    description = &#34;An example text file&#34;,&#xA;    mimeType = &#34;text/plain&#34;&#xA;) { request -&amp;gt;&#xA;    ReadResourceResult(&#xA;        contents = listOf(&#xA;            TextResourceContents(&#xA;                text = &#34;This is the content of the example resource.&#34;,&#xA;                uri = request.uri,&#xA;                mimeType = &#34;text/plain&#34;&#xA;            )&#xA;        )&#xA;    )&#xA;}&#xA;&#xA;// Start server with stdio transport&#xA;val transport = StdioServerTransport()&#xA;server.connect(transport)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using SSE Transport&lt;/h3&gt; &#xA;&lt;p&gt;Directly in Ktor&#39;s &lt;code&gt;Application&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import io.ktor.server.application.*&#xA;import io.modelcontextprotocol.kotlin.sdk.server.mcp&#xA;&#xA;fun Application.module() {&#xA;    mcp {&#xA;        Server(&#xA;            serverInfo = Implementation(&#xA;                name = &#34;example-sse-server&#34;,&#xA;                version = &#34;1.0.0&#34;&#xA;            ),&#xA;            options = ServerOptions(&#xA;                capabilities = ServerCapabilities(&#xA;                    prompts = ServerCapabilities.Prompts(listChanged = null),&#xA;                    resources = ServerCapabilities.Resources(subscribe = null, listChanged = null)&#xA;                )&#xA;            )&#xA;        )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside a custom Ktor&#39;s &lt;code&gt;Route&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import io.ktor.server.application.*&#xA;import io.ktor.server.sse.SSE&#xA;import io.modelcontextprotocol.kotlin.sdk.server.mcp&#xA;&#xA;fun Application.module() {&#xA;    install(SSE)&#xA;&#xA;    routing {&#xA;        route(&#34;myRoute&#34;) {&#xA;            mcp {&#xA;                Server(&#xA;                    serverInfo = Implementation(&#xA;                        name = &#34;example-sse-server&#34;,&#xA;                        version = &#34;1.0.0&#34;&#xA;                    ),&#xA;                    options = ServerOptions(&#xA;                        capabilities = ServerCapabilities(&#xA;                            prompts = ServerCapabilities.Prompts(listChanged = null),&#xA;                            resources = ServerCapabilities.Resources(subscribe = null, listChanged = null)&#xA;                        )&#xA;                    )&#xA;                )&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/kotlin-sdk/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/kotlin-sdk/main/CODE_OF_CONDUCT.md&#34;&gt;Code of conduct&lt;/a&gt; before contributing.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License—see the &lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/kotlin-sdk/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>