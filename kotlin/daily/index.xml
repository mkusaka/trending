<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-27T01:38:44Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>littleWhiteDuck/SimpleHook</title>
    <updated>2023-01-27T01:38:44Z</updated>
    <id>tag:github.com,2023-01-27:/littleWhiteDuck/SimpleHook</id>
    <link href="https://github.com/littleWhiteDuck/SimpleHook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SimpleHook hook部分代码&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;这里是SimpleHook的hook部分代码&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;simpleHook使用说明&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;中文文档&lt;/strong&gt;|&lt;a href=&#34;https://raw.githubusercontent.com/littleWhiteDuck/SimpleHook/main/README_EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://wwp.lanzoub.com/b0177tlri&#34;&gt;simpleHook.apk&lt;/a&gt;(密码：simple)&lt;/p&gt; &#xA; &lt;p&gt;TG交流群: @simpleHook&lt;/p&gt; &#xA; &lt;p&gt;本软件主打简单，如名字一样，如果你追求更复杂的hook操作，推荐使用 &lt;a href=&#34;https://github.com/Xposed-Modules-Repo/me.jsonet.jshook&#34;&gt;jsHook（你可以实现更复杂的功能）&lt;/a&gt;、&lt;a href=&#34;https://github.com/Mocha-L/QuJing&#34;&gt;曲境（电脑端浏览器操作）&lt;/a&gt;；如果你追求更多的扩展功能，推荐使用算法助手等等类似应用&lt;/p&gt; &#xA; &lt;p&gt;功能概述：自定义返回值、参数值等，记录常见各种加密算法、toast、dialog、popupwindow、JSONObject创建增加等&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;1. 功能说明&lt;/h2&gt; &#xA;&lt;h3&gt;页面介绍&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;首页&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;images\main_home_screenshot.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;点击加号，可添加配置，点击添加配置进入下面页面&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;配置页面&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/littleWhiteDuck/SimpleHook/main/images/config_screenshot.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;点击‘搜索样式’图标，可进入AppList页面，进行选择应用&lt;/p&gt; &#xA;&lt;p&gt;点击‘下载样式’图标，可保存配置&lt;/p&gt; &#xA;&lt;p&gt;点击右下角加号，可在弹出窗口填写配置&lt;/p&gt; &#xA;&lt;img src=&#34;images\config_dialog_screenshot.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;有多种模式可以选择，输入类名前建议了解设置页面（smali to config），它可以简化填写&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;扩展页面&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;images\main_extension_screenshot.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;具体功能&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;images\extension_main_features_shot.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;点击“播放样式”按钮，可打开悬浮窗（需要授予悬浮窗权限），然后打开目标应用，可以显示一些信息（开启了打印参数值、返回值、扩展页面大部分功能）&lt;/p&gt; &#xA;&lt;p&gt;悬浮窗&lt;/p&gt; &#xA;&lt;img src=&#34;images\main_extension_print_dialog.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;h2&gt;2.自定义Hook编写规则&lt;/h2&gt; &#xA;&lt;p&gt;下面是编写规则：（你可以下载*&lt;a href=&#34;https://raw.githubusercontent.com/littleWhiteDuck/SimpleHook/main/HookTest.apk&#34;&gt;HookTest.apk&lt;/a&gt;*，此App应用了所有情况，并内附有配置）&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;使用前请先了解设置页【smali转配置】，它可以简化你的操作(配合MT管理器等逆向分析软件)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;简要的基本介绍&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;支持Java语法和Smali语法填写配置信息&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// java&#xA;me.simplehook.MainActivty&#xA;// smali&#xA;Lme/simplehook/MainActivity; //一定要有 --&amp;gt; ; &amp;lt;--&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持基本类型和其它类型参数&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 类型 主要用于填写参数类型和变量类型&#xA;// 基本类型你可以使用java语法这样填&#xA;boolean int long short char byte float double&#xA;// 基本类型你也可以使用smali语法这样填&#xA;Z I J S C B F D&#xA;// 其他类型你可以使用java语法这样填&#xA;java.lang.String android.content.Context &#xA;// 其他类型你也可以使用smali语法这样填&#xA;Ljava/lang/String; Landroid/content/Context; //一定要有 --&amp;gt; ; &amp;lt;--&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;结果值的填写规则&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;此处应注意，本软件不像其他软件一样需要填写返回值、参数值类型，本软件并不需要，你只需要&lt;strong&gt;按照规则填写&lt;/strong&gt;，自动判断&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;2.1. 基本类型&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;类型(java、smali)&lt;/th&gt; &#xA;   &lt;th&gt;值的例子&lt;/th&gt; &#xA;   &lt;th&gt;注意事项&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;布尔值(boolean、Z)&lt;/td&gt; &#xA;   &lt;td&gt;true、false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;整数(int、I)&lt;/td&gt; &#xA;   &lt;td&gt;1、2、3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;长整型(long、J)&lt;/td&gt; &#xA;   &lt;td&gt;1l、120000L、123456l&lt;/td&gt; &#xA;   &lt;td&gt;要注意：数字 + L&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;短整型(short、S)&lt;/td&gt; &#xA;   &lt;td&gt;1short、2short&lt;/td&gt; &#xA;   &lt;td&gt;要注意：数字 + short&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;字符(char、C)&lt;/td&gt; &#xA;   &lt;td&gt;195c&lt;/td&gt; &#xA;   &lt;td&gt;要注意：符合char类型的字符 + c&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;字节(byte、B)&lt;/td&gt; &#xA;   &lt;td&gt;2b、3b&lt;/td&gt; &#xA;   &lt;td&gt;要注意：符合byte类型的字符 + b&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;单浮点(float、F)&lt;/td&gt; &#xA;   &lt;td&gt;2f、3f、3.0f&lt;/td&gt; &#xA;   &lt;td&gt;要注意：数字 + f&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;双浮点(double、D)&lt;/td&gt; &#xA;   &lt;td&gt;2d、3d、3.0d&lt;/td&gt; &#xA;   &lt;td&gt;要注意：数字 + d&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;2.2. null&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;其他类型只能返回null(字符串除外)，null&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;2.3. 字符串&lt;/h4&gt; &#xA;&lt;h5&gt;2.3.1 一般情况&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;不符合基本类型和null的全部转化为字符串类型&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;2.3.2 特殊情况&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;特殊的字符串&lt;/th&gt; &#xA;   &lt;th&gt;值的例子&lt;/th&gt; &#xA;   &lt;th&gt;注意事项&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;数字&lt;/td&gt; &#xA;   &lt;td&gt;111s, 2002s&lt;/td&gt; &#xA;   &lt;td&gt;常见于 &#34;111111&#34; 这种，但是本软件你需要在数字后面加入s，如果你不加s，会被转成数字，可能导致目标应用崩溃&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;布尔&lt;/td&gt; &#xA;   &lt;td&gt;trues、falses&lt;/td&gt; &#xA;   &lt;td&gt;常见于 &#34;true&#34; 、&#34;false&#34; 这种，但是本软件你需要在布尔值后面加入s，如果你不加s，会被转成布尔值，可能导致目标应用崩溃&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;nulls&lt;/td&gt; &#xA;   &lt;td&gt;常见于 &#34;null&#34;这种，但是本软件你需要在null后面加入s，如果你不加s，会被转成null，可能导致目标应用空指针&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;空字符串&lt;/td&gt; &#xA;   &lt;td&gt;英文单词&#39;empty&#39; 或者中文汉字&#39;空&#39;&lt;/td&gt; &#xA;   &lt;td&gt;如果你直接填空，将无法保存配置，这样做是为了预防你在使用时不填修改值导致无法正常Hook&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;2.3.3 随机文本返回值&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;仅用于返回值，返回值填写下面json代码&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;   {&#xA;&#x9;    &#34;random&#34;: &#34;abcdefgh123456789&#34;,&#xA;&#x9;    &#34;length&#34;: 9,&#xA;&#x9;    &#34;key&#34;: &#34;key&#34;,&#xA;&#x9;    &#34;updateTime&#34;: 100,&#xA;&#x9;    &#34;defaultValue&#34;: &#34;&#34;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;上述json格式代码介绍： random：字符串，填写随机文本由哪些字符组成&lt;/p&gt; &#xA; &lt;p&gt;​ length：整数，代表需要生成多长的随机文本&lt;/p&gt; &#xA; &lt;p&gt;​ key：字符串，唯一识别码，可以随便填写，但是一个软件中用到多个随机返回值时需要填不一样的&lt;/p&gt; &#xA; &lt;p&gt;​ updateTime：整数，代表着间隔多长时间更新一下随机文本，单位秒， -1代表每次都更新&lt;/p&gt; &#xA; &lt;p&gt;​ defaultValue：非必填项&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;3.具体的hook模式&lt;/h2&gt; &#xA;&lt;h4&gt;hook返回值&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//  例如1&#xA;  import simple.example;&#xA;  Class Example{&#xA;    public static boolean isFun() {&#xA;      boolean result = true;&#xA;      ...&#xA;       ...&#xA;      return result&#xA;    }&#xA;  }&#xA;  /*&#xA;  模式选择 Hook返回值&#xA;  类名应填：simple.example.Example&#xA;  方法名应填：isFun&#xA;  参数类型应填：（此处留空，因为没有参数）&#xA;  修改值应填：true 或者 false&#xA;  */&#xA;&#xA;/*&#xA;多个参数参数类型的填法(用英语逗号分开，参数类型支持数组)：&#xA;boolean,int,android.content.Context&#xA;*/&#xA;// 例如2&#xA;  import simple.example;&#xA;  class Example{&#xA;    public static String isFun(Sring str, Context context, boolean b) {&#xA;      String result = str;&#xA;      ...&#xA;       ...&#xA;      return result&#xA;    }&#xA;  }&#xA;/*&#xA;  模式选择 Hook返回值&#xA;  类名应填：simple.example.Example&#xA;  方法名应填：isFun&#xA;  参数类型应填:&#xA;    java语法： java.lang.String,android.content.Context,boolean   (使用参数间使用英文逗号分开，仅一个参数不需要加逗号)&#xA;    smali语法：Ljava/lang/String;,Landroid/content/Context;,Z&#xA;  修改值应填：是个字符串 （应符合结果值的填写规则，不需要加引号）&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;hook返回值+&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;此功能可以将json转为对象(使用Gson)，你如果不知道这个对象的Json格式是什么样子的，可以使用【记录返回值】功能，复制返回值即可。这个功能并不是万能的，不适用所有情况，简单的数据类应该是没有问题的，暂不支持数组。&lt;/p&gt; &#xA; &lt;p&gt;模式：hook返回值+&lt;/p&gt; &#xA; &lt;p&gt;返回值的类名：填返回值的类名&lt;/p&gt; &#xA; &lt;p&gt;修改值：填json代码，如&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;isHook&#34;:false,&#34;level&#34;:10000}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;举个例子：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import simple.example;&#xA;&#xA;// 数据类&#xA;public class UserBean {&#xA;   private boolean isHook;&#xA;   private int level;&#xA;&#xA;   public UserBean(boolean isHook, int level) {&#xA;       this.isHook = isHook;&#xA;       this.level = level;&#xA;   }&#xA;}&#xA;&#xA;public class Example{&#xA;   public static UserBean isFun() {&#xA;     UserBean userBean = new UserBean(true, 10);&#xA;     ...&#xA;      ...&#xA;     return userBean&#xA;   }&#xA; }&#xA;/*&#xA;假如hook isFun的返回值&#xA;模式：hook返回值+&#xA;类名：simple.example.Example&#xA;方法名：isFun&#xA;参数类型：&#xA;返回值的类名：simple.example.UserBean&#xA;结果值：{&#34;isHook&#34;:false,&#34;level&#34;:10000}&#xA;*/&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;hook参数值&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 类型值同 hook返回值类型&#xA;//特殊用法，如下面一段代码&#xA;public boolean isModuleLive(Context context, String str, int level){&#xA;  &#xA;    retrun true&#xA;}&#xA;//如果你只想要hook level的值，你可以在修改值那一栏向下面这样填&#xA;,,99&#xA;//如果你只想要hook str的值，你可以在修改值那一栏向下面这样填&#xA;,啦啦啦,&#xA;//如果你只想要hook str、level的值，你可以在修改值那一栏向下面这样填&#xA;,啦啦啦,99&#xA;//如果你想要全部hook，你可以在修改值那一栏向下面这样填&#xA;null,啦啦啦,99 // context为null也许导致闪退&#xA;/*&#xA;多个参数参数类型的填法(用英语逗号分开)：&#xA;android.content.Context,jave.lang.String,int&#xA;或者如下填写&#xA;Landroid/content/Context;,Ljave/lang/String;int&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;中断执行&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 此模式会拦截方法执行&#xA;// 如hook返回值或者hook参数值一样填，不需要填写返回值、参数值&#xA;public void printString() {&#xA;    System.out.println(&#34;start&#34;);&#xA;    testBreakMethod();&#xA;    System.out.println(&#34;end&#34;);&#xA;&#xA;    /*&#xA;      输出结果为&#xA;      start&#xA;      end&#xA;&#xA;      test Break Mode 没有被输出&#xA;    */&#xA;}&#xA;&#xA;// 假如:此方法被中断&#xA;public void testBreakMethod() {&#xA;    System.out.println(&#34;test Break Mode&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hook所有同名方法&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/*&#xA;  Hook一个类所有同名方法，参数类型填写 * 即可&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hook一个类中所有方法&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/*&#xA;  Hook一个类所有方法，方法名填写 * 即可；参数类型可随意填写，有些h不可为空&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;构造方法&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 方法名填写：&amp;lt;init&amp;gt;&#xA;import simple.example;&#xA;public class Example{&#xA;  int a;&#xA;  int b;&#xA;  public Example(int a, boolean b) {&#xA;    this.a = a;&#xA;    this.b = b&#xA;  }&#xA;}&#xA;// Hook模式，根据自己的需求选择，一般为hook参数值/记录参数值，其他模式可能造成软件闪退&#xA;/*&#xA;  方法名填写：&amp;lt;init&amp;gt;&#xA;  例如修改两个参数值&#xA;    类名填写：simple.example.Example&#xA;    方法名填写： &amp;lt;init&amp;gt; &#xA;    参数类型填写：int,int&#xA;    结果值填写：88,99&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HOOK静态变量&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import simple.example;&#xA;public class Example{&#xA;  public static boolean isTest = false;&#xA;}&#xA;&#xA;import simple.example;&#xA;public class MainActivity extends Acitvity {&#xA;  @Override&#xA;    protected void onCreate(Bundle savedInstanceState) {&#xA;        super.onCreate(savedInstanceState);&#xA;        setContentView(R.layout.activity_main);&#xA;        initData();&#xA;        initView();&#xA;    }&#xA;&#xA;    private void initData(){&#xA;      Example.isTest = false;&#xA;    }&#xA;&#xA;    private void initView() {&#xA;      //你想要修改 isTest为true,所以你应当再这个变量被赋值后再去hook&#xA;      System.out.println(Example.isTest); &#xA;    }&#xA;}&#xA;// 具体的值只支持基本类型，和字符串&#xA;// 无需填写变量类型；要符合[结果值]填写规则&#xA;/*&#xA;  模式选择 Hook静态变量&#xA;  hook点：after/before  根据需要填写，默认after&#xA;  类名应填：simple.example.MainActivity;&#xA;  方法名应填: initData&#xA;  参数类型应填：（什么都是不填，因为这个方法没有参数）&#xA;  变量所在类名：simple.example.Example&#xA;  变量名应填：isTest&#xA;  修改值应填：true/false&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HOOK实例变量&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import simple.example;&#xA;public class UseBean {&#xA;    private boolean isHook;&#xA;    private int level;&#xA;&#xA;    public UseBean(boolean isHook, int level) {&#xA;        this.isHook = isHook;&#xA;        this.level = level;&#xA;    }&#xA;&#xA;    public boolean isHook() {&#xA;        return isHook;&#xA;    }&#xA;&#xA;    public void setHook(boolean hook) {&#xA;        isHook = hook;&#xA;    }&#xA;&#xA;    public int getLevel() {&#xA;        return level;&#xA;    }&#xA;&#xA;    public void setLevel(int level) {&#xA;        this.level = level;&#xA;    }&#xA;}&#xA;&#xA;import simple.example;&#xA;public class MainActivity extends Acitvity {&#xA;  private User user;&#xA;  @Override&#xA;    protected void onCreate(Bundle savedInstanceState) {&#xA;        super.onCreate(savedInstanceState);&#xA;        setContentView(R.layout.activity_main);&#xA;        initData();&#xA;        initView();&#xA;    }&#xA;&#xA;    private void initData(){&#xA;      user = new User(true, 100);&#xA;    }&#xA;&#xA;    private void initView() {&#xA;      //你想要修改isHook、level,所以你应当再这个变量被赋值后再去hook&#xA;      System.out.println(user.isHook()); &#xA;      System.out.println(user.getLevel()); &#xA;    }&#xA;}&#xA;// 具体的值只支持基本类型，和字符串&#xA;// 无需填写变量类型；要符合[结果值]填写规则&#xA;/*&#xA;  模式选择 Hook变量&#xA;  hook点：after/before  根据需要填写，默认是after&#xA;  类名应填：simple.example.UseBean;&#xA;  方法名应填: &amp;lt;init&amp;gt;   // &amp;lt;init&amp;gt;  表示构造方法&#xA;  参数类型应填：boolean,int&#xA;  变量名应填：isHook&#xA;  修改值应填：true/false&#xA;&#xA;  实例变量/成员变量：不支持像静态变量一样跨类hook，只能在本类的某个方法执行后，再去hook变量值&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;记录参数值&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;方法的参数值会被记录，前往记录页面可以查看、 若参数是数组或者list会被转成json格式&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;记录返回值&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;方法的返回值会被记录，前往记录页面可以查看 若结果是数组或者list会被转成json格式&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;记录参返&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;方法的参数值、返回值会被一同记录，前往记录页面可以查看 若结果是数组或者list会被转成json格式 若参数是数组或者list会被转成json格式&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;扩展Hook&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;切记&lt;strong&gt;打开总开关&lt;/strong&gt; 功能请前往app查看&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;4.常见问题(FAQ)&lt;/h2&gt; &#xA;&lt;h3&gt;1.hook没有效果&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;可看框架日志，是否有报错等&lt;/li&gt; &#xA;  &lt;li&gt;储存文件更新配置某些情况下需要手动刷新，开启、关闭、编辑保存即可刷新&lt;/li&gt; &#xA;  &lt;li&gt;请授予所需权限（android11以下：储存权限，android11及以上：ROOT权限）&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;2.什么是smali转配置&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;开启此实验功能后，配置页面顶部会增加‘粘贴板’图标，点击可将应用调用代码或签名，转化为配置（防止手动输入错误），增加配置后你需要手动选择合适的模式以及结果值 调用代码例子：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-smali&#34;&gt; iget v0, p0, Lme/duck/hooktest/bean/UseBean;-&amp;gt;level:I&#xA; invoke-virtual {v0}, Lme/duck/hooktest/bean/UseBean;-&amp;gt;isHook()Z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;方法签名、字段签名例子：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-smali&#34;&gt;Lme/duck/hooktest/bean/UseBean;-&amp;gt;level:I&#xA;Lme/duck/hooktest/bean/UseBean;-&amp;gt;isHook()Z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;上述可在MT管理器导航中长按字段或方法选择&lt;strong&gt;复制签名&lt;/strong&gt;或者&lt;strong&gt;查找调用&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;3.为什么目标应用运行很慢&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;请关闭不必要的扩展HOOK和记录参数、返回值功能, 例如：md5、base64等，这些功能会产生大量的Log&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;4.&lt;/h3&gt; &#xA;&lt;h3&gt;5.&lt;/h3&gt; &#xA;&lt;h3&gt;6.什么是hook点&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;hook静态变量、实例变量支持手动填写hook点，hook点就是在方法执行前hook还是在方法执行后hook&lt;/p&gt; &#xA; &lt;p&gt;before：方法执行前hook; after：方法执行后hook&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;7.什么是删除遗留配置&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;当你卸载本应用或者清除数据时，目标应用配置文件仍然可能保存在储存文件中&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;/data/local/tmp/simpleHook/目标应用包名/config/&lt;/li&gt; &#xA;  &lt;li&gt;/storage/emluated/0/Android/data/目标应用包名/simpleHook/config/&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;这个功能就是遍历所有的应用目录并删除无用的配置(本应用内未显示其配置)&lt;/p&gt; &#xA; &lt;p&gt;因为需要遍历所有应用会比较慢&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>