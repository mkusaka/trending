<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-13T01:46:39Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Mygod/VPNHotspot</title>
    <updated>2022-07-13T01:46:39Z</updated>
    <id>tag:github.com,2022-07-13:/Mygod/VPNHotspot</id>
    <link href="https://github.com/Mygod/VPNHotspot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Share your VPN connection over hotspot or repeater! (root required)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VPN Hotspot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/Mygod/VPNHotspot&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/Mygod/VPNHotspot.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34; alt=&#34;API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Mygod/VPNHotspot/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/Mygod/VPNHotspot/total.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Mygod/VPNHotspot/search?l=kotlin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/top/Mygod/VPNHotspot.svg?sanitize=true&#34; alt=&#34;Language: Kotlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/gh/Mygod/VPNHotspot/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=Mygod/VPNHotspot&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/e70e52b1a58045819b505c09edcae816&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Mygod/VPNHotspot/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Mygod/VPNHotspot.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Connecting things to your VPN made simple. Share your VPN connection over hotspot or repeater. (&lt;strong&gt;root required&lt;/strong&gt;)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Release channel&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Mygod/VPNHotspot/releases&#34;&gt;GitHub (recommended)&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=be.mygod.vpnhotspot&#34;&gt;Google Play&lt;/a&gt; (&lt;a href=&#34;https://play.google.com/apps/testing/be.mygod.vpnhotspot&#34;&gt;beta&lt;/a&gt;)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Monitor connected clients without root&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Up to Android 10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Auto update&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Email updates via watching releases&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;In-app update channel&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GitHub&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Google Play&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sponsors/Mygod&#34;&gt;Sponsor/Donation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Google Play In-App Purchases only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This app is useful for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connecting things that don&#39;t support VPN like Chromecasts behind corporate firewalls;&lt;/li&gt; &#xA; &lt;li&gt;Setting up &lt;a href=&#34;https://support.google.com/pixelphone/answer/7158475&#34;&gt;gapps&lt;/a&gt; behind corporate firewalls;&lt;/li&gt; &#xA; &lt;li&gt;Connecting to your mobile hotspot but you&#39;re not bothered to set up VPN on your device;&lt;/li&gt; &#xA; &lt;li&gt;Identifying, monitoring and blocking (unwanted) clients;&lt;/li&gt; &#xA; &lt;li&gt;Bypassing tethering limits by: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(recommended) Use this app with a real VPN/socksifier;&lt;/li&gt; &#xA;   &lt;li&gt;Use this app with some adblock/DNS apps that uses system VPN service APIs, i.e. fake VPNs; (&lt;a href=&#34;https://github.com/Mygod/VPNHotspot/discussions/216&#34;&gt;troubleshooting/a list of apps that work&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Try your luck and simply use this app.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;P.S. You can also do the similar on &lt;a href=&#34;https://www.expressvpn.com/support/vpn-setup/share-vpn-connection-windows/&#34;&gt;Windows&lt;/a&gt;, &lt;a href=&#34;https://www.expressvpn.com/support/vpn-setup/share-vpn-connection-mac/&#34;&gt;Mac&lt;/a&gt;, and &lt;a href=&#34;http://www.tetherme.net/&#34;&gt;iOS&lt;/a&gt;. I don&#39;t know about you but I can&#39;t get my stupid Windows 10 to work with &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/dd815243(v=vs.85).aspx&#34;&gt;hosted network&lt;/a&gt; now that they introduced this &lt;a href=&#34;https://support.microsoft.com/en-us/help/4027762/windows-use-your-pc-as-a-mobile-hotspot&#34;&gt;Mobile hotspot&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features That Requires System App Installation&lt;/h2&gt; &#xA;&lt;p&gt;The following features in the app requires it to be installed under &lt;code&gt;/system/priv-app&lt;/code&gt; since some restricted permissions are required. One way to do this is to use &lt;a href=&#34;https://github.com/Magisk-Modules-Repo/terminal_systemizer&#34;&gt;App systemizer for Magisk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Android 8-10, since app v2.4.0) &lt;code&gt;android.permission.OVERRIDE_WIFI_CONFIG&lt;/code&gt;: Read/write system Wi-Fi hotspot configuration. (&lt;a href=&#34;https://github.com/Mygod/VPNHotspot/issues/117&#34;&gt;#117&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Installing as system app also has the side benefit of launching root daemon less frequently due to having privileged permissions listed below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;android.permission.LOCAL_MAC_ADDRESS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;android.permission.MANAGE_USB&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;android.permission.OVERRIDE_WIFI_CONFIG&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;android.permission.READ_WIFI_CREDENTIAL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;android.permission.TETHER_PRIVILEGED&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;android.permission.WRITE_SECURE_SETTINGS&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Whenever you install an app update, if there was a new protected permission addition (last updated in v2.10.4), you should update the app installed in system as well to make the system grant the privileged permission.&lt;/p&gt; &#xA;&lt;h2&gt;Settings and How to Use Them&lt;/h2&gt; &#xA;&lt;p&gt;Default settings are picked to suit general use cases and maximize compatibility but it might not be optimal for battery life.&lt;/p&gt; &#xA;&lt;h3&gt;Upstream&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Upstream network interface: Main upstream regex used to reroute traffic. Leave blank for auto detect system VPN (allow/do not bypass this app to use VPN for it to work). Put &lt;code&gt;none&lt;/code&gt; (or &lt;code&gt;a^&lt;/code&gt; or other similarly invalid entries) to suppress tethering VPN.&lt;/li&gt; &#xA; &lt;li&gt;Fallback upstream: Fallback upstream is used when some VPN leave certain routes fallback to default network interface. Leave blank for auto detect. Put &lt;code&gt;none&lt;/code&gt; (or &lt;code&gt;a^&lt;/code&gt; or other similarly invalid entries) to forbid falling back. Put other interface name if you feel like it.&lt;/li&gt; &#xA; &lt;li&gt;IP Masquerade Mode: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;None: Nothing will be done to remap address/port from downstream. I find turning this option off sometimes works better for dummy VPNs like ad-blockers and socksifiers than Simple mode, e.g. Shadowsocks. But you should never use this for real VPNs like OpenVPN, etc.&lt;/li&gt; &#xA;   &lt;li&gt;Simple: Source address/port from downstream packets will be remapped and that&#39;s about it.&lt;/li&gt; &#xA;   &lt;li&gt;(since Android 9) Android Netd Service: Let your system handle masquerade. Android system will do a few extra things to make things like FTP and tethering traffic counter work. You should probably not use this if you are trying to hide your tethering activity from your carrier.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Downstream&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Disable IPv6 tethering: Turning this option on will disable IPv6 for system tethering. Useful for stopping IPv6 leaks as this app currently doesn&#39;t handle IPv6 VPN tethering (see &lt;a href=&#34;https://github.com/Mygod/VPNHotspot/issues/6&#34;&gt;#6&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;(since Android 8.1) Tethering hardware acceleration: This is a shortcut to the same setting in system Developer options. Turning this option off is probably a must for making VPN tethering over system tethering work, but it might also decrease your battery life while tethering is enabled.&lt;/li&gt; &#xA; &lt;li&gt;Enable DHCP workaround: Only used if your device isn&#39;t able to get your clients IP addresses with VPN on. This is a global setting, meaning it will only be applied once globally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Misc&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keep Wi-Fi alive: Acquire Wi-Fi locks when repeater, temporary hotspot or system VPN hotspot is activated. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Choose &#34;System default&#34; (default since Android 10) to save battery life;&lt;/li&gt; &#xA;   &lt;li&gt;(prior to Android 10) Choose &#34;On&#34; (default) if repeater/hotspot turns itself off automatically or stops working after a while;&lt;/li&gt; &#xA;   &lt;li&gt;(prior to Android 10) Choose &#34;High Performance Mode&#34; to minimize packet loss and latency (will consume more power);&lt;/li&gt; &#xA;   &lt;li&gt;(since Android 10) Choose &#34;Disable power save&#34; to decrease packet latency. An example use case is when a voice connection needs to be kept active even after the device screen goes off. Using this mode may improve the call quality. Requires support from the hardware.&lt;/li&gt; &#xA;   &lt;li&gt;(since Android 10) Choose &#34;Low latency mode&#34; to optimize for reduced packet latency, and this might result in: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Reduced battery life.&lt;/li&gt; &#xA;     &lt;li&gt;Reduced throughput.&lt;/li&gt; &#xA;     &lt;li&gt;Reduced frequency of Wi-Fi scanning. This may cause the device not roaming or switching to the AP with highest signal quality, and location accuracy may be reduced. Example use cases are real time gaming or virtual reality applications where low latency is a key factor for user experience. Requires support from the hardware. Note: Requires this app running in foreground with screen on.&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start repeater on boot: Self explanatory.&lt;/li&gt; &#xA; &lt;li&gt;Repeater safe mode: (Android 10, March 2020 security patch or newer) You might be required to turn this mode off if you want to use short SSID (at most 8 bytes long). Unsafe mode might not work for your device, and there is a small chance you will soft brick your device (recoverable). See &lt;a href=&#34;https://github.com/Mygod/VPNHotspot/issues/153&#34;&gt;#153&lt;/a&gt; for more information.&lt;/li&gt; &#xA; &lt;li&gt;Network status monitor mode: This option controls how the app monitors connected devices as well as interface changes (when custom upstream is used). Requires restarting the app to take effects. (best way is to go to app info and force stop) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Netlink monitor: Use Linux netlink mechanism, most battery efficient but may not work with SELinux enforcing mode. Sometimes auto fallbacks to Netlink monitor with root and Poll.&lt;/li&gt; &#xA;   &lt;li&gt;Netlink monitor with root: Same as above but runs netlink as root. This option works well with SELinux enforcing mode but might still be bugged on devices heavily modified by OEM and/or carriers. Sometimes auto fallbacks to Poll.&lt;/li&gt; &#xA;   &lt;li&gt;Poll: (default) Update network information manually every second. Least battery efficient but it should work on most devices. Recommended to switch to other modes if possible.&lt;/li&gt; &#xA;   &lt;li&gt;Poll with root: Same as Poll but polling is done using a root shell.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Q &amp;amp; A&lt;/h2&gt; &#xA;&lt;p&gt;Search the &lt;a href=&#34;https://github.com/Mygod/VPNHotspot/issues&#34;&gt;issue tracker&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Mygod/VPNHotspot/issues/8#issuecomment-448529512&#34;&gt;What changes exactly can this app do to my system? (and how to revert them)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Mygod/VPNHotspot/issues/62&#34;&gt;No root?&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Failed to create group due to internal error/repeater shuts down after a while?&lt;/h3&gt; &#xA;&lt;p&gt;This could caused by the Wi-Fi channel you selected is no longer available, due to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your device doesn&#39;t support operating on this channel, or&lt;/li&gt; &#xA; &lt;li&gt;There is some nearby Wi-Fi direct device that broadcasted that it can&#39;t operate on the channel you picked.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For maximum stability, you need to set channel = 0 so that your device will pick a channel automatically. You can also use WPS to connect your 2.4GHz-only device to force the repeater to switch from 5GHz to 2.4GHz for this time.&lt;/p&gt; &#xA;&lt;h2&gt;Private APIs used / Assumptions for Android customizations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;a.k.a. things that can go wrong if this app doesn&#39;t work.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a list of stuff that might impact this app&#39;s functionality if unavailable. This is only meant to be an index. You can read more in the source code. API restrictions are updated up to &lt;a href=&#34;https://dl.google.com/developers/android/sc/non-sdk/hiddenapi-flags.csv&#34;&gt;SHA-256 checksum &lt;code&gt;40674ff4291eb268f86561bf687e69dbd013df9ec9531a460404532a4ac9a761&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Greylisted/blacklisted APIs or internal constants: (some constants are hardcoded or implicitly used)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(prior to API 30) &lt;code&gt;Landroid/net/ConnectivityManager;-&amp;gt;getLastTetherError(Ljava/lang/String;)I,max-target-r&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/ConnectivityModuleConnector;-&amp;gt;IN_PROCESS_SUFFIX:Ljava/lang/String;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$TetheringEventCallback;-&amp;gt;onTetherableInterfaceRegexpsChanged(Landroid/net/TetheringManager$TetheringInterfaceRegexps;)V,blocked&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setUserConfiguration(Z)Landroid/net/wifi/SoftApConfiguration$Builder;,blocked&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;BAND_TYPES:[I,blocked&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApInfo;-&amp;gt;getApInstanceIdentifier()Ljava/lang/String;,blocked&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/WifiClient;-&amp;gt;getApInstanceIdentifier()Ljava/lang/String;,blocked&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(prior to API 30) &lt;code&gt;Landroid/net/wifi/WifiConfiguration$KeyMgmt;-&amp;gt;FT_PSK:I,lo-prio,max-target-o&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(prior to API 30) &lt;code&gt;Landroid/net/wifi/WifiConfiguration$KeyMgmt;-&amp;gt;WPA_PSK_SHA256:I,blocked&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 23, prior to API 30) &lt;code&gt;Landroid/net/wifi/WifiConfiguration;-&amp;gt;AP_BAND_2GHZ:I,lo-prio,max-target-o&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 23, prior to API 30) &lt;code&gt;Landroid/net/wifi/WifiConfiguration;-&amp;gt;AP_BAND_5GHZ:I,lo-prio,max-target-o&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 28, prior to API 30) &lt;code&gt;Landroid/net/wifi/WifiConfiguration;-&amp;gt;AP_BAND_ANY:I,lo-prio,max-target-o&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 23, prior to API 30) &lt;code&gt;Landroid/net/wifi/WifiConfiguration;-&amp;gt;apBand:I,unsupported&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 23, prior to API 30) &lt;code&gt;Landroid/net/wifi/WifiConfiguration;-&amp;gt;apChannel:I,unsupported&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 28, prior to API 30) &lt;code&gt;Landroid/net/wifi/WifiManager$SoftApCallback;-&amp;gt;onNumClientsChanged(I)V,greylist-max-o&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 26) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;cancelLocalOnlyHotspotRequest()V,unsupported&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(prior to API 26) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;setWifiApEnabled(Landroid/net/wifi/WifiConfiguration;Z)Z&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Landroid/net/wifi/p2p/WifiP2pConfig$Builder;-&amp;gt;MAC_ANY_ADDRESS:Landroid/net/MacAddress;,blocked&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 29) &lt;code&gt;Landroid/net/wifi/p2p/WifiP2pConfig$Builder;-&amp;gt;mNetworkName:Ljava/lang/String;,blocked&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Landroid/net/wifi/p2p/WifiP2pManager;-&amp;gt;startWps(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/WpsInfo;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V,unsupported&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 28, prior to API 30) &lt;code&gt;Landroid/provider/Settings$Global;-&amp;gt;SOFT_AP_TIMEOUT_ENABLED:Ljava/lang/String;,lo-prio,max-target-o&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(prior to API 30) &lt;code&gt;Lcom/android/internal/R$array;-&amp;gt;config_tether_bluetooth_regexs:I,max-target-q&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(prior to API 30) &lt;code&gt;Lcom/android/internal/R$array;-&amp;gt;config_tether_usb_regexs:I,max-target-q&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(prior to API 30) &lt;code&gt;Lcom/android/internal/R$array;-&amp;gt;config_tether_wifi_regexs:I,max-target-q&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(on API 29) &lt;code&gt;Lcom/android/internal/R$bool;-&amp;gt;config_wifi_p2p_mac_randomization_supported:I,blacklist&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 28, prior to API 30) &lt;code&gt;Lcom/android/internal/R$integer;-&amp;gt;config_wifi_framework_soft_ap_timeout_delay:I,greylist-max-o&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Lcom/android/internal/R$string;-&amp;gt;config_ethernet_iface_regex:I,lo-prio,max-target-o&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 27) &lt;code&gt;Lcom/android/server/connectivity/tethering/OffloadHardwareInterface;-&amp;gt;DEFAULT_TETHER_OFFLOAD_DISABLED:I&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 30) &lt;code&gt;Lcom/android/server/wifi/WifiContext;-&amp;gt;ACTION_RESOURCES_APK:Ljava/lang/String;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 29) &lt;code&gt;Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;-&amp;gt;ANONYMIZED_DEVICE_ADDRESS:Ljava/lang/String;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 30) &lt;code&gt;Lcom/android/server/SystemServer;-&amp;gt;TETHERING_CONNECTOR_CLASS:Ljava/lang/String;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 29) &lt;code&gt;Ldalvik/system/VMRuntime;-&amp;gt;getRuntime()Ldalvik/system/VMRuntime;,core-platform-api,unsupported&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 29) &lt;code&gt;Ldalvik/system/VMRuntime;-&amp;gt;setHiddenApiExemptions([Ljava/lang/String;)V,blocked,core-platform-api&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 26) &lt;code&gt;Ljava/lang/invoke/MethodHandles$Lookup;-&amp;gt;&amp;lt;init&amp;gt;(Ljava/lang/Class;I)V,unsupported&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 26) &lt;code&gt;Ljava/lang/invoke/MethodHandles$Lookup;-&amp;gt;ALL_MODES:I,lo-prio,max-target-o&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(prior to API 29) &lt;code&gt;Ljava/net/InetAddress;-&amp;gt;parseNumericAddress(Ljava/lang/String;)Ljava/net/InetAddress;,core-platform-api,max-target-p&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Hidden whitelisted APIs: (same catch as above, however, things in this list are less likely to be broken)&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;(since API 24) &lt;code&gt;Landroid/bluetooth/BluetoothPan;-&amp;gt;isTetheringOn()Z,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 24) &lt;code&gt;Landroid/bluetooth/BluetoothProfile;-&amp;gt;PAN:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/content/Context;-&amp;gt;TETHERING_SERVICE:Ljava/lang/String;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 24, prior to API 30) &lt;code&gt;Landroid/net/ConnectivityManager$OnStartTetheringCallback;-&amp;gt;&amp;lt;init&amp;gt;()V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 24, prior to API 30) &lt;code&gt;Landroid/net/ConnectivityManager$OnStartTetheringCallback;-&amp;gt;onTetheringFailed()V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 24, prior to API 30) &lt;code&gt;Landroid/net/ConnectivityManager$OnStartTetheringCallback;-&amp;gt;onTetheringStarted()V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 24, prior to API 30) &lt;code&gt;Landroid/net/ConnectivityManager;-&amp;gt;startTethering(IZLandroid/net/ConnectivityManager$OnStartTetheringCallback;Landroid/os/Handler;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 24, prior to API 30) &lt;code&gt;Landroid/net/ConnectivityManager;-&amp;gt;stopTethering(I)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Landroid/net/LinkProperties;-&amp;gt;getAllInterfaceNames()Ljava/util/List;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Landroid/net/LinkProperties;-&amp;gt;getAllRoutes()Ljava/util/List;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$StartTetheringCallback;-&amp;gt;onTetheringFailed(I)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$StartTetheringCallback;-&amp;gt;onTetheringStarted()V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$TetheringEventCallback;-&amp;gt;onClientsChanged(Ljava/util/Collection;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$TetheringEventCallback;-&amp;gt;onError(Ljava/lang/String;I)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$TetheringEventCallback;-&amp;gt;onOffloadStatusChanged(I)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$TetheringEventCallback;-&amp;gt;onTetherableInterfacesChanged(Ljava/util/List;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$TetheringEventCallback;-&amp;gt;onTetheredInterfacesChanged(Ljava/util/List;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$TetheringEventCallback;-&amp;gt;onTetheringSupported(Z)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$TetheringEventCallback;-&amp;gt;onUpstreamChanged(Landroid/net/Network;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$TetheringRequest$Builder;-&amp;gt;&amp;lt;init&amp;gt;(I)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$TetheringRequest$Builder;-&amp;gt;build()Landroid/net/TetheringManager$TetheringRequest;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$TetheringRequest$Builder;-&amp;gt;setExemptFromEntitlementCheck(Z)Landroid/net/TetheringManager$TetheringRequest$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager$TetheringRequest$Builder;-&amp;gt;setShouldShowEntitlementUi(Z)Landroid/net/TetheringManager$TetheringRequest$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;ACTION_TETHER_STATE_CHANGED:Ljava/lang/String;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 26) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;EXTRA_ACTIVE_LOCAL_ONLY:Ljava/lang/String;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;EXTRA_ACTIVE_TETHER:Ljava/lang/String;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;EXTRA_ERRORED_TETHER:Ljava/lang/String;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 24) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;TETHERING_BLUETOOTH:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;TETHERING_ETHERNET:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;TETHERING_NCM:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 24) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;TETHERING_USB:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 24) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;TETHERING_WIFI:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;TETHER_ERROR_*:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSION:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;TETHER_HARDWARE_OFFLOAD_FAILED:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;TETHER_HARDWARE_OFFLOAD_STARTED:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;TETHER_HARDWARE_OFFLOAD_STOPPED:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;registerTetheringEventCallback(Ljava/util/concurrent/Executor;Landroid/net/TetheringManager$TetheringEventCallback;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;startTethering(Landroid/net/TetheringManager$TetheringRequest;Ljava/util/concurrent/Executor;Landroid/net/TetheringManager$StartTetheringCallback;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;stopTethering(I)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/TetheringManager;-&amp;gt;unregisterTetheringEventCallback(Landroid/net/TetheringManager$TetheringEventCallback;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApCapability;-&amp;gt;SOFTAP_FEATURE_BAND_24G_SUPPORTED:J,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApCapability;-&amp;gt;SOFTAP_FEATURE_BAND_5G_SUPPORTED:J,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApCapability;-&amp;gt;SOFTAP_FEATURE_BAND_60G_SUPPORTED:J,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApCapability;-&amp;gt;SOFTAP_FEATURE_BAND_6G_SUPPORTED:J,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApCapability;-&amp;gt;SOFTAP_FEATURE_*:J,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApCapability;-&amp;gt;areFeaturesSupported(J)Z,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApCapability;-&amp;gt;getMaxSupportedClients()I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApCapability;-&amp;gt;getSupportedChannelList(I)[I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;&amp;lt;init&amp;gt;()V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;&amp;lt;init&amp;gt;(Landroid/net/wifi/SoftApConfiguration;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;build()Landroid/net/wifi/SoftApConfiguration;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setAllowedClientList(Ljava/util/List;)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setAutoShutdownEnabled(Z)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(on API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setBand(I)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setBlockedClientList(Ljava/util/List;)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setBridgedModeOpportunisticShutdownEnabled(Z)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setBssid(Landroid/net/MacAddress;)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(on API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setChannel(II)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setChannels(Landroid/util/SparseIntArray;)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setClientControlByUserEnabled(Z)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setHiddenSsid(Z)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setIeee80211axEnabled(Z)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setMacRandomizationSetting(I)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setMaxNumberOfClients(I)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setPassphrase(Ljava/lang/String;I)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setShutdownTimeoutMillis(J)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration$Builder;-&amp;gt;setSsid(Ljava/lang/String;)Landroid/net/wifi/SoftApConfiguration$Builder;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;BAND_2GHZ:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;BAND_5GHZ:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;BAND_60GHZ:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;BAND_6GHZ:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;BAND_*:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;RANDOMIZATION_NONE:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;RANDOMIZATION_PERSISTENT:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;getAllowedClientList()Ljava/util/List;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;getBand()I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;getBlockedClientList()Ljava/util/List;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;getChannel()I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;getChannels()Landroid/util/SparseIntArray;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;getMacRandomizationSetting()I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;getMaxNumberOfClients()I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;getShutdownTimeoutMillis()J,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;isAutoShutdownEnabled()Z,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;isBridgedModeOpportunisticShutdownEnabled()Z,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;isClientControlByUserEnabled()Z,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;isIeee80211axEnabled()Z,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApConfiguration;-&amp;gt;isUserConfiguration()Z,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApInfo;-&amp;gt;CHANNEL_WIDTH_*:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(on API 30) &lt;code&gt;Landroid/net/wifi/SoftApInfo;-&amp;gt;CHANNEL_WIDTH_INVALID:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApInfo;-&amp;gt;getAutoShutdownTimeoutMillis()J,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApInfo;-&amp;gt;getBandwidth()I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApInfo;-&amp;gt;getBssid()Landroid/net/MacAddress;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/SoftApInfo;-&amp;gt;getFrequency()I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/SoftApInfo;-&amp;gt;getWifiStandard()I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/WifiClient;-&amp;gt;getMacAddress()Landroid/net/MacAddress;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(prior to API 30) &lt;code&gt;Landroid/net/wifi/WifiConfiguration$KeyMgmt;-&amp;gt;WPA2_PSK:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/WifiManager$SoftApCallback;-&amp;gt;onBlockedClientConnecting(Landroid/net/wifi/WifiClient;I)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/WifiManager$SoftApCallback;-&amp;gt;onCapabilityChanged(Landroid/net/wifi/SoftApCapability;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/WifiManager$SoftApCallback;-&amp;gt;onConnectedClientsChanged(Ljava/util/List;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(on API 30) &lt;code&gt;Landroid/net/wifi/WifiManager$SoftApCallback;-&amp;gt;onInfoChanged(Landroid/net/wifi/SoftApInfo;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 31) &lt;code&gt;Landroid/net/wifi/WifiManager$SoftApCallback;-&amp;gt;onInfoChanged(Ljava/util/List;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 28) &lt;code&gt;Landroid/net/wifi/WifiManager$SoftApCallback;-&amp;gt;onStateChanged(II)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 23) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;EXTRA_WIFI_AP_FAILURE_REASON:Ljava/lang/String;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 26) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;EXTRA_WIFI_AP_INTERFACE_NAME:Ljava/lang/String;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 23) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;EXTRA_WIFI_AP_STATE:Ljava/lang/String;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;SAP_CLIENT_BLOCK_REASON_CODE_*:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 23) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;SAP_START_FAILURE_*:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 23) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;WIFI_AP_STATE_CHANGED_ACTION:Ljava/lang/String;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 23) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;WIFI_AP_STATE_DISABLED:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 23) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;WIFI_AP_STATE_DISABLING:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 23) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;WIFI_AP_STATE_ENABLED:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 23) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;WIFI_AP_STATE_ENABLING:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 23) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;WIFI_AP_STATE_FAILED:I,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;getSoftApConfiguration()Landroid/net/wifi/SoftApConfiguration;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(prior to API 30) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;getWifiApConfiguration()Landroid/net/wifi/WifiConfiguration;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;isApMacRandomizationSupported()Z,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 28) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;registerSoftApCallback(Ljava/util/concurrent/Executor;Landroid/net/wifi/WifiManager$SoftApCallback;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 30) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;setSoftApConfiguration(Landroid/net/wifi/SoftApConfiguration;)Z,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(prior to API 30) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;setWifiApConfiguration(Landroid/net/wifi/WifiConfiguration;)Z,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;(since API 28) &lt;code&gt;Landroid/net/wifi/WifiManager;-&amp;gt;unregisterSoftApCallback(Landroid/net/wifi/WifiManager$SoftApCallback;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Landroid/net/wifi/p2p/WifiP2pGroupList;-&amp;gt;getGroupList()Ljava/util/List;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Landroid/net/wifi/p2p/WifiP2pManager$PersistentGroupInfoListener;-&amp;gt;onPersistentGroupInfoAvailable(Landroid/net/wifi/p2p/WifiP2pGroupList;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Landroid/net/wifi/p2p/WifiP2pManager;-&amp;gt;deletePersistentGroup(Landroid/net/wifi/p2p/WifiP2pManager$Channel;ILandroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Landroid/net/wifi/p2p/WifiP2pManager;-&amp;gt;requestPersistentGroupInfo(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$PersistentGroupInfoListener;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Landroid/net/wifi/p2p/WifiP2pManager;-&amp;gt;setWifiP2pChannels(Landroid/net/wifi/p2p/WifiP2pManager$Channel;IILandroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Landroid/provider/Settings$Global;-&amp;gt;TETHER_OFFLOAD_DISABLED:Ljava/lang/String;,sdk,system-api,test-api&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Nonexported system resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(since API 30) &lt;code&gt;@com.android.networkstack.tethering:array/config_tether_bluetooth_regexs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 30) &lt;code&gt;@com.android.networkstack.tethering:array/config_tether_ncm_regexs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 30) &lt;code&gt;@com.android.networkstack.tethering:array/config_tether_usb_regexs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 30) &lt;code&gt;@com.android.networkstack.tethering:array/config_tether_wifi_p2p_regexs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 30) &lt;code&gt;@com.android.networkstack.tethering:array/config_tether_wifi_regexs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 30) &lt;code&gt;@com.android.networkstack.tethering:array/config_tether_wigig_regexs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 30) &lt;code&gt;@com.android.wifi.resources:bool/config_wifi_p2p_mac_randomization_supported&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(since API 30) &lt;code&gt;@com.android.wifi.resources:integer/config_wifiFrameworkSoftApShutDownTimeoutMilliseconds&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other: Activity &lt;code&gt;com.android.settings/.Settings$TetherSettingsActivity&lt;/code&gt; is assumed to be exported.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;ip rule&lt;/code&gt; priorities, &lt;code&gt;RULE_PRIORITY_SECURE_VPN&lt;/code&gt; and &lt;code&gt;RULE_PRIORITY_TETHERING&lt;/code&gt; is assumed to be 12000 and 18000 respectively; (prior to API 24) &lt;code&gt;RULE_PRIORITY_DEFAULT_NETWORK&lt;/code&gt; is assumed to be 22000 (or at least &amp;gt; 18000). DHCP server like &lt;code&gt;dnsmasq&lt;/code&gt; is assumed to run and send DHCP packets as root.&lt;/p&gt; &#xA;&lt;p&gt;Undocumented system binaries are all bundled and executable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(since API 24) &lt;code&gt;iptables-save&lt;/code&gt;, &lt;code&gt;ip6tables-save&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;echo&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/system/bin/ip&lt;/code&gt; (&lt;code&gt;monitor neigh rule unreachable&lt;/code&gt;);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ndc&lt;/code&gt; (&lt;code&gt;ipfwd&lt;/code&gt; since API 23, &lt;code&gt;nat&lt;/code&gt; since API 28);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iptables&lt;/code&gt;, &lt;code&gt;ip6tables&lt;/code&gt; (with correct version corresponding to API level, &lt;code&gt;-nvx -L &amp;lt;chain&amp;gt;&lt;/code&gt;);&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sh&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;su&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Wi-Fi driver &lt;code&gt;wpa_supplicant&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;P2P configuration file is assumed to be saved to &lt;a href=&#34;https://android.googlesource.com/platform/external/wpa_supplicant_8/+/0b4856b6dc451e290f1f64f6af17e010be78c073/wpa_supplicant/hidl/1.1/supplicant.cpp#26&#34;&gt;&lt;code&gt;/data/vendor/wifi/wpa/p2p_supplicant.conf&lt;/code&gt; or &lt;code&gt;/data/misc/wifi/p2p_supplicant.conf&lt;/code&gt;&lt;/a&gt; and have reasonable format;&lt;/li&gt; &#xA; &lt;li&gt;Android system is expected to restart &lt;code&gt;wpa_supplicant&lt;/code&gt; after it terminates.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>igorwojda/android-showcase</title>
    <updated>2022-07-13T01:46:39Z</updated>
    <id>tag:github.com,2022-07-13:/igorwojda/android-showcase</id>
    <link href="https://github.com/igorwojda/android-showcase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💎 Android application following best practices: Kotlin, Coroutines, JetPack, Clean Architecture, Feature Modules, Tests, MVVM, DI, Static Analysis...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Android showcase&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Kotlin-1.5.20-blue.svg?sanitize=true&#34; alt=&#34;Kotlin Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.android.com/studio/releases/gradle-plugin&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/AGP-4-blue?style=flat&#34; alt=&#34;AGP&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gradle.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gradle-7-blue?style=flat&#34; alt=&#34;Gradle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codebeat.co/projects/github-com-igorwojda-android-showcase-main&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/e9f1a825-b5bd-4c7a-aadc-7c8d0cf59310&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/igorwojda/android-showcase&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/igorwojda/android-showcase/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Showcase is a sample project that presents a modern approach to &lt;a href=&#34;https://en.wikipedia.org/wiki/Android_(operating_system)&#34;&gt;Android&lt;/a&gt; application development.&lt;/p&gt; &#xA;&lt;p&gt;The goal of the project is to combine popular libraries/tools and demonstrate best developement practices by utilizing up to date tech-stack and presenting modern Android application &lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/#architecture&#34;&gt;Architecture&lt;/a&gt; that is modular, scalable, maintainable, and testable. This application may look simple, but it has all the pieces that will provide the rock-solid foundation for the larger app suitable for bigger teams and long &lt;a href=&#34;https://en.wikipedia.org/wiki/Application_lifecycle_management&#34;&gt;application lifecycle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project is being maintained to match industry standards. Please check &lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; page if you want to help.&lt;/p&gt; &#xA;&lt;h2&gt;Project characteristics and tech-stack&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/misc/image/application_anim.gif&#34; width=&#34;336&#34; align=&#34;right&#34; hspace=&#34;20&#34;&gt; &#xA;&lt;p&gt;This project takes advantage of best practices, many popular libraries and tools in the Android ecosystem. Most of the libraries are in the stable version unless there is a good reason to use non-stable dependency.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tech-stack &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/&#34;&gt;100% Kotlin&lt;/a&gt; + &lt;a href=&#34;https://kotlinlang.org/docs/reference/coroutines-overview.html&#34;&gt;Coroutines&lt;/a&gt; - perform background operations&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://square.github.io/retrofit/&#34;&gt;Retrofit&lt;/a&gt; - networking&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.android.com/jetpack&#34;&gt;Jetpack&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/navigation/&#34;&gt;Navigation&lt;/a&gt; - in-app navigation&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/livedata&#34;&gt;LiveData&lt;/a&gt; - notify views about database change&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/lifecycle&#34;&gt;Lifecycle&lt;/a&gt; - perform an action when lifecycle state changes&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/viewmodel&#34;&gt;ViewModel&lt;/a&gt; - store and manage UI-related data in a lifecycle conscious way&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developer.android.com/jetpack/androidx/releases/room&#34;&gt;Room&lt;/a&gt; - store offline cache&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.kodein.org/&#34;&gt;Kodein&lt;/a&gt; - dependency injection&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/coil-kt/coil&#34;&gt;Coil&lt;/a&gt; - image loading library&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://airbnb.io/lottie&#34;&gt;Lottie&lt;/a&gt; - animation library&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://facebook.github.io/stetho/&#34;&gt;Stetho&lt;/a&gt; - application debugging&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Modern Architecture &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clean Architecture (at feature module level)&lt;/li&gt; &#xA;   &lt;li&gt;Single activity architecture using &lt;a href=&#34;https://developer.android.com/guide/navigation/navigation-getting-started&#34;&gt;Navigation component&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;MVVM + MVI (presentation layer)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio/projects/dynamic-delivery&#34;&gt;Dynamic feature modules&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture&#34;&gt;Android Architecture components&lt;/a&gt; (&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/viewmodel&#34;&gt;ViewModel&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/livedata&#34;&gt;LiveData&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/jetpack/androidx/releases/navigation&#34;&gt;Navigation&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.android.com/kotlin/ktx&#34;&gt;Android KTX&lt;/a&gt; - Jetpack Kotlin extensions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CI &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Automatic PR verification including tests, linters and 3rd online tools&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Testing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Unit_testing&#34;&gt;Unit Tests&lt;/a&gt; (&lt;a href=&#34;https://junit.org/junit5/&#34;&gt;JUnit 5&lt;/a&gt; via &lt;a href=&#34;https://github.com/mannodermaus/android-junit5&#34;&gt;android-junit5&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Graphical_user_interface_testing&#34;&gt;UT Tests&lt;/a&gt; (&lt;a href=&#34;https://developer.android.com/training/testing/espresso&#34;&gt;Espresso&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://mockk.io/&#34;&gt;Mockk&lt;/a&gt; - mocking framework&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/MarkusAmshove/Kluent&#34;&gt;Kluent&lt;/a&gt; - assertion framework&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;UI &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://material.io/design&#34;&gt;Material design&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Reactive UI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Static analysis tools &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/pinterest/ktlint&#34;&gt;Ktlint&lt;/a&gt; - validate code formating&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/arturbosch/detekt#with-gradle&#34;&gt;Detekt&lt;/a&gt; - verify complexity look for and code smell&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Gradle &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.gradle.org/current/userguide/kotlin_dsl.html&#34;&gt;Gradle Kotlin DSL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Custom tasks&lt;/li&gt; &#xA;   &lt;li&gt;Plugins (&lt;a href=&#34;https://developer.android.com/guide/navigation/navigation-pass-data#Safe-args&#34;&gt;SafeArgs&lt;/a&gt;, &lt;a href=&#34;https://github.com/mannodermaus/android-junit5&#34;&gt;android-junit5&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.gradle.org/current/userguide/dependency_locking.html&#34;&gt;Dependency locks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.gradle.org/7.0-milestone-1/userguide/platforms.html&#34;&gt;Versions catalog&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Feature related code is placed inside one of the feature modules. We can think about each feature as the reusable component, equivalent of &lt;a href=&#34;https://en.wikipedia.org/wiki/Microservices&#34;&gt;microservice&lt;/a&gt; or private library.&lt;/p&gt; &#xA;&lt;p&gt;The modularized code-base approach provides few benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;better &lt;a href=&#34;https://en.wikipedia.org/wiki/Separation_of_concerns&#34;&gt;separation of concerns&lt;/a&gt;. Each module has a clear API., Feature related classes live in different modules and can&#39;t be referenced without explicit module dependency.&lt;/li&gt; &#xA; &lt;li&gt;features can be developed in parallel eg. by different teams&lt;/li&gt; &#xA; &lt;li&gt;each feature can be developed in isolation, independently from other features&lt;/li&gt; &#xA; &lt;li&gt;faster compile time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Module types and module dependencies&lt;/h3&gt; &#xA;&lt;p&gt;This diagram presents dependencies between project modules (Gradle sub-projects).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/igorwojda/android-showcase/raw/main/misc/image/module_dependencies.png?raw=true&#34; alt=&#34;module_dependencies&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that due usage of Android &lt;code&gt;dynamic-feature&lt;/code&gt; module dependencies are reversed (feature modules are depending on &lt;code&gt;app&lt;/code&gt; module, not another way around).&lt;/p&gt; &#xA;&lt;p&gt;We have three kinds of modules in the application:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;app&lt;/code&gt; module - this is the main module. It contains code that wires multiple modules together (dependency injection setup, &lt;code&gt;NavHostActivity&lt;/code&gt;, etc.) and fundamental application configuration (retrofit configuration, required permissions setup, custom application class, etc.).&lt;/li&gt; &#xA; &lt;li&gt;application-specific &lt;code&gt;library_x&lt;/code&gt; modules that some of the features could depend on. This is helpful if you want to share some assets or code only between few feature modules (currently app has no such modules)&lt;/li&gt; &#xA; &lt;li&gt;feature modules - the most common type of module containing all code related to a given feature.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Feature module structure&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Clean architecture&lt;/code&gt; is the &#34;core architecture&#34; of the application, so each &lt;code&gt;feature module&lt;/code&gt; contains own set of Clean architecture layers:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/igorwojda/android-showcase/raw/main/misc/image/module_dependencies_layers.png?raw=true&#34; alt=&#34;module_dependencies_layers&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Notice that &lt;code&gt;app&lt;/code&gt; module and &lt;code&gt;library_x&lt;/code&gt; modules structure differs a bit from feature module structure.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Each feature module contains non-layer components and 3 layers with distinct set of responsibilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/igorwojda/android-showcase/raw/main/misc/image/feature_structure.png?raw=true&#34; alt=&#34;feature_structure&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Presentation layer&lt;/h4&gt; &#xA;&lt;p&gt;This layer is closest to what the user sees on the screen. The &lt;code&gt;presentation&lt;/code&gt; layer is a mix of &lt;code&gt;MVVM&lt;/code&gt; (Jetpack &lt;code&gt;ViewModel&lt;/code&gt; used to preserve data across activity restart) and &lt;code&gt;MVI&lt;/code&gt; (&lt;code&gt;actions&lt;/code&gt; modify the &lt;code&gt;common state&lt;/code&gt; of the view and then new state is edited to a view via &lt;code&gt;LiveData&lt;/code&gt; to be rendered).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;common state&lt;/code&gt; (for each view) approach derives from &lt;a href=&#34;https://en.wikipedia.org/wiki/Unidirectional_Data_Flow_(computer_science)&#34;&gt;Unidirectional Data Flow&lt;/a&gt; and &lt;a href=&#34;https://redux.js.org/introduction/three-principles&#34;&gt;Redux principles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;View (Fragment)&lt;/strong&gt; - presents data on the screen and pass user interactions to View Model. Views are hard to test, so they should be as simple as possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ViewModel&lt;/strong&gt; - dispatches (through &lt;code&gt;LiveData&lt;/code&gt;) state changes to the view and deals with user interactions (these view models are not simply &lt;a href=&#34;https://en.wikipedia.org/wiki/Plain_old_Java_object&#34;&gt;POJO classes&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ViewState&lt;/strong&gt; - common state for a single view&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NavManager&lt;/strong&gt; - singleton that facilitates handling all navigation events inside &lt;code&gt;NavHostActivity&lt;/code&gt; (instead of separately, inside each view)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Domain layer&lt;/h4&gt; &#xA;&lt;p&gt;This is the core layer of the application. Notice that the &lt;code&gt;domain&lt;/code&gt; layer is independent of any other layers. This allows to make domain models and business logic independent from other layers. In other words, changes in other layers will have no effect on &lt;code&gt;domain&lt;/code&gt; layer eg. changing database (&lt;code&gt;data&lt;/code&gt; layer) or screen UI (&lt;code&gt;presentation&lt;/code&gt; layer) ideally will not result in any code change withing &lt;code&gt;domain&lt;/code&gt; layer.&lt;/p&gt; &#xA;&lt;p&gt;Components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;UseCase&lt;/strong&gt; - contains business logic&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DomainModel&lt;/strong&gt; - defies the core structure of the data that will be used within the application. This is the source of truth for application data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Repository interface&lt;/strong&gt; - required to keep the &lt;code&gt;domain&lt;/code&gt; layer independent from the &lt;code&gt;data layer&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_inversion_principle&#34;&gt;Dependency inversion&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Data layer&lt;/h4&gt; &#xA;&lt;p&gt;Manages application data and exposes these data sources as repositories to the &lt;code&gt;domain&lt;/code&gt; layer. Typical responsibilities of this layer would be to retrieve data from the internet and optionally cache this data locally.&lt;/p&gt; &#xA;&lt;p&gt;Components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Repository&lt;/strong&gt; is exposing data to the &lt;code&gt;domain&lt;/code&gt; layer. Depending on application structure and quality of the external APIs repository can also merge, filter, and transform the data. The intention of these operations is to create high-quality data source for the &lt;code&gt;domain&lt;/code&gt; layer, not to perform any business logic (&lt;code&gt;domain&lt;/code&gt; layer &lt;code&gt;use case&lt;/code&gt; responsibility).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mapper&lt;/strong&gt; - maps &lt;code&gt;data model&lt;/code&gt; to &lt;code&gt;domain model&lt;/code&gt; (to keep &lt;code&gt;domain&lt;/code&gt; layer independent from the &lt;code&gt;data&lt;/code&gt; layer).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;RetrofitService&lt;/strong&gt; - defines a set of API endpoints.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;DataModel&lt;/strong&gt; - defines the structure of the data retrieved from the network and contains annotations, so Retrofit (Moshi) understands how to parse this network data (XML, JSON, Binary...) this data into objects.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Data flow&lt;/h3&gt; &#xA;&lt;p&gt;Below diagram presents application data flow when a user interacts with &lt;code&gt;album list screen&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/igorwojda/android-showcase/raw/main/misc/image/app_data_flow.png?raw=true&#34; alt=&#34;app_data_flow&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependency management&lt;/h2&gt; &#xA;&lt;p&gt;This project utilizes multiple mechanics to easily share the same versions of dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;App library dependencies&lt;/h3&gt; &#xA;&lt;p&gt;External dependencies (libraries) are defined using &lt;a href=&#34;https://docs.gradle.org/7.0-milestone-1/userguide/platforms.html&#34;&gt;versions catalog&lt;/a&gt; feature in the &lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/settings.gradle&#34;&gt;settings.gradle&lt;/a&gt; file. These dynamic library versions are locked using Gradle &lt;a href=&#34;https://docs.gradle.org/current/userguide/dependency_locking.html&#34;&gt;locking dependency&lt;/a&gt; mechanism - concrete dependency versions are stored in &lt;code&gt;MODULE_NAME/gradle.lockfile&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;To update lock files run &lt;code&gt;./gradlew test lint s --write-locks&lt;/code&gt; command and commit updated &lt;code&gt;gradle.lockfile&lt;/code&gt; files to repository.&lt;/p&gt; &#xA;&lt;p&gt;Each feature module depends on the &lt;code&gt;app&lt;/code&gt; module, so dependencies are shared without need to add them explicitly in each feature module.&lt;/p&gt; &#xA;&lt;h3&gt;Gradle plugin dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Gradle plugins are defined in &lt;a href=&#34;https://docs.gradle.org/current/userguide/plugins.html#sec:plugin_management&#34;&gt;pluginManagement&lt;/a&gt; block (&lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/settings.gradle&#34;&gt;settings.gradle&lt;/a&gt; file).&lt;/p&gt; &#xA;&lt;p&gt;Dynamic versions aren&#39;t supported for Gradle plugins, so &lt;a href=&#34;https://docs.gradle.org/current/userguide/dependency_locking.html&#34;&gt;locking dependency&lt;/a&gt; mechanism can&#39;t be used (like for app library dependencies), and thus versions of some libraries &amp;amp; plugins have to be hardcoded in the &lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/gradle.properties&#34;&gt;gradle.properties&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;There is no easy way to share id between &lt;code&gt;pluginManagement&lt;/code&gt; block and &lt;code&gt;buildSrc&lt;/code&gt; folder, so plugin ids (also used within build scripts), have to be duplicated in the &lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/buildSrc/java/GradlePluginId/kt&#34;&gt;GradlePluginId&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Shared dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Gradle is missing proper built-in mechanism to share dependency versions between app library dependency and Gradle plugin dependency eg. &lt;a href=&#34;https://developer.android.com/guide/navigation/navigation-getting-started&#34;&gt;Navigation component&lt;/a&gt; library uses &lt;a href=&#34;https://developer.android.com/guide/navigation/navigation-pass-data#Safe-args&#34;&gt;Safe Args&lt;/a&gt; Gradle plugin with the same version.&lt;/p&gt; &#xA;&lt;p&gt;To enable sharing all versions that are used for both plugins and libraries are defined in &lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/gradle.properties&#34;&gt;gradle.properties&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately this technique cannot be applied to older Gradle plugins (added by &lt;code&gt;classpath&lt;/code&gt;, not by &lt;code&gt;pluginManagement&lt;/code&gt;), so some version in the &lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/gradle.properties&#34;&gt;gradle.properties&lt;/a&gt; are still duplicated.&lt;/p&gt; &#xA;&lt;h2&gt;CI pipeline&lt;/h2&gt; &#xA;&lt;p&gt;CI is utilizing &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;. Complete GitHub Actions config is located in the &lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/.github/workflows&#34;&gt;.github/workflows&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;PR Verification&lt;/h3&gt; &#xA;&lt;p&gt;Series of workflows runs (in parallel) for every opened PR and after merging PR to &lt;code&gt;main&lt;/code&gt; branch:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew lintDebug&lt;/code&gt; - runs Android lint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew detekt&lt;/code&gt; - runs detekt&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew ktlintCheck&lt;/code&gt; - runs ktlint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew testDebugUnitTest&lt;/code&gt; - run unit tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew connectedCheck&lt;/code&gt; - run UI tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew :app:bundleDebug&lt;/code&gt; - create app bundle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependency updates&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/.github/workflows/update-dependencies.yml&#34;&gt;update-dependencies&lt;/a&gt; task run periodically and creates a pull request containing dependency updates (updated gradle .lockfile files used by Gradle’s &lt;a href=&#34;https://docs.gradle.org/current/userguide/dependency_locking.html&#34;&gt;dependency locking&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Design decisions&lt;/h2&gt; &#xA;&lt;p&gt;Read related articles to have a better understanding of underlying design decisions and various trade-offs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://proandroiddev.com/multiple-ways-of-defining-clean-architecture-layers-bbb70afa5d4a&#34;&gt;Multiple ways of defining Clean Architecture layers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;More coming soon&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Gradle update&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;./gradlew wrapper --gradle-version=1.2.3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What this project does not cover?&lt;/h2&gt; &#xA;&lt;p&gt;The interface of the app utilizes some of the modern material design components, however, is deliberately kept simple to focus on application architecture.&lt;/p&gt; &#xA;&lt;h2&gt;Upcoming improvements&lt;/h2&gt; &#xA;&lt;p&gt;Checklist of all upcoming &lt;a href=&#34;https://github.com/igorwojda/android-showcase/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Aenhancement&#34;&gt;enhancements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;There are a few ways to open this project.&lt;/p&gt; &#xA;&lt;h3&gt;Android Studio&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;Android Studio&lt;/code&gt; -&amp;gt; &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;New&lt;/code&gt; -&amp;gt; &lt;code&gt;From Version control&lt;/code&gt; -&amp;gt; &lt;code&gt;Git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;https://github.com/igorwojda/android-showcase.git&lt;/code&gt; into URL field an press &lt;code&gt;Clone&lt;/code&gt; button&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Command-line + Android Studio&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git clone https://github.com/igorwojda/android-showcase.git&lt;/code&gt; command to clone project&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Android Studio&lt;/code&gt; and select &lt;code&gt;File | Open...&lt;/code&gt; from the menu. Select cloned directory and press &lt;code&gt;Open&lt;/code&gt; button&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;This is project is a sample, to inspire you and should handle most of the common cases, but please take a look at additional resources.&lt;/p&gt; &#xA;&lt;h3&gt;Cheat sheet&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/quality&#34;&gt;Core App Quality Checklist&lt;/a&gt; - learn about building the high-quality app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/igorwojda/android-ecosystem-cheat-sheet&#34;&gt;Android Ecosystem Cheat Sheet&lt;/a&gt; - board containing 200+ most important tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LukasLechnerDev/Kotlin-Coroutine-Use-Cases-on-Android&#34;&gt;Kotlin Coroutines - Use Cases on Android&lt;/a&gt; - most popular coroutine usages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android projects&lt;/h3&gt; &#xA;&lt;p&gt;Other high-quality projects will help you to find solutions that work for your project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/iosched&#34;&gt;Iosched&lt;/a&gt; - official Android application from google IO 2019&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture&#34;&gt;Android Architecture Blueprints v2&lt;/a&gt; - a showcase of various Android architecture approaches&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/googlesamples/android-sunflower&#34;&gt;Android sunflower&lt;/a&gt; complete &lt;code&gt;Jetpack&lt;/code&gt; sample covering all libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components&#34;&gt;GithubBrowserSample&lt;/a&gt; - multiple small projects demonstrating usage of Android Architecture Components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/plaid&#34;&gt;Plaid&lt;/a&gt; - a showcase of Android material design&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bufferapp/android-clean-architecture-boilerplate&#34;&gt;Clean Architecture boilerplate&lt;/a&gt; - contains nice diagrams of Clean Architecture layers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android&#34;&gt;Android samples&lt;/a&gt; - official Android samples repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ww-tech/roxie&#34;&gt;Roxie&lt;/a&gt; - solid example of &lt;code&gt;common state&lt;/code&gt; approach together witch very good documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cortinico/kotlin-android-template&#34;&gt;Kotlin Android template&lt;/a&gt; - template that lets you create an Android/Kotlin project and be up and running in a few seconds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gradle 7.1.1 is not compatible with GradleJDK 16 (build is failing, so JDK 15 must be used)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ktlint&lt;/code&gt; &lt;code&gt;import-ordering&lt;/code&gt; rule conflicts with IDE default formatting rule, so it have to be &lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/.editorconfig&#34;&gt;disabled&lt;/a&gt;. This is partially fixed in AS 4.2 (see &lt;a href=&#34;https://github.com/pinterest/ktlint/issues/527&#34;&gt;Issue 527&lt;/a&gt; and &lt;a href=&#34;https://youtrack.jetbrains.com/issue/KT-10974&#34;&gt;Issue KT-10974&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;False positive &#34;Unused symbol&#34; for a custom Android application class referenced in AndroidManifest.xml file (&lt;a href=&#34;https://youtrack.jetbrains.net/issue/KT-27971&#34;&gt;Issue 27971&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;False positive &#34;Function can be private&#34; (&lt;a href=&#34;https://youtrack.jetbrains.com/issue/KT-33610&#34;&gt;Issue KT-33610&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;False positive cannot access class (&lt;a href=&#34;https://youtrack.jetbrains.com/issue/KT-44797&#34;&gt;Issue 16077&lt;/a&gt;). This is fixed in InteliJ IDEA 2021.1 EAP 1 afair.&lt;/li&gt; &#xA; &lt;li&gt;Gradle has no way to share dependency versions between library and Gradle plugin or prod and test version of the library (&lt;a href=&#34;https://github.com/gradle/gradle/issues/16077&#34;&gt;Issue 16077&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android lint complains about exceeding access rights to ArchTaskExecutor &lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/(https://issuetracker.google.com/u/0/issues/79189568)&#34;&gt;Issue 79189568&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JUnit 5 does not support tests with suspended modifier (&lt;a href=&#34;https://github.com/junit-team/junit5/issues/1914&#34;&gt;Issue 1914&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Gradle dependencies can&#39;t be easily shared between app libraries and Gradle plugins &lt;a href=&#34;https://github.com/gradle/gradle/issues/16077&#34;&gt;https://github.com/gradle/gradle/issues/16077&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute? Check our &lt;a href=&#34;https://raw.githubusercontent.com/igorwojda/android-showcase/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; docs.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/igorwojda&#34;&gt;&lt;img src=&#34;https://github.com/igorwojda/android-showcase/raw/main/misc/image/avatar.png&#34; alt=&#34;Follow me&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/igorwojda&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/igorwojda?style=social&#34; alt=&#34;Follow me&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (c) 2019 Igor Wojda&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and&#xA;associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including&#xA;without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to&#xA;the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all copies or substantial&#xA;portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT&#xA;LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN&#xA;NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,&#xA;WHETHER IN AN ACTION OF  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE&#xA;SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Animations License&lt;/h2&gt; &#xA;&lt;p&gt;Flowing animations and are distributed under &lt;code&gt;Creative Commons License 2.0&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lottiefiles.com/8049-error-screen&#34;&gt;Error screen&lt;/a&gt; by Chetan Potnuru&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lottiefiles.com/1271-building-screen&#34;&gt;Building Screen&lt;/a&gt; by Carolina Cajazeira&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>