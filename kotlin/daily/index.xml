<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-19T01:38:12Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dokar3/mini-coroutines</title>
    <updated>2023-11-19T01:38:12Z</updated>
    <id>tag:github.com,2023-11-19:/dokar3/mini-coroutines</id>
    <link href="https://github.com/dokar3/mini-coroutines" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kotlin coroutines runtime in 400 lines&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mini Coroutines&lt;/h1&gt; &#xA;&lt;p&gt;A minimal Kotlin/JVM Coroutines runtime.&lt;/p&gt; &#xA;&lt;h3&gt;How minimal?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;======= .kt Line Counter =======&#xA;          Lines: 475&#xA;Non-empty lines: 392&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What&#39;s present?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;runBlocking {}&lt;/code&gt; Run coroutines in a coroutine scope. It starts an event loop internally&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;launch {}&lt;/code&gt; Launch a new coroutine. It returns a task&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;await()&lt;/code&gt;, &lt;code&gt;cancel()&lt;/code&gt; Control launched coroutine tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;withContext {}&lt;/code&gt; Switch to another coroutine context. It just calls &lt;code&gt;launch&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;s the result&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delay()&lt;/code&gt; Delay the coroutine execution. It reschedules the current task to the event queue&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dispatchers&lt;/code&gt; Decide the thread(pool) to run coroutines (&lt;code&gt;Main&lt;/code&gt; dispatcher is not supported yet)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What&#39;s missing?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flows and channels&lt;/li&gt; &#xA; &lt;li&gt;Exception handler&lt;/li&gt; &#xA; &lt;li&gt;Parent-children job support&lt;/li&gt; &#xA; &lt;li&gt;Concurrency primitives (Mutex, Semaphore, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Start strategies&lt;/li&gt; &#xA; &lt;li&gt;Testing mechanisms&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Can I use it in my project?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NO&lt;/strong&gt;. It&#39;s for learning purposes, it lacks features, can be buggy, has no tests, and isn&#39;t performant. So don&#39;t use it for other purposes.&lt;/p&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Launch 100K Coroutines&#xA;fun main(): Unit = runBlocking {&#xA;    val count = 100_000&#xA;    val done = AtomicInteger(0)&#xA;    val millis = measureTimeMillis {&#xA;        val tasks = List(count) {&#xA;            launch {&#xA;                delay(3000)&#xA;                done.incrementAndGet()&#xA;            }&#xA;        }&#xA;        tasks.forEach { it.await() }&#xA;    }&#xA;    check(done.get() == count)&#xA;    println(&#34;$count coroutines finished in ${millis}ms&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>