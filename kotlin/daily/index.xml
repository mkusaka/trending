<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-06T01:37:59Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Dashlane/android-apps</title>
    <updated>2023-02-06T01:37:59Z</updated>
    <id>tag:github.com,2023-02-06:/Dashlane/android-apps</id>
    <link href="https://github.com/Dashlane/android-apps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ¤– Android applications sources&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Android apps&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the source code for our Android password manager application. It is publicly available for everyone to audit our code and learn more about how our Android applications work.&lt;/p&gt; &#xA;&lt;p&gt;We are working with a modularized app, and we plan to publicly release the source code of more modules.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;The Android project was started back in 2010 and was written in Java with some usage of native libraries (e.g. cryptography was using a C++ library in common with our desktop apps). We are doing continuous refactoring and adopting new tech, as a consequence, we also have legacy code as our migration plans often focus on new features and code that changes frequently. For example, most of our codebase is now in Kotlin, but we still have a few java classes.&lt;/p&gt; &#xA;&lt;h2&gt;High-level architecture&lt;/h2&gt; &#xA;&lt;h3&gt;Codebase organization&lt;/h3&gt; &#xA;&lt;p&gt;The app used to be monolithic in a single repository and was progressively modularized. Some modules are directly put in our repository while others are built separately and published on a private maven repository to be used by our apps. Overall modularization helped us with our build processes, while also allowing us to reuse modules in our more recently released Authenticator app.&lt;/p&gt; &#xA;&lt;h3&gt;UI architecture pattern&lt;/h3&gt; &#xA;&lt;p&gt;Our current standard architecture pattern used for the views is MVVM. It helps us isolate the business logic in clear layers and components. However, we used MVP for years and not everything is migrated yet to MVVM.&lt;/p&gt; &#xA;&lt;h3&gt;Kotlin, coroutines, and flows&lt;/h3&gt; &#xA;&lt;p&gt;We have adopted kotlin and most but not all of the codebase is converted, so we still have some legacy java classes.&lt;/p&gt; &#xA;&lt;p&gt;We are making extensive use of Coroutines and Flows in the app. We used a lot of the experimental coroutine APIs (e.g. actors) and now migrate them to Flows, especially where we already migrated to MVVM.&lt;/p&gt; &#xA;&lt;h3&gt;Dependency injection&lt;/h3&gt; &#xA;&lt;p&gt;After a long time of using Dagger, we moved to use Hilt at the end of 2021 and used this migration as an opportunity to reduce the number of things that we were getting through our SingletonComponent.&lt;/p&gt; &#xA;&lt;h3&gt;Navigation&lt;/h3&gt; &#xA;&lt;p&gt;We have a mix of fragments and activities and navigation is handled through the Jetpack Navigation library. See &lt;code&gt;NavigatorImpl.kt&lt;/code&gt; or &lt;code&gt;drawer_navigation.xml&lt;/code&gt; as a starter to explore it.&lt;/p&gt; &#xA;&lt;h2&gt;Cryptography&lt;/h2&gt; &#xA;&lt;p&gt;Dashlane is heavy using Cryptography to protect the data of the users. We use the &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; library and &lt;a href=&#34;https://github.com/P-H-C/phc-winner-argon2&#34;&gt;Argon2&lt;/a&gt; as cryptography primitive functions to build algorithms for Dashlane. The algorithms serve for Symmetric Cryptography, Asymmetric Cryptography, and Key Derivation.&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn more about cryptography at Dashlane, have a look at our &lt;a href=&#34;https://www.dashlane.com/download/whitepaper-en.pdf&#34;&gt;Security Whitepaper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;h3&gt;Security issue&lt;/h3&gt; &#xA;&lt;p&gt;If you find a vulnerability or a security issue, please report it on our &lt;a href=&#34;https://hackerone.com/dashlane&#34;&gt;Hacker One Bug Bounty program&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Codebase improvement&lt;/h3&gt; &#xA;&lt;p&gt;If there is an improvement for the codebase you would like to share with us, we would be happy to hear your thoughts! Feel free to open an issue on this repository or reach us at &lt;a href=&#34;mailto:dev-relationship@dashlane.com&#34;&gt;dev-relationship@dashlane.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get our apps&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dashlane Apps&lt;/th&gt; &#xA;   &lt;th&gt;Download link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dashlane Password Manager&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dashlane&#34;&gt;&lt;img alt=&#34;Get it on Google Play&#34; src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png&#34; height=&#34;100px&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dashlane Authenticator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dashlane.authenticator&#34;&gt;&lt;img alt=&#34;Get it on Google Play&#34; src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png&#34; height=&#34;100px&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>rafaelvcaetano/melonDS-android</title>
    <updated>2023-02-06T01:37:59Z</updated>
    <id>tag:github.com,2023-02-06:/rafaelvcaetano/melonDS-android</id>
    <link href="https://github.com/rafaelvcaetano/melonDS-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android port of melonDS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;melonDS Android port&lt;/h1&gt; &#xA;&lt;p&gt;This is a WIP Android frontend for the melonDS Android port. For the Android port of the emulator, check out &lt;a href=&#34;https://github.com/rafaelvcaetano/melonDS-android-lib&#34;&gt;https://github.com/rafaelvcaetano/melonDS-android-lib&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=me.magnum.melonds&amp;amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1&#34;&gt;&lt;img src=&#34;https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png&#34; alt=&#34;Get it on Google Play&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Rom List&lt;/th&gt; &#xA;   &lt;th&gt;Dark Theme&lt;/th&gt; &#xA;   &lt;th&gt;Pocket Physics&lt;/th&gt; &#xA;   &lt;th&gt;Layout Editor&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rafaelvcaetano/melonDS-android/master/.github/images/screenshot_mobile0.png&#34; alt=&#34;Screenshot 1&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rafaelvcaetano/melonDS-android/master/.github/images/screenshot_mobile1.png&#34; alt=&#34;Screenshot 2&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rafaelvcaetano/melonDS-android/master/.github/images/screenshot_mobile2.png&#34; alt=&#34;Screenshot 3&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rafaelvcaetano/melonDS-android/master/.github/images/screenshot_mobile3.png&#34; alt=&#34;Screenshot 4&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;What is working&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Device scanning for ROMS&lt;/li&gt; &#xA; &lt;li&gt;Games can boot and run&lt;/li&gt; &#xA; &lt;li&gt;Sound&lt;/li&gt; &#xA; &lt;li&gt;Input&lt;/li&gt; &#xA; &lt;li&gt;Mic input&lt;/li&gt; &#xA; &lt;li&gt;Game saves&lt;/li&gt; &#xA; &lt;li&gt;Save states&lt;/li&gt; &#xA; &lt;li&gt;Rewind&lt;/li&gt; &#xA; &lt;li&gt;AR cheats&lt;/li&gt; &#xA; &lt;li&gt;GBA ROM support&lt;/li&gt; &#xA; &lt;li&gt;DSi support (experimental)&lt;/li&gt; &#xA; &lt;li&gt;Controller support&lt;/li&gt; &#xA; &lt;li&gt;Customizable layouts&lt;/li&gt; &#xA; &lt;li&gt;Settings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What is missing&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wi-Fi&lt;/li&gt; &#xA; &lt;li&gt;OpenGL renderer&lt;/li&gt; &#xA; &lt;li&gt;Customizable button skins&lt;/li&gt; &#xA; &lt;li&gt;More display filters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;Performance is solid on 64 bit devices with thread rendering and JIT enabled, and should run at full speed on flagship devices. Performance on older devices, specially 32 bit devices, is very poor due to the lack of JIT support.&lt;/p&gt; &#xA;&lt;h1&gt;Integration with third party frontends&lt;/h1&gt; &#xA;&lt;p&gt;It&#39;s possible to launch melonDS from third part frontends. For that, you simply need to call the emulation activity with the absolute path to the ROM file. The parameters are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Package name: &lt;code&gt;me.magnum.melonds&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Activity name: &lt;code&gt;me.magnum.melonds.ui.emulator.EmulatorActivity&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;PATH&lt;/code&gt; - a string with the absolute path to the NDS ROM (ZIP files are supported)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;To build the project you will need Android SDK, NDK and CMake.&lt;/p&gt; &#xA;&lt;h2&gt;Build steps:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the project, including submodules with:&lt;/p&gt; &lt;p&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/rafaelvcaetano/melonDS-android.git&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the Android SDK, NDK and CMake&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build with:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Unix: &lt;code&gt;./gradlew :app:assembleGitHubRelease&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;code&gt;gradlew.bat :app:assembleGitHubRelease&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The generated APK can be found at &lt;code&gt;app/gitHub/release&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>