<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-12T01:36:40Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zalando/zally</title>
    <updated>2022-10-12T01:36:40Z</updated>
    <id>tag:github.com,2022-10-12:/zalando/zally</id>
    <link href="https://github.com/zalando/zally" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimalistic, simple-to-use API linter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zally: A minimalistic, simple-to-use OpenAPI 2 and 3 linter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/zalando/zally&#34;&gt;&lt;img src=&#34;https://travis-ci.org/zalando/zally.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/zally/zally?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=zalando/zally&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/05a7515011504c06b1cb35ede27ac7d4&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/zalando/zally?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/zalando/zally.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/zalando/zally&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zalando/zally/main/logo.png&#34; width=&#34;200&#34; height=&#34;200&#34;&gt; &#xA;&lt;p&gt;Zally is a quality assurance tool. It&#39;s a linter for OpenAPI specifications, it performs the following tasks :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increases the quality of APIs&lt;/li&gt; &#xA; &lt;li&gt;Checks compliance&lt;/li&gt; &#xA; &lt;li&gt;Delivers early feedback for API designers&lt;/li&gt; &#xA; &lt;li&gt;Ensures the same look-and-feel of APIs&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://opensource.zalando.com/restful-api-guidelines/#100&#34;&gt;API-First approach&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Provides best practices and advices&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Its standard configuration will check your APIs against the rules defined in &lt;a href=&#34;http://zalando.github.io/restful-api-guidelines/&#34;&gt;Zalando&#39;s RESTful Guidelines&lt;/a&gt;, but anyone can use it &lt;strong&gt;out-of-the-box&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Zally has an easy-to-use &lt;a href=&#34;https://raw.githubusercontent.com/zalando/zally/main/cli/README.md&#34;&gt;CLI&lt;/a&gt; which uses the server in the background so that you can check your API &lt;em&gt;on the spot&lt;/em&gt;. It also features an intuitive &lt;a href=&#34;https://raw.githubusercontent.com/zalando/zally/main/web-ui/README.md&#34;&gt;Web UI&lt;/a&gt; that shows implemented rules and lints external files and (with its online editor) API definitions.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for OpenAPI 3 and (Swagger) OpenAPI 2 specifications&lt;/li&gt; &#xA; &lt;li&gt;RESTful API, CLI and Web interface&lt;/li&gt; &#xA; &lt;li&gt;Rich Check configuration&lt;/li&gt; &#xA; &lt;li&gt;Ignore functionality (&lt;code&gt;x-zally-ignore&lt;/code&gt; extension)&lt;/li&gt; &#xA; &lt;li&gt;Java/Kotlin API for new Checks + helper functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start guide&lt;/h2&gt; &#xA;&lt;p&gt;Trying out Zally is easy. You can build and run the whole Zally stack (web-ui, server and database) by executing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build-and-run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Web UI is accessible on &lt;code&gt;http://localhost:8080&lt;/code&gt;; Zally server on &lt;code&gt;http://localhost:8000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation and Manuals&lt;/h2&gt; &#xA;&lt;p&gt;Please consult the following documents for further information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/zally/main/documentation/concepts.md&#34;&gt;Zally Concepts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/zally/main/documentation/operation.md&#34;&gt;How to operate&lt;/a&gt; Zally tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/zally/main/documentation/usage.md&#34;&gt;How to use Zally&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/zally/main/documentation/rule-development.md&#34;&gt;How to develop new Rules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/zally/main/documentation/build-under-wsl.md&#34;&gt;Building Under Windows Subsystem for Linux&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ethlo/zally-maven-plugin&#34;&gt;Zally Maven Plugin&lt;/a&gt; (unofficial)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Zally&lt;/h2&gt; &#xA;&lt;p&gt;Zally welcomes contributions from the open source community. To get started, take a look at our &lt;a href=&#34;https://raw.githubusercontent.com/zalando/zally/main/CONTRIBUTING&#34;&gt;contributing guidelines&lt;/a&gt;. Then check our &lt;a href=&#34;https://github.com/zalando/zally/projects/1&#34;&gt;Project Board&lt;/a&gt; and &lt;a href=&#34;https://github.com/zalando/zally/issues&#34;&gt;Issues Tracker&lt;/a&gt; for ideas.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to join our &lt;a href=&#34;https://gitter.im/zalando/zally&#34;&gt;Gitter room&lt;/a&gt; or contact one of the &lt;a href=&#34;https://raw.githubusercontent.com/zalando/zally/main/MAINTAINERS&#34;&gt;maintainers&lt;/a&gt; directly.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;Zally is not the only linter for OpenAPI v2 and v3. There is &lt;a href=&#34;https://nordicapis.com/8-openapi-linters/&#34;&gt;an article&lt;/a&gt; comparing different OpenAPI linters.&lt;/p&gt; &#xA;&lt;p&gt;So why should you choose Zally?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It supports &lt;a href=&#34;http://zalando.github.io/restful-api-guidelines/&#34;&gt;Zalando&#39;s RESTful Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;It can be used in multiple ways: RESTful API, CLI and Web interface&lt;/li&gt; &#xA; &lt;li&gt;Highly customizable (with Kotlin)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT license with an exception. See &lt;a href=&#34;https://raw.githubusercontent.com/zalando/zally/main/LICENSE&#34;&gt;license file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Publish&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.gradle.org/current/userguide/signing_plugin.htm&#34;&gt;Signing plugin&lt;/a&gt; configured&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OSSRH_JIRA_USERNAME&lt;/code&gt; and &lt;code&gt;OSSRH_JIRA_PASSWORD&lt;/code&gt; environment variables to access &lt;a href=&#34;https://oss.sonatype.org/&#34;&gt;Maven Central Repo&lt;/a&gt; are configured&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Steps&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a separate branch with a name &lt;code&gt;release-&amp;lt;release-version&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update current version in &lt;code&gt;server/gradle.properties&lt;/code&gt; from &lt;code&gt;-SNAPSHOT&lt;/code&gt; to a final version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update mime types configuration:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   ./gradlew -q generate-media-types-config --info&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Commit the updated file to the repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Release Zally server and API using the command&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd server&#xA;./gradlew clean build publishAllPublicationsToMavenRepository&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Commit &lt;code&gt;server/gradle.properties&lt;/code&gt; with the release version&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a tag&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git tag v&amp;lt;release-version&amp;gt; -m &#34;Version &amp;lt;release-version&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bump version in &lt;code&gt;server/gradle.properties&lt;/code&gt; to the next &lt;code&gt;-SNAPSHOT&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Push &lt;code&gt;release&lt;/code&gt; branch and tag&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; git push origin&#xA; git push origin &amp;lt;tag-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a Pull Request with the version update&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create and publish a release with a new version in GitHub&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>