<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-13T01:32:46Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheChance101/AAY-chart</title>
    <updated>2023-09-13T01:32:46Z</updated>
    <id>tag:github.com,2023-09-13:/TheChance101/AAY-chart</id>
    <link href="https://github.com/TheChance101/AAY-chart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A chart library for Compose Multiplatform&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;AAY-chart&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;left&#34;&gt;&#xA;  The library contains several chart composables for usage in &#xA; &lt;strong&gt;Kotlin Multiplatform&lt;/strong&gt; projects and &#xA; &lt;strong&gt;Android Native&lt;/strong&gt;. Currently supported platforms are &#xA; &lt;strong&gt;Desktop&lt;/strong&gt; &#xA; &lt;strong&gt;Android&lt;/strong&gt; and &#xA; &lt;strong&gt;IOS &lt;/strong&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/API-21%2B-green.svg?style=flat&#34; alt=&#34;API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/thechance101/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/linkedin-blue.svg?style=flat&#34; alt=&#34;linkedin&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/patrykandpatrick/vico/build-debug-apk.yml?branch=master&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/TheChance101/AAY-chart.svg?style=flat&#34; alt=&#34;Release&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TheChance101/AAY-chart/master/assets/allCharts.png&#34; alt=&#34;charts&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use?&lt;/h2&gt; &#xA;&lt;p&gt;Add dependency in your module &lt;code&gt;build.gradle&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;dependencies {&#xA;    implementation(&#34;io.github.thechance101&lt;span&gt;ðŸ’¹&lt;/span&gt;$latest_release&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Show Line Chart in Jetpack Compose:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun LineChartSample() {&#xA;&#xA;    val testLineParameters: List&amp;lt;LineParameters&amp;gt; = listOf(&#xA;        LineParameters(&#xA;            label = &#34;revenue&#34;,&#xA;            data = listOf(70.0, 00.0, 50.33, 40.0, 100.500, 50.0),&#xA;            lineColor = Color.Gray,&#xA;            lineType = LineType.CURVED_LINE,&#xA;            lineShadow = true,&#xA;        ),&#xA;        LineParameters(&#xA;            label = &#34;Earnings&#34;,&#xA;            data = listOf(60.0, 80.6, 40.33, 86.232, 88.0, 90.0),&#xA;            lineColor = Color(0xFFFF7F50),&#xA;            lineType = LineType.DEFAULT_LINE,&#xA;            lineShadow = true&#xA;        ),&#xA;        LineParameters(&#xA;            label = &#34;Earnings&#34;,&#xA;            data = listOf(1.0, 40.0, 11.33, 55.23, 1.0, 100.0),&#xA;            lineColor = Color(0xFF81BE88),&#xA;            lineType = LineType.CURVED_LINE,&#xA;            lineShadow = false,&#xA;        )&#xA;    )&#xA;&#xA;    Box(Modifier) {&#xA;        LineChart(&#xA;            modifier = Modifier.fillMaxSize(),&#xA;            linesParameters = testLineParameters,&#xA;            isGrid = true,&#xA;            gridColor = Color.Blue,&#xA;            xAxisData = listOf(&#34;2015&#34;, &#34;2016&#34;, &#34;2017&#34;, &#34;2018&#34;, &#34;2019&#34;, &#34;2020&#34;),&#xA;            animateChart = true,&#xA;            showGridWithSpacer = true,&#xA;            yAxisStyle = TextStyle(&#xA;                fontSize = 14.sp,&#xA;                color = Color.Gray,&#xA;            ),&#xA;            xAxisStyle = TextStyle(&#xA;                fontSize = 14.sp,&#xA;                color = Color.Gray,&#xA;                fontWeight = FontWeight.W400&#xA;            ),&#xA;            yAxisRange = 14,&#xA;            oneLineChart = false,&#xA;            gridOrientation = GridOrientation.VERTICAL&#xA;        )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TheChance101/AAY-chart/master/assets/line_chart.gif&#34; alt=&#34;charts&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TheChance101/AAY-chart/master/assets/special_line_chart.gif&#34; alt=&#34;charts&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Show Bar Chart in Jetpack Compose:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun BarChartSample() {&#xA;&#xA;    val testBarParameters: List&amp;lt;BarParameters&amp;gt; = listOf(&#xA;        BarParameters(&#xA;            dataName = &#34;Completed&#34;,&#xA;            data = listOf(0.6, 10.6, 80.0, 50.6, 44.0, 100.6, 10.0),&#xA;            barColor = Color(0xFF6C3428)&#xA;        ),&#xA;        BarParameters(&#xA;            dataName = &#34;Completed&#34;,&#xA;            data = listOf(50.0, 30.6, 77.0, 69.6, 50.0, 30.6, 80.0),&#xA;            barColor = Color(0xFFBA704F),&#xA;        ),&#xA;        BarParameters(&#xA;            dataName = &#34;Completed&#34;,&#xA;            data = listOf(100.0, 99.6, 60.0, 80.6, 10.0, 100.6, 55.99),&#xA;            barColor = Color(0xFFDFA878),&#xA;        ),&#xA;    )&#xA;&#xA;    Box(Modifier.fillMaxSize()) {&#xA;        BarChart(&#xA;            chartParameters = testBarParameters,&#xA;            gridColor = Color.DarkGray,&#xA;            xAxisData = listOf(&#34;2016&#34;, &#34;2017&#34;, &#34;2018&#34;, &#34;2019&#34;, &#34;2020&#34;, &#34;2021&#34;, &#34;2022&#34;),&#xA;            isShowGrid = true,&#xA;            animateChart = true,&#xA;            showGridWithSpacer = true,&#xA;            yAxisStyle = TextStyle(&#xA;                fontSize = 14.sp,&#xA;                color = Color.DarkGray,&#xA;            ),&#xA;            xAxisStyle = TextStyle(&#xA;                fontSize = 14.sp,&#xA;                color = Color.DarkGray,&#xA;                fontWeight = FontWeight.W400&#xA;            ),&#xA;            yAxisRange = 15,&#xA;            barWidth = 20.dp&#xA;        )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TheChance101/AAY-chart/master/assets/bar_chart.gif&#34; alt=&#34;charts&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Show Pie Chart in Jetpack Compose:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun PieChartSample() {&#xA;&#xA;    val testPieChartData: List&amp;lt;PieChartData&amp;gt; = listOf(&#xA;        PieChartData(&#xA;            partName = &#34;part A&#34;,&#xA;            data = 500.0,&#xA;            color = Color(0xFF22A699),&#xA;        ),&#xA;        PieChartData(&#xA;            partName = &#34;Part B&#34;,&#xA;            data = 700.0,&#xA;            color = Color(0xFFF2BE22),&#xA;        ),&#xA;        PieChartData(&#xA;            partName = &#34;Part C&#34;,&#xA;            data = 500.0,&#xA;            color = Color(0xFFF29727),&#xA;        ),&#xA;        PieChartData(&#xA;            partName = &#34;Part D&#34;,&#xA;            data = 100.0,&#xA;            color = Color(0xFFF24C3D),&#xA;        ),&#xA;    )&#xA;&#xA;    PieChart(&#xA;        modifier = Modifier.fillMaxSize(),&#xA;        pieChartData = testPieChartData,&#xA;        ratioLineColor = Color.LightGray,&#xA;        textRatioStyle = TextStyle(color = Color.Gray),&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TheChance101/AAY-chart/master/assets/pie_chart.gif&#34; alt=&#34;charts&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Show Donut Chart in Jetpack Compose:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun DonutChartSample() {&#xA;&#xA;    val testPieChartData: List&amp;lt;PieChartData&amp;gt; = listOf(&#xA;        PieChartData(&#xA;            partName = &#34;part A&#34;,&#xA;            data = 500.0,&#xA;            color = Color(0xFF0B666A),&#xA;        ),&#xA;        PieChartData(&#xA;            partName = &#34;Part B&#34;,&#xA;            data = 700.0,&#xA;            color = Color(0xFF35A29F),&#xA;        ),&#xA;        PieChartData(&#xA;            partName = &#34;Part C&#34;,&#xA;            data = 500.0,&#xA;            color = Color(0xFF97FEED),&#xA;        ),&#xA;        PieChartData(&#xA;            partName = &#34;Part D&#34;,&#xA;            data = 100.0,&#xA;            color = Color(0xFF071952),&#xA;        ),&#xA;    )&#xA;&#xA;    DonutChart(&#xA;        modifier = Modifier.fillMaxSize(),&#xA;        pieChartData = testPieChartData,&#xA;        centerTitle = &#34;Orders&#34;,&#xA;        centerTitleStyle = TextStyle(color = Color(0xFF071952)),&#xA;        outerCircularColor = Color.LightGray,&#xA;        innerCircularColor = Color.Gray,&#xA;        ratioLineColor = Color.LightGray,&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TheChance101/AAY-chart/master/assets/donut_chart.gif&#34; alt=&#34;charts&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Show Radar Chart in Jetpack Compose:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun RadarChartSample() {&#xA;    val radarLabels =&#xA;        listOf(&#xA;            &#34;Party A&#34;,&#xA;            &#34;Party A&#34;,&#xA;            &#34;Party A&#34;,&#xA;            &#34;Part A&#34;,&#xA;            &#34;Party A&#34;,&#xA;            &#34;Party A&#34;,&#xA;            &#34;Party A&#34;,&#xA;            &#34;Party A&#34;,&#xA;            &#34;Party A&#34;&#xA;        )&#xA;    val values2 = listOf(120.0, 160.0, 110.0, 112.0, 200.0, 120.0, 145.0, 101.0, 200.0)&#xA;    val values = listOf(180.0, 180.0, 165.0, 135.0, 120.0, 150.0, 140.0, 190.0, 200.0)&#xA;    val labelsStyle = TextStyle(&#xA;        color = Color.Black,&#xA;        fontFamily = FontFamily.Serif,&#xA;        fontWeight = FontWeight.Medium,&#xA;        fontSize = 10.sp&#xA;    )&#xA;&#xA;    val scalarValuesStyle = TextStyle(&#xA;        color = Color.Black,&#xA;        fontFamily = FontFamily.Serif,&#xA;        fontWeight = FontWeight.Medium,&#xA;        fontSize = 10.sp&#xA;    )&#xA;&#xA;    RadarChart(&#xA;        modifier = Modifier.fillMaxSize(),&#xA;        radarLabels = radarLabels,&#xA;        labelsStyle = labelsStyle,&#xA;        netLinesStyle = NetLinesStyle(&#xA;            netLineColor = Color(0x90ffD3CFD3),&#xA;            netLinesStrokeWidth = 2f,&#xA;            netLinesStrokeCap = StrokeCap.Butt&#xA;        ),&#xA;        scalarSteps = 2,&#xA;        scalarValue = 200.0,&#xA;        scalarValuesStyle = scalarValuesStyle,&#xA;        polygons = listOf(&#xA;            Polygon(&#xA;                values = values,&#xA;                unit = &#34;$&#34;,&#xA;                style = PolygonStyle(&#xA;                    fillColor = Color(0xffc2ff86),&#xA;                    fillColorAlpha = 0.5f,&#xA;                    borderColor = Color(0xffe6ffd6),&#xA;                    borderColorAlpha = 0.5f,&#xA;                    borderStrokeWidth = 2f,&#xA;                    borderStrokeCap = StrokeCap.Butt,&#xA;                )&#xA;            ),&#xA;            Polygon(&#xA;                values = values2,&#xA;                unit = &#34;$&#34;,&#xA;                style = PolygonStyle(&#xA;                    fillColor = Color(0xffFFDBDE),&#xA;                    fillColorAlpha = 0.5f,&#xA;                    borderColor = Color(0xffFF8B99),&#xA;                    borderColorAlpha = 0.5f,&#xA;                    borderStrokeWidth = 2f,&#xA;                    borderStrokeCap = StrokeCap.Butt&#xA;                )&#xA;            )&#xA;        )&#xA;    )&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TheChance101/AAY-chart/master/assets/radar_chart.png&#34; alt=&#34;charts&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/TheChance101/AAY-chart/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=TheChance101/AAY-chart&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;MIT License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2023 The Chance&#xA;&#xA;permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>