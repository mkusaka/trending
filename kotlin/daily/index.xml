<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-10T01:34:40Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>numandev1/react-native-compressor</title>
    <updated>2025-04-10T01:34:40Z</updated>
    <id>tag:github.com,2025-04-10:/numandev1/react-native-compressor</id>
    <link href="https://github.com/numandev1/react-native-compressor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üóúÔ∏èCompress Image, Video, and Audio same like Whatsapp üöÄ‚ú®&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://numan.dev/images/child-lives-matter.png&#34;&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img height=&#34;150&#34; src=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/media/logo.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#Installation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/React_Native-20232A?style=for-the-badge&amp;amp;logo=react&amp;amp;logoColor=61DAFB&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#managed-expo&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Expo-1B1F23?style=for-the-badge&amp;amp;logo=expo&amp;amp;logoColor=white&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/6Wx8Em8KAN&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=for-the-badge&amp;amp;message=Discord&amp;amp;color=5865F2&amp;amp;logo=Discord&amp;amp;logoColor=FFFFFF&amp;amp;label=&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/numandev1/react-native-compressor/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/numandev1/react-native-compressor?style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/npm/dt/react-native-compressor?style=for-the-badge&#34; alt=&#34;npm&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;REACT-NATIVE-COMPRESSOR&lt;/strong&gt; is a react-native package, which helps us to Compress &lt;code&gt;Image&lt;/code&gt;, &lt;code&gt;Video&lt;/code&gt;, and &lt;code&gt;Audio&lt;/code&gt; before uploading, same like &lt;strong&gt;Whatsapp&lt;/strong&gt; without knowing the compression &lt;code&gt;algorithm&lt;/code&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h4&gt;Auto/Manual Compression | Background Upload | Download File | Create Video Thumbnail&lt;/h4&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;pre&gt;&#xA;&lt;img height=&#34;90&#34; src=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/media/whatsapp_logo.png&#34;&gt;               &lt;img height=&#34;90&#34; src=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/media/compress_media.png&#34;&gt;&#xA;&lt;/pre&gt; &#xA; &lt;h2 align=&#34;center&#34;&gt;üóúÔ∏èCompress Image, Video, and Audio same like Whatsapp&lt;/h2&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Why should we use react-native-compress over &lt;a href=&#34;https://www.ffmpeg.org/&#34;&gt;FFmpeg&lt;/a&gt;?&lt;/h4&gt; &#xA;&lt;p&gt;We should use &lt;strong&gt;react-native-compressor&lt;/strong&gt; instead of &lt;strong&gt;FFmpeg&lt;/strong&gt; because &lt;strong&gt;react-native-compressor&lt;/strong&gt; gives you same compression of &lt;strong&gt;Whatsapp&lt;/strong&gt; (&lt;code&gt;Image, Video, and Audio&lt;/code&gt;) without knowing the algorithm of compression + it is lightweight only increase &lt;strong&gt;50 KB Size&lt;/strong&gt; Size in APK while &lt;strong&gt;FFmpeg&lt;/strong&gt; increase ~&amp;gt; &lt;strong&gt;9 MB Size&lt;/strong&gt; in &lt;strong&gt;APK&lt;/strong&gt;, and we have to give manual image/video/Audo size and quality as well as&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you find this package useful hit the star&lt;/strong&gt; üåü&lt;/p&gt; &#xA;&lt;h3&gt;Would you like to support me?&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/numandev1?tab=followers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/followers/numandev1?label=Follow%20%40numandev1&amp;amp;style=social&#34; height=&#34;36&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://twitter.com/numandev1/&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/numandev1?label=Follow%20%40numandev1&amp;amp;style=social&#34; height=&#34;36&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://www.youtube.com/channel/UCYCUspfN7ZevgCj3W5GlFAw&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UCYCUspfN7ZevgCj3W5GlFAw?style=social&#34; height=&#34;36&#34;&gt;&lt;/a&gt;&#xA; &lt;a&gt;&lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://www.buymeacoffee.com/numan.dev&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: auto !important;width: auto !important;&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#benchmark&#34;&gt;Benchmarks&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Open Table of Contents&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#Installation&#34;&gt;For React Native&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#managed-expo&#34;&gt;Managed Expo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#image&#34;&gt;Image&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#automatic-image-compression-like-whatsapp&#34;&gt;Automatic Image Compression Like Whatsapp&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#manual-image-compression&#34;&gt;Manual Image Compression&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#imagecompressor&#34;&gt;ImageCompressor API Docs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#video&#34;&gt;Video&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#automatic-video-compression-like-whatsapp&#34;&gt;Automatic Video Compression Like Whatsapp&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#manual-video-compression&#34;&gt;Manual Video Compression&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#cancel-video-compression&#34;&gt;Cancel Video Compression&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#video-1&#34;&gt;Video Api Docs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#audio&#34;&gt;Audio&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#background-upload&#34;&gt;Background Upload&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#cancel-background-upload&#34;&gt;Cancel Background Upload&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#download&#34;&gt;Download File&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#create-video-thumbnail-and-clear-cache&#34;&gt;Create Video Thumbnail and Clear Cache&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#api&#34;&gt;Other Utilities&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#background-upload-1&#34;&gt;Background Upload&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#cancel-background-upload-1&#34;&gt;Cancel Background Upload&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#get-metadata-of-image&#34;&gt;Get Metadata Of Image&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#get-metadata-of-video&#34;&gt;Get Metadata Of Video&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#get-real-path&#34;&gt;Get Real Path&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#get-temp-file-path&#34;&gt;Get Temp file Path&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt;&#xA; &lt;/ul&gt;&#xA;&lt;/details&gt;   &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn add react-native-compressor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://reactnative.dev/docs/new-architecture-intro&#34;&gt;New Architecture (Turbo Module)&lt;/a&gt; Supported&lt;/h3&gt; &#xA;&lt;p&gt;you can give feedback on &lt;a href=&#34;https://discord.gg/6Wx8Em8KAN&#34;&gt;Discord channel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Managed Expo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;expo install react-native-compressor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the Compressor plugin to your Expo config (&lt;code&gt;app.json&lt;/code&gt;, &lt;code&gt;app.config.json&lt;/code&gt; or &lt;code&gt;app.config.js&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;name&#34;: &#34;my app&#34;,&#xA;  &#34;plugins&#34;: [&#34;react-native-compressor&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, compile the mods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;expo prebuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To apply the changes, build a new binary with EAS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eas build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatic linking (for React Native &amp;gt;= 0.60 only)&lt;/h3&gt; &#xA;&lt;p&gt;Automatic linking is supported for both &lt;code&gt;Android&lt;/code&gt; and &lt;code&gt;IOS&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Linking (for React Native &amp;lt;= 0.59 only)&lt;/h3&gt; &#xA;&lt;p&gt;Note: If you are using react-native version 0.60 or higher you don&#39;t need to link this package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;react-native link react-native-compressor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In XCode, open Podfile&lt;/li&gt; &#xA; &lt;li&gt;paste this line &lt;code&gt;pod &#39;react-native-compressor&#39;, :path =&amp;gt; &#39;../node_modules/react-native-compressor&#39;&lt;/code&gt; into &lt;code&gt;Podfile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run this command inside ios folder &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run your project (&lt;code&gt;Cmd+R&lt;/code&gt;)&amp;lt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open up &lt;code&gt;android/app/src/main/java/[...]/MainActivity.java&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;import com.reactnativecompressor.CompressorPackage;&lt;/code&gt; to the imports at the top of the file&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;new CompressorPackage()&lt;/code&gt; to the list returned by the &lt;code&gt;getPackages()&lt;/code&gt; method&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Append the following lines to &lt;code&gt;android/settings.gradle&lt;/code&gt;: &lt;pre&gt;&lt;code&gt;include &#39;:react-native-compressor&#39;&#xA;project(&#39;:react-native-compressor&#39;).projectDir = new File(rootProject.projectDir,&#39;../node_modules/react-native-compressor/android&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Insert the following lines inside the dependencies block in &lt;code&gt;android/app/build.gradle&lt;/code&gt;: &lt;pre&gt;&lt;code&gt;  compile project(&#39;:react-native-compressor&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Image&lt;/h3&gt; &#xA;&lt;h5&gt;Automatic Image Compression Like Whatsapp&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Image } from &#39;react-native-compressor&#39;;&#xA;&#xA;const result = await Image.compress(&#39;file://path_of_file/image.jpg&#39;);&#xA;// OR&#xA;const result = await Image.compress(&#39;https://path_of_file/image.jpg&#39;, {&#xA;  progressDivider: 10,&#xA;  downloadProgress: (progress) =&amp;gt; {&#xA;    console.log(&#39;downloadProgress: &#39;, progress);&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/13TsnC1c7NOC9aCjzN6wkKurJQPeGRNwDhWsQOkXQskU/edit?usp=sharing&#34;&gt;Here is this package comparison of images compression with WhatsApp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Manual Image Compression&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Image } from &#39;react-native-compressor&#39;;&#xA;&#xA;const result = await Image.compress(&#39;file://path_of_file/image.jpg&#39;, {&#xA;  compressionMethod: &#39;manual&#39;,&#xA;  maxWidth: 1000,&#xA;  quality: 0.8,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Video&lt;/h3&gt; &#xA;&lt;h5&gt;Automatic Video Compression Like Whatsapp&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Video } from &#39;react-native-compressor&#39;;&#xA;&#xA;const result = await Video.compress(&#xA;  &#39;file://path_of_file/BigBuckBunny.mp4&#39;,&#xA;  {},&#xA;  (progress) =&amp;gt; {&#xA;    console.log(&#39;Compression Progress: &#39;, progress);&#xA;  }&#xA;);&#xA;&#xA;//OR&#xA;&#xA;const result = await Video.compress(&#xA;  &#39;https://example.com/video.mp4&#39;,&#xA;  {&#xA;    progressDivider: 10,&#xA;    downloadProgress: (progress) =&amp;gt; {&#xA;      console.log(&#39;downloadProgress: &#39;, progress);&#xA;    },&#xA;  },&#xA;  (progress) =&amp;gt; {&#xA;    console.log(&#39;Compression Progress: &#39;, progress);&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/13TsnC1c7NOC9aCjzN6wkKurJQPeGRNwDhWsQOkXQskU/edit#gid=1055406534&#34;&gt;Here is this package comparison of video compression with WhatsApp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Manual Video Compression&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Video } from &#39;react-native-compressor&#39;;&#xA;&#xA;const result = await Video.compress(&#xA;  &#39;file://path_of_file/BigBuckBunny.mp4&#39;,&#xA;  {&#xA;    compressionMethod: &#39;manual&#39;,&#xA;  },&#xA;  (progress) =&amp;gt; {&#xA;    console.log(&#39;Compression Progress: &#39;, progress);&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Cancel Video Compression&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Video } from &#39;react-native-compressor&#39;;&#xA;&#xA;let cancellationVideoId = &#39;&#39;;&#xA;&#xA;const result = await Video.compress(&#xA;  &#39;file://path_of_file/BigBuckBunny.mp4&#39;,&#xA;  {&#xA;    compressionMethod: &#39;auto&#39;,&#xA;    // getCancellationId for get video id which we can use for cancel compression&#xA;    getCancellationId: (cancellationId) =&amp;gt;&#xA;      (cancellationVideoId = cancellationId),&#xA;  },&#xA;  (progress) =&amp;gt; {&#xA;    if (backgroundMode) {&#xA;      console.log(&#39;Compression Progress: &#39;, progress);&#xA;    } else {&#xA;      setCompressingProgress(progress);&#xA;    }&#xA;  }&#xA;);&#xA;&#xA;// we can cancel video compression by calling cancelCompression with cancel video id which we can get from getCancellationId function while compression&#xA;Video.cancelCompression(cancellationVideoId);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Audio&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Audio } from &#39;react-native-compressor&#39;;&#xA;&#xA;const result = await Audio.compress(&#xA;  &#39;file://path_of_file/file_example_MP3_2MG.wav&#39;, // recommended wav file but can be use mp3 file&#xA;  { quality: &#39;medium&#39; }&#xA;);&#xA;&#xA;// OR&#xA;&#xA;const result = await Audio.compress(&#xA;  &#39;file://path_of_file/file_example_MP3_2MG.wav&#39;, // recommended wav file but can be use mp3 file&#xA;  {&#xA;    bitrate: 64000,&#xA;    samplerate: 44100,&#xA;    channels: 1,&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Background Upload&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { backgroundUpload } from &#39;react-native-compressor&#39;;&#xA;&#xA;const headers = {};&#xA;&#xA;const uploadResult = await backgroundUpload(&#xA;  url,&#xA;  fileUrl,&#xA;  { httpMethod: &#39;PUT&#39;, headers },&#xA;  (written, total) =&amp;gt; {&#xA;    console.log(written, total);&#xA;  }&#xA;);&#xA;&#xA;//OR&#xA;&#xA;const uploadResult = await backgroundUpload(&#xA;  url,&#xA;  fileUrl,&#xA;  { uploadType: UploadType.MULTIPART, httpMethod: &#39;POST&#39;, headers },&#xA;  (written, total) =&amp;gt; {&#xA;    console.log(written, total);&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cancel Background Upload&lt;/h3&gt; &#xA;&lt;p&gt;for cancellation Upload, there is two ways&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;by calling, cancelUpload function&lt;/li&gt; &#xA; &lt;li&gt;by calling abort function&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;cancelUpload (support single and all)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { cancelUpload, backgroundUpload } from &#39;react-native-compressor&#39;;&#xA;&#xA;// if we will call without passing any param then it will remove last pushed uploading&#xA;cancelUpload()&#xA;&#xA;// if you pass true as second param then it will cancel all the uploading&#xA;cancelUpload(&#34;&#34;,true)&#xA;&#xA;// if there is multiple files are uploading, and you wanna cancel specific uploading then you pass specific video id like this&#xA;let videoId=&#39;&#39;&#xA;const uploadResult = await backgroundUpload(&#xA;  url,&#xA;  fileUrl,&#xA;  { httpMethod: &#39;PUT&#39;,  getCancellationId: (cancellationId) =&amp;gt;(videoId = cancellationId), },&#xA;  (written, total) =&amp;gt; {&#xA;    console.log(written, total);&#xA;  }&#xA;);&#xA;cancelUpload(videoId)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;cancel by calling abort&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { backgroundUpload } from &#39;react-native-compressor&#39;;&#xA;&#xA;const abortSignalRef = useRef(new AbortController());&#xA;&#xA;const uploadResult = await backgroundUpload(&#xA;  url,&#xA;  fileUrl,&#xA;  { httpMethod: &#39;PUT&#39; },&#xA;  (written, total) =&amp;gt; {&#xA;    console.log(written, total);&#xA;  },&#xA;  abortSignalRef.current.signal&#xA;);&#xA;&#xA;abortSignalRef.current?.abort(); // this will cancel uploading&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { download } from &#39;react-native-compressor&#39;;&#xA;&#xA;const downloadFileUrl = await download(url, (progress) =&amp;gt; {&#xA;  console.log(&#39;downloadProgress: &#39;, progress);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Video Thumbnail&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { createVideoThumbnail, clearCache } from &#39;react-native-compressor&#39;;&#xA;&#xA;const thumbnail = await createVideoThumbnail(videoUri);&#xA;&#xA;await clearCache(); // this will clear cache of thumbnails cache directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;API&lt;/h1&gt; &#xA;&lt;h2&gt;Image&lt;/h2&gt; &#xA;&lt;h3&gt;ImageCompressor&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;compress(value: string, options?: CompressorOptions): Promise&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/h6&gt; &lt;p&gt;Compresses the input file URI or base-64 string with the specified options. Promise returns a string after compression has completed. Resizing will always keep the original aspect ratio of the image, the &lt;code&gt;maxWidth&lt;/code&gt; and &lt;code&gt;maxHeight&lt;/code&gt; are used as a boundary.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CompressorOptions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;compressionMethod: compressionMethod&lt;/code&gt; (default: &#34;auto&#34;)&lt;/h6&gt; &lt;p&gt;if you want to compress images like &lt;strong&gt;whatsapp&lt;/strong&gt; then make this prop &lt;code&gt;auto&lt;/code&gt;. Can be either &lt;code&gt;manual&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;, defines the Compression Method.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h5&gt;&lt;code&gt;downloadProgress?: (progress: number) =&amp;gt; void;&lt;/code&gt;&lt;/h5&gt; &lt;p&gt;it is callback, only trigger when we pass image url from server&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h5&gt;&lt;code&gt;progressDivider?: number&lt;/code&gt; (default: 0)&lt;/h5&gt; &lt;p&gt;we uses it when we use downloadProgress&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;maxWidth: number&lt;/code&gt; (default: 1280)&lt;/h6&gt; &lt;p&gt;The maximum width boundary used as the main boundary in resizing a landscape image.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;maxHeight: number&lt;/code&gt; (default: 1280)&lt;/h6&gt; &lt;p&gt;The maximum height boundary used as the main boundary in resizing a portrait image.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;quality: number&lt;/code&gt; (default: 0.8)&lt;/h6&gt; &lt;p&gt;The quality modifier for the &lt;code&gt;JPEG&lt;/code&gt; and &lt;code&gt;PNG&lt;/code&gt; file format, if your input file is &lt;code&gt;JPEG&lt;/code&gt; and output file is &lt;code&gt;PNG&lt;/code&gt; then compressed size can be increase&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;input: InputType&lt;/code&gt; (default: uri)&lt;/h6&gt; &lt;p&gt;Can be either &lt;code&gt;uri&lt;/code&gt; or &lt;code&gt;base64&lt;/code&gt;, defines the contentents of the &lt;code&gt;value&lt;/code&gt; parameter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;output: OutputType&lt;/code&gt; (default: jpg)&lt;/h6&gt; &lt;p&gt;The quality modifier for the &lt;code&gt;JPEG&lt;/code&gt; file format, can be specified when output is &lt;code&gt;PNG&lt;/code&gt; but will be ignored. if you wanna apply quality modifier then you can enable &lt;code&gt;disablePngTransparency:true&lt;/code&gt;, &lt;strong&gt;Note:&lt;/strong&gt; if you png image have no transparent background then enable &lt;code&gt;disablePngTransparency:true&lt;/code&gt; modifier is recommended&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;disablePngTransparency: boolean&lt;/code&gt; (default: false)&lt;/h6&gt; &lt;p&gt;when user add &lt;code&gt;output:&#39;png&#39;&lt;/code&gt; then by default compressed image will have transparent background, and quality will be ignored, if you wanna apply quality then you have to disablePngTransparency like &lt;code&gt;disablePngTransparency:true&lt;/code&gt;, it will convert transparent background to white&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;returnableOutputType: ReturnableOutputType&lt;/code&gt; (default: uri)&lt;/h6&gt; &lt;p&gt;Can be either &lt;code&gt;uri&lt;/code&gt; or &lt;code&gt;base64&lt;/code&gt;, defines the Returnable output image format.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;if you wanna get image metadata (exif) then &lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#get-metadata-of-image&#34;&gt;read this&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;compress(url: string, options?: videoCompresssionType , onProgress?: (progress: number)): Promise&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/h6&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;cancelCompression(cancellationId: string): void&lt;/code&gt;&lt;/h6&gt; &lt;p&gt;we can get cancellationId from &lt;code&gt;getCancellationId&lt;/code&gt; which is the callback method of compress method options&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;activateBackgroundTask(onExpired?: (data: any) =&amp;gt; void): Promise&amp;lt;any&amp;gt;&lt;/code&gt;&lt;/h6&gt; &lt;p&gt;if you wanna compress video while app is in backgroup then you should call this method before compression&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;deactivateBackgroundTask(): Promise&amp;lt;any&amp;gt;&lt;/code&gt;&lt;/h6&gt; &lt;p&gt;if you call &lt;code&gt;activateBackgroundTask&lt;/code&gt; method, then after video compression, you should call &lt;code&gt;deactivateBackgroundTask&lt;/code&gt; for disable background task mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;getCancellationId: function&lt;/code&gt;&lt;/h6&gt; &lt;p&gt;&lt;code&gt;getCancellationId&lt;/code&gt; is a callback function that gives us compress video id, which can be used in &lt;code&gt;Video.cancelCompression&lt;/code&gt; method to cancel the compression&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;videoCompresssionType&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;compressionMethod: compressionMethod&lt;/code&gt; (default: &#34;manual&#34;)&lt;/h6&gt; &lt;p&gt;if you want to compress videos like &lt;strong&gt;whatsapp&lt;/strong&gt; then make this prop &lt;code&gt;auto&lt;/code&gt;. Can be either &lt;code&gt;manual&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;, defines the Compression Method.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h5&gt;&lt;code&gt;downloadProgress?: (progress: number) =&amp;gt; void;&lt;/code&gt;&lt;/h5&gt; &lt;p&gt;it is callback, only trigger when we pass image url from server&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h5&gt;&lt;code&gt;progressDivider?: number&lt;/code&gt; (default: 0)&lt;/h5&gt; &lt;p&gt;we uses it when we use downloadProgress/onProgress&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;maxSize: number&lt;/code&gt; (default: 640)&lt;/h6&gt; &lt;p&gt;The maximum size can be height in case of portrait video or can be width in case of landscape video.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;bitrate: number&lt;/code&gt;&lt;/h6&gt; &lt;p&gt;bitrate of video which reduce or increase video size. if compressionMethod will auto then this prop will not work&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;minimumFileSizeForCompress: number&lt;/code&gt; (default: 0)&lt;/h6&gt; &lt;p&gt;previously default was 16 but now it is 0 by default. 0 mean 0mb. This is an offset, which you can set for minimumFileSizeForCompress will allow this package to dont compress less than or equal to &lt;code&gt;minimumFileSizeForCompress&lt;/code&gt; ref &lt;a href=&#34;https://github.com/numandev1/react-native-compressor/issues/26&#34;&gt;#26&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;if you wanna get video metadata then &lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#get-metadata-of-video&#34;&gt;read this&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Audio&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;compress(url: string, options?: audioCompresssionType): Promise&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/h6&gt; Android: recommended to use &lt;code&gt;wav&lt;/code&gt; file as we convert mp3 to wav then apply bitrate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;audioCompresssionType&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;quality?: qualityType&lt;/code&gt; (default: medium)&lt;/h6&gt; &lt;p&gt;we can also control bitrate through quality. qualityType can be &lt;code&gt;low&lt;/code&gt; | &lt;code&gt;medium&lt;/code&gt; | &lt;code&gt;high&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;bitrate?: number&lt;/code&gt; Range [64000-320000]&lt;/h6&gt; &lt;p&gt;we can control bitrate of audio through bitrate, it should be in the range of &lt;code&gt;64000-320000&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;samplerate?: number&lt;/code&gt; Range [44100 - 192000]&lt;/h6&gt; &lt;p&gt;we can control samplerate of audio through samplerate, it should be in the range of &lt;code&gt;44100 - 192000&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;channels?: number&lt;/code&gt; Typically 1 or 2&lt;/h6&gt; &lt;p&gt;we can control channels of audio through channels, Typically 1 or 2&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Background Upload&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h6&gt;backgroundUpload: (url: string, fileUrl: string, options: UploaderOptions, onProgress?: ((writtem: number, total: number) =&amp;gt; void) | undefined) =&amp;gt; Promise&amp;lt; any &amp;gt;&lt;/h6&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt; UploaderOptions&lt;/code&gt;&lt;/h6&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export enum UploadType {&#xA;  BINARY_CONTENT = 0,&#xA;  MULTIPART = 1,&#xA;}&#xA;&#xA;export enum UploaderHttpMethod {&#xA;  POST = &#39;POST&#39;,&#xA;  PUT = &#39;PUT&#39;,&#xA;  PATCH = &#39;PATCH&#39;,&#xA;}&#xA;&#xA;export declare type HTTPResponse = {&#xA;  status: number;&#xA;  headers: Record&amp;lt;string, string&amp;gt;;&#xA;  body: string;&#xA;};&#xA;&#xA;export declare type HttpMethod = &#39;POST&#39; | &#39;PUT&#39; | &#39;PATCH&#39;;&#xA;&#xA;export declare type UploaderOptions = (&#xA;  | {&#xA;      uploadType?: UploadType.BINARY_CONTENT;&#xA;      mimeType?: string;&#xA;    }&#xA;  | {&#xA;      uploadType: UploadType.MULTIPART;&#xA;      fieldName?: string;&#xA;      mimeType?: string;&#xA;      parameters?: Record&amp;lt;string, string&amp;gt;;&#xA;    }&#xA;) &amp;amp; {&#xA;  headers?: Record&amp;lt;string, string&amp;gt;;&#xA;  httpMethod?: UploaderHttpMethod;&#xA;  getCancellationId?: (cancellationId: string) =&amp;gt; void;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; some of the uploader code is borrowed from &lt;a href=&#34;https://github.com/expo/expo&#34;&gt;Expo&lt;/a&gt; I tested file uploader on this backend &lt;a href=&#34;https://github.com/numandev1/nodejs-file-uploader&#34;&gt;Nodejs-File-Uploader&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cancel Background Upload&lt;/h3&gt; &#xA;&lt;p&gt;for cancellation Upload, there is two ways, you can use one of it&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h5&gt;cancelUpload: ( uuid?: string, shouldCancelAll?: boolean) =&amp;gt; void&lt;/h5&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;If we call without passing any param then it will remove the last pushed uploading&lt;/li&gt; &#xA;   &lt;li&gt;If you pass true as the second param then it will cancel all the uploading&lt;/li&gt; &#xA;   &lt;li&gt;if there is multiple files are uploading, and you wanna cancel specific uploading then you pass a specific video ID like this&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h5&gt;we can use &lt;a href=&#34;https://github.com/facebook/react-native/raw/255fef5263afdf9933ba2f8a3dbcbca39ea9928a/packages/react-native/types/modules/globals.d.ts#L531&#34;&gt;AbortController&lt;/a&gt; in backgroundUpload &lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/#cancel-background-upload&#34;&gt;Usage&lt;/a&gt;&lt;/h5&gt; &lt;p&gt;&lt;code&gt;const abortSignalRef = useRef(new AbortController());&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;abortSignalRef.current?.abort();&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Download&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h5&gt;download: ( fileUrl: string, downloadProgress?: (progress: number) =&amp;gt; void, progressDivider?: number ) =&amp;gt; Promise&amp;lt; string &amp;gt;&lt;/h5&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Create Video Thumbnail and Clear Cache&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;createVideoThumbnail( fileUrl: string, options: {header:Object} ): Promise&amp;lt;{ path: string;size: number; mime: string; width: number; height: number; }&amp;gt;&lt;/h4&gt; &lt;p&gt;it will save the thumbnail of the video into the cache directory and return the thumbnail URI which you can display&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;clearCache(cacheDir?: string): Promise&amp;lt; string &amp;gt;&lt;/h4&gt; &lt;p&gt;it will clear the cache that was created from createVideoThumbnail, in future this clear cache will be totally customized&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get Metadata Of Video&lt;/h3&gt; &#xA;&lt;p&gt;if you want to get metadata of video than you can use this function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { getVideoMetaData } from &#39;react-native-compressor&#39;;&#xA;&#xA;const metaData = await getVideoMetaData(filePath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;&#x9;&#34;duration&#34;: 20.11,&#xA;&#x9;&#34;extension&#34;: &#34;mp4&#34;,&#xA;&#x9;&#34;height&#34;: 1080,&#xA;&#x9;&#34;size&#34;: 16940.0,&#xA;&#x9;&#34;width&#34;: 1920&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;getVideoMetaData(path: string)&lt;/code&gt;&lt;/h6&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get Metadata Of Image&lt;/h3&gt; &#xA;&lt;p&gt;if you want to get metadata of video than you can use this function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { getImageMetaData } from &#39;react-native-compressor&#39;;&#xA;&#xA;const metaData = await getImageMetaData(filePath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;ImageWidth&#34;: 4032,&#xA;  &#34;ImageHeight&#34;: 3024,&#xA;  &#34;Orientation&#34;: 3,&#xA;  &#34;size&#34;: 4127057,&#xA;  &#34;extension&#34;: &#34;jpg&#34;,&#xA;  &#34;exif&#34;:{...}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;getImageMetaData(path: string)&lt;/code&gt;&lt;/h6&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get Real Path&lt;/h3&gt; &#xA;&lt;p&gt;if you want to convert&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;content://&lt;/code&gt; to &lt;code&gt;file:///&lt;/code&gt; for android&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ph://&lt;/code&gt; to &lt;code&gt;file:///&lt;/code&gt; for IOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;then you can call &lt;code&gt;getRealPath&lt;/code&gt; function like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { getRealPath } from &#39;react-native-compressor&#39;;&#xA;&#xA;const realPath = await getRealPath(fileUri, &#39;video&#39;); //   file://file_path.extension&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h6&gt;&lt;code&gt;getRealPath(path: string, type: string = &#39;video&#39;|&#39;image&#39;)&lt;/code&gt;&lt;/h6&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get Temp file Path&lt;/h3&gt; &#xA;&lt;p&gt;if you wanna make random file path in cache folder then you can use this method like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { generateFilePath } from &#39;react-native-compressor&#39;;&#xA;&#xA;const randomFilePathForSaveFile = await generateFilePath(&#39;mp4&#39;); //   file://file_path.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h5&gt;&lt;code&gt;generateFilePath(fileextension: string)&lt;/code&gt;&lt;/h5&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apps.apple.com/us/app/whatsapp-messenger/id310633997&#34;&gt;&lt;img height=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/media/whatsapp_logo.png&#34;&gt; Whatsapp:&lt;/a&gt; compresses Images,Videos and Audios in every effect way&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;450&#34; src=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/media/branchmark_for_images.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;img height=&#34;450&#34; src=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/media/benchmark_for_videos.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/numandev1/react-native-compressor/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to learn how to contribute to the repository and the development workflow.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MateriiApps/Gloom</title>
    <updated>2025-04-10T01:34:40Z</updated>
    <id>tag:github.com,2025-04-10:/MateriiApps/Gloom</id>
    <link href="https://github.com/MateriiApps/Gloom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GitHub reimagined with Material You&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/MateriiApps/Gloom/main/.github/images/logo.png&#34; alt=&#34;Gloom logo&#34; width=&#34;200px&#34;&gt; &#xA; &lt;h1&gt;Gloom&lt;/h1&gt; &#xA; &lt;p&gt;Material You Github client&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://nightly.link/MateriiApps/Gloom/workflows/android/main/gloom-debug.zip&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/MateriiApps/Gloom/android.yml?label=Debug%20Build&amp;amp;logo=github&amp;amp;style=for-the-badge&amp;amp;branch=main&#34; alt=&#34;Debug build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MateriiApps/Gloom/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/MateriiApps/Gloom?logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/3y6vbneMsW&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/885879572447522817?logo=discord&amp;amp;logoColor=white&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/MateriiApps/Gloom?logo=github&amp;amp;logoColor=%23fff&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub code size in bytes&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/MateriiApps/Gloom?style=for-the-badge&#34; alt=&#34;GitHub top language&#34;&gt;&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;&lt;/th&gt; &#xA;    &lt;th&gt;&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&#xA;     &lt;picture&gt;&#xA;      &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;.github/images/Home.png&#34;&gt;&#xA;      &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;.github/images/Home-Light.png&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/MateriiApps/Gloom/main/.github/images/Home.png&#34; width=&#34;200px&#34;&gt;&#xA;     &lt;/picture&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&#xA;     &lt;picture&gt;&#xA;      &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;.github/images/Explore.png&#34;&gt;&#xA;      &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;.github/images/Explore-Light.png&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/MateriiApps/Gloom/main/.github/images/Explore.png&#34; width=&#34;200px&#34;&gt;&#xA;     &lt;/picture&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&#xA;     &lt;picture&gt;&#xA;      &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;.github/images/Profile.png&#34;&gt;&#xA;      &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;.github/images/Profile-Light.png&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/MateriiApps/Gloom/main/.github/images/Profile.png&#34; width=&#34;200px&#34;&gt;&#xA;     &lt;/picture&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&#xA;     &lt;picture&gt;&#xA;      &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;.github/images/Repo.png&#34;&gt;&#xA;      &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;.github/images/Repo-Light.png&#34;&gt;&#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/MateriiApps/Gloom/main/.github/images/Repo.png&#34; width=&#34;200px&#34;&gt;&#xA;     &lt;/picture&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;You can view the project roadmap &lt;a href=&#34;https://github.com/orgs/MateriiApps/projects/2&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://nightly.link/MateriiApps/Gloom/workflows/android/main/artifact.zip&#34;&gt;latest actions build&lt;/a&gt;, if on PC then transfer the file over to your phone&lt;/li&gt; &#xA; &lt;li&gt;Unzip &lt;code&gt;artifact.zip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure to allow install unknown apps&lt;/li&gt; &#xA; &lt;li&gt;Install the apk&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html&#34;&gt;JDK 11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Instructions&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone https://github.com/MateriiApps/Gloom.git &amp;amp;&amp;amp; cd Gloom&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build the project &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux: &lt;code&gt;chmod +x gradlew &amp;amp;&amp;amp; ./gradlew assembleDebug&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;code&gt;./gradlew assembleDebug&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install on device &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio/debug/dev-options&#34;&gt;Enable usb debugging&lt;/a&gt; and plug in your phone&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;adb install app/build/outputs/apk/debug/app-debug.apk&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This is an open-source project, you can do so without any programming.&lt;/p&gt; &#xA;&lt;p&gt;Here are a few things you can do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MateriiApps/Gloom/issues/new/choose&#34;&gt;Test and report issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crowdin.com/project/gloom&#34;&gt;Translate the app into your language&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Gloom is licensed under the GNU General Public License v3.0&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MateriiApps/Gloom/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?style=for-the-badge&#34; alt=&#34;License: GPLv2&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>