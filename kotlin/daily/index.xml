<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-19T01:49:01Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>googlemaps/android-maps-compose</title>
    <updated>2023-07-19T01:49:01Z</updated>
    <id>tag:github.com,2023-07-19:/googlemaps/android-maps-compose</id>
    <link href="https://github.com/googlemaps/android-maps-compose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jetpack Compose composables for the Maps SDK for Android&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/googlemaps/android-maps-compose/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/stability-stable-green&#34; alt=&#34;Stable&#34;&gt; &lt;a href=&#34;https://discord.gg/hYsWbmk&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/676948200904589322&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/license-Apache-blue&#34; alt=&#34;Apache-2.0&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Maps Compose ðŸ—º&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt; components for the &lt;a href=&#34;https://developers.google.com/maps/documentation/android-sdk&#34;&gt;Maps SDK for Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kotlin-enabled project&lt;/li&gt; &#xA; &lt;li&gt;Jetpack Compose-enabled project (see &lt;a href=&#34;https://github.com/googlemaps/android-maps-compose/releases&#34;&gt;releases&lt;/a&gt; for the required version of Jetpack Compose)&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://developers.google.com/maps/documentation/android-sdk/get-api-key&#34;&gt;API key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;API level 21+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    implementation &#39;com.google.maps.android:maps-compose:2.11.2&#39;&#xA;&#xA;    // Make sure to also include the latest version of the Maps SDK for Android&#xA;    implementation &#39;com.google.android.gms:play-services-maps:18.0.2&#39;&#xA;&#xA;    // Optionally, you can include the Compose utils library for Clustering, etc.&#xA;    implementation &#39;com.google.maps.android:maps-compose-utils:2.11.2&#39;&#xA;&#xA;    // Optionally, you can include the widgets library for ScaleBar, etc.&#xA;    implementation &#39;com.google.maps.android:maps-compose-widgets:2.11.2&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sample App&lt;/h2&gt; &#xA;&lt;p&gt;This repository includes a &lt;a href=&#34;https://raw.githubusercontent.com/googlemaps/android-maps-compose/main/app&#34;&gt;sample app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get a &lt;a href=&#34;https://developers.google.com/maps/documentation/android-sdk/get-api-key&#34;&gt;Maps API key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a file in the root directory named &lt;code&gt;local.properties&lt;/code&gt; with a single line that looks like this, replacing YOUR_KEY with the key from step 1: &lt;code&gt;MAPS_API_KEY=YOUR_KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build and run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can learn more about all the extensions provided by this library by reading the &lt;a href=&#34;https://googlemaps.github.io/android-maps-compose&#34;&gt;reference documents&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Adding a map to your app looks like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val singapore = LatLng(1.35, 103.87)&#xA;val cameraPositionState = rememberCameraPositionState {&#xA;    position = CameraPosition.fromLatLngZoom(singapore, 10f)&#xA;}&#xA;GoogleMap(&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    cameraPositionState = cameraPositionState&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Creating and configuring a map&lt;/summary&gt; &#xA; &lt;h2&gt;Creating and configuring a map&lt;/h2&gt; &#xA; &lt;p&gt;Configuring the map can be done by passing a &lt;code&gt;MapProperties&lt;/code&gt; object into the &lt;code&gt;GoogleMap&lt;/code&gt; composable, or for UI-related configurations, use &lt;code&gt;MapUiSettings&lt;/code&gt;. &lt;code&gt;MapProperties&lt;/code&gt; and &lt;code&gt;MapUiSettings&lt;/code&gt; should be your first go-to for configuring the map. For any other configuration not present in those two classes, use &lt;code&gt;googleMapOptionsFactory&lt;/code&gt; to provide a &lt;code&gt;GoogleMapOptions&lt;/code&gt; instance instead. Typically, anything that can only be provided once (i.e. when the map is created)â€”like map IDâ€”should be provided via &lt;code&gt;googleMapOptionsFactory&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Set properties using MapProperties which you can use to recompose the map&#xA;var mapProperties by remember {&#xA;    mutableStateOf(&#xA;        MapProperties(maxZoomPreference = 10f, minZoomPreference = 5f)&#xA;    )&#xA;}&#xA;var mapUiSettings by remember {&#xA;    mutableStateOf(&#xA;        MapUiSettings(mapToolbarEnabled = false)&#xA;    )&#xA;}&#xA;Box(Modifier.fillMaxSize()) {&#xA;    GoogleMap(properties = mapProperties, uiSettings = mapUiSettings)&#xA;    Column {&#xA;        Button(onClick = {&#xA;            mapProperties = mapProperties.copy(&#xA;                isBuildingEnabled = !mapProperties.isBuildingEnabled&#xA;            )&#xA;        }) {&#xA;            Text(text = &#34;Toggle isBuildingEnabled&#34;)&#xA;        }&#xA;        Button(onClick = {&#xA;            mapUiSettings = mapUiSettings.copy(&#xA;                mapToolbarEnabled = !mapUiSettings.mapToolbarEnabled&#xA;            )&#xA;        }) {&#xA;            Text(text = &#34;Toggle mapToolbarEnabled&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// ...or initialize the map by providing a googleMapOptionsFactory&#xA;// This should only be used for values that do not recompose the map such as&#xA;// map ID.&#xA;GoogleMap(&#xA;    googleMapOptionsFactory = {&#xA;        GoogleMapOptions().mapId(&#34;MyMapId&#34;)&#xA;    }&#xA;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Controlling a map&#39;s camera&lt;/summary&gt; &#xA; &lt;h3&gt;Controlling a map&#39;s camera&lt;/h3&gt; &#xA; &lt;p&gt;Camera changes and updates can be observed and controlled via &lt;code&gt;CameraPositionState&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;CameraPositionState&lt;/code&gt; is the source of truth for anything camera related. So, providing a camera position in &lt;code&gt;GoogleMapOptions&lt;/code&gt; will be overridden by &lt;code&gt;CameraPosition&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val singapore = LatLng(1.35, 103.87)&#xA;val cameraPositionState: CameraPositionState = rememberCameraPositionState {&#xA;    position = CameraPosition.fromLatLngZoom(singapore, 11f)&#xA;}&#xA;Box(Modifier.fillMaxSize()) {&#xA;  GoogleMap(cameraPositionState = cameraPositionState)&#xA;  Button(onClick = {&#xA;    // Move the camera to a new zoom level&#xA;    cameraPositionState.move(CameraUpdateFactory.zoomIn())&#xA;  }) {&#xA;      Text(text = &#34;Zoom In&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Drawing on a map&lt;/summary&gt; &#xA; &lt;h3&gt;Drawing on a map&lt;/h3&gt; &#xA; &lt;p&gt;Drawing on the map, such as adding markers, can be accomplished by adding child composable elements to the content of the &lt;code&gt;GoogleMap&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GoogleMap(&#xA;  //...&#xA;) {&#xA;    Marker(&#xA;        state = MarkerState(position = LatLng(-34, 151)),&#xA;        title = &#34;Marker in Sydney&#34;&#xA;    )&#xA;    Marker(&#xA;        state = MarkerState(position = LatLng(35.66, 139.6)),&#xA;        title = &#34;Marker in Tokyo&#34;&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Customizing a marker&#39;s info window&lt;/summary&gt; &#xA; &lt;h3&gt;Customizing a marker&#39;s info window&lt;/h3&gt; &#xA; &lt;p&gt;You can customize a marker&#39;s info window contents by using the &lt;code&gt;MarkerInfoWindowContent&lt;/code&gt; element, or if you want to customize the entire info window, use the &lt;code&gt;MarkerInfoWindow&lt;/code&gt; element instead. Both of these elements accept a &lt;code&gt;content&lt;/code&gt; parameter to provide your customization in a composable lambda expression.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;MarkerInfoWindowContent(&#xA;    //...&#xA;) { marker -&amp;gt;&#xA;    Text(marker.title ?: &#34;Default Marker Title&#34;, color = Color.Red)&#xA;}&#xA;&#xA;MarkerInfoWindow(&#xA;    //...&#xA;) { marker -&amp;gt;&#xA;    // Implement the custom info window here&#xA;    Column {&#xA;        Text(marker.title ?: &#34;Default Marker Title&#34;, color = Color.Red)&#xA;        Text(marker.snippet ?: &#34;Default Marker Snippet&#34;, color = Color.Red)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Street View&lt;/summary&gt; &#xA; &lt;h3&gt;Street View&lt;/h3&gt; &#xA; &lt;p&gt;You can add a Street View given a location using the &lt;code&gt;StreetView&lt;/code&gt; composable. To use it, provide a &lt;code&gt;StreetViewPanoramaOptions&lt;/code&gt; object as follows:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val singapore = LatLng(1.35, 103.87)&#xA;StreetView(&#xA;    streetViewPanoramaOptionsFactory = {&#xA;        StreetViewPanoramaOptions().position(singapore)&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Controlling the map directly (experimental)&lt;/summary&gt; &#xA; &lt;h2&gt;Controlling the map directly (experimental)&lt;/h2&gt; &#xA; &lt;p&gt;Certain use cases may require extending the &lt;code&gt;GoogleMap&lt;/code&gt; object to decorate / augment the map. It can be obtained with the &lt;code&gt;MapEffect&lt;/code&gt; Composable. Doing so can be dangerous, as the &lt;code&gt;GoogleMap&lt;/code&gt; object is managed by this library.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GoogleMap(&#xA;    // ...&#xA;) {&#xA;    MapEffect { map -&amp;gt;&#xA;        // map is the GoogleMap&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Utility Library&lt;/h2&gt; &#xA;&lt;p&gt;This library also provides optional utilities in the &lt;code&gt;maps-compose-utils&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;h3&gt;Clustering&lt;/h3&gt; &#xA;&lt;p&gt;The marker clustering utility helps you manage multiple markers at different zoom levels. When a user views the map at a high zoom level, the individual markers show on the map. When the user zooms out, the markers gather together into clusters, to make viewing the map easier.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/googlemaps/android-maps-compose/main/app/src/main/java/com/google/maps/android/compose/MapClusteringActivity.kt&#34;&gt;MapClusteringActivity&lt;/a&gt; demonstrates usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;Clustering(&#xA;    items = items,&#xA;    // Optional: Handle clicks on clusters, cluster items, and cluster item info windows&#xA;    onClusterClick = null,&#xA;    onClusterItemClick = null,&#xA;    onClusterItemInfoWindowClick = null,&#xA;    // Optional: Custom rendering for clusters&#xA;    clusterContent = null,&#xA;    // Optional: Custom rendering for non-clustered items&#xA;    clusterItemContent = null,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Widgets&lt;/h2&gt; &#xA;&lt;p&gt;This library also provides optional composable widgets in the &lt;code&gt;maps-compose-widgets&lt;/code&gt; library that you can use alongside the &lt;code&gt;GoogleMap&lt;/code&gt; composable.&lt;/p&gt; &#xA;&lt;h3&gt;ScaleBar&lt;/h3&gt; &#xA;&lt;p&gt;This widget shows the current scale of the map in feet and meters when zoomed into the map, changing to miles and kilometers, respectively, when zooming out. A &lt;code&gt;DisappearingScaleBar&lt;/code&gt; is also included, which appears when the zoom level of the map changes, and then disappears after a configurable timeout period.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/googlemaps/android-maps-compose/main/app/src/main/java/com/google/maps/android/compose/ScaleBarActivity.kt&#34;&gt;ScaleBarActivity&lt;/a&gt; demonstrates both of these, with the &lt;code&gt;DisappearingScaleBar&lt;/code&gt; in the upper left corner and the normal base &lt;code&gt;ScaleBar&lt;/code&gt; in the upper right:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/928045/175665891-a0635004-2201-4392-83b3-0c6553b96926.gif&#34; alt=&#34;maps-compose-scale-bar-cropped&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Both versions of this widget leverage the &lt;code&gt;CameraPositionState&lt;/code&gt; in &lt;code&gt;maps-compose&lt;/code&gt; and therefore are very simple to configure with their defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;ScaleBar(&#xA;    modifier = Modifier&#xA;            .padding(top = 5.dp, end = 15.dp)&#xA;            .align(Alignment.TopEnd),&#xA;    cameraPositionState = cameraPositionState&#xA;)&#xA;&#xA;DisappearingScaleBar(&#xA;    modifier = Modifier&#xA;            .padding(top = 5.dp, end = 15.dp)&#xA;            .align(Alignment.TopStart),&#xA;    cameraPositionState = cameraPositionState&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The colors of the text, line, and shadow are also all configurable (e.g., based on &lt;code&gt;isSystemInDarkTheme()&lt;/code&gt; on a dark map). Similarly, the &lt;code&gt;DisappearingScaleBar&lt;/code&gt; animations can be configured.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome and encouraged! See &lt;a href=&#34;https://raw.githubusercontent.com/googlemaps/android-maps-compose/main/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Encounter an issue while using this library?&lt;/p&gt; &#xA;&lt;p&gt;If you find a bug or have a feature request, please &lt;a href=&#34;https://github.com/googlemaps/android-maps-compose/issues/new/choose&#34;&gt;file an issue&lt;/a&gt;. Or, if you&#39;d like to contribute, send us a &lt;a href=&#34;https://github.com/googlemaps/android-maps-compose/compare&#34;&gt;pull request&lt;/a&gt; and refer to our &lt;a href=&#34;https://raw.githubusercontent.com/googlemaps/android-maps-compose/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also discuss this library on our &lt;a href=&#34;https://discord.gg/hYsWbmk&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>