<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-30T01:40:01Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GetStream/AvengersChat</title>
    <updated>2022-09-30T01:40:01Z</updated>
    <id>tag:github.com,2022-09-30:/GetStream/AvengersChat</id>
    <link href="https://github.com/GetStream/AvengersChat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üíô Android sample Avengers chat application using Stream Chat SDK based on MVVM (ViewModel, Coroutines, Room, Hilt, Repository) architecture.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GetStream/AvengersChat/main/previews/screenshot.jpg&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mailchi.mp/kotlinweekly/kotlin-weekly-274&#34;&gt;&lt;img alt=&#34;KotlinWeekly&#34; src=&#34;https://skydoves.github.io/badges/kotlin-weekly.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves/AvengersChat/actions/workflows/android.yml&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://github.com/skydoves/AvengersChat/actions/workflows/android.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://getstream.io/tutorials/android-chat?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Github_Sept2022_AvengersChat&amp;amp;utm_term=DevRelOss&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/HayesGordon/e7f3c4587859c17f3e593fd3ff5b13f4/raw/11d9d9385c9f34374ede25f6471dc743b977a914/badge.json&#34; alt=&#34;Stream Feeds&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;AvengersChat demonstrates modern Android development based on MVVM architecture and &lt;a href=&#34;https://getstream.io/tutorials/android-chat&#34;&gt;Stream Chat SDK for Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The purpose of this repository is to demonstrate below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implementing each different feature with modularization and navigation.&lt;/li&gt; &#xA; &lt;li&gt;Implementation of Android architecture components with Jetpack libraries, such as Hilt and AppStartup.&lt;/li&gt; &#xA; &lt;li&gt;Performing background tasks with Kotlin Coroutines.&lt;/li&gt; &#xA; &lt;li&gt;Integrating chat systems with &lt;a href=&#34;https://getstream.io/tutorials/android-chat&#34;&gt;Stream Chat SDK for Android&lt;/a&gt; for real-time event handling.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚úçÔ∏è Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/GetStream/AvengersChat/raw/main/previews/turotial0.png&#34; alt=&#34;banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can learn more about this project from the &lt;a href=&#34;https://github.com/GetStream/AvengersChat/raw/main/TUTORIAL.md#stream-blog-contents&#34;&gt;blog posts&lt;/a&gt; and &lt;a href=&#34;https://github.com/GetStream/AvengersChat/raw/main/TUTORIAL.md#stream-developers-youtube-channel&#34;&gt;Youtube videos&lt;/a&gt;. If you&#39;re interested in the materials, check out the &lt;strong&gt;&lt;a href=&#34;https://github.com/GetStream/AvengersChat/raw/main/TUTORIAL.md&#34;&gt;Tutorials Page&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üí°&lt;/span&gt; Additional Repositories&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in additional repositories that were built with Jetpack Compose and Stream SDK, check out the repositories below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getStream/whatsApp-clone-compose&#34;&gt;WhatsApp Clone Android&lt;/a&gt;: üì± WhatsApp clone project demonstrates modern Android development built with Jetpack Compose and Stream Chat SDK for Compose.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GetStream/stream-slack-clone-android&#34;&gt;Slack Clone Android&lt;/a&gt;: üì± A chat demo app built with Jetpack Compose and Stream Chat SDK following clean architecture principles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getStream/stream-draw-android&#34;&gt;Stream Draw Android&lt;/a&gt;: üõ• Stream Draw is a real-time multiplayer drawing &amp;amp; chat game app built entirely with Jetpack Compose.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MathRoda/Messenger-clone&#34;&gt;Facebook Messenger Clone&lt;/a&gt;: Facebook Messenger clone using Stream SDK &amp;amp; Jetpack Compose.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì≤ Download APK&lt;/h2&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://github.com/getStream/AvengersChat/releases&#34;&gt;Releases&lt;/a&gt; to download the latest APK.&lt;/p&gt; &#xA;&lt;a href=&#34;https://getstream.io/tutorials/android-chat?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Github_Sept2022_AvengersChat&amp;amp;utm_term=DevRelOss&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/138428440-b92e5fb7-89f8-41aa-96b1-71a5486c5849.png&#34; align=&#34;right&#34; width=&#34;12%&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;‚õ¥ Stream Chat SDK for Android&lt;/h2&gt; &#xA;&lt;p&gt;AvengersChat was built with &lt;a href=&#34;https://getstream.io/tutorials/android-chat/&#34;&gt;Stream Chat SDK for Android&lt;/a&gt; for implementing messaging systems. You can learn more about the SDK with the materials below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/tutorials/android-chat/?utm_source=Github&amp;amp;utm_campaign=Devrel_oss&amp;amp;utm_medium=avengerschat&#34;&gt;Chat Messaging Tutorial&lt;/a&gt;: Basic tutorials for getting started by building a simple messaging app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GetStream/stream-chat-android&#34;&gt;Stream Chat Android repository&lt;/a&gt;: Official Android SDK for Stream Chat.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/android/?language=kotlin&#34;&gt;Chat Client Documentation&lt;/a&gt;: Full documentation of the Chat client for requesting API calls.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/&#34;&gt;UI Components Documentation&lt;/a&gt;: Full documentation of the Stream UI Components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GetStream/stream-chat-android/tree/main/stream-chat-android-ui-components-sample&#34;&gt;UI Components Sample&lt;/a&gt;: Official sample app for building messaging app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì∑ Previews&lt;/h2&gt; &#xA;&lt;p&gt;If you find funny moments on this demo application, feel free to join and share the moment in &lt;a href=&#34;https://github.com/skydoves/AvengersChat/discussions/1&#34;&gt;this thread&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GetStream/AvengersChat/main/previews/preview0.gif&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GetStream/AvengersChat/main/previews/preview1.gif&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GetStream/AvengersChat/main/previews/preview2.gif&#34; width=&#34;32%&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/139976413-675a3b32-1edf-4bfc-b600-a8ffb734f1ec.jpeg&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/139976435-5da608b9-e453-47c0-be78-73f0039b4ab1.jpeg&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/139976345-dedc9c4c-2140-4fbc-9d02-7d815380d900.jpeg&#34; width=&#34;32%&#34;&gt; &lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/GetStream/AvengersChat/main/previews/preview0.gif&#34; align=&#34;right&#34; width=&#34;32%&#34;&gt; &#xA;&lt;h2&gt;üõ† Tech stack &amp;amp; Open source libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimum SDK level 21.&lt;/li&gt; &#xA; &lt;li&gt;100% &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt; based + &lt;a href=&#34;https://github.com/Kotlin/kotlinx.coroutines&#34;&gt;Coroutines&lt;/a&gt; + &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/&#34;&gt;Flow&lt;/a&gt; for asynchronous.&lt;/li&gt; &#xA; &lt;li&gt;Hilt for dependency injection.&lt;/li&gt; &#xA; &lt;li&gt;Jetpack &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lifecycle: Dispose observing data when lifecycle state changes.&lt;/li&gt; &#xA;   &lt;li&gt;ViewModel: UI related data holder and lifecycle aware.&lt;/li&gt; &#xA;   &lt;li&gt;App Startup: Provides a straightforward, performant way to initialize components at application startup.&lt;/li&gt; &#xA;   &lt;li&gt;Navigation: For navigating screens and provides deeplinks.&lt;/li&gt; &#xA;   &lt;li&gt;Room: Constructs Database by providing an abstraction layer over SQLite to allow fluent database access.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dagger.dev/hilt/&#34;&gt;Hilt&lt;/a&gt;: Dependency Injection.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Architecture &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MVVM Architecture: View - DataBinding - ViewModel - Model&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/skydoves/bindables&#34;&gt;Bindables&lt;/a&gt;: Android DataBinding kit for notifying data changes to UI layers.&lt;/li&gt; &#xA;   &lt;li&gt;Repository pattern&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://material.io/design&#34;&gt;Material Design &amp;amp; Animations&lt;/a&gt;: Design system created by Google to help teams build high-quality digital experiences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/retrofit&#34;&gt;Retrofit2 &amp;amp; OkHttp3&lt;/a&gt;: Construct the REST APIs and paging network data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skydoves/Sandwich&#34;&gt;Sandwich&lt;/a&gt;: Construct lightweight http API response and handling error responses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/moshi/&#34;&gt;Moshi&lt;/a&gt;: A modern JSON library for Kotlin and Java.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/coil-kt/coil&#34;&gt;Coil&lt;/a&gt;: Image loading for Android backed by Kotlin Coroutines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skydoves/transformationlayout&#34;&gt;TransformationLayout&lt;/a&gt;: Implementing transformation motion animations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PierfrancescoSoffritti/android-youtube-player&#34;&gt;android-youtube-player&lt;/a&gt;: YouTube Player library for Android and Chromecast, stable and customizable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yarolegovich/DiscreteScrollView&#34;&gt;DiscreteScrollView&lt;/a&gt;: Implementing a scrollable list of items.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JakeWharton/timber&#34;&gt;Timber&lt;/a&gt;: A logger with a small, extensible API which provides utility.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/GetStream/AvengersChat/main/previews/preview3.gif&#34; align=&#34;right&#34; width=&#34;32%&#34;&gt; &#xA;&lt;h2&gt;‚úÖ Supported features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Light and Dark themes.&lt;/li&gt; &#xA; &lt;li&gt;Different color themes by a chosen character.&lt;/li&gt; &#xA; &lt;li&gt;100% offline mode supports.&lt;/li&gt; &#xA; &lt;li&gt;Live stream chat example.&lt;/li&gt; &#xA; &lt;li&gt;Channel and message lists.&lt;/li&gt; &#xA; &lt;li&gt;Direct message and group messages.&lt;/li&gt; &#xA; &lt;li&gt;Mentioned message list.&lt;/li&gt; &#xA; &lt;li&gt;Custom emoji reactions.&lt;/li&gt; &#xA; &lt;li&gt;Guest mode.&lt;/li&gt; &#xA; &lt;li&gt;User online/offline status.&lt;/li&gt; &#xA; &lt;li&gt;User last active date.&lt;/li&gt; &#xA; &lt;li&gt;User info &amp;amp; direct message dialogs.&lt;/li&gt; &#xA; &lt;li&gt;Visual animations like transition.&lt;/li&gt; &#xA; &lt;li&gt;And a lot of features by Stream Android SDK!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚òëÔ∏è TODO&lt;/h2&gt; &#xA;&lt;p&gt;Anyone can contribute to our open source project! Please kindly read this &lt;a href=&#34;https://github.com/skydoves/AvengersChat/raw/main/CONTRIBUTING.md&#34;&gt;Contributing Guideline&lt;/a&gt; before contributing to our project. üòé&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Modify a user profile image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Login with a new guest user.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Push notifications for new messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create group chats by selecting users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Access user info dialog everywhere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add unit test cases for all business logic.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üèõ Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;AvengersChat&lt;/strong&gt; is based on the MVVM architecture and the Repository pattern, which follows the &lt;a href=&#34;https://developer.android.com/topic/architecture&#34;&gt;Google&#39;s official architecture guidance&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GetStream/AvengersChat/main/figure/figure0.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The overall architecture of &lt;strong&gt;AvengersChat&lt;/strong&gt; is composed of two layers; the UI layer and the data layer. Each layer has dedicated components and they have each different responsibilities, as defined below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;AvengersChat&lt;/strong&gt; was built with &lt;a href=&#34;https://developer.android.com/topic/architecture&#34;&gt;Guide to app architecture&lt;/a&gt;, so it would be a great sample to show how the architecture works in real-world projects.&lt;/p&gt; &#xA;&lt;h3&gt;Architecture Overview&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GetStream/AvengersChat/main/figure/figure1.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each layer follows &lt;a href=&#34;https://developer.android.com/topic/architecture/ui-layer#udf&#34;&gt;unidirectional event/data flow&lt;/a&gt;; the UI layer emits user events to the data layer, and the data layer exposes data as a stream to other layers.&lt;/li&gt; &#xA; &lt;li&gt;The data layer is designed to work independently from other layers and must be pure, which means it doesn&#39;t have any dependencies on the other layers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With this loosely coupled architecture, you can increase the reusability of components and scalability of your app.&lt;/p&gt; &#xA;&lt;h3&gt;UI Layer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GetStream/AvengersChat/main/figure/figure2.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The UI layer consists of UI elements to configure screens that could interact with users and &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/viewmodel&#34;&gt;ViewModel&lt;/a&gt; that holds app states and restores data when configuration changes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UI elements observe the data flow via &lt;a href=&#34;https://developer.android.com/topic/libraries/data-binding&#34;&gt;DataBinding&lt;/a&gt;, which is the most essential part of the MVVM architecture.&lt;/li&gt; &#xA; &lt;li&gt;With &lt;a href=&#34;https://github.com/skydoves/bindables&#34;&gt;Bindables&lt;/a&gt;, which is an Android DataBinding kit for notifying data changes, you can implement two-way binding, and data observation in XML very clean.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Data Layer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GetStream/AvengersChat/main/figure/figure3.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The data Layer consists of repositories, which include business logic, such as querying data from the local database and requesting remote data from the network. It is implemented as an offline-first source of business logic and follows the &lt;a href=&#34;https://en.wikipedia.org/wiki/Single_source_of_truth&#34;&gt;single source of truth&lt;/a&gt; principle.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;AvengersChat&lt;/strong&gt; is an offline-first app is an app that is able to perform all, or a critical subset of its core functionality without access to the internet. So users don&#39;t need to be up-to-date on the network resources every time and it will decrease users&#39; data consumption. For further information, you can check out &lt;a href=&#34;https://developer.android.com/topic/architecture/data-layer/offline-first&#34;&gt;Build an offline-first app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Modularization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GetStream/AvengersChat/main/figure/figure4.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;AvengersChat&lt;/strong&gt; adopted modularization strategies below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reusability&lt;/strong&gt;: Modulizing reusable codes properly enable opportunities for code sharing and limits code accessibility in other modules at the same time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parallel Building&lt;/strong&gt;: Each module can be run in parallel and it reduces the build time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strict visibility control&lt;/strong&gt;: Modules restrict to expose dedicated components and access to other layers, so it prevents they&#39;re being used outside the module&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Decentralized focusing&lt;/strong&gt;: Each developer team can assign their dedicated module and they can focus on their own modules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information, check out the &lt;a href=&#34;https://developer.android.com/topic/modularization&#34;&gt;Guide to Android app modularization&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üíØ MAD Score&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/102366914-84f6b000-3ffc-11eb-8d49-b20694239782.png&#34; alt=&#34;summary&#34;&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/141415477-d1af2b48-2498-4ff0-8fdf-95dff092e317.png&#34; align=&#34;right&#34; width=&#34;22%&#34;&gt; &#xA;&lt;h2&gt;Content Credits&lt;/h2&gt; &#xA;&lt;p&gt;All copyrights of the contents, concepts, and phrases that are used in this open-source project belong to &lt;a href=&#34;https://www.marvel.com/&#34;&gt;Marvel Studios&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Find this repository useful? üíô&lt;/h2&gt; &#xA;&lt;p&gt;Support it by joining &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves/AvengersChat/stargazers&#34;&gt;stargazers&lt;/a&gt;&lt;/strong&gt; for this repository. &lt;span&gt;‚≠ê&lt;/span&gt; &lt;br&gt; Also, follow &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves&#34;&gt;maintainers&lt;/a&gt;&lt;/strong&gt; on GitHub for our next creations! ü§©&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;Copyright 2021 Stream.IO, Inc. All Rights Reserved.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>foldright/auto-pipeline</title>
    <updated>2022-09-30T01:40:01Z</updated>
    <id>tag:github.com,2022-09-30:/foldright/auto-pipeline</id>
    <link href="https://github.com/foldright/auto-pipeline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöÄ auto-pipeline is a source code generator that auto generate the component&#39;s pipeline.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#xA; &lt;div align=&#34;center&#34;&gt;&#xA;  &lt;a href=&#34;https://raw.githubusercontent.com/foldright/auto-pipeline/main/#&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/foldright/auto-pipeline/main/docs/logo-green.png&#34; alt=&#34;auto-pipeline üöÄ&#34;&gt;&lt;/a&gt;&#xA; &lt;/div&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/foldright/auto-pipeline/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/foldright/auto-pipeline/CI/main?logo=github&amp;amp;logoColor=white&#34; alt=&#34;Github Workflow Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/oldratlee/auto-pipeline&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/ci/oldratlee/auto-pipeline/main?logo=appveyor&amp;amp;logoColor=white&#34; alt=&#34;Appveyor Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/foldright/auto-pipeline&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/foldright/auto-pipeline/main?logo=codecov&amp;amp;logoColor=white&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://openjdk.java.net/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Java-8+-green?logo=java&amp;amp;logoColor=white&#34; alt=&#34;Java support&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/foldright/auto-pipeline?color=4D7A97&amp;amp;logo=apache&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/search?q=g:com.foldright.auto-pipeline&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.foldright.auto-pipeline/auto-pipeline-annotations?logo=apache-maven&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/foldright/auto-pipeline/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/foldright/auto-pipeline.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/foldright/auto-pipeline/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/foldright/auto-pipeline&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/foldright/auto-pipeline/fork&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/foldright/auto-pipeline&#34; alt=&#34;GitHub Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/foldright/auto-pipeline/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/foldright/auto-pipeline&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/foldright/auto-pipeline/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/foldright/auto-pipeline&#34; alt=&#34;GitHub Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/foldright/auto-pipeline&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/foldright/auto-pipeline&#34; alt=&#34;GitHub repo size&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;auto-pipeline&lt;/code&gt; is a source code generator that auto generate the component&#39;s pipeline. Help you to keep your project smaller, simpler, and more extensible. üí°&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;auto-pipeline&lt;/code&gt; is an &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/javax/annotation/processing/package-summary.html&#34;&gt;&lt;code&gt;annotation-processor&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;Pipeline&lt;/code&gt; generation, which is inspired by Google&#39;s &lt;a href=&#34;https://github.com/google/auto&#34;&gt;&lt;code&gt;Auto&lt;/code&gt;&lt;/a&gt;. ‚ù§Ô∏è&lt;/p&gt; &#xA;&lt;p&gt;for more information, please check out the &lt;a href=&#34;https://foldright.io/auto-pipeline/&#34;&gt;auto-pipeline documents&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;quick examples&lt;/h2&gt; &#xA;&lt;p&gt;below is a brief introduction. please check the &lt;a href=&#34;https://raw.githubusercontent.com/foldright/auto-pipeline/main/auto-pipeline-examples&#34;&gt;examples project&lt;/a&gt;, and it&#39;s test cases for details.&lt;/p&gt; &#xA;&lt;h2&gt;quick start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;auto-pipeline&lt;/code&gt; require java 8 or above.&lt;/p&gt; &#xA;&lt;h3&gt;0. add &lt;code&gt;auto-pipeline&lt;/code&gt; dependencies&lt;/h3&gt; &#xA;&lt;p&gt;for &lt;code&gt;maven&lt;/code&gt; project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependencies&amp;gt;&#xA;    &amp;lt;!--&#xA;        the auto-pipeline annotation processor will generate&#xA;          the pipeline classes for the interface.&#xA;        annotation processor dependency should be &#34;provided&#34; scope,&#xA;          because it&#39;s only needed at compile time.&#xA;    --&amp;gt;&#xA;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt;com.foldright.auto-pipeline&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;auto-pipeline-processor&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;0.2.0&amp;lt;/version&amp;gt;&#xA;        &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&amp;lt;/dependencies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for &lt;code&gt;gradle&lt;/code&gt; project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;/*&#xA; * Gradle Kotlin DSL&#xA; */&#xA;// the auto-pipeline annotation will be used in your interface type&#xA;compileOnly(&#34;com.foldright.auto-pipeline:auto-pipeline-annotations:0.1.0&#34;)&#xA;// the auto-pipeline annotation processor will generate the pipeline classes for the interface.&#xA;// use &#34;annotationProcessor&#34; scope because it&#39;s only needed at annotation processing time.&#xA;annotationProcessor(&#34;com.foldright.auto-pipeline:auto-pipeline-processor:0.1.0&#34;)&#xA;&#xA;/*&#xA; * Gradle Groovy DSL&#xA; */&#xA;compileOnly &#39;com.foldright.auto-pipeline:auto-pipeline-annotations:0.1.0&#39;&#xA;annotationProcessor &#39;com.foldright.auto-pipeline:auto-pipeline-processor:0.1.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;auto-pipeline&lt;/code&gt; has published to maven central, click here to &lt;a href=&#34;https://search.maven.org/search?q=g:com.foldright.auto-pipeline&#34;&gt;find the latest version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1. using &lt;code&gt;@AutoPipeline&lt;/code&gt; to auto generate pipeline for your interface&lt;/h3&gt; &#xA;&lt;p&gt;annotate &lt;code&gt;@AutoPipeline&lt;/code&gt; to your interface, and &lt;code&gt;auto-pipeline&lt;/code&gt; will generate some java files for the interface at compile time.&lt;/p&gt; &#xA;&lt;p&gt;let&#39;s check the &lt;a href=&#34;https://raw.githubusercontent.com/foldright/auto-pipeline/main/auto-pipeline-examples/src/main/java/com/foldright/examples/config/ConfigSource.java&#34;&gt;&lt;code&gt;ConfigSource&lt;/code&gt;&lt;/a&gt; as an example:&lt;/p&gt; &#xA;&lt;p&gt;given an interface named &lt;code&gt;ConfigSource&lt;/code&gt;, the &lt;code&gt;ConfigSource&lt;/code&gt; has the &lt;code&gt;get()&lt;/code&gt; method, input a string as key and output a string as the value. like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface ConfigSource {&#xA;    String get(String key);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;say, we want &lt;code&gt;ConfigSource#get()&lt;/code&gt; has some extensibility, so we decide to apply the &lt;code&gt;chain of responsibility&lt;/code&gt; pattern to it for extensibility.&lt;/p&gt; &#xA;&lt;p&gt;Now it&#39;s &lt;code&gt;auto-pipeline&lt;/code&gt;&#39;s turn to play a role, we simply add &lt;code&gt;@AutoPipelin&lt;/code&gt; to &lt;code&gt;ConfigSource&lt;/code&gt;Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@AutoPipeline&#xA;public interface ConfigSource {&#xA;    String get(String key);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;auto-pipeline-processor&lt;/code&gt; will auto generate pipeline java files for &lt;code&gt;ConfigSource&lt;/code&gt; into subpackage &lt;code&gt;pipeline&lt;/code&gt; when compiled:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ConfigSourceHandler&lt;/code&gt;&lt;br&gt; the responsibility interface we want to implement for extensibility&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ConfigSourcePipeline&lt;/code&gt;&lt;br&gt; the chain&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ConfigSourceHandlerContext&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AbstractConfigSourceHandlerContext&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DefaultConfigSourceHandlerContext&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. implementing your handler for pipeline&lt;/h3&gt; &#xA;&lt;p&gt;we can implement &lt;code&gt;MapConfigSourceHandler&lt;/code&gt; and &lt;code&gt;SystemConfigSourceHandler&lt;/code&gt; (they are all in the &lt;a href=&#34;https://raw.githubusercontent.com/foldright/auto-pipeline/main/auto-pipeline-examples/src/main/java/com/foldright/examples/config/handler&#34;&gt;ConfigSource handler example&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MapConfigSourceHandler implements ConfigSourceHandler {&#xA;    private final Map&amp;lt;String, String&amp;gt; map;&#xA;&#xA;    public MapConfigSourceHandler(Map&amp;lt;String, String&amp;gt; map) {&#xA;        this.map = map;&#xA;    }&#xA;&#xA;    @Override&#xA;    public String get(String key, ConfigSourceHandlerContext context) {&#xA;        String value = map.get(key);&#xA;        if (StringUtils.isNotBlank(value)) {&#xA;            return value;&#xA;        }&#xA;        return context.get(key);&#xA;    }&#xA;}&#xA;&#xA;public class SystemConfigSourceHandler implements ConfigSourceHandler {&#xA;    public static final SystemConfigSourceHandler INSTANCE = new SystemConfigSourceHandler();&#xA;&#xA;    @Override&#xA;    public String get(String key, ConfigSourceHandlerContext context) {&#xA;        String value = System.getProperty(key);&#xA;        if (StringUtils.isNotBlank(value)) {&#xA;            return value;&#xA;        }&#xA;        return context.get(key);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. use the pipeline&lt;/h3&gt; &#xA;&lt;p&gt;create a &lt;code&gt;ConfigSourcePipeline&lt;/code&gt; by composing &lt;code&gt;ConfigSourceHandler&lt;/code&gt;s which can ben an entrance of the &lt;code&gt;ConfigSource&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Map&amp;lt;String, String&amp;gt; mapConfig = new HashMap&amp;lt;String, String&amp;gt;();&#xA;mapConfig.put(&#34;hello&#34;, &#34;world&#34;);&#xA;ConfigSourceHandler mapConfigSourceHandler = new MapConfigSourceHandler(mapConfig);&#xA;&#xA;ConfigSource pipeline = new ConfigSourcePipeline()&#xA;        .addLast(mapConfigSourceHandler)&#xA;        .addLast(SystemConfigSourceHandler.INSTANCE);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;now, we can use the &lt;code&gt;pipeline.get(...)&lt;/code&gt; to invoke the chain! üéâ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;pipeline.get(&#34;hello&#34;);&#xA;// get value &#34;world&#34;&#xA;// from mapConfig / mapConfigSourceHandler&#xA;&#xA;pipeline.get(&#34;java.specification.version&#34;)&#xA;// get value &#34;1.8&#34;&#xA;// from system properties / SystemConfigSourceHandler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;check the runnable &lt;a href=&#34;https://raw.githubusercontent.com/foldright/auto-pipeline/main/auto-pipeline-examples/src/test/java/com/foldright/examples/config/pipeline/ConfigSourceTest.kt&#34;&gt;test case&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache License 2.0&lt;/p&gt;</summary>
  </entry>
</feed>