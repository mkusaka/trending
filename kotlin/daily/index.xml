<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-02T01:33:11Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>theapache64/retrosheet</title>
    <updated>2025-04-02T01:33:11Z</updated>
    <id>tag:github.com,2025-04-02:/theapache64/retrosheet</id>
    <link href="https://github.com/theapache64/retrosheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📃 Turn Google Spreadsheet to JSON endpoint. Supported Platforms: Android, iOS, JVM and JS. Thanks to Kotlin Multiplatform 🙏🏼&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;📝 retrosheet&lt;/h1&gt; &#xA;&lt;p&gt;Turn Google Spreadsheet to JSON endpoint.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/theapache64/retrosheet/master/demo.png&#34; alt=&#34;https://github.com/theapache64/notes&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤝 Benefits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔥 Free analytics via Google forms&lt;/li&gt; &#xA; &lt;li&gt;🔄 Migrate to your REST API with minimal code changes.&lt;/li&gt; &#xA; &lt;li&gt;📊 You get a easy to use and real time interface for your data (GoogleSheet) ;)&lt;/li&gt; &#xA; &lt;li&gt;🏃‍♂️ Speed up development of your POC or MVP with this library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Platform Supported&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Android-3DDC84?style=for-the-badge&amp;amp;logo=android&amp;amp;logoColor=white&#34; alt=&#34;Android&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/iOS-000000?style=for-the-badge&amp;amp;logo=ios&amp;amp;logoColor=white&#34; alt=&#34;iOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&amp;amp;logo=openjdk&amp;amp;logoColor=white&#34; alt=&#34;Java&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&amp;amp;logo=javascript&amp;amp;logoColor=%23F7DF1E&#34; alt=&#34;JavaScript&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤝 Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/theapache64/retrosheet&#34; alt=&#34;latestVersion&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;    implementation(&#34;io.github.theapache64:retrosheet:&amp;lt;latest.version&amp;gt;&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⌘️ Usage&lt;/h2&gt; &#xA;&lt;h3&gt;✍️ Writing Data&lt;/h3&gt; &#xA;&lt;h4&gt;📝 Step 1: Create a Google Form&lt;/h4&gt; &#xA;&lt;p&gt;Create a form with required fields.&lt;br&gt; &lt;img src=&#34;https://i.imgur.com/9PeK2EQ.png&#34; alt=&#34;Google Form&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;🎯 Step 2: Set Response Destination&lt;/h4&gt; &#xA;&lt;p&gt;Choose a Google Sheet to save responses.&lt;br&gt; &lt;img src=&#34;https://i.imgur.com/fIzWiN5.png&#34; alt=&#34;Response Destination&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://i.imgur.com/7ASAB55.png&#34; alt=&#34;Sheet Selection&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;📊 Step 3: Customize Sheet&lt;/h4&gt; &#xA;&lt;p&gt;Rename sheet and columns (optional).&lt;br&gt; &lt;img src=&#34;https://i.imgur.com/keT8P1o.png&#34; alt=&#34;Before&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://i.imgur.com/N6xfuZK.png&#34; alt=&#34;After&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;🔗 Step 4: Get Form Link&lt;/h4&gt; &#xA;&lt;p&gt;Press &lt;code&gt;Send&lt;/code&gt; and copy the link.&lt;br&gt; &lt;img src=&#34;https://i.imgur.com/veATAn5.png&#34; alt=&#34;Form Link&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;🔧 Step 5: Create &lt;code&gt;RetrosheetConfig&lt;/code&gt; and attach it to the client&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val config = RetrosheetConfig.Builder()&#xA;    .setLogging(true)&#xA;    // For reading from sheet&#xA;    .addSheet(&#xA;        &#34;notes&#34;, // sheet name&#xA;        &#34;created_at&#34;, &#34;title&#34;, &#34;description&#34; // columns in same order&#xA;    )&#xA;    // For writing to sheet&#xA;    .addForm(&#xA;        &#34;add_note&#34;,&#xA;        &#34;https://docs.google.com/forms/d/e/1FAIpQLSdmavg6P4eZTmIu-0M7xF_z-qDCHdpGebX8MGL43HSGAXcd3w/viewform?usp=sf_link&#34; // form link&#xA;    )&#xA;    .build()&#xA;&#xA;val ktorClient = HttpClient {&#xA;    install(createRetrosheetPlugin(config)) {}&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;🌐 Step 6: Create API Interface&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;interface NotesApi {&#xA;    @Read(&#34;SELECT *&#34;)&#xA;    @GET(&#34;notes&#34;)&#xA;    suspend fun getNotes(): List&amp;lt;Note&amp;gt;&#xA;&#xA;    @Write&#xA;    @POST(&#34;add_note&#34;)&#xA;    suspend fun addNote(@Body note: Note): Note&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;@Write&lt;/strong&gt; is used for writing data and &lt;strong&gt;@Read&lt;/strong&gt; for reading data.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/chart/interactive/docs/querylanguage&#34;&gt;Query Language Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;📚 Reading Data&lt;/h3&gt; &#xA;&lt;h4&gt;🔄 Step 7: Share Sheet&lt;/h4&gt; &#xA;&lt;p&gt;Open a sheet and copy its shareable link.&lt;br&gt; &lt;img src=&#34;https://i.imgur.com/MNYD7mg.png&#34; alt=&#34;Copy Link&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;✂️ Step 8: Edit Link&lt;/h4&gt; &#xA;&lt;p&gt;Trim the link after the last &#39;/&#39;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;https://docs.google.com/spreadsheets/d/1IcZTH6-g7cZeht_xr82SHJOuJXD_p55QueMrZcnsAvQ&lt;/code&gt;&lt;del&gt;/edit?usp=sharing&lt;/del&gt;&lt;/p&gt; &#xA;&lt;h4&gt;🔗 Step 9: Set Base URL&lt;/h4&gt; &#xA;&lt;p&gt;Use the trimmed link as &lt;code&gt;baseUrl&lt;/code&gt; in &lt;code&gt;Ktorfit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val retrofit = Ktorfit.Builder()&#xA;    // Like this 👇🏼&#xA;    .baseUrl(&#34;https://docs.google.com/spreadsheets/d/1YTWKe7_mzuwl7AO1Es1aCtj5S9buh3vKauKCMjx1j_M/&#34;)&#xA;    .httpClient(ktorClient)&#xA;    .converterFactories(RetrosheetConverter(config))&#xA;    .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Done 👍&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🌠 Full Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;suspend fun main() {&#xA;    val notesApi = buildNotesApi()&#xA;    println(notesApi.getNotes())&#xA;&#xA;    // Adding sample order&#xA;    val newNote = notesApi.addNote(&#xA;        Note(&#xA;            createdAt = null,&#xA;            title = &#34;Dynamic Note 1&#34;,&#xA;            description = &#34;Dynámic Desc 1: ${Date()}&#34;&#xA;        )&#xA;    )&#xA;&#xA;    println(newNote)&#xA;}&#xA;&#xA;&#xA;fun createNotesApi(&#xA;    configBuilder: RetrosheetConfig.Builder.() -&amp;gt; Unit = {}&#xA;): NotesApi {&#xA;    val config = RetrosheetConfig.Builder()&#xA;        .apply { this.configBuilder() }&#xA;        .setLogging(true)&#xA;        // To Read&#xA;        .addSheet(&#xA;            &#34;notes&#34;, // sheet name&#xA;            &#34;created_at&#34;, &#34;title&#34;, &#34;description&#34; // columns in same order&#xA;        )&#xA;        // To write&#xA;        .addForm(&#xA;            &#34;add_note&#34;,&#xA;            // Google form name&#xA;            &#34;https://docs.google.com/forms/d/e/1FAIpQLSdmavg6P4eZTmIu-0M7xF_z-qDCHdpGebX8MGL43HSGAXcd3w/viewform?usp=sf_link&#34;&#xA;        )&#xA;        .build()&#xA;&#xA;    val ktorClient = HttpClient {&#xA;        install(createRetrosheetPlugin(config)) {}&#xA;        install(ContentNegotiation) {&#xA;            json()&#xA;        }&#xA;    }&#xA;&#xA;    val retrofit = Ktorfit.Builder()&#xA;        // GoogleSheet Public URL&#xA;        .baseUrl(&#34;https://docs.google.com/spreadsheets/d/1YTWKe7_mzuwl7AO1Es1aCtj5S9buh3vKauKCMjx1j_M/&#34;)&#xA;        .httpClient(ktorClient)&#xA;        .converterFactories(RetrosheetConverter(config))&#xA;        .build()&#xA;&#xA;    return retrofit.createNotesApi()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Source: &lt;a href=&#34;https://github.com/theapache64/retrosheet-jvm-sample&#34;&gt;https://github.com/theapache64/retrosheet-jvm-sample&lt;/a&gt;. Check &lt;code&gt;sample&lt;/code&gt; directory for more samples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔄 Migration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Want to migrate from v1 or v2?Here&#39;s the &lt;a href=&#34;https://github.com/theapache64/retrosheet/raw/master/MIGRATION.md&#34;&gt;guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Must Read ✋🏼&lt;/h2&gt; &#xA;&lt;p&gt;Retrosheet is great for prototyping and shouldn’t be used in production for a real app. That said, I do use it in production for a few of my &lt;a href=&#34;https://github.com/theapache64/stackzy&#34;&gt;side projects&lt;/a&gt; for more than 5 years now. This library makes direct calls to Google APIs—so if they go down, we all go down. (So I&#39;ll be right there, drowning in tears with you.)&lt;/p&gt; &#xA;&lt;h2&gt;✍️ Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;theapache64&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>