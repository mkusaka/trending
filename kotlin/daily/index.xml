<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-23T01:40:08Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>icerockdev/moko-resources</title>
    <updated>2023-06-23T01:40:08Z</updated>
    <id>tag:github.com,2023-06-23:/icerockdev/moko-resources</id>
    <link href="https://github.com/icerockdev/moko-resources" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Resources access for mobile (android &amp; ios) Kotlin Multiplatform development&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/img/logo.png&#34; alt=&#34;moko-resources&#34;&gt;&lt;br&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repo1.maven.org/maven2/dev/icerock/moko/resources&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/dev.icerock.moko/resources&#34; alt=&#34;Download&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://kotlin-version.aws.icerock.dev/kotlin-version?group=dev.icerock.moko&amp;amp;name=resources&#34; alt=&#34;kotlin-version&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/platform-android-6EDB8D.svg?style=flat&#34; alt=&#34;badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-iosX64-CDCDCD?style=flat&#34; alt=&#34;badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-iosArm64-CDCDCD?style=flat&#34; alt=&#34;badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-iosSimulatorArm64-CDCDCD?style=flat&#34; alt=&#34;badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-macosArm64-111111?style=flat&#34; alt=&#34;badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-macosX64-111111?style=flat&#34; alt=&#34;badge&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/platform-jvm-DB413D.svg?style=flat&#34; alt=&#34;badge&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/platform-js-F8DB5D.svg?style=flat&#34; alt=&#34;badge&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mobile Kotlin resources&lt;/h1&gt; &#xA;&lt;p&gt;This is a Kotlin MultiPlatform library (and Gradle plugin) that provides access to the resources on macOS, iOS, Android the JVM and JS/Browser with the support of the default system localization.&lt;/p&gt; &#xA;&lt;p&gt;Also MOKO resources supports &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform&#34;&gt;Compose Multiplatform&lt;/a&gt; so you can implement all you UI in Kotlin with Jetpack Compose and MOKO resources.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/#versions&#34;&gt;Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/#samples&#34;&gt;Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/#set-up-locally&#34;&gt;Set Up Locally&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strings, Plurals&lt;/strong&gt; to access the corresponding resources from common code;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Colors&lt;/strong&gt; with light/dark mode support;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compose Multiplatform&lt;/strong&gt; support;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Images&lt;/strong&gt; support (&lt;code&gt;svg&lt;/code&gt;, &lt;code&gt;png&lt;/code&gt;, &lt;code&gt;jpg&lt;/code&gt;);&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fonts&lt;/strong&gt; support (&lt;code&gt;ttf&lt;/code&gt;, &lt;code&gt;otf&lt;/code&gt;);&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Files&lt;/strong&gt; support (as &lt;code&gt;raw&lt;/code&gt; or &lt;code&gt;assets&lt;/code&gt; for android);&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;StringDesc&lt;/strong&gt; for lifecycle-aware access to resources and unified localization on both platforms;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Static&lt;/strong&gt; iOS frameworks support;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fat and XC&lt;/strong&gt; frameworks support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gradle version 7.5+&lt;/li&gt; &#xA; &lt;li&gt;Android Gradle Plugin 7.4.2+&lt;/li&gt; &#xA; &lt;li&gt;Android API 16+&lt;/li&gt; &#xA; &lt;li&gt;iOS version 11.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Gradle setup&lt;/h3&gt; &#xA;&lt;p&gt;root build.gradle&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {&#xA;    repositories {&#xA;        gradlePluginPortal()&#xA;    }&#xA;&#xA;    dependencies {&#xA;        classpath &#34;dev.icerock.moko:resources-generator:0.23.0&#34;&#xA;    }&#xA;}&#xA;&#xA;&#xA;allprojects {&#xA;    repositories {&#xA;        mavenCentral()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;project build.gradle&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;apply plugin: &#34;dev.icerock.mobile.multiplatform-resources&#34;&#xA;&#xA;dependencies {&#xA;    commonMainApi(&#34;dev.icerock.moko:resources:0.23.0&#34;)&#xA;    commonMainApi(&#34;dev.icerock.moko:resources-compose:0.23.0&#34;) // for compose multiplatform&#xA;&#xA;    commonTestImplementation(&#34;dev.icerock.moko:resources-test:0.23.0&#34;)&#xA;}&#xA;&#xA;multiplatformResources {&#xA;    multiplatformResourcesPackage = &#34;org.example.library&#34; // required&#xA;    multiplatformResourcesClassName = &#34;SharedRes&#34; // optional, default MR&#xA;    multiplatformResourcesVisibility = MRVisibility.Internal // optional, default Public&#xA;    iosBaseLocalizationRegion = &#34;en&#34; // optional, default &#34;en&#34;&#xA;    multiplatformResourcesSourceSet = &#34;commonClientMain&#34;  // optional, default &#34;commonMain&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Export classes to Swift&lt;/h4&gt; &#xA;&lt;p&gt;To use &lt;code&gt;toUIColor()&lt;/code&gt;, &lt;code&gt;toUIImage()&lt;/code&gt;, &lt;code&gt;desc()&lt;/code&gt; and other iOS extensions from Swift - you should &lt;a href=&#34;https://kotlinlang.org/docs/multiplatform-build-native-binaries.html#export-dependencies-to-binaries&#34;&gt;add &lt;code&gt;export&lt;/code&gt; declarations&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;framework {&#xA;    export(&#34;dev.icerock.moko:resources:0.23.0&#34;)&#xA;    export(&#34;dev.icerock.moko:graphics:0.9.0&#34;) // toUIColor here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Xcode setup&lt;/h3&gt; &#xA;&lt;p&gt;In iOS/macOS Info.plist need to add localizations, to use localizations strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#xA;&amp;lt;key&amp;gt;CFBundleLocalizations&amp;lt;/key&amp;gt;&amp;lt;array&amp;gt;&#xA;&amp;lt;string&amp;gt;en&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;ru&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in array should be added all used languages.&lt;/p&gt; &#xA;&lt;h3&gt;Android build types&lt;/h3&gt; &#xA;&lt;p&gt;If your project includes a build type, for example &lt;code&gt;staging&lt;/code&gt; which isn&#39;t in moko-resources. That isn&#39;t an issue. Use matchingFallbacks to specify alternative matches for a given build type, as shown below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;buildTypes {&#xA;    staging {&#xA;        initWith debug&#xA;        matchingFallbacks = [&#39;debug&#39;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JS Webpack&lt;/h3&gt; &#xA;&lt;p&gt;JS/Browser generates json files which is included in webpack by default. For more details about JS see &lt;code&gt;samples/resources-gallery/web-app&lt;/code&gt; sample&lt;/p&gt; &#xA;&lt;h3&gt;iOS/macOS static kotlin frameworks support&lt;/h3&gt; &#xA;&lt;p&gt;Static framework can&#39;t have own resources, so we should setup additional &lt;code&gt;Build Phase&lt;/code&gt; in Xcode that will copy resources to application.&lt;/p&gt; &#xA;&lt;p&gt;Please replace &lt;code&gt;:yourframeworkproject&lt;/code&gt; to kotlin project gradle path, and set correct relative path (&lt;code&gt;$SRCROOT/../&lt;/code&gt; in example).&lt;/p&gt; &#xA;&lt;h4&gt;With org.jetbrains.kotlin.native.cocoapods&lt;/h4&gt; &#xA;&lt;p&gt;In Xcode add &lt;code&gt;Build Phase&lt;/code&gt; (at end of list) with script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;$SRCROOT/../gradlew&#34; -p &#34;$SRCROOT/../&#34; :yourframeworkproject:copyFrameworkResourcesToApp \&#xA;    -Pmoko.resources.BUILT_PRODUCTS_DIR=&#34;$BUILT_PRODUCTS_DIR&#34; \&#xA;    -Pmoko.resources.CONTENTS_FOLDER_PATH=&#34;$CONTENTS_FOLDER_PATH&#34; \&#xA;    -Pkotlin.native.cocoapods.platform=&#34;$PLATFORM_NAME&#34; \&#xA;    -Pkotlin.native.cocoapods.archs=&#34;$ARCHS&#34; \&#xA;    -Pkotlin.native.cocoapods.configuration=&#34;$CONFIGURATION&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Without org.jetbrains.kotlin.native.cocoapods&lt;/h4&gt; &#xA;&lt;p&gt;In Xcode add &lt;code&gt;Build Phase&lt;/code&gt; (at end of list) with script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;$SRCROOT/../gradlew&#34; -p &#34;$SRCROOT/../&#34; :yourframeworkproject:copyFrameworkResourcesToApp \&#xA;    -Pmoko.resources.PLATFORM_NAME=&#34;$PLATFORM_NAME&#34; \&#xA;    -Pmoko.resources.CONFIGURATION=&#34;$CONFIGURATION&#34; \&#xA;    -Pmoko.resources.ARCHS=&#34;$ARCHS&#34; \&#xA;    -Pmoko.resources.BUILT_PRODUCTS_DIR=&#34;$BUILT_PRODUCTS_DIR&#34; \&#xA;    -Pmoko.resources.CONTENTS_FOLDER_PATH=&#34;$CONTENTS_FOLDER_PATH&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Disable warning about static framework usage&lt;/h4&gt; &#xA;&lt;p&gt;To disable warnings about static framework in gradle set flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;multiplatformResources {&#xA;    disableStaticFrameworkWarning = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS executable&lt;/h3&gt; &#xA;&lt;p&gt;When you use &lt;code&gt;executable&lt;/code&gt; kotlin target you should add custom build phase to xcode, after kotlin compilation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#34;$SRCROOT/../gradlew&#34; -p &#34;$SRCROOT/../&#34; :shared:copyResourcesDebugExecutableIosSimulatorArm64 \&#xA;    -Pmoko.resources.BUILT_PRODUCTS_DIR=$BUILT_PRODUCTS_DIR \&#xA;    -Pmoko.resources.CONTENTS_FOLDER_PATH=$CONTENTS_FOLDER_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;copyResourcesDebugExecutableIosSimulatorArm64&lt;/code&gt; should be configured depends on target.&lt;/p&gt; &#xA;&lt;p&gt;Configured sample you can see in &lt;code&gt;samples/kotlin-ios-app&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Creating Fat Framework with resources&lt;/h3&gt; &#xA;&lt;p&gt;Just use &lt;code&gt;FatFrameworkTask&lt;/code&gt; &lt;a href=&#34;https://kotlinlang.org/docs/mpp-build-native-binaries.html#build-universal-frameworks&#34;&gt;from kotlin plugin&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h3&gt;Creating XCFramework with resources&lt;/h3&gt; &#xA;&lt;p&gt;Just use &lt;code&gt;XCFramework&lt;/code&gt; &lt;a href=&#34;https://kotlinlang.org/docs/mpp-build-native-binaries.html#build-xcframeworks&#34;&gt;from kotlin plugin&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;But if you use &lt;strong&gt;static frameworks&lt;/strong&gt; required additional setup - add to Xcode build phase (at end):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;$SRCROOT/../gradlew&#34; -p &#34;$SRCROOT/../&#34; :shared:copyResourcesMPLReleaseXCFrameworkToApp \&#xA;    -Pmoko.resources.BUILT_PRODUCTS_DIR=$BUILT_PRODUCTS_DIR \&#xA;    -Pmoko.resources.CONTENTS_FOLDER_PATH=$CONTENTS_FOLDER_PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Details you can check in sample &lt;code&gt;samples/ios-static-xcframework&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Example 1 - simple localization string&lt;/h3&gt; &#xA;&lt;p&gt;The first step is a create a file &lt;code&gt;strings.xml&lt;/code&gt; in &lt;code&gt;commonMain/resources/MR/base&lt;/code&gt; with the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&amp;gt;&#xA;&amp;lt;resources&amp;gt;&#xA;    &amp;lt;string name=&#34;my_string&#34;&amp;gt;My default localization string&amp;lt;/string&amp;gt;&#xA;&amp;lt;/resources&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next - create a file &lt;code&gt;strings.xml&lt;/code&gt; with localized strings in &lt;code&gt;commonMain/resource/MR/&amp;lt;languageCode&amp;gt;&lt;/code&gt;. Here&#39;s an example of creating &lt;code&gt;commonMain/resource/MR/ru&lt;/code&gt; for a Russian localization:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&amp;gt;&#xA;&amp;lt;resources&amp;gt;&#xA;    &amp;lt;string name=&#34;my_string&#34;&amp;gt;Моя строка локализации по умолчанию&amp;lt;/string&amp;gt;&#xA;&amp;lt;/resources&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After adding the resources we can call a gradle sync or execute a gradle task &lt;code&gt;generateMRcommonMain&lt;/code&gt;. This will generate a &lt;code&gt;MR&lt;/code&gt; class containing &lt;code&gt;MR.strings.my_string&lt;/code&gt;, which we can use in &lt;code&gt;commonMain&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun getMyString(): StringDesc {&#xA;    return StringDesc.Resource(MR.strings.my_string)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this we can use our functions on the platform side:&lt;br&gt; Android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val string = getMyString().toString(context = this)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;iOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let string = getMyString().localized()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val strings = MR.stringsLoader.getOrLoad() // loading localization from a remote file&#xA;val string = getMyString().localized(strings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;StringDesc&lt;/code&gt; is a multiple-source container for Strings: in StringDesc we can use a resource, plurals, formatted variants, or raw string. To convert &lt;code&gt;StringDesc&lt;/code&gt; to &lt;code&gt;String&lt;/code&gt; on Android call &lt;code&gt;toString(context)&lt;/code&gt; (a context is required for the resources usage), on iOS - call &lt;code&gt;localized()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Compose Multiplatform&lt;/h4&gt; &#xA;&lt;p&gt;with compose you can just call in &lt;code&gt;commonMain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val string: String = stringResource(MR.strings.my_string)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MR directly from native side&lt;/h4&gt; &#xA;&lt;p&gt;Android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val string = MR.strings.my_string.desc().toString(context = this)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;iOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let string = MR.strings().my_string.desc().localized()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get resourceId for Jetpack Compose / SwiftUI&lt;/h4&gt; &#xA;&lt;p&gt;Android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val resId = MR.strings.my_string.resourceId&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for example in Compose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;text = stringResource(id = MR.strings.email.resourceId)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;iOS SwiftUI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let resource = MR.strings().email&#xA;Text(&#xA;    LocalizedStringKey(resource.resourceId),&#xA;    bundle: resource.bundle&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: more info in issue &lt;a href=&#34;https://github.com/icerockdev/moko-resources/issues/126&#34;&gt;#126&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Example 2 - formatted localization string&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;commonMain/resources/MR/base/strings.xml&lt;/code&gt; add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&amp;gt;&#xA;&amp;lt;resources&amp;gt;&#xA;    &amp;lt;string name=&#34;my_string_formatted&#34;&amp;gt;My format \&#39;%s\&#39;&amp;lt;/string&amp;gt;&#xA;&amp;lt;/resources&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the localized values for other languages like in example #1. Now create the following function in &lt;code&gt;commonMain&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun getMyFormatDesc(input: String): StringDesc {&#xA;    return StringDesc.ResourceFormatted(MR.strings.my_string_formatted, input)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create formatted strings from resources you can also use extension &lt;code&gt;format&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun getMyFormatDesc(input: String): StringDesc {&#xA;    return MR.strings.my_string_formatted.format(input)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now add support on the platform side like in example #1:&lt;br&gt; Android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val string = getMyFormatDesc(&#34;hello&#34;).toString(context = this)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;iOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let string = getMyFormatDesc(input: &#34;hello&#34;).localized()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Warning: Do no mix positioned placeholders with unpositioned ones within a string, as this may lead to different behaviour on different platforms. Stick to one style for each string.&lt;/p&gt; &#xA;&lt;h3&gt;Example 3 - plural string&lt;/h3&gt; &#xA;&lt;p&gt;The first step is to create a file &lt;code&gt;plurals.xml&lt;/code&gt; in &lt;code&gt;commonMain/resources/MR/base&lt;/code&gt; with the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&amp;gt;&#xA;&amp;lt;resources&amp;gt;&#xA;    &amp;lt;plural name=&#34;my_plural&#34;&amp;gt;&#xA;        &amp;lt;item quantity=&#34;zero&#34;&amp;gt;zero&amp;lt;/item&amp;gt;&#xA;        &amp;lt;item quantity=&#34;one&#34;&amp;gt;one&amp;lt;/item&amp;gt;&#xA;        &amp;lt;item quantity=&#34;two&#34;&amp;gt;two&amp;lt;/item&amp;gt;&#xA;        &amp;lt;item quantity=&#34;few&#34;&amp;gt;few&amp;lt;/item&amp;gt;&#xA;        &amp;lt;item quantity=&#34;many&#34;&amp;gt;many&amp;lt;/item&amp;gt;&#xA;        &amp;lt;item quantity=&#34;other&#34;&amp;gt;other&amp;lt;/item&amp;gt;&#xA;    &amp;lt;/plural&amp;gt;&#xA;&amp;lt;/resources&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the localized values for other languages like in example #1.&lt;br&gt; Next, create a function in &lt;code&gt;commonMain&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun getMyPluralDesc(quantity: Int): StringDesc {&#xA;    return StringDesc.Plural(MR.plurals.my_plural, quantity)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now add support on the platform side like in example #1:&lt;br&gt; Android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val string = getMyPluralDesc(10).toString(context = this)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;iOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let string = getMyPluralDesc(quantity: 10).localized()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 4 - plural formatted string&lt;/h3&gt; &#xA;&lt;p&gt;The first step is to create file &lt;code&gt;plurals.xml&lt;/code&gt; in &lt;code&gt;commonMain/resources/MR/base&lt;/code&gt; with the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&amp;gt;&#xA;&amp;lt;resources&amp;gt;&#xA;    &amp;lt;plural name=&#34;my_plural&#34;&amp;gt;&#xA;        &amp;lt;item quantity=&#34;zero&#34;&amp;gt;no items&amp;lt;/item&amp;gt;&#xA;        &amp;lt;item quantity=&#34;one&#34;&amp;gt;%d item&amp;lt;/item&amp;gt;&#xA;        &amp;lt;item quantity=&#34;two&#34;&amp;gt;%d items&amp;lt;/item&amp;gt;&#xA;        &amp;lt;item quantity=&#34;few&#34;&amp;gt;%d items&amp;lt;/item&amp;gt;&#xA;        &amp;lt;item quantity=&#34;many&#34;&amp;gt;%d items&amp;lt;/item&amp;gt;&#xA;        &amp;lt;item quantity=&#34;other&#34;&amp;gt;%d items&amp;lt;/item&amp;gt;&#xA;    &amp;lt;/plural&amp;gt;&#xA;&amp;lt;/resources&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the localized values for other languages like in example #1.&lt;br&gt; Next, create a function in &lt;code&gt;commonMain&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun getMyPluralFormattedDesc(quantity: Int): StringDesc {&#xA;    // we pass quantity as selector for correct plural string and for pass quantity as argument for formatting&#xA;    return StringDesc.PluralFormatted(MR.plurals.my_plural, quantity, quantity)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create formatted plural strings from resources you can also use extension &lt;code&gt;format&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun getMyPluralFormattedDesc(quantity: Int): StringDesc {&#xA;    // we pass quantity as selector for correct plural string and for pass quantity as argument for formatting&#xA;    return MR.plurals.my_plural.format(quantity, quantity)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And like in example #1, add the platform-side support:&lt;br&gt; Android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val string = getMyPluralFormattedDesc(10).toString(context = this)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;iOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let string = getMyPluralFormattedDesc(quantity: 10).localized()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 5 - pass raw string or resource&lt;/h3&gt; &#xA;&lt;p&gt;If we already use some resources as a placeholder value, we can use &lt;code&gt;StringDesc&lt;/code&gt; to change the string source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun getUserName(user: User?): StringDesc {&#xA;    if (user != null) {&#xA;        return StringDesc.Raw(user.name)&#xA;    } else {&#xA;        return StringDesc.Resource(MR.strings.name_placeholder)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And just like in example 1 usage on platform side:&lt;br&gt; Android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val string1 = getUserName(user).toString(context = this) // we got name from User model&#xA;val string2 = getUserName(null).toString(context = this) // we got name_placeholder from resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;iOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let string1 = getUserName(user: user).localized() // we got name from User model&#xA;let string2 = getUserName(user: null).localized() // we got name_placeholder from resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 6 - Select localization in runtime&lt;/h3&gt; &#xA;&lt;p&gt;You can force &lt;code&gt;StringDesc&lt;/code&gt; to use preferred localization in common code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;StringDesc.localeType = StringDesc.LocaleType.Custom(&#34;es&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and return to system behaviour (when localization depends on device settings):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;StringDesc.localeType = StringDesc.LocaleType.System&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 7 - Shared Images&lt;/h3&gt; &#xA;&lt;p&gt;Place images in the &lt;code&gt;commonMain/resources/MR/images&lt;/code&gt; directory. Nested directories are also supported.&lt;/p&gt; &#xA;&lt;h4&gt;png and jpg&lt;/h4&gt; &#xA;&lt;p&gt;Image names should end with one of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@0.75x&lt;/code&gt; - android ldpi;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@1x&lt;/code&gt; - android mdpi, ios 1x;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@1.5x&lt;/code&gt; - android hdpi;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@2x&lt;/code&gt; - android xhdpi, ios 2x;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@3x&lt;/code&gt; - android xxhdpi, ios 3x;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@4x&lt;/code&gt; - android xxxhdpi.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If we add the following files to &lt;code&gt;commonMain/resources/MR/images&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;home_black_18@1x.png&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;home_black_18@2x.png&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then we get an autogenerated &lt;code&gt;MR.images.home_black_18&lt;/code&gt; &lt;code&gt;ImageResource&lt;/code&gt; in code. Usage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android: &lt;code&gt;imageView.setImageResource(image.drawableResId)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;iOS: &lt;code&gt;imageView.image = image.toUIImage()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;svg&lt;/h4&gt; &#xA;&lt;p&gt;The Image generator also supports &lt;code&gt;svg&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;If we add the following file to &lt;code&gt;commonMain/resources/MR/images&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;car_black.svg&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then we get an autogenerated &lt;code&gt;MR.images.car_black&lt;/code&gt; &lt;code&gt;ImageResource&lt;/code&gt; in code. Usage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android: &lt;code&gt;imageView.setImageResource(image.drawableResId)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;iOS: &lt;code&gt;imageView.image = image.toUIImage()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Android it is a &lt;code&gt;VectorDrawable&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;p&gt;On iOS iOS 13 or later it is a &lt;code&gt;UIImage&lt;/code&gt; in the Assets catalog with &lt;code&gt;preserves-vector-representation&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;images by name&lt;/h4&gt; &#xA;&lt;p&gt;You can get images by their name, too.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;commonMain&lt;/code&gt; create a &lt;code&gt;Resources.kt&lt;/code&gt; file with the content below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun getImageByFileName(name: String): ImageResource {&#xA;    val fallbackImage = MR.images.transparent&#xA;    return MR.images.getImageByFileName(name) ?: fallbackImage&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android: &lt;code&gt;imageView.setImageResource(getImageByFileName(&#34;image_name&#34;))&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;iOS: &lt;code&gt;imageView.image = ResourcesKt.getImageByFileName(name: &#34;image_name&#34;).toUIImage()!&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Compose Multiplatform&lt;/h4&gt; &#xA;&lt;p&gt;With compose, you can simply use a &lt;code&gt;painterResource&lt;/code&gt; in &lt;code&gt;commonMain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val painter: Painter = painterResource(MR.images.home_black_18)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SwiftUI&lt;/h4&gt; &#xA;&lt;p&gt;For SwiftUI, create this &lt;code&gt;Image&lt;/code&gt; extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Image {&#xA;    init(resource: KeyPath&amp;lt;MR.images, ImageResource&amp;gt;) {&#xA;        self.init(uiImage: MR.images()[keyPath: resource].toUIImage()!)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can refer to &lt;code&gt;ImageResource&lt;/code&gt;s directly by their key path, which provides compiler errors for typos or missing resources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Image(resource: \.home_black_18)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 8 - pass font&lt;/h3&gt; &#xA;&lt;p&gt;Fonts resources directory is &lt;code&gt;commonMain/resources/MR/fonts&lt;/code&gt;.&lt;br&gt; Font name should be this pattern: &lt;code&gt;&amp;lt;fontFamily&amp;gt;-&amp;lt;fontStyle&amp;gt;&lt;/code&gt; like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Raleway-Bold.ttf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Raleway-Regular.ttf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Raleway-Italic.ttf&lt;/code&gt; Supports &lt;code&gt;ttf&lt;/code&gt; and &lt;code&gt;otf&lt;/code&gt; resources.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If we add to &lt;code&gt;commonMain/resources/MR/fonts&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Raleway-Bold.ttf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Raleway-Regular.ttf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Raleway-Italic.ttf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We got autogenerated &lt;code&gt;MR.fonts.Raleway.italic&lt;/code&gt;, &lt;code&gt;MR.fonts.Raleway.regular&lt;/code&gt;, &lt;code&gt;MR.fonts.Raleway.bold&lt;/code&gt; &lt;code&gt;FontResource&lt;/code&gt; in code, that we can use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android: &lt;code&gt;textView.typeface = font.getTypeface(context = this)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;iOS: &lt;code&gt;textView.font = font.uiFont(withSize: 14.0)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Compose Multiplatform&lt;/h4&gt; &#xA;&lt;p&gt;with compose you can just call in &lt;code&gt;commonMain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val fontFamily: FontFamily = fontFamilyResource(MR.fonts.Raleway.italic)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can get &lt;code&gt;Font&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val font: Font = MR.fonts.Raleway.italic.asFont(&#xA;  weight = FontWeight.Normal, // optional&#xA;  style = FontStyle.Normal // optional&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 9 - pass colors&lt;/h3&gt; &#xA;&lt;p&gt;Colors resources directory is &lt;code&gt;commonMain/resources/MR/colors&lt;/code&gt;.&lt;br&gt; Colors files is &lt;code&gt;xml&lt;/code&gt; with format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;resources&amp;gt;&#xA;    &amp;lt;!-- format: #RRGGBB[AA] or 0xRRGGBB[AA] or RRGGBB[AA] where [AA] - optional --&amp;gt;&#xA;    &amp;lt;color name=&#34;valueColor&#34;&amp;gt;#B02743FF&amp;lt;/color&amp;gt;&#xA;    &amp;lt;color name=&#34;referenceColor&#34;&amp;gt;@color/valueColor&amp;lt;/color&amp;gt;&#xA;    &amp;lt;color name=&#34;themedColor&#34;&amp;gt;&#xA;        &amp;lt;light&amp;gt;0xB92743FF&amp;lt;/light&amp;gt;&#xA;        &amp;lt;dark&amp;gt;7CCFEEFF&amp;lt;/dark&amp;gt;&#xA;    &amp;lt;/color&amp;gt;&#xA;    &amp;lt;color name=&#34;themedReferenceColor&#34;&amp;gt;&#xA;        &amp;lt;light&amp;gt;@color/valueColor&amp;lt;/light&amp;gt;&#xA;        &amp;lt;dark&amp;gt;@color/referenceColor&amp;lt;/dark&amp;gt;&#xA;    &amp;lt;/color&amp;gt;&#xA;&amp;lt;/resources&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want use one color without light/dark theme selection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#xA;&amp;lt;color name=&#34;valueColor&#34;&amp;gt;#B02743FF&amp;lt;/color&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want use value of other color - use references:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#xA;&amp;lt;color name=&#34;referenceColor&#34;&amp;gt;@color/valueColor&amp;lt;/color&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want different colors in light/dark themes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#xA;&amp;lt;color name=&#34;themedColor&#34;&amp;gt;&#xA;    &amp;lt;light&amp;gt;0xB92743FF&amp;lt;/light&amp;gt;&#xA;    &amp;lt;dark&amp;gt;7CCFEEFF&amp;lt;/dark&amp;gt;&#xA;&amp;lt;/color&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also themed colors can be referenced too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#xA;&amp;lt;color name=&#34;themedReferenceColor&#34;&amp;gt;&#xA;    &amp;lt;light&amp;gt;@color/valueColor&amp;lt;/light&amp;gt;&#xA;    &amp;lt;dark&amp;gt;@color/referenceColor&amp;lt;/dark&amp;gt;&#xA;&amp;lt;/color&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Colors available in common code insode &lt;code&gt;MR.colors.**&lt;/code&gt; as &lt;code&gt;ColorResource&lt;/code&gt;.&lt;br&gt; &lt;code&gt;ColorResource&lt;/code&gt; can be read from platform side:&lt;/p&gt; &#xA;&lt;p&gt;android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val color: Int = MR.colors.valueColor.getColor(context = this)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;iOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;val color: UIColor = MR.colors.valueColor.getUIColor()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;macOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;val color: NSColor = MR.colors.valueColor.getNSColor()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;jvm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val light: Color = MR.colors.valueColor.lightColor&#xA;val dark: Color = MR.colors.valueColor.darkColor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;web:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val light: Color = MR.colors.valueColor.lightColor&#xA;val dark: Color = MR.colors.valueColor.darkColor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Compose Multiplatform&lt;/h4&gt; &#xA;&lt;p&gt;with compose you can just call in &lt;code&gt;commonMain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val color: Color = colorResource(MR.colors.valueColor)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 10 - plain file resource access&lt;/h3&gt; &#xA;&lt;p&gt;The first step is a create a resource file &lt;code&gt;test.txt&lt;/code&gt; for example, in &lt;code&gt;commonMain/resources/MR/files&lt;/code&gt; After gradle sync we can get file by id &lt;code&gt;MR.files.test&lt;/code&gt; Moko-resources has out of box implementation function for read text files from common code - &lt;code&gt;readText()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Usage on Android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;val text = MR.files.test.getText(context = this)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage on Apple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;val text = MR.files.test.readText()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to read files not as text, add your own implementation to expect/actual FileResource&lt;/p&gt; &#xA;&lt;h4&gt;Compose Multiplatform&lt;/h4&gt; &#xA;&lt;p&gt;with compose you can just call in &lt;code&gt;commonMain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val fileContent: String? by MR.files.test.readTextAsState()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example 11 - assets access&lt;/h3&gt; &#xA;&lt;p&gt;Assets allow you save directories hierarchy (in files structure is plain). Locate files to &lt;code&gt;commonMain/resources/MR/assets&lt;/code&gt; and access to it by &lt;code&gt;MR.assets.*&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Compose Multiplatform&lt;/h4&gt; &#xA;&lt;p&gt;with compose you can just call in &lt;code&gt;commonMain&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val assetContent: String? by MR.assets.test.readTextAsState()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;In &lt;code&gt;samples&lt;/code&gt; directory you can find multiple projects showed different usages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/samples/resources-gallery&#34;&gt;resources-gallery&lt;/a&gt; - android, iOS, macOS, jvm, web applications with all resources types usage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/samples/compose-resources-gallery&#34;&gt;compose-resources-gallery&lt;/a&gt; - android, iOS, jvm, web Compose Multiplatform applications with all resources types usage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/samples/android-mpp-app&#34;&gt;android-mpp-app&lt;/a&gt; - android application that configured as multiplatform module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/samples/auto-manifest&#34;&gt;auto-manifest&lt;/a&gt; - sample of usage &lt;a href=&#34;https://github.com/GradleUp/auto-manifest&#34;&gt;auto-manifest&lt;/a&gt; plugin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/samples/compose-jvm-app&#34;&gt;compose-jvm-app&lt;/a&gt; - Compose Desktop jvm application with resources usage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/samples/ios-static-xcframework&#34;&gt;ios-static-xcframework&lt;/a&gt; - iOS application with static XCFramework and resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/samples/kotlin-ios-app&#34;&gt;kotlin-ios-app&lt;/a&gt; - iOS application without swift - full code on kotlin, with resources usage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Set Up Locally&lt;/h2&gt; &#xA;&lt;p&gt;In root of repository contains &lt;code&gt;moko-resources&lt;/code&gt; gradle project - libraries and gradle plugin. You can just open project in IDE and develop. Then for tests in samples you should run run &lt;code&gt;./gradlew publishToMavenLocal&lt;/code&gt; gradle task. After this you can open any sample from &lt;code&gt;samples&lt;/code&gt; in IDE and test your local version of &lt;code&gt;moko-resources&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To check your changes before pull request run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# check lib &amp;amp; plugin&#xA;./local-check.sh&#xA;# check samples&#xA;./local-samples-check.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All development (both new features and bug fixes) is performed in the &lt;code&gt;develop&lt;/code&gt; branch. This way &lt;code&gt;master&lt;/code&gt; always contains the sources of the most recently released version. Please send PRs with bug fixes to the &lt;code&gt;develop&lt;/code&gt; branch. Documentation fixes in the markdown files are an exception to this rule. They are updated directly in &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;develop&lt;/code&gt; branch is pushed to &lt;code&gt;master&lt;/code&gt; on release.&lt;/p&gt; &#xA;&lt;p&gt;For more details on contributing please see the &lt;a href=&#34;https://raw.githubusercontent.com/icerockdev/moko-resources/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2019 IceRock MAG Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>