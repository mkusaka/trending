<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-13T01:38:33Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>x13a/Wasted</title>
    <updated>2022-11-13T01:38:33Z</updated>
    <id>tag:github.com,2022-11-13:/x13a/Wasted</id>
    <link href="https://github.com/x13a/Wasted" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lock and wipe on emergency.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wasted&lt;/h1&gt; &#xA;&lt;p&gt;Lock a device and wipe its data on emergency.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://f-droid.org/packages/me.lucky.wasted/&#34;&gt;&lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://play.google.com/store/apps/details?id=me.lucky.wasted&#34;&gt;&lt;img src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png&#34; alt=&#34;Get it on Google Play&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/x13a/Wasted/main/fastlane/metadata/android/en-US/images/phoneScreenshots/1.png&#34; width=&#34;30%&#34; height=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://guardianproject.info/code/panickit/&#34;&gt;PanicKit&lt;/a&gt;, tile, shortcut or send a message with a secret code. On trigger, using &lt;a href=&#34;https://developer.android.com/guide/topics/admin/device-admin&#34;&gt;Device Administration API&lt;/a&gt;, it locks a device and optionally runs wipe (factory reset). Or it can send a broadcast message instead of the wipe.&lt;/p&gt; &#xA;&lt;p&gt;Also you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fire when a device was not unlocked for X time&lt;/li&gt; &#xA; &lt;li&gt;fire when a USB data connection is made while a device is locked&lt;/li&gt; &#xA; &lt;li&gt;fire when a fake messenger app is launched&lt;/li&gt; &#xA; &lt;li&gt;fire when a duress password is entered (companion app: &lt;a href=&#34;https://github.com/x13a/Duress&#34;&gt;Duress&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The app works in &lt;code&gt;Work Profile&lt;/code&gt; too, but with limitations. Use it to install risky apps and &lt;code&gt;Wasted&lt;/code&gt; in it. Then you can wipe this profile data with one click without wiping the whole device.&lt;/p&gt; &#xA;&lt;p&gt;For base security take a look at: &lt;a href=&#34;https://github.com/x13a/Sentry&#34;&gt;Sentry&lt;/a&gt;.&lt;br&gt; Only encrypted device may guarantee that the data will not be recoverable.&lt;/p&gt; &#xA;&lt;p&gt;Be aware that the app does not work in &lt;em&gt;safe mode&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Broadcast&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;action: &lt;code&gt;me.lucky.wasted.action.TRIGGER&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;receiver: &lt;code&gt;me.lucky.wasted/.TriggerReceiver&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;also you have to send a secret code from Wasted with the key: &lt;code&gt;code&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DEVICE_ADMIN - lock and optionally wipe a device&lt;/li&gt; &#xA; &lt;li&gt;FOREGROUND_SERVICE - receive lock and USB state events&lt;/li&gt; &#xA; &lt;li&gt;RECEIVE_BOOT_COMPLETED - persist lock job and foreground service across reboots&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crwd.in/me-lucky-wasted&#34;&gt;&lt;img height=&#34;51&#34; src=&#34;https://badges.crowdin.net/badge/dark/crowdin-on-light@2x.png&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;&lt;img src=&#34;https://www.gnu.org/graphics/gplv3-127x51.png&#34; alt=&#34;GNU GPLv3 Image&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cashapp/multiplatform-paging</title>
    <updated>2022-11-13T01:38:33Z</updated>
    <id>tag:github.com,2022-11-13:/cashapp/multiplatform-paging</id>
    <link href="https://github.com/cashapp/multiplatform-paging" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library that packages AndroidX Paging for Kotlin/Multiplatform.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Multiplatform Paging&lt;/h1&gt; &#xA;&lt;p&gt;A library that packages &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/paging/v3-overview&#34;&gt;AndroidX Paging&lt;/a&gt; for Kotlin/Multiplatform.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;As with AndroidX Paging, the primary modules of Multiplatform Paging are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;paging-common&lt;/code&gt; – encompasses the &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/paging/v3-overview#repository&#34;&gt;repository layer&lt;/a&gt; and the &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/paging/v3-overview#viewmodel&#34;&gt;view model layer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;paging-runtime&lt;/code&gt; – encompasses the &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/paging/v3-overview#ui&#34;&gt;UI layer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unlike AndroidX Paging that makes &lt;code&gt;paging-common&lt;/code&gt; JVM-specific and &lt;code&gt;paging-runtime&lt;/code&gt; Android-specific, Multiplatform Paging makes &lt;code&gt;paging-common&lt;/code&gt; multiplatform and provides iOS as an additional target to &lt;code&gt;paging-runtime&lt;/code&gt;. Therefore, pagination logic between Android and iOS can be shared, and the provided UI components can be used to render the paged items on Android and iOS.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For a holistic view of Multiplatform Paging, check out the &lt;a href=&#34;https://raw.githubusercontent.com/cashapp/multiplatform-paging/main/samples/repo-search&#34;&gt;GitHub Repository Search sample project&lt;/a&gt;, where there&#39;s an Android and iOS app, along with shared pagination logic.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;paging-common&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The API of &lt;code&gt;paging-common&lt;/code&gt; in Multiplatform Paging is identical to that of &lt;code&gt;paging-common&lt;/code&gt; in AndroidX Paging (with the exception that: the namespace has changed from &lt;code&gt;androidx.paging&lt;/code&gt; to &lt;code&gt;app.cash.paging&lt;/code&gt;; there are some minor &lt;a href=&#34;https://raw.githubusercontent.com/cashapp/multiplatform-paging/main/paging-common/README.md&#34;&gt;API discrepancies&lt;/a&gt; due to limitations in the Kotlin compiler). Therefore, to see how to use &lt;code&gt;paging-common&lt;/code&gt;, consult the &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/paging/v3-overview&#34;&gt;official documentation of AndroidX Paging&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;JVM&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;app.cash.paging:paging-common&lt;/code&gt; on the JVM delegates to &lt;code&gt;androidx.paging:paging-common&lt;/code&gt; via type aliases. To understand what this means in practice, see the section &lt;a href=&#34;https://raw.githubusercontent.com/cashapp/multiplatform-paging/main/#interoperability-with-androidx-paging&#34;&gt;&lt;em&gt;Interoperability with AndroidX Paging&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;app.cash.paging:paging-common&lt;/code&gt; on iOS delegates to &lt;em&gt;our fork&lt;/em&gt; of AndroidX Paging.&lt;/p&gt; &#xA;&lt;p&gt;iOS only includes the Paging 3 APIs from AndroidX Paging. We don&#39;t plan on offering Paging 2 support for iOS, though you can continue to use Paging 2 on the JVM.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;paging-runtime&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/cashapp/multiplatform-paging/main/#interoperability-with-androidx-paging&#34;&gt;&lt;em&gt;Interoperability with AndroidX Paging&lt;/em&gt;&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;PagingCollectionViewController&lt;/code&gt; allows a &lt;code&gt;PagingData&lt;/code&gt; to be rendered via a &lt;code&gt;UICollectionView&lt;/code&gt;. The &lt;code&gt;PagingCollectionViewController&lt;/code&gt; mimics the &lt;code&gt;UICollectionViewController&lt;/code&gt;, providing: the cell count; and item retrieval via &lt;code&gt;IndexPath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example in Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class FooViewController: UICollectionViewController {&#xA;&#xA;  private let delegate = Paging_runtimePagingCollectionViewController&amp;lt;Foo&amp;gt;(&#xA;    indexCreator: { row, section in&#xA;      NSIndexPath(row: Int(truncating: row), section: Int(truncating: section)) as IndexPath&#xA;    },&#xA;  )&#xA;&#xA;  private let presenter = …&#xA;&#xA;  required init(coder: NSCoder) {&#xA;    super.init(coder: coder)!&#xA;    presenter.pagingDatas&#xA;      .sink { pagingData in&#xA;        self.delegate.submitData(pagingData: pagingData, completionHandler: …)&#xA;      }&#xA;  }&#xA;&#xA;  override func collectionView(&#xA;    _ collectionView: UICollectionView,&#xA;    numberOfItemsInSection section: Int&#xA;  ) -&amp;gt; Int {&#xA;    return Int(delegate.collectionView(collectionView: collectionView, numberOfItemsInSection: Int64(section)))&#xA;  }&#xA;&#xA;  override func collectionView(&#xA;    _ collectionView: UICollectionView,&#xA;    cellForItemAt indexPath: IndexPath&#xA;  ) -&amp;gt; UICollectionViewCell {&#xA;    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: &#34;FooCell&#34;, for: indexPath) as! FooCell&#xA;&#xA;    let item = delegate.getItem(position: Int32(indexPath.row))!&#xA;    // …&#xA;&#xA;    return cell&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interoperability with AndroidX Paging&lt;/h2&gt; &#xA;&lt;p&gt;As &lt;code&gt;app.cash.paging:paging-common&lt;/code&gt; on the JVM type aliases to &lt;code&gt;androidx.paging:paging-common&lt;/code&gt;, some useful side effects occur:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The implementation of &lt;code&gt;app.cash.paging:paging-common&lt;/code&gt; on the JVM is &lt;strong&gt;identical&lt;/strong&gt; to &lt;code&gt;androidx.paging:paging-common&lt;/code&gt;. This means that it is impossible for there to be a behavioral discrepancy when using &lt;code&gt;app.cash.paging:paging-common&lt;/code&gt; on the JVM.&lt;/li&gt; &#xA; &lt;li&gt;All libraries that depend on &lt;code&gt;androidx.paging:paging-common&lt;/code&gt; can continue to be used on the JVM (e.g., &lt;code&gt;androidx.paging:paging-runtime&lt;/code&gt;, &lt;code&gt;androidx.paging:paging-compose&lt;/code&gt;, &lt;code&gt;androidx.paging:paging-rxjava3&lt;/code&gt;). This is why &lt;code&gt;app.cash.paging:paging-runtime&lt;/code&gt; doesn&#39;t have a JVM target, as you can instead depend on the official AndroidX artifact.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re already using AndroidX Paging, you don&#39;t need to refactor your Android code to use Multiplatform Paging. The use of Multiplatform Paging is only necessary if you wish to share pagination logic in common code and/or paginate on iOS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;The versioning scheme is of the form &lt;code&gt;X-Y&lt;/code&gt; where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;X&lt;/code&gt; is the AndroidX Paging version that is being tracked.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Y&lt;/code&gt; is the Multiplatform Paging version.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, if AndroidX Paging is on &lt;code&gt;3.1.1&lt;/code&gt; and Multiplatform Paging is on &lt;code&gt;0.1.1&lt;/code&gt;, the artifact for a release of &lt;code&gt;paging-common&lt;/code&gt; will be &lt;code&gt;app.cash.paging:paging-common:3.1.1-0.1.1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;paging-common&lt;/code&gt; for common&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;app.cash.paging:paging-common:3.1.1-0.1.1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;paging-runtime&lt;/code&gt; for iOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;app.cash.paging:paging-runtime:3.1.1-0.1.1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://developer.android.com/jetpack/androidx/releases/paging#declaring_dependencies&#34;&gt;official AndroidX Paging dependencies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;androidx.paging:paging-runtime:3.1.1&#34;)&#xA;implementation(&#34;androidx.paging:paging-compose:1.0.0-alpha17&#34;)&#xA;implementation(&#34;androidx.paging:paging-rxjava3:3.1.1&#34;)&#xA;// etc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2022 Block, Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>