<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-22T01:35:45Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>klogging/klogging</title>
    <updated>2023-11-22T01:35:45Z</updated>
    <id>tag:github.com,2023-11-22:/klogging/klogging</id>
    <link href="https://github.com/klogging/klogging" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kotlin logging library with structured logging and coroutines support&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/klogging/klogging/main/docs/klogging.svg?sanitize=true&#34; width=&#34;20%&#34; height=&#34;auto&#34; alt=&#34;Klogging Library&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Klogging&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/klogging/klogging/actions/workflows/build-klogging.yml&#34;&gt;&lt;img src=&#34;https://github.com/klogging/klogging/actions/workflows/build-klogging.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://central.sonatype.com/search?smo=true&amp;amp;q=io.klogging%3Aklogging-jvm&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.klogging/klogging-jvm.svg?label=maven%20central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Klogging&lt;/strong&gt; is a pure-Kotlin logging library that aims to be flexible and easy to use. It uses Kotlin idioms for creating loggers and sending log events. It takes advantage of &lt;a href=&#34;https://kotlinlang.org/docs/coroutines-guide.html&#34;&gt;Kotlin coroutines&lt;/a&gt; in environments that use them, for example the &lt;a href=&#34;https://ktor.io&#34;&gt;Ktor&lt;/a&gt; asynchronous service framework.&lt;/p&gt; &#xA;&lt;p&gt;This repository also includes an &lt;a href=&#34;https://raw.githubusercontent.com/klogging/klogging/main/slf4j-klogging&#34;&gt;SLF4J provider&lt;/a&gt;, a &lt;a href=&#34;https://raw.githubusercontent.com/klogging/klogging/main/klogging-spring-boot-starter&#34;&gt;Spring Boot starter&lt;/a&gt; and a &lt;a href=&#34;https://raw.githubusercontent.com/klogging/klogging/main/hexagonkt-klogging-adapter&#34;&gt;Hexagon logging adapter&lt;/a&gt; that use Klogging.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://klogging.io&#34;&gt;https://klogging.io&lt;/a&gt; for more detailed documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klogging/klogging/main/#goals&#34;&gt;Goals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klogging/klogging/main/#quick-start-jvm&#34;&gt;Quick start (JVM)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klogging/klogging/main/#i-didnt-see-any-logs&#34;&gt;I didn’t see any logs!&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klogging/klogging/main/#using-snapshot-builds&#34;&gt;Using snapshot builds&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klogging/klogging/main/#why-another-logging-library&#34;&gt;Why another logging library?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klogging/klogging/main/#why-not-logback-or-log4j&#34;&gt;Why not Logback or Log4j?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klogging/klogging/main/#why-not-kotlinlogging-log4j-kotlin-etc&#34;&gt;Why not KotlinLogging, Log4j Kotlin, etc.?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide a familiar logging experience for Java and C# developers.&lt;/li&gt; &#xA; &lt;li&gt;Create structured log events by default.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://messagetemplates.org&#34;&gt;message templates&lt;/a&gt; for simple logging of both text and data.&lt;/li&gt; &#xA; &lt;li&gt;Use Kotlin coroutines for carrying scope context information to include in log events and for asynchronous dispatching of events.&lt;/li&gt; &#xA; &lt;li&gt;Finest possible resolution of timestamps, down to nanosecond if available.&lt;/li&gt; &#xA; &lt;li&gt;(Future) Pure Kotlin multiplatform. &lt;em&gt;Current development focuses on the JVM.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start (JVM)&lt;/h2&gt; &#xA;&lt;p&gt;Klogging supports JVM versions 8 and above, and Kotlin versions 1.6 and above.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Include Klogging in your project with Gradle:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;io.klogging:klogging-jvm:0.5.7&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or Maven:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;io.klogging&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;klogging-jvm&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;0.5.7&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure logging early in your program startup using the configuration DSL. For simple logging to the console at INFO or higher level (more severe):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun main() = runBlocking {&#xA;    loggingConfiguration { ANSI_CONSOLE() }&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;logger&lt;/code&gt; attribute for a class, for example by using the &lt;code&gt;Klogging&lt;/code&gt; interface for logging inside coroutines:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class ImportantStuff : Klogging {&#xA;    suspend fun cleverAction(runId: String, input: String) = coroutineScope {&#xA;        launch(logContext(&#34;runId&#34; to runId)) {&#xA;            logger.info { &#34;cleverAction using $input&#34; }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or by using the &lt;code&gt;NoCoLogging&lt;/code&gt; interface for logging outside coroutines:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class OtherStuff : NoCologging {&#xA;    fun funkyAction(input: String) {&#xA;        logger.info { &#34;funkyAction using $input&#34; }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These examples both call the &lt;code&gt;logger.info&lt;/code&gt; function with a lambda whose value is only evaluated if &lt;code&gt;logger&lt;/code&gt; is currently configured to log at &lt;code&gt;INFO&lt;/code&gt; level or higher.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;I didn’t see any logs!&lt;/h3&gt; &#xA;&lt;p&gt;If you try out Klogging in a simple command-line program you might not see all the log messages you expect to see. This example will not show the log message on the console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;suspend fun main() = coroutineScope {&#xA;    loggingConfiguration { ANSI_CONSOLE() }&#xA;    val logger = logger(&#34;main&#34;)&#xA;    logger.info(&#34;Hello, world!&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Klogging works asynchronously and the program completes before log events can be sent. In this case you can add a coroutine delay or thread sleep before the program completes, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;suspend fun main() = coroutineScope {&#xA;    loggingConfiguration { ANSI_CONSOLE() }&#xA;    val logger = logger(&#34;main&#34;)&#xA;    logger.info(&#34;Hello, world!&#34;)&#xA;    delay(50)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can specify that log events with severity above a certain level are sent directly instead of via coroutine channels:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;suspend fun main() = coroutineScope {&#xA;    loggingConfiguration {&#xA;        ANSI_CONSOLE()&#xA;        minDirectLogLevel(Level.INFO)&#xA;    }&#xA;    val logger = logger(&#34;main&#34;)&#xA;    logger.info(&#34;Hello, world!&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://klogging.io/docs/concepts/direct-logging&#34;&gt;Direct logging&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Klogging is designed primarily for long-running services and applications.&lt;/p&gt; &#xA; &lt;p&gt;I don’t know a reliable way to trap application shutdown and ensure all logs are sent before shutdown proceeds. &lt;a href=&#34;mailto:info@klogging.io&#34;&gt;Let me know if you do&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Using snapshot builds&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use the latest snapshot builds, specify these in your &lt;code&gt;build.gradle.kts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;    // ...&#xA;    maven (&#34;https://s01.oss.sonatype.org/content/repositories/snapshots/&#34;)&#xA;}&#xA;&#xA;dependencies {&#xA;    // ...&#xA;    implementation(&#34;io.klogging:klogging-jvm:0.6.0-SNAPSHOT&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why another logging library?&lt;/h2&gt; &#xA;&lt;p&gt;Klogging is designed from the ground up to be standalone, pure Kotlin and to be used with coroutines.&lt;/p&gt; &#xA;&lt;p&gt;I could not find a logging library for Kotlin that meets these requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Send structured log events by default.&lt;/li&gt; &#xA; &lt;li&gt;Simple, reliable capture and logging of information from the current execution scope.&lt;/li&gt; &#xA; &lt;li&gt;High-resolution timestamps to ensure log events are aggregated in the correct order.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why not Logback or Log4j?&lt;/h3&gt; &#xA;&lt;p&gt;These solid, but venerable Java libraries have formed the backbone of Java logging for more than 10 years. The limitations I find are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;They are designed to log strings of text. When you want to search for or filter logs by values within those messages you need to search within, or parse the strings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are add-ons for including structured data in logs, for example &lt;a href=&#34;https://github.com/logstash/logstash-logback-encoder&#34;&gt;Logstash Logback Encoder&lt;/a&gt;, but they feel clumsy to use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MDC&lt;/strong&gt; (SLF4J/Logback) and &lt;strong&gt;ThreadContext&lt;/strong&gt; (Log4j2) provide storage for context information but scopes are independent of thread lifecycles and need to be managed separately.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Logback is hamstrung by having timestamp resolution limited to milliseconds. This limit is baked in to the &lt;a href=&#34;https://github.com/qos-ch/logback/raw/a154cd1b564d436c90a26b8cb1a2e8ffff0a4a47/logback-classic/src/main/java/ch/qos/logback/classic/spi/ILoggingEvent.java#L83&#34;&gt;core of the library&lt;/a&gt;: that &lt;code&gt;long&lt;/code&gt; value is milliseconds since the Unix Epoch.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why not KotlinLogging, Log4j Kotlin, etc.?&lt;/h3&gt; &#xA;&lt;p&gt;These libraries (mostly) wrap underlying Java libraries and suffer from the same limitations.&lt;/p&gt;</summary>
  </entry>
</feed>