<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-02T01:39:12Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sahaj-nano/nano-demo-calculator-app</title>
    <updated>2023-06-02T01:39:12Z</updated>
    <id>tag:github.com,2023-06-02:/sahaj-nano/nano-demo-calculator-app</id>
    <link href="https://github.com/sahaj-nano/nano-demo-calculator-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Demo app to test and get used to the demo envrionment&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://nano.sahaj.ai/logo.png&#34; width=&#34;320&#34; height=&#34;162&#34; altText=&#34;Logo&#34; title=&#34;NaN(O) logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What is NaN(O)&lt;/h2&gt; &#xA;&lt;p&gt;At Sahaj, tech consultants operate at the intersection between engineering and art. Simply put, they are artisans who take on complex engineering problems in the software industry across a wide spectrum of domains. Their work is deeply rooted in first principles thinking - asking fundamental questions to dissect and understand a problem which eventually leads to one-of-a-kind solutions, each as distinct as a fingerprint.&lt;/p&gt; &#xA;&lt;p&gt;Through NaN(O), a coding event driven by Sahaj across multiple colleges in India, they want to instil a culture of applying first principles thinking to a problem statement.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Problem statement&lt;/h2&gt; &#xA;&lt;p&gt;This is a &lt;strong&gt;demo repository&lt;/strong&gt; for a test taker to get a feel of how the testing on the system works and how to submit a successful solution. The actual problem employees similar testing strategies.&lt;/p&gt; &#xA;&lt;p&gt;The problem statement is to create an actual calculator with a couple of endpoints. The structure of request response has been shared with the user.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;API contract&lt;/h4&gt; &#xA;&lt;h5&gt;GET /caluclator/greeting&lt;/h5&gt; &#xA;&lt;p&gt;Checks whether the service is available.&lt;/p&gt; &#xA;&lt;h6&gt;Response&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Code: 200&lt;/li&gt; &#xA; &lt;li&gt;Content: &lt;code&gt;Hello world!&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;POST /calculator/add&lt;/h5&gt; &#xA;&lt;p&gt;Adds two given numbers&lt;/p&gt; &#xA;&lt;h6&gt;Request &amp;amp; Response headers&lt;/h6&gt; &#xA;&lt;p&gt;Content-Type: application/json&lt;/p&gt; &#xA;&lt;h6&gt;Body&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code&gt;{  &#xA;    first: number,&#xA;    second: number &#xA;}  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Success Response&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Status code: 200&lt;/li&gt; &#xA; &lt;li&gt;Content: &lt;code&gt;{ result: result-of-the-summation }&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;POST /calculator/subtract&lt;/h5&gt; &#xA;&lt;p&gt;Subtracts two given numbers&lt;/p&gt; &#xA;&lt;h6&gt;Request &amp;amp; Response headers&lt;/h6&gt; &#xA;&lt;p&gt;Content-Type: application/json&lt;/p&gt; &#xA;&lt;h6&gt;Body&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code&gt;{  &#xA;    first: number,&#xA;    second: number&#xA;}  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Success Response&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Status code: 200&lt;/li&gt; &#xA; &lt;li&gt;Content: &lt;code&gt;{ result: result-of-the-subtraction }&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;How to submit a solution&lt;/h6&gt; &#xA;&lt;p&gt;In order to submit a solution, follow these steps.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the &lt;strong&gt;nano-demo-calculator-app&lt;/strong&gt; repository (&lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/fork-a-repo&#34;&gt;How to fork a repository github&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Deselect the &#34;Copy the main branch only&#34; to copy other language demos as well&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clone the forked repository (&lt;a href=&#34;https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository&#34;&gt;How to clone a repository github&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Change the branch according to the language of your choice (This demo is available in (language-&amp;gt; branch) &#34;kotlin&#34;-&amp;gt; main, &#34;node&#34; -&amp;gt; &#34;node&#34;, &#34;python&#34; -&amp;gt; &#34;python&#34;, &#34;cpp&#34; -&amp;gt; &#34;cpp&#34; ) (&lt;a href=&#34;https://www.freecodecamp.org/news/git-switch-branch/&#34;&gt;How to change branches git &lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Enable workflows in your github fork (Under the actions tab -&amp;gt; Select &#34;I understand my workflows, go ahead and enable them&#34; to enable the test workflow)&lt;/li&gt; &#xA; &lt;li&gt;Use your favourite editor to make changes&lt;/li&gt; &#xA; &lt;li&gt;Create a commit after testing it locally (&lt;a href=&#34;https://github.com/git-guides/git-commit&#34;&gt;How to commit git&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push the commit to the remote &lt;strong&gt;to the same branch&lt;/strong&gt; (github repo) (&lt;a href=&#34;https://docs.github.com/en/get-started/using-git/pushing-commits-to-a-remote-repository&#34;&gt;How to push git&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;If all your changes work well, you will see a green tick on the actions section on your repo under the selected branch (&lt;a href=&#34;https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/viewing-workflow-run-history&#34;&gt;How to see last run action&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If it&#39;s a cross mark, the logs will tell you what you did wrong.&lt;/li&gt; &#xA;   &lt;li&gt;Fix the issue, and repeat steps 4+ to resubmit&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Congratulations, you have successfully solved the dummy problem and are ready for the actual event.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Hint&lt;/h6&gt; &#xA;&lt;p&gt;An actual solution is present in one of the commits. If you revert the commit with the message &#34;Remove actual answers&#34;, you should be able to get to a working solution&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cczhr/OTGLocation</title>
    <updated>2023-06-02T01:39:12Z</updated>
    <id>tag:github.com,2023-06-02:/cczhr/OTGLocation</id>
    <link href="https://github.com/cczhr/OTGLocation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Using Android device to modify iPhone location&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OTGLocation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cczhr/OTGLocation/issues/17&#34;&gt;开发者驱动下载&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/cczhr/OTGLocation/issues/19&#34;&gt;ios16+用户请查看&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;tips:代码内涉及地图的key均做了签名调用限制，别有用心的人不需要尝试了。&lt;/p&gt; &#xA;&lt;p&gt;This project is based on the &lt;a href=&#34;https://github.com/libimobiledevice&#34;&gt;libimobiledevice&lt;/a&gt; open source library development, and realizes that the Android device OTG can modify the longitude and latitude of the iPhone after connecting to the iPhone.&lt;/p&gt; &#xA;&lt;p&gt;If you need the executable files and library files transplanted from &lt;a href=&#34;https://github.com/libimobiledevice&#34;&gt;libimobiledevice&lt;/a&gt; open source project to Android platform, you can go to &lt;a href=&#34;https://github.com/cczhr/libimobiledevice_android&#34;&gt;libimobiledevice_android&lt;/a&gt; to view them. I compiled some of them&lt;/p&gt; &#xA;&lt;p&gt;Location selection support Amap and Google map&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1MZ4y1P7K3&#34;&gt;Operation video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;本项目基于&lt;a href=&#34;https://github.com/libimobiledevice&#34;&gt;libimobiledevice&lt;/a&gt;开源项目开发，实现了Android设备OTG连接iPhone后，可以修改iPhone的经纬度的功能。&lt;/p&gt; &#xA;&lt;p&gt;如果你需要 &lt;a href=&#34;https://github.com/libimobiledevice&#34;&gt;libimobiledevice&lt;/a&gt; 开源项目移植到Android平台的可执行文件和库文件可以到 &lt;a href=&#34;https://github.com/cczhr/libimobiledevice_android&#34;&gt;libimobiledevice_android&lt;/a&gt;查看，我编译了部分。&lt;/p&gt; &#xA;&lt;p&gt;位置选择支持高德地图以及谷歌地图&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1MZ4y1P7K3&#34;&gt;演示视频&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cczhr/OTGLocation/master/pic/1.jpg&#34; width=&#34;30%&#34; height=&#34;30%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cczhr/OTGLocation/master/pic/2.jpg&#34; width=&#34;30%&#34; height=&#34;30%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cczhr/OTGLocation/master/pic/3.jpg&#34; width=&#34;30%&#34; height=&#34;30%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cczhr/OTGLocation/master/pic/4.jpg&#34; width=&#34;30%&#34; height=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;大佬请我喝快乐水专用码╭(●`∀´●)╯&lt;/p&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cczhr/OTGLocation/master/pic/wechat.jpg&#34; width=&#34;20%&#34; height=&#34;20%&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This library and utilities are licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;GNU General Public License v3.0&lt;/a&gt;, also included in the repository in the &lt;code&gt;COPYING.GPLv3&lt;/code&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>