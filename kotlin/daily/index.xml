<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-17T01:45:58Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>revanced/revanced-cli</title>
    <updated>2022-06-17T01:45:58Z</updated>
    <id>tag:github.com,2022-06-17:/revanced/revanced-cli</id>
    <link href="https://github.com/revanced/revanced-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üíª Command line application as an alternative to the ReVanced Manager&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>raamcosta/compose-destinations</title>
    <updated>2022-06-17T01:45:58Z</updated>
    <id>tag:github.com,2022-06-17:/raamcosta/compose-destinations</id>
    <link href="https://github.com/raamcosta/compose-destinations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Annotation processing library for type-safe Jetpack Compose navigation with no boilerplate.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/io.github.raamcosta.compose-destinations/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-metadata/v?color=blue&amp;amp;metadataUrl=https://s01.oss.sonatype.org/service/local/repo_groups/public/content/io/github/raamcosta/compose-destinations/core/maven-metadata.xml&amp;amp;style=for-the-badge&#34; alt=&#34;Maven metadata URL&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/raamcosta/compose-destinations.svg?style=for-the-badge&amp;amp;color=orange&#34; alt=&#34;License Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/api-21%2B-brightgreen.svg?style=for-the-badge&#34; alt=&#34;Android API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/top/raamcosta/compose-destinations.svg?style=for-the-badge&amp;amp;color=blueviolet&#34; alt=&#34;kotlin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;250&#34; src=&#34;https://user-images.githubusercontent.com/80427734/147891822-5cd34c80-8dca-4d34-8278-2aa3bf36913f.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz&#34;&gt;Compose Destinations&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt;A KSP library that processes annotations and generates code that uses Official Jetpack Compose Navigation under the hood. It hides the complex, non-type-safe and boilerplate code you would have to write otherwise. &lt;br&gt; No need to learn a whole new framework to navigate - most APIs are either the same as with the Jetpack Components or inspired by them.&lt;/p&gt; &#xA;&lt;h3&gt;Main features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Typesafe navigation arguments&lt;/li&gt; &#xA; &lt;li&gt;Simple but configurable navigation graphs setup&lt;/li&gt; &#xA; &lt;li&gt;Navigating back with a result in a simple and type-safe way&lt;/li&gt; &#xA; &lt;li&gt;Getting the navigation arguments from the &lt;code&gt;SavedStateHandle&lt;/code&gt; (useful in ViewModels) and &lt;code&gt;NavBackStackEntry&lt;/code&gt; in a type-safe way.&lt;/li&gt; &#xA; &lt;li&gt;Navigation animations through integration with &lt;a href=&#34;https://github.com/google/accompanist/tree/main/navigation-animation&#34;&gt;Accompanist Navigation-Animation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bottom sheet screens through integration with &lt;a href=&#34;https://github.com/google/accompanist/tree/main/navigation-material&#34;&gt;Accompanist Navigation-Material&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Easy deep linking to screens&lt;/li&gt; &#xA; &lt;li&gt;All you can do with Official Jetpack Compose Navigation but in a simpler safer way!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a deeper look into all the features, check our &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz&#34;&gt;documentation website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Materials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Philipp Lackner&#39;s Youtube video &lt;a href=&#34;https://www.youtube.com/watch?v=Q3iZyW2etm4&#34;&gt;&lt;em&gt;Compose Navigation Just Got SO MUCH EASIER&lt;/em&gt; üò±&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rafael Costa&#39;s blog post &lt;a href=&#34;https://proandroiddev.com/compose-destinations-simpler-and-safer-navigation-in-compose-with-no-compromises-74a59c6b727d&#34;&gt;&lt;em&gt;Compose Destinations: simpler and safer navigation in Compose with no compromises&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Yanneck Rei√ü&#39;s blog post &lt;a href=&#34;https://medium.com/codex/type-save-navigation-with-jetpack-compose-destinations-610514e85370&#34;&gt;&lt;em&gt;Type Safe Navigation With Jetpack Compose Destinations&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google Dev Expert Kenji Abe&#39;s blog post &lt;a href=&#34;https://star-zero.medium.com/navigation-compose%E3%82%92%E4%BE%BF%E5%88%A9%E3%81%AB%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%E3%82%8B%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA-c2d0133b3e84&#34;&gt;&lt;em&gt;Navigation Compose„Çí‰æøÂà©„Å´„Åó„Å¶„Åè„Çå„Çã„É©„Ç§„Éñ„É©„É™&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;aseem wangoo&#39;s blog post (and Youtube video inside): &lt;a href=&#34;https://flatteredwithflutter.com/using-compose-destinations%ef%bf%bc/&#34;&gt;&lt;em&gt;Using compose destinations&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Annotate your screen Composables with &lt;code&gt;@Destination&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Destination&#xA;@Composable&#xA;fun ProfileScreen() { /*...*/ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add navigation arguments to the function declaration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Destination&#xA;@Composable&#xA;fun ProfileScreen(&#xA;   id: Int, // &amp;lt;-- required navigation argument&#xA;   groupName: String?, // &amp;lt;-- optional navigation argument&#xA;   isOwnUser: Boolean = false // &amp;lt;-- optional navigation argument&#xA;) { /*...*/ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Parcelable&lt;/code&gt;, &lt;code&gt;Serializable&lt;/code&gt;, &lt;code&gt;Enum&lt;/code&gt; and classes annotated with &lt;a href=&#34;https://github.com/Kotlin/kotlinx.serialization&#34;&gt;&lt;code&gt;@kotlinx.serialization.Serializable&lt;/code&gt;&lt;/a&gt; (as well as &lt;code&gt;Array&lt;/code&gt;s and &lt;code&gt;ArrayList&lt;/code&gt;s of these) work out of the box! You can also make any other type a navigation argument type. Read about it &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz/destination-arguments/navigation-arguments#custom-navigation-argument-types&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There is an alternative way to define the destination arguments in case you don&#39;t need to use them inside the Composable (as is likely the case when using ViewModel). Read more &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz/destination-arguments/navigation-arguments#navigation-arguments-class-delegate&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project (or &lt;code&gt;./gradlew kspDebugKotlin&lt;/code&gt;, which should be faster) to generate all the Destinations. With the above annotated composable, a &lt;code&gt;ProfileScreenDestination&lt;/code&gt; file (that we&#39;ll use in step 4) would be generated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the generated &lt;code&gt;[ComposableName]Destination&lt;/code&gt; invoke method to navigate to it. It will have the correct typed arguments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@RootNavGraph(start = true) // sets this as the start destination of the default nav graph&#xA;@Destination&#xA;@Composable&#xA;fun HomeScreen(&#xA;   navigator: DestinationsNavigator&#xA;) {&#xA;   /*...*/&#xA;   navigator.navigate(ProfileScreenDestination(id = 7, groupName = &#34;Kotlin programmers&#34;))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;DestinationsNavigator is a wrapper interface to NavController that if declared as a parameter, will be provided for free by the library. NavController can also be provided in the exact same way, but it ties your composables to a specific implementation which will make it harder to test and preview. Read more &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz/navigation/basics#destinationsnavigator-vs-navcontroller&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Finally, add the NavHost call:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;DestinationsNavHost(navGraph = NavGraphs.root)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;NavGraphs&lt;/code&gt; is a generated file that describes your navigation graphs and their destinations. By default all destinations will belong to &#34;root&#34; (@RootNavGraph), but you can create your own nav graphs annotations to have certain screens in other navigation graphs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This call adds all annotated Composable functions as destinations of the Navigation Host.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it! No need to worry about routes, &lt;code&gt;NavType&lt;/code&gt;, bundles and strings. All that redundant and error-prone code gets generated for you.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Compose destinations is available via maven central.&lt;/p&gt; &#xA;&lt;h4&gt;1. Add the KSP plugin:&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è The version you chose for the KSP plugin depends on the Kotlin version your project uses. &lt;br&gt; You can check &lt;a href=&#34;https://github.com/google/ksp/releases&#34;&gt;https://github.com/google/ksp/releases&lt;/a&gt; for the list of KSP versions, then pick the last release that matches your Kotlin version. Example: If you&#39;re using &lt;code&gt;1.6.21&lt;/code&gt; Kotlin version, then the last KSP version is &lt;code&gt;1.6.21-1.0.6&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;groovy - build.gradle(:module-name)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;plugins {&#xA;    //...&#xA;    id &#39;com.google.devtools.ksp&#39; version &#39;1.6.21-1.0.6&#39; // Depends on your kotlin version&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;kotlin - build.gradle.kts(:module-name)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;plugins {&#xA;    //...&#xA;    id(&#34;com.google.devtools.ksp&#34;) version &#34;1.6.21-1.0.6&#34; // Depends on your kotlin version&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;2. Add the dependencies:&lt;/h4&gt; &#xA;&lt;p&gt;Compose Destinations has two active versions. One uses only stable Compose dependencies and the other uses the latest versions. Choose the one that matches your Compose version, looking at this table:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compose 1.1 (1.1.x)&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img alt=&#34;Maven Central&#34; src=&#34;https://img.shields.io/maven-metadata/v?versionPrefix=1.5&amp;amp;color=blue&amp;amp;metadataUrl=https://s01.oss.sonatype.org/service/local/repo_groups/public/content/io/github/raamcosta/compose-destinations/core/maven-metadata.xml&amp;amp;style=for-the-badge)%5D(https://maven-badges.herokuapp.com/maven-central/io.github.raamcosta.compose-destinations/core)&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compose 1.2 (1.2.x)&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img alt=&#34;Maven Central&#34; src=&#34;https://img.shields.io/maven-metadata/v?versionPrefix=1.6&amp;amp;color=blue&amp;amp;metadataUrl=https://s01.oss.sonatype.org/service/local/repo_groups/public/content/io/github/raamcosta/compose-destinations/core/maven-metadata.xml&amp;amp;style=for-the-badge)%5D(https://maven-badges.herokuapp.com/maven-central/io.github.raamcosta.compose-destinations/core)&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è If you choose a version that uses Compose with a higher version then the one you&#39;re setting for your app, gradle will upgrade your Compose version via transitive dependency.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;groovy - build.gradle(:module-name)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;implementation &#39;io.github.raamcosta.compose-destinations:core:&amp;lt;version&amp;gt;&#39;&#xA;ksp &#39;io.github.raamcosta.compose-destinations:ksp:&amp;lt;version&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;kotlin - build.gradle.kts(:module-name)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;implementation(&#34;io.github.raamcosta.compose-destinations:core:&amp;lt;version&amp;gt;&#34;)&#xA;ksp(&#34;io.github.raamcosta.compose-destinations:ksp:&amp;lt;version&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è If you want to use animations between screens and/or bottom sheet screens, replace above core dependency with: &lt;br&gt; &lt;code&gt;implementation &#39;io.github.raamcosta.compose-destinations:animations-core:&amp;lt;version&amp;gt;&#39;&lt;/code&gt; &lt;br&gt; this will use &lt;a href=&#34;https://github.com/google/accompanist/tree/main/navigation-animation&#34;&gt;Accompanist Navigation-Animation&lt;/a&gt; and &lt;a href=&#34;https://github.com/google/accompanist/tree/main/navigation-material&#34;&gt;Accompanist Navigation-Material&lt;/a&gt; internally. &lt;br&gt; Read more about the next steps to configure these features &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz/styles-and-animations&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;3. And finally, you need to make sure the IDE looks at the generated folder.&lt;/h4&gt; &#xA;&lt;p&gt;See KSP related &lt;a href=&#34;https://github.com/google/ksp/issues/37&#34;&gt;issue&lt;/a&gt;.&lt;br&gt; Here is an example of how to do that for all your build variants (inside &lt;code&gt;android&lt;/code&gt; block):&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è Replace &lt;code&gt;applicationVariants&lt;/code&gt; with &lt;code&gt;libraryVariants&lt;/code&gt; if the module uses &lt;code&gt;&#39;com.android.library&#39;&lt;/code&gt; plugin!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;groovy - build.gradle(:module-name)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;applicationVariants.all { variant -&amp;gt;&#xA;    kotlin.sourceSets {&#xA;        getByName(variant.name) {&#xA;            kotlin.srcDir(&#34;build/generated/ksp/${variant.name}/kotlin&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;kotlin - build.gradle.kts(:module-name)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;applicationVariants.all {&#xA;    kotlin.sourceSets {&#xA;        getByName(name) {&#xA;            kotlin.srcDir(&#34;build/generated/ksp/$name/kotlin&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;The library is now in its beta stage, which means that I am happy with the core feature set. If the APIs change, I will provide a migration path. Please do try it and open issues if you find any. If you&#39;re interested in contributing, reach out via &lt;a href=&#34;https://twitter.com/raamcosta&#34;&gt;twitter DM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any feedback and contributions are highly appreciated!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you like the library, consider starring and sharing it with your colleagues.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pinterest/ktlint</title>
    <updated>2022-06-17T01:45:58Z</updated>
    <id>tag:github.com,2022-06-17:/pinterest/ktlint</id>
    <link href="https://github.com/pinterest/ktlint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An anti-bikeshedding Kotlin linter with built-in formatter&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://ktlint.github.io/&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/370176/26518284/38b680da-4262-11e7-8d27-2b9e849fb55f.png&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://kotlinlang.slack.com/messages/CKS3XG0LS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-@kotlinlang/ktlint-yellow.svg?logo=slack&#34; alt=&#34;Join the chat at https://kotlinlang.slack.com&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pinterest/ktlint/actions?query=workflow%3A%22Snapshot+Publish%22&#34;&gt;&lt;img src=&#34;https://github.com/pinterest/ktlint/workflows/Snapshot%20Publish/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.pinterest%22%20AND%20a%3A%22ktlint%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.pinterest/ktlint.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ktlint.github.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-%E2%9D%A4-FF4081.svg?sanitize=true&#34; alt=&#34;ktlint&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt; linter in spirit of &lt;a href=&#34;https://github.com/feross/standard&#34;&gt;feross/standard&lt;/a&gt; (JavaScript) and &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34;&gt;gofmt&lt;/a&gt; (Go). &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No configuration.&lt;/strong&gt;&lt;a href=&#34;https://github.com/pinterest/ktlint#how-do-i-globally-disable-a-rule&#34;&gt;*&lt;/a&gt; Which means no decisions to make, nothing to argue about and no special files to manage.&lt;br&gt; While this might sound extreme, keep in mind that &lt;code&gt;ktlint&lt;/code&gt; tries to capture (reflect) &lt;strong&gt;official code style&lt;/strong&gt;&lt;a href=&#34;https://github.com/pinterest/ktlint/issues/284#issuecomment-425177186&#34;&gt;*&lt;/a&gt; from &lt;a href=&#34;https://kotlinlang.org/docs/reference/coding-conventions.html&#34;&gt;kotlinlang.org&lt;/a&gt; and &lt;a href=&#34;https://android.github.io/kotlin-guides/style.html&#34;&gt;Android Kotlin Style Guide&lt;/a&gt; (+ &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#editorconfig&#34;&gt;we respect your .editorconfig&lt;/a&gt; and support additional &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#creating-a-ruleset&#34;&gt;ruleset&lt;/a&gt;|s).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Built-in formatter.&lt;/strong&gt; So that you wouldn&#39;t have to fix all style violations by hand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable output.&lt;/strong&gt; &lt;code&gt;plain&lt;/code&gt; (+ &lt;code&gt;plain?group_by_file&lt;/code&gt;), &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;checkstyle&lt;/code&gt; reporters are available out-of-the-box. It&#39;s also &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#creating-a-reporter&#34;&gt;easy to create your own&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A single executable jar with all dependencies included.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#installation&#34;&gt;Installation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#command-line-usage&#34;&gt;Usage&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#integration&#34;&gt;Integration&lt;/a&gt; with &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#-with-maven&#34;&gt;Maven&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#-with-gradle&#34;&gt;Gradle&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#-with-intellij-idea&#34;&gt;IntelliJ IDEA&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#-with-gnu-emacs&#34;&gt;Emacs&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#-with-continuous-integration&#34;&gt;Continuous Integration&lt;/a&gt; | Creating &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#creating-a-ruleset&#34;&gt;a ruleset&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#creating-a-reporter&#34;&gt;a reporter&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#badge&#34;&gt;Badge&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#faq&#34;&gt;FAQ&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Standard rules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;annotation&lt;/code&gt;: Annotation formatting - multiple annotations should be on a separate line than the annotated declaration; annotations with parameters should each be on separate lines; annotations should be followed by a space&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;argument-list-wrapping&lt;/code&gt;: Argument list wrapping&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;chain-wrapping&lt;/code&gt;: When wrapping chained calls &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;?.&lt;/code&gt; and &lt;code&gt;?:&lt;/code&gt; should be placed on the next line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;comment-spacing&lt;/code&gt;: The end of line comment sign &lt;code&gt;//&lt;/code&gt; should be preceded and followed by exactly a space&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enum-entry-name-case&lt;/code&gt;: Enum entry names should be uppercase underscore-separated names&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filename&lt;/code&gt;: Files containing only one toplevel domain should be named according to that element.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;final-newline&lt;/code&gt;: Newline at the end of each file (enabled by default) (set &lt;code&gt;insert_final_newline=false&lt;/code&gt; in .editorconfig to disable (see &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#editorconfig&#34;&gt;EditorConfig&lt;/a&gt; section for more)).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;import-ordering&lt;/code&gt;: Imports ordered consistently (see &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#custom-ktlint-specific-editorconfig-properties&#34;&gt;Custom ktlint EditorConfig properties&lt;/a&gt; for more)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent&lt;/code&gt;: Indentation formatting - respects &lt;code&gt;.editorconfig&lt;/code&gt; &lt;code&gt;indent_size&lt;/code&gt; with no continuation indent (see &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#editorconfig&#34;&gt;EditorConfig&lt;/a&gt; section for more)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max-line-length&lt;/code&gt;: Ensures that lines do not exceed the given length of &lt;code&gt;.editorconfig&lt;/code&gt; property &lt;code&gt;max_line_length&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#editorconfig&#34;&gt;EditorConfig&lt;/a&gt; section for more). This rule does not apply in a number of situations. For example, in the case a line exceeds the maximum line length due to and comment that disables ktlint rules than that comment is being ignored when validating the length of the line. The &lt;code&gt;.editorconfig&lt;/code&gt; property &lt;code&gt;ktlint_ignore_back_ticked_identifier&lt;/code&gt; can be set to ignore identifiers which are enclosed in backticks, which for example is very useful when you want to allow longer names for unit tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;modifier-order&lt;/code&gt;: Consistent order of modifiers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;multiline-if-else&lt;/code&gt;: Braces required for multiline if/else statements&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-blank-line-before-rbrace&lt;/code&gt;: No blank lines before &lt;code&gt;}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-blank-lines-in-chained-method-calls&lt;/code&gt;: No blank lines in chained method expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-consecutive-blank-lines&lt;/code&gt;: No consecutive blank lines&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-empty-class-body&lt;/code&gt;: No empty (&lt;code&gt;{}&lt;/code&gt;) class bodies&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-empty-first-line-in-method-block&lt;/code&gt;: No leading empty lines in method blocks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-line-break-after-else&lt;/code&gt;: Disallows line breaks after the else keyword if that could lead to confusion, for example: &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;if (conditionA()) {&#xA;    doSomething()&#xA;} else&#xA;if (conditionB()) {&#xA;    doAnotherThing()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-line-break-before-assignment&lt;/code&gt;: When a line is broken at an assignment (&lt;code&gt;=&lt;/code&gt;) operator the break comes after the symbol&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-multi-spaces&lt;/code&gt;: Except in indentation and in KDoc&#39;s it is not allowed to have multiple consecutive spaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-semi&lt;/code&gt;: No semicolons (unless used to separate multiple statements on the same line)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-trailing-spaces&lt;/code&gt;: No trailing whitespaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-unit-return&lt;/code&gt;: No &lt;code&gt;Unit&lt;/code&gt; returns (&lt;code&gt;fun fn {}&lt;/code&gt; instead of &lt;code&gt;fun fn: Unit {}&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-unused-imports&lt;/code&gt;: No unused &lt;code&gt;import&lt;/code&gt;s&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;no-wildcard-imports&lt;/code&gt;: No wildcard &lt;code&gt;import&lt;/code&gt;s expect imports listed in &lt;code&gt;.editorconfig&lt;/code&gt; property &lt;code&gt;ij_kotlin_packages_to_use_import_on_demand&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;package-name&lt;/code&gt;: No underscores in package names&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parameter-list-wrapping&lt;/code&gt;: When class/function signature doesn&#39;t fit on a single line, each parameter must be on a separate line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;string-template&lt;/code&gt;: Consistent string templates (&lt;code&gt;$v&lt;/code&gt; instead of &lt;code&gt;${v}&lt;/code&gt;, &lt;code&gt;${p.v}&lt;/code&gt; instead of &lt;code&gt;${p.v.toString()}&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Spacing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;annotation-spacing&lt;/code&gt;: Annotations should be separated by a single line break&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;colon-spacing&lt;/code&gt;: Consistent spacing around colon&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;comma-spacing&lt;/code&gt;: Consistent spacing around comma&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;curly-spacing&lt;/code&gt;: Consistent spacing around curly braces&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dot-spacing&lt;/code&gt;: Consistent spacing around dots&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;double-colon-spacing&lt;/code&gt;: No spaces around &lt;code&gt;::&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keyword-spacing&lt;/code&gt;: Consistent spacing around keywords&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;op-spacing&lt;/code&gt;: Consistent spacing around operators&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;paren-spacing&lt;/code&gt;: Consistent spacing around parenthesis&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;range-spacing&lt;/code&gt;: Consistent spacing around range operators&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spacing-around-angle-brackets&lt;/code&gt;: No spaces around angle brackets&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spacing-between-declarations-with-annotations&lt;/code&gt;: Declarations with annotations should be separated by a blank line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spacing-between-declarations-with-comments&lt;/code&gt;: Declarations with comments should be separated by a blank line&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unary-op-spacing&lt;/code&gt;: No spaces around unary operators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Experimental rules&lt;/h2&gt; &#xA;&lt;p&gt;New rules will be added into the &lt;a href=&#34;https://github.com/pinterest/ktlint/tree/master/ktlint-ruleset-experimental&#34;&gt;experimental ruleset&lt;/a&gt;, which can be enabled by passing the &lt;code&gt;--experimental&lt;/code&gt; flag to &lt;code&gt;ktlint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:block-comment-initial-star-alignment&lt;/code&gt;: Lines in a block comment which (exclusive the indentation) start with a &lt;code&gt;*&lt;/code&gt; should have this &lt;code&gt;*&lt;/code&gt; aligned with the &lt;code&gt;*&lt;/code&gt; in the opening of the block comment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:discouraged-comment-location&lt;/code&gt;: Detect discouraged comment locations (no autocorrect)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:unnecessary-parentheses-before-trailing-lambda&lt;/code&gt;: An empty parentheses block before a lambda is redundant. For example &lt;code&gt;some-string&#34;.count() { it == &#39;-&#39; }&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;function-signature&lt;/code&gt;: rewrites the function signature to a single line when possible (e.g. when not exceeding the &lt;code&gt;max_line_length&lt;/code&gt; property) or a multiline signature otherwise. In case of function with a body expression, the body expression is placed on the same line as the function signature when not exceeding the &lt;code&gt;max_line_length&lt;/code&gt; property. Optionally the function signature can be forced to be written as a multiline signature in case the function has more than a specified number of parameters (&lt;code&gt;.editorconfig&#39; property &lt;/code&gt;ktlint_function_signature_wrapping_rule_always_with_minimum_parameters`)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Spacing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:fun-keyword-spacing&lt;/code&gt;: Consistent spacing after the fun keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:function-return-type-spacing&lt;/code&gt;: Consistent spacing around the function return type&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:function-start-of-body-spacing&lt;/code&gt;: Consistent spacing before start of function body&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:function-type-reference-spacing&lt;/code&gt;: Consistent spacing in the type reference before a function&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:modifier-list-spacing&lt;/code&gt;: Consistent spacing between modifiers in and after the last modifier in a modifier list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:nullable-type-spacing&lt;/code&gt;: No spaces in a nullable type&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:parameter-list-spacing&lt;/code&gt;: Consistent spacing inside the parameter list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:spacing-between-function-name-and-opening-parenthesis&lt;/code&gt;: Consistent spacing between function name and opening parenthesis&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:type-parameter-list-spacing&lt;/code&gt;: Spacing after a type parameter list in function and class declarations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Wrapping&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:comment-wrapping&lt;/code&gt;: A block comment should start and end on a line that does not contain any other element. A block comment should not be used as end of line comment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental:kdoc-wrapping&lt;/code&gt;: A KDoc comment should start and end on a line that does not contain any other element.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;EditorConfig&lt;/h2&gt; &#xA;&lt;p&gt;Ktlint uses a limited set of &lt;code&gt;.editorconfig&lt;/code&gt; properties for additional configuration. A sensible default value is provided for each property when not explicitly defined. Properties can be overridden, provided they are specified under &lt;code&gt;[*.{kt,kts}]&lt;/code&gt;. Ktlint uses some properties defined by &lt;a href=&#34;https://editorconfig.org/&#34;&gt;.editorconfig&lt;/a&gt;, IntelliJ IDEA and custom properties.&lt;/p&gt; &#xA;&lt;h3&gt;Disable rules&lt;/h3&gt; &#xA;&lt;p&gt;By default, no rules are disabled. The property &lt;code&gt;disabled_rules&lt;/code&gt; holds a comma separated list (without spaces). Rules which are not defined in the &lt;code&gt;standard&lt;/code&gt; ruleset have to be prefixed.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[*.{kt,kts}]&#xA;disabled_rules = some-standard-rule,experimental:some-experimental-rule,my-custom-ruleset:my-custom-rule&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Trailing comma&lt;/h3&gt; &#xA;&lt;p&gt;Trailing comma&#39;s (both on call and declaration site) are disabled (e.g. not allowed) by. When enabling the properties, the trailing becomes mandatory where applicable.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[*.{kt,kts}]&#xA;ij_kotlin_allow_trailing_comma = false&#xA;ij_kotlin_allow_trailing_comma_on_call_site = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Import layouts&lt;/h3&gt; &#xA;&lt;p&gt;By default, the same imports are allowed as in IntelliJ IDEA. The import path can be a full path, e.g. &#34;java.util.List.*&#34; as well as wildcard path, e.g. &#34;kotlin.**&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The layout can be composed by the following symbols:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;*&#34; - wildcard. There must be at least one entry of a single wildcard to match all other imports. Matches anything after a specified symbol/import as well.&lt;/li&gt; &#xA; &lt;li&gt;&#34;|&#34; - blank line. Supports only single blank lines between imports. No blank line is allowed in the beginning or end of the layout.&lt;/li&gt; &#xA; &lt;li&gt;&#34;^&#34; - alias import, e.g. &#34;^android.*&#34; will match all android alias imports, &#34;^&#34; will match all other alias imports.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;ij_kotlin_imports_layout=* # alphabetical with capital letters before lower case letters (e.g. Z before a), no blank lines&#xA;ij_kotlin_imports_layout=*,java.**,javax.**,kotlin.**,^ # default IntelliJ IDEA style, same as alphabetical, but with &#34;java&#34;, &#34;javax&#34;, &#34;kotlin&#34; and alias imports in the end of the imports list&#xA;ij_kotlin_imports_layout=android.**,|,^org.junit.**,kotlin.io.Closeable.*,|,*,^ # custom imports layout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wildcard imports can be allowed for specific import paths (Comma-separated list, use &#34;**&#34; as wildcard for package and all subpackages). This setting overrides the no-wildcard-imports rule. This setting is best be used for allowing wildcard imports from libraries like Ktor where extension functions are used in a way that creates a lot of imports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[*.{kt,kts}]&#xA;ij_kotlin_packages_to_use_import_on_demand = java.util.*,kotlinx.android.synthetic.**&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Indent&lt;/h3&gt; &#xA;&lt;p&gt;By default, indenting is done with 4 spaces per indent level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[*.{kt,kts}]&#xA;indent_size = 4 # possible values: number (e.g. 2), &#34;unset&#34; (makes ktlint ignore indentation completely)  &#xA;indent_style = space # or &#34;tab&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Final newline&lt;/h3&gt; &#xA;&lt;p&gt;By default, a final newline is required at the end of the file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[*.{kt,kts}]&#xA;insert_final_newline = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Code style&lt;/h3&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;offical&lt;/code&gt; Kotlin code style is applied. Alternatively, the code style can be set to &lt;code&gt;android&lt;/code&gt;. Note that for the Android code style different default values might be applicable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[*.{kt,kts}]&#xA;ktlint_code_style = official # Or &#34;android&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Function signature&lt;/h3&gt; &#xA;&lt;p&gt;By default, the number of parameters in a function signature is not relevant when rewriting the function signature. Only the maximum line length determines when a function signature should be written on a single line or with multiple lines. This setting can be used, to force a multiline function signature in case the function contain at least a number of parameters even in case the function signature would fit on a single line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[*.{kt,kts}]&#xA;ktlint_function_signature_rule_force_multiline_with_at_least_parameters= -1 # -1 to ignore the number of parameters or otherwise a positive number&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ignore identifiers enclosed in backticks&lt;/h3&gt; &#xA;&lt;p&gt;By default, the identifiers enclosed in backticks are not ignored.&lt;/p&gt; &#xA;&lt;p&gt;According to &lt;a href=&#34;https://kotlinlang.org/docs/reference/coding-conventions.html#names-for-test-methods&#34;&gt;https://kotlinlang.org/docs/reference/coding-conventions.html#names-for-test-methods&lt;/a&gt; it is acceptable to write method names in natural language. When using natural language, the description tends to be longer. This property allows lines containing an identifier between backticks to be longer than the maximum line length. (Since 0.41.0)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Test&#xA;fun `Given a test with a very loooooooooooooooooooooong test description`() {&#xA;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[*.{kt,kts}]&#xA;ktlint_ignore_back_ticked_identifier = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Max line length&lt;/h3&gt; &#xA;&lt;p&gt;By default, the maximum line length is not set. The &lt;code&gt;android&lt;/code&gt; code style sets the max line length to 100 (per Android Kotlin Style Guide).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[*.{kt,kts}]&#xA;max_line_length = -1 # Use &#34;off&#34; (or -1) to ignore max line length or a positive number to set max line length&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;IntelliJ IDEA &lt;code&gt;.editorconfig&lt;/code&gt; autoformat issue&lt;/h3&gt; &#xA;&lt;p&gt;Unfortunately &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt; has &lt;code&gt;.editorconfig&lt;/code&gt; &lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-242506&#34;&gt;autoformat issue&lt;/a&gt; that adds additional space into glob statements. For example, &lt;code&gt;[*{kt,kts}]&lt;/code&gt; is formatted into &lt;code&gt;[*{kt, kts}]&lt;/code&gt; (&lt;a href=&#34;https://github.com/pinterest/ktlint/issues/762&#34;&gt;original ktlint issue&lt;/a&gt;). Such behaviour violates &lt;code&gt;.editorconfig&lt;/code&gt; &lt;a href=&#34;https://github.com/editorconfig/editorconfig/issues/148&#34;&gt;specification&lt;/a&gt; and leads to ignoring this section when ktlint is parsing it.&lt;/p&gt; &#xA;&lt;h3&gt;Overriding Editorconfig properties for specific directories&lt;/h3&gt; &#xA;&lt;p&gt;You could &lt;a href=&#34;https://editorconfig.org/#file-format-details&#34;&gt;override&lt;/a&gt; properties for specific directories inside your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[*.{kt,kts}]&#xA;disabled_rules=import-ordering&#xA;&#xA;# Note that in this case &#39;import-ordering&#39; rule will be active and &#39;indent&#39; will be disabled&#xA;[api/*.{kt,kts}]&#xA;disabled_rules=indent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Online demo&lt;/h2&gt; &#xA;&lt;p&gt;You can try &lt;code&gt;ktlint&lt;/code&gt; online &lt;a href=&#34;https://ktlint-demo.herokuapp.com/&#34;&gt;here&lt;/a&gt; using the standard or a custom ruleset without installing it to your PC. &lt;br&gt; To contribute or get more info, please visit the &lt;a href=&#34;https://github.com/akuleshov7/diKTat-demo&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Skip all the way to the &#34;Integration&#34; section if you don&#39;t plan to use &lt;code&gt;ktlint&lt;/code&gt;&#39;s command line interface.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.45.2/ktlint &amp;amp;&amp;amp;&#xA;  chmod a+x ktlint &amp;amp;&amp;amp;&#xA;  sudo mv ktlint /usr/local/bin/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... or just download &lt;code&gt;ktlint&lt;/code&gt; from the &lt;a href=&#34;https://github.com/pinterest/ktlint/releases&#34;&gt;releases&lt;/a&gt; page&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ktlint.asc&lt;/code&gt; contains PGP signature which you can verify with: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Releases up through 0.31.0) &lt;code&gt;curl -sS https://keybase.io/shyiko/pgp_keys.asc | gpg --import &amp;amp;&amp;amp; gpg --verify ktlint.asc&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;(Releases from 0.32.0 on) &lt;code&gt;curl -sS https://keybase.io/ktlint/pgp_keys.asc | gpg --import &amp;amp;&amp;amp; gpg --verify ktlint.asc&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On macOS (&lt;a href=&#34;https://docs.brew.sh/Homebrew-on-Linux&#34;&gt;or Linux&lt;/a&gt;) you can also use &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt; - &lt;code&gt;brew install ktlint&lt;/code&gt; - or &lt;a href=&#34;https://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt; - &lt;code&gt;port install ktlint&lt;/code&gt;. On Arch Linux, you can install &lt;a href=&#34;https://aur.archlinux.org/packages/ktlint/&#34;&gt;ktlint&lt;/a&gt; &lt;sup&gt;AUR&lt;/sup&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you don&#39;t have curl installed - replace &lt;code&gt;curl -sL&lt;/code&gt; with &lt;code&gt;wget -qO-&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are behind a proxy see - &lt;a href=&#34;https://curl.haxx.se/docs/manpage.html#ENVIRONMENT&#34;&gt;curl&lt;/a&gt; / &lt;a href=&#34;https://www.gnu.org/software/wget/manual/wget.html#Proxies&#34;&gt;wget&lt;/a&gt; manpage. Usually simple &lt;code&gt;http_proxy=http://proxy-server:port https_proxy=http://proxy-server:port curl -sL ...&lt;/code&gt; is enough.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Command line usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Get help about all available commands&#xA;$ ktlint --help&#xA;&#xA;# Check the style of all Kotlin files (ending with &#39;.kt&#39; or &#39;.kts&#39;) inside the current dir (recursively).&#xA;# Hidden folders will be skipped.&#xA;$ ktlint&#xA;  &#xA;# Check only certain locations starting from the current directory.&#xA;#&#xA;# Prepend ! to negate the pattern, KtLint uses .gitignore pattern style syntax.&#xA;# Globs are applied starting from the last one.&#xA;#&#xA;# Hidden folders will be skipped.&#xA;# Check all &#39;.kt&#39; files in &#39;src/&#39; directory, but ignore files ending with &#39;Test.kt&#39;:&#xA;ktlint &#34;src/**/*.kt&#34; &#34;!src/**/*Test.kt&#34;&#xA;# Check all &#39;.kt&#39; files in &#39;src/&#39; directory, but ignore &#39;generated&#39; directory and its subdirectories:&#xA;ktlint &#34;src/**/*.kt&#34; &#34;!src/**/generated/**&#34;&#xA;&#xA;# Auto-correct style violations.&#xA;# If some errors cannot be fixed automatically they will be printed to stderr. &#xA;$ ktlint -F &#34;src/**/*.kt&#34;&#xA;&#xA;# Print style violations grouped by file.&#xA;$ ktlint --reporter=plain?group_by_file&#xA;&#xA;# Print style violations as usual + create report in checkstyle format, specifying report location. &#xA;$ ktlint --reporter=plain --reporter=checkstyle,output=ktlint-report-in-checkstyle-format.xml&#xA;&#xA;# Check against a baseline file.&#xA;$ ktlint --baseline=ktlint-baseline.xml&#xA;&#xA;# Install git hook to automatically check files for style violations on commit.&#xA;# Run &#34;ktlint installGitPrePushHook&#34; if you wish to run ktlint on push instead.&#xA;$ ktlint installGitPreCommitHook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;on Windows you&#39;ll have to use &lt;code&gt;java -jar ktlint ...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;ktlint --help&lt;/code&gt; for more.&lt;/p&gt; &#xA;&lt;h3&gt;Integration&lt;/h3&gt; &#xA;&lt;h4&gt;... with &lt;a href=&#34;https://github.com/shyiko/mvnw&#34;&gt;Maven&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;pom.xml&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;...&#xA;&amp;lt;plugin&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;maven-antrun-plugin&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.8&amp;lt;/version&amp;gt;&#xA;    &amp;lt;executions&amp;gt;&#xA;        &amp;lt;execution&amp;gt;&#xA;            &amp;lt;id&amp;gt;ktlint&amp;lt;/id&amp;gt;&#xA;            &amp;lt;phase&amp;gt;verify&amp;lt;/phase&amp;gt;&#xA;            &amp;lt;configuration&amp;gt;&#xA;            &amp;lt;target name=&#34;ktlint&#34;&amp;gt;&#xA;                &amp;lt;java taskname=&#34;ktlint&#34; dir=&#34;${basedir}&#34; fork=&#34;true&#34; failonerror=&#34;true&#34;&#xA;                    classpathref=&#34;maven.plugin.classpath&#34; classname=&#34;com.pinterest.ktlint.Main&#34;&amp;gt;&#xA;                    &amp;lt;arg value=&#34;src/**/*.kt&#34;/&amp;gt;&#xA;                    &amp;lt;!-- to generate report in checkstyle format prepend following args: --&amp;gt;&#xA;                    &amp;lt;!-- &#xA;                    &amp;lt;arg value=&#34;--reporter=plain&#34;/&amp;gt;&#xA;                    &amp;lt;arg value=&#34;--reporter=checkstyle,output=${project.build.directory}/ktlint.xml&#34;/&amp;gt;&#xA;                    --&amp;gt;&#xA;                    &amp;lt;!-- see https://github.com/pinterest/ktlint#usage for more --&amp;gt;                    &#xA;                &amp;lt;/java&amp;gt;&#xA;            &amp;lt;/target&amp;gt;&#xA;            &amp;lt;/configuration&amp;gt;&#xA;            &amp;lt;goals&amp;gt;&amp;lt;goal&amp;gt;run&amp;lt;/goal&amp;gt;&amp;lt;/goals&amp;gt;&#xA;        &amp;lt;/execution&amp;gt;&#xA;        &amp;lt;execution&amp;gt;&#xA;            &amp;lt;id&amp;gt;ktlint-format&amp;lt;/id&amp;gt;&#xA;            &amp;lt;configuration&amp;gt;&#xA;            &amp;lt;target name=&#34;ktlint&#34;&amp;gt;&#xA;                &amp;lt;java taskname=&#34;ktlint&#34; dir=&#34;${basedir}&#34; fork=&#34;true&#34; failonerror=&#34;true&#34;&#xA;                    classpathref=&#34;maven.plugin.classpath&#34; classname=&#34;com.pinterest.ktlint.Main&#34;&amp;gt;&#xA;                    &amp;lt;arg value=&#34;-F&#34;/&amp;gt;&#xA;                    &amp;lt;arg value=&#34;src/**/*.kt&#34;/&amp;gt;&#xA;                &amp;lt;/java&amp;gt;&#xA;            &amp;lt;/target&amp;gt;&#xA;            &amp;lt;/configuration&amp;gt;&#xA;            &amp;lt;goals&amp;gt;&amp;lt;goal&amp;gt;run&amp;lt;/goal&amp;gt;&amp;lt;/goals&amp;gt;&#xA;        &amp;lt;/execution&amp;gt;&#xA;    &amp;lt;/executions&amp;gt;&#xA;    &amp;lt;dependencies&amp;gt;&#xA;        &amp;lt;dependency&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;com.pinterest&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;ktlint&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;0.45.2&amp;lt;/version&amp;gt;&#xA;        &amp;lt;/dependency&amp;gt;&#xA;        &amp;lt;!-- additional 3rd party ruleset(s) can be specified here --&amp;gt;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;&amp;lt;/plugin&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want ktlint to run before code compilation takes place - change &lt;code&gt;&amp;lt;phase&amp;gt;verify&amp;lt;/phase&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;phase&amp;gt;validate&amp;lt;/phase&amp;gt;&lt;/code&gt; (see &lt;a href=&#34;https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html&#34;&gt;Maven Build Lifecycle&lt;/a&gt; for more).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To check code style - &lt;code&gt;mvn antrun:run@ktlint&lt;/code&gt; (it&#39;s also bound to &lt;code&gt;mvn verify&lt;/code&gt;).&lt;br&gt; To run formatter - &lt;code&gt;mvn antrun:run@ktlint-format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Another option&lt;/strong&gt; is to use a dedicated Maven plugin - &lt;a href=&#34;https://github.com/gantsign/ktlint-maven-plugin&#34;&gt;gantsign/ktlint-maven-plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;... with &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;(with a plugin - Recommended)&lt;/h4&gt; &#xA;&lt;p&gt;Gradle plugins (in order of appearance):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/jlleitschuh/ktlint-gradle&#34;&gt;jlleitschuh/ktlint-gradle&lt;/a&gt;&lt;br&gt; Gradle plugin that automatically creates check and format tasks for project Kotlin sources, supports different kotlin plugins and Gradle build caching.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/jeremymailen/kotlinter-gradle&#34;&gt;jeremymailen/kotlinter-gradle&lt;/a&gt;&lt;br&gt; Gradle plugin featuring incremental build support, file reports, and &lt;code&gt;*.kts&lt;/code&gt; source support.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You might also want to take a look at &lt;a href=&#34;https://github.com/diffplug/spotless/tree/master/plugin-gradle#applying-ktlint-to-kotlin-files&#34;&gt;diffplug/spotless&lt;/a&gt; or &lt;a href=&#34;https://github.com/autostyle/autostyle/tree/master/plugin-gradle#applying-ktlint-to-kotlin-files&#34;&gt;autostyle/autostyle&lt;/a&gt; that have a built-in support for ktlint. In addition to linting/formatting kotlin code it allows you to keep license headers, markdown documentation, etc. in check.&lt;/p&gt; &#xA;&lt;h4&gt;(without a plugin)&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;build.gradle&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// kotlin-gradle-plugin must be applied for configuration below to work&#xA;// (see https://kotlinlang.org/docs/reference/using-gradle.html)&#xA;&#xA;apply plugin: &#39;java&#39;&#xA;&#xA;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&#xA;configurations {&#xA;    ktlint&#xA;}&#xA;&#xA;dependencies {&#xA;    ktlint(&#34;com.pinterest:ktlint:0.45.2&#34;) {&#xA;        attributes {&#xA;            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))&#xA;        }&#xA;    }&#xA;    // additional 3rd party ruleset(s) can be specified here&#xA;    // just add them to the classpath (e.g. ktlint &#39;groupId:artifactId:version&#39;) and &#xA;    // ktlint will pick them up&#xA;}&#xA;&#xA;task ktlint(type: JavaExec, group: &#34;verification&#34;) {&#xA;    description = &#34;Check Kotlin code style.&#34;&#xA;    classpath = configurations.ktlint&#xA;    mainClass.set(&#34;com.pinterest.ktlint.Main&#34;)&#xA;    args &#34;src/**/*.kt&#34;&#xA;    // to generate report in checkstyle format prepend following args:&#xA;    // &#34;--reporter=plain&#34;, &#34;--reporter=checkstyle,output=${buildDir}/ktlint.xml&#34;&#xA;    // to add a baseline to check against prepend following args:&#xA;    // &#34;--baseline=ktlint-baseline.xml&#34;&#xA;    // see https://github.com/pinterest/ktlint#usage for more&#xA;}&#xA;check.dependsOn ktlint&#xA;&#xA;task ktlintFormat(type: JavaExec, group: &#34;formatting&#34;) {&#xA;    description = &#34;Fix Kotlin code style deviations.&#34;&#xA;    classpath = configurations.ktlint&#xA;    mainClass.set(&#34;com.pinterest.ktlint.Main&#34;)&#xA;    args &#34;-F&#34;, &#34;src/**/*.kt&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To check code style - &lt;code&gt;gradle ktlint&lt;/code&gt; (it&#39;s also bound to &lt;code&gt;gradle check&lt;/code&gt;).&lt;br&gt; To run formatter - &lt;code&gt;gradle ktlintFormat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://proandroiddev.com/making-your-gradle-tasks-incremental-7f26e4ef09c3&#34;&gt;Making your Gradle tasks incremental&lt;/a&gt; by &lt;a href=&#34;https://github.com/vanniktech&#34;&gt;Niklas Baudy&lt;/a&gt; on how to make tasks above incremental.&lt;/p&gt; &#xA;&lt;h4&gt;(without a plugin) for Gradle Kotlin DSL (build.gradle.kts)&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;build.gradle.kts&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val ktlint by configurations.creating&#xA;&#xA;dependencies {&#xA;    ktlint(&#34;com.pinterest:ktlint:0.45.2&#34;) {&#xA;        attributes {&#xA;            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling.EXTERNAL))&#xA;        }&#xA;    }&#xA;    // ktlint(project(&#34;:custom-ktlint-ruleset&#34;)) // in case of custom ruleset&#xA;}&#xA;&#xA;val outputDir = &#34;${project.buildDir}/reports/ktlint/&#34;&#xA;val inputFiles = project.fileTree(mapOf(&#34;dir&#34; to &#34;src&#34;, &#34;include&#34; to &#34;**/*.kt&#34;))&#xA;&#xA;val ktlintCheck by tasks.creating(JavaExec::class) {&#xA;    inputs.files(inputFiles)&#xA;    outputs.dir(outputDir)&#xA;&#xA;    description = &#34;Check Kotlin code style.&#34;&#xA;    classpath = ktlint&#xA;    mainClass.set(&#34;com.pinterest.ktlint.Main&#34;)&#xA;    args = listOf(&#34;src/**/*.kt&#34;)&#xA;}&#xA;&#xA;val ktlintFormat by tasks.creating(JavaExec::class) {&#xA;    inputs.files(inputFiles)&#xA;    outputs.dir(outputDir)&#xA;&#xA;    description = &#34;Fix Kotlin code style deviations.&#34;&#xA;    classpath = ktlint&#xA;    mainClass.set(&#34;com.pinterest.ktlint.Main&#34;)&#xA;    args = listOf(&#34;-F&#34;, &#34;src/**/*.kt&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;... with &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is recommended to align the settings of IntelliJ IDEA&#39;s built-in formatter with ktlint. This reduces the chance that code which is formatted by ktlint conflicts with formatting by the IntelliJ IDEA built-in formatter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Choose any of options below to align the formatting settings of IntelliJ IDEA.&lt;/p&gt; &#xA;&lt;h5&gt;Update code style of single project via ktlint (recommended)&lt;/h5&gt; &#xA;&lt;p&gt;Use ktlint to change the code style of a single project with any of the commands below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Run command below from root directory of project&#xA;ktlint applyToIDEAProject&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to use android specific code style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Run command below from root directory of project&#xA;ktlint --android applyToIDEAProject&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Update global code style for all projects via ktlint&lt;/h5&gt; &#xA;&lt;p&gt;Use ktlint to change the code style of all projects with any of the commands below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ktlint applyToIDEA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to use android specific code style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ktlint --android applyToIDEA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Manually update &lt;code&gt;.editorconfig&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Create or update the code style config with &lt;code&gt;.editorconfig&lt;/code&gt; by setting properties below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[{*.kt,*.kts}]&#xA;ij_kotlin_code_style_defaults = KOTLIN_OFFICIAL&#xA;&#xA;ij_kotlin_line_comment_at_first_column = false&#xA;ij_kotlin_line_comment_add_space = true&#xA;&#xA;# These options can keep to use single name import&#xA;ij_kotlin_name_count_to_use_star_import = 2147483647&#xA;ij_kotlin_name_count_to_use_star_import_for_members = 2147483647&#xA;&#xA;ij_kotlin_keep_blank_lines_in_declarations = 1&#xA;ij_kotlin_keep_blank_lines_in_code = 1&#xA;ij_kotlin_keep_blank_lines_before_right_brace = 0&#xA;&#xA;# optional but recommended&#xA;ij_kotlin_align_multiline_parameters = false&#xA;&#xA;# optional but recommended&#xA;ij_continuation_indent_size = 4&#xA;&#xA;# Android specific rules&#xA;ij_kotlin_import_nested_classes = false&#xA;ij_kotlin_imports_layout = *,^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Manually update the IntelliJ IDEA preferences&lt;/h5&gt; &#xA;&lt;p&gt;Go to &lt;kbd&gt;File&lt;/kbd&gt; -&amp;gt; &lt;kbd&gt;Settings...&lt;/kbd&gt; -&amp;gt; &lt;kbd&gt;Editor&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;General&lt;/kbd&gt; -&amp;gt; &lt;kbd&gt;Auto Import&lt;/kbd&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;check &lt;code&gt;Kotlin&lt;/code&gt; / &lt;code&gt;Optimize imports on the fly (for current project)&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Code Style&lt;/kbd&gt; -&amp;gt; &lt;kbd&gt;Kotlin&lt;/kbd&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Set from...&lt;/kbd&gt; on the right -&amp;gt; (&lt;kbd&gt;Predefined style&lt;/kbd&gt;) -&amp;gt; &lt;kbd&gt;Kotlin style guide&lt;/kbd&gt; (Kotlin plugin 1.2.20+).&lt;/li&gt; &#xA;   &lt;li&gt;open &lt;kbd&gt;Code Generation&lt;/kbd&gt; tab &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;uncheck &lt;code&gt;Line comment at first column&lt;/code&gt;;&lt;/li&gt; &#xA;     &lt;li&gt;select &lt;code&gt;Add a space at comment start&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;open &lt;kbd&gt;Imports&lt;/kbd&gt; tab &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;select &lt;code&gt;Use single name import&lt;/code&gt; (all of them);&lt;/li&gt; &#xA;     &lt;li&gt;remove &lt;code&gt;import java.util.*&lt;/code&gt; from &lt;code&gt;Packages to Use Import with &#39;*&#39;&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;open &lt;kbd&gt;Blank Lines&lt;/kbd&gt; tab &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;change &lt;code&gt;Keep Maximum Blank Lines&lt;/code&gt; / &lt;code&gt;In declarations&lt;/code&gt; &amp;amp; &lt;code&gt;In code&lt;/code&gt; to 1 and &lt;code&gt;Before &#39;}&#39;&lt;/code&gt; to 0.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;(optional but recommended) open &lt;kbd&gt;Wrapping and Braces&lt;/kbd&gt; tab &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;uncheck &lt;code&gt;Function declaration parameters&lt;/code&gt; (OR &lt;code&gt;Methods declartion parameters&lt;/code&gt; for older version) / &lt;code&gt;Align when multiline&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;(optional but recommended) open &lt;kbd&gt;Tabs and Indents&lt;/kbd&gt; tab &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;change &lt;code&gt;Continuation indent&lt;/code&gt; to the same value as &lt;code&gt;Indent&lt;/code&gt; (4 by default).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Inspections&lt;/kbd&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;change &lt;code&gt;Severity&lt;/code&gt; level of &lt;code&gt;Unused import directive&lt;/code&gt; and &lt;code&gt;Redundant semicolon&lt;/code&gt; under &lt;code&gt;Kotlin&lt;/code&gt; -&amp;gt; &lt;code&gt;Redundant constructs&lt;/code&gt; to &lt;code&gt;ERROR&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;... with &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/whirm/flycheck-kotlin&#34;&gt;whirm/flycheck-kotlin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;... with &lt;a href=&#34;https://www.vim.org/&#34;&gt;Vim&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/w0rp/ale&#34;&gt;w0rp/ale&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Integrated with something else? Send a PR.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;... with Continuous Integration&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://nvuillam.github.io/mega-linter/&#34;&gt;Mega-Linter&lt;/a&gt;: 70+ linters aggregated in a single tool for CI, including &lt;strong&gt;ktlint&lt;/strong&gt; activated out of the box&lt;/p&gt; &#xA;&lt;h2&gt;Creating a ruleset&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See also &lt;a href=&#34;https://medium.com/@vanniktech/writing-your-first-ktlint-rule-5a1707f4ca5b&#34;&gt;Writing your first ktlint rule&lt;/a&gt; by &lt;a href=&#34;https://github.com/vanniktech&#34;&gt;Niklas Baudy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In a nutshell: &#34;ruleset&#34; is a JAR containing one or more &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/ktlint-core/src/main/kotlin/com/pinterest/ktlint/core/Rule.kt&#34;&gt;Rule&lt;/a&gt;s gathered together in a &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/ktlint-core/src/main/kotlin/com/pinterest/ktlint/core/RuleSet.kt&#34;&gt;RuleSet&lt;/a&gt;. &lt;code&gt;ktlint&lt;/code&gt; is relying on &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html&#34;&gt;ServiceLoader&lt;/a&gt; to discover all available &#34;RuleSet&#34;s on the classpath (as a ruleset author, all you need to do is to include a &lt;code&gt;META-INF/services/com.pinterest.ktlint.core.RuleSetProvider&lt;/code&gt; file containing a fully qualified name of your &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/ktlint-core/src/main/kotlin/com/pinterest/ktlint/core/RuleSetProvider.kt&#34;&gt;RuleSetProvider&lt;/a&gt; implementation).&lt;/p&gt; &#xA;&lt;p&gt;Once packaged in a JAR &lt;sup&gt;&lt;a href=&#34;https://github.com/pinterest/ktlint/issues/300#issuecomment-432408753&#34;&gt;e.g. via &lt;code&gt;./gradlew build&lt;/code&gt;&lt;/a&gt;&lt;/sup&gt; you can load it with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# enable additional 3rd party ruleset by pointing ktlint to its location on the file system&#xA;$ ktlint -R /path/to/custom/rulseset.jar &#34;src/test/**/*.kt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Loading custom (3rd party) ruleset via built-in maven dependency resolver is deprecated, see &lt;a href=&#34;https://github.com/pinterest/ktlint/issues/451&#34;&gt;https://github.com/pinterest/ktlint/issues/451&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A complete sample project (with tests and build files) is included in this repo under the &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/ktlint-ruleset-template&#34;&gt;ktlint-ruleset-template&lt;/a&gt; directory (make sure to check &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/ktlint-ruleset-template/src/test/kotlin/yourpkgname/NoVarRuleTest.kt&#34;&gt;NoVarRuleTest&lt;/a&gt; as it contains some useful information).&lt;/p&gt; &#xA;&lt;h4&gt;AST&lt;/h4&gt; &#xA;&lt;p&gt;While writing/debugging &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/ktlint-core/src/main/kotlin/com/pinterest/ktlint/core/Rule.kt&#34;&gt;Rule&lt;/a&gt;s it&#39;s often helpful to have an AST printed out to see the structure rules have to work with. ktlint &amp;gt;= 0.15.0 has a &lt;code&gt;printAST&lt;/code&gt; subcommand (or &lt;code&gt;--print-ast&lt;/code&gt; flag for ktlint &amp;lt; 0.34.0) specifically for this purpose (usage: &lt;code&gt;ktlint --color printAST &amp;lt;file&amp;gt;&lt;/code&gt;). An example of the output is shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ printf &#34;fun main() {}&#34; | ktlint --color printAST --stdin&#xA;&#xA;1: ~.psi.KtFile (~.psi.stubs.elements.KtFileElementType.kotlin.FILE)&#xA;1:   ~.psi.KtPackageDirective (~.psi.stubs.elements.KtPlaceHolderStubElementType.PACKAGE_DIRECTIVE) &#34;&#34;&#xA;1:   ~.psi.KtImportList (~.psi.stubs.elements.KtPlaceHolderStubElementType.IMPORT_LIST) &#34;&#34;&#xA;1:   ~.psi.KtScript (~.psi.stubs.elements.KtScriptElementType.SCRIPT)&#xA;1:     ~.psi.KtBlockExpression (~.KtNodeType.BLOCK)&#xA;1:       ~.psi.KtNamedFunction (~.psi.stubs.elements.KtFunctionElementType.FUN)&#xA;1:         ~.c.i.p.impl.source.tree.LeafPsiElement (~.lexer.KtKeywordToken.fun) &#34;fun&#34;&#xA;1:         ~.c.i.p.impl.source.tree.PsiWhiteSpaceImpl (~.c.i.p.tree.IElementType.WHITE_SPACE) &#34; &#34;&#xA;1:         ~.c.i.p.impl.source.tree.LeafPsiElement (~.lexer.KtToken.IDENTIFIER) &#34;main&#34;&#xA;1:         ~.psi.KtParameterList &#xA;  (~.psi.stubs.elements.KtPlaceHolderStubElementType.VALUE_PARAMETER_LIST)&#xA;1:           ~.c.i.p.impl.source.tree.LeafPsiElement (~.lexer.KtSingleValueToken.LPAR) &#34;(&#34;&#xA;1:           ~.c.i.p.impl.source.tree.LeafPsiElement (~.lexer.KtSingleValueToken.RPAR) &#34;)&#34;&#xA;1:         ~.c.i.p.impl.source.tree.PsiWhiteSpaceImpl (~.c.i.p.tree.IElementType.WHITE_SPACE) &#34; &#34;&#xA;1:         ~.psi.KtBlockExpression (~.KtNodeType.BLOCK)&#xA;1:           ~.c.i.p.impl.source.tree.LeafPsiElement (~.lexer.KtSingleValueToken.LBRACE) &#34;{&#34;&#xA;1:           ~.c.i.p.impl.source.tree.LeafPsiElement (~.lexer.KtSingleValueToken.RBRACE) &#34;}&#34;&#xA;&#xA;   format: &amp;lt;line_number:&amp;gt; &amp;lt;node.psi::class&amp;gt; (&amp;lt;node.elementType&amp;gt;) &#34;&amp;lt;node.text&amp;gt;&#34;&#xA;   legend: ~ = org.jetbrains.kotlin, c.i.p = com.intellij.psi&#xA;   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating a reporter&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/ktlint-reporter-plain&#34;&gt;ktlint-reporter-plain&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In short, all you need to do is to implement a &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/ktlint-core/src/main/kotlin/com/pinterest/ktlint/core/Reporter.kt&#34;&gt;Reporter&lt;/a&gt; and make it available by registering a custom &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/ktlint-core/src/main/kotlin/com/pinterest/ktlint/core/ReporterProvider.kt&#34;&gt;ReporterProvider&lt;/a&gt; using &lt;code&gt;META-INF/services/com.pinterest.ktlint.core.ReporterProvider&lt;/code&gt;. Pack all of that into a JAR and you&#39;re done.&lt;/p&gt; &#xA;&lt;p&gt;To load a custom (3rd party) reporter use &lt;code&gt;ktlint --reporter=name,artifact=/path/to/custom-ktlint-reporter.jar&lt;/code&gt; (see &lt;code&gt;ktlint --help&lt;/code&gt; for more).&lt;/p&gt; &#xA;&lt;p&gt;Loading custom (3rd party) reporter via built-in maven dependency resolver is deprecated, see &lt;a href=&#34;https://github.com/pinterest/ktlint/issues/451&#34;&gt;https://github.com/pinterest/ktlint/issues/451&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Third-party:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kryanod/ktlint-junit-reporter&#34;&gt;kryanod/ktlint-junit-reporter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/musichin/ktlint-github-reporter&#34;&gt;musichin/ktlint-github-reporter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tobi2k/ktlint-gitlab-reporter&#34;&gt;tobi2k/ktlint-gitlab-reporter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Badge&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ktlint.github.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-%E2%9D%A4-FF4081.svg?sanitize=true&#34; alt=&#34;ktlint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;[![ktlint](https://img.shields.io/badge/code%20style-%E2%9D%A4-FF4081.svg)](https://ktlint.github.io/)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Why should I use ktlint?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Spending time on configuration (&amp;amp; maintenance down the road) of hundred-line long style config file(s) is counter-productive. Instead of wasting your energy on something that has no business value - focus on what really matters (not debating whether to use tabs or spaces).&lt;/p&gt; &#xA;&lt;p&gt;By using ktlint you put the importance of code clarity and community conventions over personal preferences. This makes things easier for people reading your code as well as frees you from having to document &amp;amp; explain what style potential contributor(s) have to follow.&lt;/p&gt; &#xA;&lt;p&gt;ktlint is a single binary with both linter &amp;amp; formatter included. All you need is to drop it in (no need to get &lt;a href=&#34;https://en.wikipedia.org/wiki/Decision_fatigue&#34;&gt;overwhelmed&lt;/a&gt; while choosing among &lt;a href=&#34;https://checkstyle.sourceforge.net/checks.html&#34;&gt;dozens of code style options&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Can I have my own rules on top of ktlint?&lt;/h3&gt; &#xA;&lt;p&gt;Absolutely, &#34;no configuration&#34; doesn&#39;t mean &#34;no extensibility&#34;. You can add your own ruleset(s) to discover potential bugs, check for anti-patterns, etc.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/#creating-a-ruleset&#34;&gt;Creating A Ruleset&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I suppress an errors for a line/block/file?&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is meant primarily as an escape latch for the rare cases when &lt;strong&gt;ktlint&lt;/strong&gt; is not able to produce the correct result (please report any such instances using &lt;a href=&#34;https://github.com/pinterest/ktlint/issues&#34;&gt;GitHub Issues&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To disable a specific rule you&#39;ll need the rule identifier which is displayed at the end of the lint error. Note that when the rule id is prefixed with a rule set id like &lt;code&gt;experimental&lt;/code&gt;, you will need to use that fully qualified rule id.&lt;/p&gt; &#xA;&lt;p&gt;An error can be suppressed using:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EOL comments&lt;/li&gt; &#xA; &lt;li&gt;Block comments&lt;/li&gt; &#xA; &lt;li&gt;@Suppress annotations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;From a consistency perspective seen, it might be best to &lt;strong&gt;not&lt;/strong&gt; mix the (EOL/Block) comment style with the annotation style in the same project.&lt;/p&gt; &#xA;&lt;p&gt;Important notice: some rules like the &lt;code&gt;indent&lt;/code&gt; rule do not yet support disabling of the rule per line of block.&lt;/p&gt; &#xA;&lt;h4&gt;Disabling for one specific line using EOL comment&lt;/h4&gt; &#xA;&lt;p&gt;An error for a specific rule on a specific line can be disabled with an EOL comment on that line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import package.* // ktlint-disable no-wildcard-imports&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case lint errors for different rules on the same line need to be ignored, then specify multiple rule ids (separated by a space):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import package.* // ktlint-disable no-wildcard-imports other-rule-id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case all lint errors on a line need to be ignored, then do not specify the rule id at all:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import package.* // ktlint-disable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Disabling for a block of lines using Block comments&lt;/h4&gt; &#xA;&lt;p&gt;An error for a specific rule in a block of lines can be disabled with an block comment like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;/* ktlint-disable no-wildcard-imports */&#xA;import package.a.*&#xA;import package.b.*&#xA;/* ktlint-enable no-wildcard-imports */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case lint errors for different rules in the same block of lines need to be ignored, then specify multiple rule ids (separated by a space):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;/* ktlint-disable no-wildcard-imports other-rule-id */&#xA;import package.a.*&#xA;import package.b.*&#xA;/* ktlint-enable no-wildcard-imports,other-rule-id */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;ktlint-enable&lt;/code&gt; directive needs to specify the exact same rule-id&#39;s and in the same order as the &lt;code&gt;ktlint-disable&lt;/code&gt; directive.&lt;/p&gt; &#xA;&lt;p&gt;In case all lint errors in a block of lines needs to be ignored, then do not specify the rule id at all:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;/* ktlint-disable */&#xA;import package.a.*&#xA;import package.b.*&#xA;/* ktlint-enable */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Disabling for a statement using @Suppress&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;As of ktlint version 0.46, it is possible to specify any ktlint rule id via the &lt;code&gt;@Suppress&lt;/code&gt; annotation in order to suppress errors found by that rule. Note that some rules like &lt;code&gt;indent&lt;/code&gt; still do not support disabling for parts of a file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;An error for a specific rule on a specific line can be disabled with a &lt;code&gt;@Suppress&lt;/code&gt; annotation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Suppress(&#34;ktlint:max-line-length&#34;,&#34;ktlint:experimental:trailing-comma&#34;)&#xA;val foo = listOf(&#xA;    &#34;some really looooooooooooooooong string exceeding the max line length&#34;,&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that when using &lt;code&gt;@Suppress&lt;/code&gt; each qualified rule id needs to be prefixed with &lt;code&gt;ktlint:&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To suppress the violations of all ktlint rules, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Suppress(&#34;ktlint&#34;)&#xA;val foo = &#34;some really looooooooooooooooong string exceeding the max line length&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like with other &lt;code&gt;@Suppress&lt;/code&gt; annotations, it can be placed on targets supported by the annotation. As of this it is possible to disable rules in the entire file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@file:Suppress(&#34;ktlint&#34;) // Suppressing all rules for the entire file&#xA;// or&#xA;@file:Suppress(&#34;ktlint:max-line-length&#34;,&#34;ktlint:experimental:trailing-comma&#34;) // Suppressing specific rules for the entire file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How do I globally disable a rule?&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/pinterest/ktlint#editorconfig&#34;&gt;EditorConfig section&lt;/a&gt; for details on how to use the &lt;code&gt;disabled_rules&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;You may also pass a list of disabled rules via the &lt;code&gt;--disabled_rules&lt;/code&gt; command line flag. It has the same syntax as the EditorConfig property.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure to read &lt;a href=&#34;https://raw.githubusercontent.com/pinterest/ktlint/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/pinterest/ktlint &amp;amp;&amp;amp; cd ktlint&#xA;./gradlew tasks # shows how to build, test, run, etc. project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To open ktlint in Intellij IDEA:&lt;br&gt; &lt;kbd&gt;File&lt;/kbd&gt; -&amp;gt; &lt;kbd&gt;Open...&lt;/kbd&gt; (you may need to right-click on &lt;code&gt;pom.xml&lt;/code&gt; (in the project dir) and then &lt;kbd&gt;Maven&lt;/kbd&gt; -&amp;gt; &lt;kbd&gt;Reimport&lt;/kbd&gt;).&lt;br&gt; You&#39;ll also need to set &#34;Project SDK&#34; to &lt;a href=&#34;https://github.com/shyiko/jabba#usage&#34;&gt;1.8&lt;/a&gt;, &#34;Project language level&#34; to 8 in &#34;Project Settings&#34; (&lt;kbd&gt;File&lt;/kbd&gt; -&amp;gt; &lt;kbd&gt;Project Structure...&lt;/kbd&gt;).&lt;br&gt; To run &lt;code&gt;ktlint&lt;/code&gt; - right-click on &lt;code&gt;ktlint/src/main/kotlin/com/pinterest/ktlint/Main.kt&lt;/code&gt; -&amp;gt; &lt;kbd&gt;Run&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Access to the latest &lt;code&gt;master&lt;/code&gt; snapshot&lt;/h4&gt; &#xA;&lt;p&gt;Whenever a commit is added to the &lt;code&gt;master&lt;/code&gt; branch a snapshot build is automatically uploaded to &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/com/pinterest/ktlint/&#34;&gt;Sonatype&#39;s snapshots repository&lt;/a&gt;. If you are eager to try upcoming changes (that might or might not be included in the next stable release) you can do so by changing version of ktlint to &lt;code&gt;&amp;lt;latest-version&amp;gt;-SNAPSHOT&lt;/code&gt; + adding a repo:&lt;/p&gt; &#xA;&lt;h5&gt;Maven&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;...&#xA;&amp;lt;repository&amp;gt;&#xA;    &amp;lt;id&amp;gt;sonatype-snapshots&amp;lt;/id&amp;gt;&#xA;    &amp;lt;url&amp;gt;https://oss.sonatype.org/content/repositories/snapshots&amp;lt;/url&amp;gt;&#xA;    &amp;lt;snapshots&amp;gt;&#xA;        &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xA;    &amp;lt;/snapshots&amp;gt;&#xA;    &amp;lt;releases&amp;gt;&#xA;        &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xA;    &amp;lt;/releases&amp;gt;&#xA;&amp;lt;/repository&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Gradle&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {&#xA;  maven {&#xA;    url &#34;https://oss.sonatype.org/content/repositories/snapshots&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Kotlin development version snapshot&lt;/h5&gt; &#xA;&lt;p&gt;Additionally, project publishes snapshots build against latest kotlin development version. To use them, change version of ktlint to &lt;code&gt;&amp;lt;latest-version&amp;gt;-kotlin-dev-SNAPSHOT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Legal&lt;/h2&gt; &#xA;&lt;p&gt;This project is not affiliated with nor endorsed by JetBrains.&lt;br&gt; All code, unless specified otherwise, is licensed under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt; license.&lt;br&gt; Copyright (c) 2019 Pinterest, Inc.&lt;br&gt; Copyright (c) 2016-2019 Stanley Shyiko.&lt;/p&gt;</summary>
  </entry>
</feed>