<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-03T01:37:51Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KosmX/jneedle</title>
    <updated>2023-08-03T01:37:51Z</updated>
    <id>tag:github.com,2023-08-03:/KosmX/jneedle</id>
    <link href="https://github.com/KosmX/jneedle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Java malware detection tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ðŸª¡ jNeedle (or Needle)&lt;/h1&gt; &#xA;&lt;p&gt;Yet another jar malware detection tool&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Quickstart / How to use&lt;/h2&gt; &#xA;&lt;p&gt;If you came from &lt;a href=&#34;https://blog.mmpa.info&#34;&gt;MMPA&lt;/a&gt; or already know what this program does, look here to see how to use jNeedle.&lt;/p&gt; &#xA;&lt;h3&gt;GUI (Graphical) mode&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to use jNeedle is to use the GUI version. Just download the &lt;code&gt;jneedle-gui-xxx.jar&lt;/code&gt; from the &lt;a href=&#34;https://github.com/KosmX/jneedle/releases/latest&#34;&gt;release page&lt;/a&gt; and double click on it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Help, it won&#39;t start!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;There currently is a bug with Java 1.8, which won&#39;t let the program start. This is known and will be fixed in the future.&lt;/p&gt; &#xA;&lt;h3&gt;CLI mode&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use the CLI version, you have to download the &lt;code&gt;jneedle-xxx-fat.jar&lt;/code&gt; from the &lt;a href=&#34;https://github.com/KosmX/jneedle/releases/latest&#34;&gt;release page&lt;/a&gt; and run it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;java -jar jneedle-xxx-fat.jar -f &amp;lt;path to jar or directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JNeedle will then check the given file or directory for malicious code. It gives a summary of the results at the end.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Help, where do I need to put that command?&lt;/em&gt;&lt;br&gt; On Windows, open the file explorer, navigate to the folder where you downloaded the jar file. Hold &lt;code&gt;Shift&lt;/code&gt; and right click on empty space. Select &lt;code&gt;Open PowerShell window here&lt;/code&gt; and type the command above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Help, it won&#39;t start!&lt;/em&gt;&lt;br&gt; See the &lt;a href=&#34;https://raw.githubusercontent.com/KosmX/jneedle/dev_2.0/#gui-graphical-mode&#34;&gt;GUI section&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;For more CLI arguments, type the command without &lt;code&gt;-f&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;gt; java -jar .\jneedle-1.0.0.jar&#xA;Value for option --file should be always provided in command line.&#xA;Usage: jNeedle options_list&#xA;Options:&#xA;    --file, -f -&amp;gt; file or directory (always required) { String }&#xA;    --url, -u [https://maven.kosmx.dev/dev/kosmx/needles] { String }&#xA;    --dblocation [C:\Users\kosmx\.jneedle] { String }&#xA;    --threads [16] { Int }&#xA;    --help, -h -&amp;gt; Usage info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to find the needle in a haystack? - Use a strong enough magnet&lt;/h2&gt; &#xA;&lt;p&gt;The detection tool is parsing jar &lt;code&gt;.class&lt;/code&gt; files looking for signature instruction sequences. It is actually similar to string search:&lt;/p&gt; &#xA;&lt;p&gt;Is the following sequence: &lt;code&gt;&#34;jump into the well&#34;&lt;/code&gt; in the program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;exit house and lock door,&#xA;get the bus and to the shop to buy milk&#xA;jump into the well then get the bus&#xA;come home&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See the &lt;strong&gt;light&lt;/strong&gt; at the end of the tunnel&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Attention! These are advanced options, which you probably won&#39;t need!&lt;/strong&gt;&lt;br&gt; For an easy setup, look at the &lt;a href=&#34;https://raw.githubusercontent.com/KosmX/jneedle/dev_2.0/#quickstart--how-to-use&#34;&gt;Quickstart&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h3&gt;Add to PrismLauncher&lt;/h3&gt; &#xA;&lt;h3&gt;Extra jar // recommended but harder to set-up&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check current launch classpath in the Version menu:&lt;br&gt; Select the Fabric/Forge/Quilt/Minecraft (most bottom of these) and on the right menu, click Customize then Edit&lt;/li&gt; &#xA; &lt;li&gt;This will open a text-editor, look for the &lt;code&gt;mainClass&lt;/code&gt; entry in the class&lt;br&gt; Fabrc for example: &lt;code&gt;&#34;mainClass&#34;: &#34;net.fabricmc.loader.impl.launch.knot.KnotClient&#34;,&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Save (copy) the entry value: &lt;code&gt;net.fabricmc.loader.impl.launch.knot.KnotClient&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;close the editor and optionally click Revert in Prismlauncher&lt;/li&gt; &#xA; &lt;li&gt;click &lt;code&gt;Add to Minecraft.jar&lt;/code&gt; button and select jneedle.jar&lt;/li&gt; &#xA; &lt;li&gt;Click edit while jneedle.jar is selected&lt;/li&gt; &#xA; &lt;li&gt;Add the following to the json:&lt;br&gt; &lt;code&gt;&#34;+jvmArgs&#34;: [&#34;-Ddev.kosmx.jneedle.launchClass={launchClass}&#34;],&lt;/code&gt; where you replace &lt;code&gt;{launchClass}&lt;/code&gt; with the earlier saved class.&lt;/li&gt; &#xA; &lt;li&gt;Add the following to the json:&lt;br&gt; &lt;code&gt;&#34;mainClass&#34;: &#34;dev.kosmx.needle.launchWrapper.ParameterizedWrapper&#34;,&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Save the file and have fun!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;The lines for specific launchers:&lt;/strong&gt;&lt;br&gt; Quilt: &lt;code&gt;&#34;+jvmArgs&#34;: [&#34;-Ddev.kosmx.jneedle.launchClass=org.quiltmc.loader.impl.launch.knot.KnotClient&#34;],&lt;/code&gt;&lt;br&gt; Fabric: &lt;code&gt;&#34;+jvmArgs&#34;: [&#34;-Ddev.kosmx.jneedle.launchClass=net.fabricmc.loader.impl.launch.knot.KnotClient&#34;],&lt;/code&gt;&lt;br&gt; Forge up to 1.12.2: &lt;code&gt;&#34;+jvmArgs&#34;: [&#34;-Ddev.kosmx.jneedle.launchClass=net.minecraft.launchwrapper.Launch&#34;],&lt;/code&gt;&lt;br&gt; Forge from 1.13.2: &lt;code&gt;&#34;+jvmArgs&#34;: [&#34;-Ddev.kosmx.jneedle.launchClass=io.github.zekerzhayard.forgewrapper.installer.Main&#34;],&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Easy path // slow but easy-to-setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the game version menu, click &lt;code&gt;Add agents&lt;/code&gt;:&lt;/li&gt; &#xA; &lt;li&gt;Select jneedle.jar&lt;/li&gt; &#xA; &lt;li&gt;Done. (It will be slow in large modpacks)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;JVM properties&lt;/h2&gt; &#xA;&lt;p&gt;Some parameter can be set as a JVM property:&lt;br&gt; &lt;code&gt;-Ddev.kosmx.jneedle.remoteDatabase&lt;/code&gt; to set online database location.&lt;br&gt; &lt;code&gt;-Ddev.kosmx.jneedle.remoteDatabase=https://maven.kosmx.dev/dev/kosmx/needles&lt;/code&gt; is default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-Ddev.kosmx.jneedle.databasePath&lt;/code&gt; to set local database cache.&lt;br&gt; &lt;code&gt;-Ddev.kosmx.jneedle.databasePath=${user.home}/.jneedle&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;p&gt;If using &lt;code&gt;-cp jneedle.jar dev.kosmx.needle.launchWrapper.ParameterizedWrapper&lt;/code&gt;&lt;br&gt; &lt;code&gt;-Ddev.kosmx.jneedle.launchClass&lt;/code&gt; to set the start class after checking is completed. The application has to be in classpath.&lt;br&gt; (This is for Minecraft wrapper use)&lt;/p&gt; &#xA;&lt;h2&gt;API usage:&lt;/h2&gt; &#xA;&lt;p&gt;&amp;lt;not yet in maven, I&#39;ll change that soon&amp;gt;&lt;br&gt; dev.kosmx.needle.CheckWrapper object (static class) has API functions:&lt;br&gt; These can be used from any JVM interop language (ideally Kotlin)&lt;br&gt; First call &lt;code&gt;CheckWrapper.init()&lt;/code&gt; to initialize database. Optionally database location and file location can be specified&lt;/p&gt; &#xA;&lt;p&gt;Then the program state is effectively immutable, calling check function is safe from any thread anytime.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CheckWrapper.checkJar()&lt;/code&gt; to check a single jar file (extension doesn&#39;t have to be jar)&lt;br&gt; &lt;code&gt;CheckWrapper.checkPathBlocking()&lt;/code&gt; to check jar file or walk directory. Function will return with results once completed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CheckWrapper.checkPath()&lt;/code&gt; with parameters to check path as a coroutine function. It can have feedback while running.&lt;br&gt; This function is kotlin only.&lt;/p&gt;</summary>
  </entry>
</feed>