<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-23T01:32:47Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>skydoves/snitcher</title>
    <updated>2023-08-23T01:32:47Z</updated>
    <id>tag:github.com,2023-08-23:/skydoves/snitcher</id>
    <link href="https://github.com/skydoves/snitcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🦉 Snitcher captures global crashes, enabling easy redirection to the exception tracing screen for swift recovery.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Snitcher&lt;/h1&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves/snitcher/actions/workflows/android.yml&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/skydoves/snitcher/actions/workflows/android.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves&#34;&gt;&lt;img alt=&#34;Profile&#34; src=&#34;https://skydoves.github.io/badges/skydoves.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 🦉 Snitcher captures global crashes, enabling easy redirection to the exception tracing screen for swift recovery. &lt;/p&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/skydoves/snitcher/main/art/demo_release.png&#34; width=&#34;330&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/skydoves/snitcher/main/art/demo_debug.png&#34; width=&#34;330&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What is Snitcher?&lt;/h2&gt; &#xA;&lt;p&gt;Snitcher offers versatile advantages such as aiding in debugging crashes during development, facilitating easy sharing of exceptions by your QA team, enhancing user experiences with recovery screens instead of abrupt closures, and enabling global exception tracing and customized launch behaviors tailored to your specific needs. You have the complete freedom to customize the crash tracing screens according to your build types and preferences, reporting to the Firebase&#39;s Crashlytics with displaying the exception screen, including options like launching a designated Activity, sending messages to your BroadcastReceiver, or any other desired actions.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For comprehensive details about Snitcher, please refer to the &lt;strong&gt;&lt;a href=&#34;https://skydoves.github.io/snitcher/&#34;&gt;complete documentation available here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22com.github.skydoves%22%20AND%20a:%22snitcher%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/snitcher.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;p&gt;Add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:snitcher:1.0.1&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Installing Snitcher is a breeze; it hooks into global exceptions, replacing application closure with informative exception tracing screens. You can seamlessly install Snitcher using the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class App : Application() {&#xA;&#xA;  override fun onCreate() {&#xA;    super.onCreate()&#xA;&#xA;    Snitcher.install(application = this)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s recommended to install Snitcher on your &lt;strong&gt;Application&lt;/strong&gt; class or your on initialization solution, such as &lt;a href=&#34;https://developer.android.com/topic/libraries/app-startup&#34;&gt;App Startup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tracing Global Exceptions&lt;/h3&gt; &#xA;&lt;p&gt;You can trace the global exceptions by providing &lt;code&gt;exceptionHandler&lt;/code&gt; lambda parameter. This can be highly beneficial if you intend to gather and report exceptions to other platforms, such as &lt;a href=&#34;https://firebase.google.com/docs/crashlytics&#34;&gt;Firebase Crashlyrics&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;Snitcher.install(&#xA;  application = this,&#xA;  exceptionHandler = { exception: SnitcherException -&amp;gt;&#xA;    Firebase.crashlytics.log(exception.stackTrace) // or exception.message, &#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;exceptionHandler&lt;/code&gt; gives you &lt;code&gt;SnitcherException&lt;/code&gt;, encompassing the exception message, stack traces, package name, and thread information. Additionally, it enables you to recover the original &lt;code&gt;Throwable&lt;/code&gt; instance with the &lt;code&gt;SnitcherException.throwable&lt;/code&gt; extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;Snitcher.install(&#xA;  application = this,&#xA;  exceptionHandler = { exception: SnitcherException -&amp;gt;&#xA;    val message: String = exception.message&#xA;    val stackTrace: String = exception.stackTrace&#xA;    val throwable: Throwable = exception.throwable&#xA;    val threadName: String = exception.threadName&#xA;&#xA;    // do somethings&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Exception Trace Screen&lt;/h3&gt; &#xA;&lt;p&gt;Snitcher provides ready-to-use exception tracing screens (such as &lt;code&gt;ExceptionTraceActivity&lt;/code&gt;, built with the &lt;code&gt;ExceptionTraceScreen&lt;/code&gt; Composable), giving you the flexibility to extensively tailor these screens according to your preferences, and even design your own distinct tracing interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;Snitcher.install(&#xA;  application = this,&#xA;  traceActivity = ExceptionTraceActivity::class&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t specify the &lt;code&gt;traceActivity&lt;/code&gt; parameter, the default value will be &lt;code&gt;ExceptionTraceActivity&lt;/code&gt;. You can tailor the launched activity by modifying the &lt;code&gt;traceActivity&lt;/code&gt; parameter to match your preferred choice. The example below demonstrates the construction of a customized trace Activity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class MyExceptionTraceActivity : ComponentActivity() {&#xA;&#xA;  override fun onCreate(savedInstanceState: Bundle?) {&#xA;    super.onCreate(savedInstanceState)&#xA;&#xA;    setContent {&#xA;      val exception by Snitcher.exception.collectAsState()&#xA;      val launcher by Snitcher.launcher.collectAsState()&#xA;&#xA;      SnitcherTheme {&#xA;        if (exception != null) {&#xA;          if (BuildConfig.DEBUG) {&#xA;            // implement your own exception trace screen&#xA;            ExceptionTraceScreen(&#xA;              launcher = launcher,&#xA;              snitcherException = exception!!,&#xA;            )&#xA;          } else {&#xA;            // implement your own app restore screen&#xA;            AppRestoreScreen(launcher = launcher)&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As demonstrated in the example above, Snitcher provides access to the &lt;code&gt;SnitcherException&lt;/code&gt; and the package name of the launcher Activity. This information can be utilized to construct highly customized trace screens that align with your specific needs. Snitcher conveniently provides this information through &lt;a href=&#34;https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-state-flow/&#34;&gt;StateFlow&lt;/a&gt;s, allowing you to observe these values without the need for cumbersome intent handling when initiating the trace Activity.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val exception: SnitcherException? by Snitcher.exception.collectAsState()&#xA;val launcher: String by Snitcher.launcher.collectAsState()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Following any app crashes, you can readily observe the exception details across various components at any time and from any location.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Custom Launcher (Restore) Activity&lt;/h3&gt; &#xA;&lt;p&gt;Furthermore, you can customize the launcher (restore activity), specifying which Activity should be executed upon restoration within the trace activity. If you don&#39;t specify a &lt;code&gt;launcher&lt;/code&gt; activity, the most recent Activity that encountered a crash will automatically be launched when users press the &#39;restore&#39; button. However, if you wish to launch a particular Activity instead of the most recent one, you can accomplish this by providing the launcher parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;Snitcher.install(&#xA;  application = this,&#xA;  launcher = MainActivity::class,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Snitcher Theme&lt;/h3&gt; &#xA;&lt;p&gt;If you just want to use the pre-builts sreens, but want to customize those components, such as colors and strings, you can easily accomplish it by giving a copy of &lt;code&gt;SnitcherColor&lt;/code&gt; to the &lt;code&gt;SnitcherTheme&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;SnitcherTheme(&#xA;  colors = SnitcherTheme.colors.copy(&#xA;    primary = Color.Blue,&#xA;    background = Color.White,&#xA;    textHighEmphasis = Color.Black&#xA;  )&#xA;) {&#xA;  if (exception != null) {&#xA;    ExceptionTraceScreen(&#xA;      launcher = launcher,&#xA;      snitcherException = exception!!,&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to personalize the text strings within the pre-built UIs, you can override the following string values within your &lt;code&gt;strings.xml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;string name=&#34;snitcher_release_crash_screen_title&#34;&amp;gt;Oops, Restore the previous screen?&amp;lt;/string&amp;gt;&#xA;&amp;lt;string name=&#34;snitcher_release_crash_screen_description&#34;&amp;gt;The app crashed unexpectedly. We apologize for the inconvenience. Would you like to return to where you left off?&amp;lt;/string&amp;gt;&#xA;&amp;lt;string name=&#34;snitcher_release_crash_screen_restore&#34;&amp;gt;Restore&amp;lt;/string&amp;gt;&#xA;&amp;lt;string name=&#34;snitcher_debug_crash_screen_restore&#34;&amp;gt;Restore App&amp;lt;/string&amp;gt;&#xA;&amp;lt;string name=&#34;snitcher_debug_crash_screen_debug_on_ide&#34;&amp;gt;Debug on IDE&amp;lt;/string&amp;gt;&#xA;&amp;lt;string name=&#34;snitcher_debug_crash_screen_stacktrace&#34;&amp;gt;Stacktrace&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Build Types&lt;/h3&gt; &#xA;&lt;p&gt;If you intend to launch distinct trace activities and implement different behaviors or flavors, you can install Snitcher based on specific build types, as shown in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;Snitcher.install(&#xA;  application = this,&#xA;  traceActivity = if (BuildConfig.DEBUG) {&#xA;    MyExceptionTraceActivity::class&#xA;  } else {&#xA;    RestoreActivity::class&#xA;  },&#xA;  exceptionHandler = {&#xA;    if (!BuildConfig.DEBUG) {&#xA;      Firebase.crashlytics.log(exception.stackTrace)&#xA;    }&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can create a single trace Activity and manage the different build types within the activity itself, as demonstrated in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;Snitcher.install(&#xA;  application = this,&#xA;  launcher = MyExceptionTraceActivity::class,&#xA;)&#xA;&#xA;class MyExceptionTraceActivity : ComponentActivity() {&#xA;&#xA;  override fun onCreate(savedInstanceState: Bundle?) {&#xA;    super.onCreate(savedInstanceState)&#xA;&#xA;    setContent {&#xA;      val exception by Snitcher.exception.collectAsState()&#xA;      val launcher by Snitcher.launcher.collectAsState()&#xA;&#xA;      SnitcherTheme {&#xA;        if (exception != null) {&#xA;          if (Snitcher.isDebuggable) {&#xA;            ExceptionTraceScreen(&#xA;              launcher = launcher,&#xA;              snitcherException = exception!!,&#xA;            )&#xA;          } else {&#xA;            AppRestoreScreen(launcher = launcher)&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As demonstrated in the above example, you have the flexibility to create your own trace or restore Activities and install them according to your various build types.&lt;/p&gt; &#xA;&lt;h3&gt;Trace Strategy&lt;/h3&gt; &#xA;&lt;p&gt;You can globally trace exceptions by providing the &lt;code&gt;exceptionHandler&lt;/code&gt; lambda parameter during Snitcher installation. However, there might be instances where you don&#39;t wish to launch the trace Activity but rather perform other actions, such as reporting crashes or sending messages to a &lt;code&gt;BroadcastReceiver&lt;/code&gt;. In such cases, you can modify the trace strategy as shown in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;Snitcher.install(&#xA;  application = this,&#xA;  traceStrategy = TraceStrategy.REPLACE,&#xA;  exceptionHandler = {&#xA;    // do something&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this scenario, only the &lt;code&gt;exceptionHandler&lt;/code&gt; lambda function will be executed without triggering the launch of any trace Activity. If the &lt;code&gt;traceStrategy&lt;/code&gt; parameter is not specified, the default behavior is set to &lt;code&gt;TraceStrategy.CO_WORK&lt;/code&gt;, which involves executing the &lt;code&gt;exceptionHandler&lt;/code&gt; lambda and initiating the trace activity when an app crash occurs.&lt;/p&gt; &#xA;&lt;h2&gt;Find this repository useful? &lt;span&gt;❤️&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Support it by joining &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves/cloudy/stargazers&#34;&gt;stargazers&lt;/a&gt;&lt;/strong&gt; for this repository. &lt;span&gt;⭐&lt;/span&gt; &lt;br&gt; Also, &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves&#34;&gt;follow me&lt;/a&gt;&lt;/strong&gt; on GitHub for my next creations! 🤩&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;Designed and developed by 2023 skydoves (Jaewoong Eum)&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>itbaima-study/itbaima-robot-starter</title>
    <updated>2023-08-23T01:32:47Z</updated>
    <id>tag:github.com,2023-08-23:/itbaima-study/itbaima-robot-starter</id>
    <link href="https://github.com/itbaima-study/itbaima-robot-starter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;基于Mirai核心封装的QQ机器人SpringBoot Starter，支持 SpringBoot 3 开箱即用，已集成签名服务客户端，直接配置即可。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/itbaima-study/itbaima-robot-starter/main/Users/nagocoler/Downloads/mirai.svg?sanitize=true&#34; alt=&#34;mirai&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;本项目基于 Mirai ，它是一个在全平台下运行，提供 QQ Android 协议支持的高效率机器人库。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mirai 是完全免费且开放源代码的软件，仅供学习和娱乐用途使用&lt;/li&gt; &#xA; &lt;li&gt;mirai 不会通过任何方式强制收取费用，或对使用者提出物质条件&lt;/li&gt; &#xA; &lt;li&gt;mirai 由整个开源社区维护，并不是属于某个个体的作品，所有贡献者都享有其作品的著作权。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;原 Mirai 项目地址：&lt;a href=&#34;https://github.com/mamoe/mirai&#34;&gt;https://github.com/mamoe/mirai&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;itbaima-robot-starter&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;声明：本项目仅用于学习交流使用，请勿用于任何非法用途&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;本项目因为基于&lt;code&gt;mirai&lt;/code&gt; ，同样采用 &lt;code&gt;AGPLv3&lt;/code&gt; 协议开源，为了整个社区的良性发展，我们&lt;strong&gt;强烈建议&lt;/strong&gt;您做到以下几点：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;间接接触（包括但不限于使用 &lt;code&gt;Http API&lt;/code&gt; 或 跨进程技术）到 &lt;code&gt;mirai&lt;/code&gt; 的软件使用 &lt;code&gt;AGPLv3&lt;/code&gt; 开源&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;不鼓励，不支持一切商业使用&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;鉴于项目的特殊性，开发团队同样可能在任何时间&lt;strong&gt;停止更新&lt;/strong&gt;或&lt;strong&gt;删除项目&lt;/strong&gt;，本项目在孵化阶段为本团队内部使用项目，经过诸多测试和实践已经相对稳定，现已孵化结束进入正式更新版本。&lt;/p&gt; &#xA;&lt;h2&gt;使用问题&lt;/h2&gt; &#xA;&lt;p&gt;使用本项目遇到任何问题，首先判断是属于Mirai本身问题还是Starter处理问题：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;有关本Starter整合相关问题：可以在 &lt;a href=&#34;https://github.com/itbaima-study/itbaima-robot-starter/issues&#34;&gt;issues&lt;/a&gt; 中提出。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如果对Mirai提供的API本身使用有任何疑问，可以在其官方站点查询：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;用户手册&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mamoe/mirai/raw/dev/docs/UserManual.md&#34;&gt;UserManual&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;如果你希望快速部署一个 Mirai QQ 机器人，安装插件、并投入使用，请看这里&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;论坛: &lt;a href=&#34;https://mirai.mamoe.net/&#34;&gt;Mirai Forum&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;Mirai 只有&lt;strong&gt;唯一一个&lt;/strong&gt;官方论坛 Mirai Forum&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;在线讨论: &lt;a href=&#34;https://gitter.im/mamoe/mirai?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;Gitter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;快速上手&lt;/h2&gt; &#xA;&lt;p&gt;在开始之前，请根据我们的指引完成对机器人相关的配置：&lt;a href=&#34;https://github.com/itbaima-study/itbaima-robot-starter/wiki&#34;&gt;https://github.com/itbaima-study/itbaima-robot-starter/wiki&lt;/a&gt; 当一切配置无误时，就可以开始体验了。&lt;/p&gt; &#xA;&lt;p&gt;我们还准备了B站视频教程：&lt;a href=&#34;https://www.bilibili.com/video/BV1Rp4y1J7kh/&#34;&gt;https://www.bilibili.com/video/BV1Rp4y1J7kh/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;使用监听器&lt;/h3&gt; &#xA;&lt;p&gt;你可以使用注解快速编写监听器，监听即将到来的事件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RobotListener   //添加@RobotListener注解表示这是一个监听器类&#xA;public class MyListener {&#xA;&#xA;    @RobotListenerHandler  //监听器类中可以有很多处理器方法，用于处理对应的事件&#xA;    public void handleJoin(MemberJoinRequestEvent event) {  //处理方法中需要填写事件类型对应的参数&#xA;        //这里处理的是MemberJoinRequestEvent新成员加入事件&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;有了监听器，我们就可以快速处理事件了。比如我们想要实现在群成员发违禁词的情况下对其进行禁言操作，那么我们可以向下面这样编写：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RobotListener&#xA;public class NormalGroupListener extends MessageListener {&#xA;&#x9;&#x9;@RobotListenerHandler&#xA;    public void handleMessage(GroupMessageEvent event) {&#xA;        String message = event.getMessage().contentToString();&#xA;        if(message.contains(&#34;傻逼&#34;)) {   //检测到违禁词&#xA;            Member sender = event.getSender();  //获取到消息发送者&#xA;            sender.mute(60);  //直接禁言60秒&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当然，可能我们的QQ机器人加了很多个群，那么此时我们需要对监听的群进行限制，只处理我们指定群号的事件，比如下面这种情况：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RobotListener&#xA;public class NormalGroupListener extends MessageListener {&#xA;&#x9;&#x9;@RobotListenerHandler(contactId = {123456789})  //只监听123456789这个群的消息&#xA;    public void handleMessage(GroupMessageEvent event) {&#xA;        //注意这种方式仅适用于那些与用户或群这类可以获取ID的事件&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;有些时候可能会存在很多个监听器，或是很多个相同的事件处理方法，我们可以对其进行排序操作：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RobotListener&#xA;public class NormalGroupListener extends MessageListener {&#xA;&#x9;&#x9;@RobotListenerHandler(order = 1) //order数值越小越优先，默认为0&#xA;    public void handleMessage(GroupMessageEvent event) {&#xA;        //此处理器优先进行&#xA;    }&#xA;  &#xA;    @RobotListenerHandler(order = 5)&#xA;    public void handleMessage(GroupMessageEvent event) {  //同样是GroupMessageEvent的事件处理器&#xA;        //此处理器后进行&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;正常情况下，所有的事件处理器都是按照顺序进行的，但是可能有些时候我们为了效率，希望事件处理器并发执行，我们可以直接配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class NormalGroupListener extends MessageListener {&#xA;&#x9;&#x9;@RobotListenerHandler(order = 1) &#xA;    public void handleMessage(GroupMessageEvent event) {&#xA;      &#x9;Thread.sleep(3000);  //这里的阻塞不会影响到并发执行的其他事件处理器&#xA;    }&#xA;  &#xA;    @RobotListenerHandler(order = 5, concurrency = true) //开启并发执行，无视顺序直接新开线程处理&#xA;    public void handleMessage(GroupMessageEvent event) {&#xA;        //此处理器与上面的处理器并发执行，不受影响&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;有了监听器，我们对于Mirai中一些常见的事件可以很方便地进行处理了。&lt;/p&gt; &#xA;&lt;h3&gt;使用MessageListener类&lt;/h3&gt; &#xA;&lt;p&gt;考虑到各位小伙伴可能会在群里做一些常用的操作，比如判断违禁词之类的，我们封装了一个 MessageListener 类用于继承，它提供了大量的预设操作：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RobotListener&#xA;public class TestListener extends MessageListener {&#xA;&#xA;    public TestListener(){&#xA;        //构造时配置（也可以延迟设置）违禁词列表，并设置大小写敏感&#xA;        super(List.of(&#34;傻逼&#34;, &#34;弱智&#34;, &#34;脑残&#34;), true);&#xA;    }&#xA;    &#xA;    @RobotListenerHandler&#xA;    public void handleMessage(GroupMessageEvent event){&#xA;        String s = event.getMessage().contentToString();&#xA;        if(this.invalidText(s)) {  //直接使用预设的 invalidText 判断是否出现违禁词&#xA;            System.out.println(&#34;检测到违禁词&#34;);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;除了违禁词检查，还支持撤回消息、快速回复某条消息、快速AT某个成员等，还请各位小伙伴自行阅读源码。&lt;/p&gt; &#xA;&lt;h3&gt;自动注册的Bean&lt;/h3&gt; &#xA;&lt;p&gt;在使用Starter后，一些对象会被自动注册为Bean，比如Mirai的机器人对象、IMirai对象等：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RobotListener&#xA;public class NormalGroupListener extends MessageListener {&#xA;&#xA;    @Resource&#xA;    Bot bot;   //可以直接注入&#xA;&#xA;    @Resource&#xA;    IMirai mirai;  //可以直接注入&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;我们也提供了一个专用于机器人操作的 Service 类用于处理各种常规操作：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface RobotService {&#xA;    MessageReceipt&amp;lt;Friend&amp;gt; sendMessageToFriend(long user, Message message);&#xA;    void run(Consumer&amp;lt;Bot&amp;gt; action);&#xA;    void runWithFriend(long group, Consumer&amp;lt;Friend&amp;gt; action);&#xA;    void runWithGroup(long group, Consumer&amp;lt;Group&amp;gt; action);&#xA;    void runWithGroupMembers(long group, Consumer&amp;lt;ContactList&amp;lt;NormalMember&amp;gt;&amp;gt; action);&#xA;    void runWithProfile(long user, Consumer&amp;lt;UserProfile&amp;gt; action);&#xA;    MessageReceipt&amp;lt;Friend&amp;gt; sendMessageToFriend(long user, String message);&#xA;    void deleteFriend(long user);&#xA;    Friend getFriend(long user);&#xA;    MessageReceipt&amp;lt;Group&amp;gt; sendMessageToGroup(long group, Message message);&#xA;    MessageReceipt&amp;lt;Group&amp;gt; sendMessageToGroup(long group, String message);&#xA;    void deleteGroup(long group);&#xA;    Group getGroup(long group);&#xA;    boolean isGroupContainsUser(long group, long user);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;它同样包含了大量日常机器人操作的方法，RobotService同样被自动注册为Bean，并且可以随时使用。&lt;/p&gt; &#xA;&lt;h2&gt;相关项目&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cssxsh/fix-protocol-version&#34;&gt;https://github.com/cssxsh/fix-protocol-version&lt;/a&gt; 版本协议临时修复插件&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fuqiuluo/unidbg-fetch-qsign&#34;&gt;https://github.com/fuqiuluo/unidbg-fetch-qsign&lt;/a&gt; fuqiuluo签名服务器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kiliokuara/magic-signer-guide&#34;&gt;https://github.com/kiliokuara/magic-signer-guide&lt;/a&gt; kiliokuara签名服务器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mamoe/mirai&#34;&gt;https://github.com/mamoe/mirai&lt;/a&gt; Mirai核心&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ya0211/MRepo</title>
    <updated>2023-08-23T01:32:47Z</updated>
    <id>tag:github.com,2023-08-23:/ya0211/MRepo</id>
    <link href="https://github.com/ya0211/MRepo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Manager for Magisk Modules&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MRepo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ya0211/MRepo/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/ya0211/MRepo?label=release&amp;amp;color=red&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ya0211/MRepo/releases/latest&#34;&gt;&lt;img src=&#34;https://shields.io/github/downloads/ya0211/MRepo/total?label=download&#34; alt=&#34;download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ya0211/MRepo/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/ya0211/MRepo&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/mrepo_news&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/follow-Telegram-blue.svg?label=follow&#34; alt=&#34;follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://weblate.sanmer.dev/engage/mrepo/&#34;&gt;&lt;img src=&#34;https://weblate.sanmer.dev/widgets/mrepo/-/svg-badge.svg?sanitize=true&#34; alt=&#34;translated&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MRepo (short for &lt;code&gt;My Repository&lt;/code&gt; or &lt;code&gt;Modules(Magisk) Repository&lt;/code&gt;) is an Android app that helps manage your own modules repository.&lt;/p&gt; &#xA;&lt;p&gt;MRepo is written with &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ya0211/MRepo/main/fastlane/metadata/android/en-US/images/phoneScreenshots/1.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ya0211/MRepo/main/fastlane/metadata/android/en-US/images/phoneScreenshots/2.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ya0211/MRepo/main/fastlane/metadata/android/en-US/images/phoneScreenshots/3.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ya0211/MRepo/main/fastlane/metadata/android/en-US/images/phoneScreenshots/4.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ya0211/MRepo/main/fastlane/metadata/android/en-US/images/phoneScreenshots/5.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ya0211/MRepo/main/fastlane/metadata/android/en-US/images/phoneScreenshots/6.png&#34; width=&#34;32%&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jetpack Compose &amp;amp; Material Design 3&lt;/li&gt; &#xA; &lt;li&gt;Download and update modules&lt;/li&gt; &#xA; &lt;li&gt;Your own modules repository&lt;/li&gt; &#xA; &lt;li&gt;Support multiple repositories&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android 8.0 ~ 13&lt;/li&gt; &#xA; &lt;li&gt;Magisk 24.0 ~ latest&lt;/li&gt; &#xA; &lt;li&gt;KernelSU 0.5.0 ~ latest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Modules Repository&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ya0211/magisk-modules-repo-util&#34;&gt;magisk-modules-repo-util&lt;/a&gt;: the util to help build modules repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ya0211/magisk-modules-alt-repo&#34;&gt;ya0211/magisk-modules-alt-repo&lt;/a&gt;: a mirror of Magisk-Modules-Alt-Repo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iconsax.io&#34;&gt;Iconsax&lt;/a&gt;: the icons of the Vuesax framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (C) 2022 Sanmer&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>