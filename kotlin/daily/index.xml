<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-24T01:39:00Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bendgk/effekt</title>
    <updated>2023-02-24T01:39:00Z</updated>
    <id>tag:github.com,2023-02-24:/bendgk/effekt</id>
    <link href="https://github.com/bendgk/effekt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kotlin reactive library (inspired by Vue.js)&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;EffeKt logo&#34; src=&#34;https://raw.githubusercontent.com/bendgk/effekt/main/res/logo1.5x.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://kotlinlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kotlin-1.7.20-blue.svg?logo=kotlin&#34; alt=&#34;Kotlin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;EffeKt&lt;/h1&gt; &#xA;&lt;p&gt;Kotlin reactive library inspired by &lt;a href=&#34;https://vuejs.org/guide/extras/reactivity-in-depth.html&#34;&gt;Vue.js&lt;/a&gt;. It seeks to provide reactive primitives to kotlin for building functionally coupled systems.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;p&gt;In your &lt;code&gt;build.gradle.kts&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;    //...&#xA;    maven { url = URI(&#34;https://jitpack.io&#34;) }&#xA;}&#xA;&#xA;dependencies {&#xA;    implementation(&#34;com.github.bendgk:effekt:1.0.0&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;EffeKt brings the following reactive primitives from vue to kotlin:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vuejs.org/api/reactivity-core.html#ref&#34;&gt;ref&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vuejs.org/api/reactivity-core.html#computed&#34;&gt;computed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vuejs.org/api/reactivity-core.html#watcheffect&#34;&gt;watchEffect&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ref&lt;/h3&gt; &#xA;&lt;p&gt;A ref is a reactive primitive that can be read and written to. Ref&#39;s store a single value and a list of subscribers. When a ref is used as a dependency of another primitive (such as &lt;code&gt;computed&lt;/code&gt; or &lt;code&gt;watchEffect&lt;/code&gt;), that primitive is added as a subscriber to that ref. when a ref is updated we need to update all the subscribers too.&lt;/p&gt; &#xA;&lt;h3&gt;computed&lt;/h3&gt; &#xA;&lt;p&gt;A computed is a reactive primitive that can only be read. Whenever a computed value is read its value is recomputed according to its dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;watchEffect&lt;/h3&gt; &#xA;&lt;p&gt;watchEffect is a reactive helper function that can watch dependencies for changes. It runs the given side effect when a dependency change occurs.&lt;/p&gt; &#xA;&lt;h1&gt;Example&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var price by ref(2.00)&#xA;var quantity by ref(1000)&#xA;val revenue by computed { price * quantity }&#xA;&#xA;watchEffect {&#xA;    println(&#34;revenue: $revenue&#34;)&#xA;}&#xA;&#xA;price /= 2&#xA;price *= 10&#xA;quantity += 500&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; revenue: 2000.0&#xA;&amp;gt; revenue: 1000.0&#xA;&amp;gt; revenue: 10000.0&#xA;&amp;gt; revenue: 15000.0&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>