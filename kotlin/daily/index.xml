<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-03T01:45:38Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cashapp/paparazzi</title>
    <updated>2022-07-03T01:45:38Z</updated>
    <id>tag:github.com,2022-07-03:/cashapp/paparazzi</id>
    <link href="https://github.com/cashapp/paparazzi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Render your Android screens without a physical device or emulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Paparazzi&lt;/h1&gt; &#xA;&lt;p&gt;An Android library to render your application screens without a physical device or emulator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class LaunchViewTest {&#xA;  @get:Rule&#xA;  val paparazzi = Paparazzi(&#xA;    deviceConfig = PIXEL_5,&#xA;    theme = &#34;android:Theme.Material.Light.NoActionBar&#34;&#xA;    // ...see docs for more options&#xA;  )&#xA;&#xA;  @Test&#xA;  fun simple() {&#xA;    val view = paparazzi.inflate&amp;lt;LaunchView&amp;gt;(R.layout.launch)&#xA;    // or...&#xA;    // val view = LaunchView(paparazzi.context)&#xA;&#xA;    view.setModel(LaunchModel(title = &#34;paparazzi&#34;))&#xA;    paparazzi.snapshot(view)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://cashapp.github.io/paparazzi/&#34;&gt;project website&lt;/a&gt; for documentation and APIs.&lt;/p&gt; &#xA;&lt;h2&gt;Tasks&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./gradlew sample:testDebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Runs tests and generates an HTML report at &lt;code&gt;sample/build/reports/paparazzi/&lt;/code&gt; showing all test runs and snapshots.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./gradlew sample:recordPaparazziDebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Saves snapshots as golden values to a predefined source-controlled location (defaults to &lt;code&gt;src/test/snapshots&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./gradlew sample:verifyPaparazziDebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Runs tests and verifies against previously-recorded golden values.&lt;/p&gt; &#xA;&lt;p&gt;For more examples, check out the &lt;a href=&#34;https://github.com/cashapp/paparazzi/tree/master/sample&#34;&gt;sample&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h2&gt;Git LFS&lt;/h2&gt; &#xA;&lt;p&gt;It is recommended you use &lt;a href=&#34;https://git-lfs.github.com/&#34;&gt;Git LFS&lt;/a&gt; to store your snapshots. Here&#39;s a quick setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install git-lfs&#xA;$ git config core.hooksPath  # optional, confirm where your git hooks will be installed&#xA;$ git lfs install --local&#xA;$ git lfs track **/snapshots/**/*.png&#xA;$ git add .gitattributes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On CI, you might set up something like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$HOOKS_DIR/pre-receive&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# compares files that match .gitattributes filter to those actually tracked by git-lfs&#xA;diff &amp;lt;(git ls-files &#39;:(attr:filter=lfs)&#39; | sort) &amp;lt;(git lfs ls-files -n | sort) &amp;gt;/dev/null&#xA;&#xA;ret=$?&#xA;if [[ $ret -ne 0 ]]; then&#xA;  echo &amp;gt;&amp;amp;2 &#34;This remote has detected files committed without using Git LFS. Run &#39;brew install git-lfs &amp;amp;&amp;amp; git lfs install&#39; to install it and re-commit your files.&#34;;&#xA;  exit 1;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;your_build_script.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [[ is running snapshot tests ]]; then&#xA;  # fail fast if files not checked in using git lfs&#xA;  &#34;$HOOKS_DIR&#34;/pre-receive&#xA;  git lfs install --local&#xA;  git lfs pull&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Jetifier&lt;/h2&gt; &#xA;&lt;p&gt;If using Jetifier to migrate off Support libraries, add the following to your &lt;code&gt;gradle.properties&lt;/code&gt; to exclude bundled Android dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;android.jetifier.ignorelist=android-base-common,common&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://cashapp.github.io/paparazzi/changelog/&#34;&gt;change log&lt;/a&gt; has release history.&lt;/p&gt; &#xA;&lt;p&gt;Using plugin application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {&#xA;  repositories {&#xA;    mavenCentral()&#xA;    google()&#xA;  }&#xA;  dependencies {&#xA;    classpath &#39;app.cash.paparazzi:paparazzi-gradle-plugin:1.0.0&#39;&#xA;  }&#xA;}&#xA;&#xA;apply plugin: &#39;app.cash.paparazzi&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the plugins DSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;plugins {&#xA;  id &#39;app.cash.paparazzi&#39; version &#39;1.0.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Snapshots of the development version are available in &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/app/cash/paparazzi/&#34;&gt;Sonatype&#39;s &lt;code&gt;snapshots&lt;/code&gt; repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt; repositories {&#xA;   // ...&#xA;   maven {&#xA;     url &#39;https://oss.sonatype.org/content/repositories/snapshots/&#39;&#xA;   }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2019 Square, Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>