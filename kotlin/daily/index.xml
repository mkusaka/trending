<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-06T01:31:44Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>http4k/http4k</title>
    <updated>2024-07-06T01:31:44Z</updated>
    <id>tag:github.com,2024-07-06:/http4k/http4k</id>
    <link href="https://github.com/http4k/http4k" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Functional toolkit for Kotlin HTTP applications. http4k provides a simple and uniform way to serve, consume, and test HTTP services.&lt;/p&gt;&lt;hr&gt;&lt;div class=&#34;github&#34;&gt; &#xA; &lt;hr&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source srcset=&#34;https://www.http4k.org/img/logo-readme-dark-mode.png&#34; media=&#34;(prefers-color-scheme: dark)&#34;&gt; &#xA;  &lt;img src=&#34;https://www.http4k.org/img/logo-readme.png&#34; alt=&#34;http4k logo&#34;&gt; &#xA; &lt;/picture&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/http4k/http4k/actions/workflows/build.yaml&#34;&gt;&lt;img alt=&#34;build&#34; src=&#34;https://github.com/http4k/http4k/actions/workflows/build.yaml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mvnrepository.com/artifact/org.http4k&#34;&gt;&lt;img alt=&#34;download&#34; src=&#34;https://img.shields.io/maven-central/v/org.http4k/http4k-core&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/http4k/http4k&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/http4k/http4k/branch/master/graph/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/http4k/http4k/master/http//www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img alt=&#34;GitHub license&#34; src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-http4k-http4k-master&#34;&gt;&lt;img alt=&#34;codebeat&#34; src=&#34;https://codebeat.co/badges/5b369ed4-af27-46f4-ad9c-a307d900617e&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlin.link&#34;&gt;&lt;img alt=&#34;awesome kotlin&#34; src=&#34;https://kotlin.link/awesome-kotlin.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/http4k&#34;&gt;&lt;img alt=&#34;Kotlin Slack&#34; src=&#34;https://img.shields.io/badge/chat-kotlin%20slack-orange.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/http4k&#34;&gt;&lt;img alt=&#34;back us!&#34; src=&#34;https://opencollective.com/http4k/backers/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/http4k&#34;&gt;&lt;img alt=&#34;sponsor us!&#34; src=&#34;https://opencollective.com/http4k/sponsors/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; is a lightweight but fully-featured HTTP toolkit written in pure &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt; that enables the serving and consuming of HTTP services in a functional and consistent way. &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; applications are &lt;em&gt;just&lt;/em&gt; Kotlin functions. For example, here&#39;s a simple echo server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt; val app: HttpHandler = { request: Request -&amp;gt; Response(OK).body(request.body) }&#xA; val server = app.asServer(SunHttp(8000)).start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; consists of a lightweight core library, &lt;code&gt;http4k-core&lt;/code&gt;, providing a base HTTP implementation and Server/Client implementations based on the JDK classes. Further servers, clients, serverless, templating, websockets capabilities are then implemented in add-on modules. &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; apps can be simply mounted into a running Server, Serverless platform, or compiled to GraalVM and run as a super-lightweight binary.&lt;/p&gt; &#xA;&lt;p&gt;The principles of &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Application as a Function:&lt;/strong&gt; Based on the Twitter paper &lt;a href=&#34;https://monkey.org/~marius/funsrv.pdf&#34;&gt;&#34;Your Server as a Function&#34;&lt;/a&gt;, all HTTP services can be composed of 2 types of simple function: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;HttpHandler:&lt;/em&gt; &lt;code&gt;(Request) -&amp;gt; Response&lt;/code&gt; - provides a remote call for processing a Request.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Filter:&lt;/em&gt; &lt;code&gt;(HttpHandler) -&amp;gt; HttpHandler&lt;/code&gt; - adds Request/Response pre/post-processing. These filters are composed to make stacks of reusable behaviour that can then be applied to an &lt;code&gt;HttpHandler&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Immutability:&lt;/strong&gt; All entities in the library are immutable unless their function explicitly disallows this.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Symmetric:&lt;/strong&gt; The &lt;code&gt;HttpHandler&lt;/code&gt; interface is identical for both HTTP services and clients. This allows for simple offline testability of applications, as well as plugging together of services without HTTP container being required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dependency-lite:&lt;/strong&gt; Apart from the Kotlin StdLib, &lt;code&gt;http4k-core&lt;/code&gt; module has &lt;strong&gt;ZERO&lt;/strong&gt; dependencies and weighs in at ~1mb. Add-on modules only have dependencies required for specific implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testability&lt;/strong&gt; Built by &lt;strong&gt;TDD&lt;/strong&gt; enthusiasts, so supports &lt;strong&gt;super-easy&lt;/strong&gt; mechanisms for both in-memory and port-based testing of: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;individual endpoints&lt;/li&gt; &#xA;   &lt;li&gt;applications&lt;/li&gt; &#xA;   &lt;li&gt;websockets/sse&lt;/li&gt; &#xA;   &lt;li&gt;full suites of microservices&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portable&lt;/strong&gt; Apps are completely portable across deployment platform in either a Server-based, Serverless or Native binaries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Bored with reading already and just want to get coding? For the impatient, visit the &lt;a href=&#34;https://toolbox.http4k.org&#34;&gt;http4k toolbox&lt;/a&gt; to generate a complete project from the wide variety of http4k modules.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, read the &lt;a href=&#34;https://www.http4k.org/quickstart/&#34;&gt;quickstart&lt;/a&gt; or take a look at the &lt;a href=&#34;https://github.com/http4k/examples&#34;&gt;examples repo&lt;/a&gt;, which showcases a variety of &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; use-cases and features.&lt;/p&gt; &#xA;&lt;h2&gt;Module feature overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/core&#34;&gt;Core:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Base HTTP handler and &lt;strong&gt;immutable HTTP message&lt;/strong&gt; objects, cookie handling.&lt;/li&gt; &#xA;   &lt;li&gt;Commonly used HTTP functionalities provided as reusable Filters (caching, debugging, &lt;strong&gt;Zipkin request tracing&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Path-based routing&lt;/strong&gt;, including nestable contexts&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Typesafe HTTP message construction/deconstruction and Request Contexts&lt;/strong&gt; using Lenses&lt;/li&gt; &#xA;   &lt;li&gt;Servlet implementation to allow &lt;strong&gt;plugin to any Servlet container&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Launch applications in &lt;strong&gt;1LOC&lt;/strong&gt; with an embedded &lt;strong&gt;SunHttp&lt;/strong&gt; server backend (recommended for development use only)&lt;/li&gt; &#xA;   &lt;li&gt;Lightweight &lt;strong&gt;JavaHttpClient&lt;/strong&gt; implementation - perfect for Serverless contexts where binary size is a factor.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Path-based WebSockets&lt;/strong&gt; including typesafe message marshalling using Lenses, which are &lt;strong&gt;testable without a running container&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Path-based Server-Sent Events&lt;/strong&gt; which are &lt;strong&gt;testable without a running container&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;APIs to &lt;strong&gt;record and replay&lt;/strong&gt; HTTP traffic to disk or memory&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Static file-serving&lt;/strong&gt; capability with &lt;strong&gt;Caching and Hot-Reload&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Single Page Application&lt;/strong&gt; support with &lt;strong&gt;Caching and Hot-Reload&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;WebJars&lt;/strong&gt; support in &lt;strong&gt;1LOC&lt;/strong&gt;`&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/clients&#34;&gt;Client:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;1LOC&lt;/strong&gt; client adapters &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Apache&lt;/strong&gt; sync + async HTTP&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Java&lt;/strong&gt; (bundled with &lt;code&gt;http4k-core&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Fuel&lt;/strong&gt; HTTP (supports sync and async HTTP)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Jetty&lt;/strong&gt; HTTP (supports sync and async HTTP and websockets)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;OkHttp&lt;/strong&gt; HTTP (supports sync and async HTTP)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;1LOC&lt;/strong&gt; Websocket client, with blocking and non-blocking modes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;GraphQL&lt;/strong&gt; client (bundled with GraphQL module)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/servers&#34;&gt;Server:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;1LOC&lt;/strong&gt; server backend spin-up for: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Apache v4 &amp;amp; v5&lt;/strong&gt; (from httpcore)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Jetty &amp;amp; Jetty Loom&lt;/strong&gt; (including SSE and Websocket support)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Helidon (Loom)&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Ktor CIO &amp;amp; Netty&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Netty&lt;/strong&gt; (including Websocket support)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;SunHttp &amp;amp; SunHttpLoom&lt;/strong&gt; (bundled with &lt;code&gt;http4k-core&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Undertow&lt;/strong&gt; (including SSE and Websocket support)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Java-WebSocket&lt;/strong&gt; (Websocket support only)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;API design allows for simple customization of underlying backend.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Native Friendly&lt;/strong&gt; Several of the supported backends can be compiled with &lt;strong&gt;GraalVM&lt;/strong&gt; and &lt;strong&gt;Quarkus&lt;/strong&gt; with zero configuration.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/serverless&#34;&gt;Serverless:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Function-based support for both HTTP and Event-based applications&lt;/strong&gt; via adapters, using the simple and testable &lt;code&gt;HttpHandler&lt;/code&gt; and &lt;code&gt;FnHandler&lt;/code&gt; types.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;AWS Lambda&lt;/strong&gt; Extend custom adapters to serve HTTP apps from APIGateway or use react to AWS events (without using the heavyweight AWS serialisation).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Custom AWS Lambda Runtime&lt;/strong&gt; Avoid the heavyweight AWS runtime, or simply compile your &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; app to GraalVM and get cold-starts in a few milliseconds!&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Google Cloud Functions&lt;/strong&gt; Extend custom adapters to serve HTTP apps from Google Cloud Functions or use react to GCloud events.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Apache OpenWhisk&lt;/strong&gt; Extend custom adapters to serve HTTP apps or react to JSON events in IBM Cloud/OpenWhisk installations.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Azure Functions&lt;/strong&gt; Extend custom adapters to serve HTTP apps from AzureCloud.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Alibaba Function Compute&lt;/strong&gt; Extend custom adapters to serve HTTP apps from Alibaba.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Tencent Serverless Cloud Functions&lt;/strong&gt; Extend custom adapters to serve HTTP apps from SCF.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/contracts&#34;&gt;Contracts:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Define &lt;strong&gt;Typesafe&lt;/strong&gt; HTTP contracts, with required and optional path/query/header/bodies&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Typesafe&lt;/strong&gt; path matching&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Auto-validation&lt;/strong&gt; of incoming requests == &lt;strong&gt;zero boilerplate validation code&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Self-documenting for all routes - e.g. Built in support for live &lt;strong&gt;OpenApi v2 and v3&lt;/strong&gt; description endpoints including &lt;strong&gt;JSON Schema&lt;/strong&gt; model breakdown.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/howto/create_a_swagger_ui&#34;&gt;Redoc and Swagger UI&lt;/a&gt; for OpenApi descriptions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/templating&#34;&gt;Templating:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Pluggable&lt;/strong&gt; templating system support for: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Freemarker&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Handlebars&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;JTE&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Pebble&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Pug4j&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Rocker&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Thymeleaf&lt;/strong&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Caching and &lt;strong&gt;Hot-Reload&lt;/strong&gt; template support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Message formats:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Consistent API provides first class support for marshalling formats to/from HTTP messages for: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.http4k.org/guide/reference/json/&#34;&gt;JSON&lt;/a&gt;&lt;/strong&gt; - with support for: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Jackson&lt;/strong&gt; - includes support for &lt;strong&gt;fully &lt;a href=&#34;https://http4k.org/guide/reference/json/#auto-marshalling-capabilities&#34;&gt;automatic marshalling&lt;/a&gt; of Data classes&lt;/strong&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Moshi&lt;/strong&gt; - includes support for &lt;strong&gt;fully &lt;a href=&#34;https://http4k.org/guide/reference/json/#auto-marshalling-capabilities&#34;&gt;automatic marshalling&lt;/a&gt; of Data classes&lt;/strong&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;KondorJson&lt;/strong&gt; - includes support for &lt;strong&gt;fully &lt;a href=&#34;https://http4k.org/guide/reference/json/#auto-marshalling-capabilities&#34;&gt;automatic marshalling&lt;/a&gt; of Data classes&lt;/strong&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;KotlinX Serialization&lt;/strong&gt; - official Kotlin JSON API.&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Klaxon&lt;/strong&gt; - includes support for &lt;strong&gt;fully &lt;a href=&#34;https://http4k.org/guide/reference/json/#auto-marshalling-capabilities&#34;&gt;automatic marshalling&lt;/a&gt; of Data classes&lt;/strong&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Gson&lt;/strong&gt; - includes support for &lt;strong&gt;fully &lt;a href=&#34;https://http4k.org/guide/reference/json/#auto-marshalling-capabilities&#34;&gt;automatic marshalling&lt;/a&gt; of Data classes&lt;/strong&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Argo&lt;/strong&gt; - lightweight Java JSON API with zero dependencies.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.http4k.org/guide/reference/xml/&#34;&gt;XML&lt;/a&gt;&lt;/strong&gt; - includes support for: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Jackson&lt;/strong&gt; - includes support for &lt;strong&gt;fully automatic marshalling of Data classes&lt;/strong&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Xml&lt;/strong&gt; - includes support for &lt;strong&gt;one way automatic marshalling of Data classes&lt;/strong&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.http4k.org/guide/reference/yaml/&#34;&gt;YAML&lt;/a&gt;&lt;/strong&gt; - includes support for: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Jackson&lt;/strong&gt; - includes support for &lt;strong&gt;fully automatic marshalling of Data classes&lt;/strong&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Moshi&lt;/strong&gt; - includes support for &lt;strong&gt;fully automatic marshalling of Data classes&lt;/strong&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.http4k.org/guide/reference/dataframe/&#34;&gt;DataFrame&lt;/a&gt;&lt;/strong&gt; - with support for: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;strong&gt;CSV&lt;/strong&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;JSON&lt;/strong&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;CSV&lt;/strong&gt; - includes support for: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Jackson&lt;/strong&gt; - CSV format for Jackson&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/multipart&#34;&gt;Multipart:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support for Multipart HTML forms, including Lens extensions for type-safe marshalling of fields.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/resilience4j&#34;&gt;Resilience4J:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Circuits, Retrying, Rate-Limiting, Bulkheading via Resilience4J integration&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/micrometer&#34;&gt;Micrometer:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support for plugging http4k apps into Micrometer.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/cloud_events&#34;&gt;Cloud Events:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Consume and produce CloudEvents using typesafe lenses.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/opentelemetry&#34;&gt;OpenTelemetry:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Instrument http4k apps with OpenTelemetry tooling.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/htmx&#34;&gt;htmx:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support for powering http4k apps with htmx.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/webhooks&#34;&gt;Webhooks:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Simply use the &lt;a href=&#34;https://www.standardwebhooks.com/&#34;&gt;Standard Webhooks&lt;/a&gt; format to send signed and consistent Webhook events.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/graphql&#34;&gt;GraphQL:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Integration with GraphQL Java library to route and serve Graph-based apps. Plus conversion of any HttpHandler to be a GraphQL client.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/aws&#34;&gt;AWS:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Plug a standard &lt;code&gt;HttpHandler&lt;/code&gt; into the AWS v2 SDKs. This massively simplifies testing and allows for sniffing of the exact traffic going to AWS - brilliant for debugging and building fakes.&lt;/li&gt; &#xA;   &lt;li&gt;Client filter to allow super-simple interaction with AWS services (via request signing)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/oauth&#34;&gt;OAuth Security:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement OAuth Authorisation Code Grant flow with a single Interface&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Pre-configured&lt;/strong&gt; OAuth for following providers: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Auth0&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Dropbox&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Facebook&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;GitLab&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Google&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Soundcloud&lt;/strong&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/digest&#34;&gt;Digest Security:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement the &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc2617&#34;&gt;Digest Authentication&lt;/a&gt; flow for clients and servers&lt;/li&gt; &#xA;   &lt;li&gt;Supports the null and Auth QoPs&lt;/li&gt; &#xA;   &lt;li&gt;Supports Proxy Authentication&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/cloud_native&#34;&gt;Cloud Native:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tooling to support operating &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; applications in orchestrated cloud environments such as Kubernetes and CloudFoundry. 12-factor configuration, dual-port servers and health checks such as liveness and readiness checking.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/approvaltests&#34;&gt;Approval Testing:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JUnit 5 extensions for &lt;a href=&#34;http://approvaltests.com/&#34;&gt;Approval testing&lt;/a&gt; of &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; Request and Response messages.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/chaos&#34;&gt;Chaos:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;API for declaring and injecting failure modes into &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; applications, allowing modelling and hence answering of &#34;what if&#34; style questions to help understand how code fares under failure conditions such as latency and dying processes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/hamkrest&#34;&gt;Hamkrest:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A set of Hamkrest matchers for testing &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; Request and Response messages.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/kotest&#34;&gt;Kotest:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A set of Kotest matchers for testing &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; Request and Response messages.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/servicevirtualisation&#34;&gt;Service Virtualisation:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Record and replay versioned HTTP contracts to/from &lt;code&gt;Servirtium&lt;/code&gt; Markdown format. Includes Servirtium MiTM server and simple JUnit extensions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/strikt&#34;&gt;Strikt:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A set of Strikt matchers for testing &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; Request and Response messages.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/tracerbullet&#34;&gt;TracerBullet:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Visually document your applications using the JUnit plugin.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/playwright&#34;&gt;Playwright:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Simplify in-browser testing with this JUnit extension.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://http4k.org/guide/reference/webdriver&#34;&gt;WebDriver:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ultra-lightweight Selenium WebDriver implementation for &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; applications.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example &lt;a href=&#34;https://github.com/http4k/http4k/raw/master/src/docs/howz/readme/example.kt&#34;&gt;&lt;img class=&#34;octocat&#34; src=&#34;https://www.http4k.org/img/octocat-32.png&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This quick example is designed to convey the simplicity &amp;amp; features of &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; . See also the &lt;a href=&#34;https://http4k.org/quickstart/&#34;&gt;quickstart&lt;/a&gt; for the simplest possible starting point and demonstrates how to serve and consume HTTP services with dynamic routing.&lt;/p&gt; &#xA;&lt;p&gt;To install, add these dependencies to your &lt;strong&gt;Gradle&lt;/strong&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;dependencies {&#xA;    implementation(platform(&#34;org.http4k:http4k-bom:5.24.1.0&#34;))&#xA;    implementation(&#34;org.http4k:http4k-core&#34;)&#xA;    implementation(&#34;org.http4k:http4k-server-jetty&#34;)&#xA;    implementation(&#34;org.http4k:http4k-client-okhttp&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;package guide.howto.readme&#xA;&#xA;import org.http4k.client.OkHttp&#xA;import org.http4k.core.Filter&#xA;import org.http4k.core.HttpHandler&#xA;import org.http4k.core.Method.GET&#xA;import org.http4k.core.Request&#xA;import org.http4k.core.Response&#xA;import org.http4k.core.Status.Companion.OK&#xA;import org.http4k.core.then&#xA;import org.http4k.filter.CachingFilters&#xA;import org.http4k.routing.bind&#xA;import org.http4k.routing.path&#xA;import org.http4k.routing.routes&#xA;import org.http4k.server.Jetty&#xA;import org.http4k.server.asServer&#xA;&#xA;fun main() {&#xA;    // we can bind HttpHandlers (which are just functions from  Request -&amp;gt; Response) to paths/methods to create a Route,&#xA;    // then combine many Routes together to make another HttpHandler&#xA;    val app: HttpHandler = routes(&#xA;        &#34;/ping&#34; bind GET to { _: Request -&amp;gt; Response(OK).body(&#34;pong!&#34;) },&#xA;        &#34;/greet/{name}&#34; bind GET to { req: Request -&amp;gt;&#xA;            val name: String? = req.path(&#34;name&#34;)&#xA;            Response(OK).body(&#34;hello ${name ?: &#34;anon!&#34;}&#34;)&#xA;        }&#xA;    )&#xA;&#xA;    // call the handler in-memory without spinning up a server&#xA;    val inMemoryResponse: Response = app(Request(GET, &#34;/greet/Bob&#34;))&#xA;    println(inMemoryResponse)&#xA;&#xA;// Produces:&#xA;//    HTTP/1.1 200 OK&#xA;//&#xA;//&#xA;//    hello Bob&#xA;&#xA;    // this is a Filter - it performs pre/post processing on a request or response&#xA;    val timingFilter = Filter {&#xA;        next: HttpHandler -&amp;gt;&#xA;        {&#xA;            request: Request -&amp;gt;&#xA;            val start = System.currentTimeMillis()&#xA;            val response = next(request)&#xA;            val latency = System.currentTimeMillis() - start&#xA;            println(&#34;Request to ${request.uri} took ${latency}ms&#34;)&#xA;            response&#xA;        }&#xA;    }&#xA;&#xA;    // we can &#34;stack&#34; filters to create reusable units, and then apply them to an HttpHandler&#xA;    val compositeFilter = CachingFilters.Response.NoCache().then(timingFilter)&#xA;    val filteredApp: HttpHandler = compositeFilter.then(app)&#xA;&#xA;    // only 1 LOC to mount an app and start it in a container&#xA;    filteredApp.asServer(Jetty(9000)).start()&#xA;&#xA;    // HTTP clients are also HttpHandlers!&#xA;    val client: HttpHandler = OkHttp()&#xA;&#xA;    val networkResponse: Response = client(Request(GET, &#34;http://localhost:9000/greet/Bob&#34;))&#xA;    println(networkResponse)&#xA;&#xA;// Produces:&#xA;//    Request to /api/greet/Bob took 1ms&#xA;//    HTTP/1.1 200&#xA;//    cache-control: private, must-revalidate&#xA;//    content-length: 9&#xA;//    date: Thu, 08 Jun 2017 13:01:13 GMT&#xA;//    expires: 0&#xA;//    server: Jetty(9.3.16.v20170120)&#xA;//&#xA;//    hello Bob&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/DanielBodart&#34;&gt;Dan Bodart&lt;/a&gt;&#39;s &lt;a href=&#34;https://github.com/bodar/utterlyidle&#34;&gt;utterlyidle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ivanrmoore&#34;&gt;Ivan Moore&lt;/a&gt; for pairing on &#34;BarelyMagical&#34;, a 50-line wrapper around utterlyidle to allow &#34;Server as a Function&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;span class=&#34;github&#34;&gt; &lt;h2&gt;Contributors&lt;/h2&gt; &lt;p&gt;This project exists thanks to all the people who &lt;a href=&#34;https://www.http4k.org/contributing/&#34;&gt;contribute&lt;/a&gt;. &lt;a href=&#34;https://github.com/http4k/http4k/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/http4k/contributors.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Backers &amp;amp; Sponsors&lt;/h2&gt; &lt;p&gt;If you use &lt;a href=&#34;https://http4k.org&#34;&gt;http4k&lt;/a&gt; in your project or enterprise and would like to support ongoing development, please consider becoming a backer or a sponsor. Sponsor logos will show up here with a link to your website.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://opencollective.com/http4k/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/http4k/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/http4k/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/http4k/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/http4k/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/http4k/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/http4k/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/http4k/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/http4k/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/http4k/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/http4k/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/http4k/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/http4k/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/http4k/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/http4k/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/http4k/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/http4k/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/http4k/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/http4k/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/http4k/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/span&gt;</summary>
  </entry>
</feed>