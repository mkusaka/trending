<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-21T01:48:33Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>burhanrashid52/PhotoEditor</title>
    <updated>2022-07-21T01:48:33Z</updated>
    <id>tag:github.com,2022-07-21:/burhanrashid52/PhotoEditor</id>
    <link href="https://github.com/burhanrashid52/PhotoEditor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Photo Editor library with simple, easy support for image editing using paints,text,filters,emoji and Sticker like stories.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PhotoEditor&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/burhanrashid52/PhotoEditor/actions/workflows/app_build_and_test.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Action&#34;&gt; &lt;a href=&#34;https://search.maven.org/artifact/com.burhanrashid52/photoeditor/2.0.0/aar&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Download-2.0.0-blue.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/API-14%2B-brightgreen.svg?sanitize=true&#34; alt=&#34;API&#34;&gt; &lt;a href=&#34;https://burhanrashid52.github.io/PhotoEditor/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/JavaDoc-PhotoEditor-blue.svg?sanitize=true&#34; alt=&#34;JavaDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.uplabs.com/posts/photoeditor&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Uplabs-PhotoEditor-orange.svg?sanitize=true&#34; alt=&#34;Uplabs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/details/1/6736&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Android%20Arsenal-PhotoEditor-blue.svg?sanitize=true&#34; alt=&#34;AndroidArsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.androiddevdigest.com/digest-185&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/AndroidDev%20Digest-%23185-brightgreen.svg?sanitize=true&#34; alt=&#34;AndroidDevDigest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android.libhunt.com/newsletter/97&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Awesome%20Android-%2397-red.svg?sanitize=true&#34; alt=&#34;AwesomeAndroid&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://androidweekly.net/issues/issue-312&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Android%20Weekly-%23312-blue.svg?sanitize=true&#34; alt=&#34;AndroidWeekly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mindorks.com/newsletter/edition/4&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Mindorks%20Newsletter-%234-ff69b4.svg?sanitize=true&#34; alt=&#34;Mindorks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Photo Editor library with simple, easy support for image editing using Paints, Text, Filters, Emoji and Sticker like stories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1pw_iZ_PIyOSJzCWR_uLnoe7PKCDTgosp?usp=sharing&#34;&gt;Download link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ZYtLHTZ.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.producthunt.com/posts/photoeditor-2?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-photoeditor-2&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=297508&amp;amp;theme=light&#34; alt=&#34;PhotoEditor - Android SDK with simple, easy support for image editing. | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/burhanrashid52&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/burhanrashid52/PhotoEditor/master/#drawing&#34;&gt;&lt;strong&gt;Drawing&lt;/strong&gt;&lt;/a&gt; on image with option to change its Brush&#39;s Color, Size, Opacity, Erasing and basic shapes.&lt;/li&gt; &#xA; &lt;li&gt;Apply &lt;a href=&#34;https://raw.githubusercontent.com/burhanrashid52/PhotoEditor/master/#filter-effect&#34;&gt;&lt;strong&gt;Filter Effect&lt;/strong&gt;&lt;/a&gt; on image using MediaEffect&lt;/li&gt; &#xA; &lt;li&gt;Adding/Editing &lt;a href=&#34;https://raw.githubusercontent.com/burhanrashid52/PhotoEditor/master/#text&#34;&gt;&lt;strong&gt;Text&lt;/strong&gt;&lt;/a&gt; with option to change its Color with Custom Fonts.&lt;/li&gt; &#xA; &lt;li&gt;Adding &lt;a href=&#34;https://raw.githubusercontent.com/burhanrashid52/PhotoEditor/master/#emoji&#34;&gt;&lt;strong&gt;Emoji&lt;/strong&gt;&lt;/a&gt; with Custom Emoji Fonts.&lt;/li&gt; &#xA; &lt;li&gt;Adding &lt;a href=&#34;https://raw.githubusercontent.com/burhanrashid52/PhotoEditor/master/#adding-imagesstickers&#34;&gt;&lt;strong&gt;Images/Stickers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pinch to Scale and Rotate views.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/burhanrashid52/PhotoEditor/master/#undo-and-redo&#34;&gt;&lt;strong&gt;Undo and Redo&lt;/strong&gt;&lt;/a&gt; for Brush and Views.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/burhanrashid52/PhotoEditor/master/#deleting&#34;&gt;&lt;strong&gt;Deleting&lt;/strong&gt;&lt;/a&gt; Views&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/burhanrashid52/PhotoEditor/master/#saving&#34;&gt;&lt;strong&gt;Saving&lt;/strong&gt;&lt;/a&gt; Photo after editing.&lt;/li&gt; &#xA; &lt;li&gt;More &lt;a href=&#34;https://raw.githubusercontent.com/burhanrashid52/PhotoEditor/master/#faq&#34;&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/burhanrashid52/PhotoEditor/master/#lesson-learned-from-building-successful-android-library-photoeditor-droidcon-berlin-2021&#34;&gt;Lesson Learned from building successful android library PhotoEditor: Droidcon Berlin 2021&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benefits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hassle free coding&lt;/li&gt; &#xA; &lt;li&gt;Increase efficiency&lt;/li&gt; &#xA; &lt;li&gt;Easy image editing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To start with this, we need to simply add the dependencies from &lt;code&gt;mavenCentral()&lt;/code&gt; in the gradle file of our app module like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;implementation &#39;com.burhanrashid52:photoeditor:2.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or we can also import the :photoeditor module from sample for further customization&lt;/p&gt; &#xA;&lt;h2&gt;Migrations&lt;/h2&gt; &#xA;&lt;h3&gt;AndroidX&lt;/h3&gt; &#xA;&lt;p&gt;PhotoEditor &lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/releases/tag/v.1.0.0&#34;&gt;v.1.0.0&lt;/a&gt; is a migration to androidX and dropping the support of older support library. There are no API changes. If you find any issue migrating to v.1.0.0 , please follow this &lt;a href=&#34;https://developer.android.com/jetpack/androidx/migrate&#34;&gt;Guide&lt;/a&gt;. If you still facing the issue than you can always rollback to &lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/releases/tag/v.0.4.0&#34;&gt;v.0.4.0&lt;/a&gt;. Any fix in PR are Welcome :)&lt;/p&gt; &#xA;&lt;h3&gt;Kotlin&lt;/h3&gt; &#xA;&lt;p&gt;PhotoEditor &lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/releases/tag/v.2.0.0&#34;&gt;v.2.0.0&lt;/a&gt; is fully migrated to Kotlin. You can use &lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/releases/tag/v.1.5.1&#34;&gt;v.1.5.1&lt;/a&gt; for the Java version. There are no breaking API changes in these two versions.&lt;/p&gt; &#xA;&lt;h2&gt;Setting up the View&lt;/h2&gt; &#xA;&lt;p&gt;First we need to add &lt;code&gt;PhotoEditorView&lt;/code&gt; in our xml layout&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt; &amp;lt;ja.burhanrashid52.photoeditor.PhotoEditorView&#xA;        android:id=&#34;@+id/photoEditorView&#34;&#xA;        android:layout_width=&#34;match_parent&#34;&#xA;        android:layout_height=&#34;match_parent&#34;&#xA;        app:photo_src=&#34;@drawable/got_s&#34; /&amp;gt;&#xA;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can define our drawable or color resource directly using &lt;code&gt;app:photo_src&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can set the image programmatically by getting source from &lt;code&gt;PhotoEditorView&lt;/code&gt; which will return a &lt;code&gt;ImageView&lt;/code&gt; so that we can load image from resources,file or (Picasso/Glide)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PhotoEditorView mPhotoEditorView = findViewById(R.id.photoEditorView);&#xA;&#xA;mPhotoEditorView.getSource().setImageResource(R.drawable.got);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building a PhotoEditor&lt;/h2&gt; &#xA;&lt;p&gt;To use the image editing feature we need to build a PhotoEditor which requires a Context and PhotoEditorView which we have to setup in our xml layout&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//Use custom font using latest support library&#xA;Typeface mTextRobotoTf = ResourcesCompat.getFont(this, R.font.roboto_medium);&#xA;&#xA;//loading font from asset&#xA;Typeface mEmojiTypeFace = Typeface.createFromAsset(getAssets(), &#34;emojione-android.ttf&#34;);&#xA;&#xA;mPhotoEditor = new PhotoEditor.Builder(this, mPhotoEditorView)&#xA;         .setPinchTextScalable(true)&#xA;         .setClipSourceImage(true)&#xA;         .setDefaultTextTypeface(mTextRobotoTf)&#xA;         .setDefaultEmojiTypeface(mEmojiTypeFace)&#xA;         .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can customize the properties in the PhotoEditor as per our requirement&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Usage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;setPinchTextScalable()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;set false to disable pinch to zoom on text insertion. Default: true.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;setClipSourceImage()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;set true to clip the drawing brush to the source image. Default: false.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;setDefaultTextTypeface()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;set default text font to be added on image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;setDefaultEmojiTypeface()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;set default font specifc to add emojis&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;That&#39;s it we are done with setting up our library&lt;/p&gt; &#xA;&lt;h2&gt;Drawing&lt;/h2&gt; &#xA;&lt;p&gt;We can customize our brush and paint with different set of property. To start drawing on image we need to enable the drawing mode&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/INi5LIy.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Enable/Disable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mPhotoEditor.setBrushDrawingMode(true);&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shape (brush, line, oval, rectangle)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mPhotoEditor.addShape(shape)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shape size (px)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mPhotoEditor.setBrushSize(brushSize)&lt;/code&gt; or through the a ShapeBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shape opacity (In %)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mPhotoEditor.setOpacity(opacity)&lt;/code&gt; or through the a ShapeBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shape color&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mPhotoEditor.setBrushColor(colorCode)&lt;/code&gt; or through the a ShapeBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Brush Eraser&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mPhotoEditor.brushEraser()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Whenever we set any property of a brush for drawing it will automatically enable the drawing mode&lt;/p&gt; &#xA;&lt;h2&gt;Shapes&lt;/h2&gt; &#xA;&lt;p&gt;We can draw shapes from &lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/releases/tag/v.1.5.0&#34;&gt;v.1.5.0&lt;/a&gt;. We use &lt;code&gt;ShapeBuilder&lt;/code&gt; to define shape and other properties.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://im2.ezgif.com/tmp/ezgif-2-5d5f7ddbe72e.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;mShapeBuilder = new ShapeBuilder()&#xA;         .withShapeOpacity(100)&#xA;         .withShapeType(ShapeType.OVAL)&#xA;         .withShapeSize(50);&#xA;&#xA;mPhotoEditor.setShape(mShapeBuilder)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details check &lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/raw/master/photoeditor/src/main/java/ja/burhanrashid52/photoeditor/shape/ShapeBuilder.java&#34;&gt;ShapeBuilder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Filter Effect&lt;/h2&gt; &#xA;&lt;p&gt;We can apply inbuild filter to the source images using&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mPhotoEditor.setFilterEffect(PhotoFilter.BRIGHTNESS);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xXTGcVC.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can also apply custom effect using &lt;code&gt;Custom.Builder&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more details check &lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/wiki/Filter-Effect&#34;&gt;Custom Filters&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Text&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/491BmE8.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can add the text with inputText and colorCode like this&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mPhotoEditor.addText(inputText, colorCode);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will take default fonts provided in the builder. If we want different fonts for different text we can set typeface with each text like this&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mPhotoEditor.addText(mTypeface,inputText, colorCode);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In order to edit the text we need the view, which we will receive in our PhotoEditor callback. This callback will trigger when we &lt;strong&gt;Long Press&lt;/strong&gt; the added text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;mPhotoEditor.setOnPhotoEditorListener(new OnPhotoEditorListener() {&#xA;           @Override&#xA;           public void onEditTextChangeListener(View rootView, String text, int colorCode) {&#xA;               &#xA;           }&#xA;       });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can edit the text with a view like this&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mPhotoEditor.editText(rootView, inputText, colorCode);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want more customization on text. Please refer the wiki page for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Emoji&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/RP8kqz6.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can add the Emoji by &lt;code&gt;PhotoEditor.getEmojis(getActivity());&lt;/code&gt; which will return a list of emojis unicode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mPhotoEditor.addEmoji(emojiUnicode);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will take default fonts provided in the builder. If we want different Emoji fonts for different emoji we can set typeface with each Emoji like this&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mPhotoEditor.addEmoji(mEmojiTypeface,emojiUnicode);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Adding Images/Stickers&lt;/h2&gt; &#xA;&lt;p&gt;We need to provide a Bitmap to add our Images &lt;code&gt;mPhotoEditor.addImage(bitmap);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Undo and Redo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/1Y9WcCB.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  mPhotoEditor.undo();&#xA;  mPhotoEditor.redo();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deleting&lt;/h2&gt; &#xA;&lt;p&gt;For deleting a Text/Emoji/Image we can click on the view to toggle the view highlighter box which will have a close icon. So, by clicking on the icon we can delete the view.&lt;/p&gt; &#xA;&lt;h2&gt;Saving&lt;/h2&gt; &#xA;&lt;p&gt;We need to provide a file with callback method when edited image is saved&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; mPhotoEditor.saveAsFile(filePath, new PhotoEditor.OnSaveListener() {&#xA;                 @Override&#xA;                 public void onSuccess(@NonNull String imagePath) {&#xA;                    Log.e(&#34;PhotoEditor&#34;,&#34;Image Saved Successfully&#34;);&#xA;                 }&#xA;&#xA;                 @Override&#xA;                 public void onFailure(@NonNull Exception exception) {&#xA;                     Log.e(&#34;PhotoEditor&#34;,&#34;Failed to save Image&#34;);&#xA;                 }&#xA;             });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more detail check &lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/wiki/Saving&#34;&gt;Saving&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out contribution guidelines 👉&lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Questions?🤔&lt;/h2&gt; &#xA;&lt;p&gt;Hit me on twitter &lt;a href=&#34;https://twitter.com/burhanrashid52&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-%40burhanrashid52-blue.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://medium.com/@burhanrashid52&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Medium-%40burhanrashid52-brightgreen.svg?sanitize=true&#34; alt=&#34;Medium&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.facebook.com/Bursid&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Facebook-Burhanuddin%20Rashid-blue.svg?sanitize=true&#34; alt=&#34;Facebook&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Can I use this library in my app for free?&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;Yes. It&#39;s an open-source library and free to use. If this library has saved your time then showing a little credit will increase my motivation towards making the library better :)&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Does it support the CROP feature?&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;Currently, No. I started to build in branch &lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/issues/79&#34;&gt;PE-79&lt;/a&gt;. But due to time constraint, I drop the idea. Any PR related to CROP is welcomed :)&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Facing issues in applying Filter?&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;The filter effect is applied using &lt;code&gt;GlSurfaceView&lt;/code&gt; and the implementation of this feature causing a lot of issues. Need to think of some other alternative solution. Here is the issue &lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/issues?q=is%3Aissue+is%3Aopen+filter&#34;&gt;list&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Does is support in other platforms (iOS, Web, Flutter)?&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;No. Currently, the focus is on making the android library better. We don&#39;t have any plans for &lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/issues/24&#34;&gt;other Platform&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Other Know Issues&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/issues/10&#34;&gt;Image Scaling&lt;/a&gt;. &lt;br&gt;&lt;a href=&#34;https://github.com/burhanrashid52/PhotoEditor/issues/48&#34;&gt;Memory Issue in Filter&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Who is using PhotoEditor?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.swastik.quotesandstatus&amp;amp;hl=en_US&#34;&gt;Best Quotes &amp;amp; Status 2019 (99000+ Collection)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.pixxo.breezil.pixxo&#34;&gt;Pixxo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.coupleblog&#34;&gt;Couple Blog: Long distance&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I will be happy to add your app to the list. Please reach out to me with details. You know how to reach me :)&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This project is inspired from &lt;a href=&#34;https://github.com/eventtus/photo-editor-android&#34;&gt;PhotoEditorSDK&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Buy a cup of coffee&lt;/h2&gt; &#xA;&lt;p&gt;If you found this project helpful or you learned something from the source code and want to thank me, consider buying me a cup of ☕️ &lt;a href=&#34;https://www.buymeacoffee.com/burhanrashid52&#34;&gt;BuyMeACoffee&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.producthunt.com/posts/photoeditor-2?utm_source=badge-review&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-photoeditor-2#discussion-body&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/review.svg?post_id=297508&amp;amp;theme=light&#34; alt=&#34;PhotoEditor - Android SDK with simple, easy support for image editing. | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Lesson Learned from building successful android library PhotoEditor: Droidcon Berlin 2021&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://player.vimeo.com/video/643904719&#34; title=&#34;Lesson Learned from building successful android library PhotoEditor&#34;&gt;&lt;img src=&#34;https://burhanrashid52.com/wp-content/uploads/2021/11/246719409_10220774611897971_6342954485444508610_n-940x510.jpg&#34; alt=&#34;Lesson Learned from building successful android library PhotoEditor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;MIT License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2020 Burhanuddin Rashid&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>patrykandpatryk/vico</title>
    <updated>2022-07-21T01:48:33Z</updated>
    <id>tag:github.com,2022-07-21:/patrykandpatryk/vico</id>
    <link href="https://github.com/patrykandpatryk/vico" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A light and extensible chart library for Android.&lt;/p&gt;&lt;hr&gt;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/patrykandpatryk/vico/master/cover.png&#34;&gt; &#xA; &lt;p align=&#34;center&#34;&gt; These charts are implemented in &lt;a href=&#34;https://github.com/patrykandpatryk/vico/tree/master/sample&#34;&gt;the sample app&lt;/a&gt;. &lt;/p&gt; &#xA;&lt;/figure&gt; &#xA;&lt;h1&gt;Vico&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.patrykandpatryk.vico/core&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/patrykandpatryk/vico/Build%20debug%20APK&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://www.codefactor.io/repository/github/patrykandpatryk/vico/badge&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vico is a light and extensible chart library for Jetpack Compose and the view system. It comprises two main modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;compose&lt;/code&gt; (for Jetpack Compose)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;view&lt;/code&gt; (for views)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vico has a very low number of dependecies, and these two modules don’t depend on each other. &lt;a href=&#34;https://raw.githubusercontent.com/patrykandpatryk/vico/master/#how-is-that&#34;&gt;Find out how.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;A foreword by the founder&lt;/h2&gt; &#xA;&lt;p&gt;As a library compatible with both Compose and views, Vico is quite unique. It doesn’t depend on the interoperability between the two UI systems.&lt;/p&gt; &#xA;&lt;p&gt;The shared, main logic resides in the &lt;code&gt;core&lt;/code&gt; module and depends on the Android SDK. It doesn’t know anything about views or Jetpack Compose. Likewise, &lt;code&gt;view&lt;/code&gt; (for views) doesn’t know anything about Jetpack Compose, and &lt;code&gt;compose&lt;/code&gt; (for Jetpack Compose) doesn’t know anything about views.&lt;/p&gt; &#xA;&lt;h3&gt;Achieving module independence&lt;/h3&gt; &#xA;&lt;p&gt;I was a little curious about Jetpack Compose’s internals and how come it is interoperable with views.&lt;/p&gt; &#xA;&lt;p&gt;“Can you, fairly easily, share the code used to draw on the &lt;code&gt;Canvas&lt;/code&gt; between these two UI paradigms?” I asked myself.&lt;/p&gt; &#xA;&lt;p&gt;The answer is yes. &lt;code&gt;core&lt;/code&gt; uses &lt;code&gt;android.graphics.Canvas&lt;/code&gt; (also used by views) to draw charts, and &lt;code&gt;androidx.compose.ui.graphics.drawscope.DrawScope&lt;/code&gt; (used by Jetpack Compose) exposes &lt;code&gt;android.graphics.Canvas&lt;/code&gt; via &lt;code&gt;DrawScope#canvas#nativeCanvas&lt;/code&gt;. It’s similar for other APIs, like &lt;code&gt;Path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This approach encourages a greater level of abstraction and promotes separation of concerns. It also helped make the API highly extensible.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure your app’s minimum SDK version is 16 (for &lt;code&gt;core&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt;) or 21 (for &lt;code&gt;compose&lt;/code&gt;, &lt;code&gt;compose-m2&lt;/code&gt;, and &lt;code&gt;compose-m3&lt;/code&gt;). This is declared in the module-level &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android {&#xA;    defaultConfig {&#xA;        minSdkVersion 16 // Or 21 for Jetpack Compose.&#xA;        ...&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure the &lt;code&gt;mavenCentral()&lt;/code&gt; repository is declared in the project-level &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {&#xA;    repositories {&#xA;        mavenCentral()&#xA;        ...&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Declare the dependencies you need in the module-level &lt;code&gt;build.gradle&lt;/code&gt; file. All modules depend on &lt;code&gt;vico.core&lt;/code&gt;, so you don’t need to add it as a dependency.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;&#xA;    // Provides the utilities needed to use Vico in the view system.&#xA;    implementation &#34;com.patrykandpatryk.vico:view:1.2.0&#34;&#xA;&#xA;    // Provides the utilities needed to use Vico in Jetpack Compose.&#xA;    implementation &#34;com.patrykandpatryk.vico:compose:1.2.0&#34;&#xA;&#xA;    // An optional addition for `vico.compose` that creates a `ChartStyle` based on an M2 Material Theme.&#xA;    implementation &#34;com.patrykandpatryk.vico:compose-m2:1.2.0&#34;&#xA;&#xA;    // An optional addition for `vico.compose` that creates a `ChartStyle` based on an M3 Material Theme.&#xA;    implementation &#34;com.patrykandpatryk.vico:compose-m3:1.2.0&#34;&#xA;&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;p&gt;The following table outlines the modules included in this library:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Artifact&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Includes the core logic for charts and other components. All modules depend on &lt;code&gt;core&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;view&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides the utilities needed to use Vico in the view system.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;compose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides the utilities needed to use Vico in Jetpack Compose.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;compose-m2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An optional addition for &lt;code&gt;compose&lt;/code&gt; that creates a &lt;code&gt;ChartStyle&lt;/code&gt; based on an M2 Material Theme.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;compose-m3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An optional addition for &lt;code&gt;compose&lt;/code&gt; that creates a &lt;code&gt;ChartStyle&lt;/code&gt; based on an M3 Material Theme.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Sample app&lt;/h2&gt; &#xA;&lt;p&gt;Included in this repository is &lt;a href=&#34;https://github.com/patrykandpatryk/vico/tree/master/sample&#34;&gt;a sample app&lt;/a&gt; with multiple charts and two tabs—one for Jetpack Compose, and the other one for the view system. Studying the source code of the app will give you a deep understanding of how to use Vico, including topics such as updating data and customizing charts. All of the charts included in the graphic at the top of this README are implemented in the sample app.&lt;/p&gt; &#xA;&lt;h2&gt;Basic example&lt;/h2&gt; &#xA;&lt;p&gt;Chart data in Vico is stored in &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry/-chart-entry-model/&#34;&gt;&lt;code&gt;ChartEntryModel&lt;/code&gt;&lt;/a&gt;s. For a static chart, you can create a &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry/-chart-entry-model/&#34;&gt;&lt;code&gt;ChartEntryModel&lt;/code&gt;&lt;/a&gt; instance via the &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry/entry-model-of?query=fun%20entryModelOf(vararg%20entries:%20Pair%3CNumber,%20Number%3E):%20ChartEntryModel&#34;&gt;&lt;code&gt;entryModelOf&lt;/code&gt;&lt;/a&gt; helper function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;val entryModel = entryModelOf(5f, 15f, 10f, 20f, 10f)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates a &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry/-chart-entry-model/&#34;&gt;&lt;code&gt;ChartEntryModel&lt;/code&gt;&lt;/a&gt; that can be used in, for example, a column chart. The chart will have five columns.&lt;/p&gt; &#xA;&lt;p&gt;In Jetpack Compose, use the &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/compose/com.patrykandpatryk.vico.compose.chart/-chart&#34;&gt;&lt;code&gt;Chart&lt;/code&gt;&lt;/a&gt; composable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;Chart(&#xA;    chart = columnChart(),&#xA;    model = entryModel,&#xA;    startAxis = startAxis(),&#xA;    bottomAxis = bottomAxis(),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the view system, use &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/view/com.patrykandpatryk.vico.view.chart/-chart-view/&#34;&gt;&lt;code&gt;ChartView&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;com.patrykandpatryk.vico.view.chart.ChartView&#xA;    android:id=&#34;@+id/chart&#34;&#xA;    android:layout_width=&#34;wrap_content&#34;&#xA;    android:layout_height=&#34;wrap_content&#34;&#xA;    app:chart=&#34;column&#34;&#xA;    app:showBottomAxis=&#34;true&#34;&#xA;    app:showStartAxis=&#34;true&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;findViewById&amp;lt;ChartView&amp;gt;(R.id.chart).model = entryModel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dynamic data &amp;amp; data updates&lt;/h2&gt; &#xA;&lt;p&gt;For dynamic data sets, use &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry/-chart-entry-model-producer&#34;&gt;&lt;code&gt;ChartEntryModelProducer&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry.composed/-composed-chart-entry-model-producer&#34;&gt;&lt;code&gt;ComposedChartEntryModelProducer&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://raw.githubusercontent.com/patrykandpatryk/vico/master/#composed-charts&#34;&gt;composed charts&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For this example, we’ll use a function that generates a random list of &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry/-float-entry/&#34;&gt;&lt;code&gt;FloatEntry&lt;/code&gt;&lt;/a&gt; instances. A &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry/-float-entry/&#34;&gt;&lt;code&gt;FloatEntry&lt;/code&gt;&lt;/a&gt; describes a single chart entry (e.g., a column).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;fun getRandomEntries() = List(size = 5) {&#xA;    25f * Random.nextFloat()&#xA;}.mapIndexed { x, y -&amp;gt;&#xA;    FloatEntry(&#xA;        x = x.toFloat(),&#xA;        y = y,&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A list returned by this function can be used to initialize a &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry/-chart-entry-model-producer/&#34;&gt;&lt;code&gt;ChartEntryModelProducer&lt;/code&gt;&lt;/a&gt;, which should happen in the viewmodel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;val producer = ChartEntryModelProducer(getRandomEntries())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Compose, you can once again use the &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/compose/com.patrykandpatryk.vico.compose.chart/-chart&#34;&gt;&lt;code&gt;Chart&lt;/code&gt;&lt;/a&gt; composable, but this time the overload with a &lt;code&gt;chartModelProducer&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;Chart(&#xA;    chart = lineChart(),&#xA;    chartModelProducer = producer,&#xA;    startAxis = startAxis(),&#xA;    bottomAxis = bottomAxis(),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the view system, you can connect a chart to a &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry/-chart-entry-model-producer&#34;&gt;&lt;code&gt;ChartEntryModelProducer&lt;/code&gt;&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;com.patrykandpatryk.vico.view.chart.ChartView&#xA;    android:id=&#34;@+id/chart&#34;&#xA;    android:layout_width=&#34;wrap_content&#34;&#xA;    android:layout_height=&#34;wrap_content&#34;&#xA;    app:chartType=&#34;column&#34;&#xA;    app:showBottomAxis=&#34;true&#34;&#xA;    app:showStartAxis=&#34;true&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;findViewById&amp;lt;ChartView&amp;gt;(R.id.chart).entryProducer = producer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry/-chart-entry-model-producer&#34;&gt;&lt;code&gt;ChartEntryModelProducer&lt;/code&gt;&lt;/a&gt;, you can update the data displayed by a chart. For the above example, this would be done as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;chartModelProducer.setEntries(getRandomEntries()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Differences are animated by default.&lt;/p&gt; &#xA;&lt;h2&gt;Composed charts&lt;/h2&gt; &#xA;&lt;p&gt;You can combine multiple charts into one. This example uses the &lt;code&gt;getRandomEntries&lt;/code&gt; function from above.&lt;/p&gt; &#xA;&lt;p&gt;A composed chart requires a &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.chart.composed/-composed-chart-entry-model/?query=interface%20ComposedChartEntryModel%3CModel%20:%20ChartEntryModel%3E%20:%20ChartEntryModel&#34;&gt;&lt;code&gt;ComposedChartEntryModel&lt;/code&gt;&lt;/a&gt;. In the case of static charts, you can directly create a &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.chart.composed/-composed-chart-entry-model/?query=interface%20ComposedChartEntryModel%3CModel%20:%20ChartEntryModel%3E%20:%20ChartEntryModel&#34;&gt;&lt;code&gt;ComposedChartEntryModel&lt;/code&gt;&lt;/a&gt; instance via the &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry.composed/-composed-chart-entry-model-producer/-companion/composed-chart-entry-model-of&#34;&gt;&lt;code&gt;composedChartEntryModelOf&lt;/code&gt;&lt;/a&gt; helper function. You can also use the &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/compose/com.patrykandpatryk.vico.compose.chart.entry/plus?query=operator%20fun%20%3CModel%20:%20ChartEntryModel%3E%20Model.plus(other:%20Model):%20ComposedChartEntryModel%3CModel%3E&#34;&gt;&lt;code&gt;+&lt;/code&gt;&lt;/a&gt; operator to create a &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.chart.composed/-composed-chart-entry-model/?query=interface%20ComposedChartEntryModel%3CModel%20:%20ChartEntryModel%3E%20:%20ChartEntryModel&#34;&gt;&lt;code&gt;ComposedChartEntryModel&lt;/code&gt;&lt;/a&gt; out of two &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry/-chart-entry-model/&#34;&gt;&lt;code&gt;ChartEntryModel&lt;/code&gt;&lt;/a&gt;s. For dynamic composed charts, use &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry.composed/-composed-chart-entry-model-producer&#34;&gt;&lt;code&gt;ComposedChartEntryModelProducer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For this example, weʼll use a &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry.composed/-composed-chart-entry-model-producer&#34;&gt;&lt;code&gt;ComposedChartEntryModelProducer&lt;/code&gt;&lt;/a&gt;. You can create a &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry.composed/-composed-chart-entry-model-producer&#34;&gt;&lt;code&gt;ComposedChartEntryModelProducer&lt;/code&gt;&lt;/a&gt; out of two regular &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/core/com.patrykandpatryk.vico.core.entry/-chart-entry-model-producer&#34;&gt;&lt;code&gt;ChartEntryModelProducer&lt;/code&gt;&lt;/a&gt;s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;val firstProducer = ChartEntryModelProducer(getRandomEntries())&#xA;val secondProducer = ChartEntryModelProducer(getRandomEntries())&#xA;val composedProducer = firstProducer + secondProducer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A composed chart can be created in Jetpack Compose as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;Chart(&#xA;    chart = lineChart() + columnChart(),&#xA;    chartModelProducer = composedProducer,&#xA;    startAxis = startAxis(),&#xA;    bottomAxis = bottomAxis(),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here’s the same chart in the view system. Note that we’re now using &lt;a href=&#34;https://patrykandpatryk.com/vico/api/vico/view/com.patrykandpatryk.vico.view.chart/-composed-chart-view/&#34;&gt;&lt;code&gt;ComposedChartView&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;com.patrykandpatryk.vico.view.chart.ComposedChartView&#xA;    android:id=&#34;@+id/chart&#34;&#xA;    android:layout_width=&#34;wrap_content&#34;&#xA;    android:layout_height=&#34;wrap_content&#34;&#xA;    app:chartType=&#34;column&#34;&#xA;    app:showBottomAxis=&#34;true&#34;&#xA;    app:showStartAxis=&#34;true&#34;&#xA;    app:charts=&#34;line|column&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;findViewById&amp;lt;ComposedChartView&amp;gt;(R.id.chart).entryProducer = composedProducer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Further reading&lt;/h2&gt; &#xA;&lt;p&gt;Vico offers rich options for customization and an extensible API. The following resources are available to help you learn about it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/patrykandpatryk/vico/tree/master/sample&#34;&gt;The sample app&lt;/a&gt; contains a full implementation of Vico.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patrykandpatryk.com/vico/wiki&#34;&gt;The wiki&lt;/a&gt; describes core topics and includes a detailed customization guide.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patrykandpatryk.com/vico/api&#34;&gt;The API reference&lt;/a&gt; describes every public class, function, and field.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>