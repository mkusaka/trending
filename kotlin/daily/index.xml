<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-23T01:36:39Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sys1yagi/mastodon4j</title>
    <updated>2022-11-23T01:36:39Z</updated>
    <id>tag:github.com,2022-11-23:/sys1yagi/mastodon4j</id>
    <link href="https://github.com/sys1yagi/mastodon4j" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mastodon client for java, kotlin https://github.com/tootsuite/documentation/blob/master/Using-the-API/API.md&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mastodon4j&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jitpack.io/#sys1yagi/mastodon4j&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/sys1yagi/mastodon4j.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.wercker.com/project/byKey/498944e68f1f37a697fcbab383b0299c&#34;&gt;&lt;img src=&#34;https://app.wercker.com/status/498944e68f1f37a697fcbab383b0299c/s/master&#34; alt=&#34;wercker status&#34; title=&#34;wercker status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/sys1yagi/mastodon4j&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/sys1yagi/mastodon4j/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/details/1/5637&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Android%20Arsenal-mastodon4j-brightgreen.svg?style=flat&#34; alt=&#34;Android Arsenal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;mastodon4j is &lt;a href=&#34;https://github.com/tootsuite/mastodon&#34;&gt;mastodon&lt;/a&gt; client for Java and Kotlin.&lt;/p&gt; &#xA;&lt;h1&gt;Official API Doc&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tootsuite/documentation/raw/master/Using-the-API/API.md&#34;&gt;https://github.com/tootsuite/documentation/blob/master/Using-the-API/API.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Sample App&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Android App&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sys1yagi/DroiDon&#34;&gt;https://github.com/sys1yagi/DroiDon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Get Started&lt;/h1&gt; &#xA;&lt;p&gt;Mastodon4j publish in jitpack. Add it in your root build.gradle at the end of repositories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;allprojects {&#xA;  repositories {&#xA;    ...&#xA;    maven { url &#39;https://jitpack.io&#39; }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;compile &#39;com.github.sys1yagi.mastodon4j:mastodon4j:$version&#39;&#xA;compile &#39;com.github.sys1yagi.mastodon4j:mastodon4j-rx:$version&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check latest version on Jitpack &lt;a href=&#34;https://jitpack.io/#sys1yagi/mastodon4j&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/sys1yagi/mastodon4j.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Get Public Timeline&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;kotlin&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val client: MastodonClient = MastodonClient.Builder(&#34;mstdn.jp&#34;, OkHttpClient.Builder(), Gson()).build()&#xA;        &#xA;val timelines = Timelines(client)&#xA;val statuses: List&amp;lt;Status&amp;gt; = timelines.getPublic().execute()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;java&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MastodonClient client = new MastodonClient.Builder(&#34;mstdn.jp&#34;, new OkHttpClient.Builder(), new Gson()).build();&#xA;Timelines timelines = new Timelines(client);&#xA;&#xA;try {&#xA;  List&amp;lt;Status&amp;gt; statuses = timelines.getPublic(new Range()).execute();&#xA;  statuses.forEach(status-&amp;gt;{&#xA;    System.out.println(&#34;=============&#34;);&#xA;    System.out.println(status.getAccount().getDisplayName());&#xA;    System.out.println(status.getContent());&#xA;  });&#xA;} catch (Mastodon4jRequestException e) {&#xA;  e.printStackTrace();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Register App&lt;/h2&gt; &#xA;&lt;p&gt;If you want to access the auth required API, you need create client credential and get access token. see more &lt;a href=&#34;https://github.com/tootsuite/documentation/raw/master/Using-the-API/API.md#apps&#34;&gt;docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;kotlin&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val client: MastodonClient = MastodonClient.Builder(&#34;mstdn.jp&#34;, OkHttpClient.Builder(), Gson()).build()&#xA;val apps = Apps(client)&#xA;val appRegistration = apps.createApp(&#xA;&#x9;clientName = &#34;client name&#34;,&#xA;&#x9;redirectUris = &#34;urn:ietf:wg:oauth:2.0:oob&#34;,&#xA;&#x9;scope = Scope(Scope.Name.ALL),&#xA;&#x9;website = &#34;https://sample.com&#34;&#xA;).execute()&#xA;save(appRegistration) // appRegistration needs to be saved.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AppRegistration has client id and client secret.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;java&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MastodonClient client = new MastodonClient.Builder(&#34;mstdn.jp&#34;, new OkHttpClient.Builder(), new Gson()).build();&#xA;Apps apps = new Apps(client);&#xA;try {&#xA;&#x9;AppRegistration registration = apps.createApp(&#xA;&#x9;    &#34;mastodon4j-sample-app&#34;,&#xA;&#x9;    &#34;urn:ietf:wg:oauth:2.0:oob&#34;,&#xA;&#x9;    new Scope(Scope.Name.ALL),&#xA;        &#34;https://sample.com&#34;&#xA;    ).execute();&#xA;    System.out.println(&#34;instance=&#34; + registration.getInstanceName());&#xA;    System.out.println(&#34;client_id=&#34; + registration.getClientId());&#xA;    System.out.println(&#34;client_secret=&#34; + registration.getClientSecret());&#xA;} catch (Mastodon4jRequestException e) {&#xA;&#x9;int statusCode = e.getResponse().code();&#xA;&#x9;// error handling.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OAuth login and get Access Token&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;kotlin&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val client: MastodonClient = MastodonClient.Builder(&#34;mstdn.jp&#34;, OkHttpClient.Builder(), Gson()).build()&#xA;val clientId = appRegistration.clientId&#xA;val apps = Apps(client)&#xA;&#xA;val url = apps.getOAuthUrl(clientId, Scope(Scope.Name.ALL))&#xA;// url like bellow&#xA;// https://:instance_name/oauth/authorize?client_id=:client_id&amp;amp;redirect_uri=:redirect_uri&amp;amp;response_type=code&amp;amp;scope=read &#xA;// open url and OAuth login and get auth code&#xA;&#xA;val authCode = //...&#xA;val clientSecret = appRegistration.clientSecret&#xA;val redirectUri = appRegistration.redirectUri&#xA;val accessToken = apps.getAccessToken(&#xA;&#x9;&#x9;&#x9;clientId,&#xA;&#x9;&#x9;&#x9;clientSecret,&#xA;&#x9;&#x9;&#x9;redirectUri,&#xA;&#x9;&#x9;&#x9;authCode,&#xA;&#x9;&#x9;&#x9;&#34;authorization_code&#34;&#xA;&#x9;&#x9;)&#xA;// &#x9;accessToken needs to be saved.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get Home Timeline&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;kotlin&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Need parameter of accessToken&#xA;val client: MastodonClient = MastodonClient.Builder(&#34;mstdn.jp&#34;, OkHttpClient.Builder(), Gson())&#xA;  .accessToken(accessToken)&#xA;  .build()&#xA;&#xA;val statuses: List&amp;lt;Status&amp;gt; = timelines.getHome().execute()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get raw json&lt;/h2&gt; &#xA;&lt;p&gt;v0.0.7 or later&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;kotlin&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val client = //...&#xA;val publicMethod = Public(client)&#xA;&#xA;publicMethod.getLocalPublic()&#xA;  .doOnJson { jsonString -&amp;gt; &#xA;    // You can get raw json for each element.&#xA;    println(jsonString)&#xA;  }&#xA;  .execute() &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Streaming API&lt;/h2&gt; &#xA;&lt;p&gt;v1.0.0 or later&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;kotlin&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val client: MastodonClient = MastodonClient.Builder(&#34;mstdn.jp&#34;, OkHttpClient.Builder(), Gson())&#xA;  .accessToken(accessToken)&#xA;  .useStreamingApi()&#xA;  .build()&#xA;&#xA;val handler = object : Handler {&#xA;  override fun onStatus(status: Status) {&#xA;    println(status.content)&#xA;  }&#xA;  override fun onNotification(notification: Notification) {/* no op */}&#xA;  override fun onDelete(id: Long) {/* no op */}&#xA;}&#xA;&#xA;val streaming = Streaming(client)&#xA;try {&#xA;  val shutdownable = streaming.localPublic(handler)&#xA;  Thread.sleep(10000L)&#xA;  shutdownable.shutdown()&#xA;} catch(e: Mastodon4jRequestException) {&#xA;  e.printStackTrace()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;java&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MastodonClient client = new MastodonClient.Builder(&#34;mstdn.jp&#34;, new OkHttpClient.Builder(), new Gson())&#xA;        .accessToken(accessToken)&#xA;        .useStreamingApi()&#xA;        .build();&#xA;Handler handler = new Handler() {&#xA;    @Override&#xA;    public void onStatus(@NotNull Status status) {&#xA;        System.out.println(status.getContent());&#xA;    }&#xA;&#xA;    @Override&#xA;    public void onNotification(@NotNull Notification notification) {/* no op */}&#xA;    @Override&#xA;    public void onDelete(long id) {/* no op */}&#xA;};&#xA;&#xA;Streaming streaming = new Streaming(client);&#xA;try {&#xA;    Shutdownable shutdownable = streaming.localPublic(handler);&#xA;    Thread.sleep(10000L);&#xA;    shutdownable.shutdown();&#xA;} catch (Exception e) {&#xA;    e.printStackTrace();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Versioning&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://semver.org/spec/v2.0.0.html&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Implementation Progress&lt;/h1&gt; &#xA;&lt;h2&gt;Methods&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/accounts/:id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/accounts/verify_credentials&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; PATCH &lt;code&gt;/api/v1/accounts/update_credentials&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/accounts/:id/followers&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/accounts/:id/following&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/accounts/:id/statuses&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/accounts/:id/follow&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/accounts/:id/unfollow&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/accounts/:id/block&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/accounts/:id/unblock&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/accounts/:id/mute&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/accounts/:id/unmute&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/accounts/relationships&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/accounts/search&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/apps&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/blocks&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/favourites&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/follow_requests&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/follow_requests/:id/authorize&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/follow_requests/:id/reject&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/follows&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/instance&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/media&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/mutes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/notifications&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/notifications/:id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/notifications/clear&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/reports&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/reports&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/search&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/statuses/:id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/statuses/:id/context&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/statuses/:id/card&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/statuses/:id/reblogged_by&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/statuses/:id/favourited_by&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/statuses&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; DELETE &lt;code&gt;/api/v1/statuses/:id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/statuses/:id/reblog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/statuses/:id/unreblog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/statuses/:id/favourite&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/api/v1/statuses/:id/unfavourite&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/timelines/home&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/timelines/public&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GET &lt;code&gt;/api/v1/timelines/tag/:hashtag&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Streaming&lt;/h2&gt; &#xA;&lt;p&gt;v1.0.0 or later&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;GET /api/v1/streaming/user&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;GET /api/v1/streaming/public&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;GET /api/v1/streaming/public/local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;GET /api/v1/streaming/hashtag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;GET /api/v1/streaming/hashtag/local&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Auth&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate Url for OAuth &lt;code&gt;/oauth/authorize&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST password authorize &lt;code&gt;/oauth/token&lt;/code&gt; v0.0.2 or later&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; POST &lt;code&gt;/oauth/token&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rx&lt;/h2&gt; &#xA;&lt;p&gt;v0.0.2 or later&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxAccounts&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxApps&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxBlocks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxFavourites&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxFollowRequests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxFollows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxInstances&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxMedia&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxMutes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxNotifications&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxReports&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxSearch&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxStatuses&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RxTimelines&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rx Streaming&lt;/h2&gt; &#xA;&lt;p&gt;v1.0.0 or later&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;GET /api/v1/streaming/user&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;GET /api/v1/streaming/public&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;GET /api/v1/streaming/public/local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;GET /api/v1/streaming/hashtag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;GET /api/v1/streaming/hashtag/local&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;Found a problem? Want a new feature? First of all see if your issue or idea has already been reported. If don&#39;t, just open a new clear and descriptive &lt;a href=&#34;https://github.com/sys1yagi/mastodon4j/issues&#34;&gt;issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (c) 2017 Toshihiro Yagi&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>