<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T01:44:55Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ingokegel/jclasslib</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/ingokegel/jclasslib</id>
    <link href="https://github.com/ingokegel/jclasslib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;jclasslib bytecode editor is a tool that visualizes all aspects of compiled Java class files and the contained bytecode.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jclasslib bytecode editor&lt;/h1&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Installers can be downloaded from the &lt;a href=&#34;https://github.com/ingokegel/jclasslib/releases&#34;&gt;releases section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;jclasslib bytecode editor is a tool that visualizes all aspects of compiled Java class files and the contained bytecode. Many aspects of class files can be edited in the UI. In addition, it contains a library that enables developers to read and write Java class files and bytecode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ingokegel/jclasslib/master/web/screenshots/main_light.png&#34; alt=&#34;Main window&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Editing&lt;/h2&gt; &#xA;&lt;p&gt;All constant pool entries can be edited. Referenced constant pool entries can directly be edited from the context menu that is shown by the &#34;Edit&#34; button of attributes and constant pool entries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ingokegel/jclasslib/master/web/screenshots/edit_constant_value.png&#34; alt=&#34;Editing&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bytecode instructions can be edited from the context menu:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ingokegel/jclasslib/master/web/screenshots/edit_opcode_popup.png&#34; alt=&#34;Editing bytecode instructions&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;UI&lt;/h2&gt; &#xA;&lt;p&gt;Dark mode can be enabled persistently by selecting &#34;File-&amp;gt;Dark mode&#34; in the main menu.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ingokegel/jclasslib/master/web/screenshots/main_dark.png&#34; alt=&#34;Dark mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Several localizations are available and can be chosen in the UI:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ingokegel/jclasslib/master/web/screenshots/language_switcher.png&#34; alt=&#34;i18n&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;IntelliJ IDEA plugin&lt;/h2&gt; &#xA;&lt;p&gt;There is a plugin for IntelliJ IDEA that can be installed via the plugin manager. The action in the &#34;View menu&#34; can be invoked when a Java, Groovy or Kotlin file is open in the editor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ingokegel/jclasslib/master/web/screenshots/ij_action.png&#34; alt=&#34;IntelliJ IDEA action&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The bytecode will be shown in the &#34;jclasslib&#34; tool window on the right hand side. Multiple class files can be open at the same time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ingokegel/jclasslib/master/web/screenshots/ij_window.png&#34; alt=&#34;IntelliJ IDEA action&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;jclasslib bytecode editor is released under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-2.0.html&#34;&gt;GPL, Version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>square/okhttp</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/square/okhttp</id>
    <link href="https://github.com/square/okhttp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Square’s meticulous HTTP client for the JVM, Android, and GraalVM.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OkHttp&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://square.github.io/okhttp/&#34;&gt;project website&lt;/a&gt; for documentation and APIs.&lt;/p&gt; &#xA;&lt;p&gt;HTTP is the way modern applications network. It’s how we exchange data &amp;amp; media. Doing HTTP efficiently makes your stuff load faster and saves bandwidth.&lt;/p&gt; &#xA;&lt;p&gt;OkHttp is an HTTP client that’s efficient by default:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTTP/2 support allows all requests to the same host to share a socket.&lt;/li&gt; &#xA; &lt;li&gt;Connection pooling reduces request latency (if HTTP/2 isn’t available).&lt;/li&gt; &#xA; &lt;li&gt;Transparent GZIP shrinks download sizes.&lt;/li&gt; &#xA; &lt;li&gt;Response caching avoids the network completely for repeat requests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OkHttp perseveres when the network is troublesome: it will silently recover from common connection problems. If your service has multiple IP addresses, OkHttp will attempt alternate addresses if the first connect fails. This is necessary for IPv4+IPv6 and services hosted in redundant data centers. OkHttp supports modern TLS features (TLS 1.3, ALPN, certificate pinning). It can be configured to fall back for broad connectivity.&lt;/p&gt; &#xA;&lt;p&gt;Using OkHttp is easy. Its request/response API is designed with fluent builders and immutability. It supports both synchronous blocking calls and async calls with callbacks.&lt;/p&gt; &#xA;&lt;h2&gt;Get a URL&lt;/h2&gt; &#xA;&lt;p&gt;This program downloads a URL and prints its contents as a string. &lt;a href=&#34;https://raw.github.com/square/okhttp/master/samples/guide/src/main/java/okhttp3/guide/GetExample.java&#34;&gt;Full source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;OkHttpClient client = new OkHttpClient();&#xA;&#xA;String run(String url) throws IOException {&#xA;  Request request = new Request.Builder()&#xA;      .url(url)&#xA;      .build();&#xA;&#xA;  try (Response response = client.newCall(request).execute()) {&#xA;    return response.body().string();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Post to a Server&lt;/h2&gt; &#xA;&lt;p&gt;This program posts data to a service. &lt;a href=&#34;https://raw.github.com/square/okhttp/master/samples/guide/src/main/java/okhttp3/guide/PostExample.java&#34;&gt;Full source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static final MediaType JSON&#xA;    = MediaType.get(&#34;application/json; charset=utf-8&#34;);&#xA;&#xA;OkHttpClient client = new OkHttpClient();&#xA;&#xA;String post(String url, String json) throws IOException {&#xA;  RequestBody body = RequestBody.create(json, JSON);&#xA;  Request request = new Request.Builder()&#xA;      .url(url)&#xA;      .post(body)&#xA;      .build();&#xA;  try (Response response = client.newCall(request).execute()) {&#xA;    return response.body().string();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further examples are on the &lt;a href=&#34;https://square.github.io/okhttp/recipes/&#34;&gt;OkHttp Recipes page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;OkHttp works on Android 5.0+ (API level 21+) and Java 8+.&lt;/p&gt; &#xA;&lt;p&gt;OkHttp depends on &lt;a href=&#34;https://github.com/square/okio&#34;&gt;Okio&lt;/a&gt; for high-performance I/O and the &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin standard library&lt;/a&gt;. Both are small libraries with strong backward-compatibility.&lt;/p&gt; &#xA;&lt;p&gt;We highly recommend you keep OkHttp up-to-date. As with auto-updating web browsers, staying current with HTTPS clients is an important defense against potential security problems. &lt;a href=&#34;https://square.github.io/okhttp/tls_configuration_history/&#34;&gt;We track&lt;/a&gt; the dynamic TLS ecosystem and adjust OkHttp to improve connectivity and security.&lt;/p&gt; &#xA;&lt;p&gt;OkHttp uses your platform&#39;s built-in TLS implementation. On Java platforms OkHttp also supports &lt;a href=&#34;https://github.com/google/conscrypt/&#34;&gt;Conscrypt&lt;/a&gt;, which integrates BoringSSL with Java. OkHttp will use Conscrypt if it is the first security provider:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Security.insertProviderAt(Conscrypt.newProvider(), 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The OkHttp 3.12.x branch supports Android 2.3+ (API level 9+) and Java 7+. These platforms lack support for TLS 1.2 and should not be used. But because upgrading is difficult, we will backport critical fixes to the &lt;a href=&#34;https://github.com/square/okhttp/tree/okhttp_3.12.x&#34;&gt;3.12.x branch&lt;/a&gt; through December 31, 2021.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://square.github.io/okhttp/changelog/&#34;&gt;change log&lt;/a&gt; has release history.&lt;/p&gt; &#xA;&lt;p&gt;The latest release is available on &lt;a href=&#34;https://search.maven.org/artifact/com.squareup.okhttp3/okhttp/4.9.3/jar&#34;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;com.squareup.okhttp3:okhttp:4.9.3&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Snapshot builds are &lt;a href=&#34;https://s01.oss.sonatype.org/content/repositories/snapshots/&#34;&gt;available&lt;/a&gt;. &lt;a href=&#34;https://square.github.io/okhttp/features/r8_proguard/&#34;&gt;R8 and ProGuard&lt;/a&gt; rules are available.&lt;/p&gt; &#xA;&lt;p&gt;Also, we have a &lt;a href=&#34;https://docs.gradle.org/6.2/userguide/platforms.html#sub:bom_import&#34;&gt;bill of materials (BOM)&lt;/a&gt; available to help you keep OkHttp artifacts up to date and be sure about version compatibility.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;    dependencies {&#xA;       // define a BOM and its version&#xA;       implementation(platform(&#34;com.squareup.okhttp3:okhttp-bom:4.9.3&#34;))&#xA;&#xA;       // define any required OkHttp artifacts without version&#xA;       implementation(&#34;com.squareup.okhttp3:okhttp&#34;)&#xA;       implementation(&#34;com.squareup.okhttp3:logging-interceptor&#34;)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MockWebServer&lt;/h2&gt; &#xA;&lt;p&gt;OkHttp includes a library for testing HTTP, HTTPS, and HTTP/2 clients.&lt;/p&gt; &#xA;&lt;p&gt;The latest release is available on &lt;a href=&#34;https://search.maven.org/artifact/com.squareup.okhttp3/mockwebserver/4.9.3/jar&#34;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;testImplementation(&#34;com.squareup.okhttp3:mockwebserver:4.9.3&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GraalVM Native Image&lt;/h2&gt; &#xA;&lt;p&gt;Building your native images with Graal &lt;a href=&#34;https://www.graalvm.org/&#34;&gt;https://www.graalvm.org/&lt;/a&gt; should work automatically. This is not currently in a final released version, so 5.0.0-alpha.2 should be used. Please report any bugs or workarounds you find.&lt;/p&gt; &#xA;&lt;p&gt;See the okcurl module for an example build.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./gradlew okcurl:nativeImage&#xA;$ ./okcurl/build/graal/okcurl https://httpbin.org/get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2019 Square, Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>iSoron/uhabits</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/iSoron/uhabits</id>
    <link href="https://github.com/iSoron/uhabits" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Loop Habit Tracker, a mobile app for creating and maintaining long-term positive habits&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Loop Habit Tracker&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/iSoron/uhabits/actions?query=workflow%3A%22Build+%26+Test%22&#34;&gt; &lt;img src=&#34;https://github.com/iSoron/uhabits/workflows/Build%20&amp;amp;%20Test/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/iSoron/uhabits/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/iSoron/uhabits&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/iSoron/uhabits/discussions&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/GitHub-Discussions-%23fc4ebc&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Loop is a mobile app that helps you create and maintain good habits, allowing you to achieve your long-term goals. Detailed graphs and statistics show you how your habits improved over time. It is completely ad-free and open source.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.isoron.uhabits&amp;amp;utm_source=global_co&amp;amp;utm_medium=prtnr&amp;amp;utm_content=Mar2515&amp;amp;utm_campaign=PartBadge&amp;amp;pcampaignid=MKT-AC-global-none-all-co-pr-py-PartBadges-Oct1515-1&#34;&gt;&lt;img alt=&#34;Get it on Google Play&#34; src=&#34;https://play.google.com/intl/en_us/badges/images/apps/en-play-badge-border.png&#34; height=&#34;75px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f-droid.org/app/org.isoron.uhabits&#34;&gt;&lt;img alt=&#34;Get it on F-Droid&#34; src=&#34;https://i.imgur.com/baSPE7X.png&#34; height=&#34;75px&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iSoron/uhabits/dev/screenshots/1.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iSoron/uhabits/dev/screenshots/1.thumb.png&#34; alt=&#34;Main screen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/iSoron/uhabits/dev/screenshots/2.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iSoron/uhabits/dev/screenshots/2.thumb.png&#34; alt=&#34;Edit habit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/iSoron/uhabits/dev/screenshots/3.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iSoron/uhabits/dev/screenshots/3.thumb.png&#34; alt=&#34;Habit strength&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/iSoron/uhabits/dev/screenshots/4.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iSoron/uhabits/dev/screenshots/4.thumb.png&#34; alt=&#34;Habit history and streaks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/iSoron/uhabits/dev/screenshots/5.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iSoron/uhabits/dev/screenshots/5.thumb.png&#34; alt=&#34;Widgets&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/iSoron/uhabits/dev/screenshots/6.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iSoron/uhabits/dev/screenshots/6.thumb.png&#34; alt=&#34;Night mode&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;b&gt;Beautiful, minimalistic and lightweight interface.&lt;/b&gt; Loop has an elegant and minimalistic interface that is very easy to use, even for first-time users. Highly optimized for speed, the app works well even on older phones.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;b&gt;Habit score.&lt;/b&gt; Loop has an advanced formula for calculating the strength of your habits. Every repetition makes your habit stronger and every missed day makes it weaker. A few missed days after a long streak, however, will not completely destroy your progress, unlike many other don&#39;t-break-the-chain apps.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;b&gt;Flexible schedules.&lt;/b&gt; In addition to daily habits, Loop supports habits with more complex schedules, such as 3 times per week or every other day.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;b&gt;Reminders.&lt;/b&gt; Schedule notifications to remind you of your habits. Each habit can have its own reminder, at a chosen time of the day. Easily check or dismiss your habit directly from the notification.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;b&gt;Widgets.&lt;/b&gt; Be reminded of your habits whenever you unlock your phone. Colorful widgets allow you to track your habits directly from your home screen, without even opening the app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;b&gt;Take control of your data.&lt;/b&gt; If you want to further analyze your data, or move it to another service, Loop allows you to export it to spreadsheets (CSV) or to a database file (SQLite). For power users, checkmarks can be added through other apps, such as Tasker.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;b&gt;No limitations.&lt;/b&gt; Track as many habits as you wish. Loop imposes no artificial limits on how many habits you can have. All features are available to all users. There are no in-app purchases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;b&gt;Completely ad-free and open source.&lt;/b&gt; There are no advertisements, annoying notifications or intrusive permissions in this app, and there will never be. The app is completely open-source (GPLv3).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;b&gt;Works offline and respects your privacy.&lt;/b&gt; Loop doesn&#39;t require an Internet connection or online account registration. Your confidential data is never sent to anyone. Neither the developers nor any third-parties have access to it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install Loop is through the &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.isoron.uhabits&#34;&gt;Google Play Store&lt;/a&gt; or &lt;a href=&#34;https://f-droid.org/app/org.isoron.uhabits&#34;&gt;F-Droid&lt;/a&gt;. You may also download and install the APK from the &lt;a href=&#34;https://github.com/iSoron/uhabits/releases&#34;&gt;releases page&lt;/a&gt;; note, however, that the app will not be updated automatically. To build this app from the source code, see &lt;a href=&#34;https://github.com/iSoron/uhabits/raw/dev/docs/BUILD.md&#34;&gt;build instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Loop is an open source project developed entirely by volunteers. If you would like to contribute to the project, you are very welcome. There are many ways to contribute, even if you are not a software developer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Report bugs, suggest features.&lt;/strong&gt; The easiest way to contribute is to simply use the app and let us know if you find any problems or have any suggestions to improve it. To report a problem, please &lt;a href=&#34;https://github.com/iSoron/uhabits/issues/new/choose&#34;&gt;create a new bug report&lt;/a&gt;. To request a new feature or vote on existing feature requests, please visit our &lt;a href=&#34;https://github.com/iSoron/uhabits/discussions/categories/feature-requests&#34;&gt;GitHub Discussions page&lt;/a&gt;. If you would like to receive the newest versions of the app earlier than everyone else, &lt;a href=&#34;https://play.google.com/apps/testing/org.isoron.uhabits&#34;&gt;join our open beta on Google Play&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Spread the word.&lt;/strong&gt; If you like the app, share it with your family, friends and colleagues. You can also rate and review the app on Google Play Store, to help other users find it more easily.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Translate the app into your own language.&lt;/strong&gt; If you are not a native English speaker, and would like to see the app translated into your own language, please join our &lt;a href=&#34;https://translate.loophabits.org&#34;&gt;open translation project&lt;/a&gt;. If the translation is already completed, you are also very welcome to join and proofread it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Write some code.&lt;/strong&gt; If you are an Android developer, you are very welcome to contribute with code. Please see the &lt;a href=&#34;https://github.com/iSoron/uhabits/raw/dev/docs/GUIDELINES.md&#34;&gt;guidelines&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://www.gnu.org/graphics/gplv3-88x31.png&#34;&gt; &#xA;&lt;p&gt;Copyright (C) 2016-2021 Álinson Santos Xavier &lt;a href=&#34;mailto:isoron@gmail.com&#34;&gt;isoron@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Loop Habit Tracker is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;Loop Habit Tracker is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>android/architecture-samples</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/android/architecture-samples</id>
    <link href="https://github.com/android/architecture-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of samples to discuss and showcase different architectural tools and patterns for Android apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Android Architecture Blueprints&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/googlesamples/android-architecture/wiki/images/aab-logov2.png&#34; alt=&#34;Illustration by Virginia Poltrack&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Android Architecture Blueprints is a project to showcase different architectural approaches to developing Android apps. In its different branches you&#39;ll find the same app (a TODO app) implemented with small differences.&lt;/p&gt; &#xA;&lt;p&gt;In this branch you&#39;ll find:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User Interface built with &lt;strong&gt;&lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;A single-activity architecture, using &lt;strong&gt;&lt;a href=&#34;https://developer.android.com/jetpack/compose/navigation&#34;&gt;Navigation Compose&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A presentation layer that contains a Compose screen (View) and a &lt;strong&gt;ViewModel&lt;/strong&gt; per screen (or feature).&lt;/li&gt; &#xA; &lt;li&gt;Reactive UIs using &lt;strong&gt;&lt;a href=&#34;https://developer.android.com/kotlin/flow&#34;&gt;Flow&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://kotlinlang.org/docs/coroutines-overview.html&#34;&gt;coroutines&lt;/a&gt;&lt;/strong&gt; for asynchronous operations.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;data layer&lt;/strong&gt; with a repository and two data sources (local using Room and a fake remote).&lt;/li&gt; &#xA; &lt;li&gt;Two &lt;strong&gt;product flavors&lt;/strong&gt;, &lt;code&gt;mock&lt;/code&gt; and &lt;code&gt;prod&lt;/code&gt;, &lt;a href=&#34;https://android-developers.googleblog.com/2015/12/leveraging-product-flavors-in-android.html&#34;&gt;to ease development and testing&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A collection of unit, integration and e2e &lt;strong&gt;tests&lt;/strong&gt;, including &#34;shared&#34; tests that can be run on emulator/device or Robolectric.&lt;/li&gt; &#xA; &lt;li&gt;A simple service locator for inversion of control.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Variations&lt;/h2&gt; &#xA;&lt;p&gt;This project hosts each sample app in separate repository branches. For more information, see the &lt;code&gt;README.md&lt;/code&gt; file in each branch.&lt;/p&gt; &#xA;&lt;h3&gt;Stable samples - Kotlin&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sample&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture/tree/main&#34;&gt;main&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This branch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture/tree/hilt&#34;&gt;hilt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A simple Hilt setup that removes the two flavors and service locator (not using Compose yet)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture/tree/livedata&#34;&gt;livedata&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Uses LiveData instead of StateFlow as the data stream solution&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture/tree/usecases&#34;&gt;usecases&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adds a new domain layer that uses UseCases for business logic (not using Compose yet)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture/tree/views&#34;&gt;views&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Uses Views instead of Jetpack Compose to render UI elements on the screen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Why a to-do app?&lt;/h2&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://github.com/googlesamples/android-architecture/wiki/images/todoapp.gif&#34; alt=&#34;A demo illustraating the UI of the app&#34; width=&#34;288&#34; height=&#34;512&#34; style=&#34;display: inline; float: right&#34;&gt; &#xA;&lt;p&gt;The app in this project aims to be simple enough that you can understand it quickly, but complex enough to showcase difficult design decisions and testing scenarios. For more information, see the &lt;a href=&#34;https://github.com/googlesamples/android-architecture/wiki/To-do-app-specification&#34;&gt;app&#39;s specification&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is it not?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A UI/Material Design sample. The interface of the app is deliberately kept simple to focus on architecture. Check out the &lt;a href=&#34;https://github.com/android/compose-samples&#34;&gt;Compose Samples&lt;/a&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;A complete Jetpack sample covering all libraries. Check out &lt;a href=&#34;https://github.com/googlesamples/android-sunflower&#34;&gt;Android Sunflower&lt;/a&gt; or the advanced &lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/tree/master/GithubBrowserSample&#34;&gt;GitHub Browser Sample&lt;/a&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;A real production app with network access, user authentication, etc. Check out the &lt;a href=&#34;https://github.com/android/nowinandroid&#34;&gt;Now in Android app&lt;/a&gt; instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who is it for?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intermediate developers and beginners looking for a way to structure their app in a testable and maintainable way.&lt;/li&gt; &#xA; &lt;li&gt;Advanced developers looking for quick reference.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Opening a sample in Android Studio&lt;/h2&gt; &#xA;&lt;p&gt;To open one of the samples in Android Studio, begin by checking out one of the sample branches, and then open the root directory in Android Studio. The following series of steps illustrate how to open the &lt;a href=&#34;https://raw.githubusercontent.com/android/architecture-samples/main/tree/usecases/&#34;&gt;usecases&lt;/a&gt; sample.&lt;/p&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:android/architecture-samples.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This step checks out the master branch. If you want to change to a different sample:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout usecases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To review a different sample, replace &lt;code&gt;usecases&lt;/code&gt; with the name of sample you want to check out.&lt;/p&gt; &#xA;&lt;p&gt;Finally open the &lt;code&gt;architecture-samples/&lt;/code&gt; directory in Android Studio.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2022 Google, Inc.&#xA;&#xA;Licensed to the Apache Software Foundation (ASF) under one or more contributor&#xA;license agreements. See the NOTICE file distributed with this work for&#xA;additional information regarding copyright ownership. The ASF licenses this&#xA;file to you under the Apache License, Version 2.0 (the &#34;License&#34;); you may not&#xA;use this file except in compliance with the License. You may obtain a copy of&#xA;the License at&#xA;&#xA;http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT&#xA;WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the&#xA;License for the specific language governing permissions and limitations under&#xA;the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>afollestad/material-dialogs</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/afollestad/material-dialogs</id>
    <link href="https://github.com/afollestad/material-dialogs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;😍 A beautiful, fluid, and extensible dialogs API for Kotlin &amp; Android.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Material Dialogs&lt;/h1&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/afollestad/material-dialogs/releases&#34;&gt;View Releases and Changelogs&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/afollestad/material-dialogs/actions?query=workflow%3A%22Android+CI%22&#34;&gt;&lt;img src=&#34;https://github.com/afollestad/material-dialogs/workflows/Android%20CI/badge.svg?sanitize=true&#34; alt=&#34;Android CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/drummeraidan_50/material-dialogs?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=afollestad/material-dialogs&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/0a4acc30a9ce440087f7688735359bb8&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/art/showcase4.png&#34; alt=&#34;Showcase&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Modules&lt;/h1&gt; &#xA;&lt;p&gt;The core module is the fundamental module that you need in order to use this library. The others are extensions to core.&lt;/p&gt; &#xA;&lt;p&gt;Please note that since Material Dialogs 2.x.x, this library only supports Kotlin. The latest Java version is &lt;code&gt;0.9.6.0&lt;/code&gt; and can be found &lt;a href=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/README_OLD.md&#34;&gt;here&lt;/a&gt;. Note that 0.9.6.0 is unsupported, bugs &amp;amp; improvements will not be made to that version.&lt;/p&gt; &#xA;&lt;h2&gt;Core&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/com/afollestad/material-dialogs/core&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/com.afollestad.material-dialogs/core?label=core&amp;amp;style=for-the-badge&#34; alt=&#34;Core&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/documentation/CORE.md&#34;&gt;Core Tutorial and Samples&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;core&lt;/code&gt; module contains everything you need to get started with the library. It contains all core and normal-use functionality.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/art/basic_with_buttons.png&#34; width=&#34;250px&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  ...&#xA;  implementation &#39;com.afollestad.material-dialogs:core:3.3.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Input&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/com/afollestad/material-dialogs/input&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/com.afollestad.material-dialogs/input?label=input&amp;amp;style=for-the-badge&#34; alt=&#34;Input&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/documentation/INPUT.md&#34;&gt;Input Tutorial and Samples&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;input&lt;/code&gt; module contains extensions to the core module, such as a text input dialog.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/art/input.png&#34; width=&#34;250px&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  ...&#xA;  implementation &#39;com.afollestad.material-dialogs:input:3.3.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Files&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/com/afollestad/material-dialogs/files&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/com.afollestad.material-dialogs/files?label=files&amp;amp;style=for-the-badge&#34; alt=&#34;Files&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/documentation/FILES.md&#34;&gt;Files Tutorial and Samples&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;files&lt;/code&gt; module contains extensions to the core module, such as a file and folder chooser.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/art/file_chooser.png&#34; width=&#34;250px&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  ...&#xA;  implementation &#39;com.afollestad.material-dialogs:files:3.3.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Color&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/com/afollestad/material-dialogs/color&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/com.afollestad.material-dialogs/color?label=color&amp;amp;style=for-the-badge&#34; alt=&#34;Color&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/documentation/COLOR.md&#34;&gt;Color Tutorial and Samples&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;color&lt;/code&gt; module contains extensions to the core module, such as a color chooser.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/art/color_chooser.png&#34; width=&#34;250px&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  ...&#xA;  implementation &#39;com.afollestad.material-dialogs:color:3.3.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DateTime&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/com/afollestad/material-dialogs/datetime&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/com.afollestad.material-dialogs/datetime?label=datetime&amp;amp;style=for-the-badge&#34; alt=&#34;DateTime&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/documentation/DATETIME.md&#34;&gt;DateTime Tutorial and Samples&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;datetime&lt;/code&gt; module contains extensions to make date, time, and date-time picker dialogs.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/art/datetimepicker.png&#34; width=&#34;500px&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  ...&#xA;  implementation &#39;com.afollestad.material-dialogs:datetime:3.3.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bottom Sheets&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/com/afollestad/material-dialogs/bottomsheets&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/com.afollestad.material-dialogs/bottomsheets?label=bottomsheets&amp;amp;style=for-the-badge&#34; alt=&#34;Bottom Sheets&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/documentation/BOTTOMSHEETS.md&#34;&gt;Bottom Sheets Tutorial and Samples&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;bottomsheets&lt;/code&gt; module contains extensions to turn modal dialogs into bottom sheets, among other functionality like showing a grid of items. Be sure to checkout the sample project for this, too!&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/art/bottomsheet_customview.png&#34; width=&#34;250px&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  ...&#xA;  implementation &#39;com.afollestad.material-dialogs:bottomsheets:3.3.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Lifecycle&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/com/afollestad/material-dialogs/lifecycle&#34;&gt; &lt;img src=&#34;https://img.shields.io/maven-central/v/com.afollestad.material-dialogs/lifecycle?label=lifecycle&amp;amp;style=for-the-badge&#34; alt=&#34;Lifecycle&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/afollestad/material-dialogs/main/documentation/LIFECYCLE.md&#34;&gt;Lifecycle Tutorial and Samples&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;lifecycle&lt;/code&gt; module contains extensions to make dialogs work with AndroidX lifecycles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  ...&#xA;  implementation &#39;com.afollestad.material-dialogs:lifecycle:3.3.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>skydoves/android-developer-roadmap</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/skydoves/android-developer-roadmap</id>
    <link href="https://github.com/skydoves/android-developer-roadmap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🗺 The 2022 Android Developer Roadmap suggests learning paths to understanding Android development.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Android Developer Roadmap 2022&lt;/h1&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves/android-developer-roadmap/actions/workflows/build.yml&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/skydoves/android-developer-roadmap/actions/workflows/build.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mailchi.mp/kotlinweekly/kotlin-weekly-279&#34;&gt;&lt;img alt=&#34;Kotlin Weekly&#34; src=&#34;https://skydoves.github.io/badges/kotlin-weekly2.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://androidweekly.net/issues/issue-495&#34;&gt;&lt;img alt=&#34;Android Weekly&#34; src=&#34;https://skydoves.github.io/badges/android-weekly.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves&#34;&gt;&lt;img alt=&#34;Profile&#34; src=&#34;https://skydoves.github.io/badges/skydoves.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/skydoves/android-developer-roadmap/main/README.md&#34; target=&#34;_blank&#34;&gt; English &lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/skydoves/android-developer-roadmap/main/README_KR.md&#34; target=&#34;_blank&#34;&gt; 한국어 &lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/skydoves/android-developer-roadmap/main/README_DE.md&#34; target=&#34;_blank&#34;&gt; Deutsch &lt;/a&gt;| &lt;a href=&#34;https://raw.githubusercontent.com/skydoves/android-developer-roadmap/main/README_ES.md&#34; target=&#34;_blank&#34;&gt; Español&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/skydoves/android-developer-roadmap/main/README_TR.md&#34; target=&#34;_blank&#34;&gt; Turkish&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/skydoves/android-developer-roadmap/main/README_ID.md&#34; target=&#34;_blank&#34;&gt; Bahasa Indonesia&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Android Developer Roadmap 2022 suggests learning paths to understanding Android development. You can read the roadmap following the line path in the middle of the map. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each node indicates concepts of Android systems, Android SDK, and generally used libraries. It would be helpful to refer to the &lt;a href=&#34;https://developer.android.com/reference&#34;&gt;Android Developers Reference&lt;/a&gt; or GitHub for the specific terminologies. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;In addition, &lt;strong&gt;you don&#39;t need to learn everything from this roadmap&lt;/strong&gt;. So we recommend only reading the sections that would be helpful to you.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skydoves/android-developer-roadmap/main/images/android_developer_roadmap.png&#34; alt=&#34;Roadmap&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://getstream.io/blog/android-developer-roadmap/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/skydoves/android-developer-roadmap/main/images/article.png&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;The 2022 Android Developer Roadmap is designed to give you a comprehensive understanding of the current Android ecosystem and provides suggested learning paths along the way to help you grasp the concepts.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this multipart series, you&#39;ll learn all about the Android development ecosystem following our 2022 Android Developer Roadmap, giving you a more holistic view of the Android community and how you can progress as a developer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://getstream.io/blog/android-developer-roadmap/&#34;&gt;The 2022 Android Developer Roadmap: Part 1&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://getstream.io/blog/android-developer-roadmap-part-2/&#34;&gt;The 2022 Android Developer Roadmap: Part 2&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://getstream.io/blog/android-developer-roadmap-part-3/&#34;&gt;The 2022 Android Developer Roadmap: Part 3&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;d like to get notified as we release future posts, join the &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves/android-developer-roadmap/watchers&#34;&gt;watchers&lt;/a&gt;&lt;/strong&gt; on GitHub or follow &lt;strong&gt;&lt;a href=&#34;https://twitter.com/getstream_io&#34;&gt;Stream&lt;/a&gt;&lt;/strong&gt; on Twitter. You can also follow the &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves&#34;&gt;author&lt;/a&gt;&lt;/strong&gt; of this repository on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Demo Application&lt;/h2&gt; &#xA;&lt;p&gt;This project includes a demo project which shows the roadmap image. You can download the latest APK on the &lt;a href=&#34;https://github.com/skydoves/android-developer-roadmap/releases&#34;&gt;Releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;This project doesn&#39;t cover everything, so if something is missing or should be fixed, anyone can contribute to this project by following the &lt;a href=&#34;https://raw.githubusercontent.com/skydoves/android-developer-roadmap/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; guides.&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;This project is inspired by &lt;a href=&#34;https://github.com/mobile-roadmap/android-developer-roadmap&#34;&gt;Android Developer Roadmap 2020&lt;/a&gt;. So thank you for the authors providing the roadmap ideas. Also, you can learn a lot of knowledge from the repository.&lt;/p&gt; &#xA;&lt;h2&gt;Find this project useful? &lt;span&gt;❤️&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Support it by joining &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves/android-developer-roadmap/stargazers&#34;&gt;stargazers&lt;/a&gt;&lt;/strong&gt; for this repository. &lt;span&gt;⭐&lt;/span&gt; &lt;br&gt; And &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves&#34;&gt;follow&lt;/a&gt;&lt;/strong&gt; me for my next creations! 🤩&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2021 Stream.IO, Inc. All Rights Reserved.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>android/architecture-components-samples</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/android/architecture-components-samples</id>
    <link href="https://github.com/android/architecture-components-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Samples for Android Architecture Components.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Android Architecture Components samples&lt;/h1&gt; &#xA;&lt;p&gt;A collection of samples using the &lt;a href=&#34;https://developer.android.com/arch&#34;&gt;Architecture Components&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/room&#34;&gt;Room&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/lifecycle&#34;&gt;Lifecycle-aware components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/viewmodel&#34;&gt;ViewModels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/livedata&#34;&gt;LiveData&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/paging/&#34;&gt;Paging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/navigation/&#34;&gt;Navigation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/view-binding&#34;&gt;ViewBinding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/workmanager/&#34;&gt;WorkManager&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Samples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/raw/master/BasicSample&#34;&gt;BasicSample&lt;/a&gt;&lt;/strong&gt; - Shows how to persist data using a SQLite database and Room. Also uses ViewModels and LiveData.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/raw/master/PersistenceContentProviderSample&#34;&gt;PersistenceContentProviderSample&lt;/a&gt;&lt;/strong&gt; - Shows how to expose data via a Content Provider using Room.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/raw/master/GithubBrowserSample&#34;&gt;GithubBrowserSample&lt;/a&gt;&lt;/strong&gt; - An &lt;strong&gt;advanced&lt;/strong&gt; sample that uses the Architecture components, Dagger and the Github API, in Kotlin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/raw/master/BasicRxJavaSample&#34;&gt;BasicRxJavaSample&lt;/a&gt;&lt;/strong&gt; - Shows how to use Room with RxJava 2. Also uses ViewModels.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/raw/master/PersistenceMigrationsSample&#34;&gt;PersistenceMigrationsSample&lt;/a&gt;&lt;/strong&gt; - Shows how to implement migrations in Room.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/raw/master/BasicRxJavaSampleKotlin&#34;&gt;BasicRxJavaKotlinSample&lt;/a&gt;&lt;/strong&gt; - Shows how to use ViewModels and Room together with RxJava, in Kotlin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/tree/master/PagingSample&#34;&gt;PagingSample&lt;/a&gt;&lt;/strong&gt; - Shows how to use the Paging library with Room, in Kotlin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/tree/master/PagingWithNetworkSample&#34;&gt;PagingNetworkSample&lt;/a&gt;&lt;/strong&gt; - Shows how to use the Paging library with a backend API via Retrofit, in Kotlin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/tree/master/NavigationBasicSample&#34;&gt;NavigationBasicSample&lt;/a&gt;&lt;/strong&gt; - Shows how to use Navigation to perform navigation and deep linking in Kotlin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/tree/master/NavigationAdvancedSample&#34;&gt;NavigationAdvancedSample&lt;/a&gt;&lt;/strong&gt; - Shows how to handle multiple back stacks with Navigation and a BottomNavigationView.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/tree/master/LiveDataSample&#34;&gt;LiveDataSample&lt;/a&gt;&lt;/strong&gt; - Shows how to integrate Kotlin coroutines with Architecture Components such as &lt;code&gt;LiveData&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/tree/master/ViewBindingSample&#34;&gt;ViewBindingSample&lt;/a&gt;&lt;/strong&gt; - Shows how to use view bindings in an activity and in fragments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/tree/master/WorkManagerSample&#34;&gt;WorkManagerSample&lt;/a&gt;&lt;/strong&gt; - Shows how to use WorkManager to do background work, in Kotlin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/tree/master/WorkManagerMultiprocessSample&#34;&gt;WorkManagerMultiprocessSample&lt;/a&gt;&lt;/strong&gt; - Shows how to use WorkManager in apps that manage multiple processes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reporting Issues&lt;/h3&gt; &#xA;&lt;p&gt;You can report an &lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/issues&#34;&gt;Issue&lt;/a&gt; on the samples using this repository. If you find an issue with the Architecture Components, report it using the &lt;a href=&#34;https://issuetracker.google.com/issues/new?component=197448&amp;amp;template=878802&#34;&gt;Architecture Components Issue Tracker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2018 The Android Open Source Project, Inc.&lt;/p&gt; &#xA;&lt;p&gt;Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kotlin/kotlinx.coroutines</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/Kotlin/kotlinx.coroutines</id>
    <link href="https://github.com/Kotlin/kotlinx.coroutines" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Library support for Kotlin coroutines&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kotlinx.coroutines&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/docs/components-stability.html&#34;&gt;&lt;img src=&#34;https://kotl.in/badges/stable.svg?sanitize=true&#34; alt=&#34;Kotlin Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;JetBrains official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core/1.6.2/pom&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.jetbrains.kotlinx/kotlinx-coroutines-core/1.6.2&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://kotlinlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kotlin-1.6.0-blue.svg?logo=kotlin&#34; alt=&#34;Kotlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.slack.com/messages/coroutines/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-slack-green.svg?logo=slack&#34; alt=&#34;Slack channel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Library support for Kotlin coroutines with &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/#multiplatform&#34;&gt;multiplatform&lt;/a&gt; support. This is a companion version for the Kotlin &lt;code&gt;1.6.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;suspend fun main() = coroutineScope {&#xA;    launch { &#xA;       delay(1000)&#xA;       println(&#34;Kotlin Coroutines World!&#34;) &#xA;    }&#xA;    println(&#34;Hello&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Play with coroutines online &lt;a href=&#34;https://pl.kotl.in/hG_tKbid_&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/kotlinx-coroutines-core/README.md&#34;&gt;core&lt;/a&gt; — common coroutines across all platforms: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&#34;&gt;launch&lt;/a&gt; and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&#34;&gt;async&lt;/a&gt; coroutine builders returning &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&#34;&gt;Job&lt;/a&gt; and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html&#34;&gt;Deferred&lt;/a&gt; light-weight futures with cancellation support;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/index.html&#34;&gt;Dispatchers&lt;/a&gt; object with &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html&#34;&gt;Main&lt;/a&gt; dispatcher for Android/Swing/JavaFx, and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&#34;&gt;Default&lt;/a&gt; dispatcher for background coroutines;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&#34;&gt;delay&lt;/a&gt; and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/yield.html&#34;&gt;yield&lt;/a&gt; top-level suspending functions;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html&#34;&gt;Flow&lt;/a&gt; — cold asynchronous stream with &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow.html&#34;&gt;flow&lt;/a&gt; builder and comprehensive operator set (&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/filter.html&#34;&gt;filter&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&#34;&gt;map&lt;/a&gt;, etc);&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/index.html&#34;&gt;Channel&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/index.html&#34;&gt;Mutex&lt;/a&gt;, and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/index.html&#34;&gt;Semaphore&lt;/a&gt; communication and synchronization primitives;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html&#34;&gt;coroutineScope&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/supervisor-scope.html&#34;&gt;supervisorScope&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-context.html&#34;&gt;withContext&lt;/a&gt;, and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&#34;&gt;withTimeout&lt;/a&gt; scope builders;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-main-scope.html&#34;&gt;MainScope()&lt;/a&gt; for Android and UI applications;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html&#34;&gt;SupervisorJob()&lt;/a&gt; and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html&#34;&gt;CoroutineExceptionHandler&lt;/a&gt; for supervision of coroutines hierarchies;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.selects/select.html&#34;&gt;select&lt;/a&gt; expression support and more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/kotlinx-coroutines-core/jvm/&#34;&gt;core/jvm&lt;/a&gt; — additional core features available on Kotlin/JVM: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-i-o.html&#34;&gt;Dispatchers.IO&lt;/a&gt; dispatcher for blocking coroutines;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/as-coroutine-dispatcher.html&#34;&gt;Executor.asCoroutineDispatcher&lt;/a&gt; extension, custom thread pools, and more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/kotlinx-coroutines-core/js/&#34;&gt;core/js&lt;/a&gt; — additional core features available on Kotlin/JS: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Integration with &lt;code&gt;Promise&lt;/code&gt; via &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/await.html&#34;&gt;Promise.await&lt;/a&gt; and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/promise.html&#34;&gt;promise&lt;/a&gt; builder;&lt;/li&gt; &#xA;   &lt;li&gt;Integration with &lt;code&gt;Window&lt;/code&gt; via &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/as-coroutine-dispatcher.html&#34;&gt;Window.asCoroutineDispatcher&lt;/a&gt;, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/kotlinx-coroutines-test/README.md&#34;&gt;test&lt;/a&gt; — test utilities for coroutines: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/set-main.html&#34;&gt;Dispatchers.setMain&lt;/a&gt; to override &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html&#34;&gt;Dispatchers.Main&lt;/a&gt; in tests;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope/index.html&#34;&gt;TestCoroutineScope&lt;/a&gt; to test suspending functions and coroutines.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/kotlinx-coroutines-debug/README.md&#34;&gt;debug&lt;/a&gt; — debug utilities for coroutines: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/index.html&#34;&gt;DebugProbes&lt;/a&gt; API to probe, keep track of, print and dump active coroutines;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/index.html&#34;&gt;CoroutinesTimeout&lt;/a&gt; test rule to automatically dump coroutines on test timeout.&lt;/li&gt; &#xA;   &lt;li&gt;Automatic integration with &lt;a href=&#34;https://github.com/reactor/BlockHound&#34;&gt;BlockHound&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/reactive/README.md&#34;&gt;reactive&lt;/a&gt; — modules that provide builders and iteration support for various reactive streams libraries: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reactive Streams (&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/collect.html&#34;&gt;Publisher.collect&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-single.html&#34;&gt;Publisher.awaitSingle&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/publish.html&#34;&gt;kotlinx.coroutines.reactive.publish&lt;/a&gt;, etc),&lt;/li&gt; &#xA;   &lt;li&gt;Flow (JDK 9) (the same interface as for Reactive Streams),&lt;/li&gt; &#xA;   &lt;li&gt;RxJava 2.x (&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-flowable.html&#34;&gt;rxFlowable&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-single.html&#34;&gt;rxSingle&lt;/a&gt;, etc), and&lt;/li&gt; &#xA;   &lt;li&gt;RxJava 3.x (&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-flowable.html&#34;&gt;rxFlowable&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-single.html&#34;&gt;rxSingle&lt;/a&gt;, etc), and&lt;/li&gt; &#xA;   &lt;li&gt;Project Reactor (&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/flux.html&#34;&gt;flux&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/mono.html&#34;&gt;mono&lt;/a&gt;, etc).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/ui/README.md&#34;&gt;ui&lt;/a&gt; — modules that provide coroutine dispatchers for various single-threaded UI libraries: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Android, JavaFX, and Swing.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/integration/README.md&#34;&gt;integration&lt;/a&gt; — modules that provide integration with various asynchronous callback- and future-based libraries: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JDK8 &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-jdk8/kotlinx.coroutines.future/await.html&#34;&gt;CompletionStage.await&lt;/a&gt;, Guava &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-guava/kotlinx.coroutines.guava/await.html&#34;&gt;ListenableFuture.await&lt;/a&gt;, and Google Play Services &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-play-services/kotlinx.coroutines.tasks/await.html&#34;&gt;Task.await&lt;/a&gt;;&lt;/li&gt; &#xA;   &lt;li&gt;SLF4J MDC integration via &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/index.html&#34;&gt;MDCContext&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Presentations and videos: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a3agLJQ6vt8&#34;&gt;Kotlin Coroutines in Practice&lt;/a&gt; (Roman Elizarov at KotlinConf 2018, &lt;a href=&#34;https://www.slideshare.net/elizarov/kotlin-coroutines-in-practice-kotlinconf-2018&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=YrrUCSi72E8&#34;&gt;Deep Dive into Coroutines&lt;/a&gt; (Roman Elizarov at KotlinConf 2017, &lt;a href=&#34;https://www.slideshare.net/elizarov/deep-dive-into-coroutines-on-jvm-kotlinconf-2017&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Mj5P47F6nJg&#34;&gt;History of Structured Concurrency in Coroutines&lt;/a&gt; (Roman Elizarov at Hydra 2019, &lt;a href=&#34;https://speakerdeck.com/elizarov/structured-concurrency&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Guides and manuals: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/coroutines-guide.html&#34;&gt;Guide to kotlinx.coroutines by example&lt;/a&gt; (&lt;strong&gt;read it first&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/ui/coroutines-guide-ui.md&#34;&gt;Guide to UI programming with coroutines&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/docs/topics/debugging.md&#34;&gt;Debugging capabilities in kotlinx.coroutines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/docs/topics/compatibility.md&#34;&gt;Compatibility policy and experimental annotations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/CHANGES.md&#34;&gt;Change log for kotlinx.coroutines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kotlin/KEEP/raw/master/proposals/coroutines.md&#34;&gt;Coroutines design document (KEEP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines&#34;&gt;Full kotlinx.coroutines API reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using in your projects&lt;/h2&gt; &#xA;&lt;h3&gt;Maven&lt;/h3&gt; &#xA;&lt;p&gt;Add dependencies (you can also add other modules that you need):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.jetbrains.kotlinx&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;kotlinx-coroutines-core&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.6.2&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And make sure that you use the latest Kotlin version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;properties&amp;gt;&#xA;    &amp;lt;kotlin.version&amp;gt;1.6.20&amp;lt;/kotlin.version&amp;gt;&#xA;&amp;lt;/properties&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;p&gt;Add dependencies (you can also add other modules that you need):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;dependencies {&#xA;    implementation(&#34;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.2&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And make sure that you use the latest Kotlin version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;    // For build.gradle.kts (Kotlin DSL)&#xA;    kotlin(&#34;jvm&#34;) version &#34;1.6.20&#34;&#xA;    &#xA;    // For build.gradle (Groovy DSL)&#xA;    id &#34;org.jetbrains.kotlin.jvm&#34; version &#34;1.6.20&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that you have &lt;code&gt;mavenCentral()&lt;/code&gt; in the list of repositories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/ui/kotlinx-coroutines-android&#34;&gt;&lt;code&gt;kotlinx-coroutines-android&lt;/code&gt;&lt;/a&gt; module as a dependency when using &lt;code&gt;kotlinx.coroutines&lt;/code&gt; on Android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.2&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gives you access to the Android &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html&#34;&gt;Dispatchers.Main&lt;/a&gt; coroutine dispatcher and also makes sure that in case of a crashed coroutine with an unhandled exception that this exception is logged before crashing the Android application, similarly to the way uncaught exceptions in threads are handled by the Android runtime.&lt;/p&gt; &#xA;&lt;h4&gt;R8 and ProGuard&lt;/h4&gt; &#xA;&lt;p&gt;R8 and ProGuard rules are bundled into the &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/ui/kotlinx-coroutines-android&#34;&gt;&lt;code&gt;kotlinx-coroutines-android&lt;/code&gt;&lt;/a&gt; module. For more details see &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/ui/kotlinx-coroutines-android/README.md#optimization&#34;&gt;&#34;Optimization&#34; section for Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Avoiding including the debug infrastructure in the resulting APK&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; artifact contains a resource file that is not required for the coroutines to operate normally and is only used by the debugger. To exclude it at no loss of functionality, add the following snippet to the &lt;code&gt;android&lt;/code&gt; block in your Gradle file for the application subproject:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;packagingOptions {&#xA;    resources.excludes += &#34;DebugProbesKt.bin&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiplatform&lt;/h3&gt; &#xA;&lt;p&gt;Core modules of &lt;code&gt;kotlinx.coroutines&lt;/code&gt; are also available for &lt;a href=&#34;https://kotlinlang.org/docs/reference/js-overview.html&#34;&gt;Kotlin/JS&lt;/a&gt; and &lt;a href=&#34;https://kotlinlang.org/docs/reference/native-overview.html&#34;&gt;Kotlin/Native&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In common code that should get compiled for different platforms, you can add a dependency to &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; right to the &lt;code&gt;commonMain&lt;/code&gt; source set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;commonMain {&#xA;    dependencies {&#xA;        implementation(&#34;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.2&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No more additional dependencies are needed, platform-specific artifacts will be resolved automatically via Gradle metadata available since Gradle 5.3.&lt;/p&gt; &#xA;&lt;p&gt;Platform-specific dependencies are recommended to be used only for non-multiplatform projects that are compiled only for target platform.&lt;/p&gt; &#xA;&lt;h4&gt;JS&lt;/h4&gt; &#xA;&lt;p&gt;Kotlin/JS version of &lt;code&gt;kotlinx.coroutines&lt;/code&gt; is published as &lt;a href=&#34;https://search.maven.org/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core-js/1.6.2/jar&#34;&gt;&lt;code&gt;kotlinx-coroutines-core-js&lt;/code&gt;&lt;/a&gt; (follow the link to get the dependency declaration snippet) and as &lt;a href=&#34;https://www.npmjs.com/package/kotlinx-coroutines-core&#34;&gt;&lt;code&gt;kotlinx-coroutines-core&lt;/code&gt;&lt;/a&gt; NPM package.&lt;/p&gt; &#xA;&lt;h4&gt;Native&lt;/h4&gt; &#xA;&lt;p&gt;Kotlin/Native version of &lt;code&gt;kotlinx.coroutines&lt;/code&gt; is published as &lt;a href=&#34;https://mvnrepository.com/search?q=kotlinx-coroutines-core-&#34;&gt;&lt;code&gt;kotlinx-coroutines-core-$platform&lt;/code&gt;&lt;/a&gt; where &lt;code&gt;$platform&lt;/code&gt; is the target Kotlin/Native platform. &lt;a href=&#34;https://github.com/Kotlin/kotlinx.coroutines/raw/master/gradle/compile-native-multiplatform.gradle#L16&#34;&gt;List of currently supported targets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Only single-threaded code (JS-style) on Kotlin/Native is supported in stable versions. Additionally, a special &lt;code&gt;-native-mt&lt;/code&gt; version is released on a regular basis, for the state of multi-threaded coroutines support please follow the &lt;a href=&#34;https://github.com/Kotlin/kotlinx.coroutines/issues/462&#34;&gt;corresponding issue&lt;/a&gt; for the additional details.&lt;/p&gt; &#xA;&lt;p&gt;Since Kotlin/Native does not generally provide binary compatibility between versions, you should use the same version of the Kotlin/Native compiler as was used to build &lt;code&gt;kotlinx.coroutines&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building and Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-core --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.flow --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.channels --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.selects --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.sync --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-test --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.test --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-debug --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.debug --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.debug.junit4 --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-slf4j --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.slf4j --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-jdk8 --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.future --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-guava --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.guava --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-play-services --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.tasks --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-reactive --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.reactive --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-rx2 --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.rx2 --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-rx2 --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.rx2 --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-reactor --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.reactor --&gt; &#xA;&lt;!-- END --&gt;</summary>
  </entry>
  <entry>
    <title>guolindev/PermissionX</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/guolindev/PermissionX</id>
    <link href="https://github.com/guolindev/PermissionX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source Android library that makes handling runtime permissions extremely easy.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PermissionX&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/sinyu890807/category_10108528.html&#34;&gt;中文文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PermissionX is an extension Android library that makes Android runtime permission request extremely easy. You can use it for basic permission request occasions or handle more complex conditions, like showing rationale dialog or go to app settings for allowance manually.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Setup&lt;/h2&gt; &#xA;&lt;p&gt;Edit your build.gradle file and add below dependency.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {&#xA;  google()&#xA;  mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;    implementation &#39;com.guolindev.permissionx:permissionx:1.6.4&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s all. Now you are ready to go.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use PermissionX to request Android runtime permissions is extremely simple.&lt;/p&gt; &#xA;&lt;p&gt;For example. If you want to request READ_CONTACTS, CAMERA and CALL_PHONE permissions, declared them in the AndroidManifest.xml first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;manifest xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#xA;    package=&#34;com.permissionx.app&#34;&amp;gt;&#xA;&#xA;&#x9;&amp;lt;uses-permission android:name=&#34;android.permission.READ_CONTACTS&#34; /&amp;gt;&#xA;&#x9;&amp;lt;uses-permission android:name=&#34;android.permission.CAMERA&#34; /&amp;gt;&#xA;&#x9;&amp;lt;uses-permission android:name=&#34;android.permission.CALL_PHONE&#34; /&amp;gt;&#xA;&#xA;&amp;lt;/manifest&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use below codes to request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;PermissionX.init(activity)&#xA;    .permissions(Manifest.permission.READ_CONTACTS, Manifest.permission.CAMERA, Manifest.permission.CALL_PHONE)&#xA;    .request { allGranted, grantedList, deniedList -&amp;gt;&#xA;        if (allGranted) {&#xA;            Toast.makeText(this, &#34;All permissions are granted&#34;, Toast.LENGTH_LONG).show()&#xA;        } else {&#xA;            Toast.makeText(this, &#34;These permissions are denied: $deniedList&#34;, Toast.LENGTH_LONG).show()&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pass any instance of FragmentActivity or Fragment into &lt;strong&gt;init&lt;/strong&gt; method, and specify the permissions that you want to request in the &lt;strong&gt;permissions&lt;/strong&gt; method, then call &lt;strong&gt;request&lt;/strong&gt; method for actual request.&lt;/p&gt; &#xA;&lt;p&gt;The request result will be callback in the request lambda. &lt;strong&gt;allGranted&lt;/strong&gt; means if all permissions that you requested are granted by user, maybe true or false. &lt;strong&gt;grantedList&lt;/strong&gt; holds all granted permissions and &lt;strong&gt;deniedList&lt;/strong&gt; holds all denied permissions.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/guolindev/PermissionX/master/screenshots/1.gif&#34; width=&#34;32%&#34;&gt; &#xA;&lt;p&gt;Now you can write your own logic in the request lambda to handle the specific cases of your app.&lt;/p&gt; &#xA;&lt;h2&gt;More Usage&lt;/h2&gt; &#xA;&lt;p&gt;As you know, Android provide &lt;strong&gt;shouldShowRequestPermissionRationale&lt;/strong&gt; method to indicate us if we should show a rationale dialog to explain to user why we need this permission. Otherwise user may deny the permissions we requested and checked &lt;strong&gt;never ask again&lt;/strong&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;To simplify this process, PermissionX provide &lt;strong&gt;onExplainRequestReason&lt;/strong&gt; method. Chain this method before &lt;strong&gt;request&lt;/strong&gt; method, If user deny one of the permissions, &lt;strong&gt;onExplainRequestReason&lt;/strong&gt; method will get callback first. Then you can call &lt;strong&gt;showRequestReasonDialog&lt;/strong&gt; method to explain to user why these permissions are necessary like below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;PermissionX.init(activity)&#xA;    .permissions(Manifest.permission.READ_CONTACTS, Manifest.permission.CAMERA, Manifest.permission.CALL_PHONE)&#xA;    .onExplainRequestReason { scope, deniedList -&amp;gt;&#xA;        scope.showRequestReasonDialog(deniedList, &#34;Core fundamental are based on these permissions&#34;, &#34;OK&#34;, &#34;Cancel&#34;)&#xA;    }&#xA;    .request { allGranted, grantedList, deniedList -&amp;gt;&#xA;        if (allGranted) {&#xA;            Toast.makeText(this, &#34;All permissions are granted&#34;, Toast.LENGTH_LONG).show()&#xA;        } else {&#xA;            Toast.makeText(this, &#34;These permissions are denied: $deniedList&#34;, Toast.LENGTH_LONG).show()&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;showRequestReasonDialog&lt;/strong&gt; method will prompt a rationale dialog with the information that second parameter provide. If user click positive button which shows text as third parameter provide, PermissionX will request again with the permissions that first parameter provide.&lt;/p&gt; &#xA;&lt;p&gt;The fourth parameter as text for negative button is optional. If the denied permissions are necessary, you can ignore the fourth parameter and the dialog will be uncancelable. Which means user must allow these permissions for further usage.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/guolindev/PermissionX/master/screenshots/2.gif&#34; width=&#34;32%&#34;&gt; &#xA;&lt;p&gt;Of course, user still may deny some permissions and checked &lt;strong&gt;never ask again&lt;/strong&gt; option. In this case, each time we request these permissions again will be denied automatically. The only thing we could do is prompt to users they need to allow these permissions manually in app settings for continuation usage. But PermissionX did better.&lt;/p&gt; &#xA;&lt;p&gt;PermissionX provide &lt;strong&gt;onForwardToSettings&lt;/strong&gt; method for handling this occasion. Chain this method before &lt;strong&gt;request&lt;/strong&gt; method, If some permissions are &#34;denied and never ask again&#34; by user, &lt;strong&gt;onForwardToSettings&lt;/strong&gt; method will get callback. Then you can call &lt;strong&gt;showForwardToSettingsDialog&lt;/strong&gt; method like below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;PermissionX.init(activity)&#xA;    .permissions(Manifest.permission.READ_CONTACTS, Manifest.permission.CAMERA, Manifest.permission.CALL_PHONE)&#xA;    .onExplainRequestReason { scope, deniedList -&amp;gt;&#xA;        scope.showRequestReasonDialog(deniedList, &#34;Core fundamental are based on these permissions&#34;, &#34;OK&#34;, &#34;Cancel&#34;)&#xA;    }&#xA;    .onForwardToSettings { scope, deniedList -&amp;gt;&#xA;        scope.showForwardToSettingsDialog(deniedList, &#34;You need to allow necessary permissions in Settings manually&#34;, &#34;OK&#34;, &#34;Cancel&#34;)&#xA;    }&#xA;    .request { allGranted, grantedList, deniedList -&amp;gt;&#xA;        if (allGranted) {&#xA;            Toast.makeText(this, &#34;All permissions are granted&#34;, Toast.LENGTH_LONG).show()&#xA;        } else {&#xA;            Toast.makeText(this, &#34;These permissions are denied: $deniedList&#34;, Toast.LENGTH_LONG).show()&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The parameters in &lt;strong&gt;onForwardToSettings&lt;/strong&gt; method are similar with &lt;strong&gt;showRequestReasonDialog&lt;/strong&gt; method. When user click positive button, PermissionX will forward to the settings page of your app and user can turn on the necessary permissions very quickly. When user switch back to app, PermissionX will request the necessary permissions again automatically.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/guolindev/PermissionX/master/screenshots/3.gif&#34; width=&#34;32%&#34;&gt; &#xA;&lt;h2&gt;Explain Before Request&lt;/h2&gt; &#xA;&lt;p&gt;It is always a good manner to show the rationale dialog and explain to users why you need these permissions before you actually request them.&lt;/p&gt; &#xA;&lt;p&gt;To do that with PermissionX is quite simple. Just use &lt;strong&gt;explainReasonBeforeRequest&lt;/strong&gt; method like below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;PermissionX.init(activity)&#xA;    .permissions(Manifest.permission.READ_CONTACTS, Manifest.permission.CAMERA, Manifest.permission.CALL_PHONE)&#xA;    .explainReasonBeforeRequest()&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now everything works like charm.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/guolindev/PermissionX/master/screenshots/4.gif&#34; width=&#34;32%&#34;&gt; &#xA;&lt;h2&gt;Dark Theme&lt;/h2&gt; &#xA;&lt;p&gt;The rationale dialog provided by PermissionsX support Android dark theme automatically. If you change your device into dark theme, everything just works great.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/guolindev/PermissionX/master/screenshots/5.gif&#34; width=&#34;32%&#34;&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (C) guolin, PermissionX Open Source Project&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;     http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>oss-review-toolkit/ort</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/oss-review-toolkit/ort</id>
    <link href="https://github.com/oss-review-toolkit/ort" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A suite of tools to assist with reviewing Open Source Software dependencies.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/ort.png&#34; alt=&#34;OSS Review Toolkit Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/ort-talk/shared_invite/enQtMzk3MDU5Njk0Njc1LThiNmJmMjc5YWUxZTU4OGI5NmY3YTFlZWM5YTliZmY5ODc0MGMyOWIwYmRiZWFmNGMzOWY2NzVhYTI0NTJkNmY&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Join_us_on_Slack!-ort--talk-blue.svg?longCache=true&amp;amp;logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/oss-review-toolkit/ort/actions/workflows/gradle-wrapper-validation.yml&#34;&gt;&lt;img src=&#34;https://github.com/oss-review-toolkit/ort/actions/workflows/gradle-wrapper-validation.yml/badge.svg?sanitize=true&#34; alt=&#34;Validate Gradle Wrapper&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/actions/workflows/static-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/oss-review-toolkit/ort/actions/workflows/static-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;Static Analysis&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/oss-review-toolkit/ort/actions/workflows/build-and-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/oss-review-toolkit/ort/actions/workflows/build-and-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build and Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jitpack.io/#oss-review-toolkit/ort&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/oss-review-toolkit/ort.svg?sanitize=true&#34; alt=&#34;JitPack build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/oss-review-toolkit/ort&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/oss-review-toolkit/ort/branch/main/graph/badge.svg?token=QD2tCSUTVN&#34; alt=&#34;Code coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tickgit.com/browse?repo=github.com/oss-review-toolkit/ort&#34;&gt;&lt;img src=&#34;https://badgen.net/https/api.tickgit.com/badgen/github.com/oss-review-toolkit/ort&#34; alt=&#34;TODOs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/oss-review-toolkit/ort/alerts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/oss-review-toolkit/ort.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;LGTM&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://api.reuse.software/info/github.com/oss-review-toolkit/ort&#34;&gt;&lt;img src=&#34;https://api.reuse.software/badge/github.com/oss-review-toolkit/ort&#34; alt=&#34;REUSE status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/4618&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/4618/badge&#34; alt=&#34;CII&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;The OSS Review Toolkit (ORT) aims to assist with the tasks that commonly need to be performed in the context of license compliance checks, especially for (but not limited to) Free and Open Source Software dependencies.&lt;/p&gt; &#xA;&lt;p&gt;It does so by orchestrating a &lt;em&gt;highly customizable&lt;/em&gt; pipeline of tools that &lt;em&gt;abstract away&lt;/em&gt; the underlying services. These tools are implemented as libraries (for programmatic use) and exposed via a command line interface (for scripted use):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#analyzer&#34;&gt;&lt;em&gt;Analyzer&lt;/em&gt;&lt;/a&gt; - determines the dependencies of projects and their metadata, abstracting which package managers or build systems are actually being used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#downloader&#34;&gt;&lt;em&gt;Downloader&lt;/em&gt;&lt;/a&gt; - fetches all source code of the projects and their dependencies, abstracting which Version Control System (VCS) or other means are used to retrieve the source code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#scanner&#34;&gt;&lt;em&gt;Scanner&lt;/em&gt;&lt;/a&gt; - uses configured source code scanners to detect license / copyright findings, abstracting the type of scanner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#advisor&#34;&gt;&lt;em&gt;Advisor&lt;/em&gt;&lt;/a&gt; - retrieves security advisories for used dependencies from configured vulnerability data services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#evaluator&#34;&gt;&lt;em&gt;Evaluator&lt;/em&gt;&lt;/a&gt; - evaluates license / copyright findings against customizable policy rules and license classifications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#reporter&#34;&gt;&lt;em&gt;Reporter&lt;/em&gt;&lt;/a&gt; - presents results in various formats such as visual reports, Open Source notices or Bill-Of-Materials (BOMs) to easily identify dependencies, licenses, copyrights or policy rule violations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/notifier&#34;&gt;&lt;em&gt;Notifier&lt;/em&gt;&lt;/a&gt; - sends result notifications via different channels (like &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/examples/notifications/src/main/resources/example.notifications.kts&#34;&gt;emails&lt;/a&gt; and / or JIRA tickets).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;From binaries&lt;/h2&gt; &#xA;&lt;p&gt;Preliminary binary artifacts for ORT are currently available via &lt;a href=&#34;https://jitpack.io/#oss-review-toolkit/ort&#34;&gt;JitPack&lt;/a&gt;. Please note that due to limitations with the JitPack build environment, the reporter is not able to create the Web App report.&lt;/p&gt; &#xA;&lt;h2&gt;From sources&lt;/h2&gt; &#xA;&lt;p&gt;Install the following basic prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git (any recent version will do).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then clone this repository. If you intend to run tests, you need to clone with submodules by running &lt;code&gt;git clone --recurse-submodules&lt;/code&gt;. If you have already cloned non-recursively, you can initialize submodules afterwards by running &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build using Docker&lt;/h3&gt; &#xA;&lt;p&gt;Install the following basic prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker 18.09 or later (and ensure its daemon is running).&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;a href=&#34;https://docs.docker.com/develop/develop-images/build_enhancements/#to-enable-buildkit-builds&#34;&gt;BuildKit&lt;/a&gt; for Docker.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Change into the directory with ORT&#39;s source code and run &lt;code&gt;docker build -t ort .&lt;/code&gt;. Alternatively, use the script at &lt;code&gt;scripts/docker_build.sh&lt;/code&gt; which also sets the ORT version from the Git revision.&lt;/p&gt; &#xA;&lt;h3&gt;Build natively&lt;/h3&gt; &#xA;&lt;p&gt;Install these additional prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java Development Kit (JDK) version 11 or later; also remember to set the &lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable accordingly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Change into the directory with ORT&#39;s source code and run &lt;code&gt;./gradlew installDist&lt;/code&gt; (on the first run this will bootstrap Gradle and download all required dependencies).&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;ORT can now be run using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./cli/build/install/ort/bin/ort --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you make any changes to ORT&#39;s source code, you would have to regenerate the distribution using the steps above.&lt;/p&gt; &#xA;&lt;p&gt;To avoid that, you can also build and run ORT in one go (if you have the prerequisites from the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#build-natively&#34;&gt;Build natively&lt;/a&gt; section installed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew cli:run --args=&#34;--help&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in this case the working directory used by ORT is that of the &lt;code&gt;cli&lt;/code&gt; project, not the directory &lt;code&gt;gradlew&lt;/code&gt; is located in (see &lt;a href=&#34;https://github.com/gradle/gradle/issues/6074&#34;&gt;https://github.com/gradle/gradle/issues/6074&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;Running the tools&lt;/h1&gt; &#xA;&lt;p&gt;Like for building ORT from sources you have the option to run ORT from a Docker image (which comes with all runtime dependencies) or to run ORT natively (in which case some additional requirements need to be fulfilled).&lt;/p&gt; &#xA;&lt;h2&gt;Run using Docker&lt;/h2&gt; &#xA;&lt;p&gt;After you have built the image as &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#build-using-docker&#34;&gt;described above&lt;/a&gt;, simply run &lt;code&gt;docker run &amp;lt;DOCKER_ARGS&amp;gt; ort &amp;lt;ORT_ARGS&amp;gt;&lt;/code&gt;. You typically use &lt;code&gt;&amp;lt;DOCKER_ARGS&amp;gt;&lt;/code&gt; to mount the project directory to analyze into the container for ORT to access it, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v /workspace:/project ort --info analyze -f JSON -i /project -o /project/ort/analyzer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find further hints for using ORT with Docker in the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/hints-for-use-with-docker.md&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Run natively&lt;/h2&gt; &#xA;&lt;p&gt;First of all, make sure that the locale of your system is set to &lt;code&gt;en_US.UTF-8&lt;/code&gt; as using other locales might lead to issues with parsing the output of some external tools.&lt;/p&gt; &#xA;&lt;p&gt;Then install any missing external command line tools as listed by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./cli/build/install/ort/bin/ort requirements&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew cli:run --args=&#34;requirements&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run ORT like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./cli/build/install/ort/bin/ort --info analyze -f JSON -i /project -o /project/ort/analyzer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew cli:run --args=&#34;--info analyze -f JSON -i /project -o /project/ort/analyzer&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running on CI&lt;/h2&gt; &#xA;&lt;p&gt;A basic ORT pipeline (using the &lt;em&gt;analyzer&lt;/em&gt;, &lt;em&gt;scanner&lt;/em&gt; and &lt;em&gt;reporter&lt;/em&gt;) can easily be run on &lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins CI&lt;/a&gt; by using the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/integrations/Jenkinsfile&#34;&gt;Jenkinsfile&lt;/a&gt; in a (declarative) &lt;a href=&#34;https://jenkins.io/doc/book/pipeline/&#34;&gt;pipeline&lt;/a&gt; job. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/integrations/Jenkinsfile&#34;&gt;Jenkinsfile&lt;/a&gt; itself for documentation of the required Jenkins plugins. The job accepts various parameters that are translated to ORT command line arguments. Additionally, one can trigger a downstream job which e.g. further processes scan results. Note that it is the downstream job&#39;s responsibility to copy any artifacts it needs from the upstream job.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/getting-started.md&#34;&gt;Getting Started&lt;/a&gt; for an introduction to the individual tools.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;ORT supports several environment variables that influence its behavior:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ORT_DATA_DIR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;~/.ort&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All data, like caches, archives, storages (read &amp;amp; write)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ORT_CONFIG_DIR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_DATA_DIR/config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configuration files, see below (read only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ORT_HTTP_USERNAME&lt;/td&gt; &#xA;   &lt;td&gt;Empty (n/a)&lt;/td&gt; &#xA;   &lt;td&gt;Generic username to use for HTTP(S) downloads&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ORT_HTTP_PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;Empty (n/a)&lt;/td&gt; &#xA;   &lt;td&gt;Generic password to use for HTTP(S) downloads&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;http_proxy&lt;/td&gt; &#xA;   &lt;td&gt;Empty (n/a)&lt;/td&gt; &#xA;   &lt;td&gt;Proxy to use for HTTP downloads&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;https_proxy&lt;/td&gt; &#xA;   &lt;td&gt;Empty (n/a)&lt;/td&gt; &#xA;   &lt;td&gt;Proxy to use for HTTPS downloads&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Configuration files&lt;/h3&gt; &#xA;&lt;p&gt;ORT looks for its configuration files in the directory pointed to by the &lt;code&gt;ORT_CONFIG_DIR&lt;/code&gt; environment variable. If this variable is not set, it defaults to the &lt;code&gt;config&lt;/code&gt; directory below the directory pointed to by the &lt;code&gt;ORT_DATA_DIR&lt;/code&gt; environment variable, which in turn defaults to the &lt;code&gt;.ort&lt;/code&gt; directory below the current user&#39;s home directory.&lt;/p&gt; &#xA;&lt;p&gt;The following provides an overview of the various configuration files that can be used to customize ORT behavior:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/model/src/main/resources/reference.conf&#34;&gt;ORT configuration file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The main configuration file for the operation of ORT. This configuration is maintained by an administrator who manages the ORT instance. In contrast to the configuration files in the following, this file rarely changes once ORT is operational.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HOCON&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/ort.conf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/model/src/main/resources/reference.conf&#34;&gt;reference configuration file&lt;/a&gt; gives a good impression about the content of the main ORT configuration file. It consists of sections related to different sub components of ORT. The meaning of these sections and the properties they can contain is described together with the corresponding sub components.&lt;/p&gt; &#xA;&lt;p&gt;While the file is rather static, there are means to override configuration options for a specific run of ORT or to customize the configuration to a specific environment. The following options are supported, in order of precedence:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Properties can be defined via environment variables by using the full property path as the variable name. For instance, one can override the Postgres schema by setting &lt;code&gt;ort.scanner.storages.postgres.schema=test_schema&lt;/code&gt;. The variable&#39;s name is case sensitive. Some programs like Bash do not support dots in variable names. For this case, the dots can be replaced by double underscores, i.e., the above example is turned into &lt;code&gt;ort__scanner__storages__postgres__schema=test_schema&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In addition to that, one can override the values of properties on the command line using the &lt;code&gt;-P&lt;/code&gt; option. The option expects a key-value pair. Again, the key must define the full path to the property to be overridden, e.g. &lt;code&gt;-P ort.scanner.storages.postgres.schema=test_schema&lt;/code&gt;. The &lt;code&gt;-P&lt;/code&gt; option can be repeated on the command line to override multiple properties.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Properties in the configuration file can reference environment variables using the syntax &lt;code&gt;${VAR}&lt;/code&gt;. This is especially useful to reference dynamic or sensitive data. As an example, the credentials for the Postgres database used as scan results storage could be defined in the &lt;code&gt;POSTGRES_USERNAME&lt;/code&gt; and &lt;code&gt;POSTGRES_PASSWORD&lt;/code&gt; environment variables. The configuration file can then reference these values as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;postgres {&#xA;  url = &#34;jdbc:postgresql://your-postgresql-server:5444/your-database&#34;&#xA;  username = ${POSTGRES_USERNAME}&#xA;  password = ${POSTGRES_PASSWORD}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/config-file-copyright-garbage-yml.md&#34;&gt;Copyright garbage file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A list of copyright statements that are considered garbage, for example statements that were incorrectly classified as copyrights by the scanner.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML / JSON&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/copyright-garbage.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/config-file-curations-yml.md&#34;&gt;Curations file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A file to correct invalid or missing package metadata, and to set the concluded license for packages.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML / JSON&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/curations.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/dir-custom-license-texts.md&#34;&gt;Custom license texts dir&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A directory that contains license texts which are not provided by ORT.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/custom-license-texts/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/how-to-fix-text-provider-kts.md&#34;&gt;How to fix text provider script&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A Kotlin script that enables the injection of how-to-fix texts in markdown format for ORT issues into the reports.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin script&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/how-to-fix-text-provider.kts&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/config-file-license-classifications-yml.md&#34;&gt;License classifications file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A file that contains user-defined categorization of licenses.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML / JSON&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/license-classifications.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/config-file-resolutions-yml.md&#34;&gt;Resolution file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Configurations to resolve any issues or rule violations by providing a mandatory reason, and an optional comment to justify the resolution on a global scale.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML / JSON&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/resolutions.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/config-file-ort-yml.md&#34;&gt;Repository configuration file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A configuration file, usually stored in the project&#39;s repository, for license finding curations, exclusions, and issues or rule violations resolutions in the context of the repository.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML / JSON&lt;/td&gt; &#xA;   &lt;td&gt;Repository (project)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[analyzer-input-dir]/.ort.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/config-file-package-configuration-yml.md&#34;&gt;Package configuration file / directory&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A single file or a directory with multiple files containing configurations to set provenance-specific path excludes and license finding curations for dependency packages to address issues found within a scan result. &lt;code&gt;helper-cli&lt;/code&gt;&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/helper-cli/src/main/kotlin/commands/packageconfig/CreateCommand.kt&#34;&gt;&lt;code&gt;package-config create&lt;/code&gt; command&lt;/a&gt; can be used to populate a directory with template package configuration files.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML / JSON&lt;/td&gt; &#xA;   &lt;td&gt;Package (dependency)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/package-configurations/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/file-rules-kts.md&#34;&gt;Policy rules file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The file containing any policy rule implementations to be used with the &lt;em&gt;evaluator&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin script (DSL)&lt;/td&gt; &#xA;   &lt;td&gt;Evaluator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/evaluator.rules.kts&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Details on the tools&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a name=&#34;analyzer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/analyzer/src/main/kotlin&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/analyzer.png&#34; alt=&#34;Analyzer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;analyzer&lt;/em&gt; is a Software Composition Analysis (SCA) tool that determines the dependencies of software projects inside the specified input directory (&lt;code&gt;-i&lt;/code&gt;). It does so by querying the detected package managers; &lt;strong&gt;no modifications&lt;/strong&gt; to your existing project source code, like applying build system plugins, are necessary for that to work. The tree of transitive dependencies per project is written out as part of an &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/raw/main/model/src/main/kotlin/OrtResult.kt&#34;&gt;OrtResult&lt;/a&gt; in YAML (or JSON, see &lt;code&gt;-f&lt;/code&gt;) format to a file named &lt;code&gt;analyzer-result.yml&lt;/code&gt; in the specified output directory (&lt;code&gt;-o&lt;/code&gt;). The output file exactly documents the status quo of all package-related metadata. It can be further processed or manually edited before passing it to one of the other tools.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the following package managers (grouped by the programming language they are most commonly used with) are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C / C++ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://conan.io/&#34;&gt;Conan&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Also see: &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#analyzer-for-spdx-documents&#34;&gt;SPDX documents&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Dart / Flutter &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/&#34;&gt;Pub&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://golang.github.io/dep/&#34;&gt;dep&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34;&gt;Glide&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tools/godep&#34;&gt;Godep&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;GoMod&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/4445&#34;&gt;no &lt;code&gt;replace&lt;/code&gt; directive&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Haskell &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://haskellstack.org/&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Java &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/1774&#34;&gt;default profile only&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;JavaScript / Node.js &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bower.io/&#34;&gt;Bower&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;NPM&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/3741&#34;&gt;no scope-specific registries&lt;/a&gt;, &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/95&#34;&gt;no peer dependencies&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://classic.yarnpkg.com/&#34;&gt;Yarn&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/2283&#34;&gt;no Yarn 2 / 3 support&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;.NET &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/tools/&#34;&gt;DotNet&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/pull/1303#issue-253860146&#34;&gt;no floating versions / ranges&lt;/a&gt;, &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/4083&#34;&gt;no target framework&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.nuget.org/&#34;&gt;NuGet&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/pull/1303#issue-253860146&#34;&gt;no floating versions / ranges&lt;/a&gt;, &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/4083&#34;&gt;no target framework&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Objective-C / Swift &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; (limitation: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/3774&#34;&gt;no &lt;code&gt;cartfile.private&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods&#34;&gt;CocoaPods&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/4188&#34;&gt;no custom source repositories&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;PHP &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Python &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pip.pypa.io/&#34;&gt;PIP&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/3671&#34;&gt;Python 2.7 or 3.8 and PIP 18.1 only&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pipenv.pypa.io/en/latest/&#34;&gt;Pipenv&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/3671&#34;&gt;Python 2.7 or 3.8 and PIP 18.1 only&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ruby &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bundler.io/&#34;&gt;Bundler&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/1308&#34;&gt;restricted to the version available on the host&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Rust &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;Cargo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Scala &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Unmanged &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is a special &#34;package manager&#34; that mananges all files that cannot be associated to any of the other package managers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;analyzer-for-spdx-documents&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If another package manager that is not part of the list above is used (or no package manager at all), the generic fallback to &lt;a href=&#34;https://spdx.dev/specifications/&#34;&gt;SPDX documents&lt;/a&gt; can be leveraged to describe &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/analyzer/src/funTest/assets/projects/synthetic/spdx/project-xyz-with-inline-packages.spdx.yml&#34;&gt;projects&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/analyzer/src/funTest/assets/projects/synthetic/spdx/libs/curl/package.spdx.yml&#34;&gt;packages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;downloader&#34;&gt;&amp;nbsp;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/downloader/src/main/kotlin&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/downloader.png&#34; alt=&#34;Downloader&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Taking an ORT result file with an &lt;em&gt;analyzer&lt;/em&gt; result as the input (&lt;code&gt;-i&lt;/code&gt;), the &lt;em&gt;downloader&lt;/em&gt; retrieves the source code of all contained packages to the specified output directory (&lt;code&gt;-o&lt;/code&gt;). The &lt;em&gt;downloader&lt;/em&gt; takes care of things like normalizing URLs and using the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/downloader/src/main/kotlin/vcs&#34;&gt;appropriate VCS tool&lt;/a&gt; to checkout source code from version control.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the following Version Control Systems (VCS) are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Concurrent_Versions_System&#34;&gt;CVS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://source.android.com/setup/develop/repo&#34;&gt;Git-Repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;Mercurial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;scanner&#34;&gt;&amp;nbsp;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/scanner/src/main/kotlin&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/scanner.png&#34; alt=&#34;Scanner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This tool wraps underlying license / copyright scanners with a common API so all supported scanners can be used in the same way to easily run them and compare their results. If passed an ORT result file with an analyzer result (&lt;code&gt;-i&lt;/code&gt;), the &lt;em&gt;scanner&lt;/em&gt; will automatically download the sources of the dependencies via the &lt;em&gt;downloader&lt;/em&gt; and scan them afterwards.&lt;/p&gt; &#xA;&lt;p&gt;We recommend to use ORT with one of the following scanners as their integration has been thoroughly tested (in alphabetical order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fossid.com/&#34;&gt;FossID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nexB/scancode-toolkit&#34;&gt;ScanCode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, the following reference implementations exist (in alphabetical order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amzn/askalono&#34;&gt;Askalono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boyter/lc&#34;&gt;lc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benbalter/licensee&#34;&gt;Licensee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.scanoss.com/&#34;&gt;SCANOSS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a comparison of some of these, see this &lt;a href=&#34;https://osr.cs.fau.de/2019/08/07/final-thesis-a-comparison-study-of-open-source-license-crawler/&#34;&gt;Bachelor Thesis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Storage Backends&lt;/h2&gt; &#xA;&lt;p&gt;In order to not download or scan any previously scanned sources again, or to reuse scan results generated via other services, the &lt;em&gt;scanner&lt;/em&gt; can be configured to use so-called storage backends. Before processing a package, it checks whether compatible scan results are already available in one of the storages declared; if this is the case, they are fetched and reused. Otherwise, the package&#39;s source code is downloaded and scanned. Afterwards, the new scan results can be put into a storage for later reuse.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to configure multiple storages to read scan results from or to write scan results to. For reading, the declaration order in the configuration is important, as the scanner queries the storages in this order and uses the first matching result. This allows a fine-grained control over the sources, from which existing scan results are loaded. For instance, you can specify that the scanner checks first whether results for a specific package are available in a local storage on the file system. If this is not the case, it can look up the package in a Postgres database. If this does not yield any results either, a service like &lt;a href=&#34;https://clearlydefined.io&#34;&gt;ClearlyDefined&lt;/a&gt; can be queried. Only if all of these steps fail, the scanner has to actually process the package.&lt;/p&gt; &#xA;&lt;p&gt;When storing a newly generated scan result the scanner invokes all the storages declared as writers. The storage operation is considered successful if all writer storages could successfully persist the scan result.&lt;/p&gt; &#xA;&lt;p&gt;The configuration of storage backends is located in the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#ort-configuration-file&#34;&gt;ORT configuration file&lt;/a&gt;. (For the general structure of this file and the set of options available refer to the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/model/src/main/resources/reference.conf&#34;&gt;reference configuration&lt;/a&gt;.) The file has a section named &lt;em&gt;storages&lt;/em&gt; that lists all the storage backends and assigns them a name. Each storage backend is of a specific type and needs to be configured with type-specific properties. The different types of storage backends supported by ORT are described below.&lt;/p&gt; &#xA;&lt;p&gt;After the declaration of the storage backends, the configuration file has to specify which ones of them the scanner should use for looking up existing scan results or to store new results. This is done in two list properties named &lt;em&gt;storageReaders&lt;/em&gt; and &lt;em&gt;storageWriters&lt;/em&gt;. The lists reference the names of the storage backends declared in the &lt;em&gt;storages&lt;/em&gt; section. The scanner invokes the storage backends in the order they appear in the lists; so for readers, this defines a priority for look-up operations. Each storage backend can act as a reader; however, some types do not support updates and thus cannot serve as writers. If a storage backend is referenced both as reader and writer, the scanner creates only a single instance of this storage class.&lt;/p&gt; &#xA;&lt;p&gt;The following subsections describe the different storage backend implementations supported by ORT. Note that the name of a storage entry (like &lt;code&gt;fileBasedStorage&lt;/code&gt;) can be freely chosen. That name is then used to refer to the storage from the &lt;code&gt;storageReaders&lt;/code&gt; and &lt;code&gt;storageWriters&lt;/code&gt; sections.&lt;/p&gt; &#xA;&lt;h3&gt;Local File Storage&lt;/h3&gt; &#xA;&lt;p&gt;By default, the &lt;em&gt;scanner&lt;/em&gt; stores scan results on the local file system in the current user&#39;s home directory (i.e. &lt;code&gt;~/.ort/scanner/scan-results&lt;/code&gt;) for later reuse. Settings like the storage directory and the compression flag can be customized in the ORT configuration file (&lt;code&gt;-c&lt;/code&gt;) with a respective storage configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;ort {&#xA;  scanner {&#xA;    storages {&#xA;      fileBasedStorage {&#xA;        backend {&#xA;          localFileStorage {&#xA;            directory = &#34;/tmp/ort/scan-results&#34;&#xA;            compression = false&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;&#xA;    storageReaders: [&#xA;      &#34;fileBasedStorage&#34;&#xA;    ]&#xA;&#xA;    storageWriters: [&#xA;      &#34;fileBasedStorage&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP Storage&lt;/h3&gt; &#xA;&lt;p&gt;Any HTTP file server can be used to store scan results. Custom headers can be configured to provide authentication credentials. For example, to use Artifactory to store scan results, use the following configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;ort {&#xA;  scanner {&#xA;    storages {&#xA;      artifactoryStorage {&#xA;        backend {&#xA;          httpFileStorage {&#xA;            url = &#34;https://artifactory.domain.com/artifactory/repository/scan-results&#34;&#xA;            headers {&#xA;              X-JFrog-Art-Api = &#34;api-token&#34;&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;&#xA;    storageReaders: [&#xA;      &#34;artifactoryStorage&#34;&#xA;    ]&#xA;&#xA;    storageWriters: [&#xA;      &#34;artifactoryStorage&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PostgreSQL Storage&lt;/h3&gt; &#xA;&lt;p&gt;To use PostgreSQL for storing scan results you need at least version 9.4, create a database with the &lt;code&gt;client_encoding&lt;/code&gt; set to &lt;code&gt;UTF8&lt;/code&gt;, and a configuration like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;ort {&#xA;  scanner {&#xA;    storages {&#xA;      postgresStorage {&#xA;        url = &#34;jdbc:postgresql://example.com:5444/database&#34;&#xA;        schema = &#34;public&#34;&#xA;        username = &#34;username&#34;&#xA;        password = &#34;password&#34;&#xA;        sslmode = &#34;verify-full&#34;&#xA;      }&#xA;    }&#xA;&#xA;    storageReaders: [&#xA;      &#34;postgresStorage&#34;&#xA;    ]&#xA;&#xA;    storageWriters: [&#xA;      &#34;postgresStorage&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The database needs to exist. If the schema is set to something else than the default of &lt;code&gt;public&lt;/code&gt;, it needs to exist and be accessible by the configured username.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;scanner&lt;/em&gt; will itself create a table called &lt;code&gt;scan_results&lt;/code&gt; and store the data in a &lt;a href=&#34;https://www.postgresql.org/docs/current/datatype-json.html&#34;&gt;jsonb&lt;/a&gt; column.&lt;/p&gt; &#xA;&lt;p&gt;If you do not want to use SSL set the &lt;code&gt;sslmode&lt;/code&gt; to &lt;code&gt;disable&lt;/code&gt;, other possible values are explained in the &lt;a href=&#34;https://jdbc.postgresql.org/documentation/head/ssl-client.html&#34;&gt;documentation&lt;/a&gt;. For other supported configuration options see &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/model/src/main/kotlin/config/ScanStorageConfiguration.kt&#34;&gt;ScanStorageConfiguration.kt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ClearlyDefined Storage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://clearlydefined.io&#34;&gt;ClearlyDefined&lt;/a&gt; is a service offering curated metadata for Open Source components. This includes scan results that can be used by ORT&#39;s &lt;em&gt;scanner&lt;/em&gt; tool (if they have been generated by a compatible scanner version with a suitable configuration). This storage backend queries the ClearlyDefined service for scan results of the packages to be processed. It is read-only; so it will not upload any new scan results to ClearlyDefined. In the configuration the URL of the ClearlyDefined service needs to be set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;ort {&#xA;  scanner {&#xA;    storages {&#xA;      clearlyDefined {&#xA;        serverUrl = &#34;https://api.clearlydefined.io&#34;&#xA;      }&#xA;    }&#xA;&#xA;    storageReaders: [&#xA;      &#34;clearlyDefined&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;advisor&#34;&gt;&amp;nbsp;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/advisor/src/main/kotlin&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/advisor.png&#34; alt=&#34;Advisor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;advisor&lt;/em&gt; retrieves security advisories from configured services. It requires the analyzer result as an input. For all the packages identified by the analyzer, it queries the services configured for known security vulnerabilities. The vulnerabilities returned by these services are then stored in the output result file together with additional information like the source of the data and a severity (if available).&lt;/p&gt; &#xA;&lt;p&gt;Multiple providers for security advisories are available. The providers require specific configuration in the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/model/src/main/resources/reference.conf&#34;&gt;ORT configuration file&lt;/a&gt;, which needs to be placed in the &lt;em&gt;advisor&lt;/em&gt; section. When executing the advisor the providers to enable are selected with the &lt;code&gt;--advisors&lt;/code&gt; option (or its short alias &lt;code&gt;-a&lt;/code&gt;); here a comma-separated list with provider IDs is expected. The following sections describe the providers supported by the advisor:&lt;/p&gt; &#xA;&lt;h2&gt;NexusIQ&lt;/h2&gt; &#xA;&lt;p&gt;A security data provider that queries &lt;a href=&#34;https://help.sonatype.com/iqserver&#34;&gt;Nexus IQ Server&lt;/a&gt;. In the configuration, the URL where Nexus IQ Server is running and the credentials to authenticate need to be provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;ort {&#xA;  advisor {&#xA;    nexusIq {&#xA;      serverUrl = &#34;https://nexusiq.ossreviewtoolkit.org&#34;&#xA;      username = myUser&#xA;      password = myPassword&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable this provider, pass &lt;code&gt;-a NexusIQ&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;h2&gt;OSS Index&lt;/h2&gt; &#xA;&lt;p&gt;This vulnerability provider does not require any further configuration as it uses the public service at &lt;a href=&#34;https://ossindex.sonatype.org/&#34;&gt;https://ossindex.sonatype.org/&lt;/a&gt;. Before using this provider, please ensure to comply with its &lt;a href=&#34;https://ossindex.sonatype.org/tos&#34;&gt;Terms of Service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To enable this provider, pass &lt;code&gt;-a OssIndex&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;h2&gt;VulnerableCode&lt;/h2&gt; &#xA;&lt;p&gt;This provider obtains information about security vulnerabilities from a &lt;a href=&#34;https://github.com/nexB/vulnerablecode&#34;&gt;VulnerableCode&lt;/a&gt; instance. The configuration is limited to the server URL, as authentication is not required:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;ort {&#xA;  advisor {&#xA;    vulnerableCode {&#xA;      serverUrl = &#34;http://localhost:8000&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable this provider, pass &lt;code&gt;-a VulnerableCode&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;evaluator&#34;&gt;&amp;nbsp;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/evaluator/src/main/kotlin&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/evaluator.png&#34; alt=&#34;Evaluator&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;evaluator&lt;/em&gt; is used to perform custom license policy checks on scan results. The rules to check against are implemented as Kotlin scripts with a dedicated DSL. See &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/examples/evaluator-rules/src/main/resources/example.rules.kts&#34;&gt;example.rules.kts&lt;/a&gt; for an example rules script. The script is wrapped into a minimal &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/examples/evaluator-rules&#34;&gt;evaluator-rules&lt;/a&gt; project which enables auto-completion.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;reporter&#34;&gt;&amp;nbsp;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/reporter/src/main/kotlin&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/reporter.png&#34; alt=&#34;Reporter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;reporter&lt;/em&gt; generates a wide variety of documents in different formats from ORT result files. Currently, the following formats are supported (reporter names are case-insensitive):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/reporters/AsciiDocTemplateReporter.md&#34;&gt;AsciiDoc Template&lt;/a&gt; (&lt;code&gt;-f AsciiDocTemplate&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Content customizable with &lt;a href=&#34;https://freemarker.apache.org/&#34;&gt;Apache Freemarker&lt;/a&gt; templates and &lt;a href=&#34;https://asciidoc.org/&#34;&gt;AsciiDoc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;PDF style customizable with Asciidoctor &lt;a href=&#34;https://github.com/asciidoctor/asciidoctor-pdf/raw/master/docs/theming-guide.adoc&#34;&gt;PDF themes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Supports multiple AsciiDoc backends: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;PDF (&lt;code&gt;-f PdfTemplate&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;HTML (&lt;code&gt;-f HtmlTemplate&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;XHTML (&lt;code&gt;-f XHtmlTemplate&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;DocBook (&lt;code&gt;-f DocBookTemplate&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;Man page (&lt;code&gt;-f ManPageTemplate&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;AsciiDoc (&lt;code&gt;-f AdocTemplate&lt;/code&gt;): Does not convert the created AsciiDoc files but writes the generated files as reports.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.boschrexroth.com/microsites/ctrlx-automation/&#34;&gt;ctrlX AUTOMATION&lt;/a&gt; platform &lt;a href=&#34;https://github.com/boschrexroth/json-schema/tree/master/ctrlx-automation/ctrlx-core/apps/fossinfo&#34;&gt;FOSS information&lt;/a&gt; (&lt;code&gt;-f CtrlXAutomation&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cyclonedx.org/&#34;&gt;CycloneDX&lt;/a&gt; BOM (&lt;code&gt;-f CycloneDx&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://products.office.com/excel&#34;&gt;Excel&lt;/a&gt; sheet (&lt;code&gt;-f Excel&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html#artifactsreportslicense_scanning-ultimate&#34;&gt;GitLabLicenseModel&lt;/a&gt; (&lt;code&gt;-f GitLabLicenseModel&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A nice tutorial video has been &lt;a href=&#34;https://youtu.be/dNmH_kYJ34g&#34;&gt;published&lt;/a&gt; by GitLab engineer @mokhan.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://infra.apache.org/licensing-howto.html&#34;&gt;NOTICE&lt;/a&gt; file in two variants &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;List license texts and copyrights by package (&lt;code&gt;-f NoticeTemplate&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Summarize all license texts and copyrights (&lt;code&gt;-f NoticeTemplate -O NoticeTemplate=template.id=summary&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Customizable with &lt;a href=&#34;https://freemarker.apache.org/&#34;&gt;Apache Freemarker&lt;/a&gt; templates&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Opossum input that can be visualized and edited in the &lt;a href=&#34;https://github.com/opossum-tool/opossumUI&#34;&gt;OpossumUI&lt;/a&gt; (&lt;code&gt;-f Opossum&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spdx.dev/specifications/&#34;&gt;SPDX Document&lt;/a&gt;, version 2.2 (&lt;code&gt;-f SpdxDocument&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Static HTML (&lt;code&gt;-f StaticHtml&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Web App (&lt;code&gt;-f WebApp&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;System requirements&lt;/h1&gt; &#xA;&lt;p&gt;ORT is being continuously used on Linux, Windows and macOS by the &lt;a href=&#34;https://github.com/orgs/oss-review-toolkit/people&#34;&gt;core development team&lt;/a&gt;, so these operating systems are considered to be well supported.&lt;/p&gt; &#xA;&lt;p&gt;To run the ORT binaries (also see &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#from-binaries&#34;&gt;Installation from binaries&lt;/a&gt;) at least Java 11 is required. Memory and CPU requirements vary depending on the size and type of project(s) to analyze / scan, but the general recommendation is to configure Java with 8 GiB of memory (&lt;code&gt;-Xmx=8g&lt;/code&gt;) and to use a CPU with at least 4 cores.&lt;/p&gt; &#xA;&lt;p&gt;If ORT requires external tools in order to analyze a project, these tools are listed by the &lt;code&gt;ort requirements&lt;/code&gt; command. If a package manager is not list listed there, support for it is integrated directly into ORT and does not require any external tools to be installed.&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;ORT is written in &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt; and uses &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; as the build system, with &lt;a href=&#34;https://docs.gradle.org/current/userguide/kotlin_dsl.html&#34;&gt;Kotlin script&lt;/a&gt; instead of Groovy as the DSL.&lt;/p&gt; &#xA;&lt;p&gt;When developing on the command line, use the committed &lt;a href=&#34;https://docs.gradle.org/current/userguide/gradle_wrapper.html&#34;&gt;Gradle wrapper&lt;/a&gt; to bootstrap Gradle in the configured version and execute any given tasks. The most important tasks for this project are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Task&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;assemble&lt;/td&gt; &#xA;   &lt;td&gt;Build the JAR artifacts for all projects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;detekt&lt;/td&gt; &#xA;   &lt;td&gt;Run static code analysis on all projects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;test&lt;/td&gt; &#xA;   &lt;td&gt;Run unit tests for all projects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;funTest&lt;/td&gt; &#xA;   &lt;td&gt;Run functional tests for all projects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;installDist&lt;/td&gt; &#xA;   &lt;td&gt;Build all projects and install the start scripts for distribution&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;All contributions need to pass the &lt;code&gt;detekt&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;funTest&lt;/code&gt; checks before they can be merged.&lt;/p&gt; &#xA;&lt;p&gt;For IDE development we recommend the &lt;a href=&#34;https://www.jetbrains.com/idea/download/&#34;&gt;IntelliJ IDEA Community Edition&lt;/a&gt; which can directly import the Gradle build files. After cloning the project&#39;s source code recursively, simply run IDEA and use the following steps to import the project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;From the wizard dialog: Select &lt;em&gt;Import Project&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;From a running IDEA instance: Select &lt;em&gt;File&lt;/em&gt; -&amp;gt; &lt;em&gt;New&lt;/em&gt; -&amp;gt; &lt;em&gt;Project from Existing Sources...&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Browse to ORT&#39;s source code directory and select either the &lt;code&gt;build.gradle.kts&lt;/code&gt; or the &lt;code&gt;settings.gradle.kts&lt;/code&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the &lt;em&gt;Import Project from Gradle&lt;/em&gt; dialog select &lt;em&gt;Use auto-import&lt;/em&gt; and leave all other settings at their defaults.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;To set up a basic run configuration for debugging, navigate to &lt;code&gt;OrtMain.kt&lt;/code&gt; in the &lt;code&gt;cli&lt;/code&gt; module and look for the &lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;)&lt;/code&gt; function. In the gutter next to it, a green &#34;Play&#34; icon should be displayed. Click on it and select &lt;code&gt;Run &#39;OrtMainKt&#39;&lt;/code&gt; to run the entry point, which implicitly creates a run configuration. Double-check that running ORT without any arguments will simply show the command line help in IDEA&#39;s &lt;em&gt;Run&lt;/em&gt; tool window. Finally, edit the created run configuration to your needs, e.g. by adding an argument and options to run a specific ORT sub-command.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;For running tests and individual test cases from the IDE, the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/14080-kotest&#34;&gt;kotest plugin&lt;/a&gt; needs to be installed. Afterwards tests can be run via the green &#34;Play&#34; icon from the gutter as described above.&lt;/p&gt; &#xA;&lt;h1&gt;Want to Help or have Questions?&lt;/h1&gt; &#xA;&lt;p&gt;All contributions are welcome. If you are interested in contributing, please read our &lt;a href=&#34;https://github.com/oss-review-toolkit/.github/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;, and to get quick answers to any of your questions we recommend you &lt;a href=&#34;https://join.slack.com/t/ort-talk/shared_invite/enQtMzk3MDU5Njk0Njc1LThiNmJmMjc5YWUxZTU4OGI5NmY3YTFlZWM5YTliZmY5ODc0MGMyOWIwYmRiZWFmNGMzOWY2NzVhYTI0NTJkNmY&#34;&gt;join our Slack community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (C) 2017-2022 HERE Europe B.V.&lt;br&gt; Copyright (C) 2019-2020 Bosch Software Innovations GmbH&lt;br&gt; Copyright (C) 2020-2022 Bosch.IO GmbH&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file in the root of this project for license details.&lt;/p&gt; &#xA;&lt;p&gt;OSS Review Toolkit (ORT) is a &lt;a href=&#34;https://www.linuxfoundation.org&#34;&gt;Linux Foundation project&lt;/a&gt; and part of &lt;a href=&#34;https://automatecompliance.org/&#34;&gt;ACT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>KotlinBy/awesome-kotlin</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/KotlinBy/awesome-kotlin</id>
    <link href="https://github.com/KotlinBy/awesome-kotlin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A curated list of awesome Kotlin related stuff Inspired by awesome-java.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome Kotlin (&lt;a href=&#34;https://kotlin.link&#34;&gt;https://kotlin.link&lt;/a&gt;)&lt;/h1&gt; &#xA;&lt;p&gt;A curated list of awesome Kotlin related stuff inspired by awesome-java. &lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Discuss this project in &lt;a href=&#34;http://slack.kotlinlang.org/&#34;&gt;Kotlin Slack&lt;/a&gt;, channel: &lt;strong&gt;# awesome-kotlin&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/awesome&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true&#34; alt=&#34;List of Awesome List Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/KotlinBy/awesome-kotlin/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/KotlinBy/awesome-kotlin/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/KotlinBy/awesome-kotlin&#34;&gt;&lt;img src=&#34;https://kotlin.link/awesome-kotlin.svg?sanitize=true&#34; alt=&#34;Awesome Kotlin Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;📰&lt;/span&gt; &lt;a href=&#34;http://kotlin.link/rss.xml&#34;&gt;RSS Feed of articles, videos, slides, updates (20 latest articles)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;📰&lt;/span&gt; &lt;a href=&#34;http://kotlin.link/rss-full.xml&#34;&gt;RSS Feed of articles, videos, slides, updates (full archive)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;) &lt;a href=&#34;https://github.com/KotlinBy/awesome-kotlin/raw/readme/README.md&#34;&gt;Awesome Kotlin - README.md&lt;/a&gt; - README with links&lt;/p&gt; &#xA;&lt;h2&gt;Spread Awesome Kotlin!&lt;/h2&gt; &#xA;&lt;p&gt;Here is the awesome badge for your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Awesome Kotlin Badge](https://kotlin.link/awesome-kotlin.svg)](https://github.com/KotlinBy/awesome-kotlin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To contribute, check &lt;a href=&#34;https://github.com/KotlinBy/awesome-kotlin/raw/main/.github/contributing.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>square/moshi</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/square/moshi</id>
    <link href="https://github.com/square/moshi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern JSON library for Kotlin and Java.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Moshi&lt;/h1&gt; &#xA;&lt;p&gt;Moshi is a modern JSON library for Android, Java and Kotlin. It makes it easy to parse JSON into Java and Kotlin classes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The Kotlin examples of this README assume use of either Kotlin code gen or &lt;code&gt;KotlinJsonAdapterFactory&lt;/code&gt; for reflection. Plain Java-based reflection is unsupported on Kotlin classes.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String json = ...;&#xA;&#xA;Moshi moshi = new Moshi.Builder().build();&#xA;JsonAdapter&amp;lt;BlackjackHand&amp;gt; jsonAdapter = moshi.adapter(BlackjackHand.class);&#xA;&#xA;BlackjackHand blackjackHand = jsonAdapter.fromJson(json);&#xA;System.out.println(blackjackHand);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val json: String = ...&#xA;&#xA;val moshi: Moshi = Moshi.Builder().build()&#xA;val jsonAdapter: JsonAdapter&amp;lt;BlackjackHand&amp;gt; = moshi.adapter&amp;lt;BlackjackHand&amp;gt;()&#xA;&#xA;val blackjackHand = jsonAdapter.fromJson(json)&#xA;println(blackjackHand)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;And it can just as easily serialize Java or Kotlin objects as JSON:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;BlackjackHand blackjackHand = new BlackjackHand(&#xA;    new Card(&#39;6&#39;, SPADES),&#xA;    Arrays.asList(new Card(&#39;4&#39;, CLUBS), new Card(&#39;A&#39;, HEARTS)));&#xA;&#xA;Moshi moshi = new Moshi.Builder().build();&#xA;JsonAdapter&amp;lt;BlackjackHand&amp;gt; jsonAdapter = moshi.adapter(BlackjackHand.class);&#xA;&#xA;String json = jsonAdapter.toJson(blackjackHand);&#xA;System.out.println(json);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val blackjackHand = BlackjackHand(&#xA;    Card(&#39;6&#39;, SPADES),&#xA;    listOf(Card(&#39;4&#39;, CLUBS), Card(&#39;A&#39;, HEARTS))&#xA;  )&#xA;&#xA;val moshi: Moshi = Moshi.Builder().build()&#xA;val jsonAdapter: JsonAdapter&amp;lt;BlackjackHand&amp;gt; = moshi.adapter&amp;lt;BlackjackHand&amp;gt;()&#xA;&#xA;val json: String = jsonAdapter.toJson(blackjackHand)&#xA;println(json)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Built-in Type Adapters&lt;/h3&gt; &#xA;&lt;p&gt;Moshi has built-in support for reading and writing Java’s core data types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Primitives (int, float, char...) and their boxed counterparts (Integer, Float, Character...).&lt;/li&gt; &#xA; &lt;li&gt;Arrays, Collections, Lists, Sets, and Maps&lt;/li&gt; &#xA; &lt;li&gt;Strings&lt;/li&gt; &#xA; &lt;li&gt;Enums&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It supports your model classes by writing them out field-by-field. In the example above Moshi uses these classes:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class BlackjackHand {&#xA;  public final Card hidden_card;&#xA;  public final List&amp;lt;Card&amp;gt; visible_cards;&#xA;  ...&#xA;}&#xA;&#xA;class Card {&#xA;  public final char rank;&#xA;  public final Suit suit;&#xA;  ...&#xA;}&#xA;&#xA;enum Suit {&#xA;  CLUBS, DIAMONDS, HEARTS, SPADES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class BlackjackHand(&#xA;  val hidden_card: Card,&#xA;  val visible_cards: List&amp;lt;Card&amp;gt;,&#xA;  ...&#xA;)&#xA;&#xA;class Card(&#xA;  val rank: Char,&#xA;  val suit: Suit&#xA;  ...&#xA;)&#xA;&#xA;enum class Suit {&#xA;  CLUBS, DIAMONDS, HEARTS, SPADES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;to read and write this JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;hidden_card&#34;: {&#xA;    &#34;rank&#34;: &#34;6&#34;,&#xA;    &#34;suit&#34;: &#34;SPADES&#34;&#xA;  },&#xA;  &#34;visible_cards&#34;: [&#xA;    {&#xA;      &#34;rank&#34;: &#34;4&#34;,&#xA;      &#34;suit&#34;: &#34;CLUBS&#34;&#xA;    },&#xA;    {&#xA;      &#34;rank&#34;: &#34;A&#34;,&#xA;      &#34;suit&#34;: &#34;HEARTS&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://square.github.io/moshi/1.x/moshi/&#34;&gt;Javadoc&lt;/a&gt; catalogs the complete Moshi API, which we explore below.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Type Adapters&lt;/h3&gt; &#xA;&lt;p&gt;With Moshi, it’s particularly easy to customize how values are converted to and from JSON. A type adapter is any class that has methods annotated &lt;code&gt;@ToJson&lt;/code&gt; and &lt;code&gt;@FromJson&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, Moshi’s default encoding of a playing card is verbose: the JSON defines the rank and suit in separate fields: &lt;code&gt;{&#34;rank&#34;:&#34;A&#34;,&#34;suit&#34;:&#34;HEARTS&#34;}&lt;/code&gt;. With a type adapter, we can change the encoding to something more compact: &lt;code&gt;&#34;4H&#34;&lt;/code&gt; for the four of hearts or &lt;code&gt;&#34;JD&#34;&lt;/code&gt; for the jack of diamonds:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class CardAdapter {&#xA;  @ToJson String toJson(Card card) {&#xA;    return card.rank + card.suit.name().substring(0, 1);&#xA;  }&#xA;&#xA;  @FromJson Card fromJson(String card) {&#xA;    if (card.length() != 2) throw new JsonDataException(&#34;Unknown card: &#34; + card);&#xA;&#xA;    char rank = card.charAt(0);&#xA;    switch (card.charAt(1)) {&#xA;      case &#39;C&#39;: return new Card(rank, Suit.CLUBS);&#xA;      case &#39;D&#39;: return new Card(rank, Suit.DIAMONDS);&#xA;      case &#39;H&#39;: return new Card(rank, Suit.HEARTS);&#xA;      case &#39;S&#39;: return new Card(rank, Suit.SPADES);&#xA;      default: throw new JsonDataException(&#34;unknown suit: &#34; + card);&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class CardAdapter {&#xA;  @ToJson fun toJson(card: Card): String {&#xA;    return card.rank + card.suit.name.substring(0, 1)&#xA;  }&#xA;&#xA;  @FromJson fun fromJson(card: String): Card {&#xA;    if (card.length != 2) throw JsonDataException(&#34;Unknown card: $card&#34;)&#xA;&#xA;    val rank = card[0]&#xA;    return when (card[1]) {&#xA;      &#39;C&#39; -&amp;gt; Card(rank, Suit.CLUBS)&#xA;      &#39;D&#39; -&amp;gt; Card(rank, Suit.DIAMONDS)&#xA;      &#39;H&#39; -&amp;gt; Card(rank, Suit.HEARTS)&#xA;      &#39;S&#39; -&amp;gt; Card(rank, Suit.SPADES)&#xA;      else -&amp;gt; throw JsonDataException(&#34;unknown suit: $card&#34;)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Register the type adapter with the &lt;code&gt;Moshi.Builder&lt;/code&gt; and we’re good to go.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Moshi moshi = new Moshi.Builder()&#xA;    .add(new CardAdapter())&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val moshi = Moshi.Builder()&#xA;    .add(CardAdapter())&#xA;    .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Voilà:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;hidden_card&#34;: &#34;6S&#34;,&#xA;  &#34;visible_cards&#34;: [&#xA;    &#34;4C&#34;,&#xA;    &#34;AH&#34;&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Another example&lt;/h4&gt; &#xA;&lt;p&gt;Note that the method annotated with &lt;code&gt;@FromJson&lt;/code&gt; does not need to take a String as an argument. Rather it can take input of any type and Moshi will first parse the JSON to an object of that type and then use the &lt;code&gt;@FromJson&lt;/code&gt; method to produce the desired final value. Conversely, the method annotated with &lt;code&gt;@ToJson&lt;/code&gt; does not have to produce a String.&lt;/p&gt; &#xA;&lt;p&gt;Assume, for example, that we have to parse a JSON in which the date and time of an event are represented as two separate strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;title&#34;: &#34;Blackjack tournament&#34;,&#xA;  &#34;begin_date&#34;: &#34;20151010&#34;,&#xA;  &#34;begin_time&#34;: &#34;17:04&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We would like to combine these two fields into one string to facilitate the date parsing at a later point. Also, we would like to have all variable names in CamelCase. Therefore, the &lt;code&gt;Event&lt;/code&gt; class we want Moshi to produce like this:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Event {&#xA;  String title;&#xA;  String beginDateAndTime;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Event(&#xA;  val title: String,&#xA;  val beginDateAndTime: String&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Instead of manually parsing the JSON line per line (which we could also do) we can have Moshi do the transformation automatically. We simply define another class &lt;code&gt;EventJson&lt;/code&gt; that directly corresponds to the JSON structure:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class EventJson {&#xA;  String title;&#xA;  String begin_date;&#xA;  String begin_time;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class EventJson(&#xA;  val title: String,&#xA;  val begin_date: String,&#xA;  val begin_time: String&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;And another class with the appropriate &lt;code&gt;@FromJson&lt;/code&gt; and &lt;code&gt;@ToJson&lt;/code&gt; methods that are telling Moshi how to convert an &lt;code&gt;EventJson&lt;/code&gt; to an &lt;code&gt;Event&lt;/code&gt; and back. Now, whenever we are asking Moshi to parse a JSON to an &lt;code&gt;Event&lt;/code&gt; it will first parse it to an &lt;code&gt;EventJson&lt;/code&gt; as an intermediate step. Conversely, to serialize an &lt;code&gt;Event&lt;/code&gt; Moshi will first create an &lt;code&gt;EventJson&lt;/code&gt; object and then serialize that object as usual.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class EventJsonAdapter {&#xA;  @FromJson Event eventFromJson(EventJson eventJson) {&#xA;    Event event = new Event();&#xA;    event.title = eventJson.title;&#xA;    event.beginDateAndTime = eventJson.begin_date + &#34; &#34; + eventJson.begin_time;&#xA;    return event;&#xA;  }&#xA;&#xA;  @ToJson EventJson eventToJson(Event event) {&#xA;    EventJson json = new EventJson();&#xA;    json.title = event.title;&#xA;    json.begin_date = event.beginDateAndTime.substring(0, 8);&#xA;    json.begin_time = event.beginDateAndTime.substring(9, 14);&#xA;    return json;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class EventJsonAdapter {&#xA;  @FromJson&#xA;  fun eventFromJson(eventJson: EventJson): Event {&#xA;    return Event(&#xA;      title = eventJson.title,&#xA;      beginDateAndTime = &#34;${eventJson.begin_date} ${eventJson.begin_time}&#34;&#xA;    )&#xA;  }&#xA;&#xA;  @ToJson&#xA;  fun eventToJson(event: Event): EventJson {&#xA;    return EventJson(&#xA;      title = event.title,&#xA;      begin_date = event.beginDateAndTime.substring(0, 8),&#xA;      begin_time = event.beginDateAndTime.substring(9, 14),&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Again we register the adapter with Moshi.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Moshi moshi = new Moshi.Builder()&#xA;    .add(new EventJsonAdapter())&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val moshi = Moshi.Builder()&#xA;    .add(EventJsonAdapter())&#xA;    .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;We can now use Moshi to parse the JSON directly to an &lt;code&gt;Event&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JsonAdapter&amp;lt;Event&amp;gt; jsonAdapter = moshi.adapter(Event.class);&#xA;Event event = jsonAdapter.fromJson(json);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val jsonAdapter = moshi.adapter&amp;lt;Event&amp;gt;()&#xA;val event = jsonAdapter.fromJson(json)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Adapter convenience methods&lt;/h3&gt; &#xA;&lt;p&gt;Moshi provides a number of convenience methods for &lt;code&gt;JsonAdapter&lt;/code&gt; objects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nullSafe()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nonNull()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lenient()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;failOnUnknown()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;serializeNulls()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These factory methods wrap an existing &lt;code&gt;JsonAdapter&lt;/code&gt; into additional functionality. For example, if you have an adapter that doesn&#39;t support nullable values, you can use &lt;code&gt;nullSafe()&lt;/code&gt; to make it null safe:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String dateJson = &#34;\&#34;2018-11-26T11:04:19.342668Z\&#34;&#34;;&#xA;String nullDateJson = &#34;null&#34;;&#xA;&#xA;// Hypothetical IsoDateDapter, doesn&#39;t support null by default&#xA;JsonAdapter&amp;lt;Date&amp;gt; adapter = new IsoDateDapter();&#xA;&#xA;Date date = adapter.fromJson(dateJson);&#xA;System.out.println(date); // Mon Nov 26 12:04:19 CET 2018&#xA;&#xA;Date nullDate = adapter.fromJson(nullDateJson);&#xA;// Exception, com.squareup.moshi.JsonDataException: Expected a string but was NULL at path $&#xA;&#xA;Date nullDate = adapter.nullSafe().fromJson(nullDateJson);&#xA;System.out.println(nullDate); // null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val dateJson = &#34;\&#34;2018-11-26T11:04:19.342668Z\&#34;&#34;&#xA;val nullDateJson = &#34;null&#34;&#xA;&#xA;// Hypothetical IsoDateDapter, doesn&#39;t support null by default&#xA;val adapter: JsonAdapter&amp;lt;Date&amp;gt; = IsoDateDapter()&#xA;&#xA;val date = adapter.fromJson(dateJson)&#xA;println(date) // Mon Nov 26 12:04:19 CET 2018&#xA;&#xA;val nullDate = adapter.fromJson(nullDateJson)&#xA;// Exception, com.squareup.moshi.JsonDataException: Expected a string but was NULL at path $&#xA;&#xA;val nullDate = adapter.nullSafe().fromJson(nullDateJson)&#xA;println(nullDate) // null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;In contrast to &lt;code&gt;nullSafe()&lt;/code&gt; there is &lt;code&gt;nonNull()&lt;/code&gt; to make an adapter refuse null values. Refer to the Moshi JavaDoc for details on the various methods.&lt;/p&gt; &#xA;&lt;h3&gt;Parse JSON Arrays&lt;/h3&gt; &#xA;&lt;p&gt;Say we have a JSON string of this structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  {&#xA;    &#34;rank&#34;: &#34;4&#34;,&#xA;    &#34;suit&#34;: &#34;CLUBS&#34;&#xA;  },&#xA;  {&#xA;    &#34;rank&#34;: &#34;A&#34;,&#xA;    &#34;suit&#34;: &#34;HEARTS&#34;&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can now use Moshi to parse the JSON string into a &lt;code&gt;List&amp;lt;Card&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String cardsJsonResponse = ...;&#xA;Type type = Types.newParameterizedType(List.class, Card.class);&#xA;JsonAdapter&amp;lt;List&amp;lt;Card&amp;gt;&amp;gt; adapter = moshi.adapter(type);&#xA;List&amp;lt;Card&amp;gt; cards = adapter.fromJson(cardsJsonResponse);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val cardsJsonResponse: String = ...&#xA;// We can just use a reified extension!&#xA;val adapter = moshi.adapter&amp;lt;List&amp;lt;Card&amp;gt;&amp;gt;()&#xA;val cards: List&amp;lt;Card&amp;gt; = adapter.fromJson(cardsJsonResponse)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Fails Gracefully&lt;/h3&gt; &#xA;&lt;p&gt;Automatic databinding almost feels like magic. But unlike the black magic that typically accompanies reflection, Moshi is designed to help you out when things go wrong.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;JsonDataException: Expected one of [CLUBS, DIAMONDS, HEARTS, SPADES] but was ANCHOR at path $.visible_cards[2].suit&#xA;  at com.squareup.moshi.JsonAdapters$11.fromJson(JsonAdapters.java:188)&#xA;  at com.squareup.moshi.JsonAdapters$11.fromJson(JsonAdapters.java:180)&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Moshi always throws a standard &lt;code&gt;java.io.IOException&lt;/code&gt; if there is an error reading the JSON document, or if it is malformed. It throws a &lt;code&gt;JsonDataException&lt;/code&gt; if the JSON document is well-formed, but doesn’t match the expected format.&lt;/p&gt; &#xA;&lt;h3&gt;Built on Okio&lt;/h3&gt; &#xA;&lt;p&gt;Moshi uses &lt;a href=&#34;https://github.com/square/okio/&#34;&gt;Okio&lt;/a&gt; for simple and powerful I/O. It’s a fine complement to &lt;a href=&#34;https://github.com/square/okhttp/&#34;&gt;OkHttp&lt;/a&gt;, which can share buffer segments for maximum efficiency.&lt;/p&gt; &#xA;&lt;h3&gt;Borrows from Gson&lt;/h3&gt; &#xA;&lt;p&gt;Moshi uses the same streaming and binding mechanisms as &lt;a href=&#34;https://github.com/google/gson/&#34;&gt;Gson&lt;/a&gt;. If you’re a Gson user you’ll find Moshi works similarly. If you try Moshi and don’t love it, you can even migrate to Gson without much violence!&lt;/p&gt; &#xA;&lt;p&gt;But the two libraries have a few important differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Moshi has fewer built-in type adapters.&lt;/strong&gt; For example, you need to configure your own date adapter. Most binding libraries will encode whatever you throw at them. Moshi refuses to serialize platform types (&lt;code&gt;java.*&lt;/code&gt;, &lt;code&gt;javax.*&lt;/code&gt;, and &lt;code&gt;android.*&lt;/code&gt;) without a user-provided type adapter. This is intended to prevent you from accidentally locking yourself to a specific JDK or Android release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Moshi is less configurable.&lt;/strong&gt; There’s no field naming strategy, versioning, instance creators, or long serialization policy. Instead of naming a field &lt;code&gt;visibleCards&lt;/code&gt; and using a policy class to convert that to &lt;code&gt;visible_cards&lt;/code&gt;, Moshi wants you to just name the field &lt;code&gt;visible_cards&lt;/code&gt; as it appears in the JSON.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Moshi doesn’t have a &lt;code&gt;JsonElement&lt;/code&gt; model.&lt;/strong&gt; Instead it just uses built-in types like &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No HTML-safe escaping.&lt;/strong&gt; Gson encodes &lt;code&gt;=&lt;/code&gt; as &lt;code&gt;\u003d&lt;/code&gt; by default so that it can be safely encoded in HTML without additional escaping. Moshi encodes it naturally (as &lt;code&gt;=&lt;/code&gt;) and assumes that the HTML encoder – if there is one – will do its job.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom field names with @Json&lt;/h3&gt; &#xA;&lt;p&gt;Moshi works best when your JSON objects and Java or Kotlin classes have the same structure. But when they don&#39;t, Moshi has annotations to customize data binding.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;@Json&lt;/code&gt; to specify how Java fields or Kotlin properties map to JSON names. This is necessary when the JSON name contains spaces or other characters that aren’t permitted in Java field or Kotlin property names. For example, this JSON has a field name containing a space:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;username&#34;: &#34;jesse&#34;,&#xA;  &#34;lucky number&#34;: 32&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;@Json&lt;/code&gt; its corresponding Java or Kotlin class is easy:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Player {&#xA;  String username;&#xA;  @Json(name = &#34;lucky number&#34;) int luckyNumber;&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Player {&#xA;  val username: String&#xA;  @Json(name = &#34;lucky number&#34;) val luckyNumber: Int&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Because JSON field names are always defined with their Java or Kotlin fields, Moshi makes it easy to find fields when navigating between Java or Koltin and JSON.&lt;/p&gt; &#xA;&lt;h3&gt;Alternate type adapters with @JsonQualifier&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;@JsonQualifier&lt;/code&gt; to customize how a type is encoded for some fields without changing its encoding everywhere. This works similarly to the qualifier annotations in dependency injection tools like Dagger and Guice.&lt;/p&gt; &#xA;&lt;p&gt;Here’s a JSON message with two integers and a color:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;width&#34;: 1024,&#xA;  &#34;height&#34;: 768,&#xA;  &#34;color&#34;: &#34;#ff0000&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By convention, Android programs also use &lt;code&gt;int&lt;/code&gt; for colors:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Rectangle {&#xA;  int width;&#xA;  int height;&#xA;  int color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Rectangle(&#xA;  val width: Int,&#xA;  val height: Int,&#xA;  val color: Int&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;But if we encoded the above Java or Kotlin class as JSON, the color isn&#39;t encoded properly!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;width&#34;: 1024,&#xA;  &#34;height&#34;: 768,&#xA;  &#34;color&#34;: 16711680&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The fix is to define a qualifier annotation, itself annotated &lt;code&gt;@JsonQualifier&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Retention(RUNTIME)&#xA;@JsonQualifier&#xA;public @interface HexColor {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Retention(RUNTIME)&#xA;@JsonQualifier&#xA;annotation class HexColor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Next apply this &lt;code&gt;@HexColor&lt;/code&gt; annotation to the appropriate field:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Rectangle {&#xA;  int width;&#xA;  int height;&#xA;  @HexColor int color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Rectangle(&#xA;  val width: Int,&#xA;  val height: Int,&#xA;  @HexColor val color: Int&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;And finally define a type adapter to handle it:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/** Converts strings like #ff0000 to the corresponding color ints. */&#xA;class ColorAdapter {&#xA;  @ToJson String toJson(@HexColor int rgb) {&#xA;    return String.format(&#34;#%06x&#34;, rgb);&#xA;  }&#xA;&#xA;  @FromJson @HexColor int fromJson(String rgb) {&#xA;    return Integer.parseInt(rgb.substring(1), 16);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;/** Converts strings like #ff0000 to the corresponding color ints.  */&#xA;class ColorAdapter {&#xA;  @ToJson fun toJson(@HexColor rgb: Int): String {&#xA;    return &#34;#%06x&#34;.format(rgb)&#xA;  }&#xA;&#xA;  @FromJson @HexColor fun fromJson(rgb: String): Int {&#xA;    return rgb.substring(1).toInt(16)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Use &lt;code&gt;@JsonQualifier&lt;/code&gt; when you need different JSON encodings for the same type. Most programs shouldn’t need this &lt;code&gt;@JsonQualifier&lt;/code&gt;, but it’s very handy for those that do.&lt;/p&gt; &#xA;&lt;h3&gt;Omitting fields&lt;/h3&gt; &#xA;&lt;p&gt;Some models declare fields that shouldn’t be included in JSON. For example, suppose our blackjack hand has a &lt;code&gt;total&lt;/code&gt; field with the sum of the cards:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class BlackjackHand {&#xA;  private int total;&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class BlackjackHand(&#xA;  private val total: Int,&#xA;&#xA;  ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;By default, all fields are emitted when encoding JSON, and all fields are accepted when decoding JSON. Prevent a field from being included by annotating them with &lt;code&gt;@Json(ignore = true)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class BlackjackHand {&#xA;  @Json(ignore = true)&#xA;  private int total;&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class BlackjackHand(...) {&#xA;  @Json(ignore = true)&#xA;  var total: Int = 0&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;These fields are omitted when writing JSON. When reading JSON, the field is skipped even if the JSON contains a value for the field. Instead, it will get a default value. In Kotlin, these fields &lt;em&gt;must&lt;/em&gt; have a default value if they are in the primary constructor.&lt;/p&gt; &#xA;&lt;p&gt;Note that you can also use Java’s &lt;code&gt;transient&lt;/code&gt; keyword or Kotlin&#39;s &lt;code&gt;@Transient&lt;/code&gt; annotation on these fields for the same effect.&lt;/p&gt; &#xA;&lt;h3&gt;Default Values &amp;amp; Constructors&lt;/h3&gt; &#xA;&lt;p&gt;When reading JSON that is missing a field, Moshi relies on the Java or Kotlin or Android runtime to assign the field’s value. Which value it uses depends on whether the class has a no-arguments constructor.&lt;/p&gt; &#xA;&lt;p&gt;If the class has a no-arguments constructor, Moshi will call that constructor and whatever value it assigns will be used. For example, because this class has a no-arguments constructor the &lt;code&gt;total&lt;/code&gt; field is initialized to &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: This section only applies to Java reflections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class BlackjackHand {&#xA;  private int total = -1;&#xA;  ...&#xA;&#xA;  private BlackjackHand() {&#xA;  }&#xA;&#xA;  public BlackjackHand(Card hidden_card, List&amp;lt;Card&amp;gt; visible_cards) {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the class doesn’t have a no-arguments constructor, Moshi can’t assign the field’s default value, &lt;strong&gt;even if it’s specified in the field declaration&lt;/strong&gt;. Instead, the field’s default is always &lt;code&gt;0&lt;/code&gt; for numbers, &lt;code&gt;false&lt;/code&gt; for booleans, and &lt;code&gt;null&lt;/code&gt; for references. In this example, the default value of &lt;code&gt;total&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class BlackjackHand {&#xA;  private int total = -1;&#xA;  ...&#xA;&#xA;  public BlackjackHand(Card hidden_card, List&amp;lt;Card&amp;gt; visible_cards) {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is surprising and is a potential source of bugs! For this reason consider defining a no-arguments constructor in classes that you use with Moshi, using &lt;code&gt;@SuppressWarnings(&#34;unused&#34;)&lt;/code&gt; to prevent it from being inadvertently deleted later:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class BlackjackHand {&#xA;  private int total = -1;&#xA;  ...&#xA;&#xA;  @SuppressWarnings(&#34;unused&#34;) // Moshi uses this!&#xA;  private BlackjackHand() {&#xA;  }&#xA;&#xA;  public BlackjackHand(Card hidden_card, List&amp;lt;Card&amp;gt; visible_cards) {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Composing Adapters&lt;/h3&gt; &#xA;&lt;p&gt;In some situations Moshi&#39;s default Java-to-JSON conversion isn&#39;t sufficient. You can compose adapters to build upon the standard conversion.&lt;/p&gt; &#xA;&lt;p&gt;In this example, we turn serialize nulls, then delegate to the built-in adapter:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class TournamentWithNullsAdapter {&#xA;  @ToJson void toJson(JsonWriter writer, Tournament tournament,&#xA;      JsonAdapter&amp;lt;Tournament&amp;gt; delegate) throws IOException {&#xA;    boolean wasSerializeNulls = writer.getSerializeNulls();&#xA;    writer.setSerializeNulls(true);&#xA;    try {&#xA;      delegate.toJson(writer, tournament);&#xA;    } finally {&#xA;      writer.setLenient(wasSerializeNulls);&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class TournamentWithNullsAdapter {&#xA;  @ToJson fun toJson(writer: JsonWriter, tournament: Tournament?,&#xA;    delegate: JsonAdapter&amp;lt;Tournament?&amp;gt;) {&#xA;    val wasSerializeNulls: Boolean = writer.getSerializeNulls()&#xA;    writer.setSerializeNulls(true)&#xA;    try {&#xA;      delegate.toJson(writer, tournament)&#xA;    } finally {&#xA;      writer.setLenient(wasSerializeNulls)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;When we use this to serialize a tournament, nulls are written! But nulls elsewhere in our JSON document are skipped as usual.&lt;/p&gt; &#xA;&lt;p&gt;Moshi has a powerful composition system in its &lt;code&gt;JsonAdapter.Factory&lt;/code&gt; interface. We can hook in to the encoding and decoding process for any type, even without knowing about the types beforehand. In this example, we customize types annotated &lt;code&gt;@AlwaysSerializeNulls&lt;/code&gt;, which an annotation we create, not built-in to Moshi:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Target(TYPE)&#xA;@Retention(RUNTIME)&#xA;public @interface AlwaysSerializeNulls {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Target(TYPE)&#xA;@Retention(RUNTIME)&#xA;annotation class AlwaysSerializeNulls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@AlwaysSerializeNulls&#xA;static class Car {&#xA;  String make;&#xA;  String model;&#xA;  String color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@AlwaysSerializeNulls&#xA;class Car(&#xA;  val make: String?,&#xA;  val model: String?,&#xA;  val color: String?&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Each &lt;code&gt;JsonAdapter.Factory&lt;/code&gt; interface is invoked by &lt;code&gt;Moshi&lt;/code&gt; when it needs to build an adapter for a user&#39;s type. The factory either returns an adapter to use, or null if it doesn&#39;t apply to the requested type. In our case we match all classes that have our annotation.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;static class AlwaysSerializeNullsFactory implements JsonAdapter.Factory {&#xA;  @Override public JsonAdapter&amp;lt;?&amp;gt; create(&#xA;      Type type, Set&amp;lt;? extends Annotation&amp;gt; annotations, Moshi moshi) {&#xA;    Class&amp;lt;?&amp;gt; rawType = Types.getRawType(type);&#xA;    if (!rawType.isAnnotationPresent(AlwaysSerializeNulls.class)) {&#xA;      return null;&#xA;    }&#xA;&#xA;    JsonAdapter&amp;lt;Object&amp;gt; delegate = moshi.nextAdapter(this, type, annotations);&#xA;    return delegate.serializeNulls();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class AlwaysSerializeNullsFactory : JsonAdapter.Factory {&#xA;  override fun create(type: Type, annotations: Set&amp;lt;Annotation&amp;gt;, moshi: Moshi): JsonAdapter&amp;lt;*&amp;gt;? {&#xA;    val rawType: Class&amp;lt;*&amp;gt; = type.rawType&#xA;    if (!rawType.isAnnotationPresent(AlwaysSerializeNulls::class.java)) {&#xA;      return null&#xA;    }&#xA;    val delegate: JsonAdapter&amp;lt;Any&amp;gt; = moshi.nextAdapter(this, type, annotations)&#xA;    return delegate.serializeNulls()&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;After determining that it applies, the factory looks up Moshi&#39;s built-in adapter by calling &lt;code&gt;Moshi.nextAdapter()&lt;/code&gt;. This is key to the composition mechanism: adapters delegate to each other! The composition in this example is simple: it applies the &lt;code&gt;serializeNulls()&lt;/code&gt; transform on the delegate.&lt;/p&gt; &#xA;&lt;p&gt;Composing adapters can be very sophisticated:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;An adapter could transform the input object before it is JSON-encoded. A string could be trimmed or truncated; a value object could be simplified or normalized.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An adapter could repair the output object after it is JSON-decoded. It could fill-in missing data or discard unwanted data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The JSON could be given extra structure, such as wrapping values in objects or arrays.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Moshi is itself built on the pattern of repeatedly composing adapters. For example, Moshi&#39;s built-in adapter for &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; delegates to the adapter of &lt;code&gt;T&lt;/code&gt;, and calls it repeatedly.&lt;/p&gt; &#xA;&lt;h3&gt;Precedence&lt;/h3&gt; &#xA;&lt;p&gt;Moshi&#39;s composition mechanism tries to find the best adapter for each type. It starts with the first adapter or factory registered with &lt;code&gt;Moshi.Builder.add()&lt;/code&gt;, and proceeds until it finds an adapter for the target type.&lt;/p&gt; &#xA;&lt;p&gt;If a type can be matched multiple adapters, the earliest one wins.&lt;/p&gt; &#xA;&lt;p&gt;To register an adapter at the end of the list, use &lt;code&gt;Moshi.Builder.addLast()&lt;/code&gt; instead. This is most useful when registering general-purpose adapters, such as the &lt;code&gt;KotlinJsonAdapterFactory&lt;/code&gt; below.&lt;/p&gt; &#xA;&lt;h2&gt;Kotlin&lt;/h2&gt; &#xA;&lt;p&gt;Moshi is a great JSON library for Kotlin. It understands Kotlin’s non-nullable types and default parameter values. When you use Kotlin with Moshi you may use reflection, codegen, or both.&lt;/p&gt; &#xA;&lt;h4&gt;Reflection&lt;/h4&gt; &#xA;&lt;p&gt;The reflection adapter uses Kotlin’s reflection library to convert your Kotlin classes to and from JSON. Enable it by adding the &lt;code&gt;KotlinJsonAdapterFactory&lt;/code&gt; to your &lt;code&gt;Moshi.Builder&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val moshi = Moshi.Builder()&#xA;    .addLast(KotlinJsonAdapterFactory())&#xA;    .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Moshi’s adapters are ordered by precedence, so you should use &lt;code&gt;addLast()&lt;/code&gt; with &lt;code&gt;KotlinJsonAdapterFactory&lt;/code&gt;, and &lt;code&gt;add()&lt;/code&gt; with your custom adapters.&lt;/p&gt; &#xA;&lt;p&gt;The reflection adapter requires the following additional dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;com.squareup.moshi&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;moshi-kotlin&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;1.12.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;com.squareup.moshi:moshi-kotlin:1.13.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the reflection adapter transitively depends on the &lt;code&gt;kotlin-reflect&lt;/code&gt; library which is a 2.5 MiB .jar file.&lt;/p&gt; &#xA;&lt;h4&gt;Codegen&lt;/h4&gt; &#xA;&lt;p&gt;Moshi’s Kotlin codegen support can be used as an annotation processor (via &lt;a href=&#34;https://kotlinlang.org/docs/reference/kapt.html&#34;&gt;kapt&lt;/a&gt;) or Kotlin SymbolProcessor (&lt;a href=&#34;https://github.com/google/ksp&#34;&gt;KSP&lt;/a&gt;). It generates a small and fast adapter for each of your Kotlin classes at compile-time. Enable it by annotating each class that you want to encode as JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@JsonClass(generateAdapter = true)&#xA;data class BlackjackHand(&#xA;  val hidden_card: Card,&#xA;  val visible_cards: List&amp;lt;Card&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The codegen adapter requires that your Kotlin types and their properties be either &lt;code&gt;internal&lt;/code&gt; or &lt;code&gt;public&lt;/code&gt; (this is Kotlin’s default visibility).&lt;/p&gt; &#xA;&lt;p&gt;Kotlin codegen has no additional runtime dependency. You’ll need to enable kapt or KSP and then add the following to your build to enable the annotation processor:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;KSP&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;  id(&#34;com.google.devtools.ksp&#34;).version(&#34;1.6.10-1.0.4&#34;) // Or latest version of KSP&#xA;}&#xA;&#xA;dependencies {&#xA;  ksp(&#34;com.squareup.moshi:moshi-kotlin-codegen:1.13.0&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kapt&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;com.squareup.moshi&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;moshi-kotlin-codegen&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;1.12.0&amp;lt;/version&amp;gt;&#xA;  &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;kapt(&#34;com.squareup.moshi:moshi-kotlin-codegen:1.13.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Limitations&lt;/h4&gt; &#xA;&lt;p&gt;If your Kotlin class has a superclass, it must also be a Kotlin class. Neither reflection or codegen support Kotlin types with Java supertypes or Java types with Kotlin supertypes. If you need to convert such classes to JSON you must create a custom type adapter.&lt;/p&gt; &#xA;&lt;p&gt;The JSON encoding of Kotlin types is the same whether using reflection or codegen. Prefer codegen for better performance and to avoid the &lt;code&gt;kotlin-reflect&lt;/code&gt; dependency; prefer reflection to convert both private and protected properties. If you have configured both, generated adapters will be used on types that are annotated &lt;code&gt;@JsonClass(generateAdapter = true)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://search.maven.org/classic/remote_content?g=com.squareup.moshi&amp;amp;a=moshi&amp;amp;v=LATEST&#34;&gt;the latest JAR&lt;/a&gt; or depend via Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;com.squareup.moshi&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;moshi&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;1.13.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;com.squareup.moshi:moshi:1.13.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Snapshots of the development version are available in &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/com/squareup/moshi/&#34;&gt;Sonatype&#39;s &lt;code&gt;snapshots&lt;/code&gt; repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;R8 / ProGuard&lt;/h2&gt; &#xA;&lt;p&gt;Moshi contains minimally required rules for its own internals to work without need for consumers to embed their own. However if you are using reflective serialization and R8 or ProGuard, you must add keep rules in your proguard configuration file for your reflectively serialized classes.&lt;/p&gt; &#xA;&lt;h4&gt;Enums&lt;/h4&gt; &#xA;&lt;p&gt;Annotate enums with &lt;code&gt;@JsonClass(generateAdapter = false)&lt;/code&gt; to prevent them from being removed/obfuscated from your code by R8/ProGuard.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2015 Square, Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>PatilShreyas/compose-report-to-html</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/PatilShreyas/compose-report-to-html</id>
    <link href="https://github.com/PatilShreyas/compose-report-to-html" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CLI utility to convert Jetpack Compose compiler metrics and reports to beautified HTML page.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Compose Compiler Reports to HTML Generator&lt;/h1&gt; &#xA;&lt;p&gt;A CLI utility to convert Jetpack Compose compiler metrics and reports to beautified 😍 HTML page. &lt;em&gt;Made with ❤️ for Android Developers and Composers&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PatilShreyas/compose-report-to-html/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/PatilShreyas/compose-report-to-html/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PatilShreyas/compose-report-to-html/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/PatilShreyas/compose-report-to-html/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PatilShreyas&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/followers/PatilShreyas?label=Follow&amp;amp;style=social&#34; alt=&#34;Github Followers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PatilShreyas/compose-report-to-html/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/PatilShreyas/compose-report-to-html?style=social&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PatilShreyas/compose-report-to-html/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/PatilShreyas/compose-report-to-html?style=social&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PatilShreyas/compose-report-to-html/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/PatilShreyas/compose-report-to-html?style=social&#34; alt=&#34;GitHub watchers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/imShreyasPatil&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/imShreyasPatil?label=Follow&amp;amp;style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Downloads&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;NPM&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/compose-report2html&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/compose-report2html?label=npm&amp;amp;logo=npm&#34; alt=&#34;NPM Package&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.npmjs.com/package/compose-report2html&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/compose-report2html?label=Downloads&amp;amp;logo=npm&#34; alt=&#34;NPM Downloads&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;JAR&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/patilshreyas/compose-report-to-html/releases/latest/download/composeReport2Html.jar&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/patilshreyas/compose-report-to-html?label=JAR&amp;amp;logo=java&#34; alt=&#34;Download JAR&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/patilshreyas/compose-report-to-html/releases/latest/download/composeReport2Html.jar&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/PatilShreyas/compose-report-to-html/total?label=Downloads&amp;amp;logo=java&#34; alt=&#34;GitHub downloads&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;💡 Motivation&lt;/h2&gt; &#xA;&lt;p&gt;The Compose Compiler plugin can generate reports / metrics around certain compose-specific concepts that can be useful to understand what is happening with some of your compose code at a fine-grained level. &lt;a href=&#34;https://github.com/androidx/androidx/raw/androidx-main/compose/compiler/design/compiler-metrics.md&#34;&gt;&lt;em&gt;&lt;strong&gt;See this&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This generates reports in &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;csv&lt;/code&gt; and &lt;code&gt;txt&lt;/code&gt; files which are not easily trace-able for developers. Also, Composable function and class reports becomes large and tedious to check. This tool parses the reports and metrics generated by Compose compiler and beautifies into a HTML page and intelligently distinguishes problematic and non-problematic composable functions and classes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This utility doesn&#39;t generate Compose Metrics and Reports. First, raw Compose report should be generated from the Compiler and those generated files should be feed to this utility. By parsing that data, this utility generates the beautified report.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🧑‍💻 Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, install the CLI utility&lt;/p&gt; &#xA;&lt;h3&gt;1. Install CLI&lt;/h3&gt; &#xA;&lt;p&gt;To install the CLI utility, there are two ways&lt;/p&gt; &#xA;&lt;h4&gt;1.1 Directly use &lt;code&gt;.jar&lt;/code&gt; distribution&lt;/h4&gt; &#xA;&lt;p&gt;Navigate to the &lt;a href=&#34;https://github.com/PatilShreyas/compose-report-to-html/releases&#34;&gt;releases&lt;/a&gt; and download the latest JAR artifact.&lt;/p&gt; &#xA;&lt;h4&gt;1.2 Install from NPM&lt;/h4&gt; &#xA;&lt;p&gt;Install the &lt;a href=&#34;https://www.npmjs.com/package/compose-report2html&#34;&gt;NPM package&lt;/a&gt; for CLI utility.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install -g compose-report2html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Know usage&lt;/h3&gt; &#xA;&lt;p&gt;Run the commands to know the usage of CLI&lt;/p&gt; &#xA;&lt;h4&gt;2.1 If using JAR artifact&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;java -jar composeReport2Html.jar -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.2 If using NPM package&lt;/h4&gt; &#xA;&lt;p&gt;If you have installed CLI utility from NPM package, it can be directly available from Terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;composeReport2Html.jar -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you run, here&#39;s how it looks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Usage: Compose Compiler Report to HTML Generator options_list&#xA;Options:&#xA;    --applicationName, -app -&amp;gt; Application name (To be displayed in the report) (always required) { String }&#xA;    --overallStatsFile, -overallStatsReport -&amp;gt; Overall Statistics Metrics JSON file (always required) { String }&#xA;    --detailedStatsFile, -detailedStatsMetrics -&amp;gt; Detailed Statistics Metrics CSV file (always required) { String }&#xA;    --composableMetricsFile, -composableMetrics -&amp;gt; Composable Metrics TXT file (always required) { String }&#xA;    --classMetricsFile, -classMetrics -&amp;gt; Class Metrics TXT file (always required) { String }&#xA;    --outputDirectory, -o -&amp;gt; Output directory name (always required) { String }&#xA;    --help, -h -&amp;gt; Usage info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Generate report&lt;/h3&gt; &#xA;&lt;p&gt;Make sure to generate Compose compiler metrics and reports as mentioned &lt;a href=&#34;https://github.com/androidx/androidx/raw/androidx-main/compose/compiler/design/compiler-metrics.md&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://chris.banes.dev/composable-metrics/&#34;&gt;this good read article by Chris Banes&lt;/a&gt;. These files are then needed to this CLI utility to feed the data.&lt;/p&gt; &#xA;&lt;p&gt;To generate the report, provide details related to app, metric and report files and output directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;java -jar composeReport2Html.jar \&#xA;  -app &amp;lt;YOUR_APP_NAME&amp;gt; \&#xA;  -overallStatsReport &amp;lt;PATH TO *-module.json FILE&amp;gt; \&#xA;  -detailedStatsMetrics &amp;lt;PATH TO *-composables.csv FILE&amp;gt; \&#xA;  -composableMetrics &amp;lt;PATH TO *-composables.txt FILE&amp;gt; \&#xA;  -classMetrics &amp;lt;PATH TO *-classes.txt FILE&amp;gt; \&#xA;  -o &amp;lt;OUTPUT DIRECTORY PATH FOR REPORT&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR, directly use &lt;code&gt;composeReport2Html&lt;/code&gt; (&lt;em&gt;if using NPM package&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Example Usage:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;java -jar composeReport2Html.jar \&#xA;  -app NotyKT \&#xA;  -overallStatsReport app_release-module.json \&#xA;  -detailedStatsMetrics app_release-composables.csv \&#xA;  -composableMetrics app_release-composables.txt \&#xA;  -classMetrics app_release-classes.txt \&#xA;  -o notyReport&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example, it will create report with name &lt;strong&gt;&#34;NotyKT&#34;&lt;/strong&gt; with specified metric and report files and finally report will be generated in the specified path i.e. &lt;code&gt;notyReport/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📈 Report Overview&lt;/h2&gt; &#xA;&lt;p&gt;Once report is generated, it looks like this.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Title&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Preview&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Brief Statistics&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generates metrics from &lt;code&gt;.json&lt;/code&gt; file and represents in tabular format. &lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/PatilShreyas/compose-report-to-html/main/images/brief-stats.png&#34; alt=&#34;Brief Statistics&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Detailed Statistics&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generates report from &lt;code&gt;.csv&lt;/code&gt; file and represents in tabular format. &lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/PatilShreyas/compose-report-to-html/main/images/detailed-stats.png&#34; alt=&#34;Detailed Statistics&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Composable Report&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parses &lt;code&gt;-composables.txt&lt;/code&gt; file and separates out composables with and without issues and properly highlights issues associated with them. &lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/PatilShreyas/compose-report-to-html/main/images/composable-report.png&#34; alt=&#34;Composable Report&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Class Report&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parses &lt;code&gt;-classes.txt&lt;/code&gt; file and separates out stable and unstable classes out of it and properly highlights issues associated with them. &lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/PatilShreyas/compose-report-to-html/main/images/class-report.png&#34; alt=&#34;Class Report&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Right now, work is in progress and more improvements related to the report will happen in some time. If you have any feedback / suggestions related to the report, feel free to discuss it (&lt;em&gt;find discussion link in the below section&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;🙋‍♂️ Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/PatilShreyas/compose-report-to-html/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for more information regarding contribution.&lt;/p&gt; &#xA;&lt;h2&gt;💬 Discuss?&lt;/h2&gt; &#xA;&lt;p&gt;Have any questions, doubts or want to present your opinions, views? You&#39;re always welcome. You can &lt;a href=&#34;https://github.com/PatilShreyas/compose-report-to-html/discussions&#34;&gt;start discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (c) 2022 Shreyas Patil&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/gradle-intellij-plugin</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/JetBrains/gradle-intellij-plugin</id>
    <link href="https://github.com/JetBrains/gradle-intellij-plugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gradle plugin for building plugins for IntelliJ-based IDEs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&#34;documentr_top&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;official JetBrains project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plugins.gradle.org/plugin/org.jetbrains.intellij&#34;&gt;&lt;img src=&#34;https://img.shields.io/gradle-plugin-portal/v/org.jetbrains.intellij?color=green&amp;amp;label=Gradle%20Plugin%20Portal&amp;amp;logo=gradle&#34; alt=&#34;Gradle Plugin Portal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JetBrains/gradle-intellij-plugin/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/JetBrains/gradle-intellij-plugin/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/JBPlatform/&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/JBPlatform?style=flat&amp;amp;logo=twitter&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plugins.jetbrains.com/slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-%23gradle--intellij--plugin-blue?style=flat-square&amp;amp;logo=Slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/gradle-intellij-plugin/master/.github/readme/gradle-intellij-plugin.png&#34; alt=&#34;Gradle IntelliJ Plugin&#34;&gt; &#xA;&lt;h1&gt;gradle-intellij-plugin&lt;/h1&gt; &#xA;&lt;h4&gt;&lt;a id=&#34;the-latest-version&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34; href=&#34;https://raw.githubusercontent.com/JetBrains/gradle-intellij-plugin/master/#the-latest-version&#34;&gt;&#xA;  &lt;svg class=&#34;octicon octicon-link&#34; viewbox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&#xA;   &lt;path fill-rule=&#34;evenodd&#34; d=&#34;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&#34;&gt;&lt;/path&gt;&#xA;  &lt;/svg&gt;&lt;/a&gt;The latest version is 1.6.0&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;This project requires &lt;strong&gt;Gradle 6.7&lt;/strong&gt; or newer, however it is recommended to &lt;strong&gt;use the &lt;a href=&#34;https://gradle.org/releases/&#34;&gt;latest Gradle available&lt;/a&gt;&lt;/strong&gt;. Update it with: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew wrapper --gradle-version=VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Gradle JVM should be set to &lt;strong&gt;Java 11&lt;/strong&gt; (see &lt;em&gt;Settings/Preferences | Build, Execution, Deployment | Build Tools | Gradle&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When upgrading to 1.x version, please make sure to follow migration guide to adjust your existing build script: &lt;a href=&#34;https://lp.jetbrains.com/gradle-intellij-plugin&#34;&gt;https://lp.jetbrains.com/gradle-intellij-plugin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin allows you to build plugins for IntelliJ Platform using specified IntelliJ SDK and bundled/3rd-party plugins.&lt;/p&gt; &#xA;&lt;p&gt;The plugin adds extra IntelliJ-specific dependencies, patches &lt;code&gt;processResources&lt;/code&gt; tasks to fill some tags (name, version) in &lt;code&gt;plugin.xml&lt;/code&gt; with appropriate values, patches compile tasks to instrument code with nullability assertions and forms classes made with IntelliJ GUI Designer and provides some build steps which might be helpful while developing plugins for IntelliJ platform.&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; Create new plugins with a preconfigured project scaffold and CI using &lt;a href=&#34;https://github.com/JetBrains/intellij-platform-plugin-template&#34;&gt;IntelliJ Platform Plugin Template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/gradle-prerequisites.html&#34;&gt;the manual&lt;/a&gt; on how to start developing plugins for the IntelliJ Platform using Gradle.&lt;/p&gt; &#xA;&lt;p&gt;Also, please take a look at &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/blob/master/FAQ.md&#34;&gt;the FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Gradle&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;plugins {&#xA;  id &#34;org.jetbrains.intellij&#34; version &#34;1.6.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Snapshot version&lt;/h3&gt; &#xA;&lt;summary&gt;To get the latest features, use the snapshot version of the plugin&lt;/summary&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;plugins {&#xA;  id &#34;org.jetbrains.intellij&#34; version &#34;1.7.0-SNAPSHOT&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And define the snapshot repository in your &lt;code&gt;settings.gradle&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;pluginManagement {&#xA;    repositories {&#xA;        maven {&#xA;            url &#39;https://oss.sonatype.org/content/repositories/snapshots/&#39;&#xA;        }&#xA;        gradlePluginPortal()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tasks&lt;/h3&gt; &#xA;&lt;p&gt;Plugin introduces the following tasks&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Task&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buildPlugin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Assembles plugin and prepares ZIP archive for deployment.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;patchPluginXml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Collects all plugin.xml files in sources and fill since/until build and version attributes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;downloadRobotServerPlugin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Downloads robot-server plugin which is needed for ui tests running.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prepareSandbox&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates proper structure of plugin, copies patched plugin xml files and fills sandbox directory with all of it.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prepareTestingSandbox&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prepares sandbox that will be used while running tests.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prepareUiTestingSandbox&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prepares sandbox that will be used while running ui tests.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buildSearchableOptions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builds an index of UI components (a.k.a. searchable options) for the plugin by running a headless IDE instance.&lt;br&gt;Note, that this is a &lt;code&gt;runIde&lt;/code&gt; task with predefined arguments and all properties of &lt;code&gt;runIde&lt;/code&gt; task are also applied to &lt;code&gt;buildSearchableOptions&lt;/code&gt; tasks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;jarSearchableOptions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a jar file with searchable options to be distributed with the plugin.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;runIde&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Executes an IntelliJ IDEA instance with the plugin you are developing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;runIdePerformanceTest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Executes performance tests on IntelliJ IDE with the plugin you are developing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;runIdeForUiTests&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Executes an IntelliJ IDEA instance ready for ui tests run with the plugin you are developing. See &lt;a href=&#34;https://github.com/JetBrains/intellij-ui-test-robot&#34;&gt;intellij-ui-test-robot&lt;/a&gt; project to know more&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;publishPlugin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Uploads plugin distribution archive to &lt;a href=&#34;https://plugins.jetbrains.com&#34;&gt;https://plugins.jetbrains.com&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;runPluginVerifier&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runs the &lt;a href=&#34;https://github.com/JetBrains/intellij-plugin-verifier&#34;&gt;IntelliJ Plugin Verifier&lt;/a&gt; tool to check the binary compatibility with specified IntelliJ IDE builds.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verifyPlugin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Validates completeness and contents of plugin.xml descriptors as well as plugin’s archive structure.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;signPlugin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Signs the ZIP archive with the provided key using &lt;a href=&#34;https://github.com/JetBrains/marketplace-zip-signer&#34;&gt;marketplace-zip-signer&lt;/a&gt; library.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;listProductsReleases&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists the available IDE binary releases that could be used with the Plugin Verifier.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Plugin provides the following options to configure target IntelliJ SDK and build archive&lt;/p&gt; &#xA;&lt;h3&gt;Setup DSL&lt;/h3&gt; &#xA;&lt;p&gt;The following attributes are a part of the Setup DSL &lt;kbd&gt;intellij { ... }&lt;/kbd&gt; in which allows you to set up the environment and dependencies.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Attributes&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Values&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;pluginName&lt;/kbd&gt; - The name of the target zip-archive and defines the name of plugin artifact.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &lt;br&gt;&lt;kbd&gt;String&lt;/kbd&gt; - &lt;code&gt;&#39;gradle-intellij-plugin&#39;&lt;/code&gt; &lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;kbd&gt;$project.name&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;IntelliJ Platform Properties&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Attributes&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Values&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;version&lt;/kbd&gt; &lt;strong&gt;REQUIRED&lt;/strong&gt; - The version of the IntelliJ Platform IDE that will be used to build the plugin.&lt;br&gt;&lt;br&gt;Please see &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html&#34;&gt;Plugin Compatibility&lt;/a&gt; in SDK docs for more details.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Notes:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Value may have &lt;code&gt;IC-&lt;/code&gt;, &lt;code&gt;IU-&lt;/code&gt;, &lt;code&gt;CL-&lt;/code&gt;, &lt;code&gt;PY-&lt;/code&gt;, &lt;code&gt;PC-&lt;/code&gt;, &lt;code&gt;RD-&lt;/code&gt;, &lt;code&gt;GO-&lt;/code&gt; or &lt;code&gt;JPS-&lt;/code&gt; prefix in order to define IDE distribution type.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;intellij.version&lt;/code&gt; and &lt;code&gt;intellij.localPath&lt;/code&gt; must not be specified at the same time.&lt;/li&gt; &#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;version #&lt;/kbd&gt;&lt;br&gt;&lt;code&gt;&#39;2017.2.5&#39;&lt;/code&gt; or &lt;code&gt;&#39;IC-2017.2.5&#39;&lt;/code&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;build #&lt;/kbd&gt;&lt;br&gt;&lt;code&gt;&#39;172.4343&#39;&lt;/code&gt; or &lt;code&gt;&#39;IU-172.4343&#39;&lt;/code&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;&#39;LATEST-EAP-SNAPSHOT&#39;&lt;/kbd&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt;&lt;br&gt;&lt;br&gt;All available JetBrains IDEs versions can be found at &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/intellij-artifacts.html&#34;&gt;IntelliJ Artifacts&lt;/a&gt; page.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;type&lt;/kbd&gt; - The type of IDE distribution.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;&#39;IC&#39;&lt;/kbd&gt; - IntelliJ IDEA Community Edition. &lt;/li&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;&#39;IU&#39;&lt;/kbd&gt; - IntelliJ IDEA Ultimate Edition. &lt;/li&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;&#39;CL&#39;&lt;/kbd&gt; - CLion. &lt;/li&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;&#39;PY&#39;&lt;/kbd&gt; - PyCharm Professional Edition. &lt;/li&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;&#39;PC&#39;&lt;/kbd&gt; - PyCharm Community Edition. &lt;/li&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;&#39;RD&#39;&lt;/kbd&gt; - Rider.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;&#39;GO&#39;&lt;/kbd&gt; - GoLand.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;&#39;JPS&#39;&lt;/kbd&gt; - JPS-only. &lt;/li&gt; &#xA;    &lt;/ul&gt;&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;kbd&gt;&#39;IC&#39;&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;localPath&lt;/kbd&gt; - The path to locally installed IDE distribution that should be used as a dependency. &lt;br&gt;&lt;br&gt;&lt;strong&gt;Notes:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;intellij.version&lt;/code&gt; and &lt;code&gt;intellij.localPath&lt;/code&gt; must not be specified at the same time.&lt;/li&gt; &#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &lt;br&gt;&lt;kbd&gt;path&lt;/kbd&gt; - &lt;code&gt;&#39;/Applications/IntelliJIDEA.app&#39;&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;kbd&gt;null&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;plugins&lt;/kbd&gt; - The list of bundled IDE plugins and plugins from the &lt;a href=&#34;https://plugins.jetbrains.com/&#34;&gt;JetBrains Plugin Repository&lt;/a&gt;. &lt;br&gt;&lt;br&gt;Please see &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/plugin-dependencies.html&#34;&gt;Plugin Dependencies&lt;/a&gt; in SDK docs for more details.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Notes:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;For plugins from the JetBrains Plugin Repository use format &lt;code&gt;pluginId:version&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;For bundled plugins version should be omitted: e.g. &lt;code&gt;org.intellij.groovy&lt;/code&gt; for &lt;code&gt;IDEA/plugins/Groovy&lt;/code&gt; plugin.&lt;/li&gt; &#xA;     &lt;li&gt;For sub-projects use project reference &lt;code&gt;project(&#39;:subproject&#39;)&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;If you need to refer plugin&#39;s classes from your project, you also have to define a dependency in your &lt;code&gt;plugin.xml&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;org.plugin.id:version[@channel]&lt;/kbd&gt;&lt;br&gt;&lt;code&gt;&#39;org.intellij.plugins.markdown:8.5.0&#39;, &#39;org.intellij.scala:2017.2.638@nightly&#39;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;bundledPluginName&lt;/kbd&gt;&lt;br&gt;&lt;code&gt;&#39;android&#39;, &#39;Groovy&#39;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;kbd&gt;project(&#39;:projectName&#39;)&lt;/kbd&gt;&lt;br&gt;&lt;code&gt;project(&#39;:plugin-subproject&#39;)&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt;&lt;strong&gt;Default Value:&lt;/strong&gt; none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Building Properties&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Attributes&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Values&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;updateSinceUntilBuild&lt;/kbd&gt; - Should plugin patch &lt;code&gt;plugin.xml&lt;/code&gt; with since and until build values? &lt;br&gt;&lt;br&gt;&lt;strong&gt;Notes:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If &lt;code&gt;true&lt;/code&gt; then user-defined values from &lt;code&gt;patchPluginXml.sinceBuild&lt;/code&gt; and &lt;code&gt;patchPluginXml.untilBuild&lt;/code&gt; will be used (or their default values if none set). &lt;/li&gt; &#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &lt;kbd&gt;true&lt;/kbd&gt; &lt;kbd&gt;false&lt;/kbd&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;kbd&gt;true&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;sameSinceUntilBuild&lt;/kbd&gt; - Should plugin patch &lt;code&gt;plugin.xml&lt;/code&gt; with an until build value that is just an &#34;open&#34; since build? &lt;br&gt;&lt;br&gt;&lt;strong&gt;Notes:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Is useful for building plugins against EAP IDE builds.&lt;/li&gt; &#xA;     &lt;li&gt;If &lt;code&gt;true&lt;/code&gt; then the user-defined value from &lt;code&gt;patchPluginXml.sinceBuild&lt;/code&gt; (or its default value) will be used as a &lt;code&gt;since&lt;/code&gt; and an &#34;open&#34; &lt;code&gt;until&lt;/code&gt; value. &lt;/li&gt; &#xA;     &lt;li&gt;If &lt;code&gt;patchPluginXml.untilBuild&lt;/code&gt; has a value set, then &lt;code&gt;sameSinceUntilBuild&lt;/code&gt; is ignored.&lt;/li&gt; &#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &lt;kbd&gt;true&lt;/kbd&gt; &lt;kbd&gt;false&lt;/kbd&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;kbd&gt;false&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;instrumentCode&lt;/kbd&gt; - Should plugin instrument java classes with nullability assertions and compile forms created by IntelliJ GUI Designer?&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &lt;kbd&gt;true&lt;/kbd&gt; &lt;kbd&gt;false&lt;/kbd&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;kbd&gt;true&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Run/Debug IDE Properties&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Attributes&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Values&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;sandboxDir&lt;/kbd&gt; - The path of sandbox directory that is used for running IDE with developing plugin.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &lt;br&gt;&lt;kbd&gt;path&lt;/kbd&gt; - &lt;code&gt;&#39;${project.rootDir}/.sandbox&#39;&lt;/code&gt; &lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;kbd&gt;&#39;${project.buildDir}/idea-sandbox&#39;&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Infrastructure Properties&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Attributes&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Values&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;intellijRepository&lt;/kbd&gt;, &lt;kbd&gt;jreRepository&lt;/kbd&gt; - Urls of repositories for downloading IDE distributions and JetBrains Java Runtime. &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &lt;br&gt;&lt;kbd&gt;url&lt;/kbd&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;kbd&gt;&lt;a href=&#34;https://jetbrains.com/intellij-repository&#34;&gt;https://jetbrains.com/intellij-repository&lt;/a&gt;&lt;/kbd&gt;, &lt;kbd&gt;&lt;a href=&#34;https://cache-redirector.jetbrains.com/intellij-jbr&#34;&gt;https://cache-redirector.jetbrains.com/intellij-jbr&lt;/a&gt;&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;pluginsRepositories { ... }&lt;/kbd&gt; - Configure repositories for downloading plugin dependencies. &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Configuration:&lt;/strong&gt; &lt;br&gt;&lt;kbd&gt;marketplace()&lt;/kbd&gt; - use Maven repository with plugins listed in the JetBrains marketplace&lt;br&gt;&lt;kbd&gt;maven(repositoryUrl)&lt;/kbd&gt; - use custom Maven repository with plugins&lt;br&gt;&lt;kbd&gt;maven { repositoryUrl }&lt;/kbd&gt; - use custom Maven repository with plugins where you can configure additional parameters (credentials, authentication and etc.)&lt;br&gt;&lt;kbd&gt;custom(pluginsXmlUrl)&lt;/kbd&gt; - use &lt;a href=&#34;https://www.jetbrains.com/help/idea/managing-plugins.html&#34;&gt;custom plugin repository&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Configuration:&lt;/strong&gt; &lt;kbd&gt;pluginsRepositories { marketplace() }&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;downloadSources&lt;/kbd&gt; - Should plugin download IntelliJ sources while initializing Gradle build? &lt;br&gt;&lt;br&gt;&lt;strong&gt;Notes:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Since sources are not needed while testing on CI, you can set it to &lt;code&gt;false&lt;/code&gt; for a particular environment.&lt;/li&gt; &#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &lt;kbd&gt;true&lt;/kbd&gt; &lt;kbd&gt;false&lt;/kbd&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value:&lt;/strong&gt; &lt;kbd&gt;true&lt;/kbd&gt; if &lt;code&gt;CI&lt;/code&gt; environment variable is not set&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;ideaDependencyCachePath&lt;/kbd&gt; - The absolute path to the local directory that should be used for storing IDE distributions. &lt;br&gt;&lt;br&gt;&lt;strong&gt;Notes:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Empty value means the Gradle cache directory will be used.&lt;/li&gt; &#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &lt;br&gt;&lt;kbd&gt;path&lt;/kbd&gt; - &lt;code&gt;&#39;&amp;lt;example&amp;gt;&#39;&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value:&lt;/strong&gt; none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Running DSL&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;RunIde&lt;/code&gt; tasks (both &lt;code&gt;runIde&lt;/code&gt; and &lt;code&gt;buildSearchableOptions&lt;/code&gt;) extend &lt;a href=&#34;https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html&#34;&gt;JavaExec&lt;/a&gt; Gradle task, all configuration attributes of &lt;code&gt;JavaExec&lt;/code&gt; task can be used in &lt;code&gt;RunIde&lt;/code&gt; as well.&lt;/p&gt; &#xA;&lt;p&gt;In addition to that, following attributes may be used to customize IDE running:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Attributes&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Default Value&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;jbrVersion&lt;/kbd&gt; JetBrains Java runtime version to use when running the IDE with the plugin.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Acceptable Values:&lt;/strong&gt; &lt;kbd&gt;String&lt;/kbd&gt; - E.g. &lt;code&gt;&#39;8u112b752.4&#39;&lt;/code&gt;, &lt;code&gt;&#39;8u202b1483.24&#39;&lt;/code&gt;, or &lt;code&gt;&#39;11_0_2b159&#39;&lt;/code&gt;. Prefixes &lt;code&gt;jbrex&lt;/code&gt;, &lt;code&gt;jbrx&lt;/code&gt; or &lt;code&gt;jbr&lt;/code&gt; are allowed.&lt;br&gt;&lt;br&gt;All JetBrains Java versions are available at JetBrains Space Packages, and &lt;a href=&#34;https://github.com/JetBrains/JetBrainsRuntime/releases&#34;&gt;GitHub&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Default Value:&lt;/strong&gt; &#xA;    &lt;kdb&gt;&#xA;     null&#xA;    &lt;/kdb&gt; for IDE &amp;lt; 2017.3, &#xA;    &lt;kdb&gt;&#xA;     builtin java version&#xA;    &lt;/kdb&gt; for IDE &amp;gt;= 2017.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;jbrVariant&lt;/kbd&gt; JetBrains Java runtime variant to use when running the IDE with the plugin. For JBR 17, &lt;code&gt;dcevm&lt;/code&gt; is bundled by default. As a consequence, separated &lt;code&gt;dcevm&lt;/code&gt; and &lt;code&gt;nomod&lt;/code&gt; variants are no longer available.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Optional. Example values: &lt;code&gt;jcef&lt;/code&gt;, &lt;code&gt;sdk&lt;/code&gt;, &lt;code&gt;dcevm&lt;/code&gt;, &lt;code&gt;fd&lt;/code&gt;, &lt;code&gt;nomod&lt;/code&gt;. See &lt;a href=&#34;https://github.com/JetBrains/JetBrainsRuntime/releases&#34;&gt;JetBrains Runtime Releases&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;ideDir&lt;/kbd&gt; Path to IDE distribution that will be used to run the IDE with the plugin.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;path to IDE-dependency&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;configDir&lt;/kbd&gt; Path to configuration directory.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;${intellij.sandboxDir}/config&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;pluginsDir&lt;/kbd&gt; Path to plugins directory.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;${intellij.sandboxDir}/plugins&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;systemDir&lt;/kbd&gt; Path to indexes directory.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;${intellij.sandboxDir}/system&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;autoReloadPlugins&lt;/kbd&gt; Enable/disable &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/ide-development-instance.html#enabling-auto-reload&#34;&gt;auto-reload&lt;/a&gt; of dynamic plugins.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;true&lt;/kbd&gt; for IDE &amp;gt;= 2020.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Running performance test DSL&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;RunIdePerformanceTest&lt;/code&gt; task extends &lt;code&gt;RunIdeBase&lt;/code&gt; task, all configuration attributes of &lt;code&gt;JavaExec&lt;/code&gt; and &lt;code&gt;RunIde&lt;/code&gt; task can be used in &lt;code&gt;RunIdePerformanceTest&lt;/code&gt; as well.&lt;/p&gt; &#xA;&lt;p&gt;In addition to that, following attributes may be used to customize test execution:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Attributes&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Default Value&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;testDataDir&lt;/kbd&gt; Path to the directory with the test projects and &#39;.ijperf&#39; files.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;artifactsDir&lt;/kbd&gt; Path to IDE distribution that will be used to run the IDE with the plugin.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;profilerName&lt;/kbd&gt; Name of the profiler which will be used while execution(ProfilerName.YOURKIT or ProfilerName.ASYNC).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;ASYNC&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Patching DSL&lt;/h3&gt; &#xA;&lt;p&gt;The following attributes are a part of the Patching DSL &lt;kbd&gt;patchPluginXml { ... }&lt;/kbd&gt; in which allows Gradle to patch specific attributes in a set of &lt;code&gt;plugin.xml&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; To maintain and generate an up-to-date changelog, try using &lt;a href=&#34;https://github.com/JetBrains/gradle-changelog-plugin&#34;&gt;Gradle Changelog Plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Attributes&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Default Value&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;version&lt;/kbd&gt; is a value for the &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; tag.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;project.version&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;sinceBuild&lt;/kbd&gt; is for the &lt;code&gt;since-build&lt;/code&gt; attribute of the &lt;code&gt;&amp;lt;idea-version&amp;gt;&lt;/code&gt; tag.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;intellij.version&lt;/kbd&gt; in &lt;code&gt;Branch.Build.Fix&lt;/code&gt; format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;untilBuild&lt;/kbd&gt; is for the &lt;code&gt;until-build&lt;/code&gt; attribute of the &lt;code&gt;&amp;lt;idea-version&amp;gt;&lt;/code&gt; tag.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;intellij.version&lt;/kbd&gt; in &lt;code&gt;Branch.Build.*&lt;/code&gt; format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;pluginDescription&lt;/kbd&gt; is for the &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt; tag.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;changeNotes&lt;/kbd&gt; is for the &lt;code&gt;&amp;lt;change-notes&amp;gt;&lt;/code&gt; tag.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;pluginXmlFiles&lt;/kbd&gt; is a collection of xml files to patch.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;All &lt;code&gt;plugin.xml&lt;/code&gt; files with &lt;code&gt;&amp;lt;idea-plugin&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;destinationDir&lt;/kbd&gt; is a directory to store patched xml files.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;&#39;${project.buildDir}/patchedPluginXmlFiles&#39;&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Plugin Verifier DSL&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-plugin-verifier&#34;&gt;IntelliJ Plugin Verifier&lt;/a&gt; integration task allows to check the binary compatibility of the built plugin against the specified &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/api-changes-list.html&#34;&gt;IntelliJ IDE builds&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugin Verifier DSL &lt;code&gt;runPluginVerifier { ... }&lt;/code&gt; allows to define the list of IDEs used for the verification, as well as explicit tool version and any of the available &lt;a href=&#34;https://github.com/JetBrains/intellij-plugin-verifier#common-options&#34;&gt;options&lt;/a&gt; by proxifying them to the Verifier CLI.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; For more details, examples or issues reporting, go to the &lt;a href=&#34;https://github.com/JetBrains/intellij-plugin-verifier&#34;&gt;IntelliJ Plugin Verifier&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Attributes&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Default Value&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;ideVersions&lt;/kbd&gt; - IDEs to check, in &lt;code&gt;intellij.version&lt;/code&gt; format, i.e.: &lt;code&gt;[&#34;IC-2019.3.5&#34;, &#34;PS-2019.3.2&#34;]&lt;/code&gt;. Check the available build versions on &lt;a href=&#34;https://jb.gg/intellij-platform-builds-list&#34;&gt;https://jb.gg/intellij-platform-builds-list&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;verifierVersion&lt;/kbd&gt; - IntelliJ Plugin Verifier version, by default uses the latest available. It&#39;s recommended to use always the latest version.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;latest&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;verifierPath&lt;/kbd&gt; - IntelliJ Plugin Verifier local path to the pre-downloaded jar file. If set, &lt;code&gt;verifierVersion&lt;/code&gt; is ignored.&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;localPaths&lt;/kbd&gt; - A list of the paths to locally installed IDE distributions that should be used for verification in addition to those specified in &lt;code&gt;ideVersions&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;[]&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;distributionFile&lt;/kbd&gt; - Jar or Zip file of plugin to verify.&lt;/td&gt; &#xA;   &lt;td&gt;output of &lt;code&gt;buildPlugin&lt;/code&gt; task&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;failureLevel&lt;/kbd&gt; - Defines the verification level at which task should fail. Can be set as &lt;code&gt;FailureLevel&lt;/code&gt; enum or &lt;code&gt;EnumSet&amp;lt;FailureLevel&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;FailureLevel.INVALID_PLUGIN&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;verificationReportsDir&lt;/kbd&gt; - The path to directory where verification reports will be saved.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;${project.buildDir}/reports/pluginVerifier&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;downloadDir&lt;/kbd&gt; - The path to directory where IDEs used for the verification will be downloaded.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;System.getProperty(&#34;plugin.verifier.home.dir&#34;)/ides&lt;/code&gt; or &lt;code&gt;System.getProperty(&#34;user.home&#34;)/.pluginVerifier/ides&lt;/code&gt; or system temporary directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;jbrVersion&lt;/kbd&gt; - JBR version used by the Verifier.&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;jbrVariant&lt;/kbd&gt; - JetBrains Java runtime variant to use when running the IDE with the plugin. For JBR 17, &lt;code&gt;dcevm&lt;/code&gt; is bundled by default. As a consequence, separated &lt;code&gt;dcevm&lt;/code&gt; and &lt;code&gt;nomod&lt;/code&gt; variants are no longer available.&lt;/td&gt; &#xA;   &lt;td&gt;Optional. Example values: &lt;code&gt;jcef&lt;/code&gt;, &lt;code&gt;sdk&lt;/code&gt;, &lt;code&gt;dcevm&lt;/code&gt;, &lt;code&gt;fd&lt;/code&gt;, &lt;code&gt;nomod&lt;/code&gt;. See &lt;a href=&#34;https://github.com/JetBrains/JetBrainsRuntime/releases&#34;&gt;JetBrains Runtime Releases&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;runtimeDir&lt;/kbd&gt; - The path to directory containing Java runtime, overrides JBR.&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;externalPrefixes&lt;/kbd&gt; - The prefixes of classes from the external libraries.&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;teamCityOutputFormat&lt;/kbd&gt; - Specify this flag if you want to print the TeamCity compatible output on stdout.&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;subsystemsToCheck&lt;/kbd&gt; - Specifies which subsystems of IDE should be checked. Available options: &lt;code&gt;all&lt;/code&gt; (default), &lt;code&gt;android-only&lt;/code&gt;, &lt;code&gt;without-android&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; To run Plugin Verifier in &lt;a href=&#34;https://github.com/JetBrains/intellij-plugin-verifier/pull/58&#34;&gt;&lt;code&gt;-offline mode&lt;/code&gt;&lt;/a&gt;, set the Gradle &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/StartParameter.html#setOffline-boolean-&#34;&gt;&lt;code&gt;offline&lt;/code&gt; start parameter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Plugin Signing&lt;/h3&gt; &#xA;&lt;p&gt;To sign the plugin before publishing to the JetBrains Marketplace with the &lt;code&gt;signPlugin&lt;/code&gt; task, it is required to provide a certificate chain and a private key with its password using &lt;code&gt;signPlugin { ... }&lt;/code&gt; Plugin Signing DSL.&lt;/p&gt; &#xA;&lt;p&gt;As soon as &lt;code&gt;privateKey&lt;/code&gt; (or &lt;code&gt;privateKeyFile&lt;/code&gt;) and &lt;code&gt;certificateChain&lt;/code&gt; (or &lt;code&gt;certificateChainFile&lt;/code&gt;) properties are specified, task will be executed automatically right before the &lt;code&gt;publishPlugin&lt;/code&gt; task.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Attributes&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Default Value&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;certificateChain&lt;/kbd&gt; A string containing X509 certificates.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;certificateChainFile&lt;/kbd&gt; Path to the file containing X509 certificates.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;privateKey&lt;/kbd&gt; Encoded private key in PEM format.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;privateKeyFile&lt;/kbd&gt; Path to the file with encoded private key in PEM format.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;password&lt;/kbd&gt; Password required to decrypt private key.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;cliVersion&lt;/kbd&gt; Version of the Marketplace ZIP Signer CLI to use.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;LATEST&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;cliPath&lt;/kbd&gt; Path to the Marketplace ZIP Signer CLI file. Takes a precedence over the &lt;code&gt;cliPath&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;keyStore&lt;/kbd&gt; KeyStore file path.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;keyStorePassword&lt;/kbd&gt; KeyStore password.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;keyStoreKeyAlias&lt;/kbd&gt; KeyStore key alias.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;keyStoreType&lt;/kbd&gt; KeyStore type.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;keyStoreProviderName&lt;/kbd&gt; JCA KeyStore Provider name.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;List Products Releases&lt;/h3&gt; &#xA;&lt;p&gt;Plugin Verifier requires a list of the IDEs that will be used for verifying your plugin build against. The availability of the releases may change in time, i.e., due to security issues in one version – which will be later removed and replaced with an updated IDE release.&lt;/p&gt; &#xA;&lt;p&gt;With the &lt;code&gt;listProductsReleases&lt;/code&gt; task, it is possible to list the currently available IDEs matching given conditions, like platform types, since/until release versions. Such a list is fetched from the remote updates file: &lt;code&gt;https://www.jetbrains.com/updates/updates.xml&lt;/code&gt;, parsed and filtered considering the specified &lt;code&gt;types&lt;/code&gt;, &lt;code&gt;sinceVersion&lt;/code&gt;, &lt;code&gt;untilVersion&lt;/code&gt; properties.&lt;/p&gt; &#xA;&lt;p&gt;The result list is stored within the &lt;code&gt;outputFile&lt;/code&gt;, which is used as a source for the Plugin Verifier if the &lt;code&gt;runPluginVerifier&lt;/code&gt; task has no &lt;code&gt;ideVersions&lt;/code&gt; property specified, the output of the &lt;code&gt;listProductsReleases&lt;/code&gt; is used.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Attributes&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Default Value&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;updatesFile&lt;/kbd&gt; Path to the products releases update file. By default, falls back to the Maven cache.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Maven cache&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;types&lt;/kbd&gt; List of types of IDEs that will be listed in results. Uses &lt;code&gt;intellij.type&lt;/code&gt; by default.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[intellij.type]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;sinceVersion&lt;/kbd&gt; Lower boundary of the listed results. Uses &lt;code&gt;intellij.version&lt;/code&gt; by default.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;intellij.version&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;untilVersion&lt;/kbd&gt; Upper boundary of the listed results.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;releaseChannels&lt;/kbd&gt; Defines channels that product updates will be filtered with.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;EnumSet.allOf(ListProductsReleasesTask.Channel)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;outputFile&lt;/kbd&gt; Path to the file, where the output list will be stored.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;File(&#34;${project.buildDir}/listProductsReleases.txt&lt;/code&gt;&#34;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Publishing DSL&lt;/h3&gt; &#xA;&lt;p&gt;The following attributes are a part of the Publishing DSL &lt;kbd&gt;publishPlugin { ... }&lt;/kbd&gt; in which allows Gradle to upload a working plugin to the JetBrains Plugin Repository. Note that you need to upload the plugin to the repository at least once manually (to specify options like the license, repository URL etc.) before uploads through Gradle can be used.&lt;/p&gt; &#xA;&lt;p&gt;See the instruction on how to generate authentication token: &lt;a href=&#34;https://plugins.jetbrains.com/docs/marketplace/plugin-upload.html&#34;&gt;https://plugins.jetbrains.com/docs/marketplace/plugin-upload.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/deployment.html&#34;&gt;Publishing Plugins with Gradle&lt;/a&gt; tutorial for step-by-step instructions.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Attributes&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Default Value&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;token&lt;/kbd&gt; Authentication token.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;channels&lt;/kbd&gt; List of channel names to upload plugin to.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;[default]&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;host&lt;/kbd&gt; URL host of a plugin repository.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;&lt;a href=&#34;https://plugins.jetbrains.com&#34;&gt;https://plugins.jetbrains.com&lt;/a&gt;&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;distributionFile&lt;/kbd&gt; Jar or Zip file of plugin to upload.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;output of &lt;code&gt;buildPlugin&lt;/code&gt; task&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;toolboxEnterprise&lt;/kbd&gt; Specifies if the Toolbox Enterprise plugin repository service should be used.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;false&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Instrumenting DSL&lt;/h3&gt; &#xA;&lt;p&gt;The following attributes help you to tune instrumenting behaviour in &lt;kbd&gt;instrumentCode { ... }&lt;/kbd&gt; block.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Attributes&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Default Value&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;compilerVersion&lt;/kbd&gt; is a version of instrumenting compiler. It&#39;s used for non-IDEA plugins (e.g. CLion or Rider).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Build number of the IDE dependency&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Build Features&lt;/h2&gt; &#xA;&lt;p&gt;With the Gradle IntelliJ Plugin releases, new features are introduced that require additional research, collecting more feedback from developers, or should be enabled or disabled under particular conditions. Build Features are an implementation of the feature flags concept and let you control some behaviors of the Gradle IntelliJ Plugin. To enable or disable a particular feature, add the Project property to the &lt;code&gt;gradle.properties&lt;/code&gt; file, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;org.jetbrains.intellij.buildFeature.buildFeatureName=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Build Feature Name&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Default Value&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;selfUpdateCheck&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check if the currently used Gradle IntelliJ Plugin is outdated.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;Marketplace platform provides the &lt;a href=&#34;https://jb.gg/ipe&#34;&gt;IntelliJ Platform Explorer&lt;/a&gt; – a search tool for browsing Extension Points inside existing implementations of open-source IntelliJ Platform plugins.&lt;/p&gt; &#xA;&lt;p&gt;One of its features is the possibility of filtering the plugins by those that utilize &lt;a href=&#34;https://jb.gg/ipe?buildSystem=gradle&#34;&gt;Gradle&lt;/a&gt; or &lt;a href=&#34;https://jb.gg/ipe?buildSystem=gradle_kts&#34;&gt;Gradle KTS&lt;/a&gt; build scripts.&lt;/p&gt; &#xA;&lt;p&gt;As examples of using this plugin, you can also check out following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-lang-plugin-org/go-lang-idea-plugin&#34;&gt;Go plugin&lt;/a&gt; and its &lt;a href=&#34;https://teamcity.jetbrains.com/project.html?projectId=IntellijIdeaPlugins_Go&amp;amp;tab=projectOverview&#34;&gt;TeamCity build configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ignatov/intellij-erlang&#34;&gt;Erlang plugin&lt;/a&gt; and its &lt;a href=&#34;https://teamcity.jetbrains.com/project.html?projectId=IntellijIdeaPlugins_Erlang&amp;amp;tab=projectOverview&#34;&gt;TeamCity build configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intellij-rust/intellij-rust&#34;&gt;Rust plugin&lt;/a&gt; and its &lt;a href=&#34;https://teamcity.jetbrains.com/project.html?projectId=IntellijIdeaPlugins_Rust&amp;amp;tab=projectOverview&#34;&gt;TeamCity build configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shalupov/idea-cloudformation&#34;&gt;AWS CloudFormation plugin&lt;/a&gt; and its &lt;a href=&#34;https://teamcity.jetbrains.com/project.html?projectId=IdeaAwsCloudFormation&amp;amp;tab=projectOverview&#34;&gt;TeamCity build configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jansorg/BashSupport&#34;&gt;Bash plugin&lt;/a&gt; and its &lt;a href=&#34;https://teamcity.jetbrains.com/project.html?projectId=IntellijIdeaPlugins_BashSupport&amp;amp;tab=projectOverview&#34;&gt;TeamCity build configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hurricup/Perl5-IDEA&#34;&gt;Perl5 plugin&lt;/a&gt; and its &lt;a href=&#34;https://github.com/hurricup/Perl5-IDEA/raw/master/.travis.yml&#34;&gt;Travis configuration file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/bamboo-soy&#34;&gt;Bamboo Soy plugin&lt;/a&gt; and its &lt;a href=&#34;https://github.com/google/bamboo-soy/raw/master/.travis.yml&#34;&gt;Travis configuration file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/winterDroid/android-drawable-importer-intellij-plugin&#34;&gt;Android Drawable Importer plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/konifar/android-material-design-icon-generator-plugin&#34;&gt;Android Material Design Icon Generator plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/johnlindquist/AceJump&#34;&gt;AceJump plugin&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uses the Gradle Kotlin DSL&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Turbo87/intellij-emberjs&#34;&gt;EmberJS plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VladRassokhin/intellij-hcl&#34;&gt;HCL plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AmailP/robot-plugin&#34;&gt;Robot plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stuartcarnie/toml-plugin&#34;&gt;TOML plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/sqldelight/tree/master/sqldelight-idea-plugin&#34;&gt;SQLDelight Android Studio Plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/breandan/idear&#34;&gt;idear plugin&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uses the Gradle Kotlin DSL&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pedrovgs/AndroidWiFiADB&#34;&gt;Android WiFi ADB plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SonarSource/sonar-intellij&#34;&gt;SonarLint plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/ideavim&#34;&gt;IdeaVim plugin&lt;/a&gt; and its &lt;a href=&#34;https://teamcity.jetbrains.com/project.html?projectId=IdeaVim&amp;amp;guest=1&#34;&gt;TeamCity build configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pbreault/adb-idea&#34;&gt;Adb Idea&lt;/a&gt; is configured to build and run against stable, beta or preview (canary) releases of Android Studio&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uwolfer/gerrit-intellij-plugin&#34;&gt;Gerrit&lt;/a&gt; uses Travis CI inclusive automated publishing of releases to GitHub and JetBrains plugin repository (triggered by version tag creation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hsz/idea-gitignore&#34;&gt;.ignore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minecraft-dev/MinecraftDev&#34;&gt;Minecraft Development&lt;/a&gt; and its &lt;a href=&#34;https://ci.demonwav.com/viewType.html?buildTypeId=MinecraftDevIntelliJ_Build&#34;&gt;TeamCity build configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uses the Gradle Kotlin DSL&lt;/li&gt; &#xA;   &lt;li&gt;Mixes Java, Kotlin, and Groovy code&lt;/li&gt; &#xA;   &lt;li&gt;Uses Grammar Kit&lt;/li&gt; &#xA;   &lt;li&gt;Uses a Kotlin version not bundled with IntelliJ IDEA&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elpassion/mainframer-intellij-plugin&#34;&gt;Mainframer Integration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uses the Gradle Kotlin DSL&lt;/li&gt; &#xA;   &lt;li&gt;Fully written in Kotlin&lt;/li&gt; &#xA;   &lt;li&gt;Uses RxJava&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/resharper-unity&#34;&gt;Unity 3D plugin&lt;/a&gt; for JetBrains Rider&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aemtools/aemtools&#34;&gt;AEM Tools plugin&lt;/a&gt; for Adobe Experience Manager integration &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uses the Gradle Kotlin DSL&lt;/li&gt; &#xA;   &lt;li&gt;Fully written in Kotlin&lt;/li&gt; &#xA;   &lt;li&gt;Uses template language&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/fsharp-support/tree/master/rider-fsharp&#34;&gt;F# plugin&lt;/a&gt; for JetBrains Rider &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uses the Gradle Kotlin DSL&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/izhangzhihao/intellij-rainbow-brackets&#34;&gt;Intellij Rainbow Brackets&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fully written in Kotlin&lt;/li&gt; &#xA;   &lt;li&gt;Uses other IntelliJ IDEA plugins as test dependencies&lt;/li&gt; &#xA;   &lt;li&gt;Circle CI configuration file &amp;amp; Travis CI configuration file&lt;/li&gt; &#xA;   &lt;li&gt;Gradle task to verify plugin compatibility cross IntelliJ Platform versions&lt;/li&gt; &#xA;   &lt;li&gt;Auto submit anonymous feedback as GitHub issues&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/meanmail-dev/requirements&#34;&gt;Requirements&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uses the Gradle Kotlin DSL&lt;/li&gt; &#xA;   &lt;li&gt;Fully written in Kotlin&lt;/li&gt; &#xA;   &lt;li&gt;Uses other IntelliJ IDEA plugins as test dependencies&lt;/li&gt; &#xA;   &lt;li&gt;Uses Grammar Kit&lt;/li&gt; &#xA;   &lt;li&gt;Uses a Kotlin version not bundled with IntelliJ IDEA&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributing tips:&lt;/p&gt; &#xA;&lt;p&gt;You can debug the source code of gradle-intellij-plugin (e.g. put breakpoints there) if you add a reference to your local copy into &lt;code&gt;settings.gradle&lt;/code&gt; of your IntelliJ plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;includeBuild &#39;/path/to/gradle-intellij-plugin&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2022 org.jetbrains.intellij.plugins&#xA;&#xA;    Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;    you may not use this file except in compliance with the License.&#xA;    You may obtain a copy of the License at&#xA;&#xA;      http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;    Unless required by applicable law or agreed to in writing, software&#xA;    distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;    See the License for the specific language governing permissions and&#xA;    limitations under the License.&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;--&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;This README.md file was hand-crafted with care utilising synapticloop&lt;/code&gt;&lt;a href=&#34;https://github.com/synapticloop/templar/&#34;&gt;&lt;code&gt;templar&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;a href=&#34;https://github.com/synapticloop/documentr/&#34;&gt;&lt;code&gt;documentr&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;--&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kotlin/kotlinx.serialization</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/Kotlin/kotlinx.serialization</id>
    <link href="https://github.com/Kotlin/kotlinx.serialization" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kotlin multiplatform / multi-format serialization&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kotlin multiplatform / multi-format reflectionless serialization&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/docs/components-stability.html&#34;&gt;&lt;img src=&#34;https://kotl.in/badges/stable.svg?sanitize=true&#34; alt=&#34;Kotlin Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;JetBrains official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://teamcity.jetbrains.com/viewType.html?buildTypeId=KotlinTools_KotlinxSerialization_Ko&amp;amp;guest=1&#34;&gt;&lt;img src=&#34;https://img.shields.io/teamcity/http/teamcity.jetbrains.com/s/KotlinTools_KotlinxSerialization_Ko.svg?sanitize=true&#34; alt=&#34;TeamCity build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://kotlinlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kotlin-1.6.21-blue.svg?logo=kotlin&#34; alt=&#34;Kotlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/artifact/org.jetbrains.kotlinx/kotlinx-serialization-core/1.3.3/pom&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.jetbrains.kotlinx/kotlinx-serialization-core/1.3.3&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlin.github.io/kotlinx.serialization/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/API_reference-KDoc-blue&#34; alt=&#34;KDoc link&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.slack.com/messages/serialization/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-slack-blue.svg?logo=slack&#34; alt=&#34;Slack channel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Kotlin serialization consists of a compiler plugin, that generates visitor code for serializable classes, runtime library with core serialization API and support libraries with various serialization formats.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports Kotlin classes marked as &lt;code&gt;@Serializable&lt;/code&gt; and standard collections.&lt;/li&gt; &#xA; &lt;li&gt;Provides &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/formats/README.md#JSON&#34;&gt;JSON&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/formats/README.md#ProtoBuf&#34;&gt;Protobuf&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/formats/README.md#CBOR&#34;&gt;CBOR&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/formats/README.md#HOCON&#34;&gt;Hocon&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/formats/README.md#properties&#34;&gt;Properties&lt;/a&gt; formats.&lt;/li&gt; &#xA; &lt;li&gt;Complete multiplatform support: JVM, JS and Native.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/#introduction-and-references&#34;&gt;Introduction and references&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/#gradle&#34;&gt;Gradle&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/#using-the-plugins-block&#34;&gt;Using the &lt;code&gt;plugins&lt;/code&gt; block&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/#using-apply-plugin-the-old-way&#34;&gt;Using &lt;code&gt;apply plugin&lt;/code&gt; (the old way)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/#dependency-on-the-json-library&#34;&gt;Dependency on the JSON library&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/#android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/#multiplatform-common-js-native&#34;&gt;Multiplatform (Common, JS, Native)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/#maven&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Additional links&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/docs/serialization-guide.md&#34;&gt;Kotlin Serialization Guide&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.serialization/&#34;&gt;Full API reference&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction and references&lt;/h2&gt; &#xA;&lt;p&gt;Here is a small example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import kotlinx.serialization.*&#xA;import kotlinx.serialization.json.*&#xA;&#xA;@Serializable &#xA;data class Project(val name: String, val language: String)&#xA;&#xA;fun main() {&#xA;    // Serializing objects&#xA;    val data = Project(&#34;kotlinx.serialization&#34;, &#34;Kotlin&#34;)&#xA;    val string = Json.encodeToString(data)  &#xA;    println(string) // {&#34;name&#34;:&#34;kotlinx.serialization&#34;,&#34;language&#34;:&#34;Kotlin&#34;} &#xA;    // Deserializing back into objects&#xA;    val obj = Json.decodeFromString&amp;lt;Project&amp;gt;(string)&#xA;    println(obj) // Project(name=kotlinx.serialization, language=Kotlin)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can get the full code &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/guide/example/example-readme-01.kt&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- TEST_NAME ReadmeTest --&gt; &#xA;&lt;!-- TEST &#xA;{&#34;name&#34;:&#34;kotlinx.serialization&#34;,&#34;language&#34;:&#34;Kotlin&#34;}&#xA;Project(name=kotlinx.serialization, language=Kotlin)&#xA;--&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.serialization/master/docs/serialization-guide.md&#34;&gt;Kotlin Serialization Guide&lt;/a&gt; for all details.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find auto-generated documentation website on &lt;a href=&#34;https://kotlin.github.io/kotlinx.serialization/&#34;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Kotlin serialization plugin is shipped with the Kotlin compiler distribution, and the IDEA plugin is bundled into the Kotlin plugin.&lt;/p&gt; &#xA;&lt;p&gt;Using Kotlin Serialization requires Kotlin compiler &lt;code&gt;1.4.0&lt;/code&gt; or higher. Make sure you have the corresponding Kotlin plugin installed in the IDE, no additional plugins for IDE are required.&lt;/p&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;h4&gt;Using the &lt;code&gt;plugins&lt;/code&gt; block&lt;/h4&gt; &#xA;&lt;p&gt;You can set up the serialization plugin with the Kotlin plugin using &lt;a href=&#34;https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block&#34;&gt;Gradle plugins DSL&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Kotlin DSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;    kotlin(&#34;jvm&#34;) version &#34;1.6.21&#34; // or kotlin(&#34;multiplatform&#34;) or any other kotlin plugin&#xA;    kotlin(&#34;plugin.serialization&#34;) version &#34;1.6.21&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Groovy DSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;plugins {&#xA;    id &#39;org.jetbrains.kotlin.multiplatform&#39; version &#39;1.6.21&#39;&#xA;    id &#39;org.jetbrains.kotlin.plugin.serialization&#39; version &#39;1.6.21&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Kotlin versions before 1.4.0 are not supported by the stable release of Kotlin serialization&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;apply plugin&lt;/code&gt; (the old way)&lt;/h4&gt; &#xA;&lt;p&gt;First, you have to add the serialization plugin to your classpath as the other &lt;a href=&#34;https://kotlinlang.org/docs/reference/compiler-plugins.html&#34;&gt;compiler plugins&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Kotlin DSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;buildscript {&#xA;    repositories { mavenCentral() }&#xA;&#xA;    dependencies {&#xA;        val kotlinVersion = &#34;1.6.21&#34;&#xA;        classpath(kotlin(&#34;gradle-plugin&#34;, version = kotlinVersion))&#xA;        classpath(kotlin(&#34;serialization&#34;, version = kotlinVersion))&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Groovy DSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;buildscript {&#xA;    ext.kotlin_version = &#39;1.6.21&#39;&#xA;    repositories { mavenCentral() }&#xA;&#xA;    dependencies {&#xA;        classpath &#34;org.jetbrains.kotlin:kotlin-serialization:$kotlin_version&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can &lt;code&gt;apply plugin&lt;/code&gt; (example in Groovy):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;apply plugin: &#39;kotlin&#39; // or &#39;kotlin-multiplatform&#39; for multiplatform projects&#xA;apply plugin: &#39;kotlinx-serialization&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dependency on the JSON library&lt;/h4&gt; &#xA;&lt;p&gt;After setting up the plugin one way or another, you have to add a dependency on the serialization library. Note that while the plugin has version the same as the compiler one, runtime library has different coordinates, repository and versioning.&lt;/p&gt; &#xA;&lt;p&gt;Kotlin DSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;    implementation(&#34;org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.3&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Groovy DSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;    implementation &#34;org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.3&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We also provide &lt;code&gt;kotlinx-serialization-core&lt;/code&gt; artifact that contains all serialization API but does not have bundled serialization format with it&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;The library works on Android, but, if you&#39;re using ProGuard, you need to add rules to your &lt;code&gt;proguard-rules.pro&lt;/code&gt; configuration to cover all classes that are serialized at runtime.&lt;/p&gt; &#xA;&lt;p&gt;The following configuration keeps serializers for &lt;em&gt;all&lt;/em&gt; serializable classes that are retained after shrinking. Uncomment and modify the last section in case you&#39;re serializing classes with named companion objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-proguard&#34;&gt;# Keep `Companion` object fields of serializable classes.&#xA;# This avoids serializer lookup through `getDeclaredClasses` as done for named companion objects.&#xA;-if @kotlinx.serialization.Serializable class **&#xA;-keepclassmembers class &amp;lt;1&amp;gt; {&#xA;    static &amp;lt;1&amp;gt;$Companion Companion;&#xA;}&#xA;&#xA;# Keep `serializer()` on companion objects (both default and named) of serializable classes.&#xA;-if @kotlinx.serialization.Serializable class ** {&#xA;    static **$* *;&#xA;}&#xA;-keepclassmembers class &amp;lt;2&amp;gt;$&amp;lt;3&amp;gt; {&#xA;    kotlinx.serialization.KSerializer serializer(...);&#xA;}&#xA;&#xA;# Keep `INSTANCE.serializer()` of serializable objects.&#xA;-if @kotlinx.serialization.Serializable class ** {&#xA;    public static ** INSTANCE;&#xA;}&#xA;-keepclassmembers class &amp;lt;1&amp;gt; {&#xA;    public static &amp;lt;1&amp;gt; INSTANCE;&#xA;    kotlinx.serialization.KSerializer serializer(...);&#xA;}&#xA;&#xA;# @Serializable and @Polymorphic are used at runtime for polymorphic serialization.&#xA;-keepattributes RuntimeVisibleAnnotations,AnnotationDefault&#xA;&#xA;# Serializer for classes with named companion objects are retrieved using `getDeclaredClasses`.&#xA;# If you have any, uncomment and replace classes with those containing named companion objects.&#xA;#-keepattributes InnerClasses # Needed for `getDeclaredClasses`.&#xA;#-if @kotlinx.serialization.Serializable class&#xA;#com.example.myapplication.HasNamedCompanion, # &amp;lt;-- List serializable classes with named companions.&#xA;#com.example.myapplication.HasNamedCompanion2&#xA;#{&#xA;#    static **$* *;&#xA;#}&#xA;#-keepnames class &amp;lt;1&amp;gt;$$serializer { # -keepnames suffices; class is kept when serializer() is kept.&#xA;#    static &amp;lt;1&amp;gt;$$serializer INSTANCE;&#xA;#}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you want to exclude serializable classes that are used, but never serialized at runtime, you will need to write custom rules with narrower &lt;a href=&#34;https://www.guardsquare.com/manual/configuration/usage&#34;&gt;class specifications&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of custom rules&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-proguard&#34;&gt;-keepattributes RuntimeVisibleAnnotations,AnnotationDefault&#xA;&#xA;# kotlinx-serialization-json specific. Add this if you have java.lang.NoClassDefFoundError kotlinx.serialization.json.JsonObjectSerializer&#xA;-keepclassmembers class kotlinx.serialization.json.** {&#xA;    *** Companion;&#xA;}&#xA;-keepclasseswithmembers class kotlinx.serialization.json.** {&#xA;    kotlinx.serialization.KSerializer serializer(...);&#xA;}&#xA;&#xA;# Application rules&#xA;&#xA;# Change here com.yourcompany.yourpackage&#xA;-keepclassmembers @kotlinx.serialization.Serializable class com.yourcompany.yourpackage.** {&#xA;    # lookup for plugin generated serializable classes&#xA;    *** Companion;&#xA;    # lookup for serializable objects&#xA;    *** INSTANCE;&#xA;    kotlinx.serialization.KSerializer serializer(...);&#xA;}&#xA;# lookup for plugin generated serializable classes&#xA;-if @kotlinx.serialization.Serializable class com.yourcompany.yourpackage.**&#xA;-keepclassmembers class com.yourcompany.yourpackage.&amp;lt;1&amp;gt;$Companion {&#xA;    kotlinx.serialization.KSerializer serializer(...);&#xA;}&#xA;&#xA;# Serialization supports named companions but for such classes it is necessary to add an additional rule.&#xA;# This rule keeps serializer and serializable class from obfuscation. Therefore, it is recommended not to use wildcards in it, but to write rules for each such class.&#xA;-keepattributes InnerClasses # Needed for `getDeclaredClasses`.&#xA;-keep class com.yourcompany.yourpackage.SerializableClassWithNamedCompanion$$serializer {&#xA;    *** INSTANCE;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Multiplatform (Common, JS, Native)&lt;/h3&gt; &#xA;&lt;p&gt;Most of the modules are also available for Kotlin/JS and Kotlin/Native. You can add dependency to the required module right to the common source set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;commonMain {&#xA;    dependencies {&#xA;        // Works as common dependency as well as the platform one&#xA;        implementation &#34;org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same artifact coordinates can be used to depend on platform-specific artifact in platform-specific source-set.&lt;/p&gt; &#xA;&lt;h3&gt;Maven&lt;/h3&gt; &#xA;&lt;p&gt;Ensure the proper version of Kotlin and serialization version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;properties&amp;gt;&#xA;    &amp;lt;kotlin.version&amp;gt;1.6.21&amp;lt;/kotlin.version&amp;gt;&#xA;    &amp;lt;serialization.version&amp;gt;1.3.3&amp;lt;/serialization.version&amp;gt;&#xA;&amp;lt;/properties&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add serialization plugin to Kotlin compiler plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;build&amp;gt;&#xA;    &amp;lt;plugins&amp;gt;&#xA;        &amp;lt;plugin&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;org.jetbrains.kotlin&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;kotlin-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;${kotlin.version}&amp;lt;/version&amp;gt;&#xA;            &amp;lt;executions&amp;gt;&#xA;                &amp;lt;execution&amp;gt;&#xA;                    &amp;lt;id&amp;gt;compile&amp;lt;/id&amp;gt;&#xA;                    &amp;lt;phase&amp;gt;compile&amp;lt;/phase&amp;gt;&#xA;                    &amp;lt;goals&amp;gt;&#xA;                        &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;&#xA;                    &amp;lt;/goals&amp;gt;&#xA;                &amp;lt;/execution&amp;gt;&#xA;            &amp;lt;/executions&amp;gt;&#xA;            &amp;lt;configuration&amp;gt;&#xA;                &amp;lt;compilerPlugins&amp;gt;&#xA;                    &amp;lt;plugin&amp;gt;kotlinx-serialization&amp;lt;/plugin&amp;gt;&#xA;                &amp;lt;/compilerPlugins&amp;gt;&#xA;            &amp;lt;/configuration&amp;gt;&#xA;            &amp;lt;dependencies&amp;gt;&#xA;                &amp;lt;dependency&amp;gt;&#xA;                    &amp;lt;groupId&amp;gt;org.jetbrains.kotlin&amp;lt;/groupId&amp;gt;&#xA;                    &amp;lt;artifactId&amp;gt;kotlin-maven-serialization&amp;lt;/artifactId&amp;gt;&#xA;                    &amp;lt;version&amp;gt;${kotlin.version}&amp;lt;/version&amp;gt;&#xA;                &amp;lt;/dependency&amp;gt;&#xA;            &amp;lt;/dependencies&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;    &amp;lt;/plugins&amp;gt;&#xA;&amp;lt;/build&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add dependency on serialization runtime library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.jetbrains.kotlinx&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;kotlinx-serialization-json&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;${serialization.version}&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/compose-jb</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/JetBrains/compose-jb</id>
    <link href="https://github.com/JetBrains/compose-jb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compose Multiplatform, a modern UI framework for Kotlin that makes building performant and beautiful user interfaces easy and enjoyable.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JetBrains/compose-jb/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/JetBrains/compose-jb?color=brightgreen&amp;amp;label=latest%20release&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JetBrains/compose-jb/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/JetBrains/compose-jb?color=orange&amp;amp;include_prereleases&amp;amp;label=latest%20build&#34; alt=&#34;Latest build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Compose Multiplatform, by JetBrains&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/artwork/readme/apps.png&#34; alt=&#34;&#34;&gt; Compose Kotlin UI framework port for desktop platforms (macOS, Linux, Windows) and Web, components outside of the core Compose repository at &lt;a href=&#34;https://android.googlesource.com/platform/frameworks/support&#34;&gt;https://android.googlesource.com/platform/frameworks/support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Preview functionality (check your application UI without building/running it) for desktop platforms is available via IDEA plugin (&lt;a href=&#34;https://plugins.jetbrains.com/plugin/16541-compose-multiplatform-ide-support&#34;&gt;https://plugins.jetbrains.com/plugin/16541-compose-multiplatform-ide-support&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Repository organization&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/artwork&#34;&gt;artwork&lt;/a&gt; - design artifacts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/benchmarks&#34;&gt;benchmarks&lt;/a&gt; - collection of benchmarks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/compose&#34;&gt;compose&lt;/a&gt; - composite build of &lt;a href=&#34;https://github.com/JetBrains/androidx&#34;&gt;Compose-jb sources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/ci&#34;&gt;ci&lt;/a&gt; - Continuous Integration helpers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples&#34;&gt;examples&lt;/a&gt; - examples of multiplatform Compose applications for Desktop, Android and Web &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/codeviewer&#34;&gt;codeviewer&lt;/a&gt; - File Browser and Code Viewer application for Android and Desktop&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/imageviewer&#34;&gt;imageviewer&lt;/a&gt; - Image Viewer application for Android and Desktop&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/issues&#34;&gt;issues&lt;/a&gt; - GitHub issue tracker with an adaptive UI and ktor-client&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/falling-balls&#34;&gt;game&lt;/a&gt; - Simple game&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/experimental/examples/falling-balls-mpp&#34;&gt;game&lt;/a&gt; - Simple game for web target&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/web-compose-bird&#34;&gt;compose-bird&lt;/a&gt; - A flappy bird clone using Compose for Web&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/notepad&#34;&gt;notepad&lt;/a&gt; - Notepad, using the new experimental Composable Window API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/todoapp&#34;&gt;todoapp&lt;/a&gt; - TODO items tracker with persistence and multiple screens&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/todoapp-lite&#34;&gt;todoapp-lite&lt;/a&gt; - A simplified version of &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/todoapp&#34;&gt;todoapp&lt;/a&gt;, fully based on Compose&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/widgets-gallery&#34;&gt;widgets gallery&lt;/a&gt; - Gallery of standard widgets&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/intellij-plugin&#34;&gt;IDEA plugin&lt;/a&gt; - Plugin for IDEA using Compose for Desktop&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/gradle-plugins&#34;&gt;gradle-plugins&lt;/a&gt; - a plugin, simplifying usage of Compose Multiplatform with Gradle&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/templates&#34;&gt;templates&lt;/a&gt; - new application templates&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials&#34;&gt;tutorials&lt;/a&gt; - tutorials on using Compose Multiplatform &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Getting_Started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Image_And_Icons_Manipulations&#34;&gt;Image and icon manipulations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Mouse_Events&#34;&gt;Mouse events and hover&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Desktop_Components#scrollbars&#34;&gt;Scrolling and scrollbars&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Desktop_Components#tooltips&#34;&gt;Tooltips&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Window_API_new&#34;&gt;Top level windows management&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Tray_Notifications_MenuBar_new&#34;&gt;Menu, tray, notifications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Keyboard&#34;&gt;Keyboard support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Tab_Navigation&#34;&gt;Tab focus navigation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Native_distributions_and_local_execution&#34;&gt;Building native distribution&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Signing_and_notarization_on_macOS&#34;&gt;Signing and notarization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Swing_Integration&#34;&gt;Swing interoperability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Development_for_Android&#34;&gt;Development for Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Navigation&#34;&gt;Navigation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-jb/tree/master/tutorials/Accessibility&#34;&gt;Accessebility&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web&#34;&gt;tutorials: compose for web&lt;/a&gt; - tutorials on using Compose for Web &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web/Getting_Started&#34;&gt;Getting started with Compose for Web&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web/Building_UI&#34;&gt;Building web UI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web/Events_Handling&#34;&gt;Handling Events&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web/Controlled_Uncontrolled_Inputs&#34;&gt;Controlled and Uncontrolled inputs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web/Style_Dsl&#34;&gt;Style DSL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web/Using_Test_Utils&#34;&gt;Using test-utils&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/components&#34;&gt;components&lt;/a&gt; - custom components of Compose Multiplatform &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/components/SplitPane&#34;&gt;Split Pane&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/experimental&#34;&gt;experimental&lt;/a&gt; - experimental components and examples &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/experimental/cef&#34;&gt;cef&lt;/a&gt; - CEF integration in Jetpack Compose (somewhat outdated)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/experimental/components/VideoPlayer&#34;&gt;Video Player&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/experimental/lwjgl-integration&#34;&gt;LWJGL integration&lt;/a&gt; - An example showing how to integrate Compose with &lt;a href=&#34;https://www.lwjgl.org&#34;&gt;LWJGL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/experimental/build_from_cli&#34;&gt;CLI example&lt;/a&gt; - An example showing how to build Compose without Gradle&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting latest version of Compose Multiplatform&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/JetBrains/compose-jb/tags&#34;&gt;https://github.com/JetBrains/compose-jb/tags&lt;/a&gt; for the latest build number.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GetStream/stream-chat-android</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/GetStream/stream-chat-android</id>
    <link href="https://github.com/GetStream/stream-chat-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💬 Android Chat SDK ➜ Stream Chat API. UI component libraries for chat apps. Kotlin &amp; Jetpack Compose messaging SDK for Android chat&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Official Android SDK for &lt;a href=&#34;https://getstream.io/chat/sdk/android/&#34;&gt;Stream Chat&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://getstream.io/tutorials/android-chat/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/docs/sdk-hero-android.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/GetStream/stream-chat-android/actions&#34;&gt;&lt;img src=&#34;https://github.com/GetStream/stream-chat-android/workflows/Build%20and%20test/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GetStream/stream-chat-android/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/GetStream/stream-chat-android&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This is the official Android SDK for &lt;a href=&#34;https://getstream.io/chat/sdk/android/&#34;&gt;Stream Chat&lt;/a&gt;, a service for building chat and messaging applications. This library includes both a low-level chat SDK and a set of reusable UI components. Most users start with the UI components, and fall back to the lower level API when they want to customize things.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re proud to say that we&#39;re the first Android Chat SDK that supports Jetpack Compose! We &lt;a href=&#34;https://github.com/GetStream/stream-chat-android/releases/tag/4.15.0&#34;&gt;released&lt;/a&gt; our Compose UI Components one day after the official Jetpack Compose 1.0 release and our team members have been working hard on it since then.&lt;/p&gt; &#xA;&lt;p&gt;Now it&#39;s mature and stable enough for us to officially recommend it for all new applications and all modern chat implementations. If you&#39;re looking for something highly customizable and extremely performant, check out our &lt;a href=&#34;https://getstream.io/chat/sdk/compose/&#34;&gt;Compose SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Android SDK supports both Kotlin and Java, but &lt;em&gt;we strongly recommend using Kotlin&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The Compose SDK supports only Kotlin, since Compose uses Kotlin compiler plugins to process the UI.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🔗 Quick Links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/trial/&#34;&gt;Register&lt;/a&gt;: Create an account and get an API key for Stream Chat&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/tutorials/android-chat/#kotlin&#34;&gt;Chat Tutorial&lt;/a&gt;: Learn the basics of the SDK by by building a simple messaging app (Kotlin or Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components-sample&#34;&gt;UI Components sample app&lt;/a&gt;: Full messaging app with threads, reactions, optimistic UI updates and offline storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose-sample&#34;&gt;Compose UI Components sample app&lt;/a&gt;: Messaging sample app built with Jetpack Compose!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/android/?language=kotlin&#34;&gt;Client Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/&#34;&gt;UI Components Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/compose/overview/&#34;&gt;Compose UI Components Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.github.io/stream-chat-android/&#34;&gt;API docs&lt;/a&gt;: Full generated docs from Dokka&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/GetStream/projects/6&#34;&gt;Jetpack Compose Planning&lt;/a&gt;: Jetpack Compose public project management board and milestone overview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;👩‍💻 Free for Makers 👨‍💻&lt;/h2&gt; &#xA;&lt;p&gt;Stream is free for most side and hobby projects. To qualify, your project/company needs to have &amp;lt; 5 team members and &amp;lt; $10k in monthly revenue. For complete pricing details, visit our &lt;a href=&#34;https://getstream.io/chat/pricing/&#34;&gt;Chat Pricing Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🗺️ Overview and Documentation 📚&lt;/h2&gt; &#xA;&lt;p&gt;This SDK consists of two low-level artifacts you can build on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-client&#34;&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/a&gt;: A low-level client for making API calls and receiving chat events. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/android/?language=kotlin&#34;&gt;Documentation website&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-offline&#34;&gt;&lt;strong&gt;Offline support&lt;/strong&gt;&lt;/a&gt;: Local caching and automatic retries, exposed via Flow and LiveData APIs. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/client/guides/offline-support/&#34;&gt;Offline Support&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;We also have two UI SDKs&lt;/strong&gt;. You can use our Compose UI Components SDK, or if you&#39;re using older UI solutions, the XML-based UI Components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose&#34;&gt;&lt;strong&gt;Compose UI Components&lt;/strong&gt;&lt;/a&gt;: Reusable and modular Composables for displaying conversations, lists of channels, and more! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose-sample&#34;&gt;Sample app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/compose/overview/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose/GUIDELINES.md&#34;&gt;Compose SDK Guidelines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components&#34;&gt;&lt;strong&gt;UI Components&lt;/strong&gt;&lt;/a&gt;: Reusable and customizable chat Views for displaying conversations, lists of channels, and more! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components-sample&#34;&gt;Sample app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/ui/overview/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Learn more about the modules by visiting &lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📖 Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;The best place to start is the &lt;a href=&#34;https://getstream.io/chat/compose/tutorial/&#34;&gt;Compose Chat Messaging Tutorial&lt;/a&gt;. It teaches you the basics of using the Compose Chat SDK and also shows how to make frequently required changes.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re using older UI toolkits, like XML, you can follow the &lt;a href=&#34;https://getstream.io/tutorials/android-chat/&#34;&gt;Android Chat Messaging Tutorial&lt;/a&gt; which features the XML-based UI Components.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🛠️ Installation and Getting Started 🚀&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/basics/dependencies/&#34;&gt;Dependencies&lt;/a&gt; and &lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/basics/getting-started/&#34;&gt;Getting Started&lt;/a&gt; pages of the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;🏗️ Jetpack Compose Sample App&lt;/h2&gt; &#xA;&lt;p&gt;Our Jetpack Compose implementation comes with its own &lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose-sample&#34;&gt;example app&lt;/a&gt;, which you can play with to see how awesome Compose is.&lt;/p&gt; &#xA;&lt;p&gt;To run the sample app, start by cloning this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:GetStream/stream-chat-android.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, open &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; and open the newly created project folder. You&#39;ll want to run the &lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose-sample&#34;&gt;&lt;code&gt;stream-chat-android-compose-sample&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;Since Compose is a highly customizable SDK, we&#39;re eager to hear your feedback on how it helps you build complex Chat UI. Join us in &lt;a href=&#34;https://github.com/GetStream/stream-chat-android/discussions&#34;&gt;this repo&#39;s discussions&lt;/a&gt; or tweet at us &lt;a href=&#34;https://twitter.com/getstream_io&#34;&gt;@getstream_io&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;📲 Sample App&lt;/h2&gt; &#xA;&lt;p&gt;However, if you&#39;re still using XML due to technical limitations, our UI Components SDK includes a fully functional &lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components-sample&#34;&gt;example app&lt;/a&gt; featuring threads, reactions, typing indicators, optimistic UI updates and offline storage. To run the sample app, start by cloning this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:GetStream/stream-chat-android.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, open &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; and open the newly created project folder. You&#39;ll want to run the &lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components-sample&#34;&gt;&lt;code&gt;stream-chat-android-ui-components-sample&lt;/code&gt;&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;h2&gt;💡 Supported features 🎨&lt;/h2&gt; &#xA;&lt;p&gt;Here are some of the features that the SDK supports out-of-the-box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Channels list UI&lt;/li&gt; &#xA; &lt;li&gt;Channel UI&lt;/li&gt; &#xA; &lt;li&gt;Message reactions&lt;/li&gt; &#xA; &lt;li&gt;Link previews&lt;/li&gt; &#xA; &lt;li&gt;Image, video and file attachments&lt;/li&gt; &#xA; &lt;li&gt;Editing and deleting messages&lt;/li&gt; &#xA; &lt;li&gt;Typing indicators&lt;/li&gt; &#xA; &lt;li&gt;Read indicators&lt;/li&gt; &#xA; &lt;li&gt;Push notifications&lt;/li&gt; &#xA; &lt;li&gt;Image gallery&lt;/li&gt; &#xA; &lt;li&gt;GIF support&lt;/li&gt; &#xA; &lt;li&gt;Light and dark themes&lt;/li&gt; &#xA; &lt;li&gt;Style customization&lt;/li&gt; &#xA; &lt;li&gt;UI customization&lt;/li&gt; &#xA; &lt;li&gt;Threads&lt;/li&gt; &#xA; &lt;li&gt;Slash commands&lt;/li&gt; &#xA; &lt;li&gt;Markdown message formatting&lt;/li&gt; &#xA; &lt;li&gt;Unread message counts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more, see the &lt;a href=&#34;https://getstream.io/chat/sdk/android/&#34;&gt;SDK&#39;s website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;💼 We are hiring!&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve recently closed a &lt;a href=&#34;https://techcrunch.com/2021/03/04/stream-raises-38m-as-its-chat-and-activity-feed-apis-power-communications-for-1b-users/&#34;&gt;$38 million Series B funding round&lt;/a&gt; and we keep actively growing. Our APIs are used by more than a billion end-users, and you&#39;ll have a chance to make a huge impact on the product within a team of the strongest engineers all over the world. Check out our current openings and apply via &lt;a href=&#34;https://getstream.io/team/#jobs&#34;&gt;Stream&#39;s website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2014-2022 Stream.io Inc. All rights reserved.&#xA;&#xA;Licensed under the Stream License;&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   https://github.com/GetStream/stream-chat-android/blob/main/LICENSE&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>nightscout/AndroidAPS</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/nightscout/AndroidAPS</id>
    <link href="https://github.com/nightscout/AndroidAPS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AndroidAPS&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check the wiki: &lt;a href=&#34;https://androidaps.readthedocs.io&#34;&gt;https://androidaps.readthedocs.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Everyone who’s been looping with AndroidAPS needs to fill out the form after 3 days of looping &lt;a href=&#34;https://docs.google.com/forms/d/14KcMjlINPMJHVt28MDRupa4sz4DDIooI4SrW0P3HSN8/viewform?c=0&amp;amp;w=1&#34;&gt;https://docs.google.com/forms/d/14KcMjlINPMJHVt28MDRupa4sz4DDIooI4SrW0P3HSN8/viewform?c=0&amp;amp;w=1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/4fQUWHZ4Mw&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/629952586895851530.svg?label=Discord&amp;amp;logo=Discord&amp;amp;colorB=7289da&amp;amp;style=for-the-badge&#34; alt=&#34;Support Server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/nightscout/AndroidAPS&#34;&gt;&lt;img src=&#34;https://travis-ci.org/nightscout/AndroidAPS.svg?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://translations.androidaps.org/project/androidaps&#34;&gt;&lt;img src=&#34;https://d322cqt584bo4o.cloudfront.net/androidaps/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://androidaps.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/androidaps/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/MilosKozak/AndroidAPS&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/MilosKozak/AndroidAPS/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; dev: &lt;a href=&#34;https://codecov.io/gh/MilosKozak/AndroidAPS&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/MilosKozak/AndroidAPS/branch/dev/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://bitit.io/assets/coins/icon-btc-1e5a37bc0eb730ac83130d7aa859052bd4b53ac3f86f99966627801f7b0410be.svg?sanitize=true&#34; alt=&#34;BTC&#34;&gt; 3KawK8aQe48478s6fxJ8Ms6VTWkwjgr9f2&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ktorio/ktor</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/ktorio/ktor</id>
    <link href="https://github.com/ktorio/ktor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Framework for quickly creating connected applications in Kotlin with minimal effort&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ktorio/ktor/main/.github/images/ktor-logo-for-dark.svg&#34;&gt; &#xA;  &lt;img alt=&#34;Ktor logo&#34; src=&#34;https://raw.githubusercontent.com/ktorio/ktor/main/.github/images/ktor-logo-for-light.svg?sanitize=true&#34;&gt; &#xA; &lt;/picture&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;Official JetBrains project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mvnrepository.com/artifact/io.ktor&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.ktor/ktor&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://kotlinlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kotlin-1.6.21-blue.svg?logo=kotlin&#34; alt=&#34;Kotlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.slack.com/messages/ktor/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-slack-green.svg?logo=slack&#34; alt=&#34;Slack channel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ktor is an asynchronous framework for creating microservices, web applications and more. Written in Kotlin from the ground up.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import io.ktor.server.netty.*&#xA;import io.ktor.server.routing.*&#xA;import io.ktor.server.application.*&#xA;import io.ktor.http.*&#xA;import io.ktor.server.response.*&#xA;import io.ktor.server.engine.*&#xA;&#xA;fun main(args: Array&amp;lt;String&amp;gt;) {&#xA;    embeddedServer(Netty, 8080) {&#xA;        routing {&#xA;            get(&#34;/&#34;) {&#xA;                call.respondText(&#34;Hello, world!&#34;, ContentType.Text.Html)&#xA;            }&#xA;        }&#xA;    }.start(wait = true)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runs embedded web server on &lt;code&gt;localhost:8080&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Installs routing and responds with &lt;code&gt;Hello, world!&lt;/code&gt; when receiving a GET http request for the root path&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Principles&lt;/h2&gt; &#xA;&lt;h4&gt;Unopinionated&lt;/h4&gt; &#xA;&lt;p&gt;Ktor Framework doesn&#39;t impose a lot of constraints on what technology a project is going to use – logging, templating, messaging, persistence, serialization, dependency injection, etc. Sometimes it may be required to implement a simple interface, but usually it is a matter of writing a transforming or intercepting function. Features are installed into the application using a unified &lt;em&gt;interception&lt;/em&gt; mechanism which allows building arbitrary pipelines.&lt;/p&gt; &#xA;&lt;p&gt;Ktor Applications can be hosted in any servlet container with Servlet 3.0+ API support such as Tomcat, or standalone using Netty or Jetty. Support for other hosts can be added through the unified hosting API.&lt;/p&gt; &#xA;&lt;p&gt;Ktor APIs are mostly functions calls with lambdas. Thanks to Kotlin DSL capabilities, the code looks declarative. Application composition is entirely up to the developer&#39;s choice – with functions or classes, using dependency injection framework or doing it all manually in the main function.&lt;/p&gt; &#xA;&lt;h4&gt;Asynchronous&lt;/h4&gt; &#xA;&lt;p&gt;The Ktor pipeline machinery and API are utilising Kotlin coroutines to provide easy-to-use asynchronous programming model without making it too cumbersome. All host implementations are using asynchronous I/O facilities to avoid thread blocking.&lt;/p&gt; &#xA;&lt;h4&gt;Testable&lt;/h4&gt; &#xA;&lt;p&gt;Ktor applications can be hosted in a special test environment, which emulates a web server to some extent without actually doing any networking. It provides easy way to test an application without mocking too much stuff, and still achieve good performance while validating application calls. Running integration tests with a real embedded web server are of course possible, too.&lt;/p&gt; &#xA;&lt;h2&gt;JetBrains Product&lt;/h2&gt; &#xA;&lt;p&gt;Ktor is an official &lt;a href=&#34;https://jetbrains.com&#34;&gt;JetBrains&lt;/a&gt; product and is primarily developed by the team at JetBrains, with contributions from the community.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please visit &lt;a href=&#34;http://ktor.io&#34;&gt;ktor.io&lt;/a&gt; for Quick Start and detailed explanations of features, usage and machinery.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting started with &lt;a href=&#34;https://ktor.io/docs/gradle.html&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Getting started with &lt;a href=&#34;https://ktor.io/docs/maven.html&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Getting started with &lt;a href=&#34;https://ktor.io/docs/intellij-idea.html&#34;&gt;IDEA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Issues / Support&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;a href=&#34;https://youtrack.jetbrains.com/issues/KTOR&#34;&gt;our issue tracker&lt;/a&gt; for filing feature requests and bugs. If you&#39;d like to ask a question, we recommend &lt;a href=&#34;https://stackoverflow.com/questions/tagged/ktor&#34;&gt;StackOverflow&lt;/a&gt; where members of the team monitor frequently.&lt;/p&gt; &#xA;&lt;p&gt;There is also community support on the &lt;a href=&#34;https://app.slack.com/client/T09229ZC6/C0A974TJ9&#34;&gt;Kotlin Slack Ktor channel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;If you find a security vulnerability in Ktor, we kindly request that you reach out to the JetBrains security team via our &lt;a href=&#34;https://www.jetbrains.com/legal/terms/responsible-disclosure.html&#34;&gt;responsible disclosure process&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Inspirations&lt;/h2&gt; &#xA;&lt;p&gt;Kotlin web frameworks such as Wasabi and Kara, which are currently deprecated.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/ktorio/ktor/main/CONTRIBUTING.md&#34;&gt;the contribution guide&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/ktorio/ktor/main/CODE_OF_CONDUCT.md&#34;&gt;Code of conduct&lt;/a&gt; before contributing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Netflix/dgs-framework</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/Netflix/dgs-framework</id>
    <link href="https://github.com/Netflix/dgs-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GraphQL for Java with Spring Boot made easy.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dgs-framework&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Netflix/dgs-framework/workflows/CI/badge.svg?branch=master&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://GitHub.com/Netflix/dgs-framework/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Netflix/dgs-framework.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/nebula-plugins/gradle-netflixoss-project-plugin.svg?sanitize=true&#34; alt=&#34;Apache 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation can be found &lt;a href=&#34;https://netflix.github.io/dgs&#34;&gt;here&lt;/a&gt;, including a getting started guide.&lt;/p&gt; &#xA;&lt;p&gt;The DGS Framework (Domain Graph Service) is a GraphQL server framework for Spring Boot, developed by Netflix.&lt;/p&gt; &#xA;&lt;p&gt;Features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Annotation based Spring Boot programming model&lt;/li&gt; &#xA; &lt;li&gt;Test framework for writing query tests as unit tests&lt;/li&gt; &#xA; &lt;li&gt;Gradle Code Generation plugin to create types from schema&lt;/li&gt; &#xA; &lt;li&gt;Easy integration with GraphQL Federation&lt;/li&gt; &#xA; &lt;li&gt;Integration with Spring Security&lt;/li&gt; &#xA; &lt;li&gt;GraphQL subscriptions (WebSockets and SSE)&lt;/li&gt; &#xA; &lt;li&gt;File uploads&lt;/li&gt; &#xA; &lt;li&gt;Error handling&lt;/li&gt; &#xA; &lt;li&gt;Many extension points&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://netflix.github.io/dgs/getting-started/&#34;&gt;getting started guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;Contributing, asking questions and reporting issues.&lt;/h1&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://raw.githubusercontent.com/Netflix/dgs-framework/master/CONTRIBUTING.md&#34;&gt;contributor guide&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ankidroid/Anki-Android</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/ankidroid/Anki-Android</id>
    <link href="https://github.com/ankidroid/Anki-Android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AnkiDroid: Anki flashcards on Android. Your secret trick to achieve superhuman information retention.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ankidroid/Anki-Android/main/docs/graphics/logos/banner_readme.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ankidroid/Anki-Android/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/ankidroid/Anki-Android&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ankidroid/Anki-Android/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/checks-status/ankidroid/Anki-Android/main?label=build&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/ankidroid&#34; alt=&#34;Open Collective backers and sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ankidroid/Anki-Android/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/ankidroid/Anki-Android&#34; alt=&#34;commit-activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ankidroid/Anki-Android/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/ankidroid/Anki-Android&#34; alt=&#34;forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ankidroid/Anki-Android/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/ankidroid/Anki-Android&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/ankidroid&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/ankidroid/localized.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ankidroid/Anki-Android/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/ankidroid/Anki-Android&#34; alt=&#34;contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/qjzcRTx&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/368267295601983490&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ankidroid/Anki-Android/raw/main/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/ankidroid/Anki-Android&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;AnkiDroid&lt;/h1&gt; &#xA;&lt;p&gt;A semi-official port of the open source &lt;a href=&#34;https://apps.ankiweb.net/index.html&#34;&gt;Anki&lt;/a&gt; spaced repetition flashcard system to Android. Memorize anything with AnkiDroid!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ankidroid/Anki-Android/main/docs/graphics/logos/ankidroid_logo.png&#34; align=&#34;right&#34; width=&#34;40%&#34; height=&#34;100%&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;div style=&#34;display:flex;&#34;&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;night mode&lt;/li&gt; &#xA;  &lt;li&gt;whiteboard&lt;/li&gt; &#xA;  &lt;li&gt;progress widget&lt;/li&gt; &#xA;  &lt;li&gt;detailed statistics&lt;/li&gt; &#xA;  &lt;li&gt;syncing with AnkiWeb&lt;/li&gt; &#xA;  &lt;li&gt;write answers (optional)&lt;/li&gt; &#xA;  &lt;li&gt;text-to-speech integration&lt;/li&gt; &#xA;  &lt;li&gt;more than 6000 premade decks&lt;/li&gt; &#xA;  &lt;li&gt;spaced repetition (supermemo 2 algorithm)&lt;/li&gt; &#xA;  &lt;li&gt;supported contents: text, images, sounds, MathJax&lt;/li&gt; &#xA;  &lt;li&gt;add cards by intent from other applications like dictionaries&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;div style=&#34;display:flex;&#34;&gt; &#xA; &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.ichi2.anki&amp;amp;utm_source=global_co&amp;amp;utm_medium=prtnr&amp;amp;utm_content=Mar2515&amp;amp;utm_campaign=PartBadge&amp;amp;pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1&#34;&gt; &lt;img alt=&#34;Get it on Google Play&#34; height=&#34;80&#34; src=&#34;https://raw.githubusercontent.com/ankidroid/Anki-Android/main/docs/graphics/logos/google-badge.png&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://f-droid.org/repository/browse/?fdid=com.ichi2.anki&#34;&gt; &lt;img alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34; src=&#34;https://raw.githubusercontent.com/ankidroid/Anki-Android/main/docs/graphics/logos/f-droid-badge.png&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;http://www.amazon.com/gp/product/B004L1G7T2/ref=mas_pm_ankidroid_flashcards&#34;&gt; &lt;img alt=&#34;Get it on Amazon app store&#34; height=&#34;80&#34; src=&#34;https://raw.githubusercontent.com/ankidroid/Anki-Android/main/docs/graphics/logos/amazon-badge.png&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://appgallery5.huawei.com/#/app/C102711481&#34;&gt; &lt;img alt=&#34;Get it on Huawei app gallery&#34; height=&#34;80&#34; src=&#34;https://raw.githubusercontent.com/ankidroid/Anki-Android/main/docs/graphics/logos/huawei-badge.png&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;View &lt;a href=&#34;https://github.com/ankidroid/Anki-Android/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://ankidroid.org/docs/manual.html&#34;&gt;user manual&lt;/a&gt; and the wiki for usage instructions. See the &lt;a href=&#34;https://ankidroid.org/docs/help.html&#34;&gt;help page&lt;/a&gt; for how to submit a bug report or contact a project member, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;You can contribute to AnkiDroid by beta testing, translating, or submitting code. See the &lt;a href=&#34;https://github.com/ankidroid/Anki-Android/wiki/Contributing&#34;&gt;contribution wiki page&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Join Us On&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/qjzcRTx&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ankidroid/Anki-Android/main/docs/graphics/logos/discord_logo_color.png&#34; height=&#34;50px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/Anki&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ankidroid/Anki-Android/main/docs/graphics/logos/reddit_logo_color.png&#34; height=&#34;50px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.facebook.com/AnkiDroid/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ankidroid/Anki-Android/main/docs/graphics/logos/facebook_logo_color.png&#34; height=&#34;50px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ankidroid&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ankidroid/Anki-Android/main/docs/graphics/logos/twitter_logo_color.png&#34; height=&#34;50px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;h3&gt;Github Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to these awesome contributors who keep this project going&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ankidroid/Anki-Android/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://opencollective.com/ankidroid#sponsor&#34;&gt;Sponsors&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/16/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/16/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/17/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/17/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/18/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/18/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/19/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/19/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ankidroid/sponsor/20/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/sponsor/20/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://opencollective.com/ankidroid#backer&#34;&gt;Backers&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ankidroid#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://opencollective.com/ankidroid#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Our Awesome Team of Contributors&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ankidroid#contributors&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ankidroid/contributors.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ankidroid/Anki-Android/raw/main/COPYING&#34;&gt;GPL-3.0 License&lt;/a&gt; &lt;a href=&#34;https://github.com/ankitects/anki/raw/main/LICENSE&#34;&gt;AGPL-3.0 Licence&lt;/a&gt; for some part of the back-end&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>android/camera-samples</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/android/camera-samples</id>
    <link href="https://github.com/android/camera-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multiple samples showing the best practices in camera APIs on Android.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Camera Samples Repository&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a set of individual Android Studio projects to help you get started with the &lt;a href=&#34;https://developer.android.com/training/camerax&#34;&gt;CameraX&lt;/a&gt; and &lt;a href=&#34;https://developer.android.com/training/camera2&#34;&gt;Camera2&lt;/a&gt; APIs in Android.&lt;/p&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sample&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/CameraXBasic&#34;&gt;CameraXBasic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to use CameraX APIs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/CameraXAdvanced&#34;&gt;CameraXAdvanced&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to use CameraX APIs with TFLite and others&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/CameraXVideo&#34;&gt;CameraXVideo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to use CameraX VideoCapture API.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/Camera2Basic&#34;&gt;Camera2Basic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates capturing JPEG, RAW and DEPTH images, e.g. unprocessed pixel data directly from the camera sensor.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/Camera2SlowMotion&#34;&gt;Camera2SlowMotion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates capturing high-speed video in a constrained camera capture session.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/Camera2Video&#34;&gt;Camera2Video&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates recording video using the Camera2 API and MediaRecorder.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/Camera2Extensions&#34;&gt;Camera2Extensions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates Camera2 extension live preview and still capture.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/HdrViewfinder&#34;&gt;HdrViewfinder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates use of RenderScript to display a live HDR feed from camera frames using Camera2 API.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/Exposed</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/JetBrains/Exposed</id>
    <link href="https://github.com/JetBrains/Exposed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kotlin SQL Framework&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/Exposed/master/logo.png&#34; alt=&#34;Exposed&#34; width=&#34;315&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/team.svg?sanitize=true&#34; alt=&#34;JetBrains team project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.slack.com/archives/C0CG7E0A1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-@kotlinlang/exposed-yellow.svg?logo=slack?style=flat&#34; alt=&#34;Kotlinlang Slack Channel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://teamcity.jetbrains.com/viewType.html?buildTypeId=KotlinTools_Exposed_Build&amp;amp;guest=1&#34;&gt;&lt;img src=&#34;https://teamcity.jetbrains.com/app/rest/builds/buildType:(id:KotlinTools_Exposed_Build)/statusIcon&#34; alt=&#34;TC Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/org.jetbrains.exposed/exposed-core&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/org.jetbrains.exposed/exposed-core/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to &lt;strong&gt;Exposed&lt;/strong&gt;, an ORM framework for &lt;a href=&#34;https://github.com/JetBrains/kotlin&#34;&gt;Kotlin&lt;/a&gt;. Exposed offers two levels of database access: typesafe SQL wrapping DSL and lightweight data access objects. Our official mascot is Cuttlefish, which is best known for its outstanding mimicry abilities letting it blend seamlessly in any environment. Just like our mascot, Exposed can mimic a variety of database engines and help you build database applications without hard dependencies on any specific database engine, and switch between them with very little or no changes in your code.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Databases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;H2&lt;/li&gt; &#xA; &lt;li&gt;MySQL&lt;/li&gt; &#xA; &lt;li&gt;MariaDB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/Exposed/master/ORACLE.md&#34;&gt;Oracle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL using the &lt;a href=&#34;https://github.com/impossibl/pgjdbc-ng&#34;&gt;pgjdbc-ng&lt;/a&gt; JDBC driver&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/Exposed/master/SQLServer.md&#34;&gt;SQL Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SQLite&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;p&gt;Exposed is currently available for &lt;strong&gt;maven/gradle builds&lt;/strong&gt; at &lt;a href=&#34;https://search.maven.org/search?q=g:org.jetbrains.exposed&#34;&gt;Maven Central&lt;/a&gt; (read &lt;a href=&#34;https://github.com/JetBrains/Exposed/wiki/Getting-Started#download&#34;&gt;Getting started&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/Exposed/wiki&#34;&gt;Wiki&lt;/a&gt; with examples and docs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/Exposed/master/ROADMAP.md&#34;&gt;Roadmap&lt;/a&gt; to see what&#39;s coming next.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/Exposed/master/ChangeLog.md&#34;&gt;Change log&lt;/a&gt; of improvements and bug fixes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have any questions feel free to ask at our &lt;a href=&#34;https://kotlinlang.slack.com/archives/C0CG7E0A1&#34;&gt;#exposed&lt;/a&gt; channel on &lt;a href=&#34;https://kotlinlang.slack.com&#34;&gt;kotlinlang.slack.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;SQL DSL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import org.jetbrains.exposed.sql.*&#xA;import org.jetbrains.exposed.sql.transactions.transaction&#xA;&#xA;object Users : Table() {&#xA;    val id = varchar(&#34;id&#34;, 10) // Column&amp;lt;String&amp;gt;&#xA;    val name = varchar(&#34;name&#34;, length = 50) // Column&amp;lt;String&amp;gt;&#xA;    val cityId = (integer(&#34;city_id&#34;) references Cities.id).nullable() // Column&amp;lt;Int?&amp;gt;&#xA;&#xA;    override val primaryKey = PrimaryKey(id, name = &#34;PK_User_ID&#34;) // name is optional here&#xA;}&#xA;&#xA;object Cities : Table() {&#xA;    val id = integer(&#34;id&#34;).autoIncrement() // Column&amp;lt;Int&amp;gt;&#xA;    val name = varchar(&#34;name&#34;, 50) // Column&amp;lt;String&amp;gt;&#xA;&#xA;    override val primaryKey = PrimaryKey(id, name = &#34;PK_Cities_ID&#34;)&#xA;}&#xA;&#xA;fun main() {&#xA;    Database.connect(&#34;jdbc:h2:mem:test&#34;, driver = &#34;org.h2.Driver&#34;, user = &#34;root&#34;, password = &#34;&#34;)&#xA;&#xA;    transaction {&#xA;        addLogger(StdOutSqlLogger)&#xA;&#xA;        SchemaUtils.create (Cities, Users)&#xA;&#xA;        val saintPetersburgId = Cities.insert {&#xA;            it[name] = &#34;St. Petersburg&#34;&#xA;        } get Cities.id&#xA;&#xA;        val munichId = Cities.insert {&#xA;            it[name] = &#34;Munich&#34;&#xA;        } get Cities.id&#xA;&#xA;        val pragueId = Cities.insert {&#xA;            it.update(name, stringLiteral(&#34;   Prague   &#34;).trim().substring(1, 2))&#xA;        }[Cities.id]&#xA;&#xA;        val pragueName = Cities.select { Cities.id eq pragueId }.single()[Cities.name]&#xA;        assertEquals(pragueName, &#34;Pr&#34;)&#xA;&#xA;        Users.insert {&#xA;            it[id] = &#34;andrey&#34;&#xA;            it[name] = &#34;Andrey&#34;&#xA;            it[Users.cityId] = saintPetersburgId&#xA;        }&#xA;&#xA;        Users.insert {&#xA;            it[id] = &#34;sergey&#34;&#xA;            it[name] = &#34;Sergey&#34;&#xA;            it[Users.cityId] = munichId&#xA;        }&#xA;&#xA;        Users.insert {&#xA;            it[id] = &#34;eugene&#34;&#xA;            it[name] = &#34;Eugene&#34;&#xA;            it[Users.cityId] = munichId&#xA;        }&#xA;&#xA;        Users.insert {&#xA;            it[id] = &#34;alex&#34;&#xA;            it[name] = &#34;Alex&#34;&#xA;            it[Users.cityId] = null&#xA;        }&#xA;&#xA;        Users.insert {&#xA;            it[id] = &#34;smth&#34;&#xA;            it[name] = &#34;Something&#34;&#xA;            it[Users.cityId] = null&#xA;        }&#xA;&#xA;        Users.update({ Users.id eq &#34;alex&#34;}) {&#xA;            it[name] = &#34;Alexey&#34;&#xA;        }&#xA;&#xA;        Users.deleteWhere{ Users.name like &#34;%thing&#34;}&#xA;&#xA;        println(&#34;All cities:&#34;)&#xA;&#xA;        for (city in Cities.selectAll()) {&#xA;            println(&#34;${city[Cities.id]}: ${city[Cities.name]}&#34;)&#xA;        }&#xA;&#xA;        println(&#34;Manual join:&#34;)&#xA;        (Users innerJoin Cities).slice(Users.name, Cities.name).&#xA;            select {(Users.id.eq(&#34;andrey&#34;) or Users.name.eq(&#34;Sergey&#34;)) and&#xA;                    Users.id.eq(&#34;sergey&#34;) and Users.cityId.eq(Cities.id)}.forEach {&#xA;            println(&#34;${it[Users.name]} lives in ${it[Cities.name]}&#34;)&#xA;        }&#xA;&#xA;        println(&#34;Join with foreign key:&#34;)&#xA;&#xA;&#xA;        (Users innerJoin Cities).slice(Users.name, Users.cityId, Cities.name).&#xA;                select { Cities.name.eq(&#34;St. Petersburg&#34;) or Users.cityId.isNull()}.forEach {&#xA;            if (it[Users.cityId] != null) {&#xA;                println(&#34;${it[Users.name]} lives in ${it[Cities.name]}&#34;)&#xA;            }&#xA;            else {&#xA;                println(&#34;${it[Users.name]} lives nowhere&#34;)&#xA;            }&#xA;        }&#xA;&#xA;        println(&#34;Functions and group by:&#34;)&#xA;&#xA;        ((Cities innerJoin Users).slice(Cities.name, Users.id.count()).selectAll().groupBy(Cities.name)).forEach {&#xA;            val cityName = it[Cities.name]&#xA;            val userCount = it[Users.id.count()]&#xA;&#xA;            if (userCount &amp;gt; 0) {&#xA;                println(&#34;$userCount user(s) live(s) in $cityName&#34;)&#xA;            } else {&#xA;                println(&#34;Nobody lives in $cityName&#34;)&#xA;            }&#xA;        }&#xA;&#xA;        SchemaUtils.drop (Users, Cities)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generated SQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;    SQL: CREATE TABLE IF NOT EXISTS Cities (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(50) NOT NULL, CONSTRAINT PK_Cities_ID PRIMARY KEY (id))&#xA;    SQL: CREATE TABLE IF NOT EXISTS Users (id VARCHAR(10) NOT NULL, name VARCHAR(50) NOT NULL, city_id INT NULL, CONSTRAINT PK_User_ID PRIMARY KEY (id))&#xA;    SQL: ALTER TABLE Users ADD FOREIGN KEY (city_id) REFERENCES Cities(id)&#xA;    SQL: INSERT INTO Cities (name) VALUES (&#39;St. Petersburg&#39;)&#xA;    SQL: INSERT INTO Cities (name) VALUES (&#39;Munich&#39;)&#xA;    SQL: INSERT INTO Cities (name) VALUES (&#39;Prague&#39;)&#xA;    SQL: INSERT INTO Users (id, name, city_id) VALUES (&#39;andrey&#39;, &#39;Andrey&#39;, 1)&#xA;    SQL: INSERT INTO Users (id, name, city_id) VALUES (&#39;sergey&#39;, &#39;Sergey&#39;, 2)&#xA;    SQL: INSERT INTO Users (id, name, city_id) VALUES (&#39;eugene&#39;, &#39;Eugene&#39;, 2)&#xA;    SQL: INSERT INTO Users (id, name, city_id) VALUES (&#39;alex&#39;, &#39;Alex&#39;, NULL)&#xA;    SQL: INSERT INTO Users (id, name, city_id) VALUES (&#39;smth&#39;, &#39;Something&#39;, NULL)&#xA;    SQL: UPDATE Users SET name=&#39;Alexey&#39; WHERE Users.id = &#39;alex&#39;&#xA;    SQL: DELETE FROM Users WHERE Users.name LIKE &#39;%thing&#39;&#xA;    All cities:&#xA;    SQL: SELECT Cities.id, Cities.name FROM Cities&#xA;    1: St. Petersburg&#xA;    2: Munich&#xA;    3: Prague&#xA;    Manual join:&#xA;    SQL: SELECT Users.name, Cities.name FROM Users INNER JOIN Cities ON Cities.id = Users.city_id WHERE ((Users.id = &#39;andrey&#39;) or (Users.name = &#39;Sergey&#39;)) and Users.id = &#39;sergey&#39; and Users.city_id = Cities.id&#xA;    Sergey lives in Munich&#xA;    Join with foreign key:&#xA;    SQL: SELECT Users.name, Users.city_id, Cities.name FROM Users INNER JOIN Cities ON Cities.id = Users.city_id WHERE (Cities.name = &#39;St. Petersburg&#39;) or (Users.city_id IS NULL)&#xA;    Andrey lives in St. Petersburg&#xA;    Functions and group by:&#xA;    SQL: SELECT Cities.name, COUNT(Users.id) FROM Cities INNER JOIN Users ON Cities.id = Users.city_id GROUP BY Cities.name&#xA;    1 user(s) live(s) in St. Petersburg&#xA;    2 user(s) live(s) in Munich&#xA;    SQL: DROP TABLE Users&#xA;    SQL: DROP TABLE Cities&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DAO&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import org.jetbrains.exposed.dao.*&#xA;import org.jetbrains.exposed.dao.id.EntityID&#xA;import org.jetbrains.exposed.dao.id.IntIdTable&#xA;import org.jetbrains.exposed.sql.*&#xA;import org.jetbrains.exposed.sql.transactions.transaction&#xA;&#xA;object Users : IntIdTable() {&#xA;    val name = varchar(&#34;name&#34;, 50).index()&#xA;    val city = reference(&#34;city&#34;, Cities)&#xA;    val age = integer(&#34;age&#34;)&#xA;}&#xA;&#xA;object Cities: IntIdTable() {&#xA;    val name = varchar(&#34;name&#34;, 50)&#xA;}&#xA;&#xA;class User(id: EntityID&amp;lt;Int&amp;gt;) : IntEntity(id) {&#xA;    companion object : IntEntityClass&amp;lt;User&amp;gt;(Users)&#xA;&#xA;    var name by Users.name&#xA;    var city by City referencedOn Users.city&#xA;    var age by Users.age&#xA;}&#xA;&#xA;class City(id: EntityID&amp;lt;Int&amp;gt;) : IntEntity(id) {&#xA;    companion object : IntEntityClass&amp;lt;City&amp;gt;(Cities)&#xA;&#xA;    var name by Cities.name&#xA;    val users by User referrersOn Users.city&#xA;}&#xA;&#xA;fun main() {&#xA;    Database.connect(&#34;jdbc:h2:mem:test&#34;, driver = &#34;org.h2.Driver&#34;, user = &#34;root&#34;, password = &#34;&#34;)&#xA;&#xA;    transaction {&#xA;        addLogger(StdOutSqlLogger)&#xA;&#xA;        SchemaUtils.create (Cities, Users)&#xA;&#xA;        val stPete = City.new {&#xA;            name = &#34;St. Petersburg&#34;&#xA;        }&#xA;&#xA;        val munich = City.new {&#xA;            name = &#34;Munich&#34;&#xA;        }&#xA;&#xA;        User.new {&#xA;            name = &#34;a&#34;&#xA;            city = stPete&#xA;            age = 5&#xA;        }&#xA;&#xA;        User.new {&#xA;            name = &#34;b&#34;&#xA;            city = stPete&#xA;            age = 27&#xA;        }&#xA;&#xA;        User.new {&#xA;            name = &#34;c&#34;&#xA;            city = munich&#xA;            age = 42&#xA;        }&#xA;&#xA;        println(&#34;Cities: ${City.all().joinToString {it.name}}&#34;)&#xA;        println(&#34;Users in ${stPete.name}: ${stPete.users.joinToString {it.name}}&#34;)&#xA;        println(&#34;Adults: ${User.find { Users.age greaterEq 18 }.joinToString {it.name}}&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generated SQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;    SQL: CREATE TABLE IF NOT EXISTS Cities (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(50) NOT NULL, CONSTRAINT pk_Cities PRIMARY KEY (id))&#xA;    SQL: CREATE TABLE IF NOT EXISTS Users (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(50) NOT NULL, city INT NOT NULL, age INT NOT NULL, CONSTRAINT pk_Users PRIMARY KEY (id))&#xA;    SQL: CREATE INDEX Users_name ON Users (name)&#xA;    SQL: ALTER TABLE Users ADD FOREIGN KEY (city) REFERENCES Cities(id)&#xA;    SQL: INSERT INTO Cities (name) VALUES (&#39;St. Petersburg&#39;),(&#39;Munich&#39;)&#xA;    SQL: SELECT Cities.id, Cities.name FROM Cities&#xA;    Cities: St. Petersburg, Munich&#xA;    SQL: INSERT INTO Users (name, city, age) VALUES (&#39;a&#39;, 1, 5),(&#39;b&#39;, 1, 27),(&#39;c&#39;, 2, 42)&#xA;    SQL: SELECT Users.id, Users.name, Users.city, Users.age FROM Users WHERE Users.city = 1&#xA;    Users in St. Petersburg: a, b&#xA;    SQL: SELECT Users.id, Users.name, Users.city, Users.age FROM Users WHERE Users.age &amp;gt;= 18&#xA;    Adults: b, c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/Exposed/master/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt; or &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>android/storage-samples</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/android/storage-samples</id>
    <link href="https://github.com/android/storage-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multiple samples showing the best practices in storage APIs on Android.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Storage Samples Repository&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a set of individual Android Studio projects to help you learn about storage in Android (saving files in storage, key-value data, sharing simple data, sharing files, printing files, content providers, Storage Access Framework [SAF], etc.).&lt;/p&gt; &#xA;&lt;p&gt;For more information, please &lt;a href=&#34;https://developer.android.com/guide/topics/providers/document-provider&#34;&gt;read our documentation&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>square/leakcanary</title>
    <updated>2022-06-01T01:44:55Z</updated>
    <id>tag:github.com,2022-06-01:/square/leakcanary</id>
    <link href="https://github.com/square/leakcanary" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A memory leak detection library for Android.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LeakCanary 🐤&lt;/h1&gt; &#xA;&lt;p&gt;A memory leak detection library for Android.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://square.github.io/leakcanary&#34;&gt;square.github.io/leakcanary&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;🙏 If you like LeakCanary you can show support by starring ⭐ this repository.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2015 Square, Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>