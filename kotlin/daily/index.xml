<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-08T01:31:37Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WebFuzzing/EvoMaster</title>
    <updated>2024-09-08T01:31:37Z</updated>
    <id>tag:github.com,2024-09-08:/WebFuzzing/EvoMaster</id>
    <link href="https://github.com/WebFuzzing/EvoMaster" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The first open-source AI-driven tool for automatically generating system-level test cases (also known as fuzzing) for web/enterprise applications. Currently targeting whitebox and blackbox testing of Web APIs, like REST, GraphQL and RPC (e.g., gRPC and Thrift).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EvoMaster: A Tool For Automatically Generating System-Level Test Cases&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/img/carl-cerstrand-136810_compressed.jpg&#34; alt=&#34;&#34; title=&#34;Photo by Carl Cerstrand on Unsplash&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/org.evomaster/evomaster-client-java&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/org.evomaster/evomaster-client-java/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/org.evomaster/evomaster-client-java-controller&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/org.evomaster/evomaster-client-java-controller/javadoc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/WebFuzzing/EvoMaster/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/WebFuzzing/EvoMaster&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/WebFuzzing/EvoMaster/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://zenodo.org/badge/latestdoi/92385933&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/92385933.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/lgpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-LGPL_v3-blue.svg?sanitize=true&#34; alt=&#34;License: LGPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WebFuzzing/EvoMaster/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/WebFuzzing/evomaster/total.svg?sanitize=true&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Summary&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;EvoMaster&lt;/em&gt; (&lt;a href=&#34;http://evomaster.org&#34;&gt;www.evomaster.org&lt;/a&gt;) is the first (2016) open-source AI-driven tool that automatically &lt;em&gt;generates&lt;/em&gt; system-level test cases for web/enterprise applications. This is related to &lt;a href=&#34;https://en.wikipedia.org/wiki/Fuzzing&#34;&gt;Fuzzing&lt;/a&gt;. Not only &lt;em&gt;EvoMaster&lt;/em&gt; can generate inputs that find program crashes, but also it generates small effective test suites (e.g., in JUnit format) that can be used for &lt;em&gt;regression testing&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;EvoMaster&lt;/em&gt; is an AI driven tool. In particular, internally it uses an &lt;a href=&#34;https://en.wikipedia.org/wiki/Evolutionary_algorithm&#34;&gt;Evolutionary Algorithm&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_program_analysis&#34;&gt;Dynamic Program Analysis&lt;/a&gt; to be able to generate effective test cases. The approach is to &lt;em&gt;evolve&lt;/em&gt; test cases from an initial population of random ones, trying to maximize measures like code coverage and fault detection. &lt;em&gt;EvoMaster&lt;/em&gt; uses several kinds of AI heuristics to improve performance even further, building on decades of research in the field of &lt;a href=&#34;https://en.wikipedia.org/wiki/Search-based_software_engineering&#34;&gt;Search-Based Software Testing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Web APIs&lt;/em&gt;: At the moment, &lt;em&gt;EvoMaster&lt;/em&gt; can generate test cases for &lt;strong&gt;REST&lt;/strong&gt;, &lt;strong&gt;GraphQL&lt;/strong&gt; and &lt;strong&gt;RPC&lt;/strong&gt; (e.g., &lt;strong&gt;gRPC&lt;/strong&gt; and &lt;strong&gt;Thrift&lt;/strong&gt;) APIs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Black-Box&lt;/em&gt; testing mode: can run on any API (regardless of its programming language, e.g., Python and Go). However, results for black-box testing will be worse than white-box testing (e.g., due to lack of code analysis). Default test case output is in Python, but other formats are available as well.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;White-Box&lt;/em&gt; testing mode: can be used for APIs compiled to JVM (e.g., Java and Kotlin). &lt;em&gt;EvoMaster&lt;/em&gt; analyses the bytecode of the tested applications, and uses several heuristics such as &lt;em&gt;testability transformations&lt;/em&gt; and &lt;em&gt;taint analysis&lt;/em&gt; to be able to generate more effective test cases. We support JDK &lt;strong&gt;8&lt;/strong&gt; and the major LTS versions after that (currently JDK &lt;strong&gt;21&lt;/strong&gt;). Might work on other JVM versions, but we provide &lt;strong&gt;NO&lt;/strong&gt; support for it. Note: there was initial support for other languages as well, like for example JavaScript/TypeScript and C#, but they are not in a stable, feature-complete state. The support for those languages for white-box testing has been dropped, at least for the time being.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Installation&lt;/em&gt;: we provide installers for the main operating systems: &lt;em&gt;Windows&lt;/em&gt; (&lt;code&gt;.msi&lt;/code&gt;), &lt;em&gt;OSX&lt;/em&gt; (&lt;code&gt;.dmg&lt;/code&gt;) and &lt;em&gt;Linux&lt;/em&gt; (&lt;code&gt;.deb&lt;/code&gt;). We also provide an uber-fat JAR file. To download them, see the &lt;a href=&#34;https://github.com/WebFuzzing/EvoMaster/releases&#34;&gt;Release page&lt;/a&gt;. Release notes are present in the file &lt;a href=&#34;https://github.com/WebFuzzing/EvoMaster/raw/master/release_notes.md&#34;&gt;release_notes.md&lt;/a&gt;. If you are using JDK 17 or later, it is recommended to use one of the installers, instead of using directly the uber-fat JAR (otherwise you will need to deal with the &lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/jdks.md&#34;&gt;usability limitations&lt;/a&gt; of the latest JDKs). When you use one of the installers, keep in mind that currently they do not update the &lt;code&gt;PATH&lt;/code&gt; variable. This needs to be done manually, &lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/download.md&#34;&gt;see documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;State-of-the-art&lt;/em&gt;: an &lt;a href=&#34;https://arxiv.org/abs/2204.08348&#34;&gt;independent study (2022)&lt;/a&gt;, comparing 10 fuzzers on 20 RESTful APIs, shows that &lt;em&gt;EvoMaster&lt;/em&gt; gives the best results.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Schema&lt;/em&gt;: REST APIs must provide a schema in &lt;a href=&#34;https://swagger.io&#34;&gt;OpenAPI/Swagger&lt;/a&gt; format (either &lt;em&gt;v2&lt;/em&gt; or &lt;em&gt;v3&lt;/em&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Output&lt;/em&gt;: the tool generates &lt;em&gt;JUnit&lt;/em&gt; (version 4 or 5) tests, written in either Java or Kotlin, as well as test suites in Python and JavaScript. For a complete list, see the documentation for the CLI parameter &lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/options.md&#34;&gt;--outputFormat&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Fault detection&lt;/em&gt;: &lt;em&gt;EvoMaster&lt;/em&gt; can generate tests cases that reveal faults/bugs in the tested applications. Different heuristics are employed, like checking for 500 status codes and mismatches from the API schemas.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Self-contained tests&lt;/em&gt;: for white-box testing, the generated tests do start/stop the application, binding to an ephemeral port. This means that the generated tests can be used for &lt;em&gt;regression testing&lt;/em&gt; (e.g., added to the Git repository of the application, and run with any build tool such as Maven and Gradle). For black-box testing, you will need to make sure the application is up and running before executing the tests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;SQL handling&lt;/em&gt;: for white-box testing, &lt;em&gt;EvoMaster&lt;/em&gt; can intercept and analyse all communications done with SQL databases, and use such information to generate higher code coverage test cases. Furthermore, it can generate data directly into the databases, and have such initialization automatically added in the generated tests. At the moment, &lt;em&gt;EvoMaster&lt;/em&gt; supports &lt;em&gt;Postgres&lt;/em&gt;, &lt;em&gt;MySQL&lt;/em&gt; and &lt;em&gt;H2&lt;/em&gt; databases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Authentication&lt;/em&gt;: we support auth based on authentication headers and cookies. Besides using fixed HTTP headers, it is also possible to declaratively specify which login endpoint should be used to dynamically obtain authentication info (e.g., auth tokens or cookies) for each test execution. &lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/auth.md&#34;&gt;See documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Known limitations&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Driver&lt;/em&gt;: to be used for &lt;em&gt;white-box&lt;/em&gt; testing, users need to write a &lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/write_driver.md&#34;&gt;driver manually&lt;/a&gt;. We recommend to try &lt;em&gt;black-box&lt;/em&gt; mode first (should just need a few minutes to get it up and running) to get an idea of what &lt;em&gt;EvoMaster&lt;/em&gt; can do for you.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;JDK 9+&lt;/em&gt;: white-box testing requires bytecode manipulation. Each new release of the JDK makes doing this harder and harder. Dealing with JDKs above &lt;strong&gt;8&lt;/strong&gt; is doable, but it requires some settings. &lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/jdks.md&#34;&gt;See documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Execution time&lt;/em&gt;: to get good results, you might need to run the search for several hours. We recommend to first try the search for 10 minutes, just to get an idea of what type of tests can be generated. But, then, you should run &lt;em&gt;EvoMaster&lt;/em&gt; for something like between 1 and 24 hours (the longer the better, but it is unlikely to get better results after 24 hours).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;RPC APIs&lt;/em&gt;: for the moment, we do not directly support RPC schema definitions. Fuzzing RPC APIs requires to write a driver, using the client library of the API to make the calls.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;External services&lt;/em&gt;: (e.g., other RESTful APIs) currently there is no support for them (e.g., to automatically mock them). It is work in progress.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;NoSQL databases&lt;/em&gt;: (e.g., MongoDB) currently no support. It is work in progress.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Failing tests&lt;/em&gt;: the tests generated by &lt;em&gt;EvoMaster&lt;/em&gt; should all pass, and not fail, even when they detect a fault. In those cases, comments/test-names would point out that a test is revealing a possible fault, while still passing. However, in some cases the generated tests might fail. This is due to the so called &lt;em&gt;flaky&lt;/em&gt; tests, e.g., when a test has assertions based on the time clock (e.g., dates and timestamps). There is ongoing effort to address this problem, but it is still not fully solved.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--### Videos---&gt; &#xA;&lt;!-- &#xA;&lt;div&gt;Icons made by &lt;a href=&#34;https://www.flaticon.com/authors/freepik&#34; title=&#34;Freepik&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;https://www.flaticon.com/&#34; title=&#34;Flaticon&#34;&gt;www.flaticon.com&lt;/a&gt;&lt;/div&gt; &#xA;--&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/img/video-player-flaticon.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;a href=&#34;https://youtu.be/3mYxjgnhLEo&#34;&gt;short video&lt;/a&gt; (5 minutes) shows the use of &lt;em&gt;EvoMaster&lt;/em&gt; on one of the case studies in &lt;a href=&#34;https://github.com/WebFuzzing/EMB&#34;&gt;EMB&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This &lt;a href=&#34;https://youtu.be/ORxZoYw7LnM&#34;&gt;13-minute video&lt;/a&gt; shows how to write a white-box driver for EvoMaster, for the &lt;a href=&#34;https://github.com/WebFuzzing/rest-api-example&#34;&gt;rest-api-example&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to &lt;a href=&#34;https://youtu.be/uh_XzGxws9o&#34;&gt;Download and Install EvoMaster on Windows 10&lt;/a&gt;, using its &lt;em&gt;.msi&lt;/em&gt; installer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://youtu.be/iQSAlrr-PZo&#34;&gt;Short presentation&lt;/a&gt; (5 minutes) about version 2.0.0.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Alternatives&lt;/h3&gt; &#xA;&lt;p&gt;In the last few years, several few tools have been proposed in the academic literature and in the open-source community. You can read more details in this &lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/publications/2023_tosem_survey.pdf&#34;&gt;2023 survey&lt;/a&gt; on REST API testing.&lt;/p&gt; &#xA;&lt;p&gt;Existing open-source tools for REST API fuzzing are for example (in alphabetic order): &lt;a href=&#34;https://github.com/apiaryio/dredd&#34;&gt;Dredd&lt;/a&gt;, &lt;a href=&#34;https://github.com/Yelp/fuzz-lightyear&#34;&gt;Fuzz-lightyear&lt;/a&gt;, &lt;a href=&#34;https://github.com/isa-group/RESTest&#34;&gt;ResTest&lt;/a&gt;, &lt;a href=&#34;https://github.com/GIST-NJU/RestCT&#34;&gt;RestCT&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/restler-fuzzer&#34;&gt;Restler&lt;/a&gt;, &lt;a href=&#34;https://github.com/SeUniVr/RestTestGen&#34;&gt;RestTestGen&lt;/a&gt;, and &lt;a href=&#34;https://github.com/schemathesis/schemathesis&#34;&gt;Schemathesis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All these tools are &lt;em&gt;black-box&lt;/em&gt;, i.e., they do not analyze the source-code of the tested APIs to generate more effective test data. As we are the authors of EvoMaster, we are too biased to compare it properly with those other black-box tools. However, an &lt;a href=&#34;https://arxiv.org/abs/2204.08348&#34;&gt;independent study (2022)&lt;/a&gt; shows that EvoMaster is among the best performant. Furthermore, if your APIs are running on the JVM (e.g., written in Java or Kotlin), then EvoMaster has clearly an advantage, as it supports &lt;em&gt;white-box&lt;/em&gt; testing.&lt;/p&gt; &#xA;&lt;!--&#xA;### Hiring&#xA;&#xA;Depending on the year, we might have funding for _postdoc_ and _PhD student_ positions to work on this project (in Oslo, Norway).&#xA;&#xA;Current open positions: none.&#xA;&lt; !---&#xA;* 2023: PhD student positions. No new calls scheduled for the moment.&#xA;* 2023: Postdoc positions. No new calls scheduled for the moment.&#xA;--- &gt;&#xA;&#xA;For questions on these positions, please contact Prof. Andrea Arcuri.&#xA;&#xA;&lt; !---&#xA;For more details on current vacancies, see our group page at [AISE Lab](https://emresearch.github.io/).&#xA;---&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;If you are trying to use &lt;em&gt;EvoMaster&lt;/em&gt;, but the instructions in this documentation are not enough to get you started, or they are too unclear, then it means it is a &lt;em&gt;bug&lt;/em&gt; in the documentation, which then would need to be clarified and updated. In such cases, please create a new &lt;a href=&#34;https://github.com/WebFuzzing/EvoMaster/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, feel free to start new discussion topics in the &lt;a href=&#34;https://github.com/WebFuzzing/EvoMaster/discussions&#34;&gt;Discussions forum&lt;/a&gt;. If you have time, please consider answering the polls there.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/example.md&#34;&gt;Example of generated tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/download.md&#34;&gt;Download and Install EvoMaster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/build.md&#34;&gt;Build EvoMaster from source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/options.md&#34;&gt;Command-Line Interface (CLI) options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/openapi.md&#34;&gt;OpenApi/Swagger Schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/blackbox.md&#34;&gt;Using EvoMaster for Black-Box Testing (easier to setup, but worse results)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/whitebox.md&#34;&gt;Using EvoMaster for White-Box Testing (harder to setup, but better results)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/write_driver.md&#34;&gt;Write an EvoMaster Driver for White-Box Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/jdks.md&#34;&gt;Dealing with JDKs above version 8&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/console_output.md&#34;&gt;Console output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/library_dependencies.md&#34;&gt;Library dependencies for the generated tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/contribute.md&#34;&gt;How to contribute&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/for_developers.md&#34;&gt;Technical notes for developers contributing to EvoMaster&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Troubleshooting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/troubleshooting/windows.md&#34;&gt;Windows and networking&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;More Info &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/publications.md&#34;&gt;Academic papers related to EvoMaster&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/presentations.md&#34;&gt;Slides of presentations/seminars&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/replicating_studies.md&#34;&gt;Replicating studies&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Funding&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;EvoMaster&lt;/em&gt; has been funded by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2020-2025: a 2 million Euro grant by the European Research Council (ERC), as part of the &lt;em&gt;ERC Consolidator&lt;/em&gt; project &lt;i&gt;Using Evolutionary Algorithms to Understand and Secure Web/Enterprise Systems&lt;/i&gt;.&lt;/li&gt; &#xA; &lt;li&gt;2018-2021: a 7.8 million Norwegian Kroner grant by the Research Council of Norway (RCN), as part of the Frinatek project &lt;i&gt;Evolutionary Enterprise Testing&lt;/i&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://github.com/WebFuzzing/EvoMaster/raw/master/docs/img/LOGO_ERC-FLAG_EU_.jpg?raw=true&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;This project has received funding from the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation programme (grant agreement No 864972).&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;EvoMaster&lt;/em&gt;&#39;s source code is released under the LGPL (v3) license. For a list of the used third-party libraries, you can directly see the root &lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/pom.xml&#34;&gt;pom.xml&lt;/a&gt; file. For a list of code directly imported (and then possibly modified/updated) from other open-source projects, see &lt;a href=&#34;https://raw.githubusercontent.com/WebFuzzing/EvoMaster/master/docs/reused_code.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!--&#xA;### ![](https://www.yourkit.com/images/yklogo.png)&#xA;&#xA;YourKit supports open source projects with its full-featured Java Profiler.&#xA;YourKit, LLC is the creator of&#xA;&lt;a href=&#34;https://www.yourkit.com/java/profiler/&#34;&gt;YourKit Java Profiler&lt;/a&gt;&#xA;and&#xA;&lt;a href=&#34;https://www.yourkit.com/.net/profiler/&#34;&gt;YourKit .NET Profiler&lt;/a&gt;,&#xA;innovative and intelligent tools for profiling Java and .NET applications.&#xA;--&gt;</summary>
  </entry>
  <entry>
    <title>firebase/quickstart-android</title>
    <updated>2024-09-08T01:31:37Z</updated>
    <id>tag:github.com,2024-09-08:/firebase/quickstart-android</id>
    <link href="https://github.com/firebase/quickstart-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Firebase Quickstart Samples for Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Firebase Quickstarts for Android&lt;/h1&gt; &#xA;&lt;p&gt;A collection of quickstart samples demonstrating the Firebase APIs on Android. For more information, see &lt;a href=&#34;https://firebase.google.com&#34;&gt;https://firebase.google.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;You can open each of the following samples as an Android Studio project, and run them on a mobile device or a virtual device (AVD). When doing so you need to add each sample app you wish to try to a Firebase project on the &lt;a href=&#34;https://console.firebase.google.com&#34;&gt;Firebase console&lt;/a&gt;. You can add multiple sample apps to the same Firebase project. There&#39;s no need to create separate projects for each app.&lt;/p&gt; &#xA;&lt;p&gt;To add a sample app to a Firebase project, use the &lt;code&gt;applicationId&lt;/code&gt; value specified in the &lt;code&gt;app/build.gradle&lt;/code&gt; file of the app as the Android package name. Download the generated &lt;code&gt;google-services.json&lt;/code&gt; file, and copy it to the &lt;code&gt;app/&lt;/code&gt; directory of the sample you wish to run.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/admob/README.md&#34;&gt;Admob&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/analytics/README.md&#34;&gt;Analytics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/appdistribution/README.md&#34;&gt;App Distribution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/app-indexing/README.md&#34;&gt;App-Indexing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/auth/README.md&#34;&gt;Auth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/config/README.md&#34;&gt;Config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/crash/README.md&#34;&gt;Crash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/database/README.md&#34;&gt;Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/firestore/README.md&#34;&gt;Firestore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/functions/README.md&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/dynamiclinks/README.md&#34;&gt;Dynamic Links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/inappmessaging/README.md&#34;&gt;In-App Messaging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/messaging/README.md&#34;&gt;Messaging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/mlkit/README.md&#34;&gt;ML Kit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/mlkit-langid/README.md&#34;&gt;ML Kit LanguageID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/mlkit-smartreply/README.md&#34;&gt;ML Kit Smart Reply&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/mlkit-translate/README.md&#34;&gt;ML Kit Translate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/perf/README.md&#34;&gt;Performance Monitoring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/storage/README.md&#34;&gt;Storage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/vertexai/README.md&#34;&gt;Vertex AI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to make contributions?&lt;/h2&gt; &#xA;&lt;p&gt;Please read and follow the steps in the &lt;a href=&#34;https://raw.githubusercontent.com/firebase/quickstart-android/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/firebase/quickstart-android/actions&#34;&gt;&lt;img src=&#34;https://github.com/firebase/quickstart-android/workflows/Android%20CI/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ossbot.computer/samscore.html&#34;&gt;&lt;img src=&#34;https://ossbot.computer/samscorebadge?org=firebase&amp;amp;repo=quickstart-android&#34; alt=&#34;SAM Score&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>