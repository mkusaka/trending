<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-16T01:45:07Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>inotia00/VancedManager_v2</title>
    <updated>2022-07-16T01:45:07Z</updated>
    <id>tag:github.com,2022-07-16:/inotia00/VancedManager_v2</id>
    <link href="https://github.com/inotia00/VancedManager_v2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vanced Manager&lt;/h1&gt; &#xA;&lt;div&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/inotia00/VancedManager_v2/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/inotia00/VancedManager_v2/total.svg?style=for-the-badge&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/inotia00/VancedManager_v2/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/inotia00/VancedManager_v2.svg?style=for-the-badge&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Hi, when we released Vanced 15.05.54, people were upset because it used the .apks format, which was burdensome to install than a traditional .apk file. Even though we wrote clear instructions on how to install the new Vanced build, people still couldn&#39;t figure it out.&lt;/p&gt; &#xA;&lt;p&gt;Then we thought, &#34;why don&#39;t we make a manager for vanced, which will download, update and uninstall Vanced and MicroG, have an easy and user-friendly UI and be less than 10mb?&#34; and that&#39;s how Vanced Manager was born.&lt;/p&gt; &#xA;&lt;p&gt;After 3 months of development, we are finally ready to Introduce &lt;a href=&#34;https://github.com/inotia00/VancedManager_v2&#34;&gt;Vanced Manager v2&lt;/a&gt; to the masses!!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vanced manager can easily install and uninstall Vanced and MicroG.&lt;/li&gt; &#xA; &lt;li&gt;It has various settings for customization and better experience.&lt;/li&gt; &#xA; &lt;li&gt;The Manager comes with an easy-to-use Interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;div class=&#34;note&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE: &lt;/strong&gt;Background download/installation feature is no longer supported due to problems with some ROMs, please &lt;b&gt;DO NOT&lt;/b&gt; report issues regarding background activity.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- ##### Background download/installation feature is no longer supported due to problems with some ROMs, please do NOT report issues regarding background activity. --&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Pull Requests should be made to the &lt;a href=&#34;https://github.com/inotia00/VancedManager_v2&#34;&gt;Dev&lt;/a&gt; Branch as that is the working branch, master is for Release code only.&lt;/p&gt; &#xA;&lt;p&gt;For anyone who wants to provide translations please submit them to this &lt;a href=&#34;https://crowdin.com/project/vanced-manager&#34;&gt;link&lt;/a&gt; as we also use it for YouTube Vanced. Any issues with translations should be posted there too.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Clean up the ViewModel and DataModel code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Migrate to Jetpack Compose when it&#39;s officially released&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;div&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/inotia00/VancedManager_v2/actions/workflows/debug.yml&#34;&gt;&lt;img src=&#34;https://github.com/inotia00/VancedManager_v2/actions/workflows/debug.yml/badge.svg?branch=dev&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Using Android Studio&lt;/h2&gt; &#xA;&lt;p&gt;Clone the Repository, open it in Android Studio and build the application.&lt;/p&gt; &#xA;&lt;h2&gt;Google Advanced Protection Program&lt;/h2&gt; &#xA;&lt;p&gt;If you are using this feature on your Google account, you must either disable it or log out from your Google account before installing Youtube Vanced via Vanced Manager. The Google Advanced Protection Program does not allow the installation of apps from unknown sources. These security measures are tied to the protected account and not the device. After the installation, you will be able to log back in or enroll again into the program.&lt;/p&gt; &#xA;&lt;h2&gt;Using Command Line&lt;/h2&gt; &#xA;&lt;h4&gt;On Windows:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\gradlew.bat assembleDebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;On Linux/macOS:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x gradlew&#xA;./gradlew assembleDebug&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>SmartToolFactory/Compose-Image</title>
    <updated>2022-07-16T01:45:07Z</updated>
    <id>tag:github.com,2022-07-16:/SmartToolFactory/Compose-Image</id>
    <link href="https://github.com/SmartToolFactory/Compose-Image" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöÄüèûüí™ Collection of Images, Modifiers, utility functions for Jetpack Compose to expand and enrich displaying, manipulating, scaling, resizing, zooming, and more as soon as it&#39;s fresh from the kitchen&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Compose Image on Steroids&lt;/h1&gt; &#xA;&lt;p&gt;Collection of Images, Modifiers, utility functions for Jetpack Compose to expand and enrich displaying, manipulating, scaling, resizing, zooming, and getting cropped &lt;code&gt;ImageBitmap&lt;/code&gt; based on selection area&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/35650605/177950258-b9c122a9-b6df-422f-b03b-dcfe9a294b18.mp4&#34;&gt;https://user-images.githubusercontent.com/35650605/177950258-b9c122a9-b6df-422f-b03b-dcfe9a294b18.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ImageWithConstraints&lt;/h2&gt; &#xA;&lt;p&gt;A composable that lays out and draws a given &lt;code&gt;ImageBitmap&lt;/code&gt;. This will attempt to&lt;br&gt; size the composable according to the &lt;code&gt;ImageBitmap&lt;/code&gt;&#39;s given width and height.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ImageScope&lt;/code&gt; returns constraints, width and height of the drawing area based on &lt;code&gt;contentScale&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;and rectangle of &lt;code&gt;imageBitmap&lt;/code&gt; drawn. When a bitmap is displayed scaled to fit area of Composable&lt;/li&gt; &#xA; &lt;li&gt;space used for drawing image is represented with &lt;code&gt;ImageScope.imageWidth&lt;/code&gt; and&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ImageScope.imageHeight&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA; &lt;li&gt;When we display a bitmap 1000x1000px with &lt;code&gt;ContentScale.Crop&lt;/code&gt; if it&#39;s cropped to 500x500px&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ImageScope.rect&lt;/code&gt; returns &lt;code&gt;IntRect(250,250,750,750)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This composable enables building other &lt;code&gt;Image&lt;/code&gt; based Composables that require you to know spaces around &lt;code&gt;ImageBitmap&lt;/code&gt; with &lt;code&gt;ContentScale &lt;/code&gt; or which section of Bitmap is drawn to &lt;code&gt;Canvas&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun ImageWithConstraints(&#xA;    modifier: Modifier = Modifier,&#xA;    imageBitmap: ImageBitmap,&#xA;    alignment: Alignment = Alignment.Center,&#xA;    contentScale: ContentScale = ContentScale.Fit,&#xA;    contentDescription: String? = null,&#xA;    alpha: Float = DefaultAlpha,&#xA;    colorFilter: ColorFilter? = null,&#xA;    filterQuality: FilterQuality = DrawScope.DefaultFilterQuality,&#xA;    drawImage: Boolean = true,&#xA;    content: @Composable ImageScope.() -&amp;gt; Unit = {}&#xA;) {&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;returns &lt;code&gt;ImageScope&lt;/code&gt; which is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Stable&#xA;interface ImageScope {&#xA;    /**&#xA;     * The constraints given by the parent layout in pixels.&#xA;     *&#xA;     * Use [minWidth], [maxWidth], [minHeight] or [maxHeight] if you need value in [Dp].&#xA;     */&#xA;    val constraints: Constraints&#xA;&#xA;    /**&#xA;     * The minimum width in [Dp].&#xA;     *&#xA;     * @see constraints for the values in pixels.&#xA;     */&#xA;    val minWidth: Dp&#xA;&#xA;    /**&#xA;     * The maximum width in [Dp].&#xA;     *&#xA;     * @see constraints for the values in pixels.&#xA;     */&#xA;    val maxWidth: Dp&#xA;&#xA;    /**&#xA;     * The minimum height in [Dp].&#xA;     *&#xA;     * @see constraints for the values in pixels.&#xA;     */&#xA;    val minHeight: Dp&#xA;&#xA;    /**&#xA;     * The maximum height in [Dp].&#xA;     *&#xA;     * @see constraints for the values in pixels.&#xA;     */&#xA;    val maxHeight: Dp&#xA;&#xA;    /**&#xA;     * Width of area inside BoxWithConstraints that is scaled based on [ContentScale]&#xA;     * This is width of the [Canvas] draws [ImageBitmap]&#xA;     */&#xA;    val imageWidth: Dp&#xA;&#xA;    /**&#xA;     * Height of area inside BoxWithConstraints that is scaled based on [ContentScale]&#xA;     * This is height of the [Canvas] draws [ImageBitmap]&#xA;     */&#xA;    val imageHeight: Dp&#xA;&#xA;    /**&#xA;     * [IntRect] that covers boundaries of [ImageBitmap]&#xA;     */&#xA;    val rect: IntRect&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;drawImage param is to set whether this Composable should draw on Canvas. &lt;code&gt;ImageWithConstraints&lt;/code&gt; can be used not only for drawing but providing required info for its &lt;code&gt;content&lt;/code&gt; or child Composables so child can draw &lt;code&gt;ImageBitmap&lt;/code&gt; as required by developer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ImageWithThumbnail&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ImageWithThumbnail&lt;/code&gt; displays thumbnail of bitmap it draws in corner specified by &lt;code&gt;ThumbnailState.position&lt;/code&gt;. When touch position is close to thumbnail position if &lt;code&gt;ThumbnailState.dynamicPosition&lt;/code&gt; is set to true moves thumbnail to corner specified by &lt;code&gt;ThumbnailState.moveTo&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun ImageWithThumbnail(&#xA;    modifier: Modifier = Modifier,&#xA;    imageBitmap: ImageBitmap,&#xA;    contentScale: ContentScale = ContentScale.Fit,&#xA;    alignment: Alignment = Alignment.Center,&#xA;    contentDescription: String?,&#xA;    thumbnailState: ThumbnailState = rememberThumbnailState(),&#xA;    alpha: Float = DefaultAlpha,&#xA;    colorFilter: ColorFilter? = null,&#xA;    filterQuality: FilterQuality = DrawScope.DefaultFilterQuality,&#xA;    drawOriginalImage: Boolean = true,&#xA;    onDown: ((Offset) -&amp;gt; Unit)? = null,&#xA;    onMove: ((Offset) -&amp;gt; Unit)? = null,&#xA;    onUp: (() -&amp;gt; Unit)? = null,&#xA;    onThumbnailCenterChange: ((Offset) -&amp;gt; Unit)? = null,&#xA;    content: @Composable ImageScope.() -&amp;gt; Unit = {}&#xA;) {&#xA;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TransformLayout&lt;/h2&gt; &#xA;&lt;p&gt;Composable that changes scale of its content from handles, translates its position when dragged inside bounds&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun TransformLayout(&#xA;    modifier: Modifier = Modifier,&#xA;    enabled: Boolean = true,&#xA;    handleRadius: Dp = 15.dp,&#xA;    handlePlacement: HandlePlacement = HandlePlacement.Corner,&#xA;    onDown: (Transform) -&amp;gt; Unit = {},&#xA;    onMove: (Transform) -&amp;gt; Unit = {},&#xA;    onUp: (Transform) -&amp;gt; Unit = {},&#xA;    content: @Composable () -&amp;gt; Unit&#xA;) {&#xA;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MorphLayout&lt;/h2&gt; &#xA;&lt;p&gt;Composable that changes dimensions of its content from handles, translates its position when dragged inside bounds. When using be mindful about the parent composable that contains this Composable since maximum width and height this Composable depends on how a Composable, Column for instance, lays out its children. It can be expanded upto remaining space if other sibling occupy rest of the parent&#39;s available space&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun MorphLayout(&#xA;    modifier: Modifier = Modifier,&#xA;    containerModifier: Modifier = Modifier,&#xA;    enabled: Boolean = true,&#xA;    handleRadius: Dp = 15.dp,&#xA;    handlePlacement: HandlePlacement = HandlePlacement.Corner,&#xA;    updatePhysicalSize: Boolean = false,&#xA;    onDown: () -&amp;gt; Unit = {},&#xA;    onMove: (DpSize) -&amp;gt; Unit = {},&#xA;    onUp: () -&amp;gt; Unit = {},&#xA;    content: @Composable () -&amp;gt; Unit&#xA;) {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ZoomableImage&lt;/h2&gt; &#xA;&lt;p&gt;Zoomable image that zooms in and out in [ [minZoom], [maxZoom] ] interval and translates zoomed image based on pointer position. Double tap gestures reset image translation and zoom to default values with animation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun ZoomableImage(&#xA;    modifier: Modifier = Modifier,&#xA;    imageBitmap: ImageBitmap,&#xA;    alignment: Alignment = Alignment.Center,&#xA;    contentScale: ContentScale = ContentScale.Fit,&#xA;    contentDescription: String? = null,&#xA;    alpha: Float = DefaultAlpha,&#xA;    initialZoom: Float = 1f,&#xA;    minZoom: Float = 1f,&#xA;    maxZoom: Float = 5f,&#xA;    clipTransformToContentScale: Boolean = false,&#xA;    colorFilter: ColorFilter? = null,&#xA;    filterQuality: FilterQuality = DrawScope.DefaultFilterQuality,&#xA;) {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>skydoves/retrofit-adapters</title>
    <updated>2022-07-16T01:45:07Z</updated>
    <id>tag:github.com,2022-07-16:/skydoves/retrofit-adapters</id>
    <link href="https://github.com/skydoves/retrofit-adapters" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöÜ Retrofit adapters for modeling network responses with Kotlin Result, Jetpack Paging3, and Arrow Either.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Retrofit Adapters&lt;/h1&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=19&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-19%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves/retrofit-adapters/actions/workflows/android.yml&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/skydoves/retrofit-adapters/actions/workflows/android.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves&#34;&gt;&lt;img alt=&#34;Profile&#34; src=&#34;https://skydoves.github.io/badges/skydoves.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://skydoves.github.io/libraries/retrofit-adapters/html/index.html&#34;&gt;&lt;img alt=&#34;Dokka&#34; src=&#34;https://skydoves.github.io/badges/dokka-retrofit-adapters.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; üöÜ Retrofit adapters for modeling network responses with Kotlin Result, Jetpack Paging3, and Arrow Either. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/178486849-1dd506a6-79d8-4cc5-a986-56c69b3693cb.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Sandwich&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in a more specified and lightweight Monad sealed API library for modeling Retrofit responses and handling exceptions, check out &lt;a href=&#34;https://github.com/skydoves/sandwich&#34;&gt;Sandwich&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;90px&#34; src=&#34;https://user-images.githubusercontent.com/24237865/178630165-76855349-ac04-4474-8bcf-8eb5f8c41095.png&#34;&gt; &#xA;&lt;h2&gt;Kotlin&#39;s Result&lt;/h2&gt; &#xA;&lt;p&gt;This library allows you to model your Retrofit responses with &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-result/&#34;&gt;Kotlin&#39;s Result&lt;/a&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22com.github.skydoves%22%20AND%20a:%22retrofit-adapters-result%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/retrofit-adapters-result.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:retrofit-adapters-result:1.0.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ResultCallAdapterFactory&lt;/h3&gt; &#xA;&lt;p&gt;You can return &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-result/&#34;&gt;Kotlin&#39;s Result&lt;/a&gt; class to the Retrofit&#39;s service methods by setting &lt;code&gt;ResultCallAdapterFactory&lt;/code&gt; like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val retrofit: Retrofit = Retrofit.Builder()&#xA;    .baseUrl(&#34;BASE_URL&#34;)&#xA;    .addConverterFactory(..)&#xA;    .addCallAdapterFactory(ResultCallAdapterFactory.create())&#xA;    .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can return the &lt;code&gt;Result&lt;/code&gt; class with the suspend keyword.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;interface PokemonService {&#xA;&#xA;  @GET(&#34;pokemon&#34;)&#xA;  suspend fun fetchPokemonList(&#xA;    @Query(&#34;limit&#34;) limit: Int = 20,&#xA;    @Query(&#34;offset&#34;) offset: Int = 0&#xA;  ): Result&amp;lt;PokemonResponse&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you will get the network response, which is wrapped by the &lt;code&gt;Result&lt;/code&gt; class like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;viewModelScope.launch {&#xA;  val result = pokemonService.fetchPokemonList()&#xA;  if (result.isSuccess) {&#xA;    val data = result.getOrNull()&#xA;    // handle data&#xA;  } else {&#xA;    // handle error case&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unit Tests by Injecting TestScope&lt;/h3&gt; &#xA;&lt;p&gt;You can also inject your custom &lt;code&gt;CoroutineScope&lt;/code&gt; into the &lt;code&gt;ResultCallAdapterFactory&lt;/code&gt; and execute network requests on the scope.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val testDispatcher: TestDispatcher = UnconfinedTestDispatcher()&#xA;val testScope = TestScope(testDispatcher)&#xA;val retrofit: Retrofit = Retrofit.Builder()&#xA;  .baseUrl(&#34;BASE_URL&#34;)&#xA;  .addConverterFactory(..)&#xA;  .addCallAdapterFactory(ResultCallAdapterFactory.create(testScope))&#xA;  .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For more information about the Testing coroutines, check out the &lt;a href=&#34;https://developer.android.com/kotlin/coroutines/test&#34;&gt;Testing Kotlin coroutines on Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;130px&#34; src=&#34;https://user-images.githubusercontent.com/24237865/178630375-bedd3be4-8d1e-4ba4-bf25-2640a16fcf6c.png&#34;&gt; &#xA;&lt;h2&gt;Jetpack&#39;s Paging&lt;/h2&gt; &#xA;&lt;p&gt;This library allows you to return the paging source, which is parts of the Jetpack&#39;s &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/paging/v3-overview&#34;&gt;Paging library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22com.github.skydoves%22%20AND%20a:%22retrofit-adapters-paging%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/retrofit-adapters-paging.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:retrofit-adapters-paging:1.0.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PagingCallAdapterFactory&lt;/h3&gt; &#xA;&lt;p&gt;You can return Jetpack&#39;s &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/paging/PagingSource&#34;&gt;PagingSource&lt;/a&gt; class to the Retrofit&#39;s service methods by setting &lt;code&gt;PagingCallAdapterFactory&lt;/code&gt; like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val retrofit: Retrofit = Retrofit.Builder()&#xA;    .baseUrl(&#34;BASE_URL&#34;)&#xA;    .addConverterFactory(..)&#xA;    .addCallAdapterFactory(PagingCallAdapterFactory.create())&#xA;    .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can return the &lt;code&gt;NetworkPagingSource&lt;/code&gt; class with the &lt;code&gt;@PagingKeyConfig&lt;/code&gt; and &lt;code&gt;@PagingKey&lt;/code&gt; annotations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;interface PokemonService {&#xA;&#xA;  @GET(&#34;pokemon&#34;)&#xA;  @PagingKeyConfig(&#xA;    keySize = 20,&#xA;    mapper = PokemonPagingMapper::class&#xA;  )&#xA;  suspend fun fetchPokemonListAsPagingSource(&#xA;    @Query(&#34;limit&#34;) limit: Int = 20,&#xA;    @PagingKey @Query(&#34;offset&#34;) offset: Int = 0,&#xA;  ): NetworkPagingSource&amp;lt;PokemonResponse, Pokemon&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PagingKeyConfig and PagingKey&lt;/h3&gt; &#xA;&lt;p&gt;To return the &lt;code&gt;NetworkPagingSource&lt;/code&gt; class, you must attach the &lt;code&gt;@PagingKeyConfig&lt;/code&gt; and &lt;code&gt;@PagingKey&lt;/code&gt; annotations to your Retrofit&#39;s service methods.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;@PagingKeyConfig&lt;/strong&gt;: Contains paging configurations for the network request and delivery them to the call adapter internally. You should set the &lt;code&gt;keySize&lt;/code&gt; and &lt;code&gt;mapper&lt;/code&gt; parameters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;@PagingKey&lt;/strong&gt;: Marks the parameter in the service interface method as the paging key. This parameter will be paged by incrementing the page values continuously.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;PagingMapper&lt;/h2&gt; &#xA;&lt;p&gt;You should create a paging mapper class, which extends the &lt;code&gt;PagingMapper&amp;lt;T, R&amp;gt;&lt;/code&gt; interface like the below for transforming the original network response to the list of paging items. This class should be used in the &lt;code&gt;@PagingKeyConfig&lt;/code&gt; annotation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class PokemonPagingMapper : PagingMapper&amp;lt;PokemonResponse, Pokemon&amp;gt; {&#xA;&#xA;  override fun map(value: PokemonResponse): List&amp;lt;Pokemon&amp;gt; {&#xA;    return value.results&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will get the network response, which is wrapped by the &lt;code&gt;NetworkPagingSource&lt;/code&gt; class like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;viewModelScope.launch {&#xA;  val pagingSource = pokemonService.fetchPokemonListAsPagingSource()&#xA;  val pagerFlow = Pager(PagingConfig(pageSize = 20)) { pagingSource }.flow&#xA;  stateFlow.emitAll(pagerFlow)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you should call the &lt;code&gt;submitData&lt;/code&gt; method by your &lt;code&gt;PagingDataAdapter&lt;/code&gt; to bind the paging data. If you want to learn more about the Jetpack&#39;s Paging, check out the &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/paging/v3-overview&#34;&gt;Paging library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;110px&#34; src=&#34;https://user-images.githubusercontent.com/24237865/178630401-9d4472e0-3da2-4e94-8ff9-ee8d7d089df2.svg?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;Arrow&#39;s Either&lt;/h2&gt; &#xA;&lt;p&gt;This library allows you to model your Retrofit responses with &lt;a href=&#34;https://github.com/arrow-kt/arrow&#34;&gt;arrow-kt&lt;/a&gt;&#39;s &lt;a href=&#34;https://arrow-kt.io/docs/apidocs/arrow-core/arrow.core/-either/&#34;&gt;Either&lt;/a&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22com.github.skydoves%22%20AND%20a:%22retrofit-adapters-arrow%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/retrofit-adapters-arrow.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:retrofit-adapters-arrow:1.0.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;EitherCallAdapterFactory&lt;/h3&gt; &#xA;&lt;p&gt;You can return &lt;a href=&#34;https://arrow-kt.io/docs/apidocs/arrow-core/arrow.core/-either/&#34;&gt;Arrow&#39;s Either&lt;/a&gt; class to the Retrofit&#39;s service methods by setting &lt;code&gt;EitherCallAdapterFactory&lt;/code&gt; like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val retrofit: Retrofit = Retrofit.Builder()&#xA;    .baseUrl(&#34;BASE_URL&#34;)&#xA;    .addConverterFactory(..)&#xA;    .addCallAdapterFactory(EitherCallAdapterFactory.create())&#xA;    .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can return the &lt;code&gt;Either&lt;/code&gt; class with the suspend keyword.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;interface PokemonService {&#xA;&#xA;  @GET(&#34;pokemon&#34;)&#xA;  suspend fun fetchPokemonListAsEither(&#xA;    @Query(&#34;limit&#34;) limit: Int = 20,&#xA;    @Query(&#34;offset&#34;) offset: Int = 0&#xA;  ): Either&amp;lt;Throwable, PokemonResponse&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you will get the network response, which is wrapped by the &lt;code&gt;Either&lt;/code&gt; class like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;viewModelScope.launch {&#xA;  val either = pokemonService.fetchPokemonListAsEither()&#xA;  if (either.isRight()) {&#xA;    val data = either.orNull()&#xA;    // handle data&#xA;  } else {&#xA;    // handle error case&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unit Tests by Injecting TestScope&lt;/h3&gt; &#xA;&lt;p&gt;You can also inject your custom &lt;code&gt;CoroutineScope&lt;/code&gt; into the &lt;code&gt;EitherCallAdapterFactory&lt;/code&gt; and execute network requests on the scope.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val testDispatcher: TestDispatcher = UnconfinedTestDispatcher()&#xA;val testScope = TestScope(testDispatcher)&#xA;val retrofit: Retrofit = Retrofit.Builder()&#xA;  .baseUrl(&#34;BASE_URL&#34;)&#xA;  .addConverterFactory(..)&#xA;  .addCallAdapterFactory(EitherCallAdapterFactory.create(testScope))&#xA;  .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For more information about the Testing coroutines, check out the &lt;a href=&#34;https://developer.android.com/kotlin/coroutines/test&#34;&gt;Testing Kotlin coroutines on Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Find this repository useful? &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Support it by joining &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves/retrofit-adapters/stargazers&#34;&gt;stargazers&lt;/a&gt;&lt;/strong&gt; for this repository. &lt;span&gt;‚≠ê&lt;/span&gt; &lt;br&gt; Also, &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves&#34;&gt;follow me&lt;/a&gt;&lt;/strong&gt; on GitHub for my next creations! ü§©&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;Designed and developed by 2022 skydoves (Jaewoong Eum)&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>