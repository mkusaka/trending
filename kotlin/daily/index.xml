<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-22T01:35:08Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YuKongA/Updater</title>
    <updated>2023-12-22T01:35:08Z</updated>
    <id>tag:github.com,2023-12-22:/YuKongA/Updater</id>
    <link href="https://github.com/YuKongA/Updater" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[APP] 一个简单的 HyperOS/MIUI 更新链接获取软件&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://socialify.git.ci/YuKongA/Updater/image?description=1&amp;amp;descriptionEditable=%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%20HyperOS%2FMIUI%20%E6%9B%B4%E6%96%B0%E9%93%BE%E6%8E%A5%E8%8E%B7%E5%8F%96%E8%BD%AF%E4%BB%B6&amp;amp;language=1&amp;amp;name=1&amp;amp;owner=1&amp;amp;theme=Auto&#34; alt=&#34;Updater&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notes:&lt;/h2&gt; &#xA;&lt;p&gt;无论是否登录, 都可以查看服务器上已存在版本的基础信息&lt;/p&gt; &#xA;&lt;p&gt;通过 v1 接口 (未登录小米账号状态) 可获取正式版下载链接&lt;/p&gt; &#xA;&lt;p&gt;使用 v2 接口 (登陆拥有权限的小米账号) 可获取开发版下载链接&lt;/p&gt; &#xA;&lt;h2&gt;Instructions for use:&lt;/h2&gt; &#xA;&lt;p&gt;正式版后缀:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;S/T/U (安卓版本)&#xA;NC/NB/MA/.. (机型内部代号)&#xA;CN/TW/MI/IN/KR/JP/TR/RU/.. (地区版本)&#xA;XM/DM/CC/.. (运营商版本)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;示例:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;以 &lt;b&gt;小米 14&lt;/b&gt;, 版本号 &lt;b&gt;OS1.0.26.0.UNCCNXM&lt;/b&gt; 为例, 其中: &lt;br&gt; U = Android14(U), NC = 内部代号(C=3, N 世代 3 等机), CN = 中国, XM = 全网通&lt;/p&gt; &#xA; &lt;p&gt;以 &lt;b&gt;小米 14 Pro&lt;/b&gt;, 版本号 &lt;b&gt;OS1.0.27.0.UNBCNXM&lt;/b&gt; 为例, 其中: &lt;br&gt; U = Android14(U), NB = 内部代号(B=2, N 世代 2 等机), CN = 中国, XM = 全网通&lt;/p&gt; &#xA; &lt;p&gt;以 &lt;b&gt;小米 13 Ultra&lt;/b&gt;, 版本号 &lt;b&gt;V14.0.5.0.TMAMIXM&lt;/b&gt; 为例, 其中: &lt;br&gt; T = Android13(T), MA = 内部代号(A=1, M 世代 1 等机), MI = 全球, XM = 全网通&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;设备代号后缀:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;设备代号: 中国正式版, 中国开发版公测&#xA;设备代号_pre: 中国开发版内测&#xA;设备代号_global: 全球正式版&#xA;设备代号_pre_global: 全球开发版内测&#xA;设备代号_国家地区代码_global: 国家/地区专属正式版&#xA;设备代号_pre_国家地区代码_global: 国家/地区专属开发版内测&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;已知国家/地区相关后缀：&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&#34;_global&#34;, &#34;_eea_global&#34;, &#34;_pre_eea_global&#34;, &#34;_pre_eea_miui15_global&#34;, &#34;_h3g_global&#34;, &#34;_eea_hg_global&#34;, &#34;_eea_ee_global&#34;, &#34;_pre_eea_ee_global&#34;, &#34;_eea_or_global&#34;, &#34;_eea_tf_global&#34;, &#34;_eea_by_global&#34;, &#34;_eea_vf_global&#34;, &#34;_eea_sf_global&#34;, &#34;_eea_ti_global&#34;, &#34;_ru_global&#34;, &#34;_pre_ru_global&#34;, &#34;_in_global&#34;, &#34;_pre_in_global&#34;, &#34;in_global&#34;, &#34;_in_fk_global&#34;, &#34;_in_jo_global&#34;, &#34;in_in_global&#34;, &#34;_id_global&#34;, &#34;_pre_id_global&#34;, &#34;_tr_global&#34;, &#34;_pre_tr_global&#34;, &#34;_kr_global&#34;, &#34;_kr_gu_global&#34;, &#34;_kr_kt_global&#34;, &#34;_kr_sk_global&#34;, &#34;_jp_global&#34;, &#34;_jp_kd_global&#34;, &#34;_jp_sb_global&#34;, &#34;_jp_rk_global&#34;, &#34;_tw_global&#34;, &#34;_pre_tw_global&#34;, &#34;_global&#34;, &#34;_tw_global&#34;, &#34;_eea_global&#34;, &#34;_ru_global&#34;, &#34;_id_global&#34;, &#34;_in_global&#34;, &#34;in_global&#34;, &#34;_in_fk_global&#34;, &#34;_kr_global&#34;, &#34;in_in_global&#34;, &#34;_tr_global&#34;, &#34;_jp_global&#34;, &#34;_mx_global&#34;, &#34;_lm_global&#34;, &#34;_th_global&#34;, &#34;_pe_global&#34;, &#34;_za_global&#34;, &#34;_jp_kd_global&#34;, &#34;_kr_gu_global&#34;, &#34;_kr_kt_global&#34;, &#34;_kr_sk_global&#34;, &#34;_h3g_global&#34;, &#34;_eea_hg_global&#34;, &#34;_eea_or_global&#34;, &#34;_eea_tf_global&#34;, &#34;_eea_by_global&#34;, &#34;_eea_vf_global&#34;, &#34;_mx_tc_global&#34;, &#34;_mx_at_global&#34;, &#34;_lm_cr_global&#34;, &#34;_cl_en_global&#34;, &#34;_cl_global&#34;, &#34;_eea_sf_global&#34;, &#34;_eea_ti_global&#34;, &#34;_th_as_global&#34;, &#34;_lm_ms_global&#34;, &#34;_pe_ms_global&#34;, &#34;_za_vc_global&#34;, &#34;_za_mt_global&#34;, , &#34;_pre_dpp_global&#34;, &#34;_dev_soter_global&#34;, &#34;_dc_global&#34;, &#34;_test_pre_global&#34;, &#34;_pre_miui14_global&#34;, &#34;_pre_miui15_global&#34;, &#34;_mx_global&#34;, &#34;_lm_global&#34;, &#34;_th_global&#34;, &#34;_pe_global&#34;, &#34;_za_global&#34;, &#34;_mx_tc_global&#34;, &#34;_mx_at_global&#34;, &#34;_pre_mx_tc_global&#34;, &#34;_pre_mx_at_global&#34;, &#34;_lm_cr_global&#34;, &#34;_cl_en_global&#34;, &#34;_pre_cl_en_global&#34;, &#34;_cl_global&#34;, &#34;_th_as_global&#34;, &#34;_lm_ms_global&#34;, &#34;_lm_cr_global&#34;, &#34;_pre_lm_cr_global&#34;, &#34;_pe_ms_global&#34;, &#34;_za_vc_global&#34;, &#34;_za_mt_global&#34;, &#34;_it_tim_global&#34;, &#34;_it_vodafone_global&#34;, &#34;_mx_telcel_global&#34;, &#34;_es_vodafone_global&#34;, &#34;_dck_global&#34;, &#34;_gpp_pre_global&#34;, &#34;_gt_tg_global&#34;, &#34;_gt_global&#34;, &#34;_gpp_global&#34;, &#34;_qc_global&#34;, &#34;_mcaas_global&#34;, &#34;_cl_wom_global&#34;, &#34;_cl_movistar_global&#34;, &#34;_ita_vodafone_global&#34;, &#34;_tr_turkcell_global&#34;, &#34;_p70_global&#34;, &#34;_fr_orange_global&#34;, &#34;_wlnd_global&#34;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;其他已知后缀 (2023/12/16):&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&#34;_pre&#34;, &#34;_factory&#34;, &#34;_demo&#34;, &#34;_ep_yunke&#34;, &#34;_soter&#34;, &#34;_mfw&#34;, &#34;_pre_miui14&#34;, &#34;_pre_miui15&#34;, &#34;_dev_soter&#34;, &#34;_shxc&#34;, &#34;_stable_soter&#34;, &#34;_hi25&#34;, &#34;_by&#34;, &#34;_qiy&#34;, &#34;_tianyi&#34;, &#34;_tq&#34;, &#34;_xman&#34;, &#34;_yh&#34;, &#34;_yfan&#34;, &#34;_new&#34;, &#34;_3sat&#34;, &#34;_beta&#34;, &#34;_dev&#34;, &#34;_gajw&#34;, &#34;_zc360&#34;, &#34;zq_360&#34;, &#34;_pre_wechat&#34;, &#34;_mtk&#34;, &#34;_nio&#34;, &#34;_bs&#34;, &#34;_clb&#34;, &#34;_gq&#34;, &#34;_hhxa&#34;, &#34;_hwl&#34;, &#34;_justsafed&#34;, &#34;_mdsw&#34;, &#34;_ntb&#34;, &#34;_xiuyixiu&#34;, &#34;_hi2&#34;, &#34;_test&#34;, &#34;_gpp_pre&#34;, &#34;_gpp&#34;, &#34;_pre_7475vbl&#34;, &#34;_pre_dpp&#34;, &#34;_pre_gpp&#34;, &#34;_chenfeng&#34;, &#34;_dameng&#34;, &#34;_ahjw&#34;, &#34;_cqjw&#34;, &#34;_didi&#34;, &#34;_hbjw&#34;, &#34;_hnjwxd&#34;, &#34;_hnxdjw&#34;, &#34;_jili&#34;, &#34;_lnjw&#34;, &#34;_scjw&#34;, &#34;_sjt&#34;, &#34;_tianshanjw&#34;, &#34;_tangshanjw&#34;, &#34;_wanguo&#34;, &#34;_whjw&#34;, &#34;_ydjw&#34;, &#34;_yunnanjw&#34;, &#34;_yunke&#34;, &#34;_camera&#34;, &#34;_port&#34;, &#34;_aikesai&#34;, &#34;_aochuang&#34;, &#34;_hujing&#34;, &#34;_kplus&#34;, &#34;_ldrh&#34;, &#34;_liuniu&#34;, &#34;_lsjw&#34;, &#34;_qsh&#34;, &#34;_tl&#34;, &#34;_tly&#34;, &#34;_tongzhou&#34;, &#34;_tongzhuo&#34;, &#34;_wd&#34;, &#34;_stable_cmcc&#34;, &#34;_stable_cmcc01&#34;, &#34;_stable_ct&#34;, &#34;_ep_stdee&#34;, &#34;_ep_xy&#34;, &#34;_ep_kywl&#34;, &#34;_ep_cqrcb&#34;, &#34;_ep_ec&#34;, &#34;_ep_sxht&#34;, &#34;_ep_yfan&#34;, &#34;_ep_yx&#34;, &#34;_ep_stdce&#34;, &#34;_ep_xdja&#34;, &#34;_ep_litee&#34;, &#34;_ep_yy&#34;, &#34;_ep_by&#34;, &#34;_ep_tq&#34;, &#34;_ep_ui&#34;, &#34;_ep_wosq&#34;, &#34;_ep_xzm&#34;, &#34;_ep_dhao&#34;, &#34;_ep_qiy&#34;, &#34;_ep_tly&#34;, &#34;_ep_tlkj&#34;, &#34;_ep_zc&#34;, &#34;_ep_zdjt&#34;, &#34;_ep_zzyglkg&#34;, &#34;_ep_zyyglkg&#34;, &#34;_ep_zzybp&#34;, &#34;_ep_sdlybjcg&#34;, &#34;_ep_justsafe&#34;, &#34;_ep_justsafed&#34;, &#34;_ep_nio&#34;, &#34;_ep_txzx&#34;, &#34;_ep_dameng&#34;, &#34;_ep_yxyun&#34;, &#34;_ep_hujing&#34;, &#34;_ep_jwm&#34;, &#34;_ep_daote&#34;, &#34;_ep_jd&#34;, &#34;_ep_tpkj&#34;, &#34;_ep_tjzf&#34;, &#34;_ep_tpybx&#34;, &#34;_ep_bds&#34;, &#34;_ep_hfw&#34;, &#34;_ep_hn&#34;, &#34;_ep_jyrj&#34;, &#34;_ep_xysw&#34;, &#34;_guazi&#34;, &#34;_cf&#34;, &#34;_gaotu&#34;, &#34;_gz&#34;, &#34;_hkdw&#34;, &#34;_huaxun&#34;, &#34;_jds&#34;, &#34;_jlxf&#34;, &#34;_wanglong&#34;, &#34;_wlnd&#34;, &#34;_yhai&#34;, &#34;_yuxun&#34;, &#34;_zkcd&#34;, &#34;_cm&#34;, &#34;_ct&#34;, &#34;_beike&#34;, &#34;_yf&#34;, &#34;_yskj&#34;, &#34;_zyb&#34;, &#34;_ep_rb&#34;, &#34;_dxo&#34;, &#34;_yaohui&#34;, &#34;_bcwl&#34;, &#34;_czht&#34;, &#34;_txzx&#34;, &#34;_ep_daotetest&#34;, &#34;_jkpd_factory&#34;, &#34;_miui13_pre&#34;, &#34;_test_pre&#34;, &#34;_hmh&#34;, &#34;_rrc&#34;, &#34;_zy&#34;, &#34;_ep_sdlyjcb&#34;, &#34;_pre_ep_stdee&#34;, &#34;_haozu&#34;, &#34;_szkx&#34;, &#34;_xmzy&#34;, &#34;_yhhl&#34;, &#34;_huatian&#34;, &#34;_mcaas&#34;, &#34;_qkzq&#34;, &#34;_qzxx&#34;, &#34;_shzl&#34;, &#34;_sjyc&#34;, &#34;_gzdt&#34;, &#34;_lls&#34;, &#34;_miui_factory&#34;, &#34;_shrq&#34;, &#34;_shrx&#34;, &#34;_taier&#34;, &#34;_tmg&#34;, &#34;wuweilab&#34;, &#34;_cmcc&#34;, &#34;_ajy&#34;, &#34;_dp&#34;, &#34;_zjzy&#34;, &#34;_fs&#34;, &#34;_langtuo&#34;, &#34;_ep_gy58tc&#34;, &#34;_ep_jds&#34;, &#34;_ep_yhai&#34;, &#34;_zhutai&#34;, &#34;_bb2021&#34;, &#34;ep_czht&#34;, &#34;_ep_mjwxns&#34;, &#34;_ep_qdyh&#34;, &#34;_research&#34;, &#34;_sdlybjcg&#34;, &#34;_8475_pre&#34;, &#34;_ep_sbgl&#34;, &#34;_miui_demo_factory&#34;, &#34;_bindsim&#34;, &#34;_ent_ct&#34;, &#34;_fxtc&#34;, &#34;_gzxc&#34;, &#34;_dqgx&#34;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Credits:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YuKongA/Xiaomi-Update-Info&#34;&gt;Xiaomi-Update-Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/francescotescari/XiaoMiToolV2&#34;&gt;XiaoMiToolV2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CMDQ8575/Xiaomi-Community-AutoTask&#34;&gt;Xiaomi-Community-AutoTask&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More:&lt;/h2&gt; &#xA;&lt;p&gt;关于&lt;strong&gt;设备代号&lt;/strong&gt;(&lt;em&gt;&#34;Code name&#34;&lt;/em&gt;), 请参阅: &lt;a href=&#34;https://github.com/KHwang9883/MobileModels/raw/master/brands/xiaomi.md&#34;&gt;小米手机型号汇总&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;关于&lt;strong&gt;国家地区代码&lt;/strong&gt;(&lt;em&gt;&#34;Country codes&#34;&lt;/em&gt;), 请参阅: &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_3166-2#Current_codes&#34;&gt;ISO 3166-2&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HuolalaTech/batteryfinder-android</title>
    <updated>2023-12-22T01:35:08Z</updated>
    <id>tag:github.com,2023-12-22:/HuolalaTech/batteryfinder-android</id>
    <link href="https://github.com/HuolalaTech/batteryfinder-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A detection tool of Android App power consumption&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HuolalaTech/batteryfinder-android/master/README_English.md&#34;&gt;English Readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BatteryFinder&lt;/h1&gt; &#xA;&lt;p&gt;如果你的App还在为高耗电而被用户投诉，却无法知道是哪里引发了高耗电，那么这款耗电检测工具BatteryFinder(电源探测者)应该可以帮到你。 它利用了编译时插桩的机制，将必要的功耗api进行hook，同时通过耗电基准文件进行加权得到耗电量，同时可通过堆栈打印，调用者跟踪等等分析手段 帮助开发者发现异常功耗问题。&lt;/p&gt; &#xA;&lt;p&gt;目前支持：定位，蓝牙，Alarm，PowerWakeLock，WifiWakeLock，Sensor等多层次功耗检测&lt;/p&gt; &#xA;&lt;h2&gt;详细介绍&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7311343224546574346&#34;&gt;https://juejin.cn/post/7311343224546574346&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用介绍&lt;/h2&gt; &#xA;&lt;h3&gt;编译引入插件&lt;/h3&gt; &#xA;&lt;p&gt;《声明》由于目前业务项目还在AGP版本还在7以下，所以当前仅支持7以下的插件，后续补充7以上的插件&lt;/p&gt; &#xA;&lt;p&gt;根目录build.gradle中配置插件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;classpath &#39;cn.huolala:batteryplugin:1.0.2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;gradle 配置&lt;/h3&gt; &#xA;&lt;p&gt;使用module中build.gradle里面添加插件依赖即可&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apply plugin: &#39;com.battery.plugins&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;同时选择开启插桩的类型，见app 中build.gradle&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;BatteryHookConfig{&#xA;// 因为以下涉及到hook操作，可根据配置进行是否开启，true则开启，默认都是false不开启&#xA;// Alarm闹钟 &#xA;  alarm = true   &#xA;//传感器&#xA;  sensor = true  &#xA;//蓝牙&#xA;  blueTooth = true &#xA;//定位&#xA;  location = true &#xA;//wakelock&#xA;  powerWakeLock = true &#xA;  wifiWakeLock = true  、&#xA;// 设置不插桩的classname&#xA;  whiteList = [&#39;whiteList1&#39;,&#39;whiteList2&#39;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;使用module中添加aar依赖&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;implementation &#39;cn.huolala:batteryapi:1.0.2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;必要的框架初始化设置&lt;/h3&gt; &#xA;&lt;h4&gt;step1&lt;/h4&gt; &#xA;&lt;p&gt;在Application 中进行必要的设置（几乎无损耗）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; BatteryFinderDataCenter.setConfig(&#xA;            // 是否是debug&#xA;            DataConfig.Builder()&#xA;                // 是否是debug模式，用于框架内部排查&#xA;                .setIsDebug(false)&#xA;                // 可选 是否记录多进程模式下的数据【仅支持定位】&#xA;                .setIsOpenIPC(true)&#xA;                // 是否运行打开耗电计算，可用于线上开关配置&#xA;                .setIsOpenBatteryFinder(true)&#xA;                // 是否打开堆栈跟踪，打开后会记录堆栈，如果用在频繁函数，存在一定的堆栈记录损耗&#xA;                .setOpenStackTrace(true)&#xA;                // 设置达到次数后才回调，0就是立即回调，配置设置于定位 【以下推荐默认值即可】&#xA;                .setLocationInvokeTime(0)&#xA;                // 等同于上，设置蓝牙达到次数&#xA;                .setBlueToothInvokeTime(0)&#xA;                // 等同于上，设置sensor达到次数&#xA;                .setSensorInvokeTime(0)&#xA;                // 等同于上，设置wakelock 达到次数&#xA;                .setPowerWakeLockInvokeTime(0)&#xA;                .setWifiWakeLockInvokeTime(0)&#xA;                // alarm 调度次数&#xA;                .setAlarmInvokeTime(0)&#xA;                .build()&#xA;        )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;step2&lt;/h4&gt; &#xA;&lt;p&gt;设置自己需要的基准电源文件（power_profile.xml）&lt;/p&gt; &#xA;&lt;p&gt;在assets中放入power_profile.xml文件，如果不关心具体机型差异带来的功耗差异表现，可以直接用demo项目中的power_profile.xml文件，位于（app/src/main/assets）中&lt;/p&gt; &#xA;&lt;p&gt;如果需要机型特定的power_profile.xml文件，可以通过反编译获取手机的&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;adb pull /system/framework/framework-res.apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;通过反编译framework-res.apk获取power_profile文件，放入assets即可&lt;/p&gt; &#xA;&lt;h4&gt;step3&lt;/h4&gt; &#xA;&lt;p&gt;定义一个实现DataChangeInvoke的类，里面可以选择复写方法，当有对应的数据来时，就会通过spi机制回调，参考【DemoInvoker】&lt;/p&gt; &#xA;&lt;p&gt;比如调用requestLocationUpdates时 或者removeUpdates 时，都会回调一次onLocationInvoke，在里面可以获取功耗数据&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;override fun onLocationInvoke(&#xA;recordState: InvokeState,&#xA;locationReportData: LocationReportData,&#xA;batteryData: BatteryData,&#xA;cpuStatData: CpuStatData&#xA;) {&#xA;   super.onLocationInvoke(recordState, locationReportData, batteryData, cpuStatData)&#xA;   Log.e(&#34;demo_battery_finder&#34;,&#34;耗电量 已完成 + 记录中 ${locationReportData.getCurrentBatteryConsume()}&#34;)&#xA;   Log.e(&#34;demo_battery_finder&#34;,&#34;耗电量已完成 ${locationReportData.getRecordedBatteryConsume()}&#34;)&#xA;   Log.e(&#34;demo_battery_finder&#34;,&#34;耗电量记录中 ${locationReportData.getRecordingBatteryConsume()}&#34;)&#xA;   Log.e(&#34;demo_battery_finder&#34;,&#34;$recordState $locationReportData&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后通过Android 标准SPI流程，在resources/META-INF/services/ 下建立一个com.battery.api.DataChangeInvoker文件，里面内容填写为自定义的实现DataChangeInvoke类名即可，可参考app目录&lt;/p&gt; &#xA;&lt;h2&gt;回调参数&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;数据类&lt;/th&gt; &#xA;   &lt;th&gt;含义&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AlarmData&lt;/td&gt; &#xA;   &lt;td&gt;记录闹钟的数据类，以下几类闹钟均被记录 setAlarmClock setExact setExactAndAllowWhileIdle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BatteryData&lt;/td&gt; &#xA;   &lt;td&gt;通过广播记录的整机耗电，作为排查辅助&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScreenData&lt;/td&gt; &#xA;   &lt;td&gt;前台屏幕使用时间数据&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BlueToothData&lt;/td&gt; &#xA;   &lt;td&gt;蓝牙使用时间与扫描模式ScanSettings 等&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CpuStatData&lt;/td&gt; &#xA;   &lt;td&gt;通过读取/proc/self/stat 获取当前的cpu数据，作为排查辅助&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LocationReportData&lt;/td&gt; &#xA;   &lt;td&gt;持续定位耗电数据 包含多个子数据LocationBaseData&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LocationBaseData&lt;/td&gt; &#xA;   &lt;td&gt;持续定位耗电子数据 以一个listener/pending intent为维度记录&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SensorData&lt;/td&gt; &#xA;   &lt;td&gt;传感器数据，使用时长/精度&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WakeLockData&lt;/td&gt; &#xA;   &lt;td&gt;PowerWakeLock与WifiWakeLock等通用数据，记录使用时常，次数等&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;项目层级介绍&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;app下是使用例子&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lib_battery_api 是api层调用，也是hook的具体实现&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lib_battery_plugin 是asm 插桩的具体实现&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;问题交流&lt;/h2&gt; &#xA;&lt;p&gt;如果你发现了bug或者有其他功能诉求，欢迎提issue。 如果想贡献代码，可以直接发起PR。&lt;/p&gt; &#xA;&lt;h2&gt;环境准备&lt;/h2&gt; &#xA;&lt;p&gt;建议直接用最新的稳定版本Android Studio打开工程.&lt;/p&gt; &#xA;&lt;h2&gt;许可证&lt;/h2&gt; &#xA;&lt;p&gt;采用Apache 2.0协议，详情参考&lt;a href=&#34;https://raw.githubusercontent.com/HuolalaTech/batteryfinder-android/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>