<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-20T01:37:30Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JakeWharton/timber</title>
    <updated>2023-01-20T01:37:30Z</updated>
    <id>tag:github.com,2023-01-20:/JakeWharton/timber</id>
    <link href="https://github.com/JakeWharton/timber" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A logger with a small, extensible API which provides utility on top of Android&#39;s normal Log class.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JakeWharton/timber/trunk/logo.png&#34; alt=&#34;Timber&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a logger with a small, extensible API which provides utility on top of Android&#39;s normal &lt;code&gt;Log&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;I copy this class into all the little apps I make. I&#39;m tired of doing it. Now it&#39;s a library.&lt;/p&gt; &#xA;&lt;p&gt;Behavior is added through &lt;code&gt;Tree&lt;/code&gt; instances. You can install an instance by calling &lt;code&gt;Timber.plant&lt;/code&gt;. Installation of &lt;code&gt;Tree&lt;/code&gt;s should be done as early as possible. The &lt;code&gt;onCreate&lt;/code&gt; of your application is the most logical choice.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;DebugTree&lt;/code&gt; implementation will automatically figure out from which class it&#39;s being called and use that class name as its tag. Since the tags vary, it works really well when coupled with a log reader like &lt;a href=&#34;http://github.com/JakeWharton/pidcat/&#34;&gt;Pidcat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are no &lt;code&gt;Tree&lt;/code&gt; implementations installed by default because every time you log in production, a puppy dies.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Two easy steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install any &lt;code&gt;Tree&lt;/code&gt; instances you want in the &lt;code&gt;onCreate&lt;/code&gt; of your application class.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;Timber&lt;/code&gt;&#39;s static methods everywhere throughout your app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Check out the sample app in &lt;code&gt;timber-sample/&lt;/code&gt; to see it in action.&lt;/p&gt; &#xA;&lt;h2&gt;Lint&lt;/h2&gt; &#xA;&lt;p&gt;Timber ships with embedded lint rules to detect problems in your app.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TimberArgCount&lt;/strong&gt; (Error) - Detects an incorrect number of arguments passed to a &lt;code&gt;Timber&lt;/code&gt; call for the specified format string.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Example.java:35: Error: Wrong argument count, format string Hello %s %s! requires 2 but format call supplies 1 [TimberArgCount]&#xA;    Timber.d(&#34;Hello %s %s!&#34;, firstName);&#xA;    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TimberArgTypes&lt;/strong&gt; (Error) - Detects arguments which are of the wrong type for the specified format string.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Example.java:35: Error: Wrong argument type for formatting argument &#39;#0&#39; in success = %b: conversion is &#39;b&#39;, received String (argument #2 in method call) [TimberArgTypes]&#xA;    Timber.d(&#34;success = %b&#34;, taskName);&#xA;                             ~~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TimberTagLength&lt;/strong&gt; (Error) - Detects the use of tags which are longer than Android&#39;s maximum length of 23.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Example.java:35: Error: The logging tag can be at most 23 characters, was 35 (TagNameThatIsReallyReallyReallyLong) [TimberTagLength]&#xA;    Timber.tag(&#34;TagNameThatIsReallyReallyReallyLong&#34;).d(&#34;Hello %s %s!&#34;, firstName, lastName);&#xA;    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LogNotTimber&lt;/strong&gt; (Warning) - Detects usages of Android&#39;s &lt;code&gt;Log&lt;/code&gt; that should be using &lt;code&gt;Timber&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Example.java:35: Warning: Using &#39;Log&#39; instead of &#39;Timber&#39; [LogNotTimber]&#xA;    Log.d(&#34;Greeting&#34;, &#34;Hello &#34; + firstName + &#34; &#34; + lastName + &#34;!&#34;);&#xA;        ~&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;StringFormatInTimber&lt;/strong&gt; (Warning) - Detects &lt;code&gt;String.format&lt;/code&gt; used inside of a &lt;code&gt;Timber&lt;/code&gt; call. Timber handles string formatting automatically.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Example.java:35: Warning: Using &#39;String#format&#39; inside of &#39;Timber&#39; [StringFormatInTimber]&#xA;    Timber.d(String.format(&#34;Hello, %s %s&#34;, firstName, lastName));&#xA;             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;BinaryOperationInTimber&lt;/strong&gt; (Warning) - Detects string concatenation inside of a &lt;code&gt;Timber&lt;/code&gt; call. Timber handles string formatting automatically and should be preferred over manual concatenation.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Example.java:35: Warning: Replace String concatenation with Timber&#39;s string formatting [BinaryOperationInTimber]&#xA;    Timber.d(&#34;Hello &#34; + firstName + &#34; &#34; + lastName + &#34;!&#34;);&#xA;             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TimberExceptionLogging&lt;/strong&gt; (Warning) - Detects the use of null or empty messages, or using the exception message when logging an exception.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Example.java:35: Warning: Explicitly logging exception message is redundant [TimberExceptionLogging]&#xA;     Timber.d(e, e.getMessage());&#xA;                 ~~~~~~~~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {&#xA;  mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;  implementation &#39;com.jakewharton.timber:timber:5.0.1&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Documentation is available at &lt;a href=&#34;https://jakewharton.github.io/timber/docs/5.x/&#34;&gt;jakewharton.github.io/timber/docs/5.x/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Snapshots of the development version are available in Sonatype&#39;s snapshots repository.&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {&#xA;  mavenCentral()&#xA;  maven {&#xA;    url &#39;https://oss.sonatype.org/content/repositories/snapshots/&#39;&#xA;  }&#xA;}&#xA;&#xA;dependencies {&#xA;  implementation &#39;com.jakewharton.timber:timber:5.1.0-SNAPSHOT&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Snapshot documentation is available at &lt;a href=&#34;https://jakewharton.github.io/timber/docs/latest/&#34;&gt;jakewharton.github.io/timber/docs/latest/&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2013 Jake Wharton&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>