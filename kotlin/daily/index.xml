<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-18T01:38:08Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>appmattus/certificatetransparency</title>
    <updated>2023-02-18T01:38:08Z</updated>
    <id>tag:github.com,2023-02-18:/appmattus/certificatetransparency</id>
    <link href="https://github.com/appmattus/certificatetransparency" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Certificate transparency for Android and JVM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Certificate transparency for Android and JVM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/appmattus/certificatetransparency/actions&#34;&gt;&lt;img src=&#34;https://github.com/appmattus/certificatetransparency/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/appmattus/certificatetransparency&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/appmattus/certificatetransparency/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/search?q=g:com.appmattus.certificatetransparency&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.appmattus.certificatetransparency/certificatetransparency&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To protect our apps from man-in-the-middle attacks one of the first things that usually springs to mind is certificate pinning. However, the issues of certificate pinning are numerous. Firstly deciding on a reliable set of keys to pin against is tough. Once you made that decision if your expectations don&#39;t match reality your users suffer from not being able to access your app or website. Smashing Magazine learnt about this the hard way in late 2016 when they blocked users access for up to a year because of a mismatch between the pins and the certificates. On mobile fixing an invalid pin means pushing out a new version of an app which can still take a while to reach every user.&lt;/p&gt; &#xA;&lt;p&gt;So with certificate pinning falling out of favour, what should you do? The new kid in town is &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/appmattus/certificatetransparency/main/docs/what-is-certificate-transparency.md&#34;&gt;certificate transparency&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;We are open about the security of our library and provide a threat model in the &lt;a href=&#34;https://raw.githubusercontent.com/appmattus/certificatetransparency/main/ThreatDragonModels/&#34;&gt;source code&lt;/a&gt;, created using &lt;a href=&#34;https://threatdragon.org&#34;&gt;OWASP Threat Dragon&lt;/a&gt;. If you feel there is something we have missed please reach out so we can keep this up to date.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:com.appmattus.certificatetransparency&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.appmattus.certificatetransparency/certificatetransparency&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Android modules include the &lt;code&gt;android&lt;/code&gt; dependency in your build.gradle file which ensures the necessary ProGuard rules are present:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;com.appmattus.certificatetransparency:certificatetransparency-android:&amp;lt;latest-version&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Java library modules include the dependency as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;com.appmattus.certificatetransparency:certificatetransparency:&amp;lt;latest-version&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Android it is recommended to configure certificate transparency through the provided &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/security/Provider.html&#34;&gt;Java Security Provider&lt;/a&gt; at app startup, which can be configured through &lt;code&gt;installCertificateTransparencyProvider&lt;/code&gt;. The advantage of this setup is it should work across all network types including WebViews with no additional setup.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Android&#39;s WebViews only allow you to override GET network requests through overriding the &lt;em&gt;shouldInterceptRequest&lt;/em&gt; method. This means the only reliable way to implement certificate transparency in WebViews is to use the Java Security Provider documented here.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class SampleApplication : Application() {&#xA;    override fun onCreate() {&#xA;        super.onCreate()&#xA;&#xA;        installCertificateTransparencyProvider {&#xA;            // Setup a logger&#xA;            logger = BasicAndroidCTLogger(BuildConfig.DEBUG)&#xA;&#xA;            // Exclude any subdomain but not &#34;appmattus.com&#34; with no subdomain&#xA;            -&#34;*.appmattus.com&#34;&#xA;&#xA;            // Exclude specified domain&#xA;            -&#34;example.com&#34;&#xA;&#xA;            // Override the exclusion by including a specific subdomain&#xA;            +&#34;allowed.appmattus.com&#34;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/appmattus/certificatetransparency/main/docs/advanced-configuration.md&#34;&gt;advanced configuration&lt;/a&gt; for documentation on all the available options.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Using the Java Security Provider may not work on all JVMs so if you are not on Android you are recommended to use one of the alternatives documented below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Certificate transparency can also be setup in specific network connections, instructions are available for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/appmattus/certificatetransparency/main/docs/okhttp.md&#34;&gt;OkHttp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/appmattus/certificatetransparency/main/docs/retrofit.md&#34;&gt;Retrofit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/appmattus/certificatetransparency/main/docs/httpurlconnection.md&#34;&gt;HttpURLConnection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/appmattus/certificatetransparency/main/docs/volley.md&#34;&gt;Volley&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/appmattus/certificatetransparency/main/docs/x509trustmanager.md&#34;&gt;X509TrustManager&lt;/a&gt; If you are dealing with non-HTTPS connections you can also use the library to verify the certificates by wrapping a X509TrustManager and using that.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, there is no support in the library for &lt;a href=&#34;https://hc.apache.org/httpcomponents-client-5.1.x/&#34;&gt;Apache HttpClient&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Certificate revocation&lt;/h2&gt; &#xA;&lt;p&gt;Unfortunately in Android there is no built-in support for certificate revocation, which means you&#39;re basically on your own. This is an incredibly hard to solve problem and it is worth reading &lt;a href=&#34;https://scotthelme.co.uk/revocation-is-broken/&#34;&gt;revocation is broken&lt;/a&gt; for more background. Needless to say I would argue that revocation is flawed along with the broken implementations in mobile and web browsers.&lt;/p&gt; &#xA;&lt;p&gt;For our purposes we&#39;ve added &lt;code&gt;certificateRevocationInterceptor&lt;/code&gt; to this library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;certificateRevocationInterceptor {&#xA;    addCrl(&#xA;        issuerDistinguishedName = &#34;ME0xCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxJzAlBgNVBAMTHkRpZ2lDZXJ0IFNIQTIgU2VjdXJlIFNlcnZlciBDQQ==&#34;,&#xA;        serialNumbers = listOf(&#34;Aa8e+91erglSMgsk/mtVaA==&#34;, &#34;A3G1iob2zpw+y3v0L5II/A==&#34;)&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is worth highlighting that the list of revoked certificates would need to be built into the app and so would require pushing out an app update should you want to add a revocation in. This does mean there&#39;s a small window for any attacks using a revoked certificate.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/appmattus/certificatetransparency/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on our code of conduct, and the process for submitting pull requests to us.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;http://semver.org/&#34;&gt;SemVer&lt;/a&gt; for versioning. For the versions available, see the &lt;a href=&#34;https://github.com/appmattus/certificatetransparency/tags&#34;&gt;tags on this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/appmattus/certificatetransparency/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is licensed under the Apache License, Version 2.0 - see the &lt;a href=&#34;https://raw.githubusercontent.com/appmattus/certificatetransparency/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; file for details&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Arcns/fast-transition</title>
    <updated>2023-02-18T01:38:08Z</updated>
    <id>tag:github.com,2023-02-18:/Arcns/fast-transition</id>
    <link href="https://github.com/Arcns/fast-transition" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个能够快速实现Android TextView、圆角、切换图片等共享元素转场效果的工具库，同时支持修复Android Q三个及以上页面共享元素动画丢失的BUG，支持自定义复杂的共享元素动画，支持仿小红书、Lemon8的拖拽返回+共享元素转场效果。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fast-transition&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jitpack.io/#com.gitee.arcns/fast-transition&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/com.gitee.arcns/fast-transition.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;最近小伙伴有个需求，就是实现类似于小红书、Lemon8的共享元素转场效果，查了一圈发现并没有特别合适的Library，于是便做了一个开源Library项目，方便大家集成后，一行代码实现Android仿小红书、Lemon8的共享元素转场效果。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Arcns/fast-transition/master/image/lemon8.gif&#34; alt=&#34;Lemon8的共享元素转场效果&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1.实现思路：&lt;/h4&gt; &#xA;&lt;p&gt;经过分析，如果要实现上图的效果，我们需要解决以下问题：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;（1）实现自定义的共享元素：包括圆角过渡，TextView过渡，不同图片间过渡等&lt;/li&gt; &#xA; &lt;li&gt;（2）实现多个连续页面的共享元素过渡（Q及以上系统，3个及以上连续的activity拥有共享元素动画时，会有共享元素动画丢失的BUG）&lt;/li&gt; &#xA; &lt;li&gt;（3）实现拖拽退出效果&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;问题已经分析出来了，接下来我们逐个解决：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;（1）实现自定义的共享元素我们通过自定义&lt;code&gt;Transition&lt;/code&gt;，在&lt;code&gt;createAnimator&lt;/code&gt;中返回响应的动画来实现&lt;/li&gt; &#xA; &lt;li&gt;（2）实现多页面的共享元素过渡我们通过反射修复BUG（如果你对反射有顾虑或没有该功能场景，则不需关注该方式）&lt;/li&gt; &#xA; &lt;li&gt;（3）实现拖拽退出效果，这里我通过另外一个开源项目来更加完整的解决该问题：&lt;a href=&#34;https://github.com/Arcns/arc-fast#%E5%8D%81%E4%B8%80fast-dragexitlayout&#34;&gt;FastDragExitLayout&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2.集成方式：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;allprojects {&#xA;&#x9;repositories {&#xA;&#x9;&#x9;...&#xA;&#x9;&#x9;maven { url &#39;https://www.jitpack.io&#39; }&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt; // 注意：本Library基于androidx&#xA; implementation &#39;com.gitee.arcns:fast-transition:latest.release&#39;&#xA; // 可选：如果你需要使用FastRoundedItem（圆角的共享元素动画），那么你项目中需要引入fast rounded&#xA; implementation &#39;com.gitee.arcns.arc-fast:rounded:yourversion&#39;&#xA; // 可选：如果你需要使用FastDisposableFastTextViewItem（圆角的共享元素动画），那么你项目中需要引入fast textview&#xA; implementation &#39;com.gitee.arcns.arc-fast:text-view:yourversion&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.使用方式&lt;/h4&gt; &#xA;&lt;p&gt;本Library对共享元素转场的配置进行了简化，减少了使用的复杂度，在简单场景集成时仅需两步：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;（1）在转场&lt;code&gt;开始页&lt;/code&gt;跳转到&lt;code&gt;目标页&lt;/code&gt;时，使用&lt;code&gt;FastTransitionViewManager&lt;/code&gt;配置共享元素动画和启动&lt;code&gt;目标页&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 在开始页 StartActivity.kt&#xA;// 跳转到目标页&#xA;fun goTarget(){&#xA;     // 1、添加需要参与转场的共享元素并配置所需动画&#xA;    val fastTransitionViewManager = FastTransitionViewManager()&#xA;    fastTransitionViewManager.addView(&#xA;        &#34;IMAGE&#34;, // 共享元素的key&#xA;        ivImage, // 共享元素view&#xA;        FastRoundedItem(FastRoundedValue(12f.dpToPx)),//共享元素动画：圆角动画&#xA;        FastSystemTransitionItem(FastSystemTransitionType.ChangeImageTransform),//共享元素动画：图片切换动画&#xA;        ... // 可以配置更多动画&#xA;    )&#xA;    fastTransitionViewManager.addView(...)&#xA;    fastTransitionViewManager.addView(...)&#xA;    fastTransitionViewManager.addView(...) // 可以添加更多需要参与转场的共享元素&#xA;    // 2、通过startActivity启动目标页&#xA;    fastTransitionViewManager.startActivity(&#xA;        activity = this, // 当前页activity&#xA;        targetActivityCLass = TargetActivity::class.java, // 目标页Class&#xA;        targetDataID = &#34;1&#34;, // 可选：目标页对应的数据ID，默认为null&#xA;        applyIntent = { intent-&amp;gt; &#xA;            // 可选：intent回调，你可以在这里为intent添加更多数据&#xA;        }&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;（2）在到&lt;code&gt;目标页&lt;/code&gt;的onCreate中，使用&lt;code&gt;FastTransitionTargetManager&lt;/code&gt;配置与&lt;code&gt;开始页&lt;/code&gt;对应的共享元素并应用转场动画&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 在目标页 TargetActivity.kt&#xA;override fun onCreate(savedInstanceState: Bundle?) {&#xA;    super.onCreate(savedInstanceState)&#xA;    val transitionTargetManager = FastTransitionTargetManager.getManager(this)&#xA;    // 1、配置与`开始页`对应的共享元素&#xA;    transitionTargetManager?.setTransitionView(&#xA;         &#34;IMAGE&#34;, // 与`开始页`对应的共享元素的key&#xA;         ivImage // 与`开始页`对应的共享元素view&#xA;    )&#xA;    transitionTargetManager?.setTransitionView(...)&#xA;    // 2、应用转场动画&#xA;    transitionTargetManager?.applyTransitionEnterAndReturnConfig(&#xA;        duration = 150, // 可选：转场动画时长，默认为150,&#xA;        postponeEnterTransition = false, // 可选：是否暂停转场动画，直到用户调用startTransitionEnter再开始转场动画，默认为false&#xA;        postponeEnterTransitionTimeout = 500, // 可选：如果暂停转场动画，那么达到该超时时间仍未调用startTransitionEnter时，管理器将自动开始转场动画&#xA;        pageCurrentScale = { 1f }, // 可选：返回当前页面的缩放比例，该方法一般用于与拖拽退出结合使用，默认为null&#xA;        onTransitionEnd = {&#xA;            // 可选：转场动画结束的回调，默认为null&#xA;        }&#xA;,&#xA;    )&#xA;}&#xA;// 可选：修复Q及以上系统，activity调用onStop后共享元素动画丢失的BUG&#xA;override fun onStop() {&#xA;    transitionTargetManager?.onStop()&#xA;    super.onStop()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4.修复多个连续页面的共享元素过渡时，共享元素动画丢失的BUG&lt;/h4&gt; &#xA;&lt;p&gt;注意：该BUG需要使用反射进行修复，截至到目前最新的API 33，该方法仍然能够有效修复该BUG，但如果你对反射有顾虑或没有该功能场景，则不要使用以下方法。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 在自定义Application MyApplication.kt&#xA;class MyApplication : Application() {&#xA;    override fun attachBaseContext(base: Context) {&#xA;        super.attachBaseContext(base)&#xA;        // 启用多个连续页面的共享元素过渡功能&#xA;        FastTransitionUtils.enableMultipleActivityTransition(this)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 在目标页 TargetActivity.kt&#xA;// 修复Q及以上系统，3个及以上连续的activity拥有共享元素动画时，共享元素动画丢失的BUG（使用反射）&#xA;override fun finishAfterTransition() {&#xA;    transitionTargetManager?.finishAfterTransition()&#xA;    super.finishAfterTransition()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.支持的动画&lt;/h4&gt; &#xA;&lt;p&gt;本Library在原有系统自带的共享元素动画基础上，扩展了一些常用的动画效果，所有内置动画如下：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;动画名&lt;/th&gt; &#xA;   &lt;th&gt;简介&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FastTextViewItem&lt;/td&gt; &#xA;   &lt;td&gt;TextView的共享元素动画，能够实现文字大小、颜色、行高、间距、粗体等属性的过渡动画&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FastRoundedItem&lt;/td&gt; &#xA;   &lt;td&gt;圆角的共享元素动画（需要使用圆角控件&lt;a href=&#34;https://github.com/Arcns/arc-fast#%E5%85%ABfast-rounded&#34;&gt;FastRounded&lt;/a&gt;）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FastToggleImageViewItem&lt;/td&gt; &#xA;   &lt;td&gt;支持根据状态切换图片的共享元素动画，通常用于点赞、收藏、关注等需要根据状态同时切换&lt;code&gt;开始页&lt;/code&gt;与&lt;code&gt;目标页&lt;/code&gt;图片的场景&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FastSimpleItem&lt;/td&gt; &#xA;   &lt;td&gt;可实现渐变或缩放的简单共享元素动画，通常用于那些内部不一致的共享元素容器控件，避免内部不同导致过渡时突兀&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FastImageItem&lt;/td&gt; &#xA;   &lt;td&gt;支持切换图片或背景的共享元素动画，通常用于不同图片间的过渡，该动画会通过渐变效果的过渡到另一张图片&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FastBackgroundFadeItem&lt;/td&gt; &#xA;   &lt;td&gt;背景渐变显示或隐藏的共享元素动画，通常用于只有一边有背景而另一边没有的场景&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FastDisposableFastTextViewItem&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Arcns/arc-fast#%E4%B9%9Dfast-textview&#34;&gt;FastTextView&lt;/a&gt;渐变消失的共享元素动画，该动画会在目标页面创建相同控件以完成渐变消失动画&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FastSystemTransitionItem&lt;/td&gt; &#xA;   &lt;td&gt;系统自带的共享元素动画，用于实现在本库中使用系统自带的动画&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;6.扩展自定义的动画&lt;/h4&gt; &#xA;&lt;p&gt;如果内置的动画不符合你的需求场景，或者你需要让你的其他控件也参与共享元素动画，那么你可以扩展自定义的动画. 本Library对扩展自定义的动画也进行了简化，通常情况下你只需两步即可实现扩展自定义的动画：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;（1）创建自定义的动画计算器&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 1.1 继承FastBaseCalculator&amp;lt;计算器的数据类型，控件的类型&amp;gt;&#xA;class CustomCalculator(&#xA;    _first: Float,// 动画起始数据，演示用法，你可以按需替换为你自己的构造参数&#xA;    _last: Float, // 动画结束数据，演示用法，你可以按需替换为你自己的构造参数&#xA;) : FastBaseCalculator&amp;lt;Float, View&amp;gt;( // 此处&amp;lt;Float, View&amp;gt;仅为演示用法，你可以按需替换为你自己的数据类型与控件类型&#xA;    viewClass = View::class,&#xA;    first = _first,&#xA;    last = _last&#xA;) {&#xA;    // 1.2 返回动画起始数据与结束数据的差额&#xA;    override val differ: Float by lazy { &#xA;         last - first // 此处仅为演示用法，你可以按需替换为你自己的差额计算方式&#xA;    }&#xA;&#xA;    // 1.3 返回某个进度下的动画数据（progress的区间为0至1）&#xA;    override fun getValue(progress: Float): Float =&#xA;        calculatorFloatValue(first, last, differ, progress) // 此处仅为演示用法，你可以按需替换为你自己的进度数据计算方式&#xA;&#xA;    // 1.4 把某个进度下的动画数据设置到你的控件中&#xA;    override fun setView(view: View, progress: Float, value: Float) {&#xA;        // 此处仅为演示用法，你可以按需替换为你自己的控件设置方式&#xA;        view.alpha = value&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;（2）创建自定义的动画Item，并返回上一步的动画计算器&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Parcelize&#xA;data class CustomItem(&#xA;    var start: Float,&#xA;    var end: Float,&#xA;) : FastTransitionItem() {&#xA;&#xA;    // 返回动画计算器&#xA;    override fun getCalculator(&#xA;        isEnter: Boolean,&#xA;        pageCurrentScale: Float?&#xA;    ): FastSimpleCalculator {&#xA;        // 此处仅为演示用法，你可以按需替换为你自己的计算器构建及返回方式&#xA;        return if (isEnter) CustomCalculator(start, end)&#xA;        else CustomCalculator(end, start)&#xA;    }&#xA;    &#xA;    // 可选：校验动画Item当前是否可用，如果不可用将不调用getCalculator&#xA;    override val enable: Boolean get() = start != end &amp;amp;&amp;amp; start &amp;gt;= 0f &amp;amp;&amp;amp; end &amp;gt;= 0f // 此处仅为演示用法，你可以按需替换为你自己的校验方法&#xA;    &#xA;    // 可选：视图动画准备（下一步将创建计算器）的回调，您可以在此处进行视图相关的初始化，例如根据视图准备目标页对应的共享元素数据&#xA;    override fun onViewAnimReady(isEnter: Boolean, view: View, pageCurrentScale: Float?) {&#xA;        // 此处仅为演示用法，你可以按需替换为你自己的初始化方法&#xA;        end = view.alpha&#xA;    }&#xA;    &#xA;    // 可选：执行进入动画前的回调，您可以在此进行进入动画前的初始化工作&#xA;    override fun onEnterBefore(activity: Activity, transitionConfig: FastTransitionConfig) {&#xA;    }&#xA;&#xA;    // 可选：执行离开动画前的回调，您可以在此进行离开动画前的初始化工作&#xA;    override fun onReturnBefore(view: View, pageCurrentScale: Float?) {&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>