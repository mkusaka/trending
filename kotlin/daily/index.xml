<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-18T01:30:01Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iurysza/module-graph</title>
    <updated>2024-05-18T01:30:01Z</updated>
    <id>tag:github.com,2024-05-18:/iurysza/module-graph</id>
    <link href="https://github.com/iurysza/module-graph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Gradle Plugin for visualizing your project&#39;s structure, powered by mermaidjs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/iurysza/module-graph/actions?query=workflow%3A%22Pre+Merge+Checks%22&#34;&gt;&lt;img src=&#34;https://github.com/iurysza/module-graph/workflows/Pre%20Merge%20Checks/badge.svg?sanitize=true&#34; alt=&#34;Pre Merge Checks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/iurysza/module-graph/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/cortinico/kotlin-android-template.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/cortinico/kotlin-android-template?color=blue&amp;amp;logo=kotlin&#34; alt=&#34;Language&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iurysza/module-graph/main/assets/module-graph-icon.png&#34; alt=&#34;module graph icon&#34; width=&#34;100&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Module Graph Plugin&lt;/h2&gt; &#xA;&lt;p&gt;This plugin generates a &lt;a href=&#34;https://github.com/mermaid-js/mermaid&#34;&gt;Mermaid&lt;/a&gt; graph of your project&#39;s module relationships, so you can see how your modules interact at a glance.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A diagram about the current system is only useful if it&#39;s generated. If it is produced by hand it documents the author&#39;s belief, not the system. Still, important, but not an input for decision making. Development is primarily decision-making. Enable it through custom tools. &lt;a href=&#34;https://twitter.com/girba/status/1628326848256962561&#34;&gt;source&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can read more about the background story of this plugin &lt;a href=&#34;https://iurysouza.dev/automating-project-architecture-graphs/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Main Features ‚≠ê&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically append/update the generated graph to your project&#39;s README file.&lt;/li&gt; &#xA; &lt;li&gt;Enables you to focus and highlight specific nodes in the graph&lt;/li&gt; &#xA; &lt;li&gt;Exclude specific configurations from the graph.&lt;/li&gt; &#xA; &lt;li&gt;Built in themes and customization options.&lt;/li&gt; &#xA; &lt;li&gt;The raw code block automatically renders as a graph on both &lt;a href=&#34;https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://about.gitlab.com/handbook/tools-and-tips/mermaid/#mermaid-diagrams&#34;&gt;Gitlab&lt;/a&gt;, &lt;a href=&#34;https://plugins.jetbrains.com/plugin/20146-mermaid&#34;&gt;Jetbrains IDEs&lt;/a&gt; and &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=MermaidChart.vscode-mermaid-chart&#34;&gt;VSCode &lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll just need to add it to your project&#39;s &lt;strong&gt;root&lt;/strong&gt; &lt;code&gt;build.gradle&lt;/code&gt; or &lt;code&gt;build.gradle.kts&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;build.gradle (Groovy DSL)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Using the plugins DSL&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;plugins {&#xA;    id &#34;dev.iurysouza.modulegraph&#34; version &#34;0.10.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;b&gt;Using Legacy Plugin application&lt;/b&gt;&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;    buildscript {&#xA;    repositories {&#xA;        maven {&#xA;            url &#34;https://plugins.gradle.org/m2/&#34;&#xA;        }&#xA;    }&#xA;    dependencies {&#xA;        classpath &#34;dev.iurysouza:modulegraph:0.10.0&#34;&#xA;    }&#xA;}&#xA;&#xA;apply plugin: &#34;dev.iurysouza.modulegraph&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;h3&gt;Configuring the plugin&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;import dev.iurysouza.modulegraph.LinkText&#xA;import dev.iurysouza.modulegraph.ModuleType&#xA;import dev.iurysouza.modulegraph.Orientation&#xA;import dev.iurysouza.modulegraph.Theme&#xA;&#xA;moduleGraphConfig {&#xA;    readmePath = &#34;./README.md&#34;&#xA;    heading = &#34;### Module Graph&#34;&#xA;    // showFullPath = false // optional&#xA;    // orientation = Orientation.LEFT_TO_RIGHT // optional&#xA;    // linkText = LinkText.NONE // optional&#xA;    // excludedConfigurationsRegex = &#34;.*test.*&#34; // optional&#xA;    // excludedModulesRegex = &#34;.*moduleName.*&#34; // optional&#xA;    // focusedModulesRegex = &#34;.*(projectName).*&#34; // optional&#xA;    // rootModulesRegex = &#34;.*moduleName.*&#34; // optional&#xA;    // setStyleByModuleType = true // optional&#xA;    // theme = Theme.NEUTRAL // optional&#xA;    // Or you can fully customize it by using the BASE theme:&#xA;    // theme = new Theme.BASE(&#xA;    //     [&#xA;    //         &#34;primaryTextColor&#34;: &#34;#F6F8FAff&#34;, // All text colors&#xA;    //         &#34;primaryColor&#34;: &#34;#5a4f7c&#34;, // Node color&#xA;    //         &#34;primaryBorderColor&#34;: &#34;#5a4f7c&#34;, // Node border color&#xA;    //         &#34;tertiaryColor&#34;: &#34;#40375c&#34;, // Container box background&#xA;    //         &#34;lineColor&#34;: &#34;#f5a623&#34;,&#xA;    //         &#34;fontSize&#34;: &#34;12px&#34;&#xA;    //     ],&#xA;    //     focusColor = &#34;#F5A622&#34; // Color of the focused nodes if any&#xA;    // )&#xA;    // theme.set(&#xA;    //     new Theme.BASE(&#xA;    //         themeVariables: [&#xA;    //             &#34;primaryTextColor&#34;: &#34;#F6F8FAff&#34;, // All text colors&#xA;    //             &#34;primaryColor&#34;: &#34;#5a4f7c&#34;, // Node color&#xA;    //             &#34;primaryBorderColor&#34;: &#34;#5a4f7c&#34;, // Node border color&#xA;    //             &#34;tertiaryColor&#34;: &#34;#40375c&#34;, // Container box background&#xA;    //             &#34;lineColor&#34;: &#34;#f5a623&#34;,&#xA;    //             &#34;fontSize&#34;: &#34;12px&#34;&#xA;    //         ],&#xA;    //         focusColor: &#34;#F5A622&#34;, // Color of the focused nodes if any&#xA;    //         moduleTypes: [&#xA;    //             new ModuleType.AndroidLibrary(&#34;#2C4162&#34;)&#xA;    //         ]&#xA;    //     )&#xA;    // )&#xA;&#xA;    // You can add additional graphs.&#xA;    // A separate graph will be generated for each config below.&#xA;    // graph(&#xA;    //     &#34;./README.md&#34;,&#xA;    //     &#34;# Graph with root: gama&#34;,&#xA;    // ) {&#xA;    //     it.rootModulesRegex = &#34;.*gama.*&#34;&#xA;    // }&#xA;    // graph(&#xA;    //     &#34;./SomeOtherReadme.md&#34;,&#xA;    //     &#34;# Graph&#34;,&#xA;    // ) {&#xA;    //     it.rootModulesRegex = &#34;.*zeta.*&#34;&#xA;    // }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;b&gt;build.gradle.kts (Kotlin DSL)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;h4&gt;Using the plugins DSL&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;    id(&#34;dev.iurysouza.modulegraph&#34;) version &#34;0.10.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;b&gt;Using Legacy Plugin application&lt;/b&gt;&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;    buildscript {&#xA;    repositories {&#xA;        maven {&#xA;            url = uri(&#34;https://plugins.gradle.org/m2/&#34;)&#xA;        }&#xA;    }&#xA;    dependencies {&#xA;        classpath(&#34;dev.iurysouza:modulegraph:0.10.0&#34;)&#xA;    }&#xA;}&#xA;&#xA;apply(plugin = &#34;dev.iurysouza:modulegraph&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;h3&gt;Configuring the plugin&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import dev.iurysouza.modulegraph.LinkText&#xA;import dev.iurysouza.modulegraph.ModuleType&#xA;import dev.iurysouza.modulegraph.Orientation&#xA;import dev.iurysouza.modulegraph.Theme&#xA;&#xA;moduleGraphConfig {&#xA;    readmePath.set(&#34;./README.md&#34;)&#xA;    heading = &#34;### Module Graph&#34;&#xA;    // showFullPath.set(false) // optional&#xA;    // orientation.set(Orientation.LEFT_TO_RIGHT) //optional&#xA;    // linkText.set(LinkText.NONE) // optional&#xA;    // setStyleByModuleType.set(true) // optional&#xA;    // excludedConfigurationsRegex.set(&#34;.*test.*&#34;) // optional&#xA;    // excludedModulesRegex.set(&#34;.*moduleName.*&#34;) // optional&#xA;    // focusedModulesRegex.set(&#34;.*(projectName).*&#34;) // optional&#xA;    // rootModulesRegex.set(&#34;.*moduleName.*&#34;) // optional&#xA;    // theme.set(Theme.NEUTRAL) // optional&#xA;    // or you can fully customize it by using the BASE theme:&#xA;    // Theme.BASE(&#xA;    //     themeVariables = mapOf(&#xA;    //         &#34;primaryTextColor&#34; to &#34;#F6F8FAff&#34;, // Text&#xA;    //         &#34;primaryColor&#34; to &#34;#5a4f7c&#34;, // Node&#xA;    //         &#34;primaryBorderColor&#34; to &#34;#5a4f7c&#34;, // Node border&#xA;    //         &#34;tertiaryColor&#34; to &#34;#40375c&#34;, // Container box background&#xA;    //         &#34;lineColor&#34; to &#34;#f5a623&#34;,&#xA;    //         &#34;fontSize&#34; to &#34;12px&#34;,&#xA;    //     ),&#xA;    //     focusColor = &#34;#F5A622&#34;,&#xA;    //     moduleTypes = listOf(&#xA;    //         ModuleType.AndroidLibrary(&#34;#2C4162&#34;),&#xA;    //     )&#xA;    // ),&#xA;    // )&#xA;&#xA;    // You can add additional graphs.&#xA;    // A separate graph will be generated for each config below.&#xA;    // graph(&#xA;    //     readmePath = &#34;./README.md&#34;,&#xA;    //     heading = &#34;# Graph with root: gama&#34;,&#xA;    // ) {&#xA;    //     rootModulesRegex = &#34;.*gama.*&#34;&#xA;    // }&#xA;    // graph(&#xA;    //     readmePath = &#34;./SomeOtherReadme.md&#34;,&#xA;    //     heading = &#34;# Graph&#34;,&#xA;    // ) {&#xA;    //     rootModulesRegex = &#34;.*zeta.*&#34;&#xA;    // }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have a heading in your &lt;code&gt;README&lt;/code&gt; with the same format as the one you set in the configuration, if not, the plugin will append it with the graph to the end of the file.&lt;/p&gt; &#xA;&lt;p&gt;After that, just run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew createModuleGraph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, just look for the generated graph in your project&#39;s README file.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Docs&lt;/h2&gt; &#xA;&lt;p&gt;Each Graph has the following configuration parameters.&lt;/p&gt; &#xA;&lt;p&gt;Required settings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;readmePath&lt;/strong&gt;: The path of the file where the dependency graph will be added.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;heading&lt;/strong&gt;: The heading where the dependency graph will be added.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional settings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;setStyleByModuleType&lt;/strong&gt;: Whether to style the modules based on their type (KotlinMultiplatform, Android Library, etc). Default is &lt;code&gt;false&lt;/code&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/iurysza/module-graph/main/#module-type-based-styling&#34;&gt;Read more&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;focusedModulesRegex&lt;/strong&gt;: The regex to match nodes in the graph (project names) that should be focused. By default, no nodes are focused. If set, the matching nodes will be highlighted and only related nodes will be shown. The color can be customized via the &lt;code&gt;focusColor&lt;/code&gt; property from &lt;code&gt;Theme.BASE&lt;/code&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/iurysza/module-graph/main/#focusing-on-specific-nodes&#34;&gt;Read more&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;showFullPath&lt;/strong&gt;: Whether to show the full path of the modules in the graph. Default is &lt;code&gt;false&lt;/code&gt;. This removes subgraphs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;theme&lt;/strong&gt;: The &lt;a href=&#34;https://mermaid.js.org/config/theming.html&#34;&gt;mermaid theme&lt;/a&gt; to be used for styling the graph. Default is &lt;code&gt;NEUTRAL&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Further customization is possible by setting the &lt;code&gt;themeVariables&lt;/code&gt; property on the &lt;code&gt;BASE&lt;/code&gt; theme. Check the &lt;a href=&#34;https://mermaid-js.github.io/mermaid/#/theming&#34;&gt;mermaid docs&lt;/a&gt; for more info.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;orientation&lt;/strong&gt;: The &lt;a href=&#34;https://mermaid.js.org/syntax/flowchart.html#flowchart-orientation&#34;&gt;orientation&lt;/a&gt; that the flowchart will have. Default is &lt;code&gt;LEFT_TO_RIGHT&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;linkText&lt;/strong&gt;: Whether to add information as text on links in graph. Available values: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;NONE&lt;/code&gt;: No text added. (Default.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CONFIGURATION&lt;/code&gt;: The name of the configuration which the dependency belongs to (e.g. &#34; implementation&#34;, &#34;compileOnly&#34;, &#34;jsMain&#34;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;excludedConfigurationsRegex&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Regex matching the configurations which should be ignored. e.g. &#34;implementation&#34;, &#34;testImplementation&#34;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;excludedModulesRegex&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Regex matching the modules which should be ignored.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rootModules&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Regex matching the modules that should be used as root modules. If this value is supplied, the generated graph will only include dependencies (direct and transitive) of root modules. In other words, the graph will only include modules that can be reached from a root module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Multiple graphs&lt;/h3&gt; &#xA;&lt;p&gt;You can apply configuration options directly in the root of the &lt;code&gt;moduleGraphConfig&lt;/code&gt; block like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;moduleGraphConfig {&#xA;    readmePath.set(&#34;${rootDir}/README.md&#34;)&#xA;    heading.set(&#34;### Module Graph&#34;)&#xA;    showFullPath.set(false)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you do this, you are configuring the &#39;Primary Graph&#39;. This is useful if you only need one graph to be generated.&lt;/p&gt; &#xA;&lt;p&gt;But sometimes you want multiple graphs to be generated. To achieve this you can add additional graph configs using &lt;code&gt;graph&lt;/code&gt;. Each additional graph has exactly the same configuration parameters as the primary graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;moduleGraphConfig {&#xA;    graph(&#xA;        readmePath = &#34;${rootDir}/README.md&#34;,&#xA;        heading = &#34;### Module Graph&#34;,&#xA;    ) {&#xA;        showFullPath = false&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;graph&lt;/code&gt; requires the required parameters to be provided in the function call, while the optional parameters can be provided in the configuration block.&lt;/p&gt; &#xA;&lt;p&gt;You can add as many &lt;code&gt;graph&lt;/code&gt; calls as you like: each one will generate a separate graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;moduleGraphConfig {&#xA;    graph(&#xA;        readmePath = &#34;${rootDir}/README.md&#34;,&#xA;        heading = &#34;### Module Graph&#34;,&#xA;    ) {&#xA;        showFullPath = false&#xA;    }&#xA;    graph(&#xA;        readmePath = &#34;${rootDir}/README.md&#34;,&#xA;        heading = &#34;### Another Module Graph&#34;,&#xA;    ) {&#xA;        showFullPath = true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For this plugin to work, you need to configure at least one graph. This can be via the Primary Graph, or via a &lt;code&gt;graph&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;p&gt;If using only &lt;code&gt;graph&lt;/code&gt; calls, then the Primary Graph doesn&#39;t need to be setup at all! You can see this in the samples above.&lt;/p&gt; &#xA;&lt;h3&gt;Show me that graph!&lt;/h3&gt; &#xA;&lt;p&gt;This is an example of using the plugin on an Android project with a multimodule setup. Here, the following configuration was used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;moduleGraphConfig {&#xA;    readmePath.set(&#34;${rootDir}/README.md&#34;)&#xA;    heading.set(&#34;### Module Graph&#34;)&#xA;    theme.set(&#xA;        Theme.BASE(&#xA;            mapOf(&#xA;                &#34;primaryTextColor&#34; to &#34;#fff&#34;,&#xA;                &#34;primaryColor&#34; to &#34;#5a4f7c&#34;,&#xA;                &#34;primaryBorderColor&#34; to &#34;#5a4f7c&#34;,&#xA;                &#34;lineColor&#34; to &#34;#f5a623&#34;,&#xA;                &#34;tertiaryColor&#34; to &#34;#40375c&#34;,&#xA;                &#34;fontSize&#34; to &#34;12px&#34;,&#xA;            ),&#xA;            focusColor = &#34;#FA8140&#34;&#xA;        ),&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And we got this graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;%%{&#xA;  init: {&#xA;    &#39;theme&#39;: &#39;base&#39;,&#xA;&#x9;&#39;themeVariables&#39;: {&#34;primaryTextColor&#34;:&#34;#fff&#34;,&#34;primaryColor&#34;:&#34;#5a4f7c&#34;,&#34;primaryBorderColor&#34;:&#34;#5a4f7c&#34;,&#34;lineColor&#34;:&#34;#f5a623&#34;,&#34;tertiaryColor&#34;:&#34;#40375c&#34;,&#34;fontSize&#34;:&#34;12px&#34;}&#xA;  }&#xA;}%%&#xA;graph LR&#xA;    subgraph app&#xA;        main&#xA;        playground&#xA;    end&#xA;    subgraph core&#xA;        common&#xA;        design-system&#xA;        footballinfo&#xA;        reddit&#xA;        webview-to-native-player&#xA;    end&#xA;    subgraph features&#xA;        match-day&#xA;        match-thread&#xA;    end&#xA;    footballinfo --&amp;gt; common&#xA;    match-day --&amp;gt; common&#xA;    match-day --&amp;gt; footballinfo&#xA;    match-day --&amp;gt; design-system&#xA;    match-day --&amp;gt; reddit&#xA;    match-thread --&amp;gt; webview-to-native-player&#xA;    match-thread --&amp;gt; common&#xA;    match-thread --&amp;gt; footballinfo&#xA;    match-thread --&amp;gt; design-system&#xA;    match-thread --&amp;gt; reddit&#xA;    playground --&amp;gt; webview-to-native-player&#xA;    playground --&amp;gt; match-thread&#xA;    playground --&amp;gt; match-day&#xA;    playground --&amp;gt; design-system&#xA;    reddit --&amp;gt; common&#xA;    webview-to-native-player --&amp;gt; common&#xA;    main --&amp;gt; match-thread&#xA;    main --&amp;gt; match-day&#xA;    main --&amp;gt; design-system&#xA;    main --&amp;gt; common&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Too much information? We can fix that.&lt;/p&gt; &#xA;&lt;h2&gt;Focusing on specific nodes&lt;/h2&gt; &#xA;&lt;p&gt;If you want to focus on specific nodes in the graph, you can use the &lt;code&gt;focusedModulesRegex&lt;/code&gt; property in the configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;moduleGraphConfig {&#xA;    //... keep previous configs&#xA;    focusedModulesRegex.set(&#34;.*(reddit).*&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By doing this, the plugin will highlight the nodes that match the pattern, and will only show the other nodes that are connected to them. It will generate the following graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;%%{&#xA;  init: {&#xA;    &#39;theme&#39;: &#39;base&#39;,&#xA;&#x9;&#39;themeVariables&#39;: {&#34;primaryTextColor&#34;:&#34;#fff&#34;,&#34;primaryColor&#34;:&#34;#5a4f7c&#34;,&#34;primaryBorderColor&#34;:&#34;#5a4f7c&#34;,&#34;lineColor&#34;:&#34;#f5a623&#34;,&#34;tertiaryColor&#34;:&#34;#40375c&#34;,&#34;fontSize&#34;:&#34;12px&#34;}&#xA;  }&#xA;}%%&#xA;graph LR&#xA;    subgraph core&#xA;        common&#xA;        reddit&#xA;    end&#xA;    subgraph features&#xA;        match-day&#xA;        match-thread&#xA;    end&#xA;    match-day --&amp;gt; reddit&#xA;    match-thread --&amp;gt; reddit&#xA;    reddit --&amp;gt; common&#xA;    classDef focus fill:#E04380,stroke:#fff,stroke-width:2px,color:#fff;&#xA;    class reddit focus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since it&#39;s just a regex pattern, you can, for example, match multiple nodes by using the &lt;code&gt;|&lt;/code&gt; operator, or you can come up with whatever cryptic regex patterns you want if you&#39;re into that kind of thing.&lt;/p&gt; &#xA;&lt;p&gt;When was the last time Regex made you happy? =)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// This matches module names that contain &#34;reddit&#34; or &#34;match-day&#34;&#xA;focusedModulesRegex.set(&#34;.*(reddit|match-day).*&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;%%{&#xA;  init: {&#xA;    &#39;theme&#39;: &#39;base&#39;,&#xA;&#x9;&#39;themeVariables&#39;: {&#34;primaryTextColor&#34;:&#34;#fff&#34;,&#34;primaryColor&#34;:&#34;#5a4f7c&#34;,&#34;primaryBorderColor&#34;:&#34;#5a4f7c&#34;,&#34;lineColor&#34;:&#34;#f5a623&#34;,&#34;tertiaryColor&#34;:&#34;#40375c&#34;,&#34;fontSize&#34;:&#34;12px&#34;}&#xA;  }&#xA;}%%&#xA;graph LR&#xA;    subgraph app&#xA;        main&#xA;        playground&#xA;    end&#xA;    subgraph core&#xA;        common&#xA;        design-system&#xA;        footballinfo&#xA;        reddit&#xA;    end&#xA;    subgraph features&#xA;        match-day&#xA;        match-thread&#xA;    end&#xA;    match-day --&amp;gt; common&#xA;    match-day --&amp;gt; footballinfo&#xA;    match-day --&amp;gt; design-system&#xA;    match-day --&amp;gt; reddit&#xA;    match-thread --&amp;gt; reddit&#xA;    playground --&amp;gt; match-day&#xA;    reddit --&amp;gt; common&#xA;    main --&amp;gt; match-day&#xA;    classDef focus fill:#E04380,stroke:#fff,stroke-width:2px,color:#fff;&#xA;    class match-day focus&#xA;    class reddit focus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Module type based styling&lt;/h2&gt; &#xA;&lt;p&gt;This feature enables detecting and rendering modules based on their type, eg.: kotlin, java, android-library, kotlin-multiplatform, etc&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Just toggle this option on:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;moduleGraphConfig {&#xA;    //..&#xA;    setStyleByModuleType.set(true)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it. Just run the task and you&#39;ll get a graph identifying modules by their type.&lt;/p&gt; &#xA;&lt;h3&gt;Batteries included&lt;/h3&gt; &#xA;&lt;p&gt;We have default styling for these module types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android Application&lt;/li&gt; &#xA; &lt;li&gt;React Native&lt;/li&gt; &#xA; &lt;li&gt;Kotlin Multiplatform&lt;/li&gt; &#xA; &lt;li&gt;Android Library&lt;/li&gt; &#xA; &lt;li&gt;Kotlin&lt;/li&gt; &#xA; &lt;li&gt;Java Library&lt;/li&gt; &#xA; &lt;li&gt;Java&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These supported plugins are pre-configured with a default color pattern, but can be customized further if needed. &lt;strong&gt;You can also add you own module type.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;supported plugins already have a default color pattern&lt;/strong&gt; , but you can also customize them via the &lt;code&gt;Theme.BASE&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can detect and customize styling for &lt;strong&gt;other plugins&lt;/strong&gt; by providing a &lt;code&gt;CustomPlugin&lt;/code&gt; with an &lt;code&gt;id&lt;/code&gt; and its color. The &lt;code&gt;ID&lt;/code&gt; will be used to match a Gradle plugin applied to that module and will have higher precedence than all the others. For example, if you have a plugin defined with the &lt;code&gt;app.compose&lt;/code&gt; id, you can pass it as &lt;code&gt;Custom(&#34;app.compose&#34;, &#34;#0E0E0E&#34;)&lt;/code&gt; and the graph will be generated accordingly. eg.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import dev.iurysouza.modulegraph.ModuleType.*&#xA;import dev.iurysouza.modulegraph.Theme&#xA;&#xA;moduleGraphConfig {&#xA;    theme.set(&#xA;        Theme.BASE(&#xA;            moduleTypes = listOf(&#xA;                Custom(id = &#34;app.compose&#34;, color = &#34;#0E0E0E&#34;),&#xA;                AndroidApp(&#34;#3CD483&#34;),&#xA;                AndroidLibrary(&#34;#292B2B&#34;),&#xA;            ),&#xA;        ),&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below is an example of how the module graph would show up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;%%{&#xA;  init: {&#xA;    &#39;theme&#39;: &#39;base&#39;,&#xA;    &#39;themeVariables&#39;: {&#34;lineColor&#34;:&#34;#676767&#34;},&#xA;  }&#xA;}%%&#xA;graph LR&#xA;    subgraph app&#xA;        playground&#xA;        main&#xA;    end&#xA;    subgraph core&#xA;        webview-to-native-player&#xA;        common&#xA;        footballinfo&#xA;        design-system&#xA;        reddit&#xA;    end&#xA;    subgraph features&#xA;        match-thread&#xA;        match-day&#xA;    end&#xA;    match-thread --&amp;gt; webview-to-native-player&#xA;    match-thread --&amp;gt; common&#xA;    match-thread --&amp;gt; footballinfo&#xA;    match-thread --&amp;gt; design-system&#xA;    match-thread --&amp;gt; reddit&#xA;    match-day --&amp;gt; common&#xA;    match-day --&amp;gt; footballinfo&#xA;    match-day --&amp;gt; design-system&#xA;    match-day --&amp;gt; reddit&#xA;    playground --&amp;gt; webview-to-native-player&#xA;    playground --&amp;gt; match-thread&#xA;    playground --&amp;gt; design-system&#xA;    playground --&amp;gt; match-day&#xA;    main --&amp;gt; match-thread&#xA;    main --&amp;gt; match-day&#xA;    main --&amp;gt; design-system&#xA;    main --&amp;gt; common&#xA;    reddit --&amp;gt; common&#xA;    webview-to-native-player --&amp;gt; common&#xA;    footballinfo --&amp;gt; common&#xA;    classDef android_library fill:#292B2B,stroke:#fff,stroke-width:2px,color:#fff;&#xA;    classDef app_compose fill:#82AAFF,stroke:#fff,stroke-width:2px,color:#fff;&#xA;    classDef android_application fill:#3CD483,stroke:#fff,stroke-width: 2px,color:#fff;&#xA;    class match-thread app_compose&#xA;    class webview-to-native-player android_library&#xA;    class common android_library&#xA;    class footballinfo android_library&#xA;    class design-system app_compose&#xA;    class reddit android_library&#xA;    class match-day app_compose&#xA;    class playground android_application&#xA;    class main android_application&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Modules can only have one type. So we&#39;re using a hardcoded precedence order for identifying them.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Precedence&lt;/h3&gt; &#xA;&lt;p&gt;The system determines the module type based on the hierarchy of applied plugins. For instance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A module with both &lt;code&gt;React Native&lt;/code&gt; and &lt;code&gt;Android Library&lt;/code&gt; will be identified as &lt;code&gt;React Native&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A module with both &lt;code&gt;Android Library&lt;/code&gt; and &lt;code&gt;Kotlin&lt;/code&gt; will be identified as &lt;code&gt;Android Library&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing ü§ù&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to open an issue or submit a pull request for any bugs/improvements.&lt;/p&gt; &#xA;&lt;h2&gt;License üìÑ&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/iurysza/module-graph/main/License&#34;&gt;License&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Buy Me a Coffee&lt;/h2&gt; &#xA;&lt;p&gt;If you found this project useful or want to support the development, consider buying me a coffee! Any donations are greatly appreciated and help to support the development. &lt;a href=&#34;https://xkcd.com/2347/&#34;&gt;Relevant xkcd&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.buymeacoffee.com/iurysza&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Pingado&#34; style=&#34;height: 51px !important;width: 217px !important;&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>google-gemini/generative-ai-android</title>
    <updated>2024-05-18T01:30:01Z</updated>
    <id>tag:github.com,2024-05-18:/google-gemini/generative-ai-android</id>
    <link href="https://github.com/google-gemini/generative-ai-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google AI SDK for Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google AI SDK for Android&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!CAUTION] &lt;strong&gt;The Google AI SDK for Android is recommended for prototyping only.&lt;/strong&gt; If you plan to enable billing, we strongly recommend that you use a backend SDK to access the Google AI Gemini API. You risk potentially exposing your API key to malicious actors if you embed your API key directly in your Android app or fetch it remotely at runtime.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The Google AI client SDK for Android enables developers to use Google&#39;s state-of-the-art generative AI models (like Gemini) to build AI-powered features and applications. This SDK supports use cases like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate text from text-only input&lt;/li&gt; &#xA; &lt;li&gt;Generate text from text-and-images input (multimodal)&lt;/li&gt; &#xA; &lt;li&gt;Build multi-turn conversations (chat)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, with just a few lines of code, you can access Gemini&#39;s multimodal capabilities to generate text from text-and-image input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val generativeModel = GenerativeModel(&#xA;    modelName = &#34;gemini-1.5-pro-latest&#34;,&#xA;    apiKey = BuildConfig.apiKey&#xA;)&#xA;&#xA;val cookieImage: Bitmap = // ...&#xA;val inputContent = content() {&#xA;  image(cookieImage)&#xA;  text(&#34;Does this look store-bought or homemade?&#34;)&#xA;}&#xA;&#xA;val response = generativeModel.generateContent(inputContent)&#xA;print(response.text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you want to access Gemini on-device (Gemini Nano), check out the &lt;a href=&#34;https://ai.google.dev/tutorials/android_aicore&#34;&gt;Google AI Edge SDK for Android&lt;/a&gt;, which is enabled via Android AICore.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Try out the sample Android app&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a sample app demonstrating how the SDK can access and utilize the Gemini model for various use cases.&lt;/p&gt; &#xA;&lt;p&gt;To try out the sample app you can directly import the project from Android Studio via &lt;strong&gt;File &amp;gt; New &amp;gt; Import Sample&lt;/strong&gt; and searching for &lt;em&gt;Generative AI Sample&lt;/em&gt; or follow these steps below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Check out this repository.&lt;br&gt; &lt;code&gt;git clone https://github.com/google/generative-ai-android&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;Obtain an API key&lt;/a&gt; to use with the Google AI SDKs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open and build the sample app in the &lt;code&gt;generativeai-android-sample&lt;/code&gt; folder of this repo.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Paste your API key into the &lt;code&gt;apiKey&lt;/code&gt; property in the &lt;code&gt;local.properties&lt;/code&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the app.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation and usage&lt;/h2&gt; &#xA;&lt;p&gt;Add the dependency &lt;code&gt;implementation(&#34;com.google.ai.client.generativeai:generativeai:&amp;lt;version&amp;gt;&#34;&lt;/code&gt;) to your Android project.&lt;/p&gt; &#xA;&lt;p&gt;For detailed instructions, you can find a &lt;a href=&#34;https://ai.google.dev/tutorials/android_quickstart&#34;&gt;quickstart&lt;/a&gt; for the Google AI client SDK for Android in the Google documentation.&lt;/p&gt; &#xA;&lt;p&gt;This quickstart describes how to add your API key and the SDK&#39;s dependency to your app, initialize the model, and then call the API to access the model. It also describes some additional use cases and features, like streaming, counting tokens, and controlling responses.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Find complete documentation for the Google AI SDKs and the Gemini model in the Google documentation:&lt;br&gt; &lt;a href=&#34;https://ai.google.dev/docs&#34;&gt;https://ai.google.dev/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/google/generative-ai-android/raw/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for more information on contributing to the Google AI client SDK for Android.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository are licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>