<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-25T01:44:03Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ben-manes/gradle-versions-plugin</title>
    <updated>2022-06-25T01:44:03Z</updated>
    <id>tag:github.com,2022-06-25:/ben-manes/gradle-versions-plugin</id>
    <link href="https://github.com/ben-manes/gradle-versions-plugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gradle plugin to discover dependency updates&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ben-manes/gradle-versions-plugin/actions&#34;&gt;&lt;img src=&#34;https://github.com/ben-manes/gradle-versions-plugin/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plugins.gradle.org/plugin/com.github.ben-manes.versions&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-metadata/v/https/plugins.gradle.org/m2/com/github/ben-manes/versions/com.github.ben-manes.versions.gradle.plugin/maven-metadata.xml.svg?label=gradlePluginPortal&#34; alt=&#34;gradlePluginPortal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Gradle Versions Plugin&lt;/h1&gt; &#xA;&lt;p&gt;In the spirit of the &lt;a href=&#34;https://www.mojohaus.org/versions-maven-plugin&#34;&gt;Maven Versions Plugin&lt;/a&gt;, this plugin provides a task to determine which dependencies have updates. Additionally, the plugin checks for updates to Gradle itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#plugins-block&#34;&gt;plugins block&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#buildscript-block&#34;&gt;buildscript block&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#using-a-gradle-init-script&#34;&gt;Using a Gradle init script&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#related-plugins&#34;&gt;Related plugins&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#dependencyupdates&#34;&gt;dependencyUpdates&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#multi-project-build&#34;&gt;Multi-project build&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#revisions&#34;&gt;Revisions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#rejectversionsif-and-componentselection&#34;&gt;RejectVersionsIf and componentSelection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#gradle-release-channel&#34;&gt;Gradle Release Channel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#constraints&#34;&gt;Constraints&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#kotlin-dsl&#34;&gt;Kotlin DSL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#try-out-the-samples&#34;&gt;Try out the samples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/#report-format&#34;&gt;Report format&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can add this plugin to your top-level build script using the following configuration:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;plugins&lt;/code&gt; block:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;plugins {&#xA;  id &#34;com.github.ben-manes.versions&#34; version &#34;$version&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or via the&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;buildscript&lt;/code&gt; block:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;apply plugin: &#34;com.github.ben-manes.versions&#34;&#xA;&#xA;buildscript {&#xA;  repositories {&#xA;    gradlePluginPortal()&#xA;  }&#xA;&#xA;  dependencies {&#xA;    classpath &#34;com.github.ben-manes:gradle-versions-plugin:$version&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a Gradle init script&lt;/h3&gt; &#xA;&lt;p&gt;You can also transparently add the plugin to every Gradle project that you run via a Gradle init script, e.g. &lt;code&gt;$HOME/.gradle/init.d/add-versions-plugin.gradle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;initscript {&#xA;  repositories {&#xA;     gradlePluginPortal()&#xA;  }&#xA;&#xA;  dependencies {&#xA;    classpath &#39;com.github.ben-manes:gradle-versions-plugin:+&#39;&#xA;  }&#xA;}&#xA;&#xA;allprojects {&#xA;  apply plugin: com.github.benmanes.gradle.versions.VersionsPlugin&#xA;&#xA;  tasks.named(&#34;dependencyUpdates&#34;).configure {&#xA;    // configure the task, for example wrt. resolution strategies&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Related Plugins&lt;/h3&gt; &#xA;&lt;p&gt;You may also wish to explore additional functionality provided by,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/littlerobots/version-catalog-update-plugin&#34;&gt;version-catalog-update-plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/janderssonse/gradle-versions-filter-plugin&#34;&gt;gradle-versions-filter-plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevcodez/gradle-upgrade-interactive&#34;&gt;gradle-upgrade-interactive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/patrikerdes/gradle-use-latest-versions-plugin&#34;&gt;gradle-use-latest-versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/actions/gradle-update-checker&#34;&gt;gradle-update-checker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fkorotkov/gradle-libraries-plugin&#34;&gt;gradle-libraries-plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/y-yagi/gradle-update-notifier&#34;&gt;gradle-update-notifier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmfayard/refreshVersions&#34;&gt;refreshVersions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tasks&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;dependencyUpdates&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Displays a report of the project dependencies that are up-to-date, exceed the latest version found, have upgrades, or failed to be resolved. When a dependency cannot be resolved the exception is logged at the &lt;code&gt;info&lt;/code&gt; level.&lt;/p&gt; &#xA;&lt;p&gt;To refresh the cache (i.e. fetch the new releases/versions of the dependencies), use flag &lt;code&gt;--refresh-dependencies&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Gradle updates are checked for on the &lt;code&gt;current&lt;/code&gt;, &lt;code&gt;release-candidate&lt;/code&gt; and &lt;code&gt;nightly&lt;/code&gt; release channels. The plaintext report displays gradle updates as a separate category in breadcrumb style (excluding nightly builds). The xml and json reports include information about all three release channels, whether a release is considered an update with respect to the running (executing) gradle instance, whether an update check on a release channel has failed, as well as a reason field explaining failures or missing information. The update check may be disabled using the &lt;code&gt;checkForGradleUpdate&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-project build&lt;/h4&gt; &#xA;&lt;p&gt;In a multi-project build, running this task in the root project will generate a consolidated/merged report for dependency updates in all subprojects. Alternatively, you can run the task separately in each subproject to generate separate reports for each subproject.&lt;/p&gt; &#xA;&lt;h4&gt;Revisions&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;revision&lt;/code&gt; task property controls the &lt;a href=&#34;https://ant.apache.org/ivy/history/2.4.0/settings/version-matchers.html#Latest%20(Status)%20Matcher&#34;&gt;Ivy resolution strategy&lt;/a&gt; for determining what constitutes the latest version of a dependency. Maven&#39;s dependency metadata does not distinguish between milestone and release versions. The following strategies are natively supported by Gradle:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;release: selects the latest release&lt;/li&gt; &#xA; &lt;li&gt;milestone: select the latest version being either a milestone or a release (default)&lt;/li&gt; &#xA; &lt;li&gt;integration: selects the latest revision of the dependency module (such as SNAPSHOT)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The strategy can be specified either on the task or as a system property for ad hoc usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;gradle dependencyUpdates -Drevision=release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;RejectVersionsIf and componentSelection&lt;/h4&gt; &#xA;&lt;p&gt;To further define which version to accept, you need to define what means an unstable version. Sadly, there are no agreed standard on this, but this is a good starting point:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def isNonStable = { String version -&amp;gt;&#xA;  def stableKeyword = [&#39;RELEASE&#39;, &#39;FINAL&#39;, &#39;GA&#39;].any { it -&amp;gt; version.toUpperCase().contains(it) }&#xA;  def regex = /^[0-9,.v-]+(-r)?$/&#xA;  return !stableKeyword &amp;amp;&amp;amp; !(version ==~ regex)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun isNonStable(version: String): Boolean {&#xA;    val stableKeyword = listOf(&#34;RELEASE&#34;, &#34;FINAL&#34;, &#34;GA&#34;).any { version.toUpperCase().contains(it) }&#xA;    val regex = &#34;^[0-9,.v-]+(-r)?$&#34;.toRegex()&#xA;    val isStable = stableKeyword || regex.matches(version)&#xA;    return isStable.not()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;You can then configure &lt;a href=&#34;https://docs.gradle.org/current/userguide/dynamic_versions.html#sec:component_selection_rules&#34;&gt;Component Selection Rules&lt;/a&gt;. The current version of a component can be retrieved with the &lt;code&gt;currentVersion&lt;/code&gt; property. You can either use the simplified syntax &lt;code&gt;rejectVersionIf { ... }&lt;/code&gt; or configure a complete resolution strategy.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;!--  Always modify first examples/groovy and make sure that it works. THEN modify the README --&gt; &#xA; &lt;p&gt;Example 1: reject all non stable versions&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// https://github.com/ben-manes/gradle-versions-plugin&#xA;tasks.named(&#34;dependencyUpdates&#34;).configure {&#xA;  rejectVersionIf {&#xA;    isNonStable(it.candidate.version)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Example 2: disallow release candidates as upgradable versions from stable versions&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// https://github.com/ben-manes/gradle-versions-plugin&#xA;tasks.named(&#34;dependencyUpdates&#34;).configure {&#xA;  rejectVersionIf {&#xA;    isNonStable(it.candidate.version) &amp;amp;&amp;amp; !isNonStable(it.currentVersion)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Example 3: using the full syntax&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// https://github.com/ben-manes/gradle-versions-plugin&#xA;tasks.named(&#34;dependencyUpdates&#34;).configure {&#xA;  resolutionStrategy {&#xA;    componentSelection {&#xA;      all {&#xA;        if (isNonStable(it.candidate.version) &amp;amp;&amp;amp; !isNonStable(it.currentVersion)) {&#xA;          reject(&#39;Release candidate&#39;)&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;!--  Always modify first examples/kotlin and make sure that it works. THEN modify the README --&gt; &#xA; &lt;p&gt;Example 1: reject all non stable versions&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask&#xA;&#xA;// https://github.com/ben-manes/gradle-versions-plugin&#xA;tasks.withType&amp;lt;DependencyUpdatesTask&amp;gt; {&#xA;  rejectVersionIf {&#xA;    isNonStable(candidate.version)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Example 2: disallow release candidates as upgradable versions from stable versions&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask&#xA;&#xA;// https://github.com/ben-manes/gradle-versions-plugin&#xA;tasks.withType&amp;lt;DependencyUpdatesTask&amp;gt; {&#xA;  rejectVersionIf {&#xA;    isNonStable(candidate.version) &amp;amp;&amp;amp; !isNonStable(currentVersion)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Example 3: using the full syntax&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask&#xA;&#xA;// https://github.com/ben-manes/gradle-versions-plugin&#xA;tasks.withType&amp;lt;DependencyUpdatesTask&amp;gt; {&#xA;  resolutionStrategy {&#xA;    componentSelection {&#xA;      all {&#xA;        if (isNonStable(candidate.version) &amp;amp;&amp;amp; !isNonStable(currentVersion)) {&#xA;          reject(&#34;Release candidate&#34;)&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Gradle Release Channel&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;gradleReleaseChannel&lt;/code&gt; task property controls which release channel of the Gradle project is used to check for available Gradle updates. Options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;current&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;release-candidate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;release-candidate&lt;/code&gt;. The value can be changed as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencyUpdates.gradleReleaseChannel=&#34;current&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Constraints&lt;/h4&gt; &#xA;&lt;p&gt;If you use constraints, for example to define a BOM using the &lt;a href=&#34;https://docs.gradle.org/current/userguide/java_platform_plugin.html&#34;&gt;&lt;code&gt;java-platform&lt;/code&gt;&lt;/a&gt; plugin or to &lt;a href=&#34;https://docs.gradle.org/current/userguide/dependency_constraints.html&#34;&gt;manage&lt;/a&gt; transitive dependency versions, you can enable checking of constraints by specifying the &lt;code&gt;checkConstraints&lt;/code&gt; attribute of the &lt;code&gt;dependencyUpdates&lt;/code&gt; task. If you want to check external constraints (defined in init scripts or by Gradle since 7.3.2) you can do so by specifying the &lt;code&gt;checkBuildEnvironmentConstraints&lt;/code&gt; attribute of the &lt;code&gt;dependencyUpdates&lt;/code&gt; task.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;tasks.named(&#34;dependencyUpdates&#34;).configure {&#xA;    checkConstraints = true&#xA;    checkBuildEnvironmentConstraints = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kotlin DSL&lt;/h4&gt; &#xA;&lt;p&gt;If using Gradle&#39;s &lt;a href=&#34;https://github.com/gradle/kotlin-dsl&#34;&gt;kotlin-dsl&lt;/a&gt;, you could configure the &lt;code&gt;dependencyUpdates&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask&#xA;&#xA;tasks.named&amp;lt;DependencyUpdatesTask&amp;gt;(&#34;dependencyUpdates&#34;).configure {&#xA;&#xA;  // optional parameters&#xA;  checkForGradleUpdate = true&#xA;  outputFormatter = &#34;json&#34;&#xA;  outputDir = &#34;build/dependencyUpdates&#34;&#xA;  reportfileName = &#34;report&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Do use the &lt;code&gt;plugins { .. }&lt;/code&gt; syntax if you use the Kotlin DSL.&lt;/p&gt; &#xA;&lt;h4&gt;Try out the samples&lt;/h4&gt; &#xA;&lt;p&gt;Have a look at &lt;a href=&#34;https://github.com/ben-manes/gradle-versions-plugin/tree/master/examples/groovy&#34;&gt;&lt;code&gt;examples/groovy&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/ben-manes/gradle-versions-plugin/tree/master/examples/kotlin&#34;&gt;&lt;code&gt;examples/kotlin&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Publish the latest version of the plugin to mavenLocal()&#xA;$ ./gradlew install&#xA;&#xA;# Try out the samples&#xA;$ ./gradlew -p examples/groovy dependencyUpdate&#xA;$ ./gradlew -p examples/kotlin dependencyUpdate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Report format&lt;/h3&gt; &#xA;&lt;p&gt;The task property &lt;code&gt;outputFormatter&lt;/code&gt; controls the report output format. The following values are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;plain&#34;&lt;/code&gt;: format output file as plain text (default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;json&#34;&lt;/code&gt;: format output file as json text&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;xml&#34;&lt;/code&gt;: format output file as xml text, can be used by other plugins (e.g. sonar)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;html&#34;&lt;/code&gt;: format output file as html&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Closure&lt;/code&gt;: will be called with the result of the dependency update analysis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also set multiple output formats using comma as the separator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;gradle dependencyUpdates -Drevision=release -DoutputFormatter=json,xml,html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The task property &lt;code&gt;outputDir&lt;/code&gt; controls the output directory for the report file(s). The directory will be created if it does not exist. The default value is set to &lt;code&gt;build/dependencyUpdates&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;gradle dependencyUpdates -Drevision=release -DoutputFormatter=json -DoutputDir=/any/path/with/permission&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Last the property &lt;code&gt;reportfileName&lt;/code&gt; sets the filename (without extension) of the generated report. It defaults to &lt;code&gt;report&lt;/code&gt;. The extension will be set according to the used output format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;gradle dependencyUpdates -Drevision=release -DoutputFormatter=json -DreportfileName=myCustomReport&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This displays a report to the console.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Text Report&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;------------------------------------------------------------&#xA;: Project Dependency Updates (report to plain text file)&#xA;------------------------------------------------------------&#xA;&#xA;The following dependencies are using the latest integration version:&#xA; - backport-util-concurrent:backport-util-concurrent:3.1&#xA; - backport-util-concurrent:backport-util-concurrent-java12:3.1&#xA;&#xA;The following dependencies exceed the version found at the integration revision level:&#xA; - com.google.guava:guava [99.0-SNAPSHOT &amp;lt;- 16.0-rc1]&#xA;     https://code.google.com/p/guava-libraries&#xA; - com.google.guava:guava-tests [99.0-SNAPSHOT &amp;lt;- 16.0-rc1]&#xA;     https://code.google.com/p/guava-libraries&#xA;&#xA;The following dependencies have later integration versions:&#xA; - com.google.inject:guice [2.0 -&amp;gt; 3.0]&#xA;     https://code.google.com/p/google-guice/&#xA; - com.google.inject.extensions:guice-multibindings [2.0 -&amp;gt; 3.0]&#xA;     https://code.google.com/p/google-guice/&#xA;&#xA;Gradle updates:&#xA; - Gradle: [4.6 -&amp;gt; 4.7 -&amp;gt; 4.8-rc-2]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Alternatively, the report may be outputed to a structured file.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Json report&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;current&#34;: {&#xA;    &#34;dependencies&#34;: [&#xA;      {&#xA;        &#34;group&#34;: &#34;backport-util-concurrent&#34;,&#xA;        &#34;version&#34;: &#34;3.1&#34;,&#xA;        &#34;name&#34;: &#34;backport-util-concurrent&#34;,&#xA;        &#34;projectUrl&#34;: &#34;https://backport-jsr166.sourceforge.net/&#34;&#xA;      },&#xA;      {&#xA;        &#34;group&#34;: &#34;backport-util-concurrent&#34;,&#xA;        &#34;version&#34;: &#34;3.1&#34;,&#xA;        &#34;name&#34;: &#34;backport-util-concurrent-java12&#34;,&#xA;        &#34;projectUrl&#34;: &#34;https://backport-jsr166.sourceforge.net/&#34;&#xA;      }&#xA;    ],&#xA;    &#34;count&#34;: 2&#xA;  },&#xA;  &#34;gradle&#34;: {&#xA;    &#34;enabled&#34;: true,&#xA;    &#34;current&#34;: {&#xA;      &#34;version&#34;: &#34;4.7&#34;,&#xA;      &#34;reason&#34;: &#34;&#34;,&#xA;      &#34;isUpdateAvailable&#34;: true,&#xA;      &#34;isFailure&#34;: false&#xA;    },&#xA;    &#34;nightly&#34;: {&#xA;      &#34;version&#34;: &#34;4.9-20180526235939+0000&#34;,&#xA;      &#34;reason&#34;: &#34;&#34;,&#xA;      &#34;isUpdateAvailable&#34;: true,&#xA;      &#34;isFailure&#34;: false&#xA;    },&#xA;    &#34;releaseCandidate&#34;: {&#xA;      &#34;version&#34;: &#34;4.8-rc-2&#34;,&#xA;      &#34;reason&#34;: &#34;&#34;,&#xA;      &#34;isUpdateAvailable&#34;: true,&#xA;      &#34;isFailure&#34;: false&#xA;    },&#xA;    &#34;running&#34;: {&#xA;      &#34;version&#34;: &#34;4.6&#34;,&#xA;      &#34;reason&#34;: &#34;&#34;,&#xA;      &#34;isUpdateAvailable&#34;: false,&#xA;      &#34;isFailure&#34;: false&#xA;    }&#xA;  },&#xA;  &#34;exceeded&#34;: {&#xA;    &#34;dependencies&#34;: [&#xA;      {&#xA;        &#34;group&#34;: &#34;com.google.guava&#34;,&#xA;        &#34;latest&#34;: &#34;16.0-rc1&#34;,&#xA;        &#34;version&#34;: &#34;99.0-SNAPSHOT&#34;,&#xA;        &#34;name&#34;: &#34;guava&#34;,&#xA;        &#34;projectUrl&#34;: &#34;https://code.google.com/p/guava-libraries&#34;&#xA;      },&#xA;      {&#xA;        &#34;group&#34;: &#34;com.google.guava&#34;,&#xA;        &#34;latest&#34;: &#34;16.0-rc1&#34;,&#xA;        &#34;version&#34;: &#34;99.0-SNAPSHOT&#34;,&#xA;        &#34;name&#34;: &#34;guava-tests&#34;,&#xA;        &#34;projectUrl&#34;: &#34;https://code.google.com/p/guava-libraries&#34;&#xA;      }&#xA;    ],&#xA;    &#34;count&#34;: 2&#xA;  },&#xA;  &#34;outdated&#34;: {&#xA;    &#34;dependencies&#34;: [&#xA;      {&#xA;        &#34;group&#34;: &#34;com.google.inject&#34;,&#xA;        &#34;available&#34;: {&#xA;          &#34;release&#34;: &#34;3.0&#34;,&#xA;          &#34;milestone&#34;: null,&#xA;          &#34;integration&#34;: null&#xA;        },&#xA;        &#34;version&#34;: &#34;2.0&#34;,&#xA;        &#34;name&#34;: &#34;guice&#34;,&#xA;        &#34;projectUrl&#34;: &#34;https://code.google.com/p/google-guice/&#34;&#xA;      },&#xA;      {&#xA;        &#34;group&#34;: &#34;com.google.inject.extensions&#34;,&#xA;        &#34;available&#34;: {&#xA;          &#34;release&#34;: &#34;3.0&#34;,&#xA;          &#34;milestone&#34;: null,&#xA;          &#34;integration&#34;: null&#xA;        },&#xA;        &#34;version&#34;: &#34;2.0&#34;,&#xA;        &#34;name&#34;: &#34;guice-multibindings&#34;,&#xA;        &#34;projectUrl&#34;: &#34;https://code.google.com/p/google-guice/&#34;&#xA;      }&#xA;    ],&#xA;    &#34;count&#34;: 2&#xA;  },&#xA;  &#34;unresolved&#34;: {&#xA;    &#34;dependencies&#34;: [&#xA;      {&#xA;        &#34;group&#34;: &#34;com.github.ben-manes&#34;,&#xA;        &#34;version&#34;: &#34;1.0&#34;,&#xA;        &#34;reason&#34;: &#34;Could not find any version that matches com.github.ben-manes:unresolvable:latest.milestone.&#34;,&#xA;        &#34;name&#34;: &#34;unresolvable&#34;&#xA;      },&#xA;      {&#xA;        &#34;group&#34;: &#34;com.github.ben-manes&#34;,&#xA;        &#34;version&#34;: &#34;1.0&#34;,&#xA;        &#34;reason&#34;: &#34;Could not find any version that matches com.github.ben-manes:unresolvable2:latest.milestone.&#34;,&#xA;        &#34;name&#34;: &#34;unresolvable2&#34;&#xA;      }&#xA;    ],&#xA;    &#34;count&#34;: 2&#xA;  },&#xA;  &#34;count&#34;: 8&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;XML report&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;response&amp;gt;&#xA;  &amp;lt;count&amp;gt;8&amp;lt;/count&amp;gt;&#xA;  &amp;lt;current&amp;gt;&#xA;    &amp;lt;count&amp;gt;2&amp;lt;/count&amp;gt;&#xA;    &amp;lt;dependencies&amp;gt;&#xA;      &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;name&amp;gt;backport-util-concurrent&amp;lt;/name&amp;gt;&#xA;        &amp;lt;group&amp;gt;backport-util-concurrent&amp;lt;/group&amp;gt;&#xA;        &amp;lt;version&amp;gt;3.1&amp;lt;/version&amp;gt;&#xA;        &amp;lt;projectUrl&amp;gt;https://backport-jsr166.sourceforge.net/&amp;lt;/projectUrl&amp;gt;&#xA;      &amp;lt;/dependency&amp;gt;&#xA;      &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;name&amp;gt;backport-util-concurrent-java12&amp;lt;/name&amp;gt;&#xA;        &amp;lt;group&amp;gt;backport-util-concurrent&amp;lt;/group&amp;gt;&#xA;        &amp;lt;version&amp;gt;3.1&amp;lt;/version&amp;gt;&#xA;        &amp;lt;projectUrl&amp;gt;https://backport-jsr166.sourceforge.net/&amp;lt;/projectUrl&amp;gt;&#xA;      &amp;lt;/dependency&amp;gt;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;  &amp;lt;/current&amp;gt;&#xA;  &amp;lt;outdated&amp;gt;&#xA;    &amp;lt;count&amp;gt;2&amp;lt;/count&amp;gt;&#xA;    &amp;lt;dependencies&amp;gt;&#xA;      &amp;lt;outdatedDependency&amp;gt;&#xA;        &amp;lt;name&amp;gt;guice&amp;lt;/name&amp;gt;&#xA;        &amp;lt;group&amp;gt;com.google.inject&amp;lt;/group&amp;gt;&#xA;        &amp;lt;version&amp;gt;2.0&amp;lt;/version&amp;gt;&#xA;        &amp;lt;available&amp;gt;&#xA;          &amp;lt;release&amp;gt;3.0&amp;lt;/release&amp;gt;&#xA;        &amp;lt;/available&amp;gt;&#xA;        &amp;lt;projectUrl&amp;gt;https://code.google.com/p/google-guice/&amp;lt;/projectUrl&amp;gt;&#xA;      &amp;lt;/outdatedDependency&amp;gt;&#xA;      &amp;lt;outdatedDependency&amp;gt;&#xA;        &amp;lt;name&amp;gt;guice-multibindings&amp;lt;/name&amp;gt;&#xA;        &amp;lt;group&amp;gt;com.google.inject.extensions&amp;lt;/group&amp;gt;&#xA;        &amp;lt;version&amp;gt;2.0&amp;lt;/version&amp;gt;&#xA;        &amp;lt;available&amp;gt;&#xA;          &amp;lt;release&amp;gt;3.0&amp;lt;/release&amp;gt;&#xA;        &amp;lt;/available&amp;gt;&#xA;        &amp;lt;projectUrl&amp;gt;https://code.google.com/p/guava-libraries&amp;lt;/projectUrl&amp;gt;&#xA;      &amp;lt;/outdatedDependency&amp;gt;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;  &amp;lt;/outdated&amp;gt;&#xA;  &amp;lt;exceeded&amp;gt;&#xA;    &amp;lt;count&amp;gt;2&amp;lt;/count&amp;gt;&#xA;    &amp;lt;dependencies&amp;gt;&#xA;      &amp;lt;exceededDependency&amp;gt;&#xA;        &amp;lt;name&amp;gt;guava&amp;lt;/name&amp;gt;&#xA;        &amp;lt;group&amp;gt;com.google.guava&amp;lt;/group&amp;gt;&#xA;        &amp;lt;version&amp;gt;99.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;        &amp;lt;latest&amp;gt;16.0-rc1&amp;lt;/latest&amp;gt;&#xA;        &amp;lt;projectUrl&amp;gt;https://code.google.com/p/guava-libraries&amp;lt;/projectUrl&amp;gt;&#xA;      &amp;lt;/exceededDependency&amp;gt;&#xA;      &amp;lt;exceededDependency&amp;gt;&#xA;        &amp;lt;name&amp;gt;guava-tests&amp;lt;/name&amp;gt;&#xA;        &amp;lt;group&amp;gt;com.google.guava&amp;lt;/group&amp;gt;&#xA;        &amp;lt;version&amp;gt;99.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xA;        &amp;lt;latest&amp;gt;16.0-rc1&amp;lt;/latest&amp;gt;&#xA;        &amp;lt;projectUrl&amp;gt;https://code.google.com/p/guava-libraries&amp;lt;/projectUrl&amp;gt;&#xA;      &amp;lt;/exceededDependency&amp;gt;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;  &amp;lt;/exceeded&amp;gt;&#xA;  &amp;lt;unresolved&amp;gt;&#xA;    &amp;lt;count&amp;gt;2&amp;lt;/count&amp;gt;&#xA;    &amp;lt;dependencies&amp;gt;&#xA;      &amp;lt;unresolvedDependency&amp;gt;&#xA;        &amp;lt;name&amp;gt;unresolvable&amp;lt;/name&amp;gt;&#xA;        &amp;lt;group&amp;gt;com.github.ben-manes&amp;lt;/group&amp;gt;&#xA;        &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;&#xA;        &amp;lt;reason&amp;gt;Could not find any version that matches com.github.ben-manes:unresolvable:latest.release.&amp;lt;/reason&amp;gt;&#xA;      &amp;lt;/unresolvedDependency&amp;gt;&#xA;      &amp;lt;unresolvedDependency&amp;gt;&#xA;        &amp;lt;name&amp;gt;unresolvable2&amp;lt;/name&amp;gt;&#xA;        &amp;lt;group&amp;gt;com.github.ben-manes&amp;lt;/group&amp;gt;&#xA;        &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;&#xA;        &amp;lt;reason&amp;gt;Could not find any version that matches com.github.ben-manes:unresolvable2:latest.release.&amp;lt;/reason&amp;gt;&#xA;      &amp;lt;/unresolvedDependency&amp;gt;&#xA;    &amp;lt;/dependencies&amp;gt;&#xA;  &amp;lt;/unresolved&amp;gt;&#xA;  &amp;lt;gradle&amp;gt;&#xA;    &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xA;    &amp;lt;running&amp;gt;&#xA;      &amp;lt;version&amp;gt;4.6&amp;lt;/version&amp;gt;&#xA;      &amp;lt;isUpdateAvailable&amp;gt;false&amp;lt;/isUpdateAvailable&amp;gt;&#xA;      &amp;lt;isFailure&amp;gt;false&amp;lt;/isFailure&amp;gt;&#xA;      &amp;lt;reason&amp;gt;&amp;lt;/reason&amp;gt;&#xA;    &amp;lt;/running&amp;gt;&#xA;    &amp;lt;current&amp;gt;&#xA;      &amp;lt;version&amp;gt;4.7&amp;lt;/version&amp;gt;&#xA;      &amp;lt;isUpdateAvailable&amp;gt;true&amp;lt;/isUpdateAvailable&amp;gt;&#xA;      &amp;lt;isFailure&amp;gt;false&amp;lt;/isFailure&amp;gt;&#xA;      &amp;lt;reason&amp;gt;&amp;lt;/reason&amp;gt;&#xA;    &amp;lt;/current&amp;gt;&#xA;    &amp;lt;releaseCandidate&amp;gt;&#xA;      &amp;lt;version&amp;gt;4.8-rc-2&amp;lt;/version&amp;gt;&#xA;      &amp;lt;isUpdateAvailable&amp;gt;true&amp;lt;/isUpdateAvailable&amp;gt;&#xA;      &amp;lt;isFailure&amp;gt;false&amp;lt;/isFailure&amp;gt;&#xA;      &amp;lt;reason&amp;gt;&amp;lt;/reason&amp;gt;&#xA;    &amp;lt;/releaseCandidate&amp;gt;&#xA;    &amp;lt;nightly&amp;gt;&#xA;      &amp;lt;version&amp;gt;4.9-20180526235939+0000&amp;lt;/version&amp;gt;&#xA;      &amp;lt;isUpdateAvailable&amp;gt;true&amp;lt;/isUpdateAvailable&amp;gt;&#xA;      &amp;lt;isFailure&amp;gt;false&amp;lt;/isFailure&amp;gt;&#xA;      &amp;lt;reason&amp;gt;&amp;lt;/reason&amp;gt;&#xA;    &amp;lt;/nightly&amp;gt;&#xA;  &amp;lt;/gradle&amp;gt;&#xA;&amp;lt;/response&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;HTML report&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/examples/html-report.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/examples/html-report.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Custom report&lt;/summary&gt; &#xA; &lt;p&gt;If you need to create a report in a custom format, you can set the &lt;code&gt;dependencyUpdates&lt;/code&gt; tasks&#39;s &lt;code&gt;outputFormatter&lt;/code&gt; property to a Closure. The closure will be called with a single argument that is an instance of &lt;a href=&#34;https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/master/src/main/groovy/com/github/benmanes/gradle/versions/reporter/result/Result.groovy&#34;&gt;com.github.benmanes.gradle.versions.reporter.result.Result&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;For example, if you wanted to create an html table for the upgradable dependencies, you could use:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;tasks.named(&#34;dependencyUpdates&#34;).configure {&#xA;  outputFormatter = { result -&amp;gt;&#xA;    def updatable = result.outdated.dependencies&#xA;    if (!updatable.isEmpty()){&#xA;      def writer = new StringWriter()&#xA;      def html = new groovy.xml.MarkupBuilder(writer)&#xA;&#xA;      html.html {&#xA;        body {&#xA;          table {&#xA;            thead {&#xA;              tr {&#xA;                td(&#34;Group&#34;)&#xA;                td(&#34;Module&#34;)&#xA;                td(&#34;Current version&#34;)&#xA;                td(&#34;Latest version&#34;)&#xA;              }&#xA;            }&#xA;            tbody {&#xA;              updatable.each { dependency-&amp;gt;&#xA;                tr {&#xA;                  td(dependency.group)&#xA;                  td(dependency.name)&#xA;                  td(dependency.version)&#xA;                  td(dependency.available.release ?: dependency.available.milestone)&#xA;                }&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;      println writer.toString()&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>stripe/stripe-android</title>
    <updated>2022-06-25T01:44:03Z</updated>
    <id>tag:github.com,2022-06-25:/stripe/stripe-android</id>
    <link href="https://github.com/stripe/stripe-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stripe Android SDK&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://stripe.com/docs/mobile/android&#34;&gt;&lt;img width=&#34;250&#34; height=&#34;119&#34; src=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/assets/stripe_logo_slate_small.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Stripe Android SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stripe/stripe-android/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/stripe/stripe-android/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stripe/stripe-android/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/stripe/stripe-android.svg?maxAge=60&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stripe/stripe-android/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/stripe/stripe-android&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Stripe Android SDK makes it quick and easy to build an excellent payment experience in your Android app. We provide powerful and customizable UI elements that can be used out-of-the-box to collect your users&#39; payment details. We also expose the low-level APIs that power those UIs so that you can build fully custom experiences.&lt;/p&gt; &#xA;&lt;p&gt;Get started with our &lt;a href=&#34;https://stripe.com/docs/payments/accept-a-payment?platform=android&#34;&gt;📚 integration guides&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/#examples&#34;&gt;example projects&lt;/a&gt;, or &lt;a href=&#34;https://stripe.dev/stripe-android/&#34;&gt;📘 browse the SDK reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Updating to a newer version of the SDK? See our &lt;a href=&#34;https://github.com/stripe/stripe-android/raw/master/MIGRATING.md&#34;&gt;migration guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/stripe/stripe-android/raw/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Table of contents&lt;/h1&gt; &#xA;&lt;!--ts--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/#releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--te--&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simplified Security&lt;/strong&gt;: Use the SDK to collect credit card numbers and remain &lt;a href=&#34;https://stripe.com/docs/security#pci-dss-guidelines&#34;&gt;PCI compliant&lt;/a&gt;. This means sensitive data is sent directly to Stripe instead of passing through your server. For more information, see our &lt;a href=&#34;https://stripe.com/docs/security&#34;&gt;Integration Security Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SCA-Ready&lt;/strong&gt;: The SDK automatically performs native &lt;a href=&#34;https://stripe.com/docs/payments/3d-secure&#34;&gt;3D Secure authentication&lt;/a&gt; to comply with &lt;a href=&#34;https://stripe.com/docs/strong-customer-authentication&#34;&gt;Strong Customer Authentication&lt;/a&gt; regulation in Europe.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Native UI&lt;/strong&gt;: We provide native screens and elements to collect payment. For example, &lt;a href=&#34;https://stripe.com/docs/payments/accept-a-payment?platform=android&#34;&gt;PaymentSheet&lt;/a&gt; is a prebuilt UI that combines all the steps required to pay - collecting payment details, and confirming the payment - into a single sheet that displays on top of your app.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/assets/payment_sheet_complete.png&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Google Pay&lt;/strong&gt;: Stripe is fully compatible with &lt;a href=&#34;https://stripe.com/docs/google-pay&#34;&gt;Google Pay&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stripe API&lt;/strong&gt;: We provide &lt;a href=&#34;https://stripe.dev/stripe-android/payments-core/com.stripe.android/-stripe/index.html&#34;&gt;low-level APIs&lt;/a&gt; that correspond to objects and methods in the Stripe API. You can build a custom UI on top of this layer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Localized&lt;/strong&gt;: We support the following localizations: Bulgarian, Catalan, Chinese (Hong Kong), Chinese (Simplified), Chinese (Traditional), Croatian, Czech, Danish, Dutch, English (US), English (United Kingdom), Estonian, Filipino, Finnish, French, French (Canada), German, Greek, Hungarian, Indonesian, Italian, Japanese, Korean, Latvian, Lithuanian, Malay, Maltese, Norwegian Bokmål, Norwegian Nynorsk (Norway), Polish, Portuguese, Portuguese (Brazil), Romanian, Russian, Slovak, Slovenian, Spanish, Spanish (Latin America), Swedish, Turkish, Thai and Vietnamese.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Recommended usage&lt;/strong&gt; If you&#39;re selling digital products or services that will be consumed within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), and you plan to distribute it through the Google Play Store, you must use Googles&#39;s in-app purchase APIs. See the &lt;a href=&#34;https://developer.android.com/distribute/play-billing&#34;&gt;Google Play Billing&lt;/a&gt; for more information. For all other scenarios you can use this SDK to process payments via Stripe.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt; provides a summary of changes in each release.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/MIGRATING.md&#34;&gt;migration guide&lt;/a&gt; provides instructions on upgrading from older versions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android 5.0 (API level 21) and above&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio/releases/gradle-plugin&#34;&gt;Android Gradle Plugin&lt;/a&gt; 3.5.1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gradle.org/releases/&#34;&gt;Gradle&lt;/a&gt; 5.4.1+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/jetpack/androidx/&#34;&gt;AndroidX&lt;/a&gt; (as of v11.0.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;stripe-android&lt;/code&gt; to your &lt;code&gt;build.gradle&lt;/code&gt; dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies {&#xA;    implementation &#39;com.stripe:stripe-android:20.6.2&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Integration&lt;/h3&gt; &#xA;&lt;p&gt;Get started with our &lt;a href=&#34;https://stripe.com/docs/payments/accept-a-payment?platform=android&#34;&gt;📚 integration guides&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/stripe/stripe-android/master/#examples&#34;&gt;example projects&lt;/a&gt;, or &lt;a href=&#34;https://stripe.dev/stripe-android/&#34;&gt;📘 browse the SDK reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/stripe/stripe-android/tree/master/paymentsheet-example&#34;&gt;PaymentSheet example project&lt;/a&gt; demonstrates how to integrate and use our prebuilt ui (single-step and multi-step).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/stripe/stripe-android/tree/master/example&#34;&gt;example project&lt;/a&gt; demonstrates other integrations, that give you more control over the user experience: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;how to use the Stripe class&#39;s synchronous and asynchronous methods&lt;/li&gt; &#xA;   &lt;li&gt;how to use the CardFormView.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mockk/mockk</title>
    <updated>2022-06-25T01:44:03Z</updated>
    <id>tag:github.com,2022-06-25:/mockk/mockk</id>
    <link href="https://github.com/mockk/mockk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mocking library for Kotlin&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mockk/mockk/master/doc/logo-site.png&#34; alt=&#34;mockk&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mockk/mockk/master/doc/kotlin-logo.png&#34; alt=&#34;kotlin&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/mockk-io/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=body_badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/mockk-io/Lobby.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://search.maven.org/#search%7Cga%7C1%7Cmockk&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.mockk/mockk.svg?label=release&#34; alt=&#34;Relase Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mockk/mockk/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/change%20log-%E2%96%A4-yellow.svg?sanitize=true&#34; alt=&#34;Change log&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/mockk/mockk&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/mockk/mockk/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mockk.io/ANDROID&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/android-support-green.svg?sanitize=true&#34; alt=&#34;Android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mockk.io/MATRIX&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/matrix-test-e53994.svg?sanitize=true&#34; alt=&#34;Matrix tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/mockk/mockk&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/mockk/mockk/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Kotlin Academy articles &lt;img src=&#34;https://cdn-images-1.medium.com/letterbox/47/47/50/50/1*FUXqI88mttV_kV8aTrKjOg.png?source=logoAvatar-1f9f77b4b3d1---e57b304801ef&#34; width=&#34;20px&#34;&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Check the series of articles &#34;Mocking is not rocket science&#34; at &lt;a href=&#34;https://blog.kotlin-academy.com&#34;&gt;Kt. Academy&lt;/a&gt; describing MockK from the very basics of mocking up to description of all advanced features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.kotlin-academy.com/mocking-is-not-rocket-science-basics-ae55d0aadf2b&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.kotlin-academy.com/mocking-is-not-rocket-science-expected-behavior-and-behavior-verification-3862dd0e0f03&#34;&gt;Expected behavior and behavior verification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.kotlin-academy.com/mocking-is-not-rocket-science-mockk-features-e5d55d735a98&#34;&gt;MockK features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.kotlin-academy.com/mocking-is-not-rocket-science-mockk-advanced-features-42277e5983b5&#34;&gt;MockK advanced features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Spring support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ninja-Squad/springmockk&#34;&gt;springmockk&lt;/a&gt; introduced in official &lt;a href=&#34;https://spring.io/guides/tutorials/spring-boot-kotlin/&#34;&gt;Spring Boot Kotlin tutorial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quarkus support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quarkiverse/quarkus-mockk&#34;&gt;quarkus-mockk&lt;/a&gt; adds support for mocking beans in Quarkus. Documentation can be found &lt;a href=&#34;https://quarkiverse.github.io/quarkiverse-docs/quarkus-mockk/dev/index.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Kotlin version support&lt;/h3&gt; &#xA;&lt;p&gt;From version 1.10.0 MockK does not support Kotlin 1.2.*&lt;/p&gt; &#xA;&lt;h3&gt;Known issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PowerMock needs a workaround to run together with MockK &lt;a href=&#34;https://github.com/mockk/mockk/issues/79#issuecomment-437646333&#34;&gt;#79&lt;/a&gt;. (not sure after workaround if it is generally usable or not, please somebody report it)&lt;/li&gt; &#xA; &lt;li&gt;Inline functions cannot be mocked: see the discussion on &lt;a href=&#34;https://github.com/mockk/mockk/issues/27&#34;&gt;this issue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Table of contents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;auto-gen TOC: {:toc}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples, guides &amp;amp; articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.novatec-gmbh.de/en/blog/testing-quarkus-with-kotlin-junit-and-mockk/&#34;&gt;Testing Quarkus with Kotlin, JUnit and MockK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sukyology.medium.com/mockk%EC%9D%98-%ED%9D%91%EB%A7%88%EC%88%A0%EC%9D%84-%ED%8C%8C%ED%97%A4%EC%B9%98%EC%9E%90-6fe907129c19&#34;&gt;MockK의 흑마술을 파헤치자! (KO)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zenn.dev/oboenikui/articles/af44c158f9fa35&#34;&gt;Unraveling MockK&#39;s black magic / MockKの「黒魔術」を解明する (JP, but readable through chrome translator)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chao2zhang.medium.com/unraveling-mockks-black-magic-e725c61ed9dd&#34;&gt;Unraveling MockK&#39;s black magic(EN, translation)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://notwoods.github.io/mockk-guidebook/&#34;&gt;Mockk Guidebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://link.medium.com/ObtQ4eBfg5&#34;&gt;“Kotlin Unit Testing with Mockk” by Marco Cattaneo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=J7_4WrImJPk&#34;&gt;(Video) Use verify in MockK to validate function calls on mocked object&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/5443751-testing-with-mockk&#34;&gt;Testing With MockK paid course on raywenderlich.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TDD for Android video tutorial &lt;a href=&#34;https://www.youtube.com/watch?v=60KFJTb_HwU&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=32pnzGirvgM&#34;&gt;part 2&lt;/a&gt; by Ryan Kay&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=h8_LZn1DFDI&#34;&gt;(Video)Android Developer Live Coding #13: Unit Testing with Mockk, Coroutines, Test Driven Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@oleksiypylypenko/mockk-intentions-dbe378106a6b&#34;&gt;MockK: intentions as of Nov 2018&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RX_g65J14H0&amp;amp;feature=youtu.be&amp;amp;t=940&#34;&gt;KotlinConf 2018 - Best Practices for Unit Testing in Kotlin by Philipp Hauer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kotlin/kotlin-fullstack-sample/pull/28/files#diff-eade18fbfd0abfb6338dbfa647b3215dR17&#34;&gt;kotlin-fullstack-sample uses MockK&lt;/a&gt; project covered with tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/new-mocking-tool-for-kotlin-an-alternative-to-java&#34;&gt;DZone article&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://habrahabr.ru/post/341202/&#34;&gt;Habrahabr article&lt;/a&gt; (RU)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ordina-jworks.github.io/testing/2018/02/05/Writing-tests-in-Kotlin-with-MockK.html&#34;&gt;Mocking in Kotlin with MockK - Yannick De Turck&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Japanese guides and articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qiita.com/yasuX/items/d3cfc9853c53dfaee222&#34;&gt;Documentation translation to Japanese&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chinese guides and articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/joe-tsai/mockk-%E4%B8%80%E6%AC%BE%E5%BC%B7%E5%A4%A7%E7%9A%84-kotlin-mocking-library-part-1-4-39a85e42b8&#34;&gt;用 Kotlin + Mockito 寫單元測試會碰到什麼問題？&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/joe-tsai/mockk-%E4%B8%80%E6%AC%BE%E5%BC%B7%E5%A4%A7%E7%9A%84-kotlin-mocking-library-part-2-4-4be059331110&#34;&gt;MockK 功能介紹：mockk, every, Annotation, verify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/joe-tsai/mockk-%E4%B8%80%E6%AC%BE%E5%BC%B7%E5%A4%A7%E7%9A%84-kotlin-mocking-library-part-3-4-79b40fb73964&#34;&gt;MockK 功能介紹：Relaxed Mocks, 再談 Verify, Capture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/joe-tsai/mockk-%E4%B8%80%E6%AC%BE%E5%BC%B7%E5%A4%A7%E7%9A%84-kotlin-mocking-library-part-4-4-f82443848a3a&#34;&gt;如何測試 Static Method, Singleton&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;All you need to get started is just to add a dependency to &lt;code&gt;MockK&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;h4&gt;Gradle/maven dependency&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th&gt;Approach&lt;/th&gt;&#xA;   &lt;th&gt;Instruction&lt;/th&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mockk/mockk/master/doc/gradle.png&#34; alt=&#34;Gradle&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &amp;nbsp; &amp;nbsp;&lt;pre&gt;testImplementation &#34;io.mockk:mockk:{version}&#34;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mockk/mockk/master/doc/gradle.png&#34; alt=&#34;Gradle&#34;&gt; (Kotlin DSL)&lt;/td&gt; &#xA;   &lt;td&gt; &amp;nbsp; &amp;nbsp;&lt;pre&gt;testImplementation(&#34;io.mockk:mockk:{version}&#34;)&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mockk/mockk/master/doc/maven.png&#34; alt=&#34;Maven&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;io.mockk&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;mockk&amp;lt;/artifactId&amp;gt;&#xA; &amp;nbsp; &amp;nbsp;&amp;lt;version&amp;gt;{version}&amp;lt;/version&amp;gt;&#xA;    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mockk/mockk/master/ANDROID.md&#34;&gt;&lt;img align=&#34;top&#34; src=&#34;https://raw.githubusercontent.com/mockk/mockk/master/doc/robot-small.png&#34; height=&#34;20&#34; alt=&#34;android&#34;&gt; Unit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&#xA;testImplementation &#34;io.mockk:mockk:{version}&#34;&#xA;testImplementation &#34;io.mockk:mockk-agent-jvm:{version}&#34;&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mockk/mockk/master/ANDROID.md&#34;&gt;&lt;img align=&#34;top&#34; src=&#34;https://raw.githubusercontent.com/mockk/mockk/master/doc/robot-small.png&#34; height=&#34;20&#34; alt=&#34;android&#34;&gt; Instrumented&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&#xA;androidTestImplementation &#34;io.mockk:mockk-android:{version}&#34;&#xA;androidTestImplementation &#34;io.mockk:mockk-agent-jvm:{version}&#34;&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Common multiplatform&lt;/td&gt; &#xA;   &lt;td&gt; &amp;nbsp; &amp;nbsp;&lt;pre&gt;testImplementation &#34;io.mockk:mockk-common:{version}&#34;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;DSL examples&lt;/h2&gt; &#xA;&lt;p&gt;Simplest example. By default mocks are strict, so you need to provide some behaviour.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val car = mockk&amp;lt;Car&amp;gt;()&#xA;&#xA;every { car.drive(Direction.NORTH) } returns Outcome.OK&#xA;&#xA;car.drive(Direction.NORTH) // returns OK&#xA;&#xA;verify { car.drive(Direction.NORTH) }&#xA;&#xA;confirmVerified(car)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Annotations&lt;/h3&gt; &#xA;&lt;p&gt;You can use annotations to simplify the creation of mock objects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;&#xA;class TrafficSystem {&#xA;  lateinit var car1: Car&#xA;  &#xA;  lateinit var car2: Car&#xA;  &#xA;  lateinit var car3: Car&#xA;}&#xA;&#xA;class CarTest {&#xA;  @MockK&#xA;  lateinit var car1: Car&#xA;&#xA;  @RelaxedMockK&#xA;  lateinit var car2: Car&#xA;&#xA;  @MockK(relaxUnitFun = true)&#xA;  lateinit var car3: Car&#xA;&#xA;  @SpyK&#xA;  var car4 = Car()&#xA;  &#xA;  @InjectMockKs&#xA;  var trafficSystem = TrafficSystem()&#xA;  &#xA;  @Before&#xA;  fun setUp() = MockKAnnotations.init(this, relaxUnitFun = true) // turn relaxUnitFun on for all mocks&#xA;&#xA;  @Test&#xA;  fun calculateAddsValues1() {&#xA;      // ... use car1, car2, car3 and car4&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Injection first tries to match properties by name, then by class or superclass. Check the &lt;code&gt;lookupType&lt;/code&gt; parameter for customization.&lt;/p&gt; &#xA;&lt;p&gt;Properties are injected even if &lt;code&gt;private&lt;/code&gt; is applied. Constructors for injection are selected from the biggest number of arguments to lowest.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;@InjectMockKs&lt;/code&gt; by default injects only &lt;code&gt;lateinit var&lt;/code&gt;s or &lt;code&gt;var&lt;/code&gt;s that are not assigned. To change this, use &lt;code&gt;overrideValues = true&lt;/code&gt;. This would assign the value even if it is already initialized somehow. To inject &lt;code&gt;val&lt;/code&gt;s, use &lt;code&gt;injectImmutable = true&lt;/code&gt;. For a shorter notation use &lt;code&gt;@OverrideMockKs&lt;/code&gt; which does the same as &lt;code&gt;@InjectMockKs&lt;/code&gt; by default, but turns these two flags on.&lt;/p&gt; &#xA;&lt;h3&gt;JUnit4&lt;/h3&gt; &#xA;&lt;p&gt;JUnit 4 exposes a rule-based API to allow for some automation following the test lifecycle. MockK includes a rule which uses this to set up and tear down your mocks without needing to manually call &lt;code&gt;MockKAnnotations.init(this)&lt;/code&gt;. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class CarTest {&#xA;  @get:Rule&#xA;  val mockkRule = MockKRule(this)&#xA;&#xA;  @MockK&#xA;  lateinit var car1: Car&#xA;&#xA;  @RelaxedMockK&#xA;  lateinit var car2: Car&#xA;&#xA;  @Test&#xA;  fun something() {&#xA;     every { car1.drive() } just runs&#xA;     every { car2.changeGear(any()) } returns true&#xA;     // etc&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JUnit5&lt;/h4&gt; &#xA;&lt;p&gt;In JUnit5 you can use &lt;code&gt;MockKExtension&lt;/code&gt; to initialize your mocks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@ExtendWith(MockKExtension::class)&#xA;class CarTest {&#xA;  @MockK&#xA;  lateinit var car1: Car&#xA;&#xA;  @RelaxedMockK&#xA;  lateinit var car2: Car&#xA;&#xA;  @MockK(relaxUnitFun = true)&#xA;  lateinit var car3: Car&#xA;&#xA;  @SpyK&#xA;  var car4 = Car()&#xA;&#xA;  @Test&#xA;  fun calculateAddsValues1() {&#xA;      // ... use car1, car2, car3 and car4&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, it adds the possibility to use &lt;code&gt;@MockK&lt;/code&gt; and &lt;code&gt;@RelaxedMockK&lt;/code&gt; on test function parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Test&#xA;fun calculateAddsValues1(@MockK car1: Car, @RelaxedMockK car2: Car) {&#xA;  // ... use car1 and car2&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, this extension will call &lt;code&gt;unmockkAll&lt;/code&gt; in a &lt;code&gt;@AfterAll&lt;/code&gt; callback, ensuring your test environment is clean after each test class execution. You can disable this behavior by adding the &lt;code&gt;@MockKExtension.KeepMocks&lt;/code&gt; annotation to your class or globally by setting the &lt;code&gt;mockk.junit.extension.keepmocks=true&lt;/code&gt; property&lt;/p&gt; &#xA;&lt;h4&gt;Automatic verification confirmation&lt;/h4&gt; &#xA;&lt;p&gt;You can make sure that all stubbed methods are actually verified by also annotating your test class with &lt;code&gt;@MockKExtension.ConfirmVerification&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This will internally call &lt;code&gt;confirmVerified&lt;/code&gt; on all mocks after each test, to make sure there are no unnecessary stubbings.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this behavior may not work as expected when running tests in your IDE, as it is Gradle who takes care of handling the exception being thrown when these &lt;code&gt;confirmVerified&lt;/code&gt; calls fail.&lt;/p&gt; &#xA;&lt;h4&gt;Automatic unnecessary stubbing check&lt;/h4&gt; &#xA;&lt;p&gt;You can make sure that all stubbed methods are useful - used at least once - by also annotating your test class with &lt;code&gt;@MockKExtension.CheckUnnecessaryStub&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This will internally call &lt;code&gt;checkUnnecessaryStub&lt;/code&gt; on all mocks after each test, to make sure there are no unnecessary stubbings.&lt;/p&gt; &#xA;&lt;h3&gt;Spy&lt;/h3&gt; &#xA;&lt;p&gt;Spies allow you to mix mocks and real objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val car = spyk(Car()) // or spyk&amp;lt;Car&amp;gt;() to call the default constructor&#xA;&#xA;car.drive(Direction.NORTH) // returns whatever the real function of Car returns&#xA;&#xA;verify { car.drive(Direction.NORTH) }&#xA;&#xA;confirmVerified(car)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: the spy object is a copy of the passed object.&lt;/p&gt; &#xA;&lt;h3&gt;Relaxed mock&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;relaxed mock&lt;/code&gt; is the mock that returns some simple value for all functions. This allows you to skip specifying behavior for each case, while still stubbing things you need. For reference types, chained mocks are returned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val car = mockk&amp;lt;Car&amp;gt;(relaxed = true)&#xA;&#xA;car.drive(Direction.NORTH) // returns null&#xA;&#xA;verify { car.drive(Direction.NORTH) }&#xA;&#xA;confirmVerified(car)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: relaxed mocking is working badly with generic return types. A class cast exception is usually thrown in this case. Opt for stubbing manually in the case of a generic return type.&lt;/p&gt; &#xA;&lt;p&gt;Workaround:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val func = mockk&amp;lt;() -&amp;gt; Car&amp;gt;(relaxed = true) // in this case invoke function has generic return type&#xA;&#xA;// this line is workaround, without it the relaxed mock would throw a class cast exception on the next line&#xA;every { func() } returns Car() // or you can return mockk() for example &#xA;&#xA;func()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Partial mocking&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes, you need to stub some functions, but still call the real method on others, or on specific arguments. This is possible by passing &lt;code&gt;callOriginal()&lt;/code&gt; to &lt;code&gt;answers&lt;/code&gt;, which works for both relaxed and non-relaxed mocks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Adder {&#xA; fun addOne(num: Int) = num + 1&#xA;}&#xA;&#xA;val adder = mockk&amp;lt;Adder&amp;gt;()&#xA;&#xA;every { adder.addOne(any()) } returns -1&#xA;every { adder.addOne(3) } answers { callOriginal() }&#xA;&#xA;assertEquals(-1, adder.addOne(2))&#xA;assertEquals(4, adder.addOne(3)) // original function is called&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mock relaxed for functions returning Unit&lt;/h3&gt; &#xA;&lt;p&gt;If you want &lt;code&gt;Unit&lt;/code&gt;-returning functions to be relaxed, you can use &lt;code&gt;relaxUnitFun = true&lt;/code&gt; as an argument to the &lt;code&gt;mockk&lt;/code&gt; function, &lt;code&gt;@MockK&lt;/code&gt;annotation or &lt;code&gt;MockKAnnotations.init&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;mockk&amp;lt;ClassBeingMocked&amp;gt;(relaxUnitFun = true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Annotation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@MockK(relaxUnitFun = true)&#xA;lateinit var mock1: ClassBeingMocked&#xA;init {&#xA;    MockKAnnotations.init(this)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MockKAnnotations.init:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@MockK&#xA;lateinit var mock2: ClassBeingMocked&#xA;init {&#xA;    MockKAnnotations.init(this, relaxUnitFun = true)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Object mocks&lt;/h3&gt; &#xA;&lt;p&gt;Objects can be turned into mocks in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;object ObjBeingMocked {&#xA;  fun add(a: Int, b: Int) = a + b&#xA;}&#xA;&#xA;mockkObject(ObjBeingMocked) // applies mocking to an Object&#xA;&#xA;assertEquals(3, ObjBeingMocked.add(1, 2))&#xA;&#xA;every { ObjBeingMocked.add(1, 2) } returns 55&#xA;&#xA;assertEquals(55, ObjBeingMocked.add(1, 2))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To revert back, use &lt;code&gt;unmockkAll&lt;/code&gt; or &lt;code&gt;unmockkObject&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Before&#xA;fun beforeTests() {&#xA;    mockkObject(ObjBeingMocked)&#xA;    every { MockObj.add(1,2) } returns 55&#xA;}&#xA;&#xA;@Test&#xA;fun willUseMockBehaviour() {&#xA;    assertEquals(55, ObjBeingMocked.add(1,2))&#xA;}&#xA;&#xA;@After&#xA;fun afterTests() {&#xA;    unmockkAll()&#xA;    // or unmockkObject(ObjBeingMocked)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Despite the Kotlin language restrictions, you can create new instances of objects if required by testing logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val newObjectMock = mockk&amp;lt;MockObj&amp;gt;()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Class mock&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you need a mock of an arbitrary class. Use &lt;code&gt;mockkClass&lt;/code&gt; in those cases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val car = mockkClass(Car::class)&#xA;&#xA;every { car.drive(Direction.NORTH) } returns Outcome.OK&#xA;&#xA;car.drive(Direction.NORTH) // returns OK&#xA;&#xA;verify { car.drive(Direction.NORTH) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enumeration mocks&lt;/h3&gt; &#xA;&lt;p&gt;Enums can be mocked using &lt;code&gt;mockkObject&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;enum class Enumeration(val goodInt: Int) {&#xA;    CONSTANT(35),&#xA;    OTHER_CONSTANT(45);&#xA;}&#xA;&#xA;mockkObject(Enumeration.CONSTANT)&#xA;every { Enumeration.CONSTANT.goodInt } returns 42&#xA;assertEquals(42, Enumeration.CONSTANT.goodInt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Constructor mocks&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes, especially in code you don&#39;t own, you need to mock newly created objects. For this purpose, the following constructs are provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class MockCls {&#xA;  fun add(a: Int, b: Int) = a + b&#xA;}&#xA;&#xA;mockkConstructor(MockCls::class)&#xA;&#xA;every { anyConstructed&amp;lt;MockCls&amp;gt;().add(1, 2) } returns 4&#xA;&#xA;assertEquals(4, MockCls().add(1, 2)) // note new object is created&#xA;&#xA;verify { anyConstructed&amp;lt;MockCls&amp;gt;().add(1, 2) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The basic idea is that just after the constructor of the mocked class is executed (any of them), objects become a &lt;code&gt;constructed mock&lt;/code&gt;.&lt;br&gt; Mocking behavior of such a mock is connected to the special &lt;code&gt;prototype mock&lt;/code&gt; denoted by &lt;code&gt;anyConstructed&amp;lt;MockCls&amp;gt;()&lt;/code&gt;.&lt;br&gt; There is one instance per class of such a &lt;code&gt;prototype mock&lt;/code&gt;. Call recording also happens to the &lt;code&gt;prototype mock&lt;/code&gt;.&lt;br&gt; If no behavior for the function is specified, then the original function is executed.&lt;/p&gt; &#xA;&lt;p&gt;In case a class has more than one constructor, each can be mocked separately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class MockCls(private val a: Int = 0) {&#xA;  constructor(x: String) : this(x.toInt())  &#xA;  fun add(b: Int) = a + b&#xA;}&#xA;&#xA;mockkConstructor(MockCls::class)&#xA;&#xA;every { constructedWith&amp;lt;MockCls&amp;gt;().add(1) } returns 2&#xA;every { &#xA;    constructedWith&amp;lt;MockCls&amp;gt;(OfTypeMatcher&amp;lt;String&amp;gt;(String::class)).add(2) // Mocks the constructor which takes a String&#xA;} returns 3&#xA;every {&#xA;    constructedWith&amp;lt;MockCls&amp;gt;(EqMatcher(4)).add(any()) // Mocks the constructor which takes an Int&#xA;} returns 4&#xA;&#xA;assertEquals(2, MockCls().add(1))&#xA;assertEquals(3, MockCls(&#34;2&#34;).add(2))&#xA;assertEquals(4, MockCls(4).add(7))&#xA;&#xA;verify { &#xA;    constructedWith&amp;lt;MockCls&amp;gt;().add(1)&#xA;    constructedWith&amp;lt;MockCls&amp;gt;(&#34;2&#34;).add(2)&#xA;    constructedWith&amp;lt;MockCls&amp;gt;(EqMatcher(4)).add(7)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in this case, a &lt;code&gt;prototype mock&lt;/code&gt; is created for every set of argument matchers passed to &lt;code&gt;constructedWith&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Partial argument matching&lt;/h3&gt; &#xA;&lt;p&gt;You can mix both regular arguments and matchers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val car = mockk&amp;lt;Car&amp;gt;()&#xA;&#xA;every { &#xA;  car.recordTelemetry(&#xA;    speed = more(50),&#xA;    direction = Direction.NORTH, // here eq() is used&#xA;    lat = any(),&#xA;    long = any()&#xA;  )&#xA;} returns Outcome.RECORDED&#xA;&#xA;car.recordTelemetry(60, Direction.NORTH, 51.1377382, 17.0257142)&#xA;&#xA;verify { car.recordTelemetry(60, Direction.NORTH, 51.1377382, 17.0257142) }&#xA;&#xA;confirmVerified(car)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chained calls&lt;/h3&gt; &#xA;&lt;p&gt;You can stub chains of calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val car = mockk&amp;lt;Car&amp;gt;()&#xA;&#xA;every { car.door(DoorType.FRONT_LEFT).windowState() } returns WindowState.UP&#xA;&#xA;car.door(DoorType.FRONT_LEFT) // returns chained mock for Door&#xA;car.door(DoorType.FRONT_LEFT).windowState() // returns WindowState.UP&#xA;&#xA;verify { car.door(DoorType.FRONT_LEFT).windowState() }&#xA;&#xA;confirmVerified(car)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: if the function&#39;s return type is generic then the information about the actual type is gone.&lt;br&gt; To make chained calls work, additional information is required.&lt;br&gt; Most of the time the framework will catch the cast exception and do &lt;code&gt;autohinting&lt;/code&gt;.&lt;br&gt; In the case it is explicitly required, use &lt;code&gt;hint&lt;/code&gt; before making the next call.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;every { obj.op2(1, 2).hint(Int::class).op1(3, 4) } returns 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hierarchical mocking&lt;/h3&gt; &#xA;&lt;p&gt;From version 1.9.1 mocks may be chained into hierarchies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;interface AddressBook {&#xA;    val contacts: List&amp;lt;Contact&amp;gt;&#xA;}&#xA;&#xA;interface Contact {&#xA;    val name: String&#xA;    val telephone: String&#xA;    val address: Address&#xA;}&#xA;&#xA;interface Address {&#xA;    val city: String&#xA;    val zip: String&#xA;}&#xA;&#xA;val addressBook = mockk&amp;lt;AddressBook&amp;gt; {&#xA;    every { contacts } returns listOf(&#xA;        mockk {&#xA;            every { name } returns &#34;John&#34;&#xA;            every { telephone } returns &#34;123-456-789&#34;&#xA;            every { address.city } returns &#34;New-York&#34;&#xA;            every { address.zip } returns &#34;123-45&#34;&#xA;        },&#xA;        mockk {&#xA;            every { name } returns &#34;Alex&#34;&#xA;            every { telephone } returns &#34;789-456-123&#34;&#xA;            every { address } returns mockk {&#xA;                every { city } returns &#34;Wroclaw&#34;&#xA;                every { zip } returns &#34;543-21&#34;&#xA;            }&#xA;        }&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Capturing&lt;/h3&gt; &#xA;&lt;p&gt;You can capture an argument to a &lt;code&gt;CapturingSlot&lt;/code&gt; or &lt;code&gt;MutableList&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val car = mockk&amp;lt;Car&amp;gt;()&#xA;&#xA;val slot = slot&amp;lt;Double&amp;gt;()&#xA;val list = mutableListOf&amp;lt;Double&amp;gt;()&#xA;&#xA;every {&#xA;  car.recordTelemetry(&#xA;    speed = capture(slot), // makes mock match calls with any value for `speed` and record it in a slot&#xA;    direction = Direction.NORTH // makes mock and capturing only match calls with specific `direction`. Use `any()` to match calls with any `direction`&#xA;  )&#xA;} answers {&#xA;  println(slot.captured)&#xA;&#xA;  Outcome.RECORDED&#xA;}&#xA;&#xA;&#xA;every {&#xA;  car.recordTelemetry(&#xA;    speed = capture(list),&#xA;    direction = Direction.SOUTH&#xA;  )&#xA;} answers {&#xA;  println(list)&#xA;&#xA;  Outcome.RECORDED&#xA;}&#xA;&#xA;car.recordTelemetry(speed = 15, direction = Direction.NORTH) // prints 15&#xA;car.recordTelemetry(speed = 16, direction = Direction.SOUTH) // prints 16&#xA;&#xA;verify(exactly = 2) { car.recordTelemetry(speed = or(15, 16), direction = any()) }&#xA;&#xA;confirmVerified(car)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verification atLeast, atMost or exactly times&lt;/h3&gt; &#xA;&lt;p&gt;You can check the call count with the &lt;code&gt;atLeast&lt;/code&gt;, &lt;code&gt;atMost&lt;/code&gt; or &lt;code&gt;exactly&lt;/code&gt; parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;&#xA;val car = mockk&amp;lt;Car&amp;gt;(relaxed = true)&#xA;&#xA;car.accelerate(fromSpeed = 10, toSpeed = 20)&#xA;car.accelerate(fromSpeed = 10, toSpeed = 30)&#xA;car.accelerate(fromSpeed = 20, toSpeed = 30)&#xA;&#xA;// all pass&#xA;verify(atLeast = 3) { car.accelerate(allAny()) }&#xA;verify(atMost  = 2) { car.accelerate(fromSpeed = 10, toSpeed = or(20, 30)) }&#xA;verify(exactly = 1) { car.accelerate(fromSpeed = 10, toSpeed = 20) }&#xA;verify(exactly = 0) { car.accelerate(fromSpeed = 30, toSpeed = 10) } // means no calls were performed&#xA;&#xA;confirmVerified(car)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verification order&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;verifyAll&lt;/code&gt; verifies that all calls happened without checking their order.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;verifySequence&lt;/code&gt; verifies that the calls happened in a specified sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;verifyOrder&lt;/code&gt; verifies that calls happened in a specific order.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wasNot Called&lt;/code&gt; verifies that the mock (or the list of mocks) was not called at all.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class MockedClass {&#xA;    fun sum(a: Int, b: Int) = a + b&#xA;}&#xA;&#xA;val obj = mockk&amp;lt;MockedClass&amp;gt;()&#xA;val slot = slot&amp;lt;Int&amp;gt;()&#xA;&#xA;every {&#xA;    obj.sum(any(), capture(slot))&#xA;} answers {&#xA;    1 + firstArg&amp;lt;Int&amp;gt;() + slot.captured&#xA;}&#xA;&#xA;obj.sum(1, 2) // returns 4&#xA;obj.sum(1, 3) // returns 5&#xA;obj.sum(2, 2) // returns 5&#xA;&#xA;verifyAll {&#xA;    obj.sum(1, 3)&#xA;    obj.sum(1, 2)&#xA;    obj.sum(2, 2)&#xA;}&#xA;&#xA;verifySequence {&#xA;    obj.sum(1, 2)&#xA;    obj.sum(1, 3)&#xA;    obj.sum(2, 2)&#xA;}&#xA;&#xA;verifyOrder {&#xA;    obj.sum(1, 2)&#xA;    obj.sum(2, 2)&#xA;}&#xA;&#xA;val obj2 = mockk&amp;lt;MockedClass&amp;gt;()&#xA;val obj3 = mockk&amp;lt;MockedClass&amp;gt;()&#xA;verify {&#xA;    listOf(obj2, obj3) wasNot Called&#xA;}&#xA;&#xA;confirmVerified(obj)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verification confirmation&lt;/h3&gt; &#xA;&lt;p&gt;To double check that all calls were verified by &lt;code&gt;verify...&lt;/code&gt; constructs, you can use &lt;code&gt;confirmVerified&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;confirmVerified(mock1, mock2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It doesn&#39;t make much sense to use it for &lt;code&gt;verifySequence&lt;/code&gt; and &lt;code&gt;verifyAll&lt;/code&gt;, as these verification methods already exhaustively cover all calls with verification.&lt;/p&gt; &#xA;&lt;p&gt;It will throw an exception if there are some calls left without verification.&lt;/p&gt; &#xA;&lt;p&gt;Some calls can be excluded from this confirmation, check the next section for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;val car = mockk&amp;lt;Car&amp;gt;()&#xA;&#xA;every { car.drive(Direction.NORTH) } returns Outcome.OK&#xA;every { car.drive(Direction.SOUTH) } returns Outcome.OK&#xA;&#xA;car.drive(Direction.NORTH) // returns OK&#xA;car.drive(Direction.SOUTH) // returns OK&#xA;&#xA;verify {&#xA;    car.drive(Direction.SOUTH)&#xA;    car.drive(Direction.NORTH)&#xA;}&#xA;&#xA;confirmVerified(car) // makes sure all calls were covered with verification&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unnecessary stubbing&lt;/h3&gt; &#xA;&lt;p&gt;Because clean &amp;amp; maintainable test code requires zero unnecessary code, you can ensure that there is no unnecessary stubs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;checkUnnecessaryStub(mock1, mock2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will throw an exception if there are some declared calls on the mocks that are not used by the tested code. This can happen if you have declared some really unnecessary stubs or if the tested code doesn&#39;t call an expected one.&lt;/p&gt; &#xA;&lt;h3&gt;Recording exclusions&lt;/h3&gt; &#xA;&lt;p&gt;To exclude unimportant calls from being recorded, you can use &lt;code&gt;excludeRecords&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;excludeRecords { mock.operation(any(), 5) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All matching calls will be excluded from recording. This may be useful if you are using exhaustive verification: &lt;code&gt;verifyAll&lt;/code&gt;, &lt;code&gt;verifySequence&lt;/code&gt; or &lt;code&gt;confirmVerified&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;val car = mockk&amp;lt;Car&amp;gt;()&#xA;&#xA;every { car.drive(Direction.NORTH) } returns Outcome.OK&#xA;every { car.drive(Direction.SOUTH) } returns Outcome.OK&#xA;&#xA;excludeRecords { car.drive(Direction.SOUTH) }&#xA;&#xA;car.drive(Direction.NORTH) // returns OK&#xA;car.drive(Direction.SOUTH) // returns OK&#xA;&#xA;verify {&#xA;    car.drive(Direction.NORTH)&#xA;}&#xA;&#xA;confirmVerified(car) // car.drive(Direction.SOUTH) was excluded, so confirmation is fine with only car.drive(Direction.NORTH)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verification timeout&lt;/h3&gt; &#xA;&lt;p&gt;To verify concurrent operations, you can use &lt;code&gt;timeout = xxx&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;mockk&amp;lt;MockCls&amp;gt; {&#xA;    every { sum(1, 2) } returns 4&#xA;&#xA;    Thread {&#xA;        Thread.sleep(2000)&#xA;        sum(1, 2)&#xA;    }.start()&#xA;&#xA;    verify(timeout = 3000) { sum(1, 2) }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will wait until one of two following states: either verification is passed or the timeout is reached.&lt;/p&gt; &#xA;&lt;h3&gt;Returning Unit&lt;/h3&gt; &#xA;&lt;p&gt;If a function returns &lt;code&gt;Unit&lt;/code&gt;, you can use the &lt;code&gt;justRun&lt;/code&gt; construct:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class MockedClass {&#xA;    fun sum(a: Int, b: Int): Unit {&#xA;        println(a + b)&#xA;    }&#xA;}&#xA;&#xA;val obj = mockk&amp;lt;MockedClass&amp;gt;()&#xA;&#xA;justRun { obj.sum(any(), 3) }&#xA;&#xA;obj.sum(1, 1)&#xA;obj.sum(1, 2)&#xA;obj.sum(1, 3)&#xA;&#xA;verify {&#xA;    obj.sum(1, 1)&#xA;    obj.sum(1, 2)&#xA;    obj.sum(1, 3)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other ways to write &lt;code&gt;justRun { obj.sum(any(), 3) }&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;every { obj.sum(any(), 3) } just Runs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;every { obj.sum(any(), 3) } returns Unit&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;every { obj.sum(any(), 3) } answers { Unit }&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Coroutines&lt;/h3&gt; &#xA;&lt;p&gt;To mock coroutines you need to add another dependency to the support library.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Gradle&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;testImplementation &#34;org.jetbrains.kotlinx:kotlinx-coroutines-core:x.x&#34;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Maven&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&#xA;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.jetbrains.kotlinx&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;kotlinx-coroutines-core&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;x.x&amp;lt;/version&amp;gt;&#xA;    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Then you can use &lt;code&gt;coEvery&lt;/code&gt;, &lt;code&gt;coVerify&lt;/code&gt;, &lt;code&gt;coMatch&lt;/code&gt;, &lt;code&gt;coAssert&lt;/code&gt;, &lt;code&gt;coRun&lt;/code&gt;, &lt;code&gt;coAnswers&lt;/code&gt; or &lt;code&gt;coInvoke&lt;/code&gt; to mock suspend functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val car = mockk&amp;lt;Car&amp;gt;()&#xA;&#xA;coEvery { car.drive(Direction.NORTH) } returns Outcome.OK&#xA;&#xA;car.drive(Direction.NORTH) // returns OK&#xA;&#xA;coVerify { car.drive(Direction.NORTH) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extension functions&lt;/h3&gt; &#xA;&lt;p&gt;There are three types of extension function in Kotlin:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;class-wide&lt;/li&gt; &#xA; &lt;li&gt;object-wide&lt;/li&gt; &#xA; &lt;li&gt;module-wide&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For an object or a class, you can mock extension functions just by creating a regular &lt;code&gt;mockk&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;data class Obj(val value: Int)&#xA;&#xA;class Ext {&#xA;    fun Obj.extensionFunc() = value + 5&#xA;}&#xA;&#xA;with(mockk&amp;lt;Ext&amp;gt;()) {&#xA;    every {&#xA;        Obj(5).extensionFunc()&#xA;    } returns 11&#xA;&#xA;    assertEquals(11, Obj(5).extensionFunc())&#xA;&#xA;    verify {&#xA;        Obj(5).extensionFunc()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To mock module-wide extension functions you need to build &lt;code&gt;mockkStatic(...)&lt;/code&gt; with the module&#39;s class name as an argument. For example &#34;pkg.FileKt&#34; for module &lt;code&gt;File.kt&lt;/code&gt; in the &lt;code&gt;pkg&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;data class Obj(val value: Int)&#xA;&#xA;// declared in File.kt (&#34;pkg&#34; package)&#xA;fun Obj.extensionFunc() = value + 5&#xA;&#xA;mockkStatic(&#34;pkg.FileKt&#34;)&#xA;&#xA;every {&#xA;    Obj(5).extensionFunc()&#xA;} returns 11&#xA;&#xA;assertEquals(11, Obj(5).extensionFunc())&#xA;&#xA;verify {&#xA;    Obj(5).extensionFunc()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In &lt;code&gt;jvm&lt;/code&gt; environments you can replace the class name with a function reference:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;mockkStatic(Obj::extensionFunc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this will mock the whole &lt;code&gt;pkg.FileKt&lt;/code&gt; class, and not just &lt;code&gt;extensionFunc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This syntax also applies for extension properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val Obj.squareValue get() = value * value&#xA;&#xA;mockkStatic(Obj::squareValue)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;@JvmName&lt;/code&gt; is used, specify it as a class name.&lt;/p&gt; &#xA;&lt;p&gt;KHttp.kt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@file:JvmName(&#34;KHttp&#34;)&#xA;&#xA;package khttp&#xA;// ... KHttp code &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mockkStatic(&#34;khttp.KHttp&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes you need to know a little bit more to mock an extension function. For example the extension function &lt;code&gt;File.endsWith()&lt;/code&gt; has a totally unpredictable &lt;code&gt;classname&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;   mockkStatic(&#34;kotlin.io.FilesKt__UtilsKt&#34;)&#xA;   every { File(&#34;abc&#34;).endsWith(any&amp;lt;String&amp;gt;()) } returns true&#xA;   println(File(&#34;abc&#34;).endsWith(&#34;abc&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is standard Kotlin behaviour that may be unpredictable. Use &lt;code&gt;Tools -&amp;gt; Kotlin -&amp;gt; Show Kotlin Bytecode&lt;/code&gt; or check &lt;code&gt;.class&lt;/code&gt; files in JAR archive to detect such names.&lt;/p&gt; &#xA;&lt;h3&gt;Varargs&lt;/h3&gt; &#xA;&lt;p&gt;From version 1.9.1, more extended vararg handling is possible:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;    interface ClsWithManyMany {&#xA;        fun manyMany(vararg x: Any): Int&#xA;    }&#xA;&#xA;    val obj = mockk&amp;lt;ClsWithManyMany&amp;gt;()&#xA;&#xA;    every { obj.manyMany(5, 6, *varargAll { it == 7 }) } returns 3&#xA;&#xA;    println(obj.manyMany(5, 6, 7)) // 3&#xA;    println(obj.manyMany(5, 6, 7, 7)) // 3&#xA;    println(obj.manyMany(5, 6, 7, 7, 7)) // 3&#xA;&#xA;    every { obj.manyMany(5, 6, *anyVararg(), 7) } returns 4&#xA;&#xA;    println(obj.manyMany(5, 6, 1, 7)) // 4&#xA;    println(obj.manyMany(5, 6, 2, 3, 7)) // 4&#xA;    println(obj.manyMany(5, 6, 4, 5, 6, 7)) // 4&#xA;&#xA;    every { obj.manyMany(5, 6, *varargAny { nArgs &amp;gt; 5 }, 7) } returns 5&#xA;&#xA;    println(obj.manyMany(5, 6, 4, 5, 6, 7)) // 5&#xA;    println(obj.manyMany(5, 6, 4, 5, 6, 7, 7)) // 5&#xA;&#xA;    every {&#xA;        obj.manyMany(5, 6, *varargAny {&#xA;            if (position &amp;lt; 3) it == 3 else it == 4&#xA;        }, 7)&#xA;    } returns 6&#xA;    &#xA;    println(obj.manyMany(5, 6, 3, 4, 7)) // 6&#xA;    println(obj.manyMany(5, 6, 3, 4, 4, 7)) // 6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Private functions mocking / dynamic calls&lt;/h3&gt; &#xA;&lt;p&gt;IF you need to mock private functions, you can do it via a dynamic call.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Car {&#xA;    fun drive() = accelerate()&#xA;&#xA;    private fun accelerate() = &#34;going faster&#34;&#xA;}&#xA;&#xA;val mock = spyk&amp;lt;Car&amp;gt;(recordPrivateCalls = true)&#xA;&#xA;every { mock[&#34;accelerate&#34;]() } returns &#34;going not so fast&#34;&#xA;&#xA;assertEquals(&#34;going not so fast&#34;, mock.drive())&#xA;&#xA;verifySequence {&#xA;    mock.drive()&#xA;    mock[&#34;accelerate&#34;]()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to verify private calls, you should create a &lt;code&gt;spyk&lt;/code&gt; with &lt;code&gt;recordPrivateCalls = true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additionally, a more verbose syntax allows you to get and set properties, combined with the same dynamic calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val mock = spyk(Team(), recordPrivateCalls = true)&#xA;&#xA;every { mock getProperty &#34;speed&#34; } returns 33&#xA;every { mock setProperty &#34;acceleration&#34; value less(5) } just runs&#xA;justRun { mock invokeNoArgs &#34;privateMethod&#34; }&#xA;every { mock invoke &#34;openDoor&#34; withArguments listOf(&#34;left&#34;, &#34;rear&#34;) } returns &#34;OK&#34;&#xA;&#xA;verify { mock getProperty &#34;speed&#34; }&#xA;verify { mock setProperty &#34;acceleration&#34; value less(5) }&#xA;verify { mock invoke &#34;openDoor&#34; withArguments listOf(&#34;left&#34;, &#34;rear&#34;) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Property backing fields&lt;/h3&gt; &#xA;&lt;p&gt;You can access the backing fields via &lt;code&gt;fieldValue&lt;/code&gt; and use &lt;code&gt;value&lt;/code&gt; for the value being set.&lt;/p&gt; &#xA;&lt;p&gt;Note: in the examples below, we use &lt;code&gt;propertyType&lt;/code&gt; to specify the type of the &lt;code&gt;fieldValue&lt;/code&gt;. This is needed because it is possible to capture the type automatically for the getter. Use &lt;code&gt;nullablePropertyType&lt;/code&gt; to specify a nullable type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val mock = spyk(MockCls(), recordPrivateCalls = true)&#xA;&#xA;every { mock.property } answers { fieldValue + 6 }&#xA;every { mock.property = any() } propertyType Int::class answers { fieldValue += value }&#xA;every { mock getProperty &#34;property&#34; } propertyType Int::class answers { fieldValue + 6 }&#xA;every { mock setProperty &#34;property&#34; value any&amp;lt;Int&amp;gt;() } propertyType Int::class answers  { fieldValue += value }&#xA;every {&#xA;    mock.property = any()&#xA;} propertyType Int::class answers {&#xA;    fieldValue = value + 1&#xA;} andThen {&#xA;    fieldValue = value - 1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple interfaces&lt;/h3&gt; &#xA;&lt;p&gt;Adding additional behaviours via interfaces and stubbing them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val spy = spyk(System.out, moreInterfaces = *arrayOf(Runnable::class))&#xA;&#xA;spy.println(555)&#xA;&#xA;every {&#xA;    (spy as Runnable).run()&#xA;} answers {&#xA;    (self as PrintStream).println(&#34;Run! Run! Run!&#34;)&#xA;}&#xA;&#xA;val thread = Thread(spy as Runnable)&#xA;thread.start()&#xA;thread.join()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mocking Nothing&lt;/h3&gt; &#xA;&lt;p&gt;Nothing special here. If you have a function returning &lt;code&gt;Nothing&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun quit(status: Int): Nothing {&#xA;    exitProcess(status)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can for example throw an exception as behaviour:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;every { quit(1) } throws Exception(&#34;this is a test&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clearing vs Unmocking&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clear - deletes the internal state of objects associated with a mock, resulting in an empty object&lt;/li&gt; &#xA; &lt;li&gt;unmock - re-assigns transformation of classes back to original state prior to mock&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Matcher extensibility&lt;/h2&gt; &#xA;&lt;p&gt;A very simple way to create new matchers is by attaching a function to &lt;code&gt;MockKMatcherScope&lt;/code&gt; or &lt;code&gt;MockKVerificationScope&lt;/code&gt; and using the &lt;code&gt;match&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    fun MockKMatcherScope.seqEq(seq: Sequence&amp;lt;String&amp;gt;) = match&amp;lt;Sequence&amp;lt;String&amp;gt;&amp;gt; {&#xA;        it.toList() == seq.toList()&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to create more advanced matchers by implementing the &lt;code&gt;Matcher&lt;/code&gt; interface.&lt;/p&gt; &#xA;&lt;h3&gt;Custom matchers&lt;/h3&gt; &#xA;&lt;p&gt;Example of a custom matcher that compares list without order:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;&#xA;@Test&#xA;fun test() {&#xA;    class MockCls {&#xA;        fun op(a: List&amp;lt;Int&amp;gt;) = a.reversed()&#xA;    }&#xA;&#xA;    val mock = mockk&amp;lt;MockCls&amp;gt;()&#xA;&#xA;    every { mock.op(any()) } returns listOf(5, 6, 9)&#xA;&#xA;    println(mock.op(listOf(1, 2, 3)))&#xA;&#xA;    verify { mock.op(matchListWithoutOrder(3, 2, 1)) }&#xA;&#xA;}&#xA;&#xA;data class ListWithoutOrderMatcher&amp;lt;T&amp;gt;(&#xA;    val expectedList: List&amp;lt;T&amp;gt;,&#xA;    val refEq: Boolean&#xA;) : Matcher&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; {&#xA;    val map = buildCountsMap(expectedList, refEq)&#xA;&#xA;    override fun match(arg: List&amp;lt;T&amp;gt;?): Boolean {&#xA;        if (arg == null) return false&#xA;        return buildCountsMap(arg, refEq) == map&#xA;    }&#xA;&#xA;    private fun buildCountsMap(list: List&amp;lt;T&amp;gt;, ref: Boolean): Map&amp;lt;Any?, Int&amp;gt; {&#xA;        val map = mutableMapOf&amp;lt;Any?, Int&amp;gt;()&#xA;&#xA;        for (item in list) {&#xA;            val key = when {&#xA;                item == null -&amp;gt; nullKey&#xA;                refEq -&amp;gt; InternalPlatform.ref(item)&#xA;                else -&amp;gt; item&#xA;            }&#xA;            map.compute(key, { _, value -&amp;gt; (value ?: 0) + 1 })&#xA;        }&#xA;&#xA;        return map&#xA;    }&#xA;&#xA;    override fun toString() = &#34;matchListWithoutOrder($expectedList)&#34;&#xA;&#xA;    @Suppress(&#34;UNCHECKED_CAST&#34;)&#xA;    override fun substitute(map: Map&amp;lt;Any, Any&amp;gt;): Matcher&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; {&#xA;        return copy(expectedList = expectedList.map { map.getOrDefault(it as Any?, it) } as List&amp;lt;T&amp;gt;)&#xA;    }&#xA;&#xA;    companion object {&#xA;        val nullKey = Any()&#xA;    }&#xA;}&#xA;&#xA;inline fun &amp;lt;reified T : List&amp;lt;E&amp;gt;, E : Any&amp;gt; MockKMatcherScope.matchListWithoutOrder(&#xA;    vararg items: E,&#xA;    refEq: Boolean = true&#xA;): T = match(ListWithoutOrderMatcher(listOf(*items), refEq))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Settings file&lt;/h2&gt; &#xA;&lt;p&gt;To adjust parameters globally, there are a few settings you can specify in a resource file.&lt;/p&gt; &#xA;&lt;p&gt;How to use:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;io/mockk/settings.properties&lt;/code&gt; file in &lt;code&gt;src/main/resources&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Put any of the following options:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;relaxed=true|false&#xA;relaxUnitFun=true|false&#xA;recordPrivateCalls=true|false&#xA;stackTracesOnVerify=true|false&#xA;stackTracesAlignment=left|center&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;stackTracesAlignment&lt;/code&gt; determines whether to align the stack traces to the center (default), or to the left (more consistent with usual JVM stackTraces).&lt;/p&gt; &#xA;&lt;h2&gt;DSL tables&lt;/h2&gt; &#xA;&lt;p&gt;Here are a few tables to help you master the DSL.&lt;/p&gt; &#xA;&lt;h3&gt;Top level functions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mockk&amp;lt;T&amp;gt;(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;builds a regular mock&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;spyk&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;builds a spy using the default constructor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;spyk(obj)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;builds a spy by copying from &lt;code&gt;obj&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slot&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;creates a capturing slot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;every&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;starts a stubbing block&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coEvery&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;starts a stubbing block for coroutines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;starts a verification block&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coVerify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;starts a verification block for coroutines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verifyAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;starts a verification block that should include all calls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coVerifyAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;starts a verification block that should include all calls for coroutines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verifyOrder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;starts a verification block that checks the order&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coVerifyOrder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;starts a verification block that checks the order for coroutines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verifySequence&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;starts a verification block that checks whether all calls were made in a specified sequence&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coVerifySequence&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;starts a verification block that checks whether all calls were made in a specified sequence for coroutines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;excludeRecords&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;exclude some calls from being recorded&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;confirmVerified&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;confirms that all recorded calls were verified&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;checkUnnecessaryStub&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;confirms that all recorded calls are used at least once&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clearMocks&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;clears specified mocks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;registerInstanceFactory&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;allows you to redefine the way of instantiation for certain object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mockkClass&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;builds a regular mock by passing the class as parameter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mockkObject&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;turns an object into an object mock, or clears it if was already transformed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;unmockkObject&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;turns an object mock back into a regular object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mockkStatic&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;makes a static mock out of a class, or clears it if it was already transformed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;unmockkStatic&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;turns a static mock back into a regular class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clearStaticMockk&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;clears a static mock&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mockkConstructor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;makes a constructor mock out of a class, or clears it if it was already transformed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;unmockkConstructor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;turns a constructor mock back into a regular class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clearConstructorMockk&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;clears the constructor mock&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;unmockkAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;unmocks object, static and constructor mocks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clearAllMocks&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;clears regular, object, static and constructor mocks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Matchers&lt;/h3&gt; &#xA;&lt;p&gt;By default, simple arguments are matched using &lt;code&gt;eq()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Matcher&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;any()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches any argument&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;allAny()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;special matcher that uses &lt;code&gt;any()&lt;/code&gt; instead of &lt;code&gt;eq()&lt;/code&gt; for matchers that are provided as simple arguments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isNull()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;checks if the value is null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isNull(inverse=true)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;checks if the value is not null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ofType(type)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;checks if the value belongs to the type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;match { it.startsWith(&#34;string&#34;) }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches via the passed predicate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coMatch { it.startsWith(&#34;string&#34;) }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches via the passed coroutine predicate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;matchNullable { it?.startsWith(&#34;string&#34;) }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches nullable value via the passed predicate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coMatchNullable { it?.startsWith(&#34;string&#34;) }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches nullable value via the passed coroutine predicate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;eq(value)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if the value is equal to the provided value via the &lt;code&gt;deepEquals&lt;/code&gt; function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;eq(value, inverse=true)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if the value is not equal to the provided value via the &lt;code&gt;deepEquals&lt;/code&gt; function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;neq(value)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if the value is not equal to the provided value via the &lt;code&gt;deepEquals&lt;/code&gt; function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;refEq(value)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if the value is equal to the provided value via reference comparison&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;refEq(value, inverse=true)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if the value is not equal to the provided value via reference comparison&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;nrefEq(value)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if the value is not equal to the provided value via reference comparison&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cmpEq(value)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if the value is equal to the provided value via the &lt;code&gt;compareTo&lt;/code&gt; function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;less(value)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if the value is less than the provided value via the &lt;code&gt;compareTo&lt;/code&gt; function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;more(value)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if the value is more than the provided value via the &lt;code&gt;compareTo&lt;/code&gt; function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;less(value, andEquals=true)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if the value is less than or equal to the provided value via the &lt;code&gt;compareTo&lt;/code&gt; function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;more(value, andEquals=true)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if the value is more than or equal to the provided value via the &lt;code&gt;compareTo&lt;/code&gt; function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;range(from, to, fromInclusive=true, toInclusive=true)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if the value is in range via the &lt;code&gt;compareTo&lt;/code&gt; function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;and(left, right)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;combines two matchers via a logical and&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;or(left, right)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;combines two matchers via a logical or&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;not(matcher)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;negates the matcher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;capture(slot)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;captures a value to a &lt;code&gt;CapturingSlot&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;capture(mutableList)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;captures a value to a list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;captureNullable(mutableList)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;captures a value to a list together with null values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;captureLambda()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;captures a lambda&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;captureCoroutine()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;captures a coroutine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;invoke(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;calls a matched argument&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coInvoke(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;calls a matched argument for a coroutine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hint(cls)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;hints the next return type in case it&#39;s gotten erased&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;anyVararg()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches any elements in a vararg&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;varargAny(matcher)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if any element matches the matcher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;varargAll(matcher)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if all elements match the matcher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;any...Vararg()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches any elements in vararg (specific to primitive type)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;varargAny...(matcher)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if any element matches the matcher (specific to the primitive type)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;varargAll...(matcher)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches if all elements match the matcher (specific to the primitive type)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A few special matchers available in verification mode only:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Matcher&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;withArg { code }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches any value and allows to execute some code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;withNullableArg { code }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches any nullable value and allows to execute some code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coWithArg { code }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches any value and allows to execute some coroutine code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coWithNullableArg { code }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;matches any nullable value and allows to execute some coroutine code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Validators&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Validator&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verify { mock.call() }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do unordered verification that a call was performed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verify(inverse=true) { mock.call() }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do unordered verification that a call was not performed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verify(atLeast=n) { mock.call() }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do unordered verification that a call was performed at least &lt;code&gt;n&lt;/code&gt; times&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verify(atMost=n) { mock.call() }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do unordered verification that a call was performed at most &lt;code&gt;n&lt;/code&gt; times&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verify(exactly=n) { mock.call() }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do unordered verification that a call was performed exactly &lt;code&gt;n&lt;/code&gt; times&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verifyAll { mock.call1(); mock.call2() }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do unordered verification that only the specified calls were executed for the mentioned mocks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verifyOrder { mock.call1(); mock.call2() }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do verification that the sequence of calls went one after another&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verifySequence { mock.call1(); mock.call2() }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do verification that only the specified sequence of calls were executed for the mentioned mocks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verify { mock wasNot Called }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do verification that a mock was not called&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verify { listOf(mock1, mock2) wasNot Called }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do verification that a list of mocks were not called&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Answers&lt;/h3&gt; &#xA;&lt;p&gt;An Answer can be followed up by one or more additional answers.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Answer&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;returns value&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call returns a specified value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;returnsMany list&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call returns a value from the list, with subsequent calls returning the next element&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;returnsArgument(n)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call returns the nth argument of that call&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;throws ex&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call throws an exception&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;answers { code }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call answers with a code block scoped with &lt;code&gt;answer scope&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coAnswers { code }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call answers with a coroutine code block with &lt;code&gt;answer scope&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;answers answerObj&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call answers with an Answer object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;answers { nothing }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call answers null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;just Runs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call is returning Unit (returns null)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;propertyType Class&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify the type of the backing field accessor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;nullablePropertyType Class&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify the type of the backing field accessor as a nullable type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Additional answer(s)&lt;/h3&gt; &#xA;&lt;p&gt;A next answer is returned on each consequent call and the last value is persisted. So this is similar to the &lt;code&gt;returnsMany&lt;/code&gt; semantics.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Additional answer&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;andThen value&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call returns one specified value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;andThenMany list&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call returns a value from the list, with subsequent calls returning the next element&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;andThenThrows ex&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call throws an exception&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;andThen { code }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call answers with a code block scoped with &lt;code&gt;answer scope&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coAndThen { code }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call answers with a coroutine code block with &lt;code&gt;answer scope&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;andThenAnswer answerObj&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call answers with an Answer object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;andThen { nothing }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call answers null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;andThenJust Runs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify that the matched call is returning Unit (available since v1.12.2)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Answer scope&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;call&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a call object that consists of an invocation and a matcher&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;invocation&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;contains information regarding the actual function invoked&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;matcher&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;contains information regarding the matcher used to match the invocation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;self&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;reference to the object invocation made&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;method&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;reference to the function invocation made&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;args&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;reference to the invocation arguments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;nArgs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number of invocation arguments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;arg(n)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;nth argument&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;firstArg()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;first argument&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;secondArg()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;second argument&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;thirdArg()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;third argument&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lastArg()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;last argument&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;captured()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the last element in the list for convenience when capturing to a list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lambda&amp;lt;...&amp;gt;().invoke()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;call the captured lambda&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coroutine&amp;lt;...&amp;gt;().coInvoke()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;call the captured coroutine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;nothing&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;null value for returning &lt;code&gt;nothing&lt;/code&gt; as an answer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fieldValue&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;accessor to the property backing field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fieldValueAny&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;accessor to the property backing field with &lt;code&gt;Any?&lt;/code&gt; type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;value&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;value being set, cast to the same type as the property backing field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;valueAny&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;value being set, with &lt;code&gt;Any?&lt;/code&gt; type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;callOriginal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;calls the original function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Vararg scope&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;position&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the position of an argument in a vararg array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;nArgs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;overall count of arguments in a vararg array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;You can also support this project by becoming a sponsor. Your logo will show up here with a link to your website.&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;a href=&#34;https://opencollective.com/mockk/sponsor/0/website&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/mockk/sponsor/0/avatar.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://opencollective.com/mockk/sponsor/1/website&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/mockk/sponsor/1/avatar.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏&lt;/p&gt; &#xA;&lt;a href=&#34;https://opencollective.com/mockk#backers&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/mockk/backers.svg?width=890&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/mockk/mockk/graphs/contributors&#34;&gt; &lt;img src=&#34;https://opencollective.com/mockk/contributors.svg?width=890&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;To ask questions, please use Stack Overflow or Gitter.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat/Gitter: &lt;a href=&#34;https://gitter.im/mockk-io/Lobby&#34;&gt;https://gitter.im/mockk-io/Lobby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stack Overflow: &lt;a href=&#34;http://stackoverflow.com/questions/tagged/mockk&#34;&gt;http://stackoverflow.com/questions/tagged/mockk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To report bugs, please use the GitHub project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project Page: &lt;a href=&#34;https://github.com/mockk/mockk&#34;&gt;https://github.com/mockk/mockk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reporting Bugs: &lt;a href=&#34;https://github.com/mockk/mockk/issues&#34;&gt;https://github.com/mockk/mockk/issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>