<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-12T01:34:55Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ianatha/bababasic</title>
    <updated>2023-11-12T01:34:55Z</updated>
    <id>tag:github.com,2023-11-12:/ianatha/bababasic</id>
    <link href="https://github.com/ianatha/bababasic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;QuickBASIC 4.5 revival on Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BabaBASIC&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=io.atha.quickbasic&amp;amp;pli=1&#34;&gt;&lt;img alt=&#34;BabaBASIC on the Play Store&#34; src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png&#34; width=&#34;256px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Write and run QuickBASIC 4.5 programs, just like in the 80s&lt;/h2&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img alt=&#34;BabaBASIC Screenshot&#34; src=&#34;https://github.com/ianatha/bababasic/raw/main/design_assets/screenshot_1.png&#34; width=&#34;256px&#34;&gt; &lt;img alt=&#34;BabaBASIC Screenshot&#34; src=&#34;https://github.com/ianatha/bababasic/raw/main/design_assets/screenshot_2.png&#34; width=&#34;256px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;BabaBASIC lets you write and run QuickBASIC 4.5-compatible programs on your Android device, enabling you to reminisce of the prehistoric computing era.&lt;/p&gt; &#xA;&lt;h2&gt;Why I am making this?&lt;/h2&gt; &#xA;&lt;p&gt;I made this app because my father, who was a programmer in the 80s, asked me to find him an Android app to showcase programming to others using QuickBASIC. I couldn&#39;t find anything that I felt comfortable recommending to him, so I pulled an all-nighter and made this.&lt;/p&gt; &#xA;&lt;h2&gt;Running on the command-line&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew :bbasic:build&#xA;java -jar bbasic/build/libs/bbasic-standalone.jar INPUT.BAS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Standing on the shoulders of giants&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rosemoe/sora-editor&#34;&gt;Rosemoe/sora-editor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/termux/termux-app&#34;&gt;termux/termux-app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BabaBASIC started as fork of &lt;a href=&#34;https://github.com/mayuropensource/PuffinBASIC&#34;&gt;mayuropensource/PuffinBASIC&lt;/a&gt;, but it&#39;s been modified significantly to match &lt;a href=&#34;https://ia803001.us.archive.org/12/items/Microsoft_QuickBASIC_4.5_2nd_Edition_Manual/Microsoft_QuickBASIC_4.5_2nd_Edition_Manual.pdf&#34;&gt;QuickBASIC 4.5&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/amper</title>
    <updated>2023-11-12T01:34:55Z</updated>
    <id>tag:github.com,2023-11-12:/JetBrains/amper</id>
    <link href="https://github.com/JetBrains/amper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Amper - a tool for project configuration with a focus on the developer experience and the IDE support&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/incubator.svg?sanitize=true&#34; alt=&#34;JetBrains incubator project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Amper&lt;/h1&gt; &#xA;&lt;p&gt;Amper is a tool for project configuration. Its goal is to improve the project configuration experience and toolability, that is, the support inside the IDE, while also providing a smooth out-of-the box experience. We believe that this can be achieved by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;providing a developer- and IDE-friendly declarative configuration DSL - to simplify not only the initial setup but also improve maintainability and let an IDE assist with automatic configuration reliably;&lt;/li&gt; &#xA; &lt;li&gt;bundling a curated set of compatible toolchains and extensions - to support the majority of the scenarios without the need to find compatible plugins;&lt;/li&gt; &#xA; &lt;li&gt;carefully choosing the extensibility points - to keep the overall mental model and UX of the configuration consistent and to avoid unexpected third-party code execution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In essence, we aim to achieve a similar well-thought-out and well-tested experience as with JetBrains IDEs.&lt;/p&gt; &#xA;&lt;p&gt;Weâ€™re currently looking at various aspects, including the configuration of projects for the purpose of building, packaging, publishing, and more. At its current stage, however, the focus is primarily on configuring projects for the purpose of building.&lt;/p&gt; &#xA;&lt;p&gt;While the current use case is Kotlin and Kotlin Multiplatform, Amper also supports Java and Swift (as a requirement for multiplatform). However, the same approach to configuration could work for other languages and technology stacks in the future.&lt;/p&gt; &#xA;&lt;p&gt;Amper is implemented as a Gradle plugin and uses YAML for its project configuration format. The goal right now is to validate the user experience, which is why we have chosen to build on a well-tested build tool like Gradle, providing a configuration layer on top of it.&lt;/p&gt; &#xA;&lt;p&gt;Supported features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creating and running JVM, Android, iOS, Linux and macOS applications.&lt;/li&gt; &#xA; &lt;li&gt;Creating Kotlin Multiplatform libraries.&lt;/li&gt; &#xA; &lt;li&gt;Running tests.&lt;/li&gt; &#xA; &lt;li&gt;Mixing Kotlin, Java and Swift code.&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#configuring-compose-multiplatform&#34;&gt;Compose Multiplatform&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#internal-dependencies&#34;&gt;Multi-module&lt;/a&gt; projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#gradle-interop&#34;&gt;Gradle interop&lt;/a&gt;, including combining Amper and Gradle modules in one projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#file-layout-with-gradle-interop&#34;&gt;Gradle-compatible project layout&lt;/a&gt; for the smooth migration of existing Gradle projects.&lt;/li&gt; &#xA; &lt;li&gt;Code assistance for &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#module-manifest-file-anatomy&#34;&gt;module manifest files&lt;/a&gt; in IntelliJ IDEA and Fleet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Planned features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#product-types&#34;&gt;product type&lt;/a&gt; and platforms, such as watchOS, Windows, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#special-types-of-tests&#34;&gt;Platform-specific test types&lt;/a&gt;, including android instrumented tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#native-dependencies&#34;&gt;Native dependencies&lt;/a&gt; support, such as CocoaPods, Swift Package Manager.&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#dependencyversion-catalogs&#34;&gt;Gradle version catalogs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#packaging&#34;&gt;Packaging&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#publishing&#34;&gt;publication&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#build-variants&#34;&gt;Build variants&lt;/a&gt; support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#extensibility&#34;&gt;Extensibility&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Workspaces (organizing multiple modules together).&lt;/li&gt; &#xA; &lt;li&gt;Support more Kotlin and Kotlin Multiplatform scenarios and configurations out-of-the-box.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/FAQ.md&#34;&gt;FAQ for more question&lt;/a&gt; and the list of &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/KnownIssues.md&#34;&gt;known issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://kotlinlang.slack.com/archives/C062WG3A7T8&#34;&gt;Slack channel&lt;/a&gt; for discussions, submit your ideas in the &lt;a href=&#34;https://youtrack.jetbrains.com/issues/AMPER&#34;&gt;tracker&lt;/a&gt; and share your feedback &lt;a href=&#34;https://surveys.jetbrains.com/s3/Amper-feedback-form&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a quick start:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Setup.md&#34;&gt;Setup&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Usage.md&#34;&gt;usage&lt;/a&gt; instructions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Tutorial.md&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/examples&#34;&gt;Example projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gradle &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/GradleMigration.md&#34;&gt;migration guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Try&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to try Amper:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Usage.md#using-amper-in-intellij-idea&#34;&gt;IntelliJ IDEA 2023.3&lt;/a&gt;, for JVM and Android projects.&lt;/li&gt; &#xA; &lt;li&gt;In &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Usage.md#using-amper-in-fleet&#34;&gt;JetBrains Fleet&lt;/a&gt;, for the JVM, Android, and Kotlin Multiplatform projects.&lt;/li&gt; &#xA; &lt;li&gt;Using Gradle to build Amper projects &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Usage.md#using-amper-from-command-line&#34;&gt;from the CLI or CI/CD&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Basics&lt;/h3&gt; &#xA;&lt;p&gt;Here is a very basics JVM &#34;Hello, World!&#34; project:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/images/ij-jvm-structure.png&#34; width=&#34;50%&#34; alt=&#34;&#34;&gt; &#xA;&lt;p&gt;The &lt;code&gt;main.kt&lt;/code&gt; and &lt;code&gt;MyTest.kt&lt;/code&gt; files are just regular Kotlin files with nothing special in them. The interesting part is &lt;code&gt;module.yaml&lt;/code&gt;, which is the Amper manifest file. For the above project structure, it would simply be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Produce a JVM application &#xA;product: jvm/app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it. The Kotlin and Java toolchains, test framework, and other necessary functionality is configured and available straight out of the box. You can build it, run it, write and run tests, and more. For more detailed information, check out the &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/examples/jvm-with-tests&#34;&gt;full example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/images/ij-jvm-result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Multiplatform&lt;/h3&gt; &#xA;&lt;p&gt;Now, let&#39;s look at a Compose Multiplatform project with Android, iOS, and desktop JVM apps, with the following project structure in Fleet:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/images/fleet-kmp-structure.png&#34; width=&#34;50%&#34; alt=&#34;&#34;&gt; &#xA;&lt;p&gt;Notice how the &lt;code&gt;src/&lt;/code&gt; folder contains Kotlin and Swift code together. It could, of course, also be Kotlin and Java. Another aspect to highlight is the shared module with the common code in the &lt;code&gt;src&lt;/code&gt; folder and the platform-specific code folders &lt;code&gt;src@ios&lt;/code&gt; and &lt;code&gt;src@android&lt;/code&gt; (learn more about &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#project-layout&#34;&gt;project layout&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Here is how &lt;code&gt;ios-app/module.yaml&lt;/code&gt; manifest file looks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Produce an iOS application&#xA;product: ios/app&#xA;&#xA;# Depend on the shared library module: &#xA;dependencies:&#xA;  - ../shared&#xA;&#xA;settings:&#xA;  # Enable Compose Multiplatform framework&#xA;  compose: enabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is pretty straightforward: It defines an iOS application with a dependency on a shared module and enables the Compose Multiplatform framework. A more interesting example would be &lt;code&gt;shared/module.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Produce a shared library for the JVM, Android, and iOS platforms:&#xA;product:&#xA;  type: lib&#xA;  platforms: [jvm, android, iosArm64, iosSimulatorArm64, iosX64]&#xA;&#xA;# Shared Compose dependencies:&#xA;dependencies:&#xA;  - $compose.foundation: exported&#xA;  - $compose.material3: exported&#xA;&#xA;# Android-only dependencies  &#xA;dependencies@android:&#xA;  # integration compose with activities&#xA;  - androidx.activity:activity-compose:1.7.2: exported&#xA;  - androidx.appcompat:appcompat:1.6.1: exported&#xA;&#xA;# iOS-only dependencies with a dependency on a CocoaPod&#xA;#   note that CocoaPods dependencies are not yet implemented in the prototype     &#xA;dependencies@ios:&#xA;  - pod: &#39;Alamofire&#39;&#xA;    version: &#39;~&amp;gt; 2.0.1&#39;&#xA;&#xA;settings:&#xA;  # Enable Kotlin serialization&#xA;  kotlin:&#xA;    serialization: json&#xA;  &#xA;  # Enable Compose Multiplatform framework&#xA;  compose: enabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A couple of things are worth mentioning. First, note the platform-specific dependencies: sections with the &lt;code&gt;@&amp;lt;platform&amp;gt;&lt;/code&gt; qualifier. &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#platform-qualifier&#34;&gt;The platform qualifier&lt;/a&gt; can be used both in the manifest and also in the file layout. The qualifier organizes the code, dependencies, and settings for a certain platform. Second, the dependencies: section allows not only Kotlin and Maven dependencies, but also &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md#native-dependencies&#34;&gt;platform-specific package managers&lt;/a&gt;, such as CocoaPods, Swift Package Manager, and others.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/images/fleet-kmp-result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Naturally, these examples show only a limited set of Amper features. Look at the &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Documentation.md&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/docs/Tutorial.md&#34;&gt;tutorial&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/examples&#34;&gt;example projects&lt;/a&gt; to get more insight into Amperâ€™s design and functionality.&lt;/p&gt; &#xA;&lt;h3&gt;More examples&lt;/h3&gt; &#xA;&lt;p&gt;Check our more real world examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/examples/jvm-kotlin+java&#34;&gt;JVM &#34;Hello, World!&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compose for &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/examples/compose-ios&#34;&gt;iOS&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/examples/compose-android&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/examples/compose-desktop&#34;&gt;desktop&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/examples/multiplatform&#34;&gt;Multiplatform&lt;/a&gt; project with shared code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/examples/gradle-interop&#34;&gt;Gradle interop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;And &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/main/examples&#34;&gt;others&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>