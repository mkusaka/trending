<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-07T01:35:01Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dotlin-org/dotlin</title>
    <updated>2022-09-07T01:35:01Z</updated>
    <id>tag:github.com,2022-09-07:/dotlin-org/dotlin</id>
    <link href="https://github.com/dotlin-org/dotlin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kotlin to Dart compiler&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotlin-org/dotlin/main/docs/assets/dotlin.png&#34; alt=&#34;Dotlin logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dotlin is a Kotlin to Dart compiler. The aim is to integrate Kotlin as a language into the Dart ecosystem, combing best of both worlds: The Kotlin language &amp;amp; standard library, and the Dart ecosystem &amp;amp; build system.&lt;/p&gt; &#xA;&lt;h2&gt;About Dotlin&lt;/h2&gt; &#xA;&lt;p&gt;Dotlin makes use of Kotlin&#39;s IR (Immediate Representation) compiler, and uses that to generate Dart source code. At the moment only a small subset of Kotlin&#39;s features are supported, to see what exactly, you can look at the &lt;a href=&#34;https://raw.githubusercontent.com/dotlin-org/dotlin/main/TODO.md&#34;&gt;TODO&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support all Kotlin language features&lt;/li&gt; &#xA; &lt;li&gt;Support the Kotlin standard library&lt;/li&gt; &#xA; &lt;li&gt;Allow the use of any library written in Dart by generating &lt;code&gt;external&lt;/code&gt; Kotlin APIs&lt;/li&gt; &#xA; &lt;li&gt;Generate code that is still readable and pleasant to use for Dart consumers&lt;/li&gt; &#xA; &lt;li&gt;Integrate with Dart&#39;s build system (e.g. use &lt;code&gt;pubspec.yaml&lt;/code&gt; to define dependencies)&lt;/li&gt; &#xA; &lt;li&gt;Create an IntelliJ/Fleet plugin&lt;/li&gt; &#xA; &lt;li&gt;Support Flutter &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Flutter: Allow seamless Dart-Kotlin to Android-Kotlin integration (and possibly Swift)&lt;/li&gt; &#xA;   &lt;li&gt;Flutter: Create a fluent widget builder DSL using Kotlin&#39;s scope functions on top of the generated &lt;code&gt;external&lt;/code&gt; API&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Dotlin, at this point in time, should not be used for any production projects. If you want to try it out, clone the repo and you can then build it with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew build distZip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can find Dotlin in &lt;code&gt;build/distributions/dotlin-&amp;lt;version&amp;gt;.zip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In there, there&#39;s a &lt;code&gt;bin/dotlin&lt;/code&gt; executable you can try out.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Since the project is at an early stage, a lot is still changing and therefore — &lt;strong&gt;for now&lt;/strong&gt; — code contributions are not encouraged. However, in the future when Dotlin is in a more stable state this will definitely change.&lt;/p&gt; &#xA;&lt;p&gt;When code contributions are encouraged, you are required to sign off all of your commits:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;My commit message&#xA;&#xA;Signed-off-by: Jan Jansen &amp;lt;jan@jansen.dev&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By contributing and signing off your commits, you agree to the Developer Certificate of Origin (DCO), which you can &lt;a href=&#34;https://developercertificate.org/&#34;&gt;read here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For now however, it is encouraged to try Dotlin out, and if you notice anything odd, or want to request a feature/improvement, to create an issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Dotlin itself is licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.en.html&#34;&gt;AGPL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that this does not apply to code generated by Dotlin. Code generated by Dotlin can be used in projects of any license.&lt;/p&gt; &#xA;&lt;p&gt;All libraries used by consumers (e.g. the Kotlin standard library implementation, the Dart core Kotlin definitions) are licensed under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Dotlin logo (&lt;code&gt;docs/assets/dotlin.png&lt;/code&gt;) is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bytedance/appshark</title>
    <updated>2022-09-07T01:35:01Z</updated>
    <id>tag:github.com,2022-09-07:/bytedance/appshark</id>
    <link href="https://github.com/bytedance/appshark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AppShark&lt;/h1&gt; &#xA;&lt;p&gt;Appshark is a static taint analysis platform to scan vulnerabilities in an Android app.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Appshark requires a specific version of JDK -- &lt;a href=&#34;https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html&#34;&gt;JDK 11&lt;/a&gt;. After testing, it does not work on other LTS versions, JDK 8 and JDK 16, due to the dependency compatibility issue.&lt;/p&gt; &#xA;&lt;h2&gt;Building/Compiling AppShark&lt;/h2&gt; &#xA;&lt;p&gt;We assume that you are working in the root directory of the project repo. You can build the whole project with the &lt;a href=&#34;https://gradle.org/&#34;&gt;gradle&lt;/a&gt; tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./gradlew build  -x test &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After executing the above command, you will see an artifact file &lt;code&gt;AppShark-0.1-all.jar&lt;/code&gt; in the directory &lt;code&gt;build/libs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running AppShark&lt;/h2&gt; &#xA;&lt;p&gt;Like the previous step, we assume that you are still in the root folder of the project. You can run the tool with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ java -jar build/libs/AppShark-0.1-all.jar  config/config.json5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;config.json5&lt;/code&gt; has the following configuration contents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;  &#34;apkPath&#34;: &#34;/Users/apks/app1.apk&#34;,&#xA;  &#34;out&#34;: &#34;out&#34;,&#xA;  &#34;rules&#34;: &#34;unZipSlip.json&#34;,&#xA;  &#34;maxPointerAnalyzeTime&#34;: 600&#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each JSON field is explained below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;apkPath: the path of the apk file to analyze&lt;/li&gt; &#xA; &lt;li&gt;out: the path of the output directory&lt;/li&gt; &#xA; &lt;li&gt;rules: the path(s) of the rule file(s), can be more than 1 rules&lt;/li&gt; &#xA; &lt;li&gt;maxPointerAnalyzeTime: the timeout duration in seconds set for the analysis started from an entry point&lt;/li&gt; &#xA; &lt;li&gt;debugRule: specify the rule name that enables logging for debugging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you provide a configuration JSON file which sets the output path as &lt;code&gt;out&lt;/code&gt; in the project root directory, you will find the result file &lt;code&gt;out/results.json&lt;/code&gt; after running the analysis.&lt;/p&gt; &#xA;&lt;h2&gt;Interpreting the Results&lt;/h2&gt; &#xA;&lt;p&gt;Below is an example of the &lt;code&gt;results.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;  &#34;AppInfo&#34;: {&#xA;    &#34;AppName&#34;: &#34;test&#34;,&#xA;    &#34;PackageName&#34;: &#34;net.bytedance.security.app&#34;,&#xA;    &#34;min_sdk&#34;: 17,&#xA;    &#34;target_sdk&#34;: 28,&#xA;    &#34;versionCode&#34;: 1000,&#xA;    &#34;versionName&#34;: &#34;1.0.0&#34;&#xA;  },&#xA;  &#34;SecurityInfo&#34;: {&#xA;    &#34;FileRisk&#34;: {&#xA;      &#34;unZipSlip&#34;: {&#xA;        &#34;category&#34;: &#34;FileRisk&#34;,&#xA;        &#34;detail&#34;: &#34;&#34;,&#xA;        &#34;model&#34;: &#34;2&#34;,&#xA;        &#34;name&#34;: &#34;unZipSlip&#34;,&#xA;        &#34;possibility&#34;: &#34;4&#34;,&#xA;        &#34;vulners&#34;: [&#xA;          {&#xA;            &#34;details&#34;: {&#xA;              &#34;position&#34;: &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolderFix1(java.lang.String,java.lang.String)&amp;gt;&#34;,&#xA;              &#34;Sink&#34;: &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolderFix1(java.lang.String,java.lang.String)&amp;gt;-&amp;gt;$r31&#34;,&#xA;              &#34;entryMethod&#34;: &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void f()&amp;gt;&#34;,&#xA;              &#34;Source&#34;: &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolderFix1(java.lang.String,java.lang.String)&amp;gt;-&amp;gt;$r3&#34;,&#xA;              &#34;url&#34;: &#34;/Volumes/dev/zijie/appshark-opensource/out/vuln/1-unZipSlip.html&#34;,&#xA;              &#34;target&#34;: [&#xA;                &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolderFix1(java.lang.String,java.lang.String)&amp;gt;-&amp;gt;$r3&#34;,&#xA;                &#34;pf{obj{&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolderFix1(java.lang.String,java.lang.String)&amp;gt;:35=&amp;gt;java.lang.StringBuilder}(unknown)-&amp;gt;@data}&#34;,&#xA;                &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolderFix1(java.lang.String,java.lang.String)&amp;gt;-&amp;gt;$r11&#34;,&#xA;                &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolderFix1(java.lang.String,java.lang.String)&amp;gt;-&amp;gt;$r31&#34;&#xA;              ]&#xA;            },&#xA;            &#34;hash&#34;: &#34;ec57a2a3190677ffe78a0c8aaf58ba5aee4d2247&#34;,&#xA;            &#34;possibility&#34;: &#34;4&#34;&#xA;          },&#xA;          {&#xA;            &#34;details&#34;: {&#xA;              &#34;position&#34;: &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolder(java.lang.String,java.lang.String)&amp;gt;&#34;,&#xA;              &#34;Sink&#34;: &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolder(java.lang.String,java.lang.String)&amp;gt;-&amp;gt;$r34&#34;,&#xA;              &#34;entryMethod&#34;: &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void f()&amp;gt;&#34;,&#xA;              &#34;Source&#34;: &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolder(java.lang.String,java.lang.String)&amp;gt;-&amp;gt;$r3&#34;,&#xA;              &#34;url&#34;: &#34;/Volumes/dev/zijie/appshark-opensource/out/vuln/2-unZipSlip.html&#34;,&#xA;              &#34;target&#34;: [&#xA;                &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolder(java.lang.String,java.lang.String)&amp;gt;-&amp;gt;$r3&#34;,&#xA;                &#34;pf{obj{&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolder(java.lang.String,java.lang.String)&amp;gt;:33=&amp;gt;java.lang.StringBuilder}(unknown)-&amp;gt;@data}&#34;,&#xA;                &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolder(java.lang.String,java.lang.String)&amp;gt;-&amp;gt;$r14&#34;,&#xA;                &#34;&amp;lt;net.bytedance.security.app.pathfinder.testdata.ZipSlip: void UnZipFolder(java.lang.String,java.lang.String)&amp;gt;-&amp;gt;$r34&#34;&#xA;              ]&#xA;            },&#xA;            &#34;hash&#34;: &#34;26c6d6ee704c59949cfef78350a1d9aef04c29ad&#34;,&#xA;            &#34;possibility&#34;: &#34;4&#34;&#xA;          }&#xA;        ],&#xA;        &#34;wiki&#34;: &#34;&#34;,&#xA;        &#34;deobfApk&#34;: &#34;/Volumes/dev/zijie/appshark-opensource/app.apk&#34;&#xA;      }&#xA;    }&#xA;  },&#xA;  &#34;DeepLinkInfo&#34;: {&#xA;  },&#xA;  &#34;HTTP_API&#34;: [&#xA;  ],&#xA;  &#34;JsBridgeInfo&#34;: [&#xA;  ],&#xA;  &#34;BasicInfo&#34;: {&#xA;    &#34;ComponentsInfo&#34;: {&#xA;    },&#xA;    &#34;JSNativeInterface&#34;: [&#xA;    ]&#xA;  },&#xA;  &#34;UsePermissions&#34;: [&#xA;  ],&#xA;  &#34;DefinePermissions&#34;: {&#xA;  },&#xA;  &#34;Profile&#34;: &#34;/Volumes/dev/zijie/appshark-opensource/out/vuln/3-profiler.json&#34;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;AppShark is licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;APACHE LICENSE, VERSION 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>