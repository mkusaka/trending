<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-26T01:31:41Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ehsannarmani/ComposeCharts</title>
    <updated>2024-10-26T01:31:41Z</updated>
    <id>tag:github.com,2024-10-26:/ehsannarmani/ComposeCharts</id>
    <link href="https://github.com/ehsannarmani/ComposeCharts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Animated &amp; Flexible Practical Charts For Jetpack Compose&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Compose Charts&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/banner.png?raw=true&#34; alt=&#34;banner&#34;&gt; &lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/mokup.png?raw=true&#34; alt=&#34;mockup&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Kotlin-2.0.0-orange&#34; alt=&#34;Kotlin&#34;&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.org/docs/reference/multiplatform.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Kotlin-Multiplatform-blue&#34; alt=&#34;Kotlin Multiplatform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Android-3aab58&#34; alt=&#34;Platform&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Desktop-097cd5&#34; alt=&#34;Platform&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/IOS-d32408&#34; alt=&#34;Platform&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/WasmJS-f7e025&#34; alt=&#34;Platform&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#gradle-setup&#34;&gt;Gradle Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#all-charts&#34;&gt;All Charts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#pie-chart&#34;&gt;Pie Chart&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#row-chart&#34;&gt;Row Chart&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#column-chart&#34;&gt;Column Chart&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#line-chart&#34;&gt;Line Chart&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#animation-mode&#34;&gt;Animation Mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#chart-properties&#34;&gt;Chart Properties&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#bars-barproperties&#34;&gt;Bars&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#dots-dotproperties&#34;&gt;Dots&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#indicators-indicatorproperties&#34;&gt;Indicators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#grid-lines-gridproperties&#34;&gt;Grid Lines&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#axis-axisproperties&#34;&gt;Axis&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#dividers-dividerproperties&#34;&gt;Dividers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#line-lineproperties&#34;&gt;Lines&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#labels-labelproperties&#34;&gt;Labels&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#label-helpers-labelhelperproperties&#34;&gt;Label Helpers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ehsannarmani/ComposeCharts/master/#popups-popupproperties&#34;&gt;Popups&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Gradle Setup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://central.sonatype.com/artifact/io.github.ehsannarmani/compose-charts/overview&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.github.ehsannarmani/compose-charts?color=4caf50&amp;amp;label=Latest%20Release&amp;amp;v=10&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation (&#34;io.github.ehsannarmani:compose-charts:latest_version&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] We migrated to maven central repository in 0.0.5v, so if you want to access previous versions of library, see &lt;a href=&#34;https://github.com/ehsannarmani/ComposeCharts/tree/0.0.4&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;All Charts:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/full_chart.png?raw=true&#34; alt=&#34;mockup&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples:&lt;/h2&gt; &#xA;&lt;h3&gt;Pie Chart:&lt;/h3&gt; &#xA;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/pie1.gif?raw=true&#34; width=&#34;300&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;PieChart(&#xA;   modifier = Modifier.size(200.dp),&#xA;   data = listOf(&#xA;      Pie(label = &#34;Android&#34;,data = 20.0, color = Color.Red, selectedColor = Color.Green),&#xA;      Pie(label = &#34;Windows&#34;,data = 45.0, color = Color.Cyan, selectedColor = Color.Blue),&#xA;      Pie(label = &#34;Linux&#34;,data = 35.0, color = Color.Gray, selectedColor = Color.Yellow),&#xA;   ),&#xA;   onPieClick = {&#xA;       println(&#34;${it.label} Clicked&#34;)&#xA;       val pieIndex = data.indexOf(it)&#xA;       data = data.mapIndexed { mapIndex, pie -&amp;gt; pie.copy(selected = pieIndex == mapIndex) }&#xA;   },&#xA;   selectedScale = 1.2f,&#xA;   scaleAnimEnterSpec = spring&amp;lt;Float&amp;gt;(&#xA;       dampingRatio = Spring.DampingRatioMediumBouncy,&#xA;       stiffness = Spring.StiffnessLow&#xA;   ),&#xA;   colorAnimEnterSpec = tween(300),&#xA;   colorAnimExitSpec = tween(300),&#xA;   scaleAnimExitSpec = tween(300),&#xA;   spaceDegreeAnimExitSpec = tween(300),&#xA;   style = Pie.Style.Fill&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You can change chart style to stroke:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/pie2.gif?raw=true&#34; width=&#34;300&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/pie3.gif?raw=true&#34; width=&#34;300&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;PieChart(&#xA;   ...,&#xA;   spaceDegree = 7f,&#xA;   selectedPaddingDegree = 4f,&#xA;   style = Pie.Style.Stroke(width = 100f)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Column Chart:&lt;/h3&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/column1.gif?raw=true&#34; width=&#34;300&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/column2.gif?raw=true&#34; width=&#34;300&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;ColumnChart(&#xA;    modifier= Modifier.fillMaxSize().padding(horizontal = 22.dp),&#xA;    data = listOf(&#xA;        Bars(&#xA;            label = &#34;Jan&#34;,&#xA;            values = listOf(&#xA;               Bars.Data(label = &#34;Linux&#34;, value = 50.0, color = Brush.verticalGradient(...)),&#xA;               Bars.Data(label = &#34;Windows&#34;, value = 70.0, color = SolidColor(Color.Red)),&#xA;            )&#xA;        ),&#xA;        Bars(&#xA;            label = &#34;Feb&#34;,&#xA;            values = listOf(&#xA;               Bars.Data(label = &#34;Linux&#34;, value = 80.0, color = Brush.verticalGradient(...)),&#xA;               Bars.Data(label = &#34;Windows&#34;, value = 60.0, color = SolidColor(Color.Red)),&#xA;            )&#xA;        ),&#xA;        ...&#xA;    ),&#xA;    barProperties = BarProperties(&#xA;        radius = Bars.Data.Radius.Rectangle(topRight = 6.dp, topLeft = 6.dp),&#xA;        spacing = 3.dp,&#xA;        strokeWidth = 20.dp&#xA;    ),&#xA;    animationSpec = spring(&#xA;        dampingRatio = Spring.DampingRatioMediumBouncy,&#xA;        stiffness = Spring.StiffnessLow&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You can set how many data you want for every bar:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/column3.gif?raw=true&#34; width=&#34;300&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;ColumnChart(&#xA;    data = listOf(&#xA;        Bars(&#xA;            label = &#34;1&#34;, values = listOf(&#xA;               Bars.Data(value = 10.0, color = Color.Blue)&#xA;            )&#xA;        ),&#xA;        Bars(&#xA;            label = &#34;2&#34;, values = listOf(&#xA;               Bars.Data(value = 20.0, color = Color.Blue)&#xA;            )&#xA;        ),&#xA;        ...&#xA;    ),&#xA;    barProperties = BarProperties(&#xA;        spacing = 1.dp,&#xA;        strokeWidth = 10.dp,&#xA;    ),&#xA;    ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You can set negative values for this chart and define max value and min value:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/column_negative.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;ColumnChart(&#xA;    data = listOf(&#xA;        Bars(&#xA;            label = &#34;1&#34;, values = listOf(&#xA;               Bars.Data(value = -40.0, color = Color.Blue)&#xA;            )&#xA;        ),&#xA;        Bars(&#xA;            label = &#34;2&#34;, values = listOf(&#xA;               Bars.Data(value = 50.0, color = Color.Blue)&#xA;            )&#xA;        ),&#xA;        ...&#xA;    ),&#xA;    maxValue = 75.0,&#xA;    minValue = -75.0&#xA;    ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] By default, max value is the highest value of given data, min value is 0 when there is no value under the zero in given data, otherwise if there is value under zero, min value will be (-maxValue)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Row Chart:&lt;/h3&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/row1.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/row2.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/row3.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;RowChart(&#xA;    modifier= Modifier.fillMaxSize().padding(horizontal = 22.dp),&#xA;    data = listOf(&#xA;        Bars(&#xA;            label = &#34;Jan&#34;,&#xA;            values = listOf(&#xA;               Bars.Data(label = &#34;Linux&#34;, value = 50.0, color = Brush.verticalGradient(...)),&#xA;               Bars.Data(label = &#34;Windows&#34;, value = 70.0, color = SolidColor(Color.Red)),&#xA;            )&#xA;        ),&#xA;        Bars(&#xA;            label = &#34;Feb&#34;,&#xA;            values = listOf(&#xA;               Bars.Data(label = &#34;Linux&#34;, value = 80.0, color = Brush.verticalGradient(...)),&#xA;               Bars.Data(label = &#34;Windows&#34;, value = 60.0, color = SolidColor(Color.Red)),&#xA;            )&#xA;        ),&#xA;        ...&#xA;    ),&#xA;    barProperties = BarProperties(&#xA;        radius = Bars.Data.Radius.Rectangle(topRight = 6.dp, topLeft = 6.dp),&#xA;        spacing = 3.dp,&#xA;        strokeWidth = 20.dp&#xA;    ),&#xA;    animationSpec = spring(&#xA;        dampingRatio = Spring.DampingRatioMediumBouncy,&#xA;        stiffness = Spring.StiffnessLow&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You can set negative values for this chart and define max value and min value:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/row_negative.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;RowChart(&#xA;    data = listOf(&#xA;        Bars(&#xA;            label = &#34;1&#34;, values = listOf(&#xA;               Bars.Data(value = -40.0, color = Color.Blue)&#xA;            )&#xA;        ),&#xA;        Bars(&#xA;            label = &#34;2&#34;, values = listOf(&#xA;               Bars.Data(value = 50.0, color = Color.Blue)&#xA;            )&#xA;        ),&#xA;        ...&#xA;    ),&#xA;    maxValue = 75.0,&#xA;    minValue = -75.0&#xA;    ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] By default, max value is the highest value of given data, min value is 0 when there is no value under the zero in given data, otherwise if there is value under zero, min value will be (-maxValue)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Line Chart:&lt;/h3&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/line2.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/line8.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;LineChart(&#xA;    modifier = Modifier.fillMaxSize().padding(horizontal = 22.dp),&#xA;    data = listOf(&#xA;         Line(&#xA;            label = &#34;Windows&#34;,&#xA;            values = listOf(28.0,41.0,5.0,10.0,35.0),&#xA;            color = SolidColor(Color(0xFF23af92)),&#xA;            firstGradientFillColor = Color(0xFF2BC0A1).copy(alpha = .5f),&#xA;            secondGradientFillColor = Color.Transparent,&#xA;            strokeAnimationSpec = tween(2000, easing = EaseInOutCubic),&#xA;            gradientAnimationDelay = 1000,&#xA;            drawStyle = DrawStyle.Stroke(width = 2.dp),&#xA;         )&#xA;    ),&#xA;    animationMode = AnimationMode.Together(delayBuilder = {&#xA;        it * 500L&#xA;    }),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You can set min &amp;amp; max value for all charts and show zero line:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/zero_line.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;LineChart(&#xA;    data = listOf(&#xA;         Line(&#xA;            label = &#34;Temperature&#34;,&#xA;            values = listOf(28.0,41.0,-5.0,10.0,35.0),&#xA;            color = Brush.radialGradient(...),&#xA;            ...&#xA;         )&#xA;    ),&#xA;    ...,&#xA;    zeroLineProperties = LineProperties(&#xA;        enabled = true,&#xA;        color = SolidColor(Color.Red),&#xA;    ),&#xA;    minValue = -20.0,&#xA;    maxValue = 100.0&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Max value by default is highest value of chart data and Min value is 0 when there is no value under the zero, otherwise it&#39;s the lowest data.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You can set gradient color for lines:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/line7.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;LineChart(&#xA;    data = listOf(&#xA;         Line(&#xA;            label = &#34;Linux&#34;,&#xA;            values = listOf(28.0,41.0,5.0,10.0,35.0),&#xA;            color = Brush.radialGradient(...),&#xA;            ...&#xA;         )&#xA;    ),&#xA;    ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You can add how many lines you want:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/line1.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;LineChart(&#xA;    data = listOf(&#xA;         Line(&#xA;            label = &#34;Windows&#34;,&#xA;            values = listOf(...),&#xA;            color = Color.Green,&#xA;            curvedEdges = true&#xA;         ),&#xA;         Line(&#xA;            label = &#34;Linux&#34;,&#xA;            values = listOf(...),&#xA;            color = Color.Orange,&#xA;            curvedEdges = false&#xA;         ),&#xA;         Line(&#xA;            label = &#34;Linux&#34;,&#xA;            values = listOf(...),&#xA;            color = Color.Blue,&#xA;            curvedEdges = true&#xA;         ),&#xA;    ),&#xA;    ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You can show dots and disable line edge curving:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/line3.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;LineChart(&#xA;    data = listOf(&#xA;         Line(&#xA;            label = &#34;Windows&#34;,&#xA;            values = listOf(...),&#xA;            color = Color.Orange,&#xA;            curvedEdges = true,&#xA;            dotProperties = DotProperties(&#xA;                enabled = true,&#xA;                color = SolidColor(Color.White),&#xA;                strokeWidth = 4f,&#xA;                radius = 7f,&#xA;                strokeColor = SolidColor(Color.Orange),&#xA;            )&#xA;         ),&#xA;         Line(&#xA;            label = &#34;Linux&#34;,&#xA;            values = listOf(...),&#xA;            color = Color.Cyan,&#xA;            curvedEdges = false,&#xA;            dotProperties = DotProperties(&#xA;               ...&#xA;            )&#xA;         ),&#xA;    ),&#xA;    curvedEdges = false&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You can make chart line dashed:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/line6.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;LineChart(&#xA;    data = listOf(&#xA;         Line(&#xA;            label = &#34;Windows&#34;,&#xA;            values = listOf(...),&#xA;            drawStyle = DrawStyle.Stroke(&#xA;                width = 3.dp,&#xA;                strokeStyle = StrokeStyle.Dashed(intervals = floatArrayOf(10f,10f), phase = 15f)&#xA;            )&#xA;            ...&#xA;         ),&#xA;         Line(&#xA;            label = &#34;Linux&#34;,&#xA;            values = listOf(...),&#xA;            ...&#xA;         ),&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You can make chart fill color:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/charts/line9.gif?raw=true&#34; width=&#34;250&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;LineChart(&#xA;    data = listOf(&#xA;         Line(&#xA;            label = &#34;Windows&#34;,&#xA;            values = listOf(...),&#xA;            color = Color.Orange,&#xA;            drawStyle = DrawStyle.Fill,&#xA;            ...&#xA;         ),&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Animation Mode:&lt;/h2&gt; &#xA;&lt;h4&gt;In Row/Column/Line charts you can set running animations at the same time types:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OneByOne&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Animations will run one by one, for example in line charts, lines will be drawn after previous line animation finished.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Together&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;By default, animations will run async, but you can set delay for next animations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;LineChart(&#xA;   ...,&#xA;   animationMode = AnimationMode.OneByOne&#xA;)&#xA;&#xA;LineChart(&#xA;   ...,&#xA;   animationMode = AnimationMode.Together(delayBuilder = { index-&amp;gt; index*200 })&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] In the last example, every animation will be start 200ms after previous animations start.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Chart Properties:&lt;/h2&gt; &#xA;&lt;h3&gt;Bars: &lt;code&gt;BarProperties&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Usage: In Column/Row Charts you can set bar properties with this property&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;thickness&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;20&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies bar width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;spacing&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies space between data bars when you have more than one bar in a data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cornerRadius&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bars.Data.Radius&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Bars.Data.Radius.None&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies space between data bars when you have more than one bar in a data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DrawStyle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;DrawStyle.Fill&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies bar style&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val barProperties = BarProperties(&#xA;   thickness = 15.dp,&#xA;   spacing = 4.dp,&#xA;   cornerRadius = Bars.Data.Radius.Circular(6.dp),&#xA;   style = DrawStyle.Fill&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Dots: &lt;code&gt;DotProperties&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Usage: In Line Charts you can set data dot shape properties with this property&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies dots visibility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;radius&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Float&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;10f&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies dot size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Brush&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SolidColor(Color.Unspecified)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies dot color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;strokeWidth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Float&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;3f&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies dot stroke width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;strokeColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Brush&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SolidColor(Color.Unspecified)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies dot stroke color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;strokeStyle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;StrokeStyle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StrokeStyle.Normal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies dot stroke style&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;animationEnabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;set &lt;code&gt;false&lt;/code&gt; if you want to show dots without delay and animation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;animationSpec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AnimationSpec&#xA;    &lt;float&gt;&lt;/float&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tween(300)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies dots visibility animation spec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val dotProperties = DotProperties(&#xA;   enabled = true,&#xA;   radius = 10f,&#xA;   color = SolidColor(Color.Red),&#xA;   strokeWidth = 3f,&#xA;   strokeColor = Color.White,&#xA;   strokeStyle = StrokeStyle.Normal,&#xA;   animationEnabled = true,&#xA;   animationSpec = tween(500)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Indicators: &lt;code&gt;IndicatorProperties&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Usage: In every chart you can set properties of counters next to the chart&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies indicator visiblity&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;textStyle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TextStyle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TextStyle.Default&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies counter style&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;count&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Int&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies counters count&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;position&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;IndicatorPosition&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Depends on chart&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies indicator position, in line &amp;amp; column charts can be: start or end, in line charts can be: top or bottom&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;12&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies indicator area padding with chart area&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;contentBuilder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(Double) -&amp;gt; String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ &#34;%.2f&#34;.format(it) }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies counter content creation template&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example For Column/Line Charts:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val indicatorProperties = HorizontalIndicatorProperties(&#xA;   enabled = true,&#xA;   textStyle = MaterialTheme.typography.labelSmall,&#xA;   count = 5,&#xA;  position = IndicatorPosition.Horizontal.End,&#xA;  padding = 32.dp,&#xA;   contentBuilder = { indicator-&amp;gt;&#xA;        &#34;%.2f&#34;.format(indicator)+&#34; Million&#34;&#xA;   }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example For Row Charts:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val indicatorProperties = VerticalIndicatorProperties(&#xA;  enabled = true,&#xA;  textStyle = MaterialTheme.typography.labelSmall,&#xA;  count = 5,&#xA;  position = IndicatorPosition.Vertical.Top,&#xA;  padding = 32.dp,&#xA;  contentBuilder = { indicator -&amp;gt;&#xA;    &#34;%.2f&#34;.format(indicator) + &#34; Million&#34;&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Grid Lines: &lt;code&gt;GridProperties&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Usage: In every chart you can set properties of grid lines&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies grid lines visibility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;xAxisProperties&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AxisProperties&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;AxisProperties(..)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies grid horizontal lines properties&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yAxisProperties&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AxisProperties&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;AxisProperties(..)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies grid vertical lines properties&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val gridProperties = GridProperties(&#xA;   enabled = true,&#xA;   xAxisProperties = AxisProperties(&#xA;      ...&#xA;   ),&#xA;   yAxisProperties = AxisProperties(&#xA;      ...&#xA;   )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Axis: &lt;code&gt;AxisProperties&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies axis line visibility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;StrokeStyle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StrokeStyle.Normal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies axis line style&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Color&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Color.Gray&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies axis line color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;thickness&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(0.5).dp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies axis line stroke width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lineCount&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Int&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies count of axis lines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val axisProperties = AxisProperties(&#xA;   enabled = true,&#xA;   style = StrokeStyle.Dashed(intervals = floatArrayOf(10f,10f)),&#xA;   color = Color.Gray,&#xA;   thickness = (.5).dp,&#xA;   lineCount = 5&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Dividers: &lt;code&gt;DividerProperties&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Usage: In every chart you can set properties of dividers between labels and chart, indicators and chart&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies dividers visibility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;xAxisProperties&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LineProperties&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LineProperties(..)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies horizontal divider properties&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yAxisProperties&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LineProperties&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LineProperties(..)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies vertical divider properties&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val dividerProperties = DividerProperties(&#xA;   enabled = true,&#xA;   xAxisProperties = LineProperties(&#xA;      ...&#xA;   ),&#xA;   yAxisProperties = LineProperties(&#xA;      ...&#xA;   )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Line: &lt;code&gt;LineProperties&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies axis line visibility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;StrokeStyle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StrokeStyle.Normal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies axis line style&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Color&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Color.Gray&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies axis line color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;thickness&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(0.5).dp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies axis line stroke width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val lineProperties = LineProperties(&#xA;   enabled = true,&#xA;   style = StrokeStyle.Dashed(intervals = floatArrayOf(10f,10f)),&#xA;   color = Color.Gray,&#xA;   thickness = (.5).dp,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Labels: &lt;code&gt;LabelProperties&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Usage: In every chart you can set properties of the labels (Apr, Jan, ...)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies labels visibility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;textStyle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TextStyle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TextStyle.Default&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies label textStyle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verticalPadding&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;12.dp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies vertical padding of labels area&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;labels&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&#xA;    &lt;string&gt;&lt;/string&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;emptyList()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;In line charts, specifies chart labels&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rotationDegreeOnSizeConflict&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Float&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-45&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;rotation degree of label on size confilict with other labels (See)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;forceRotation&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies force rotation for labels (in false mode, labels rotate only when there is a label whose width is more than 50% different from the others)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Example of label rotation degree&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/ehsannarmani/ComposeCharts/raw/master/assets/rotation_degree_sample.png?raw=true&#34; width=&#34;300&#34;&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val labelProperties = LabelProperties(&#xA;   enabled = true,&#xA;   textStyle = MaterialTheme.typography.labelSmall,&#xA;   verticalPadding = 16.dp,&#xA;   labels = listOf(&#34;Apr&#34;,&#34;Mar&#34;,...)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Label Helpers: &lt;code&gt;LabelHelperProperties&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Usage: In every chart you can set properties of the labels helper which positioned in top of chart&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies label helpers visibility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;textStyle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TextStyle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TextStyle.Default&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies label helper textStyle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val labelHelperProperties = LabelHelperProperties(&#xA;   enabled = true,&#xA;   textStyle = MaterialTheme.typography.labelMedium&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Popups: &lt;code&gt;PopupProperties&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Usage: In every chart you can set properties of popup which shown when user click or drag on chart&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] In line charts your can set specific popup properties for each line, for example you can disable one of lines popup and e.g.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies popup visibility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;animationSpec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AnimationSpec&#xA;    &lt;float&gt;&lt;/float&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tween(400)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies popup visibility animation spec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;duration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Long&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1500&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;in column/row charts, specifies how long the popup will be visible&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;textStyle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TextStyle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TextStyle.Default&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies popup text style&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;containerColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Color&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Color(0xff313131)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies popup background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cornerRadius&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;6.dp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies popup corner radius&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;contentHorizontalPadding&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;4.dp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies popup horizontal padding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;contentVerticalPadding&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;2.dp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies popup vertical padding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;contentBuilder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(Double)-&amp;gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ &#34;%.2f&#34;.format(it) }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specifies popup content creation template&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val popupProperties = PopupProperties(&#xA;   enabled = true,&#xA;   animationSpec = tween(300),&#xA;   duration = 2000L,&#xA;   textStyle = MaterialTheme.typography.labelSmall,&#xA;   containerColor = Color.White,&#xA;   cornerRadius = 8.dp,&#xA;   contentHorizontalPadding = 4.dp,&#xA;   contentVerticalPadding = 2.dp,&#xA;   contentBuilder = { value-&amp;gt;&#xA;      &#34;%.1f&#34;.format(value)+&#34;Million&#34;&#xA;   }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Todos:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add Candle Stick Chart&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add Circle Progress Chart&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MultiPlatform Support&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>