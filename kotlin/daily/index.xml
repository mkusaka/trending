<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-22T01:39:32Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>touchlab/DroidconKotlin</title>
    <updated>2022-08-22T01:39:32Z</updated>
    <id>tag:github.com,2022-08-22:/touchlab/DroidconKotlin</id>
    <link href="https://github.com/touchlab/DroidconKotlin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kotlin Multiplatfom app for Droidcon Events&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sessionize/Droidcon Mobile Clients&lt;/h1&gt; &#xA;&lt;h2&gt;General Info&lt;/h2&gt; &#xA;&lt;p&gt;This project has a pair of native mobile applications backed by the Sessionize data api for use in events hosted by the Sessionize web application. These are specifically for Droidcon events, but can be forked and customized for anything run on Sessionize.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;The apps need a Firebase account set up to run. You&#39;ll need to get the &lt;code&gt;google-services.json&lt;/code&gt; and put it in &lt;code&gt;android/google-services.json&lt;/code&gt; for Android, and the &lt;code&gt;GoogleService-Info.plist&lt;/code&gt; and put that in &lt;code&gt;ios/Droidcon/Droidcon/GoogleService-Info.plist&lt;/code&gt; for iOS.&lt;/p&gt; &#xA;&lt;h2&gt;Compose UI for both!&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re running a very early version of Compose UI for iOS as the iOS interface. It mostly shares the screen code with the Android app. While Native Compose UI is obviously experimental, it works surprisingly well.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://touchlab.co/droidcon-nyc-ios-app-with-compose/&#34;&gt;Check out the blog post&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Media&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/touchlab/DroidconKotlin/main/MEDIA.md&#34;&gt;Blog posts and videos -&amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Sessionize/Droidcon brought to you by...&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://touchlab.co&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/touchlab/DroidconKotlin/main/tlsmall.png&#34; alt=&#34;Touchlab Logo&#34; title=&#34;Touchlab Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mobile-dev-inc/maestro</title>
    <updated>2022-08-22T01:39:32Z</updated>
    <id>tag:github.com,2022-08-22:/mobile-dev-inc/maestro</id>
    <link href="https://github.com/mobile-dev-inc/maestro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Platform-agnostic UI automation library for Android and iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Maestro ðŸŽ¹&lt;/h1&gt; &#xA;&lt;p&gt;Maestro is a declarative UI automation library for Android and iOS.&lt;/p&gt; &#xA;&lt;p&gt;Documentation for Maestro can be found at &lt;a href=&#34;https://maestro.mobile.dev&#34;&gt;maestro.mobile.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Create a flow for any app on Android and iOS, with just a few lines of YAML.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# flow_contacts_android.yaml&#xA;&#xA;appId: com.android.contacts&#xA;---&#xA;- launchApp&#xA;- tapOn: &#34;Create new contact&#34;&#xA;- tapOn: &#34;First Name&#34;&#xA;- inputText: &#34;John&#34;&#xA;- tapOn: &#34;Last Name&#34;&#xA;- inputText: &#34;Snow&#34;&#xA;- tapOn: &#34;Save&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mobile-dev-inc/maestro/main/assets/add_contact_android.gif&#34; height=&#34;400&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# flow_contacts_ios.yaml&#xA;&#xA;appId: com.apple.MobileAddressBook&#xA;---&#xA;- launchApp&#xA;- tapOn: &#34;John Appleseed&#34;&#xA;- tapOn: &#34;Edit&#34;&#xA;- tapOn: &#34;Add phone&#34;&#xA;- inputText: &#34;123123&#34;&#xA;- tapOn: &#34;Done&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mobile-dev-inc/maestro/main/assets/edit_contacts_ios.gif&#34; height=&#34;400&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Get a CLI tool from homebrew&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap mobile-dev-inc/tap&#xA;brew install maestro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write a simple test in a YAML file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# flow.yaml&#xA;&#xA;appId: your.package.name&#xA;---&#xA;- launchApp&#xA;- tapOn: &#34;Text on the screen&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure an Android &lt;em&gt;emulator&lt;/em&gt; is running (support of testing via USB is work in progress).&lt;/p&gt; &#xA;&lt;p&gt;Run it!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;maestro test flow.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;iOS Support&lt;/h2&gt; &#xA;&lt;p&gt;Only iOS Simulators are supported at the moment.&lt;/p&gt; &#xA;&lt;p&gt;For Maestro to work with iOS you would need to do few extra steps.&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://fbidb.io/&#34;&gt;Facebook IDB&lt;/a&gt; tool&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap facebook/fb&#xA;brew install idb-companion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And launch it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;idb_companion --udid {id of the iOS device}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why Maestro?&lt;/h2&gt; &#xA;&lt;p&gt;Maestro is built on learnings from its predecessors (Appium, Espresso, UIAutomator, XCTest)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in tolerance to flakiness. UI elements will not always be where you expect them, screen tap will not always go through, etc. Maestro embrases the instability of mobile applications and devices and tries to counter it.&lt;/li&gt; &#xA; &lt;li&gt;Built-in tolerance to delays. No need to pepper your tests with &lt;code&gt;sleep()&lt;/code&gt; calls. Maestro knows that it might take time to load the content (i.e. over the network) and automaitcally waits for it (but no longer than required).&lt;/li&gt; &#xA; &lt;li&gt;Blazingly fast iteration. Tests are interpreted, no need to compile anything. Maestro is able to continuously monitor your test files and rerun them as they change.&lt;/li&gt; &#xA; &lt;li&gt;Declarative yet powerful syntax. Define your tests in a &lt;code&gt;yaml&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Simple setup. Maestro is a single binary that works anywhere.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Next steps&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maestro.mobile.dev/guides/using-maestro-cli&#34;&gt;Learn more about Maestro features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maestro.mobile.dev/guides/using-maestro-programmatically&#34;&gt;Learn how to use Maestro programmatically&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>