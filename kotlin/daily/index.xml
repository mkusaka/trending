<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-24T01:36:49Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KasperskyLab/Kaspresso</title>
    <updated>2022-11-24T01:36:49Z</updated>
    <id>tag:github.com,2022-11-24:/KasperskyLab/Kaspresso</id>
    <link href="https://github.com/KasperskyLab/Kaspresso" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Great UI test framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://android-arsenal.com/details/1/7896&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Android%20Arsenal-Kaspresso-green.svg?style=flat&#34; alt=&#34;Android Arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://androidweekly.net/issues/issue-383&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Android%20Weekly-383-green.svg?sanitize=true&#34; alt=&#34;Android Weekly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://androidweekly.net/issues/issue-392&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Android%20Weekly-392-green.svg?sanitize=true&#34; alt=&#34;Android Weekly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/artifact/com.kaspersky.android-components/kaspresso&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.kaspersky.android-components/kaspresso&#34; alt=&#34;MavenCentral&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/KasperskyLab/Kaspresso/workflows/Build%20and%20Deploy/badge.svg?sanitize=true&#34; alt=&#34;Build and Deploy&#34;&gt; &lt;a href=&#34;https://t.me/kaspresso&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Telegram&amp;amp;message=RU&amp;amp;color=0088CC&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/kaspresso_en&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Telegram&amp;amp;message=EN&amp;amp;color=0088CC&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Kaspresso&lt;/h1&gt; &#xA;&lt;p&gt;Kaspresso is a great framework for UI testing. Based on &lt;a href=&#34;https://developer.android.com/training/testing/espresso&#34;&gt;Espresso&lt;/a&gt; and &lt;a href=&#34;https://developer.android.com/training/testing/ui-automator&#34;&gt;UI Automator&lt;/a&gt;, Kaspresso provides a wide range of additional amazing features, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;100% stability, no flakiness.&lt;/li&gt; &#xA; &lt;li&gt;Jetpack Compose support &lt;strong&gt;[Early access]&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Significantly faster execution of UI Automator commands. With Kaspresso, some UI Automator commands run &lt;strong&gt;10 times faster&lt;/strong&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Excellent readability due to human DSL.&lt;/li&gt; &#xA; &lt;li&gt;Incredible mechanism of interceptors that allows you to catch all actions and assertions in one place.&lt;/li&gt; &#xA; &lt;li&gt;Full logging.&lt;/li&gt; &#xA; &lt;li&gt;Ability to call ADB commands.&lt;/li&gt; &#xA; &lt;li&gt;UI tests writing philosophy, implemented with DSL.&lt;/li&gt; &#xA; &lt;li&gt;Features screenshotting.&lt;/li&gt; &#xA; &lt;li&gt;Robolectric support.&lt;/li&gt; &#xA; &lt;li&gt;Allure support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And many more!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://habrastorage.org/webt/dw/jh/9k/dwjh9kypjl637kxj8tiaxwjvtp0.png&#34; alt=&#34;Kaspresso&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Capabilities of Kaspresso&lt;/h2&gt; &#xA;&lt;h3&gt;Readability&lt;/h3&gt; &#xA;&lt;p&gt;We like the syntax that &lt;a href=&#34;https://github.com/KakaoCup/Kakao&#34;&gt;Kakao&lt;/a&gt; applies to write UI tests. This wrapper over Espresso uses the Kotlin DSL approach, that makes the code significantly shorter and more readable. See the difference:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Espresso&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Test&#xA;fun testFirstFeature() {&#xA;    onView(withId(R.id.toFirstFeature))&#xA;        .check(ViewAssertions.matches(&#xA;               ViewMatchers.withEffectiveVisibility(&#xA;                       ViewMatchers.Visibility.VISIBLE)))&#xA;    onView(withId(R.id.toFirstFeature)).perform(click())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kakao&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Test&#xA;fun testFirstFeature() {&#xA;    mainScreen {&#xA;        toFirstFeatureButton {&#xA;            isVisible()&#xA;            click()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We used the same approach to develop our own wrapper over UI Automator, and we called it &lt;em&gt;Kautomator&lt;/em&gt;. Take a look at the code below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UI Automator&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val instrumentation: Instrumentation = InstrumentationRegistry.getInstrumentation()&#xA;val uiDevice = UiDevice.getInstance(instrumentation)&#xA;&#xA;val uiObject = uiDevice.wait(&#xA;    Until.findObject(&#xA;        By.res(&#xA;            &#34;com.kaspersky.kaspresso.sample_kautomator&#34;,&#xA;            &#34;editText&#34;&#xA;        )&#xA;    ),&#xA;    2_000&#xA;)&#xA;&#xA;uiObject.text = &#34;Kaspresso&#34;&#xA;assertEquals(uiObject.text, &#34;Kaspresso&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kautomator&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;MainScreen {&#xA;    simpleEditText {&#xA;        replaceText(&#34;Kaspresso&#34;)&#xA;        hasText(&#34;Kaspresso&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since Kakao and Kautomator provide almost identical APIs, you don’t have to care about what is under the hood of your tests, either Espresso or UI Automator. With Kaspresso, you write the same tests for both.&lt;/p&gt; &#xA;&lt;p&gt;Read about &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/01_Wrapper_over_Espresso.md&#34;&gt;Kakao&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/02_Wrapper_over_UiAutomator.md&#34;&gt;Kautomator&lt;/a&gt; in details.&lt;/p&gt; &#xA;&lt;p&gt;However, Kakao and Kautomator themselves don&#39;t help you to see the relation between the test and the corresponding test case. Also, a long test often becomes a giant piece of code that is impossible to split into smaller parts. That&#39;s why we have created an additional Kotlin DSL that allows you to read your test more easily.&lt;/p&gt; &#xA;&lt;p&gt;See the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Test&#xA;fun shouldPassOnNoInternetScanTest() =&#xA;    beforeTest {&#xA;        // some things with the state&#xA;    }.afterTest {&#xA;        // some things with the state&#xA;    }.run {&#xA;        step(&#34;Open Simple Screen&#34;) {&#xA;            MainScreen {&#xA;                nextButton {&#xA;                    isVisible()&#xA;                    click()&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        step(&#34;Click button_1 and check button_2&#34;) {&#xA;            SimpleScreen {&#xA;                button1 {&#xA;                    click()&#xA;                }&#xA;                button2 {&#xA;                    isVisible()&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        step(&#34;Click button_2 and check edit&#34;) {&#xA;            SimpleScreen {&#xA;                button2 {&#xA;                    click()&#xA;                }&#xA;                edit {&#xA;                    flakySafely(timeoutMs = 7000) { isVisible() }&#xA;                    hasText(R.string.text_edit_text)&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        step(&#34;Check all possibilities of edit&#34;) {&#xA;            scenario(&#xA;                CheckEditScenario()&#xA;            )&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stability&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes your UI test passes ten times, then breaks on the eleventh attempt for some mysterious reason. It’s called &lt;em&gt;flakiness&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The most popular reason for flakiness is the instability of the UI tests libraries, such as Espresso and UI Automator. To eliminate this instability, Kaspresso uses DSL wrappers and &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/#Interceptors&#34;&gt;interceptors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/04_How_to_write_autotests.md#sweet-additional-features&#34;&gt;some Kaspresso features&lt;/a&gt; can help you resolve a lot of typical problems in UI testing.&lt;/p&gt; &#xA;&lt;h3&gt;UI test libraries acceleration&lt;/h3&gt; &#xA;&lt;p&gt;Let’s watch some short video that shows the difference between the original UI Automator (on the right) and the accelerated one (on the left).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://habrastorage.org/webt/ti/kv/ki/tikvkij1vjesnacrxqm-lk0coly.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/02_Wrapper_over_UiAutomator.md#accelerate-ui-automator&#34;&gt;a short explanation&lt;/a&gt; of why it is possible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Interceptors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interceptors&lt;/h3&gt; &#xA;&lt;p&gt;We developed &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/03_Kaspresso_configurator.md#some-words-about-behavior-interceptors&#34;&gt;Kaspresso behavior interceptors&lt;/a&gt; on the base of &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/03_Kaspresso_configurator.md#kaspresso-interceptors-based-on-kakaokautomator-interceptors&#34;&gt;Kakao/Kautomator Interceptors&lt;/a&gt; to catch failures.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to interceptors, you can do a lot of useful things, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add custom actions to each library operation like writing a log or taking a screenshot;&lt;/li&gt; &#xA; &lt;li&gt;overcome flaky library operations by re-running failed actions, scrolling the parent layout or removing the android system dialog;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and many more (see &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/03_Kaspresso_configurator.md#kaspresso-interceptors-based-on-kakaokautomator-interceptors&#34;&gt;the manual&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Writing readable logs&lt;/h3&gt; &#xA;&lt;p&gt;Kaspresso writes its own logs, detailed and readable:&lt;/p&gt; &#xA;&lt;img src=&#34;https://habrastorage.org/webt/03/nn/qg/03nnqgupdqnwa_i4jwyz1uqq6r0.png&#34;&gt; &#xA;&lt;img src=&#34;https://habrastorage.org/webt/tq/az/3v/tqaz3vjsgpw0-ivylrfbnuqyiqa.png&#34;&gt; &#xA;&lt;h3&gt;Ability to call ADB commands&lt;/h3&gt; &#xA;&lt;p&gt;Espresso and UI Automator don&#39;t allow to call ADB commands from inside a test. To fix this problem, we developed Autotest AdbServer (see the &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/06_AdbServer.md&#34;&gt;wiki&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Ability to work with Android System&lt;/h3&gt; &#xA;&lt;p&gt;You can use Kaspresso classes to work with Android System.&lt;/p&gt; &#xA;&lt;p&gt;For example, with the &lt;code&gt;Device&lt;/code&gt; class you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;push/pull files,&lt;/li&gt; &#xA; &lt;li&gt;enable/disable network,&lt;/li&gt; &#xA; &lt;li&gt;give permissions like a user does,&lt;/li&gt; &#xA; &lt;li&gt;emulate phone calls,&lt;/li&gt; &#xA; &lt;li&gt;take screenshots,&lt;/li&gt; &#xA; &lt;li&gt;enable/disable GPS,&lt;/li&gt; &#xA; &lt;li&gt;set geolocation,&lt;/li&gt; &#xA; &lt;li&gt;enable/disable accessibility,&lt;/li&gt; &#xA; &lt;li&gt;change the app language,&lt;/li&gt; &#xA; &lt;li&gt;collect and parse the logcat output.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(see more about the &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/05_Device.md&#34;&gt;Device class&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Features screenshotting&lt;/h3&gt; &#xA;&lt;p&gt;If you develop an application that is available across the world, you have to &lt;em&gt;localize&lt;/em&gt; it into different languages. When UI is localized, it’s important for the translator to see the context of a word or a phrase, that is the specific screen.&lt;/p&gt; &#xA;&lt;p&gt;With Kaspresso, translators can automatically take a screenshot of any screen. It’s incredibly fast, even for legacy screens, and you don&#39;t have to refactor or mock anything (see &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/07_DocLoc.md&#34;&gt;the manual&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Configurability&lt;/h3&gt; &#xA;&lt;p&gt;You can tune any part of Kaspresso (read &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/03_Kaspresso_configurator.md&#34;&gt;more&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Robolectric support&lt;/h3&gt; &#xA;&lt;p&gt;You can run your UI-tests on the JVM environment. Additionally, almost all interceptors improving stability, readability and other will work. Read &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/08_Kaspresso-Robolectric.md&#34;&gt;more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Allure support&lt;/h3&gt; &#xA;&lt;p&gt;Kaspresso can generate very detailed Allure-reports for each test: &lt;img src=&#34;https://habrastorage.org/webt/tq/t7/ch/tqt7chcdczrgduhoukqhx1ertfc.png&#34; alt=&#34;&#34;&gt; More information is available &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/09_Kaspresso-Allure.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Jetpack Compose support (Early access)&lt;/h3&gt; &#xA;&lt;p&gt;Now, you can write your Kaspresso tests for Jetpack Compose screens! DSL and all principles are the same. So, you will not see any difference between tests for View screens and for Compose screens. More information is available &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/10_Jetpack-Compose.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Keep in mind it&#39;s early access that may contain bugs. Also, API can be changed, but we are going to avoid it. Be free to create relative issues if you&#39;ve encountered with any kind of problem.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;The tool itself, even the perfect one, can not solve all the problems in writing UI tests. It’s important to know how to write tests and how to organize the entire process. Our team has great experience in introducing autotests in different companies. We shared our knowledge on &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/04_How_to_write_autotests.md&#34;&gt;writing autotests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;For all information check &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/wiki/00_Home.md&#34;&gt;Kaspresso wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Integration&lt;/h2&gt; &#xA;&lt;p&gt;To integrate Kaspresso into your project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If the &lt;code&gt;mavenCentral&lt;/code&gt; repository does not exist, include it to your root &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;allprojects {&#xA;    repositories {&#xA;        mavenCentral()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add a dependency to &lt;code&gt;build.gradle&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    androidTestImplementation &#39;com.kaspersky.android-components:kaspresso:&amp;lt;latest_version&amp;gt;&#39;&#xA;    // Allure support&#xA;    androidTestImplementation &#34;com.kaspersky.android-components:kaspresso-allure-support:&amp;lt;latest_version&amp;gt;&#34;&#xA;    // Jetpack Compose support&#xA;    androidTestImplementation &#34;com.kaspersky.android-components:kaspresso-compose-support:&amp;lt;latest_version&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are still using the old Android Support libraries, we strongly recommend to migrate to AndroidX.&lt;/p&gt; &#xA;&lt;p&gt;The last version with Android Support libraries is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    androidTestImplementation &#39;com.kaspersky.android-components:kaspresso:1.0.1-support&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;All samples are available in the &lt;a href=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/samples&#34;&gt;samples&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Most of the samples require AdbServer. To start AdbServer you should do the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the &lt;code&gt;Kaspresso&lt;/code&gt; folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/Workspace/Kaspresso&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start &lt;code&gt;adbserver-desktop.jar&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -jar artifacts/adbserver-desktop.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Storage issues&lt;/h2&gt; &#xA;&lt;p&gt;Kaspresso can use external storage to save various data about executed tests. The example of such data is screenshots, xml dumps, logs, video and anymore. But, new Android OS provides absolutely new way to work with external storage - Scoped Storage. Currently, we are working on the support of Scoped Storage. While Scoped Storage support is on the way, there is an option to request different permissions to make an access to saved data possible on any Android OS. Here, it&#39;s a detailed instruction:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;AndroidManifest.xml (in your debug build variant to keep production manifest without any changes)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;# Please, add these permissions&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.WRITE_EXTERNAL_STORAGE&#34;/&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.READ_EXTERNAL_STORAGE&#34;/&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.MANAGE_EXTERNAL_STORAGE&#34;/&amp;gt;&#xA;&#xA;&amp;lt;application&#xA;    # storage support for Android API 29         &#xA;    android:requestLegacyExternalStorage=&#34;true&#34;&#xA;    ...&#xA;&amp;lt;/application&amp;gt;             &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Your test class:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class SampleTest : TestCase(&#xA;    kaspressoBuilder = Kaspresso.Builder.simple( // simple/advanced - it doesn&#39;t matter&#xA;        customize = { &#xA;            // storage support for Android API 30+&#xA;            if (isAndroidRuntime) {&#xA;                UiDevice&#xA;                    .getInstance(instrumentation)&#xA;                    .executeShellCommand(&#34;appops set --uid ${InstrumentationRegistry.getInstrumentation().targetContext.packageName} MANAGE_EXTERNAL_STORAGE allow&#34;)&#xA;            }&#xA;        }&#xA;    )&#xA;) {&#xA;&#xA;    // storage support for Android API 29-&#xA;    @get:Rule&#xA;    val runtimePermissionRule: GrantPermissionRule = GrantPermissionRule.grant(&#xA;        Manifest.permission.WRITE_EXTERNAL_STORAGE,&#xA;        Manifest.permission.READ_EXTERNAL_STORAGE&#xA;    )&#xA;    &#xA;    //...&#xA;}    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember, it&#39;s a temporary working solution. A little bit later, Kaspresso will use external storage only through Scoped Storage and you will not be forced to request all mentioned permissions.&lt;/p&gt; &#xA;&lt;h2&gt;Breaking changes&lt;/h2&gt; &#xA;&lt;h3&gt;1.2.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We&#39;ve totally reworked AdbServer and Kaspresso 1.2.0 works only with new &lt;code&gt;artifacts/adbserver-desktop.jar&lt;/code&gt;&lt;br&gt; The old version &lt;code&gt;artifacts/desktop_1_1_0.jar&lt;/code&gt; is also available for use with older versions of Kaspresso.&lt;/li&gt; &#xA; &lt;li&gt;If you use &lt;code&gt;device.logcat&lt;/code&gt; in your tests, you should call &lt;code&gt;device.logcat.disableChatty&lt;/code&gt; in the &lt;code&gt;before&lt;/code&gt; section of your test. In previous version of Kaspresso, &lt;code&gt;device.logcat.disableChatty&lt;/code&gt; was called automatically during initialization. This resulted in the need to always run AdbServer before tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.2.1&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kaspresso migrated to a new version of Kakao which has &lt;code&gt;io.github.kakaocup.kakao&lt;/code&gt; package name. Replace all imports using command &lt;code&gt;find . -type f \( -name &#34;*.kt&#34; -o -name &#34;*.java&#34; \) -print0 | xargs -0 sed -i &#39;&#39; -e &#39;s/com.agoda/io.github.kakaocup/g&#39;&lt;/code&gt; or using global replacement tool in IDE.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Kaspresso is an open source project, so you are welcome to contribute (see the &lt;a href=&#34;https://github.com/KasperskyLab/Kaspresso/raw/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Kaspresso is available under the &lt;a href=&#34;https://github.com/KasperskyLab/Kaspresso/raw/master/LICENSE&#34;&gt;Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Our Users&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.kaspersky.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/kaspersky.svg?sanitize=true&#34; width=&#34;140&#34; height=&#34;140&#34; alt=&#34;www.kaspersky.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://hh.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/hh.png&#34; width=&#34;140&#34; alt=&#34;hh.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://aliexpress.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/aliexpress.svg?sanitize=true&#34; width=&#34;140&#34; height=&#34;140&#34; alt=&#34;aliexpress.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.sber.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/sberbank.svg?sanitize=true&#34; width=&#34;140&#34; height=&#34;140&#34; alt=&#34;www.sber.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.revolut.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/revolut.svg?sanitize=true&#34; width=&#34;140&#34; height=&#34;140&#34; alt=&#34;www.revolut.com&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.delivery-club.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/delivery_club.png&#34; width=&#34;140&#34; alt=&#34;www.delivery-club.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.vtb.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/vtb.svg?sanitize=true&#34; width=&#34;140&#34; height=&#34;140&#34; alt=&#34;www.vtb.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.tinkoff.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/tinkoff.svg?sanitize=true&#34; width=&#34;140&#34; height=&#34;140&#34; alt=&#34;www.tinkoff.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.x5.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/x5.svg?sanitize=true&#34; width=&#34;140&#34; height=&#34;140&#34; alt=&#34;www.x5.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.zen.yandex.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/yandex_zen.svg?sanitize=true&#34; width=&#34;140&#34; height=&#34;140&#34; alt=&#34;www.zen.yandex.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.psbank.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/psb.jpeg&#34; width=&#34;140&#34; alt=&#34;www.psbank.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.letoile.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/letoile.svg?sanitize=true&#34; width=&#34;140&#34; height=&#34;140&#34; alt=&#34;www.letoile.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://rtkit.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/rostelecom.png&#34; width=&#34;140&#34; alt=&#34;rtkit.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://ooo.technology&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/technology.png&#34; width=&#34;140&#34; alt=&#34;ooo.technology&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.blinkist.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/blinklist.png&#34; width=&#34;140&#34; alt=&#34;www.blinkist.com&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.rabota.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/RabotaRu.png&#34; width=&#34;140&#34; alt=&#34;www.rabota.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.cian.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/cian.png&#34; width=&#34;140&#34; alt=&#34;www.cian.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://squaregps.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/squaregps.svg?sanitize=true&#34; width=&#34;140&#34; height=&#34;140&#34; alt=&#34;squaregps.com&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://nexign.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/nexign.jpeg&#34; width=&#34;140&#34; alt=&#34;nexign.com&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://profi.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/profi.png&#34; width=&#34;140&#34; alt=&#34;profi.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://alohabrowser.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/aloha.png&#34; width=&#34;140&#34; alt=&#34;alohabrowser.com&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://vivid.money&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/vivid.money.png&#34; width=&#34;140&#34; alt=&#34;vivid.money&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.raiffeisen.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/raiffeisen.svg?sanitize=true&#34; width=&#34;140&#34; height=&#34;140&#34; alt=&#34;raiffeisen.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.cft.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/cft.png&#34; width=&#34;140&#34; alt=&#34;cft.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://www.superjob.ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasperskyLab/Kaspresso/master/users/superjob.png&#34; width=&#34;140&#34; alt=&#34;superjob.ru&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>AnkitSuda/Rebound</title>
    <updated>2022-11-24T01:36:49Z</updated>
    <id>tag:github.com,2022-11-24:/AnkitSuda/Rebound</id>
    <link href="https://github.com/AnkitSuda/Rebound" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Beautiful and feature rich workout log app.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rebound App (Under Construction)&lt;/h1&gt; &#xA;&lt;p&gt;Feature Rich &amp;amp; Highly Customizable Workout Log App&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Rebound app is currently under heavy development, many things may be changed or completely removed in future. App will stay open source until first stable release, after that further development will be closed sourced.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/ankitsuda&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; height=&#34;41&#34; width=&#34;174&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots (Outdated)&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/arts/workout_panel.png&#34; width=&#34;200&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/arts/workout_tab.png&#34; width=&#34;200&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/arts/history_tab.png&#34; width=&#34;200&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Workout Panel&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Workout Tab&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;History Tab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/arts/exercises_tab.png&#34; width=&#34;200&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/arts/calendar_screen.png&#34; width=&#34;200&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/arts/more_tab.png&#34; width=&#34;200&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exercises Tab&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Calendar Screen&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;More Tab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/arts/personalization_screen.png&#34; width=&#34;200&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/arts/main_colors_screen.png&#34; width=&#34;200&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/arts/exercise_details_stats.png&#34; width=&#34;200&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Personalization Screen&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Main Colors Customizations&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exercise Details Stats&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/arts/themed_workout_panel.png&#34; width=&#34;200&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/arts/themed_workout_details.png&#34; width=&#34;200&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/arts/themed_exercise_details_history.png&#34; width=&#34;200&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Themed Workout Panel&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Themed Workout Details&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Themed Exercise Details&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;As of now I am trying to implement most of the core features, but more features will be added soon. Most of the below features are either not implement or not stable enough yet, but will be soon.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Highly customizable&lt;/li&gt; &#xA; &lt;li&gt;Material Design&lt;/li&gt; &#xA; &lt;li&gt;Open Source&lt;/li&gt; &#xA; &lt;li&gt;Sliding panel for session&lt;/li&gt; &#xA; &lt;li&gt;Routines&lt;/li&gt; &#xA; &lt;li&gt;Transformations&lt;/li&gt; &#xA; &lt;li&gt;History&lt;/li&gt; &#xA; &lt;li&gt;Body Part &amp;amp; Weight Measurements&lt;/li&gt; &#xA; &lt;li&gt;Timers&lt;/li&gt; &#xA; &lt;li&gt;Customizable Bars &amp;amp; Plates&lt;/li&gt; &#xA; &lt;li&gt;Supersets.&lt;/li&gt; &#xA; &lt;li&gt;Plate Calculator&lt;/li&gt; &#xA; &lt;li&gt;Warm-up Sets Calculator&lt;/li&gt; &#xA; &lt;li&gt;1RM, Max Volume, Max Weight, Personal Records etc.&lt;/li&gt; &#xA; &lt;li&gt;Exercises Database&lt;/li&gt; &#xA; &lt;li&gt;Workout &amp;amp; Set Notes&lt;/li&gt; &#xA; &lt;li&gt;Achievements&lt;/li&gt; &#xA; &lt;li&gt;Statistics (Charts, Graphs etc.)&lt;/li&gt; &#xA; &lt;li&gt;Languages Support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tech stack&lt;/h2&gt; &#xA;&lt;p&gt;Rebound uses latest Android technologies and most best practices. Here is the tech stack currently in use-&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MVVM Architecture&lt;/li&gt; &#xA; &lt;li&gt;Jetpack Compose&lt;/li&gt; &#xA; &lt;li&gt;Kotlin&lt;/li&gt; &#xA; &lt;li&gt;Coroutines&lt;/li&gt; &#xA; &lt;li&gt;Room&lt;/li&gt; &#xA; &lt;li&gt;Jetpack Navigation&lt;/li&gt; &#xA; &lt;li&gt;Flow, LiveData&lt;/li&gt; &#xA; &lt;li&gt;DataStore&lt;/li&gt; &#xA; &lt;li&gt;Hilt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ll be not accepting any contributions right now.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Rebound is released under the GNU General Public License v3.0 (GPLv3), which can be found &lt;a href=&#34;https://raw.githubusercontent.com/AnkitSuda/Rebound/main/LICENSE.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>blocoio/android-template</title>
    <updated>2022-11-24T01:36:49Z</updated>
    <id>tag:github.com,2022-11-24:/blocoio/android-template</id>
    <link href="https://github.com/blocoio/android-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android app starter template&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/blocoio/android-template/master/images/logo.png&#34; alt=&#34;ArchiTecture logo&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/blocoio/android-template/actions?query=workflow%3Atest+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/blocoio/android-template/workflows/test/badge.svg?branch=master&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/blocoio/android-template/actions?query=workflow%3Alint+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/blocoio/android-template/workflows/lint/badge.svg?branch=master&#34; alt=&#34;lint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goal of this Template is to be our starting point for new projects, following the best development practices. It&#39;s our interpretation and adaptation of the official &lt;a href=&#34;https://developer.android.com/topic/architecture&#34;&gt;architecture&lt;/a&gt; guidelines provided by Google. And it&#39;s inspired by Google&#39;s &lt;a href=&#34;https://github.com/android/nowinandroid&#34;&gt;NowInAndroid&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Clean architecture with 3 main modules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data (for database, API and preferences code)&lt;/li&gt; &#xA; &lt;li&gt;Domain (for business logic and models)&lt;/li&gt; &#xA; &lt;li&gt;AndroidApp (for UI logic, with MVVM)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/blocoio/android-template/master/images/AndroidTemplate-CleanArchitecture.jpg&#34; alt=&#34;ArchiTecture logo&#34;&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mockk.io/&#34;&gt;Mockk&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;Unit tests&lt;/li&gt; &#xA; &lt;li&gt;Application tests &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;example on how to work with tests&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Activity tests (with &lt;a href=&#34;https://developer.android.com/jetpack/compose/testing&#34;&gt;Compose Testing&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;example on how to work with coroutine scopes in tests&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other useful features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This version brings &lt;a href=&#34;https://developer.android.com/topic/modularization&#34;&gt;Modularization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Version Management (with &lt;a href=&#34;https://docs.gradle.org/current/userguide/platforms.html&#34;&gt;Version catalog&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Shared Build Logic (with &lt;a href=&#34;https://docs.gradle.org/current/samples/sample_convention_plugins.html&#34;&gt;Convention plugins&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dependency injection (with &lt;a href=&#34;http://google.github.io/hilt/&#34;&gt;Hilt&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Network calls (with &lt;a href=&#34;https://ktor.io/docs/http-client-engines.html#minimal-version&#34;&gt;Ktor&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Reactive programming (with &lt;a href=&#34;https://kotlinlang.org/docs/reference/coroutines/flow.html&#34;&gt;Kotlin Flows&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android architecture components to share ViewModels during configuration changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/develop/ui/views/launch/splash-screen&#34;&gt;Splash Screen&lt;/a&gt; Support&lt;/li&gt; &#xA; &lt;li&gt;Google &lt;a href=&#34;https://material.io/blog/android-material-theme-color&#34;&gt;Material Design&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;Declarative UI (with &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Compose Navigation (with &lt;a href=&#34;https://developer.android.com/jetpack/compose/libraries#hilt-navigation&#34;&gt;Hilt Support&lt;/a&gt; and Assisted Inject Example)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Edge To Edge Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download this repository extract and open the template folder on Android Studio&lt;/li&gt; &#xA; &lt;li&gt;Rename the app package &lt;code&gt;io.bloco.template&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check if the manifest package was renamed along with the package&lt;/li&gt; &#xA; &lt;li&gt;Replace composables with the Template name&lt;/li&gt; &#xA; &lt;li&gt;On &lt;code&gt;androidApp/build.gradle&lt;/code&gt;, change the applicationId to the new app package&lt;/li&gt; &#xA; &lt;li&gt;On &lt;code&gt;androidApp/build.gradle&lt;/code&gt;, update the dependencies Android Studio suggests&lt;/li&gt; &#xA; &lt;li&gt;On &lt;code&gt;string.xml&lt;/code&gt;, set your application name&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you run the Project inside the NewProjectCI all the above steps are done by you automatically, you can run the project using Android Studio then Opening the Main.kt file and press &#34;Run MainKt&#34;. You will be prompted about a new package name and app name&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;On &lt;code&gt;Theme.kt&lt;/code&gt; &amp;amp; &lt;code&gt;Color.kt&lt;/code&gt; set your application style&lt;/li&gt; &#xA; &lt;li&gt;Replace the App Icons&lt;/li&gt; &#xA; &lt;li&gt;Delete unwanted example files&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./gradlew dependencyUpdates&lt;/code&gt; and check for dependencies&lt;/li&gt; &#xA; &lt;li&gt;Ready to Use&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;And you&#39;re ready to start working on your new app.&lt;/p&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android Template contains &lt;code&gt;.github/workflows&lt;/code&gt; for lint check, unit testing and dependency checks. You can easily take this project worflow and repurpose it with a few path changes, you can also find a commented example in test.yml for Instrumentation Testing and CodeCoverage that we advice to keep a clean project, you will however need to replace the secret keys with your own.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>