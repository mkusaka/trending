<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-08T01:46:55Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Iamlooker/Droid-ify</title>
    <updated>2022-07-08T01:46:55Z</updated>
    <id>tag:github.com,2022-07-08:/Iamlooker/Droid-ify</id>
    <link href="https://github.com/Iamlooker/Droid-ify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;F-Droid client with Material UI.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;&#34; src=&#34;https://raw.githubusercontent.com/Iamlooker/Droid-ify/main/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png&#34; alt=&#34;Droid-ify&#34; align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Droid-ify&lt;/h1&gt; &#xA; &lt;p&gt;A quick material F-Droid client.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Iamlooker/Droid-ify/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Iamlooker/Droid-ify?style=flat&#34; alt=&#34;Github repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Iamlooker/Droid-ify/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Iamlooker/Droid-ify&#34; alt=&#34;Github License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Iamlooker/Droid-ify/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/Iamlooker/Droid-ify/total.svg?sanitize=true&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Iamlooker/Droid-ify/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Iamlooker/Droid-ify?display_name=tag&#34; alt=&#34;Github release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Iamlooker/Droid-ify/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/Iamlooker/Droid-ify?label=Watch&#34; alt=&#34;Github watchers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Iamlooker/Droid-ify/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/Iamlooker/Droid-ify?label=Fork&#34; alt=&#34;Github forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://android.izzysoft.de/repo/apk/com.looker.droidify&#34;&gt;&lt;img src=&#34;https://gitlab.com/IzzyOnDroid/repo/-/raw/master/assets/IzzyOnDroid.png&#34; alt=&#34;Get it on IzzyDroid&#34; width=&#34;48%&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f-droid.org/packages/com.looker.droidify&#34;&gt;&lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; width=&#34;48%&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hosted.weblate.org/projects/droidify/localization/&#34;&gt;&lt;img src=&#34;https://github.com/WeblateOrg/weblate/raw/main/weblate/static/weblate.svg?sanitize=true&#34; alt=&#34;Weblate&#34; width=&#34;40%&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://t.me/droidify&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/8/82/Telegram_logo.svg?sanitize=true&#34; alt=&#34;Join Telegram Channel&#34; width=&#34;30%&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hosted.weblate.org/projects/droidify/localization/&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/droidify/-/open-graph.png&#34; alt=&#34;Translation State&#34; width=&#34;60%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;h2&gt;&lt;span&gt;üìñ&lt;/span&gt; Features&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Material F-Droid style&lt;/li&gt; &#xA;   &lt;li&gt;No cards or inappropriate animations&lt;/li&gt; &#xA;   &lt;li&gt;Fast repository syncing&lt;/li&gt; &#xA;   &lt;li&gt;Standard Android components and minimal dependencies&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h3&gt;&lt;span&gt;üì∑&lt;/span&gt; Screenshots&lt;/h3&gt; &#xA;  &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Iamlooker/Droid-ify/main/metadata/en-US/images/phoneScreenshots/home-light.png&#34; width=&#34;48%&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Iamlooker/Droid-ify/main/metadata/en-US/images/phoneScreenshots/app-light.png&#34; width=&#34;48%&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Iamlooker/Droid-ify/main/metadata/en-US/images/phoneScreenshots/home-dark.png&#34; width=&#34;48%&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Iamlooker/Droid-ify/main/metadata/en-US/images/phoneScreenshots/app-dark.png&#34; width=&#34;48%&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Iamlooker/Droid-ify/main/metadata/en-US/images/phoneScreenshots/home-amoled.png&#34; width=&#34;48%&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Iamlooker/Droid-ify/main/metadata/en-US/images/phoneScreenshots/app-amoled.png&#34; width=&#34;48%&#34;&gt;&lt;/p&gt; &#xA;  &lt;h2&gt;&lt;span&gt;üî®&lt;/span&gt; Building and Installing&lt;/h2&gt; &#xA;  &lt;p&gt;Specify your Android SDK path either using the &lt;code&gt;ANDROID_HOME&lt;/code&gt; environment variable, &lt;br&gt; or by filling out the &lt;code&gt;sdk.dir&lt;/code&gt; property in &lt;code&gt;local.properties&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;Signing can be done automatically using &lt;code&gt;keystore.properties&lt;/code&gt; as follows:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;store.file=/path/to/keystore&#xA;store.password=key-store-password&#xA;key.alias=key-alias&#xA;key.password=key-password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Run &lt;code&gt;./gradlew assembleRelease&lt;/code&gt; to build the package, which can be installed using the Android package manager.&lt;/p&gt; &#xA;  &lt;h2&gt;üëÅÔ∏è‚Äçüó®Ô∏è Translations&lt;/h2&gt; &#xA;  &lt;p&gt;&lt;a href=&#34;https://hosted.weblate.org/engage/droidify/&#34;&gt;Translate Droid-ify on Hosted Weblate&lt;/a&gt;. &lt;br&gt; &lt;a href=&#34;https://hosted.weblate.org/engage/droidify/?utm_source=widget&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/droidify/-/multi-auto.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;p&gt;You can always add other lanuages.&lt;/p&gt; &#xA;  &lt;h2&gt;&lt;span&gt;üìú&lt;/span&gt; License&lt;/h2&gt; &#xA;  &lt;p&gt;Licensed GPLv3+. &lt;br&gt; Direct Adaptation/Modification of &lt;a href=&#34;https://github.com/kitsunyan/foxy-droid/&#34;&gt;Foxy-Droid&lt;/a&gt; &lt;br&gt; Copyright ¬© 2020‚Äì2021 Iamlooker and contributors.&lt;/p&gt; &#xA; &lt;/div&gt;&#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>airbnb/mavericks</title>
    <updated>2022-07-08T01:46:55Z</updated>
    <id>tag:github.com,2022-07-08:/airbnb/mavericks</id>
    <link href="https://github.com/airbnb/mavericks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mavericks: Android on Autopilot&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/github/airbnb/mavericks&#34;&gt;&lt;img src=&#34;https://travis-ci.com/airbnb/mavericks.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.airbnb.android/mavericks&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.airbnb.android/mavericks/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/codecov/mavericks&#34;&gt;&lt;img src=&#34;https://codecov.io/github/codecov/mavericks/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mavericks (formerly MvRx): Android on Autopilot&lt;/h1&gt; &#xA;&lt;h2&gt;For full documentation, check out our &lt;a href=&#34;https://airbnb.io/mavericks&#34;&gt;docs site&lt;/a&gt;.&lt;/h2&gt; &#xA;&lt;p&gt;Mavericks is the Android framework from Airbnb that we use for nearly all product development at Airbnb.&lt;/p&gt; &#xA;&lt;p&gt;When we began creating Mavericks, our goal was not to create yet another architecture pattern for Airbnb, it was to make building products easier, faster, and more fun. All of our decisions have built on that. We believe that for Mavericks to be successful, it must be effective for building everything from the simplest of screens to the most complex in our app.&lt;/p&gt; &#xA;&lt;p&gt;This is what it looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;&#xA;data class HelloWorldState(val title: String = &#34;Hello World&#34;) : MavericksState&#xA;&#xA;/**&#xA; * Refer to the wiki for how to set up your base ViewModel.&#xA; */&#xA;class HelloWorldViewModel(initialState: HelloWorldState) : MavericksViewModel&amp;lt;HelloWorldState&amp;gt;(initialState) {&#xA;    fun getMoreExcited() = setState { copy(title = &#34;$title!&#34;) }&#xA;}&#xA;&#xA;class HelloWorldFragment : Fragment(R.layout.hello_world_fragment), MavericksView {&#xA;    private val viewModel: HelloWorldViewModel by fragmentViewModel()&#xA;&#xA;    override fun invalidate() = withState(viewModel) { state -&amp;gt;&#xA;        // Update your views with the latest state here.&#xA;        // This will get called any time your state changes and the viewLifecycleOwner is STARTED.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Gradle is the only supported build configuration, so just add the dependency to your project &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;  implementation &#39;com.airbnb.android:mavericks:x.y.z&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The latest version of mavericks is &lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.airbnb.android/mavericks&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.airbnb.android/mavericks/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;For full documentation, check out the &lt;a href=&#34;https://airbnb.io/mavericks&#34;&gt;docs site&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Legacy documentation for MvRx 1.x can still be found in the &lt;a href=&#34;https://github.com/airbnb/mavericks/wiki&#34;&gt;wiki&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rickclephas/KMP-NativeCoroutines</title>
    <updated>2022-07-08T01:46:55Z</updated>
    <id>tag:github.com,2022-07-08:/rickclephas/KMP-NativeCoroutines</id>
    <link href="https://github.com/rickclephas/KMP-NativeCoroutines" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Library to use Kotlin Coroutines from Swift code in KMP apps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KMP-NativeCoroutines&lt;/h1&gt; &#xA;&lt;p&gt;A library to use Kotlin Coroutines from Swift code in KMP apps.&lt;/p&gt; &#xA;&lt;h2&gt;Why this library?&lt;/h2&gt; &#xA;&lt;p&gt;Both KMP and Kotlin Coroutines are amazing but together they have some limitations.&lt;/p&gt; &#xA;&lt;p&gt;The most important limitation is cancellation support.&lt;br&gt; Kotlin suspend functions are exposed to Swift as functions with a completion handler.&lt;br&gt; This allows you to easily use them from your Swift code, but it doesn&#39;t support cancellation.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;While Swift 5.5 brings async functions to Swift, it doesn&#39;t solve this issue.&lt;br&gt; For interoperability with ObjC all functions with a completion handler can be called like an async function.&lt;br&gt; This means starting with Swift 5.5 your Kotlin suspend functions will look like Swift async functions.&lt;br&gt; But that&#39;s just syntactic sugar, so there&#39;s still no cancellation support.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Besides cancellation support, ObjC doesn&#39;t support generics on protocols.&lt;br&gt; So all the &lt;code&gt;Flow&lt;/code&gt; interfaces lose their generic value type which make them hard to use.&lt;/p&gt; &#xA;&lt;p&gt;This library solves both of these limitations üòÑ.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; at the moment the &lt;a href=&#34;https://github.com/JetBrains/kotlin/raw/0b871d7534a9c8e90fb9ad61cd5345716448d08c/kotlin-native/NEW_MM.md&#34;&gt;new Kotlin Native memory model&lt;/a&gt; is still experimental.&lt;br&gt; The regular versions of this library are therefore currently using the &lt;a href=&#34;https://github.com/kotlin/kotlinx.coroutines/issues/462&#34;&gt;&lt;code&gt;-native-mt&lt;/code&gt;&lt;/a&gt; versions of the kotlinx.coroutines library.&lt;br&gt; If you would like to try the new memory model, please use the &lt;code&gt;-new-mm&lt;/code&gt; versions instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The latest version of the library uses Kotlin version &lt;code&gt;1.7.0&lt;/code&gt;.&lt;br&gt; Compatibility versions for older Kotlin versions are also available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Version suffix&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Kotlin&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Coroutines&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;latest&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-new-mm&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.7.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.6.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;latest&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;no suffix&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;1.7.0&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;1.6.3-native-mt&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.12.2&lt;/td&gt; &#xA;   &lt;td&gt;-new-mm&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.6.21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.6.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.12.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;no suffix&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.6.21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.6.1-native-mt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.11.4&lt;/td&gt; &#xA;   &lt;td&gt;-new-mm&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.6.10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.6.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.11.4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;no suffix&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.6.10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.6.0-native-mt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can choose from a couple of Swift implementations.&lt;br&gt; Depending on the implementation you can support as low as iOS 9, macOS 10.9, tvOS 9 and watchOS 3:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Implementation&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Swift&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;macOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;tvOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;watchOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Async&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Combine&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RxSwift&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The library consists of a Kotlin and Swift part which you&#39;ll need to add to your project.&lt;br&gt; The Kotlin part is available on Maven Central and the Swift part can be installed via CocoaPods or the Swift Package Manager.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to always use the same versions for all the libraries!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rickclephas/KMP-NativeCoroutines/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/rickclephas/KMP-NativeCoroutines?label=latest%20release&amp;amp;sort=semver&#34; alt=&#34;latest release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Kotlin&lt;/h3&gt; &#xA;&lt;p&gt;For Kotlin just add the plugin to your &lt;code&gt;build.gradle.kts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;    id(&#34;com.rickclephas.kmp.nativecoroutines&#34;) version &#34;&amp;lt;version&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift (Swift Package Manager)&lt;/h3&gt; &#xA;&lt;p&gt;The Swift implementations are available via the Swift Package Manager.&lt;br&gt; Just add it to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/rickclephas/KMP-NativeCoroutines.git&#34;, from: &#34;&amp;lt;version&amp;gt;&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or add it in Xcode by going to &lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Add Packages...&lt;/code&gt; and providing the URL: &lt;code&gt;https://github.com/rickclephas/KMP-NativeCoroutines.git&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the version for the Swift package should not contain the Kotlin version suffix (e.g. &lt;code&gt;-new-mm&lt;/code&gt; or &lt;code&gt;-kotlin-1.6.0&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; If you only need a single implementation you can also use the SPM specific versions with suffixes &lt;code&gt;-spm-async&lt;/code&gt;, &lt;code&gt;-spm-combine&lt;/code&gt; and &lt;code&gt;-spm-rxswift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift (CocoaPods)&lt;/h3&gt; &#xA;&lt;p&gt;If you use CocoaPods add one or more of the following libraries to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;KMPNativeCoroutinesAsync&#39;, &#39;&amp;lt;version&amp;gt;&#39;    # Swift 5.5 Async/Await implementation&#xA;pod &#39;KMPNativeCoroutinesCombine&#39;, &#39;&amp;lt;version&amp;gt;&#39;  # Combine implementation&#xA;pod &#39;KMPNativeCoroutinesRxSwift&#39;, &#39;&amp;lt;version&amp;gt;&#39;  # RxSwift implementation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the version for CocoaPods should not contain the Kotlin version suffix (e.g. &lt;code&gt;-new-mm&lt;/code&gt; or &lt;code&gt;-kotlin-1.6.0&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Using your Kotlin Coroutines code from Swift is almost as easy as calling the Kotlin code.&lt;br&gt; Just use the wrapper functions in Swift to get async functions, AsyncStreams, Publishers or Observables.&lt;/p&gt; &#xA;&lt;h3&gt;Kotlin&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; The Kotlin part of this library consists of helper functions and a Kotlin compiler plugin.&lt;br&gt; Using the plugin removes the boilerplate code from your project, however &lt;strong&gt;Kotlin compiler plugins aren&#39;t stable&lt;/strong&gt;!&lt;/p&gt; &#xA; &lt;p&gt;The plugin is known to cause recursion errors in some scenarios such as in &lt;a href=&#34;https://github.com/rickclephas/KMP-NativeCoroutines/issues/4&#34;&gt;#4&lt;/a&gt; and &lt;a href=&#34;https://github.com/rickclephas/KMP-NativeCoroutines/issues/23&#34;&gt;#23&lt;/a&gt;.&lt;br&gt; To prevent such recursion errors it&#39;s best to explicitly define the (return) types of public properties and functions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The plugin will automagically generate the necessary code for you! üîÆ&lt;/p&gt; &#xA;&lt;p&gt;Your &lt;code&gt;Flow&lt;/code&gt; properties/functions get a &lt;code&gt;Native&lt;/code&gt; version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Clock {&#xA;    // Somewhere in your Kotlin code you define a Flow property&#xA;    val time: StateFlow&amp;lt;Long&amp;gt; // This can be any kind of Flow&#xA;&#xA;    // The plugin will generate this native property for you&#xA;    val timeNative&#xA;        get() = time.asNativeFlow()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case of a &lt;code&gt;StateFlow&lt;/code&gt; or &lt;code&gt;SharedFlow&lt;/code&gt; property you also get a &lt;code&gt;NativeValue&lt;/code&gt; or &lt;code&gt;NativeReplayCache&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// For the StateFlow defined above the plugin will generate this native value property&#xA;val timeNativeValue&#xA;    get() = time.value&#xA;&#xA;// In case of a SharedFlow the plugin would generate this native replay cache property&#xA;val timeNativeReplayCache&#xA;    get() = time.replayCache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The plugin also generates &lt;code&gt;Native&lt;/code&gt; versions for all your suspend functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class RandomLettersGenerator {&#xA;    // Somewhere in your Kotlin code you define a suspend function&#xA;    suspend fun getRandomLetters(): String { &#xA;        // Code to generate some random letters&#xA;    }&#xA;&#xA;    // The plugin will generate this native function for you&#xA;    fun getRandomLettersNative() = &#xA;        nativeSuspend { getRandomLetters() }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Global properties and functions&lt;/h4&gt; &#xA;&lt;p&gt;The plugin is currently unable to generate native versions for global properties and functions.&lt;br&gt; In such cases you have to manually create the native versions in your Kotlin native code.&lt;/p&gt; &#xA;&lt;h4&gt;Custom suffix&lt;/h4&gt; &#xA;&lt;p&gt;If you don&#39;t like the naming of these generated properties/functions, you can easily change the suffix.&lt;br&gt; For example add the following to your &lt;code&gt;build.gradle.kts&lt;/code&gt; to use the suffix &lt;code&gt;Apple&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;nativeCoroutines {&#xA;    suffix = &#34;Apple&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom CoroutineScope&lt;/h4&gt; &#xA;&lt;p&gt;For more control you can provide a custom &lt;code&gt;CoroutineScope&lt;/code&gt; with the &lt;code&gt;NativeCoroutineScope&lt;/code&gt; annotation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Clock {&#xA;    @NativeCoroutineScope&#xA;    internal val coroutineScope = CoroutineScope(job + Dispatchers.Default)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t provide a &lt;code&gt;CoroutineScope&lt;/code&gt; the default scope will be used which is defined as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@SharedImmutable&#xA;internal val defaultCoroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Default)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ignoring declarations&lt;/h4&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;NativeCoroutinesIgnore&lt;/code&gt; annotation to tell the plugin to ignore a property or function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@NativeCoroutinesIgnore&#xA;val ignoredFlowProperty: Flow&amp;lt;Int&amp;gt;&#xA;&#xA;@NativeCoroutinesIgnore&#xA;suspend fun ignoredSuspendFunction() { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift 5.5 Async/Await&lt;/h3&gt; &#xA;&lt;p&gt;The Async implementation provides some functions to get async Swift functions and &lt;code&gt;AsyncStream&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;asyncFunction(for:)&lt;/code&gt; function to get an async function that can be awaited:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let handle = Task {&#xA;    do {&#xA;        let letters = try await asyncFunction(for: randomLettersGenerator.getRandomLettersNative())&#xA;        print(&#34;Got random letters: \(letters)&#34;)&#xA;    } catch {&#xA;        print(&#34;Failed with error: \(error)&#34;)&#xA;    }&#xA;}&#xA;&#xA;// To cancel the suspend function just cancel the async task&#xA;handle.cancel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you don&#39;t like these do-catches you can use the &lt;code&gt;asyncResult(for:)&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let result = await asyncResult(for: randomLettersGenerator.getRandomLettersNative())&#xA;if case let .success(letters) = result {&#xA;    print(&#34;Got random letters: \(letters)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;Flow&lt;/code&gt;s there is the &lt;code&gt;asyncStream(for:)&lt;/code&gt; function to get an &lt;code&gt;AsyncStream&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let handle = Task {&#xA;    do {&#xA;        let stream = asyncStream(for: randomLettersGenerator.getRandomLettersFlowNative())&#xA;        for try await letters in stream {&#xA;            print(&#34;Got random letters: \(letters)&#34;)&#xA;        }&#xA;    } catch {&#xA;        print(&#34;Failed with error: \(error)&#34;)&#xA;    }&#xA;}&#xA;&#xA;// To cancel the flow (collection) just cancel the async task&#xA;handle.cancel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Combine&lt;/h3&gt; &#xA;&lt;p&gt;The Combine implementation provides a couple functions to get an &lt;code&gt;AnyPublisher&lt;/code&gt; for your Coroutines code.&lt;/p&gt; &#xA;&lt;p&gt;For your &lt;code&gt;Flow&lt;/code&gt;s use the &lt;code&gt;createPublisher(for:)&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create an AnyPublisher for your flow&#xA;let publisher = createPublisher(for: clock.timeNative)&#xA;&#xA;// Now use this publisher as you would any other&#xA;let cancellable = publisher.sink { completion in&#xA;    print(&#34;Received completion: \(completion)&#34;)&#xA;} receiveValue: { value in&#xA;    print(&#34;Received value: \(value)&#34;)&#xA;}&#xA;&#xA;// To cancel the flow (collection) just cancel the publisher&#xA;cancellable.cancel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the suspend functions you should use the &lt;code&gt;createFuture(for:)&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a Future/AnyPublisher for the suspend function&#xA;let future = createFuture(for: randomLettersGenerator.getRandomLettersNative())&#xA;&#xA;// Now use this future as you would any other&#xA;let cancellable = future.sink { completion in&#xA;    print(&#34;Received completion: \(completion)&#34;)&#xA;} receiveValue: { value in&#xA;    print(&#34;Received value: \(value)&#34;)&#xA;}&#xA;&#xA;// To cancel the suspend function just cancel the future&#xA;cancellable.cancel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;createPublisher(for:)&lt;/code&gt; function for suspend functions that return a &lt;code&gt;Flow&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let publisher = createPublisher(for: randomLettersGenerator.getRandomLettersFlowNative())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; these functions create deferred &lt;code&gt;AnyPublisher&lt;/code&gt;s.&lt;br&gt; Meaning every subscription will trigger the collection of the &lt;code&gt;Flow&lt;/code&gt; or execution of the suspend function.&lt;/p&gt; &#xA;&lt;h3&gt;RxSwift&lt;/h3&gt; &#xA;&lt;p&gt;The RxSwift implementation provides a couple functions to get an &lt;code&gt;Observable&lt;/code&gt; or &lt;code&gt;Single&lt;/code&gt; for your Coroutines code.&lt;/p&gt; &#xA;&lt;p&gt;For your &lt;code&gt;Flow&lt;/code&gt;s use the &lt;code&gt;createObservable(for:)&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create an observable for your flow&#xA;let observable = createObservable(for: clock.timeNative)&#xA;&#xA;// Now use this observable as you would any other&#xA;let disposable = observable.subscribe(onNext: { value in&#xA;    print(&#34;Received value: \(value)&#34;)&#xA;}, onError: { error in&#xA;    print(&#34;Received error: \(error)&#34;)&#xA;}, onCompleted: {&#xA;    print(&#34;Observable completed&#34;)&#xA;}, onDisposed: {&#xA;    print(&#34;Observable disposed&#34;)&#xA;})&#xA;&#xA;// To cancel the flow (collection) just dispose the subscription&#xA;disposable.dispose()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the suspend functions you should use the &lt;code&gt;createSingle(for:)&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a single for the suspend function&#xA;let single = createSingle(for: randomLettersGenerator.getRandomLettersNative())&#xA;&#xA;// Now use this single as you would any other&#xA;let disposable = single.subscribe(onSuccess: { value in&#xA;    print(&#34;Received value: \(value)&#34;)&#xA;}, onFailure: { error in&#xA;    print(&#34;Received error: \(error)&#34;)&#xA;}, onDisposed: {&#xA;    print(&#34;Single disposed&#34;)&#xA;})&#xA;&#xA;// To cancel the suspend function just dispose the subscription&#xA;disposable.dispose()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;createObservable(for:)&lt;/code&gt; function for suspend functions that return a &lt;code&gt;Flow&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observable = createObservable(for: randomLettersGenerator.getRandomLettersFlowNative())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; these functions create deferred &lt;code&gt;Observable&lt;/code&gt;s and &lt;code&gt;Single&lt;/code&gt;s.&lt;br&gt; Meaning every subscription will trigger the collection of the &lt;code&gt;Flow&lt;/code&gt; or execution of the suspend function.&lt;/p&gt;</summary>
  </entry>
</feed>