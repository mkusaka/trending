<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-22T01:32:07Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>realityexpander/How_to_program_from_ground_up</title>
    <updated>2024-02-22T01:32:07Z</updated>
    <id>tag:github.com,2024-02-22:/realityexpander/How_to_program_from_ground_up</id>
    <link href="https://github.com/realityexpander/How_to_program_from_ground_up" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Support document for the video series about learning to program computers from the ground up.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLzUxWOrVXB4QHsURai1GmmhmqAUVNbfno&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/assets/title.png&#34; width=&#34;450&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to Program From The Ground Up (with Minimal BS)&lt;/h1&gt; &#xA;&lt;p&gt;Â©2024 Chris Athanas&lt;/p&gt; &#xA;&lt;p&gt;A follow-along guide for anyone who wants a solid understanding of software development as a semi-historical walk through the essential parts of computing leading to present day software development paradigms.&lt;/p&gt; &#xA;&lt;p&gt;This is not a thorough deep dive into any one topic, but a broad overview of the core concepts and principles that are missing from most programming tutorials and courses. My goal is to give you the context about why things are the way they are in computing, and how they came to be that way, and the issues and problems that arose from things being that way.&lt;/p&gt; &#xA;&lt;p&gt;I have found that it&#39;s far more important to understand the process that people went through to create the current solutions than to understand the mechanical details of how the solution work. Many details about the disadvantages and limitations are often left out technical discussions, or worse, simply not known or dismissed as irrelevant due to ignorance.&lt;/p&gt; &#xA;&lt;p&gt;This document is a reference and follow along guide for my video series on YouTube:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLzUxWOrVXB4QHsURai1GmmhmqAUVNbfno&#34;&gt;YouTube Series - How to Program From The Ground Up (with Minimal BS)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/02-TheEssentialQuestion-WhatAreWeComputing.md&#34;&gt;The Essence of Computing&lt;/a&gt; Pre-history to Present Day&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/03-Hardware.md&#34;&gt;Hardware&lt;/a&gt; 1700s to Present Day &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using Natural Phenomenon to Represent Human Information &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/03-Hardware.md#the-wire--the-battery&#34;&gt;The Wire &amp;amp; the Light Bulb &amp;amp; the Battery&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/03-Hardware.md#the-simple-switch&#34;&gt;The Simple Switch&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/03-Hardware.md#the-magnificent-electromagnet&#34;&gt;The Magnificent Magnet&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/03-Hardware.md#the-raucous-relay&#34;&gt;The Raucous Relay&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/03-Hardware.md#the-voracious-vacuum-tube&#34;&gt;The Voracious Vacuum Tube&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/03-Hardware.md#the-tiny-transistor&#34;&gt;The Tiny Transistor&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/03-Hardware.md#the-interchangeable-integrated-chip-ic&#34;&gt;The Interchangeable Integrated Chip (IC)&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/03-Hardware.md#nand-gates&#34;&gt;Why are NAND gates so special?&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/03-Hardware.md#the-mighty-microprocessor&#34;&gt;The Mighty Microprocessor&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/03-Hardware.md#the-configurable-computer&#34;&gt;The Configurable Computer&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md&#34;&gt;Data Structures&lt;/a&gt; Pre-history to Present Day &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;How Do Humans Represent Data in Binary in Computers?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md#numbers&#34;&gt;Numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md#characters&#34;&gt;Characters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md#data-structures&#34;&gt;&#34;Data Structures&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md#array&#34;&gt;Array&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md#string&#34;&gt;String&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md#pointer&#34;&gt;Pointer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md#stack&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md#queue&#34;&gt;Queue&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md#linked-list&#34;&gt;Linked List&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md#map&#34;&gt;Map&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md#tree&#34;&gt;Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/04-DataStructures.md#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md&#34;&gt;Software&lt;/a&gt; 1800s to Present Day &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;How to Represent Human Problems in a Digital Computer?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#machine-code&#34;&gt;Machine Code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#representation-of-data&#34;&gt;Representation of Data in Computer Memory&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#binary-counting&#34;&gt;Binary Counting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#hexadecimal-counting&#34;&gt;Hexadecimal Counting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#standardized-ascii&#34;&gt;Standardized ASCII&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#minimum-components&#34;&gt;The Minimum Components of a Computer System&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#the-cpu-mpu&#34;&gt;The CPU/MPU&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#the-clock&#34;&gt;The Clock&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#program-counter&#34;&gt;Program Counter&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#common-opcodes&#34;&gt;Common Machine Language Opcodes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#fetch-decode-execute-cycle&#34;&gt;Fetch-Decode-Execute Cycle of the CPU&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#registers&#34;&gt;Registers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#alu&#34;&gt;Arithmetic Logic Unit (ALU)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#control-unit&#34;&gt;Control Unit&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#assembly-language&#34;&gt;Assembly Language&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#common-assembly-operations&#34;&gt;Common Assembly Language Operations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#variables&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/05-Software.md#subroutines&#34;&gt;Subroutines&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/06-HighLevelLanguages.md#high-level-languages&#34;&gt;High-Level Languages&lt;/a&gt; 1950s to Present Day &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;How can we make programming easier and more understandable for humans?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/06-HighLevelLanguages.md#programming-styles&#34;&gt;Programming Styles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/06-HighLevelLanguages.md#procedural-programming&#34;&gt;Procedural Programming&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/06-HighLevelLanguages.md#abusing-goto&#34;&gt;Problem: Abusing GOTO&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/06-HighLevelLanguages.md#solution-subroutines&#34;&gt;Solution: Subroutines&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/06-HighLevelLanguages.md#naive-solutions&#34;&gt;Problem: Naive Solutions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/06-HighLevelLanguages.md#problem-imperative-looping&#34;&gt;Problem: Imperative Looping&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/06-HighLevelLanguages.md#solution-declarative-for-loop&#34;&gt;Solution: Declaritive Looping&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/07-SoftwareDesign.md&#34;&gt;Software Design&lt;/a&gt; 1960s to Present Day &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;How can we organize and communicate the solution to a problem in a way that is understandable?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/07-SoftwareDesign.md#algorithms&#34;&gt;Algorithms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/07-SoftwareDesign.md#time-complexity&#34;&gt;Time Complexity&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/07-SoftwareDesign.md#time-complexity-example&#34;&gt;Shorthand Guide &amp;amp; Sample Code&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/07-SoftwareDesign.md#communicating-software-designs&#34;&gt;Communicating Software Designs Visually&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/07-SoftwareDesign.md#some-thoughts-on-common-software-production-methodologies&#34;&gt;Some Thoughts on Common Software Production Methodologies&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/08-StructuredProgramming.md&#34;&gt;Structured Programming&lt;/a&gt; 1960s-Present &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can we give some kind of standard way of organizing and communicating the solution to a problem?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/08-StructuredProgramming.md#scopes&#34;&gt;Scopes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/08-StructuredProgramming.md#types&#34;&gt;Types&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/08-StructuredProgramming.md#c-to-assembly-language&#34;&gt;Comparing C to Assembly Language&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md&#34;&gt;Class Oriented Programming (COP)&lt;/a&gt; 1980s-Present &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can we simulate real-world objects easier than with procedural or structured programming?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#cop-tried-to-introduce&#34;&gt;COP Tried to Introduce a New Style of Programming, But Ended With Mixed Results&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#design-of-c-plus-plus&#34;&gt;Design of C++&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#encapsulation&#34;&gt;Encapsulation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#simplistic-overview&#34;&gt;Simplistic Overview of a Class and an Object Instance of the Class&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#sophisticated-diagram&#34;&gt;Sophisticated Diagram of a Class and Object Instance&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#instantiation&#34;&gt;Instantiation or &#34;Allocating Memory&#34; for an Object of a Certain Class&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#object-instance-variable-values&#34;&gt;Object Instance Variable Values = &#34;State&#34; of the Object&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#using-classes-and-objects-as-name-spaces&#34;&gt;Problem: Using Classes and Objects as &#34;Name-Spaces/Scopes&#34; Lead to Procedural-Style Code Implementations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#problems-arising-from-abusing-static&#34;&gt;Problems Arising from Abusing Static Methods and Attributes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#interfaces&#34;&gt;Interfaces&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#inheritance&#34;&gt;Inheritance&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#problems-arising-from-the-abuse-of-inheritance&#34;&gt;Problems Arising from the Abuse of Inheritance&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#abstract-classes&#34;&gt;Abstract Classes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#polymorphism&#34;&gt;Polymorphism&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#controlled-visibility&#34;&gt;Controlled Visibility of Variables and Methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#multiple-inheritance-removed&#34;&gt;Allowing for &#34;Multiple Inheritance&#34; in C++ was a mistake, and it was removed from Java and C# for very good reasons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/09-ClassOrientedProgramming.md#design-patterns&#34;&gt;Design Patterns&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/10-FunctionalProgramming.md&#34;&gt;Functional Programming (FP)&lt;/a&gt; 1950s-Present &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can we structure our code in a way to have less bugs and be easier to understand?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/10-FunctionalProgramming.md#immutability-no-side-effects&#34;&gt;Immutability &amp;amp; No Side Effects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/10-FunctionalProgramming.md#functionalExample&#34;&gt;Functional Programming Style&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/11-BackToObjectOrientedProgramming.md&#34;&gt;Back-to-Object Oriented Programming (BOOP)&lt;/a&gt; 1970s-Present &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can we re-visit the original principles of OOP to make software easier to understand and maintain?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/11-BackToObjectOrientedProgramming.md#boop-caution&#34;&gt;A word of caution about BOOP style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/11-BackToObjectOrientedProgramming.md#banned-patterns-in-boop&#34;&gt;Banned Patterns in BOOP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/11-BackToObjectOrientedProgramming.md#why-is-cop-bad&#34;&gt;Why is Class-Oriented Programming (COP) so bad?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/11-BackToObjectOrientedProgramming.md#boop-example&#34;&gt;Back-to Object Oriented Programming Example&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/12-ParallelProcessing.md&#34;&gt;Parallel Processing (also called &#34;Concurrent&#34; Programming)&lt;/a&gt; 1960s-Present &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can we make our programs run faster by doing more than one thing at a time?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/12-ParallelProcessing.md#threads&#34;&gt;Threads&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/12-ParallelProcessing.md#race-condition-diagram&#34;&gt;Race Condition Diagram&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/12-ParallelProcessing.md#atomic-updates&#34;&gt;Fixing the threads &#34;race condition&#34; problem using &#34;Atomic&#34; updates&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/12-ParallelProcessing.md#atomic-updates-diagram&#34;&gt;Fixing the Race Condition Diagram&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/12-ParallelProcessing.md#coroutines&#34;&gt;Coroutines&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/12-ParallelProcessing.md#fixing-updates-with-coroutines&#34;&gt;Fixing the Coroutine race condition problem using &#34;Atomic&#34; updates&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/12-ParallelProcessing.md#coroutines-vs-threads&#34;&gt;Coroutines are Much Faster Than Threads&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This is a &#34;how-to&#34; guide for anyone interested in creating software who needs an overview of techniques and concepts used, from the fundamentals of physical logic representation to high-level programming languages and the &#34;&lt;code&gt;how&lt;/code&gt;&#34; and &#34;&lt;code&gt;why&lt;/code&gt;&#34; of the various paradigms and methodologies used in software development.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;My Goal is to Have You:&lt;/h3&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Understand more the &lt;code&gt;why&lt;/code&gt; and &lt;code&gt;how&lt;/code&gt; of programming, not just the &lt;code&gt;what&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;This is my curated list of information to take you on a realistic and grounded journey of understanding the essential part of computing to create effective software.&lt;/li&gt; &#xA;     &lt;li&gt;There will be some technical details, but only enough to understand the fundamental principles, not to be an expert.&lt;/li&gt; &#xA;     &lt;li&gt;I cover the areas that I had difficulty understanding when I was learning to program.&lt;/li&gt; &#xA;     &lt;li&gt;This is more-or-less a historical walk through &lt;code&gt;WHY&lt;/code&gt; things are the way they are in computing, and &lt;code&gt;HOW&lt;/code&gt; they came to be that way.&lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;I have since discovered that the majority of my confusion derived from how things were presented to me. Instructors often completely misunderstood correct application and limits of metaphors and lacked real-world experience of the things they were teaching. Many just repeated what they were taught without understanding. When challenged about their knowledge, they would often become defensive and dismissive, and sometimes even hostile.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;Many of the concepts are, in retrospect, full of needless jargon and unnecessary complexity. I now understand that the complexity was often used to make the instructor seem more knowledgeable and to make the subject seem more difficult than it actually is.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;I would like to say at the outset that there is a TREMENDOUS number of technical-sounding words with all referring to the same basic core ideas. I will do my best to be as consistent as possible, and also work to point out the multiple definitions and reduce the jargon and clarify the core meanings and ideas.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Essence of Computing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;People used to do all computing by hand, and now we use various machines to do the same thing, in a much faster and more reliable way. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When we use a machine to do computing, we are just using the machine to represent the problem and the solution in a different way.&lt;/li&gt; &#xA;   &lt;li&gt;The machine knows nothing about the problem. it&#39;s only following orders created by clever humans using boolean logic to represent the problem and its sequence of actions to solve it.&lt;/li&gt; &#xA;   &lt;li&gt;Each operation in the computer was once done by teams of people working in groups, logically delineated in nearly the same way as the computer&#39;s components are arranged. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;There were specialized roles for each person, for example, the &#34;storage&#34; would be a set of filing cabinets and a clerk to store and retrieve them. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;This is now done by the &#34;hard drive&#34; and the &#34;file system&#34; in the computer.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;The arithmetic would be done by a person called a &#34;calculator&#34; who would perform the operations and record the results. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;This is now done by the &#34;Arithmetic Logic Unit&#34; and stored in the &#34;Registers&#34; in the computer.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SOME IMPORTANT ITEMS TO KEEP IN MIND&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;THERE IS NO MAGIC IN COMPUTING, ONLY &lt;em&gt;HUMAN&lt;/em&gt; CLEVERNESS, &lt;em&gt;HUMAN&lt;/em&gt; SYSTEMIC THINKING AND &lt;em&gt;HUMAN&lt;/em&gt; INGENUITY USED TO SOLVE &lt;em&gt;HUMAN&lt;/em&gt; PROBLEMS.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you hear anyone say &lt;em&gt;&#34;it&#39;s magic&#34;&lt;/em&gt; or &lt;em&gt;&#34;it&#39;s a black box&#34;&lt;/em&gt; or &lt;em&gt;&#34;it&#39;s kind of like a person,&#34;&lt;/em&gt; they are: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Being lazy,&lt;/li&gt; &#xA;     &lt;li&gt;Or indicating it&#39;s not relevant at the moment,&lt;/li&gt; &#xA;     &lt;li&gt;Or (USUALLY) they don&#39;t understand the problem or the solution enough to explain it and become hand-wavy.&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h2&gt;ITS ALWAYS JUST &lt;em&gt;HUMAN&lt;/em&gt; CLEVERNESS AND INGENUITY, THE IDEA OF REPRESENTING ONE THING AS ANOTHER, NOTHING MORE.&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The machines CAN &lt;em&gt;NEVER&lt;/em&gt; UNDERSTAND the problem or the solution in the way humans conceive of the problem.&lt;/li&gt; &#xA;   &lt;li&gt;These machines are only following the logical operations that humans have carefully designed to represent the problem and a solution &#34;space.&#34; There is no inherent &#34;understanding&#34; in the machine, and can never be.&lt;/li&gt; &#xA;   &lt;li&gt;The only way the machine would ever know the full human context of the problem (and the solution) is if the machine ACTUALLY was a human, and then it would be a &lt;em&gt;human&lt;/em&gt;, and not a machine.&lt;/li&gt; &#xA;   &lt;li&gt;Mistaking the machine for having intelligence is known as &#34;The Eliza Effect&#34; and is a common mistake made by people who don&#39;t understand the limits of the machine&#39;s capabilities.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How To Install and Run The Samples In This Guide&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/download/&#34;&gt;Install IntelliJ IDEA Community Edition&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/guide/java/tips/clone-project-from-github/#:~:text=Clone%20a%20project%20from%20the%20IntelliJ%20IDEA%20welcome%20screen&amp;amp;text=Click%20Get%20from%20VCS%2C%20specify,into%20an%20IntelliJ%20IDEA%20project.&#34;&gt;How to clone this Project from Github to your local machine&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to this &lt;code&gt;README.md&lt;/code&gt; file in the project and click on the links to the live sample code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the left-hand gutter, click on the green arrow to run the sample code.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/assets/click-green-arrow.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/02-TheEssentialQuestion-WhatAreWeComputing.md&#34;&gt;Continue Reading - The Essential Question&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realityexpander/How_to_program_from_ground_up/main/README.md&#34;&gt;Back to Index&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>alexzhirkevich/compose-cupertino</title>
    <updated>2024-02-22T01:32:07Z</updated>
    <id>tag:github.com,2024-02-22:/alexzhirkevich/compose-cupertino</id>
    <link href="https://github.com/alexzhirkevich/compose-cupertino" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compose Multiplatform UI components for iOS (Cupertino Widgets)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Compose Cupertino&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/compose--multiplatform-1.5.11-blue&#34; alt=&#34;compose-mp-version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JetBrains/compose-jb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kotlin-1.9.21-blue&#34; alt=&#34;kotlin-version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform-iOS-lightgray&#34; alt=&#34;badge-iOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Platform-Android-brightgreen&#34; alt=&#34;badge-Android&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Platform-JVM-orange&#34; alt=&#34;badge-JVM&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Platform-macOS-purple&#34; alt=&#34;badge-macOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Platform-Web-blue&#34; alt=&#34;badge-web&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alexzhirkevich/compose-cupertino/assets/63979218/982485e8-c581-4c0e-8302-0cb257acd892&#34;&gt;https://github.com/alexzhirkevich/compose-cupertino/assets/63979218/982485e8-c581-4c0e-8302-0cb257acd892&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Compose Cupertino is a Kotlin Multiplatform library for the &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform&#34;&gt;Compose Multiplatform&lt;/a&gt; UI framework. It provides various UI components for making native-looking iOS applications, including&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cupertino&lt;/code&gt; - Compose Multiplatform implementation of iOS-like Cupertino theme and widgets, based on compose.foundation. Inspired by compose.material3 and SwiftUI APIs;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cupertino-native&lt;/code&gt; - UIKit native wrappers for Cupertino Widgets. Allows to seamlessly use some UIKit widgets for iOS and their equivalents from cupertino for other platforms;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cupertino-adaptive&lt;/code&gt; - adaptive theme and wrappers for Cupertino and Material3 widgets. Allows to seamlessly use both widgets from shared code with correct content color and font style;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cupertino-icons-extended&lt;/code&gt; - more than 800 most used monochrome &lt;a href=&#34;https://developer.apple.com/sf-symbols/&#34;&gt;Apple SF Symbols&lt;/a&gt; as Compose ImageVectors. These symbols are copyrighted. Please read licence agreement first. If you don&#39;t need these icons for platform other than iOS, you can use ios bundled icons using converters from cupertino-native.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cupertino-decompose&lt;/code&gt; - iOS-like swipe-back animation for the &#39;predictive back&#39; navigation feature of the &lt;a href=&#34;https://github.com/arkivanov/Decompose&#34;&gt;Decompose&lt;/a&gt; library + &lt;code&gt;NativeChildren&lt;/code&gt; wrapper over &lt;code&gt;UINavigationController&lt;/code&gt;. Provides native-feeling or truly native page transitions and swipe gestures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/io.github.alexzhirkevich/cupertino&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/io.github.alexzhirkevich/cupertino/badge.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; The project is in the experimental phase. All APIs can change incompatibly or be dropped without the deprecation cycle!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Add the dependency to your &lt;code&gt;build.gradle.kts&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th&gt;Dependency&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cupertino&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;io.github.alexzhirkevich:cupertino:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cupertino-native&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;io.github.alexzhirkevich:cupertino-native:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cupertino-adaptive&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;io.github.alexzhirkevich:cupertino-adaptive:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cupertino-decompose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;io.github.alexzhirkevich:cupertino-decompose:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cupertino-icons-extended&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;io.github.alexzhirkevich:cupertino-icons-extended:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;To use iOS-like widgets with Compose Cupertino and view all available components, see &lt;a href=&#34;https://raw.githubusercontent.com/alexzhirkevich/compose-cupertino/master/docs/Cupertino.md&#34;&gt;Cupertino.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use widgets that change based on the platform (looking like either Material Design or iOS) and view all available components, see &lt;a href=&#34;https://raw.githubusercontent.com/alexzhirkevich/compose-cupertino/master/docs/Adaptive.md&#34;&gt;Adaptive.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2023 Compose Cupertino project and open source contributors.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;    &#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>GradleUp/gratatouille</title>
    <updated>2024-02-22T01:32:07Z</updated>
    <id>tag:github.com,2024-02-22:/GradleUp/gratatouille</id>
    <link href="https://github.com/GradleUp/gratatouille" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cook yourself delicious Gradle plugins ðð¤ð­ðð§âð³&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gratatouille ðð¤ð­ðð§âð³&lt;/h1&gt; &#xA;&lt;p&gt;Gratatouille is an opinionated framework to build Gradle plugins. Write pure Kotlin functions and the Gratatouille KSP processor generates tasks, workers and wiring code for you.&lt;/p&gt; &#xA;&lt;p&gt;Gratatouille enforces a clear separation between your plugin logic (&lt;strong&gt;implementation&lt;/strong&gt;) and your plugin wiring (&lt;strong&gt;gradle-plugin&lt;/strong&gt;) making your plugin immune to classloader issues ð¡ï¸&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/#pure-functions&#34;&gt;Pure functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/#built-in-kotlinxserialization-support&#34;&gt;Kotlinx serialization support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/#supported-input-and-output-types&#34;&gt;Comprehensive input/output types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/#non-overlapping-task-outputs-by-default&#34;&gt;Non overlapping task outputs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/#classloader-isolation-by-default&#34;&gt;Classloader isolation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/#build-cache-by-default&#34;&gt;Build cache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/#easy-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/#parallel-task-execution-by-default&#34;&gt;Parallel execution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/#compile-time-task-wiring&#34;&gt;Compile-time task wiring&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/sample-plugin&#34;&gt;sample-plugin&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/sample-app&#34;&gt;sample-app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;h2&gt;Step 1/2: &lt;code&gt;com.gradleup.gratatouille.implementation&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Create an &lt;code&gt;implementation&lt;/code&gt; module for your plugin implementation and apply the &lt;code&gt;com.gradleup.gratatouille.implementation&lt;/code&gt; plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// implementation/build.gradle.kts&#xA;plugins {&#xA;    id(&#34;com.gradleup.gratatouille.implementation&#34;).version(&#34;0.0.1&#34;)&#xA;}&#xA;&#xA;dependencies {&#xA;    // Add the gratatouille annotations&#xA;    implementation(&#34;com.gradleup.gratatouille:gratatouille-core:0.0.1&#34;)&#xA;    // Add other dependencies&#xA;    implementation(&#34;com.squareup:kotlinpoet:1.14.2&#34;)&#xA;    implementation(&#34;org.ow2.asm:asm-commons:9.6&#34;)&#xA;    // do **not** add gradleApi() here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write your task action as a pure top-level Kotlin function annotated with &lt;code&gt;@GTaskAction&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@GTaskAction&#xA;internal fun prepareIngredients(persons: Int): Ingredients {&#xA;    return Ingredients(&#xA;        tomatoes = (persons * 0.75).roundToInt(),&#xA;        zucchinis = (persons * 0.3).roundToInt(),&#xA;        eggplants = (persons * 0.3).roundToInt(),&#xA;    )&#xA;}&#xA;&#xA;// kotlinx.serialization is supported out of the box&#xA;@Serializable&#xA;internal data class Ingredients(&#xA;    val tomatoes: Int,&#xA;    val zucchinis: Int,&#xA;    val eggplants: Int,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Gratatouille automatically maps function parameters to Gradle inputs and the return value to a Gradle output (more on outputs &lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/#non-overlapping-task-outputs-by-default&#34;&gt;below&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Gratatouille generates entry points, tasks, workers and Gradle wiring code that you can then use to cook your plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Step 2/2 &lt;code&gt;com.gradleup.gratatouille.plugin&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;To use the generated code in your plugin, create a &lt;code&gt;gradle-plugin&lt;/code&gt; module next to your &lt;code&gt;implementation&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] By using two different modules, Gratatouille ensures that Gradle classes do not leak in your plugin implementation and vice-versa.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Apply the &lt;code&gt;com.gradleup.gratatouille.plugin&lt;/code&gt; plugin in your &lt;code&gt;gradle-plugin&lt;/code&gt; module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// gradle-plugin/build.gradle.kts&#xA;plugins {&#xA;    id(&#34;java-gradle-plugin&#34;)&#xA;    id(&#34;com.gradleup.gratatouille.plugin&#34;).version(&#34;0.0.1&#34;)&#xA;}&#xA;&#xA;dependencies {&#xA;    // Add your implementation module to the &#34;gratatouille&#34; configuration.&#xA;    // This does not add `:implementation` to your plugin classpath.&#xA;    // Instead, the generated code uses reflection and a separate classloader to run&#xA;    // your implementation&#xA;    gratatouille(project(&#34;:implementation&#34;))&#xA;}&#xA;&#xA;// Create your plugin as usual, see https://docs.gradle.org/current/userguide/java_gradle_plugin.html &#xA;gradlePlugin {&#xA;    // ... &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your plugin code, use &lt;code&gt;Project.register${TaskAction}Task()&lt;/code&gt; to register the task:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;override fun apply(project: Project) {&#xA;    val extension = project.extensions.create(&#34;recipes&#34;, RecipesExtension::class.java)&#xA;&#xA;    // Register your &#34;PrepareIngredients&#34; task&#xA;    val prepareIngredients = project.registerPrepareIngredientsTask(&#xA;        persons = extension.persons&#xA;    )&#xA;    &#xA;    // Register other tasks&#xA;    project.registerCookTask(&#xA;        recipe = extension.recipe,&#xA;        // Wire tasks together&#xA;        ingredients = prepareIngredients.flatMap { it.outputFile }&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h2&gt;Pure functions&lt;/h2&gt; &#xA;&lt;p&gt;Your task code is a side-effect-free function, making it easier to &lt;a href=&#34;https://raw.githubusercontent.com/GradleUp/gratatouille/main/#parallel-task-execution-by-default&#34;&gt;parallelize&lt;/a&gt; and reason about.&lt;/p&gt; &#xA;&lt;p&gt;Nullable parameters are generated as optional task properties. Calls to &lt;code&gt;Provider.get()&lt;/code&gt; or &lt;code&gt;Provider.orNull&lt;/code&gt; are automated.&lt;/p&gt; &#xA;&lt;h2&gt;Built-in kotlinx.serialization support&lt;/h2&gt; &#xA;&lt;p&gt;Gratatouille has builtin support for &lt;a href=&#34;https://github.com/Kotlin/kotlinx.serialization&#34;&gt;kotlinx.serialization&lt;/a&gt;. Models are serialized and deserialized as needed.&lt;/p&gt; &#xA;&lt;h2&gt;Supported input and output types&lt;/h2&gt; &#xA;&lt;p&gt;Inputs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any type annotated with &lt;code&gt;@Serializable&lt;/code&gt; (serialized to a File)&lt;/li&gt; &#xA; &lt;li&gt;Kotlin &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kotlin &lt;code&gt;Set&lt;/code&gt;, &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Single File using the &lt;code&gt;GInputFile&lt;/code&gt; typealias&lt;/li&gt; &#xA; &lt;li&gt;FileCollection using the &lt;code&gt;GInputFiles&lt;/code&gt; typealias&lt;/li&gt; &#xA; &lt;li&gt;Directory using the &lt;code&gt;GInputDirectory&lt;/code&gt; typealias&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Outputs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any type annotated with &lt;code&gt;@Serializable&lt;/code&gt; (serialized to a File)&lt;/li&gt; &#xA; &lt;li&gt;Single File using the &lt;code&gt;GOutputFile&lt;/code&gt; typealias&lt;/li&gt; &#xA; &lt;li&gt;Directory using the &lt;code&gt;GOutputDirectory&lt;/code&gt; typealias&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Non-overlapping task outputs by default&lt;/h2&gt; &#xA;&lt;p&gt;Gratatouille allocates paths for output files and directories automatically. Each output gets a dedicated filesystem location at &lt;code&gt;&#34;build/gtask/${taskName}/${outputName}&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you don&#39;t have to think about what path to use.&lt;/li&gt; &#xA; &lt;li&gt;the outputs are consistent and discoverable.&lt;/li&gt; &#xA; &lt;li&gt;issues like &lt;a href=&#34;https://github.com/gradle/gradle/issues/26091&#34;&gt;#26091&lt;/a&gt; are avoided by construction.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your function has a single return value, Gratatouille uses &lt;code&gt;outputFile&lt;/code&gt; as output name.&lt;/p&gt; &#xA;&lt;p&gt;If your function needs multiple return values, wrap them in a non-serializable class.&lt;/p&gt; &#xA;&lt;p&gt;If you need to control the output location of an output, you can do so using &lt;code&gt;@GManuallyWired&lt;/code&gt; and using &lt;code&gt;GOutputFile&lt;/code&gt;/&lt;code&gt;GOutputDirectory&lt;/code&gt; as parameters.&lt;/p&gt; &#xA;&lt;p&gt;In your implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@GTaskAction&#xA;internal fun cook(&#xA;    recipe: GInputFile,&#xA;    ingredients: Ingredients,&#xA;    // ratatouille is exposed in registerCookTask(outputFile) so you can configure it &#xA;    @GManuallyWired ratatouille: GOutputFile,&#xA;    // leftovers is set to &#34;build/gtask/cook/leftovers&#34; &#xA;    leftovers: GOutputFile,&#xA;) {&#xA;    ratatouille.writeText(/* cook here! */)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;project.registerCookTask(&#xA;    recipe = extension.recipe,&#xA;    ingredients = prepareIngredients.flatMap { it.outputFile },&#xA;    // Set outputFile location explicitly&#xA;    ratatouille = project.layout.buildDirectory.file(&#34;ratatouille&#34;)&#xA;    // No need to set lefovers&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Classloader isolation by default&lt;/h2&gt; &#xA;&lt;p&gt;Gratatouille creates a separate classloader for each task and calls your pure functions using reflection.&lt;/p&gt; &#xA;&lt;p&gt;This means your plugin can depend on popular dependencies such as the Kotlin stdlib, KotlinPoet or ASM without risking conflicts with other plugins or the Gradle classpath itself.&lt;/p&gt; &#xA;&lt;h2&gt;Build cache by default&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;@CacheableTask&lt;/code&gt; is added by default. All input files use &lt;code&gt;PathSensitivity.RELATIVE&lt;/code&gt; making your tasks relocatable.&lt;/p&gt; &#xA;&lt;h2&gt;Easy documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;@GTaskAction&lt;/code&gt; takes a &lt;code&gt;description&lt;/code&gt; and a &lt;code&gt;group&lt;/code&gt; argument making it easy to colocate your documentation with your implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@GTaskAction(&#xA;    description = &#34;cooks the most delicious ratatouille with the help of the tiniest chef&#34;,&#xA;    group = &#34;recipes&#34;&#xA;)&#xA;internal fun cook(&#xA;    recipe: GInputFile,&#xA;    ingredients: Ingredients,&#xA;    outputFile: GOutputFile&#xA;) { &#xA;    TODO()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parallel task execution by default&lt;/h2&gt; &#xA;&lt;p&gt;Even with &lt;code&gt;org.gradle.parallel=true&lt;/code&gt;, &lt;a href=&#34;https://docs.gradle.org/current/userguide/performance.html#parallel_execution&#34;&gt;Gradle tasks execute serially in a single module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Because your task actions are pure Kotlin function, no state is shared, making them perfect candidates for parallelization.&lt;/p&gt; &#xA;&lt;p&gt;Gratatouille uses the &lt;a href=&#34;https://docs.gradle.org/current/userguide/worker_api.html&#34;&gt;Worker API&lt;/a&gt; to allow parallel execution making your build faster overall. Use &lt;code&gt;org.gradle.workers.max&lt;/code&gt; to control the maximum number of workers.&lt;/p&gt; &#xA;&lt;h2&gt;Compile time task wiring&lt;/h2&gt; &#xA;&lt;p&gt;Finally, Gratatouille encourages exposing extensions to users instead of task classes directly. All generated code is generated as &lt;code&gt;internal&lt;/code&gt;. This makes it easier to have some inputs user configurable while some others are an implementation details and more generally makes it easier to evolve the public API of your plugin.&lt;/p&gt; &#xA;&lt;p&gt;When a task has a high number of inputs, it can become hard to track which ones have been wired and which ones haven&#39;t. By using a central registration point, Gratatouille enforces at build time that all inputs/outputs have been properly wired.&lt;/p&gt;</summary>
  </entry>
</feed>