<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-10T01:37:41Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ephemient/aoc2023</title>
    <updated>2023-12-10T01:37:41Z</updated>
    <id>tag:github.com,2023-12-10:/ephemient/aoc2023</id>
    <link href="https://github.com/ephemient/aoc2023" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Advent of Code 2023 - my answers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://adventofcode.com/2023&#34;&gt;Advent of Code 2023&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;my answers&lt;/h3&gt; &#xA;&lt;p&gt;Development occurs in language-specific directories:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/hs&#34;&gt;Haskell&lt;/a&gt; &lt;img src=&#34;https://github.com/ephemient/aoc2023/workflows/Haskell%20CI/badge.svg?sanitize=true&#34; alt=&#34;Haskell CI&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/kt&#34;&gt;Kotlin&lt;/a&gt; &lt;img src=&#34;https://github.com/ephemient/aoc2023/workflows/Kotlin%20CI/badge.svg?sanitize=true&#34; alt=&#34;Kotlin CI&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/py&#34;&gt;Python&lt;/a&gt; &lt;img src=&#34;https://github.com/ephemient/aoc2023/workflows/Python%20CI/badge.svg?sanitize=true&#34; alt=&#34;Python CI&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/rs&#34;&gt;Rust&lt;/a&gt; &lt;img src=&#34;https://github.com/ephemient/aoc2023/workflows/Rust%20CI/badge.svg?sanitize=true&#34; alt=&#34;Rust CI&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/hs/src/Day1.hs&#34;&gt;Day1.hs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/kt/aoc2023-lib/src/commonMain/kotlin/com/github/ephemient/aoc2023/Day1.kt&#34;&gt;Day1.kt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/py/aoc2023/day1.py&#34;&gt;day1.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/rs/src/day1.rs&#34;&gt;day1.rs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/hs/src/Day2.hs&#34;&gt;Day2.hs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/kt/aoc2023-lib/src/commonMain/kotlin/com/github/ephemient/aoc2023/Day2.kt&#34;&gt;Day2.kt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/py/aoc2023/day2.py&#34;&gt;day2.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/rs/src/day2.rs&#34;&gt;day2.rs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/hs/src/Day3.hs&#34;&gt;Day3.hs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/kt/aoc2023-lib/src/commonMain/kotlin/com/github/ephemient/aoc2023/Day3.kt&#34;&gt;Day3.kt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/py/aoc2023/day3.py&#34;&gt;day3.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/rs/src/day3.rs&#34;&gt;day3.rs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/hs/src/Day4.hs&#34;&gt;Day4.hs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/kt/aoc2023-lib/src/commonMain/kotlin/com/github/ephemient/aoc2023/Day4.kt&#34;&gt;Day4.kt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/py/aoc2023/day4.py&#34;&gt;day4.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/rs/src/day4.rs&#34;&gt;day4.rs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/hs/src/Day5.hs&#34;&gt;Day5.hs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/kt/aoc2023-lib/src/commonMain/kotlin/com/github/ephemient/aoc2023/Day5.kt&#34;&gt;Day5.kt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/py/aoc2023/day5.py&#34;&gt;day5.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/rs/src/day5.rs&#34;&gt;day5.rs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/hs/src/Day6.hs&#34;&gt;Day6.hs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/kt/aoc2023-lib/src/commonMain/kotlin/com/github/ephemient/aoc2023/Day6.kt&#34;&gt;Day6.kt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/py/aoc2023/day6.py&#34;&gt;day6.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/rs/src/day6.rs&#34;&gt;day6.rs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/hs/src/Day7.hs&#34;&gt;Day7.hs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/kt/aoc2023-lib/src/commonMain/kotlin/com/github/ephemient/aoc2023/Day7.kt&#34;&gt;Day7.kt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/py/aoc2023/day7.py&#34;&gt;day7.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/rs/src/day7.rs&#34;&gt;day7.rs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/hs/src/Day8.hs&#34;&gt;Day8.hs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/kt/aoc2023-lib/src/commonMain/kotlin/com/github/ephemient/aoc2023/Day8.kt&#34;&gt;Day8.kt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/py/aoc2023/day8.py&#34;&gt;day8.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/rs/src/day8.rs&#34;&gt;day8.rs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/hs/src/Day9.hs&#34;&gt;Day9.hs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/kt/aoc2023-lib/src/commonMain/kotlin/com/github/ephemient/aoc2023/Day9.kt&#34;&gt;Day9.kt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/py/aoc2023/day9.py&#34;&gt;day9.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ephemient/aoc2023/main/rs/src/day9.rs&#34;&gt;day9.rs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>KevinnZou/compose-webview-multiplatform</title>
    <updated>2023-12-10T01:37:41Z</updated>
    <id>tag:github.com,2023-12-10:/KevinnZou/compose-webview-multiplatform</id>
    <link href="https://github.com/KevinnZou/compose-webview-multiplatform" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WebView for JetBrains Compose Multiplatform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebView for JetBrains Compose Multiplatform&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/artifact/io.github.kevinnzou/compose-webview-multiplatform&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.github.kevinnzou/compose-webview-multiplatform.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://kotlinlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kotlin-v1.9.20-blue.svg?logo=kotlin&#34; alt=&#34;Kotlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Compose%20Multiplatform-v1.5.10-blue&#34; alt=&#34;Compose Multiplatform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://img.shields.io/badge/platform-android-6EDB8D.svg?style=flat&#34; alt=&#34;badge-android&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/platform-ios-CDCDCD.svg?style=flat&#34; alt=&#34;badge-ios&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/platform-desktop-DB413D.svg?style=flat&#34; alt=&#34;badge-desktop&#34;&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/KevinnZou/compose-webview-multiplatform/main/media/cmm-webview-sample.png&#34; height=&#34;500&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; This library is built using the &lt;a href=&#34;https://github.com/KevinnZou/compose-multiplatform-library-template&#34;&gt;compose multiplatform library template&lt;/a&gt;. It supports automatic package publishing, documentation, and code style checking.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This library can be considered as the Multiplatform version of &lt;a href=&#34;https://github.com/google/accompanist/tree/main/web&#34;&gt;Accompanist Web library&lt;/a&gt;. It provides the basic WebView functionalities for JetBrains Compose Multiplatform, which supports loading URLs, HTML, and post data. Currently, it supports the platforms of Android, iOS, and Desktop.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The Android implementation of this library relies on the web module from the &lt;a href=&#34;https://github.com/google/accompanist/tree/main/web&#34;&gt;Accompanist Library&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; it has been deprecated in version 0.33.1-alpha. Thus I created a fork of it and used it as the base for this library. If you just want to use the WebView in Jetpack Compose, please visit this repo: &lt;a href=&#34;https://github.com/KevinnZou/compose-webview&#34;&gt;https://github.com/KevinnZou/compose-webview&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The iOS implementation of this library relies on &lt;a href=&#34;https://developer.apple.com/documentation/webkit/wkwebview&#34;&gt;WKWebView&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The Desktop implementation of this library relies on &lt;a href=&#34;https://docs.oracle.com/javase/8/javafx/api/javafx/scene/web/WebView.html&#34;&gt;JavaFX WebView&lt;/a&gt; for version &amp;lt;= 1.2.0.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Thanks to @DATL4G, starting from version 1.3.0, we switched to &lt;a href=&#34;https://github.com/chromiumembedded/java-cef&#34;&gt;Java CEF Browser&lt;/a&gt; for better performance.&lt;/li&gt; &#xA;   &lt;li&gt;starting from version 1.7.0, we switched from Java CEF Browser to &lt;a href=&#34;https://github.com/DatL4g/KCEF/tree/master&#34;&gt;Kotlin CEF Browser&lt;/a&gt; for more features and better performance.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; After switching to KCEF, developers need to configure it for the desktop app. Please see the &lt;a href=&#34;https://github.com/KevinnZou/compose-webview-multiplatform/raw/main/README.desktop.md&#34;&gt;README.desktop.md&lt;/a&gt; for more details.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use this widget there are two key APIs that are needed: &lt;em&gt;WebView&lt;/em&gt;, which provides the layout, and &lt;em&gt;rememberWebViewState(url)&lt;/em&gt; which provides some remembered state including the URL to display.&lt;/p&gt; &#xA;&lt;p&gt;The basic usage is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val state = rememberWebViewState(&#34;https://example.com&#34;)&#xA;&#xA;WebView(state)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will display a WebView in your Compose layout that shows the URL provided.&lt;/p&gt; &#xA;&lt;h2&gt;WebView State&lt;/h2&gt; &#xA;&lt;p&gt;This library provides a &lt;em&gt;WebViewState&lt;/em&gt; class as a state holder to hold the state for the WebView.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class WebViewState(webContent: WebContent) {&#xA;    var lastLoadedUrl: String? by mutableStateOf(null)&#xA;        internal set&#xA;&#xA;    /**&#xA;     *  The content being loaded by the WebView&#xA;     */&#xA;    var content: WebContent by mutableStateOf(webContent)&#xA;&#xA;    /**&#xA;     * Whether the WebView is currently [LoadingState.Loading] data in its main frame (along with&#xA;     * progress) or the data loading has [LoadingState.Finished]. See [LoadingState]&#xA;     */&#xA;    var loadingState: LoadingState by mutableStateOf(LoadingState.Initializing)&#xA;        internal set&#xA;&#xA;    /**&#xA;     * Whether the webview is currently loading data in its main frame&#xA;     */&#xA;    val isLoading: Boolean&#xA;        get() = loadingState !is LoadingState.Finished&#xA;&#xA;    /**&#xA;     * The title received from the loaded content of the current page&#xA;     */&#xA;    var pageTitle: String? by mutableStateOf(null)&#xA;        internal set&#xA;&#xA;    /**&#xA;     * A list for errors captured in the last load. Reset when a new page is loaded.&#xA;     * Errors could be from any resource (iframe, image, etc.), not just for the main page.&#xA;     * For more fine grained control use the OnError callback of the WebView.&#xA;     */&#xA;    val errorsForCurrentRequest: SnapshotStateList&amp;lt;WebViewError&amp;gt; = mutableStateListOf()&#xA;&#xA;    /**&#xA;     * Custom Settings for WebView.&#xA;     */&#xA;    val webSettings: WebSettings by mutableStateOf(WebSettings())&#xA;&#xA;    // We need access to this in the state saver. An internal DisposableEffect or AndroidView&#xA;    // onDestroy is called after the state saver and so can&#39;t be used.&#xA;    internal var webView by mutableStateOf&amp;lt;IWebView?&amp;gt;(null)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can be created using the &lt;em&gt;rememberWebViewState&lt;/em&gt; function, which can be remembered across Compositions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val state = rememberWebViewState(&#34;https://github.com/KevinnZou/compose-webview-multiplatform&#34;)&#xA;&#xA;/**&#xA; * Creates a WebView state that is remembered across Compositions.&#xA; *&#xA; * @param url The url to load in the WebView&#xA; * @param additionalHttpHeaders Optional, additional HTTP headers that are passed to [WebView.loadUrl].&#xA; *                              Note that these headers are used for all subsequent requests of the WebView.&#xA; */&#xA;@Composable&#xA;fun rememberWebViewState(&#xA;    url: String,&#xA;    additionalHttpHeaders: Map&amp;lt;String, String&amp;gt; = emptyMap()&#xA;)&#xA;&#xA;/**&#xA; * Creates a WebView state that is remembered across Compositions.&#xA; *&#xA; * @param data The uri to load in the WebView&#xA; * @param baseUrl The URL to use as the page&#39;s base URL.&#xA; * @param encoding The encoding of the data in the string.&#xA; * @param mimeType The MIME type of the data in the string.&#xA; * @param historyUrl The history URL for the loaded HTML. Leave null to use about:blank.&#xA; */&#xA;@Composable&#xA;fun rememberWebViewStateWithHTMLData(&#xA;  data: String,&#xA;  baseUrl: String? = null,&#xA;  encoding: String = &#34;utf-8&#34;,&#xA;  mimeType: String? = null,&#xA;  historyUrl: String? = null&#xA;)&#xA;&#xA;/**&#xA; * Creates a WebView state that is remembered across Compositions.&#xA; *&#xA; * @param fileName The file to load in the WebView&#xA; */&#xA;@Composable&#xA;fun rememberWebViewStateWithHTMLFile(&#xA;  fileName: String,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Developers can use the &lt;em&gt;WebViewState&lt;/em&gt; to get the loading information of the WebView, such as the loading progress, the loading status, and the URL of the current page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;Column {&#xA;    val state = rememberWebViewState(&#34;https://github.com/KevinnZou/compose-webview-multiplatform&#34;)&#xA;&#xA;    Text(text = &#34;${state.pageTitle}&#34;)&#xA;    val loadingState = state.loadingState&#xA;    if (loadingState is LoadingState.Loading) {&#xA;        LinearProgressIndicator(&#xA;            progress = loadingState.progress,&#xA;            modifier = Modifier.fillMaxWidth()&#xA;        )&#xA;    }&#xA;    WebView(&#xA;        state&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;WebView Navigator&lt;/h2&gt; &#xA;&lt;p&gt;This library provides a &lt;em&gt;WebViewNavigator&lt;/em&gt; class to control over the navigation of a WebView from outside the composable. E.g.for performing a back navigation in response to the user clicking the &#34;up&#34; button in a TopAppBar. It can be used to load a new URL, evaluate the JavaScript, and go back and forward in the history.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class WebViewNavigator(private val coroutineScope: CoroutineScope) {&#xA;&#xA;    /**&#xA;     * True when the web view is able to navigate backwards, false otherwise.&#xA;     */&#xA;    var canGoBack: Boolean by mutableStateOf(false)&#xA;        internal set&#xA;&#xA;    /**&#xA;     * True when the web view is able to navigate forwards, false otherwise.&#xA;     */&#xA;    var canGoForward: Boolean by mutableStateOf(false)&#xA;        internal set&#xA;&#xA;    fun loadUrl(url: String, additionalHttpHeaders: Map&amp;lt;String, String&amp;gt; = emptyMap()) {}&#xA;&#xA;    fun loadHtml(&#xA;        html: String,&#xA;        baseUrl: String? = null,&#xA;        mimeType: String? = null,&#xA;        encoding: String? = &#34;utf-8&#34;,&#xA;        historyUrl: String? = null&#xA;    ) {&#xA;    }&#xA;&#xA;    fun postUrl(&#xA;        url: String,&#xA;        postData: ByteArray&#xA;    ) {&#xA;    }&#xA;&#xA;    fun evaluateJavaScript(script: String, callback: ((String) -&amp;gt; Unit)? = null)&#xA;&#xA;    /**&#xA;     * Navigates the webview back to the previous page.&#xA;     */&#xA;    fun navigateBack() {}&#xA;&#xA;    /**&#xA;     * Navigates the webview forward after going back from a page.&#xA;     */&#xA;    fun navigateForward() {}&#xA;&#xA;    /**&#xA;     * Reloads the current page in the webview.&#xA;     */&#xA;    fun reload() {}&#xA;&#xA;    /**&#xA;     * Stops the current page load (if one is loading).&#xA;     */&#xA;    fun stopLoading() {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can be created using the &lt;em&gt;rememberWebViewNavigator&lt;/em&gt; function, which can be remembered across Compositions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val navigator = rememberWebViewNavigator()&#xA;&#xA;@Composable&#xA;fun rememberWebViewNavigator(&#xA;    coroutineScope: CoroutineScope = rememberCoroutineScope()&#xA;): WebViewNavigator = remember(coroutineScope) { WebViewNavigator(coroutineScope) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Developers can use the &lt;em&gt;WebViewNavigator&lt;/em&gt; to control the navigation of the WebView.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val navigator = rememberWebViewNavigator()&#xA;&#xA;Column {&#xA;    val state = rememberWebViewState(&#34;https://example.com&#34;)&#xA;    val navigator = rememberWebViewNavigator()&#xA;&#xA;    TopAppBar(&#xA;        title = { Text(text = &#34;WebView Sample&#34;) },&#xA;        navigationIcon = {&#xA;            if (navigator.canGoBack) {&#xA;                IconButton(onClick = { navigator.navigateBack() }) {&#xA;                    Icon(&#xA;                        imageVector = Icons.Default.ArrowBack,&#xA;                        contentDescription = &#34;Back&#34;&#xA;                    )&#xA;                }&#xA;            }&#xA;        }&#xA;    )&#xA;    Text(text = &#34;${state.pageTitle}&#34;)&#xA;    val loadingState = state.loadingState&#xA;    if (loadingState is LoadingState.Loading) {&#xA;        LinearProgressIndicator(&#xA;            progress = loadingState.progress,&#xA;            modifier = Modifier.fillMaxWidth()&#xA;        )&#xA;    }&#xA;    WebView(&#xA;        state = state,&#xA;        navigator = navigator&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;WebSettings&lt;/h2&gt; &#xA;&lt;p&gt;Starting from version 1.3.0, this library allows users to customize web settings. There are some common web settings that can be shared across different platforms, such as isJavaScriptEnabled and userAgent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class WebSettings {&#xA;    var isJavaScriptEnabled = true&#xA;&#xA;    var customUserAgentString: String? = null&#xA;&#xA;    /**&#xA;     * Android platform specific settings&#xA;     */&#xA;    val androidWebSettings = PlatformWebSettings.AndroidWebSettings()&#xA;&#xA;    /**&#xA;     * Desktop platform specific settings&#xA;     */&#xA;    val desktopWebSettings = PlatformWebSettings.DesktopWebSettings()&#xA;&#xA;    /**&#xA;     * iOS platform specific settings&#xA;     */&#xA;    val iOSWebSettings = PlatformWebSettings.IOSWebSettings&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For platform specific settings, this library provides the PlatformWebSettings. These settings will only be applied to the respective platforms and do not affect other platforms.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;sealed class PlatformWebSettings {&#xA;    data class AndroidWebSettings(&#xA;        /**&#xA;         * whether the WebView should support zooming using its on-screen zoom&#xA;         * controls and gestures. The particular zoom mechanisms that should be used&#xA;         * can be set with {@link #setBuiltInZoomControls}. This setting does not&#xA;         * affect zooming performed using the {@link WebView#zoomIn()} and&#xA;         * {@link WebView#zoomOut()} methods. The default is {@code true}.&#xA;         *&#xA;         * @param support whether the WebView should support zoom&#xA;         */&#xA;        var supportZoom: Boolean = true,&#xA;&#xA;        /**&#xA;         * whether Safe Browsing is enabled. Safe Browsing allows WebView to&#xA;         * protect against malware and phishing attacks by verifying the links.&#xA;         */&#xA;        var safeBrowsingEnabled: Boolean = true,&#xA;&#xA;        // .....&#xA;    ) : PlatformWebSettings()&#xA;&#xA;    data class DesktopWebSettings(&#xA;        var offScreenRendering: Boolean = false,&#xA;        var transparent: Boolean = false,&#xA;    ) : PlatformWebSettings()&#xA;&#xA;    data object IOSWebSettings : PlatformWebSettings()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Developers can configure custom settings in the shared code in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val webViewState = rememberWebViewStateWithHTMLData(&#xA;    data = html&#xA;)&#xA;webViewState.webSettings.apply {&#xA;    isJavaScriptEnabled = true&#xA;    androidWebSettings.apply {&#xA;        isAlgorithmicDarkeningAllowed = true&#xA;        safeBrowsingEnabled = true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HTML&lt;/h2&gt; &#xA;&lt;p&gt;This library supports loading HTML data and HTML files.&lt;/p&gt; &#xA;&lt;h3&gt;HTML Data&lt;/h3&gt; &#xA;&lt;p&gt;Developers can load HTML data in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val html = &#34;&#34;&#34;&#xA;    &amp;lt;html&amp;gt;&#xA;        &amp;lt;body&amp;gt;&#xA;            &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&#xA;        &amp;lt;/body&amp;gt;&#xA;    &amp;lt;/html&amp;gt;&#xA;&#34;&#34;&#34;.trimIndent()&#xA;val webViewState = rememberWebViewStateWithHTMLData(&#xA;    data = html&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTML File&lt;/h3&gt; &#xA;&lt;p&gt;Developers can load HTML files in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val webViewState = rememberWebViewStateWithHTMLFile(&#xA;    fileName = &#34;index.html&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the HTML file should be put in the &lt;code&gt;resources/assets&lt;/code&gt; folder of the shared module.&lt;/p&gt; &#xA;&lt;p&gt;It also supports external resources such as images, CSS, and JavaScript files on Android and iOS. Desktop support is coming soon.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The complete API of this library is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;/**&#xA; *&#xA; * A wrapper around the Android View WebView to provide a basic WebView composable.&#xA; *&#xA; * @param state The webview state holder where the Uri to load is defined.&#xA; * @param modifier A compose modifier&#xA; * @param captureBackPresses Set to true to have this Composable capture back presses and navigate&#xA; * the WebView back.&#xA; * @param navigator An optional navigator object that can be used to control the WebView&#39;s&#xA; * navigation from outside the composable.&#xA; * @param onCreated Called when the WebView is first created.&#xA; * @param onDispose Called when the WebView is destroyed.&#xA; * @sample sample.BasicWebViewSample&#xA; */&#xA;@Composable&#xA;fun WebView(&#xA;    state: WebViewState,&#xA;    modifier: Modifier = Modifier,&#xA;    captureBackPresses: Boolean = true,&#xA;    navigator: WebViewNavigator = rememberWebViewNavigator(),&#xA;    onCreated: () -&amp;gt; Unit = {},&#xA;    onDispose: () -&amp;gt; Unit = {},&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;A simple example would be like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;internal fun WebViewSample() {&#xA;    MaterialTheme {&#xA;        val webViewState = rememberWebViewState(&#34;https://github.com/KevinnZou/compose-webview-multiplatform&#34;)&#xA;        Column(Modifier.fillMaxSize()) {&#xA;            val text = webViewState.let {&#xA;                &#34;${it.pageTitle ?: &#34;&#34;} ${it.loadingState} ${it.lastLoadedUrl ?: &#34;&#34;}&#34;&#xA;            }&#xA;            Text(text)&#xA;            WebView(&#xA;                state = webViewState,&#xA;                modifier = Modifier.fillMaxSize()&#xA;            )&#xA;        }&#xA;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a full example, please refer to &lt;a href=&#34;https://github.com/KevinnZou/compose-webview-multiplatform/raw/main/sample/shared/src/commonMain/kotlin/com/kevinnzou/sample/BasicWebViewSample.kt&#34;&gt;BasicWebViewSample&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/artifact/io.github.kevinnzou/compose-webview-multiplatform&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.github.kevinnzou/compose-webview-multiplatform.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can add this library to your project using Gradle.&lt;/p&gt; &#xA;&lt;h3&gt;Multiplatform&lt;/h3&gt; &#xA;&lt;p&gt;To add to a multiplatform project, add the dependency to the common source-set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;    // Desktop target has to add this repo&#xA;    maven(&#34;https://jogamp.org/deployment/maven&#34;)&#xA;}&#xA;&#xA;kotlin {&#xA;    sourceSets {&#xA;        commonMain {&#xA;            dependencies {&#xA;              // use api since the desktop app need to access the Cef to initialize it.&#xA;              api(&#34;io.github.kevinnzou:compose-webview-multiplatform:1.7.6&#34;)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Single Platform&lt;/h3&gt; &#xA;&lt;p&gt;For an Android only project, you directly can use my &lt;a href=&#34;https://github.com/KevinnZou/compose-webview&#34;&gt;another library&lt;/a&gt;. Add the dependency to app level &lt;code&gt;build.gradle.kts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;    implementation(&#34;io.github.KevinnZou:compose-webview:0.33.3&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>