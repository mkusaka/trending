<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-08T01:39:27Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JakeWharton/cite</title>
    <updated>2023-02-08T01:39:27Z</updated>
    <id>tag:github.com,2023-02-08:/JakeWharton/cite</id>
    <link href="https://github.com/JakeWharton/cite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Kotlin compiler plugin for accessing information about the file being compiled&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cite for Kotlin&lt;/h1&gt; &#xA;&lt;p&gt;A Kotlin compiler plugin for accessing information about the file being compiled.&lt;/p&gt; &#xA;&lt;p&gt;For example, given:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;object Greeter {&#xA;  fun sayHi() {&#xA;    println(&#34;Hello: $__FILE__, $__TYPE__, $__MEMBER_, $__LINE__&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When invoked, this will output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Hello: main.kt, Greeter, sayHi, 16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Java bytecode shows values were resolved at compile time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; 9: getstatic     #19      // Field java/lang/System.out:Ljava/io/PrintStream;&#xA;11: ldc           #27      // String Hello: main.kt, Greeter, sayHi, 16&#xA;14: invokevirtual #25      // Method java/io/PrintStream.println:(Ljava/lang/Object;)V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The values are constants, so they can be folded with other constants.&lt;/p&gt; &#xA;&lt;p&gt;Every Kotlin target is supported. Here&#39;s JS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Greeter.prototype.h = function () {&#xA;  println(&#39;Hello: main.kt, Greeter, sayHi, 16&#39;);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Native (as LLVM IR, and you might need your ASCII table):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@792 = … { …, [34 x i16] [i16 72, i16 101, i16 108, i16 108, i16 111, i16 58, i16 32, i16 109, i16 97, i16 105, i16 110, i16 46, i16 107, i16 116, i16 44, i16 32, i16 71, i16 114, i16 101, i16 101, i16 116, i16 101, i16 114, i16 44, i16 32, i16 115, i16 97, i16 121, i16 72, i16 105, i16 44, i16 32, i16 49, i16 54] }&#xA; ⋮&#xA;call void @Kotlin_io_Console_println(… ({ %struct.ArrayHeader, [34 x i16] }* @792 …)), !dbg !12017&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Four properties are provided:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;__FILE__&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename of the source file.&lt;/td&gt; &#xA;   &lt;td&gt;&#34;main.kt&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;__TYPE__&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Name of the nearest enclosing class, object, interface, or enum.&lt;/td&gt; &#xA;   &lt;td&gt;&#34;Greeter&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;__MEMBER__&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Name of the nearest enclosing function or property body.&lt;/td&gt; &#xA;   &lt;td&gt;&#34;sayHi&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;__LINE__&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;One-based line number of this property reference.&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Use of a property in a location without an associated enclosing type is an error. For example, using &lt;code&gt;__TYPE__&lt;/code&gt; in a top-level function will fail to compile.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Snapshots of the development version are available in Sonatype&#39;s snapshots repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {&#xA;  repositories {&#xA;    mavenCentral()&#xA;    maven {&#xA;      url &#39;https://oss.sonatype.org/content/repositories/snapshots/&#39;&#xA;    }&#xA;  }&#xA;  dependencies {&#xA;    classpath &#39;com.jakewharton.cite:cite-gradle-plugin:0.1.0-SNAPSHOT&#39;&#xA;  }&#xA;}&#xA;&#xA;apply plugin: &#39;org.jetbrains.kotlin.multiplatform&#39; // Or .jvm&#xA;apply plugin: &#39;com.jakewharton.cite&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The runtime dependency will be added as an &lt;code&gt;implementation&lt;/code&gt; dependency automatically. Never add the runtime dependency yourself, as use without the plugin will not work.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2023 Jake Wharton&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>nbsmobile/incio</title>
    <updated>2023-02-08T01:39:27Z</updated>
    <id>tag:github.com,2023-02-08:/nbsmobile/incio</id>
    <link href="https://github.com/nbsmobile/incio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NBS KMM App Development Starter Kit.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nbsmobile/incio/master/images/logo.png&#34; alt=&#34;Incio logo&#34;&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;introduction&#34;&gt;&lt;/a&gt; Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this Template is to be our starting point for new projects, following the best development practices. It&#39;s our interpretation and adaptation of years in mobile development that we have implemented in our internal codebases for all kind of Mobile Projects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;shared&lt;/code&gt;&lt;/strong&gt;: data and domain layer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;iosApp&lt;/code&gt;&lt;/strong&gt;: ios presentation layer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;androidApp&lt;/code&gt;&lt;/strong&gt;: android presentation layer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nbsmobile/incio/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nbsmobile/incio/master/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nbsmobile/incio/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nbsmobile/incio/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nbsmobile/incio/master/#libraries&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nbsmobile/incio/master/#domain-to-presentation&#34;&gt;Domain to Presentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nbsmobile/incio/master/#expect-actual&#34;&gt;Expect and Actual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nbsmobile/incio/master/#project-structure&#34;&gt;Project Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nbsmobile/incio/master/#build-config&#34;&gt;Build Config&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;architecture&#34;&gt;&lt;/a&gt; Architecture&lt;/h2&gt; &#xA;&lt;img width=&#34;669&#34; alt=&#34;Screen Shot 2023-02-04 at 12 19 59 PM&#34; src=&#34;https://user-images.githubusercontent.com/55146646/216748266-75110db9-2bec-41aa-9e21-6cb0f477a961.png&#34;&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;features&#34;&gt;&lt;/a&gt; Features&lt;/h2&gt; &#xA;&lt;p&gt;This template includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Expect actual implementation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cryptography SHA 256&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Networking :&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;HTTP GET&lt;/li&gt; &#xA;   &lt;li&gt;HTTP POST&lt;/li&gt; &#xA;   &lt;li&gt;HTTP POST Multipart/Form-Data&lt;/li&gt; &#xA;   &lt;li&gt;Authenticator&lt;/li&gt; &#xA;   &lt;li&gt;HTTP Error Handler&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Database&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create&lt;/li&gt; &#xA;   &lt;li&gt;Read&lt;/li&gt; &#xA;   &lt;li&gt;Delete&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Preference&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Read&lt;/li&gt; &#xA;   &lt;li&gt;Update&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;installation&#34;&gt;&lt;/a&gt; Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://kotlinlang.org/docs/kmm-overview.html&#34;&gt;KMM Guide by Jetbrains&lt;/a&gt; for getting started building a project with KMM.&lt;/li&gt; &#xA; &lt;li&gt;Install Kotlin Multiplatform Mobile plugin in Android Studio&lt;/li&gt; &#xA; &lt;li&gt;Clone or Download the repo&lt;/li&gt; &#xA; &lt;li&gt;Rebuild Project&lt;/li&gt; &#xA; &lt;li&gt;To run in iOS, Open Xcode, select &lt;code&gt;.xcworkspace&lt;/code&gt;, then &lt;code&gt;pod install&lt;/code&gt; inside &lt;code&gt;iosApp&lt;/code&gt; folder to install shared module and ios dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- **Development Keys**: The `apiKey` in [`utils/Constants.kt`](https://code.nbs.dev/nbs-mobile/kmm-movie-db/-/blob/main/core/src/commonMain/kotlin/com/uwaisalqadri/moviecatalogue/utils/Constants.kt) are generated from [TMDB](https://www.themoviedb.org/), generate your own in [themoviedb.org/settings/api](https://www.themoviedb.org/settings/api). --&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;libraries&#34;&gt;&lt;/a&gt; Libraries&lt;/h2&gt; &#xA;&lt;img width=&#34;659&#34; alt=&#34;Screen Shot 2023-02-03 at 7 08 19 PM&#34; src=&#34;https://user-images.githubusercontent.com/55146646/216588897-952285ad-6677-4812-9002-dc5b9ccc661c.png&#34;&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;domain-to-presentation&#34;&gt;&lt;/a&gt; Domain to Presentation&lt;/h2&gt; &#xA;&lt;p&gt;In Android, Because both &lt;code&gt;shared&lt;/code&gt; and &lt;code&gt;androidApp&lt;/code&gt; written in Kotlin, we can simply collect flow :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fun getRocketLaunches() = viewModelScope.launch {&#xA;   _rocketLaunchResults.value = Resource.loading()&#xA;   proceed(_rocketLaunchResults) {&#xA;      rocketLaunchUseCase.getRocketLaunches()&#xA;   }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But in iOS, we have to deal with swift, here i&#39;m using &lt;code&gt;createPublisher()&lt;/code&gt; from &lt;code&gt;KMPNativeCoroutines&lt;/code&gt; to collect flow as Publisher in &lt;code&gt;Combine&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;func getRocketLaunches() {&#xA;   rocketLaunch = .loading&#xA;   viewStatePublisher(&#xA;     for: rocketLaunchUseCase.getRocketLaunchesNative(),&#xA;     in: &amp;amp;cancellables&#xA;   ) { self.rocketLaunch = $0 }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;both &lt;code&gt;proceed()&lt;/code&gt; and &lt;code&gt;viewStatePublisher(for: , in:)&lt;/code&gt; are the same logic under the hood, to handle general error, reactively retrying the function, etc.&lt;/p&gt; &#xA;&lt;p&gt;learn more: &lt;a href=&#34;https://github.com/rickclephas/KMP-NativeCoroutines&#34;&gt;https://github.com/rickclephas/KMP-NativeCoroutines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;expect-actual&#34;&gt;&lt;/a&gt; Expect and Actual&lt;/h2&gt; &#xA;&lt;p&gt;in KMM, there is a negative case when there&#39;s no support to share code for some feature in both ios and android, and it&#39;s expensive to write separately in each module&lt;/p&gt; &#xA;&lt;p&gt;so the solution is ✨&lt;code&gt;expect&lt;/code&gt; and &lt;code&gt;actual&lt;/code&gt;✨, we can write &lt;code&gt;expect&lt;/code&gt; inside &lt;code&gt;commonMain&lt;/code&gt; and write &#34; actual&#34; implementation with &lt;code&gt;actual&lt;/code&gt; inside &lt;code&gt;androidMain&lt;/code&gt; and &lt;code&gt;iosMain&lt;/code&gt; and then each module will use &lt;code&gt;expect&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nbsmobile/incio/raw/master/shared/src/commonMain/kotlin/com/nbs/kmm/sample/Platform.kt&#34;&gt;&lt;strong&gt;&lt;code&gt;commonMain/Platform.kt&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;expect fun getRequestHash(): String&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nbsmobile/incio/raw/master/shared/src/androidMain/kotlin/com/nbs/kmm/sample/Platform.kt&#34;&gt;&lt;strong&gt;&lt;code&gt;androidMain/Platform.kt&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;actual fun getRequestHash(): String {&#xA;  val key: String = &#34;NBS KMM Sample&#34;&#xA;  val timestamp = (System.currentTimeMillis() / 1000).toString()&#xA;  val algorithm: String = &#34;HmacSHA256&#34;&#xA;  val charset: Charset = Charset.forName(&#34;UTF-8&#34;)&#xA;&#xA;  val sha256Hmac: Mac = Mac.getInstance(algorithm)&#xA;  val secretKeySpec = SecretKeySpec(key.toByteArray(charset), algorithm)&#xA;  sha256Hmac.init(secretKeySpec)&#xA;  val hash: String = bytesToHex(sha256Hmac.doFinal(timestamp.toByteArray(charset))).orEmpty()&#xA;  logging { &#34;HASH ANDROID $hash&#34; }&#xA;  return hash&#xA;}&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nbsmobile/incio/raw/master/shared/src/iosMain/kotlin/com/nbs/kmm/sample/Platform.kt&#34;&gt;&lt;strong&gt;&lt;code&gt;iosMain/Platform.kt&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;actual fun getRequestHash(): String {&#xA;  val key = &#34;NBS KMM Sample&#34;&#xA;  val timestamp = NSDate().timeIntervalSince1970.toLong().toString()&#xA;  val hash = (timestamp as NSString).sha256Hmac(key = key)&#xA;  logging { &#34;HASH IOS $hash&#34; }&#xA;  return hash&#xA;}&#xA;&#xA;@OptIn(ExperimentalUnsignedTypes::class)&#xA;fun NSString.sha256Hmac(algorithm: CCHmacAlgorithm = kCCHmacAlgSHA256, key: String): String {&#xA;  val string = this.cStringUsingEncoding(encoding = NSUTF8StringEncoding)&#xA;  val stringLength = this.lengthOfBytesUsingEncoding(NSUTF8StringEncoding)&#xA;  val digestLength = CC_SHA256_DIGEST_LENGTH&#xA;  var result = UByteArray(size = digestLength)&#xA;  val keyString = (key as NSString).cStringUsingEncoding(encoding = NSUTF8StringEncoding)&#xA;  val keyLength = key.lengthOfBytesUsingEncoding(NSUTF8StringEncoding)&#xA;&#xA;  CCHmac(algorithm, keyString, keyLength, string, stringLength, result.refTo(0))&#xA;&#xA;  return stringFromResult(result, digestLength)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;yes, we can use &lt;code&gt;Foundation&lt;/code&gt;, &lt;code&gt;CoreCrypto&lt;/code&gt;, &lt;code&gt;CoreFoundation&lt;/code&gt; same as what we use in Xcode&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;project-structure&#34;&gt;&lt;/a&gt; Project Structure&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;shared&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;base&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cache&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sample&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;model&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;response&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;request&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;remote&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;SampleApi&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;SampleApiClient&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;di&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ios&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;feature&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;domain&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sample&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;model&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;mapper&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;SampleInteractor&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;SampleUseCase&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;utils&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eventbus&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;androidApp&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;base&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;di&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sample&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;theme&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;utils&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;iosApp&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Dependency&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;App&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Main&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Resources&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ReusableView&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Extensions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Utils&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Features&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Sample&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;Navigator&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Views&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ViewModel&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;build_config&#34;&gt;&lt;/a&gt; Build Config&lt;/h2&gt; &#xA;&lt;p&gt;You can setup Build Config for multiple Environment, Just add your build configuration at build.gradle on &lt;code&gt;shared&lt;/code&gt; in the &lt;code&gt;buildkonfig&lt;/code&gt; section like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;buildkonfig {&#xA;    packageName = &#34;com.nbs.kmm.sample&#34;&#xA;    objectName = &#34;NbsKmmSharedConfig&#34;&#xA;    exposeObjectWithName = &#34;NbsKmmSharedPublicConfig&#34;&#xA;&#xA;    // default config is required&#xA;    defaultConfigs {&#xA;        buildConfigField(STRING, &#34;BASE_URL&#34;, &#34;story-api.dicoding.dev&#34;)&#xA;        buildConfigField(STRING, &#34;BASE_URL_SPACEX&#34;, &#34;api.spacexdata.com&#34;)&#xA;    }&#xA;&#xA;    // config for staging&#xA;    defaultConfigs(&#34;staging&#34;) {&#xA;        buildConfigField(STRING, &#34;BASE_URL&#34;, &#34;story-api.dicoding.dev&#34;)&#xA;        buildConfigField(STRING, &#34;BASE_URL_SPACEX&#34;, &#34;api.spacexdata.com&#34;)&#xA;    }&#xA;&#xA;    // config for release&#xA;    defaultConfigs(&#34;release&#34;) {&#xA;        buildConfigField(STRING, &#34;BASE_URL&#34;, &#34;story-api.dicoding.dev&#34;)&#xA;        buildConfigField(STRING, &#34;BASE_URL_SPACEX&#34;, &#34;api.spacexdata.com&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And for changing the Environment just set it on &lt;code&gt;gradle.properties&lt;/code&gt; with &lt;code&gt;buildkonfig.flavor&lt;/code&gt; and assign the value with the Environment name that you want to use, for default config just let the &lt;code&gt;buildkonfig.flavor&lt;/code&gt; value to be empty&lt;/p&gt;</summary>
  </entry>
</feed>