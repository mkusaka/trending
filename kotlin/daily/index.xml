<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-24T01:47:41Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Ashinch/ReadYou</title>
    <updated>2022-06-24T01:47:41Z</updated>
    <id>tag:github.com,2022-06-24:/Ashinch/ReadYou</id>
    <link href="https://github.com/Ashinch/ReadYou" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a copy of Reeder, in order to give Android an RSS reader similar to Reeder, combines the interaction logic of Reeder with the design style of Material Design 3 (You).&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;200&#34; height=&#34;200&#34; style=&#34;display: block; border: 1px solid #f5f5f5; border-radius: 9999px;&#34; src=&#34;https://raw.githubusercontent.com/Ashinch/ReadYou/main/fastlane/metadata/android/en-US/images/icon.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/Ashinch/ReadYou?color=c3e7ff&amp;amp;style=flat-square&#34;&gt; &#xA; &lt;img alt=&#34;GitHub repo size&#34; src=&#34;https://img.shields.io/github/repo-size/Ashinch/ReadYou?color=c3e7ff&amp;amp;style=flat-square&#34;&gt; &#xA; &lt;img alt=&#34;GitHub last commit&#34; src=&#34;https://img.shields.io/github/last-commit/Ashinch/ReadYou?color=c3e7ff&amp;amp;style=flat-square&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://t.me/ReadYouApp&#34;&gt; &lt;img alt=&#34;Telegram&#34; src=&#34;https://img.shields.io/badge/Telegram-ReadYouApp-c3e7ff?logo=telegram&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &#xA; &lt;a target=&#34;_blank&#34; href=&#34;https://www.figma.com/file/ViBW8GbUgkTMmK6a80h8X1/Read-You?node-id=7028%3A23673&#34;&gt; &lt;img alt=&#34;Figma&#34; src=&#34;https://img.shields.io/badge/Figma-ReadYou-c3e7ff?logo=figma&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Read You&lt;/h1&gt; &#xA; &lt;p&gt;This is a copy of &lt;a href=&#34;https://reederapp.com/&#34;&gt;Reeder&lt;/a&gt;, in order to give Android an RSS reader similar to Reeder.&lt;/p&gt; &#xA; &lt;p&gt;English by DeepL&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/Ashinch/ReadYou/raw/main/README-de.md&#34;&gt;Deutsch&lt;/a&gt;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp; &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/Ashinch/ReadYou/raw/main/README-zh.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Ashinch/ReadYou/main/fastlane/metadata/android/en-US/images/startup.png&#34; width=&#34;19.2%&#34; alt=&#34;startup&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Ashinch/ReadYou/main/fastlane/metadata/android/en-US/images/feeds.png&#34; width=&#34;19.2%&#34; alt=&#34;startup&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Ashinch/ReadYou/main/fastlane/metadata/android/en-US/images/flow.png&#34; width=&#34;19.2%&#34; alt=&#34;startup&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Ashinch/ReadYou/main/fastlane/metadata/android/en-US/images/read.png&#34; width=&#34;19.2%&#34; alt=&#34;startup&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Ashinch/ReadYou/main/fastlane/metadata/android/en-US/images/settings.png&#34; width=&#34;19.2%&#34; alt=&#34;startup&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read You&lt;/strong&gt; combines the interaction logic of Reeder with the design style of &lt;a href=&#34;https://m3.material.io/&#34;&gt;Material Design 3 (You)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following are the progress made so far and the goals to be worked on in the near future:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Local&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Subscribe to Feed Links&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Import from OPML&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Article Sync&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Article Update Notification&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Parse Full Content&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Filter Unread and Starred&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Feed Grouping&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Localization&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Export as OPML&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Search for Articles&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Preference Settings&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Release APK&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Widget&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Fever API Support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Google Reader API Support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Inoreader API Support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;...&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The above features are only preliminary implementations and there may be unknown issues.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://f-droid.org/packages/me.ash.reader/&#34;&gt;&lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;or get the APK from the &lt;a href=&#34;https://github.com/Ashinch/ReadYou/releases&#34;&gt;GitHub release section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to preview the Read You app, you can get the &lt;strong&gt;preview version&lt;/strong&gt; of the APK file in &lt;a href=&#34;https://t.me/ReadYouApp&#34;&gt;Telegram&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read You&lt;/strong&gt; is implemented on Android&#39;s native &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt; architecture.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First you need to get the source code of &lt;strong&gt;Read You&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/Ashinch/ReadYou.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then open it via &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio (latest version)&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you click the &lt;code&gt;▶ Run&lt;/code&gt; button, it will be built and run automatically.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;In case of lag, please select Release version build.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kyant0/MusicYou&#34;&gt;MusicYou&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/muhrifqii/ParseRSS&#34;&gt;ParseRSS&lt;/a&gt;: &lt;a href=&#34;https://github.com/muhrifqii/ParseRSS/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dankito/Readability4J&#34;&gt;Readability4J&lt;/a&gt;: &lt;a href=&#34;https://github.com/dankito/Readability4J/raw/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mdewilde/opml-parser&#34;&gt;opml-parser&lt;/a&gt;: &lt;a href=&#34;https://github.com/mdewilde/opml-parser/raw/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ireward/compose-html&#34;&gt;compose-html&lt;/a&gt;: &lt;a href=&#34;https://github.com/ireward/compose-html/raw/main/LICENSE.txt&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rometools/rome&#34;&gt;Rome&lt;/a&gt;: &lt;a href=&#34;https://github.com/rometools/rome/raw/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/spacecowboy/Feeder&#34;&gt;Feeder&lt;/a&gt;: &lt;a href=&#34;https://gitlab.com/spacecowboy/Feeder/-/blob/master/LICENSE&#34;&gt;GPL v3.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Ashinch/ReadYou/raw/main/LICENSE&#34;&gt;GNU GPL v3.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kotlin/kotlinx-kover</title>
    <updated>2022-06-24T01:47:41Z</updated>
    <id>tag:github.com,2022-06-24:/Kotlin/kotlinx-kover</id>
    <link href="https://github.com/Kotlin/kotlinx-kover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kotlinx-Kover&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/docs/components-stability.html&#34;&gt;&lt;img src=&#34;https://kotl.in/badges/alpha.svg?sanitize=true&#34; alt=&#34;Kotlin Alpha&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/incubator.svg?sanitize=true&#34; alt=&#34;JetBrains incubator project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kover&lt;/strong&gt; - Gradle plugin for Kotlin code coverage agents: &lt;a href=&#34;https://github.com/JetBrains/intellij-coverage&#34;&gt;IntelliJ&lt;/a&gt; and &lt;a href=&#34;https://github.com/jacoco/jacoco&#34;&gt;JaCoCo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Minimal supported &lt;code&gt;Gradle&lt;/code&gt; version: &lt;code&gt;6.6&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#apply-plugin-to-a-single-project-build&#34;&gt;Apply plugin to a single-project build&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#applying-plugins-with-the-plugins-dsl&#34;&gt;Applying plugins with the plugins DSL&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#legacy-plugin-application-applying-plugins-with-the-buildscript-block&#34;&gt;Legacy Plugin Application: applying plugins with the buildscript block&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#apply-plugin-to-a-multi-project-build&#34;&gt;Apply plugin to a multi-project build&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#configuring-jvm-test-task&#34;&gt;Configuring JVM test task&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#configuring-merged-reports&#34;&gt;Configuring merged reports&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#configuring-project-reports&#34;&gt;Configuring project reports&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#configuring-entire-plugin&#34;&gt;Configuring entire plugin&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#verification&#34;&gt;Verification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#tasks&#34;&gt;Tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#implicit-plugin-dependencies&#34;&gt;Implicit plugin dependencies&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Collecting code coverage for &lt;code&gt;JVM&lt;/code&gt; test tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XML&lt;/code&gt; and &lt;code&gt;HTML&lt;/code&gt; report generation&lt;/li&gt; &#xA; &lt;li&gt;Support of &lt;code&gt;Kotlin/JVM&lt;/code&gt;, &lt;code&gt;Kotlin Multiplatform&lt;/code&gt; and mixed &lt;code&gt;Kotlin-Java&lt;/code&gt; sources with zero additional configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Kotlin Android&lt;/code&gt; support without the need to divide into build types and flavours&lt;/li&gt; &#xA; &lt;li&gt;Customizable filters for instrumented classes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Apply plugin to a single-project build&lt;/h3&gt; &#xA;&lt;h4&gt;Applying plugins with the plugins DSL&lt;/h4&gt; &#xA;&lt;p&gt;In top-level build file:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;     id(&#34;org.jetbrains.kotlinx.kover&#34;) version &#34;0.5.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;plugins {&#xA;    id &#39;org.jetbrains.kotlinx.kover&#39; version &#39;0.5.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Legacy Plugin Application: applying plugins with the buildscript block&lt;/h4&gt; &#xA;&lt;p&gt;In top-level build file:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;buildscript {&#xA;    repositories {&#xA;        mavenCentral()&#xA;    }&#xA;&#xA;    dependencies {&#xA;        classpath(&#34;org.jetbrains.kotlinx:kover:0.5.0&#34;)&#xA;    }&#xA;}&#xA;&#xA;apply(plugin = &#34;kover&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {&#xA;    repositories {&#xA;        mavenCentral()&#xA;    }&#xA;    dependencies {&#xA;        classpath &#39;org.jetbrains.kotlinx:kover:0.5.0&#39;&#xA;    }&#xA;}&#xA;  &#xA;apply plugin: &#39;kover&#39;    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Apply plugin to a multi-project build&lt;/h3&gt; &#xA;&lt;p&gt;To apply the plugin to all Gradle projects, you only need to apply the plugin to the top-level build file as shown &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#apply-plugin-to-a-single-project-build&#34;&gt;above&lt;/a&gt;. Applying the plugin to subprojects if you have already applied it to the root project will cause configuration errors.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Once applied, the Kover plugin can be used out of the box without additional configuration.&lt;/p&gt; &#xA;&lt;p&gt;However, in some cases, custom settings are needed - this can be done by configuring special extensions and tasks.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring JVM test task&lt;/h3&gt; &#xA;&lt;p&gt;If you need to disable or filter instrumentation for a test task, you may configure the Kover extension for it.&lt;/p&gt; &#xA;&lt;p&gt;For example, to configure a standard test task for Kotlin/JVM named &lt;code&gt;test&lt;/code&gt;, you need to add the following code to the build script of the project where this task is declared:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;tasks.test {&#xA;    extensions.configure(kotlinx.kover.api.KoverTaskExtension::class) {&#xA;        isDisabled = false&#xA;        binaryReportFile.set(file(&#34;$buildDir/custom/result.bin&#34;))&#xA;        includes = listOf(&#34;com.example.*&#34;)&#xA;        excludes = listOf(&#34;com.example.subpackage.*&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;tasks.test {&#xA;    kover {&#xA;        disabled = false&#xA;        binaryReportFile.set(file(&#34;$buildDir/custom/result.bin&#34;))&#xA;        includes = [&#39;com.example.*&#39;]&#xA;        excludes = [&#39;com.example.subpackage.*&#39;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;For other platforms (Android, Kotlin-Multiplatform) the names may differ and you may also have several test tasks, so you first need to determine the name of the required task.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example of configuring test task for build type &lt;code&gt;debug&lt;/code&gt; in Android:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;android {&#xA;    // other Android declarations&#xA;&#xA;    testOptions {&#xA;        unitTests.all {&#xA;            if (it.name == &#34;testDebugUnitTest&#34;) {&#xA;                it.extensions.configure(kotlinx.kover.api.KoverTaskExtension::class) {&#xA;                    isDisabled = false&#xA;                    binaryReportFile.set(file(&#34;$buildDir/custom/debug-report.bin&#34;))&#xA;                    includes = listOf(&#34;com.example.*&#34;)&#xA;                    excludes = listOf(&#34;com.example.subpackage.*&#34;)&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android {&#xA;    // other Android declarations&#xA;&#xA;    testOptions {&#xA;        unitTests.all {&#xA;            if (name == &#34;testDebugUnitTest&#34;) {&#xA;                kover {&#xA;                    disabled = false&#xA;                    binaryReportFile.set(file(&#34;$buildDir/custom/debug-report.bin&#34;))&#xA;                    includes = [&#39;com.example.*&#39;]&#xA;                    excludes = [&#39;com.example.subpackage.*&#39;]&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Configuring merged reports&lt;/h3&gt; &#xA;&lt;p&gt;Merged reports combine classpath and coverage stats from the project in which the plugin is applied and all of its subprojects.&lt;/p&gt; &#xA;&lt;p&gt;If you need to change the name of the XML report file or HTML directory, you may configure the corresponding tasks in the project in which the plugin is applied (usually this is the root project):&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;tasks.koverMergedHtmlReport {&#xA;    isEnabled = true                        // false to disable report generation&#xA;    htmlReportDir.set(layout.buildDirectory.dir(&#34;my-merged-report/html-result&#34;))&#xA;&#xA;    includes = listOf(&#34;com.example.*&#34;)            // inclusion rules for classes&#xA;    excludes = listOf(&#34;com.example.subpackage.*&#34;) // exclusion rules for classes&#xA;}&#xA;&#xA;tasks.koverMergedXmlReport {&#xA;    isEnabled = true                        // false to disable report generation&#xA;    xmlReportFile.set(layout.buildDirectory.file(&#34;my-merged-report/result.xml&#34;))&#xA;&#xA;    includes = listOf(&#34;com.example.*&#34;)            // inclusion rules for classes&#xA;    excludes = listOf(&#34;com.example.subpackage.*&#34;) // exclusion rules for classes  &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;tasks.koverMergedHtmlReport {&#xA;    enabled = true                          // false to disable report generation&#xA;    htmlReportDir.set(layout.buildDirectory.dir(&#34;my-merged-report/html-result&#34;))&#xA;&#xA;    includes = [&#39;com.example.*&#39;]             // inclusion rules for classes&#xA;    excludes = [&#39;com.example.subpackage.*&#39;]  // exclusion rules for classes&#xA;}&#xA;&#xA;tasks.koverMergedXmlReport {&#xA;    enabled = true                          // false to disable report generation&#xA;    xmlReportFile.set(layout.buildDirectory.file(&#34;my-merged-report/result.xml&#34;))&#xA;&#xA;    includes = [&#39;com.example.*&#39;]             // inclusion rules for classes&#xA;    excludes = [&#39;com.example.subpackage.*&#39;]  // exclusion rules for classes&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Configuring project reports&lt;/h3&gt; &#xA;&lt;p&gt;If you need to change the name of the XML report file or HTML directory for a specific project, you may configure the corresponding tasks in this project:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;tasks.koverHtmlReport {&#xA;    isEnabled = true                        // false to disable report generation&#xA;    htmlReportDir.set(layout.buildDirectory.dir(&#34;my-project-report/html-result&#34;))&#xA;&#xA;    includes = listOf(&#34;com.example.*&#34;)            // inclusion rules for classes&#xA;    excludes = listOf(&#34;com.example.subpackage.*&#34;) // exclusion rules for classes  &#xA;}&#xA;&#xA;tasks.koverXmlReport {&#xA;    isEnabled = true                        // false to disable report generation&#xA;    xmlReportFile.set(layout.buildDirectory.file(&#34;my-project-report/result.xml&#34;))&#xA;&#xA;    includes = listOf(&#34;com.example.*&#34;)            // inclusion rules for classes&#xA;    excludes = listOf(&#34;com.example.subpackage.*&#34;) // exclusion rules for classes &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;tasks.koverHtmlReport {&#xA;    enabled = true                          // false to disable report generation&#xA;    htmlReportDir.set(layout.buildDirectory.dir(&#34;my-project-report/html-result&#34;))&#xA;&#xA;    includes = [&#39;com.example.*&#39;]             // inclusion rules for classes&#xA;    excludes = [&#39;com.example.subpackage.*&#39;]  // exclusion rules for classes  &#xA;}&#xA;&#xA;tasks.koverXmlReport {&#xA;    enabled = true                          // false to disable report generation&#xA;    xmlReportFile.set(layout.buildDirectory.file(&#34;my-project-report/result.xml&#34;))&#xA;    includes = [&#39;com.example.*&#39;]             // inclusion rules for classes&#xA;    excludes = [&#39;com.example.subpackage.*&#39;]  // exclusion rules for classes  &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;By default, for tasks &lt;code&gt;koverHtmlReport&lt;/code&gt; and &lt;code&gt;koverXmlReport&lt;/code&gt; coverage is calculated only for the tests of the one project. If classes or functions are called from tests of another module, then you need to set a flag &lt;code&gt;runAllTestsForProjectTask&lt;/code&gt; for &lt;code&gt;KoverExtension&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#configuring-entire-plugin&#34;&gt;see&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;In this case, then running tasks &lt;code&gt;koverHtmlReport&lt;/code&gt; or &lt;code&gt;koverXmlReport&lt;/code&gt; will trigger the execution of all active tests from all projects!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may collect all project reports into one directory using the &lt;code&gt;koverCollectReports&lt;/code&gt; task. Also, you may specify a custom directory to collect project reports in the build directory of the project in which the plugin is applied (usually this is the root project):&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;tasks.koverCollectReports {&#xA;  outputDir.set(layout.buildDirectory.dir(&#34;all-projects-reports&#34;) )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;tasks.koverCollectReports {&#xA;  outputDir.set(layout.buildDirectory.dir(&#34;all-projects-reports&#34;) )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Configuring entire plugin&lt;/h3&gt; &#xA;&lt;p&gt;In the project in which the plugin is applied, you can configure the following properties:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;kover {&#xA;    isDisabled = false                      // true to disable instrumentation of all test tasks in all projects&#xA;    coverageEngine.set(kotlinx.kover.api.CoverageEngine.INTELLIJ) // change instrumentation agent and reporter&#xA;    intellijEngineVersion.set(&#34;1.0.656&#34;)    // change version of IntelliJ agent and reporter&#xA;    jacocoEngineVersion.set(&#34;0.8.7&#34;)        // change version of JaCoCo agent and reporter&#xA;    generateReportOnCheck = true            // false to do not execute `koverMergedReport` task before `check` task&#xA;    disabledProjects = setOf()              // setOf(&#34;project-name&#34;) or setOf(&#34;:project-name&#34;) to disable coverage for project with path `:project-name` (`:` for the root project)&#xA;    instrumentAndroidPackage = false        // true to instrument packages `android.*` and `com.android.*`&#xA;    runAllTestsForProjectTask = false       // true to run all tests in all projects if `koverHtmlReport`, `koverXmlReport`, `koverReport`, `koverVerify` or `check` tasks executed on some project&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;kover {&#xA;    disabled = false                        // true to disable instrumentation of all test tasks in all projects&#xA;    coverageEngine.set(kotlinx.kover.api.CoverageEngine.INTELLIJ) // change instrumentation agent and reporter&#xA;    intellijEngineVersion.set(&#39;1.0.656&#39;)    // change version of IntelliJ agent and reporter&#xA;    jacocoEngineVersion.set(&#39;0.8.7&#39;)        // change version of JaCoCo agent and reporter&#xA;    generateReportOnCheck = true            // false to do not execute `koverMergedReport` task before `check` task&#xA;    disabledProjects = []                   // [&#34;project-name&#34;] or [&#34;:project-name&#34;] to disable coverage for project with path `:project-name` (`:` for the root project)&#xA;    instrumentAndroidPackage = false        // true to instrument packages `android.*` and `com.android.*`&#xA;    runAllTestsForProjectTask = false       // true to run all tests in all projects if `koverHtmlReport`, `koverXmlReport`, `koverReport`, `koverVerify` or `check` tasks executed on some project&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Verification&lt;/h2&gt; &#xA;&lt;p&gt;You may specify one or more rules that check the values of the code coverage counters.&lt;/p&gt; &#xA;&lt;p&gt;Validation rules work for both types of agents.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The plugin currently only supports line counter values.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To add a rule to check coverage of the code of all projects, you need to add configuration to the project in which the plugin is applied (usually this is the root project):&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;tasks.koverMergedVerify {&#xA;    includes = listOf(&#34;com.example.*&#34;)            // inclusion rules for classes&#xA;    excludes = listOf(&#34;com.example.subpackage.*&#34;) // exclusion rules for classes&#xA;  &#xA;    rule {&#xA;        name = &#34;Minimum number of lines covered&#34;&#xA;        bound {&#xA;            minValue = 100000&#xA;            valueType = kotlinx.kover.api.VerificationValueType.COVERED_LINES_COUNT&#xA;        }&#xA;    }&#xA;    rule {&#xA;        // rule without a custom name&#xA;        bound {&#xA;            minValue = 1&#xA;            maxValue = 1000&#xA;            valueType = kotlinx.kover.api.VerificationValueType.MISSED_LINES_COUNT&#xA;        }&#xA;    }&#xA;    rule {&#xA;        name = &#34;Minimal line coverage rate in percent&#34;&#xA;        bound {&#xA;            minValue = 50&#xA;            // valueType is kotlinx.kover.api.VerificationValueType.COVERED_LINES_PERCENTAGE by default&#xA;       }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;tasks.koverMergedVerify {&#xA;    includes = [&#39;com.example.*&#39;]             // inclusion rules for classes&#xA;    excludes = [&#39;com.example.subpackage.*&#39;]  // exclusion rules for classes&#xA;  &#xA;    rule {&#xA;        name = &#34;Minimum number of lines covered&#34;&#xA;        bound {&#xA;            minValue = 100000&#xA;            valueType = &#39;COVERED_LINES_COUNT&#39;&#xA;        }&#xA;    }&#xA;    rule {&#xA;        // rule without a custom name&#xA;        bound {&#xA;            minValue = 1&#xA;            maxValue = 1000&#xA;            valueType = &#39;MISSED_LINES_COUNT&#39;&#xA;        }&#xA;    }&#xA;    rule {&#xA;        name = &#34;Minimal line coverage rate in percent&#34;&#xA;        bound {&#xA;            minValue = 50&#xA;            // valueType is &#39;COVERED_LINES_PERCENTAGE&#39; by default&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;To add rules for code coverage checks for the code of one specific project, you need to add a configuration to this project:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;tasks.koverVerify {&#xA;    includes = listOf(&#34;com.example.*&#34;)            // inclusion rules for classes&#xA;    excludes = listOf(&#34;com.example.subpackage.*&#34;) // exclusion rules for classes&#xA;&#xA;    rule {&#xA;        name = &#34;Minimal line coverage rate in percent&#34;&#xA;        bound {&#xA;            minValue = 75&#xA;       }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;tasks.koverVerify {&#xA;    includes = [&#39;com.example.*&#39;]             // inclusion rules for classes&#xA;    excludes = [&#39;com.example.subpackage.*&#39;]  // exclusion rules for classes&#xA;  &#xA;    rule {&#xA;        name = &#34;Minimal line coverage rate in percent&#34;&#xA;        bound {&#xA;            minValue = 75&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;By default, for the task &lt;code&gt;koverVerify&lt;/code&gt; coverage is calculated only for the tests of the one project. If classes or functions are called from tests of another module, then you need to set a flag &lt;code&gt;runAllTestsForProjectTask&lt;/code&gt; for &lt;code&gt;KoverExtension&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#configuring-entire-plugin&#34;&gt;see&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;In this case, if verification rules are added, then running tasks &lt;code&gt;koverVerify&lt;/code&gt; or &lt;code&gt;check&lt;/code&gt; will trigger the execution of all active tests from all projects!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tasks&lt;/h2&gt; &#xA;&lt;p&gt;The plugin, when applied, automatically creates tasks for the project in which it is applied (usually this is the root project):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;koverMergedHtmlReport&lt;/code&gt; - Generates code coverage HTML report for all enabled test tasks in all projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;koverMergedXmlReport&lt;/code&gt; - Generates code coverage XML report for all enabled test tasks in all projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;koverMergedReport&lt;/code&gt; - Executes both &lt;code&gt;koverMergedXmlReport&lt;/code&gt; and &lt;code&gt;koverMergedHtmlReport&lt;/code&gt; tasks. Executes before &lt;code&gt;check&lt;/code&gt; task if property &lt;code&gt;generateReportOnCheck&lt;/code&gt; for &lt;code&gt;KoverExtension&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-kover/main/#configuring-entire-plugin&#34;&gt;see&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;koverMergedVerify&lt;/code&gt; - Verifies code coverage metrics of all projects based on specified rules. Always executes before &lt;code&gt;check&lt;/code&gt; task.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;koverCollectReports&lt;/code&gt; - Collects all projects reports into one directory. Default directory is &lt;code&gt;$buildDir/reports/kover/projects&lt;/code&gt;, names for XML reports and dirs for HTML are projects names. Executing this task does not run &lt;code&gt;koverMergedXmlReport&lt;/code&gt; or &lt;code&gt;koverMergedHtmlReport&lt;/code&gt;, it only copies previously created reports if they exist to the output directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tasks that are created for all projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;koverHtmlReport&lt;/code&gt; - Generates code coverage HTML report for all enabled test tasks in one project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;koverXmlReport&lt;/code&gt; - Generates code coverage XML report for all enabled test tasks in one project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;koverReport&lt;/code&gt; - Executes both &lt;code&gt;koverXmlReport&lt;/code&gt; and &lt;code&gt;koverHtmlReport&lt;/code&gt; tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;koverVerify&lt;/code&gt; - Verifies code coverage metrics of one project based on specified rules. Always executes before &lt;code&gt;check&lt;/code&gt; task.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implicit plugin dependencies&lt;/h2&gt; &#xA;&lt;p&gt;While the plugin is being applied, the artifacts of the JaCoCo or IntelliJ toolkit are dynamically loaded. They are downloaded from the &lt;code&gt;mavenCentral&lt;/code&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;For the plugin to work correctly, you need to make sure that the &lt;code&gt;mavenCentral&lt;/code&gt; (or its mirror) is added to the repository list of the project in which the plugin is applied, if it doesn&#39;t already exist (usually this is the root project):&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {&#xA;  mavenCentral()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>KieronQuinn/TapTap</title>
    <updated>2022-06-24T01:47:41Z</updated>
    <id>tag:github.com,2022-06-24:/KieronQuinn/TapTap</id>
    <link href="https://github.com/KieronQuinn/TapTap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Port of the double tap on back of device feature from Android 12 to any Android 7.0+ device&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tap, Tap&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt;: &lt;a href=&#34;https://github.com/KieronQuinn/TapTap/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/KieronQuinn/TapTap.svg?maxAge=3600&amp;amp;label=download&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Tap, Tap is a port of the &lt;a href=&#34;https://www.xda-developers.com/google-pixel-android-11-double-tap-rear-gestures/&#34;&gt;double tap on back of device gesture&lt;/a&gt; from Pixels running Android 12 to any Android 7.0+ device*.&lt;/p&gt; &#xA;&lt;p&gt;Tap, Tap provides over 50 actions that can be run from double or triple taps on the back of your device, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Launching an app&lt;/li&gt; &#xA; &lt;li&gt;Launching a shortcut&lt;/li&gt; &#xA; &lt;li&gt;Toggling the flashlight&lt;/li&gt; &#xA; &lt;li&gt;Simulating button presses, such as home or back&lt;/li&gt; &#xA; &lt;li&gt;Running a Tasker task&lt;/li&gt; &#xA; &lt;li&gt;Quick Tap to Snap**&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;... and many more!&lt;/p&gt; &#xA;&lt;p&gt;The gesture can also be fully controlled, to only run under certain conditions, or run different actions in different scenarios; such as only when an app is running, the screen is off, or when listening to music (many more options are available).&lt;/p&gt; &#xA;&lt;p&gt;The sensitivity and response of the gesture can be controlled, picking from 8 &#34;models&#34;, trained for devices ranging in size from 5.7&#34; to 6.3&#34; in height, as well as finer control of the sensitivity of gesture detection, meaning there is a configuration that will work well for most devices.&lt;/p&gt; &#xA;&lt;p&gt;Tap, Tap also tries to be easy on the battery, only running the gesture detection when required, and integrates with the &#34;low power mode&#34; available on select Pixel devices, otherwise using the lower-power machine learning capabilities of devices, where available.&lt;/p&gt; &#xA;&lt;p&gt;* Your device must have an accelerometer and gyroscope.&lt;/p&gt; &#xA;&lt;p&gt;** Requires a compatible Pixel device or root, see &lt;a href=&#34;https://kieronquinn.co.uk/redirect/TapTap/qtts&#34;&gt;this page&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://i.imgur.com/oN3Iimo.png&#34;&gt;&lt;img src=&#34;https://i.imgur.com/oN3Iimol.png&#34; alt=&#34;Tap, Tap&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://streamable.com/4jd1mu&#34;&gt;Example video, showing launching the camera on double tap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kieronquinn.co.uk/redirect/TapTap/xda&#34;&gt;XDA thread&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting issues and feature requests&lt;/h2&gt; &#xA;&lt;p&gt;If you have encountered a crash or error, please make an issue on the &lt;a href=&#34;https://github.com/KieronQuinn/TapTap/issues&#34;&gt;Issues&lt;/a&gt; page. For crashes, include a crash report, which Tap, Tap should create for you and show a notification after a hard crash (enable the option on the &#34;More&#34; page first if you have disabled it). Before making an issue, make sure it has not been reported before, and does not fall under the &#34;service killed&#34; pinned issue, as those will be closed and ignored.&lt;/p&gt; &#xA;&lt;p&gt;To request a feature, either make an issue stating &#34;Feature Request&#34;, or post a reply in the XDA thread. Note that only relatively simple features will be considered, anything more complex including toggling specific system features should be done using the Tasker capabilities of Tap, Tap, as the app is not meant to be a Tasker replacement.&lt;/p&gt; &#xA;&lt;h2&gt;Building Tap, Tap&lt;/h2&gt; &#xA;&lt;p&gt;If you would prefer to build from source, Tap, Tap can be built like any other Android app, simply by opening the source in Android Studio and running the app.&lt;/p&gt;</summary>
  </entry>
</feed>