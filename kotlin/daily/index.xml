<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-06T01:37:28Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MohamedRejeb/Compose-Rich-Editor</title>
    <updated>2023-05-06T01:37:28Z</updated>
    <id>tag:github.com,2023-05-06:/MohamedRejeb/Compose-Rich-Editor</id>
    <link href="https://github.com/MohamedRejeb/Compose-Rich-Editor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Rich text editor library for both Jetpack Compose and Compose Multiplatform, fully customizable and supports the common rich text editor features.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Compose Rich Editor&lt;/h1&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; :richeditor-compose: Rich text editor library for both Jetpack Compose and Compose Multiplatform, fully customizable and supports the common rich text editor features. &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=24&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-24%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MohamedRejeb&#34;&gt;&lt;img alt=&#34;Profile&#34; src=&#34;https://raw.githubusercontent.com/MohamedRejeb/MohamedRejeb/main/badges/mohamedrejeb.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/41842296/235645097-6ddd1d96-0777-40dc-a18f-730e913b6461.png&#34; alt=&#34;Compose Rich Text Editor&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/41842296/235653455-2e4998c1-a24f-40c6-9709-77f23e027b8a.png&#34; alt=&#34;Compose Rich Text Editor&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Why Compose Rich Editor?&lt;/h2&gt; &#xA;&lt;p&gt;Compose Rich Editor is a rich text editor library for both Jetpack Compose and Compose Multiplatform, fully customizable and supports the common rich text editor features. It&#39;s built on top of &lt;code&gt;TextField&lt;/code&gt; and it&#39;s going to help you to create a rich text editor easily. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Including in your project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22com.mohamedrejeb.richeditor%22%20AND%20a:%22richeditor-compose%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.mohamedrejeb.richeditor/richeditor-compose&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;p&gt;Add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle.kts&lt;/code&gt; or &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation(&#34;com.mohamedrejeb.richeditor:richeditor-compose:$version&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;p&gt;Compose Rich Editor supports both Jetpack Compose and Compose Multiplatform projects,.&lt;/p&gt; &#xA;&lt;h3&gt;Create Rich Text Editor with Compose UI&lt;/h3&gt; &#xA;&lt;p&gt;We can easily use Compose Rich Editor by calling the &lt;code&gt;RichTextEditor&lt;/code&gt; Composable and pass a &lt;code&gt;RichTextValue&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var richTextValue by remember { mutableStateOf(RichTextValue()) }&#xA;&#xA;RichTextEditor(&#xA;    value = richTextValue,&#xA;    onValueChange = {&#xA;        richTextValue = it&#xA;    },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You may notice that it&#39;s similar to &lt;code&gt;TextField&lt;/code&gt;, it&#39;s because &lt;code&gt;RichTextEditor&lt;/code&gt;is built on top of &lt;code&gt;TextField&lt;/code&gt; and it&#39;s available with 5 composables:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;BasicRichTextEditor&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;RichTextEditor&lt;/code&gt; (material2)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;OutlinedRichTextEditor&lt;/code&gt; (material2)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;RichTextEditor&lt;/code&gt; (material3)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;OutlinedRichTextEditor&lt;/code&gt; (material3)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;All &lt;code&gt;RichTextEditor&lt;/code&gt; composables are fully customisable with same parameters that are available for a normal &lt;code&gt;TextField&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;TextFieldColors&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;keyboardOptions&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;keyboardActions&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;...&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Update Rich Text Styles&lt;/h3&gt; &#xA;&lt;p&gt;We have some available methods under &lt;code&gt;RichTextValue&lt;/code&gt; to update styles. If we use &lt;code&gt;addStyle&lt;/code&gt; method, we add a style. If we use &lt;code&gt;removeStyle&lt;/code&gt; method, we remove a style. Also, we can toggle a style using &lt;code&gt;toggleStyle&lt;/code&gt; method and all of these methods accepts a &lt;code&gt;RichTextStyle&lt;/code&gt; as a parameter. &lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var richTextValue by remember { mutableStateOf(RichTextValue()) }&#xA;&#xA;IconButton(&#xA;    onClick = {&#xA;        richTextValue = richTextValue.toggleStyle(RichTextStyle.Bold)&#xA;    }&#xA;) {&#xA;    Icon(&#xA;        imageVector = Icons.Outlined.FormatBold,&#xA;        contentDescription = &#34;Bold&#34;&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The added styles are going to be applied to the written text in the &lt;code&gt;RichTextEditor&lt;/code&gt;. Also, you can get the current styles using &lt;code&gt;richTextValue.currentStyles&lt;/code&gt;, you may need it to check if a certain style is added. &lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var richTextValue by remember { mutableStateOf(RichTextValue()) }&#xA;&#xA;IconButton(&#xA;    onClick = {&#xA;        richTextValue = richTextValue.toggleStyle(RichTextStyle.Bold)&#xA;    }&#xA;) {&#xA;    Icon(&#xA;        imageVector = Icons.Outlined.FormatBold,&#xA;        contentDescription = &#34;Bold&#34;,&#xA;        modifier = Modifier&#xA;            // Mark the icon with a background color is the style is selected&#xA;            .background(&#xA;                color = if (richTextValue.currentStyles.contains(RichTextStyle.Bold)) {&#xA;                    Color.Blue&#xA;                } else {&#xA;                    Color.Transparent&#xA;                }&#xA;            )&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can add and remove the styles easily, so you can build your own custom styles panel. Take a look on the sample to know more about creating your own styles panel.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Available Rich Text Styles&lt;/h3&gt; &#xA;&lt;p&gt;There are some available styles that you can use with &lt;code&gt;RichTextEditor&lt;/code&gt; and you can create your own custom styles: &lt;br&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Bold&lt;/h4&gt; &#xA;&lt;p&gt;We can add bold style to the text using &lt;code&gt;RichTextStyle.Bold&lt;/code&gt; style.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;richTextValue = richTextValue.addStyle(RichTextStyle.Bold)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Italic&lt;/h4&gt; &#xA;&lt;p&gt;We can add italic style to the text using &lt;code&gt;RichTextStyle.Italic&lt;/code&gt; style.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;richTextValue = richTextValue.addStyle(RichTextStyle.Italic)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Underline&lt;/h4&gt; &#xA;&lt;p&gt;We can add underline style to the text using &lt;code&gt;RichTextStyle.Underline&lt;/code&gt; style.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;richTextValue = richTextValue.addStyle(RichTextStyle.Underline)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Strikethrough&lt;/h4&gt; &#xA;&lt;p&gt;We can add strikethrough style to the text using &lt;code&gt;RichTextStyle.Strikethrough&lt;/code&gt; style.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;richTextValue = richTextValue.addStyle(RichTextStyle.Strikethrough)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TextColor&lt;/h4&gt; &#xA;&lt;p&gt;We can add text color style to the text using &lt;code&gt;RichTextStyle.TextColor&lt;/code&gt; style.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;richTextValue = richTextValue.addStyle(RichTextStyle.TextColor(Color.Red))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;BackgroundColor&lt;/h4&gt; &#xA;&lt;p&gt;We can add background color style to the text using &lt;code&gt;RichTextStyle.BackgroundColor&lt;/code&gt; style.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;richTextValue = richTextValue.addStyle(RichTextStyle.BackgroundColor(Color.Red))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;FontSize&lt;/h4&gt; &#xA;&lt;p&gt;We can add font size style to the text using &lt;code&gt;RichTextStyle.FontSize&lt;/code&gt; style.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;richTextValue = richTextValue.addStyle(RichTextStyle.FontSize(20.sp))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create a custom style&lt;/h4&gt; &#xA;&lt;p&gt;We can create a custom style with implementing &lt;code&gt;RichTextStyle&lt;/code&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;data class FirstCustomStyle(&#xA;    val color: Color, &#xA;    val background: Color&#xA;) : RichTextStyle {&#xA;&#xA;    override fun applyStyle(spanStyle: SpanStyle): SpanStyle {&#xA;        return SpanStyle(&#xA;            color = color, &#xA;            background = background&#xA;        )&#xA;    }&#xA;}&#xA;&#xA;richTextValue = richTextValue.addStyle(FirstCustomStyle(Color.Red, Color.Blue))&#xA;&#xA;object SecondCustomStyle : RichTextStyle {&#xA;    override fun applyStyle(spanStyle: SpanStyle): SpanStyle {&#xA;        return SpanStyle(&#xA;            color = Color.White,&#xA;            background = Color.Blue,&#xA;            fontSize = 20.sp,&#xA;            fontWeight = FontWeight.Bold,&#xA;            textDecoration = TextDecoration.Underline&#xA;        )&#xA;    }&#xA;}&#xA;&#xA;richTextValue = richTextValue.addStyle(SecondCustomStyle)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create Rich Text with Compose UI&lt;/h3&gt; &#xA;&lt;p&gt;The library provides a &lt;code&gt;RichText&lt;/code&gt; composable that can be used to display rich text. It&#39;s similar to &lt;code&gt;Text&lt;/code&gt; composable, but it supports rich text styles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var richTextValue by remember { mutableStateOf(RichTextValue()) }&#xA;&#xA;RichText(&#xA;    text = richTextValue&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Features&lt;/h2&gt; &#xA;&lt;p&gt;There are some supported features that you can use with &lt;code&gt;RichTextEditor&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bold&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Italic&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Underline&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Strikethrough&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Text color&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Background color&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Font size&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create a custom style&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Coming Features&lt;/h2&gt; &#xA;&lt;p&gt;The library still in its early stages, so there are some features that are coming soon:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add link&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add paragraph alignment (left, center, right)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add ordered and unordered lists&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add Blockquote&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add code block style&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add undo and redo&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add checkbox&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add image support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add video support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add audio support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support importing and exporting HTML&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support importing and exporting Markdown&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add add prebuilt styles panel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Web live demo&lt;/h2&gt; &#xA;&lt;p&gt;You can try out the web demo &lt;a href=&#34;https://compose-richeditor.netlify.app/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve found an error in this sample, please file an issue. &lt;br&gt; Feel free to help out by sending a pull request &lt;span&gt;❤️&lt;/span&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Find this library useful? &lt;span&gt;❤️&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Support it by joining &lt;strong&gt;&lt;a href=&#34;https://github.com/MohamedRejeb/Compose-Rich-Editor/stargazers&#34;&gt;stargazers&lt;/a&gt;&lt;/strong&gt; for this repository. &lt;span&gt;⭐&lt;/span&gt; &lt;br&gt; Also, &lt;strong&gt;&lt;a href=&#34;https://github.com/MohamedRejeb&#34;&gt;follow me&lt;/a&gt;&lt;/strong&gt; on GitHub for more libraries! 🤩&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;Copyright 2023 Mohamed Rejeb&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Forgo7ten/VulnerableApp</title>
    <updated>2023-05-06T01:37:28Z</updated>
    <id>tag:github.com,2023-05-06:/Forgo7ten/VulnerableApp</id>
    <link href="https://github.com/Forgo7ten/VulnerableApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;移动安全_漏洞靶场_Android应用层漏洞&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VulnerableApp&lt;/h1&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;Android应用层漏洞靶场，总结和复现一下自己学习过的漏洞。&lt;/p&gt; &#xA;&lt;p&gt;同时为了锻炼Android开发，采用了kotlin语言，编写了简单而丑陋且无用的界面😭。&lt;/p&gt; &#xA;&lt;h3&gt;项目结构&lt;/h3&gt; &#xA;&lt;p&gt;该项目为AndroidStudio项目，可通过AndroidStudio直接导入。&lt;/p&gt; &#xA;&lt;p&gt;项目中含有&lt;code&gt;:vulnerableapp&lt;/code&gt;和&lt;code&gt;:attackapp&lt;/code&gt;两个app模块，分别对应含漏洞的App和攻击的app。&lt;/p&gt; &#xA;&lt;p&gt;具体部分还是读源码叭，每个漏洞的代码还算蛮独立的。&lt;/p&gt; &#xA;&lt;h2&gt;漏洞列表&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;目前还在持续更新中，StarStar~&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Forgo7ten/VulnerableApp/main/assets/VulnerabilityDetails/&#34;&gt;&amp;gt;漏洞文档汇总&amp;lt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manifest安全 &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Forgo7ten/VulnerableApp/main/assets/VulnerabilityDetails/defining_components_not_implemented.md&#34;&gt;Manifest中定义组件未实现漏洞&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Forgo7ten/VulnerableApp/main/assets/VulnerabilityDetails/allow_backup_config.md&#34;&gt;应用数据备份配置不当漏洞&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Forgo7ten/VulnerableApp/main/assets/VulnerabilityDetails/allow_debug_config.md&#34;&gt;应用调试模式配置不当漏洞&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;通用组件安全 &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Forgo7ten/VulnerableApp/main/assets/VulnerabilityDetails/components_denial_service.md&#34;&gt;App通用型拒绝服务漏洞&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Provider组件安全 &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Forgo7ten/VulnerableApp/main/assets/VulnerabilityDetails/provider_improper_uri_authorization.md&#34;&gt;ContentProviderURI授权不当漏洞&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Forgo7ten/VulnerableApp/main/assets/VulnerabilityDetails/provider_directory_traversal.md&#34;&gt;ContentProvider文件目录遍历漏洞&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;WebView组件安全 &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Forgo7ten/VulnerableApp/main/assets/VulnerabilityDetails/webview_bypass_origin_policy.md&#34;&gt;应用克隆漏洞(webview部分)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Forgo7ten/VulnerableApp/main/assets/VulnerabilityDetails/webview_bypass_origin_policy.md&#34;&gt;污染cookie任意执行漏洞&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Forgo7ten/VulnerableApp/main/assets/VulnerabilityDetails/webview_bypass_origin_policy.md&#34;&gt;WebView File域同源策略绕过漏洞（低版本有效，未能复现）&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Forgo7ten/VulnerableApp/main/assets/VulnerabilityDetails/webview_js2native.md&#34;&gt;js2native漏洞&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;此外&lt;/h2&gt; &#xA;&lt;p&gt;新建了一个公众号，点个关注啦拜托🤪~&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://fastly.jsdelivr.net/gh/Forgo7ten/VulnerableApp@main/assets/link.png&#34; alt=&#34;微信公众号&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>