<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-18T01:38:41Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>puskal-khadka/TikTok-Compose</title>
    <updated>2023-05-18T01:38:41Z</updated>
    <id>tag:github.com,2023-05-18:/puskal-khadka/TikTok-Compose</id>
    <link href="https://github.com/puskal-khadka/TikTok-Compose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TikTok clone Android app built with jetpack compose following clean architecture &amp; modularization.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TikTok-Compose&lt;/h1&gt; &#xA;&lt;p&gt;TikTok clone app built with Jetpack Compose following latest modern android development trend. Data shown in the app is from local data source, you can replace that with your own server api.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/puskal-khadka/TikTok-Compose/main/screenshots/tiktokcompose_screenshot.jpg&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Click download button to get latest TikTok compose app&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/puskal-khadka/TikTok-Compose/releases/download/1.0.0/tiktok-compose.apk&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/puskal-khadka/TikTok-Compose/main/screenshots/download_button.png&#34; width=&#34;170&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;TechStack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://m3.material.io/&#34;&gt;Material 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/coroutines-overview.html&#34;&gt;Coroutine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google.github.io/accompanist/&#34;&gt;Accompanist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dagger.dev/hilt/&#34;&gt;Hilt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coil-kt.github.io/coil/&#34;&gt;Coil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/modularization&#34;&gt;Multi Module&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.gradle.org/current/userguide/kotlin_dsl.html&#34;&gt;Kotlin DSL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/media/media3&#34;&gt;Media 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/training/camerax&#34;&gt;CameraX&lt;/a&gt; and so on&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clean Architecture&lt;/li&gt; &#xA; &lt;li&gt;MVVM&lt;/li&gt; &#xA; &lt;li&gt;UDF (Unidirectional Data Flow)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Modularization&lt;/h2&gt; &#xA;&lt;p&gt;To achieve low coupling, high cohesion with maximum reusability &amp;amp; scalable code base, this project is modularized. This app consist of following modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;app&lt;/li&gt; &#xA; &lt;li&gt;feature&lt;/li&gt; &#xA; &lt;li&gt;data&lt;/li&gt; &#xA; &lt;li&gt;domain&lt;/li&gt; &#xA; &lt;li&gt;common&lt;/li&gt; &#xA; &lt;li&gt;core&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/puskal-khadka/TikTok-Compose/main/screenshots/tiktokcompose_modularization.jpg&#34; width=&#34;760&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;You are always welcome to contribute to this project. For contributing, feel free to &lt;a href=&#34;https://github.com/puskal-khadka/TikTok-Compose/issues/new/choose&#34;&gt;create an issue&lt;/a&gt; or submit a pull request.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2023 Puskal khadka&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;  http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>joreilly/Confetti</title>
    <updated>2023-05-18T01:38:41Z</updated>
    <id>tag:github.com,2023-05-18:/joreilly/Confetti</id>
    <link href="https://github.com/joreilly/Confetti" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KMM GraphQL based conference sample with Jetpack Compose Android, Compose for Wear and SwiftUI iOS clients along with GraphQL backend.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Confetti ðŸŽŠ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/kotlin-1.8.21-orange&#34; alt=&#34;kotlin-version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=dev.johnoreilly.confetti&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/7/78/Google_Play_Store_badge_EN.svg?sanitize=true&#34; alt=&#34;Get it on Google Play Store&#34; height=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/us/app/confetti/id1660211390&#34;&gt;&lt;img src=&#34;https://developer.apple.com/assets/elements/badges/download-on-the-app-store.svg?sanitize=true&#34; alt=&#34;Get it on App Store&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Kotlin Multiplatform GraphQL project (backend and clients) to allow viewing of conference information for a range of conferences.&lt;/p&gt; &#xA;&lt;p&gt;Includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SwiftUI iOS client&lt;/li&gt; &#xA; &lt;li&gt;Jetpack Compose Android client&lt;/li&gt; &#xA; &lt;li&gt;Compose for Desktop client (early version)&lt;/li&gt; &#xA; &lt;li&gt;Compose for Wear OS client (contributed by &lt;a href=&#34;https://github.com/yschimke&#34;&gt;https://github.com/yschimke&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android Auto (contributed by &lt;a href=&#34;https://github.com/cmota&#34;&gt;https://github.com/cmota&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apollographql/apollo-kotlin&#34;&gt;Apollo GraphQL&lt;/a&gt; based Kotlin Multiplatform shared code&lt;/li&gt; &#xA; &lt;li&gt;GraphQL backend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/joreilly/confetti/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=joreilly/confetti&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Related posts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://johnoreilly.dev/posts/swift-kotlin-viewmodel-kmm-comparison/&#34;&gt;Swift/Kotlin ViewModel alignment in a Kotlin Multiplatform project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://johnoreilly.dev/posts/kmm-viewmodel/&#34;&gt;Using KMM-ViewModel library to share VM between iOS and Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://johnoreilly.dev/posts/swiftui-compose-ios/&#34;&gt;Consuming Compose for iOS in a SwiftUI application&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Use Android Studio/IntelliJ to build/run Android client. Requires XCode 14 or later for iOS client.&lt;/p&gt; &#xA;&lt;h3&gt;Screenshots&lt;/h3&gt; &#xA;&lt;img width=&#34;1203&#34; alt=&#34;Screenshot 2023-04-02 at 14 28 02&#34; src=&#34;https://user-images.githubusercontent.com/6302/229355816-b1f6b769-4c7f-49a1-9fba-4c9cb1f6955d.png&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6302/227476725-edd577f5-2abd-4660-a777-decef84fbb9b.png&#34; alt=&#34;Tablet Screenshot of Confetti&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;Wear Screenshots of Confetti screens&#34; src=&#34;https://raw.githubusercontent.com/joreilly/Confetti/aaa91c53098754de5c568ec6611b7ab237d23bcb/wearApp/images/wearScreenshots.png&#34;&gt; &#xA;&lt;img width=&#34;1205&#34; alt=&#34;Desktop Screenshot of Confetti screens&#34; src=&#34;https://user-images.githubusercontent.com/6302/227615364-dd349253-483b-45a6-9090-cc8b932bef1f.png&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/joreilly/Confetti/main/androidApp/snapshot/walkthroughAndroidAuto.gif&#34; alt=&#34;Walkthrough of Confetti running on Android Auto&#34;&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;The API is available at &lt;a href=&#34;https://confetti-app.dev/graphiql&#34;&gt;https://confetti-app.dev/graphiql&lt;/a&gt; You can query the list of conferences with &lt;code&gt;conferences.id&lt;/code&gt; and chose what conference to query by passing a &lt;code&gt;&#34;conference&#34;&lt;/code&gt; HTTP header&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FasterXML/jackson-module-kotlin</title>
    <updated>2023-05-18T01:38:41Z</updated>
    <id>tag:github.com,2023-05-18:/FasterXML/jackson-module-kotlin</id>
    <link href="https://github.com/FasterXML/jackson-module-kotlin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Module that adds support for serialization/deserialization of Kotlin (http://kotlinlang.org) classes and data classes.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kotlin-1.5.x-blue.svg?sanitize=true&#34; alt=&#34;Kotlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.kotlinlang.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-kotlin%20slack-orange.svg?sanitize=true&#34; alt=&#34;Kotlin Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;Module that adds support for serialization/deserialization of &lt;a href=&#34;https://kotlinlang.org&#34;&gt;Kotlin&lt;/a&gt; classes and data classes. Previously a default constructor must have existed on the Kotlin object for Jackson to deserialize into the object. With this module, single constructor classes can be used automatically, and those with secondary constructors or static factories are also supported.&lt;/p&gt; &#xA;&lt;h1&gt;Status&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;release &lt;code&gt;2.15.1&lt;/code&gt; (for Jackson &lt;code&gt;2.15.x&lt;/code&gt;) &lt;a href=&#34;https://github.com/FasterXML/jackson-module-kotlin/actions?query=branch%3A2.14&#34;&gt;&lt;img src=&#34;https://github.com/FasterXML/jackson-module-kotlin/actions/workflows/main.yml/badge.svg?branch=2.14&#34; alt=&#34;GitHub Actions build&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;release &lt;code&gt;2.14.3&lt;/code&gt; (for Jackson &lt;code&gt;2.14.x&lt;/code&gt;) &lt;a href=&#34;https://github.com/FasterXML/jackson-module-kotlin/actions?query=branch%3A2.14&#34;&gt;&lt;img src=&#34;https://github.com/FasterXML/jackson-module-kotlin/actions/workflows/main.yml/badge.svg?branch=2.14&#34; alt=&#34;GitHub Actions build&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;release &lt;code&gt;2.13.5&lt;/code&gt; (for Jackson &lt;code&gt;2.13.x&lt;/code&gt;) &lt;a href=&#34;https://github.com/FasterXML/jackson-module-kotlin/actions?query=branch%3A2.13&#34;&gt;&lt;img src=&#34;https://github.com/FasterXML/jackson-module-kotlin/actions/workflows/main.yml/badge.svg?branch=2.13&#34; alt=&#34;GitHub Actions build&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Releases require that you have included Kotlin stdlib and reflect libraries already.&lt;/p&gt; &#xA;&lt;p&gt;Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;implementation &#34;com.fasterxml.jackson.module:jackson-module-kotlin:2.15.+&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.fasterxml.jackson.module&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;jackson-module-kotlin&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;2.15.1&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;For any Kotlin class or data class constructor, the JSON property names will be inferred from the parameters using Kotlin runtime type information.&lt;/p&gt; &#xA;&lt;p&gt;To use, just register the Kotlin module with your ObjectMapper instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// With Jackson 2.12 and later&#xA;import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper&#xA;...&#xA;val mapper = jacksonObjectMapper()&#xA;// or&#xA;import com.fasterxml.jackson.module.kotlin.registerKotlinModule&#xA;...&#xA;val mapper = ObjectMapper().registerKotlinModule()&#xA;// or&#xA;import com.fasterxml.jackson.module.kotlin.jsonMapper&#xA;import com.fasterxml.jackson.module.kotlin.kotlinModule&#xA;...&#xA;val mapper = jsonMapper {&#xA;  addModule(kotlinModule())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Jackson versions prior to 2.10â€“2.11&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import com.fasterxml.jackson.databind.json.JsonMapper&#xA;import com.fasterxml.jackson.module.kotlin.KotlinModule&#xA;...&#xA;val mapper = JsonMapper.builder().addModule(KotlinModule()).build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Jackson versions prior to 2.10&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import com.fasterxml.jackson.databind.ObjectMapper&#xA;import com.fasterxml.jackson.module.kotlin.KotlinModule&#xA;...&#xA;val mapper = ObjectMapper().registerModule(KotlinModule())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;A simple data class example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper&#xA;import com.fasterxml.jackson.module.kotlin.readValue&#xA;&#xA;data class MyStateObject(val name: String, val age: Int)&#xA;&#xA;...&#xA;val mapper = jacksonObjectMapper()&#xA;&#xA;val state = mapper.readValue&amp;lt;MyStateObject&amp;gt;(json)&#xA;// or&#xA;val state: MyStateObject = mapper.readValue(json)&#xA;// or&#xA;myMemberWithType = mapper.readValue(json)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All inferred types for the extension functions carry in full generic information (reified generics). Therefore, using &lt;code&gt;readValue()&lt;/code&gt; extension without the &lt;code&gt;Class&lt;/code&gt; parameter will reify the type and automatically create a &lt;code&gt;TypeReference&lt;/code&gt; for Jackson.&lt;/p&gt; &#xA;&lt;p&gt;Also, there are some convenient operator overloading extension functions for JsonNode inheritors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import com.fasterxml.jackson.databind.node.ArrayNode&#xA;import com.fasterxml.jackson.databind.node.ObjectNode&#xA;import com.fasterxml.jackson.databind.node.JsonNodeFactory&#xA;import com.fasterxml.jackson.module.kotlin.*&#xA;&#xA;// ...&#xA;val objectNode: ObjectNode = JsonNodeFactory.instance.objectNode()&#xA;objectNode.put(&#34;foo1&#34;, &#34;bar&#34;).put(&#34;foo2&#34;, &#34;baz&#34;).put(&#34;foo3&#34;, &#34;bax&#34;)&#xA;objectNode -= &#34;foo1&#34;&#xA;objectNode -= listOf(&#34;foo2&#34;)&#xA;println(objectNode.toString()) // {&#34;foo3&#34;:&#34;bax&#34;}&#xA;&#xA;// ...&#xA;val arrayNode: ArrayNode = JsonNodeFactory.instance.arrayNode()&#xA;arrayNode += &#34;foo&#34;&#xA;arrayNode += true&#xA;arrayNode += 1&#xA;arrayNode += 1.0&#xA;arrayNode += &#34;bar&#34;.toByteArray()&#xA;println(arrayNode.toString()) // [&#34;foo&#34;,true,1,1.0,&#34;YmFy&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;(NOTE: incomplete! Please submit corrections/additions via PRs!)&lt;/p&gt; &#xA;&lt;p&gt;Different &lt;code&gt;kotlin-core&lt;/code&gt; versions are supported by different Jackson Kotlin module minor versions. Here is an incomplete list of supported versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jackson 2.15.x: Kotlin-core 1.5 - 1.8&lt;/li&gt; &#xA; &lt;li&gt;Jackson 2.14.x: Kotlin-core 1.4 - 1.8&lt;/li&gt; &#xA; &lt;li&gt;Jackson 2.13.x: Kotlin-core 1.4 - 1.7&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Annotations&lt;/h1&gt; &#xA;&lt;p&gt;You can intermix non-field values in the constructor and &lt;code&gt;JsonProperty&lt;/code&gt; annotation in the constructor. Any fields not present in the constructor will be set after the constructor call. An example of these concepts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;   @JsonInclude(JsonInclude.Include.NON_EMPTY)&#xA;   class StateObjectWithPartialFieldsInConstructor(val name: String, @JsonProperty(&#34;age&#34;) val years: Int)    {&#xA;        @JsonProperty(&#34;address&#34;) lateinit var primaryAddress: String   // set after construction&#xA;        var createdDt: DateTime by Delegates.notNull()                // set after construction&#xA;        var neverSetProperty: String? = null                          // not in JSON so must be nullable with default&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that using &lt;code&gt;lateinit&lt;/code&gt; or &lt;code&gt;Delegates.notNull()&lt;/code&gt; will ensure that the value is never &lt;code&gt;null&lt;/code&gt; when read, while letting it be instantiated after the construction of the class.&lt;/p&gt; &#xA;&lt;h1&gt;Caveats&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;@JsonCreator&lt;/code&gt; annotation is optional unless you have more than one constructor that is valid, or you want to use a static factory method (which also must have &lt;code&gt;platformStatic&lt;/code&gt; annotation, e.g. &lt;code&gt;@JvmStatic&lt;/code&gt;). In these cases, annotate only one method as &lt;code&gt;JsonCreator&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Serializing a member or top-level Kotlin class that implements Iterator requires a workaround, see &lt;a href=&#34;https://github.com/FasterXML/jackson-module-kotlin/issues/4&#34;&gt;Issue #4&lt;/a&gt; for easy workarounds.&lt;/li&gt; &#xA; &lt;li&gt;If using proguard: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;kotlin.Metadata&lt;/code&gt; annotations may be stripped, preventing deserialization. Add a proguard rule to keep the &lt;code&gt;kotlin.Metadata&lt;/code&gt; class: &lt;code&gt;-keep class kotlin.Metadata { *; }&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If you&#39;re getting &lt;code&gt;java.lang.ExceptionInInitializerError&lt;/code&gt;, you may also need: &lt;code&gt;-keep class kotlin.reflect.** { *; }&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If you&#39;re still running into problems, you might also need to add a proguard keep rule for the specific classes you want to (de-)serialize. For example, if all your models are inside the package &lt;code&gt;com.example.models&lt;/code&gt;, you could add the rule &lt;code&gt;-keep class com.example.models.** { *; }&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Support for Kotlin Built-in classes&lt;/h1&gt; &#xA;&lt;p&gt;These Kotlin classes are supported with the following fields for serialization/deserialization (and other fields are hidden that are not relevant):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pair &lt;em&gt;(first, second)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Triple &lt;em&gt;(first, second, third)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;IntRange &lt;em&gt;(start, end)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;CharRange &lt;em&gt;(start, end)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;LongRange &lt;em&gt;(start, end)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(others are likely to work, but may not be tuned for Jackson)&lt;/p&gt; &#xA;&lt;h1&gt;Sealed classes without @JsonSubTypes&lt;/h1&gt; &#xA;&lt;p&gt;Subclasses can be detected automatically for sealed classes, since all possible subclasses are known at compile-time to Kotlin. This makes &lt;code&gt;com.fasterxml.jackson.annotation.JsonSubTypes&lt;/code&gt; redundant. A &lt;code&gt;com.fasterxml.jackson.annotation.@JsonTypeInfo&lt;/code&gt; annotation at the base-class is still necessary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;  @JsonTypeInfo(use = JsonTypeInfo.Id.NAME)&#xA;  sealed class SuperClass{&#xA;      class A: SuperClass()&#xA;      class B: SuperClass()&#xA;  }&#xA;&#xA;...&#xA;val mapper = jacksonObjectMapper()&#xA;val root: SuperClass = mapper.readValue(json)&#xA;when(root){&#xA;    is A -&amp;gt; &#34;It&#39;s A&#34;&#xA;    is B -&amp;gt; &#34;It&#39;s B&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;The Kotlin module may be given a few configuration parameters at construction time; see the &lt;a href=&#34;https://github.com/FasterXML/jackson-module-kotlin/raw/master/src/main/kotlin/com/fasterxml/jackson/module/kotlin/KotlinModule.kt&#34;&gt;inline documentation&lt;/a&gt; for details on what options are available and what they do.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val kotlinModule = KotlinModule.Builder()&#xA;    .enable(KotlinFeature.StrictNullChecks)&#xA;    .build()&#xA;val mapper = JsonMapper.builder()&#xA;    .addModule(kotlinModule)&#xA;    .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your &lt;code&gt;ObjectMapper&lt;/code&gt; is constructed in Java, there is a builder method provided for configuring these options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;KotlinModule kotlinModule = new KotlinModule.Builder()&#xA;        .strictNullChecks(true)&#xA;        .build();&#xA;ObjectMapper objectMapper = JsonMapper.builder()&#xA;        .addModule(kotlinModule)&#xA;        .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;Following developers have committer access to this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Author: Jayson Minard (@apatrida) wrote this module originally (no longer active)&lt;/li&gt; &#xA; &lt;li&gt;Active Maintainers: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Dmitry Spikhalskiy (@Spikhalskiy) -- since 2.14&lt;/li&gt; &#xA;   &lt;li&gt;Drew Stephens (@dinomite)&lt;/li&gt; &#xA;   &lt;li&gt;Vyacheslav Artemyev (@viartemev)&lt;/li&gt; &#xA;   &lt;li&gt;WrongWrong (@k163377) -- since 2.15&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Co-maintainers: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tatu Saloranta (@cowtowncoder)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may at-reference maintainers as necessary but please keep in mind that all maintenance work is strictly voluntary (no one gets paid to work on this or any other Jackson components) so there is no guarantee for timeliness of responses.&lt;/p&gt; &#xA;&lt;p&gt;All Pull Requests should be reviewed by at least one of active maintainers; bigger architectural/design questions should be agreed upon by majority of active maintainers.&lt;/p&gt; &#xA;&lt;h2&gt;Releases &amp;amp; Branches&lt;/h2&gt; &#xA;&lt;p&gt;This module follows the release schedule of the rest of Jacksonâ€”the current version is consistent across all Jackson components &amp;amp; modules. See the &lt;a href=&#34;https://github.com/FasterXML/jackson#actively-developed-versions&#34;&gt;jackson-databind README&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome any contributionsâ€”reports of issues, ideas for enhancements, and pull requests related to either of those.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/FasterXML/jackson/raw/master/CONTRIBUTING.md&#34;&gt;main Jackson contribution guidlines&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Branches&lt;/h3&gt; &#xA;&lt;p&gt;If you are going to write code, choose the appropriate base branch:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;2.14&lt;/code&gt; for bugfixes against the current stable version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2.15&lt;/code&gt; for additive functionality &amp;amp; features or &lt;a href=&#34;https://semver.org&#34;&gt;minor&lt;/a&gt;, backwards compatible changes to existing behavior to be included in the next minor version release&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt; for significant changes to existing behavior, which will be part of Jackson 3.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Failing tests&lt;/h3&gt; &#xA;&lt;p&gt;There are a number of tests for functionality that is broken, mostly in the &lt;a href=&#34;https://github.com/FasterXML/jackson-module-kotlin/tree/master/src/test/kotlin/com/fasterxml/jackson/module/kotlin/test/github/failing&#34;&gt;failing&lt;/a&gt; package but a few as part of other test suites. Instead of ignoring these tests (with JUnit&#39;s &lt;code&gt;@Ignore&lt;/code&gt; annotation) or excluding them from being run as part of automated testing, the tests are written to demonstrate the failure (either making a call that throws an exception or with an assertion that fails) but not fail the build, except if the underlying issue is fixed. This allows us to know when the tested functionality has been incidentally fixed by unrelated code changes.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/FasterXML/jackson-module-kotlin/tree/master/src/test/kotlin/com/fasterxml/jackson/module/kotlin/README.md&#34;&gt;tests readme&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>