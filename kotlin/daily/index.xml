<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-21T01:37:49Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>keluokeda/hs_tracker</title>
    <updated>2022-11-21T01:37:49Z</updated>
    <id>tag:github.com,2022-11-21:/keluokeda/hs_tracker</id>
    <link href="https://github.com/keluokeda/hs_tracker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An automatic Hearthstone tracker for Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hs_tracker&lt;/h1&gt; &#xA;&lt;p&gt;An automatic Hearthstone tracker for Android&lt;/p&gt; &#xA;&lt;h4&gt;炉石传说记牌器，支持Android12、Android13&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16809185/199713461-c0a16e10-e225-4c2a-894d-a1f4dfc51824.jpg&#34; alt=&#34;Screenshot_20220423-132616_Hearthstone&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16809185/201462989-9a826302-b1a7-4674-825c-bfd13711efc9.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;QQ群：825215274&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>romainguy/combo-breaker</title>
    <updated>2022-11-21T01:37:49Z</updated>
    <id>tag:github.com,2022-11-21:/romainguy/combo-breaker</id>
    <link href="https://github.com/romainguy/combo-breaker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Text layout for Compose to flow text around arbitrary shapes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Combo Breaker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/dev.romainguy/combo-breaker&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/dev.romainguy/combo-breaker/badge.svg?subject=combo-breaker&#34; alt=&#34;combo-breaker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/romainguy/combo-breaker/actions?query=workflow%3AAndroid&#34;&gt;&lt;img src=&#34;https://github.com/romainguy/combo-breaker/workflows/Android/badge.svg?sanitize=true&#34; alt=&#34;Android build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Composable widget for Jetpack Compose that allows to flow text around arbitrary shapes over multiple columns. The &lt;code&gt;TextFlow&lt;/code&gt; composable behaves as a &lt;code&gt;Box&lt;/code&gt; layout and will automatically flow the text content around its children.&lt;/p&gt; &#xA;&lt;p&gt;For instance, the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;TextFlow(&#xA;    SampleText,&#xA;    style = TextStyle(fontSize = 14.sp),&#xA;    columns = 2&#xA;) {&#xA;    Image(&#xA;        bitmap = letterT.asImageBitmap(),&#xA;        contentDescription = &#34;&#34;,&#xA;        modifier = Modifier&#xA;            .flowShape(FlowType.OutsideEnd)&#xA;    )&#xA;&#xA;    Image(&#xA;        bitmap = badgeBitmap.asImageBitmap(),&#xA;        contentDescription = &#34;&#34;,&#xA;        modifier = Modifier&#xA;            .align(Alignment.Center)&#xA;            .flowShape(margin = 6.dp)&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will produce this result:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romainguy/combo-breaker/main/art/screenshot_default_shapes.png&#34; alt=&#34;Flow around rectangular shapes&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see, any child of &lt;code&gt;TextFlow&lt;/code&gt; allows text to flow around a rectangular shape of the same dimensions of the child. The &lt;code&gt;flowShape&lt;/code&gt; modifier is used to control where text flows around the shape (to the right/end of the T) and around both the left and right sides of the landscape photo (default behavior). In addition, you can define a margin around the shape.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;flowShape&lt;/code&gt; modifier also lets you specify a specific shape instead of a default rectangle. This can be done by passing a &lt;code&gt;Path&lt;/code&gt; or a lambda that returns a &lt;code&gt;Path&lt;/code&gt;. The lambda alternative is useful when you need to create a &lt;code&gt;Path&lt;/code&gt; based on the dimensions of the &lt;code&gt;TextFlow&lt;/code&gt; or the dimensions of its child.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of a &lt;code&gt;TextFlow&lt;/code&gt; using non-rectangular shapes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val microphoneShape = microphoneBitmap.toContour(alphaThreshold = 0.5f).asComposePath()&#xA;val badgeShape = badgeShape.toContour(alphaThreshold = 0.5f).asComposePath()&#xA;&#xA;TextFlow(&#xA;    SampleText,&#xA;    style = TextStyle(fontSize = 14.sp),&#xA;    columns = 2&#xA;) {&#xA;    Image(&#xA;        bitmap = microphoneBitmap.asImageBitmap(),&#xA;        contentDescription = &#34;&#34;,&#xA;        modifier = Modifier&#xA;            .offset { Offset(-microphoneBitmap.width / 4.5f, 0.0f).round() }&#xA;            .flowShape(FlowType.OutsideEnd, 6.dp, microphoneShape)&#xA;    )&#xA;&#xA;    Image(&#xA;        bitmap = badgeBitmap.asImageBitmap(),&#xA;        contentDescription = &#34;&#34;,&#xA;        modifier = Modifier&#xA;            .align(Alignment.Center)&#xA;            .flowShape(FlowType.Outside, 6.dp, badgeShape)&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the extension &lt;code&gt;Bitmap.toContour&lt;/code&gt; provided by this library, a shape can be extracted from a bitmap and used as the flow shape for the desired child:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romainguy/combo-breaker/main/art/screenshot_arbitrary_shapes.png&#34; alt=&#34;Flow around non-rectangular shapes&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Combo Breaker is compatible with API 29+.&lt;/p&gt; &#xA;&lt;h2&gt;Maven&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {&#xA;    // ...&#xA;    mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;    implementation &#39;dev.romainguy:combo-breaker:0.2.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations and planned work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backport to earlier API levels.&lt;/li&gt; &#xA; &lt;li&gt;Optimizations!&lt;/li&gt; &#xA; &lt;li&gt;More comprehensive &lt;code&gt;TextFlowLayoutResult&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Paths with multiple contours are treated as a single shape. A future feature will allow such paths to be treated as multiple shapes.&lt;/li&gt; &#xA; &lt;li&gt;Only one &lt;code&gt;TextStyle&lt;/code&gt; is supported. Support for multiple text styles (at least one per paragraph) is planned.&lt;/li&gt; &#xA; &lt;li&gt;Add support to ellipsize the last line when the entire text cannot fit in the layout area.&lt;/li&gt; &#xA; &lt;li&gt;Add support for text-relative placement of flow shapes.&lt;/li&gt; &#xA; &lt;li&gt;Implement margins support without relying on &lt;code&gt;Path.op&lt;/code&gt; which can be excessively expensive with complex paths.&lt;/li&gt; &#xA; &lt;li&gt;Reduce allocations during the layout phase.&lt;/li&gt; &#xA; &lt;li&gt;BiDi text hasn&#39;t been tested yet, and probably doesn&#39;t work properly (RTL layouts are however supported for the placement of flow shapes and the handling of columns).&lt;/li&gt; &#xA; &lt;li&gt;Improve performance of contours extraction from an image (could be multi-threaded for instance).&lt;/li&gt; &#xA; &lt;li&gt;Support flowing text inside shapes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/romainguy/combo-breaker/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Attribution&lt;/h2&gt; &#xA;&lt;p&gt;The render of the microphone was made possible thanks to &lt;a href=&#34;https://skfb.ly/6AKHx&#34;&gt;RCA 44-BX Microphone&lt;/a&gt; by Tom Seddon, licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons Attribution&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Sample text taken from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hyphen&#34;&gt;Wikipedia Hyphen article&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>