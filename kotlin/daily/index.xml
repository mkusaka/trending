<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-21T03:15:51Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Suzhelan/TXHook</title>
    <updated>2024-04-21T03:15:51Z</updated>
    <id>tag:github.com,2024-04-21:/Suzhelan/TXHook</id>
    <link href="https://github.com/Suzhelan/TXHook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;腾讯QQ协议分析工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TXHook 腾讯QQ协议分析工具&lt;/h1&gt; &#xA;&lt;h2&gt;本人代为开源 原作者 &lt;a href=&#34;https://github.com/fuqiuluo&#34;&gt;伏秋洛fuqiuluo&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;运行事项&lt;/h2&gt; &#xA;&lt;p&gt;该软件适合在安卓8.0以上系统运行，理论支持安卓7.0以上&lt;/p&gt; &#xA;&lt;h2&gt;已实现功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;获取ShareKey\PublicKey\D2\A2...&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;主动拦截固定Ecdh密钥及版本&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;对Jce\Protobuf的自动分析&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;过滤抓包，支持高级过滤（长按抓包页面的搜索栏展示/隐藏图标）&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;功能计划&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;与PC端主流工具对接&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;一键合成对应语言协议源码&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;劫持并篡改设备信息&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;劫持TLV\MD5\TEA代码&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用到的项目&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/TarsCloud/Tars&#34;&gt;Tars&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/xuexiangjys/XUI&#34;&gt;XUI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/smuyyh/JsonViewer&#34;&gt;JsonViewer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/topjohnwu/MagiskManager&#34;&gt;MagiskManager&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Cuberto/flashy-tabbar-android&#34;&gt;TabBar&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;本Demo仅供学习交流使用，请下载后24小时内删除。本Demo所以功能严禁用于任何违法违规用途，仅供对目标管理员准许的地址测试，其他用途产生的一切违法行为、后果或纠纷与开发者无关。&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>lodev09/react-native-true-sheet</title>
    <updated>2024-04-21T03:15:51Z</updated>
    <id>tag:github.com,2024-04-21:/lodev09/react-native-true-sheet</id>
    <link href="https://github.com/lodev09/react-native-true-sheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The true native bottom sheet 💩&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Native True Sheet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lodev09/react-native-true-sheet/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/lodev09/react-native-true-sheet/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/lodev09/react-native-true-sheet&#34; alt=&#34;GitHub Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dw/%40lodev09%2Freact-native-true-sheet&#34; alt=&#34;NPM Downloads&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The true native bottom sheet 💩&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lodev09/react-native-true-sheet/main/preview.gif&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Implemented in the native realm.&lt;/li&gt; &#xA; &lt;li&gt;✅ &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; your pure JS, (re)animated view (might integrate in the future 👀)&lt;/li&gt; &#xA; &lt;li&gt;✅ Clean, fast, and lightweight.&lt;/li&gt; &#xA; &lt;li&gt;✅ Handles your &lt;em&gt;Scrolling&lt;/em&gt; needs, natively.&lt;/li&gt; &#xA; &lt;li&gt;✅ Handles your &lt;em&gt;Footer&lt;/em&gt; needs, natively.&lt;/li&gt; &#xA; &lt;li&gt;✅ Handles your &lt;em&gt;Keyboard&lt;/em&gt; needs, natively.&lt;/li&gt; &#xA; &lt;li&gt;✅ Asynchronus &lt;code&gt;ref&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lodev09/react-native-true-sheet/main/#methods&#34;&gt;methods&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;✅ Bonus! &lt;a href=&#34;https://raw.githubusercontent.com/lodev09/react-native-true-sheet/main/#blurtint&#34;&gt;Blur&lt;/a&gt; support on IOS 😎&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn add @lodev09/react-native-true-sheet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i @lodev09/react-native-true-sheet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This package is not compatible with &lt;a href=&#34;https://docs.expo.dev/get-started/expo-go/&#34;&gt;Expo Go&lt;/a&gt;. Use this with &lt;a href=&#34;https://docs.expo.dev/workflow/continuous-native-generation/&#34;&gt;Expo CNG&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { TrueSheet } from &#34;@lodev09/react-native-true-sheet&#34;&#xA;&#xA;// ...&#xA;&#xA;const sheet = useRef&amp;lt;TrueSheet&amp;gt;(null)&#xA;&#xA;const openSheet = async () =&amp;gt; {&#xA;  await sheet.current?.present()&#xA;  console.log(&#39;horray! sheet has been presented 💩&#39;)&#xA;}&#xA;&#xA;return (&#xA;  &amp;lt;View&amp;gt;&#xA;    &amp;lt;Button onPress={openSheet} title=&#34;Open Sheet&#34; /&amp;gt;&#xA;    &amp;lt;TrueSheet&#xA;      ref={sheet}&#xA;      sizes={[&#39;auto&#39;, &#39;large&#39;]}&#xA;      cornerRadius={24}&#xA;    &amp;gt;&#xA;      // ...&#xA;    &amp;lt;/TrueSheet&amp;gt;&#xA;  &amp;lt;/View&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;Props available for &lt;code&gt;TrueSheet&lt;/code&gt;. Extends &lt;code&gt;ViewProps&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;🍎&lt;/th&gt; &#xA;   &lt;th&gt;🤖&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sizes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lodev09/react-native-true-sheet/main/#sheetsize&#34;&gt;&lt;code&gt;SheetSize[]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[&#34;medium&#34;, &#34;large&#34;]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Array of sizes you want the sheet to support. Maximum of &lt;em&gt;&lt;strong&gt;3 sizes&lt;/strong&gt;&lt;/em&gt; only! &lt;strong&gt;&lt;em&gt;collapsed&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;half-expanded&lt;/em&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;em&gt;expanded&lt;/em&gt;&lt;/strong&gt;. Example: &lt;code&gt;size={[&#34;auto&#34;, &#34;60%&#34;, &#34;large&#34;]}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;The name to reference this sheet. It has to be &lt;strong&gt;&lt;em&gt;unique&lt;/em&gt;&lt;/strong&gt;. You can then present this sheet globally using its name.&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backgroundColor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ColorValue&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;white&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The sheet&#39;s background color.&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cornerRadius&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;the sheet corner radius.&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maxHeight&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Overrides &lt;code&gt;&#34;large&#34;&lt;/code&gt; or &lt;code&gt;&#34;100%&#34;&lt;/code&gt; height.&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contentContainerStyle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StyleProp&amp;lt;ViewStyle&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Optional content container styles.&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FooterComponent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ComponentType&amp;lt;...&amp;gt; | ReactElement&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;A component that floats at the bottom of the sheet. Accepts a functional &lt;code&gt;Component&lt;/code&gt; or &lt;code&gt;ReactElement&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dismissible&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If set to &lt;code&gt;false&lt;/code&gt;, the sheet will prevent interactive dismissal via dragging or clicking outside of it.&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grabber&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shows a grabber (or handle). Native on IOS and styled &lt;code&gt;View&lt;/code&gt; on Android.&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grabberProps&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lodev09/react-native-true-sheet/main/#truesheetgrabberprops&#34;&gt;&lt;code&gt;TrueSheetGrabberProps&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Overrides the grabber props for android.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;blurTint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lodev09/react-native-true-sheet/main/#blurtint&#34;&gt;&lt;code&gt;BlurTint&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;The blur effect style on IOS. Overrides &lt;code&gt;backgroundColor&lt;/code&gt; if set. Example: &lt;code&gt;&#34;light&#34;&lt;/code&gt;, &lt;code&gt;&#34;dark&#34;&lt;/code&gt;, etc.&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;scrollRef&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;RefObject&amp;lt;...&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;The main scrollable ref that the sheet should handle on IOS.&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Methods&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const sheet = useRef&amp;lt;TrueSheet&amp;gt;(null)&#xA;&#xA;const resize = () =&amp;gt; {&#xA;  sheet.current?.resize(1)&#xA;}&#xA;&#xA;const dismiss = () =&amp;gt; {&#xA;  sheet.current?.dismiss()&#xA;}&#xA;&#xA;return (&#xA;  &amp;lt;View&amp;gt;&#xA;    &amp;lt;Button onPress={resize} title=&#34;Resize to 80%&#34; /&amp;gt;&#xA;    &amp;lt;Button onPress={dismiss} title=&#34;Dimiss&#34; /&amp;gt;&#xA;    &amp;lt;TrueSheet sizes={[&#39;auto&#39;, &#39;80%&#39;]} ref={sheet}&amp;gt;&#xA;      // ...&#xA;    &amp;lt;/TrueSheet&amp;gt;&#xA;  &amp;lt;/View&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Parameters&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;present&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;index: number = 0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Present the modal sheet. Optionally accepts a size &lt;code&gt;index&lt;/code&gt;. See &lt;code&gt;sizes&lt;/code&gt; prop.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;resize&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;index: number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Resizes the sheet programmatically by &lt;code&gt;index&lt;/code&gt;. This is an alias of the &lt;code&gt;present(index)&lt;/code&gt; method.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dismiss&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Dismisses the sheet.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Static Methods&lt;/h3&gt; &#xA;&lt;p&gt;You can also call the above methods statically without having access to a sheet&#39;s &lt;code&gt;ref&lt;/code&gt;. This is particularly useful when you want to present a sheet from anywhere.&lt;/p&gt; &#xA;&lt;p&gt;The API is similar to the ref methods except for the required &lt;code&gt;name&lt;/code&gt; prop.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;TrueSheet.present(&#39;SHEET-NAME&#39;)&#xA;TrueSheet.dismiss(&#39;SHEET-NAME&#39;)&#xA;TrueSheet.resize(&#39;SHEET-NAME&#39;, 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// Define the sheet as usual&#xA;&amp;lt;TrueSheet name=&#34;my-sheet&#34;&amp;gt;&#xA;  // ...&#xA;&amp;lt;/TrueSheet&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;// Somewhere in your screen&#xA;const presentMySheet = async () =&amp;gt; {&#xA;  await TrueSheet.present(&#39;my-sheet&#39;)&#xA;  console.log(&#39;🎉&#39;)&#xA;}&#xA;&#xA;return (&#xA;  &amp;lt;Button onPress={presentMySheet} /&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const handleSizeChange = (info: SizeInfo) =&amp;gt; {&#xA;  console.log(info)&#xA;}&#xA;&#xA;return (&#xA;  &amp;lt;TrueSheet onSizeChange={handleSizeChange} sizes={[&#39;auto&#39;, &#39;80%&#39;]} ref={sheet}&amp;gt;&#xA;    // ...&#xA;  &amp;lt;/TrueSheet&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Parameters&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onPresent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lodev09/react-native-true-sheet/main/#sizeinfo&#34;&gt;&lt;code&gt;SizeInfo&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when the sheet has been presented. Comes with the size index and value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onDismiss&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Called when the sheet has been dismissed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onSizeChange&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lodev09/react-native-true-sheet/main/#sizeinfo&#34;&gt;&lt;code&gt;SizeInfo&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when the size of the sheet has changed. Either by dragging or presenting programatically. Comes with the size index and value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Types&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;SheetSize&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;TrueSheet sizes={[&#39;auto&#39;, &#39;80%&#39;, &#39;large&#39;]}&amp;gt;&#xA;  // ...&#xA;&amp;lt;/TrueSheet&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;🍎&lt;/th&gt; &#xA;   &lt;th&gt;🤖&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;auto&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Auto resize based on content height.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;16+&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;small&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Translates to 25%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;16+&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;medium&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Translates to 50%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;15+&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;large&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Translates to 100%&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;${number}%&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fixed height in %&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;16+&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fixed height&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;em&gt;16+&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;code&gt;auto&lt;/code&gt; is not guaranteed to be accurate if your content depends on various rendering logic. Experiment with it and try to keep your content size as fixed as possible.&lt;/p&gt; &#xA; &lt;p&gt;Alternatively, you can programmatically call &lt;a href=&#34;https://raw.githubusercontent.com/lodev09/react-native-true-sheet/main/#methods&#34;&gt;&lt;code&gt;resize&lt;/code&gt;&lt;/a&gt; to adjust the sheet size on-the-fly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;code&gt;TrueSheetGrabberProps&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Grabber props to be used for android grabber or handle.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;visible&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Is grabber visible.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ColorValue&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;rgba(73,69,79,0.4)&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Grabber color according to M3 specs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;height&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Grabber height according to M3 specs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;width&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Grabber width according to M3 specs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;topOffset&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Grabber top position offset.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;code&gt;BlurTint&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Blur tint that is mapped into native values in IOS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;TrueSheet blurTint=&#34;dark&#34;&amp;gt;&#xA;  // ...&#xA;&amp;lt;/TrueSheet&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;light&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;dark&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;default&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;extraLight&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;regular&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;prominent&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemUltraThinMaterial&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemThinMaterial&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemMaterial&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemThickMaterial&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemChromeMaterial&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemUltraThinMaterialLight&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemThinMaterialLight&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemMaterialLight&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemThickMaterialLight&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemChromeMaterialLight&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemUltraThinMaterialDark&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemThinMaterialDark&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemMaterialDark&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemThickMaterialDark&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;systemChromeMaterialDark&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;code&gt;SizeInfo&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Object&lt;/code&gt; that comes with some events.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;{&#xA;  index: 1,&#xA;  value: 69&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;index&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The size index from the provided sizes. See &lt;code&gt;sizes&lt;/code&gt; prop.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;value&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The actual height value of the size.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;jest&lt;/code&gt;, simply mock the entire package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;jest.mock(&#39;@lodev09/react-native-true-sheet&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Presenting a sheet on top of an existing sheet on &lt;strong&gt;IOS&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;On IOS, presenting a sheet on top of an existing sheet will cause error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Attempt to present &amp;lt;TrueSheet.TrueSheetViewController: 0x11829f800&amp;gt; on &amp;lt;UIViewController: 0x10900eb10&amp;gt; (from &amp;lt;RNSScreen: 0x117dbf400&amp;gt;) which is already presenting &amp;lt;TrueSheet.TrueSheetViewController: 0x11a0b9200&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are &lt;em&gt;two&lt;/em&gt; ways to resolve this.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Dismiss the &#34;parent&#34; sheet first &lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const presentSheet2 = async () =&amp;gt; {&#xA;  await sheet1.current?.dismiss() // Wait for sheet 1 to dismiss ✅&#xA;  await sheet2.current?.present() // Sheet 2 will now present 🎉&#xA;}&#xA;&#xA;return (&#xA;  &amp;lt;&amp;gt;&#xA;    &amp;lt;TrueSheet ref={sheet1}&amp;gt;&#xA;      &amp;lt;Button onPress={presentSheet2} title=&#34;Present Sheet 2&#34; /&amp;gt;&#xA;      // ...&#xA;    &amp;lt;/TrueSheet&amp;gt;&#xA;&#xA;    &amp;lt;TrueSheet ref={sheet2}&amp;gt;&#xA;      // ...&#xA;    &amp;lt;/TrueSheet&amp;gt;&#xA;  &amp;lt;/&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Define the 2nd sheet within the &#34;parent&#34; sheet. IOS handles this automatically by default 😎. &lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const presentSheet2 = async () =&amp;gt; {&#xA;  await sheet2.current?.present() // Sheet 2 will now present 🎉&#xA;}&#xA;&#xA;return (&#xA;  &amp;lt;TrueSheet ref={sheet1}&amp;gt;&#xA;    &amp;lt;Button onPress={presentSheet2} title=&#34;Present Sheet 2&#34; /&amp;gt;&#xA;&#xA;    // ...&#xA;&#xA;    &amp;lt;TrueSheet ref={sheet2}&amp;gt;&#xA;      // ...&#xA;    &amp;lt;/TrueSheet&amp;gt;&#xA;  &amp;lt;/TrueSheet&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Handling &lt;code&gt;ScrollView&lt;/code&gt; on &lt;strong&gt;Android&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;On Android, &lt;code&gt;nestedScrollEnabled&lt;/code&gt; needs to be enabled so that scrolling works when the sheet is expanded to its &lt;code&gt;maxHeight&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;TrueSheet ref={sheet}&amp;gt;&#xA;  &amp;lt;ScrollView nestedScrollEnabled&amp;gt;&#xA;    // ...&#xA;  &amp;lt;/ScrollView&amp;gt;&#xA;&amp;lt;/TrueSheet&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;react-native-gesture-handler&lt;/code&gt; on &lt;strong&gt;Android&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;On Android, RNGH does not work by default because modals are not located under React Native Root view in native hierarchy. To fix that, components need to be wrapped with &lt;code&gt;GestureHandlerRootView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { GestureHandlerRootView } from &#39;react-native-gesture-handler&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;return (&#xA;  &amp;lt;TrueSheet ref={sheet}&amp;gt;&#xA;    &amp;lt;GestureHandlerRootView&amp;gt;&#xA;      // ...&#xA;    &amp;lt;/GestureHandlerRootView&amp;gt;&#xA;  &amp;lt;/TrueSheet&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integrating &lt;code&gt;@react-navigation/native&lt;/code&gt; on &lt;strong&gt;IOS&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;On IOS, navigating to a &lt;a href=&#34;https://reactnavigation.org&#34;&gt;React Navigation&lt;/a&gt; screen from within the Sheet can cause issues. To resolve this, dismiss the sheet before navigating!&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;const sheet = useRef&amp;lt;TrueSheet&amp;gt;(null)&#xA;&#xA;const navigate = async () =&amp;gt; {&#xA;  await sheet.current?.dismiss() // wait for the sheet to dismiss ✅&#xA;  navigation.navigate(&#39;SomeScreen&#39;) // navigate to the screen 🎉&#xA;}&#xA;&#xA;return (&#xA;  &amp;lt;TrueSheet ref={sheet}&amp;gt;&#xA;    &amp;lt;Button onPress={navigate} title=&#34;Navigate to SomeScreen&#34; /&amp;gt;&#xA;    // ...&#xA;  &amp;lt;/TrueSheet&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Weird layout render&lt;/h3&gt; &#xA;&lt;p&gt;The sheet does not have control over how React Native renders components and may lead to rendering issues. To resolve this, try to minimize the use of &lt;code&gt;flex=1&lt;/code&gt; in your content styles. Instead, use fixed &lt;code&gt;height&lt;/code&gt; or employ &lt;code&gt;flexGrow&lt;/code&gt;, &lt;code&gt;flexBasis&lt;/code&gt;, etc., to manage your layout requirements.&lt;/p&gt; &#xA;&lt;h2&gt;v1 Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inline sheet&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test with RN new architecture&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Reanimated integration(?)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/lodev09/react-native-true-sheet/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to learn how to contribute to the repository and the development workflow.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>