<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-26T01:37:48Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RookieTree/DaMaiHelper</title>
    <updated>2023-05-26T01:37:48Z</updated>
    <id>tag:github.com,2023-05-26:/RookieTree/DaMaiHelper</id>
    <link href="https://github.com/RookieTree/DaMaiHelper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;大麦抢票辅助&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DaMaiHelper&lt;/h1&gt; &#xA;&lt;p&gt;大麦抢票辅助（只抢待开抢中的）&lt;br&gt; 默认抢五月天深圳场&lt;br&gt; 注:抢不到不负责哈😁😁😁，本人只是试试手&lt;br&gt; 大佬们可以自己下代码去修改哈&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;体验地址（蒲公英）&lt;/h2&gt; &#xA;&lt;img src=&#34;蒲公英地址.png&#34; height=&#34;30%&#34; width=&#34;30%&#34;&gt; &#xA;&lt;h2&gt;注意：一定要提前选好场次、价格还有观影人，收藏到想看&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/RookieTree/DaMaiHelper/master/xkan.png&#34; height=&#34;30%&#34; width=&#34;30%&#34;&gt; &#xA;&lt;h2&gt;操作步骤&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;先去演唱会主页预选好场次、价格还有观演人，点击想看&lt;/li&gt; &#xA; &lt;li&gt;（可选）手机后台杀掉大麦app任务&lt;/li&gt; &#xA; &lt;li&gt;打开辅助app，给于对应权限&lt;/li&gt; &#xA; &lt;li&gt;（可选）输入歌手名字，默认五月天&lt;/li&gt; &#xA; &lt;li&gt;点击开抢按钮即可&lt;/li&gt; &#xA; &lt;li&gt;如果点击开抢后，页面未开始自动跳转，可手动杀死大麦，再次切到辅助app点击开抢&lt;br&gt; 如果想终止辅助app，点击右上角悬浮窗&amp;lt;点击停止&amp;gt;即可&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;演示操作视频&lt;/h2&gt; &#xA;&lt;img src=&#34;操作视频.gif&#34; height=&#34;30%&#34; width=&#34;30%&#34;&gt; ps:因为演示中，我没有预选场次、价格，所以需要手动选一下</summary>
  </entry>
  <entry>
    <title>spember/spring-shoestore</title>
    <updated>2023-05-26T01:37:48Z</updated>
    <id>tag:github.com,2023-05-26:/spember/spring-shoestore</id>
    <link href="https://github.com/spember/spring-shoestore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An example of Clean Architecture in Spring. Demo app for Spring 2023&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spring Shoe Store&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A demonstration app built for Spring I/O 2023 to present Clean Architecture principles in Spring&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;As mentioned, this repository is meant to show off a key techniques to attempt to achieve Clean Architecture:&lt;/p&gt; &#xA;&lt;h3&gt;Individual Components&lt;/h3&gt; &#xA;&lt;p&gt;The application is broken into three individually tested and built Gradle modules; something the &lt;a href=&#34;https://www.oreilly.com/library/view/clean-architecture-a/9780134494272/&#34;&gt;Book&lt;/a&gt; would call &#39;Components&#39;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;store-core&lt;/strong&gt;: contains all the Entities, Use Cases, DTOs, Interfaces, and other classes necessary to fulfill the business logic. Has no direct dependencies on the other components, nor any external systems (e.g. a database). It is ignorant and agnostic of anything that is not Core Business Rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;store-details&lt;/strong&gt;: contains the implementation &#34;Details&#34;; the interface implementations responsible for actually communicating with external systems, performing I/O, etc... as well as supporting classes necessary to make that work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;store-app&lt;/strong&gt;: contains the Spring components, configuration, application lifecycle concerns, and is currently the location of HTTP (e.g. controllers.). This component is the place of actual &#39;integration&#39;; where the app comes together. It is also the location of Integration tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The three are meant to be illustrative or a starting point; in a real application you may have more than three. For example, the current &lt;code&gt;details&lt;/code&gt; component could be broken up into multiple ones, each for redis, postgres, etc. The http concerns could be extracted.&lt;/p&gt; &#xA;&lt;h3&gt;Dependency directionality&lt;/h3&gt; &#xA;&lt;p&gt;All dependencies should point &#39;inward&#39;, that is, everything depends on &lt;code&gt;Core&lt;/code&gt;, but &lt;code&gt;Core&lt;/code&gt; has no knowledge of the other components. Practically, this is largely achieved by liberal use of Interfaces and small data classes contained within the Core package. Other components are thus dependent on core by adhering to the interface.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design&#34;&gt;Repository pattern&lt;/a&gt; is also heavily used.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Be advised that this code is truly, truly horrendous. It should be used for architecturalreference - or entertainment - purposes only&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Encapsulation and Isolation&lt;/h3&gt; &#xA;&lt;p&gt;Concerns of the Component should be contained within the Component.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the details component marks any non-interface-implementation classes with the &lt;code&gt;internal&lt;/code&gt; keyword. In Kotlin, this ensures that the class can not be used by jars / artifacts outside the current module. This pairs &lt;em&gt;nicely&lt;/em&gt; with the notion of using multiple components like we do here.&lt;/li&gt; &#xA; &lt;li&gt;The http layer in &lt;code&gt;store-app&lt;/code&gt; contains its own API objects, and translates the internal DTOs to an API-consumer-dedicated object. This also reduces the cross-boundary dependencies; without these API objects the api consumers would be directly dependent on classes contained in core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Yes this results in more mapping code, but this is a small price to pay for the loose coupling we achieve with this architectural style.&lt;/p&gt; &#xA;&lt;h3&gt;Ignorance of Environment&lt;/h3&gt; &#xA;&lt;p&gt;The system has no notion of traditional environments (e.g. DEV, TEST, PROD, etc). Instead, it utilizes environment variables to adjust configuration. This means that the system can use Integration Tests with real external dependencies just as easily as if it were running locally, or in a CI pipeline, or in a k8s cluster.&lt;/p&gt; &#xA;&lt;p&gt;Speaking of testing, this application makes heavy use of &lt;a href=&#34;https://www.testcontainers.org/&#34;&gt;TestContainers&lt;/a&gt;, creating a real Postgres, Redis, and simulates AWS using the wonderful &lt;a href=&#34;https://localstack.cloud/&#34;&gt;Localstack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run the tests, try &lt;code&gt;./gradlew clean test&lt;/code&gt;. To demonstrate the advantages of the repository pattern, this repo is set up to swap out the storage of Orders from using Postgres to using DynamoDb. To do so:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Verify the current tests work (&lt;code&gt;./gradlew test&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Find the &lt;code&gt;getOrderRepository()&lt;/code&gt; Bean function located in &lt;code&gt;CoreConfig&lt;/code&gt; within the &lt;code&gt;store-app&lt;/code&gt; component.&lt;/li&gt; &#xA; &lt;li&gt;Replace the &lt;code&gt;return PostgresOrderRepository(jdbcTemplate)&lt;/code&gt; line with &lt;code&gt;return DynamoDbOrderRepository(dynamoDbClient)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the tests once again (&lt;code&gt;./gradlew clean test&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The tests should still pass!&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>