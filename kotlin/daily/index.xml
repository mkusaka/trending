<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:34:34Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>videolan/vlc-android</title>
    <updated>2022-09-25T01:34:34Z</updated>
    <id>tag:github.com,2022-09-25:/videolan/vlc-android</id>
    <link href="https://github.com/videolan/vlc-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;VLC for Android, Android TV and ChromeOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VLC for Android&lt;/h1&gt; &#xA;&lt;p&gt;This is the official &lt;strong&gt;Android&lt;/strong&gt; port of &lt;a href=&#34;https://videolan.org/vlc/&#34;&gt;VLC&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;VLC on Android plays all the same files as the classical version of VLC, and features a media database for Audio and Video files and stream.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/#project-structure&#34;&gt;Project Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/#libvlc&#34;&gt;LibVLC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/#build&#34;&gt;Build&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/#build-application&#34;&gt;Build Application&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/#build-libvlc&#34;&gt;Build LibVLC&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/#contribute&#34;&gt;Contribute&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/#pull-requests&#34;&gt;Pull requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/#issues-and-feature-requests&#34;&gt;Issues and feature requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;p&gt;Here are the current folders of vlc-android project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;extension-api : Application extensions SDK (not released yet)&lt;/li&gt; &#xA; &lt;li&gt;application : Android application source code, organized by modules.&lt;/li&gt; &#xA; &lt;li&gt;buildsystem : Build scripts, CI and maven publication configuration&lt;/li&gt; &#xA; &lt;li&gt;libvlc : LibVLC gradle module, VLC source code will be cloned in &lt;code&gt;vlc/&lt;/code&gt; at root level.&lt;/li&gt; &#xA; &lt;li&gt;medialibrary : Medialibrary gradle module&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LibVLC&lt;/h2&gt; &#xA;&lt;p&gt;LibVLC is the Android library embedding VLC engine, which provides a lot of multimedia features, like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Play every media file formats, every codec and every streaming protocols&lt;/li&gt; &#xA; &lt;li&gt;Hardware and efficient decoding on every platform, up to 8K&lt;/li&gt; &#xA; &lt;li&gt;Network browsing for distant filesystems (SMB, FTP, SFTP, NFS...) and servers (UPnP, DLNA)&lt;/li&gt; &#xA; &lt;li&gt;Playback of Audio CD, DVD and Bluray with menu navigation&lt;/li&gt; &#xA; &lt;li&gt;Support for HDR, including tonemapping for SDR streams&lt;/li&gt; &#xA; &lt;li&gt;Audio passthrough with SPDIF and HDMI, including for Audio HD codecs, like DD+, TrueHD or DTS-HD&lt;/li&gt; &#xA; &lt;li&gt;Support for video and audio filters&lt;/li&gt; &#xA; &lt;li&gt;Support for 360 video and 3D audio playback, including Ambisonics&lt;/li&gt; &#xA; &lt;li&gt;Ability to cast and stream to distant renderers, like Chromecast and UPnP renderers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://images.videolan.org/images/libvlc_stack.png&#34; alt=&#34;LibVLC stack&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use our LibVLC module to power your own Android media player. Download the &lt;code&gt;.aar&lt;/code&gt; directly from &lt;a href=&#34;https://search.maven.org/artifact/org.videolan.android/libvlc-all&#34;&gt;Maven&lt;/a&gt; or build from source.&lt;/p&gt; &#xA;&lt;p&gt;Have a look at our &lt;a href=&#34;https://code.videolan.org/videolan/libvlc-android-samples&#34;&gt;sample codes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;VLC for Android is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/COPYING&#34;&gt;GPLv2 (or later)&lt;/a&gt;. Android libraries make this, de facto, a GPLv3 application.&lt;/p&gt; &#xA;&lt;p&gt;VLC engine &lt;em&gt;(LibVLC)&lt;/em&gt; for Android is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/videolan/vlc-android/master/libvlc/COPYING.LIB&#34;&gt;LGPLv2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Native libraries are published on bintray. So you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build the application and get libraries via gradle dependencies (JVM build only)&lt;/li&gt; &#xA; &lt;li&gt;Build the whole app (LibVLC + Medialibrary + Application)&lt;/li&gt; &#xA; &lt;li&gt;Build LibVLC only, and get an .aar package&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build Application&lt;/h3&gt; &#xA;&lt;p&gt;VLC-Android build relies on gradle build modes :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Release&lt;/code&gt; &amp;amp; &lt;code&gt;Debug&lt;/code&gt; will get LibVLC and Medialibrary from Bintray, and build application source code only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SignedRelease&lt;/code&gt; also, but it will allow you to sign application apk with a local keystore.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dev&lt;/code&gt; will build build LibVLC, Medialibrary, and then build the application with these binaries. (via build scripts only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build LibVLC&lt;/h3&gt; &#xA;&lt;p&gt;You will need a recent Linux distribution to build VLC. It should work with Windows 10, and macOS, but there is no official support for this.&lt;/p&gt; &#xA;&lt;h4&gt;Setup&lt;/h4&gt; &#xA;&lt;p&gt;Check our &lt;a href=&#34;https://wiki.videolan.org/AndroidCompile/&#34;&gt;AndroidCompile wiki page&lt;/a&gt;, especially for build dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Here are the essential points:&lt;/p&gt; &#xA;&lt;p&gt;On Debian/Ubuntu, install the required dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install automake ant autopoint cmake build-essential libtool-bin \&#xA;    patch pkg-config protobuf-compiler ragel subversion unzip git \&#xA;    openjdk-8-jre openjdk-8-jdk flex python wget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setup the build environment: Set &lt;code&gt;$ANDROID_SDK&lt;/code&gt; to point to your Android SDK directory &lt;code&gt;export ANDROID_SDK=/path/to/android-sdk&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;$ANDROID_NDK&lt;/code&gt; to point to your Android NDK directory &lt;code&gt;export ANDROID_NDK=/path/to/android-ndk&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, you are ready to build!&lt;/p&gt; &#xA;&lt;h4&gt;Build&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;buildsystem/compile.sh -l -a &amp;lt;ABI&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;ABI can be &lt;code&gt;arm&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;, &lt;code&gt;x86&lt;/code&gt;, &lt;code&gt;x86_64&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt; for a multi-abis build&lt;/p&gt; &#xA;&lt;p&gt;You can do a library release build with &lt;code&gt;-r&lt;/code&gt; argument&lt;/p&gt; &#xA;&lt;h4&gt;Medialibrary&lt;/h4&gt; &#xA;&lt;p&gt;Build Medialibrary with &lt;code&gt;-ml&lt;/code&gt; instead of &lt;code&gt;-l&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;VLC is a libre and open source project, we welcome all contributions.&lt;/p&gt; &#xA;&lt;p&gt;Just respect our &lt;a href=&#34;https://wiki.videolan.org/CoC/&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Pull requests&lt;/h3&gt; &#xA;&lt;p&gt;Pull requests must be proposed on our &lt;a href=&#34;https://code.videolan.org/videolan/vlc-android/&#34;&gt;gitlab server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So you must create an account, fork vlc-android project, and propose your merge requests from it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Except for translations&lt;/strong&gt;, see the section below.&lt;/p&gt; &#xA;&lt;h3&gt;Translations&lt;/h3&gt; &#xA;&lt;p&gt;You can help improving translations too by joining the &lt;a href=&#34;https://www.transifex.com/yaron/vlc-trans/dashboard/&#34;&gt;transifex vlc project&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Translations merge requests are then generated from transifex work.&lt;/p&gt; &#xA;&lt;h2&gt;Issues and feature requests&lt;/h2&gt; &#xA;&lt;p&gt;VLC for Android bugtracker is hosted on &lt;a href=&#34;https://code.videolan.org/videolan/vlc-android/issues&#34;&gt;VideoLAN gitlab&lt;/a&gt;&lt;br&gt; Please look for existing issues and provide as much useful details as you can (e.g. vlc app version, device and Android version).&lt;/p&gt; &#xA;&lt;p&gt;A template is provided, please use it!&lt;/p&gt; &#xA;&lt;p&gt;Issues without relevant information will be ignored, we cannot help in this case.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android mailing list: &lt;a href=&#34;mailto:android@videolan.org&#34;&gt;android@videolan.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;bugtracker: &lt;a href=&#34;https://code.videolan.org/videolan/vlc-android/issues&#34;&gt;https://code.videolan.org/videolan/vlc-android/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IRC: &lt;em&gt;#videolan&lt;/em&gt; channel on &lt;a href=&#34;http://freenode.net/&#34;&gt;freenode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VideoLAN forum: &lt;a href=&#34;https://forum.videolan.org/&#34;&gt;https://forum.videolan.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>PierfrancescoSoffritti/android-youtube-player</title>
    <updated>2022-09-25T01:34:34Z</updated>
    <id>tag:github.com,2022-09-25:/PierfrancescoSoffritti/android-youtube-player</id>
    <link href="https://github.com/PierfrancescoSoffritti/android-youtube-player" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YouTube Player library for Android and Chromecast, stable and customizable.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;android-youtube-player&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/PierfrancescoSoffritti/android-youtube-player&#34;&gt;&lt;img src=&#34;https://travis-ci.com/PierfrancescoSoffritti/android-youtube-player.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/details/1/4322&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Android%20Arsenal-android--youtube--player-brightgreen.svg?style=flat&#34; alt=&#34;android arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pierfrancescosoffritti.github.io/android-youtube-player/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-website-brightgreen.svg?sanitize=true&#34; alt=&#34;website&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/intent/tweet?text=A%20new%20YouTube%20Player%20library%20for%20Android%20and%20Chromecast,%20stable%20and%20customizable&amp;amp;url=https://github.com/PierfrancescoSoffritti/android-youtube-player&amp;amp;via=psoffritti&amp;amp;hashtags=opensource,youtubeplayer,androiddev&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;share on twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;180px&#34; src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/android-youtube-player_512x512.png&#34; title=&#34;android-youtube-player logo&#34;&gt; &#xA;&lt;p&gt;android-youtube-player is a stable and customizable open source YouTube player for Android. It provides a simple View that can be easily integrated in every Activity/Fragment.&lt;/p&gt; &#xA;&lt;p&gt;The library is a wrapper over the &lt;a href=&#34;https://developers.google.com/youtube/iframe_api_reference&#34;&gt;IFrame Player API&lt;/a&gt;, which runs inside of a WebView. Therefore the YouTube app is not required on the user&#39;s device and there are &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#does-this-library-breaks-youtube-terms-of-service&#34;&gt;no issues with YouTube Terms of Service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The UI of the player is 100% customizable. The UI can be &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#create-your-own-custom-ui&#34;&gt;completely replaced with a custom UI&lt;/a&gt;. However this should be done with caution, as altering the UI of the IFrame player might break YouTube&#39;s terms of service.&lt;/p&gt; &#xA;&lt;p&gt;This library also provides a &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#chromecast-extension-library&#34;&gt;Chromecast YouTube player&lt;/a&gt;, that you can use to cast YouTube videos from your app to a Chromecast device.&lt;/p&gt; &#xA;&lt;h2&gt;Why does this library exist?&lt;/h2&gt; &#xA;&lt;p&gt;The official library provided by Google to integrate YouTube videos in Android apps is the &lt;a href=&#34;https://developers.google.com/youtube/android/player/&#34;&gt;YouTube Android Player API&lt;/a&gt;. Unfortunately this library is quite buggy (&lt;a href=&#34;https://code.google.com/p/gdata-issues/issues/detail?id=4395&#34;&gt;some bugs are 5+ years old&lt;/a&gt;) and has receive no updates in years. I personally found it quite unreliable and therefore impossible to use in production.&lt;/p&gt; &#xA;&lt;p&gt;This, added to its limited options for customization and lack of Chromecast support, lead me to the development of this open source library.&lt;/p&gt; &#xA;&lt;p&gt;A lengthier explanation to why you may want to consider using an alternative to the official YouTube player is written in &lt;a href=&#34;https://medium.com/@soffritti.pierfrancesco/how-to-play-youtube-videos-in-your-android-app-c40427215230&#34;&gt;this Medium post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A list of published apps that are using this library: (&lt;a href=&#34;https://github.com/PierfrancescoSoffritti/android-youtube-player/issues&#34;&gt;let me know&lt;/a&gt; if you want to add your app to this list)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.genius.android&#34;&gt;Genius&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.andrewshu.android.reddit&#34;&gt;reddit is fun&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.tmdb.themoviedatabase&#34;&gt;Mobile Movie Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dingo&#34;&gt;dingo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/showcase.jpg&#34; alt=&#34;showcase&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Does this library breaks YouTube terms of service?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; No.&lt;/p&gt; &#xA;&lt;p&gt;The library uses YouTube&#39;s own web player to play videos. Therefore it is 100% compliant with terms of service. &lt;a href=&#34;https://developers.google.com/youtube/v3/guides/ios_youtube_helper&#34;&gt;You can see here&lt;/a&gt; how this is also the official way of playing YouTube videos on iOS.&lt;/p&gt; &#xA;&lt;p&gt;That said how you use the library matters, be sure to play videos only when the player is visible. If you follow the instructions in the documentation, the library will automatically handle this for you.&lt;/p&gt; &#xA;&lt;p&gt;Also remember when publishing your app on the PlayStore to write title and description in a way that makes it obvious that your app doesn&#39;t have any affiliation with YouTube (the company). &lt;strong&gt;This is issue has nothing to do with the library itself&lt;/strong&gt;, but I figured it may be useful knowledge for many of you considering to use it.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents (Core)&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#sample-app&#34;&gt;Sample app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#download&#34;&gt;Download&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#chromecast&#34;&gt;Chromecast&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#api-documentation&#34;&gt;API documentation&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerview&#34;&gt;YouTubePlayerView&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#xml-attributes&#34;&gt;XML attributes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#initialization&#34;&gt;Initialization&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#iframeplayeroptions&#34;&gt;IFramePlayerOptions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#full-screen&#34;&gt;Full screen&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#release-the-youtubeplayerview&#34;&gt;Release the YouTubePlayerView&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#lifecycleobserver&#34;&gt;LifecycleObserver&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayer&#34;&gt;YouTubePlayer&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#get-a-reference-to-youtubeplayer&#34;&gt;Get a reference to YouTubePlayer&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#load-videos&#34;&gt;Load videos&lt;/a&gt; &#xA;      &lt;ol&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#utility-for-loading-videos&#34;&gt;Utility for loading videos&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ol&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#events&#34;&gt;Events&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayertracker&#34;&gt;YouTubePlayerTracker&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerlistener&#34;&gt;YouTubePlayerListener&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#onready-callback&#34;&gt;onReady callback&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#onstatechanged-callback&#34;&gt;onStateChanged callback&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#create-your-own-custom-ui&#34;&gt;Create your own custom UI&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#defaultplayeruicontroller&#34;&gt;DefaultPlayerUiController&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#reusable-ui-components&#34;&gt;Reusable UI components&lt;/a&gt; &#xA;      &lt;ol&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerseekbar&#34;&gt;YouTubePlayerSeekBar&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#fadeviewhelper&#34;&gt;FadeViewHelper&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#timeutilities&#34;&gt;TimeUtilities&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ol&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#network-events&#34;&gt;Network events&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#chromecast-support&#34;&gt;Chromecast support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#useful-info&#34;&gt;Useful info&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#hardware-acceleration&#34;&gt;Hardware acceleration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#play-youtube-videos-in-the-background&#34;&gt;Play YouTube videos in the background&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#minsdk&#34;&gt;minSdk&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Table of Contents (Chromecast)&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#chromecast-extension-library&#34;&gt;Chromecast extension library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#quick-start---chromecast&#34;&gt;Quick start and API documentation&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#download-extra-dependencies&#34;&gt;Download extra dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#sender&#34;&gt;Sender&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#receiver&#34;&gt;Receiver&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#registration&#34;&gt;Registration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#hosting-the-chromecast-receiver&#34;&gt;Hosting the Chromecast receiver&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Sample app&lt;/h1&gt; &#xA;&lt;p&gt;&lt;span&gt;📝&lt;/span&gt; Both the &lt;strong&gt;core module&lt;/strong&gt; and the &lt;strong&gt;chromecast module&lt;/strong&gt; have a sample app, to provide examples of usage of the libraries.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/&#34;&gt;Go to source code of &lt;strong&gt;core&lt;/strong&gt; sample app&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/chromecast-sender-sample-app&#34;&gt;Go to source code of &lt;strong&gt;chromecast-sender&lt;/strong&gt; sample app&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;📲&lt;/span&gt; You can also download and install the apks of both sample apps.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/apk&#34;&gt;Download apk of &lt;strong&gt;core&lt;/strong&gt; sample app&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/chromecast-sender-sample-app/apk&#34;&gt;Download apk of &lt;strong&gt;chromecast-sender&lt;/strong&gt; sample app&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;👀&lt;/span&gt; If you want to know when a new release of the library is published: &lt;a href=&#34;https://github.com/PierfrancescoSoffritti/android-youtube-player/watchers&#34;&gt;watch this repository on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;p&gt;The Gradle dependency is available via &lt;a href=&#34;https://repo1.maven.org/maven2/com/pierfrancescosoffritti/androidyoutubeplayer/&#34;&gt;MavenCentral&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The minimum API level supported by this library is API 17.&lt;/p&gt; &#xA;&lt;h3&gt;Core&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;core&lt;/em&gt; module contains the YouTube Player. It&#39;s all you need to play YouTube videos in your app.&lt;/p&gt; &#xA;&lt;p&gt;Add this to your module level &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  implementation &#39;com.pierfrancescosoffritti.androidyoutubeplayer:core:11.1.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chromecast&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;chromecast-sender&lt;/em&gt; module contains the Chromecast YouTube Player. Use it if you need to cast YouTube videos from your app to a Chromecast device.&lt;/p&gt; &#xA;&lt;p&gt;Add this to your module level &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  implementation &#39;com.pierfrancescosoffritti.androidyoutubeplayer:chromecast-sender:0.26&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Quick start&lt;/h1&gt; &#xA;&lt;p&gt;In order to start using the player you need to add a &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerview&#34;&gt;YouTubePlayerView&lt;/a&gt; to your layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;LinearLayout&#xA;    xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#xA;    xmlns:app=&#34;http://schemas.android.com/apk/res-auto&#34;&#xA;    android:layout_width=&#34;match_parent&#34;&#xA;    android:layout_height=&#34;match_parent&#34;&#xA;    android:orientation=&#34;vertical&#34; &amp;gt;&#xA;&#xA;    &amp;lt;com.pierfrancescosoffritti.androidyoutubeplayer.core.player.views.YouTubePlayerView&#xA;        android:id=&#34;@+id/youtube_player_view&#34;&#xA;        android:layout_width=&#34;match_parent&#34;&#xA;        android:layout_height=&#34;wrap_content&#34;&#xA;        &#xA;        app:videoId=&#34;S0Q4gqBUs7c&#34;&#xA;        app:autoPlay=&#34;true&#34; /&amp;gt;&#xA;&amp;lt;/LinearLayout&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended that you add &lt;code&gt;YouTubePlayerView&lt;/code&gt; as a lifecycle observer of its parent Activity/Fragment. You can &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#lifecycleobserver&#34;&gt;read why in the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView youTubePlayerView = findViewById(R.id.youtube_player_view);&#xA;getLifecycle().addObserver(youTubePlayerView);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(If you have problems adding &lt;code&gt;YouTubePlayerView&lt;/code&gt; as a &lt;code&gt;LifecycleObserver&lt;/code&gt;, you probably aren&#39;t using androidx, &lt;a href=&#34;https://developer.android.com/jetpack/androidx/migrate&#34;&gt;I suggest you migrate your dependencies&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is all you need, a YouTube video is now playing in your app.&lt;/p&gt; &#xA;&lt;p&gt;If you want more control, everything can be done programmatically by getting a reference to your &lt;code&gt;YouTubePlayerView&lt;/code&gt; and adding a &lt;code&gt;YouTubePlayerListener&lt;/code&gt; to it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView youTubePlayerView = findViewById(R.id.youtube_player_view);&#xA;getLifecycle().addObserver(youTubePlayerView);&#xA;&#xA;youTubePlayerView.addYouTubePlayerListener(new AbstractYouTubePlayerListener() {&#xA;  @Override&#xA;  public void onReady(@NonNull YouTubePlayer youTubePlayer) {&#xA;    String videoId = &#34;S0Q4gqBUs7c&#34;;&#xA;    youTubePlayer.loadVideo(videoId, 0);&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you decde to initialize the player programmatically, remember to remove the &lt;code&gt;autoPlay&lt;/code&gt; and &lt;code&gt;videoId&lt;/code&gt; attributes from the &lt;code&gt;YouTubePlayerView&lt;/code&gt; in your XML file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;API documentation&lt;/h1&gt; &#xA;&lt;p&gt;The following sections provides detailed documentation for every component in the library.&lt;/p&gt; &#xA;&lt;p&gt;If you see any problem or mistake in the documentation, feel free to contribute by opening an issue an/or sending a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;YouTubePlayerView&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerView&lt;/code&gt; is the access point to the &lt;code&gt;YouTubePlayer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can add the View to your layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;LinearLayout&#xA;    xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#xA;    android:layout_width=&#34;match_parent&#34;&#xA;    android:layout_height=&#34;match_parent&#34; &amp;gt;&#xA;&#xA;    &amp;lt;com.pierfrancescosoffritti.androidyoutubeplayer.core.player.views.YouTubePlayerView&#xA;        android:id=&#34;@+id/youtube_player_view&#34;&#xA;        android:layout_width=&#34;match_parent&#34;&#xA;        android:layout_height=&#34;wrap_content&#34;/&amp;gt;&#xA;&amp;lt;/LinearLayout&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can create it programmatically and manually add it to a ViewGroup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView youTubePlayerView = new YouTubePlayerView(this);&#xA;layout.addView(youTubePlayerView);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the height of the View is set to &lt;code&gt;wrap_content&lt;/code&gt;, the View will automatically have an aspect ratio of 16:9, to match the aspect ratio of most YouTube videos.&lt;/p&gt; &#xA;&lt;h3&gt;XML attributes&lt;/h3&gt; &#xA;&lt;p&gt;If you add the view to your XML layout you have the possibility to set a few custom attributes, to customize the view&#39;s look and behavior. Everything can also be done programmatically.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#videoId&#34;&gt;videoId&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#autoPlay&#34;&gt;autoPlay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#enableAutomaticInitialization&#34;&gt;enableAutomaticInitialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#handleNetworkEvents&#34;&gt;handleNetworkEvents&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;videoId&lt;/h4&gt; &#xA;&lt;p&gt;This attribute expects a &lt;code&gt;String&lt;/code&gt;, which is the id of a YouTube video.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If set&lt;/strong&gt;, the player will automatically start playing the video.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If not set&lt;/strong&gt;, the player won&#39;t automatically play.&lt;/p&gt; &#xA;&lt;p&gt;In general you should use this attribute if you want your player to play only one video. This is not a rule, just best practice. In fact, even if you set the attribute it is still possible to play other videos programmatically.&lt;/p&gt; &#xA;&lt;h4&gt;autoPlay&lt;/h4&gt; &#xA;&lt;p&gt;This attribute expects a &lt;code&gt;boolean&lt;/code&gt;. Its default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If &lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;, the player start playing the video provided with &lt;code&gt;videoId&lt;/code&gt; without waiting for user input.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If &lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;, the player will wait for user input before playing the video provided with &lt;code&gt;videoId&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;videoId&lt;/code&gt; is not set, this attribute is useless, therefore if it is set to &lt;code&gt;true&lt;/code&gt; &lt;code&gt;YouTubePlayerView&lt;/code&gt; will throw an exception.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;autoPlay&lt;/code&gt; won&#39;t work if &lt;code&gt;YouTubePlayerView&lt;/code&gt; is not &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#lifecycleobserver&#34;&gt;added as a &lt;code&gt;LifecycleObserver&lt;/code&gt; of its parent Activity/Fragment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;enableAutomaticInitialization&lt;/h4&gt; &#xA;&lt;p&gt;This attribute expects a &lt;code&gt;boolean&lt;/code&gt;. Its default value is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If &lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;YouTubePlayerView&lt;/code&gt; will take care of its initialization.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If &lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;, you will have to initialize &lt;code&gt;YouTubePlayerView&lt;/code&gt; programmatically.&lt;/p&gt; &#xA;&lt;p&gt;In general it makes sense to leave this attribute to &lt;code&gt;true&lt;/code&gt;. You may want to set it to &lt;code&gt;false&lt;/code&gt; only if you need to initialize the view using &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#iframeplayeroptions&#34;&gt;&lt;code&gt;IFramePlayerOptions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;handleNetworkEvents&lt;/h4&gt; &#xA;&lt;p&gt;This attribute expects a &lt;code&gt;boolean&lt;/code&gt;. Its default value is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If &lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;YouTubePlayerView&lt;/code&gt; handle network events by registering a &lt;code&gt;NetworkReceiver&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If &lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;, you will be responsible for handling network events.&lt;/p&gt; &#xA;&lt;p&gt;It is useful to have this attribute set to &lt;code&gt;true&lt;/code&gt; so that if the connection drops while the player is initializing &lt;code&gt;YouTubePlayerView&lt;/code&gt; will be able to resume the initialization automatically once the network is back.&lt;/p&gt; &#xA;&lt;p&gt;If you decide to set it to &lt;code&gt;false&lt;/code&gt; you should also disable &lt;code&gt;enableAutomaticInitialization&lt;/code&gt; and manage network events on your own.&lt;/p&gt; &#xA;&lt;p&gt;Read more about network events &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#network-events&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;p&gt;If you need to initialize &lt;code&gt;YouTubePlayerView&lt;/code&gt; programmatically, you can set its xml attribute &lt;code&gt;enableAutomaticInitialization&lt;/code&gt; to false. You can do the same programmatically by calling &lt;code&gt;youTubePlayerView.setEnableAutomaticInitialization(false)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After automatic initialization has been disabled, you need to take care of the initialization of &lt;code&gt;YouTubePlayerView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use these methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView.initialize(YouTubePlayerListener listener)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView.initialize(YouTubePlayerListener listener, IFramePlayerOptions iframePlayerOptions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView.initialize(YouTubePlayerListener listener, boolean handleNetworkEvents)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView.initialize(YouTubePlayerListener listener, boolean handleNetworkEvents, IFramePlayerOptions iframePlayerOptions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;initialize(YouTubePlayerListener)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Initialize the &lt;code&gt;YouTubePlayer&lt;/code&gt;. Network events are automatically handled by the player.&lt;/p&gt; &#xA;&lt;p&gt;The argument is a &lt;code&gt;YouTubePlayerListener&lt;/code&gt;, you can read more about it &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerlistener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;initialize(YouTubePlayerListener, boolean)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Initialize the &lt;code&gt;YouTubePlayer&lt;/code&gt;. By using the &lt;code&gt;boolean&lt;/code&gt; is possible to decide if the player should handle network events or not, read more about network events &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#network-events&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;initialize(YouTubePlayerListener, boolean, IFramePlayerOptions)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;By passing an &lt;code&gt;IFramePlayerOptions&lt;/code&gt; to the initialize method it is possible to set some of the parameters of the IFrame YouTubePlayer. Read more about &lt;code&gt;IFramePlayerOptions&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#iframeplayeroptions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All the possible parameters and values are listed &lt;a href=&#34;https://developers.google.com/youtube/player_parameters#Parameters&#34;&gt;here&lt;/a&gt;. Not all of them are supported in this library because some don&#39;t make sense in this context. &lt;a href=&#34;https://github.com/PierfrancescoSoffritti/android-youtube-player/issues&#34;&gt;Open an issue&lt;/a&gt; if you need a parameter that is not currently supported.&lt;/p&gt; &#xA;&lt;h3&gt;IFramePlayerOptions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;IFramePlayerOptions&lt;/code&gt; is an optional argument that can be passed to &lt;code&gt;YouTubePlayerView.initialize(YouTubePlayerListener, boolean, IFramePlayerOptions)&lt;/code&gt;, it can be used to set some of the parameters of the IFrame YouTubePlayer.&lt;/p&gt; &#xA;&lt;p&gt;A simple example of how to use &lt;code&gt;IFramePlayerOptions&lt;/code&gt; can be found in the sample app &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/sampleapp/examples/iFramePlayerOptionsExample/IFramePlayerOptionsExampleActivity.java&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the Builder to get a &lt;code&gt;IFramePlayerOptions&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;IFramePlayerOptions iFramePlayerOptions = new IFramePlayerOptions.Builder()&#xA;  .controls(1)&#xA;  .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the possible parameters and values are listed &lt;a href=&#34;https://developers.google.com/youtube/player_parameters#Parameters&#34;&gt;here&lt;/a&gt;. Not all of them are supported in this library because some don&#39;t make sense in this context. &lt;a href=&#34;https://github.com/PierfrancescoSoffritti/android-youtube-player/issues&#34;&gt;Open an issue&lt;/a&gt; if you need a parameter that is not currently supported.&lt;/p&gt; &#xA;&lt;h4&gt;Supported options&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;controls&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This option indicates whether the web-based UI of the IFrame player should be hidden or visible.&lt;/p&gt; &#xA;&lt;p&gt;If set to 0: web UI is not visible.&lt;/p&gt; &#xA;&lt;p&gt;If set to 1: web UI is visible.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;rel&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This option controls the related videos shown at the end of a video.&lt;/p&gt; &#xA;&lt;p&gt;If set to 0: related videos will come from the same channel as the video that was just played.&lt;/p&gt; &#xA;&lt;p&gt;If set to 1: related videos will come from multiple channels.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;ivLoadPolicy&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This option controls video annotations.&lt;/p&gt; &#xA;&lt;p&gt;If set to 1: the player will show annotations.&lt;/p&gt; &#xA;&lt;p&gt;If set to 3: the player won&#39;t show annotations.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;ccLoadPolicy&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This option controls video captions. It doesn&#39;t work with automatically generated captions.&lt;/p&gt; &#xA;&lt;p&gt;If set to 0: the player will show captions.&lt;/p&gt; &#xA;&lt;p&gt;If set to 1: the player won&#39;t show captions.&lt;/p&gt; &#xA;&lt;h3&gt;Full screen&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;YouTubePlayerView&lt;/code&gt; to enter and exit full-screen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayerView.enterFullScreen();&#xA;youTubePlayerView.exitFullScreen();&#xA;youTubePlayerView.isFullScreen();&#xA;youTubePlayerView.toggleFullScreen();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add listeners to get notified when the &lt;code&gt;YouTubePlayerView&lt;/code&gt; enters or exits full-screen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayerView.addFullScreenListener(YouTubePlayerFullScreenListener fullScreenListener);&#xA;youTubePlayerView.removeFullScreenListener(YouTubePlayerFullScreenListener fullScreenListener);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that &lt;code&gt;enterFullScreen()&lt;/code&gt; and &lt;code&gt;exitFullScreen()&lt;/code&gt; will only set &lt;code&gt;YouTubePlayerView&lt;/code&gt;&#39;s height and width to &lt;code&gt;MATCH_PARENT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is responsibility of the developer to hide other Views in the Activity, change the orientation of the Activity etc. The sample app contains an &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/sampleapp/utils/FullScreenHelper.java&#34;&gt;helper class&lt;/a&gt; that can help you to update your app state, but this is not part of the library.&lt;/p&gt; &#xA;&lt;p&gt;If you need to change the orientation of your Activity/Fragment, remember that by default Android recreates Activities and Fragments when the orientation changes. Make sure that you manually handle orientation changes by adding the attribute &lt;code&gt;android:configChanges&lt;/code&gt; to your Activity definition in the manifest.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;application &amp;gt;&#xA;  &amp;lt;activity&#xA;    android:configChanges=&#34;orientation|screenSize|keyboardHidden|smallestScreenSize|screenLayout&#34; /&amp;gt;&#xA;&amp;lt;/application&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Release the YouTubePlayerView&lt;/h3&gt; &#xA;&lt;p&gt;Remember to release the &lt;code&gt;YouTubePlayerView&lt;/code&gt; when you&#39;re done using it, by calling &lt;code&gt;YouTubePlayerView.release()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override&#xA;public void onDestroy() {&#xA;    super.onDestroy();&#xA;    youTubePlayerView.release();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You don&#39;t need to manually release the player if you registered it as an observer of your Activity/Fragment&#39;s lifecycle.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;LifecycleObserver&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerView&lt;/code&gt; implements the &lt;code&gt;LifecycleObserver&lt;/code&gt; interface, this means that it is a lifecycle aware component.&lt;/p&gt; &#xA;&lt;p&gt;If added as an observer of your Activity/Fragment&#39;s lifecycle, &lt;code&gt;YouTubePlayerView&lt;/code&gt; will be smarter. &lt;strong&gt;It is highly recommended that you register &lt;code&gt;YouTubePlayerView&lt;/code&gt; as a &lt;code&gt;LifecycleObserver&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;lifecycleOwner.getLifecycle().addObserver(youTubePlayerView);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding &lt;code&gt;YouTubePlayerView&lt;/code&gt; as an observer to a lifecycle will allow &lt;code&gt;YouTubePlayerView&lt;/code&gt; to automatically pause the playback when the Activity/Fragment stops (not when it pauses, in order to support multi-window applications).&lt;/p&gt; &#xA;&lt;p&gt;If you want your app to keep &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#play-youtube-videos-in-the-background&#34;&gt;playing when the Activity/Fragment is not visible&lt;/a&gt; (remember that this behavior is not allowed, if you want to publish your app on the PlayStore), don&#39;t register the &lt;code&gt;YouTubePlayerView&lt;/code&gt; as a lifecycle observer. But remember to manually call &lt;code&gt;release()&lt;/code&gt; when the Activity/Fragment is being destroyed.&lt;/p&gt; &#xA;&lt;h2&gt;YouTubePlayer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayer&lt;/code&gt; is the component responsible for controlling the playback of YouTube videos. You can see its contract &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/player/YouTubePlayer.kt&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Every &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerview&#34;&gt;&lt;code&gt;YouTubePlayerView&lt;/code&gt;&lt;/a&gt; contains a &lt;code&gt;YouTubePlayer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Get a reference to YouTubePlayer&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to get a reference to the &lt;code&gt;YouTubePlayer&lt;/code&gt;, through the &lt;code&gt;YouTubePlayerView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;1. YouTubePlayerView.getYouTubePlayerWhenReady&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerView.getYouTubePlayerWhenReady&lt;/code&gt; can be used to get a reference to the &lt;code&gt;YouTubePlayer&lt;/code&gt;. As the name of the method says, you&#39;ll only get the player when it is ready.&lt;/p&gt; &#xA;&lt;p&gt;Therefore this function takes a callback as argument, the callback will be called when the &lt;code&gt;YouTubePlayer&lt;/code&gt; is ready.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayerView.getYouTubePlayerWhenReady(youTubePlayer -&amp;gt; { &#xA;  // do stuff with it&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. YouTubePlayerListener&lt;/h4&gt; &#xA;&lt;p&gt;Every method of a &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerlistener&#34;&gt;&lt;code&gt;YouTubePlayerListener&lt;/code&gt;&lt;/a&gt; has the &lt;code&gt;YouTubePlayer&lt;/code&gt; as argument.&lt;/p&gt; &#xA;&lt;h3&gt;Load videos&lt;/h3&gt; &#xA;&lt;p&gt;To load a video you can use two methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayer.loadVideo(String videoId, float startTime)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayer.cueVideo(String videoId, float startTime)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The difference between the two is that &lt;code&gt;loadVideo&lt;/code&gt; loads and automatically plays the video, while &lt;code&gt;cueVideo&lt;/code&gt; just loads video and thumbnail but doesn&#39;t autoplay.&lt;/p&gt; &#xA;&lt;h4&gt;Utility for loading videos&lt;/h4&gt; &#xA;&lt;p&gt;If the Activity/Fragment is in the background, but you created a &lt;code&gt;YouTubePlayerListener&lt;/code&gt; that calls &lt;code&gt;loadVideo&lt;/code&gt; when &lt;code&gt;onReady&lt;/code&gt; is called, the video will start playing even if the Activity is in the background.&lt;/p&gt; &#xA;&lt;p&gt;To solve this problem you should use the &lt;code&gt;loadOrCueVideo&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Provided as an utility function in Java.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerUtils.loadOrCueVideo(&#xA;  youTubePlayer,&#xA;  getLifecycle(),&#xA;  videoId,&#xA;  startTime&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And as an extension function in Kotlin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;youTubePlayer.loadOrCueVideo(lifeCycle, videoId, startTime)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function will call &lt;code&gt;loadVideo&lt;/code&gt; only if the Activity is resumed, otherwise it will call &lt;code&gt;cueVideo&lt;/code&gt;, so that the video starts loading but not playing.&lt;/p&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;During its existence the player will constantly emit events, you can easily listen to all of them by adding a &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerlistener&#34;&gt;&lt;code&gt;YouTubePlayerListener&lt;/code&gt;&lt;/a&gt; to it.&lt;/p&gt; &#xA;&lt;h3&gt;YouTubePlayerTracker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerTracker&lt;/code&gt; is an utility provided by the library to easily keep track of a &lt;code&gt;YouTubePlayer&lt;/code&gt;&#39;s state and other information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerTracker&lt;/code&gt; is a &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerlistener&#34;&gt;&lt;code&gt;YouTubePlayerListener&lt;/code&gt;&lt;/a&gt;, therefore in order to use it you need to add it as a listener to the &lt;code&gt;YouTubePlayer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can then use the tracker to get the player&#39;s state and various information about the video that is being played.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerTracker tracker = new YouTubePlayerTracker();&#xA;youTubePlayer.addListener(tracker);&#xA;&#xA;tracker.getState();&#xA;tracker.getCurrentSecond();&#xA;tracker.getVideoDuration();&#xA;tracker.getVideoId();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;YouTubePlayerListener&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;YouTubePlayerListener&lt;/code&gt; is used to intercept events emitted by a &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayer&#34;&gt;&lt;code&gt;YouTubePlayer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;During its existence a &lt;code&gt;YouTubePlayer&lt;/code&gt; will constantly emit events, you can listen to them by adding a &lt;code&gt;YouTubePlayerListener&lt;/code&gt; to it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayer.addListener(YouTubePlayerListener listener);&#xA;youTubePlayer.removeListener(YouTubePlayerListener listener);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are the method that a &lt;code&gt;YouTubePlayerListener&lt;/code&gt; must implement, every method takes a reference to the &lt;code&gt;YouTubePlayer&lt;/code&gt; and some other arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Called when the player is ready to play videos.&#xA;// You should start using the player only after this method is called.&#xA;void onReady(@NonNull YouTubePlayer youTubePlayer)&#xA;&#xA;// Called every time the state of the player changes.&#xA;void onStateChange(@NonNull YouTubePlayer youTubePlayer, @NonNull PlayerConstants.PlayerState state)&#xA;&#xA;// Called every time the quality of the playback changes.&#xA;void onPlaybackQualityChange(@NonNull YouTubePlayer youTubePlayer, @NonNull PlayerConstants.PlaybackQuality playbackQuality)&#xA;&#xA;// Called every time the speed of the playback changes.&#xA;void onPlaybackRateChange(@NonNull YouTubePlayer youTubePlayer, @NonNull PlayerConstants.PlaybackRate playbackRate)&#xA;&#xA;// Called when an error occurs in the player.&#xA;void onError(@NonNull YouTubePlayer youTubePlayer, @NonNull PlayerConstants.PlayerError error)&#xA;&#xA;// Called periodically by the player, the argument is the number of seconds that have been played.&#xA;void onCurrentSecond(@NonNull YouTubePlayer youTubePlayer, float second)&#xA;&#xA;// Called when the total duration of the video is loaded.&#xA;// Note that getDuration() will return 0 until the video&#39;s metadata is loaded, which normally happens just after the video starts playing.&#xA;void onVideoDuration(@NonNull YouTubePlayer youTubePlayer, float duration)&#xA;&#xA;// Called periodically by the player, the argument is the percentage of the video that has been buffered.&#xA;void onVideoLoadedFraction(@NonNull YouTubePlayer youTubePlayer, float loadedFraction)&#xA;&#xA;// Called when the id of the current video is loaded&#xA;void onVideoId(@NonNull YouTubePlayer youTubePlayer, String videoId)&#xA;&#xA;void onApiChange(@NonNull YouTubePlayer youTubePlayer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to implement all the methods of this interface, you can extend &lt;code&gt;AbstractYouTubePlayerListener&lt;/code&gt; instead of implementing &lt;code&gt;YouTubePlayerListener&lt;/code&gt; and override only the methods you are interested in.&lt;/p&gt; &#xA;&lt;p&gt;For more information on the methods defined in the &lt;code&gt;YouTubePlayerListener&lt;/code&gt; interface, please refer to the documentation defined above each method &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/player/listeners/YouTubePlayerListener.kt&#34;&gt;in the codebase&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;onReady callback&lt;/h3&gt; &#xA;&lt;p&gt;The onReady callback of a &lt;code&gt;YouTubePlayerListener&lt;/code&gt; is called once, when the &lt;code&gt;YouTubePlayer&lt;/code&gt; is ready to be used for the first time. &lt;strong&gt;You can&#39;t use a &lt;code&gt;YouTubePlayer&lt;/code&gt; before it is ready&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;onStateChanged callback&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;YouTubePlayer&lt;/code&gt; has a state, that changes accordingly to the playback changes. The &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/player/PlayerConstants.kt&#34;&gt;list of possible states&lt;/a&gt; is the same of the YouTube &lt;a href=&#34;https://developers.google.com/youtube/iframe_api_reference#Playback_status&#34;&gt;IFrame Player API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;UNKNOWN&#xA;UNSTARTED&#xA;ENDED&#xA;PLAYING&#xA;PAUSED&#xA;BUFFERING&#xA;VIDEO_CUED&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create your own custom UI&lt;/h2&gt; &#xA;&lt;p&gt;Customization is an important aspect of this library. If need to, you can completely replace the default UI of the player.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerView&lt;/code&gt; has methods for that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;View inflateCustomPlayerUi(@LayoutRes int customUiLayoutID)&#xA;void setCustomPlayerUi(View view)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method takes in the &lt;code&gt;id&lt;/code&gt; of a layout resource, which is a regular XML file containing the definition of a layout, or a &lt;code&gt;View&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The new UI will be overlayed over the player. For this reason it is recommended to disable the UI of the IFrame player, by initializing the &lt;code&gt;YouTubePlayerView&lt;/code&gt; with &lt;code&gt;IFramePlayerOptions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// disable web ui&#xA;IFramePlayerOptions options = new IFramePlayerOptions.Builder().controls(0).build();&#xA;youTubePlayerView.initialize(listener, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You are responsible for managing your custom UI with your own code. Meaning: you should write your own class to manage the UI. A simple but complete example can be seen &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/sampleapp/examples/customUiExample&#34;&gt;here, in the sample app&lt;/a&gt;, I recommend taking a few minutes to read it, it should be trivial to understand.&lt;/p&gt; &#xA;&lt;p&gt;Example (taken from sample app):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;View customPlayerUi = youTubePlayerView.inflateCustomPlayerUi(R.layout.custom_player_ui);&#xA;&#xA;YouTubePlayerListener listener = new AbstractYouTubePlayerListener() {&#xA;&#xA;  @Override&#xA;  public void onReady(@NonNull YouTubePlayer youTubePlayer) {&#xA;    CustomPlayerUiController customPlayerUiController = new CustomPlayerUiController(CustomUiActivity.this, customPlayerUi, youTubePlayer, youTubePlayerView);&#xA;    youTubePlayer.addListener(customPlayerUiController);&#xA;    youTubePlayerView.addFullScreenListener(customPlayerUiController);&#xA;&#xA;    YouTubePlayerUtils.loadOrCueVideo(&#xA;      youTubePlayer, getLifecycle(),&#xA;      VideoIdsProvider.getNextVideoId(),0f&#xA;    );&#xA;  }&#xA;};&#xA;&#xA;// disable iframe ui&#xA;IFramePlayerOptions options = new IFramePlayerOptions.Builder().controls(0).build();&#xA;youTubePlayerView.initialize(listener, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A blog post going deeper on this is available &lt;a href=&#34;https://medium.com/@soffritti.pierfrancesco/customize-android-youtube-players-ui-9f32da9e8505&#34;&gt;at this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example of a custom UI: (this is just a ugly example, but here your design skills are the limit :))&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/custom_ui_screenshot.jpg&#34; alt=&#34;custom ui example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Warning: when replacing the IFrame UI, be carfeul not to break YouTube&#39;s terms of service. Altering the player look and feel might be an issue if you intend to publish your app on the PlayStore.&lt;/p&gt; &#xA;&lt;h3&gt;DefaultPlayerUiController&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;DefaultPlayerUiController&lt;/code&gt; is a pre-made custom UI available in the library. You can use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerListener listener = new AbstractYouTubePlayerListener() {&#xA;  @Override&#xA;  public void onReady(@NonNull YouTubePlayer youTubePlayer) {&#xA;    // using pre-made custom ui&#xA;    DefaultPlayerUiController defaultPlayerUiController = new DefaultPlayerUiController(youTubePlayerView, youTubePlayer);&#xA;    youTubePlayerView.setCustomPlayerUi(defaultPlayerUiController.getRootView());&#xA;  }&#xA;};&#xA;&#xA;// disable iframe ui&#xA;IFramePlayerOptions options = new IFramePlayerOptions.Builder().controls(0).build();&#xA;youTubePlayerView.initialize(listener, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The UI will look something like this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/chromecast_screenshot.jpg&#34; alt=&#34;YouTubePlayerSeekBar&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;DefaultPlayerUiController&lt;/code&gt; to hide views, add new view etc.&lt;/p&gt; &#xA;&lt;h4&gt;Menu&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;DefaultPlayerUiController&lt;/code&gt; has an optional menu. You can use these methods to control the menu&#39;s behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PlayerUiController.showMenuButton(boolean show);&#xA;PlayerUiController.setMenuButtonClickListener(@NonNull View.OnClickListener customMenuButtonClickListener);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default the menu icon is not visible.&lt;/p&gt; &#xA;&lt;p&gt;The default &lt;code&gt;OnClickListener&lt;/code&gt; opens the menu when the menu icon is clicked. You can change this behavior, for example to open a menu with a different UX, like a bottom sheet panel. Obviously if you want a UX different from the one provided by the library, you are responsible for creating your own components.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Menu screenshot:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/menu_screenshot.jpg&#34; alt=&#34;menu screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;YouTubePlayerMenu&lt;/h5&gt; &#xA;&lt;p&gt;You can get a reference of the &lt;code&gt;YouTubePlayerMenu&lt;/code&gt; from the &lt;code&gt;PlayerUiController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerMenu PlayerUiController.getMenu()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you get a &lt;code&gt;YouTubePlayerMenu&lt;/code&gt; object you can add and remove items to it, show it and dismiss it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerMenu addItem(MenuItem menuItem)&#xA;YouTubePlayerMenu removeItem(MenuItem menuItem)&#xA;YouTubePlayerMenu removeItem(int itemIndex)&#xA;&#xA;void show(View anchorView)&#xA;void dismiss()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initially the &lt;code&gt;YouTubePlayerMenu&lt;/code&gt; doesn&#39;t contain any item. You need to add them.&lt;/p&gt; &#xA;&lt;h5&gt;MenuItem&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;MenuItem&lt;/code&gt;s are the items of the &lt;code&gt;YouTubePlayerMenu&lt;/code&gt;. They have a title, an optional icon and a &lt;code&gt;OnClickListener&lt;/code&gt; that is called when the item is clicked.&lt;/p&gt; &#xA;&lt;h3&gt;Reusable UI components&lt;/h3&gt; &#xA;&lt;p&gt;The library provides some pre-built UI components, these components are useful to reduce the time needed to build your own UI and controllers.&lt;/p&gt; &#xA;&lt;h4&gt;YouTubePlayerSeekBar&lt;/h4&gt; &#xA;&lt;p&gt;This component is useful to display and control the time of the playback. It shows the current time, the total duration of the video and a seek bar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/YouTubePlayerSeekBar.jpg&#34; alt=&#34;YouTubePlayerSeekBar&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can add it to your layout programmatically or in your xml.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;com.pierfrancescosoffritti.androidyoutubeplayer.core.ui.views.YouTubePlayerSeekBar&#xA;  android:id=&#34;@+id/youtube_player_seekbar&#34;&#xA;  android:layout_width=&#34;match_parent&#34;&#xA;  android:layout_height=&#34;wrap_content&#34;&#xA;&#xA;  app:fontSize=&#34;12sp&#34;&#xA;  app:color=&#34;@color/red&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to change font size and color by using the &lt;code&gt;fontSize&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; attributes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerSeekBar&lt;/code&gt; implements &lt;code&gt;YouTubePlayerListener&lt;/code&gt;. In order for it to work you need to add it as a listener to your &lt;code&gt;YouTubePlayer&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayer.addListener(youTubePlayerSeekBar);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may wan to listen to events from &lt;code&gt;YouTubePlayerSeekBar&lt;/code&gt;, in order to update the current time of your &lt;code&gt;YouTubePlayer&lt;/code&gt; when the user moves the touch bar. To do that pass a &lt;code&gt;YouTubePlayerSeekBarListener&lt;/code&gt; to &lt;code&gt;YouTubePlayerSeekBar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayerSeekBar.setYoutubePlayerSeekBarListener(new YouTubePlayerSeekBarListener() {&#xA;  @Override&#xA;  public void seekTo(float time) {&#xA;    youTubePlayer.seekTo(time);&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;FadeViewHelper&lt;/h4&gt; &#xA;&lt;p&gt;An helper class that automatically fades out a view when not used. It can be used to automate the fade in and out of a container for the player controls, so that they automatically fade when appropriate.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;FadingFrameLayout&lt;/code&gt; is a &lt;code&gt;YouTubePlayerListener&lt;/code&gt; therefore it can change it&#39;s behavior based on the state of the player. For example: if the video is paused it won&#39;t automatically fade out.&lt;/p&gt; &#xA;&lt;p&gt;You can initialize it by passing to the constructor the view you want to be fading.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;FadeViewHelper fadeViewHelper = new FadeViewHelper(controlsContainer);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to change the animation duration and fade out delay by using the setter methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;fadeViewHelper.setAnimationDuration(FadeViewHelper.DEFAULT_ANIMATION_DURATION);&#xA;fadeViewHelper.setFadeOutDelay(FadeViewHelper.DEFAULT_FADE_OUT_DELAY);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They both take the time in milliseconds.&lt;/p&gt; &#xA;&lt;p&gt;In order for &lt;code&gt;FadeViewHelper&lt;/code&gt; to work properly you need to add it as a listener to your &lt;code&gt;YouTubePlayer&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayer.addListener(fadeViewHelper);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the method &lt;code&gt;FadeViewHelper.setDisabled(boolean)&lt;/code&gt; to disable the automatic fading.&lt;/p&gt; &#xA;&lt;p&gt;Use the method &lt;code&gt;FadeViewHelper.toggleVisibility()&lt;/code&gt; to toggle the visibility of the target view, with a fade animation.&lt;/p&gt; &#xA;&lt;h4&gt;TimeUtilities&lt;/h4&gt; &#xA;&lt;p&gt;A set of utilities than can be used to format time Strings (like duration and current time of videos).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String TimeUtilities.formatTime(float timeInSeconds)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Takes in the time in seconds and returns a String with the time formatted as &#34;M:SS&#34;. (M = minutes, S = seconds).&lt;/p&gt; &#xA;&lt;h2&gt;Network events&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerview&#34;&gt;&lt;code&gt;YouTubePlayerView&lt;/code&gt;&lt;/a&gt; automatically handles network events, using an internal BroadcastReceiver. You can choose to enable or disable this feature &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#initialization&#34;&gt;when initializing the player&lt;/a&gt;, or by setting the xml attribute &lt;code&gt;app:handleNetworkEvents=&#34;false&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Using the internal BroadcastReceiver is the easiest and recommended way to handle network events. The library is capable of handling cases in which the connection goes off and the playback can&#39;t continue, or cases in which the connection goes off while the player is in the process of initialization.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use your own BroadcastReceiver make sure to cover all the possible scenarios, in order to provide a good user experience.&lt;/p&gt; &#xA;&lt;h2&gt;Chromecast support&lt;/h2&gt; &#xA;&lt;p&gt;If you need to cast YouTube videos to a Chromecast device you can use the &lt;em&gt;chromecast-sender&lt;/em&gt; extension library. Read its documentation &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#chromecast-extension-library&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Useful info&lt;/h2&gt; &#xA;&lt;h3&gt;Hardware acceleration&lt;/h3&gt; &#xA;&lt;p&gt;Is important that the Activity containing the &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerview&#34;&gt;YouTubePlayerView&lt;/a&gt; is hardware accelerated. This option is enabled by default, you don&#39;t have to change anything in your app. Unless you manually disabled hardware acceleration.&lt;/p&gt; &#xA;&lt;p&gt;If you need to disable hardware acceleration in your application, you can enable it at the Activity level, only for the Activity containing the &lt;code&gt;YouTubePlayerView&lt;/code&gt;, as explained &lt;a href=&#34;https://developer.android.com/guide/topics/graphics/hardware-accel.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Disabling hardware acceleration on the Activity containing &lt;code&gt;YouTubePlayerView&lt;/code&gt; may result in some weird behavior. The one I have observed so far shows a black image in the player, while the audio is playing normally.&lt;/p&gt; &#xA;&lt;h3&gt;Play YouTube videos in the background&lt;/h3&gt; &#xA;&lt;p&gt;With this library it&#39;s easy to play YouTube videos when the app is not visible. In order to do that you simply have to not call &lt;code&gt;youTubePlayer.pause()&lt;/code&gt; when the Activity is being paused or stopped and enable background playback by calling &lt;code&gt;YouTubePlayerView.enableBackgroundPlayback(true)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Adding &lt;code&gt;YouTubePlayerView&lt;/code&gt; as an &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#lifecycleobserver&#34;&gt;observer to a lifecycle&lt;/a&gt; will automatically cause the player to pause the playback when the Activity/Fragment stops.&lt;/p&gt; &#xA;&lt;p&gt;Therefore if you want your app to keep playing even when the Activity/Fragment is paused/stopped, don&#39;t register it as a lifecycle observer and enable background playback for the view. But remember to manually call &lt;code&gt;YouTubePlayerView.release()&lt;/code&gt; when the Activity/Fragment is destroyed.&lt;/p&gt; &#xA;&lt;p&gt;Remember that this behavior is against &lt;a href=&#34;https://developers.google.com/youtube/terms/api-services-terms-of-service&#34;&gt;YouTube terms of service&lt;/a&gt;, therefore if you decide to allow background playback you won&#39;t be able to publish your app on the Play Store.&lt;/p&gt; &#xA;&lt;p&gt;Use this functionality only if you plan to build the app for personal use or if you plan to distribute it through different channels.&lt;/p&gt; &#xA;&lt;h3&gt;minSdk&lt;/h3&gt; &#xA;&lt;p&gt;The minSdk of the library is 17. &lt;a href=&#34;https://developer.android.com/about/dashboards/index.html&#34;&gt;At this point in time&lt;/a&gt; it doesn&#39;t make much sense for new apps to support older versions of Android.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m not sure how WebView will behave on older versions of Android, but technically it should be possible to lower the minSdk. If you absolutely need to support older devices, I suggest you fork the library and lower the minSdk yourself.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Chromecast extension library&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;180px&#34; src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/chromecast-youtube-player-icon_512x512.png&#34; title=&#34;chromecast-youtube-player logo&#34;&gt; &#xA;&lt;p&gt;The &lt;em&gt;chromecast-sender&lt;/em&gt; extension library extends the &lt;em&gt;core&lt;/em&gt; library with chromecast functionalities. It shares some interfaces with the &lt;em&gt;core&lt;/em&gt; library, therefore they can be used together.&lt;/p&gt; &#xA;&lt;p&gt;The scope of this library is to provide the basic framework and utilities needed to cast YouTube videos to a Chromecast device.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The api of this library is not 100% finalized yet, but is stable. You can use it in your apps.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quick start - Chromecast&lt;/h1&gt; &#xA;&lt;p&gt;A Google Cast application is made of two components: a Sender and a Receiver.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#sender&#34;&gt;Sender&lt;/a&gt;: is responsible for initiating the cast sessions. In our case the sender is an Android app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#receiver&#34;&gt;Receiver&lt;/a&gt;: a web app that gets downloaded on the Chromecast when a sender initiates a cast sessions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Download extra dependencies&lt;/h3&gt; &#xA;&lt;p&gt;To use Google Cast functionalities add the &lt;em&gt;chromecast-sender&lt;/em&gt; module to your dependencies:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#download&#34;&gt;last-version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;implementation &#39;com.pierfrancescosoffritti.androidyoutubeplayer:chromecast-sender:last-version&#39;&#xA;&#xA;// this is not needed to use the library, but it provides the quite useful cast button.&#xA;implementation &#39;androidx.mediarouter:mediarouter:last-version&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sender&lt;/h3&gt; &#xA;&lt;p&gt;In order to use the Google Cast framework an app has to declare a &lt;code&gt;OptionsProvider&lt;/code&gt;, as described in the &lt;a href=&#34;https://developers.google.com/cast/docs/android_sender_integrate#initialize_the_cast_context&#34;&gt;Google Cast documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add this class to your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class CastOptionsProvider implements com.google.android.gms.cast.framework.OptionsProvider {&#xA;  public com.google.android.gms.cast.framework.CastOptions getCastOptions(Context appContext) {&#xA;&#xA;  // Register you custom receiver on the Google Cast SDK Developer Console to get this ID.&#xA;  String receiverId = &#34;&#34;;&#xA;&#xA;  return new com.google.android.gms.cast.framework.CastOptions.Builder()&#xA;    .setReceiverApplicationId(receiverId)&#xA;    .build();&#xA;  }&#xA;&#xA;  public List&amp;lt;SessionProvider&amp;gt; getAdditionalSessionProviders(Context context) {&#xA;    return null;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read how to get a &lt;code&gt;receiverId&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#registration&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;OptionsProvider&lt;/code&gt; to your &lt;code&gt;manifest.xml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(&lt;code&gt;OPTIONS_PROVIDER_CLASS_NAME&lt;/code&gt; is meant to be like that, change only the &lt;code&gt;android:value&lt;/code&gt; attribute)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;meta-data&#xA;  android:name=&#34;com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME&#34;&#xA;  android:value=&#34;yourpackagename.CastOptionsProvider&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add a MediaRouterButton to your layout, in your xml file or programmatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;LinearLayout&#xA;  xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#xA;  android:id=&#34;@+id/root&#34;&#xA;  android:layout_width=&#34;match_parent&#34;&#xA;  android:layout_height=&#34;match_parent&#34;&#xA;  android:orientation=&#34;vertical&#34; &amp;gt;&#xA;&#xA;  &amp;lt;androidx.mediarouter.app.MediaRouteButton&#xA;    android:id=&#34;@+id/media_route_button&#34;&#xA;    android:layout_width=&#34;wrap_content&#34;&#xA;    android:layout_height=&#34;wrap_content&#34; /&amp;gt;&#xA;&amp;lt;/LinearLayout&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in your Activity/Fragment get a reference to the &lt;code&gt;MediaRouteButton&lt;/code&gt; and check the status of the GooglePlayServices on the user&#39;s phone.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private int googlePlayServicesAvailabilityRequestCode = 1;&#xA;&#xA;@Override&#xA;protected void onCreate(Bundle savedInstanceState) {&#xA;  super.onCreate(savedInstanceState);&#xA;  setContentView(R.layout.activity_main);&#xA;&#xA;  androidx.mediarouter.app.MediaRouteButton mediaRouteButton = findViewById(R.id.media_route_button);&#xA;  CastButtonFactory.setUpMediaRouteButton(this, mediaRouteButton);&#xA;&#xA;  // can&#39;t use CastContext until I&#39;m sure the user has GooglePlayServices&#xA;  PlayServicesUtils.checkGooglePlayServicesAvailability(this, googlePlayServicesAvailabilityRequestCode, this::initChromecast);&#xA;}&#xA;&#xA;@Override&#xA;public void onActivityResult(int requestCode, int resultCode, Intent data) {&#xA;  super.onActivityResult(requestCode, resultCode, data);&#xA;&#xA;  // can&#39;t use CastContext until I&#39;m sure the user has GooglePlayServices&#xA;  if(requestCode == googlePlayServicesAvailabilityRequestCode)&#xA;    PlayServicesUtils.checkGooglePlayServicesAvailability(this, googlePlayServicesAvailabilityRequestCode, this::initChromecast);&#xA;}&#xA;&#xA;private void initChromecast() {&#xA;  new ChromecastYouTubePlayerContext(&#xA;    CastContext.getSharedInstance(this).getSessionManager(),&#xA;    new SimpleChromecastConnectionListener()&#xA;  );&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can easily check the GooglePlayServices status by using &lt;code&gt;PlayServicesUtils.checkGooglePlayServicesAvailability&lt;/code&gt;, a utility function provided by the &lt;em&gt;chromecast-sender&lt;/em&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PlayServicesUtils.checkGooglePlayServicesAvailability&lt;/code&gt; does what is described &lt;a href=&#34;https://developers.google.com/android/guides/setup#ensure_devices_have_the_google_play_services_apk&#34;&gt;here, in the official doc&lt;/a&gt;. It will check the status of GooglePlayServices and will show a dialog to the user if some action is needed in order to fix the problem. It won&#39;t display anything if everything is ok (which it is, 99% of the cases), in this case it will simply call the function passed as third parameter. If there are some problems, the result of the operation is delivered through the &lt;code&gt;onActivityResult&lt;/code&gt; callback.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;re sure the user&#39;s GooglePlayServices is all right, you can create the &lt;code&gt;ChromecastYouTubePlayerContext&lt;/code&gt;. The access point to the &lt;em&gt;chromecast-sender&lt;/em&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ChromecastYouTubePlayerContext&lt;/code&gt; is the entry point to the &lt;em&gt;chromecast-sender&lt;/em&gt; library. Once it is created, it automatically starts listening for Chromecast connection events. The &lt;code&gt;ChromecastConnectionListener&lt;/code&gt; passed to the constructor will be used to do just that.&lt;/p&gt; &#xA;&lt;p&gt;When a user clicks the &lt;code&gt;MediaRouteButton&lt;/code&gt; a series of events will be triggered in the framework, use &lt;code&gt;ChromecastConnectionListener&lt;/code&gt;&#39;s callbacks to be notified of these events.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private class SimpleChromecastConnectionListener implements ChromecastConnectionListener {&#xA;&#xA;  @Override&#xA;  public void onChromecastConnecting() {&#xA;    Log.d(getClass().getSimpleName(), &#34;onChromecastConnecting&#34;);&#xA;  }&#xA;&#xA;  @Override&#xA;  public void onChromecastConnected(@NonNull ChromecastYouTubePlayerContext chromecastYouTubePlayerContext) {&#xA;    Log.d(getClass().getSimpleName(), &#34;onChromecastConnected&#34;);&#xA;    initializeCastPlayer(chromecastYouTubePlayerContext);&#xA;  }&#xA;&#xA;  @Override&#xA;  public void onChromecastDisconnected() {&#xA;    Log.d(getClass().getSimpleName(), &#34;onChromecastDisconnected&#34;);&#xA;  }&#xA;&#xA;  private void initializeCastPlayer(ChromecastYouTubePlayerContext chromecastYouTubePlayerContext) {&#xA;    chromecastYouTubePlayerContext.initialize(new AbstractYouTubePlayerListener() {&#xA;      @Override&#xA;      public void onReady(@NonNull YouTubePlayer youTubePlayer) {&#xA;        youTubePlayer.loadVideo(&#34;S0Q4gqBUs7c&#34;, 0f);&#xA;      }&#xA;    });&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Only after a Chromecast connection has been established you can initialize the &lt;code&gt;ChromecastConnectionListener&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;From now on it will be the same as using a local &lt;code&gt;YouTubePlayer&lt;/code&gt;. As you can see in the example, you need to call &lt;code&gt;ChromecastYouTubePlayerContext.initialize&lt;/code&gt;, providing a &lt;code&gt;YouTubePlayerListener&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;YouTubePlayerListener&lt;/code&gt; will notify you of changes in the playback. You can call &lt;code&gt;loadVideo&lt;/code&gt;, &lt;code&gt;cueVideo&lt;/code&gt;, &lt;code&gt;pause&lt;/code&gt;, &lt;code&gt;play&lt;/code&gt; etc.. on the &lt;code&gt;YouTubePlayer&lt;/code&gt; object as you&#39;re used to, the library will take care of the communication with the Google Cast device.&lt;/p&gt; &#xA;&lt;p&gt;For how to use the &lt;code&gt;YouTubePlayer&lt;/code&gt; object and &lt;code&gt;YouTubePlayerListener&lt;/code&gt;, you can refer to the documentation for the &lt;em&gt;core&lt;/em&gt; library, &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayer&#34;&gt;YouTubePlayer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This example can be found &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/chromecast-sender-sample-app/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/chromecast/sampleapp/examples/basicExample/BasicExampleActivity.kt&#34;&gt;in the chromecast-sender sample app&lt;/a&gt;, written in Kotlin and in the &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/sampleapp/examples/chromecastExample/&#34;&gt;core sample app&lt;/a&gt;, written in Java.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Screenshot of the CastButton added to the YouTubePlayerView:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/chromecast_screenshot.jpg&#34; alt=&#34;chromecast button screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Receiver&lt;/h3&gt; &#xA;&lt;p&gt;This library requires a custom receiver, you can find the source code of the &lt;em&gt;chromecast-receiver&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/chromecast-receiver&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t need to change anything here, it just works. Take this code and upload it (as it is) on your server. (Read the &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#hosting-the-chromecast-receiver&#34;&gt;hosting paragraph&lt;/a&gt; to learn more about hosting).&lt;/p&gt; &#xA;&lt;h3&gt;Registration&lt;/h3&gt; &#xA;&lt;p&gt;In order to use your receiver you need a receiverId. This is the ID of your receiver app. To get a receiver ID you need to register your receiver on the Google Cast SDK developer console, you can learn how to do it by reading the &lt;a href=&#34;https://developers.google.com/cast/docs/registration&#34;&gt;official documentation&lt;/a&gt;. Remember to register a &lt;strong&gt;Custom Receiver&lt;/strong&gt;, this is the type of receiver you need for this library.&lt;/p&gt; &#xA;&lt;h3&gt;Hosting the chromecast-receiver&lt;/h3&gt; &#xA;&lt;p&gt;You will be required to host your receiver somewhere, host it where you prefer. Firebase free hosting may be a good option, for development.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;For any question feel free to &lt;a href=&#34;https://github.com/PierfrancescoSoffritti/android-youtube-player/issues&#34;&gt;open an issue on the GitHub repository&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>