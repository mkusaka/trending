<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-16T01:39:32Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JetBrains/compose-multiplatform-ios-android-template</title>
    <updated>2023-04-16T01:39:32Z</updated>
    <id>tag:github.com,2023-04-16:/JetBrains/compose-multiplatform-ios-android-template</id>
    <link href="https://github.com/JetBrains/compose-multiplatform-ios-android-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compose Multiplatform iOS+Android Application project template&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform&#34;&gt;Compose Multiplatform&lt;/a&gt; mobile application&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Compose Multiplatform for iOS is in Alpha. It may change incompatibly and require manual migration in the future. We would appreciate your feedback on it in the public Slack channel &lt;a href=&#34;https://kotlinlang.slack.com/archives/C0346LWVBJ4/p1678888063176359&#34;&gt;#compose-ios&lt;/a&gt;. If you face any issues, please report them on &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can use this template to start developing your own &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform#readme&#34;&gt;Compose Multiplatform&lt;/a&gt; mobile application targeting Android and iOS. Follow our tutorial below to get your first Compose Multiplatform app up and running. The result will be a &lt;a href=&#34;https://kotlinlang.org/docs/multiplatform.html&#34;&gt;Kotlin Multiplatform&lt;/a&gt; project that uses Compose Multiplatform UI framework.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/banner.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to create an application targeting desktop platforms – Windows, macOS, and Linux, use the &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform-desktop-template#readme&#34;&gt;Compose Multiplatform for Desktop template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Set up the environment&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; You need a Mac with macOS to write and run iOS-specific code on simulated or real devices. This is an Apple requirement.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To work with this template, you need the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A machine running a recent version of macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/xcode/id497799835&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile&#34;&gt;Kotlin Multiplatform Mobile plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/native-cocoapods.html&#34;&gt;CocoaPods dependency manager&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Check your environment&lt;/h3&gt; &#xA;&lt;p&gt;Before you start, use the &lt;a href=&#34;https://github.com/Kotlin/kdoctor&#34;&gt;KDoctor&lt;/a&gt; tool to ensure that your development environment is configured correctly:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install KDoctor with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;brew install kdoctor&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run KDoctor in your terminal:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;kdoctor&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If everything is set up correctly, you&#39;ll see a valid output:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Environment diagnose (to see all details, use -v option):&#xA;[✓] Operation System&#xA;[✓] Java&#xA;[✓] Android Studio&#xA;[✓] Xcode&#xA;[✓] Cocoapods&#xA;&#xA;Conclusion:&#xA;  ✓ Your system is ready for Kotlin Multiplatform Mobile Development!&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Otherwise, KDoctor will highlight which parts of your setup still need configuration and suggest how to fix them.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Examine the project structure&lt;/h2&gt; &#xA;&lt;p&gt;Open the project in Android Studio and switch the view from &lt;strong&gt;Android&lt;/strong&gt; to &lt;strong&gt;Project&lt;/strong&gt; to see all the files and targets belonging to the project:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/open_project_view.png&#34; height=&#34;300px&#34;&gt; &#xA;&lt;p&gt;Your Compose Multiplatform project includes three modules:&lt;/p&gt; &#xA;&lt;h3&gt;shared&lt;/h3&gt; &#xA;&lt;p&gt;This is a Kotlin module that contains the logic common for both Android and iOS applications, the code you share between platforms.&lt;/p&gt; &#xA;&lt;p&gt;This &lt;code&gt;shared&lt;/code&gt; module is also where you write your Compose Multiplatform code. In &lt;code&gt;shared/src/commonMain/kotlin/App.kt&lt;/code&gt;, you can find the shared root &lt;code&gt;@Composable&lt;/code&gt; function for your app.&lt;/p&gt; &#xA;&lt;p&gt;It uses Gradle as the build system. You can add dependencies and change settings in &lt;code&gt;shared/build.gradle.kts&lt;/code&gt;. The &lt;code&gt;shared&lt;/code&gt; module builds into an Android library and an iOS framework.&lt;/p&gt; &#xA;&lt;h3&gt;androidApp&lt;/h3&gt; &#xA;&lt;p&gt;This is a Kotlin module that builds into an Android application. It uses Gradle as the build system. The &lt;code&gt;androidApp&lt;/code&gt; module depends on and uses the &lt;code&gt;shared&lt;/code&gt; module as a regular Android library.&lt;/p&gt; &#xA;&lt;h3&gt;iosApp&lt;/h3&gt; &#xA;&lt;p&gt;This is an Xcode project that builds into an iOS application. It depends on and uses the &lt;code&gt;shared&lt;/code&gt; module as a CocoaPods dependency.&lt;/p&gt; &#xA;&lt;h2&gt;Run your application&lt;/h2&gt; &#xA;&lt;h3&gt;On Android&lt;/h3&gt; &#xA;&lt;p&gt;To run your application on an Android emulator:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure you have an Android virtual device available. Otherwise, &lt;a href=&#34;https://developer.android.com/studio/run/managing-avds#createavd&#34;&gt;create one&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the list of run configurations, select &lt;code&gt;androidApp&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose your virtual device and click &lt;strong&gt;Run&lt;/strong&gt;:&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/run_on_android.png&#34; height=&#34;60px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/android_app_running.png&#34; height=&#34;200px&#34;&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Alternatively, use Gradle&lt;/summary&gt; &#xA; &lt;p&gt;To install an Android application on a real device Android device or an emulator, run &lt;code&gt;./gradlew installDebug&lt;/code&gt; in the terminal.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;On iOS&lt;/h3&gt; &#xA;&lt;h4&gt;Running on a simulator&lt;/h4&gt; &#xA;&lt;p&gt;To run your application on an iOS simulator in Android Studio, modify the &lt;code&gt;iosApp&lt;/code&gt; run configuration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In the list of run configurations, select &lt;strong&gt;Edit Configurations&lt;/strong&gt;:&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/edit_run_config.png&#34; height=&#34;200px&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to &lt;strong&gt;iOS Application&lt;/strong&gt; | &lt;strong&gt;iosApp&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the &lt;strong&gt;Execution target&lt;/strong&gt; list, select your target device. Click &lt;strong&gt;OK&lt;/strong&gt;:&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/target_device.png&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iosApp&lt;/code&gt; run configuration is now available. Click &lt;strong&gt;Run&lt;/strong&gt; next to your virtual device:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/hello_world_ios.png&#34; height=&#34;200px&#34;&gt; &#xA;&lt;h4&gt;Running on a real device&lt;/h4&gt; &#xA;&lt;p&gt;You can run your Compose Multiplatform application on a real iOS device for free. To do so, you&#39;ll need the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TEAM_ID&lt;/code&gt; associated with your &lt;a href=&#34;https://support.apple.com/en-us/HT204316&#34;&gt;Apple ID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The iOS device registered in Xcode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Before you continue, we suggest creating a simple &#34;Hello, world!&#34; project in Xcode to ensure you can successfully run apps on your device. You can follow the instructions below or watch this &lt;a href=&#34;https://youtu.be/bqu6BquVi2M?start=716&amp;amp;end=1399&#34;&gt;Standford CS193P lecture recording&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to create and run a simple project in Xcode&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;On the Xcode welcome screen, select &lt;strong&gt;Create a new project in Xcode&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;On the &lt;strong&gt;iOS&lt;/strong&gt; tab, choose the &lt;strong&gt;App&lt;/strong&gt; template. Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Specify the product name and keep other settings default. Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Select where to store the project on your computer and click &lt;strong&gt;Create&lt;/strong&gt;. You&#39;ll see an app that displays &#34;Hello, world!&#34; on the device screen.&lt;/li&gt; &#xA;  &lt;li&gt;At the top of your Xcode screen, click on a device name near the &lt;strong&gt;Run&lt;/strong&gt; button.&lt;/li&gt; &#xA;  &lt;li&gt;Plug in your device to the computer. You&#39;ll see this device in the list of run options.&lt;/li&gt; &#xA;  &lt;li&gt;Choose your device and click &lt;strong&gt;Run&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h5&gt;Finding your Team ID&lt;/h5&gt; &#xA;&lt;p&gt;In the terminal, run &lt;code&gt;kdoctor --team-ids&lt;/code&gt; to find your Team ID. KDoctor will list all Team IDs currently configured on your system, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;3ABC246XYZ (Max Sample)&#xA;ZABCW6SXYZ (SampleTech Inc.)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Alternative way of finding your Team ID&lt;/summary&gt; &#xA; &lt;p&gt;If KDoctor doesn&#39;t work for you, try this alternative method:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;In Android Studio, run the &lt;code&gt;iosApp&lt;/code&gt; configuration with the selected real device. The build should fail.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Go to Xcode and select &lt;strong&gt;Open a project or file&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Navigate to the &lt;code&gt;iosApp/iosApp.xcworkspace&lt;/code&gt; file of your project.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;In the left menu, select &lt;code&gt;iosApp&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Navigate to &lt;strong&gt;Signing &amp;amp; Capabilities&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;In the &lt;strong&gt;Team&lt;/strong&gt; list, select your personal team.&lt;/p&gt; &lt;p&gt;If you haven&#39;t set up your team yet, use the &lt;strong&gt;Add account&lt;/strong&gt; option and follow the steps.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;To run the application, set the &lt;code&gt;TEAM_ID&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the template, navigate to the &lt;code&gt;iosApp/Configuration/Config.xcconfig&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Set your &lt;code&gt;TEAM_ID&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Re-open the project in Android Studio. It should show the registered iOS device in the &lt;code&gt;iosApp&lt;/code&gt; run configuration.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Make your first changes&lt;/h2&gt; &#xA;&lt;p&gt;You can now make some changes in the code and see that they will be visible in both iOS and Android applications at once:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In Android Studio, navigate to the &lt;code&gt;shared/src/commonMain/kotlin/App.kt&lt;/code&gt; file. It&#39;s the common entry point for your Compose Multiplatform app.&lt;/p&gt; &lt;p&gt;Here, you see the code responsible for rendering the &#34;Hello, World!&#34; button and the animated Compose Multiplatform logo:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@OptIn(ExperimentalResourceApi::class)&#xA;@Composable&#xA;fun App() {&#xA;    MaterialTheme {&#xA;        var greetingText by remember { mutableStateOf(&#34;Hello, World!&#34;) }&#xA;        var showImage by remember { mutableStateOf(false) }&#xA;        Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#xA;            Button(onClick = {&#xA;                greetingText = &#34;Hello, ${getPlatformName()}&#34;&#xA;                showImage = !showImage&#xA;            }) {&#xA;                Text(greetingText)&#xA;            }&#xA;            AnimatedVisibility(showImage) {&#xA;                Image(&#xA;                    painterResource(&#34;compose-multiplatform.xml&#34;),&#xA;                    null&#xA;                )&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the shared code by adding a text field that will update the name displayed on the button:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;@OptIn(ExperimentalResourceApi::class)&#xA;@Composable&#xA;fun App() {&#xA;    MaterialTheme {&#xA;        var greetingText by remember { mutableStateOf(&#34;Hello, World!&#34;) }&#xA;        var showImage by remember { mutableStateOf(false) }&#xA;        Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#xA;            Button(onClick = {&#xA;                greetingText = &#34;Hello, ${getPlatformName()}&#34;&#xA;                showImage = !showImage&#xA;            }) {&#xA;                Text(greetingText)&#xA;            }&#xA;+           TextField(greetingText, onValueChange = { greetingText = it })&#xA;            AnimatedVisibility(showImage) {&#xA;                Image(&#xA;                    painterResource(&#34;compose-multiplatform.xml&#34;),&#xA;                    null&#xA;                )&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Re-run both &lt;code&gt;androidApp&lt;/code&gt; and &lt;code&gt;iosApp&lt;/code&gt; configurations. You&#39;ll see this change reflected in both the Android and iOS apps:&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/text_field_added.png&#34; height=&#34;200px&#34;&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to configure the iOS application&lt;/h2&gt; &#xA;&lt;p&gt;To get a better understanding of this template&#39;s setup and learn how to configure the basic properties of your iOS app without Xcode, open the &lt;code&gt;iosApp/Configuration/Config.xcconfig&lt;/code&gt; file in Android Studio. The configuration file contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;APP_NAME&lt;/code&gt;, a target executable and an application bundle name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BUNDLE_ID&lt;/code&gt; that &lt;a href=&#34;https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleidentifier#discussion&#34;&gt;uniquely identifies the app throughout the system&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TEAM_ID&lt;/code&gt;, &lt;a href=&#34;https://developer.apple.com/help/account/manage-your-team/locate-your-team-id/#:~:text=A%20Team%20ID%20is%20a,developer%20in%20App%20Store%20Connect&#34;&gt;a unique identifier generated by Apple that&#39;s assigned to your team&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To configure the &lt;code&gt;APP_NAME&lt;/code&gt; option, open &lt;code&gt;Config.xcconfig&lt;/code&gt; in any text editor &lt;em&gt;before opening&lt;/em&gt; the project in Android Studio and set the desired name.&lt;/p&gt; &#xA;&lt;p&gt;If you need to change this option after you open the project in Android Studio, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Close the project in Android Studio.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./cleanup.sh&lt;/code&gt; in your terminal.&lt;/li&gt; &#xA; &lt;li&gt;Change the setting.&lt;/li&gt; &#xA; &lt;li&gt;Open the project in Android Studio again.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To configure advanced settings, use Xcode. After opening the project in Android Studio, go to Xcode and open the &lt;code&gt;iosApp/iosApp.xcworkspace&lt;/code&gt; file, and make changes.&lt;/p&gt; &#xA;&lt;h2&gt;Next steps&lt;/h2&gt; &#xA;&lt;p&gt;We encourage you to explore Compose Multiplatform further and try out more projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform#readme&#34;&gt;Learn about other cases where you can use the Compose Multiplatform UI framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform-desktop-template#readme&#34;&gt;Create an application targeting Windows, macOS, and Linux with Compose Multiplatform for Desktop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/raw/master/tutorials/README.md&#34;&gt;Complete more Compose Multiplatform tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/raw/master/examples/README.md&#34;&gt;Explore some more advanced Compose Multiplatform example projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Kotlin/kotlin-wasm-examples</title>
    <updated>2023-04-16T01:39:32Z</updated>
    <id>tag:github.com,2023-04-16:/Kotlin/kotlin-wasm-examples</id>
    <link href="https://github.com/Kotlin/kotlin-wasm-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Examples with Kotlin/Wasm&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/JetBrains#jetbrains-on-github&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/incubator-plastic.svg?sanitize=true&#34; alt=&#34;Incubator&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Kotlin/Wasm Examples&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a collection of examples demonstrating how to use &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlin-wasm-examples/main/kotl.in/wasm&#34;&gt;Kotlin/Wasm&lt;/a&gt;. Each example includes the source code and a README.md file explaining how to build and run the example.&lt;/p&gt; &#xA;&lt;p&gt;To know more about Kotlin wasm, please visit &lt;a href=&#34;https://kotl.in/wasm&#34;&gt;https://kotl.in/wasm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlin-wasm-examples/main/compose-imageviewer#compose-multiplatform-for-web&#34;&gt;Compose Image Viewer&lt;/a&gt; — Web version of Image Viewer application built with Compose Multiplatform&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlin-wasm-examples/main/browser-example#kotlinwasm-browser-example&#34;&gt;Browser Example&lt;/a&gt; -- A simple app showing &#34;Hello World&#34; in the browser using DOM API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlin-wasm-examples/main/nodejs-example#kotlinwasm-nodejs-example&#34;&gt;Node.js Example&lt;/a&gt; -- A simple app printing &#34;Hello World&#34; in the Node.js.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kowasm/kowasm&#34;&gt;KoWasm&lt;/a&gt; -- Server-side and full stack development with Kotlin and WebAssembly leveraging WASI and Component Model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build and run&lt;/h2&gt; &#xA;&lt;p&gt;To build and run an example, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the directory of the example you want to build and run.&lt;/li&gt; &#xA; &lt;li&gt;Follow instruction in the README.md&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Feedback &amp;amp; Questions&lt;/h2&gt; &#xA;&lt;p&gt;Try examples, and share your feedback and ask questions in the Kotlin Slack &lt;a href=&#34;https://slack-chats.kotlinlang.org/c/webassembly&#34;&gt;#webassembly&lt;/a&gt; channel (if you’re not a member, &lt;a href=&#34;https://kotl.in/slack&#34;&gt;apply here&lt;/a&gt;) or on Twitter to &lt;a href=&#34;https://twitter.com/bashorov&#34;&gt;@bashorov&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>deniscerri/ytdlnis</title>
    <updated>2023-04-16T01:39:32Z</updated>
    <id>tag:github.com,2023-04-16:/deniscerri/ytdlnis</id>
    <link href="https://github.com/deniscerri/ytdlnis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android Video/Audio Downloader app using yt-dlp&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/app_icon.PNG&#34; width=&#34;30%&#34;&gt; &lt;br&gt; YTDLnis &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; YTDLnis is a free and open source video/audio downloader using yt-dlp for Android 6.0 and above. &lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/deniscerri/ytdlnis/actions/workflows/android.yml/badge.svg?branch=main&amp;amp;event=pull&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://github.com/deniscerri/ytdlnis/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/deniscerri/ytdlnis.svg?maxAge=3600&amp;amp;label=download&#34; alt=&#34;stable release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/deniscerri/ytdlnis/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/deniscerri/ytdlnis.svg?maxAge=3600&amp;amp;include_prereleases&amp;amp;label=preview&#34; alt=&#34;preview release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/deniscerri/ytdlnis/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/deniscerri/ytdlnis/total?style=flat-square&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hosted.weblate.org/engage/ytdlnis/?utm_source=widget&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/ytdlnis/-/svg-badge.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/WW3KYWxAPm&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-YTDLnis-blueviolet?style=flat-square&amp;amp;logo=discord&#34; alt=&#34;community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/ytdlnis&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-YTDLnis-blue?style=flat-square&amp;amp;logo=telegram&#34; alt=&#34;community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;💡 Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;download audio/video files from more than &lt;a href=&#34;https://github.com/yt-dlp/yt-dlp/raw/master/supportedsites.md&#34;&gt;1000 websites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;download playlists or multi select items&lt;/li&gt; &#xA; &lt;li&gt;queue downloads and schedule them by date and time&lt;/li&gt; &#xA; &lt;li&gt;use custom commands and templates or go full terminal mode&lt;/li&gt; &#xA; &lt;li&gt;remove sponsorblock chapters&lt;/li&gt; &#xA; &lt;li&gt;embed subtitles/metadata/chapters etc&lt;/li&gt; &#xA; &lt;li&gt;modify metadata such as title and author&lt;/li&gt; &#xA; &lt;li&gt;split item into separate files depending on its chapters&lt;/li&gt; &#xA; &lt;li&gt;select different download formats&lt;/li&gt; &#xA; &lt;li&gt;process multiple items before download&lt;/li&gt; &#xA; &lt;li&gt;quick share card right from the share menu&lt;/li&gt; &#xA; &lt;li&gt;search or insert a link from the app&lt;/li&gt; &#xA; &lt;li&gt;log downloads&lt;/li&gt; &#xA; &lt;li&gt;re-download cancelled or failed downloads&lt;/li&gt; &#xA; &lt;li&gt;incognito mode when you don&#39;t want to save a download history&lt;/li&gt; &#xA; &lt;li&gt;download multiple items at the same time&lt;/li&gt; &#xA; &lt;li&gt;change preferred audio/video formats and qualities&lt;/li&gt; &#xA; &lt;li&gt;Material You interface&lt;/li&gt; &#xA; &lt;li&gt;MVVM Architecture w/ WorkManager&lt;/li&gt; &#xA; &lt;li&gt;easy to use :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📲 Screenshots&lt;/h2&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/phoneScreenshots/1.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/phoneScreenshots/2.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/phoneScreenshots/3.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/phoneScreenshots/4.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/phoneScreenshots/5.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/phoneScreenshots/6.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/phoneScreenshots/7.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/phoneScreenshots/8.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/phoneScreenshots/9.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/phoneScreenshots/10.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/phoneScreenshots/11.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/fastlane/metadata/android/en-US/images/phoneScreenshots/12.png&#34; width=&#34;30%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;💬 Contact&lt;/h2&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://t.me/ytdlnis&#34;&gt;Telegram Channel&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/WW3KYWxAPm&#34;&gt;Discord&lt;/a&gt; for discussion, announcements, and releases!&lt;/p&gt; &#xA;&lt;h2&gt;🔑 Connect with YouTube ReVanced&lt;/h2&gt; &#xA;&lt;p&gt;The App&#39;s package name is com.deniscerri.ytdl&lt;/p&gt; &#xA;&lt;h2&gt;📝 Help Translate on Weblate&lt;/h2&gt; &#xA;&lt;a href=&#34;https://hosted.weblate.org/engage/ytdlnis/&#34;&gt; &lt;img src=&#34;https://hosted.weblate.org/widgets/ytdlnis/-/multi-auto.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;😇 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to contribute. Please read the &lt;a href=&#34;https://raw.githubusercontent.com/deniscerri/ytdlnis/main/CONTRIBUTING.MD&#34;&gt;Contributing&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;📄 License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deniscerri/ytdlnis/raw/main/LICENSE&#34;&gt;GNU GPL v3.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;⚠️ Warning &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Except for the source code licensed under the GPLv3 license, all other parties are prohibited from using the &#39;YTDLnis&#39; name as a downloader app, and the same is true for its derivatives. Derivatives include but are not limited to forks and unofficial builds.&lt;/p&gt; &#xA;&lt;h2&gt;🙏 Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yt-dlp/yt-dlp&#34;&gt;yt-dlp&lt;/a&gt; and its contributors for making this tool possible. Without it this app wouldn&#39;t exist.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yausername/youtubedl-android&#34;&gt;youtubedl-android&lt;/a&gt; for porting yt-dlp to android&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yausername/dvd&#34;&gt;dvd&lt;/a&gt; for showing how to implement youtubedl-android&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JunkFood02/Seal&#34;&gt;seal&lt;/a&gt; for certain design elements and features i wanted to use aswell in this app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/decipher3114&#34;&gt;decipher3114&lt;/a&gt; for the app icon&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and alot of other internet forum strangers.&lt;/p&gt;</summary>
  </entry>
</feed>