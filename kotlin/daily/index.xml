<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T01:46:05Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>android/compose-samples</title>
    <updated>2022-06-04T01:46:05Z</updated>
    <id>tag:github.com,2022-06-04:/android/compose-samples</id>
    <link href="https://github.com/android/compose-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Jetpack Compose samples.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jetpack Compose Samples&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/samples_montage.gif&#34; alt=&#34;Jetpack Compose Samples&#34; width=&#34;1024&#34;&gt; &#xA;&lt;p&gt;This repository contains a set of individual Android Studio projects to help you learn about Compose in Android. Each sample demonstrates different use cases, complexity levels and APIs.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;read the documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ðŸ’» Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To try out these sample apps, you need to use &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt;. You can clone this repository or import the project from Android Studio following the steps &lt;a href=&#34;https://developer.android.com/jetpack/compose/setup#sample&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ðŸ§¬ Samples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/jetnews.png&#34; alt=&#34;JetNews&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt; A sample blog post viewer that demonstrates the use of Compose with a typical Material app and real-world architecture. &lt;br&gt;&lt;br&gt; â€¢ Medium complexity&lt;br&gt;â€¢ Varied UI&lt;br&gt;â€¢ Light &amp;amp; dark themes&lt;br&gt;â€¢ Resource loading&lt;br&gt;â€¢ UI Testing &lt;br&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/JetNews/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/JetNews.png&#34; width=&#34;320&#34; alt=&#34;Jetnews sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/jetchat.png&#34; alt=&#34;Jetchat&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A sample chat app that focuses on UI state patterns and text input.&lt;br&gt;&lt;br&gt;â€¢ Low complexity&lt;br&gt;â€¢ Material Design 3 theme and Material You dynamic color&lt;br&gt;â€¢ Resource loading&lt;br&gt;â€¢ Back button handling&lt;br&gt;â€¢ Integration with Architecture Components: Navigation, Fragments, LiveData, ViewModel&lt;br&gt;â€¢ Animation&lt;br&gt;â€¢ UI Testing&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Jetchat/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Jetchat.png&#34; width=&#34;320&#34; alt=&#34;Jetchat sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/jetsurvey.png&#34; alt=&#34;Jetsurvey&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A sample survey app that showcases text input, validation and UI state management in Compose.&lt;br&gt;&lt;br&gt;â€¢ Low complexity&lt;br&gt;â€¢ &lt;code&gt;TextField&lt;/code&gt; and form validation&lt;br&gt;â€¢ Snackbar implementation&lt;br&gt;â€¢ Element reusability and styling&lt;br&gt;â€¢ Various form elements&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Jetsurvey/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Jetsurvey.png&#34; width=&#34;320&#34; alt=&#34;Jetsurvey sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/jetsnack.png&#34; alt=&#34;Jetsnack&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;Jetsnack is a sample snack ordering app built with Compose.&lt;br&gt;&lt;br&gt;â€¢ Medium complexity&lt;br&gt;â€¢ Custom design system&lt;br&gt;â€¢ Custom layouts&lt;br&gt;â€¢ Animation&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Jetsnack/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Jetsnack.png&#34; width=&#34;320&#34; alt=&#34;Jetsnack sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/jetcaster.png&#34; alt=&#34;Jetcaster&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A sample podcast app that features a full-featured, Redux-style architecture and showcases dynamic themes.&lt;br&gt;&lt;br&gt;â€¢ Advanced sample&lt;br&gt;â€¢ Dynamic theming using podcast artwork&lt;br&gt;â€¢ Image fetching&lt;br&gt;â€¢ &lt;a href=&#34;https://developer.android.com/reference/kotlin/android/view/WindowInsets&#34;&gt;&lt;code&gt;WindowInsets&lt;/code&gt;&lt;/a&gt; support&lt;br&gt;â€¢ Coroutines&lt;br&gt;â€¢ Local storage with Room&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Jetcaster/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Jetcaster.png&#34; width=&#34;320&#34; alt=&#34;Jetcaster sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/rally.png&#34; alt=&#34;Rally&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A Compose implementation of the Rally Material study, a financial app that focuses on data, charts, reusability and animations.&lt;br&gt;&lt;br&gt;â€¢ Low complexity&lt;br&gt;â€¢ Material theming with a dark-only theme&lt;br&gt;â€¢ Custom layouts and reusable elements&lt;br&gt;â€¢ Charts and tables&lt;br&gt;â€¢ Animations&lt;br&gt;â€¢ Screenshot tests&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Rally/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Rally.png&#34; width=&#34;320&#34; alt=&#34;Rally sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/crane.png&#34; alt=&#34;Crane&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A Compose implementation of the Crane Material study, a travel app that uses Material Design components and Material Theming to create a personalized, on-brand experience.&lt;br&gt;&lt;br&gt;â€¢ Medium complexity&lt;br&gt;â€¢ Draggable UI elements&lt;br&gt;â€¢ UI state handling&lt;br&gt;â€¢ UI Tests&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Crane/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Crane.png&#34; width=&#34;320&#34; alt=&#34;Crane sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/owl.png&#34; alt=&#34;Owl&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A Compose implementation of the Owl Material study. The Owl brand uses bold color, shape, and typography to express its brand attributes: energy, daring, and fun.&lt;br&gt;&lt;br&gt;â€¢ Medium complexity&lt;br&gt;â€¢ Material theming &amp;amp; light/dark themes&lt;br&gt;â€¢ Custom layout&lt;br&gt;â€¢ Animation&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Owl/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Owl.png&#34; width=&#34;320&#34; alt=&#34;Owl sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;ðŸ§¬ Additional samples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/material_catalog.png&#34; alt=&#34;Material Catalog&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A catalog of Material Design components and features available in Jetpack Compose. See how to implement them and how they look and behave on real devices.&lt;br&gt;&lt;br&gt;â€¢ Lives in AOSPâ€”always up to date&lt;br&gt;â€¢ Uses the same samples as API reference docs&lt;br&gt;â€¢ Theme picker to change Material Theming values at runtime&lt;br&gt;â€¢ Links to guidelines, docs, source code, and issue tracker&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=androidx.compose.material.catalog&#34;&gt;&amp;gt; Get it on Google Play&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:compose/integration-tests/material-catalog&#34;&gt;&amp;gt; Browse on AOSP&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Material_Catalog.png&#34; width=&#34;320&#34; alt=&#34;Material Catalog sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/sunflower.png&#34; alt=&#34;Sunflower&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A gardening app illustrating Android development best practices with Android Jetpack. The &lt;code&gt;compose&lt;/code&gt; branch is partially built with Jetpack Compose.&lt;br&gt;&lt;br&gt;â€¢ Compose working in an existing app: including integration with strings, resources, and themes and styles&lt;br&gt;â€¢ Integration with an existing architecture based on Jetpack libraries&lt;br&gt;â€¢ &lt;code&gt;CollapsingToolbarLayout&lt;/code&gt; behavior implemented manually with Compose&lt;br&gt;â€¢ Showing &lt;a href=&#34;https://material.io/components/snackbars&#34;&gt;Snackbars&lt;/a&gt; with Compose&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://goo.gle/sunflower-compose&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Sunflower.png&#34; width=&#34;320&#34; alt=&#34;Sunflower sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/tivi.png&#34; alt=&#34;Tivi&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A work-in-progress TV show tracking Android app, which connects to &lt;a href=&#34;https://www.trakt.tv&#34;&gt;Trakt.tv&lt;/a&gt;.&lt;br&gt;&lt;br&gt;â€¢ Entirely written in &lt;a href=&#34;https://kotlinlang.org&#34;&gt;Kotlin&lt;/a&gt; and uses &lt;a href=&#34;https://kotlinlang.org/docs/reference/coroutines/coroutines-guide.html&#34;&gt;Kotlin Coroutines&lt;/a&gt; throughout&lt;br&gt;â€¢ Uses many of the &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture&#34;&gt;Architecture Components&lt;/a&gt;: Room, Lifecycle, Navigation&lt;br&gt;â€¢ Uses &lt;a href=&#34;https://dagger.dev/hilt&#34;&gt;Hilt&lt;/a&gt; for dependency injection&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://tivi.app&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Tivi.jpg&#34; width=&#34;320&#34; alt=&#34;Tivi sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/nia.png&#34; alt=&#34;Now in Android&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;An app for keeping up to date with the latest news and developments in Android.&lt;br&gt;&lt;br&gt;â€¢ &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt; first app.&lt;br&gt;â€¢ Implements the recommended Android &lt;a href=&#34;https://developer.android.com/topic/architecture&#34;&gt;Architecture Guidelines&lt;/a&gt; &lt;br&gt;â€¢ Integrates &lt;a href=&#34;https://developer.android.com/jetpack&#34;&gt;Jetpack Libraries&lt;/a&gt; holistically in the context of a real world app&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/android/nowinandroid&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/NiA.png&#34; width=&#34;320&#34; alt=&#34;Now In Android Github Repository&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2020 The Android Open Source Project&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    https://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jitsi/jitsi-videobridge</title>
    <updated>2022-06-04T01:46:05Z</updated>
    <id>tag:github.com,2022-06-04:/jitsi/jitsi-videobridge</id>
    <link href="https://github.com/jitsi/jitsi-videobridge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jitsi Videobridge is a WebRTC compatible video router or SFU that lets build highly scalable video conferencing infrastructure (i.e., up to hundreds of conferences per server).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Intro&lt;/h1&gt; &#xA;&lt;p&gt;Jitsi Videobridge is an XMPP server component that allows for multiuser video communication. Unlike the expensive dedicated hardware videobridges, Jitsi Videobridge does not mix the video channels into a composite video stream, but only relays the received video channels to all call participants. Therefore, while it does need to run on a server with good network bandwidth, CPU horsepower is not that critical for performance.&lt;/p&gt; &#xA;&lt;p&gt;You can find documentation in the doc/ directory in the source tree.&lt;/p&gt; &#xA;&lt;h1&gt;Running it&lt;/h1&gt; &#xA;&lt;p&gt;You can download binary packages for Debian/Ubuntu:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://download.jitsi.org/stable/&#34;&gt;stable&lt;/a&gt; (&lt;a href=&#34;https://jitsi.org/downloads/ubuntu-debian-installations-instructions/&#34;&gt;instructions&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://download.jitsi.org/testing/&#34;&gt;testing&lt;/a&gt; (&lt;a href=&#34;https://jitsi.org/downloads/ubuntu-debian-installations-instructions-for-testing/&#34;&gt;instructions&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://download.jitsi.org/unstable/&#34;&gt;nightly&lt;/a&gt; (&lt;a href=&#34;https://jitsi.org/downloads/ubuntu-debian-installations-instructions-nightly/&#34;&gt;instructions&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Maven assembly binaries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://download.jitsi.org/jitsi-videobridge/&#34;&gt;assemblies&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Or you can clone the Git repo and run the JVB from source using maven.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;JVB_HOME=&#34;The path to your JVB clone.&#34;&#xA;&#xA;mvn compile exec:exec -Dexec.executable=java -Dexec.args=&#34;-cp %classpath org.jitsi.videobridge.MainKt -Djava.library.path=$JVB_HOME/lib/native/linux-64 -Djava.util.logging.config.file=$JVB_HOME/lib/logging.properties -Dnet.java.sip.communicator.SC_HOME_DIR_NAME=.jitsi-videobridge &#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Kr328/ClashForAndroid</title>
    <updated>2022-06-04T01:46:05Z</updated>
    <id>tag:github.com,2022-06-04:/Kr328/ClashForAndroid</id>
    <link href="https://github.com/Kr328/ClashForAndroid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A rule-based tunnel for Android.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Clash for Android&lt;/h2&gt; &#xA;&lt;p&gt;A Graphical user interface of &lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;clash&lt;/a&gt; for Android&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.github.kr328.clash&#34;&gt;&lt;img width=&#34;200px&#34; alt=&#34;Get it on Google Play&#34; src=&#34;https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png&#34;&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/Kr328/ClashForAndroid/releases&#34;&gt;Releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Feature&lt;/h3&gt; &#xA;&lt;p&gt;Fully feature of &lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;clash&lt;/a&gt; &lt;del&gt;(Exclude &lt;code&gt;external-controller&lt;/code&gt;&lt;/del&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirement&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android 5.0+ (minimum)&lt;/li&gt; &#xA; &lt;li&gt;Android 7.0+ (recommend)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;armeabi-v7a&lt;/code&gt; , &lt;code&gt;arm64-v8a&lt;/code&gt;, &lt;code&gt;x86&lt;/code&gt; or &lt;code&gt;x86_64&lt;/code&gt; Architecture&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/Kr328/ClashForAndroid/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Kr328/ClashForAndroid/main/NOTICE&#34;&gt;NOTICE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Privacy Policy&lt;/h3&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/Kr328/ClashForAndroid/main/PRIVACY_POLICY.md&#34;&gt;PRIVACY_POLICY.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Update submodules&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;strong&gt;OpenJDK 11&lt;/strong&gt;, &lt;strong&gt;Android SDK&lt;/strong&gt;, &lt;strong&gt;CMake&lt;/strong&gt; and &lt;strong&gt;Golang&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;local.properties&lt;/code&gt; in project root with&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;sdk.dir=/path/to/android-sdk&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;signing.properties&lt;/code&gt; in project root with&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;keystore.path=/path/to/keystore/file&#xA;keystore.password=&amp;lt;key store password&amp;gt;&#xA;key.alias=&amp;lt;key alias&amp;gt;&#xA;key.password=&amp;lt;key password&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew app:assembleFossRelease&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pick &lt;code&gt;app-foss-&amp;lt;arch&amp;gt;-release.apk&lt;/code&gt; in &lt;code&gt;app/build/outputs/apk/foss/release/&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>