<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-30T01:32:08Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>getspherelabs/anypass-kmp</title>
    <updated>2023-09-30T01:32:08Z</updated>
    <id>tag:github.com,2023-09-30:/getspherelabs/anypass-kmp</id>
    <link href="https://github.com/getspherelabs/anypass-kmp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AnyPass: A compose multiplatform app for your all-in-one password management&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/getspherelabs/anypass-kmp&#34;&gt;&lt;img alt=&#34;AnyPass Banner&#34; src=&#34;https://github.com/getspherelabs/anypass-kmp/raw/main/media/rounded-banner.png?raw=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Kotlin-1.9.0-blue.svg?style=flat&amp;amp;logo=kotlin&#34;&gt; &lt;/a&gt; &lt;a href=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/iOS-14.0%2B-green&#34;&gt; &lt;/a&gt; &lt;a href=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5-F16D39.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/platform-android-6EDB8D.svg?style=flat&#34;&gt; &lt;/a&gt;  &lt;a href=&#34;&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/platform-ios-EAEAEA.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;AnyPass (Work In Progress ‚õè)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;AnyPass&lt;/a&gt; is your one-stop solution for password management, password generation, and password health analysis.&lt;/p&gt; &#xA;&lt;h1&gt;Architecture&lt;/h1&gt; &#xA;&lt;p&gt;The app architecture has three layers: a data layer, a domain layer and a UI layer. Cosmo uses Meteor KMP to create application using MVI architecture. It provides a unidirectional data flow (UDF), allowing you to handle state changes and propagate them to the UI efficiently.&lt;/p&gt; &#xA;&lt;h3&gt;Single source of truth&lt;/h3&gt; &#xA;&lt;p&gt;When a new data type is defined in your app, you should assign a Single Source of Truth (SSOT) to it. The SSOT is the owner of that data, and only the SSOT can modify or mutate it. To achieve this, the SSOT exposes the data using an immutable type, and to modify the data, the SSOT exposes functions or receive events that other types can call.&lt;/p&gt; &#xA;&lt;p&gt;This pattern brings multiple benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It centralizes all the changes to a particular type of data in one place.&lt;/li&gt; &#xA; &lt;li&gt;It protects the data so that other types cannot tamper with it.&lt;/li&gt; &#xA; &lt;li&gt;It makes changes to the data more traceable. Thus, bugs are easier to spot.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In an offline-first application, the source of truth for application data is typically a database. In some other cases, the source of truth can be a ViewModel or even the UI.&lt;/p&gt; &#xA;&lt;h1&gt;Technology&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Kotlin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Compose Multiplatform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Kotlin Coroutine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;SqlDelight&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Koin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Meteor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Firebase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Multiplatform Settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Moko Resource&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Sentry Multiplatform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;BuildKonfig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Coil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Meteor ViewModel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Turbine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Ktlint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Spotless&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;Jacoco&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Modularization&lt;/h1&gt; &#xA;&lt;p&gt;Modularization is the practice of breaking the concept of a monolithic, one-module codebase into loosely coupled, self contained modules.&lt;/p&gt; &#xA;&lt;p&gt;A barebone module is simply a directory with a Gradle build script inside. Usually though, a module will consist of one or more source sets and possibly a collection of resources or assets. Modules can be built and tested independently. Due to Gradle&#39;s flexibility there are few constraints as to how you can organize your project. In general, you should strive for low coupling and high cohesion.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Low coupling&lt;/strong&gt; - Modules should be as independent as possible from one another, so that changes to one module have zero or minimal impact on other modules. They should not possess knowledge of the inner workings of other modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High cohesion&lt;/strong&gt; - A module should comprise a collection of code that acts as a system. It should have clearly defined responsibilities and stay within boundaries of certain domain knowledge.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Core Module:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;&#xA;    core--&amp;gt;common;&#xA;    core--&amp;gt;designsystem;&#xA;    core--&amp;gt;analytics;&#xA;    designsystem--&amp;gt;shared;&#xA;    common--&amp;gt;shared;&#xA;    analytics--&amp;gt;shared;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manager Module:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;&#xA;    manager--&amp;gt;password;&#xA;    manager--&amp;gt;biometry;&#xA;    features--&amp;gt;generatepassword;&#xA;    password--&amp;gt;generatepassword;&#xA;    biometry--&amp;gt;shared;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data Module:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;&#xA;    data--&amp;gt;local;&#xA;    data--&amp;gt;authManager;&#xA;    data--&amp;gt;settings;&#xA;&#xA;    features--&amp;gt;onboarding;&#xA;    features--&amp;gt;auth;&#xA;    features--&amp;gt;addnewpassword;&#xA;    features--&amp;gt;home;&#xA;    features--&amp;gt;auth;&#xA;&#xA;    settings--&amp;gt; features;&#xA;    local--&amp;gt;features;&#xA;    authManager--&amp;gt;features;&#xA;    onboarding--&amp;gt;shared;&#xA;    auth--&amp;gt;shared;&#xA;    home--&amp;gt;shared;&#xA;    addnewpassword--&amp;gt;shared;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Feature Module:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;&#xA;    features--&amp;gt;onboarding;&#xA;    features--&amp;gt;auth;&#xA;    features--&amp;gt;addnewpassword;&#xA;    features--&amp;gt;home;&#xA;    features--&amp;gt;auth;&#xA;    features--&amp;gt;space;&#xA;    features--&amp;gt;generatepassword;&#xA;   &#xA;    onboarding--&amp;gt;shared;&#xA;    auth--&amp;gt;shared;&#xA;    home--&amp;gt;shared;&#xA;    addnewpassword--&amp;gt;shared;&#xA;    space--&amp;gt;shared;&#xA;    generatepassword--&amp;gt;shared;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want to contribute?&lt;/strong&gt; See &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/getspherelabs/anypass-kmp/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/strong&gt; &lt;a href=&#34;https://github.com/getspherelabs/anypass-kmp/fork&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/getspherelabs/anypass-kmp?logo=github&amp;amp;style=social&#34; alt=&#34;Fork AnyPass&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java 17+&lt;/li&gt; &#xA; &lt;li&gt;iOS: 14.0+&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>