<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-10T01:35:23Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>izhangzhihao/intellij-rainbow-brackets</title>
    <updated>2022-11-10T01:35:23Z</updated>
    <id>tag:github.com,2022-11-10:/izhangzhihao/intellij-rainbow-brackets</id>
    <link href="https://github.com/izhangzhihao/intellij-rainbow-brackets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌈Rainbow Brackets for IntelliJ based IDEs/Android Studio/HUAWEI DevEco Studio&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/10080-rainbow-brackets&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/src/main/resources/META-INF/pluginIcon.svg?sanitize=true&#34; width=&#34;320&#34; height=&#34;320&#34; alt=&#34;logo&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Intellij rainbow brackets&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;🌈Rainbow Brackets for IntelliJ based IDEs/Android Studio/HUAWEI DevEco Studio.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- &lt;a href=&#34;https://actions-badge.atrox.dev/izhangzhihao/intellij-rainbow-brackets/goto?ref=2020.3&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fizhangzhihao%2Fintellij-rainbow-brackets%2Fbadge%3Fref%3D2020.3&amp;style=flat-square&#34; /&gt;&lt;/a&gt; --&gt; &#xA; &lt;!-- &lt;a href=&#34;https://github.com/izhangzhihao/intellij-rainbow-brackets/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/izhangzhihao/intellij-rainbow-brackets.svg?style=flat-square&#34;&gt;&lt;/a&gt; --&gt; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/10080-rainbow-brackets&#34;&gt;&lt;img src=&#34;https://img.shields.io/jetbrains/plugin/r/stars/10080?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plugins.jetbrains.com/embeddable/install/10080&#34;&gt;&lt;img src=&#34;https://img.shields.io/jetbrains/plugin/d/10080-rainbow-brackets.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/10080-rainbow-brackets&#34;&gt;&lt;img src=&#34;https://img.shields.io/jetbrains/plugin/v/10080-rainbow-brackets.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets#backer&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/backers/intellij-rainbow-brackets?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets#sponsor&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/sponsors/intellij-rainbow-brackets?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/izhangzhihao/intellij-rainbow-brackets/raw/2020.3/CHANGELOG.md&#34;&gt;Change log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#compatibility&#34;&gt;Compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#supported-languages&#34;&gt;Supported languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#authors-choice&#34;&gt;Author&#39;s choice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#sponsored-by-codestream&#34;&gt;Sponsored By CodeStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#customize-colors&#34;&gt;Customize colors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#use-color-generator&#34;&gt;Use color generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#config-file-path&#34;&gt;Config file path&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#html-code-in-js&#34;&gt;HTML code in js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#kotlin-function-literal-braces-and-arrow&#34;&gt;Kotlin function literal braces and arrow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#disable-rainbow-brackets-for-specific-languages&#34;&gt;Disable rainbow brackets for specific languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#support-us&#34;&gt;Support Us&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#backers&#34;&gt;Backers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;IntelliJ IDEA, PhpStorm, WebStorm, PyCharm, RubyMine, AppCode, CLion, Gogland, DataGrip, Rider, MPS, Android Studio, HUAWEI DevEco Studio, DataSpell, Code With Me&lt;/p&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;p&gt;Java, Scala, Clojure, Kotlin, Python, Haskell, Agda, Rust, JavaScript, TypeScript, Erlang, Go, Groovy, Ruby, Elixir, ObjectiveC, PHP, HTML, XML, SQL, Apex language, C#, Dart, Pug/Jade, Bash, Vue.js, C# Razor Pages, GLSL(the OpenGL Shading Language), Go Template, C++, C, Solidity...&lt;/p&gt; &#xA;&lt;h2&gt;Author&#39;s choice&lt;/h2&gt; &#xA;&lt;p&gt;Rainbow Brackets + One Dark Theme + Nyan Progress Bar + &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt; (Font)&lt;/p&gt; &#xA;&lt;h2&gt;Sponsored By &lt;a href=&#34;https://sponsorlink.codestream.com/?utm_source=jbmarket&amp;amp;utm_campaign=jbrainbowbrackets&amp;amp;utm_medium=banner&#34;&gt;CodeStream&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sponsorlink.codestream.com/?utm_source=jbmarket&amp;amp;utm_campaign=jbrainbowbrackets&amp;amp;utm_medium=banner&#34;&gt;&lt;img src=&#34;https://alt-images.codestream.com/codestream_logo_jbrainbowbrackets.png&#34; alt=&#34;https://codestream.com&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Eliminate context switching and costly distractions. Create and merge PRs and perform code reviews from inside your IDE while using jump-to-definition, your keybindings, and other IDE favorites. &lt;a href=&#34;https://sponsorlink.codestream.com/?utm_source=jbmarket&amp;amp;utm_campaign=jbrainbowbrackets&amp;amp;utm_medium=banner&#34;&gt;Learn more&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Development powered by &lt;a href=&#34;https://www.jetbrains.com/?from=IntelliJRainbowBrackets&#34;&gt;JetBrains&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=IntelliJRainbowBrackets&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/screenshots/jetbrains.svg?sanitize=true&#34; alt=&#34;https://www.jetbrains.com/?from=IntelliJRainbowBrackets&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whichever technologies you use, there&#39;s a JetBrains tool to match.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;a href=&#34;https://plugins.jetbrains.com/embeddable/install/10080&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/12044174/123105697-94066100-d46a-11eb-9832-338cdf4e0612.png&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Or you could install it inside your IDE:&lt;/p&gt; &#xA;&lt;p&gt;For Windows &amp;amp; Linux - &lt;kbd&gt;File&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Settings&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Plugins&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Marketplace&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Search for &#34;Rainbow Brackets&#34;&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Install Plugin&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Restart IntelliJ IDEA&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Mac - &lt;kbd&gt;IntelliJ IDEA&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Preferences&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Plugins&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Marketplace&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Search for &#34;Rainbow Brackets&#34;&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Install Plugin&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Restart IntelliJ IDEA&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Install snapshot build&lt;/h3&gt; &#xA;&lt;p&gt;You can download the latest snapshot build from &lt;a href=&#34;https://github.com/izhangzhihao/intellij-rainbow-brackets/actions/workflows/build.yml?query=workflow%3ABuild&#34;&gt;here&lt;/a&gt;, just click the latest build and click the &#39;Artifacts&#39; tab.(You need logged in via github) After the snapshot build downloaded, unzip it(via &lt;code&gt;unzip UnZipMe.zip&lt;/code&gt;), and install the zip file(intellij-rainbow-brackets.zip&lt;a href=&#34;&#34;&gt;&lt;/a&gt;) by &lt;code&gt;Install Plugin from Disk...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/screenshots/with-java.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/screenshots/with-material-theme-ui.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scala&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/screenshots/with-scala.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clojure&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/screenshots/with-Clojure.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kotlin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/screenshots/with-kotlin.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTML/XML&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/screenshots/with-HTML.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scope highlighting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;The highlight effects will not remove after release the shortcuts, but press &lt;code&gt;ESC&lt;/code&gt; key can do this. You could also config &lt;code&gt;Press any key to remove the highlighting effect&lt;/code&gt; in setting page.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;Ctrl + Button3&lt;/kbd&gt;(Windows &amp;amp; Linux) or &lt;kbd&gt;Meta+ Button3&lt;/kbd&gt;(Mac):&lt;/p&gt; &#xA;&lt;p&gt;NOTE: &lt;kbd&gt;Button3&lt;/kbd&gt; means &#34;Secondary Click (click or tap with two fingers)&#34; on Mac os, &#34;Right click&#34; for Windows or Linux.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10737066/40234968-46593fe2-5adb-11e8-8ea8-0026fad86ca9.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;Alt + Button3&lt;/kbd&gt;:&lt;/p&gt; &#xA;&lt;p&gt;NOTE: &lt;kbd&gt;Button3&lt;/kbd&gt; means &#34;Secondary Click (click or tap with two fingers)&#34; on Mac os, &#34;Right click&#34; for Windows or Linux.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10737066/40235004-642dfe54-5adb-11e8-9fd7-648b92fab8f5.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rainbow indent guide lines&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10737066/65765792-c41cb500-e15b-11e9-8877-2239c6afa7bf.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;looking forward to your screenshots(PR welcome!)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize colors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;kbd&gt;Settings/Preferences&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Editor&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Color Scheme&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Rainbow Brackets&lt;/kbd&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/screenshots/customize-colors.png&#34; alt=&#34;Customize colors&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use color generator&lt;/h2&gt; &#xA;&lt;p&gt;If you didn&#39;t like the build-in colors, or want some new color but don&#39;t want to try out and pick colors. Please use color generator.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;Settings/Preferences&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Other Settings&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Rainbow Brackets&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Use color generator&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you turn on this option, we will auto generate some colors for you.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced options of color generator&lt;/h3&gt; &#xA;&lt;p&gt;If you need more control, you can decide the options of color generator by edit &lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/#config-file-path&#34;&gt;the config file&lt;/a&gt;,&lt;/p&gt; &#xA;&lt;p&gt;The value of the option &lt;code&gt;customColorGeneratorOption&lt;/code&gt; is a json object, available options are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;hue&lt;/code&gt; – Controls the hue of the generated color. You can pass a string representing a color name: &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;orange&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;purple&lt;/code&gt;, &lt;code&gt;pink&lt;/code&gt; and &lt;code&gt;monochrome&lt;/code&gt; are currently supported. If you pass a hexidecimal color string such as &lt;code&gt;#00FFFF&lt;/code&gt;, color generator will extract its hue value and use that to generate colors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;luminosity&lt;/code&gt; – Controls the luminosity of the generated color. You can specify a string containing &lt;code&gt;bright&lt;/code&gt;, &lt;code&gt;light&lt;/code&gt; or &lt;code&gt;dark&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure the value of the option &lt;code&gt;customColorGeneratorOption&lt;/code&gt; is escaped in xml format, you can use &lt;a href=&#34;https://www.freeformatter.com/xml-escape.html#ad-output&#34;&gt;this tool&lt;/a&gt; to do this. Please don&#39;t forget to restart your IDE after change the config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;application&amp;gt;&#xA;  &amp;lt;component name=&#34;RainbowSettings&#34;&amp;gt;&#xA;    &amp;lt;option name=&#34;useColorGenerator&#34; value=&#34;true&#34; /&amp;gt;&#xA;    &amp;lt;option name=&#34;customColorGeneratorOption&#34; value=&#34;{&amp;amp;quot;luminosity&amp;amp;quot;: &amp;amp;quot;light&amp;amp;quot;,&amp;amp;quot;hue&amp;amp;quot;: &amp;amp;quot;blue&amp;amp;quot;}&#34;/&amp;gt;&#xA;  &amp;lt;/component&amp;gt;&#xA;&amp;lt;/application&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Want to config the number of colors?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;kbd&gt;Settings/Preferences&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Other Settings&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Rainbow Brackets&lt;/kbd&gt; &amp;gt; &lt;code&gt;Number of colors&lt;/code&gt;: 5 or more&lt;/p&gt; &#xA;&lt;p&gt;And you can use the color generator and config you number of colors at the same time.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: For default and darcula color scheme(&lt;code&gt;Editor -&amp;gt; Color Scheme -&amp;gt; Rainbow Brackets -&amp;gt; Scheme&lt;/code&gt;) the color number is 10, for the other scheme the number is 5, if your number is bigger than the number, you can config them in the config file. If the color is not exist, we will use color generator to generator it for you.&lt;/p&gt; &#xA;&lt;p&gt;Please follow &lt;a href=&#34;https://www.jetbrains.com/help/idea/configuring-colors-and-fonts.html#share-color-scheme&#34;&gt;the official guide&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Export a color scheme as XML&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit the xml file, put &lt;code&gt;ROUND_BRACKETS_RAINBOW_COLOR5&lt;/code&gt; to &lt;code&gt;ROUND_BRACKETS_RAINBOW_COLOR100&lt;/code&gt; to match your number just like &lt;a href=&#34;https://raw.githubusercontent.com/izhangzhihao/intellij-rainbow-brackets/2020.3/src/main/resources/colorSchemes/rainbow-color-default-darcula.xml&#34;&gt;the default color scheme&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Import a color scheme&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Config file path&lt;/h2&gt; &#xA;&lt;p&gt;If you want to customize the advanced configuration, you could edit the config file then restart your IDE. Config file path in &lt;code&gt;APP_CONFIG/rainbow_brackets.xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In MAC OS env maybe like &lt;code&gt;~/Library/Preferences/IntelliJIdea2020.2/options/rainbow_brackets.xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using the ToolBox, then it will be like &lt;code&gt;~/Library/ApplicationSupport/JetBrains/IntelliJIdea2020.2/options/rainbow_brackets.xml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In Linux env maybe like &lt;code&gt;~/.IntelliJIdea/config/options/rainbow_brackets.xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In Windows env maybe like &lt;code&gt;C:\Users\izhangzhihao\.IntelliJIdea2020.2\config\options\rainbow_brackets.xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;HTML code in js&lt;/h2&gt; &#xA;&lt;p&gt;To enable rainbow brackets for HTML inside js code like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var html = &#39;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;Hello&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This plugin will automatically override color scheme property &#34;HTML_CODE&#34; &lt;a href=&#34;https://intellij-support.jetbrains.com/hc/en-us/community/posts/360000117450-My-HighlightVisitor-been-covered-by-intellij-built-in-functionality&#34;&gt;cause our rainbow color been covered by intellij built-in functionality&lt;/a&gt;. You still could set &lt;code&gt;&amp;lt;option name=&#34;rainbowifyHTMLInsideJS&#34; value=&#34;false&#34; /&amp;gt;&lt;/code&gt; in config file to disable.&lt;/p&gt; &#xA;&lt;h2&gt;Kotlin function literal braces and arrow&lt;/h2&gt; &#xA;&lt;p&gt;To enable rainbow brackets for multiple level lambda Kotlin code like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;event.throwable?.let { throwable -&amp;gt;&#xA;    IdeErrorsDialog.findPluginId(throwable)?.let { pluginId -&amp;gt;&#xA;        PluginManager.getPlugin(pluginId)?.let { ideaPluginDescriptor -&amp;gt;&#xA;            if (!ideaPluginDescriptor.isBundled) {&#xA;                bean.pluginName = ideaPluginDescriptor.name&#xA;                bean.pluginVersion = ideaPluginDescriptor.version&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This plugin will automatically override color scheme property &#34;KOTLIN_FUNCTION_LITERAL_BRACES_AND_ARROW&#34; cause our rainbow color is being covered by kotlin plugin built-in functionality. You still could set &lt;code&gt;&amp;lt;option name=&#34;rainbowifyKotlinFunctionLiteralBracesAndArrow&#34; value=&#34;false&#34; /&amp;gt;&lt;/code&gt; in config file to disable.&lt;/p&gt; &#xA;&lt;h2&gt;Disable rainbow brackets for specific languages&lt;/h2&gt; &#xA;&lt;p&gt;&lt;kbd&gt;Settings/Preferences&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Other Settings&lt;/kbd&gt; &amp;gt; &lt;kbd&gt;Rainbow Brackets&lt;/kbd&gt; &amp;gt; &lt;code&gt;Do NOT rainbowify these languages (name or extension, comma separated)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;NOTE: You can use &lt;strong&gt;name&lt;/strong&gt; of language or &lt;strong&gt;extension&lt;/strong&gt; of file name(The names should be &lt;strong&gt;lowercase&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;NOTE: To view the PSI tree and explore the internal PSI structure of source code, you need to set up your IDE by following &lt;a href=&#34;https://www.jetbrains.com/help/idea/psi-viewer.html&#34;&gt;this&lt;/a&gt;. For the Rider IDE, please follow: &lt;a href=&#34;https://rider-support.jetbrains.com/hc/en-us/articles/207327910-How-to-run-JetBrains-Rider-in-Internal-Mode&#34;&gt;this&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gradle test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gradle runIde&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gradle buildPlugin&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Us&lt;/h2&gt; &#xA;&lt;p&gt;You can support us by the following actions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Star this project&lt;/li&gt; &#xA; &lt;li&gt;Share this plugin with your friends&lt;/li&gt; &#xA; &lt;li&gt;Rate this plugin on &lt;a href=&#34;https://plugins.jetbrains.com/plugin/10080-rainbow-brackets&#34;&gt;JetBrains plugin repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make pull requests&lt;/li&gt; &#xA; &lt;li&gt;Report bugs&lt;/li&gt; &#xA; &lt;li&gt;Tell us your ideas&lt;/li&gt; &#xA; &lt;li&gt;Become a sponsor by donating on &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets&#34;&gt;Open Collective&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Become a sponsor by donating with AliPay or WeChatPay&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t want to use AliPay&#39;s mobile App? If you could read Chinese, please use &lt;a href=&#34;https://shenghuo.alipay.com/send/payment/fill.htm&#34;&gt;the official website&lt;/a&gt; to transfer your donation to my Alipay account(&lt;a href=&#34;mailto:izhangzhihao@hotmail.com&#34;&gt;izhangzhihao@hotmail.com&lt;/a&gt;). Otherwise, you can try &lt;a href=&#34;https://global.alipay.com/&#34;&gt;the English version of Alipay&lt;/a&gt; to transfer your donation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th width=&#34;33%&#34;&gt;Open Collective&lt;/th&gt; &#xA;   &lt;th width=&#34;33%&#34;&gt;AliPay&lt;/th&gt; &#xA;   &lt;th width=&#34;33%&#34;&gt;WeChatPay&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr align=&#34;center&#34;&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/static/images/opencollectivelogo-footer-n.svg?sanitize=true&#34; width=&#34;171px&#34; alt=&#34;OpenCollective&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12044174/85197261-77dd5a80-b312-11ea-9630-51caf7d634f2.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12044174/85197263-7b70e180-b312-11ea-917a-35eab2ea08ae.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! ❤️ [&lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor! 🌈 Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/intellij-rainbow-brackets/sponsor/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Intellij-rainbow-brackets is heavily inspired by &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets&#34;&gt;Rainbow Brackets for Visual Studio Code&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SmartToolFactory/Jetpack-Compose-Tutorials</title>
    <updated>2022-11-10T01:35:23Z</updated>
    <id>tag:github.com,2022-11-10:/SmartToolFactory/Jetpack-Compose-Tutorials</id>
    <link href="https://github.com/SmartToolFactory/Jetpack-Compose-Tutorials" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀🧨📝 Series of Tutorials to learn about Jetpack Compose with subjects Material Widgets, Layout, SubcomposeLayout, custom layouts, State, custom rememberable, recomposition, LaunchedEffect, side-effects, Gesture, Animation, Navigation, Canvas, UIs like whatsapp and others.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Jetpack Compose Tutorials and Playground&lt;/h3&gt; &#xA;&lt;h2&gt;🤓 Overview&lt;/h2&gt; &#xA;&lt;p&gt;Series of Tutorials to learn about Jetpack Compose, Material Widgets, State, Animation, and Navigation. Easy to search in code and in app. Each chapter module contains its own content in code. SearchBar can be used to search with a tag or description available for each tutorial.&lt;/p&gt; &#xA;&lt;p&gt;Recommended section is under constructions for now, when finished it will get recommended tags using previous searches using a database, domain with ViewModel.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/intro.gif&#34; align=&#34;center&#34; width=&#34;32%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Tutorial&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;1-1 Column, Row, Box, Modifiers&lt;/h3&gt;&lt;br&gt;Create Row that adds elements in horizontal order, and Column that adds elements in vertical order.&lt;br&gt;&lt;br&gt; • Column&lt;br&gt;• Row&lt;br&gt;• Box&lt;br&gt;• Modifier&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial1_1.jpg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;1-2 Surface, Shape, Clickable&lt;/h3&gt;&lt;br&gt;Create and modify Surface to draw background for Composables, add click action to any composable. Set weight or offset modifiers.&lt;br&gt;&lt;br&gt; • Surface&lt;br&gt;• Shape&lt;br&gt;• Clickable&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial1_2.jpg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Material Widgets&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Tutorial&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-1 Text&lt;/h3&gt;&lt;br&gt;Create Text component with different properties such as color, background, font weight, family, style, spacing and others&lt;br&gt;&lt;br&gt; • Text&lt;br&gt;• Row&lt;br&gt;• FontStyle&lt;br&gt;• Annotated String Hyperlink&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_1.jpg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-2 Button, IconButton, FAB, Chip&lt;/h3&gt;&lt;br&gt;Create button with text and/or with image, Floating Action Button or Chips. Modify properties of buttons including color, text, and click actions.&lt;br&gt;&lt;br&gt; • Button&lt;br&gt;• IconButton&lt;br&gt;• FloatingActionButton&lt;br&gt;• Chip&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_2.jpg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-3 TextField&lt;/h3&gt;&lt;br&gt;Create TextField component with regular style or outlined. Set error, colors, state, icons, and IME actions.&lt;br&gt;&lt;br&gt; • TextField&lt;br&gt;• OutlinedTextField&lt;br&gt;• IME&lt;br&gt;• Phone format VisualTransformation&lt;br&gt;• Regex&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_3.jpg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-4 Image&lt;/h3&gt;&lt;br&gt;Create Image with image, vector resource or with Painter, set image and Content scales to fit, expand or shrink image. Change shape of Image or apply ColorFilter and PorterDuff modes.&lt;br&gt;&lt;br&gt; • Image&lt;br&gt;• Canvas&lt;br&gt;• Drawable&lt;br&gt;• Bitmap&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_4.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-5 LazyColumn/Row/VerticalGrid&lt;/h3&gt;&lt;br&gt;Vertical, horizontal grid lists with LazyColumn, LazyRow and LazyVerticalGrid. Use contentPadding set paddings for lists, verticalArrangement or horizontalArrangement for padding between items, rememberLazyListState to manually scroll.&lt;br&gt;&lt;br&gt; • LazyColumn(Vertical RecyclerView)&lt;br&gt;• LazyRow(Horizontal RecyclerView&lt;br&gt;• LazyVerticalGrid(GridLayout)&lt;br&gt;• StickyHeaders&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_5.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-6 TopAppbar &amp;amp; Tab&lt;/h3&gt;&lt;br&gt;TopAppbar with actions, overflow menus. Tabs with text only, image only and image+text with different background, divider, and indicators.&lt;br&gt;&lt;br&gt; • TopAppBar&lt;br&gt;• Overflow menu&lt;br&gt;• TabRow and Tab&lt;br&gt;• Tab Indicator, Divider&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_6.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-7 BottomNavigation&lt;/h3&gt;&lt;br&gt;Bottom navigation bars allow movement between primary destinations in an app. BottomNavigation should contain multiple BottomNavigationItems, each representing a singular destination.&lt;br&gt;&lt;br&gt; • BottomNavigation&lt;br&gt;• BottomNavigationItem&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_7.jpeg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-8 BottomAppBar&lt;/h3&gt;&lt;br&gt;A bottom app bar displays navigation and key actions at the bottom of screens.&lt;br&gt;&lt;br&gt; • BottomAppBar&lt;br&gt;• Scaffold&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_8.jpeg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-9-1 Side Navigation&lt;/h3&gt;&lt;br&gt;A backdrop appears behind all other surfaces in an app, displaying contextual and actionable content.&lt;br&gt;&lt;br&gt; • Scaffold&lt;br&gt;• Side Navigation&lt;br&gt;• DrawerState&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_9.jpeg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-9-2 ModalDrawer&lt;/h3&gt;&lt;br&gt;Modal navigation drawers block interaction with the rest of an app’s content with a scrim. They are elevated above most of the app’s UI and don’t affect the screen’s layout grid.&lt;br&gt;&lt;br&gt; • ModalDrawer&lt;br&gt;• DrawerState&lt;br&gt;• Scaffold&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_9_2.jpeg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-10-1 BottomSheet&lt;/h3&gt;&lt;br&gt;Create bottom sheet using BottomSheetScaffold and rememberBottomSheetScaffoldState, create modal bottom sheets.&lt;br&gt;&lt;br&gt; • BottomSheetScaffold&lt;br&gt;• BottomSheetState&lt;br&gt;• ModalBottomSheetLayout&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_10.jpeg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-10-4 BottomDrawer&lt;/h3&gt;&lt;br&gt;BottomDrawer with BottomAppBar.&lt;br&gt;&lt;br&gt; • BottomDrawer&lt;br&gt;• BottomAppBar&lt;br&gt;• Scaffold&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_10_4.jpeg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-10-5 BackdropScaffold&lt;/h3&gt;&lt;br&gt;BackdropScaffold provides an API to put together several material components to construct your screen.&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_10_5.jpeg&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-11 Snackbar, Progress, Selection&lt;/h3&gt;&lt;br&gt;Create Snackbars with various layouts and styling, Checkboxes with selectable text, tri state checkbox, grouped radio buttons and sliders.&lt;br&gt;&lt;br&gt; • SnackBar&lt;br&gt;• ProgressIndicator&lt;br&gt;• Checkbox&lt;br&gt;• TriStateCheckbox&lt;br&gt;• Switch&lt;br&gt;• RadioButton&lt;br&gt;• Slider&lt;br&gt;• RangeSlider&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_11.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;2-12 Dialog, AlertDialog&lt;/h3&gt;&lt;br&gt;Create Dialog, and AlertDialog with standard and custom layouts. Implement on dismiss logic and get result when dialog is closed.&lt;br&gt;&lt;br&gt;• AlertDialog&lt;br&gt;• Dialog&lt;br&gt;• DialogProperties&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial2_12.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Layout&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Tutorial&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;3-1-1 Custom Modifier&lt;/h3&gt;&lt;br&gt;Create custom layout using using layout, Measurable, Constraint, Placeable.&lt;br&gt;&lt;br&gt;• Custom Modifier&lt;br&gt;• Measurable&lt;br&gt;• Constraint&lt;br&gt;• Placeable&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial3_1_1.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;3-1-3 graphicsLayer&lt;/h3&gt;&lt;br&gt;Use Modifier.offset{} and Modifier.graphicsLayer{} to scale, translate or change other properties of a Composable.&lt;br&gt;&lt;br&gt;• Modifier&lt;br&gt;• graphicsLayer&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial3_1_3.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;3-2-1 Custom Layout&lt;/h3&gt;&lt;br&gt;Create custom layout using using MeasurePolicy and use intrinsic dimensions.&lt;br&gt;&lt;br&gt;• Custom Layout&lt;br&gt;• Measurable&lt;br&gt;• Constraint&lt;br&gt;• Placeable&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial3_2_1.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;3-3-1 Scope&amp;amp;ParentDataModifier&lt;/h3&gt;&lt;br&gt;Add custom modifiers to Composable inside a custom layout using its scope like align modifier only available in specific Composable like a custom Column.&lt;br&gt;&lt;br&gt;• Custom Layout&lt;br&gt;• Scope&lt;br&gt;• ParentDataModifier&lt;br&gt;• Measurable&lt;br&gt;• Constraint&lt;br&gt;• Placeable&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial3_3_1.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;3-4 BoxWithConstraints&lt;/h3&gt;&lt;br&gt;BoxWithConstraints is a composable that defines its own content according to the available space, based on the incoming constraints or the current LayoutDirection.&lt;br&gt;&lt;br&gt;• BoxWithConstraints&lt;br&gt;• Constraint&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial3_4.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;3-5 SubcomposeLayout&lt;/h3&gt;&lt;br&gt;Subcompose layout which allows to subcompose the actual content during the measuring stage for example to use the values calculated during the measurement as params for the composition of the children.&lt;br&gt;&lt;br&gt;• SubcomposeLayout&lt;br&gt;• Constraint&lt;br&gt;• Measurable&lt;br&gt;• Constraint&lt;br&gt;• Placeable&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial3_5.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;3-6-1 Custom Chat Layouts1&lt;/h3&gt;&lt;br&gt;Custom layout like whatsapp chat layout that moves time and message read status layout right or bottom based on message width.&lt;br&gt;&lt;br&gt;• Custom Layout&lt;br&gt;• Measurable&lt;br&gt;• Constraint&lt;br&gt;• Placeable&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial3_6_1.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;3-6-2 Custom Chat SubcomposeLayout&lt;/h3&gt;&lt;br&gt;Custom layout like whatsapp chat. Added quote and name tag resized to longest sibling using SubcomposeColumn from previous examples to have whole layout.&lt;br&gt;&lt;br&gt;• Custom Layout&lt;br&gt;• SubcomposeLayout&lt;br&gt;• Measurable&lt;br&gt;• Constraint&lt;br&gt;• Placeable&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial3_6_2.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;State&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Tutorial&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;4-1 Remember&amp;amp;MutableState&lt;/h3&gt;&lt;br&gt;Remember and mutableState effect recomposition and states.&lt;br&gt;&lt;br&gt;• remember&lt;br&gt;• State&lt;br&gt;• Recomposition&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial4_1.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;4-2-3 Scoped Recomposition&lt;/h3&gt;&lt;br&gt;How hierarchy of Composables effects Smart Composition.&lt;br&gt;&lt;br&gt;• remember&lt;br&gt;• Recomposition&lt;br&gt;• State&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial4_2_3.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;4-4 Custom Remember&lt;/h3&gt;&lt;br&gt;Create a custom remember and custom component to have badge that changes its shape based on properties set by custom rememberable.&lt;br&gt;&lt;br&gt;• remember&lt;br&gt;• State&lt;br&gt;• Recomposition&lt;br&gt;• Custom Layout&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial4_4.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;4-5-1 SideEffect1&lt;/h3&gt;&lt;br&gt;Use remember functions like rememberCoroutineScope, and rememberUpdatedState and side-effect functions such as LaunchedEffect and DisposableEffect.&lt;br&gt;&lt;br&gt;• remember&lt;br&gt;• rememberCoroutineScope&lt;br&gt;• rememberUpdatedState&lt;br&gt;• LaunchedEffect&lt;br&gt;• DisposableEffect&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial4_5_1.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;4-5-2 SideEffect2&lt;/h3&gt;&lt;br&gt;Use SideEffect, derivedStateOf, produceState and snapshotFlow.&lt;br&gt;&lt;br&gt;• remember&lt;br&gt;• SideEffect&lt;br&gt;• derivedStateOf&lt;br&gt;• produceStateOf&lt;br&gt;• snapshotFlow&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial4_5_2.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;4-7-3 Compose Phases3&lt;/h3&gt;&lt;br&gt;How deferring a state read changes which phases of frame(Composition, Layout, Draw) are called.&lt;br&gt;&lt;br&gt;• Modifier&lt;br&gt;• Recomposition&lt;br&gt;• Composition&lt;br&gt;• Layout&lt;br&gt;• Draw&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial4_7_3.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Gesture&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Tutorial&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;5-1-1 Clickable&lt;/h3&gt;&lt;br&gt;Use clickable modifier, Indication. Indication to clip ripples, or create custom ripple effects.&lt;br&gt;&lt;br&gt;• clickable&lt;br&gt;• Indication&lt;br&gt;• rememberRipple&lt;br&gt;• pointerInput&lt;br&gt;• pointerInteropFilter&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial5_1_1.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;5-1-2 InteractionSource1&lt;/h3&gt;&lt;br&gt;Use Interaction source to collect interactions or change scale of Composables based on interaction state.&lt;br&gt;&lt;br&gt;• clickable&lt;br&gt;• InteractionSource&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial5_2.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;5-1-3 InteractionSource2&lt;/h3&gt;&lt;br&gt;Use InteractionSource to update touch state of multiple Composable or another Composable based on current interaction.&lt;br&gt;&lt;br&gt;• clickable&lt;br&gt;• InteractionSource&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial5_1_3.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;5-2 Tap&amp;amp;Drag Gesture&lt;/h3&gt;&lt;br&gt;Use PointerInput to listen press, tap, long press, drag gestures. detectTapGestures is used for listening for tap, longPress, doubleTap, and press gestures.&lt;br&gt;&lt;br&gt;• pointerInput&lt;br&gt;• pointerInteropFilter&lt;br&gt;• detectTapGestures&lt;br&gt;• detectDragGestures&lt;br&gt;• onPress&lt;br&gt;• onDoubleTap&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial5_2.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;5-3 Transform Gestures&lt;/h3&gt;&lt;br&gt;Use PointerInput to listen for detectTransformGesture to get centroid, pan, zoom and rotate params.&lt;br&gt;&lt;br&gt;• pointerInput&lt;br&gt;• detectTransformGestures&lt;br&gt;• centroid&lt;br&gt;• pan&lt;br&gt;• zoom&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial5_3.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;5-4-1 AwaitPointerEventScope1&lt;/h3&gt;&lt;br&gt;Use AwaitPointerEventScope to get awaitFirstDown for down events, waitForUpOrCancellation for up events, and awaitPointerEvent for move events with pointers.&lt;br&gt;&lt;br&gt;• AwaitPointerEventScope&lt;br&gt;• PointerInputChange&lt;br&gt;• awaitFirstDown&lt;br&gt;• waitForUpOrCancellation&lt;br&gt;• awaitPointerEvent&lt;br&gt;• awaitTouchSlopOrCancellation&lt;br&gt;• awaitDragOrCancellation&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial5_4_1.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;5-4-3 Centroid, Zoom, Pan, Rotation&lt;/h3&gt;&lt;br&gt;Use AwaitPointerEventScope to calculate centroid position and size, zoom, pan, and rotation.&lt;br&gt;&lt;br&gt;• AwaitPointerEventScope&lt;br&gt;• centroid&lt;br&gt;• pan&lt;br&gt;• zoom&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial5_4_3.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;5-6-2 Gesture Propagation1&lt;/h3&gt;&lt;br&gt;Consume different type of touch events in Composable in an hierarchy to display gesture propagation between parent and children with MOVE gestures.&lt;br&gt;&lt;br&gt;• AwaitPointerEventScope&lt;br&gt;• pointerInput&lt;br&gt;• consume&lt;br&gt;• consumePositionChange&lt;br&gt;• anyChangeConsumed&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial5_6_2.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;5-6-4 Transform Propagation&lt;/h3&gt;&lt;br&gt;Consume events to rotate, zoom, move or apply drag or move events on Composables.&lt;br&gt;• AwaitPointerEventScope&lt;br&gt;• detectTransformGestures&lt;br&gt;• consume&lt;br&gt;• consumePositionChange&lt;br&gt;• anyChangeConsumed&lt;br&gt;• pan&lt;br&gt;• zoom&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial5_6_4.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;5-9-4 Collapsing TopAppBar&lt;/h3&gt;&lt;br&gt;Create a collapsing TopAppBar using Modifier.nestedScroll and NestedScrollConnection.&lt;br&gt;• nestedScroll&lt;br&gt;• NestedScrollConnection&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial5_9_4.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;5-10-1 Image Touch Detection&lt;/h3&gt;&lt;br&gt;Detect touch position on image and get color at touch position.&lt;br&gt;• Image&lt;br&gt;• AwaitPointerEventScope&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial5_10_1.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;5-11 Zoomable LazyColumn&lt;/h3&gt;&lt;br&gt;Zoom images inside a LazyColum.&lt;br&gt;• Image&lt;br&gt;• Zoom&lt;br&gt;• AwaitPointerEventScope&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial5_11.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Graphics&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Tutorial&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-1-1 Canvas Basics 1&lt;/h3&gt;&lt;br&gt;Use canvas draw basic shapes like line, circle, rectangle, and points with different attributes such as style, stroke cap, brush.&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• DrawScope&lt;br&gt;• Path&lt;br&gt;• Path Effect&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_1_1.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-1-2 Canvas Basics 2&lt;/h3&gt;&lt;br&gt;Use canvas to draw arc, with path effect, stroke cap, stroke join, miter and other attributes and draw images with src, dst attributes.&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• DrawScope&lt;br&gt;• Path&lt;br&gt;• Path Effect&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_1_2.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-1-3 Canvas Paths&lt;/h3&gt;&lt;br&gt;Use canvas to draw path using absolute and relative positions, adding arc to path, drawing custom paths, progress, polygons, quads, and cubic.&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• DrawScope&lt;br&gt;• Path&lt;br&gt;• Path Effect&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_1_3.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-1-4 Canvas Path Ops&lt;/h3&gt;&lt;br&gt;Use canvas to clip paths, or canvas using path, or rectangle with operations such as Difference, Intersect, Union, Xor, or ReverseDifference..&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• DrawScope&lt;br&gt;• Path&lt;br&gt;• PathOperation&lt;br&gt;• ClipOperation&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_1_4.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-1-5 Canvas Path Segments&lt;/h3&gt;&lt;br&gt;Use canvas to flatten Android Path to path segments and display PathSegment start and/or end points.&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• DrawScope&lt;br&gt;• Path&lt;br&gt;• PathSegment&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_1_5.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-1-6 Canvas PathEffect&lt;/h3&gt;&lt;br&gt;Use PathEffect such as dashedPathEffect, cornerPathEffect, chainPathEffect and stompedPathEffect to draw shapes add path effects around Composables&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• DrawScope&lt;br&gt;• Path&lt;br&gt;• Path Effect&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_1_6.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-2 Blend(Porter-Duff) Modes&lt;/h3&gt;&lt;br&gt;Use blend(Porter-Duff) modes to change drawing source/destination or clip based on blend mode ,and manipulate pixels.&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• DrawScope&lt;br&gt;• Path&lt;br&gt;• Path Effect&lt;br&gt;• BlendMode&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_2.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-4-2 Drawing App&lt;/h3&gt;&lt;br&gt;Draw to canvas using touch down, move and up events using array of paths to have erase, undo, redo actions and set properties for each path separately.&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• DrawScope&lt;br&gt;• Path&lt;br&gt;• AwaitPointerEventScope&lt;br&gt;• PointerInputChange&lt;br&gt;• BlendMode&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_4_2.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-5 Color Picker&lt;/h3&gt;&lt;br&gt;Color Picker that calculates angle from center and gets a color using hue and returns a color as in HSL or RGB color model.&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• DrawScope&lt;br&gt;• Path&lt;br&gt;• AwaitPointerEventScope&lt;br&gt;• PointerInputChange&lt;br&gt;• BlendMode&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_5.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-6 Scale/Translation Edit&lt;/h3&gt;&lt;br&gt;Editable Composable that changes position and scale when touched and dragged from handles or changes position when touched inside.&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• DrawScope&lt;br&gt;• Scale&lt;br&gt;• Translate&lt;br&gt;• AwaitPointerEventScope&lt;br&gt;• PointerInputChange&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_6.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-7 Gooey Effect&lt;/h3&gt;&lt;br&gt;Create basic Gooey Effect with static circles and one with moves with touch.&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• DrawScope&lt;br&gt;• Gooey&lt;br&gt;• Translate&lt;br&gt;• AwaitPointerEventScope&lt;br&gt;• PointerInputChange&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_7.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-8-1 Cutout Arc Shape&lt;/h3&gt;&lt;br&gt;Use Path.cubicTo, Path.arcTo to draw cutout shape.&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• Path&lt;br&gt;• Scale&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_8_1.png&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;h3&gt;6-9-1 Neon Glow Effect&lt;/h3&gt;&lt;br&gt;Use Use paint.asFrameworkPaint() to create blur effect to mimic neon glow &lt;br&gt;and infinite animation to dim and glow infinitely.&lt;br&gt;&lt;br&gt;• Canvas&lt;br&gt;• Path&lt;br&gt;• Neon&lt;br&gt;• AwaitPointerEventScope&lt;br&gt;• PointerInputChange&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmartToolFactory/Jetpack-Compose-Tutorials/master/screenshots/tutorial6_9_1.gif&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Resources and References&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-basics&#34;&gt;Codelab Jetpack Compose Basics&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-layouts?hl=en#0&#34;&gt;Codelab Jetpack Compose Layouts&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-state?hl=en#0&#34;&gt;Codelab Jetpack Compose States&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-advanced-state-side-effects?hl=en#0&#34;&gt;Codelab Jetpack Compose Advanced State&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.android.com/jetpack/compose/mental-model&#34;&gt;Developer Android&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material/package-summary#theming&#34;&gt;Developer Android Material&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/android/compose-samples&#34;&gt;Jetpack Compose Samples&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://medium.com/androiddevelopers/under-the-hood-of-jetpack-compose-part-2-of-2-37b2c20c6cdd&#34;&gt;Under the hood of Jetpack Compose — part 2 of 2- Leland Richardson&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://www.jetpackcompose.app/articles/donut-hole-skipping-in-jetpack-compose&#34;&gt;What is “donut-hole skipping” in Jetpack Compose?-Vinay Gaba&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.android.com/jetpack/compose/graphics&#34;&gt;Android Graphics&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://medium.com/androiddevelopers/playing-with-paths-3fbc679a6f77&#34;&gt;Playing with Paths-Nick Butcher&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://juliensalvi.medium.com/custom-shape-with-jetpack-compose-1cb48a991d42&#34;&gt;Custom Shape with Jetpack Compose-Julien Salvi&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.android.com/reference/android/graphics/PorterDuff.Mode&#34;&gt;Porter Duff Mode&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;http://ssp.impulsetrain.com/porterduff.html&#34;&gt;Porter/Duff Compositing and Blend Modes&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://medium.com/mobile-app-development-publication/practical-image-porterduff-mode-usage-in-android-3b4b5d2e8f5f&#34;&gt;Practical Image PorterDuff Mode Usage in Android-Elye&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://medium.com/mobile-app-development-publication/android-image-lighting-control-and-color-filtering-89f51a139a79&#34;&gt;Android Image Lighting Control and Color Filtering-Elye&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://medium.com/mobile-app-development-publication/android-image-color-change-with-colormatrix-e927d7fb6eb4&#34;&gt;Android Image Color Change With ColorMatrix-Elye&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://medium.com/over-engineering/manipulating-images-and-drawables-with-androids-colorfilter-25bf061843e7&#34;&gt;Manipulating images and Drawables with Android’s ColorFilter-Nick Rout&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://medium.com/swlh/curved-cut-out-bottom-navigation-with-animation-in-android-c630c867958c&#34;&gt;Curved (Cut out) Bottom Navigation With Animation in Android&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://laewoong.github.io/android-gooey-effect/&#34;&gt;Gooey Effect Using Canvas API In Android&lt;/a&gt; &lt;br&gt;&lt;/p&gt;</summary>
  </entry>
</feed>