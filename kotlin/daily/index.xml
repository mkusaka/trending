<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-10T01:45:28Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TestPlanB/Signal</title>
    <updated>2022-07-10T01:45:28Z</updated>
    <id>tag:github.com,2022-07-10:/TestPlanB/Signal</id>
    <link href="https://github.com/TestPlanB/Signal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;library for android which can observe signal from native crash or ANR&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Signal&lt;/h1&gt; &#xA;&lt;p&gt;Android信号处理，兼容native crash 与anr，提供安全气囊方案与监控方案的基础设施，目前已添加native堆栈日志的回调，既可以当crash监控，又可以当安全气囊，开发你的脑洞吧！&lt;/p&gt; &#xA;&lt;h2&gt;详细介绍&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/7114181318644072479&#34;&gt;https://juejin.cn/post/7114181318644072479&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用说明&lt;/h2&gt; &#xA;&lt;p&gt;目前还在更新中，后续会发到maven&lt;/p&gt; &#xA;&lt;h3&gt;本地使用&lt;/h3&gt; &#xA;&lt;p&gt;该项目可以用于本地配置使用，只需拷贝lib_signal这个module到自己的项目即可，请按照以下条件使用&lt;/p&gt; &#xA;&lt;p&gt;1.拷贝lib_signal这个module到自己的项目&lt;/p&gt; &#xA;&lt;p&gt;2.初始化SignalController对象，然后调用initWithSignals 初始化想要监听的信号，参数是int数组，内容为具体的信号值，比如&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SignalController(this).initWithSignals(intArrayOf(SignalConst.SIGQUIT,SignalConst.SIGABRT))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.创建一个实现CallOnCatchSignal接口的类，重写onCatchSignal方法，里面是自定义的信号处理逻辑&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;参数1是回调的context 参数2是崩溃时的信号值 参数3是native的堆栈日志&#xA;onCatchSignal(context: Context,signal: Int, nativeStackTrace:String)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4.创建一个路径为resources/META-INF/services的目录，并在目录下创建一个文件，名称为com.example.lib_signal.CallOnCatchSignal，内容为继承了 CallOnCatchSignal接口的实现类路径名称，如app例子项目所示。&lt;/p&gt; &#xA;&lt;h2&gt;项目层级介绍&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;app下是使用例子&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lib_signal 是Signal的封装实现&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;环境准备&lt;/h2&gt; &#xA;&lt;p&gt;建议直接用最新的稳定版本Android Studio打开工程。目前项目已适配&lt;code&gt;Android Studio Arctic Fox | 2020.3.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>LuckyPray/XAutoDaily</title>
    <updated>2022-07-10T01:45:28Z</updated>
    <id>tag:github.com,2022-07-10:/LuckyPray/XAutoDaily</id>
    <link href="https://github.com/LuckyPray/XAutoDaily" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个基于QQ的全自动签到模块&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; XAutoDaily &lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/teble/XAutoDaily.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/teble/XAutoDaily/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/teble/XAutoDaily.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/XAutoDaily&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Telegram&amp;amp;message=Channel&amp;amp;color=0088cc&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/XAutoDailyChat&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Telegram&amp;amp;message=Chat&amp;amp;color=0088cc&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;XAutoDaily 是一个兼容QQ大部分版本(包括新版TIM)的开源签到 Xposed 模块&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;p&gt;激活本模块后，在 QQ 客户端的设置中点击 &#34;XAutoDaily 设置&#34; 即可开关对应功能。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android &amp;gt;= 7.0&lt;/li&gt; &#xA; &lt;li&gt;QQ &amp;gt;= 8.0.0, TIM(新版全功能支持，旧版&lt;strong&gt;可能&lt;/strong&gt;不兼容小程序签到)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;对于部分用户的特殊说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;安卓12太极阴64位QQ用户&lt;/strong&gt;: 由于太极在安卓12上可能存在bug，勾选XA后会导致QQ闪退（根据日志查看，art崩溃不属于模块本身的bug），请更换32位QQ或者更换框架以解决问题。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;vivo(包括子产品)全面屏用户&lt;/strong&gt;: &lt;strong&gt;可能&lt;/strong&gt;存在由于未知魔改导致模块Compose UI渲染白屏的问题，只能通过&lt;strong&gt;切屏&lt;/strong&gt;(前台后台切换)/&lt;strong&gt;切换虚拟按键&lt;/strong&gt;(虚拟导航)来解决问题。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;转生用户&lt;/strong&gt;: 由于框架本身可能存在bug，&lt;strong&gt;部分用户&lt;/strong&gt;在勾选模块后可能无法生效（加载模块流程中断导致后续模块不加载），请先勾选xa再勾选其它模块(根据勾选顺序先后加载模块)。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;功能介绍&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;会员任务以及签到&lt;/li&gt; &#xA; &lt;li&gt;黄钻签到&lt;/li&gt; &#xA; &lt;li&gt;腾讯视频会员打卡&lt;/li&gt; &#xA; &lt;li&gt;会员排行榜点赞&lt;/li&gt; &#xA; &lt;li&gt;QQ日签卡&lt;/li&gt; &#xA; &lt;li&gt;小程序打卡/任务&lt;/li&gt; &#xA; &lt;li&gt;大会员任务(个性赞需要手动点赞)&lt;/li&gt; &#xA; &lt;li&gt;好友名片自动点赞回赞&lt;/li&gt; &#xA; &lt;li&gt;好友续火（避免滥用限制字符为20）&lt;/li&gt; &#xA; &lt;li&gt;会员公众号签到&lt;/li&gt; &#xA; &lt;li&gt;新版群打卡&lt;/li&gt; &#xA; &lt;li&gt;QQ好友字符抽取&lt;/li&gt; &#xA; &lt;li&gt;萌宠任务&lt;/li&gt; &#xA; &lt;li&gt;好友空间互访&lt;/li&gt; &#xA; &lt;li&gt;好友名片点赞&lt;/li&gt; &#xA; &lt;li&gt;好友续火&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;一切开发旨在学习，请勿用于非法用途&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本项目保证永久开源，欢迎提交 Issue 或者 Pull Request，但是请不要提交用于非法用途的功能。&lt;/li&gt; &#xA; &lt;li&gt;如果某功能被大量运用于非法用途，那么该功能将会被移除。&lt;/li&gt; &#xA; &lt;li&gt;开发人员可能在任何时间&lt;strong&gt;停止更新&lt;/strong&gt;或&lt;strong&gt;删除项目&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;GPL-3.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (C) 2022 teble@github.com&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU Affero General Public License as&#xA;published by the Free Software Foundation, either version 3 of the&#xA;License, or (at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU Affero General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU Affero General Public License&#xA;along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>skydoves/landscapist</title>
    <updated>2022-07-10T01:45:28Z</updated>
    <id>tag:github.com,2022-07-10:/skydoves/landscapist</id>
    <link href="https://github.com/skydoves/landscapist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🍂 Jetpack Compose image loading library that fetches and displays network images with Glide, Coil, and Fresco&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/127760344-bb042fe8-23e1-4014-b208-b7b549d32086.png&#34; alt=&#34;landscapist&#34;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://devlibrary.withgoogle.com/products/android/repos/skydoves-Landscapist&#34;&gt;&lt;img alt=&#34;Google&#34; src=&#34;https://skydoves.github.io/badges/google-devlib.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves/Landscapist/actions&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/skydoves/landscapist/workflows/Android%20CI/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://androidweekly.net/issues/issue-441&#34;&gt;&lt;img alt=&#34;Android Weekly&#34; src=&#34;https://skydoves.github.io/badges/android-weekly.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://proandroiddev.com/loading-images-for-jetpack-compose-using-glide-coil-and-fresco-1211261a296e&#34;&gt;&lt;img alt=&#34;Medium&#34; src=&#34;https://skydoves.github.io/badges/Story-Medium.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves&#34;&gt;&lt;img alt=&#34;Profile&#34; src=&#34;https://skydoves.github.io/badges/skydoves.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 🍂 Jetpack Compose image loading library which fetches and displays network images with &lt;a href=&#34;https://github.com/bumptech/glide&#34; target=&#34;_blank&#34;&gt; Glide&lt;/a&gt;, &lt;a href=&#34;https://github.com/coil-kt/coil&#34; target=&#34;_blank&#34;&gt; Coil&lt;/a&gt;, and &lt;a href=&#34;https://github.com/facebook/fresco&#34; target=&#34;_blank&#34;&gt; Fresco&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Who&#39;s using Landscapist?&lt;/h2&gt; &#xA;&lt;p&gt;👉 &lt;a href=&#34;https://raw.githubusercontent.com/skydoves/landscapist/main/usecases.md&#34;&gt;Check out who&#39;s using Landscapist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demo projects&lt;/h2&gt; &#xA;&lt;p&gt;You can see the use cases of this library in the repositories below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/modernstorage/tree/e62cda539ca75884dd49df3bcf8629751f0a91e6/sample&#34;&gt;google/modernstorage&lt;/a&gt; - ModernStorage is a group of libraries that provide an abstraction layer over storage on Android to simplify its interactions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/storage-samples/tree/main/ScopedStorage&#34;&gt;android/storage-samples&lt;/a&gt; - Multiple samples showing the best practices in storage APIs on Android.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skydoves/disneycompose&#34;&gt;skydoves/DisneyCompose&lt;/a&gt; - 🧸 A demo Disney app using Jetpack Compose and Hilt based on modern Android tech-stacks and MVVM architecture.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skydoves/MovieCompose&#34;&gt;skydoves/MovieCompose&lt;/a&gt; - 🎞 A demo movie app using Jetpack Compose and Hilt based on modern Android tech stacks. &lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SNAPSHOT&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See how to import the snapshot&lt;/summary&gt; &#xA; &lt;h3&gt;Including the SNAPSHOT&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/com/github/skydoves/landscapist/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=snapshot&amp;amp;message=landscapist&amp;amp;logo=apache%20maven&amp;amp;color=C71A36&#34; alt=&#34;Landscapist&#34;&gt;&lt;/a&gt; &lt;br&gt; Snapshots of the current development version of Landscapist are available, which track &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/com/github/skydoves/landscapist/&#34;&gt;the latest versions&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;To import snapshot versions on your project, add the code snippet below on your gradle file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Gradle&#34;&gt;repositories {&#xA;   maven { url &#39;https://oss.sonatype.org/content/repositories/snapshots/&#39; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Next, add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:landscapist-glide:1.5.4-SNAPSHOT&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;div class=&#34;header&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/bumptech/glide&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/95545537-1bc15200-0a39-11eb-883d-644f564da5d3.png&#34; align=&#34;left&#34; width=&#34;4%&#34; alt=&#34;Glide&#34;&gt;&lt;/a&gt; &#xA; &lt;h1&gt;Glide&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=landscapist&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/landscapist.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the codes below to your &lt;strong&gt;root&lt;/strong&gt; &lt;code&gt;build.gradle&lt;/code&gt; file (not your module-level build.gradle file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;allprojects {&#xA;    repositories {&#xA;        mavenCentral()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:landscapist-glide:1.5.3&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;Landscapist-Glide&lt;/code&gt; includes version &lt;code&gt;4.13.2&lt;/code&gt; of &lt;a href=&#34;https://github.com/bumptech/glide&#34;&gt;Glide&lt;/a&gt; internally. So please make sure your project is using the same Glide version or exclude the Glide dependency to adapt yours. Also, please make sure the Jetpack Compose version on the &lt;a href=&#34;https://github.com/skydoves/Landscapist/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;GlideImage&lt;/h3&gt; &#xA;&lt;p&gt;You can load images simply by using &lt;code&gt;GlideImage&lt;/code&gt; composable function as the following example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = imageUrl,&#xA;  // Crop, Fit, Inside, FillHeight, FillWidth, None&#xA;  contentScale = ContentScale.Crop,&#xA;  // shows a placeholder while loading the image.&#xA;  placeHolder = ImageBitmap.imageResource(R.drawable.placeholder),&#xA;  // shows an error ImageBitmap when the request failed.&#xA;  error = ImageBitmap.imageResource(R.drawable.error)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Details for GlideImage&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;👉 Read further for more details&lt;/summary&gt; &#xA; &lt;h3&gt;Custom RequestOptions and TransitionOptions&lt;/h3&gt; &#xA; &lt;p&gt;You can customize your request-options with your own &lt;a href=&#34;https://bumptech.github.io/glide/doc/options.html#requestoptions&#34;&gt;RequestOptions&lt;/a&gt; and &lt;a href=&#34;https://bumptech.github.io/glide/doc/options.html#transitionoptions&#34;&gt;TransitionOptions&lt;/a&gt; for applying caching strategies, loading transformations like below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = poster.poster,&#xA;  requestOptions = {&#xA;    RequestOptions()&#xA;        .override(256, 256)&#xA;        .diskCacheStrategy(DiskCacheStrategy.ALL)&#xA;        .centerCrop()&#xA;  },&#xA;  contentScale = ContentScale.Crop,&#xA;  modifier = modifier,&#xA;  alignment = Alignment.Center,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Custom RequestBuilder&lt;/h3&gt; &#xA; &lt;p&gt;You can request image with your own &lt;a href=&#34;https://bumptech.github.io/glide/doc/options.html#requestbuilder&#34;&gt;RequestBuilder&lt;/a&gt;, which is the backbone of the request in Glide and is responsible for bringing your options together with your requested url or model to start a new load.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = poster.poster,&#xA;  requestBuilder = { Glide.with(LocalContext.current.applicationContext).asDrawable() },&#xA;  modifier = Modifier.constrainAs(image) {&#xA;    centerHorizontallyTo(parent)&#xA;    top.linkTo(parent.top)&#xA;  }.aspectRatio(0.8f)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Custom RequestListener&lt;/h3&gt; &#xA; &lt;p&gt;You can register your own &lt;a href=&#34;https://bumptech.github.io/glide/javadocs/440/com/bumptech/glide/request/RequestListener.html&#34;&gt;RequestListener&lt;/a&gt;, which allows you to trace the status of a request while images load.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = poster.poster,&#xA;  requestListener = object: RequestListener&amp;lt;Drawable&amp;gt; {&#xA;    override fun onLoadFailed(&#xA;      e: GlideException?,&#xA;      model: Any?,&#xA;      target: Target&amp;lt;Drawable&amp;gt;?,&#xA;      isFirstResource: Boolean&#xA;    ): Boolean {&#xA;      // do something&#xA;      return false&#xA;    }&#xA;&#xA;    override fun onResourceReady(&#xA;      resource: Drawable?,&#xA;      model: Any?,&#xA;      target: Target&amp;lt;Drawable&amp;gt;?,&#xA;      dataSource: DataSource?,&#xA;      isFirstResource: Boolean&#xA;    ): Boolean {&#xA;      // do something&#xA;      return true&#xA;    }&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;LocalGlideRequestOptions&lt;/h3&gt; &#xA; &lt;p&gt;You can pass the same instance of your &lt;code&gt;RequestOptions&lt;/code&gt; down through the Composition in your composable hierarchy as following the example below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val requestOptions = RequestOptions()&#xA;    .override(300, 300)&#xA;    .circleCrop()&#xA;&#xA;CompositionLocalProvider(LocalGlideRequestOptions provides requestOptions) {&#xA;  // Loads images with the custom `requestOptions` without explicit defines.&#xA;  GlideImage(&#xA;    imageModel = ...&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;div class=&#34;header&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/coil-kt/coil&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/95545538-1cf27f00-0a39-11eb-83dd-ef9b8c6a74cb.png&#34; align=&#34;left&#34; width=&#34;4%&#34; alt=&#34;Fresco&#34;&gt;&lt;/a&gt; &#xA; &lt;h1&gt;Coil&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=landscapist&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/landscapist.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;br&gt; Add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:landscapist-coil:&amp;lt;version&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Please make sure your project uses the same Jetpack Compose version on the &lt;a href=&#34;https://github.com/skydoves/Landscapist/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;CoilImage&lt;/h3&gt; &#xA;&lt;p&gt;You can load images by using the &lt;code&gt;CoilImage&lt;/code&gt; composable function as the following example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;CoilImage(&#xA;  imageModel = imageUrl,&#xA;  // Crop, Fit, Inside, FillHeight, FillWidth, None&#xA;  contentScale = ContentScale.Crop,&#xA;  // shows a placeholder while loading the image.&#xA;  placeHolder = ImageBitmap.imageResource(R.drawable.placeholder),&#xA;  // shows an error ImageBitmap when the request failed.&#xA;  error = ImageBitmap.imageResource(R.drawable.error)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Details for CoilImage&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;👉 Read further for more details&lt;/summary&gt; &#xA; &lt;h3&gt;Custom ImageRequest and ImageLoader&lt;/h3&gt; &#xA; &lt;p&gt;You can load images with your own &lt;a href=&#34;https://coil-kt.github.io/coil/image_requests/&#34;&gt;ImageRequest&lt;/a&gt; and &lt;a href=&#34;https://coil-kt.github.io/coil/image_loaders/&#34;&gt;ImageLoader&lt;/a&gt;, which provides all the necessary information for loading images like caching strategies and transformations.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;CoilImage(&#xA;  imageRequest = {&#xA;      ImageRequest.Builder(LocalContext.current)&#xA;        .data(poster.poster)&#xA;        .crossfade(true)&#xA;        .build() },&#xA;  imageLoader = {&#xA;      ImageLoader.Builder(LocalContext.current)&#xA;        .availableMemoryPercentage(0.25)&#xA;        .crossfade(true)&#xA;        .build() },&#xA;  contentScale = ContentScale.Crop,&#xA;  modifier = modifier,&#xA;  alignment = Alignment.Center,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;LocalCoilImageLoader&lt;/h3&gt; &#xA; &lt;p&gt;You can pass the same instance of your &lt;code&gt;ImageLoader&lt;/code&gt; down through the Composition in your composable hierarchy as following the example below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val imageLoader = ImageLoader.Builder(context).build()&#xA;CompositionLocalProvider(LocalCoilImageLoader provides imageLoader) {&#xA;  // This will automatically use the value of current imageLoader in the hierarchy.&#xA;  CoilImage(&#xA;    imageModel = ...&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/131246748-b88903a1-43de-4e6c-9069-3e956a0cf8a6.gif&#34; align=&#34;right&#34; width=&#34;32%&#34;&gt; &#xA; &lt;h2&gt;Animated Image Supports (GIF, Webp)&lt;/h2&gt; &#xA; &lt;p&gt;You can load animated GIFs and WebP Images with your &lt;code&gt;ImageLoader&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val context = LocalContext.current&#xA;val imageLoader = ImageLoader.Builder(context)&#xA;  .componentRegistry {&#xA;    if (SDK_INT &amp;gt;= 28) {&#xA;      add(ImageDecoderDecoder(context))&#xA;    } else {&#xA;      add(GifDecoder())&#xA;    }&#xA;  }&#xA;  .build()&#xA;&#xA;CoilImage(&#xA;    imageModel = poster.gif, // URL of an animated image.&#xA;    imageLoader = { imageLoader },&#xA;    shimmerParams = ShimmerParams(&#xA;      baseColor = background800,&#xA;      highlightColor = shimmerHighLight&#xA;    ),&#xA;    modifier = Modifier&#xA;      .fillMaxWidth()&#xA;      .padding(8.dp)&#xA;      .height(500.dp)&#xA;      .clip(RoundedCornerShape(8.dp))&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;div class=&#34;header&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/facebook/fresco&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/95545540-1cf27f00-0a39-11eb-9e84-96b9df81364b.png&#34; align=&#34;left&#34; width=&#34;4%&#34; alt=&#34;Fresco&#34;&gt;&lt;/a&gt; &#xA; &lt;h1&gt;Fresco&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=landscapist&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/landscapist.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:landscapist-fresco:&amp;lt;version&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;Landscapist-Fresco&lt;/code&gt; includes version &lt;code&gt;2.6.0&lt;/code&gt; of Fresco. So please make sure your project is using the same Fresco version or exclude the Fresco dependency to adapt yours. Also, please make sure the Jetpack Compose version on the &lt;a href=&#34;https://github.com/skydoves/Landscapist/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;To get started, you should set up &lt;code&gt;Fresco&lt;/code&gt; with &lt;a href=&#34;https://frescolib.org/docs/configure-image-pipeline.html&#34;&gt;ImagePipelineConfig&lt;/a&gt; in your &lt;code&gt;Application&lt;/code&gt; class. Generally, it&#39;s recommended initializing with &lt;code&gt;OkHttpImagePipelineConfigFactory&lt;/code&gt;. Also, you can customize caching, networking, and thread pool strategies with your own &lt;code&gt;ImagePipelineConfig&lt;/code&gt;. For more details, you can check out &lt;a href=&#34;https://frescolib.org/docs/using-other-network-layers.html#using-okhttp&#34;&gt;Using Other Network Layers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class App : Application() {&#xA;&#xA;  override fun onCreate() {&#xA;    super.onCreate()&#xA;&#xA;    val pipelineConfig =&#xA;      OkHttpImagePipelineConfigFactory&#xA;        .newBuilder(this, OkHttpClient.Builder().build())&#xA;        .setDiskCacheEnabled(true)&#xA;        .setDownsampleEnabled(true)&#xA;        .setResizeAndRotateEnabledForNetwork(true)&#xA;        .build()&#xA;&#xA;    Fresco.initialize(this, pipelineConfig)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FrescoImage&lt;/h3&gt; &#xA;&lt;p&gt;You can load images by using the &lt;code&gt;FrescoImage&lt;/code&gt; composable function as the following example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;FrescoImage(&#xA;  imageUrl = stringImageUrl,&#xA;  // Crop, Fit, Inside, FillHeight, FillWidth, None&#xA;  contentScale = ContentScale.Crop,&#xA;  // shows a placeholder while loading the image.&#xA;  placeHolder = ImageBitmap.imageResource(R.drawable.placeholder),&#xA;  // shows an error ImageBitmap when the request failed.&#xA;  error = ImageBitmap.imageResource(R.drawable.error)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Details for FrescoImage&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;👉 Read further for more details&lt;/summary&gt; &#xA; &lt;h3&gt;Custom ImageRequest&lt;/h3&gt; &#xA; &lt;p&gt;You can load images with your own &lt;a href=&#34;https://frescolib.org/docs/image-requests.html&#34;&gt;ImageRequest&lt;/a&gt;, which provides some necessary information for loading images like decoding strategies and resizing.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val imageRequest = ImageRequestBuilder&#xA;  .newBuilderWithSource(uri)&#xA;  .setImageDecodeOptions(decodeOptions)&#xA;  .setLocalThumbnailPreviewsEnabled(true)&#xA;  .setLowestPermittedRequestLevel(RequestLevel.FULL_FETCH)&#xA;  .setProgressiveRenderingEnabled(false)&#xA;  .setResizeOptions(ResizeOptions(width, height))&#xA;  .build()&#xA;&#xA;FrescoImage(&#xA;  imageUrl = stringImageUrl,&#xA;  imageRequest = { imageRequest },&#xA;  contentScale = ContentScale.Crop)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;LocalFrescoImageRequest&lt;/h3&gt; &#xA; &lt;p&gt;You can pass the same instance of your &lt;code&gt;ImageRequest&lt;/code&gt; down through the Composition in your composable hierarchy as following the example below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// customize the ImageRequest as needed&#xA;val imageRequest = ImageRequestBuilder&#xA;  .newBuilderWithSource(uri)&#xA;  .setImageDecodeOptions(decodeOptions)&#xA;  .setLocalThumbnailPreviewsEnabled(true)&#xA;  .setLowestPermittedRequestLevel(RequestLevel.FULL_FETCH)&#xA;  .setProgressiveRenderingEnabled(false)&#xA;  .setResizeOptions(ResizeOptions(width, height))&#xA;  .build()&#xA;&#xA;CompositionLocalProvider(LocalFrescoImageRequest provides imageRequest) {&#xA;  // This will automatically use the value of current ImageRequest in the hierarchy.&#xA;  FrescoImage(&#xA;    imageurl = ...&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/131246748-b88903a1-43de-4e6c-9069-3e956a0cf8a6.gif&#34; align=&#34;right&#34; width=&#34;32%&#34;&gt; &#xA; &lt;h2&gt;Fresco Animated Image Support (GIF, Webp)&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=landscapist&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/landscapist.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;Add the below dependency to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  implementation &#34;com.github.skydoves:landscapist-fresco-websupport:&amp;lt;version&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can load animated GIFs and WebP Images with &lt;code&gt;FrescoWebImage&lt;/code&gt; composable function. You should pass the &lt;code&gt;AbstractDraweeController&lt;/code&gt; like the following example below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;FrescoWebImage(&#xA;  controllerBuilder = Fresco.newDraweeControllerBuilder()&#xA;    .setUri(poster.gif) // GIF or Webp image url.&#xA;    .setAutoPlayAnimations(true),&#xA;  modifier = Modifier&#xA;    .fillMaxWidth()&#xA;    .height(300.dp)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For more details, check out &lt;a href=&#34;https://frescolib.org/docs/animations.html&#34;&gt;DraweeController&lt;/a&gt;, and &lt;a href=&#34;https://frescolib.org/docs/supported-uris.html&#34;&gt;Supported URIs&lt;/a&gt; for setting URI addresses. Also, you can load general images (jpeg, png, etc) which can be loaded with &lt;code&gt;FrescoImage&lt;/code&gt; by using &lt;code&gt;FrescoWebImage&lt;/code&gt; and your custom controller.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Custom Composables&lt;/h2&gt; &#xA;&lt;p&gt;You can execute your own composable functions depending on the three request states below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;loading&lt;/strong&gt;: Executed when loading an image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;success&lt;/strong&gt;: Executed when successful to load an image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;failure&lt;/strong&gt;: Executed when failing to load an image (e.g. network error, wrong destination).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/94174882-d6e1db00-fed0-11ea-86ec-671b5039b1b9.gif&#34; align=&#34;right&#34; width=&#34;28%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage( // CoilImage, FrescoImage&#xA;  imageModel = imageUrl,&#xA;  modifier = modifier,&#xA;  // shows an indicator while loading an image.&#xA;  loading = {&#xA;    Box(modifier = Modifier.matchParentSize()) {&#xA;      CircularProgressIndicator(&#xA;        modifier = Modifier.align(Alignment.Center)&#xA;      )&#xA;    }&#xA;  },&#xA;  // shows an error text if fail to load an image.&#xA;  failure = {&#xA;    Text(text = &#34;image request failed.&#34;)&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you can customize the image content with our own composable function like the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage( // CoilImage, FrescoImage&#xA;  imageModel = imageUrl,&#xA;  // draw a resized image.&#xA;  success = { imageState -&amp;gt;&#xA;    imageState.imageBitmap?.let {&#xA;      Image(&#xA;        bitmap = it,&#xA;        modifier = Modifier.size(128.dp)&#xA;      )&#xA;    }&#xA;  },&#xA;  loading = { &#xA;    // do something &#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also use the custom Composables for &lt;strong&gt;&lt;code&gt;CoilImage&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;FrescoImage&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/148672035-6a82eba5-900c-44ee-a42c-acbf8038d0ab.png&#34; align=&#34;right&#34; width=&#34;46%&#34;&gt; &#xA;&lt;h2&gt;Preview on Android Studio&lt;/h2&gt; &#xA;&lt;p&gt;Landscapist supports preview mode for each image library; &lt;strong&gt;Glide&lt;/strong&gt;, &lt;strong&gt;Coil&lt;/strong&gt;, and &lt;strong&gt;Fresco&lt;/strong&gt;. You can show the preview image on your editor with a &lt;code&gt;previewPlaceholder&lt;/code&gt; parameter as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = poster.poster,&#xA;  modifier = Modifier.aspectRatio(0.8f),&#xA;  previewPlaceholder = R.drawable.poster&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also use the the &lt;code&gt;previewPlaceholder&lt;/code&gt; parameter for &lt;strong&gt;&lt;code&gt;CoilImage&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;FrescoImage&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/95812167-be3a4780-0d4f-11eb-9360-2a4a66a3fb46.gif&#34; align=&#34;right&#34; width=&#34;26%&#34;&gt; &#xA;&lt;h2&gt;Shimmer Effect&lt;/h2&gt; &#xA;&lt;p&gt;You can implement a shimmering effect while loading an image by using the &lt;code&gt;ShimmerParams&lt;/code&gt; parameter as following the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage( // CoilImage, FrescoImage&#xA;  imageModel = imageUrl,&#xA;  modifier = modifier,&#xA;  // shows a shimmering effect when loading an image.&#xA;  shimmerParams = ShimmerParams(&#xA;    baseColor = MaterialTheme.colors.background,&#xA;    highlightColor = shimmerHighLight,&#xA;    durationMillis = 350,&#xA;    dropOff = 0.65f,&#xA;    tilt = 20f&#xA;  ),&#xA;  // shows an error text message when request failed.&#xA;  failure = {&#xA;    Text(text = &#34;image request failed.&#34;)&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also use the Shimmer effect for &lt;strong&gt;&lt;code&gt;CoilImage&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;FrescoImage&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/95661452-6abad480-0b6a-11eb-91c4-7cbe40b77927.gif&#34; align=&#34;right&#34; width=&#34;26%&#34;&gt; &#xA;&lt;h2&gt;Circular Reveal Animation&lt;/h2&gt; &#xA;&lt;p&gt;You can implement the circular reveal animation while drawing images with &lt;code&gt;CircularReveal&lt;/code&gt; attribute as the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage( // CoilImage, FrescoImage&#xA;  imageModel = imageUrl,&#xA;  // Crop, Fit, Inside, FillHeight, FillWidth, None&#xA;  contentScale = ContentScale.Crop,&#xA;  // shows an image with the circular reveal animation.&#xA;  circularReveal = CircularReveal(duration = 350),&#xA;  // shows a placeholder ImageBitmap when loading.&#xA;  placeHolder = ImageBitmap.imageResource(R.drawable.placeholder),&#xA;  // shows an error ImageBitmap when the request failed.&#xA;  error = ImageBitmap.imageResource(R.drawable.error)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value of the &lt;code&gt;circularReveal&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also use the Circular Reveal Animation for &lt;strong&gt;&lt;code&gt;CoilImage&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;FrescoImage&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Palette&lt;/h2&gt; &#xA;&lt;p&gt;You can extract primary (theme) color profiles with &lt;code&gt;BitmapPalette&lt;/code&gt;. You can check out &lt;a href=&#34;https://developer.android.com/training/material/palette-colors#extract-color-profiles&#34;&gt;Extract color profiles&lt;/a&gt; to see what kinds of colors can be extracted.&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/129226361-877689b8-a1ec-4f59-b8a6-e2efe33a8de7.gif&#34; align=&#34;right&#34; width=&#34;26%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var palette by remember { mutableStateOf&amp;lt;Palette?&amp;gt;(null) }&#xA;&#xA;GlideImage( // CoilImage, FrescoImage also can be used.&#xA;  imageModel = imageUrl,&#xA;  bitmapPalette = BitmapPalette {&#xA;    palette = it&#xA;  }&#xA;)&#xA;&#xA;Crossfade(&#xA;  targetState = palette,&#xA;  modifier = Modifier&#xA;    .padding(horizontal = 8.dp)&#xA;    .size(45.dp)&#xA;) {&#xA;  Box(&#xA;    modifier = Modifier&#xA;      .background(color = Color(it?.lightVibrantSwatch?.rgb ?: 0))&#xA;      .fillMaxSize()&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you can customize attributes of &lt;code&gt;BitmapPalette&lt;/code&gt; like the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var palette by remember { mutableStateOf&amp;lt;Palette?&amp;gt;(null) }&#xA;&#xA;GlideImage( // CoilImage, FrescoImage also can be used.&#xA;  imageModel = imageUrl,&#xA;  modifier = Modifier&#xA;    .aspectRatio(0.8f),&#xA;  bitmapPalette = BitmapPalette(&#xA;    imageModel = poster.poster,&#xA;    useCache = true,&#xA;    interceptor = {&#xA;      it.addFilter { rgb, hsl -&amp;gt;&#xA;        // here edit to add the filter colors.&#xA;        false&#xA;      }&#xA;    },&#xA;    paletteLoadedListener = {&#xA;      palette = it&#xA;    }&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also use the Palette for &lt;strong&gt;&lt;code&gt;CoilImage&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;FrescoImage&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Who&#39;s using Landscapist?&lt;/h2&gt; &#xA;&lt;p&gt;If your project uses Landscapist, please let me know by creating a new issue! 🤗&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/24237865/125583736-f0ffa76f-8f87-433b-a9fd-192231dc5e63.jpg&#34;&gt;Twitter for Android&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.twitter.android&amp;amp;hl=ko&amp;amp;gl=US&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/125583182-9527dd48-433e-4e17-ae52-3f2bb544a847.jpg&#34; alt=&#34;twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;This library was mostly inspired by &lt;a href=&#34;https://github.com/chrisbanes/accompanist&#34;&gt;Accompanist&lt;/a&gt;.&lt;br&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Accompanist is a group of libraries that contains some utilities which I&#39;ve found myself copying around projects which use Jetpack Compose. Currently, it contains image loading and insets. You can get more variety and recent systems from the library maintained by Google.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Find this repository useful? &lt;span&gt;❤️&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Support it by joining &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves/Landscapist/stargazers&#34;&gt;stargazers&lt;/a&gt;&lt;/strong&gt; for this repository. &lt;span&gt;⭐&lt;/span&gt; &lt;br&gt; Also &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves&#34;&gt;follow&lt;/a&gt;&lt;/strong&gt; me for my next creations! 🤩&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;Designed and developed by 2020 skydoves (Jaewoong Eum)&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>