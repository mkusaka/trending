<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-30T01:39:08Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>olshevski/compose-navigation-reimagined</title>
    <updated>2023-03-30T01:39:08Z</updated>
    <id>tag:github.com,2023-03-30:/olshevski/compose-navigation-reimagined</id>
    <link href="https://github.com/olshevski/compose-navigation-reimagined" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸŒˆ Type-safe navigation library for Jetpack Compose&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://user-images.githubusercontent.com/5606565/153590758-1591f745-be66-42f5-bd1a-3ef3c5b2453c.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;A small and simple, yet fully fledged and customizable navigation library for &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full &lt;strong&gt;type-safety&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Built-in state restoration&lt;/li&gt; &#xA; &lt;li&gt;Nested navigation with independent backstacks&lt;/li&gt; &#xA; &lt;li&gt;Own Lifecycle, ViewModelStore and SavedStateRegistry for every backstack entry&lt;/li&gt; &#xA; &lt;li&gt;Animated transitions&lt;/li&gt; &#xA; &lt;li&gt;Dialog and bottom sheet navigation&lt;/li&gt; &#xA; &lt;li&gt;Ability to define scopes for easy sharing of ViewModels&lt;/li&gt; &#xA; &lt;li&gt;No builders, no obligatory superclasses for your composables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Add a single dependency to your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;dev.olshevski.navigation:reimagined:1.4.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Define a set of screens. It is convenient to use a sealed class for this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;sealed class Screen : Parcelable {&#xA;&#xA;    @Parcelize&#xA;    object First : Screen()&#xA;&#xA;    @Parcelize&#xA;    data class Second(val id: Int) : Screen()&#xA;&#xA;    @Parcelize&#xA;    data class Third(val text: String) : Screen()&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a composable with &lt;code&gt;NavController&lt;/code&gt;, &lt;code&gt;NavBackHandler&lt;/code&gt; and &lt;code&gt;NavHost&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun NavHostScreen() {&#xA;    val navController = rememberNavController&amp;lt;Screen&amp;gt;(&#xA;        startDestination = Screen.First&#xA;    )&#xA;&#xA;    NavBackHandler(navController)&#xA;&#xA;    NavHost(navController) { screen -&amp;gt;&#xA;        when (screen) {&#xA;            is Screen.First -&amp;gt; Column {&#xA;                Text(&#34;First screen&#34;)&#xA;                Button(onClick = {&#xA;                    navController.navigate(Screen.Second(id = 42))&#xA;                }) {&#xA;                    Text(&#34;Open Second screen&#34;)&#xA;                }&#xA;            }&#xA;&#xA;            is Screen.Second -&amp;gt; Column {&#xA;                Text(&#34;Second screen: ${screen.id}&#34;)&#xA;                Button(onClick = {&#xA;                    navController.navigate(Screen.Third(text = &#34;Hello&#34;))&#xA;                }) {&#xA;                    Text(&#34;Open Third screen&#34;)&#xA;                }&#xA;            }&#xA;&#xA;            is Screen.Third -&amp;gt; {&#xA;                Text(&#34;Third screen: ${screen.text}&#34;)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, &lt;code&gt;NavController&lt;/code&gt; is used for switching between screens, &lt;code&gt;NavBackHandler&lt;/code&gt; handles back presses and &lt;code&gt;NavHost&lt;/code&gt; provides a composable corresponding to the last destination in the backstack. As simple as that.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full documentation is available &lt;a href=&#34;https://olshevski.github.io/compose-navigation-reimagined&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Additional dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Library-specific &lt;code&gt;hiltViewModel()&lt;/code&gt; implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-koltin&#34;&gt;implementation(&#34;dev.olshevski.navigation:reimagined-hilt:&amp;lt;latest-version&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;BottomSheetNavHost&lt;/code&gt; implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-koltin&#34;&gt;implementation(&#34;dev.olshevski.navigation:reimagined-material:&amp;lt;latest-version&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;BottomSheetNavHost&lt;/code&gt;, but only with Material 3 dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-koltin&#34;&gt;implementation(&#34;dev.olshevski.navigation:reimagined-material3:&amp;lt;latest-version&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sample&lt;/h2&gt; &#xA;&lt;p&gt;Explore the &lt;a href=&#34;https://github.com/olshevski/compose-navigation-reimagined/tree/main/sample&#34;&gt;sample&lt;/a&gt;. It demonstrates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;passing values and returning results&lt;/li&gt; &#xA; &lt;li&gt;animated transitions&lt;/li&gt; &#xA; &lt;li&gt;dialog and bottom sheet navigation&lt;/li&gt; &#xA; &lt;li&gt;nested navigation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material/package-summary#BottomNavigation(androidx.compose.ui.Modifier,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.unit.Dp,kotlin.Function1)&#34;&gt;BottomNavigation&lt;/a&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;entry-scoped and shared ViewModels&lt;/li&gt; &#xA; &lt;li&gt;hoisting of NavController to the ViewModel layer&lt;/li&gt; &#xA; &lt;li&gt;deeplinks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve been thinking about Android app architecture and navigation in particular for the longest time. After being introduced to Compose I could finally create the navigation structure that satisfies all my needs perfectly.&lt;/p&gt; &#xA;&lt;p&gt;I hope it can help you as well.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://user-images.githubusercontent.com/5606565/227801130-39bee5cf-cf75-47c1-8791-f7753b5c7c0d.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you like this library and find it useful, please star the project and share it with your fellow developers. You can also &lt;a href=&#34;https://www.buymeacoffee.com/olshevski&#34;&gt;buy me a coffee&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>