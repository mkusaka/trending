<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-03T01:36:11Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fluttercommunity/flutter_downloader</title>
    <updated>2022-11-03T01:36:11Z</updated>
    <id>tag:github.com,2022-11-03:/fluttercommunity/flutter_downloader</id>
    <link href="https://github.com/fluttercommunity/flutter_downloader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter Downloader - A plugin for creating and managing download tasks. Maintainer: @bartekpacia&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/fluttercommunity/community&#34;&gt;&lt;img src=&#34;https://fluttercommunity.dev/_github/header/flutter_downloader&#34; alt=&#34;flutter_community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Flutter Downloader&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/flutter_downloader&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_downloader.svg?sanitize=true&#34; alt=&#34;flutter_downloader on pub.dev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A plugin for creating and managing download tasks. Supports iOS and Android.&lt;/p&gt; &#xA;&lt;p&gt;This plugin is using &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/workmanager&#34;&gt;&lt;code&gt;WorkManager&lt;/code&gt;&lt;/a&gt; on Android and &lt;a href=&#34;https://developer.apple.com/documentation/foundation/nsurlsessiondownloadtask?language=objc&#34;&gt;&lt;code&gt;NSURLSessionDownloadTask&lt;/code&gt;&lt;/a&gt; on iOS to run download tasks in background.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;Development note&lt;/em&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;The changes of external storage APIs in Android 11 cause some problems with the current implementation. I decide to re-design this plugin with new strategy to manage download file location. It is still in triage and discussion in this &lt;a href=&#34;https://github.com/fluttercommunity/flutter_downloader/pull/550&#34;&gt;PR&lt;/a&gt;. It is very appreciated to have contribution and feedback from Flutter developer to get better design for the plugin.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;iOS integration&lt;/h2&gt; &#xA;&lt;h3&gt;Required configuration:&lt;/h3&gt; &#xA;&lt;p&gt;The following steps require to open your &lt;code&gt;ios&lt;/code&gt; project in Xcode.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enable background mode.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img width=&#34;512&#34; src=&#34;https://github.com/hnvn/flutter_downloader/raw/master/screenshot/enable_background_mode.png?raw=true&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add &lt;code&gt;sqlite&lt;/code&gt; library.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt; &lt;img width=&#34;512&#34; src=&#34;https://github.com/hnvn/flutter_downloader/raw/master/screenshot/add_sqlite_1.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p style=&#34;margin-top:30;&#34;&gt; &lt;img width=&#34;512&#34; src=&#34;https://github.com/hnvn/flutter_downloader/raw/master/screenshot/add_sqlite_2.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Configure &lt;code&gt;AppDelegate&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;/// AppDelegate.h&#xA;#import &amp;lt;Flutter/Flutter.h&amp;gt;&#xA;#import &amp;lt;UIKit/UIKit.h&amp;gt;&#xA;&#xA;@interface AppDelegate : FlutterAppDelegate&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;// AppDelegate.m&#xA;#include &#34;AppDelegate.h&#34;&#xA;#include &#34;GeneratedPluginRegistrant.h&#34;&#xA;#include &#34;FlutterDownloaderPlugin.h&#34;&#xA;&#xA;@implementation AppDelegate&#xA;&#xA;void registerPlugins(NSObject&amp;lt;FlutterPluginRegistry&amp;gt;* registry) {&#xA;  if (![registry hasPlugin:@&#34;FlutterDownloaderPlugin&#34;]) {&#xA;     [FlutterDownloaderPlugin registerWithRegistrar:[registry registrarForPlugin:@&#34;FlutterDownloaderPlugin&#34;]];&#xA;  }&#xA;}&#xA;&#xA;- (BOOL)application:(UIApplication *)application&#xA;    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;  [GeneratedPluginRegistrant registerWithRegistry:self];&#xA;  [FlutterDownloaderPlugin setPluginRegistrantCallback:registerPlugins];&#xA;  // Override point for customization after application launch.&#xA;  return [super application:application didFinishLaunchingWithOptions:launchOptions];&#xA;}&#xA;&#xA;@end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit&#xA;import Flutter&#xA;import flutter_downloader&#xA;&#xA;@UIApplicationMain&#xA;@objc class AppDelegate: FlutterAppDelegate {&#xA;  override func application(&#xA;    _ application: UIApplication,&#xA;    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?&#xA;  ) -&amp;gt; Bool {&#xA;    GeneratedPluginRegistrant.register(with: self)&#xA;    FlutterDownloaderPlugin.setPluginRegistrantCallback(registerPlugins)&#xA;    return super.application(application, didFinishLaunchingWithOptions: launchOptions)&#xA;  }&#xA;}&#xA;&#xA;private func registerPlugins(registry: FlutterPluginRegistry) {&#xA;    if (!registry.hasPlugin(&#34;FlutterDownloaderPlugin&#34;)) {&#xA;       FlutterDownloaderPlugin.register(with: registry.registrar(forPlugin: &#34;FlutterDownloaderPlugin&#34;)!)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional configuration:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support HTTP request:&lt;/strong&gt; if you want to download file with HTTP request, you need to disable Apple Transport Security (ATS) feature. There&#39;re two options:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Disable ATS for a specific domain only: (add the following code to your &lt;code&gt;Info.plist&lt;/code&gt; file)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSExceptionDomains&amp;lt;/key&amp;gt;&#xA;  &amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;www.yourserver.com&amp;lt;/key&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;      &amp;lt;!-- add this key to enable subdomains such as sub.yourserver.com --&amp;gt;&#xA;      &amp;lt;key&amp;gt;NSIncludesSubdomains&amp;lt;/key&amp;gt;&#xA;      &amp;lt;true/&amp;gt;&#xA;      &amp;lt;!-- add this key to allow standard HTTP requests, thus negating the ATS --&amp;gt;&#xA;      &amp;lt;key&amp;gt;NSTemporaryExceptionAllowsInsecureHTTPLoads&amp;lt;/key&amp;gt;&#xA;      &amp;lt;true/&amp;gt;&#xA;      &amp;lt;!-- add this key to specify the minimum TLS version to accept --&amp;gt;&#xA;      &amp;lt;key&amp;gt;NSTemporaryExceptionMinimumTLSVersion&amp;lt;/key&amp;gt;&#xA;      &amp;lt;string&amp;gt;TLSv1.1&amp;lt;/string&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;  &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Completely disable ATS. Add the following to your &lt;code&gt;Info.plist&lt;/code&gt; file)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;NSAllowsArbitraryLoads&amp;lt;/key&amp;gt;&amp;lt;true/&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configure maximum number of concurrent tasks:&lt;/strong&gt; the plugin allows 3 download tasks running at a moment by default (if you enqueue more than 3 tasks, there&#39;re only 3 tasks running, other tasks are put in pending state). You can change this number by adding the following code to your &lt;code&gt;Info.plist&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- changes this number to configure the maximum number of concurrent tasks --&amp;gt;&#xA;&amp;lt;key&amp;gt;FDMaximumConcurrentTasks&amp;lt;/key&amp;gt;&#xA;&amp;lt;integer&amp;gt;5&amp;lt;/integer&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Localize notification messages:&lt;/strong&gt; the plugin will send a notification message to notify user in case all files are downloaded while your application is not running in foreground. This message is English by default. You can localize this message by adding and localizing following message in &lt;code&gt;Info.plist&lt;/code&gt; file. (you can find the detail of &lt;code&gt;Info.plist&lt;/code&gt; localization in this &lt;a href=&#34;https://medium.com/@guerrix/info-plist-localization-ad5daaea732a&#34;&gt;link&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;FDAllFilesDownloadedMessage&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;All files have been downloaded&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This plugin only supports save files in &lt;code&gt;NSDocumentDirectory&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Android integration&lt;/h2&gt; &#xA;&lt;p&gt;You don&#39;t have to do anything extra to make the plugin work on Android.&lt;/p&gt; &#xA;&lt;p&gt;There are although a few optional settings you might want to configure.&lt;/p&gt; &#xA;&lt;h3&gt;Open downloaded file from notification&lt;/h3&gt; &#xA;&lt;p&gt;To make tapping on notification open the downloaded file on Android, add the following code to &lt;code&gt;AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;provider&#xA;    android:name=&#34;vn.hunghd.flutterdownloader.DownloadedFileProvider&#34;&#xA;    android:authorities=&#34;${applicationId}.flutter_downloader.provider&#34;&#xA;    android:exported=&#34;false&#34;&#xA;    android:grantUriPermissions=&#34;true&#34;&amp;gt;&#xA;    &amp;lt;meta-data&#xA;        android:name=&#34;android.support.FILE_PROVIDER_PATHS&#34;&#xA;        android:resource=&#34;@xml/provider_paths&#34;/&amp;gt;&#xA;&amp;lt;/provider&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You have to save your downloaded files in external storage (where the other applications have permission to read your files)&lt;/li&gt; &#xA; &lt;li&gt;The downloaded files are only able to be opened if your device has at least one application that can read these file types (mp3, pdf, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configure maximum number of concurrent download tasks&lt;/h3&gt; &#xA;&lt;p&gt;The plugin depends on &lt;code&gt;WorkManager&lt;/code&gt; library and &lt;code&gt;WorkManager&lt;/code&gt; depends on the number of available processor to configure the maximum number of tasks running at a moment. You can setup a fixed number for this configuration by adding the following code to your &lt;code&gt;AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- Begin FlutterDownloader customization --&amp;gt;&#xA;&amp;lt;!-- disable default Initializer --&amp;gt;&#xA;&amp;lt;provider&#xA;    android:name=&#34;androidx.startup.InitializationProvider&#34;&#xA;    android:authorities=&#34;${applicationId}.androidx-startup&#34;&#xA;    android:exported=&#34;false&#34;&#xA;    tools:node=&#34;merge&#34;&amp;gt;&#xA;    &amp;lt;meta-data&#xA;        android:name=&#34;androidx.work.WorkManagerInitializer&#34;&#xA;        android:value=&#34;androidx.startup&#34;&#xA;        tools:node=&#34;remove&#34; /&amp;gt;&#xA;&amp;lt;/provider&amp;gt;&#xA;&#xA;&amp;lt;!-- declare customized Initializer --&amp;gt;&#xA;&amp;lt;provider&#xA;    android:name=&#34;vn.hunghd.flutterdownloader.FlutterDownloaderInitializer&#34;&#xA;    android:authorities=&#34;${applicationId}.flutter-downloader-init&#34;&#xA;    android:exported=&#34;false&#34;&amp;gt;&#xA;    &amp;lt;!-- changes this number to configure the maximum number of concurrent tasks --&amp;gt;&#xA;    &amp;lt;meta-data&#xA;        android:name=&#34;vn.hunghd.flutterdownloader.MAX_CONCURRENT_TASKS&#34;&#xA;        android:value=&#34;5&#34; /&amp;gt;&#xA;&amp;lt;/provider&amp;gt;&#xA;&amp;lt;!-- End FlutterDownloader customization --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Localize strings in notifications&lt;/h3&gt; &#xA;&lt;p&gt;You can localize texts in download progress notifications by localizing following messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;string name=&#34;flutter_downloader_notification_started&#34;&amp;gt;Download started&amp;lt;/string&amp;gt;&#xA;&amp;lt;string name=&#34;flutter_downloader_notification_in_progress&#34;&amp;gt;Download in progress&amp;lt;/string&amp;gt;&#xA;&amp;lt;string name=&#34;flutter_downloader_notification_canceled&#34;&amp;gt;Download canceled&amp;lt;/string&amp;gt;&#xA;&amp;lt;string name=&#34;flutter_downloader_notification_failed&#34;&amp;gt;Download failed&amp;lt;/string&amp;gt;&#xA;&amp;lt;string name=&#34;flutter_downloader_notification_complete&#34;&amp;gt;Download complete&amp;lt;/string&amp;gt;&#xA;&amp;lt;string name=&#34;flutter_downloader_notification_paused&#34;&amp;gt;Download paused&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can learn more about localization on Android &lt;a href=&#34;https://developer.android.com/training/basics/supporting-devices/languages&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install .apk files&lt;/h3&gt; &#xA;&lt;p&gt;To open and install &lt;code&gt;.apk&lt;/code&gt; files, your application needs &lt;code&gt;REQUEST_INSTALL_PACKAGES&lt;/code&gt; permission. Add the following in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.REQUEST_INSTALL_PACKAGES&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@son.rommer/fix-cleartext-traffic-error-in-android-9-pie-2f4e9e2235e6&#34;&gt;Fix Cleartext Traffic error on Android 9 Pie&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Import and initialize&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_downloader/flutter_downloader.dart&#39;;&#xA;&#xA;void main() {&#xA;  WidgetsFlutterBinding.ensureInitialized();&#xA;&#xA;  // Plugin must be initialized before using&#xA;  await FlutterDownloader.initialize(&#xA;    debug: true, // optional: set to false to disable printing logs to console (default: true)&#xA;    ignoreSsl: true // option: set to false to disable working with http links (default: false)&#xA;  );&#xA;&#xA;  runApp(/*...*/)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create new download task&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final taskId = await FlutterDownloader.enqueue(&#xA;  url: &#39;your download link&#39;,&#xA;  headers: {}, // optional: header send with url (auth token etc)&#xA;  savedDir: &#39;the path of directory where you want to save downloaded files&#39;,&#xA;  showNotification: true, // show download progress in status bar (for Android)&#xA;  openFileFromNotification: true, // click on notification to open downloaded file (for Android)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update download progress&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await FlutterDownloader.registerCallback(callback); // callback is a top-level or static function&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;UI is rendered on the main isolate, while download events come from the background isolate (in other words, code in &lt;code&gt;callback&lt;/code&gt; is run in the background isolate), so you have to handle the communication between two isolates. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ReceivePort _port = ReceivePort();&#xA;&#xA;@override&#xA;void initState() {&#xA;  super.initState();&#xA;&#xA;  IsolateNameServer.registerPortWithName(_port.sendPort, &#39;downloader_send_port&#39;);&#xA;  _port.listen((dynamic data) {&#xA;    String id = data[0];&#xA;    DownloadTaskStatus status = data[1];&#xA;    int progress = data[2];&#xA;    setState((){ });&#xA;  });&#xA;&#xA;  FlutterDownloader.registerCallback(downloadCallback);&#xA;}&#xA;&#xA;@override&#xA;void dispose() {&#xA;  IsolateNameServer.removePortNameMapping(&#39;downloader_send_port&#39;);&#xA;  super.dispose();&#xA;}&#xA;&#xA;@pragma(&#39;vm:entry-point&#39;)&#xA;static void downloadCallback(String id, DownloadTaskStatus status, int progress) {&#xA;  final SendPort send = IsolateNameServer.lookupPortByName(&#39;downloader_send_port&#39;);&#xA;  send.send([id, status, progress]);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;@pragma(&#39;vm:entry-point&#39;)&lt;/code&gt; must be placed above the &lt;code&gt;callback&lt;/code&gt; function to avoid tree shaking in release mode for Android.&lt;/p&gt; &#xA;&lt;h3&gt;Load all download tasks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final tasks = await FlutterDownloader.loadTasks();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load download tasks using a raw SQL query&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final tasks = await FlutterDownloader.loadTasksWithRawQuery(query: query);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to parse data into &lt;code&gt;DownloadTask&lt;/code&gt; object successfully, you should load data with all fields from the database (in the other words, use &lt;code&gt;SELECT *&lt;/code&gt; ). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;SELECT * FROM task WHERE status=3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below is the schema of the &lt;code&gt;task&lt;/code&gt; table where &lt;code&gt;flutter_downloader&lt;/code&gt; plugin stores information about download tasks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;CREATE TABLE `task` (&#xA;  `id`  INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;  `task_id` VARCHAR ( 256 ),&#xA;  `url` TEXT,&#xA;  `status`  INTEGER DEFAULT 0,&#xA;  `progress`  INTEGER DEFAULT 0,&#xA;  `file_name` TEXT,&#xA;  `saved_dir` TEXT,&#xA;  `resumable` TINYINT DEFAULT 0,&#xA;  `headers` TEXT,&#xA;  `show_notification` TINYINT DEFAULT 0,&#xA;  `open_file_from_notification` TINYINT DEFAULT 0,&#xA;  `time_created`  INTEGER DEFAULT 0&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cancel a task&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FlutterDownloader.cancel(taskId: taskId);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cancel all tasks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FlutterDownloader.cancelAll();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pause a task&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FlutterDownloader.pause(taskId: taskId);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resume a task&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FlutterDownloader.resume(taskId: taskId);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;resume()&lt;/code&gt; will return a new &lt;code&gt;taskId&lt;/code&gt; corresponding to a new background task that is created to continue the download process. You should replace the old &lt;code&gt;taskId&lt;/code&gt; (that has &lt;code&gt;paused&lt;/code&gt; status) by the new &lt;code&gt;taskId&lt;/code&gt; to continue tracking the download progress.&lt;/p&gt; &#xA;&lt;h3&gt;Retry a failed task&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FlutterDownloader.retry(taskId: taskId);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;retry()&lt;/code&gt; will return a new &lt;code&gt;taskId&lt;/code&gt; (just like &lt;code&gt;resume()&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Remove a task&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FlutterDownloader.remove(taskId: taskId, shouldDeleteContent:false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Open and preview a downloaded file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FlutterDownloader.open(taskId: taskId);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Android, you can only open a downloaded file if it is placed in the external storage and there&#39;s at least one application that can read that file type on your device.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs/Requests&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to open an issue if you encounter any problems or think that the plugin is missing some feature.&lt;/p&gt; &#xA;&lt;p&gt;Pull request are also very welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jellyfin/jellyfin-android</title>
    <updated>2022-11-03T01:36:11Z</updated>
    <id>tag:github.com,2022-11-03:/jellyfin/jellyfin-android</id>
    <link href="https://github.com/jellyfin/jellyfin-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android Client for Jellyfin&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Jellyfin Android&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Part of the &lt;a href=&#34;https://jellyfin.org&#34;&gt;Jellyfin Project&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Logo Banner&#34; src=&#34;https://raw.githubusercontent.com/jellyfin/jellyfin-ux/master/branding/SVG/banner-logo-solid.svg?sanitize=true&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/jellyfin/jellyfin-android&#34;&gt; &lt;img alt=&#34;GPL 2.0 License&#34; src=&#34;https://img.shields.io/github/license/jellyfin/jellyfin-android.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/jellyfin/jellyfin-android/releases&#34;&gt; &lt;img alt=&#34;Current Release&#34; src=&#34;https://img.shields.io/github/release/jellyfin/jellyfin-android.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://translate.jellyfin.org/projects/jellyfin-android/jellyfin-android/&#34;&gt; &lt;img alt=&#34;Translation Status&#34; src=&#34;https://translate.jellyfin.org/widgets/jellyfin-android/-/jellyfin-android/svg-badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://opencollective.com/jellyfin&#34;&gt; &lt;img alt=&#34;Donate&#34; src=&#34;https://img.shields.io/opencollective/all/jellyfin.svg?label=backers&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://features.jellyfin.org&#34;&gt; &lt;img alt=&#34;Feature Requests&#34; src=&#34;https://img.shields.io/badge/fider-vote%20on%20features-success.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/+jellyfin:matrix.org&#34;&gt; &lt;img alt=&#34;Chat on Matrix&#34; src=&#34;https://img.shields.io/matrix/jellyfin:matrix.org.svg?logo=matrix&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/jellyfin/&#34;&gt; &lt;img alt=&#34;Join our Subreddit&#34; src=&#34;https://img.shields.io/badge/reddit-r%2Fjellyfin-%23FF5700.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.jellyfin.mobile&#34;&gt; &lt;img width=&#34;153&#34; src=&#34;https://jellyfin.org/images/store-icons/google-play.png&#34; alt=&#34;Jellyfin on Google Play&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.amazon.com/gp/aw/d/B081RFTTQ9&#34;&gt; &lt;img width=&#34;153&#34; src=&#34;https://jellyfin.org/images/store-icons/amazon.png&#34; alt=&#34;Jellyfin on Amazon Appstore&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://f-droid.org/en/packages/org.jellyfin.mobile/&#34;&gt; &lt;img width=&#34;153&#34; src=&#34;https://jellyfin.org/images/store-icons/fdroid.png&#34; alt=&#34;Jellyfin on F-Droid&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://repo.jellyfin.org/releases/client/android/&#34;&gt;Download archive&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Jellyfin Mobile is an Android app that connects to Jellyfin instances and integrates with the &lt;a href=&#34;https://github.com/jellyfin/jellyfin-web&#34;&gt;official web client&lt;/a&gt;. We welcome all contributions and pull requests! If you have a larger feature in mind please open an issue so we can discuss the implementation before you start. Even though the client is only a web wrapper there are still lots of improvements and bug fixes that can be accomplished with Android and Kotlin knowledge.&lt;/p&gt; &#xA;&lt;p&gt;Most of the translations can be found in the &lt;a href=&#34;https://translate.jellyfin.org/projects/jellyfin/jellyfin-web&#34;&gt;web client&lt;/a&gt; since it&#39;s the base for the Android client as well. Translations for the app can also be improved very easily from our &lt;a href=&#34;https://translate.jellyfin.org/projects/jellyfin-android/jellyfin-android&#34;&gt;Weblate&lt;/a&gt; instance. Look through the following graphic to see if your native language could use some work!&lt;/p&gt; &#xA;&lt;a href=&#34;https://translate.jellyfin.org/engage/jellyfin-android/&#34;&gt; &lt;img alt=&#34;Detailed Translation Status&#34; src=&#34;https://translate.jellyfin.org/widgets/jellyfin-android/-/jellyfin-android/multi-auto.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;This client was rewritten from scratch with a fresh git history in July to August 2020, and replaces the old Cordova-based client, which can still be found &lt;a href=&#34;https://github.com/jellyfin-archive/jellyfin-android-original&#34;&gt;in the archives&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build Process&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android SDK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone or download this repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/jellyfin/jellyfin-android.git&#xA;cd jellyfin-android&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the project in Android Studio and run it from there or build an APK directly through Gradle:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew assembleDebug&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Deploy to device/emulator&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./gradlew installDebug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;You can also replace the &#34;Debug&#34; with &#34;Release&#34; to get an optimized release binary.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gdgand/ComposeCamp2022</title>
    <updated>2022-11-03T01:36:11Z</updated>
    <id>tag:github.com,2022-11-03:/gdgand/ComposeCamp2022</id>
    <link href="https://github.com/gdgand/ComposeCamp2022" rel="alternate"></link>
    <summary type="html">&lt;p&gt;https://gdg.community.dev/e/m55vvm/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ComposeCamp2022&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gdg.community.dev/e/m55vvm/&#34;&gt;참여신청하기&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;안녕하세요 2022 Compose Camp에 오신걸 환영합니다.&lt;br&gt; 다음은 코드랩을 진행하기 위한 안내입니다.&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;진행 일정&lt;/h2&gt; &#xA;&lt;p&gt;2022년 11월 7일 ~ 12월 16일&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compose Camp 시작일이 11월 7일로 연기되었습니다. 참가자 여러분의 너그러운 양해 부탁드립니다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compose 코드랩&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/courses/pathways/compose&#34;&gt;Pathway 보러가기&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/googlecodelabs/android-compose-codelabs&#34;&gt;원본 코드랩 링크&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;영상 보러가기&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;매주 월요일에 하나씩 공개될 예정입니다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;슬라이드 모음&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pathway 1-1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/skydoves/2022-compose-camp-pathway-1-2-state-and-theming-in-jetpack-compose&#34;&gt;Pathway 1-2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/veronikapj/composecamp2022-pathway2&#34;&gt;Pathway 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/fornewid/compose-camp-22kr-pathway3&#34;&gt;Pathway 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pathway 4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;준비물&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio Dolphin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[오픈 카톡방 참여 (https://open.kakao.com/o/gQSlqyEd)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Repo fork 하기&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Github 페이지 오른쪽 상단 위의 fork 클릭&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;fork 브랜치를 어디에 만들 것인지 묻는 팝업이 뜹니다. 신청서에 작성해주신 자신의 Github 계정을 선택해줍니다.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;fork 브랜치가 자신의 계정 아럐 생성되면 완료입니다.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;fork 브랜치는 main 브랜치에 영향을 주지 않습니다. 마음껏 코드랩을 진행해보세요!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;코드랩 진행하기&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;자신의 fork 브랜치를 로컬로 가져오기 위해 원하는 위치에서 github 주소를 복사합니다.&lt;/p&gt; &lt;p&gt;git clone 으로 fork 한 개인 브랜치를 로컬로 다운 받습니다.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;~$ git clone https://github.com/gdgand(개인Github 아이디)/ComposeCamp2022.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;일정 별 각 주차에 맞는 폴더 위치에서 코드랩을 진행합니다. (~/pathway1,2,3,4/XXXComposeCodelab)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;각 pathway 별 시작할 수 있는 코드랩 코드가 포함되어 있습니다. 바로 열어서 코드랩을 시작하실 수 있습니다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;각각의 코드랩을 진행합니다.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;완성된 코드를 개인 fork 브랜치에서 commit, push해서 업데이트 합니다.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;코드랩 수료확인을 위해 직접 진행한 코드 commit 히스토리를 꼭 남겨주세요!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;코드랩 수료 제출하기&lt;/h2&gt; &#xA;&lt;p&gt;모든 코드랩을 완료한 후 작성한 내용은 이곳 &#34;main&#34; 브랜치로 Pull Request 를 작성해주세요!&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;매주 공개되는 자료를 최신화 하기 - GUI로 사용하는 방법&lt;/h2&gt; &#xA;&lt;p&gt;자신의 GitHub에서 Fetch upstream 버튼을 찾아 눌러주세요. 최신화가 필요하다면 Fetch and merge 초록색 버튼을 눌러주면 최신화를 할 수 있습니다. (만약 &#39;This branch is X commits behind gdgand:main.&#39;와 같은 메시지가 보이는데 초록색 버튼이 disable 상태라면 새로고침을 눌러주고, Fetch를 눌러주세요.)&lt;/p&gt; &#xA;&lt;p&gt;본 프로젝트는 각각의 폴더가 안드로이드 스튜디오 프로젝트로 구성되어있습니다.&lt;/p&gt; &#xA;&lt;p&gt;ComposeCamp2022 폴더를 바로 Android Studio로 열수 없고, week 별로 실행할 수 있습니다.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sourcetreeapp.com/&#34;&gt;SourceTree&lt;/a&gt;, &lt;a href=&#34;https://www.gitkraken.com/&#34;&gt;GitKraken&lt;/a&gt; 등을 이용하시면 됩니다.&lt;/p&gt; &#xA;&lt;h3&gt;SourceTree 사용&lt;/h3&gt; &#xA;&lt;p&gt;SourceTree를 설치하고, Clone 할 수 있습니다.&lt;/p&gt; &#xA;&lt;p&gt;SourceTree 설치 방법은 아래 글을 참고하세요.(SourceTree 사용 방법은 검색을 통해 확인 부탁드립니다.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://devkoboso.com/entry/github-sourcetree-%EC%82%AC%EC%9A%A9%EB%B2%95&#34;&gt;SourceTree 윈도우 사용 방법&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;GitKraken 사용&lt;/h3&gt; &#xA;&lt;p&gt;GitKraken을 실행하고, Clone a repo를 열어줍니다.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kindle14.tistory.com/50?category=963674&#34;&gt;GitKraken 사용 방법&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;매주 공개되는 자료를 최신화 하기 - 명령어로 사용하는 방법&lt;/h2&gt; &#xA;&lt;p&gt;(메인 브랜치와 Sync 맞추는 방법)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;현재 fork 한 remote 브랜치 확인 &lt;pre&gt;&lt;code&gt;$ git remote -v&#xA;origin&#x9;https://github.com/YOUR_NAME/ComposeCamp2022.git (fetch)&#xA;origin&#x9;https://github.com/YOUR_NAME/ComposeCamp2022.git (push)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;upstream 으로 gdgand 브랜치 추가하기 &lt;pre&gt;&lt;code&gt;$ git remote add upstream https://github.com/gdgand/ComposeCamp2022.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;잘 추가되었는지 확인하기 &lt;pre&gt;&lt;code&gt;$ git remote -v&#xA;origin&#x9;https://github.com/YOUR_NAME/ComposeCamp2022.git (fetch)&#xA;origin&#x9;https://github.com/YOUR_NAME/ComposeCamp2022.git (push)&#xA;upstream&#x9;https://github.com/gdgand/ComposeCamp2022.git (fetch)&#xA;upstream&#x9;https://github.com/gdgand/ComposeCamp2022.git (push)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;최신 업데이트 확인하기 &lt;pre&gt;&lt;code&gt;$ git fetch upstream&#xA;remote: Enumerating objects: 706, done.&#xA;.. 이하 생략&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;내 remote fork 브랜치와 머지하기 &lt;pre&gt;&lt;code&gt;$ git merge upstream/main&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;변경사항 push 하기 &lt;pre&gt;&lt;code&gt;$ git push origin main&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>