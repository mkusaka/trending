<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-02T01:38:28Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>theapache64/rebugger</title>
    <updated>2023-04-02T01:38:28Z</updated>
    <id>tag:github.com,2023-04-02:/theapache64/rebugger</id>
    <link href="https://github.com/theapache64/rebugger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple Compose library to print the reason for recomposition in your `Logcat` window.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üêû Rebugger&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Rebugger : A recomposition debugger&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Being a ‚Äúcompose dev‚Äù our enemy number one is unnecessary recompositions ü§ï. Often times we use tools like &lt;a href=&#34;https://github.com/theapache64/boil/raw/master/files/RecompositionHighlighter.kt&#34;&gt;recompositionHighligher&lt;/a&gt;, &lt;a href=&#34;https://github.com/theapache64/boil/raw/master/files/LogComposition.kt&#34;&gt;LogComposition&lt;/a&gt;, and layout inspector to count the recomposition, but there‚Äôs no direct way to understand ‚Äúwhy‚Äù the recomposition has happened.&lt;/p&gt; &#xA;&lt;p&gt;Rebugger is a simple compose utility function that can track the change in the given arguments. It‚Äôll print the reason for recomposition in your Logcat window.&lt;/p&gt; &#xA;&lt;h2&gt;‚å®Ô∏è Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/jztXzP9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;1. Add dependencies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/theapache64/rebugger&#34; alt=&#34;latestVersion&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {&#xA;  maven { url &#39;https://jitpack.io&#39; } // Add jitpack&#xA;}&#xA;&#xA;dependencies {&#xA;  implementation &#39;com.github.theapache64:rebugger:&amp;lt;latest.version&amp;gt;&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Add &lt;code&gt;Rebugger&lt;/code&gt; call&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Call &lt;code&gt;Rebugger&lt;/code&gt; with the states or args you want to track&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun VehicleUi(&#xA;    car: Car,&#xA;    bike: Bike,&#xA;) {&#xA;    var human by remember { mutableStateOf(Human(&#34;John&#34;)) }&#xA;&#xA;    // Call Rebugger and pass the states you want to track. &#xA;    // It could be a function arg or a state&#xA;    Rebugger(&#xA;        trackMap = mapOf(&#xA;            &#34;car&#34; to car,&#xA;            &#34;bike&#34; to bike,&#xA;            &#34;human&#34; to human&#xA;        ),&#xA;    )&#xA;    &#xA;    //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. See &lt;code&gt;LogCat&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Search for &lt;code&gt;Rebugger&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/jztXzP9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üñ• Sample Outputs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When Rebugger hooked into your composable, it‚Äôll print something like this&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9678279/228623885-b0516fbd-518b-4135-9016-1928c57bc0c1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When VehicleUi recomposes due to car instance change&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9678279/228624041-e6143b07-ca19-4c03-b49f-9b5bee7f936d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When VehicleUi recomposes due to both car and bike instance change&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9678279/228624288-498558a1-697a-46e7-99a6-e2c53ff1f975.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When VehicleUi recomposes due to human instance change (State within the composable)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9678279/228624484-c1de1112-c13c-4b9b-8788-e2a4b917368e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üü† Limitation&lt;/h2&gt; &#xA;&lt;h3&gt;Auto Name Picking&lt;/h3&gt; &#xA;&lt;p&gt;When Rebugger is placed deep inside the composable, it may not be able to pick the correct composable name. For example, if I place the Rebugger somewhere inside the Button lambda like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun VehicleUi(&#xA;  car: Car,&#xA;  bike: Bike,&#xA;) {&#xA;// ...&#xA;&#xA;    Column {&#xA;        // ...&#xA;&#xA;        Button(&#xA;            onClick = {&#xA;                //...&#xA;            }&#xA;        ) {&#xA;&#xA;            // üü† Inside Button&#39;s content lambda&#xA;            Rebugger(&#xA;                trackMap = mapOf(&#xA;                    &#34;car&#34; to car,&#xA;                    &#34;bike&#34; to bike,&#xA;                    &#34;human&#34; to human&#xA;                ),&#xA;            )&#xA;            &#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It‚Äôll print something like this&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9678279/229018052-97d66da3-c716-4553-a930-92ca740facc2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The Fix&lt;/h3&gt; &#xA;&lt;p&gt;To fix this, you can pass composableName argument to override the automatic name picking behaviour&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;Rebugger(&#xA;    composableName = &#34;Button&#39;s body&#34;,&#xA;    trackMap = mapOf(&#xA;        &#34;car&#34; to car,&#xA;        &#34;bike&#34; to bike,&#xA;        &#34;human&#34; to human&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üåá TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IDE plugin : To generate &lt;code&gt;Rebugger&lt;/code&gt; call (vote &lt;a href=&#34;https://github.com/theapache64/rebugger/issues/1&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>