<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-30T01:35:28Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WaxMoon/MultiApp</title>
    <updated>2022-11-30T01:35:28Z</updated>
    <id>tag:github.com,2022-11-30:/WaxMoon/MultiApp</id>
    <link href="https://github.com/WaxMoon/MultiApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A customizable virtual Android container/一款可定制的虚拟安卓容器&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MultiApp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/license-AGPL3.0-brightgreen.svg?style=flat&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Android-7.0%20--%2013-blue.svg?style=flat&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/arch-armeabi--v7a%20%7C%20arm64--v8a-blue.svg?style=flat&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WaxMoon/MultiApp/main/docs/READEME-zh-CN.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Introduction&lt;/h2&gt; &#xA;&lt;p&gt;MultiApp is a virtual Android container, which can open more apps. This project provides a simple UI for you to experience. You can also download the official apk from &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.waxmoon.ma.gp&#34;&gt;Google play&lt;/a&gt; to enjoy a better experience. If you are an android developer, you can also customize your own UI. You don&#39;t need to pay attention to the technical details that are difficult to understand. You can use the api provided by &lt;a href=&#34;https://github.com/WaxMoon/opensdk&#34;&gt;opensdk&lt;/a&gt; to open more apps. If you have any questions during the experience, you can contact us by WeChat.&lt;/p&gt; &#xA;&lt;p&gt;In addition, we will continue to fix problems and update opensdk code to provide you with the best experience.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;You can watch the following videos to understand our capabilities&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/WaxMoon/MultiApp/raw/5fc33308ca9fd651ce7be2a5bab53160d5303426/docs/res/github_gp.mp4&#34;&gt;Without install Google play to enjoy&lt;/a&gt; &amp;lt;----&amp;gt; &lt;a href=&#34;https://github.com/WaxMoon/MultiApp/raw/5fc33308ca9fd651ce7be2a5bab53160d5303426/docs/res/github_fb.mp4&#34;&gt;Multiple open facebook&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/118731992/204190831-4bd2c0db-6682-48d8-aa4f-1e5b5756650e.mp4&#34;&gt;https://user-images.githubusercontent.com/118731992/204190831-4bd2c0db-6682-48d8-aa4f-1e5b5756650e.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/118731992/204192759-14984680-e5ed-4685-a0c7-bebff3d8a7b0.mp4&#34;&gt;https://user-images.githubusercontent.com/118731992/204192759-14984680-e5ed-4685-a0c7-bebff3d8a7b0.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;video width=&#34;320&#34; height=&#34;320&#34; controls&gt; &#xA;  &lt;source src=&#34;docs/res/github_gp.mp4&#34; type=&#34;video/mp4&#34;&gt; &#xA; &lt;/video&gt; &#xA; &lt;video width=&#34;320&#34; height=&#34;320&#34; controls&gt; &#xA;  &lt;source src=&#34;docs/res/github_fb.mp4&#34; type=&#34;video/mp4&#34;&gt; &#xA; &lt;/video&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Principle Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The traditional multi-opening solution relies on java dynamic proxy, inline hook, proxy forwarding and others to ensure app running in the virtual process. If the third-party app also uses the java dynamic proxy, there will be a problem because of the proxies will overlap each other, which will cause the third-party app&#39;s code logic to change when it is running. Changes in logic &#34;being&#34; are so crazy, and may affect their earnings. I think traditional solutions cannot be defined as containers.&lt;/p&gt; &#xA;&lt;p&gt;At the beginning of MultiApp technology selection, java dynamic proxy was abandoned, and binder components such as service, receiver, and provider are all maintained by MultiApp engine itself. It&#39;s a pity that the Activity component must maintain its life cycle through a proxy, but we use a more reliable solution to ensure that it does not affect the code logic of the app. In addition, we have developed a more effective svc hook solution based on seccomp/bpf in native hook technology, and will enabled it in some scenarios such as 360 shell app. In general, we are closer to the sandbox concept.&lt;/p&gt; &#xA;&lt;h3&gt;Below I made two simple demos&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1) Print the code running stack in the Activity.onCreate function, and use the traditional software, MultiApp, and android-system to open&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public class MainActivity extends ButtonActivity {&#xA;&#xA;    final static String TAG = &#34;MainActivity&#34;;&#xA;&#xA;    @Override&#xA;    protected void onCreate(Bundle savedInstanceState) {&#xA;        super.onCreate(savedInstanceState);&#xA;        new Exception().printStackTrace();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code stack of the first picture is abnormal because of app running in traditional multi-open software, the second picture is the code stack run by MultiApp and the third is android system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/WaxMoon/MultiApp/main/docs/res/stack_other.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/WaxMoon/MultiApp/main/docs/res/stack_MultiApp.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/WaxMoon/MultiApp/main/docs/res/stack_system.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2) Determine whether the binder interface of ActivityManager is dynamically proxied, and run in traditional multi-open software and MultiApp&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public class MainActivity extends ButtonActivity {&#xA;&#xA;    @Override&#xA;    protected void onCreate(Bundle savedInstanceState) {&#xA;        super.onCreate(savedInstanceState);&#xA;        new Exception().printStackTrace();&#xA;&#xA;        {&#xA;            try {&#xA;                Class&amp;lt;?&amp;gt; class_ActivityManagerNative = Class.forName(&#34;android.app.ActivityManagerNative&#34;);&#xA;&#xA;                Method method_getDefault = class_ActivityManagerNative.getDeclaredMethod(&#34;getDefault&#34;);&#xA;&#xA;                IInterface remote_ActivityManager = (IInterface) method_getDefault.invoke(null);&#xA;&#xA;                boolean isProxy = remote_ActivityManager instanceof Proxy;&#xA;&#xA;                Log.d(&#34;WaxMoon&#34;, String.format(&#34;ActivityManager(%s) is proxy: %s&#34;, remote_ActivityManager, isProxy));&#xA;&#xA;            } catch (Exception ignore) {&#xA;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the log of traditional multi-open software&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Text&#34;&gt;11-25 17:56:38.823  5153  5153 D WaxMoon : ActivityManager(android.app.IActivityManager$Stub$Proxy@8abaec7) is proxy: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the log of MultiApp&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Texx&#34;&gt;11-25 17:59:13.804  8197  8197 D WaxMoon : ActivityManager(android.app.IActivityManager$Stub$Proxy@79f3e55) is proxy: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Download code&lt;/h3&gt; &#xA;&lt;p&gt;Due to the use of submodule, you have to pull subrepos manually&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/WaxMoon/MultiApp.git&#xA;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;extends HackApplication&lt;/h3&gt; &#xA;&lt;p&gt;HackApplication will help you complete the initialization of the engine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public class MoonApplication extends HackApplication {&#xA;    @Override&#xA;    protected void attachBaseContext(Context base) {&#xA;        super.attachBaseContext(base);&#xA;    }&#xA;&#xA;    @Override&#xA;    public void onCreate() {&#xA;        super.onCreate();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also refer to the opensdk code to initialize the engine yourself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public class HackApplication extends Application {&#xA;&#xA;    private static final boolean DEBUG = Features.DEBUG;&#xA;    private static final String TAG = HackApplication.class.getSimpleName();&#xA;&#xA;    @Override&#xA;    protected void attachBaseContext(Context base) {&#xA;        super.attachBaseContext(base);&#xA;        if (DEBUG) Log.d(TAG, &#34;attachBaseContext start&#34;);&#xA;        HackRuntime.install(this, &#34;version&#34;, true);&#xA;        Cmd.INSTANCE().exec(CmdConstants.CMD_APPLICATION_ATTACHBASE, this, base);&#xA;        if (DEBUG) Log.d(TAG, &#34;attachBaseContext end&#34;);&#xA;    }&#xA;&#xA;    @Override&#xA;    public void onCreate() {&#xA;        super.onCreate();&#xA;        if (DEBUG) Log.d(TAG, &#34;onCreate start&#34;);&#xA;        Cmd.INSTANCE().exec(CmdConstants.CMD_APPLICATION_ONCREATE);&#xA;        if (DEBUG) Log.d(TAG, &#34;onCreate end&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use HackApi.installPackageFromHost to install app&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Kotlin&#34;&gt;var install: (ApkInfo)-&amp;gt;Unit = { apkInfo -&amp;gt;&#xA;    val ret = HackApi.installPackageFromHost(apkInfo.pkgName, userSpace, false)&#xA;&#xA;    when (ret) {&#xA;        INSTALL_SUCCEEDED -&amp;gt;&#xA;            Toast.makeText(MoonApplication.INSTANCE(), R.string.toast_success,&#xA;                Toast.LENGTH_SHORT).show()&#xA;        INSTALL_FAILED_ALREADY_EXISTS -&amp;gt;&#xA;            Toast.makeText(MoonApplication.INSTANCE(), R.string.toast_already_installed,&#xA;                Toast.LENGTH_SHORT).show()&#xA;        else -&amp;gt;&#xA;            Toast.makeText(MoonApplication.INSTANCE(), R.string.toast_fail, Toast.LENGTH_SHORT).show()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use HackApi.startActivity to run app&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Kotlin&#34;&gt;var startApp: (ApkInfo)-&amp;gt;Unit = { apkInfo -&amp;gt;&#xA;    var intent:Intent? = null&#xA;    if (apkInfo.sysInstalled) {&#xA;        intent = MoonApplication.INSTANCE().packageManager.getLaunchIntentForPackage(apkInfo.pkgName)&#xA;        intent?.addFlags(Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED)&#xA;    } else {&#xA;        Toast.makeText(MoonApplication.INSTANCE(), R.string.toast_unsupport, Toast.LENGTH_SHORT).show()&#xA;    }&#xA;&#xA;    if (intent != null) {&#xA;        Log.d(TAG, &#34;begin start &#34; + apkInfo.pkgName)&#xA;        val startRet = HackApi.startActivity(intent, userSpace)&#xA;        if (startRet != START_SUCCESS) {&#xA;            Toast.makeText(MoonApplication.INSTANCE(), R.string.toast_fail, Toast.LENGTH_SHORT).show()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;support android7-android13(android7-8 is under development)&lt;/li&gt; &#xA; &lt;li&gt;support armv7-32, armv8-64&lt;/li&gt; &#xA; &lt;li&gt;provide master pkg/assist pkg&lt;/li&gt; &#xA; &lt;li&gt;support google play&lt;/li&gt; &#xA; &lt;li&gt;multi-open app&lt;/li&gt; &#xA; &lt;li&gt;without install to enjoy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Business Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Function customization&lt;/li&gt; &#xA; &lt;li&gt;Business license&lt;/li&gt; &#xA; &lt;li&gt;others...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License Notes&lt;/h2&gt; &#xA;&lt;p&gt;Both this project and opensdk use the AGPL-3.0 license. Before publishing your software, please let us know your thoughts. In some cases, you can use it freely.&lt;/p&gt; &#xA;&lt;h2&gt;Safety Notes&lt;/h2&gt; &#xA;&lt;p&gt;From the perspective of code security and industry security, we &lt;strong&gt;disabled the software debugging&lt;/strong&gt; function. If you have relevant legal needs, you can contact by wechat.&lt;/p&gt; &#xA;&lt;h2&gt;Contact Details&lt;/h2&gt; &#xA;&lt;p&gt;Wechat: WaxMoon2018 Email: &lt;a href=&#34;mailto:cocos_sh@sina.com&#34;&gt;cocos_sh@sina.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>getyourguide/paparazzi-plugin</title>
    <updated>2022-11-30T01:35:28Z</updated>
    <id>tag:github.com,2022-11-30:/getyourguide/paparazzi-plugin</id>
    <link href="https://github.com/getyourguide/paparazzi-plugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;IntelliJ iDEA / Android Studio plugin for Android projects using the Paparazzi library that allows recording, verifying and viewing the snapshots within the IDE.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/getyourguide/paparazzi-plugin/main/preview/logo.png&#34; title=&#34;logo&#34; height=&#34;80&#34; width=&#34;80&#34;&gt; Paparazzi Plugin&lt;/h1&gt; &#xA;&lt;p&gt;IntelliJ iDEA / Android Studio plugin for Android projects using the &lt;a href=&#34;https://github.com/cashapp/paparazzi&#34;&gt; Paparazzi&lt;/a&gt; library that allows recording, verifying and viewing the snapshots within the IDE.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/getyourguide/paparazzi-plugin/main/preview/screenshare.gif&#34; alt=&#34;preview&#34; title=&#34;preview&#34;&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You can install the plugin from &lt;code&gt;Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Plugins&lt;/code&gt; and search for the plugin. You can also download the plugin from the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/20517-paparazzi&#34;&gt;intelliJ iDEA Marketplace&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;View previously-recorded golden snapshots for the currently opened test class&lt;/li&gt; &#xA; &lt;li&gt;View golden snapshots of the current focussed test method&lt;/li&gt; &#xA; &lt;li&gt;View failure diffs for the current test class or method&lt;/li&gt; &#xA; &lt;li&gt;Record and Verify snapshots for individual tests or for entire test class&lt;/li&gt; &#xA; &lt;li&gt;Zoom options for Actual Size and Fit to Window&lt;/li&gt; &#xA; &lt;li&gt;Fully supported for test files written in Java or Kotlin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Any changes made to the plugin should be tested against the &lt;a href=&#34;https://github.com/cashapp/paparazzi/tree/master/sample&#34;&gt;sample paparazzi&lt;/a&gt; android project.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions, and if you&#39;re interested, have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/getyourguide/paparazzi-plugin/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;paparazzi-plugin is licensed under the Apache License, Version 2.0. See &lt;a href=&#34;https://raw.githubusercontent.com/getyourguide/paparazzi-plugin/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for the full text.&lt;/p&gt;</summary>
  </entry>
</feed>