<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-15T01:44:33Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>polodarb/Flashlight-Tiramisu</title>
    <updated>2022-08-15T01:44:33Z</updated>
    <id>tag:github.com,2022-08-15:/polodarb/Flashlight-Tiramisu</id>
    <link href="https://github.com/polodarb/Flashlight-Tiramisu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flashlight-Tiramisu&lt;/h1&gt; &#xA;&lt;p&gt;This app allows you to adjust the flashlight brightness on Android 13.&lt;/p&gt; &#xA;&lt;p&gt;In Android 13 adds new API that allow you to adjust the flashlight brightness (&lt;a href=&#34;https://blog.esper.io/android-13-flashlight-brightness-control/&#34;&gt;more info on Esper Blog&lt;/a&gt;). But with one caveat: the brightness adjustment of the flashlight is only available on the Pixel 6, 6 Pro and 6a because they support the new version of Camera HAL. Owners of these devices who have installed Android 13 can download app&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>timusus/Shuttle2</title>
    <updated>2022-08-15T01:44:33Z</updated>
    <id>tag:github.com,2022-08-15:/timusus/Shuttle2</id>
    <link href="https://github.com/timusus/Shuttle2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shuttle Music Player 2.0&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;S2 Music Player&lt;/h2&gt; &#xA;&lt;h3&gt;Welcome!&lt;/h3&gt; &#xA;&lt;p&gt;S2 Music Player is an app for managing and playing local music on an Android device, as well as music streamed via Jellyfin, Emby or Plex&lt;/p&gt; &#xA;&lt;p&gt;The aim is to provide all of the options you&#39;d expect from a music player, wrapped up in a minimalist, intuitive and modern design.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/timusus/Shuttle2/main/assets/s2_hero_image.png&#34; width=&#34;40%&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android Auto&lt;/li&gt; &#xA; &lt;li&gt;Batch tag editing&lt;/li&gt; &#xA; &lt;li&gt;Chromecast&lt;/li&gt; &#xA; &lt;li&gt;Album shuffle&lt;/li&gt; &#xA; &lt;li&gt;Sleep timer&lt;/li&gt; &#xA; &lt;li&gt;Custom EQ &amp;amp; Preamp&lt;/li&gt; &#xA; &lt;li&gt;Replay Gain&lt;/li&gt; &#xA; &lt;li&gt;Day/Night &amp;amp; Themes&lt;/li&gt; &#xA; &lt;li&gt;Jellyfin, Emby &amp;amp; Plex&lt;/li&gt; &#xA; &lt;li&gt;Dedicated artwork server&lt;/li&gt; &#xA; &lt;li&gt;Embedded lyrics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;S2 is currently available for download on the &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.simplecityapps.shuttle&#34;&gt;Google Play Store&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The app is limited to a 2 week free trial, after which playback speed is slowly increased.&lt;/p&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s an active &lt;a href=&#34;https://discord.gg/ESyjVgTBWa&#34;&gt;Discord community&lt;/a&gt; for discussing all things relating to S2, Music &amp;amp; Android dev.&lt;/p&gt; &#xA;&lt;p&gt;You can find me there as @timusus&lt;/p&gt; &#xA;&lt;h3&gt;Open source&lt;/h3&gt; &#xA;&lt;p&gt;The S2 source code is open sourced in good faith, for transparency and educational purposes.&lt;/p&gt; &#xA;&lt;p&gt;If you have features or fixes, I ask that you please consider contributing to this codebase, rather than releasing your own version.&lt;/p&gt; &#xA;&lt;p&gt;This codebase represents years of hard work and learning as I&#39;ve matured as an Android developer. I humbly request that you don&#39;t release low-effort clones for the sake of removing the pay-wall, or providing your own ads/other monetization strategies. If the app should be free, I&#39;d rather make it that way myself.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to the Project&lt;/h2&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/timusus/Shuttle2/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; for details on how to contribute to this project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>skydoves/sealedx</title>
    <updated>2022-08-15T01:44:33Z</updated>
    <id>tag:github.com,2022-08-15:/skydoves/sealedx</id>
    <link href="https://github.com/skydoves/sealedx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🎲 Kotlin Symbol Processor to auto-generate extensive sealed classes and interfaces for Android and Kotlin.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;SealedX&lt;/h1&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves/sealedx/actions/workflows/android.yml&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/skydoves/sealedx/actions/workflows/android.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves&#34;&gt;&lt;img alt=&#34;Profile&#34; src=&#34;https://skydoves.github.io/badges/skydoves.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 🎲 Kotlin Symbol Processor to auto-generate extensive sealed classes and interfaces for Android and Kotlin.&lt;br&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Why SealedX?&lt;/h2&gt; &#xA;&lt;p&gt;SealedX generates extensive sealed classes &amp;amp; interfaces based on common sealed classes for each different model. You can reduce writing repeated sealed classes for every different model by auto-generating based on KSP (&lt;a href=&#34;https://kotlinlang.org/docs/ksp-overview.html&#34;&gt;Kotlin Symbol Processor&lt;/a&gt;).&lt;br&gt;&lt;br&gt; You can massively reduce writing repeated files such as &lt;code&gt;_UiState&lt;/code&gt; sealed interfaces if your project is based on MVI architecture.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/184303312-9df53e1e-9ec2-448c-9d93-3a7265ada7ec.png&#34; width=&#34;760&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;p&gt;If you want to learn more about how to migrate and use cases, check out the repositories below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/GetStream/whatsApp-clone-compose/pull/1&#34;&gt;WhatsApp Clone Compose&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/advocacies/nowinandroid/pull/1&#34;&gt;Now in Android&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Gradle Setup&lt;/h2&gt; &#xA;&lt;p&gt;To use &lt;a href=&#34;https://kotlinlang.org/docs/ksp-quickstart.html&#34;&gt;KSP (Kotlin Symbol Processing)&lt;/a&gt; and SealedX library in your project, you need to follow steps below.&lt;/p&gt; &#xA;&lt;h3&gt;1. Enable KSP in your module&lt;/h3&gt; &#xA;&lt;p&gt;Add the KSP plugin below into your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Kotlin (KTS)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;    id(&#34;com.google.devtools.ksp&#34;) version &#34;1.7.10-1.0.6&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;    id(&#34;com.google.devtools.ksp&#34;) version &#34;1.7.10-1.0.6&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Make sure your current Kotlin version and &lt;a href=&#34;https://github.com/google/ksp/releases&#34;&gt;KSP version&lt;/a&gt; is the same.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;2. Add SealedX dependencies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22com.github.skydoves%22%20AND%20a:%22sealedx-core%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/sealedx-core.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the dependency below into your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation(&#34;com.github.skydoves:sealedx-core:1.0.0&#34;)&#xA;    ksp(&#34;com.github.skydoves:sealedx-processor:1.0.0&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Add KSP source path&lt;/h3&gt; &#xA;&lt;p&gt;To access generated codes from KSP, you need to set up the source path like the below into your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Android Kotlin (KTS)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;kotlin {&#xA;  sourceSets.configureEach {&#xA;    kotlin.srcDir(&#34;$buildDir/generated/ksp/$name/kotlin/&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Android Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {&#xA;    applicationVariants.all { variant -&amp;gt;&#xA;        kotlin.sourceSets {&#xA;            def name = variant.name&#xA;            getByName(name) {&#xA;                kotlin.srcDir(&#34;build/generated/ksp/$name/kotlin&#34;)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pure Kotlin (KTS)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;kotlin {&#xA;    sourceSets.main {&#xA;        kotlin.srcDir(&#34;build/generated/ksp/main/kotlin&#34;)&#xA;    }&#xA;    sourceSets.test {&#xA;        kotlin.srcDir(&#34;build/generated/ksp/test/kotlin&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pure Kotlin Groovy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;kotlin {&#xA;    sourceSets {&#xA;        main.kotlin.srcDirs += &#39;build/generated/ksp/main/kotlin&#39;&#xA;        test.kotlin.srcDirs += &#39;build/generated/ksp/test/kotlin&#39;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;ExtensiveSealed&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;@ExtensiveSealed&lt;/code&gt; annotation is the main trigger of the Kotlin Symbol Processor to run a sealed-extensive processor on compile time.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@ExtensiveSealed&lt;/code&gt; must be annotated to sealed classes or interfaces, which should be a common model to generate extensive sealed classes and interfaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@ExtensiveSealed&lt;/code&gt; receives an array of &lt;code&gt;@ExtensiveModel&lt;/code&gt; annotations, which include the extensive model types.&lt;/li&gt; &#xA; &lt;li&gt;If you build your project, extensive sealed classes or interfaces will be generated based on those extensive models.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let&#39;s see a common &lt;code&gt;UiState&lt;/code&gt; sealed interface below that is annotated with &lt;code&gt;@ExtensiveSealed&lt;/code&gt; annotation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@ExtensiveSealed(&#xA;  models = [&#xA;    ExtensiveModel(Poster::class),&#xA;    ExtensiveModel(PosterDetails::class)&#xA;  ]&#xA;)&#xA;sealed interface UiState {&#xA;  data class Success(val data: Extensive) : UiState&#xA;  object Loading : UiState&#xA;  object Error : UiState&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example codes above will generate &lt;code&gt;PosterUiState&lt;/code&gt; and &lt;code&gt;PosterDetailsUiState&lt;/code&gt; sealed interfaces below: &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PosterUiState (generated)&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;public sealed interface PosterUiState {&#xA;  public object Error : PosterUiState&#xA;&#xA;  public object Loading : PosterUiState&#xA;&#xA;  public data class Success(&#xA;    public val `data`: Poster,&#xA;  ) : PosterUiState&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PosterDetailsUiState (generated)&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;public sealed interface PosterDetailsUiState {&#xA;  public object Error : PosterDetailsUiState&#xA;&#xA;  public object Loading : PosterDetailsUiState&#xA;&#xA;  public data class Success(&#xA;    public val `data`: PosterDetails,&#xA;  ) : PosterDetailsUiState&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See further sealed class examples&lt;/summary&gt; &#xA; &lt;p&gt;In the case of the sealed classes, it&#39;s not different fundamentally from sealed interface examples.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@ExtensiveSealed(&#xA;  models = [ ExtensiveModel(type = Poster::class) ]&#xA;)&#xA;sealed class UiState {&#xA;  data class Success(val data: Extensive) : UiState()&#xA;  object Loading : UiState()&#xA;  object Error : UiState()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The example codes above will generate the &lt;code&gt;PosterUiState&lt;/code&gt; sealed class below: &lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;PosterUiState (generated)&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;public sealed class PosterUiState {&#xA;  public object Error : PosterUiState()&#xA;&#xA;  public object Loading : PosterUiState()&#xA;&#xA;  public data class Success(&#xA;    public val `data`: Poster,&#xA;  ) : PosterUiState()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;ExtensiveModel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;@ExtensiveModel&lt;/code&gt; annotation class contains information on extensive models like model type and a custom name, which decides the name of generated classes. Basically, (the simple name of the &lt;code&gt;type&lt;/code&gt;) + (the name of common sealed classes) will be used to name of generated classes, but you can modify the prefix with the &lt;code&gt;name&lt;/code&gt; parameter like the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@ExtensiveSealed(&#xA;  models = [ ExtensiveModel(type = PosterExtensive::class, name = &#34;Movie&#34;) ]&#xA;)&#xA;sealed interface UiState {&#xA;  data class Success(val data: Extensive) : UiState&#xA;  object Loading : UiState&#xA;  object Error : UiState&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example codes above will generate &lt;code&gt;MovieUiState&lt;/code&gt; file instead of &lt;code&gt;PosterExtensiveUiState&lt;/code&gt; like the below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MovieUiState (generated)&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;public sealed interface MovieUiState {&#xA;  public object Error : MovieUiState&#xA;&#xA;  public object Loading : MovieUiState&#xA;&#xA;  public data class Success(&#xA;    public val `data`: PosterExtensive,&#xA;  ) : MovieUiState&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Collection type in @ExtensiveModel&lt;/h4&gt; &#xA;&lt;p&gt;Basically, you can&#39;t set a collection type like a &lt;code&gt;List&lt;/code&gt; to the &lt;code&gt;type&lt;/code&gt; parameter of the &lt;code&gt;@ExtensiveModel&lt;/code&gt; annotation. So if you need to set a collection type as an extensive model, you need to write a wrapper class like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;data class PosterExtensive(&#xA;  val posters: List&amp;lt;Poster&amp;gt;&#xA;)&#xA;&#xA;@ExtensiveSealed(&#xA;  models = [ ExtensiveModel(type = PosterExtensive::class) ]&#xA;)&#xA;sealed interface UiState {&#xA;    ..&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extensive&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Extensive&lt;/code&gt; is an interface that is used to represent extensive model types of sealed classes and interfaces. When you need to use an extensive model type in your primary constructor of data class, you can use the &lt;code&gt;Extensive&lt;/code&gt; extensive type on your common sealed classes and interfaces. It will be replaced by the extensive model type on compile time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@ExtensiveSealed(&#xA;  models = [ ExtensiveModel(type = PosterExtensive::class) ]&#xA;)&#xA;sealed interface UiState {&#xA;  // You need to use the Extensive type if you want to use an extensive model type in the generated code.&#xA;  data class Success(val data: Extensive) : UiState&#xA;  ..&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example codes above will generate &lt;code&gt;PosterExtensiveUiState&lt;/code&gt; sealed interface like the below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PosterExtensiveUiState (generated)&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;public sealed interface PosterExtensiveUiState {&#xA;  public object Error : PosterExtensiveUiState&#xA;&#xA;  public object Loading : PosterExtensiveUiState&#xA;&#xA;  public data class Success(&#xA;    public val `data`: PosterExtensive,&#xA;  ) : PosterExtensiveUiState&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see from the example above, the &lt;code&gt;Extensive&lt;/code&gt; interface type will be replaced with the extensive model by the SealedX processor on compile time.&lt;/p&gt; &#xA;&lt;h2&gt;Find this repository useful? &lt;span&gt;❤️&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Support it by joining &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves/sealedx/stargazers&#34;&gt;stargazers&lt;/a&gt;&lt;/strong&gt; for this repository. &lt;span&gt;⭐&lt;/span&gt; &lt;br&gt; Also, &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves&#34;&gt;follow me&lt;/a&gt;&lt;/strong&gt; on GitHub for my next creations! 🤩&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;Designed and developed by 2022 skydoves (Jaewoong Eum)&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>