<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-11T01:34:51Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GetStream/stream-log</title>
    <updated>2022-12-11T01:34:51Z</updated>
    <id>tag:github.com,2022-12-11:/GetStream/stream-log</id>
    <link href="https://github.com/GetStream/stream-log" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛥 A lightweight and extensible logger library for Kotlin and Android.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Stream Log&lt;/h1&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 🛥 Stream Log is a lightweight and extensible logger library for Kotlin and Android. &lt;/p&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GetStream/stream-log/actions/workflows/build.yml&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/GetStream/stream-log/actions/workflows/build.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://getstream.io?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Github_Dec2022_StreamLog&amp;amp;utm_term=DevRelOss&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/HayesGordon/e7f3c4587859c17f3e593fd3ff5b13f4/raw/11d9d9385c9f34374ede25f6471dc743b977a914/badge.json&#34; alt=&#34;Stream Feeds&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://getstream.io/chat/sdk/android/&#34;&gt;&lt;img width=&#34;210px&#34; alt=&#34;Logo&#34; src=&#34;https://user-images.githubusercontent.com/24237865/205788244-57f7200c-7ed6-456a-927e-2594e3b311bf.png&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Why Stream Log?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stream Log&lt;/strong&gt; originated from &lt;a href=&#34;https://github.com/getStream/stream-chat-android&#34;&gt;stream-chat-android&lt;/a&gt;, and it has already been verified by delivering to billions of global end-users across thousands of different apps. It&#39;s simple and easy to use. You can also record and extract the runtime log messages into an external &lt;code&gt;.txt&lt;/code&gt; file and utilize it to trace your log messages.&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;90px&#34; src=&#34;https://user-images.githubusercontent.com/24237865/178630165-76855349-ac04-4474-8bcf-8eb5f8c41095.png&#34;&gt; &#xA;&lt;h2&gt;Stream Log&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stream Log&lt;/strong&gt; is a lightweight logger and a pure Kotlin module to utilize this library on your Kotlin projects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22io.getstream%22%20AND%20a:%22stream-log%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.getstream/stream-log.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the dependency below into your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation(&#34;io.getstream:stream-log:$version&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;StreamLog&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;StreamLog&lt;/code&gt; is a primary log manager, which allows you to install your loggers and print log messages. First, you need to install a &lt;code&gt;StreamLogger&lt;/code&gt; on &lt;code&gt;StreamLog&lt;/code&gt;. In the Kotlin project, you can install &lt;code&gt;KotlinStreamLogger&lt;/code&gt; by default, which is a simple logger for Kotlin as seen below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// install `KotlinStreamLogger`. You only need to do this once.&#xA;StreamLog.install(KotlinStreamLogger())&#xA;&#xA;// change the log validator as your taste. &#xA;StreamLog.setValidator { priority, _ -&amp;gt;&#xA;  priority.level &amp;gt;= Priority.DEBUG.level&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can print log messages simply like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;streamLog { &#34;This is a log messages&#34; }&#xA;streamLog(priority = Priority.INFO, tag = &#34;Tag&#34;) { &#34;This is a log messages&#34; }&#xA;StreamLog.d(tag = &#34;Tag&#34;) { &#34;This is a log message&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you will get the log messages below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+  D  2022-12-02 15:42:49&#39;044 (main:2) [D/MessageRepository]: This is a log message!&#xA;+  I  2022-12-02 15:42:49&#39;044 (main:2) [I/Tag]: This is a log message!&#xA;+  D  2022-12-02 15:42:49&#39;044 (main:2) [D/Tag]: This is a log message!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you can get the logger, which is installed on &lt;code&gt;StreamLog&lt;/code&gt; like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val logger = StreamLog.getLogger(&#34;Tag&#34;)&#xA;logger.d { &#34;This is a log message&#34; }&#xA;&#xA;// Getting a tagged logger lazily.&#xA;val logger by taggedLogger()&#xA;val logger by taggedLogger(tag = &#34;Tag&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you don&#39;t specify the &lt;code&gt;tag&lt;/code&gt; parameter, the tag value will be a class name that is logging currently.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;StreamLogger&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;StreamLogger&lt;/code&gt; is a low-level logger interface that can be installed/uninstalled on &lt;code&gt;StreamLog&lt;/code&gt;. You can create your own logger by extending the &lt;code&gt;StreamLogger&lt;/code&gt; interface like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;public class MyStreamLogger() : StreamLogger {&#xA;&#xA;    override fun log(priority: Priority, tag: String, message: String, throwable: Throwable?) {&#xA;        &#xA;        // do something here&#xA;        ..&#xA;&#xA;        println(message)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also extend the &lt;code&gt;KotlinStreamLogger&lt;/code&gt; and customize the behaviors like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;object ErrorStreamLogger : KotlinStreamLogger() {&#xA;&#xA;    override fun log(priority: Priority, tag: String, message: String, throwable: Throwable?) {&#xA;        when (priority) {&#xA;            ERROR, ASSERT -&amp;gt; super.log(priority, tag, message, throwable)&#xA;            else -&amp;gt; { /* NO-OP */ }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CompositeStreamLogger&lt;/h3&gt; &#xA;&lt;p&gt;You can separate roles and behaviors for each different logger and composite the loggers into a single logger with &lt;code&gt;CompositeStreamLogger&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val fileLogger = FileStreamLogger(fileLoggerConfig)&#xA;val androidLogger = AndroidStreamLogger()&#xA;val compositeLogger = CompositeStreamLogger(androidLogger, fileLogger)&#xA;StreamLog.install(compositeLogger)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Validator&lt;/h3&gt; &#xA;&lt;p&gt;The validator decides whether the log messages should be printed or not. You can set a validator to set the behaviors of your logger.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Show log messages if the log priority is DEBUG or more than DEBUG.&#xA;StreamLog.setValidator { priority, tag -&amp;gt;&#xA;    priority.level &amp;gt;= Priority.DEBUG.level&#xA;}&#xA;&#xA;// Show log messages if the tag contains a &#34;main&#34; string.&#xA;StreamLog.setValidator { priority, tag -&amp;gt;&#xA;    tag.contains(&#34;main&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;90px&#34; src=&#34;https://user-images.githubusercontent.com/24237865/178630165-76855349-ac04-4474-8bcf-8eb5f8c41095.png&#34;&gt; &#xA;&lt;h2&gt;Stream Log File&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stream Log File&lt;/strong&gt; is an extension library for persisting the log messages into an external &lt;code&gt;.txt&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22io.getstream%22%20AND%20a:%22stream-log-file%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.getstream/stream-log-file.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the dependency below into your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation(&#34;io.getstream:stream-log:$version&#34;)&#xA;    debugImplementation(&#34;io.getstream:stream-log-file:$version&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FileStreamLogger&lt;/h3&gt; &#xA;&lt;p&gt;You can persist the log messages that are triggered on runtime with &lt;code&gt;FileStreamLogger&lt;/code&gt;. To persist your log messages into a file, you should use &lt;code&gt;FileStreamLogger&lt;/code&gt; with &lt;code&gt;CompositeStreamLogger&lt;/code&gt; like the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val fileLoggerConfig = FileStreamLogger.Config(&#xA;    filesDir = fileDirectory, // an internal file directory&#xA;    externalFilesDir = null, // an external file directory. This is an optional.&#xA;    app = FileStreamLogger.Config.App( // application information.&#xA;        versionCode = 1,&#xA;        versionName = &#34;1.0.0&#34;&#xA;    ),&#xA;    device = FileStreamLogger.Config.Device( // device information&#xA;        model = &#34;%s %s&#34;.format(Build.MANUFACTURER, Build.DEVICE),&#xA;        androidApiLevel = Build.VERSION.SDK_INT&#xA;    )&#xA;)&#xA;val fileLogger = FileStreamLogger(fileLoggerConfig)&#xA;val kotlinLogger = KotlinStreamLogger()&#xA;val compositeLogger = CompositeStreamLogger(kotlinLogger, fileLogger)&#xA;&#xA;StreamLog.install(compositeLogger)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you will get the result &lt;code&gt;.txt&lt;/code&gt; file below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;======================================================================&#xA;Logs date time: 2022-12-02 21:08:35&#39;288&#xA;Version code: 1&#xA;Version name: 1.0.0&#xA;API level: 10&#xA;Device: Stream&#39;s Mac&#xA;======================================================================&#xA;2022-11-30 13:02:29&#39;918 D/              This is a log message&#xA;2022-11-30 13:04:08&#39;577 D/              ChatViewModel initialized&#xA;2022-11-30 13:13:04&#39;640 D/              ChatController initialized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;140px&#34; src=&#34;https://user-images.githubusercontent.com/24237865/205479526-5fa0b5f0-22df-4f02-ac0e-7a7a3e050cdb.png&#34;&gt; &#xA;&lt;h2&gt;Stream Log Android&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stream Log Android&lt;/strong&gt; is a simple Android logger on top of the &lt;strong&gt;Stream Log&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22io.getstream%22%20AND%20a:%22stream-log-android%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.getstream/stream-log-android.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the dependency below into your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation(&#34;io.getstream:stream-log-android:$version&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AndroidStreamLogger&lt;/h3&gt; &#xA;&lt;p&gt;First, you need to install a logger for Android with &lt;code&gt;AndroidStreamLogger&lt;/code&gt; like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class App : Application() {&#xA;&#xA;    override fun onCreate() {&#xA;        super.onCreate()&#xA;&#xA;        // install AndroidStreamLogger.&#xA;        AndroidStreamLogger.installOnDebuggableApp(this)&#xA;        &#xA;        // change the log validator as your taste.&#xA;        StreamLog.setValidator { priority, _ -&amp;gt; priority.level &amp;gt;= Priority.VERBOSE.level }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We&#39;d recommend you install the logger only once in your application class.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Now, you can print log messages simply like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;streamLog { &#34;This is a log messages&#34; }&#xA;streamLog(priority = Priority.INFO, tag = &#34;Tag&#34;) { &#34;This is a log messages&#34; }&#xA;StreamLog.d(tag = &#34;Tag&#34;) { &#34;This is a log message&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you will get the log messages below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+  D  2022-12-02 15:42:49&#39;044 (main:2) [D/MessageRepository]: This is a log message!&#xA;+  I  2022-12-02 15:42:49&#39;044 (main:2) [I/Tag]: This is a log message!&#xA;+  D  2022-12-02 15:42:49&#39;044 (main:2) [D/Tag]: This is a log message!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also can get the logger, which is installed on &lt;code&gt;StreamLog&lt;/code&gt; like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val logger = StreamLog.getLogger(&#34;Tag&#34;)&#xA;logger.d { &#34;This is a log message&#34; }&#xA;&#xA;// Getting a tagged logger lazily.&#xA;val logger by taggedLogger()&#xA;val logger by taggedLogger(tag = &#34;Tag&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you don&#39;t specify the &lt;code&gt;tag&lt;/code&gt; parameter, the tag value will be a class name that is logging currently. In Jetpack Compose, the tag will be the scope&#39;s name of Composable functions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;140px&#34; src=&#34;https://user-images.githubusercontent.com/24237865/205479526-5fa0b5f0-22df-4f02-ac0e-7a7a3e050cdb.png&#34;&gt; &#xA;&lt;h2&gt;Stream Log Android File&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stream Log Android File&lt;/strong&gt; is an extension library for persisting your log messages into external &lt;code&gt;.txt&lt;/code&gt; files. So you can record the runtime log messages into a &lt;code&gt;.txt&lt;/code&gt; file, and it will help you to trace the log messages in many complex scenarios.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22io.getstream%22%20AND%20a:%22stream-log-android-file%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.getstream/stream-log-android.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the dependency below into your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation(&#34;io.getstream:stream-log-android:$version&#34;)&#xA;    debugImplementation(&#34;io.getstream:stream-log-android-file:$version&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AndroidStreamLogger&lt;/h3&gt; &#xA;&lt;p&gt;First, you need to install a logger for Android with &lt;code&gt;AndroidStreamLogger&lt;/code&gt; like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class App : Application() {&#xA;&#xA;    override fun onCreate() {&#xA;        super.onCreate()&#xA;&#xA;        AndroidStreamLogger.installOnDebuggableApp(this)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We&#39;d recommend you install the logger only once in your application class.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Now, you can print log messages simply like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;streamLog { &#34;This is a log messages&#34; }&#xA;streamLog(priority = Priority.INFO, tag = &#34;Tag&#34;) { &#34;This is a log messages&#34; }&#xA;StreamLog.d(tag = &#34;Tag&#34;) { &#34;This is a log message&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Record Runtime Log Messages Into an External File&lt;/h3&gt; &#xA;&lt;p&gt;You don&#39;t need to do additional setup for this, because the &lt;code&gt;stream-log-android-file&lt;/code&gt; dependency will execute all processes automatically. So let&#39;s extract the log messages into an external file following the command lines below on your terminal:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build and run your project on your emulator or connect to your real device over Wi-Fi following the &lt;a href=&#34;https://developer.android.com/studio/command-line/adb#connect-to-a-device-over-wi-fi&#34;&gt;Connect to a device over Wi-Fi&lt;/a&gt; guidelines.&lt;/li&gt; &#xA; &lt;li&gt;Enter in terminal: &lt;code&gt;adb shell am start-foreground-service -a io.getstream.log.android.CLEAR&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You should see the toast message &lt;code&gt;Logs are cleared!&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Explore your app to record specific log messages.&lt;/li&gt; &#xA; &lt;li&gt;Enter in terminal: &lt;code&gt;adb shell am start-foreground-service -a io.getstream.log.android.SHARE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You should see a file-sharing dialog chooser in your device.&lt;/li&gt; &#xA; &lt;li&gt;Share the log file via other applications, such as Google Cloud.&lt;/li&gt; &#xA; &lt;li&gt;Exit recording log messages by enter in terminal: &lt;code&gt;adb shell am stopservice -a io.getstream.log.android.SHARE&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Then you will get the result &lt;code&gt;.txt&lt;/code&gt; file below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;======================================================================&#xA;Logs date time: 2022-12-02 21:08:35&#39;288&#xA;Version code: 1&#xA;Version name: 1.0.1&#xA;Android API level: 31&#xA;Device: samsung beyond1&#xA;======================================================================&#xA;2022-11-30 13:02:29&#39;918 D/              main:2 [Main]: onCreate MainActivity&#xA;2022-11-30 13:13:06&#39;656 D/              main:2 [Main]: Button clicked&#xA;2022-11-30 13:13:07&#39;225 D/              main:2 [Main]: Button clicked&#xA;2022-11-30 13:13:07&#39;439 D/              main:2 [Main]: Button clicked&#xA;2022-11-30 13:14:23&#39;316 D/              main:2 [Main]: onCreate MainActivity&#xA;2022-11-30 13:14:24&#39;296 D/              main:2 [Main]: Button clicked&#xA;2022-11-30 13:14:24&#39;723 D/              main:2 [Main]: Button clicked&#xA;2022-11-30 16:36:39&#39;102 D/              main:2 [MainActivity]: onCreate MainActivity&#xA;2022-11-30 16:42:48&#39;987 D/              main:2 [BoxScopeInstance]: Button Clicked!&#xA;2022-11-30 16:42:49&#39;873 D/              main:2 [BoxScopeInstance]: Button Clicked!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stream Log BOM&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Stream Log&lt;/strong&gt; Bill of Materials (BOM) lets you manage all of your &lt;strong&gt;Stream Log&lt;/strong&gt; library versions by specifying only the BOM’s version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22com.github.skydoves%22%20AND%20a:%22retrofit-adapters-result%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.getstream/stream-log-android.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation(&#34;io.getstream:stream-log-bom:$version&#34;)&#xA;&#xA;    implementation(&#34;io.getstream:stream-log&#34;)&#xA;    implementation(&#34;io.getstream:stream-log-file&#34;)&#xA;    implementation(&#34;io.getstream:stream-log-android&#34;)&#xA;    implementation(&#34;io.getstream:stream-log-android-file&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://getstream.io/chat/compose/tutorial/?utm_source=Github&amp;amp;utm_campaign=Devrel_oss&amp;amp;utm_medium=StreamLog&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/146505581-a79e8f7d-6eda-4611-b41a-d60f0189e7d4.jpeg&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Find this library useful? &lt;span&gt;❤️&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Support it by joining &lt;strong&gt;&lt;a href=&#34;https://github.com/getStream/stream-log/stargazers&#34;&gt;stargazers&lt;/a&gt;&lt;/strong&gt; for this repository. &lt;span&gt;⭐&lt;/span&gt; &lt;br&gt; Also, follow &lt;strong&gt;&lt;a href=&#34;https://twitter.com/getstream_io&#34;&gt;Stream&lt;/a&gt;&lt;/strong&gt; on Twitter for our next creations!&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;Copyright 2022 Stream.IO, Inc. All Rights Reserved.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>