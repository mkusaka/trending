<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T01:45:22Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shabinder/SpotiFlyer</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/Shabinder/SpotiFlyer</id>
    <link href="https://github.com/Shabinder/SpotiFlyer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kotlin Multiplatform Music Downloader, Supports Spotify / Gaana / Youtube Music / Jio Saavn / SoundCloud. NOTE: BEING REWRITTEN, SO STAY TUNED.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Shabinder/SpotiFlyer/main/art/cover-web.jpg&#34; alt=&#34;Web Cover&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Shabinder/SpotiFlyer/main/art/cover-android.jpg&#34; alt=&#34;Android Cover&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Shabinder/SpotiFlyer/main/art/cover-desktop.jpg&#34; alt=&#34;Desktop Cover&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer&#34;&gt;&lt;img src=&#34;https://github.com/Shabinder/SpotiFlyer/raw/Compose/art/SpotiFlyer.svg?sanitize=true&#34; align=&#34;left&#34; height=&#34;80&#34; width=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SpotiFlyer&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kotlin Multiplatform&lt;/strong&gt; Music Downloader ,supports &lt;strong&gt;Spotify, Youtube, Gaana, Jio-Saavn and SoundCloud&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supports- Playlist, Albums, Tracks. &lt;em&gt;(If You know Any Source for Episodes/Podcasts create an Issue sharing It.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Currently running on:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer#-install&#34;&gt;Android (Jetpack Compose)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer#-install&#34;&gt;Desktop (Compose for Desktop) &lt;sup&gt;Œ≤&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spotiflyer.ml/web/&#34;&gt;Web (Kotlin/JS + React Wrapper) &lt;sup&gt;Œ≤&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shabinder/spotiflyer-ios&#34;&gt;&lt;em&gt;(WIP)&lt;/em&gt; IOS SOON (SWIFTUI)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--[![Build Status](https://github.com/Shabinder/SpotiFlyer/blob/master/app/build_passing.svg)](https://github.com/Shabinder/SpotiFlyer/releases)&#xA;![API](https://img.shields.io/badge/API-26%2B-brightgreen.svg)&#xA;&lt;/br&gt;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Shabinder/SpotiFlyer?style=social&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/Shabinder/SpotiFlyer?style=social&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/Shabinder/SpotiFlyer?style=social&#34; alt=&#34;GitHub watchers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Encourage this repo by giving it a Star‚≠ê .&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;SpotiFlyer is an &lt;strong&gt;App&lt;/strong&gt;(Written in &lt;strong&gt;Kotlin&lt;/strong&gt;), which &lt;strong&gt;aims&lt;/strong&gt; to work as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Downloads&lt;/strong&gt;: Albums, Tracks and Playlists,etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Save your Data&lt;/strong&gt; ,by not &lt;strong&gt;&lt;em&gt;Streaming&lt;/em&gt;&lt;/strong&gt; your Fav Songs Online again &amp;amp; again(Just Download Them!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No ADS!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Works straight out of the box&lt;/strong&gt; and does not require you to generate or mess with your API keys (already included).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Platforms:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spotify&lt;/li&gt; &#xA; &lt;li&gt;Gaana&lt;/li&gt; &#xA; &lt;li&gt;Youtube&lt;/li&gt; &#xA; &lt;li&gt;Youtube Music&lt;/li&gt; &#xA; &lt;li&gt;Jio-Saavn&lt;/li&gt; &#xA; &lt;li&gt;SoundCloud&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(more coming soon)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--START_SECTION:DCI &#xA;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/latest&#34;&gt;&lt;img src=&#34;https://hcti.io/v1/image/53d51dc7-91c7-4b9d-b923-2ea32e6b17ad&#34; height=&#34;125&#34; width=&#34;280&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&#xA;&lt;!--END_SECTION:DCI--&gt; &#xA;&lt;h2&gt;üíª Install&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Download&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/download/v3.6.1/SpotiFlyer-3.6.1.apk&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=7885FF&amp;amp;label=Android-Apk&amp;amp;logo=android&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/download/v3.6.1/SpotiFlyer-3.6.1.msi&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=00A8E8&amp;amp;label=Windows-msi&amp;amp;logo=windows&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows-JAR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/download/v3.6.1/SpotiFlyer-windows-x64-3.6.1.jar&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=00719c&amp;amp;label=Windows-jar&amp;amp;logo=windows&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacOS-JAR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/download/v3.6.1/SpotiFlyer-macos-x64-3.6.1.jar&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=5F85CE&amp;amp;label=MacOS-jar&amp;amp;logo=apple&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux-DEB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/download/v3.6.1/spotiflyer_3.6.1-1_amd64.deb&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=D0074E&amp;amp;label=Linux-deb&amp;amp;logo=debian&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux-JAR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/download/v3.6.1/SpotiFlyer-linux-x64-3.6.1.jar&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=EBA201&amp;amp;label=Linux-jar&amp;amp;logo=linux&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Web&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://shabinder.github.io/SpotiFlyer/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=FF7139&amp;amp;label=SpotiFlyer&amp;amp;logo=firefox&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚ö†Ô∏è Beta&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To run the &lt;code&gt;jar&lt;/code&gt; version, you need JAVA installed.&lt;/li&gt; &#xA; &lt;li&gt;MacOs DMG is not notarized and signed using a certificate , so Use jar in mac for now.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- [![Latest Download](https://img.shields.io/github/downloads/Shabinder/SpotiFlyer/total?style=for-the-badge&amp;color=17B2E7)](https://github.com/Shabinder/SpotiFlyer/releases/latest) --&gt; &#xA;&lt;a href=&#34;https://f-droid.org/packages/com.shabinder.spotiflyer&#34;&gt; &lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;110&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Want to Contribute üôã‚Äç‚ôÇÔ∏è?&lt;/h3&gt; &#xA;&lt;p&gt;Want to contribute? Great! All contributions are welcome, from code to documentation to graphics to design suggestions to bug reports. Please use GitHub to its fullest-- contribute Pull Requests, contribute tutorials or other wiki content-- whatever you have to offer, we can use it!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For &lt;strong&gt;Translations&lt;/strong&gt; , read &lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/raw/main/CONTRIBUTING.md&#34;&gt;Contributing.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please Donate to support me and my work!&lt;/strong&gt; &lt;br&gt; &lt;a href=&#34;https://ko-fi.com/R6R84CS1D&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://opencollective.com/spotiflyer/donate&#34;&gt; &lt;img src=&#34;https://opencollective.com/spotiflyer/tiers/donate.svg?avatarHeight=52&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://paypal.me/shabinder&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34; alt=&#34;paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Want to discuss? üí¨&lt;/h3&gt; &#xA;&lt;p&gt;Have any questions, doubts or want to present your opinions, views? You&#39;re always welcome. You can &lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/discussions&#34;&gt;start discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Todos üìÑ&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write &lt;strong&gt;Tests&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support for Podcasts/Episodes and Shows.&lt;/li&gt; &#xA; &lt;li&gt;Build a Media Player into this app. &lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/issues/113&#34;&gt;#113&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;The availability of YouTube Music / JioSaavn in your country is important for this app to work. The reason behind this is, we use YouTube Music / JioSaavn to filter out our search results and get the desired song downloaded from Youtube Music OR other providers we may use(like Jio Saavn). To check if YouTube Music is available in your country, visit &lt;a href=&#34;https://music.youtube.com&#34;&gt;YouTube Music&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I am hosting a &lt;strong&gt;server for WEB APP on my own personal device&lt;/strong&gt; , so expect some downtimes, If you have a &lt;strong&gt;server&lt;/strong&gt; available and would like to share , open an issue or ping me wherever you can get a hold of me.&lt;/p&gt; &#xA;&lt;h3&gt;Permissions Info:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NETWORK&lt;/strong&gt;- &lt;em&gt;(INTERNET, ACCESS_NETWORK_STATE, ACCESS_WIFI_STATE)&lt;/em&gt;: to access the online streaming services, and Confirm Network Connectivity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;STORAGE&lt;/strong&gt;- &lt;em&gt;READ_STORAGE_PERMISSION, READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE, MANAGE_EXTERNAL_STORAGE)&lt;/em&gt;: to save Downloaded Media Files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;QUERY_ALL_PACKAGES&lt;/strong&gt;- in order to check if Youtube Music, Spotify, Gaana, JioSaavn, etc apps are installed and if they are, user can directly open them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;REQUEST_IGNORE_BATTERY_OPTIMIZATIONS&lt;/strong&gt;: User Allows App to Run in Background at runtime in Permission Dialog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wake Lock&lt;/strong&gt;: Don&#39;t let Wifi/Internet Sleep in screen off / dozing state when Songs are being downloaded.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Foreground Service&lt;/strong&gt;: Service responsible to download and save songs to storage even after app is exited/background.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Analytics and Crashlytics are &lt;strong&gt;OPT-IN&lt;/strong&gt; &lt;em&gt;(Disabled by Default)&lt;/em&gt; and are &lt;strong&gt;Self-Hosted&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License &lt;img src=&#34;https://img.shields.io/github/license/Shabinder/SpotiFlyer?style=flat-square&#34; alt=&#34;GPL-License&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GPL-3.0 License&lt;/strong&gt; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Free Software, Hell Yeah!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some Logos are Based on Logos by &lt;a href=&#34;https://www.freepik.com/&#34;&gt;Freepik&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Downloading copyright songs may be illegal in your country. This tool is for educational purposes only and was created only to show how Music Platform&#39;s Apis like Spotify&#39;s API can be exploited to download music. Please support the artists by buying their music.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>detekt/detekt</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/detekt/detekt</id>
    <link href="https://github.com/detekt/detekt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Static code analysis for Kotlin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;detekt&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kotlinlang.slack.com/archives/C88E12QH4&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%23detekt-on_slack-red.svg?logo=slack&#34; alt=&#34;Join the chat at #detekt on KotlinLang&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://detekt.dev/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/visit-website-red.svg?logo=firefox&#34; alt=&#34;Visit the website at detekt.dev/&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/artifact/io.gitlab.arturbosch.detekt/detekt-cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/io.gitlab.arturbosch.detekt/detekt-cli?label=MavenCentral&amp;amp;logo=apache-maven&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plugins.gradle.org/plugin/io.gitlab.arturbosch.detekt&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-metadata/v/https/plugins.gradle.org/m2/io/gitlab/arturbosch/detekt/io.gitlab.arturbosch.detekt.gradle.plugin/maven-metadata.xml.svg?label=Gradle&amp;amp;logo=gradle&#34; alt=&#34;Gradle Plugin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/detekt/detekt/workflows/Pre%20Merge%20Checks/badge.svg?branch=main&#34; alt=&#34;Pre Merge Checks&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/detekt/detekt&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/detekt/detekt/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/KotlinBy/awesome-kotlin&#34;&gt;&lt;img src=&#34;https://kotlin.link/awesome-kotlin.svg?sanitize=true&#34; alt=&#34;Awesome Kotlin Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/custom%2B25591%2Fgithub.com%2Fdetekt%2Fdetekt?ref=badge_small&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/custom%2B25591%2Fgithub.com%2Fdetekt%2Fdetekt.svg?type=small&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Meet &lt;em&gt;detekt&lt;/em&gt;, a static code analysis tool for the &lt;em&gt;Kotlin&lt;/em&gt; programming language. It operates on the abstract syntax tree provided by the Kotlin compiler.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/detekt/detekt/main/docs/images/detekt_in_action.png&#34; alt=&#34;detekt in action&#34; title=&#34;detekt in action&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Code smell analysis for your Kotlin projects&lt;/li&gt; &#xA; &lt;li&gt;Complexity reports based on lines of code, cyclomatic complexity and amount of code smells&lt;/li&gt; &#xA; &lt;li&gt;Highly configurable rule sets&lt;/li&gt; &#xA; &lt;li&gt;Suppression of findings with Kotlin&#39;s &lt;code&gt;@Suppress&lt;/code&gt; and Java&#39;s &lt;code&gt;@SuppressWarnings&lt;/code&gt; annotations&lt;/li&gt; &#xA; &lt;li&gt;Specification of quality gates which will break your build&lt;/li&gt; &#xA; &lt;li&gt;Code Smell baseline and suppression for legacy projects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/detekt/detekt/main/#with-gradle&#34;&gt;Gradle plugin&lt;/a&gt; for code analysis via Gradle builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/detekt/sonar-kotlin&#34;&gt;SonarQube integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extensibility by enabling incorporation of personal rule sets, &lt;code&gt;FileProcessListener&#39;s&lt;/code&gt; and &lt;code&gt;OutputReport&#39;s&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/detekt/detekt-intellij-plugin&#34;&gt;IntelliJ integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Third party integrations for &lt;a href=&#34;https://github.com/Ozsie/detekt-maven-plugin&#34;&gt;Maven&lt;/a&gt;, &lt;a href=&#34;https://github.com/buildfoundation/bazel_rules_detekt/&#34;&gt;Bazel&lt;/a&gt; and Github Actions (&lt;a href=&#34;https://github.com/marketplace/actions/detekt-all&#34;&gt;Docker based&lt;/a&gt; and &lt;a href=&#34;https://github.com/marketplace/actions/setup-detekt&#34;&gt;Javascript based&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Project Website&lt;/h3&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://detekt.dev/&#34;&gt;the project website&lt;/a&gt; for installation guides, release notes, migration guides, rule descriptions and configuration options.&lt;/p&gt; &#xA;&lt;h4&gt;Quick-Links&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://detekt.dev/changelog.html&#34;&gt;Changelog and migration guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://detekt.dev/cli.html&#34;&gt;Available CLI options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://detekt.dev/complexity.html&#34;&gt;Rule set and rule descriptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://detekt.dev/extensions.html&#34;&gt;Writing custom rules and extending detekt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://detekt.dev/suppressing-rules.html&#34;&gt;Suppressing issues in code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://detekt.dev/baseline.html&#34;&gt;Suppressing issues via baseline file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://detekt.dev/configurations.html&#34;&gt;Configuring detekt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sample Gradle integrations examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/detekt/detekt/raw/main/build.gradle.kts&#34;&gt;multi project (Kotlin DSL)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/arturbosch/kutils/raw/master/build.gradle&#34;&gt;single project (Groovy DSL)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/detekt/sonar-kotlin/raw/main/pom.xml&#34;&gt;single project (Unofficial Maven plugin)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Start ...&lt;/h3&gt; &#xA;&lt;h4&gt;with the command-line interface&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -sSLO https://github.com/detekt/detekt/releases/download/v[version]/detekt-cli-[version]-all.jar&#xA;java -jar detekt-cli-[version]-all.jar --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find &lt;a href=&#34;https://detekt.dev/cli.html&#34;&gt;other ways to install detekt here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;with Gradle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;    id(&#34;io.gitlab.arturbosch.detekt&#34;).version(&#34;[version]&#34;)&#xA;}&#xA;&#xA;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&#xA;detekt {&#xA;    buildUponDefaultConfig = true // preconfigure defaults&#xA;    allRules = false // activate all available (even unstable) rules.&#xA;    config = files(&#34;$projectDir/config/detekt.yml&#34;) // point to your custom config defining rules to run, overwriting default behavior&#xA;    baseline = file(&#34;$projectDir/config/baseline.xml&#34;) // a way of suppressing issues before introducing detekt&#xA;}&#xA;&#xA;tasks.withType&amp;lt;Detekt&amp;gt;().configureEach {&#xA;    reports {&#xA;        html.required.set(true) // observe findings in your browser with structure and code snippets&#xA;        xml.required.set(true) // checkstyle like format mainly for integrations like Jenkins&#xA;        txt.required.set(true) // similar to the console output, contains issue signature to manually edit baseline files&#xA;        sarif.required.set(true) // standardized SARIF format (https://sarifweb.azurewebsites.net/) to support integrations with Github Code Scanning&#xA;    }&#xA;}&#xA;&#xA;// Groovy DSL&#xA;tasks.withType(Detekt).configureEach {&#xA;    jvmTarget = &#34;1.8&#34;&#xA;}&#xA;tasks.withType(DetektCreateBaselineTask).configureEach {&#xA;    jvmTarget = &#34;1.8&#34;&#xA;}&#xA;&#xA;// or&#xA;&#xA;// Kotlin DSL&#xA;tasks.withType&amp;lt;Detekt&amp;gt;().configureEach {&#xA;    jvmTarget = &#34;1.8&#34;&#xA;}&#xA;tasks.withType&amp;lt;DetektCreateBaselineTask&amp;gt;().configureEach {&#xA;    jvmTarget = &#34;1.8&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://search.maven.org/artifact/io.gitlab.arturbosch.detekt/detekt-cli&#34;&gt;maven central&lt;/a&gt; for releases and &lt;a href=&#34;https://oss.sonatype.org/#view-repositories;snapshots~browsestorage~io/gitlab/arturbosch/detekt&#34;&gt;sonatype&lt;/a&gt; for snapshots.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use a SNAPSHOT version, you can find more info on &lt;a href=&#34;https://detekt.dev/snapshots.html&#34;&gt;this documentation page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Requirements&lt;/h4&gt; &#xA;&lt;p&gt;Gradle 6.1+ is the minimum requirement. However, the recommended versions together with the other tools recommended versions are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Detekt Version&lt;/th&gt; &#xA;   &lt;th&gt;Gradle&lt;/th&gt; &#xA;   &lt;th&gt;Kotlin&lt;/th&gt; &#xA;   &lt;th&gt;AGP&lt;/th&gt; &#xA;   &lt;th&gt;Java Target Level&lt;/th&gt; &#xA;   &lt;th&gt;JDK Max Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.20.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;7.4.2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.6.20&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;7.1.3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.8&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;17&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The list of &lt;a href=&#34;https://detekt.dev/compatibility.html&#34;&gt;recommended versions for previous detekt version is listed here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding more rule sets&lt;/h3&gt; &#xA;&lt;p&gt;detekt itself provides a wrapper over &lt;a href=&#34;https://github.com/pinterest/ktlint&#34;&gt;ktlint&lt;/a&gt; as a &lt;code&gt;formatting&lt;/code&gt; rule set which can be easily added to the Gradle configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;dependencies {&#xA;    detektPlugins(&#34;io.gitlab.arturbosch.detekt:detekt-formatting:[version]&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Likewise custom &lt;a href=&#34;https://detekt.dev/extensions.html&#34;&gt;extensions&lt;/a&gt; can be added to detekt.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/detekt/detekt/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all the people who contributed to detekt!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/detekt/detekt/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=detekt/detekt&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Mentions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://androidweekly.net/issues/issue-259&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/androidweekly.net-259-orange.svg?style=flat-square&#34; alt=&#34;androidweekly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://androidweekly.cn/android-dev-wekly-issue-154/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/androidweekly.cn-154-orange.svg?style=flat-square&#34; alt=&#34;androidweekly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As mentioned in...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.droidcon.com/2021/11/17/detekt-state-of-the-union-2/&#34;&gt;driodcon London 2021 - Detekt - State of the Union&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=yjhQiP0329M&#34;&gt;KotlinConf 2018 - Safe(r) Kotlin Code - Static Analysis Tools for Kotlin by Marvin Ramin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LT6m5_LO2DQ&#34;&gt;droidcon NYC 2018 - Static Code Analysis For Kotlin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kotlin on Code Quality Tools - by @vanniktech &lt;a href=&#34;https://docs.google.com/presentation/d/1sUoQCRHTR01JfaS67Qkd7K1rdRLOhO6QGCelZZwxOKs/edit&#34;&gt;Slides&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=FKDNE6PPTTE&#34;&gt;Presentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/24470020-integrating-detekt-in-the-workflow&#34;&gt;Integrating detekt in the Workflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.frankel.ch/check-quality-kotlin-code/&#34;&gt;Check the quality of Kotlin code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://smyachenkov.com/posts/kotlin-static-analysis-tools/&#34;&gt;Kotlin Static Analysis Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doi.org/10.1145/3267183.3267186&#34;&gt;Are you still smelling it?: A comparative study between Java and Kotlin language&lt;/a&gt; by &lt;a href=&#34;https://github.com/matheusflauzino/smells-experiment-Kotlin-and-Java&#34;&gt;Flauzino et al.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://galler.dev/preventing-software-antipatterns-with-detekt/&#34;&gt;Preventing software antipatterns with Detekt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Integrations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codacy.com&#34;&gt;Codacy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vanniktech/gradle-code-quality-tools-plugin&#34;&gt;Gradle plugin that configures Error Prone, Checkstyle, PMD, CPD, Lint, Detekt &amp;amp; Ktlint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomasbjerre/violations-lib&#34;&gt;Violations Lib&lt;/a&gt; is a Java library for parsing report files like static code analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TouK/sputnik&#34;&gt;sputnik&lt;/a&gt; is a free tool for static code review and provides support for detekt&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/novoda/gradle-static-analysis-plugin&#34;&gt;Novoda Gradle Static Analysis plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ozsie/detekt-maven-plugin&#34;&gt;Detekt Maven plugin&lt;/a&gt; that wraps the Detekt CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/buildfoundation/bazel_rules_detekt&#34;&gt;Detekt Bazel plugin&lt;/a&gt; that wraps the Detekt CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/btkelly/gnag&#34;&gt;Gradle plugin that helps facilitate GitHub PR checking and automatic commenting of violations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://codefactor.io/&#34;&gt;Codefactor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/actions/detekt-all&#34;&gt;GitHub Action: Detekt All&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-platform-plugin-template&#34;&gt;IntelliJ Platform Plugin Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/muse-dev&#34;&gt;Sonatype Lift&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Custom rules and reports from 3rd parties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cph-cachet/detekt-verify-implementation&#34;&gt;detekt-verify-implementation&lt;/a&gt; by cph-cachet&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mkohm/detekt-hint&#34;&gt;detekt-hint&lt;/a&gt; by mkohm is a plugin to detekt that provides detection of design principle violations through integration with Danger&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/cromefire_/detekt-gitlab-report&#34;&gt;GitLab report format&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Credits&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jetbrains/&#34;&gt;JetBrains&lt;/a&gt; - Creating IntelliJ + Kotlin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmd/pmd&#34;&gt;PMD&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/checkstyle/checkstyle&#34;&gt;Checkstyle&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/pinterest/ktlint&#34;&gt;ktlint&lt;/a&gt; - Ideas for threshold values and style rules&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Kotlin/kotlinx.coroutines</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/Kotlin/kotlinx.coroutines</id>
    <link href="https://github.com/Kotlin/kotlinx.coroutines" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Library support for Kotlin coroutines&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kotlinx.coroutines&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/docs/components-stability.html&#34;&gt;&lt;img src=&#34;https://kotl.in/badges/stable.svg?sanitize=true&#34; alt=&#34;Kotlin Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;JetBrains official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core/1.6.2/pom&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.jetbrains.kotlinx/kotlinx-coroutines-core/1.6.2&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://kotlinlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kotlin-1.6.0-blue.svg?logo=kotlin&#34; alt=&#34;Kotlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.slack.com/messages/coroutines/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-slack-green.svg?logo=slack&#34; alt=&#34;Slack channel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Library support for Kotlin coroutines with &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/#multiplatform&#34;&gt;multiplatform&lt;/a&gt; support. This is a companion version for the Kotlin &lt;code&gt;1.6.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;suspend fun main() = coroutineScope {&#xA;    launch { &#xA;       delay(1000)&#xA;       println(&#34;Kotlin Coroutines World!&#34;) &#xA;    }&#xA;    println(&#34;Hello&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Play with coroutines online &lt;a href=&#34;https://pl.kotl.in/hG_tKbid_&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/kotlinx-coroutines-core/README.md&#34;&gt;core&lt;/a&gt; ‚Äî common coroutines across all platforms: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html&#34;&gt;launch&lt;/a&gt; and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html&#34;&gt;async&lt;/a&gt; coroutine builders returning &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html&#34;&gt;Job&lt;/a&gt; and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html&#34;&gt;Deferred&lt;/a&gt; light-weight futures with cancellation support;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/index.html&#34;&gt;Dispatchers&lt;/a&gt; object with &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html&#34;&gt;Main&lt;/a&gt; dispatcher for Android/Swing/JavaFx, and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html&#34;&gt;Default&lt;/a&gt; dispatcher for background coroutines;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html&#34;&gt;delay&lt;/a&gt; and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/yield.html&#34;&gt;yield&lt;/a&gt; top-level suspending functions;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html&#34;&gt;Flow&lt;/a&gt; ‚Äî cold asynchronous stream with &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow.html&#34;&gt;flow&lt;/a&gt; builder and comprehensive operator set (&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/filter.html&#34;&gt;filter&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html&#34;&gt;map&lt;/a&gt;, etc);&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/index.html&#34;&gt;Channel&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/index.html&#34;&gt;Mutex&lt;/a&gt;, and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/index.html&#34;&gt;Semaphore&lt;/a&gt; communication and synchronization primitives;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html&#34;&gt;coroutineScope&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/supervisor-scope.html&#34;&gt;supervisorScope&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-context.html&#34;&gt;withContext&lt;/a&gt;, and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html&#34;&gt;withTimeout&lt;/a&gt; scope builders;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-main-scope.html&#34;&gt;MainScope()&lt;/a&gt; for Android and UI applications;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html&#34;&gt;SupervisorJob()&lt;/a&gt; and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html&#34;&gt;CoroutineExceptionHandler&lt;/a&gt; for supervision of coroutines hierarchies;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.selects/select.html&#34;&gt;select&lt;/a&gt; expression support and more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/kotlinx-coroutines-core/jvm/&#34;&gt;core/jvm&lt;/a&gt; ‚Äî additional core features available on Kotlin/JVM: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-i-o.html&#34;&gt;Dispatchers.IO&lt;/a&gt; dispatcher for blocking coroutines;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/as-coroutine-dispatcher.html&#34;&gt;Executor.asCoroutineDispatcher&lt;/a&gt; extension, custom thread pools, and more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/kotlinx-coroutines-core/js/&#34;&gt;core/js&lt;/a&gt; ‚Äî additional core features available on Kotlin/JS: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Integration with &lt;code&gt;Promise&lt;/code&gt; via &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/await.html&#34;&gt;Promise.await&lt;/a&gt; and &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/promise.html&#34;&gt;promise&lt;/a&gt; builder;&lt;/li&gt; &#xA;   &lt;li&gt;Integration with &lt;code&gt;Window&lt;/code&gt; via &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/as-coroutine-dispatcher.html&#34;&gt;Window.asCoroutineDispatcher&lt;/a&gt;, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/kotlinx-coroutines-test/README.md&#34;&gt;test&lt;/a&gt; ‚Äî test utilities for coroutines: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/set-main.html&#34;&gt;Dispatchers.setMain&lt;/a&gt; to override &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html&#34;&gt;Dispatchers.Main&lt;/a&gt; in tests;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope/index.html&#34;&gt;TestCoroutineScope&lt;/a&gt; to test suspending functions and coroutines.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/kotlinx-coroutines-debug/README.md&#34;&gt;debug&lt;/a&gt; ‚Äî debug utilities for coroutines: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/index.html&#34;&gt;DebugProbes&lt;/a&gt; API to probe, keep track of, print and dump active coroutines;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/index.html&#34;&gt;CoroutinesTimeout&lt;/a&gt; test rule to automatically dump coroutines on test timeout.&lt;/li&gt; &#xA;   &lt;li&gt;Automatic integration with &lt;a href=&#34;https://github.com/reactor/BlockHound&#34;&gt;BlockHound&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/reactive/README.md&#34;&gt;reactive&lt;/a&gt; ‚Äî modules that provide builders and iteration support for various reactive streams libraries: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reactive Streams (&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/collect.html&#34;&gt;Publisher.collect&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-single.html&#34;&gt;Publisher.awaitSingle&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/publish.html&#34;&gt;kotlinx.coroutines.reactive.publish&lt;/a&gt;, etc),&lt;/li&gt; &#xA;   &lt;li&gt;Flow (JDK 9) (the same interface as for Reactive Streams),&lt;/li&gt; &#xA;   &lt;li&gt;RxJava 2.x (&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-flowable.html&#34;&gt;rxFlowable&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-single.html&#34;&gt;rxSingle&lt;/a&gt;, etc), and&lt;/li&gt; &#xA;   &lt;li&gt;RxJava 3.x (&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-flowable.html&#34;&gt;rxFlowable&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-single.html&#34;&gt;rxSingle&lt;/a&gt;, etc), and&lt;/li&gt; &#xA;   &lt;li&gt;Project Reactor (&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/flux.html&#34;&gt;flux&lt;/a&gt;, &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/mono.html&#34;&gt;mono&lt;/a&gt;, etc).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/ui/README.md&#34;&gt;ui&lt;/a&gt; ‚Äî modules that provide coroutine dispatchers for various single-threaded UI libraries: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Android, JavaFX, and Swing.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/integration/README.md&#34;&gt;integration&lt;/a&gt; ‚Äî modules that provide integration with various asynchronous callback- and future-based libraries: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JDK8 &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-jdk8/kotlinx.coroutines.future/await.html&#34;&gt;CompletionStage.await&lt;/a&gt;, Guava &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-guava/kotlinx.coroutines.guava/await.html&#34;&gt;ListenableFuture.await&lt;/a&gt;, and Google Play Services &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-play-services/kotlinx.coroutines.tasks/await.html&#34;&gt;Task.await&lt;/a&gt;;&lt;/li&gt; &#xA;   &lt;li&gt;SLF4J MDC integration via &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/index.html&#34;&gt;MDCContext&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Presentations and videos: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a3agLJQ6vt8&#34;&gt;Kotlin Coroutines in Practice&lt;/a&gt; (Roman Elizarov at KotlinConf 2018, &lt;a href=&#34;https://www.slideshare.net/elizarov/kotlin-coroutines-in-practice-kotlinconf-2018&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=YrrUCSi72E8&#34;&gt;Deep Dive into Coroutines&lt;/a&gt; (Roman Elizarov at KotlinConf 2017, &lt;a href=&#34;https://www.slideshare.net/elizarov/deep-dive-into-coroutines-on-jvm-kotlinconf-2017&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Mj5P47F6nJg&#34;&gt;History of Structured Concurrency in Coroutines&lt;/a&gt; (Roman Elizarov at Hydra 2019, &lt;a href=&#34;https://speakerdeck.com/elizarov/structured-concurrency&#34;&gt;slides&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Guides and manuals: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/coroutines-guide.html&#34;&gt;Guide to kotlinx.coroutines by example&lt;/a&gt; (&lt;strong&gt;read it first&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/ui/coroutines-guide-ui.md&#34;&gt;Guide to UI programming with coroutines&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/docs/topics/debugging.md&#34;&gt;Debugging capabilities in kotlinx.coroutines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/docs/topics/compatibility.md&#34;&gt;Compatibility policy and experimental annotations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/CHANGES.md&#34;&gt;Change log for kotlinx.coroutines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kotlin/KEEP/raw/master/proposals/coroutines.md&#34;&gt;Coroutines design document (KEEP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines&#34;&gt;Full kotlinx.coroutines API reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using in your projects&lt;/h2&gt; &#xA;&lt;h3&gt;Maven&lt;/h3&gt; &#xA;&lt;p&gt;Add dependencies (you can also add other modules that you need):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.jetbrains.kotlinx&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;kotlinx-coroutines-core&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.6.2&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And make sure that you use the latest Kotlin version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;properties&amp;gt;&#xA;    &amp;lt;kotlin.version&amp;gt;1.6.20&amp;lt;/kotlin.version&amp;gt;&#xA;&amp;lt;/properties&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;p&gt;Add dependencies (you can also add other modules that you need):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;dependencies {&#xA;    implementation(&#34;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.2&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And make sure that you use the latest Kotlin version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;    // For build.gradle.kts (Kotlin DSL)&#xA;    kotlin(&#34;jvm&#34;) version &#34;1.6.20&#34;&#xA;    &#xA;    // For build.gradle (Groovy DSL)&#xA;    id &#34;org.jetbrains.kotlin.jvm&#34; version &#34;1.6.20&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that you have &lt;code&gt;mavenCentral()&lt;/code&gt; in the list of repositories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/ui/kotlinx-coroutines-android&#34;&gt;&lt;code&gt;kotlinx-coroutines-android&lt;/code&gt;&lt;/a&gt; module as a dependency when using &lt;code&gt;kotlinx.coroutines&lt;/code&gt; on Android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.2&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gives you access to the Android &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html&#34;&gt;Dispatchers.Main&lt;/a&gt; coroutine dispatcher and also makes sure that in case of a crashed coroutine with an unhandled exception that this exception is logged before crashing the Android application, similarly to the way uncaught exceptions in threads are handled by the Android runtime.&lt;/p&gt; &#xA;&lt;h4&gt;R8 and ProGuard&lt;/h4&gt; &#xA;&lt;p&gt;R8 and ProGuard rules are bundled into the &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/ui/kotlinx-coroutines-android&#34;&gt;&lt;code&gt;kotlinx-coroutines-android&lt;/code&gt;&lt;/a&gt; module. For more details see &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/ui/kotlinx-coroutines-android/README.md#optimization&#34;&gt;&#34;Optimization&#34; section for Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Avoiding including the debug infrastructure in the resulting APK&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; artifact contains a resource file that is not required for the coroutines to operate normally and is only used by the debugger. To exclude it at no loss of functionality, add the following snippet to the &lt;code&gt;android&lt;/code&gt; block in your Gradle file for the application subproject:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;packagingOptions {&#xA;    resources.excludes += &#34;DebugProbesKt.bin&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiplatform&lt;/h3&gt; &#xA;&lt;p&gt;Core modules of &lt;code&gt;kotlinx.coroutines&lt;/code&gt; are also available for &lt;a href=&#34;https://kotlinlang.org/docs/reference/js-overview.html&#34;&gt;Kotlin/JS&lt;/a&gt; and &lt;a href=&#34;https://kotlinlang.org/docs/reference/native-overview.html&#34;&gt;Kotlin/Native&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In common code that should get compiled for different platforms, you can add a dependency to &lt;code&gt;kotlinx-coroutines-core&lt;/code&gt; right to the &lt;code&gt;commonMain&lt;/code&gt; source set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;commonMain {&#xA;    dependencies {&#xA;        implementation(&#34;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.2&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No more additional dependencies are needed, platform-specific artifacts will be resolved automatically via Gradle metadata available since Gradle 5.3.&lt;/p&gt; &#xA;&lt;p&gt;Platform-specific dependencies are recommended to be used only for non-multiplatform projects that are compiled only for target platform.&lt;/p&gt; &#xA;&lt;h4&gt;JS&lt;/h4&gt; &#xA;&lt;p&gt;Kotlin/JS version of &lt;code&gt;kotlinx.coroutines&lt;/code&gt; is published as &lt;a href=&#34;https://search.maven.org/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core-js/1.6.2/jar&#34;&gt;&lt;code&gt;kotlinx-coroutines-core-js&lt;/code&gt;&lt;/a&gt; (follow the link to get the dependency declaration snippet) and as &lt;a href=&#34;https://www.npmjs.com/package/kotlinx-coroutines-core&#34;&gt;&lt;code&gt;kotlinx-coroutines-core&lt;/code&gt;&lt;/a&gt; NPM package.&lt;/p&gt; &#xA;&lt;h4&gt;Native&lt;/h4&gt; &#xA;&lt;p&gt;Kotlin/Native version of &lt;code&gt;kotlinx.coroutines&lt;/code&gt; is published as &lt;a href=&#34;https://mvnrepository.com/search?q=kotlinx-coroutines-core-&#34;&gt;&lt;code&gt;kotlinx-coroutines-core-$platform&lt;/code&gt;&lt;/a&gt; where &lt;code&gt;$platform&lt;/code&gt; is the target Kotlin/Native platform. &lt;a href=&#34;https://github.com/Kotlin/kotlinx.coroutines/raw/master/gradle/compile-native-multiplatform.gradle#L16&#34;&gt;List of currently supported targets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Only single-threaded code (JS-style) on Kotlin/Native is supported in stable versions. Additionally, a special &lt;code&gt;-native-mt&lt;/code&gt; version is released on a regular basis, for the state of multi-threaded coroutines support please follow the &lt;a href=&#34;https://github.com/Kotlin/kotlinx.coroutines/issues/462&#34;&gt;corresponding issue&lt;/a&gt; for the additional details.&lt;/p&gt; &#xA;&lt;p&gt;Since Kotlin/Native does not generally provide binary compatibility between versions, you should use the same version of the Kotlin/Native compiler as was used to build &lt;code&gt;kotlinx.coroutines&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building and Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx.coroutines/master/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-core --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.flow --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.channels --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.selects --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.sync --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-test --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.test --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-debug --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.debug --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.debug.junit4 --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-slf4j --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.slf4j --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-jdk8 --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.future --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-guava --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.guava --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-play-services --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.tasks --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-reactive --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.reactive --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-rx2 --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.rx2 --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-rx2 --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.rx2 --&gt; &#xA;&lt;!-- MODULE kotlinx-coroutines-reactor --&gt; &#xA;&lt;!-- INDEX kotlinx.coroutines.reactor --&gt; &#xA;&lt;!-- END --&gt;</summary>
  </entry>
  <entry>
    <title>2dust/v2rayNG</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/2dust/v2rayNG</id>
    <link href="https://github.com/2dust/v2rayNG" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A V2Ray client for Android, support Xray core and v2fly core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;v2rayNG&lt;/h1&gt; &#xA;&lt;p&gt;A V2Ray client for Android, support &lt;a href=&#34;https://github.com/XTLS/Xray-core&#34;&gt;Xray core&lt;/a&gt; and &lt;a href=&#34;https://github.com/v2fly/v2ray-core&#34;&gt;v2fly core&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.android.com/about/versions/lollipop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/API-21%2B-yellow.svg?style=flat&#34; alt=&#34;API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Kotlin-1.6.10-blue.svg?sanitize=true&#34; alt=&#34;Kotlin Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/2dust/v2rayNG/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/2dust/v2rayNG&#34; alt=&#34;GitHub commit activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/2dust/v2rayng&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/2dust/v2rayng/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/2dust/v2rayNG/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/2dust/v2rayNG/latest/total?logo=github&#34; alt=&#34;GitHub Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/v2rayn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Chat%20on-Telegram-brightgreen.svg?sanitize=true&#34; alt=&#34;Chat on Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.v2ray.ang&#34;&gt; &lt;img alt=&#34;Get it on Google Play&#34; src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png&#34; width=&#34;165&#34; height=&#34;64&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h4&gt;Geoip and Geosite&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;geoip.dat and geosite.dat files are in &lt;code&gt;Android/data/com.v2ray.ang/files/assets&lt;/code&gt; (path may differ on some Android device)&lt;/li&gt; &#xA; &lt;li&gt;download feature will get enhanced version in this &lt;a href=&#34;https://github.com/Loyalsoldier/v2ray-rules-dat&#34;&gt;repo&lt;/a&gt; (Note it need a working proxy)&lt;/li&gt; &#xA; &lt;li&gt;latest official &lt;a href=&#34;https://github.com/v2fly/domain-list-community&#34;&gt;domain list&lt;/a&gt; and &lt;a href=&#34;https://github.com/v2fly/geoip&#34;&gt;ip list&lt;/a&gt; can be imported manually&lt;/li&gt; &#xA; &lt;li&gt;possible to use third party dat file in the same folder, like &lt;a href=&#34;https://guide.v2fly.org/routing/sitedata.html#%E5%A4%96%E7%BD%AE%E7%9A%84%E5%9F%9F%E5%90%8D%E6%96%87%E4%BB%B6&#34;&gt;h2y&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;More in our &lt;a href=&#34;https://github.com/2dust/v2rayNG/wiki&#34;&gt;wiki&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Development guide&lt;/h3&gt; &#xA;&lt;p&gt;Android project under V2rayNG folder can be compiled directly in Android Studio, or using Gradle wrapper. But the v2ray core inside the aar is (probably) outdated.&lt;br&gt; The aar can be compiled from the Golang project under AndroidLibV2rayLite folder. For a quick start, read guide for &lt;a href=&#34;https://github.com/golang/go/wiki/Mobile&#34;&gt;Go Mobile&lt;/a&gt; and &lt;a href=&#34;https://tutorialedge.net/golang/makefiles-for-go-developers/&#34;&gt;Makefiles for Go Developers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;v2rayNG can run on Android Emulators. For WSA, VPN permission need to be granted via &lt;code&gt;appops set [package name] ACTIVATE_VPN allow&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shadowsocks/shadowsocks-android</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/shadowsocks/shadowsocks-android</id>
    <link href="https://github.com/shadowsocks/shadowsocks-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A shadowsocks client for Android&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;a href=&#34;https://shadowsocks.org&#34;&gt;Shadowsocks&lt;/a&gt; for Android&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/shadowsocks/shadowsocks-android&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/shadowsocks/shadowsocks-android.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=23&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/API-23%2B-brightgreen.svg?style=flat&#34; alt=&#34;API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-android/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/shadowsocks/shadowsocks-android/total.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-android/search?l=kotlin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/top/shadowsocks/shadowsocks-android.svg?sanitize=true&#34; alt=&#34;Language: Kotlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/gh/shadowsocks/shadowsocks-android/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=shadowsocks/shadowsocks-android&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/22ca240f272445548e332a42d5a20d95&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL--3.0-orange.svg?sanitize=true&#34; alt=&#34;License: GPL-3.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.github.shadowsocks&#34;&gt;&lt;img src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png&#34; height=&#34;48&#34;&gt;&lt;/a&gt; for Android &amp;amp; Chrome OS (&lt;a href=&#34;https://play.google.com/apps/testing/com.github.shadowsocks&#34;&gt;beta&lt;/a&gt;)&lt;br&gt; &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.github.shadowsocks.tv&#34;&gt;&lt;img src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png&#34; height=&#34;48&#34;&gt;&lt;/a&gt; for Android TV (&lt;a href=&#34;https://play.google.com/apps/testing/com.github.shadowsocks.tv&#34;&gt;beta&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;PREREQUISITES&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK 11+&lt;/li&gt; &#xA; &lt;li&gt;Android SDK &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Android NDK&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Rust with Android targets installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ cd core/src/main/rust/shadowsocks-rust&#xA;  $ rustup target add armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BUILD&lt;/h3&gt; &#xA;&lt;p&gt;You can check whether the latest commit builds under UNIX environment by checking Travis status.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install prerequisites&lt;/li&gt; &#xA; &lt;li&gt;Clone the repo using &lt;code&gt;git clone --recurse-submodules &amp;lt;repo&amp;gt;&lt;/code&gt; or update submodules using &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build it using Android Studio or gradle script&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;BUILD WITH DOCKER&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repo using &lt;code&gt;git clone --recurse-submodules &amp;lt;repo&amp;gt;&lt;/code&gt; or update submodules using &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker run --rm -v ${PWD}:/build -w /build shadowsocks/android-ndk-go ./gradlew assembleDebug&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CONTRIBUTING&lt;/h3&gt; &#xA;&lt;p&gt;If you are interested in contributing or getting involved with this project, please read the CONTRIBUTING page for more information. The page can be found &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-android/raw/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://discourse.shadowsocks.org/t/poeditor-translation-main-thread/30&#34;&gt;TRANSLATE&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;OPEN SOURCE LICENSES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;redsocks: &lt;a href=&#34;https://github.com/shadowsocks/redsocks/raw/shadowsocks-android/README&#34;&gt;APL 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;libevent: &lt;a href=&#34;https://github.com/shadowsocks/libevent/raw/master/LICENSE&#34;&gt;BSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tun2socks: &lt;a href=&#34;https://github.com/shadowsocks/badvpn/raw/shadowsocks-android/COPYING&#34;&gt;BSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;shadowsocks-rust: &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-rust/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;libsodium: &lt;a href=&#34;https://github.com/jedisct1/libsodium/raw/master/LICENSE&#34;&gt;ISC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL: &lt;a href=&#34;https://www.openssl.org/source/license-openssl-ssleay.txt&#34;&gt;OpenSSL License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LICENSE&lt;/h3&gt; &#xA;&lt;p&gt;Copyright (C) 2017 by Max Lv &amp;lt;&lt;a href=&#34;mailto:max.c.lv@gmail.com&#34;&gt;max.c.lv@gmail.com&lt;/a&gt;&amp;gt;&lt;br&gt; Copyright (C) 2017 by Mygod Studio &amp;lt;&lt;a href=&#34;mailto:contact-shadowsocks-android@mygod.be&#34;&gt;contact-shadowsocks-android@mygod.be&lt;/a&gt;&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mhss1/MyBrain</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/mhss1/MyBrain</id>
    <link href="https://github.com/mhss1/MyBrain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source, All-in-one productivity app for Tasks, Notes, Calendar, Diary and Bookmarks.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/mhss1/mybrain?style=social&#34; alt=&#34;Stars&#34;&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;80&#34; height=&#34;80&#34; src=&#34;https://user-images.githubusercontent.com/58703865/169863670-eee3c8f1-1308-4eb2-9aea-f7c0a47e6a31.png&#34; alt=&#34;app icon&#34;&gt; &#xA;&lt;h1&gt;My Brain&lt;/h1&gt; &#xA;&lt;h3&gt;Open-source, All-in-one productivity app for Tasks, Notes, Calendar, Diary and Bookmarks.&lt;/h3&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/58703865/169859205-54c0b8f3-7423-4c2a-9a9b-9e43861814c0.png&#34; width=&#34;160&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/58703865/169859229-04fbad81-80f8-4b47-8d8a-0242a16a1f8b.png&#34; width=&#34;160&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/58703865/169859305-7127fcf4-12fe-4f52-a605-c8b4c77917df.png&#34; width=&#34;160&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/58703865/169859328-1abddd5a-d88c-4877-9078-9e12e311c465.png&#34; width=&#34;160&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/58703865/169859351-5608acc9-b99e-41c4-8048-6d036e8c189b.png&#34; width=&#34;160&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://previewed.app/template/00CBF3F6&#34;&gt;screenshots made by previewed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mhss1/MyBrain/releases/latest&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/70bffd8873ab81e1bb0bccc44e488c3a989e3bd5/68747470733a2f2f692e6962622e636f2f71306d6463345a2f6765742d69742d6f6e2d6769746875622e706e67&#34; alt=&#34;Get it on GitHub&#34; height=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apt.izzysoft.de/fdroid/index/apk/com.mhss.app.mybrain&#34;&gt;&lt;img src=&#34;https://gitlab.com/IzzyOnDroid/repo/-/raw/master/assets/IzzyOnDroid.png&#34; alt=&#34;Get it on IzzyOnDroid&#34; height=&#34;80&#34;&gt;&lt;/a&gt; Soon on F-Droid&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Private with no data collection and no internet permission at all.&lt;/li&gt; &#xA; &lt;li&gt;Create tasks with priority, sub-tasks, description and due date and reminders.&lt;/li&gt; &#xA; &lt;li&gt;Create Notes that supports markdown which enables you to use Headers, lists, links etc..&lt;/li&gt; &#xA; &lt;li&gt;Record your mood daily and view your mood summary with beautiful graphs.&lt;/li&gt; &#xA; &lt;li&gt;Save bookmarks for later by using the share menu from any other app.&lt;/li&gt; &#xA; &lt;li&gt;View your calendar events in a modern view and also with a beautiful home screen widget.&lt;/li&gt; &#xA; &lt;li&gt;Dashboard screen to see your tasks, calendar events, and more to see your day at a glance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Technologies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;100% Kotlin.&lt;/li&gt; &#xA; &lt;li&gt;Made Using Jetpack Compose.&lt;/li&gt; &#xA; &lt;li&gt;Widgets made with Compose Glance.&lt;/li&gt; &#xA; &lt;li&gt;Following Clean Architecture approach.&lt;/li&gt; &#xA; &lt;li&gt;Following MVVM Architectural Design Pattern.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Used in the app :&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Room DB&lt;/li&gt; &#xA; &lt;li&gt;Hilt&lt;/li&gt; &#xA; &lt;li&gt;Preferences DataStore&lt;/li&gt; &#xA; &lt;li&gt;Kotlin coroutines&lt;/li&gt; &#xA; &lt;li&gt;Kotlin Flows&lt;/li&gt; &#xA; &lt;li&gt;Alarm Manager&lt;/li&gt; &#xA; &lt;li&gt;Jetpack Compose&lt;/li&gt; &#xA; &lt;li&gt;Compose Glance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To get started, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/mhss1/MyBrain/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Icons Attribution &lt;a href=&#34;https://www.flaticon.com/free-icons/paper&#34; title=&#34;paper icons&#34;&gt;Paper icons created by Freepik - Flaticon&lt;/a&gt; &lt;a href=&#34;https://www.flaticon.com/free-icons/list&#34; title=&#34;list icons&#34;&gt;List icons created by Freepik - Flaticon&lt;/a&gt; &lt;a href=&#34;https://www.flaticon.com/free-icons/calendar&#34; title=&#34;calendar icons&#34;&gt;Calendar icons created by Freepik - Flaticon&lt;/a&gt; &lt;a href=&#34;https://www.flaticon.com/free-icons/bookmark&#34; title=&#34;bookmark icons&#34;&gt;Bookmark icons created by Freepik - Flaticon&lt;/a&gt; &lt;a href=&#34;https://www.flaticon.com/free-icons/book&#34; title=&#34;book icons&#34;&gt;Book icons created by Freepik - Flaticon&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SimpleMobileTools/Simple-Gallery</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/SimpleMobileTools/Simple-Gallery</id>
    <link href="https://github.com/SimpleMobileTools/Simple-Gallery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Browse your memories without any interruptions with this photo and video gallery&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Simple Gallery&lt;/h1&gt; &#xA;&lt;img alt=&#34;Logo&#34; src=&#34;https://raw.githubusercontent.com/SimpleMobileTools/Simple-Gallery/master/fastlane/metadata/android/en-US/images/icon.png&#34; width=&#34;120&#34;&gt; &#xA;&lt;p&gt;Simple Gallery Pro is a highly customizable lightweight gallery loved by millions of people for its great user experience. Organize and edit your photos, recover deleted files with the recycle bin, protect &amp;amp; hide files and easily view a huge variety of different photo and video formats including RAW, SVG, GIF, panoramic and much more.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;SIMPLE GALLERY PRO ‚Äì FEATURES&lt;/h2&gt; &#xA;&lt;p&gt;‚Ä¢ A beautiful modern gallery with no ads or popups&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Photo editor ‚Äì crop, rotate, resize, draw, filters &amp;amp; more&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ No internet access needed, giving you more privacy, security and stability&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ No unnecessary permissions required&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Quickly search images, videos &amp;amp; other files&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Open and view many different photo and video types (RAW, SVG, panoramic, GIF etc)&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ A variety of intuitive gestures to easily edit, rotate &amp;amp; organize files&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Lots of ways to filter, group and sort files&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Customize the appearance of Simple Gallery Pro&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Available in over 30 languages&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Mark files as favorites for quick access&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Protect your photos &amp;amp; videos with a pattern, pin or fingerprint&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Use pin, pattern &amp;amp; fingerprint to protect the app launch or specific functions too&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Recover deleted photos &amp;amp; videos from the recycle bin&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Toggle visibility of files to hide photos &amp;amp; videos&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Create a customizable slideshow of your files with many options&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ View detailed information of your files (resolution, EXIF values etc)&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Zoom high quality photos, videos and GIFs easily with gestures&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Easily force portrait or landscape orientation for easy video viewing&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Quick file share to social media, email or anywhere else&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Print images or set them as wallpaper with a few clicks&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Create home screen shortcuts or widgets to easily access any file or folder&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Show the image location on a map, if available&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Obvious presence of standard operations like rename, copy/move, un/hide, delete&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Rewind videos with horizontal gestures&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Change photo and video brightness, or volume with vertical gestures&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Reorder, lock folders or change cover thumbnails anytime&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¢ Set any image as wallpaper without hassle&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¶ and much much more!&lt;/p&gt; &#xA;&lt;p&gt;ADVANCED PHOTO EDITOR Simple Gallery Pro makes it easy to edit your pictures on the fly. Crop, flip, rotate and resize your pictures. If you‚Äôre feeling a little more creative you can add filters and draw on your pictures!&lt;/p&gt; &#xA;&lt;p&gt;SUPPORT FOR MANY FILE TYPES Simple Gallery Pro supports a huge range of different file types including JPEG, PNG, MP4, MKV, RAW, SVG, GIF Panoramic photos, Panoramic videos and many more.&lt;/p&gt; &#xA;&lt;p&gt;HIGHLY CUSTOMIZABLE FILE MANAGER From the UI to the function buttons on the bottom toolbar, Simple Gallery Pro is highly customizable and works the way you want it to. No other gallery has this kind of flexibility! Thanks to being open source, we‚Äôre also available in over 30 languages!&lt;/p&gt; &#xA;&lt;p&gt;RECOVER DELETED PHOTOS &amp;amp; VIDEOS Accidentally deleted a precious photo or video? Don‚Äôt worry! Simple Gallery Pro features a handy recycle bin where you can recover deleted photos &amp;amp; videos easily.&lt;/p&gt; &#xA;&lt;p&gt;PROTECT &amp;amp; HIDE PHOTOS, VIDEOS &amp;amp; FILES Using pin, pattern or your device‚Äôs fingerprint scanner you can protect and hide photos, videos &amp;amp; entire albums. You can protect the app itself or place locks on specific functions of the app. For example, you can‚Äôt delete a file without a fingerprint scan, helping to protect your files from accidental deletion.&lt;/p&gt; &#xA;&lt;p&gt;Check out the full suite of Simple Tools here: &lt;a href=&#34;https://www.simplemobiletools.com&#34;&gt;https://www.simplemobiletools.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Standalone website of Simple Gallery Pro: &lt;a href=&#34;https://www.simplemobiletools.com/gallery&#34;&gt;https://www.simplemobiletools.com/gallery&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Facebook: &lt;a href=&#34;https://www.facebook.com/simplemobiletools&#34;&gt;https://www.facebook.com/simplemobiletools&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Reddit: &lt;a href=&#34;https://www.reddit.com/r/SimpleMobileTools&#34;&gt;https://www.reddit.com/r/SimpleMobileTools&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget that if you uninstall any paid app within 2 hours, you will automatically be refunded. If you want a refund anytime later, just contact us at &lt;a href=&#34;mailto:hello@simplemobiletools.com&#34;&gt;hello@simplemobiletools.com&lt;/a&gt; and you will get it. That makes it easy to try it out :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.simplemobiletools.gallery.pro&#34;&gt;&lt;img src=&#34;https://simplemobiletools.com/images/button-google-play.svg?sanitize=true&#34; alt=&#34;Get it on Google Play&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f-droid.org/packages/com.simplemobiletools.gallery.pro&#34;&gt;&lt;img src=&#34;https://simplemobiletools.com/images/button-f-droid.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;45&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div style=&#34;display:flex;&#34;&gt; &#xA; &lt;img alt=&#34;App image&#34; src=&#34;https://raw.githubusercontent.com/SimpleMobileTools/Simple-Gallery/master/fastlane/metadata/android/en-US/images/phoneScreenshots/english/1.jpg&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img alt=&#34;App image&#34; src=&#34;https://raw.githubusercontent.com/SimpleMobileTools/Simple-Gallery/master/fastlane/metadata/android/en-US/images/phoneScreenshots/english/2.jpg&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img alt=&#34;App image&#34; src=&#34;https://raw.githubusercontent.com/SimpleMobileTools/Simple-Gallery/master/fastlane/metadata/android/en-US/images/phoneScreenshots/english/3.jpg&#34; width=&#34;30%&#34;&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>gedoor/legado</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/gedoor/legado</id>
    <link href="https://github.com/gedoor/legado" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ÈòÖËØª3.0, ÈòÖËØªÊòØ‰∏ÄÊ¨æÂèØ‰ª•Ëá™ÂÆö‰πâÊù•Ê∫êÈòÖËØªÁΩëÁªúÂÜÖÂÆπÁöÑÂ∑•ÂÖ∑Ôºå‰∏∫ÂπøÂ§ßÁΩëÁªúÊñáÂ≠¶Áà±Â•ΩËÄÖÊèê‰æõ‰∏ÄÁßçÊñπ‰æø„ÄÅÂø´Êç∑ËàíÈÄÇÁöÑËØïËØª‰ΩìÈ™å„ÄÇ&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=io.legado.play.release&#34;&gt;&lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/icon_android.png&#34; alt=&#34;icon_android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://data.newrank.cn/m/s.html?s=NykyOzI9MS5LNQ%3D%3D&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ÂæÆ‰ø°ÂÖ≥Ê≥®‚ÄúÂºÄÊ∫êÈòÖËØª‚ÄùÂÖ¨‰ºóÂè∑-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;125&#34; height=&#34;125&#34; src=&#34;https://github.com/gedoor/legado/raw/master/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png&#34; alt=&#34;legado&#34;&gt; &#xA; &lt;p&gt;Legado / ÂºÄÊ∫êÈòÖËØª &lt;br&gt; &lt;a href=&#34;https://gedoor.github.io&#34; target=&#34;_blank&#34;&gt;gedoor.github.io&lt;/a&gt; / &lt;a href=&#34;https://www.legado.top/&#34; target=&#34;_blank&#34;&gt;legado.top&lt;/a&gt; &lt;br&gt; Legado is a free and open source novel reader for Android.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#contents&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Contents:-696969.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Function-%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Function-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Download-%E4%B8%8B%E8%BD%BD-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Download-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Community-%E4%BA%A4%E6%B5%81%E7%A4%BE%E5%8C%BA-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Community-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#API-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-API-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Other-%E5%85%B6%E4%BB%96-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Other-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Grateful-%E6%84%9F%E8%B0%A2-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Grateful-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Interface-%E7%95%8C%E9%9D%A2-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Interface-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Êñ∞Áî®Êà∑Ôºü&lt;/p&gt; &#xA; &lt;p&gt;ËΩØ‰ª∂‰∏çÊèê‰æõÂÜÖÂÆπÔºåÈúÄË¶ÅÊÇ®Ëá™Â∑±ÊâãÂä®Ê∑ªÂä†Ôºå‰æãÂ¶ÇÂØºÂÖ•‰π¶Ê∫êÁ≠â„ÄÇ ÁúãÁúã &lt;a href=&#34;https://www.yuque.com/legado/wiki&#34;&gt;ÂÆòÊñπÂ∏ÆÂä©ÊñáÊ°£&lt;/a&gt;Ôºå‰πüËÆ∏ÈáåÈù¢Â∞±Êúâ‰Ω†Ë¶ÅÁöÑÁ≠îÊ°à„ÄÇ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Function-‰∏ªË¶ÅÂäüËÉΩ &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Function-%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Function-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;English&lt;/summary&gt; 1. Online reading from a variety of sources.&#xA; &lt;br&gt; 2. Local reading of downloaded content.&#xA; &lt;br&gt; 3. A configurable reader with multiple viewers, reading directions and other settings. &#xA; &lt;br&gt; 4. Categories to organize your library.&#xA; &lt;br&gt; 5. Light and dark themes.&#xA; &lt;br&gt; 6. Schedule updating your library for new chapters.&#xA; &lt;br&gt; 7. read offline or to your desired cloud service &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;‰∏≠Êñá&lt;/summary&gt; 1.Ëá™ÂÆö‰πâ‰π¶Ê∫êÔºåËá™Â∑±ËÆæÁΩÆËßÑÂàôÔºåÊäìÂèñÁΩëÈ°µÊï∞ÊçÆÔºåËßÑÂàôÁÆÄÂçïÊòìÊáÇÔºåËΩØ‰ª∂ÂÜÖÊúâËßÑÂàôËØ¥Êòé„ÄÇ&#xA; &lt;br&gt; 2.ÂàóË°®‰π¶Êû∂ÔºåÁΩëÊ†º‰π¶Êû∂Ëá™Áî±ÂàáÊç¢„ÄÇ&#xA; &lt;br&gt; 3.‰π¶Ê∫êËßÑÂàôÊîØÊåÅÊêúÁ¥¢ÂèäÂèëÁé∞ÔºåÊâÄÊúâÊâæ‰π¶Áúã‰π¶ÂäüËÉΩÂÖ®ÈÉ®Ëá™ÂÆö‰πâÔºåÊâæ‰π¶Êõ¥Êñπ‰æø„ÄÇ&#xA; &lt;br&gt; 4.ËÆ¢ÈòÖÂÜÖÂÆπ,ÂèØ‰ª•ËÆ¢ÈòÖÊÉ≥ÁúãÁöÑ‰ªª‰ΩïÂÜÖÂÆπ,Áúã‰Ω†ÊÉ≥Áúã&#xA; &lt;br&gt; 5.ÊîØÊåÅÊõøÊç¢ÂáÄÂåñÔºåÂéªÈô§ÂπøÂëäÊõøÊç¢ÂÜÖÂÆπÂæàÊñπ‰æø„ÄÇ&#xA; &lt;br&gt; 6.ÊîØÊåÅÊú¨Âú∞TXT„ÄÅEPUBÈòÖËØªÔºåÊâãÂä®ÊµèËßàÔºåÊô∫ËÉΩÊâ´Êèè„ÄÇ&#xA; &lt;br&gt; 7.ÊîØÊåÅÈ´òÂ∫¶Ëá™ÂÆö‰πâÈòÖËØªÁïåÈù¢ÔºåÂàáÊç¢Â≠ó‰Ωì„ÄÅÈ¢úËâ≤„ÄÅËÉåÊôØ„ÄÅË°åË∑ù„ÄÅÊÆµË∑ù„ÄÅÂä†Á≤ó„ÄÅÁÆÄÁπÅËΩ¨Êç¢Á≠â„ÄÇ&#xA; &lt;br&gt; 8.ÊîØÊåÅÂ§öÁßçÁøªÈ°µÊ®°ÂºèÔºåË¶ÜÁõñ„ÄÅ‰ªøÁúü„ÄÅÊªëÂä®„ÄÅÊªöÂä®Á≠â„ÄÇ&#xA; &lt;br&gt; 9.ËΩØ‰ª∂ÂºÄÊ∫êÔºåÊåÅÁª≠‰ºòÂåñÔºåÊó†ÂπøÂëä„ÄÇ &#xA;&lt;/details&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Download-‰∏ãËΩΩ &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Download-%E4%B8%8B%E8%BD%BD-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Download-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h4&gt;Android-ÂÆâÂçì&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gedoor/legado/releases/latest&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=io.legado.play.release&#34;&gt;Google play - $1.99&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.coolapk.com/apk/io.legado.app.release&#34;&gt;Coolapk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cdn.jsdelivr.net/gh/gedoor/release@release/&#34;&gt;Jsdelivr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kunfei.lanzoui.com/b0f810h4b&#34;&gt;#Beta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apt.izzysoft.de/fdroid/index/apk/io.legado.app.release&#34;&gt;IzzyOnDroid F-Droid Repository&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;IOS-ËãπÊûú&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÂáÜÂ§á‰∏≠(No release) - &lt;a href=&#34;https://github.com/gedoor/YueDuFlutter&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Community-‰∫§ÊµÅÁ§æÂå∫ &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Community-%E4%BA%A4%E6%B5%81%E7%A4%BE%E5%8C%BA-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Community-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h4&gt;Telegram&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/yueduguanfang&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-%E7%BE%A4%E7%BB%84-blue&#34; alt=&#34;Telegram-group&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/legado_channels&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-%E9%A2%91%E9%81%93-blue&#34; alt=&#34;Telegram-channel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Discord&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/VtUfRyzRXn&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/560731361414086666?color=%235865f2&amp;amp;label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Other&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.yuque.com/legado/wiki/community&#34;&gt;https://www.yuque.com/legado/wiki/community&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;API &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#API-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-API-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÈòÖËØª3.0 Êèê‰æõ‰∫Ü2ÁßçÊñπÂºèÁöÑAPIÔºö&lt;code&gt;WebÊñπÂºè&lt;/code&gt;Âíå&lt;code&gt;Content ProviderÊñπÂºè&lt;/code&gt;„ÄÇÊÇ®ÂèØ‰ª•Âú®&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/api.md&#34;&gt;ËøôÈáå&lt;/a&gt;Ê†πÊçÆÈúÄË¶ÅËá™Ë°åË∞ÉÁî®„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ÂèØÈÄöËøáurlÂî§Ëµ∑ÈòÖËØªËøõË°å‰∏ÄÈîÆÂØºÂÖ•,urlÊ†ºÂºè: legado://import/{path}?src={url}&lt;/li&gt; &#xA; &lt;li&gt;pathÁ±ªÂûã: bookSource,rssSource,replaceRule,textTocRule,httpTTS,theme,readConfig&lt;/li&gt; &#xA; &lt;li&gt;pathÁ±ªÂûãËß£Èáä: ‰π¶Ê∫ê,ËÆ¢ÈòÖÊ∫ê,ÊõøÊç¢ËßÑÂàô,Êú¨Âú∞txtÂ∞èËØ¥ÁõÆÂΩïËßÑÂàô,Âú®Á∫øÊúóËØªÂºïÊìé,‰∏ªÈ¢ò,ÈòÖËØªÊéíÁâà&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Other-ÂÖ∂‰ªñ &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Other-%E5%85%B6%E4%BB%96-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Other-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h5&gt;ÂÖçË¥£Â£∞Êòé&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gedoor.github.io/about.html&#34;&gt;https://gedoor.github.io/about.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;ÈòÖËØª3.0&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alanskycn.gitee.io/teachme&#34;&gt;‰π¶Ê∫êËßÑÂàô&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/app/src/main/assets/updateLog.md&#34;&gt;Êõ¥Êñ∞Êó•Âøó&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/app/src/main/assets/help/appHelp.md&#34;&gt;Â∏ÆÂä©ÊñáÊ°£&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gedoor/legado_web_bookshelf&#34;&gt;webÁ´Ø&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Grateful-ÊÑüË∞¢ &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Grateful-%E6%84%9F%E8%B0%A2-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Grateful-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;org.jsoup:jsoup&lt;/li&gt; &#xA;  &lt;li&gt;cn.wanghaomiao:JsoupXpath&lt;/li&gt; &#xA;  &lt;li&gt;com.jayway.jsonpath:json-path&lt;/li&gt; &#xA;  &lt;li&gt;com.github.gedoor:rhino-android&lt;/li&gt; &#xA;  &lt;li&gt;com.squareup.okhttp3:okhttp&lt;/li&gt; &#xA;  &lt;li&gt;com.github.bumptech.glide:glide&lt;/li&gt; &#xA;  &lt;li&gt;org.nanohttpd:nanohttpd&lt;/li&gt; &#xA;  &lt;li&gt;org.nanohttpd:nanohttpd-websocket&lt;/li&gt; &#xA;  &lt;li&gt;cn.bingoogolapple:bga-qrcode-zxing&lt;/li&gt; &#xA;  &lt;li&gt;com.jaredrummler:colorpicker&lt;/li&gt; &#xA;  &lt;li&gt;org.apache.commons:commons-text&lt;/li&gt; &#xA;  &lt;li&gt;io.noties.markwon:core&lt;/li&gt; &#xA;  &lt;li&gt;io.noties.markwon:image-glide&lt;/li&gt; &#xA;  &lt;li&gt;com.hankcs:hanlp&lt;/li&gt; &#xA;  &lt;li&gt;com.positiondev.epublib:epublib-core&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Interface-ÁïåÈù¢ &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Interface-%E7%95%8C%E9%9D%A2-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Interface-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/%E9%98%85%E8%AF%BB%E7%AE%80%E4%BB%8B1.jpg&#34; width=&#34;270&#34;&gt;&lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/%E9%98%85%E8%AF%BB%E7%AE%80%E4%BB%8B2.jpg&#34; width=&#34;270&#34;&gt;&lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/%E9%98%85%E8%AF%BB%E7%AE%80%E4%BB%8B3.jpg&#34; width=&#34;270&#34;&gt; &lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/%E9%98%85%E8%AF%BB%E7%AE%80%E4%BB%8B4.jpg&#34; width=&#34;270&#34;&gt;&lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/%E9%98%85%E8%AF%BB%E7%AE%80%E4%BB%8B5.jpg&#34; width=&#34;270&#34;&gt;&lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/%E9%98%85%E8%AF%BB%E7%AE%80%E4%BB%8B6.jpg&#34; width=&#34;270&#34;&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>android/architecture-samples</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/android/architecture-samples</id>
    <link href="https://github.com/android/architecture-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of samples to discuss and showcase different architectural tools and patterns for Android apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Android Architecture Blueprints&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/googlesamples/android-architecture/wiki/images/aab-logov2.png&#34; alt=&#34;Illustration by Virginia Poltrack&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Android Architecture Blueprints is a project to showcase different architectural approaches to developing Android apps. In its different branches you&#39;ll find the same app (a TODO app) implemented with small differences.&lt;/p&gt; &#xA;&lt;p&gt;In this branch you&#39;ll find:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User Interface built with &lt;strong&gt;&lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;A single-activity architecture, using &lt;strong&gt;&lt;a href=&#34;https://developer.android.com/jetpack/compose/navigation&#34;&gt;Navigation Compose&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A presentation layer that contains a Compose screen (View) and a &lt;strong&gt;ViewModel&lt;/strong&gt; per screen (or feature).&lt;/li&gt; &#xA; &lt;li&gt;Reactive UIs using &lt;strong&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/livedata&#34;&gt;LiveData&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://kotlinlang.org/docs/coroutines-overview.html&#34;&gt;coroutines&lt;/a&gt;&lt;/strong&gt; for asynchronous operations.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;data layer&lt;/strong&gt; with a repository and two data sources (local using Room and a fake remote).&lt;/li&gt; &#xA; &lt;li&gt;Two &lt;strong&gt;product flavors&lt;/strong&gt;, &lt;code&gt;mock&lt;/code&gt; and &lt;code&gt;prod&lt;/code&gt;, &lt;a href=&#34;https://android-developers.googleblog.com/2015/12/leveraging-product-flavors-in-android.html&#34;&gt;to ease development and testing&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A collection of unit, integration and e2e &lt;strong&gt;tests&lt;/strong&gt;, including &#34;shared&#34; tests that can be run on emulator/device or Robolectric.&lt;/li&gt; &#xA; &lt;li&gt;A simple service locator for inversion of control.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Variations&lt;/h2&gt; &#xA;&lt;p&gt;This project hosts each sample app in separate repository branches. For more information, see the &lt;code&gt;README.md&lt;/code&gt; file in each branch.&lt;/p&gt; &#xA;&lt;h3&gt;Stable samples - Kotlin&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sample&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture/tree/main&#34;&gt;main&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This branch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture/tree/hilt&#34;&gt;hilt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A simple Hilt setup that removes the two flavors and service locator (not using Compose yet)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture/tree/usecases&#34;&gt;usecases&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adds a new domain layer that uses UseCases for business logic (not using Compose yet)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture/tree/views&#34;&gt;views&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Uses Views instead of Jetpack Compose to render UI elements on the screen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Why a to-do app?&lt;/h2&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://github.com/googlesamples/android-architecture/wiki/images/todoapp.gif&#34; alt=&#34;A demo illustraating the UI of the app&#34; width=&#34;288&#34; height=&#34;512&#34; style=&#34;display: inline; float: right&#34;&gt; &#xA;&lt;p&gt;The app in this project aims to be simple enough that you can understand it quickly, but complex enough to showcase difficult design decisions and testing scenarios. For more information, see the &lt;a href=&#34;https://github.com/googlesamples/android-architecture/wiki/To-do-app-specification&#34;&gt;app&#39;s specification&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is it not?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A UI/Material Design sample. The interface of the app is deliberately kept simple to focus on architecture. Check out the &lt;a href=&#34;https://github.com/android/compose-samples&#34;&gt;Compose Samples&lt;/a&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;A complete Jetpack sample covering all libraries. Check out &lt;a href=&#34;https://github.com/googlesamples/android-sunflower&#34;&gt;Android Sunflower&lt;/a&gt; or the advanced &lt;a href=&#34;https://github.com/googlesamples/android-architecture-components/tree/master/GithubBrowserSample&#34;&gt;GitHub Browser Sample&lt;/a&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;A real production app with network access, user authentication, etc. Check out the &lt;a href=&#34;https://github.com/android/nowinandroid&#34;&gt;Now in Android app&lt;/a&gt; instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who is it for?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intermediate developers and beginners looking for a way to structure their app in a testable and maintainable way.&lt;/li&gt; &#xA; &lt;li&gt;Advanced developers looking for quick reference.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Opening a sample in Android Studio&lt;/h2&gt; &#xA;&lt;p&gt;To open one of the samples in Android Studio, begin by checking out one of the sample branches, and then open the root directory in Android Studio. The following series of steps illustrate how to open the &lt;a href=&#34;https://raw.githubusercontent.com/android/architecture-samples/main/tree/usecases/&#34;&gt;usecases&lt;/a&gt; sample.&lt;/p&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:android/architecture-samples.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This step checks out the master branch. If you want to change to a different sample:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout usecases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To review a different sample, replace &lt;code&gt;usecases&lt;/code&gt; with the name of sample you want to check out.&lt;/p&gt; &#xA;&lt;p&gt;Finally open the &lt;code&gt;architecture-samples/&lt;/code&gt; directory in Android Studio.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2022 Google, Inc.&#xA;&#xA;Licensed to the Apache Software Foundation (ASF) under one or more contributor&#xA;license agreements. See the NOTICE file distributed with this work for&#xA;additional information regarding copyright ownership. The ASF licenses this&#xA;file to you under the Apache License, Version 2.0 (the &#34;License&#34;); you may not&#xA;use this file except in compliance with the License. You may obtain a copy of&#xA;the License at&#xA;&#xA;http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT&#xA;WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the&#xA;License for the specific language governing permissions and limitations under&#xA;the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>square/moshi</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/square/moshi</id>
    <link href="https://github.com/square/moshi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern JSON library for Kotlin and Java.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Moshi&lt;/h1&gt; &#xA;&lt;p&gt;Moshi is a modern JSON library for Android, Java and Kotlin. It makes it easy to parse JSON into Java and Kotlin classes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The Kotlin examples of this README assume use of either Kotlin code gen or &lt;code&gt;KotlinJsonAdapterFactory&lt;/code&gt; for reflection. Plain Java-based reflection is unsupported on Kotlin classes.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String json = ...;&#xA;&#xA;Moshi moshi = new Moshi.Builder().build();&#xA;JsonAdapter&amp;lt;BlackjackHand&amp;gt; jsonAdapter = moshi.adapter(BlackjackHand.class);&#xA;&#xA;BlackjackHand blackjackHand = jsonAdapter.fromJson(json);&#xA;System.out.println(blackjackHand);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val json: String = ...&#xA;&#xA;val moshi: Moshi = Moshi.Builder().build()&#xA;val jsonAdapter: JsonAdapter&amp;lt;BlackjackHand&amp;gt; = moshi.adapter&amp;lt;BlackjackHand&amp;gt;()&#xA;&#xA;val blackjackHand = jsonAdapter.fromJson(json)&#xA;println(blackjackHand)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;And it can just as easily serialize Java or Kotlin objects as JSON:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;BlackjackHand blackjackHand = new BlackjackHand(&#xA;    new Card(&#39;6&#39;, SPADES),&#xA;    Arrays.asList(new Card(&#39;4&#39;, CLUBS), new Card(&#39;A&#39;, HEARTS)));&#xA;&#xA;Moshi moshi = new Moshi.Builder().build();&#xA;JsonAdapter&amp;lt;BlackjackHand&amp;gt; jsonAdapter = moshi.adapter(BlackjackHand.class);&#xA;&#xA;String json = jsonAdapter.toJson(blackjackHand);&#xA;System.out.println(json);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val blackjackHand = BlackjackHand(&#xA;    Card(&#39;6&#39;, SPADES),&#xA;    listOf(Card(&#39;4&#39;, CLUBS), Card(&#39;A&#39;, HEARTS))&#xA;  )&#xA;&#xA;val moshi: Moshi = Moshi.Builder().build()&#xA;val jsonAdapter: JsonAdapter&amp;lt;BlackjackHand&amp;gt; = moshi.adapter&amp;lt;BlackjackHand&amp;gt;()&#xA;&#xA;val json: String = jsonAdapter.toJson(blackjackHand)&#xA;println(json)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Built-in Type Adapters&lt;/h3&gt; &#xA;&lt;p&gt;Moshi has built-in support for reading and writing Java‚Äôs core data types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Primitives (int, float, char...) and their boxed counterparts (Integer, Float, Character...).&lt;/li&gt; &#xA; &lt;li&gt;Arrays, Collections, Lists, Sets, and Maps&lt;/li&gt; &#xA; &lt;li&gt;Strings&lt;/li&gt; &#xA; &lt;li&gt;Enums&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It supports your model classes by writing them out field-by-field. In the example above Moshi uses these classes:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class BlackjackHand {&#xA;  public final Card hidden_card;&#xA;  public final List&amp;lt;Card&amp;gt; visible_cards;&#xA;  ...&#xA;}&#xA;&#xA;class Card {&#xA;  public final char rank;&#xA;  public final Suit suit;&#xA;  ...&#xA;}&#xA;&#xA;enum Suit {&#xA;  CLUBS, DIAMONDS, HEARTS, SPADES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class BlackjackHand(&#xA;  val hidden_card: Card,&#xA;  val visible_cards: List&amp;lt;Card&amp;gt;,&#xA;  ...&#xA;)&#xA;&#xA;class Card(&#xA;  val rank: Char,&#xA;  val suit: Suit&#xA;  ...&#xA;)&#xA;&#xA;enum class Suit {&#xA;  CLUBS, DIAMONDS, HEARTS, SPADES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;to read and write this JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;hidden_card&#34;: {&#xA;    &#34;rank&#34;: &#34;6&#34;,&#xA;    &#34;suit&#34;: &#34;SPADES&#34;&#xA;  },&#xA;  &#34;visible_cards&#34;: [&#xA;    {&#xA;      &#34;rank&#34;: &#34;4&#34;,&#xA;      &#34;suit&#34;: &#34;CLUBS&#34;&#xA;    },&#xA;    {&#xA;      &#34;rank&#34;: &#34;A&#34;,&#xA;      &#34;suit&#34;: &#34;HEARTS&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://square.github.io/moshi/1.x/moshi/&#34;&gt;Javadoc&lt;/a&gt; catalogs the complete Moshi API, which we explore below.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Type Adapters&lt;/h3&gt; &#xA;&lt;p&gt;With Moshi, it‚Äôs particularly easy to customize how values are converted to and from JSON. A type adapter is any class that has methods annotated &lt;code&gt;@ToJson&lt;/code&gt; and &lt;code&gt;@FromJson&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, Moshi‚Äôs default encoding of a playing card is verbose: the JSON defines the rank and suit in separate fields: &lt;code&gt;{&#34;rank&#34;:&#34;A&#34;,&#34;suit&#34;:&#34;HEARTS&#34;}&lt;/code&gt;. With a type adapter, we can change the encoding to something more compact: &lt;code&gt;&#34;4H&#34;&lt;/code&gt; for the four of hearts or &lt;code&gt;&#34;JD&#34;&lt;/code&gt; for the jack of diamonds:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class CardAdapter {&#xA;  @ToJson String toJson(Card card) {&#xA;    return card.rank + card.suit.name().substring(0, 1);&#xA;  }&#xA;&#xA;  @FromJson Card fromJson(String card) {&#xA;    if (card.length() != 2) throw new JsonDataException(&#34;Unknown card: &#34; + card);&#xA;&#xA;    char rank = card.charAt(0);&#xA;    switch (card.charAt(1)) {&#xA;      case &#39;C&#39;: return new Card(rank, Suit.CLUBS);&#xA;      case &#39;D&#39;: return new Card(rank, Suit.DIAMONDS);&#xA;      case &#39;H&#39;: return new Card(rank, Suit.HEARTS);&#xA;      case &#39;S&#39;: return new Card(rank, Suit.SPADES);&#xA;      default: throw new JsonDataException(&#34;unknown suit: &#34; + card);&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class CardAdapter {&#xA;  @ToJson fun toJson(card: Card): String {&#xA;    return card.rank + card.suit.name.substring(0, 1)&#xA;  }&#xA;&#xA;  @FromJson fun fromJson(card: String): Card {&#xA;    if (card.length != 2) throw JsonDataException(&#34;Unknown card: $card&#34;)&#xA;&#xA;    val rank = card[0]&#xA;    return when (card[1]) {&#xA;      &#39;C&#39; -&amp;gt; Card(rank, Suit.CLUBS)&#xA;      &#39;D&#39; -&amp;gt; Card(rank, Suit.DIAMONDS)&#xA;      &#39;H&#39; -&amp;gt; Card(rank, Suit.HEARTS)&#xA;      &#39;S&#39; -&amp;gt; Card(rank, Suit.SPADES)&#xA;      else -&amp;gt; throw JsonDataException(&#34;unknown suit: $card&#34;)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Register the type adapter with the &lt;code&gt;Moshi.Builder&lt;/code&gt; and we‚Äôre good to go.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Moshi moshi = new Moshi.Builder()&#xA;    .add(new CardAdapter())&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val moshi = Moshi.Builder()&#xA;    .add(CardAdapter())&#xA;    .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Voil√†:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;hidden_card&#34;: &#34;6S&#34;,&#xA;  &#34;visible_cards&#34;: [&#xA;    &#34;4C&#34;,&#xA;    &#34;AH&#34;&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Another example&lt;/h4&gt; &#xA;&lt;p&gt;Note that the method annotated with &lt;code&gt;@FromJson&lt;/code&gt; does not need to take a String as an argument. Rather it can take input of any type and Moshi will first parse the JSON to an object of that type and then use the &lt;code&gt;@FromJson&lt;/code&gt; method to produce the desired final value. Conversely, the method annotated with &lt;code&gt;@ToJson&lt;/code&gt; does not have to produce a String.&lt;/p&gt; &#xA;&lt;p&gt;Assume, for example, that we have to parse a JSON in which the date and time of an event are represented as two separate strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;title&#34;: &#34;Blackjack tournament&#34;,&#xA;  &#34;begin_date&#34;: &#34;20151010&#34;,&#xA;  &#34;begin_time&#34;: &#34;17:04&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We would like to combine these two fields into one string to facilitate the date parsing at a later point. Also, we would like to have all variable names in CamelCase. Therefore, the &lt;code&gt;Event&lt;/code&gt; class we want Moshi to produce like this:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Event {&#xA;  String title;&#xA;  String beginDateAndTime;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Event(&#xA;  val title: String,&#xA;  val beginDateAndTime: String&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Instead of manually parsing the JSON line per line (which we could also do) we can have Moshi do the transformation automatically. We simply define another class &lt;code&gt;EventJson&lt;/code&gt; that directly corresponds to the JSON structure:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class EventJson {&#xA;  String title;&#xA;  String begin_date;&#xA;  String begin_time;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class EventJson(&#xA;  val title: String,&#xA;  val begin_date: String,&#xA;  val begin_time: String&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;And another class with the appropriate &lt;code&gt;@FromJson&lt;/code&gt; and &lt;code&gt;@ToJson&lt;/code&gt; methods that are telling Moshi how to convert an &lt;code&gt;EventJson&lt;/code&gt; to an &lt;code&gt;Event&lt;/code&gt; and back. Now, whenever we are asking Moshi to parse a JSON to an &lt;code&gt;Event&lt;/code&gt; it will first parse it to an &lt;code&gt;EventJson&lt;/code&gt; as an intermediate step. Conversely, to serialize an &lt;code&gt;Event&lt;/code&gt; Moshi will first create an &lt;code&gt;EventJson&lt;/code&gt; object and then serialize that object as usual.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class EventJsonAdapter {&#xA;  @FromJson Event eventFromJson(EventJson eventJson) {&#xA;    Event event = new Event();&#xA;    event.title = eventJson.title;&#xA;    event.beginDateAndTime = eventJson.begin_date + &#34; &#34; + eventJson.begin_time;&#xA;    return event;&#xA;  }&#xA;&#xA;  @ToJson EventJson eventToJson(Event event) {&#xA;    EventJson json = new EventJson();&#xA;    json.title = event.title;&#xA;    json.begin_date = event.beginDateAndTime.substring(0, 8);&#xA;    json.begin_time = event.beginDateAndTime.substring(9, 14);&#xA;    return json;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class EventJsonAdapter {&#xA;  @FromJson&#xA;  fun eventFromJson(eventJson: EventJson): Event {&#xA;    return Event(&#xA;      title = eventJson.title,&#xA;      beginDateAndTime = &#34;${eventJson.begin_date} ${eventJson.begin_time}&#34;&#xA;    )&#xA;  }&#xA;&#xA;  @ToJson&#xA;  fun eventToJson(event: Event): EventJson {&#xA;    return EventJson(&#xA;      title = event.title,&#xA;      begin_date = event.beginDateAndTime.substring(0, 8),&#xA;      begin_time = event.beginDateAndTime.substring(9, 14),&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Again we register the adapter with Moshi.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Moshi moshi = new Moshi.Builder()&#xA;    .add(new EventJsonAdapter())&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val moshi = Moshi.Builder()&#xA;    .add(EventJsonAdapter())&#xA;    .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;We can now use Moshi to parse the JSON directly to an &lt;code&gt;Event&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JsonAdapter&amp;lt;Event&amp;gt; jsonAdapter = moshi.adapter(Event.class);&#xA;Event event = jsonAdapter.fromJson(json);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val jsonAdapter = moshi.adapter&amp;lt;Event&amp;gt;()&#xA;val event = jsonAdapter.fromJson(json)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Adapter convenience methods&lt;/h3&gt; &#xA;&lt;p&gt;Moshi provides a number of convenience methods for &lt;code&gt;JsonAdapter&lt;/code&gt; objects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nullSafe()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nonNull()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lenient()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;failOnUnknown()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indent()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;serializeNulls()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These factory methods wrap an existing &lt;code&gt;JsonAdapter&lt;/code&gt; into additional functionality. For example, if you have an adapter that doesn&#39;t support nullable values, you can use &lt;code&gt;nullSafe()&lt;/code&gt; to make it null safe:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String dateJson = &#34;\&#34;2018-11-26T11:04:19.342668Z\&#34;&#34;;&#xA;String nullDateJson = &#34;null&#34;;&#xA;&#xA;// Hypothetical IsoDateDapter, doesn&#39;t support null by default&#xA;JsonAdapter&amp;lt;Date&amp;gt; adapter = new IsoDateDapter();&#xA;&#xA;Date date = adapter.fromJson(dateJson);&#xA;System.out.println(date); // Mon Nov 26 12:04:19 CET 2018&#xA;&#xA;Date nullDate = adapter.fromJson(nullDateJson);&#xA;// Exception, com.squareup.moshi.JsonDataException: Expected a string but was NULL at path $&#xA;&#xA;Date nullDate = adapter.nullSafe().fromJson(nullDateJson);&#xA;System.out.println(nullDate); // null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val dateJson = &#34;\&#34;2018-11-26T11:04:19.342668Z\&#34;&#34;&#xA;val nullDateJson = &#34;null&#34;&#xA;&#xA;// Hypothetical IsoDateDapter, doesn&#39;t support null by default&#xA;val adapter: JsonAdapter&amp;lt;Date&amp;gt; = IsoDateDapter()&#xA;&#xA;val date = adapter.fromJson(dateJson)&#xA;println(date) // Mon Nov 26 12:04:19 CET 2018&#xA;&#xA;val nullDate = adapter.fromJson(nullDateJson)&#xA;// Exception, com.squareup.moshi.JsonDataException: Expected a string but was NULL at path $&#xA;&#xA;val nullDate = adapter.nullSafe().fromJson(nullDateJson)&#xA;println(nullDate) // null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;In contrast to &lt;code&gt;nullSafe()&lt;/code&gt; there is &lt;code&gt;nonNull()&lt;/code&gt; to make an adapter refuse null values. Refer to the Moshi JavaDoc for details on the various methods.&lt;/p&gt; &#xA;&lt;h3&gt;Parse JSON Arrays&lt;/h3&gt; &#xA;&lt;p&gt;Say we have a JSON string of this structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  {&#xA;    &#34;rank&#34;: &#34;4&#34;,&#xA;    &#34;suit&#34;: &#34;CLUBS&#34;&#xA;  },&#xA;  {&#xA;    &#34;rank&#34;: &#34;A&#34;,&#xA;    &#34;suit&#34;: &#34;HEARTS&#34;&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can now use Moshi to parse the JSON string into a &lt;code&gt;List&amp;lt;Card&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String cardsJsonResponse = ...;&#xA;Type type = Types.newParameterizedType(List.class, Card.class);&#xA;JsonAdapter&amp;lt;List&amp;lt;Card&amp;gt;&amp;gt; adapter = moshi.adapter(type);&#xA;List&amp;lt;Card&amp;gt; cards = adapter.fromJson(cardsJsonResponse);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val cardsJsonResponse: String = ...&#xA;// We can just use a reified extension!&#xA;val adapter = moshi.adapter&amp;lt;List&amp;lt;Card&amp;gt;&amp;gt;()&#xA;val cards: List&amp;lt;Card&amp;gt; = adapter.fromJson(cardsJsonResponse)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Fails Gracefully&lt;/h3&gt; &#xA;&lt;p&gt;Automatic databinding almost feels like magic. But unlike the black magic that typically accompanies reflection, Moshi is designed to help you out when things go wrong.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;JsonDataException: Expected one of [CLUBS, DIAMONDS, HEARTS, SPADES] but was ANCHOR at path $.visible_cards[2].suit&#xA;  at com.squareup.moshi.JsonAdapters$11.fromJson(JsonAdapters.java:188)&#xA;  at com.squareup.moshi.JsonAdapters$11.fromJson(JsonAdapters.java:180)&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Moshi always throws a standard &lt;code&gt;java.io.IOException&lt;/code&gt; if there is an error reading the JSON document, or if it is malformed. It throws a &lt;code&gt;JsonDataException&lt;/code&gt; if the JSON document is well-formed, but doesn‚Äôt match the expected format.&lt;/p&gt; &#xA;&lt;h3&gt;Built on Okio&lt;/h3&gt; &#xA;&lt;p&gt;Moshi uses &lt;a href=&#34;https://github.com/square/okio/&#34;&gt;Okio&lt;/a&gt; for simple and powerful I/O. It‚Äôs a fine complement to &lt;a href=&#34;https://github.com/square/okhttp/&#34;&gt;OkHttp&lt;/a&gt;, which can share buffer segments for maximum efficiency.&lt;/p&gt; &#xA;&lt;h3&gt;Borrows from Gson&lt;/h3&gt; &#xA;&lt;p&gt;Moshi uses the same streaming and binding mechanisms as &lt;a href=&#34;https://github.com/google/gson/&#34;&gt;Gson&lt;/a&gt;. If you‚Äôre a Gson user you‚Äôll find Moshi works similarly. If you try Moshi and don‚Äôt love it, you can even migrate to Gson without much violence!&lt;/p&gt; &#xA;&lt;p&gt;But the two libraries have a few important differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Moshi has fewer built-in type adapters.&lt;/strong&gt; For example, you need to configure your own date adapter. Most binding libraries will encode whatever you throw at them. Moshi refuses to serialize platform types (&lt;code&gt;java.*&lt;/code&gt;, &lt;code&gt;javax.*&lt;/code&gt;, and &lt;code&gt;android.*&lt;/code&gt;) without a user-provided type adapter. This is intended to prevent you from accidentally locking yourself to a specific JDK or Android release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Moshi is less configurable.&lt;/strong&gt; There‚Äôs no field naming strategy, versioning, instance creators, or long serialization policy. Instead of naming a field &lt;code&gt;visibleCards&lt;/code&gt; and using a policy class to convert that to &lt;code&gt;visible_cards&lt;/code&gt;, Moshi wants you to just name the field &lt;code&gt;visible_cards&lt;/code&gt; as it appears in the JSON.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Moshi doesn‚Äôt have a &lt;code&gt;JsonElement&lt;/code&gt; model.&lt;/strong&gt; Instead it just uses built-in types like &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No HTML-safe escaping.&lt;/strong&gt; Gson encodes &lt;code&gt;=&lt;/code&gt; as &lt;code&gt;\u003d&lt;/code&gt; by default so that it can be safely encoded in HTML without additional escaping. Moshi encodes it naturally (as &lt;code&gt;=&lt;/code&gt;) and assumes that the HTML encoder ‚Äì if there is one ‚Äì will do its job.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom field names with @Json&lt;/h3&gt; &#xA;&lt;p&gt;Moshi works best when your JSON objects and Java or Kotlin classes have the same structure. But when they don&#39;t, Moshi has annotations to customize data binding.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;@Json&lt;/code&gt; to specify how Java fields or Kotlin properties map to JSON names. This is necessary when the JSON name contains spaces or other characters that aren‚Äôt permitted in Java field or Kotlin property names. For example, this JSON has a field name containing a space:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;username&#34;: &#34;jesse&#34;,&#xA;  &#34;lucky number&#34;: 32&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;@Json&lt;/code&gt; its corresponding Java or Kotlin class is easy:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Player {&#xA;  String username;&#xA;  @Json(name = &#34;lucky number&#34;) int luckyNumber;&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Player {&#xA;  val username: String&#xA;  @Json(name = &#34;lucky number&#34;) val luckyNumber: Int&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Because JSON field names are always defined with their Java or Kotlin fields, Moshi makes it easy to find fields when navigating between Java or Koltin and JSON.&lt;/p&gt; &#xA;&lt;h3&gt;Alternate type adapters with @JsonQualifier&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;@JsonQualifier&lt;/code&gt; to customize how a type is encoded for some fields without changing its encoding everywhere. This works similarly to the qualifier annotations in dependency injection tools like Dagger and Guice.&lt;/p&gt; &#xA;&lt;p&gt;Here‚Äôs a JSON message with two integers and a color:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;width&#34;: 1024,&#xA;  &#34;height&#34;: 768,&#xA;  &#34;color&#34;: &#34;#ff0000&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By convention, Android programs also use &lt;code&gt;int&lt;/code&gt; for colors:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Rectangle {&#xA;  int width;&#xA;  int height;&#xA;  int color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Rectangle(&#xA;  val width: Int,&#xA;  val height: Int,&#xA;  val color: Int&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;But if we encoded the above Java or Kotlin class as JSON, the color isn&#39;t encoded properly!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;width&#34;: 1024,&#xA;  &#34;height&#34;: 768,&#xA;  &#34;color&#34;: 16711680&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The fix is to define a qualifier annotation, itself annotated &lt;code&gt;@JsonQualifier&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Retention(RUNTIME)&#xA;@JsonQualifier&#xA;public @interface HexColor {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Retention(RUNTIME)&#xA;@JsonQualifier&#xA;annotation class HexColor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Next apply this &lt;code&gt;@HexColor&lt;/code&gt; annotation to the appropriate field:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Rectangle {&#xA;  int width;&#xA;  int height;&#xA;  @HexColor int color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class Rectangle(&#xA;  val width: Int,&#xA;  val height: Int,&#xA;  @HexColor val color: Int&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;And finally define a type adapter to handle it:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/** Converts strings like #ff0000 to the corresponding color ints. */&#xA;class ColorAdapter {&#xA;  @ToJson String toJson(@HexColor int rgb) {&#xA;    return String.format(&#34;#%06x&#34;, rgb);&#xA;  }&#xA;&#xA;  @FromJson @HexColor int fromJson(String rgb) {&#xA;    return Integer.parseInt(rgb.substring(1), 16);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;/** Converts strings like #ff0000 to the corresponding color ints.  */&#xA;class ColorAdapter {&#xA;  @ToJson fun toJson(@HexColor rgb: Int): String {&#xA;    return &#34;#%06x&#34;.format(rgb)&#xA;  }&#xA;&#xA;  @FromJson @HexColor fun fromJson(rgb: String): Int {&#xA;    return rgb.substring(1).toInt(16)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Use &lt;code&gt;@JsonQualifier&lt;/code&gt; when you need different JSON encodings for the same type. Most programs shouldn‚Äôt need this &lt;code&gt;@JsonQualifier&lt;/code&gt;, but it‚Äôs very handy for those that do.&lt;/p&gt; &#xA;&lt;h3&gt;Omitting fields&lt;/h3&gt; &#xA;&lt;p&gt;Some models declare fields that shouldn‚Äôt be included in JSON. For example, suppose our blackjack hand has a &lt;code&gt;total&lt;/code&gt; field with the sum of the cards:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class BlackjackHand {&#xA;  private int total;&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class BlackjackHand(&#xA;  private val total: Int,&#xA;&#xA;  ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;By default, all fields are emitted when encoding JSON, and all fields are accepted when decoding JSON. Prevent a field from being included by annotating them with &lt;code&gt;@Json(ignore = true)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class BlackjackHand {&#xA;  @Json(ignore = true)&#xA;  private int total;&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class BlackjackHand(...) {&#xA;  @Json(ignore = true)&#xA;  var total: Int = 0&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;These fields are omitted when writing JSON. When reading JSON, the field is skipped even if the JSON contains a value for the field. Instead, it will get a default value. In Kotlin, these fields &lt;em&gt;must&lt;/em&gt; have a default value if they are in the primary constructor.&lt;/p&gt; &#xA;&lt;p&gt;Note that you can also use Java‚Äôs &lt;code&gt;transient&lt;/code&gt; keyword or Kotlin&#39;s &lt;code&gt;@Transient&lt;/code&gt; annotation on these fields for the same effect.&lt;/p&gt; &#xA;&lt;h3&gt;Default Values &amp;amp; Constructors&lt;/h3&gt; &#xA;&lt;p&gt;When reading JSON that is missing a field, Moshi relies on the Java or Kotlin or Android runtime to assign the field‚Äôs value. Which value it uses depends on whether the class has a no-arguments constructor.&lt;/p&gt; &#xA;&lt;p&gt;If the class has a no-arguments constructor, Moshi will call that constructor and whatever value it assigns will be used. For example, because this class has a no-arguments constructor the &lt;code&gt;total&lt;/code&gt; field is initialized to &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: This section only applies to Java reflections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class BlackjackHand {&#xA;  private int total = -1;&#xA;  ...&#xA;&#xA;  private BlackjackHand() {&#xA;  }&#xA;&#xA;  public BlackjackHand(Card hidden_card, List&amp;lt;Card&amp;gt; visible_cards) {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the class doesn‚Äôt have a no-arguments constructor, Moshi can‚Äôt assign the field‚Äôs default value, &lt;strong&gt;even if it‚Äôs specified in the field declaration&lt;/strong&gt;. Instead, the field‚Äôs default is always &lt;code&gt;0&lt;/code&gt; for numbers, &lt;code&gt;false&lt;/code&gt; for booleans, and &lt;code&gt;null&lt;/code&gt; for references. In this example, the default value of &lt;code&gt;total&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class BlackjackHand {&#xA;  private int total = -1;&#xA;  ...&#xA;&#xA;  public BlackjackHand(Card hidden_card, List&amp;lt;Card&amp;gt; visible_cards) {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is surprising and is a potential source of bugs! For this reason consider defining a no-arguments constructor in classes that you use with Moshi, using &lt;code&gt;@SuppressWarnings(&#34;unused&#34;)&lt;/code&gt; to prevent it from being inadvertently deleted later:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class BlackjackHand {&#xA;  private int total = -1;&#xA;  ...&#xA;&#xA;  @SuppressWarnings(&#34;unused&#34;) // Moshi uses this!&#xA;  private BlackjackHand() {&#xA;  }&#xA;&#xA;  public BlackjackHand(Card hidden_card, List&amp;lt;Card&amp;gt; visible_cards) {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Composing Adapters&lt;/h3&gt; &#xA;&lt;p&gt;In some situations Moshi&#39;s default Java-to-JSON conversion isn&#39;t sufficient. You can compose adapters to build upon the standard conversion.&lt;/p&gt; &#xA;&lt;p&gt;In this example, we turn serialize nulls, then delegate to the built-in adapter:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class TournamentWithNullsAdapter {&#xA;  @ToJson void toJson(JsonWriter writer, Tournament tournament,&#xA;      JsonAdapter&amp;lt;Tournament&amp;gt; delegate) throws IOException {&#xA;    boolean wasSerializeNulls = writer.getSerializeNulls();&#xA;    writer.setSerializeNulls(true);&#xA;    try {&#xA;      delegate.toJson(writer, tournament);&#xA;    } finally {&#xA;      writer.setLenient(wasSerializeNulls);&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class TournamentWithNullsAdapter {&#xA;  @ToJson fun toJson(writer: JsonWriter, tournament: Tournament?,&#xA;    delegate: JsonAdapter&amp;lt;Tournament?&amp;gt;) {&#xA;    val wasSerializeNulls: Boolean = writer.getSerializeNulls()&#xA;    writer.setSerializeNulls(true)&#xA;    try {&#xA;      delegate.toJson(writer, tournament)&#xA;    } finally {&#xA;      writer.setLenient(wasSerializeNulls)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;When we use this to serialize a tournament, nulls are written! But nulls elsewhere in our JSON document are skipped as usual.&lt;/p&gt; &#xA;&lt;p&gt;Moshi has a powerful composition system in its &lt;code&gt;JsonAdapter.Factory&lt;/code&gt; interface. We can hook in to the encoding and decoding process for any type, even without knowing about the types beforehand. In this example, we customize types annotated &lt;code&gt;@AlwaysSerializeNulls&lt;/code&gt;, which an annotation we create, not built-in to Moshi:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Target(TYPE)&#xA;@Retention(RUNTIME)&#xA;public @interface AlwaysSerializeNulls {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Target(TYPE)&#xA;@Retention(RUNTIME)&#xA;annotation class AlwaysSerializeNulls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@AlwaysSerializeNulls&#xA;static class Car {&#xA;  String make;&#xA;  String model;&#xA;  String color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@AlwaysSerializeNulls&#xA;class Car(&#xA;  val make: String?,&#xA;  val model: String?,&#xA;  val color: String?&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Each &lt;code&gt;JsonAdapter.Factory&lt;/code&gt; interface is invoked by &lt;code&gt;Moshi&lt;/code&gt; when it needs to build an adapter for a user&#39;s type. The factory either returns an adapter to use, or null if it doesn&#39;t apply to the requested type. In our case we match all classes that have our annotation.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;static class AlwaysSerializeNullsFactory implements JsonAdapter.Factory {&#xA;  @Override public JsonAdapter&amp;lt;?&amp;gt; create(&#xA;      Type type, Set&amp;lt;? extends Annotation&amp;gt; annotations, Moshi moshi) {&#xA;    Class&amp;lt;?&amp;gt; rawType = Types.getRawType(type);&#xA;    if (!rawType.isAnnotationPresent(AlwaysSerializeNulls.class)) {&#xA;      return null;&#xA;    }&#xA;&#xA;    JsonAdapter&amp;lt;Object&amp;gt; delegate = moshi.nextAdapter(this, type, annotations);&#xA;    return delegate.serializeNulls();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kotlin&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class AlwaysSerializeNullsFactory : JsonAdapter.Factory {&#xA;  override fun create(type: Type, annotations: Set&amp;lt;Annotation&amp;gt;, moshi: Moshi): JsonAdapter&amp;lt;*&amp;gt;? {&#xA;    val rawType: Class&amp;lt;*&amp;gt; = type.rawType&#xA;    if (!rawType.isAnnotationPresent(AlwaysSerializeNulls::class.java)) {&#xA;      return null&#xA;    }&#xA;    val delegate: JsonAdapter&amp;lt;Any&amp;gt; = moshi.nextAdapter(this, type, annotations)&#xA;    return delegate.serializeNulls()&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;After determining that it applies, the factory looks up Moshi&#39;s built-in adapter by calling &lt;code&gt;Moshi.nextAdapter()&lt;/code&gt;. This is key to the composition mechanism: adapters delegate to each other! The composition in this example is simple: it applies the &lt;code&gt;serializeNulls()&lt;/code&gt; transform on the delegate.&lt;/p&gt; &#xA;&lt;p&gt;Composing adapters can be very sophisticated:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;An adapter could transform the input object before it is JSON-encoded. A string could be trimmed or truncated; a value object could be simplified or normalized.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An adapter could repair the output object after it is JSON-decoded. It could fill-in missing data or discard unwanted data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The JSON could be given extra structure, such as wrapping values in objects or arrays.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Moshi is itself built on the pattern of repeatedly composing adapters. For example, Moshi&#39;s built-in adapter for &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; delegates to the adapter of &lt;code&gt;T&lt;/code&gt;, and calls it repeatedly.&lt;/p&gt; &#xA;&lt;h3&gt;Precedence&lt;/h3&gt; &#xA;&lt;p&gt;Moshi&#39;s composition mechanism tries to find the best adapter for each type. It starts with the first adapter or factory registered with &lt;code&gt;Moshi.Builder.add()&lt;/code&gt;, and proceeds until it finds an adapter for the target type.&lt;/p&gt; &#xA;&lt;p&gt;If a type can be matched multiple adapters, the earliest one wins.&lt;/p&gt; &#xA;&lt;p&gt;To register an adapter at the end of the list, use &lt;code&gt;Moshi.Builder.addLast()&lt;/code&gt; instead. This is most useful when registering general-purpose adapters, such as the &lt;code&gt;KotlinJsonAdapterFactory&lt;/code&gt; below.&lt;/p&gt; &#xA;&lt;h2&gt;Kotlin&lt;/h2&gt; &#xA;&lt;p&gt;Moshi is a great JSON library for Kotlin. It understands Kotlin‚Äôs non-nullable types and default parameter values. When you use Kotlin with Moshi you may use reflection, codegen, or both.&lt;/p&gt; &#xA;&lt;h4&gt;Reflection&lt;/h4&gt; &#xA;&lt;p&gt;The reflection adapter uses Kotlin‚Äôs reflection library to convert your Kotlin classes to and from JSON. Enable it by adding the &lt;code&gt;KotlinJsonAdapterFactory&lt;/code&gt; to your &lt;code&gt;Moshi.Builder&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val moshi = Moshi.Builder()&#xA;    .addLast(KotlinJsonAdapterFactory())&#xA;    .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Moshi‚Äôs adapters are ordered by precedence, so you should use &lt;code&gt;addLast()&lt;/code&gt; with &lt;code&gt;KotlinJsonAdapterFactory&lt;/code&gt;, and &lt;code&gt;add()&lt;/code&gt; with your custom adapters.&lt;/p&gt; &#xA;&lt;p&gt;The reflection adapter requires the following additional dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;com.squareup.moshi&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;moshi-kotlin&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;1.12.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;com.squareup.moshi:moshi-kotlin:1.13.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the reflection adapter transitively depends on the &lt;code&gt;kotlin-reflect&lt;/code&gt; library which is a 2.5 MiB .jar file.&lt;/p&gt; &#xA;&lt;h4&gt;Codegen&lt;/h4&gt; &#xA;&lt;p&gt;Moshi‚Äôs Kotlin codegen support can be used as an annotation processor (via &lt;a href=&#34;https://kotlinlang.org/docs/reference/kapt.html&#34;&gt;kapt&lt;/a&gt;) or Kotlin SymbolProcessor (&lt;a href=&#34;https://github.com/google/ksp&#34;&gt;KSP&lt;/a&gt;). It generates a small and fast adapter for each of your Kotlin classes at compile-time. Enable it by annotating each class that you want to encode as JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@JsonClass(generateAdapter = true)&#xA;data class BlackjackHand(&#xA;  val hidden_card: Card,&#xA;  val visible_cards: List&amp;lt;Card&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The codegen adapter requires that your Kotlin types and their properties be either &lt;code&gt;internal&lt;/code&gt; or &lt;code&gt;public&lt;/code&gt; (this is Kotlin‚Äôs default visibility).&lt;/p&gt; &#xA;&lt;p&gt;Kotlin codegen has no additional runtime dependency. You‚Äôll need to enable kapt or KSP and then add the following to your build to enable the annotation processor:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;KSP&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;  id(&#34;com.google.devtools.ksp&#34;).version(&#34;1.6.10-1.0.4&#34;) // Or latest version of KSP&#xA;}&#xA;&#xA;dependencies {&#xA;  ksp(&#34;com.squareup.moshi:moshi-kotlin-codegen:1.13.0&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kapt&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;com.squareup.moshi&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;moshi-kotlin-codegen&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;1.12.0&amp;lt;/version&amp;gt;&#xA;  &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;kapt(&#34;com.squareup.moshi:moshi-kotlin-codegen:1.13.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Limitations&lt;/h4&gt; &#xA;&lt;p&gt;If your Kotlin class has a superclass, it must also be a Kotlin class. Neither reflection or codegen support Kotlin types with Java supertypes or Java types with Kotlin supertypes. If you need to convert such classes to JSON you must create a custom type adapter.&lt;/p&gt; &#xA;&lt;p&gt;The JSON encoding of Kotlin types is the same whether using reflection or codegen. Prefer codegen for better performance and to avoid the &lt;code&gt;kotlin-reflect&lt;/code&gt; dependency; prefer reflection to convert both private and protected properties. If you have configured both, generated adapters will be used on types that are annotated &lt;code&gt;@JsonClass(generateAdapter = true)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://search.maven.org/classic/remote_content?g=com.squareup.moshi&amp;amp;a=moshi&amp;amp;v=LATEST&#34;&gt;the latest JAR&lt;/a&gt; or depend via Maven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;  &amp;lt;groupId&amp;gt;com.squareup.moshi&amp;lt;/groupId&amp;gt;&#xA;  &amp;lt;artifactId&amp;gt;moshi&amp;lt;/artifactId&amp;gt;&#xA;  &amp;lt;version&amp;gt;1.13.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or Gradle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;com.squareup.moshi:moshi:1.13.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Snapshots of the development version are available in &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/com/squareup/moshi/&#34;&gt;Sonatype&#39;s &lt;code&gt;snapshots&lt;/code&gt; repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;R8 / ProGuard&lt;/h2&gt; &#xA;&lt;p&gt;Moshi contains minimally required rules for its own internals to work without need for consumers to embed their own. However if you are using reflective serialization and R8 or ProGuard, you must add keep rules in your proguard configuration file for your reflectively serialized classes.&lt;/p&gt; &#xA;&lt;h4&gt;Enums&lt;/h4&gt; &#xA;&lt;p&gt;Annotate enums with &lt;code&gt;@JsonClass(generateAdapter = false)&lt;/code&gt; to prevent them from being removed/obfuscated from your code by R8/ProGuard.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2015 Square, Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>alibaba/p3c</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/alibaba/p3c</id>
    <link href="https://github.com/alibaba/p3c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Alibaba Java Coding Guidelines pmd implements and IDE plugin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;P3C&lt;/h1&gt; &#xA;&lt;p&gt;ÊúÄÊñ∞ÁâàÊú¨ÔºöÈªÑÂ±±ÁâàÔºà2022.2.3ÂèëÂ∏ÉÔºâ&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;font color=&#34;green&#34;&gt;Preface&lt;/font&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We are pleased to present Alibaba Java Coding Guidelines which consolidates the best programming practices over the years from Alibaba Group&#39;s technical teams. A vast number of Java programming teams impose demanding requirements on code quality across projects as we encourage reuse and better understanding of each other&#39;s programs. We have seen many programming problems in the past. For example, defective database table structures and index designs may cause software architecture flaws and performance risks. Another example is confusing code structures being difficult to maintain. Furthermore, vulnerable code without authentication is prone to hackers‚Äô attacks. To address these kinds of problems, we developed this document for Java developers at Alibaba.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For more information please refer the &lt;em&gt;Alibaba Java Coding Guidelines&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‰∏≠ÊñáÁâà: Áõ¥Êé•‰∏ãËΩΩ‰∏äÊñπÁöÑPDFÊñá‰ª∂ÔºàÈªÑÂ±±ÁâàÔºâ&lt;/li&gt; &#xA; &lt;li&gt;English Version: &lt;em&gt;&lt;a href=&#34;https://alibaba.github.io/Alibaba-Java-Coding-Guidelines&#34;&gt;Alibaba Java Coding Guidelines&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;font color=&#34;green&#34;&gt;Introduction&lt;/font&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The project consists of 3 parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/p3c/master/p3c-pmd&#34;&gt;PMD implementations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/p3c/master/idea-plugin&#34;&gt;IntelliJ IDEA plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/p3c/master/eclipse-plugin&#34;&gt;Eclipse plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;font color=&#34;green&#34;&gt;Rules&lt;/font&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;font color=&#34;blue&#34;&gt;Forty-nine rules are realized based on PMD, please refer the P3C-PMD documentation for more detailed information. Four rules are implemented within IDE plugins (IDEA and Eclipse) as follows:&lt;/font&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;[Mandatory]&lt;/code&gt; Using a deprecated class or method is prohibited.&lt;br&gt; Note: For example, decode(String source, String encode) should be used instead of the deprecated method decode(String encodeStr). Once an interface has been deprecated, the interface provider has the obligation to provide a new one. At the same time, client programmers have the obligation to check out what its new implementation is.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;[Mandatory]&lt;/code&gt; An overridden method from an interface or abstract class must be marked with @Override annotation. Counter example: For getObject() and get0bject(), the first one has a letter &#39;O&#39;, and the second one has a number &#39;0&#39;. To accurately determine whether the overriding is successful, an @Override annotation is necessary. Meanwhile, once the method signature in the abstract class is changed, the implementation class will report a compile-time error immediately.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;[Mandatory]&lt;/code&gt; A static field or method should be directly referred by its class name instead of its corresponding object name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;[Mandatory]&lt;/code&gt; The usage of hashCode and equals should follow:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Override hashCode if equals is overridden.&lt;/li&gt; &#xA;   &lt;li&gt;These two methods must be overridden for Set since they are used to ensure that no duplicate object will be inserted in Set.&lt;/li&gt; &#xA;   &lt;li&gt;These two methods must be overridden if self-defined object is used as the key of Map. Note: String can be used as the key of Map since these two methods have been rewritten.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>re-ovo/iwara4a</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/re-ovo/iwara4a</id>
    <link href="https://github.com/re-ovo/iwara4a" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Âü∫‰∫éJetpack ComposeÂºÄÂèëÁöÑiwaraÂÆâÂçìapp (Unofficial Iwara Android Application)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/re-ovo/iwara4a/master/app/src/main/res/mipmap-xxhdpi/ducky.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Iwara4A&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jiangdashao/iwara4a/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/jiangdashao/iwara4a&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jiangdashao/iwara4a/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/jiangdashao/iwara4a&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jiangdashao/iwara4a/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/jiangdashao/iwara4a&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jiangdashao/iwara4a&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/jiangdashao/iwara4a&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/jiangdashao/iwara4a/total&#34; alt=&#34;GitHub all releases&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/re-ovo/iwara4a/master/art/doc/README_EN.md&#34;&gt;[English Document Here!]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Âü∫‰∫éJetpack ComposeÂºÄÂèëÁöÑ &lt;a href=&#34;https://iwara.tv&#34;&gt;iwara&lt;/a&gt; ÂÆâÂçìapp, ÈááÁî®Material YouËÆæËÆ°, ÊîØÊåÅÂÆâÂçì6.0‰ª•‰∏äÁâàÊú¨, ÂÆåÂÖ®Êó†Â§ö‰ΩôÊùÉÈôêËØ∑Ê±Ç ‰ΩøÁî® JSoup/Retrofit Ëß£ÊûêIÁ´ôÁΩëÈ°µÔºåÊèêÂèñÊï∞ÊçÆÂπ∂Ê∏≤Êüì‰∏∫ÂÆâÂçìÂéüÁîüÁïåÈù¢ÔºåIÁ´ô&lt;strong&gt;‰ªª‰ΩïÂÜÖÂÆπ‰∏éÊú¨‰ΩúËÄÖÊó†ÂÖ≥&lt;/strong&gt;Ôºåapp‰ªÖ‰ªÖÊâøÊãÖÊµèËßàÂô®ÁöÑÂäüËÉΩ&lt;br&gt; ‰ΩøÁî®ËØ∑ÈÅµÂÆà‰Ω†ÊâÄÂú®Âú∞Âå∫Ê≥ïÂæãÔºåËØ∑ÂãøÂÖ¨ÂºÄ‰º†Êí≠ËØ•APP&lt;/p&gt; &#xA;&lt;h2&gt;‚¨á ‰∏ãËΩΩ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jiangdashao/iwara4a/releases/latest&#34;&gt;https://github.com/jiangdashao/iwara4a/releases/latest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Êà™Âõæ&lt;/h2&gt; &#xA;&lt;p&gt;(Êà™ÂõæÂèØËÉΩÂ∑≤ÁªèËøáÊó∂Ôºå‰ªÖ‰æõÂèÇËÄÉ!)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;‰∏ªÈ°µ&lt;/th&gt; &#xA;   &lt;th&gt;Êí≠ÊîæÈ°µ&lt;/th&gt; &#xA;   &lt;th&gt;ÊêúÁ¥¢&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/re-ovo/iwara4a/master/art/index.png&#34; align=&#34;left&#34; height=&#34;400&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/re-ovo/iwara4a/master/art/play.png&#34; align=&#34;left&#34; height=&#34;400&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/re-ovo/iwara4a/master/art/search.png&#34; align=&#34;left&#34; height=&#34;400&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üö© ÁâπÊÄß&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Material YouËÆæËÆ°&lt;/li&gt; &#xA; &lt;li&gt;Êö¥ÂäõËá™Âä®ÈáçËøû&lt;/li&gt; &#xA; &lt;li&gt;ÁôªÂΩï/Êü•Áúã‰∏™‰∫∫‰ø°ÊÅØ&lt;/li&gt; &#xA; &lt;li&gt;ÊµèËßàËÆ¢ÈòÖÊõ¥Êñ∞ÂàóË°®&lt;/li&gt; &#xA; &lt;li&gt;Êí≠ÊîæËßÜÈ¢ë&lt;/li&gt; &#xA; &lt;li&gt;Êü•ÁúãÂõæÁâá&lt;/li&gt; &#xA; &lt;li&gt;Êü•ÁúãËØÑËÆ∫&lt;/li&gt; &#xA; &lt;li&gt;ÁÇπËµû&lt;/li&gt; &#xA; &lt;li&gt;ÂÖ≥Ê≥®&lt;/li&gt; &#xA; &lt;li&gt;ËØÑËÆ∫&lt;/li&gt; &#xA; &lt;li&gt;ÂàÜ‰∫´&lt;/li&gt; &#xA; &lt;li&gt;ÊêúÁ¥¢&lt;/li&gt; &#xA; &lt;li&gt;Ê¶úÂçï&lt;/li&gt; &#xA; &lt;li&gt;‰∏ãËΩΩ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üß≠ Â∏∏ËßÅÈóÆÈ¢ò&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;‰∏∫‰ªÄ‰πà‰∏çËÉΩÊü•ÁúãËá™Â∑±ÂÖ≥Ê≥®‰∫ÜÂì™‰∫õ‰∫∫Ôºü&lt;/strong&gt;&lt;br&gt; Á≠î: Âõ†‰∏∫IwaraÁΩëÁ´ôÁ´ØÁ¶ÅÁî®‰∫ÜËøô‰∏™ÂäüËÉΩÔºåÊçÆËØ¥ÊòØÂõ†‰∏∫Ëøô‰∏™ÂäüËÉΩ‰ºöÂØºËá¥Êï∞ÊçÆÂ∫ìË¥üËΩΩÂ¢ûÂ§ßÂØºËá¥ÁΩëÁ´ôÂÆïÊú∫ÔºåÂ¶ÇÊûú‰ª•ÂêéiwaraÈáçÊñ∞ÂºÄÊîæËøô‰∏™ÂäüËÉΩÔºåÊàë‰ºöÂä†‰∏äÁöÑ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;APPÊîØÊåÅÂì™‰∫õÂÆâÂçìÁâàÊú¨Ôºü&lt;/strong&gt;&lt;br&gt; Á≠î: ÁõÆÂâçÊîØÊåÅAndroid 6.0 ‰ª•‰∏äÁöÑÊâÄÊúâÁâàÊú¨&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Âú®APP‰∏äÁôªÂΩïÂÆâÂÖ®Âêó? ‰ºö‰∏ç‰ºöÊ≥ÑÈú≤ÊàëÁöÑÂØÜÁ†ÅÔºü&lt;/strong&gt;&lt;br&gt; Á≠î: Êú¨È°πÁõÆÂÆåÂÖ®ÂºÄÊ∫êÔºåÊ¨¢ËøéÊ£ÄÊü•‰ª£Á†ÅÔºåÊèí‰ª∂Âè™‰ºöÂíåiwaraÈÄö‰ø°&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ÊúâiOSÁâàÂêó?&lt;/strong&gt; Á≠î: Ê≤°Êúâ, iOSÂ∫îÁî®ÁÆ°ÁêÜ‰∏•Ê†ºÔºåÂÅö‰∫Ü‰πü‰∏äÊû∂‰∏ç‰∫Ü&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üé® ‰∏ªË¶ÅÊäÄÊúØÊ†à&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MVVM Êû∂ÊûÑ&lt;/li&gt; &#xA; &lt;li&gt;ÂçïActivity + ÂØºËà™&lt;/li&gt; &#xA; &lt;li&gt;Jetpack Compose (ÊûÑÂª∫UI)&lt;/li&gt; &#xA; &lt;li&gt;Kotlin Coroutine (ÂçèÁ®ã)&lt;/li&gt; &#xA; &lt;li&gt;Okhttp + Jsoup (Ëß£ÊûêÁΩëÈ°µ)&lt;/li&gt; &#xA; &lt;li&gt;Retrofit (ËÆøÈóÆRestful API)&lt;/li&gt; &#xA; &lt;li&gt;Hilt (‰æùËµñÊ≥®ÂÖ•)&lt;/li&gt; &#xA; &lt;li&gt;Paging3 (ÂàÜÈ°µÂä†ËΩΩ)&lt;/li&gt; &#xA; &lt;li&gt;Navigation (ÂØºËà™)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>square/papa</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/square/papa</id>
    <link href="https://github.com/square/papa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PAPA: Performance of Android Production Applications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Square Papa&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Performance of Android Production Applications&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This library is not stable for usage beyond Square, the APIs and internals might change anytime.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Papa... ?&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/square/papa/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/square/papa/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/square/papa/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;We still need a logo!&lt;/em&gt; &lt;img src=&#34;https://raw.githubusercontent.com/square/papa/main/assets/logo_512.png&#34; alt=&#34;logo_512.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;papa&lt;/code&gt; dependency to your library or app&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  implementation &#39;com.squareup.papa:papa:0.5&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install a &lt;code&gt;PapaEventListener&lt;/code&gt; (see &lt;code&gt;PapaEvent&lt;/code&gt; for details):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import android.app.Application&#xA;import papa.PapaEvent.AppLaunch&#xA;import papa.PapaEventListener&#xA;import papa.PapaEventLogger&#xA;&#xA;class ExampleApplication : Application() {&#xA;  override fun onCreate() {&#xA;    super.onCreate()&#xA;    if (BuildConfig.DEBUG) {&#xA;      PapaEventListener.install(PapaEventLogger())&#xA;    }&#xA;&#xA;    PapaEventListener.install { event -&amp;gt;&#xA;      when (event) {&#xA;        is AppLaunch -&amp;gt; {&#xA;          TODO(&#34;Log to analytics&#34;)&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;It&#39;s not really a question, more like a comment..&lt;/h3&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&#xA;Copyright 2021 Square Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>liujingxing/XmlClassGuard</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/liujingxing/XmlClassGuard</id>
    <link href="https://github.com/liujingxing/XmlClassGuard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‰∏Ä‰∏™ÂèØÊ∑∑Ê∑Ü4Â§ßÁªÑ‰ª∂ÔºåËá™ÂÆö‰πâViewÁ≠â‰ªªÊÑèÁ±ªÁöÑÊèí‰ª∂Ôºå‰∏äÊû∂Google PlayÁöÑÂà©Âô®&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://jitpack.io/#liujingxing/XmlClassGuard&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/liujingxing/XmlClassGuard.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/liujingxing/XmlClassGuard/wiki/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/change-%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97-success.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Âä†ÊàëÂæÆ‰ø° ljx-studio Êãâ‰Ω†ËøõÂæÆ‰ø°Áæ§(Â§áÊ≥®XmlClassGuard)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;XmlClassGuard ÁÆÄ‰ªã&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;XmlClassGuard&lt;/code&gt;ÊòØ‰∏Ä‰∏™ÂèØÊ∑∑Ê∑ÜAndroid 4Â§ßÁªÑ‰ª∂„ÄÅËá™ÂÆö‰πâViewÁ≠â‰ªªÊÑèÁ±ªÁöÑÊèí‰ª∂&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;XmlClassGuard&lt;/code&gt;ÂèØ‰ª•Áúã‰ΩúÊòØ&lt;code&gt;ProGuard&lt;/code&gt;ÁöÑ‰∏Ä‰∏™Ë°•ÂÖÖÔºåË∑ü&lt;code&gt;ProGuard&lt;/code&gt;Ê≤°Êúâ‰ªª‰ΩïÂÖ≥Á≥ªÔºå‰πü‰∏ç‰ºöÊúâ‰ªª‰ΩïÂÜ≤Á™Å&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÂèØÂø´ÈÄüÊõ¥Êîπ&lt;code&gt;manifest&lt;/code&gt;Êñá‰ª∂ÈáåÁöÑ&lt;code&gt;package&lt;/code&gt;Â±ûÊÄßÔºåÂπ∂ÂêåÊ≠•Âà∞ÂÖ∂‰ªñÊñá‰ª∂‰∏≠&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÂèØÂø´ÈÄüÁßªÂä®n‰∏™ÁõÆÂΩïÂà∞ÂÖ∂‰ªñÁõÆÂΩï‰∏≠ÔºåÂπ∂ÂêåÊ≠•Âà∞ÂÖ∂‰ªñÊñá‰ª∂‰∏≠&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÂèØÊü•Êâæ&lt;code&gt;constraint_referenced_ids&lt;/code&gt;Â±ûÊÄßÁöÑÂÄºÔºåÂπ∂Ëá™Âä®Ê∑ªÂä†Âà∞&lt;code&gt;AabResGuard&lt;/code&gt;ÁöÑÁôΩÂêçÂçï‰∏≠&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;XmlClassGuard&lt;/code&gt;ÊúÄ‰∏ªË¶ÅÁöÑÂäüËÉΩÊòØÊ∑∑Ê∑ÜxmlÊñá‰ª∂Áî®Âà∞ÁöÑÁ±ªÔºåÊïÖÂèñÂêç‰∏∫&lt;code&gt;XmlClassGuard&lt;/code&gt;,‰∏é&lt;a href=&#34;https://github.com/shwenzhang/AndResGuard&#34;&gt;AndResGuard&lt;/a&gt;„ÄÅ&lt;a href=&#34;https://github.com/bytedance/AabResGuard&#34;&gt;AabResGuard&lt;/a&gt;ÂØπÂ∫î&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Êúâ‰ªÄ‰πàÁî®Ôºü&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Âº•Ë°•&lt;code&gt;ProGuard&lt;/code&gt;‰∏çÊ∑∑Ê∑Ü4Â§ßÁªÑ‰ª∂Á≠âÁ±ªÈóÆÈ¢ò&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Â¢ûÂä†aab„ÄÅapkÂèçÁºñËØëÁöÑÈöæÂ∫¶&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÊûÅÂ§ßÈôç‰ΩéaabÂåÖÊü•ÈáçÁéáÔºåÈÅøÂÖç‰∏äÊû∂&lt;code&gt;Google Play&lt;/code&gt;Âõ†Êü•ÈáçÁéáËøáÈ´òÔºåÂØºËá¥‰∏ãÊû∂ÊàñÂ∞ÅÂè∑ÈóÆÈ¢ò&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ÂÖ≥‰∫éÁ¨¨‰∏âÁÇπÔºåÊúâËøá‰∏äÊû∂&lt;code&gt;Google Play&lt;/code&gt; ÂïÜÂ∫óÁöÑÂêåÂ≠¶Â∫îËØ•Áü•ÈÅìÔºåÂ¶ÇÊûú‰πãÂâçÁöÑÂåÖË¢´‰∏ãÊû∂ÊàñÂ∞ÅÂè∑ÔºåÊÉ≥Ë¶ÅÂêåÂ•ó‰ª£Á†ÅÂÜçÊ¨°‰∏äÊû∂ÔºåÈÇ£99%Ê¶ÇÁéáÊòØÂÜçÊ¨°Â∞ÅÂè∑ÔºåÂæàÂ§ß‰∏ÄÈÉ®ÂàÜÂéüÂõ†Â∞±ÊòØ‰ª•‰∏äËØ¥Âà∞ÁöÑÁ±ªÊú™Ë¢´Ê∑∑Ê∑ÜÔºåÂæàÂÆπÊòìË¢´GoogleÊñ≠ÂÆö‰∏∫ÂåÖÈáçÂ§çÔºå‰ªéËÄåÂØºËá¥ÂÜçÊ¨°Â∞ÅÂè∑ÔºåÂõ†Ê≠§ÔºåÂ¶ÇÊûúÊÉ≥Ë¶ÅÂÜçÊ¨°‰∏äÊû∂ÔºåÂ∞±ÂøÖÈ°ªË¶ÅÊõ¥ÊîπÂõõÂ§ßÁªÑ‰ª∂„ÄÅËá™ÂÆö‰πâViewÁ≠âÁöÑ&lt;code&gt;ÂåÖÂêç+Á±ªÂêç&lt;/code&gt;‰ª•Èôç‰ΩéÊü•ÈáçÁéáÔºåÁÑ∂ËÄåÔºåÂ¶ÇÊûúÊâãÂä®ÂéªÂÆåÊàêËøôÈ°π‰ªªÂä°Ôºå‰º∞ËÆ°‰ºöÁ¥ØÊ≠ª‰∏Ä‰∏™Á®ãÂ∫èÂëòÔºå‰∫éÊòØ‰πéÔºåÂ∞±Êúâ‰∫Ü&lt;code&gt;XmlClassGuard&lt;/code&gt;ÔºåÈÄöËøáÊèí‰ª∂ÂéªÂÆåÊàêÊâãÂ∑•ÁöÑÊ¥ªÔºå‰∏Ä‰∏™‰ªªÂä°‰æøÂèØÊêûÂÆö&lt;/p&gt; &#xA;&lt;h1&gt;ÂéüÁêÜ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;XmlClassGuard&lt;/code&gt;‰∏çÂêå‰∫é&lt;code&gt;AndResGuard(apkËµÑÊ∫êÊ∑∑Ê∑Ü)„ÄÅAadResGuard(aabËµÑÊ∫êÊ∑∑Ê∑Ü)&lt;/code&gt;‰æµÂÖ•ÊâìÂåÖÊµÅÁ®ãÁöÑÊñπÊ°àÔºå&lt;code&gt;XmlClassGuard&lt;/code&gt; ÈúÄË¶ÅÂú®ÊâìÂåÖÂâçÊâßË°å&lt;code&gt;xmlClassGuard&lt;/code&gt;‰ªªÂä°ÔºåËØ•‰ªªÂä°‰ºöÊ£ÄÁ¥¢&lt;code&gt;AndroidManifest.xml&lt;/code&gt;Âèä&lt;code&gt;navigation„ÄÅlayout&lt;/code&gt; Êñá‰ª∂Â§π‰∏ãÁöÑxmlÔºåÊâæÂá∫xmlÊñá‰ª∂‰∏≠ÂºïÁî®ÁöÑÁ±ªÔºåÂ¶Ç4Â§ßÁªÑ‰ª∂ÂèäËá™ÂÆö‰πâViewÁ≠âÔºåÊõ¥ÊîπÂÖ∂&lt;code&gt;ÂåÖÂêç+Á±ªÂêç&lt;/code&gt;ÔºåÂπ∂Â∞ÜÊõ¥ÊîπÂêéÁöÑÂÜÖÂÆπÂêåÊ≠•Âà∞ÂÖ∂‰ªñÊñá‰ª∂‰∏≠ÔºåËØ¥Áõ¥ÁôΩÁÇπÔºåÂ∞±ÊòØÂú®ÊâìÂåÖÂâçÔºåÂú®Êú¨Âú∞Êõ¥Êîπ&lt;code&gt;ÂåÖÂêç+Á±ªÂêç&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Ë≠¶ÂëäË≠¶Âëä‚ö†Ô∏è&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Áî±‰∫éÊòØÂú®Êú¨Âú∞Êìç‰ΩúÔºå‰ªªÂä°ÊâßË°åÊòØ‰∏çÂèØÈÄÜÁöÑÔºåÊïÖÂä°ÂøÖÂÅöÂ•Ω‰ª£Á†ÅÂ§á‰ªΩÔºåÂê¶Âàô‰ª£Á†ÅÂ∞ÜÂæàÈöæËøòÂéü&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;‰∏äÊâã&lt;/h1&gt; &#xA;&lt;p&gt;1„ÄÅÂú®&lt;code&gt;build.gradle(root project)&lt;/code&gt;‰∏≠ÈÖçÁΩÆ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;buildscript {&#xA;    repositories {&#xA;        maven { url &#39;https://jitpack.io&#39; }&#xA;    }&#xA;    dependencies {&#xA;        classpath &#34;com.github.liujingxing:XmlClassGuard:1.0.3&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2„ÄÅÂú® &lt;code&gt;build.gradle(application)&lt;/code&gt; ‰∏≠ÈÖçÁΩÆ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;apply plugin: &#34;xml-class-guard&#34;&#xA;&#xA;//‰ª•‰∏ãÂùá‰∏∫ÈùûÂøÖÈ°ª&#xA;xmlClassGuard {&#xA;    /*&#xA;     * ÊòØÂê¶Êü•ÊâæÁ∫¶ÊùüÂ∏ÉÂ±ÄÁöÑconstraint_referenced_idsÂ±ûÊÄßÁöÑÂÄºÔºåÂπ∂Ê∑ªÂä†Âà∞AabResGuardÁöÑÁôΩÂêçÂçï‰∏≠Ôºå&#xA;     * ÊòØÁöÑËØùÔºåË¶ÅÊ±Ç‰Ω†Âú®XmlClassGuardÂâç‰æùËµñAabResGuardÊèí‰ª∂ÔºåÈªòËÆ§false&#xA;     */&#xA;    findConstraintReferencedIds = true&#xA;    //Áî®‰∫éÂ¢ûÈáèÊ∑∑Ê∑ÜÁöÑ mapping Êñá‰ª∂&#xA;    mappingFile = file(&#34;xml-class-mapping.txt&#34;)&#xA;    //Êõ¥ÊîπmanifestÊñá‰ª∂ÁöÑpackageÂ±ûÊÄßÔºåÂç≥ÂåÖÂêç&#xA;    packageChange = [&#34;com.ljx.example&#34;: &#34;ab.cd&#34;]&#xA;    //ÁßªÂä®ÁõÆÂΩï&#xA;    moveDir = [&#34;com.ljx.example&#34;: &#34;ef.gh&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ê≠§Êó∂Â∞±ÂèØ‰ª•Âú®&lt;code&gt;Gradle&lt;/code&gt;Ê†è‰∏≠ÔºåÊâæÂà∞‰ª•‰∏ã4‰∏™‰ªªÂä°&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e98f0285572474182947cdfdc7c064d~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;‰ªªÂä°‰ªãÁªç&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;XmlClassGuard&lt;/code&gt;Êèí‰ª∂ÂÖ±Êúâ4‰∏™‰ªªÂä°ÔºåÂàÜÂà´ÊòØ&lt;code&gt;findConstraintReferencedIds&lt;/code&gt;„ÄÅ&lt;code&gt;moveDir&lt;/code&gt;„ÄÅ&lt;code&gt;packageChange&lt;/code&gt;Âèä&lt;code&gt;xmlClassGuard&lt;/code&gt;ÔºåËøô4‰∏™‰ªªÂä°‰πãÈó¥Ê≤°Êúâ‰ªª‰ΩïÂÖ≥Á≥ªÔºå‰∏ãÈù¢Â∞Ü‰∏Ä‰∏Ä‰ªãÁªç&lt;/p&gt; &#xA;&lt;h2&gt;1„ÄÅfindConstraintReferencedIds&lt;/h2&gt; &#xA;&lt;p&gt;ËØ•‰ªªÂä°ÈúÄË¶ÅÈÖçÂêà&lt;a href=&#34;https://github.com/bytedance/AabResGuard&#34;&gt;AabResGuard&lt;/a&gt;Êèí‰ª∂‰ΩøÁî®ÔºåÂ¶ÇÊûú‰Ω†Êú™‰ΩøÁî®AabResGuardÊèí‰ª∂ÔºåÂèØÂøΩÁï•„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ËøôÈáåÁÆÄÂçï‰ªãÁªç‰∏ãÔºåÁî±‰∫éÁ∫¶ÊùüÂ∏ÉÂ±Ä&lt;code&gt;constraint_referenced_ids&lt;/code&gt;Â±ûÊÄßÁöÑÂÄºÔºåÂÜÖÈÉ®ÊòØÈÄöËøágetIdentifierÊñπÊ≥ïËé∑ÂèñÂÖ∑‰ΩìÁöÑidÔºåËøôÂ∞±Ë¶ÅÊ±ÇÊàë‰ª¨Êää&lt;code&gt;constraint_referenced_ids&lt;/code&gt;Â±ûÊÄßÁöÑÂÄºÊ∑ªÂä†Ëøõ&lt;code&gt;AabResGurad&lt;/code&gt;ÁöÑÁôΩÂêçÂçï‰∏≠ÔºåÂê¶ÂàôÊâìÂåÖÊó∂Ôºåid‰ºöË¢´Ê∑∑Ê∑ÜÔºåÊâìÂåÖÂêéÔºå&lt;code&gt;constraint_referenced_ids&lt;/code&gt;Â±ûÊÄß‰ºöÂ§±ÊïàÔºåUIÂ∞ÜÂá∫Áé∞ÂºÇÂ∏∏„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ÁÑ∂ËÄåÔºåÈ°πÁõÆ‰∏≠ÂèØËÉΩÂæàÂ§öÂú∞ÊñπÈÉΩÁî®Âà∞&lt;code&gt;constraint_referenced_ids&lt;/code&gt;Â±ûÊÄßÔºåÂπ∂‰∏îÂÄºÈùûÂ∏∏Â§öÔºåË¶Å‰∏Ä‰∏™‰∏™ÊâæÂá∫Êù•Âπ∂ÊâãÂä®Ê∑ªÂä†Âà∞&lt;code&gt;AabResGuard&lt;/code&gt;ÁöÑÁôΩÂêçÂçï‰∏≠ÔºåÊó†ÁñëÊòØ‰∏ÄÈ°πÁπÅÁêêÁöÑÂ∑•‰ΩúÔºå‰∫éÊòØ‰πéÔºå&lt;code&gt;findConstraintReferencedIds&lt;/code&gt;‰ªªÂä°Â∞±Ê¥æ‰∏äÁî®Âú∫‰∫ÜÔºåÂÆÉÊòØÂú®ÊâìÂåÖÊó∂ÔºåËá™Âä®Êü•Êâæ&lt;code&gt;constraint_referenced_ids&lt;/code&gt;Â±ûÊÄßÂπ∂Ê∑ªÂä†Ëøõ&lt;code&gt;AabResGuard&lt;/code&gt;ÁöÑÁôΩÂêçÂçï‰∏≠ÔºåÈùûÂ∏∏ÂÆûÁî®ÁöÑÂäüËÉΩÔºå‰Ω†‰ªÖÈúÄË¶ÅÂú®&lt;code&gt;XmlClassGurad&lt;/code&gt;ÁöÑÈÖçÁΩÆ&lt;code&gt;findConstraintReferencedIds&lt;/code&gt;‰∏∫trueÂç≥ÂèØÔºåÂ¶Ç‰∏ãÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;//‰ª•‰∏ãÂùá‰∏∫ÈùûÂøÖÈ°ª&#xA;xmlClassGuard {&#xA;    /*&#xA;     * ÊòØÂê¶Êü•ÊâæÁ∫¶ÊùüÂ∏ÉÂ±ÄÁöÑconstraint_referenced_idsÂ±ûÊÄßÁöÑÂÄºÔºåÂπ∂Ê∑ªÂä†Âà∞AabResGuardÁöÑÁôΩÂêçÂçï‰∏≠Ôºå&#xA;     * trueÁöÑËØùÔºåË¶ÅÊ±Ç‰Ω†Âú®XmlClassGuardÂâç‰æùËµñAabResGuardÊèí‰ª∂ÔºåÈªòËÆ§false&#xA;     */&#xA;    findConstraintReferencedIds = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;findConstraintReferencedIds&lt;/code&gt;‰ªªÂä°‰∏çÈúÄË¶ÅÊâãÂä®ÊâßË°åÔºåÊâìÂåÖ(aab)Êó∂‰ºöËá™Âä®ÊâßË°å&lt;/p&gt; &#xA;&lt;h2&gt;2„ÄÅmoveDir&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;moveDir&lt;/code&gt;ÊòØ‰∏Ä‰∏™ÁßªÂä®ÁõÆÂΩïÁöÑ‰ªªÂä°ÔºåÂÆÉÊîØÊåÅÂêåÊó∂ÁßªÂä®‰ªªÊÑè‰∏™ÁõÆÂΩïÔºåÂÆÉ‰ºöÂ∞ÜÂéüÁõÆÂΩï‰∏ãÁöÑÊâÄÊúâÊñá‰ª∂(ÂåÖÊã¨Â≠êÁõÆÂΩï)ÁßªÂä®Âà∞Âè¶Â§ñ‰∏Ä‰∏™Êñá‰ª∂Â§π‰∏ãÔºåÂπ∂Â∞ÜÁßªÂä®ÁöÑÁªìÊûúÔºåÂêåÊ≠•Âà∞ÂÖ∂‰ªñÊñá‰ª∂‰∏≠ÔºåÈÖçÁΩÆÂ¶Ç‰∏ãÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;xmlClassGuard {&#xA;    //ÁßªÂä®ÁõÆÂΩï&#xA;    moveDir = [&#34;com.ljx.example&#34;: &#34;ef.gh&#34;,&#xA;               &#34;com.ljx.example.test&#34;: &#34;ff.gg&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‰∏äÈù¢‰ª£Á†Å‰∏≠&lt;code&gt;moveDir&lt;/code&gt;ÊòØ‰∏Ä‰∏™MapÂØπË±°ÔºåÂÖ∂‰∏≠key‰ª£Ë°®Ë¶ÅÁßªÂä®ÁöÑÁõÆÂΩïÔºåvalue‰ª£Ë°®ÁõÆÊ†áÁõÆÂΩïÔºõ ‰∏äÈù¢‰ªªÂä°‰ºöÊää&lt;code&gt;com.ljx.example&lt;/code&gt;ÁõÆÂΩï‰∏ãÁöÑÊâÄÊúâÊñá‰ª∂ÔºåÁßªÂä®Âà∞&lt;code&gt;ef.gh&lt;/code&gt; ÁõÆÂΩï‰∏ãÔºåÂ∞Ü&lt;code&gt;com.ljx.example.test&lt;/code&gt;ÁõÆÂΩï‰∏ãÁöÑÊâÄÊúâÊñá‰ª∂ÁßªÂä®Âà∞&lt;code&gt;ff.gg&lt;/code&gt;ÁõÆÂΩï‰∏ã&lt;/p&gt; &#xA;&lt;h2&gt;3„ÄÅpackageChange&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;packageChange&lt;/code&gt;ÊòØ‰∏Ä‰∏™Êõ¥Êîπ&lt;code&gt;manifest&lt;/code&gt;Êñá‰ª∂Èáå&lt;code&gt;package&lt;/code&gt;Â±ûÊÄßÁöÑ‰ªªÂä°Ôºå‰πüÂ∞±ÊòØÊõ¥ÊîπappÂåÖÂêçÁöÑ‰ªªÂä°(‰∏ç‰ºöÊõ¥ÊîπapplicationId) ÔºåÊîπÂÆåÂêéÔºå‰ºöÂ∞ÜÊõ¥ÊîπÁªìÊûúÔºåÂêåÊ≠•Âà∞ÂÖ∂‰ªñÊñá‰ª∂‰∏≠(‰∏ç‰ºöÊõ¥ÊîπÈ°πÁõÆÁªìÊûÑ)ÔºåÈÖçÁΩÆÂ¶Ç‰∏ãÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;xmlClassGuard {&#xA;    //Êõ¥ÊîπmanifestÊñá‰ª∂ÁöÑpackageÂ±ûÊÄßÔºåÂç≥ÂåÖÂêç&#xA;    packageChange = [&#34;com.ljx.example&#34;: &#34;ab.cd&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‰ª•‰∏ä&lt;code&gt;packageChange&lt;/code&gt;ÊòØ‰∏Ä‰∏™MapÂØπË±°Ôºåkey‰∏∫ÂéüÂßãpackageÂ±ûÊÄßÔºåvalue‰∏∫Ë¶ÅÊõ¥ÊîπÁöÑpackageÂ±ûÊÄßÔºåÂéüÂßãpackageÂ±ûÊÄß‰∏çÂåπÈÖçÔºåÂ∞ÜÊõ¥ÊîπÂ§±Ë¥•&lt;/p&gt; &#xA;&lt;h2&gt;4„ÄÅxmlClassGuard&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;xmlClassGuard&lt;/code&gt;ÊòØ‰∏Ä‰∏™Ê∑∑Ê∑ÜÁ±ªÁöÑ‰ªªÂä°ÔºåËØ•‰ªªÂä°‰ºöÊ£ÄÁ¥¢&lt;code&gt;AndroidManifest.xml&lt;/code&gt;Âèä&lt;code&gt;navigation„ÄÅlayout&lt;/code&gt; Êñá‰ª∂Â§π‰∏ãÁöÑxmlÊñá‰ª∂ÔºåÊâæÂá∫xmlÊñá‰ª∂‰∏≠ÂºïÁî®Âà∞ÁöÑÁ±ªÔºåÂ¶Ç4Â§ßÁªÑ‰ª∂ÂèäËá™ÂÆö‰πâViewÁ≠âÔºåÊõ¥ÊîπÂÖ∂&lt;code&gt;ÂåÖÂêç+Á±ªÂêç&lt;/code&gt;ÔºåÂπ∂Â∞ÜÊõ¥ÊîπÁöÑÁªìÊûúÔºåÂêåÊ≠•Âà∞ÂÖ∂‰ªñÊñá‰ª∂‰∏≠ÔºåÊúÄÂêé‰ºöÂ∞ÜÊ∑∑Ê∑ÜÊò†Â∞ÑÂÜôÂá∫Âà∞mappingÊñá‰ª∂‰∏≠ÔºåÈÖçÁΩÆÂ¶Ç‰∏ãÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;xmlClassGuard {&#xA;    //Áî®‰∫éÂ¢ûÈáèÊ∑∑Ê∑ÜÁöÑ mapping Êñá‰ª∂&#xA;    mappingFile = file(&#34;xml-class-mapping.txt&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‰∏äÈù¢ÈÖçÁΩÆÁöÑ&lt;code&gt;mappingFile&lt;/code&gt;ÂèØ‰ª•ÊòØ‰∏Ä‰∏™‰∏çÂ≠òÂú®ÁöÑÊñá‰ª∂ÔºåÊ∑∑Ê∑ÜÁªìÊùüÂêéÔºå‰ºöÂ∞ÜÊ∑∑Ê∑ÜÊò†Â∞ÑÂÜôÂá∫Âà∞ËØ•Êñá‰ª∂‰∏≠ÔºåÂ¶Ç‰∏ãÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;dir mapping:&#xA;    com.ljx.example -&amp;gt; e&#xA;    com.ljx.example.activity -&amp;gt; dh&#xA;&#xA;class mapping:&#xA;    com.ljx.example.AppHolder -&amp;gt; e.B&#xA;    com.ljx.example.activity.MainActivity -&amp;gt; dh.C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;dir mapping&lt;/code&gt;ÊòØÊ∑∑Ê∑ÜÁöÑÁõÆÂΩïÂàóË°®Ôºå&lt;code&gt;class mapping&lt;/code&gt;ÊòØÂÖ∑‰ΩìÁ±ªÁöÑÊ∑∑Ê∑ÜÂàóË°®&lt;/p&gt; &#xA;&lt;h2&gt;4„ÄÅÊ∑∑Ê∑Ü‰ªªÊÑèÁ±ª&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;xmlClassGuard&lt;/code&gt;‰ªªÂä°ÊòØÊîØÊåÅÂ¢ûÈáèÊ∑∑Ê∑ÜÁöÑÔºåÂ¶ÇÊûú‰Ω†ÈúÄË¶ÅÊ∑∑Ê∑ÜÊåáÂÆöÁöÑÁ±ª&lt;code&gt;com.ljx.example.test.Test&lt;/code&gt;Ôºå‰æøÂèØ‰ª•Âú®&lt;code&gt;dir mapping&lt;/code&gt;‰∏ãÂÜôÂÖ•&lt;code&gt;com.ljx.example.test -&amp;gt; h&lt;/code&gt;, Ê≠§Êó∂ÂÜçÊ¨°ÊâßË°å&lt;code&gt;xmlClassGuard&lt;/code&gt;‰ªªÂä°Ôºå‰æø‰ºöÂ∞Ü&lt;code&gt;com.ljx.example.test&lt;/code&gt;ÁõÆÂΩï‰∏ãÁöÑÊâÄÊúâÁ±ª(‰∏çÂåÖÂê´Â≠êÁõÆÂΩï‰∏ãÁöÑÁ±ª) ÁßªÂä®Âà∞&lt;code&gt;h&lt;/code&gt;Êñá‰ª∂Â§π‰∏≠ÔºåÂπ∂Â∞ÜÊâÄÊúâÁ±ªÂêçÊ∑∑Ê∑ÜÔºåÂÜçÊ¨°Ê∑∑Ê∑ÜÁöÑÂêémappingÊñá‰ª∂Â¶Ç‰∏ãÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;dir mapping:&#xA;    com.ljx.example -&amp;gt; e&#xA;    com.ljx.example.activity -&amp;gt; dh&#xA;    com.ljx.example.test -&amp;gt; h&#xA;&#xA;class mapping:&#xA;    com.ljx.example.AppHolder -&amp;gt; e.B&#xA;    com.ljx.example.activity.MainActivity -&amp;gt; dh.C&#xA;    com.ljx.example.test.Test -&amp;gt; h.D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÊâãÂä®ËæìÂÖ•Ê∑∑Ê∑ÜËßÑÂàôÔºåÈúÄË¶ÅÊ≥®ÊÑè‰ª•‰∏ãÂá†Êù°ËßÑÂàô&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32f446561004426193dae50537488180~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;mapping_rule.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;5„ÄÅÊØèÊ¨°Ê∑∑Ê∑Ü‰∫ßÁîü‰∏ç‰∏ÄÊ†∑ÁöÑÁªìÊûú&lt;/h2&gt; &#xA;&lt;p&gt;ÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåÊØèÊ¨°Ê∑∑Ê∑ÜÔºåÈÉΩÂ∞Ü‰∫ßÁîü‰∏ÄÊ†∑ÁöÑÁªìÊûúÔºåÊ∑∑Ê∑ÜÁöÑÂåÖÂêçÊ†πÊçÆÂìàÂ∏åÁÆóÊ≥ïÂæóÂá∫ÔºåÊ∑∑Ê∑ÜÁöÑÁ±ªÂêçÔºå‰ªéÂ§ßÂÜôÂ≠óÊØçAÂºÄÂêØÔºå‰æùÊ¨°ÈÄíÂ¢ûÔºåÂ¶ÇÔºö&lt;code&gt;A B C ... Y Z BA BB .. ZY ZZ BAA...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Â¶ÇÊûú‰Ω†ÈúÄË¶ÅÊØèÊ¨°Ê∑∑Ê∑Ü‰∫ßÁîü‰∏ç‰∏ÄÊ†∑ÁöÑÁªìÊûúÔºåÂè™ÈúÄÂÅö‰∏§Ê≠•&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ÂØπ‰∫éÂåÖÂêçÔºåÈúÄË¶Å‰Ω†ÈÖçÁΩÆÊØè‰∏Ä‰∏™&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ÂØπ‰∫éÁ±ªÂêçÔºåÂèØ‰ª•ÊØè‰∏Ä‰∏™ÈÉΩÂéªÈÖçÁΩÆÔºå‰ΩÜÁ±ªÂ§™Â§öÊó∂ÔºåÈÖçÁΩÆÊØè‰∏Ä‰∏™ÔºåÂ∞±ÊòæÂæóÁπÅÁêêÔºåÊ≠§Êó∂‰ªÖÈúÄË¶ÅÈÖçÁΩÆ‰∏Ä‰∏™Âç≥ÂèØ&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Â¶ÇÊàë‰ª¨‰øÆÊîπ‰∏Ä‰∏ã‰∏äÈù¢ÁöÑ&lt;code&gt;mapping&lt;/code&gt;Êñá‰ª∂ÔºåÂ¶Ç‰∏ã&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;dir mapping:&#xA;    com.ljx.example -&amp;gt; hh&#xA;    com.ljx.example.activity -&amp;gt; jk&#xA;    com.ljx.example.test -&amp;gt; et&#xA;&#xA;class mapping:&#xA;    com.ljx.example.AppHolder -&amp;gt; hh.Z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ê≠§Êó∂ÊâßË°å&lt;code&gt;xmlClassGuard&lt;/code&gt;‰ªªÂä°ÔºåÂ∞±‰ºö‰∫ßÁîü‰∏ç‰∏ÄÊ†∑ÁöÑÁªìÊûúÔºåÂ¶Ç‰∏ãÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;dir mapping:&#xA;&#x9;com.ljx.example -&amp;gt; hh&#xA;&#x9;com.ljx.example.activity -&amp;gt; jk&#xA;&#x9;com.ljx.example.test -&amp;gt; et&#xA;&#xA;class mapping:&#xA;&#x9;com.ljx.example.AppHolder -&amp;gt; hh.Z&#xA;&#x9;com.ljx.example.activity.MainActivity -&amp;gt; jk.BA&#xA;&#x9;com.ljx.example.test.Test -&amp;gt; et.BC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÂèØ‰ª•ÁúãÂà∞ÔºåÂåÖÂêçÂÆåÂÖ®ÊòØÊ†πÊçÆËá™ÂÆö‰πâÁîüÊàêÁöÑÁªìÊûúÔºåËÄåÁ±ªÂêç‰æø‰ªé&lt;code&gt;Z&lt;/code&gt;ÂºÄÂßãÔºå‰æùÊ¨°ÈÄíÂ¢û&lt;code&gt;Z BA BC ...&lt;/code&gt;, ËøôÈáåÂèØ‰ª•ÊääÁ±ªÂêçÁúãÊàê26ËøõÂà∂ÁöÑÂ≠óÁ¨¶‰∏≤‰æùÊ¨°ÈÄíÂ¢û&lt;/p&gt; &#xA;&lt;h1&gt;Ê≥®ÊÑè‰∫ãÈ°π‚ö†Ô∏è&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ë¶ÅÊ∑∑Ê∑ÜÁöÑÁ±ªÔºåË¶ÅÈÅøÂÖç‰∏éÂÖ∂‰ªñÁ±ªÂêåÂêçÔºåÂê¶ÂàôÁ±ªÂêçÊõøÊç¢Êó∂Ôºå‰ºöÂá∫Áé∞ËØØÊùÄÊÉÖÂÜµ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Á±ªÊ∑∑Ê∑ÜÂêéÔºåÁ±ªÁöÑÂåÖÂêç(Ë∑ØÂæÑ)‰πü‰ºöË¢´Ê∑∑Ê∑ÜÔºåÊâÄ‰ª•ÔºåÂ¶ÇÊûú‰Ω†Áî®Âà∞‰∏Ä‰∫õ‰∏âÊñπÂ∫ìÔºåÊúâÈÖçÁΩÆÂåÖÂêçÁöÑÂú∞ÊñπÔºåËÆ∞ÂæóÊâãÂä®Êõ¥Êîπ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;XmlClassGuard&lt;/code&gt;‰∏ç‰ºöÊõ¥Êîπ&lt;code&gt;proguard-rules.pro&lt;/code&gt;Êñá‰ª∂ÁöÑÂÜÖÂÆπÔºåÊâÄ‰ª•ÔºåÁ±ªÊ∑∑Ê∑ÜÂêéÔºåÂ¶ÇÊûúËØ•Êñá‰ª∂ÂÜÖÂÆπÊúâÊ∑∑Ê∑ÜÂâçÁöÑÁ±ªÊàñÁõÆÂΩïÔºå‰πüËÆ∞ÂæóÊâãÂä®Êõ¥Êîπ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;XmlClassGuard&lt;/code&gt;Âè™‰ºöÂ∏Æ‰Ω†Êõ¥Êîπ&lt;code&gt;ÂåÖÂêç+Á±ªÂêç&lt;/code&gt;ÔºåÂπ∂ÂêåÊ≠•Â∏¶ÂÖ∂‰ªñÊñá‰ª∂‰∏≠Ôºå‰∏ç‰ºöÊõ¥Êîπ‰Ω†ÁöÑ‰ªª‰Ωï‰ª£Á†ÅÈÄªËæëÔºåÂ¶ÇÊ∑∑Ê∑ÜÂêéÔºåÂá∫Áé∞ÈÉ®ÂàÜÂäüËÉΩ‰∏çÊ≠£Â∏∏ÈóÆÈ¢òÔºåÈúÄË¶Å‰Ω†Ëá™Â∑±Êü•ÊâæÂéüÂõ†ÔºåÂ¶ÇÊûúÊòØ&lt;code&gt;XmlClassGuard&lt;/code&gt;ÁöÑÈóÆÈ¢òÔºåÊ¨¢ËøéÊèê&lt;a href=&#34;https://github.com/liujingxing/XmlClassGuard/issues&#34;&gt;issue&lt;/a&gt;Êàñ&lt;a href=&#34;https://github.com/liujingxing/XmlClassGuard/pulls&#34;&gt;PR&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;Â¶ÇÊûúÂÆÉÂØπ‰Ω†Â∏ÆÂä©ÂæàÂ§ßÔºåÂπ∂‰∏î‰Ω†ÂæàÊÉ≥ÊîØÊåÅÂ∫ìÁöÑÂêéÁª≠ÂºÄÂèëÂíåÁª¥Êä§ÔºåÈÇ£‰πà‰Ω†ÂèØ‰ª•Êâ´‰∏ãÊñπ‰∫åÁª¥Á†ÅÈöèÊÑèÊâìËµèÊàëÔºåÂ∞±ÂΩìÊòØËØ∑ÊàëÂñùÊùØÂíñÂï°ÊàñÊòØÂï§ÈÖíÔºåÂºÄÊ∫ê‰∏çÊòìÔºåÊÑüÊøÄ‰∏çÂ∞Ω&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aafa7d05cfda4b2ea2a092bba8ebc1a0~tplv-k3u1fbpfcp-watermark.image&#34; alt=&#34;rxhttp_donate.png&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>android/play-billing-samples</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/android/play-billing-samples</id>
    <link href="https://github.com/android/play-billing-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Samples for Google Play In-app Billing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google Play Billing Samples&lt;/h1&gt; &#xA;&lt;p&gt;Sample applications for Google Play Billing. To build each sample, see the README instructions in the project directory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/play-billing-samples/tree/master/TrivialDriveJava&#34;&gt;Trivial Drive Java&lt;/a&gt; - Purchase items/subscriptions in your Android app (serverless).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/play-billing-samples/tree/master/TrivialDriveKotlin&#34;&gt;Trivial Drive Kotlin&lt;/a&gt; - Purchase items/subscriptions in your Android app (serverless).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/play-billing-samples/tree/master/ClassyTaxiAppKotlin&#34;&gt;Classy Taxi Kotlin App&lt;/a&gt; - Purchase subscriptions in your Android app and manage subscriptions on your server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/play-billing-samples/tree/master/ClassyTaxiJava&#34;&gt;Classy Taxi Java App&lt;/a&gt; - Purchase subscriptions in your Android app and manage subscriptions on your server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/play-billing-samples/tree/master/ClassyTaxiServer&#34;&gt;Classy Taxi Server&lt;/a&gt; - Manage subscriptions on your server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Google Play Billing&lt;/h2&gt; &#xA;&lt;p&gt;For more information about Google Play Billing, see the documentation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/google/play/billing/billing_overview&#34;&gt;Google Play Billing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/google/play/billing/billing_library_overview&#34;&gt;Google Play Billing Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/google/play/developer-api&#34;&gt;Google Play Developer API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/google/play/billing/realtime_developer_notifications&#34;&gt;Real-time Developer Notifications&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;CHANGELOG&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-05-18&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Updated all samples for Google Play Billing Library v4.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-04-28&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Publish &lt;code&gt;TrivialDriveJava&lt;/code&gt; : Billing Library Java sample for purchases.&lt;/li&gt; &#xA;   &lt;li&gt;Rewrite &lt;code&gt;TrivialDriveKotlin&lt;/code&gt; : Billing Library Java/Kotlin hybrid sample for purchases, now supports billing ktx/coroutines.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-02-28&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Publish &lt;code&gt;ClassyTaxiJava&lt;/code&gt;: Billing Library Java sample - currently only supports subscriptions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2019-12-30&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Restructure &lt;code&gt;ClassyTaxi&lt;/code&gt; to separate Android, web, and server implementations. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The &lt;code&gt;ClassyTaxi&lt;/code&gt; Android app now lives &lt;a href=&#34;https://github.com/android/play-billing-samples/tree/master/ClassyTaxiAppKotlin&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;The &lt;code&gt;ClassyTaxi&lt;/code&gt; read-only web app now lives &lt;a href=&#34;https://github.com/android/play-billing-samples/tree/master/ClassyTaxiAppWeb&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;The &lt;code&gt;ClassyTaxi&lt;/code&gt; server implementation now lives &lt;a href=&#34;https://github.com/android/play-billing-samples/tree/master/ClassyTaxiServer&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2019-10-10&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Remove apps that do not support Google Play Billing Library 2.0 or newer. The AIDL and older versions of the Google Play Billing Library are deprecated. The old samples are available on GitHub at the following links: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/android/play-billing-samples/tree/7a94c6905a9c125518354c216b5c3094fde47ce1/TrivialDrive&#34;&gt;&lt;code&gt;TrivialDrive&lt;/code&gt; archive&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/android/play-billing-samples/tree/7a94c6905a9c125518354c216b5c3094fde47ce1/TrivialDrive_v2&#34;&gt;&lt;code&gt;TrivialDrive_v2&lt;/code&gt; archive&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2019-01-16&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Publish &lt;code&gt;TrivialDriveKotlin&lt;/code&gt;: Kotlin sample&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2018-05-03&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Publish &lt;code&gt;ClassyTaxi&lt;/code&gt;: Subscriptions sample&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2017-07-12&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Publish &lt;code&gt;TrivialDrive_v2&lt;/code&gt;: Billing Library 1.0 sample&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2015-09-18&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Initial repo port to GitHub&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;TrivialDrive&lt;/code&gt;: AIDL sample&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>florisboard/florisboard</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/florisboard/florisboard</id>
    <link href="https://github.com/florisboard/florisboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source keyboard for Android which respects your privacy. Currently in early-beta.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img align=&#34;left&#34; width=&#34;80&#34; height=&#34;80&#34; src=&#34;https://raw.githubusercontent.com/florisboard/florisboard/master/.github/repo_icon.png&#34; alt=&#34;App icon&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;FlorisBoard &lt;a href=&#34;https://crowdin.florisboard.patrickgold.dev&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/florisboard/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#florisboard:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-%23florisboard%3amatrix.org-blue&#34; alt=&#34;Matrix badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/florisboard/florisboard/workflows/FlorisBoard%20CI/badge.svg?event=push&#34; alt=&#34;FlorisBoard CI&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;FlorisBoard&lt;/strong&gt; is a free and open-source keyboard for Android 7.0+ devices. It aims at being modern, user-friendly and customizable while fully respecting your privacy. Currently in early-beta state.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;h3&gt;Stable &lt;a href=&#34;https://github.com/florisboard/florisboard/releases/latest&#34;&gt;&lt;img alt=&#34;Latest stable release&#34; src=&#34;https://img.shields.io/github/v/release/florisboard/florisboard&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;h3&gt;Beta &lt;a href=&#34;https://github.com/florisboard/florisboard/releases&#34;&gt;&lt;img alt=&#34;Latest beta release&#34; src=&#34;https://img.shields.io/github/v/release/florisboard/florisboard?include_prereleases&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td valign=&#34;top&#34;&gt; &lt;p&gt;&lt;i&gt;Major versions only, 1 release per 1-5 months&lt;/i&gt;&lt;br&gt;&lt;br&gt;Updates are more polished, new features are matured and tested through to ensure a stable experience.&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td valign=&#34;top&#34;&gt; &lt;p&gt;&lt;i&gt;Beta versions, up to 1-2 releases per week&lt;/i&gt;&lt;br&gt;&lt;br&gt;Updates contain new features that may not be fully matured yet and bugs are more likely to occur. Allows you to give early feedback.&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td valign=&#34;top&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://f-droid.org/packages/dev.patrickgold.florisboard&#34;&gt;&lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; height=&#34;64&#34; alt=&#34;F-Droid badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Google Play&lt;/strong&gt;: Join the &lt;a href=&#34;https://groups.google.com/g/florisboard-public-alpha-test&#34;&gt;FlorisBoard Test Group&lt;/a&gt;, then visit the &lt;a href=&#34;https://play.google.com/apps/testing/dev.patrickgold.florisboard&#34;&gt;testing page&lt;/a&gt;. Once joined and installed, updates will be delivered like for any other app. (&lt;a href=&#34;https://play.google.com/store/apps/details?id=dev.patrickgold.florisboard&#34;&gt;Store entry&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Manual&lt;/strong&gt;: Download and install the APK from the release page.&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td valign=&#34;top&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://apt.izzysoft.de/fdroid/index/apk/dev.patrickgold.florisboard.beta&#34;&gt;&lt;img src=&#34;https://gitlab.com/IzzyOnDroid/repo/-/raw/master/assets/IzzyOnDroid.png&#34; height=&#34;64&#34; alt=&#34;IzzySoft repo badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Google Play&lt;/strong&gt;: Join the &lt;a href=&#34;https://groups.google.com/g/florisboard-public-alpha-test&#34;&gt;FlorisBoard Test Group&lt;/a&gt;, then visit the &lt;a href=&#34;https://play.google.com/apps/testing/dev.patrickgold.florisboard.beta&#34;&gt;beta testing page&lt;/a&gt;. Once joined and installed, updates will be delivered like for any other app. (&lt;a href=&#34;https://play.google.com/store/apps/details?id=dev.patrickgold.florisboard.beta&#34;&gt;Store entry&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Manual&lt;/strong&gt;: Download and install the APK from the release page.&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Beginning with v0.4.0 FlorisBoard will follow &lt;a href=&#34;https://semver.org/#summary&#34;&gt;SemVer&lt;/a&gt; versioning scheme and enter the public beta on Google Play.&lt;/p&gt; &#xA;&lt;h2&gt;Highlighted features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrated clipboard manager / history&lt;/li&gt; &#xA; &lt;li&gt;Advanced theming support and customization&lt;/li&gt; &#xA; &lt;li&gt;Integrated extension support (still evolving)&lt;/li&gt; &#xA; &lt;li&gt;Emoji keyboard&lt;/li&gt; &#xA; &lt;li&gt;Spell checking service&lt;/li&gt; &#xA; &lt;li&gt;Glide typing (currently English only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Word suggestions are not included in the current releases and are a major goal for the v0.4.0 milestone.&lt;/p&gt; &#xA;&lt;p&gt;Feature roadmap: See &lt;a href=&#34;https://raw.githubusercontent.com/florisboard/florisboard/master/ROADMAP.md&#34;&gt;ROADMAP.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Wanna contribute to FlorisBoard? That&#39;s great to hear! There are lots of different ways to help out. Bug reporting, making pull requests, translating FlorisBoard to make it more accessible, etc. For more information see the &lt;a href=&#34;https://raw.githubusercontent.com/florisboard/florisboard/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;. Thank you for your help!&lt;/p&gt; &#xA;&lt;h2&gt;List of permissions FlorisBoard requests&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to this &lt;a href=&#34;https://github.com/florisboard/florisboard/wiki/List-of-permissions-FlorisBoard-requests&#34;&gt;page&lt;/a&gt; to get more information on this topic.&lt;/p&gt; &#xA;&lt;h2&gt;Used libraries, components and icons&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/androidx/androidx&#34;&gt;AndroidX libraries&lt;/a&gt; by &lt;a href=&#34;https://github.com/androidx&#34;&gt;Android Jetpack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/accompanist/&#34;&gt;Accompanist Compose UI libraries&lt;/a&gt; by &lt;a href=&#34;https://github.com/google&#34;&gt;Google&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikepenz/AboutLibraries&#34;&gt;AboutLibraries&lt;/a&gt; by &lt;a href=&#34;https://github.com/mikepenz&#34;&gt;mikepenz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/material-design-icons&#34;&gt;Google Material icons&lt;/a&gt; by &lt;a href=&#34;https://github.com/google&#34;&gt;Google&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/patrickgold/jetpref&#34;&gt;JetPref preference library&lt;/a&gt; by &lt;a href=&#34;https://github.com/patrickgold&#34;&gt;patrickgold&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kotlin/kotlinx.coroutines&#34;&gt;KotlinX coroutines library&lt;/a&gt; by &lt;a href=&#34;https://github.com/Kotlin&#34;&gt;Kotlin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kotlin/kotlinx.serialization&#34;&gt;KotlinX serialization library&lt;/a&gt; by &lt;a href=&#34;https://github.com/Kotlin&#34;&gt;Kotlin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unicode-org/icu&#34;&gt;ICU4C&lt;/a&gt; by &lt;a href=&#34;https://github.com/unicode-org&#34;&gt;The Unicode Consortium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nuspell/nuspell&#34;&gt;Nuspell&lt;/a&gt; by &lt;a href=&#34;https://github.com/nuspell&#34;&gt;Nuspell&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Many thanks to &lt;a href=&#34;https://www.behance.net/nikolayanzarov&#34;&gt;Nikolay Anzarov&lt;/a&gt; (&lt;a href=&#34;https://github.com/BloodRaven0&#34;&gt;@BloodRaven0&lt;/a&gt;) for designing and providing the main app icons to this project!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2020-2022 Patrick Goldinger&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>GetStream/stream-chat-android</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/GetStream/stream-chat-android</id>
    <link href="https://github.com/GetStream/stream-chat-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üí¨ Android Chat SDK ‚ûú Stream Chat API. UI component libraries for chat apps. Kotlin &amp; Jetpack Compose messaging SDK for Android chat&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Official Android SDK for &lt;a href=&#34;https://getstream.io/chat/sdk/android/&#34;&gt;Stream Chat&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://getstream.io/tutorials/android-chat/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/docs/sdk-hero-android.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/GetStream/stream-chat-android/actions&#34;&gt;&lt;img src=&#34;https://github.com/GetStream/stream-chat-android/workflows/Build%20and%20test/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GetStream/stream-chat-android/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/GetStream/stream-chat-android&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This is the official Android SDK for &lt;a href=&#34;https://getstream.io/chat/sdk/android/&#34;&gt;Stream Chat&lt;/a&gt;, a service for building chat and messaging applications. This library includes both a low-level chat SDK and a set of reusable UI components. Most users start with the UI components, and fall back to the lower level API when they want to customize things.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re proud to say that we&#39;re the first Android Chat SDK that supports Jetpack Compose! We &lt;a href=&#34;https://github.com/GetStream/stream-chat-android/releases/tag/4.15.0&#34;&gt;released&lt;/a&gt; our Compose UI Components one day after the official Jetpack Compose 1.0 release and our team members have been working hard on it since then.&lt;/p&gt; &#xA;&lt;p&gt;Now it&#39;s mature and stable enough for us to officially recommend it for all new applications and all modern chat implementations. If you&#39;re looking for something highly customizable and extremely performant, check out our &lt;a href=&#34;https://getstream.io/chat/sdk/compose/&#34;&gt;Compose SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Android SDK supports both Kotlin and Java, but &lt;em&gt;we strongly recommend using Kotlin&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The Compose SDK supports only Kotlin, since Compose uses Kotlin compiler plugins to process the UI.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;üîó Quick Links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/trial/&#34;&gt;Register&lt;/a&gt;: Create an account and get an API key for Stream Chat&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/tutorials/android-chat/#kotlin&#34;&gt;Chat Tutorial&lt;/a&gt;: Learn the basics of the SDK by by building a simple messaging app (Kotlin or Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components-sample&#34;&gt;UI Components sample app&lt;/a&gt;: Full messaging app with threads, reactions, optimistic UI updates and offline storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose-sample&#34;&gt;Compose UI Components sample app&lt;/a&gt;: Messaging sample app built with Jetpack Compose!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/android/?language=kotlin&#34;&gt;Client Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/&#34;&gt;UI Components Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/compose/overview/&#34;&gt;Compose UI Components Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.github.io/stream-chat-android/&#34;&gt;API docs&lt;/a&gt;: Full generated docs from Dokka&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/GetStream/projects/6&#34;&gt;Jetpack Compose Planning&lt;/a&gt;: Jetpack Compose public project management board and milestone overview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üë©‚Äçüíª Free for Makers üë®‚Äçüíª&lt;/h2&gt; &#xA;&lt;p&gt;Stream is free for most side and hobby projects. To qualify, your project/company needs to have &amp;lt; 5 team members and &amp;lt; $10k in monthly revenue. For complete pricing details, visit our &lt;a href=&#34;https://getstream.io/chat/pricing/&#34;&gt;Chat Pricing Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üó∫Ô∏è Overview and Documentation üìö&lt;/h2&gt; &#xA;&lt;p&gt;This SDK consists of two low-level artifacts you can build on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-client&#34;&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/a&gt;: A low-level client for making API calls and receiving chat events. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/android/?language=kotlin&#34;&gt;Documentation website&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-offline&#34;&gt;&lt;strong&gt;Offline support&lt;/strong&gt;&lt;/a&gt;: Local caching and automatic retries, exposed via Flow and LiveData APIs. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/client/guides/offline-support/&#34;&gt;Offline Support&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;We also have two UI SDKs&lt;/strong&gt;. You can use our Compose UI Components SDK, or if you&#39;re using older UI solutions, the XML-based UI Components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose&#34;&gt;&lt;strong&gt;Compose UI Components&lt;/strong&gt;&lt;/a&gt;: Reusable and modular Composables for displaying conversations, lists of channels, and more! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose-sample&#34;&gt;Sample app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/compose/overview/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose/GUIDELINES.md&#34;&gt;Compose SDK Guidelines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components&#34;&gt;&lt;strong&gt;UI Components&lt;/strong&gt;&lt;/a&gt;: Reusable and customizable chat Views for displaying conversations, lists of channels, and more! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components-sample&#34;&gt;Sample app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/ui/overview/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Learn more about the modules by visiting &lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üìñ Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;The best place to start is the &lt;a href=&#34;https://getstream.io/chat/compose/tutorial/&#34;&gt;Compose Chat Messaging Tutorial&lt;/a&gt;. It teaches you the basics of using the Compose Chat SDK and also shows how to make frequently required changes.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re using older UI toolkits, like XML, you can follow the &lt;a href=&#34;https://getstream.io/tutorials/android-chat/&#34;&gt;Android Chat Messaging Tutorial&lt;/a&gt; which features the XML-based UI Components.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Installation and Getting Started üöÄ&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/basics/dependencies/&#34;&gt;Dependencies&lt;/a&gt; and &lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/basics/getting-started/&#34;&gt;Getting Started&lt;/a&gt; pages of the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;üèóÔ∏è Jetpack Compose Sample App&lt;/h2&gt; &#xA;&lt;p&gt;Our Jetpack Compose implementation comes with its own &lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose-sample&#34;&gt;example app&lt;/a&gt;, which you can play with to see how awesome Compose is.&lt;/p&gt; &#xA;&lt;p&gt;To run the sample app, start by cloning this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:GetStream/stream-chat-android.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, open &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; and open the newly created project folder. You&#39;ll want to run the &lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose-sample&#34;&gt;&lt;code&gt;stream-chat-android-compose-sample&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;Since Compose is a highly customizable SDK, we&#39;re eager to hear your feedback on how it helps you build complex Chat UI. Join us in &lt;a href=&#34;https://github.com/GetStream/stream-chat-android/discussions&#34;&gt;this repo&#39;s discussions&lt;/a&gt; or tweet at us &lt;a href=&#34;https://twitter.com/getstream_io&#34;&gt;@getstream_io&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;üì≤ Sample App&lt;/h2&gt; &#xA;&lt;p&gt;However, if you&#39;re still using XML due to technical limitations, our UI Components SDK includes a fully functional &lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components-sample&#34;&gt;example app&lt;/a&gt; featuring threads, reactions, typing indicators, optimistic UI updates and offline storage. To run the sample app, start by cloning this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:GetStream/stream-chat-android.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, open &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; and open the newly created project folder. You&#39;ll want to run the &lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components-sample&#34;&gt;&lt;code&gt;stream-chat-android-ui-components-sample&lt;/code&gt;&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;h2&gt;üí° Supported features üé®&lt;/h2&gt; &#xA;&lt;p&gt;Here are some of the features that the SDK supports out-of-the-box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Channels list UI&lt;/li&gt; &#xA; &lt;li&gt;Channel UI&lt;/li&gt; &#xA; &lt;li&gt;Message reactions&lt;/li&gt; &#xA; &lt;li&gt;Link previews&lt;/li&gt; &#xA; &lt;li&gt;Image, video and file attachments&lt;/li&gt; &#xA; &lt;li&gt;Editing and deleting messages&lt;/li&gt; &#xA; &lt;li&gt;Typing indicators&lt;/li&gt; &#xA; &lt;li&gt;Read indicators&lt;/li&gt; &#xA; &lt;li&gt;Push notifications&lt;/li&gt; &#xA; &lt;li&gt;Image gallery&lt;/li&gt; &#xA; &lt;li&gt;GIF support&lt;/li&gt; &#xA; &lt;li&gt;Light and dark themes&lt;/li&gt; &#xA; &lt;li&gt;Style customization&lt;/li&gt; &#xA; &lt;li&gt;UI customization&lt;/li&gt; &#xA; &lt;li&gt;Threads&lt;/li&gt; &#xA; &lt;li&gt;Slash commands&lt;/li&gt; &#xA; &lt;li&gt;Markdown message formatting&lt;/li&gt; &#xA; &lt;li&gt;Unread message counts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more, see the &lt;a href=&#34;https://getstream.io/chat/sdk/android/&#34;&gt;SDK&#39;s website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üíº We are hiring!&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve recently closed a &lt;a href=&#34;https://techcrunch.com/2021/03/04/stream-raises-38m-as-its-chat-and-activity-feed-apis-power-communications-for-1b-users/&#34;&gt;$38 million Series B funding round&lt;/a&gt; and we keep actively growing. Our APIs are used by more than a billion end-users, and you&#39;ll have a chance to make a huge impact on the product within a team of the strongest engineers all over the world. Check out our current openings and apply via &lt;a href=&#34;https://getstream.io/team/#jobs&#34;&gt;Stream&#39;s website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2014-2022 Stream.io Inc. All rights reserved.&#xA;&#xA;Licensed under the Stream License;&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   https://github.com/GetStream/stream-chat-android/blob/main/LICENSE&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>google/accompanist</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/google/accompanist</id>
    <link href="https://github.com/google/accompanist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of extension libraries for Jetpack Compose&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/accompanist/main/docs/header.png&#34; alt=&#34;Accompanist logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Accompanist is a group of libraries that aim to supplement &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt; with features that are commonly required by developers but not yet available.&lt;/p&gt; &#xA;&lt;p&gt;Accompanist is a labs like environment for new Compose APIs. We use it to help fill known gaps in the Compose toolkit, experiment with new APIs and to gather insight into the development experience of developing a Compose library. The goal of these libraries is to upstream them into the official toolkit, at which point they will be deprecated and removed from Accompanist.&lt;/p&gt; &#xA;&lt;h2&gt;Compose versions&lt;/h2&gt; &#xA;&lt;p&gt;Each &lt;a href=&#34;https://github.com/google/accompanist/releases&#34;&gt;release&lt;/a&gt; outlines what version of the Compose libraries it depends on. We are currently releasing multiple versions of Accompanist for the different versions of Compose:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compose 1.0 (1.0.x)&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img alt=&#34;Maven Central&#34; src=&#34;https://img.shields.io/maven-central/v/com.google.accompanist/accompanist-insets?versionPrefix=0.20&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compose 1.1 (1.1.x)&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img alt=&#34;Maven Central&#34; src=&#34;https://img.shields.io/maven-central/v/com.google.accompanist/accompanist-insets?versionPrefix=0.23&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compose 1.2 (1.2.x)&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img alt=&#34;Maven Central&#34; src=&#34;https://img.shields.io/maven-central/v/com.google.accompanist/accompanist-insets&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Ensure you are using the Accompanist version that matches with your Compose version&lt;/strong&gt;: If you upgrade Accompanist, it will upgrade your Compose version via transitive dependencies.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Libraries&lt;/h2&gt; &#xA;&lt;h3&gt;üç´ &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/systemuicontroller/&#34;&gt;System UI Controller&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A library that provides easy-to-use utilities for recoloring the Android system bars from Jetpack Compose.&lt;/p&gt; &#xA;&lt;h3&gt;üé® &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/appcompat-theme/&#34;&gt;AppCompat Theme Adapter&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A library that enables the reuse of &lt;a href=&#34;https://developer.android.com/jetpack/androidx/releases/appcompat&#34;&gt;AppCompat&lt;/a&gt; XML themes for theming in Jetpack Compose.&lt;/p&gt; &#xA;&lt;h3&gt;üìñ &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/pager/&#34;&gt;Pager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A library that provides utilities for building paginated layouts in Jetpack Compose, similar to Android&#39;s &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/viewpager/widget/ViewPager&#34;&gt;ViewPager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üì´ &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/permissions/&#34;&gt;Permissions&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A library that provides &lt;a href=&#34;https://developer.android.com/guide/topics/permissions/overview&#34;&gt;Android runtime permissions&lt;/a&gt; support for Jetpack Compose.&lt;/p&gt; &#xA;&lt;h3&gt;‚è≥ &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/placeholder/&#34;&gt;Placeholder&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A library that provides easy-to-use modifiers for displaying a placeholder UI while content is loading.&lt;/p&gt; &#xA;&lt;h3&gt;üåä &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/flowlayout/&#34;&gt;Flow Layouts&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A library that adds Flexbox-like layout components to Jetpack Compose.&lt;/p&gt; &#xA;&lt;h3&gt;üß≠‚ú®&lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/navigation-animation/&#34;&gt;Navigation-Animation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A library which provides &lt;a href=&#34;https://developer.android.com/jetpack/compose/animation&#34;&gt;Compose Animation&lt;/a&gt; support for Jetpack Navigation Compose.&lt;/p&gt; &#xA;&lt;h3&gt;üß≠üé®Ô∏è &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/navigation-material/&#34;&gt;Navigation-Material&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A library which provides &lt;a href=&#34;https://developer.android.com/jetpack/androidx/releases/compose-material&#34;&gt;Compose Material&lt;/a&gt; support, such as modal bottom sheets, for Jetpack Navigation Compose.&lt;/p&gt; &#xA;&lt;h3&gt;üñåÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/drawablepainter/&#34;&gt;Drawable Painter&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A library which provides a way to use Android Drawables as Jetpack Compose Painters.&lt;/p&gt; &#xA;&lt;h3&gt;‚¨áÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/swiperefresh/&#34;&gt;Swipe to Refresh&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A library that provides a layout implementing the swipe-to-refresh UX pattern, similar to Android&#39;s &lt;a href=&#34;https://developer.android.com/jetpack/androidx/releases/swiperefreshlayout&#34;&gt;SwipeRefreshLayout&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üåè &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/web/&#34;&gt;Web&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A wrapper around WebView for basic WebView support in Jetpack Compose.&lt;/p&gt; &#xA;&lt;h3&gt;üìê &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/insets/&#34;&gt;Insets&lt;/a&gt; (Deprecated)&lt;/h3&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://google.github.io/accompanist/insets/&#34;&gt;Migration Guide&lt;/a&gt; for migrating to Insets in Compose.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Future?&lt;/h2&gt; &#xA;&lt;p&gt;Any of the features available in this group of libraries may become obsolete in the future, at which point they will (probably) become deprecated.&lt;/p&gt; &#xA;&lt;p&gt;We will aim to provide a migration path (where possible), to whatever supersedes the functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Snapshots&lt;/h2&gt; &#xA;&lt;p&gt;Snapshots of the current development version of Accompanist are available, which track the latest commit. See &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/docs/using-snapshot-version.md&#34;&gt;here&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Why the name?&lt;/h3&gt; &#xA;&lt;p&gt;The library is all about adding some utilities around Compose. Music composing is done by a composer, and since this library is about supporting composition, the supporting role of an &lt;a href=&#34;https://en.wikipedia.org/wiki/Accompaniment&#34;&gt;accompanist&lt;/a&gt; felt like a good name.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Please contribute! We will gladly review any pull requests. Make sure to read the &lt;a href=&#34;https://raw.githubusercontent.com/google/accompanist/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; page first though.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2020 The Android Open Source Project&#xA; &#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    https://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Kotlin/kotlinx-datetime</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/Kotlin/kotlinx-datetime</id>
    <link href="https://github.com/Kotlin/kotlinx-datetime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KotlinX multiplatform date/time library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kotlinx-datetime&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/docs/components-stability.html&#34;&gt;&lt;img src=&#34;https://kotl.in/badges/alpha.svg?sanitize=true&#34; alt=&#34;Kotlin Alpha&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;JetBrains official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/search?q=g:%22org.jetbrains.kotlinx%22%20AND%20a:%22kotlinx-datetime%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.jetbrains.kotlinx/kotlinx-datetime.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A multiplatform Kotlin library for working with date and time.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-datetime/master/#using-in-your-projects&#34;&gt;Using in your projects&lt;/a&gt; for the instructions how to setup a dependency in your project.&lt;/p&gt; &#xA;&lt;h2&gt;Design overview&lt;/h2&gt; &#xA;&lt;p&gt;There are a few guiding principles in the design of &lt;code&gt;kotlinx-datetime&lt;/code&gt;. First of all, it is pragmatic, focused on the most common problems developers face every day (pun intended) when working with dates and times. It is not all-encompassing and lacks some domain-specific utilities that special-purpose applications might need. We chose convenience over generality, so the API surface this library provides is as minimal as possible to meet the use-cases.&lt;/p&gt; &#xA;&lt;p&gt;The library puts a clear boundary between physical time of an instant and a local, time-zone dependent civil time, consisting of components such as year, month, etc that people use when talking about time. We intentionally avoid entities in the library that mix both together and could be misused. However, there are convenience operations that take, for example, a physical instant and perform a calendar-based adjustment (such as adding a month); all such operation explicitly take a time-zone information as parameter to clearly state that their result depends on the civil time-zone rules which are subject to change at any time.&lt;/p&gt; &#xA;&lt;p&gt;The library is based on the ISO 8601 international standard, other ways to represent dates and times are out of its scope. Internationalization (such as locale-specific month and day names) is out the scope, too.&lt;/p&gt; &#xA;&lt;h2&gt;Types&lt;/h2&gt; &#xA;&lt;p&gt;The library provides the basic set of types for working with date and time:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Instant&lt;/code&gt; to represent a moment on the UTC-SLS time scale;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Clock&lt;/code&gt; to obtain the current instant;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalDateTime&lt;/code&gt; to represent date and time components without a reference to the particular time zone;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalDate&lt;/code&gt; to represent the components of date only;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalTime&lt;/code&gt; to represent the components of time only;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TimeZone&lt;/code&gt; and &lt;code&gt;FixedOffsetTimeZone&lt;/code&gt; provide time zone information to convert between &lt;code&gt;Instant&lt;/code&gt; and &lt;code&gt;LocalDateTime&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Month&lt;/code&gt; and &lt;code&gt;DayOfWeek&lt;/code&gt; enums;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DateTimePeriod&lt;/code&gt; to represent a difference between two instants decomposed into date and time units;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DatePeriod&lt;/code&gt; is a subclass of &lt;code&gt;DateTimePeriod&lt;/code&gt; with zero time components, it represents a difference between two LocalDate values decomposed into date units.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DateTimeUnit&lt;/code&gt; provides a set of predefined date and time units to use in arithmetic operations on &lt;code&gt;Instant&lt;/code&gt; and &lt;code&gt;LocalDate&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UtcOffset&lt;/code&gt; represents the amount of time the local date/time at a particular time zone differs from the date/time at UTC.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Type use-cases&lt;/h3&gt; &#xA;&lt;p&gt;Here is some basic advice on how to choose which of the date-carrying types to use in what cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;Instant&lt;/code&gt; to represent a timestamp of the event that had already happened in the past (like a timestamp of a log entry) or will definitely happen in a well-defined instant of time in the future not far away from now (like an order confirmation deadline in 1 hour from now).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;LocalDateTime&lt;/code&gt; to represent a time of the event that is scheduled to happen in the far future at a certain local time (like a scheduled meeting in a few months from now). You&#39;ll have to keep track of the &lt;code&gt;TimeZone&lt;/code&gt; of the scheduled event separately. Try to avoid converting future events to &lt;code&gt;Instant&lt;/code&gt; in advance, because time-zone rules might change unexpectedly in the future. In this &lt;a href=&#34;https://codeblog.jonskeet.uk/2019/03/27/storing-utc-is-not-a-silver-bullet/&#34;&gt;blog post&lt;/a&gt;, you can read more about why it&#39;s not always a good idea to use &lt;code&gt;Instant&lt;/code&gt; everywhere.&lt;/p&gt; &lt;p&gt;Also, use &lt;code&gt;LocalDateTime&lt;/code&gt; to decode an &lt;code&gt;Instant&lt;/code&gt; to its local date-time components for display and UIs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;LocalDate&lt;/code&gt; to represent a date of the event that does not have a specific time associated with it (like a birth date).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;LocalTime&lt;/code&gt; to represent a time of the event that does not have a specific date associated with it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Operations&lt;/h2&gt; &#xA;&lt;p&gt;With the above types you can get the following operations done.&lt;/p&gt; &#xA;&lt;h3&gt;Getting the current moment of time&lt;/h3&gt; &#xA;&lt;p&gt;The current moment of time can be captured with the &lt;code&gt;Instant&lt;/code&gt; type. To obtain an &lt;code&gt;Instant&lt;/code&gt; corresponding to the current moment of time, use &lt;code&gt;now()&lt;/code&gt; function of the &lt;code&gt;Clock&lt;/code&gt; interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val clock: Clock = ...&#xA;val currentMoment = clock.now()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An instance of &lt;code&gt;Clock&lt;/code&gt; can be injected through the function/class parameters, or you can use its default implementation &lt;code&gt;Clock.System&lt;/code&gt; that represents the system clock:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val currentMoment = Clock.System.now()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting an instant to local date and time components&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Instant&lt;/code&gt; is just a counter of high resolution time intervals since the beginning of time scale. To get human readable components from an &lt;code&gt;Instant&lt;/code&gt; value you need to convert it to &lt;code&gt;LocalDateTime&lt;/code&gt; type that represents date and time components without a reference to the particular time zone.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;TimeZone&lt;/code&gt; type provides the rules to convert instants from and to date/time components.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val currentMoment: Instant = Clock.System.now()&#xA;val datetimeInUtc: LocalDateTime = currentMoment.toLocalDateTime(TimeZone.UTC)&#xA;val datetimeInSystemZone: LocalDateTime = currentMoment.toLocalDateTime(TimeZone.currentSystemDefault())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalDateTime&lt;/code&gt; instance exposes familiar components of the Gregorian calendar: &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;dayOfMonth&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, and so on up to &lt;code&gt;nanosecond&lt;/code&gt;. The property &lt;code&gt;dayOfWeek&lt;/code&gt; shows what weekday that date is, and &lt;code&gt;dayOfYear&lt;/code&gt; shows the day number since the beginning of a year.&lt;/p&gt; &#xA;&lt;p&gt;Additional time zones can be acquired by their string identifier with the &lt;code&gt;TimeZone.of(id: String)&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val tzBerlin = TimeZone.of(&#34;Europe/Berlin&#34;)&#xA;val datetimeInBerlin = currentMoment.toLocalDateTime(tzBerlin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalDateTime&lt;/code&gt; instance can be constructed from individual components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val kotlinReleaseDateTime = LocalDateTime(2016, 2, 15, 16, 57, 0, 0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An instant can be obtained from &lt;code&gt;LocalDateTime&lt;/code&gt; by interpreting it as a time moment in a particular &lt;code&gt;TimeZone&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val kotlinReleaseInstant = kotlinReleaseDateTime.toInstant(TimeZone.of(&#34;UTC+3&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting local date components&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalDate&lt;/code&gt; type represents local date without time. You can obtain it from &lt;code&gt;Instant&lt;/code&gt; by converting it to &lt;code&gt;LocalDateTime&lt;/code&gt; and taking its &lt;code&gt;date&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val now: Instant = Clock.System.now()&#xA;val today: LocalDate = now.toLocalDateTime(TimeZone.currentSystemDefault()).date&#xA;// or more short&#xA;val today: LocalDate = Clock.System.todayIn(TimeZone.currentSystemDefault())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, that today&#39;s date really depends on the time zone in which you&#39;re observing the current moment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalDate&lt;/code&gt; can be constructed from three components, year, month, and day:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val knownDate = LocalDate(2020, 2, 21)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting local time components&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalTime&lt;/code&gt; type represents local time without date. You can obtain it from &lt;code&gt;Instant&lt;/code&gt; by converting it to &lt;code&gt;LocalDateTime&lt;/code&gt; and taking its &lt;code&gt;time&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val now: Instant = Clock.System.now()&#xA;val thisTime: LocalTime = now.toLocalDateTime(TimeZone.currentSystemDefault()).time&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalTime&lt;/code&gt; can be constructed from four components, hour, minute, second and nanosecond:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val knownTime = LocalTime(hour = 23, minute = 59, second = 12)&#xA;val timeWithNanos = LocalTime(hour = 23, minute = 59, second = 12, nanosecond = 999)&#xA;val hourMinute = LocalTime(hour = 12, minute = 13)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting instant to and from unix time&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;code&gt;Instant&lt;/code&gt; can be converted to a number of milliseconds since the Unix/POSIX epoch with the &lt;code&gt;toEpochMilliseconds()&lt;/code&gt; function. To convert back, use &lt;code&gt;Instant.fromEpochMilliseconds(Long)&lt;/code&gt; companion object function.&lt;/p&gt; &#xA;&lt;h3&gt;Converting instant and local date/time to and from string&lt;/h3&gt; &#xA;&lt;p&gt;Currently, &lt;code&gt;Instant&lt;/code&gt;, &lt;code&gt;LocalDateTime&lt;/code&gt;, &lt;code&gt;LocalDate&lt;/code&gt; and &lt;code&gt;LocalTime&lt;/code&gt; only support ISO-8601 format. The &lt;code&gt;toString()&lt;/code&gt; function is used to convert the value to a string in that format, and the &lt;code&gt;parse&lt;/code&gt; function in companion object is used to parse a string representation back.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val instantNow = Clock.System.now()&#xA;instantNow.toString()  // returns something like 2015-12-31T12:30:00Z&#xA;val instantBefore = Instant.parse(&#34;2010-06-01T22:19:44.475Z&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, &lt;code&gt;String.to...()&lt;/code&gt; extension functions can be used instead of &lt;code&gt;parse&lt;/code&gt;, where it feels more convenient:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalDateTime&lt;/code&gt; uses the similar format, but without &lt;code&gt;Z&lt;/code&gt; UTC time zone designator in the end.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalDate&lt;/code&gt; uses format with just year, month, and date components, e.g. &lt;code&gt;2010-06-01&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalTime&lt;/code&gt; uses format with just hour, minute, second and (if non-zero) nanosecond components, e.g. &lt;code&gt;12:01:03&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;&#34;2010-06-01T22:19:44.475Z&#34;.toInstant()&#xA;&#34;2010-06-01T22:19:44&#34;.toLocalDateTime()&#xA;&#34;2010-06-01&#34;.toLocalDate()&#xA;&#34;12:01:03&#34;.toLocalTime()&#xA;&#34;12:0:03.999&#34;.toLocalTime()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Instant arithmetic&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val now = Clock.System.now()&#xA;val instantInThePast: Instant = Instant.parse(&#34;2020-01-01T00:00:00Z&#34;)&#xA;val durationSinceThen: Duration = now - instantInThePast&#xA;val equidistantInstantInTheFuture: Instant = now + durationSinceThen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Duration&lt;/code&gt; is a type from the experimental &lt;code&gt;kotlin.time&lt;/code&gt; package in the Kotlin standard library. This type holds the amount of time that can be represented in different time units: from nanoseconds to 24H days.&lt;/p&gt; &#xA;&lt;p&gt;To get the calendar difference between two instants you can use &lt;code&gt;Instant.periodUntil(Instant, TimeZone)&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val period: DateTimePeriod = instantInThePast.periodUntil(Clock.System.now(), TimeZone.UTC)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;DateTimePeriod&lt;/code&gt; represents a difference between two particular moments as a sum of calendar components, like &#34;2 years, 3 months, 10 days, and 22 hours&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The difference can be calculated as an integer amount of specified date or time units:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val diffInMonths = instantInThePast.until(Clock.System.now(), DateTimeUnit.MONTH, TimeZone.UTC)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also shortcuts &lt;code&gt;yearsUntil(...)&lt;/code&gt;, &lt;code&gt;monthsUntil(...)&lt;/code&gt;, and &lt;code&gt;daysUntil(...)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A particular amount of date/time units or a date/time period can be added to an &lt;code&gt;Instant&lt;/code&gt; with the &lt;code&gt;plus&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val now = Clock.System.now()&#xA;val systemTZ = TimeZone.currentSystemDefault()&#xA;val tomorrow = now.plus(2, DateTimeUnit.DAY, systemTZ)&#xA;val threeYearsAndAMonthLater = now.plus(DateTimePeriod(years = 3, months = 1), systemTZ)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;plus&lt;/code&gt; and &lt;code&gt;...until&lt;/code&gt; operations require &lt;code&gt;TimeZone&lt;/code&gt; as a parameter because the calendar interval between two particular instants can be different, when calculated in different time zones.&lt;/p&gt; &#xA;&lt;h3&gt;Date arithmetic&lt;/h3&gt; &#xA;&lt;p&gt;The similar operations with date units are provided for &lt;code&gt;LocalDate&lt;/code&gt; type:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalDate.plus(number, DateTimeUnit.DateBased)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalDate.plus(DatePeriod)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalDate.until(LocalDate, DateTimeUnit.DateBased)&lt;/code&gt; and the shortcuts &lt;code&gt;yearsUntil&lt;/code&gt;, &lt;code&gt;monthUntil&lt;/code&gt;, &lt;code&gt;daysUntil&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalDate.periodUntil(LocalDate): DatePeriod&lt;/code&gt; and &lt;code&gt;LocalDate.minus(LocalDate): DatePeriod&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notice that instead of general &lt;code&gt;DateTimeUnit&lt;/code&gt; and &lt;code&gt;DateTimePeriod&lt;/code&gt; we&#39;re using their subtypes &lt;code&gt;DateTimeUnit.DateBased&lt;/code&gt; and &lt;code&gt;DatePeriod&lt;/code&gt; respectively. This allows preventing the situations when time components are being added to a date at compile time.&lt;/p&gt; &#xA;&lt;h3&gt;Date + time arithmetic&lt;/h3&gt; &#xA;&lt;p&gt;Arithmetic on &lt;code&gt;LocalDateTime&lt;/code&gt; is intentionally omitted. The reason for this is that the presence of daylight saving time transitions (changing from standard time to daylight saving time and back) causes &lt;code&gt;LocalDateTime&lt;/code&gt; arithmetic to be ill-defined. For example, consider time gaps (or, as &lt;a href=&#34;https://stackoverflow.com/tags/dst/info&#34;&gt;&lt;code&gt;dst&lt;/code&gt; tag wiki on Stack Overflow&lt;/a&gt; calls them, &#34;spring forward&#34; transitions), that is, ranges of date + time combinations that never occur in a given time zone due to clocks moving forward. If we allowed &lt;code&gt;LocalDateTime&lt;/code&gt; arithmetic that ignored time zones, then it could result in &lt;code&gt;LocalDateTime&lt;/code&gt; instances that are inside a time gap and are invalid in the implied time zone.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, the recommended way to use a &lt;code&gt;LocalDateTime&lt;/code&gt; is to treat it as a representation of an &lt;code&gt;Instant&lt;/code&gt;, perform all the required arithmetic on &lt;code&gt;Instant&lt;/code&gt; values, and only convert to &lt;code&gt;LocalDateTime&lt;/code&gt; when a human-readable representation is needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val timeZone = TimeZone.of(&#34;Europe/Berlin&#34;)&#xA;val localDateTime = LocalDateTime.parse(&#34;2021-03-27T02:16:20&#34;)&#xA;val instant = localDateTime.toInstant(timeZone)&#xA;&#xA;val instantOneDayLater = instant.plus(1, DateTimeUnit.DAY, timeZone)&#xA;val localDateTimeOneDayLater = instantOneDayLater.toLocalDateTime(timeZone)&#xA;// 2021-03-28T03:16:20, as 02:16:20 that day is in a time gap&#xA;&#xA;val instantTwoDaysLater = instant.plus(2, DateTimeUnit.DAY, timeZone)&#xA;val localDateTimeTwoDaysLater = instantTwoDaysLater.toLocalDateTime(timeZone)&#xA;// 2021-03-29T02:16:20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;The implementation of date/time types, such as &lt;code&gt;Instant&lt;/code&gt;, &lt;code&gt;LocalDateTime&lt;/code&gt;, &lt;code&gt;TimeZone&lt;/code&gt; and so on, relies on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;in JVM: &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html&#34;&gt;&lt;code&gt;java.time&lt;/code&gt;&lt;/a&gt; API;&lt;/li&gt; &#xA; &lt;li&gt;in JS: &lt;a href=&#34;https://js-joda.github.io/js-joda/&#34;&gt;&lt;code&gt;js-joda&lt;/code&gt;&lt;/a&gt; library;&lt;/li&gt; &#xA; &lt;li&gt;in Native: based on &lt;a href=&#34;https://www.threeten.org/threetenbp/&#34;&gt;ThreeTen backport project&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;time zone support is provided by &lt;a href=&#34;https://github.com/HowardHinnant/date/&#34;&gt;date&lt;/a&gt; C++ library;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known/open issues, work TBD&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Some kind of &lt;code&gt;Clock&lt;/code&gt; interface is needed as a pluggable replacement for &lt;code&gt;Instant.now()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Flexible locale-neutral parsing and formatting facilities are needed to support various date/time interchange formats that are used in practice (in particular, various RFCs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using in your projects&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that the library is experimental, and the API is subject to change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The library is published to Maven Central.&lt;/p&gt; &#xA;&lt;p&gt;The library is compatible with the Kotlin Standard Library not lower than &lt;code&gt;1.5.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you target Android devices running &lt;strong&gt;below API 26&lt;/strong&gt;, you need to use Android Gradle plugin 4.0 or newer and enable &lt;a href=&#34;https://developer.android.com/studio/write/java8-support#library-desugaring&#34;&gt;core library desugaring&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the Maven Central repository if it is not already there:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In multiplatform projects, add a dependency to the commonMain source set dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;kotlin {&#xA;    sourceSets {&#xA;        commonMain {&#xA;             dependencies {&#xA;                 implementation(&#34;org.jetbrains.kotlinx:kotlinx-datetime:0.3.2&#34;)&#xA;             }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To use the library in a single-platform project, add a dependency to the dependencies block.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    implementation(&#34;org.jetbrains.kotlinx:kotlinx-datetime:0.3.2&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Note about time zones in JS&lt;/h4&gt; &#xA;&lt;p&gt;By default, there&#39;s only one time zone available in Kotlin/JS: the &lt;code&gt;SYSTEM&lt;/code&gt; time zone with a fixed offset.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use all time zones in Kotlin/JS platform, you need to add the following npm dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;kotlin {&#xA;    sourceSets {&#xA;        val jsMain by getting {&#xA;            dependencies {&#xA;                implementation(npm(&#34;@js-joda/timezone&#34;, &#34;2.3.0&#34;))&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and after that add the following initialization code in your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@JsModule(&#34;@js-joda/timezone&#34;)&#xA;@JsNonModule&#xA;external object JsJodaTimeZoneModule&#xA;&#xA;private val jsJodaTz = JsJodaTimeZoneModule&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maven&lt;/h3&gt; &#xA;&lt;p&gt;Add a dependency to the &lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;/code&gt; element. Note that you need to use the platform-specific &lt;code&gt;-jvm&lt;/code&gt; artifact in Maven.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.jetbrains.kotlinx&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;kotlinx-datetime-jvm&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.3.2&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Before building, ensure that you have &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-datetime/master/thirdparty/date&#34;&gt;thirdparty/date&lt;/a&gt; submodule initialized and updated. IDEA does that automatically when cloning the repository, and if you cloned it in the command line, you may need to run additionally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;git submodule init&#xA;git submodule update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The project requires JDK 8 to build classes and to run tests. Gradle will try to find it among the installed JDKs or &lt;a href=&#34;https://docs.gradle.org/current/userguide/toolchains.html#sec:provisioning&#34;&gt;provision&lt;/a&gt; it automatically if it couldn&#39;t be found. The path to JDK 8 can be additionally specified with the environment variable &lt;code&gt;JDK_8&lt;/code&gt;. For local builds, you can use a later version of JDK if you don&#39;t have that version installed. Specify the version of this JDK with the &lt;code&gt;java.mainToolchainVersion&lt;/code&gt; Gradle property.&lt;/p&gt; &#xA;&lt;p&gt;After that, the project can be opened in IDEA and built with Gradle.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/kotlin</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/JetBrains/kotlin</id>
    <link href="https://github.com/JetBrains/kotlin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Kotlin Programming Language.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://teamcity.jetbrains.com/buildConfiguration/Kotlin_KotlinPublic_Compiler?branch=%3Cdefault%3E&amp;amp;buildTypeTab=overview&amp;amp;mode=builds&#34;&gt;&lt;img src=&#34;https://img.shields.io/teamcity/http/teamcity.jetbrains.com/s/Kotlin_KotlinPublic_Compiler.svg?sanitize=true&#34; alt=&#34;TeamCity (simple build status)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.jetbrains.kotlin%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.jetbrains.kotlin/kotlin-maven-plugin.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ge.jetbrains.com/scans?search.rootProjectNames=Kotlin&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Revved%20up%20by-Gradle%20Enterprise-06A0CE?logo=Gradle&amp;amp;labelColor=02303A&#34; alt=&#34;Revved up by Gradle Enterprise&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Kotlin Programming Language&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt;!&lt;br&gt; It is an open-source, statically typed programming language supported and developed by &lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains&lt;/a&gt; and open-source contributors.&lt;/p&gt; &#xA;&lt;p&gt;Some handy links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin Site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/tutorials/getting-started.html&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.kotlinlang.org/&#34;&gt;Try Kotlin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/index.html&#34;&gt;Kotlin Standard Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtrack.jetbrains.com/issues/KT&#34;&gt;Issue Tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCP7uiEZIqci43m22KDl0sNw&#34;&gt;Kotlin YouTube Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discuss.kotlinlang.org/&#34;&gt;Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/kotlin/&#34;&gt;Kotlin Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCP7uiEZIqci43m22KDl0sNw&#34;&gt;Subscribe to Kotlin YouTube channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/kotlin&#34;&gt;Follow Kotlin on Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slack.kotlinlang.org/&#34;&gt;Public Slack channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://teamcity.jetbrains.com/project.html?tab=projectOverview&amp;amp;projectId=Kotlin&#34;&gt;TeamCity CI build&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Kotlin Multiplatform capabilities&lt;/h2&gt; &#xA;&lt;p&gt;Support for multiplatform programming is one of Kotlin‚Äôs key benefits. It reduces time spent writing and maintaining the same code for &lt;a href=&#34;https://kotlinlang.org/docs/reference/mpp-supported-platforms.html&#34;&gt;different platforms&lt;/a&gt; while retaining the flexibility and benefits of native programming.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/lp/mobile/&#34;&gt;Kotlin Multiplatform Mobile&lt;/a&gt; for sharing code between Android and iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/mobile/create-first-app.html&#34;&gt;Getting Started with Kotlin Multiplatform Mobile Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/multiplatform.html&#34;&gt;Kotlin Multiplatform Benefits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/mpp-share-on-platforms.html#share-code-on-all-platforms&#34;&gt;Share code on all platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/mpp-share-on-platforms.html#share-code-on-similar-platforms&#34;&gt;Share code on similar platforms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Editing Kotlin&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/tutorials/getting-started.html&#34;&gt;Kotlin IntelliJ IDEA Plugin&lt;/a&gt; (&lt;a href=&#34;https://github.com/JetBrains/intellij-community/tree/master/plugins/kotlin&#34;&gt;source code&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/tutorials/getting-started-eclipse.html&#34;&gt;Kotlin Eclipse Plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vkostyukov/kotlin-sublime-package&#34;&gt;Kotlin Sublime Text Package&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build environment requirements&lt;/h2&gt; &#xA;&lt;p&gt;This repository is using &lt;a href=&#34;https://docs.gradle.org/current/userguide/toolchains.html&#34;&gt;Gradle toolchains&lt;/a&gt; feature to select and auto-provision required JDKs from &lt;a href=&#34;https://adoptopenjdk.net&#34;&gt;AdoptOpenJdk&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately &lt;a href=&#34;https://adoptopenjdk.net&#34;&gt;AdoptOpenJdk&lt;/a&gt; project does not provide required JDK 1.6 and 1.7 images, so you could either download them manually and provide path to installation via &lt;code&gt;JDK_16&lt;/code&gt; and &lt;code&gt;JDK_17&lt;/code&gt; environment variables or use following SDK managers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://asdf-vm.com/&#34;&gt;Asdf-vm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shyiko/jabba&#34;&gt;Jabba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sdkman.io/&#34;&gt;SDKMAN!&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, it is still possible to only provide required JDKs via environment variables (see &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/kotlin/master/gradle.properties#L5&#34;&gt;gradle.properties&lt;/a&gt; for supported variable names). To ensure Gradle uses only JDKs from environmental variables - disable Gradle toolchain auto-detection by passing &lt;code&gt;-Porg.gradle.java.installations.auto-detect=false&lt;/code&gt; option (or put it into &lt;code&gt;$GRADLE_USER_HOME/gradle.properties&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For local development, if you&#39;re not working on the standard library, it&#39;s OK to avoid installing JDK 1.6 and JDK 1.7. Add &lt;code&gt;kotlin.build.isObsoleteJdkOverrideEnabled=true&lt;/code&gt; to the &lt;code&gt;local.properties&lt;/code&gt; file, so build will only use JDK 1.8+. Note, that in this case, build will have Gradle remote build cache misses for some tasks.&lt;/p&gt; &#xA;&lt;p&gt;Note: The JDK 6 for MacOS is not available on Oracle&#39;s site. You can install it by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew tap homebrew/cask-versions&#xA;$ brew install --cask java6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows you might need to add long paths setting to the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config core.longpaths true &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;The project is built with Gradle. Run Gradle to build the project and to run the tests using the following command on Unix/macOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew &amp;lt;tasks-and-options&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the following command on Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gradlew &amp;lt;tasks-and-options&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the first project configuration gradle will download and setup the dependencies on&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;intellij-core&lt;/code&gt; is a part of command line compiler and contains only necessary APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;idea-full&lt;/code&gt; is a full blown IntelliJ IDEA Community Edition to be used in the plugin module.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These dependencies are quite large, so depending on the quality of your internet connection you might face timeouts getting them. In this case, you can increase timeout by specifying the following command line parameters on the first run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew -Dhttp.socketTimeout=60000 -Dhttp.connectionTimeout=60000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Important gradle tasks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clean&lt;/code&gt; - clean build results&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dist&lt;/code&gt; - assembles the compiler distribution into &lt;code&gt;dist/kotlinc/&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;install&lt;/code&gt; - build and install all public artifacts into local maven repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;coreLibsTest&lt;/code&gt; - build and run stdlib, reflect and kotlin-test tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gradlePluginTest&lt;/code&gt; - build and run gradle plugin tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compilerTest&lt;/code&gt; - build and run all compiler tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To reproduce TeamCity build use &lt;code&gt;-Pteamcity=true&lt;/code&gt; flag. Local builds don&#39;t run proguard and have jar compression disabled by default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OPTIONAL:&lt;/strong&gt; Some artifacts, mainly Maven plugin ones, are built separately with Maven. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/kotlin/master/libraries/ReadMe.md&#34;&gt;libraries/ReadMe.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;To build Kotlin/Native, see &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/kotlin/master/kotlin-native/README.md#building-from-source&#34;&gt;kotlin-native/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building for different versions of IntelliJ IDEA and Android Studio&lt;/h3&gt; &#xA;&lt;p&gt;Kotlin plugin is intended to work with several recent versions of IntelliJ IDEA and Android Studio. Each platform is allowed to have a different set of features and might provide a slightly different API. Instead of using several parallel Git branches, the project stores everything in a single branch, but files may have counterparts with version extensions (*.as32, *.172, *.181). The primary file is expected to be replaced with its counterpart when targeting a non-default platform.&lt;/p&gt; &#xA;&lt;p&gt;A more detailed description of this scheme can be found at &lt;a href=&#34;https://github.com/JetBrains/bunches/raw/master/ReadMe.md&#34;&gt;https://github.com/JetBrains/bunches/blob/master/ReadMe.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Usually, there&#39;s no need to care about multiple platforms as all features are enabled everywhere by default. Additional counterparts should be created if an expected difference in behavior or an incompatible API usage is required &lt;strong&gt;and&lt;/strong&gt; there&#39;s no reasonable workaround to save source compatibility. Kotlin plugin contains a pre-commit check that shows a warning if a file has been updated without its counterparts.&lt;/p&gt; &#xA;&lt;p&gt;Development for some particular platform is possible after &#39;switching&#39; that can be done with the &lt;a href=&#34;https://github.com/JetBrains/bunches/releases&#34;&gt;Bunch Tool&lt;/a&gt; from the command line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd kotlin-project-dir&#xA;&#xA;# switching to IntelliJ Idea 2019.1&#xA;bunch switch 191&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;working-in-idea&#34;&gt;&lt;/a&gt; Working with the project in IntelliJ IDEA&lt;/h2&gt; &#xA;&lt;p&gt;Working with the Kotlin project requires at least IntelliJ IDEA 2019.1. You can download IntelliJ IDEA 2019.1 &lt;a href=&#34;https://www.jetbrains.com/idea/download&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After cloning the project, to import the project in IntelliJ choose the project directory in the Open project dialog. Then, after project opened, select &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;New&lt;/code&gt; -&amp;gt; &lt;code&gt;Module from Existing Sources...&lt;/code&gt; in the menu, and select &lt;code&gt;build.gradle.kts&lt;/code&gt; file in the project&#39;s root folder.&lt;/p&gt; &#xA;&lt;p&gt;In the import dialog, select &lt;code&gt;use default gradle wrapper&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To be able to run tests from IntelliJ easily, check &lt;code&gt;Delegate IDE build/run actions to Gradle&lt;/code&gt; and choose &lt;code&gt;Gradle Test Runner&lt;/code&gt; in the Gradle runner settings after importing the project.&lt;/p&gt; &#xA;&lt;p&gt;At this time, you can use the latest released &lt;code&gt;1.6.x&lt;/code&gt; version of the Kotlin plugin for working with the code. To make sure you have the latest version installed, use &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Kotlin&lt;/code&gt; -&amp;gt; &lt;code&gt;Configure Kotlin Plugin Updates&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For handy work with compiler tests it&#39;s recommended to use &lt;a href=&#34;https://github.com/demiurg906/test-data-helper-plugin&#34;&gt; Kotlin Compiler Test Helper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency verification&lt;/h3&gt; &#xA;&lt;p&gt;We have a &lt;a href=&#34;https://docs.gradle.org/current/userguide/dependency_verification.html&#34;&gt;dependencies verification&lt;/a&gt; feature enabled in the repository for all Gradle builds. Gradle will check hashes (md5 and sha256) of used dependencies and will fail builds with &lt;code&gt;Dependency verification failed&lt;/code&gt; errors when local artifacts are absent or have different hashes listed in the &lt;a href=&#34;https://github.com/JetBrains/kotlin/raw/master/gradle/verification-metadata.xml&#34;&gt;verification-metadata.xml&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s expected that &lt;code&gt;verification-metadata.xml&lt;/code&gt; should only be updated with the commits that modify the build. There are some tips how to perform such updates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use auto-generation for getting an initial list of new hashes (verify updates relate to you changes).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;./gradlew -M sha256,md5 help&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(any other task may be used instead of &lt;code&gt;help&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consider removing old versions from the file if you are updating dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Leave meaningful &lt;code&gt;origin&lt;/code&gt; attribute (instead of &lt;code&gt;Generated by Gradle&lt;/code&gt;) if you did some manual verification of the artifact.&lt;/li&gt; &#xA; &lt;li&gt;Always do manual verification if several hashes are needed, and a new &lt;code&gt;also-trust&lt;/code&gt; tag has to be added.&lt;/li&gt; &#xA; &lt;li&gt;If you‚Äôre adding a dependency with OS mentioning in an artifact name (&lt;code&gt;darwin&lt;/code&gt;, &lt;code&gt;mac&lt;/code&gt;, &lt;code&gt;osx&lt;/code&gt;, &lt;code&gt;linux&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;), remember to add counterparts for other platforms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using -dev and -SNAPSHOT versions&lt;/h2&gt; &#xA;&lt;p&gt;We publish &lt;code&gt;-dev&lt;/code&gt; and &lt;code&gt;-SNAPSHOT&lt;/code&gt; versions frequently.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;-dev&lt;/code&gt; versions you can use the &lt;a href=&#34;https://maven.pkg.jetbrains.space/kotlin/p/kotlin/bootstrap/org/jetbrains/kotlin/kotlin-compiler/maven-metadata.xml&#34;&gt;list of available versions&lt;/a&gt; and include this maven repository:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;maven { url = uri(&#34;https://maven.pkg.jetbrains.space/kotlin/p/kotlin/bootstrap&#34;) }&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;-SNAPSHOT&lt;/code&gt; versions that are updated daily, you can use the &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/org/jetbrains/kotlin/kotlin-compiler/maven-metadata.xml&#34;&gt;list of available versions&lt;/a&gt; and include this maven repository:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;maven { url = uri(&#34;https://oss.sonatype.org/content/repositories/snapshots/&#34;) }&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Kotlin is distributed under the terms of the Apache License (Version 2.0). See &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/kotlin/master/license/README.md&#34;&gt;license folder&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please be sure to review Kotlin&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/kotlin/master/docs/contributing.md&#34;&gt;contributing guidelines&lt;/a&gt; to learn how to help the project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bannedbook/fanqiang</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/bannedbook/fanqiang</id>
    <link href="https://github.com/bannedbook/fanqiang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ÁøªÂ¢ô-ÁßëÂ≠¶‰∏äÁΩë&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ÁøªÂ¢ô-ÁßëÂ≠¶‰∏äÁΩë„ÄÅÁøªÂ¢ôÂ∑•ÂÖ∑„ÄÅÁøªÂ¢ôÊïôÁ®ãÈ°πÁõÆÂ∫ì&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/%E7%A6%81%E9%97%BB%E7%BD%91%E5%AE%89%E5%8D%93%E7%BF%BB%E5%A2%99%E6%96%B0%E9%97%BBAPP&#34;&gt;ÂÆâÂçìÁøªÂ¢ôÊñ∞ÈóªAPP(FQNews APP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/%E5%AE%89%E5%8D%93%E7%BF%BB%E5%A2%99%E8%BD%AF%E4%BB%B6#JWBrowser&#34;&gt;Á¶ÅÈóªÊµèËßàÂô®ÔºàJWBrowserÔºâ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/%E5%AE%89%E5%8D%93%E7%BF%BB%E5%A2%99%E8%BD%AF%E4%BB%B6&#34;&gt;ÂÆâÂçìÁøªÂ¢ôËΩØ‰ª∂&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/android&#34;&gt;ÂÆâÂçìÁøªÂ¢ôAPPÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/Chrome%E4%B8%80%E9%94%AE%E7%BF%BB%E5%A2%99%E5%8C%85&#34;&gt;Chrome‰∏ÄÈîÆÁøªÂ¢ôÂåÖ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/%E7%81%AB%E7%8B%90firefox%E4%B8%80%E9%94%AE%E7%BF%BB%E5%A2%99%E5%8C%85&#34;&gt;ÁÅ´Áãêfirefox‰∏ÄÈîÆÁøªÂ¢ôÂåÖ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/raw/master/v2ss/%E8%87%AA%E5%BB%BAV2ray%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B.md&#34;&gt;Ëá™Âª∫V2rayÊúçÂä°Âô®ÁøªÂ¢ôÁÆÄÊòéÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/raw/master/v2ss/%E8%87%AA%E5%BB%BAShadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B.md&#34;&gt;Ëá™Âª∫ShadowsocksÊúçÂä°Âô®ÁøªÂ¢ôÁÆÄÊòéÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/%E5%85%8D%E8%B4%B9ss%E8%B4%A6%E5%8F%B7&#34;&gt;ÂÖçË¥πssË¥¶Âè∑&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/v2ray%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7&#34;&gt;v2rayÂÖçË¥πË¥¶Âè∑&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91MAC%E7%BF%BB%E5%A2%99&#34;&gt;ËãπÊûúÁîµËÑëMACÁøªÂ¢ô&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/iphone%E7%BF%BB%E5%A2%99&#34;&gt;iphoneÁøªÂ¢ô&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/TorBrowser%E4%B8%80%E9%94%AE%E7%BF%BB%E5%A2%99%E5%8C%85&#34;&gt;TorBrowser‰∏ÄÈîÆÁøªÂ¢ôÂåÖ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/windows&#34;&gt;Windows V2ray/SS/SSR ÁøªÂ¢ôÊïôÁ®ã&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/windows/ClashDotNetFramework.md&#34;&gt;Clash for Windows ÁøªÂ¢ôÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/windows/V2RayN.md&#34;&gt;V2rayN ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/windows/SSTap.md&#34;&gt;SSTapÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/windows/ShadowsocksR.md&#34;&gt;WindowsÁøªÂ¢ô‰πãSSRÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/windows/tor-v2ray.md&#34;&gt;TorBrowser+V2rayNÈÖçÁΩÆ‰ΩøÁî®ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/ios&#34;&gt;iPhone/iPad/iOS V2ray/SS ÁøªÂ¢ôAPPÊïôÁ®ã&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/iphone%E7%BF%BB%E5%A2%99&#34;&gt;iphoneÁøªÂ¢ô&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/ios/AppleID.md&#34;&gt;Ê≥®ÂÜåËãπÊûúÁæéÂå∫ Apple ID Â∏êÂè∑Âπ∂Ë¥≠‰π∞APPÊåáÂçó&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/ios/fqByLan.md&#34;&gt;Iphone/iPadÈÄöËøáÁîµËÑëÂ±ÄÂüüÁΩëÂÖ±‰∫´ÁøªÂ¢ô&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/ios/PotatsoLite.md&#34;&gt;Potatso Lite ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/ios/Shadowrocket.md&#34;&gt;ShadowrocketÂ∞èÁÅ´ÁÆ≠ÈÖçÁΩÆ‰ΩøÁî®ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/ios/Kitsunebi.md&#34;&gt;Kitsunebi ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/ios/QuantumultX.md&#34;&gt;Quantumult X ÈÖçÁΩÆ‰ΩøÁî®ÁÆÄÊòìÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/ios/Surge.md&#34;&gt;iOSÁøªÂ¢ô‰πãSurgeÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/ios/Quantumult_sub.md&#34;&gt;iOSÁøªÂ¢ô‰πãQuantumultÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/ios/Quantumult_conf.md&#34;&gt;iOSÁøªÂ¢ô‰πãÂØºÂÖ• Quantumult ÂÆåÊï¥ÈÖçÁΩÆÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/android&#34;&gt;Android ÂÆâÂçìÁøªÂ¢ôAPPÊïôÁ®ã&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/android/v2free.md&#34;&gt;V2freeÂÆâÂçìÁøªÂ¢ôÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/android/clash.md&#34;&gt;Clash for android ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/android/BifrostV.md&#34;&gt;BifrostV ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/android/Shadowsocks.md&#34;&gt;Shadowsocks for android ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/android/ShadowsocksR.md&#34;&gt;SSR ÂÆâÂçìÁøªÂ¢ôÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/android/Surfboard.md&#34;&gt;Surfboard ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/android/V2RayNG.md&#34;&gt;V2RayNG ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/macos&#34;&gt;MacÁøªÂ¢ôËΩØ‰ª∂ÊïôÁ®ã&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91MAC%E7%BF%BB%E5%A2%99&#34;&gt;ËãπÊûúÁîµËÑëMACÁøªÂ¢ô&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/macos/ClashX.md&#34;&gt;macOSÁøªÂ¢ô‰πãClashXÁøªÂ¢ôÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/macos/V2RayU.md&#34;&gt;macOSÁøªÂ¢ô‰πãV2rayUÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/macos/Surge.md&#34;&gt;macOSÁøªÂ¢ô‰πãSurgeÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/macos/V2rayX.md&#34;&gt;macOSÁøªÂ¢ô‰πãV2rayXÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/router&#34;&gt;Ë∑ØÁî±Âô®ÁøªÂ¢ôÊïôÁ®ã&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/router/Merlin.md&#34;&gt;Ê¢ÖÊûóË∑ØÁî±Âô®ÁøªÂ¢ôÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/router/OpenWRT.md&#34;&gt;OpenWRTË∑ØÁî±Âô®ÁøªÂ¢ôÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/tree/master/linux&#34;&gt;LinuxÁøªÂ¢ôÊïôÁ®ã&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;ChromeGo - Chrome‰∏ÄÈîÆÁøªÂ¢ôÂåÖ&lt;/h2&gt; &#xA;&lt;p&gt;‰∏Ä‰∏™ÈõÜÊàêGoflyway„ÄÅv2ray„ÄÅDaze„ÄÅSSR„ÄÅBrook„ÄÅLightsocks„ÄÅtrojan„ÄÅËìùÁÅØ„ÄÅpsiphonÁ≠âNÂ§öÁøªÂ¢ôÂ∑•ÂÖ∑ÁöÑÁîµËÑëÁøªÂ¢ôÂåÖÔºàÊé®ËçêÊåâÂâçÈù¢ÊâÄÂàóÈ°∫Â∫è‰æùÊ¨°Â∞ùËØïÔºâÔºåÊâÄÊúâÂ∑•ÂÖ∑ÂÖ®ÈÉ®ÂÜÖÁΩÆÂÖçË¥πÊúçÂä°Âô®ÔºåÈïøÊúüÊõ¥Êñ∞„ÄÇÁî±‰∫éÂõΩÂÜÖÁΩëÁªúÁéØÂ¢ÉÂ§çÊùÇ„ÄÅÂú∞Âå∫‰∏çÂêåÔºåÁΩëÁªúËøêËê•ÂïÜ‰∏çÂêåÔºåÂ∞ÅÈîÅÊÉÖÂÜµÈÉΩ‰∏çÂêåÔºåÊâÄ‰ª•‰ΩøÁî®ÊïàÊûú‰ºöÊúâÂ∑ÆÂà´ÔºåÊúâÁöÑÂú∞Âå∫Âá†‰πéÊâÄÊúâÁöÑËΩØ‰ª∂ÈÉΩËÉΩ‰ΩøÁî®ÔºåÊúâÁöÑÂè™ËÉΩÁî®Âá†Ê¨æÔºåÂõ†Ê≠§ÂÖ∑‰ΩìÂì™Ê¨æËΩØ‰ª∂ÈÄÇÂêà‰Ω†ÁöÑÁΩëÁªúÁéØÂ¢ÉÔºåÈúÄË¶Å‰Ω†Ëá™Â∑±Êù•Â∞ùËØï„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Êé®ËçêÔºö&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/V2ray%E6%9C%BA%E5%9C%BA&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bannedbook/fanqiang/master/v2ss/images/v2free.jpg&#34; height=&#34;300&#34; alt=&#34;V2freeÁøªÂ¢ô-‰∏çÈôêÊµÅÈáè„ÄÅÈ´òÈÄüÁ®≥ÂÆö„ÄÅÊÄß‰ª∑ÊØîË∂ÖÂº∫&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/killgcd/justmysocks/raw/master/README.md&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/killgcd/justmysocks/master/images/bwgss.jpg&#34; alt=&#34;Êê¨Áì¶Â∑•ÁøªÂ¢ô Just My Socks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;‰∏ãËΩΩChrome‰∏ÄÈîÆÁøªÂ¢ôÂåÖ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bannedbook/fanqiang/wiki/Chrome%E4%B8%80%E9%94%AE%E7%BF%BB%E5%A2%99%E5%8C%85&#34;&gt;Chrome‰∏ÄÈîÆÁøªÂ¢ôÂåÖ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;‰ΩøÁî®Chrome‰∏ÄÈîÆÁøªÂ¢ôÂåÖ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;ËØ∑È¶ñÂÖàËá™Ë°åÂÆâË£ÖGoogle Chrome ÊµèËßàÂô®ÔºåÁÑ∂Âêé‰∏ãËΩΩChrome‰∏ÄÈîÆÁøªÂ¢ôÂåÖÔºåÊú¨ËΩØ‰ª∂‰ºöËá™Âä®Ë∞ÉÁî®Google Chrome ÊµèËßàÂô®ÁøªÂ¢ô„ÄÇ ‰∏ãËΩΩÂêéÔºåËß£ÂéãÂá∫Êù•ÔºåËØ∑‰∏çË¶ÅËß£ÂéãÂà∞Âê´Êúâ‰∏≠ÊñáÊàñÁ©∫Ê†ºÁöÑÁõÆÂΩïË∑ØÂæÑÔºåËØ∑‰∏çË¶Å‰∏çËß£ÂéãÂ∞±Áõ¥Êé•‰ªéÂéãÁº©ÂåÖÈáåËøêË°åÔºÅ‰∏çËß£Âéã‰ºöÂá∫ÈîôÔºÅ ‰∏ãËΩΩÂêéÔºåËØ∑ËÆ§ÁúüÈòÖËØªÈáåÈù¢ÁöÑ‰ΩøÁî®Â∏ÆÂä©ËØ¥ÊòéÔºåÁÑ∂Âêé 0.xx-10.xxÁøªÂ¢ô ÂèØ‰æùÊ¨°Â∞ùËØï„ÄÇ Ëá™Âä®ÂõûÂ§çÊúÄÊñ∞ÁøªÂ¢ô‰ø°ÊÅØÁΩëÂùÄÔºö&lt;a href=&#34;mailto:freeman105@gmail.com&#34;&gt;freeman105@gmail.com&lt;/a&gt;ÔºåÈÇÆÁÆ±‰∏çËß£Á≠îÈóÆÈ¢ò,Â¶ÇÈúÄÂèçÈ¶à‰∫§ÊµÅÔºåËØ∑&lt;a href=&#34;https://github.com/bannedbook/fanqiang/issues&#34;&gt;ÁÇπÊàë&lt;/a&gt;ÊàñÂä†ÂÖ•ÁøªÂ¢ôÁîµÊä•Áæ§: &lt;a href=&#34;https://t.me/fqchat&#34;&gt;https://t.me/fqchat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ÁâàÊùÉÂ£∞Êòé&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;ËØ∑ÈöèÊÑèÂàÜÂèëÔºåÂãøÂÅöÂïÜ‰∏ö‰ΩøÁî®„ÄÇ&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>uber/RIBs</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/uber/RIBs</id>
    <link href="https://github.com/uber/RIBs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Uber&#39;s cross-platform mobile architecture framework.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/uber/ribs/raw/assets/rib_horizontal_black.png&#34; width=&#34;60%&#34; height=&#34;60%&#34; alt=&#34;RIBs&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/uber/RIBs/actions/workflows/android.yml&#34;&gt;&lt;img src=&#34;https://github.com/uber/RIBs/actions/workflows/android.yml/badge.svg?branch=main&#34; alt=&#34;Android CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/artifact/com.uber.rib/rib-android&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.uber.rib/rib-android.svg?sanitize=true&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/ribs&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/RIBs.svg?sanitize=true&#34; alt=&#34;Cocoapods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?sanitize=true&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;RIBs is the cross-platform architecture framework behind many mobile apps at Uber. The name RIBs is short for Router, Interactor and Builder, which are core components of this architecture. This framework is designed for mobile apps with a large number of engineers and nested states.&lt;/p&gt; &#xA;&lt;p&gt;The RIBs architecture provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shared architecture across iOS and Android.&lt;/strong&gt; Build cross-platform apps that have similar architecture, enabling iOS and Android teams to cross-review business logic code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testability and Isolation.&lt;/strong&gt; Classes must be easy to unit test and reason about in isolation. Individual RIB classes have distinct responsibilities like: routing, business, view logic, creation. Plus, most RIB logic is decoupled from child RIB logic. This makes RIB classes easy to test and reason about independently.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tooling for developer productivity.&lt;/strong&gt; RIBs come with IDE tooling around code generation, memory leak detection, static analysis and runtime integrations - all which improve developer productivity for large teams or small.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;An architecture that scales.&lt;/strong&gt; This architecture has proven to scale to hundreds of engineers working on the same codebase and apps with hundreds of RIBs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To get started with RIBs, please refer to the &lt;a href=&#34;https://github.com/uber/RIBs/wiki&#34;&gt;RIBs documentation&lt;/a&gt;. This describes key concepts on RIBs, from what they are for, their structure and common use cases.&lt;/p&gt; &#xA;&lt;p&gt;To get more hands on with RIBs, we have written a &lt;a href=&#34;https://github.com/uber/RIBs/wiki&#34;&gt;series of tutorials&lt;/a&gt; that run you through the main aspects of the architecture with hands-on examples.&lt;/p&gt; &#xA;&lt;p&gt;To read about the backstory on why we created RIBs, see &lt;a href=&#34;https://eng.uber.com/new-rider-app/&#34;&gt;this blog post&lt;/a&gt; we wrote when releasing RIBs in production the first time and see &lt;a href=&#34;https://www.youtube.com/watch?v=Q5cTT0M0YXg&#34;&gt;this short video&lt;/a&gt; where we discussed how the RIBs architecture works.&lt;/p&gt; &#xA;&lt;h4&gt;What is the difference between RIBs and MV*/VIPER?&lt;/h4&gt; &#xA;&lt;p&gt;MVC, MVP, MVI, MVVM and VIPER are architecture patterns. RIBs is a framework. What differentiates RIBs from frameworks based on MV*/VIPER is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Business logic drives the app, not the view tree&lt;/strong&gt;. Unlike with MV*/VIPER, a RIB does not have to have a view. This means that the app hierarchy is driven by the business logic, not the view tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Independent business logic and view trees&lt;/strong&gt;. RIBs decouple how the business logic scopes are structured from view hierarchies. This allows the application to have a deep business logic tree, isolating business logic nodes, while maintaining a shallow view hierarchy making layouts, animations and transitions easy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are some other novel things about RIBs. However, these could also be implemented with other MV*/VIPER frameworks. These are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-platform approach&lt;/strong&gt;, allowing iOS and Android architecture to stay in sync.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tooling for easier adoption&lt;/strong&gt; on larger apps or teams. Tooling we are open sourcing includes IDE plugins for code generation and static code analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strong opinions about how state should be communicated&lt;/strong&gt;, using DI and Rx. Each RIB defines its dependencies and what dependencies it needs from its parent. Parent components that fulfill a child‚Äôs parent dependencies are provided to child Builders as a constructor dependency to allow for hierarchical DI scoping. This means that information is communicated via these dependencies up and down the tree.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Integrate using your preferred installation mechanism&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For usage of the tooling built around RIBs, please see the &lt;a href=&#34;https://github.com/uber/RIBs/wiki#rib-tooling&#34;&gt;Tooling section&lt;/a&gt; in our documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installation for Android&lt;/h2&gt; &#xA;&lt;p&gt;To integrate the recommended minimum setup for RIBs add the following to your &lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  annotationProcessor &#39;com.uber.rib:rib-compiler-test:0.13.0&#39;&#xA;  implementation &#39;com.uber.rib:rib-android:0.13.0&#39;&#xA;  testImplementation &#39;com.uber.rib:rib-test:0.13.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a number of extension packages available as well including Kotlin extensions, Jetpack Compose support, Coroutines support&lt;/p&gt; &#xA;&lt;h2&gt;Installation for iOS&lt;/h2&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;To integrate RIBs into your project add the following to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;RIBs&#39;, &#39;~&amp;gt; 0.9&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;To integrate RIBs into your project using Carthage add the following to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;uber/RIBs&#34; ~&amp;gt; 0.9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;p&gt;If you like RIBs, check out other related open source projects from our team:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uber/needle&#34;&gt;Needle&lt;/a&gt;: a compile-time safe Swift dependency injection framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uber/motif&#34;&gt;Motif&lt;/a&gt;: An abstract on top of Dagger offering simpler APIs for nested scopes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uber/swift-concurrency&#34;&gt;Swift Concurrency&lt;/a&gt;: a set of concurrency utility classes used by Uber, inspired by the equivalent &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html&#34;&gt;java.util.concurrent&lt;/a&gt; package classes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uber/swift-abstract-class&#34;&gt;Swift Abstract Class&lt;/a&gt;: a light-weight library along with an executable that enables compile-time safe abstract class development for Swift projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uber/swift-common&#34;&gt;Swift Common&lt;/a&gt;: common libraries used by this set of Swift open source projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (C) 2017 Uber Technologies&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/compose-jb</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/JetBrains/compose-jb</id>
    <link href="https://github.com/JetBrains/compose-jb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compose Multiplatform, a modern UI framework for Kotlin that makes building performant and beautiful user interfaces easy and enjoyable.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JetBrains/compose-jb/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/JetBrains/compose-jb?color=brightgreen&amp;amp;label=latest%20release&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JetBrains/compose-jb/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/JetBrains/compose-jb?color=orange&amp;amp;include_prereleases&amp;amp;label=latest%20build&#34; alt=&#34;Latest build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Compose Multiplatform, by JetBrains&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/artwork/readme/apps.png&#34; alt=&#34;&#34;&gt; Compose Kotlin UI framework port for desktop platforms (macOS, Linux, Windows) and Web, components outside of the core Compose repository at &lt;a href=&#34;https://android.googlesource.com/platform/frameworks/support&#34;&gt;https://android.googlesource.com/platform/frameworks/support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Preview functionality (check your application UI without building/running it) for desktop platforms is available via IDEA plugin (&lt;a href=&#34;https://plugins.jetbrains.com/plugin/16541-compose-multiplatform-ide-support&#34;&gt;https://plugins.jetbrains.com/plugin/16541-compose-multiplatform-ide-support&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Repository organization&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/artwork&#34;&gt;artwork&lt;/a&gt; - design artifacts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/benchmarks&#34;&gt;benchmarks&lt;/a&gt; - collection of benchmarks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/compose&#34;&gt;compose&lt;/a&gt; - composite build of &lt;a href=&#34;https://github.com/JetBrains/androidx&#34;&gt;Compose-jb sources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/ci&#34;&gt;ci&lt;/a&gt; - Continuous Integration helpers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples&#34;&gt;examples&lt;/a&gt; - examples of multiplatform Compose applications for Desktop, Android and Web &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/codeviewer&#34;&gt;codeviewer&lt;/a&gt; - File Browser and Code Viewer application for Android and Desktop&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/imageviewer&#34;&gt;imageviewer&lt;/a&gt; - Image Viewer application for Android and Desktop&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/issues&#34;&gt;issues&lt;/a&gt; - GitHub issue tracker with an adaptive UI and ktor-client&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/falling-balls&#34;&gt;game&lt;/a&gt; - Simple game&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/experimental/examples/falling-balls-mpp&#34;&gt;game&lt;/a&gt; - Simple game for web target&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/web-compose-bird&#34;&gt;compose-bird&lt;/a&gt; - A flappy bird clone using Compose for Web&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/notepad&#34;&gt;notepad&lt;/a&gt; - Notepad, using the new experimental Composable Window API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/todoapp&#34;&gt;todoapp&lt;/a&gt; - TODO items tracker with persistence and multiple screens&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/todoapp-lite&#34;&gt;todoapp-lite&lt;/a&gt; - A simplified version of &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/todoapp&#34;&gt;todoapp&lt;/a&gt;, fully based on Compose&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/widgets-gallery&#34;&gt;widgets gallery&lt;/a&gt; - Gallery of standard widgets&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/examples/intellij-plugin&#34;&gt;IDEA plugin&lt;/a&gt; - Plugin for IDEA using Compose for Desktop&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/gradle-plugins&#34;&gt;gradle-plugins&lt;/a&gt; - a plugin, simplifying usage of Compose Multiplatform with Gradle&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/templates&#34;&gt;templates&lt;/a&gt; - new application templates&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials&#34;&gt;tutorials&lt;/a&gt; - tutorials on using Compose Multiplatform &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Getting_Started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Image_And_Icons_Manipulations&#34;&gt;Image and icon manipulations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Mouse_Events&#34;&gt;Mouse events and hover&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Desktop_Components#scrollbars&#34;&gt;Scrolling and scrollbars&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Desktop_Components#tooltips&#34;&gt;Tooltips&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Window_API_new&#34;&gt;Top level windows management&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Tray_Notifications_MenuBar_new&#34;&gt;Menu, tray, notifications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Keyboard&#34;&gt;Keyboard support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Tab_Navigation&#34;&gt;Tab focus navigation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Native_distributions_and_local_execution&#34;&gt;Building native distribution&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Signing_and_notarization_on_macOS&#34;&gt;Signing and notarization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Swing_Integration&#34;&gt;Swing interoperability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Development_for_Android&#34;&gt;Development for Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Navigation&#34;&gt;Navigation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-jb/tree/master/tutorials/Accessibility&#34;&gt;Accessebility&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web&#34;&gt;tutorials: compose for web&lt;/a&gt; - tutorials on using Compose for Web &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web/Getting_Started&#34;&gt;Getting started with Compose for Web&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web/Building_UI&#34;&gt;Building web UI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web/Events_Handling&#34;&gt;Handling Events&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web/Controlled_Uncontrolled_Inputs&#34;&gt;Controlled and Uncontrolled inputs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web/Style_Dsl&#34;&gt;Style DSL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/tutorials/Web/Using_Test_Utils&#34;&gt;Using test-utils&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/components&#34;&gt;components&lt;/a&gt; - custom components of Compose Multiplatform &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/components/SplitPane&#34;&gt;Split Pane&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/experimental&#34;&gt;experimental&lt;/a&gt; - experimental components and examples &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/experimental/cef&#34;&gt;cef&lt;/a&gt; - CEF integration in Jetpack Compose (somewhat outdated)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/experimental/components/VideoPlayer&#34;&gt;Video Player&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/experimental/lwjgl-integration&#34;&gt;LWJGL integration&lt;/a&gt; - An example showing how to integrate Compose with &lt;a href=&#34;https://www.lwjgl.org&#34;&gt;LWJGL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-jb/master/experimental/build_from_cli&#34;&gt;CLI example&lt;/a&gt; - An example showing how to build Compose without Gradle&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting latest version of Compose Multiplatform&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/JetBrains/compose-jb/tags&#34;&gt;https://github.com/JetBrains/compose-jb/tags&lt;/a&gt; for the latest build number.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ProtonMail/proton-mail-android</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/ProtonMail/proton-mail-android</id>
    <link href="https://github.com/ProtonMail/proton-mail-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ProtonMail Android app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Proton Mail for Android&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2020 Proton AG&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code and data files in this distribution are licensed under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. See &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt; for a copy of this license.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ProtonMail/proton-mail-android/release/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;The most straightforward way to build and run this application is to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Android Studio: &lt;a href=&#34;https://developer.android.com/studio/install&#34;&gt;https://developer.android.com/studio/install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository. You have two options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use the &lt;code&gt;Project from version control&lt;/code&gt; in Android Studio, or&lt;/li&gt; &#xA;   &lt;li&gt;Use the &lt;code&gt;git clone&lt;/code&gt; command and import it into Android Studio&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build and run the app directly in Android Studio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, if you want to build the app directly from the command line (or using a different IDE, etc.), you will first need to install the command line tools from: &lt;a href=&#34;https://developer.android.com/studio#cmdline-tools&#34;&gt;https://developer.android.com/studio#cmdline-tools&lt;/a&gt;. Then you will need to install the SDK using the &lt;code&gt;sdkmanager&lt;/code&gt; tool. After cloning the repository with &lt;code&gt;git clone&lt;/code&gt; you will need to edit the &lt;code&gt;local.properties&lt;/code&gt; file so that it points to the location of the SDK. Depending on which operating systems you use, the location of the SDK is usually:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Local\Android\sdk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;MacOS: &lt;code&gt;/Users/&amp;lt;username&amp;gt;/Library/Android/Sdk/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;/home/&amp;lt;username&amp;gt;/Android/Sdk/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then, go to the app‚Äôs root directory in the command line tool and run:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew assembleBetaDebug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;adb install ./app/build/outputs/apk/beta/debug/ProtonMail-Android-1.XX.X-beta-debug.apk&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Note: In app notifications when building from source&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;When building from source, in app push notifications for new emails will not work out of the box.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The app uses Google&#39;s Firebase Cloud Messaging (FCM) service to deliver push notifications. However, we are not publishing the production version of the configuration files needed to set up this service, because the values specified within are deemed sensitive. Instead, we publish dummy versions of the files (&lt;code&gt;config/google-services/dummy-google-services.json&lt;/code&gt; and &lt;code&gt;config/google-services/dummy-google-services-beta.json&lt;/code&gt;) which allows you to build the app without push notifications. The dummy files will be copied to the relevant folders once you run the ./gradlew command.&lt;/p&gt; &#xA;&lt;p&gt;We may offer alternative push notification systems in the future which do not rely on Google services.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are appreciated, but must conform to Proton Guidelines.&lt;/p&gt; &#xA;&lt;h4&gt;Branch naming&lt;/h4&gt; &#xA;&lt;p&gt;Branch names must respect the pattern &lt;code&gt;type/description-of-the-change&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Type&lt;/em&gt; must be one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;chore&lt;/code&gt; for changes not related to the Kotlin source code, for example a change in the build config&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doc&lt;/code&gt; for changes related to source code documentation, or external document, like the README&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;feat&lt;/code&gt; for a new feature for the app&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fix&lt;/code&gt; for bug fixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;refactor&lt;/code&gt; for improving one or more unit of code, without impacting the behaviour of the app&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt; for everything related to test ( add a new test suite, add a new test into an already existing test suite or improve/modify the performance or the behaviour of an already existing test )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;description of change&lt;/em&gt; must be a concise and meaningful description of what is expected by the change apported; words must be separated by a dash &lt;code&gt;-&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The whole name of the branch must be lower case.&lt;/p&gt; &#xA;&lt;h4&gt;Commit message&lt;/h4&gt; &#xA;&lt;p&gt;The template for a commit message is the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;Title of the commit&amp;gt;&#xA;&#xA;#comment &amp;lt;Description of the changes&amp;gt;&#xA;Affected: &amp;lt;List of affected classes or behaviours&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Title&lt;/em&gt; is required and must start with a capital letter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#comment&lt;/code&gt; field is optional if the Title can exhaustively explain the changes, otherwise is required. Body of the comment must start with a capital letter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Affected&lt;/code&gt; is optional and must be a comma separated list of the elements affected by the changes, it could be the name of a class or a behaviour like &lt;code&gt;Encryption, Login flow, LoginActivity.kt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Code style and pattern&lt;/h4&gt; &#xA;&lt;p&gt;The code must conform the standards defined in the files &lt;code&gt;config/CodeStyle.xml&lt;/code&gt; and &lt;code&gt;config/detekt.xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CodeStyle.xml&lt;/code&gt; can be imported in the IDE ( &lt;em&gt;Preferences -&amp;gt; Editor -&amp;gt; Code Style -&amp;gt; Import scheme&lt;/em&gt; for IntelliJ and Android Studio ).&lt;/p&gt; &#xA;&lt;p&gt;Detekt reports can be generated with the command &lt;code&gt;./gradlew detekt&lt;/code&gt;. Check &lt;em&gt;Detekt GitHub&lt;/em&gt; documentation for know how to download and configure the &lt;strong&gt;optional&lt;/strong&gt; IDE plugin.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2020 Proton Technologies AG&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>UnlegitMC/FDPClient</title>
    <updated>2022-05-29T01:45:22Z</updated>
    <id>tag:github.com,2022-05-29:/UnlegitMC/FDPClient</id>
    <link href="https://github.com/UnlegitMC/FDPClient" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minecraft hack client based on LiquidBounce&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FDPClient&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trekhleb/state-of-the-art-shitcode&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=State-of-the-art&amp;amp;message=Shitcode&amp;amp;color=7B5804&#34; alt=&#34;State-of-the-art Shitcode&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/languages/code-size/UnlegitMC/FDPClient&#34; alt=&#34;GitHub code size in bytes&#34;&gt; &lt;img src=&#34;https://tokei.rs/b1/github/UnlegitMC/FDPClient&#34; alt=&#34;GitHub lines of code&#34;&gt; &lt;a href=&#34;https://codeclimate.com/github/UnlegitMC/FDPClient/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/a41ae7bde63c143e426a/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/game-Minecraft-brightgreen&#34; alt=&#34;Minecraft&#34;&gt;&lt;br&gt; A free mixin-based injection hacked-client for Minecraft using Minecraft Forge based on LiquidBounce.&lt;/p&gt; &#xA;&lt;p&gt;Website: &lt;a href=&#34;https://FDPClient.club&#34;&gt;https://FDPClient.club&lt;/a&gt;&lt;br&gt; Latest: &lt;a href=&#34;https://github.com/UnlegitMC/FDPClient/actions/workflows/build.yml?query=event%3Apush&#34;&gt;github-actions&lt;/a&gt;&lt;br&gt; Discord: &lt;a href=&#34;https://discord.gg/55x7TaHWXG&#34;&gt;https://discord.gg/55x7TaHWXG&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you notice any bugs or missing features, you can let us know by opening an issue &lt;a href=&#34;https://github.com/UnlegitMC/FDPClient/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is subject to the &lt;a href=&#34;https://raw.githubusercontent.com/UnlegitMC/FDPClient/main/LICENSE&#34;&gt;GNU General Public License v3.0&lt;/a&gt;. This does only apply for source code located directly in this clean repository. During the development and compilation process, additional source code may be used to which we have obtained no rights. Such code is not covered by the GPL license.&lt;/p&gt; &#xA;&lt;p&gt;For those who are unfamiliar with the license, here is a summary of its main points. This is by no means legal advise nor legally binding.&lt;/p&gt; &#xA;&lt;p&gt;You are allowed to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use&lt;/li&gt; &#xA; &lt;li&gt;share&lt;/li&gt; &#xA; &lt;li&gt;modify&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;this project entirely or partially for free and even commercially. However, please consider the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;You must disclose the source code of your modified work and the source code you took from this project. This means you are not allowed to use code from this project (even partially) in a closed-source (or even obfuscated) application.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Your modified application must also be licensed under the GPL&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Do the above and share your source code with everyone; just like we do.&lt;/p&gt; &#xA;&lt;h2&gt;Setting up a Workspace&lt;/h2&gt; &#xA;&lt;p&gt;FDPClient uses gradle, so make sure that it is installed properly. Instructions can be found on &lt;a href=&#34;https://gradle.org/install/&#34;&gt;Gradle&#39;s website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository using &lt;code&gt;git clone --recurse-submodules https://github.com/UnlegitMC/FDPClient.git&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;CD into the local repository folder.&lt;/li&gt; &#xA; &lt;li&gt;Depending on which IDE you are using execute either of the following commands: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For IntelliJ: &lt;code&gt;gradlew --debug setupDevWorkspace idea genIntellijRuns build&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For Eclipse: &lt;code&gt;gradlew --debug setupDevWorkspace eclipse build&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open the folder as a Gradle project in your IDE.&lt;/li&gt; &#xA; &lt;li&gt;Select the Forge run configuration.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Additional libraries&lt;/h2&gt; &#xA;&lt;h3&gt;Mixins&lt;/h3&gt; &#xA;&lt;p&gt;Mixins can be used to modify classes at runtime before they are loaded. FDPClient uses it to inject its code into the Minecraft client. This way, we do not have to ship Mojangs copyrighted code. If you want to learn more about it, check out its &lt;a href=&#34;https://docs.spongepowered.org/5.1.0/en/plugin/internals/mixins.html&#34;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are welcome for your contributing, but you have to follow these rules to make us merge your pull request.&lt;/p&gt; &#xA;&lt;h3&gt;Language and Code Quality&lt;/h3&gt; &#xA;&lt;p&gt;First of all, your code at least can be build, and make bugs as less as you can!&lt;br&gt; And we want to use kotlin features to make coding easier and faster, please use kotlin and make the &lt;a href=&#34;https://github.com/detekt/detekt&#34;&gt;Detekt&lt;/a&gt; code quality check good and use kotlin features if you can &lt;strong&gt;*&lt;/strong&gt;, we never merge shitcode.&lt;/p&gt; &#xA;&lt;h4&gt;Kotlin features&lt;/h4&gt; &#xA;&lt;p&gt;Usage of kotlin features and help enhance the code readability&lt;br&gt; kotlin feature examples&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;Timer().schedule(2000L) { &#xA;    // your code&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;not using kotlin feature&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;Timer().schedule(object : TimerTask(){&#xA;    override fun run() {&#xA;        // your code&#xA;    }&#xA;},2000L)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Skid codes&lt;/h3&gt; &#xA;&lt;p&gt;Please use original code if you can, and no direct code steals, but we welcome skid using packet logger or anything else like that to skid from a close source and make the cheating community more open!&lt;/p&gt; &#xA;&lt;h3&gt;Useless features&lt;/h3&gt; &#xA;&lt;p&gt;Useless features means feature only you think its usable ,or feature can be have with config change.&lt;br&gt; Like the &#34;TimerSpeed&#34; option to InfiniteAura, this feature can be added with bind Timer to the key with InfiniteAura, or use macro system in FDP Client.&lt;/p&gt;</summary>
  </entry>
</feed>