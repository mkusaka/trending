<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-05T08:22:17Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FaceOnLive/ID-Card-Passport-Recognition-SDK-Android</title>
    <updated>2023-02-05T08:22:17Z</updated>
    <id>tag:github.com,2023-02-05:/FaceOnLive/ID-Card-Passport-Recognition-SDK-Android</id>
    <link href="https://github.com/FaceOnLive/ID-Card-Passport-Recognition-SDK-Android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;On-Device ID Card &amp; Passport &amp; Driver License Recognition SDK for Android&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;ID Card, Passport, Driver License Recognition SDK for Android&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;On-Device &amp;amp; Offline, Robust, ID Card, Passport, Driver License OCR SDK for Android&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?text=On-Device,%20Robust,%20ID%20Card,%20Passport,%20Driver%20License%20OCR%20SDK%20for%20Android%0D%0D&amp;amp;url=https://github.com/FaceOnLive/ID-Card-Passport-Recognition-SDK-Android%0D%0D&amp;amp;hashtags=computervision,deeplearning,ocr,identity,idcard,passport,driverlicense,android,developers&#34;&gt;&lt;img src=&#34;http://randojs.com/images/tweetShield.svg?sanitize=true&#34; alt=&#34;Tweet&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/faceonlive&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/telegram?icon=telegram&amp;amp;label&#34; alt=&#34;Telegram&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;💪&lt;/span&gt; Partnership / Cooperation / Project Discussion&lt;/h2&gt; &#xA;&lt;p&gt; &lt;a href=&#34;mailto:contact@faceonlive.com?subject=%5BGitHub%5D%20OCR%20SDK%20Android&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/mail-%23DD0031.svg?&amp;amp;style=flat&amp;amp;logo=gmail&amp;amp;logoColor=white&#34; height=&#34;64&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🎉&lt;/span&gt; Try It Yourself&lt;/h2&gt; &#xA;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.ttv.ocrdemo&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Get it on Google Play&#34; src=&#34;https://goo.gl/cR2qQH&#34; height=&#34;100&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/91896009/147763694-c2416845-f066-4ab0-9326-fa8eca2a3c53.mp4&#34;&gt;https://user-images.githubusercontent.com/91896009/147763694-c2416845-f066-4ab0-9326-fa8eca2a3c53.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;👏&lt;/span&gt; Supporters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/faceonlive/ID-Card-Passport-Recognition-SDK-Android/stargazers&#34;&gt;&lt;img src=&#34;https://reporoster.com/stars/faceonlive/ID-Card-Passport-Recognition-SDK-Android&#34; alt=&#34;Stargazers repo roster for @faceonlive/ID-Card-Passport-Recognition-SDK-Android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/faceonlive/ID-Card-Passport-Recognition-SDK-Android/network/members&#34;&gt;&lt;img src=&#34;https://reporoster.com/forks/faceonlive/ID-Card-Passport-Recognition-SDK-Android&#34; alt=&#34;Forkers repo roster for @faceonlive/ID-Card-Passport-Recognition-SDK-Android&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/nastyox/Rando.js#nastyox&#34;&gt;&lt;img src=&#34;http://randojs.com/images/barsSmallTransparentBackground.gif&#34; alt=&#34;Animated footer bars&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Arcns/arc-fast</title>
    <updated>2023-02-05T08:22:17Z</updated>
    <id>tag:github.com,2023-02-05:/Arcns/arc-fast</id>
    <link href="https://github.com/Arcns/arc-fast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;本项目包含一系列Android开发的便携工具，主要包括Fast Permission、Immersive Dialog、Immersive PopupWindow、Fast Span、Fast Mask等，能够让你快速、优雅的享受安卓便捷开发～&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Arc Fast&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jitpack.io/#com.gitee.arcns/arc-fast&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/com.gitee.arcns/arc-fast.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目长期维护，有问题请提Issues&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目所有Library，均有实际商业项目长期稳定运行，请放心使用&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目所有Library均无多余第三方引用，如需额外引用会特殊注明，引用后大小基本都在10kb以下，无需担心体积问题&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目所有Library之间相互独立存在，请按需引用对应的Library，使用方法请参考文档与sample源码&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;目录&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/#%E4%B8%80%E4%BB%8B%E7%BB%8D&#34;&gt;一、介绍&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/#%E4%BA%8Cfast-resource&#34;&gt;二、Fast Resource:一行代码简单实现Android dp2px、sp2px、常用Resource值(string/color/drawable)获取&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/#%E4%B8%89fast-permission&#34;&gt;三、Fast Permission:一行代码实现基于Activity Result API的动态权限获取&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/#%E5%9B%9Bimmersive-dialog&#34;&gt;四、Immersive Dialog:一行代码简单实现Android沉浸式Dialog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/#%E4%BA%94immersive-popupwindow&#34;&gt;五、Immersive PopupWindow:一行代码简单实现Android沉浸式PopupWindow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/#%E5%85%ADfast-span&#34;&gt;六、Fast Span:一行代码简单实现Android TextView常用样式Span&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/#%E4%B8%83fast-mask&#34;&gt;七、Fast Mask:一行代码简单实现Android遮罩镂空视图&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/#%E5%85%ABfast-rounded&#34;&gt;八、Fast Rounded:一行代码简单实现Android常用View的圆角边框&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/#%E4%B9%9Dfast-textview&#34;&gt;九、Fast TextView:一行代码实现TextView中粗、四个方向drawable的不同Padding和宽高&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/#%E5%8D%81fast-nestedscrollcompat&#34;&gt;十、Fast NestedScrollCompat:一行代码解决Android滚动控件嵌套产生的滑动事件冲突&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/#%E5%8D%81%E4%B8%80fast-dragexitlayout&#34;&gt;十一、Fast DragExitLayout:一行代码实现Android仿小红书、Lemon8拖拽退出效果&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;一、介绍&lt;/h2&gt; &#xA;&lt;p&gt;本项目包含一系列开箱即用的便携工具，主要包括Fast Permission、Immersive Dialog、Immersive PopupWindow、Fast Span、Fast Mask等，能够让你快速、优雅的享受安卓便捷开发～&lt;/p&gt; &#xA;&lt;h2&gt;二、Fast Resource&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一行代码简单实现Android dp2px、sp2px、常用Resource值(string/color/drawable)获取&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1.集成方式：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;allprojects {&#xA;&#x9;repositories {&#xA;&#x9;&#x9;...&#xA;&#x9;&#x9;maven { url &#39;https://www.jitpack.io&#39; }&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt; implementation &#39;com.gitee.arcns.arc-fast:core:latest.release&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.使用方式&lt;/h4&gt; &#xA;&lt;p&gt;（1）dp2px、px2dp&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;方法&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;   &lt;th&gt;用法&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Float.dpToPx&lt;/td&gt; &#xA;   &lt;td&gt;把dp转换为px(Float格式)&lt;/td&gt; &#xA;   &lt;td&gt;100f.dpToPx&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.dpToPx&lt;/td&gt; &#xA;   &lt;td&gt;把dp转换为px(Int格式)&lt;/td&gt; &#xA;   &lt;td&gt;100.dpToPx&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Float.pxToDp&lt;/td&gt; &#xA;   &lt;td&gt;把px转换为dp(Float格式)&lt;/td&gt; &#xA;   &lt;td&gt;100f.pxToDp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.pxToDp&lt;/td&gt; &#xA;   &lt;td&gt;把px转换为dp(Int格式)&lt;/td&gt; &#xA;   &lt;td&gt;100.pxToDp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;（2）sp2px、pxToSp&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;方法&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;   &lt;th&gt;用法&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Float.spToPx&lt;/td&gt; &#xA;   &lt;td&gt;把sp转换为px(Float格式)&lt;/td&gt; &#xA;   &lt;td&gt;100f.spToPx&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.spToPx&lt;/td&gt; &#xA;   &lt;td&gt;把sp转换为px(Int格式)&lt;/td&gt; &#xA;   &lt;td&gt;100.spToPx&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Float.pxToSp&lt;/td&gt; &#xA;   &lt;td&gt;把px转换为sp(Float格式)&lt;/td&gt; &#xA;   &lt;td&gt;100f.pxToSp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.pxToSp&lt;/td&gt; &#xA;   &lt;td&gt;把px转换为sp(Int格式)&lt;/td&gt; &#xA;   &lt;td&gt;100.pxToSp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;（3）获取String资源&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;方法&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;   &lt;th&gt;用法&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.resToString&lt;/td&gt; &#xA;   &lt;td&gt;通过StringRes获取String值&lt;/td&gt; &#xA;   &lt;td&gt;R.string.test.resToString&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.resToStringOrNull&lt;/td&gt; &#xA;   &lt;td&gt;通过StringRes获取String值，获取失败时返回null&lt;/td&gt; &#xA;   &lt;td&gt;R.string.test.resToStringOrNull&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.resToString(vararg values: Any?)&lt;/td&gt; &#xA;   &lt;td&gt;通过StringRes获取String值，并替换格式参数(例如%1$s)&lt;/td&gt; &#xA;   &lt;td&gt;R.string.test.resToString(&#34;1&#34;,&#34;2&#34;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.resToStringOrNull(vararg values: Any?)&lt;/td&gt; &#xA;   &lt;td&gt;通过StringRes获取String值，并替换格式参数(例如%1$s)，获取失败时返回null&lt;/td&gt; &#xA;   &lt;td&gt;R.string.test.resToStringOrNull(&#34;1&#34;,&#34;2&#34;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;（4）Drawable资源&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;方法&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;   &lt;th&gt;用法&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.resToDrawable&lt;/td&gt; &#xA;   &lt;td&gt;通过DrawableRes获取Drawable值&lt;/td&gt; &#xA;   &lt;td&gt;R.drawable.test.resToDrawable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.resToDrawableOrNull&lt;/td&gt; &#xA;   &lt;td&gt;通过DrawableRes获取Drawable值，获取失败时返回null&lt;/td&gt; &#xA;   &lt;td&gt;R.drawable.test.resToDrawableOrNull&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Drawable.applyTint(color: Int?)&lt;/td&gt; &#xA;   &lt;td&gt;为Drawable实现着色效果&lt;/td&gt; &#xA;   &lt;td&gt;drawable.applyTint(0x24000000)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Drawable.applyRipple(context: Context,rippleColor: Int? = null,rippleColorStateList: ColorStateList? = null)&lt;/td&gt; &#xA;   &lt;td&gt;为Drawable实现Ripple效果，ColorStateList优先级高于rippleColor&lt;/td&gt; &#xA;   &lt;td&gt;drawable.applyRipple(context,0x00000000)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;（5）Color资源&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;方法&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;   &lt;th&gt;用法&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.resToColor&lt;/td&gt; &#xA;   &lt;td&gt;通过ColorRes获取Color值&lt;/td&gt; &#xA;   &lt;td&gt;R.color.test.resToColor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.resToColorOrNull&lt;/td&gt; &#xA;   &lt;td&gt;通过ColorRes获取Color值，获取失败时返回null&lt;/td&gt; &#xA;   &lt;td&gt;R.color.test.resToColorOrNull&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String.hexToColor&lt;/td&gt; &#xA;   &lt;td&gt;把Hex Color转换为Color(Int格式)&lt;/td&gt; &#xA;   &lt;td&gt;&#34;#00000000&#34;.hexToColor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String.hexToColorOrNull&lt;/td&gt; &#xA;   &lt;td&gt;把Hex Color转换为Color(Int格式)，获取失败时返回null&lt;/td&gt; &#xA;   &lt;td&gt;&#34;#000000&#34;.hexToColorOrNull&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.colorToHex&lt;/td&gt; &#xA;   &lt;td&gt;把Color转换为Hex Color(String格式)&lt;/td&gt; &#xA;   &lt;td&gt;0x00000000.colorToHex&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.colorToHexOrNull&lt;/td&gt; &#xA;   &lt;td&gt;把Color转换为Hex Color(String格式)，获取失败时返回null&lt;/td&gt; &#xA;   &lt;td&gt;0x00000000.colorToHexOrNull&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.lightColorNess&lt;/td&gt; &#xA;   &lt;td&gt;获取Color的亮度(0-1)&lt;/td&gt; &#xA;   &lt;td&gt;0x00000000.lightColorNess&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.isLightColor&lt;/td&gt; &#xA;   &lt;td&gt;判断Color是否为亮色调&lt;/td&gt; &#xA;   &lt;td&gt;0x00000000.isLightColor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;（6）Dimension资源&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;方法&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;   &lt;th&gt;用法&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.resToDimenValue&lt;/td&gt; &#xA;   &lt;td&gt;通过DimenRes获取Dimen值&lt;/td&gt; &#xA;   &lt;td&gt;R.dimen.test.resToDimenValue&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Int.resToDimenValueOrNull&lt;/td&gt; &#xA;   &lt;td&gt;通过DimenRes获取Dimen值，获取失败时返回null&lt;/td&gt; &#xA;   &lt;td&gt;R.dimen.test.resToDimenValueOrNull&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;（7）Attr资源（Attr的Res资源与Context的theme相关，因此此处必须手动传入Attr对应的Context）&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;方法&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;   &lt;th&gt;用法&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Context.getAttributeResource(attr: Int, defResId: Int? = null)&lt;/td&gt; &#xA;   &lt;td&gt;通过AttrResId获取Res资源&lt;/td&gt; &#xA;   &lt;td&gt;context.getAttributeResource(R.attr.test)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Context.selectableItemBackgroundRes&lt;/td&gt; &#xA;   &lt;td&gt;获取selectableItemBackground资源&lt;/td&gt; &#xA;   &lt;td&gt;context.selectableItemBackgroundRes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Context.selectableItemBackgroundBorderlessRes&lt;/td&gt; &#xA;   &lt;td&gt;获取selectableItemBackgroundBorderless资源&lt;/td&gt; &#xA;   &lt;td&gt;context.selectableItemBackgroundBorderlessRes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Context.actionBarItemBackgroundRes&lt;/td&gt; &#xA;   &lt;td&gt;获取actionBarItemBackground资源&lt;/td&gt; &#xA;   &lt;td&gt;context.actionBarItemBackgroundRes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;三、Fast Permission&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一行代码实现基于Activity Result API的动态权限获取`&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;众所周知，在Android中如果我们想要实现动态权限获取，只需要调用&lt;code&gt;ActivityCompat.requestPermissions(activity/fragment,permissions,requestCode)&lt;/code&gt;，然后在&lt;code&gt;activity/fragment&lt;/code&gt;中重写&lt;code&gt;onRequestPermissionsResult&lt;/code&gt;来响应请求结果即可，当然我们也可以通过&lt;code&gt;RxPermissions&lt;/code&gt;、&lt;code&gt;easypermissions&lt;/code&gt;等第三方库实现，简单而便捷。可如今却有一个小问题，就是在新的API中，&lt;code&gt;onRequestPermissionsResult&lt;/code&gt;已被弃用，取而代之的是&lt;code&gt;Activity Result API&lt;/code&gt;，但大多数第三方库仍然使用旧的解决方案。因此，假设你想要不使用已被弃用的&lt;code&gt;onRequestPermissionsResult&lt;/code&gt;，大概率就只能自己通过&lt;code&gt;Activity Result API&lt;/code&gt;实现了，经过实践，我发现如果项目中全部使用&lt;code&gt;Activity Result API&lt;/code&gt;代替原有方法，会存在大量样板代码，而且&lt;code&gt;registerForActivityResult&lt;/code&gt;要求必须在&lt;code&gt;fragment&lt;/code&gt;或&lt;code&gt;activity&lt;/code&gt;的&lt;code&gt;Lifecycle&lt;/code&gt;达到&lt;code&gt;CREATED&lt;/code&gt;之前创建，所以也无法进行按需加载，于是便做了一个开源Library项目，方便大家集成后，一行代码实现基于Activity Result API的动态权限获取。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.实现思路：&lt;/h4&gt; &#xA;&lt;p&gt;相对比原来的&lt;code&gt;onRequestPermissionsResult&lt;/code&gt;，&lt;code&gt;Activity Result API&lt;/code&gt;使用起来更加的便捷友好，我们只需要简单的封装和实现权限理由相关的逻辑，即可方便的调用。 唯一的难度在于：根据&lt;code&gt;https://developer.android.com/training/basics/intents/result?hl=zh-cn&lt;/code&gt;，&lt;code&gt;registerForActivityResult&lt;/code&gt;要求必须在&lt;code&gt;fragment&lt;/code&gt;或&lt;code&gt;activity&lt;/code&gt;的&lt;code&gt;Lifecycle&lt;/code&gt;达到&lt;code&gt;CREATED&lt;/code&gt;之前创建，这意味着我们无法进行按需加载，而且每次都要创建实例，无法通过静态方法进行一键调用。 经过研究，这里我们通过创建一个专用的&lt;code&gt;fragment&lt;/code&gt;来解决上述的问题： 在调用动态权限获取的时候，我们创建一个空布局的&lt;code&gt;fragment&lt;/code&gt;，并在这个&lt;code&gt;fragment&lt;/code&gt;的onCreate中进行&lt;code&gt;registerForActivityResult&lt;/code&gt;，从而满足创建条件并实现按需加载；另外为了提高效率，我们也做了实例池避免这个专用&lt;code&gt;fragment&lt;/code&gt;的重复创建问题，并实现了自动的生命周期管理。&lt;/p&gt; &#xA;&lt;h4&gt;2.集成方式：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;allprojects {&#xA;&#x9;repositories {&#xA;&#x9;&#x9;...&#xA;&#x9;&#x9;maven { url &#39;https://www.jitpack.io&#39; }&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt; // 注意：本Library基于androidx&#xA; implementation &#39;com.gitee.arcns.arc-fast:permission:latest.release&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.使用方式：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;简单获取权限&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt; FastPermissionUtil.request(&#xA;            activity, // or fragment&#xA;            Manifest.permission.CAMERA,&#xA;            Manifest.permission.READ_EXTERNAL_STORAGE,&#xA;            ... &#xA;        ) { allGranted: Boolean, result: Map&amp;lt;String, FastPermissionResult&amp;gt; -&amp;gt;&#xA;            // allGranted：是否全部权限获取成功&#xA;            // result：各个权限的获取结果，key为permission，value为获取结果（Granted:同意；Denied:拒绝；DeniedAndDonTAskAgain:拒绝且不再询问）&#xA;             if (allGranted) {&#xA;                // 全部权限获取成功&#xA;            }&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;获取权限，并在必要时弹出权限解释说明&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt; FastPermissionUtil.request(&#xA;             fragment = this,&#xA;            FastPermissionRequest(Manifest.permission.CAMERA,&#34;应用需要相机权限用于扫描&#34;),&#xA;            FastPermissionRequest(Manifest.permission.READ_EXTERNAL_STORAGE,&#34;应用需要储存权限用于选择扫描图片&#34;),&#xA;        ) { allGranted, result -&amp;gt;&#xA;             if (allGranted) {&#xA;                // 全部权限获取成功&#xA;            }&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用自定义的弹出权限解释说明弹窗&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt; FastPermissionUtil.showAlertDialog = {activity,message,positiveButton,onPositiveButton,negativeButton,onNegativeButton -&amp;gt;&#xA;           // 弹出自定义弹窗&#xA;          MyAlertDialogBuilder(activity)&#xA;                    .setMessage(message)&#xA;                    .setNegativeButton(negativeButton) { _, _ -&amp;gt; onNegativeButton.invoke() }&#xA;                    .setPositiveButton(positiveButton) { _, _ -&amp;gt; onPositiveButton.invoke() }&#xA;                    .show()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;四、Immersive Dialog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一行代码简单实现Android沉浸式Dialog&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;随着全面屏时代的来临，沉浸式的体验对于APP变得越来越重要，Dialog作为APP一种重要的交互方式，如果不实现沉浸式的话，那么Dialog显示时便会在&lt;code&gt;状态栏/系统导航栏/小白条&lt;/code&gt;上会出现丑陋的黑边，或出现上下一边有黑边一边没有黑边的情况，影响体验。但是，想要在Android中实现理想的沉浸式Dialog，并不是一件容易的事情，不仅Android不同版本的系统实现方式不同，而且Android提供的设置API也并不友好，大多数情况下，若我们想要达到理想的沉浸式Dialog，往往需要花费大量的时间。 由于每个项目都会或多或少遇到这个问题，解决起来也较为繁琐，存在着大量样板代码，所以我做了一个开源Library项目，不仅能够方便大家快速实现Android沉浸式Dialog，也能够大大简化Dialog的配置，让大家聚焦于业务功能代码。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.集成方式：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;allprojects {&#xA;&#x9;repositories {&#xA;&#x9;&#x9;...&#xA;&#x9;&#x9;maven { url &#39;https://www.jitpack.io&#39; }&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 注意，本项目基于androidx&#xA; implementation &#39;com.gitee.arcns.arc-fast:immersive:latest.release&#39;&#xA;// Library中使用了Constraintlayout，如果你的项目中未引入，那么你还需要&#xA;implementation &#39;androidx.constraintlayout:constraintlayout:yourversion&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.使用方式&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;第一步：Dialog改为继承ImmersiveDialog 第二步：实现layoutId（Dialog的布局文件）和immersiveDialogConfig（沉浸式配置） 第三步：在onViewCreated实现您自己的业务逻辑&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * 第一步：Dialog改为继承ImmersiveDialog&#xA; */&#xA;class TestDialog : ImmersiveDialog() {&#xA;&#xA;    /**&#xA;     * 第二步：实现layoutId（Dialog的布局文件）&#xA;     * 注意：您不需要再自行实现onCreateView方法&#xA;     */&#xA;    override val layoutId: Int get() = R.layout.dialog_test&#xA;&#xA;    /**&#xA;     * 第二步：实现immersiveDialogConfig（沉浸式配置），为简化配置，我们内置了三种常用配置：&#xA;     * 1. createFullScreenDialogConfig 全屏弹窗配置&#xA;     * 2. createBottomDialogConfig 底部弹窗配置&#xA;     * 3. createSoftInputAdjustResizeDialogConfig 带输入框的弹窗配置&#xA;     * 如果您有更多自定义需求，您可以自行创建自己的ImmersiveDialogConfig&#xA;     * 注意：您不需要再自行配置Dialog和Window，通过ImmersiveDialogConfig即可简单完成配置&#xA;     */&#xA;    override val immersiveDialogConfig: ImmersiveDialogConfig&#xA;        get() = ImmersiveDialogConfig.createFullScreenDialogConfig()&#xA;&#xA;    /**&#xA;     * 第三步：在onViewCreated实现您自己的业务逻辑&#xA;     */&#xA;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#xA;        super.onViewCreated(view, savedInstanceState)&#xA;        ... ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;常用案例一：全屏弹窗&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;override val immersiveDialogConfig&#xA;        get() = ImmersiveDialogConfig.createFullScreenDialogConfig().apply {&#xA;            height = 500 // 可选：设置弹窗宽度&#xA;            width = 500 // 可选：设置弹窗高度&#xA;            backgroundDimEnabled = false // 可选：禁用默认弹窗背景&#xA;            backgroundColor = 0x99000000.toInt() // 可选：设置弹窗背景的颜色&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;常用案例二：底部弹窗&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;override val immersiveDialogConfig&#xA;        get() = ImmersiveDialogConfig.createFullScreenDialogConfig().apply {&#xA;            height = 500 // 可选：设置弹窗高度&#xA;            navigationColor = Color.BLACK  //可选：设置底部导航栏背景为黑色&#xA;            isLightNavigationBarForegroundColor = true //可选：设置设置底部导航栏上的图标为白色&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;常用案例三：带输入框同时需要弹出键盘时自动更改布局的弹窗&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;override val immersiveDialogConfig&#xA;        get() = ImmersiveDialogConfig.createSoftInputAdjustResizeDialogConfig().apply {&#xA;            backgroundDimEnabled = false // 可选：该配置下除非禁用backgroundDimEnabled否则navigationColor会无效&#xA;            backgroundColor = 0x99000000.toInt() // 可选：设置弹窗背景的颜色&#xA;            animations = 0&#xA;        }&#xA;&#xA;override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#xA;        super.onViewCreated(view, savedInstanceState)&#xA;        // SoftInputAdjustResizeDialogConfig需要与applyWindowInsetIMEAnimation配合使用&#xA;        binding.clContent.applyWindowInsetIMEAnimation(&#xA;            dispatchMode = WindowInsetsAnimationCompat.Callback.DISPATCH_MODE_CONTINUE_ON_SUBTREE,&#xA;            rootView = view&#xA;        )&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.ImmersiveDialogConfig支持的配置参数&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;配置参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;width&lt;/td&gt; &#xA;   &lt;td&gt;Int&lt;/td&gt; &#xA;   &lt;td&gt;Dialog的宽度，支持MATCH_PARENT、WRAP_CONTENT或具体数值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;height&lt;/td&gt; &#xA;   &lt;td&gt;Int&lt;/td&gt; &#xA;   &lt;td&gt;Dialog的高度，支持MATCH_PARENT、WRAP_CONTENT或具体数值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gravity&lt;/td&gt; &#xA;   &lt;td&gt;Int&lt;/td&gt; &#xA;   &lt;td&gt;弹窗的位置，支持Gravity.CENTER、Gravity.BOTTOM等位置&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backgroundDimEnabled&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;启用系统自带的弹窗半透明黑色背景&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backgroundDimAmount&lt;/td&gt; &#xA;   &lt;td&gt;Float&lt;/td&gt; &#xA;   &lt;td&gt;系统自带背景的透明值，范围为0[完全透明]-1[不透明]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backgroundColor&lt;/td&gt; &#xA;   &lt;td&gt;Int&lt;/td&gt; &#xA;   &lt;td&gt;自定义的弹窗背景颜色，只有backgroundDimEnabled为false时才有效果&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;navigationColor&lt;/td&gt; &#xA;   &lt;td&gt;Int&lt;/td&gt; &#xA;   &lt;td&gt;弹窗系统导航栏处/底部小白条的颜色&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;animations&lt;/td&gt; &#xA;   &lt;td&gt;Int&lt;/td&gt; &#xA;   &lt;td&gt;弹窗动画的资源文件，为0时表示无动画&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;canceledOnTouchOutside&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;触摸弹窗之外的地方是否关闭弹窗&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cancelable&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;点击返回按键是否关闭弹窗&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isLightStatusBarForegroundColor&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;系统状态栏上的图标与文字是否显示为白色&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isLightNavigationBarForegroundColor&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;系统导航栏上的图标是否显示为白色&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enableWrapDialogContentView&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;启用弹窗内容根视图包裹。注意如果不启用，则由背景实现视图包裹功能（navigationColor由背景包裹控制，而且除非禁用backgroundDimEnabled否则navigationColor无效）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enableSoftInputAdjustResize&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;启用打开键盘时自动重置弹窗布局大小，避免布局被键盘遮挡。注意启用后，内容无法扩展到全屏，通常R版本以下带输入框同时需要弹出键盘时自动更改布局的弹窗需设置该项为true，否则键盘打开后无法重置布局&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;updateCustomDialogConfig&lt;/td&gt; &#xA;   &lt;td&gt;(dialog, window) -&amp;gt; Unit&lt;/td&gt; &#xA;   &lt;td&gt;更新dialog更多自定义配置&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;五、Immersive PopupWindow&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一行代码简单实现Android沉浸式PopupWindow&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;随着全面屏时代的来临，沉浸式的体验对于APP变得越来越重要，PopupWindow作为APP一种重要的交互方式，如果不实现沉浸式的话，那么PopupWindow显示时便会在&lt;code&gt;状态栏/系统导航栏/小白条&lt;/code&gt;上会出现丑陋的黑边，或出现上下一边有黑边一边没有黑边的情况，影响体验。但是，想要在Android中实现理想的沉浸式PopupWindow，并不是一件容易的事情，不仅Android不同版本的系统实现方式不同，而且Android提供的设置API也并不友好，大多数情况下，若我们想要达到理想的沉浸式PopupWindow，往往需要花费大量的时间。 由于每个项目都会或多或少遇到这个问题，解决起来也较为繁琐，存在着大量样板代码，所以我做了一个开源Library项目，不仅能够方便大家快速实现Android沉浸式PopupWindow，让大家聚焦于业务功能代码。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.集成方式：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;allprojects {&#xA;&#x9;repositories {&#xA;&#x9;&#x9;...&#xA;&#x9;&#x9;maven { url &#39;https://www.jitpack.io&#39; }&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 注意，本项目基于androidx&#xA; implementation &#39;com.gitee.arcns.arc-fast:immersive:latest.release&#39;&#xA;// Library中使用了Constraintlayout，如果你的项目中未引入，那么你还需要&#xA;implementation &#39;androidx.constraintlayout:constraintlayout:yourversion&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.使用方式&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;第一步：PopupWindow改为继承ImmersivePopupWindow 第二步：实现getImmersivePopupWindowConfig&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;/**&#xA; * 第一步：PopupWindow改为继承ImmersivePopupWindow&#xA; */&#xA;class TestPopupWindow : ImmersivePopupWindow(ViewGroup.LayoutParams.MATCH_PARENT, 500)  {&#xA;&#xA;    /**&#xA;     * 第二步：实现getImmersivePopupWindowConfig（沉浸式配置），为简化配置，我们内置了三种常用配置：&#xA;     * 1. createBottomPopupWindow 底部PopupWindows&#xA;     * 2. createTopToAnchorBottomPopupWindow 顶部锚点PopupWindows（例如顶部下拉菜单）&#xA;     * 3. createBottomToAnchorTopPopupWindow 底部锚点PopupWindows（例如底部上拉菜单）&#xA;     * 如果您有更多自定义需求，您可以自行创建自己的ImmersivePopupWindowConfig&#xA;     */&#xA;   override fun getImmersivePopupWindowConfig(context: Context) =&#xA;        ImmersivePopupWindowConfig.createBottomPopupWindow(context)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.ImmersivePopupWindowConfig支持的配置参数&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;配置参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backgroundColor&lt;/td&gt; &#xA;   &lt;td&gt;Int&lt;/td&gt; &#xA;   &lt;td&gt;背景颜色&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;navigationColor&lt;/td&gt; &#xA;   &lt;td&gt;Int&lt;/td&gt; &#xA;   &lt;td&gt;系统导航栏处/底部小白条的颜色&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;canceledOnTouchOutside&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;触摸PopupWindow之外的地方是否关闭PopupWindow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cancelable&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;点击返回按键是否关闭PopupWindow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isLightStatusBarForegroundColor&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;系统状态栏上的图标与文字是否显示为白色&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isLightNavigationBarForegroundColor&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;系统导航栏上的图标是否显示为白色&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backgroundConstraint&lt;/td&gt; &#xA;   &lt;td&gt;ImmersivePopupWindowBackgroundConstraint&lt;/td&gt; &#xA;   &lt;td&gt;相对于锚点的背景布局约束&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enableBackgroundAnimator&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;是否启用背景渐变动画&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;六、Fast Span&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一行代码简单实现Android TextView常用样式Span&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;在日常开发中，我们经常需要使用到TextView Span的各种常用样式，但Android提供的设置API也并不友好，无法快速使用，所以我做了一个开源Library项目，方便大家集成后，一行代码简单实现Android TextView常用样式Span。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.集成方式：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;allprojects {&#xA;&#x9;repositories {&#xA;&#x9;&#x9;...&#xA;&#x9;&#x9;maven { url &#39;https://www.jitpack.io&#39; }&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt; implementation &#39;com.gitee.arcns.arc-fast:span:latest.release&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.使用方式&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt; val spannableStringBuilder = SpannableStringBuilder()&#xA;// 添加图片的宽高、间距、点击事件等常用样式使用appendFastImageStyle&#xA;spannableStringBuilder.appendFastImageStyle(&#xA;            context = requireContext(),&#xA;            drawableRes = R.mipmap.ic_launcher_round&#xA;        ) {&#xA;            width = 20.dp //图片宽度&#xA;            height = 20.dp //图片高度&#xA;            padding = 8.dp //图片间距&#xA;            onClick = {&#xA;                // 点击图片回调&#xA;            }&#xA;        }&#xA;// 添加带圆角边框的文字使用appendFastSpan与FastTextWrapSpan&#xA;spannableStringBuilder.appendFastSpan(&#xA;    &#34;满99元减10元&#34;, &#xA;    FastTextWrapSpan(&#xA;        radius = 4f.dp, // 边框的圆角&#xA;        borderSize = 1f.dp, // 边框的大小&#xA;        borderColor = R.color.main.color,// 边框的颜色&#xA;        textSize = 12f.sp, // 文字的大小&#xA;        textColor = R.color.main.color, // 文字的颜色&#xA;        textRightMargin = 6f.dp, // 文字的右外边距&#xA;        topPadding = 2f.dp, // 文字的上内边距&#xA;        bottomPadding = 2f.dp,// 文字的下内边距&#xA;        leftPadding = 6f.dp,// 文字的左内边距&#xA;        rightPadding = 6f.dp// 文字的右内边距&#xA;    )&#xA;)&#xA;spannableStringBuilder.append(&#xA;    &#34;华为平板MatePad 11 平板电脑120Hz高刷全面屏 鸿蒙HarmonyOS 6G+128GB WIFI 曜石灰 WIFI海岛蓝&#34;&#xA;)&#xA;// 添加文字之间的间距使用appendFastSpacing&#xA;spannableStringBuilder.appendFastSpacing(6.dp)&#xA;// 添加文字的颜色、大小、加粗、点击事件等常用样式使用appendFastTextStyle&#xA;spannableStringBuilder.appendFastTextStyle(&#34;10月31日-11月3日的订单，预计在2日内发货&#34;) {&#xA;    textColor = 0xFF999999.toInt() // 文字颜色&#xA;    textSize = 14.sp // 文字大小&#xA;    textStyle = Typeface.BOLD // 文字加粗&#xA;     onClick = {&#xA;                // 点击文字回调&#xA;      }&#xA;}&#xA;binding.tvTitle.text = spannableStringBuilder&#xA;binding.tvTitle.enableClickableSpan() // 启用点击事件&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;七、Fast Mask&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一行代码简单实现Android遮罩镂空视图&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;在日常开发中，我们经常需要实现遮罩镂空的功能，例如扫码、引导页、遮挡层等等。通常我们会在每个需要的地方自定义一个View来实现，但如果项目有多个地方存在类似需求，就会产生大量样板代码，于是我做了一个开源Library项目，方便大家集成后，一行代码实现Android遮罩镂空视图。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.集成方式：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;allprojects {&#xA;&#x9;repositories {&#xA;&#x9;&#x9;...&#xA;&#x9;&#x9;maven { url &#39;https://www.jitpack.io&#39; }&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt; implementation &#39;com.gitee.arcns.arc-fast&lt;span&gt;😷&lt;/span&gt;latest.release&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.使用方式&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;com.arc.fast.mask.MaskHollowView&#xA;            android:layout_width=&#34;match_parent&#34;&#xA;            android:layout_height=&#34;match_parent&#34;&#xA;            android:gravity=&#34;center&#34;&#xA;            app:maskHollowView_hollow_border_color=&#34;#FFFFFF&#34;&#xA;            app:maskHollowView_hollow_border_size=&#34;4dp&#34;&#xA;            app:maskHollowView_hollow_height=&#34;80dp&#34;&#xA;            app:maskHollowView_hollow_margin_top=&#34;40dp&#34;&#xA;            app:maskHollowView_hollow_radius=&#34;16dp&#34;&#xA;            app:maskHollowView_hollow_width=&#34;80dp&#34;&#xA;            app:maskHollowView_mask_background=&#34;#66000000&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-MaskHollowView支持的参数&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_width&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的宽度，优先级最高&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;控件宽度的一半&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_height&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的高度，优先级最高&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;控件与宽度一致&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_width_ratio&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的宽度相对与控件宽度的比例&lt;/td&gt; &#xA;   &lt;td&gt;float，例如0.5&lt;/td&gt; &#xA;   &lt;td&gt;空&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_height_ratio&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的高度相对与控件高度的比例&lt;/td&gt; &#xA;   &lt;td&gt;float，例如0.5&lt;/td&gt; &#xA;   &lt;td&gt;空&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_dimension_ratio&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的宽高比例&lt;/td&gt; &#xA;   &lt;td&gt;string，例如w,1:1&lt;/td&gt; &#xA;   &lt;td&gt;空&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_margin_top&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的上间距&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_margin_bottom&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的下间距&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_margin_left&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的左间距&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_margin_right&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的右间距&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_margin_radius&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的圆角&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_margin_border_size&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的边框大小&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_margin_border_color&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的边框颜色&lt;/td&gt; &#xA;   &lt;td&gt;color，例如#FFFFFF&lt;/td&gt; &#xA;   &lt;td&gt;空&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_hollow_border_rect&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域的边框矩形边长，如果该值大于0，则只会在镂空区域四个角的边框矩形内显示边框&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maskHollowView_mask_background&lt;/td&gt; &#xA;   &lt;td&gt;遮罩区域的背景颜色&lt;/td&gt; &#xA;   &lt;td&gt;color，例如#66000000&lt;/td&gt; &#xA;   &lt;td&gt;#66000000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;android:gravity&lt;/td&gt; &#xA;   &lt;td&gt;镂空区域相对于遮罩区域的位置&lt;/td&gt; &#xA;   &lt;td&gt;gravity，例如top&lt;/td&gt; &#xA;   &lt;td&gt;center&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;八、Fast Rounded&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一行代码简单实现Android常用View的圆角边框&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;在日常开发中，我们经常需要为各种View实现圆角边框，例如圆角边框的ImageView、圆角边框的TextView、圆角边框的ConstraintLayout等等。通常情况下我们会使用shape drawable或自定义View去实现，使用shape drawable会造成项目中存在大量的drawable文件，使用自定义View会造成相同代码的冗余，所以我做了一个开源Library项目，方便大家集成后，一行代码简单实现Android常用View的圆角边框。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.集成方式：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;allprojects {&#xA;&#x9;repositories {&#xA;&#x9;&#x9;...&#xA;&#x9;&#x9;maven { url &#39;https://www.jitpack.io&#39; }&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt; implementation &#39;com.gitee.arcns.arc-fast:rounded:latest.release&#39;&#xA;// 可选：如果你需要使用RoundedConstraintLayout，但你的项目中未引入ConstraintLayout，那么你还需要：&#xA; implementation &#39;androidx.constraintlayout:constraintlayout:yourversion&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.使用方式&lt;/h4&gt; &#xA;&lt;h5&gt;方式一：通过Library内置的View实现圆角边框&lt;/h5&gt; &#xA;&lt;p&gt;为方便使用，Library中内置了RoundedView、RoundedImageView、RoundedConstraintLayout、RoundedTextView四款支持圆角边框的View，适应绝大多数的使用场景。以RoundedView为例（其他View的使用方式相同），使用方式如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;com.arc.fast.view.rounded.RoundedView&#xA;            android:layout_width=&#34;match_parent&#34;&#xA;            android:layout_height=&#34;match_parent&#34;&#xA;            app:rounded_background_color=&#34;@android:color/holo_red_light&#34; //背景颜色&#xA;            app:rounded_border_color=&#34;@android:color/holo_blue_light&#34; //边框颜色&#xA;            app:rounded_border_size=&#34;2dp&#34;//边框大小&#xA;            app:rounded_radius=&#34;16dp&#34; /&amp;gt;//圆角大小&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-支持的圆角边框参数&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_radius&lt;/td&gt; &#xA;   &lt;td&gt;圆角的大小，优先度最低&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_radius_top_left&lt;/td&gt; &#xA;   &lt;td&gt;左上的圆角大小&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_radius_top_right&lt;/td&gt; &#xA;   &lt;td&gt;右上的圆角大小&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_radius_bottom_left&lt;/td&gt; &#xA;   &lt;td&gt;左下的圆角大小&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_radius_bottom_right&lt;/td&gt; &#xA;   &lt;td&gt;右下的圆角大小&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_background_color&lt;/td&gt; &#xA;   &lt;td&gt;背景颜色&lt;/td&gt; &#xA;   &lt;td&gt;color，例如#FFFFFF&lt;/td&gt; &#xA;   &lt;td&gt;空&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_border_color&lt;/td&gt; &#xA;   &lt;td&gt;边框颜色&lt;/td&gt; &#xA;   &lt;td&gt;color，例如#FFFFFF&lt;/td&gt; &#xA;   &lt;td&gt;空&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_border_size&lt;/td&gt; &#xA;   &lt;td&gt;边框大小&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;方式二：通过IRoundedView实现任意的圆角边框控件&lt;/h5&gt; &#xA;&lt;p&gt;如果Library中内置的View无法满足项目的使用需求，那么你也可以通过IRoundedView实现任意的圆角边框控件。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;要让控件支持圆角边框只需4个步骤： 第一步:在控件中实现IRoundedView 第二步:实现IRoundedView的参数 第三步:在init中调用initRoundedRadius(context, attrs)获取xml中配置的参数 第四步:在draw中调用onDrawBefore和onDrawAfter&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;具体实现方式如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class CustomView @JvmOverloads constructor(&#xA;    context: Context,&#xA;    attrs: AttributeSet? = null,&#xA;    defStyleAttr: Int = 0&#xA;) : View(context, attrs, defStyleAttr), IRoundedView { //第一步:在控件中实现IRoundedView&#xA;&#xA;   // 第二步:实现IRoundedView的参数&#xA;    override var _config = RoundedViewConfig()&#xA;    override var _temporarilyConfig: RoundedViewConfig? = null&#xA;&#xA;    init {&#xA;        // 第三步:在init中调用initRoundedRadius(context, attrs)获取xml中配置的参数&#xA;        if (attrs != null) initRoundedRadius(context, attrs)&#xA;    }&#xA;&#xA;  // 第四步:在draw中调用onDrawBefore和onDrawAfter&#xA;    override fun draw(canvas: Canvas) {&#xA;        onDrawBefore(canvas)&#xA;        super.draw(canvas)&#xA;        onDrawAfter(canvas)&#xA;    }&#xA;}&#xA;&#xA;// 使用方式与Library内置的View相同&#xA;&amp;lt;yourpackage.CustomView&#xA;            android:layout_width=&#34;match_parent&#34;&#xA;            android:layout_height=&#34;match_parent&#34;&#xA;            app:rounded_background_color=&#34;@android:color/holo_red_light&#34; //背景颜色&#xA;            app:rounded_border_color=&#34;@android:color/holo_blue_light&#34; //边框颜色&#xA;            app:rounded_border_size=&#34;2dp&#34;//边框大小&#xA;            app:rounded_radius=&#34;16dp&#34; /&amp;gt;//圆角大小&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;九、Fast TextView&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一行代码实现TextView中粗、四个方向drawable的不同Padding和宽高&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;在日常开发中，TextView是我们经常使用的控件，但是原生的TextView却无法帮我们实现一些常用的功能，例如：设置中粗、设置TextView drawable的宽高、分别设置TextView不同方向drawable的padding，所以我做了一个开源Library项目，方便大家集成后，一行代码简单实现TextView中粗、四个方向drawable的不同Padding和宽高。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.实现思路：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;（1）设置TextView中粗：通过设置画笔的边框来实现中粗效果（&lt;code&gt;paint.style = Paint.Style.FILL_AND_STROKE&lt;/code&gt;和&lt;code&gt;paint.strokeWidth=1&lt;/code&gt;）&lt;/li&gt; &#xA; &lt;li&gt;（2）设置TextView drawable的宽高：&lt;code&gt;drawable.setBounds(0,0,width,height)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;（3）分别设置TextView不同方向drawable的padding：TextView虽然提供了&lt;code&gt;drawablePadding&lt;/code&gt;，但只能为不同方向drawable设置一个相同的padding，因此如果需要为TextView不同方向drawable设置不同的padding，需要使用其他的方式来实现。经过研究对比，这里我们使用&lt;code&gt;InsetDrawable(drawable, paddingLeft, paddingTop, paddingRight, paddingBottom)&lt;/code&gt;来实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2.集成方式：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;allprojects {&#xA;&#x9;repositories {&#xA;&#x9;&#x9;...&#xA;&#x9;&#x9;maven { url &#39;https://www.jitpack.io&#39; }&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt; implementation &#39;com.gitee.arcns.arc-fast:rounded:latest.release&#39;&#xA; implementation &#39;com.gitee.arcns.arc-fast:text-view:latest.release&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.使用方式&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;com.arc.fast.view.FastTextView&#xA;            android:id=&#34;@+id/tvTest&#34;&#xA;            android:layout_width=&#34;wrap_content&#34;&#xA;            android:layout_height=&#34;wrap_content&#34;&#xA;            android:gravity=&#34;center_vertical&#34;&#xA;            android:text=&#34;TEST&#34;&#xA;            android:textColor=&#34;@color/main&#34;&#xA;            android:textSize=&#34;16sp&#34;&#xA;            android:drawableLeft=&#34;@mipmap/ic_left&#34; //左边方向drawable&#xA;            app:fastTextView_leftImageWidth=&#34;20dp&#34; //左边方向drawable宽度&#xA;            app:fastTextView_leftImageHeight=&#34;20dp&#34; //左边方向drawable高度&#xA;            app:fastTextView_leftImagePadding=&#34;10dp&#34; //左边方向drawable padding&#xA;            android:drawableRight=&#34;@mipmap/ic_right&#34;//右边边方向drawable&#xA;            app:fastTextView_rightImageWidth=&#34;20dp&#34; //右边方向drawable宽度&#xA;            app:fastTextView_rightImageHeight=&#34;20dp&#34;//右边方向drawable高度&#xA;            app:fastTextView_rightImagePadding=&#34;20dp&#34;&amp;gt;//右边方向drawable padding&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-FastTextView不仅支持支持四个方向drawable的不同Padding和宽高，也支持设置中粗和圆角边框，所有支持的参数如下：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_textMediumBold&lt;/td&gt; &#xA;   &lt;td&gt;设置中粗&lt;/td&gt; &#xA;   &lt;td&gt;boolean，例如true&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_leftImageHeight&lt;/td&gt; &#xA;   &lt;td&gt;左边方向drawable高度&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_leftImageWidth&lt;/td&gt; &#xA;   &lt;td&gt;左边方向drawable宽度&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_leftImagePadding&lt;/td&gt; &#xA;   &lt;td&gt;左边方向drawable padding&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_rightImageHeight&lt;/td&gt; &#xA;   &lt;td&gt;右边方向drawable高度&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_rightImageWidth&lt;/td&gt; &#xA;   &lt;td&gt;右边方向drawable宽度&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_rightImagePadding&lt;/td&gt; &#xA;   &lt;td&gt;右边方向drawable padding&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_topImageHeight&lt;/td&gt; &#xA;   &lt;td&gt;上边方向drawable高度&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_topImageWidth&lt;/td&gt; &#xA;   &lt;td&gt;上边方向drawable宽度&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_topImagePadding&lt;/td&gt; &#xA;   &lt;td&gt;上边方向drawable padding&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_bottomImageHeight&lt;/td&gt; &#xA;   &lt;td&gt;下边方向drawable高度&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_bottomImageWidth&lt;/td&gt; &#xA;   &lt;td&gt;下边方向drawable宽度&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastTextView_bottomImagePadding&lt;/td&gt; &#xA;   &lt;td&gt;下边方向drawable padding&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_radius&lt;/td&gt; &#xA;   &lt;td&gt;圆角的大小，优先度最低&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_radius_top_left&lt;/td&gt; &#xA;   &lt;td&gt;左上的圆角大小&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_radius_top_right&lt;/td&gt; &#xA;   &lt;td&gt;右上的圆角大小&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_radius_bottom_left&lt;/td&gt; &#xA;   &lt;td&gt;左下的圆角大小&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_radius_bottom_right&lt;/td&gt; &#xA;   &lt;td&gt;右下的圆角大小&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_background_color&lt;/td&gt; &#xA;   &lt;td&gt;背景颜色&lt;/td&gt; &#xA;   &lt;td&gt;color，例如#FFFFFF&lt;/td&gt; &#xA;   &lt;td&gt;空&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_border_color&lt;/td&gt; &#xA;   &lt;td&gt;边框颜色&lt;/td&gt; &#xA;   &lt;td&gt;color，例如#FFFFFF&lt;/td&gt; &#xA;   &lt;td&gt;空&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rounded_border_size&lt;/td&gt; &#xA;   &lt;td&gt;边框大小&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如10dp&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;十、Fast NestedScrollCompat&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一行代码解决Android滚动控件嵌套产生的滑动事件冲突&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;在日常开发中，我们经常需要解决NestedScrollView、ScrollView、RecyclerView、ViewPager、ViewPager2、Banner等各种滚动控件之间相互嵌套带来的滑动事件冲突问题，修复起来往往也比较麻烦，所以我做了一个开源Library项目，方便大家集成后，一行代码解决Android绝大多数场景下的滑动冲突。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/image/nested_scroll_compat.gif&#34; alt=&#34;集成效果&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1.实现思路：&lt;/h4&gt; &#xA;&lt;p&gt;之所以会出现滚动控件嵌套后的滑动冲突，主要是因为里面嵌套的滚动控件不知道在什么时候需要把&lt;code&gt;TouchEvent&lt;/code&gt;交给外层的滚动控件处理，所以会产生滑动冲突。 因此我们可以考虑在里面嵌套的每个滚动控件的外面都添加上一个&lt;code&gt;处理控件&lt;/code&gt;，根据TouchEvent机制，&lt;code&gt;处理控件&lt;/code&gt;会优先于里面的滚动控件接收到&lt;code&gt;TouchEvent&lt;/code&gt;，我们就可以在处理控件中判断是否需要把&lt;code&gt;TouchEvent&lt;/code&gt;交给外层的滚动控件处理。 在&lt;code&gt;处理控件&lt;/code&gt;中，我们通过重写&lt;code&gt;onInterceptTouchEvent&lt;/code&gt;来处理TouchEvent，处理流程如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;（1）在&lt;code&gt;TouchEvent&lt;/code&gt;开始时(&lt;code&gt;ACTION_DOWN&lt;/code&gt;)，先通过&lt;code&gt;parent.requestDisallowInterceptTouchEvent(true)&lt;/code&gt;暂时禁止所有&lt;code&gt;parent&lt;/code&gt;拦截&lt;code&gt;TouchEvent&lt;/code&gt;，以便&lt;code&gt;处理控件&lt;/code&gt;进行判断处理&lt;/li&gt; &#xA; &lt;li&gt;（2）在&lt;code&gt;TouchEvent&lt;/code&gt;移动时(&lt;code&gt;ACTION_MOVE&lt;/code&gt;)，根据TouchEvent判断用户意图的滑动方向&lt;/li&gt; &#xA; &lt;li&gt;（3）判断里面的滚动控件是否支持用户意图的滑动方向，如果不支持则调用&lt;code&gt;parent.requestDisallowInterceptTouchEvent(false)&lt;/code&gt;允许所有&lt;code&gt;parent&lt;/code&gt;拦截，如果支持则跳到（4）&lt;/li&gt; &#xA; &lt;li&gt;（4）根据用户意图 的滑动方向，判断里面的滚动控件是否能够在该方向进行滑动(通过&lt;code&gt;canScrollHorizontally&lt;/code&gt;/&lt;code&gt;canScrollVertically&lt;/code&gt;)，如果不能滑动则调用&lt;code&gt;parent.requestDisallowInterceptTouchEvent(false)&lt;/code&gt;允许所有&lt;code&gt;parent&lt;/code&gt;拦截 这样处理之后，如果里面的滚动控件能够滑动则交由里面的滚动控件处理，如果里面的滚动控件不能滑动则交由上级的滚动控件处理，因此能够解决绝大多数场景下滚动控件嵌套产生的滑动事件冲突。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2.集成方式：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;allprojects {&#xA;&#x9;repositories {&#xA;&#x9;&#x9;...&#xA;&#x9;&#x9;maven { url &#39;https://www.jitpack.io&#39; }&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt; implementation &#39;com.gitee.arcns.arc-fast:nested-scroll-compat:latest.release&#39;&#xA;// 可选：如果你需要使用FastNestedScrollCompat(兼容RecyclerView、ViewPager2)，那么你项目中需要引入recyclerview和viewpager2&#xA; implementation &#39;androidx.recyclerview:recyclerview:yourversion&#39;&#xA; implementation &#39;androidx.viewpager2:viewpager2:yourversion&#39;&#xA;// 可选：如果你需要使用FastBannerNestedScrollCompat(兼容Banner)，那么你项目中需要引入banner&#xA; implementation &#39;io.github.youth5201314:banner:yourversion&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.使用方式&lt;/h4&gt; &#xA;&lt;p&gt;使用时，只需要在里面嵌套的每个滚动控件的外面都添加上FastNestedScrollCompat即可&lt;/p&gt; &#xA;&lt;p&gt;（1）如果滚动控件是NestedScrollView、ScrollView、ViewPager等Android基础控件，那么需要使用的&lt;code&gt;兼容宿主&lt;/code&gt;是&lt;code&gt;FastBaseNestedScrollCompat&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;com.arc.fast.view.FastBaseNestedScrollCompat&#xA;            android:layout_width=&#34;match_parent&#34;&#xA;            android:layout_height=&#34;match_parent&#34;&amp;gt;&#xA;      // 注意：使用时，滚动控件必须是FastNestedScrollCompat直接且唯一的子元素&#xA;      // 此处RecyclerView仅为示例，你可以替换为NestedScrollView、ScrollView、RecyclerView、ViewPager、ViewPager2等滚动控件&#xA;      &amp;lt;ViewPager&#xA;                android:layout_width=&#34;match_parent&#34;&#xA;                android:layout_height=&#34;match_parent&#34;/&amp;gt; &#xA;&amp;lt;/com.arc.fast.view.FastNestedScrollCompat&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;（2）如果滚动控件是RecyclerView或ViewPager2，那么需要使用的&lt;code&gt;兼容宿主&lt;/code&gt;是&lt;code&gt;FastNestedScrollCompat&lt;/code&gt;，同时&lt;code&gt;FastNestedScrollCompat&lt;/code&gt;也支持NestedScrollView、ScrollView、ViewPager等&lt;code&gt;FastBaseNestedScrollCompat&lt;/code&gt;支持的所有滚动控件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;com.arc.fast.view.FastNestedScrollCompat&#xA;            android:layout_width=&#34;match_parent&#34;&#xA;            android:layout_height=&#34;match_parent&#34;&amp;gt;&#xA;      // 注意：使用时，滚动控件必须是FastNestedScrollCompat直接且唯一的子元素&#xA;      // 此处RecyclerView仅为示例，你可以替换为NestedScrollView、ScrollView、RecyclerView、ViewPager、ViewPager2等滚动控件&#xA;      &amp;lt;androidx.recyclerview.widget.RecyclerView&#xA;                android:layout_width=&#34;match_parent&#34;&#xA;                android:layout_height=&#34;match_parent&#34;/&amp;gt; &#xA;&amp;lt;/com.arc.fast.view.FastNestedScrollCompat&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;（3）如果滚动控件是Banner，那么需要使用的&lt;code&gt;兼容宿主&lt;/code&gt;是&lt;code&gt;FastBannerNestedScrollCompat&lt;/code&gt;，同时&lt;code&gt;FastBannerNestedScrollCompat&lt;/code&gt;也支持NestedScrollView、ScrollView、ViewPager、RecyclerView、ViewPager2等&lt;code&gt;FastNestedScrollCompat&lt;/code&gt;支持的所有滚动控件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;com.arc.fast.view.FastBannerNestedScrollCompat&#xA;            android:layout_width=&#34;match_parent&#34;&#xA;            android:layout_height=&#34;match_parent&#34;&amp;gt;&#xA;      // 注意：使用时，Banner必须是FastNestedScrollCompat直接且唯一的子元素&#xA;      &amp;lt;com.youth.banner.Banner&#xA;                android:layout_width=&#34;match_parent&#34;&#xA;                android:layout_height=&#34;match_parent&#34;/&amp;gt; &#xA;&amp;lt;/com.arc.fast.view.FastBannerNestedScrollCompat&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;十一、Fast DragExitLayout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一行代码实现Android仿小红书、Lemon8拖拽退出效果&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;最近小伙伴有个需求，就是实现类似于小红书、Lemon8的拖拽退出效果，查了一圈发现并没有实现该功能的Library，于是便做了一个开源Library项目，方便大家集成后，一行代码实现Android仿小红书、Lemon8的拖拽退出效果。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Arcns/arc-fast/master/image/drag_exit.gif&#34; alt=&#34;集成效果&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1.实现思路：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;（1）创建一个&lt;code&gt;自定义Layout&lt;/code&gt;，作为实现拖拽退出的视图&lt;/li&gt; &#xA; &lt;li&gt;（2）在&lt;code&gt;自定义Layout中&lt;/code&gt;，重写&lt;code&gt;onInterceptTouchEvent&lt;/code&gt;，用来检查&lt;code&gt;TouchEvent&lt;/code&gt;的滑动方向是否可以执行退拽退出效果，如果可以执行退拽退出效果则返回&lt;code&gt;true&lt;/code&gt;表示拦截&lt;code&gt;TouchEvent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;（3）在&lt;code&gt;自定义Layout中&lt;/code&gt;，重写&lt;code&gt;onTouchEvent&lt;/code&gt;，在可以执行退拽退出效果时，先根据&lt;code&gt;TouchEvent&lt;/code&gt;计算出滑动距离，然后使用滑动距离来设置leftMargin和topMargin以实现&lt;code&gt;自定义Layout&lt;/code&gt;拖拽时移动的效果，同时设置&lt;code&gt;scaleX&lt;/code&gt;和&lt;code&gt;scaleY&lt;/code&gt;以实现&lt;code&gt;自定义Layout&lt;/code&gt;拖拽时缩放的效果。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2.集成方式：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;allprojects {&#xA;&#x9;repositories {&#xA;&#x9;&#x9;...&#xA;&#x9;&#x9;maven { url &#39;https://www.jitpack.io&#39; }&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt; implementation &#39;com.gitee.arcns.arc-fast:rounded:latest.release&#39;&#xA; implementation &#39;com.gitee.arcns.arc-fast:drag-exit:latest.release&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.使用方式&lt;/h4&gt; &#xA;&lt;p&gt;使用时，只需要在布局文件的最外层包裹&lt;code&gt;FastDragExitLayout&lt;/code&gt;，然后在代码文件中使用&lt;code&gt;FastDragExitLayout.enableDragExit()&lt;/code&gt;启用拖拽退出效果即可。 布局文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; &amp;lt;com.arc.fast.view.FastDragExitLayout&#xA;        android:id=&#34;@+id/dragExitLayout&#34;&#xA;        android:layout_width=&#34;match_parent&#34;&#xA;        android:layout_height=&#34;match_parent&#34;&amp;gt;&#xA;      // 你自己的布局&#xA;      ... ...&#xA;&amp;lt;/com.arc.fast.view.FastDragExitLayout&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;代码文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 简单调用方式一：在拖拽退出时关闭activity&#xA;dragExitLayout.enableDragExit(activity)&#xA;&#xA;// 简单调用方式二：在拖拽退出时自定义处理操作&#xA;dragExitLayout.enableDragExit{&#xA;        // 自定义处理操作&#xA;}&#xA;&#xA;// 完整的调用方式：&#xA;dragExitLayout.enableDragExit(&#xA;        bindExitActivity = activity, // 可选项：绑定在拖拽退出时的关闭activity&#xA;        onDragCallback = {isDrag:Boolean-&amp;gt; &#xA;                 // 可选项：在开始或取消拖拽时的回调&#xA;        },&#xA;        onExitWaitCallback = {currentScale: Float, continueExit: (() -&amp;gt; Unit) -&amp;gt;&#xA;                 // 可选项：在拖拽退出之前的回调，你可以在此处进行耗时的操作，完成后调用        continueExit即可继续退出&#xA;        },&#xA;        onExitCallback = { currentScale: Float -&amp;gt;&#xA;                 // 可选项：在拖拽退出时的回调&#xA;        }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ps：如果你希望&lt;code&gt;dragExitLayout&lt;/code&gt;在拖拽后，当前activity背景能够变得透明（即拖拽后可以看到上一个activity），那么你需要设置当前activity为透明样式：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;style name=&#34;TransitionTheme&#34; parent=&#34;@style/YourAppTheme&#34;&amp;gt;&#xA;        &amp;lt;item name=&#34;android:windowBackground&#34;&amp;gt;@android:color/transparent&amp;lt;/item&amp;gt;&#xA;        &amp;lt;item name=&#34;android:windowIsTranslucent&#34;&amp;gt;true&amp;lt;/item&amp;gt; // 注意：因系统bug，API26时android:windowIsTranslucent必须为false&#xA;        &amp;lt;item name=&#34;android:windowAnimationStyle&#34;&amp;gt;@null&amp;lt;/item&amp;gt;&#xA;        &amp;lt;item name=&#34;android:windowActivityTransitions&#34;&amp;gt;true&amp;lt;/item&amp;gt;&#xA; &amp;lt;/style&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FastDragExitLayout所有支持的参数如下：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastDragExitLayout_enableLeftDragExit&lt;/td&gt; &#xA;   &lt;td&gt;是否支持从左面方向启动拖拽退出&lt;/td&gt; &#xA;   &lt;td&gt;boolean，例如true&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastDragExitLayout_enableRightDragExit&lt;/td&gt; &#xA;   &lt;td&gt;是否支持从右面方向启动拖拽退出&lt;/td&gt; &#xA;   &lt;td&gt;boolean，例如true&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastDragExitLayout_enableTopDragExit&lt;/td&gt; &#xA;   &lt;td&gt;是否支持从上面方向启动拖拽退出&lt;/td&gt; &#xA;   &lt;td&gt;boolean，例如true&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastDragExitLayout_enableBottomDragExit&lt;/td&gt; &#xA;   &lt;td&gt;是否支持从下面方向启动拖拽退出&lt;/td&gt; &#xA;   &lt;td&gt;boolean，例如true&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastDragExitLayout_enableDragScale&lt;/td&gt; &#xA;   &lt;td&gt;是否支持拖拽时缩放&lt;/td&gt; &#xA;   &lt;td&gt;boolean，例如true&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastDragExitLayout_enableDragHorizontal&lt;/td&gt; &#xA;   &lt;td&gt;是否支持拖拽时横向移动&lt;/td&gt; &#xA;   &lt;td&gt;boolean，例如true&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastDragExitLayout_enableDragVertical&lt;/td&gt; &#xA;   &lt;td&gt;是否支持拖拽时纵向移动&lt;/td&gt; &#xA;   &lt;td&gt;boolean，例如true&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastDragExitLayout_dragScaleFactor&lt;/td&gt; &#xA;   &lt;td&gt;拖拽时的缩放因子（该值越小时，缩放效果越明显）&lt;/td&gt; &#xA;   &lt;td&gt;float，例如2.5f&lt;/td&gt; &#xA;   &lt;td&gt;1f&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastDragExitLayout_dragScaleReserve&lt;/td&gt; &#xA;   &lt;td&gt;拖拽时缩放的保留比例值，如果有设置该值，那么在拖拽时缩放比例会叠加该值（用于强调首次触发拖拽缩放时的效果感）&lt;/td&gt; &#xA;   &lt;td&gt;float，例如0.05f&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastDragExitLayout_dragExitDistance&lt;/td&gt; &#xA;   &lt;td&gt;拖拽达到退出的距离（拖拽超过该距离回执行退出操作，未达到该距离则会恢复）&lt;/td&gt; &#xA;   &lt;td&gt;dimension，例如100dp&lt;/td&gt; &#xA;   &lt;td&gt;控件宽度的20%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastDragExitLayout_dragResumeDuration&lt;/td&gt; &#xA;   &lt;td&gt;拖拽为达到离开距离时的恢复动画时长（毫秒）&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fastDragExitLayout_dragStartPosition&lt;/td&gt; &#xA;   &lt;td&gt;拖拽开始的位置 down:从按下的位置开始 firstMove:从首次可以移动的位置开始&lt;/td&gt; &#xA;   &lt;td&gt;down/firstMove&lt;/td&gt; &#xA;   &lt;td&gt;firstMove&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>