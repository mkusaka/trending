<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-04T01:33:35Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>auth0/Auth0.Android</title>
    <updated>2023-10-04T01:33:35Z</updated>
    <id>tag:github.com,2023-10-04:/auth0/Auth0.Android</id>
    <link href="https://github.com/auth0/Auth0.Android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android toolkit for Auth0 API&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; As part of our ongoing commitment to best security practices, we have rotated the signing keys used to sign previous releases of this SDK. As a result, new patch builds have been released using the new signing key. Please upgrade at your earliest convenience.&lt;/p&gt; &#xA; &lt;p&gt;While this change won&#39;t affect most developers, if you have implemented a dependency signature validation step in your build process, you may notice a warning that past releases can&#39;t be verified. This is expected, and a result of the key rotation process. Updating to the latest version will resolve this for you.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.auth0.com/website/sdks/banners/auth0-android-banner.png&#34; alt=&#34;Auth0.Android&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/artifact/com.auth0.android/auth0&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.auth0.android/auth0.svg?style=flat-square&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/auth0/Auth0.Android&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/auth0/Auth0.Android/master.svg?style=flat-square&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/auth0/Auth0.Android/tree/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/auth0/Auth0.Android.svg?style=flat-square&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doge.mit-license.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/:license-mit-blue.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/com.auth0.android/auth0&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/com.auth0.android/auth0/javadoc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üìö &lt;a href=&#34;https://raw.githubusercontent.com/auth0/Auth0.Android/main/#documentation&#34;&gt;Documentation&lt;/a&gt; ‚Ä¢ üöÄ &lt;a href=&#34;https://raw.githubusercontent.com/auth0/Auth0.Android/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; ‚Ä¢ üí¨ &lt;a href=&#34;https://raw.githubusercontent.com/auth0/Auth0.Android/main/#feedback&#34;&gt;Feedback&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://auth0.com/docs/quickstart/native/android/interactive&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0-samples/auth0-android-sample/tree/master/00-Login-Kt&#34;&gt;Sample App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0/auth0.android/raw/main/FAQ.md&#34;&gt;FAQs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0/auth0.android/raw/main/EXAMPLES.md&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://javadoc.io/doc/com.auth0.android/auth0/latest/index.html&#34;&gt;Docs Site&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Android API version 31 or later and Java 8+.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; Applications targeting Android SDK version 30 and below should use version 2.9.0.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here‚Äôs what you need in &lt;code&gt;build.gradle&lt;/code&gt; to target Java 8 byte code for Android and Kotlin plugins respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android {&#xA;    compileOptions {&#xA;        sourceCompatibility JavaVersion.VERSION_1_8&#xA;        targetCompatibility JavaVersion.VERSION_1_8&#xA;    }&#xA;&#xA;    kotlinOptions {&#xA;        jvmTarget = &#39;1.8&#39;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To install Auth0.Android with &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;, simply add the following line to your &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#39;com.auth0.android:auth0:2.10.1&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Permissions&lt;/h4&gt; &#xA;&lt;p&gt;Open your app&#39;s &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file and add the following permission.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.INTERNET&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure the SDK&lt;/h3&gt; &#xA;&lt;p&gt;First, create an instance of &lt;code&gt;Auth0&lt;/code&gt; with your Application information&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val account = Auth0(&#34;{YOUR_CLIENT_ID}&#34;, &#34;{YOUR_DOMAIN}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Auth0 account = new Auth0(&#34;{YOUR_CLIENT_ID}&#34;, &#34;{YOUR_DOMAIN}&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Configure using Android Context&lt;/summary&gt; &#xA; &lt;p&gt;Alternatively, you can save your Application information in the &lt;code&gt;strings.xml&lt;/code&gt; file using the following names:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;resources&amp;gt;&#xA;    &amp;lt;string name=&#34;com_auth0_client_id&#34;&amp;gt;YOUR_CLIENT_ID&amp;lt;/string&amp;gt;&#xA;    &amp;lt;string name=&#34;com_auth0_domain&#34;&amp;gt;YOUR_DOMAIN&amp;lt;/string&amp;gt;&#xA;&amp;lt;/resources&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can then create a new Auth0 instance by passing an Android Context:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val account = Auth0(context)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Authentication with Universal Login&lt;/h3&gt; &#xA;&lt;p&gt;First go to the &lt;a href=&#34;https://manage.auth0.com/#/applications&#34;&gt;Auth0 Dashboard&lt;/a&gt; and go to your application&#39;s settings. Make sure you have in &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt; a URL with the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://{YOUR_AUTH0_DOMAIN}/android/{YOUR_APP_PACKAGE_NAME}/callback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è Make sure that the &lt;a href=&#34;https://auth0.com/docs/configure/applications&#34;&gt;application type&lt;/a&gt; of the Auth0 application is &lt;strong&gt;Native&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;{YOUR_APP_PACKAGE_NAME}&lt;/code&gt; with your actual application&#39;s package name, available in your &lt;code&gt;app/build.gradle&lt;/code&gt; file as the &lt;code&gt;applicationId&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;Next, define the Manifest Placeholders for the Auth0 Domain and Scheme which are going to be used internally by the library to register an &lt;strong&gt;intent-filter&lt;/strong&gt;. Go to your application&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file and add the &lt;code&gt;manifestPlaceholders&lt;/code&gt; line as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;apply plugin: &#39;com.android.application&#39;&#xA;&#xA;android {&#xA;    compileSdkVersion 30&#xA;    defaultConfig {&#xA;        applicationId &#34;com.auth0.samples&#34;&#xA;        minSdkVersion 21&#xA;        targetSdkVersion 30&#xA;        //...&#xA;&#xA;        //---&amp;gt; Add the next line&#xA;        manifestPlaceholders = [auth0Domain: &#34;@string/com_auth0_domain&#34;, auth0Scheme: &#34;https&#34;]&#xA;        //&amp;lt;---&#xA;    }&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s a good practice to define reusable resources like &lt;code&gt;@string/com_auth0_domain&lt;/code&gt;, but you can also hard-code the value.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The scheme value can be either &lt;code&gt;https&lt;/code&gt; or a custom one. Read &lt;a href=&#34;https://raw.githubusercontent.com/auth0/Auth0.Android/main/#a-note-about-app-deep-linking&#34;&gt;this section&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Declare the callback instance that will receive the authentication result and authenticate by showing the &lt;strong&gt;Auth0 Universal Login&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val callback = object : Callback&amp;lt;Credentials, AuthenticationException&amp;gt; {&#xA;    override fun onFailure(exception: AuthenticationException) {&#xA;        // Failure! Check the exception for details&#xA;    }&#xA;&#xA;    override fun onSuccess(credentials: Credentials) {&#xA;        // Success! Access token and ID token are presents&#xA;    }&#xA;}&#xA;&#xA;WebAuthProvider.login(account)&#xA;    .start(this, callback)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using coroutines&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;try {&#xA;    val credentials = WebAuthProvider.login(account)&#xA;        .await(requireContext())&#xA;    println(credentials)    &#xA;} catch(e: AuthenticationException) {&#xA;    e.printStacktrace()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Callback&amp;lt;Credentials, AuthenticationException&amp;gt; callback = new Callback&amp;lt;Credentials, AuthenticationException&amp;gt;() {&#xA;    @Override&#xA;    public void onFailure(@NonNull AuthenticationException exception) {&#xA;        //failed with an exception&#xA;    }&#xA;&#xA;    @Override&#xA;    public void onSuccess(@Nullable Credentials credentials) {&#xA;        //succeeded!&#xA;    }&#xA;};&#xA;&#xA;WebAuthProvider.login(account)&#xA;    .start(this, callback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;The callback will get invoked when the user returns to your application. There are a few scenarios where this may fail:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When the device cannot open the URL because it doesn&#39;t have any compatible browser application installed. You can check this scenario with &lt;code&gt;error.isBrowserAppNotAvailable&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When the user manually closed the browser (e.g. pressing the back key). You can check this scenario with &lt;code&gt;error.isAuthenticationCanceled&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When there was a server error. Check the received exception for details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If the &lt;code&gt;redirect&lt;/code&gt; URL is not found in the &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt; of your Auth0 Application, the server will not make the redirection and the browser will remain open.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;A note about App Deep Linking:&lt;/h5&gt; &#xA;&lt;p&gt;If you followed the configuration steps documented here, you may have noticed the default scheme used for the Callback URI is &lt;code&gt;https&lt;/code&gt;. This works best for Android API 23 or newer if you&#39;re using &lt;a href=&#34;https://auth0.com/docs/applications/enable-android-app-links&#34;&gt;Android App Links&lt;/a&gt;, but in previous Android versions this &lt;em&gt;may&lt;/em&gt; show the intent chooser dialog prompting the user to choose either your application or the browser. You can change this behaviour by using a custom unique scheme so that the OS opens directly the link with your app.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Update the &lt;code&gt;auth0Scheme&lt;/code&gt; Manifest Placeholder on the &lt;code&gt;app/build.gradle&lt;/code&gt; file or update the intent-filter declaration in the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; to use the new scheme.&lt;/li&gt; &#xA; &lt;li&gt;Update the &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt; in your &lt;a href=&#34;https://manage.auth0.com/#/applications&#34;&gt;Auth0 Dashboard&lt;/a&gt; application&#39;s settings.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;withScheme()&lt;/code&gt; in the &lt;code&gt;WebAuthProvider&lt;/code&gt; builder passing the custom scheme you want to use.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;WebAuthProvider.login(account)&#xA;    .withScheme(&#34;myapp&#34;)&#xA;    .start(this, callback)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that the schemes &lt;a href=&#34;https://developer.android.com/guide/topics/manifest/data-element&#34;&gt;can only have lowercase letters&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Clearing the session&lt;/h3&gt; &#xA;&lt;p&gt;To log the user out and clear the SSO cookies that the Auth0 Server keeps attached to your browser app, you need to call the &lt;a href=&#34;https://auth0.com/docs/api/authentication?#logout&#34;&gt;logout endpoint&lt;/a&gt;. This can be done in a similar fashion to how you authenticated before: using the &lt;code&gt;WebAuthProvider&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to &lt;a href=&#34;https://raw.githubusercontent.com/auth0/Auth0.Android/main/#authentication-with-universal-login&#34;&gt;revisit this section&lt;/a&gt; to configure the Manifest Placeholders if you still cannot authenticate successfully. The values set there are used to generate the URL that the server will redirect the user back to after a successful log out.&lt;/p&gt; &#xA;&lt;p&gt;In order for this redirection to happen, you must copy the &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt; value you added for authentication into the &lt;strong&gt;Allowed Logout URLs&lt;/strong&gt; field in your &lt;a href=&#34;https://manage.auth0.com/#/applications&#34;&gt;application settings&lt;/a&gt;. Both fields should have an URL with the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://{YOUR_AUTH0_DOMAIN}/android/{YOUR_APP_PACKAGE_NAME}/callback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember to replace &lt;code&gt;{YOUR_APP_PACKAGE_NAME}&lt;/code&gt; with your actual application&#39;s package name, available in your &lt;code&gt;app/build.gradle&lt;/code&gt; file as the &lt;code&gt;applicationId&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;Initialize the provider, this time calling the static method &lt;code&gt;logout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;//Declare the callback that will receive the result&#xA;val logoutCallback = object: Callback&amp;lt;Void?, AuthenticationException&amp;gt; {&#xA;    override fun onFailure(exception: AuthenticationException) {&#xA;        // Failure! Check the exception for details&#xA;    }&#xA;&#xA;    override fun onSuccess(result: Void?) {&#xA;        // Success! The browser session was cleared&#xA;    }&#xA;}&#xA;&#xA;//Configure and launch the log out&#xA;WebAuthProvider.logout(account)&#xA;        .start(this, logoutCallback)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using coroutines&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;try {&#xA;    WebAuthProvider.logout(account)&#xA;        .await(requireContext())&#xA;    println(&#34;Logged out&#34;)&#xA;} catch(e: AuthenticationException) {&#xA;    e.printStacktrace()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//Declare the callback that will receive the result&#xA;Callback&amp;lt;Void, AuthenticationException&amp;gt; logoutCallback = new Callback&amp;lt;Void, AuthenticationException&amp;gt;() {&#xA;    @Override&#xA;    public void onFailure(@NonNull Auth0Exception exception) {&#xA;        //failed with an exception&#xA;    }&#xA;&#xA;    @Override&#xA;    public void onSuccess(@Nullable Void payload) {&#xA;        //succeeded!&#xA;    }&#xA;};&#xA;&#xA;//Configure and launch the log out&#xA;WebAuthProvider.logout(account)&#xA;    .start(MainActivity.this, logoutCallback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;The callback will get invoked when the user returns to your application. There are a few scenarios where this may fail:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When the device cannot open the URL because it doesn&#39;t have any compatible browser application installed. You can check this scenario with &lt;code&gt;error.isBrowserAppNotAvailable&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When the user manually closed the browser (e.g. pressing the back key). You can check this scenario with &lt;code&gt;error.isAuthenticationCanceled&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the &lt;code&gt;returnTo&lt;/code&gt; URL is not found in the &lt;strong&gt;Allowed Logout URLs&lt;/strong&gt; of your Auth0 Application, the server will not make the redirection and the browser will remain open.&lt;/p&gt; &#xA;&lt;h3&gt;Trusted Web Activity (Experimental Release)&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;‚ö†Ô∏è Warning:&lt;/strong&gt; Trusted Web Activity support in Auth0.Android is still experimental and can change in the future.&lt;/p&gt; &#xA; &lt;p&gt;Please test it thoroughly in all the targeted browsers and OS variants and let us know your feedback.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Trusted Web Activity is a feature provided by some browsers to provide a native look and feel.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;500&#34; alt=&#34;Trusted Web Activity&#34; src=&#34;https://github.com/auth0/Auth0.Android/assets/15910425/0be50959-e7e9-4a41-a99c-4c4c377e1faa&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;To use this feature, there are some additional steps you must take:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We need the SHA256 fingerprints of the app‚Äôs signing certificate. To get this, you can run the following command on your APK:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;keytool -printcert -jarfile sample-debug.apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The fingerprint has to be updated in the &lt;a href=&#34;https://manage.auth0.com/dashboard/eu/poovamraj/applications&#34;&gt;Auth0 Dashboard&lt;/a&gt; under Applications &amp;gt; &lt;em&gt;Specific Application&lt;/em&gt; &amp;gt; Settings &amp;gt; Advanced Settings &amp;gt; Device Settings &amp;gt; Key Hashes&lt;/li&gt; &#xA; &lt;li&gt;The app&#39;s package name has to be entered in the field above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once the above prerequisites are met, you can call your login method as shown below to open your web authentication in Trusted Web Activity.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;WebAuthProvider.login(account)&#xA;    .withTrustedWebActivity()&#xA;    .await(this)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credentials Manager&lt;/h2&gt; &#xA;&lt;p&gt;This library ships with two additional classes that help you manage the Credentials received during authentication.&lt;/p&gt; &#xA;&lt;h3&gt;Basic&lt;/h3&gt; &#xA;&lt;p&gt;The basic version supports asking for &lt;code&gt;Credentials&lt;/code&gt; existence, storing them and getting them back. If the credentials have expired and a refresh_token was saved, they are automatically refreshed. The class is called &lt;code&gt;CredentialsManager&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instantiate the manager:&lt;/strong&gt; You&#39;ll need an &lt;code&gt;AuthenticationAPIClient&lt;/code&gt; instance to renew the credentials when they expire and a &lt;code&gt;Storage&lt;/code&gt; object. We provide a &lt;code&gt;SharedPreferencesStorage&lt;/code&gt; class that makes use of &lt;code&gt;SharedPreferences&lt;/code&gt; to create a file in the application&#39;s directory with &lt;strong&gt;Context.MODE_PRIVATE&lt;/strong&gt; mode.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val authentication = AuthenticationAPIClient(account)&#xA;val storage = SharedPreferencesStorage(this)&#xA;val manager = CredentialsManager(authentication, storage)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;AuthenticationAPIClient authentication = new AuthenticationAPIClient(account);&#xA;Storage storage = new SharedPreferencesStorage(this);&#xA;CredentialsManager manager = new CredentialsManager(authentication, storage);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Save credentials:&lt;/strong&gt; The credentials to save &lt;strong&gt;must have&lt;/strong&gt; &lt;code&gt;expires_at&lt;/code&gt; and at least an &lt;code&gt;access_token&lt;/code&gt; or &lt;code&gt;id_token&lt;/code&gt; value. If one of the values is missing when trying to set the credentials, the method will throw a &lt;code&gt;CredentialsManagerException&lt;/code&gt;. If you want the manager to successfully renew the credentials when expired you must also request the &lt;code&gt;offline_access&lt;/code&gt; scope when logging in in order to receive a &lt;code&gt;refresh_token&lt;/code&gt; value along with the rest of the tokens. i.e. Logging in with a database connection and saving the credentials:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;authentication&#xA;    .login(&#34;info@auth0.com&#34;, &#34;a secret password&#34;, &#34;my-database-connection&#34;)&#xA;    .setScope(&#34;openid email profile offline_access&#34;)&#xA;    .start(object : Callback&amp;lt;Credentials, AuthenticationException&amp;gt; {&#xA;        override fun onFailure(exception: AuthenticationException) {&#xA;            // Error&#xA;        }&#xA;&#xA;        override fun onSuccess(credentials: Credentials) {&#xA;            //Save the credentials&#xA;            manager.saveCredentials(credentials)&#xA;        }&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using coroutines&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;try {&#xA;    val credentials = authentication&#xA;        .login(&#34;info@auth0.com&#34;, &#34;a secret password&#34;, &#34;my-database-connection&#34;)&#xA;        .setScope(&#34;openid email profile offline_access&#34;)&#xA;        .await()&#xA;    manager.saveCredentials(credentials)&#xA;} catch (e: AuthenticationException) {&#xA;    e.printStacktrace()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;authentication&#xA;    .login(&#34;info@auth0.com&#34;, &#34;a secret password&#34;, &#34;my-database-connection&#34;)&#xA;    .setScope(&#34;openid email profile offline_access&#34;)&#xA;    .start(new BaseCallback&amp;lt;Credentials, AuthenticationException&amp;gt;() {&#xA;        @Override&#xA;        public void onSuccess(Credentials payload) {&#xA;            //Save the credentials&#xA;            manager.saveCredentials(credentials);&#xA;        }&#xA;&#xA;        @Override&#xA;        public void onFailure(AuthenticationException error) {&#xA;            //Error!&#xA;        }&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This method has been made thread-safe after version 2.8.0.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Check credentials existence:&lt;/strong&gt; There are cases were you just want to check if a user session is still valid (i.e. to know if you should present the login screen or the main screen). For convenience, we include a &lt;code&gt;hasValidCredentials&lt;/code&gt; method that can let you know in advance if a non-expired token is available without making an additional network call. The same rules of the &lt;code&gt;getCredentials&lt;/code&gt; method apply:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val authenticated = manager.hasValidCredentials()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;boolean authenticated = manager.hasValidCredentials();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Retrieve credentials:&lt;/strong&gt; Existing credentials will be returned if they are still valid, otherwise the &lt;code&gt;refresh_token&lt;/code&gt; will be used to attempt to renew them. If the &lt;code&gt;expires_at&lt;/code&gt; or both the &lt;code&gt;access_token&lt;/code&gt; and &lt;code&gt;id_token&lt;/code&gt; values are missing, the method will throw a &lt;code&gt;CredentialsManagerException&lt;/code&gt;. The same will happen if the credentials have expired and there&#39;s no &lt;code&gt;refresh_token&lt;/code&gt; available.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;manager.getCredentials(object : Callback&amp;lt;Credentials, CredentialsManagerException&amp;gt; {&#xA;    override fun onFailure(exception: CredentialsManagerException) {&#xA;        // Error&#xA;    }&#xA;&#xA;    override fun onSuccess(credentials: Credentials) {&#xA;        // Use the credentials&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using coroutines&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;try {&#xA;    val credentials = manager.awaitCredentials()&#xA;    println(credentials)&#xA;} catch (e: CredentialsManagerException) {&#xA;    e.printStacktrace()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Java&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;manager.getCredentials(new BaseCallback&amp;lt;Credentials, CredentialsManagerException&amp;gt;() {&#xA;    @Override&#xA;    public void onSuccess(Credentials credentials){&#xA;        //Use the Credentials&#xA;    }&#xA;&#xA;    @Override&#xA;    public void onFailure(CredentialsManagerException error){&#xA;        //Error!&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the scenario where the stored credentials have expired and a &lt;code&gt;refresh_token&lt;/code&gt; is available, the newly obtained tokens are automatically saved for you by the Credentials Manager. This method has been made thread-safe after version 2.8.0.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clear credentials:&lt;/strong&gt; When you want to log the user out:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;manager.clearCredentials()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We appreciate feedback and contribution to this repo! Before you get started, please see the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0/open-source-template/raw/master/GENERAL-CONTRIBUTING.md&#34;&gt;Auth0&#39;s general contribution guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0/open-source-template/raw/master/CODE-OF-CONDUCT.md&#34;&gt;Auth0&#39;s code of conduct guidelines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Raise an issue&lt;/h3&gt; &#xA;&lt;p&gt;To provide feedback or report a bug, &lt;a href=&#34;https://github.com/auth0/Auth0.Android/issues&#34;&gt;please raise an issue on our issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Vulnerability Reporting&lt;/h3&gt; &#xA;&lt;p&gt;Please do not report security vulnerabilities on the public Github issue tracker. The &lt;a href=&#34;https://auth0.com/whitehat&#34;&gt;Responsible Disclosure Program&lt;/a&gt; details the procedure for disclosing security issues.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://cdn.auth0.com/website/sdks/logos/auth0_light_mode.png&#34; width=&#34;150&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://cdn.auth0.com/website/sdks/logos/auth0_dark_mode.png&#34; width=&#34;150&#34;&gt; &#xA;  &lt;img alt=&#34;Auth0 Logo&#34; src=&#34;https://cdn.auth0.com/website/sdks/logos/auth0_light_mode.png&#34; width=&#34;150&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Auth0 is an easy to implement, adaptable authentication and authorization platform. To learn more checkout &lt;a href=&#34;https://auth0.com/why-auth0&#34;&gt;Why Auth0?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; This project is licensed under the MIT license. See the &lt;a href=&#34;https://github.com/auth0/auth0.android/raw/main/LICENSE&#34;&gt; LICENSE&lt;/a&gt; file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>