<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-28T01:38:41Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>skydoves/compose-stable-marker</title>
    <updated>2023-07-28T01:38:41Z</updated>
    <id>tag:github.com,2023-07-28:/skydoves/compose-stable-marker</id>
    <link href="https://github.com/skydoves/compose-stable-marker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;✒️ Compose stable markers to tell some guarantees to the compose compiler.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Compose Stable Marker&lt;/h1&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves/compose-stable-marker/actions/workflows/android.yml&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/skydoves/compose-stable-marker/actions/workflows/android.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves&#34;&gt;&lt;img alt=&#34;Profile&#34; src=&#34;https://skydoves.github.io/badges/skydoves.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ✒️ Compose stable markers were originated Compose runtime, which improves Compose performance by telling stable and skippable guarantees to the compose compiler from non-compose dependent modules. &lt;/p&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/skydoves/compose-stable-marker/assets/24237865/9ead142c-3a35-4027-932a-b1d4e1cd13c5&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Agenda&lt;/h2&gt; &#xA;&lt;p&gt;This library contains a few extracted Compose stable markers, such as &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/runtime/Stable&#34;&gt;Stable&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/runtime/Immutable&#34;&gt;Immutable&lt;/a&gt;, and &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/runtime/StableMarker&#34;&gt;StableMarker&lt;/a&gt;, which are used to communicate some guarantees to the compose compiler and mark class as producing immutable instances. You can utilize this library when you want to mark your properties/classes/functions with &lt;strong&gt;Stable&lt;/strong&gt; or &lt;strong&gt;Immutable&lt;/strong&gt;, which are from &lt;a href=&#34;https://developer.android.com/jetpack/androidx/releases/compose-runtime&#34;&gt;compose-runtime&lt;/a&gt; in your pure Kotlin module or non-compose dependent modules. So if you don&#39;t want to depend on the &lt;code&gt;compose-runtime&lt;/code&gt; library, but you still want to improve your Compose performance by marking your models as stable in multiple module structure, you can use this library. If you want to learn more about &lt;strong&gt;Skippable&lt;/strong&gt;, &lt;strong&gt;Stable&lt;/strong&gt;, and &lt;strong&gt;Immutable&lt;/strong&gt;, check out &lt;a href=&#34;https://medium.com/proandroiddev/6-jetpack-compose-guidelines-to-optimize-your-app-performance-be18533721f9&#34;&gt;6 Jetpack Compose Guidelines to Optimize Your App Performance&lt;/a&gt; and &lt;a href=&#34;https://chrisbanes.me/posts/composable-metrics/#skippable&#34;&gt;Composable metrics by Chris Banes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=g:%22com.github.skydoves%22%20AND%20a:%compose-stable-marker%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/compose-stable-marker.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;p&gt;Add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle.kts&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    compileOnly(&#34;com.github.skydoves:compose-stable-marker:1.0.0&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stable&lt;/h2&gt; &#xA;&lt;p&gt;These hold data that is mutable but notify Composition upon mutating. This renders them stable since Composition is always informed of any changes to the state. This annotation implies are used for optimizations by the compose compiler if the assumptions below are met:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The result of &lt;code&gt;equals&lt;/code&gt; will always return the same result for the same two instances.&lt;/li&gt; &#xA; &lt;li&gt;When a public property of the type changes, composition will be notified.&lt;/li&gt; &#xA; &lt;li&gt;All public property types are stable.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can utilize the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/runtime/Stable&#34;&gt;Stable&lt;/a&gt; annotation like a normal annotation in your pure Kotlin module or non-compose dependent modules. &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Without Stable Annotation (Unskippable, and Unstable)&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s assume that you have a normal class without the &lt;code&gt;Stable&lt;/code&gt; annotation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// data module (pure Kotlin module)&#xA;public data class UnstableUser(&#xA;  public val name: String,&#xA;  public val devices: List&amp;lt;String&amp;gt;,&#xA;  public val createdAt: Instant,&#xA;)&#xA;&#xA;// feature module&#xA;@Composable&#xA;private fun UnstableUserFun(unstableUser: UnstableUser) {&#xA;  Text(text = unstableUser.toString())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Following the &lt;a href=&#34;https://github.com/androidx/androidx/raw/androidx-main/compose/compiler/design/compiler-metrics.md&#34;&gt;Compose Compiler Metrics&lt;/a&gt;, you&#39;ll get the result below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;restartable scheme(&#34;[androidx.compose.ui.UiComposable]&#34;) fun UnstableUserFun(&#xA;  unstable unstableUser: UnstableUser&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see in the above metrics, the &lt;code&gt;UnstableUserFun&lt;/code&gt; Composable function is not &lt;strong&gt;Skippable&lt;/strong&gt;, and the &lt;code&gt;UnstableUser&lt;/code&gt; class is marked as &lt;strong&gt;unstable&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;With Stable Annotation (Skippable, and Stable)&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s assume that you have a normal class with the &lt;code&gt;Stable&lt;/code&gt; annotation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// data module (pure Kotlin module)&#xA;@Stable&#xA;public data class StableUser(&#xA;  public val name: String,&#xA;  public val devices: List&amp;lt;String&amp;gt;,&#xA;  public val createdAt: Instant,&#xA;)&#xA;&#xA;// feature module&#xA;@Composable&#xA;private fun StableUserFun(stableUser: StableUser) {&#xA;  Text(text = stableUser.toString())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Following the &lt;a href=&#34;https://github.com/androidx/androidx/raw/androidx-main/compose/compiler/design/compiler-metrics.md&#34;&gt;Compose Compiler Metrics&lt;/a&gt;, you&#39;ll get the result below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;restartable skippable scheme(&#34;[androidx.compose.ui.UiComposable]&#34;) fun StableUserFun(&#xA;  stable stableUser: StableUser&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see in the above metrics, the &lt;code&gt;StableUserFun&lt;/code&gt; Composable function is &lt;strong&gt;Skippable&lt;/strong&gt;, and the &lt;code&gt;StableUser&lt;/code&gt; class is marked as &lt;strong&gt;stable&lt;/strong&gt;. So your function will be completely skipped calling a function if the parameters haven&#39;t changed since the last call since all of your properties were marked as &lt;strong&gt;Stable&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Immutable&lt;/h2&gt; &#xA;&lt;p&gt;With the same approach of the &lt;code&gt;Stable&lt;/code&gt; annotation, you can use this annotation like a normal &lt;code&gt;compose-runtime&lt;/code&gt;&#39;s one. As the name suggests, these hold data that is immutable. Since the data never changes, Compose can treat this as stable data. Composition enables optimizations based on the assumption that values read from the type will not change, using this annotation. &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s assume that you have a normal class with the &lt;code&gt;Immutable&lt;/code&gt; annotation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// data module (pure Kotlin module)&#xA;@Immutable&#xA;public data class ImmutableUser constructor(&#xA;  public val name: String,&#xA;  public val devices: List&amp;lt;String&amp;gt;,&#xA;  public val createdAt: Instant,&#xA;)&#xA;&#xA;// feature module&#xA;@Composable&#xA;private fun ImmutableUserComposable(immutableUser: ImmutableUser) {&#xA;  Text(text = immutableUser.toString())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Following the &lt;a href=&#34;https://github.com/androidx/androidx/raw/androidx-main/compose/compiler/design/compiler-metrics.md&#34;&gt;Compose Compiler Metrics&lt;/a&gt;, you&#39;ll get the result below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;restartable skippable scheme(&#34;[androidx.compose.ui.UiComposable]&#34;) fun ImmutableUser(&#xA;  stable immutableUser: ImmutableUser&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;StableMarker&lt;/h2&gt; &#xA;&lt;p&gt;An annotation marked as &lt;code&gt;StableMarker&lt;/code&gt; indicates a stable type, which obeys the following assumptions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The result of [equals] will always return the same result for the same two instances.&lt;/li&gt; &#xA; &lt;li&gt;When a public property of the type changes, composition will be notified.&lt;/li&gt; &#xA; &lt;li&gt;All public property types are stable.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;Designed and developed by 2023 skydoves (Jaewoong Eum)&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/lets-plot</title>
    <updated>2023-07-28T01:38:41Z</updated>
    <id>tag:github.com,2023-07-28:/JetBrains/lets-plot</id>
    <link href="https://github.com/JetBrains/lets-plot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source plotting library for statistical data.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lets-Plot &lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/official-flat-square.svg?sanitize=true&#34; alt=&#34;official JetBrains project&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/lets-plot/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;Couldn&#39;t load MIT license svg&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Lets-Plot&lt;/strong&gt; is an open-source plotting library for statistical data.&lt;/p&gt; &#xA;&lt;p&gt;The design of Lets-Plot library is heavily influenced by Leland Wilkinson work &lt;a href=&#34;https://www.goodreads.com/book/show/2549408.The_Grammar_of_Graphics&#34;&gt;The Grammar of Graphics&lt;/a&gt; describing the deep features that underlie all statistical graphics.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This grammar [...] is made up of a set of independent components that can be composed in many different ways. This makes [it] very powerful because you are not limited to a set of pre-specified graphics, but you can create new graphics that are precisely tailored for your problem.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Hadley Wickham, &#34;&lt;a href=&#34;https://ggplot2-book.org/index.html&#34;&gt;ggplot2: Elegant Graphics for Data Analysis&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We provide ggplot2-like plotting API for Python and Kotlin users.&lt;/p&gt; &#xA;&lt;h2&gt;Lets-Plot for Python&lt;/h2&gt; &#xA;&lt;a href=&#34;https://pypi.org/project/lets-plot/&#34;&gt; &lt;img src=&#34;https://badge.fury.io/py/lets-plot.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;A bridge between R (ggplot2) and Python data visualization.&lt;/p&gt; &#xA;&lt;p&gt;To learn more: &lt;a href=&#34;https://lets-plot.org&#34;&gt;lets-plot.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Lets-Plot for Kotlin&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/JetBrains/lets-plot-kotlin/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/JetBrains/lets-plot-kotlin&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;em&gt;Lets-Plot for Kotlin&lt;/em&gt; adds plotting capabilities to scientific notebooks built on the Jupyter &lt;a href=&#34;https://github.com/Kotlin/kotlin-jupyter&#34;&gt;Kotlin Kernel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use this API to embed charts into Kotlin/JVM and Kotlin/JS applications as well.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Lets-Plot for Kotlin&lt;/em&gt; at GitHub: &lt;a href=&#34;https://github.com/JetBrains/lets-plot-kotlin&#34;&gt;https://github.com/JetBrains/lets-plot-kotlin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&#34;Lets-Plot in SciView&#34; plugin&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://plugins.jetbrains.com/plugin/14379-lets-plot-in-sciview&#34;&gt;&lt;img src=&#34;https://img.shields.io/jetbrains/plugin/v/14379-lets-plot-in-sciview.svg?sanitize=true&#34; alt=&#34;JetBrains Plugins&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://plugins.jetbrains.com/plugin/14379-lets-plot-in-sciview&#34;&gt;&lt;img src=&#34;https://img.shields.io/jetbrains/plugin/d/14379-lets-plot-in-sciview.svg?sanitize=true&#34; alt=&#34;JetBrains plugins&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Scientific mode&lt;/em&gt; in PyCharm and in IntelliJ IDEA provides support for interactive scientific computing and data visualization.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://plugins.jetbrains.com/plugin/14379-lets-plot-in-sciview&#34;&gt;&lt;em&gt;Lets-Plot in SciView&lt;/em&gt;&lt;/a&gt; plugin adds support for interactive plotting to IntelliJ-based IDEs with the &lt;em&gt;Scientific mode&lt;/em&gt; enabled.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;em&gt;Scientific mode&lt;/em&gt; is NOT available in communinty editions of JetBrains IDEs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Also read:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/pycharm/matplotlib-support.html&#34;&gt;Scientific mode in PyCharm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/matplotlib-support.html&#34;&gt;Scientific mode in IntelliJ IDEA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is new in 3.2.0&lt;/h2&gt; &#xA;&lt;h3&gt;Aesthetics &lt;code&gt;stroke&lt;/code&gt; and &lt;code&gt;linewidth&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/lets-plot/master/docs/f-23b/images/stroke.png&#34; alt=&#34;f-23b/images/stroke.png&#34; width=&#34;336&#34; height=&#34;150&#34;&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://nbviewer.org/github/JetBrains/lets-plot/blob/master/docs/f-23b/aes_stroke.ipynb&#34;&gt;example notebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;code&gt;geom_lollipop()&lt;/code&gt; example below.&lt;/p&gt; &#xA;&lt;h3&gt;Lollipop Plot&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/lets-plot/master/docs/f-23b/images/lollipop.png&#34; alt=&#34;f-23b/images/lollipop.png&#34; width=&#34;600&#34; height=&#34;200&#34;&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://nbviewer.org/github/JetBrains/lets-plot/blob/master/docs/f-23b/geom_lollipop.ipynb&#34;&gt;example notebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Horizontal error bars and vertical &#34;dodge&#34;&lt;/h3&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://nbviewer.org/github/JetBrains/lets-plot/blob/master/docs/f-23b/horizontal_error_bars.ipynb&#34;&gt;example notebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multi-line Labels in Legends&lt;/h3&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://nbviewer.org/github/JetBrains/lets-plot/blob/master/docs/f-23b/legend_text_multiline.ipynb&#34;&gt;example notebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Colorbar in &lt;code&gt;geom_imshow()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/lets-plot/master/docs/f-23b/images/imshow_legend.png&#34; alt=&#34;f-23b/images/imshow_legend.png&#34; width=&#34;514&#34; height=&#34;400&#34;&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/JetBrains/lets-plot/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for other changes and fixes.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project and the corresponding community are governed by the &lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+Open+Source+and+Community+Code+of+Conduct&#34;&gt;JetBrains Open Source and Community Code of Conduct&lt;/a&gt;. Please make sure you read it.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Code and documentation released under the &lt;a href=&#34;https://github.com/JetBrains/lets-plot/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;. Copyright © 2019-2023, JetBrains s.r.o.&lt;/p&gt;</summary>
  </entry>
</feed>