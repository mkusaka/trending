<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-08T01:39:08Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DroidKaigi/conference-app-2022</title>
    <updated>2022-09-08T01:39:08Z</updated>
    <id>tag:github.com,2022-09-08:/DroidKaigi/conference-app-2022</id>
    <link href="https://github.com/DroidKaigi/conference-app-2022" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Official Conference App for DroidKaigi 2022&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1386930/188439339-eb5221fa-51cb-4273-9036-39a6f6da7d84.png&#34; alt=&#34;DroidKaigi 2022 logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;DroidKaigi 2022 official app&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://droidkaigi.jp/2022/&#34;&gt;DroidKaigi 2022&lt;/a&gt; will be held from October 5 to October 7, 2022. We are developing its application. Let&#39;s develop the app together and make it exciting.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;top&lt;/th&gt; &#xA;   &lt;th&gt;drawer&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1386930/188340626-d74e9b85-8586-427a-b12b-6531f2dba01c.png&#34; width=&#34;250px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1386930/188312398-e89c4fd0-dd3a-4499-8975-35650a531c93.png&#34; width=&#34;250px&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.figma.com/file/XsVzpDZSkEQANgCZLRTDDy/DroidKaigi-2022-Material-3-Design-Kit?node-id=11%3A1833&#34;&gt;Design Kit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.figma.com/file/NcSMs6dMsD88d4wOY0g3rK/DroidKaigi-2022-Conference-App?node-id=0%3A1&#34;&gt;App Design&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Try it out&lt;/h2&gt; &#xA;&lt;p&gt;TBD&lt;/p&gt; &#xA;&lt;p&gt;You can download apk from the GitHub Artifact. &lt;a href=&#34;https://github.com/DroidKaigi/conference-app-2022/actions/workflows/Build.yml?query=branch%3Amain&#34;&gt;https://github.com/DroidKaigi/conference-app-2022/actions/workflows/Build.yml?query=branch%3Amain&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We always welcome any and all contributions! See &lt;a href=&#34;https://raw.githubusercontent.com/DroidKaigi/conference-app-2022/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;p&gt;For Japanese speakers, please see &lt;a href=&#34;https://raw.githubusercontent.com/DroidKaigi/conference-app-2022/main/CONTRIBUTING.ja.md&#34;&gt;CONTRIBUTING.ja.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Latest Android Studio &lt;strong&gt;Electric Eel&lt;/strong&gt; and higher. You can download it from &lt;a href=&#34;https://developer.android.com/studio/preview&#34;&gt;this page&lt;/a&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/DroidKaigi/conference-app-2022/main/app-ios/README.md&#34;&gt;iOS Requirements&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tech Stacks&lt;/h1&gt; &#xA;&lt;p&gt;This year&#39;s app pretty much takes the idea from &lt;a href=&#34;https://github.com/android/nowinandroid&#34;&gt;now in android&lt;/a&gt; and adds a lot of ideas to it.&lt;/p&gt; &#xA;&lt;img width=&#34;891&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1386930/188314552-a12ff0bb-851e-465c-a51c-679a7c711e37.png&#34;&gt; &#xA;&lt;h2&gt;Configurable build logic&lt;/h2&gt; &#xA;&lt;p&gt;Management methods such as feature-xxx and core-xx, which are used in modularization, are introduced to manage the build logic. This method makes the build logic manageable.&lt;/p&gt; &#xA;&lt;p&gt;It is managed by two types of plugins.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Primitive plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It includes several simple plugins, such as the Android plugin and the Compose plugin, as shown below. Even simple plugins require dependencies among plugins, which can be configured by indicating such dependencies in the package path. For example, &lt;code&gt;android.hilt&lt;/code&gt; requires an &lt;code&gt;android&lt;/code&gt; plugin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;    id(&#34;droidkaigi.primitive.android&#34;)&#xA;    id(&#34;droidkaigi.primitive.android.kotlin&#34;)&#xA;    id(&#34;droidkaigi.primitive.android.compose&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Convention plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Convention plugin for this project is written by combining several primitive plugins.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class AndroidFeaturePlugin : Plugin&amp;lt;Project&amp;gt; {&#xA;    override fun apply(target: Project) {&#xA;        with(target) {&#xA;            with(pluginManager) {&#xA;                apply(&#34;droidkaigi.primitive.android&#34;)&#xA;                apply(&#34;droidkaigi.primitive.android.kotlin&#34;)&#xA;                apply(&#34;droidkaigi.primitive.android.compose&#34;)&#xA;                apply(&#34;droidkaigi.primitive.android.hilt&#34;)&#xA;                apply(&#34;droidkaigi.primitive.spotless&#34;)&#xA;                apply(&#34;droidkaigi.primitive.molecule&#34;)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building a UiModel using Compose&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cashapp/molecule&#34;&gt;https://github.com/cashapp/molecule&lt;/a&gt; is used to create the UiModel.&lt;br&gt; Jetpack Compose allows reactive streams such as Flow to be easily handled by Recompose. This also allows you to create an initial State.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val uiModel = moleculeScope.moleculeComposeState(clock = ContextClock) {&#xA;    val scheduleResult by scheduleResultFlow.collectAsState(initial = Result.Loading)&#xA;&#xA;    val scheduleState by remember {&#xA;        derivedStateOf {&#xA;            val scheduleState = ScheduleState.of(scheduleResult)&#xA;            scheduleState.filter(filters.value)&#xA;        }&#xA;    }&#xA;    SessionsUiModel(scheduleState = scheduleState, isFilterOn = filters.value.filterFavorite)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing strategy&lt;/h2&gt; &#xA;&lt;h3&gt;Make test scalable by using robot testing pattern&lt;/h3&gt; &#xA;&lt;p&gt;In this project, tests are separated into what and how. This makes the tests scalable, as there is no need to rewrite many tests when the Compose mechanism, layout, etc. changes.&lt;/p&gt; &#xA;&lt;p&gt;The test describes what is to be tested.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@RunWith(AndroidJUnit4::class)&#xA;@HiltAndroidTest&#xA;class SessionsScreenTest {&#xA;&#xA;    @get:Rule val robotTestRule = RobotTestRule(this)&#xA;    @Inject lateinit var sessionScreenRobot: SessionScreenRobot&#xA;&#xA;    @Test&#xA;    fun canToggleFavorite() {&#xA;        sessionScreenRobot(robotTestRule) {&#xA;            clickFavoriteAt(0)&#xA;            checkFavoritedAt(index = 0, isFavorited = true)&#xA;            checkFavoriteIsSavedAt(0)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Robot describes how to test it. It therefore contains implementation details. There is no need to look at this code when adding tests on a regular basis.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class SessionScreenRobot @Inject constructor() {&#xA;    ...&#xA;&#xA;    context(RobotTestRule)&#xA;    fun clickFavoriteAt(index: Int) {&#xA;        composeTestRule&#xA;            .onFavorite(&#xA;                index&#xA;            )&#xA;            .performClick()&#xA;    }&#xA;&#xA;    private fun AndroidComposeTestRule&amp;lt;*, *&amp;gt;.onFavorite(index: Int): SemanticsNodeInteraction {&#xA;        val title = DroidKaigiSchedule.fake().itemAt(index)&#xA;            .title&#xA;            .currentLangTitle&#xA;&#xA;        return onNode(&#xA;            matcher = hasTestTag(&#34;favorite&#34;) and hasAnySibling(hasText(title)),&#xA;            useUnmergedTree = true&#xA;        )&#xA;    }&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a test with high fidelity without making it flaky&lt;/h3&gt; &#xA;&lt;p&gt;In this project, we will use Hilt in the JVM for integration testing to avoid device-specific problems.&lt;br&gt; We believe that the more we use the same classes as the actual production application, the better the test will be able to catch real problems. Therefore, we use production dependencies as much as possible with Hilt.　　 The test basically uses the actual dependencies and Fake the Repository, which is the point of contact with the outside world.&lt;/p&gt; &#xA;&lt;img width=&#34;666&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1386930/188339262-25092e16-3a19-435f-a241-3e63ba828e15.png&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@TestInstallIn(&#xA;    components = [SingletonComponent::class],&#xA;    replaces = [SessionDataModule::class] // replace the production Module&#xA;)&#xA;@Module&#xA;class TestSessionDataModule {&#xA;    @Provides&#xA;    fun provideSessionsRepository(): SessionsRepository {&#xA;        return FakeSessionsRepository()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Expose fields that are not used in the app only in the Fake repository to allow some testing. Here we see that Favorite has been saved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class FakeSessionsRepository : SessionsRepository {&#xA;    private val favorites = MutableStateFlow(persistentSetOf&amp;lt;TimetableItemId&amp;gt;())&#xA;    &#xA;    // ...&#xA;    &#xA;    // for test&#xA;    val savedFavorites get(): PersistentSet&amp;lt;TimetableItemId&amp;gt; = favorites.value&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class SessionScreenRobot @Inject constructor() {&#xA;    @Inject lateinit var sessionsRepository: SessionsRepository&#xA;    private val fakeSessionsRepository: FakeSessionsRepository&#xA;        get() = sessionsRepository as FakeSessionsRepository&#xA;&#xA;    fun checkFavoriteIsSavedAt(index: Int) {&#xA;        val expected = DroidKaigiSchedule.fake().itemAt(index).id&#xA;        fakeSessionsRepository.savedFavorites shouldContain expected&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Instant logic updates using Kotlin JS&lt;/h2&gt; &#xA;&lt;p&gt;We are trying to use &lt;a href=&#34;https://github.com/cashapp/zipline&#34;&gt;https://github.com/cashapp/zipline&lt;/a&gt; as an experimental approach.&lt;br&gt; This allows us to use the regular JVM Kotlin implementation as a fallback, while releasing logic implemented in Javascript, which can be updated instantly as well as development on the Web.&lt;br&gt; We are excited about these possibilities for Kotlin.&lt;/p&gt; &#xA;&lt;p&gt;The following interface is implemented in Kotlin JS and Android.&lt;br&gt; You can add session announcements, etc. here. Since this is an experimental trial, it does not have such a practical role this time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;interface ScheduleModifier : ZiplineService {&#xA;    suspend fun modify(&#xA;        schedule: DroidKaigiSchedule&#xA;    ): DroidKaigiSchedule&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class AndroidScheduleModifier : ScheduleModifier {&#xA;    override suspend fun modify(schedule: DroidKaigiSchedule): DroidKaigiSchedule {&#xA;        return schedule&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class JsScheduleModifier() : ScheduleModifier {&#xA;    override suspend fun modify(schedule: DroidKaigiSchedule): DroidKaigiSchedule {&#xA;...&#xA;    if (timetableItem is Session &amp;amp;&amp;amp;&#xA;        timetableItem.id == TimetableItemId(&#34;1&#34;)&#xA;    ) {&#xA;        timetableItem.copy(&#xA;            message = MultiLangText(&#xA;                enTitle = &#34;This is a js message&#34;,&#xA;                jaTitle = &#34;これはJSからのメッセージ&#34;,&#xA;            )&#xA;        )&#xA;    } else {&#xA;        timetableItem&#xA;    }&#xA;...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check the manifest file to see how it works.　　 &lt;a href=&#34;https://droidkaigi.github.io/conference-app-2022/manifest.zipline.json&#34;&gt;https://droidkaigi.github.io/conference-app-2022/manifest.zipline.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LazyLayout&lt;/h2&gt; &#xA;&lt;p&gt;We are trying to draw a timetable using LazyLayout, a base implementation of LazyColumn and LazyGrid, which was introduced in &lt;a href=&#34;https://www.youtube.com/watch?v=1ANt65eoNhQ&#34;&gt;the Lazy layouts in Compose session&lt;/a&gt; at Google I/O.&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/1386930/188340626-d74e9b85-8586-427a-b12b-6531f2dba01c.png&#34; width=&#34;250px&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DroidKaigi/conference-app-2022/raw/91715b461b3162eb04ac58b79ba39ccdf21cf222/feature-sessions/src/main/java/io/github/droidkaigi/confsched2022/feature/sessions/Timetable.kt#L73&#34;&gt;https://github.com/DroidKaigi/conference-app-2022/blob/91715b461b3162eb04ac58b79ba39ccdf21cf222/feature-sessions/src/main/java/io/github/droidkaigi/confsched2022/feature/sessions/Timetable.kt#L73&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DroidKaigi/conference-app-2022/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Designer &lt;a href=&#34;https://twitter.com/chihokotaro&#34;&gt;Chihokotaro / Chihoko Watanabe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Oversight of Material Design3 &lt;a href=&#34;https://twitter.com/NabeCott&#34;&gt;Nabe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;API Server &lt;a href=&#34;https://twitter.com/RyuNen344&#34;&gt;RyuNen344&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>HuolalaTech/hll-wp-therouter-android</title>
    <updated>2022-09-08T01:39:08Z</updated>
    <id>tag:github.com,2022-09-08:/HuolalaTech/hll-wp-therouter-android</id>
    <link href="https://github.com/HuolalaTech/hll-wp-therouter-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android Routing SDK&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;TheRouter: &lt;em&gt;Android componentization solution&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/hexpm/l/plug.svg?sanitize=true&#34; alt=&#34;Hex.pm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Kotlin-green&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Wiki-open-green&#34; alt=&#34;Wiki&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;中文文档请见：&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/raw/main/README_CN.md&#34;&gt;README_CN.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;A. Features&lt;/h3&gt; &#xA;&lt;p&gt;TheRouter core functions have four functionalities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Page Navigation（&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/Navigator&#34;&gt;Navigator&lt;/a&gt;）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cross-module dependency injection（&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/ServiceProvider&#34;&gt;ServiceProvider&lt;/a&gt;）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Single module automatic initialization （&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/FlowTaskExecutor&#34;&gt;FlowTaskExecutor&lt;/a&gt;）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable client apps to remotely load method dynamically (&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/ActionManager&#34;&gt;ActionManager&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Demo:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/uploads/image/demo.gif&#34; width=&#34;50%&#34; alt=&#34;demo gif&#34;&gt; &#xA;&lt;h3&gt;B. Introduction&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;For more detailed documentation, please check the project wiki&lt;/strong&gt;：&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;B1. Gradle configuration&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;module&lt;/th&gt; &#xA;   &lt;th&gt;apt&lt;/th&gt; &#xA;   &lt;th&gt;router&lt;/th&gt; &#xA;   &lt;th&gt;plugin&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/cn/therouter/apt/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/apt-1.1.0-green&#34; alt=&#34;apt&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/cn/therouter/router/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/router-1.1.0-green&#34; alt=&#34;router&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/cn/therouter/plugin/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/plugin-1.1.0-green&#34; alt=&#34;plugin&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code&gt;// root build.gradle &#xA;classpath &#39;cn.therouter:plugin:1.1.0&#39;&#xA;&#xA;// app module &#xA;apply plugin: &#39;therouter&#39;&#xA;&#xA;// dependencies&#xA;kapt &#34;cn.therouter:apt:1.1.0&#34;&#xA;implementation &#34;cn.therouter:router:1.1.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;B2. initialization library&lt;/h4&gt; &#xA;&lt;p&gt;The library contains the automatic initialization function inside，link to: &lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/FlowTaskExecutor&#34;&gt;Single module automatic initialization&lt;/a&gt;; therefore, there&#39;s no need for any initialization code. However, it is recommended that you set the &lt;code&gt;Debug&lt;/code&gt; environment according to your business settings to view log information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Override&#xA;protected void attachBaseContext(Context base) {&#xA;    TheRouter.setDebug(true or false);&#xA;    super.attachBaseContext(base);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;B3. page parameter injection&lt;/h4&gt; &#xA;&lt;p&gt;Called in the &lt;code&gt;onCreate()&lt;/code&gt; method of &lt;code&gt;Activity&lt;/code&gt; or &lt;code&gt;Fragment&lt;/code&gt;:&lt;br&gt; (&lt;em&gt;It is recommended to do it directly in &lt;code&gt;BaseActivity(BaseFragment)&lt;/code&gt;&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Override&#xA;protected void onCreate(@Nullable Bundle savedInstanceState) {&#xA;    super.onCreate(savedInstanceState);&#xA;    TheRouter.inject(this);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;B4. page navigation&lt;/h4&gt; &#xA;&lt;p&gt;For the meaning of the annotation &lt;code&gt;@Route&lt;/code&gt;, please check the documentation: &lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/Navigator&#34;&gt;Page Navigation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Route(path = &#34;http://therouter.com/home&#34;, action = &#34;action://scheme.com&#34;,&#xA;        description = &#34;second page&#34;, params = {&#34;hello&#34;, &#34;world&#34;})&#xA;public class HomeActivity extends BaseActivity {&#xA;    @Override&#xA;    protected void onCreate(@Nullable Bundle savedInstanceState) {&#xA;        super.onCreate(savedInstanceState);&#xA;        TheRouter.build(&#34;Path&#34;)&#xA;            .withInt(&#34;intValue&#34;, 12345678)&#xA;            .withString(&#34;str_123_Value&#34;, &#34;传中文字符串&#34;)&#xA;            .withBoolean(&#34;boolValue&#34;, true)&#xA;            .withLong(&#34;longValue&#34;, 123456789012345L)&#xA;            .withChar(&#34;charValue&#34;, &#39;c&#39;)&#xA;            .withDouble(&#34;double&#34;, 3.14159265358972)&#xA;            .withFloat(&#34;floatValue&#34;, 3.14159265358972F)&#xA;            .navigation();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;C. proguard rules configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;-keep class androidx.annotation.Keep&#xA;-keep @androidx.annotation.Keep class * {*;}&#xA;-keepclassmembers class * {&#xA;    @androidx.annotation.Keep *;&#xA;}&#xA;-keepclasseswithmembers class * {&#xA;    @androidx.annotation.Keep &amp;lt;methods&amp;gt;;&#xA;}&#xA;-keepclasseswithmembers class * {&#xA;    @androidx.annotation.Keep &amp;lt;fields&amp;gt;;&#xA;}&#xA;-keepclasseswithmembers class * {&#xA;    @androidx.annotation.Keep &amp;lt;init&amp;gt;(...);&#xA;}&#xA;-keepclasseswithmembers class * {&#xA;    @com.therouter.router.Autowired &amp;lt;fields&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;D. Build and Debug&lt;/h3&gt; &#xA;&lt;h4&gt;D1. project module description&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;TheRouter&#xA;  ├─app&#xA;  │   └──sample&#xA;  ├─business-a&#xA;  │   └──modular business demo&#xA;  ├─business-b&#xA;  │   └──modular business demo&#xA;  ├─business-base&#xA;  │   └──modular business demo&#xA;  │&#xA;  ├─apt&#xA;  │   └──Annotation processor tool code&#xA;  │&#xA;  ├─plugin&#xA;  │   └──Gradle plugin&#xA;  │&#xA;  └─router&#xA;      └──library code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;D2. run Project&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;local.properties&lt;/code&gt; and declare the modules you want to debug. For example, if you want the source code to debug the &lt;code&gt;apt&lt;/code&gt; module, you can declare &lt;code&gt;apt=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;sync Gradle change&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;D3. plugin source code debugging&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;plugin&lt;/code&gt; debugging is special; you&#39;ll need to modify the &lt;code&gt;module&lt;/code&gt; name to enable plugin debugging.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Modify the &lt;code&gt;plugin&lt;/code&gt; folder name to &lt;code&gt;buildSrc&lt;/code&gt; (Case sensitive)&lt;/li&gt; &#xA; &lt;li&gt;Remove &lt;code&gt;classpath&lt;/code&gt; reference in root &lt;code&gt;build.gradle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;sync Gradle change&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;E. Change Log&lt;/h3&gt; &#xA;&lt;p&gt;link to Wiki：&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/releases&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;F. Author&lt;/h3&gt; &#xA;&lt;img src=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/uploads/image/hll.png&#34; width=&#34;40%&#34; alt=&#34;HUOLALA mobile technology team&#34;&gt; &#xA;&lt;h3&gt;G. LICENSE&lt;/h3&gt; &#xA;&lt;p&gt;TheRouter is licensed under the Apache License 2.0: &lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>slackhq/circuit</title>
    <updated>2022-09-08T01:39:08Z</updated>
    <id>tag:github.com,2022-09-08:/slackhq/circuit</id>
    <link href="https://github.com/slackhq/circuit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡️ A Compose-driven architecture for Android apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;⚡️ Circuit&lt;/h1&gt; &#xA;&lt;p&gt;🚧 &lt;strong&gt;Under construction&lt;/strong&gt; 🚧&lt;/p&gt; &#xA;&lt;p&gt;This project is very much a work in progress and far from finished!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2022 Slack Technologies, LLC&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>