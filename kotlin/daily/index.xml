<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-31T01:38:02Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>unit-mesh/unit-runtime</title>
    <updated>2023-03-31T01:38:02Z</updated>
    <id>tag:github.com,2023-03-31:/unit-mesh/unit-runtime</id>
    <link href="https://github.com/unit-mesh/unit-runtime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unit Runtime 是一个 ChatGPT 等 AI 代码的运行环境，可一键启动并实时交互，帮助您快速构建和测试 AI 代码。Unit Runtime is an efficient and user-friendly AI code execution environment that allows for one-click startup and real-time interaction, helping you quickly build and test AI code.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unit Runtime&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prompt-engineering/unit-runtime/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/prompt-engineering/unit-runtime/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Unit Runtime is an efficient and user-friendly AI code execution environment that allows for one-click startup and real-time interaction, helping you quickly build and test AI code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Workflow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram&#xA;    participant Human&#xA;    participant LLM/ChatGPT&#xA;    participant Unit Runtime&#xA;    participant Language REPL&#xA;&#xA;    Human-&amp;gt;&amp;gt;+LLM/ChatGPT: Provide prompt for generated code&#xA;    LLM/ChatGPT-&amp;gt;&amp;gt;+Unit Runtime: Provide code snippets/units&#xA;    Unit Runtime-&amp;gt;&amp;gt;+Language REPL: Compile and return&#xA;    Language REPL--&amp;gt;&amp;gt;-Unit Runtime: Output result&#xA;    Unit Runtime--&amp;gt;&amp;gt;-LLM/ChatGPT: Display processing result&#xA;    LLM/ChatGPT--&amp;gt;&amp;gt;-Human: Verify/modify code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For examples:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;generate a &#34;Hello, world&#34; and send to Kotlin Repl&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@RestController&#xA;object Pages {&#xA;   @GetMapping(&#34;/&#34;)&#xA;   fun main() = &#34;Hello World!&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;will start a server like: &lt;a href=&#34;http://localhost:10043&#34;&gt;http://localhost:10043&lt;/a&gt; , you can test and verify it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Websocket API&lt;/h2&gt; &#xA;&lt;p&gt;server: &lt;code&gt;ws://localhost:8080/repl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Serializable&#xA;data class InterpreterRequest(&#xA;    var id: Int = -1,&#xA;    val code: String,&#xA;    val language: String = &#34;kotlin&#34;,&#xA;    val framework: String = &#34;spring&#34;,&#xA;    val history: Boolean = false&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Serializable&#xA;data class Message(&#xA;    var id: Int = -1,&#xA;    var resultValue: String,&#xA;    var className: String = &#34;&#34;,&#xA;    var msgType: MessageType = MessageType.NONE,&#xA;    var content: MessageContent? = null,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Todos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backend &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Kotlin &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; basic REPL&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Spring Boot framework based on &lt;a href=&#34;https://github.com/JetBrains/kotless&#34;&gt;https://github.com/JetBrains/kotless&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ktor framework based on &lt;a href=&#34;https://github.com/JetBrains/kotless&#34;&gt;https://github.com/JetBrains/kotless&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TypeScript &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; basic REPL&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Deno with Hono&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Java&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Python&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Frontend &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; React with TypeScript and Babel&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Vue&lt;/li&gt; &#xA;   &lt;li&gt;[ ]Angular&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;git clone &lt;code&gt;https://github.com/prompt-engineering/unit-runtime&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew bootRun&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;API:&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;This code is distributed under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-runtime/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; in this directory.&lt;/p&gt;</summary>
  </entry>
</feed>