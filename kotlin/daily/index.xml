<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-23T01:33:30Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/casa-android</title>
    <updated>2022-12-23T01:33:30Z</updated>
    <id>tag:github.com,2022-12-23:/google/casa-android</id>
    <link href="https://github.com/google/casa-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A framework to bootstrap the creation of catalog samples apps by removing all the boilerplate and dynamically including all available samples into a single activity.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Catalog Android Sample App&lt;/h1&gt; &#xA;&lt;p&gt;(CASA or &#34;Home&#34; in Spanish)&lt;/p&gt; &#xA;&lt;p&gt;A framework to bootstrap the creation of catalog samples apps by removing all the boilerplate and dynamically including all available samples into a single activity.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ðŸš§ Work in-progress: this is an experiment project and it is under heavy development, APIs might change frequently.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img alt=&#34;Shows the sample app of the framework in action&#34; src=&#34;https://raw.githubusercontent.com/google/casa-android/main/casa-showcase.gif&#34; title=&#34;Framework showcase&#34; width=&#34;300&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;p&gt;Three main steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/casa-android/main/#setup-project-structure&#34;&gt;Setup project structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/casa-android/main/#create-catalog-app&#34;&gt;Create catalog-app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/casa-android/main/#create-sample-modules&#34;&gt;Create sample modules&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: you can also check the &lt;a href=&#34;https://raw.githubusercontent.com/google/casa-android/main/app-catalog&#34;&gt;app-catalog&lt;/a&gt; folder for an example.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Setup project structure&lt;/h3&gt; &#xA;&lt;p&gt;Create a project with the following structure (names can be changed):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;app&lt;/li&gt; &#xA; &lt;li&gt;samples/ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;first&lt;/li&gt; &#xA;   &lt;li&gt;second&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: the framework supports nested folders too (e.g samples/folder/first, samples/folder/second..)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For example, the &lt;code&gt;settings.gradle&lt;/code&gt; might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;include &#39;:app&#39;&#xA;include &#39;:samples:sampleOne&#39;&#xA;include &#39;:samples:sampleTwo&#39;&#xA;// ...other samples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create catalog-app&lt;/h3&gt; &#xA;&lt;p&gt;This will be the application module that wires all the samples under a single app. It requires three steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set up build.gradle&lt;/li&gt; &#xA; &lt;li&gt;Create the catalog activity and app classes&lt;/li&gt; &#xA; &lt;li&gt;Setup &lt;code&gt;AndroidManifest.xml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Optional] provide sourcecode, documentation and bug report URLs&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In the app module&#39;s &lt;code&gt;build.gradle&lt;/code&gt; include the framework dependencies, Hilt and KAPT plugins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;plugins {&#xA;    id &#39;com.android.application&#39;&#xA;    id &#39;org.jetbrains.kotlin.android&#39;&#xA;    id &#39;kotlin-kapt&#39;&#xA;    id &#39;dagger.hilt.android.plugin&#39;&#xA;}&#xA;&#xA;android {&#xA;    // your app&#39;s configuration&#xA;}&#xA;&#xA;dependencies {&#xA;    implementation &#34;com.google.android.catalog.framework:casa-ui:$version&#34;&#xA;&#xA;    implementation &#34;com.google.dagger:hilt-android:2.44.2&#34;&#xA;    kapt &#34;com.google.dagger:hilt-android-compiler:2.44.2&#34;&#xA;&#xA;    // include all module samples.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, create a new Activity that extends &lt;code&gt;CatalogActivity&lt;/code&gt; and add the Hilt wiring for the Application and Activity entry points:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@HiltAndroidApp&#xA;class MainApp : Application()&#xA;&#xA;@AndroidEntryPoint&#xA;class MainActivity : CatalogActivity()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, don&#39;t forget to declare them in the &lt;code&gt;AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#xA;&amp;lt;application android:name=&#34;.MainApp&#34; android:allowBackup=&#34;true&#34;&amp;gt;&#xA;&#xA;    &amp;lt;activity android:name=&#34;.MainActivity&#34; android:exported=&#34;true&#34;&amp;gt;&#xA;        &amp;lt;intent-filter&amp;gt;&#xA;            &amp;lt;action android:name=&#34;android.intent.action.MAIN&#34; /&amp;gt;&#xA;&#xA;            &amp;lt;category android:name=&#34;android.intent.category.LAUNCHER&#34; /&amp;gt;&#xA;        &amp;lt;/intent-filter&amp;gt;&#xA;    &amp;lt;/activity&amp;gt;&#xA;&#xA;&amp;lt;/application&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The framework provides quick access to the sourcecode, documentation or bug report of a sample in the default UI toolbar.&lt;/p&gt; &#xA;&lt;p&gt;To enable it, provide the base URLs and use the &lt;code&gt;@Sample&lt;/code&gt; annotation parameters&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;resources&amp;gt;&#xA;  &amp;lt;string name=&#34;app_name&#34;&amp;gt;app-catalog&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string name=&#34;source_base_url&#34;&amp;gt;https://github.com/google/casa-android/tree/main/app-catalog/samples/%1$s&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string name=&#34;documentation_base_url&#34;&amp;gt;https://github.com/google/casa-android&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string name=&#34;bug_report_url&#34;&amp;gt;https://github.com/google/casa-android/issues/new?assignees=&amp;amp;amp;labels=&amp;amp;amp;template=bug_report.md&amp;amp;amp;title=%1$s&amp;lt;/string&amp;gt;&#xA;&amp;lt;/resources&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the resources can take one optional string argument by adding %1$s.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Create sample modules&lt;/h3&gt; &#xA;&lt;p&gt;Place any new samples under the samples folder and for each new module add the framework dependencies and plugins in their &lt;code&gt;build.gradle&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;plugins {&#xA;    id &#39;com.android.library&#39;&#xA;    id &#39;kotlin-android&#39;&#xA;    id &#39;kotlin-kapt&#39;&#xA;    id &#34;com.google.devtools.ksp&#34;&#xA;    id &#39;dagger.hilt.android.plugin&#39;&#xA;}&#xA;&#xA;android {&#xA;    // your configuration&#xA;}&#xA;&#xA;// See https://kotlinlang.org/docs/ksp-quickstart.html#make-ide-aware-of-generated-code&#xA;kotlin {&#xA;  sourceSets {&#xA;    main.kotlin.srcDirs += &#39;build/generated/ksp/main/kotlin&#39;&#xA;    test.kotlin.srcDirs += &#39;build/generated/ksp/test/kotlin&#39;&#xA;  }&#xA;}&#xA;&#xA;dependencies {&#xA;    implementation &#34;com.google.android.catalog.framework:casa-base:$version&#34;&#xA;    ksp &#34;com.google.android.catalog.framework:casa-processor:$version&#34;&#xA;&#xA;    implementation &#34;com.google.dagger:hilt-android:2.44.2&#34;&#xA;    kapt &#34;com.google.dagger:hilt-android-compiler:2.44.2&#34;&#xA;&#xA;    // other dependencies like compose&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create as many entry points as desired by annotating any composable function, activity or fragment with the &lt;code&gt;@Sample&lt;/code&gt; annotation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Sample(&#xA;  name = &#34;Compose sample&#34;,&#xA;  description = &#34;Shows how to add a compose target in the catalog&#34;,&#xA;  documentation = &#34;https://github.com/google/casa-android#create-sample-modules&#34;&#xA;)&#xA;@Composable&#xA;fun ComposeSample() {&#xA;  Box(Modifier.fillMaxSize()) {&#xA;    Text(text = &#34;Hi, I am a compose sample target!&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each entry point will be automatically included in the main app and displayed for you.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Please contribute! We will gladly review any pull requests. Make sure to read the &lt;a href=&#34;https://raw.githubusercontent.com/google/casa-android/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; page first though.&lt;/p&gt;</summary>
  </entry>
</feed>