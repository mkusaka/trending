<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-17T01:38:23Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JetBrains/compose-multiplatform-desktop-template</title>
    <updated>2023-04-17T01:38:23Z</updated>
    <id>tag:github.com,2023-04-17:/JetBrains/compose-multiplatform-desktop-template</id>
    <link href="https://github.com/JetBrains/compose-multiplatform-desktop-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compose Multiplatform Desktop Application project template&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform&#34;&gt;Compose Multiplatform&lt;/a&gt; desktop application&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If you face any issues, please report them on &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Compose for Desktop can produce applications for macOS, Linux, and Windows platforms. You can use any of these platforms with our template.&lt;/p&gt; &#xA;&lt;p&gt;Follow our tutorial below to create a simple desktop application using the Compose Multiplatform UI framework.&lt;/p&gt; &#xA;&lt;p&gt;If you want to create an application targeting mobile platforms â€“ iOS and Android, use the &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform-ios-android-template#readme&#34;&gt;Compose Multiplatform mobile application&lt;/a&gt; template.&lt;/p&gt; &#xA;&lt;h2&gt;Before you start&lt;/h2&gt; &#xA;&lt;p&gt;Install the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;JDK 11 or later&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;IntelliJ IDEA Community or Ultimate Edition 2020.3 or later (other editors could also work, but we&#39;re using IntelliJ IDEA in this tutorial)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://plugins.jetbrains.com/plugin/16541-compose-multiplatform-ide-support&#34;&gt;Compose Multiplatform IDE support plugin&lt;/a&gt;&lt;/p&gt; &lt;p&gt;It helps to simplify compose development by adding support for the &lt;code&gt;@Preview&lt;/code&gt; annotation on argument-less &lt;code&gt;@Composable&lt;/code&gt; functions. The plugin shows how a particular composable function looks directly in the IDE.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Creating a new project with IDE&lt;/h2&gt; &#xA;&lt;p&gt;Starting with 2020.3, IntelliJ IDEA comes with the new project wizard that can automatically create a Compose application.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; When creating a project, select JDK 11 or later. To use the native distribution packaging, select JDK 15 or later.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img alt=&#34;Create new project 1&#34; src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-desktop-template/main/readme_images/wizard1.png&#34; height=&#34;500&#34;&gt; &#xA;&lt;img alt=&#34;Create new project 2&#34; src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-desktop-template/main/readme_images/wizard2.png&#34; height=&#34;500&#34;&gt; &#xA;&lt;h3&gt;Update the plugin&lt;/h3&gt; &#xA;&lt;p&gt;Before you start, ensure that you use the latest version of the Compose Multiplatform IDE support plugin:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Check the latest release version in the &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/releases&#34;&gt;Compose Multiplatform GitHub repository&lt;/a&gt; or on the &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt; website.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;build.gradle.kts&lt;/code&gt; file of your project and update the version:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;   kotlin(&#34;jvm&#34;) version &#34;1.8.20&#34;&#xA;   id(&#34;org.jetbrains.compose&#34;) version &#34;1.4.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Creating a new Compose project without IDE&lt;/h2&gt; &#xA;&lt;p&gt;It is also possible to create a Compose project manually in the terminal.&lt;/p&gt; &#xA;&lt;p&gt;We recommended building Compose for Desktop projects with Gradle. JetBrains provides a simple way of building such projects using a special Gradle plugin.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; You can clone the existing template for a &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/tree/master/templates/desktop-template&#34;&gt;desktop&lt;/a&gt; or &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/tree/master/templates/multiplatform-template&#34;&gt;multiplatform&lt;/a&gt; application or create it from scratch.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new directory named &lt;code&gt;sample&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir sample&#xA;cd sample&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the &lt;code&gt;settings.gradle.kts&lt;/code&gt; file and update it as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;pluginManagement {&#xA;   repositories {&#xA;       gradlePluginPortal()&#xA;       maven(&#34;https://maven.pkg.jetbrains.space/public/p/compose/dev&#34;)&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the &lt;code&gt;build.gradle.kts&lt;/code&gt; file with the following content:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;   kotlin(&#34;jvm&#34;) version &#34;1.8.20&#34;&#xA;   id(&#34;org.jetbrains.compose&#34;) version &#34;1.4.0&#34;&#xA;}&#xA;&#xA;&#xA;repositories {&#xA;   mavenCentral()&#xA;   maven(&#34;https://maven.pkg.jetbrains.space/public/p/compose/dev&#34;)&#xA;   google()&#xA;}&#xA;&#xA;&#xA;dependencies {&#xA;   implementation(compose.desktop.currentOs)&#xA;}&#xA;&#xA;&#xA;compose.desktop {&#xA;   application {&#xA;       mainClass = &#34;MainKt&#34;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;src/main/kotlin/main.kt&lt;/code&gt; and add the following code to it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import androidx.compose.foundation.layout.Arrangement&#xA;import androidx.compose.foundation.layout.Column&#xA;import androidx.compose.foundation.layout.fillMaxSize&#xA;import androidx.compose.material.Button&#xA;import androidx.compose.material.MaterialTheme&#xA;import androidx.compose.material.Text&#xA;import androidx.compose.runtime.mutableStateOf&#xA;import androidx.compose.runtime.remember&#xA;import androidx.compose.ui.Alignment&#xA;import androidx.compose.ui.Modifier&#xA;import androidx.compose.ui.unit.dp&#xA;import androidx.compose.ui.window.Window&#xA;import androidx.compose.ui.window.application&#xA;import androidx.compose.ui.window.rememberWindowState&#xA;&#xA;&#xA;fun main() = application {&#xA;   Window(&#xA;       onCloseRequest = ::exitApplication,&#xA;       title = &#34;Compose for Desktop&#34;,&#xA;       state = rememberWindowState(width = 300.dp, height = 300.dp)&#xA;   ) {&#xA;       val count = remember { mutableStateOf(0) }&#xA;       MaterialTheme {&#xA;           Column(Modifier.fillMaxSize(), Arrangement.spacedBy(5.dp)) {&#xA;               Button(modifier = Modifier.align(Alignment.CenterHorizontally),&#xA;                   onClick = {&#xA;                       count.value++&#xA;                   }) {&#xA;                   Text(if (count.value == 0) &#34;Hello World&#34; else &#34;Clicked ${count.value}!&#34;)&#xA;               }&#xA;               Button(modifier = Modifier.align(Alignment.CenterHorizontally),&#xA;                   onClick = {&#xA;                       count.value = 0&#xA;                   }) {&#xA;                   Text(&#34;Reset&#34;)&#xA;               }&#xA;           }&#xA;       }&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Run the application&lt;/h2&gt; &#xA;&lt;h3&gt;In the editor&lt;/h3&gt; &#xA;&lt;p&gt;You can run and debug the application by clicking &lt;strong&gt;Run&lt;/strong&gt; in the gutter near the &lt;code&gt;main()&lt;/code&gt; function declaration:&lt;/p&gt; &#xA;&lt;img alt=&#34;Application running&#34; src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-desktop-template/main/readme_images/app-run.png&#34; height=&#34;500&#34;&gt; &#xA;&lt;h3&gt;Using Gradle tasks&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In IntelliJ IDEA, open &lt;code&gt;build.gradle.kts&lt;/code&gt;. When the necessary dependencies from the Maven repositories are downloaded, your project is ready.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the &lt;a href=&#34;https://www.jetbrains.com/help/idea/jetgradle-tool-window.html&#34;&gt;Gradle tool window&lt;/a&gt;, select &lt;code&gt;sample/Tasks/compose desktop/run&lt;/code&gt;:&lt;/p&gt; &lt;img alt=&#34;New project&#34; src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-desktop-template/main/readme_images/open.png&#34; height=&#34;500&#34;&gt; &lt;p&gt;The first run may take some time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the button several times and see that the application reacts and updates the UI:&lt;/p&gt; &lt;img alt=&#34;Application running&#34; src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-desktop-template/main/readme_images/app.gif&#34; height=&#34;500&#34;&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also run Gradle tasks in the terminal:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew run&lt;/code&gt; to run the application&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew package&lt;/code&gt; to store native distribution into &lt;code&gt;build/compose/binaries&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Next steps&lt;/h2&gt; &#xA;&lt;p&gt;We encourage you to explore Compose Multiplatform further and try out more projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform#readme&#34;&gt;Learn about other cases where you can use the Compose Multiplatform UI framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform-ios-android-template#readme&#34;&gt;Create an application targeting iOS and Android with Compose Multiplatform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/raw/master/tutorials/README.md&#34;&gt;Complete more Compose Multiplatform tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/raw/master/examples/README.md&#34;&gt;Explore some more advanced Compose Multiplatform example projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>vendetta-mod/VendettaManager</title>
    <updated>2023-04-17T01:38:23Z</updated>
    <id>tag:github.com,2023-04-17:/vendetta-mod/VendettaManager</id>
    <link href="https://github.com/vendetta-mod/VendettaManager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easily install Vendetta on Android&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/vendetta-mod/VendettaManager/main/images/vendetta_logo.png&#34; alt=&#34;Vendetta logo&#34; width=&#34;200px&#34; style=&#34;border-radius: 50%&#34;&gt; &#xA; &lt;h1&gt;Vendetta Manager&lt;/h1&gt; &#xA; &lt;p&gt;Easily install Vendetta on Android&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/vendetta-mod/VendettaManager/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/vendetta-mod/VendettaManager?color=3AB8BA&amp;amp;display_name=release&amp;amp;label=Latest&amp;amp;style=for-the-badge&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/vendetta-mod/VendettaManager/build-debug.yml?label=Debug%20Build&amp;amp;logo=github&amp;amp;style=for-the-badge&amp;amp;branch=main&#34; alt=&#34;Debug build status&#34;&gt; &lt;a href=&#34;https://github.com/vendetta-mod/VendettaManager/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/vendetta-mod/VendettaManager?logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/n9QQ4XhhJP&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1015931589865246730?logo=discord&amp;amp;logoColor=white&amp;amp;style=for-the-badge&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/vendetta-mod/VendettaManager?logo=github&amp;amp;logoColor=%23fff&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub code size in bytes&#34;&gt; &lt;img src=&#34;https://img.shields.io/tokei/lines/github/vendetta-mod/VendettaManager?logo=github&amp;amp;logoColor=%23fff&amp;amp;style=for-the-badge&#34; alt=&#34;Line count&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/vendetta-mod/VendettaManager?style=for-the-badge&#34; alt=&#34;GitHub top language&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/vendetta-mod/VendettaManager/main/images/screenshot_home.png&#34; width=&#34;200px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html&#34;&gt;JDK 17&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Instructions&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone https://github.com/vendetta-mod/VendettaManager.git &amp;amp;&amp;amp; cd VendettaManager&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build the project &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux: &lt;code&gt;chmod +x ./gradlew &amp;amp;&amp;amp; gradlew assembleDebug&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;code&gt;./gradlew assembleDebug&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install on device &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio/debug/dev-options&#34;&gt;Enable usb debugging&lt;/a&gt; and plug in your phone&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;adb install app/build/outputs/apk/debug/app-debug.apk&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This is an open-source project, you can do so without any programming.&lt;/p&gt; &#xA;&lt;p&gt;Here are a few things you can do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vendetta-mod/VendettaManager/issues/new/choose&#34;&gt;Test and report issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crowdin.com/project/vendetta-manager&#34;&gt;Translate the app into your language&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Vendetta is licensed under the Open Software License version 3.0&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vendetta-mod/VendettaManager/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-OSL%20v3-blue.svg?style=for-the-badge&#34; alt=&#34;License: OSL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/compose-multiplatform-template</title>
    <updated>2023-04-17T01:38:23Z</updated>
    <id>tag:github.com,2023-04-17:/JetBrains/compose-multiplatform-template</id>
    <link href="https://github.com/JetBrains/compose-multiplatform-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compose Multiplatform Application project template&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform&#34;&gt;Compose Multiplatform&lt;/a&gt; Application&lt;/h1&gt; &#xA;&lt;p&gt;Use this template to start developing your own Compose Multiplatform application targeting Desktop, Android, and iOS (Alpha).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-template/main/readme_images/banner.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setting up your development environment&lt;/h2&gt; &#xA;&lt;p&gt;Your Compose Multiplatform application targeting Desktop, Android and iOS is a Kotlin Multiplatform project. Let&#39;s make sure you have set up your environment for mobile development with Kotlin Multiplatform.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Writing and running iOS-specific code for a simulated or real device requires macOS. This is an Apple limitation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To work with this template, you will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A machine running a recent version of macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile&#34;&gt;Kotlin Multiplatform Mobile plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/native-cocoapods.html&#34;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Checking your development environment with &lt;code&gt;kdoctor&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Before opening the project in Android Studio&lt;/strong&gt;, use &lt;a href=&#34;https://github.com/Kotlin/kdoctor&#34;&gt;&lt;code&gt;kdoctor&lt;/code&gt;&lt;/a&gt; to ensure your development environment is configured correctly. Install &lt;code&gt;kdoctor&lt;/code&gt; via &lt;a href=&#34;https://brew.sh/&#34;&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install kdoctor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run &lt;code&gt;kdoctor&lt;/code&gt; from your terminal. If everything is set up correctly, you should see valid output. Otherwise, &lt;code&gt;kdoctor&lt;/code&gt; will provide you which parts of your setup still need configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Environment diagnose (to see all details, use -v option):&#xA;[âœ“] Operation System&#xA;[âœ“] Java&#xA;[âœ“] Android Studio&#xA;[âœ“] Xcode&#xA;[âœ“] Cocoapods&#xA;&#xA;Conclusion:&#xA;  âœ“ Your system is ready for Kotlin Multiplatform Mobile Development!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Opening the project&lt;/h2&gt; &#xA;&lt;p&gt;Use Android Studio to open the project. Make sure you have the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile&#34;&gt;Kotlin Multiplatform Mobile plugin&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;h2&gt;Examining the project structure&lt;/h2&gt; &#xA;&lt;p&gt;Switch to the Project View to see all files and targets belonging to the project.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-template/main/readme_images/open_project_view.png&#34; height=&#34;300px&#34;&gt; &#xA;&lt;p&gt;Your Compose Multiplatform project includes three modules:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;shared&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This Kotlin module that contains the logic common for Desktop, Android and iOS applications â€“ the code you share between platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is also where you will write your Compose Multiplatform code&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The shared root &lt;code&gt;@Composable&lt;/code&gt; function for your app lives in &lt;code&gt;shared/src/commonMain/kotlin/App.kt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;shared&lt;/code&gt; uses Gradle as the build system. You can add dependencies and change settings in &lt;code&gt;shared/build.gradle.kts&lt;/code&gt;. The shared module builds into a Java library, an Android library and an iOS framework.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;desktopApp&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This Kotlin module that builds into a Desktop application. It uses Gradle as the build system. The desktopApp module depends on and uses the shared module as a regular library.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;androidApp&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This Kotlin module that builds into an Android application. It uses Gradle as the build system. The androidApp module depends on and uses the shared module as a regular Android library.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;iosApp&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is the Xcode project that builds into an iOS application. It depends on and uses the shared module as a CocoaPods dependency.&lt;/p&gt; &#xA;&lt;h2&gt;Running your application&lt;/h2&gt; &#xA;&lt;h2&gt;Desktop&lt;/h2&gt; &#xA;&lt;p&gt;This template contains &lt;code&gt;desktopApp&lt;/code&gt; run configuration that you can use to run the desktop target in Android Studio or IntelliJ IDEA.&lt;/p&gt; &#xA;&lt;p&gt;Useful Gradle tasks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew run&lt;/code&gt; - run application&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew package&lt;/code&gt; - package native distribution into &lt;code&gt;build/compose/binaries&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Android&lt;/h2&gt; &#xA;&lt;p&gt;To run your application on an Android emulator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create an &lt;a href=&#34;https://developer.android.com/studio/run/managing-avds#createavd&#34;&gt;Android virtual device&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;androidApp&lt;/code&gt; run configuration.&lt;/li&gt; &#xA; &lt;li&gt;Select your target device and press &lt;strong&gt;Run&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-template/main/readme_images/run_on_android.png&#34; height=&#34;60px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-template/main/readme_images/android_app_running.png&#34; height=&#34;200px&#34;&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Gradle&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;./gradlew installDebug&lt;/code&gt; - install Android application on an Android device (on a real device or on an emulator)&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;iOS&lt;/h2&gt; &#xA;&lt;p&gt;We suggest going through the &#34;Hello, World&#34; steps of creating and deploying a sample project in Xcode to a simulator and/or your physical device. A video tutorial for setting up Xcode and running your first &#34;Hello, World&#34; application is available in &lt;a href=&#34;https://youtu.be/bqu6BquVi2M?start=716&amp;amp;end=1399&#34;&gt;this Standford CS193P lecture recording&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running on an iOS simulator&lt;/h3&gt; &#xA;&lt;p&gt;Once you have configured your environment correctly, you will be able to select which iOS simulator to run your application in Android Studio on by modifying the &lt;code&gt;iosApp&lt;/code&gt; run configuration.&lt;/p&gt; &#xA;&lt;p&gt;Select &#34;Run&#34; | &#34;Edit Configurations...&#34; and navigate to the &#34;iOS Application&#34; | &#34;iosApp&#34; run configuration. In the &#34;Execution target&#34; drop-down, select your target device.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-template/main/readme_images/edit_run_config.png&#34; height=&#34;200px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-template/main/readme_images/target_device.png&#34;&gt; &#xA;&lt;p&gt;Press the &#34;Run&#34; button to run your Compose Multiplatform app on the iOS simulator.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-template/main/readme_images/hello_world_ios.png&#34; height=&#34;200px&#34;&gt; &#xA;&lt;h3&gt;Running on a real iOS device&lt;/h3&gt; &#xA;&lt;p&gt;Running your Compose Multiplatform application on a physical device can be done for free. You need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;an &lt;a href=&#34;https://support.apple.com/en-us/HT204316&#34;&gt;Apple ID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the registered iOS device in Xcode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before you continue, make sure that you can successfully run a plain &#34;Hello, World&#34; application from Xcode on your physical device.&lt;/p&gt; &#xA;&lt;p&gt;To run the application, set the &lt;code&gt;TEAM_ID&lt;/code&gt; associated with your Apple ID in &lt;code&gt;iosApp/Configuration/Config.xcconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Finding your Team ID&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;kdoctor --team-ids&lt;/code&gt; to find and set your Team ID. This will list all Team IDs currently configured on your system, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;3ABC246XYZ (Max Sample)&#xA;ZABCW6SXYZ (SampleTech Inc.)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Alternative way of finding your Team ID&lt;/summary&gt; &#xA; &lt;p&gt;If you&#39;re running into trouble with the method described above, you can try this alternative method.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Run the &lt;code&gt;iosApp&lt;/code&gt; run configuration from Android Studio (it will fail)&lt;/li&gt; &#xA;  &lt;li&gt;Open the &lt;code&gt;iosApp/iosApp.xcworkspace&lt;/code&gt; in Xcode&lt;/li&gt; &#xA;  &lt;li&gt;Select &lt;code&gt;iosApp&lt;/code&gt; in the menu on the left side&lt;/li&gt; &#xA;  &lt;li&gt;Navigate to &#34;Signing &amp;amp; Capabilities&#34;&lt;/li&gt; &#xA;  &lt;li&gt;Select your Personal Team in the &#34;Team&#34; dropdown. If you haven&#39;t set up your team, use the &#34;Add account...&#34; option and follow the steps inside Xcode.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Set this Team ID in &lt;code&gt;iosApp/Configuration/Config.xcconfig&lt;/code&gt; in the &lt;code&gt;TEAM_ID&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;p&gt;After that you can re-open the project in Android Studio, and it will show the registered iOS device in the &lt;code&gt;iosApp&lt;/code&gt; run configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Make your first changes&lt;/h3&gt; &#xA;&lt;p&gt;The common entry point for your Compose Multiplatform app is located in &lt;code&gt;shared/src/commonMain/kotlin/App.kt&lt;/code&gt;. Here, you will see the code that is responsible for rendering the &#34;Hello, World&#34; button and the animated Compose Multplatform logo. If you make changes here, you will see them reflected on both Android and iOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@OptIn(ExperimentalResourceApi::class)&#xA;@Composable&#xA;internal fun App() {&#xA;    MaterialTheme {&#xA;        var greetingText by remember { mutableStateOf(&#34;Hello, World!&#34;) }&#xA;        var showImage by remember { mutableStateOf(false) }&#xA;        Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#xA;            Button(onClick = {&#xA;                greetingText = &#34;Hello, ${getPlatformName()}&#34;&#xA;                showImage = !showImage&#xA;            }) {&#xA;                Text(greetingText)&#xA;            }&#xA;            AnimatedVisibility(showImage) {&#xA;                Image(&#xA;                    painterResource(&#34;compose-multiplatform.xml&#34;),&#xA;                    null&#xA;                )&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update the shared code by adding a text field that will update the name displayed on the button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;@OptIn(ExperimentalResourceApi::class)&#xA;@Composable&#xA;internal fun App() {&#xA;    MaterialTheme {&#xA;        var greetingText by remember { mutableStateOf(&#34;Hello, World!&#34;) }&#xA;        var showImage by remember { mutableStateOf(false) }&#xA;        Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#xA;            Button(onClick = {&#xA;                greetingText = &#34;Hello, ${getPlatformName()}&#34;&#xA;                showImage = !showImage&#xA;            }) {&#xA;                Text(greetingText)&#xA;            }&#xA;+           TextField(greetingText, onValueChange = { greetingText = it })&#xA;            AnimatedVisibility(showImage) {&#xA;                Image(&#xA;                    painterResource(&#34;compose-multiplatform.xml&#34;),&#xA;                    null&#xA;                )&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-template/main/readme_images/text_field_added.png&#34; height=&#34;200px&#34;&gt; &#xA;&lt;h3&gt;Configuring the iOS application&lt;/h3&gt; &#xA;&lt;p&gt;This template contains a &lt;code&gt;iosApp/Configuration/Config.xcconfig&lt;/code&gt; configuration file that allows you to configure most basic properties without having to move to Xcode. It contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;APP_NAME&lt;/code&gt; - target executable and application bundle name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BUNDLE_ID&lt;/code&gt; - &lt;a href=&#34;https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleidentifier#discussion&#34;&gt;bundle identifier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TEAM_ID&lt;/code&gt; - &lt;a href=&#34;https://developer.apple.com/help/account/manage-your-team/locate-your-team-id/#:~:text=A%20Team%20ID%20is%20a,developer%20in%20App%20Store%20Connect.&#34;&gt;Team ID&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: To configure the &lt;code&gt;APP_NAME&lt;/code&gt; setting, open &lt;code&gt;Config.xcconfig&lt;/code&gt; in any text editor &lt;em&gt;before opening&lt;/em&gt; the project in Android Studio, and set the desired name.&lt;/p&gt; &#xA;&lt;p&gt;If you need to change this setting after you open the project in Android Studio, please do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;close the project in Android Studio&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;./cleanup.sh&lt;/code&gt; in your terminal&lt;/li&gt; &#xA; &lt;li&gt;change the setting&lt;/li&gt; &#xA; &lt;li&gt;open the project in Android Studio again&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For configuring advanced settings, you can use Xcode. Open the &lt;code&gt;iosApp/iosApp.xcworkspace&lt;/code&gt; in Xcode after opening the project in Android Studio, and use Xcode to make your changes.&lt;/p&gt;</summary>
  </entry>
</feed>