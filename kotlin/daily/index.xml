<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-30T01:45:25Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apollographql/apollo-kotlin</title>
    <updated>2022-06-30T01:45:25Z</updated>
    <id>tag:github.com,2022-06-30:/apollographql/apollo-kotlin</id>
    <link href="https://github.com/apollographql/apollo-kotlin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ¤– Â A strongly-typed, caching GraphQL client for the JVM, Android, and Kotlin multiplatform.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apollo Kotlin&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apollographql/apollo-android/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-lightgrey.svg?maxAge=2592000&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://community.apollographql.com/new-topic?category=Help&amp;amp;tags=mobile,client&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/status?label=Join%20the%20community&amp;amp;server=https%3A%2F%2Fcommunity.apollographql.com&#34; alt=&#34;Join the community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.slack.com/client/T09229ZC6/C01A6KM1SBZ&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=kotlinlang&amp;amp;message=apollo-android&amp;amp;color=15a2f5&amp;amp;logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apollographql/apollo-android/actions&#34;&gt;&lt;img src=&#34;https://github.com/apollographql/apollo-android/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repo1.maven.org/maven2/com/apollographql/apollo3/&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.apollographql.apollo3/apollo-api&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://s01.oss.sonatype.org/content/repositories/snapshots/com/apollographql/apollo3/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nexus/s/com.apollographql.apollo3/apollo-api?server=https%3A%2F%2Fs01.oss.sonatype.org&amp;amp;label=oss-snapshots&#34; alt=&#34;OSS Snapshots&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apollo Kotlin (formerly known as Apollo Android) is a GraphQL client that generates Kotlin and Java models from GraphQL queries.&lt;/p&gt; &#xA;&lt;p&gt;Apollo Kotlin executes queries and mutations against a GraphQL server and returns results as query-specific Kotlin types. This means you don&#39;t have to deal with parsing JSON, or passing around &lt;code&gt;Map&lt;/code&gt;s and making clients cast values to the right type manually. You also don&#39;t have to write model types yourself, because these are generated from the GraphQL definitions your UI uses.&lt;/p&gt; &#xA;&lt;p&gt;Because generated types are query-specific, you can only access data that you actually specify as part of a query. If you don&#39;t ask for a particular field in a query, you can&#39;t access the corresponding property on the returned data structure.&lt;/p&gt; &#xA;&lt;p&gt;This library is designed primarily with Android in mind, but you can use it in any Java/Kotlin app, including multiplatform.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java and Kotlin Multiplatform code generation&lt;/li&gt; &#xA; &lt;li&gt;Queries, Mutations and Subscriptions&lt;/li&gt; &#xA; &lt;li&gt;Reflection-free parsing&lt;/li&gt; &#xA; &lt;li&gt;Normalized cache&lt;/li&gt; &#xA; &lt;li&gt;Custom scalar types&lt;/li&gt; &#xA; &lt;li&gt;HTTP cache&lt;/li&gt; &#xA; &lt;li&gt;Auto Persisted Queries&lt;/li&gt; &#xA; &lt;li&gt;Query batching&lt;/li&gt; &#xA; &lt;li&gt;File uploads&lt;/li&gt; &#xA; &lt;li&gt;Espresso IdlingResource&lt;/li&gt; &#xA; &lt;li&gt;Fake models for tests&lt;/li&gt; &#xA; &lt;li&gt;AppSync and graphql-ws websockets&lt;/li&gt; &#xA; &lt;li&gt;GraphQL AST parser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Multiplatform&lt;/h2&gt; &#xA;&lt;p&gt;Apollo Kotlin is a &lt;a href=&#34;https://kotlinlang.org/docs/multiplatform.html&#34;&gt;Kotlin Multiplatform&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the current matrix of supported features per platform:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;jvm&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AppleÂ¹&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;js&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;linuxX64&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;apollo-api&lt;/code&gt; (models)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;apollo-runtime&lt;/code&gt; (network, query batching, apq, ...)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸš«&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;apollo-normalized-cache&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸš«&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;apollo-adapters&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸš«&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;apollo-normalized-cache-sqlite&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸš«&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸš«&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;apollo-http-cache&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸš«&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸš«&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ðŸš«&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Â¹: Apple currently includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;macosX64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;macosArm64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iosArm64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iosX64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iosSimulatorArm64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;watchosArm64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;watchosSimulatorArm64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tvosArm64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tvosX64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tvosSimulatorArm64&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://www.apollographql.com/docs/android/&#34;&gt;the project website&lt;/a&gt; for in depth documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;If you are new to GraphQL, check out &lt;a href=&#34;https://www.apollographql.com/docs/android/tutorial/00-introduction/&#34;&gt;the tutorial&lt;/a&gt; that will guide you through building an Android app using Apollo, Kotlin and coroutines.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to add Apollo Kotlin to an existing project, follow these steps:&lt;/p&gt; &#xA;&lt;p&gt;Add the plugin to your &lt;code&gt;build.gradle.kts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;  id(&#34;com.apollographql.apollo3&#34;).version(&#34;3.3.2&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the runtime dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;dependencies { &#xA;  implementation(&#34;com.apollographql.apollo3:apollo-runtime:3.3.2&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the package name to use for the generated models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;apollo {&#xA;  packageName.set(&#34;com.example&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Apollo Kotlin supports three types of files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.graphqls&lt;/code&gt; schema files: describes the types in your backend using the GraphQL syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.json&lt;/code&gt; schema files: describes the types in your backend using the Json syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.graphql&lt;/code&gt; executable files: describes your queries and operations in the GraphQL syntax.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, Apollo Kotlin requires a schema in your module&#39;s &lt;code&gt;src/main/graphql&lt;/code&gt; directory. You can download a schema using introspection with the &lt;code&gt;./gradlew downloadApolloSchema&lt;/code&gt; task. Sometimes introspection is disabled and you will have to ask your backend team to provide a schema. Copy this schema to your module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp ${schema} ${module}/src/main/graphql/ &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write a query in a &lt;code&gt;${module}/src/main/graphql/GetRepository.graphql&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;query HeroQuery($id: String!) {&#xA;  hero(id: $id) {&#xA;    id&#xA;    name&#xA;    appearsIn&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build your project, this will generate a &lt;code&gt;HeroQuery&lt;/code&gt; class that you can use with an instance of &lt;code&gt;ApolloClient&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;  // Create a client&#xA;  val apolloClient = ApolloClient.Builder()&#xA;      .serverUrl(&#34;https://example.com/graphql&#34;)&#xA;      .build()&#xA;&#xA;  // Execute your query. This will suspend until the response is received.&#xA;  val response = apolloClient.query(HeroQuery(id = &#34;1&#34;)).execute()&#xA;&#xA;  println(&#34;Hero.name=${response.data?.hero?.name}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To learn more about other Apollo Kotlin APIs:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Execute your first &lt;a href=&#34;https://www.apollographql.com/docs/android/essentials/mutations/&#34;&gt;mutation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Handle &lt;a href=&#34;https://www.apollographql.com/docs/android/essentials/custom-scalars/&#34;&gt;custom scalar types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Factor common patterns using &lt;a href=&#34;https://www.apollographql.com/docs/android/essentials/inline-fragments&#34;&gt;fragments&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Proguard / R8 configuration&lt;/h2&gt; &#xA;&lt;p&gt;As the code generated by Apollo Kotlin doesn&#39;t use any reflection, it can safely be optimized / obfuscated by Proguard or R8, so no particular exclusions need to be configured.&lt;/p&gt; &#xA;&lt;h2&gt;IntelliJ Plugin&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://jimkyndemeyer.github.io/js-graphql-intellij-plugin/&#34;&gt;JS Graphql IntelliJ Plugin&lt;/a&gt; provides auto-completion, error highlighting, and go-to-definition functionality for your &lt;code&gt;.graphql&lt;/code&gt; files. You can create a &lt;a href=&#34;https://jimkyndemeyer.github.io/js-graphql-intellij-plugin/docs/developer-guide#working-with-graphql-endpoints-and-scratch-files&#34;&gt;&lt;code&gt;.graphqlconfig&lt;/code&gt;&lt;/a&gt; file to use GraphQL scratch files to work with your schema outside product code (such as to write temporary queries to test resolvers). Make sure you check &#34;Apollo Kotlin&#34; in the plugin&#39;s settings, so directives such as &lt;code&gt;@nonnull&lt;/code&gt; and &lt;code&gt;typePolicy&lt;/code&gt; are recognized.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;The latest version is &lt;a href=&#34;https://repo1.maven.org/maven2/com/apollographql/apollo3/&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.apollographql.apollo3/apollo-api&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/apollographql/apollo-android/releases&#34;&gt;changelog&lt;/a&gt; for the release history.&lt;/p&gt; &#xA;&lt;p&gt;Releases are hosted on &lt;a href=&#34;https://repo1.maven.org/maven2/com/apollographql/apollo3/&#34;&gt;Maven Central&lt;/a&gt;. The plugin is additionally hosted on the &lt;a href=&#34;https://plugins.gradle.org/plugin/com.apollographql.apollo3&#34;&gt;Gradle Plugin Portal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;  id(&#34;com.apollographql.apollo3&#34;).version(&#34;3.3.2&#34;)&#xA;}&#xA;&#xA;repositories {&#xA;  mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;  implementation(&#34;com.apollographql.apollo3:apollo-runtime:3.3.2&#34;)&#xA;&#xA;  // optional: if you want to use the normalized cache&#xA;  implementation(&#34;com.apollographql.apollo3:apollo-normalized-cache-sqlite:3.3.2&#34;)&#xA;  // optional: if you just want the generated models and parsers and write your own HTTP code/cache code, you can remove apollo-runtime&#xA;  // and use apollo-api instead  &#xA;  implementation(&#34;com.apollographql.apollo3:apollo-api:3.3.2&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Snapshots&lt;/h2&gt; &#xA;&lt;p&gt;Latest development changes are available in Sonatype&#39;s snapshots repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// build.gradle.kts&#xA;repositories {&#xA;  maven {&#xA;    url = uri(&#34;https://s01.oss.sonatype.org/content/repositories/snapshots/&#34;)&#xA;  }&#xA;  mavenCentral()&#xA;  // other repositories...&#xA;}&#xA;&#xA;// settings.gradle.kts&#xA;pluginManagement {&#xA;  repositories {&#xA;    maven {&#xA;      url = uri(&#34;https://s01.oss.sonatype.org/content/repositories/snapshots/&#34;)&#xA;    }&#xA;    gradlePluginPortal()&#xA;    mavenCentral()&#xA;    // other repositories...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then use the &lt;code&gt;3.3.3-SNAPSHOT&lt;/code&gt; version for the plugin and libraries.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Some platforms have specific requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android API level 21+ (&lt;code&gt;apollo-http-cache&lt;/code&gt; and &lt;code&gt;apollo-adapters&lt;/code&gt; require enabling &lt;a href=&#34;https://developer.android.com/studio/write/java8-support#library-desugaring&#34;&gt;core library desugaring&lt;/a&gt; on Android API levels &amp;lt; 26)&lt;/li&gt; &#xA; &lt;li&gt;JDK 8+ (JDK 11+ when using Android Gradle Plugin 7.0+)&lt;/li&gt; &#xA; &lt;li&gt;iOS 13+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For building, it requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gradle 5.6&lt;/li&gt; &#xA; &lt;li&gt;Kotlin 1.5+ (1.6+ for native)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute, please see &lt;a href=&#34;https://github.com/apollographql/apollo-android/raw/main/CONTRIBUTING.md&#34;&gt;Contributing.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community integrations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you&#39;re using the &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; build tool, &lt;a href=&#34;https://github.com/aoudiamoncef/apollo-client-maven-plugin&#34;&gt;https://github.com/aoudiamoncef/apollo-client-maven-plugin&lt;/a&gt; is a Maven plugin that calls the Apollo Android compiler to generate your Java/Kotlin sources.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using &lt;a href=&#34;https://hexdocs.pm/absinthe_phoenix/readme.html&#34;&gt;Absinthe Phoenix subscriptions&lt;/a&gt;, &lt;a href=&#34;https://github.com/ajacquierbret/kotlin-phoenix&#34;&gt;kotlin-phoenix&lt;/a&gt; has a &lt;a href=&#34;https://github.com/ajacquierbret/kotlin-phoenix/raw/main/kotlinphoenix-adapters/src/commonMain/kotlin/io/github/ajacquierbret/kotlinphoenix/adapters/apollo/PhoenixNetworkTransport.kt&#34;&gt;PhoenixNetworkTransport&lt;/a&gt; that you can use together with &lt;code&gt;ApolloClient&lt;/code&gt; (&lt;a href=&#34;https://github.com/ajacquierbret/kotlin-phoenix/tree/main/kotlinphoenix-adapters&#34;&gt;doc&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joreilly/MortyComposeKMM&#34;&gt;MortyComposeKMM&lt;/a&gt;: A Kotlin Multiplatform Github template using Apollo Kotlin, SwiftUI and Jetpack Compose.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GN6LHrqyimI&#34;&gt;A journey to Kotlin multiplatform&lt;/a&gt;: how the project was moved to Kotlin multiplatform, talk given at Kotliners in June 2020.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://fragmentedpodcast.com/episodes/125/&#34;&gt;#125, Fragmented Podcast&lt;/a&gt;: Why&#39;s and How&#39;s about Apollo Kotlin and the entire journey.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://graphql.org&#34;&gt;GraphQL.org&lt;/a&gt; for an introduction and reference to GraphQL itself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.apollographql.com/&#34;&gt;apollographql.com&lt;/a&gt; to learn about Apollo open-source and commercial tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/blog/&#34;&gt;The Apollo blog&lt;/a&gt; for long-form articles about GraphQL, feature announcements for Apollo, and guest articles from the community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/apollographql&#34;&gt;The Apollo Twitter account&lt;/a&gt; for in-the-moment news.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who is Apollo?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apollographql.com/&#34;&gt;Apollo&lt;/a&gt; builds open-source software and a graph platform to unify GraphQL across your apps and services. We help you ship faster with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/studio/develop/&#34;&gt;Apollo Studio&lt;/a&gt; â€“ A free, end-to-end platform for managing your GraphQL lifecycle. Track your GraphQL schemas in a hosted registry to create a source of truth for everything in your graph. Studio provides an IDE (Apollo Explorer) so you can explore data, collaborate on queries, observe usage, and safely make schema changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/apollo-federation&#34;&gt;Apollo Federation&lt;/a&gt; â€“ The industry-standard open architecture for building a distributed graph. Use Apolloâ€™s gateway to compose a unified graph from multiple subgraphs, determine a query plan, and route requests across your services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/apollo-client/&#34;&gt;Apollo Client&lt;/a&gt; â€“ The most popular GraphQL client for the web. Apollo also builds and maintains &lt;a href=&#34;https://github.com/apollographql/apollo-ios&#34;&gt;Apollo iOS&lt;/a&gt; and &lt;a href=&#34;https://github.com/apollographql/apollo-android&#34;&gt;Apollo Kotlin&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/docs/apollo-server/&#34;&gt;Apollo Server&lt;/a&gt; â€“ A production-ready JavaScript GraphQL server that connects to any microservice, API, or database. Compatible with all popular JavaScript frameworks and deployable in serverless environments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn how to build with Apollo&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://odyssey.apollographql.com/&#34;&gt;Odyssey&lt;/a&gt; learning platform, the perfect place to start your GraphQL journey with videos and interactive code challenges. Join the &lt;a href=&#34;https://community.apollographql.com/&#34;&gt;Apollo Community&lt;/a&gt; to interact with and get technical help from the GraphQL community.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>googlecodelabs/android-compose-codelabs</title>
    <updated>2022-06-30T01:45:25Z</updated>
    <id>tag:github.com,2022-06-30:/googlecodelabs/android-compose-codelabs</id>
    <link href="https://github.com/googlecodelabs/android-compose-codelabs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jetpack Compose Codelabs&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a set of Android Studio projects to help you learn about Compose in Android. Each sample contains the code for a specific Compose codelab.&lt;/p&gt; &#xA;&lt;p&gt;For more information about Jetpack Compose, please &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;read the documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ðŸ’» Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio Chipmunk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ðŸ§¬ Codelabs&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-basics&#34;&gt;Basics codelabs&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Go hands-on and learn the fundamentals of declarative UI, working with state, layouts and theming.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-layouts&#34;&gt;Basic layouts codelab&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Learn how to implement real-world designs with the composables and modifiers that Compose provides out of the box.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-state&#34;&gt;State codelab&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Understand patterns for working with state in a declarative world by building a Todo application.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-theming&#34;&gt;Theming codelab&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Go hands on with Composeâ€™s implementation of Material Design to understand how to theme an applicationâ€™s colors, typography and shapes and support light and dark themes.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-migration&#34;&gt;Migration codelab&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Understand how Jetpack Compose and View-based UIs can co-exist and interact, making it easy to adopt Compose at your own pace.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-animation&#34;&gt;Animation codelab&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Learn how to use Jetpack Compose Animation APIs.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-navigation&#34;&gt;Navigation codelab&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Learn how to use the Jetpack Navigation library in Compose, navigate within your application, navigate with arguments, support deep-links, and test your navigation.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-testing&#34;&gt;Testing codelab&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Learn about testing Jetpack Compose UIs. Write your first tests, and learn about testing in isolation, debugging tests, the semantics tree, and test synchronization.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/codelabs/jetpack-compose-accessibility&#34;&gt;Accessibility codelab&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Learn about the various ways to improve an appâ€™s accessibility. Increase touch target sizes, add content descriptions, create custom actions, and more.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2021 The Android Open Source Project&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    https://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>