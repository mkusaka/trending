<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-20T01:33:46Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Calvin-LL/Reorderable</title>
    <updated>2025-08-20T01:33:46Z</updated>
    <id>tag:github.com,2025-08-20:/Calvin-LL/Reorderable</id>
    <link href="https://github.com/Calvin-LL/Reorderable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reorder items in Lists and Grids in Jetpack Compose and Compose Multiplatform with drag and drop.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reorderable&lt;/h1&gt; &#xA;&lt;p&gt;Reorderable is a simple library that allows you to reorder items in &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/package-summary#LazyColumn(androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.LazyListState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyColumn&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/package-summary#LazyRow(androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.LazyListState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.ui.Alignment.Vertical,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyRow&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/grid/package-summary#LazyVerticalGrid(androidx.compose.foundation.lazy.grid.GridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.grid.LazyGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyVerticalGrid&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/grid/package-summary#LazyHorizontalGrid(androidx.compose.foundation.lazy.grid.GridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.grid.LazyGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyHorizontalGrid&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/staggeredgrid/package-summary#LazyVerticalStaggeredGrid(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.ui.unit.Dp,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyVerticalStaggeredGrid&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/staggeredgrid/package-summary#LazyHorizontalStaggeredGrid(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.unit.Dp,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyHorizontalStaggeredGrid&lt;/code&gt;&lt;/a&gt; as well as &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#Column(androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,kotlin.Function1)&#34;&gt;&lt;code&gt;Column&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#Row(androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.ui.Alignment.Vertical,kotlin.Function1)&#34;&gt;&lt;code&gt;Row&lt;/code&gt;&lt;/a&gt; in Jetpack Compose and Compose Multiplatform with drag and drop.&lt;/p&gt; &#xA;&lt;p&gt;The latest demo app APK can be found in the &lt;a href=&#34;https://github.com/Calvin-LL/Reorderable/releases&#34;&gt;releases&lt;/a&gt; section under the &#34;Assets&#34; section of the latest release.&lt;/p&gt; &#xA;&lt;table width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th width=&#34;50%&#34;&gt;LazyColumn&lt;/th&gt; &#xA;   &lt;th width=&#34;50%&#34;&gt;LazyGrid&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/lazy-column-demo.webp&#34; width=&#34;320&#34; alt=&#34;A video showing an item being reordered in a LazyColumn&#34; /&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/lazy-grid-demo.webp&#34; width=&#34;320&#34; alt=&#34;A video showing an item being reordered in a LazyGrid&#34; /&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Used By&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LawnchairLauncher/lawnchair/raw/10889eb9772d5ec05f8ec536db3986ad5d9f4f33/build.gradle#L420&#34;&gt;Lawnchair&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/LawnchairLauncher/lawnchair?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/home-assistant/android/raw/b7281155f1bdc0bf53780e8b304cda1ae0532fd4/gradle/libs.versions.toml#L211&#34;&gt;Home Assistant&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/home-assistant/android?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ProtonVPN/android-app/raw/c1543ff1c299df376dac762d12e6049de95fdea8/app/build.gradle#L796&#34;&gt;ProtonVPN&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/ProtonVPN/android-app?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Automattic/pocket-casts-android/raw/96cb6c6c3e210800a5fd2365776eee896079e255/gradle/libs.versions.toml#L281&#34;&gt;Pocket Casts&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/Automattic/pocket-casts-android?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gkd-kit/gkd/raw/de140488aa42330d282cc41b92127237308e25f2/gradle/libs.versions.toml#L63&#34;&gt;gkd&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/gkd-kit/gkd?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mihonapp/mihon/raw/919607cd06ee45ac667a2fd650d85aaf6ebb9762/gradle/libs.versions.toml#L68&#34;&gt;Mihon&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/mihonapp/mihon?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amir1376/ab-download-manager/raw/dcf802b0583ab44fc806c86fc715fd2364d811db/gradle/libs.versions.toml#L100&#34;&gt;AB Download Manager&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/amir1376/ab-download-manager?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/T8RIN/ImageToolbox/raw/f03ba7e7dd497b215cc14cf80ee4991d42d101a4/gradle/libs.versions.toml#L160&#34;&gt;ImageToolbox&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/T8RIN/ImageToolbox?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aniyomiorg/aniyomi/raw/0697aad3204cf95547edcde1b98ca80c124d2677/gradle/libs.versions.toml#L67&#34;&gt;Aniyomi&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/aniyomiorg/aniyomi?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/z-huang/InnerTune/raw/ba3a3a0fe9d3499205a7fc91649938091cad75b8/gradle/libs.versions.toml#L34&#34;&gt;InnerTune&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/z-huang/InnerTune?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/streetcomplete/StreetComplete/raw/bcb8b58597c5e55b59b71be3568eed5e6a025e9b/app/build.gradle.kts#L154&#34;&gt;StreetComplete&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/streetcomplete/StreetComplete?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Helium314/HeliBoard/raw/0787a79de4d118aa5efc7515cc3d5c84aa834951/app/build.gradle.kts#L122&#34;&gt;HeliBoard&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/Helium314/HeliBoard?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FooIbar/EhViewer/raw/4bb6b0baf69f4e996e1dd0bdb89a7f112819bf02/gradle/libs.versions.toml#L102&#34;&gt;EhViewer&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/FooIbar/EhViewer?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/10miaomiao/bilimiao2/raw/b806379206283309defd6d0ef9ad3b575dd46642/bilimiao-compose/build.gradle.kts#L83&#34;&gt;bilimiao&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/10miaomiao/bilimiao2?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/msasikanth/twine/raw/841defa05f03c13e56fd331e288f9a5e676862ca/gradle/libs.versions.toml#L124&#34;&gt;Twine&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/msasikanth/twine?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NeoApplications/Neo-Launcher/raw/c3788690e31d13249ae70e9db628ed7e9baa86d4/gradle/libs.versions.toml#L112&#34;&gt;Neo Launcher&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/NeoApplications/Neo-Launcher?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/komikku-app/komikku/raw/2661122d9ae532442526de136b25adb8045803ed/gradle/libs.versions.toml#L66&#34;&gt;Komikku&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/komikku-app/komikku?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GetStream/stream-chat-android/raw/95a3f812991d7fe1e91d7457d125a039aeff704c/buildSrc/src/main/kotlin/io/getstream/chat/android/Dependencies.kt#L217&#34;&gt;Stream Chat&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/GetStream/stream-chat-android?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/plateaukao/einkbro/raw/4dfa50fff1ced5035d1be77ef5af55ac165375e6/app/build.gradle.kts#L148&#34;&gt;EinkBro&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/plateaukao/einkbro?style=flat&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports Compose Multiplatform (Android, iOS, Desktop/JVM, Wasm, JS)&lt;/li&gt; &#xA; &lt;li&gt;Supports items of different sizes&lt;/li&gt; &#xA; &lt;li&gt;Some items can be made non-reorderable&lt;/li&gt; &#xA; &lt;li&gt;Supports dragging and animating the first visible item&lt;/li&gt; &#xA; &lt;li&gt;Supports dragging immediately or long press to start dragging&lt;/li&gt; &#xA; &lt;li&gt;Supports section headers and footers&lt;/li&gt; &#xA; &lt;li&gt;Scrolls when dragging to the edge of the screen. (unavailable for &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#Column(androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,kotlin.Function1)&#34;&gt;&lt;code&gt;Column&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#Row(androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.ui.Alignment.Vertical,kotlin.Function1)&#34;&gt;&lt;code&gt;Row&lt;/code&gt;&lt;/a&gt;) The scroll speed is based on the distance from the edge of the screen.&lt;/li&gt; &#xA; &lt;li&gt;Uses the new &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/LazyItemScope#(androidx.compose.ui.Modifier).animateItem(androidx.compose.animation.core.FiniteAnimationSpec,androidx.compose.animation.core.FiniteAnimationSpec,androidx.compose.animation.core.FiniteAnimationSpec)&#34;&gt;&lt;code&gt;Modifier.animateItem&lt;/code&gt;&lt;/a&gt; API to animate item movement in &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/package-summary#LazyColumn(androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.LazyListState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyColumn&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/package-summary#LazyRow(androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.LazyListState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.ui.Alignment.Vertical,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyRow&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/grid/package-summary#LazyVerticalGrid(androidx.compose.foundation.lazy.grid.GridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.grid.LazyGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyVerticalGrid&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/grid/package-summary#LazyHorizontalGrid(androidx.compose.foundation.lazy.grid.GridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.grid.LazyGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyHorizontalGrid&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/staggeredgrid/package-summary#LazyVerticalStaggeredGrid(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.ui.unit.Dp,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyVerticalStaggeredGrid&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/staggeredgrid/package-summary#LazyHorizontalStaggeredGrid(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.unit.Dp,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyHorizontalStaggeredGrid&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports using a child of an item as the drag handle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Version Catalog&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Version Catalog, add the following to your &lt;code&gt;libs.versions.toml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[versions]&#xA;#...&#xA;reorderable = &#34;3.0.0&#34;&#xA;&#xA;[libraries]&#xA;#...&#xA;reorderable = { module = &#34;sh.calvin.reorderable:reorderable&#34;, version.ref = &#34;reorderable&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[libraries]&#xA;#...&#xA;reorderable = { module = &#34;sh.calvin.reorderable:reorderable&#34;, version = &#34;3.0.0&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;dependencies {&#xA;    // ...&#xA;    implementation(libs.reorderable)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Gradle instead, add the following to your &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;h4&gt;Kotlin DSL&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;dependencies {&#xA;    // ...&#xA;    implementation(&#34;sh.calvin.reorderable:reorderable:3.0.0&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Groovy DSL&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    // ...&#xA;    implementation &#39;sh.calvin.reorderable:reorderable:3.0.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo&#34;&gt;demo app code&lt;/a&gt; for more examples.&lt;/p&gt; &#xA;&lt;h4&gt;Table of Contents&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/#lazycolumn&#34;&gt;&lt;code&gt;LazyColumn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/#lazyrow&#34;&gt;&lt;code&gt;LazyRow&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/#lazyverticalgrid&#34;&gt;&lt;code&gt;LazyVerticalGrid&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/#lazyhorizontalgrid&#34;&gt;&lt;code&gt;LazyHorizontalGrid&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/#lazyverticalstaggeredgrid&#34;&gt;&lt;code&gt;LazyVerticalStaggeredGrid&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/#lazyhorizontalstaggeredgrid&#34;&gt;&lt;code&gt;LazyHorizontalStaggeredGrid&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/#column&#34;&gt;&lt;code&gt;Column&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/#row&#34;&gt;&lt;code&gt;Row&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/#accessibility&#34;&gt;Accessibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;LazyColumn&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find more examples in &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo/ui/SimpleReorderableLazyColumnScreen.kt&#34;&gt;&lt;code&gt;SimpleReorderableLazyColumnScreen.kt&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo/ui/SimpleLongPressHandleReorderableLazyColumnScreen.kt&#34;&gt;&lt;code&gt;SimpleLongPressHandleReorderableLazyColumnScreen.kt&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo/ui/ComplexReorderableLazyColumnScreen.kt&#34;&gt;&lt;code&gt;ComplexReorderableLazyColumnScreen.kt&lt;/code&gt;&lt;/a&gt; in the demo app.&lt;/p&gt; &#xA;&lt;h5&gt;Simple Example&lt;/h5&gt; &#xA;&lt;p&gt;To use this library with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/package-summary#LazyColumn(androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.LazyListState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyColumn&lt;/code&gt;&lt;/a&gt;, follow this basic structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val lazyListState = rememberLazyListState()&#xA;val reorderableLazyListState = rememberReorderableLazyListState(lazyListState) { from, to -&amp;gt;&#xA;    // Update the list&#xA;}&#xA;&#xA;LazyColumn(state = lazyListState) {&#xA;    items(list, key = { /* item key */ }) {&#xA;        ReorderableItem(reorderableLazyListState, key = /* item key */) { isDragging -&amp;gt;&#xA;            // Item content&#xA;&#xA;            IconButton(&#xA;                modifier = Modifier.draggableHandle(),&#xA;                /* ... */&#xA;            )&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Complete Example (with haptic feedback)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyListState = rememberLazyListState()&#xA;val reorderableLazyListState = rememberReorderableLazyListState(lazyListState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        add(to.index, removeAt(from.index))&#xA;    }&#xA;&#xA;    hapticFeedback.performHapticFeedback(HapticFeedbackType.SegmentFrequentTick)&#xA;}&#xA;&#xA;LazyColumn(&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    state = lazyListState,&#xA;    contentPadding = PaddingValues(8.dp),&#xA;    verticalArrangement = Arrangement.spacedBy(8.dp),&#xA;) {&#xA;    items(list, key = { it }) {&#xA;        ReorderableItem(reorderableLazyListState, key = it) { isDragging -&amp;gt;&#xA;            val elevation by animateDpAsState(if (isDragging) 4.dp else 0.dp)&#xA;&#xA;            Surface(shadowElevation = elevation) {&#xA;                Row {&#xA;                    Text(it, Modifier.padding(horizontal = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureThresholdActivate)&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureEnd)&#xA;                            },&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Section Headers and Footers or Multiple Lists&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;from.index&lt;/code&gt; and &lt;code&gt;to.index&lt;/code&gt; in &lt;code&gt;onMove&lt;/code&gt; are the indices of the items in the &lt;code&gt;LazyColumn&lt;/code&gt;. If you have section headers or footers, you may need to adjust the indices accordingly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyListState = rememberLazyListState()&#xA;val reorderableLazyColumnState = rememberReorderableLazyListState(lazyListState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        add(to.index - 1, removeAt(from.index - 1))&#xA;    }&#xA;}&#xA;&#xA;LazyColumn(&#xA;    state = lazyListState,&#xA;    // ...&#xA;) {&#xA;    item {&#xA;        Text(&#34;Header&#34;)&#xA;    }&#xA;&#xA;    items(list, key = { item -&amp;gt; item.id }) { item -&amp;gt;&#xA;        ReorderableItem(reorderableLazyColumnState, item.id) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Passing &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; to a Child Composable&lt;/h5&gt; &#xA;&lt;p&gt;Since &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; and &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt; can only be used in &lt;code&gt;ReorderableCollectionItemScope&lt;/code&gt;, you may need to pass &lt;code&gt;ReorderableCollectionItemScope&lt;/code&gt; to a child composable. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun List() {&#xA;    // ...&#xA;&#xA;    LazyColumn(state = lazyListState) {&#xA;        items(list, key = { /* item key */ }) {&#xA;            ReorderableItem(reorderableLazyListState, key = /* item key */) { isDragging -&amp;gt;&#xA;                // Item content&#xA;&#xA;                DragHandle(this)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;@Composable&#xA;fun DragHandle(scope: ReorderableCollectionItemScope) {&#xA;    IconButton(&#xA;        modifier = with(scope) {&#xA;            Modifier.draggableHandle()&#xA;        },&#xA;        /* ... */&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Scroll Trigger Padding&lt;/h5&gt; &#xA;&lt;p&gt;If your &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/package-summary#LazyColumn(androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.LazyListState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyColumn&lt;/code&gt;&lt;/a&gt; displays under navigation bar or notification bar, you may want to add &lt;code&gt;scrollThresholdPadding&lt;/code&gt; to &lt;code&gt;rememberReorderableLazyListState&lt;/code&gt; to move the scroll trigger area out from under the navigation bar or notification bar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val reorderableLazyListState = rememberReorderableLazyListState(&#xA;    lazyListState = lazyListState,&#xA;    scrollThresholdPadding = WindowInsets.systemBars.asPaddingValues(),&#xA;) { from, to -&amp;gt;&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If you want to use the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;material3&#39;s Clickable Card&lt;/a&gt;, you can create a &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; and pass it to both the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; (or &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt;), &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; will emit drag events to the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; so that the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; can respond to the drag events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyListState = rememberLazyListState()&#xA;val reorderableLazyListState = rememberReorderableLazyListState(lazyListState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        add(to.index, removeAt(from.index))&#xA;    }&#xA;&#xA;    hapticFeedback.performHapticFeedback(HapticFeedbackType.SegmentFrequentTick)&#xA;}&#xA;&#xA;LazyColumn(&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    state = lazyListState,&#xA;    contentPadding = PaddingValues(8.dp),&#xA;    verticalArrangement = Arrangement.spacedBy(8.dp),&#xA;) {&#xA;    items(list, key = { it }) { item -&amp;gt;&#xA;        ReorderableItem(reorderableLazyListState, key = item) {&#xA;            val interactionSource = remember { MutableInteractionSource() }&#xA;&#xA;            Card(&#xA;                onClick = {},&#xA;                interactionSource = interactionSource,&#xA;            ) {&#xA;                Row {&#xA;                    Text(item, Modifier.padding(horizontal = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureThresholdActivate)&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureEnd)&#xA;                            },&#xA;                            interactionSource = interactionSource,&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;LazyRow&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo/ui/SimpleReorderableLazyRowScreen.kt&#34;&gt;&lt;code&gt;SimpleReorderableLazyRowScreen.kt&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo/ui/ComplexReorderableLazyRowScreen.kt&#34;&gt;&lt;code&gt;ComplexReorderableLazyRowScreen.kt&lt;/code&gt;&lt;/a&gt; in the demo app.&lt;/p&gt; &#xA;&lt;h5&gt;Simple Example&lt;/h5&gt; &#xA;&lt;p&gt;To use this library with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/package-summary#LazyRow(androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.LazyListState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.ui.Alignment.Vertical,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyRow&lt;/code&gt;&lt;/a&gt;, follow this basic structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val lazyListState = rememberLazyListState()&#xA;val reorderableLazyListState = rememberReorderableLazyListState(lazyListState) { from, to -&amp;gt;&#xA;    // Update the list&#xA;}&#xA;&#xA;LazyRow(state = lazyListState) {&#xA;    items(list, key = { /* item key */ }) {&#xA;        ReorderableItem(reorderableLazyListState, key = /* item key */) { isDragging -&amp;gt;&#xA;            // Item content&#xA;&#xA;            IconButton(&#xA;                modifier = Modifier.draggableHandle(),&#xA;                /* ... */&#xA;            )&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Complete Example (with haptic feedback)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyListState = rememberLazyListState()&#xA;val reorderableLazyListState = rememberReorderableLazyListState(lazyListState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        add(to.index, removeAt(from.index))&#xA;    }&#xA;&#xA;    hapticFeedback.performHapticFeedback(HapticFeedbackType.SegmentFrequentTick)&#xA;}&#xA;&#xA;LazyRow(&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    state = lazyListState,&#xA;    contentPadding = PaddingValues(8.dp),&#xA;    horizontalArrangement = Arrangement.spacedBy(8.dp),&#xA;) {&#xA;    items(list, key = { it }) {&#xA;        ReorderableItem(reorderableLazyListState, key = it) { isDragging -&amp;gt;&#xA;            val elevation by animateDpAsState(if (isDragging) 4.dp else 0.dp)&#xA;&#xA;            Surface(shadowElevation = elevation) {&#xA;                Column {&#xA;                    Text(it, Modifier.padding(vertical = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureThresholdActivate)&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureEnd)&#xA;                            },&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Section Headers and Footers or Multiple Lists&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;from.index&lt;/code&gt; and &lt;code&gt;to.index&lt;/code&gt; in &lt;code&gt;onMove&lt;/code&gt; are the indices of the items in the &lt;code&gt;LazyRow&lt;/code&gt;. If you have section headers or footers, you may need to adjust the indices accordingly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyListState = rememberLazyListState()&#xA;val reorderableLazyRowState = rememberReorderableLazyListState(lazyListState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        add(to.index - 1, removeAt(from.index - 1))&#xA;    }&#xA;}&#xA;&#xA;LazyRow(&#xA;    state = lazyListState,&#xA;    // ...&#xA;) {&#xA;    item {&#xA;        Text(&#34;Header&#34;)&#xA;    }&#xA;&#xA;    items(list, key = { item -&amp;gt; item.id }) { item -&amp;gt;&#xA;        ReorderableItem(reorderableLazyRowState, item.id) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Passing &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; to a Child Composable&lt;/h5&gt; &#xA;&lt;p&gt;Since &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; and &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt; can only be used in &lt;code&gt;ReorderableCollectionItemScope&lt;/code&gt;, you may need to pass &lt;code&gt;ReorderableCollectionItemScope&lt;/code&gt; to a child composable. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun List() {&#xA;    // ...&#xA;&#xA;    LazyRow(state = lazyListState) {&#xA;        items(list, key = { /* item key */ }) {&#xA;            ReorderableItem(reorderableLazyListState, key = /* item key */) { isDragging -&amp;gt;&#xA;                // Item content&#xA;&#xA;                DragHandle(this)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;@Composable&#xA;fun DragHandle(scope: ReorderableCollectionItemScope) {&#xA;    IconButton(&#xA;        modifier = with(scope) {&#xA;            Modifier.draggableHandle()&#xA;        },&#xA;        /* ... */&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Scroll Trigger Padding&lt;/h5&gt; &#xA;&lt;p&gt;If your &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/package-summary#LazyRow(androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.LazyListState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.ui.Alignment.Vertical,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyRow&lt;/code&gt;&lt;/a&gt; displays under navigation bar or notification bar, you may want to add &lt;code&gt;scrollThresholdPadding&lt;/code&gt; to &lt;code&gt;rememberReorderableLazyListState&lt;/code&gt; to move the scroll trigger area out from under the navigation bar or notification bar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val reorderableLazyListState = rememberReorderableLazyListState(&#xA;    lazyListState = lazyListState,&#xA;    scrollThresholdPadding = WindowInsets.systemBars.asPaddingValues(),&#xA;) { from, to -&amp;gt;&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If you want to use the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;material3&#39;s Clickable Card&lt;/a&gt;, you can create a &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; and pass it to both the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; (or &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt;), &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; will emit drag events to the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; so that the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; can respond to the drag events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyListState = rememberLazyListState()&#xA;val reorderableLazyListState = rememberReorderableLazyListState(lazyListState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        add(to.index, removeAt(from.index))&#xA;    }&#xA;&#xA;    hapticFeedback.performHapticFeedback(HapticFeedbackType.SegmentFrequentTick)&#xA;}&#xA;&#xA;LazyRow(&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    state = lazyListState,&#xA;    contentPadding = PaddingValues(8.dp),&#xA;    horizontalArrangement = Arrangement.spacedBy(8.dp),&#xA;) {&#xA;    items(list, key = { it }) { item -&amp;gt;&#xA;        ReorderableItem(reorderableLazyListState, key = item) {&#xA;            val interactionSource = remember { MutableInteractionSource() }&#xA;&#xA;            Card(&#xA;                onClick = {},&#xA;                interactionSource = interactionSource,&#xA;            ) {&#xA;                Column {&#xA;                    Text(item, Modifier.padding(vertical = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureThresholdActivate)&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureEnd)&#xA;                            },&#xA;                            interactionSource = interactionSource,&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;LazyVerticalGrid&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find more examples in &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo/ui/SimpleReorderableLazyVerticalGridScreen.kt&#34;&gt;&lt;code&gt;SimpleReorderableLazyVerticalGridScreen.kt&lt;/code&gt;&lt;/a&gt; in the demo app.&lt;/p&gt; &#xA;&lt;h5&gt;Simple Example&lt;/h5&gt; &#xA;&lt;p&gt;To use this library with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/grid/package-summary#LazyVerticalGrid(androidx.compose.foundation.lazy.grid.GridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.grid.LazyGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyVerticalGrid&lt;/code&gt;&lt;/a&gt;, follow this basic structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val lazyGridState = rememberLazyGridState()&#xA;val reorderableLazyGridState = rememberReorderableLazyGridState(lazyGridState) { from, to -&amp;gt;&#xA;    // Update the list&#xA;}&#xA;&#xA;LazyVerticalGrid(state = lazyGridState) {&#xA;    items(list, key = { /* item key */ }) {&#xA;        ReorderableItem(reorderableLazyGridState, key = /* item key */) { isDragging -&amp;gt;&#xA;            // Item content&#xA;&#xA;            IconButton(&#xA;                modifier = Modifier.draggableHandle(),&#xA;                /* ... */&#xA;            )&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Complete Example (with haptic feedback)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyGridState = rememberLazyGridState()&#xA;val reorderableLazyGridState = rememberReorderableLazyGridState(lazyGridState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        this[to.index] = this[from.index].also {&#xA;            this[from.index] = this[to.index]&#xA;        }&#xA;    }&#xA;&#xA;    hapticFeedback.performHapticFeedback(HapticFeedbackType.SegmentFrequentTick)&#xA;}&#xA;&#xA;LazyVerticalGrid(&#xA;    columns = GridCells.Adaptive(minSize = 96.dp),&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    state = lazyGridState,&#xA;    contentPadding = PaddingValues(8.dp),&#xA;    verticalArrangement = Arrangement.spacedBy(8.dp),&#xA;    horizontalArrangement = Arrangement.spacedBy(8.dp),&#xA;) {&#xA;    items(list, key = { it }) {&#xA;        ReorderableItem(reorderableLazyGridState, key = it) { isDragging -&amp;gt;&#xA;            val elevation by animateDpAsState(if (isDragging) 4.dp else 0.dp)&#xA;&#xA;            Surface(shadowElevation = elevation) {&#xA;                Row {&#xA;                    Text(it, Modifier.padding(horizontal = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureThresholdActivate)&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureEnd)&#xA;                            },&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Section Headers and Footers or Multiple Lists&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;from.index&lt;/code&gt; and &lt;code&gt;to.index&lt;/code&gt; in &lt;code&gt;onMove&lt;/code&gt; are the indices of the items in the &lt;code&gt;LazyVerticalGrid&lt;/code&gt;. If you have section headers or footers, you may need to adjust the indices accordingly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyGridState = rememberLazyGridState()&#xA;val reorderableLazyGridState = rememberReorderableLazyGridState(lazyGridState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        add(to.index - 1, removeAt(from.index - 1))&#xA;    }&#xA;}&#xA;&#xA;LazyVerticalGrid(&#xA;    state = lazyGridState,&#xA;    // ...&#xA;) {&#xA;    item {&#xA;        Text(&#34;Header&#34;)&#xA;    }&#xA;&#xA;    items(list, key = { item -&amp;gt; item.id }) { item -&amp;gt;&#xA;        ReorderableItem(reorderableLazyGridState, item.id) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Passing &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; to a Child Composable&lt;/h5&gt; &#xA;&lt;p&gt;Since &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; and &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt; can only be used in &lt;code&gt;ReorderableCollectionItemScope&lt;/code&gt;, you may need to pass &lt;code&gt;ReorderableCollectionItemScope&lt;/code&gt; to a child composable. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun Grid() {&#xA;    // ...&#xA;&#xA;    LazyVerticalGrid(state = lazyGridState) {&#xA;        items(Grid, key = { /* item key */ }) {&#xA;            ReorderableItem(reorderableLazyGridState, key = /* item key */) { isDragging -&amp;gt;&#xA;                // Item content&#xA;&#xA;                DragHandle(this)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;@Composable&#xA;fun DragHandle(scope: ReorderableCollectionItemScope) {&#xA;    IconButton(&#xA;        modifier = with(scope) {&#xA;            Modifier.draggableHandle()&#xA;        },&#xA;        /* ... */&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Scroll Trigger Padding&lt;/h5&gt; &#xA;&lt;p&gt;If your &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/grid/package-summary#LazyVerticalGrid(androidx.compose.foundation.lazy.grid.GridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.grid.LazyGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyVerticalGrid&lt;/code&gt;&lt;/a&gt; displays under navigation bar or notification bar, you may want to add &lt;code&gt;scrollThresholdPadding&lt;/code&gt; to &lt;code&gt;rememberReorderableLazyGridState&lt;/code&gt; to move the scroll trigger area out from under the navigation bar or notification bar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val reorderableLazyGridState = rememberReorderableLazyGridState(&#xA;    lazyGridState = lazyGridState,&#xA;    scrollThresholdPadding = WindowInsets.systemBars.asPaddingValues(),&#xA;) { from, to -&amp;gt;&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If you want to use the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;material3&#39;s Clickable Card&lt;/a&gt;, you can create a &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; and pass it to both the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; (or &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt;), &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; will emit drag events to the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; so that the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; can respond to the drag events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyGridState = rememberLazyGridState()&#xA;val reorderableLazyGridState = rememberReorderableLazyGridState(lazyGridState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        this[to.index] = this[from.index].also {&#xA;            this[from.index] = this[to.index]&#xA;        }&#xA;    }&#xA;&#xA;    hapticFeedback.performHapticFeedback(HapticFeedbackType.SegmentFrequentTick)&#xA;}&#xA;&#xA;LazyVerticalGrid(&#xA;    columns = GridCells.Adaptive(minSize = 96.dp),&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    state = lazyGridState,&#xA;    contentPadding = PaddingValues(8.dp),&#xA;    verticalArrangement = Arrangement.spacedBy(8.dp),&#xA;    horizontalArrangement = Arrangement.spacedBy(8.dp),&#xA;) {&#xA;    items(list, key = { it }) { item -&amp;gt;&#xA;        ReorderableItem(reorderableLazyGridState, key = item) {&#xA;            val interactionSource = remember { MutableInteractionSource() }&#xA;&#xA;            Card(&#xA;                onClick = {},&#xA;                interactionSource = interactionSource,&#xA;            ) {&#xA;                Row {&#xA;                    Text(item, Modifier.padding(horizontal = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureThresholdActivate)&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureEnd)&#xA;                            },&#xA;                            interactionSource = interactionSource,&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;LazyHorizontalGrid&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find more examples in &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo/ui/SimpleReorderableLazyHorizontalGridScreen.kt&#34;&gt;&lt;code&gt;SimpleReorderableLazyHorizontalGridScreen.kt&lt;/code&gt;&lt;/a&gt; in the demo app.&lt;/p&gt; &#xA;&lt;h5&gt;Simple Example&lt;/h5&gt; &#xA;&lt;p&gt;To use this library with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/grid/package-summary#LazyHorizontalGrid(androidx.compose.foundation.lazy.grid.GridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.grid.LazyStaggeredGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyHorizontalGrid&lt;/code&gt;&lt;/a&gt;, follow this basic structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val lazyGridState = rememberLazyGridState()&#xA;val reorderableLazyGridState = rememberReorderableLazyGridState(lazyGridState) { from, to -&amp;gt;&#xA;    // Update the list&#xA;}&#xA;&#xA;LazyHorizontalGrid(state = lazyGridState) {&#xA;    items(list, key = { /* item key */ }) {&#xA;        ReorderableItem(reorderableLazyGridState, key = /* item key */) { isDragging -&amp;gt;&#xA;            // Item content&#xA;&#xA;            IconButton(&#xA;                modifier = Modifier.draggableHandle(),&#xA;                /* ... */&#xA;            )&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Complete Example (with haptic feedback)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyGridState = rememberLazyGridState()&#xA;val reorderableLazyGridState = rememberReorderableLazyGridState(lazyGridState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        this[to.index] = this[from.index].also {&#xA;            this[from.index] = this[to.index]&#xA;        }&#xA;    }&#xA;&#xA;    hapticFeedback.performHapticFeedback(HapticFeedbackType.SegmentFrequentTick)&#xA;}&#xA;&#xA;LazyHorizontalGrid(&#xA;    rows = GridCells.Adaptive(minSize = 96.dp),&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    state = lazyGridState,&#xA;    contentPadding = PaddingValues(8.dp),&#xA;    verticalArrangement = Arrangement.spacedBy(8.dp),&#xA;    horizontalArrangement = Arrangement.spacedBy(8.dp),&#xA;) {&#xA;    items(list, key = { it }) {&#xA;        ReorderableItem(reorderableLazyGridState, key = it) { isDragging -&amp;gt;&#xA;            val elevation by animateDpAsState(if (isDragging) 4.dp else 0.dp)&#xA;&#xA;            Surface(shadowElevation = elevation) {&#xA;                Row {&#xA;                    Text(it, Modifier.padding(horizontal = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureThresholdActivate)&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureEnd)&#xA;                            },&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Section Headers and Footers or Multiple Lists&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;from.index&lt;/code&gt; and &lt;code&gt;to.index&lt;/code&gt; in &lt;code&gt;onMove&lt;/code&gt; are the indices of the items in the &lt;code&gt;LazyHorizontalGrid&lt;/code&gt;. If you have section headers or footers, you may need to adjust the indices accordingly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyGridState = rememberLazyGridState()&#xA;val reorderableLazyGridState = rememberReorderableLazyGridState(lazyGridState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        add(to.index - 1, removeAt(from.index - 1))&#xA;    }&#xA;}&#xA;&#xA;LazyHorizontalGrid(&#xA;    state = lazyGridState,&#xA;    // ...&#xA;) {&#xA;    item {&#xA;        Text(&#34;Header&#34;)&#xA;    }&#xA;&#xA;    items(list, key = { item -&amp;gt; item.id }) { item -&amp;gt;&#xA;        ReorderableItem(reorderableLazyGridState, item.id) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Passing &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; to a Child Composable&lt;/h5&gt; &#xA;&lt;p&gt;Since &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; and &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt; can only be used in &lt;code&gt;ReorderableCollectionItemScope&lt;/code&gt;, you may need to pass &lt;code&gt;ReorderableCollectionItemScope&lt;/code&gt; to a child composable. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun Grid() {&#xA;    // ...&#xA;&#xA;    LazyHorizontalGrid(state = lazyGridState) {&#xA;        items(Grid, key = { /* item key */ }) {&#xA;            ReorderableItem(reorderableLazyGridState, key = /* item key */) { isDragging -&amp;gt;&#xA;                // Item content&#xA;&#xA;                DragHandle(this)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;@Composable&#xA;fun DragHandle(scope: ReorderableCollectionItemScope) {&#xA;    IconButton(&#xA;        modifier = with(scope) {&#xA;            Modifier.draggableHandle()&#xA;        },&#xA;        /* ... */&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Scroll Trigger Padding&lt;/h5&gt; &#xA;&lt;p&gt;If your &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/grid/package-summary#LazyHorizontalGrid(androidx.compose.foundation.lazy.grid.GridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.grid.LazyStaggeredGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyHorizontalGrid&lt;/code&gt;&lt;/a&gt; displays under navigation bar or notification bar, you may want to add &lt;code&gt;scrollThresholdPadding&lt;/code&gt; to &lt;code&gt;rememberReorderableLazyGridState&lt;/code&gt; to move the scroll trigger area out from under the navigation bar or notification bar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val reorderableLazyGridState = rememberReorderableLazyGridState(&#xA;    lazyGridState = lazyGridState,&#xA;    scrollThresholdPadding = WindowInsets.systemBars.asPaddingValues(),&#xA;) { from, to -&amp;gt;&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If you want to use the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;material3&#39;s Clickable Card&lt;/a&gt;, you can create a &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; and pass it to both the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; (or &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt;), &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; will emit drag events to the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; so that the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; can respond to the drag events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyGridState = rememberLazyGridState()&#xA;val reorderableLazyGridState = rememberReorderableLazyGridState(lazyGridState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        this[to.index] = this[from.index].also {&#xA;            this[from.index] = this[to.index]&#xA;        }&#xA;    }&#xA;&#xA;    hapticFeedback.performHapticFeedback(HapticFeedbackType.SegmentFrequentTick)&#xA;}&#xA;&#xA;LazyHorizontalGrid(&#xA;    rows = GridCells.Adaptive(minSize = 96.dp),&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    state = lazyGridState,&#xA;    contentPadding = PaddingValues(8.dp),&#xA;    verticalArrangement = Arrangement.spacedBy(8.dp),&#xA;    horizontalArrangement = Arrangement.spacedBy(8.dp),&#xA;) {&#xA;    items(list, key = { it }) { item -&amp;gt;&#xA;        ReorderableItem(reorderableLazyGridState, key = item) {&#xA;            val interactionSource = remember { MutableInteractionSource() }&#xA;&#xA;            Card(&#xA;                onClick = {},&#xA;                interactionSource = interactionSource,&#xA;            ) {&#xA;                Row {&#xA;                    Text(item, Modifier.padding(horizontal = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureThresholdActivate)&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureEnd)&#xA;                            },&#xA;                            interactionSource = interactionSource,&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;LazyVerticalStaggeredGrid&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find more examples in &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo/ui/SimpleReorderableLazyVerticalStaggeredGridScreen.kt&#34;&gt;&lt;code&gt;SimpleReorderableLazyVerticalStaggeredGridScreen.kt&lt;/code&gt;&lt;/a&gt; in the demo app.&lt;/p&gt; &#xA;&lt;h5&gt;Simple Example&lt;/h5&gt; &#xA;&lt;p&gt;To use this library with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/staggeredgrid/package-summary#LazyVerticalStaggeredGrid(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.ui.unit.Dp,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyVerticalStaggeredGrid&lt;/code&gt;&lt;/a&gt;, follow this basic structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val lazyStaggeredGridState = rememberLazyStaggeredGridState()&#xA;val reorderableLazyStaggeredGridState = rememberReorderableLazyStaggeredGridState(lazyStaggeredGridState) { from, to -&amp;gt;&#xA;    // Update the list&#xA;}&#xA;&#xA;LazyVerticalStaggeredGrid(state = lazyStaggeredGridState) {&#xA;    items(list, key = { /* item key */ }) {&#xA;        ReorderableItem(reorderableLazyStaggeredGridState, key = /* item key */) { isDragging -&amp;gt;&#xA;            // Item content&#xA;&#xA;            IconButton(&#xA;                modifier = Modifier.draggableHandle(),&#xA;                /* ... */&#xA;            )&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Complete Example (with haptic feedback)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyStaggeredGridState = rememberLazyStaggeredGridState()&#xA;val reorderableLazyStaggeredGridState = rememberReorderableLazyStaggeredGridState(lazyStaggeredGridState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        this[to.index] = this[from.index].also {&#xA;            this[from.index] = this[to.index]&#xA;        }&#xA;    }&#xA;&#xA;    hapticFeedback.performHapticFeedback(HapticFeedbackType.SegmentFrequentTick)&#xA;}&#xA;&#xA;LazyVerticalStaggeredGrid(&#xA;    columns = StaggeredGridCells.Adaptive(minSize = 96.dp),&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    state = lazyStaggeredGridState,&#xA;    contentPadding = PaddingValues(8.dp),&#xA;    verticalItemSpacing = 8.dp,&#xA;    horizontalArrangement = Arrangement.spacedBy(8.dp),&#xA;) {&#xA;    items(list, key = { it }) {&#xA;        ReorderableItem(reorderableLazyStaggeredGridState, key = it) { isDragging -&amp;gt;&#xA;            val elevation by animateDpAsState(if (isDragging) 4.dp else 0.dp)&#xA;&#xA;            Surface(shadowElevation = elevation) {&#xA;                Row {&#xA;                    Text(it, Modifier.padding(horizontal = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureThresholdActivate)&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureEnd)&#xA;                            },&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Section Headers and Footers or Multiple Lists&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;from.index&lt;/code&gt; and &lt;code&gt;to.index&lt;/code&gt; in &lt;code&gt;onMove&lt;/code&gt; are the indices of the items in the &lt;code&gt;LazyVerticalStaggeredGrid&lt;/code&gt;. If you have section headers or footers, you may need to adjust the indices accordingly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyStaggeredGridState = rememberLazyStaggeredGridState()&#xA;val reorderableLazyStaggeredGridState = rememberReorderableLazyStaggeredGridState(lazyStaggeredGridState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        add(to.index - 1, removeAt(from.index - 1))&#xA;    }&#xA;}&#xA;&#xA;LazyVerticalStaggeredGrid(&#xA;    state = lazyStaggeredGridState,&#xA;    // ...&#xA;) {&#xA;    item {&#xA;        Text(&#34;Header&#34;)&#xA;    }&#xA;&#xA;    items(list, key = { item -&amp;gt; item.id }) { item -&amp;gt;&#xA;        ReorderableItem(reorderableLazyStaggeredGridState, item.id) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Passing &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; to a Child Composable&lt;/h5&gt; &#xA;&lt;p&gt;Since &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; and &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt; can only be used in &lt;code&gt;ReorderableCollectionItemScope&lt;/code&gt;, you may need to pass &lt;code&gt;ReorderableCollectionItemScope&lt;/code&gt; to a child composable. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun Grid() {&#xA;    // ...&#xA;&#xA;    LazyVerticalStaggeredGrid(state = lazyStaggeredGridState) {&#xA;        items(list, key = { /* item key */ }) {&#xA;            ReorderableItem(reorderableLazyStaggeredGridState, key = /* item key */) { isDragging -&amp;gt;&#xA;                // Item content&#xA;&#xA;                DragHandle(this)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;@Composable&#xA;fun DragHandle(scope: ReorderableCollectionItemScope) {&#xA;    IconButton(&#xA;        modifier = with(scope) {&#xA;            Modifier.draggableHandle()&#xA;        },&#xA;        /* ... */&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Scroll Trigger Padding&lt;/h5&gt; &#xA;&lt;p&gt;If your &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/staggeredgrid/package-summary#LazyVerticalStaggeredGrid(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.ui.unit.Dp,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyVerticalStaggeredGrid&lt;/code&gt;&lt;/a&gt; displays under navigation bar or notification bar, you may want to add &lt;code&gt;scrollThresholdPadding&lt;/code&gt; to &lt;code&gt;rememberReorderableLazyStaggeredGridState&lt;/code&gt; to move the scroll trigger area out from under the navigation bar or notification bar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val reorderableLazyStaggeredGridState = rememberReorderableLazyStaggeredGridState(&#xA;    lazyStaggeredGridState = lazyStaggeredGridState,&#xA;    scrollThresholdPadding = WindowInsets.systemBars.asPaddingValues(),&#xA;) { from, to -&amp;gt;&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If you want to use the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;material3&#39;s Clickable Card&lt;/a&gt;, you can create a &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; and pass it to both the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; (or &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt;), &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; will emit drag events to the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; so that the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; can respond to the drag events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyStaggeredGridState = rememberLazyStaggeredGridState()&#xA;val reorderableLazyStaggeredGridState = rememberReorderableLazyStaggeredGridState(lazyStaggeredGridState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        this[to.index] = this[from.index].also {&#xA;            this[from.index] = this[to.index]&#xA;        }&#xA;    }&#xA;&#xA;    hapticFeedback.performHapticFeedback(HapticFeedbackType.SegmentFrequentTick)&#xA;}&#xA;&#xA;LazyVerticalStaggeredGrid(&#xA;    columns = StaggeredGridCells.Adaptive(minSize = 96.dp),&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    state = lazyStaggeredGridState,&#xA;    contentPadding = PaddingValues(8.dp),&#xA;    verticalItemSpacing = 8.dp,&#xA;    horizontalArrangement = Arrangement.spacedBy(8.dp),&#xA;) {&#xA;    items(list, key = { it }) { item -&amp;gt;&#xA;        ReorderableItem(reorderableLazyStaggeredGridState, key = item) {&#xA;            val interactionSource = remember { MutableInteractionSource() }&#xA;&#xA;            Card(&#xA;                onClick = {},&#xA;                interactionSource = interactionSource,&#xA;            ) {&#xA;                Row {&#xA;                    Text(item, Modifier.padding(horizontal = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureThresholdActivate)&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureEnd)&#xA;                            },&#xA;                            interactionSource = interactionSource,&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;LazyHorizontalStaggeredGrid&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find more examples in &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo/ui/SimpleReorderableLazyHorizontalStaggeredGridScreen.kt&#34;&gt;&lt;code&gt;SimpleReorderableLazyHorizontalStaggeredGridScreen.kt&lt;/code&gt;&lt;/a&gt; in the demo app.&lt;/p&gt; &#xA;&lt;h5&gt;Simple Example&lt;/h5&gt; &#xA;&lt;p&gt;To use this library with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/staggeredgrid/package-summary#LazyHorizontalStaggeredGrid(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.unit.Dp,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyHorizontalStaggeredGrid&lt;/code&gt;&lt;/a&gt;, follow this basic structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val lazyStaggeredGridState = rememberLazyStaggeredGridState()&#xA;val reorderableLazyStaggeredGridState = rememberReorderableLazyStaggeredGridState(lazyStaggeredGridState) { from, to -&amp;gt;&#xA;    // Update the list&#xA;}&#xA;&#xA;LazyHorizontalStaggeredGrid(state = lazyStaggeredGridState) {&#xA;    items(list, key = { /* item key */ }) {&#xA;        ReorderableItem(reorderableLazyStaggeredGridState, key = /* item key */) { isDragging -&amp;gt;&#xA;            // Item content&#xA;&#xA;            IconButton(&#xA;                modifier = Modifier.draggableHandle(),&#xA;                /* ... */&#xA;            )&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Complete Example (with haptic feedback)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyStaggeredGridState = rememberLazyStaggeredGridState()&#xA;val reorderableLazyStaggeredGridState = rememberReorderableLazyStaggeredGridState(lazyStaggeredGridState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        this[to.index] = this[from.index].also {&#xA;            this[from.index] = this[to.index]&#xA;        }&#xA;    }&#xA;&#xA;    hapticFeedback.performHapticFeedback(HapticFeedbackType.SegmentFrequentTick)&#xA;}&#xA;&#xA;LazyHorizontalStaggeredGrid(&#xA;    rows = StaggeredGridCells.Adaptive(minSize = 96.dp),&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    state = lazyStaggeredGridState,&#xA;    contentPadding = PaddingValues(8.dp),&#xA;    verticalArrangement = Arrangement.spacedBy(8.dp),&#xA;    horizontalItemSpacing = 8.dp,&#xA;) {&#xA;    items(list, key = { it }) {&#xA;        ReorderableItem(reorderableLazyStaggeredGridState, key = it) { isDragging -&amp;gt;&#xA;            val elevation by animateDpAsState(if (isDragging) 4.dp else 0.dp)&#xA;&#xA;            Surface(shadowElevation = elevation) {&#xA;                Row {&#xA;                    Text(it, Modifier.padding(horizontal = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureThresholdActivate)&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureEnd)&#xA;                            },&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Section Headers and Footers or Multiple Lists&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;from.index&lt;/code&gt; and &lt;code&gt;to.index&lt;/code&gt; in &lt;code&gt;onMove&lt;/code&gt; are the indices of the items in the &lt;code&gt;LazyHorizontalStaggeredGrid&lt;/code&gt;. If you have section headers or footers, you may need to adjust the indices accordingly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyStaggeredGridState = rememberLazyStaggeredGridState()&#xA;val reorderableLazyStaggeredGridState = rememberReorderableLazyStaggeredGridState(lazyStaggeredGridState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        add(to.index - 1, removeAt(from.index - 1))&#xA;    }&#xA;}&#xA;&#xA;LazyHorizontalStaggeredGrid(&#xA;    state = lazyStaggeredGridState,&#xA;    // ...&#xA;) {&#xA;    item {&#xA;        Text(&#34;Header&#34;)&#xA;    }&#xA;&#xA;    items(list, key = { item -&amp;gt; item.id }) { item -&amp;gt;&#xA;        ReorderableItem(reorderableLazyStaggeredGridState, item.id) {&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Passing &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; to a Child Composable&lt;/h5&gt; &#xA;&lt;p&gt;Since &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; and &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt; can only be used in &lt;code&gt;ReorderableCollectionItemScope&lt;/code&gt;, you may need to pass &lt;code&gt;ReorderableCollectionItemScope&lt;/code&gt; to a child composable. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun Grid() {&#xA;    // ...&#xA;&#xA;    LazyHorizontalStaggeredGrid(state = lazyStaggeredGridState) {&#xA;        items(list, key = { /* item key */ }) {&#xA;            ReorderableItem(reorderableLazyStaggeredGridState, key = /* item key */) { isDragging -&amp;gt;&#xA;                // Item content&#xA;&#xA;                DragHandle(this)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;@Composable&#xA;fun DragHandle(scope: ReorderableCollectionItemScope) {&#xA;    IconButton(&#xA;        modifier = with(scope) {&#xA;            Modifier.draggableHandle()&#xA;        },&#xA;        /* ... */&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Scroll Trigger Padding&lt;/h5&gt; &#xA;&lt;p&gt;If your &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/staggeredgrid/package-summary#LazyHorizontalStaggeredGrid(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.unit.Dp,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyHorizontalStaggeredGrid&lt;/code&gt;&lt;/a&gt; displays under navigation bar or notification bar, you may want to add &lt;code&gt;scrollThresholdPadding&lt;/code&gt; to &lt;code&gt;rememberReorderableLazyStaggeredGridState&lt;/code&gt; to move the scroll trigger area out from under the navigation bar or notification bar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val reorderableLazyStaggeredGridState = rememberReorderableLazyStaggeredGridState(&#xA;    lazyStaggeredGridState = lazyStaggeredGridState,&#xA;    scrollThresholdPadding = WindowInsets.systemBars.asPaddingValues(),&#xA;) { from, to -&amp;gt;&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If you want to use the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;material3&#39;s Clickable Card&lt;/a&gt;, you can create a &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; and pass it to both the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; (or &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt;), &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; will emit drag events to the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; so that the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; can respond to the drag events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(100) { &#34;Item $it&#34; }) }&#xA;val lazyStaggeredGridState = rememberLazyStaggeredGridState()&#xA;val reorderableLazyStaggeredGridState = rememberReorderableLazyStaggeredGridState(lazyStaggeredGridState) { from, to -&amp;gt;&#xA;    list = list.toMutableList().apply {&#xA;        this[to.index] = this[from.index].also {&#xA;            this[from.index] = this[to.index]&#xA;        }&#xA;    }&#xA;&#xA;    hapticFeedback.performHapticFeedback(HapticFeedbackType.SegmentFrequentTick)&#xA;}&#xA;&#xA;LazyHorizontalStaggeredGrid(&#xA;    rows = StaggeredGridCells.Adaptive(minSize = 96.dp),&#xA;    modifier = Modifier.fillMaxSize(),&#xA;    state = lazyStaggeredGridState,&#xA;    contentPadding = PaddingValues(8.dp),&#xA;    verticalArrangement = Arrangement.spacedBy(8.dp),&#xA;    horizontalItemSpacing = 8.dp,&#xA;) {&#xA;    items(list, key = { it }) { item -&amp;gt;&#xA;        ReorderableItem(reorderableLazyStaggeredGridState, key = item) {&#xA;            val interactionSource = remember { MutableInteractionSource() }&#xA;&#xA;            Card(&#xA;                onClick = {},&#xA;                interactionSource = interactionSource,&#xA;            ) {&#xA;                Row {&#xA;                    Text(item, Modifier.padding(horizontal = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureThresholdActivate)&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                hapticFeedback.performHapticFeedback(HapticFeedbackType.GestureEnd)&#xA;                            },&#xA;                            interactionSource = interactionSource,&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Column&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Find more examples in &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo/ui/ReorderableColumnScreen.kt&#34;&gt;&lt;code&gt;ReorderableColumnScreen.kt&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo/ui/LongPressHandleReorderableColumnScreen.kt&#34;&gt;&lt;code&gt;LongPressHandleReorderableColumnScreen.kt&lt;/code&gt;&lt;/a&gt; in the demo app.&lt;/p&gt; &#xA;&lt;h5&gt;Simple Example&lt;/h5&gt; &#xA;&lt;p&gt;To use this library with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#Column(androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,kotlin.Function1)&#34;&gt;&lt;code&gt;Column&lt;/code&gt;&lt;/a&gt;, follow this basic structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;ReorderableColumn(&#xA;    list = list,&#xA;    onSettle = { fromIndex, toIndex -&amp;gt;&#xA;        // Update the list&#xA;    },&#xA;) { index, item, isDragging -&amp;gt;&#xA;    key(item.id) {&#xA;        ReorderableItem {&#xA;            // Item content&#xA;&#xA;            IconButton(modifier = Modifier.draggableHandle(), /* ... */)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Complete Example (with haptic feedback)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(4) { &#34;Item $it&#34; }) }&#xA;&#xA;ReorderableColumn(&#xA;    modifier = Modifier&#xA;        .fillMaxSize()&#xA;        .padding(8.dp),&#xA;    list = list,&#xA;    onSettle = { fromIndex, toIndex -&amp;gt;&#xA;        list = list.toMutableList().apply {&#xA;            add(toIndex, removeAt(fromIndex))&#xA;        }&#xA;    },&#xA;    onMove = {&#xA;        ViewCompat.performHapticFeedback(&#xA;            view,&#xA;            HapticFeedbackConstantsCompat.SEGMENT_FREQUENT_TICK&#xA;        )&#xA;    },&#xA;    verticalArrangement = Arrangement.spacedBy(8.dp),&#xA;) { _, item, isDragging -&amp;gt;&#xA;    key(item) {&#xA;        ReorderableItem {&#xA;            val elevation by animateDpAsState(if (isDragging) 4.dp else 0.dp)&#xA;&#xA;            Surface(shadowElevation = elevation) {&#xA;                Row {&#xA;                    Text(item, Modifier.padding(horizontal = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                ViewCompat.performHapticFeedback(&#xA;                                    view,&#xA;                                    HapticFeedbackConstantsCompat.GESTURE_START&#xA;                                )&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                ViewCompat.performHapticFeedback(&#xA;                                    view,&#xA;                                    HapticFeedbackConstantsCompat.GESTURE_END&#xA;                                )&#xA;                            },&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Passing &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; to a Child Composable&lt;/h5&gt; &#xA;&lt;p&gt;Since &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; and &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt; can only be used in &lt;code&gt;ReorderableScope&lt;/code&gt;, you may need to pass &lt;code&gt;ReorderableScope&lt;/code&gt; to a child composable. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun List() {&#xA;    // ...&#xA;&#xA;    ReorderableColumn(&#xA;        list = list,&#xA;        onSettle = { fromIndex, toIndex -&amp;gt;&#xA;            // Update the list&#xA;        },&#xA;    ) { index, item, isDragging -&amp;gt;&#xA;        key(item.id) {&#xA;            ReorderableItem {&#xA;                // Item content&#xA;&#xA;                DragHandle(this)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;@Composable&#xA;fun DragHandle(scope: ReorderableScope) {&#xA;    IconButton(modifier = with(scope) { Modifier.draggableHandle() }, /* ... */)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If you want to use the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;material3&#39;s Clickable Card&lt;/a&gt;, you can create a &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; and pass it to both the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; (or &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt;), &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; will emit drag events to the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; so that the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; can respond to the drag events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(4) { &#34;Item $it&#34; }) }&#xA;&#xA;ReorderableColumn(&#xA;    modifier = Modifier&#xA;        .fillMaxSize()&#xA;        .padding(8.dp),&#xA;    list = list,&#xA;    onSettle = { fromIndex, toIndex -&amp;gt;&#xA;        list = list.toMutableList().apply {&#xA;            add(toIndex, removeAt(fromIndex))&#xA;        }&#xA;    },&#xA;    onMove = {&#xA;        ViewCompat.performHapticFeedback(&#xA;            view,&#xA;            HapticFeedbackConstantsCompat.SEGMENT_FREQUENT_TICK&#xA;        )&#xA;    },&#xA;    verticalArrangement = Arrangement.spacedBy(8.dp),&#xA;) { _, item, _ -&amp;gt;&#xA;    key(item) {&#xA;        ReorderableItem {&#xA;            val interactionSource = remember { MutableInteractionSource() }&#xA;&#xA;            Card(&#xA;                onClick = {},&#xA;                interactionSource = interactionSource,&#xA;            ) {&#xA;                Row {&#xA;                    Text(item, Modifier.padding(horizontal = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                ViewCompat.performHapticFeedback(&#xA;                                    view,&#xA;                                    HapticFeedbackConstantsCompat.GESTURE_START&#xA;                                )&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                ViewCompat.performHapticFeedback(&#xA;                                    view,&#xA;                                    HapticFeedbackConstantsCompat.GESTURE_END&#xA;                                )&#xA;                            },&#xA;                            interactionSource = interactionSource,&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Row&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/demoApp/composeApp/src/commonMain/kotlin/sh/calvin/reorderable/demo/ui/ReorderableRowScreen.kt&#34;&gt;&lt;code&gt;ReorderableRowScreen.kt&lt;/code&gt;&lt;/a&gt; in the demo app.&lt;/p&gt; &#xA;&lt;h5&gt;Simple Example&lt;/h5&gt; &#xA;&lt;p&gt;To use this library with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#Row(androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.ui.Alignment.Vertical,kotlin.Function1)&#34;&gt;&lt;code&gt;Row&lt;/code&gt;&lt;/a&gt;, follow this basic structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;ReorderableRow(&#xA;    list = list,&#xA;    onSettle = { fromIndex, toIndex -&amp;gt;&#xA;        // Update the list&#xA;    },&#xA;) { index, item, isDragging -&amp;gt;&#xA;    key(item.id) {&#xA;        ReorderableItem {&#xA;            // Item content&#xA;&#xA;            IconButton(modifier = Modifier.draggableHandle(), /* ... */)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Complete Example (with haptic feedback)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(4) { &#34;Item $it&#34; }) }&#xA;&#xA;ReorderableRow(&#xA;    modifier = Modifier&#xA;        .fillMaxSize()&#xA;        .padding(8.dp),&#xA;    list = list,&#xA;    onSettle = { fromIndex, toIndex -&amp;gt;&#xA;        list = list.toMutableList().apply {&#xA;            add(toIndex, removeAt(fromIndex))&#xA;        }&#xA;    },&#xA;    onMove = {&#xA;        ViewCompat.performHapticFeedback(&#xA;            view,&#xA;            HapticFeedbackConstantsCompat.SEGMENT_FREQUENT_TICK&#xA;        )&#xA;    },&#xA;    verticalArrangement = Arrangement.spacedBy(8.dp),&#xA;) { _, item, isDragging -&amp;gt;&#xA;    key(item) {&#xA;        ReorderableItem {&#xA;            val elevation by animateDpAsState(if (isDragging) 4.dp else 0.dp)&#xA;&#xA;            Surface(shadowElevation = elevation) {&#xA;                Column {&#xA;                    Text(item, Modifier.padding(vertical = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                ViewCompat.performHapticFeedback(&#xA;                                    view,&#xA;                                    HapticFeedbackConstantsCompat.GESTURE_START&#xA;                                )&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                ViewCompat.performHapticFeedback(&#xA;                                    view,&#xA;                                    HapticFeedbackConstantsCompat.GESTURE_END&#xA;                                )&#xA;                            },&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Passing &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; to a Child Composable&lt;/h5&gt; &#xA;&lt;p&gt;Since &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; and &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt; can only be used in &lt;code&gt;ReorderableScope&lt;/code&gt;, you may need to pass &lt;code&gt;ReorderableScope&lt;/code&gt; to a child composable. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Composable&#xA;fun List() {&#xA;    // ...&#xA;&#xA;    ReorderableRow(&#xA;        list = list,&#xA;        onSettle = { fromIndex, toIndex -&amp;gt;&#xA;            // Update the list&#xA;        },&#xA;    ) { index, item, isDragging -&amp;gt;&#xA;        key(item.id) {&#xA;            ReorderableItem {&#xA;                // Item content&#xA;&#xA;                DragHandle(this)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;@Composable&#xA;fun DragHandle(scope: ReorderableScope) {&#xA;    IconButton(modifier = with(scope) { Modifier.draggableHandle() }, /* ... */)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use with &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If you want to use the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;material3&#39;s Clickable Card&lt;/a&gt;, you can create a &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; and pass it to both the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; (or &lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt;), &lt;code&gt;Modifier.draggableHandle&lt;/code&gt; will emit drag events to the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/interaction/MutableInteractionSource&#34;&gt;&lt;code&gt;MutableInteractionSource&lt;/code&gt;&lt;/a&gt; so that the &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Card(kotlin.Function0,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.ui.graphics.Shape,androidx.compose.material3.CardColors,androidx.compose.material3.CardElevation,androidx.compose.foundation.BorderStroke,androidx.compose.foundation.interaction.MutableInteractionSource,kotlin.Function1)&#34;&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/a&gt; can respond to the drag events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val hapticFeedback = LocalHapticFeedback.current&#xA;&#xA;var list by remember { mutableStateOf(List(4) { &#34;Item $it&#34; }) }&#xA;&#xA;ReorderableRow(&#xA;    modifier = Modifier&#xA;        .fillMaxSize()&#xA;        .padding(8.dp),&#xA;    list = list,&#xA;    onSettle = { fromIndex, toIndex -&amp;gt;&#xA;        list = list.toMutableList().apply {&#xA;            add(toIndex, removeAt(fromIndex))&#xA;        }&#xA;    },&#xA;    onMove = {&#xA;        ViewCompat.performHapticFeedback(&#xA;            view,&#xA;            HapticFeedbackConstantsCompat.SEGMENT_FREQUENT_TICK&#xA;        )&#xA;    },&#xA;    verticalArrangement = Arrangement.spacedBy(8.dp),&#xA;) { _, item, _ -&amp;gt;&#xA;    key(item) {&#xA;        ReorderableItem {&#xA;            val interactionSource = remember { MutableInteractionSource() }&#xA;&#xA;            Card(&#xA;                onClick = {},&#xA;                interactionSource = interactionSource,&#xA;            ) {&#xA;                Column {&#xA;                    Text(item, Modifier.padding(vertical = 8.dp))&#xA;                    IconButton(&#xA;                        modifier = Modifier.draggableHandle(&#xA;                            onDragStarted = {&#xA;                                ViewCompat.performHapticFeedback(&#xA;                                    view,&#xA;                                    HapticFeedbackConstantsCompat.GESTURE_START&#xA;                                )&#xA;                            },&#xA;                            onDragStopped = {&#xA;                                ViewCompat.performHapticFeedback(&#xA;                                    view,&#xA;                                    HapticFeedbackConstantsCompat.GESTURE_END&#xA;                                )&#xA;                            },&#xA;                            interactionSource = interactionSource,&#xA;                        ),&#xA;                        onClick = {},&#xA;                    ) {&#xA;                        Icon(Icons.Rounded.DragHandle, contentDescription = &#34;Reorder&#34;)&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Accessibility&lt;/h4&gt; &#xA;&lt;p&gt;See the demo app for examples of how to make the reorderable list accessible.&lt;/p&gt; &#xA;&lt;p&gt;If the items in the list do not contain any button besides the drag handle, I recommend adding &#34;Move Up&#34;/&#34;Move Down&#34;/&#34;Move Left&#34;/&#34;Move Right&#34; actions to the TalkBack menu in each item via &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/ui/semantics/package-summary#(androidx.compose.ui.semantics.SemanticsPropertyReceiver).customActions()&#34;&gt;&lt;code&gt;SemanticsPropertyReceiver.customActions&lt;/code&gt;&lt;/a&gt; and applying &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/ui/semantics/package-summary#(androidx.compose.ui.Modifier).clearAndSetSemantics(kotlin.Function1)&#34;&gt;&lt;code&gt;Modifier.clearAndSetSemantics&lt;/code&gt;&lt;/a&gt; to the drag handle button to make the drag handle button not focusable for TalkBack. For more information, see &lt;a href=&#34;https://developer.android.com/develop/ui/compose/accessibility/key-steps#custom-actions&#34;&gt;Key steps to improve Compose accessibility&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;FAQ&lt;/h4&gt; &#xA;&lt;h5&gt;When &lt;code&gt;onMove&lt;/code&gt; is called to move items, the dragging item flickers/jumps/flashes.&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br /&gt; This assumes you&#39;re using version 2.0.3 or later of this library.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;onMove&lt;/code&gt; function expects the list to be updated before it returns. If the list is updated after &lt;code&gt;onMove&lt;/code&gt; returns, the dragging item will flicker. To fix this, update the list before returning from &lt;code&gt;onMove&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val reorderableLazyXXXXState = rememberReorderableLazyXXXXState(listState) { from, to -&amp;gt;&#xA;    // do NOT wrap the updateList call in `launch`&#xA;    updateList(from, to)&#xA;}&#xA;&#xA;suspend fun updateList(from: Int, to: Int) {&#xA;    // long update operation&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you can&#39;t keep the list update inside &lt;code&gt;onMove&lt;/code&gt;, you can use a channel to communicate between &lt;code&gt;onMove&lt;/code&gt; and the list update composition. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val listUpdatedChannel = remember { Channel&amp;lt;Unit&amp;gt;() }&#xA;val reorderableLazyXXXXState = rememberReorderableLazyXXXXState(listState) { from, to -&amp;gt;&#xA;    // clear the channel&#xA;    listUpdatedChannel.tryReceive()&#xA;&#xA;    // update the list&#xA;&#xA;    // wait for the list to be updated&#xA;    listUpdatedChannel.receive()&#xA;}&#xA;&#xA;LaunchedEffect(list) {&#xA;    // notify the list is updated&#xA;    listUpdatedChannel.trySend(Unit)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/package-summary#LazyColumn(androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.LazyListState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyColumn&lt;/code&gt;&lt;/a&gt; / &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/package-summary#LazyRow(androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.LazyListState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.ui.Alignment.Vertical,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyRow&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/ReorderableLazyList.kt&#34;&gt;&lt;code&gt;rememberReorderableLazyListState&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/ReorderableLazyList.kt&#34;&gt;&lt;code&gt;ReorderableItem&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/ReorderableLazyCollection.kt&#34;&gt;&lt;code&gt;Modifier.draggableHandle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/ReorderableLazyCollection.kt&#34;&gt;&lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/grid/package-summary#LazyVerticalGrid(androidx.compose.foundation.lazy.grid.GridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.grid.LazyGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyVerticalGrid&lt;/code&gt;&lt;/a&gt; / &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/grid/package-summary#LazyHorizontalGrid(androidx.compose.foundation.lazy.grid.GridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.grid.LazyGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyHorizontalGrid&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/ReorderableLazyGrid.kt&#34;&gt;&lt;code&gt;rememberReorderableLazyGridState&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/ReorderableLazyGrid.kt&#34;&gt;&lt;code&gt;ReorderableItem&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/ReorderableLazyCollection.kt&#34;&gt;&lt;code&gt;Modifier.draggableHandle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/ReorderableLazyCollection.kt&#34;&gt;&lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/staggeredgrid/package-summary#LazyVerticalStaggeredGrid(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.ui.unit.Dp,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyVerticalStaggeredGrid&lt;/code&gt;&lt;/a&gt; / &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/lazy/staggeredgrid/package-summary#LazyHorizontalStaggeredGrid(androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells,androidx.compose.ui.Modifier,androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState,androidx.compose.foundation.layout.PaddingValues,kotlin.Boolean,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.unit.Dp,androidx.compose.foundation.gestures.FlingBehavior,kotlin.Boolean,kotlin.Function1)&#34;&gt;&lt;code&gt;LazyHorizontalStaggeredGrid&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/ReorderableLazyStaggeredGrid.kt&#34;&gt;&lt;code&gt;rememberReorderableLazyStaggeredGridState&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/ReorderableLazyStaggeredGrid.kt&#34;&gt;&lt;code&gt;ReorderableItem&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/ReorderableLazyCollection.kt&#34;&gt;&lt;code&gt;Modifier.draggableHandle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/ReorderableLazyCollection.kt&#34;&gt;&lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#Column(androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,kotlin.Function1)&#34;&gt;&lt;code&gt;Column&lt;/code&gt;&lt;/a&gt; / &lt;a href=&#34;https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#Row(androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.ui.Alignment.Vertical,kotlin.Function1)&#34;&gt;&lt;code&gt;Row&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/demo/ReorderableList.kt&#34;&gt;&lt;code&gt;ReorderableColumn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/demo/ReorderableList.kt&#34;&gt;&lt;code&gt;ReorderableRow&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/demo/ReorderableList.kt&#34;&gt;&lt;code&gt;Modifier.draggableHandle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calvin-LL/Reorderable/main/reorderable/src/commonMain/kotlin/sh/calvin/reorderable/demo/ReorderableList.kt&#34;&gt;&lt;code&gt;Modifier.longPressDraggableHandle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running the demo app&lt;/h2&gt; &#xA;&lt;p&gt;To run the Android demo app, open the project in Android Studio and run the app.&lt;/p&gt; &#xA;&lt;p&gt;To run the iOS demo app, open the iosApp project in Xcode and run the app or add the following Configuration to the Android Studio project, you may need to install the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile&#34;&gt;Kotlin Multiplatform Mobile plugin&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Calvin-LL/Reorderable/assets/8357970/817a17bf-360f-4a0b-9a18-219f9f9eba28&#34; alt=&#34;Screenshot 2024-02-10 at 20 58 54&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run the web demo app, run &lt;code&gt;./gradlew :composeApp:wasmJsBrowserDevelopmentRun&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run the desktop demo app, run &lt;code&gt;./gradlew :demoApp:ComposeApp:run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Open this project with Android Studio Preview.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll want to install the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile&#34;&gt;Kotlin Multiplatform Mobile plugin&lt;/a&gt; in Android Studio before you open this project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2023 Calvin Liang&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;     http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>