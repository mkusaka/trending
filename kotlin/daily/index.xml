<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-12T01:31:47Z</updated>
  <subtitle>Daily Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zacharee/SamloaderKotlin</title>
    <updated>2024-06-12T01:31:47Z</updated>
    <id>tag:github.com,2024-06-12:/zacharee/SamloaderKotlin</id>
    <link href="https://github.com/zacharee/SamloaderKotlin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Notices&lt;/h1&gt; &#xA;&lt;h2&gt;Old Firmware&lt;/h2&gt; &#xA;&lt;p&gt;Samsung may not serve the firmware you request. Early in 2023, Samsung made it so it&#39;s only possible to download the latest firmware in most cases, no matter which you request.&lt;/p&gt; &#xA;&lt;p&gt;If you know a workaround, please follow up on &lt;a href=&#34;https://github.com/zacharee/SamloaderKotlin/issues/10&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;IMEI/Serial Number Requirement&lt;/h2&gt; &#xA;&lt;p&gt;Samsung now requires a matching IMEI or serial number be sent with firmware requests. If you&#39;re downloading firmware for a device on-hand, enter the IMEI or serial from that device.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, you can likely find an IMEI by searching &#34;[MODEL] IMEI&#34; in Google. The CSC doesn&#39;t seem to matter, only the model and variant.&lt;/p&gt; &#xA;&lt;p&gt;The U/U1 variants (US/US Unlocked) are interchangeable. An IMEI for the SM-S918U will work to download firmware for the SM-S918U1, for example.&lt;/p&gt; &#xA;&lt;p&gt;If you know a model and TAC you want added to the database, please &lt;a href=&#34;https://github.com/zacharee/SamloaderKotlin/issues/new?assignees=&amp;amp;labels=&amp;amp;projects=&amp;amp;template=imei-database-request.md&amp;amp;title=&#34;&gt;open an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thank you &lt;a href=&#34;https://github.com/VanVuong41429&#34;&gt;VanVuong41429&lt;/a&gt; for contributing so many TACs!&lt;/p&gt; &#xA;&lt;h1&gt;Bifrost - Samsung Firmware Downloader&lt;/h1&gt; &#xA;&lt;p&gt;This is yet another firmware downloader for Samsung devices, but it has some special features.&lt;/p&gt; &#xA;&lt;p&gt;For one, it&#39;s cross-platform. Bifrost runs on Windows, Linux, macOS, and even Android!&lt;/p&gt; &#xA;&lt;p&gt;Bifrost is also a graphical program, with a shared UI across all supported platforms.&lt;/p&gt; &#xA;&lt;p&gt;Most of the functionality in Bifrost is based on &lt;a href=&#34;https://github.com/nlscc/samloader&#34;&gt;Samloader&lt;/a&gt;. The Python code has been converted to Kotlin and tweaked to take advantage of some of Kotlin&#39;s features.&lt;/p&gt; &#xA;&lt;p&gt;Bifrost uses Jetpack Compose, JetBrains Compose for Desktop, and Kotlin Multiplatform to create a shared codebase for all supported platforms.&lt;/p&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/zacharee/SamloaderKotlin/releases&#34;&gt;Releases&lt;/a&gt; page for the downloads.&lt;/p&gt; &#xA;&lt;h2&gt;Platform Compatibility&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;x86&lt;/th&gt; &#xA;   &lt;th&gt;x86_64&lt;/th&gt; &#xA;   &lt;th&gt;ARMv7&lt;/th&gt; &#xA;   &lt;th&gt;ARM64&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌ (&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/issues/2584&#34;&gt;#2584&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian-Based&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Generic Linux&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Note for Linux&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have at least one of the following font families from each category installed.&lt;/p&gt; &#xA;&lt;h3&gt;Sans Serif&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Noto Sans&lt;/li&gt; &#xA; &lt;li&gt;DejaVu Sans&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Serif&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Noto Serif&lt;/li&gt; &#xA; &lt;li&gt;DejaVu Serif&lt;/li&gt; &#xA; &lt;li&gt;Times New Roman&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Monospace&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Noto Sans Mono&lt;/li&gt; &#xA; &lt;li&gt;DejaVu Sans Mono&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cursive&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comic Sans MS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Changelog&lt;/h1&gt; &#xA;&lt;p&gt;Release notes are available in &lt;a href=&#34;https://raw.githubusercontent.com/zacharee/SamloaderKotlin/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ &amp;amp; Troubleshooting&lt;/h1&gt; &#xA;&lt;h2&gt;Bifrost isn&#39;t downloading watch firmware.&lt;/h2&gt; &#xA;&lt;p&gt;Unfortunately, Samsung doesn&#39;t serve the full firmware files for watches, so Bifrost can&#39;t download them.&lt;/p&gt; &#xA;&lt;h2&gt;Bifrost is returning error 400/401 when downloading&lt;/h2&gt; &#xA;&lt;p&gt;These errors are on Samsung&#39;s end. If you can, try using a different region/CSC.&lt;/p&gt; &#xA;&lt;h2&gt;Bifrost is returning error 403 when checking for updates&lt;/h2&gt; &#xA;&lt;p&gt;These errors are on Samsung&#39;s end. Samsung may no longer be serving firmware for your device or may not have started serving firmware yet. Try a different region/CSC if possible and check to make sure your model number is correct.&lt;/p&gt; &#xA;&lt;h2&gt;Bifrost opens to a blank screen on Windows&lt;/h2&gt; &#xA;&lt;p&gt;On certain GPUs, Jetpack Compose/Skia has trouble rendering. Try running the program as an administrator.&lt;/p&gt; &#xA;&lt;p&gt;If you have switchable graphics, try using a different GPU.&lt;/p&gt; &#xA;&lt;h2&gt;Download speeds are slow&lt;/h2&gt; &#xA;&lt;p&gt;Samsung&#39;s servers sometimes throttle downloads to about 3MiB/s. For older devices, you may see even slower speeds. Different regions/CSCs may have faster downloads.&lt;/p&gt; &#xA;&lt;h2&gt;How do I know which CSC to use?&lt;/h2&gt; &#xA;&lt;p&gt;On your device, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the Settings app.&lt;/li&gt; &#xA; &lt;li&gt;Scroll down to &#34;About phone&#34; or &#34;About tablet&#34; and tap it.&lt;/li&gt; &#xA; &lt;li&gt;Tap &#34;Software information&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Scroll down to &#34;Service provider software version&#34;.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;ll see something like &#34;XAA/XAA,XAA/XAU/TMB&#34; or &#34;XAR/XAR/&#34; on the second line.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The first three letters there are your current CSC. The last three letters are the original/firmware CSC of your device.&lt;br&gt; Using the above examples, the first has a current CSC of XAA and a firmware CSC of TMB. The second has a current CSC of XAR and a firmware CSC of XAR.&lt;/p&gt; &#xA;&lt;h2&gt;How do I choose an alternative CSC if mine isn&#39;t working?&lt;/h2&gt; &#xA;&lt;p&gt;Use the CSC picker dialog (the button that looks like a list inside the &#34;Region&#34; text field).&lt;br&gt; You can search for your country or region in there and see the different CSCs used. If there are specific carriers associated with a CSC, they&#39;ll also be shown.&lt;/p&gt; &#xA;&lt;h2&gt;Why is my antivirus flagging the app?&lt;/h2&gt; &#xA;&lt;p&gt;Certain antivirus programs may flag Bifrost as malware. This is (hopefully obviously) a false positive.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a trojan horse malware family named Bifrost, which is part of the greater Bifrose family.&lt;br&gt; Antivirus programs flagging Bifrost (this app) seem to be doing it solely based on this app having the same name as the malware.&lt;/p&gt; &#xA;&lt;p&gt;Bifrost (the malware) only affects Windows systems and has limited functionality after Windows XP. For more information, see &lt;a href=&#34;https://en.wikipedia.org/wiki/Bifrost_(Trojan_horse)&#34;&gt;this Wikipedia article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bifrost (this app) does not contain malware. You can verify this by browsing through the source code or by compiling it yourself using the instructions below.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;Building this project should be fairly easy.&lt;/p&gt; &#xA;&lt;h2&gt;Prep:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have the latest &lt;a href=&#34;https://developer.android.com/studio/preview&#34;&gt;Android Studio Canary&lt;/a&gt; installed.&lt;/li&gt; &#xA; &lt;li&gt;Clone this project into Android Studio and let it import.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Desktop&lt;/h2&gt; &#xA;&lt;h3&gt;Conveyor&lt;/h3&gt; &#xA;&lt;p&gt;Bifrost makes use of &lt;a href=&#34;https://www.hydraulic.dev/&#34;&gt;Conveyor&lt;/a&gt; to create binaries for different desktop platforms.&lt;/p&gt; &#xA;&lt;p&gt;Conveyor can build for Windows and Linux from any host OS, but macOS is required to build for macOS.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To build, first download and install Conveyor from the link above.&lt;/li&gt; &#xA; &lt;li&gt;Next, open a terminal to the project&#39;s root directory.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./gradlew :desktop:build&lt;/code&gt; (&lt;code&gt;.\gradlew.bat :desktop:build&lt;/code&gt; on Windows).&lt;/li&gt; &#xA; &lt;li&gt;Run the following command based on your target system.&lt;br&gt; 4.1. Windows: &lt;code&gt;conveyor make windows-zip&lt;/code&gt;.&lt;br&gt; 4.2. Debian: &lt;code&gt;conveyor make debian-package&lt;/code&gt;.&lt;br&gt; 4.3. Linux: &lt;code&gt;conveyor make linux-tarball&lt;/code&gt;.&lt;br&gt; 4.4. Intel Macs: &lt;code&gt;conveyor -Kapp.machines=mac.amd64 make unnotarized-mac-zip&lt;/code&gt;.&lt;br&gt; 4.5. Apple Silicon Macs: &lt;code&gt;conveyor -Kapp.machines=mac.arm64 make unnotarized-mac-zip&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Check the &lt;code&gt;output&lt;/code&gt; folder in the root of the project for the binary.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can run a debug binary by executing the &lt;code&gt;:desktop:run&lt;/code&gt; task.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./gradlew :desktop:run&lt;/code&gt; (&lt;code&gt;.\gradlew :desktop:run&lt;/code&gt; on Windows).&lt;/p&gt; &#xA;&lt;h2&gt;Android:&lt;/h2&gt; &#xA;&lt;h3&gt;Command Line:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the Terminal view in Android Studio (bottom-left).&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;gradlew :android:build&lt;/code&gt; on Windows or &lt;code&gt;./gradlew :android:build&lt;/code&gt; on macOS and Linux.&lt;/li&gt; &#xA; &lt;li&gt;Once it finishes building, go to &lt;code&gt;android/build/outputs/apk/debug&lt;/code&gt; and install &lt;code&gt;android-debug.apk&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;GUI:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the Gradle view in Android Studio (top-right).&lt;/li&gt; &#xA; &lt;li&gt;Expand the project, then expand &#34;android&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Expand &#34;Tasks,&#34; then &#34;build,&#34; and double-click &#34;build&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Once it finishes building, go to &lt;code&gt;android/build/outputs/apk/debug&lt;/code&gt; and install &lt;code&gt;android-debug.apk&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Running&lt;/h1&gt; &#xA;&lt;h2&gt;Android&lt;/h2&gt; &#xA;&lt;p&gt;Download &lt;code&gt;bifrost_android_&amp;lt;VERSION&amp;gt;.apk&lt;/code&gt; and install it.&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;Download the .zip ending in &lt;code&gt;windows-amd64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Native ARM64 Windows builds aren&#39;t currently available.&lt;/p&gt; &#xA;&lt;h2&gt;macOS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Intel Macs, download the .zip ending in &lt;code&gt;mac-amd64&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On Apple Silicon Macs, download the .zip ending in &lt;code&gt;mac-aarch64&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Debian-based systems, download the &lt;code&gt;.deb&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;On other Linux distros, download the &lt;code&gt;.tar.gz&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On x64 Linux, download the &lt;code&gt;amd64&lt;/code&gt; variant. On ARM64 Linux, choose &lt;code&gt;aarch64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Translating&lt;/h1&gt; &#xA;&lt;p&gt;Bifrost uses Weblate for translations.&lt;/p&gt; &#xA;&lt;p&gt;Help translate Bifrost to your language on the &lt;a href=&#34;https://hosted.weblate.org/engage/bifrost/&#34;&gt;project page&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;a href=&#34;https://hosted.weblate.org/engage/bifrost/&#34;&gt; &lt;img src=&#34;https://hosted.weblate.org/widget/bifrost/strings/multi-auto.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;h2&gt;Desktop:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zacharee/SamloaderKotlin/master/screenshots/DesktopDownload.png&#34; alt=&#34;Desktop Downloader&#34; width=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zacharee/SamloaderKotlin/master/screenshots/DesktopDecrypt.png&#34; alt=&#34;Desktop Decrypter&#34; width=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zacharee/SamloaderKotlin/master/screenshots/DesktopHistory.png&#34; alt=&#34;Desktop History&#34; width=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zacharee/SamloaderKotlin/master/screenshots/DesktopSettings.png&#34; alt=&#34;Desktop Settings&#34; width=&#34;400&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Mobile:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zacharee/SamloaderKotlin/master/screenshots/AndroidDownload.png&#34; alt=&#34;Android Downloader&#34; width=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zacharee/SamloaderKotlin/master/screenshots/AndroidDecrypt.png&#34; alt=&#34;Android Decrypter&#34; width=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zacharee/SamloaderKotlin/master/screenshots/AndroidHistory.png&#34; alt=&#34;Android History&#34; width=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zacharee/SamloaderKotlin/master/screenshots/AndroidSettings.png&#34; alt=&#34;Android Settings&#34; width=&#34;400&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Error Reporting&lt;/h1&gt; &#xA;&lt;p&gt;Bifrost uses Bugsnag for error reporting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bugsnag.com&#34;&gt;&lt;img src=&#34;https://assets-global.website-files.com/607f4f6df411bd01527dc7d5/63bc40cd9d502eda8ea74ce7_Bugsnag%20Full%20Color.svg?sanitize=true&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>