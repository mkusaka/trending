<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:56:40Z</updated>
  <subtitle>Monthly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mobile-dev-inc/maestro</title>
    <updated>2022-11-01T01:56:40Z</updated>
    <id>tag:github.com,2022-11-01:/mobile-dev-inc/maestro</id>
    <link href="https://github.com/mobile-dev-inc/maestro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Painless Mobile UI Automation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Maestro üéπ&lt;/h1&gt; &#xA;&lt;p&gt;Maestro is the easiest way to automate UI testing for your mobile app.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;üìÉ&lt;/span&gt;&amp;nbsp;&amp;nbsp;Blog Post: &lt;a href=&#34;https://blog.mobile.dev/introducing-maestro-painless-mobile-ui-automation-bee4992d13c1&#34;&gt;&lt;strong&gt;Introducing: Maestro ‚Äî Painless Mobile UI Automation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìñ&lt;/span&gt;&amp;nbsp;&amp;nbsp;Full documentation for Maestro can be found at &lt;a href=&#34;https://maestro.mobile.dev&#34;&gt;&lt;strong&gt;maestro.mobile.dev&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üí¨&lt;/span&gt;&amp;nbsp;&amp;nbsp;Public Slack channel: &lt;a href=&#34;https://docsend.com/view/3r2sf8fvvcjxvbtk&#34;&gt;&lt;strong&gt;Join the workspace&lt;/strong&gt;&lt;/a&gt;, then head to the &lt;code&gt;#maestro&lt;/code&gt; channel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/847683/187275009-ddbdf963-ce1d-4e07-ac08-b10f145e8894.gif&#34;&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Create a flow for any app on Android and iOS, with just a few lines of YAML.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# flow_contacts_android.yaml&#xA;&#xA;appId: com.android.contacts&#xA;---&#xA;- launchApp&#xA;- tapOn: &#34;Create new contact&#34;&#xA;- tapOn: &#34;First Name&#34;&#xA;- inputText: &#34;John&#34;&#xA;- tapOn: &#34;Last Name&#34;&#xA;- inputText: &#34;Snow&#34;&#xA;- tapOn: &#34;Save&#34;&#xA;- assertVisible: &#34;Add Phone Number&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# flow_contacts_ios.yaml&#xA;&#xA;appId: com.apple.MobileAddressBook&#xA;---&#xA;- launchApp&#xA;- tapOn: &#34;John Appleseed&#34;&#xA;- tapOn: &#34;Edit&#34;&#xA;- tapOn: &#34;Add phone&#34;&#xA;- inputText: &#34;123123&#34;&#xA;- tapOn: &#34;Done&#34;&#xA;- assertVisible: &#34;message&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Get a CLI tool from homebrew&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap mobile-dev-inc/tap&#xA;brew install maestro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write a simple test in a YAML file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# flow.yaml&#xA;&#xA;appId: your.package.name&#xA;---&#xA;- launchApp&#xA;- tapOn: &#34;Text on the screen&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure an Android emulator is running. Check out the &lt;a href=&#34;https://maestro.mobile.dev/getting-started/installing-maestro#android&#34;&gt;docs&lt;/a&gt; for physical device support.&lt;/p&gt; &#xA;&lt;p&gt;Run it!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;maestro test flow.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;iOS Support&lt;/h2&gt; &#xA;&lt;p&gt;Only iOS Simulators are supported at the moment.&lt;/p&gt; &#xA;&lt;p&gt;For Maestro to work with iOS you would need to do few extra steps.&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://fbidb.io/&#34;&gt;Facebook IDB&lt;/a&gt; tool&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap facebook/fb&#xA;brew install facebook/fb/idb-companion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And launch it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;idb_companion --udid {id of the iOS device}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why Maestro?&lt;/h2&gt; &#xA;&lt;p&gt;Maestro is built on learnings from its predecessors (Appium, Espresso, UIAutomator, XCTest)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in tolerance to flakiness. UI elements will not always be where you expect them, screen tap will not always go through, etc. Maestro embraces the instability of mobile applications and devices and tries to counter it.&lt;/li&gt; &#xA; &lt;li&gt;Built-in tolerance to delays. No need to pepper your tests with &lt;code&gt;sleep()&lt;/code&gt; calls. Maestro knows that it might take time to load the content (i.e. over the network) and automatically waits for it (but no longer than required).&lt;/li&gt; &#xA; &lt;li&gt;Blazingly fast iteration. Tests are interpreted, no need to compile anything. Maestro is able to continuously monitor your test files and rerun them as they change.&lt;/li&gt; &#xA; &lt;li&gt;Declarative yet powerful syntax. Define your tests in a &lt;code&gt;yaml&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Simple setup. Maestro is a single binary that works anywhere.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Next steps&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maestro.mobile.dev/&#34;&gt;Learn more about Maestro features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maestro.mobile.dev/reference/tap-on-view&#34;&gt;Learn about Maestro commands&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>google-developer-training/android-kotlin-fundamentals-apps</title>
    <updated>2022-11-01T01:56:40Z</updated>
    <id>tag:github.com,2022-11-01:/google-developer-training/android-kotlin-fundamentals-apps</id>
    <link href="https://github.com/google-developer-training/android-kotlin-fundamentals-apps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;android-kotlin-fundamentals-apps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Android Fundamentals in Kotlin Solution Apps&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the solution code for the apps for the Android Fundamentals in Kotlin course, published by the Google Developer Training Team. See &lt;a href=&#34;https://developer.android.com/courses&#34;&gt;Android Training&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A ‚Äúsolution app‚Äù is an app that contains the code for a completed codelab.&lt;/p&gt; &#xA;&lt;p&gt;Code for the starter apps in this course are in a different repository.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Each of the samples in this repository is associated with a codelab exercise from the Android Fundamentals in Kotlin course.&lt;/p&gt; &#xA;&lt;p&gt;The Android Fundamentals in Kotlin course can be used for self-study, or as the basis of an instructor-led training. It is targeted towards beginning Android developers with a background in software development or computer science with at least two years of experience with a modern, object-oriented programming language, such as the Java programming language, and familiarity with basic software architecture principles.&lt;/p&gt; &#xA;&lt;p&gt;Since this course is in Kotlin, it is assumed you know Kotlin at the level taught in the Udacity course, &lt;a href=&#34;https://www.udacity.com/course/kotlin-bootcamp-for-programmers--ud9011&#34;&gt;Kotlin Bootcamp for Programmers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pre-requisites&lt;/h2&gt; &#xA;&lt;p&gt;The samples, along with the course, assume basic competence in software design and development, as well as some background in computer science.&lt;/p&gt; &#xA;&lt;p&gt;Specifically, to get started you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Familiarity with the general software development process for object-oriented applications using an IDE (Integrated Development Environment).&lt;/li&gt; &#xA; &lt;li&gt;At least 1-3 years of experience with object-oriented programming and the Java programming language, or a comparable modern language.&lt;/li&gt; &#xA; &lt;li&gt;Familiarity with the Kotlin programming language.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Android Studio Version&lt;/h2&gt; &#xA;&lt;p&gt;During development of this course, all samples were built using Android Studio 3.3, and the codelabs assume you are using Android Studio 3.3 with corresponding libraries and available features. See the &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio download page&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio/install.html&#34;&gt;Install Android Studio&lt;/a&gt;, if you don&#39;t already have it. (If you are just starting the course, you will be guided through this process.)&lt;/li&gt; &#xA; &lt;li&gt;Download the starter sample for the codelab.&lt;/li&gt; &#xA; &lt;li&gt;Open the sample into Android Studio.&lt;/li&gt; &#xA; &lt;li&gt;Build and run the sample. You may need to update gradle and library versions. Follow the guidance provided by Android Studio.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>ethereum-lists/chains</title>
    <updated>2022-11-01T01:56:40Z</updated>
    <id>tag:github.com,2022-11-01:/ethereum-lists/chains</id>
    <link href="https://github.com/ethereum-lists/chains" rel="alternate"></link>
    <summary type="html">&lt;p&gt;provides metadata for networkIDs and chainIDs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EVM-based Chains&lt;/h1&gt; &#xA;&lt;p&gt;The source data is in _data/chains. Each chain has its own file with the filename being the &lt;a href=&#34;https://github.com/ChainAgnostic/CAIPs/raw/master/CAIPs/caip-2.md&#34;&gt;CAIP-2&lt;/a&gt; representation as name and &lt;code&gt;.json&lt;/code&gt; ans extension.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;name&#34;: &#34;Ethereum Mainnet&#34;,&#xA;  &#34;chain&#34;: &#34;ETH&#34;,&#xA;  &#34;rpc&#34;: [&#xA;    &#34;https://mainnet.infura.io/v3/${INFURA_API_KEY}&#34;,&#xA;    &#34;https://api.mycryptoapi.com/eth&#34;&#xA;  ],&#xA;  &#34;faucets&#34;: [],&#xA;  &#34;nativeCurrency&#34;: {&#xA;    &#34;name&#34;: &#34;Ether&#34;,&#xA;    &#34;symbol&#34;: &#34;ETH&#34;,&#xA;    &#34;decimals&#34;: 18&#xA;  },&#xA;  &#34;infoURL&#34;: &#34;https://ethereum.org&#34;,&#xA;  &#34;shortName&#34;: &#34;eth&#34;,&#xA;  &#34;chainId&#34;: 1,&#xA;  &#34;networkId&#34;: 1,&#xA;  &#34;icon&#34;: &#34;ethereum&#34;,&#xA;  &#34;explorers&#34;: [{&#xA;    &#34;name&#34;: &#34;etherscan&#34;,&#xA;    &#34;url&#34;: &#34;https://etherscan.io&#34;,&#xA;    &#34;icon&#34;: &#34;etherscan&#34;,&#xA;    &#34;standard&#34;: &#34;EIP3091&#34;&#xA;  }]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;when an icon is used in either the network or a explorer there must be a json in _data/icons with the name used (e.g. in the above example there must be a &lt;code&gt;ethereum.json&lt;/code&gt; and a &lt;code&gt;etherscan.json&lt;/code&gt; in there) - the icon jsons look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#xA;[&#xA;    {&#xA;      &#34;url&#34;: &#34;ipfs://QmdwQDr6vmBtXmK2TmknkEuZNoaDqTasFdZdu3DRw8b2wt&#34;,&#xA;      &#34;width&#34;: 1000,&#xA;      &#34;height&#34;: 1628,&#xA;      &#34;format&#34;: &#34;png&#34;&#xA;    }&#xA;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the URL must be a IPFS url that is publicly resolveable&lt;/li&gt; &#xA; &lt;li&gt;width and height are positive integers&lt;/li&gt; &#xA; &lt;li&gt;format is either &#34;png&#34;, &#34;jpg&#34; or &#34;svg&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the chain is an L2 or a shard of another chain you can link it to the parent chain like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  ...&#xA;  &#34;parent&#34;: {&#xA;   &#34;type&#34; : &#34;L2&#34;,&#xA;   &#34;chain&#34;: &#34;eip155-1&#34;,&#xA;   &#34;bridges&#34;: [ {&#34;url&#34;:&#34;https://bridge.arbitrum.io&#34;} ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where you need to specify type 2 and the reference to an existing parent. The field about bridges is optional.&lt;/p&gt; &#xA;&lt;p&gt;You can add a &lt;code&gt;status&lt;/code&gt; field e.g. to &lt;code&gt;deprecate&lt;/code&gt; a chain (a chain should never be deleted as this would open the door to replay attacks) Other options for &lt;code&gt;status&lt;/code&gt; are &lt;code&gt;active&lt;/code&gt; (default) or &lt;code&gt;incubating&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Aggregation&lt;/h2&gt; &#xA;&lt;p&gt;There are also aggregated json files with all chains automatically assembled:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chainid.network/chains.json&#34;&gt;https://chainid.network/chains.json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chainid.network/chains_mini.json&#34;&gt;https://chainid.network/chains_mini.json&lt;/a&gt; (miniaturized - fewer fields for smaller filesize)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Collision management&lt;/h2&gt; &#xA;&lt;p&gt;If different chains have the same chainID we list the one with the oldest genesis.&lt;/p&gt; &#xA;&lt;h2&gt;Usages&lt;/h2&gt; &#xA;&lt;h3&gt;Wallets&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://walleth.org&#34;&gt;WallETH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trezor.io&#34;&gt;TREZOR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Explorers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://otterscan.io&#34;&gt;Otterscan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;EIPs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EIP-155&lt;/li&gt; &#xA; &lt;li&gt;EIP-3014&lt;/li&gt; &#xA; &lt;li&gt;EIP-3770&lt;/li&gt; &#xA; &lt;li&gt;EIP-4527&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Listing sites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chainlist.org&#34;&gt;chainlist.org&lt;/a&gt; or &lt;a href=&#34;https://networklist-org.vercel.app&#34;&gt;networklist-org.vercel.app&lt;/a&gt; as a staging version with a more up-to-date list&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chainid.network&#34;&gt;chainid.network&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://networks.vercel.app&#34;&gt;networks.vercel.app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taylorjdawson/eth-chains&#34;&gt;eth-chains&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/izayl/evm-box&#34;&gt;EVM-BOX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.chaindirectory.xyz&#34;&gt;chaindirectory.xyz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chain-list.org&#34;&gt;chain-list.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chainlist.defillama.com/&#34;&gt;DefiLlama&#39;s chainlist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chainlist.network/&#34;&gt;chainlist.network&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://evmchainlist.org&#34;&gt;evmchainlist.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://evmchainlist.com&#34;&gt;evmchainlist.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://thechainlist.io&#34;&gt;thechainlist.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chainlist.info&#34;&gt;chainlist.info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chainmap.io&#34;&gt;chainmap.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.chainlist.in&#34;&gt;chainlist.in&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chainz.me&#34;&gt;chainz.me&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.chain.link/&#34;&gt;Chainlink docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spenhouet.com/chains&#34;&gt;Wagmi compatible chain configurations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/komputing/FaucETH&#34;&gt;FaucETH&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://playground.sourcify.dev&#34;&gt;Sourcify playground&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your project - contact us to add it here!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>