<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-01T01:53:49Z</updated>
  <subtitle>Monthly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>recloudstream/cloudstream</title>
    <updated>2023-01-01T01:53:49Z</updated>
    <id>tag:github.com,2023-01-01:/recloudstream/cloudstream</id>
    <link href="https://github.com/recloudstream/cloudstream" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android app for streaming and downloading Movies, TV-Series and Anime.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CloudStream&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚ö†Ô∏è Warning: By default this app doesn&#39;t provide any video sources, you have to install extensions in order to add functionality to the app.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/5Hus6fM&#34;&gt;&lt;img src=&#34;https://invidget.switchblade.xyz/5Hus6fM&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;AdFree&lt;/strong&gt;, No ads whatsoever&lt;/li&gt; &#xA; &lt;li&gt;No tracking/analytics&lt;/li&gt; &#xA; &lt;li&gt;Bookmarks&lt;/li&gt; &#xA; &lt;li&gt;Download and stream movies, tv-shows and anime&lt;/li&gt; &#xA; &lt;li&gt;Chromecast&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Screenshots:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/recloudstream/cloudstream/master/.github/home.jpg&#34; height=&#34;400&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/recloudstream/cloudstream/master/.github/search.jpg&#34; height=&#34;400&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/recloudstream/cloudstream/master/.github/downloads.jpg&#34; height=&#34;400&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/recloudstream/cloudstream/master/.github/results.jpg&#34; height=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/recloudstream/cloudstream/master/.github/player.jpg&#34; height=&#34;200&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supported languages:&lt;/h3&gt; &#xA;&lt;a href=&#34;https://hosted.weblate.org/engage/cloudstream/&#34;&gt; &lt;img src=&#34;https://hosted.weblate.org/widgets/cloudstream/-/app/multi-auto.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>android/compose-samples</title>
    <updated>2023-01-01T01:53:49Z</updated>
    <id>tag:github.com,2023-01-01:/android/compose-samples</id>
    <link href="https://github.com/android/compose-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Jetpack Compose samples.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jetpack Compose Samples&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/samples_montage.gif&#34; alt=&#34;Jetpack Compose Samples&#34; width=&#34;824&#34;&gt; &#xA;&lt;p&gt;This repository contains a set of individual Android Studio projects to help you learn about Compose in Android. Each sample demonstrates different use cases, complexity levels and APIs.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;read the documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üíª Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To try out these sample apps, you need to use &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt;. You can clone this repository or import the project from Android Studio following the steps &lt;a href=&#34;https://developer.android.com/jetpack/compose/setup#sample&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The branch &lt;code&gt;compose-latest&lt;/code&gt; is targeting the latest alpha versions of Compose.&lt;/p&gt; &#xA;&lt;h2&gt;üß¨ Samples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/jetnews.png&#34; alt=&#34;JetNews&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt; A sample blog post viewer that demonstrates the use of Compose with a typical Material app and real-world architecture. &lt;br&gt;&lt;br&gt; ‚Ä¢ Medium complexity&lt;br&gt;‚Ä¢ Varied UI&lt;br&gt;‚Ä¢ Light &amp;amp; dark themes&lt;br&gt;‚Ä¢ Resource loading&lt;br&gt;‚Ä¢ UI Testing &lt;br&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/JetNews/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/JetNews.png&#34; width=&#34;320&#34; alt=&#34;Jetnews sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/jetchat.png&#34; alt=&#34;Jetchat&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A sample chat app that focuses on UI state patterns and text input.&lt;br&gt;&lt;br&gt;‚Ä¢ Low complexity&lt;br&gt;‚Ä¢ Material Design 3 theme and Material You dynamic color&lt;br&gt;‚Ä¢ Resource loading&lt;br&gt;‚Ä¢ Back button handling&lt;br&gt;‚Ä¢ Integration with Architecture Components: Navigation, Fragments, LiveData, ViewModel&lt;br&gt;‚Ä¢ Animation&lt;br&gt;‚Ä¢ UI Testing&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Jetchat/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Jetchat.png&#34; width=&#34;320&#34; alt=&#34;Jetchat sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/jetsurvey.png&#34; alt=&#34;Jetsurvey&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A sample survey app that showcases text input, validation and UI state management in Compose.&lt;br&gt;&lt;br&gt;‚Ä¢ Low complexity&lt;br&gt;‚Ä¢ &lt;code&gt;TextField&lt;/code&gt; and form validation&lt;br&gt;‚Ä¢ Snackbar implementation&lt;br&gt;‚Ä¢ Element reusability and styling&lt;br&gt;‚Ä¢ Various form elements&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Jetsurvey/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Jetsurvey.png&#34; width=&#34;320&#34; alt=&#34;Jetsurvey sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/jetsnack.png&#34; alt=&#34;Jetsnack&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;Jetsnack is a sample snack ordering app built with Compose.&lt;br&gt;&lt;br&gt;‚Ä¢ Medium complexity&lt;br&gt;‚Ä¢ Custom design system&lt;br&gt;‚Ä¢ Custom layouts&lt;br&gt;‚Ä¢ Animation&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Jetsnack/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Jetsnack.png&#34; width=&#34;320&#34; alt=&#34;Jetsnack sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/jetcaster.png&#34; alt=&#34;Jetcaster&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A sample podcast app that features a full-featured, Redux-style architecture and showcases dynamic themes.&lt;br&gt;&lt;br&gt;‚Ä¢ Advanced sample&lt;br&gt;‚Ä¢ Dynamic theming using podcast artwork&lt;br&gt;‚Ä¢ Image fetching&lt;br&gt;‚Ä¢ &lt;a href=&#34;https://developer.android.com/reference/kotlin/android/view/WindowInsets&#34;&gt;&lt;code&gt;WindowInsets&lt;/code&gt;&lt;/a&gt; support&lt;br&gt;‚Ä¢ Coroutines&lt;br&gt;‚Ä¢ Local storage with Room&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Jetcaster/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Jetcaster.png&#34; width=&#34;320&#34; alt=&#34;Jetcaster sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/rally.png&#34; alt=&#34;Rally&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A Compose implementation of the Rally Material study, a financial app that focuses on data, charts, reusability and animations.&lt;br&gt;&lt;br&gt;‚Ä¢ Low complexity&lt;br&gt;‚Ä¢ Material theming with a dark-only theme&lt;br&gt;‚Ä¢ Custom layouts and reusable elements&lt;br&gt;‚Ä¢ Charts and tables&lt;br&gt;‚Ä¢ Animations&lt;br&gt;‚Ä¢ Screenshot tests&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Rally/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Rally.png&#34; width=&#34;320&#34; alt=&#34;Rally sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/crane.png&#34; alt=&#34;Crane&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A Compose implementation of the Crane Material study, a travel app that uses Material Design components and Material Theming to create a personalized, on-brand experience.&lt;br&gt;&lt;br&gt;‚Ä¢ Medium complexity&lt;br&gt;‚Ä¢ Draggable UI elements&lt;br&gt;‚Ä¢ UI state handling&lt;br&gt;‚Ä¢ UI Tests&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Crane/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Crane.png&#34; width=&#34;320&#34; alt=&#34;Crane sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/owl.png&#34; alt=&#34;Owl&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A Compose implementation of the Owl Material study. The Owl brand uses bold color, shape, and typography to express its brand attributes: energy, daring, and fun.&lt;br&gt;&lt;br&gt;‚Ä¢ Medium complexity&lt;br&gt;‚Ä¢ Material theming &amp;amp; light/dark themes&lt;br&gt;‚Ä¢ Custom layout&lt;br&gt;‚Ä¢ Animation&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Owl/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Owl.png&#34; width=&#34;320&#34; alt=&#34;Owl sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/reply.png&#34; alt=&#34;Reply&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A compose implementation of the Reply material study, an email client app that focuses on adaptive design for mobile, tablets and foldables. It also showcases brand new Material design 3 theming, dynamic colors and navigation components.&lt;br&gt;&lt;br&gt;‚Ä¢ Medium complexity&lt;br&gt;‚Ä¢ Adaptive UI for phones, tablet and desktops&lt;br&gt;‚Ä¢ Foldable support&lt;br&gt;‚Ä¢ Material 3 theming &amp;amp; Components&lt;br&gt;‚Ä¢ Dynamic colors and Light/Dark theme support&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/Reply/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Reply.png&#34; width=&#34;320&#34; alt=&#34;Reply sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/jetlagged_heading.png&#34; alt=&#34;JetLagged&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A sample sleep tracker app, showcasing how to create custom layouts and graphics in Compose&lt;br&gt;&lt;br&gt;‚Ä¢ Custom Layouts&lt;br&gt;‚Ä¢ Graphs with Paths&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/compose-samples/main/JetLagged/&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/JetLagged/screenshots/JetLagged_Full.png&#34; width=&#34;320&#34; alt=&#34;JetLagged sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üß¨ Additional samples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/nia.png&#34; alt=&#34;Now in Android&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;An app for keeping up to date with the latest news and developments in Android.&lt;br&gt;&lt;br&gt;‚Ä¢ &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt; first app.&lt;br&gt;‚Ä¢ Implements the recommended Android &lt;a href=&#34;https://developer.android.com/topic/architecture&#34;&gt;Architecture Guidelines&lt;/a&gt; &lt;br&gt;‚Ä¢ Integrates &lt;a href=&#34;https://developer.android.com/jetpack&#34;&gt;Jetpack Libraries&lt;/a&gt; holistically in the context of a real world app&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/android/nowinandroid&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/NiA.png&#34; width=&#34;320&#34; alt=&#34;Now In Android Github Repository&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/material_catalog.png&#34; alt=&#34;Material Catalog&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A catalog of Material Design components and features available in Jetpack Compose. See how to implement them and how they look and behave on real devices.&lt;br&gt;&lt;br&gt;‚Ä¢ Lives in AOSP‚Äîalways up to date&lt;br&gt;‚Ä¢ Uses the same samples as API reference docs&lt;br&gt;‚Ä¢ Theme picker to change Material Theming values at runtime&lt;br&gt;‚Ä¢ Links to guidelines, docs, source code, and issue tracker&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=androidx.compose.material.catalog&#34;&gt;&amp;gt; Get it on Google Play&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:compose/integration-tests/material-catalog&#34;&gt;&amp;gt; Browse on AOSP&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Material_Catalog.png&#34; width=&#34;320&#34; alt=&#34;Material Catalog sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/sunflower.png&#34; alt=&#34;Sunflower&#34; width=&#34;240&#34;&gt; &lt;br&gt;&lt;br&gt;A gardening app illustrating Android development best practices with Android Jetpack. The &lt;code&gt;compose&lt;/code&gt; branch is partially built with Jetpack Compose.&lt;br&gt;&lt;br&gt;‚Ä¢ Compose working in an existing app: including integration with strings, resources, and themes and styles&lt;br&gt;‚Ä¢ Integration with an existing architecture based on Jetpack libraries&lt;br&gt;‚Ä¢ &lt;code&gt;CollapsingToolbarLayout&lt;/code&gt; behavior implemented manually with Compose&lt;br&gt;‚Ä¢ Showing &lt;a href=&#34;https://material.io/components/snackbars&#34;&gt;Snackbars&lt;/a&gt; with Compose&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://goo.gle/sunflower-compose&#34;&gt;&amp;gt; Browse&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/android/compose-samples/main/readme/screenshots/Sunflower.png&#34; width=&#34;320&#34; alt=&#34;Sunflower sample demo&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;High level features&lt;/h2&gt; &#xA;&lt;p&gt;Looking for a sample that has the following features?&lt;/p&gt; &#xA;&lt;h3&gt;Custom Layouts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/ee198110d8a7575da281de9bd0f84e91970468ca/JetNews/app/src/main/java/com/example/jetnews/ui/interests/InterestsScreen.kt#L428&#34;&gt;Jetnews: Interests Screen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/ee198110d8a7575da281de9bd0f84e91970468ca/Jetchat/app/src/main/java/com/example/compose/jetchat/components/AnimatingFabContent.kt#L101&#34;&gt;Jetchat: AnimatedFabContent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/73d7f25815e6936e0e815ce975905a6f10744c36/Jetsnack/app/src/main/java/com/example/jetsnack/ui/components/Grid.kt#L27&#34;&gt;Jetsnack: Grid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/main/Jetsnack/app/src/main/java/com/example/jetsnack/ui/snackdetail/SnackDetail.kt&#34;&gt;Jetsnack: CollapsingImageLayout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/ee198110d8a7575da281de9bd0f84e91970468ca/Owl/app/src/main/java/com/example/owl/ui/courses/FeaturedCourses.kt#L67&#34;&gt;Owl: Staggered Grid&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Theming&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/main/Jetchat/app/src/main/java/com/example/compose/jetchat/theme/Themes.kt#L91&#34;&gt;Jetchat: Material3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/main/Jetcaster/app/src/main/java/com/example/jetcaster/util/DynamicTheming.kt&#34;&gt;Jetcaster: Custom theme based on cover art&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/main/Jetsnack/app/src/main/java/com/example/jetsnack/ui/theme/Theme.kt&#34;&gt;Jetsnack: Custom Design System&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Animations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/87ab51822cd87ce07b8ea3ec9dcb8b93f04c0b2a/Crane/app/src/main/java/androidx/compose/samples/crane/calendar/Calendar.kt#L64&#34;&gt;Crane: Calendar Selection Animation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/pull/843&#34;&gt;Crane: AnimatedContent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/pull/842&#34;&gt;Jetsurvey: AnimatedContent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/69e9d862b5ffb321064364d7883e859db6daeccd/Jetcaster/app/src/main/java/com/example/jetcaster/util/DynamicTheming.kt&#34;&gt;Jetcaster: Animated theme colors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/5dd149f2a5d35527cb628972c6c058057233647f/Owl/app/src/main/java/com/example/owl/ui/onboarding/Onboarding.kt#L181&#34;&gt;Owl: Transition - Topic Chip change&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/main/Jetsnack/app/src/main/java/com/example/jetsnack/ui/home/Home.kt&#34;&gt;Jetsnack: Animating Bottom Barl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/5dd149f2a5d35527cb628972c6c058057233647f/Owl/app/src/main/java/com/example/owl/ui/course/CourseDetails.kt&#34;&gt;Owl: Bottom Sheet transforming&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Text&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/pull/787&#34;&gt;Jetchat: Downloadable Fonts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Large Screens&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/0f7d5958c57a83ecad10136da4d359ae07046d07/Jetcaster/app/src/main/java/com/example/jetcaster/ui/player/PlayerScreen.kt#L138&#34;&gt;Jetcaster - Tabletop mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/69e9d862b5ffb321064364d7883e859db6daeccd/JetNews/app/src/main/java/com/example/jetnews/ui/MainActivity.kt#L36&#34;&gt;Jetnews - Window Size Classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/compose-samples/raw/e7e8733f9b37d80cdc6e9e05dbabe24ccf20b38f/Crane/app/src/main/java/androidx/compose/samples/crane/home/MainActivity.kt#L72&#34;&gt;Crane - Window Size Classes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Formatting&lt;/h2&gt; &#xA;&lt;p&gt;To automatically format all samples: Run &lt;code&gt;./scripts/format.sh&lt;/code&gt; To check one sample for errors: Navigate to the sample folder and run &lt;code&gt;./gradlew --init-script buildscripts/init.gradle.kts spotlessCheck&lt;/code&gt; To format one sample: Navigate to the sample folder and run &lt;code&gt;./gradlew --init-script buildscripts/init.gradle.kts spotlessApply&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;p&gt;To update dependencies to their new stable versions, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./scripts/updateDeps.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make any other manual updates to dependencies (ie add a new dependency or set an alpha version), update the &lt;code&gt;/scripts/libs.versions.toml&lt;/code&gt; file with changes, and then run &lt;code&gt;duplicate_version_config.sh&lt;/code&gt; to propogate the changes to all other samples. You can also update the &lt;code&gt;toml-updater-config.gradle&lt;/code&gt; file with changes that need to propogate to each sample.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2022 The Android Open Source Project&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    https://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>kotlin-hands-on/advent-of-code-kotlin-template</title>
    <updated>2023-01-01T01:53:49Z</updated>
    <id>tag:github.com,2023-01-01:/kotlin-hands-on/advent-of-code-kotlin-template</id>
    <link href="https://github.com/kotlin-hands-on/advent-of-code-kotlin-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Advent of Code template project for Kotlin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Advent of Code Kotlin Template&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; ‚Äì an annual event in December since 2015. Every year since then, with the first day of December, a programming puzzles contest is published every day for twenty-four days. A set of Christmas-oriented challenges provide any input you have to use to answer using the language of your choice. We offer you a template prepared to use with &lt;a href=&#34;https://kotlinlang.org&#34;&gt;Kotlin&lt;/a&gt; language within this repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kotlin-hands-on/advent-of-code-kotlin-template/main/.github/readme/cover.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Workflow&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Advent of Code Kotlin Template&lt;/strong&gt; is a particular type of GitHub repository that lets you speed up the setup phase and start writing your AoC solutions immediately.&lt;/p&gt; &#xA;&lt;p&gt;The general idea is straightforward ‚Äì to create a new project based on this template, you need to log in to your GitHub account and use the &lt;strong&gt;Use this template&lt;/strong&gt; green button. And remember ‚Äì &lt;strong&gt;do not fork it!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;After creating a new project based on this template in your account, a dedicated GitHub Actions workflow will start and clean up the code from redundant files. It will also personalize code to use your username and project name in namespaces and Gradle properties. How cool is that?&lt;/p&gt; &#xA;&lt;p&gt;Right after the &lt;a href=&#34;https://github.com/actions-user&#34;&gt;@actions-user&lt;/a&gt; actor pushes the second commit to your repository, you&#39;re ready to clone it within the IntelliJ IDEA.&lt;/p&gt; &#xA;&lt;p&gt;From now, everything&#39;s in your hands! Join the &lt;a href=&#34;https://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; contest, solve the Day O1 as soon as it is published.&lt;/p&gt; &#xA;&lt;p&gt;For the following days, copy the &lt;code&gt;Day01.kt&lt;/code&gt; solution file and increment the day number.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Remember to join the Kotlin contest!&lt;/p&gt; &#xA; &lt;p&gt;To do that, edit your project&#39;s &lt;em&gt;About&lt;/em&gt; section with ‚öôÔ∏è icon and add the &lt;code&gt;aoc-2022-in-kotlin&lt;/code&gt; topic to your project.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;We will find your repository and count you in our giveaway.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Content&lt;/h2&gt; &#xA;&lt;p&gt;After you create a new project based on the current template repository using the &lt;strong&gt;Use this template&lt;/strong&gt; button, a bare minimal scaffold will appear in your GitHub account with the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;‚îú‚îÄ‚îÄ README.md               README file&#xA;‚îú‚îÄ‚îÄ build.gradle.kts        Gradle configuration created with Kotlin DSL&#xA;‚îú‚îÄ‚îÄ gradle&#xA;‚îÇ   ‚îî‚îÄ‚îÄ wrapper             Gradle Wrapper&#xA;‚îú‚îÄ‚îÄ gradle.properties       Gradle configuration properties&#xA;‚îú‚îÄ‚îÄ gradlew                 *nix Gradle Wrapper script&#xA;‚îú‚îÄ‚îÄ gradlew.bat             Windows Gradle Wrapper script&#xA;‚îú‚îÄ‚îÄ settings.gradle.kts     Gradle project settings&#xA;‚îî‚îÄ‚îÄ src&#xA;    ‚îú‚îÄ‚îÄ Day01.kt            An empty implementation for the first AoC day&#xA;    ‚îú‚îÄ‚îÄ Day01.txt           An empty file for the Day 01 input data&#xA;    ‚îú‚îÄ‚îÄ Day01_test.txt      An optional Day 01 test input data used for checks&#xA;    ‚îî‚îÄ‚îÄ Utils.kt            A set of utility methods shared across your days&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: All task input files are excluded from the repository with &lt;code&gt;.gitignore&lt;/code&gt; ‚Äì we should not post them publicly, as Eric Wastl asks for: &lt;a href=&#34;https://twitter.com/ericwastl/status/1465805354214830081&#34;&gt;Tweet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When the first puzzle appears, go to the &lt;code&gt;Day01.kt&lt;/code&gt; and for each &lt;code&gt;part1&lt;/code&gt; and &lt;code&gt;part2&lt;/code&gt; functions, provide an algorithm implementation using the &lt;code&gt;input&lt;/code&gt; data loaded from the &lt;code&gt;src/Day01.txt&lt;/code&gt; file. This input data is common for both parts, and you can find it on the bottom of each day on the &lt;a href=&#34;https://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;To read the input data, you can go with the &lt;code&gt;readInput(name: String)&lt;/code&gt; utility method provided in the &lt;a href=&#34;https://raw.githubusercontent.com/kotlin-hands-on/advent-of-code-kotlin-template/main/src/Utils.kt&#34;&gt;&lt;code&gt;Utils.kt&lt;/code&gt;&lt;/a&gt; file, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun main() {&#xA;    fun part1(input: List&amp;lt;String&amp;gt;): Int {&#xA;        return input.size&#xA;    }&#xA;&#xA;    val input = readInput(&#34;Day01&#34;)&#xA;    println(part1(input))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/kotlin-hands-on/advent-of-code-kotlin-template/main/src/Utils.kt&#34;&gt;&lt;code&gt;Utils.kt&lt;/code&gt;&lt;/a&gt; file also contains the &lt;code&gt;String.md5()&lt;/code&gt; method for generating MD5 hash out of the given string and expects more helper functions for the sake of the &lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;KISS principle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each puzzle describes some test conditions, a small portion of the information that helps check if the produced value for the given test input is valid. To handle that case, you can put such an input into a separated file and perform a check against the output, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun main() {&#xA;    // ...&#xA;    &#xA;    val testInput = readInput(&#34;Day01_test&#34;)&#xA;    check(part1(testInput) == 13)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The current approach of providing both &lt;code&gt;part1&lt;/code&gt; and &lt;code&gt;part2&lt;/code&gt; solutions within the single &lt;code&gt;Day##.kt&lt;/code&gt; file may sometimes bring a disadvantage due to the first solution calculation when we expect to work on the second part only. With simple cases that don&#39;t consume too much of your time and resources that can be almost unnoticeable, but when solution takes seconds, it is worth considering breaking daily solution into two separated pieces, like &lt;code&gt;Day07_part1.kt&lt;/code&gt; and &lt;code&gt;Day07_part2.kt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The final result of your algorithm will be printed on the screen so that you can pass it to the Advent of Code website.&lt;/p&gt; &#xA;&lt;p&gt;To go with the next day, place the &lt;code&gt;Day02.txt&lt;/code&gt; file into the &lt;code&gt;src&lt;/code&gt; with relevant input data and create &lt;code&gt;Day02.kt&lt;/code&gt; file with a similar code scaffold:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;fun main() {&#xA;    fun part1(input: List&amp;lt;String&amp;gt;): Int {&#xA;        return 0&#xA;    }&#xA;&#xA;    fun part2(input: List&amp;lt;String&amp;gt;): Int {&#xA;        return 0&#xA;    }&#xA;&#xA;    val input = readInput(&#34;Day02&#34;)&#xA;    println(part1(input))&#xA;    println(part2(input))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;If you stuck with Kotlin-specific questions or anything related to this template, check out the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/home.html&#34;&gt;Kotlin docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://surveys.jetbrains.com/s3/kotlin-slack-sign-up&#34;&gt;Kotlin Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Template &lt;a href=&#34;https://github.com/kotlin-hands-on/advent-of-code-kotlin-template/issues&#34;&gt;issue tracker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>