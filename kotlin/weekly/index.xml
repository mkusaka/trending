<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-11T01:40:20Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JetBrains/compose-hot-reload</title>
    <updated>2025-05-11T01:40:20Z</updated>
    <id>tag:github.com,2025-05-11:/JetBrains/compose-hot-reload</id>
    <link href="https://github.com/JetBrains/compose-hot-reload" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compose Hot Reload: Make changes to your UI code in a Compose Multiplatform application, and see the results in real time. No restarts required. Compose Hot Reload runs your application on the JetBrains Runtime and intelligently reloads your code whenever it is changed.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ðŸ”¥ Compose Hot Reload&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/incubator.svg?sanitize=true&#34; alt=&#34;JetBrains team project&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Iterate on your Compose UIs faster, and let your creativity run free when building multiplatform user interfaces.&lt;/p&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./readme-assets/banner_dark.png&#34;&gt; &#xA; &lt;img alt=&#34;Text changing depending on mode. Light: &#39;So light!&#39; Dark: &#39;So dark!&#39;&#34; src=&#34;https://raw.githubusercontent.com/JetBrains/compose-hot-reload/master/readme-assets/banner_light.png&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;Make changes to your UI code in a Compose Multiplatform application and see the results in real time. No restarts required. Compose Hot Reload runs your application on the JetBrains Runtime and intelligently reloads your code whenever it is changed.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Compose Multiplatform project with a desktop target (see &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/compose-hot-reload/master/#faq&#34;&gt;FAQ&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Kotlin &lt;code&gt;2.1.20&lt;/code&gt; or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Apply the Gradle plugin to your project&lt;/h3&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;org.jetbrains.compose.hot-reload&lt;/code&gt; Gradle plugin to your build script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;    kotlin(&#34;multiplatform&#34;) version &#34;2.1.20&#34; // &amp;lt;- Use Kotlin 2.1.20 or higher!&#xA;    kotlin(&#34;plugin.compose&#34;) version &#34;2.1.20&#34; // &amp;lt;- Use Compose Compiler Plugin 2.1.20 or higher!&#xA;    id(&#34;org.jetbrains.compose&#34;)&#xA;    id(&#34;org.jetbrains.compose.hot-reload&#34;) version &#34;1.0.0-alpha09&#34; // &amp;lt;- add this additionally&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the application&lt;/h3&gt; &#xA;&lt;h4&gt;Multiplatform + IntelliJ&lt;/h4&gt; &#xA;&lt;p&gt;Using Kotlin Multiplatform and IntelliJ, launching your app is as simple as pressing &#39;run&#39; on your main function: &lt;img alt=&#34;IntelliJ Run Gutter&#34; src=&#34;https://raw.githubusercontent.com/JetBrains/compose-hot-reload/master/readme-assets/run-gutter.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Launch from Gradle task&lt;/h4&gt; &#xA;&lt;p&gt;The plugin will create the following tasks to launch the application in &#39;hot reload mode&#39;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:jvmRunHot&lt;/code&gt;: Multiplatform, async alternative (&lt;code&gt;jvmRunHotAsync&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:runHot&lt;/code&gt;: Kotlin/JVM, async alternative (&lt;code&gt;runHotAsync&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The tasks &#39;mainClass&#39; can be configured in the buildscript&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;tasks.withType&amp;lt;ComposeHotRun&amp;gt;().configureEach {&#xA;    mainClass.set(&#34;com.example.MainKt&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or provided when invoking the task&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./gradlew jvmRunHot --mainClass=com.example.MainKt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enable &#39;OptimizeNonSkippingGroups&#39;:&lt;/h3&gt; &#xA;&lt;p&gt;Note: This optimization is not required, but will lead to a better user experience. It is expected that the feature will be enabled by default in future versions of the compiler.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;build.gradle.kts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import org.jetbrains.kotlin.compose.compiler.gradle.ComposeFeatureFlag&#xA;&#xA;// ...&#xA;&#xA;composeCompiler {&#xA;    featureFlags.add(ComposeFeatureFlag.OptimizeNonSkippingGroups)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set up automatic provisioning of the JetBrains Runtime (JBR) via Gradle&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; To use the full functionality of Compose Hot Reload, your project &lt;strong&gt;must&lt;/strong&gt; run on the JetBrains Runtime (JBR, an OpenJDK fork that supports enhanced class redefinition).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Gradle can perform the download and setup for the JBR automatically for you via &lt;a href=&#34;https://github.com/gradle/foojay-toolchains&#34;&gt;Gradle Toolchains&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;settings.gradle.kts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;plugins {&#xA;    id(&#34;org.gradle.toolchains.foojay-resolver-convention&#34;) version &#34;0.10.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Compose Hot Reload Gradle plugin will then use this resolver to automatically provision a compatible JDK.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;My multiplatform project doesn&#39;t have a Desktop target. Can I use Compose Hot Reload?&lt;/h3&gt; &#xA;&lt;p&gt;To use Compose Hot Reload, you&#39;ll have to add a module to your project that does configure a desktop target. It&#39;s worth noting that you will only be able to hot-reload code that can be run on the desktop JVM target. A possible setup might be the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;ui-components&lt;/code&gt; module that specifies platform-agnostic UI components.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;gallery&lt;/code&gt; module with a configured desktop target and Compose Hot Reload.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;I am developing an Android application and am not using Kotlin Multiplatform. Can I use Compose Hot Reload?&lt;/h3&gt; &#xA;&lt;p&gt;Compose Hot Reload is designed to work with Compose Multiplatform. If you&#39;d like to use Compose Hot Reload with an Android-only project, you will have to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Switch from the Jetpack Compose plugin to the Compose Multiplatform plugin.&lt;/li&gt; &#xA; &lt;li&gt;Add a separate Gradle module and configure the &lt;code&gt;desktop&lt;/code&gt; target according to the instructions above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;My project is a desktop-only app with Compose Multiplatform. Can I use Compose Hot Reload?&lt;/h3&gt; &#xA;&lt;p&gt;Yes! However, please note that you can&#39;t start the application via the run button in the gutter (&lt;a href=&#34;https://youtrack.jetbrains.com/issue/CMP-3123&#34;&gt;CMP-3123&lt;/a&gt;). Instead, use the custom Gradle task as described above.&lt;/p&gt; &#xA;&lt;h2&gt;Using &#39;dev&#39; builds&lt;/h2&gt; &#xA;&lt;p&gt;The project publishes dev builds. To obtain the &#39;dev&#39; Compose Hot Reload artifacts, first add the &lt;code&gt;firework&lt;/code&gt; Maven repository: In your projects&#39; &lt;code&gt;settings.gradle.kts&lt;/code&gt;, add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;pluginManagement {&#xA;    repositories {&#xA;        maven(&#34;https://packages.jetbrains.team/maven/p/firework/dev&#34;)&#xA;    }&#xA;}&#xA;&#xA;dependencyResolutionManagement {&#xA;    repositories {&#xA;        maven(&#34;https://packages.jetbrains.team/maven/p/firework/dev&#34;)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>MMRLApp/MMRL</title>
    <updated>2025-05-11T01:40:20Z</updated>
    <id>tag:github.com,2025-05-11:/MMRLApp/MMRL</id>
    <link href="https://github.com/MMRLApp/MMRL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MMRL is an Android app that helps manage your own modules repository.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MMRL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/MMRLApp/MMRL?label=Latest%20Release&#34; alt=&#34;GitHub Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fplay.cuzi.workers.dev%2Fplay%3Fi%3Dcom.dergoogler.mmrl%26l%3DInstalls%26m%3D%24shortinstalls&amp;amp;label=Google%20Play&amp;amp;color=red&#34; alt=&#34;Google Play Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/MMRLApp/MMRL/total?label=GitHub%20Downloads&#34; alt=&#34;GitHub Downloads (all assets, all releases)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;MMRL is an Android app that helps manage your own modules repository.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Comprehensive Root Manager Support&lt;/strong&gt;: Full compatibility with Magisk, KernelSU, and APatch for diverse root management options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WebUI with Advanced Features&lt;/strong&gt;: Includes &lt;a href=&#34;https://developer.android.com/develop/ui/compose/layouts/insets&#34;&gt;Edge-to-Edge&lt;/a&gt; support and dynamic app themes for a seamless user experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bulk Installation Support&lt;/strong&gt;: Effortlessly install modules in bulk, both online and locally.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Module Dependency Management&lt;/strong&gt;: Simplifies module installation for end-users by automatically handling module dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Magisk Modules Repositories&lt;/strong&gt;: A community-driven platform that allows anyone to contribute and access Magisk modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Transparency with Blacklist&lt;/strong&gt;: Clear visibility into which modules or actions are restricted, ensuring users can make informed decisions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable Module Pages&lt;/strong&gt;: Personalize module pages with categories, screenshots, icons, covers, and other content for a tailored presentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transparency of Included Files&lt;/strong&gt;: Detailed breakdown of all files within modules, including APKs, service files, and more, for full user awareness.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Analytics Dashboard&lt;/strong&gt;: Display module-related analytics on the homepage, offering valuable insights into module usage and trends.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MMRLApp/MMRL/master/fastlane/metadata/android/en-US/images/phoneScreenshots/1.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MMRLApp/MMRL/master/fastlane/metadata/android/en-US/images/phoneScreenshots/2.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MMRLApp/MMRL/master/fastlane/metadata/android/en-US/images/phoneScreenshots/3.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MMRLApp/MMRL/master/fastlane/metadata/android/en-US/images/phoneScreenshots/4.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MMRLApp/MMRL/master/fastlane/metadata/android/en-US/images/phoneScreenshots/5.png&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MMRLApp/MMRL/master/fastlane/metadata/android/en-US/images/phoneScreenshots/6.png&#34; width=&#34;32%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Supported Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android 8.0 ~ 14&lt;/li&gt; &#xA; &lt;li&gt;Magisk 24.0 ~ latest&lt;/li&gt; &#xA; &lt;li&gt;KernelSU 0.5.1 ~ latest&lt;/li&gt; &#xA; &lt;li&gt;APatch 10253 ~ latest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Translate&lt;/h2&gt; &#xA;&lt;p&gt;Get involved with MMRL by translating it into your language!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hosted.weblate.org/engage/mmrl/&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widget/mmrl/multi-auto.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Modules Repository&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MMRLApp/MMRL-Util&#34;&gt;MMRLApp/MMRL-Util&lt;/a&gt;: A command line interface for building modules repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tabler/tabler-icons.git&#34;&gt;tabler/tabler-icons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MRepoApp/MRepo&#34;&gt;MRepoApp/MRepo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/topjohnwu/libsu&#34;&gt;topjohnwu/libsu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>