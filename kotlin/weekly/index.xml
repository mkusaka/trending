<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-20T01:50:35Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>EranBoudjnah/CleanArchitectureForAndroid</title>
    <updated>2023-08-20T01:50:35Z</updated>
    <id>tag:github.com,2023-08-20:/EranBoudjnah/CleanArchitectureForAndroid</id>
    <link href="https://github.com/EranBoudjnah/CleanArchitectureForAndroid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean Architecture for Android - a sample project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Clean Architecture for Android Sample Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://amzn.to/43cUuhb&#34; title=&#34;Clean Architecture for Android&#34;&gt;&lt;img src=&#34;https://github.com/EranBoudjnah/CleanArchitectureForAndroid/raw/readme_assets/readme-assets/book_cover.jpg?raw=true&amp;amp;123&#34; alt=&#34;Clean Architecture for Android&#34; title=&#34;Clean Architecture for Android&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/EranBoudjnah/CleanArchitectureForAndroid/raw/readme_assets/readme-assets/screenshot_1692005135.png?raw=true&amp;amp;1&#34; alt=&#34;Screenshot&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is a loose implementation of Clean Architecture as presented in my book, &lt;a href=&#34;https://amzn.to/43cUuhb&#34;&gt;Clean Architecture for Android&lt;/a&gt;. It is a native Android project written in Kotlin. It demonstrates the key principles presented in the book and how they apply to a real life project.&lt;/p&gt; &#xA;&lt;p&gt;I will endeavour to keep this project up to date and use it to demonstrate the strengths of the architecture: &lt;strong&gt;scalability&lt;/strong&gt;, &lt;strong&gt;testability&lt;/strong&gt; and &lt;strong&gt;flexibility&lt;/strong&gt; when it comes to choosing 3rd party solutions.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Feature separation&lt;/li&gt; &#xA; &lt;li&gt;Layer separation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;UI&lt;/li&gt; &#xA;   &lt;li&gt;Presentation&lt;/li&gt; &#xA;   &lt;li&gt;Domain&lt;/li&gt; &#xA;   &lt;li&gt;Data&lt;/li&gt; &#xA;   &lt;li&gt;Data Source&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Unit tests&lt;/li&gt; &#xA; &lt;li&gt;End-to-end tests&lt;/li&gt; &#xA; &lt;li&gt;Demonstrates use of &lt;a href=&#34;https://developer.android.com/jetpack/compose&#34;&gt;Jetpack Compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Demonstrates use of &lt;a href=&#34;https://kotlinlang.org/docs/coroutines-overview.html&#34;&gt;Coroutines&lt;/a&gt; including &lt;a href=&#34;https://kotlinlang.org/docs/flow.html&#34;&gt;Flow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Demonstrates &lt;abbr title=&#34;Model View ViewModel&#34;&gt;MVVM&lt;/abbr&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code quality checks using &lt;a href=&#34;https://github.com/pinterest/ktlint&#34;&gt;ktlint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code quality checks using &lt;a href=&#34;https://github.com/detekt/detekt&#34;&gt;detekt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Continuous integration (CI) using &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unit tests&lt;/li&gt; &#xA;   &lt;li&gt;Instrumentation tests&lt;/li&gt; &#xA;   &lt;li&gt;Linting&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Choices&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Mappers as classes&lt;/strong&gt;&lt;/em&gt; &lt;strong&gt;vs.&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;mapping extension functions&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;When mapping between models, we have several options. The primary decision is between mapper classes and mapping extension functions.&lt;/p&gt; &lt;p&gt;While extension functions are more concise, using them for mapping limits our choices of testing frameworks (&lt;a href=&#34;https://site.mockito.org/&#34;&gt;Mockito&lt;/a&gt;, for example, cannot stub static functions).&lt;/p&gt; &lt;p&gt;How about injecting the mapper extension functions? We could do that. However, this removes the benefits of conciseness almost entirely. It also makes navigation to the implementation harder.&lt;/p&gt; &lt;p&gt;And so, I opted for the slightly more verbose concrete mapper classes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Skipping Google&#39;s &lt;a href=&#34;https://developer.android.com/reference/androidx/lifecycle/package-summary&#34;&gt;Architecture Components&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The greatest issue with Google&#39;s Architecture Components is that they leak Android details into the Presentation layer. This prevents the Presentation layer from being truly UI agnostic.&lt;/p&gt; &lt;p&gt;Another issue with the Architecture Components is that they give too much responsibility to the ViewModel. They make it persist state it does not own, leading to potential data synchronization bugs.&lt;/p&gt; &lt;p&gt;For these reasons, while still following MVVM, this project relies on &lt;strong&gt;Kotlin Flows&lt;/strong&gt; rather than &lt;strong&gt;LiveData&lt;/strong&gt;, and implements pure ViewModels rather than Google&#39;s.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mocking framework&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Both &lt;a href=&#34;https://github.com/mockito/mockito-kotlin&#34;&gt;Mockito-Kotlin&lt;/a&gt; and &lt;a href=&#34;https://mockk.io/&#34;&gt;Mockk&lt;/a&gt; are used in this project to demonstrate how the use of each would look.&lt;/p&gt; &lt;p&gt;My personal preference remains &lt;strong&gt;Mockito-Kotlin&lt;/strong&gt;. I find the code easier to read and follow when using it. At the time of writing, judging by the number of stars on each repository, the industry seems to lean towards Mockk.&lt;/p&gt; &lt;p&gt;I was asked about using &lt;em&gt;fakes&lt;/em&gt;. I have explored fakes, and found them to be overly verbose and too expensive to maintain.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dependency injection framework&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;A critical part of most modern apps, dependency injection (DI) helps us obtain the objects that build our app. It also helps manage their scope. The most popular choices in the Android world are &lt;a href=&#34;https://dagger.dev/hilt/&#34;&gt;Hilt&lt;/a&gt; (which is built on top of &lt;a href=&#34;https://dagger.dev/&#34;&gt;Dagger&lt;/a&gt;) and &lt;a href=&#34;https://insert-koin.io/&#34;&gt;Koin&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Hilt&lt;/strong&gt; was chosen for two main reasons:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Compile time safety&lt;/strong&gt; - having the confidence that all my dependencies are provided before the app starts is a huge time saver and helps maintain a stable app.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Simplicity&lt;/strong&gt; - from experience, setting up and using Hilt (unlike the underlying Dagger) is considerably easier than using Koin. Hilt also introduces fewer breaking changes over time.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;XML&lt;/strong&gt;&lt;/em&gt; &lt;strong&gt;vs&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;Jetpack Compose&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Why not both? I still have a lot of concerns around &lt;strong&gt;Jetpack Compose&lt;/strong&gt;. Even so, it was important to me to show the presented architecture works well regardless of the UI mechanism chosen. As an exercise, I invite you to try and replace the UI layer from Compose to XML or vice versa without updating the Presentation layer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Links&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://amzn.to/43cUuhb&#34; title=&#34;Clean Architecture for Android&#34;&gt;Clean Architecture for Android on Amazon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34; title=&#34;Clean Architecture&#34;&gt;Clean Architecture on the Clean Coder Blog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Contributions to this project are welcome. Please feel free to report any issues or fork to make changes and raise a pull request.&lt;/p&gt; &#xA;&lt;h3&gt;Licence&lt;/h3&gt; &#xA;&lt;p&gt;This project is distributed under the terms of the MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/EranBoudjnah/CleanArchitectureForAndroid/master/LICENSE&#34;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sahaj-nano/nano-demo-calculator-app</title>
    <updated>2023-08-20T01:50:35Z</updated>
    <id>tag:github.com,2023-08-20:/sahaj-nano/nano-demo-calculator-app</id>
    <link href="https://github.com/sahaj-nano/nano-demo-calculator-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Demo app to test and get used to the demo envrionment&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://nano.sahaj.ai/27ad2091b1714f583886.png&#34; width=&#34;320&#34; height=&#34;162&#34; alt=&#34;Logo&#34; title=&#34;NaN(O) logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What is NaN(O)&lt;/h2&gt; &#xA;&lt;p&gt;At Sahaj, tech consultants operate at the intersection between engineering and art. Simply put, they are artisans who take on complex engineering problems in the software industry across a wide spectrum of domains. Their work is deeply rooted in first principles thinking - asking fundamental questions to dissect and understand a problem which eventually leads to one-of-a-kind solutions, each as distinct as a fingerprint.&lt;/p&gt; &#xA;&lt;p&gt;Through NaN(O), a coding event driven by Sahaj across multiple colleges in India, they want to instil a culture of applying first principles thinking to a problem statement.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Problem statement&lt;/h2&gt; &#xA;&lt;p&gt;This is a &lt;strong&gt;demo repository&lt;/strong&gt; for a test taker to get a feel of how the testing on the system works and how to submit a successful solution. The actual problem employees similar testing strategies.&lt;/p&gt; &#xA;&lt;p&gt;The problem statement is to create an actual calculator with a couple of endpoints. The structure of request response has been shared with the user.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;API contract&lt;/h4&gt; &#xA;&lt;h5&gt;GET /caluclator/greeting&lt;/h5&gt; &#xA;&lt;p&gt;Checks whether the service is available.&lt;/p&gt; &#xA;&lt;h6&gt;Response&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Code: 200&lt;/li&gt; &#xA; &lt;li&gt;Content: &lt;code&gt;Hello world!&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;POST /calculator/add&lt;/h5&gt; &#xA;&lt;p&gt;Adds two given numbers&lt;/p&gt; &#xA;&lt;h6&gt;Request &amp;amp; Response headers&lt;/h6&gt; &#xA;&lt;p&gt;Content-Type: application/json&lt;/p&gt; &#xA;&lt;h6&gt;Body&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code&gt;{  &#xA;    first: number,&#xA;    second: number &#xA;}  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Success Response&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Status code: 200&lt;/li&gt; &#xA; &lt;li&gt;Content: &lt;code&gt;{ result: result-of-the-summation }&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;POST /calculator/subtract&lt;/h5&gt; &#xA;&lt;p&gt;Subtracts two given numbers&lt;/p&gt; &#xA;&lt;h6&gt;Request &amp;amp; Response headers&lt;/h6&gt; &#xA;&lt;p&gt;Content-Type: application/json&lt;/p&gt; &#xA;&lt;h6&gt;Body&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code&gt;{  &#xA;    first: number,&#xA;    second: number&#xA;}  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Success Response&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Status code: 200&lt;/li&gt; &#xA; &lt;li&gt;Content: &lt;code&gt;{ result: result-of-the-subtraction }&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;How to submit a solution&lt;/h6&gt; &#xA;&lt;p&gt;In order to submit a solution, follow these steps.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the &lt;strong&gt;nano-demo-calculator-app&lt;/strong&gt; repository (&lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/fork-a-repo&#34;&gt;How to fork a repository github&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Deselect the &#34;Copy the main branch only&#34; to copy other language demos as well&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clone the forked repository (&lt;a href=&#34;https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository&#34;&gt;How to clone a repository github&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Change the branch according to the language of your choice (This demo is available in (language-&amp;gt; branch) &#34;kotlin&#34;-&amp;gt; main, &#34;node&#34; -&amp;gt; &#34;node&#34;, &#34;python&#34; -&amp;gt; &#34;python&#34;, &#34;cpp&#34; -&amp;gt; &#34;cpp&#34; ) (&lt;a href=&#34;https://www.freecodecamp.org/news/git-switch-branch/&#34;&gt;How to change branches git &lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Enable workflows in your github fork (Under the actions tab -&amp;gt; Select &#34;I understand my workflows, go ahead and enable them&#34; to enable the test workflow)&lt;/li&gt; &#xA; &lt;li&gt;Use your favourite editor to make changes&lt;/li&gt; &#xA; &lt;li&gt;Create a commit after testing it locally (&lt;a href=&#34;https://github.com/git-guides/git-commit&#34;&gt;How to commit git&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push the commit to the remote &lt;strong&gt;to the same branch&lt;/strong&gt; (github repo) (&lt;a href=&#34;https://docs.github.com/en/get-started/using-git/pushing-commits-to-a-remote-repository&#34;&gt;How to push git&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;If all your changes work well, you will see a green tick on the actions section on your repo under the selected branch (&lt;a href=&#34;https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/viewing-workflow-run-history&#34;&gt;How to see last run action&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If it&#39;s a cross mark, the logs will tell you what you did wrong.&lt;/li&gt; &#xA;   &lt;li&gt;Fix the issue, and repeat steps 4+ to resubmit&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Congratulations, you have successfully solved the dummy problem and are ready for the actual event.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Hint&lt;/h6&gt; &#xA;&lt;p&gt;An actual solution is present in one of the commits. If you revert the commit with the message &#34;Remove actual answers&#34;, you should be able to get to a working solution&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iamr0s/InstallerX</title>
    <updated>2023-08-20T01:50:35Z</updated>
    <id>tag:github.com,2023-08-20:/iamr0s/InstallerX</id>
    <link href="https://github.com/iamr0s/InstallerX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern and functional Android app installer. (You know some birds are not meant to be caged, their feathers are just too bright.)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;InstallerX&lt;/h1&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;一款应用安装程序，为什么不试试【InstallerX】？&lt;/p&gt; &#xA;&lt;p&gt;在国产系统的魔改下，许多系统的自带安装程序体验并不是很好，你可以使用【InstallerX】替换掉系统默认安装程序。&lt;/p&gt; &#xA;&lt;p&gt;当然，相对于原生系统，【InstallerX】也带来了更多的安装选项：对话框安装、通知栏安装、自动安装、声明安装者、选择是否安装到所有用户空间、允许测试包、允许降级安装、安装后自动删除安装包。&lt;/p&gt; &#xA;&lt;h2&gt;支持版本&lt;/h2&gt; &#xA;&lt;p&gt;Android 5.0 ~ 13&lt;/p&gt; &#xA;&lt;h2&gt;下载&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.coolapk.com/apk/933870&#34;&gt;酷安&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pd.qq.com/s/nx7jpup8&#34;&gt;QQ频道&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qm.qq.com/cgi-bin/qm/qr?k=YMyAigxnns_FkISlRaormMiApHr2RmU7&amp;amp;jump_from=webapi&amp;amp;qr=1&#34;&gt;QQ群组（官方）&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;捐赠支持&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qr.alipay.com/fkx18580lfpydiop04dze47&#34;&gt;支付宝&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://missuo.ru/file/fee5df1381671c996b127.png&#34;&gt;微信&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://missuo.ru/file/28368c28d4ff28d59ed4b.jpg&#34;&gt;币安&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;开源协议&lt;/h2&gt; &#xA;&lt;p&gt;InstallerX目前基于 &lt;a href=&#34;http://www.gnu.org/copyleft/gpl.html&#34;&gt;&lt;strong&gt;GNU General Public License v3 (GPL-3)&lt;/strong&gt;&lt;/a&gt; 开源，但不保证未来依然继续遵循此协议或开源，有权更改开源协议或开源状态。&lt;/p&gt; &#xA;&lt;p&gt;当您选择基于InstallerX进行开发时，需遵循所当前依赖的上游源码所规定的开源协议，不受新上游源码的开源协议影响。&lt;/p&gt;</summary>
  </entry>
</feed>