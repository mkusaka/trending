<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-16T01:58:00Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>raamcosta/compose-destinations</title>
    <updated>2023-07-16T01:58:00Z</updated>
    <id>tag:github.com,2023-07-16:/raamcosta/compose-destinations</id>
    <link href="https://github.com/raamcosta/compose-destinations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Annotation processing library for type-safe Jetpack Compose navigation with no boilerplate.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/io.github.raamcosta.compose-destinations/core&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-metadata/v?color=blue&amp;amp;metadataUrl=https://s01.oss.sonatype.org/service/local/repo_groups/public/content/io/github/raamcosta/compose-destinations/core/maven-metadata.xml&amp;amp;style=for-the-badge&#34; alt=&#34;Maven metadata URL&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/raamcosta/compose-destinations.svg?style=for-the-badge&amp;amp;color=orange&#34; alt=&#34;License Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/api-21%2B-brightgreen.svg?style=for-the-badge&#34; alt=&#34;Android API&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/top/raamcosta/compose-destinations.svg?style=for-the-badge&amp;amp;color=blueviolet&#34; alt=&#34;kotlin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;250&#34; src=&#34;https://user-images.githubusercontent.com/80427734/147891822-5cd34c80-8dca-4d34-8278-2aa3bf36913f.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz&#34;&gt;Compose Destinations&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt;A KSP library that processes annotations and generates code that uses Official Jetpack Compose Navigation under the hood. It hides the complex, non-type-safe and boilerplate code you would have to write otherwise. &lt;br&gt; No need to learn a whole new framework to navigate - most APIs are either the same as with the Jetpack Components or inspired by them.&lt;/p&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Typesafe navigation arguments&lt;/li&gt; &#xA; &lt;li&gt;Simple but configurable navigation graphs setup&lt;/li&gt; &#xA; &lt;li&gt;Navigating back with a result in a simple and type-safe way&lt;/li&gt; &#xA; &lt;li&gt;Getting the navigation arguments from the &lt;code&gt;SavedStateHandle&lt;/code&gt; (useful in ViewModels) and &lt;code&gt;NavBackStackEntry&lt;/code&gt; in a type-safe way.&lt;/li&gt; &#xA; &lt;li&gt;Navigation animations&lt;/li&gt; &#xA; &lt;li&gt;Bottom sheet screens through integration with &lt;a href=&#34;https://github.com/google/accompanist/tree/main/navigation-material&#34;&gt;Accompanist Navigation-Material&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Easy deep linking to screens&lt;/li&gt; &#xA; &lt;li&gt;Wear OS support (since versions 1.x.30!)&lt;/li&gt; &#xA; &lt;li&gt;All you can do with Official Jetpack Compose Navigation but in a simpler safer way!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a deeper look into all the features, check our &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz&#34;&gt;documentation website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Materials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alex Styl&#39;s quick introduction videos &lt;a href=&#34;https://www.composables.co/courses/destination-compose&#34;&gt;&lt;em&gt;Navigate using the Compose Destinations library&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Philipp Lackner&#39;s Youtube video &lt;a href=&#34;https://www.youtube.com/watch?v=Q3iZyW2etm4&#34;&gt;&lt;em&gt;Compose Navigation Just Got SO MUCH EASIER&lt;/em&gt; üò±&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rafael Costa&#39;s blog post &lt;a href=&#34;https://proandroiddev.com/compose-destinations-simpler-and-safer-navigation-in-compose-with-no-compromises-74a59c6b727d&#34;&gt;&lt;em&gt;Compose Destinations: simpler and safer navigation in Compose with no compromises&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Yanneck Rei√ü&#39;s blog post &lt;a href=&#34;https://medium.com/codex/type-save-navigation-with-jetpack-compose-destinations-610514e85370&#34;&gt;&lt;em&gt;Type Safe Navigation With Jetpack Compose Destinations&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google Dev Expert Kenji Abe&#39;s blog post &lt;a href=&#34;https://star-zero.medium.com/navigation-compose%E3%82%92%E4%BE%BF%E5%88%A9%E3%81%AB%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%E3%82%8B%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA-c2d0133b3e84&#34;&gt;&lt;em&gt;Navigation Compose„Çí‰æøÂà©„Å´„Åó„Å¶„Åè„Çå„Çã„É©„Ç§„Éñ„É©„É™&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;aseem wangoo&#39;s blog post (and Youtube video inside): &lt;a href=&#34;https://flatteredwithflutter.com/using-compose-destinations%ef%bf%bc/&#34;&gt;&lt;em&gt;Using compose destinations&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vincent Tsen post in Android Kotlin Weekly &lt;a href=&#34;https://vtsen.hashnode.dev/compose-destinations-navigation-library#heading-build-navigation-graph&#34;&gt;&lt;em&gt;How to convert your Jetpack Compose navigation app to use Compose Destinations Library to get rid of boilerplate code?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Annotate your screen Composables with &lt;code&gt;@Destination&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Destination&#xA;@Composable&#xA;fun ProfileScreen() { /*...*/ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add navigation arguments to the function declaration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@Destination&#xA;@Composable&#xA;fun ProfileScreen(&#xA;   id: Int, // &amp;lt;-- required navigation argument&#xA;   groupName: String?, // &amp;lt;-- optional navigation argument&#xA;   isOwnUser: Boolean = false // &amp;lt;-- optional navigation argument&#xA;) { /*...*/ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Parcelable&lt;/code&gt;, &lt;code&gt;Serializable&lt;/code&gt;, &lt;code&gt;Enum&lt;/code&gt; and classes annotated with &lt;a href=&#34;https://github.com/Kotlin/kotlinx.serialization&#34;&gt;&lt;code&gt;@kotlinx.serialization.Serializable&lt;/code&gt;&lt;/a&gt; (as well as &lt;code&gt;Array&lt;/code&gt;s and &lt;code&gt;ArrayList&lt;/code&gt;s of these) work out of the box! You can also make any other type a navigation argument type. Read about it &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz/destination-arguments/navigation-arguments#custom-navigation-argument-types&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There is an alternative way to define the destination arguments in case you don&#39;t need to use them inside the Composable (as is likely the case when using ViewModel). Read more &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz/destination-arguments/navigation-arguments#navigation-arguments-class-delegate&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project (or &lt;code&gt;./gradlew kspDebugKotlin&lt;/code&gt;, which should be faster) to generate all the Destinations. With the above annotated composable, a &lt;code&gt;ProfileScreenDestination&lt;/code&gt; file (that we&#39;ll use in step 4) would be generated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the generated &lt;code&gt;[ComposableName]Destination&lt;/code&gt; invoke method to navigate to it. It will have the correct typed arguments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@RootNavGraph(start = true) // sets this as the start destination of the default nav graph&#xA;@Destination&#xA;@Composable&#xA;fun HomeScreen(&#xA;   navigator: DestinationsNavigator&#xA;) {&#xA;   /*...*/&#xA;   navigator.navigate(ProfileScreenDestination(id = 7, groupName = &#34;Kotlin programmers&#34;))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;DestinationsNavigator is a wrapper interface to NavController that if declared as a parameter, will be provided for free by the library. NavController can also be provided in the exact same way, but it ties your composables to a specific implementation which will make it harder to test and preview. Read more &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz/navigation/basics#destinationsnavigator-vs-navcontroller&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Finally, add the NavHost call:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;DestinationsNavHost(navGraph = NavGraphs.root)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;NavGraphs&lt;/code&gt; is a generated file that describes your navigation graphs and their destinations. By default all destinations will belong to &#34;root&#34; (@RootNavGraph), but you can create your own nav graphs annotations to have certain screens in other navigation graphs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This call adds all annotated Composable functions as destinations of the Navigation Host.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it! No need to worry about routes, &lt;code&gt;NavType&lt;/code&gt;, bundles and strings. All that redundant and error-prone code gets generated for you.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Compose destinations is available via maven central.&lt;/p&gt; &#xA;&lt;h4&gt;1. Add the KSP plugin:&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The version you chose for the KSP plugin depends on the Kotlin version your project uses. &lt;br&gt; You can check &lt;a href=&#34;https://github.com/google/ksp/releases&#34;&gt;https://github.com/google/ksp/releases&lt;/a&gt; for the list of KSP versions, then pick the last release that matches your Kotlin version. Example: If you&#39;re using &lt;code&gt;1.8.20&lt;/code&gt; Kotlin version, then the last KSP version is &lt;code&gt;1.8.20-1.0.10&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;groovy - build.gradle(:module-name)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;plugins {&#xA;    //...&#xA;    id &#39;com.google.devtools.ksp&#39; version &#39;1.8.20-1.0.10&#39; // Depends on your kotlin version&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;kotlin - build.gradle.kts(:module-name)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;plugins {&#xA;    //...&#xA;    id(&#34;com.google.devtools.ksp&#34;) version &#34;1.8.20-1.0.10&#34; // Depends on your kotlin version&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;2. Add the dependencies:&lt;/h4&gt; &#xA;&lt;p&gt;Compose Destinations has multiple active versions. The higher one uses the latest versions for Compose and Accompanist, while the others use only stable versions. Choose the one that matches your Compose version, considering this table:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compose 1.1 (1.1.x)&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img alt=&#34;Maven Central&#34; src=&#34;https://img.shields.io/maven-metadata/v?versionPrefix=1.5&amp;amp;color=blue&amp;amp;metadataUrl=https://s01.oss.sonatype.org/service/local/repo_groups/public/content/io/github/raamcosta/compose-destinations/core/maven-metadata.xml&amp;amp;style=for-the-badge)%5D(https://maven-badges.herokuapp.com/maven-central/io.github.raamcosta.compose-destinations/core)&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compose 1.2 (1.2.x)&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img alt=&#34;Maven Central&#34; src=&#34;https://img.shields.io/maven-metadata/v?versionPrefix=1.6&amp;amp;color=blue&amp;amp;metadataUrl=https://s01.oss.sonatype.org/service/local/repo_groups/public/content/io/github/raamcosta/compose-destinations/core/maven-metadata.xml&amp;amp;style=for-the-badge)%5D(https://maven-badges.herokuapp.com/maven-central/io.github.raamcosta.compose-destinations/core)&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compose 1.3 (1.3.x)&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img alt=&#34;Maven Central&#34; src=&#34;https://img.shields.io/maven-metadata/v?versionPrefix=1.7&amp;amp;color=blue&amp;amp;metadataUrl=https://s01.oss.sonatype.org/service/local/repo_groups/public/content/io/github/raamcosta/compose-destinations/core/maven-metadata.xml&amp;amp;style=for-the-badge)%5D(https://maven-badges.herokuapp.com/maven-central/io.github.raamcosta.compose-destinations/core)&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compose 1.4 (1.4.x)&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img alt=&#34;Maven Central&#34; src=&#34;https://img.shields.io/maven-metadata/v?versionPrefix=1.8&amp;amp;color=blue&amp;amp;metadataUrl=https://s01.oss.sonatype.org/service/local/repo_groups/public/content/io/github/raamcosta/compose-destinations/core/maven-metadata.xml&amp;amp;style=for-the-badge)%5D(https://maven-badges.herokuapp.com/maven-central/io.github.raamcosta.compose-destinations/core)&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compose 1.5 (1.5.x)&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img alt=&#34;Maven Central&#34; src=&#34;https://img.shields.io/maven-metadata/v?versionPrefix=1.9&amp;amp;color=blue&amp;amp;metadataUrl=https://s01.oss.sonatype.org/service/local/repo_groups/public/content/io/github/raamcosta/compose-destinations/core/maven-metadata.xml&amp;amp;style=for-the-badge)%5D(https://maven-badges.herokuapp.com/maven-central/io.github.raamcosta.compose-destinations/core)&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: If you choose a version that uses a higher version of Compose than the one you&#39;re setting for your app, gradle will upgrade your Compose version via transitive dependency.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;groovy - build.gradle(:module-name)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;implementation &#39;io.github.raamcosta.compose-destinations:core:&amp;lt;version&amp;gt;&#39;&#xA;ksp &#39;io.github.raamcosta.compose-destinations:ksp:&amp;lt;version&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;kotlin - build.gradle.kts(:module-name)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;implementation(&#34;io.github.raamcosta.compose-destinations:core:&amp;lt;version&amp;gt;&#34;)&#xA;ksp(&#34;io.github.raamcosta.compose-destinations:ksp:&amp;lt;version&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you want to use bottom sheet screens, replace above core dependency with: &lt;br&gt; &lt;code&gt;implementation &#39;io.github.raamcosta.compose-destinations:animations-core:&amp;lt;version&amp;gt;&#39;&lt;/code&gt; &lt;br&gt; this will use &lt;a href=&#34;https://github.com/google/accompanist/tree/main/navigation-material&#34;&gt;Accompanist Navigation-Material&lt;/a&gt; internally. &lt;br&gt; Read more about the next steps to configure these features &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz/styles-and-animations&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you want to use Compose Destinations in a &lt;strong&gt;Wear OS&lt;/strong&gt; app, replace above core dependency with: &lt;br&gt; &lt;code&gt;implementation &#39;io.github.raamcosta.compose-destinations:wear-core:&amp;lt;version&amp;gt;&#39;&lt;/code&gt; &lt;br&gt; this will use &lt;a href=&#34;https://developer.android.com/training/wearables/compose/navigation&#34;&gt;Wear Compose Navigation&lt;/a&gt; internally. &lt;br&gt; Read more about the next steps to configure these features &lt;a href=&#34;https://composedestinations.rafaelcosta.xyz/wear-os&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;3. Important for Kotlin &amp;lt; 1.8.0&lt;/h4&gt; &#xA;&lt;p&gt;When using Kotlin version older than 1.8.0, you need to make sure the IDE looks at the generated folder. See KSP related &lt;a href=&#34;https://github.com/google/ksp/issues/37&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;How to do it depends on the AGP version you are using in this case:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: In both cases, add this inside &lt;code&gt;android&lt;/code&gt; block and replacing &lt;code&gt;applicationVariants&lt;/code&gt; with &lt;code&gt;libraryVariants&lt;/code&gt; if the module is not an application one (i.e, it uses &lt;code&gt;&#39;com.android.library&#39;&lt;/code&gt; plugin).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Since AGP (Android Gradle Plugin) version 7.4.0&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;groovy - build.gradle(:module-name)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;applicationVariants.all { variant -&amp;gt;&#xA;    variant.addJavaSourceFoldersToModel(&#xA;            new File(buildDir, &#34;generated/ksp/${variant.name}/kotlin&#34;)&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;kotlin - build.gradle.kts(:module-name)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;applicationVariants.all {&#xA;    addJavaSourceFoldersToModel(&#xA;        File(buildDir, &#34;generated/ksp/$name/kotlin&#34;)&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;For AGP (Android Gradle Plugin) version older than 7.4.0&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;groovy - build.gradle(:module-name)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;applicationVariants.all { variant -&amp;gt;&#xA;    kotlin.sourceSets {&#xA;        getByName(variant.name) {&#xA;            kotlin.srcDir(&#34;build/generated/ksp/${variant.name}/kotlin&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;kotlin - build.gradle.kts(:module-name)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;applicationVariants.all {&#xA;    kotlin.sourceSets {&#xA;        getByName(name) {&#xA;            kotlin.srcDir(&#34;build/generated/ksp/$name/kotlin&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;The library is no longer in general beta as of 1.9.50.&lt;/p&gt; &#xA;&lt;p&gt;Version 2 is coming out very soon with API improvements, quality-of-life improvements, and support for mandatory arguments when navigating to a Navigation graph.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing, reach out via &lt;a href=&#34;https://twitter.com/raamcosta&#34;&gt;twitter DM&lt;/a&gt;. Any feedback and contributions are highly appreciated!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you like the library, consider starring and sharing it with your colleagues.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RookieTree/DaMaiHelper</title>
    <updated>2023-07-16T01:58:00Z</updated>
    <id>tag:github.com,2023-07-16:/RookieTree/DaMaiHelper</id>
    <link href="https://github.com/RookieTree/DaMaiHelper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Â§ßÈ∫¶Êä¢Á•®ËæÖÂä©&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DaMaiHelper&lt;/h1&gt; &#xA;&lt;p&gt;Â§ßÈ∫¶Êä¢Á•®ËæÖÂä©ÔºàÂè™Êä¢ÂæÖÂºÄÊä¢‰∏≠ÁöÑÔºâ&lt;br&gt; ÈªòËÆ§Êä¢‰∫îÊúàÂ§©Ê∑±Âú≥Âú∫&lt;br&gt; Ê≥®:Êä¢‰∏çÂà∞‰∏çË¥üË¥£ÂìàüòÅüòÅüòÅÔºåÊú¨‰∫∫Âè™ÊòØËØïËØïÊâã&lt;br&gt; Â§ß‰Ω¨‰ª¨ÂèØ‰ª•Ëá™Â∑±‰∏ã‰ª£Á†ÅÂéª‰øÆÊîπÂìà&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‰ΩìÈ™åÂú∞ÂùÄÔºàËí≤ÂÖ¨Ëã±Ôºâ&lt;/h2&gt; &#xA;&lt;img src=&#34;Ëí≤ÂÖ¨Ëã±Âú∞ÂùÄ.png&#34; height=&#34;30%&#34; width=&#34;30%&#34;&gt; &#xA;&lt;h2&gt;Ê≥®ÊÑèÔºö‰∏ÄÂÆöË¶ÅÊèêÂâçÈÄâÂ•ΩÂú∫Ê¨°„ÄÅ‰ª∑Ê†ºËøòÊúâËßÇÂΩ±‰∫∫ÔºåÊî∂ËóèÂà∞ÊÉ≥Áúã&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/RookieTree/DaMaiHelper/master/xkan.png&#34; height=&#34;30%&#34; width=&#34;30%&#34;&gt; &#xA;&lt;h2&gt;Êìç‰ΩúÊ≠•È™§&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ÂÖàÂéªÊºîÂî±‰ºö‰∏ªÈ°µÈ¢ÑÈÄâÂ•ΩÂú∫Ê¨°„ÄÅ‰ª∑Ê†ºËøòÊúâËßÇÊºî‰∫∫ÔºåÁÇπÂáªÊÉ≥Áúã&lt;/li&gt; &#xA; &lt;li&gt;ÔºàÂèØÈÄâÔºâÊâãÊú∫ÂêéÂè∞ÊùÄÊéâÂ§ßÈ∫¶app‰ªªÂä°&lt;/li&gt; &#xA; &lt;li&gt;ÊâìÂºÄËæÖÂä©appÔºåÁªô‰∫éÂØπÂ∫îÊùÉÈôê&lt;/li&gt; &#xA; &lt;li&gt;ÔºàÂèØÈÄâÔºâËæìÂÖ•Ê≠åÊâãÂêçÂ≠óÔºåÈªòËÆ§‰∫îÊúàÂ§©&lt;/li&gt; &#xA; &lt;li&gt;ÁÇπÂáªÂºÄÊä¢ÊåâÈíÆÂç≥ÂèØ&lt;/li&gt; &#xA; &lt;li&gt;Â¶ÇÊûúÁÇπÂáªÂºÄÊä¢ÂêéÔºåÈ°µÈù¢Êú™ÂºÄÂßãËá™Âä®Ë∑≥ËΩ¨ÔºåÂèØÊâãÂä®ÊùÄÊ≠ªÂ§ßÈ∫¶ÔºåÂÜçÊ¨°ÂàáÂà∞ËæÖÂä©appÁÇπÂáªÂºÄÊä¢&lt;br&gt; Â¶ÇÊûúÊÉ≥ÁªàÊ≠¢ËæÖÂä©appÔºåÁÇπÂáªÂè≥‰∏äËßíÊÇ¨ÊµÆÁ™ó&amp;lt;ÁÇπÂáªÂÅúÊ≠¢&amp;gt;Âç≥ÂèØ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;ÊºîÁ§∫Êìç‰ΩúËßÜÈ¢ë&lt;/h2&gt; &#xA;&lt;img src=&#34;Êìç‰ΩúËßÜÈ¢ë.gif&#34; height=&#34;30%&#34; width=&#34;30%&#34;&gt; ps:Âõ†‰∏∫ÊºîÁ§∫‰∏≠ÔºåÊàëÊ≤°ÊúâÈ¢ÑÈÄâÂú∫Ê¨°„ÄÅ‰ª∑Ê†ºÔºåÊâÄ‰ª•ÈúÄË¶ÅÊâãÂä®ÈÄâ‰∏Ä‰∏ã</summary>
  </entry>
  <entry>
    <title>vector-im/element-x-android</title>
    <updated>2023-07-16T01:58:00Z</updated>
    <id>tag:github.com,2023-07-16:/vector-im/element-x-android</id>
    <link href="https://github.com/vector-im/element-x-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android Matrix messenger application using the Matrix Rust Sdk and Jetpack Compose&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/vector-im/element-x-android/actions/workflows/build.yml?query=branch%3Adevelop&#34;&gt;&lt;img src=&#34;https://github.com/vector-im/element-x-android/actions/workflows/build.yml/badge.svg?query=branch%3Adevelop&#34; alt=&#34;Latest build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=vector-im_element-x-android&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=vector-im_element-x-android&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=vector-im_element-x-android&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=vector-im_element-x-android&amp;amp;metric=vulnerabilities&#34; alt=&#34;Vulnerabilities&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=vector-im_element-x-android&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=vector-im_element-x-android&amp;amp;metric=bugs&#34; alt=&#34;Bugs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/vector-im/element-x-android&#34;&gt;&lt;img src=&#34;https://codecov.io/github/vector-im/element-x-android/branch/develop/graph/badge.svg?token=ecwvia7amV&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#element-android:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/element-android:matrix.org.svg?label=%23element-android:matrix.org&amp;amp;logo=matrix&amp;amp;server_fqdn=matrix.org&#34; alt=&#34;Element Android Matrix room #element-android:matrix.org&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://translate.element.io/engage/element-android/?utm_source=widget&#34;&gt;&lt;img src=&#34;https://translate.element.io/widgets/element-android/-/svg-badge.svg?sanitize=true&#34; alt=&#34;Weblate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;element-x-android&lt;/h1&gt; &#xA;&lt;p&gt;ElementX Android is a &lt;a href=&#34;https://matrix.org/&#34;&gt;Matrix&lt;/a&gt; Android Client provided by &lt;a href=&#34;https://element.io/&#34;&gt;Element&lt;/a&gt;. This app is currently in a pre-alpha release stage with only basic functionality.&lt;/p&gt; &#xA;&lt;p&gt;The application is a total rewrite of &lt;a href=&#34;https://github.com/vector-im/element-android&#34;&gt;Element-Android&lt;/a&gt; using the &lt;a href=&#34;https://github.com/matrix-org/matrix-rust-sdk&#34;&gt;Matrix Rust SDK&lt;/a&gt; underneath and targeting devices running Android 6+. The UI layer is written using Jetpack compose.&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/#rust-sdk&#34;&gt;Rust SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/#build-instructions&#34;&gt;Build instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/#copyright-&amp;amp;-license&#34;&gt;Copyright &amp;amp; License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END --&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Here are some early screenshots of the application:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/docs/images/screen1.png&#34; width=&#34;280&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/docs/images/screen2.png&#34; width=&#34;280&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/docs/images/screen3.png&#34; width=&#34;280&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/docs/images/screen4.png&#34; width=&#34;280&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Rust SDK&lt;/h2&gt; &#xA;&lt;p&gt;ElementX leverages the &lt;a href=&#34;https://github.com/matrix-org/matrix-rust-sdk&#34;&gt;Matrix Rust SDK&lt;/a&gt; through an FFI layer that the final client can directly import and use.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re doing this as a way to share code between platforms and while we&#39;ve seen promising results it&#39;s still in the experimental stage and bound to change.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is in work in progress. The app does not cover yet all functionalities we expect.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Come chat with the community in the dedicated Matrix &lt;a href=&#34;https://matrix.to/#/#element-android:matrix.org&#34;&gt;room&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;p&gt;Just clone the project and open it in Android Studio. Makes sure to select the &lt;code&gt;app&lt;/code&gt; configuration when building (as we also have sample apps in the project).&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;When you are experiencing an issue on ElementX Android, please first search in &lt;a href=&#34;https://github.com/vector-im/element-x-android/issues&#34;&gt;GitHub issues&lt;/a&gt; and then in &lt;a href=&#34;https://matrix.to/#/#element-android:matrix.org&#34;&gt;#element-android:matrix.org&lt;/a&gt;. If after your research you still have a question, ask at &lt;a href=&#34;https://matrix.to/#/#element-android:matrix.org&#34;&gt;#element-android:matrix.org&lt;/a&gt;. Otherwise feel free to create a GitHub issue if you encounter a bug or a crash, by explaining clearly in detail what happened. You can also perform bug reporting (Rageshake) from the Element application by shaking your phone or going to the application settings. This is especially recommended when you encounter a crash.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright &amp;amp; License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2022 New Vector Ltd&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this work except in compliance with the License. You may obtain a copy of the License in the &lt;a href=&#34;https://raw.githubusercontent.com/vector-im/element-x-android/develop/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file, or at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
</feed>