<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-02T01:50:36Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Cateners/tiny_computer</title>
    <updated>2024-06-02T01:50:36Z</updated>
    <id>tag:github.com,2024-06-02:/Cateners/tiny_computer</id>
    <link href="https://github.com/Cateners/tiny_computer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Click-to-run debian 12 xfce on android for Chinese users, with fcitx pinyin input method and some useful packages preinstalled. No termux required.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;小小电脑&lt;/h1&gt; &#xA;&lt;img decoding=&#34;async&#34; src=&#34;https://raw.githubusercontent.com/Cateners/tiny_computer/master/readme/cover0.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;给所有安卓arm64设备的“PC应用引擎”平替&lt;/p&gt; &#xA;&lt;p&gt;Click-to-run debian bookworm xfce on android for Chinese users, with fcitx pinyin input method preinstalled. No termux required.&lt;/p&gt; &#xA;&lt;h2&gt;特点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一键安装，即开即用&lt;/li&gt; &#xA; &lt;li&gt;来自kali-undercover的win10主题(仅xfce版本)，友好的界面&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img decoding=&#34;async&#34; src=&#34;https://raw.githubusercontent.com/Cateners/tiny_computer/master/readme/img1.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;提供常用软件的一键安装指令&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img decoding=&#34;async&#34; src=&#34;https://raw.githubusercontent.com/Cateners/tiny_computer/master/readme/img2.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;可方便地改变屏幕缩放，不用担心屏幕过大或过小&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img decoding=&#34;async&#34; src=&#34;https://raw.githubusercontent.com/Cateners/tiny_computer/master/readme/img3.gif&#34; width=&#34;50%&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;便捷访问设备文件，或通过设备SAF访问软件文件&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img decoding=&#34;async&#34; src=&#34;https://raw.githubusercontent.com/Cateners/tiny_computer/master/readme/img4.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;提供终端和众多可调节参数供高级用户使用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img decoding=&#34;async&#34; src=&#34;https://raw.githubusercontent.com/Cateners/tiny_computer/master/readme/img5.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;h2&gt;原理&lt;/h2&gt; &#xA;&lt;p&gt;使用proot运行debian环境&lt;/p&gt; &#xA;&lt;p&gt;内置&lt;a href=&#34;https://github.com/novnc/noVNC&#34;&gt;noVNC&lt;/a&gt;显示图形界面&lt;/p&gt; &#xA;&lt;h2&gt;项目结构&lt;/h2&gt; &#xA;&lt;p&gt;assets的文件来源信息可以在&lt;a href=&#34;https://raw.githubusercontent.com/Cateners/tiny_computer/master/extra/readme.md&#34;&gt;这里&lt;/a&gt;找到。&lt;/p&gt; &#xA;&lt;p&gt;完整的容器制作过程可以在&lt;a href=&#34;https://raw.githubusercontent.com/Cateners/tiny_computer/master/extra/build-tiny-rootfs.md&#34;&gt;这里&lt;/a&gt;看到。&lt;/p&gt; &#xA;&lt;p&gt;数据包不再在assets中更新，而是随releases提供，主要是为了避免git越来越大&lt;/p&gt; &#xA;&lt;p&gt;lib目录：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;main.dart文件，页面布局，有点乱&lt;/li&gt; &#xA; &lt;li&gt;workflow.dart文件，逻辑部分，目前也还可以理解 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Util 工具类&lt;/li&gt; &#xA;   &lt;li&gt;TermPty 一个终端&lt;/li&gt; &#xA;   &lt;li&gt;G 全局变量类&lt;/li&gt; &#xA;   &lt;li&gt;Workflow 从软件点开到容器启动的所有步骤&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;编译&lt;/h2&gt; &#xA;&lt;p&gt;你需要配置好flutter和安卓sdk，然后克隆此项目。&lt;/p&gt; &#xA;&lt;p&gt;在编译之前，需要在release中下载系统rootfs(或者&lt;a href=&#34;https://raw.githubusercontent.com/Cateners/tiny_computer/master/extra/build-tiny-rootfs.md&#34;&gt;自行制作&lt;/a&gt;)，之后使用split命令分割，拷贝到assets。一般我将其分为98MB。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;split -b 98M debian.tar.xz&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;接下来就可以编译了。我使用的命令如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;flutter build apk --target-platform android-arm64 --split-per-abi --obfuscate --split-debug-info=tiny_computer/sdi&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;目前已知bug&lt;/h2&gt; &#xA;&lt;p&gt;多用户/分身情形无法sudo, 其它见issue&lt;/p&gt; &#xA;&lt;h2&gt;一些链接&lt;/h2&gt; &#xA;&lt;p&gt;这是我的第一个flutter软件，感谢这些项目为我指路&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;要一点基础的 &lt;a href=&#34;https://book.flutterchina.club&#34;&gt;《Flutter实战·第二版》&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;也许是零基础的Flutter视频课程 &lt;a href=&#34;https://www.youtube.com/watch?v=wFn-m-OgKPU&amp;amp;list=PL6yRaaP0WPkVtoeNIGqILtRAgd3h2CNpT&#34;&gt;freeCodeCamp Flutter Course&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安卓上的VS Code &lt;a href=&#34;https://github.com/nightmare-space/vscode_for_android&#34;&gt;Code FA&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This project is a starting point for a Flutter application.&lt;/p&gt; &#xA;&lt;p&gt;A few resources to get you started if this is your first Flutter project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.flutter.dev/get-started/codelab&#34;&gt;Lab: Write your first Flutter app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.flutter.dev/cookbook&#34;&gt;Cookbook: Useful Flutter samples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For help getting started with Flutter development, view the &lt;a href=&#34;https://docs.flutter.dev/&#34;&gt;online documentation&lt;/a&gt;, which offers tutorials, samples, guidance on mobile development, and a full API reference.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/kotlinconf-app</title>
    <updated>2024-06-02T01:50:36Z</updated>
    <id>tag:github.com,2024-06-02:/JetBrains/kotlinconf-app</id>
    <link href="https://github.com/JetBrains/kotlinconf-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KotlinConf Schedule Application&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;JetBrains incubator project&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;KotlinConf App&lt;/h1&gt; &#xA;&lt;p&gt;This is the official KotlinConf App! We hope you enjoy(ed) the conference and sessions. This repository contains the source code of the application.&lt;/p&gt; &#xA;&lt;p&gt;All pieces of the application are implemented in &lt;em&gt;Kotlin&lt;/em&gt;. Backend, frontend and mobile apps are Kotlin applications. Yes, Kotlin is powering all parts of the story. Did I already say that? Okay, let&#39;s get to the details:&lt;/p&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;KotlinConf App is connecting to the server running in the cloud to get information about sessions, speakers, favorites and votes. It is developed using &lt;a href=&#34;https://ktor.io&#34;&gt;Ktor&lt;/a&gt;, an asynchronous Kotlin web framework.&lt;/p&gt; &#xA;&lt;p&gt;The server polls &lt;a href=&#34;https://sessionize.com&#34;&gt;Sessionize&lt;/a&gt; service, which is used for planning the conference. Once in a while, it connects to APIs to get the latest information about sessions, speakers, and timeline. It then augments and republishes this information for clients to consume. It also provides a couple of extra APIs to save your favorites and accumulate votes.&lt;/p&gt; &#xA;&lt;h3&gt;iOS, Android, Browser and Desktop Applications&lt;/h3&gt; &#xA;&lt;p&gt;All applications are developed within a single codebase using &lt;a href=&#34;https://kotlinlang.org/docs/multiplatform.html&#34;&gt;Kotlin Multiplatform technology&lt;/a&gt;. The UI is implemented using &lt;a href=&#34;https://www.jetbrains.com/lp/compose-multiplatform/&#34;&gt;Compose Multiplatform UI framework&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to build and run&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JDK &amp;gt;= 17&lt;/li&gt; &#xA; &lt;li&gt;Android Studio with Android SDK&lt;/li&gt; &#xA; &lt;li&gt;XCode with iOS SDK&lt;/li&gt; &#xA; &lt;li&gt;Create a file &lt;code&gt;local.properties&lt;/code&gt; in the root directory of the project, pointing to your Android SDK installation. On Mac OS, the contents should be &lt;code&gt;sdk.dir=/Users/&amp;lt;your username&amp;gt;/Library/Android/sdk&lt;/code&gt;. On other OSes, please adjust accordingly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the Android app&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the project in Android Studio or &lt;a href=&#34;https://www.jetbrains.com/fleet/&#34;&gt;JetBrains Fleet&lt;/a&gt; and wait until the project finishes loading.&lt;/li&gt; &#xA; &lt;li&gt;In Android Studio, select the &lt;code&gt;androidApp&lt;/code&gt; run configuration from the drop-down list within the &lt;a href=&#34;https://developer.android.com/studio/intro#user-interface&#34;&gt;toolbar&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;a href=&#34;https://developer.android.com/studio/run/rundebugconfig#running&#34;&gt;run icon&lt;/a&gt; to start the simulator.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running the iOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the project in Android Studio or &lt;a href=&#34;https://www.jetbrains.com/fleet/&#34;&gt;JetBrains Fleet&lt;/a&gt; and wait until the project finishes loading.&lt;/li&gt; &#xA; &lt;li&gt;In Android Studio, select the &lt;code&gt;KotlinConf&lt;/code&gt; run configuration from the drop-down list within the &lt;a href=&#34;https://developer.android.com/studio/intro#user-interface&#34;&gt;toolbar&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;a href=&#34;https://developer.android.com/studio/run/rundebugconfig#running&#34;&gt;run icon&lt;/a&gt; to start the simulator.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running the desktop app&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./gradlew :shared:run&lt;/code&gt; to start the desktop application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the backend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./gradlew :backend:run&lt;/code&gt; to start the server&lt;/li&gt; &#xA; &lt;li&gt;All API will be available at &lt;code&gt;http://0.0.0.0:8080&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the browser app&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To run the web app in the browser, run &lt;code&gt;./gradlew :shared:wasmJsBrowserRun&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;http://localhost:8000&lt;/code&gt; in your browser after build to see the app.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>JetBrains/amper</title>
    <updated>2024-06-02T01:50:36Z</updated>
    <id>tag:github.com,2024-06-02:/JetBrains/amper</id>
    <link href="https://github.com/JetBrains/amper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Amper - a project configuration and build tool with a focus on the user experience and the IDE support&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/incubator.svg?sanitize=true&#34; alt=&#34;JetBrains incubator project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JetBrains/amper/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/JetBrains/amper?color=brightgreen&amp;amp;label=latest%20release&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Amper&lt;/h1&gt; &#xA;&lt;p&gt;Amper is a project configuration and build tool. Its goal is to provide a great and smooth user experience and IDE support We believe that this can be achieved by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;providing a developer- and IDE-friendly declarative configuration DSL - to simplify not only the initial setup but also improve maintainability and let an IDE assist with automatic configuration reliably;&lt;/li&gt; &#xA; &lt;li&gt;bundling a curated set of compatible toolchains and extensions - to support the majority of the scenarios without the need to find compatible plugins;&lt;/li&gt; &#xA; &lt;li&gt;carefully choosing the extensibility points - to keep the overall mental model and UX of the configuration consistent and to avoid unexpected third-party code execution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In essence, we aim to achieve a similar well-thought-out and well-tested experience as with &lt;a href=&#34;https://www.jetbrains.com/ides/&#34;&gt;JetBrains IDEs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We’re currently looking at various aspects, including the configuration of projects for building, packaging, publishing, and more. At the current stage, however, the focus is primarily on configuring projects for building. While the current use case is Kotlin and Kotlin Multiplatform, Amper also supports Java and Swift (as a requirement for multiplatform). However, the same approach to configuration could work for other languages and technology stacks in the future.&lt;/p&gt; &#xA;&lt;p&gt;Amper exists as a standalone build tool as well as a Gradle plugin for existing Gradle-based projects. Both versions offer a unified, easy-to-use, declarative configuration format.&lt;/p&gt; &#xA;&lt;p&gt;Supported features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creating and running JVM, Android, iOS, Linux, and macOS applications.&lt;/li&gt; &#xA; &lt;li&gt;Creating Kotlin Multiplatform libraries.&lt;/li&gt; &#xA; &lt;li&gt;Running tests.&lt;/li&gt; &#xA; &lt;li&gt;Mixing Kotlin, Java and Swift code.&lt;/li&gt; &#xA; &lt;li&gt;Code assistance for &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#module-file-anatomy&#34;&gt;module files&lt;/a&gt; in IntelliJ IDEA and Fleet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#module-dependencies&#34;&gt;Multi-module&lt;/a&gt; projects.&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#configuring-compose-multiplatform&#34;&gt;Compose Multiplatform&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Using Compose &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#using-multiplatform-resources&#34;&gt;multiplatform resources&lt;/a&gt;*.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#gradle-interop&#34;&gt;Gradle interop&lt;/a&gt;, including combining Amper and Gradle modules in one project*.&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#dependencyversion-catalogs&#34;&gt;Gradle version catalogs&lt;/a&gt;*.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#file-layout-with-gradle-interop&#34;&gt;Gradle-compatible project layout&lt;/a&gt; for the smooth migration of existing Gradle projects*.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;* only in Gradle-based projects&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Future directions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for more Kotlin and Kotlin Multiplatform scenarios and configurations.&lt;/li&gt; &#xA; &lt;li&gt;More &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#product-types&#34;&gt;product types&lt;/a&gt; and platforms, such as watchOS, Windows, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#special-types-of-tests&#34;&gt;Platform-specific test types&lt;/a&gt;, including android instrumented tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#native-dependencies&#34;&gt;Native dependencies&lt;/a&gt; support, such as CocoaPods, Swift Package Manager.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#packaging&#34;&gt;Packaging&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#publishing&#34;&gt;publication&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#build-variants&#34;&gt;Build variants&lt;/a&gt; support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#extensibility&#34;&gt;Extensibility&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a quick start:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Setup.md&#34;&gt;Setup&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Usage.md&#34;&gt;usage&lt;/a&gt; instructions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Tutorial.md&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-gradle&#34;&gt;Example projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gradle &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/GradleMigration.md&#34;&gt;migration guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues and feedback&lt;/h2&gt; &#xA;&lt;p&gt;Amper uses &lt;a href=&#34;https://youtrack.jetbrains.com/issues/AMPER&#34;&gt;YouTrack&lt;/a&gt; for issue tracking, &lt;a href=&#34;https://youtrack.jetbrains.com/newIssue?project=AMPER&#34;&gt;create a new issue&lt;/a&gt; there to report problems or submit ideas.&lt;/p&gt; &#xA;&lt;p&gt;Before reporting an issue, please check the &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/FAQ.md&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also join the &lt;a href=&#34;https://kotlinlang.slack.com/archives/C062WG3A7T8&#34;&gt;Slack channel&lt;/a&gt; for discussions, or share your feedback using the &lt;a href=&#34;https://surveys.jetbrains.com/s3/Amper-feedback-form&#34;&gt;feedback form&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to Try&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to try Amper:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the latest &lt;a href=&#34;https://www.jetbrains.com/idea/nextversion/&#34;&gt;IntelliJ IDEA&lt;/a&gt;, for JVM and Android projects (&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Usage.md#using-amper-in-intellij-idea&#34;&gt;instructions&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;In the latest &lt;a href=&#34;https://www.jetbrains.com/fleet/&#34;&gt;JetBrains Fleet&lt;/a&gt;, for the JVM, Android, and Kotlin Multiplatform projects (&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Usage.md#using-amper-in-fleet&#34;&gt;instructions&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Usage.md#using-the-standalone-amper-version-from-the-command-line&#34;&gt;standalone Amper from command line&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Usage.md#using-the-gradle-based-amper-version-from-the-command-line&#34;&gt;Gradle-Based Amper from command line&lt;/a&gt; to build Gradle-based Amper projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Basics&lt;/h3&gt; &#xA;&lt;p&gt;Here is a very basic JVM &#34;Hello, World!&#34; project:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/images/ij-jvm-structure.png&#34; width=&#34;50%&#34; alt=&#34;&#34;&gt; &#xA;&lt;p&gt;The &lt;code&gt;main.kt&lt;/code&gt; and &lt;code&gt;MyTest.kt&lt;/code&gt; files are just regular Kotlin files with nothing special in them. The interesting part is &lt;code&gt;module.yaml&lt;/code&gt;, which is the Amper module configuration file. For the above project structure, it would simply be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Produce a JVM application &#xA;product: jvm/app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it. The Kotlin and Java toolchains, test framework, and other necessary functionality are configured and available straight out of the box. You can build it, run it, write and run tests, and more. For more detailed information, check out the &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-gradle/jvm&#34;&gt;full example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/images/ij-jvm-result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Multiplatform&lt;/h3&gt; &#xA;&lt;p&gt;Now, let&#39;s look at a Compose Multiplatform project with Android, iOS, and desktop JVM apps, with the following project structure in Fleet:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/images/fleet-kmp-structure.png&#34; width=&#34;50%&#34; alt=&#34;&#34;&gt; &#xA;&lt;p&gt;Notice how the &lt;code&gt;src/&lt;/code&gt; folder contains Kotlin and Swift code together. It could, of course, also be Kotlin and Java. Another aspect to highlight is the shared module with the common code in the &lt;code&gt;src&lt;/code&gt; folder and the platform-specific code folders &lt;code&gt;src@ios&lt;/code&gt; and &lt;code&gt;src@android&lt;/code&gt; (learn more about &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#project-layout&#34;&gt;project layout&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Here is how &lt;code&gt;ios-app/module.yaml&lt;/code&gt; file looks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Produce an iOS application&#xA;product: ios/app&#xA;&#xA;# Depend on the shared library module: &#xA;dependencies:&#xA;  - ../shared&#xA;&#xA;settings:&#xA;  # Enable the Compose Multiplatform framework&#xA;  compose: enabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is pretty straightforward: It defines an iOS application with a dependency on a shared module and enables the Compose Multiplatform framework. A more interesting example would be &lt;code&gt;shared/module.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Produce a shared library for the JVM, Android, and iOS platforms:&#xA;product:&#xA;  type: lib&#xA;  platforms: [jvm, android, iosArm64, iosSimulatorArm64, iosX64]&#xA;&#xA;# Shared Compose dependencies:&#xA;dependencies:&#xA;  - $compose.foundation: exported&#xA;  - $compose.material3: exported&#xA;&#xA;# Android-only dependencies  &#xA;dependencies@android:&#xA;  # Android-specific integration with Compose&#xA;  - androidx.activity:activity-compose:1.7.2: exported&#xA;  - androidx.appcompat:appcompat:1.6.1: exported&#xA;&#xA;# iOS-only dependencies with a dependency on a CocoaPod (not yet implemented)&#xA;dependencies@ios:&#xA;  - pod: &#39;Alamofire&#39;&#xA;    version: &#39;~&amp;gt; 2.0.1&#39;&#xA;&#xA;settings:&#xA;  # Enable Kotlin serialization&#xA;  kotlin:&#xA;    serialization: json&#xA;  &#xA;  # Enable the Compose Multiplatform framework&#xA;  compose: enabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A couple of things are worth mentioning. First, note the platform-specific dependencies: sections with the &lt;code&gt;@&amp;lt;platform&amp;gt;&lt;/code&gt; qualifier. &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#platform-qualifier&#34;&gt;The platform qualifier&lt;/a&gt; can be used both in the manifest and also in the file layout. The qualifier organizes the code, dependencies, and settings for a certain platform. Second, the dependencies: section allows not only Kotlin and Maven dependencies, but also &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md#native-dependencies&#34;&gt;platform-specific package managers&lt;/a&gt;, such as CocoaPods, Swift Package Manager, and others.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/images/fleet-kmp-result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Naturally, these examples show only a limited set of Amper features. To get more insight into design and functionality, look at the &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Documentation.md&#34;&gt;documentation&lt;/a&gt;, the &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/docs/Tutorial.md&#34;&gt;tutorial&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/#more-examples&#34;&gt;example projects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;More examples&lt;/h3&gt; &#xA;&lt;p&gt;Check our these example projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JVM &#34;Hello, World!&#34; (&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-standalone/jvm&#34;&gt;standalone&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-gradle/jvm&#34;&gt;Gradle-based&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Compose Multiplatform (&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-standalone/compose-multiplatform&#34;&gt;standalone&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-gradle/compose-multiplatform&#34;&gt;Gradle-based&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Compose on iOS (&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-standalone/compose-ios&#34;&gt;standalone&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-gradle/compose-ios&#34;&gt;Gradle-based&lt;/a&gt;), Android (&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-standalone/compose-android&#34;&gt;standalone&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-gradle/compose-android&#34;&gt;Gradle-based&lt;/a&gt;), and desktop (&lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-standalone/compose-desktop&#34;&gt;standalone&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-gradle/compose-desktop&#34;&gt;Gradle-based&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Kotlin Multiplatform app template with &lt;a href=&#34;https://github.com/Kotlin/KMP-App-Template/tree/amper&#34;&gt;shared Compose UI&lt;/a&gt; and with &lt;a href=&#34;https://github.com/Kotlin/KMP-App-Template-Native/tree/amper&#34;&gt;native Android and iOS UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gradle interop in the &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-gradle/gradle-interop&#34;&gt;Gradle-based Amper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;And other &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-standalone&#34;&gt;standalone&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/JetBrains/amper/release/0.3/examples-gradle&#34;&gt;Gradle-based&lt;/a&gt; examples&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>