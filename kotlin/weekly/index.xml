<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:42:52Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>skydoves/landscapist</title>
    <updated>2022-09-25T01:42:52Z</updated>
    <id>tag:github.com,2022-09-25:/skydoves/landscapist</id>
    <link href="https://github.com/skydoves/landscapist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üçÇ Jetpack Compose image loading library that fetches and displays network images with Glide, Coil, and Fresco&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/127760344-bb042fe8-23e1-4014-b208-b7b549d32086.png&#34; alt=&#34;landscapist&#34;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://devlibrary.withgoogle.com/products/android/repos/skydoves-Landscapist&#34;&gt;&lt;img alt=&#34;Google&#34; src=&#34;https://skydoves.github.io/badges/google-devlib.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves/Landscapist/actions&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/skydoves/landscapist/workflows/Android%20CI/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://androidweekly.net/issues/issue-441&#34;&gt;&lt;img alt=&#34;Android Weekly&#34; src=&#34;https://skydoves.github.io/badges/android-weekly.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://proandroiddev.com/loading-images-for-jetpack-compose-using-glide-coil-and-fresco-1211261a296e&#34;&gt;&lt;img alt=&#34;Medium&#34; src=&#34;https://skydoves.github.io/badges/Story-Medium.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/skydoves&#34;&gt;&lt;img alt=&#34;Profile&#34; src=&#34;https://skydoves.github.io/badges/skydoves.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; üçÇ Landscapist is a Jetpack Compose image loading solution that fetches and displays network images with &lt;a href=&#34;https://github.com/bumptech/glide&#34; target=&#34;_blank&#34;&gt; Glide&lt;/a&gt;, &lt;a href=&#34;https://github.com/coil-kt/coil&#34; target=&#34;_blank&#34;&gt; Coil&lt;/a&gt;, and &lt;a href=&#34;https://github.com/facebook/fresco&#34; target=&#34;_blank&#34;&gt; Fresco.&lt;/a&gt; This library supports tracing image loading states, composing custom implementations, and some useful animations, such as crossfades and circular reveals. Also, with image plugins, you can configure and attach image loading behaviors more easily and fast. &lt;/p&gt; &#xA;&lt;h2&gt;Who&#39;s using Landscapist?&lt;/h2&gt; &#xA;&lt;p&gt;üëâ &lt;a href=&#34;https://raw.githubusercontent.com/skydoves/landscapist/main/usecases.md&#34;&gt;Check out who&#39;s using Landscapist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demo projects&lt;/h2&gt; &#xA;&lt;p&gt;You can see the use cases of this library in the repositories below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/modernstorage/tree/e62cda539ca75884dd49df3bcf8629751f0a91e6/sample&#34;&gt;google/modernstorage&lt;/a&gt; - ModernStorage is a group of libraries that provide an abstraction layer over storage on Android to simplify its interactions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/android/storage-samples/tree/main/ScopedStorage&#34;&gt;android/storage-samples&lt;/a&gt; - Multiple samples showing the best practices in storage APIs on Android.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skydoves/disneycompose&#34;&gt;skydoves/DisneyCompose&lt;/a&gt; - üß∏ A demo Disney app using Jetpack Compose and Hilt based on modern Android tech-stacks and MVVM architecture.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skydoves/MovieCompose&#34;&gt;skydoves/MovieCompose&lt;/a&gt; - üéû A demo movie app using Jetpack Compose and Hilt based on modern Android tech stacks. &lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SNAPSHOT&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See how to import the snapshot&lt;/summary&gt; &#xA; &lt;h3&gt;Including the SNAPSHOT&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/com/github/skydoves/landscapist/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=snapshot&amp;amp;message=landscapist&amp;amp;logo=apache%20maven&amp;amp;color=C71A36&#34; alt=&#34;Landscapist&#34;&gt;&lt;/a&gt; &lt;br&gt; Snapshots of the current development version of Landscapist are available, which track &lt;a href=&#34;https://oss.sonatype.org/content/repositories/snapshots/com/github/skydoves/landscapist/&#34;&gt;the latest versions&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;To import snapshot versions on your project, add the code snippet below on your gradle file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Gradle&#34;&gt;repositories {&#xA;   maven { url &#39;https://oss.sonatype.org/content/repositories/snapshots/&#39; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Next, add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:landscapist-glide:2.0.1-SNAPSHOT&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;div class=&#34;header&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/bumptech/glide&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/95545537-1bc15200-0a39-11eb-883d-644f564da5d3.png&#34; align=&#34;left&#34; width=&#34;4%&#34; alt=&#34;Glide&#34;&gt;&lt;/a&gt; &#xA; &lt;h1&gt;Glide&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=landscapist&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/landscapist.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the codes below to your &lt;strong&gt;root&lt;/strong&gt; &lt;code&gt;build.gradle&lt;/code&gt; file (not your module-level build.gradle file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;allprojects {&#xA;    repositories {&#xA;        mavenCentral()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:landscapist-glide:2.0.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;Landscapist-Glide&lt;/code&gt; includes version &lt;code&gt;4.13.2&lt;/code&gt; of &lt;a href=&#34;https://github.com/bumptech/glide&#34;&gt;Glide&lt;/a&gt; internally. So please make sure your project is using the same Glide version or exclude the Glide dependency to adapt yours. Also, please make sure the Jetpack Compose version on the &lt;a href=&#34;https://github.com/skydoves/Landscapist/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;GlideImage&lt;/h3&gt; &#xA;&lt;p&gt;You can load images simply by using &lt;code&gt;GlideImage&lt;/code&gt; composable function as the following example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = imageUrl, // loading a network image using an URL.&#xA;  imageOptions = ImageOptions(&#xA;    contentScale = ContentScale.Crop,&#xA;    alignment = Alignment.Center&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Details for GlideImage&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üëâ Read further for more details&lt;/summary&gt; &#xA; &lt;h3&gt;Custom RequestOptions and TransitionOptions&lt;/h3&gt; &#xA; &lt;p&gt;You can customize your request-options with your own &lt;a href=&#34;https://bumptech.github.io/glide/doc/options.html#requestoptions&#34;&gt;RequestOptions&lt;/a&gt; and &lt;a href=&#34;https://bumptech.github.io/glide/doc/options.html#transitionoptions&#34;&gt;TransitionOptions&lt;/a&gt; for applying caching strategies, loading transformations like below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = imageUrl,&#xA;  requestOptions = {&#xA;    RequestOptions()&#xA;        .override(256, 256)&#xA;        .diskCacheStrategy(DiskCacheStrategy.ALL)&#xA;        .centerCrop()&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Custom RequestBuilder&lt;/h3&gt; &#xA; &lt;p&gt;You can request image with your own &lt;a href=&#34;https://bumptech.github.io/glide/doc/options.html#requestbuilder&#34;&gt;RequestBuilder&lt;/a&gt;, which is the backbone of the request in Glide and is responsible for bringing your options together with your requested url or model to start a new load.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = imageUrl,&#xA;  requestBuilder = { Glide.with(LocalContext.current.applicationContext).asDrawable() },&#xA;  modifier = Modifier.constrainAs(image) {&#xA;    centerHorizontallyTo(parent)&#xA;    top.linkTo(parent.top)&#xA;  }.aspectRatio(0.8f)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Custom RequestListener&lt;/h3&gt; &#xA; &lt;p&gt;You can register your own &lt;a href=&#34;https://bumptech.github.io/glide/javadocs/440/com/bumptech/glide/request/RequestListener.html&#34;&gt;RequestListener&lt;/a&gt;, which allows you to trace the status of a request while images load.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = imageUrl,&#xA;  requestListener = object: RequestListener&amp;lt;Drawable&amp;gt; {&#xA;    override fun onLoadFailed(&#xA;      e: GlideException?,&#xA;      model: Any?,&#xA;      target: Target&amp;lt;Drawable&amp;gt;?,&#xA;      isFirstResource: Boolean&#xA;    ): Boolean {&#xA;      // do something&#xA;      return false&#xA;    }&#xA;&#xA;    override fun onResourceReady(&#xA;      resource: Drawable?,&#xA;      model: Any?,&#xA;      target: Target&amp;lt;Drawable&amp;gt;?,&#xA;      dataSource: DataSource?,&#xA;      isFirstResource: Boolean&#xA;    ): Boolean {&#xA;      // do something&#xA;      return true&#xA;    }&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;LocalGlideRequestOptions&lt;/h3&gt; &#xA; &lt;p&gt;You can pass the same instance of your &lt;code&gt;RequestOptions&lt;/code&gt; down through the Composition in your composable hierarchy as following the example below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val requestOptions = RequestOptions()&#xA;    .override(300, 300)&#xA;    .circleCrop()&#xA;&#xA;CompositionLocalProvider(LocalGlideRequestOptions provides requestOptions) {&#xA;  // Loads images with the custom `requestOptions` without explicit defines.&#xA;  GlideImage(&#xA;    imageModel = ...&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;div class=&#34;header&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/coil-kt/coil&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/95545538-1cf27f00-0a39-11eb-83dd-ef9b8c6a74cb.png&#34; align=&#34;left&#34; width=&#34;4%&#34; alt=&#34;Fresco&#34;&gt;&lt;/a&gt; &#xA; &lt;h1&gt;Coil&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=landscapist&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/landscapist.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;br&gt; Add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:landscapist-coil:&amp;lt;version&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Please make sure your project uses the same Jetpack Compose version on the &lt;a href=&#34;https://github.com/skydoves/Landscapist/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;CoilImage&lt;/h3&gt; &#xA;&lt;p&gt;You can load images by using the &lt;code&gt;CoilImage&lt;/code&gt; composable function as the following example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;CoilImage(&#xA;  imageModel = imageUrl, // loading a network image or local resource using an URL.&#xA;  imageOptions = ImageOptions(&#xA;    contentScale = ContentScale.Crop,&#xA;    alignment = Alignment.Center&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Details for CoilImage&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üëâ Read further for more details&lt;/summary&gt; &#xA; &lt;h3&gt;Custom ImageRequest and ImageLoader&lt;/h3&gt; &#xA; &lt;p&gt;You can load images with your own &lt;a href=&#34;https://coil-kt.github.io/coil/image_requests/&#34;&gt;ImageRequest&lt;/a&gt; and &lt;a href=&#34;https://coil-kt.github.io/coil/image_loaders/&#34;&gt;ImageLoader&lt;/a&gt;, which provides all the necessary information for loading images like caching strategies and transformations.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;CoilImage(&#xA;  imageRequest = {&#xA;      ImageRequest.Builder(LocalContext.current)&#xA;        .data(poster.poster)&#xA;        .crossfade(true)&#xA;        .build() },&#xA;  imageLoader = {&#xA;      ImageLoader.Builder(LocalContext.current)&#xA;        .availableMemoryPercentage(0.25)&#xA;        .crossfade(true)&#xA;        .build() },&#xA;  modifier = modifier,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;LocalCoilImageLoader&lt;/h3&gt; &#xA; &lt;p&gt;You can pass the same instance of your &lt;code&gt;ImageLoader&lt;/code&gt; down through the Composition in your composable hierarchy as following the example below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val imageLoader = ImageLoader.Builder(context).build()&#xA;CompositionLocalProvider(LocalCoilImageLoader provides imageLoader) {&#xA; &#xA;  // This will automatically use the value of current imageLoader in the hierarchy.&#xA;  CoilImage(&#xA;    imageModel = ...&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/131246748-b88903a1-43de-4e6c-9069-3e956a0cf8a6.gif&#34; align=&#34;right&#34; width=&#34;32%&#34;&gt; &#xA; &lt;h2&gt;Animated Image Supports (GIF, Webp)&lt;/h2&gt; &#xA; &lt;p&gt;You can load animated GIFs and WebP Images with your &lt;code&gt;ImageLoader&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val context = LocalContext.current&#xA;val imageLoader = ImageLoader.Builder(context)&#xA;  .componentRegistry {&#xA;    if (SDK_INT &amp;gt;= 28) {&#xA;      add(ImageDecoderDecoder(context))&#xA;    } else {&#xA;      add(GifDecoder())&#xA;    }&#xA;  }&#xA;  .build()&#xA;&#xA;CoilImage(&#xA;    imageModel = poster.gif, // URL of an animated image.&#xA;    imageLoader = { imageLoader },&#xA;    shimmerParams = ShimmerParams(&#xA;      baseColor = background800,&#xA;      highlightColor = shimmerHighLight&#xA;    ),&#xA;    modifier = Modifier&#xA;      .fillMaxWidth()&#xA;      .padding(8.dp)&#xA;      .height(500.dp)&#xA;      .clip(RoundedCornerShape(8.dp))&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;div class=&#34;header&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/facebook/fresco&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/95545540-1cf27f00-0a39-11eb-9e84-96b9df81364b.png&#34; align=&#34;left&#34; width=&#34;4%&#34; alt=&#34;Fresco&#34;&gt;&lt;/a&gt; &#xA; &lt;h1&gt;Fresco&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=landscapist&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/landscapist.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the dependency below to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:landscapist-fresco:&amp;lt;version&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;Landscapist-Fresco&lt;/code&gt; includes version &lt;code&gt;2.6.0&lt;/code&gt; of Fresco. So please make sure your project is using the same Fresco version or exclude the Fresco dependency to adapt yours. Also, please make sure the Jetpack Compose version on the &lt;a href=&#34;https://github.com/skydoves/Landscapist/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;To get started, you should set up &lt;code&gt;Fresco&lt;/code&gt; with &lt;a href=&#34;https://frescolib.org/docs/configure-image-pipeline.html&#34;&gt;ImagePipelineConfig&lt;/a&gt; in your &lt;code&gt;Application&lt;/code&gt; class. Generally, it&#39;s recommended initializing with &lt;code&gt;OkHttpImagePipelineConfigFactory&lt;/code&gt;. Also, you can customize caching, networking, and thread pool strategies with your own &lt;code&gt;ImagePipelineConfig&lt;/code&gt;. For more details, you can check out &lt;a href=&#34;https://frescolib.org/docs/using-other-network-layers.html#using-okhttp&#34;&gt;Using Other Network Layers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class App : Application() {&#xA;&#xA;  override fun onCreate() {&#xA;    super.onCreate()&#xA;&#xA;    val pipelineConfig =&#xA;      OkHttpImagePipelineConfigFactory&#xA;        .newBuilder(this, OkHttpClient.Builder().build())&#xA;        .setDiskCacheEnabled(true)&#xA;        .setDownsampleEnabled(true)&#xA;        .setResizeAndRotateEnabledForNetwork(true)&#xA;        .build()&#xA;&#xA;    Fresco.initialize(this, pipelineConfig)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FrescoImage&lt;/h3&gt; &#xA;&lt;p&gt;You can load images by using the &lt;code&gt;FrescoImage&lt;/code&gt; composable function as the following example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;FrescoImage(&#xA;  imageUrl = stringImageUrl, // loading a network image using an URL.&#xA;  imageOptions = ImageOptions(&#xA;    contentScale = ContentScale.Crop,&#xA;    alignment = Alignment.Center&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Details for FrescoImage&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üëâ Read further for more details&lt;/summary&gt; &#xA; &lt;h3&gt;Custom ImageRequest&lt;/h3&gt; &#xA; &lt;p&gt;You can load images with your own &lt;a href=&#34;https://frescolib.org/docs/image-requests.html&#34;&gt;ImageRequest&lt;/a&gt;, which provides some necessary information for loading images like decoding strategies and resizing.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val imageRequest = ImageRequestBuilder&#xA;  .newBuilderWithSource(uri)&#xA;  .setImageDecodeOptions(decodeOptions)&#xA;  .setLocalThumbnailPreviewsEnabled(true)&#xA;  .setLowestPermittedRequestLevel(RequestLevel.FULL_FETCH)&#xA;  .setProgressiveRenderingEnabled(false)&#xA;  .setResizeOptions(ResizeOptions(width, height))&#xA;  .build()&#xA;&#xA;FrescoImage(&#xA;  imageUrl = stringImageUrl,&#xA;  imageRequest = { imageRequest }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;LocalFrescoImageRequest&lt;/h3&gt; &#xA; &lt;p&gt;You can pass the same instance of your &lt;code&gt;ImageRequest&lt;/code&gt; down through the Composition in your composable hierarchy as following the example below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// customize the ImageRequest as needed&#xA;val imageRequest = ImageRequestBuilder&#xA;  .newBuilderWithSource(uri)&#xA;  .setImageDecodeOptions(decodeOptions)&#xA;  .setLocalThumbnailPreviewsEnabled(true)&#xA;  .setLowestPermittedRequestLevel(RequestLevel.FULL_FETCH)&#xA;  .setProgressiveRenderingEnabled(false)&#xA;  .setResizeOptions(ResizeOptions(width, height))&#xA;  .build()&#xA;&#xA;CompositionLocalProvider(LocalFrescoImageRequest provides imageRequest) {&#xA;  // This will automatically use the value of current ImageRequest in the hierarchy.&#xA;  FrescoImage(&#xA;    imageUrl = ...&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/24237865/131246748-b88903a1-43de-4e6c-9069-3e956a0cf8a6.gif&#34; align=&#34;right&#34; width=&#34;32%&#34;&gt; &#xA; &lt;h2&gt;Fresco Animated Image Support (GIF, Webp)&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=landscapist&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/landscapist.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;Add the below dependency to your &lt;strong&gt;module&lt;/strong&gt;&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  implementation &#34;com.github.skydoves:landscapist-fresco-websupport:&amp;lt;version&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can load animated GIFs and WebP Images with &lt;code&gt;FrescoWebImage&lt;/code&gt; composable function. You should pass the &lt;code&gt;AbstractDraweeController&lt;/code&gt; like the following example below:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;FrescoWebImage(&#xA;  controllerBuilder = Fresco.newDraweeControllerBuilder()&#xA;    .setUri(poster.gif) // GIF or Webp image url.&#xA;    .setAutoPlayAnimations(true),&#xA;  modifier = Modifier&#xA;    .fillMaxWidth()&#xA;    .height(300.dp)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For more details, check out &lt;a href=&#34;https://frescolib.org/docs/animations.html&#34;&gt;DraweeController&lt;/a&gt;, and &lt;a href=&#34;https://frescolib.org/docs/supported-uris.html&#34;&gt;Supported URIs&lt;/a&gt; for setting URI addresses. Also, you can load general images (jpeg, png, etc) which can be loaded with &lt;code&gt;FrescoImage&lt;/code&gt; by using &lt;code&gt;FrescoWebImage&lt;/code&gt; and your custom controller.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;ImageOptions&lt;/h2&gt; &#xA;&lt;p&gt;You can give image options to your image composable functions by passing &lt;code&gt;ImageOptions&lt;/code&gt; instance like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  ..&#xA;  imageOptions = ImageOptions(&#xA;      contentScale = ContentScale.Crop,&#xA;      alignment = Alignment.Center,&#xA;      contentDescription = &#34;main image&#34;,&#xA;      colorFilter = null,&#xA;      alpha = 1f&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Listening image state changes&lt;/h2&gt; &#xA;&lt;p&gt;You can listen the image state changes by giving &lt;code&gt;onImageStateChanged&lt;/code&gt; parameter to your image composable functions like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  ..&#xA;  onImageStateChanged = {&#xA;    when (it) {&#xA;      GlideImageState.None -&amp;gt; ..&#xA;      GlideImageState.Loading -&amp;gt; ..&#xA;      is GlideImageState.Success -&amp;gt; ..&#xA;      is GlideImageState.Failure -&amp;gt; ..&#xA;    }&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can use &lt;code&gt;CoilImageState&lt;/code&gt; for &lt;code&gt;CoilImage&lt;/code&gt; and &lt;code&gt;FrescoImageState&lt;/code&gt; for &lt;code&gt;FrescoImage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;DataSource&lt;/h3&gt; &#xA;&lt;p&gt;For the success state, you can trace the origin of the image with the &lt;code&gt;DataSource&lt;/code&gt; parameter. &lt;code&gt;DataSource&lt;/code&gt; represents the following source origins below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: Represents an in-memory data source or cache (e.g. bitmap, ByteBuffer).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Disk&lt;/strong&gt;: Represents a disk-based data source (e.g. drawable resource, or File).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: Represents a network-based data source.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unknown&lt;/strong&gt;: Represents an unknown data source.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/94174882-d6e1db00-fed0-11ea-86ec-671b5039b1b9.gif&#34; align=&#34;right&#34; width=&#34;310px&#34;&gt; &#xA;&lt;h2&gt;Custom Composables&lt;/h2&gt; &#xA;&lt;p&gt;You can execute your own composable functions depending on the three request states below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;loading&lt;/strong&gt;: Executed while loading an image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;success&lt;/strong&gt;: Executed if loading an image successfully.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;failure&lt;/strong&gt;: Executed if fails to load an image (e.g. network error, wrong destination).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage( // CoilImage, FrescoImage&#xA;  imageModel = imageUrl,&#xA;  modifier = modifier,&#xA;  // shows an indicator while loading an image.&#xA;  loading = {&#xA;    Box(modifier = Modifier.matchParentSize()) {&#xA;      CircularProgressIndicator(&#xA;        modifier = Modifier.align(Alignment.Center)&#xA;      )&#xA;    }&#xA;  },&#xA;  // shows an error text if fail to load an image.&#xA;  failure = {&#xA;    Text(text = &#34;image request failed.&#34;)&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you can customize the image content with our own composable function like the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage( // CoilImage, FrescoImage&#xA;  imageModel = imageUrl,&#xA;  // draw a resized image.&#xA;  success = { imageState -&amp;gt;&#xA;    imageState.imageBitmap?.let {&#xA;      Image(&#xA;        bitmap = it,&#xA;        modifier = Modifier.size(128.dp)&#xA;      )&#xA;    }&#xA;  },&#xA;  loading = { &#xA;    // do something &#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also use the custom Composables for &lt;strong&gt;&lt;code&gt;CoilImage&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;FrescoImage&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/148672035-6a82eba5-900c-44ee-a42c-acbf8038d0ab.png&#34; align=&#34;right&#34; width=&#34;46%&#34;&gt; &#xA;&lt;h2&gt;Preview on Android Studio&lt;/h2&gt; &#xA;&lt;p&gt;Landscapist supports preview mode for each image library; &lt;strong&gt;Glide&lt;/strong&gt;, &lt;strong&gt;Coil&lt;/strong&gt;, and &lt;strong&gt;Fresco&lt;/strong&gt;. You can show the preview image on your editor with a &lt;code&gt;previewPlaceholder&lt;/code&gt; parameter as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = poster.poster,&#xA;  modifier = Modifier.aspectRatio(0.8f),&#xA;  previewPlaceholder = R.drawable.poster&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also use the the &lt;code&gt;previewPlaceholder&lt;/code&gt; parameter for &lt;strong&gt;&lt;code&gt;CoilImage&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;FrescoImage&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;ImageComponent and ImagePlugin&lt;/h2&gt; &#xA;&lt;p&gt;You can compose supported image plugins by Landscapist or you can create your own image plugin that will be composed following the image loading state. &lt;code&gt;ImagePlugin&lt;/code&gt; is a pluggable compose interface that will be executed for loading images. &lt;code&gt;ImagePlugin&lt;/code&gt; provides following types below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PainterPlugin&lt;/strong&gt;: A pinter plugin interface to be composed with the given &lt;code&gt;Painter&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LoadingStatePlugin&lt;/strong&gt;: A pluggable state plugin that will be composed while the state is &lt;code&gt;ImageLoadState.Loading&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SuccessStatePlugin&lt;/strong&gt;: A pluggable state plugin that will be composed when the state is &lt;code&gt;ImageLoadState.Success&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FailureStatePlugin&lt;/strong&gt;: A pluggable state plugin that will be composed when the state is &lt;code&gt;ImageLoadState.Failure&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, you can implement your own &lt;code&gt;LoadingStatePlugin&lt;/code&gt; that will be composed while loading an image like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;public data class LoadingPlugin(val source: Any?) : ImagePlugin.LoadingStatePlugin {&#xA;&#xA;  @Composable&#xA;  override fun compose(&#xA;    modifier: Modifier,&#xA;    imageOptions: ImageOptions?&#xA;  ): ImagePlugin = apply {&#xA;    if (source != null &amp;amp;&amp;amp; imageOptions != null) {&#xA;      ImageBySource(&#xA;        source = source,&#xA;        modifier = modifier,&#xA;        alignment = imageOptions.alignment,&#xA;        contentDescription = imageOptions.contentDescription,&#xA;        contentScale = imageOptions.contentScale,&#xA;        colorFilter = imageOptions.colorFilter,&#xA;        alpha = imageOptions.alpha&#xA;      )&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, you can compose plugins by adding them in the &lt;code&gt;rememberImageComponent&lt;/code&gt; like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = poster.image,&#xA;  component = rememberImageComponent {&#xA;    add(CircularRevealPlugin())&#xA;    add(LoadingPlugin(source))&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can just add plugins by using the &lt;strong&gt;+&lt;/strong&gt; expression like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = poster.image,&#xA;  component = rememberImageComponent {&#xA;    +CircularRevealPlugin()&#xA;    +LoadingPlugin(source)&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LocalImageComponent&lt;/h3&gt; &#xA;&lt;p&gt;You can provide the same &lt;code&gt;ImageComponent&lt;/code&gt; instance in the composable hierarchy by using &lt;code&gt;imageComponent&lt;/code&gt; extension and &lt;code&gt;LocalImageComponent&lt;/code&gt; like the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val component = imageComponent {&#xA;  +CrossfadePlugin()&#xA;  +PalettePlugin()&#xA;}&#xA;&#xA;CompositionLocalProvider(LocalImageComponent provides component) {&#xA;  ..&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Placeholder&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=landscapist&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/landscapist.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;landscapist-placeholder&lt;/code&gt; package provides useful image plugins, such as loading &amp;amp; failure placeholder supports and shimmering animation. To use placeholder supports, add the dependency below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:landscapist-placeholder:$version&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/95812167-be3a4780-0d4f-11eb-9360-2a4a66a3fb46.gif&#34; align=&#34;right&#34; width=&#34;250px&#34;&gt; &#xA;&lt;h3&gt;ShimmerPlugin&lt;/h3&gt; &#xA;&lt;p&gt;You can implement a shimmering effect while loading an image by using the &lt;code&gt;ShimmerPlugin&lt;/code&gt; as following the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage( // CoilImage, FrescoImage&#xA;  imageModel = imageUrl,&#xA;  modifier = modifier,&#xA;  component = rememberImageComponent {&#xA;    // shows a shimmering effect when loading an image.&#xA;    +ShimmerPlugin(&#xA;      baseColor = background800,&#xA;      highlightColor = shimmerHighLight&#xA;    )&#xA;  },&#xA;  // shows an error text message when request failed.&#xA;  failure = {&#xA;    Text(text = &#34;image request failed.&#34;)&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also use the Shimmer effect for &lt;strong&gt;&lt;code&gt;CoilImage&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;FrescoImage&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;PlaceholderPlugin&lt;/h3&gt; &#xA;&lt;p&gt;You can show your own placeholder while loading an image or when fails to load an image with &lt;code&gt;PlaceholderPlugin.Loading&lt;/code&gt; and &lt;code&gt;PlaceholderPlugin.Failure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  ..&#xA;  component = imageComponent {&#xA;      +PlaceholderPlugin.Loading(painterResource(id = R.drawable.placeholder_loading))&#xA;      +PlaceholderPlugin.Failure(painterResource(id = R.drawable.placeholder_failure))&#xA;    },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The source should be one of &lt;code&gt;ImageBitmap&lt;/code&gt;, &lt;code&gt;ImageVector&lt;/code&gt;, or &lt;code&gt;Painter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Animation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=landscapist&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/landscapist.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;landscapist-animation&lt;/code&gt; package provides useful image plugins related to animations, such as crossfade and circular reveal animation. To use animation supports, add the dependency below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:landscapist-animation:$version&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Preview&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Circular Reveal&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Crossfade&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/189552544-5f8e1209-4930-45e6-a050-3a0cda088e9f.gif&#34; align=&#34;center&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/189552547-d933cee7-e811-4170-a806-1ac165e8f055.gif&#34; align=&#34;center&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Crossfade Animation&lt;/h3&gt; &#xA;&lt;p&gt;You can implement the crossfade animation while drawing images with &lt;code&gt;CrossfadePlugin&lt;/code&gt; as the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = poster.image,&#xA;  modifier = Modifier&#xA;    .aspectRatio(0.8f),&#xA;  component = rememberImageComponent {&#xA;    +CrossfadePlugin(&#xA;      duration = 550&#xA;    )&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also use the crossfade animation for &lt;strong&gt;&lt;code&gt;CoilImage&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;FrescoImage&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Circular Reveal Animation&lt;/h3&gt; &#xA;&lt;p&gt;You can implement the circular reveal animation while drawing images with &lt;code&gt;CircularRevealplugin&lt;/code&gt; as the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;GlideImage(&#xA;  imageModel = poster.image,&#xA;  modifier = Modifier&#xA;    .aspectRatio(0.8f),&#xA;  component = rememberImageComponent {&#xA;    +CircularRevealPlugin(&#xA;      duration = 350&#xA;    )&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also use the Circular Reveal animation for &lt;strong&gt;&lt;code&gt;CoilImage&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;FrescoImage&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Palette&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/search?q=landscapist&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.skydoves/landscapist.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;landscapist-palette&lt;/code&gt; package provides useful image plugins related to palette, such as extracting primary color sets. To use palette supports, add the dependency below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    implementation &#34;com.github.skydoves:landscapist-palette:$version&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can extract primary (theme) color profiles with &lt;code&gt;PalettePlugin&lt;/code&gt;. You can check out &lt;a href=&#34;https://developer.android.com/training/material/palette-colors#extract-color-profiles&#34;&gt;Extract color profiles&lt;/a&gt; to see what kinds of colors can be extracted.&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/129226361-877689b8-a1ec-4f59-b8a6-e2efe33a8de7.gif&#34; align=&#34;right&#34; width=&#34;250&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var palette by remember { mutableStateOf&amp;lt;Palette?&amp;gt;(null) }&#xA;&#xA;GlideImage( // CoilImage, FrescoImage also can be used.&#xA;  imageModel = poster.image,&#xA;  modifier = Modifier&#xA;    .aspectRatio(0.8f),&#xA;  component = rememberImageComponent {&#xA;      +PalettePlugin { palette = it }&#xA;  }&#xA;)&#xA;&#xA;Crossfade(&#xA;  targetState = palette,&#xA;  modifier = Modifier&#xA;    .padding(horizontal = 8.dp)&#xA;    .size(45.dp)&#xA;) {&#xA;  Box(&#xA;    modifier = Modifier&#xA;      .background(color = Color(it?.lightVibrantSwatch?.rgb ?: 0))&#xA;      .fillMaxSize()&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you can customize attributes of &lt;code&gt;PalettePlugin&lt;/code&gt; like the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;var palette by remember { mutableStateOf&amp;lt;Palette?&amp;gt;(null) }&#xA;&#xA;GlideImage( // CoilImage, FrescoImage also can be used.&#xA;  imageModel = poster.image,&#xA;  modifier = Modifier&#xA;    .aspectRatio(0.8f),&#xA;  component = rememberImageComponent {&#xA;    +PalettePlugin(&#xA;      imageModel = poster.image,&#xA;      useCache = true, // use cache strategies for the same image model.&#xA;      interceptor = {&#xA;        it.addFilter { rgb, hsl -&amp;gt;&#xA;          // here edit to add the filter colors.&#xA;          false&#xA;        }&#xA;      },&#xA;      paletteLoadedListener = {&#xA;        palette = it&#xA;      }&#xA;    )&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also use the Palette for &lt;strong&gt;&lt;code&gt;CoilImage&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;FrescoImage&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Who&#39;s using Landscapist?&lt;/h2&gt; &#xA;&lt;p&gt;If your project uses Landscapist, please let me know by creating a new issue! ü§ó&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/24237865/125583736-f0ffa76f-8f87-433b-a9fd-192231dc5e63.jpg&#34;&gt;Twitter for Android&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.twitter.android&amp;amp;hl=ko&amp;amp;gl=US&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24237865/125583182-9527dd48-433e-4e17-ae52-3f2bb544a847.jpg&#34; alt=&#34;twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;This library was mostly inspired by &lt;a href=&#34;https://github.com/chrisbanes/accompanist&#34;&gt;Accompanist&lt;/a&gt;.&lt;br&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Accompanist is a group of libraries that contains some utilities which I&#39;ve found myself copying around projects which use Jetpack Compose. Currently, it contains image loading and insets. You can get more variety and recent systems from the library maintained by Google.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Find this repository useful? &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Support it by joining &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves/Landscapist/stargazers&#34;&gt;stargazers&lt;/a&gt;&lt;/strong&gt; for this repository. &lt;span&gt;‚≠ê&lt;/span&gt; &lt;br&gt; Also &lt;strong&gt;&lt;a href=&#34;https://github.com/skydoves&#34;&gt;follow&lt;/a&gt;&lt;/strong&gt; me for my next creations! ü§©&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;Designed and developed by 2020 skydoves (Jaewoong Eum)&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>z-huang/music</title>
    <updated>2022-09-25T01:42:52Z</updated>
    <id>tag:github.com,2022-09-25:/z-huang/music</id>
    <link href="https://github.com/z-huang/music" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A material design music player to stream music from YouTube Music&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Music&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/z-huang/music/dev/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png&#34; height=&#34;72&#34;&gt; &#xA;&lt;p&gt;Make your own music library with any song from YouTube Music.&lt;br&gt; No ads, free, and simple.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apt.izzysoft.de/fdroid/index/apk/com.zionhuang.music&#34;&gt;&lt;img src=&#34;https://gitlab.com/IzzyOnDroid/repo/-/raw/master/assets/IzzyOnDroid.png&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/z-huang/music/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/z-huang/music?include_prereleases&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/z-huang/music&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/z-huang/music/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/z-huang/music/total&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; The project is currently in an unstable stage, so there should be many bugs. If you encounter one, please report by opening an issue.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; The name of this app is temporary. It will be changed in the future.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;With this app, you&#39;re like getting a free music streaming service. You can listen to music from YouTube Music and build your own library. What&#39;s more, songs can be downloaded for offline playback. You can also create playlists to organize your songs. The aim of &lt;em&gt;Music&lt;/em&gt; is to enable everyone to listen to music at no cost by an easy-to-use, practical and ad-free application.&lt;/p&gt; &#xA;&lt;p&gt;‚ö†Ô∏è Warning: If you&#39;re in region that YouTube Music is not supported, you won&#39;t be able to use this app &lt;em&gt;&lt;strong&gt;unless&lt;/strong&gt;&lt;/em&gt; you have proxy or VPN to connect to a YTM supported region.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;YouTube&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Play songs without ads&lt;/li&gt; &#xA; &lt;li&gt;Browse almost any YouTube Music page&lt;/li&gt; &#xA; &lt;li&gt;Search songs, albums, videos and playlists from YouTube Music&lt;/li&gt; &#xA; &lt;li&gt;Open YouTube Music links&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Library&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Save songs, albums and playlists in local database&lt;/li&gt; &#xA; &lt;li&gt;Download music for offline playback&lt;/li&gt; &#xA; &lt;li&gt;Edit song title&lt;/li&gt; &#xA; &lt;li&gt;Add links to your favorite YouTube Music playlists&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Player&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Material design player&lt;/li&gt; &#xA; &lt;li&gt;Lockscreen playback&lt;/li&gt; &#xA; &lt;li&gt;Media controls in notification&lt;/li&gt; &#xA; &lt;li&gt;Skip to next/previous song&lt;/li&gt; &#xA; &lt;li&gt;Repeat/shuffle mode&lt;/li&gt; &#xA; &lt;li&gt;Edit now-playing queue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom themes&lt;/li&gt; &#xA; &lt;li&gt;Dark theme&lt;/li&gt; &#xA; &lt;li&gt;Localization&lt;/li&gt; &#xA; &lt;li&gt;Proxy&lt;/li&gt; &#xA; &lt;li&gt;Backup &amp;amp; restore&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/z-huang/music/dev/fastlane/metadata/android/en-US/images/phoneScreenshots/01.jpg&#34; width=&#34;170&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/z-huang/music/dev/fastlane/metadata/android/en-US/images/phoneScreenshots/02.jpg&#34; width=&#34;170&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/z-huang/music/dev/fastlane/metadata/android/en-US/images/phoneScreenshots/03.jpg&#34; width=&#34;170&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/z-huang/music/dev/fastlane/metadata/android/en-US/images/phoneScreenshots/04.jpg&#34; width=&#34;170&#34;&gt; &lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/z-huang/music/dev/fastlane/metadata/android/en-US/images/phoneScreenshots/05.jpg&#34; width=&#34;170&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/z-huang/music/dev/fastlane/metadata/android/en-US/images/phoneScreenshots/07.jpg&#34; width=&#34;170&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/z-huang/music/dev/fastlane/metadata/android/en-US/images/phoneScreenshots/08.jpg&#34; width=&#34;170&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/z-huang/music/dev/fastlane/metadata/android/en-US/images/phoneScreenshots/09.jpg&#34; width=&#34;170&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;em&gt;Music&lt;/em&gt; using the following methods:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the APK file from &lt;a href=&#34;https://github.com/z-huang/music/releases&#34;&gt;GitHub Releases&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;a href=&#34;https://apt.izzysoft.de/fdroid/index/apk/com.zionhuang.music&#34;&gt;IzzyOnDroid&lt;/a&gt; to your F-Droid repos following the &lt;a href=&#34;https://apt.izzysoft.de/fdroid/index/info&#34;&gt;instruction&lt;/a&gt;, and you can search for this app and receive updates.&lt;/li&gt; &#xA; &lt;li&gt;To get a dev build, go to &lt;a href=&#34;https://github.com/z-huang/music/actions&#34;&gt;GitHub Action&lt;/a&gt; and download the APK artifact of any workflow.&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository and build a debug APK.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;How to get updates?&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;F-Droid application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/z-huang/music&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;h3&gt;Contributing Translations&lt;/h3&gt; &#xA;&lt;h4&gt;App&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Have a fork of this project.&lt;/li&gt; &#xA; &lt;li&gt;If you have Android Studio, right click on the &lt;code&gt;app/src/main/res/values&lt;/code&gt; folder, select &#34;New&#34;-&amp;gt;&#34;Values Resource File&#34;. Input &lt;code&gt;strings.xml&lt;/code&gt; as file name. Select &#34;Locale&#34;, click &#34;&amp;gt;&amp;gt;&#34;, choose your language and region, and click &#34;OK&#34;.&lt;/li&gt; &#xA; &lt;li&gt;If not, create a folder named &lt;code&gt;values-&amp;lt;language code&amp;gt;-r&amp;lt;region code&amp;gt;&lt;/code&gt; under &lt;code&gt;app/src/main/res&lt;/code&gt;. Copy &lt;code&gt;app/src/main/res/values/strings.xml&lt;/code&gt; to the created folder.&lt;/li&gt; &#xA; &lt;li&gt;Replace each English string with the equivalent translation. Note that lines with &lt;code&gt;translatable=&#34;false&#34;&lt;/code&gt; should be ignored.&lt;/li&gt; &#xA; &lt;li&gt;(Recommended) Build the app to see if something is wrong.&lt;/li&gt; &#xA; &lt;li&gt;Make a pull request with your changes. If you do step 5, the process of accepting your PR will be faster.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Fastlane (App Description and Changelogs)&lt;/h4&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://gitlab.com/-/snippets/1895688&#34;&gt;fastlane instruction&lt;/a&gt; to add your language and create a pull request.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>feelfreelinux/octo4a</title>
    <updated>2022-09-25T01:42:52Z</updated>
    <id>tag:github.com,2022-09-25:/feelfreelinux/octo4a</id>
    <link href="https://github.com/feelfreelinux/octo4a" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use your old Android device as an OctoPrint server.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;octo4a - Run OctoPrint on Android&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://paypal.me/feelfreelinux&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.cryptobadges.io/donate/bc1q5z2q3fqftydt9cd6qhma92vvhjucz9w9qkvxch&#34;&gt;&lt;img src=&#34;https://en.cryptobadges.io/badge/small/bc1q5z2q3fqftydt9cd6qhma92vvhjucz9w9qkvxch&#34; alt=&#34;Donate with Bitcoin&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/sponsors/feelfreelinux&#34; alt=&#34;GitHub Sponsors&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https://apt.izzysoft.de/fdroid/api/v1/shield/com.octo4a&#34; alt=&#34;IzzySoft&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feelfreelinux/octo4a/master/.github/readme-banner.png&#34; alt=&#34;A banner visually expaining how the app works&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have a Raspberry Pi, but you want to control your 3D printer remotely? Use your phone as an octoprint host! With the Octo4a app you can install Octoprint on your android phone in minutes, without any special Linux knowledge.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Newest &lt;code&gt;.apk&lt;/code&gt; files are available in the &lt;a href=&#34;https://github.com/feelfreelinux/octo4a/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enable installing 3rd-party .apk in your phone&#39;s settings.&lt;/li&gt; &#xA; &lt;li&gt;Install the apk file downloaded from the releases page.&lt;/li&gt; &#xA; &lt;li&gt;Open the app.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Install OctoPrint&#34; to download and install OctoPrint&lt;/li&gt; &#xA; &lt;li&gt;Allow the app to access the storage, if asked for permission.&lt;/li&gt; &#xA; &lt;li&gt;Wait for the installation to complete. This may take a long time, depending on your internet speed.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Continue&#34; when the installation finishes.&lt;/li&gt; &#xA; &lt;li&gt;Optionally start the camera server to enable watching your printer from octoprint.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the IP address shown at the top in your browser to access and set-up OctoPrint.&lt;/li&gt; &#xA; &lt;li&gt;Happy printing!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quick and easy octoprint installation.&lt;/li&gt; &#xA; &lt;li&gt;Printer connection via USB OTG. Thanks to our custom USB driver you can use octoprint even on phones without root access.&lt;/li&gt; &#xA; &lt;li&gt;Built-in camera support. You can use the built-in camera in your phone to see the progress of your 3D prints, instead of buying a separate module. The app also supports octolapse.&lt;/li&gt; &#xA; &lt;li&gt;SSH support. You can easily log-in via ssh and customize your octoprint installation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;FAQ and many different topics are described in the &lt;a href=&#34;https://github.com/feelfreelinux/octo4a/wiki&#34;&gt;project&#39;s wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;h2&gt;Donating&lt;/h2&gt; &#xA;&lt;p&gt;If you like this project, feel free to &lt;a href=&#34;https://paypal.me/feelfreelinux&#34;&gt;donate on PayPal&lt;/a&gt; or &lt;a href=&#34;https://github.com/sponsors/feelfreelinux&#34;&gt;sponsor me on GitHub&lt;/a&gt;. If you prefer crypto, I also &lt;a href=&#34;https://en.cryptobadges.io/donate/bc1q5z2q3fqftydt9cd6qhma92vvhjucz9w9qkvxch&#34;&gt;accept Bitcoin&lt;/a&gt; This project heavily relies on great work done on &lt;a href=&#34;https://www.patreon.com/foosel&#34;&gt;OctoPrint&lt;/a&gt; so please consider donating to them if you like this app. Thank you for your support :)&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TL;DR: If your house burns down because this app malfunctioned, you cannot sue me.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the AGPL license.&lt;/p&gt;</summary>
  </entry>
</feed>