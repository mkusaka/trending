<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-09T01:58:29Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fuqiuluo/unidbg-fetch-qsign</title>
    <updated>2023-07-09T01:58:29Z</updated>
    <id>tag:github.com,2023-07-09:/fuqiuluo/unidbg-fetch-qsign</id>
    <link href="https://github.com/fuqiuluo/unidbg-fetch-qsign" rel="alternate"></link>
    <summary type="html">&lt;p&gt;获取QQSign通过Unidbg&lt;/p&gt;&lt;hr&gt;&lt;p&gt;获取QQSign参数通过Unidbg，开放HTTP API。unidbg-fetch-sign最低从QQ8.9.33（不囊括）开始支持，TIM不支持。&lt;/p&gt; &#xA;&lt;h1&gt;切记&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;公共API具有高风险可能&lt;/li&gt; &#xA; &lt;li&gt;请使用与协议对应版本的libfekit.so文件&lt;/li&gt; &#xA; &lt;li&gt;QSign基于Android平台，其它平台Sign计算的参数不同，不互通（例如：IPad）。&lt;/li&gt; &#xA; &lt;li&gt;不支持载入Tim.apk的so文件。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;部署方法&lt;/h1&gt; &#xA;&lt;h2&gt;Jar部署&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;系统安装jdk或者jre，版本1.8或以上。如果报错找不到类，请尝试1.8或略靠近1.8的版本&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;解压后cd到解压目录，配置config.json文件。&lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;其中&lt;code&gt;protocol&lt;/code&gt;中的参数可以从&lt;a href=&#34;https://github.com/RomiChan/protocol-versions&#34;&gt;protocol-versions&lt;/a&gt;获取！&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json5&#34;&gt;{ // 复制这里的话，请把注释删除&#xA;  &#34;server&#34;: {&#xA;    &#34;host&#34;: &#34;0.0.0.0&#34;,&#xA;    &#34;port&#34;: 8080&#xA;  },&#xA;  // 注册实例的密钥&#xA;  &#34;key&#34;: &#34;114514&#34;,&#xA;  // 实例重载间隔（目前没有用）&#xA;  // i&amp;gt;=20 i&amp;lt;=50&#xA;  &#34;reload_interval&#34;: 40, &#xA;  &#34;protocol&#34;: {&#xA;    &#34;qua&#34;: &#34;V1_AND_SQ_8.9.63_4194_YYB_D&#34;,&#xA;    // version和code可以从qua中提取&#xA;    &#34;version&#34;: &#34;8.9.63&#34;, &#xA;    &#34;code&#34;: &#34;4194&#34;&#xA;  },&#xA;  &#34;unidbg&#34;: {&#xA;    // 启用Dynarmic，它是一个开源的动态ARM指令集模拟器&#xA;    // 有时候会出现https://github.com/fuqiuluo/unidbg-fetch-qsign/issues/52&#xA;    &#34;dynarmic&#34;: false,&#xA;    &#34;unicorn&#34;: true,&#xA;    &#34;debug&#34;: false&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bash bin/unidbg-fetch-qsign --basePath=txlib/8.9.63&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;注意：你需要手动从apk安装包的&lt;code&gt;lib/arm64-v8a&lt;/code&gt;目录中提取出&lt;a href=&#34;https://raw.githubusercontent.com/fuqiuluo/unidbg-fetch-qsign/master/txlib%2F8.9.63%2Flibfekit.so&#34;&gt;libfekit.so&lt;/a&gt;、&lt;a href=&#34;https://raw.githubusercontent.com/fuqiuluo/unidbg-fetch-qsign/master/txlib%2F8.9.63%2FlibQSec.so&#34;&gt;libQSec.so&lt;/a&gt;文件并存放至一个文件夹，然后使用&lt;code&gt;--basePath&lt;/code&gt;指定该文件夹的&lt;code&gt;绝对路径&lt;/code&gt;，结构例如：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;your_dir&lt;br&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;libfekit.so&lt;br&gt;&lt;/li&gt; &#xA;    &lt;li&gt;libQSec.so&lt;br&gt;&lt;/li&gt; &#xA;    &lt;li&gt;config.json&lt;br&gt;&lt;/li&gt; &#xA;    &lt;li&gt;dtconfig.json&lt;br&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;dtconfig.json&lt;/code&gt;是FEBound.java内数据的热更新版本，每个版本的QQ不同，可自行从&lt;code&gt;com.tencent.mobileqq.dt.model.FEBound&lt;/code&gt;逆向得到。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;--basePath=&lt;code&gt;/home/your_dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Docker部署&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/xzhouqd/qsign&#34;&gt;Dockerhub: xzhouqd/qsign&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;此Docker image相关提问请到：&lt;a href=&#34;https://github.com/XZhouQD/unidbg-fetch-qsign&#34;&gt;xzhouqd/unidbg-fetch-qsign&lt;/a&gt; 提交issue&lt;/p&gt; &#xA;&lt;h2&gt;docker-compose部署&lt;/h2&gt; &#xA;&lt;p&gt;直接使用openjdk11启动服务&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;2&#39;&#xA;&#xA;services:&#xA;  qsign:&#xA;    image: openjdk:11.0-jdk&#xA;    environment:&#xA;      TZ: Asia/Shanghai&#xA;    restart: always&#xA;    working_dir: /app&#xA;    # 按需修改相关参数&#xA;    command: bash bin/unidbg-fetch-qsign --port=8080 --count=1 --library=txlib/8.9.63 --android_id=someandroidid&#xA;    volumes:&#xA;      # 当前目录放置qsign的解压包&#xA;      - ./unidbg-fetch-qsign:/app&#xA;      # 当前目录放置txlib&#xA;      - ./txlib:/app/txlib&#xA;    ports:&#xA;      # 按需调整宿主机端口&#xA;      - 8901:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux 部署（Ubuntu）&lt;/h2&gt; &#xA;&lt;h3&gt;环境配置&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;环境配置：&#xA;x86&#xA;Ubuntu 22.04.1&#xA;openjdk version &#34;19.0.2&#34; &#xA;在root家目录操作&#xA;&#xA;机器人：&#xA;Yunzai-Bot&#xA;icqq 0.4.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;下载 unidbg-fetch-qsignre 的 Releases，解压&lt;/h3&gt; &#xA;&lt;p&gt;这里以1.1.0为例，记得改下载连接，慢的话可以传上去或者用代理&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fuqiuluo/unidbg-fetch-qsign/releases&#34;&gt;https://github.com/fuqiuluo/unidbg-fetch-qsign/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/fuqiuluo/unidbg-fetch-qsign/releases/download/1.1.0/unidbg-fetch-qsign-1.1.0.zip&#xA;&#xA;# 没装unzip的话&#xA;apt install unzip&#xA;# 解压，注意文件名&#xA;unzip unidbg-fetch-qsign-1.1.0.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;获取项目内 txlib 文件夹（Releases V1.1.3 JAR 已包含，这步不需要）&lt;/h3&gt; &#xA;&lt;p&gt;这里 clone 了整个 unidbg-fetch-qsign 项目，之后按需复制&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/fuqiuluo/unidbg-fetch-qsign.git&#xA;&#xA;# 复制txlib，注意目录&#xA;cp -r unidbg-fetch-qsign/txlib unidbg-fetch-qsign-1.1.0/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;修改配置文件，初次运行&lt;/h3&gt; &#xA;&lt;p&gt;检查 java&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -version&#xA;&#xA;# 没装的话&#xA;apt install openjdk-19-jdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;查看端口占用&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;netstat -lntp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;releases 1.1.0 在这时可以直接运行，注意修改参数，这里使用绝对路径&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/root/unidbg-fetch-qsign-1.1.0/bin/unidbg-fetch-qsign --host=127.0.0.1 --port=8901  --count=2 --library=/root/unidbg-fetch-qsign-1.1.0/txlib/8.9.63  --android_id=我自己填的是device.json里面的参数&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;releases 1.1.3 最好修改 txlib/8.9.63/config.json 文件，之后执行&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/root/unidbg-fetch-qsign-1.1.3/bin/unidbg-fetch-qsign --basePath=/root/unidbg-fetch-qsign-1.1.3/txlib/8.9.63&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;测试可以正常运行，ctrl+c结束&lt;/p&gt; &#xA;&lt;h3&gt;后台运行与开机启动 （通过 systemd）&lt;/h3&gt; &#xA;&lt;p&gt;新建文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vi /etc/systemd/system/qsign.service&#xA;&#xA;#========在qsign.service文件中输入以下内容========&#xA;#========注意更改Service参数，要用绝对路径========&#xA;[Unit]&#xA;Description=unidbg-fetch-qsign&#xA;After=network.target&#xA;&#xA;[Service]&#xA;ExecStart=这里输入之前前台运行测试成功的命令&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;#================&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;重载与启动&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;#重载服务，每次修改都要&#xA;sudo systemctl daemon-reload&#xA;#启动qsign&#xA;sudo systemctl start qsign&#xA;&#xA;#查看端口情况，可见已在指定的port开启服务&#xA;netstat -lntp&#xA;&#xA;#以下数条可按需执行&#xA;#启动&#xA;sudo systemctl start qsign&#xA;#停止&#xA;sudo systemctl stop qsign&#xA;#重启&#xA;sudo systemctl restart qsign&#xA;#设置开机启动&#xA;sudo systemctl enable qsign&#xA;#禁用开机启动&#xA;sudo systemctl disable qsign&#xA;#查看运行状态&#xA;sudo systemctl status qsign&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;你可能需要的项目&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cssxsh/fix-protocol-version&#34;&gt;fix-protocol-version&lt;/a&gt;：基于&lt;strong&gt;mirai&lt;/strong&gt;的qsign api对接。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;使用API&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/fuqiuluo/unidbg-fetch-qsign/raw/master/refresh_token/README.md&#34;&gt;初始化QSign&amp;amp;刷新token&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;原始energy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;# http://127.0.0.1:8080/custom_energy?uin=[QQ]&amp;amp;salt=[SALT HEX]&amp;amp;data=[DATA]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数名&lt;/th&gt; &#xA;   &lt;th&gt;意义&lt;/th&gt; &#xA;   &lt;th&gt;例子&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UIN&lt;/td&gt; &#xA;   &lt;td&gt;Bot的QQ号&lt;/td&gt; &#xA;   &lt;td&gt;114514&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;非专业人员勿用。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;sign&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;# http://127.0.0.1:8080/sign?uin=[UIN]&amp;amp;qua=[QUA]&amp;amp;cmd=[CMD]&amp;amp;seq=[SEQ]&amp;amp;buffer=[BUFFER]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数名&lt;/th&gt; &#xA;   &lt;th&gt;意义&lt;/th&gt; &#xA;   &lt;th&gt;例子&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UIN&lt;/td&gt; &#xA;   &lt;td&gt;Bot的QQ号&lt;/td&gt; &#xA;   &lt;td&gt;114514&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QUA&lt;/td&gt; &#xA;   &lt;td&gt;QQ User-Agent，与QQ版本有关&lt;/td&gt; &#xA;   &lt;td&gt;V1_AND_SQ_8.9.63_4188_HDBM_T&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CMD&lt;/td&gt; &#xA;   &lt;td&gt;指令类型，CMD有很多种，目前登录、发信息均需要sign&lt;/td&gt; &#xA;   &lt;td&gt;wtlogin.login&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SEQ&lt;/td&gt; &#xA;   &lt;td&gt;数据包序列号，用于指示请求的序列或顺序。它是一个用于跟踪请求的顺序的数值，确保请求按正确的顺序处理&lt;/td&gt; &#xA;   &lt;td&gt;2333&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BUFFER&lt;/td&gt; &#xA;   &lt;td&gt;数据包包体，不需要长度，将byte数组转换为HEX发送&lt;/td&gt; &#xA;   &lt;td&gt;020348010203040506&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;POST的支持&lt;/summary&gt; &#xA; &lt;p&gt;如果buffer过长，会超出get请求方式的长度上限，因此sign的请求也支持POST的方式。&lt;/p&gt; &#xA; &lt;p&gt;请求头 &lt;code&gt;Content-Type: application/x-www-form-urlencoded&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;POST的内容：&#34;uin=&#34; + uin + &#34;&amp;amp;qua=&#34; + qua + &#34;&amp;amp;cmd=&#34; + cmd + &#34;&amp;amp;seq=&#34; + seq + &#34;&amp;amp;buffer=&#34; + buffer&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;登录包energy(tlv544)&lt;/h3&gt; &#xA;&lt;p&gt;下面这个只是个例子&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;# http://127.0.0.1:8080/energy?version=[VERSION]&amp;amp;uin=[UIN]&amp;amp;guid=[GUID]&amp;amp;data=[DATA]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数名&lt;/th&gt; &#xA;   &lt;th&gt;意义&lt;/th&gt; &#xA;   &lt;th&gt;例子&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VERSION&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;注意！&lt;strong&gt;这里的VERSION指的&lt;/strong&gt;不是QQ的版本号，而是SDK Version&lt;/strong&gt;，可以在QQ安装包中找到此信息&lt;/td&gt; &#xA;   &lt;td&gt;6.0.0.2549&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UIN&lt;/td&gt; &#xA;   &lt;td&gt;Bot的QQ号&lt;/td&gt; &#xA;   &lt;td&gt;114514&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GUID&lt;/td&gt; &#xA;   &lt;td&gt;登录设备的GUID，将byte数组转换为HEX发送，必须是32长度的HEX字符串&lt;/td&gt; &#xA;   &lt;td&gt;ABCDABCDABCDABCDABCDABCDABCDABCD&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DATA&lt;/td&gt; &#xA;   &lt;td&gt;QQ发送登录包的CmdId和SubCmdId，例子中810是登陆CmdId，9是SubCmdId&lt;/td&gt; &#xA;   &lt;td&gt;810_9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;其他&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;由于项目的特殊性，我们可能&lt;del&gt;随时删除本项目&lt;/del&gt;且不会做出任何声明&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;奇怪的交际援助&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;昵称：&lt;strong&gt;[咖啡]&lt;/strong&gt; QQ：1456****68&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ChuckerTeam/chucker</title>
    <updated>2023-07-09T01:58:29Z</updated>
    <id>tag:github.com,2023-07-09:/ChuckerTeam/chucker</id>
    <link href="https://github.com/ChuckerTeam/chucker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔎 An HTTP inspector for Android &amp; OkHTTP (like Charles but on device)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chucker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://search.maven.org/artifact/com.github.chuckerteam.chucker/library&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.github.chuckerteam.chucker/library&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/ChuckerTeam/chucker/workflows/Pre%20Merge%20Checks/badge.svg?branch=develop&#34; alt=&#34;Pre Merge Checks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/ChuckerTeam/Chucker.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-orange.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.slack.com/archives/CRWD6370R&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-@kotlinlang/chucker-yellow.svg?logo=slack&#34; alt=&#34;Join the chat at https://kotlinlang.slack.com&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://androidweekly.net/issues/issue-375&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Android%20Weekly-%23375-blue.svg?sanitize=true&#34; alt=&#34;Android Weekly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A fork of &lt;a href=&#34;https://github.com/jgilfelt/chuck&#34;&gt;Chuck&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/assets/ic_launcher-web.png&#34; alt=&#34;chucker icon&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#chucker&#34;&gt;Chucker&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#getting-started-&#34;&gt;Getting Started 👣&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#features-&#34;&gt;Features 🧰&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#multi-window-&#34;&gt;Multi-Window 🚪&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#configure-&#34;&gt;Configure 🎨&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#redact-header-%EF%B8%8F&#34;&gt;Redact-Header 👮‍♂️&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#decode-body-&#34;&gt;Decode-Body 📖&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#notification-permission-&#34;&gt;Notification Permission 🔔&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#migrating-&#34;&gt;Migrating 🚗&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#snapshots-&#34;&gt;Snapshots 📦&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#faq-&#34;&gt;FAQ ❓&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#sponsors-&#34;&gt;Sponsors 💸&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#contributing-&#34;&gt;Contributing 🤝&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#building-&#34;&gt;Building 🛠&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#acknowledgments-&#34;&gt;Acknowledgments 🌸&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#thanks&#34;&gt;Thanks&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#libraries&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/#license-&#34;&gt;License 📄&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Chucker simplifies the inspection of &lt;strong&gt;HTTP(S) requests/responses&lt;/strong&gt; fired by your Android App. Chucker works as an &lt;strong&gt;OkHttp Interceptor&lt;/strong&gt; persisting all those events inside your application, and providing a UI for inspecting and sharing their content.&lt;/p&gt; &#xA;&lt;p&gt;Apps using Chucker will display a &lt;strong&gt;notification&lt;/strong&gt; showing a summary of ongoing HTTP activity. Tapping on the notification launches the full Chucker UI. Apps can optionally suppress the notification, and launch the Chucker UI directly from within their own interface.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/assets/chucker-http.gif&#34; alt=&#34;chucker http sample&#34; width=&#34;50%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Getting Started 👣&lt;/h2&gt; &#xA;&lt;p&gt;Chucker is distributed through &lt;a href=&#34;https://search.maven.org/artifact/com.github.chuckerteam.chucker/library&#34;&gt;Maven Central&lt;/a&gt;. To use it you need to add the following &lt;strong&gt;Gradle dependency&lt;/strong&gt; to the &lt;code&gt;build.gradle&lt;/code&gt; file of your android app module (NOT the root file).&lt;/p&gt; &#xA;&lt;p&gt;Please note that you should add both the &lt;code&gt;library&lt;/code&gt; and the &lt;code&gt;library-no-op&lt;/code&gt; variant to isolate Chucker from release builds as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;  debugImplementation &#34;com.github.chuckerteam.chucker:library:4.0.0&#34;&#xA;  releaseImplementation &#34;com.github.chuckerteam.chucker:library-no-op:4.0.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start using Chucker, just plug in a new &lt;code&gt;ChuckerInterceptor&lt;/code&gt; to your OkHttp Client Builder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val client = OkHttpClient.Builder()&#xA;                .addInterceptor(ChuckerInterceptor(context))&#xA;                .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;That&#39;s it!&lt;/strong&gt; 🎉 Chucker will now record all HTTP interactions made by your OkHttp client.&lt;/p&gt; &#xA;&lt;p&gt;Historically, Chucker was distributed through JitPack. You can find older version of Chucker here: &lt;a href=&#34;https://jitpack.io/#ChuckerTeam/chucker&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/ChuckerTeam/chucker.svg?sanitize=true&#34; alt=&#34;JitPack&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features 🧰&lt;/h2&gt; &#xA;&lt;p&gt;Don&#39;t forget to check the &lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt; to have a look at all the changes in the latest version of Chucker.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatible with &lt;strong&gt;OkHTTP 4&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;API &amp;gt;= 21&lt;/strong&gt; compatible&lt;/li&gt; &#xA; &lt;li&gt;Easy to integrate (just 2 gradle &lt;code&gt;implementation&lt;/code&gt; lines).&lt;/li&gt; &#xA; &lt;li&gt;Works &lt;strong&gt;out of the box&lt;/strong&gt;, no customization needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Empty release artifact&lt;/strong&gt; 🧼 (no traces of Chucker in your final APK).&lt;/li&gt; &#xA; &lt;li&gt;Support for body text search with &lt;strong&gt;highlighting&lt;/strong&gt; 🕵️‍♂️&lt;/li&gt; &#xA; &lt;li&gt;Support for showing &lt;strong&gt;images&lt;/strong&gt; in HTTP Responses 🖼&lt;/li&gt; &#xA; &lt;li&gt;Support for custom decoding of HTTP bodies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Multi-Window 🚪&lt;/h3&gt; &#xA;&lt;p&gt;The main Chucker activity is launched in its own task, allowing it to be displayed alongside the host app UI using Android 7.x multi-window support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/assets/chucker-multiwindow.gif&#34; alt=&#34;Multi-Window&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configure 🎨&lt;/h2&gt; &#xA;&lt;p&gt;You can customize chucker providing an instance of a &lt;code&gt;ChuckerCollector&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// Create the Collector&#xA;val chuckerCollector = ChuckerCollector(&#xA;        context = this,&#xA;        // Toggles visibility of the notification&#xA;        showNotification = true,&#xA;        // Allows to customize the retention period of collected data&#xA;        retentionPeriod = RetentionManager.Period.ONE_HOUR&#xA;)&#xA;&#xA;// Create the Interceptor&#xA;val chuckerInterceptor = ChuckerInterceptor.Builder(context)&#xA;        // The previously created Collector&#xA;        .collector(chuckerCollector)&#xA;        // The max body content length in bytes, after this responses will be truncated.&#xA;        .maxContentLength(250_000L)&#xA;        // List of headers to replace with ** in the Chucker UI&#xA;        .redactHeaders(&#34;Auth-Token&#34;, &#34;Bearer&#34;)&#xA;        // Read the whole response body even when the client does not consume the response completely.&#xA;        // This is useful in case of parsing errors or when the response body&#xA;        // is closed before being read like in Retrofit with Void and Unit types.&#xA;        .alwaysReadResponseBody(true)&#xA;        // Use decoder when processing request and response bodies. When multiple decoders are installed they&#xA;        // are applied in an order they were added.&#xA;        .addBodyDecoder(decoder)&#xA;        // Controls Android shortcut creation.&#xA;        .createShortcut(true)&#xA;        .build()&#xA;&#xA;// Don&#39;t forget to plug the ChuckerInterceptor inside the OkHttpClient&#xA;val client = OkHttpClient.Builder()&#xA;        .addInterceptor(chuckerInterceptor)&#xA;        .build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Redact-Header 👮‍♂️&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; The data generated and stored when using Chucker may contain sensitive information such as Authorization or Cookie headers, and the contents of request and response bodies.&lt;/p&gt; &#xA;&lt;p&gt;It is intended for &lt;strong&gt;use during development&lt;/strong&gt;, and not in release builds or other production deployments.&lt;/p&gt; &#xA;&lt;p&gt;You can redact headers that contain sensitive information by calling &lt;code&gt;redactHeader(String)&lt;/code&gt; on the &lt;code&gt;ChuckerInterceptor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;interceptor.redactHeader(&#34;Auth-Token&#34;, &#34;User-Session&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Decode-Body 📖&lt;/h3&gt; &#xA;&lt;p&gt;Chucker by default handles only plain text, Gzip compressed or Brotli compressed. If you use a binary format like, for example, Protobuf or Thrift it won&#39;t be automatically handled by Chucker. You can, however, install a custom decoder that is capable of reading data from different encodings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;object ProtoDecoder : BodyDecoder {&#xA;    fun decodeRequest(request: Request, body: ByteString): String? = if (request.isExpectedProtoRequest) {&#xA;        decodeProtoBody(body)&#xA;    } else {&#xA;        null&#xA;    }&#xA;&#xA;    fun decodeResponse(request: Response, body: ByteString): String? = if (request.isExpectedProtoResponse) {&#xA;        decodeProtoBody(body)&#xA;    } else {&#xA;        null&#xA;    }&#xA;}&#xA;interceptorBuilder.addBodyDecoder(ProtoDecoder).build()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notification Permission 🔔&lt;/h3&gt; &#xA;&lt;p&gt;Starting with Android 13, your apps needs to request the &lt;code&gt;POST_NOTIFICATION&lt;/code&gt; permission to the user in order to show notifications. As Chucker also shows notifications to show network activity you need to handle permission request depending on your app features. Without this permission Chucker will track network activity, but there will be no notifications on devices with Android 13 and newer.&lt;/p&gt; &#xA;&lt;p&gt;There are 2 possible cases:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If your app is already sending notifications, you don&#39;t need to do anything as Chucker will show a notification as soon as the &lt;code&gt;POST_NOTIFICATION&lt;/code&gt; permission is granted to your app.&lt;/li&gt; &#xA; &lt;li&gt;If your app does not send notifications you would need to open Chucker directly (can be done via shortcut, which is added to your app by default when Chucker is added) and click &lt;code&gt;Allow&lt;/code&gt; in the dialog with permission request. In case you don&#39;t allow this permission or dismiss that dialog by mistake, on every Chucker launch there will be a snackbar with a button to open your app settings where you can change permissions settings. Note, you need to grant &lt;code&gt;POST_NOTIFICATION&lt;/code&gt; to your app in Settings as there will be no separate app in Apps list in Settings.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Migrating 🚗&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re migrating &lt;strong&gt;from &lt;a href=&#34;https://github.com/jgilfelt/chuck&#34;&gt;Chuck&lt;/a&gt; to Chucker&lt;/strong&gt;, please refer to this &lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/docs/migrating-from-chuck.md&#34;&gt;migration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re migrating &lt;strong&gt;from Chucker v2.0 to v3.0&lt;/strong&gt;, please expect multiple breaking changes. You can find documentation on how to update your code on this other &lt;a href=&#34;https://raw.githubusercontent.com/ChuckerTeam/chucker/main/docs/migrating-from-2.0.md&#34;&gt;migration guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Snapshots 📦&lt;/h2&gt; &#xA;&lt;p&gt;Development of Chucker happens in the &lt;a href=&#34;https://github.com/ChuckerTeam/chucker/tree/main&#34;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt; branch. Every push to &lt;code&gt;main&lt;/code&gt; will trigger a publishing of a &lt;code&gt;SNAPSHOT&lt;/code&gt; artifact for the upcoming version. You can get those snapshots artifacts directly from Sonatype with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {&#xA;    maven { url &#34;https://oss.sonatype.org/content/repositories/snapshots/&#34; }&#xA;}&#xA;dependencies {&#xA;  debugImplementation &#34;com.github.chuckerteam.chucker:library:4.1.0-SNAPSHOT&#34;&#xA;  releaseImplementation &#34;com.github.chuckerteam.chucker:library-no-op:4.1.0-SNAPSHOT&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Moreover, you can still use &lt;a href=&#34;https://jitpack.io/#ChuckerTeam/chucker&#34;&gt;JitPack&lt;/a&gt; as it builds every branch. So the top of &lt;code&gt;main&lt;/code&gt; is available here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {&#xA;    maven { url &#34;https://jitpack.io&#34; }&#xA;}&#xA;dependencies {&#xA;  debugImplementation &#34;com.github.chuckerteam.chucker:library:main-SNAPSHOT&#34;&#xA;  releaseImplementation &#34;com.github.chuckerteam.chucker:library-no-op:main-SNAPSHOT&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;⚠️ Please note that the latest snapshot might be &lt;strong&gt;unstable&lt;/strong&gt;. Use it at your own risk ⚠️&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for the &lt;strong&gt;latest stable version&lt;/strong&gt;, you can always find it in &lt;code&gt;Releases&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ ❓&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why are some of my request headers (e.g. &lt;code&gt;Content-Encoding&lt;/code&gt; or &lt;code&gt;Accept-Encoding&lt;/code&gt;) missing?&lt;/li&gt; &#xA; &lt;li&gt;Why are retries and redirects not being captured discretely?&lt;/li&gt; &#xA; &lt;li&gt;Why are my encoded request/response bodies not appearing as plain text?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://square.github.io/okhttp/interceptors/&#34;&gt;this section of the OkHttp documentation&lt;/a&gt;. You can choose to use Chucker as either an application or network interceptor, depending on your requirements.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why Android &amp;lt; 21 is no longer supported?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to keep up with the changes in OkHttp we decided to bump its version in &lt;code&gt;4.x&lt;/code&gt; release. Chucker &lt;code&gt;3.5.x&lt;/code&gt; supports Android 16+ but its active development stopped and only bug fixes and minor improvements will land on &lt;a href=&#34;https://github.com/ChuckerTeam/chucker/tree/3.x&#34;&gt;3.x branch&lt;/a&gt; till March 2021.&lt;/p&gt; &#xA;&lt;h1&gt;Sponsors 💸&lt;/h1&gt; &#xA;&lt;p&gt;Chucker is maintained and improved during nights, weekends and whenever team has free time. If you use Chucker in your project, please consider sponsoring us. This will help us buy a domain for a website we will have soon and also spend some money on charity. Additionally, sponsorship will also help us understand better how valuable Chucker is for people&#39;s everyday work.&lt;/p&gt; &#xA;&lt;p&gt;You can sponsor us by clicking &lt;code&gt;Sponsor&lt;/code&gt; button.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing 🤝&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re offering support for Chucker on the &lt;a href=&#34;https://kotlinlang.slack.com/archives/CRWD6370R&#34;&gt;#chucker&lt;/a&gt; channel on &lt;a href=&#34;https://kotlinlang.slack.com/&#34;&gt;kotlinlang.slack.com&lt;/a&gt;. Come and join the conversation over there.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We&#39;re looking for contributors! Don&#39;t be shy.&lt;/strong&gt; 😁 Feel free to open issues/pull requests to help us improve this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When reporting a new Issue, make sure to attach &lt;strong&gt;Screenshots&lt;/strong&gt;, &lt;strong&gt;Videos&lt;/strong&gt; or &lt;strong&gt;GIFs&lt;/strong&gt; of the problem you are reporting.&lt;/li&gt; &#xA; &lt;li&gt;When submitting a new PR, make sure tests are all green. Write new tests if necessary.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Short &lt;code&gt;TODO&lt;/code&gt; List for new contributors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increment the test coverage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChuckerTeam/chucker/labels/help%20wanted&#34;&gt;Issues marked as &lt;code&gt;Help wanted&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building 🛠&lt;/h3&gt; &#xA;&lt;p&gt;In order to start working on Chucker, you need to fork the project and open it in Android Studio/IntelliJ IDEA.&lt;/p&gt; &#xA;&lt;p&gt;Before committing we suggest you install the pre-commit hooks with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew installGitHook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will make sure your code is validated against KtLint and Detekt before every commit. The command will run automatically before the &lt;code&gt;clean&lt;/code&gt; task, so you should have the pre-commit hook installed by then.&lt;/p&gt; &#xA;&lt;p&gt;Before submitting a PR please run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the library and will run all the verification tasks (ktlint, detekt, lint, unit tests) locally. This will make sure your CI checks will pass.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments 🌸&lt;/h2&gt; &#xA;&lt;h3&gt;Maintainers&lt;/h3&gt; &#xA;&lt;p&gt;Chucker is currently developed and maintained by the &lt;a href=&#34;https://github.com/ChuckerTeam&#34;&gt;ChuckerTeam&lt;/a&gt;. When submitting a new PR, please ping one of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cortinico&#34;&gt;@cortinico&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/olivierperez&#34;&gt;@olivierperez&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vbuberen&#34;&gt;@vbuberen&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Thanks&lt;/h3&gt; &#xA;&lt;p&gt;Big thanks to our contributors ❤️&lt;/p&gt; &#xA;&lt;h3&gt;Libraries&lt;/h3&gt; &#xA;&lt;p&gt;Chucker uses the following open source libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/okhttp&#34;&gt;OkHttp&lt;/a&gt; - Copyright Square, Inc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/gson&#34;&gt;Gson&lt;/a&gt; - Copyright Google Inc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/room&#34;&gt;Room&lt;/a&gt; - Copyright Google Inc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License 📄&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Copyright (C) 2018-2021 Chucker Team.&#xA;    Copyright (C) 2017 Jeff Gilfelt.&#xA;&#xA;    Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;    you may not use this file except in compliance with the License.&#xA;    You may obtain a copy of the License at&#xA;&#xA;       http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;    Unless required by applicable law or agreed to in writing, software&#xA;    distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;    See the License for the specific language governing permissions and&#xA;    limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>square/okio</title>
    <updated>2023-07-09T01:58:29Z</updated>
    <id>tag:github.com,2023-07-09:/square/okio</id>
    <link href="https://github.com/square/okio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern I/O library for Android, Java, and Kotlin Multiplatform.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Okio&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://square.github.io/okio/&#34;&gt;project website&lt;/a&gt; for documentation and APIs.&lt;/p&gt; &#xA;&lt;p&gt;Okio is a library that complements &lt;code&gt;java.io&lt;/code&gt; and &lt;code&gt;java.nio&lt;/code&gt; to make it much easier to access, store, and process your data. It started as a component of &lt;a href=&#34;https://github.com/square/okhttp&#34;&gt;OkHttp&lt;/a&gt;, the capable HTTP client included in Android. It&#39;s well-exercised and ready to solve new problems.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2013 Square, Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>