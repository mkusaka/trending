<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-25T01:59:54Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PierfrancescoSoffritti/android-youtube-player</title>
    <updated>2023-06-25T01:59:54Z</updated>
    <id>tag:github.com,2023-06-25:/PierfrancescoSoffritti/android-youtube-player</id>
    <link href="https://github.com/PierfrancescoSoffritti/android-youtube-player" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YouTube Player library for Android and Chromecast, stable and customizable.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;android-youtube-player&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/PierfrancescoSoffritti/android-youtube-player&#34;&gt;&lt;img src=&#34;https://travis-ci.com/PierfrancescoSoffritti/android-youtube-player.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.appbrain.com/stats/libraries/details/android_youtube_player/android-youtube-player&#34;&gt;&lt;img src=&#34;https://www.appbrain.com/stats/libraries/shield/android_youtube_player.svg?sanitize=true&#34; alt=&#34;Android YouTube Player&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/details/1/4322&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Android%20Arsenal-android--youtube--player-brightgreen.svg?style=flat&#34; alt=&#34;android arsenal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pierfrancescosoffritti.github.io/android-youtube-player/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-website-brightgreen.svg?sanitize=true&#34; alt=&#34;website&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/intent/tweet?text=A%20new%20YouTube%20Player%20library%20for%20Android%20and%20Chromecast,%20stable%20and%20customizable&amp;amp;url=https://github.com/PierfrancescoSoffritti/android-youtube-player&amp;amp;via=psoffritti&amp;amp;hashtags=opensource,youtubeplayer,androiddev&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;share on twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;180px&#34; src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/android-youtube-player_512x512.png&#34; title=&#34;android-youtube-player logo&#34;&gt; &#xA;&lt;p&gt;android-youtube-player is a stable and customizable open source YouTube player for Android. It provides a simple View that can be easily integrated in every Activity/Fragment.&lt;/p&gt; &#xA;&lt;p&gt;The library is a wrapper around the &lt;a href=&#34;https://developers.google.com/youtube/iframe_api_reference&#34;&gt;IFrame Player API&lt;/a&gt;, which runs inside of a WebView. Therefore there are &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#does-this-library-breaks-youtube-terms-of-service&#34;&gt;no issues with YouTube Terms of Service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library also provides a &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#chromecast-extension-library&#34;&gt;Chromecast YouTube player&lt;/a&gt;, that you can use to cast YouTube videos from your app to a Chromecast device.&lt;/p&gt; &#xA;&lt;h2&gt;Why does this library exist?&lt;/h2&gt; &#xA;&lt;p&gt;The library provided by Google is the &lt;a href=&#34;https://developers.google.com/youtube/android/player/&#34;&gt;YouTube Android Player API&lt;/a&gt;. This library has been &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/(https://code.google.com/p/gdata-issues/issues/detail?id=4395)&#34;&gt;historically not reliable&lt;/a&gt; and is now deprecated by Google.&lt;/p&gt; &#xA;&lt;p&gt;Google now recommends using the IFrame Player API inside a WebView, which is exactly what this library does, while also providing a native Java/Kotlin interface to interact with the web player.&lt;/p&gt; &#xA;&lt;p&gt;A lengthier explanation of why this library was created can be found in &lt;a href=&#34;https://medium.com/@soffritti.pierfrancesco/how-to-play-youtube-videos-in-your-android-app-c40427215230&#34;&gt;this Medium post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Who is using this library&lt;/h2&gt; &#xA;&lt;p&gt;Now that &lt;strong&gt;the official API from Google is deprecated&lt;/strong&gt;, &lt;code&gt;android-youtube-player&lt;/code&gt; is the main YouTube player library for Android.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Used by over 5 thousands apps&lt;/strong&gt;, with some big names like &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.flipkart.android&#34;&gt;Flipkart&lt;/a&gt;, &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.mcdo.mcdonalds&#34;&gt;McDonald&#39;s&lt;/a&gt;, &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.camerasideas.instashot&#34;&gt;InShot Video Editor&lt;/a&gt;, &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.genius.android&#34;&gt;Genius&lt;/a&gt; and &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.andrewshu.android.reddit&#34;&gt;reddit is fun&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://www.appbrain.com/stats/libraries/details/android_youtube_player/android-youtube-player&#34;&gt;see more stats here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you choose to use this library and profit from it&lt;/strong&gt;, consider informing me and &lt;a href=&#34;https://github.com/sponsors/PierfrancescoSoffritti&#34;&gt;become a sponsor on GitHub&lt;/a&gt;. This will enable me to continue developing the library, so you don&#39;t have to.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/showcase.jpg&#34; alt=&#34;showcase&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Does this library break YouTube terms of service?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; No.&lt;/p&gt; &#xA;&lt;p&gt;The library uses YouTube&#39;s own web player to play videos. Therefore it is 100% compliant with terms of service. Playing YouTube videos in a WebView is the recomended approach by Google, both on &lt;a href=&#34;https://developers.google.com/youtube/android/player/&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://developers.google.com/youtube/v3/guides/ios_youtube_helper&#34;&gt;iOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;That said how you use the library matters, be sure to play videos only when the player is visible. If you follow the instructions in the documentation, the library will automatically handle this for you.&lt;/p&gt; &#xA;&lt;p&gt;Also remember when publishing your app on the PlayStore to write title and description in a way that makes it obvious that your app doesn&#39;t have any affiliation with YouTube (the company). &lt;strong&gt;This issue has nothing to do with the library itself&lt;/strong&gt;, but I figured it may be useful knowledge for many of you considering to use it.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents (Core)&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#sample-app&#34;&gt;Sample app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#download&#34;&gt;Download&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#chromecast&#34;&gt;Chromecast&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#api-documentation&#34;&gt;API documentation&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerview&#34;&gt;YouTubePlayerView&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#xml-attributes&#34;&gt;XML attributes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#initialization&#34;&gt;Initialization&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#iframeplayeroptions&#34;&gt;IFramePlayerOptions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#full-screen&#34;&gt;Full screen&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#release-the-youtubeplayerview&#34;&gt;Release the YouTubePlayerView&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#lifecycleobserver&#34;&gt;LifecycleObserver&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayer&#34;&gt;YouTubePlayer&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#get-a-reference-to-youtubeplayer&#34;&gt;Get a reference to YouTubePlayer&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#load-videos&#34;&gt;Load videos&lt;/a&gt; &#xA;      &lt;ol&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#utility-for-loading-videos&#34;&gt;Utility for loading videos&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ol&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#events&#34;&gt;Events&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayertracker&#34;&gt;YouTubePlayerTracker&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerlistener&#34;&gt;YouTubePlayerListener&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#onready-callback&#34;&gt;onReady callback&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#onstatechanged-callback&#34;&gt;onStateChanged callback&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#create-your-own-custom-ui&#34;&gt;Create your own custom UI&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#defaultplayeruicontroller&#34;&gt;DefaultPlayerUiController&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#reusable-ui-components&#34;&gt;Reusable UI components&lt;/a&gt; &#xA;      &lt;ol&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerseekbar&#34;&gt;YouTubePlayerSeekBar&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#fadeviewhelper&#34;&gt;FadeViewHelper&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#timeutilities&#34;&gt;TimeUtilities&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ol&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#network-events&#34;&gt;Network events&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#chromecast-support&#34;&gt;Chromecast support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#useful-info&#34;&gt;Useful info&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#hardware-acceleration&#34;&gt;Hardware acceleration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#play-youtube-videos-in-the-background&#34;&gt;Play YouTube videos in the background&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#minsdk&#34;&gt;minSdk&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Table of Contents (Chromecast)&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#chromecast-extension-library&#34;&gt;Chromecast extension library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#quick-start---chromecast&#34;&gt;Quick start and API documentation&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#download-extra-dependencies&#34;&gt;Download extra dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#sender&#34;&gt;Sender&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#receiver&#34;&gt;Receiver&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#registration&#34;&gt;Registration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#hosting-the-chromecast-receiver&#34;&gt;Hosting the Chromecast receiver&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#workarounds&#34;&gt;Workarounds&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#change-video-quality&#34;&gt;Change video quality&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#login-to-youtube-account&#34;&gt;Login to YouTube account&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#block-ads&#34;&gt;Block Ads (Auto Ad Skip)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#remove-annoying-views&#34;&gt;Remove views that cannot be removed by the controls parameter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#hide-captions&#34;&gt;Force to hide subtitles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#play-next-recomended-video&#34;&gt;Play Next Recomended Video&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Sample app&lt;/h1&gt; &#xA;&lt;p&gt;&lt;span&gt;📝&lt;/span&gt; Both the &lt;strong&gt;core module&lt;/strong&gt; and the &lt;strong&gt;chromecast module&lt;/strong&gt; have a sample app, to provide examples of usage of the libraries.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/&#34;&gt;Go to source code of &lt;strong&gt;core&lt;/strong&gt; sample app&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/chromecast-sender-sample-app&#34;&gt;Go to source code of &lt;strong&gt;chromecast-sender&lt;/strong&gt; sample app&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;📲&lt;/span&gt; You can also download and install the apks of both sample apps.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/apk&#34;&gt;Download apk of &lt;strong&gt;core&lt;/strong&gt; sample app&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/chromecast-sender-sample-app/apk&#34;&gt;Download apk of &lt;strong&gt;chromecast-sender&lt;/strong&gt; sample app&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;👀&lt;/span&gt; If you want to know when a new release of the library is published: &lt;a href=&#34;https://github.com/PierfrancescoSoffritti/android-youtube-player/watchers&#34;&gt;watch this repository on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;p&gt;The Gradle dependency is available via &lt;a href=&#34;https://repo1.maven.org/maven2/com/pierfrancescosoffritti/androidyoutubeplayer/&#34;&gt;MavenCentral&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The minimum API level supported by this library is API 17.&lt;/p&gt; &#xA;&lt;h3&gt;Core&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;core&lt;/em&gt; module contains the YouTube Player. It&#39;s all you need to play YouTube videos in your app.&lt;/p&gt; &#xA;&lt;p&gt;Add this to your module level &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  implementation &#39;com.pierfrancescosoffritti.androidyoutubeplayer:core:12.0.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chromecast&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;chromecast-sender&lt;/em&gt; module contains the Chromecast YouTube Player. Use it if you need to cast YouTube videos from your app to a Chromecast device.&lt;/p&gt; &#xA;&lt;p&gt;Add this to your module level &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  implementation &#39;com.pierfrancescosoffritti.androidyoutubeplayer:chromecast-sender:0.28&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Quick start&lt;/h1&gt; &#xA;&lt;p&gt;In order to start using the player you need to add a &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerview&#34;&gt;YouTubePlayerView&lt;/a&gt; to your layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;LinearLayout&#xA;    xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#xA;    xmlns:app=&#34;http://schemas.android.com/apk/res-auto&#34;&#xA;    android:layout_width=&#34;match_parent&#34;&#xA;    android:layout_height=&#34;match_parent&#34;&#xA;    android:orientation=&#34;vertical&#34; &amp;gt;&#xA;&#xA;    &amp;lt;com.pierfrancescosoffritti.androidyoutubeplayer.core.player.views.YouTubePlayerView&#xA;        android:id=&#34;@+id/youtube_player_view&#34;&#xA;        android:layout_width=&#34;match_parent&#34;&#xA;        android:layout_height=&#34;wrap_content&#34;&#xA;        &#xA;        app:videoId=&#34;S0Q4gqBUs7c&#34;&#xA;        app:autoPlay=&#34;true&#34; /&amp;gt;&#xA;&amp;lt;/LinearLayout&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended that you add &lt;code&gt;YouTubePlayerView&lt;/code&gt; as a lifecycle observer of its parent Activity/Fragment. You can &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#lifecycleobserver&#34;&gt;read why in the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView youTubePlayerView = findViewById(R.id.youtube_player_view);&#xA;getLifecycle().addObserver(youTubePlayerView);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(If you have problems adding &lt;code&gt;YouTubePlayerView&lt;/code&gt; as a &lt;code&gt;LifecycleObserver&lt;/code&gt;, you probably aren&#39;t using androidx, &lt;a href=&#34;https://developer.android.com/jetpack/androidx/migrate&#34;&gt;I suggest you migrate your dependencies&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is all you need, a YouTube video is now playing in your app.&lt;/p&gt; &#xA;&lt;p&gt;If you want more control, everything can be done programmatically by getting a reference to your &lt;code&gt;YouTubePlayerView&lt;/code&gt; and adding a &lt;code&gt;YouTubePlayerListener&lt;/code&gt; to it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView youTubePlayerView = findViewById(R.id.youtube_player_view);&#xA;getLifecycle().addObserver(youTubePlayerView);&#xA;&#xA;youTubePlayerView.addYouTubePlayerListener(new AbstractYouTubePlayerListener() {&#xA;  @Override&#xA;  public void onReady(@NonNull YouTubePlayer youTubePlayer) {&#xA;    String videoId = &#34;S0Q4gqBUs7c&#34;;&#xA;    youTubePlayer.loadVideo(videoId, 0);&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you decde to initialize the player programmatically, remember to remove the &lt;code&gt;autoPlay&lt;/code&gt; and &lt;code&gt;videoId&lt;/code&gt; attributes from the &lt;code&gt;YouTubePlayerView&lt;/code&gt; in your XML file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;API documentation&lt;/h1&gt; &#xA;&lt;p&gt;The following sections provides detailed documentation for every component in the library.&lt;/p&gt; &#xA;&lt;p&gt;If you see any problem or mistake in the documentation, feel free to contribute by opening an issue an/or sending a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;YouTubePlayerView&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerView&lt;/code&gt; is the access point to the &lt;code&gt;YouTubePlayer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can add the View to your layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;LinearLayout&#xA;    xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#xA;    android:layout_width=&#34;match_parent&#34;&#xA;    android:layout_height=&#34;match_parent&#34; &amp;gt;&#xA;&#xA;    &amp;lt;com.pierfrancescosoffritti.androidyoutubeplayer.core.player.views.YouTubePlayerView&#xA;        android:id=&#34;@+id/youtube_player_view&#34;&#xA;        android:layout_width=&#34;match_parent&#34;&#xA;        android:layout_height=&#34;wrap_content&#34;/&amp;gt;&#xA;&amp;lt;/LinearLayout&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can create it programmatically and manually add it to a ViewGroup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView youTubePlayerView = new YouTubePlayerView(this);&#xA;layout.addView(youTubePlayerView);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the height of the View is set to &lt;code&gt;wrap_content&lt;/code&gt;, the View will automatically have an aspect ratio of 16:9, to match the aspect ratio of most YouTube videos.&lt;/p&gt; &#xA;&lt;h3&gt;XML attributes&lt;/h3&gt; &#xA;&lt;p&gt;If you add the view to your XML layout you have the possibility to set a few custom attributes, to customize the view&#39;s look and behavior. Everything can also be done programmatically.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#videoId&#34;&gt;videoId&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#autoPlay&#34;&gt;autoPlay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#enableAutomaticInitialization&#34;&gt;enableAutomaticInitialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#handleNetworkEvents&#34;&gt;handleNetworkEvents&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;videoId&lt;/h4&gt; &#xA;&lt;p&gt;This attribute expects a &lt;code&gt;String&lt;/code&gt;, which is the id of a YouTube video.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If set&lt;/strong&gt;, the player will automatically start playing the video.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If not set&lt;/strong&gt;, the player won&#39;t automatically play.&lt;/p&gt; &#xA;&lt;p&gt;In general you should use this attribute if you want your player to play only one video. This is not a rule, just best practice. In fact, even if you set the attribute it is still possible to play other videos programmatically.&lt;/p&gt; &#xA;&lt;h4&gt;autoPlay&lt;/h4&gt; &#xA;&lt;p&gt;This attribute expects a &lt;code&gt;boolean&lt;/code&gt;. Its default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If &lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;, the player start playing the video provided with &lt;code&gt;videoId&lt;/code&gt; without waiting for user input.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If &lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;, the player will wait for user input before playing the video provided with &lt;code&gt;videoId&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;videoId&lt;/code&gt; is not set, this attribute is useless, therefore if it is set to &lt;code&gt;true&lt;/code&gt; &lt;code&gt;YouTubePlayerView&lt;/code&gt; will throw an exception.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;autoPlay&lt;/code&gt; won&#39;t work if &lt;code&gt;YouTubePlayerView&lt;/code&gt; is not &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#lifecycleobserver&#34;&gt;added as a &lt;code&gt;LifecycleObserver&lt;/code&gt; of its parent Activity/Fragment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;enableAutomaticInitialization&lt;/h4&gt; &#xA;&lt;p&gt;This attribute expects a &lt;code&gt;boolean&lt;/code&gt;. Its default value is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If &lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;YouTubePlayerView&lt;/code&gt; will take care of its initialization.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If &lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;, you will have to initialize &lt;code&gt;YouTubePlayerView&lt;/code&gt; programmatically.&lt;/p&gt; &#xA;&lt;p&gt;In general it makes sense to leave this attribute to &lt;code&gt;true&lt;/code&gt;. You may want to set it to &lt;code&gt;false&lt;/code&gt; only if you need to initialize the view using &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#iframeplayeroptions&#34;&gt;&lt;code&gt;IFramePlayerOptions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;handleNetworkEvents&lt;/h4&gt; &#xA;&lt;p&gt;This attribute expects a &lt;code&gt;boolean&lt;/code&gt;. Its default value is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If &lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;YouTubePlayerView&lt;/code&gt; handle network events by registering a &lt;code&gt;NetworkReceiver&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If &lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;, you will be responsible for handling network events.&lt;/p&gt; &#xA;&lt;p&gt;It is useful to have this attribute set to &lt;code&gt;true&lt;/code&gt; so that if the connection drops while the player is initializing &lt;code&gt;YouTubePlayerView&lt;/code&gt; will be able to resume the initialization automatically once the network is back.&lt;/p&gt; &#xA;&lt;p&gt;If you decide to set it to &lt;code&gt;false&lt;/code&gt; you should also disable &lt;code&gt;enableAutomaticInitialization&lt;/code&gt; and manage network events on your own.&lt;/p&gt; &#xA;&lt;p&gt;Read more about network events &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#network-events&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;p&gt;If you need to initialize &lt;code&gt;YouTubePlayerView&lt;/code&gt; programmatically, you can set its xml attribute &lt;code&gt;enableAutomaticInitialization&lt;/code&gt; to false. You can do the same programmatically by calling &lt;code&gt;youTubePlayerView.setEnableAutomaticInitialization(false)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After automatic initialization has been disabled, you need to take care of the initialization of &lt;code&gt;YouTubePlayerView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use these methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView.initialize(YouTubePlayerListener listener)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView.initialize(YouTubePlayerListener listener, IFramePlayerOptions iframePlayerOptions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView.initialize(YouTubePlayerListener listener, boolean handleNetworkEvents)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerView.initialize(YouTubePlayerListener listener, boolean handleNetworkEvents, IFramePlayerOptions iframePlayerOptions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;initialize(YouTubePlayerListener)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Initialize the &lt;code&gt;YouTubePlayer&lt;/code&gt;. Network events are automatically handled by the player.&lt;/p&gt; &#xA;&lt;p&gt;The argument is a &lt;code&gt;YouTubePlayerListener&lt;/code&gt;, you can read more about it &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerlistener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;initialize(YouTubePlayerListener, boolean)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Initialize the &lt;code&gt;YouTubePlayer&lt;/code&gt;. By using the &lt;code&gt;boolean&lt;/code&gt; is possible to decide if the player should handle network events or not, read more about network events &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#network-events&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;initialize(YouTubePlayerListener, boolean, IFramePlayerOptions)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;By passing an &lt;code&gt;IFramePlayerOptions&lt;/code&gt; to the initialize method it is possible to set some of the parameters of the IFrame YouTubePlayer. Read more about &lt;code&gt;IFramePlayerOptions&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#iframeplayeroptions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All the possible parameters and values are listed &lt;a href=&#34;https://developers.google.com/youtube/player_parameters#Parameters&#34;&gt;here&lt;/a&gt;. Not all of them are supported in this library because some don&#39;t make sense in this context. &lt;a href=&#34;https://github.com/PierfrancescoSoffritti/android-youtube-player/issues&#34;&gt;Open an issue&lt;/a&gt; if you need a parameter that is not currently supported.&lt;/p&gt; &#xA;&lt;h3&gt;IFramePlayerOptions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;IFramePlayerOptions&lt;/code&gt; is an optional argument that can be passed to &lt;code&gt;YouTubePlayerView.initialize(YouTubePlayerListener, boolean, IFramePlayerOptions)&lt;/code&gt;, it can be used to set some of the parameters of the IFrame YouTubePlayer.&lt;/p&gt; &#xA;&lt;p&gt;A simple example of how to use &lt;code&gt;IFramePlayerOptions&lt;/code&gt; can be found in the sample app &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/sampleapp/examples/iFramePlayerOptionsExample/IFramePlayerOptionsExampleActivity.java&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the Builder to get a &lt;code&gt;IFramePlayerOptions&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;IFramePlayerOptions iFramePlayerOptions = new IFramePlayerOptions.Builder()&#xA;  .controls(1)&#xA;  .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the possible parameters and values are listed &lt;a href=&#34;https://developers.google.com/youtube/player_parameters#Parameters&#34;&gt;here&lt;/a&gt;. Not all of them are supported in this library because some don&#39;t make sense in this context. &lt;a href=&#34;https://github.com/PierfrancescoSoffritti/android-youtube-player/issues&#34;&gt;Open an issue&lt;/a&gt; if you need a parameter that is not currently supported.&lt;/p&gt; &#xA;&lt;h4&gt;Supported options&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;controls&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This option indicates whether the web-based UI of the IFrame player should be hidden or visible.&lt;/p&gt; &#xA;&lt;p&gt;If set to 0: web UI is not visible.&lt;/p&gt; &#xA;&lt;p&gt;If set to 1: web UI is visible.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;rel&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This option controls the related videos shown at the end of a video.&lt;/p&gt; &#xA;&lt;p&gt;If set to 0: related videos will come from the same channel as the video that was just played.&lt;/p&gt; &#xA;&lt;p&gt;If set to 1: related videos will come from multiple channels.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;ivLoadPolicy&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This option controls video annotations.&lt;/p&gt; &#xA;&lt;p&gt;If set to 1: the player will show annotations.&lt;/p&gt; &#xA;&lt;p&gt;If set to 3: the player won&#39;t show annotations.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;ccLoadPolicy&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This option controls video captions. It doesn&#39;t work with automatically generated captions.&lt;/p&gt; &#xA;&lt;p&gt;If set to 0: the player will show captions.&lt;/p&gt; &#xA;&lt;p&gt;If set to 1: the player won&#39;t show captions.&lt;/p&gt; &#xA;&lt;h3&gt;Full screen&lt;/h3&gt; &#xA;&lt;p&gt;The full screen button can be added to the player by using &lt;code&gt;IFramePlayerOptions&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;IFramePlayerOptions iFramePlayerOptions = new IFramePlayerOptions.Builder()&#xA;  .controls(1)&#xA;  // enable full screen button&#xA;  .fullscreen(1)&#xA;  .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can listen to full screen events by adding a &lt;code&gt;FullscreenListener&lt;/code&gt; to &lt;code&gt;YouTubePlayerView&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayerView.addFullscreenListener(new FullscreenListener() {&#xA;  @Override&#xA;  public void onEnterFullscreen(@NonNull View fullscreenView, @NonNull Function0&amp;lt;Unit&amp;gt; exitFullscreen) {&#xA;  }&#xA;&#xA;  @Override&#xA;  public void onExitFullscreen() {&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/sampleapp/examples/fullscreenExample/FullscreenExampleActivity.kt&#34;&gt;the sample app for an example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;FullscreenListener#onEnterFullscreen&lt;/code&gt; is called, the player will be rendered inside &lt;code&gt;fullscreenView&lt;/code&gt; instead of &lt;code&gt;YouTubePlayerView&lt;/code&gt;, until &lt;code&gt;FullscreenListener#onExitFullscreen&lt;/code&gt; is called. Therefore you are required to add &lt;code&gt;fullscreenView&lt;/code&gt; to your app&#39;s view hierarchy when fullscreen is started, and remove it when fullscreen is ended.&lt;/p&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;YouTubePlayerView#matchParent&lt;/code&gt; and &lt;code&gt;YouTubePlayerView#wrapContent&lt;/code&gt; to expand the view to fill its parent. It is responsibility of the developer to hide other Views in the Activity, change the orientation of the Activity etc. The sample app contains an &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/sampleapp/utils/FullscreenHelper.java&#34;&gt;helper class&lt;/a&gt; that can help you to update your app state, but this is not part of the library.&lt;/p&gt; &#xA;&lt;p&gt;If you need to change the orientation of your Activity/Fragment, remember that by default Android recreates Activities and Fragments when the orientation changes. Make sure that you manually handle orientation changes by adding the attribute &lt;code&gt;android:configChanges&lt;/code&gt; to your Activity definition in the manifest.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;application &amp;gt;&#xA;  &amp;lt;activity&#xA;    android:configChanges=&#34;orientation|screenSize|keyboardHidden|smallestScreenSize|screenLayout&#34; /&amp;gt;&#xA;&amp;lt;/application&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Release the YouTubePlayerView&lt;/h3&gt; &#xA;&lt;p&gt;Remember to release the &lt;code&gt;YouTubePlayerView&lt;/code&gt; when you&#39;re done using it, by calling &lt;code&gt;YouTubePlayerView.release()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override&#xA;public void onDestroy() {&#xA;    super.onDestroy();&#xA;    youTubePlayerView.release();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You don&#39;t need to manually release the player if you registered it as an observer of your Activity/Fragment&#39;s lifecycle.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;LifecycleObserver&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerView&lt;/code&gt; implements the &lt;code&gt;LifecycleObserver&lt;/code&gt; interface, this means that it is a lifecycle aware component.&lt;/p&gt; &#xA;&lt;p&gt;If added as an observer of your Activity/Fragment&#39;s lifecycle, &lt;code&gt;YouTubePlayerView&lt;/code&gt; will be smarter. &lt;strong&gt;It is highly recommended that you register &lt;code&gt;YouTubePlayerView&lt;/code&gt; as a &lt;code&gt;LifecycleObserver&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;lifecycleOwner.getLifecycle().addObserver(youTubePlayerView);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding &lt;code&gt;YouTubePlayerView&lt;/code&gt; as an observer to a lifecycle will allow &lt;code&gt;YouTubePlayerView&lt;/code&gt; to automatically pause the playback when the Activity/Fragment stops (not when it pauses, in order to support multi-window applications).&lt;/p&gt; &#xA;&lt;p&gt;If you want your app to keep &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#play-youtube-videos-in-the-background&#34;&gt;playing when the Activity/Fragment is not visible&lt;/a&gt; (remember that this behavior is not allowed, if you want to publish your app on the PlayStore), don&#39;t register the &lt;code&gt;YouTubePlayerView&lt;/code&gt; as a lifecycle observer. But remember to manually call &lt;code&gt;release()&lt;/code&gt; when the Activity/Fragment is being destroyed.&lt;/p&gt; &#xA;&lt;h2&gt;YouTubePlayer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayer&lt;/code&gt; is the component responsible for controlling the playback of YouTube videos. You can see its contract &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/player/YouTubePlayer.kt&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Every &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerview&#34;&gt;&lt;code&gt;YouTubePlayerView&lt;/code&gt;&lt;/a&gt; contains a &lt;code&gt;YouTubePlayer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Get a reference to YouTubePlayer&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to get a reference to the &lt;code&gt;YouTubePlayer&lt;/code&gt;, through the &lt;code&gt;YouTubePlayerView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;1. YouTubePlayerView.getYouTubePlayerWhenReady&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerView.getYouTubePlayerWhenReady&lt;/code&gt; can be used to get a reference to the &lt;code&gt;YouTubePlayer&lt;/code&gt;. As the name of the method says, you&#39;ll only get the player when it is ready.&lt;/p&gt; &#xA;&lt;p&gt;Therefore this function takes a callback as argument, the callback will be called when the &lt;code&gt;YouTubePlayer&lt;/code&gt; is ready.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayerView.getYouTubePlayerWhenReady(youTubePlayer -&amp;gt; { &#xA;  // do stuff with it&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. YouTubePlayerListener&lt;/h4&gt; &#xA;&lt;p&gt;Every method of a &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerlistener&#34;&gt;&lt;code&gt;YouTubePlayerListener&lt;/code&gt;&lt;/a&gt; has the &lt;code&gt;YouTubePlayer&lt;/code&gt; as argument.&lt;/p&gt; &#xA;&lt;h3&gt;Load videos&lt;/h3&gt; &#xA;&lt;p&gt;To load a video you can use two methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayer.loadVideo(String videoId, float startTime)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayer.cueVideo(String videoId, float startTime)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The difference between the two is that &lt;code&gt;loadVideo&lt;/code&gt; loads and automatically plays the video, while &lt;code&gt;cueVideo&lt;/code&gt; just loads video and thumbnail but doesn&#39;t autoplay.&lt;/p&gt; &#xA;&lt;h4&gt;Utility for loading videos&lt;/h4&gt; &#xA;&lt;p&gt;If the Activity/Fragment is in the background, but you created a &lt;code&gt;YouTubePlayerListener&lt;/code&gt; that calls &lt;code&gt;loadVideo&lt;/code&gt; when &lt;code&gt;onReady&lt;/code&gt; is called, the video will start playing even if the Activity is in the background.&lt;/p&gt; &#xA;&lt;p&gt;To solve this problem you should use the &lt;code&gt;loadOrCueVideo&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Provided as an utility function in Java.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerUtils.loadOrCueVideo(&#xA;  youTubePlayer,&#xA;  getLifecycle(),&#xA;  videoId,&#xA;  startTime&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And as an extension function in Kotlin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;youTubePlayer.loadOrCueVideo(lifeCycle, videoId, startTime)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function will call &lt;code&gt;loadVideo&lt;/code&gt; only if the Activity is resumed, otherwise it will call &lt;code&gt;cueVideo&lt;/code&gt;, so that the video starts loading but not playing.&lt;/p&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;During its existence the player will constantly emit events, you can easily listen to all of them by adding a &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerlistener&#34;&gt;&lt;code&gt;YouTubePlayerListener&lt;/code&gt;&lt;/a&gt; to it.&lt;/p&gt; &#xA;&lt;h3&gt;YouTubePlayerTracker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerTracker&lt;/code&gt; is an utility provided by the library to easily keep track of a &lt;code&gt;YouTubePlayer&lt;/code&gt;&#39;s state and other information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerTracker&lt;/code&gt; is a &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerlistener&#34;&gt;&lt;code&gt;YouTubePlayerListener&lt;/code&gt;&lt;/a&gt;, therefore in order to use it you need to add it as a listener to the &lt;code&gt;YouTubePlayer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can then use the tracker to get the player&#39;s state and various information about the video that is being played.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerTracker tracker = new YouTubePlayerTracker();&#xA;youTubePlayer.addListener(tracker);&#xA;&#xA;tracker.getState();&#xA;tracker.getCurrentSecond();&#xA;tracker.getVideoDuration();&#xA;tracker.getVideoId();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;YouTubePlayerListener&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;YouTubePlayerListener&lt;/code&gt; is used to intercept events emitted by a &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayer&#34;&gt;&lt;code&gt;YouTubePlayer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;During its existence a &lt;code&gt;YouTubePlayer&lt;/code&gt; will constantly emit events, you can listen to them by adding a &lt;code&gt;YouTubePlayerListener&lt;/code&gt; to it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayer.addListener(YouTubePlayerListener listener);&#xA;youTubePlayer.removeListener(YouTubePlayerListener listener);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are the method that a &lt;code&gt;YouTubePlayerListener&lt;/code&gt; must implement, every method takes a reference to the &lt;code&gt;YouTubePlayer&lt;/code&gt; and some other arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Called when the player is ready to play videos.&#xA;// You should start using the player only after this method is called.&#xA;void onReady(@NonNull YouTubePlayer youTubePlayer)&#xA;&#xA;// Called every time the state of the player changes.&#xA;void onStateChange(@NonNull YouTubePlayer youTubePlayer, @NonNull PlayerConstants.PlayerState state)&#xA;&#xA;// Called every time the quality of the playback changes.&#xA;void onPlaybackQualityChange(@NonNull YouTubePlayer youTubePlayer, @NonNull PlayerConstants.PlaybackQuality playbackQuality)&#xA;&#xA;// Called every time the speed of the playback changes.&#xA;void onPlaybackRateChange(@NonNull YouTubePlayer youTubePlayer, @NonNull PlayerConstants.PlaybackRate playbackRate)&#xA;&#xA;// Called when an error occurs in the player.&#xA;void onError(@NonNull YouTubePlayer youTubePlayer, @NonNull PlayerConstants.PlayerError error)&#xA;&#xA;// Called periodically by the player, the argument is the number of seconds that have been played.&#xA;void onCurrentSecond(@NonNull YouTubePlayer youTubePlayer, float second)&#xA;&#xA;// Called when the total duration of the video is loaded.&#xA;// Note that getDuration() will return 0 until the video&#39;s metadata is loaded, which normally happens just after the video starts playing.&#xA;void onVideoDuration(@NonNull YouTubePlayer youTubePlayer, float duration)&#xA;&#xA;// Called periodically by the player, the argument is the percentage of the video that has been buffered.&#xA;void onVideoLoadedFraction(@NonNull YouTubePlayer youTubePlayer, float loadedFraction)&#xA;&#xA;// Called when the id of the current video is loaded&#xA;void onVideoId(@NonNull YouTubePlayer youTubePlayer, String videoId)&#xA;&#xA;void onApiChange(@NonNull YouTubePlayer youTubePlayer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to implement all the methods of this interface, you can extend &lt;code&gt;AbstractYouTubePlayerListener&lt;/code&gt; instead of implementing &lt;code&gt;YouTubePlayerListener&lt;/code&gt; and override only the methods you are interested in.&lt;/p&gt; &#xA;&lt;p&gt;For more information on the methods defined in the &lt;code&gt;YouTubePlayerListener&lt;/code&gt; interface, please refer to the documentation defined above each method &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/player/listeners/YouTubePlayerListener.kt&#34;&gt;in the codebase&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;onReady callback&lt;/h3&gt; &#xA;&lt;p&gt;The onReady callback of a &lt;code&gt;YouTubePlayerListener&lt;/code&gt; is called once, when the &lt;code&gt;YouTubePlayer&lt;/code&gt; is ready to be used for the first time. &lt;strong&gt;You can&#39;t use a &lt;code&gt;YouTubePlayer&lt;/code&gt; before it is ready&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;onStateChanged callback&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;YouTubePlayer&lt;/code&gt; has a state, that changes accordingly to the playback changes. The &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/player/PlayerConstants.kt&#34;&gt;list of possible states&lt;/a&gt; is the same of the YouTube &lt;a href=&#34;https://developers.google.com/youtube/iframe_api_reference#Playback_status&#34;&gt;IFrame Player API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;UNKNOWN&#xA;UNSTARTED&#xA;ENDED&#xA;PLAYING&#xA;PAUSED&#xA;BUFFERING&#xA;VIDEO_CUED&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create your own custom UI&lt;/h2&gt; &#xA;&lt;p&gt;Customization is an important aspect of this library. If need to, you can completely replace the default UI of the player.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerView&lt;/code&gt; has methods for that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;View inflateCustomPlayerUi(@LayoutRes int customUiLayoutID)&#xA;void setCustomPlayerUi(View view)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method takes in the &lt;code&gt;id&lt;/code&gt; of a layout resource, which is a regular XML file containing the definition of a layout, or a &lt;code&gt;View&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The new UI will be overlayed over the player. For this reason it is recommended to disable the UI of the IFrame player, by initializing the &lt;code&gt;YouTubePlayerView&lt;/code&gt; with &lt;code&gt;IFramePlayerOptions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// disable web ui&#xA;IFramePlayerOptions options = new IFramePlayerOptions.Builder().controls(0).build();&#xA;youTubePlayerView.initialize(listener, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You are responsible for managing your custom UI with your own code. Meaning: you should write your own class to manage the UI. A simple but complete example can be seen &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/sampleapp/examples/customUiExample&#34;&gt;here, in the sample app&lt;/a&gt;, I recommend taking a few minutes to read it, it should be trivial to understand.&lt;/p&gt; &#xA;&lt;p&gt;Example (taken from sample app):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;View customPlayerUi = youTubePlayerView.inflateCustomPlayerUi(R.layout.custom_player_ui);&#xA;&#xA;YouTubePlayerListener listener = new AbstractYouTubePlayerListener() {&#xA;&#xA;  @Override&#xA;  public void onReady(@NonNull YouTubePlayer youTubePlayer) {&#xA;    CustomPlayerUiController customPlayerUiController = new CustomPlayerUiController(CustomUiActivity.this, customPlayerUi, youTubePlayer, youTubePlayerView);&#xA;    youTubePlayer.addListener(customPlayerUiController);&#xA;&#xA;    YouTubePlayerUtils.loadOrCueVideo(&#xA;      youTubePlayer, getLifecycle(),&#xA;      VideoIdsProvider.getNextVideoId(),0f&#xA;    );&#xA;  }&#xA;};&#xA;&#xA;// disable iframe ui&#xA;IFramePlayerOptions options = new IFramePlayerOptions.Builder().controls(0).build();&#xA;youTubePlayerView.initialize(listener, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A blog post going deeper on this is available &lt;a href=&#34;https://medium.com/@soffritti.pierfrancesco/customize-android-youtube-players-ui-9f32da9e8505&#34;&gt;at this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example of a custom UI: (this is just a ugly example, but here your design skills are the limit :))&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/custom_ui_screenshot.jpg&#34; alt=&#34;custom ui example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Warning: when replacing the IFrame UI, be carfeul not to break YouTube&#39;s terms of service. Altering the player look and feel might be an issue if you intend to publish your app on the PlayStore.&lt;/p&gt; &#xA;&lt;h3&gt;DefaultPlayerUiController&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;DefaultPlayerUiController&lt;/code&gt; is a pre-made ready-to-use custom UI.&lt;/p&gt; &#xA;&lt;p&gt;Starting from version 12.0.0 of the library, this UI is available as a separate module that needs to be used in conjunction with the &lt;code&gt;core&lt;/code&gt; module. To import the library add this to the dependencies in your &lt;code&gt;gradle.build&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  implementation &#39;com.pierfrancescosoffritti.androidyoutubeplayer:core:{latestversion}&#39;&#xA;  implementation &#39;com.pierfrancescosoffritti.androidyoutubeplayer:custom-ui:{latest-version}&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After importing the dependency, you can use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerListener listener = new AbstractYouTubePlayerListener() {&#xA;  @Override&#xA;  public void onReady(@NonNull YouTubePlayer youTubePlayer) {&#xA;    // using pre-made custom ui&#xA;    DefaultPlayerUiController defaultPlayerUiController = new DefaultPlayerUiController(youTubePlayerView, youTubePlayer);&#xA;    youTubePlayerView.setCustomPlayerUi(defaultPlayerUiController.getRootView());&#xA;  }&#xA;};&#xA;&#xA;// disable iframe ui&#xA;IFramePlayerOptions options = new IFramePlayerOptions.Builder().controls(0).build();&#xA;youTubePlayerView.initialize(listener, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The UI will look something like this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/chromecast_screenshot.jpg&#34; alt=&#34;YouTubePlayerSeekBar&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;DefaultPlayerUiController&lt;/code&gt; to hide views, add new view etc.&lt;/p&gt; &#xA;&lt;h4&gt;Menu&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;DefaultPlayerUiController&lt;/code&gt; has an optional menu. You can use these methods to control the menu&#39;s behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PlayerUiController.showMenuButton(boolean show);&#xA;PlayerUiController.setMenuButtonClickListener(@NonNull View.OnClickListener customMenuButtonClickListener);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default the menu icon is not visible.&lt;/p&gt; &#xA;&lt;p&gt;The default &lt;code&gt;OnClickListener&lt;/code&gt; opens the menu when the menu icon is clicked. You can change this behavior, for example to open a menu with a different UX, like a bottom sheet panel. Obviously if you want a UX different from the one provided by the library, you are responsible for creating your own components.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Menu screenshot:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/menu_screenshot.jpg&#34; alt=&#34;menu screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;YouTubePlayerMenu&lt;/h5&gt; &#xA;&lt;p&gt;You can get a reference of the &lt;code&gt;YouTubePlayerMenu&lt;/code&gt; from the &lt;code&gt;PlayerUiController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerMenu PlayerUiController.getMenu()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you get a &lt;code&gt;YouTubePlayerMenu&lt;/code&gt; object you can add and remove items to it, show it and dismiss it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;YouTubePlayerMenu addItem(MenuItem menuItem)&#xA;YouTubePlayerMenu removeItem(MenuItem menuItem)&#xA;YouTubePlayerMenu removeItem(int itemIndex)&#xA;&#xA;void show(View anchorView)&#xA;void dismiss()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initially the &lt;code&gt;YouTubePlayerMenu&lt;/code&gt; doesn&#39;t contain any item. You need to add them.&lt;/p&gt; &#xA;&lt;h5&gt;MenuItem&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;MenuItem&lt;/code&gt;s are the items of the &lt;code&gt;YouTubePlayerMenu&lt;/code&gt;. They have a title, an optional icon and a &lt;code&gt;OnClickListener&lt;/code&gt; that is called when the item is clicked.&lt;/p&gt; &#xA;&lt;h3&gt;Reusable UI components&lt;/h3&gt; &#xA;&lt;p&gt;The library provides some pre-built UI components, these components are useful to reduce the time needed to build your own UI and controllers.&lt;/p&gt; &#xA;&lt;p&gt;Starting from version 12.0.0, these components exist in the &lt;code&gt;custom-ui&lt;/code&gt; module. So you need to add it to your app&#39;s dependencies in order to use them.&lt;/p&gt; &#xA;&lt;h4&gt;YouTubePlayerSeekBar&lt;/h4&gt; &#xA;&lt;p&gt;This component is useful to display and control the time of the playback. It shows the current time, the total duration of the video and a seek bar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/YouTubePlayerSeekBar.jpg&#34; alt=&#34;YouTubePlayerSeekBar&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can add it to your layout programmatically or in your xml.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;com.pierfrancescosoffritti.androidyoutubeplayer.core.ui.views.YouTubePlayerSeekBar&#xA;  android:id=&#34;@+id/youtube_player_seekbar&#34;&#xA;  android:layout_width=&#34;match_parent&#34;&#xA;  android:layout_height=&#34;wrap_content&#34;&#xA;&#xA;  app:fontSize=&#34;12sp&#34;&#xA;  app:color=&#34;@color/red&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to change font size and color by using the &lt;code&gt;fontSize&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; attributes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;YouTubePlayerSeekBar&lt;/code&gt; implements &lt;code&gt;YouTubePlayerListener&lt;/code&gt;. In order for it to work you need to add it as a listener to your &lt;code&gt;YouTubePlayer&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayer.addListener(youTubePlayerSeekBar);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may want to listen to events from &lt;code&gt;YouTubePlayerSeekBar&lt;/code&gt;, in order to update the current time of your &lt;code&gt;YouTubePlayer&lt;/code&gt; when the user moves the touch bar. To do that pass a &lt;code&gt;YouTubePlayerSeekBarListener&lt;/code&gt; to &lt;code&gt;YouTubePlayerSeekBar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayerSeekBar.setYoutubePlayerSeekBarListener(new YouTubePlayerSeekBarListener() {&#xA;  @Override&#xA;  public void seekTo(float time) {&#xA;    youTubePlayer.seekTo(time);&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;FadeViewHelper&lt;/h4&gt; &#xA;&lt;p&gt;An helper class that automatically fades out a view when not used. It can be used to automate the fade in and out of a container for the player controls, so that they automatically fade when appropriate.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;FadingFrameLayout&lt;/code&gt; is a &lt;code&gt;YouTubePlayerListener&lt;/code&gt; therefore it can change it&#39;s behavior based on the state of the player. For example: if the video is paused it won&#39;t automatically fade out.&lt;/p&gt; &#xA;&lt;p&gt;You can initialize it by passing to the constructor the view you want to be fading.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;FadeViewHelper fadeViewHelper = new FadeViewHelper(controlsContainer);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to change the animation duration and fade out delay by using the setter methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;fadeViewHelper.setAnimationDuration(FadeViewHelper.DEFAULT_ANIMATION_DURATION);&#xA;fadeViewHelper.setFadeOutDelay(FadeViewHelper.DEFAULT_FADE_OUT_DELAY);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They both take the time in milliseconds.&lt;/p&gt; &#xA;&lt;p&gt;In order for &lt;code&gt;FadeViewHelper&lt;/code&gt; to work properly you need to add it as a listener to your &lt;code&gt;YouTubePlayer&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;youTubePlayer.addListener(fadeViewHelper);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the method &lt;code&gt;FadeViewHelper.setDisabled(boolean)&lt;/code&gt; to disable the automatic fading.&lt;/p&gt; &#xA;&lt;p&gt;Use the method &lt;code&gt;FadeViewHelper.toggleVisibility()&lt;/code&gt; to toggle the visibility of the target view, with a fade animation.&lt;/p&gt; &#xA;&lt;h4&gt;TimeUtilities&lt;/h4&gt; &#xA;&lt;p&gt;A set of utilities than can be used to format time Strings (like duration and current time of videos).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String TimeUtilities.formatTime(float timeInSeconds)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Takes in the time in seconds and returns a String with the time formatted as &#34;M:SS&#34;. (M = minutes, S = seconds).&lt;/p&gt; &#xA;&lt;h2&gt;Network events&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerview&#34;&gt;&lt;code&gt;YouTubePlayerView&lt;/code&gt;&lt;/a&gt; automatically handles network events, using an internal BroadcastReceiver. You can choose to enable or disable this feature &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#initialization&#34;&gt;when initializing the player&lt;/a&gt;, or by setting the xml attribute &lt;code&gt;app:handleNetworkEvents=&#34;false&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Using the internal BroadcastReceiver is the easiest and recommended way to handle network events. The library is capable of handling cases in which the connection goes off and the playback can&#39;t continue, or cases in which the connection goes off while the player is in the process of initialization.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use your own BroadcastReceiver make sure to cover all the possible scenarios, in order to provide a good user experience.&lt;/p&gt; &#xA;&lt;h2&gt;Chromecast support&lt;/h2&gt; &#xA;&lt;p&gt;If you need to cast YouTube videos to a Chromecast device you can use the &lt;em&gt;chromecast-sender&lt;/em&gt; extension library. Read its documentation &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#chromecast-extension-library&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Useful info&lt;/h2&gt; &#xA;&lt;h3&gt;Hardware acceleration&lt;/h3&gt; &#xA;&lt;p&gt;Is important that the Activity containing the &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayerview&#34;&gt;YouTubePlayerView&lt;/a&gt; is hardware accelerated. This option is enabled by default, you don&#39;t have to change anything in your app. Unless you manually disabled hardware acceleration.&lt;/p&gt; &#xA;&lt;p&gt;If you need to disable hardware acceleration in your application, you can enable it at the Activity level, only for the Activity containing the &lt;code&gt;YouTubePlayerView&lt;/code&gt;, as explained &lt;a href=&#34;https://developer.android.com/guide/topics/graphics/hardware-accel.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Disabling hardware acceleration on the Activity containing &lt;code&gt;YouTubePlayerView&lt;/code&gt; may result in some weird behavior. The one I have observed so far shows a black image in the player, while the audio is playing normally.&lt;/p&gt; &#xA;&lt;h3&gt;Play YouTube videos in the background&lt;/h3&gt; &#xA;&lt;p&gt;With this library it&#39;s easy to play YouTube videos when the app is not visible. In order to do that you simply have to not call &lt;code&gt;youTubePlayer.pause()&lt;/code&gt; when the Activity is being paused or stopped and enable background playback by calling &lt;code&gt;YouTubePlayerView.enableBackgroundPlayback(true)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Adding &lt;code&gt;YouTubePlayerView&lt;/code&gt; as an &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#lifecycleobserver&#34;&gt;observer to a lifecycle&lt;/a&gt; will automatically cause the player to pause the playback when the Activity/Fragment stops.&lt;/p&gt; &#xA;&lt;p&gt;Therefore if you want your app to keep playing even when the Activity/Fragment is paused/stopped, don&#39;t register it as a lifecycle observer and enable background playback for the view. But remember to manually call &lt;code&gt;YouTubePlayerView.release()&lt;/code&gt; when the Activity/Fragment is destroyed.&lt;/p&gt; &#xA;&lt;p&gt;Remember that this behavior is against &lt;a href=&#34;https://developers.google.com/youtube/terms/api-services-terms-of-service&#34;&gt;YouTube terms of service&lt;/a&gt;, therefore if you decide to allow background playback you won&#39;t be able to publish your app on the Play Store.&lt;/p&gt; &#xA;&lt;p&gt;Use this functionality only if you plan to build the app for personal use or if you plan to distribute it through different channels.&lt;/p&gt; &#xA;&lt;h3&gt;minSdk&lt;/h3&gt; &#xA;&lt;p&gt;The minSdk of the library is 17. &lt;a href=&#34;https://developer.android.com/about/dashboards/index.html&#34;&gt;At this point in time&lt;/a&gt; it doesn&#39;t make much sense for new apps to support older versions of Android.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m not sure how WebView will behave on older versions of Android, but technically it should be possible to lower the minSdk. If you absolutely need to support older devices, I suggest you fork the library and lower the minSdk yourself.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Chromecast extension library&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;180px&#34; src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/chromecast-youtube-player-icon_512x512.png&#34; title=&#34;chromecast-youtube-player logo&#34;&gt; &#xA;&lt;p&gt;The &lt;em&gt;chromecast-sender&lt;/em&gt; extension library extends the &lt;em&gt;core&lt;/em&gt; library with chromecast functionalities. It shares some interfaces with the &lt;em&gt;core&lt;/em&gt; library, therefore they can be used together.&lt;/p&gt; &#xA;&lt;p&gt;The scope of this library is to provide the basic framework and utilities needed to cast YouTube videos to a Chromecast device.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The api of this library is not 100% finalized yet, but is stable. You can use it in your apps.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quick start - Chromecast&lt;/h1&gt; &#xA;&lt;p&gt;A Google Cast application is made of two components: a Sender and a Receiver.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#sender&#34;&gt;Sender&lt;/a&gt;: is responsible for initiating the cast sessions. In our case the sender is an Android app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#receiver&#34;&gt;Receiver&lt;/a&gt;: a web app that gets downloaded on the Chromecast when a sender initiates a cast sessions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Download extra dependencies&lt;/h3&gt; &#xA;&lt;p&gt;To use Google Cast functionalities add the &lt;em&gt;chromecast-sender&lt;/em&gt; module to your dependencies:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#download&#34;&gt;last-version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;implementation &#39;com.pierfrancescosoffritti.androidyoutubeplayer:chromecast-sender:last-version&#39;&#xA;&#xA;// this is not needed to use the library, but it provides the quite useful cast button.&#xA;implementation &#39;androidx.mediarouter:mediarouter:last-version&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sender&lt;/h3&gt; &#xA;&lt;p&gt;In order to use the Google Cast framework an app has to declare a &lt;code&gt;OptionsProvider&lt;/code&gt;, as described in the &lt;a href=&#34;https://developers.google.com/cast/docs/android_sender_integrate#initialize_the_cast_context&#34;&gt;Google Cast documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add this class to your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class CastOptionsProvider implements com.google.android.gms.cast.framework.OptionsProvider {&#xA;  public com.google.android.gms.cast.framework.CastOptions getCastOptions(Context appContext) {&#xA;&#xA;  // Register you custom receiver on the Google Cast SDK Developer Console to get this ID.&#xA;  String receiverId = &#34;&#34;;&#xA;&#xA;  return new com.google.android.gms.cast.framework.CastOptions.Builder()&#xA;    .setReceiverApplicationId(receiverId)&#xA;    .build();&#xA;  }&#xA;&#xA;  public List&amp;lt;SessionProvider&amp;gt; getAdditionalSessionProviders(Context context) {&#xA;    return null;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read how to get a &lt;code&gt;receiverId&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#registration&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;OptionsProvider&lt;/code&gt; to your &lt;code&gt;manifest.xml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(&lt;code&gt;OPTIONS_PROVIDER_CLASS_NAME&lt;/code&gt; is meant to be like that, change only the &lt;code&gt;android:value&lt;/code&gt; attribute)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;meta-data&#xA;  android:name=&#34;com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME&#34;&#xA;  android:value=&#34;yourpackagename.CastOptionsProvider&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add a MediaRouterButton to your layout, in your xml file or programmatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;LinearLayout&#xA;  xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#xA;  android:id=&#34;@+id/root&#34;&#xA;  android:layout_width=&#34;match_parent&#34;&#xA;  android:layout_height=&#34;match_parent&#34;&#xA;  android:orientation=&#34;vertical&#34; &amp;gt;&#xA;&#xA;  &amp;lt;androidx.mediarouter.app.MediaRouteButton&#xA;    android:id=&#34;@+id/media_route_button&#34;&#xA;    android:layout_width=&#34;wrap_content&#34;&#xA;    android:layout_height=&#34;wrap_content&#34; /&amp;gt;&#xA;&amp;lt;/LinearLayout&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in your Activity/Fragment get a reference to the &lt;code&gt;MediaRouteButton&lt;/code&gt; and check the status of the GooglePlayServices on the user&#39;s phone.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private int googlePlayServicesAvailabilityRequestCode = 1;&#xA;&#xA;@Override&#xA;protected void onCreate(Bundle savedInstanceState) {&#xA;  super.onCreate(savedInstanceState);&#xA;  setContentView(R.layout.activity_main);&#xA;&#xA;  androidx.mediarouter.app.MediaRouteButton mediaRouteButton = findViewById(R.id.media_route_button);&#xA;  CastButtonFactory.setUpMediaRouteButton(this, mediaRouteButton);&#xA;&#xA;  // can&#39;t use CastContext until I&#39;m sure the user has GooglePlayServices&#xA;  PlayServicesUtils.checkGooglePlayServicesAvailability(this, googlePlayServicesAvailabilityRequestCode, this::initChromecast);&#xA;}&#xA;&#xA;@Override&#xA;public void onActivityResult(int requestCode, int resultCode, Intent data) {&#xA;  super.onActivityResult(requestCode, resultCode, data);&#xA;&#xA;  // can&#39;t use CastContext until I&#39;m sure the user has GooglePlayServices&#xA;  if(requestCode == googlePlayServicesAvailabilityRequestCode)&#xA;    PlayServicesUtils.checkGooglePlayServicesAvailability(this, googlePlayServicesAvailabilityRequestCode, this::initChromecast);&#xA;}&#xA;&#xA;private void initChromecast() {&#xA;  new ChromecastYouTubePlayerContext(&#xA;    CastContext.getSharedInstance(this).getSessionManager(),&#xA;    new SimpleChromecastConnectionListener()&#xA;  );&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can easily check the GooglePlayServices status by using &lt;code&gt;PlayServicesUtils.checkGooglePlayServicesAvailability&lt;/code&gt;, a utility function provided by the &lt;em&gt;chromecast-sender&lt;/em&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PlayServicesUtils.checkGooglePlayServicesAvailability&lt;/code&gt; does what is described &lt;a href=&#34;https://developers.google.com/android/guides/setup#ensure_devices_have_the_google_play_services_apk&#34;&gt;here, in the official doc&lt;/a&gt;. It will check the status of GooglePlayServices and will show a dialog to the user if some action is needed in order to fix the problem. It won&#39;t display anything if everything is ok (which it is, 99% of the cases), in this case it will simply call the function passed as third parameter. If there are some problems, the result of the operation is delivered through the &lt;code&gt;onActivityResult&lt;/code&gt; callback.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;re sure the user&#39;s GooglePlayServices is all right, you can create the &lt;code&gt;ChromecastYouTubePlayerContext&lt;/code&gt;. The access point to the &lt;em&gt;chromecast-sender&lt;/em&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ChromecastYouTubePlayerContext&lt;/code&gt; is the entry point to the &lt;em&gt;chromecast-sender&lt;/em&gt; library. Once it is created, it automatically starts listening for Chromecast connection events. The &lt;code&gt;ChromecastConnectionListener&lt;/code&gt; passed to the constructor will be used to do just that.&lt;/p&gt; &#xA;&lt;p&gt;When a user clicks the &lt;code&gt;MediaRouteButton&lt;/code&gt; a series of events will be triggered in the framework, use &lt;code&gt;ChromecastConnectionListener&lt;/code&gt;&#39;s callbacks to be notified of these events.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private class SimpleChromecastConnectionListener implements ChromecastConnectionListener {&#xA;&#xA;  @Override&#xA;  public void onChromecastConnecting() {&#xA;    Log.d(getClass().getSimpleName(), &#34;onChromecastConnecting&#34;);&#xA;  }&#xA;&#xA;  @Override&#xA;  public void onChromecastConnected(@NonNull ChromecastYouTubePlayerContext chromecastYouTubePlayerContext) {&#xA;    Log.d(getClass().getSimpleName(), &#34;onChromecastConnected&#34;);&#xA;    initializeCastPlayer(chromecastYouTubePlayerContext);&#xA;  }&#xA;&#xA;  @Override&#xA;  public void onChromecastDisconnected() {&#xA;    Log.d(getClass().getSimpleName(), &#34;onChromecastDisconnected&#34;);&#xA;  }&#xA;&#xA;  private void initializeCastPlayer(ChromecastYouTubePlayerContext chromecastYouTubePlayerContext) {&#xA;    chromecastYouTubePlayerContext.initialize(new AbstractYouTubePlayerListener() {&#xA;      @Override&#xA;      public void onReady(@NonNull YouTubePlayer youTubePlayer) {&#xA;        youTubePlayer.loadVideo(&#34;S0Q4gqBUs7c&#34;, 0f);&#xA;      }&#xA;    });&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Only after a Chromecast connection has been established you can initialize the &lt;code&gt;ChromecastConnectionListener&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;From now on it will be the same as using a local &lt;code&gt;YouTubePlayer&lt;/code&gt;. As you can see in the example, you need to call &lt;code&gt;ChromecastYouTubePlayerContext.initialize&lt;/code&gt;, providing a &lt;code&gt;YouTubePlayerListener&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;YouTubePlayerListener&lt;/code&gt; will notify you of changes in the playback. You can call &lt;code&gt;loadVideo&lt;/code&gt;, &lt;code&gt;cueVideo&lt;/code&gt;, &lt;code&gt;pause&lt;/code&gt;, &lt;code&gt;play&lt;/code&gt; etc.. on the &lt;code&gt;YouTubePlayer&lt;/code&gt; object as you&#39;re used to, the library will take care of the communication with the Google Cast device.&lt;/p&gt; &#xA;&lt;p&gt;For how to use the &lt;code&gt;YouTubePlayer&lt;/code&gt; object and &lt;code&gt;YouTubePlayerListener&lt;/code&gt;, you can refer to the documentation for the &lt;em&gt;core&lt;/em&gt; library, &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#youtubeplayer&#34;&gt;YouTubePlayer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This example can be found &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/chromecast-sender-sample-app/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/chromecast/sampleapp/examples/basicExample/BasicExampleActivity.kt&#34;&gt;in the chromecast-sender sample app&lt;/a&gt;, written in Kotlin and in the &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/core-sample-app/src/main/java/com/pierfrancescosoffritti/androidyoutubeplayer/core/sampleapp/examples/chromecastExample/&#34;&gt;core sample app&lt;/a&gt;, written in Java.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Screenshot of the CastButton added to the YouTubePlayerView:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/images/chromecast_screenshot.jpg&#34; alt=&#34;chromecast button screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Receiver&lt;/h3&gt; &#xA;&lt;p&gt;This library requires a custom receiver, you can find the source code of the &lt;em&gt;chromecast-receiver&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/chromecast-receiver&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t need to change anything here, it just works. Take this code and upload it (as it is) on your server. (Read the &lt;a href=&#34;https://raw.githubusercontent.com/PierfrancescoSoffritti/android-youtube-player/master/#hosting-the-chromecast-receiver&#34;&gt;hosting paragraph&lt;/a&gt; to learn more about hosting).&lt;/p&gt; &#xA;&lt;h3&gt;Registration&lt;/h3&gt; &#xA;&lt;p&gt;In order to use your receiver you need a receiverId. This is the ID of your receiver app. To get a receiver ID you need to register your receiver on the Google Cast SDK developer console, you can learn how to do it by reading the &lt;a href=&#34;https://developers.google.com/cast/docs/registration&#34;&gt;official documentation&lt;/a&gt;. Remember to register a &lt;strong&gt;Custom Receiver&lt;/strong&gt;, this is the type of receiver you need for this library.&lt;/p&gt; &#xA;&lt;h3&gt;Hosting the chromecast-receiver&lt;/h3&gt; &#xA;&lt;p&gt;You will be required to host your receiver somewhere, host it where you prefer. Firebase free hosting may be a good option, for development.&lt;/p&gt; &#xA;&lt;h1&gt;Workarounds&lt;/h1&gt; &#xA;&lt;p&gt;The following sections provides unofficial workarounds that can&#39;t be implemented in the library because they might break at anytime. To use them you will need to create your own fork of the library. Use them at your own peril. Using any of these workarounds might break YouTube terms of service.&lt;/p&gt; &#xA;&lt;p&gt;These workaround have been provided by the community of users of this library. Thanks to @Serkali-sudo for the help!&lt;/p&gt; &#xA;&lt;h2&gt;Change Video Quality&lt;/h2&gt; &#xA;&lt;p&gt;The IFrame Player API currently doesn&#39;t support changing the video quality on modile devices, but we can do it indirectly.&lt;/p&gt; &#xA;&lt;p&gt;The IFrame player keeps the quality value in a window interface called &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&#34;&gt;localStorage&lt;/a&gt;. We can access it and change it from there.&lt;/p&gt; &#xA;&lt;p&gt;In order to access the player&#39;s &lt;code&gt;localStorage&lt;/code&gt;, you need to turn on the &lt;code&gt;domStorageEnabled&lt;/code&gt; setting in the webview.&lt;/p&gt; &#xA;&lt;p&gt;Go to &lt;code&gt;WebViewYouTubePlayer#initWebView&lt;/code&gt; and add this line to enable &lt;code&gt;domStorage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt; settings.domStorageEnabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add these functions to &lt;code&gt;ayp_youtube_player.html&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Return the available quality options for the current video.&#xA;// Not all videos have the same quality options, so we need to check what&#39;s available first. &#xA;// this function will return an array like: [&#34;hd1080&#34;,&#34;hd720&#34;,&#34;large&#34;,&#34;medium&#34;,&#34;small&#34;,&#34;tiny&#34;,&#34;auto&#34;]&#xA;function sendVideoQuality(player) {&#xA;    YouTubePlayerBridge.sendVideoQuality(JSON.stringify(player.getAvailableQualityLevels()))&#xA;}&#xA;&#xA;function setPlaybackQuality(playbackQuality) {&#xA;  if (playbackQuality == &#34;auto&#34;) {&#xA;    localStorage.removeItem(&#34;yt-player-quality&#34;);&#xA;  } else {&#xA;    var now = Date.now();&#xA;    // this will set `playbackQuality` as the selected video quality, untile it expires&#xA;    localStorage.setItem(&#34;yt-player-quality&#34;, JSON.stringify({&#xA;      data: playbackQuality,&#xA;      creation: now,&#xA;      expiration: now + 2419200000&#xA;    }));&#xA;  }&#xA;&#xA;  // after changing the quality you need to reload the video to see changes.&#xA;  // reload the video and start playing where it was.&#xA;  if (player) {&#xA;    var currentTime = player.getCurrentTime();&#xA;    player.loadVideoById(player.getVideoData().video_id, currentTime);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To receive events from the webview, add this to &lt;code&gt;YouTubePlayerBridge.kt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;@JavascriptInterface&#xA;fun sendVideoQuality(quality: String) {&#xA;  mainThreadHandler.post {&#xA;    for(listener in youTubePlayerOwner.getListeners()) {&#xA;      // also add this new method to the listener interface&#xA;      listener.onVideoQuality(youTubePlayerOwner.getInstance(), quality)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add this to the &lt;code&gt;YoutubePlayer&lt;/code&gt; interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;fun setPlaybackQuality(quality: String)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And implement it in &lt;code&gt;WebViewYouTubePlayer.kt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;override fun setPlaybackQuality(quality: String) {&#xA;  mainThreadHandler.post { loadUrl(&#34;javascript:setPlaybackQuality(&#39;$quality&#39;)&#34;) }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you should be able to change the quality of your videos :)&lt;/p&gt; &#xA;&lt;p&gt;Get all the available qualities using &lt;code&gt;YouTubePlayerListener#onVideoQuality&lt;/code&gt; and set the player&#39;s quality using &lt;code&gt;youtubePlayer#setPlaybackQuality&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Login to YouTube account&lt;/h2&gt; &#xA;&lt;p&gt;By logging in you will be able to play private videos from the user.&lt;/p&gt; &#xA;&lt;p&gt;The idea here is to create a &lt;code&gt;WebView&lt;/code&gt; and use it to authentucate with YouTube. The results of the authentication will be shared with the &lt;code&gt;WebView&lt;/code&gt; containing the YouTube player.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void log_in() {&#xA;  WebView webView = new WebView(context);&#xA;  webView.getSettings().setJavaScriptEnabled(true);&#xA;  webView.getSettings().setDomStorageEnabled(true);&#xA;  webView.getSettings().setSavePassword(true);&#xA;  webView.getSettings().setSaveFormData(true);&#xA;  webView.loadUrl(&#34;https://accounts.google.com/ServiceLogin?service=youtube&amp;amp;uilel=3&amp;amp;passive=true&amp;amp;continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Dm%26hl%3Dtr%26next%3Dhttps%253A%252F%252Fm.youtube.com%252F&#34;);&#xA;  webView.setWebViewClient(new WebViewClient() {&#xA;    @Override&#xA;    public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {&#xA;      //if webview redirects to youtube.com it means we&#39;re logged in&#xA;      if (&#xA;        request.getUrl().toString().startsWith(&#34;https://m.youtube.com&#34;) ||&#xA;        request.getUrl().toString().startsWith(&#34;https://www.youtube.com&#34;)&#xA;      ) {&#xA;        Log.d(TAG, &#34;Logged in&#34;);&#xA;        Toast.makeText(MainActivity.this, &#34;Logged in&#34;, Toast.LENGTH_SHORT).show();&#xA;        return false;&#xA;      }&#xA;      return false;&#xA;    }&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In &lt;code&gt;WebViewYouTubePlayer#initWebView&lt;/code&gt; add this code to enable dom storage, to avoid being logged out constantly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt; settings.domStorageEnabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Block Ads&lt;/h2&gt; &#xA;&lt;p&gt;This workaround searches for the &lt;code&gt;video-ads&lt;/code&gt; element in the webview by running a query selector every 100 milliseconds. When it finds a &lt;code&gt;video-ads&lt;/code&gt; element, first mutes it, then subtracts the duration of the ad from the duration of the main video and unmutes it again.&lt;/p&gt; &#xA;&lt;p&gt;Add this function to &lt;code&gt;ayp_youtube_player.html&lt;/code&gt; and call it from &lt;code&gt;sendPlayerStateChange&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let adblockIntervalId;&#xA;&#xA;function initializeAdBlock() {&#xA;  if (adblockIntervalId) {&#xA;    clearInterval(adblockIntervalId);&#xA;  }&#xA;&#xA;  const playerIFrame = document.querySelector(&#34;iframe&#34;);&#xA;  if (playerIFrame) {&#xA;    adblockIntervalId = setInterval(() =&amp;gt; {&#xA;      if (!playerIFrame) {&#xA;        return;&#xA;      }&#xA;&#xA;      const frameDoc = playerIFrame.contentDocument;&#xA;      if (!frameDoc) {&#xA;        return;&#xA;      }&#xA;&#xA;&#xA;      const adsContainer = frameDoc.querySelector(&#39;.video-ads&#39;);&#xA;      if (!adsContainer || adsContainer.childElementCount == 0) {&#xA;        return;&#xA;      }&#xA;&#xA;      const adsVideo = adsContainer.querySelector(&#34;video&#34;);&#xA;&#xA;      if (adsVideo) {&#xA;        adsVideo.muted = true;&#xA;        adsVideo.style.display = &#39;none&#39;;&#xA;        adsVideo.currentTime = adsVideo.duration - 0.15;&#xA;        adsVideo.muted = false;&#xA;        adsVideo.style.display = &#39;&#39;;&#xA;        if (adblockIntervalId) {&#xA;          clearInterval(adblockIntervalId);&#xA;        }&#xA;      }&#xA;      else {&#xA;        const isAdShowing = frameDoc.getElementsByClassName(&#39;ad-showing&#39;).length != 0;&#xA;        if (!isAdShowing) {&#xA;          return;&#xA;        }&#xA;&#xA;        const mainVideo = frameDoc.querySelector(&#39;.html5-main-video&#39;);&#xA;        if (!mainVideo) {&#xA;          return;&#xA;        }&#xA;&#xA;        mainVideo.muted = true;&#xA;        mainVideo.currentTime = mainVideo.duration - 0.15;&#xA;        mainVideo.muted = false;&#xA;        if (adblockIntervalId) {&#xA;          clearInterval(adblockIntervalId);&#xA;        }&#xA;      }&#xA;    }, 100);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Remove Annoying Views&lt;/h2&gt; &#xA;&lt;p&gt;This workaround provides ways to remove annoying views from the player that can&#39;t be removed with official APIs.&lt;/p&gt; &#xA;&lt;h3&gt;Hide Title&lt;/h3&gt; &#xA;&lt;p&gt;Hide title and channel picture at once&lt;/p&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;ayp_youtube_player.html&lt;/code&gt;, and call it inside &lt;code&gt;onReady&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function hideVideoTitle() {&#xA;  setInterval(() =&amp;gt; {&#xA;    const playerIFrame = document.querySelector(&#34;iframe&#34;);&#xA;    if (!playerIFrame) {&#xA;      return;&#xA;    }&#xA;    &#xA;    const frameDoc = playerIFrame.contentDocument;&#xA;    if (!frameDoc) {&#xA;      return;&#xA;    }&#xA;&#xA;    const title = frameDoc.querySelector(&#39;.ytp-chrome-top&#39;);&#xA;    if (title) {&#xA;      title.style.display = &#39;none&#39;;&#xA;    }&#xA;  }, 100);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hide &#39;More Videos&#39; section that covers most of the video when paused (Only visible on tablets and bigger screens)&lt;/h3&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;ayp_youtube_player.html&lt;/code&gt;, and call it inside &lt;code&gt;onReady&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function hideTabletPopup() {&#xA;  setInterval(() =&amp;gt; {&#xA;    const playerIFrame = document.querySelector(&#34;iframe&#34;);&#xA;    if (!playerIFrame) {&#xA;      return;&#xA;    }&#xA;&#xA;    const frameDoc = playerIFrame.contentDocument;&#xA;    if (!frameDoc) {&#xA;      return;&#xA;    }&#xA;&#xA;    const collection = frameDoc.getElementsByClassName(&#34;ytp-pause-overlay-container&#34;)[0];&#xA;    if (!collection) {&#xA;      return;&#xA;    }&#xA;    collection.style.display = &#39;none&#39;;&#xA;  }, 100);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hide Captions&lt;/h2&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;ayp_youtube_player.html&lt;/code&gt;, and call it inside &lt;code&gt;onReady&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function hideCaption() {&#xA;  setInterval(() =&amp;gt; {&#xA;    if(!player) {&#xA;      return;&#xA;    }&#xA;    player.unloadModule(&#39;captions&#39;);&#xA;  }, 1000);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable captions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function hideCaption() {&#xA;  if(!player) {&#xA;    return;&#xA;  }&#xA;  player.loadModule(&#39;captions&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Play Next Recomended Video&lt;/h2&gt; &#xA;&lt;p&gt;This workaround gets the id from &#39;more videos&#39; and plays it as a next video, you can think of it like the &#34;recomended&#34; section on YouTube. You can use it like auto-play on YouTube.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;rel&lt;/code&gt; paramter is set to 0: the next video will come from the same channel as the video that was just played.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;rel&lt;/code&gt; paramater is set to 1: the next video will be from related videos that come from multiple channels.&lt;/p&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;ayp_youtube_player.html&lt;/code&gt;, and call it inside &lt;code&gt;onReady&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function playNextVideo() {&#xA;  const playerIFrame = document.querySelector(&#34;iframe&#34;);&#xA;  if (!playerIFrame) {&#xA;    return;&#xA;  }&#xA;&#xA;  const frameDoc = playerIFrame.contentDocument;&#xA;  if (!frameDoc) {&#xA;    return;&#xA;  }&#xA;&#xA;  const nextVideo = frameDoc.querySelectorAll(&#39;.ytp-suggestions a&#39;)&#xA;  if(!nextVideo){&#xA;    return;&#xA;  }&#xA;&#xA;  let videoId = nextVideo[0].href.split(&#39;v=&#39;)[1];&#xA;  let ampersandIndex = videoId.indexOf(&#39;&amp;amp;&#39;);&#xA;  if (ampersandIndex != -1) {&#xA;  videoId = videoId.substring(0, ampersandIndex);&#xA;  }&#xA;  player.loadVideoById(videoId, 0);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add this method to the &lt;code&gt;YouTubePlayer&lt;/code&gt; interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;fun playNextVideo()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And implement it in &lt;code&gt;WebViewYouTubePlayer&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt;override fun playNextVideo() {&#xA;  mainThreadHandler.post { loadUrl(&#34;javascript:playNextVideo()&#34;) }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;For any question feel free to &lt;a href=&#34;https://github.com/PierfrancescoSoffritti/android-youtube-player/issues&#34;&gt;open an issue on the GitHub repository&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cashapp/turbine</title>
    <updated>2023-06-25T01:59:54Z</updated>
    <id>tag:github.com,2023-06-25:/cashapp/turbine</id>
    <link href="https://github.com/cashapp/turbine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small testing library for kotlinx.coroutines Flow&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Turbine&lt;/h1&gt; &#xA;&lt;p&gt;Turbine is a small testing library for kotlinx.coroutines &lt;a href=&#34;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/&#34;&gt;&lt;code&gt;Flow&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;flowOf(&#34;one&#34;, &#34;two&#34;).test {&#xA;  assertEquals(&#34;one&#34;, awaitItem())&#xA;  assertEquals(&#34;two&#34;, awaitItem())&#xA;  awaitComplete()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A turbine is a rotary mechanical device that extracts energy from a fluid flow and converts it into useful work.&lt;/p&gt; &#xA; &lt;p&gt;– &lt;a href=&#34;https://en.wikipedia.org/wiki/Turbine&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {&#xA;  mavenCentral()&#xA;}&#xA;dependencies {&#xA;  testImplementation &#39;app.cash.turbine:turbine:1.0.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Snapshots of the development version are available in Sonatype&#39;s snapshots repository.&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;repositories {&#xA;  maven {&#xA;    url &#39;https://oss.sonatype.org/content/repositories/snapshots/&#39;&#xA;  }&#xA;}&#xA;dependencies {&#xA;  testImplementation &#39;app.cash.turbine:turbine:1.1.0-SNAPSHOT&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;While Turbine&#39;s own API is stable, we are currently forced to depend on an unstable API from kotlinx.coroutines test artifact: &lt;code&gt;UnconfinedTestDispatcher&lt;/code&gt;. Without this usage of Turbine with &lt;code&gt;runTest&lt;/code&gt; would break. It&#39;s possible for future coroutine library updates to alter the behavior of this library as a result. We will make every effort to ensure behavioral stability as well until this API dependency is stabilized (tracking &lt;a href=&#34;https://github.com/cashapp/turbine/issues/132&#34;&gt;issue #132&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;Turbine&lt;/code&gt; is a thin wrapper over a &lt;code&gt;Channel&lt;/code&gt; with an API designed for testing.&lt;/p&gt; &#xA;&lt;p&gt;You can call &lt;code&gt;awaitItem()&lt;/code&gt; to suspend and wait for an item to be sent to the &lt;code&gt;Turbine&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;assertEquals(&#34;one&#34;, turbine.awaitItem())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...&lt;code&gt;awaitComplete()&lt;/code&gt; to suspend until the &lt;code&gt;Turbine&lt;/code&gt; completes without an exception:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;turbine.awaitComplete()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or &lt;code&gt;awaitError()&lt;/code&gt; to suspend until the &lt;code&gt;Turbine&lt;/code&gt; completes with a &lt;code&gt;Throwable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;assertEquals(&#34;broken!&#34;, turbine.awaitError().message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;await*&lt;/code&gt; is called and nothing happens, &lt;code&gt;Turbine&lt;/code&gt; will timeout and fail instead of hanging.&lt;/p&gt; &#xA;&lt;p&gt;When you are done with a &lt;code&gt;Turbine&lt;/code&gt;, you can clean up by calling &lt;code&gt;cancel()&lt;/code&gt; to terminate any backing coroutines. Finally, you can assert that all events were consumed by calling &lt;code&gt;ensureAllEventsConsumed()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Single Flow&lt;/h3&gt; &#xA;&lt;p&gt;The simplest way to create and run a &lt;code&gt;Turbine&lt;/code&gt; is produce one from a &lt;code&gt;Flow&lt;/code&gt;. To test a single &lt;code&gt;Flow&lt;/code&gt;, call the &lt;code&gt;test&lt;/code&gt; extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;someFlow.test {&#xA;  // Validation code here!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;test&lt;/code&gt; launches a new coroutine, calls &lt;code&gt;someFlow.collect&lt;/code&gt;, and feeds the results into a &lt;code&gt;Turbine&lt;/code&gt;. Then it calls the validation block, passing in the read-only &lt;code&gt;ReceiveTurbine&lt;/code&gt; interface as a receiver:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;flowOf(&#34;one&#34;).test {&#xA;  assertEquals(&#34;one&#34;, awaitItem())&#xA;  awaitComplete()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the validation block is complete, &lt;code&gt;test&lt;/code&gt; cancels the coroutine and calls &lt;code&gt;ensureAllEventsConsumed()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Flows&lt;/h3&gt; &#xA;&lt;p&gt;To test multiple flows, assign each &lt;code&gt;Turbine&lt;/code&gt; to a separate &lt;code&gt;val&lt;/code&gt; by calling &lt;code&gt;testIn&lt;/code&gt; instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;runTest {&#xA;  val turbine1 = flowOf(1).testIn(backgroundScope)&#xA;  val turbine2 = flowOf(2).testIn(backgroundScope)&#xA;  assertEquals(1, turbine1.awaitItem())&#xA;  assertEquals(2, turbine2.awaitItem())&#xA;  turbine1.awaitComplete()&#xA;  turbine2.awaitComplete()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;testIn&lt;/code&gt; produces a &lt;code&gt;ReceiveTurbine&lt;/code&gt;. &lt;code&gt;ensureAllEventsConsumed()&lt;/code&gt; will be invoked when the calling coroutine completes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;testIn&lt;/code&gt; cannot automatically clean up its coroutine, so it is up to you to ensure that the running flow terminates. Use &lt;code&gt;runTest&lt;/code&gt;&#39;s &lt;code&gt;backgroundScope&lt;/code&gt;, and it will take care of this automatically. Otherwise, make sure to call one of the following methods before the end of your scope:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cancel()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;awaitComplete()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;awaitError()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Otherwise, your test will hang.&lt;/p&gt; &#xA;&lt;h3&gt;Consuming All Events&lt;/h3&gt; &#xA;&lt;p&gt;Failing to consume all events before the end of a flow-based &lt;code&gt;Turbine&lt;/code&gt;&#39;s validation block will fail your test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;flowOf(&#34;one&#34;, &#34;two&#34;).test {&#xA;  assertEquals(&#34;one&#34;, awaitItem())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Exception in thread &#34;main&#34; AssertionError:&#xA;  Unconsumed events found:&#xA;   - Item(two)&#xA;   - Complete&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same goes for &lt;code&gt;testIn&lt;/code&gt;, but at the end of the calling coroutine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;runTest {&#xA;  val turbine = flowOf(&#34;one&#34;, &#34;two&#34;).testIn(backgroundScope)&#xA;  turbine.assertEquals(&#34;one&#34;, awaitItem())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Exception in thread &#34;main&#34; AssertionError:&#xA;  Unconsumed events found:&#xA;   - Item(two)&#xA;   - Complete&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Received events can be explicitly ignored, however.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;flowOf(&#34;one&#34;, &#34;two&#34;).test {&#xA;  assertEquals(&#34;one&#34;, awaitItem())&#xA;  cancelAndIgnoreRemainingEvents()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, we can receive the most recent emitted item and ignore the previous ones.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;flowOf(&#34;one&#34;, &#34;two&#34;, &#34;three&#34;)&#xA;  .map {&#xA;    delay(100)&#xA;    it&#xA;  }&#xA;  .test {&#xA;    // 0 - 100ms -&amp;gt; no emission yet&#xA;    // 100ms - 200ms -&amp;gt; &#34;one&#34; is emitted&#xA;    // 200ms - 300ms -&amp;gt; &#34;two&#34; is emitted&#xA;    // 300ms - 400ms -&amp;gt; &#34;three&#34; is emitted&#xA;    delay(250)&#xA;    assertEquals(&#34;two&#34;, expectMostRecentItem())&#xA;    cancelAndIgnoreRemainingEvents()&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flow Termination&lt;/h3&gt; &#xA;&lt;p&gt;Flow termination events (exceptions and completion) are exposed as events which must be consumed for validation. So, for example, throwing a &lt;code&gt;RuntimeException&lt;/code&gt; inside of your &lt;code&gt;flow&lt;/code&gt; will not throw an exception in your test. It will instead produce a Turbine error event:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;flow { throw RuntimeException(&#34;broken!&#34;) }.test {&#xA;  assertEquals(&#34;broken!&#34;, awaitError().message)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Failure to consume an error will result in the same unconsumed event exception as above, but with the exception added as the cause so that the full stacktrace is available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;flow&amp;lt;Nothing&amp;gt; { throw RuntimeException(&#34;broken!&#34;) }.test { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;app.cash.turbine.TurbineAssertionError: Unconsumed events found:&#xA; - Error(RuntimeException)&#xA;&#x9;at app//app.cash.turbine.ChannelTurbine.ensureAllEventsConsumed(Turbine.kt:215)&#xA;  ... 80 more&#xA;Caused by: java.lang.RuntimeException: broken!&#xA;&#x9;at example.MainKt$main$1.invokeSuspend(FlowTest.kt:652)&#xA;&#x9;... 105 more&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Standalone Turbines&lt;/h3&gt; &#xA;&lt;p&gt;In addition to &lt;code&gt;ReceiveTurbine&lt;/code&gt;s created from flows, standalone &lt;code&gt;Turbine&lt;/code&gt;s can be used to communicate with test code outside of a flow. Use them everywhere, and you might never need &lt;code&gt;runCurrent()&lt;/code&gt; again. Here&#39;s an example of how to use &lt;code&gt;Turbine()&lt;/code&gt; in a fake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class FakeNavigator : Navigator {&#xA;  val goTos = Turbine&amp;lt;Screen&amp;gt;()&#xA;&#xA;  override fun goTo(screen: Screen) {&#xA;    goTos.add(screen)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;runTest {&#xA;  val navigator = FakeNavigator()&#xA;  val events: Flow&amp;lt;UiEvent&amp;gt; =&#xA;    MutableSharedFlow&amp;lt;UiEvent&amp;gt;(extraBufferCapacity = 50)&#xA;  val models: Flow&amp;lt;UiModel&amp;gt; =&#xA;    makePresenter(navigator).present(events)&#xA;  models.test {&#xA;    assertEquals(UiModel(title = &#34;Hi there&#34;), awaitItem())&#xA;    events.emit(UiEvent.Close)&#xA;    assertEquals(Screens.Back, navigator.goTos.awaitItem())&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Standalone Turbine Compat APIs&lt;/h3&gt; &#xA;&lt;p&gt;To support codebases with a mix of coroutines and non-coroutines code, standalone &lt;code&gt;Turbine&lt;/code&gt; includes non-suspending compat APIs. All the &lt;code&gt;await&lt;/code&gt; methods have equivalent &lt;code&gt;take&lt;/code&gt; methods that are non-suspending:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val navigator = FakeNavigator()&#xA;val events: PublishRelay&amp;lt;UiEvent&amp;gt; = PublishRelay.create()&#xA;&#xA;val models: Observable&amp;lt;UiModel&amp;gt; =&#xA;  makePresenter(navigator).present(events)&#xA;val testObserver = models.test()&#xA;testObserver.assertValue(UiModel(title = &#34;Hi there&#34;))&#xA;events.accept(UiEvent.Close)&#xA;assertEquals(Screens.Back, navigator.goTos.takeItem())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;takeItem()&lt;/code&gt; and friends, and &lt;code&gt;Turbine&lt;/code&gt; behaves like simple queue; use &lt;code&gt;awaitItem()&lt;/code&gt; and friends, and it&#39;s a &lt;code&gt;Turbine&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These methods should only be used from a non-suspending context. On JVM platforms, they will throw when used from a suspending context.&lt;/p&gt; &#xA;&lt;h3&gt;Asynchronicity and Turbine&lt;/h3&gt; &#xA;&lt;p&gt;Flows are asynchronous by default. Your flow is collected concurrently by Turbine alongside your test code.&lt;/p&gt; &#xA;&lt;p&gt;Handling this asynchronicity works the same way with Turbine as it does in production coroutines code: instead of using tools like &lt;code&gt;runCurrent()&lt;/code&gt; to &#34;push&#34; an asynchronous flow along, &lt;code&gt;Turbine&lt;/code&gt;&#39;s &lt;code&gt;awaitItem()&lt;/code&gt;, &lt;code&gt;awaitComplete()&lt;/code&gt;, and &lt;code&gt;awaitError()&lt;/code&gt; &#34;pull&#34; them along by parking until a new event is ready.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;channelFlow {&#xA;  withContext(IO) {&#xA;    Thread.sleep(100)&#xA;    send(&#34;item&#34;)&#xA;  }&#xA;}.test {&#xA;  assertEquals(&#34;item&#34;, awaitItem())&#xA;  awaitComplete()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your validation code may run concurrently with the flow under test, but Turbine puts it in the driver&#39;s seat as much as possible: &lt;code&gt;test&lt;/code&gt; will end when your validation block is done executing, implicitly cancelling the flow under test.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;channelFlow {&#xA;  withContext(IO) {&#xA;    repeat(10) {&#xA;      Thread.sleep(200)&#xA;      send(&#34;item $it&#34;)&#xA;    }&#xA;  }&#xA;}.test {&#xA;  assertEquals(&#34;item 0&#34;, awaitItem())&#xA;  assertEquals(&#34;item 1&#34;, awaitItem())&#xA;  assertEquals(&#34;item 2&#34;, awaitItem())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Flows can also be explicitly canceled at any point.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;channelFlow {&#xA;  withContext(IO) {&#xA;    repeat(10) {&#xA;      Thread.sleep(200)&#xA;      send(&#34;item $it&#34;)&#xA;    }&#xA;  }&#xA;}.test {&#xA;  Thread.sleep(700)&#xA;  cancel()&#xA;&#xA;  assertEquals(&#34;item 0&#34;, awaitItem())&#xA;  assertEquals(&#34;item 1&#34;, awaitItem())&#xA;  assertEquals(&#34;item 2&#34;, awaitItem())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Names&lt;/h3&gt; &#xA;&lt;p&gt;Turbines can be named to improve error feedback. Pass in a &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;testIn&lt;/code&gt;, or &lt;code&gt;Turbine()&lt;/code&gt;, and it will be included in any errors that are thrown:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;runTest {&#xA;  val turbine1 = flowOf(1).testIn(backgroundScope, name = &#34;turbine 1&#34;)&#xA;  val turbine2 = flowOf(2).testIn(backgroundScope, name = &#34;turbine 2&#34;)&#xA;  turbine1.awaitComplete()&#xA;  turbine2.awaitComplete()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Expected complete for turbine 1 but found Item(1)&#xA;app.cash.turbine.TurbineAssertionError: Expected complete for turbine 1 but found Item(1)&#xA;&#x9;at app//app.cash.turbine.ChannelKt.unexpectedEvent(channel.kt:258)&#xA;&#x9;at app//app.cash.turbine.ChannelKt.awaitComplete(channel.kt:226)&#xA;&#x9;at app//app.cash.turbine.ChannelKt$awaitComplete$1.invokeSuspend(channel.kt)&#xA;&#x9;at app//kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)&#xA;&#x9;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Order of Execution &amp;amp; Shared Flows&lt;/h3&gt; &#xA;&lt;p&gt;Shared flows are sensitive to order of execution. Calling &lt;code&gt;emit&lt;/code&gt; before calling &lt;code&gt;collect&lt;/code&gt; will drop the emitted value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val mutableSharedFlow = MutableSharedFlow&amp;lt;Int&amp;gt;(replay = 0)&#xA;mutableSharedFlow.emit(1)&#xA;mutableSharedFlow.test {&#xA;  assertEquals(awaitItem(), 1)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;No value produced in 1s&#xA;java.lang.AssertionError: No value produced in 1s&#xA;&#x9;at app.cash.turbine.ChannelKt.awaitEvent(channel.kt:90)&#xA;&#x9;at app.cash.turbine.ChannelKt$awaitEvent$1.invokeSuspend(channel.kt)&#xA;&#x9;(Coroutine boundary)&#xA;&#x9;at kotlinx.coroutines.test.TestBuildersKt__TestBuildersKt$runTestCoroutine$2.invokeSuspend(TestBuilders.kt:212)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Turbine&#39;s &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;testIn&lt;/code&gt; methods guarantee that the flow under test will run up to the first suspension point before proceeding. So calling &lt;code&gt;test&lt;/code&gt; on a shared flow &lt;em&gt;before&lt;/em&gt; emitting will not drop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val mutableSharedFlow = MutableSharedFlow&amp;lt;Int&amp;gt;(replay = 0)&#xA;mutableSharedFlow.test {&#xA;  mutableSharedFlow.emit(1)&#xA;  assertEquals(awaitItem(), 1)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your code collects on shared flows, ensure that it does so promptly to have a lovely experience.&lt;/p&gt; &#xA;&lt;p&gt;The shared flow types Kotlin currently provides are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MutableStateFlow&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StateFlow&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MutableSharedFlow&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SharedFlow&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Timeouts&lt;/h3&gt; &#xA;&lt;p&gt;Turbine applies a timeout whenever it waits for an event. This is a wall clock time timeout that ignores &lt;code&gt;runTest&lt;/code&gt;&#39;s virtual clock time.&lt;/p&gt; &#xA;&lt;p&gt;The default timeout length is one second. This can be overridden by passing a timeout duration to &lt;code&gt;test&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;flowOf(&#34;one&#34;, &#34;two&#34;).test(timeout = 10.milliseconds) {&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This timeout will be used for all Turbine-related calls inside the validation block.&lt;/p&gt; &#xA;&lt;p&gt;You can also override the timeout for Turbines created with &lt;code&gt;testIn&lt;/code&gt; and &lt;code&gt;Turbine()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val standalone = Turbine&amp;lt;String&amp;gt;(timeout = 10.milliseconds)&#xA;val flow = flowOf(&#34;one&#34;).testIn(&#xA;  scope = backgroundScope,&#xA;  timeout = 10.milliseconds,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These timeout overrides only apply to the &lt;code&gt;Turbine&lt;/code&gt; on which they were applied.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can also change the timeout for a whole block of code using &lt;code&gt;withTurbineTimeout&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;withTurbineTimeout(10.milliseconds) {&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Channel Extensions&lt;/h3&gt; &#xA;&lt;p&gt;Most of Turbine&#39;s APIs are implemented as extensions on &lt;code&gt;Channel&lt;/code&gt;. The more limited API surface of &lt;code&gt;Turbine&lt;/code&gt; is usually preferable, but these extensions are also available as public APIs if you need them.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2018 Square, Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mapbox/mapbox-navigation-android</title>
    <updated>2023-06-25T01:59:54Z</updated>
    <id>tag:github.com,2023-06-25:/mapbox/mapbox-navigation-android</id>
    <link href="https://github.com/mapbox/mapbox-navigation-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mapbox Navigation SDK for Android&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.mapbox.com/android-docs/navigation/overview/&#34;&gt;&lt;img src=&#34;https://github.com/mapbox/mapbox-navigation-android/raw/main/.github/splash-img.png?raw=true&#34; alt=&#34;Mapbox Service&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://circleci.com/gh/mapbox/mapbox-navigation-android&#34;&gt; &lt;img src=&#34;https://circleci.com/gh/mapbox/mapbox-navigation-android.svg?style=shield&amp;amp;circle-token=:circle-token&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;When your users want to get from one location to another, don’t push them out of your application into a generic map application. Instead, keep them engaged with your application 100% of the time with in-app turn-by-turn navigation.&lt;/p&gt; &#xA;&lt;p&gt;The Mapbox Navigation SDK for Android is built on top of &lt;a href=&#34;https://www.mapbox.com/directions&#34;&gt;the Mapbox Directions API&lt;/a&gt; and &lt;a href=&#34;https://www.mapbox.com/maps&#34;&gt;the Mapbox Maps SDK&lt;/a&gt; to provide tools needed to build a complete navigation experience.&lt;/p&gt; &#xA;&lt;p&gt;The Mapbox Navigation SDK is a precise and flexible platform which enables your users to explore the world&#39;s streets. We are designing new maps specifically for navigation that highlight traffic conditions and helpful landmarks. The calculations are based on the user&#39;s current location and compare it to the current route that the user&#39;s traversing to provide critical information at any given moment. &lt;em&gt;You control the entire experience, from the time your user chooses a destination to when they arrive.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://docs.mapbox.com/android/navigation/&#34;&gt;full documentation pages&lt;/a&gt; for &lt;a href=&#34;https://docs.mapbox.com/android/navigation/guides/get-started/install/&#34;&gt;installation&lt;/a&gt; and usage instructions.&lt;/p&gt; &#xA;&lt;p&gt;For the latest version and changelog visit &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-navigation-android/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; or &lt;a href=&#34;https://github.com/mapbox/mapbox-navigation-android/releases&#34;&gt;releases&lt;/a&gt; pages.&lt;/p&gt; &#xA;&lt;p&gt;Along with the full documentation, &lt;a href=&#34;https://docs.mapbox.com/android/navigation/guides/migrate-to-v2/&#34;&gt;this migration guide&lt;/a&gt; can help you transition your project from version &lt;code&gt;v1&lt;/code&gt; of the Navigation SDK to &lt;code&gt;v2&lt;/code&gt; or higher.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Need help with your code?&lt;/strong&gt;: Look for previous questions on the &lt;a href=&#34;https://stackoverflow.com/questions/tagged/mapbox+android&#34;&gt;#mapbox tag&lt;/a&gt; — or &lt;a href=&#34;https://stackoverflow.com/questions/tagged/mapbox+android&#34;&gt;ask a new question&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Have a bug to report?&lt;/strong&gt; &lt;a href=&#34;https://github.com/mapbox/mapbox-navigation-android/issues&#34;&gt;Open an issue&lt;/a&gt;. If possible, include the version of Mapbox Services, a full log, and a project that shows the issue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Have a feature request?&lt;/strong&gt; &lt;a href=&#34;https://github.com/mapbox/mapbox-navigation-android/issues/new&#34;&gt;Open an issue&lt;/a&gt;. Tell us what the feature should do and why you want the feature.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Snapshots&lt;/h2&gt; &#xA;&lt;p&gt;You can use a &lt;code&gt;-SNAPSHOT&lt;/code&gt; release if you want to test recent bug fixes or features that have not been packaged in an official release yet.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;1.0.0&lt;/code&gt;+ versions of the Navigation SDK:&lt;/h5&gt; &#xA;&lt;p&gt;To access &lt;code&gt;SNAPSHOT&lt;/code&gt; builds follow the &lt;a href=&#34;https://docs.mapbox.com/android/navigation/guides/get-started/install/&#34;&gt;installation instructions&lt;/a&gt; and then:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Provide the below additional snapshot repository reference, next to the existing release repository reference:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;maven {&#xA;    url &#39;https://api.mapbox.com/downloads/v2/snapshots/maven&#39;&#xA;    authentication {&#xA;        basic(BasicAuthentication)&#xA;    }&#xA;    credentials {&#xA;        username = &#34;mapbox&#34;&#xA;        password = &#34;{secret Mapbox token with DOWNLOADS:READ scope, the same as the token used for the release repository}&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Append &lt;code&gt;-SNAPSHOT&lt;/code&gt; to the target version:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;  implementation &#34;com.mapbox.navigation:android:X.Y.Z-SNAPSHOT&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find the latest snapshot version reference in &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-navigation-android/main/gradle.properties&#34;&gt;gradle.properties&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;sample-code&#34;&gt;Sample code&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;a name=&#34;sample-code&#34;&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a name=&#34;sample-code&#34;&gt;Examples for Mapbox Navigation Android SDK are now available on their own separate repo, &lt;/a&gt;&lt;a href=&#34;https://github.com/mapbox/mapbox-navigation-android-examples&#34;&gt;available here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The QA application &lt;a href=&#34;https://github.com/mapbox/mapbox-navigation-android/tree/main/qa-test-app/README.md&#34;&gt;is available here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;General documentation for Mapbox Navigation Android SDK is &lt;a href=&#34;https://docs.mapbox.com/android/navigation&#34;&gt;available here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome feedback, translations, and code contributions! Please see &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-navigation-android/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>