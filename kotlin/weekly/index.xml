<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-12T01:58:59Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>android/camera-samples</title>
    <updated>2023-02-12T01:58:59Z</updated>
    <id>tag:github.com,2023-02-12:/android/camera-samples</id>
    <link href="https://github.com/android/camera-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multiple samples showing the best practices in camera APIs on Android.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Camera Samples Repository&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a set of individual Android Studio projects to help you get started with the &lt;a href=&#34;https://developer.android.com/training/camerax&#34;&gt;CameraX&lt;/a&gt; and &lt;a href=&#34;https://developer.android.com/training/camera2&#34;&gt;Camera2&lt;/a&gt; APIs in Android.&lt;/p&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sample&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/CameraXBasic&#34;&gt;CameraXBasic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to use CameraX APIs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/CameraXAdvanced&#34;&gt;CameraXAdvanced&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to use CameraX APIs with TFLite and others&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/CameraXVideo&#34;&gt;CameraXVideo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to use CameraX VideoCapture API.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/CameraX-MLKit&#34;&gt;CameraX-MLKit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to use CameraX&#39;s MlKitAnalyzer to build a QR-code scanner.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/Camera2Basic&#34;&gt;Camera2Basic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates capturing JPEG, RAW and DEPTH images, e.g. unprocessed pixel data directly from the camera sensor.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/Camera2SlowMotion&#34;&gt;Camera2SlowMotion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates capturing high-speed video in a constrained camera capture session.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/Camera2Video&#34;&gt;Camera2Video&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates recording video using the Camera2 API and MediaRecorder.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/Camera2Extensions&#34;&gt;Camera2Extensions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates Camera2 extension live preview and still capture.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/CameraXExtensions&#34;&gt;CameraXExtensions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates CameraX extension live preview and still capture.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/android/camera-samples/main/HdrViewfinder&#34;&gt;HdrViewfinder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates use of RenderScript to display a live HDR feed from camera frames using Camera2 API.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>RikkaApps/Shizuku</title>
    <updated>2023-02-12T01:58:59Z</updated>
    <id>tag:github.com,2023-02-12:/RikkaApps/Shizuku</id>
    <link href="https://github.com/RikkaApps/Shizuku" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Using system APIs directly with adb/root privileges from normal apps through a Java process started with app_process.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shizuku&lt;/h1&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;When developing apps that requires root, the most common method is to run some commands in the su shell. For example, there is an app that uses the &lt;code&gt;pm enable/disable&lt;/code&gt; command to enable/disable components.&lt;/p&gt; &#xA;&lt;p&gt;This method has very big disadvantages:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extremely slow&lt;/strong&gt; (Multiple process creation)&lt;/li&gt; &#xA; &lt;li&gt;Needs to process texts (&lt;strong&gt;Super unreliable&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The possibility is limited to available commands&lt;/li&gt; &#xA; &lt;li&gt;Even if ADB has sufficient permissions, the app requires root privileges to run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Shizuku uses a completely different way. See detailed description below.&lt;/p&gt; &#xA;&lt;h2&gt;User guide &amp;amp; Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://shizuku.rikka.app/&#34;&gt;https://shizuku.rikka.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How does Shizuku work?&lt;/h2&gt; &#xA;&lt;p&gt;First, we need to talk about how app use system APIs. For example, if the app wants to get installed apps, we all know we should use &lt;code&gt;PackageManager#getInstalledPackages()&lt;/code&gt;. This is actually an interprocess communication (IPC) process of the app process and system server process, just the Android framework did the inner works for us.&lt;/p&gt; &#xA;&lt;p&gt;Android uses &lt;code&gt;binder&lt;/code&gt; to do this type of IPC. &lt;code&gt;Binder&lt;/code&gt; allows the server-side to learn the uid and pid of the client-side, so that the system server can check if the app has the permission to do the operation.&lt;/p&gt; &#xA;&lt;p&gt;Usually, if there is a &#34;manager&#34; (e.g., &lt;code&gt;PackageManager&lt;/code&gt;) for apps to use, there should be a &#34;service&#34; (e.g., &lt;code&gt;PackageManagerService&lt;/code&gt;) in the system server process. We can simply think if the app holds the &lt;code&gt;binder&lt;/code&gt; of the &#34;service&#34;, it can communicate with the &#34;service&#34;. The app process will receive binders of system services on start.&lt;/p&gt; &#xA;&lt;p&gt;Shizuku guides users to run a process, Shizuku server, with root or ADB first. When the app starts, the &lt;code&gt;binder&lt;/code&gt; to Shizuku server will also be sent to the app.&lt;/p&gt; &#xA;&lt;p&gt;The most important feature Shizuku provides is something like be a middle man to receive requests from the app, sent them to the system server, and send back the results. You can see the &lt;code&gt;transactRemote&lt;/code&gt; method in &lt;code&gt;rikka.shizuku.server.ShizukuService&lt;/code&gt; class, and &lt;code&gt;moe.shizuku.api.ShizukuBinderWrapper&lt;/code&gt; class for the detail.&lt;/p&gt; &#xA;&lt;p&gt;So, we reached our goal, to use system APIs with higher permission. And to the app, it is almost identical to the use of system APIs directly.&lt;/p&gt; &#xA;&lt;h2&gt;Developer guide&lt;/h2&gt; &#xA;&lt;h3&gt;API &amp;amp; sample&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RikkaApps/Shizuku-API&#34;&gt;https://github.com/RikkaApps/Shizuku-API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Migrating from pre-v11&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Existing applications still works, of course.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RikkaApps/Shizuku-API#migration-guide-for-existing-applications-use-shizuku-pre-v11&#34;&gt;https://github.com/RikkaApps/Shizuku-API#migration-guide-for-existing-applications-use-shizuku-pre-v11&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Attention&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;ADB permissions are limited&lt;/p&gt; &lt;p&gt;ADB has limited permissions and different on various system versions. You can see permissions granted to ADB &lt;a href=&#34;https://github.com/aosp-mirror/platform_frameworks_base/raw/master/packages/Shell/AndroidManifest.xml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Before calling the API, you can use &lt;code&gt;ShizukuService#getUid&lt;/code&gt; to check if Shizuku is running user ADB, or use &lt;code&gt;ShizukuService#checkPermission&lt;/code&gt; to check if the server has sufficient permissions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hidden API limitation from Android 9&lt;/p&gt; &lt;p&gt;As of Android 9, the usage of the hidden APIs is limited for normal apps. Please use other methods (such as &lt;a href=&#34;https://github.com/LSPosed/AndroidHiddenApiBypass&#34;&gt;https://github.com/LSPosed/AndroidHiddenApiBypass&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Android 8.0 &amp;amp; ADB&lt;/p&gt; &lt;p&gt;At present, the way Shizuku service gets the app process is to combine &lt;code&gt;IActivityManager#registerProcessObserver&lt;/code&gt; and &lt;code&gt;IActivityManager#registerUidObserver&lt;/code&gt; (26+) to ensure that the app process will be sent when the app starts. However, on API 26, ADB lacks permissions to use &lt;code&gt;registerUidObserver&lt;/code&gt;, so if you need to use Shizuku in a process that might not be started by an Activity, it is recommended to trigger the send binder by starting a transparent activity.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Direct use of &lt;code&gt;transactRemote&lt;/code&gt; requires attention&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;The API may be different under different Android versions, please be sure to check it carefully. Also, the &lt;code&gt;android.app.IActivityManager&lt;/code&gt; has the aidl form in API 26 and later, and &lt;code&gt;android.app.IActivityManager$Stub&lt;/code&gt; exists only on API 26.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;SystemServiceHelper.getTransactionCode&lt;/code&gt; may not get the correct transaction code, such as &lt;code&gt;android.content.pm.IPackageManager$Stub.TRANSACTION_getInstalledPackages&lt;/code&gt; does not exist on API 25 and there is &lt;code&gt;android.content.pm.IPackageManager$Stub.TRANSACTION_getInstalledPackages_47&lt;/code&gt; (this situation has been dealt with, but it is not excluded that there may be other circumstances). This problem is not encountered with the &lt;code&gt;ShizukuBinderWrapper&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Developing Shizuku itself&lt;/h2&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone with &lt;code&gt;git clone --recurse-submodules&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run gradle task &lt;code&gt;:manager:assembleDebug&lt;/code&gt; or &lt;code&gt;:manager:assembleRelease&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;:manager:assembleDebug&lt;/code&gt; task generates a debuggable server. You can attach a debugger to &lt;code&gt;shizuku_server&lt;/code&gt; to debug the server.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code for this project is available under the Apache-2.0 license.&lt;/p&gt; &#xA;&lt;h3&gt;Exceptions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You are &lt;strong&gt;FORBIDDEN&lt;/strong&gt; to use image files listed below in any way (unless for displaying Shizuku itself).&lt;/p&gt; &lt;pre&gt;&lt;code&gt;manager/src/main/res/mipmap-hdpi/ic_launcher.png&#xA;manager/src/main/res/mipmap-hdpi/ic_launcher_background.png&#xA;manager/src/main/res/mipmap-hdpi/ic_launcher_foreground.png&#xA;manager/src/main/res/mipmap-xhdpi/ic_launcher.png&#xA;manager/src/main/res/mipmap-xhdpi/ic_launcher_background.png&#xA;manager/src/main/res/mipmap-xhdpi/ic_launcher_foreground.png&#xA;manager/src/main/res/mipmap-xxhdpi/ic_launcher.png&#xA;manager/src/main/res/mipmap-xxhdpi/ic_launcher_background.png&#xA;manager/src/main/res/mipmap-xxhdpi/ic_launcher_foreground.png&#xA;manager/src/main/res/mipmap-xxxhdpi/ic_launcher.png&#xA;manager/src/main/res/mipmap-xxxhdpi/ic_launcher_background.png&#xA;manager/src/main/res/mipmap-xxxhdpi/ic_launcher_foreground.png&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For the project as a whole, it is not free. You are &lt;strong&gt;FORBIDDEN&lt;/strong&gt; to distribute the apk compiled by &lt;strong&gt;you&lt;/strong&gt; (including modified, e.g., rename app name &#34;Shizuku&#34; to something else) to any store (IBNLT Google Play Store, F-Droid, Amazon Appstore etc.).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mpv-android/mpv-android</title>
    <updated>2023-02-12T01:58:59Z</updated>
    <id>tag:github.com,2023-02-12:/mpv-android/mpv-android</id>
    <link href="https://github.com/mpv-android/mpv-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;#mpv-android @ libera.chat&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mpv for Android&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.travis-ci.com/github/mpv-android/mpv-android&#34;&gt;&lt;img src=&#34;https://api.travis-ci.com/mpv-android/mpv-android.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;mpv-android is a video player for Android based on &lt;a href=&#34;https://github.com/mpv-player/mpv&#34;&gt;libmpv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hardware and software video decoding&lt;/li&gt; &#xA; &lt;li&gt;Gesture-based seeking, volume/brightness control and more&lt;/li&gt; &#xA; &lt;li&gt;libass support for styled subtitles&lt;/li&gt; &#xA; &lt;li&gt;Advanced video settings (interpolation, debanding, scalers, ...)&lt;/li&gt; &#xA; &lt;li&gt;Play network streams with the &#34;Open URL&#34; function&lt;/li&gt; &#xA; &lt;li&gt;Background playback, Picture-in-Picture, keyboard input supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that mpv-android is &lt;em&gt;not&lt;/em&gt; a library you can embed into your app, but you can look here for inspiration. The important parts are &lt;a href=&#34;https://raw.githubusercontent.com/mpv-android/mpv-android/master/app/src/main/java/is/xyz/mpv/MPVLib.java&#34;&gt;&lt;code&gt;MPVLib&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mpv-android/mpv-android/master/app/src/main/java/is/xyz/mpv/MPVView.kt&#34;&gt;&lt;code&gt;MPVView&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/mpv-android/mpv-android/master/app/src/main/jni/&#34;&gt;native code&lt;/a&gt;. libmpv/ffmpeg is built by &lt;a href=&#34;https://raw.githubusercontent.com/mpv-android/mpv-android/master/buildscripts/&#34;&gt;these scripts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;You can download mpv-android from the &lt;a href=&#34;https://github.com/mpv-android/mpv-android/releases&#34;&gt;Releases section&lt;/a&gt; or&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=is.xyz.mpv&#34;&gt;&lt;img src=&#34;https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png&#34; alt=&#34;Get it on Google Play&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://f-droid.org/packages/is.xyz.mpv&#34;&gt;&lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at &lt;a href=&#34;https://raw.githubusercontent.com/mpv-android/mpv-android/master/buildscripts/README.md&#34;&gt;README.md&lt;/a&gt; inside the &lt;code&gt;buildscripts&lt;/code&gt; directory.&lt;/p&gt;</summary>
  </entry>
</feed>