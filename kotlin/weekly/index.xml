<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-18T01:48:29Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>HuolalaTech/hll-wp-therouter-android</title>
    <updated>2022-09-18T01:48:29Z</updated>
    <id>tag:github.com,2022-09-18:/HuolalaTech/hll-wp-therouter-android</id>
    <link href="https://github.com/HuolalaTech/hll-wp-therouter-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Android Routing SDK&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;TheRouter: &lt;em&gt;Android componentization solution&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/hexpm/l/plug.svg?sanitize=true&#34; alt=&#34;Hex.pm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Kotlin-green&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Wiki-open-green&#34; alt=&#34;Wiki&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;中文文档请见：&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/raw/main/README_CN.md&#34;&gt;README_CN.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;A. Features&lt;/h3&gt; &#xA;&lt;p&gt;TheRouter core functions have four functionalities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Page Navigation（&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/Navigator&#34;&gt;Navigator&lt;/a&gt;）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cross-module dependency injection（&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/ServiceProvider&#34;&gt;ServiceProvider&lt;/a&gt;）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Single module automatic initialization （&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/FlowTaskExecutor&#34;&gt;FlowTaskExecutor&lt;/a&gt;）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable client apps to remotely load method dynamically (&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/ActionManager&#34;&gt;ActionManager&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Demo:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/uploads/image/demo.gif&#34; width=&#34;50%&#34; alt=&#34;demo gif&#34;&gt; &#xA;&lt;h3&gt;B. Introduction&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;For more detailed documentation, please check the project wiki&lt;/strong&gt;：&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;B1. Gradle configuration&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;module&lt;/th&gt; &#xA;   &lt;th&gt;apt&lt;/th&gt; &#xA;   &lt;th&gt;router&lt;/th&gt; &#xA;   &lt;th&gt;plugin&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/cn/therouter/apt/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/apt-1.1.0-green&#34; alt=&#34;apt&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/cn/therouter/router/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/router-1.1.0-green&#34; alt=&#34;router&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/cn/therouter/plugin/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/plugin-1.1.0-green&#34; alt=&#34;plugin&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code&gt;// root build.gradle &#xA;classpath &#39;cn.therouter:plugin:1.1.0&#39;&#xA;&#xA;// app module &#xA;apply plugin: &#39;therouter&#39;&#xA;&#xA;// dependencies&#xA;kapt &#34;cn.therouter:apt:1.1.0&#34;&#xA;implementation &#34;cn.therouter:router:1.1.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;B2. initialization library&lt;/h4&gt; &#xA;&lt;p&gt;The library contains the automatic initialization function inside，link to: &lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/FlowTaskExecutor&#34;&gt;Single module automatic initialization&lt;/a&gt;; therefore, there&#39;s no need for any initialization code. However, it is recommended that you set the &lt;code&gt;Debug&lt;/code&gt; environment according to your business settings to view log information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Override&#xA;protected void attachBaseContext(Context base) {&#xA;    TheRouter.setDebug(true or false);&#xA;    super.attachBaseContext(base);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;B3. page parameter injection&lt;/h4&gt; &#xA;&lt;p&gt;Called in the &lt;code&gt;onCreate()&lt;/code&gt; method of &lt;code&gt;Activity&lt;/code&gt; or &lt;code&gt;Fragment&lt;/code&gt;:&lt;br&gt; (&lt;em&gt;It is recommended to do it directly in &lt;code&gt;BaseActivity(BaseFragment)&lt;/code&gt;&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Override&#xA;protected void onCreate(@Nullable Bundle savedInstanceState) {&#xA;    super.onCreate(savedInstanceState);&#xA;    TheRouter.inject(this);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;B4. page navigation&lt;/h4&gt; &#xA;&lt;p&gt;For the meaning of the annotation &lt;code&gt;@Route&lt;/code&gt;, please check the documentation: &lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/Navigator&#34;&gt;Page Navigation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Route(path = &#34;http://therouter.com/home&#34;, action = &#34;action://scheme.com&#34;,&#xA;        description = &#34;second page&#34;, params = {&#34;hello&#34;, &#34;world&#34;})&#xA;public class HomeActivity extends BaseActivity {&#xA;    @Override&#xA;    protected void onCreate(@Nullable Bundle savedInstanceState) {&#xA;        super.onCreate(savedInstanceState);&#xA;        TheRouter.build(&#34;Path&#34;)&#xA;            .withInt(&#34;intValue&#34;, 12345678)&#xA;            .withString(&#34;str_123_Value&#34;, &#34;传中文字符串&#34;)&#xA;            .withBoolean(&#34;boolValue&#34;, true)&#xA;            .withLong(&#34;longValue&#34;, 123456789012345L)&#xA;            .withChar(&#34;charValue&#34;, &#39;c&#39;)&#xA;            .withDouble(&#34;double&#34;, 3.14159265358972)&#xA;            .withFloat(&#34;floatValue&#34;, 3.14159265358972F)&#xA;            .navigation();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;C. proguard rules configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;-keep class androidx.annotation.Keep&#xA;-keep @androidx.annotation.Keep class * {*;}&#xA;-keepclassmembers class * {&#xA;    @androidx.annotation.Keep *;&#xA;}&#xA;-keepclasseswithmembers class * {&#xA;    @androidx.annotation.Keep &amp;lt;methods&amp;gt;;&#xA;}&#xA;-keepclasseswithmembers class * {&#xA;    @androidx.annotation.Keep &amp;lt;fields&amp;gt;;&#xA;}&#xA;-keepclasseswithmembers class * {&#xA;    @androidx.annotation.Keep &amp;lt;init&amp;gt;(...);&#xA;}&#xA;-keepclasseswithmembers class * {&#xA;    @com.therouter.router.Autowired &amp;lt;fields&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;D. Build and Debug&lt;/h3&gt; &#xA;&lt;h4&gt;D1. project module description&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;TheRouter&#xA;  ├─app&#xA;  │   └──sample&#xA;  ├─business-a&#xA;  │   └──modular business demo&#xA;  ├─business-b&#xA;  │   └──modular business demo&#xA;  ├─business-base&#xA;  │   └──modular business demo&#xA;  │&#xA;  ├─apt&#xA;  │   └──Annotation processor tool code&#xA;  │&#xA;  ├─plugin&#xA;  │   └──Gradle plugin&#xA;  │&#xA;  └─router&#xA;      └──library code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;D2. run Project&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;local.properties&lt;/code&gt; and declare the modules you want to debug. For example, if you want the source code to debug the &lt;code&gt;apt&lt;/code&gt; module, you can declare &lt;code&gt;apt=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;sync Gradle change&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;D3. plugin source code debugging&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;plugin&lt;/code&gt; debugging is special; you&#39;ll need to modify the &lt;code&gt;module&lt;/code&gt; name to enable plugin debugging.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Modify the &lt;code&gt;plugin&lt;/code&gt; folder name to &lt;code&gt;buildSrc&lt;/code&gt; (Case sensitive)&lt;/li&gt; &#xA; &lt;li&gt;Remove &lt;code&gt;classpath&lt;/code&gt; reference in root &lt;code&gt;build.gradle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;sync Gradle change&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;E. Change Log&lt;/h3&gt; &#xA;&lt;p&gt;link to Wiki：&lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/releases&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;F. Author&lt;/h3&gt; &#xA;&lt;img src=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/wiki/uploads/image/hll.png&#34; width=&#34;40%&#34; alt=&#34;HUOLALA mobile technology team&#34;&gt; &#xA;&lt;h3&gt;G. LICENSE&lt;/h3&gt; &#xA;&lt;p&gt;TheRouter is licensed under the Apache License 2.0: &lt;a href=&#34;https://github.com/HuolalaTech/hll-wp-therouter-android/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LawnchairLauncher/lawnicons</title>
    <updated>2022-09-18T01:48:29Z</updated>
    <id>tag:github.com,2022-09-18:/LawnchairLauncher/lawnicons</id>
    <link href="https://github.com/LawnchairLauncher/lawnicons" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Adds themed icons to Lawnchair.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lawnicons&lt;/h1&gt; &#xA;&lt;p&gt;Lawnicons is an add-on for adding themed icons to &lt;a href=&#34;https://github.com/LawnchairLauncher/lawnchair&#34;&gt;Lawnchair 12 Alpha 5&lt;/a&gt; and above, the latest version of Lawnchair Launcher. This addon is now the source of all themed icons, for simplicity.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/LawnchairLauncher/lawnicons/releases&#34;&gt;Releases&lt;/a&gt; section to download the latest stable build of Lawnicons.&lt;/p&gt; &#xA;&lt;p&gt;For the development versions with new icons, go to the &lt;a href=&#34;https://github.com/LawnchairLauncher/lawnicons/actions&#34;&gt;Actions&lt;/a&gt; tab, click the first workflow run, and scroll and find the &lt;code&gt;Debug Apk&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that you&#39;ll need to have a GitHub account to download the debug apk.&lt;/p&gt; &#xA;&lt;h2&gt;Adding icons&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/LawnchairLauncher/lawnicons/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for info on adding icons.&lt;/p&gt; &#xA;&lt;h2&gt;Requesting icons&lt;/h2&gt; &#xA;&lt;p&gt;To request new icons, please use &lt;a href=&#34;https://forms.gle/Fx8vZAiWdW1Tyjo57&#34;&gt;the icon request form&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Lawnicons is licensed under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License 2.0&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/LawnchairLauncher/lawnicons/develop/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for additional information.&lt;/p&gt; &#xA;&lt;h2&gt;Quick links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LawnchairLauncher/lawnchair&#34;&gt;Lawnchair GitHub page&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mobile-dev-inc/maestro</title>
    <updated>2022-09-18T01:48:29Z</updated>
    <id>tag:github.com,2022-09-18:/mobile-dev-inc/maestro</id>
    <link href="https://github.com/mobile-dev-inc/maestro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Painless Mobile UI Automation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Maestro 🎹&lt;/h1&gt; &#xA;&lt;p&gt;Maestro is the easiest way to automate UI testing for your mobile app.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;📃&lt;/span&gt;&amp;nbsp;&amp;nbsp;Blog Post: &lt;a href=&#34;https://blog.mobile.dev/introducing-maestro-painless-mobile-ui-automation-bee4992d13c1&#34;&gt;&lt;strong&gt;Introducing: Maestro — Painless Mobile UI Automation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📖&lt;/span&gt;&amp;nbsp;&amp;nbsp;Full documentation for Maestro can be found at &lt;a href=&#34;https://maestro.mobile.dev&#34;&gt;&lt;strong&gt;maestro.mobile.dev&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;💬&lt;/span&gt;&amp;nbsp;&amp;nbsp;Public Slack channel: &lt;a href=&#34;https://join.slack.com/t/mobile-dev-inc/shared_invite/zt-1g6pmyg0z-A1OgmTDqDjFyej2IaRB8_w&#34;&gt;&lt;strong&gt;Join the workspace&lt;/strong&gt;&lt;/a&gt;, then head to the &lt;code&gt;#maestro&lt;/code&gt; channel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/847683/187275009-ddbdf963-ce1d-4e07-ac08-b10f145e8894.gif&#34;&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Create a flow for any app on Android and iOS, with just a few lines of YAML.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# flow_contacts_android.yaml&#xA;&#xA;appId: com.android.contacts&#xA;---&#xA;- launchApp&#xA;- tapOn: &#34;Create new contact&#34;&#xA;- tapOn: &#34;First Name&#34;&#xA;- inputText: &#34;John&#34;&#xA;- tapOn: &#34;Last Name&#34;&#xA;- inputText: &#34;Snow&#34;&#xA;- tapOn: &#34;Save&#34;&#xA;- assertVisible: &#34;Add Phone Number&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# flow_contacts_ios.yaml&#xA;&#xA;appId: com.apple.MobileAddressBook&#xA;---&#xA;- launchApp&#xA;- tapOn: &#34;John Appleseed&#34;&#xA;- tapOn: &#34;Edit&#34;&#xA;- tapOn: &#34;Add phone&#34;&#xA;- inputText: &#34;123123&#34;&#xA;- tapOn: &#34;Done&#34;&#xA;- assertVisible: &#34;message&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Get a CLI tool from homebrew&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap mobile-dev-inc/tap&#xA;brew install maestro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write a simple test in a YAML file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# flow.yaml&#xA;&#xA;appId: your.package.name&#xA;---&#xA;- launchApp&#xA;- tapOn: &#34;Text on the screen&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure an Android emulator is running. Check out the &lt;a href=&#34;https://maestro.mobile.dev/getting-started/installing-maestro#android&#34;&gt;docs&lt;/a&gt; for physical device support.&lt;/p&gt; &#xA;&lt;p&gt;Run it!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;maestro test flow.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;iOS Support&lt;/h2&gt; &#xA;&lt;p&gt;Only iOS Simulators are supported at the moment.&lt;/p&gt; &#xA;&lt;p&gt;For Maestro to work with iOS you would need to do few extra steps.&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://fbidb.io/&#34;&gt;Facebook IDB&lt;/a&gt; tool&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap facebook/fb&#xA;brew install idb-companion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And launch it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;idb_companion --udid {id of the iOS device}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why Maestro?&lt;/h2&gt; &#xA;&lt;p&gt;Maestro is built on learnings from its predecessors (Appium, Espresso, UIAutomator, XCTest)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in tolerance to flakiness. UI elements will not always be where you expect them, screen tap will not always go through, etc. Maestro embraces the instability of mobile applications and devices and tries to counter it.&lt;/li&gt; &#xA; &lt;li&gt;Built-in tolerance to delays. No need to pepper your tests with &lt;code&gt;sleep()&lt;/code&gt; calls. Maestro knows that it might take time to load the content (i.e. over the network) and automatically waits for it (but no longer than required).&lt;/li&gt; &#xA; &lt;li&gt;Blazingly fast iteration. Tests are interpreted, no need to compile anything. Maestro is able to continuously monitor your test files and rerun them as they change.&lt;/li&gt; &#xA; &lt;li&gt;Declarative yet powerful syntax. Define your tests in a &lt;code&gt;yaml&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Simple setup. Maestro is a single binary that works anywhere.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Next steps&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maestro.mobile.dev/&#34;&gt;Learn more about Maestro features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maestro.mobile.dev/reference/tap-on-view&#34;&gt;Learn about Maestro commands&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>