<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T02:15:00Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shabinder/SpotiFlyer</title>
    <updated>2022-06-26T02:15:00Z</updated>
    <id>tag:github.com,2022-06-26:/Shabinder/SpotiFlyer</id>
    <link href="https://github.com/Shabinder/SpotiFlyer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kotlin Multiplatform Music Downloader, Supports Spotify / Gaana / Youtube Music / Jio Saavn / SoundCloud. NOTE: BEING REWRITTEN, SO STAY TUNED.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Shabinder/SpotiFlyer/main/art/cover-web.jpg&#34; alt=&#34;Web Cover&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Shabinder/SpotiFlyer/main/art/cover-android.jpg&#34; alt=&#34;Android Cover&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Shabinder/SpotiFlyer/main/art/cover-desktop.jpg&#34; alt=&#34;Desktop Cover&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer&#34;&gt;&lt;img src=&#34;https://github.com/Shabinder/SpotiFlyer/raw/Compose/art/SpotiFlyer.svg?sanitize=true&#34; align=&#34;left&#34; height=&#34;80&#34; width=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SpotiFlyer&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kotlin Multiplatform&lt;/strong&gt; Music Downloader ,supports &lt;strong&gt;Spotify, Youtube, Gaana, Jio-Saavn and SoundCloud&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supports- Playlist, Albums, Tracks. &lt;em&gt;(If You know Any Source for Episodes/Podcasts create an Issue sharing It.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Currently running on:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer#-install&#34;&gt;Android (Jetpack Compose)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer#-install&#34;&gt;Desktop (Compose for Desktop) &lt;sup&gt;Œ≤&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spotiflyer.ml/web/&#34;&gt;Web (Kotlin/JS + React Wrapper) &lt;sup&gt;Œ≤&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shabinder/spotiflyer-ios&#34;&gt;&lt;em&gt;(WIP)&lt;/em&gt; IOS SOON (SWIFTUI)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--[![Build Status](https://github.com/Shabinder/SpotiFlyer/blob/master/app/build_passing.svg)](https://github.com/Shabinder/SpotiFlyer/releases)&#xA;![API](https://img.shields.io/badge/API-26%2B-brightgreen.svg)&#xA;&lt;/br&gt;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Shabinder/SpotiFlyer?style=social&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/Shabinder/SpotiFlyer?style=social&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/Shabinder/SpotiFlyer?style=social&#34; alt=&#34;GitHub watchers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Encourage this repo by giving it a Star‚≠ê .&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;SpotiFlyer is an &lt;strong&gt;App&lt;/strong&gt;(Written in &lt;strong&gt;Kotlin&lt;/strong&gt;), which &lt;strong&gt;aims&lt;/strong&gt; to work as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Downloads&lt;/strong&gt;: Albums, Tracks and Playlists,etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Save your Data&lt;/strong&gt; ,by not &lt;strong&gt;&lt;em&gt;Streaming&lt;/em&gt;&lt;/strong&gt; your Fav Songs Online again &amp;amp; again(Just Download Them!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No ADS!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Works straight out of the box&lt;/strong&gt; and does not require you to generate or mess with your API keys (already included).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Platforms:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spotify&lt;/li&gt; &#xA; &lt;li&gt;Gaana&lt;/li&gt; &#xA; &lt;li&gt;Youtube&lt;/li&gt; &#xA; &lt;li&gt;Youtube Music&lt;/li&gt; &#xA; &lt;li&gt;Jio-Saavn&lt;/li&gt; &#xA; &lt;li&gt;SoundCloud&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(more coming soon)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--START_SECTION:DCI &#xA;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/latest&#34;&gt;&lt;img src=&#34;https://hcti.io/v1/image/53d51dc7-91c7-4b9d-b923-2ea32e6b17ad&#34; height=&#34;125&#34; width=&#34;280&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&#xA;&lt;!--END_SECTION:DCI--&gt; &#xA;&lt;h2&gt;üíª Install&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Download&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/download/v3.6.1/SpotiFlyer-3.6.1.apk&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=7885FF&amp;amp;label=Android-Apk&amp;amp;logo=android&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/download/v3.6.1/SpotiFlyer-3.6.1.msi&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=00A8E8&amp;amp;label=Windows-msi&amp;amp;logo=windows&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows-JAR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/download/v3.6.1/SpotiFlyer-windows-x64-3.6.1.jar&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=00719c&amp;amp;label=Windows-jar&amp;amp;logo=windows&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacOS-JAR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/download/v3.6.1/SpotiFlyer-macos-x64-3.6.1.jar&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=5F85CE&amp;amp;label=MacOS-jar&amp;amp;logo=apple&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux-DEB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/download/v3.6.1/spotiflyer_3.6.1-1_amd64.deb&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=D0074E&amp;amp;label=Linux-deb&amp;amp;logo=debian&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux-JAR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/releases/download/v3.6.1/SpotiFlyer-linux-x64-3.6.1.jar&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=EBA201&amp;amp;label=Linux-jar&amp;amp;logo=linux&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Web&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://shabinder.github.io/SpotiFlyer/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Shabinder/SpotiFlyer?color=FF7139&amp;amp;label=SpotiFlyer&amp;amp;logo=firefox&amp;amp;style=for-the-badge&#34; alt=&#34;Download Button&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚ö†Ô∏è Beta&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To run the &lt;code&gt;jar&lt;/code&gt; version, you need JAVA installed.&lt;/li&gt; &#xA; &lt;li&gt;MacOs DMG is not notarized and signed using a certificate , so Use jar in mac for now.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- [![Latest Download](https://img.shields.io/github/downloads/Shabinder/SpotiFlyer/total?style=for-the-badge&amp;color=17B2E7)](https://github.com/Shabinder/SpotiFlyer/releases/latest) --&gt; &#xA;&lt;a href=&#34;https://f-droid.org/packages/com.shabinder.spotiflyer&#34;&gt; &lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;110&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Want to Contribute üôã‚Äç‚ôÇÔ∏è?&lt;/h3&gt; &#xA;&lt;p&gt;Want to contribute? Great! All contributions are welcome, from code to documentation to graphics to design suggestions to bug reports. Please use GitHub to its fullest-- contribute Pull Requests, contribute tutorials or other wiki content-- whatever you have to offer, we can use it!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For &lt;strong&gt;Translations&lt;/strong&gt; , read &lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/raw/main/CONTRIBUTING.md&#34;&gt;Contributing.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please Donate to support me and my work!&lt;/strong&gt; &lt;br&gt; &lt;a href=&#34;https://ko-fi.com/R6R84CS1D&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://opencollective.com/spotiflyer/donate&#34;&gt; &lt;img src=&#34;https://opencollective.com/spotiflyer/tiers/donate.svg?avatarHeight=52&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://paypal.me/shabinder&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34; alt=&#34;paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Want to discuss? üí¨&lt;/h3&gt; &#xA;&lt;p&gt;Have any questions, doubts or want to present your opinions, views? You&#39;re always welcome. You can &lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/discussions&#34;&gt;start discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Todos üìÑ&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write &lt;strong&gt;Tests&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support for Podcasts/Episodes and Shows.&lt;/li&gt; &#xA; &lt;li&gt;Build a Media Player into this app. &lt;a href=&#34;https://github.com/Shabinder/SpotiFlyer/issues/113&#34;&gt;#113&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;The availability of YouTube Music / JioSaavn in your country is important for this app to work. The reason behind this is, we use YouTube Music / JioSaavn to filter out our search results and get the desired song downloaded from Youtube Music OR other providers we may use(like Jio Saavn). To check if YouTube Music is available in your country, visit &lt;a href=&#34;https://music.youtube.com&#34;&gt;YouTube Music&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I am hosting a &lt;strong&gt;server for WEB APP on my own personal device&lt;/strong&gt; , so expect some downtimes, If you have a &lt;strong&gt;server&lt;/strong&gt; available and would like to share , open an issue or ping me wherever you can get a hold of me.&lt;/p&gt; &#xA;&lt;h3&gt;Permissions Info:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NETWORK&lt;/strong&gt;- &lt;em&gt;(INTERNET, ACCESS_NETWORK_STATE, ACCESS_WIFI_STATE)&lt;/em&gt;: to access the online streaming services, and Confirm Network Connectivity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;STORAGE&lt;/strong&gt;- &lt;em&gt;READ_STORAGE_PERMISSION, READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE, MANAGE_EXTERNAL_STORAGE)&lt;/em&gt;: to save Downloaded Media Files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;QUERY_ALL_PACKAGES&lt;/strong&gt;- in order to check if Youtube Music, Spotify, Gaana, JioSaavn, etc apps are installed and if they are, user can directly open them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;REQUEST_IGNORE_BATTERY_OPTIMIZATIONS&lt;/strong&gt;: User Allows App to Run in Background at runtime in Permission Dialog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wake Lock&lt;/strong&gt;: Don&#39;t let Wifi/Internet Sleep in screen off / dozing state when Songs are being downloaded.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Foreground Service&lt;/strong&gt;: Service responsible to download and save songs to storage even after app is exited/background.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Analytics and Crashlytics are &lt;strong&gt;OPT-IN&lt;/strong&gt; &lt;em&gt;(Disabled by Default)&lt;/em&gt; and are &lt;strong&gt;Self-Hosted&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License &lt;img src=&#34;https://img.shields.io/github/license/Shabinder/SpotiFlyer?style=flat-square&#34; alt=&#34;GPL-License&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GPL-3.0 License&lt;/strong&gt; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Free Software, Hell Yeah!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some Logos are Based on Logos by &lt;a href=&#34;https://www.freepik.com/&#34;&gt;Freepik&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Downloading copyright songs may be illegal in your country. This tool is for educational purposes only and was created only to show how Music Platform&#39;s Apis like Spotify&#39;s API can be exploited to download music. Please support the artists by buying their music.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>oss-review-toolkit/ort</title>
    <updated>2022-06-26T02:15:00Z</updated>
    <id>tag:github.com,2022-06-26:/oss-review-toolkit/ort</id>
    <link href="https://github.com/oss-review-toolkit/ort" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A suite of tools to assist with reviewing Open Source Software dependencies.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/ort.png&#34; alt=&#34;OSS Review Toolkit Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/ort-talk/shared_invite/enQtMzk3MDU5Njk0Njc1LThiNmJmMjc5YWUxZTU4OGI5NmY3YTFlZWM5YTliZmY5ODc0MGMyOWIwYmRiZWFmNGMzOWY2NzVhYTI0NTJkNmY&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Join_us_on_Slack!-ort--talk-blue.svg?longCache=true&amp;amp;logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/oss-review-toolkit/ort/actions/workflows/gradle-wrapper-validation.yml&#34;&gt;&lt;img src=&#34;https://github.com/oss-review-toolkit/ort/actions/workflows/gradle-wrapper-validation.yml/badge.svg?sanitize=true&#34; alt=&#34;Validate Gradle Wrapper&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/actions/workflows/static-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/oss-review-toolkit/ort/actions/workflows/static-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;Static Analysis&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/oss-review-toolkit/ort/actions/workflows/build-and-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/oss-review-toolkit/ort/actions/workflows/build-and-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build and Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jitpack.io/#oss-review-toolkit/ort&#34;&gt;&lt;img src=&#34;https://jitpack.io/v/oss-review-toolkit/ort.svg?sanitize=true&#34; alt=&#34;JitPack build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/oss-review-toolkit/ort&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/oss-review-toolkit/ort/branch/main/graph/badge.svg?token=QD2tCSUTVN&#34; alt=&#34;Code coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tickgit.com/browse?repo=github.com/oss-review-toolkit/ort&#34;&gt;&lt;img src=&#34;https://badgen.net/https/api.tickgit.com/badgen/github.com/oss-review-toolkit/ort&#34; alt=&#34;TODOs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/oss-review-toolkit/ort/alerts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/oss-review-toolkit/ort.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;LGTM&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://api.reuse.software/info/github.com/oss-review-toolkit/ort&#34;&gt;&lt;img src=&#34;https://api.reuse.software/badge/github.com/oss-review-toolkit/ort&#34; alt=&#34;REUSE status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/4618&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/4618/badge&#34; alt=&#34;CII&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;The OSS Review Toolkit (ORT) aims to assist with the tasks that commonly need to be performed in the context of license compliance checks, especially for (but not limited to) Free and Open Source Software dependencies.&lt;/p&gt; &#xA;&lt;p&gt;It does so by orchestrating a &lt;em&gt;highly customizable&lt;/em&gt; pipeline of tools that &lt;em&gt;abstract away&lt;/em&gt; the underlying services. These tools are implemented as libraries (for programmatic use) and exposed via a command line interface (for scripted use):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#analyzer&#34;&gt;&lt;em&gt;Analyzer&lt;/em&gt;&lt;/a&gt; - determines the dependencies of projects and their metadata, abstracting which package managers or build systems are actually being used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#downloader&#34;&gt;&lt;em&gt;Downloader&lt;/em&gt;&lt;/a&gt; - fetches all source code of the projects and their dependencies, abstracting which Version Control System (VCS) or other means are used to retrieve the source code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#scanner&#34;&gt;&lt;em&gt;Scanner&lt;/em&gt;&lt;/a&gt; - uses configured source code scanners to detect license / copyright findings, abstracting the type of scanner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#advisor&#34;&gt;&lt;em&gt;Advisor&lt;/em&gt;&lt;/a&gt; - retrieves security advisories for used dependencies from configured vulnerability data services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#evaluator&#34;&gt;&lt;em&gt;Evaluator&lt;/em&gt;&lt;/a&gt; - evaluates license / copyright findings against customizable policy rules and license classifications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#reporter&#34;&gt;&lt;em&gt;Reporter&lt;/em&gt;&lt;/a&gt; - presents results in various formats such as visual reports, Open Source notices or Bill-Of-Materials (BOMs) to easily identify dependencies, licenses, copyrights or policy rule violations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/notifier&#34;&gt;&lt;em&gt;Notifier&lt;/em&gt;&lt;/a&gt; - sends result notifications via different channels (like &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/examples/notifications/src/main/resources/example.notifications.kts&#34;&gt;emails&lt;/a&gt; and / or JIRA tickets).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;From binaries&lt;/h2&gt; &#xA;&lt;p&gt;Preliminary binary artifacts for ORT are currently available via &lt;a href=&#34;https://jitpack.io/#oss-review-toolkit/ort&#34;&gt;JitPack&lt;/a&gt;. Please note that due to limitations with the JitPack build environment, the reporter is not able to create the Web App report.&lt;/p&gt; &#xA;&lt;h2&gt;From sources&lt;/h2&gt; &#xA;&lt;p&gt;Install the following basic prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git (any recent version will do).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then clone this repository. If you intend to run tests, you need to clone with submodules by running &lt;code&gt;git clone --recurse-submodules&lt;/code&gt;. If you have already cloned non-recursively, you can initialize submodules afterwards by running &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build using Docker&lt;/h3&gt; &#xA;&lt;p&gt;Install the following basic prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker 18.09 or later (and ensure its daemon is running).&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;a href=&#34;https://docs.docker.com/develop/develop-images/build_enhancements/#to-enable-buildkit-builds&#34;&gt;BuildKit&lt;/a&gt; for Docker.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Change into the directory with ORT&#39;s source code and run &lt;code&gt;docker build -t ort .&lt;/code&gt;. Alternatively, use the script at &lt;code&gt;scripts/docker_build.sh&lt;/code&gt; which also sets the ORT version from the Git revision.&lt;/p&gt; &#xA;&lt;h3&gt;Build natively&lt;/h3&gt; &#xA;&lt;p&gt;Install these additional prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java Development Kit (JDK) version 11 or later; also remember to set the &lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable accordingly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Change into the directory with ORT&#39;s source code and run &lt;code&gt;./gradlew installDist&lt;/code&gt; (on the first run this will bootstrap Gradle and download all required dependencies).&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;ORT can now be run using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./cli/build/install/ort/bin/ort --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you make any changes to ORT&#39;s source code, you would have to regenerate the distribution using the steps above.&lt;/p&gt; &#xA;&lt;p&gt;To avoid that, you can also build and run ORT in one go (if you have the prerequisites from the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#build-natively&#34;&gt;Build natively&lt;/a&gt; section installed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew cli:run --args=&#34;--help&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in this case the working directory used by ORT is that of the &lt;code&gt;cli&lt;/code&gt; project, not the directory &lt;code&gt;gradlew&lt;/code&gt; is located in (see &lt;a href=&#34;https://github.com/gradle/gradle/issues/6074&#34;&gt;https://github.com/gradle/gradle/issues/6074&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;Running the tools&lt;/h1&gt; &#xA;&lt;p&gt;Like for building ORT from sources you have the option to run ORT from a Docker image (which comes with all runtime dependencies) or to run ORT natively (in which case some additional requirements need to be fulfilled).&lt;/p&gt; &#xA;&lt;h2&gt;Run using Docker&lt;/h2&gt; &#xA;&lt;p&gt;After you have built the image as &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#build-using-docker&#34;&gt;described above&lt;/a&gt;, simply run &lt;code&gt;docker run &amp;lt;DOCKER_ARGS&amp;gt; ort &amp;lt;ORT_ARGS&amp;gt;&lt;/code&gt;. You typically use &lt;code&gt;&amp;lt;DOCKER_ARGS&amp;gt;&lt;/code&gt; to mount the project directory to analyze into the container for ORT to access it, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v /workspace:/project ort --info analyze -f JSON -i /project -o /project/ort/analyzer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find further hints for using ORT with Docker in the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/hints-for-use-with-docker.md&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Run natively&lt;/h2&gt; &#xA;&lt;p&gt;First of all, make sure that the locale of your system is set to &lt;code&gt;en_US.UTF-8&lt;/code&gt; as using other locales might lead to issues with parsing the output of some external tools.&lt;/p&gt; &#xA;&lt;p&gt;Then install any missing external command line tools as listed by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./cli/build/install/ort/bin/ort requirements&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew cli:run --args=&#34;requirements&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run ORT like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./cli/build/install/ort/bin/ort --info analyze -f JSON -i /project -o /project/ort/analyzer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew cli:run --args=&#34;--info analyze -f JSON -i /project -o /project/ort/analyzer&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running on CI&lt;/h2&gt; &#xA;&lt;p&gt;A basic ORT pipeline (using the &lt;em&gt;analyzer&lt;/em&gt;, &lt;em&gt;scanner&lt;/em&gt; and &lt;em&gt;reporter&lt;/em&gt;) can easily be run on &lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins CI&lt;/a&gt; by using the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/integrations/Jenkinsfile&#34;&gt;Jenkinsfile&lt;/a&gt; in a (declarative) &lt;a href=&#34;https://jenkins.io/doc/book/pipeline/&#34;&gt;pipeline&lt;/a&gt; job. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/integrations/Jenkinsfile&#34;&gt;Jenkinsfile&lt;/a&gt; itself for documentation of the required Jenkins plugins. The job accepts various parameters that are translated to ORT command line arguments. Additionally, one can trigger a downstream job which e.g. further processes scan results. Note that it is the downstream job&#39;s responsibility to copy any artifacts it needs from the upstream job.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/getting-started.md&#34;&gt;Getting Started&lt;/a&gt; for an introduction to the individual tools.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;ORT supports several environment variables that influence its behavior:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ORT_DATA_DIR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;~/.ort&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All data, like caches, archives, storages (read &amp;amp; write)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ORT_CONFIG_DIR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_DATA_DIR/config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configuration files, see below (read only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ORT_HTTP_USERNAME&lt;/td&gt; &#xA;   &lt;td&gt;Empty (n/a)&lt;/td&gt; &#xA;   &lt;td&gt;Generic username to use for HTTP(S) downloads&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ORT_HTTP_PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;Empty (n/a)&lt;/td&gt; &#xA;   &lt;td&gt;Generic password to use for HTTP(S) downloads&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;http_proxy&lt;/td&gt; &#xA;   &lt;td&gt;Empty (n/a)&lt;/td&gt; &#xA;   &lt;td&gt;Proxy to use for HTTP downloads&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;https_proxy&lt;/td&gt; &#xA;   &lt;td&gt;Empty (n/a)&lt;/td&gt; &#xA;   &lt;td&gt;Proxy to use for HTTPS downloads&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Configuration files&lt;/h3&gt; &#xA;&lt;p&gt;ORT looks for its configuration files in the directory pointed to by the &lt;code&gt;ORT_CONFIG_DIR&lt;/code&gt; environment variable. If this variable is not set, it defaults to the &lt;code&gt;config&lt;/code&gt; directory below the directory pointed to by the &lt;code&gt;ORT_DATA_DIR&lt;/code&gt; environment variable, which in turn defaults to the &lt;code&gt;.ort&lt;/code&gt; directory below the current user&#39;s home directory.&lt;/p&gt; &#xA;&lt;p&gt;The following provides an overview of the various configuration files that can be used to customize ORT behavior:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/model/src/main/resources/reference.conf&#34;&gt;ORT configuration file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The main configuration file for the operation of ORT. This configuration is maintained by an administrator who manages the ORT instance. In contrast to the configuration files in the following, this file rarely changes once ORT is operational.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HOCON&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/ort.conf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/model/src/main/resources/reference.conf&#34;&gt;reference configuration file&lt;/a&gt; gives a good impression about the content of the main ORT configuration file. It consists of sections related to different sub components of ORT. The meaning of these sections and the properties they can contain is described together with the corresponding sub components.&lt;/p&gt; &#xA;&lt;p&gt;While the file is rather static, there are means to override configuration options for a specific run of ORT or to customize the configuration to a specific environment. The following options are supported, in order of precedence:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Properties can be defined via environment variables by using the full property path as the variable name. For instance, one can override the Postgres schema by setting &lt;code&gt;ort.scanner.storages.postgres.schema=test_schema&lt;/code&gt;. The variable&#39;s name is case sensitive. Some programs like Bash do not support dots in variable names. For this case, the dots can be replaced by double underscores, i.e., the above example is turned into &lt;code&gt;ort__scanner__storages__postgres__schema=test_schema&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In addition to that, one can override the values of properties on the command line using the &lt;code&gt;-P&lt;/code&gt; option. The option expects a key-value pair. Again, the key must define the full path to the property to be overridden, e.g. &lt;code&gt;-P ort.scanner.storages.postgres.schema=test_schema&lt;/code&gt;. The &lt;code&gt;-P&lt;/code&gt; option can be repeated on the command line to override multiple properties.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Properties in the configuration file can reference environment variables using the syntax &lt;code&gt;${VAR}&lt;/code&gt;. This is especially useful to reference dynamic or sensitive data. As an example, the credentials for the Postgres database used as scan results storage could be defined in the &lt;code&gt;POSTGRES_USERNAME&lt;/code&gt; and &lt;code&gt;POSTGRES_PASSWORD&lt;/code&gt; environment variables. The configuration file can then reference these values as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;postgres {&#xA;  url = &#34;jdbc:postgresql://your-postgresql-server:5444/your-database&#34;&#xA;  username = ${POSTGRES_USERNAME}&#xA;  password = ${POSTGRES_PASSWORD}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/config-file-copyright-garbage-yml.md&#34;&gt;Copyright garbage file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A list of copyright statements that are considered garbage, for example statements that were incorrectly classified as copyrights by the scanner.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML / JSON&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/copyright-garbage.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/config-file-curations-yml.md&#34;&gt;Curations file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A file to correct invalid or missing package metadata, and to set the concluded license for packages.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML / JSON&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/curations.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/dir-custom-license-texts.md&#34;&gt;Custom license texts dir&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A directory that contains license texts which are not provided by ORT.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/custom-license-texts/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/how-to-fix-text-provider-kts.md&#34;&gt;How to fix text provider script&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A Kotlin script that enables the injection of how-to-fix texts in markdown format for ORT issues into the reports.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin script&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/how-to-fix-text-provider.kts&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/config-file-license-classifications-yml.md&#34;&gt;License classifications file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A file that contains user-defined categorization of licenses.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML / JSON&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/license-classifications.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/config-file-resolutions-yml.md&#34;&gt;Resolution file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Configurations to resolve any issues or rule violations by providing a mandatory reason, and an optional comment to justify the resolution on a global scale.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML / JSON&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/resolutions.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/config-file-ort-yml.md&#34;&gt;Repository configuration file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A configuration file, usually stored in the project&#39;s repository, for license finding curations, exclusions, and issues or rule violations resolutions in the context of the repository.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML / JSON&lt;/td&gt; &#xA;   &lt;td&gt;Repository (project)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[analyzer-input-dir]/.ort.yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/config-file-package-configuration-yml.md&#34;&gt;Package configuration file / directory&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A single file or a directory with multiple files containing configurations to set provenance-specific path excludes and license finding curations for dependency packages to address issues found within a scan result. &lt;code&gt;helper-cli&lt;/code&gt;&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/helper-cli/src/main/kotlin/commands/packageconfig/CreateCommand.kt&#34;&gt;&lt;code&gt;package-config create&lt;/code&gt; command&lt;/a&gt; can be used to populate a directory with template package configuration files.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML / JSON&lt;/td&gt; &#xA;   &lt;td&gt;Package (dependency)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/package-configurations/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/file-rules-kts.md&#34;&gt;Policy rules file&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The file containing any policy rule implementations to be used with the &lt;em&gt;evaluator&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Scope&lt;/th&gt; &#xA;   &lt;th&gt;Default location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin script (DSL)&lt;/td&gt; &#xA;   &lt;td&gt;Evaluator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$ORT_CONFIG_DIR/evaluator.rules.kts&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Details on the tools&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a name=&#34;analyzer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/analyzer/src/main/kotlin&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/analyzer.png&#34; alt=&#34;Analyzer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;analyzer&lt;/em&gt; is a Software Composition Analysis (SCA) tool that determines the dependencies of software projects inside the specified input directory (&lt;code&gt;-i&lt;/code&gt;). It does so by querying the detected package managers; &lt;strong&gt;no modifications&lt;/strong&gt; to your existing project source code, like applying build system plugins, are necessary for that to work. The tree of transitive dependencies per project is written out as part of an &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/raw/main/model/src/main/kotlin/OrtResult.kt&#34;&gt;OrtResult&lt;/a&gt; in YAML (or JSON, see &lt;code&gt;-f&lt;/code&gt;) format to a file named &lt;code&gt;analyzer-result.yml&lt;/code&gt; in the specified output directory (&lt;code&gt;-o&lt;/code&gt;). The output file exactly documents the status quo of all package-related metadata. It can be further processed or manually edited before passing it to one of the other tools.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the following package managers (grouped by the programming language they are most commonly used with) are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C / C++ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://conan.io/&#34;&gt;Conan&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Also see: &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#analyzer-for-spdx-documents&#34;&gt;SPDX documents&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Dart / Flutter &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/&#34;&gt;Pub&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://golang.github.io/dep/&#34;&gt;dep&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34;&gt;Glide&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tools/godep&#34;&gt;Godep&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;GoMod&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Haskell &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://haskellstack.org/&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Java &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/1774&#34;&gt;default profile only&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;JavaScript / Node.js &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bower.io/&#34;&gt;Bower&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;NPM&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/3741&#34;&gt;no scope-specific registries&lt;/a&gt;, &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/95&#34;&gt;no peer dependencies&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://classic.yarnpkg.com/&#34;&gt;Yarn 1&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://next.yarnpkg.com/&#34;&gt;Yarn 2+&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;.NET &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/tools/&#34;&gt;DotNet&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/pull/1303#issue-253860146&#34;&gt;no floating versions / ranges&lt;/a&gt;, &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/4083&#34;&gt;no target framework&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.nuget.org/&#34;&gt;NuGet&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/pull/1303#issue-253860146&#34;&gt;no floating versions / ranges&lt;/a&gt;, &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/4083&#34;&gt;no target framework&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Objective-C / Swift &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; (limitation: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/3774&#34;&gt;no &lt;code&gt;cartfile.private&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods&#34;&gt;CocoaPods&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/4188&#34;&gt;no custom source repositories&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;PHP &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Python &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pip.pypa.io/&#34;&gt;PIP&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/3671&#34;&gt;Python 2.7 or 3.8 and PIP 18.1 only&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pipenv.pypa.io/en/latest/&#34;&gt;Pipenv&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/3671&#34;&gt;Python 2.7 or 3.8 and PIP 18.1 only&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://python-poetry.org/&#34;&gt;Poetry&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/3671&#34;&gt;Python 2.7 or 3.8 and PIP 18.1 only&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ruby &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bundler.io/&#34;&gt;Bundler&lt;/a&gt; (limitations: &lt;a href=&#34;https://github.com/oss-review-toolkit/ort/issues/1308&#34;&gt;restricted to the version available on the host&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Rust &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;Cargo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Scala &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Unmanaged &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is a special &#34;package manager&#34; that manages all files that cannot be associated to any of the other package managers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;analyzer-for-spdx-documents&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If another package manager that is not part of the list above is used (or no package manager at all), the generic fallback to &lt;a href=&#34;https://spdx.dev/specifications/&#34;&gt;SPDX documents&lt;/a&gt; can be leveraged to describe &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/analyzer/src/funTest/assets/projects/synthetic/spdx/project-xyz-with-inline-packages.spdx.yml&#34;&gt;projects&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/analyzer/src/funTest/assets/projects/synthetic/spdx/libs/curl/package.spdx.yml&#34;&gt;packages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;downloader&#34;&gt;&amp;nbsp;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/downloader/src/main/kotlin&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/downloader.png&#34; alt=&#34;Downloader&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Taking an ORT result file with an &lt;em&gt;analyzer&lt;/em&gt; result as the input (&lt;code&gt;-i&lt;/code&gt;), the &lt;em&gt;downloader&lt;/em&gt; retrieves the source code of all contained packages to the specified output directory (&lt;code&gt;-o&lt;/code&gt;). The &lt;em&gt;downloader&lt;/em&gt; takes care of things like normalizing URLs and using the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/downloader/src/main/kotlin/vcs&#34;&gt;appropriate VCS tool&lt;/a&gt; to checkout source code from version control.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the following Version Control Systems (VCS) are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Concurrent_Versions_System&#34;&gt;CVS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://source.android.com/setup/develop/repo&#34;&gt;Git-Repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;Mercurial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;scanner&#34;&gt;&amp;nbsp;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/scanner/src/main/kotlin&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/scanner.png&#34; alt=&#34;Scanner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This tool wraps underlying license / copyright scanners with a common API so all supported scanners can be used in the same way to easily run them and compare their results. If passed an ORT result file with an analyzer result (&lt;code&gt;-i&lt;/code&gt;), the &lt;em&gt;scanner&lt;/em&gt; will automatically download the sources of the dependencies via the &lt;em&gt;downloader&lt;/em&gt; and scan them afterwards.&lt;/p&gt; &#xA;&lt;p&gt;We recommend to use ORT with one of the following scanners as their integration has been thoroughly tested (in alphabetical order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fossid.com/&#34;&gt;FossID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nexB/scancode-toolkit&#34;&gt;ScanCode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, the following reference implementations exist (in alphabetical order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amzn/askalono&#34;&gt;Askalono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boyter/lc&#34;&gt;lc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benbalter/licensee&#34;&gt;Licensee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.scanoss.com/&#34;&gt;SCANOSS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a comparison of some of these, see this &lt;a href=&#34;https://osr.cs.fau.de/2019/08/07/final-thesis-a-comparison-study-of-open-source-license-crawler/&#34;&gt;Bachelor Thesis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Storage Backends&lt;/h2&gt; &#xA;&lt;p&gt;In order to not download or scan any previously scanned sources again, or to reuse scan results generated via other services, the &lt;em&gt;scanner&lt;/em&gt; can be configured to use so-called storage backends. Before processing a package, it checks whether compatible scan results are already available in one of the storages declared; if this is the case, they are fetched and reused. Otherwise, the package&#39;s source code is downloaded and scanned. Afterwards, the new scan results can be put into a storage for later reuse.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to configure multiple storages to read scan results from or to write scan results to. For reading, the declaration order in the configuration is important, as the scanner queries the storages in this order and uses the first matching result. This allows a fine-grained control over the sources, from which existing scan results are loaded. For instance, you can specify that the scanner checks first whether results for a specific package are available in a local storage on the file system. If this is not the case, it can look up the package in a Postgres database. If this does not yield any results either, a service like &lt;a href=&#34;https://clearlydefined.io&#34;&gt;ClearlyDefined&lt;/a&gt; can be queried. Only if all of these steps fail, the scanner has to actually process the package.&lt;/p&gt; &#xA;&lt;p&gt;When storing a newly generated scan result the scanner invokes all the storages declared as writers. The storage operation is considered successful if all writer storages could successfully persist the scan result.&lt;/p&gt; &#xA;&lt;p&gt;The configuration of storage backends is located in the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#ort-configuration-file&#34;&gt;ORT configuration file&lt;/a&gt;. (For the general structure of this file and the set of options available refer to the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/model/src/main/resources/reference.conf&#34;&gt;reference configuration&lt;/a&gt;.) The file has a section named &lt;em&gt;storages&lt;/em&gt; that lists all the storage backends and assigns them a name. Each storage backend is of a specific type and needs to be configured with type-specific properties. The different types of storage backends supported by ORT are described below.&lt;/p&gt; &#xA;&lt;p&gt;After the declaration of the storage backends, the configuration file has to specify which ones of them the scanner should use for looking up existing scan results or to store new results. This is done in two list properties named &lt;em&gt;storageReaders&lt;/em&gt; and &lt;em&gt;storageWriters&lt;/em&gt;. The lists reference the names of the storage backends declared in the &lt;em&gt;storages&lt;/em&gt; section. The scanner invokes the storage backends in the order they appear in the lists; so for readers, this defines a priority for look-up operations. Each storage backend can act as a reader; however, some types do not support updates and thus cannot serve as writers. If a storage backend is referenced both as reader and writer, the scanner creates only a single instance of this storage class.&lt;/p&gt; &#xA;&lt;p&gt;The following subsections describe the different storage backend implementations supported by ORT. Note that the name of a storage entry (like &lt;code&gt;fileBasedStorage&lt;/code&gt;) can be freely chosen. That name is then used to refer to the storage from the &lt;code&gt;storageReaders&lt;/code&gt; and &lt;code&gt;storageWriters&lt;/code&gt; sections.&lt;/p&gt; &#xA;&lt;h3&gt;Local File Storage&lt;/h3&gt; &#xA;&lt;p&gt;By default, the &lt;em&gt;scanner&lt;/em&gt; stores scan results on the local file system in the current user&#39;s home directory (i.e. &lt;code&gt;~/.ort/scanner/scan-results&lt;/code&gt;) for later reuse. Settings like the storage directory and the compression flag can be customized in the ORT configuration file (&lt;code&gt;-c&lt;/code&gt;) with a respective storage configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;ort {&#xA;  scanner {&#xA;    storages {&#xA;      fileBasedStorage {&#xA;        backend {&#xA;          localFileStorage {&#xA;            directory = &#34;/tmp/ort/scan-results&#34;&#xA;            compression = false&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;&#xA;    storageReaders: [&#xA;      &#34;fileBasedStorage&#34;&#xA;    ]&#xA;&#xA;    storageWriters: [&#xA;      &#34;fileBasedStorage&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP Storage&lt;/h3&gt; &#xA;&lt;p&gt;Any HTTP file server can be used to store scan results. Custom headers can be configured to provide authentication credentials. For example, to use Artifactory to store scan results, use the following configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;ort {&#xA;  scanner {&#xA;    storages {&#xA;      artifactoryStorage {&#xA;        backend {&#xA;          httpFileStorage {&#xA;            url = &#34;https://artifactory.domain.com/artifactory/repository/scan-results&#34;&#xA;            headers {&#xA;              X-JFrog-Art-Api = &#34;api-token&#34;&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;&#xA;    storageReaders: [&#xA;      &#34;artifactoryStorage&#34;&#xA;    ]&#xA;&#xA;    storageWriters: [&#xA;      &#34;artifactoryStorage&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PostgreSQL Storage&lt;/h3&gt; &#xA;&lt;p&gt;To use PostgreSQL for storing scan results you need at least version 9.4, create a database with the &lt;code&gt;client_encoding&lt;/code&gt; set to &lt;code&gt;UTF8&lt;/code&gt;, and a configuration like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;ort {&#xA;  scanner {&#xA;    storages {&#xA;      postgresStorage {&#xA;        url = &#34;jdbc:postgresql://example.com:5444/database&#34;&#xA;        schema = &#34;public&#34;&#xA;        username = &#34;username&#34;&#xA;        password = &#34;password&#34;&#xA;        sslmode = &#34;verify-full&#34;&#xA;      }&#xA;    }&#xA;&#xA;    storageReaders: [&#xA;      &#34;postgresStorage&#34;&#xA;    ]&#xA;&#xA;    storageWriters: [&#xA;      &#34;postgresStorage&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The database needs to exist. If the schema is set to something else than the default of &lt;code&gt;public&lt;/code&gt;, it needs to exist and be accessible by the configured username.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;scanner&lt;/em&gt; will itself create a table called &lt;code&gt;scan_results&lt;/code&gt; and store the data in a &lt;a href=&#34;https://www.postgresql.org/docs/current/datatype-json.html&#34;&gt;jsonb&lt;/a&gt; column.&lt;/p&gt; &#xA;&lt;p&gt;If you do not want to use SSL set the &lt;code&gt;sslmode&lt;/code&gt; to &lt;code&gt;disable&lt;/code&gt;, other possible values are explained in the &lt;a href=&#34;https://jdbc.postgresql.org/documentation/head/ssl-client.html&#34;&gt;documentation&lt;/a&gt;. For other supported configuration options see &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/model/src/main/kotlin/config/ScanStorageConfiguration.kt&#34;&gt;ScanStorageConfiguration.kt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ClearlyDefined Storage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://clearlydefined.io&#34;&gt;ClearlyDefined&lt;/a&gt; is a service offering curated metadata for Open Source components. This includes scan results that can be used by ORT&#39;s &lt;em&gt;scanner&lt;/em&gt; tool (if they have been generated by a compatible scanner version with a suitable configuration). This storage backend queries the ClearlyDefined service for scan results of the packages to be processed. It is read-only; so it will not upload any new scan results to ClearlyDefined. In the configuration the URL of the ClearlyDefined service needs to be set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;ort {&#xA;  scanner {&#xA;    storages {&#xA;      clearlyDefined {&#xA;        serverUrl = &#34;https://api.clearlydefined.io&#34;&#xA;      }&#xA;    }&#xA;&#xA;    storageReaders: [&#xA;      &#34;clearlyDefined&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;advisor&#34;&gt;&amp;nbsp;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/advisor/src/main/kotlin&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/advisor.png&#34; alt=&#34;Advisor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;advisor&lt;/em&gt; retrieves security advisories from configured services. It requires the analyzer result as an input. For all the packages identified by the analyzer, it queries the services configured for known security vulnerabilities. The vulnerabilities returned by these services are then stored in the output result file together with additional information like the source of the data and a severity (if available).&lt;/p&gt; &#xA;&lt;p&gt;Multiple providers for security advisories are available. The providers require specific configuration in the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/model/src/main/resources/reference.conf&#34;&gt;ORT configuration file&lt;/a&gt;, which needs to be placed in the &lt;em&gt;advisor&lt;/em&gt; section. When executing the advisor the providers to enable are selected with the &lt;code&gt;--advisors&lt;/code&gt; option (or its short alias &lt;code&gt;-a&lt;/code&gt;); here a comma-separated list with provider IDs is expected. The following sections describe the providers supported by the advisor:&lt;/p&gt; &#xA;&lt;h2&gt;NexusIQ&lt;/h2&gt; &#xA;&lt;p&gt;A security data provider that queries &lt;a href=&#34;https://help.sonatype.com/iqserver&#34;&gt;Nexus IQ Server&lt;/a&gt;. In the configuration, the URL where Nexus IQ Server is running and the credentials to authenticate need to be provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;ort {&#xA;  advisor {&#xA;    nexusIq {&#xA;      serverUrl = &#34;https://nexusiq.ossreviewtoolkit.org&#34;&#xA;      username = myUser&#xA;      password = myPassword&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable this provider, pass &lt;code&gt;-a NexusIQ&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;h2&gt;OSS Index&lt;/h2&gt; &#xA;&lt;p&gt;This vulnerability provider does not require any further configuration as it uses the public service at &lt;a href=&#34;https://ossindex.sonatype.org/&#34;&gt;https://ossindex.sonatype.org/&lt;/a&gt;. Before using this provider, please ensure to comply with its &lt;a href=&#34;https://ossindex.sonatype.org/tos&#34;&gt;Terms of Service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To enable this provider, pass &lt;code&gt;-a OssIndex&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;h2&gt;VulnerableCode&lt;/h2&gt; &#xA;&lt;p&gt;This provider obtains information about security vulnerabilities from a &lt;a href=&#34;https://github.com/nexB/vulnerablecode&#34;&gt;VulnerableCode&lt;/a&gt; instance. The configuration is limited to the server URL, as authentication is not required:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;ort {&#xA;  advisor {&#xA;    vulnerableCode {&#xA;      serverUrl = &#34;http://localhost:8000&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable this provider, pass &lt;code&gt;-a VulnerableCode&lt;/code&gt; on the command line.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;evaluator&#34;&gt;&amp;nbsp;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/evaluator/src/main/kotlin&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/evaluator.png&#34; alt=&#34;Evaluator&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;evaluator&lt;/em&gt; is used to perform custom license policy checks on scan results. The rules to check against are implemented as Kotlin scripts with a dedicated DSL. See &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/examples/evaluator-rules/src/main/resources/example.rules.kts&#34;&gt;example.rules.kts&lt;/a&gt; for an example rules script. The script is wrapped into a minimal &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/examples/evaluator-rules&#34;&gt;evaluator-rules&lt;/a&gt; project which enables auto-completion.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;reporter&#34;&gt;&amp;nbsp;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/reporter/src/main/kotlin&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/logos/reporter.png&#34; alt=&#34;Reporter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;reporter&lt;/em&gt; generates a wide variety of documents in different formats from ORT result files. Currently, the following formats are supported (reporter names are case-insensitive):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/docs/reporters/AsciiDocTemplateReporter.md&#34;&gt;AsciiDoc Template&lt;/a&gt; (&lt;code&gt;-f AsciiDocTemplate&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Content customizable with &lt;a href=&#34;https://freemarker.apache.org/&#34;&gt;Apache Freemarker&lt;/a&gt; templates and &lt;a href=&#34;https://asciidoc.org/&#34;&gt;AsciiDoc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;PDF style customizable with Asciidoctor &lt;a href=&#34;https://github.com/asciidoctor/asciidoctor-pdf/raw/master/docs/theming-guide.adoc&#34;&gt;PDF themes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Supports multiple AsciiDoc backends: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;PDF (&lt;code&gt;-f PdfTemplate&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;HTML (&lt;code&gt;-f HtmlTemplate&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;XHTML (&lt;code&gt;-f XHtmlTemplate&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;DocBook (&lt;code&gt;-f DocBookTemplate&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;Man page (&lt;code&gt;-f ManPageTemplate&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;AsciiDoc (&lt;code&gt;-f AdocTemplate&lt;/code&gt;): Does not convert the created AsciiDoc files but writes the generated files as reports.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.boschrexroth.com/microsites/ctrlx-automation/&#34;&gt;ctrlX AUTOMATION&lt;/a&gt; platform &lt;a href=&#34;https://github.com/boschrexroth/json-schema/tree/master/ctrlx-automation/ctrlx-core/apps/fossinfo&#34;&gt;FOSS information&lt;/a&gt; (&lt;code&gt;-f CtrlXAutomation&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cyclonedx.org/&#34;&gt;CycloneDX&lt;/a&gt; BOM (&lt;code&gt;-f CycloneDx&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://products.office.com/excel&#34;&gt;Excel&lt;/a&gt; sheet (&lt;code&gt;-f Excel&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html#artifactsreportslicense_scanning-ultimate&#34;&gt;GitLabLicenseModel&lt;/a&gt; (&lt;code&gt;-f GitLabLicenseModel&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A nice tutorial video has been &lt;a href=&#34;https://youtu.be/dNmH_kYJ34g&#34;&gt;published&lt;/a&gt; by GitLab engineer @mokhan.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://infra.apache.org/licensing-howto.html&#34;&gt;NOTICE&lt;/a&gt; file in two variants &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;List license texts and copyrights by package (&lt;code&gt;-f NoticeTemplate&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Summarize all license texts and copyrights (&lt;code&gt;-f NoticeTemplate -O NoticeTemplate=template.id=summary&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Customizable with &lt;a href=&#34;https://freemarker.apache.org/&#34;&gt;Apache Freemarker&lt;/a&gt; templates&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Opossum input that can be visualized and edited in the &lt;a href=&#34;https://github.com/opossum-tool/opossumUI&#34;&gt;OpossumUI&lt;/a&gt; (&lt;code&gt;-f Opossum&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spdx.dev/specifications/&#34;&gt;SPDX Document&lt;/a&gt;, version 2.2 (&lt;code&gt;-f SpdxDocument&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Static HTML (&lt;code&gt;-f StaticHtml&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Web App (&lt;code&gt;-f WebApp&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;System requirements&lt;/h1&gt; &#xA;&lt;p&gt;ORT is being continuously used on Linux, Windows and macOS by the &lt;a href=&#34;https://github.com/orgs/oss-review-toolkit/people&#34;&gt;core development team&lt;/a&gt;, so these operating systems are considered to be well supported.&lt;/p&gt; &#xA;&lt;p&gt;To run the ORT binaries (also see &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/#from-binaries&#34;&gt;Installation from binaries&lt;/a&gt;) at least Java 11 is required. Memory and CPU requirements vary depending on the size and type of project(s) to analyze / scan, but the general recommendation is to configure Java with 8 GiB of memory (&lt;code&gt;-Xmx=8g&lt;/code&gt;) and to use a CPU with at least 4 cores.&lt;/p&gt; &#xA;&lt;p&gt;If ORT requires external tools in order to analyze a project, these tools are listed by the &lt;code&gt;ort requirements&lt;/code&gt; command. If a package manager is not list listed there, support for it is integrated directly into ORT and does not require any external tools to be installed.&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;ORT is written in &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt; and uses &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; as the build system, with &lt;a href=&#34;https://docs.gradle.org/current/userguide/kotlin_dsl.html&#34;&gt;Kotlin script&lt;/a&gt; instead of Groovy as the DSL.&lt;/p&gt; &#xA;&lt;p&gt;When developing on the command line, use the committed &lt;a href=&#34;https://docs.gradle.org/current/userguide/gradle_wrapper.html&#34;&gt;Gradle wrapper&lt;/a&gt; to bootstrap Gradle in the configured version and execute any given tasks. The most important tasks for this project are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Task&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;assemble&lt;/td&gt; &#xA;   &lt;td&gt;Build the JAR artifacts for all projects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;detekt&lt;/td&gt; &#xA;   &lt;td&gt;Run static code analysis on all projects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;test&lt;/td&gt; &#xA;   &lt;td&gt;Run unit tests for all projects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;funTest&lt;/td&gt; &#xA;   &lt;td&gt;Run functional tests for all projects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;installDist&lt;/td&gt; &#xA;   &lt;td&gt;Build all projects and install the start scripts for distribution&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;All contributions need to pass the &lt;code&gt;detekt&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;funTest&lt;/code&gt; checks before they can be merged.&lt;/p&gt; &#xA;&lt;p&gt;For IDE development we recommend the &lt;a href=&#34;https://www.jetbrains.com/idea/download/&#34;&gt;IntelliJ IDEA Community Edition&lt;/a&gt; which can directly import the Gradle build files. After cloning the project&#39;s source code recursively, simply run IDEA and use the following steps to import the project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;From the wizard dialog: Select &lt;em&gt;Import Project&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;From a running IDEA instance: Select &lt;em&gt;File&lt;/em&gt; -&amp;gt; &lt;em&gt;New&lt;/em&gt; -&amp;gt; &lt;em&gt;Project from Existing Sources...&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Browse to ORT&#39;s source code directory and select either the &lt;code&gt;build.gradle.kts&lt;/code&gt; or the &lt;code&gt;settings.gradle.kts&lt;/code&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the &lt;em&gt;Import Project from Gradle&lt;/em&gt; dialog select &lt;em&gt;Use auto-import&lt;/em&gt; and leave all other settings at their defaults.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;To set up a basic run configuration for debugging, navigate to &lt;code&gt;OrtMain.kt&lt;/code&gt; in the &lt;code&gt;cli&lt;/code&gt; module and look for the &lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;)&lt;/code&gt; function. In the gutter next to it, a green &#34;Play&#34; icon should be displayed. Click on it and select &lt;code&gt;Run &#39;OrtMainKt&#39;&lt;/code&gt; to run the entry point, which implicitly creates a run configuration. Double-check that running ORT without any arguments will simply show the command line help in IDEA&#39;s &lt;em&gt;Run&lt;/em&gt; tool window. Finally, edit the created run configuration to your needs, e.g. by adding an argument and options to run a specific ORT sub-command.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;For running tests and individual test cases from the IDE, the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/14080-kotest&#34;&gt;kotest plugin&lt;/a&gt; needs to be installed. Afterwards tests can be run via the green &#34;Play&#34; icon from the gutter as described above.&lt;/p&gt; &#xA;&lt;h1&gt;Want to Help or have Questions?&lt;/h1&gt; &#xA;&lt;p&gt;All contributions are welcome. If you are interested in contributing, please read our &lt;a href=&#34;https://github.com/oss-review-toolkit/.github/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;, and to get quick answers to any of your questions we recommend you &lt;a href=&#34;https://join.slack.com/t/ort-talk/shared_invite/enQtMzk3MDU5Njk0Njc1LThiNmJmMjc5YWUxZTU4OGI5NmY3YTFlZWM5YTliZmY5ODc0MGMyOWIwYmRiZWFmNGMzOWY2NzVhYTI0NTJkNmY&#34;&gt;join our Slack community&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (C) 2017-2022 HERE Europe B.V.&lt;br&gt; Copyright (C) 2019-2020 Bosch Software Innovations GmbH&lt;br&gt; Copyright (C) 2020-2022 Bosch.IO GmbH&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/oss-review-toolkit/ort/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file in the root of this project for license details.&lt;/p&gt; &#xA;&lt;p&gt;OSS Review Toolkit (ORT) is a &lt;a href=&#34;https://www.linuxfoundation.org&#34;&gt;Linux Foundation project&lt;/a&gt; and part of &lt;a href=&#34;https://automatecompliance.org/&#34;&gt;ACT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gedoor/legado</title>
    <updated>2022-06-26T02:15:00Z</updated>
    <id>tag:github.com,2022-06-26:/gedoor/legado</id>
    <link href="https://github.com/gedoor/legado" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ÈòÖËØª3.0, ÈòÖËØªÊòØ‰∏ÄÊ¨æÂèØ‰ª•Ëá™ÂÆö‰πâÊù•Ê∫êÈòÖËØªÁΩëÁªúÂÜÖÂÆπÁöÑÂ∑•ÂÖ∑Ôºå‰∏∫ÂπøÂ§ßÁΩëÁªúÊñáÂ≠¶Áà±Â•ΩËÄÖÊèê‰æõ‰∏ÄÁßçÊñπ‰æø„ÄÅÂø´Êç∑ËàíÈÄÇÁöÑËØïËØª‰ΩìÈ™å„ÄÇ&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=io.legado.play.release&#34;&gt;&lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/icon_android.png&#34; alt=&#34;icon_android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://data.newrank.cn/m/s.html?s=NykyOzI9MS5LNQ%3D%3D&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ÂæÆ‰ø°ÂÖ≥Ê≥®‚ÄúÂºÄÊ∫êÈòÖËØª‚ÄùÂÖ¨‰ºóÂè∑-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;125&#34; height=&#34;125&#34; src=&#34;https://github.com/gedoor/legado/raw/master/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png&#34; alt=&#34;legado&#34;&gt; &#xA; &lt;p&gt;Legado / ÂºÄÊ∫êÈòÖËØª &lt;br&gt; &lt;a href=&#34;https://gedoor.github.io&#34; target=&#34;_blank&#34;&gt;gedoor.github.io&lt;/a&gt; / &lt;a href=&#34;https://www.legado.top/&#34; target=&#34;_blank&#34;&gt;legado.top&lt;/a&gt; &lt;br&gt; Legado is a free and open source novel reader for Android.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#contents&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Contents:-696969.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Function-%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Function-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Download-%E4%B8%8B%E8%BD%BD-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Download-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Community-%E4%BA%A4%E6%B5%81%E7%A4%BE%E5%8C%BA-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Community-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#API-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-API-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Other-%E5%85%B6%E4%BB%96-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Other-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Grateful-%E6%84%9F%E8%B0%A2-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Grateful-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Interface-%E7%95%8C%E9%9D%A2-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Interface-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Êñ∞Áî®Êà∑Ôºü&lt;/p&gt; &#xA; &lt;p&gt;ËΩØ‰ª∂‰∏çÊèê‰æõÂÜÖÂÆπÔºåÈúÄË¶ÅÊÇ®Ëá™Â∑±ÊâãÂä®Ê∑ªÂä†Ôºå‰æãÂ¶ÇÂØºÂÖ•‰π¶Ê∫êÁ≠â„ÄÇ ÁúãÁúã &lt;a href=&#34;https://www.yuque.com/legado/wiki&#34;&gt;ÂÆòÊñπÂ∏ÆÂä©ÊñáÊ°£&lt;/a&gt;Ôºå‰πüËÆ∏ÈáåÈù¢Â∞±Êúâ‰Ω†Ë¶ÅÁöÑÁ≠îÊ°à„ÄÇ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Function-‰∏ªË¶ÅÂäüËÉΩ &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Function-%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Function-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;English&lt;/summary&gt; 1. Online reading from a variety of sources.&#xA; &lt;br&gt; 2. Local reading of downloaded content.&#xA; &lt;br&gt; 3. A configurable reader with multiple viewers, reading directions and other settings. &#xA; &lt;br&gt; 4. Categories to organize your library.&#xA; &lt;br&gt; 5. Light and dark themes.&#xA; &lt;br&gt; 6. Schedule updating your library for new chapters.&#xA; &lt;br&gt; 7. read offline or to your desired cloud service &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;‰∏≠Êñá&lt;/summary&gt; 1.Ëá™ÂÆö‰πâ‰π¶Ê∫êÔºåËá™Â∑±ËÆæÁΩÆËßÑÂàôÔºåÊäìÂèñÁΩëÈ°µÊï∞ÊçÆÔºåËßÑÂàôÁÆÄÂçïÊòìÊáÇÔºåËΩØ‰ª∂ÂÜÖÊúâËßÑÂàôËØ¥Êòé„ÄÇ&#xA; &lt;br&gt; 2.ÂàóË°®‰π¶Êû∂ÔºåÁΩëÊ†º‰π¶Êû∂Ëá™Áî±ÂàáÊç¢„ÄÇ&#xA; &lt;br&gt; 3.‰π¶Ê∫êËßÑÂàôÊîØÊåÅÊêúÁ¥¢ÂèäÂèëÁé∞ÔºåÊâÄÊúâÊâæ‰π¶Áúã‰π¶ÂäüËÉΩÂÖ®ÈÉ®Ëá™ÂÆö‰πâÔºåÊâæ‰π¶Êõ¥Êñπ‰æø„ÄÇ&#xA; &lt;br&gt; 4.ËÆ¢ÈòÖÂÜÖÂÆπ,ÂèØ‰ª•ËÆ¢ÈòÖÊÉ≥ÁúãÁöÑ‰ªª‰ΩïÂÜÖÂÆπ,Áúã‰Ω†ÊÉ≥Áúã&#xA; &lt;br&gt; 5.ÊîØÊåÅÊõøÊç¢ÂáÄÂåñÔºåÂéªÈô§ÂπøÂëäÊõøÊç¢ÂÜÖÂÆπÂæàÊñπ‰æø„ÄÇ&#xA; &lt;br&gt; 6.ÊîØÊåÅÊú¨Âú∞TXT„ÄÅEPUBÈòÖËØªÔºåÊâãÂä®ÊµèËßàÔºåÊô∫ËÉΩÊâ´Êèè„ÄÇ&#xA; &lt;br&gt; 7.ÊîØÊåÅÈ´òÂ∫¶Ëá™ÂÆö‰πâÈòÖËØªÁïåÈù¢ÔºåÂàáÊç¢Â≠ó‰Ωì„ÄÅÈ¢úËâ≤„ÄÅËÉåÊôØ„ÄÅË°åË∑ù„ÄÅÊÆµË∑ù„ÄÅÂä†Á≤ó„ÄÅÁÆÄÁπÅËΩ¨Êç¢Á≠â„ÄÇ&#xA; &lt;br&gt; 8.ÊîØÊåÅÂ§öÁßçÁøªÈ°µÊ®°ÂºèÔºåË¶ÜÁõñ„ÄÅ‰ªøÁúü„ÄÅÊªëÂä®„ÄÅÊªöÂä®Á≠â„ÄÇ&#xA; &lt;br&gt; 9.ËΩØ‰ª∂ÂºÄÊ∫êÔºåÊåÅÁª≠‰ºòÂåñÔºåÊó†ÂπøÂëä„ÄÇ &#xA;&lt;/details&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Download-‰∏ãËΩΩ &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Download-%E4%B8%8B%E8%BD%BD-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Download-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h4&gt;Android-ÂÆâÂçì&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gedoor/legado/releases/latest&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=io.legado.play.release&#34;&gt;Google play - $1.99&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.coolapk.com/apk/io.legado.app.release&#34;&gt;Coolapk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cdn.jsdelivr.net/gh/gedoor/release@release/&#34;&gt;Jsdelivr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kunfei.lanzoui.com/b0f810h4b&#34;&gt;#Beta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apt.izzysoft.de/fdroid/index/apk/io.legado.app.release&#34;&gt;IzzyOnDroid F-Droid Repository&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;IOS-ËãπÊûú&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÂáÜÂ§á‰∏≠(No release) - &lt;a href=&#34;https://github.com/gedoor/YueDuFlutter&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Community-‰∫§ÊµÅÁ§æÂå∫ &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Community-%E4%BA%A4%E6%B5%81%E7%A4%BE%E5%8C%BA-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Community-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h4&gt;Telegram&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/yueduguanfang&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-%E7%BE%A4%E7%BB%84-blue&#34; alt=&#34;Telegram-group&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/legado_channels&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-%E9%A2%91%E9%81%93-blue&#34; alt=&#34;Telegram-channel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Discord&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/VtUfRyzRXn&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/560731361414086666?color=%235865f2&amp;amp;label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Other&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.yuque.com/legado/wiki/community&#34;&gt;https://www.yuque.com/legado/wiki/community&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;API &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#API-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-API-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÈòÖËØª3.0 Êèê‰æõ‰∫Ü2ÁßçÊñπÂºèÁöÑAPIÔºö&lt;code&gt;WebÊñπÂºè&lt;/code&gt;Âíå&lt;code&gt;Content ProviderÊñπÂºè&lt;/code&gt;„ÄÇÊÇ®ÂèØ‰ª•Âú®&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/api.md&#34;&gt;ËøôÈáå&lt;/a&gt;Ê†πÊçÆÈúÄË¶ÅËá™Ë°åË∞ÉÁî®„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ÂèØÈÄöËøáurlÂî§Ëµ∑ÈòÖËØªËøõË°å‰∏ÄÈîÆÂØºÂÖ•,urlÊ†ºÂºè: legado://import/{path}?src={url}&lt;/li&gt; &#xA; &lt;li&gt;pathÁ±ªÂûã: bookSource,rssSource,replaceRule,textTocRule,httpTTS,theme,readConfig&lt;/li&gt; &#xA; &lt;li&gt;pathÁ±ªÂûãËß£Èáä: ‰π¶Ê∫ê,ËÆ¢ÈòÖÊ∫ê,ÊõøÊç¢ËßÑÂàô,Êú¨Âú∞txtÂ∞èËØ¥ÁõÆÂΩïËßÑÂàô,Âú®Á∫øÊúóËØªÂºïÊìé,‰∏ªÈ¢ò,ÈòÖËØªÊéíÁâà&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Other-ÂÖ∂‰ªñ &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Other-%E5%85%B6%E4%BB%96-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Other-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h5&gt;ÂÖçË¥£Â£∞Êòé&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gedoor.github.io/about.html&#34;&gt;https://gedoor.github.io/about.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;ÈòÖËØª3.0&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alanskycn.gitee.io/teachme&#34;&gt;‰π¶Ê∫êËßÑÂàô&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/app/src/main/assets/updateLog.md&#34;&gt;Êõ¥Êñ∞Êó•Âøó&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/app/src/main/assets/help/appHelp.md&#34;&gt;Â∏ÆÂä©ÊñáÊ°£&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gedoor/legado_web_bookshelf&#34;&gt;webÁ´Ø&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Grateful-ÊÑüË∞¢ &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Grateful-%E6%84%9F%E8%B0%A2-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Grateful-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;org.jsoup:jsoup&lt;/li&gt; &#xA;  &lt;li&gt;cn.wanghaomiao:JsoupXpath&lt;/li&gt; &#xA;  &lt;li&gt;com.jayway.jsonpath:json-path&lt;/li&gt; &#xA;  &lt;li&gt;com.github.gedoor:rhino-android&lt;/li&gt; &#xA;  &lt;li&gt;com.squareup.okhttp3:okhttp&lt;/li&gt; &#xA;  &lt;li&gt;com.github.bumptech.glide:glide&lt;/li&gt; &#xA;  &lt;li&gt;org.nanohttpd:nanohttpd&lt;/li&gt; &#xA;  &lt;li&gt;org.nanohttpd:nanohttpd-websocket&lt;/li&gt; &#xA;  &lt;li&gt;cn.bingoogolapple:bga-qrcode-zxing&lt;/li&gt; &#xA;  &lt;li&gt;com.jaredrummler:colorpicker&lt;/li&gt; &#xA;  &lt;li&gt;org.apache.commons:commons-text&lt;/li&gt; &#xA;  &lt;li&gt;io.noties.markwon:core&lt;/li&gt; &#xA;  &lt;li&gt;io.noties.markwon:image-glide&lt;/li&gt; &#xA;  &lt;li&gt;com.hankcs:hanlp&lt;/li&gt; &#xA;  &lt;li&gt;com.positiondev.epublib:epublib-core&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Interface-ÁïåÈù¢ &lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#Interface-%E7%95%8C%E9%9D%A2-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Interface-F5F5F5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/%E9%98%85%E8%AF%BB%E7%AE%80%E4%BB%8B1.jpg&#34; width=&#34;270&#34;&gt;&lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/%E9%98%85%E8%AF%BB%E7%AE%80%E4%BB%8B2.jpg&#34; width=&#34;270&#34;&gt;&lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/%E9%98%85%E8%AF%BB%E7%AE%80%E4%BB%8B3.jpg&#34; width=&#34;270&#34;&gt; &lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/%E9%98%85%E8%AF%BB%E7%AE%80%E4%BB%8B4.jpg&#34; width=&#34;270&#34;&gt;&lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/%E9%98%85%E8%AF%BB%E7%AE%80%E4%BB%8B5.jpg&#34; width=&#34;270&#34;&gt;&lt;img src=&#34;https://github.com/gedoor/gedoor.github.io/raw/master/images/%E9%98%85%E8%AF%BB%E7%AE%80%E4%BB%8B6.jpg&#34; width=&#34;270&#34;&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/gedoor/legado/master/#readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-ËøîÂõûÈ°∂ÈÉ®-orange.svg&#34; alt=&#34;#&#34; align=&#34;right&#34;&gt; &lt;/a&gt;</summary>
  </entry>
</feed>