<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-16T01:58:40Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JetBrains/compose-multiplatform-ios-android-template</title>
    <updated>2023-04-16T01:58:40Z</updated>
    <id>tag:github.com,2023-04-16:/JetBrains/compose-multiplatform-ios-android-template</id>
    <link href="https://github.com/JetBrains/compose-multiplatform-ios-android-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compose Multiplatform iOS+Android Application project template&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;http://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform&#34;&gt;Compose Multiplatform&lt;/a&gt; mobile application&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Compose Multiplatform for iOS is in Alpha. It may change incompatibly and require manual migration in the future. We would appreciate your feedback on it in the public Slack channel &lt;a href=&#34;https://kotlinlang.slack.com/archives/C0346LWVBJ4/p1678888063176359&#34;&gt;#compose-ios&lt;/a&gt;. If you face any issues, please report them on &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can use this template to start developing your own &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform#readme&#34;&gt;Compose Multiplatform&lt;/a&gt; mobile application targeting Android and iOS. Follow our tutorial below to get your first Compose Multiplatform app up and running. The result will be a &lt;a href=&#34;https://kotlinlang.org/docs/multiplatform.html&#34;&gt;Kotlin Multiplatform&lt;/a&gt; project that uses Compose Multiplatform UI framework.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/banner.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to create an application targeting desktop platforms – Windows, macOS, and Linux, use the &lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform-desktop-template#readme&#34;&gt;Compose Multiplatform for Desktop template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Set up the environment&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; You need a Mac with macOS to write and run iOS-specific code on simulated or real devices. This is an Apple requirement.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To work with this template, you need the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A machine running a recent version of macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/xcode/id497799835&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile&#34;&gt;Kotlin Multiplatform Mobile plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/native-cocoapods.html&#34;&gt;CocoaPods dependency manager&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Check your environment&lt;/h3&gt; &#xA;&lt;p&gt;Before you start, use the &lt;a href=&#34;https://github.com/Kotlin/kdoctor&#34;&gt;KDoctor&lt;/a&gt; tool to ensure that your development environment is configured correctly:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install KDoctor with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;brew install kdoctor&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run KDoctor in your terminal:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;kdoctor&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If everything is set up correctly, you&#39;ll see a valid output:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Environment diagnose (to see all details, use -v option):&#xA;[✓] Operation System&#xA;[✓] Java&#xA;[✓] Android Studio&#xA;[✓] Xcode&#xA;[✓] Cocoapods&#xA;&#xA;Conclusion:&#xA;  ✓ Your system is ready for Kotlin Multiplatform Mobile Development!&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Otherwise, KDoctor will highlight which parts of your setup still need configuration and suggest how to fix them.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Examine the project structure&lt;/h2&gt; &#xA;&lt;p&gt;Open the project in Android Studio and switch the view from &lt;strong&gt;Android&lt;/strong&gt; to &lt;strong&gt;Project&lt;/strong&gt; to see all the files and targets belonging to the project:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/open_project_view.png&#34; height=&#34;300px&#34;&gt; &#xA;&lt;p&gt;Your Compose Multiplatform project includes three modules:&lt;/p&gt; &#xA;&lt;h3&gt;shared&lt;/h3&gt; &#xA;&lt;p&gt;This is a Kotlin module that contains the logic common for both Android and iOS applications, the code you share between platforms.&lt;/p&gt; &#xA;&lt;p&gt;This &lt;code&gt;shared&lt;/code&gt; module is also where you write your Compose Multiplatform code. In &lt;code&gt;shared/src/commonMain/kotlin/App.kt&lt;/code&gt;, you can find the shared root &lt;code&gt;@Composable&lt;/code&gt; function for your app.&lt;/p&gt; &#xA;&lt;p&gt;It uses Gradle as the build system. You can add dependencies and change settings in &lt;code&gt;shared/build.gradle.kts&lt;/code&gt;. The &lt;code&gt;shared&lt;/code&gt; module builds into an Android library and an iOS framework.&lt;/p&gt; &#xA;&lt;h3&gt;androidApp&lt;/h3&gt; &#xA;&lt;p&gt;This is a Kotlin module that builds into an Android application. It uses Gradle as the build system. The &lt;code&gt;androidApp&lt;/code&gt; module depends on and uses the &lt;code&gt;shared&lt;/code&gt; module as a regular Android library.&lt;/p&gt; &#xA;&lt;h3&gt;iosApp&lt;/h3&gt; &#xA;&lt;p&gt;This is an Xcode project that builds into an iOS application. It depends on and uses the &lt;code&gt;shared&lt;/code&gt; module as a CocoaPods dependency.&lt;/p&gt; &#xA;&lt;h2&gt;Run your application&lt;/h2&gt; &#xA;&lt;h3&gt;On Android&lt;/h3&gt; &#xA;&lt;p&gt;To run your application on an Android emulator:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure you have an Android virtual device available. Otherwise, &lt;a href=&#34;https://developer.android.com/studio/run/managing-avds#createavd&#34;&gt;create one&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the list of run configurations, select &lt;code&gt;androidApp&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose your virtual device and click &lt;strong&gt;Run&lt;/strong&gt;:&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/run_on_android.png&#34; height=&#34;60px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/android_app_running.png&#34; height=&#34;200px&#34;&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Alternatively, use Gradle&lt;/summary&gt; &#xA; &lt;p&gt;To install an Android application on a real device Android device or an emulator, run &lt;code&gt;./gradlew installDebug&lt;/code&gt; in the terminal.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;On iOS&lt;/h3&gt; &#xA;&lt;h4&gt;Running on a simulator&lt;/h4&gt; &#xA;&lt;p&gt;To run your application on an iOS simulator in Android Studio, modify the &lt;code&gt;iosApp&lt;/code&gt; run configuration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In the list of run configurations, select &lt;strong&gt;Edit Configurations&lt;/strong&gt;:&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/edit_run_config.png&#34; height=&#34;200px&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to &lt;strong&gt;iOS Application&lt;/strong&gt; | &lt;strong&gt;iosApp&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the &lt;strong&gt;Execution target&lt;/strong&gt; list, select your target device. Click &lt;strong&gt;OK&lt;/strong&gt;:&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/target_device.png&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iosApp&lt;/code&gt; run configuration is now available. Click &lt;strong&gt;Run&lt;/strong&gt; next to your virtual device:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/hello_world_ios.png&#34; height=&#34;200px&#34;&gt; &#xA;&lt;h4&gt;Running on a real device&lt;/h4&gt; &#xA;&lt;p&gt;You can run your Compose Multiplatform application on a real iOS device for free. To do so, you&#39;ll need the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TEAM_ID&lt;/code&gt; associated with your &lt;a href=&#34;https://support.apple.com/en-us/HT204316&#34;&gt;Apple ID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The iOS device registered in Xcode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Before you continue, we suggest creating a simple &#34;Hello, world!&#34; project in Xcode to ensure you can successfully run apps on your device. You can follow the instructions below or watch this &lt;a href=&#34;https://youtu.be/bqu6BquVi2M?start=716&amp;amp;end=1399&#34;&gt;Standford CS193P lecture recording&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to create and run a simple project in Xcode&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;On the Xcode welcome screen, select &lt;strong&gt;Create a new project in Xcode&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;On the &lt;strong&gt;iOS&lt;/strong&gt; tab, choose the &lt;strong&gt;App&lt;/strong&gt; template. Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Specify the product name and keep other settings default. Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Select where to store the project on your computer and click &lt;strong&gt;Create&lt;/strong&gt;. You&#39;ll see an app that displays &#34;Hello, world!&#34; on the device screen.&lt;/li&gt; &#xA;  &lt;li&gt;At the top of your Xcode screen, click on a device name near the &lt;strong&gt;Run&lt;/strong&gt; button.&lt;/li&gt; &#xA;  &lt;li&gt;Plug in your device to the computer. You&#39;ll see this device in the list of run options.&lt;/li&gt; &#xA;  &lt;li&gt;Choose your device and click &lt;strong&gt;Run&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h5&gt;Finding your Team ID&lt;/h5&gt; &#xA;&lt;p&gt;In the terminal, run &lt;code&gt;kdoctor --team-ids&lt;/code&gt; to find your Team ID. KDoctor will list all Team IDs currently configured on your system, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;3ABC246XYZ (Max Sample)&#xA;ZABCW6SXYZ (SampleTech Inc.)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Alternative way of finding your Team ID&lt;/summary&gt; &#xA; &lt;p&gt;If KDoctor doesn&#39;t work for you, try this alternative method:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;In Android Studio, run the &lt;code&gt;iosApp&lt;/code&gt; configuration with the selected real device. The build should fail.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Go to Xcode and select &lt;strong&gt;Open a project or file&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Navigate to the &lt;code&gt;iosApp/iosApp.xcworkspace&lt;/code&gt; file of your project.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;In the left menu, select &lt;code&gt;iosApp&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Navigate to &lt;strong&gt;Signing &amp;amp; Capabilities&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;In the &lt;strong&gt;Team&lt;/strong&gt; list, select your personal team.&lt;/p&gt; &lt;p&gt;If you haven&#39;t set up your team yet, use the &lt;strong&gt;Add account&lt;/strong&gt; option and follow the steps.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;To run the application, set the &lt;code&gt;TEAM_ID&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the template, navigate to the &lt;code&gt;iosApp/Configuration/Config.xcconfig&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Set your &lt;code&gt;TEAM_ID&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Re-open the project in Android Studio. It should show the registered iOS device in the &lt;code&gt;iosApp&lt;/code&gt; run configuration.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Make your first changes&lt;/h2&gt; &#xA;&lt;p&gt;You can now make some changes in the code and see that they will be visible in both iOS and Android applications at once:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In Android Studio, navigate to the &lt;code&gt;shared/src/commonMain/kotlin/App.kt&lt;/code&gt; file. It&#39;s the common entry point for your Compose Multiplatform app.&lt;/p&gt; &lt;p&gt;Here, you see the code responsible for rendering the &#34;Hello, World!&#34; button and the animated Compose Multiplatform logo:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@OptIn(ExperimentalResourceApi::class)&#xA;@Composable&#xA;fun App() {&#xA;    MaterialTheme {&#xA;        var greetingText by remember { mutableStateOf(&#34;Hello, World!&#34;) }&#xA;        var showImage by remember { mutableStateOf(false) }&#xA;        Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#xA;            Button(onClick = {&#xA;                greetingText = &#34;Hello, ${getPlatformName()}&#34;&#xA;                showImage = !showImage&#xA;            }) {&#xA;                Text(greetingText)&#xA;            }&#xA;            AnimatedVisibility(showImage) {&#xA;                Image(&#xA;                    painterResource(&#34;compose-multiplatform.xml&#34;),&#xA;                    null&#xA;                )&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the shared code by adding a text field that will update the name displayed on the button:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;@OptIn(ExperimentalResourceApi::class)&#xA;@Composable&#xA;fun App() {&#xA;    MaterialTheme {&#xA;        var greetingText by remember { mutableStateOf(&#34;Hello, World!&#34;) }&#xA;        var showImage by remember { mutableStateOf(false) }&#xA;        Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {&#xA;            Button(onClick = {&#xA;                greetingText = &#34;Hello, ${getPlatformName()}&#34;&#xA;                showImage = !showImage&#xA;            }) {&#xA;                Text(greetingText)&#xA;            }&#xA;+           TextField(greetingText, onValueChange = { greetingText = it })&#xA;            AnimatedVisibility(showImage) {&#xA;                Image(&#xA;                    painterResource(&#34;compose-multiplatform.xml&#34;),&#xA;                    null&#xA;                )&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Re-run both &lt;code&gt;androidApp&lt;/code&gt; and &lt;code&gt;iosApp&lt;/code&gt; configurations. You&#39;ll see this change reflected in both the Android and iOS apps:&lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JetBrains/compose-multiplatform-ios-android-template/main/readme_images/text_field_added.png&#34; height=&#34;200px&#34;&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to configure the iOS application&lt;/h2&gt; &#xA;&lt;p&gt;To get a better understanding of this template&#39;s setup and learn how to configure the basic properties of your iOS app without Xcode, open the &lt;code&gt;iosApp/Configuration/Config.xcconfig&lt;/code&gt; file in Android Studio. The configuration file contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;APP_NAME&lt;/code&gt;, a target executable and an application bundle name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BUNDLE_ID&lt;/code&gt; that &lt;a href=&#34;https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleidentifier#discussion&#34;&gt;uniquely identifies the app throughout the system&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TEAM_ID&lt;/code&gt;, &lt;a href=&#34;https://developer.apple.com/help/account/manage-your-team/locate-your-team-id/#:~:text=A%20Team%20ID%20is%20a,developer%20in%20App%20Store%20Connect&#34;&gt;a unique identifier generated by Apple that&#39;s assigned to your team&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To configure the &lt;code&gt;APP_NAME&lt;/code&gt; option, open &lt;code&gt;Config.xcconfig&lt;/code&gt; in any text editor &lt;em&gt;before opening&lt;/em&gt; the project in Android Studio and set the desired name.&lt;/p&gt; &#xA;&lt;p&gt;If you need to change this option after you open the project in Android Studio, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Close the project in Android Studio.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./cleanup.sh&lt;/code&gt; in your terminal.&lt;/li&gt; &#xA; &lt;li&gt;Change the setting.&lt;/li&gt; &#xA; &lt;li&gt;Open the project in Android Studio again.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To configure advanced settings, use Xcode. After opening the project in Android Studio, go to Xcode and open the &lt;code&gt;iosApp/iosApp.xcworkspace&lt;/code&gt; file, and make changes.&lt;/p&gt; &#xA;&lt;h2&gt;Next steps&lt;/h2&gt; &#xA;&lt;p&gt;We encourage you to explore Compose Multiplatform further and try out more projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform#readme&#34;&gt;Learn about other cases where you can use the Compose Multiplatform UI framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform-desktop-template#readme&#34;&gt;Create an application targeting Windows, macOS, and Linux with Compose Multiplatform for Desktop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/raw/master/tutorials/README.md&#34;&gt;Complete more Compose Multiplatform tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/compose-multiplatform/raw/master/examples/README.md&#34;&gt;Explore some more advanced Compose Multiplatform example projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>GetStream/stream-chat-android</title>
    <updated>2023-04-16T01:58:40Z</updated>
    <id>tag:github.com,2023-04-16:/GetStream/stream-chat-android</id>
    <link href="https://github.com/GetStream/stream-chat-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💬 Android Chat SDK ➜ Stream Chat API. UI component libraries for chat apps. Kotlin &amp; Jetpack Compose messaging SDK for Android chat&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Official Android SDK for &lt;a href=&#34;https://getstream.io/chat/sdk/android/&#34;&gt;Stream Chat&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://getstream.io/tutorials/android-chat/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/docs/sdk-hero-android.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/GetStream/stream-chat-android/actions&#34;&gt;&lt;img src=&#34;https://github.com/GetStream/stream-chat-android/workflows/Build%20and%20test/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://android-arsenal.com/api?level=21&#34;&gt;&lt;img alt=&#34;API&#34; src=&#34;https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GetStream/stream-chat-android/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/GetStream/stream-chat-android&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This is the official Android SDK for &lt;a href=&#34;https://getstream.io/chat/sdk/android/&#34;&gt;Stream Chat&lt;/a&gt;, a service for building chat and messaging applications. This library includes both a low-level chat SDK and a set of reusable UI components. Most users start with the UI components, and fall back to the lower level API when they want to customize things.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re proud to say that we&#39;re the first Android Chat SDK that supports Jetpack Compose! We &lt;a href=&#34;https://github.com/GetStream/stream-chat-android/releases/tag/4.15.0&#34;&gt;released&lt;/a&gt; our Compose UI Components one day after the official Jetpack Compose 1.0 release and our team members have been working hard on it since then.&lt;/p&gt; &#xA;&lt;p&gt;Now it&#39;s mature and stable enough for us to officially recommend it for all new applications and all modern chat implementations. If you&#39;re looking for something highly customizable and extremely performant, check out our &lt;a href=&#34;https://getstream.io/chat/sdk/compose/&#34;&gt;Compose SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Android SDK supports both Kotlin and Java, but &lt;em&gt;we strongly recommend using Kotlin&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The Compose SDK supports only Kotlin, since Compose uses Kotlin compiler plugins to process the UI.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🔗 Quick Links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/trial/&#34;&gt;Register&lt;/a&gt;: Create an account and get an API key for Stream Chat&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/tutorials/android-chat/#kotlin&#34;&gt;Chat Tutorial&lt;/a&gt;: Learn the basics of the SDK by by building a simple messaging app (Kotlin or Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components-sample&#34;&gt;UI Components sample app&lt;/a&gt;: Full messaging app with threads, reactions, optimistic UI updates and offline storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose-sample&#34;&gt;Compose UI Components sample app&lt;/a&gt;: Messaging sample app built with Jetpack Compose!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/android/?language=kotlin&#34;&gt;Client Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/&#34;&gt;UI Components Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/compose/overview/&#34;&gt;Compose UI Components Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getstream.github.io/stream-chat-android/&#34;&gt;API docs&lt;/a&gt;: Full generated docs from Dokka&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/GetStream/projects/6&#34;&gt;Jetpack Compose Planning&lt;/a&gt;: Jetpack Compose public project management board and milestone overview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;👩‍💻 Free for Makers 👨‍💻&lt;/h2&gt; &#xA;&lt;p&gt;Stream is free for most side and hobby projects. To qualify, your project/company needs to have &amp;lt; 5 team members and &amp;lt; $10k in monthly revenue. For complete pricing details, visit our &lt;a href=&#34;https://getstream.io/chat/pricing/&#34;&gt;Chat Pricing Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🗺️ Overview and Documentation 📚&lt;/h2&gt; &#xA;&lt;p&gt;This SDK consists of two low-level artifacts you can build on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-client&#34;&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/a&gt;: A low-level client for making API calls and receiving chat events. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/android/?language=kotlin&#34;&gt;Documentation website&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-offline&#34;&gt;&lt;strong&gt;Offline support&lt;/strong&gt;&lt;/a&gt;: Local caching and automatic retries, exposed via Flow and LiveData APIs. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/client/guides/offline-support/&#34;&gt;Offline Support&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;We also have two UI SDKs&lt;/strong&gt;. You can use our Compose UI Components SDK, or if you&#39;re using older UI solutions, the XML-based UI Components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose&#34;&gt;&lt;strong&gt;Compose UI Components&lt;/strong&gt;&lt;/a&gt;: Reusable and modular Composables for displaying conversations, lists of channels, and more! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose-sample&#34;&gt;Sample app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/compose/overview/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose/GUIDELINES.md&#34;&gt;Compose SDK Guidelines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components&#34;&gt;&lt;strong&gt;UI Components&lt;/strong&gt;&lt;/a&gt;: Reusable and customizable chat Views for displaying conversations, lists of channels, and more! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components-sample&#34;&gt;Sample app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/ui/overview/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Learn more about the modules by visiting &lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📖 Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;The best place to start is the &lt;a href=&#34;https://getstream.io/chat/compose/tutorial/&#34;&gt;Compose Chat Messaging Tutorial&lt;/a&gt;. It teaches you the basics of using the Compose Chat SDK and also shows how to make frequently required changes.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re using older UI toolkits, like XML, you can follow the &lt;a href=&#34;https://getstream.io/tutorials/android-chat/&#34;&gt;Android Chat Messaging Tutorial&lt;/a&gt; which features the XML-based UI Components.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🛠️ Installation and Getting Started 🚀&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/basics/dependencies/&#34;&gt;Dependencies&lt;/a&gt; and &lt;a href=&#34;https://getstream.io/chat/docs/sdk/android/basics/getting-started/&#34;&gt;Getting Started&lt;/a&gt; pages of the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;🔮 Sample Apps&lt;/h2&gt; &#xA;&lt;h3&gt;Compose Sample App&lt;/h3&gt; &#xA;&lt;p&gt;Our Jetpack Compose implementation comes with its own &lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose-sample&#34;&gt;example app&lt;/a&gt;, which you can play with to see how awesome Compose is.&lt;/p&gt; &#xA;&lt;p&gt;To run the sample app, start by cloning this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:GetStream/stream-chat-android.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, open &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; and open the newly created project folder. You&#39;ll want to run the &lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-compose-sample&#34;&gt;&lt;code&gt;stream-chat-android-compose-sample&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;Since Compose is a highly customizable SDK, we&#39;re eager to hear your feedback on how it helps you build complex Chat UI. Join us in &lt;a href=&#34;https://github.com/GetStream/stream-chat-android/discussions&#34;&gt;this repo&#39;s discussions&lt;/a&gt; or tweet at us &lt;a href=&#34;https://twitter.com/getstream_io&#34;&gt;@getstream_io&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;Sample App&lt;/h3&gt; &#xA;&lt;p&gt;However, if you&#39;re still using XML due to technical limitations, our UI Components SDK includes a fully functional &lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components-sample&#34;&gt;example app&lt;/a&gt; featuring threads, reactions, typing indicators, optimistic UI updates and offline storage. To run the sample app, start by cloning this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:GetStream/stream-chat-android.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, open &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;Android Studio&lt;/a&gt; and open the newly created project folder. You&#39;ll want to run the &lt;a href=&#34;https://raw.githubusercontent.com/GetStream/stream-chat-android/main/stream-chat-android-ui-components-sample&#34;&gt;&lt;code&gt;stream-chat-android-ui-components-sample&lt;/code&gt;&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;h3&gt;Other Sample Apps&lt;/h3&gt; &#xA;&lt;p&gt;We also maintain a dedicated repository for fully-fledged sample applications at &lt;a href=&#34;https://github.com/GetStream/Android-Samples&#34;&gt;GetStream/Android-Samples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;💡 Supported features 🎨&lt;/h2&gt; &#xA;&lt;p&gt;Here are some of the features that the SDK supports out-of-the-box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Channels list UI&lt;/li&gt; &#xA; &lt;li&gt;Channel UI&lt;/li&gt; &#xA; &lt;li&gt;Message reactions&lt;/li&gt; &#xA; &lt;li&gt;Link previews&lt;/li&gt; &#xA; &lt;li&gt;Image, video and file attachments&lt;/li&gt; &#xA; &lt;li&gt;Editing and deleting messages&lt;/li&gt; &#xA; &lt;li&gt;Typing indicators&lt;/li&gt; &#xA; &lt;li&gt;Read indicators&lt;/li&gt; &#xA; &lt;li&gt;Push notifications&lt;/li&gt; &#xA; &lt;li&gt;Image gallery&lt;/li&gt; &#xA; &lt;li&gt;GIF support&lt;/li&gt; &#xA; &lt;li&gt;Light and dark themes&lt;/li&gt; &#xA; &lt;li&gt;Style customization&lt;/li&gt; &#xA; &lt;li&gt;UI customization&lt;/li&gt; &#xA; &lt;li&gt;Threads&lt;/li&gt; &#xA; &lt;li&gt;Slash commands&lt;/li&gt; &#xA; &lt;li&gt;Markdown message formatting&lt;/li&gt; &#xA; &lt;li&gt;Unread message counts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more, see the &lt;a href=&#34;https://getstream.io/chat/sdk/android/&#34;&gt;SDK&#39;s website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;💼 We are hiring!&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve recently closed a &lt;a href=&#34;https://techcrunch.com/2021/03/04/stream-raises-38m-as-its-chat-and-activity-feed-apis-power-communications-for-1b-users/&#34;&gt;$38 million Series B funding round&lt;/a&gt; and we keep actively growing. Our APIs are used by more than a billion end-users, and you&#39;ll have a chance to make a huge impact on the product within a team of the strongest engineers all over the world. Check out our current openings and apply via &lt;a href=&#34;https://getstream.io/team/#jobs&#34;&gt;Stream&#39;s website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2014-2022 Stream.io Inc. All rights reserved.&#xA;&#xA;Licensed under the Stream License;&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   https://github.com/GetStream/stream-chat-android/blob/main/LICENSE&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>google/ksp</title>
    <updated>2023-04-16T01:58:40Z</updated>
    <id>tag:github.com,2023-04-16:/google/ksp</id>
    <link href="https://github.com/google/ksp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kotlin Symbol Processing API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kotlin Symbol Processing API&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to KSP!&lt;/p&gt; &#xA;&lt;p&gt;Kotlin Symbol Processing (KSP) is an API that you can use to develop lightweight compiler plugins. KSP provides a simplified compiler plugin API that leverages the power of Kotlin while keeping the learning curve at a minimum. Compared to KAPT, annotation processors that use KSP can run up to 2x faster.&lt;/p&gt; &#xA;&lt;p&gt;Most of the documentation of KSP can be found on &lt;a href=&#34;https://kotlinlang.org/docs/ksp-overview.html&#34;&gt;kotlinlang.org&lt;/a&gt;. Here are some handy links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/ksp-overview.html&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/ksp-quickstart.html&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/ksp-overview.html#supported-libraries&#34;&gt;Libraries that support KSP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/ksp-why-ksp.html&#34;&gt;Why KSP?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/ksp-examples.html&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/ksp-additional-details.html&#34;&gt;How KSP models Kotlin code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/ksp-reference.html&#34;&gt;Reference for Java annotation processor authors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/ksp-incremental.html&#34;&gt;Incremental processing notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/ksp-multi-round.html&#34;&gt;Multiple round processing notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/ksp-multiplatform.html&#34;&gt;KSP on multiplatform projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/ksp-command-line.html&#34;&gt;Running KSP from command line&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/ksp-faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback and Bug Reporting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/ksp/issues&#34;&gt;Please let us know what you think about KSP by filing a Github issue&lt;/a&gt; or connecting with our team in the &lt;code&gt;#ksp&lt;/code&gt; channel in the &lt;a href=&#34;https://kotlinlang.slack.com/&#34;&gt;Kotlin Slack workspace&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in sending PRs, please also check out the &lt;a href=&#34;https://raw.githubusercontent.com/google/ksp/main/CONTRIBUTING.md&#34;&gt;Contributor guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Ongoing and Future Works&lt;/h2&gt; &#xA;&lt;p&gt;Here are some planned features that have not yet been completely implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support &lt;a href=&#34;https://kotlinlang.org/docs/roadmap.html&#34;&gt;new Kotlin compiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Improve support to multiplatform. E.g., running KSP on a subset of targets / sharing computations between targets&lt;/li&gt; &#xA; &lt;li&gt;Improve performance. There are a bunch of optimizations to be done!&lt;/li&gt; &#xA; &lt;li&gt;Make the IDE aware of the generated code&lt;/li&gt; &#xA; &lt;li&gt;Keep fixing bugs!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>