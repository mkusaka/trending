<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-23T01:43:29Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openai/openai-java</title>
    <updated>2025-02-23T01:43:29Z</updated>
    <id>tag:github.com,2025-02-23:/openai/openai-java</id>
    <link href="https://github.com/openai/openai-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Java library for the OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI Java API Library&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; The OpenAI Java API Library is currently in &lt;em&gt;beta&lt;/em&gt;.&lt;/p&gt; &#xA; &lt;p&gt;There may be minor breaking changes.&lt;/p&gt; &#xA; &lt;p&gt;Have thoughts or feedback? &lt;a href=&#34;https://github.com/openai/openai-java/issues/new&#34;&gt;File an issue&lt;/a&gt; or comment on &lt;a href=&#34;https://community.openai.com/t/your-feedback-requested-java-sdk/1061029&#34;&gt;this thread&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- x-release-please-start-version --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://central.sonatype.com/artifact/com.openai/openai-java/0.26.1&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/com.openai/openai-java&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://javadoc.io/doc/com.openai/openai-java/0.26.1&#34;&gt;&lt;img src=&#34;https://javadoc.io/badge2/com.openai/openai-java/0.26.1/javadoc.svg?sanitize=true&#34; alt=&#34;javadoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- x-release-please-end --&gt; &#xA;&lt;p&gt;The OpenAI Java SDK provides convenient access to the OpenAI REST API from applications written in Java.&lt;/p&gt; &#xA;&lt;p&gt;The REST API documentation can be found on &lt;a href=&#34;https://platform.openai.com/docs&#34;&gt;platform.openai.com&lt;/a&gt;. Javadocs are also available on &lt;a href=&#34;https://javadoc.io/doc/com.openai/openai-java/0.0.1&#34;&gt;javadoc.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;!-- x-release-please-start-version --&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;implementation(&#34;com.openai:openai-java:0.26.1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maven&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;com.openai&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;openai-java&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.26.1&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- x-release-please-end --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This library requires Java 8 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-java/main/openai-java-example/src/main/java/com/openai/example&#34;&gt;&lt;code&gt;openai-java-example&lt;/code&gt;&lt;/a&gt; directory for complete and runnable examples.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;import com.openai.models.ChatCompletion;&#xA;import com.openai.models.ChatCompletionCreateParams;&#xA;import com.openai.models.ChatModel;&#xA;&#xA;// Configures using the `OPENAI_API_KEY`, `OPENAI_ORG_ID` and `OPENAI_PROJECT_ID` environment variables&#xA;OpenAIClient client = OpenAIOkHttpClient.fromEnv();&#xA;&#xA;ChatCompletionCreateParams params = ChatCompletionCreateParams.builder()&#xA;    .addUserMessage(&#34;Say this is a test&#34;)&#xA;    .model(ChatModel.O3_MINI)&#xA;    .build();&#xA;ChatCompletion chatCompletion = client.chat().completions().create(params);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Client configuration&lt;/h2&gt; &#xA;&lt;p&gt;Configure the client using environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;&#xA;// Configures using the `OPENAI_API_KEY`, `OPENAI_ORG_ID` and `OPENAI_PROJECT_ID` environment variables&#xA;OpenAIClient client = OpenAIOkHttpClient.fromEnv();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;&#xA;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;    .apiKey(&#34;My API Key&#34;)&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or using a combination of the two approaches:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;&#xA;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;    // Configures using the `OPENAI_API_KEY`, `OPENAI_ORG_ID` and `OPENAI_PROJECT_ID` environment variables&#xA;    .fromEnv()&#xA;    .apiKey(&#34;My API Key&#34;)&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See this table for the available options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setter&lt;/th&gt; &#xA;   &lt;th&gt;Environment variable&lt;/th&gt; &#xA;   &lt;th&gt;Required&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;apiKey&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;organization&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_ORG_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;project&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_PROJECT_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Don&#39;t create more than one client in the same application. Each client has a connection pool and thread pools, which are more efficient to share between requests.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Requests and responses&lt;/h2&gt; &#xA;&lt;p&gt;To send a request to the OpenAI API, build an instance of some &lt;code&gt;Params&lt;/code&gt; class and pass it to the corresponding client method. When the response is received, it will be deserialized into an instance of a Java class.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;client.chat().completions().create(...)&lt;/code&gt; should be called with an instance of &lt;code&gt;ChatCompletionCreateParams&lt;/code&gt;, and it will return an instance of &lt;code&gt;ChatCompletion&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Immutability&lt;/h2&gt; &#xA;&lt;p&gt;Each class in the SDK has an associated &lt;a href=&#34;https://blogs.oracle.com/javamagazine/post/exploring-joshua-blochs-builder-design-pattern-in-java&#34;&gt;builder&lt;/a&gt; or factory method for constructing it.&lt;/p&gt; &#xA;&lt;p&gt;Each class is &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html&#34;&gt;immutable&lt;/a&gt; once constructed. If the class has an associated builder, then it has a &lt;code&gt;toBuilder()&lt;/code&gt; method, which can be used to convert it back to a builder for making a modified copy.&lt;/p&gt; &#xA;&lt;p&gt;Because each class is immutable, builder modification will &lt;em&gt;never&lt;/em&gt; affect already built class instances.&lt;/p&gt; &#xA;&lt;h2&gt;Asynchronous execution&lt;/h2&gt; &#xA;&lt;p&gt;The default client is synchronous. To switch to asynchronous execution, call the &lt;code&gt;async()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;import com.openai.models.ChatCompletion;&#xA;import com.openai.models.ChatCompletionCreateParams;&#xA;import com.openai.models.ChatModel;&#xA;import java.util.concurrent.CompletableFuture;&#xA;&#xA;// Configures using the `OPENAI_API_KEY`, `OPENAI_ORG_ID` and `OPENAI_PROJECT_ID` environment variables&#xA;OpenAIClient client = OpenAIOkHttpClient.fromEnv();&#xA;&#xA;ChatCompletionCreateParams params = ChatCompletionCreateParams.builder()&#xA;    .addUserMessage(&#34;Say this is a test&#34;)&#xA;    .model(ChatModel.O3_MINI)&#xA;    .build();&#xA;CompletableFuture&amp;lt;ChatCompletion&amp;gt; chatCompletion = client.async().chat().completions().create(params);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or create an asynchronous client from the beginning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClientAsync;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClientAsync;&#xA;import com.openai.models.ChatCompletion;&#xA;import com.openai.models.ChatCompletionCreateParams;&#xA;import com.openai.models.ChatModel;&#xA;import java.util.concurrent.CompletableFuture;&#xA;&#xA;// Configures using the `OPENAI_API_KEY`, `OPENAI_ORG_ID` and `OPENAI_PROJECT_ID` environment variables&#xA;OpenAIClientAsync client = OpenAIOkHttpClientAsync.fromEnv();&#xA;&#xA;ChatCompletionCreateParams params = ChatCompletionCreateParams.builder()&#xA;    .addUserMessage(&#34;Say this is a test&#34;)&#xA;    .model(ChatModel.O3_MINI)&#xA;    .build();&#xA;CompletableFuture&amp;lt;ChatCompletion&amp;gt; chatCompletion = client.chat().completions().create(params);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The asynchronous client supports the same options as the synchronous one, except most methods return &lt;code&gt;CompletableFuture&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;h2&gt;Streaming&lt;/h2&gt; &#xA;&lt;p&gt;The SDK defines methods that return response &#34;chunk&#34; streams, where each chunk can be individually processed as soon as it arrives instead of waiting on the full response. Streaming methods generally correspond to &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events&#34;&gt;SSE&lt;/a&gt; or &lt;a href=&#34;https://jsonlines.org&#34;&gt;JSONL&lt;/a&gt; responses.&lt;/p&gt; &#xA;&lt;p&gt;Some of these methods may have streaming and non-streaming variants, but a streaming method will always have a &lt;code&gt;Streaming&lt;/code&gt; suffix in its name, even if it doesn&#39;t have a non-streaming variant.&lt;/p&gt; &#xA;&lt;p&gt;These streaming methods return &lt;code&gt;StreamResponse&lt;/code&gt; for synchronous clients:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.core.http.StreamResponse;&#xA;import com.openai.models.ChatCompletionChunk;&#xA;&#xA;try (StreamResponse&amp;lt;ChatCompletionChunk&amp;gt; streamResponse = client.chat().completions().createStreaming(params)) {&#xA;    streamResponse.stream().forEach(chunk -&amp;gt; {&#xA;        System.out.println(chunk);&#xA;    });&#xA;    System.out.println(&#34;No more chunks!&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or &lt;code&gt;AsyncStreamResponse&lt;/code&gt; for asynchronous clients:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.core.http.AsyncStreamResponse;&#xA;import com.openai.models.ChatCompletionChunk;&#xA;import java.util.Optional;&#xA;&#xA;client.async().chat().completions().createStreaming(params).subscribe(chunk -&amp;gt; {&#xA;    System.out.println(chunk);&#xA;});&#xA;&#xA;// If you need to handle errors or completion of the stream&#xA;client.async().chat().completions().createStreaming(params).subscribe(new AsyncStreamResponse.Handler&amp;lt;&amp;gt;() {&#xA;    @Override&#xA;    public void onNext(ChatCompletionChunk chunk) {&#xA;        System.out.println(chunk);&#xA;    }&#xA;&#xA;    @Override&#xA;    public void onComplete(Optional&amp;lt;Throwable&amp;gt; error) {&#xA;        if (error.isPresent()) {&#xA;            System.out.println(&#34;Something went wrong!&#34;);&#xA;            throw new RuntimeException(error.get());&#xA;        } else {&#xA;            System.out.println(&#34;No more chunks!&#34;);&#xA;        }&#xA;    }&#xA;});&#xA;&#xA;// Or use futures&#xA;client.async().chat().completions().createStreaming(params)&#xA;    .subscribe(chunk -&amp;gt; {&#xA;        System.out.println(chunk);&#xA;    })&#xA;    .onCompleteFuture();&#xA;    .whenComplete((unused, error) -&amp;gt; {&#xA;        if (error != null) {&#xA;            System.out.println(&#34;Something went wrong!&#34;);&#xA;            throw new RuntimeException(error);&#xA;        } else {&#xA;            System.out.println(&#34;No more chunks!&#34;);&#xA;        }&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Async streaming uses a dedicated per-client cached thread pool &lt;code&gt;Executor&lt;/code&gt; to stream without blocking the current thread. This default is suitable for most purposes.&lt;/p&gt; &#xA;&lt;p&gt;To use a different &lt;code&gt;Executor&lt;/code&gt;, configure the subscription using the &lt;code&gt;executor&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.concurrent.Executor;&#xA;import java.util.concurrent.Executors;&#xA;&#xA;Executor executor = Executors.newFixedThreadPool(4);&#xA;client.async().chat().completions().createStreaming(params).subscribe(&#xA;    chunk -&amp;gt; System.out.println(chunk), executor&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or configure the client globally using the &lt;code&gt;streamHandlerExecutor&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;import java.util.concurrent.Executors;&#xA;&#xA;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;    .fromEnv()&#xA;    .streamHandlerExecutor(Executors.newFixedThreadPool(4))&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Binary responses&lt;/h2&gt; &#xA;&lt;p&gt;The SDK defines methods that return binary responses, which are used for API responses that shouldn&#39;t necessarily be parsed, like non-JSON data.&lt;/p&gt; &#xA;&lt;p&gt;These methods return &lt;code&gt;HttpResponse&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.core.http.HttpResponse;&#xA;import com.openai.models.FileContentParams;&#xA;&#xA;FileContentParams params = FileContentParams.builder()&#xA;    .fileId(&#34;file_id&#34;)&#xA;    .build();&#xA;HttpResponse response = client.files().content(params);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To save the response content to a file, use the &lt;code&gt;Files.copy(...)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.core.http.HttpResponse;&#xA;import java.nio.file.Files;&#xA;import java.nio.file.Paths;&#xA;import java.nio.file.StandardCopyOption;&#xA;&#xA;try (HttpResponse response = client.files().content(params)) {&#xA;    Files.copy(&#xA;        response.body(),&#xA;        Paths.get(path),&#xA;        StandardCopyOption.REPLACE_EXISTING&#xA;    );&#xA;} catch (Exception e) {&#xA;    System.out.println(&#34;Something went wrong!&#34;);&#xA;    throw new RuntimeException(e);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or transfer the response content to any &lt;code&gt;OutputStream&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.core.http.HttpResponse;&#xA;import java.nio.file.Files;&#xA;import java.nio.file.Paths;&#xA;&#xA;try (HttpResponse response = client.files().content(params)) {&#xA;    response.body().transferTo(Files.newOutputStream(Paths.get(path)));&#xA;} catch (Exception e) {&#xA;    System.out.println(&#34;Something went wrong!&#34;);&#xA;    throw new RuntimeException(e);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error handling&lt;/h2&gt; &#xA;&lt;p&gt;The SDK throws custom unchecked exception types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OpenAIServiceException&lt;/code&gt;: Base class for HTTP errors. See this table for which exception subclass is thrown for each HTTP status code:&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Status&lt;/th&gt; &#xA;     &lt;th&gt;Exception&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;400&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;BadRequestException&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;401&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;AuthenticationException&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;403&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;PermissionDeniedException&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;404&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;NotFoundException&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;422&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;UnprocessableEntityException&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;429&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;RateLimitException&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;5xx&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;InternalServerException&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;others&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;UnexpectedStatusCodeException&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OpenAIIoException&lt;/code&gt;: I/O networking errors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OpenAIInvalidDataException&lt;/code&gt;: Failure to interpret successfully parsed data. For example, when accessing a property that&#39;s supposed to be required, but the API unexpectedly omitted it from the response.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;OpenAIException&lt;/code&gt;: Base class for all exceptions. Most errors will result in one of the previously mentioned ones, but completely generic errors may be thrown using the base class.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pagination&lt;/h2&gt; &#xA;&lt;p&gt;For methods that return a paginated list of results, this library provides convenient ways access the results either one page at a time, or item-by-item across all pages.&lt;/p&gt; &#xA;&lt;h3&gt;Auto-pagination&lt;/h3&gt; &#xA;&lt;p&gt;To iterate through all results across all pages, you can use &lt;code&gt;autoPager&lt;/code&gt;, which automatically handles fetching more pages for you:&lt;/p&gt; &#xA;&lt;h3&gt;Synchronous&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.models.FineTuningJob;&#xA;import com.openai.models.FineTuningJobListPage;&#xA;&#xA;// As an Iterable:&#xA;FineTuningJobListPage page = client.fineTuning().jobs().list(params);&#xA;for (FineTuningJob job : page.autoPager()) {&#xA;    System.out.println(job);&#xA;};&#xA;&#xA;// As a Stream:&#xA;client.fineTuning().jobs().list(params).autoPager().stream()&#xA;    .limit(50)&#xA;    .forEach(job -&amp;gt; System.out.println(job));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Asynchronous&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Using forEach, which returns CompletableFuture&amp;lt;Void&amp;gt;:&#xA;asyncClient.fineTuning().jobs().list(params).autoPager()&#xA;    .forEach(job -&amp;gt; System.out.println(job), executor);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual pagination&lt;/h3&gt; &#xA;&lt;p&gt;If none of the above helpers meet your needs, you can also manually request pages one-by-one. A page of results has a &lt;code&gt;data()&lt;/code&gt; method to fetch the list of objects, as well as top-level &lt;code&gt;response&lt;/code&gt; and other methods to fetch top-level data about the page. It also has methods &lt;code&gt;hasNextPage&lt;/code&gt;, &lt;code&gt;getNextPage&lt;/code&gt;, and &lt;code&gt;getNextPageParams&lt;/code&gt; methods to help with pagination.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.models.FineTuningJob;&#xA;import com.openai.models.FineTuningJobListPage;&#xA;&#xA;FineTuningJobListPage page = client.fineTuning().jobs().list(params);&#xA;while (page != null) {&#xA;    for (FineTuningJob job : page.data()) {&#xA;        System.out.println(job);&#xA;    }&#xA;&#xA;    page = page.getNextPage().orElse(null);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;The SDK uses the standard &lt;a href=&#34;https://github.com/square/okhttp/tree/master/okhttp-logging-interceptor&#34;&gt;OkHttp logging interceptor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Enable logging by setting the &lt;code&gt;OPENAI_LOG&lt;/code&gt; environment variable to &lt;code&gt;info&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ export OPENAI_LOG=info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to &lt;code&gt;debug&lt;/code&gt; for more verbose logging:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ export OPENAI_LOG=debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Microsoft Azure&lt;/h2&gt; &#xA;&lt;p&gt;To use this library with &lt;a href=&#34;https://learn.microsoft.com/azure/ai-services/openai/overview&#34;&gt;Azure OpenAI&lt;/a&gt;, use the same OpenAI client builder but with the Azure-specific configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;        // Gets the API key from the `AZURE_OPENAI_KEY` environment variable&#xA;        .fromEnv()&#xA;        // Set the Azure Entra ID&#xA;        .credential(BearerTokenCredential.create(AuthenticationUtil.getBearerTokenSupplier(&#xA;                new DefaultAzureCredentialBuilder().build(), &#34;https://cognitiveservices.azure.com/.default&#34;)))&#xA;        .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the complete Azure OpenAI example in the &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-java/main/openai-java-example/src/main/java/com/openai/example/AzureEntraIdExample.java&#34;&gt;&lt;code&gt;openai-java-example&lt;/code&gt;&lt;/a&gt; directory. The other examples in the directory also work with Azure as long as the client is configured to use it.&lt;/p&gt; &#xA;&lt;h2&gt;Network options&lt;/h2&gt; &#xA;&lt;h3&gt;Retries&lt;/h3&gt; &#xA;&lt;p&gt;The SDK automatically retries 2 times by default, with a short exponential backoff.&lt;/p&gt; &#xA;&lt;p&gt;Only the following error types are retried:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connection errors (for example, due to a network connectivity problem)&lt;/li&gt; &#xA; &lt;li&gt;408 Request Timeout&lt;/li&gt; &#xA; &lt;li&gt;409 Conflict&lt;/li&gt; &#xA; &lt;li&gt;429 Rate Limit&lt;/li&gt; &#xA; &lt;li&gt;5xx Internal&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The API may also explicitly instruct the SDK to retry or not retry a response.&lt;/p&gt; &#xA;&lt;p&gt;To set a custom number of retries, configure the client using the &lt;code&gt;maxRetries&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;&#xA;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;    .fromEnv()&#xA;    .maxRetries(4)&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Timeouts&lt;/h3&gt; &#xA;&lt;p&gt;Requests time out after 10 minutes by default.&lt;/p&gt; &#xA;&lt;p&gt;To set a custom timeout, configure the method call using the &lt;code&gt;timeout&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.models.ChatCompletion;&#xA;import com.openai.models.ChatCompletionCreateParams;&#xA;import com.openai.models.ChatModel;&#xA;&#xA;ChatCompletion chatCompletion = client.chat().completions().create(&#xA;  params, RequestOptions.builder().timeout(Duration.ofSeconds(30)).build()&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or configure the default for all method calls at the client level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;import java.time.Duration;&#xA;&#xA;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;    .fromEnv()&#xA;    .timeout(Duration.ofSeconds(30))&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Proxies&lt;/h3&gt; &#xA;&lt;p&gt;To route requests through a proxy, configure the client using the &lt;code&gt;proxy&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;import java.net.InetSocketAddress;&#xA;import java.net.Proxy;&#xA;&#xA;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;    .fromEnv()&#xA;    .proxy(new Proxy(&#xA;      Proxy.Type.HTTP, new InetSocketAddress(&#xA;        &#34;https://example.com&#34;, 8080&#xA;      )&#xA;    ))&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Undocumented API functionality&lt;/h2&gt; &#xA;&lt;p&gt;The SDK is typed for convenient usage of the documented API. However, it also supports working with undocumented or not yet supported parts of the API.&lt;/p&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;p&gt;To set undocumented parameters, call the &lt;code&gt;putAdditionalHeader&lt;/code&gt;, &lt;code&gt;putAdditionalQueryParam&lt;/code&gt;, or &lt;code&gt;putAdditionalBodyProperty&lt;/code&gt; methods on any &lt;code&gt;Params&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.core.JsonValue;&#xA;import com.openai.models.ChatCompletionCreateParams;&#xA;&#xA;ChatCompletionCreateParams params = ChatCompletionCreateParams.builder()&#xA;    .putAdditionalHeader(&#34;Secret-Header&#34;, &#34;42&#34;)&#xA;    .putAdditionalQueryParam(&#34;secret_query_param&#34;, &#34;42&#34;)&#xA;    .putAdditionalBodyProperty(&#34;secretProperty&#34;, JsonValue.from(&#34;42&#34;))&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These can be accessed on the built object later using the &lt;code&gt;_additionalHeaders()&lt;/code&gt;, &lt;code&gt;_additionalQueryParams()&lt;/code&gt;, and &lt;code&gt;_additionalBodyProperties()&lt;/code&gt; methods. You can also set undocumented parameters on nested headers, query params, or body classes using the &lt;code&gt;putAdditionalProperty&lt;/code&gt; method. These properties can be accessed on the built object later using the &lt;code&gt;_additionalProperties()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;To set a documented parameter or property to an undocumented or not yet supported &lt;em&gt;value&lt;/em&gt;, pass a &lt;code&gt;JsonValue&lt;/code&gt; object to its setter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.core.JsonValue;&#xA;import com.openai.models.ChatCompletionCreateParams;&#xA;&#xA;ChatCompletionCreateParams params = ChatCompletionCreateParams.builder()&#xA;    .addUserMessage(&#34;Say this is a test&#34;)&#xA;    .model(JsonValue.from(42))&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Response properties&lt;/h3&gt; &#xA;&lt;p&gt;To access undocumented response properties, call the &lt;code&gt;_additionalProperties()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.core.JsonValue;&#xA;import java.util.Map;&#xA;&#xA;Map&amp;lt;String, JsonValue&amp;gt; additionalProperties = client.chat().completions().create(params)._additionalProperties();&#xA;JsonValue secretPropertyValue = additionalProperties.get(&#34;secretProperty&#34;);&#xA;&#xA;String result = secretPropertyValue.accept(new JsonValue.Visitor&amp;lt;&amp;gt;() {&#xA;    @Override&#xA;    public String visitNull() {&#xA;        return &#34;It&#39;s null!&#34;;&#xA;    }&#xA;&#xA;    @Override&#xA;    public String visitBoolean(boolean value) {&#xA;        return &#34;It&#39;s a boolean!&#34;;&#xA;    }&#xA;&#xA;    @Override&#xA;    public String visitNumber(Number value) {&#xA;        return &#34;It&#39;s a number!&#34;;&#xA;    }&#xA;&#xA;    // Other methods include `visitMissing`, `visitString`, `visitArray`, and `visitObject`&#xA;    // The default implementation of each unimplemented method delegates to `visitDefault`, which throws by default, but can also be overridden&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To access a property&#39;s raw JSON value, which may be undocumented, call its &lt;code&gt;_&lt;/code&gt; prefixed method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.core.JsonField;&#xA;import com.openai.models.ChatCompletionMessageParam;&#xA;import java.util.Optional;&#xA;&#xA;JsonField&amp;lt;List&amp;lt;ChatCompletionMessageParam&amp;gt;&amp;gt; messages = client.chat().completions().create(params)._messages();&#xA;&#xA;if (messages.isMissing()) {&#xA;  // The property is absent from the JSON response&#xA;} else if (messages.isNull()) {&#xA;  // The property was set to literal null&#xA;} else {&#xA;  // Check if value was provided as a string&#xA;  // Other methods include `asNumber()`, `asBoolean()`, etc.&#xA;  Optional&amp;lt;String&amp;gt; jsonString = messages.asString();&#xA;&#xA;  // Try to deserialize into a custom type&#xA;  MyClass myObject = messages.asUnknown().orElseThrow().convert(MyClass.class);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Response validation&lt;/h3&gt; &#xA;&lt;p&gt;In rare cases, the API may return a response that doesn&#39;t match the expected type. For example, the SDK may expect a property to contain a &lt;code&gt;String&lt;/code&gt;, but the API could return something else.&lt;/p&gt; &#xA;&lt;p&gt;By default, the SDK will not throw an exception in this case. It will throw &lt;code&gt;OpenAIInvalidDataException&lt;/code&gt; only if you directly access the property.&lt;/p&gt; &#xA;&lt;p&gt;If you would prefer to check that the response is completely well-typed upfront, then either call &lt;code&gt;validate()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.models.ChatCompletion;&#xA;&#xA;ChatCompletion chatCompletion = client.chat().completions().create(params).validate();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or configure the method call to validate the response using the &lt;code&gt;responseValidation&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.models.ChatCompletion;&#xA;import com.openai.models.ChatCompletionCreateParams;&#xA;import com.openai.models.ChatModel;&#xA;&#xA;ChatCompletion chatCompletion = client.chat().completions().create(&#xA;  params, RequestOptions.builder().responseValidation(true).build()&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or configure the default for all method calls at the client level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.openai.client.OpenAIClient;&#xA;import com.openai.client.okhttp.OpenAIOkHttpClient;&#xA;&#xA;OpenAIClient client = OpenAIOkHttpClient.builder()&#xA;    .fromEnv()&#xA;    .responseValidation(true)&#xA;    .build();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Why don&#39;t you use plain &lt;code&gt;enum&lt;/code&gt; classes?&lt;/h3&gt; &#xA;&lt;p&gt;Java &lt;code&gt;enum&lt;/code&gt; classes are not trivially &lt;a href=&#34;https://www.stainless.com/blog/making-java-enums-forwards-compatible&#34;&gt;forwards compatible&lt;/a&gt;. Using them in the SDK could cause runtime exceptions if the API is updated to respond with a new enum value.&lt;/p&gt; &#xA;&lt;h3&gt;Why do you represent fields using &lt;code&gt;JsonField&amp;lt;T&amp;gt;&lt;/code&gt; instead of just plain &lt;code&gt;T&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;JsonField&amp;lt;T&amp;gt;&lt;/code&gt; enables a few features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allowing usage of &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-java/main/#undocumented-api-functionality&#34;&gt;undocumented API functionality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lazily &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-java/main/#response-validation&#34;&gt;validating the API response against the expected shape&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Representing absent vs explicitly null values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why don&#39;t you use &lt;a href=&#34;https://kotlinlang.org/docs/data-classes.html&#34;&gt;&lt;code&gt;data&lt;/code&gt; classes&lt;/a&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;It is not &lt;a href=&#34;https://kotlinlang.org/docs/api-guidelines-backward-compatibility.html#avoid-using-data-classes-in-your-api&#34;&gt;backwards compatible to add new fields to a data class&lt;/a&gt; and we don&#39;t want to introduce a breaking change every time we add a field to a class.&lt;/p&gt; &#xA;&lt;h3&gt;Why don&#39;t you use checked exceptions?&lt;/h3&gt; &#xA;&lt;p&gt;Checked exceptions are widely considered a mistake in the Java programming language. In fact, they were omitted from Kotlin for this reason.&lt;/p&gt; &#xA;&lt;p&gt;Checked exceptions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Are verbose to handle&lt;/li&gt; &#xA; &lt;li&gt;Encourage error handling at the wrong level of abstraction, where nothing can be done about the error&lt;/li&gt; &#xA; &lt;li&gt;Are tedious to propagate due to the &lt;a href=&#34;https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function&#34;&gt;function coloring problem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t play well with lambdas (also due to the function coloring problem)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Semantic versioning&lt;/h2&gt; &#xA;&lt;p&gt;This package generally follows &lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;SemVer&lt;/a&gt; conventions, though certain backwards-incompatible changes may be released as minor versions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Changes to library internals which are technically public but not intended or documented for external use. &lt;em&gt;(Please open a GitHub issue to let us know if you are relying on such internals.)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Changes that we do not expect to impact the vast majority of users in practice.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.&lt;/p&gt; &#xA;&lt;p&gt;We are keen for your feedback; please open an &lt;a href=&#34;https://www.github.com/openai/openai-java/issues&#34;&gt;issue&lt;/a&gt; with questions, bugs, or suggestions.&lt;/p&gt;</summary>
  </entry>
</feed>