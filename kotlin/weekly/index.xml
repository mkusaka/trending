<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Kotlin Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-10T01:54:36Z</updated>
  <subtitle>Weekly Trending of Kotlin in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Kotlin/kotlinx-datetime</title>
    <updated>2024-03-10T01:54:36Z</updated>
    <id>tag:github.com,2024-03-10:/Kotlin/kotlinx-datetime</id>
    <link href="https://github.com/Kotlin/kotlinx-datetime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KotlinX multiplatform date/time library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kotlinx-datetime&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/docs/components-stability.html&#34;&gt;&lt;img src=&#34;https://kotl.in/badges/alpha.svg?sanitize=true&#34; alt=&#34;Kotlin Alpha&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub&#34;&gt;&lt;img src=&#34;https://jb.gg/badges/official.svg?sanitize=true&#34; alt=&#34;JetBrains official project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://search.maven.org/search?q=g:%22org.jetbrains.kotlinx%22%20AND%20a:%22kotlinx-datetime%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/maven-central/v/org.jetbrains.kotlinx/kotlinx-datetime.svg?label=Maven%20Central&#34; alt=&#34;Maven Central&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://kotlinlang.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kotlin-1.9.21-blue.svg?logo=kotlin&#34; alt=&#34;Kotlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.org/api/kotlinx-datetime/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/API_reference-KDoc-blue&#34; alt=&#34;KDoc link&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kotlinlang.slack.com/messages/kotlinx-datetime/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-slack-blue.svg?logo=slack&#34; alt=&#34;Slack channel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://teamcity.jetbrains.com/viewType.html?buildTypeId=KotlinTools_KotlinxDatetime_Build_All&amp;amp;guest=1&#34;&gt;&lt;img src=&#34;https://img.shields.io/teamcity/build/s/KotlinTools_KotlinxDatetime_Build_All.svg?server=http%3A%2F%2Fteamcity.jetbrains.com&#34; alt=&#34;TeamCity build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A multiplatform Kotlin library for working with date and time.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-datetime/master/#using-in-your-projects&#34;&gt;Using in your projects&lt;/a&gt; for the instructions how to setup a dependency in your project.&lt;/p&gt; &#xA;&lt;h2&gt;Design overview&lt;/h2&gt; &#xA;&lt;p&gt;There are a few guiding principles in the design of &lt;code&gt;kotlinx-datetime&lt;/code&gt;. First of all, it is pragmatic, focused on the most common problems developers face every day (pun intended) when working with dates and times. It is not all-encompassing and lacks some domain-specific utilities that special-purpose applications might need. We chose convenience over generality, so the API surface this library provides is as minimal as possible to meet the use-cases.&lt;/p&gt; &#xA;&lt;p&gt;The library puts a clear boundary between the physical time of an instant and the local, time-zone dependent civil time, consisting of components such as year, month, etc that people use when talking about time. We intentionally avoid entities in the library that mix both together and could be misused. However, there are convenience operations that take, for example, a physical instant and perform a calendar-based adjustment (such as adding a month); all such operations explicitly take a time-zone information as parameter to clearly state that their result depends on the civil time-zone rules which are subject to change at any time.&lt;/p&gt; &#xA;&lt;p&gt;The library is based on the ISO 8601 international standard, other ways to represent dates and times are out of its scope. Internationalization (such as locale-specific month and day names) is out the scope, too.&lt;/p&gt; &#xA;&lt;h2&gt;Types&lt;/h2&gt; &#xA;&lt;p&gt;The library provides a basic set of types for working with date and time:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Instant&lt;/code&gt; to represent a moment on the UTC-SLS time scale;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Clock&lt;/code&gt; to obtain the current instant;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalDateTime&lt;/code&gt; to represent date and time components without a reference to the particular time zone;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalDate&lt;/code&gt; to represent the components of date only;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalTime&lt;/code&gt; to represent the components of time only;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TimeZone&lt;/code&gt; and &lt;code&gt;FixedOffsetTimeZone&lt;/code&gt; provide time zone information to convert between &lt;code&gt;Instant&lt;/code&gt; and &lt;code&gt;LocalDateTime&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Month&lt;/code&gt; and &lt;code&gt;DayOfWeek&lt;/code&gt; enums;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DateTimePeriod&lt;/code&gt; to represent a difference between two instants decomposed into date and time units;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DatePeriod&lt;/code&gt; is a subclass of &lt;code&gt;DateTimePeriod&lt;/code&gt; with zero time components, it represents a difference between two LocalDate values decomposed into date units.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DateTimeUnit&lt;/code&gt; provides a set of predefined date and time units to use in arithmetic operations on &lt;code&gt;Instant&lt;/code&gt; and &lt;code&gt;LocalDate&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UtcOffset&lt;/code&gt; represents the amount of time the local date/time at a particular time zone differs from the date/time at UTC.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Type use-cases&lt;/h3&gt; &#xA;&lt;p&gt;Here is some basic advice on how to choose which of the date-carrying types to use in what cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;Instant&lt;/code&gt; to represent a timestamp of the event that had already happened in the past (like a timestamp of a log entry) or will definitely happen in a well-defined instant of time in the future not far away from now (like an order confirmation deadline in 1 hour from now).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;LocalDateTime&lt;/code&gt; to represent a time of the event that is scheduled to happen in the far future at a certain local time (like a scheduled meeting in a few months from now). You&#39;ll have to keep track of the &lt;code&gt;TimeZone&lt;/code&gt; of the scheduled event separately. Try to avoid converting future events to &lt;code&gt;Instant&lt;/code&gt; in advance, because time-zone rules might change unexpectedly in the future. In this &lt;a href=&#34;https://codeblog.jonskeet.uk/2019/03/27/storing-utc-is-not-a-silver-bullet/&#34;&gt;blog post&lt;/a&gt;, you can read more about why it&#39;s not always a good idea to use &lt;code&gt;Instant&lt;/code&gt; everywhere.&lt;/p&gt; &lt;p&gt;Also, use &lt;code&gt;LocalDateTime&lt;/code&gt; to decode an &lt;code&gt;Instant&lt;/code&gt; to its local date-time components for display and UIs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;LocalDate&lt;/code&gt; to represent the date of an event that does not have a specific time associated with it (like a birth date).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;LocalTime&lt;/code&gt; to represent the time of an event that does not have a specific date associated with it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Operations&lt;/h2&gt; &#xA;&lt;p&gt;With the above types you can get the following operations done.&lt;/p&gt; &#xA;&lt;h3&gt;Getting the current moment of time&lt;/h3&gt; &#xA;&lt;p&gt;The current moment of time can be captured with the &lt;code&gt;Instant&lt;/code&gt; type. To obtain an &lt;code&gt;Instant&lt;/code&gt; corresponding to the current moment of time, use &lt;code&gt;now()&lt;/code&gt; function of the &lt;code&gt;Clock&lt;/code&gt; interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val clock: Clock = ...&#xA;val currentMoment = clock.now()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An instance of &lt;code&gt;Clock&lt;/code&gt; can be injected through the function/class parameters, or you can use its default implementation &lt;code&gt;Clock.System&lt;/code&gt; that represents the system clock:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val currentMoment = Clock.System.now()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting an instant to local date and time components&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;code&gt;Instant&lt;/code&gt; is just a counter of high resolution time intervals since the beginning of time scale. To get human readable components from an &lt;code&gt;Instant&lt;/code&gt; value, you need to convert it to the &lt;code&gt;LocalDateTime&lt;/code&gt; type that represents date and time components without a reference to the particular time zone.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;TimeZone&lt;/code&gt; type provides the rules to convert instants from and to date/time components.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val currentMoment: Instant = Clock.System.now()&#xA;val datetimeInUtc: LocalDateTime = currentMoment.toLocalDateTime(TimeZone.UTC)&#xA;val datetimeInSystemZone: LocalDateTime = currentMoment.toLocalDateTime(TimeZone.currentSystemDefault())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;LocalDateTime&lt;/code&gt; instance exposes familiar components of the Gregorian calendar: &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;dayOfMonth&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, and so on up to &lt;code&gt;nanosecond&lt;/code&gt;. The property &lt;code&gt;dayOfWeek&lt;/code&gt; shows what weekday that date is, and &lt;code&gt;dayOfYear&lt;/code&gt; shows the day number since the beginning of a year.&lt;/p&gt; &#xA;&lt;p&gt;Additional time zones can be acquired by their string identifier with the &lt;code&gt;TimeZone.of(id: String)&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val tzBerlin = TimeZone.of(&#34;Europe/Berlin&#34;)&#xA;val datetimeInBerlin = currentMoment.toLocalDateTime(tzBerlin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;LocalDateTime&lt;/code&gt; instance can be constructed from individual components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val kotlinReleaseDateTime = LocalDateTime(2016, 2, 15, 16, 57, 0, 0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An instant can be obtained from &lt;code&gt;LocalDateTime&lt;/code&gt; by interpreting it as a time moment in a particular &lt;code&gt;TimeZone&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val kotlinReleaseInstant = kotlinReleaseDateTime.toInstant(TimeZone.of(&#34;UTC+3&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting local date components&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;LocalDate&lt;/code&gt; represents a local date without time. You can obtain one from an &lt;code&gt;Instant&lt;/code&gt; by converting it to &lt;code&gt;LocalDateTime&lt;/code&gt; and taking its &lt;code&gt;date&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val now: Instant = Clock.System.now()&#xA;val today: LocalDate = now.toLocalDateTime(TimeZone.currentSystemDefault()).date&#xA;// or shorter&#xA;val today: LocalDate = Clock.System.todayIn(TimeZone.currentSystemDefault())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, that today&#39;s date really depends on the time zone in which you&#39;re observing the current moment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalDate&lt;/code&gt; can be constructed from three components, year, month, and day:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val knownDate = LocalDate(2020, 2, 21)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting local time components&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;LocalTime&lt;/code&gt; represents local time without date. You can obtain one from an &lt;code&gt;Instant&lt;/code&gt; by converting it to &lt;code&gt;LocalDateTime&lt;/code&gt; and taking its &lt;code&gt;time&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val now: Instant = Clock.System.now()&#xA;val thisTime: LocalTime = now.toLocalDateTime(TimeZone.currentSystemDefault()).time&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;LocalTime&lt;/code&gt; can be constructed from four components, hour, minute, second and nanosecond:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val knownTime = LocalTime(hour = 23, minute = 59, second = 12)&#xA;val timeWithNanos = LocalTime(hour = 23, minute = 59, second = 12, nanosecond = 999)&#xA;val hourMinute = LocalTime(hour = 12, minute = 13)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting instant to and from unix time&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;code&gt;Instant&lt;/code&gt; can be converted to a number of milliseconds since the Unix/POSIX epoch with the &lt;code&gt;toEpochMilliseconds()&lt;/code&gt; function. To convert back, use the companion object function &lt;code&gt;Instant.fromEpochMilliseconds(Long)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Converting instant and local date/time to and from the ISO 8601 string&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Instant&lt;/code&gt;, &lt;code&gt;LocalDateTime&lt;/code&gt;, &lt;code&gt;LocalDate&lt;/code&gt; and &lt;code&gt;LocalTime&lt;/code&gt; provide shortcuts for parsing and formatting them using the extended ISO-8601 format. The &lt;code&gt;toString()&lt;/code&gt; function is used to convert the value to a string in that format, and the &lt;code&gt;parse&lt;/code&gt; function in companion object is used to parse a string representation back.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val instantNow = Clock.System.now()&#xA;instantNow.toString()  // returns something like 2015-12-31T12:30:00Z&#xA;val instantBefore = Instant.parse(&#34;2010-06-01T22:19:44.475Z&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalDateTime&lt;/code&gt; uses a similar format, but without &lt;code&gt;Z&lt;/code&gt; UTC time zone designator in the end.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalDate&lt;/code&gt; uses a format with just year, month, and date components, e.g. &lt;code&gt;2010-06-01&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LocalTime&lt;/code&gt; uses a format with just hour, minute, second and (if non-zero) nanosecond components, e.g. &lt;code&gt;12:01:03&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;LocalDateTime.parse(&#34;2010-06-01T22:19:44&#34;)&#xA;LocalDate.parse(&#34;2010-06-01&#34;)&#xA;LocalTime.parse(&#34;12:01:03&#34;)&#xA;LocalTime.parse(&#34;12:00:03.999&#34;)&#xA;LocalTime.parse(&#34;12:0:03.999&#34;) // fails with an IllegalArgumentException&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with other string formats&lt;/h3&gt; &#xA;&lt;p&gt;When some data needs to be formatted in some format other than ISO-8601, one can define their own format or use some of the predefined ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// import kotlinx.datetime.format.*&#xA;&#xA;val dateFormat = LocalDate.Format {&#xA;    monthNumber(padding = Padding.SPACE)&#xA;    char(&#39;/&#39;)&#xA;    dayOfMonth()&#xA;    char(&#39; &#39;)&#xA;    year()&#xA;}&#xA;&#xA;val date = dateFormat.parse(&#34;12/24 2023&#34;)&#xA;println(date.format(LocalDate.Formats.ISO_BASIC)) // &#34;20231224&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Unicode format strings (like &lt;code&gt;yyyy-MM-dd&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Given a constant format string like the ones used by Java&#39;s &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html&#34;&gt;DateTimeFormatter.ofPattern&lt;/a&gt; can be converted to Kotlin code using the following invocation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// import kotlinx.datetime.format.*&#xA;&#xA;println(DateTimeFormat.formatAsKotlinBuilderDsl(DateTimeComponents.Format {&#xA;    byUnicodePattern(&#34;uuuu-MM-dd&#39;T&#39;HH:mm:ss[.SSS]Z&#34;)&#xA;}))&#xA;&#xA;// will print:&#xA;/*&#xA;date(LocalDate.Formats.ISO)&#xA;char(&#39;T&#39;)&#xA;hour()&#xA;char(&#39;:&#39;)&#xA;minute()&#xA;char(&#39;:&#39;)&#xA;second()&#xA;alternativeParsing({&#xA;}) {&#xA;    char(&#39;.&#39;)&#xA;    secondFraction(3)&#xA;}&#xA;offset(UtcOffset.Formats.FOUR_DIGITS)&#xA; */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When your format string is not constant, with the &lt;code&gt;FormatStringsInDatetimeFormats&lt;/code&gt; opt-in, you can use the format without converting it to Kotlin code beforehand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val formatPattern = &#34;yyyy-MM-dd&#39;T&#39;HH:mm:ss[.SSS]&#34;&#xA;&#xA;@OptIn(FormatStringsInDatetimeFormats::class)&#xA;val dateTimeFormat = LocalDateTime.Format {&#xA;    byUnicodePattern(formatPattern)&#xA;}&#xA;&#xA;dateTimeFormat.parse(&#34;2023-12-24T23:59:59&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parsing and formatting partial, compound or out-of-bounds data&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes, the required string format doesn&#39;t fully correspond to any of the classes &lt;code&gt;kotlinx-datetime&lt;/code&gt; provides. In these cases, &lt;code&gt;DateTimeComponents&lt;/code&gt;, a collection of all date-time fields, can be used instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;// import kotlinx.datetime.format.*&#xA;&#xA;val yearMonth = DateTimeComponents.Format { year(); char(&#39;-&#39;); monthNumber() }&#xA;    .parse(&#34;2024-01&#34;)&#xA;println(yearMonth.year)&#xA;println(yearMonth.monthNumber)&#xA;&#xA;val dateTimeOffset = DateTimeComponents.Formats.ISO_DATE_TIME_OFFSET&#xA;    .parse(&#34;2023-01-07T23:16:15.53+02:00&#34;)&#xA;println(dateTimeOffset.toUtcOffset()) // +02:00&#xA;println(dateTimeOffset.toLocalDateTime()) // 2023-01-07T23:16:15.53&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Occasionally, one can encounter strings where the values are slightly off: for example, &lt;code&gt;23:59:60&lt;/code&gt;, where &lt;code&gt;60&lt;/code&gt; is an invalid value for the second. &lt;code&gt;DateTimeComponents&lt;/code&gt; allows parsing such values as well and then mutating them before conversion.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val time = DateTimeComponents.Format { time(LocalTime.Formats.ISO) }&#xA;    .parse(&#34;23:59:60&#34;).apply {&#xA;        if (second == 60) second = 59&#xA;    }.toLocalTime()&#xA;println(time) // 23:59:59&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because &lt;code&gt;DateTimeComponents&lt;/code&gt; is provided specifically for parsing and formatting, there is no way to construct it normally. If one needs to format partial, complex or out-of-bounds data, the &lt;code&gt;format&lt;/code&gt; function allows building &lt;code&gt;DateTimeComponents&lt;/code&gt; specifically for formatting it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;DateTimeComponents.Formats.RFC_1123.format {&#xA;    // the receiver of this lambda is DateTimeComponents&#xA;    setDate(LocalDate(2023, 1, 7))&#xA;    hour = 23&#xA;    minute = 59&#xA;    second = 60&#xA;    setOffset(UtcOffset(hours = 2))&#xA;} // Sat, 7 Jan 2023 23:59:60 +0200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Instant arithmetic&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val now = Clock.System.now()&#xA;val instantInThePast: Instant = Instant.parse(&#34;2020-01-01T00:00:00Z&#34;)&#xA;val durationSinceThen: Duration = now - instantInThePast&#xA;val equidistantInstantInTheFuture: Instant = now + durationSinceThen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Duration&lt;/code&gt; is a type from the experimental &lt;code&gt;kotlin.time&lt;/code&gt; package in the Kotlin standard library. This type holds the amount of time that can be represented in different time units: from nanoseconds to 24H days.&lt;/p&gt; &#xA;&lt;p&gt;To get the calendar difference between two instants you can use the &lt;code&gt;Instant.periodUntil(Instant, TimeZone)&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val period: DateTimePeriod = instantInThePast.periodUntil(Clock.System.now(), TimeZone.UTC)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;DateTimePeriod&lt;/code&gt; represents a difference between two particular moments as a sum of calendar components, like &#34;2 years, 3 months, 10 days, and 22 hours&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The difference can be calculated as an integer amount of specified date or time units:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val diffInMonths = instantInThePast.until(Clock.System.now(), DateTimeUnit.MONTH, TimeZone.UTC)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also shortcuts &lt;code&gt;yearsUntil(...)&lt;/code&gt;, &lt;code&gt;monthsUntil(...)&lt;/code&gt;, and &lt;code&gt;daysUntil(...)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A particular amount of date/time units or a date/time period can be added to an &lt;code&gt;Instant&lt;/code&gt; with the &lt;code&gt;plus&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val now = Clock.System.now()&#xA;val systemTZ = TimeZone.currentSystemDefault()&#xA;val tomorrow = now.plus(2, DateTimeUnit.DAY, systemTZ)&#xA;val threeYearsAndAMonthLater = now.plus(DateTimePeriod(years = 3, months = 1), systemTZ)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;plus&lt;/code&gt; and &lt;code&gt;...until&lt;/code&gt; operations require a &lt;code&gt;TimeZone&lt;/code&gt; as a parameter because the calendar interval between two particular instants can be different, when calculated in different time zones.&lt;/p&gt; &#xA;&lt;h3&gt;Date arithmetic&lt;/h3&gt; &#xA;&lt;p&gt;Similar operations with date units are provided for &lt;code&gt;LocalDate&lt;/code&gt; type:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalDate.plus(number, DateTimeUnit.DateBased)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalDate.plus(DatePeriod)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalDate.until(LocalDate, DateTimeUnit.DateBased)&lt;/code&gt; and the shortcuts &lt;code&gt;yearsUntil&lt;/code&gt;, &lt;code&gt;monthUntil&lt;/code&gt;, &lt;code&gt;daysUntil&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LocalDate.periodUntil(LocalDate): DatePeriod&lt;/code&gt; and &lt;code&gt;LocalDate.minus(LocalDate): DatePeriod&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notice that, instead of the general &lt;code&gt;DateTimeUnit&lt;/code&gt; and &lt;code&gt;DateTimePeriod&lt;/code&gt; types, we&#39;re using their subtypes &lt;code&gt;DateTimeUnit.DateBased&lt;/code&gt; and &lt;code&gt;DatePeriod&lt;/code&gt; respectively. This allows preventing the situations when time components are being added to a date at compile time.&lt;/p&gt; &#xA;&lt;h3&gt;Date + time arithmetic&lt;/h3&gt; &#xA;&lt;p&gt;Arithmetic on &lt;code&gt;LocalDateTime&lt;/code&gt; is intentionally omitted. The reason for this is that the presence of daylight saving time transitions (changing from standard time to daylight saving time and back) causes &lt;code&gt;LocalDateTime&lt;/code&gt; arithmetic to be ill-defined. For example, consider time gaps (or, as &lt;a href=&#34;https://stackoverflow.com/tags/dst/info&#34;&gt;&lt;code&gt;dst&lt;/code&gt; tag wiki on Stack Overflow&lt;/a&gt; calls them, &#34;spring forward&#34; transitions), that is, ranges of date + time combinations that never occur in a given time zone due to clocks moving forward. If we allowed &lt;code&gt;LocalDateTime&lt;/code&gt; arithmetic that ignored time zones, then it could result in &lt;code&gt;LocalDateTime&lt;/code&gt; instances that are inside a time gap and are invalid in the implied time zone.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, the recommended way to use a &lt;code&gt;LocalDateTime&lt;/code&gt; is to treat it as a representation of an &lt;code&gt;Instant&lt;/code&gt;, perform all the required arithmetic on &lt;code&gt;Instant&lt;/code&gt; values, and only convert to &lt;code&gt;LocalDateTime&lt;/code&gt; when a human-readable representation is needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val timeZone = TimeZone.of(&#34;Europe/Berlin&#34;)&#xA;val localDateTime = LocalDateTime.parse(&#34;2021-03-27T02:16:20&#34;)&#xA;val instant = localDateTime.toInstant(timeZone)&#xA;&#xA;val instantOneDayLater = instant.plus(1, DateTimeUnit.DAY, timeZone)&#xA;val localDateTimeOneDayLater = instantOneDayLater.toLocalDateTime(timeZone)&#xA;// 2021-03-28T03:16:20, as 02:16:20 that day is in a time gap&#xA;&#xA;val instantTwoDaysLater = instant.plus(2, DateTimeUnit.DAY, timeZone)&#xA;val localDateTimeTwoDaysLater = instantTwoDaysLater.toLocalDateTime(timeZone)&#xA;// 2021-03-29T02:16:20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;The implementation of date/time types, such as &lt;code&gt;Instant&lt;/code&gt;, &lt;code&gt;LocalDateTime&lt;/code&gt;, &lt;code&gt;TimeZone&lt;/code&gt; and so on, relies on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;in JVM: &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html&#34;&gt;&lt;code&gt;java.time&lt;/code&gt;&lt;/a&gt; API;&lt;/li&gt; &#xA; &lt;li&gt;in Js and Wasm-Js: &lt;a href=&#34;https://js-joda.github.io/js-joda/&#34;&gt;&lt;code&gt;js-joda&lt;/code&gt;&lt;/a&gt; library;&lt;/li&gt; &#xA; &lt;li&gt;in Native: based on the &lt;a href=&#34;https://www.threeten.org/threetenbp/&#34;&gt;ThreeTen backport project&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;time zone support is provided by &lt;a href=&#34;https://github.com/HowardHinnant/date/&#34;&gt;date&lt;/a&gt; C++ library;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known/open issues, work TBD&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Some kind of &lt;code&gt;Clock&lt;/code&gt; interface is needed as a pluggable replacement for &lt;code&gt;Instant.now()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Flexible locale-neutral parsing and formatting facilities are needed to support various date/time interchange formats that are used in practice (in particular, various RFCs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using in your projects&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that the library is experimental, and the API is subject to change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The library is published to Maven Central.&lt;/p&gt; &#xA;&lt;p&gt;The library is compatible with the Kotlin Standard Library not lower than &lt;code&gt;1.9.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you target Android devices running &lt;strong&gt;below API 26&lt;/strong&gt;, you need to use Android Gradle plugin 4.0 or newer and enable &lt;a href=&#34;https://developer.android.com/studio/write/java8-support#library-desugaring&#34;&gt;core library desugaring&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Gradle&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the Maven Central repository if it is not already there:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;repositories {&#xA;    mavenCentral()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In multiplatform projects, add a dependency to the commonMain source set dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;kotlin {&#xA;    sourceSets {&#xA;        commonMain {&#xA;             dependencies {&#xA;                 implementation(&#34;org.jetbrains.kotlinx:kotlinx-datetime:0.6.0-RC.2&#34;)&#xA;             }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To use the library in a single-platform project, add a dependency to the dependencies block.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {&#xA;    implementation(&#34;org.jetbrains.kotlinx:kotlinx-datetime:0.6.0-RC.2&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Note about time zones in JS&lt;/h4&gt; &#xA;&lt;p&gt;By default, there&#39;s only one time zone available in Kotlin/JS: the &lt;code&gt;SYSTEM&lt;/code&gt; time zone with a fixed offset.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use all time zones in Kotlin/JS platform, you need to add the following npm dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;kotlin {&#xA;    sourceSets {&#xA;        val jsMain by getting {&#xA;            dependencies {&#xA;                implementation(npm(&#34;@js-joda/timezone&#34;, &#34;2.3.0&#34;))&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and after that add the following initialization code in your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;@JsModule(&#34;@js-joda/timezone&#34;)&#xA;@JsNonModule&#xA;external object JsJodaTimeZoneModule&#xA;&#xA;private val jsJodaTz = JsJodaTimeZoneModule&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maven&lt;/h3&gt; &#xA;&lt;p&gt;Add a dependency to the &lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;/code&gt; element. Note that you need to use the platform-specific &lt;code&gt;-jvm&lt;/code&gt; artifact in Maven.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;org.jetbrains.kotlinx&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;kotlinx-datetime-jvm&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;0.6.0-RC.2&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;The project requires JDK 8 to build classes and to run tests. Gradle will try to find it among the installed JDKs or &lt;a href=&#34;https://docs.gradle.org/current/userguide/toolchains.html#sec:provisioning&#34;&gt;provision&lt;/a&gt; it automatically if it couldn&#39;t be found. The path to JDK 8 can be additionally specified with the environment variable &lt;code&gt;JDK_8&lt;/code&gt;. For local builds, you can use a later version of JDK if you don&#39;t have that version installed. Specify the version of this JDK with the &lt;code&gt;java.mainToolchainVersion&lt;/code&gt; Gradle property.&lt;/p&gt; &#xA;&lt;p&gt;After that, the project can be opened in IDEA and built with Gradle.&lt;/p&gt; &#xA;&lt;p&gt;For building and running benchmarks, see &lt;a href=&#34;https://raw.githubusercontent.com/Kotlin/kotlinx-datetime/master/benchmarks/README.md&#34;&gt;README.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ReVanced/revanced-patcher</title>
    <updated>2024-03-10T01:54:36Z</updated>
    <id>tag:github.com,2024-03-10:/ReVanced/revanced-patcher</id>
    <link href="https://github.com/ReVanced/revanced-patcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💉 ReVanced Patcher used to patch Android applications&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source width=&#34;256px&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;assets/revanced-headline/revanced-headline-vertical-dark.svg&#34;&gt; &#xA;  &lt;img width=&#34;256px&#34; src=&#34;https://raw.githubusercontent.com/ReVanced/revanced-patcher/main/assets/revanced-headline/revanced-headline-vertical-light.svg?sanitize=true&#34;&gt; &#xA; &lt;/picture&gt; &lt;br&gt; &lt;a href=&#34;https://revanced.app/&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source height=&#34;24px&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;assets/revanced-logo/revanced-logo.svg&#34;&gt; &#xA;   &lt;img height=&#34;24px&#34; src=&#34;https://raw.githubusercontent.com/ReVanced/revanced-patcher/main/assets/revanced-logo/revanced-logo.svg?sanitize=true&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/ReVanced&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source height=&#34;24px&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://i.ibb.co/dMMmCrW/Git-Hub-Mark.png&#34;&gt; &#xA;   &lt;img height=&#34;24px&#34; src=&#34;https://i.ibb.co/9wV3HGF/Git-Hub-Mark-Light.png&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;http://revanced.app/discord&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source height=&#34;24px&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/13122796/178032563-d4e084b7-244e-4358-af50-26bde6dd4996.png&#34;&gt; &#xA;   &lt;img height=&#34;24px&#34; src=&#34;https://user-images.githubusercontent.com/13122796/178032563-d4e084b7-244e-4358-af50-26bde6dd4996.png&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://reddit.com/r/revancedapp&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source height=&#34;24px&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/13122796/178032351-9d9d5619-8ef7-470a-9eec-2744ece54553.png&#34;&gt; &#xA;   &lt;img height=&#34;24px&#34; src=&#34;https://user-images.githubusercontent.com/13122796/178032351-9d9d5619-8ef7-470a-9eec-2744ece54553.png&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://t.me/app_revanced&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source height=&#34;24px&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/13122796/178032213-faf25ab8-0bc3-4a94-a730-b524c96df124.png&#34;&gt; &#xA;   &lt;img height=&#34;24px&#34; src=&#34;https://user-images.githubusercontent.com/13122796/178032213-faf25ab8-0bc3-4a94-a730-b524c96df124.png&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://x.com/revancedapp&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/93124920/270180600-7c1b38bf-889b-4d68-bd5e-b9d86f91421a.png&#34;&gt; &#xA;   &lt;img height=&#34;24px&#34; src=&#34;https://user-images.githubusercontent.com/93124920/270108715-d80743fa-b330-4809-b1e6-79fbdc60d09c.png&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.youtube.com/@ReVanced&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source height=&#34;24px&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/13122796/178032714-c51c7492-0666-44ac-99c2-f003a695ab50.png&#34;&gt; &#xA;   &lt;img height=&#34;24px&#34; src=&#34;https://user-images.githubusercontent.com/13122796/178032714-c51c7492-0666-44ac-99c2-f003a695ab50.png&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;br&gt; &lt;br&gt; Continuing the legacy of Vanced &lt;/p&gt; &#xA;&lt;h1&gt;💉 ReVanced Patcher&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/ReVanced/revanced-patcher/release.yml&#34; alt=&#34;GitHub Workflow Status (with event)&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-yellow.svg?sanitize=true&#34; alt=&#34;GPLv3 License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ReVanced Patcher used to patch Android applications.&lt;/p&gt; &#xA;&lt;h2&gt;❓ About&lt;/h2&gt; &#xA;&lt;p&gt;ReVanced Patcher is a library that is used to patch Android applications.&lt;br&gt; It powers &lt;a href=&#34;https://github.com/ReVanced/revanced-manager&#34;&gt;ReVanced Manager&lt;/a&gt;, &lt;a href=&#34;https://github.com/ReVanced/revanced-cli&#34;&gt;ReVanced CLI&lt;/a&gt; and &lt;a href=&#34;https://github.com/ReVanced/revanced-library&#34;&gt;ReVanced Library&lt;/a&gt; and a rich set of patches have been developed using ReVanced Patcher in the &lt;a href=&#34;https://github.com/ReVanced/revanced-patches&#34;&gt;ReVanced Patches&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;💪 Features&lt;/h2&gt; &#xA;&lt;p&gt;Some of the features the ReVanced Patcher provides are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔧 &lt;strong&gt;Patch Dalvik VM bytecode&lt;/strong&gt;: Disassemble and assemble Dalvik bytecode&lt;/li&gt; &#xA; &lt;li&gt;📦 &lt;strong&gt;Patch APK resources&lt;/strong&gt;: Decode and build Android APK resources&lt;/li&gt; &#xA; &lt;li&gt;📂 &lt;strong&gt;Patch arbitrary APK files&lt;/strong&gt;: Read and write arbitrary files directly from and to APK files&lt;/li&gt; &#xA; &lt;li&gt;🧩 &lt;strong&gt;Write modular patches&lt;/strong&gt;: Extensive API to write modular patches that can patch Dalvik VM bytecode, APK resources and arbitrary APK files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 How to get started&lt;/h2&gt; &#xA;&lt;p&gt;To use ReVanced Patcher in your project, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry#using-a-published-package&#34;&gt;Add the repository&lt;/a&gt; to your project&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the dependency to your project:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-kt&#34;&gt; dependencies {&#xA;     implementation(&#34;app.revanced:revanced-patcher:{$version}&#34;)&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For a minimal project configuration, see &lt;a href=&#34;https://github.com/ReVanced/revanced-patches-template&#34;&gt;ReVanced Patches template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📚 Everything else&lt;/h2&gt; &#xA;&lt;h3&gt;📙 Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Thank you for considering contributing to ReVanced Patcher. You can find the contribution guidelines &lt;a href=&#34;https://raw.githubusercontent.com/ReVanced/revanced-patcher/main/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;🛠️ Building&lt;/h3&gt; &#xA;&lt;p&gt;To build ReVanced Patcher, you can follow the &lt;a href=&#34;https://github.com/ReVanced/revanced-documentation&#34;&gt;ReVanced documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;📃 Documentation&lt;/h3&gt; &#xA;&lt;p&gt;The documentation contains the fundamentals of ReVanced Patcher and how to use ReVanced Patcher to create patches. You can find it &lt;a href=&#34;https://github.com/ReVanced/revanced-patcher/tree/docs/docs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📜 Licence&lt;/h2&gt; &#xA;&lt;p&gt;ReVanced Patcher is licensed under the GPLv3 license. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/ReVanced/revanced-patcher/main/LICENSE&#34;&gt;licence file&lt;/a&gt; for more information. &lt;a href=&#34;https://www.tldrlegal.com/license/gnu-general-public-license-v3-gpl-3&#34;&gt;tl;dr&lt;/a&gt; you may copy, distribute and modify ReVanced Patcher as long as you track changes/dates in source files. Any modifications to ReVanced Patcher must also be made available under the GPL, along with build &amp;amp; install instructions.&lt;/p&gt;</summary>
  </entry>
</feed>