<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-28T01:24:35Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Octoberfest7/CVE-2023-36874_BOF</title>
    <updated>2023-08-28T01:24:35Z</updated>
    <id>tag:github.com,2023-08-28:/Octoberfest7/CVE-2023-36874_BOF</id>
    <link href="https://github.com/Octoberfest7/CVE-2023-36874_BOF" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Weaponized CobaltStrike BOF for CVE-2023-36874 Windows Error Reporting LPE&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2023-36874 Windows Error Reporting LPE BOF&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This is a mature and operational CobaltStrike BOF implementation of Filip Dragovic&#39;s (@filip_dragovic) &lt;a href=&#34;https://github.com/Wh04m1001/CVE-2023-36874/tree/main&#34;&gt;CVE-2023-36874 Windows Error Reporting LPE exploit&lt;/a&gt;. He did the heavy lifting in terms of creating a working exploit by reversing the vulnerable DLL in question and creating the undocumented COM structs that are critical to this exploit.&lt;/p&gt; &#xA;&lt;p&gt;This BOF will drop a user-specified EXE to disk on the target machine and then trigger the vulnerability, resulting in the EXE being ran by SYSTEM.&lt;/p&gt; &#xA;&lt;p&gt;Microsoft credits Google&#39;s Threat Analysis Group for disclosure of this vulnerability, however it came to my attention via &lt;a href=&#34;https://www.crowdstrike.com/blog/falcon-complete-zero-day-exploit-cve-2023-36874/&#34;&gt;CrowdStrike&#39;s published research&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This blog post lists many different artifacts related to this exploit; based on the naming convention of the artifacts (8.exe, 2016.exe, 2019.exe, 10new+11.exe, etc) as well as the fact that &lt;a href=&#34;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36874&#34;&gt;Microsoft released patches&lt;/a&gt; for it going all the way back to Server 2008, it can be inferred that this vulnerability affects quite a few different versions of Windows.&lt;/p&gt; &#xA;&lt;p&gt;This BOF is only functional against Windows 10 and Windows 11 21H1 - 22H2; It may work against 20H1/H2 as well, but I don&#39;t have a machine to test it. On earlier versions of Windows, this exploit will crash the process that runs it. I have a hunch this relates to differences in wercplsupport.dll COM related structures and that with some extra work this should be overcomeable, but there are lots of other exploits out there for previous versions of Windows so I will leave that task to others for now.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Load wer_lpe.cna in CobaltStrike and the wer_lpe command will populate.&lt;/p&gt; &#xA;&lt;p&gt;Provide the path to the EXE you want to upload, and optionally a directory that your current low-priv user has write access to. If no directory is specified, wer_lpe will attempt to write to Beacon&#39;s current directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Octoberfest7/CVE-2023-36874_BOF/assets/91164728/f696f1ac-d200-44f1-987d-700a641e990f&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Octoberfest7/CVE-2023-36874_BOF/main/wer_lpe.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Evasion / Customization&lt;/h2&gt; &#xA;&lt;p&gt;A couple additional features were added to the original POC in order to maintain OPSEC/try to shake static signatures as well as automatically cleanup after exploitation.&lt;/p&gt; &#xA;&lt;p&gt;As part of the exploit, a new folder must be created in the C:\ProgramData\Microsoft\Windows\WER\ReportArchive directory. This folder will hold the Report.wer file that must be dropped to disk as part of the exploit chain. The original exploit from Filip creates a directory called &#34;MyFolder&#34;. By looking at real folders/reports contained in the ReportArchive directory we can get a better idea of a naming convention that will better slip by low-hanging detections.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Octoberfest7/CVE-2023-36874_BOF/assets/91164728/1563c6c2-7396-491c-9bc7-61bfe3596bda&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The BOF contains stubs of two real folders found within a machine&#39;s ReportArchive (one is commented out) directory. At runtime, wer_lpe will randomly generate a GUID and append it to the selected stub in order to create a believable (and statistically unique) folder in which to create the Report.wer file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Octoberfest7/CVE-2023-36874_BOF/assets/91164728/fd631c77-9a5e-4291-aed9-46c53c3b7629&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The report.wer file is another easy static indicator by which this exploit can be detected. The original exploit packages the Report.wer file as a resource within the EXE; this BOF will locate and read in &#39;Report.wer&#39; from the exploit directory on the attack machine and send it to the Beacon to write to disk. This opens the door to user&#39;s replacing the pre-packaged Report.wer file with an arbitrary one of their choosing.&lt;/p&gt; &#xA;&lt;p&gt;Several of the COM calls within the exploit require arbitrary strings in order for the exploit to proceed; these have also been replaced with runtime-generated random strings.&lt;/p&gt; &#xA;&lt;p&gt;Being that this exploit runs an arbitrary EXE, cleanup can become something of a problem if you want your EXE to run continuously (in the case of having it run a new Beacon) because the EXE will be locked on disk. Wer_lpe has implemented the &lt;a href=&#34;https://github.com/LloydLabs/delete-self-poc&#34;&gt;Self-Deletion&lt;/a&gt; created by LloydLabs (which I continue to get fantastic mileage out of) in order to combat this issue. Wer_lpe will attempt to delete/cleanup all files and directories created during the course of the exploit and provide a status report of it&#39;s success/failure in doing so.&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;Because trying to run an unsigned, arbitrary EXE in 2023 on a target machine is often an exercise in futility, I explored trying to have the exploit run the REAL wermgr.exe (copied into an arbitrary directory) in order to take advantage of DLL sideloading opportunities. Due to the nature of the exploit, this is not possible. See &lt;a href=&#34;https://twitter.com/jonasLyk/status/1694508890933608923?s=20&#34;&gt;this Twitter thread&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;This exploit will fail if ran by a user who has local Admin rights on the machine; this is due to the vulnerable code impersonating the user with (paraphrasing) the &#34;highest available integrity&#34;. For a user who is a local Admin, this means that their Admin token will be impersonated, which has a separate DOS device map than their medium integrity token which has the requisite redirection implemented in order to trigger the vulnerability. This exploit is not a replacement for a UAC bypass.&lt;/p&gt; &#xA;&lt;h2&gt;Mitigation&lt;/h2&gt; &#xA;&lt;p&gt;Microsoft released a patch for this vulnerability on July 11, 2023 as part of the monthly security update for almost all conceivable OS&#39;s that people might still be running; patch your machines people.&lt;/p&gt; &#xA;&lt;h2&gt;Credits / Resources&lt;/h2&gt; &#xA;&lt;p&gt;First and foremost, huge thanks to Filip Dragovic (@filip_dragovic) for his &lt;a href=&#34;https://github.com/Wh04m1001/CVE-2023-36874/tree/main&#34;&gt;working code&lt;/a&gt; as well as his willingness to chat with me and educate me on his development process for this exploit.&lt;/p&gt; &#xA;&lt;p&gt;CrowdStrike for their &lt;a href=&#34;https://www.crowdstrike.com/blog/falcon-complete-zero-day-exploit-cve-2023-36874/&#34;&gt;article&lt;/a&gt;.&lt;br&gt; LloydLabs for his &lt;a href=&#34;https://github.com/LloydLabs/delete-self-poc&#34;&gt;Self Deletion&lt;/a&gt; code.&lt;/p&gt;</summary>
  </entry>
</feed>