<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-02T01:29:50Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lcompilers/lpython</title>
    <updated>2023-08-02T01:29:50Z</updated>
    <id>tag:github.com,2023-08-02:/lcompilers/lpython</id>
    <link href="https://github.com/lcompilers/lpython" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python compiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LPython&lt;/h1&gt; &#xA;&lt;p&gt;LPython is a Python compiler. It is in heavy development, currently in alpha stage. LPython works on Windows, macOS and Linux. Some of the goals of LPython include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The best possible performance for numerical, array-oriented code&lt;/li&gt; &#xA; &lt;li&gt;Run on all platforms&lt;/li&gt; &#xA; &lt;li&gt;Compile a subset of Python yet be fully compatible with Python&lt;/li&gt; &#xA; &lt;li&gt;Explore designs so that LPython eventually can compile all Python code&lt;/li&gt; &#xA; &lt;li&gt;Fast compilation&lt;/li&gt; &#xA; &lt;li&gt;Excellent user-friendly diagnostic messages: error, warnings, hints, notes, etc.&lt;/li&gt; &#xA; &lt;li&gt;Ahead-of-Time compilation to binaries, plus interactive usage (Jupyter notebook)&lt;/li&gt; &#xA; &lt;li&gt;Transforming Python code to C++, Fortran and other languages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And more.&lt;/p&gt; &#xA;&lt;h1&gt;Sponsors&lt;/h1&gt; &#xA;&lt;p&gt;LPython has been sponsored by &lt;a href=&#34;https://www.gsitechnology.com/&#34;&gt;GSI Technology&lt;/a&gt;. Our summer students were sponsored by Google Summer of Code via Python Software Foundation. The intermediate representation and backends are shared with LFortran, see that project for a list of sponsors.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Step 0: Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Here is the list of requirements needed to build LPython:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python (3.10+)&lt;/li&gt; &#xA; &lt;li&gt;Conda&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Windows, these are additionally required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Miniforge Prompt&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio (with &#34;Desktop Development with C++&#34; workload)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please follow the steps for your desired platform.&lt;/p&gt; &#xA;&lt;h2&gt;Step 1: Install Conda&lt;/h2&gt; &#xA;&lt;p&gt;This step involves installing Conda using a conda-forge distribution called Miniforge.&lt;/p&gt; &#xA;&lt;p&gt;Please follow the instructions here to install Conda on your platform:&lt;/p&gt; &#xA;&lt;p&gt;Miniforge download link (for Linux, MacOS and Windows): &lt;a href=&#34;https://github.com/conda-forge/miniforge/#download&#34;&gt;https://github.com/conda-forge/miniforge/#download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Step 2: Setting up&lt;/h2&gt; &#xA;&lt;p&gt;This step involves setting up the required configuration to run the programs in LPython.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Run the below command to install &lt;code&gt;binutils-dev&lt;/code&gt; package on Linux.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install binutils-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Please follow the below steps for Windows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Visual Studio, for example the version 2022.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can download the Community version for free from: &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;https://visualstudio.microsoft.com/downloads/&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;After installing Visual Studio and running the Visual Studio Installer, you must install the &#34;Desktop Development with C++&#34; workload which will install Visual C++ Compiler (MSVC).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch the Miniforge prompt from the Desktop.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It is recommended to use MiniForge instead of Powershell as the main terminal to build and write code for LPython.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the MiniForge Prompt, initialize the MSVC compiler using the below command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;call &#34;C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd&#34; -arch=x64&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can optionally test MSVC via:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cl /?&#xA;link /?&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Both commands must print several pages of help text.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Step 3: Build LPython&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone LPython using the following commands&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/lcompilers/lpython.git&#xA;cd lpython&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You may also use GitHub Desktop to do the same.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linux and MacOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a Conda environment using the pre-existing file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda env create -f environment_unix.yml&#xA;conda activate lp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate prerequisite files; build in Debug Mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build0.sh&#xA;./build1.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a Conda environment using the pre-existing file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda env create -f environment_win.yml&#xA;conda activate lp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate prerequisite files; build in Release Mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;call build0.bat&#xA;call build1.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tests and examples&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ctest&#xA;inst\bin\lpython examples\expr2.py&#xA;inst\bin\lpython examples\expr2.py -o a.out&#xA;a.out&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Whenever you are updating a test case file, you also need to update all the reference results associated with that test case:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;python run_tests.py -u --skip-run-with-dbg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To see all the options associated with LPython test suite, use:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;python run_tests.py --help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tests:&lt;/h2&gt; &#xA;&lt;h3&gt;Linux or MacOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run tests:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ctest&#xA;./run_tests.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run integration tests:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd integration_tests&#xA;./run_tests.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run integration tests&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python run_tests.py --skip-run-with-dbg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update reference tests&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python run_tests.py -u --skip-run-with-dbg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Speed up Integration Tests on MacOS&lt;/h2&gt; &#xA;&lt;p&gt;Integration tests run slowly because Apple checks the hash of each executable online before running.&lt;/p&gt; &#xA;&lt;p&gt;You can turn off that feature in the Privacy tab of the Security and Privacy item of System Preferences &amp;gt; Developer Tools &amp;gt; Terminal.app &amp;gt; &#34;allow the apps below to run software locally that does not meet the system&#39;s security policy.&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Examples (Linux or MacOS)&lt;/h2&gt; &#xA;&lt;p&gt;You can run the following examples manually in a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./src/bin/lpython examples/expr2.py&#xA;./src/bin/lpython examples/expr2.py -o expr&#xA;./expr&#xA;./src/bin/lpython --show-ast examples/expr2.py&#xA;./src/bin/lpython --show-asr examples/expr2.py&#xA;./src/bin/lpython --show-cpp examples/expr2.py&#xA;./src/bin/lpython --show-llvm examples/expr2.py&#xA;./src/bin/lpython --show-c examples/expr2.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from anyone, even if you are new to compilers or to open source. It might sound daunting to contribute to a compiler at first, but please do, it is not complicated. We will help you with technical issues and help improve your contribution so that it can be merged.&lt;/p&gt; &#xA;&lt;p&gt;To contribute, submit a Pull Request (PR) against our repository at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lcompilers/lpython&#34;&gt;https://github.com/lcompilers/lpython&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;and don&#39;t forget to clean your history, see &lt;a href=&#34;https://raw.githubusercontent.com/lcompilers/lpython/main/doc/src/rebasing.md&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please report any bugs you may find at our issue tracker: &lt;a href=&#34;https://github.com/lcompilers/lpython/issues&#34;&gt;https://github.com/lcompilers/lpython/issues&lt;/a&gt;. Or, even better, fork the repository on GitHub and create a PR. We welcome all changes, big or small, and we will help you make a PR if you are new to git.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions or need help, please ask us at Zulip (&lt;a href=&#34;https://lfortran.zulipchat.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?sanitize=true&#34; alt=&#34;project chat&#34;&gt;&lt;/a&gt;) or our &lt;a href=&#34;https://groups.io/g/lfortran&#34;&gt;mailinglist&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/lcompilers/lpython/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document for more information.&lt;/p&gt;</summary>
  </entry>
</feed>