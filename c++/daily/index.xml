<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-05T01:32:43Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>project-chip/connectedhomeip</title>
    <updated>2022-06-05T01:32:43Z</updated>
    <id>tag:github.com,2022-06-05:/project-chip/connectedhomeip</id>
    <link href="https://github.com/project-chip/connectedhomeip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Matter (formerly Project CHIP) is creating more connections between more objects, simplifying development for manufacturers and increasing compatibility for consumers, guided by the Connectivity Standards Alliance (formerly Zigbee Alliance).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Matter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/Builds/badge.svg?sanitize=true&#34; alt=&#34;Builds&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/examples-efr32.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20EFR32/badge.svg?sanitize=true&#34; alt=&#34;Examples - EFR32&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/examples-esp32.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20ESP32/badge.svg?sanitize=true&#34; alt=&#34;Examples - ESP32&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/examples-linux-imx.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20i.MX%20Linux/badge.svg?sanitize=true&#34; alt=&#34;Examples - i.MX Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/examples-k32w.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20K32W%20with%20SE051/badge.svg?sanitize=true&#34; alt=&#34;Examples - K32W with SE051&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/examples-linux-standalone.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20Linux%20Standalone/badge.svg?sanitize=true&#34; alt=&#34;Examples - Linux Standalone&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/examples-nrfconnect.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20nRF%20Connect%20SDK/badge.svg?sanitize=true&#34; alt=&#34;Examples - nRF Connect SDK&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/examples-qpg.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20QPG/badge.svg?sanitize=true&#34; alt=&#34;Examples - QPG&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/examples-cc13x2x7_26x2x7.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20TI%20CC26X2X7/badge.svg?sanitize=true&#34; alt=&#34;Examples - TI CC26X2X7&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/android.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/Android/badge.svg?sanitize=true&#34; alt=&#34;Android&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/unit_integration_test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/Unit%20/%20Interation%20Tests/badge.svg?sanitize=true&#34; alt=&#34;Unit / Interation Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/cirque.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/Cirque/badge.svg?sanitize=true&#34; alt=&#34;Cirque&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/qemu.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/QEMU/badge.svg?sanitize=true&#34; alt=&#34;QEMU&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/project-chip/connectedhomeip/actions/workflows/zap_templates.yaml&#34;&gt;&lt;img src=&#34;https://github.com/project-chip/connectedhomeip/workflows/ZAP/badge.svg?sanitize=true&#34; alt=&#34;ZAP Templates&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is Matter?&lt;/h1&gt; &#xA;&lt;p&gt;Matter (formerly Project Connected Home over IP, or Project CHIP) is a new Working Group within the Connectivity Standards Alliance (CSA, formerly Zigbee Alliance). This Working Group plans to develop and promote the adoption of a new, royalty-free connectivity standard to increase compatibility among smart home products, with security as a fundamental design tenet.&lt;/p&gt; &#xA;&lt;p&gt;The goal of the Matter project is to simplify development for manufacturers and increase compatibility for consumers. The project is built around a shared belief that smart home devices should be secure, reliable, and seamless to use. By building upon Internet Protocol (IP), the project aims to enable communication across smart home devices, mobile apps, and cloud services and to define a specific set of IP-based networking technologies for device certification.&lt;/p&gt; &#xA;&lt;p&gt;The CSA officially opened the Matter Working Group on January 17, 2020 and is in the process of drafting the specification.&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://buildwithmatter.com&#34;&gt;buildwithmatter.com&lt;/a&gt; to learn more and read the latest news and updates about the project.&lt;/p&gt; &#xA;&lt;h1&gt;Project Overview&lt;/h1&gt; &#xA;&lt;h2&gt;Development Goals&lt;/h2&gt; &#xA;&lt;p&gt;Matter is developed with the following goals and principles in mind:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unifying:&lt;/strong&gt; Matter will produce a new specification, building with and on top of market-tested, existing technologies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Interoperable:&lt;/strong&gt; The specification permits communication between any Matter-certified device, subject to users’ permission.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Secure:&lt;/strong&gt; The specification leverages modern security practices and protocols.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;User Control:&lt;/strong&gt; The end user is in control of authorization for interaction with devices.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Federated:&lt;/strong&gt; No single entity serves as a throttle or a single-point-of-failure for root of trust.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Robust:&lt;/strong&gt; The set of protocols specify a complete lifecycle of a device — starting with the seamless out-of-box experience, through operational protocols, to device and system management specifications required for proper function in the presence of change.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Low Overhead:&lt;/strong&gt; The protocols are practically implementable on low compute-resource devices, such as MCUs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pervasive:&lt;/strong&gt; The protocols are broadly deployable and accessible, thanks to leveraging IP and being implementable on low-capability devices.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ecosystem-Flexible:&lt;/strong&gt; The protocol must be flexible enough to accommodate deployment in ecosystems with differing policies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Easy to Use:&lt;/strong&gt; The protocol should aim to provide smooth, cohesive, integrated provisioning and out-of-box experience.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Open:&lt;/strong&gt; The Project’s design and technical processes should be open and transparent to the general public, including to non-members wherever possible.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/project-chip/connectedhomeip/master/docs/images/CHIP_IP_pyramid.png&#34; alt=&#34;Matter Architecture Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Project, as illustrated above, defines the application layer that will be deployed on devices and controllers as well as the supported IPv6-based networks to help achieve our interoperability architectural goal. Matter will initially support Wi-Fi and Thread for core, operational communications and Bluetooth Low Energy (BLE) to simplify device commissioning and setup.&lt;/p&gt; &#xA;&lt;p&gt;The Application Layer can be further broken down into seven main components:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/project-chip/connectedhomeip/master/docs/images/CHIP_Arch_Pyramid.png&#34; alt=&#34;Matter Stack Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Application:&lt;/strong&gt; High order business logic of a device. For example, an application that is focused on lighting might contain logic to handle turning on/off the bulb as well as its color characteristics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Model:&lt;/strong&gt; Data primitives that help describe the various functionalities of the devices. The Application operates on these data structures when there is intent to interact with the device.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interaction Model:&lt;/strong&gt; Represents a set of actions that can be performed on the devices to interact with it. For example, reading or writing attributes on a device would correspond to interactions with the devices. These actions operate on the structures defined by the data model.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Action Framing:&lt;/strong&gt; Once an action is constructed using the Interaction Model, it is framed into a prescriptive packed binary format to enable being well represented on the “wire”.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; An encoded action frame is then sent down to the Security Layer to encrypt and sign the payload to ensure that data is secured and authenticated by both sender and receiver of a packet.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message Framing &amp;amp; Routing:&lt;/strong&gt; With an interaction encrypted and signed, the Message Layer constructs the payload format with required and optional header fields; which specify properties of the message as well as some routing information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;IP Framing &amp;amp; Transport Management:&lt;/strong&gt; After the final payload has been constructed, it is sent to the underlying transport protocol for IP management of the data.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Current Status of Matter&lt;/h1&gt; &#xA;&lt;p&gt;Matter’s design and technical processes are intended to be open and transparent to the general public, including to Work Group non-members wherever possible. The availability of this GitHub repository and its source code under an Apache v2 license is an important and demonstrable step to achieving this commitment.&lt;/p&gt; &#xA;&lt;p&gt;Matter endeavors to bring together the best aspects of market-tested technologies and to redeploy them as a unified and cohesive whole-system solution. The overall goal of this approach is to bring the benefits of Matter to consumers and manufacturers as quickly as possible. As a result, what you observe in this repository is an implementation-first approach to the technical specification, vetting integrations in practice.&lt;/p&gt; &#xA;&lt;p&gt;The Matter repository is growing and evolving to implement the overall architecture. The repository currently contains the security foundations, message framing and dispatch, an implementation of the interaction model and data model. The code examples show simple interactions, and are supported on multiple transports -- Wi-Fi and Thread -- starting with resource-constrained (i.e., memory, processing) silicon platforms to help ensure Matter’s scalability.&lt;/p&gt; &#xA;&lt;h1&gt;How to Contribute&lt;/h1&gt; &#xA;&lt;p&gt;We welcome your contributions to Matter. Read our contribution guidelines &lt;a href=&#34;https://raw.githubusercontent.com/project-chip/connectedhomeip/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Building and Developing in Matter&lt;/h1&gt; &#xA;&lt;p&gt;Instructions about how to build Matter can be found &lt;a href=&#34;https://raw.githubusercontent.com/project-chip/connectedhomeip/master/docs/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Directory Structure&lt;/h1&gt; &#xA;&lt;p&gt;The Matter repository is structured as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;File / Folder&lt;/th&gt; &#xA;   &lt;th&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;build/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build system support content and build output directories&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/project-chip/connectedhomeip/master/docs/guides/BUILDING.md&#34;&gt;BUILDING.md&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;More detailed information on configuring and building Matter for different targets&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Code of Conduct for Matter, and contributions to it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/project-chip/connectedhomeip/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Guidelines for contributing to Matter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;docs/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Documentation, including &lt;a href=&#34;https://raw.githubusercontent.com/project-chip/connectedhomeip/master/docs/guides&#34;&gt;guides&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Example firmware applications that demonstrate use of the Matter technology&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;integrations/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Third party integrations related to this project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;integrations/docker/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Docker scripts and Dockerfiles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Matter &lt;a href=&#34;https://raw.githubusercontent.com/project-chip/connectedhomeip/master/LICENSE&#34;&gt;License file&lt;/a&gt; (Apache 2.0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;BUILD.gn&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Top level GN build file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;src/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Implementation of Matter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;third_party/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Third-party code used by Matter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;scripts/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scripts needed to work with the Matter repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Matter is released under the &lt;a href=&#34;https://raw.githubusercontent.com/project-chip/connectedhomeip/master/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CleverRaven/Cataclysm-DDA</title>
    <updated>2022-06-05T01:32:43Z</updated>
    <id>tag:github.com,2022-06-05:/CleverRaven/Cataclysm-DDA</id>
    <link href="https://github.com/CleverRaven/Cataclysm-DDA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cataclysm - Dark Days Ahead. A turn-based survival game set in a post-apocalyptic world.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cataclysm: Dark Days Ahead&lt;/h1&gt; &#xA;&lt;p&gt;Cataclysm: Dark Days Ahead is a turn-based survival game set in a post-apocalyptic world. While some have described it as a &#34;zombie game&#34;, there is far more to Cataclysm than that. Struggle to survive in a harsh, persistent, procedurally generated world. Scavenge the remnants of a dead civilization for food, equipment, or, if you are lucky, a vehicle with a full tank of gas to get you the hell out of Dodge. Fight to defeat or escape from a wide variety of powerful monstrosities, from zombies to giant insects to killer robots and things far stranger and deadlier, and against the others like yourself, who want what you have...&lt;/p&gt; &#xA;&lt;a href=&#34;https://repology.org/project/cataclysm-dda/versions&#34;&gt; &lt;img src=&#34;https://repology.org/badge/vertical-allrepos/cataclysm-dda.svg?sanitize=true&#34; alt=&#34;Packaging Status&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/CleverRaven/Cataclysm-DDA&#34;&gt;&lt;img src=&#34;https://travis-ci.org/CleverRaven/Cataclysm-DDA.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/CleverRaven/Cataclysm-DDA?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/CleverRaven/Cataclysm-DDA/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/CleverRaven/Cataclysm-DDA/context:cpp&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/cpp/g/CleverRaven/Cataclysm-DDA.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: C/C++&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/cleverraven/cataclysm-dda&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/cleverraven/cataclysm-dda/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CleverRaven/Cataclysm-DDA/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/CleverRaven/Cataclysm-DDA&#34; alt=&#34;Commit Activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/XAMPPRocky/tokei&#34;&gt;&lt;img src=&#34;https://tokei.rs/b1/github/CleverRaven/Cataclysm-DDA?category=code&#34; alt=&#34;Lines of Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.tickgit.com/browse?repo=github.com/CleverRaven/Cataclysm-DDA&#34;&gt;&lt;img src=&#34;https://badgen.net/https/api.tickgit.com/badgen/github.com/CleverRaven/Cataclysm-DDA&#34; alt=&#34;TODOs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Releases&lt;/strong&gt; - &lt;a href=&#34;https://cataclysmdda.org/releases/&#34;&gt;Stable&lt;/a&gt; | &lt;a href=&#34;https://cataclysmdda.org/experimental/&#34;&gt;Experimental&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt; - The source can be downloaded as a &lt;a href=&#34;https://github.com/CleverRaven/Cataclysm-DDA/archive/master.zip&#34;&gt;.zip archive&lt;/a&gt;, or cloned from our &lt;a href=&#34;https://github.com/CleverRaven/Cataclysm-DDA/&#34;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Packaging status&lt;/h3&gt; &#xA;&lt;h4&gt;Arch Linux&lt;/h4&gt; &#xA;&lt;p&gt;Ncurses and tiles versions are available in the &lt;a href=&#34;https://www.archlinux.org/packages/?q=cataclysm-dda&#34;&gt;community repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo pacman -S cataclysm-dda&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Fedora&lt;/h4&gt; &#xA;&lt;p&gt;Ncurses and tiles versions are available in the &lt;a href=&#34;https://src.fedoraproject.org/rpms/cataclysm-dda&#34;&gt;official repos&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo dnf install cataclysm-dda&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Debian / Ubuntu&lt;/h4&gt; &#xA;&lt;p&gt;Ncurses and tiles versions are available in the &lt;a href=&#34;https://tracker.debian.org/pkg/cataclysm-dda&#34;&gt;official repos&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo apt install cataclysm-dda-curses cataclysm-dda-sdl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/CleverRaven/Cataclysm-DDA/master/doc/COMPILING/COMPILING.md&#34;&gt;COMPILING.md&lt;/a&gt; - it covers general information and more specific recipes for Linux, OS X, Windows and BSD. See &lt;a href=&#34;https://raw.githubusercontent.com/CleverRaven/Cataclysm-DDA/master/doc/COMPILING/COMPILER_SUPPORT.md&#34;&gt;COMPILER_SUPPORT.md&lt;/a&gt; for details on which compilers we support. And you can always dig for more information in &lt;a href=&#34;https://github.com/CleverRaven/Cataclysm-DDA/tree/master/doc&#34;&gt;doc/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We also have the following build guides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Building on Windows with &lt;code&gt;MSYS2&lt;/code&gt; at &lt;a href=&#34;https://raw.githubusercontent.com/CleverRaven/Cataclysm-DDA/master/doc/COMPILING/COMPILING-MSYS.md&#34;&gt;COMPILING-MSYS.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Building on Windows with &lt;code&gt;vcpkg&lt;/code&gt; at &lt;a href=&#34;https://raw.githubusercontent.com/CleverRaven/Cataclysm-DDA/master/doc/COMPILING/COMPILING-VS-VCPKG.md&#34;&gt;COMPILING-VS-VCPKG.md&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Building with &lt;code&gt;cmake&lt;/code&gt; at &lt;a href=&#34;https://raw.githubusercontent.com/CleverRaven/Cataclysm-DDA/master/doc/COMPILING/COMPILING-CMAKE.md&#34;&gt;COMPILING-CMAKE.md&lt;/a&gt; (&lt;em&gt;unofficial guide&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Cataclysm: Dark Days Ahead is the result of contributions from over 1000 volunteers under the Creative Commons Attribution ShareAlike 3.0 license. The code and content of the game is free to use, modify, and redistribute for any purpose whatsoever. See &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;http://creativecommons.org/licenses/by-sa/3.0/&lt;/a&gt; for details. Some code distributed with the project is not part of the project and is released under different software licenses; the files covered by different software licenses have their own license notices.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bountysource.com/trackers/146201-clever-raven-cataclysm-dda?utm_source=146201&amp;amp;utm_medium=shield&amp;amp;utm_campaign=TRACKER_BADGE&#34;&gt;&lt;img src=&#34;https://www.bountysource.com/badge/tracker?tracker_id=146201&#34; alt=&#34;Bountysource&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/CleverRaven/Cataclysm-DDA/raw/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Forums: &lt;a href=&#34;https://discourse.cataclysmdda.org&#34;&gt;https://discourse.cataclysmdda.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wiki: &lt;a href=&#34;http://cddawiki.chezzo.com/cdda_wiki/index.php&#34;&gt;http://cddawiki.chezzo.com/cdda_wiki/index.php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub repo: &lt;a href=&#34;https://github.com/CleverRaven/Cataclysm-DDA&#34;&gt;https://github.com/CleverRaven/Cataclysm-DDA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;IRC: &lt;code&gt;#CataclysmDDA&lt;/code&gt; on &lt;a href=&#34;https://libera.chat&#34;&gt;Libera Chat&lt;/a&gt;, &lt;a href=&#34;https://web.libera.chat/#CataclysmDDA&#34;&gt;https://web.libera.chat/#CataclysmDDA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Official Discord: &lt;a href=&#34;https://discord.gg/jFEc7Yp&#34;&gt;https://discord.gg/jFEc7Yp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;h4&gt;Is there a tutorial?&lt;/h4&gt; &#xA;&lt;p&gt;Yes, you can find the tutorial in the &lt;strong&gt;Special&lt;/strong&gt; menu at the main menu (be aware that due to many code changes the tutorial may not function). You can also access documentation in-game via the &lt;code&gt;?&lt;/code&gt; key.&lt;/p&gt; &#xA;&lt;h4&gt;How can I change the key bindings?&lt;/h4&gt; &#xA;&lt;p&gt;Press the &lt;code&gt;?&lt;/code&gt; key, followed by the &lt;code&gt;1&lt;/code&gt; key to see the full list of key commands. Press the &lt;code&gt;+&lt;/code&gt; key to add a key binding, select which action with the corresponding letter key &lt;code&gt;a-w&lt;/code&gt;, and then the key you wish to assign to that action.&lt;/p&gt; &#xA;&lt;h4&gt;How can I start a new world?&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;World&lt;/strong&gt; on the main menu will generate a fresh world for you. Select &lt;strong&gt;Create World&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;I&#39;ve found a bug. What should I do?&lt;/h4&gt; &#xA;&lt;p&gt;Please submit an issue on &lt;a href=&#34;https://github.com/CleverRaven/Cataclysm-DDA/issues/&#34;&gt;our GitHub page&lt;/a&gt; using &lt;a href=&#34;https://github.com/CleverRaven/Cataclysm-DDA/issues/new?template=bug_report.md&#34;&gt;bug report template&lt;/a&gt;. If you&#39;re not able to, send an email to &lt;code&gt;kevin.granade@gmail.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;I would like to make a suggestion. What should I do?&lt;/h4&gt; &#xA;&lt;p&gt;Please submit an issue on &lt;a href=&#34;https://github.com/CleverRaven/Cataclysm-DDA/issues/&#34;&gt;our GitHub page&lt;/a&gt; using &lt;a href=&#34;https://github.com/CleverRaven/Cataclysm-DDA/issues/new?template=feature_request.md&#34;&gt;feature request template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also submit your suggestions or vote for existing suggestions on &lt;a href=&#34;https://feathub.com/CleverRaven/Cataclysm-DDA&#34;&gt;our FeatHub page&lt;/a&gt;. Most voted suggestions are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://feathub.com/CleverRaven/Cataclysm-DDA&#34;&gt;&lt;img src=&#34;https://feathub.com/CleverRaven/Cataclysm-DDA?format=svg&#34; alt=&#34;Feature Requests&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/folly</title>
    <updated>2022-06-05T01:32:43Z</updated>
    <id>tag:github.com,2022-06-05:/facebook/folly</id>
    <link href="https://github.com/facebook/folly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source C++ library developed and used at Facebook.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Folly: Facebook Open-source Library&lt;/h1&gt; &#xA;&lt;a href=&#34;https://opensource.facebook.com/support-ukraine&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&amp;amp;labelColor=005BBB&#34; alt=&#34;Support Ukraine - Help Provide Humanitarian Aid to Ukraine.&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;What is &lt;code&gt;folly&lt;/code&gt;?&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/folly/main/static/logo.svg?sanitize=true&#34; alt=&#34;Logo Folly&#34; width=&#34;15%&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;Folly (acronymed loosely after Facebook Open Source Library) is a library of C++14 components designed with practicality and efficiency in mind. &lt;strong&gt;Folly contains a variety of core library components used extensively at Facebook&lt;/strong&gt;. In particular, it&#39;s often a dependency of Facebook&#39;s other open source C++ efforts and place where those projects can share code.&lt;/p&gt; &#xA;&lt;p&gt;It complements (as opposed to competing against) offerings such as Boost and of course &lt;code&gt;std&lt;/code&gt;. In fact, we embark on defining our own component only when something we need is either not available, or does not meet the needed performance profile. We endeavor to remove things from folly if or when &lt;code&gt;std&lt;/code&gt; or Boost obsoletes them.&lt;/p&gt; &#xA;&lt;p&gt;Performance concerns permeate much of Folly, sometimes leading to designs that are more idiosyncratic than they would otherwise be (see e.g. &lt;code&gt;PackedSyncPtr.h&lt;/code&gt;, &lt;code&gt;SmallLocks.h&lt;/code&gt;). Good performance at large scale is a unifying theme in all of Folly.&lt;/p&gt; &#xA;&lt;h2&gt;Check it out in the intro video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Wr_IfOICYSs&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/Wr_IfOICYSs/0.jpg&#34; alt=&#34;Explain Like I’m 5: Folly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Logical Design&lt;/h1&gt; &#xA;&lt;p&gt;Folly is a collection of relatively independent components, some as simple as a few symbols. There is no restriction on internal dependencies, meaning that a given folly module may use any other folly components.&lt;/p&gt; &#xA;&lt;p&gt;All symbols are defined in the top-level namespace &lt;code&gt;folly&lt;/code&gt;, except of course macros. Macro names are ALL_UPPERCASE and should be prefixed with &lt;code&gt;FOLLY_&lt;/code&gt;. Namespace &lt;code&gt;folly&lt;/code&gt; defines other internal namespaces such as &lt;code&gt;internal&lt;/code&gt; or &lt;code&gt;detail&lt;/code&gt;. User code should not depend on symbols in those namespaces.&lt;/p&gt; &#xA;&lt;p&gt;Folly has an &lt;code&gt;experimental&lt;/code&gt; directory as well. This designation connotes primarily that we feel the API may change heavily over time. This code, typically, is still in heavy use and is well tested.&lt;/p&gt; &#xA;&lt;h1&gt;Physical Design&lt;/h1&gt; &#xA;&lt;p&gt;At the top level Folly uses the classic &#34;stuttering&#34; scheme &lt;code&gt;folly/folly&lt;/code&gt; used by Boost and others. The first directory serves as an installation root of the library (with possible versioning a la &lt;code&gt;folly-1.0/&lt;/code&gt;), and the second is to distinguish the library when including files, e.g. &lt;code&gt;#include &amp;lt;folly/FBString.h&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The directory structure is flat (mimicking the namespace structure), i.e. we don&#39;t have an elaborate directory hierarchy (it is possible this will change in future versions). The subdirectory &lt;code&gt;experimental&lt;/code&gt; contains files that are used inside folly and possibly at Facebook but not considered stable enough for client use. Your code should not use files in &lt;code&gt;folly/experimental&lt;/code&gt; lest it may break when you update Folly.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;folly/folly/test&lt;/code&gt; subdirectory includes the unittests for all components, usually named &lt;code&gt;ComponentXyzTest.cpp&lt;/code&gt; for each &lt;code&gt;ComponentXyz.*&lt;/code&gt;. The &lt;code&gt;folly/folly/docs&lt;/code&gt; directory contains documentation.&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s in it?&lt;/h1&gt; &#xA;&lt;p&gt;Because of folly&#39;s fairly flat structure, the best way to see what&#39;s in it is to look at the headers in &lt;a href=&#34;https://github.com/facebook/folly/tree/main/folly&#34;&gt;top level &lt;code&gt;folly/&lt;/code&gt; directory&lt;/a&gt;. You can also check the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/folly/main/folly/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt; folder&lt;/a&gt; for documentation, starting with the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/folly/main/folly/docs/Overview.md&#34;&gt;overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Folly is published on GitHub at &lt;a href=&#34;https://github.com/facebook/folly&#34;&gt;https://github.com/facebook/folly&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Build Notes&lt;/h1&gt; &#xA;&lt;p&gt;Because folly does not provide any ABI compatibility guarantees from commit to commit, we generally recommend building folly as a static library.&lt;/p&gt; &#xA;&lt;p&gt;folly supports gcc (5.1+), clang, or MSVC. It should run on Linux (x86-32, x86-64, and ARM), iOS, macOS, and Windows (x86-64). The CMake build is only tested on some of these platforms; at a minimum, we aim to support macOS and Linux (on the latest Ubuntu LTS release or newer.)&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;getdeps.py&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This script is used by many of Meta&#39;s OSS tools. It will download and build all of the necessary dependencies first, and will then invoke cmake etc to build folly. This will help ensure that you build with relevant versions of all of the dependent libraries, taking into account what versions are installed locally on your system.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s written in python so you&#39;ll need python3.6 or later on your PATH. It works on Linux, macOS and Windows.&lt;/p&gt; &#xA;&lt;p&gt;The settings for folly&#39;s cmake build are held in its getdeps manifest &lt;code&gt;build/fbcode_builder/manifests/folly&lt;/code&gt;, which you can edit locally if desired.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If on Linux or MacOS (with homebrew installed) you can install system dependencies to save building them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Clone the repo&#xA;git clone https://github.com/facebook/folly&#xA;# Install dependencies&#xA;cd folly&#xA;sudo ./build/fbcode_builder/getdeps.py install-system-deps --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to see the packages before installing them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build/fbcode_builder/getdeps.py install-system-deps --dry-run --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On other platforms or if on Linux and without system dependencies &lt;code&gt;getdeps.py&lt;/code&gt; will mostly download and build them for you during the build step.&lt;/p&gt; &#xA;&lt;p&gt;Some of the dependencies &lt;code&gt;getdeps.py&lt;/code&gt; uses and installs are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a version of boost compiled with C++14 support.&lt;/li&gt; &#xA; &lt;li&gt;googletest is required to build and run folly&#39;s tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;This script will download and build all of the necessary dependencies first, and will then invoke cmake etc to build folly. This will help ensure that you build with relevant versions of all of the dependent libraries, taking into account what versions are installed locally on your system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getdeps.py&lt;/code&gt; currently requires python 3.6+ to be on your path.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getdeps.py&lt;/code&gt; will invoke cmake etc&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Clone the repo&#xA;git clone https://github.com/facebook/folly&#xA;cd folly&#xA;# Build, using system dependencies if available&#xA;python3 ./build/fbcode_builder/getdeps.py --allow-system-packages build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It puts output in its scratch area:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;installed/folly/lib/libfolly.a&lt;/code&gt;: Library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also specify a &lt;code&gt;--scratch-path&lt;/code&gt; argument to control the location of the scratch directory used for the build. You can find the default scratch install location from logs or with &lt;code&gt;python3 ./build/fbcode_builder/getdeps.py show-inst-dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are also &lt;code&gt;--install-dir&lt;/code&gt; and &lt;code&gt;--install-prefix&lt;/code&gt; arguments to provide some more fine-grained control of the installation directories. However, given that folly provides no compatibility guarantees between commits we generally recommend building and installing the libraries to a temporary location, and then pointing your project&#39;s build at this temporary location, rather than installing folly in the traditional system installation directories. e.g., if you are building with CMake you can use the &lt;code&gt;CMAKE_PREFIX_PATH&lt;/code&gt; variable to allow CMake to find folly in this temporary installation directory when building your project.&lt;/p&gt; &#xA;&lt;p&gt;If you want to invoke &lt;code&gt;cmake&lt;/code&gt; again to iterate, there is a helpful &lt;code&gt;run_cmake.py&lt;/code&gt; script output in the scratch build directory. You can find the scratch build directory from logs or with &lt;code&gt;python3 ./build/fbcode_builder/getdeps.py show-build-dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Run tests&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;getdeps.py&lt;/code&gt; will build the tests for folly. To run them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd folly&#xA;python3 ./build/fbcode_builder/getdeps.py --allow-system-packages test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;build.sh&lt;/code&gt;/&lt;code&gt;build.bat&lt;/code&gt; wrapper&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;build.sh&lt;/code&gt; can be used on Linux and MacOS, on Windows use the &lt;code&gt;build.bat&lt;/code&gt; script instead. Its a wrapper around &lt;code&gt;getdeps.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build with cmake directly&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want to let getdeps invoke cmake for you then by default, building the tests is disabled as part of the CMake &lt;code&gt;all&lt;/code&gt; target. To build the tests, specify &lt;code&gt;-DBUILD_TESTS=ON&lt;/code&gt; to CMake at configure time.&lt;/p&gt; &#xA;&lt;p&gt;NB if you want to invoke &lt;code&gt;cmake&lt;/code&gt; again to iterate on a &lt;code&gt;getdeps.py&lt;/code&gt; build, there is a helpful &lt;code&gt;run_cmake.py&lt;/code&gt; script output in the scratch-path build directory. You can find the scratch build directory from logs or with &lt;code&gt;python3 ./build/fbcode_builder/getdeps.py show-build-dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Running tests with ctests also works if you cd to the build dir, e.g. &lt;code&gt; &lt;/code&gt;(cd $(python3 ./build/fbcode_builder/getdeps.py show-build-dir) &amp;amp;&amp;amp; ctest)`&lt;/p&gt; &#xA;&lt;h3&gt;Finding dependencies in non-default locations&lt;/h3&gt; &#xA;&lt;p&gt;If you have boost, gtest, or other dependencies installed in a non-default location, you can use the &lt;code&gt;CMAKE_INCLUDE_PATH&lt;/code&gt; and &lt;code&gt;CMAKE_LIBRARY_PATH&lt;/code&gt; variables to make CMAKE look also look for header files and libraries in non-standard locations. For example, to also search the directories &lt;code&gt;/alt/include/path1&lt;/code&gt; and &lt;code&gt;/alt/include/path2&lt;/code&gt; for header files and the directories &lt;code&gt;/alt/lib/path1&lt;/code&gt; and &lt;code&gt;/alt/lib/path2&lt;/code&gt; for libraries, you can invoke &lt;code&gt;cmake&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake \&#xA;  -DCMAKE_INCLUDE_PATH=/alt/include/path1:/alt/include/path2 \&#xA;  -DCMAKE_LIBRARY_PATH=/alt/lib/path1:/alt/lib/path2 ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ubuntu LTS, CentOS Stream, Fedora&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;getdeps.py&lt;/code&gt; approach above. We test in CI on Ubuntu LTS, and occasionally on other distros.&lt;/p&gt; &#xA;&lt;p&gt;If you find the set of system packages is not quite right for your chosen distro, you can specify distro version specific overrides in the dependency manifests (e.g. &lt;a href=&#34;https://github.com/facebook/folly/raw/main/build/fbcode_builder/manifests/boost&#34;&gt;https://github.com/facebook/folly/blob/main/build/fbcode_builder/manifests/boost&lt;/a&gt; ). You could probably make it work on most recent Ubuntu/Debian or Fedora/Redhat derived distributions.&lt;/p&gt; &#xA;&lt;p&gt;At time of writing (Dec 2021) there is a build break on GCC 11.x based systems in lang_badge_test. If you don&#39;t need badge functionality you can work around by commenting it out from CMakeLists.txt (unfortunately fbthrift does need it)&lt;/p&gt; &#xA;&lt;h2&gt;Windows (Vcpkg)&lt;/h2&gt; &#xA;&lt;p&gt;Note that many tests are disabled for folly Windows builds, you can see them in the log from the cmake configure step, or by looking for WINDOWS_DISABLED in &lt;code&gt;CMakeLists.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;That said, &lt;code&gt;getdeps.py&lt;/code&gt; builds work on Windows and are tested in CI.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer, you can try Vcpkg. folly is available in &lt;a href=&#34;https://github.com/Microsoft/vcpkg#vcpkg&#34;&gt;Vcpkg&lt;/a&gt; and releases may be built via &lt;code&gt;vcpkg install folly:x64-windows&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also use &lt;code&gt;vcpkg install folly:x64-windows --head&lt;/code&gt; to build against &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;macOS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;getdeps.py&lt;/code&gt; builds work on macOS and are tested in CI, however if you prefer, you can try one of the macOS package managers&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;folly is available as a Formula and releases may be built via &lt;code&gt;brew install folly&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may also use &lt;code&gt;folly/build/bootstrap-osx-homebrew.sh&lt;/code&gt; to build against &lt;code&gt;main&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ./folly/build/bootstrap-osx-homebrew.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a build directory &lt;code&gt;_build&lt;/code&gt; in the top-level.&lt;/p&gt; &#xA;&lt;h3&gt;MacPorts&lt;/h3&gt; &#xA;&lt;p&gt;Install the required packages from MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  sudo port install \&#xA;    boost \&#xA;    cmake \&#xA;    gflags \&#xA;    git \&#xA;    google-glog \&#xA;    libevent \&#xA;    libtool \&#xA;    lz4 \&#xA;    lzma \&#xA;    openssl \&#xA;    snappy \&#xA;    xz \&#xA;    zlib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download and install double-conversion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  git clone https://github.com/google/double-conversion.git&#xA;  cd double-conversion&#xA;  cmake -DBUILD_SHARED_LIBS=ON .&#xA;  make&#xA;  sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download and install folly with the parameters listed below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  git clone https://github.com/facebook/folly.git&#xA;  cd folly&#xA;  mkdir _build&#xA;  cd _build&#xA;  cmake ..&#xA;  make&#xA;  sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>