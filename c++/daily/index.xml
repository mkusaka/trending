<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T01:30:06Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>HazyResearch/flash-attention</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/HazyResearch/flash-attention</id>
    <link href="https://github.com/HazyResearch/flash-attention" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FlashAttention&lt;/h1&gt; &#xA;&lt;p&gt;This repository provides the official implementation of FlashAttention from the following paper.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness&lt;/strong&gt;&lt;br&gt; Tri Dao, Daniel Y. Fu, Stefano Ermon, Atri Rudra, Christopher Ré&lt;br&gt; Paper: &lt;a href=&#34;https://arxiv.org/abs/2205.14135&#34;&gt;https://arxiv.org/abs/2205.14135&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/HazyResearch/flash-attention/main/assets/flashattn_banner.jpg&#34; alt=&#34;FlashAttention&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Alpha release (0.1).&lt;/h2&gt; &#xA;&lt;p&gt;To compile (requiring CUDA 11, NVCC, and an Ampere GPU):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Interface: &lt;code&gt;src/flash_attention.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run the benchmark against PyTorch standard attention:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PYTHONPATH=$PWD python benchmarks/benchmark_flash_attention.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FlashAttention currently supports:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ampere GPUs (e.g., A100, RTX 3090).&lt;/li&gt; &#xA; &lt;li&gt;fp16.&lt;/li&gt; &#xA; &lt;li&gt;Head dimensions 16, 32, 64.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Our tentative roadmap:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[Jun 2022] Make package pip-installable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;[Jun 2022] Support SM86 GPUs (e.g., RTX 3080, 3090)&lt;/del&gt;[Done].&lt;/li&gt; &#xA; &lt;li&gt;[Jun 2022] Refactor to use Cutlass.&lt;/li&gt; &#xA; &lt;li&gt;[Jun 2022] Support SM75 GPUs (e.g. T4).&lt;/li&gt; &#xA; &lt;li&gt;[Jun 2022] Support bf16.&lt;/li&gt; &#xA; &lt;li&gt;[Jul 2022] Support head dimension 128.&lt;/li&gt; &#xA; &lt;li&gt;[Jul 2022] Support SM70 GPUs (V100).&lt;/li&gt; &#xA; &lt;li&gt;[Aug 2022] Fuse rotary embedding.&lt;/li&gt; &#xA; &lt;li&gt;[Aug 2022] Support Attention linear bias (e.g. ALiBi).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Speedup and Memory Savings&lt;/h2&gt; &#xA;&lt;p&gt;We present expected speedup (combined forward + backward pass) and memory savings from using FlashAttention against PyTorch standard attention, depending on sequence length, on different GPUs (speedup depends on memory bandwidth - we see more speedup on slower GPU memory).&lt;/p&gt; &#xA;&lt;h3&gt;A100&lt;/h3&gt; &#xA;&lt;p&gt;We display FlashAttention speedup using these parameters (similar to BERT-base):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Batch size 8&lt;/li&gt; &#xA; &lt;li&gt;Head dimension 64&lt;/li&gt; &#xA; &lt;li&gt;12 attention heads&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Our graphs show sequence lengths between 128 and 4096 (when standard attention runs out of memory on an A100), but FlashAttention can scale up to sequence length 64K.&lt;/p&gt; &#xA;&lt;h4&gt;Speedup&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HazyResearch/flash-attention/main/assets/flashattn_speedup.jpg&#34; alt=&#34;FlashAttention speedup&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We generally see 2-4X speedup at sequence lengths between 128 and 4K, and we see more speedup when using dropout and masking, since we fuse the kernels. At sequence lengths that are popular with language models like 512 and 1K, we see speedups up to 4X when using dropout and masking.&lt;/p&gt; &#xA;&lt;h4&gt;Memory&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HazyResearch/flash-attention/main/assets/flashattn_memory.jpg&#34; alt=&#34;FlashAttention memory&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We show memory savings in this graph (note that memory footprint is the same no matter if you use dropout or masking). Memory savings are proportional to sequence length -- since standard attention has memory quadratic in sequence length, whereas FlashAttention has memory linear in sequence length. We see 10X memory savings at sequence length 2K, and 20X at 4K. As a result, FlashAttention can scale to much longer sequence lengths.&lt;/p&gt; &#xA;&lt;h3&gt;RTX 3090&lt;/h3&gt; &#xA;&lt;p&gt;For the RTX 3090, we use batch size 12 with 12 attention heads. Memory savings are the same as on an A100, so we&#39;ll only show speedup here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HazyResearch/flash-attention/main/assets/flashattn_speedup_3090.jpg&#34; alt=&#34;FlashAttention speedup GTX 3090&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We see slightly higher speedups (between 2.5-4.5x) on the GTX 3090, since memory bandwidth on the GDDR6X is lower than A100 HBM (~900 GB/s vs. ~1.5 TB/s).&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Our implementation uses Apex&#39;s &lt;a href=&#34;https://github.com/NVIDIA/apex/tree/master/apex/contrib/csrc/fmha&#34;&gt;FMHA&lt;/a&gt; code as a starting point.&lt;/p&gt; &#xA;&lt;p&gt;We thank &lt;a href=&#34;https://yjk21.github.io/&#34;&gt;Young-Jun Ko&lt;/a&gt; for the in-depth explanation of his FMHA implementation and for his thoughtful answers to our questions about CUDA.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use this codebase, or otherwise found our work valuable, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{dao2022flashattention,&#xA;  title={FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness},&#xA;  author={Dao, Tri and Fu, Daniel Y. and Ermon, Stefano and Rudra, Atri and R{\&#39;e}, Christopher},&#xA;  journal={arXiv preprint arXiv:2205.14135},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>PJLab-ADG/SensorsCalibration</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/PJLab-ADG/SensorsCalibration</id>
    <link href="https://github.com/PJLab-ADG/SensorsCalibration" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenCalib: A Multi-sensor Calibration Toolbox for Autonomous Driving&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/icon.png&#34; width=&#34;100%&#34; height=&#34;100%&#34; alt=&#34;&#34; div align=&#34;center&#34;&gt; &#xA;&lt;h1&gt;SensorsCalibration toolbox v0.1&lt;/h1&gt; &#xA;&lt;p&gt;SensorsCalibration is a simple calibration toolbox and open source project, mainly used for sensor calibration in autonomous driving.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Sensor calibration is the foundation block of any autonomous system and its constituent sensors and must be performed correctly before sensor fusion may be implemented. Precise calibrations are vital for further processing steps, such as sensor fusion and implementation of algorithms for obstacle detection, localization and mapping, and control. Further, sensor fusion is one of the essential tasks in autonomous driving applications that fuses information obtained from multiple sensors to reduce the uncertainties compared to when sensors are used individually. To solve the problem of sensor calibration for autonomous vehicles, we provide a sensors calibration toolbox. The calibration toolbox can be used to calibrate sensors such as &lt;strong&gt;IMU, LiDAR, Camera, and Radar&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Environment(Quick Start)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# pull docker image&#xA;sudo docker pull scllovewkf/opencalib:latest&#xA;# After the image is pulled down, start the docker image. &amp;nbsp;/home/sz3/ailab/ = &amp;nbsp;code root path on your host&#xA;docker run -it -v /home/sz3/ailab/:/share scllovewkf/opencalib:latest /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sensors calibration&lt;/h3&gt; &#xA;&lt;p&gt;This calibration toolbox provides some calibration tools based on road scenes. The specific contents are as follows. If you want to use one of the calibration tools in the list below, you can click the use link to enter the instruction page.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;calibration param&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;calibration type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;calibration method&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;mannual calibration&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;auto calibration&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;usage documentation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;camera intrinsice&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;intrinsic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;target-based&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/camera_intrinsic/README.md&#34;&gt;camera intrinsic&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;imu heading&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;extrinsic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;target-less&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/imu_heading/README.md&#34;&gt;imu heaidng&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;lidar2imu&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;extrinsic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;target-less&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/lidar2imu/README.md&#34;&gt;lidar2imu&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;lidar2camera&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;extrinsic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;target-less&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/lidar2camera/README.md&#34;&gt;lidar2camera&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;lidar2lidar&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;extrinsic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;target-less&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/lidar2lidar/README.md&#34;&gt;lidar2lidar&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;radar2camera&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;extrinsic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;target-less&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/radar2camera/README.md&#34;&gt;radar2camera&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;radar2lidar&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;extrinsic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;target-less&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/radar2lidar/README.md&#34;&gt;radar2lidar&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Factory calibration&lt;/h3&gt; &#xA;&lt;p&gt;At the same time, the calibration toolbox also provides some factory calibration tools.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;calibration board type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;calibration sensor&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;calibration board pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;remove opencv&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;auto calibration&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;usage documentation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;chessboard&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Camera&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/factory_calib/pattern/chessboard.pdf&#34;&gt;chessboard &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/factory_calib/README.md&#34;&gt;factory calib&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;circle board&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Camera&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/factory_calib/pattern/circle_board.pdf&#34;&gt;circle_board &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/factory_calib/README.md&#34;&gt;factory calib&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;vertical board&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Camera&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/factory_calib/pattern/vertical_board.pdf&#34;&gt;vertical board &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/factory_calib/README.md&#34;&gt;factory calib&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;apriltag board&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Camera&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/factory_calib/pattern/april_board.pdf&#34;&gt;apriltag board &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/factory_calib/README.md&#34;&gt;factory calib&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;aruco marker board&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Camera&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/factory_calib/pattern/aruco_marker_board.pdf&#34;&gt;aruco marker board &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/factory_calib/README.md&#34;&gt;factory calib&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;round hole board&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Camera and LiDAR&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/factory_calib/pattern/round_hole_board.pdf&#34;&gt;round hole board &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/factory_calib/README.md&#34;&gt;factory calib&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Related paper&lt;/h2&gt; &#xA;&lt;p&gt;Related paper available on arxiv:&lt;br&gt; &lt;a href=&#34;https://arxiv.org/abs/2205.14087&#34;&gt;OpenCalib: A Multi-sensor Calibration Toolbox for Autonomous Driving&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- CONTRIBUTING --&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are &lt;strong&gt;greatly appreciated&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag &#34;enhancement&#34;. Don&#39;t forget to give the project a star! Thanks again!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Project&lt;/li&gt; &#xA; &lt;li&gt;Create your Feature Branch (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your Changes (&lt;code&gt;git commit -m &#39;Add some AmazingFeature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the Branch (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- CITATION --&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this project useful in your research, please consider cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{opencalib,&#xA;    title={OpenCalib: A Multi-sensor Calibration Toolbox for Autonomous Driving},&#xA;    author={Yan, Guohang and Liu, Zhuochun and Wang, Chengjie and Shi, Chunlei and Wei, Pengjin and Cai, Xinyu and Ma, Tao and Liu, Zhizheng and Zhong, Zebin and Liu, Yuqian and Zhao, Ming and Ma, Zheng and Li, Yikang},&#xA;    journal={arXiv preprint arXiv:2205.14087},&#xA;    year={2022},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- LICENSE --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SensorsCalibration&lt;/code&gt; is released under the &lt;a href=&#34;https://raw.githubusercontent.com/PJLab-ADG/SensorsCalibration/master/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions about this repo, please contact Yan Guohang (&lt;code&gt;yanguohang@pjlab.org.cn&lt;/code&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/libphonenumber</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/google/libphonenumber</id>
    <link href="https://github.com/google/libphonenumber" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google&#39;s common Java, C++ and JavaScript library for parsing, formatting, and validating international phone numbers.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;right&#34;&gt; &lt;img src=&#34;https://travis-ci.org/google/libphonenumber.svg?branch=master&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;What is it?&lt;/h1&gt; &#xA;&lt;p&gt;Google&#39;s common Java, C++ and JavaScript library for parsing, formatting, and validating international phone numbers. The Java version is optimized for running on smartphones, and is used by the Android framework since 4.0 (Ice Cream Sandwich).&lt;/p&gt; &#xA;&lt;h1&gt;Quick links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reporting an issue?&lt;/strong&gt; Want to send a pull request? See the &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/FAQ.md&#34;&gt;frequently asked questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fun! &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/FALSEHOODS.md&#34;&gt;Falsehoods Programmers Believe About Phone Numbers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Look for &lt;a href=&#34;https://github.com/google/libphonenumber/find/master&#34;&gt;&lt;code&gt;README&lt;/code&gt;s&lt;/a&gt; in directories relevant to the code you&#39;re interested in.&lt;/li&gt; &#xA; &lt;li&gt;For contributors and porters: &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/run-java-demo.md&#34;&gt;How to run the Java demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For porters: &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/making-metadata-changes.md&#34;&gt;How to make metadata changes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Highlights of functionality&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parsing, formatting, and validating phone numbers for all countries/regions of the world.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getNumberType&lt;/code&gt; - gets the type of the number based on the number itself; able to distinguish Fixed-line, Mobile, Toll-free, Premium Rate, Shared Cost, VoIP, Personal Numbers, UAN, Pager, and Voicemail (whenever feasible).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isNumberMatch&lt;/code&gt; - gets a confidence level on whether two numbers could be the same.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getExampleNumber&lt;/code&gt; and &lt;code&gt;getExampleNumberForType&lt;/code&gt; - provide valid example numbers for all countries/regions, with the option of specifying which type of example phone number is needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isPossibleNumber&lt;/code&gt; - quickly guesses whether a number is a possible phone number by using only the length information, much faster than a full validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isValidNumber&lt;/code&gt; - full validation of a phone number for a region using length and prefix information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AsYouTypeFormatter&lt;/code&gt; - formats phone numbers on-the-fly when users enter each digit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;findNumbers&lt;/code&gt; - finds numbers in text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PhoneNumberOfflineGeocoder&lt;/code&gt; - provides geographical information related to a phone number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PhoneNumberToCarrierMapper&lt;/code&gt; - provides carrier information related to a phone number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PhoneNumberToTimeZonesMapper&lt;/code&gt; - provides timezone information related to a phone number.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;h2&gt;Java&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://libphonenumber.appspot.com/&#34;&gt;Java demo&lt;/a&gt; is updated with a slight delay after the GitHub release.&lt;/p&gt; &#xA;&lt;p&gt;Last demo update: v8.12.49.&lt;/p&gt; &#xA;&lt;p&gt;If this number is lower than the &lt;a href=&#34;https://github.com/google/libphonenumber/releases&#34;&gt;latest release&#39;s version number&lt;/a&gt;, we are between releases and the demo may be at either version.&lt;/p&gt; &#xA;&lt;h2&gt;JavaScript&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/google/libphonenumber/raw/master/javascript/i18n/phonenumbers/demo-compiled.html&#34;&gt;JavaScript demo&lt;/a&gt; may be run at various tags; this link will take you to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Java code&lt;/h1&gt; &#xA;&lt;p&gt;To include the Java code in your application, either integrate with Maven (see &lt;a href=&#34;https://github.com/google/libphonenumber/wiki&#34;&gt;wiki&lt;/a&gt;) or download the latest jars from the &lt;a href=&#34;https://repo1.maven.org/maven2/com/googlecode/libphonenumber/libphonenumber/&#34;&gt;Maven repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Javadoc&lt;/h1&gt; &#xA;&lt;p&gt;Javadoc is automatically updated to reflect the latest release at &lt;a href=&#34;https://javadoc.io/doc/com.googlecode.libphonenumber/libphonenumber/&#34;&gt;https://javadoc.io/doc/com.googlecode.libphonenumber/libphonenumber/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Versioning and Announcements&lt;/h1&gt; &#xA;&lt;p&gt;We generally choose the release number following these guidelines.&lt;/p&gt; &#xA;&lt;p&gt;If any of the changes pushed to master since the last release are incompatible with the intent / specification of an existing libphonenumber API or may cause libphonenumber (Java, C++, or JS) clients to have to change their code to keep building, we publish a major release. For example, if the last release were 7.7.3, the new one would be 8.0.0.&lt;/p&gt; &#xA;&lt;p&gt;If any of those changes &lt;em&gt;enable&lt;/em&gt; clients to update their code to take advantage of new functionality, and if clients would have to roll-back these changes in the event that the release was marked as &#34;bad&#34;, we publish a minor release. For example, we&#39;d go from 7.7.3 to 7.8.0.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, including when a release contains only &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/FAQ.md#metadata_definition&#34;&gt;metadata&lt;/a&gt; changes, we publish a sub-minor release, e.g. 7.7.3 to 7.7.4.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes we make internal changes to the code or metadata that, while not affecting compatibility for clients, could affect compatibility for &lt;strong&gt;porters&lt;/strong&gt; of the library. For such changes we make announcements to &lt;a href=&#34;https://groups.google.com/forum/#!forum/libphonenumber-discuss&#34;&gt;libphonenumber-discuss&lt;/a&gt;. Such changes are not reflected in the version number, and we would publish a sub-minor release if there were no other changes.&lt;/p&gt; &#xA;&lt;p&gt;Want to get notified of new releases? During most of the year, excepting holidays and extenuating circumstances, we release fortnightly. We update &lt;a href=&#34;https://github.com/google/libphonenumber/releases&#34;&gt;release tags&lt;/a&gt; and document detailed &lt;a href=&#34;https://github.com/google/libphonenumber/raw/master/release_notes.txt&#34;&gt;release notes&lt;/a&gt;. We also send an announcement to &lt;a href=&#34;https://groups.google.com/forum/#!forum/libphonenumber-discuss&#34;&gt;libphonenumber-discuss&lt;/a&gt; for every release.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Examples&lt;/h1&gt; &#xA;&lt;p&gt;Let&#39;s say you have a string representing a phone number from Switzerland. This is how you parse/normalize it into a &lt;code&gt;PhoneNumber&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String swissNumberStr = &#34;044 668 18 00&#34;;&#xA;PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();&#xA;try {&#xA;  PhoneNumber swissNumberProto = phoneUtil.parse(swissNumberStr, &#34;CH&#34;);&#xA;} catch (NumberParseException e) {&#xA;  System.err.println(&#34;NumberParseException was thrown: &#34; + e.toString());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, &lt;code&gt;swissNumberProto&lt;/code&gt; contains:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;country_code&#34;: 41,&#xA;  &#34;national_number&#34;: 446681800&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;PhoneNumber&lt;/code&gt; is a class that was originally auto-generated from &lt;code&gt;phonenumber.proto&lt;/code&gt; with necessary modifications for efficiency. For details on the meaning of each field, refer to &lt;code&gt;resources/phonenumber.proto&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now let us validate whether the number is valid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;boolean isValid = phoneUtil.isValidNumber(swissNumberProto); // returns true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a few formats supported by the formatting method, as illustrated below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Produces &#34;+41 44 668 18 00&#34;&#xA;System.out.println(phoneUtil.format(swissNumberProto, PhoneNumberFormat.INTERNATIONAL));&#xA;// Produces &#34;044 668 18 00&#34;&#xA;System.out.println(phoneUtil.format(swissNumberProto, PhoneNumberFormat.NATIONAL));&#xA;// Produces &#34;+41446681800&#34;&#xA;System.out.println(phoneUtil.format(swissNumberProto, PhoneNumberFormat.E164));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could also choose to format the number in the way it is dialed from another country:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Produces &#34;011 41 44 668 1800&#34;, the number when it is dialed in the United States.&#xA;System.out.println(phoneUtil.formatOutOfCountryCallingNumber(swissNumberProto, &#34;US&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Formatting Phone Numbers &#39;as you type&#39;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();&#xA;AsYouTypeFormatter formatter = phoneUtil.getAsYouTypeFormatter(&#34;US&#34;);&#xA;System.out.println(formatter.inputDigit(&#39;6&#39;));  // Outputs &#34;6&#34;&#xA;...  // Input more digits&#xA;System.out.println(formatter.inputDigit(&#39;3&#39;));  // Now outputs &#34;650 253&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Geocoding Phone Numbers&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PhoneNumberOfflineGeocoder geocoder = PhoneNumberOfflineGeocoder.getInstance();&#xA;// Outputs &#34;Zurich&#34;&#xA;System.out.println(geocoder.getDescriptionForNumber(swissNumberProto, Locale.ENGLISH));&#xA;// Outputs &#34;Zürich&#34;&#xA;System.out.println(geocoder.getDescriptionForNumber(swissNumberProto, Locale.GERMAN));&#xA;// Outputs &#34;Zurigo&#34;&#xA;System.out.println(geocoder.getDescriptionForNumber(swissNumberProto, Locale.ITALIAN));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mapping Phone Numbers to original carriers&lt;/h2&gt; &#xA;&lt;p&gt;Caveat: We do not provide data about the current carrier of a phone number, only the original carrier who is assigned the corresponding range. Read about &lt;a href=&#34;https://raw.githubusercontent.com/google/libphonenumber/master/FAQ.md#what-is-mobile-number-portability&#34;&gt;number portability&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PhoneNumber swissMobileNumber =&#xA;    new PhoneNumber().setCountryCode(41).setNationalNumber(798765432L);&#xA;PhoneNumberToCarrierMapper carrierMapper = PhoneNumberToCarrierMapper.getInstance();&#xA;// Outputs &#34;Swisscom&#34;&#xA;System.out.println(carrierMapper.getNameForNumber(swissMobileNumber, Locale.ENGLISH));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples on how to use the library can be found in the &lt;a href=&#34;https://github.com/google/libphonenumber/tree/master/java/libphonenumber/test/com/google/i18n/phonenumbers&#34;&gt;unit tests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Third-party Ports&lt;/h1&gt; &#xA;&lt;p&gt;Several third-party ports of the phone number library are known to us. We share them here in case they&#39;re useful for developers.&lt;/p&gt; &#xA;&lt;p&gt;However, we emphasize that these ports are by developers outside the libphonenumber project. We do not evaluate their quality or influence their maintenance processes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C#: &lt;a href=&#34;https://github.com/twcclegg/libphonenumber-csharp&#34;&gt;https://github.com/twcclegg/libphonenumber-csharp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go: &lt;a href=&#34;https://github.com/nyaruka/phonenumbers&#34;&gt;https://github.com/nyaruka/phonenumbers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Objective-c: &lt;a href=&#34;https://github.com/iziz/libPhoneNumber-iOS&#34;&gt;https://github.com/iziz/libPhoneNumber-iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PHP: &lt;a href=&#34;https://github.com/giggsey/libphonenumber-for-php&#34;&gt;https://github.com/giggsey/libphonenumber-for-php&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL in-database types: &lt;a href=&#34;https://github.com/blm768/pg-libphonenumber&#34;&gt;https://github.com/blm768/pg-libphonenumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python: &lt;a href=&#34;https://github.com/daviddrysdale/python-phonenumbers&#34;&gt;https://github.com/daviddrysdale/python-phonenumbers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruby: &lt;a href=&#34;https://github.com/mobi/telephone_number&#34;&gt;https://github.com/mobi/telephone_number&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust: &lt;a href=&#34;https://github.com/1aim/rust-phonenumber&#34;&gt;https://github.com/1aim/rust-phonenumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Erlang: &lt;a href=&#34;https://github.com/marinakr/libphonenumber_erlang&#34;&gt;https://github.com/marinakr/libphonenumber_erlang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clojure: &lt;a href=&#34;https://github.com/randomseed-io/phone-number&#34;&gt;https://github.com/randomseed-io/phone-number&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;R: &lt;a href=&#34;https://github.com/socialresearchcentre/dialr/&#34;&gt;https://github.com/socialresearchcentre/dialr/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatives to our own versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android-optimized: Our Java version loads the metadata from &lt;code&gt;Class#getResourcesAsStream&lt;/code&gt; and asks that Android apps follow the Android loading best practices of repackaging the metadata and loading from &lt;code&gt;AssetManager#open()&lt;/code&gt; themselves (&lt;a href=&#34;https://github.com/google/libphonenumber/raw/master/FAQ.md#optimize-loads&#34;&gt;FAQ&lt;/a&gt;). If you don&#39;t want to do this, check out the port at &lt;a href=&#34;https://github.com/MichaelRocks/libphonenumber-android&#34;&gt;https://github.com/MichaelRocks/libphonenumber-android&lt;/a&gt;, which does repackage the metadata and use &lt;code&gt;AssetManager#open()&lt;/code&gt;, and may be depended on without needing those specific loading optimizations from clients. You should also check out the port at &lt;a href=&#34;https://github.com/lionscribe/libphonenumber-android&#34;&gt;https://github.com/lionscribe/libphonenumber-android&lt;/a&gt; which also supports geocoding, and only requires a one line code change.&lt;/li&gt; &#xA; &lt;li&gt;Javascript: If you don&#39;t want to use our version, which depends on Closure, there are several other options, including &lt;a href=&#34;https://github.com/catamphetamine/libphonenumber-js&#34;&gt;https://github.com/catamphetamine/libphonenumber-js&lt;/a&gt; - a stripped-down rewrite, about 110 KB in size - and &lt;a href=&#34;https://github.com/seegno/google-libphonenumber&#34;&gt;https://github.com/seegno/google-libphonenumber&lt;/a&gt; - a browserify-compatible wrapper around the original unmodified library installable via npm, which packs the Google Closure library, about 420 KB in size.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ClickHouse/ClickHouse</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/ClickHouse/ClickHouse</id>
    <link href="https://github.com/ClickHouse/ClickHouse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ClickHouse® is a free analytics DBMS for big data&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://clickhouse.com&#34;&gt;&lt;img src=&#34;https://github.com/ClickHouse/ClickHouse/raw/master/website/images/logo-400x240.png&#34; alt=&#34;ClickHouse — open source distributed column-oriented DBMS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ClickHouse® is an open-source column-oriented database management system that allows generating analytical data reports in real-time.&lt;/p&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clickhouse.com/&#34;&gt;Official website&lt;/a&gt; has a quick high-level overview of ClickHouse on the main page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clickhouse.com/docs/en/getting_started/tutorial/&#34;&gt;Tutorial&lt;/a&gt; shows how to set up and query a small ClickHouse cluster.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clickhouse.com/docs/en/&#34;&gt;Documentation&lt;/a&gt; provides more in-depth information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/ClickHouseDB&#34;&gt;YouTube channel&lt;/a&gt; has a lot of content about ClickHouse in video format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/clickhousedb/shared_invite/zt-rxm3rdrk-lIUmhLC3V8WTaL0TGxsOmg&#34;&gt;Slack&lt;/a&gt; and &lt;a href=&#34;https://telegram.me/clickhouse_en&#34;&gt;Telegram&lt;/a&gt; allow chatting with ClickHouse users in real-time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clickhouse.com/blog/en/&#34;&gt;Blog&lt;/a&gt; contains various ClickHouse-related articles, as well as announcements and reports about events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clickhouse.com/codebrowser/ClickHouse/index.html&#34;&gt;Code Browser (Woboq)&lt;/a&gt; with syntax highlight and navigation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.dev/ClickHouse/ClickHouse&#34;&gt;Code Browser (github.dev)&lt;/a&gt; with syntax highlight, powered by github.dev.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clickhouse.com/company/#contact&#34;&gt;Contacts&lt;/a&gt; can help to get your questions answered if there are any.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>opencv/opencv</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/opencv/opencv</id>
    <link href="https://github.com/opencv/opencv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Computer Vision Library&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;OpenCV: Open Source Computer Vision Library&lt;/h2&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Homepage: &lt;a href=&#34;https://opencv.org&#34;&gt;https://opencv.org&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Courses: &lt;a href=&#34;https://opencv.org/courses&#34;&gt;https://opencv.org/courses&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Docs: &lt;a href=&#34;https://docs.opencv.org/4.x/&#34;&gt;https://docs.opencv.org/4.x/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Q&amp;amp;A forum: &lt;a href=&#34;https://forum.opencv.org&#34;&gt;https://forum.opencv.org&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;previous forum (read only): &lt;a href=&#34;http://answers.opencv.org&#34;&gt;http://answers.opencv.org&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Issue tracking: &lt;a href=&#34;https://github.com/opencv/opencv/issues&#34;&gt;https://github.com/opencv/opencv/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Additional OpenCV functionality: &lt;a href=&#34;https://github.com/opencv/opencv_contrib&#34;&gt;https://github.com/opencv/opencv_contrib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://github.com/opencv/opencv/wiki/How_to_contribute&#34;&gt;contribution guidelines&lt;/a&gt; before starting work on a pull request.&lt;/p&gt; &#xA;&lt;h4&gt;Summary of the guidelines:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One pull request per issue;&lt;/li&gt; &#xA; &lt;li&gt;Choose the right base branch;&lt;/li&gt; &#xA; &lt;li&gt;Include tests and documentation;&lt;/li&gt; &#xA; &lt;li&gt;Clean up &#34;oops&#34; commits before submitting;&lt;/li&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://github.com/opencv/opencv/wiki/Coding_Style_Guide&#34;&gt;coding style guide&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wkhtmltopdf/wkhtmltopdf</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/wkhtmltopdf/wkhtmltopdf</id>
    <link href="https://github.com/wkhtmltopdf/wkhtmltopdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Convert HTML to PDF using Webkit (QtWebKit)&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;wkhtmltopdf and wkhtmltoimage&lt;/h2&gt; &#xA;&lt;p&gt;wkhtmltopdf and wkhtmltoimage are command line tools to render HTML into PDF and various image formats using the QT Webkit rendering engine. These run entirely &#34;headless&#34; and do not require a display or display service.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://wkhtmltopdf.org&#34;&gt;https://wkhtmltopdf.org&lt;/a&gt; for updated documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;wkhtmltopdf has its own dedicated repository for building and packaging.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/wkhtmltopdf/packaging&#34;&gt;https://github.com/wkhtmltopdf/packaging&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/filament</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/google/filament</id>
    <link href="https://github.com/google/filament" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Filament is a real-time physically based rendering engine for Android, iOS, Windows, Linux, macOS, and WebGL2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Filament&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/filament/actions?query=workflow%3AAndroid&#34;&gt;&lt;img src=&#34;https://github.com/google/filament/workflows/Android/badge.svg?sanitize=true&#34; alt=&#34;Android Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/filament/actions?query=workflow%3AiOS&#34;&gt;&lt;img src=&#34;https://github.com/google/filament/workflows/iOS/badge.svg?sanitize=true&#34; alt=&#34;iOS Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/filament/actions?query=workflow%3ALinux&#34;&gt;&lt;img src=&#34;https://github.com/google/filament/workflows/Linux/badge.svg?sanitize=true&#34; alt=&#34;Linux Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/filament/actions?query=workflow%3AmacOS&#34;&gt;&lt;img src=&#34;https://github.com/google/filament/workflows/macOS/badge.svg?sanitize=true&#34; alt=&#34;macOS Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/filament/actions?query=workflow%3AWindows&#34;&gt;&lt;img src=&#34;https://github.com/google/filament/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Windows Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/filament/actions?query=workflow%3AWeb&#34;&gt;&lt;img src=&#34;https://github.com/google/filament/workflows/Web/badge.svg?sanitize=true&#34; alt=&#34;Web Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Filament is a real-time physically based rendering engine for Android, iOS, Linux, macOS, Windows, and WebGL. It is designed to be as small as possible and as efficient as possible on Android.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/filament/releases&#34;&gt;Download Filament releases&lt;/a&gt; to access stable builds. Filament release archives contains host-side tools that are required to generate assets.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you always use tools from the same release as the runtime library. This is particularly important for &lt;code&gt;matc&lt;/code&gt; (material compiler).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d rather build Filament yourself, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/google/filament/main/BUILDING.md&#34;&gt;build manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Android projects can simply declare Filament libraries as Maven dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;repositories {&#xA;    // ...&#xA;    mavenCentral()&#xA;}&#xA;&#xA;dependencies {&#xA;    implementation &#39;com.google.android.filament:filament-android:1.23.0&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are all the libraries available in the group &lt;code&gt;com.google.android.filament&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Artifact&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-android&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-android/badge.svg?subject=filament-android&#34; alt=&#34;filament-android&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Filament rendering engine itself.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/gltfio-android&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/gltfio-android/badge.svg?subject=gltfio-android&#34; alt=&#34;gltfio-android&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A glTF 2.0 loader for Filament, depends on &lt;code&gt;filament-android&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/gltfio-android-lite&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/gltfio-android-lite/badge.svg?subject=gltfio-android-lite&#34; alt=&#34;gltfio-android-lite&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Trimmed version of &lt;code&gt;gltfio&lt;/code&gt; that does not support some glTF extensions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-utils-android&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-utils-android/badge.svg?subject=filament-utils-android&#34; alt=&#34;filament-utils-android&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;KTX loading, Kotlin math, and camera utilities, depends on &lt;code&gt;gltfio-android&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filamat-android&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filamat-android/badge.svg?subject=filamat-android&#34; alt=&#34;filamat-android&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A runtime material builder/compiler. This library is large but contains a full shader compiler/validator/optimizer and supports both OpenGL and Vulkan.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filamat-android-lite&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filamat-android-lite/badge.svg?subject=filamat-android-lite&#34; alt=&#34;filamat-android-lite&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A much smaller alternative to &lt;code&gt;filamat-android&lt;/code&gt; that can only generate OpenGL shaders. It does not provide validation or optimizations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;iOS projects can use CocoaPods to install the latest release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;Filament&#39;, &#39;~&amp;gt; 1.23.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Snapshots&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to live on the edge, you can download a continuous build by following the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Find the &lt;a href=&#34;https://github.com/google/filament/commits/main&#34;&gt;commit&lt;/a&gt; you&#39;re interested in.&lt;/li&gt; &#xA; &lt;li&gt;Click the green check mark under the commit message.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;em&gt;Details&lt;/em&gt; link for the platform you&#39;re interested in.&lt;/li&gt; &#xA; &lt;li&gt;On the top left click &lt;em&gt;Summary&lt;/em&gt;, then in the &lt;em&gt;Artifacts&lt;/em&gt; section choose the desired artifact.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google.github.io/filament/Filament.html&#34;&gt;Filament&lt;/a&gt;, an in-depth explanation of real-time physically based rendering, the graphics capabilities and implementation of Filament. This document explains the math and reasoning behind most of our decisions. This document is a good introduction to PBR for graphics programmers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google.github.io/filament/Materials.html&#34;&gt;Materials&lt;/a&gt;, the full reference documentation for our material system. This document explains our different material models, how to use the material compiler &lt;code&gt;matc&lt;/code&gt; and how to write custom materials.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google.github.io/filament/Material%20Properties.pdf&#34;&gt;Material Properties&lt;/a&gt;, a reference sheet for the standard material model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/filament/main/docs/images/samples/example_bistro1.jpg&#34; alt=&#34;Night scene&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/filament/main/docs/images/samples/example_bistro2.jpg&#34; alt=&#34;Night scene&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/filament/main/docs/images/samples/example_materials1.jpg&#34; alt=&#34;Materials&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/filament/main/docs/images/samples/example_materials2.jpg&#34; alt=&#34;Materials&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/filament/main/docs/images/samples/example_helmet.jpg&#34; alt=&#34;Helmet&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/google/filament/main/docs/images/samples/example_ssr.jpg&#34; alt=&#34;Screen-space refraction&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;APIs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Native C++ API for Android, iOS, Linux, macOS and Windows&lt;/li&gt; &#xA; &lt;li&gt;Java/JNI API for Android&lt;/li&gt; &#xA; &lt;li&gt;JavaScript API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Backends&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenGL 4.1+ for Linux, macOS and Windows&lt;/li&gt; &#xA; &lt;li&gt;OpenGL ES 3.0+ for Android and iOS&lt;/li&gt; &#xA; &lt;li&gt;Metal for macOS and iOS&lt;/li&gt; &#xA; &lt;li&gt;Vulkan 1.0 for Android, Linux, macOS, and Windows&lt;/li&gt; &#xA; &lt;li&gt;WebGL 2.0 for all platforms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rendering&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clustered forward renderer&lt;/li&gt; &#xA; &lt;li&gt;Cook-Torrance microfacet specular BRDF&lt;/li&gt; &#xA; &lt;li&gt;Lambertian diffuse BRDF&lt;/li&gt; &#xA; &lt;li&gt;Custom lighting/surface shading&lt;/li&gt; &#xA; &lt;li&gt;HDR/linear lighting&lt;/li&gt; &#xA; &lt;li&gt;Metallic workflow&lt;/li&gt; &#xA; &lt;li&gt;Clear coat&lt;/li&gt; &#xA; &lt;li&gt;Anisotropic lighting&lt;/li&gt; &#xA; &lt;li&gt;Approximated translucent (subsurface) materials&lt;/li&gt; &#xA; &lt;li&gt;Cloth/fabric/sheen shading&lt;/li&gt; &#xA; &lt;li&gt;Normal mapping &amp;amp; ambient occlusion mapping&lt;/li&gt; &#xA; &lt;li&gt;Image-based lighting&lt;/li&gt; &#xA; &lt;li&gt;Physically-based camera (shutter speed, sensitivity and aperture)&lt;/li&gt; &#xA; &lt;li&gt;Physical light units&lt;/li&gt; &#xA; &lt;li&gt;Point lights, spot lights and directional light&lt;/li&gt; &#xA; &lt;li&gt;Specular anti-aliasing&lt;/li&gt; &#xA; &lt;li&gt;Spot and directional light shadows&lt;/li&gt; &#xA; &lt;li&gt;Cascaded shadows&lt;/li&gt; &#xA; &lt;li&gt;EVSM, PCSS, DPCF, or PCF shadows&lt;/li&gt; &#xA; &lt;li&gt;Transparent shadows&lt;/li&gt; &#xA; &lt;li&gt;Contact shadows&lt;/li&gt; &#xA; &lt;li&gt;Screen-space ambient occlusion&lt;/li&gt; &#xA; &lt;li&gt;Screen-space reflections&lt;/li&gt; &#xA; &lt;li&gt;Screen-space refraction&lt;/li&gt; &#xA; &lt;li&gt;Global fog&lt;/li&gt; &#xA; &lt;li&gt;Dynamic resolution (with support for AMD FidelityFX FSR)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Post processing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HDR bloom&lt;/li&gt; &#xA; &lt;li&gt;Depth of field bokeh&lt;/li&gt; &#xA; &lt;li&gt;Multiple tone mappers: generic (customizable), ACES, filmic, etc.&lt;/li&gt; &#xA; &lt;li&gt;Color and tone management: luminance scaling, gamut mapping&lt;/li&gt; &#xA; &lt;li&gt;Color grading: exposure, night adaptation, white balance, channel mixer, shadows/mid-tones/highlights, ASC CDL, contrast, saturation, etc.&lt;/li&gt; &#xA; &lt;li&gt;TAA, FXAA, MSAA&lt;/li&gt; &#xA; &lt;li&gt;Screen-space lens flares&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;glTF 2.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Encodings&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Embeded&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Binary&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Primitive Types&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Points&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Lines&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Line Loop&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Line Strip&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Triangles&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Triangle Strip&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Triangle Fan&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Animation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Transform animation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linear interpolation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Morph animation &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sparse accessor&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Skin animation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Joint animation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extensions&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_draco_mesh_compression&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_lights_punctual&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_clearcoat&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_emissive_strength&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_ior&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_pbrSpecularGlossiness&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_sheen&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_transmission&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_unlit&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_variants&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_materials_volume&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_mesh_quantization&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_texture_basisu&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; KHR_texture_transform&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rendering with Filament&lt;/h2&gt; &#xA;&lt;h3&gt;Native Linux, macOS and Windows&lt;/h3&gt; &#xA;&lt;p&gt;You must create an &lt;code&gt;Engine&lt;/code&gt;, a &lt;code&gt;Renderer&lt;/code&gt; and a &lt;code&gt;SwapChain&lt;/code&gt;. The &lt;code&gt;SwapChain&lt;/code&gt; is created from a native window pointer (an &lt;code&gt;NSView&lt;/code&gt; on macOS or a &lt;code&gt;HWND&lt;/code&gt; on Windows for instance):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;Engine* engine = Engine::create();&#xA;SwapChain* swapChain = engine-&amp;gt;createSwapChain(nativeWindow);&#xA;Renderer* renderer = engine-&amp;gt;createRenderer();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To render a frame you must then create a &lt;code&gt;View&lt;/code&gt;, a &lt;code&gt;Scene&lt;/code&gt; and a &lt;code&gt;Camera&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;Camera* camera = engine-&amp;gt;createCamera(EntityManager::get().create());&#xA;View* view = engine-&amp;gt;createView();&#xA;Scene* scene = engine-&amp;gt;createScene();&#xA;&#xA;view-&amp;gt;setCamera(camera);&#xA;view-&amp;gt;setScene(scene);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Renderables are added to the scene:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;Entity renderable = EntityManager::get().create();&#xA;// build a quad&#xA;RenderableManager::Builder(1)&#xA;        .boundingBox({{ -1, -1, -1 }, { 1, 1, 1 }})&#xA;        .material(0, materialInstance)&#xA;        .geometry(0, RenderableManager::PrimitiveType::TRIANGLES, vertexBuffer, indexBuffer, 0, 6)&#xA;        .culling(false)&#xA;        .build(*engine, renderable);&#xA;scene-&amp;gt;addEntity(renderable);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The material instance is obtained from a material, itself loaded from a binary blob generated by &lt;code&gt;matc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;Material* material = Material::Builder()&#xA;        .package((void*) BAKED_MATERIAL_PACKAGE, sizeof(BAKED_MATERIAL_PACKAGE))&#xA;        .build(*engine);&#xA;MaterialInstance* materialInstance = material-&amp;gt;createInstance();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To learn more about materials and &lt;code&gt;matc&lt;/code&gt;, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/google/filament/main/docs/Materials.md.html&#34;&gt;materials documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To render, simply pass the &lt;code&gt;View&lt;/code&gt; to the &lt;code&gt;Renderer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// beginFrame() returns false if we need to skip a frame&#xA;if (renderer-&amp;gt;beginFrame(swapChain)) {&#xA;    // for each View&#xA;    renderer-&amp;gt;render(view);&#xA;    renderer-&amp;gt;endFrame();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For complete examples of Linux, macOS and Windows Filament applications, look at the source files in the &lt;code&gt;samples/&lt;/code&gt; directory. These samples are all based on &lt;code&gt;libs/filamentapp/&lt;/code&gt; which contains the code that creates a native window with SDL2 and initializes the Filament engine, renderer and views.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to prepare environment maps for image-based lighting please refer to &lt;a href=&#34;https://github.com/google/filament/raw/main/BUILDING.md#running-the-native-samples&#34;&gt;BUILDING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;code&gt;android/samples&lt;/code&gt; for examples of how to use Filament on Android.&lt;/p&gt; &#xA;&lt;p&gt;You must always first initialize Filament by calling &lt;code&gt;Filament.init()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Rendering with Filament on Android is similar to rendering from native code (the APIs are largely the same across languages). You can render into a &lt;code&gt;Surface&lt;/code&gt; by passing a &lt;code&gt;Surface&lt;/code&gt; to the &lt;code&gt;createSwapChain&lt;/code&gt; method. This allows you to render to a &lt;code&gt;SurfaceTexture&lt;/code&gt;, a &lt;code&gt;TextureView&lt;/code&gt; or a &lt;code&gt;SurfaceView&lt;/code&gt;. To make things easier we provide an Android specific API called &lt;code&gt;UiHelper&lt;/code&gt; in the package &lt;code&gt;com.google.android.filament.android&lt;/code&gt;. All you need to do is set a render callback on the helper and attach your &lt;code&gt;SurfaceView&lt;/code&gt; or &lt;code&gt;TextureView&lt;/code&gt; to it. You are still responsible for creating the swap chain in the &lt;code&gt;onNativeWindowChanged()&lt;/code&gt; callback.&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Filament is supported on iOS 11.0 and above. See &lt;code&gt;ios/samples&lt;/code&gt; for examples of using Filament on iOS.&lt;/p&gt; &#xA;&lt;p&gt;Filament on iOS is largely the same as native rendering with C++. A &lt;code&gt;CAEAGLLayer&lt;/code&gt; or &lt;code&gt;CAMetalLayer&lt;/code&gt; is passed to the &lt;code&gt;createSwapChain&lt;/code&gt; method. Filament for iOS supports both Metal (preferred) and OpenGL ES.&lt;/p&gt; &#xA;&lt;h2&gt;Assets&lt;/h2&gt; &#xA;&lt;p&gt;To get started you can use the textures and environment maps found respectively in &lt;code&gt;third_party/textures&lt;/code&gt; and &lt;code&gt;third_party/environments&lt;/code&gt;. These assets are under CC0 license. Please refer to their respective &lt;code&gt;URL.txt&lt;/code&gt; files to know more about the original authors.&lt;/p&gt; &#xA;&lt;p&gt;Environments must be pre-processed using &lt;a href=&#34;https://github.com/google/filament/raw/main/BUILDING.md#running-the-native-samples&#34;&gt;&lt;code&gt;cmgen&lt;/code&gt;&lt;/a&gt; or using the &lt;code&gt;libiblprefilter&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;h2&gt;How to make contributions&lt;/h2&gt; &#xA;&lt;p&gt;Please read and follow the steps in &lt;a href=&#34;https://raw.githubusercontent.com/google/filament/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. Make sure you are familiar with the &lt;a href=&#34;https://raw.githubusercontent.com/google/filament/main/CODE_STYLE.md&#34;&gt;code style&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Directory structure&lt;/h2&gt; &#xA;&lt;p&gt;This repository not only contains the core Filament engine, but also its supporting libraries and tools.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;android&lt;/code&gt;: Android libraries and projects &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;filamat-android&lt;/code&gt;: Filament material generation library (AAR) for Android&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filament-android&lt;/code&gt;: Filament library (AAR) for Android&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filament-utils-android&lt;/code&gt;: Extra utilities (KTX loader, math types, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gltfio-android&lt;/code&gt;: Filament glTF loading library (AAR) for Android&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;samples&lt;/code&gt;: Android-specific Filament samples&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;art&lt;/code&gt;: Source for various artworks (logos, PDF manuals, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;assets&lt;/code&gt;: 3D assets to use with sample applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build&lt;/code&gt;: CMake build scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: Documentation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;math&lt;/code&gt;: Mathematica notebooks used to explore BRDFs, equations, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filament&lt;/code&gt;: Filament rendering engine (minimal dependencies) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;backend&lt;/code&gt;: Rendering backends/drivers (Vulkan, Metal, OpenGL/ES)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ide&lt;/code&gt;: Configuration files for IDEs (CLion, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ios&lt;/code&gt;: Sample projects for iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libs&lt;/code&gt;: Libraries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bluegl&lt;/code&gt;: OpenGL bindings for macOS, Linux and Windows&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bluevk&lt;/code&gt;: Vulkan bindings for macOS, Linux, Windows and Android&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;camutils&lt;/code&gt;: Camera manipulation utilities&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filabridge&lt;/code&gt;: Library shared by the Filament engine and host tools&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filaflat&lt;/code&gt;: Serialization/deserialization library used for materials&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filagui&lt;/code&gt;: Helper library for &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;Dear ImGui&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filamat&lt;/code&gt;: Material generation library&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filamentapp&lt;/code&gt;: SDL2 skeleton to build sample apps&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filameshio&lt;/code&gt;: Tiny filamesh parsing library (see also &lt;code&gt;tools/filamesh&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;geometry&lt;/code&gt;: Mesh-related utilities&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gltfio&lt;/code&gt;: Loader for glTF 2.0&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ibl&lt;/code&gt;: IBL generation tools&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;image&lt;/code&gt;: Image filtering and simple transforms&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;imageio&lt;/code&gt;: Image file reading / writing, only intended for internal use&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;matdbg&lt;/code&gt;: DebugServer for inspecting shaders at run-time (debug builds only)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;math&lt;/code&gt;: Math library&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mathio&lt;/code&gt;: Math types support for output streams&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;utils&lt;/code&gt;: Utility library (threads, memory, data structures, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;viewer&lt;/code&gt;: glTF viewer library (requires gltfio)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;samples&lt;/code&gt;: Sample desktop applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shaders&lt;/code&gt;: Shaders used by &lt;code&gt;filamat&lt;/code&gt; and &lt;code&gt;matc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;third_party&lt;/code&gt;: External libraries and assets &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;environments&lt;/code&gt;: Environment maps under CC0 license that can be used with &lt;code&gt;cmgen&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;models&lt;/code&gt;: Models under permissive licenses&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;textures&lt;/code&gt;: Textures under CC0 license&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tools&lt;/code&gt;: Host tools &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cmgen&lt;/code&gt;: Image-based lighting asset generator&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filamesh&lt;/code&gt;: Mesh converter&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;glslminifier&lt;/code&gt;: Minifies GLSL source code&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;matc&lt;/code&gt;: Material compiler&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;matinfo&lt;/code&gt; Displays information about materials compiled with &lt;code&gt;matc&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mipgen&lt;/code&gt; Generates a series of miplevels from a source image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;normal-blending&lt;/code&gt;: Tool to blend normal maps&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resgen&lt;/code&gt; Aggregates binary blobs into embeddable resources&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;roughness-prefilter&lt;/code&gt;: Pre-filters a roughness map from a normal map to reduce aliasing&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;specular-color&lt;/code&gt;: Computes the specular color of conductors based on spectral data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;web&lt;/code&gt;: JavaScript bindings, documentation, and samples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/google/filament/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emilybache/GildedRose-Refactoring-Kata</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/emilybache/GildedRose-Refactoring-Kata</id>
    <link href="https://github.com/emilybache/GildedRose-Refactoring-Kata" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starting code for the GildedRose Refactoring Kata in many programming languages.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gilded Rose Refactoring Kata&lt;/h1&gt; &#xA;&lt;p&gt;This Kata was originally created by Terry Hughes (&lt;a href=&#34;http://twitter.com/TerryHughes&#34;&gt;http://twitter.com/TerryHughes&lt;/a&gt;). It is already on GitHub &lt;a href=&#34;https://github.com/NotMyself/GildedRose&#34;&gt;here&lt;/a&gt;. See also &lt;a href=&#34;http://iamnotmyself.com/2011/02/13/refactor-this-the-gilded-rose-kata/&#34;&gt;Bobby Johnson&#39;s description of the kata&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I translated the original C# into a few other languages, (with a little help from my friends!), and slightly changed the starting position. This means I&#39;ve actually done a small amount of refactoring already compared with the original form of the kata, and made it easier to get going with writing tests by giving you one failing unit test to start with. I also added test fixtures for Text-Based approval testing with TextTest (see &lt;a href=&#34;https://github.com/emilybache/GildedRose-Refactoring-Kata/tree/master/texttests&#34;&gt;the TextTests&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;As Bobby Johnson points out in his article &lt;a href=&#34;http://iamnotmyself.com/2012/12/07/why-most-solutions-to-gilded-rose-miss-the-bigger-picture&#34;&gt;&#34;Why Most Solutions to Gilded Rose Miss The Bigger Picture&#34;&lt;/a&gt;, it&#39;ll actually give you better practice at handling a legacy code situation if you do this Kata in the original C#. However, I think this kata is also really useful for practicing writing good tests using different frameworks and approaches, and the small changes I&#39;ve made help with that. I think it&#39;s also interesting to compare what the refactored code and tests look like in different programming languages.&lt;/p&gt; &#xA;&lt;p&gt;I use this kata as part of my work as a technical coach. I wrote a lot about the coaching method I use in this book &lt;a href=&#34;https://leanpub.com/techagilecoach&#34;&gt;Technical Agile Coaching with the Samman method&lt;/a&gt;. A while back I wrote this article &lt;a href=&#34;http://coding-is-like-cooking.info/2013/03/writing-good-tests-for-the-gilded-rose-kata/&#34;&gt;&#34;Writing Good Tests for the Gilded Rose Kata&#34;&lt;/a&gt; about how you could use this kata in a &lt;a href=&#34;https://leanpub.com/codingdojohandbook&#34;&gt;coding dojo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to use this Kata&lt;/h2&gt; &#xA;&lt;p&gt;The simplest way is to just clone the code and start hacking away improving the design. You&#39;ll want to look at the &lt;a href=&#34;https://github.com/emilybache/GildedRose-Refactoring-Kata/tree/master/GildedRoseRequirements.txt&#34;&gt;&#34;Gilded Rose Requirements&#34;&lt;/a&gt; which explains what the code is for. I strongly advise you that you&#39;ll also need some tests if you want to make sure you don&#39;t break the code while you refactor.&lt;/p&gt; &#xA;&lt;p&gt;You could write some unit tests yourself, using the requirements to identify suitable test cases. I&#39;ve provided a failing unit test in a popular test framework as a starting point for most languages.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, use the &#34;Text-Based&#34; tests provided in this repository. (Read more about that in the next section)&lt;/p&gt; &#xA;&lt;p&gt;Whichever testing approach you choose, the idea of the exercise is to do some deliberate practice, and improve your skills at designing test cases and refactoring. The idea is not to re-write the code from scratch, but rather to practice designing tests, taking small steps, running the tests often, and incrementally improving the design.&lt;/p&gt; &#xA;&lt;h3&gt;Gilded Rose Requirements in other languages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilybache/GildedRose-Refactoring-Kata/main/GildedRoseRequirements.txt&#34;&gt;English&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilybache/GildedRose-Refactoring-Kata/main/GildedRoseRequirements_es.md&#34;&gt;Español&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilybache/GildedRose-Refactoring-Kata/main/GildedRoseRequirements_fr.md&#34;&gt;Français&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilybache/GildedRose-Refactoring-Kata/main/GildedRoseRequirements_jp.md&#34;&gt;日本語&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilybache/GildedRose-Refactoring-Kata/main/GildedRoseRequirements_pt-BR.md&#34;&gt;Português&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilybache/GildedRose-Refactoring-Kata/main/GildedRoseRequirements_ru.txt&#34;&gt;Русский&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilybache/GildedRose-Refactoring-Kata/main/GildedRoseRequirements_th.md&#34;&gt;ไทย&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilybache/GildedRose-Refactoring-Kata/main/GildedRoseRequirements_zh.txt&#34;&gt;中文&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilybache/GildedRose-Refactoring-Kata/main/GildedRoseRequirements_kr.md&#34;&gt;한국어&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emilybache/GildedRose-Refactoring-Kata/main/GildedRoseRequirements_de.md&#34;&gt;German&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Text-Based Approval Testing&lt;/h2&gt; &#xA;&lt;p&gt;This code comes with comprehensive tests that use this approach. For information about how to run them, see the &lt;a href=&#34;https://github.com/emilybache/GildedRose-Refactoring-Kata/tree/master/texttests&#34;&gt;texttests README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translating this code&lt;/h2&gt; &#xA;&lt;p&gt;More translations are most welcome! I&#39;m very open for pull requests that translate the starting position into additional languages.&lt;/p&gt; &#xA;&lt;p&gt;Please note a translation should ideally include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a translation of the production code for &#39;update_quality&#39; and Item&lt;/li&gt; &#xA; &lt;li&gt;one failing unit test complaining that &#34;fixme&#34; != &#34;foo&#34;&lt;/li&gt; &#xA; &lt;li&gt;a TextTest fixture, ie a command-line program that runs update_quality on the sample data for the number of days specified.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please don&#39;t write too much code in the starting position or add too many unit tests. The idea with the one failing unit test is to tempt people to work out how to fix it, discover it wasn&#39;t that hard, and now they understand what this test is doing they realize they can improve it.&lt;/p&gt; &#xA;&lt;p&gt;If your programming language doesn&#39;t have an easy way to add a command-line interface, then the TextTest fixture is probably not necessary.&lt;/p&gt; &#xA;&lt;h2&gt;Better Code Hub&lt;/h2&gt; &#xA;&lt;p&gt;I analysed this repo according to the clean code standards on &lt;a href=&#34;https://bettercodehub.com&#34;&gt;Better Code Hub&lt;/a&gt; just to get an independent opinion of how bad the code is. Perhaps unsurprisingly, the compliance score is low!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bettercodehub.com/&#34;&gt;&lt;img src=&#34;https://bettercodehub.com/edge/badge/emilybache/GildedRose-Refactoring-Kata?branch=master&#34; alt=&#34;BCH compliance&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bulletphysics/bullet3</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/bulletphysics/bullet3</id>
    <link href="https://github.com/bulletphysics/bullet3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bullet Physics SDK: real-time collision detection and multi-physics simulation for VR, games, visual effects, robotics, machine learning etc.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/bulletphysics/bullet3&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/bulletphysics/bullet3.png?branch=master&#34; alt=&#34;Travis Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/erwincoumans/bullet3&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/6sly9uxajr6xsstq&#34; alt=&#34;Appveyor Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Bullet Physics SDK&lt;/h1&gt; &#xA;&lt;p&gt;This is the official C++ source code repository of the Bullet Physics SDK: real-time collision detection and multi-physics simulation for VR, games, visual effects, robotics, machine learning etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://pybullet.org/wordpress/wp-content/uploads/2019/03/cropped-pybullet.png&#34; alt=&#34;PyBullet&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;The Issue tracker was flooded with support questions and is closed until it is cleaned up. Use the &lt;a href=&#34;http://pybullet.org&#34;&gt;PyBullet forums&lt;/a&gt; to discuss with others.&lt;/p&gt; &#xA;&lt;h2&gt;PyBullet&lt;/h2&gt; &#xA;&lt;p&gt;It is highly recommended to use PyBullet Python bindings for improved support for robotics, reinforcement learning and VR. Use pip install pybullet and checkout the &lt;a href=&#34;https://docs.google.com/document/d/10sXEhzFRSnvFcl3XxNGhnD4N2SedqwdAvK3dsihxVUA/edit#heading=h.2ye70wns7io3&#34;&gt;PyBullet Quickstart Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Installation is simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install pybullet --upgrade --user&#xA;python3 -m pybullet_envs.examples.enjoy_TF_AntBulletEnv_v0_2017may&#xA;python3 -m pybullet_envs.examples.enjoy_TF_HumanoidFlagrunHarderBulletEnv_v1_2017jul&#xA;python3 -m pybullet_envs.deep_mimic.testrl --arg_file run_humanoid3d_backflip_args.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use PyBullet in your research, please cite it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@MISC{coumans2021,&#xA;author =   {Erwin Coumans and Yunfei Bai},&#xA;title =    {PyBullet, a Python module for physics simulation for games, robotics and machine learning},&#xA;howpublished = {\url{http://pybullet.org}},&#xA;year = {2016--2021}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements for Bullet Physics C++&lt;/h2&gt; &#xA;&lt;p&gt;A C++ compiler for C++ 2003. The library is tested on Windows, Linux, Mac OSX, iOS, Android, but should likely work on any platform with C++ compiler. Some optional demos require OpenGL 2 or OpenGL 3, there are some non-graphical demos and unit tests too.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors and Coding Style information&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/1u9vyzPtrVoVhYqQOGNWUgjRbfwfCdIts_NzmvgiJ144/edit&#34;&gt;https://docs.google.com/document/d/1u9vyzPtrVoVhYqQOGNWUgjRbfwfCdIts_NzmvgiJ144/edit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements for experimental OpenCL GPGPU support&lt;/h2&gt; &#xA;&lt;p&gt;The entire collision detection and rigid body dynamics can be executed on the GPU.&lt;/p&gt; &#xA;&lt;p&gt;A high-end desktop GPU, such as an AMD Radeon 7970 or NVIDIA GTX 680 or better. We succesfully tested the software under Windows, Linux and Mac OSX. The software currently doesn&#39;t work on OpenCL CPU devices. It might run on a laptop GPU but performance will not likely be very good. Note that often an OpenCL drivers fails to compile a kernel. Some unit tests exist to track down the issue, but more work is required to cover all OpenCL kernels.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All source code files are licensed under the permissive zlib license (&lt;a href=&#34;http://opensource.org/licenses/Zlib&#34;&gt;http://opensource.org/licenses/Zlib&lt;/a&gt;) unless marked differently in a particular folder/file.&lt;/p&gt; &#xA;&lt;h2&gt;Build instructions for Bullet using vcpkg&lt;/h2&gt; &#xA;&lt;p&gt;You can download and install Bullet using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install bullet3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Bullet port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h2&gt;Build instructions for Bullet using premake. You can also use cmake instead.&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click on build_visual_studio_vr_pybullet_double.bat and open build3/vs2010/0_Bullet3Solution.sln When asked, convert the projects to a newer version of Visual Studio. If you installed Python in the C:\ root directory, the batch file should find it automatically. Otherwise, edit this batch file to choose where Python include/lib directories are located.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows Virtual Reality sandbox for HTC Vive and Oculus Rift&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build and run the App_SharedMemoryPhysics_VR project, preferably in Release/optimized build. You can connect from Python pybullet to the sandbox using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import pybullet as p&#xA;p.connect(p.SHARED_MEMORY) #or (p.TCP, &#34;localhost&#34;, 6667) or (p.UDP, &#34;192.168.86.10&#34;,1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux and Mac OSX gnu make&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure cmake is installed (sudo apt-get install cmake, brew install cmake, or &lt;a href=&#34;https://cmake.org&#34;&gt;https://cmake.org&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;In a terminal type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build_cmake_pybullet_double.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This script will invoke cmake and build in the build_cmake directory. You can find pybullet in Bullet/examples/pybullet. The BulletExampleBrowser binary will be in Bullet/examples/ExampleBrowser.&lt;/p&gt; &#xA;&lt;p&gt;You can also build Bullet using premake. There are premake executables in the build3 folder. Depending on your system (Linux 32bit, 64bit or Mac OSX) use one of the following lines Using premake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd build3&#xA;./premake4_linux --double gmake&#xA;./premake4_linux64 --double gmake&#xA;./premake4_osx --double --enable_pybullet gmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd gmake&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that on Linux, you need to use cmake to build pybullet, since the compiler has issues of mixing shared and static libraries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mac OSX Xcode&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click on build3/xcode4.command or in a terminal window execute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./premake_osx xcode4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The App_ExampleBrowser executables will be located in the bin folder. You can just run it though a terminal/command prompt, or by clicking it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[--start_demo_name=&#34;Demo Name&#34;]     Start with a selected demo  &#xA;[--mp4=moviename.mp4]               Create a mp4 movie of the window, requires ffmpeg installed&#xA;[--mouse_move_multiplier=0.400000]  Set the mouse move sensitivity&#xA;[--mouse_wheel_multiplier=0.01]     Set the mouse wheel sensitivity&#xA;[--background_color_red= 0.9]       Set the red component for background color. Same for green and blue&#xA;[--fixed_timestep= 0.0]             Use either a real-time delta time (0.0) or a fixed step size (0.016666)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use mouse picking to grab objects. When holding the ALT or CONTROL key, you have Maya style camera mouse controls. Press F1 to create a series of screenshots. Hit ESCAPE to exit the demo app.&lt;/p&gt; &#xA;&lt;p&gt;Check out the docs folder and the Bullet physics forums for further information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SFML/SFML</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/SFML/SFML</id>
    <link href="https://github.com/SFML/SFML" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple and Fast Multimedia Library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.sfml-dev.org&#34;&gt;&lt;img src=&#34;https://www.sfml-dev.org/images/logo.png&#34; alt=&#34;SFML logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SFML — Simple and Fast Multimedia Library&lt;/h1&gt; &#xA;&lt;p&gt;SFML is a simple, fast, cross-platform and object-oriented multimedia API. It provides access to windowing, graphics, audio and network. It is written in C++, and has bindings for various languages such as C, .Net, Ruby, Python.&lt;/p&gt; &#xA;&lt;h2&gt;State of Development&lt;/h2&gt; &#xA;&lt;p&gt;SFML is currently in an interesting state of development, which can quickly become confusing if you aren&#39;t following it closely. As such we want to clarify where to get which version.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/SFML/SFML/tree/master&#34;&gt;&lt;code&gt;master&lt;/code&gt;&lt;/a&gt; branch contains work in progress for the next major version SFML 3. As such it&#39;s considered unstable, but any testing and feedback is highly appreciated.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/SFML/SFML/tree/2.6.x&#34;&gt;&lt;code&gt;2.6.x&lt;/code&gt;&lt;/a&gt; branch is the nearly complete next minor version SFML 2.6, which should be very stable, even if it hasn&#39;t been officially released yet.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/SFML/SFML/tree/2.5.1&#34;&gt;&lt;code&gt;2.5.1&lt;/code&gt;&lt;/a&gt; tag is the last official SFML release, but it lacks a lot of fixes and features that can already be found on the &lt;code&gt;2.6.x&lt;/code&gt; branch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can get the latest official release on &lt;a href=&#34;https://www.sfml-dev.org/download.php&#34;&gt;SFML&#39;s website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can also get the source code of the current development version from the &lt;a href=&#34;https://github.com/SFML/SFML&#34;&gt;Git repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Alternatively, you can get the latest snapshot / artifact builds from the &lt;a href=&#34;https://artifacts.sfml-dev.org/by-branch/master/&#34;&gt;artifacts storage&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Follow the instructions of the &lt;a href=&#34;https://www.sfml-dev.org/tutorials/&#34;&gt;tutorials&lt;/a&gt;, there is one for each platform/compiler that SFML supports.&lt;/p&gt; &#xA;&lt;h2&gt;Learn&lt;/h2&gt; &#xA;&lt;p&gt;There are several places to learn SFML:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://www.sfml-dev.org/tutorials/&#34;&gt;official tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://www.sfml-dev.org/documentation/&#34;&gt;online API documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/SFML/SFML/wiki/&#34;&gt;community wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Here are some useful community links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/nr4X7Fh&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/sfmldev&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.sfml-dev.org/forums/&#34;&gt;Forum&lt;/a&gt; (&lt;a href=&#34;https://fr.sfml-dev.org/forums/&#34;&gt;French&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;SFML is an open-source project, and it needs your help to go on growing and improving. If you want to get involved and suggest some additional features, file a bug report or submit a patch, please have a look at the &lt;a href=&#34;https://www.sfml-dev.org/contribute.php&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Laurent Gomila (&lt;a href=&#34;mailto:laurent@sfml-dev.org&#34;&gt;laurent@sfml-dev.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Marco Antognini (&lt;a href=&#34;mailto:hiura@sfml-dev.org&#34;&gt;hiura@sfml-dev.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;binary1248 (&lt;a href=&#34;mailto:binary1248@hotmail.com&#34;&gt;binary1248@hotmail.com&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Lukas Dürrenberger (&lt;a href=&#34;mailto:eXpl0it3r@sfml-dev.org&#34;&gt;eXpl0it3r@sfml-dev.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Jonathan De Wachter (&lt;a href=&#34;mailto:dewachter.jonathan@gmail.com&#34;&gt;dewachter.jonathan@gmail.com&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Jan Haller (&lt;a href=&#34;mailto:bromeon@sfml-dev.org&#34;&gt;bromeon@sfml-dev.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Mario Liebisch (&lt;a href=&#34;mailto:mario@sfml-dev.org&#34;&gt;mario@sfml-dev.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Stefan Schindler (&lt;a href=&#34;mailto:tank@sfml-dev.org&#34;&gt;tank@sfml-dev.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Artur Moreira (&lt;a href=&#34;mailto:artturmoreira@gmail.com&#34;&gt;artturmoreira@gmail.com&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Vittorio Romeo (&lt;a href=&#34;mailto:vittorioromeo@sfml-dev.org&#34;&gt;vittorioromeo@sfml-dev.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;And many other members of the SFML community&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The SFML libraries and source code are distributed under the &lt;a href=&#34;https://opensource.org/licenses/Zlib&#34;&gt;zlib/libpng license&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/SFML/SFML/master/license.md&#34;&gt;license.md&lt;/a&gt;. External libraries used by SFML are distributed under their own licenses.&lt;/p&gt; &#xA;&lt;p&gt;In short, SFML is free for any use (commercial or personal, proprietary or open-source). You can use SFML in your project without any restriction. You can even omit to mention that you use SFML -- although it would be appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;External libraries used by SFML&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kcat/openal-soft&#34;&gt;&lt;em&gt;OpenAL-Soft&lt;/em&gt;&lt;/a&gt; is under the &lt;a href=&#34;https://github.com/kcat/openal-soft/raw/master/COPYING&#34;&gt;LGPL license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;&lt;em&gt;stb_image&lt;/em&gt; and &lt;em&gt;stb_image_write&lt;/em&gt;&lt;/a&gt; are &lt;a href=&#34;https://github.com/nothings/stb/raw/master/LICENSE&#34;&gt;public domain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.freedesktop.org/freetype/freetype&#34;&gt;&lt;em&gt;freetype&lt;/em&gt;&lt;/a&gt; is under the &lt;a href=&#34;https://gitlab.freedesktop.org/freetype/freetype/-/blob/master/LICENSE.TXT&#34;&gt;FreeType license or the GPL license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.xiph.org/xiph/ogg&#34;&gt;&lt;em&gt;libogg&lt;/em&gt;&lt;/a&gt; is under the &lt;a href=&#34;https://gitlab.xiph.org/xiph/ogg/-/blob/master/COPYING&#34;&gt;BSD license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.xiph.org/xiph/vorbis&#34;&gt;&lt;em&gt;libvorbis&lt;/em&gt;&lt;/a&gt; is under the &lt;a href=&#34;https://gitlab.xiph.org/xiph/vorbis/-/blob/master/COPYING&#34;&gt;BSD license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.xiph.org/xiph/flac&#34;&gt;&lt;em&gt;libflac&lt;/em&gt;&lt;/a&gt; is under the &lt;a href=&#34;https://gitlab.xiph.org/xiph/flac/-/blob/master/COPYING.Xiph&#34;&gt;BSD license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lieff/minimp3&#34;&gt;&lt;em&gt;minimp3&lt;/em&gt;&lt;/a&gt; is under the &lt;a href=&#34;https://github.com/lieff/minimp3/raw/master/LICENSE&#34;&gt;CC0 license&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Dion-Systems/4coder</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/Dion-Systems/4coder</id>
    <link href="https://github.com/Dion-Systems/4coder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The final version of the official 4coder codebase. (See Also: https://github.com/Dion-Systems/4coder-non-source)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Welcome to the 4coder code base.&lt;/p&gt; &#xA;&lt;p&gt;This codebase was authored by Allen Webster from 2014-2022, with help from a number of contributors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Casey Muratori&lt;/li&gt; &#xA; &lt;li&gt;&#34;insofaras&#34; Alex Baines&lt;/li&gt; &#xA; &lt;li&gt;Yuval Dolev&lt;/li&gt; &#xA; &lt;li&gt;Ryan Fleury&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also thanks to all those who supported the project, financially and/or through all your detailed feedback.&lt;/p&gt; &#xA;&lt;p&gt;As of May 31st 2022, I am freezing this codebase and open sourcing it.&lt;/p&gt; &#xA;&lt;p&gt;I &lt;em&gt;DO NOT&lt;/em&gt; recommend learning from this codebase, especially not with an uncritical eye. It may be a useful reference for certain algorithms and architectural ideas, and it certainly contains some cautionary tales. But if you are a beginner, I encourage you to aim for more than emulating the style and structure of this codebase.&lt;/p&gt; &#xA;&lt;p&gt;I will not be taking pull requests, or any other form of contribution in this repository. Since I am no longer maintaining this codebase, it is my intention that users who rely on 4coder will have the option to fork the codebase, fix their issues, or carry what I started in new directions according to their own vision if they would like.&lt;/p&gt; &#xA;&lt;p&gt;The license I chose for this codebase is the very permissive MIT license. For the sake of clarity in the community of 4coder users, I ask that new forks of this codebase be given unique names.&lt;/p&gt; &#xA;&lt;p&gt;In this readme you will find:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;License (MIT)&lt;/li&gt; &#xA; &lt;li&gt;Build Instructions&lt;/li&gt; &#xA; &lt;li&gt;Notes on Major Issues&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2022 Allen Webster&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; &#xA;&lt;h1&gt;Build Instructions&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create an empty folder named &#34;4ed&#34; to contain the codebase.&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Rename the folder containing the repository to &#34;code&#34;&lt;/li&gt; &#xA; &lt;li&gt;At the same level as the &#34;4ed&#34; folder, clone the &#34;4coder-non-source&#34; repository&lt;/li&gt; &#xA; &lt;li&gt;A. On windows setup the visual studio command line magic sauce so that &#34;cl&#34; works B. On linux setup g++ C. On mac setup clang&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the &#34;4ed/code&#34; folder.&lt;/li&gt; &#xA; &lt;li&gt;A. On windows run &#34;bin\build.bat&#34; B. On linux run &#34;bin\build-linux.sh&#34; C. On linux run &#34;bin\build-mac.sh&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Notes on Major Issues&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The build system and organization of files is extremely complicated. There is a 4ed_build.cpp that defines how builds run, and the build scripts have to build and run this C++ file. The file is pretty chaotic since it cannot rely on the codebase&#39;s usual helpers. On top of that there is a totally separate build system for the custom layer which is also a big gigantic mess of its own. It involves several stages of compilation, and a number of metaprograms.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The documentation system is over complicated &amp;amp; the documentation is incomplete. There is very little documentation for the internals or the complicated layers of helpers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The lexer generator is way too complicated, and the built-in support for language features is not fully developed. The background threaded parsing is not very carefully organized and is not very flexible, so it&#39;s hard to add new languages at any level of the system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are a few layers of overcomplicated configuration parsers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mac support has not been maintained for several versions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The codebase has a very weak base layer with key features that were added very late, so lots of code was written in the absence of useful features to bind things together. To make matters worse the base layer is split by the distinction of custom layer &amp;amp; core layer, leading to some double definitions and some incosistencies.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>pybind/pybind11</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/pybind/pybind11</id>
    <link href="https://github.com/pybind/pybind11" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Seamless operability between C++11 and Python&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. figure:: &lt;a href=&#34;https://github.com/pybind/pybind11/raw/master/docs/pybind11-logo.png&#34;&gt;https://github.com/pybind/pybind11/raw/master/docs/pybind11-logo.png&lt;/a&gt; :alt: pybind11 logo&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;pybind11 — Seamless operability between C++11 and Python&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;|Latest Documentation Status| |Stable Documentation Status| |Gitter chat| |GitHub Discussions| |CI| |Build status|&lt;/p&gt; &#xA;&lt;p&gt;|Repology| |PyPI package| |Conda-forge| |Python Versions|&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Setuptools example &amp;lt;https://github.com/pybind/python_example&amp;gt;&lt;/code&gt;_ • &lt;code&gt;Scikit-build example &amp;lt;https://github.com/pybind/scikit_build_example&amp;gt;&lt;/code&gt;_ • &lt;code&gt;CMake example &amp;lt;https://github.com/pybind/cmake_example&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;.. start&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;pybind11&lt;/strong&gt; is a lightweight header-only library that exposes C++ types in Python and vice versa, mainly to create Python bindings of existing C++ code. Its goals and syntax are similar to the excellent &lt;code&gt;Boost.Python &amp;lt;http://www.boost.org/doc/libs/1_58_0/libs/python/doc/&amp;gt;&lt;/code&gt;_ library by David Abrahams: to minimize boilerplate code in traditional extension modules by inferring type information using compile-time introspection.&lt;/p&gt; &#xA;&lt;p&gt;The main issue with Boost.Python—and the reason for creating such a similar project—is Boost. Boost is an enormously large and complex suite of utility libraries that works with almost every C++ compiler in existence. This compatibility has its cost: arcane template tricks and workarounds are necessary to support the oldest and buggiest of compiler specimens. Now that C++11-compatible compilers are widely available, this heavy machinery has become an excessively large and unnecessary dependency.&lt;/p&gt; &#xA;&lt;p&gt;Think of this library as a tiny self-contained version of Boost.Python with everything stripped away that isn&#39;t relevant for binding generation. Without comments, the core header files only require ~4K lines of code and depend on Python (3.6+, or PyPy) and the C++ standard library. This compact implementation was possible thanks to some of the new C++11 language features (specifically: tuples, lambda functions and variadic templates). Since its creation, this library has grown beyond Boost.Python in many ways, leading to dramatically simpler binding code in many common situations.&lt;/p&gt; &#xA;&lt;p&gt;Tutorial and reference documentation is provided at &lt;code&gt;pybind11.readthedocs.io &amp;lt;https://pybind11.readthedocs.io/en/latest&amp;gt;&lt;/code&gt;&lt;em&gt;. A PDF version of the manual is available &lt;code&gt;here &amp;lt;https://pybind11.readthedocs.io/_/downloads/en/latest/pdf/&amp;gt;&lt;/code&gt;&lt;/em&gt;. And the source code is always available at &lt;code&gt;github.com/pybind/pybind11 &amp;lt;https://github.com/pybind/pybind11&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Core features&lt;/h2&gt; &#xA;&lt;p&gt;pybind11 can map the following core C++ features to Python:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functions accepting and returning custom data structures per value, reference, or pointer&lt;/li&gt; &#xA; &lt;li&gt;Instance methods and static methods&lt;/li&gt; &#xA; &lt;li&gt;Overloaded functions&lt;/li&gt; &#xA; &lt;li&gt;Instance attributes and static attributes&lt;/li&gt; &#xA; &lt;li&gt;Arbitrary exception types&lt;/li&gt; &#xA; &lt;li&gt;Enumerations&lt;/li&gt; &#xA; &lt;li&gt;Callbacks&lt;/li&gt; &#xA; &lt;li&gt;Iterators and ranges&lt;/li&gt; &#xA; &lt;li&gt;Custom operators&lt;/li&gt; &#xA; &lt;li&gt;Single and multiple inheritance&lt;/li&gt; &#xA; &lt;li&gt;STL data structures&lt;/li&gt; &#xA; &lt;li&gt;Smart pointers with reference counting like &lt;code&gt;std::shared_ptr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Internal references with correct reference counting&lt;/li&gt; &#xA; &lt;li&gt;C++ classes with virtual (and pure virtual) methods can be extended in Python&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goodies&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the core functionality, pybind11 provides some extra goodies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Python 3.6+, and PyPy3 7.3 are supported with an implementation-agnostic interface (pybind11 2.9 was the last version to support Python 2 and 3.5).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It is possible to bind C++11 lambda functions with captured variables. The lambda capture data is stored inside the resulting Python function object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;pybind11 uses C++11 move constructors and move assignment operators whenever possible to efficiently transfer custom data types.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s easy to expose the internal storage of custom data types through Pythons&#39; buffer protocols. This is handy e.g.&amp;nbsp;for fast conversion between C++ matrix classes like Eigen and NumPy without expensive copy operations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;pybind11 can automatically vectorize functions so that they are transparently applied to all entries of one or more NumPy array arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python&#39;s slice-based access and assignment operations can be supported with just a few lines of code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Everything is contained in just a few header files; there is no need to link against any additional libraries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Binaries are generally smaller by a factor of at least 2 compared to equivalent bindings generated by Boost.Python. A recent pybind11 conversion of PyRosetta, an enormous Boost.Python binding project, &lt;code&gt;reported &amp;lt;https://graylab.jhu.edu/Sergey/2016.RosettaCon/PyRosetta-4.pdf&amp;gt;&lt;/code&gt;_ a binary size reduction of &lt;strong&gt;5.4x&lt;/strong&gt; and compile time reduction by &lt;strong&gt;5.8x&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Function signatures are precomputed at compile time (using &lt;code&gt;constexpr&lt;/code&gt;), leading to smaller binaries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With little extra effort, C++ types can be pickled and unpickled similar to regular Python objects.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported compilers&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clang/LLVM 3.3 or newer (for Apple Xcode&#39;s clang, this is 5.0.0 or newer)&lt;/li&gt; &#xA; &lt;li&gt;GCC 4.8 or newer&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Visual Studio 2017 or newer&lt;/li&gt; &#xA; &lt;li&gt;Intel classic C++ compiler 18 or newer (ICC 20.2 tested in CI)&lt;/li&gt; &#xA; &lt;li&gt;Cygwin/GCC (previously tested on 2.5.1)&lt;/li&gt; &#xA; &lt;li&gt;NVCC (CUDA 11.0 tested in CI)&lt;/li&gt; &#xA; &lt;li&gt;NVIDIA PGI (20.9 tested in CI)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This project was created by &lt;code&gt;Wenzel Jakob &amp;lt;http://rgl.epfl.ch/people/wjakob&amp;gt;&lt;/code&gt;_. Significant features and/or improvements to the code were contributed by Jonas Adler, Lori A. Burns, Sylvain Corlay, Eric Cousineau, Aaron Gokaslan, Ralf Grosse-Kunstleve, Trent Houliston, Axel Huebl, @hulucc, Yannick Jadoul, Sergey Lyskov Johan Mabille, Tomasz Miąsko, Dean Moldovan, Ben Pritchard, Jason Rhinelander, Boris Schäling, Pim Schellart, Henry Schreiner, Ivan Smirnov, Boris Staletic, and Patrick Stewart.&lt;/p&gt; &#xA;&lt;p&gt;We thank Google for a generous financial contribution to the continuous integration infrastructure used by this project.&lt;/p&gt; &#xA;&lt;p&gt;Contributing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;See the `contributing&#xA;guide &amp;lt;https://github.com/pybind/pybind11/blob/master/.github/CONTRIBUTING.md&amp;gt;`_&#xA;for information on building and contributing to pybind11.&#xA;&#xA;License&#xA;~~~~~~~&#xA;&#xA;pybind11 is provided under a BSD-style license that can be found in the&#xA;`LICENSE &amp;lt;https://github.com/pybind/pybind11/blob/master/LICENSE&amp;gt;`_&#xA;file. By using, distributing, or contributing to this project, you agree&#xA;to the terms and conditions of this license.&#xA;&#xA;.. |Latest Documentation Status| image:: https://readthedocs.org/projects/pybind11/badge?version=latest&#xA;   :target: http://pybind11.readthedocs.org/en/latest&#xA;.. |Stable Documentation Status| image:: https://img.shields.io/badge/docs-stable-blue.svg&#xA;   :target: http://pybind11.readthedocs.org/en/stable&#xA;.. |Gitter chat| image:: https://img.shields.io/gitter/room/gitterHQ/gitter.svg&#xA;   :target: https://gitter.im/pybind/Lobby&#xA;.. |CI| image:: https://github.com/pybind/pybind11/workflows/CI/badge.svg&#xA;   :target: https://github.com/pybind/pybind11/actions&#xA;.. |Build status| image:: https://ci.appveyor.com/api/projects/status/riaj54pn4h08xy40?svg=true&#xA;   :target: https://ci.appveyor.com/project/wjakob/pybind11&#xA;.. |PyPI package| image:: https://img.shields.io/pypi/v/pybind11.svg&#xA;   :target: https://pypi.org/project/pybind11/&#xA;.. |Conda-forge| image:: https://img.shields.io/conda/vn/conda-forge/pybind11.svg&#xA;   :target: https://github.com/conda-forge/pybind11-feedstock&#xA;.. |Repology| image:: https://repology.org/badge/latest-versions/python:pybind11.svg&#xA;   :target: https://repology.org/project/python:pybind11/versions&#xA;.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/pybind11.svg&#xA;   :target: https://pypi.org/project/pybind11/&#xA;.. |GitHub Discussions| image:: https://img.shields.io/static/v1?label=Discussions&amp;amp;message=Ask&amp;amp;color=blue&amp;amp;logo=github&#xA;   :target: https://github.com/pybind/pybind11/discussions&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>fmtlib/fmt</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/fmtlib/fmt</id>
    <link href="https://github.com/fmtlib/fmt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern formatting library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/&#34;&gt;https://user-images.githubusercontent.com/&lt;/a&gt; 576385/156254208-f5b743a9-88cf-439d-b0c0-923d53e8d551.png :width: 25% :alt: {fmt}&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/fmtlib/fmt/workflows/linux/badge.svg&#34;&gt;https://github.com/fmtlib/fmt/workflows/linux/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/fmtlib/fmt/actions?query=workflow%3Alinux&#34;&gt;https://github.com/fmtlib/fmt/actions?query=workflow%3Alinux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/fmtlib/fmt/workflows/macos/badge.svg&#34;&gt;https://github.com/fmtlib/fmt/workflows/macos/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/fmtlib/fmt/actions?query=workflow%3Amacos&#34;&gt;https://github.com/fmtlib/fmt/actions?query=workflow%3Amacos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/fmtlib/fmt/workflows/windows/badge.svg&#34;&gt;https://github.com/fmtlib/fmt/workflows/windows/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/fmtlib/fmt/actions?query=workflow%3Awindows&#34;&gt;https://github.com/fmtlib/fmt/actions?query=workflow%3Awindows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://ci.appveyor.com/api/projects/status/ehjkiefde6gucy1v?svg=true&#34;&gt;https://ci.appveyor.com/api/projects/status/ehjkiefde6gucy1v?svg=true&lt;/a&gt; :target: &lt;a href=&#34;https://ci.appveyor.com/project/vitaut/fmt&#34;&gt;https://ci.appveyor.com/project/vitaut/fmt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg&#34;&gt;https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg&lt;/a&gt; :alt: fmt is continuously fuzzed at oss-fuzz :target: &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?%5C&#34;&gt;https://bugs.chromium.org/p/oss-fuzz/issues/list?\&lt;/a&gt; colspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20&lt;br&gt; Summary&amp;amp;q=proj%3Dfmt&amp;amp;can=1&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/badge/stackoverflow-fmt-blue.svg&#34;&gt;https://img.shields.io/badge/stackoverflow-fmt-blue.svg&lt;/a&gt; :alt: Ask questions at StackOverflow with the tag fmt :target: &lt;a href=&#34;https://stackoverflow.com/questions/tagged/fmt&#34;&gt;https://stackoverflow.com/questions/tagged/fmt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;{fmt}&lt;/strong&gt; is an open-source formatting library providing a fast and safe alternative to C stdio and C++ iostreams.&lt;/p&gt; &#xA;&lt;p&gt;If you like this project, please consider donating to one of the funds that help victims of the war in Ukraine: &lt;a href=&#34;https://www.stopputin.net/&#34;&gt;https://www.stopputin.net/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Documentation &amp;lt;https://fmt.dev&amp;gt;&lt;/code&gt;__&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Cheat Sheets &amp;lt;https://hackingcpp.com/cpp/libs/fmt.html&amp;gt;&lt;/code&gt;__&lt;/p&gt; &#xA;&lt;p&gt;Q&amp;amp;A: ask questions on &lt;code&gt;StackOverflow with the tag fmt &amp;lt;https://stackoverflow.com/questions/tagged/fmt&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;Try {fmt} in &lt;code&gt;Compiler Explorer &amp;lt;https://godbolt.org/z/Eq5763&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple &lt;code&gt;format API &amp;lt;https://fmt.dev/latest/api.html&amp;gt;&lt;/code&gt;_ with positional arguments for localization&lt;/li&gt; &#xA; &lt;li&gt;Implementation of &lt;code&gt;C++20 std::format &amp;lt;https://en.cppreference.com/w/cpp/utility/format&amp;gt;&lt;/code&gt;__&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Format string syntax &amp;lt;https://fmt.dev/latest/syntax.html&amp;gt;&lt;/code&gt;_ similar to Python&#39;s &lt;code&gt;format &amp;lt;https://docs.python.org/3/library/stdtypes.html#str.format&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Fast IEEE 754 floating-point formatter with correct rounding, shortness and round-trip guarantees&lt;/li&gt; &#xA; &lt;li&gt;Safe &lt;code&gt;printf implementation &amp;lt;https://fmt.dev/latest/api.html#printf-formatting&amp;gt;&lt;/code&gt;_ including the POSIX extension for positional arguments&lt;/li&gt; &#xA; &lt;li&gt;Extensibility: &lt;code&gt;support for user-defined types &amp;lt;https://fmt.dev/latest/api.html#formatting-user-defined-types&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;High performance: faster than common standard library implementations of &lt;code&gt;(s)printf&lt;/code&gt;, iostreams, &lt;code&gt;to_string&lt;/code&gt; and &lt;code&gt;to_chars&lt;/code&gt;, see &lt;code&gt;Speed tests&lt;/code&gt;_ and &lt;code&gt;Converting a hundred million integers to strings per second &amp;lt;http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Small code size both in terms of source code with the minimum configuration consisting of just three files, &lt;code&gt;core.h&lt;/code&gt;, &lt;code&gt;format.h&lt;/code&gt; and &lt;code&gt;format-inl.h&lt;/code&gt;, and compiled code; see &lt;code&gt;Compile time and code bloat&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Reliability: the library has an extensive set of &lt;code&gt;tests &amp;lt;https://github.com/fmtlib/fmt/tree/master/test&amp;gt;&lt;/code&gt;_ and is &lt;code&gt;continuously fuzzed &amp;lt;https://bugs.chromium.org/p/oss-fuzz/issues/list?colspec=ID%20Type%20 Component%20Status%20Proj%20Reported%20Owner%20Summary&amp;amp;q=proj%3Dfmt&amp;amp;can=1&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Safety: the library is fully type safe, errors in format strings can be reported at compile time, automatic memory management prevents buffer overflow errors&lt;/li&gt; &#xA; &lt;li&gt;Ease of use: small self-contained code base, no external dependencies, permissive MIT &lt;code&gt;license &amp;lt;https://github.com/fmtlib/fmt/blob/master/LICENSE.rst&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Portability &amp;lt;https://fmt.dev/latest/index.html#portability&amp;gt;&lt;/code&gt;_ with consistent output across platforms and support for older compilers&lt;/li&gt; &#xA; &lt;li&gt;Clean warning-free codebase even on high warning levels such as &lt;code&gt;-Wall -Wextra -pedantic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Locale-independence by default&lt;/li&gt; &#xA; &lt;li&gt;Optional header-only configuration enabled with the &lt;code&gt;FMT_HEADER_ONLY&lt;/code&gt; macro&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;code&gt;documentation &amp;lt;https://fmt.dev&amp;gt;&lt;/code&gt;_ for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print to stdout&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/Tevcjh&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;fmt/core.h&amp;gt;&#xA;&#xA;int main() {&#xA;  fmt::print(&#34;Hello, world!\n&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Format a string&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/oK8h33&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;std::string s = fmt::format(&#34;The answer is {}.&#34;, 42);&#xA;// s == &#34;The answer is 42.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Format a string using positional arguments&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/Yn7Txe&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;std::string s = fmt::format(&#34;I&#39;d rather be {1} than {0}.&#34;, &#34;right&#34;, &#34;happy&#34;);&#xA;// s == &#34;I&#39;d rather be happy than right.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print chrono durations&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/K8s4Mc&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;fmt/chrono.h&amp;gt;&#xA;&#xA;int main() {&#xA;  using namespace std::literals::chrono_literals;&#xA;  fmt::print(&#34;Default format: {} {}\n&#34;, 42s, 100ms);&#xA;  fmt::print(&#34;strftime-like format: {:%H:%M:%S}\n&#34;, 3h + 15min + 30s);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Default format: 42s 100ms&#xA;strftime-like format: 03:15:30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print a container&lt;/strong&gt; (&lt;code&gt;run &amp;lt;https://godbolt.org/z/MxM1YqjE7&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;vector&amp;gt;&#xA;#include &amp;lt;fmt/ranges.h&amp;gt;&#xA;&#xA;int main() {&#xA;  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};&#xA;  fmt::print(&#34;{}\n&#34;, v);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[1, 2, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Check a format string at compile time&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;std::string s = fmt::format(&#34;{:d}&#34;, &#34;I am not a number&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gives a compile-time error in C++20 because &lt;code&gt;d&lt;/code&gt; is an invalid format specifier for a string.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Write a file from a single thread&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;fmt/os.h&amp;gt;&#xA;&#xA;int main() {&#xA;  auto out = fmt::output_file(&#34;guide.txt&#34;);&#xA;  out.print(&#34;Don&#39;t {}&#34;, &#34;Panic&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be &lt;code&gt;5 to 9 times faster than fprintf &amp;lt;http://www.zverovich.net/2020/08/04/optimal-file-buffer-size.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print with colors and text styles&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. code:: c++&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;fmt/color.h&amp;gt;&#xA;&#xA;int main() {&#xA;  fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold,&#xA;             &#34;Hello, {}!\n&#34;, &#34;world&#34;);&#xA;  fmt::print(fg(fmt::color::floral_white) | bg(fmt::color::slate_gray) |&#xA;             fmt::emphasis::underline, &#34;Hello, {}!\n&#34;, &#34;мир&#34;);&#xA;  fmt::print(fg(fmt::color::steel_blue) | fmt::emphasis::italic,&#xA;             &#34;Hello, {}!\n&#34;, &#34;世界&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output on a modern terminal:&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/&#34;&gt;https://user-images.githubusercontent.com/&lt;/a&gt; 576385/88485597-d312f600-cf2b-11ea-9cbe-61f535a86e28.png&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Speed tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;================= ============= ===========&#xA;Library           Method        Run Time, s&#xA;================= ============= ===========&#xA;libc              printf          1.04&#xA;libc++            std::ostream    3.05&#xA;{fmt} 6.1.1       fmt::print      0.75&#xA;Boost Format 1.67 boost::format   7.24&#xA;Folly Format      folly::format   2.23&#xA;================= ============= ===========&#xA;&#xA;{fmt} is the fastest of the benchmarked methods, ~35% faster than ``printf``.&#xA;&#xA;The above results were generated by building ``tinyformat_test.cpp`` on macOS&#xA;10.14.6 with ``clang++ -O3 -DNDEBUG -DSPEED_TEST -DHAVE_FORMAT``, and taking the&#xA;best of three runs. In the test, the format string ``&#34;%0.10f:%04d:%+g:%s:%p:%c:%%\n&#34;``&#xA;or equivalent is filled 2,000,000 times with output sent to ``/dev/null``; for&#xA;further details refer to the `source&#xA;&amp;lt;https://github.com/fmtlib/format-benchmark/blob/master/src/tinyformat-test.cc&amp;gt;`_.&#xA;&#xA;{fmt} is up to 20-30x faster than ``std::ostringstream`` and ``sprintf`` on&#xA;floating-point formatting (`dtoa-benchmark &amp;lt;https://github.com/fmtlib/dtoa-benchmark&amp;gt;`_)&#xA;and faster than `double-conversion &amp;lt;https://github.com/google/double-conversion&amp;gt;`_ and&#xA;`ryu &amp;lt;https://github.com/ulfjack/ryu&amp;gt;`_:&#xA;&#xA;.. image:: https://user-images.githubusercontent.com/576385/&#xA;           95684665-11719600-0ba8-11eb-8e5b-972ff4e49428.png&#xA;   :target: https://fmt.dev/unknown_mac64_clang12.0.html&#xA;&#xA;Compile time and code bloat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script &lt;code&gt;bloat-test.py &amp;lt;https://github.com/fmtlib/format-benchmark/blob/master/bloat-test.py&amp;gt;&lt;/code&gt;_ from &lt;code&gt;format-benchmark &amp;lt;https://github.com/fmtlib/format-benchmark&amp;gt;&lt;/code&gt;_ tests compile time and code bloat for nontrivial projects. It generates 100 translation units and uses &lt;code&gt;printf()&lt;/code&gt; or its alternative five times in each to simulate a medium sized project. The resulting executable size and compile time (Apple LLVM version 8.1.0 (clang-802.0.42), macOS Sierra, best of three) is shown in the following tables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optimized build (-O3)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;============= =============== ==================== ================== Method Compile Time, s Executable size, KiB Stripped size, KiB ============= =============== ==================== ================== printf 2.6 29 26 printf+string 16.4 29 26 iostreams 31.1 59 55 {fmt} 19.0 37 34 Boost Format 91.9 226 203 Folly Format 115.7 101 88 ============= =============== ==================== ==================&lt;/p&gt; &#xA;&lt;p&gt;As you can see, {fmt} has 60% less overhead in terms of resulting binary code size compared to iostreams and comes pretty close to &lt;code&gt;printf&lt;/code&gt;. Boost Format and Folly Format have the largest overheads.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;printf+string&lt;/code&gt; is the same as &lt;code&gt;printf&lt;/code&gt; but with extra &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; include to measure the overhead of the latter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Non-optimized build&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;============= =============== ==================== ================== Method Compile Time, s Executable size, KiB Stripped size, KiB ============= =============== ==================== ================== printf 2.2 33 30 printf+string 16.0 33 30 iostreams 28.3 56 52 {fmt} 18.2 59 50 Boost Format 54.1 365 303 Folly Format 79.9 445 430 ============= =============== ==================== ==================&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;libc&lt;/code&gt;, &lt;code&gt;lib(std)c++&lt;/code&gt; and &lt;code&gt;libfmt&lt;/code&gt; are all linked as shared libraries to compare formatting function overhead only. Boost Format is a header-only library so it doesn&#39;t provide any linkage options.&lt;/p&gt; &#xA;&lt;p&gt;Running the tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Please refer to `Building the library`__ for the instructions on how to build&#xA;the library and run the unit tests.&#xA;&#xA;__ https://fmt.dev/latest/usage.html#building-the-library&#xA;&#xA;Benchmarks reside in a separate repository,&#xA;`format-benchmarks &amp;lt;https://github.com/fmtlib/format-benchmark&amp;gt;`_,&#xA;so to run the benchmarks you first need to clone this repository and&#xA;generate Makefiles with CMake::&#xA;&#xA;    $ git clone --recursive https://github.com/fmtlib/format-benchmark.git&#xA;    $ cd format-benchmark&#xA;    $ cmake .&#xA;&#xA;Then you can run the speed test::&#xA;&#xA;    $ make speed-test&#xA;&#xA;or the bloat test::&#xA;&#xA;    $ make bloat-test&#xA;    &#xA;Migrating code&#xA;--------------&#xA;&#xA;`clang-tidy-fmt &amp;lt;https://github.com/mikecrowe/clang-tidy-fmt&amp;gt;`_ provides clang&#xA;tidy checks for converting occurrences of ``printf`` and ``fprintf`` to&#xA;``fmt::print``.&#xA;&#xA;Projects using this library&#xA;---------------------------&#xA;&#xA;* `0 A.D. &amp;lt;https://play0ad.com/&amp;gt;`_: a free, open-source, cross-platform&#xA;  real-time strategy game&#xA;&#xA;* `2GIS &amp;lt;https://2gis.ru/&amp;gt;`_: free business listings with a city map&#xA;&#xA;* `AMPL/MP &amp;lt;https://github.com/ampl/mp&amp;gt;`_:&#xA;  an open-source library for mathematical programming&#xA;&#xA;* `Aseprite &amp;lt;https://github.com/aseprite/aseprite&amp;gt;`_:&#xA;  animated sprite editor &amp;amp; pixel art tool &#xA;&#xA;* `AvioBook &amp;lt;https://www.aviobook.aero/en&amp;gt;`_: a comprehensive aircraft&#xA;  operations suite&#xA;  &#xA;* `Blizzard Battle.net &amp;lt;https://battle.net/&amp;gt;`_: an online gaming platform&#xA;  &#xA;* `Celestia &amp;lt;https://celestia.space/&amp;gt;`_: real-time 3D visualization of space&#xA;&#xA;* `Ceph &amp;lt;https://ceph.com/&amp;gt;`_: a scalable distributed storage system&#xA;&#xA;* `ccache &amp;lt;https://ccache.dev/&amp;gt;`_: a compiler cache&#xA;&#xA;* `ClickHouse &amp;lt;https://github.com/ClickHouse/ClickHouse&amp;gt;`_: analytical database&#xA;  management system&#xA;&#xA;* `CUAUV &amp;lt;https://cuauv.org/&amp;gt;`_: Cornell University&#39;s autonomous underwater&#xA;  vehicle&#xA;&#xA;* `Drake &amp;lt;https://drake.mit.edu/&amp;gt;`_: a planning, control, and analysis toolbox&#xA;  for nonlinear dynamical systems (MIT)&#xA;&#xA;* `Envoy &amp;lt;https://lyft.github.io/envoy/&amp;gt;`_: C++ L7 proxy and communication bus&#xA;  (Lyft)&#xA;&#xA;* `FiveM &amp;lt;https://fivem.net/&amp;gt;`_: a modification framework for GTA V&#xA;&#xA;* `fmtlog &amp;lt;https://github.com/MengRao/fmtlog&amp;gt;`_: a performant fmtlib-style&#xA;  logging library with latency in nanoseconds&#xA;&#xA;* `Folly &amp;lt;https://github.com/facebook/folly&amp;gt;`_: Facebook open-source library&#xA;&#xA;* `GemRB &amp;lt;https://gemrb.org/&amp;gt;`_: a portable open-source implementation of&#xA;  Bioware’s Infinity Engine&#xA;&#xA;* `Grand Mountain Adventure&#xA;  &amp;lt;https://store.steampowered.com/app/1247360/Grand_Mountain_Adventure/&amp;gt;`_:&#xA;  a beautiful open-world ski &amp;amp; snowboarding game&#xA;&#xA;* `HarpyWar/pvpgn &amp;lt;https://github.com/pvpgn/pvpgn-server&amp;gt;`_:&#xA;  Player vs Player Gaming Network with tweaks&#xA;&#xA;* `KBEngine &amp;lt;https://github.com/kbengine/kbengine&amp;gt;`_: an open-source MMOG server&#xA;  engine&#xA;&#xA;* `Keypirinha &amp;lt;https://keypirinha.com/&amp;gt;`_: a semantic launcher for Windows&#xA;&#xA;* `Kodi &amp;lt;https://kodi.tv/&amp;gt;`_ (formerly xbmc): home theater software&#xA;&#xA;* `Knuth &amp;lt;https://kth.cash/&amp;gt;`_: high-performance Bitcoin full-node&#xA;&#xA;* `Microsoft Verona &amp;lt;https://github.com/microsoft/verona&amp;gt;`_:&#xA;  research programming language for concurrent ownership&#xA;&#xA;* `MongoDB &amp;lt;https://mongodb.com/&amp;gt;`_: distributed document database&#xA;&#xA;* `MongoDB Smasher &amp;lt;https://github.com/duckie/mongo_smasher&amp;gt;`_: a small tool to&#xA;  generate randomized datasets&#xA;&#xA;* `OpenSpace &amp;lt;https://openspaceproject.com/&amp;gt;`_: an open-source&#xA;  astrovisualization framework&#xA;&#xA;* `PenUltima Online (POL) &amp;lt;https://www.polserver.com/&amp;gt;`_:&#xA;  an MMO server, compatible with most Ultima Online clients&#xA;&#xA;* `PyTorch &amp;lt;https://github.com/pytorch/pytorch&amp;gt;`_: an open-source machine&#xA;  learning library&#xA;&#xA;* `quasardb &amp;lt;https://www.quasardb.net/&amp;gt;`_: a distributed, high-performance,&#xA;  associative database&#xA;  &#xA;* `Quill &amp;lt;https://github.com/odygrd/quill&amp;gt;`_: asynchronous low-latency logging library&#xA;&#xA;* `QKW &amp;lt;https://github.com/ravijanjam/qkw&amp;gt;`_: generalizing aliasing to simplify&#xA;  navigation, and executing complex multi-line terminal command sequences&#xA;&#xA;* `redis-cerberus &amp;lt;https://github.com/HunanTV/redis-cerberus&amp;gt;`_: a Redis cluster&#xA;  proxy&#xA;&#xA;* `redpanda &amp;lt;https://vectorized.io/redpanda&amp;gt;`_: a 10x faster Kafka® replacement&#xA;  for mission critical systems written in C++&#xA;&#xA;* `rpclib &amp;lt;http://rpclib.net/&amp;gt;`_: a modern C++ msgpack-RPC server and client&#xA;  library&#xA;&#xA;* `Salesforce Analytics Cloud&#xA;  &amp;lt;https://www.salesforce.com/analytics-cloud/overview/&amp;gt;`_:&#xA;  business intelligence software&#xA;&#xA;* `Scylla &amp;lt;https://www.scylladb.com/&amp;gt;`_: a Cassandra-compatible NoSQL data store&#xA;  that can handle 1 million transactions per second on a single server&#xA;&#xA;* `Seastar &amp;lt;http://www.seastar-project.org/&amp;gt;`_: an advanced, open-source C++&#xA;  framework for high-performance server applications on modern hardware&#xA;&#xA;* `spdlog &amp;lt;https://github.com/gabime/spdlog&amp;gt;`_: super fast C++ logging library&#xA;&#xA;* `Stellar &amp;lt;https://www.stellar.org/&amp;gt;`_: financial platform&#xA;&#xA;* `Touch Surgery &amp;lt;https://www.touchsurgery.com/&amp;gt;`_: surgery simulator&#xA;&#xA;* `TrinityCore &amp;lt;https://github.com/TrinityCore/TrinityCore&amp;gt;`_: open-source&#xA;  MMORPG framework&#xA;&#xA;* `Windows Terminal &amp;lt;https://github.com/microsoft/terminal&amp;gt;`_: the new Windows&#xA;  terminal&#xA;&#xA;`More... &amp;lt;https://github.com/search?q=fmtlib&amp;amp;type=Code&amp;gt;`_&#xA;&#xA;If you are aware of other projects using this library, please let me know&#xA;by `email &amp;lt;mailto:victor.zverovich@gmail.com&amp;gt;`_ or by submitting an&#xA;`issue &amp;lt;https://github.com/fmtlib/fmt/issues&amp;gt;`_.&#xA;&#xA;Motivation&#xA;----------&#xA;&#xA;So why yet another formatting library?&#xA;&#xA;There are plenty of methods for doing this task, from standard ones like&#xA;the printf family of function and iostreams to Boost Format and FastFormat&#xA;libraries. The reason for creating a new library is that every existing&#xA;solution that I found either had serious issues or didn&#39;t provide&#xA;all the features I needed.&#xA;&#xA;printf&#xA;~~~~~~&#xA;&#xA;The good thing about ``printf`` is that it is pretty fast and readily available&#xA;being a part of the C standard library. The main drawback is that it&#xA;doesn&#39;t support user-defined types. ``printf`` also has safety issues although&#xA;they are somewhat mitigated with `__attribute__ ((format (printf, ...))&#xA;&amp;lt;https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html&amp;gt;`_ in GCC.&#xA;There is a POSIX extension that adds positional arguments required for&#xA;`i18n &amp;lt;https://en.wikipedia.org/wiki/Internationalization_and_localization&amp;gt;`_&#xA;to ``printf`` but it is not a part of C99 and may not be available on some&#xA;platforms.&#xA;&#xA;iostreams&#xA;~~~~~~~~~&#xA;&#xA;The main issue with iostreams is best illustrated with an example:&#xA;&#xA;.. code:: c++&#xA;&#xA;    std::cout &amp;lt;&amp;lt; std::setprecision(2) &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; 1.23456 &amp;lt;&amp;lt; &#34;\n&#34;;&#xA;&#xA;which is a lot of typing compared to printf:&#xA;&#xA;.. code:: c++&#xA;&#xA;    printf(&#34;%.2f\n&#34;, 1.23456);&#xA;&#xA;Matthew Wilson, the author of FastFormat, called this &#34;chevron hell&#34;. iostreams&#xA;don&#39;t support positional arguments by design.&#xA;&#xA;The good part is that iostreams support user-defined types and are safe although&#xA;error handling is awkward.&#xA;&#xA;Boost Format&#xA;~~~~~~~~~~~~&#xA;&#xA;This is a very powerful library which supports both ``printf``-like format&#xA;strings and positional arguments. Its main drawback is performance. According to&#xA;various benchmarks, it is much slower than other methods considered here. Boost&#xA;Format also has excessive build times and severe code bloat issues (see&#xA;`Benchmarks`_).&#xA;&#xA;FastFormat&#xA;~~~~~~~~~~&#xA;&#xA;This is an interesting library which is fast, safe and has positional arguments.&#xA;However, it has significant limitations, citing its author:&#xA;&#xA;    Three features that have no hope of being accommodated within the&#xA;    current design are:&#xA;&#xA;    * Leading zeros (or any other non-space padding)&#xA;    * Octal/hexadecimal encoding&#xA;    * Runtime width/alignment specification&#xA;&#xA;It is also quite big and has a heavy dependency, STLSoft, which might be too&#xA;restrictive for using it in some projects.&#xA;&#xA;Boost Spirit.Karma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is not really a formatting library but I decided to include it here for completeness. As iostreams, it suffers from the problem of mixing verbatim text with arguments. The library is pretty fast, but slower on integer formatting than &lt;code&gt;fmt::format_to&lt;/code&gt; with format string compilation on Karma&#39;s own benchmark, see &lt;code&gt;Converting a hundred million integers to strings per second &amp;lt;http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;{fmt} is distributed under the MIT &lt;code&gt;license &amp;lt;https://github.com/fmtlib/fmt/blob/master/LICENSE.rst&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation License&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Format String Syntax &amp;lt;https://fmt.dev/latest/syntax.html&amp;gt;&lt;/code&gt;_ section in the documentation is based on the one from Python &lt;code&gt;string module documentation &amp;lt;https://docs.python.org/3/library/string.html#module-string&amp;gt;&lt;/code&gt;&lt;em&gt;. For this reason the documentation is distributed under the Python Software Foundation license available in &lt;code&gt;doc/python-license.txt &amp;lt;https://raw.github.com/fmtlib/fmt/master/doc/python-license.txt&amp;gt;&lt;/code&gt;&lt;/em&gt;. It only applies if you distribute the documentation of {fmt}.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;The {fmt} library is maintained by Victor Zverovich (&lt;code&gt;vitaut &amp;lt;https://github.com/vitaut&amp;gt;&lt;/code&gt;&lt;em&gt;) and Jonathan Müller (&lt;code&gt;foonathan &amp;lt;https://github.com/foonathan&amp;gt;&lt;/code&gt;&lt;/em&gt;) with contributions from many other people. See &lt;code&gt;Contributors &amp;lt;https://github.com/fmtlib/fmt/graphs/contributors&amp;gt;&lt;/code&gt;_ and &lt;code&gt;Releases &amp;lt;https://github.com/fmtlib/fmt/releases&amp;gt;&lt;/code&gt;_ for some of the names. Let us know if your contribution is not listed or mentioned incorrectly and we&#39;ll make it right.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Tencent/MMKV</title>
    <updated>2022-06-03T01:30:06Z</updated>
    <id>tag:github.com,2022-06-03:/Tencent/MMKV</id>
    <link href="https://github.com/Tencent/MMKV" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An efficient, small mobile key-value storage framework developed by WeChat. Works on Android, iOS, macOS, Windows, and POSIX.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Tencent/MMKV/raw/master/LICENSE.TXT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD_3-brightgreen.svg?style=flat&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/MMKV/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/MMKV/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-1.2.13-brightgreen.svg?sanitize=true&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/home&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform-%20Android%20%7C%20iOS%2FmacOS%20%7C%20Win32%20%7C%20POSIX-brightgreen.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;中文版本请参看&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/MMKV/master/README_CN.md&#34;&gt;这里&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MMKV is an &lt;strong&gt;efficient&lt;/strong&gt;, &lt;strong&gt;small&lt;/strong&gt;, &lt;strong&gt;easy-to-use&lt;/strong&gt; mobile key-value storage framework used in the WeChat application. It&#39;s currently available on &lt;strong&gt;Android&lt;/strong&gt;, &lt;strong&gt;iOS/macOS&lt;/strong&gt;, &lt;strong&gt;Win32&lt;/strong&gt; and &lt;strong&gt;POSIX&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;MMKV for Android&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient&lt;/strong&gt;. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of Android to achieve the best performance.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Multi-Process concurrency&lt;/strong&gt;: MMKV supports concurrent read-read and read-write access between processes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy-to-use&lt;/strong&gt;. You can use MMKV as you go. All changes are saved immediately, no &lt;code&gt;sync&lt;/code&gt;, no &lt;code&gt;apply&lt;/code&gt; calls needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Small&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A handful of files&lt;/strong&gt;: MMKV contains process locks, encode/decode helpers and mmap logics, and nothing more. It&#39;s really tidy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;About 50K in binary size&lt;/strong&gt;: MMKV adds about 50K per architecture on App size, and much less when zipped (APK).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation Via Maven&lt;/h3&gt; &#xA;&lt;p&gt;Add the following lines to &lt;code&gt;build.gradle&lt;/code&gt; on your app module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;    implementation &#39;com.tencent:mmkv:1.2.13&#39;&#xA;    // replace &#34;1.2.13&#34; with any available version&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting from v1.2.8, MMKV has been &lt;strong&gt;migrated to Maven Central&lt;/strong&gt;.&lt;br&gt; For other installation options, see &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/android_setup&#34;&gt;Android Setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;You can use MMKV as you go. All changes are saved immediately, no &lt;code&gt;sync&lt;/code&gt;, no &lt;code&gt;apply&lt;/code&gt; calls needed.&lt;br&gt; Setup MMKV on App startup, say your &lt;code&gt;Application&lt;/code&gt; class, add these lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;public void onCreate() {&#xA;    super.onCreate();&#xA;&#xA;    String rootDir = MMKV.initialize(this);&#xA;    System.out.println(&#34;mmkv root: &#34; + rootDir);&#xA;    //……&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV has a global instance, that can be used directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;import com.tencent.mmkv.MMKV;&#xA;    &#xA;MMKV kv = MMKV.defaultMMKV();&#xA;&#xA;kv.encode(&#34;bool&#34;, true);&#xA;boolean bValue = kv.decodeBool(&#34;bool&#34;);&#xA;&#xA;kv.encode(&#34;int&#34;, Integer.MIN_VALUE);&#xA;int iValue = kv.decodeInt(&#34;int&#34;);&#xA;&#xA;kv.encode(&#34;string&#34;, &#34;Hello from mmkv&#34;);&#xA;String str = kv.decodeString(&#34;string&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV also supports &lt;strong&gt;Multi-Process Access&lt;/strong&gt;. Full tutorials can be found here &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/android_tutorial&#34;&gt;Android Tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Writing random &lt;code&gt;int&lt;/code&gt; for 1000 times, we get this chart:&lt;br&gt; &lt;img src=&#34;https://github.com/Tencent/MMKV/wiki/assets/profile_android_mini.png&#34; alt=&#34;&#34;&gt;&lt;br&gt; For more benchmark data, please refer to &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/android_benchmark&#34;&gt;our benchmark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;MMKV for iOS/macOS&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient&lt;/strong&gt;. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of iOS/macOS to achieve the best performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy-to-use&lt;/strong&gt;. You can use MMKV as you go, no configurations are needed. All changes are saved immediately, no &lt;code&gt;synchronize&lt;/code&gt; calls are needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Small&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A handful of files&lt;/strong&gt;: MMKV contains encode/decode helpers and mmap logics and nothing more. It&#39;s really tidy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Less than 30K in binary size&lt;/strong&gt;: MMKV adds less than 30K per architecture on App size, and much less when zipped (IPA).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation Via CocoaPods:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://guides.CocoaPods.org/using/getting-started.html&#34;&gt;CocoaPods&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Open the terminal, &lt;code&gt;cd&lt;/code&gt; to your project directory, run &lt;code&gt;pod repo update&lt;/code&gt; to make CocoaPods aware of the latest available MMKV versions;&lt;/li&gt; &#xA; &lt;li&gt;Edit your Podfile, add &lt;code&gt;pod &#39;MMKV&#39;&lt;/code&gt; to your app target;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;.xcworkspace&lt;/code&gt; file generated by CocoaPods;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;#import &amp;lt;MMKV/MMKV.h&amp;gt;&lt;/code&gt; to your source file and we are done.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For other installation options, see &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/iOS_setup&#34;&gt;iOS/macOS Setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;You can use MMKV as you go, no configurations are needed. All changes are saved immediately, no &lt;code&gt;synchronize&lt;/code&gt; calls are needed. Setup MMKV on App startup, in your &lt;code&gt;-[MyApp application: didFinishLaunchingWithOptions:]&lt;/code&gt;, add these lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {&#xA;    // init MMKV in the main thread&#xA;    [MMKV initializeMMKV:nil];&#xA;&#xA;    //...&#xA;    return YES;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV has a global instance, that can be used directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MMKV *mmkv = [MMKV defaultMMKV];&#xA;    &#xA;[mmkv setBool:YES forKey:@&#34;bool&#34;];&#xA;BOOL bValue = [mmkv getBoolForKey:@&#34;bool&#34;];&#xA;    &#xA;[mmkv setInt32:-1024 forKey:@&#34;int32&#34;];&#xA;int32_t iValue = [mmkv getInt32ForKey:@&#34;int32&#34;];&#xA;    &#xA;[mmkv setString:@&#34;hello, mmkv&#34; forKey:@&#34;string&#34;];&#xA;NSString *str = [mmkv getStringForKey:@&#34;string&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV also supports &lt;strong&gt;Multi-Process Access&lt;/strong&gt;. Full tutorials can be found &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/iOS_tutorial&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Writing random &lt;code&gt;int&lt;/code&gt; for 10000 times, we get this chart:&lt;br&gt; &lt;img src=&#34;https://github.com/Tencent/MMKV/wiki/assets/profile_mini.png&#34; alt=&#34;&#34;&gt;&lt;br&gt; For more benchmark data, please refer to &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/iOS_benchmark&#34;&gt;our benchmark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;MMKV for Win32&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient&lt;/strong&gt;. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of Windows to achieve the best performance.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Multi-Process concurrency&lt;/strong&gt;: MMKV supports concurrent read-read and read-write access between processes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy-to-use&lt;/strong&gt;. You can use MMKV as you go. All changes are saved immediately, no &lt;code&gt;save&lt;/code&gt;, no &lt;code&gt;sync&lt;/code&gt; calls are needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Small&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A handful of files&lt;/strong&gt;: MMKV contains process locks, encode/decode helpers and mmap logics, and nothing more. It&#39;s really tidy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;About 10K in binary size&lt;/strong&gt;: MMKV adds about 10K on application size, and much less when zipped.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation Via Source&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Getting source code from git repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/Tencent/MMKV.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;Win32/MMKV/MMKV.vcxproj&lt;/code&gt; to your solution;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;MMKV&lt;/code&gt; project to your project&#39;s dependencies;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;$(OutDir)include&lt;/code&gt; to your project&#39;s &lt;code&gt;C/C++&lt;/code&gt; -&amp;gt; &lt;code&gt;General&lt;/code&gt; -&amp;gt; &lt;code&gt;Additional Include Directories&lt;/code&gt;;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;$(OutDir)&lt;/code&gt; to your project&#39;s &lt;code&gt;Linker&lt;/code&gt; -&amp;gt; &lt;code&gt;General&lt;/code&gt; -&amp;gt; &lt;code&gt;Additional Library Directories&lt;/code&gt;;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;MMKV.lib&lt;/code&gt; to your project&#39;s &lt;code&gt;Linker&lt;/code&gt; -&amp;gt; &lt;code&gt;Input&lt;/code&gt; -&amp;gt; &lt;code&gt;Additional Dependencies&lt;/code&gt;;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;#include &amp;lt;MMKV/MMKV.h&amp;gt;&lt;/code&gt; to your source file and we are done.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;note:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;MMKV is compiled with &lt;code&gt;MT/MTd&lt;/code&gt; runtime by default. If your project uses &lt;code&gt;MD/MDd&lt;/code&gt;, you should change MMKV&#39;s setting to match your project&#39;s (&lt;code&gt;C/C++&lt;/code&gt; -&amp;gt; &lt;code&gt;Code Generation&lt;/code&gt; -&amp;gt; &lt;code&gt;Runtime Library&lt;/code&gt;), or vice versa.&lt;/li&gt; &#xA; &lt;li&gt;MMKV is developed with Visual Studio 2017, change the &lt;code&gt;Platform Toolset&lt;/code&gt; if you use a different version of Visual Studio.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For other installation options, see &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/windows_setup&#34;&gt;Win32 Setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;You can use MMKV as you go. All changes are saved immediately, no &lt;code&gt;sync&lt;/code&gt;, no &lt;code&gt;save&lt;/code&gt; calls needed.&lt;br&gt; Setup MMKV on App startup, say in your &lt;code&gt;main()&lt;/code&gt;, add these lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;MMKV/MMKV.h&amp;gt;&#xA;&#xA;int main() {&#xA;    std::wstring rootDir = getYourAppDocumentDir();&#xA;    MMKV::initializeMMKV(rootDir);&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV has a global instance, that can be used directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;auto mmkv = MMKV::defaultMMKV();&#xA;&#xA;mmkv-&amp;gt;set(true, &#34;bool&#34;);&#xA;std::cout &amp;lt;&amp;lt; &#34;bool = &#34; &amp;lt;&amp;lt; mmkv-&amp;gt;getBool(&#34;bool&#34;) &amp;lt;&amp;lt; std::endl;&#xA;&#xA;mmkv-&amp;gt;set(1024, &#34;int32&#34;);&#xA;std::cout &amp;lt;&amp;lt; &#34;int32 = &#34; &amp;lt;&amp;lt; mmkv-&amp;gt;getInt32(&#34;int32&#34;) &amp;lt;&amp;lt; std::endl;&#xA;&#xA;mmkv-&amp;gt;set(&#34;Hello, MMKV for Win32&#34;, &#34;string&#34;);&#xA;std::string result;&#xA;mmkv-&amp;gt;getString(&#34;string&#34;, result);&#xA;std::cout &amp;lt;&amp;lt; &#34;string = &#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV also supports &lt;strong&gt;Multi-Process Access&lt;/strong&gt;. Full tutorials can be found here &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/windows_tutorial&#34;&gt;Win32 Tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;MMKV for POSIX&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Efficient&lt;/strong&gt;. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of POSIX to achieve the best performance.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Multi-Process concurrency&lt;/strong&gt;: MMKV supports concurrent read-read and read-write access between processes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Easy-to-use&lt;/strong&gt;. You can use MMKV as you go. All changes are saved immediately, no &lt;code&gt;save&lt;/code&gt;, no &lt;code&gt;sync&lt;/code&gt; calls are needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Small&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A handful of files&lt;/strong&gt;: MMKV contains process locks, encode/decode helpers and mmap logics, and nothing more. It&#39;s really tidy.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;About 7K in binary size&lt;/strong&gt;: MMKV adds about 7K on application size, and much less when zipped.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation Via CMake&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Getting source code from the git repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/Tencent/MMKV.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit your &lt;code&gt;CMakeLists.txt&lt;/code&gt;, add those lines:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;add_subdirectory(mmkv/POSIX/src mmkv)&#xA;target_link_libraries(MyApp&#xA;    mmkv)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;#include &#34;MMKV.h&#34;&lt;/code&gt; to your source file and we are done.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For other installation options, see &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/posix_setup&#34;&gt;POSIX Setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;You can use MMKV as you go. All changes are saved immediately, no &lt;code&gt;sync&lt;/code&gt;, no &lt;code&gt;save&lt;/code&gt; calls needed.&lt;br&gt; Setup MMKV on App startup, say in your &lt;code&gt;main()&lt;/code&gt;, add these lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &#34;MMKV.h&#34;&#xA;&#xA;int main() {&#xA;    std::string rootDir = getYourAppDocumentDir();&#xA;    MMKV::initializeMMKV(rootDir);&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV has a global instance, that can be used directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;auto mmkv = MMKV::defaultMMKV();&#xA;&#xA;mmkv-&amp;gt;set(true, &#34;bool&#34;);&#xA;std::cout &amp;lt;&amp;lt; &#34;bool = &#34; &amp;lt;&amp;lt; mmkv-&amp;gt;getBool(&#34;bool&#34;) &amp;lt;&amp;lt; std::endl;&#xA;&#xA;mmkv-&amp;gt;set(1024, &#34;int32&#34;);&#xA;std::cout &amp;lt;&amp;lt; &#34;int32 = &#34; &amp;lt;&amp;lt; mmkv-&amp;gt;getInt32(&#34;int32&#34;) &amp;lt;&amp;lt; std::endl;&#xA;&#xA;mmkv-&amp;gt;set(&#34;Hello, MMKV for Win32&#34;, &#34;string&#34;);&#xA;std::string result;&#xA;mmkv-&amp;gt;getString(&#34;string&#34;, result);&#xA;std::cout &amp;lt;&amp;lt; &#34;string = &#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MMKV also supports &lt;strong&gt;Multi-Process Access&lt;/strong&gt;. Full tutorials can be found here &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/posix_tutorial&#34;&gt;POSIX Tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MMKV is published under the BSD 3-Clause license. For details check out the &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/MMKV/master/LICENSE.TXT&#34;&gt;LICENSE.TXT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/MMKV/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for details of change history.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in contributing, check out the &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/MMKV/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;, also join our &lt;a href=&#34;https://opensource.tencent.com/contribution&#34;&gt;Tencent OpenSource Plan&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To give clarity of what is expected of our members, MMKV has adopted the code of conduct defined by the Contributor Covenant, which is widely used. And we think it articulates our values well. For more, check out the &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/MMKV/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ &amp;amp; Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/Tencent/MMKV/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt; first. Should there be any questions, don&#39;t hesitate to create &lt;a href=&#34;https://github.com/Tencent/MMKV/issues&#34;&gt;issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Personal Information Protection Rules&lt;/h2&gt; &#xA;&lt;p&gt;User privacy is taken very seriously: MMKV does not obtain, collect or upload any personal information. Please refer to the &lt;a href=&#34;https://support.weixin.qq.com/cgi-bin/mmsupportacctnodeweb-bin/pages/aY5BAtRiO1BpoHxo&#34;&gt;MMKV SDK Personal Information Protection Rules&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>