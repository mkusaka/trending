<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-08T01:29:59Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LeagueToolkit/cslol-manager</title>
    <updated>2025-07-08T01:29:59Z</updated>
    <id>tag:github.com,2025-07-08:/LeagueToolkit/cslol-manager</id>
    <link href="https://github.com/LeagueToolkit/cslol-manager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Download???&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LeagueToolkit/cslol-manager/releases&#34;&gt;https://github.com/LeagueToolkit/cslol-manager/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Windows 10+ only&lt;/h1&gt; &#xA;&lt;p&gt;Please update to windows 10 or 11!&lt;/p&gt; &#xA;&lt;h1&gt;About CustomSkin for LoL manager&lt;/h1&gt; &#xA;&lt;p&gt;Mod manager for League of legends using &lt;a href=&#34;https://github.com/LeagueToolkit/Fantome/wiki/Mod-File-Format&#34;&gt;Fantome mod format&lt;/a&gt;. &lt;img src=&#34;https://raw.githubusercontent.com/LeagueToolkit/cslol-manager/master/docs/manager-0.png&#34; alt=&#34;Main window&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LeagueToolkit/cslol-manager/master/docs/manager-1.png&#34; alt=&#34;Editing info&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LeagueToolkit/cslol-manager/master/docs/manager-2.png&#34; alt=&#34;Editing files&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that this software is &#34;use at your own risk&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Asian servers and garena are not officially supported and may not work.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nomacs/nomacs</title>
    <updated>2025-07-08T01:29:59Z</updated>
    <id>tag:github.com,2025-07-08:/nomacs/nomacs</id>
    <link href="https://github.com/nomacs/nomacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nomacs is a free image viewer for windows, linux, and mac systems.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nomacs - Image Lounge üç∏&lt;/h1&gt; &#xA;&lt;p&gt;nomacs is a free, open source image viewer, which supports multiple platforms. You can use it for viewing all common image formats including RAW and psd images. nomacs is licensed under the GNU General Public License v3 and available for Windows, Linux, FreeBSD, Mac, Haiku, and OS/2.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/novomesk/nomacs&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/ye6wd1hap4cebyo8?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nomacs/nomacs/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/nomacs/nomacs/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://translate.nomacs.org/project/nomacs&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/nomacs/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Get the Source&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;git clone https://github.com/nomacs/nomacs.git&#xA;cd nomacs&#xA;&#xA;# nomacs uses submodules for third party libraries&#xA;git submodule init&#xA;git submodule update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build nomacs (Windows)&lt;/h2&gt; &#xA;&lt;p&gt;We assume you have an IDE (i.e. Visual Studio), python, git, and &lt;a href=&#34;https://www.qt.io/download-open-source&#34;&gt;Qt&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;p&gt;Get all dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule init&#xA;git submodule update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Project folders in &lt;code&gt;3rd-party&lt;/code&gt; will not be empty anymore. Now call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/make.py &#34;qtpath/bin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build nomacs into &lt;code&gt;build/nomacs&lt;/code&gt;. If you are using Visual Studio, you can then double-click &lt;code&gt;build/nomacs/nomacs.sln&lt;/code&gt;. Right-click the nomacs project and choose &lt;code&gt;Set as StartUp Project&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Build individual projects using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/make.py &#34;qt/bin&#34; --project quazip,libraw --force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Developer Build&lt;/h3&gt; &#xA;&lt;p&gt;I like having a separate developer build (without submodules) that uses 3rd party libs already compiled. To do so you need to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --remote scripts &#xA;&#xA;# python scripts/make.py &#34;C:\Qt\Qt-5.14.1-installer\5.14.2\msvc2017_64\bin&#34; --lib-path C:\coding\nomacs\nomacs\3rd-party\build&#xA;python scripts/make.py &#34;qt/bin&#34; --lib-path &#34;nomacs/3rd-party/build&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;If anything did not work&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;check if you have setup opencv (otherwise uncheck ENABLE_OPENCV)&lt;/li&gt; &#xA; &lt;li&gt;check if your Qt is set correctly (otherwise set the path to &lt;code&gt;qt_install_dir/qtbase/bin/qmake.exe&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;check if your builds proceeded correctly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build nomacs (Linux/Unix)&lt;/h2&gt; &#xA;&lt;p&gt;Before you build nomacs, please note the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nomacs requires using Qt6.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;%5Bhttps://github.com/KDE/kimageformats%5D(https://invent.kde.org/frameworks/kimageformats)&#34;&gt;kimageformats-plugins&lt;/a&gt; is an optional dependency that provides additional formats such as AVIF, HEIC/HEIF, and JPEG XL/JXL. The Qt version of the plugins should match the Qt version when compiling nomacs.&lt;/li&gt; &#xA; &lt;li&gt;Zip file support requires Quazip, which has varied support in distributions. If the system package is missing or does not work, you can set &lt;code&gt;USE_SYSTEM_QUAZIP=NO&lt;/code&gt; to use the version in nomacs/3rdparty. However, you may also need to remove the any system quazip development package temporarily. (such as &lt;code&gt;llibquazip*-dev&lt;/code&gt; for Ubuntu)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get the required packages&lt;/h3&gt; &#xA;&lt;p&gt;The package lists and cmake configuration listed below enable all features in nomacs, which we recommend. However, if you do not want a particular feature you can omit certain packages.&lt;/p&gt; &#xA;&lt;h4&gt;Build options and their dependencies&lt;/h4&gt; &#xA;&lt;p&gt;This is the list of configurable packages and what they provide in nomacs. To ensure a feature is included/excluded set the cmake option for that feature. By default, all features are enabled if the dependencies are found when running cmake**.&lt;/p&gt; &#xA;&lt;p&gt;The following Qt components are necessary: Core, Concurrent, Network, PrintSupport, SVG, Widgets, Core5Compat.&lt;/p&gt; &#xA;&lt;p&gt;There are other optional features that can be enabled during build:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Depends on&lt;/th&gt; &#xA;   &lt;th&gt;Requires&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_RAW&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LibRAW&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_OPENCV&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables reading RAW images&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_TIFF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LibTiff&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_OPENCV&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable reading multi-page TIFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_QUAZIP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quazip**&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable reading from zip files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_OPENCV&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OpenCV&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;RAW, TIFF, Adjustments, High-quality thumbnails, DRIF files, histogram, mosaic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_PLUGINS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;nomacs/plugins&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_OPENCV&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Paint on image, Composite, Affine Transform, Fake Miniatures, Page Extraction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_TESTING&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GoogleTest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables &lt;code&gt;make check&lt;/code&gt; target for unit testing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;(**) Quazip is not enabled by default as of nomacs 3.19.1&lt;/p&gt; &#xA;&lt;h4&gt;Runtime dependencies&lt;/h4&gt; &#xA;&lt;p&gt;Additional packages will be used by nomacs if they are available at runtime, and they use the same Qt version as nomacs (5 or 6).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QImageFormats: Enables reading ICNS, MNG, TGA, TIFF, WBMP, WEBP&lt;/li&gt; &#xA; &lt;li&gt;KImageFormats: Enables reading AVIF, HEIF/HEIC, JXL, EXR, EPS and &lt;a href=&#34;https://github.com/KDE/kimageformats&#34;&gt;more&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Ubuntu 24.04&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt install qt6-base-dev qt6-tools-dev qt6-svg-dev qt6-image-formats-plugins libexiv2-dev libraw-dev libopencv-dev libtiff-dev libtiff-dev libquazip1-qt6-dev build-essential git cmake lcov libgtest-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ubuntu 22.04&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt install qt6-base-dev qt6-tools-dev qt6-tools-dev-tools libqt6svg6-dev libqt6core5compat6-dev qt6-l10n-tools qt6-image-formats-plugins libexiv2-dev libraw-dev libopencv-dev libtiff-dev libtiff-dev build-essential git cmake lcov libgtest-dev libgl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# qt6&#xA;sudo pacman -S qt6-base qt6-imageformats qt6-svg qt6-tools quazip-qt6 exiv2 libraw libtiff opencv kimageformats git cmake gtest base-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Redhat/Fedora/CentOS (tested on Rocky 9.5)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo dnf install qt6-qtbase-devel qt6-qtimageformats qt6-qtsvg-devel qt6-qttools-devel qt6-qt5compat-devel LibRaw-devel opencv-devel exiv2-devel libtiff-devel git cmake lcov gtest-devel gcc-c++&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;FreeBSD (14.2 release)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo pkg install qt6-base qt6-imageformats qt6-svg qt6-5compat qt6-tools quazip-qt6 tiff exiv2 kf6-kimageformats libraw opencv git cmake googletest gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Haiku (r1 beta 5)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# qt6&#xA;pkgman install qt6_base_devel qt6_tools_devel qt6_svg_devel qt6_5compat_devel quazip1_qt6_devel tiff_devel libraw_devel opencv_devel gtest_devel exiv2_devel kimageformats6 qt6_imageformats cake git gcc make pkgconfig lcms_devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure nomacs&lt;/h3&gt; &#xA;&lt;p&gt;Nomacs is configured with cmake. These cmake options are often needed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ENABLE_QUAZIP=[ON|OFF] - Default OFF&lt;/li&gt; &#xA; &lt;li&gt;USE_SYSTEM_QUAZIP=[ON|OFF] - Default ON&lt;/li&gt; &#xA; &lt;li&gt;CMAKE_BUILD_TYPE=[Debug|Release|RelWithDebInfo] - For normal usage, choose &lt;code&gt;RelWithDebInfo&lt;/code&gt;. For development, &lt;code&gt;Debug&lt;/code&gt; builds have more logging as well as debug symbols.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd nomacs&#xA;mkdir build&#xA;cd build&#xA;cmake ../ImageLounge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile nomacs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;make [-j 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will now have a binary (~/nomacs/build/nomacs), which you can use directly, however you may need to set LD_LIBRARY_PATH for this to work. You can check the log output to see that nomacs is loading configuration files from the expected locations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# running nomacs from ~/nomacs/build/&#xA;LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH ./nomacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build and run tests&lt;/h2&gt; &#xA;&lt;p&gt;Nomacs uses &lt;a href=&#34;https://github.com/google/googletest&#34;&gt;GoogleTest&lt;/a&gt;, which is included in the package lists above. A &lt;code&gt;check&lt;/code&gt; target will be created if GoogleTest is present. To build and run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install nomacs&lt;/h3&gt; &#xA;&lt;p&gt;By default nomacs is installed to /usr/local/ unless you set &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo make install&#xA;# ldconfig is required on most linux distros&#xA;# Some systems you also require changes to &#xA;# `/etc/ld.so.conf` to add `/usr/local/lib` &#xA;sudo ldconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;For Package Maintainers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Highly recommended optional dependency: nomacs officially supported &lt;a href=&#34;https://github.com/nomacs/nomacs-plugins/&#34;&gt;plugins&lt;/a&gt;, provide core features like paint-on-image. Enabled by default if &lt;code&gt;nomacs/ImageLounge/plugins&lt;/code&gt; submodule is present.&lt;/li&gt; &#xA; &lt;li&gt;Recommended optional dependency: qt-imageformats-plugins provides WEBP and many more formats&lt;/li&gt; &#xA; &lt;li&gt;Recommended optional dependency: quazip provides support for reading images from zip files (with &lt;code&gt;ENABLE_QUAZIP=ON&lt;/code&gt;). In the unlikely case there is a conflict with the quazip package, you may use 3rdparty/quazip with &lt;code&gt;USE_SYSTEM_QUAZIP=OFF&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Recommended optional dependency: kimageformats provides AVIF, HEIF/HEIC, JXL and many more formats.&lt;/li&gt; &#xA; &lt;li&gt;Recommended build dependency: gtest so you may run &lt;code&gt;make check&lt;/code&gt; to validate the build&lt;/li&gt; &#xA; &lt;li&gt;Ensure &lt;code&gt;ENABLE_TRANSLATIONS&lt;/code&gt; is &lt;code&gt;ON&lt;/code&gt; (default: &lt;code&gt;ON&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nomacs only requires the opencv-core and opencv-imgproc components at runtime, not the full opencv suite. This will save substantial space when installing nomacs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build nomacs (MacOS)&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; for easier installation of dependencies. Install required dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install qt6 exiv2 opencv libraw quazip cmake pkg-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to the &lt;code&gt;nomacs&lt;/code&gt; directory and run the correct cmake for your hardware and Qt version. We recommend Qt6.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd nomacs; mkdir build; cd build&#xA;&#xA;# Qt6 / Intel &#xA;CMAKE_PREFIX_PATH=/usr/local/opt/qt6/lib/cmake cmake -D ENABLE_QUAZIP=ON ../ImageLounge&#xA;&#xA;# Qt6 / Apple Silicon&#xA;CMAKE_PREFIX_PATH=/opt/homebrew/opt/qt6/lib/cmake cmake -D ENABLE_QUAZIP=ON ../ImageLounge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will now have a binary (&lt;code&gt;nomacs.app&lt;/code&gt;), which you can test (or use directly):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# simulate opening from Finder&#xA;open nomacs.app&#xA;&#xA;# to see logging&#xA;./nomacs.app/Contents/MacOS/nomacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Homebrew seems to be missing kimageformats so we haves this option until that happens:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;make kimageformats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nomacs registers supported file types via the Info.plist file in the app bundle. This is essential for open-with, drag-and-drop, etc features of the Finder. Supported types vary depending on what options to cmake, Qt and OS version, homebrew configuration, and even nomacs user-specified custom file types (via &lt;code&gt;Tools/Add Image Format&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Note that nomacs does not automatically make itself the default application for any supported types at this time, you will need to you use the open-with function in &#34;Get Info&#34; etc.&lt;/p&gt; &#xA;&lt;p&gt;To ensure it is correct for the current build, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;make filetypes&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you are satisfied and want to install it to &lt;code&gt;/Applications&lt;/code&gt;, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a self-contained bundle (&lt;code&gt;nomacs.app&lt;/code&gt;) and dmg file (&lt;code&gt;nomacs.dmg&lt;/code&gt;) that can&#39;t be broken by homebrew updates, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;make bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If macdeployqt complains about &lt;code&gt;ERROR: Cannot resolve rpath &#34;@rpath/QtGui.framework/Versions/A/QtGui&#34;&lt;/code&gt; &lt;a href=&#34;https://github.com/orgs/Homebrew/discussions/2823#discussioncomment-2010340&#34;&gt;here&lt;/a&gt; is the solution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd /usr/local/lib/QtGui.framework/Versions/A&#xA;install_name_tool -id &#39;@rpath/QtGui.framework/Versions/A/QtGui&#39; QtGui&#xA;otool -L QtGui | head -2&#xA;QtGui:&#xA;        @rpath/QtGui.framework/Versions/A/QtGui (compatibility version 6.0.0, current version 6.7.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build nomacs (Windows Cross-Compile)&lt;/h2&gt; &#xA;&lt;p&gt;Compiles nomacs for Windows using M Cross Environment (MXE) from a Linux/Unix host.&lt;/p&gt; &#xA;&lt;p&gt;MXE environment is usually compiled from source, however you may be able to skip this if MXE has packages for your platform:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone &amp;lt;mxe url&amp;gt;&#xA;cd mxe&#xA;&#xA;# qt6 (quazip-qt6 is unavailable)&#xA;make MXE_TARGETS=&#39;x86_64-w64-mingw32.shared&#39; qt6-qtbase qt6-qtimageformats qt6-qttools qt6-qt5compat opencv tiff exiv2 libraw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setup build environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export MXE_DIR=~/mxe&#xA;export MXE_TARGET=x86_64-w64-mingw32.shared&#xA;export PATH=&#34;${MXE_DIR}/usr/bin:$PATH&#34;&#xA;&#xA;alias pkg-config=${MXE_TARGET}-pkg-config&#xA;alias qmake=${MXE_TARGET}-qmake&#xA;alias cmake=${MXE_TARGET}-cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run cmake out-of-tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build-nomacs&#xA;cd build-nomacs&#xA;&#xA;cmake -D ENABLE_TRANSLATIONS=ON -D ENABLE_HEIF=ON -D ENABLE_AVIF=ON  \&#xA;-DENABLE_JXL=ON -D USE_SYSTEM_QUAZIP=OFF &amp;lt;nomacs-path&amp;gt;/ImageLounge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile nomacs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make -j8&#xA;make collect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run on WINE:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wine nomacs-mingw/nomacs.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run on Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd C:\&#xA;xcopy /DEY &amp;lt;shared-folder&amp;gt;\build-nomacs\nomacs-mingw nomacs&#xA;cd nomacs&#xA;nomacs.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build nomacs (Windows with MSYS2)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export target=mingw-w64-x86_64&#xA;&#xA;pacman -S $target-qt6-base $target-qt6-svg $target-qt6-tools \&#xA;          $target-libraw $target-libtiff $target-exiv2 $target-opencv $target-cmake $target-gcc&#xA;&#xA;export PATH=/ming64:$PATH&#xA;&#xA;cd &amp;lt;build-dir&amp;gt;&#xA;&#xA;cmake -D ENABLE_TRANSLATIONS=ON -D USE_SYSTEM_QUAZIP=ON &amp;lt;nomacs-dir&amp;gt;/ImageLounge&#xA;&#xA;cmake --build . --parallel 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Enable Debug output&lt;/h2&gt; &#xA;&lt;p&gt;To enable Qt debug messages set&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -D CMAKE_BUILD_TYPE=Debug ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;at the Makefiles generation phase.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nomacs.org&#34;&gt;nomacs.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nomacs&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/%23nomacs:matrix.org&#34;&gt;Matrix chat room&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nomacs.org&#34;&gt;&lt;img src=&#34;https://nomacs.org/nomacs.svg?sanitize=true&#34; alt=&#34;nomacs-icon&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>