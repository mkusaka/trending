<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-11T01:31:25Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>exaloop/codon</title>
    <updated>2022-12-11T01:31:25Z</updated>
    <id>tag:github.com,2022-12-11:/exaloop/codon</id>
    <link href="https://github.com/exaloop/codon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A high-performance, zero-overhead, extensible Python compiler using LLVM&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/exaloop/codon/develop/docs/img/codon.png?raw=true&#34; width=&#34;600&#34; alt=&#34;Codon&#34;&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.exaloop.io/codon&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;Docs&lt;/b&gt;&lt;/a&gt; &amp;nbsp;｜&amp;nbsp; &lt;a href=&#34;https://docs.exaloop.io/codon/general/faq&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;FAQ&lt;/b&gt;&lt;/a&gt; &amp;nbsp;｜&amp;nbsp; &lt;a href=&#34;https://blog.exaloop.io&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;Blog&lt;/b&gt;&lt;/a&gt; &amp;nbsp;｜&amp;nbsp; &lt;a href=&#34;https://github.com/exaloop/codon/discussions&#34; target=&#34;_blank&#34;&gt;&lt;b&gt;Forum&lt;/b&gt;&lt;/a&gt; &amp;nbsp;｜&amp;nbsp; &lt;a href=&#34;https://join.slack.com/t/exaloop/shared_invite/zt-1jusa4kc0-T3rRWrrHDk_iZ1dMS8s0JQ&#34; target=&#34;_blank&#34;&gt;Chat&lt;/a&gt; &amp;nbsp;｜&amp;nbsp; &lt;a href=&#34;https://exaloop.io/benchmarks&#34; target=&#34;_blank&#34;&gt;Benchmarks&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/exaloop/codon/actions/workflows/ci.yml&#34;&gt; &lt;img src=&#34;https://github.com/exaloop/codon/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;What is Codon?&lt;/h2&gt; &#xA;&lt;p&gt;Codon is a high-performance Python compiler that compiles Python code to native machine code without any runtime overhead. Typical speedups over Python are on the order of 10-100x or more, on a single thread. Codon&#39;s performance is typically on par with (and sometimes better than) that of C/C++. Unlike Python, Codon supports native multithreading, which can lead to speedups many times higher still. Codon grew out of the &lt;a href=&#34;https://github.com/seq-lang/seq&#34;&gt;Seq project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Pre-built binaries for Linux (x86_64) and macOS (x86_64 and arm64) are available alongside &lt;a href=&#34;https://github.com/exaloop/codon/releases&#34;&gt;each release&lt;/a&gt;. Download and install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/bin/bash -c &#34;$(curl -fsSL https://exaloop.io/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can &lt;a href=&#34;https://docs.exaloop.io/codon/advanced/build&#34;&gt;build from source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Codon is a Python-compatible language, and many Python programs will work with few if any modifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def fib(n):&#xA;    a, b = 0, 1&#xA;    while a &amp;lt; n:&#xA;        print(a, end=&#39; &#39;)&#xA;        a, b = b, a+b&#xA;    print()&#xA;fib(1000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;codon&lt;/code&gt; compiler has a number of options and modes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# compile and run the program&#xA;codon run fib.py&#xA;# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987&#xA;&#xA;# compile and run the program with optimizations enabled&#xA;codon run -release fib.py&#xA;# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987&#xA;&#xA;# compile to executable with optimizations enabled&#xA;codon build -release -exe fib.py&#xA;./fib&#xA;# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987&#xA;&#xA;# compile to LLVM IR file with optimizations enabled&#xA;codon build -release -llvm fib.py&#xA;# outputs file fib.ll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.exaloop.io/codon/general/intro&#34;&gt;the docs&lt;/a&gt; for more options and examples.&lt;/p&gt; &#xA;&lt;p&gt;This prime counting example showcases Codon&#39;s &lt;a href=&#34;https://www.openmp.org/&#34;&gt;OpenMP&lt;/a&gt; support, enabled with the addition of one line. The &lt;code&gt;@par&lt;/code&gt; annotation tells the compiler to parallelize the following &lt;code&gt;for&lt;/code&gt;-loop, in this case using a dynamic schedule, chunk size of 100, and 16 threads.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sys import argv&#xA;&#xA;def is_prime(n):&#xA;    factors = 0&#xA;    for i in range(2, n):&#xA;        if n % i == 0:&#xA;            factors += 1&#xA;    return factors == 0&#xA;&#xA;limit = int(argv[1])&#xA;total = 0&#xA;&#xA;@par(schedule=&#39;dynamic&#39;, chunk_size=100, num_threads=16)&#xA;for i in range(2, limit):&#xA;    if is_prime(i):&#xA;        total += 1&#xA;&#xA;print(total)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Codon supports writing and executing GPU kernels. Here&#39;s an example that computes the &lt;a href=&#34;https://en.wikipedia.org/wiki/Mandelbrot_set&#34;&gt;Mandelbrot set&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import gpu&#xA;&#xA;MAX    = 1000  # maximum Mandelbrot iterations&#xA;N      = 4096  # width and height of image&#xA;pixels = [0 for _ in range(N * N)]&#xA;&#xA;def scale(x, a, b):&#xA;    return a + (x/N)*(b - a)&#xA;&#xA;@gpu.kernel&#xA;def mandelbrot(pixels):&#xA;    idx = (gpu.block.x * gpu.block.dim.x) + gpu.thread.x&#xA;    i, j = divmod(idx, N)&#xA;    c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12))&#xA;    z = 0j&#xA;    iteration = 0&#xA;&#xA;    while abs(z) &amp;lt;= 2 and iteration &amp;lt; MAX:&#xA;        z = z**2 + c&#xA;        iteration += 1&#xA;&#xA;    pixels[idx] = int(255 * iteration/MAX)&#xA;&#xA;mandelbrot(pixels, grid=(N*N)//1024, block=1024)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GPU programming can also be done using the &lt;code&gt;@par&lt;/code&gt; syntax with &lt;code&gt;@par(gpu=True)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What isn&#39;t Codon?&lt;/h2&gt; &#xA;&lt;p&gt;While Codon supports nearly all of Python&#39;s syntax, it is not a drop-in replacement, and large codebases might require modifications to be run through the Codon compiler. For example, some of Python&#39;s modules are not yet implemented within Codon, and a few of Python&#39;s dynamic features are disallowed. The Codon compiler produces detailed error messages to help identify and resolve any incompatibilities.&lt;/p&gt; &#xA;&lt;p&gt;Codon can be used within larger Python codebases via the &lt;a href=&#34;https://docs.exaloop.io/codon/interoperability/decorator&#34;&gt;&lt;code&gt;@codon.jit&lt;/code&gt; decorator&lt;/a&gt;. Plain Python functions and libraries can also be called from within Codon via &lt;a href=&#34;https://docs.exaloop.io/codon/interoperability/python&#34;&gt;Python interoperability&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://docs.exaloop.io/codon&#34;&gt;docs.exaloop.io&lt;/a&gt; for in-depth documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openMVG/openMVG</title>
    <updated>2022-12-11T01:31:25Z</updated>
    <id>tag:github.com,2022-12-11:/openMVG/openMVG</id>
    <link href="https://github.com/openMVG/openMVG" rel="alternate"></link>
    <summary type="html">&lt;p&gt;open Multiple View Geometry library. Basis for 3D computer vision and Structure from Motion.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenMVG (open Multiple View Geometry)&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/openMVG/openMVG/raw/master/logo/openMVG_Logo.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Continuous Integration (Linux/MacOs/Windows)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Build&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Code Quality&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Chat&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/openMVG/openMVG/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MPL2-blue&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://openmvg.readthedocs.org/en/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/doc-readthedocs-blueviolet&#34; alt=&#34;doc&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/openMVG/openMVG/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/openMVG/openMVG/actions/workflows/compile_and_run_test.yml&#34;&gt;&lt;img src=&#34;https://github.com/openMVG/openMVG/actions/workflows/compile_and_run_test.yml/badge.svg?branch=develop&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/openMVG/openMVG/raw/master/BUILD.md&#34;&gt;local/docker build tutorial &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://lgtm.com/projects/g/openMVG/openMVG/context:cpp&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/cpp/g/openMVG/openMVG.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Language grade: C/C++&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/openmvg/openmvg&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/openmvg/openmvg/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://gitter.im/openMVG/Lobby&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20gitter-green&#34; alt=&#34;Join the chat&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Our Mission&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extend awareness of the power of 3D reconstruction from images/photogrammetry by developing a C++ framework.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Our Vision&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simplify reproducible research with easy-to-read and accurate implementation of state of the art and &#34;classic&#34; algorithms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Our Credo&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;Keep it simple, keep it maintainable&#34;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;OpenMVG is designed to be easy to read, learn, modify and use.&lt;/li&gt; &#xA;   &lt;li&gt;Thanks to its strict test-driven development and samples, the library allows to build trusted larger systems.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Our codebase and pipeline&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenMVG provides an end-to-end 3D reconstruction from images framework compounded of libraries, binaries, and pipelines.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The libraries&lt;/strong&gt; provide easy access to features like: images manipulation, features description and matching, feature tracking, camera models, multiple-view-geometry, robust-estimation, structure-from-motion algorithms, ...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The binaries&lt;/strong&gt; solve unit tasks that a pipeline could require: scene initialization, feature detection &amp;amp; matching and structure-from-motion reconstruction, export the reconstructed scene to others Multiple-View-Stereovision framework to compute dense point clouds or textured meshes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The pipelines&lt;/strong&gt; are created by chaining various binaries to compute image matching relation, solve the Structure from Motion problem (reconstruction, triangulation, localization) and ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OpenMVG is developed in C++ and runs on Android, iOS, Linux, macOS, and Windows.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/openMVG/openMVG/develop/docs/sphinx/rst/openMVG/sfm/pipeline_simple.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tutorials&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/openMVG/openMVG/wiki&#34;&gt;Wiki&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openMVG/openMVG/wiki/OpenMVG-data-structures&#34;&gt;OpenMVG Data Structure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openMVG/openMVG/raw/develop/BUILD.md#using-openmvg-as-a-third-party-library-dependency-with-cmake&#34;&gt;Using OpenMVG as a library&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/openMVG/openMVG/wiki/OpenMVG-on-your-image-dataset&#34;&gt;Using OpenMVG on your image dataset&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;More information&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openMVG/openMVG/develop/#authors&#34;&gt;Authors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openMVG/openMVG/develop/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openMVG/openMVG/develop/#citations&#34;&gt;Citations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openMVG/openMVG/develop/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/openMVG/openMVG/raw/master/AUTHORS&#34;&gt;Authors&lt;/a&gt; text file&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;openmvg-team[AT]googlegroups.com&lt;/p&gt; &#xA;&lt;h2&gt;Citations&lt;/h2&gt; &#xA;&lt;p&gt;We are recommending citing &lt;code&gt;OpenMVG&lt;/code&gt; if you are using the whole library or the adequate paper if you use only a submodule &lt;code&gt;AContrario Ransac [3], AContrario SfM [1], GlobalSfM [4] or Tracks [2]&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{moulon2016openmvg,&#xA;  title={Open{MVG}: Open multiple view geometry},&#xA;  author={Moulon, Pierre and Monasse, Pascal and Perrot, Romuald and Marlet, Renaud},&#xA;  booktitle={International Workshop on Reproducible Research in Pattern Recognition},&#xA;  pages={60--74},&#xA;  year={2016},&#xA;  organization={Springer}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[1] Moulon Pierre, Monasse Pascal and Marlet Renaud. ACCV 2012. &lt;a href=&#34;http://hal.archives-ouvertes.fr/index.php?halsid=1n2qdqiv2a0l5eq7qpos9us752&amp;amp;view_this_doc=hal-00769266&amp;amp;version=1&#34;&gt;Adaptive Structure from Motion with a contrario model estimation.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{Moulon2012,&#xA;  doi = {10.1007/978-3-642-37447-0_20},&#xA;  year  = {2012},&#xA;  publisher = {Springer Berlin Heidelberg},&#xA;  pages = {257--270},&#xA;  author = {Pierre Moulon and Pascal Monasse and Renaud Marlet},&#xA;  title = {Adaptive Structure from Motion with a~Contrario Model Estimation},&#xA;  booktitle = {Proceedings of the Asian Computer Vision Conference (ACCV 2012)}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[2] Moulon Pierre and Monasse Pascal. CVMP 2012. &lt;a href=&#34;http://hal.archives-ouvertes.fr/index.php?halsid=ggdarhl8cv1j6ohq2073eok8q3&amp;amp;view_this_doc=hal-00769267&amp;amp;version=1&#34;&gt;Unordered feature tracking made fast and easy.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{moulon2012unordered,&#xA;  title={Unordered feature tracking made fast and easy},&#xA;  author={Moulon, Pierre and Monasse, Pascal},&#xA;  booktitle={CVMP 2012},&#xA;  pages={1},&#xA;  year={2012}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[3] Moisan Lionel, Moulon Pierre and Monasse Pascal. IPOL 2012. &lt;a href=&#34;http://dx.doi.org/10.5201/ipol.2012.mmm-oh&#34;&gt;Automatic Homographic Registration of a Pair of Images, with A Contrario Elimination of Outliers.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{moisan2012automatic,&#xA;  title={Automatic homographic registration of a pair of images, with a contrario elimination of outliers},&#xA;  author={Moisan, Lionel and Moulon, Pierre and Monasse, Pascal},&#xA;  journal={Image Processing On Line},&#xA;  volume={2},&#xA;  pages={56--73},&#xA;  year={2012}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[4] Moulon Pierre, Monasse Pascal, and Marlet Renaud. ICCV 2013. &lt;a href=&#34;http://imagine.enpc.fr/~moulonp/publis/iccv2013/index.html&#34;&gt;Global Fusion of Relative Motions for Robust, Accurate and Scalable Structure from Motion.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{moulon2013global,&#xA;  title={Global fusion of relative motions for robust, accurate and scalable structure from motion},&#xA;  author={Moulon, Pierre and Monasse, Pascal and Marlet, Renaud},&#xA;  booktitle={Proceedings of the IEEE International Conference on Computer Vision},&#xA;  pages={3248--3255},&#xA;  year={2013}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;openMVG authors would like to thanks libmv authors for providing an inspiring base to design openMVG. Authors also would like to thanks &lt;a href=&#34;http://www.mikrosimage.eu/&#34;&gt;Mikros Image&lt;/a&gt; and &lt;a href=&#34;http://imagine.enpc.fr/&#34;&gt;LIGM-Imagine laboratory&lt;/a&gt; for support and authorization to make this library an opensource project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>34736384/RSAPatch</title>
    <updated>2022-12-11T01:31:25Z</updated>
    <id>tag:github.com,2022-12-11:/34736384/RSAPatch</id>
    <link href="https://github.com/34736384/RSAPatch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dynamic runtime patching to circumvent vmp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RSAPatch&lt;/h1&gt; &#xA;&lt;p&gt;A patch to get into grass cutting for a certain anime game&lt;/p&gt; &#xA;&lt;h2&gt;How to Use?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download dll from release or compile it (&lt;strong&gt;as Release&lt;/strong&gt;) yourself&lt;/li&gt; &#xA; &lt;li&gt;Rename it to &lt;code&gt;version.dll&lt;/code&gt; or &lt;code&gt;mhypbase.dll&lt;/code&gt; and put it in the same folder as the game&lt;/li&gt; &#xA; &lt;li&gt;Create a file named &lt;code&gt;PublicKey.txt&lt;/code&gt; under the same folder as the game and put your public key in there&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Grasscutter&#39;s public key is now hardcoded as default, if you only planning it use it with gc, then you don&#39;t have to create any additional files&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;[Optional]&lt;/strong&gt; If you need to replace the private key, create a file named &lt;code&gt;PrivateKey.txt&lt;/code&gt; under the same folder and put your private key in there&lt;/li&gt; &#xA; &lt;li&gt;Finally start the game, if you done it right, there should be a console window popup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Infos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Grasscutter, only the public key is needed for now.&lt;/li&gt; &#xA; &lt;li&gt;Tested on 3.1, 3.2, and 3.2.50. It should work for future versions too, unless they have new protections&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; create &lt;code&gt;PrivateKey.txt&lt;/code&gt; if you don&#39;t need it&lt;/li&gt; &#xA; &lt;li&gt;Public key for Grasscutter: &lt;code&gt;&amp;lt;RSAKeyValue&amp;gt;&amp;lt;Modulus&amp;gt;xbbx2m1feHyrQ7jP+8mtDF/pyYLrJWKWAdEv3wZrOtjOZzeLGPzsmkcgncgoRhX4dT+1itSMR9j9m0/OwsH2UoF6U32LxCOQWQD1AMgIZjAkJeJvFTrtn8fMQ1701CkbaLTVIjRMlTw8kNXvNA/A9UatoiDmi4TFG6mrxTKZpIcTInvPEpkK2A7Qsp1E4skFK8jmysy7uRhMaYHtPTsBvxP0zn3lhKB3W+HTqpneewXWHjCDfL7Nbby91jbz5EKPZXWLuhXIvR1Cu4tiruorwXJxmXaP1HQZonytECNU/UOzP6GNLdq0eFDE4b04Wjp396551G99YiFP2nqHVJ5OMQ==&amp;lt;/Modulus&amp;gt;&amp;lt;Exponent&amp;gt;AQAB&amp;lt;/Exponent&amp;gt;&amp;lt;/RSAKeyValue&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>