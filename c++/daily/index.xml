<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-05T01:36:20Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openxrlab/xrnerf</title>
    <updated>2022-09-05T01:36:20Z</updated>
    <id>tag:github.com,2022-09-05:/openxrlab/xrnerf</id>
    <link href="https://github.com/openxrlab/xrnerf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenXRLab Neural Radiance Field (NeRF) Toolbox and Benchmark&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XRNerf&lt;/h1&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/openxrlab/xrnerf/actions&#34;&gt;&lt;img src=&#34;https://github.com/openxrlab/xrnerf/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/openxrlab/xrnerf/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/openxrlab/xrnerf.svg?sanitize=true&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;!-- [![codecov](https://codecov.io/gh/openxrlab/xrnerf/branch/main/graph/badge.svg)](https://codecov.io/gh/openxrlab/xrnerf) --&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/README_CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;XRNerf is an open-source PyTorch-based codebase for Neural Radiance Field (NeRF). It is a part of the &lt;a href=&#34;https://github.com/orgs/openxrlab/repositories&#34;&gt;OpenXRLab&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/24294293/187131048-5977c929-e136-4328-ad1f-7da8e7a566ff.mp4&#34;&gt;https://user-images.githubusercontent.com/24294293/187131048-5977c929-e136-4328-ad1f-7da8e7a566ff.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This page provides basic tutorials about the usage of XRNerf. For installation instructions, please see &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/installation.md&#34;&gt;installation.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#xrnerf&#34;&gt;XRNerf&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#benchmark&#34;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#datasets&#34;&gt;Datasets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#build-a-model&#34;&gt;Build a Model&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#basic-concepts&#34;&gt;Basic Concepts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#write-a-new-network&#34;&gt;Write a new network&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#train-a-model&#34;&gt;Train a Model&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#iteration-controls&#34;&gt;Iteration Controls&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#train&#34;&gt;Train&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#tutorials&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#other-documents&#34;&gt;Other Documents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#citation&#34;&gt;Citation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#acknowledgement&#34;&gt;Acknowledgement&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/#projects-in-openxrlab&#34;&gt;Projects in OpenXRLab&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;More details can be found in &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/benchmark.md&#34;&gt;benchmark.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Supported scene-nerf methods:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;(click to collapse)&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.matthewtancik.com/nerf&#34;&gt;NeRF&lt;/a&gt; (ECCV&#39;2020)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://jonbarron.info/mipnerf/&#34;&gt;Mip-NeRF&lt;/a&gt; (ICCV&#39;2021)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://arxiv.org/abs/2103.13744&#34;&gt;KiloNeRF&lt;/a&gt; (ICCV&#39;2021)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://nvlabs.github.io/instant-ngp/&#34;&gt;Instant NGP&lt;/a&gt; (SIGGRAPH&#39;2022)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Supported human-nerf methods:&lt;/p&gt; &#xA; &lt;details open&gt; &#xA;  &lt;summary&gt;(click to collapse)&lt;/summary&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://zju3dv.github.io/neuralbody&#34;&gt;NeuralBody&lt;/a&gt; (CVPR&#39;2021)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://zju3dv.github.io/animatable_nerf/&#34;&gt;AniNeRF&lt;/a&gt; (ICCV&#39;2021)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://generalizable-neural-performer.github.io/&#34;&gt;GNR&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/details&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Datasets&lt;/h2&gt; &#xA;&lt;p&gt;It is recommended to symlink the dataset root to &lt;code&gt;$PROJECT/data&lt;/code&gt;. If your folder structure is different, you may need to change the corresponding paths in config files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xrnerf&#xA;├── xrnerf&#xA;├── docs&#xA;├── configs&#xA;├── test&#xA;├── extensions&#xA;├── data&#xA;│   ├── nerf_llff_data&#xA;│   ├── nerf_synthetic&#xA;│   ├── multiscale&#xA;│   ├── ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on data preparation, please see &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/dataset_preparation.md&#34;&gt;dataset_preparation.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We provide detailed &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/installation.md&#34;&gt;installation tutorial&lt;/a&gt; for xrnerf, users can install from scratch or use provided &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docker/Dockerfile&#34;&gt;dockerfile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to start by creating a docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build -f ./docker/Dockerfile --rm -t xrnerf .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, please follow our &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/installation.md&#34;&gt;installation tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build a Model&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Concepts&lt;/h3&gt; &#xA;&lt;p&gt;In XRNerf, model components are basically categorized as 4 types.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;network: the whole nerf model pipeline, usually contains a embedder, mlp and render.&lt;/li&gt; &#xA; &lt;li&gt;embedder: convert point-position and viewdirection data into embedded data, embedder can be function only or with trainable paramters.&lt;/li&gt; &#xA; &lt;li&gt;mlp: use the output of embedder as input, and output raw data (the rgb and density value at sampled position) for render, usually contains FC layers.&lt;/li&gt; &#xA; &lt;li&gt;render: receive mlp&#39;s raw data, output the rgb value at a pixel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Following some basic pipelines (e.g., &lt;code&gt;NerfNetwork&lt;/code&gt;), the model structure can be customized through config files with no pains.&lt;/p&gt; &#xA;&lt;h3&gt;Write a new network&lt;/h3&gt; &#xA;&lt;p&gt;To write a new nerf network, you need to inherit from &lt;code&gt;BaseNerfNetwork&lt;/code&gt;, which defines the following abstract methods.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;train_step()&lt;/code&gt;: forward method of the training mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;val_step()&lt;/code&gt;: forward method of the testing mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/xrnerf/models/networks/nerf.py&#34;&gt;NerfNetwork&lt;/a&gt; is a good example which show how to do that.&lt;/p&gt; &#xA;&lt;p&gt;To be specific, if we want to implement some new components, there are several things to do.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;create a new file in &lt;code&gt;xrnerf/models/networks/my_networks.py&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from ..builder import NETWORKS&#xA;from .nerf import NerfNetwork&#xA;&#xA;@NETWORKS.register_module()&#xA;class MyNerfNetwork(NerfNetwork):&#xA;&#xA;    def __init__(self, cfg, mlp=None, mlp_fine=None, render=None):&#xA;        super().__init__(cfg, mlp, mlp_fine, render)&#xA;    &#xA;    def forward(self, data):&#xA;        ....&#xA;&#xA;    def train_step(self, data, optimizer, **kwargs):&#xA;        ....&#xA;&#xA;    def val_step(self, data, optimizer=None, **kwargs):&#xA;        ....&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the module in &lt;code&gt;xrnerf/models/networks/__init__.py&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from .my_networks import MyNerfNetwork&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;modify the &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/configs/nerf/nerf_blender_base01.py&#34;&gt;config file&lt;/a&gt; from&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = dict(&#xA;    type=&#39;NerfNetwork&#39;,&#xA;    ....&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = dict(&#xA;    type=&#39;MyNerfNetwork&#39;,&#xA;    ....&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To implement some new components for embedder/mlp/render, procedure is similar to above.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To write a new nerf embedder, you need to inherit from &lt;code&gt;nn.Module&lt;/code&gt; or &lt;code&gt;BaseEmbedder&lt;/code&gt;, and define the &lt;code&gt;forward&lt;/code&gt; method. &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/xrnerf/models/embedders/base.py&#34;&gt;BaseEmbedder&lt;/a&gt; is a good example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To write a new nerf mlp, you need to inherit from &lt;code&gt;nn.Module&lt;/code&gt; or &lt;code&gt;BaseMLP&lt;/code&gt;, and define the &lt;code&gt;forward&lt;/code&gt; method. &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/xrnerf/models/mlps/nerf_mlp.py&#34;&gt;NerfMLP&lt;/a&gt; is a good example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To write a new nerf render, you need to inherit from &lt;code&gt;nn.Module&lt;/code&gt; or &lt;code&gt;BaseRender&lt;/code&gt;, and define the &lt;code&gt;forward&lt;/code&gt; method. &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/xrnerf/models/renders/nerf_render.py&#34;&gt;NerfRender&lt;/a&gt; is a good example.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Train a Model&lt;/h2&gt; &#xA;&lt;h3&gt;Iteration Controls&lt;/h3&gt; &#xA;&lt;p&gt;XRnerf use &lt;code&gt;mmcv.runner.IterBasedRunner&lt;/code&gt; to control training, and &lt;code&gt;mmcv.runner.EpochBasedRunner&lt;/code&gt; to for test mode.&lt;/p&gt; &#xA;&lt;p&gt;In training mode, the &lt;code&gt;max_iters&lt;/code&gt; in config file decide how many iters. In test mode, &lt;code&gt;max_iters&lt;/code&gt; is forced to change to 1, which represents only 1 epoch to test.&lt;/p&gt; &#xA;&lt;h3&gt;Train&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python run_nerf.py --config configs/nerf/nerf_blender_base01.py --dataname lego&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--config&lt;/code&gt;: config file path.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--dataname&lt;/code&gt;: select which data under dataset directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;p&gt;We have provided model &lt;code&gt;iter_200000.pth&lt;/code&gt; for test, download from &lt;a href=&#34;https://drive.google.com/file/d/147wRy3TFlRVrZdWqAgHNak7s6jiMZA1-/view?usp=sharing&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python run_nerf.py --config configs/nerf/nerf_blender_base01.py --dataname lego --test_only --load_from iter_200000.pth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--config&lt;/code&gt;: config file path.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--dataname&lt;/code&gt;: select which data under dataset directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--test_only&lt;/code&gt;: influence on whole testset once.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--load_from&lt;/code&gt;: load which checkpoint to test, this will overwrite the original &lt;code&gt;load_from&lt;/code&gt; in config file to for convenience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;Currently, we provide some tutorials for users to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/tutorials/config.md&#34;&gt;learn about configs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/tutorials/data_pipeline.md&#34;&gt;customize data pipelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/tutorials/model.md&#34;&gt;model definition&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Documents&lt;/h2&gt; &#xA;&lt;p&gt;Except for that，The document also includes the following&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/api.md&#34;&gt;api&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/dataset_preparation.md&#34;&gt;dataset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/installation.md&#34;&gt;installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/benchmark.md&#34;&gt;benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/faq.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this project useful in your research, please consider cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{xrnerf,&#xA;    title={OpenXRLab Neural Radiance Field Toolbox and Benchmark},&#xA;    author={XRNerf Contributors},&#xA;    howpublished = {\url{https://github.com/openxrlab/xrnerf}},&#xA;    year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is released under the &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;. Some supported methods may carry &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/additional_licenses.md&#34;&gt;additional licenses&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We appreciate all contributions to improve XRNerf. Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/openxrlab/xrnerf/main/docs/en/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for the contributing guideline.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;XRNerf is an open source project that is contributed by researchers and engineers from both the academia and the industry. We appreciate all the contributors who implement their methods or add new features, as well as users who give valuable feedbacks. We wish that the framework and benchmark could serve the growing research community by providing a flexible framework to reimplement existing methods and develop their own new models.&lt;/p&gt; &#xA;&lt;h2&gt;Projects in OpenXRLab&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openxrlab/xrprimer&#34;&gt;XRPrimer&lt;/a&gt;: OpenXRLab foundational library for XR-related algorithms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openxrlab/xrslam&#34;&gt;XRSLAM&lt;/a&gt;: OpenXRLab Visual-inertial SLAM Toolbox and Benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openxrlab/xrsfm&#34;&gt;XRSfM&lt;/a&gt;: OpenXRLab Structure-from-Motion Toolbox and Benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openxrlab/xrlocalization&#34;&gt;XRLocalization&lt;/a&gt;: OpenXRLab Visual Localization Toolbox and Server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openxrlab/xrmocap&#34;&gt;XRMoCap&lt;/a&gt;: OpenXRLab Multi-view Motion Capture Toolbox and Benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openxrlab/xrmogen&#34;&gt;XRMoGen&lt;/a&gt;: OpenXRLab Human Motion Generation Toolbox and Benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openxrlab/xrnerf&#34;&gt;XRNeRF&lt;/a&gt;: OpenXRLab Neural Radiance Field (NeRF) Toolbox and Benchmark.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Tencent/mars</title>
    <updated>2022-09-05T01:36:20Z</updated>
    <id>tag:github.com,2022-09-05:/Tencent/mars</id>
    <link href="https://github.com/Tencent/mars" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mars is a cross-platform network component developed by WeChat.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Mars&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Tencent/mars/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/mars/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-1.2.3-red.svg?sanitize=true&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/mars/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/mars/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Wechat_Approved-1.2.3-red.svg?sanitize=true&#34; alt=&#34;WeChat Approved&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/mars/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform(cmake)-%20iOS%20%7C%20OS%20X%20%7C%20Android(ndkr20)%20%7C%20Windows(vs2015)%20-brightgreen.svg?sanitize=true&#34; alt=&#34;WeChat Approved&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(中文版本请参看&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/mars/master/#mars_cn&#34;&gt;这里&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Mars is a cross-platform infrastructure component developed by WeChat Mobile Team. It is proved to be effective by billions of WeChat users.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Cross platform, easy to deploy if you are developing multi-platform or multi-business application.&lt;/li&gt; &#xA; &lt;li&gt;Suitable for small amount data transmission&lt;/li&gt; &#xA; &lt;li&gt;Mobile platform friendly, low power and traffic consumption&lt;/li&gt; &#xA; &lt;li&gt;A network solution fit for mobile application&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/WeMobileDev/article/raw/master/assets/mars/mars.png?raw=true&#34; alt=&#34;mars&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;comm: common library, including socket, thread, message queue, coroutine, etc.&lt;/li&gt; &#xA; &lt;li&gt;Xlog: a reliable log component with high-performance.&lt;/li&gt; &#xA; &lt;li&gt;SDT: a network detection component.&lt;/li&gt; &#xA; &lt;li&gt;STN: a signaling network component, the major part of Mars.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;Start with sample usage &lt;a href=&#34;https://github.com/Tencent/mars/wiki/Mars-sample-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Choose &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/mars/master/#android&#34;&gt;Android&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/mars/master/#apple&#34;&gt;iOS/OS X&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/mars/master/#windows&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;android&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97&#34;&gt;Android&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use either &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/mars/master/#wrapper&#34;&gt;mars-wrapper&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/mars/master/#core&#34;&gt;mars-core&lt;/a&gt;. We recommend you to use mars-wrapper when you just wanna build a sample or demo, while mars-core is preferred to be used in your APP.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;wrapper&#34;&gt;mars-wrapper&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Add dependencies by adding the following lines to your app/build.gradle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;dependencies {&#xA;    compile &#39;com.tencent.mars:mars-wrapper:1.2.5&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;core&#34;&gt;mars-core&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Add dependencies by adding the following lines to your app/build.gradle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;dependencies {&#xA;    compile &#39;com.tencent.mars:mars-core:1.2.5&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;&#34;&gt;mars-xlog&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you just want to user xlog, add dependencies by adding the following lines to your app/build.gradle. note: xlog is included in mars-core and mars-wrapper.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;dependencies {&#xA;    compile &#39;com.tencent.mars:mars-xlog:1.2.5&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you read here, make sure you have added dependencies of mars-wrapper, mars-core or mars-xlog.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;Xlog&#34;&gt;Xlog Init&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Initialize Xlog when your APP starts. Remember to use an exclusive folder to save the log files, no other files are acceptable in the folder since they would be removed by the cleansing function in Xlog automatically.&lt;/p&gt; &#xA;&lt;p&gt;When multiple processes is used in your app, make sure that each process owns its exclusive log file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;System.loadLibrary(&#34;c++_shared&#34;);&#xA;System.loadLibrary(&#34;marsxlog&#34;);&#xA;&#xA;final String SDCARD = Environment.getExternalStorageDirectory().getAbsolutePath();&#xA;final String logPath = SDCARD + &#34;/marssample/log&#34;;&#xA;&#xA;// this is necessary, or may crash for SIGBUS&#xA;final String cachePath = this.getFilesDir() + &#34;/xlog&#34;&#xA;&#xA;//init xlog&#xA;Xlog xlog = new Xlog();&#xA;Log.setLogImp(xlog);&#xA;&#xA;if (BuildConfig.DEBUG) {&#xA;    Log.setConsoleLogOpen(true);&#xA;  &#x9;Log.appenderOpen(Xlog.LEVEL_DEBUG, Xlog.AppednerModeAsync, &#34;&#34;, logPath, logFileName, 0);&#xA;} else {&#xA;    Log.setConsoleLogOpen(false);&#xA;  &#x9;Log.appenderOpen(Xlog.LEVEL_INFO, Xlog.AppednerModeAsync, &#34;&#34;, logPath, logFileName, 0);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uninitialized Xlog when your app exits&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Log.appenderClose();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;STN&#34;&gt;STN Init&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you add dependencies of mars-core to your project, you need to initialize and release STN. Initialize STN before you use it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// set callback&#xA;AppLogic.setCallBack(stub);&#xA;StnLogic.setCallBack(stub);&#xA;SdtLogic.setCallBack(stub);&#xA;&#xA;// Initialize the Mars PlatformComm&#xA;Mars.init(getApplicationContext(), new Handler(Looper.getMainLooper()));&#xA;&#xA;// Initialize the Mars&#xA;StnLogic.setLonglinkSvrAddr(profile.longLinkHost(), profile.longLinkPorts());&#xA;StnLogic.setShortlinkSvrAddr(profile.shortLinkPort());&#xA;StnLogic.setClientVersion(profile.productID());&#xA;Mars.onCreate(true);&#xA;&#xA;BaseEvent.onForeground(true);&#xA;StnLogic.makesureLongLinkConnected();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Firstly, you should call the setCallBack interface, and secondly, the Mars.init. Then, to initialize the Mars, there is to need to strictly follow the orders of the four commands. Finally, after Mars are initialized, onForeground and makesureLongLinkConnect can be called.&lt;/p&gt; &#xA;&lt;p&gt;Destroy STN or exit your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Mars.onDestroy();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;even&#34;&gt;Event Change&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Network change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;BaseEvent.onNetworkChange()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you add dependencies of mars-wrapper to your project, you just need initialize STN and no need uninitialized.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MarsServiceProxy.init(this, getMainLooper(),null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;No matter which way of dependencies you used, you must pay attention to these.&lt;/p&gt; &#xA;&lt;p&gt;The state (background or foreground) of the APP is changed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;BaseEvent.onForeground(boolean);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The account of the APP is changed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;StnLogic.reset();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to modify the encryption algorithm of Xlog, the packer/unpacker of longlink/shortlink, or you want to define the other components by yourself, refer &lt;a href=&#34;https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;apple&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Tencent/mars/wiki/Mars-iOS%EF%BC%8FOS-X-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97&#34;&gt;iOS/OS X&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Compile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python build_ios.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python build_osx.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add mars.framework as a dependency of your project.&lt;/li&gt; &#xA; &lt;li&gt;Rename files in mars/libraries/mars_android_sdk/jni with .rewriteme extension to .cc extension.&lt;/li&gt; &#xA; &lt;li&gt;Add header files in mars/libraries/mars_android_sdk/jni and source files from step 2 into your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;Xlog&#34;&gt;Xlog Init&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Initialize Xlog when your app starts. Remember to use an exclusive folder to save the log files, no other files are acceptable in the folder since they would be removed by the cleansing function in Xlog automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;NSString* logPath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0] stringByAppendingString:@&#34;/log&#34;];&#xA;&#xA;// set do not backup for logpath&#xA;const char* attrName = &#34;com.apple.MobileBackup&#34;;&#xA;u_int8_t attrValue = 1;&#xA;setxattr([logPath UTF8String], attrName, &amp;amp;attrValue, sizeof(attrValue), 0, 0);&#xA;&#xA;// init xlogger&#xA;#if DEBUG&#xA;xlogger_SetLevel(kLevelDebug);&#xA;appender_set_console_log(true);&#xA;#else&#xA;xlogger_SetLevel(kLevelInfo);&#xA;appender_set_console_log(false);&#xA;#endif&#xA;XLogConfig config;&#xA;config.mode_ = kAppenderAsync;&#xA;config.logdir_ = [logPath UTF8String];&#xA;config.nameprefix_ = &#34;Test&#34;;&#xA;config.pub_key_ = &#34;&#34;;&#xA;config.compress_mode_ = kZlib;&#xA;config.compress_level_ = 0;&#xA;config.cachedir_ = &#34;&#34;;&#xA;config.cache_days_ = 0;&#xA;appender_open(config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Close xlog in function &#34;applicationWillTerminate&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;appender_close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;STN&#34;&gt;STN Init&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Initialize STN before you use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)setCallBack {&#xA;    mars::stn::SetCallback(mars::stn::StnCallBack::Instance());&#xA;    mars::app::SetCallback(mars::app::AppCallBack::Instance());&#xA;}&#xA;&#xA;- (void) createMars {&#xA;    mars::baseevent::OnCreate();&#xA;}&#xA;&#xA;- (void)setClientVersion:(UInt32)clientVersion {&#xA;    mars::stn::SetClientVersion(clientVersion);&#xA;}&#xA;&#xA;- (void)setShortLinkDebugIP:(NSString *)IP port:(const unsigned short)port {&#xA;    std::string ipAddress([IP UTF8String]);&#xA;    mars::stn::SetShortlinkSvrAddr(port, ipAddress);&#xA;}&#xA;&#xA;- (void)setShortLinkPort:(const unsigned short)port {&#xA;    mars::stn::SetShortlinkSvrAddr(port);&#xA;}&#xA;&#xA;- (void)setLongLinkAddress:(NSString *)string port:(const unsigned short)port debugIP:(NSString *)IP {&#xA;    std::string ipAddress([string UTF8String]);&#xA;    std::string debugIP([IP UTF8String]);&#xA;    std::vector&amp;lt;uint16_t&amp;gt; ports;&#xA;    ports.push_back(port);&#xA;    mars::stn::SetLonglinkSvrAddr(ipAddress,ports,debugIP);&#xA;}&#xA;&#xA;- (void)setLongLinkAddress:(NSString *)string port:(const unsigned short)port {&#xA;    std::string ipAddress([string UTF8String]);&#xA;    std::vector&amp;lt;uint16_t&amp;gt; ports;&#xA;    ports.push_back(port);&#xA;    mars::stn::SetLonglinkSvrAddr(ipAddress,ports);&#xA;}&#xA;&#xA;- (void)reportEvent_OnForeground:(BOOL)isForeground {&#xA;    mars::baseevent::OnForeground(isForeground);&#xA;}&#xA;&#xA;- (void)makesureLongLinkConnect {&#xA;    mars::stn::MakesureLonglinkConnected();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Firstly, you should call the setCallBack interface, and secondly, the Mars.init. Then, to initialize the Mars, there is to need to strictly follow the orders of the four commands. Finally, after Mars are initialized, onForeground and makesureLongLinkConnect can be called.&lt;/p&gt; &#xA;&lt;p&gt;If you want to destroy STN or exit App:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)destroyMars {&#xA;    mars::baseevent::OnDestroy();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;even&#34;&gt;Event Change&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;When the App&#39;s state of background or foreground is changed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)reportEvent_OnForeground:(BOOL)isForeground {&#xA;    mars::baseevent::OnForeground(isForeground);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Network change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)reportEvent_OnNetworkChange {&#xA;    mars::baseevent::OnNetworkChange();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;windows&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Tencent/mars/wiki/Mars-Windows-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97&#34;&gt;Windows&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Install Visual Studio 2015.&lt;/p&gt; &#xA;&lt;p&gt;Compile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python build_windows.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add mars.lib as a dependency of your project.&lt;/li&gt; &#xA; &lt;li&gt;Rename files in mars/libraries/mars_android_sdk/jni with .rewriteme extension to .cc extension.&lt;/li&gt; &#xA; &lt;li&gt;Add header files in mars/libraries/mars_android_sdk/jni and source files from step 2 into your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;Xlog&#34;&gt;Xlog Init&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Initialize Xlog when your app starts. Remember to use an exclusive folder to save the log files, no other files are acceptable in the folder since they would be removed by the cleansing function in Xlog automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::string logPath = &#34;&#34;; //use your log path&#xA;std::string pubKey = &#34;&#34;; //use you pubkey for log encrypt&#xA;&#xA;// init xlog&#xA;#if DEBUG&#xA;xlogger_SetLevel(kLevelDebug);&#xA;appender_set_console_log(true);&#xA;#else&#xA;xlogger_SetLevel(kLevelInfo);&#xA;appender_set_console_log(false);&#xA;#endif&#xA;appender_open(kAppenderAsync, logPath.c_str(), &#34;Test&#34;, 0, pubKey.c_str());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uninitialized xlog before your app exits&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;appender_close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;STN&#34;&gt;STN Init&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Initialize STN before you use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void setShortLinkDebugIP(const std::string&amp;amp; _ip, unsigned short _port)&#xA;{&#xA;&#x9;mars::stn::SetShortlinkSvrAddr(_port, _ip);&#xA;}&#xA;void setShortLinkPort(unsigned short _port)&#xA;{&#xA;&#x9;mars::stn::SetShortlinkSvrAddr(_port, &#34;&#34;);&#xA;}&#xA;void setLongLinkAddress(const std::string&amp;amp; _ip, unsigned short _port, const std::string&amp;amp; _debug_ip)&#xA;{&#xA;&#x9;vector&amp;lt;uint16_t&amp;gt; ports;&#xA;&#x9;ports.push_back(_port);&#xA;&#x9;mars::stn::SetLonglinkSvrAddr(_ip, ports, _debug_ip);&#xA;}&#xA;&#xA;void Init()&#xA;{&#xA;&#x9;mars::stn::SetCallback(mars::stn::StnCallBack::Instance());&#xA;&#x9;mars::app::SetCallback(mars::app::AppCallBack::Instance());&#xA;&#x9;mars::baseevent::OnCreate();&#xA;&#xA;&#x9;//todo&#xA;&#x9;//mars::stn::SetClientVersion(version);&#xA;&#x9;//setShortLinkDebugIP(...)&#xA;&#x9;//setLongLinkAddress(...)&#xA;&#xA;&#x9;mars::baseevent::OnForeground(true);&#xA;&#x9;mars::stn::MakesureLonglinkConnected();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Firstly, you should call the setCalBack interface, and secondly, the Mars.init. Then, to initialize the Mars, there is to need to strictly follow the orders of the four commands. Finally, after Mars are initialized, onForeground and makesureLongLinkConnect can be called.&lt;/p&gt; &#xA;&lt;p&gt;If you want to destroy STN or exit App:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;mars::baseevent::OnDestroy();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Any problem?&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Learn more from &lt;a href=&#34;https://github.com/Tencent/mars/tree/master/samples&#34;&gt;mars/sample&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/Tencent/mars/tree/master&#34;&gt;source code&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/Tencent/mars/wiki&#34;&gt;wiki&lt;/a&gt; or &lt;a href=&#34;https://github.com/Tencent/mars/wiki/Mars-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;FAQ&lt;/a&gt; for help.&lt;/li&gt; &#xA; &lt;li&gt;Contact us for help.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For more information about contributing issues or pull requests, see our &lt;a href=&#34;https://github.com/Tencent/mars/raw/master/CONTRIBUTING.md&#34;&gt;Mars Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Mars is under the MIT license. See the &lt;a href=&#34;https://github.com/Tencent/mars/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;mars_cn&#34;&gt;Mars&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Tencent/mars/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/mars/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-1.2.3-red.svg?sanitize=true&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/mars/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/mars/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Wechat_Approved-1.2.3-red.svg?sanitize=true&#34; alt=&#34;WeChat Approved&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tencent/mars/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform-%20iOS%20%7C%20OS%20X%20%7C%20Android%20-brightgreen.svg?sanitize=true&#34; alt=&#34;WeChat Approved&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mars 是微信官方的跨平台跨业务的终端基础组件。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/WeMobileDev/article/raw/master/assets/mars/mars.png?raw=true&#34; alt=&#34;mars&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;comm：可以独立使用的公共库，包括 socket、线程、消息队列、协程等；&lt;/li&gt; &#xA; &lt;li&gt;xlog：高可靠性高性能的运行期日志组件；&lt;/li&gt; &#xA; &lt;li&gt;SDT： 网络诊断组件；&lt;/li&gt; &#xA; &lt;li&gt;STN： 信令分发网络模块，也是 Mars 最主要的部分。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;sample 的使用请参考&lt;a href=&#34;https://github.com/Tencent/mars/wiki/Mars-sample-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;接入 &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/mars/master/#android_cn&#34;&gt;Android&lt;/a&gt; 或者 &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/mars/master/#apple_cn&#34;&gt;iOS/OS X&lt;/a&gt; 或者 &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/mars/master/#windows_cn&#34;&gt;Windows&lt;/a&gt; 。&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;android_cn&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97&#34;&gt;Android&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;gradle 接入我们提供了两种接入方式：&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/mars/master/#wrapper&#34;&gt;mars-wrapper&lt;/a&gt; 或者 &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/mars/master/#core&#34;&gt;mars-core&lt;/a&gt;。如果你只是想做个 sample 推荐使用 mars-wrapper，可以快速开发；但是如果你想把 mars 用到你的 app 中的话，推荐使用 mars-core，可定制性更高。&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;wrapper&#34;&gt;mars-wrapper&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;在 app/build.gradle 中添加 mars-wrapper 的依赖：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;dependencies {&#xA;    compile &#39;com.tencent.mars:mars-wrapper:1.2.5&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;或者&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;core&#34;&gt;mars-core&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;在 app/build.gradle 中添加 mars-core 的依赖：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;dependencies {&#xA;    compile &#39;com.tencent.mars:mars-core:1.2.5&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;或者&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;&#34;&gt;mars-xlog&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;如果只想使用 xlog,可以只加 xlog 的依赖(mars-core,mars-wrapper 中都已经包括 xlog)：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;dependencies {&#xA;    compile &#39;com.tencent.mars:mars-xlog:1.2.5&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;接着往下操作之前，请先确保你已经添加了 mars-wrapper 或者 mars-core 或者 mars-xlog 的依赖&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;Xlog&#34;&gt;Xlog Init&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;在程序启动加载 Xlog 后紧接着初始化 Xlog。但要注意如果你的程序使用了多进程，不要把多个进程的日志输出到同一个文件中，保证每个进程独享一个日志文件。而且保存 log 的目录请使用单独的目录，不要存放任何其他文件防止被 xlog 自动清理功能误删。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;System.loadLibrary(&#34;c++_shared&#34;);&#xA;System.loadLibrary(&#34;marsxlog&#34;);&#xA;&#xA;final String SDCARD = Environment.getExternalStorageDirectory().getAbsolutePath();&#xA;final String logPath = SDCARD + &#34;/marssample/log&#34;;&#xA;&#xA;// this is necessary, or may crash for SIGBUS&#xA;final String cachePath = this.getFilesDir() + &#34;/xlog&#34;&#xA;&#xA;//init xlog&#xA;Xlog.XLogConfig logConfig = new Xlog.XLogConfig();&#xA;logConfig.mode = Xlog.AppednerModeAsync;&#xA;logConfig.logdir = logPath;&#xA;logConfig.nameprefix = logFileName;&#xA;logConfig.pubkey = &#34;&#34;;&#xA;logConfig.compressmode = Xlog.ZLIB_MODE;&#xA;logConfig.compresslevel = 0;&#xA;logConfig.cachedir = &#34;&#34;;&#xA;logConfig.cachedays = 0;&#xA;if (BuildConfig.DEBUG) {&#xA;    logConfig.level = Xlog.LEVEL_VERBOSE;&#xA;    Xlog.setConsoleLogOpen(true);&#xA;} else {&#xA;    logConfig.level = Xlog.LEVEL_INFO;&#xA;    Xlog.setConsoleLogOpen(false);&#xA;}&#xA;&#xA;Log.setLogImp(new Xlog());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;程序退出时关闭日志：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Log.appenderClose();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;STN&#34;&gt;STN Init&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;如果你是把 mars-core 作为依赖加入到你的项目中的话，你需要显式的初始化和反初始化 STN&lt;/p&gt; &#xA;&lt;p&gt;在使用 STN 之前进行初始化&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// set callback&#xA;AppLogic.setCallBack(stub);&#xA;StnLogic.setCallBack(stub);&#xA;SdtLogic.setCallBack(stub);&#xA;&#xA;// Initialize the Mars PlatformComm&#xA;Mars.init(getApplicationContext(), new Handler(Looper.getMainLooper()));&#xA;&#xA;// Initialize the Mars&#xA;StnLogic.setLonglinkSvrAddr(profile.longLinkHost(), profile.longLinkPorts());&#xA;StnLogic.setShortlinkSvrAddr(profile.shortLinkPort());&#xA;StnLogic.setClientVersion(profile.productID());&#xA;Mars.onCreate(true);&#xA;BaseEvent.onForeground(true);&#xA;&#xA;StnLogic.makesureLongLinkConnected();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;初始化顺序不一定要严格遵守上述代码的顺序，但在初始化时首先要调用 setCallBack 接口 (callback 文件的编写可以参考 demo)，再调用 Mars.init，最后再调用 onForeground 和 makesureLongLinkConnect，中间顺序可以随意更改。&lt;strong&gt;注意：STN 默认是后台，所以初始化 STN 后需要主动调用一次&lt;/strong&gt;&lt;code&gt;BaseEvent.onForeground(true)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;需要释放 STN 或者退出程序时:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Mars.onDestroy();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;even&#34;&gt;Event Change&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;网络切换时:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;BaseEvent.onNetworkChange()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;如果你是把 mars-wrapper 作为依赖加入到你的项目中，你只需要显式的初始化 STN，不需要反初始化(因为 mars-wrapper 会进行反初始化)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MarsServiceProxy.init(this, getMainLooper(),null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;不管你是使用 mars-wrapper 还是 mars-core，你都需要特别注意以下事件：&lt;/p&gt; &#xA;&lt;p&gt;前后台切换:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;BaseEvent.onForeground(boolean);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;应用的账号信息更改:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;StnLogic.reset();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果你想修改 Xlog 的加密算法或者长短连的加解包部分甚至更改组件的其他部分，可以参考&lt;a href=&#34;https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97&#34;&gt;这里&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;apple_cn&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Tencent/mars/wiki/Mars-iOS%EF%BC%8FOS-X-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97&#34;&gt;iOS/OS X&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;编译&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python build_ios.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python build_osx.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;把 mars.framework 作为依赖加入到你的项目中，把mars/libraries/mars_android_sdk/jni 目录的后缀名为 rewriteme 的文件名删掉&#34;.rewriteme&#34;和头文件一起加入到你的项目中。&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;Xlog&#34;&gt;Xlog Init&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;在程序启动加载 Xlog 后紧接着初始化 Xlog。但要注意保存 log 的目录请使用单独的目录，不要存放任何其他文件防止被 xlog 自动清理功能误删。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;NSString* logPath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0] stringByAppendingString:@&#34;/log&#34;];&#xA;&#xA;// set do not backup for logpath&#xA;const char* attrName = &#34;com.apple.MobileBackup&#34;;&#xA;u_int8_t attrValue = 1;&#xA;setxattr([logPath UTF8String], attrName, &amp;amp;attrValue, sizeof(attrValue), 0, 0);&#xA;&#xA;// init xlogger&#xA;#if DEBUG&#xA;xlogger_SetLevel(kLevelDebug);&#xA;appender_set_console_log(true);&#xA;#else&#xA;xlogger_SetLevel(kLevelInfo);&#xA;appender_set_console_log(false);&#xA;#endif&#xA;&#xA;XLogConfig config;&#xA;config.mode_ = kAppenderAsync;&#xA;config.logdir_ = [logPath UTF8String];&#xA;config.nameprefix_ = &#34;Test&#34;;&#xA;config.pub_key_ = &#34;&#34;;&#xA;config.compress_mode_ = kZlib;&#xA;config.compress_level_ = 0;&#xA;config.cachedir_ = &#34;&#34;;&#xA;config.cache_days_ = 0;&#xA;appender_open(config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在函数 &#34;applicationWillTerminate&#34; 中反初始化 Xlog&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;appender_close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;STN&#34;&gt;STN Init&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;在你用 STN 之前初始化：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)setCallBack {&#xA;    mars::stn::SetCallback(mars::stn::StnCallBack::Instance());&#xA;    mars::app::SetCallback(mars::app::AppCallBack::Instance());&#xA;}&#xA;&#xA;- (void) createMars {&#xA;    mars::baseevent::OnCreate();&#xA;}&#xA;&#xA;- (void)setClientVersion:(UInt32)clientVersion {&#xA;    mars::stn::SetClientVersion(clientVersion);&#xA;}&#xA;&#xA;- (void)setShortLinkDebugIP:(NSString *)IP port:(const unsigned short)port {&#xA;    std::string ipAddress([IP UTF8String]);&#xA;    mars::stn::SetShortlinkSvrAddr(port, ipAddress);&#xA;}&#xA;&#xA;- (void)setShortLinkPort:(const unsigned short)port {&#xA;    mars::stn::SetShortlinkSvrAddr(port);&#xA;}&#xA;&#xA;- (void)setLongLinkAddress:(NSString *)string port:(const unsigned short)port debugIP:(NSString *)IP {&#xA;    std::string ipAddress([string UTF8String]);&#xA;    std::string debugIP([IP UTF8String]);&#xA;    std::vector&amp;lt;uint16_t&amp;gt; ports;&#xA;    ports.push_back(port);&#xA;    mars::stn::SetLonglinkSvrAddr(ipAddress,ports,debugIP);&#xA;}&#xA;&#xA;- (void)setLongLinkAddress:(NSString *)string port:(const unsigned short)port {&#xA;    std::string ipAddress([string UTF8String]);&#xA;    std::vector&amp;lt;uint16_t&amp;gt; ports;&#xA;    ports.push_back(port);&#xA;    mars::stn::SetLonglinkSvrAddr(ipAddress,ports);&#xA;}&#xA;&#xA;- (void)reportEvent_OnForeground:(BOOL)isForeground {&#xA;    mars::baseevent::OnForeground(isForground);&#xA;}&#xA;&#xA;- (void)makesureLongLinkConnect {&#xA;    mars::stn::MakesureLonglinkConnected();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;初始化顺序不一定要严格遵守上述代码的顺序，但在初始化时首先要调用 setCallBack 接口 (callback 文件的编写可以参考 demo)，再调用 Mars.init，最后再调用 onForeground 和 makesureLongLinkConnect，中间顺序可以随意更改。&lt;strong&gt;注意：STN 默认是后台，所以初始化 STN 后需要主动调用一次&lt;/strong&gt;&lt;code&gt;BaseEvent.onForeground(true)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;需要释放 STN 或者退出程序时:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)destroyMars {&#xA;    mars::baseevent::OnDestroy();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;even&#34;&gt;Event Change&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;前后台切换时:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)reportEvent_OnForeground:(BOOL)isForeground {&#xA;    mars::baseevent::OnForeground(isForeground);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;网络切换时：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)reportEvent_OnNetworkChange {&#xA;    mars::baseevent::OnNetworkChange();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a name=&#34;windows_cn&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Tencent/mars/wiki/Mars-Windows-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97&#34;&gt;Windows&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;安装Visual Studio 2015&lt;/p&gt; &#xA;&lt;p&gt;编译&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python build_windows.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;把 mars.lib作为依赖加入到你的项目中，把mars/libraries/mars_android_sdk/jni 目录的后缀名为 rewriteme 的文件名删掉&#34;.rewriteme&#34;和头文件一起加入到你的项目中。&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;Xlog&#34;&gt;Xlog Init&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;在程序启动加载 Xlog 后紧接着初始化 Xlog。但要注意保存 log 的目录请使用单独的目录，不要存放任何其他文件防止被 xlog 自动清理功能误删。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::string logPath = &#34;&#34;; //use your log path&#xA;std::string pubKey = &#34;&#34;; //use you pubkey for log encrypt&#xA;&#xA;// init xlog&#xA;#if DEBUG&#xA;xlogger_SetLevel(kLevelDebug);&#xA;appender_set_console_log(true);&#xA;#else&#xA;xlogger_SetLevel(kLevelInfo);&#xA;appender_set_console_log(false);&#xA;#endif&#xA;appender_open(kAppenderAsync, logPath.c_str(), &#34;Test&#34;, 0,  pubKey.c_str());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在程序退出前反初始化 Xlog&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;appender_close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;STN&#34;&gt;STN Init&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;在你用 STN 之前初始化：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void setShortLinkDebugIP(const std::string&amp;amp; _ip, unsigned short _port)&#xA;{&#xA;&#x9;mars::stn::SetShortlinkSvrAddr(_port, _ip);&#xA;}&#xA;void setShortLinkPort(unsigned short _port)&#xA;{&#xA;&#x9;mars::stn::SetShortlinkSvrAddr(_port, &#34;&#34;);&#xA;}&#xA;void setLongLinkAddress(const std::string&amp;amp; _ip, unsigned short _port, const std::string&amp;amp; _debug_ip)&#xA;{&#xA;&#x9;vector&amp;lt;uint16_t&amp;gt; ports;&#xA;&#x9;ports.push_back(_port);&#xA;&#x9;mars::stn::SetLonglinkSvrAddr(_ip, ports, _debug_ip);&#xA;}&#xA;&#xA;void Init()&#xA;{&#xA;&#x9;mars::stn::SetCallback(mars::stn::StnCallBack::Instance());&#xA;&#x9;mars::app::SetCallback(mars::app::AppCallBack::Instance());&#xA;&#x9;mars::baseevent::OnCreate();&#xA;&#xA;&#x9;//todo&#xA;&#x9;//mars::stn::SetClientVersion(version);&#xA;&#x9;//setShortLinkDebugIP(...)&#xA;&#x9;//setLongLinkAddress(...)&#xA;&#xA;&#x9;mars::baseevent::OnForeground(true);&#xA;&#x9;mars::stn::MakesureLonglinkConnected();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;初始化顺序不一定要严格遵守上述代码的顺序，但在初始化时首先要调用 setCallBack 接口 (callback 文件的编写可以参考 demo)，再调用 Mars.init，最后再调用 onForeground 和 makesureLongLinkConnect，中间顺序可以随意更改。&lt;strong&gt;注意：STN 默认是后台，所以初始化 STN 后需要主动调用一次&lt;/strong&gt;&lt;code&gt;BaseEvent.onForeground(true)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;需要释放 STN 或者退出程序时:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;mars::baseevent::OnDestroy();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;还有其他问题？&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;参看 &lt;a href=&#34;https://github.com/Tencent/mars/tree/master/samples&#34;&gt;mars/sample&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;阅读 &lt;a href=&#34;https://github.com/Tencent/mars/tree/master&#34;&gt;源码&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;阅读 &lt;a href=&#34;https://github.com/Tencent/mars/wiki&#34;&gt;wiki&lt;/a&gt; 或者 &lt;a href=&#34;https://github.com/Tencent/mars/wiki/Mars-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;FAQ&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;联系我们。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;关于 Mars 分支管理、issue 以及 pr 规范，请阅读 &lt;a href=&#34;https://github.com/Tencent/mars/raw/master/CONTRIBUTING.md&#34;&gt;Mars Contributing Guide&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Mars 使用的 MIT 协议，详细请参考 &lt;a href=&#34;https://github.com/Tencent/mars/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>weidai11/cryptopp</title>
    <updated>2022-09-05T01:36:20Z</updated>
    <id>tag:github.com,2022-09-05:/weidai11/cryptopp</id>
    <link href="https://github.com/weidai11/cryptopp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;free C++ class library of cryptographic schemes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Crypto++: free C++ Class Library of Cryptographic Schemes Version 8.8 - TBD&lt;/p&gt; &#xA;&lt;p&gt;Crypto++ Library is a free C++ class library of cryptographic schemes. Currently the library contains the following algorithms:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;               algorithm type  name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;authenticated encryption schemes GCM, CCM, EAX, ChaCha20Poly1305 and XChaCha20Poly1305&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    high speed stream ciphers  ChaCha (8/12/20), ChaCha (IETF), Panama, Salsa20,&#xA;                               Sosemanuk, XSalsa20, XChaCha20&#xA;&#xA;       AES and AES candidates  AES (Rijndael), RC6, MARS, Twofish, Serpent,&#xA;                               CAST-256&#xA;&#xA;                               ARIA, Blowfish, Camellia, CHAM, HIGHT, IDEA,&#xA;                               Kalyna (128/256/512), LEA, SEED, RC5, SHACAL-2,&#xA;          other block ciphers  SIMON (64/128), Skipjack, SPECK (64/128),&#xA;                               Simeck, SM4, Threefish (256/512/1024),&#xA;                               Triple-DES (DES-EDE2 and DES-EDE3), TEA, XTEA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;block cipher modes of operation ECB, CBC, CBC ciphertext stealing (CTS), CFB, OFB, counter mode (CTR), XTS&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; message authentication codes  BLAKE2s, BLAKE2b, CMAC, CBC-MAC, DMAC, GMAC, HMAC,&#xA;                               Poly1305, Poly1305 (IETF), SipHash, Two-Track-MAC,&#xA;                               VMAC&#xA;&#xA;                               BLAKE2s, BLAKE2b, Keccack (F1600), LSH (256/512),&#xA;               hash functions  SHA-1, SHA-2 (224/256/384/512), SHA-3 (224/256),&#xA;                               SHA-3 (384/512), SHAKE (128/256), SipHash, SM3, Tiger,&#xA;                               RIPEMD (128/160/256/320), WHIRLPOOL&#xA;&#xA;                               RSA, DSA, Deterministic DSA, ElGamal,&#xA;      public-key cryptography  Nyberg-Rueppel (NR), Rabin-Williams (RW), LUC,&#xA;                               LUCELG, EC-based German Digital Signature (ECGDSA),&#xA;                               DLIES (variants of DHAES), ESIGN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;padding schemes for public-key PKCS#1 v2.0, OAEP, PSS, PSSR, IEEE P1363 systems EMSA2 and EMSA5&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                               Diffie-Hellman (DH), Unified Diffie-Hellman (DH2),&#xA;        key agreement schemes  Menezes-Qu-Vanstone (MQV), Hashed MQV (HMQV),&#xA;                               Fully Hashed MQV (FHMQV), LUCDIF, XTR-DH&#xA;&#xA;  elliptic curve cryptography  ECDSA, Deterministic ECDSA, ed25519, ECNR, ECIES,&#xA;                               ECDH, ECMQV, x25519&#xA;&#xA;      insecure or obsolescent  MD2, MD4, MD5, Panama Hash, DES, ARC4, SEAL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;algorithms retained for backwards 3.0, WAKE-OFB, DESX (DES-XEX3), RC2, compatibility and historical SAFER, 3-WAY, GOST, SHARK, CAST-128, Square value&lt;/p&gt; &#xA;&lt;p&gt;Other features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pseudo random number generators (PRNG): ANSI X9.17 appendix C, RandomPool, DARN, VIA Padlock, RDRAND, RDSEED, NIST Hash and HMAC DRBGs&lt;/li&gt; &#xA; &lt;li&gt;password based key derivation functions: PBKDF1 and PBKDF2 from PKCS #5, PBKDF from PKCS #12 appendix B, HKDF from RFC 5869, Scrypt from RFC 7914&lt;/li&gt; &#xA; &lt;li&gt;Shamir&#39;s secret sharing scheme and Rabin&#39;s information dispersal algorithm (IDA)&lt;/li&gt; &#xA; &lt;li&gt;fast multi-precision integer (bignum) and polynomial operations&lt;/li&gt; &#xA; &lt;li&gt;finite field arithmetics, including GF(p) and GF(2^n)&lt;/li&gt; &#xA; &lt;li&gt;prime number generation and verification&lt;/li&gt; &#xA; &lt;li&gt;useful non-cryptographic algorithms &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DEFLATE (RFC 1951) compression/decompression with gzip (RFC 1952) and zlib (RFC 1950) format support&lt;/li&gt; &#xA;   &lt;li&gt;Hex, base-32, base-64, URL safe base-64 encoding and decoding&lt;/li&gt; &#xA;   &lt;li&gt;32-bit CRC, CRC-C and Adler32 checksum&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;class wrappers for these platform and operating system features (optional): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;high resolution timers on Windows, Unix, and Mac OS&lt;/li&gt; &#xA;   &lt;li&gt;/dev/random, /dev/urandom, /dev/srandom&lt;/li&gt; &#xA;   &lt;li&gt;Microsoft&#39;s CryptGenRandom or BCryptGenRandom on Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A high level interface for most of the above, using a filter/pipeline metaphor&lt;/li&gt; &#xA; &lt;li&gt;benchmarks and validation testing&lt;/li&gt; &#xA; &lt;li&gt;x86, x64 (x86-64), x32 (ILP32), ARM-32, Aarch32, Aarch64 and Power8 in-core code for the commonly used algorithms &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;run-time CPU feature detection and code selection&lt;/li&gt; &#xA;   &lt;li&gt;supports GCC-style and MSVC-style inline assembly, and MASM for x64&lt;/li&gt; &#xA;   &lt;li&gt;x86, x64 (x86-64), x32 provides MMX, SSE2, and SSE4 implementations&lt;/li&gt; &#xA;   &lt;li&gt;ARM-32, Aarch32 and Aarch64 provides NEON, ASIMD and ARMv8 implementations&lt;/li&gt; &#xA;   &lt;li&gt;Power8 provides in-core AES using NX Crypto Acceleration&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Crypto++ library was originally written by Wei Dai. The library is now maintained by several team members and the community. You are welcome to use it for any purpose without paying anyone, but see License.txt for the fine print.&lt;/p&gt; &#xA;&lt;p&gt;The following compilers are supported for this release. Please visit &lt;a href=&#34;http://www.cryptopp.com&#34;&gt;http://www.cryptopp.com&lt;/a&gt; the most up to date build instructions and porting notes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2003 - 2022&lt;/li&gt; &#xA; &lt;li&gt;GCC 3.3 - 12.2&lt;/li&gt; &#xA; &lt;li&gt;Apple Clang 4.3 - 12.0&lt;/li&gt; &#xA; &lt;li&gt;LLVM Clang 2.9 - 14.0&lt;/li&gt; &#xA; &lt;li&gt;C++ Builder 2015&lt;/li&gt; &#xA; &lt;li&gt;Intel C++ Compiler 9 - 16.0&lt;/li&gt; &#xA; &lt;li&gt;Sun Studio 12u1 - 12.7&lt;/li&gt; &#xA; &lt;li&gt;IBM XL C/C++ 10.0 - 14.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Important Usage Notes ***&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If a constructor for A takes a pointer to an object B (except primitive types such as int and char), then A owns B and will delete B at A&#39;s destruction. If a constructor for A takes a reference to an object B, then the caller retains ownership of B and should not destroy it until A no longer needs it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Crypto++ is thread safe at the class level. This means you can use Crypto++ safely in a multithreaded application, but you must provide synchronization when multiple threads access a common Crypto++ object.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*** MSVC-Specific Information ***&lt;/p&gt; &#xA;&lt;p&gt;To compile Crypto++ with MSVC, open &#34;cryptest.sln&#34; (for MSVC 2003 - 2015) and build one or more of the following projects:&lt;/p&gt; &#xA;&lt;p&gt;cryptest Non-DLL-Import Configuration - This builds the full static library along with a full test driver. cryptest DLL-Import Configuration - This builds a static library containing only algorithms not in the DLL, along with a full test driver that uses both the DLL and the static library. cryptdll - This builds the DLL. Please note that if you wish to use Crypto++ as a FIPS validated module, you must use a pre-built DLL that has undergone the FIPS validation process instead of building your own. dlltest - This builds a sample application that only uses the DLL.&lt;/p&gt; &#xA;&lt;p&gt;The DLL used to provide FIPS validated cryptography. The library was moved to the CMVP&#39;s &lt;a href=&#34;http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-historical.htm&#34;&gt;Historical Validation List&lt;/a&gt;. The library and the DLL are no longer considered validated. You should no longer use the DLL.&lt;/p&gt; &#xA;&lt;p&gt;To use the Crypto++ DLL in your application, #include &#34;dll.h&#34; before including any other Crypto++ header files, and place the DLL in the same directory as your .exe file. dll.h includes the line #pragma comment(lib, &#34;cryptopp&#34;) so you don&#39;t have to explicitly list the import library in your project settings. To use a static library form of Crypto++, make the &#34;cryptlib&#34; project a dependency of your application project, or specify it as an additional library to link with in your project settings. In either case you should check the compiler options to make sure that the library and your application are using the same C++ run-time libraries and calling conventions.&lt;/p&gt; &#xA;&lt;p&gt;*** DLL Memory Management ***&lt;/p&gt; &#xA;&lt;p&gt;Because it&#39;s possible for the Crypto++ DLL to delete objects allocated by the calling application, they must use the same C++ memory heap. Three methods are provided to achieve this.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The calling application can tell Crypto++ what heap to use. This method is required when the calling application uses a non-standard heap.&lt;/li&gt; &#xA; &lt;li&gt;Crypto++ can tell the calling application what heap to use. This method is required when the calling application uses a statically linked C++ Run Time Library. (Method 1 does not work in this case because the Crypto++ DLL is initialized before the calling application&#39;s heap is initialized.)&lt;/li&gt; &#xA; &lt;li&gt;Crypto++ can automatically use the heap provided by the calling application&#39;s dynamically linked C++ Run Time Library. The calling application must make sure that the dynamically linked C++ Run Time Library is initialized before Crypto++ is loaded. (At this time it is not clear if it is possible to control the order in which DLLs are initialized on Windows 9x machines, so it might be best to avoid using this method.)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When Crypto++ attaches to a new process, it searches all modules loaded into the process space for exported functions &#34;GetNewAndDeleteForCryptoPP&#34; and &#34;SetNewAndDeleteFromCryptoPP&#34;. If one of these functions is found, Crypto++ uses methods 1 or 2, respectively, by calling the function. Otherwise, method 3 is used.&lt;/p&gt; &#xA;&lt;p&gt;*** Linux and Unix-like Specific Information ***&lt;/p&gt; &#xA;&lt;p&gt;A makefile is included for you to compile Crypto++ with GCC and compatibles. Make sure you are using GNU Make and GNU ld. The make process will produce two files, libcryptopp.a and cryptest.exe. Run &#34;cryptest.exe v&#34; for the validation suite and &#34;cryptest.exe tv all&#34; for additional test vectors.&lt;/p&gt; &#xA;&lt;p&gt;The makefile uses &#39;-DNDEBUG -g2 -O2&#39; CXXFLAGS by default. If you use an alternate build system, like Autotools or CMake, then ensure the build system includes &#39;-DNDEBUG&#39; for production or release builds. The Crypto++ library uses asserts for debugging and diagnostics during development; it does not rely on them to crash a program at runtime.&lt;/p&gt; &#xA;&lt;p&gt;If an assert triggers in production software, then unprotected sensitive information could be egressed from the program to the filesystem or the platform&#39;s error reporting program, like Apport on Ubuntu or CrashReporter on Apple.&lt;/p&gt; &#xA;&lt;p&gt;The makefile orders object files to help remediate problems associated with C++ static initialization order. The library does not use custom linker scripts. If you use an alternate build system, like Autotools or CMake, and collect source files into a list, then ensure these three are at the head of the list: &#39;cryptlib.cpp cpu.cpp integer.cpp &#xA; &lt;other sources&gt;&#xA;  &#39;. They should be linked in the same order: &#39;cryptlib.o cpu.o integer.o &#xA;  &lt;other objects&gt;&#xA;   &#39;.&#xA;  &lt;/other&gt;&#xA; &lt;/other&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your linker supports initialization attributes, like init_priority, then you can define CRYPTOPP_INIT_PRIORITY to control object initialization order. Set it to a value like 250. User programs can use CRYPTOPP_USER_PRIORITY to avoid conflicts with library values. Initialization attributes are more reliable than object file ordering, but its not ubiquitously supported by linkers.&lt;/p&gt; &#xA;&lt;p&gt;The makefile links to the static version of the Crypto++ library to avoid binary planting and other LD_PRELOAD tricks. You should use the static version of the library in your programs to help avoid unwanted redirections.&lt;/p&gt; &#xA;&lt;p&gt;*** Side Channel Attacks ***&lt;/p&gt; &#xA;&lt;p&gt;Crypto++ attempts to resist side channel attacks using various remediations. The remdiations are applied as a best effort but are probably incomplete. They are incomplete due to cpu speculation bugs like Spectre, Meltdown, Foreshadow. The attacks target both cpu caches and internal buffers. Intel generally refers to internal buffer attacks as &#34;Microarchitectural Data Sampling&#34; (MDS).&lt;/p&gt; &#xA;&lt;p&gt;The library uses hardware instructions when possible for block ciphers, hashes and other operations. The hardware acceleration remediates some timing attacks. The library also uses cache-aware algorithms and access patterns to minimize leakage cache evictions.&lt;/p&gt; &#xA;&lt;p&gt;Elliptic curves over binary fields are believed to leak information. The task is a work in progress. We don&#39;t believe binary fields are used in production, so we feel it is a low risk at the moment.&lt;/p&gt; &#xA;&lt;p&gt;Crypto++ does not engage Specter remediations at this time. The GCC options for Specter are -mfunction-return=thunk and -mindirect-branch=thunk, and the library uses them during testing. If you want the Specter workarounds then add the GCC options to your CXXFLAGS when building the library.&lt;/p&gt; &#xA;&lt;p&gt;To help resist attacks you should disable hyperthreading on cpus. If you suspect or find an information leak then please report it.&lt;/p&gt; &#xA;&lt;p&gt;*** Documentation and Support ***&lt;/p&gt; &#xA;&lt;p&gt;Crypto++ is documented through inline comments in header files, which are processed through Doxygen to produce an HTML reference manual. You can find a link to the manual from &lt;a href=&#34;http://www.cryptopp.com&#34;&gt;http://www.cryptopp.com&lt;/a&gt;. Also at that site is the Crypto++ FAQ, which you should browse through before attempting to use this library, because it will likely answer many of questions that may come up. Finally, the site provide the wiki which has many topics and code examples.&lt;/p&gt; &#xA;&lt;p&gt;If you run into any problems, please try the Crypto++ mailing list. The subscription information and the list archive are available on &lt;a href=&#34;http://www.cryptopp.com&#34;&gt;http://www.cryptopp.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;*** Source Code and Contributing ***&lt;/p&gt; &#xA;&lt;p&gt;The source code and its planned changes are available at the following locations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Crypto++ GitHub repository allows you to view the latest (unreleased) Crypto++ source code via the Linux kernel&#39;s git beginning around June 2015. Its also serves as an incubator to nurture and grow the library.&lt;/li&gt; &#xA; &lt;li&gt;The former Crypto++ SourceForge repository allows you to view the Crypto++ source code via Apache&#39;s subversion until about July 2015. At that time, SourceForge had infrastructure problems and a cutover to GutHub was performed.&lt;/li&gt; &#xA; &lt;li&gt;The Roadmap on the wiki provides the general direction the library is heading. It includes planned features and releases, and even some wishlist items.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contributions of all types are welcomed. Contributions include the following.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bug finding and fixes&lt;/li&gt; &#xA; &lt;li&gt;Features and enhancements&lt;/li&gt; &#xA; &lt;li&gt;Test scripts and test cases&lt;/li&gt; &#xA; &lt;li&gt;Branch and release testing&lt;/li&gt; &#xA; &lt;li&gt;Documentation and updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you think you have found a bug in the library, then you should discuss it on the Users mailing list. Discussing it will help bring the issue to the attention of folks who can help resolve the issue. If you want to contribute a bug fix to the library, then make a Pull Request or make a Diff available somewhere. Also see Bug Reports on the wiki.&lt;/p&gt; &#xA;&lt;p&gt;Features and enhancements are welcomend additions to the library. This category tends to be time consuming because algorithms and their test cases need to be reviewed and merged. Please be mindful of the test cases, and attempt to procure them from an independent source.&lt;/p&gt; &#xA;&lt;p&gt;The library cherishes test scripts and test cases. They ensure the library is fit and they help uncover issues with the library before users experience them. If you have some time, then write some test cases, especially the ones that are intended to break things.&lt;/p&gt; &#xA;&lt;p&gt;Branch and release testing is your chance to ensure Master (and planned merges) meets your expectations and perform as expected. If you have a few spare cycles, then please test Master on your favorite platform. We need more testing on MinGW, Windows Phone, Windows Store, Solaris 10 (and below), and modern iOS and OS X (including TV and Watch builds).&lt;/p&gt; &#xA;&lt;p&gt;Documentation and updates includes both the inline source code annotations using Doxygen, and the online information provided in the wiki. The wiki is more verbose and usually provides more contextual information than the API reference. Besides testing, documentation is one of the highest returns on investment.&lt;/p&gt; &#xA;&lt;p&gt;*** History ***&lt;/p&gt; &#xA;&lt;p&gt;The items in this section comprise the most recent history. Please see History.txt for the record back to Crypto++ 1.0.&lt;/p&gt; &#xA;&lt;p&gt;8.7.0 - August 7, 2022 - minor release, recompile of programs required - expanded community input and support * 81 unique contributors as of this release - fix RSA key generation for small moduli - fix AES-GCM with AESNI but without CLMUL - fix Clang warning with C++17 - fix MinGW builds due to use of O_NOFOLLOW - rework CFB_CipherTemplate::ProcessData and AdditiveCipherTemplate::ProcessData * restored performance and avoided performance penalty of a temp buffer - fix undersized SecBlock buffer in Integer bit operations - work around several GCC 11 &amp;amp; 12 problems&lt;/p&gt; &#xA;&lt;p&gt;8.6.0 - September 21, 2021 - minor release, recompile of programs required - expanded community input and support * 74 unique contributors as of this release - fix ElGamal encryption - fix ChaCha20 AVX2 implementation - add octal and decimal literal prefix parsing to Integer - add missing overload in ed25519Signer and ed25519Verifier - make SHA-NI independent of AVX and AVX2 - fix OldRandomPool GenerateWord32 - use CPPFLAGS during feature testing - fix compile on CentOS 5 - fix compile on FreeBSD - fix feature testing on ARM A-32 and Aarch64 - enable inline ASM for CRC and PMULL on Apple M1 - fix Intel oneAPI compile - rename test files with *.cpp extension - fix GCC compile error due to missing _mm256_set_m128i - add LSH-256 and LSH-512 hash functions - add ECIES_P1363 for backwards compatibility - fix AdditiveCipherTemplate&#xA; &lt;t&gt;&#xA;   ProcessData - remove CRYPTOPP_NO_CXX11 define - add -fno-common for Darwin builds - update documentation&#xA; &lt;/t&gt;&lt;/p&gt; &#xA;&lt;p&gt;8.5.0 - March 7, 2021 - minor release, no recompile of programs required - expanded community input and support * 70 unique contributors as of this release - port to Apple M1 hardware&lt;/p&gt; &#xA;&lt;p&gt;8.4.0 - January 2, 2021 - minor release, recompile of programs required - expanded community input and support * 67 unique contributors as of this release - fix SIGILL on POWER8 when compiling with GCC 10 - fix potential out-of-bounds write in FixedSizeAllocatorWithCleanup - fix compile on AIX POWER7 with IBM XLC 12.01 - fix compile on Solaris with SunCC 12.6 - revert changes for constant-time elliptic curve algorithms - fix makefile clean and distclean recipes&lt;/p&gt; &#xA;&lt;p&gt;8.3.0 - December 20, 2020 - minor release, recompile of programs required - expanded community input and support * 66 unique contributors as of this release - fix use of macro CRYPTOPP_ALIGN_DATA - fix potential out-of-bounds read in ECDSA - fix std::bad_alloc when using ByteQueue in pipeline - fix missing CRYPTOPP_CXX17_EXCEPTIONS with Clang - fix potential out-of-bounds read in GCM mode - add configure.sh when preprocessor macros fail - fix potential out-of-bounds read in SipHash - fix compile error on POWER9 due to vec_xl_be - fix K233 curve on POWER8 - add Cirrus CI testing - fix broken encryption for some 64-bit ciphers - fix Android cpu-features.c using C++ compiler - disable RDRAND and RDSEED for some AMD processors - fix BLAKE2 hash calculation using Salt and Personalization - refresh Android and iOS build scripts - add XTS mode - fix circular dependency between misc.h and secblock.h - add Certificate interface - fix recursion in AES::Encryption without AESNI - add missing OID for ElGamal encryption - fix missing override in KeyDerivationFunction-derived classes - fix RDSEED assemble under MSVC - fix elliptic curve timing leaks (CVE-2019-14318) - add link-library variable to Makefiles - fix SIZE_MAX definition in misc.h - add GetWord64 and PutWord64 to BufferedTransformation - use HKDF in AutoSeededX917RNG::Reseed - fix Asan finding in VMAC on i686 in inline asm - fix undeclared identifier _mm_roti_epi64 on Gentoo - fix ECIES and GetSymmetricKeyLength - fix possible divide by zero in PKCS5_PBKDF2_HMAC - refine ASN.1 encoders and decoders - disable BMI2 code paths in Integer class - fix use of CRYPTOPP_CLANG_VERSION - add NEON SHA1, SHA256 and SHA512 from Cryptogams - add ARM SHA1, SHA256 and SHA512 from Cryptogams - make config.h more autoconf friendly - handle Clang triplet armv8l-unknown-linux-gnueabihf - fix reference binding to misaligned address in xed25519 - clear asserts in TestDataNameValuePairs&lt;/p&gt; &#xA;&lt;p&gt;8.2.0 - April 28, 2019 - minor release, no recompile of programs required - expanded community input and support * 56 unique contributors as of this release - use PowerPC unaligned loads and stores with Power8 - add SKIPJACK test vectors - fix SHAKE-128 and SHAKE-256 compile - removed IS_NEON from Makefile - fix Aarch64 build on Fedora 29 - fix missing GF2NT_233_Multiply_Reduce_CLMUL in FIPS DLL - add missing BLAKE2 constructors - fix missing BlockSize() in BLAKE2 classes&lt;/p&gt; &#xA;&lt;p&gt;8.1.0 - February 22, 2019 - minor release, no recompile of programs required - expanded community input and support * 56 unique contributors as of this release - fix OS X PowerPC builds with Clang - add Microsoft ARM64 support - fix iPhone Simulator build due to missing symbols - add CRYPTOPP_BUGGY_SIMD_LOAD_AND_STORE - add carryless multiplies for NIST b233 and k233 curves - fix OpenMP build due to use of OpenMP 4 with down-level compilers - add SignStream and VerifyStream for ed25519 and large files - fix missing AlgorithmProvider in PanamaHash - add SHAKE-128 and SHAKE-256 - fix AVX2 build due to _mm256_broadcastsi128_si256 - add IETF ChaCha, XChaCha, ChaChaPoly1305 and XChaChaPoly1305&lt;/p&gt; &#xA;&lt;p&gt;8.0.0 - December 28, 2018 - major release, recompile of programs required - expanded community input and support * 54 unique contributors as of this release - add x25519 key exchange and ed25519 signature scheme - add limited Asymmetric Key Package support from RFC 5958 - add Power9 DARN random number generator support - add CHAM, HC-128, HC-256, Hight, LEA, Rabbit, Simeck - fix FixedSizeAllocatorWithCleanup may be unaligned on some platforms - cutover to GNU Make-based cpu feature tests - rename files with dashes to underscores - fix LegacyDecryptor and LegacyDecryptorWithMAC use wrong MAC - fix incorrect AES/CBC decryption on Windows - avoid Singleton&#xA; &lt;t&gt;&#xA;   when possible, avoid std::call_once completely - fix SPARC alignment problems due to GetAlignmentOf&#xA;  &lt;t&gt;&#xA;   () on word64 - add ARM AES asm implementation from Cryptogams - remove CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS support&#xA;  &lt;/t&gt;&#xA; &lt;/t&gt;&lt;/p&gt; &#xA;&lt;p&gt;June 2015 - Changing of the guard. Wei Dai turned the library over to the community. The first community release was Crypto++ 5.6.3. Wei is no longer involved with the daily operations of the project. Wei still provides guidance when we have questions.&lt;/p&gt; &#xA;&lt;p&gt;Originally written by Wei Dai, maintained by the Crypto++ Project&lt;/p&gt;</summary>
  </entry>
</feed>