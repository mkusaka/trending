<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-23T01:31:07Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Xacone/BestEdrOfTheMarket</title>
    <updated>2023-11-23T01:31:07Z</updated>
    <id>tag:github.com,2023-11-23:/Xacone/BestEdrOfTheMarket</id>
    <link href="https://github.com/Xacone/BestEdrOfTheMarket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Little AV/EDR bypassing lab for training &amp; learning purposes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://xacone.github.io/BestEdrOfTheMarket.html&#34;&gt; Best EDR Of The Market (BEOTM) üê≤ &lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;i&gt;Little AV/EDR Evasion Lab for training &amp;amp; learning purposes.&lt;/i&gt; (üèóÔ∏è under construction..)‚Äã&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ____            _     _____ ____  ____     ___   __   _____ _&#xA;| __ )  ___  ___| |_  | ____|  _ \|  _ \   / _ \ / _| |_   _| |__   ___&#xA;|  _ \ / _ \/ __| __| |  _| | | | | |_) | | | | | |_    | | | &#39;_ \ / _ \&#xA;| |_) |  __/\__ \ |_  | |___| |_| |  _ &amp;lt;  | |_| |  _|   | | | | | |  __/&#xA;|____/_\___||___/\__| |_____|____/|_| \_\  \___/|_|     |_| |_| |_|\___|&#xA;|  \/  | __ _ _ __| | _____| |_&#xA;| |\/| |/ _` | &#39;__| |/ / _ \ __|&#xA;| |  | | (_| | |  |   &amp;lt;  __/ |_           Yazidou - github.com/Xacone&#xA;|_|  |_|\__,_|_|  |_|\_\___|\__|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;br&gt;BestEDROfTheMarket is a naive user-mode EDR (Endpoint Detection and Response) project, designed to serve as a testing ground for understanding and bypassing EDR&#39;s user-mode detection methods that are frequently used by these security solutions. &lt;br&gt;These techniques are mainly based on a dynamic analysis of the target process state (memory, API calls, etc.),&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xacone.github.io/BestEdrOfTheMarket.html&#34;&gt;Feel free to check this short article I wrote that describe the interception and analysis methods implemented by the EDR.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Defensive Techniques ‚öîÔ∏è‚Äã&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; Multi-Levels API Hooking &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; SSN Hooking/Crushing &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; IAT Hooking &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; Shellcode Injection Detection &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; Reflective Module Loading Detection&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; Call Stack Monitoring &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;i&gt;In progress&lt;/i&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; Heap Monitoring &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; ROP Mitigation &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; AMSI Patching Mitigation &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/#&#34;&gt; ETW Patching Mitigation &lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;!--&lt;a href=&#34;#&#34;&gt; Performance brief &lt;/a&gt; &lt;br&gt;--&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/Assets/beotmgif1.gif&#34;&gt; &#xA;&lt;h2&gt;Usage üìú&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;        Usage: BestEdrOfTheMarket.exe [args]&#xA;&#xA;                 /help Shows this help message and quit&#xA;                 /v Verbosity                 &#xA;                 /iat IAT hooking&#xA;                 /stack Threads call stack monitoring&#xA;                 /nt Inline Nt-level hooking&#xA;                 /k32 Inline Kernel32/Kernelbase hooking&#xA;                 /ssn SSN crushing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;BestEdrOfTheMarket.exe /stack /v /k32&#xA;BestEdrOfTheMarket.exe /stack /nt&#xA;BestEdrOfTheMarket.exe /iat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Structure &amp;amp; Config files ‚öôÔ∏è&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;üìÅ BestEdrOfTheMarket/&#xA;    üìÑ BestEdrOfTheMarket.exe&#xA;    üìÅ DLLs/&#xA;        üìÑ Kernel32.dll&#xA;        üìÑ ntdll.dll&#xA;        üìÑ iat.dll&#xA;    üìù TrigerringFunctions.json&#xA;    üìù YaroRules.json&#xA;    üìÑ jsoncpp.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;YaroRules.json: &lt;/b&gt;Contains a json array filled with the patterns you would like to be identified while monitoring threads call stacks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;Patterns&#34;: [&#xA;&#x9;&#x9;&#34;d2 65 48 8b 52 60 48 8b 52 18 48 8b 52 20 48 8b 72 50 48&#34;,&#xA;&#x9;&#x9;&#34;49 be 77 73 32 5f 33 32 00 00&#34;,&#xA;                &#34;...&#34;&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;TrigerringFunctions.json: &lt;/b&gt;Describes the functions that are already hooked or/and to hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;DLLBasedHooking&#34;: {&#xA;    &#34;NTDLL.dll&#34;: [&#xA;      &#34;NtAllocateVirtualMemory&#34;,&#xA;      &#34;...&#34;&#xA;    ],&#xA;    &#34;KERNELBASE.dll&#34;: [&#xA;      &#34;VirtualAlloc&#34;&#xA;      &#34;...&#34;&#xA;    ],&#xA;    &#34;KERNEL32.dll&#34;: [&#xA;      &#34;VirtualAlloc&#34;&#xA;      &#34;...&#34;&#xA;    ]&#xA;  },&#xA;  &#34;StackBasedHooking&#34;: {&#xA;    &#34;Functions&#34;: [&#xA;      &#34;NtCreateUserProcess&#34;,&#xA;      &#34;...&#34;&#xA;    ]&#xA;  },&#xA;  &#34;SSNCrushingRoutines&#34;: {&#xA;    &#34;Functions&#34;: [&#xA;      &#34;NtCreateSection&#34;&#xA;      &#34;...&#34;&#xA;    ]&#xA;  },&#xA;  &#34;IATHooking&#34;: {&#xA;    &#34;Functions&#34;: [&#xA;      &#34;VirtualAlloc&#34;,&#xA;      &#34;...&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;b&gt;DLLBasedHooking&lt;/b&gt;: Not modifiable üö´‚Äã‚Äã, changing its values will have absolutely no effect at all. Information purposes only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;StackBasedHooking&lt;/b&gt;: Modifiable ‚úÖ, the functions you specify here will be monitored and their call will trigger an analysis of the calling thread&#39;s call stack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;SSNCrushingRoutines&lt;/b&gt;: Modifiable ‚úÖ, the NT-level routines you will specify here will be attributed a corrupted SSN, Be careful of specifying NT-Level routines ONLY !&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;IATHooking&lt;/b&gt;: Modifiable ‚úÖ, the functions you specify here will be hooked at IAT level&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t compile your own DLLs, take a look at the functions already hooked into the DLLs provided &lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/DLLs/&#34;&gt;in sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/Xacone/BestEdrOfTheMarket/releases/tag/Beta&#34;&gt;Releases&lt;/a&gt; üì¶&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xacone/BestEdrOfTheMarket/main/Docs/Setup.md&#34;&gt; Project Setup üõ†Ô∏è‚Äã &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Disclaimer ‚ö†Ô∏è‚Äã&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don&#39;t link the EDR to programs that are too CPU-intensive/thread-creating, as some detection techniques such as call stack analysis constantly monitor the stack state of each thread and this can quickly increase the load on the EDR, it&#39;s more relevant (that&#39;s also the point) that you link the tool to your own artifacts and keep in mind that a good evasive artifact tries to be as discrete as possible.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>official-pikafish/Pikafish</title>
    <updated>2023-11-23T01:31:07Z</updated>
    <id>tag:github.com,2023-11-23:/official-pikafish/Pikafish</id>
    <link href="https://github.com/official-pikafish/Pikafish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UCI xiangqi engine&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pikafish.org&#34;&gt;&lt;img src=&#34;https://pikafish.org/assets/logo_256.png&#34; alt=&#34;Pikafish&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h3&gt;Pikafish&lt;/h3&gt; &#xA; &lt;p&gt;A free and strong UCI xiangqi engine. &lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/official-pikafish/Pikafish/wiki&#34;&gt;Explore Pikafish docs ¬ª&lt;/a&gt;&lt;/strong&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/official-pikafish/Pikafish/issues/new?assignees=&amp;amp;labels=&amp;amp;template=BUG-REPORT.yml&#34;&gt;Report bug&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/official-pikafish/Pikafish/discussions/new&#34;&gt;Open a discussion&lt;/a&gt; ¬∑ &lt;a href=&#34;https://discord.com/invite/uSb3RXb7cY&#34;&gt;Discord&lt;/a&gt; ¬∑ &lt;a href=&#34;https://pikafish.org/&#34;&gt;Blog&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/official-pikafish/Pikafish/actions/workflows/pikafish.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/official-pikafish/Pikafish/pikafish.yml?branch=master&amp;amp;style=for-the-badge&amp;amp;label=pikafish&amp;amp;logo=github&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/official-pikafish/Pikafish/raw/master/Copying.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/official-pikafish/Pikafish?style=for-the-badge&amp;amp;label=license&amp;amp;color=success&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/official-pikafish/Pikafish/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/official-pikafish/Pikafish?style=for-the-badge&amp;amp;label=official%20release&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/official-pikafish/Pikafish/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commits-since/official-pikafish/Pikafish/latest?style=for-the-badge&#34; alt=&#34;Commits&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://pikafish.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?style=for-the-badge&amp;amp;down_color=red&amp;amp;down_message=Offline&amp;amp;label=website&amp;amp;up_color=success&amp;amp;up_message=Online&amp;amp;url=https://pikafish.org&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://test.pikafish.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?style=for-the-badge&amp;amp;down_color=red&amp;amp;down_message=Offline&amp;amp;label=Fishtest&amp;amp;up_color=success&amp;amp;up_message=Online&amp;amp;url=https://test.pikafish.org&#34; alt=&#34;Fishtest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/uSb3RXb7cY&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1013130558089478144?style=for-the-badge&amp;amp;label=discord&amp;amp;logo=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pikafish.org&#34;&gt;Pikafish&lt;/a&gt; is a &lt;strong&gt;free and strong UCI xiangqi engine&lt;/strong&gt; derived from &lt;a href=&#34;https://github.com/official-stockfish/Stockfish&#34;&gt;Stockfish&lt;/a&gt; that analyzes xiangqi positions and computes the optimal moves.&lt;/p&gt; &#xA;&lt;p&gt;Pikafish &lt;strong&gt;does not include a graphical user interface&lt;/strong&gt; (GUI) that is required to display a chessboard and to make it easy to input moves. These GUIs are developed independently from Pikafish and are available online. &lt;strong&gt;Read the documentation for your GUI&lt;/strong&gt; of choice for information about how to use Pikafish with it.&lt;/p&gt; &#xA;&lt;p&gt;See also the Pikafish &lt;a href=&#34;https://github.com/official-pikafish/Pikafish/wiki/Download-and-usage&#34;&gt;documentation&lt;/a&gt; for further usage help.&lt;/p&gt; &#xA;&lt;h2&gt;Files&lt;/h2&gt; &#xA;&lt;p&gt;This distribution of Pikafish consists of the following files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/official-pikafish/Pikafish/raw/master/README.md&#34;&gt;README.md&lt;/a&gt;, the file you are currently reading.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/official-pikafish/Pikafish/raw/master/Copying.txt&#34;&gt;Copying.txt&lt;/a&gt;, a text file containing the GNU General Public License version 3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/official-pikafish/Pikafish/raw/master/AUTHORS&#34;&gt;AUTHORS&lt;/a&gt;, a text file with the list of authors for the official Pikafish project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/official-pikafish/Pikafish/tree/master/src&#34;&gt;src&lt;/a&gt;, a subdirectory containing the full source code, including a Makefile that can be used to compile Pikafish on Unix-like systems.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;a file with the .nnue extension, storing the neural network for the NNUE evaluation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/official-pikafish/Pikafish/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Donating hardware&lt;/h3&gt; &#xA;&lt;p&gt;Improving Pikafish requires a massive amount of testing. You can donate your hardware resources by installing the &lt;a href=&#34;https://github.com/xyztnecniV/yolo&#34;&gt;Fishtest Worker&lt;/a&gt; and viewing the current tests on &lt;a href=&#34;https://test.pikafish.org&#34;&gt;Fishtest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Improving the code&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://www.chessprogramming.org/Main_Page&#34;&gt;chessprogramming wiki&lt;/a&gt;, many techniques used in Pikafish are explained with a lot of background information. The &lt;a href=&#34;https://www.chessprogramming.org/Stockfish&#34;&gt;section on Stockfish&lt;/a&gt; describes many features and techniques used by Stockfish. However, it is generic rather than focused on Stockfish&#39;s precise implementation.&lt;/p&gt; &#xA;&lt;p&gt;The engine testing is done on &lt;a href=&#34;https://test.pikafish.org&#34;&gt;Fishtest&lt;/a&gt;. If you want to help improve Pikafish, please read this &lt;a href=&#34;https://github.com/glinscott/fishtest/wiki/Creating-my-first-test&#34;&gt;guideline&lt;/a&gt; first, where the basics of Pikafish development are explained.&lt;/p&gt; &#xA;&lt;p&gt;Discussions about Pikafish take place these days mainly in the Pikafish &lt;a href=&#34;https://discord.com/invite/uSb3RXb7cY&#34;&gt;Discord server&lt;/a&gt;. This is also the best place to ask questions about the codebase and how to improve it.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling Pikafish&lt;/h2&gt; &#xA;&lt;p&gt;Pikafish has support for 32 or 64-bit CPUs, certain hardware instructions, big-endian machines such as Power PC, and other platforms.&lt;/p&gt; &#xA;&lt;p&gt;On Unix-like systems, it should be easy to compile Pikafish directly from the source code with the included Makefile in the folder &lt;code&gt;src&lt;/code&gt;. In general, it is recommended to run &lt;code&gt;make help&lt;/code&gt; to see a list of make targets with corresponding descriptions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src&#xA;make -j build ARCH=x86-64-modern&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detailed compilation instructions for all platforms can be found in our &lt;a href=&#34;https://github.com/official-pikafish/Pikafish/wiki/Compiling-from-source&#34;&gt;documentation&lt;/a&gt;. the [UCI commands][wiki-uci-link] supported by Pikafish.&lt;/p&gt; &#xA;&lt;h2&gt;Terms of use&lt;/h2&gt; &#xA;&lt;h3&gt;GNU General Public License version 3&lt;/h3&gt; &#xA;&lt;p&gt;Pikafish is free and distributed under the &lt;a href=&#34;https://github.com/official-pikafish/Pikafish/raw/master/Copying.txt&#34;&gt;&lt;strong&gt;GNU General Public License version 3&lt;/strong&gt;&lt;/a&gt; (GPL v3). Essentially, this means you are free to do almost exactly what you want with the program, including distributing it among your friends, making it available for download from your website, selling it (either by itself or as part of some bigger software package), or using it as the starting point for a software project of your own.&lt;/p&gt; &#xA;&lt;p&gt;The only real limitation is that whenever you distribute Pikafish in some way, you MUST always include the license and the full source code (or a pointer to where the source code can be found) to generate the exact binary you are distributing. If you make any changes to the source code, these changes must also be made available under GPL v3.&lt;/p&gt;</summary>
  </entry>
</feed>