<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-04T01:34:37Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TuGraph-db/tugraph-db</title>
    <updated>2022-09-04T01:34:37Z</updated>
    <id>tag:github.com,2022-09-04:/TuGraph-db/tugraph-db</id>
    <link href="https://github.com/TuGraph-db/tugraph-db" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TuGraph&lt;/h1&gt; &#xA;&lt;h2&gt;0. Introduction&lt;/h2&gt; &#xA;&lt;p&gt;TuGraph is an efficient graph database that supports high data volume, low latency lookup and fast graph analytics.&lt;/p&gt; &#xA;&lt;p&gt;Functionalities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Labeled property graph model&lt;/li&gt; &#xA; &lt;li&gt;Full ACID support with serializable transactions&lt;/li&gt; &#xA; &lt;li&gt;Graph analytics algorithms embedded with graph computing framework&lt;/li&gt; &#xA; &lt;li&gt;OpenCypher query language&lt;/li&gt; &#xA; &lt;li&gt;Primary / Secondary Index in vertex and edge&lt;/li&gt; &#xA; &lt;li&gt;Fulltext Index support&lt;/li&gt; &#xA; &lt;li&gt;Graph visualization with web&lt;/li&gt; &#xA; &lt;li&gt;Java / Python / C++ client available&lt;/li&gt; &#xA; &lt;li&gt;RESTful and RPC API support&lt;/li&gt; &#xA; &lt;li&gt;Stored procedure with C++/Python API&lt;/li&gt; &#xA; &lt;li&gt;Efficient development of new graph algorithms with Traversal API&lt;/li&gt; &#xA; &lt;li&gt;Multi-graph support&lt;/li&gt; &#xA; &lt;li&gt;Online / offline backup / restore&lt;/li&gt; &#xA; &lt;li&gt;Various Data source support, including csv / json / MySQL / Hive, etc (integrated DataX)&lt;/li&gt; &#xA; &lt;li&gt;Monitor System (integrated Prometheus and Grafana)&lt;/li&gt; &#xA; &lt;li&gt;Job Management System&lt;/li&gt; &#xA; &lt;li&gt;Unit Test and Integration Test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Performance and scalability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports up to tens of terabytes&lt;/li&gt; &#xA; &lt;li&gt;Visit millions of vertices per second&lt;/li&gt; &#xA; &lt;li&gt;Fast bulk import&lt;/li&gt; &#xA; &lt;li&gt;LDBC SNB world record holder (2022/9/1 &lt;a href=&#34;https://ldbcouncil.org/benchmarks/snb/&#34;&gt;https://ldbcouncil.org/benchmarks/snb/&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1. Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;A easy way to start is using docker to set up, which can be found in DockerHub, named &lt;code&gt;tugraph/tugraph-db-[os]:[tugraph version]&lt;/code&gt;, for example, &lt;code&gt;tugraph/tugraph-db-centos7:3.3.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more detail, please refer [doc-zh/1.guide/3.quick-start.md]&lt;/p&gt; &#xA;&lt;h2&gt;2. Install&lt;/h2&gt; &#xA;&lt;h3&gt;2.1 Compile the project with GCC on UNIX:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;deps/build_deps.sh&lt;/code&gt; or &lt;code&gt;SKIP_WEB=1 deps/build_deps.sh&lt;/code&gt; to skip building web interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake .. -DOURSYSTEM=centos&lt;/code&gt; or &lt;code&gt;cmake .. -DOURSYSTEM=ubuntu&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If support shell lgraph_cypher, use &lt;code&gt;-DENABLE_PREDOWNLOAD_DEPENDS_PACKAGE=1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make package&lt;/code&gt; or &lt;code&gt;cpack --config CPackConfig.cmake&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;2.2 Compile the project with Clang on macOS:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;deps/build_deps.sh&lt;/code&gt; or &lt;code&gt;SKIP_WEB=1 deps/build_deps.sh&lt;/code&gt; to skip building web interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;2.3 Release Version:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use gcc-5.4.0 or gcc-7.5.0&lt;/li&gt; &#xA; &lt;li&gt;Use CMAKE_BUILD_TYPE &lt;code&gt;Release&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check the package&#39;s directory tree (especially &lt;code&gt;include&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Make sure the front-end updated&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;3. Develop&lt;/h2&gt; &#xA;&lt;p&gt;We have prepared environment docker images for compiling in DockerHub, named &lt;code&gt;tugraph/tugraph-env-[os]:[env version]&lt;/code&gt;, for example, &lt;code&gt;tugraph/tugraph-env-centos7:1.1.0&lt;/code&gt;, which can help developer hand on easily.&lt;/p&gt; &#xA;&lt;p&gt;For more detail, please refer docs in [doc-zh]&lt;/p&gt; &#xA;&lt;h2&gt;4. Contact&lt;/h2&gt; &#xA;&lt;p&gt;Email: &lt;a href=&#34;mailto:tugraph@service.alipay.com&#34;&gt;tugraph@service.alipay.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DingTalk Group:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TuGraph-db/tugraph-db/master/doc/images/dingtalk.png&#34; alt=&#34;alert&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;WeChat Official Accounts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TuGraph-db/tugraph-db/master/doc/images/wechat.png&#34; alt=&#34;alert&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tzapu/WiFiManager</title>
    <updated>2022-09-04T01:34:37Z</updated>
    <id>tag:github.com,2022-09-04:/tzapu/WiFiManager</id>
    <link href="https://github.com/tzapu/WiFiManager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ESP8266 WiFi Connection manager with web captive portal&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WiFiManager&lt;/h1&gt; &#xA;&lt;h2&gt;DEVELOPMENT Version&lt;/h2&gt; &#xA;&lt;p&gt;Espressif ESPx WiFi Connection manager with fallback web configuration portal&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; This Documentation is out of date, see notes below&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/tzapu/WiFiManager?include_prereleases&#34; alt=&#34;Release&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tzapu/WiFiManager/actions/workflows/compile_library.yml&#34;&gt;&lt;img src=&#34;https://github.com/tzapu/WiFiManager/actions/workflows/compile_library.yml/badge.svg?sanitize=true&#34; alt=&#34;Build CI Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tzapu/WiFiManager/actions/workflows/compile_examples.yaml&#34;&gt;&lt;img src=&#34;https://github.com/tzapu/WiFiManager/actions/workflows/compile_examples.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build CI Status Examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ardu-badge.com/WiFiManager&#34;&gt;&lt;img src=&#34;https://www.ardu-badge.com/badge/WiFiManager.svg?&#34; alt=&#34;arduino-library-badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platformio.org/lib/show/567/WiFiManager/installation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PlatformIO-Library-orange?&#34; alt=&#34;Build with PlatformIO&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.espressif.com/en/products/socs/esp8266&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ESP-8266-000000.svg?longCache=true&amp;amp;style=flat&amp;amp;colorA=CC101F&#34; alt=&#34;ESP8266&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.espressif.com/en/products/socs/esp32&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ESP-32-000000.svg?longCache=true&amp;amp;style=flat&amp;amp;colorA=CC101F&#34; alt=&#34;ESP32&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.espressif.com/en/products/socs/esp32-s2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ESP-32S2-000000.svg?longCache=true&amp;amp;style=flat&amp;amp;colorA=CC101F&#34; alt=&#34;ESP32&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.espressif.com/en/products/socs/esp32-c3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ESP-32C3-000000.svg?longCache=true&amp;amp;style=flat&amp;amp;colorA=CC101F&#34; alt=&#34;ESP32&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Member to Member Support / Chat&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/tablatronix/WiFiManager?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/tablatronix/WiFiManager.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/tablatronix/WiFiManager&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/WgjVprfN&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-WiFiManager-%237289da.svg?logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The configuration portal is of the captive variety, so on various devices it will present the configuration dialogue as soon as you connect to the created access point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This works with the ESP8266 Arduino platform&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/esp8266/Arduino&#34;&gt;https://github.com/esp8266/Arduino&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This works with the ESP32 Arduino platform&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/espressif/arduino-esp32&#34;&gt;https://github.com/espressif/arduino-esp32&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Known Issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation needs to be updated, see &lt;a href=&#34;https://github.com/tzapu/WiFiManager/issues/500&#34;&gt;https://github.com/tzapu/WiFiManager/issues/500&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#how-it-works&#34;&gt;How it works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#wishlist&#34;&gt;Wishlist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#quick-start&#34;&gt;Quick start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Installing &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#install-through-library-manager&#34;&gt;Arduino - Through Library Manager&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#checkout-from-github&#34;&gt;Arduino - From Github&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#install-using-platformio&#34;&gt;PlatformIO&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#using&#34;&gt;Using&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#password-protect-the-configuration-access-point&#34;&gt;Access Point Password&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#callbacks&#34;&gt;Callbacks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#configuration-portal-timeout&#34;&gt;Configuration Portal Timeout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#on-demand-configuration-portal&#34;&gt;On Demand Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#custom-parameters&#34;&gt;Custom Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#custom-ip-configuration&#34;&gt;Custom IP Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#filter-networks&#34;&gt;Filter Low Quality Networks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#debug&#34;&gt;Debug Output&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#contributions-and-thanks&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When your ESP starts up, it sets it up in Station mode and tries to connect to a previously saved Access Point&lt;/li&gt; &#xA; &lt;li&gt;if this is unsuccessful (or no previous network saved) it moves the ESP into Access Point mode and spins up a DNS and WebServer (default ip 192.168.4.1)&lt;/li&gt; &#xA; &lt;li&gt;using any wifi enabled device with a browser (computer, phone, tablet) connect to the newly created Access Point&lt;/li&gt; &#xA; &lt;li&gt;because of the Captive Portal and the DNS server you will either get a &#39;Join to network&#39; type of popup or get any domain you try to access redirected to the configuration portal&lt;/li&gt; &#xA; &lt;li&gt;choose one of the access points scanned, enter password, click save&lt;/li&gt; &#xA; &lt;li&gt;ESP will try to connect. If successful, it relinquishes control back to your app. If not, reconnect to AP and reconfigure.&lt;/li&gt; &#xA; &lt;li&gt;There are options to change this behavior or manually start the configportal and webportal independantly as well as run them in non blocking mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How It Looks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/YPvW9eql.png&#34; alt=&#34;ESP8266 WiFi Captive Portal Homepage&#34;&gt; &lt;img src=&#34;http://i.imgur.com/oicWJ4gl.png&#34; alt=&#34;ESP8266 WiFi Captive Portal Configuration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Wishlist&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; remove dependency on EEPROM library&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; move HTML Strings to PROGMEM&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cleanup and streamline code (although this is ongoing)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; if timeout is set, extend it when a page is fetched in AP mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add ability to configure more parameters than ssid/password&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; maybe allow setting ip of ESP after reboot&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add to Arduino Library Manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add to PlatformIO&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add multiple sets of network credentials&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; allow users to customize CSS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; rewrite documentation for simplicity, based on scenarios/goals&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ESP32 support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; rely on the SDK&#39;s built in auto connect more than forcing a connect&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add non blocking mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; easy customization of strings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; hostname support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; fix various bugs and workarounds for esp SDK issues&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; additional info page items&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; last status display / faiilure reason&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; customizeable menu&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; seperate custom params page&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ondemand webportal&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; complete refactor of code to segment functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; wiif scan icons or percentage display&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; invert class for dark mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; more template tokens&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; progmem for all strings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; new callbacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; new callouts / filters&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; shared web server instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; latest esp idf/sdk support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; wm is now non persistent, will not erase or change stored esp config on esp8266&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; tons of debugging output / levels&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; disable captiveportal&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; preload wiifscans, faster page loads&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; softap stability fixes when sta is not connected&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;You can either install through the Arduino Library Manager or checkout the latest changes or a release from github&lt;/p&gt; &#xA;&lt;h4&gt;Install through Library Manager&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Currently version 0.8+ works with release 2.4.0 or newer of the &lt;a href=&#34;https://github.com/esp8266/Arduino&#34;&gt;ESP8266 core for Arduino&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;in Arduino IDE got to Sketch/Include Library/Manage Libraries &lt;img src=&#34;http://i.imgur.com/9BkEBkR.png&#34; alt=&#34;Manage Libraries&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;search for WiFiManager &lt;img src=&#34;http://i.imgur.com/18yIai8.png&#34; alt=&#34;WiFiManager package&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;click Install and start &lt;a href=&#34;https://raw.githubusercontent.com/tzapu/WiFiManager/master/#using&#34;&gt;using it&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Checkout from github&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Github version works with release 2.4.0 or newer of the &lt;a href=&#34;https://github.com/esp8266/Arduino&#34;&gt;ESP8266 core for Arduino&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Checkout library to your Arduino libraries folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Include in your sketch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;WiFiManager.h&amp;gt;          //https://github.com/tzapu/WiFiManager WiFi Configuration Magic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initialize library, in your setup function add, NOTEif you are using non blocking you will make sure you create this in global scope or handle appropriatly , it will not work if in setup and using non blocking mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;WiFiManager wifiManager;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Also in the setup function add&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//first parameter is name of access point, second is the password&#xA;wifiManager.autoConnect(&#34;AP-NAME&#34;, &#34;AP-PASSWORD&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you just want an unsecured access point&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.autoConnect(&#34;AP-NAME&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you want to use and auto generated name from &#39;ESP&#39; and the esp&#39;s Chip ID use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.autoConnect();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you write your sketch and start the ESP, it will try to connect to WiFi. If it fails it starts in Access Point mode. While in AP mode, connect to it then open a browser to the gateway IP, default 192.168.4.1, configure wifi, save and it should reboot and connect.&lt;/p&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://github.com/tzapu/WiFiManager/tree/master/examples&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Install Using PlatformIO&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platformio.org/&#34;&gt;PlatformIO&lt;/a&gt; is an emerging ecosystem for IoT development, and is an alternative to using the Arduino IDE. Install &lt;code&gt;WiFiManager&lt;/code&gt; using the platformio &lt;a href=&#34;https://docs.platformio.org/en/latest/librarymanager/index.html#librarymanager&#34;&gt;library manager&lt;/a&gt; in your editor, or using the &lt;a href=&#34;https://docs.platformio.org/en/latest/core/index.html&#34;&gt;PlatformIO Core CLI&lt;/a&gt;, or by adding it to your &lt;code&gt;platformio.ini&lt;/code&gt; as shown below (recommended approach).&lt;/p&gt; &#xA;&lt;p&gt;The simplest way is to open the &lt;code&gt;platformio.ini&lt;/code&gt; file at the root of your project, and &lt;code&gt;WifiManager&lt;/code&gt; to the common top-level env &lt;code&gt;lib_deps&lt;/code&gt; key like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[env]&#xA;lib_deps =&#xA;&#x9;WiFiManager&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;[env]&#xA;lib_deps =&#xA;&#x9;https://github.com/tzapu/WiFiManager.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h4&gt;Password protect the configuration Access Point&lt;/h4&gt; &#xA;&lt;p&gt;You can and should password protect the configuration access point. Simply add the password as a second parameter to &lt;code&gt;autoConnect&lt;/code&gt;. A short password seems to have unpredictable results so use one that&#39;s around 8 characters or more in length. The guidelines are that a wifi password must consist of 8 to 63 ASCII-encoded characters in the range of 32 to 126 (decimal)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.autoConnect(&#34;AutoConnectAP&#34;, &#34;password&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Callbacks&lt;/h4&gt; &#xA;&lt;h5&gt;Enter Config mode&lt;/h5&gt; &#xA;&lt;p&gt;Use this if you need to do something when your device enters configuration mode on failed WiFi connection attempt. Before &lt;code&gt;autoConnect()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setAPCallback(configModeCallback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;configModeCallback&lt;/code&gt; declaration and example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void configModeCallback (WiFiManager *myWiFiManager) {&#xA;  Serial.println(&#34;Entered config mode&#34;);&#xA;  Serial.println(WiFi.softAPIP());&#xA;&#xA;  Serial.println(myWiFiManager-&amp;gt;getConfigPortalSSID());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Save settings&lt;/h5&gt; &#xA;&lt;p&gt;This gets called when custom parameters have been set &lt;strong&gt;AND&lt;/strong&gt; a connection has been established. Use it to set a flag, so when all the configuration finishes, you can save the extra parameters somewhere.&lt;/p&gt; &#xA;&lt;p&gt;IF YOU NEED TO SAVE PARAMETERS EVEN ON WIFI FAIL OR EMPTY, you must set &lt;code&gt;setBreakAfterConfig&lt;/code&gt; to true, or else saveConfigCallback will not be called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;//if this is set, it will exit after config, even if connection is unsuccessful.&#xA;    void          setBreakAfterConfig(boolean shouldBreak);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/tzapu/WiFiManager/tree/master/examples/Parameters/SPIFFS/AutoConnectWithFSParameters&#34;&gt;AutoConnectWithFSParameters Example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setSaveConfigCallback(saveConfigCallback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;saveConfigCallback&lt;/code&gt; declaration and example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//flag for saving data&#xA;bool shouldSaveConfig = false;&#xA;&#xA;//callback notifying us of the need to save config&#xA;void saveConfigCallback () {&#xA;  Serial.println(&#34;Should save config&#34;);&#xA;  shouldSaveConfig = true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuration Portal Timeout&lt;/h4&gt; &#xA;&lt;p&gt;If you need to set a timeout so the ESP doesn&#39;t hang waiting to be configured, for instance after a power failure, you can add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setConfigPortalTimeout(180);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will wait 3 minutes (180 seconds). When the time passes, the autoConnect function will return, no matter the outcome. Check for connection and if it&#39;s still not established do whatever is needed (on some modules I restart them to retry, on others I enter deep sleep)&lt;/p&gt; &#xA;&lt;h4&gt;On Demand Configuration Portal&lt;/h4&gt; &#xA;&lt;p&gt;If you would rather start the configuration portal on demand rather than automatically on a failed connection attempt, then this is for you.&lt;/p&gt; &#xA;&lt;p&gt;Instead of calling &lt;code&gt;autoConnect()&lt;/code&gt; which does all the connecting and failover configuration portal setup for you, you need to use &lt;code&gt;startConfigPortal()&lt;/code&gt;. &lt;strong&gt;Do not use BOTH.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example usage&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void loop() {&#xA;  // is configuration portal requested?&#xA;  if ( digitalRead(TRIGGER_PIN) == LOW ) {&#xA;    WiFiManager wifiManager;&#xA;    wifiManager.startConfigPortal(&#34;OnDemandAP&#34;);&#xA;    Serial.println(&#34;connected...yeey :)&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See example for a more complex version. &lt;a href=&#34;https://github.com/tzapu/WiFiManager/tree/master/examples/OnDemand/OnDemandConfigPortal&#34;&gt;OnDemandConfigPortal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Exiting from the Configuration Portal&lt;/h4&gt; &#xA;&lt;p&gt;Normally, once entered, the configuration portal will continue to loop until WiFi credentials have been successfully entered or a timeout is reached. If you&#39;d prefer to exit without joining a WiFi network, say becuase you&#39;re going to put the ESP into AP mode, then press the &#34;Exit&#34; button on the main webpage. If started via &lt;code&gt;autoConnect&lt;/code&gt; or &lt;code&gt;startConfigPortal&lt;/code&gt; then it will return &lt;code&gt;false (portalAbortResult)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Custom Parameters&lt;/h4&gt; &#xA;&lt;p&gt;You can use WiFiManager to collect more parameters than just SSID and password. This could be helpful for configuring stuff like MQTT host and port, &lt;a href=&#34;http://www.blynk.cc&#34;&gt;blynk&lt;/a&gt; or &lt;a href=&#34;http://emoncms.org&#34;&gt;emoncms&lt;/a&gt; tokens, just to name a few. &lt;strong&gt;You are responsible for saving and loading these custom values.&lt;/strong&gt; The library just collects and displays the data for you as a convenience. Usage scenario would be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;load values from somewhere (EEPROM/FS) or generate some defaults&lt;/li&gt; &#xA; &lt;li&gt;add the custom parameters to WiFiManager using&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt; // id/name, placeholder/prompt, default, length&#xA; WiFiManagerParameter custom_mqtt_server(&#34;server&#34;, &#34;mqtt server&#34;, mqtt_server, 40);&#xA; wifiManager.addParameter(&amp;amp;custom_mqtt_server);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if connection to AP fails, configuration portal starts and you can set /change the values (or use on demand configuration portal)&lt;/li&gt; &#xA; &lt;li&gt;once configuration is done and connection is established save config callback() is called&lt;/li&gt; &#xA; &lt;li&gt;once WiFiManager returns control to your application, read and save the new values using the &lt;code&gt;WiFiManagerParameter&lt;/code&gt; object.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt; mqtt_server = custom_mqtt_server.getValue();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature is a lot more involved than all the others, so here are some examples to fully show how it is done. You should also take a look at adding custom HTML to your form.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Save and load custom parameters to file system in json form &lt;a href=&#34;https://github.com/tzapu/WiFiManager/tree/master/examples/Parameters/SPIFFS/AutoConnectWithFSParameters&#34;&gt;AutoConnectWithFSParameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Save and load custom parameters to EEPROM&lt;/em&gt; (not done yet)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom IP Configuration&lt;/h4&gt; &#xA;&lt;p&gt;You can set a custom IP for both AP (access point, config mode) and STA (station mode, client mode, normal project state)&lt;/p&gt; &#xA;&lt;h5&gt;Custom Access Point IP Configuration&lt;/h5&gt; &#xA;&lt;p&gt;This will set your captive portal to a specific IP should you need/want such a feature. Add the following snippet before &lt;code&gt;autoConnect()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//set custom ip for portal&#xA;wifiManager.setAPStaticIPConfig(IPAddress(10,0,1,1), IPAddress(10,0,1,1), IPAddress(255,255,255,0));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Custom Station (client) Static IP Configuration&lt;/h5&gt; &#xA;&lt;p&gt;This will make use the specified IP configuration instead of using DHCP in station mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setSTAStaticIPConfig(IPAddress(192,168,0,99), IPAddress(192,168,0,1), IPAddress(255,255,255,0)); // optional DNS 4th argument&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a couple of examples in the examples folder that show you how to set a static IP and even how to configure it through the web configuration portal.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: You should fill DNS server if you have HTTP requests with hostnames or syncronize time (NTP). It&#39;s the same as gateway ip or a popular (Google DNS: 8.8.8.8).&lt;/p&gt; &#xA;&lt;h4&gt;Custom HTML, CSS, Javascript&lt;/h4&gt; &#xA;&lt;p&gt;There are various ways in which you can inject custom HTML, CSS or Javascript into the configuration portal. The options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;inject custom head element You can use this to any html bit to the head of the configuration portal. If you add a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element, bare in mind it overwrites the included css, not replaces.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setCustomHeadElement(&#34;&amp;lt;style&amp;gt;html{filter: invert(100%); -webkit-filter: invert(100%);}&amp;lt;/style&amp;gt;&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;inject a custom bit of html in the configuration/param form&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;WiFiManagerParameter custom_text(&#34;&amp;lt;p&amp;gt;This is just a text paragraph&amp;lt;/p&amp;gt;&#34;);&#xA;wifiManager.addParameter(&amp;amp;custom_text);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;inject a custom bit of html in a configuration form element Just add the bit you want added as the last parameter to the custom parameter constructor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;WiFiManagerParameter custom_mqtt_server(&#34;server&#34;, &#34;mqtt server&#34;, &#34;iot.eclipse&#34;, 40, &#34; readonly&#34;);&#xA;wifiManager.addParameter(&amp;amp;custom_mqtt_server);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Theming&lt;/h4&gt; &#xA;&lt;p&gt;You can customize certain elements of the default template with some builtin classes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-CPP&#34;&gt;wifiManager.setClass(&#34;invert&#34;); // dark theme&#xA;wifiManager.setScanDispPerc(true); // display percentages instead of graphs for RSSI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are additional classes in the css you can use in your custom html , see the example template.&lt;/p&gt; &#xA;&lt;h4&gt;Filter Networks&lt;/h4&gt; &#xA;&lt;p&gt;You can filter networks based on signal quality and show/hide duplicate networks.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you would like to filter low signal quality networks you can tell WiFiManager to not show networks below an arbitrary quality %;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setMinimumSignalQuality(10);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will not show networks under 10% signal quality. If you omit the parameter it defaults to 8%;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can also remove or show duplicate networks (default is remove). Use this function to show (or hide) all networks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setRemoveDuplicateAPs(false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debug&lt;/h4&gt; &#xA;&lt;p&gt;Debug is enabled by default on &lt;code&gt;Serial&lt;/code&gt; in non-stable releases. To disable add before autoConnect/startConfigPortal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wifiManager.setDebugOutput(false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass in a custom stream via constructor&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-CPP&#34;&gt;WiFiManager wifiManager(Serial1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can customize the debug level by changing &lt;code&gt;_debugLevel&lt;/code&gt; in source options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DEBUG_ERROR&lt;/li&gt; &#xA; &lt;li&gt;DEBUG_NOTIFY&lt;/li&gt; &#xA; &lt;li&gt;DEBUG_VERBOSE&lt;/li&gt; &#xA; &lt;li&gt;DEBUG_DEV&lt;/li&gt; &#xA; &lt;li&gt;DEBUG_MAX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you get compilation errors, more often than not, you may need to install a newer version of the ESP8266 core for Arduino.&lt;/p&gt; &#xA;&lt;p&gt;Changes added on 0.8 should make the latest trunk work without compilation errors. Tested down to ESP8266 core 2.0.0. &lt;strong&gt;Please update to version 0.8&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I am trying to keep releases working with release versions of the core, so they can be installed through boards manager, but if you checkout the latest version directly from github, sometimes, the library will only work if you update the ESP8266 core to the latest version because I am using some newly added function.&lt;/p&gt; &#xA;&lt;p&gt;If you connect to the created configuration Access Point but the configuration portal does not show up, just open a browser and type in the IP of the web portal, by default &lt;code&gt;192.168.4.1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If trying to connect ends up in an endless loop, try to add &lt;code&gt;setConnectTimeout(60)&lt;/code&gt; before &lt;code&gt;autoConnect();&lt;/code&gt;. The parameter is timeout to try connecting in seconds.&lt;/p&gt; &#xA;&lt;p&gt;I get stuck in ap mode when the power goes out or modem resets, try a setConfigPortalTimeout(seconds). This will cause the configportal to close after no activity, and you can reboot or attempt reconnection in your code.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;h3&gt;1.0.1&lt;/h3&gt; &#xA;&lt;h3&gt;Development Overview&lt;/h3&gt; &#xA;&lt;h4&gt;Added Public Methods&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;setConfigPortalBlocking&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setShowStaticFields&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setCaptivePortalEnable&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setRestorePersistent&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setCaptivePortalClientCheck&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setWebPortalClientCheck&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;startWebPortal&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;stopWebPortal&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;process&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;disconnect&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt; debugSoftAPConfig&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt; debugPlatformInfo&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setScanDispPerc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setHostname&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setMenu(menu_page_t[])&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setWiFiAutoReconnect&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt; setSTAStaticIPConfig(..,dns)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setShowDnsFields&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getLastConxResult&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getWLStatusString&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getModeString&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getWiFiIsSaved&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setShowInfoErase&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setEnableConfigPortal&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setCountry&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;setClass&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;htmleEtities&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;WiFiManagerParameter&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;WiFiManagerParameter(id,label)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WiFiManagerParameter.setValue(value,length)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getParameters&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getParametersCount&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Constructors&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;WiFiManager(Stream&amp;amp; consolePort)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;define flags&lt;/h4&gt; &#xA;&lt;p&gt;❗️ &lt;strong&gt;Defines cannot be set in user sketches&lt;/strong&gt; &lt;code&gt;#define WM_MDNS // use MDNS&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#define WM_FIXERASECONFIG // use erase flash fix, esp8266 2.4.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#define WM_ERASE_NVS // esp32 erase(true) will erase NVS&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;#include &amp;lt;rom/rtc.h&amp;gt; // esp32 info page will show last reset reasons if this file is included&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Changes Overview&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ESP32 support ( fairly stable )&lt;/li&gt; &#xA; &lt;li&gt;complete refactor of strings &lt;code&gt;strings_en.h&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;adds new tokens for wifiscan, and some classes (left , invert icons, MSG color)&lt;/li&gt; &#xA; &lt;li&gt;adds status callout panel default, primary, special colors&lt;/li&gt; &#xA; &lt;li&gt;adds tons of info on info page, and erase capability&lt;/li&gt; &#xA; &lt;li&gt;adds signal icons, replaces percentage ( has hover titles )&lt;/li&gt; &#xA; &lt;li&gt;adds labels to all inputs (replaces placeholders)&lt;/li&gt; &#xA; &lt;li&gt;all html ( and eventually all strings except debug) moved to &lt;code&gt;strings_en.h&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;added additional debugging, compressed debug lines, debuglevels&lt;/li&gt; &#xA; &lt;li&gt;persistent disabled, and restored via de/con-stuctor (uses &lt;code&gt;setRestorePersistent&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;should retain all user modes including AP, should not overwrite or persist user modes or configs,even STA (&lt;code&gt;storeSTAmode&lt;/code&gt;) (BUGGY)&lt;/li&gt; &#xA; &lt;li&gt;⚠️ return values may have changed depending on portal abort, or timeout ( &lt;code&gt;portalTimeoutResult&lt;/code&gt;,&lt;code&gt;portalAbortResult&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;params memory is auto allocated by increment of &lt;code&gt;WIFI_MANAGER_MAX_PARAMS(5)&lt;/code&gt; when exceeded, user no longer needs to specify this at all.&lt;/li&gt; &#xA; &lt;li&gt;addparameter now returns bool, and it returns false if param ID is not alphanum [0-9,A-Z,a-z,_]&lt;/li&gt; &#xA; &lt;li&gt;param field ids allow {I} token to use param_n instead of string in case someones wants to change this due to i18n or character issues&lt;/li&gt; &#xA; &lt;li&gt;provides &lt;code&gt;#DEFINE FIXERASECONFIG&lt;/code&gt; to help deal with &lt;a href=&#34;https://github.com/esp8266/Arduino/pull/3635&#34;&gt;https://github.com/esp8266/Arduino/pull/3635&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;failure reason reporting on portal&lt;/li&gt; &#xA; &lt;li&gt;set esp8266 sta hostname, esp32 sta+ap hostname ( DHCP client id)&lt;/li&gt; &#xA; &lt;li&gt;pass in debug stream in constructor WiFiManager(Stream&amp;amp; consolePort)&lt;/li&gt; &#xA; &lt;li&gt;you can force ip fields off with showxfields(false) if you set _disableIpFields=true&lt;/li&gt; &#xA; &lt;li&gt;param menu/page (setup) added to separate params from wifi page, handled automatically by setMenu&lt;/li&gt; &#xA; &lt;li&gt;set custom root menu&lt;/li&gt; &#xA; &lt;li&gt;disable configportal on autoconnect&lt;/li&gt; &#xA; &lt;li&gt;wm parameters init is now protected, allowing child classes, example included&lt;/li&gt; &#xA; &lt;li&gt;wifiscans are precached and async for faster page loads, refresh forces rescan&lt;/li&gt; &#xA; &lt;li&gt;adds esp32 gettemperature ( currently commented out, useful for relative measurement only )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;0.12&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;removed 204 header response&lt;/li&gt; &#xA; &lt;li&gt;fixed incompatibility with other libs using isnan and other std:: functions without namespace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;0.11&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a lot more reliable reconnecting to networks&lt;/li&gt; &#xA; &lt;li&gt;custom html in custom parameters (for read only params)&lt;/li&gt; &#xA; &lt;li&gt;custom html in custom parameter form (like labels)&lt;/li&gt; &#xA; &lt;li&gt;custom head element (like custom css)&lt;/li&gt; &#xA; &lt;li&gt;sort networks based on signal quality&lt;/li&gt; &#xA; &lt;li&gt;remove duplicate networks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;0.10&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;some css changes&lt;/li&gt; &#xA; &lt;li&gt;bug fixes and speed improvements&lt;/li&gt; &#xA; &lt;li&gt;added an alternative to waitForConnectResult() for debugging&lt;/li&gt; &#xA; &lt;li&gt;changed &lt;code&gt;setTimeout(seconds)&lt;/code&gt; to &lt;code&gt;setConfigPortalTimeout(seconds)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributions and thanks&lt;/h3&gt; &#xA;&lt;p&gt;The support and help I got from the community has been nothing short of phenomenal. I can&#39;t thank you guys enough. This is my first real attept in developing open source stuff and I must say, now I understand why people are so dedicated to it, it is because of all the wonderful people involved.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;THANK YOU&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The esp8266 and esp32 arduino and idf maintainers!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tablatronix&#34;&gt;Shawn A aka tablatronix&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/liebman&#34;&gt;liebman&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dontsovcmc&#34;&gt;Evgeny Dontsov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cmarrin&#34;&gt;Chris Marrin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bbx10&#34;&gt;bbx10&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kentaylor&#34;&gt;kentaylor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/domonetic&#34;&gt;Maximiliano Duarte&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alltheblinkythings&#34;&gt;alltheblinkythings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/niklaswall&#34;&gt;Niklas Wall&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zaporylie&#34;&gt;Jakub Piasecki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alwynallan&#34;&gt;Peter Allan&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/j0hnlittle&#34;&gt;John Little&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/markaswift&#34;&gt;markaswift&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/franklinvv&#34;&gt;franklinvv&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/riccibitti&#34;&gt;Alberto Ricci Bitti&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SebiPanther&#34;&gt;SebiPanther&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jonathanendersby&#34;&gt;jonathanendersby&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/walthercarsten&#34;&gt;walthercarsten&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And countless others&lt;/p&gt; &#xA;&lt;h4&gt;Inspiration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.esp8266.com/viewtopic.php?f=29&amp;amp;t=2520&#34;&gt;http://www.esp8266.com/viewtopic.php?f=29&amp;amp;t=2520&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chriscook8/esp-arduino-apboot&#34;&gt;https://github.com/chriscook8/esp-arduino-apboot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esp8266/Arduino/tree/master/libraries/DNSServer/examples/CaptivePortalAdvanced&#34;&gt;https://github.com/esp8266/Arduino/tree/master/libraries/DNSServer/examples/CaptivePortalAdvanced&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Built by AlexT &lt;a href=&#34;https://github.com/tzapu&#34;&gt;https://github.com/tzapu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Haivision/srt</title>
    <updated>2022-09-04T01:34:37Z</updated>
    <id>tag:github.com,2022-09-04:/Haivision/srt</id>
    <link href="https://github.com/Haivision/srt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Secure, Reliable, Transport&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Secure Reliable Transport (SRT) Protocol&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/#what-is-srt&#34;&gt;About SRT&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/#features&#34;&gt;Features&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/#getting-started-with-srt&#34;&gt;Getting Started&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/#build-instructions&#34;&gt;Builds&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/#sample-applications-and-tools&#34;&gt;Sample Apps and Tools&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/#contributing&#34;&gt;Contribute&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/#license&#34;&gt;License&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/#release-history&#34;&gt;Releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;http://srtalliance.org/&#34;&gt; &lt;img alt=&#34;SRT&#34; src=&#34;http://www.srtalliance.org/wp-content/uploads/SRT_text_hor_logo_grey.png&#34; width=&#34;500&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MPLv2.0-blue&#34; alt=&#34;License: MPLv2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Haivision/srt/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Haivision/srt.svg?sanitize=true&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packages.debian.org/testing/libs/libsrt1.5-gnutls&#34;&gt;&lt;img src=&#34;https://badges.debian.net/badges/debian/testing/libsrt1.5-gnutls/version.svg?sanitize=true&#34; alt=&#34;Debian Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/Haivision/srt/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/cpp/github/Haivision/srt&#34; alt=&#34;LGTM Code Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/Haivision/srt/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/github/Haivision/srt&#34; alt=&#34;LGTM Alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/haivision/srt&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/haivision/srt/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/Haivision/srt&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/Haivision/srt/master.svg?label=Linux/macOS&#34; alt=&#34;Build Status Linux and macOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/Haivision/srt&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/ci/Haivision/srt/master.svg?label=Windows&#34; alt=&#34;Build Status Windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is SRT?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Secure Reliable Transport (SRT)&lt;/strong&gt; is a transport protocol for ultra low (sub-second) latency live video and audio streaming, as well as for generic bulk data transfer[^1]. SRT is available as an open-source technology with the code on GitHub, a published &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01&#34;&gt;Internet Draft&lt;/a&gt;, and a growing &lt;a href=&#34;https://www.srtalliance.org/&#34;&gt;community of SRT users&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SRT is applied to contribution and distribution endpoints as part of a video stream workflow to deliver the best quality and lowest latency video at all times.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;S&lt;/strong&gt;ecure&lt;/td&gt; &#xA;   &lt;td&gt;Encrypts video streams&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;R&lt;/strong&gt;eliable&lt;/td&gt; &#xA;   &lt;td&gt;Recovers from severe packet loss&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;T&lt;/strong&gt;ransport&lt;/td&gt; &#xA;   &lt;td&gt;Dynamically adapts to changing network conditions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In live streaming configurations, the SRT protocol maintains a constant end-to-end latency. This allows the live stream’s signal characteristics to be recreated on the receiver side, reducing the need for buffering. As packets are streamed from source to destination, SRT detects and adapts to real-time network conditions between the two endpoints. It helps compensate for jitter and bandwidth fluctuations due to congestion over noisy networks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01#section-6&#34;&gt;SRT implements AES encryption&lt;/a&gt; to protect the payload of the media streams, and offers various error recovery mechanisms for minimizing the packet loss that is typical of Internet connections, of which Automatic Repeat reQuest (ARQ) is the primary method. With ARQ, when a receiver detects that a packet is missing it sends an alert to the sender requesting retransmission of this missing packet. &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/features/packet-filtering-and-fec.md&#34;&gt;Forward Error Correction (FEC)&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/features/bonding-quick-start.md&#34;&gt;Connection Bonding&lt;/a&gt;, which adds seamless stream protection and hitless failover, are also supported by the protocol.&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;em&gt;To learn more about the protocol subscribe to the &lt;a href=&#34;https://medium.com/innovation-labs-blog/tagged/secure-reliable-transport&#34;&gt;Innovation Labs Blog&lt;/a&gt; on &amp;nbsp;&lt;img alt=&#34;slack logo&#34; src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Medium_%28website%29_logo.svg/500px-Medium_%28website%29_logo.svg.png&#34; width=&#34;80&#34;&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;em&gt;To ask a question &lt;a href=&#34;https://slackin-srtalliance.azurewebsites.net&#34;&gt;join the conversation&lt;/a&gt; in the &lt;b&gt;#development&lt;/b&gt; channel on &amp;nbsp;&lt;a href=&#34;https://srtalliance.slack.com&#34;&gt;&lt;img alt=&#34;slack logo&#34; src=&#34;https://github.com/stevomatthews/srt/raw/master/docs/images/Slack_RGB2.svg?sanitize=true&#34; width=&#34;60&#34;&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;👇&lt;/span&gt; Click on the ► button to expand a feature description.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pristine Quality and Reliability&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;No matter how unreliable your network, SRT can recover from severe packet loss and jitter, ensuring the integrity and quality of your video streams.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Low Latency&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;SRT’s stream error correction is configurable to accommodate a user’s deployment conditions. Leveraging real-time IP communications development to extend traditional network error recovery practices, SRT delivers media with significantly lower latency than TCP/IP, while offering the speed of UDP transmission with greatly improved reliability.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Content Agnostic&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;Unlike some other streaming protocols that only support specific video and audio formats, SRT is payload agnostic. Because SRT operates at the network transport level, acting as a wrapper around your content, it can transport any type of video format, codec, resolution, or frame rate.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Easy Firewall Traversal with Rendezvous Mode&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;The handshaking process used by SRT supports outbound connections without the potential risks and dangers of permanent exterior ports being opened in a firewall, thereby maintaining corporate LAN security policies and minimizing the need for IT intervention.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01#section-6&#34;&gt;AES Encryption&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;Using 128/192/256-bit AES encryption trusted by governments and organizations around the world, SRT ensures that valuable content is protected end-to-end from contribution to distribution so that no unauthorized parties can listen.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/features/packet-filtering-and-fec.md&#34;&gt;Forward Error Correction (FEC) and Packet Filter API&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Haivision/srt/releases/tag/v1.4.0&#34;&gt;SRT 1.4&lt;/a&gt; sees the introduction of the &lt;em&gt;packet filter API&lt;/em&gt;. This mechanism allows custom processing to be performed on network packets on the sender side before they are sent, and on the receiver side once received from the network. The API allows users to write their own plugin, thereby extending the SRT protocol&#39;s capabilities even further with all kinds of different packet filtering. Users can manipulate the resulting packet filter data in any way, such as for custom encryption, packet inspection, or accessing data before it is sent.&lt;/p&gt; &#xA; &lt;p&gt;The first plugin created as an example of what can be achieved with the packet filter API is for Forward Error Correction (FEC) which, in certain use cases, can offer slightly lower latency than Automatic Repeat reQuest (ARQ). This plugin allows three different modes:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;ARQ only – retransmits lost packets,&lt;/li&gt; &#xA;  &lt;li&gt;FEC only – provides the overhead needed for FEC recovery on the receiver side,&lt;/li&gt; &#xA;  &lt;li&gt;FEC and ARQ – retransmits lost packets that FEC fails to recover.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/features/bonding-quick-start.md&#34;&gt;Connection Bonding&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;Similar to SMPTE-2022-7 over managed networks, Connection Bonding adds seamless stream protection and hitless failover to the SRT protocol. This technology relies on more than one IP network path to prevent disruption to live video streams in the event of network congestion or outages, maintaining continuity of service.&lt;/p&gt; &#xA; &lt;p&gt;This is accomplished using the &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/features/socket-groups.md&#34;&gt;socket groups&lt;/a&gt; introduced in &lt;a href=&#34;https://github.com/Haivision/srt/releases/tag/v1.5.0&#34;&gt;SRT v1.5&lt;/a&gt;. The general concept of socket groups means having a group that contains multiple sockets, where one operation for sending one data signal is applied to the group. Single sockets inside the group will take over this operation and do what is necessary to deliver the signal to the receiver.&lt;/p&gt; &#xA; &lt;p&gt;Two modes are supported:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/features/socket-groups.md#1-broadcast&#34;&gt;Broadcast&lt;/a&gt; - In &lt;em&gt;Broadcast&lt;/em&gt; mode, data is sent redundantly over all the member links in a group. If one of the links fails or experiences network jitter and/or packet loss, the missing data will be received over another link in the group. Redundant packets are simply discarded at the receiver side.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/features/bonding-main-backup.md&#34;&gt;Main/Backup&lt;/a&gt; - In &lt;em&gt;Main/Backup&lt;/em&gt; mode, only one (main) link at a time is used for data transmission while other (backup) connections are on standby to ensure the transmission will continue if the main link fails. The goal of Main/Backup mode is to identify a potential link break before it happens, thus providing a time window within which to seamlessly switch to one of the backup links.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/features/access-control.md&#34;&gt;Access Control (Stream ID)&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;Access Control enables the upstream application to assign a Stream ID to individual SRT streams. By using a unique Stream ID, either automatically generated or customized, the upstream application can send multiple SRT streams to a single IP address and UDP port. The Stream IDs can then be used by a receiver to identify and differentiate between ingest streams, apply user password access methods, and in some cases even apply automation based on the naming of the Stream ID. For example, contribution could be sent to a video production workflow and monitoring to a monitoring service.&lt;/p&gt; &#xA; &lt;p&gt;For broadcasters, Stream ID is key to replacing&amp;nbsp;RTMP&amp;nbsp;for ingesting video streams, especially&amp;nbsp;HEVC/H.265 content, into cloud service or CDNs that have a single IP socket (address + port) open for incoming video.&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Getting Started with SRT&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs#srt-api-documents&#34;&gt;The SRT API&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01&#34;&gt;IETF Internet Draft&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs#sample-applications&#34;&gt;Sample Apps&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Reference documentation for the SRT library API&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;The SRT Protocol Internet Draft&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Instructions for using test apps (&lt;code&gt;srt-live-transmit&lt;/code&gt;, &lt;code&gt;srt-file-transmit&lt;/code&gt;, etc.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Haivision/srt/files/2489142/SRT_Protocol_TechnicalOverview_DRAFT_2018-10-17.pdf&#34;&gt;SRT Technical Overview&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.srtalliance.org/srt-deployment-guide/&#34;&gt;SRT Deployment Guide&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://srtlab.github.io/srt-cookbook&#34;&gt;SRT CookBook&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Early draft technical overview (precursor to the Internet Draft)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;A comprehensive overview of the protocol with deployment guidelines&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Development notes on the SRT protocol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://medium.com/innovation-labs-blog/tagged/secure-reliable-transport&#34;&gt;Innovation Labs Blog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCr35JJ32jKKWIYymR1PTdpA&#34;&gt;SRTLab YouTube Channel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://srtalliance.slack.com&#34;&gt;Slack&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;The blog on Medium with SRT-related technical articles&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Technical YouTube channel with useful videos&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Slack channels to get the latest updates and ask questions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Additional Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/misc/why-srt-was-created.md&#34;&gt;Why SRT?&lt;/a&gt; - A brief history and rationale for SRT by Marc Cymontkowski.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haivision.com/resources/white-paper/srt-versus-rtmp/&#34;&gt;RTMP vs. SRT: Comparing Latency and Maximum Bandwidth&lt;/a&gt; White Paper.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs#documentation-overview&#34;&gt;Documentation on GitHub&lt;/a&gt; with SRT API documents, features decsriptions, etc.&lt;/li&gt; &#xA; &lt;li&gt;The SRT Protocol Internet Draft: &lt;a href=&#34;https://datatracker.ietf.org/doc/draft-sharabayko-srt/&#34;&gt;Datatracker&lt;/a&gt; | &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01&#34;&gt;Latest Version&lt;/a&gt; | &lt;a href=&#34;https://haivision.github.io/srt-rfc/draft-sharabayko-srt.html&#34;&gt;Latest Working Copy&lt;/a&gt; | &lt;a href=&#34;https://github.com/Haivision/srt-rfc&#34;&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/build/build-linux.md&#34;&gt;Linux (Ubuntu/CentOS)&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/build/build-win.md&#34;&gt;Windows&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/build/build-macOS.md&#34;&gt;macOS&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/build/build-iOS.md&#34;&gt;iOS&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/build/build-android.md&#34;&gt;Android&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C++03 or above compliant compiler.&lt;/li&gt; &#xA; &lt;li&gt;CMake 2.8.12 or above as a build system.&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL 1.1 to enable encryption, otherwise build with &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/build/build-options.md#enable_encryption&#34;&gt;&lt;code&gt;-DENABLE_ENCRYPTION=OFF&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Multithreading is provided by either of the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;C++11: standard library (&lt;code&gt;std&lt;/code&gt; by &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/build/build-options.md#enable_stdcxx_sync&#34;&gt;&lt;code&gt;-DENABLE_STDCXX_SYNC=ON&lt;/code&gt;&lt;/a&gt; CMake option),&lt;/li&gt; &#xA;   &lt;li&gt;C++03: Pthreads (for POSIX systems it&#39;s built in, for Windows there is a ported library).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Tcl 8.5 is optional and is used by &lt;code&gt;./configure&lt;/code&gt; script. Otherwise, use CMake directly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build Options&lt;/h3&gt; &#xA;&lt;p&gt;For detailed descriptions of the build system and options, please read the &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/build/build-options.md&#34;&gt;SRT Build Options&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Applications and Tools&lt;/h2&gt; &#xA;&lt;p&gt;The current repo provides &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/apps&#34;&gt;sample applications&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/examples&#34;&gt;code examples&lt;/a&gt; that demonstrate the usage of the SRT library API. Among them are &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/apps/srt-live-transmit.cpp&#34;&gt;&lt;code&gt;srt-live-transmit&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/apps/srt-file-transmit.cpp&#34;&gt;&lt;code&gt;srt-file-transmit&lt;/code&gt;&lt;/a&gt;, and other applications. The respective documentation can be found &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs#sample-applications&#34;&gt;here&lt;/a&gt;. Note that all samples are provided for instructional purposes, and should not be used in a production environment.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/maxsharabayko/srt-xtransmit&#34;&gt;&lt;code&gt;srt-xtransmit&lt;/code&gt;&lt;/a&gt; utility is actively used for internal testing and performance evaluation. Among other features it supports dummy payload generation, traffic routings, and connection bonding. Additional details are available in the &lt;a href=&#34;https://github.com/maxsharabayko/srt-xtransmit&#34;&gt;&lt;code&gt;srt-xtransmit&lt;/code&gt;&lt;/a&gt; repo itself.&lt;/p&gt; &#xA;&lt;p&gt;Python tools that might be useful during development are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mbakholdina/srt-stats-plotting&#34;&gt;&lt;code&gt;srt-stats-plotting&lt;/code&gt;&lt;/a&gt; - A script designed to plot graphs based on SRT &lt;code&gt;.csv&lt;/code&gt; statistics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mbakholdina/lib-tcpdump-processing&#34;&gt;&lt;code&gt;lib-tcpdump-processing&lt;/code&gt;&lt;/a&gt; - A library designed to process &lt;code&gt;.pcap(ng)&lt;/code&gt; &lt;a href=&#34;https://www.tcpdump.org/&#34;&gt;tcpdump&lt;/a&gt; or &lt;a href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt; trace files and extract SRT packets of interest for further analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mbakholdina/lib-srt-utils&#34;&gt;&lt;code&gt;lib-srt-utils&lt;/code&gt;&lt;/a&gt; - A Python library containing supporting code for running SRT tests based on an experiment configuration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Anyone is welcome to contribute. If you decide to get involved, please take a moment to review the guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/dev/developers-guide.md&#34;&gt;SRT Developer&#39;s Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/dev/making-srt-better.md&#34;&gt;Reporting Issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For information on contributing to the &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01&#34;&gt;Internet Draft&lt;/a&gt; or to submit issues please go to the following &lt;a href=&#34;https://github.com/Haivision/srt-rfc&#34;&gt;repo&lt;/a&gt;. The repo for contributing in &lt;a href=&#34;https://srtlab.github.io/srt-cookbook/&#34;&gt;SRT CookBook&lt;/a&gt; can be found &lt;a href=&#34;https://github.com/SRTLab/srt-cookbook/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;By contributing code to the SRT project, you agree to license your contribution under the &lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/LICENSE&#34;&gt;MPLv2.0 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Release History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Haivision/srt/releases&#34;&gt;Release notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Haivision/srt/master/docs/dev/developers-guide.md#versioning&#34;&gt;SRT versioning&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[^1]: The term “live streaming” refers to continuous data transmission (MPEG-TS or equivalent) with latency management. Live streaming based on segmentation and transmission of files like in the HTTP Live Streaming (HLS) protocol (as described in RFC8216) is not part of this use case. File transmission in either message or buffer mode should be considered in this case. See &lt;a href=&#34;https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01#section-7&#34;&gt;Section 7. Best Practices and Configuration Tips for Data Transmission via SRT&lt;/a&gt; of the Internet Draft for details. Note that SRT is content agnostic, meaning that any type of data can be transmitted via its payload.&lt;/p&gt;</summary>
  </entry>
</feed>