<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-20T01:28:03Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yileijin/Bootstrap-3D-GS</title>
    <updated>2024-05-20T01:28:03Z</updated>
    <id>tag:github.com,2024-05-20:/yileijin/Bootstrap-3D-GS</id>
    <link href="https://github.com/yileijin/Bootstrap-3D-GS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bootstrap 3D Reconstructed Scenes from 3D Gaussian Splatting&lt;/h1&gt; &#xA;&lt;p&gt;Project Contribution: &lt;a href=&#34;https://github.com/yileijin&#34;&gt;Yifei Gao&lt;/a&gt;, &lt;a href=&#34;https://github.com/oujieww&#34;&gt;Jie Ou&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our Paper: [&lt;a href=&#34;https://arxiv.org/pdf/2404.18669&#34;&gt;&lt;code&gt;arxiv&lt;/code&gt;&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;In our paper, we present a bootstrapping method that significantly addresses this problem. This approach employs a diffusion model to enhance the rendering of novel views using trained 3D-GS, thereby streamlining the training process.&lt;/p&gt; &#xA;&lt;p&gt;Our results indicate that bootstrapping effectively reduces artifacts, as well as clear enhancements on the evaluation metrics. Furthermore, we show that our method is versatile and can be easily integrated, allowing various 3D reconstruction projects to benefit from our approach.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yileijin/Bootstrap-3D-GS/main/assets/overall_comparison.png&#34; width=&#34;100%&#34; height=&#34;100%&#34; class=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Our program is tested on cuda 11.8 with pytorch==2.0.1, this environment is suitable for both 3D-GS and the stable-diffusion (xformer)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/yileijin/Bootstrap-3D-GS.git --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;SET DISTUTILS_USE_SDK=1 # Windows only&#xA;conda create -n boot_3dgs python==3.11.8&#xA;conda activate boot_3dgs&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;p&gt;First, create a &lt;code&gt;data/&lt;/code&gt; folder inside the project path by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The data structure will be organised as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data/&#xA;├── dataset_name&#xA;│   ├── scene1/&#xA;│   │   ├── images&#xA;│   │   │   ├── IMG_0.jpg&#xA;│   │   │   ├── IMG_1.jpg&#xA;│   │   │   ├── ...&#xA;│   │   ├── sparse/&#xA;│   │       └──0/&#xA;│   ├── scene2/&#xA;│   │   ├── images&#xA;│   │   │   ├── IMG_0.jpg&#xA;│   │   │   ├── IMG_1.jpg&#xA;│   │   │   ├── ...&#xA;│   │   ├── sparse/&#xA;│   │       └──0/&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stable Diffusion CKPT&lt;/h3&gt; &#xA;&lt;p&gt;The stable diffusion model we use can be downloaded in &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-2-1&#34;&gt;SD2.1v&lt;/a&gt;/&lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-x4-upscaler&#34;&gt;x4-upscaling&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Public Data&lt;/h3&gt; &#xA;&lt;p&gt;The MipNeRF360 scenes are provided by the paper author &lt;a href=&#34;https://jonbarron.info/mipnerf360/&#34;&gt;here&lt;/a&gt;. And we test on scenes &lt;code&gt;bicycle, bonsai, counter, garden, kitchen, room, stump&lt;/code&gt;. The SfM data sets for Tanks&amp;amp;Temples and Deep Blending are hosted by 3D-Gaussian-Splatting &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/datasets/input/tandt_db.zip&#34;&gt;here&lt;/a&gt;. Download and uncompress them into the &lt;code&gt;data/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;Our training process is the same as the original &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D-GS&lt;/a&gt;, but regarding the Diffusion Model part, we strongly recommend that you make modifications yourself in the configuration &lt;code&gt;./arguments &lt;/code&gt;. Some important configurations are detailed in our paper. For example, to train a scene:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python train.py -s &amp;lt;path to COLMAP or NeRF Synthetic dataset&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Novel-view Rendering&lt;/h2&gt; &#xA;&lt;p&gt;Our rendering also includes scenes that are not in the training set or the test set. By setting &lt;code&gt;do_expension=True&lt;/code&gt;, you can obtain completely novel views.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python render.py -m &amp;lt;path to trained model&amp;gt; # Generate renderings&#xA;python metrics.py -m &amp;lt;path to trained model&amp;gt; # Compute error metrics on renderings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Yifei Gao: &lt;a href=&#34;mailto:yilei.jin123@gmail.com&#34;&gt;yilei.jin123@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our work helpful, please consider citing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{gao2024bootstrap,&#xA;      title={Bootstrap 3D Reconstructed Scenes from 3D Gaussian Splatting}, &#xA;      author={Yifei Gao and Jie Ou and Lei Wang and Jun Cheng},&#xA;      year={2024},&#xA;      eprint={2404.18669},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.GR}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Please follow the LICENSE of &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D-GS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;We thank all authors from &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;3D-GS&lt;/a&gt; for presenting such an excellent work.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>snort3/snort3</title>
    <updated>2024-05-20T01:28:03Z</updated>
    <id>tag:github.com,2024-05-20:/snort3/snort3</id>
    <link href="https://github.com/snort3/snort3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Snort++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Snort++&lt;/h1&gt; &#xA;&lt;p&gt;Snort 3 is the next generation Snort IPS (Intrusion Prevention System). This file will show you what Snort++ has to offer and guide you through the steps from download to demo. If you are unfamiliar with Snort you should take a look at the Snort documentation first. We will cover the following topics:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snort3/snort3/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snort3/snort3/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snort3/snort3/master/#download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snort3/snort3/master/#build-snort&#34;&gt;Build Snort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snort3/snort3/master/#run-snort&#34;&gt;Run Snort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snort3/snort3/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snort3/snort3/master/#squeal&#34;&gt;Squeal&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;OVERVIEW&lt;/h1&gt; &#xA;&lt;p&gt;This version of Snort++ includes new features as well as all Snort 2.X features and bug fixes for the base version of Snort except as indicated below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Project = Snort++&#xA;Binary = snort&#xA;Version = 3.0.0 (Build 250) from 2.9.11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are some key features of Snort++:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support multiple packet processing threads&lt;/li&gt; &#xA; &lt;li&gt;Use a shared configuration and attribute table&lt;/li&gt; &#xA; &lt;li&gt;Use a simple, scriptable configuration&lt;/li&gt; &#xA; &lt;li&gt;Make key components pluggable&lt;/li&gt; &#xA; &lt;li&gt;Autodetect services for portless configuration&lt;/li&gt; &#xA; &lt;li&gt;Support sticky buffers in rules&lt;/li&gt; &#xA; &lt;li&gt;Autogenerate reference documentation&lt;/li&gt; &#xA; &lt;li&gt;Provide better cross platform support&lt;/li&gt; &#xA; &lt;li&gt;Facilitate component testing&lt;/li&gt; &#xA; &lt;li&gt;Use a shared network map&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional features on the roadmap include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support pipelining of packet processing&lt;/li&gt; &#xA; &lt;li&gt;Support hardware offload and data plane integration&lt;/li&gt; &#xA; &lt;li&gt;Support proxy mode&lt;/li&gt; &#xA; &lt;li&gt;Windows support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;DEPENDENCIES&lt;/h1&gt; &#xA;&lt;p&gt;If you already build Snort, you may have everything you need. If not, grab the latest:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cmake to build from source&lt;/li&gt; &#xA; &lt;li&gt;daq from &lt;a href=&#34;https://github.com/snort3/libdaq&#34;&gt;https://github.com/snort3/libdaq&lt;/a&gt; for packet IO&lt;/li&gt; &#xA; &lt;li&gt;dnet from &lt;a href=&#34;https://github.com/dugsong/libdnet.git&#34;&gt;https://github.com/dugsong/libdnet.git&lt;/a&gt; for network utility functions&lt;/li&gt; &#xA; &lt;li&gt;flex &amp;gt;= 2.6.0 from &lt;a href=&#34;https://github.com/westes/flex&#34;&gt;https://github.com/westes/flex&lt;/a&gt; for JavaScript syntax parser&lt;/li&gt; &#xA; &lt;li&gt;g++ &amp;gt;= 5 or other C++14 compiler&lt;/li&gt; &#xA; &lt;li&gt;hwloc from &lt;a href=&#34;https://www.open-mpi.org/projects/hwloc/&#34;&gt;https://www.open-mpi.org/projects/hwloc/&lt;/a&gt; for CPU affinity management&lt;/li&gt; &#xA; &lt;li&gt;LuaJIT from &lt;a href=&#34;http://luajit.org&#34;&gt;http://luajit.org&lt;/a&gt; for configuration and scripting&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL from &lt;a href=&#34;https://www.openssl.org/source/&#34;&gt;https://www.openssl.org/source/&lt;/a&gt; for SHA and MD5 file signatures, the protected_content rule option, and SSL service detection&lt;/li&gt; &#xA; &lt;li&gt;pcap from &lt;a href=&#34;http://www.tcpdump.org&#34;&gt;http://www.tcpdump.org&lt;/a&gt; for tcpdump style logging&lt;/li&gt; &#xA; &lt;li&gt;pcre from &lt;a href=&#34;http://www.pcre.org&#34;&gt;http://www.pcre.org&lt;/a&gt; for regular expression pattern matching&lt;/li&gt; &#xA; &lt;li&gt;pkgconfig from &lt;a href=&#34;https://www.freedesktop.org/wiki/Software/pkg-config/&#34;&gt;https://www.freedesktop.org/wiki/Software/pkg-config/&lt;/a&gt; to locate build dependencies&lt;/li&gt; &#xA; &lt;li&gt;zlib from &lt;a href=&#34;http://www.zlib.net&#34;&gt;http://www.zlib.net&lt;/a&gt; for decompression&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional packages provide optional features. Check the manual for more.&lt;/p&gt; &#xA;&lt;h1&gt;DOWNLOAD&lt;/h1&gt; &#xA;&lt;p&gt;There is a source tarball available in the Downloads section on snort.org:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snort-3.0.0-a3.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also get the code with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/snort3/snort3.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are separate extras packages for cmake that provide additional features and demonstrate how to build plugins. The source for extras is in snort3_extra.git repo.&lt;/p&gt; &#xA;&lt;h1&gt;BUILD SNORT&lt;/h1&gt; &#xA;&lt;p&gt;Follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set up source directory:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using a github clone:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd snort3/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Otherwise, do this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tar zxf snort-tarball&#xA;cd snort-3.0.0*&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup install path:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export my_path=/path/to/snorty&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile and install:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To build with cmake and make, run configure_cmake.sh. It will automatically create and populate a new subdirectory named &#39;build&#39;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./configure_cmake.sh --prefix=$my_path&#xA;cd build&#xA;make -j $(nproc) install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you can do src/snort -V you built successfully.&lt;/li&gt; &#xA; &lt;li&gt;If you are familiar with cmake, you can run cmake/ccmake instead of configure_cmake.sh.&lt;/li&gt; &#xA; &lt;li&gt;cmake --help will list any available generators, such as Xcode. Feel free to use one, however help with those will be provided separately.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;RUN SNORT&lt;/h1&gt; &#xA;&lt;p&gt;Here are some examples. If you are using Talos rules and/or configs, you should first set any needed variables at the top of snort.lua and snort_defaults.lua.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Snort++ provides lots of help from the command line, including:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$my_path/bin/snort --help&#xA;$my_path/bin/snort --help-module suppress&#xA;$my_path/bin/snort --help-config | grep thread&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Examine and dump a pcap. In the following, replace a.pcap with your favorite:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$my_path/bin/snort -r a.pcap&#xA;$my_path/bin/snort -L dump -d -e -q -r a.pcap&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify a config, with or w/o rules:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$my_path/bin/snort -c $my_path/etc/snort/snort.lua&#xA;$my_path/bin/snort -c $my_path/etc/snort/snort.lua -R $my_path/etc/snort/sample.rules&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run IDS mode. In the following, replace pcaps/ with a path to a directory with one or more *.pcap files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$my_path/bin/snort -c $my_path/etc/snort/snort.lua -R $my_path/etc/snort/sample.rules \&#xA;    -r a.pcap -A alert_test -n 100000&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Let&#39;s suppress 1:2123. We could edit the conf or just do this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$my_path/bin/snort -c $my_path/etc/snort/snort.lua -R $my_path/etc/snort/sample.rules \&#xA;    -r a.pcap -A alert_test -n 100000 --lua &#34;suppress = { { gid = 1, sid = 2123 } }&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go whole hog on a directory with multiple packet threads:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$my_path/bin/snort -c $my_path/etc/snort/snort.lua -R $my_path/etc/snort/sample.rules \&#xA;    --pcap-filter \*.pcap --pcap-dir pcaps/ -A alert_fast --max-packet-threads 8&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional examples are given in doc/usage.txt.&lt;/p&gt; &#xA;&lt;h1&gt;DOCUMENTATION&lt;/h1&gt; &#xA;&lt;p&gt;Take a look at the manual, parts of which are generated by the code so it stays up to date:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$my_path/share/doc/snort/snort_manual.pdf&#xA;$my_path/share/doc/snort/snort_manual.html&#xA;$my_path/share/doc/snort/snort_manual/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It does not yet have much on the how and why, but it does have all the currently available configuration, etc. Some key changes to rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you must use comma separated content sub options like this: content:&#34;foo&#34;, nocase;&lt;/li&gt; &#xA; &lt;li&gt;buffer selectors must appear before the content and remain in effect until changed&lt;/li&gt; &#xA; &lt;li&gt;pcre buffer selectors were deleted&lt;/li&gt; &#xA; &lt;li&gt;check the manual for more on Snort++ vs Snort&lt;/li&gt; &#xA; &lt;li&gt;check the manual reference section to understand how parameters are defined, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It also covers new features not demonstrated here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;snort2lua, a tool to convert Snort 2.X conf and rules to the new form&lt;/li&gt; &#xA; &lt;li&gt;a new HTTP inspector&lt;/li&gt; &#xA; &lt;li&gt;a binder, for mapping configuration to traffic&lt;/li&gt; &#xA; &lt;li&gt;a wizard for port-independent configuration&lt;/li&gt; &#xA; &lt;li&gt;improved rule parsing - arbitrary whitespace, C style comments, #begin/#end comments&lt;/li&gt; &#xA; &lt;li&gt;local and remote command line shell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;SQUEAL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;o&#34;)~&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;We hope you are as excited about Snort++ as we are. Let us know what you think on the snort-users list. In the meantime, we&#39;ll keep our snout to the grindstone.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ludouzi/fooyin</title>
    <updated>2024-05-20T01:28:03Z</updated>
    <id>tag:github.com,2024-05-20:/ludouzi/fooyin</id>
    <link href="https://github.com/ludouzi/fooyin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A customisable music player&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ludouzi/fooyin/master/data/icons/sc-fooyin.svg?sanitize=true&#34; width=&#34;20%&#34; alt=&#34;fooyin logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; style=&#34;font-size: 18px;&#34;&gt; &lt;strong&gt;fooyin - A customisable music player&lt;/strong&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/ludouzi/fooyin/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/ludouzi/fooyin/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codacy.com/gh/ludouzi/fooyin/dashboard?utm_source=gh&amp;amp;utm_medium=referral&amp;amp;utm_content=&amp;amp;utm_campaign=Badge_grade&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/ae0c3e9825d849b0b64697e59e4dfea6&#34; alt=&#34;Code quality&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What is fooyin?&lt;/h2&gt; &#xA;&lt;p&gt;fooyin is a music player built around customisation. It offers a growing list of widgets to manage and play your local music collection. It&#39;s extendable through the use of plugins and many widgets make use of &lt;em&gt;FooScript&lt;/em&gt; to offer an even deeper level of control.&lt;/p&gt; &#xA;&lt;p&gt;Audio playback is supported by FFmpeg alongside multiple options for output including ALSA and PipeWire, with more to come.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;layout editing mode&lt;/em&gt; enables the entire user interface to be customised, starting from a blank slate or a preset layout.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://github.com/ludouzi/fooyin/assets/45490980/93a560cd-ed12-4848-a6e0-eca6318cb9a0&#34; alt=&#34;simple&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://github.com/ludouzi/fooyin/assets/45490980/6b706453-4661-4fbb-af0e-90d193bb298f&#34; alt=&#34;2&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://github.com/ludouzi/fooyin/assets/45490980/9351a305-5de5-4f65-87d3-e9ffee4444aa&#34; alt=&#34;3&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/ludouzi/fooyin/assets/45490980/2ff47d6d-ff0f-4333-85eb-9fd4a82e3550&#34; alt=&#34;4&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/ludouzi/fooyin/assets/45490980/d8fb8631-af72-4b94-b2f0-7c086bb7ac4a&#34; alt=&#34;5&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/ludouzi/fooyin/assets/45490980/48ecfd76-f658-4120-8a98-485faff4ad32&#34; alt=&#34;6&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: The above screenshots were taken using the Otto plasma theme.&lt;/p&gt; &#xA;&lt;p&gt;Only Linux is supported at present, though other platforms will be added at a later date.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customisable layout&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Gapless playback&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Filter library on any field(s)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create and manage playlists&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extend through plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tag editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Directory browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Waveform seekbar&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ludouzi/fooyin/master/ROADMAP.md&#34;&gt;ROADMAP.md&lt;/a&gt; to learn about fooyin&#39;s planned features.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ludouzi/fooyin/master/BUILD.md&#34;&gt;BUILD.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;You can contribute to translations on &lt;a href=&#34;https://hosted.weblate.org/projects/fooyin/&#34;&gt;Hosted Weblate&lt;/a&gt;, an open source and web-based translation platform.&lt;/p&gt;</summary>
  </entry>
</feed>