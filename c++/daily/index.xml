<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-12T01:25:01Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hyprwm/hyprpaper</title>
    <updated>2024-02-12T01:25:01Z</updated>
    <id>tag:github.com,2024-02-12:/hyprwm/hyprpaper</id>
    <link href="https://github.com/hyprwm/hyprpaper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hyprpaper is a blazing fast wayland wallpaper utility with IPC controls.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hyprpaper&lt;/h1&gt; &#xA;&lt;p&gt;Hyprpaper is a blazing fast wallpaper utility for Hyprland with the ability to dynamically change wallpapers through sockets. It will work on all wlroots-based compositors, though.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Per-output wallpapers&lt;/li&gt; &#xA; &lt;li&gt;fill or contain modes&lt;/li&gt; &#xA; &lt;li&gt;fractional scaling support&lt;/li&gt; &#xA; &lt;li&gt;IPC for blazing fast wallpaper switches&lt;/li&gt; &#xA; &lt;li&gt;preloading targets into memory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://archlinux.org/packages/community/x86_64/hyprpaper/&#34;&gt;Arch Linux&lt;/a&gt;: &lt;code&gt;pacman -S hyprpaper&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Manual:&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;The development files of these packages need to be installed on the system for &lt;code&gt;hyprpaper&lt;/code&gt; to build correctly. (Development packages are usually suffixed with &lt;code&gt;-dev&lt;/code&gt; or &lt;code&gt;-devel&lt;/code&gt; in most distros&#39; repos).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;wayland&lt;/li&gt; &#xA; &lt;li&gt;wayland-protocols&lt;/li&gt; &#xA; &lt;li&gt;pango&lt;/li&gt; &#xA; &lt;li&gt;cairo&lt;/li&gt; &#xA; &lt;li&gt;file&lt;/li&gt; &#xA; &lt;li&gt;libglvnd&lt;/li&gt; &#xA; &lt;li&gt;libglvnd-core&lt;/li&gt; &#xA; &lt;li&gt;libjpeg-turbo&lt;/li&gt; &#xA; &lt;li&gt;libwebp&lt;/li&gt; &#xA; &lt;li&gt;hyprlang&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please note hyprpaper &amp;gt; 0.5.0 depends on &lt;a href=&#34;https://github.com/hyprwm/hyprlang&#34;&gt;hyprlang&lt;/a&gt; which is new and might not be packaged for your distro yet. If that&#39;s the case, build and install it from source.&lt;/p&gt; &#xA;&lt;p&gt;To install all of these in Fedora, run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dnf install wayland-devel wayland-protocols-devel pango-devel cairo-devel file-devel libglvnd-devel libglvnd-core-devel libjpeg-turbo-devel libwebp-devel gcc-c++&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pacman -S ninja gcc wayland-protocols libjpeg-turbo libwebp pango cairo pkgconf cmake libglvnd wayland&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On OpenSUSE:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo zypper install ninja gcc-c++ wayland-protocols-devel Mesa-libGLESv3-devel file-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/hyprwm/hyprpaper&#xA;cd hyprpaper&#xA;make all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;the output binary will be in &lt;code&gt;./build/&lt;/code&gt;, copy it to your PATH, e.g. &lt;code&gt;/usr/bin&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Hyprpaper is controlled by the config, like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;~/.config/hypr/hyprpaper.conf&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;preload = /path/to/image.png&#xA;#if more than one preload is desired then continue to preload other backgrounds&#xA;preload = /path/to/next_image.png&#xA;# .. more preloads&#xA;&#xA;#set the default wallpaper(s) seen on initial workspace(s) --depending on the number of monitors used&#xA;wallpaper = monitor1,/path/to/image.png&#xA;#if more than one monitor in use, can load a 2nd image&#xA;wallpaper = monitor2,/path/to/next_image.png&#xA;# .. more monitors&#xA;&#xA;#enable splash text rendering over the wallpaper&#xA;splash = true&#xA;&#xA;#fully disable ipc&#xA;# ipc = off&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Preload will tell Hyprland to load a particular image (supported formats: png, jpg, jpeg, webp). Wallpaper will apply the wallpaper to the selected output (&lt;code&gt;monitor&lt;/code&gt; is the monitor&#39;s name, easily can be retrieved with &lt;code&gt;hyprctl monitors&lt;/code&gt;. You can leave it empty for a wildcard (aka fallback). You can also use &lt;code&gt;desc:&lt;/code&gt; followed by the monitor&#39;s description without the (PORT) at the end)&lt;/p&gt; &#xA;&lt;p&gt;You may add &lt;code&gt;contain:&lt;/code&gt; before the file path in &lt;code&gt;wallpaper=&lt;/code&gt; to set the mode to contain instead of cover:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wallpaper = monitor,contain:/path/to/image.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A Wallpaper &lt;em&gt;&lt;strong&gt;cannot&lt;/strong&gt;&lt;/em&gt; be applied without preloading. The config is &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; reloaded dynamically.&lt;/p&gt; &#xA;&lt;h2&gt;Important note to the inner workings&lt;/h2&gt; &#xA;&lt;p&gt;Preload does exactly what it says. It loads the entire wallpaper into memory. This can result in around 8 - 20MB of mem usage. It is not recommended to preload every wallpaper you have, as it will be a) taking a couple seconds at the beginning to load and b) take 100s of MBs of disk and RAM usage.&lt;/p&gt; &#xA;&lt;p&gt;Preload is meant only for situations in which you want a wallpaper to switch INSTANTLY when you issue a wallpaper keyword (e.g. wallpaper per workspace)&lt;/p&gt; &#xA;&lt;p&gt;In any and all cases when you don&#39;t mind waiting 300ms for the wallpaper to change, consider making a script that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;preloads the new wallpaper&lt;/li&gt; &#xA; &lt;li&gt;sets the new wallpaper&lt;/li&gt; &#xA; &lt;li&gt;unloads the old wallpaper (to free memory)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;IPC&lt;/h1&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;hyprctl hyprpaper&lt;/code&gt; (if on Hyprland) to issue a keyword, for example&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;If your wallpapers are stored in &lt;em&gt;~/Pictures&lt;/em&gt;, then make sure you have already preloaded the desired wallpapers in hyprpaper.conf.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;~/.config/hypr/hyprpaper.conf&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;preload = ~/Pictures/myepicpng.png&#xA;preload = ~/Pictures/myepicpngToo.png&#xA;preload = ~/Pictures/myepicpngAlso.png&#xA;#... continue as desired, but be mindful of the impact on memory.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the actual configuration for Hyprland, &lt;em&gt;hyprland.conf&lt;/em&gt;, variables can be set for ease of reading and to be used as shortcuts in the bind command. The following example uses $w shorthand wallpaper variables:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;~/.config/hypr/hyprland.conf&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$w1 = hyprctl hyprpaper wallpaper &#34;DP-1,~/Pictures/myepicpng.png&#34;&#xA;$w2 = hyprctl hyprpaper wallpaper &#34;DP-1,~/Pictures/myepicpngToo.png&#34;&#xA;$w3 = hyprctl hyprpaper wallpaper &#34;DP-1,~/Pictures/myepicpngAlso.png&#34;&#xA;#yes use quotes around desired monitor and wallpaper&#xA;#... continued with desired amount&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the variables created we can now &#34;exec&#34; the actions.&lt;/p&gt; &#xA;&lt;p&gt;Remember in Hyprland we can bind more than one action to a key so in the case where we&#39;d like to change the wallpaper when we switch workspace we have to ensure that the actions are bound to the same key such as...&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;~/.config/hypr/hyprland.conf&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bind=SUPER,1,workspace,1  #Superkey + 1 switches to workspace 1&#xA;bind=SUPER,1,exec,$w1     #SuperKey + 1 switches to wallpaper $w1 on DP-1 as defined in the variable&#xA;&#xA;bind=SUPER,2,workspace,2  #Superkey + 2 switches to workspace 2&#xA;bind=SUPER,2,exec,$w2     #SuperKey + 2 switches to wallpaper $w2 on DP-1 as defined in the variable&#xA;&#xA;bind=SUPER,3,workspace,3  #Superkey + 3 switches to workspace 3&#xA;bind=SUPER,3,exec,$w3     #SuperKey + 3 switches to wallpaper $w3 on DP-1 as defined in the variable&#xA;&#xA;#... and so on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because the default behavior in Hyprland is to also switch the workspace whenever movetoworkspace is used to move a window to another workspace you may want to include the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bind=SUPERSHIFT,1,movetoworkspace,1  #Superkey + Shift + 1 moves windows and switches to workspace 1&#xA;bind=SUPERSHIFT,1,exec,$w1           #SuperKey + Shift + 1 switches to wallpaper $w1 on DP-1 as defined in the variable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting information from hyprpaper&lt;/h2&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;hyprctl hyprpaper&lt;/code&gt; to get information about the state of hyprpaper using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;listloaded - lists the wallpapers that are currently preloaded (useful for dynamically preloading and unloading)&#xA;listactive - prints the active wallpapers hyprpaper is displaying, along with its accociated monitor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Battery life&lt;/h1&gt; &#xA;&lt;p&gt;Since the IPC has to tick every now and then, and poll in the background, battery life might be a tiny bit worse with IPC on. If you want to fully disable it, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ipc = off&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in the config.&lt;/p&gt; &#xA;&lt;h1&gt;Misc&lt;/h1&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;splash = true&lt;/code&gt; to enable the splash rendering over the wallpaper.&lt;/p&gt; &#xA;&lt;p&gt;The value for &lt;code&gt;splash_offset&lt;/code&gt; sets, in percentage, the splash rendering offset relative to the bottom of the display.&lt;/p&gt; &#xA;&lt;h2&gt;Unloading&lt;/h2&gt; &#xA;&lt;p&gt;If you use a lot of wallpapers, consider unloading those that you no longer need. This will mean you need to load them again if you wish to use them for a second time, but will free the memory used by the preloaded bitmap. (Usually 8 - 20MB, depending on the resolution)&lt;/p&gt; &#xA;&lt;p&gt;You can issue a &lt;code&gt;hyprctl hyprpaper unload [PATH]&lt;/code&gt; to do that.&lt;/p&gt; &#xA;&lt;p&gt;You can also issue a &lt;code&gt;hyprctl hyprpaper unload all&lt;/code&gt; to unload all inactive wallpapers.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;For other compositors, the socket works like socket1 of Hyprland, and is located in &lt;code&gt;/tmp/hypr/.hyprpaper.sock&lt;/code&gt; (this path only when Hyprland is not running!)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>letscontrolit/ESPEasy</title>
    <updated>2024-02-12T01:25:01Z</updated>
    <id>tag:github.com,2024-02-12:/letscontrolit/ESPEasy</id>
    <link href="https://github.com/letscontrolit/ESPEasy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy MultiSensor device based on ESP8266/ESP32&lt;/p&gt;&lt;hr&gt;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Latest Nightly&lt;/th&gt; &#xA;   &lt;th&gt;Build Status&lt;/th&gt; &#xA;   &lt;th&gt;Downloads&lt;/th&gt; &#xA;   &lt;th&gt;Docs&lt;/th&gt; &#xA;   &lt;th&gt;Patreon&lt;/th&gt; &#xA;   &lt;th&gt;Ko-Fi&lt;/th&gt; &#xA;   &lt;th&gt;PayPal&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/letscontrolit/ESPEasy/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/letscontrolit/ESPEasy/all.svg?sanitize=true&#34; alt=&#34;GitHub version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/letscontrolit/ESPEasy/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/letscontrolit/ESPEasy/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/letscontrolit/ESPEasy/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://espeasy.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/espeasy/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.patreon.com/GrovkillenTDer&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-Patreon-blue.svg?sanitize=true&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ko-fi.com/grovkillentder&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-KoFi-blue.svg?sanitize=true&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.paypal.me/espeasy&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-PayPal-blue.svg?sanitize=true&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For ways to &lt;em&gt;support&lt;/em&gt; us, see &lt;a href=&#34;https://www.letscontrolit.com/forum/viewtopic.php?f=14&amp;amp;t=5787&#34;&gt;this announcement on the forum&lt;/a&gt;, or have a look at the &lt;a href=&#34;https://www.patreon.com/GrovkillenTDer&#34;&gt;Patreon&lt;/a&gt;, &lt;a href=&#34;https://ko-fi.com/grovkillentder&#34;&gt;Ko-Fi&lt;/a&gt; or &lt;a href=&#34;https://www.paypal.me/espeasy&#34;&gt;PayPal&lt;/a&gt; links above.&lt;/p&gt; &#xA;&lt;h1&gt;ESPEasy (development branch)&lt;/h1&gt; &#xA;&lt;p&gt;Introduction &lt;a href=&#34;https://espeasy.readthedocs.io/en/latest/&#34;&gt;https://espeasy.readthedocs.io/en/latest/&lt;/a&gt; (and, mostly outdated, wiki: &lt;a href=&#34;https://www.letscontrolit.com/wiki/index.php/ESPEasy#Introduction&#34;&gt;https://www.letscontrolit.com/wiki/index.php/ESPEasy#Introduction&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MEGA&lt;/strong&gt; This is the development branch of ESPEasy. All new features go into this branch, and it has become the current stable branch. If you want to do a bugfix, do it on this branch.&lt;/p&gt; &#xA;&lt;p&gt;Check here to learn how to use this branch and help us improving ESPEasy: &lt;a href=&#34;https://espeasy.readthedocs.io/en/latest/Participate/PlatformIO.html#starter-guide-for-local-development-on-espeasy&#34;&gt;Starter guide for (local) development on ESPEasy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Web based flasher (experimental)&lt;/h2&gt; &#xA;&lt;p&gt;To make it easier to get started, one may flash a build directly to the ESP from your browser. Currently only Chrome and Edge are supported.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://td-er.nl/ESPEasy/&#34;&gt;this flash page&lt;/a&gt; to try the new web flash feature.&lt;/p&gt; &#xA;&lt;p&gt;The web flasher is using &lt;a href=&#34;https://esphome.github.io/esp-web-tools/&#34;&gt;ESP Web Tools&lt;/a&gt; made by the people behind ESPHome and Home Assistant.&lt;/p&gt; &#xA;&lt;h2&gt;Binary releases&lt;/h2&gt; &#xA;&lt;p&gt;On demand, controlled by the repo owner, our build-bot will build a new binary release: &lt;a href=&#34;https://github.com/letscontrolit/ESPEasy/releases&#34;&gt;https://github.com/letscontrolit/ESPEasy/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The releases are named something like &#39;mega-20220626&#39; (last number is the build date)&lt;/p&gt; &#xA;&lt;p&gt;Depending on your needs, we release different types of files:&lt;/p&gt; &#xA;&lt;p&gt;The name is built up from a few key parts:&lt;/p&gt; &#xA;&lt;p&gt;ESPEasy_mega_&lt;em&gt;[releasedate]&lt;/em&gt;_&lt;em&gt;[build-type]&lt;/em&gt;_&lt;em&gt;[opt-arduino-library]&lt;/em&gt;_&lt;em&gt;[hardware-type]&lt;/em&gt;_&lt;em&gt;[flash-size][filesystem-size]&lt;/em&gt;_&lt;em&gt;[opt-build-features]&lt;/em&gt;.bin&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;[build-type]&lt;/em&gt; can be any of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Build type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;included plugins&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;climate&lt;/td&gt; &#xA;   &lt;td&gt;All plugins related to climate measurement&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Climate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;custom&lt;/td&gt; &#xA;   &lt;td&gt;Custom predefined set/Defined in Custom.h&lt;/td&gt; &#xA;   &lt;td&gt;Specific&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;normal&lt;/td&gt; &#xA;   &lt;td&gt;Standard plugins&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;collection_A&lt;/td&gt; &#xA;   &lt;td&gt;Normal + plugin collection A&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Collection base + set A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;collection_B&lt;/td&gt; &#xA;   &lt;td&gt;Normal + plugin collection B&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Collection base + set B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;collection_C&lt;/td&gt; &#xA;   &lt;td&gt;Normal + plugin collection C&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Collection base + set C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;collection_D&lt;/td&gt; &#xA;   &lt;td&gt;Normal + plugin collection D&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Collection base + set D&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;collection_E&lt;/td&gt; &#xA;   &lt;td&gt;Normal + plugin collection E&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Collection base + set E&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;collection_F&lt;/td&gt; &#xA;   &lt;td&gt;Normal + plugin collection F&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Collection base + set F&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;collection_G&lt;/td&gt; &#xA;   &lt;td&gt;Normal + plugin collection G&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Collection base + set G&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;max&lt;/td&gt; &#xA;   &lt;td&gt;All available plugins&lt;/td&gt; &#xA;   &lt;td&gt;All available&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;energy&lt;/td&gt; &#xA;   &lt;td&gt;All plugins related to energy measurement&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Energy measurement&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;display&lt;/td&gt; &#xA;   &lt;td&gt;All plugins related to displays&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Displays&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;neopixel&lt;/td&gt; &#xA;   &lt;td&gt;All plugins related to neopixel&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Neopixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hard&lt;/td&gt; &#xA;   &lt;td&gt;hardware specific builds&lt;/td&gt; &#xA;   &lt;td&gt;Minimal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimal&lt;/td&gt; &#xA;   &lt;td&gt;minimal plugins for specific use-cases&lt;/td&gt; &#xA;   &lt;td&gt;Switch and Controller&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;spec_*&lt;/td&gt; &#xA;   &lt;td&gt;specialized technical builds&lt;/td&gt; &#xA;   &lt;td&gt;Not intended for regular use&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IRext&lt;/td&gt; &#xA;   &lt;td&gt;Infra-red hardware specific&lt;/td&gt; &#xA;   &lt;td&gt;Sending and receiving IR cmd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;safeboot&lt;/td&gt; &#xA;   &lt;td&gt;(Experimental) &lt;code&gt;safeboot&lt;/code&gt; build to enable&lt;br&gt;most/all plugins on 4MB Flash boards&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;[opt-arduino-library]&lt;/em&gt; (optional) can be any of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Arduino library&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;alt_wifi&lt;/td&gt; &#xA;   &lt;td&gt;Alternative WiFi configuration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;beta&lt;/td&gt; &#xA;   &lt;td&gt;Arduino Beta release&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sdk3&lt;/td&gt; &#xA;   &lt;td&gt;Arduino SDK v.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;core_274&lt;/td&gt; &#xA;   &lt;td&gt;Arduino Core 2.7.4 release&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;core_302&lt;/td&gt; &#xA;   &lt;td&gt;Arduino Core 3.0.2 release&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;core_274_sdk3&lt;/td&gt; &#xA;   &lt;td&gt;Arduino Core 2.7.4 SDK v.3 release&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;[hardware-type]&lt;/em&gt; can be any of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hardware type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESP8266&lt;/td&gt; &#xA;   &lt;td&gt;Espressif ESP8266/ESP8285 generic boards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WROOM02&lt;/td&gt; &#xA;   &lt;td&gt;Espressif ESP8266 WRoom02 boards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESP32&lt;/td&gt; &#xA;   &lt;td&gt;Espressif ESP32 generic boards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESP32solo1&lt;/td&gt; &#xA;   &lt;td&gt;Espressif ESP32-Solo1 generic boards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESP32s2&lt;/td&gt; &#xA;   &lt;td&gt;Espressif ESP32-S2 generic boards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESP32c3&lt;/td&gt; &#xA;   &lt;td&gt;Espressif ESP32-C3 generic boards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESP32s3&lt;/td&gt; &#xA;   &lt;td&gt;Espressif ESP32-S3 generic boards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESP32c2&lt;/td&gt; &#xA;   &lt;td&gt;Espressif ESP32-C2 generic boards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESP32c6&lt;/td&gt; &#xA;   &lt;td&gt;Espressif ESP32-C6 generic boards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESP32-wrover-kit&lt;/td&gt; &#xA;   &lt;td&gt;Espressif ESP32 wrover-kit boards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SONOFF&lt;/td&gt; &#xA;   &lt;td&gt;Sonoff hardware specific&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;other_POW&lt;/td&gt; &#xA;   &lt;td&gt;Switch with power measurement&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shelly_1&lt;/td&gt; &#xA;   &lt;td&gt;Shelly 1 switch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shelly_PLUG_S&lt;/td&gt; &#xA;   &lt;td&gt;Shelly plug S switch with power measurement&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ventus&lt;/td&gt; &#xA;   &lt;td&gt;Ventus W266 weather station&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LCtech_relay&lt;/td&gt; &#xA;   &lt;td&gt;LC-tech serial switch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;N.B. Starting 2022/07/23, 1M ESP8266 builds can also be used on ESP8285 units and thus there is no longer a specific ESP8285 build anymore.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;[flash-size]&lt;/em&gt; can be any of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Flash size&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1M&lt;/td&gt; &#xA;   &lt;td&gt;1 MB with 128 kB filesystem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2M&lt;/td&gt; &#xA;   &lt;td&gt;2 MB with 128 kB filesystem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2M256&lt;/td&gt; &#xA;   &lt;td&gt;2 MB with 256 kB filesystem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2M320k&lt;/td&gt; &#xA;   &lt;td&gt;2 MB with 320 kB filesystem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4M1M&lt;/td&gt; &#xA;   &lt;td&gt;4 MB with 1 MB filesystem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4M2M&lt;/td&gt; &#xA;   &lt;td&gt;4 MB with 2 MB filesystem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16M&lt;/td&gt; &#xA;   &lt;td&gt;16 MB with 14 MB filesystem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4M316k&lt;/td&gt; &#xA;   &lt;td&gt;4 MB with 316 kB filesystem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8M1M&lt;/td&gt; &#xA;   &lt;td&gt;8 MB with 1 MB filesystem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16M1M&lt;/td&gt; &#xA;   &lt;td&gt;16 MB with 1 MB filesystem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16M8M&lt;/td&gt; &#xA;   &lt;td&gt;16 MB with 8 MB filesystem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;N.B. Starting with release 2023/12/25, All ESP32 LittleFS builds use IDF 5.1, to support newer ESP32 chips like ESP32-C2 and ESP32-C6. Other SPIFFS based ESP32 builds will be migrated to LittleFS as SPIFFS is no longer available in IDF 5 and later. A migration plan will be made available in 2024.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;[opt-build-features]&lt;/em&gt; can be any of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Build features&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LittleFS&lt;/td&gt; &#xA;   &lt;td&gt;Use LittleFS instead of SPIFFS filesystem (SPIFFS is unstable &amp;gt; 2 MB, and no longer supported in IDF &amp;gt; 5)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VCC&lt;/td&gt; &#xA;   &lt;td&gt;Analog input configured to measure VCC voltage (ESP8266 only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OTA&lt;/td&gt; &#xA;   &lt;td&gt;Arduino OTA (Over The Air) update feature enabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Domoticz&lt;/td&gt; &#xA;   &lt;td&gt;Only Domoticz controllers (HTTP) and plugins included&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Domoticz_MQTT&lt;/td&gt; &#xA;   &lt;td&gt;Only Domoticz controllers (MQTT) and plugins included&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FHEM_HA&lt;/td&gt; &#xA;   &lt;td&gt;Only FHEM/OpenHAB/Home Assistant (MQTT) controllers and plugins included&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ETH&lt;/td&gt; &#xA;   &lt;td&gt;Ethernet interface enabled (ESP32-classic only)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OPI_PSRAM&lt;/td&gt; &#xA;   &lt;td&gt;Specific configuration to enable PSRAM detection, ESP32-S3 only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CDC&lt;/td&gt; &#xA;   &lt;td&gt;Support USBCDC/HWCDC-serial console on ESP32-C3, ESP32-S2, ESP32-S3 and ESP32-C6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;noOTA/NO_OTA&lt;/td&gt; &#xA;   &lt;td&gt;Does not support OTA (Over The Air-updating of the firmware) Use &lt;a href=&#34;https://td-er.nl/ESPEasy/&#34;&gt;the flash page&lt;/a&gt; or ESPTool via USB Serial&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Some example firmware names:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Firmware name&lt;/th&gt; &#xA;   &lt;th&gt;Hardware&lt;/th&gt; &#xA;   &lt;th&gt;Included plugins&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESPEasy_mega-20230822_normal_ESP8266_1M.bin&lt;/td&gt; &#xA;   &lt;td&gt;ESP8266/ESP8285 with 1MB flash&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESPEasy_mega-20230822_normal_ESP8266_4M1M.bin&lt;/td&gt; &#xA;   &lt;td&gt;ESP8266 with 4MB flash&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESPEasy_mega-20230822_collection_A_ESP8266_4M1M.bin&lt;/td&gt; &#xA;   &lt;td&gt;ESP8266 with 4MB flash&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Collection base + set A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESPEasy_mega-20230822_normal_ESP32_4M316k.bin&lt;/td&gt; &#xA;   &lt;td&gt;ESP32 with 4MB flash&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESPEasy_mega-20230822_collection_A_ESP32_4M316k.bin&lt;/td&gt; &#xA;   &lt;td&gt;ESP32 with 4MB flash&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Collection base + set A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESPEasy_mega-20230822_collection_B_ESP32_4M316k.bin&lt;/td&gt; &#xA;   &lt;td&gt;ESP32 with 4MB flash&lt;/td&gt; &#xA;   &lt;td&gt;Stable + Collection base + set B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESPEasy_mega-20230822_max_ESP32s3_8M1M_LittleFS_CDC.bin&lt;/td&gt; &#xA;   &lt;td&gt;ESP32-S3 with 8MB flash, CDC-serial&lt;/td&gt; &#xA;   &lt;td&gt;All available plugins&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESPEasy_mega-20230822_max_ESP32s3_8M1M_LittleFS_OPI_PSRAM_CDC.bin&lt;/td&gt; &#xA;   &lt;td&gt;ESP32-S3 8MB flash, PSRAM, CDC-serial&lt;/td&gt; &#xA;   &lt;td&gt;All available plugins&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESPEasy_mega-20230822_max_ESP32_16M1M.bin&lt;/td&gt; &#xA;   &lt;td&gt;ESP32 with 16MB flash&lt;/td&gt; &#xA;   &lt;td&gt;All available plugins&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESPEasy_mega-20230822_max_ESP32_16M8M_LittleFS.bin&lt;/td&gt; &#xA;   &lt;td&gt;ESP32 with 16MB flash&lt;/td&gt; &#xA;   &lt;td&gt;All available plugins&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;NB: Since 2023-05-10 the binary files for the different ESP32 variants (S2, C3, S3, &#39;Classic&#39;) are available in separate archives.&lt;/p&gt; &#xA;&lt;p&gt;To see what plugins are included in which collection set, you can find that on the &lt;a href=&#34;https://espeasy.readthedocs.io/en/latest/Plugin/_Plugin.html&#34;&gt;ESPEasy Plugin overview page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation &amp;amp; more info&lt;/h2&gt; &#xA;&lt;p&gt;Our new, in-depth documentation can be found at &lt;a href=&#34;https://espeasy.readthedocs.io/en/latest/&#34;&gt;ESPEasy.readthedocs.io&lt;/a&gt;. Automatically built, so always up-to-date according to the contributed contents. The old Wiki documentation can be found at &lt;a href=&#34;https://www.letscontrolit.com/wiki/index.php?title=ESPEasy&#34;&gt;letscontrolit.com/wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additional details and discussion are on the &#34;Experimental&#34; section of the forum: &lt;a href=&#34;https://www.letscontrolit.com/forum/viewforum.php?f=18&#34;&gt;https://www.letscontrolit.com/forum/viewforum.php?f=18&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/letscontrolit/ESPEasy&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Icons used&lt;/h2&gt; &#xA;&lt;p&gt;Icons on courtesy of &lt;a href=&#34;https://icons8.com/&#34;&gt;ICONS8&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>