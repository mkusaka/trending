<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:32:50Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>drogonframework/drogon</title>
    <updated>2022-08-02T01:32:50Z</updated>
    <id>tag:github.com,2022-08-02:/drogonframework/drogon</id>
    <link href="https://github.com/drogonframework/drogon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Drogon: A C++14/17/20 based HTTP web application framework running on Linux/macOS/Unix/Windows&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/an-tao/drogon/wiki/images/drogon-white.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/an-tao/drogon&#34;&gt;&lt;img src=&#34;https://travis-ci.com/an-tao/drogon.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/an-tao/drogon/workflows/Build%20Drogon/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://lgtm.com/projects/g/an-tao/drogon/alerts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/an-tao/drogon.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/drogon-web/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/drogon-web/community.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/drogon-web/community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/joinchat/_mMNGv0748ZkMDAx&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-2CA5E0?style=flat&amp;amp;logo=telegram&amp;amp;logoColor=white&#34; alt=&#34;Join the telegram group at https://t.me/joinchat/_mMNGv0748ZkMDAx&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.docker.com/u/drogonframework/repository/docker/drogonframework/drogon&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Docker-image-blue.svg?sanitize=true&#34; alt=&#34;Docker image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/drogonframework/drogon/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/drogonframework/drogon/master/README.zh-TW.md&#34;&gt;繁體中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Drogon&lt;/strong&gt; is a C++14/17-based HTTP application framework. Drogon can be used to easily build various types of web application server programs using C++. &lt;strong&gt;Drogon&lt;/strong&gt; is the name of a dragon in the American TV series &#34;Game of Thrones&#34; that I really like.&lt;/p&gt; &#xA;&lt;p&gt;Drogon is a cross-platform framework, It supports Linux, macOS, FreeBSD, OpenBSD, HaikuOS, and Windows. Its main features are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use a non-blocking I/O network lib based on epoll (kqueue under macOS/FreeBSD) to provide high-concurrency, high-performance network IO, please visit the &lt;a href=&#34;https://www.techempower.com/benchmarks/#section=data-r19&amp;amp;hw=ph&amp;amp;test=composite&#34;&gt;TFB Tests Results&lt;/a&gt; for more details;&lt;/li&gt; &#xA; &lt;li&gt;Provide a completely asynchronous programming mode;&lt;/li&gt; &#xA; &lt;li&gt;Support Http1.0/1.1 (server side and client side);&lt;/li&gt; &#xA; &lt;li&gt;Based on template, a simple reflection mechanism is implemented to completely decouple the main program framework, controllers and views.&lt;/li&gt; &#xA; &lt;li&gt;Support cookies and built-in sessions;&lt;/li&gt; &#xA; &lt;li&gt;Support back-end rendering, the controller generates the data to the view to generate the Html page. Views are described by CSP template files, C++ codes are embedded into Html pages through CSP tags. And the drogon command-line tool automatically generates the C++ code files for compilation;&lt;/li&gt; &#xA; &lt;li&gt;Support view page dynamic loading (dynamic compilation and loading at runtime);&lt;/li&gt; &#xA; &lt;li&gt;Provide a convenient and flexible routing solution from the path to the controller handler;&lt;/li&gt; &#xA; &lt;li&gt;Support filter chains to facilitate the execution of unified logic (such as login verification, Http Method constraint verification, etc.) before handling HTTP requests;&lt;/li&gt; &#xA; &lt;li&gt;Support https (based on OpenSSL);&lt;/li&gt; &#xA; &lt;li&gt;Support WebSocket (server side and client side);&lt;/li&gt; &#xA; &lt;li&gt;Support JSON format request and response, very friendly to the Restful API application development;&lt;/li&gt; &#xA; &lt;li&gt;Support file download and upload;&lt;/li&gt; &#xA; &lt;li&gt;Support gzip, brotli compression transmission;&lt;/li&gt; &#xA; &lt;li&gt;Support pipelining;&lt;/li&gt; &#xA; &lt;li&gt;Provide a lightweight command line tool, drogon_ctl, to simplify the creation of various classes in Drogon and the generation of view code;&lt;/li&gt; &#xA; &lt;li&gt;Support non-blocking I/O based asynchronously reading and writing database (PostgreSQL and MySQL(MariaDB) database);&lt;/li&gt; &#xA; &lt;li&gt;Support asynchronously reading and writing sqlite3 database based on thread pool;&lt;/li&gt; &#xA; &lt;li&gt;Support Redis with asynchronous reading and writing;&lt;/li&gt; &#xA; &lt;li&gt;Support ARM Architecture;&lt;/li&gt; &#xA; &lt;li&gt;Provide a convenient lightweight ORM implementation that supports for regular object-to-database bidirectional mapping;&lt;/li&gt; &#xA; &lt;li&gt;Support plugins which can be installed by the configuration file at load time;&lt;/li&gt; &#xA; &lt;li&gt;Support AOP with build-in joinpoints.&lt;/li&gt; &#xA; &lt;li&gt;Support C++ coroutines&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A very simple example&lt;/h2&gt; &#xA;&lt;p&gt;Unlike most C++ frameworks, the main program of the drogon application can be kept clean and simple. Drogon uses a few tricks to decouple controllers from the main program. The routing settings of controllers can be done through macros or configuration file.&lt;/p&gt; &#xA;&lt;p&gt;Below is the main program of a typical drogon application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;drogon/drogon.h&amp;gt;&#xA;using namespace drogon;&#xA;int main()&#xA;{&#xA;    app().setLogPath(&#34;./&#34;)&#xA;         .setLogLevel(trantor::Logger::kWarn)&#xA;         .addListener(&#34;0.0.0.0&#34;, 80)&#xA;         .setThreadNum(16)&#xA;         .enableRunAsDaemon()&#xA;         .run();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can be further simplified by using configuration file as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;drogon/drogon.h&amp;gt;&#xA;using namespace drogon;&#xA;int main()&#xA;{&#xA;    app().loadConfigFile(&#34;./config.json&#34;).run();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Drogon provides some interfaces for adding controller logic directly in the main() function, for example, user can register a handler like this in Drogon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;app().registerHandler(&#34;/test?username={name}&#34;,&#xA;                    [](const HttpRequestPtr&amp;amp; req,&#xA;                       std::function&amp;lt;void (const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback,&#xA;                       const std::string &amp;amp;name)&#xA;                    {&#xA;                        Json::Value json;&#xA;                        json[&#34;result&#34;]=&#34;ok&#34;;&#xA;                        json[&#34;message&#34;]=std::string(&#34;hello,&#34;)+name;&#xA;                        auto resp=HttpResponse::newHttpJsonResponse(json);&#xA;                        callback(resp);&#xA;                    },&#xA;                    {Get,&#34;LoginFilter&#34;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While such interfaces look intuitive, they are not suitable for complex business logic scenarios. Assuming there are tens or even hundreds of handlers that need to be registered in the framework, isn&#39;t it a better practice to implement them separately in their respective classes? So unless your logic is very simple, we don&#39;t recommend using above interfaces. Instead, we can create an HttpSimpleController as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/// The TestCtrl.h file&#xA;#pragma once&#xA;#include &amp;lt;drogon/HttpSimpleController.h&amp;gt;&#xA;using namespace drogon;&#xA;class TestCtrl:public drogon::HttpSimpleController&amp;lt;TestCtrl&amp;gt;&#xA;{&#xA;public:&#xA;    void asyncHandleHttpRequest(const HttpRequestPtr&amp;amp; req, std::function&amp;lt;void (const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback) override;&#xA;    PATH_LIST_BEGIN&#xA;    PATH_ADD(&#34;/test&#34;,Get);&#xA;    PATH_LIST_END&#xA;};&#xA;&#xA;/// The TestCtrl.cc file&#xA;#include &#34;TestCtrl.h&#34;&#xA;void TestCtrl::asyncHandleHttpRequest(const HttpRequestPtr&amp;amp; req,&#xA;                                      std::function&amp;lt;void (const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback)&#xA;{&#xA;    //write your application logic here&#xA;    auto resp = HttpResponse::newHttpResponse();&#xA;    resp-&amp;gt;setBody(&#34;&amp;lt;p&amp;gt;Hello, world!&amp;lt;/p&amp;gt;&#34;);&#xA;    resp-&amp;gt;setExpiredTime(0);&#xA;    callback(resp);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Most of the above programs can be automatically generated by the command line tool &lt;code&gt;drogon_ctl&lt;/code&gt; provided by drogon&lt;/strong&gt; (The command is &lt;code&gt;drogon_ctl create controller TestCtrl&lt;/code&gt;). All the user needs to do is add their own business logic. In the example, the controller returns a &lt;code&gt;Hello, world!&lt;/code&gt; string when the client accesses the &lt;code&gt;http://ip/test&lt;/code&gt; URL.&lt;/p&gt; &#xA;&lt;p&gt;For JSON format response, we create the controller as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/// The header file&#xA;#pragma once&#xA;#include &amp;lt;drogon/HttpSimpleController.h&amp;gt;&#xA;using namespace drogon;&#xA;class JsonCtrl : public drogon::HttpSimpleController&amp;lt;JsonCtrl&amp;gt;&#xA;{&#xA;  public:&#xA;    void asyncHandleHttpRequest(const HttpRequestPtr &amp;amp;req, std::function&amp;lt;void(const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback) override;&#xA;    PATH_LIST_BEGIN&#xA;    //list path definitions here;&#xA;    PATH_ADD(&#34;/json&#34;, Get);&#xA;    PATH_LIST_END&#xA;};&#xA;&#xA;/// The source file&#xA;#include &#34;JsonCtrl.h&#34;&#xA;void JsonCtrl::asyncHandleHttpRequest(const HttpRequestPtr &amp;amp;req,&#xA;                                      std::function&amp;lt;void(const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback)&#xA;{&#xA;    Json::Value ret;&#xA;    ret[&#34;message&#34;] = &#34;Hello, World!&#34;;&#xA;    auto resp = HttpResponse::newHttpJsonResponse(ret);&#xA;    callback(resp);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s go a step further and create a demo RESTful API with the HttpController class, as shown below (Omit the source file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/// The header file&#xA;#pragma once&#xA;#include &amp;lt;drogon/HttpController.h&amp;gt;&#xA;using namespace drogon;&#xA;namespace api&#xA;{&#xA;namespace v1&#xA;{&#xA;class User : public drogon::HttpController&amp;lt;User&amp;gt;&#xA;{&#xA;  public:&#xA;    METHOD_LIST_BEGIN&#xA;    //use METHOD_ADD to add your custom processing function here;&#xA;    METHOD_ADD(User::getInfo, &#34;/{id}&#34;, Get);                  //path is /api/v1/User/{arg1}&#xA;    METHOD_ADD(User::getDetailInfo, &#34;/{id}/detailinfo&#34;, Get);  //path is /api/v1/User/{arg1}/detailinfo&#xA;    METHOD_ADD(User::newUser, &#34;/{name}&#34;, Post);                 //path is /api/v1/User/{arg1}&#xA;    METHOD_LIST_END&#xA;    //your declaration of processing function maybe like this:&#xA;    void getInfo(const HttpRequestPtr &amp;amp;req, std::function&amp;lt;void(const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback, int userId) const;&#xA;    void getDetailInfo(const HttpRequestPtr &amp;amp;req, std::function&amp;lt;void(const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback, int userId) const;&#xA;    void newUser(const HttpRequestPtr &amp;amp;req, std::function&amp;lt;void(const HttpResponsePtr &amp;amp;)&amp;gt; &amp;amp;&amp;amp;callback, std::string &amp;amp;&amp;amp;userName);&#xA;  public:&#xA;    User()&#xA;    {&#xA;        LOG_DEBUG &amp;lt;&amp;lt; &#34;User constructor!&#34;;&#xA;    }&#xA;};&#xA;} // namespace v1&#xA;} // namespace api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, users can use the &lt;code&gt;HttpController&lt;/code&gt; to map paths and parameters at the same time. This is a very convenient way to create a RESTful API application.&lt;/p&gt; &#xA;&lt;p&gt;In addition, you can also find that all handler interfaces are in asynchronous mode, where the response is returned by a callback object. This design is for performance reasons because in asynchronous mode the drogon application can handle a large number of concurrent requests with a small number of threads.&lt;/p&gt; &#xA;&lt;p&gt;After compiling all of the above source files, we get a very simple web application. This is a good start. &lt;strong&gt;For more information, please visit the &lt;a href=&#34;https://github.com/an-tao/drogon/wiki/ENG-01-Overview&#34;&gt;wiki&lt;/a&gt; or &lt;a href=&#34;https://drogon.docsforge.com/master/overview/&#34;&gt;DocsForge&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Every contribution is welcome. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/drogonframework/drogon/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Qv2ray/Qv2ray</title>
    <updated>2022-08-02T01:32:50Z</updated>
    <id>tag:github.com,2022-08-02:/Qv2ray/Qv2ray</id>
    <link href="https://github.com/Qv2ray/Qv2ray" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⭐ Linux / Windows / macOS 跨平台 V2Ray 客户端 | 支持 VMess / VLESS / SSR / Trojan / Trojan-Go / NaiveProxy / HTTP / HTTPS / SOCKS5 | 使用 C++ / Qt 开发 | 可拓展插件式设计 ⭐&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;210&#34; height=&#34;210&#34; align=&#34;left&#34; style=&#34;float: left; margin: 0 10px 0 0;&#34; src=&#34;https://raw.githubusercontent.com/Qv2ray/Qv2ray/master/assets/icons/qv2ray.png&#34; alt=&#34;Qv2ray&#34;&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;h1&gt;Qv2ray - Unleash Your V2Ray&lt;/h1&gt; 使用 Qt 框架的跨平台 V2Ray 客户端。支持 Windows, Linux, macOS &#xA;&lt;br&gt; 插件系统支持 SSR / Trojan / Trojan-Go / NaiveProxy &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Qv2ray/Qv2ray/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/Qv2ray/Qv2ray/latest/total?style=flat-square&amp;amp;logo=github&#34; alt=&#34;GitHub Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Qv2ray/Qv2ray/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/Qv2ray/Qv2ray/total?label=downloads-total&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;GitHub All Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;本项目已不再维护&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Qv2ray: &lt;em&gt;2019-03-28 - 2021-08-17&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;自 4 月 30 日开发者内部出现矛盾之后的四个月中，并无活跃开发者参与维护，其他组织成员也并未有足够贡献量/能力，因此我们决定停止维护本项目，最新 Release 可见于 &lt;a href=&#34;https://github.com/Qv2ray/Qv2ray/releases/tag/v2.7.0&#34;&gt;v2.7.0&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;感谢所有 Qv2ray 用户，项目组成员与外部贡献者，V2Fly 项目组成员及 V2Ray-Core 外部贡献者&lt;/p&gt; &#xA;&lt;p&gt;致敬&lt;/p&gt; &#xA;&lt;p&gt;gcc 写于 8 月 17 日&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Availability &amp;amp; CI/CD Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/Qv2ray/Qv2ray&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/com/Qv2ray/Qv2ray?label=snapcraft-travis&amp;amp;logo=github&#34; alt=&#34;Snap Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Qv2ray/Qv2ray/actions/workflows/deb.yml&#34;&gt;&lt;img src=&#34;https://github.com/Qv2ray/Qv2ray/actions/workflows/deb.yml/badge.svg?sanitize=true&#34; alt=&#34;Qv2ray build debian package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Qv2ray/Qv2ray/actions/workflows/nsis.yml&#34;&gt;&lt;img src=&#34;https://github.com/Qv2ray/Qv2ray/actions/workflows/nsis.yml/badge.svg?sanitize=true&#34; alt=&#34;Qv2ray Windows Installer&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Qv2ray/Qv2ray/actions/workflows/build-qv2ray-cmake.yml&#34;&gt;&lt;img src=&#34;https://github.com/Qv2ray/Qv2ray/actions/workflows/build-qv2ray-cmake.yml/badge.svg?sanitize=true&#34; alt=&#34;Qv2ray build matrix - cmake&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Qv2ray/Qv2ray/actions/workflows/build-qv2ray-qt6.yml&#34;&gt;&lt;img src=&#34;https://github.com/Qv2ray/Qv2ray/actions/workflows/build-qv2ray-qt6.yml/badge.svg?sanitize=true&#34; alt=&#34;Qv2ray build matrix - Qt6&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ArchLinuxCN&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://build.archlinuxcn.org/packages/#/qv2ray&#34;&gt; &lt;img alt=&#34;ArchlinuxCN Stable&#34; src=&#34;https://img.shields.io/badge/dynamic/json?label=archlinuxcn-stable&amp;amp;query=%24.latest.pkgver&amp;amp;url=https%3A%2F%2Fbuild.archlinuxcn.org%2Fapi%2Fpackages%2Fqv2ray&#34;&gt; &lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://build.archlinuxcn.org/packages/#/qv2ray-dev-git&#34;&gt; &lt;img alt=&#34;ArchlinuxCN Development&#34; src=&#34;https://img.shields.io/badge/dynamic/json?label=archlinuxcn-dev-git&amp;amp;query=%24.latest.pkgver&amp;amp;url=https%3A%2F%2Fbuild.archlinuxcn.org%2Fapi%2Fpackages%2Fqv2ray-dev-git&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AUR&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/qv2ray&#34;&gt; &lt;img alt=&#34;AUR Stable&#34; src=&#34;https://img.shields.io/aur/version/qv2ray?label=aur-stable&#34;&gt; &lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/qv2ray-dev-git&#34;&gt; &lt;img alt=&#34;AUR Development&#34; src=&#34;https://img.shields.io/aur/version/qv2ray-dev-git?label=aur-development&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://build.opensuse.org/package/show/home:zzndb:Qv2ray/Qv2ray&#34;&gt; &lt;img alt=&#34;OBS Stable&#34; src=&#34;https://img.shields.io/badge/dynamic/xml?color=3c6eb4&amp;amp;label=OBS%20stable&amp;amp;query=substring-before%28substring-after%28%2F%2F%40filename%5Bcontains%28.%2C%20%27src.rpm%27%29%5D%2C%20%27Qv2ray-%27%29%2C%20%27-%27%29&amp;amp;url=https%3A%2F%2Fapi.opensuse.org%2Fpublic%2Fbuild%2Fhome%3Azzndb%3AQv2ray%2FFedora_Rawhide%2Fx86_64%2FQv2ray&#34;&gt; &lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://build.opensuse.org/package/show/home:zzndb:Qv2ray/Qv2ray-preview&#34;&gt; &lt;img alt=&#34;OBS Preview&#34; src=&#34;https://img.shields.io/badge/dynamic/xml?color=3c6eb4&amp;amp;label=OBS%20preview&amp;amp;query=substring-before%28substring-after%28%2F%2F%40filename%5Bcontains%28.%2C%20%27src.rpm%27%29%5D%2C%20%27Qv2ray-preview-%27%29%2C%20%27-%27%29&amp;amp;url=https%3A%2F%2Fapi.opensuse.org%2Fpublic%2Fbuild%2Fhome%3Azzndb%3AQv2ray%2FFedora_Rawhide%2Fx86_64%2FQv2ray-preview&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flathub&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flathub.org/apps/details/com.github.Qv2ray&#34;&gt;&lt;img alt=&#34;flathub&#34; src=&#34;https://img.shields.io/badge/flathub-available-success&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scoop&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/lukesampson/scoop-extras/raw/master/bucket/qv2ray.json&#34;&gt;&lt;img alt=&#34;scoop&#34; src=&#34;https://img.shields.io/badge/scoop--extras-available-blue&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chocolatey&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chocolatey.org/packages/qv2ray&#34;&gt;&lt;img alt=&#34;Chocolatey Version&#34; src=&#34;https://img.shields.io/chocolatey/v/qv2ray&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Snapcraft&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://snapcraft.io/qv2ray/&#34;&gt;&lt;img alt=&#34;snap&#34; src=&#34;https://snapcraft.io/qv2ray/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;openSUSE&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://build.opensuse.org/package/show/home:zzndb:Qv2ray/Qv2ray&#34;&gt; &lt;img alt=&#34;OBS Stable&#34; src=&#34;https://img.shields.io/badge/dynamic/xml?color=73ba25&amp;amp;label=OBS%20stable&amp;amp;query=substring-before%28substring-after%28%2F%2F%40filename%5Bcontains%28.%2C%20%27src.rpm%27%29%5D%2C%20%27Qv2ray-%27%29%2C%20%27-%27%29&amp;amp;url=https%3A%2F%2Fapi.opensuse.org%2Fpublic%2Fbuild%2Fhome%3Azzndb%3AQv2ray%2FopenSUSE_Tumbleweed%2Fx86_64%2FQv2ray&#34;&gt; &lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://build.opensuse.org/package/show/home:zzndb:Qv2ray/Qv2ray-preview&#34;&gt; &lt;img alt=&#34;OBS Stable&#34; src=&#34;https://img.shields.io/badge/dynamic/xml?color=73ba25&amp;amp;label=OBS%20preview&amp;amp;query=substring-before%28substring-after%28%2F%2F%40filename%5Bcontains%28.%2C%20%27src.rpm%27%29%5D%2C%20%27Qv2ray-preview-%27%29%2C%20%27-%27%29&amp;amp;url=https%3A%2F%2Fapi.opensuse.org%2Fpublic%2Fbuild%2Fhome%3Azzndb%3AQv2ray%2FopenSUSE_Tumbleweed%2Fx86_64%2FQv2ray-preview&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Translation Platform: &lt;strong&gt;&lt;a href=&#34;https://crowdin.com/project/qv2ray&#34;&gt;Crowdin&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=Qv2ray&#34;&gt;JetBrains Developer Toolbox&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Licences&lt;/h2&gt; &#xA;&lt;p&gt;This is free software, and you are welcome to redistribute it under certain conditions.&lt;/p&gt; &#xA;&lt;h3&gt;Third-party Libraries and Resources&lt;/h3&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://raw.githubusercontent.com/Qv2ray/Qv2ray/dev/assets/credit.html&#34;&gt;assets/credit.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Qv2ray is licenced under &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    Qv2ray, A Qt frontend for V2Ray. Written in C++&#xA;&#xA;    This program is free software: you can redistribute it and/or modify&#xA;    it under the terms of the GNU General Public License as published by&#xA;    the Free Software Foundation, either version 3 of the License, or&#xA;    (at your option) any later version.&#xA;&#xA;    This program is distributed in the hope that it will be useful,&#xA;    but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;    GNU General Public License for more details.&#xA;&#xA;    You should have received a copy of the GNU General Public License&#xA;    along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://starchart.cc/Qv2ray/Qv2ray.svg?sanitize=true&#34; alt=&#34;stars&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>grindylow/ahoy</title>
    <updated>2022-08-02T01:32:50Z</updated>
    <id>tag:github.com,2022-08-02:/grindylow/ahoy</id>
    <link href="https://github.com/grindylow/ahoy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Various tools, examples, and documentation for communicating with Hoymiles microinverters&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/grindylow/ahoy/raw/main/doc/logo1_small.png?raw=true&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ahoy&lt;/h1&gt; &#xA;&lt;p&gt;Various tools, examples, and documentation for communicating with Hoymiles microinverters.&lt;/p&gt; &#xA;&lt;p&gt;In particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;doc/hoymiles-format-description.txt&lt;/code&gt; is a &lt;a href=&#34;https://raw.githubusercontent.com/grindylow/ahoy/main/doc/hoymiles-format-description.md&#34;&gt;detailed description of the communications format&lt;/a&gt; and the history of this project&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doc/getting-started-ESP8266.md&lt;/code&gt; shows the &lt;a href=&#34;https://raw.githubusercontent.com/grindylow/ahoy/main/doc/getting-started-ESP8266.md&#34;&gt;hardware setup for an ESP8266-based system&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;tools&lt;/code&gt; folder contains various software tools for RaspberryPi, Arduino and ESP8266/ESP32: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/grindylow/ahoy/main/tools/esp8266/&#34;&gt;version for ESP8266&lt;/a&gt; that includes an web interface &lt;img src=&#34;https://raw.githubusercontent.com/grindylow/actions/workflows/compile_esp8266.yml/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/grindylow/ahoy/main/tools/nano/NRF24_SendRcv/&#34;&gt;version for Arduino Nano&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/grindylow/ahoy/main/tools/NRF24_SendRcv/&#34;&gt;alternative Version of the above&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/grindylow/ahoy/main/tools/HoyDtuSim/&#34;&gt;different implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/grindylow/ahoy/main/tools/rpi/&#34;&gt;implementation for Raspberry Pi&lt;/a&gt; that polls an inverter and archives results as log files/stdout as well as posting them to an MQTT broker.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contributors are always welcome!&lt;/p&gt;</summary>
  </entry>
</feed>