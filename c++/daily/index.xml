<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T01:34:00Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>manticoresoftware/manticoresearch</title>
    <updated>2022-07-31T01:34:00Z</updated>
    <id>tag:github.com,2022-07-31:/manticoresoftware/manticoresearch</id>
    <link href="https://github.com/manticoresoftware/manticoresearch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy to use open source fast database for search | Good alternative to Elasticsearch now | Drop-in replacement for E in the ELK soon&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://manticoresearch.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;img src=&#34;https://manticoresearch.com/images/logo.svg?sanitize=true&#34; width=&#34;50%&#34; alt=&#34;Manicore Search Logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://manticoresearch.com&#34;&gt;Website&lt;/a&gt; • &lt;a href=&#34;http://bit.ly/2Q9uGj4&#34;&gt;Downloads&lt;/a&gt; • &lt;a href=&#34;https://manual.manticoresearch.com&#34;&gt;Docs&lt;/a&gt; • &lt;a href=&#34;https://play.manticoresearch.com&#34;&gt;Courses&lt;/a&gt; • &lt;a href=&#34;https://forum.manticoresearch.com&#34;&gt;Forum&lt;/a&gt; • &lt;a href=&#34;https://slack.manticoresearch.com&#34;&gt;Chat&lt;/a&gt; • &lt;a href=&#34;https://twitter.com/manticoresearch&#34;&gt;Twitter&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;❗Read recent &lt;a href=&#34;https://manticoresearch.com/blog/manticore-alternative-to-elasticsearch/&#34;&gt;blog post about Manticore vs Elasticsearch&lt;/a&gt;❗&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Manticore Search is an easy to use open source fast database for search. Good alternative for Elasticsearch. What distinguishes it from other solutions is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It&#39;s very fast: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;182x faster&lt;/strong&gt; than MySQL for &lt;a href=&#34;https://db-benchmarks.com/test-hn-small/#mysql-vs-manticore-search&#34;&gt;small data&lt;/a&gt; (&lt;a href=&#34;https://github.com/db-benchmarks/db-benchmarks&#34;&gt;reproducible&lt;/a&gt;❗)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;29x faster&lt;/strong&gt; than Elasticsearch for &lt;a href=&#34;https://db-benchmarks.com/test-logs10m/#elasticsearch-with-no-tuning-vs-manticore-search-default-row-wise-storage&#34;&gt;log analytics&lt;/a&gt; (&lt;a href=&#34;https://github.com/db-benchmarks/db-benchmarks&#34;&gt;reproducible&lt;/a&gt;❗)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;15x faster&lt;/strong&gt; than Elasticsearch for &lt;a href=&#34;https://db-benchmarks.com/test-hn-small/#manticore-search-vs-elasticsearch&#34;&gt;small dataset&lt;/a&gt; (&lt;a href=&#34;https://github.com/db-benchmarks/db-benchmarks&#34;&gt;reproducible&lt;/a&gt;❗)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;5x faster&lt;/strong&gt; than Elasticsearch for &lt;a href=&#34;https://db-benchmarks.com/test-hn/#manticore-search-columnar-storage-vs-elasticsearch&#34;&gt;medium-size data&lt;/a&gt; (&lt;a href=&#34;https://github.com/db-benchmarks/db-benchmarks&#34;&gt;reproducible&lt;/a&gt;❗)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;4x faster&lt;/strong&gt; than Elasticsearch for &lt;a href=&#34;https://db-benchmarks.com/test-taxi/#manticore-search-vs-elasticsearch&#34;&gt;big data&lt;/a&gt; (&lt;a href=&#34;https://github.com/db-benchmarks/db-benchmarks&#34;&gt;reproducible&lt;/a&gt;❗)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;up to 2x faster&lt;/strong&gt; max throughput for data ingestion on a single server (&lt;a href=&#34;https://manticoresearch.com/blog/manticore-alternative-to-elasticsearch/#data-ingestion-performance&#34;&gt;reproducible&lt;/a&gt;❗)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Modern MPP architecture and smart query parallelization capabilities allow to fully utilize all your CPU cores to &lt;strong&gt;lower response time&lt;/strong&gt; as much as possible, when needed.&lt;/li&gt; &#xA; &lt;li&gt;Powerful and fast full-text searching which &lt;strong&gt;works fine for small and big datasets&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Traditional &lt;strong&gt;row-wise storage&lt;/strong&gt; for small, medium and big size datasets&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Columnar storage&lt;/strong&gt; support via the &lt;a href=&#34;https://github.com/manticoresoftware/columnar/&#34;&gt;Manticore Columnar Library&lt;/a&gt; for bigger datasets (much bigger than can fit in RAM)&lt;/li&gt; &#xA; &lt;li&gt;SQL-first: Manticore&#39;s &lt;strong&gt;native syntax is SQL&lt;/strong&gt;. It speaks SQL over HTTP and uses the MySQL protocol (you can use your preferred MySQL client)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clients&lt;/strong&gt; for &lt;a href=&#34;https://github.com/manticoresoftware/manticoresearch-php&#34;&gt;PHP&lt;/a&gt;, &lt;a href=&#34;https://github.com/manticoresoftware/manticoresearch-python&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://github.com/manticoresoftware/manticoresearch-javascript&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://github.com/manticoresoftware/manticoresearch-java&#34;&gt;Java&lt;/a&gt;, &lt;a href=&#34;https://github.com/manticoresoftware/manticoresearch-elixir&#34;&gt;Elixir&lt;/a&gt; and &lt;a href=&#34;https://github.com/manticoresoftware/go-sdk&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JSON over HTTP&lt;/strong&gt;: to provide a more programmatic way to manage your data and schemas, Manticore provides a HTTP JSON protocol&lt;/li&gt; &#xA; &lt;li&gt;Written fully in C++: &lt;strong&gt;starts fast, doesn&#39;t take much RAM&lt;/strong&gt;, and low-level optimizations provide good performance&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Real-time inserts&lt;/strong&gt;: after an INSERT is made, the document can be read immediately&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.manticoresearch.com/&#34;&gt;Interactive courses&lt;/a&gt; for &lt;strong&gt;easier learning&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Built-in replication and load balancing&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Can sync&lt;/strong&gt; from MySQL/PostgreSQL/ODBC/xml/csv out of the box&lt;/li&gt; &#xA; &lt;li&gt;Not fully ACID-compliant, but &lt;strong&gt;supports transactions and binlog&lt;/strong&gt; for safe writes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.craigslist.org/&#34;&gt;Craigslist&lt;/a&gt;, &lt;a href=&#34;https://socialgist.com/&#34;&gt;Socialgist&lt;/a&gt;, &lt;a href=&#34;https://pubchem.ncbi.nlm.nih.gov/&#34;&gt;PubChem&lt;/a&gt; and many others use Manticore for efficient searching and stream filtering.&lt;/p&gt; &#xA;&lt;p&gt;Manticore Search was forked from &lt;a href=&#34;https://github.com/sphinxsearch/sphinx&#34;&gt;Sphinx 2.3.2&lt;/a&gt; in 2017.&lt;/p&gt; &#xA;&lt;h1&gt;More features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full-text search and relevance: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Over 20 &lt;a href=&#34;https://play.manticoresearch.com/fulltextintro/&#34;&gt;full-text operators&lt;/a&gt; and over 20 ranking factors&lt;/li&gt; &#xA;   &lt;li&gt;Custom ranking&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Other search capabilities: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com/Searching/Full_text_matching/Operators&#34;&gt;Rich filtering functionality&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://play.manticoresearch.com/faceting/&#34;&gt;Faceted search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://play.manticoresearch.com/geosearch/&#34;&gt;Geo-spatial search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://play.manticoresearch.com/didyoumean/&#34;&gt;Spelling correction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://play.manticoresearch.com/simpleautocomplete/&#34;&gt;Autocomplete&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;A wide range of functions for filtering and data manipulation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Natural language processing (NLP): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com/Creating_an_index/NLP_and_tokenization/Morphology&#34;&gt;Stemming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com/Creating_an_index/NLP_and_tokenization/Morphology&#34;&gt;Lemmatization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com/Creating_an_index/NLP_and_tokenization/Ignoring_stop-words#stopwords&#34;&gt;Stopwords&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com/Creating_an_index/NLP_and_tokenization/Exceptions&#34;&gt;Synonyms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com/Creating_an_index/NLP_and_tokenization/Wordforms#wordforms&#34;&gt;Wordforms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com/Creating_an_index/NLP_and_tokenization/Low-level_tokenization#charset_table&#34;&gt;Advanced tokenization at character and word level&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://play.manticoresearch.com/icu-chinese/&#34;&gt;Proper Chinese segmentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://play.manticoresearch.com/highlighting/&#34;&gt;Text highlighting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Stream filtering &lt;a href=&#34;https://play.manticoresearch.com/pq/&#34;&gt;using a &#34;percolate&#34; index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;High-availability: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Data can be distributed across servers and data-centers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://play.manticoresearch.com/replication/&#34;&gt;Synchronous replication&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Built-in load balancing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Security: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://play.manticoresearch.com/https/&#34;&gt;https support&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data storages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;row-wise - requires more RAM, provides faster performance&lt;/li&gt; &#xA;   &lt;li&gt;columnar - requires less RAM, still provides decent performance, but lower than the row-wise storage for some kinds of queries&lt;/li&gt; &#xA;   &lt;li&gt;docstore - doesn&#39;t require RAM at all, but allows only fetching original value, not sorting/grouping/filtering&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data types: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;full-text field - inverted index&lt;/li&gt; &#xA;   &lt;li&gt;int, bigint and float numeric fields in row-wise and columnar fashion&lt;/li&gt; &#xA;   &lt;li&gt;multi-value attributes (array)&lt;/li&gt; &#xA;   &lt;li&gt;string and JSON&lt;/li&gt; &#xA;   &lt;li&gt;on-disk &#34;&lt;a href=&#34;https://play.manticoresearch.com/docstore/&#34;&gt;stored&lt;/a&gt;&#34; for key-value purpose&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Integrations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com/Creating_an_index/Local_indexes/Plain_index&#34;&gt;Sync from MySQL and PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com/Adding_data_from_external_storages/Fetching_from_XML_streams#XML-file-format&#34;&gt;Sync from XML&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com/Adding_data_from_external_storages/Fetching_from_CSV,TSV#Fetching-from-TSV,CSV&#34;&gt;Sync from CSV&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com/Extensions/SphinxSE#Using-SphinxSE&#34;&gt;With MySQL as a storage engine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com/Extensions/FEDERATED&#34;&gt;With MySQL via FEDERATED engine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://manticoresearch.com/2018/06/18/using-proxysql-to-route-inserts-in-a-distributed-realtime-index/&#34;&gt;ProxySQL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/manticoresoftware/columnar&#34;&gt;Manticore Columnar Library&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Docker image is available on &lt;a href=&#34;https://dockr.ly/33biV0U&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To experiment with Manticore Search in Docker just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name manticore --rm -d manticoresearch/manticore &amp;amp;&amp;amp; docker exec -it manticore mysql -w &amp;amp;&amp;amp; docker stop manticore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then: create an index, add data and run searches. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;create table movies(title text, year int) morphology=&#39;stem_en&#39; html_strip=&#39;1&#39; stopwords=&#39;en&#39;;&#xA;&#xA;insert into movies(title, year) values (&#39;The Seven Samurai&#39;, 1954), (&#39;Bonnie and Clyde&#39;, 1954), (&#39;Reservoir Dogs&#39;, 1992), (&#39;Airplane!&#39;, 1980), (&#39;Raging Bull&#39;, 1980), (&#39;Groundhog Day&#39;, 1993), (&#39;&amp;lt;a href=&#34;http://google.com/&#34;&amp;gt;Jurassic Park&amp;lt;/a&amp;gt;&#39;, 1993), (&#39;Ferris Bueller\&#39;s Day Off&#39;, 1986);&#xA;&#xA;select highlight(), year from movies where match(&#39;the dog&#39;);&#xA;&#xA;select highlight(), year from movies where match(&#39;days&#39;) facet year;&#xA;&#xA;select * from movies where match(&#39;google&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you exit from the MySQL client, it stops and removes the container, so use this way only for testing / sandboxing purposes.&lt;/p&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://dockr.ly/33biV0U&#34;&gt;the full instruction for the docker image&lt;/a&gt; for more details including our recommendations on running it in production.&lt;/p&gt; &#xA;&lt;h3&gt;Packages&lt;/h3&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://manticoresearch.com/install/&#34;&gt;Ubuntu, Debian, Centos, Windows and MacOS packages are here&lt;/a&gt;.&lt;/h2&gt; &#xA;&lt;h3&gt;YUM repo for RHEL/Centos&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install https://repo.manticoresearch.com/manticore-repo.noarch.rpm&#xA;sudo yum install manticore manticore-columnar-lib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;APT repo for Ubuntu/Debian/Mint&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://repo.manticoresearch.com/manticore-repo.noarch.deb&#xA;sudo dpkg -i manticore-repo.noarch.deb&#xA;sudo apt update&#xA;sudo apt install manticore manticore-columnar-lib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew on MacOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install manticoresoftware/manticore/manticoresearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://manual.manticoresearch.com/Installation/Windows&#34;&gt;instruction here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS tarball&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://manual.manticoresearch.com/Installation/MacOS&#34;&gt;instruction here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation and community sites&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://manual.manticoresearch.com&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.manticoresearch.com&#34;&gt;Interactive courses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.manticoresearch.com/&#34;&gt;Manticore Community Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://slack.manticoresearch.com/&#34;&gt;Public Slack chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/manticoresoftware/manticore/issues&#34;&gt;Bug tracker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Third-party integrations&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.tiki.org/Manticore-Search&#34;&gt;https://dev.tiki.org/Manticore-Search&lt;/a&gt; - TikiWiki CMS Groupware integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EvilFreelancer/laravel-manticoresearch&#34;&gt;https://github.com/EvilFreelancer/laravel-manticoresearch&lt;/a&gt; - Laravel ManticoreSearch plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mediawiki.org/wiki/Extension:SphinxSearch&#34;&gt;https://www.mediawiki.org/wiki/Extension:SphinxSearch&lt;/a&gt; - extension for MediaWiki&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gordonbanderson/silverstripe-manticore-search&#34;&gt;https://github.com/gordonbanderson/silverstripe-manticore-search&lt;/a&gt; - integration for SilverStripe&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drwho.virtadpt.net/archive/2022-05-13/combining-manticore-and-searx/&#34;&gt;https://drwho.virtadpt.net/archive/2022-05-13/combining-manticore-and-searx/&lt;/a&gt; - integration for SearX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How we can support you&lt;/h1&gt; &#xA;&lt;p&gt;Should your company require any help - we provide full-cycle services in the areas of Sphinx and Manticore Search:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audit&lt;/li&gt; &#xA; &lt;li&gt;Support&lt;/li&gt; &#xA; &lt;li&gt;Consulting&lt;/li&gt; &#xA; &lt;li&gt;Development&lt;/li&gt; &#xA; &lt;li&gt;Training&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://manticoresearch.com/services/&#34;&gt;More details here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;❤️ How you can support Manticore Search&lt;/h1&gt; &#xA;&lt;p&gt;Manticore Search is a GPLv2-licensed Open Source project with development made possible by support from our core team, contributors, and sponsors. Building premium Open Source software is not easy. If you would like to make sure Manticore Search stays free, here is how you can help the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.paypal.me/manticoresearch&#34;&gt;Donation through PayPal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://manticoresearch.com/services&#34;&gt;Become our client and let us help you&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://geekswag.co/collections/manticore-search&#34;&gt;Buy our t-shirt or a mug&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>userver-framework/userver</title>
    <updated>2022-07-31T01:34:00Z</updated>
    <id>tag:github.com,2022-07-31:/userver-framework/userver</id>
    <link href="https://github.com/userver-framework/userver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The C++ Asynchronous Framework (beta)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;userver &lt;img src=&#34;https://raw.githubusercontent.com/userver-framework/userver/develop/scripts/docs/logo.svg?sanitize=true&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;userver&lt;/strong&gt; is an open source asynchronous framework with a rich set of abstractions for fast and comfortable creation of C++ microservices, services and utilities.&lt;/p&gt; &#xA;&lt;p&gt;The framework solves the problem of efficient I/O interactions transparently for the developers. Operations that would typically suspend the thread of execution do not suspend it. Instead of that, the thread processes other requests and tasks and returns to the handling of the operation only when it is guaranteed to execute immediately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::size_t Ins(storages::postgres::Transaction&amp;amp; tr, std::string_view key) {&#xA;  // Asynchronous execution of the SQL query in transaction. Current thread&#xA;  // handles other requests while the response from the DB is being received:&#xA;  auto res = tr.Execute(&#34;INSERT INTO keys VALUES ($1)&#34;, key);&#xA;  return res.RowsAffected();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a result, with the framework you get straightforward source code, avoid CPU-consuming context switches from OS, efficiently utilize the CPU with a small amount of execution threads.&lt;/p&gt; &#xA;&lt;h2&gt;Other Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Efficient asynchronous drivers for databases (MongoDB, PostgreSQL, Redis, ...) and data transfer protocols (HTTP, GRPC, TCP, ...), tasks construction and cancellation.&lt;/li&gt; &#xA; &lt;li&gt;Rich set of high-level components for caches, tasks, distributed locking, logging, tracing, statistics, metrics, JSON/YAML/BSON.&lt;/li&gt; &#xA; &lt;li&gt;Functionality to change the service configuration on-the-fly.&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly configurable drivers, options of the deadline propagation, timeouts, congestion-control.&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive set of asynchronous low-level synchronization primitives and OS abstractions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://userver-framework.github.io/&#34;&gt;See the docs for more info&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simdjson/simdjson</title>
    <updated>2022-07-31T01:34:00Z</updated>
    <id>tag:github.com,2022-07-31:/simdjson/simdjson</id>
    <link href="https://github.com/simdjson/simdjson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parsing gigabytes of JSON per second&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/simdjson/simdjson/workflows/Ubuntu%2018.04%20CI%20(GCC%207)/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 18.04 CI&#34;&gt; &lt;a href=&#34;https://simdjson.org/plots.html&#34;&gt;&lt;img src=&#34;https://github.com/simdjson/simdjson/workflows/Ubuntu%2020.04%20CI%20(GCC%209)/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu 20.04 CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/simdjson/simdjson/workflows/VS16-CI/badge.svg?sanitize=true&#34; alt=&#34;VS16-CI&#34;&gt; &lt;img src=&#34;https://github.com/simdjson/simdjson/workflows/MinGW64-CI/badge.svg?sanitize=true&#34; alt=&#34;MinGW64-CI&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://simdjson.org/api/2.0.0/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-doxygen-green.svg?sanitize=true&#34; alt=&#34;Doxygen Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;simdjson : Parsing gigabytes of JSON per second&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/images/logo.png&#34; width=&#34;10%&#34; style=&#34;float: right&#34;&gt; JSON is everywhere on the Internet. Servers spend a *lot* of time parsing it. We need a fresh approach. The simdjson library uses commonly available SIMD instructions and microparallel algorithms to parse JSON 4x faster than RapidJSON and 25x faster than JSON for Modern C++. &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast:&lt;/strong&gt; Over 4x faster than commonly used production-grade JSON parsers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Record Breaking Features:&lt;/strong&gt; Minify JSON at 6 GB/s, validate UTF-8 at 13 GB/s, NDJSON at 3.5 GB/s.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy:&lt;/strong&gt; First-class, easy to use and carefully documented APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strict:&lt;/strong&gt; Full JSON and UTF-8 validation, lossless parsing. Performance with no compromises.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic:&lt;/strong&gt; Selects a CPU-tailored parser at runtime. No configuration needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reliable:&lt;/strong&gt; From memory allocation to error handling, simdjson&#39;s design avoids surprises.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Peer Reviewed:&lt;/strong&gt; Our research appears in venues like VLDB Journal, Software: Practice and Experience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This library is part of the &lt;a href=&#34;https://awesomecpp.com&#34;&gt;Awesome Modern C++&lt;/a&gt; list.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#performance-results&#34;&gt;Performance results&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#real-world-usage&#34;&gt;Real-world usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#bindings-and-ports-of-simdjson&#34;&gt;Bindings and Ports of simdjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#about-simdjson&#34;&gt;About simdjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#funding&#34;&gt;Funding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#contributing-to-simdjson&#34;&gt;Contributing to simdjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The simdjson library is easily consumable with a single .h and .cpp file.&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Prerequisites: &lt;code&gt;g++&lt;/code&gt; (version 7 or better) or &lt;code&gt;clang++&lt;/code&gt; (version 6 or better), and a 64-bit system with a command-line shell (e.g., Linux, macOS, freeBSD). We also support programming environments like Visual Studio and Xcode, but different steps are needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.h&#34;&gt;simdjson.h&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.cpp&#34;&gt;simdjson.cpp&lt;/a&gt; into a directory, along with the sample file &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json&#34;&gt;twitter.json&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.h https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.cpp https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;quickstart.cpp&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;&#xA;#include &#34;simdjson.h&#34;&#xA;using namespace simdjson;&#xA;int main(void) {&#xA;    ondemand::parser parser;&#xA;    padded_string json = padded_string::load(&#34;twitter.json&#34;);&#xA;    ondemand::document tweets = parser.iterate(json);&#xA;    std::cout &amp;lt;&amp;lt; uint64_t(tweets[&#34;search_metadata&#34;][&#34;count&#34;]) &amp;lt;&amp;lt; &#34; results.&#34; &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;c++ -o quickstart quickstart.cpp simdjson.cpp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./quickstart&lt;/code&gt; &lt;pre&gt;&lt;code&gt;100 results.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Usage documentation is available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/basics.md&#34;&gt;Basics&lt;/a&gt; is an overview of how to use simdjson and its APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/performance.md&#34;&gt;Performance&lt;/a&gt; shows some more advanced scenarios and how to tune for them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/implementation-selection.md&#34;&gt;Implementation Selection&lt;/a&gt; describes runtime CPU detection and how you can work with it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://simdjson.org/api/1.0.0/annotated.html&#34;&gt;API&lt;/a&gt; contains the automatically generated API documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance results&lt;/h2&gt; &#xA;&lt;p&gt;The simdjson library uses three-quarters less instructions than state-of-the-art parser &lt;a href=&#34;https://rapidjson.org&#34;&gt;RapidJSON&lt;/a&gt;. To our knowledge, simdjson is the first fully-validating JSON parser to run at &lt;a href=&#34;https://en.wikipedia.org/wiki/Gigabyte&#34;&gt;gigabytes per second&lt;/a&gt; (GB/s) on commodity processors. It can parse millions of JSON documents per second on a single core.&lt;/p&gt; &#xA;&lt;p&gt;The following figure represents parsing speed in GB/s for parsing various files on an Intel Skylake processor (3.4 GHz) using the GNU GCC 10 compiler (with the -O3 flag). We compare against the best and fastest C++ libraries on benchmarks that load and process the data. The simdjson library offers full unicode (&lt;a href=&#34;https://en.wikipedia.org/wiki/UTF-8&#34;&gt;UTF-8&lt;/a&gt;) validation and exact number parsing.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/rome.png&#34; width=&#34;60%&#34;&gt; &#xA;&lt;p&gt;The simdjson library offers high speed whether it processes tiny files (e.g., 300 bytes) or larger files (e.g., 3MB). The following plot presents parsing speed for &lt;a href=&#34;https://github.com/simdjson/simdjson_experiments_vldb2019/raw/master/experiments/growing/gen.py&#34;&gt;synthetic files over various sizes generated with a script&lt;/a&gt; on a 3.4 GHz Skylake processor (GNU GCC 9, -O3).&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/doc/growing.png&#34; width=&#34;60%&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simdjson/simdjson_experiments_vldb2019&#34;&gt;All our experiments are reproducible&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For NDJSON files, we can exceed 3 GB/s with &lt;a href=&#34;https://github.com/simdjson/simdjson/raw/master/doc/parse_many.md&#34;&gt;our multithreaded parsing functions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Real-world usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ClickHouse/ClickHouse&#34;&gt;ClickHouse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aras-p/ClangBuildAnalyzer&#34;&gt;Clang Build Analyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shopify/heap-profiler&#34;&gt;Shopify HeapProfiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/StarRocks/starrocks&#34;&gt;StarRocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/FishStore&#34;&gt;Microsoft FishStore&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are planning to use simdjson in a product, please work from one of our releases.&lt;/p&gt; &#xA;&lt;h2&gt;Bindings and Ports of simdjson&lt;/h2&gt; &#xA;&lt;p&gt;We distinguish between &#34;bindings&#34; (which just wrap the C++ code) and a port to another programming language (which reimplements everything).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michaeleisel/zippyjson&#34;&gt;ZippyJSON&lt;/a&gt;: Swift bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gerrymanoim/libpy_simdjson/&#34;&gt;libpy_simdjson&lt;/a&gt;: high-speed Python bindings for simdjson using &lt;a href=&#34;https://github.com/quantopian/libpy&#34;&gt;libpy&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TkTech/pysimdjson&#34;&gt;pysimdjson&lt;/a&gt;: Python bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TeskaLabs/cysimdjson&#34;&gt;cysimdjson&lt;/a&gt;: high-speed Python bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simd-lite&#34;&gt;simdjson-rs&lt;/a&gt;: Rust port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SunDoge/simdjson-rust&#34;&gt;simdjson-rust&lt;/a&gt;: Rust wrapper (bindings).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EgorBo/SimdJsonSharp&#34;&gt;SimdJsonSharp&lt;/a&gt;: C# version for .NET Core (bindings and full port).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/luizperes/simdjson_nodejs&#34;&gt;simdjson_nodejs&lt;/a&gt;: Node.js bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crazyxman/simdjson_php&#34;&gt;simdjson_php&lt;/a&gt;: PHP bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saka1/simdjson_ruby&#34;&gt;simdjson_ruby&lt;/a&gt;: Ruby bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anilmaurya/fast_jsonparser&#34;&gt;fast_jsonparser&lt;/a&gt;: Ruby bindings for the simdjson project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minio/simdjson-go&#34;&gt;simdjson-go&lt;/a&gt;: Go port using Golang assembly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eddelbuettel/rcppsimdjson&#34;&gt;rcppsimdjson&lt;/a&gt;: R bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChomperT/simdjson_erlang&#34;&gt;simdjson_erlang&lt;/a&gt;: erlang bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FourierTransformer/lua-simdjson&#34;&gt;lua-simdjson&lt;/a&gt;: lua bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/hermes-json&#34;&gt;hermes-json&lt;/a&gt;: haskell bindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/travisstaloch/simdjzon&#34;&gt;simdjzon&lt;/a&gt;: zig port.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About simdjson&lt;/h2&gt; &#xA;&lt;p&gt;The simdjson library takes advantage of modern microarchitectures, parallelizing with SIMD vector instructions, reducing branch misprediction, and reducing data dependency to take advantage of each CPU&#39;s multiple execution cores.&lt;/p&gt; &#xA;&lt;p&gt;Some people &lt;a href=&#34;https://arxiv.org/abs/1902.08318&#34;&gt;enjoy reading our paper&lt;/a&gt;: A description of the design and implementation of simdjson is in our research article:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Geoff Langdale, Daniel Lemire, &lt;a href=&#34;https://arxiv.org/abs/1902.08318&#34;&gt;Parsing Gigabytes of JSON per Second&lt;/a&gt;, VLDB Journal 28 (6), 2019.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have an in-depth paper focused on the UTF-8 validation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;John Keiser, Daniel Lemire, &lt;a href=&#34;https://arxiv.org/abs/2010.03090&#34;&gt;Validating UTF-8 In Less Than One Instruction Per Byte&lt;/a&gt;, Software: Practice &amp;amp; Experience 51 (5), 2021.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also have an informal &lt;a href=&#34;https://branchfree.org/2019/02/25/paper-parsing-gigabytes-of-json-per-second/&#34;&gt;blog post providing some background and context&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the video inclined, &lt;br&gt; &lt;a href=&#34;http://www.youtube.com/watch?v=wlvKAT7SZIQ&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/wlvKAT7SZIQ/0.jpg&#34; alt=&#34;simdjson at QCon San Francisco 2019&#34;&gt;&lt;/a&gt;&lt;br&gt; (It was the best voted talk, we&#39;re kinda proud of it.)&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;The work is supported by the Natural Sciences and Engineering Research Council of Canada under grant number RGPIN-2017-03910.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to simdjson&lt;/h2&gt; &#xA;&lt;p&gt;Head over to &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for information on contributing to simdjson, and &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/HACKING.md&#34;&gt;HACKING.md&lt;/a&gt; for information on source, building, and architecture/design.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is made available under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Under Windows, we build some tools using the windows/dirent_portable.h file (which is outside our library code): it under the liberal (business-friendly) MIT license.&lt;/p&gt; &#xA;&lt;p&gt;For compilers that do not support &lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B17&#34;&gt;C++17&lt;/a&gt;, we bundle the string-view library which is published under the &lt;a href=&#34;http://www.boost.org/LICENSE_1_0.txt&#34;&gt;Boost license&lt;/a&gt;. Like the Apache license, the Boost license is a permissive license allowing commercial redistribution.&lt;/p&gt; &#xA;&lt;p&gt;For efficient number serialization, we bundle Florian Loitsch&#39;s implementation of the Grisu2 algorithm for binary to decimal floating-point numbers. The implementation was slightly modified by JSON for Modern C++ library. Both Florian Loitsch&#39;s implementation and JSON for Modern C++ are provided under the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;For runtime dispatching, we use some code from the PyTorch project licensed under 3-clause BSD.&lt;/p&gt;</summary>
  </entry>
</feed>