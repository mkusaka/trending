<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-26T01:32:30Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cisco/openh264</title>
    <updated>2023-11-26T01:32:30Z</updated>
    <id>tag:github.com,2023-11-26:/cisco/openh264</id>
    <link href="https://github.com/cisco/openh264" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source H.264 Codec&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenH264&lt;/h1&gt; &#xA;&lt;p&gt;OpenH264 is a codec library which supports H.264 encoding and decoding. It is suitable for use in real time applications such as WebRTC. See &lt;a href=&#34;http://www.openh264.org/&#34;&gt;http://www.openh264.org/&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Encoder Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Constrained Baseline Profile up to Level 5.2 (Max frame size is 36864 macro-blocks)&lt;/li&gt; &#xA; &lt;li&gt;Arbitrary resolution, not constrained to multiples of 16x16&lt;/li&gt; &#xA; &lt;li&gt;Rate control with adaptive quantization, or constant quantization&lt;/li&gt; &#xA; &lt;li&gt;Slice options: 1 slice per frame, N slices per frame, N macroblocks per slice, or N bytes per slice&lt;/li&gt; &#xA; &lt;li&gt;Multiple threads automatically used for multiple slices&lt;/li&gt; &#xA; &lt;li&gt;Temporal scalability up to 4 layers in a dyadic hierarchy&lt;/li&gt; &#xA; &lt;li&gt;Simulcast AVC up to 4 resolutions from a single input&lt;/li&gt; &#xA; &lt;li&gt;Spatial simulcast up to 4 resolutions from a single input&lt;/li&gt; &#xA; &lt;li&gt;Long Term Reference (LTR) frames&lt;/li&gt; &#xA; &lt;li&gt;Memory Management Control Operation (MMCO)&lt;/li&gt; &#xA; &lt;li&gt;Reference picture list modification&lt;/li&gt; &#xA; &lt;li&gt;Single reference frame for inter prediction&lt;/li&gt; &#xA; &lt;li&gt;Multiple reference frames when using LTR and/or 3-4 temporal layers&lt;/li&gt; &#xA; &lt;li&gt;Periodic and on-demand Instantaneous Decoder Refresh (IDR) frame insertion&lt;/li&gt; &#xA; &lt;li&gt;Dynamic changes to bit rate, frame rate, and resolution&lt;/li&gt; &#xA; &lt;li&gt;Annex B byte stream output&lt;/li&gt; &#xA; &lt;li&gt;YUV 4:2:0 planar input&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Decoder Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Constrained Baseline Profile up to Level 5.2 (Max frame size is 36864 macro-blocks)&lt;/li&gt; &#xA; &lt;li&gt;Arbitrary resolution, not constrained to multiples of 16x16&lt;/li&gt; &#xA; &lt;li&gt;Single thread for all slices&lt;/li&gt; &#xA; &lt;li&gt;Long Term Reference (LTR) frames&lt;/li&gt; &#xA; &lt;li&gt;Memory Management Control Operation (MMCO)&lt;/li&gt; &#xA; &lt;li&gt;Reference picture list modification&lt;/li&gt; &#xA; &lt;li&gt;Multiple reference frames when specified in Sequence Parameter Set (SPS)&lt;/li&gt; &#xA; &lt;li&gt;Annex B byte stream input&lt;/li&gt; &#xA; &lt;li&gt;YUV 4:2:0 planar output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;OS Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 64-bit and 32-bit&lt;/li&gt; &#xA; &lt;li&gt;Mac OS X 64-bit and 32-bit&lt;/li&gt; &#xA; &lt;li&gt;Mac OS X ARM64&lt;/li&gt; &#xA; &lt;li&gt;Linux 64-bit and 32-bit&lt;/li&gt; &#xA; &lt;li&gt;Android 64-bit and 32-bit&lt;/li&gt; &#xA; &lt;li&gt;iOS 64-bit and 32-bit&lt;/li&gt; &#xA; &lt;li&gt;Windows Phone 32-bit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architectures verified to be working&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ppc64el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Processor Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intel x86 optionally with MMX/SSE (no AVX yet, help is welcome)&lt;/li&gt; &#xA; &lt;li&gt;ARMv7 optionally with NEON, AArch64 optionally with NEON&lt;/li&gt; &#xA; &lt;li&gt;Any architecture using C/C++ fallback functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building the Library&lt;/h2&gt; &#xA;&lt;p&gt;NASM needed to be installed for assembly code: workable version 2.10.06 or above, NASM can be downloaded from &lt;a href=&#34;http://www.nasm.us/&#34;&gt;http://www.nasm.us/&lt;/a&gt;. For Mac OSX 64-bit NASM needed to be below version 2.11.08 as NASM 2.11.08 will introduce error when using RIP-relative addresses in Mac OSX 64-bit&lt;/p&gt; &#xA;&lt;p&gt;To build the arm assembly for Windows Phone, gas-preprocessor is required. It can be downloaded from git://git.libav.org/gas-preprocessor.git&lt;/p&gt; &#xA;&lt;h2&gt;For Android Builds&lt;/h2&gt; &#xA;&lt;p&gt;To build for android platform, You need to install android sdk and ndk. You also need to export &lt;code&gt;**ANDROID_SDK**/tools&lt;/code&gt; to PATH. On Linux, this can be done by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=**ANDROID_SDK**/tools:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The codec and demo can be built by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make OS=android NDKROOT=**ANDROID_NDK** TARGET=**ANDROID_TARGET**&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Valid &lt;code&gt;**ANDROID_TARGET**&lt;/code&gt; can be found in &lt;code&gt;**ANDROID_SDK**/platforms&lt;/code&gt;, such as &lt;code&gt;android-12&lt;/code&gt;. You can also set &lt;code&gt;ARCH&lt;/code&gt;, &lt;code&gt;NDKLEVEL&lt;/code&gt; according to your device and NDK version. &lt;code&gt;ARCH&lt;/code&gt; specifies the architecture of android device. Currently &lt;code&gt;arm&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;, &lt;code&gt;x86&lt;/code&gt; and &lt;code&gt;x86_64&lt;/code&gt; are supported, the default is &lt;code&gt;arm&lt;/code&gt;. (&lt;code&gt;mips&lt;/code&gt; and &lt;code&gt;mips64&lt;/code&gt; can also be used, but there&#39;s no specific optimization for those architectures.) &lt;code&gt;NDKLEVEL&lt;/code&gt; specifies android api level, the default is 12. Available possibilities can be found in &lt;code&gt;**ANDROID_NDK**/platforms&lt;/code&gt;, such as &lt;code&gt;android-21&lt;/code&gt; (strip away the &lt;code&gt;android-&lt;/code&gt; prefix).&lt;/p&gt; &#xA;&lt;p&gt;By default these commands build for the &lt;code&gt;armeabi-v7a&lt;/code&gt; ABI. To build for the other android ABIs, add &lt;code&gt;ARCH=arm64&lt;/code&gt;, &lt;code&gt;ARCH=x86&lt;/code&gt;, &lt;code&gt;ARCH=x86_64&lt;/code&gt;, &lt;code&gt;ARCH=mips&lt;/code&gt; or &lt;code&gt;ARCH=mips64&lt;/code&gt;. To build for the older &lt;code&gt;armeabi&lt;/code&gt; ABI (which has armv5te as baseline), add &lt;code&gt;APP_ABI=armeabi&lt;/code&gt; (&lt;code&gt;ARCH=arm&lt;/code&gt; is implicit). To build for 64-bit ABI, such as &lt;code&gt;arm64&lt;/code&gt;, explicitly set &lt;code&gt;NDKLEVEL&lt;/code&gt; to 21 or higher.&lt;/p&gt; &#xA;&lt;h2&gt;For iOS Builds&lt;/h2&gt; &#xA;&lt;p&gt;You can build the libraries and demo applications using xcode project files located in &lt;code&gt;codec/build/iOS/dec&lt;/code&gt; and &lt;code&gt;codec/build/iOS/enc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also build the libraries (but not the demo applications) using the make based build system from the command line. Build with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make OS=ios ARCH=**ARCH**&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Valid values for &lt;code&gt;**ARCH**&lt;/code&gt; are the normal iOS architecture names such as &lt;code&gt;armv7&lt;/code&gt;, &lt;code&gt;armv7s&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;, and &lt;code&gt;i386&lt;/code&gt; and &lt;code&gt;x86_64&lt;/code&gt; for the simulator. Another settable iOS specific parameter is &lt;code&gt;SDK_MIN&lt;/code&gt;, specifying the minimum deployment target for the built library. For other details on building using make on the command line, see &#39;For All Platforms&#39; below.&lt;/p&gt; &#xA;&lt;h2&gt;For Linux Builds&lt;/h2&gt; &#xA;&lt;p&gt;You can build the libraries (but not the demo applications) using the make based build system from the command line. Build with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make OS=linux ARCH=**ARCH**&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;ARCH&lt;/code&gt; according to your linux device . &lt;code&gt;ARCH&lt;/code&gt; specifies the architecture of the device. Currently &lt;code&gt;arm&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;, &lt;code&gt;x86&lt;/code&gt; and &lt;code&gt;x86_64&lt;/code&gt; are supported&lt;/p&gt; &#xA;&lt;p&gt;NOTICE: If your computer is x86 architecture, for build the libnary which be used on arm/aarch64 machine, you may need to use cross-compiler, for example: make OS=linux CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ ARCH=arm64 or make OS=linux CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ ARCH=arm&lt;/p&gt; &#xA;&lt;h2&gt;For Windows Builds&lt;/h2&gt; &#xA;&lt;p&gt;&#34;make&#34; must be installed. It is recommended to install the Cygwin and &#34;make&#34; must be selected to be included in the installation. After the installation, please add the Cygwin bin path to your PATH.&lt;/p&gt; &#xA;&lt;p&gt;openh264/build/AutoBuildForWindows.bat is provided to help compile the libraries on Windows platform.&lt;br&gt; Usage of the .bat script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;`AutoBuildForWindows.bat Win32-Release-ASM` for x86 Release build  &#xA;`AutoBuildForWindows.bat Win64-Release-ASM` for x86_64 Release build  &#xA;`AutoBuildForWindows.bat ARM64-Release-ASM` for arm64 release build  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for more usage, please refer to the .bat script help.&lt;/p&gt; &#xA;&lt;h2&gt;For All Platforms&lt;/h2&gt; &#xA;&lt;h2&gt;Using make&lt;/h2&gt; &#xA;&lt;p&gt;From the main project directory:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt; for automatically detecting architecture and building accordingly&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make ARCH=i386&lt;/code&gt; for x86 32-bit builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make ARCH=x86_64&lt;/code&gt; for x86 64-bit builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make ARCH=arm64&lt;/code&gt; for arm64 Mac 64-bit builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make V=No&lt;/code&gt; for a silent build (not showing the actual compiler commands)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make DEBUGSYMBOLS=True&lt;/code&gt; for two libraries, one is normal libraries, another one is removed the debugging symbol table entries (those created by the -g option)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The command line programs &lt;code&gt;h264enc&lt;/code&gt; and &lt;code&gt;h264dec&lt;/code&gt; will appear in the main project directory.&lt;/p&gt; &#xA;&lt;p&gt;A shell script to run the command-line apps is in &lt;code&gt;testbin/CmdLineExample.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Usage information can be found in &lt;code&gt;testbin/CmdLineReadMe&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using meson&lt;/h2&gt; &#xA;&lt;p&gt;Meson build definitions have been added, and are known to work on Linux and Windows, for x86 and x86 64-bit.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://mesonbuild.com/Installing.html&#34;&gt;http://mesonbuild.com/Installing.html&lt;/a&gt; for instructions on how to install meson, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;meson builddir&#xA;ninja -C builddir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;meson test -C builddir -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ninja -C builddir install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the Source&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;codec&lt;/code&gt; - encoder, decoder, console (test app), build (makefile, vcproj)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build&lt;/code&gt; - scripts for Makefile build system&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt; - GTest unittest files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;testbin&lt;/code&gt; - autobuild scripts, test app config files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;res&lt;/code&gt; - yuv and bitstream test files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;See the issue tracker on &lt;a href=&#34;https://github.com/cisco/openh264/issues&#34;&gt;https://github.com/cisco/openh264/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Encoder errors when resolution exceeds 3840x2160&lt;/li&gt; &#xA; &lt;li&gt;Encoder errors when compressed frame size exceeds half uncompressed size&lt;/li&gt; &#xA; &lt;li&gt;Decoder errors when compressed frame size exceeds 1MB&lt;/li&gt; &#xA; &lt;li&gt;Encoder RC requires frame skipping to be enabled to hit the target bitrate, if frame skipping is disabled the target bitrate may be exceeded&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;BSD, see &lt;code&gt;LICENSE&lt;/code&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emscripten-core/emscripten</title>
    <updated>2023-11-26T01:32:30Z</updated>
    <id>tag:github.com,2023-11-26:/emscripten-core/emscripten</id>
    <link href="https://github.com/emscripten-core/emscripten" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emscripten: An LLVM-to-WebAssembly Compiler&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emscripten-core/emscripten/main/media/switch_logo.png&#34; alt=&#34;emscripten logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Main project page: &lt;a href=&#34;https://emscripten.org&#34;&gt;https://emscripten.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub CI status: &lt;a href=&#34;https://circleci.com/gh/emscripten-core/emscripten/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/emscripten-core/emscripten.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chromium builder status: &lt;a href=&#34;https://ci.chromium.org/p/emscripten-releases&#34;&gt;emscripten-releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Emscripten compiles C and C++ to &lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt; using &lt;a href=&#34;https://en.wikipedia.org/wiki/LLVM&#34;&gt;LLVM&lt;/a&gt; and &lt;a href=&#34;https://github.com/WebAssembly/binaryen/&#34;&gt;Binaryen&lt;/a&gt;. Emscripten output can run on the Web, in Node.js, and in &lt;a href=&#34;https://v8.dev/blog/emscripten-standalone-wasm#running-in-wasm-runtimes&#34;&gt;wasm runtimes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Emscripten provides Web support for popular portable APIs such as OpenGL and SDL2, allowing complex graphical native applications to be ported, such as the &lt;a href=&#34;https://docs.unity3d.com/Manual/webgl-gettingstarted.html&#34;&gt;Unity game engine&lt;/a&gt; and &lt;a href=&#34;https://blog.chromium.org/2019/06/webassembly-brings-google-earth-to-more.html&#34;&gt;Google Earth&lt;/a&gt;. It can probably port your codebase, too!&lt;/p&gt; &#xA;&lt;p&gt;While Emscripten mostly focuses on compiling C and C++ using &lt;a href=&#34;https://clang.llvm.org/&#34;&gt;Clang&lt;/a&gt;, it can be integrated with other LLVM-using compilers (for example, Rust has Emscripten integration, with the &lt;code&gt;wasm32-unknown-emscripten&lt;/code&gt; and &lt;code&gt;asmjs-unknown-emscripten&lt;/code&gt; targets).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Emscripten is available under 2 licenses, the MIT license and the University of Illinois/NCSA Open Source License.&lt;/p&gt; &#xA;&lt;p&gt;Both are permissive open source licenses, with little if any practical difference between them.&lt;/p&gt; &#xA;&lt;p&gt;The reason for offering both is that (1) the MIT license is well-known and suitable for a compiler toolchain, while (2) LLVM&#39;s original license, the University of Illinois/NCSA Open Source License, was also offered to allow Emscripten&#39;s code to be integrated upstream into LLVM. The second reason became less important after Emscripten switched to the LLVM wasm backend, at which point there isn&#39;t any code we expect to move back and forth between the projects; also, LLVM relicensed to Apache 2.0 + exceptions meanwhile. In practice you can just consider Emscripten as MIT licensed (which allows you to do pretty much anything you want with a compiler, including commercial and non-commercial use).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;LICENSE&lt;/code&gt; for the full content of the licenses.&lt;/p&gt;</summary>
  </entry>
</feed>