<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-12T01:26:25Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Kitware/VTK</title>
    <updated>2024-04-12T01:26:25Z</updated>
    <id>tag:github.com,2024-04-12:/Kitware/VTK</id>
    <link href="https://github.com/Kitware/VTK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of Visualization Toolkit repository&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kitware/VTK/master/vtkBanner.gif&#34; alt=&#34;VTK - The Visualization Toolkit&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;VTK is an open-source software system for image processing, 3D graphics, volume rendering and visualization. VTK includes many advanced algorithms (e.g., surface reconstruction, implicit modeling, decimation) and rendering techniques (e.g., hardware-accelerated volume rendering, LOD control).&lt;/p&gt; &#xA;&lt;p&gt;VTK is used by academicians for teaching and research; by government research institutions such as Los Alamos National Lab in the US or CINECA in Italy; and by many commercial firms who use VTK to build or extend products.&lt;/p&gt; &#xA;&lt;p&gt;The origin of VTK is with the textbook &#34;The Visualization Toolkit, an Object-Oriented Approach to 3D Graphics&#34; originally published by Prentice Hall and now published by Kitware, Inc. (Third Edition ISBN 1-930934-07-6). VTK has grown (since its initial release in 1994) to a world-wide user base in the commercial, academic, and research communities.&lt;/p&gt; &#xA;&lt;h1&gt;Learning Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;General information is available at the &lt;a href=&#34;https://www.vtk.org/&#34;&gt;VTK Homepage&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Community discussion takes place on the &lt;a href=&#34;https://discourse.vtk.org/&#34;&gt;VTK Discourse&lt;/a&gt; forum.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Commercial &lt;a href=&#34;https://www.kitware.com/support/&#34;&gt;support and training&lt;/a&gt; are available from &lt;a href=&#34;https://www.kitware.com/&#34;&gt;Kitware&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Doxygen-generated nightly reference documentation is available &lt;a href=&#34;https://www.vtk.org/doc/nightly/html&#34;&gt;online&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is now a large collection of &lt;a href=&#34;https://kitware.github.io/vtk-examples/site/&#34;&gt;VTK Examples&lt;/a&gt; that showcase VTK features and provide a useful learning resource.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Reporting Bugs&lt;/h1&gt; &#xA;&lt;p&gt;If you have found a bug:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have a patch, please read the &lt;a href=&#34;https://raw.githubusercontent.com/Kitware/VTK/master/CONTRIBUTING.md#contributing-to-vtk&#34;&gt;CONTRIBUTING.md&lt;/a&gt; document.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Otherwise, please join the &lt;a href=&#34;https://discourse.vtk.org/&#34;&gt;VTK Discourse&lt;/a&gt; forum and ask about the expected and observed behaviors to determine if it is really a bug.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, if the issue is not resolved by the above steps, open an entry in the &lt;a href=&#34;https://gitlab.kitware.com/vtk/vtk/-/issues&#34;&gt;VTK Issue Tracker&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;In general VTK tries to be as portable as possible; the specific configurations below are known to work and tested.&lt;/p&gt; &#xA;&lt;p&gt;VTK supports the following compilers:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;GCC 4.8 or newer&lt;/li&gt; &#xA; &lt;li&gt;Clang 3.3 or newer&lt;/li&gt; &#xA; &lt;li&gt;Apple Clang 5.0 (from Xcode 5.0) or newer&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Visual Studio 2015 or newer&lt;/li&gt; &#xA; &lt;li&gt;Intel 14.0 or newer&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;VTK supports the following operating systems:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Windows Vista or newer&lt;/li&gt; &#xA; &lt;li&gt;Mac OS X 10.7 or newer&lt;/li&gt; &#xA; &lt;li&gt;Linux (ex: Ubuntu 12.04 or newer, Debian 4 or newer)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Kitware/VTK/master/Documentation/docs/build_instructions/build.md&#34;&gt;build.md&lt;/a&gt; (in Documentation/dev/) for build instructions.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Kitware/VTK/master/CONTRIBUTING.md#contributing-to-vtk&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for instructions to contribute.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;VTK is distributed under the OSI-approved BSD 3-clause License. See &lt;a href=&#34;https://raw.githubusercontent.com/Kitware/VTK/master/Copyright.txt&#34;&gt;Copyright.txt&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/proxy</title>
    <updated>2024-04-12T01:26:25Z</updated>
    <id>tag:github.com,2024-04-12:/microsoft/proxy</id>
    <link href="https://github.com/microsoft/proxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Proxy: Next Generation Polymorphism in C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Proxy: Next Generation Polymorphism in C++&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/proxy/actions/workflows/pipeline-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/microsoft/proxy/actions/workflows/pipeline-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Proxy-CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Do you want to facilitate lifetime management and maintenance of polymorphic objects in C++?&lt;/p&gt; &#xA;&lt;p&gt;Do you want to be able to write polymorphic code in C++ as easily as in languages with GC (like Java or C#), while still having excellent runtime performance?&lt;/p&gt; &#xA;&lt;p&gt;Have you tried other polymorphic programming libraries in C++ but found them deficient?&lt;/p&gt; &#xA;&lt;p&gt;If so, this library is for you. ðŸ˜‰&lt;/p&gt; &#xA;&lt;p&gt;For decades, object-based virtual table has been a de facto implementation of runtime polymorphism in many (compiled) programming languages. There are many drawbacks in this mechanism, including life management (because each object may have different size and ownership) and reflection (because it is hard to balance between usability and memory allocation). To workaround these drawbacks, some languages like Java or C# choose to sacrifice performance by introducing GC to facilitate lifetime management, and JIT-compile the source code at runtime to generate full metadata. We improved the theory and implemented as a C++ library without sacrificing performance, proposed to merge into the C++ standard.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;proxy&#34; is a single-header, cross-platform C++ library that Microsoft uses to make runtime polymorphism easier to implement and faster. Please find the design details at &lt;a href=&#34;https://wg21.link/p3086&#34;&gt;https://wg21.link/p3086&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;proxy&#34; is a header-only C++20 library. Once you set the language level of your compiler not earlier than C++20 and get the header file (&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/proxy/main/proxy.h&#34;&gt;proxy.h&lt;/a&gt;), you are all set. You can also install the library via &lt;a href=&#34;https://github.com/microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt;, which is a C++ library manager invented by Microsoft, by searching for &#34;proxy&#34; (see &lt;a href=&#34;https://vcpkg.info/port/proxy&#34;&gt;vcpkg.info&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The majority of the library is defined in namespace &lt;code&gt;pro&lt;/code&gt;. Some macros are provided (currently not included in the proposal for standardization) to simplify the definition of &lt;code&gt;proxy&lt;/code&gt; prior to C++26. Here is a demo showing how to use this library to implement runtime polymorphism in a different way from the traditional inheritance-based approach:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Specifications of abstraction&#xA;namespace spec {&#xA;&#xA;PRO_DEF_MEMBER_DISPATCH(Draw, void(std::ostream&amp;amp; out));&#xA;PRO_DEF_MEMBER_DISPATCH(Area, double() noexcept);&#xA;PRO_DEF_FACADE(Drawable, PRO_MAKE_DISPATCH_PACK(Draw, Area));&#xA;&#xA;}  // namespace spec&#xA;&#xA;// Implementation&#xA;class Rectangle {&#xA; public:&#xA;  void Draw(std::ostream&amp;amp; out) const&#xA;      { out &amp;lt;&amp;lt; &#34;{Rectangle: width = &#34; &amp;lt;&amp;lt; width_ &amp;lt;&amp;lt; &#34;, height = &#34; &amp;lt;&amp;lt; height_ &amp;lt;&amp;lt; &#34;}&#34;; }&#xA;  void SetWidth(double width) { width_ = width; }&#xA;  void SetHeight(double height) { height_ = height; }&#xA;  double Area() const noexcept { return width_ * height_; }&#xA;&#xA; private:&#xA;  double width_;&#xA;  double height_;&#xA;};&#xA;&#xA;// Client - Consumer&#xA;std::string PrintDrawableToString(pro::proxy&amp;lt;spec::Drawable&amp;gt; p) {&#xA;  std::stringstream result;&#xA;  result &amp;lt;&amp;lt; &#34;shape = &#34;;&#xA;  p.invoke&amp;lt;spec::Draw&amp;gt;(result);&#xA;  result &amp;lt;&amp;lt; &#34;, area = &#34; &amp;lt;&amp;lt; p.invoke&amp;lt;spec::Area&amp;gt;();&#xA;  return std::move(result).str();&#xA;}&#xA;&#xA;// Client - Producer&#xA;pro::proxy&amp;lt;spec::Drawable&amp;gt; CreateRectangleAsDrawable(int width, int height) {&#xA;  Rectangle rect;&#xA;  rect.SetWidth(width);&#xA;  rect.SetHeight(height);&#xA;  return pro::make_proxy&amp;lt;spec::Drawable&amp;gt;(rect);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is another demo showing how to define overloads in a dispatch. Note that &lt;code&gt;.invoke&amp;lt;&amp;gt;&lt;/code&gt; can be ommitted when only 1 dispatch is defined in a facade:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Specifications of abstraction&#xA;namespace spec {&#xA;&#xA;PRO_DEF_MEMBER_DISPATCH(Log, void(const char*), void(const char*, const std::exception&amp;amp;));&#xA;PRO_DEF_FACADE(Logger, Log);&#xA;&#xA;}  // namespace spec&#xA;&#xA;// Client - Consumer&#xA;void MyVerboseFunction(pro::proxy&amp;lt;spec::Logger&amp;gt; logger) {&#xA;  logger(&#34;hello&#34;);&#xA;  try {&#xA;    throw std::runtime_error{&#34;runtime error!&#34;};&#xA;  } catch (const std::exception&amp;amp; e) {&#xA;    logger(&#34;world&#34;, e);&#xA;  }&#xA;}&#xA;&#xA;// Implementation&#xA;struct MyLogger {&#xA;  void Log(const char* s) {&#xA;    printf(&#34;[INFO] %s\n&#34;, s);&#xA;  }&#xA;  void Log(const char* s, const std::exception&amp;amp; e) {&#xA;    printf(&#34;[ERROR] %s (exception info: %s)\n&#34;, s, e.what());&#xA;  }&#xA;};&#xA;&#xA;// Client - Producer&#xA;int main() {&#xA;  MyLogger logger;&#xA;  MyVerboseFunction(&amp;amp;logger);&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By design, the body of a dispatch could be any code. While member function is one useful pattern supported by macro &lt;code&gt;PRO_DEF_MEMBER_DISPATCH&lt;/code&gt;, free function is also supported with another macro &lt;code&gt;PRO_DEF_FREE_DISPATCH&lt;/code&gt;. The following example uses &lt;code&gt;PRO_DEF_FREE_DISPATCH&lt;/code&gt; and &lt;code&gt;std::invoke&lt;/code&gt; to implement similar function wrapper as &lt;code&gt;std::function&lt;/code&gt; and &lt;code&gt;std::move_only_function&lt;/code&gt; and supports multiple overloads.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Specifications of abstraction&#xA;namespace spec {&#xA;&#xA;template &amp;lt;class... Overloads&amp;gt;&#xA;PRO_DEF_FREE_DISPATCH(Call, std::invoke, Overloads...);&#xA;template &amp;lt;class... Overloads&amp;gt;&#xA;PRO_DEF_FACADE(MovableCallable, Call&amp;lt;Overloads...&amp;gt;);&#xA;template &amp;lt;class... Overloads&amp;gt;&#xA;PRO_DEF_FACADE(CopyableCallable, Call&amp;lt;Overloads...&amp;gt;, pro::copyable_ptr_constraints);&#xA;&#xA;}  // namespace spec&#xA;&#xA;// MyFunction has similar functionality as std::function but supports multiple overloads&#xA;// MyMoveOnlyFunction has similar functionality as std::move_only_function but supports multiple overloads&#xA;template &amp;lt;class... Overloads&amp;gt;&#xA;using MyFunction = pro::proxy&amp;lt;spec::CopyableCallable&amp;lt;Overloads...&amp;gt;&amp;gt;;&#xA;template &amp;lt;class... Overloads&amp;gt;&#xA;using MyMoveOnlyFunction = pro::proxy&amp;lt;spec::MovableCallable&amp;lt;Overloads...&amp;gt;&amp;gt;;&#xA;&#xA;int main() {&#xA;  auto f = [](auto&amp;amp;&amp;amp;... v) {&#xA;    printf(&#34;f() called. Args: &#34;);&#xA;    ((std::cout &amp;lt;&amp;lt; v &amp;lt;&amp;lt; &#34;:&#34; &amp;lt;&amp;lt; typeid(decltype(v)).name() &amp;lt;&amp;lt; &#34;, &#34;), ...);&#xA;    puts(&#34;&#34;);&#xA;  };&#xA;  MyFunction&amp;lt;void(int)&amp;gt; p0{&amp;amp;f};&#xA;  p0(123);  // Prints &#34;f() called. Args: 123:i,&#34; (assuming GCC)&#xA;  MyMoveOnlyFunction&amp;lt;void(), void(int), void(double)&amp;gt; p1{&amp;amp;f};&#xA;  p1();  // Prints &#34;f() called. Args:&#34;&#xA;  p1(456);  // Prints &#34;f() called. Args: 456:i,&#34;&#xA;  p1(1.2);  // Prints &#34;f() called. Args: 1.2:d,&#34;&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please find more details and discussions in the spec. The complete version of the &#34;drawable&#34; demo could be found in &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/proxy/main/tests/proxy_integration_tests.cpp&#34;&gt;tests/proxy_integration_tests.cpp&lt;/a&gt; (also available on &lt;a href=&#34;https://godbolt.org/z/voEacxT76&#34;&gt;Compiler Explorer&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Minimum requirements for compilers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Family&lt;/th&gt; &#xA;   &lt;th&gt;Minimum version&lt;/th&gt; &#xA;   &lt;th&gt;Required flags&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;clang&lt;/td&gt; &#xA;   &lt;td&gt;15.0.0&lt;/td&gt; &#xA;   &lt;td&gt;-std=c++20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gcc&lt;/td&gt; &#xA;   &lt;td&gt;11.2&lt;/td&gt; &#xA;   &lt;td&gt;-std=c++20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MSVC&lt;/td&gt; &#xA;   &lt;td&gt;19.30&lt;/td&gt; &#xA;   &lt;td&gt;/std:c++20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Use &lt;code&gt;proxy&lt;/code&gt; with CMake and &lt;a href=&#34;https://github.com/microsoft/vcpkg&#34;&gt;Vcpkg&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;See more details in &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/proxy/main/samples&#34;&gt;samples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set up vcpkg manifest&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;name&#34;: &#34;&amp;lt;project_name&amp;gt;&#34;,&#xA;  &#34;version&#34;: &#34;0.1.0&#34;,&#xA;  &#34;dependencies&#34;: [&#xA;    {&#xA;      &#34;name&#34;: &#34;proxy&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Integrate &lt;code&gt;proxy&lt;/code&gt; in CMakeLists.txt&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;find_package(proxy CONFIG REQUIRED)&#xA;target_link_libraries(&amp;lt;target_name&amp;gt; PRIVATE msft_proxy)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run CMake with vcpkg toolchain file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake &amp;lt;source_dir&amp;gt; -B &amp;lt;build_dir&amp;gt; -DCMAKE_TOOLCHAIN_FILE=&amp;lt;vcpkg_dir&amp;gt;/scripts/buildsystems/vcpkg.cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build and run tests with CMake&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/microsoft/proxy.git&#xA;cd proxy&#xA;cmake -S . -B build&#xA;cmake --build ./build -j8&#xA;cd ./build&#xA;ctest -j8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
</feed>