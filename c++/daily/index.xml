<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-12T01:34:29Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>R3nzTheCodeGOD/R3nzSkin</title>
    <updated>2022-09-12T01:34:29Z</updated>
    <id>tag:github.com,2022-09-12:/R3nzTheCodeGOD/R3nzSkin</id>
    <link href="https://github.com/R3nzTheCodeGOD/R3nzSkin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Skin changer for League of Legends (LOL)&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-C%2B%2B-%23f34b7d.svg?style=plastic&#34; alt=&#34;C++&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://na.leagueoflegends.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Game-League%20of%20Legends-445fa5.svg?style=plastic&#34; alt=&#34;LOL&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Microsoft_Windows&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform-Windows-0078d7.svg?style=plastic&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/X86&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Arch-x86-red.svg?style=plastic&#34; alt=&#34;x86&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/R3nzTheCodeGOD/R3nzSkin/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/R3nzTheCodeGOD/R3nzSkin.svg?style=plastic&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/R3nzTheCodeGOD/R3nzSkin/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/R3nzTheCodeGOD/R3nzSkin.svg?style=plastic&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/R3nzTheCodeGOD/R3nzSkin/workflows/Windows/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;Windows&#34;&gt;&lt;/p&gt; &#xA; &lt;h1&gt;&lt;strong&gt;R3nzSkin&lt;/strong&gt;&lt;/h1&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/58574988/134170370-c827d712-fcc7-432f-b9f8-96678b0c9bf6.gif&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;code&gt;R3nzSkin&lt;/code&gt; is internal skin changer for League of Legends.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change the skin of your champion and other champions in the game.&lt;/li&gt; &#xA; &lt;li&gt;Automatic skins database update.&lt;/li&gt; &#xA; &lt;li&gt;Support for spectator mode.&lt;/li&gt; &#xA; &lt;li&gt;Change skins anytime and unlimited times in single game.&lt;/li&gt; &#xA; &lt;li&gt;Supports all Popular languages ​​in the world.&lt;/li&gt; &#xA; &lt;li&gt;In-game configuration with &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;ImGui&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nlohmann/json&#34;&gt;JSON&lt;/a&gt; based configuration saving &amp;amp; loading&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the source with &lt;code&gt;git clone --recursive https://github.com/R3nzTheCodeGOD/R3nzSkin.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build in Visual Studio 2017/19 with configuration &#34;Your Region&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;code&gt;R3nzSkin_Injector&lt;/code&gt; or inject the resulting DLL into the game yourself. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Administrator&lt;/em&gt; privilege may be needed if failed to inject.&lt;/li&gt; &#xA;   &lt;li&gt;League client can crash if injected before going into arena. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;A workaround is to not inject until you are in the arena (you will need to be fast to not disrupt the game).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Press &lt;kbd&gt;Insert&lt;/kbd&gt; to bring up the menu.&lt;/li&gt; &#xA; &lt;li&gt;Select skin for you, your teammates, enemies, wards.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Further optimizations&lt;/h1&gt; &#xA;&lt;p&gt;If your CPU supports AVX / AVX2 / AVX-512 instruction set, you can enable it in project settings. This should result in more performant code, optimized for your CPU.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;This program is an improved and updated version of the &lt;a href=&#34;https://github.com/B3akers&#34;&gt;B3akers&lt;/a&gt;/&lt;a href=&#34;https://github.com/B3akers/LeagueSkinChanger&#34;&gt;LeagueSkinChanger&lt;/a&gt; project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jrowberg/i2cdevlib</title>
    <updated>2022-09-12T01:34:29Z</updated>
    <id>tag:github.com,2022-09-12:/jrowberg/i2cdevlib</id>
    <link href="https://github.com/jrowberg/i2cdevlib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;I2C device library collection for AVR/Arduino or other C++-based MCUs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;I2C Device Library&lt;/h1&gt; &#xA;&lt;p&gt;The I2C Device Library (i2cdevlib) is a collection of mostly uniform and well-documented classes to provide simple and intuitive interfaces to I2C devices. Each device is built to make use of the generic &#34;I2Cdev&#34; class, which abstracts the I2C bit- and byte-level communication away from each specific device class, making it easy to keep the device class clean while providing a simple way to modify just one class to port the I2C communication code onto different platforms (Arduino, PIC, MSP430, Jennic, simple bit-banging, etc.). Device classes are designed to provide complete coverage of all functionality described by each device&#39;s documentation, plus any generic convenience functions that are helpful.&lt;/p&gt; &#xA;&lt;p&gt;There are examples in many of the classes that demonstrate basic usage patterns. The I2Cdev class is built to be used statically, reducing the memory requirement if you have multiple I2C devices in your project. Only one instance of the I2Cdev class is required. Recent additions as of late 2021 have also made it possible to pass in non-default &lt;code&gt;Wire&lt;/code&gt; objects (in the Arduino environment) to allow using multiple I2C transceivers at the same time, specifically because of the number of people who wanted to use up to four MPU-6050 IMUs without I2C mux ICs involved.&lt;/p&gt; &#xA;&lt;p&gt;Documentation for each class is created using Doxygen-style comments placed in each class definition file, based on the information available in each device&#39;s datasheet. This documentation is available in HTML format on the i2cdevlib.com website, which also holds helpful information for most of the classes present here on the repository.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Due to my...ahem...unfortunate ignorance way back when I first created this project, the entire codebase (all platforms, cores, and device libraries) are all inside of this one giant repository. That means there&#39;s no easy IDE integration the way most libraries work in the Arduino world and elsewhere. Instead, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone or &lt;a href=&#34;https://github.com/jrowberg/i2cdevlib/archive/refs/heads/master.zip&#34;&gt;download a .zip archive&lt;/a&gt; of the repo&lt;/li&gt; &#xA; &lt;li&gt;Move or copy the relevant core and device drivers into your project tree or library subfolder&lt;br&gt;(For Arduino, this means the &lt;code&gt;/Arduino/I2Cdev&lt;/code&gt; and &lt;code&gt;/Arduino/MPU6050&lt;/code&gt; folders, for example)&lt;/li&gt; &#xA; &lt;li&gt;Rescan libraries or restart your IDE if necessary&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For both usage and development, I&#39;ve found that it&#39;s best to clone using the git client of your choice, and then create symlinks as needed from the master repository sources into your development location(s). This is usually more intuitive for people who use Linux, but it can be done in Windows as well using the &lt;code&gt;mklink /D&lt;/code&gt; command. See &lt;a href=&#34;https://www.howtogeek.com/howto/16226/complete-guide-to-symbolic-links-symlinks-on-windows-or-linux/&#34;&gt;this page&lt;/a&gt; for a set of Windows-specific instructions with screenshots.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Exact usage varies from device to device, but most (especially the more popular ones) include example projects demonstrating the basics. Refer to those examples for the best material currently available.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want a library for a device that isn&#39;t up on the repository? You can either request it in the discussion area for this repo on Github, or fork the code and write it yourself.&lt;/p&gt; &#xA;&lt;p&gt;Realistically, Option B is more reliable. Try to mimic the structure and code conventions of the existing codebase as much as possible. If you go this route, please use the following approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository to your own user&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch specific to your new code&lt;/li&gt; &#xA; &lt;li&gt;Write, test, and commit your new code&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request from your branch back to the original source&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;I and a few others will review the pull request and comment as needed, and then hopefully merge it.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note: additional details about this project can be found at &lt;a href=&#34;https://www.i2cdevlib.com&#34;&gt;https://www.i2cdevlib.com&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Another note: this project has a fledgling successor that aims to &lt;a href=&#34;https://community.perilib.io/t/perilib-i2cdevlib-reborn/15&#34;&gt;address all of its shortcomings&lt;/a&gt;, which can be found at &lt;a href=&#34;https://github.com/perilib&#34;&gt;https://github.com/perilib&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>idealvin/coost</title>
    <updated>2022-09-12T01:34:29Z</updated>
    <id>tag:github.com,2022-09-12:/idealvin/coost</id>
    <link href="https://github.com/idealvin/coost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiny boost library in C++11.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Coost&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/idealvin/coost/master/readme_cn.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/idealvin/coost/actions?query=workflow%3ALinux&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/idealvin/coost/Linux/master.svg?logo=linux&#34; alt=&#34;Linux Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/idealvin/coost/actions?query=workflow%3AWindows&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/idealvin/coost/Windows/master.svg?logo=windows&#34; alt=&#34;Windows Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/idealvin/coost/actions?query=workflow%3AmacOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/idealvin/coost/macOS/master.svg?logo=apple&#34; alt=&#34;Mac Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/idealvin/coost/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/idealvin/coost.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A tiny boost library in C++11.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;0. Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Coost&lt;/strong&gt; is an elegant and efficient cross-platform C++ base library, it is not as heavy as &lt;a href=&#34;https://www.boost.org/&#34;&gt;boost&lt;/a&gt;, but still provides enough powerful features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Command line and config file parser (flag)&lt;/li&gt; &#xA; &lt;li&gt;High performance log library (log)&lt;/li&gt; &#xA; &lt;li&gt;Unit testing framework (unitest)&lt;/li&gt; &#xA; &lt;li&gt;go-style coroutine&lt;/li&gt; &#xA; &lt;li&gt;Coroutine-based network programming framework&lt;/li&gt; &#xA; &lt;li&gt;Efficient JSON library&lt;/li&gt; &#xA; &lt;li&gt;JSON based RPC framework&lt;/li&gt; &#xA; &lt;li&gt;God-oriented programming&lt;/li&gt; &#xA; &lt;li&gt;Atomic operation (atomic)&lt;/li&gt; &#xA; &lt;li&gt;Random number generator (random)&lt;/li&gt; &#xA; &lt;li&gt;Efficient stream (fastream)&lt;/li&gt; &#xA; &lt;li&gt;Efficient string (fastring)&lt;/li&gt; &#xA; &lt;li&gt;String utility (str)&lt;/li&gt; &#xA; &lt;li&gt;Time library (time)&lt;/li&gt; &#xA; &lt;li&gt;Thread library (thread)&lt;/li&gt; &#xA; &lt;li&gt;Timed Task Scheduler&lt;/li&gt; &#xA; &lt;li&gt;Fast memory allocator&lt;/li&gt; &#xA; &lt;li&gt;LruMap&lt;/li&gt; &#xA; &lt;li&gt;hash library&lt;/li&gt; &#xA; &lt;li&gt;path library&lt;/li&gt; &#xA; &lt;li&gt;File system operations (fs)&lt;/li&gt; &#xA; &lt;li&gt;System operations (os)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Coost, formerly known as &lt;strong&gt;cocoyaxi (co for short)&lt;/strong&gt;, for fear of exposing too much information and causing the Namake planet to suffer attack from &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Dark_Forest&#34;&gt;the Dark Forest&lt;/a&gt;&lt;/strong&gt;, was renamed Coost, which means a more lightweight C++ base library than boost.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It was said that about xx light-years from the Earth, there is a planet named &lt;strong&gt;Namake&lt;/strong&gt;. Namake has three suns, a large one and two small ones. The Namakians make a living by programming. They divide themselves into nine levels according to their programming level, and the three lowest levels will be sent to other planets to develop programming technology. These wandering Namakians must collect at least &lt;strong&gt;10,000 stars&lt;/strong&gt; through a project before they can return to Namake.&lt;/p&gt; &#xA; &lt;p&gt;Several years ago, two Namakians, &lt;a href=&#34;https://github.com/waruqi&#34;&gt;ruki&lt;/a&gt; and &lt;a href=&#34;https://github.com/idealvin&#34;&gt;alvin&lt;/a&gt;, were dispatched to the Earth. To go back to the Namake planet as soon as possible, ruki has developed a powerful build tool &lt;a href=&#34;https://github.com/xmake-io/xmake&#34;&gt;xmake&lt;/a&gt;, whose name is taken from Namake. At the same time, alvin has developed a tiny boost library &lt;a href=&#34;https://github.com/idealvin/coost&#34;&gt;coost&lt;/a&gt;, whose original name cocoyaxi is taken from the Cocoyaxi village where ruki and alvin lived on Namake.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;1. Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;Coost needs your help. If you are using it or like it, you may consider becoming a sponsor. Thank you very much!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/idealvin&#34;&gt;Github Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coostdocs.github.io/en/about/sponsor/&#34;&gt;A cup of coffee&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Special Sponsors&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Coost is specially sponsored by the following companies, thank you very much!&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.oneflow.org/index.html&#34;&gt; &lt;img src=&#34;https://coostdocs.github.io/images/sponsor/oneflow.png&#34; width=&#34;175&#34; height=&#34;125&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;2. Documents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;English: &lt;a href=&#34;https://coostdocs.github.io/en/about/co/&#34;&gt;github&lt;/a&gt; | &lt;a href=&#34;https://coostdocs.gitee.io/en/about/co/&#34;&gt;gitee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;简体中文: &lt;a href=&#34;https://coostdocs.github.io/cn/about/co/&#34;&gt;github&lt;/a&gt; | &lt;a href=&#34;https://coostdocs.gitee.io/cn/about/co/&#34;&gt;gitee&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;3. Core features&lt;/h2&gt; &#xA;&lt;h3&gt;3.0 God-oriented programming&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;co/god.h&#34;&#xA;&#xA;void f() {&#xA;    god::bless_no_bugs();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.1 co/flag&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coostdocs.github.io/en/co/flag/&#34;&gt;co/flag&lt;/a&gt; is a command line and config file parser. It is similar to &lt;a href=&#34;https://github.com/gflags/gflags&#34;&gt;gflags&lt;/a&gt;, but more powerful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support input parameters from command line and config file.&lt;/li&gt; &#xA; &lt;li&gt;Support automatic generation of the config file.&lt;/li&gt; &#xA; &lt;li&gt;Support flag aliases.&lt;/li&gt; &#xA; &lt;li&gt;Flag of integer type, the value can take a unit &lt;code&gt;k,m,g,t,p&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;co/flag.h&#34;&#xA;#include &#34;co/cout.h&#34;&#xA;&#xA;DEF_bool(x, false, &#34;bool x&#34;);&#xA;DEF_int32(i, 0, &#34;...&#34;);&#xA;DEF_string(s, &#34;hello world&#34;, &#34;string&#34;);&#xA;&#xA;int main(int argc, char** argv) {&#xA;    flag::init(argc, argv);&#xA;    COUT &amp;lt;&amp;lt; &#34;x: &#34; &amp;lt;&amp;lt; FLG_x;&#xA;    COUT &amp;lt;&amp;lt; &#34;i: &#34; &amp;lt;&amp;lt; FLG_i;&#xA;    COUT &amp;lt;&amp;lt; FLG_s &amp;lt;&amp;lt; &#34;|&#34; &amp;lt;&amp;lt; FLG_s.size();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example, the macros start with &lt;code&gt;DEF_&lt;/code&gt; define 3 flags. Each flag corresponds to a global variable, whose name is &lt;code&gt;FLG_&lt;/code&gt; plus the flag name. After building, the above code can run as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./xx                    # Run with default configs&#xA;./xx -x -s good         # x = true, s = &#34;good&#34;&#xA;./xx -i 4k -s &#34;I&#39;m ok&#34;  # i = 4096, s = &#34;I&#39;m ok&#34;&#xA;&#xA;./xx -mkconf            # Automatically generate a config file: xx.conf&#xA;./xx xx.conf            # run with a config file&#xA;./xx -conf xx.conf      # Same as above&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.2 co/log&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coostdocs.github.io/en/co/log/&#34;&gt;co/log&lt;/a&gt; is a high-performance and memory-friendly log library, which nearly needs no memory allocation.&lt;/p&gt; &#xA;&lt;p&gt;co/log supports two types of logs: one is the level log, which divides the logs into 5 levels: debug, info, warning, error and fatal. &lt;strong&gt;Printing a fatal log will terminate the program&lt;/strong&gt;; the other one is TLOG, logs are classified by topic, and logs of different topics are written to different files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;DLOG &amp;lt;&amp;lt; &#34;hello &#34; &amp;lt;&amp;lt; 23;  // debug&#xA;LOG &amp;lt;&amp;lt; &#34;hello &#34; &amp;lt;&amp;lt; 23;   // info&#xA;WLOG &amp;lt;&amp;lt; &#34;hello &#34; &amp;lt;&amp;lt; 23;  // warning&#xA;ELOG &amp;lt;&amp;lt; &#34;hello &#34; &amp;lt;&amp;lt; 23;  // error&#xA;FLOG &amp;lt;&amp;lt; &#34;hello &#34; &amp;lt;&amp;lt; 23;  // fatal&#xA;TLOG(&#34;xx&#34;) &amp;lt;&amp;lt; &#34;s&#34; &amp;lt;&amp;lt; 23; // topic log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;co/log also provides a series of &lt;code&gt;CHECK&lt;/code&gt; macros, which is an enhanced version of &lt;code&gt;assert&lt;/code&gt;, and they will not be cleared in debug mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void* p = malloc(32);&#xA;CHECK(p != NULL) &amp;lt;&amp;lt; &#34;malloc failed..&#34;;&#xA;CHECK_NE(p, NULL) &amp;lt;&amp;lt; &#34;malloc failed..&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the CHECK assertion failed, co/log will print the function call stack information, and then terminate the program. On linux and macosx, make sure you have installed &lt;a href=&#34;https://github.com/ianlancetaylor/libbacktrace&#34;&gt;libbacktrace&lt;/a&gt; on your system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://coostdocs.github.io/images/stack.png&#34; alt=&#34;stack&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;co/log is very fast. The following are some test results, for reference only:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;co/log vs glog (single thread)&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;platform&lt;/th&gt; &#xA;     &lt;th&gt;google glog&lt;/th&gt; &#xA;     &lt;th&gt;co/log&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;win2012 HHD&lt;/td&gt; &#xA;     &lt;td&gt;1.6MB/s&lt;/td&gt; &#xA;     &lt;td&gt;180MB/s&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;win10 SSD&lt;/td&gt; &#xA;     &lt;td&gt;3.7MB/s&lt;/td&gt; &#xA;     &lt;td&gt;560MB/s&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;mac SSD&lt;/td&gt; &#xA;     &lt;td&gt;17MB/s&lt;/td&gt; &#xA;     &lt;td&gt;450MB/s&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;linux SSD&lt;/td&gt; &#xA;     &lt;td&gt;54MB/s&lt;/td&gt; &#xA;     &lt;td&gt;1023MB/s&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/idealvin/co/tree/benchmark&#34;&gt;co/log vs spdlog&lt;/a&gt; (Linux)&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;threads&lt;/th&gt; &#xA;     &lt;th&gt;total logs&lt;/th&gt; &#xA;     &lt;th&gt;co/log time(seconds)&lt;/th&gt; &#xA;     &lt;th&gt;spdlog time(seconds)&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;1&lt;/td&gt; &#xA;     &lt;td&gt;1000000&lt;/td&gt; &#xA;     &lt;td&gt;0.096445&lt;/td&gt; &#xA;     &lt;td&gt;2.006087&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;2&lt;/td&gt; &#xA;     &lt;td&gt;1000000&lt;/td&gt; &#xA;     &lt;td&gt;0.142160&lt;/td&gt; &#xA;     &lt;td&gt;3.276006&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;4&lt;/td&gt; &#xA;     &lt;td&gt;1000000&lt;/td&gt; &#xA;     &lt;td&gt;0.181407&lt;/td&gt; &#xA;     &lt;td&gt;4.339714&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;8&lt;/td&gt; &#xA;     &lt;td&gt;1000000&lt;/td&gt; &#xA;     &lt;td&gt;0.303968&lt;/td&gt; &#xA;     &lt;td&gt;4.700860&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.3 co/unitest&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coostdocs.github.io/en/co/unitest/&#34;&gt;co/unitest&lt;/a&gt; is a simple and easy-to-use unit test framework. Many components in co use it to write unit test code, which guarantees the stability of co.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;co/unitest.h&#34;&#xA;#include &#34;co/os.h&#34;&#xA;&#xA;namespace test {&#xA;    &#xA;DEF_test(os) {&#xA;    DEF_case(homedir) {&#xA;        EXPECT_NE(os::homedir(), &#34;&#34;);&#xA;    }&#xA;&#xA;    DEF_case(cpunum) {&#xA;        EXPECT_GT(os::cpunum(), 0);&#xA;    }&#xA;}&#xA;    &#xA;} // namespace test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above is a simple example. The &lt;code&gt;DEF_test&lt;/code&gt; macro defines a test unit, which is actually a function (a method in a class). The &lt;code&gt;DEF_case&lt;/code&gt; macro defines test cases, and each test case is actually a code block. The main function is simple as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;co/unitest.h&#34;&#xA;&#xA;int main(int argc, char** argv) {&#xA;    flag::init(argc, argv);&#xA;    unitest::run_all_tests();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/idealvin/coost/tree/master/unitest&#34;&gt;unitest&lt;/a&gt; contains the unit test code in coost. Users can run unitest with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xmake r unitest      # Run all test cases&#xA;xmake r unitest -os  # Run test cases in the os unit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.4 JSON&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coostdocs.github.io/cn/co/json/&#34;&gt;co/json&lt;/a&gt; is a fast JSON library, and it is quite easy to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// {&#34;a&#34;:23,&#34;b&#34;:false,&#34;s&#34;:&#34;123&#34;,&#34;v&#34;:[1,2,3],&#34;o&#34;:{&#34;xx&#34;:0}}&#xA;Json x = {&#xA;    { &#34;a&#34;, 23 },&#xA;    { &#34;b&#34;, false },&#xA;    { &#34;s&#34;, &#34;123&#34; },&#xA;    { &#34;v&#34;, {1,2,3} },&#xA;    { &#34;o&#34;, {&#xA;        {&#34;xx&#34;, 0}&#xA;    }},&#xA;};&#xA;&#xA;// equal to x&#xA;Json y = Json()&#xA;    .add_member(&#34;a&#34;, 23)&#xA;    .add_member(&#34;b&#34;, false)&#xA;    .add_member(&#34;s&#34;, &#34;123&#34;)&#xA;    .add_member(&#34;v&#34;, Json().push_back(1).push_back(2).push_back(3))&#xA;    .add_member(&#34;o&#34;, Json().add_member(&#34;xx&#34;, 0));&#xA;&#xA;x.get(&#34;a&#34;).as_int();       // 23&#xA;x.get(&#34;s&#34;).as_string();    // &#34;123&#34;&#xA;x.get(&#34;s&#34;).as_int();       // 123, string -&amp;gt; int&#xA;x.get(&#34;v&#34;, 0).as_int();    // 1&#xA;x.get(&#34;v&#34;, 2).as_int();    // 3&#xA;x.get(&#34;o&#34;, &#34;xx&#34;).as_int(); // 0&#xA;&#xA;x[&#34;a&#34;] == 23;          // true&#xA;x[&#34;s&#34;] == &#34;123&#34;;       // true&#xA;x.get(&#34;o&#34;, &#34;xx&#34;) != 0; // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/idealvin/coost/tree/benchmark/benchmark&#34;&gt;co/json vs rapidjson&lt;/a&gt; (Linux)&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;     &lt;th&gt;parse&lt;/th&gt; &#xA;     &lt;th&gt;stringify&lt;/th&gt; &#xA;     &lt;th&gt;parse(minimal)&lt;/th&gt; &#xA;     &lt;th&gt;stringify(minimal)&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;rapidjson&lt;/td&gt; &#xA;     &lt;td&gt;1270 us&lt;/td&gt; &#xA;     &lt;td&gt;2106 us&lt;/td&gt; &#xA;     &lt;td&gt;1127 us&lt;/td&gt; &#xA;     &lt;td&gt;1358 us&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;co/json&lt;/td&gt; &#xA;     &lt;td&gt;1005 us&lt;/td&gt; &#xA;     &lt;td&gt;920 us&lt;/td&gt; &#xA;     &lt;td&gt;788 us&lt;/td&gt; &#xA;     &lt;td&gt;470 us&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.5 Coroutine&lt;/h3&gt; &#xA;&lt;p&gt;co has implemented a &lt;a href=&#34;https://github.com/golang/go&#34;&gt;go-style&lt;/a&gt; coroutine, which has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Support multi-thread scheduling, the default number of threads is the number of system CPU cores.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Shared stack, coroutines in the same thread share several stacks (the default size is 1MB), and the memory usage is low. Simple test on Linux shows that 10 millions of coroutines only take 2.8G of memory (for reference only).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is a flat relationship between coroutines, and new coroutines can be created from anywhere (including in coroutines).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support system API hook (Windows/Linux/Mac), you can directly use third-party network library in coroutine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support coroutine lock &lt;a href=&#34;https://coostdocs.github.io/en/co/coroutine/#comutex&#34;&gt;co::Mutex&lt;/a&gt;, coroutine synchronization event &lt;a href=&#34;https://coostdocs.github.io/en/co/coroutine/#coevent&#34;&gt;co::Event&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support channel and waitgroup in golang: &lt;a href=&#34;https://coostdocs.github.io/en/co/coroutine/#cochan&#34;&gt;co::Chan&lt;/a&gt;, &lt;a href=&#34;https://coostdocs.github.io/en/co/coroutine/#cowaitgroup&#34;&gt;co::WaitGroup&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support coroutine pool &lt;a href=&#34;https://coostdocs.github.io/en/co/coroutine/#copool&#34;&gt;co::Pool&lt;/a&gt; (no lock, no atomic operation).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;co/co.h&#34;&#xA;&#xA;int main(int argc, char** argv) {&#xA;    flag::init(argc, argv);&#xA;&#xA;    go(ku);            // void ku();&#xA;    go(f, 7);          // void f(int);&#xA;    go(&amp;amp;T::g, &amp;amp;o);     // void T::g(); T o;&#xA;    go(&amp;amp;T::h, &amp;amp;o, 7);  // void T::h(int); T o;&#xA;    go([](){&#xA;        LOG &amp;lt;&amp;lt; &#34;hello go&#34;;&#xA;    });&#xA;&#xA;    co::sleep(32); // sleep 32 ms&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above code, the coroutines created by &lt;code&gt;go()&lt;/code&gt; will be evenly distributed to different scheduling threads. Users can also control the scheduling of coroutines by themselves:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// run f1 and f2 in the same scheduler&#xA;auto s = co::next_scheduler();&#xA;s-&amp;gt;go(f1);&#xA;s-&amp;gt;go(f2);&#xA;&#xA;// run f in all schedulers&#xA;for (auto&amp;amp; s : co::schedulers()) {&#xA;    s-&amp;gt;go(f);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.6 network programming&lt;/h3&gt; &#xA;&lt;p&gt;co provides a set of coroutineized &lt;a href=&#34;https://coostdocs.github.io/en/co/coroutine/#coroutineized-socket-api&#34;&gt;socket APIs&lt;/a&gt;, most of them are consistent with the native socket APIs in form, with which, you can easily write high-performance network programs in a synchronous manner.&lt;/p&gt; &#xA;&lt;p&gt;In addition, co has also implemented higher-level network programming components, including &lt;a href=&#34;https://coostdocs.github.io/en/co/net/tcp/&#34;&gt;TCP&lt;/a&gt;, &lt;a href=&#34;https://coostdocs.github.io/en/co/net/http/&#34;&gt;HTTP&lt;/a&gt; and &lt;a href=&#34;https://coostdocs.github.io/en/co/net/rpc/&#34;&gt;RPC&lt;/a&gt; framework based on &lt;a href=&#34;https://coostdocs.github.io/en/co/json/&#34;&gt;JSON&lt;/a&gt;, they are IPv6-compatible and support SSL at the same time, which is more convenient than socket APIs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RPC server&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int main(int argc, char** argv) {&#xA;    flag::init(argc, argv);&#xA;&#xA;    rpc::Server()&#xA;        .add_service(new xx::HelloWorldImpl)&#xA;        .start(&#34;127.0.0.1&#34;, 7788, &#34;/xx&#34;);&#xA;&#xA;    for (;;) sleep::sec(80000);&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;co/rpc also supports HTTP protocol&lt;/strong&gt;, you can use the POST method to call the RPC service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl http://127.0.0.1:7788/xx --request POST --data &#39;{&#34;api&#34;:&#34;ping&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Static web server&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;co/flag.h&#34;&#xA;#include &#34;co/http.h&#34;&#xA;&#xA;DEF_string(d, &#34;.&#34;, &#34;root dir&#34;); // docroot for the web server&#xA;&#xA;int main(int argc, char** argv) {&#xA;    flag::init(argc, argv);&#xA;    so::easy(FLG_d.c_str()); // mum never have to worry again&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP server&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void cb(const http::Req&amp;amp; req, http::Res&amp;amp; res) {&#xA;    if (req.is_method_get()) {&#xA;        if (req.url() == &#34;/hello&#34;) {&#xA;            res.set_status(200);&#xA;            res.set_body(&#34;hello world&#34;);&#xA;        } else {&#xA;            res.set_status(404);&#xA;        }&#xA;    } else {&#xA;        res.set_status(405); // method not allowed&#xA;    }&#xA;}&#xA;&#xA;// http&#xA;http::Server().on_req(cb).start(&#34;0.0.0.0&#34;, 80);&#xA;&#xA;// https&#xA;http::Server().on_req(cb).start(&#xA;    &#34;0.0.0.0&#34;, 443, &#34;privkey.pem&#34;, &#34;certificate.pem&#34;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP client&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;void f() {&#xA;    http::Client c(&#34;https://github.com&#34;);&#xA;&#xA;    c.get(&#34;/&#34;);&#xA;    LOG &amp;lt;&amp;lt; &#34;response code: &#34;&amp;lt;&amp;lt; c.status();&#xA;    LOG &amp;lt;&amp;lt; &#34;body size: &#34;&amp;lt;&amp;lt; c.body().size();&#xA;    LOG &amp;lt;&amp;lt; &#34;Content-Length: &#34;&amp;lt;&amp;lt; c.header(&#34;Content-Length&#34;);&#xA;    LOG &amp;lt;&amp;lt; c.header();&#xA;&#xA;    c.post(&#34;/hello&#34;, &#34;data xxx&#34;);&#xA;    LOG &amp;lt;&amp;lt; &#34;response code: &#34;&amp;lt;&amp;lt; c.status();&#xA;}&#xA;&#xA;go(f);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. Code composition&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/idealvin/coost/tree/master/include&#34;&gt;include&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Header files of co.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/idealvin/coost/tree/master/src&#34;&gt;src&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Source files of co, built as libco.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/idealvin/coost/tree/master/test&#34;&gt;test&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Some test code, each &lt;code&gt;.cc&lt;/code&gt; file will be compiled into a separate test program.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/idealvin/coost/tree/master/unitest&#34;&gt;unitest&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Some unit test code, each &lt;code&gt;.cc&lt;/code&gt; file corresponds to a different test unit, and all code will be compiled into a single test program.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/idealvin/coost/tree/master/gen&#34;&gt;gen&lt;/a&gt;&lt;/p&gt; &lt;p&gt;A code generator for the RPC framework.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;5. Building&lt;/h2&gt; &#xA;&lt;h3&gt;5.1 Compilers required&lt;/h3&gt; &#xA;&lt;p&gt;To build co, you need a compiler that supports C++11:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx11&#34;&gt;gcc 4.8+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mac: &lt;a href=&#34;https://clang.llvm.org/cxx_status.html&#34;&gt;clang 3.3+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows: &lt;a href=&#34;https://visualstudio.microsoft.com/&#34;&gt;vs2015+&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;5.2 Build with xmake&lt;/h3&gt; &#xA;&lt;p&gt;co recommends using &lt;a href=&#34;https://github.com/xmake-io/xmake&#34;&gt;xmake&lt;/a&gt; as the build tool.&lt;/p&gt; &#xA;&lt;h4&gt;5.2.1 Quick start&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# All commands are executed in the root directory of co (the same below)&#xA;xmake      # build libco by default&#xA;xmake -a   # build all projects (libco, gen, test, unitest)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.2.2 Build shared library&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xmake f -k shared&#xA;xmake -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.2.3 Build with mingw&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xmake f -p mingw&#xA;xmake -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.2.4 Enable HTTP/SSL features&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xmake f --with_libcurl=true --with_openssl=true&#xA;xmake -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.2.5 Install libco&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install header files and libco by default.&#xA;xmake install -o pkg         # package related files to the pkg directory&#xA;xmake i -o pkg               # the same as above&#xA;xmake install -o /usr/local  # install to the /usr/local directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.2.6 Install libco from xrepo&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xrepo install -f &#34;openssl=true,libcurl=true&#34; coost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5.3 Build with cmake&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/izhengfan&#34;&gt;izhengfan&lt;/a&gt; helped to provide cmake support, &lt;a href=&#34;https://github.com/SpaceIm&#34;&gt;SpaceIm&lt;/a&gt; improved it and made it perfect.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;blockquote&gt; &#xA;      &lt;blockquote&gt; &#xA;       &lt;p&gt;master&lt;/p&gt; &#xA;      &lt;/blockquote&gt; &#xA;     &lt;/blockquote&gt; &#xA;    &lt;/blockquote&gt; &#xA;   &lt;/blockquote&gt; &#xA;  &lt;/blockquote&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;get twitter.json&lt;/h1&gt; &#xA;&lt;p&gt;wget &lt;a href=&#34;https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json&#34;&gt;https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/p&gt; &#xA;&lt;h1&gt;build json benchmark&lt;/h1&gt; &#xA;&lt;p&gt;xmake -b json_bm&lt;/p&gt; &#xA;&lt;h1&gt;copy twitter.json to the release dir&lt;/h1&gt; &#xA;&lt;p&gt;cp twitter.json build/windows/x64/release/twitter.json cp twitter.json build/linux/x86_64/release/twitter.json&lt;/p&gt; &#xA;&lt;h1&gt;run benchmark with twitter.json&lt;/h1&gt; &#xA;&lt;p&gt;xmake r json_bm&lt;/p&gt; &#xA;&lt;h1&gt;run benchmark with minimal twitter.json&lt;/h1&gt; &#xA;&lt;p&gt;xmake r json_bm -minimal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;=======&#xA;#### 5.3.1 Build libco&#xA;&#xA;```sh&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake ..&#xA;make -j8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.3.2 Build all projects&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake .. -DBUILD_ALL=ON&#xA;make -j8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;blockquote&gt; &#xA;      &lt;blockquote&gt; &#xA;       &lt;p&gt;master&lt;/p&gt; &#xA;      &lt;/blockquote&gt; &#xA;     &lt;/blockquote&gt; &#xA;    &lt;/blockquote&gt; &#xA;   &lt;/blockquote&gt; &#xA;  &lt;/blockquote&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;results on linux &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;     &lt;th&gt;parse&lt;/th&gt; &#xA;     &lt;th&gt;stringify&lt;/th&gt; &#xA;     &lt;th&gt;parse(minimal)&lt;/th&gt; &#xA;     &lt;th&gt;stringify(minimal)&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;rapidjson&lt;/td&gt; &#xA;     &lt;td&gt;1233.701 us&lt;/td&gt; &#xA;     &lt;td&gt;2503 us&lt;/td&gt; &#xA;     &lt;td&gt;1057.799 us&lt;/td&gt; &#xA;     &lt;td&gt;2243 us&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;simdjson&lt;/td&gt; &#xA;     &lt;td&gt;385.3 us&lt;/td&gt; &#xA;     &lt;td&gt;1779 us&lt;/td&gt; &#xA;     &lt;td&gt;351.752 us&lt;/td&gt; &#xA;     &lt;td&gt;2298 us&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;co/json&lt;/td&gt; &#xA;     &lt;td&gt;666.979 us&lt;/td&gt; &#xA;     &lt;td&gt;1660 us&lt;/td&gt; &#xA;     &lt;td&gt;457.381 us&lt;/td&gt; &#xA;     &lt;td&gt;981 us&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;results on windows &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;     &lt;th&gt;parse&lt;/th&gt; &#xA;     &lt;th&gt;stringify&lt;/th&gt; &#xA;     &lt;th&gt;parse(minimal)&lt;/th&gt; &#xA;     &lt;th&gt;stringify(minimal)&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;rapidjson&lt;/td&gt; &#xA;     &lt;td&gt;4197.339 us&lt;/td&gt; &#xA;     &lt;td&gt;3008 us&lt;/td&gt; &#xA;     &lt;td&gt;4078.067 us&lt;/td&gt; &#xA;     &lt;td&gt;2216 us&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;simdjson&lt;/td&gt; &#xA;     &lt;td&gt;843.06 us&lt;/td&gt; &#xA;     &lt;td&gt;2373 us&lt;/td&gt; &#xA;     &lt;td&gt;607.946 us&lt;/td&gt; &#xA;     &lt;td&gt;2119 us&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;co/json&lt;/td&gt; &#xA;     &lt;td&gt;717.444 us&lt;/td&gt; &#xA;     &lt;td&gt;1514 us&lt;/td&gt; &#xA;     &lt;td&gt;623.745 us&lt;/td&gt; &#xA;     &lt;td&gt;993 us&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=======&lt;/p&gt; &#xA;&lt;h4&gt;5.3.3 Enable HTTP/SSL features&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake .. -DWITH_LIBCURL=ON -DWITH_OPENSSL=ON&#xA;make -j8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.3.4 Build shared library&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake .. -DBUILD_SHARED_LIBS=ON&#xA;make -j8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.3.5 Install libco from vcpkg&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vcpkg install coost:x64-windows&#xA;&#xA;# HTTP &amp;amp; SSL support&#xA;vcpkg install coost[libcurl,openssl]:x64-windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.3.6 Install libco from conan&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;conan install coost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.3.7 Find coost in Cmake&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;find_package(coost REQUIRED CONFIG)&#xA;target_link_libraries(userTarget coost::co)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;6. License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT license. coost contains codes from some other projects, which have their own licenses, see details in &lt;a href=&#34;https://github.com/idealvin/coost/raw/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;7. Special thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The code of &lt;a href=&#34;https://github.com/idealvin/coost/tree/master/src/co/context&#34;&gt;co/context&lt;/a&gt; is from &lt;a href=&#34;https://github.com/tboox/tbox&#34;&gt;tbox&lt;/a&gt; by &lt;a href=&#34;https://github.com/waruqi&#34;&gt;ruki&lt;/a&gt;, special thanks!&lt;/li&gt; &#xA; &lt;li&gt;The early English documents of co are translated by &lt;a href=&#34;https://github.com/Leedehai&#34;&gt;Leedehai&lt;/a&gt; and &lt;a href=&#34;https://github.com/daidai21&#34;&gt;daidai21&lt;/a&gt;, special thanks!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/waruqi&#34;&gt;ruki&lt;/a&gt; has helped to improve the xmake building scripts, thanks in particular!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/izhengfan&#34;&gt;izhengfan&lt;/a&gt; provided cmake building scripts, thank you very much!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SpaceIm&#34;&gt;SpaceIm&lt;/a&gt; has improved the cmake building scripts, and provided support for &lt;code&gt;find_package&lt;/code&gt;. Really great help, thank you!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>