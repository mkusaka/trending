<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-15T01:29:28Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NVIDIA/cccl</title>
    <updated>2023-12-15T01:29:28Z</updated>
    <id>tag:github.com,2023-12-15:/NVIDIA/cccl</id>
    <link href="https://github.com/NVIDIA/cccl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CUDA C++ Core Libraries&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://codespaces.new/NVIDIA/cccl?quickstart=1&amp;amp;devcontainer_path=.devcontainer%2Fdevcontainer.json&#34;&gt;&lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; alt=&#34;Open in GitHub Codespaces&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/NVIDIA/cccl/raw/main/CONTRIBUTING.md&#34;&gt;Contributor Guide&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/NVIDIA/cccl/raw/main/.devcontainer/README.md&#34;&gt;Dev Containers&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://discord.gg/nvidiadeveloper&#34;&gt;Discord&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://godbolt.org/z/x4G73af9a&#34;&gt;Godbolt&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/orgs/NVIDIA/projects/6&#34;&gt;GitHub Project&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://nvidia.github.io/cccl/libcudacxx/&#34;&gt;libcudacxx Docs&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://nvidia.github.io/cccl/thrust/&#34;&gt;Thrust Docs&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://nvidia.github.io/cccl/cub/&#34;&gt;CUB Docs&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;CUDA C++ Core Libraries (CCCL)&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the CUDA C++ Core Libraries (CCCL) where our mission is to make CUDA C++ more delightful.&lt;/p&gt; &#xA;&lt;p&gt;This repository unifies three essential CUDA C++ libraries into a single, convenient repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/thrust&#34;&gt;Thrust&lt;/a&gt; (&lt;a href=&#34;https://github.com/nvidia/thrust&#34;&gt;former repo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/cub&#34;&gt;CUB&lt;/a&gt; (&lt;a href=&#34;https://github.com/nvidia/cub&#34;&gt;former repo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/libcudacxx&#34;&gt;libcudacxx&lt;/a&gt; (&lt;a href=&#34;https://github.com/nvidia/libcudacxx&#34;&gt;former repo&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The goal of CCCL is to provide CUDA C++ developers with building blocks that make it easier to write safe and efficient code. Bringing these libraries together streamlines your development process and broadens your ability to leverage the power of CUDA C++. For more information about the decision to unify these projects, see the &lt;a href=&#34;https://github.com/NVIDIA/cccl/discussions/520&#34;&gt;announcement here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The concept for the CUDA C++ Core Libraries (CCCL) grew organically out of the Thrust, CUB, and libcudacxx projects that were developed independently over the years with a similar goal: to provide high-quality, high-performance, and easy-to-use C++ abstractions for CUDA developers. Naturally, there was a lot of overlap among the three projects, and it became clear the community would be better served by unifying them into a single repository.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Thrust&lt;/strong&gt; is the C++ parallel algorithms library which inspired the introduction of parallel algorithms to the C++ Standard Library. Thrust&#39;s high-level interface greatly enhances programmer productivity while enabling performance portability between GPUs and multicore CPUs via configurable backends that allow using multiple parallel programming frameworks (such as CUDA, TBB, and OpenMP).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CUB&lt;/strong&gt; is a lower-level, CUDA-specific library designed for speed-of-light parallel algorithms across all GPU architectures. In addition to device-wide algorithms, it provides &lt;em&gt;cooperative algorithms&lt;/em&gt; like block-wide reduction and warp-wide scan, providing CUDA kernel developers with building blocks to create speed-of-light, custom kernels.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libcudacxx&lt;/strong&gt; is the CUDA C++ Standard Library. It provides an implementation of the C++ Standard Library that works in both host and device code. Additionally, it provides abstractions for CUDA-specific hardware features like synchronization primitives, cache control, atomics, and more.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The main goal of CCCL is to fill a similar role that the Standard C++ Library fills for Standard C++: provide general-purpose, speed-of-light tools to CUDA C++ developers, allowing them to focus on solving the problems that matter. Unifying these projects is the first step towards realizing that goal.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;This is a simple example demonstrating the use of CCCL functionality from Thrust, CUB, and libcudacxx.&lt;/p&gt; &#xA;&lt;p&gt;It shows how to use Thrust/CUB/libcudacxx to implement a simple parallel reduction kernel. Each thread block computes the sum of a subset of the array using &lt;code&gt;cub::BlockReduce&lt;/code&gt;. The sum of each block is then reduced to a single value using an atomic add via &lt;code&gt;cuda::atomic_ref&lt;/code&gt; from libcudacxx.&lt;/p&gt; &#xA;&lt;p&gt;It then shows how the same reduction can be done using Thrust&#39;s &lt;code&gt;reduce&lt;/code&gt; algorithm and compares the results.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godbolt.org/z/x4G73af9a&#34;&gt;Try it live on Godbolt!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;thrust/device_vector.h&amp;gt;&#xA;#include &amp;lt;cub/block/block_reduce.cuh&amp;gt;&#xA;#include &amp;lt;cuda/atomic&amp;gt;&#xA;#include &amp;lt;cstdio&amp;gt;&#xA;&#xA;constexpr int block_size = 256;&#xA;&#xA;__global__ void reduce(int const* data, int* result, int N) {&#xA;  using BlockReduce = cub::BlockReduce&amp;lt;int, block_size&amp;gt;;&#xA;  __shared__ typename BlockReduce::TempStorage temp_storage;&#xA;&#xA;  int const index = threadIdx.x + blockIdx.x * blockDim.x;&#xA;  int sum = 0;&#xA;  if (index &amp;lt; N) {&#xA;    sum += data[index];&#xA;  }&#xA;  sum = BlockReduce(temp_storage).Sum(sum);&#xA;&#xA;  if (threadIdx.x == 0) {&#xA;    cuda::atomic_ref&amp;lt;int, cuda::thread_scope_device&amp;gt; atomic_result(*result);&#xA;    atomic_result.fetch_add(sum, cuda::memory_order_relaxed);&#xA;  }&#xA;}&#xA;&#xA;int main() {&#xA;&#xA;  // Allocate and initialize input data&#xA;  int const N = 1000;&#xA;  thrust::device_vector&amp;lt;int&amp;gt; data(N);&#xA;  thrust::fill(data.begin(), data.end(), 1);&#xA;&#xA;  // Allocate output data&#xA;  thrust::device_vector&amp;lt;int&amp;gt; kernel_result(1);&#xA;&#xA;  // Compute the sum reduction of `data` using a custom kernel&#xA;  int const num_blocks = (N + block_size - 1) / block_size;&#xA;  reduce&amp;lt;&amp;lt;&amp;lt;num_blocks, block_size&amp;gt;&amp;gt;&amp;gt;(thrust::raw_pointer_cast(data.data()),&#xA;                                     thrust::raw_pointer_cast(kernel_result.data()),&#xA;                                     N);&#xA;&#xA;  auto const err = cudaDeviceSynchronize();&#xA;  if (err != cudaSuccess) {&#xA;    std::cout &amp;lt;&amp;lt; &#34;Error: &#34; &amp;lt;&amp;lt; cudaGetErrorString(err) &amp;lt;&amp;lt; std::endl;&#xA;    return -1;&#xA;  }&#xA;&#xA;  // Compute the same sum reduction using Thrust&#xA;  int const thrust_result = thrust::reduce(thrust::device, data.begin(), data.end(), 0);&#xA;&#xA;  // Ensure the two solutions are identical&#xA;  std::printf(&#34;Custom kernel sum: %d\n&#34;, kernel_result[0]);&#xA;  std::printf(&#34;Thrust reduce sum: %d\n&#34;, thrust_result);&#xA;  assert(kernel_result[0] == thrust_result);&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Users&lt;/h3&gt; &#xA;&lt;p&gt;Everything in CCCL is header-only. Therefore, users need only concern themselves with how they get the header files and how they incorporate them into their build system.&lt;/p&gt; &#xA;&lt;h4&gt;CUDA Toolkit&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to get started using CCCL is via the &lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit&#34;&gt;CUDA Toolkit&lt;/a&gt; which includes the CCCL headers. When you compile with &lt;code&gt;nvcc&lt;/code&gt;, it automatically adds CCCL headers to your include path so you can simply &lt;code&gt;#include&lt;/code&gt; any CCCL header in your code with no additional configuration required.&lt;/p&gt; &#xA;&lt;p&gt;If compiling with another compiler, you will need to update your build system&#39;s include search path to point to the CCCL headers in your CTK install (e.g., &lt;code&gt;/usr/local/cuda/include&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;thrust/device_vector.h&amp;gt;&#xA;#include &amp;lt;cub/cub.cuh&amp;gt;&#xA;#include &amp;lt;cuda/std/atomic&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GitHub&lt;/h4&gt; &#xA;&lt;p&gt;Users who want to stay on the cutting edge of CCCL development are encouraged to use CCCL from GitHub. Using a newer version of CCCL with an older version of the CUDA Toolkit is supported, but not the other way around. For complete information on compatibility between CCCL and the CUDA Toolkit, see &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/#platform-support&#34;&gt;our platform support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Everything in CCCL is header-only, so cloning and including it in a simple project is as easy as the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/NVIDIA/cccl.git&#xA;# Note:&#xA;nvcc -Icccl/thrust -Icccl/libcudacxx/include -Icccl/cub main.cu -o main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Ensure to use &lt;code&gt;-I&lt;/code&gt; and not &lt;code&gt;-isystem&lt;/code&gt; in order to ensure the cloned headers are found before those included in the CUDA Toolkit&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;CMake Integration&lt;/h5&gt; &#xA;&lt;p&gt;CCCL uses &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; for all build and installation infrastructure, including tests as well as targets to link against in other CMake projects. Therefore, CMake is the recommended way to integrate CCCL into another project.&lt;/p&gt; &#xA;&lt;p&gt;For a complete example of how to do this using CMake Package Manager see &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/examples/example_project&#34;&gt;our example project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other build systems should work, but only CMake is tested. Contributions to simplify integrating CCCL into other build systems are welcome.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Interested in contributing to making CCCL better? Check out our &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; for a comprehensive overview of everything you need to know to set up your development environment, make changes, run tests, and submit a PR.&lt;/p&gt; &#xA;&lt;h2&gt;Platform Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Objective:&lt;/strong&gt; This section describes where users can expect CCCL to compile and run successfully.&lt;/p&gt; &#xA;&lt;p&gt;In general, CCCL should work everywhere the CUDA Toolkit is supported, however, the devil is in the details. The sections below describe the details of support and testing for different versions of the CUDA Toolkit, host compilers, and C++ dialects.&lt;/p&gt; &#xA;&lt;h3&gt;CUDA Toolkit (CTK) Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The latest version of CCCL is backward compatible with the current and preceding CTK major version series&lt;/li&gt; &#xA; &lt;li&gt;CCCL is never forward compatible with any version of the CTK. Always use the same or newer than what is included with your CTK.&lt;/li&gt; &#xA; &lt;li&gt;Minor version CCCL upgrades won&#39;t break existing code, but new features may not support all CTK versions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CCCL users are encouraged to capitalize on the latest enhancements and &lt;a href=&#34;https://www.youtube.com/watch?v=tISy7EJQPzI&#34;&gt;&#34;live at head&#34;&lt;/a&gt; by always using the newest version of CCCL. For a seamless experience, you can upgrade CCCL independently of the entire CUDA Toolkit. This is possible because CCCL maintains backward compatibility with the latest patch release of every minor CTK release from both the current and previous major version series. In some exceptional cases, the minimum supported minor version of the CUDA Toolkit release may need to be newer than the oldest release within its major version series. For instance, CCCL requires a minimum supported version of 11.1 from the 11.x series due to an unavoidable compiler issue present in CTK 11.0.&lt;/p&gt; &#xA;&lt;p&gt;When a new major CTK is released, we drop support for the oldest supported major version.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CCCL Version&lt;/th&gt; &#xA;   &lt;th&gt;Supports CUDA Toolkit Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.x&lt;/td&gt; &#xA;   &lt;td&gt;11.1 - 11.8, 12.x (only latest patch releases)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.x (Future)&lt;/td&gt; &#xA;   &lt;td&gt;12.x, 13.x (only latest patch releases)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/#compatibility-guidelines&#34;&gt;Well-behaved code&lt;/a&gt; using the latest CCCL should compile and run successfully with any supported CTK version. Exceptions may occur for new features that depend on new CTK features, so those features would not work on older versions of the CTK. For example, C++20 support was not added to &lt;code&gt;nvcc&lt;/code&gt; until CUDA 12.0, so CCCL features that depend on C++20 would not work with CTK 11.x.&lt;/p&gt; &#xA;&lt;p&gt;Users can integrate a newer version of CCCL into an older CTK, but not the other way around. This means an older version of CCCL is not compatible with a newer CTK. In other words, &lt;strong&gt;CCCL is never forward compatible with the CUDA Toolkit.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The table below summarizes compatibility of the CTK and CCCL:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;CTK Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Included CCCL Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Desired CCCL&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Supported?&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CTK &lt;code&gt;X.Y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL &lt;code&gt;MAJOR.MINOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL &lt;code&gt;MAJOR.MINOR+n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Some new features might not work&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CTK &lt;code&gt;X.Y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL &lt;code&gt;MAJOR.MINOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL &lt;code&gt;MAJOR+1.MINOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Possible breaks; some new features might not be available&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CTK &lt;code&gt;X.Y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL &lt;code&gt;MAJOR.MINOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL &lt;code&gt;MAJOR+2.MINOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL supports only two CTK major versions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CTK &lt;code&gt;X.Y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL &lt;code&gt;MAJOR.MINOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL &lt;code&gt;MAJOR.MINOR-n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL isn&#39;t forward compatible&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CTK &lt;code&gt;X.Y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL &lt;code&gt;MAJOR.MINOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL &lt;code&gt;MAJOR-n.MINOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CCCL isn&#39;t forward compatible&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more information on CCCL versioning, API/ABI compatibility, and breaking changes see the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/#versioning&#34;&gt;Versioning&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;h3&gt;Operating Systems&lt;/h3&gt; &#xA;&lt;p&gt;Unless otherwise specified, CCCL supports all the same operating systems as the CUDA Toolkit, which are documented here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#system-requirements&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html#system-requirements&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Host Compilers&lt;/h3&gt; &#xA;&lt;p&gt;Unless otherwise specified, CCCL supports all the same host compilers as the CUDA Toolkit, which are documented here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#host-compiler-support-policy&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html#system-requirements&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;C++ Dialects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C++11 (Deprecated in Thrust/CUB, to be removed in next major version)&lt;/li&gt; &#xA; &lt;li&gt;C++14 (Deprecated in Thrust/CUB, to be removed in next major version)&lt;/li&gt; &#xA; &lt;li&gt;C++17&lt;/li&gt; &#xA; &lt;li&gt;C++20&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GPU Architectures&lt;/h3&gt; &#xA;&lt;p&gt;Unless otherwise specified, CCCL supports all the same GPU architectures/Compute Capabilities as the CUDA Toolkit, which are documented here: &lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capability&#34;&gt;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capability&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that some features may only support certain architectures/Compute Capabilities.&lt;/p&gt; &#xA;&lt;h3&gt;Testing Strategy&lt;/h3&gt; &#xA;&lt;p&gt;CCCL&#39;s testing strategy strikes a balance between testing as many configurations as possible and maintaining reasonable CI times.&lt;/p&gt; &#xA;&lt;p&gt;For CUDA Toolkit versions, testing is done against both the oldest and the newest supported versions. For instance, if the latest version of the CUDA Toolkit is 12.3, tests are conducted against 11.1 and 12.3. For each CUDA version, builds are completed against all supported host compilers with all supported C++ dialects.&lt;/p&gt; &#xA;&lt;p&gt;The testing strategy and matrix are constantly evolving. The matrix defined in the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/ci/matrix.yaml&#34;&gt;&lt;code&gt;ci/matrix.yaml&lt;/code&gt;&lt;/a&gt; file is the definitive source of truth. For more information about our CI pipeline, see &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/ci-overview.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Objective:&lt;/strong&gt; This section describes how CCCL is versioned, API/ABI stability guarantees, and compatibility guidelines to minimize upgrade headaches.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The entirety of CCCL&#39;s API shares a common semantic version across all components&lt;/li&gt; &#xA; &lt;li&gt;Only the most recently released version is supported and fixes are not backported to prior releases&lt;/li&gt; &#xA; &lt;li&gt;API breaking changes and incrementing CCCL&#39;s major version will only coincide with a new major version release of the CUDA Toolkit&lt;/li&gt; &#xA; &lt;li&gt;Not all source breaking changes are considered breaking changes of the public API that warrant bumping the major version number&lt;/li&gt; &#xA; &lt;li&gt;Do not rely on ABI stability of entities in the &lt;code&gt;cub::&lt;/code&gt; or &lt;code&gt;thrust::&lt;/code&gt; namespaces&lt;/li&gt; &#xA; &lt;li&gt;ABI breaking changes for symbols in the &lt;code&gt;cuda::&lt;/code&gt; namespace may happen at any time, but will be reflected by incrementing the ABI version which is embedded in an inline namespace for all &lt;code&gt;cuda::&lt;/code&gt; symbols. Multiple ABI versions may be supported concurrently.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Prior to merging Thrust, CUB, and libcudacxx into this repository, each library was independently versioned according to semantic versioning. Starting with the 2.1 release, all three libraries synchronized their release versions in their separate repositories. Moving forward, CCCL will continue to be released under a single &lt;a href=&#34;https://semver.org/&#34;&gt;semantic version&lt;/a&gt;, with 2.2.0 being the first release from the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/www.github.com/nvidia/cccl&#34;&gt;nvidia/cccl&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h3&gt;Breaking Change&lt;/h3&gt; &#xA;&lt;p&gt;A Breaking Change is a change to &lt;strong&gt;explicitly supported&lt;/strong&gt; functionality between released versions that would require a user to do work in order to upgrade to the newer version.&lt;/p&gt; &#xA;&lt;p&gt;In the limit, &lt;a href=&#34;https://www.hyrumslaw.com/&#34;&gt;&lt;em&gt;any&lt;/em&gt; change&lt;/a&gt; has the potential to break someone somewhere. As a result, not all possible source breaking changes are considered Breaking Changes to the public API that warrant bumping the major semantic version.&lt;/p&gt; &#xA;&lt;p&gt;The sections below describe the details of breaking changes to CCCL&#39;s API and ABI.&lt;/p&gt; &#xA;&lt;h3&gt;Application Programming Interface (API)&lt;/h3&gt; &#xA;&lt;p&gt;CCCL&#39;s public API is the entirety of the functionality &lt;em&gt;intentionally&lt;/em&gt; exposed to provide the utility of the library.&lt;/p&gt; &#xA;&lt;p&gt;In other words, CCCL&#39;s public API goes beyond just function signatures and includes (but is not limited to):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The location and names of headers intended for direct inclusion in user code&lt;/li&gt; &#xA; &lt;li&gt;The namespaces intended for direct use in user code&lt;/li&gt; &#xA; &lt;li&gt;The declarations and/or definitions of functions, classes, and variables located in headers and intended for direct use in user code&lt;/li&gt; &#xA; &lt;li&gt;The semantics of functions, classes, and variables intended for direct use in user code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Moreover, CCCL&#39;s public API does &lt;strong&gt;not&lt;/strong&gt; include any of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any symbol prefixed with &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;__&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any symbol whose name contains &lt;code&gt;detail&lt;/code&gt; including the &lt;code&gt;detail::&lt;/code&gt; namespace or a macro&lt;/li&gt; &#xA; &lt;li&gt;Any header file contained in a &lt;code&gt;detail/&lt;/code&gt; directory or sub-directory thereof&lt;/li&gt; &#xA; &lt;li&gt;The header files implicitly included by any header part of the public API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In general, the goal is to avoid breaking anything in the public API. Such changes are made only if they offer users better performance, easier-to-understand APIs, and/or more consistent APIs.&lt;/p&gt; &#xA;&lt;p&gt;Any breaking change to the public API will require bumping CCCL&#39;s major version number. In keeping with &lt;a href=&#34;https://docs.nvidia.com/deploy/cuda-compatibility/#minor-version-compatibility&#34;&gt;CUDA Minor Version Compatibility&lt;/a&gt;, API breaking changes and CCCL major version bumps will only occur coinciding with a new major version release of the CUDA Toolkit.&lt;/p&gt; &#xA;&lt;p&gt;Anything not part of the public API may change at any time without warning.&lt;/p&gt; &#xA;&lt;h4&gt;API Versioning&lt;/h4&gt; &#xA;&lt;p&gt;The public API of all CCCL&#39;s components share a unified semantic version of &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Only the most recently released version is supported. As a rule, features and bug fixes are not backported to previously released version or branches.&lt;/p&gt; &#xA;&lt;p&gt;The preferred method for querying the version is to use &lt;code&gt;CCCL_[MAJOR/MINOR/PATCH_]VERSION&lt;/code&gt; as described below. For backwards compatibility, the Thrust/CUB/libcudacxxx version definitions are available and will always be consistent with &lt;code&gt;CCCL_VERSION&lt;/code&gt;. Note that Thrust/CUB use a &lt;code&gt;MMMmmmpp&lt;/code&gt; scheme whereas the CCCL and libcudacxx use &lt;code&gt;MMMmmmppp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;CCCL&lt;/th&gt; &#xA;   &lt;th&gt;libcudacxx&lt;/th&gt; &#xA;   &lt;th&gt;Thrust&lt;/th&gt; &#xA;   &lt;th&gt;CUB&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Header&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;cuda/version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;cuda/std/version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;thrust/version.h&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;cub/version.h&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Major Version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CCCL_MAJOR_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;_LIBCUDACXX_CUDA_API_VERSION_MAJOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;THRUST_MAJOR_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CUB_MAJOR_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Minor Version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CCCL_MINOR_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;_LIBCUDACXX_CUDA_API_VERSION_MINOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;THRUST_MINOR_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CUB_MINOR_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Patch/Subminor Version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CCCL_PATCH_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;_LIBCUDACXX_CUDA_API_VERSION_PATCH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;THRUST_SUBMINOR_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CUB_SUBMINOR_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Concatenated Version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CCCL_VERSION (MMMmmmppp)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;_LIBCUDACXX_CUDA_API_VERSION (MMMmmmppp)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;THRUST_VERSION (MMMmmmpp)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CUB_VERSION (MMMmmmpp)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Application Binary Interface (ABI)&lt;/h3&gt; &#xA;&lt;p&gt;The Application Binary Interface (ABI) is a set of rules for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How a library&#39;s components are represented in machine code&lt;/li&gt; &#xA; &lt;li&gt;How those components interact across different translation units&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A library&#39;s ABI includes, but is not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The mangled names of functions and types&lt;/li&gt; &#xA; &lt;li&gt;The size and alignment of objects and types&lt;/li&gt; &#xA; &lt;li&gt;The semantics of the bytes in the binary representation of an object&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An &lt;strong&gt;ABI Breaking Change&lt;/strong&gt; is any change that results in a change to the ABI of a function or type in the public API. For example, adding a new data member to a struct is an ABI Breaking Change as it changes the size of the type.&lt;/p&gt; &#xA;&lt;p&gt;In CCCL, the guarantees about ABI are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Symbols in the &lt;code&gt;thrust::&lt;/code&gt; and &lt;code&gt;cub::&lt;/code&gt; namespaces may break ABI at any time without warning.&lt;/li&gt; &#xA; &lt;li&gt;The ABI of &lt;code&gt;cub::&lt;/code&gt; symbols includes the CUDA architectures used for compilation. Therefore, a single &lt;code&gt;cub::&lt;/code&gt; symbol may have a different ABI if compiled with different architectures.&lt;/li&gt; &#xA; &lt;li&gt;Symbols in the &lt;code&gt;cuda::&lt;/code&gt; namespace may also break ABI at any time. However, &lt;code&gt;cuda::&lt;/code&gt; symbols embed an ABI version number that is incremented whenever an ABI break occurs. Multiple ABI versions may be supported concurrently, and therefore users have the option to revert to a prior ABI version. For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/libcudacxx/docs/releases/versioning.md&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Who should care about ABI?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In general, CCCL users only need to worry about ABI issues when building or using a binary artifact (like a shared library) whose API directly or indirectly includes types provided by CCCL.&lt;/p&gt; &#xA;&lt;p&gt;For example, consider if &lt;code&gt;libA.so&lt;/code&gt; was built using CCCL version &lt;code&gt;X&lt;/code&gt; and its public API includes a function like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void foo(cuda::std::optional&amp;lt;int&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If another library, &lt;code&gt;libB.so&lt;/code&gt;, is compiled using CCCL version &lt;code&gt;Y&lt;/code&gt; and uses &lt;code&gt;foo&lt;/code&gt; from &lt;code&gt;libA.so&lt;/code&gt;, then this can fail if there was an ABI break between version &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;. Unlike with API breaking changes, ABI breaks usually do not require code changes and only require recompiling everything to use the same ABI version.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about ABI and why it is important, see &lt;a href=&#34;https://wg21.link/P2028R0&#34;&gt;What is ABI, and What Should C++ Do About It?&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compatibility Guidelines&lt;/h3&gt; &#xA;&lt;p&gt;As mentioned above, not all possible source breaking changes constitute a Breaking Change that would require incrementing CCCL&#39;s API major version number.&lt;/p&gt; &#xA;&lt;p&gt;Users are encouraged to adhere to the following guidelines in order to minimize the risk of disruptions from accidentally depending on parts of CCCL that are not part of the public API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do not add any declarations to the &lt;code&gt;thrust::&lt;/code&gt;, &lt;code&gt;cub::&lt;/code&gt;, &lt;code&gt;nv::&lt;/code&gt;, or &lt;code&gt;cuda::&lt;/code&gt; namespaces unless an exception is noted for a specific symbol, e.g., specializing a type trait. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Rationale&lt;/strong&gt;: This would cause symbol conflicts if a symbol is added with the same name.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Do not take the address of any API in the &lt;code&gt;thrust::&lt;/code&gt;, &lt;code&gt;cub::&lt;/code&gt;, &lt;code&gt;cuda::&lt;/code&gt;, or &lt;code&gt;nv::&lt;/code&gt; namespaces. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Rationale&lt;/strong&gt;: This would prevent adding overloads of these APIs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Do not forward declare any API in the &lt;code&gt;thrust::&lt;/code&gt;, &lt;code&gt;cub::&lt;/code&gt;, &lt;code&gt;cuda::&lt;/code&gt;, or &lt;code&gt;nv::&lt;/code&gt; namespaces. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Rationale&lt;/strong&gt;: This would prevent adding overloads of these APIs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Do not directly reference any symbol prefixed with &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;__&lt;/code&gt;, or with &lt;code&gt;detail&lt;/code&gt; anywhere in its name including a &lt;code&gt;detail::&lt;/code&gt; namespace or macro &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Rationale&lt;/strong&gt;: These symbols are for internal use only and may change at any time without warning.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Include what you use. For every CCCL symbol that you use, directly &lt;code&gt;#include&lt;/code&gt; the header file that declares that symbol. In other words, do not rely on headers implicitly included by other headers. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Rationale&lt;/strong&gt;: Internal includes may change at any time.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Portions of this section were inspired by &lt;a href=&#34;https://abseil.io/about/compatibility&#34;&gt;Abseil&#39;s Compatibility Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deprecation Policy&lt;/h2&gt; &#xA;&lt;p&gt;We will do our best to notify users prior to making any breaking changes to the public API, ABI, or modifying the supported platforms and compilers.&lt;/p&gt; &#xA;&lt;p&gt;As appropriate, deprecations will come in the form of programmatic warnings which can be disabled.&lt;/p&gt; &#xA;&lt;p&gt;The deprecation period will depend on the impact of the change, but will usually last at least 2 minor version releases.&lt;/p&gt; &#xA;&lt;h2&gt;Mapping to CTK Versions&lt;/h2&gt; &#xA;&lt;p&gt;// Links to old CCCL mapping tables // Add new CCCL version to a new table&lt;/p&gt; &#xA;&lt;h2&gt;CI Pipeline Overview&lt;/h2&gt; &#xA;&lt;p&gt;For a detailed overview of the CI pipeline, see &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cccl/main/ci-overview.md&#34;&gt;ci-overview.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;Projects that are related to CCCL&#39;s mission to make CUDA C++ more delightful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/cuCollections&#34;&gt;cuCollections&lt;/a&gt; - GPU accelerated data structures like hash tables&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/nvbench&#34;&gt;NVBench&lt;/a&gt; - Benchmarking library tailored for CUDA applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvidia/stdexec&#34;&gt;stdexec&lt;/a&gt; - Reference implementation for Senders asynchronous programming model&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Projects Using CCCL&lt;/h2&gt; &#xA;&lt;p&gt;Does your project use CCCL? &lt;a href=&#34;https://github.com/NVIDIA/cccl/edit/main/README.md&#34;&gt;Open a PR to add your project to this list!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/AMGX&#34;&gt;AmgX&lt;/a&gt; - Multi-grid linear solver library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hpcaitech/ColossalAI&#34;&gt;ColossalAI&lt;/a&gt; - Tools for writing distributed deep learning models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rapidsai/cudf&#34;&gt;cuDF&lt;/a&gt; - Algorithms and file readers for ETL data analytics&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rapidsai/cugraph&#34;&gt;cuGraph&lt;/a&gt; - Algorithms for graph analytics&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rapidsai/cuml&#34;&gt;cuML&lt;/a&gt; - Machine learning algorithms and primitives&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cupy.dev&#34;&gt;CuPy&lt;/a&gt; - NumPy &amp;amp; SciPy for GPU&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/cusolver&#34;&gt;cuSOLVER&lt;/a&gt; - Dense and sparse linear solvers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rapidsai/cuspatial&#34;&gt;cuSpatial&lt;/a&gt; - Algorithms for geospatial operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GooFit/GooFit&#34;&gt;GooFit&lt;/a&gt; - Library for maximum-likelihood fits&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heavyai/heavydb&#34;&gt;HeavyDB&lt;/a&gt; - SQL database engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glotzerlab/hoomd-blue&#34;&gt;HOOMD&lt;/a&gt; - Monte Carlo and molecular dynamics simulations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA-Merlin/HugeCTR&#34;&gt;HugeCTR&lt;/a&gt; - GPU-accelerated recommender framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MultithreadCorner/Hydra&#34;&gt;Hydra&lt;/a&gt; - High-energy Physics Data Analysis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hypre-space/hypre&#34;&gt;Hypre&lt;/a&gt; - Multigrid linear solvers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bytedance/lightseq&#34;&gt;LightSeq&lt;/a&gt; - Training and inference for sequence processing and generation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pytorch/pytorch&#34;&gt;PyTorch&lt;/a&gt; - Tensor and neural network computations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Qiskit/qiskit-aer&#34;&gt;Qiskit&lt;/a&gt; - High performance simulator for quantum circuits&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lattice/quda&#34;&gt;QUDA&lt;/a&gt; - Lattice quantum chromodynamics (QCD) computations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rapidsai/raft&#34;&gt;RAFT&lt;/a&gt; - Algorithms and primitives for machine learning&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tensorflow/tensorflow&#34;&gt;TensorFlow&lt;/a&gt; - End-to-end platform for machine learning&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/TensorRT&#34;&gt;TensorRT&lt;/a&gt; - Deep learning inference&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CannyLab/tsne-cuda&#34;&gt;tsne-cuda&lt;/a&gt; - Stochastic Neighborhood Embedding library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.kitware.com/vtk/vtk&#34;&gt;Visualization Toolkit (VTK)&lt;/a&gt; - Rendering and visualization library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dmlc/xgboost&#34;&gt;XGBoost&lt;/a&gt; - Gradient boosting machine learning algorithms&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Mes0903/Cpp-Miner</title>
    <updated>2023-12-15T01:29:28Z</updated>
    <id>tag:github.com,2023-12-15:/Mes0903/Cpp-Miner</id>
    <link href="https://github.com/Mes0903/Cpp-Miner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1 class&gt;&#xA; &lt;center&gt;&#xA;  &lt;img src=&#34;https://i.imgur.com/thmVmX6.png?w=1000&#34; height=&#34;50&#34;&gt; 礦坑系列 ── 序 &#xA;  &lt;img src=&#34;https://i.imgur.com/thmVmX6.png?w=1000&#34; height=&#34;50&#34;&gt;&#xA; &lt;/center&gt;&lt;/h1&gt; &#xA;&lt;p&gt;礦坑系列首頁：&lt;strong&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner&#34; class=&#34;redlink&#34;&gt;首頁&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;hackmd 版首頁：&lt;strong&gt;&lt;a href=&#34;https://hackmd.io/@Mes/Cpp_Miner/https%3A%2F%2Fhackmd.io%2F%40Mes%2FPreface&#34; class=&#34;redlink&#34;&gt;首頁&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;文章一覽：&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/raw/main/SUMMARY.md&#34;&gt;連結&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;前言 &lt;img src=&#34;https://i.imgur.com/thmVmX6.png?w=930&#34; height=&#34;50&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;這是一本介紹 Modern C++ 與一些 C++ 深度解析的書，從我的 hackmd 搬運而來，你可以從&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/raw/main/SUMMARY.md&#34;&gt;這裡&lt;/a&gt;看見文章一覽。 如果您是 C++ 新手，我會建議您先去看 Miner Tutorial 的部分，裡面對初學者會學到的東西做了簡單的介紹，可以幫助大家理解、回憶一些基礎知識，同時可以讓你習慣本書風格。&lt;/p&gt; &#xA;&lt;p&gt;讀著讀著便來到了 Modern C++，語法和文法比以往的 C、C++03 複雜很多，而且在找文章閱讀時發現網路上中文的資源其實沒有想像中的多，受到 Jserv 老師「你所不知道的 C 語言系列」啟發，想著那就自己來寫吧! 於是就有了這個礦坑系列~&lt;/p&gt; &#xA;&lt;p&gt;原本想說是一個禮拜一篇，但後來發現每篇文章的撰寫時間大概會需要到 50 小時，一個禮拜要一篇實在是有點難哈哈，&lt;del&gt;所以後來調整的速度大概會是一個月一篇左右，也有可能兩篇，但也有可能 0 篇QQ&lt;/del&gt;，後來大約是三個月一篇的速度，若是短篇，像是黑魔法，可能一兩個禮拜便能寫好了，要看寫的內容而定。&lt;/p&gt; &#xA;&lt;p&gt;文章的內容主要會是 Cppreference、draft 或一些好文章的翻譯，可以的話會把語法底層的一些原理也寫進去，可能會碰到一點編譯器和組語，希望能夠寫得盡量詳細，如果有什麼想看的或想補充的也都歡迎留言或私訊告訴我。&lt;/p&gt; &#xA;&lt;p&gt;而取叫礦坑的原因是因為在寫這類文章的時候要挖的東西實在是太多了XD 常常需要挖到 C++ 會議的討論紀錄之類的，像是礦坑那樣深不見底，而想要的東西像鑽石一樣十分難找，自己就像個礦工一樣不停地往內部探索，所以就取叫礦坑系列啦!&lt;/p&gt; &#xA;&lt;p&gt;感謝一路上教我許多東西的老師、朋友與 Stackoverflow、Discord 上那些不認識但十分熱心的人們。&lt;/p&gt; &#xA;&lt;h1&gt;Summary 文章一覽 &lt;img src=&#34;https://i.imgur.com/thmVmX6.png?w=930&#34; height=&#34;50&#34;&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Miner Tutorial 新手教學&lt;/h2&gt; &#xA;&lt;p&gt;此處為新手教學，可以幫助大家回憶以前的東西，並幫助理解基礎 C++ 與熟悉本書風格。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_Tutorial/Environment_Building&#34;&gt;Windows 內的 C++ 與 Vscode 環境建置&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_Tutorial/Object_Expression_Statement&#34;&gt;Object、Expression 與 Statement&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_Tutorial/Array_Pointer&#34;&gt;Array 與 Pointer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_Tutorial/Function_Memory&#34;&gt;Function 與 Memory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_Tutorial/Class&#34;&gt;Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_Tutorial/OO&#34;&gt;Class 與物件導向&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cpp Miner 礦坑系列本文&lt;/h2&gt; &#xA;&lt;h3&gt;C++11、14&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_main/Value_Categories&#34;&gt;Value Categories 值類別&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_main/malloc_new_POD&#34;&gt;malloc、new 與 POD Type&lt;/a&gt; (部分待補)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_main/Std_Function&#34;&gt;std::function&lt;/a&gt; (source code 解析部分尚未完成)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;C++17&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_main/Structured_Binding&#34;&gt;Structured Binding 結構化綁定&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;C++20&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_main/Concept_SFINAE_DetectionIdiom&#34;&gt;Concept、SFINAE 與 Detection Idiom&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;礦坑內的黑魔法&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_BlackMagic/Explicit_Detect_Copy&#34;&gt;用 &#34;explicit&#34; 來偵測複製&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_BlackMagic/SSO&#34;&gt;Small String Optimization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_BlackMagic/NoConst&#34;&gt;四個不該用 &#34;const&#34; 的時機&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mes0903/Cpp-Miner/tree/main/Miner_BlackMagic/Indirect_through_null_pointer&#34;&gt;Indirect through null pointer 是 UB 嗎?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;貢獻此書 &lt;img src=&#34;https://i.imgur.com/thmVmX6.png?w=930&#34; height=&#34;50&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;如果你有任何想討論的內容、想看的內容，或是想添加章節等，歡迎你來聯絡我 &lt;a href=&#34;mailto:mes900903@gmail.com&#34;&gt;email&lt;/a&gt;，也可以加我 Discord &lt;code&gt;mes_0903&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;如果發現有錯字，可以到 hackmd 處直接修改，我會收到信件通知，你也可以直接發 PR，從 hackmd 搬過來有些格式可能會跑掉，若你發現格式長得有點奇怪，該換行的地方沒有換行等等的，也歡迎告訴我。&lt;/p&gt; &#xA;&lt;p&gt;如果由於版本更新導致文章內容已與事實不符，也歡迎進行更新，文章有時內容會過於艱澀導致我無法翻譯，若你有能力且樂意幫忙翻譯，也很歡迎您修改。&lt;/p&gt; &#xA;&lt;h1&gt;關於我 &lt;img src=&#34;https://i.imgur.com/thmVmX6.png?w=930&#34; height=&#34;50&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;我是 Mes，一個喜愛 C++ 的人，寫文的現在(2021/04/02) 就讀中央大學數學系，目前大一，&lt;del&gt;成績很差，盡量不要問我數學&lt;/del&gt;，如果想一起討論程式問題的話可以加我的 Discord、FB 或 IG，我主要用這三個，程式方面的討論我主要都在 Discord 找人問和回答問題：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord：&lt;code&gt;mes_0903&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Facebook：&lt;a href=&#34;https://www.facebook.com/Mes0903/&#34;&gt;鄭詠澤&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Youtube：&lt;a href=&#34;https://www.youtube.com/channel/UCT3MbveOznWLlxNIdLUUOhg&#34;&gt;Mes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;興趣是寫作、Compiler、OS、C++、Assembly，偶爾會去攝影，會在 IG 上寫雜記和分享家裡的貓咪照片，FB 版上全是分享別人動物的貼文，&lt;del&gt;愜意的生活&lt;/del&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;&lt;span class=&#34;orange&#34;&gt;一些資源&lt;/span&gt; &lt;img src=&#34;https://i.imgur.com/thmVmX6.png?w=930&#34; height=&#34;50&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;下面這些是我可能會出現的 Discord 群，我通常會在這些群裡面回答問題或問問題：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://discord.gg/programming&#34; class=&#34;wheatlink&#34;&gt;The Programmer&#39;s Hangout&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://discord.gg/nRafgDK8fB&#34; class=&#34;wheatlink&#34;&gt;Better C++&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://discord.gg/J5hBe8F&#34; class=&#34;wheatlink&#34;&gt;C++ Help&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://discord.gg/7zfsaTnpbT&#34; class=&#34;wheatlink&#34;&gt;Together C &amp;amp; C++&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://discord.gg/vSYgpmPrra&#34; class=&#34;wheatlink&#34;&gt;#include&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://discord.gg/ypvyFDugM8&#34; class=&#34;wheatlink&#34;&gt;中學資訊討論群&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如果有哪個連結失效了還請留言或私訊告訴我，我都選了永久的，應該是不會失效才對XD 我非常建議大家加入 Discord 群組討論，Telegram 據我所知還沒有這麼多的群組，而 Discord 有一個優點就是資訊流通的速度非常快，你問完問題馬上就會有人回答了，如果不懂你能馬上再回問她，相較於 FB 社團，甚至是 Email 問外國演講者、作者問題之類的，速度會快上許多。&lt;/p&gt; &#xA;&lt;p&gt;雖然自己思考問題是很好的進步方式，這樣的方式能讓你的思緒更清晰，對事情和原理的理解也會更透徹，但若到了一定階段你還沒思考出來，最好還是找一些人問一下會比較好，別人可能會從你從沒想過的角度來解釋問題，讓你豁然開朗。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;再來是一些 C++ 的文件：&lt;/p&gt; &#xA;&lt;strong&gt; &lt;p&gt;&lt;span class=&#34;burlywood&#34;&gt;C/C++ Language References (final/current working drafts)&lt;/span&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/g7fxJnW.png&#34; height=&#34;30&#34;&gt; C89： (沒有 PDF 版本) 、 &lt;a href=&#34;http://port70.net/~nsz/c/c89/c89-draft.html&#34; class=&#34;wheatlink&#34;&gt;HTML&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/g7fxJnW.png&#34; height=&#34;30&#34;&gt; C99 (N1256)： &lt;a href=&#34;http://port70.net/~nsz/c/c99/n1256.pdf&#34; class=&#34;wheatlink&#34;&gt;PDF&lt;/a&gt; 、 &lt;a href=&#34;http://port70.net/~nsz/c/c99/n1256.html&#34; class=&#34;wheatlink&#34;&gt;HTML&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/g7fxJnW.png&#34; height=&#34;30&#34;&gt; C11 (N1570)： &lt;a href=&#34;http://port70.net/~nsz/c/c11/n1570.pdf&#34; class=&#34;wheatlink&#34;&gt;PDF&lt;/a&gt; 、 &lt;a href=&#34;http://port70.net/~nsz/c/c11/n1570.html&#34; class=&#34;wheatlink&#34;&gt;HTML&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/g7fxJnW.png&#34; height=&#34;30&#34;&gt; C17 (N2176)： &lt;a href=&#34;https://files.lhmouse.com/standards/ISO%20C%20N2176.pdf&#34; class=&#34;wheatlink&#34;&gt;PDF&lt;/a&gt; 、 (沒有 HTML 版本)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/g7fxJnW.png&#34; height=&#34;30&#34;&gt; C23： &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2596.pdf&#34; class=&#34;wheatlink&#34;&gt;PDF&lt;/a&gt; 、 (沒有 HTML 版本)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OUNNxrC.png&#34; height=&#34;30&#34;&gt; C++ 11 (N3337)： &lt;a href=&#34;http://open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf&#34; class=&#34;wheatlink&#34;&gt;PDF&lt;/a&gt; 、 &lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n3337/&#34; class=&#34;wheatlink&#34;&gt;HTML&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OUNNxrC.png&#34; height=&#34;30&#34;&gt; C++ 14 (N4140)： &lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4140/draft.pdf&#34; class=&#34;wheatlink&#34;&gt;PDF&lt;/a&gt; 、 &lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4140/&#34; class=&#34;wheatlink&#34;&gt;HTML&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OUNNxrC.png&#34; height=&#34;30&#34;&gt; C++ 17 (N4659)： &lt;a href=&#34;http://open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf&#34; class=&#34;wheatlink&#34;&gt;PDF&lt;/a&gt; 、 &lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4659/&#34; class=&#34;wheatlink&#34;&gt;HTML&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OUNNxrC.png&#34; height=&#34;30&#34;&gt; C++ 20 (N4861)： &lt;a href=&#34;http://open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf&#34; class=&#34;wheatlink&#34;&gt;PDF&lt;/a&gt; 、 &lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4861/&#34; class=&#34;wheatlink&#34;&gt;HTML&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OUNNxrC.png&#34; height=&#34;30&#34;&gt; C++ 23 (N4885)： &lt;a href=&#34;http://open-std.org/JTC1/SC22/WG21/docs/papers/2021/n4885.pdf&#34; class=&#34;wheatlink&#34;&gt;PDF&lt;/a&gt; 、 &lt;a href=&#34;https://eel.is/c++draft/&#34; class=&#34;wheatlink&#34;&gt;HTML&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &lt;/strong&gt; &#xA;&lt;p&gt;你可以在 &lt;a href=&#34;https://en.cppreference.com/w/cpp/links&#34; class=&#34;wheatlink&#34;&gt;Cppreference&lt;/a&gt; 看到這些資訊，我的閱讀方式是 Drafts 配 Cppreference 來看，然後上網找例子或自己想一些例子來驗證，如果有不懂的就會到 Google 和 Stackoverflow 搜尋，有時候 CSDN 也會有答案，但就如我前面所說的，比較新的東西通常中文資源很少，不太會有什麼文章。不過據我所知，Drafts 這樣密密麻麻的英文字對許多人來說並不是很友善，所以我的方法可能並不適合你，希望你可以找到自己的方法。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;那如果一直找不到 (可能是比較深或偏向英文方面意思理解有困難等等)，那我就會到 Discord 群裡面發問，發問的方式可以參考 &lt;strong&gt;&lt;a href=&#34;https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way&#34; class=&#34;wheatlink&#34;&gt;How To Ask Questions The Smart Way&lt;/a&gt;&lt;/strong&gt;，總之不要問那些一到 Google 就馬上可以找到的問題，如果你問完問題別人馬上丟了一個解答的網址給你，你應該要檢討一下XD&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;再來是一些不錯的頻道：&lt;/p&gt; &#xA;&lt;strong&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCQ-W1KE9EYfdxhL6S4twUNw&#34; class=&#34;wheatlink&#34;&gt;The Cherno&lt;/a&gt; (親民)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCNge3iECU0XKjshac_hdejw&#34; class=&#34;wheatlink&#34;&gt;Italian Cpp Community&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCIm-u7l65hp5jboSJrB7U5w&#34; class=&#34;wheatlink&#34;&gt;. GUTS&lt;/a&gt; (jserv)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw&#34; class=&#34;wheatlink&#34;&gt;3Blue1Brown&lt;/a&gt; (有點像科普)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/user/CppCon/videos&#34; class=&#34;wheatlink&#34;&gt;CppCon&lt;/a&gt; (非常推薦這個，有很多大佬會分享東西)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCxHAlbZQNFU2LgEtiqd2Maw&#34; class=&#34;wheatlink&#34;&gt;Cᐩᐩ Weekly With Jason Turner&lt;/a&gt; (這個很猛)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &lt;/strong&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;前言差不多就這樣啦，我是 Mes，一個喜愛 C++ 的人，主推 ina (x。&lt;/p&gt; &#xA;&lt;center&gt;&#xA; &lt;img src=&#34;https://i.imgur.com/SLfT4YJ.png&#34; height=&#34;400&#34;&gt;&#xA;&lt;/center&gt;</summary>
  </entry>
  <entry>
    <title>chdb-io/chdb</title>
    <updated>2023-12-15T01:29:28Z</updated>
    <id>tag:github.com,2023-12-15:/chdb-io/chdb</id>
    <link href="https://github.com/chdb-io/chdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;chDB is an embedded OLAP SQL Engine 🚀 powered by ClickHouse&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;docs/_static/snake-chdb-dark.png&#34; height=&#34;130&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/chdb-io/chdb/main/docs/_static/snake-chdb.png&#34; height=&#34;130&#34;&gt; &#xA; &lt;/picture&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/chdb-io/chdb/actions/workflows/build_wheels.yml&#34;&gt;&lt;img src=&#34;https://github.com/chdb-io/chdb/actions/workflows/build_wheels.yml/badge.svg?event=release&#34; alt=&#34;Build X86&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/chdb/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/chdb.svg?sanitize=true&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/chdb&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/chdb&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/D2Daa2fM5K&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1098133460310294528?logo=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/chdb_io&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&amp;amp;label=Twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;chDB&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chdb-io/chdb/main/README-zh.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;chDB is an embedded SQL OLAP Engine powered by ClickHouse [^1] For more details: &lt;a href=&#34;https://auxten.com/the-birth-of-chdb/&#34;&gt;The birth of chDB&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In-process SQL OLAP Engine, powered by ClickHouse&lt;/li&gt; &#xA; &lt;li&gt;No need to install ClickHouse&lt;/li&gt; &#xA; &lt;li&gt;Minimized data copy from C++ to Python with &lt;a href=&#34;https://docs.python.org/3/c-api/memoryview.html&#34;&gt;python memoryview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Input&amp;amp;Output support Parquet, CSV, JSON, Arrow, ORC and 60+&lt;a href=&#34;https://clickhouse.com/docs/en/interfaces/formats&#34;&gt;more&lt;/a&gt; formats, &lt;a href=&#34;https://raw.githubusercontent.com/chdb-io/chdb/main/tests/format_output.py&#34;&gt;samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support Python DB API 2.0, &lt;a href=&#34;https://raw.githubusercontent.com/chdb-io/chdb/main/examples/dbapi.py&#34;&gt;example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Arch&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/chdb-io/chdb/main/docs/_static/arch-chdb2.png&#34; width=&#34;450&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Get started with &lt;strong&gt;chdb&lt;/strong&gt; using our &lt;a href=&#34;https://doc.chdb.io&#34;&gt;Installation and Usage Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Currently, chDB supports Python 3.8+ on macOS and Linux (x86_64 and ARM64).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install chdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Run in command line&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;python3 -m chdb SQL [OutputFormat]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m chdb &#34;SELECT 1,&#39;abc&#39;&#34; Pretty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Data Input&lt;/h3&gt; &#xA;&lt;p&gt;The following methods are available to access on-disk and in-memory data formats:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h4&gt;🗂️ Query On File&lt;/h4&gt; (Parquet, CSV, JSON, Arrow, ORC and 60+)&lt;/summary&gt; &#xA; &lt;p&gt;You can execute SQL and return desired format data.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import chdb&#xA;res = chdb.query(&#39;select version()&#39;, &#39;Pretty&#39;); print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Work with Parquet or CSV&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# See more data type format in tests/format_output.py&#xA;res = chdb.query(&#39;select * from file(&#34;data.parquet&#34;, Parquet)&#39;, &#39;JSON&#39;); print(res)&#xA;res = chdb.query(&#39;select * from file(&#34;data.csv&#34;, CSV)&#39;, &#39;CSV&#39;);  print(res)&#xA;print(f&#34;SQL read {res.rows_read()} rows, {res.bytes_read()} bytes, elapsed {res.elapsed()} seconds&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Pandas dataframe output&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# See more in https://clickhouse.com/docs/en/interfaces/formats&#xA;chdb.query(&#39;select * from file(&#34;data.parquet&#34;, Parquet)&#39;, &#39;Dataframe&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h4&gt;🗂️ Query On Table&lt;/h4&gt; (Pandas DataFrame, Parquet file/bytes, Arrow bytes) &lt;/summary&gt; &#xA; &lt;h3&gt;Query On Pandas DataFrame&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import chdb.dataframe as cdf&#xA;import pandas as pd&#xA;# Join 2 DataFrames&#xA;df1 = pd.DataFrame({&#39;a&#39;: [1, 2, 3], &#39;b&#39;: [&#34;one&#34;, &#34;two&#34;, &#34;three&#34;]})&#xA;df2 = pd.DataFrame({&#39;c&#39;: [1, 2, 3], &#39;d&#39;: [&#34;①&#34;, &#34;②&#34;, &#34;③&#34;]})&#xA;ret_tbl = cdf.query(sql=&#34;select * from __tbl1__ t1 join __tbl2__ t2 on t1.a = t2.c&#34;,&#xA;                  tbl1=df1, tbl2=df2)&#xA;print(ret_tbl)&#xA;# Query on the DataFrame Table&#xA;print(ret_tbl.query(&#39;select b, sum(a) from __table__ group by b&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h4&gt;🗂️ Query with Stateful Session&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from chdb import session as chs&#xA;&#xA;## Create DB, Table, View in temp session, auto cleanup when session is deleted.&#xA;sess = chs.Session()&#xA;sess.query(&#34;CREATE DATABASE IF NOT EXISTS db_xxx ENGINE = Atomic&#34;)&#xA;sess.query(&#34;CREATE TABLE IF NOT EXISTS db_xxx.log_table_xxx (x String, y Int) ENGINE = Log;&#34;)&#xA;sess.query(&#34;INSERT INTO db_xxx.log_table_xxx VALUES (&#39;a&#39;, 1), (&#39;b&#39;, 3), (&#39;c&#39;, 2), (&#39;d&#39;, 5);&#34;)&#xA;sess.query(&#xA;    &#34;CREATE VIEW db_xxx.view_xxx AS SELECT * FROM db_xxx.log_table_xxx LIMIT 4;&#34;&#xA;)&#xA;print(&#34;Select from view:\n&#34;)&#xA;print(sess.query(&#34;SELECT * FROM db_xxx.view_xxx&#34;, &#34;Pretty&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;see also: &lt;a href=&#34;https://raw.githubusercontent.com/chdb-io/chdb/main/tests/test_stateful.py&#34;&gt;test_stateful.py&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h4&gt;🗂️ Query with Python DB-API 2.0&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import chdb.dbapi as dbapi&#xA;print(&#34;chdb driver version: {0}&#34;.format(dbapi.get_client_info()))&#xA;&#xA;conn1 = dbapi.connect()&#xA;cur1 = conn1.cursor()&#xA;cur1.execute(&#39;select version()&#39;)&#xA;print(&#34;description: &#34;, cur1.description)&#xA;print(&#34;data: &#34;, cur1.fetchone())&#xA;cur1.close()&#xA;conn1.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h4&gt;🗂️ Query with UDF (User Defined Functions)&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from chdb.udf import chdb_udf&#xA;from chdb import query&#xA;&#xA;@chdb_udf()&#xA;def sum_udf(lhs, rhs):&#xA;    return int(lhs) + int(rhs)&#xA;&#xA;print(query(&#34;select sum_udf(12,22)&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;see also: &lt;a href=&#34;https://raw.githubusercontent.com/chdb-io/chdb/main/tests/test_udf.py&#34;&gt;test_udf.py&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;For more examples, see &lt;a href=&#34;https://raw.githubusercontent.com/chdb-io/chdb/main/examples&#34;&gt;examples&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/chdb-io/chdb/main/tests&#34;&gt;tests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Demos and Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chdb.dev&#34;&gt;Project Documentation&lt;/a&gt; and &lt;a href=&#34;https://chdb-io.github.io/#/install?id=installation-1&#34;&gt;Usage Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1-zKB6oKfXeptggXi0kUX87iR8ZTSr4P3?usp=sharing&#34;&gt;Colab Notebooks&lt;/a&gt; and other &lt;a href=&#34;https://raw.githubusercontent.com/chdb-io/chdb/main/examples&#34;&gt;Script Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chdb.fly.dev/?user=default#Ly8gaHR0cHM6Ly9naXRodWIuY29tL21ldHJpY28vY2hkYi1zZXJ2ZXIKU0VMRUNUCiAgICB0b3duLAogICAgZGlzdHJpY3QsCiAgICBjb3VudCgpIEFTIGMsCiAgICByb3VuZChhdmcocHJpY2UpKSBBUyBwcmljZQpGUk9NIHVybCgnaHR0cHM6Ly9kYXRhc2V0cy1kb2N1bWVudGF0aW9uLnMzLmV1LXdlc3QtMy5hbWF6b25hd3MuY29tL2hvdXNlX3BhcnF1ZXQvaG91c2VfMC5wYXJxdWV0JykKR1JPVVAgQlkKICAgIHRvd24sCiAgICBkaXN0cmljdApMSU1JVCAxMA==&#34;&gt;Public Serverless Demo&lt;/a&gt; running on fly.io&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://benchmark.clickhouse.com/#eyJzeXN0ZW0iOnsiQXRoZW5hIChwYXJ0aXRpb25lZCkiOnRydWUsIkF0aGVuYSAoc2luZ2xlKSI6dHJ1ZSwiQXVyb3JhIGZvciBNeVNRTCI6dHJ1ZSwiQXVyb3JhIGZvciBQb3N0Z3JlU1FMIjp0cnVlLCJCeXRlSG91c2UiOnRydWUsImNoREIiOnRydWUsIkNpdHVzIjp0cnVlLCJjbGlja2hvdXNlLWxvY2FsIChwYXJ0aXRpb25lZCkiOnRydWUsImNsaWNraG91c2UtbG9jYWwgKHNpbmdsZSkiOnRydWUsIkNsaWNrSG91c2UiOnRydWUsIkNsaWNrSG91c2UgKHR1bmVkKSI6dHJ1ZSwiQ2xpY2tIb3VzZSAoenN0ZCkiOnRydWUsIkNsaWNrSG91c2UgQ2xvdWQiOnRydWUsIkNsaWNrSG91c2UgKHdlYikiOnRydWUsIkNyYXRlREIiOnRydWUsIkRhdGFiZW5kIjp0cnVlLCJEYXRhRnVzaW9uIChzaW5nbGUpIjp0cnVlLCJBcGFjaGUgRG9yaXMiOnRydWUsIkRydWlkIjp0cnVlLCJEdWNrREIgKFBhcnF1ZXQpIjp0cnVlLCJEdWNrREIiOnRydWUsIkVsYXN0aWNzZWFyY2giOnRydWUsIkVsYXN0aWNzZWFyY2ggKHR1bmVkKSI6ZmFsc2UsIkdyZWVucGx1bSI6dHJ1ZSwiSGVhdnlBSSI6dHJ1ZSwiSHlkcmEiOnRydWUsIkluZm9icmlnaHQiOnRydWUsIktpbmV0aWNhIjp0cnVlLCJNYXJpYURCIENvbHVtblN0b3JlIjp0cnVlLCJNYXJpYURCIjpmYWxzZSwiTW9uZXREQiI6dHJ1ZSwiTW9uZ29EQiI6dHJ1ZSwiTXlTUUwgKE15SVNBTSkiOnRydWUsIk15U1FMIjp0cnVlLCJQaW5vdCI6dHJ1ZSwiUG9zdGdyZVNRTCI6dHJ1ZSwiUG9zdGdyZVNRTCAodHVuZWQpIjpmYWxzZSwiUXVlc3REQiAocGFydGl0aW9uZWQpIjp0cnVlLCJRdWVzdERCIjp0cnVlLCJSZWRzaGlmdCI6dHJ1ZSwiU2VsZWN0REIiOnRydWUsIlNpbmdsZVN0b3JlIjp0cnVlLCJTbm93Zmxha2UiOnRydWUsIlNRTGl0ZSI6dHJ1ZSwiU3RhclJvY2tzIjp0cnVlLCJUaW1lc2NhbGVEQiAoY29tcHJlc3Npb24pIjp0cnVlLCJUaW1lc2NhbGVEQiI6dHJ1ZX0sInR5cGUiOnsic3RhdGVsZXNzIjpmYWxzZSwibWFuYWdlZCI6ZmFsc2UsIkphdmEiOmZhbHNlLCJjb2x1bW4tb3JpZW50ZWQiOmZhbHNlLCJDKysiOmZhbHNlLCJNeVNRTCBjb21wYXRpYmxlIjpmYWxzZSwicm93LW9yaWVudGVkIjpmYWxzZSwiQyI6ZmFsc2UsIlBvc3RncmVTUUwgY29tcGF0aWJsZSI6ZmFsc2UsIkNsaWNrSG91c2UgZGVyaXZhdGl2ZSI6ZmFsc2UsImVtYmVkZGVkIjp0cnVlLCJzZXJ2ZXJsZXNzIjpmYWxzZSwiUnVzdCI6ZmFsc2UsInNlYXJjaCI6ZmFsc2UsImRvY3VtZW50IjpmYWxzZSwidGltZS1zZXJpZXMiOmZhbHNlfSwibWFjaGluZSI6eyJzZXJ2ZXJsZXNzIjp0cnVlLCIxNmFjdSI6dHJ1ZSwiTCI6dHJ1ZSwiTSI6dHJ1ZSwiUyI6dHJ1ZSwiWFMiOnRydWUsImM2YS5tZXRhbCwgNTAwZ2IgZ3AyIjp0cnVlLCJjNmEuNHhsYXJnZSwgNTAwZ2IgZ3AyIjp0cnVlLCJjNS40eGxhcmdlLCA1MDBnYiBncDIiOnRydWUsIjE2IHRocmVhZHMiOnRydWUsIjIwIHRocmVhZHMiOnRydWUsIjI0IHRocmVhZHMiOnRydWUsIjI4IHRocmVhZHMiOnRydWUsIjMwIHRocmVhZHMiOnRydWUsIjQ4IHRocmVhZHMiOnRydWUsIjYwIHRocmVhZHMiOnRydWUsIm01ZC4yNHhsYXJnZSI6dHJ1ZSwiYzVuLjR4bGFyZ2UsIDIwMGdiIGdwMiI6dHJ1ZSwiYzZhLjR4bGFyZ2UsIDE1MDBnYiBncDIiOnRydWUsImRjMi44eGxhcmdlIjp0cnVlLCJyYTMuMTZ4bGFyZ2UiOnRydWUsInJhMy40eGxhcmdlIjp0cnVlLCJyYTMueGxwbHVzIjp0cnVlLCJTMjQiOnRydWUsIlMyIjp0cnVlLCIyWEwiOnRydWUsIjNYTCI6dHJ1ZSwiNFhMIjp0cnVlLCJYTCI6dHJ1ZX0sImNsdXN0ZXJfc2l6ZSI6eyIxIjp0cnVlLCIyIjp0cnVlLCI0Ijp0cnVlLCI4Ijp0cnVlLCIxNiI6dHJ1ZSwiMzIiOnRydWUsIjY0Ijp0cnVlLCIxMjgiOnRydWUsInNlcnZlcmxlc3MiOnRydWUsInVuZGVmaW5lZCI6dHJ1ZX0sIm1ldHJpYyI6ImhvdCIsInF1ZXJpZXMiOlt0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlXX0=&#34;&gt;ClickBench of embedded engines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For chdb specific examples and documentation refer to &lt;a href=&#34;https://chdb.dev&#34;&gt;chdb.dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For SQL syntax, please refer to &lt;a href=&#34;https://clickhouse.com/docs/en/sql-reference/syntax&#34;&gt;ClickHouse SQL Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;100px&#34;&gt;&lt;a href=&#34;https://github.com/auxten&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/240147?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;auxten&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;auxten&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/chdb-io/chdb/commits?author=auxten&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;100px&#34;&gt;&lt;a href=&#34;https://metrico.in&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1423657?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Lorenzo&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lorenzo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/chdb-io/chdb/commits?author=lmangani&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;100px&#34;&gt;&lt;a href=&#34;https://github.com/laodouya&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/4847103?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;laodouya&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;laodouya&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/chdb-io/chdb/commits?author=laodouya&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;100px&#34;&gt;&lt;a href=&#34;https://github.com/nmreadelf&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7260482?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;nmreadelf&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;nmreadelf&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/chdb-io/chdb/commits?author=nmreadelf&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;100px&#34;&gt;&lt;a href=&#34;https://github.com/reema93jain&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/113460610?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;reema93jain&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;reema93jain&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/chdb-io/chdb/commits?author=reema93jain&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Demo chDB at &lt;a href=&#34;https://t.co/todc13Kn19&#34;&gt;ClickHouse v23.7 livehouse!&lt;/a&gt; and &lt;a href=&#34;https://docs.google.com/presentation/d/1ikqjOlimRa7QAg588TAB_Fna-Tad2WMg7_4AgnbQbFA/edit?usp=sharing&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are &lt;strong&gt;greatly appreciated&lt;/strong&gt;. There are something you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Help test and report bugs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Help improve documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Help improve code quality and performance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache 2.0, see &lt;a href=&#34;https://raw.githubusercontent.com/chdb-io/chdb/main/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;chDB is mainly based on &lt;a href=&#34;https://github.com/ClickHouse/ClickHouse&#34;&gt;ClickHouse&lt;/a&gt; [^1] for trade mark and other reasons, I named it chDB.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/D2Daa2fM5K&#34;&gt;https://discord.gg/D2Daa2fM5K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:auxtenwpc@gmail.com&#34;&gt;auxtenwpc@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/chdb_io&#34;&gt;@chdb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;[^1]: ClickHouse® is a trademark of ClickHouse Inc. All trademarks, service marks, and logos mentioned or depicted are the property of their respective owners. The use of any third-party trademarks, brand names, product names, and company names does not imply endorsement, affiliation, or association with the respective owners.&lt;/p&gt;</summary>
  </entry>
</feed>