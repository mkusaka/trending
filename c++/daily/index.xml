<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-03T01:26:01Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thorvg/thorvg</title>
    <updated>2024-03-03T01:26:01Z</updated>
    <id>tag:github.com,2024-03-03:/thorvg/thorvg</id>
    <link href="https://github.com/thorvg/thorvg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Thor Vector Graphics is a lightweight portable library used for drawing vector-based scenes and animations including SVG and Lottie. It can be freely utilized across various software platforms and applications to visualize graphical contents.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://discord.gg/n25xj6J6HM&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Community-5865f2?style=flat&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chat.openai.com/g/g-Ht3dYIwLO-thorvgpt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ThorVGPT-76A99C?style=flat&amp;amp;logo=openai&amp;amp;logoColor=white&#34; alt=&#34;ThorVGPT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/licence-MIT-green.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Size-200kb-blue&#34; alt=&#34;BinarySize&#34;&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/hermet/thorvg&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/hermet/thorvg/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/thorvg/thorvg/actions/workflows/build_ubuntu.yml&#34;&gt;&lt;img src=&#34;https://github.com/thorvg/thorvg/actions/workflows/build_ubuntu.yml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;Build Ubuntu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thorvg/thorvg/actions/workflows/build_windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/thorvg/thorvg/actions/workflows/build_windows.yml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;Build Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thorvg/thorvg/actions/workflows/build_macos.yml&#34;&gt;&lt;img src=&#34;https://github.com/thorvg/thorvg/actions/workflows/build_macos.yml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;Build MacOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thorvg/thorvg/actions/workflows/build_ios.yml&#34;&gt;&lt;img src=&#34;https://github.com/thorvg/thorvg/actions/workflows/build_ios.yml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;Build iOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thorvg/thorvg/actions/workflows/build_android.yml&#34;&gt;&lt;img src=&#34;https://github.com/thorvg/thorvg/actions/workflows/build_android.yml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;Build Android&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ThorVG&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;800&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/logo/512/thorvg-banner.png&#34;&gt; &lt;/p&gt; ThorVG is an open-source graphics library designed for creating vector-based scenes and animations. Embracing the philosophy of &#34;Simpler is better,&#34; the ThorVG project offers intuitive and user-friendly interfaces, all the while maintaining a compact size and minimal software complexity. &#xA;&lt;br&gt; &#xA;&lt;br&gt; The following list shows primitives that are supported by ThorVG: &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shapes: Line, Arc, Curve, Path, Polygon&lt;/li&gt; &#xA; &lt;li&gt;Filling: Solid Color, Linear &amp;amp; Radial Gradients and Texture Mapping&lt;/li&gt; &#xA; &lt;li&gt;Stroking: Width, Join, Cap, Dash Patterns&lt;/li&gt; &#xA; &lt;li&gt;Scene Graph &amp;amp; Transformations&lt;/li&gt; &#xA; &lt;li&gt;Composition: Blending, Masking, Path Clipping&lt;/li&gt; &#xA; &lt;li&gt;Text: Unicode Characters and Horizontal Text Layout using the Scalable Fonts (TTF)&lt;/li&gt; &#xA; &lt;li&gt;Images: TVG, SVG, JPG, PNG, WebP, Raw Bitmap&lt;/li&gt; &#xA; &lt;li&gt;Animations: Lottie&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;700&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_primitives.png&#34;&gt; &lt;/p&gt; ​ThorVG is designed for a wide range of programs, offering adaptability for integration and use in various applications and systems. It achieves this through a single binary with selectively buildable, modular components in a building block style. This&amp;nbsp;ensures&amp;nbsp;both optimal size and easy maintanence. &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;700&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_structure.png&#34;&gt; &lt;/p&gt; If your program includes the main renderer, you can seamlessly utilize ThorVG APIs by transitioning drawing contexts between the main renderer and ThorVG. Throughout these API calls, ThorVG effectively serializes drawing commands among volatile paint nodes. Subsequently, it undertakes synchronous or asynchronous rendering via its backend raster engines.&#xA;&lt;br&gt; &#xA;&lt;br&gt; ThorVG is adept at handling vector images, including formats like SVG, and it remains adaptable for accommodating additional popular formats as needed. In the rendering process, the library may generate intermediate frame buffers for scene compositing, though only when essential. The accompanying diagram provides a concise overview of how to effectively incorporate ThorVG within your system.&#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;900&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_flow.png&#34;&gt; &lt;/p&gt; ThorVG incorporates a threading mechanism that aims to seamlessly acquire subsequent scenes without unnecessary delays. It operates using a finely-tuned task scheduler based on thread pools, encompassing various tasks such as encoding, decoding, updating, and rendering. This design ensures that all tasks can effectively leverage multi-processing capabilities.&#xA;&lt;br&gt; &#xA;&lt;br&gt; The task scheduler has been meticulously crafted to conceal complexity, streamline integration, and enhance user convenience. Therefore, the policy it employs is optional, allowing users to select it based on their specific requirements.&#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;900&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_thread.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#thorvg&#34;&gt;ThorVG&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#build-and-install&#34;&gt;Build and Install&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#build-with-visual-studio&#34;&gt;Build with Visual Studio&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#install-with-vcpkg&#34;&gt;Install with vcpkg&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#svg&#34;&gt;SVG&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#lottie&#34;&gt;Lottie&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#tvg-picture&#34;&gt;TVG Picture&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#practices&#34;&gt;Practices&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#dotlottie&#34;&gt;dotLottie&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#godot&#34;&gt;Godot&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#tizen&#34;&gt;Tizen&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#tools&#34;&gt;Tools&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#thorvg-viewer&#34;&gt;ThorVG Viewer&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#lottie-to-gif&#34;&gt;Lottie to GIF&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#svg-to-png&#34;&gt;SVG to PNG&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#svg-to-tvg&#34;&gt;SVG to TVG&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#api-bindings&#34;&gt;API Bindings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#issues-or-feature-requests&#34;&gt;Issues or Feature Requests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#contents&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;It explains how to set up the environment for building ThorVG.&lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build and Install&lt;/h3&gt; &#xA;&lt;p&gt;ThorVG supports &lt;a href=&#34;https://mesonbuild.com/&#34;&gt;meson&lt;/a&gt; build system. Install &lt;a href=&#34;http://mesonbuild.com/Getting-meson.html&#34;&gt;meson&lt;/a&gt; and &lt;a href=&#34;https://ninja-build.org/&#34;&gt;ninja&lt;/a&gt; if you don&#39;t have them already.&lt;/p&gt; &#xA;&lt;p&gt;Run meson to configure ThorVG in the thorvg root folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson setup builddir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run ninja to build &amp;amp; install ThorVG:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ninja -C builddir install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Regardless of the installation, all build results (symbols, executable) are generated in the builddir folder in thorvg. Some results such as examples won&#39;t be installed, you can check More examples section to see how to change it. &lt;br&gt; ​&lt;br&gt; Note that some systems might include ThorVG package as a default component. In that case, you can skip this manual installation.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build with Visual Studio&lt;/h3&gt; &#xA;&lt;p&gt;If you want to create Visual Studio project files, use the command --backend=vs. The resulting solution file (thorvg.sln) will be located in the build folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson setup builddir --backend=vs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install with vcpkg&lt;/h3&gt; &#xA;&lt;p&gt;You can download and install pre-packaged ThorVG using the &lt;a href=&#34;https://vcpkg.io/en/index.html&#34;&gt;vcpkg&lt;/a&gt; package manager.&lt;/p&gt; &#xA;&lt;p&gt;Clone the vcpkg repo. Make sure you are in the directory you want the tool installed to before doing this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the bootstrap script to build the vcpkg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bootstrap-vcpkg.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the ThorVG package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./vcpkg install thorvg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#contents&#34;&gt;Back to contents&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;ThorVG renders vector shapes to a given canvas buffer. The following is a quick start to show you how to use the essential APIs.&lt;/p&gt; &#xA;&lt;p&gt;First, you should initialize the ThorVG engine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;tvg::Initializer::init(0);   //thread count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then it would be best if you prepared an empty canvas for drawing on it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;static uint32_t buffer[WIDTH * HEIGHT];                                 //canvas target buffer&#xA;&#xA;auto canvas = tvg::SwCanvas::gen();                                     //generate a canvas&#xA;canvas-&amp;gt;target(buffer, WIDTH, WIDTH, HEIGHT, tvg::SwCanvas::ARGB8888);  //buffer, stride, w, h, Colorspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next you can draw multiple shapes on the canvas:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto rect = tvg::Shape::gen();               //generate a shape&#xA;rect-&amp;gt;appendRect(50, 50, 200, 200, 20, 20);  //define it as a rounded rectangle (x, y, w, h, rx, ry)&#xA;rect-&amp;gt;fill(100, 100, 100);                   //set its color (r, g, b)&#xA;canvas-&amp;gt;push(move(rect));                    //push the rectangle into the canvas&#xA;&#xA;auto circle = tvg::Shape::gen();             //generate a shape&#xA;circle-&amp;gt;appendCircle(400, 400, 100, 100);    //define it as a circle (cx, cy, rx, ry)&#xA;&#xA;auto fill = tvg::RadialGradient::gen();      //generate a radial gradient&#xA;fill-&amp;gt;radial(400, 400, 150);                 //set the radial gradient geometry info (cx, cy, radius)&#xA;&#xA;tvg::Fill::ColorStop colorStops[2];          //gradient colors&#xA;colorStops[0] = {0.0, 255, 255, 255, 255};   //1st color values (offset, r, g, b, a)&#xA;colorStops[1] = {1.0, 0, 0, 0, 255};         //2nd color values (offset, r, g, b, a)&#xA;fill-&amp;gt;colorStops(colorStops, 2);             //set the gradient colors info&#xA;&#xA;circle-&amp;gt;fill(move(fill));                    //set the circle fill&#xA;canvas-&amp;gt;push(move(circle));                  //push the circle into the canvas&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code generates the following result:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;416&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_shapes.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;You can also draw you own shapes and use dashed stroking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto path = tvg::Shape::gen();               //generate a path&#xA;path-&amp;gt;moveTo(199, 34);                       //set sequential path coordinates&#xA;path-&amp;gt;lineTo(253, 143);&#xA;path-&amp;gt;lineTo(374, 160);&#xA;path-&amp;gt;lineTo(287, 244);&#xA;path-&amp;gt;lineTo(307, 365);&#xA;path-&amp;gt;lineTo(199, 309);&#xA;path-&amp;gt;lineTo(97, 365);&#xA;path-&amp;gt;lineTo(112, 245);&#xA;path-&amp;gt;lineTo(26, 161);&#xA;path-&amp;gt;lineTo(146, 143);&#xA;path-&amp;gt;close();&#xA;&#xA;path-&amp;gt;fill(150, 150, 255);                   //path color&#xA;&#xA;path-&amp;gt;strokeWidth(3);                        //stroke width&#xA;path-&amp;gt;strokeFill(0, 0, 255);                 //stroke color&#xA;path-&amp;gt;strokeJoin(tvg::StrokeJoin::Round);    //stroke join style&#xA;path-&amp;gt;strokeCap(tvg::StrokeCap::Round);      //stroke cap style&#xA;&#xA;float pattern[2] = {10, 10};                 //stroke dash pattern (line, gap)&#xA;path-&amp;gt;strokeDash(pattern, 2);                //set the stroke pattern&#xA;&#xA;canvas-&amp;gt;push(move(path));                    //push the path into the canvas&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code generates the following result:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_path.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Now begin rendering &amp;amp; finish it at a particular time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;canvas-&amp;gt;draw();&#xA;canvas-&amp;gt;sync();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can acquire the rendered image from the buffer memory.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, terminate the engine after its usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;tvg::Initializer::term();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#contents&#34;&gt;Back to contents&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;SVG&lt;/h2&gt; &#xA;&lt;p&gt;ThorVG facilitates &lt;a href=&#34;https://www.w3.org/TR/SVGTiny12/&#34;&gt;SVG Tiny Specification&lt;/a&gt; rendering via its dedicated SVG interpreter. Adhering to the SVG Tiny Specification, the implementation maintains a lightweight profile, rendering it particularly advantageous for embedded systems. While ThorVG comprehensively adheres to most of the SVG Tiny specs, certain features remain unsupported within the current framework. These include:&lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Animation&lt;/li&gt; &#xA; &lt;li&gt;Fonts &amp;amp; Text&lt;/li&gt; &#xA; &lt;li&gt;Interactivity&lt;/li&gt; &#xA; &lt;li&gt;Multimedia&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following code snippet shows how to draw SVG image using ThorVG:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto picture = tvg::Picture::gen();         //generate a picture&#xA;picture-&amp;gt;load(&#34;tiger.svg&#34;);                 //load a SVG file&#xA;canvas-&amp;gt;push(move(picture));                //push the picture into the canvas&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result is:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_tiger.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#contents&#34;&gt;Back to contents&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Lottie&lt;/h2&gt; &#xA;&lt;p&gt;ThorVG aims to fully support Lottie Animation features. Lottie is a JSON-based vector animation file format that enables seamless distribution of animations on any platform, akin to shipping static assets. These files are compact and compatible with various devices, scaling up or down without pixelation. With Lottie, you can easily create, edit, test, collaborate, and distribute animations in a user-friendly manner. For more information, please visit &lt;a href=&#34;https://www.lottiefiles.com&#34;&gt;LottieFiles&lt;/a&gt;&#39; website. &lt;br&gt; &lt;br&gt; Currently, ThorVG provides experimental support for Lottie Animation, and while most features are supported, a few advanced properties of Lottie may not be available yet: &lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shape Modifiers&lt;/li&gt; &#xA; &lt;li&gt;Layer Effects&lt;/li&gt; &#xA; &lt;li&gt;Expressions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following code snippet demonstrates how to use ThorVG to play a Lottie animation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto animation = tvg::Animation::gen();     //generate an animation&#xA;auto picture = animation-&amp;gt;picture()         //acquire a picture which associated with the animation.&#xA;picture-&amp;gt;load(&#34;lottie.json&#34;);               //load a Lottie file&#xA;auto duration = animation-&amp;gt;duration();      //figure out the animation duration time in seconds.&#xA;canvas-&amp;gt;push(tvg::cast(picture));           //push the picture into the canvas&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First, an animation and a picture are generated. The Lottie file (lottie.json) is loaded into the picture, and then the picture is added to the canvas. The animation frames are controlled using the animation object to play the Lottie animation. Also you might want to know the animation duration time to run your animation loop.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;animation-&amp;gt;frame(animation-&amp;gt;totalFrame() * progress);  //Set a current animation frame to display&#xA;canvas-&amp;gt;update(animation-&amp;gt;picture());                  //Update the picture to be redrawn.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s suppose the progress variable determines the position of the animation, ranging from 0 to 1 based on the total duration time of the animation. Adjusting the progress value allows you to control the animation at the desired position. Afterwards, the canvas is updated to redraw the picture with the updated animation frame.&lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_lottie.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#contents&#34;&gt;Back to contents&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TVG Picture&lt;/h2&gt; &#xA;&lt;p&gt;ThorVG introduces the dedicated vector data format, known as TVG Picture, designed to efficiently store Paint node properties within a scene in binary form. This format is meticulously optimized in advance, ensuring compact file sizes and swift data loading processes. &lt;br&gt; &lt;br&gt; To leverage the TVG Picture format, ThorVG employs a specialized module called TVG Saver. This module is responsible for optimizing the data associated with all scene-tree nodes and storing them in binary form. During the optimization phase, TVG Saver intelligently eliminates unused information, eliminates duplicated properties, consolidates overlapping shapes, and employs data compression where feasible. Remarkably, these optimizations maintain compatibility with future versions of ThorVG libraries, with data compression utilizing the &lt;a href=&#34;https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch&#34;&gt;Lempel-Ziv-Welchi&lt;/a&gt; algorithm when applicable.&lt;br&gt; &lt;br&gt; As a result of these efforts, the final data size is notably smaller than other text-based vector data formats, such as SVG. This reduction in data size not only minimizes I/O operations but also mitigates memory bandwidth requirements during data loading. This aspect proves particularly beneficial for programs reliant on substantial vector resources. &lt;br&gt; &lt;br&gt; Furthermore, TVG Picture substantially streamlines resource loading tasks by circumventing the need for data interpretation, resulting in reduced runtime memory demands and rendering tasks that subsequently enhance performance. &lt;br&gt; &lt;br&gt; By adopting TVG Picture, you can achieve an average reduction of over 30% in data size and loading times (for more details, refer to &#34;&lt;a href=&#34;https://github.com/thorvg/thorvg/wiki/TVG-Picture-Binary-Size&#34;&gt;See More&lt;/a&gt;&#34;). Notably, the extent of performance improvement is contingent on resource size and complexity. &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;909&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_tvgsize.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;As TVG Saver facilitates the export of the scene-tree into TVG Picture data files (TVG), the subsequent task of importing and restoring this data to programmable instances is efficiently handled by the TVG Loader. For seamless conversion from SVG to TVG, the ThorVG Viewer provides a swift solution.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;710&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_tvgmodule.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#contents&#34;&gt;Back to contents&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Practices&lt;/h2&gt; &#xA;&lt;h3&gt;dotLottie&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dotlottie.io/&#34;&gt;dotLottie&lt;/a&gt; is an open-source file format that aggregates one or more Lottie files and their associated resources, such as images and fonts, into a single file. This enables an efficient and easy distribution of animations. dotLottie files are ZIP archives compressed with the Deflate compression method and carry the file extension of “.lottie”. Think of it as a superset of Lottie. &lt;a href=&#34;https://lottiefiles.com/&#34;&gt;LottieFiles&lt;/a&gt; aims to achieve just that. &lt;a href=&#34;https://github.com/LottieFiles/dotlottie-web&#34;&gt;dotLottie player&lt;/a&gt; by LottieFiles is now powered by ThorVG.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;798&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_dotlottie.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Godot&lt;/h3&gt; &#xA;&lt;p&gt;ThorVG has been integrated into the &lt;a href=&#34;https://www.godotengine.org&#34;&gt;Godot&lt;/a&gt; project to enable the creation of sleek and visually appealing user interfaces (UIs) and vector resources in the Godot game engine. Godot is a modern game engine that is both free and open-source, offering a comprehensive range of tools. With Godot, you can concentrate on developing your game without the need to recreate existing functionalities.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;798&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_godot.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;LVGL&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lvgl.io/&#34;&gt;LVGL&lt;/a&gt; is the most popular free and open-source embedded graphics library to create beautiful UIs for any MCU, MPU and display type. The complete graphic framework includes a variety of widgets for you to use in the creation of your GUI, and supports more advanced functions such as animations and anti-aliasing. ThorVG serves as the vector drawing primitives library in the LVGL framework.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;700&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_lvgl.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Tizen&lt;/h3&gt; &#xA;&lt;p&gt;ThorVG has been integrated into the &lt;a href=&#34;https://www.tizen.org&#34;&gt;Tizen&lt;/a&gt; platform as the vector graphics engine. &lt;a href=&#34;https://docs.tizen.org/application/dotnet/guides/user-interface/nui/overview/&#34;&gt;NUI&lt;/a&gt; is the name of Tizen UI framework which is written in C#. ThorVG is the backend engine of the &lt;a href=&#34;https://docs.tizen.org/application/dotnet/guides/user-interface/nui/vectorgraphics/Overview/&#34;&gt;NUI Vector Graphics&lt;/a&gt; which is used for vector primitive drawings and scalable image contents such as SVG and Lottie Animation among the Tizen applications.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;798&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/raw/main/res/example_tizen.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#contents&#34;&gt;Back to contents&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;here are plenty of sample code in &lt;code&gt;thorvg/src/examples&lt;/code&gt; to help you in understanding the ThorVG APIs.&lt;/p&gt; &#xA;&lt;p&gt;To execute these examples, you can build them with the following meson build option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson setup builddir -Dexamples=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that these examples require the EFL dev package for launching. If you&#39;re using Linux-based OS, you can easily install this package from your OS distribution server. For Ubuntu, you can install it with this command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt-get install libefl-all-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can download the package &lt;a href=&#34;https://download.enlightenment.org/rel/win/efl/&#34;&gt;here&lt;/a&gt; for Windows. For more information, please visit the official &lt;a href=&#34;https://enlightenment.org/&#34;&gt;EFL page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#contents&#34;&gt;Back to contents&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The ThorVG API documentation can be accessed at &lt;a href=&#34;https://www.thorvg.org/apis&#34;&gt;thorvg.org/apis&lt;/a&gt;, and is also available in the &lt;a href=&#34;https://github.com/thorvg/thorvg/raw/main/inc/thorvg.h&#34;&gt;C++ API&lt;/a&gt;, &lt;a href=&#34;https://github.com/thorvg/thorvg/raw/main/src/bindings/capi/thorvg_capi.h&#34;&gt;C API&lt;/a&gt; within this repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#contents&#34;&gt;Back to contents&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;h3&gt;ThorVG Viewer&lt;/h3&gt; &#xA;&lt;p&gt;ThorVG provides the resource verification tool for the ThorVG Engine. &lt;a href=&#34;https://thorvg.github.io/thorvg.viewer/&#34;&gt;ThorVG viewer&lt;/a&gt; does immediate rendering via web browser running on the ThorVG web-assembly binary, allowing real-time editing of the vector elements on it. It doesn&#39;t upload your resources to any external server while allowing to export to supported formats such as TVG, so the designer resource copyright is protected.&lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;700&#34; height=&#34;auto&#34; src=&#34;https://github.com/thorvg/thorvg/assets/3711518/edadcc5e-3bbf-489d-a9a1-9570079c7d55&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Lottie to GIF&lt;/h3&gt; &#xA;&lt;p&gt;ThorVG provides an executable &lt;code&gt;lottie2gif&lt;/code&gt; converter that generates a GIF file from a Lottie file.&lt;/p&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;lottie2gif&lt;/code&gt;, you must turn on this feature in the build option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson setup builddir -Dtools=lottie2gif -Dsavers=gif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the &#39;lottie2gif&#39; converter, you need to provide the &#39;Lottie files&#39; parameter. This parameter can be a file name with the &#39;.json&#39; extension or a directory name. It also accepts multiple files or directories separated by spaces. If a directory is specified, the converter will search for files with the &#39;.json&#39; extension within that directory and all its subdirectories.&lt;br&gt; &lt;br&gt; Optionally, you can specify the image resolution in the &#39;WxH&#39; format, with two numbers separated by an &#39;x&#39; sign, following the &#39;-r&#39; flag.&lt;br&gt; &lt;br&gt; Both flags, if provided, are applied to all of the &lt;code&gt;.json&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;The usage examples of the &lt;code&gt;lottie2gif&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;    lottie2gif [Lottie file] or [Lottie folder] [-r resolution] [-f fps] [-b background color]&#xA;&#xA;Flags:&#xA;    -r set the output image resolution.&#xA;    -f specifies the frames per second (fps) for the generated animation.&#xA;    -b specifies the base background color (RGB in hex). If not specified, the background color will follow the original content.&#xA;&#xA;Examples:&#xA;    $ lottie2gif input.json&#xA;    $ lottie2gif input.json -f 30&#xA;    $ lottie2gif input.json -r 600x600 -f 30&#xA;    $ lottie2gif lottiefolder&#xA;    $ lottie2gif lottiefolder -r 600x600&#xA;    $ lottie2gif lottiefolder -r 600x600 -f 30 -b fa7410&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SVG to PNG&lt;/h3&gt; &#xA;&lt;p&gt;ThorVG provides an executable &lt;code&gt;svg2png&lt;/code&gt; converter that generates a PNG file from an SVG file.&lt;/p&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;svg2png&lt;/code&gt;, you must turn on this feature in the build option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson setup builddir -Dtools=svg2png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the &#39;svg2png&#39; converter, you need to provide the &#39;SVG files&#39; parameter. This parameter can be a file name with the &#39;.svg&#39; extension or a directory name. It also accepts multiple files or directories separated by spaces. If a directory is specified, the converter will search for files with the &#39;.svg&#39; extension within that directory and all its subdirectories.&lt;br&gt; &lt;br&gt; Optionally, you can specify the image resolution in the &#39;WxH&#39; format, with two numbers separated by an &#39;x&#39; sign, following the &#39;-r&#39; flag.&lt;br&gt; &lt;br&gt; The background color can be set with the &lt;code&gt;-b&lt;/code&gt; flag. The &lt;code&gt;bgColor&lt;/code&gt; parameter should be passed as a three-bytes hexadecimal value in the &lt;code&gt;ffffff&lt;/code&gt; format. The default background is transparent.&lt;br&gt; &lt;br&gt; Both flags, if provided, are applied to all of the &lt;code&gt;.svg&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;The usage examples of the &lt;code&gt;svg2png&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;    svg2png [SVG files] [-r resolution] [-b bgColor]&#xA;&#xA;Flags:&#xA;    -r set the output image resolution.&#xA;    -b set the output image background color.&#xA;&#xA;Examples:&#xA;    $ svg2png input.svg&#xA;    $ svg2png input.svg -r 200x200&#xA;    $ svg2png input.svg -r 200x200 -b ff00ff&#xA;    $ svg2png input1.svg input2.svg -r 200x200 -b ff00ff&#xA;    $ svg2png . -r 200x200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SVG to TVG&lt;/h3&gt; &#xA;&lt;p&gt;ThorVG provides an executable &lt;code&gt;svg2tvg&lt;/code&gt; converter that generates a TVG file from an SVG file.&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;code&gt;svg2tvg&lt;/code&gt;, you need to activate this feature in the build option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson setup builddir -Dtools=svg2tvg -Dsavers=tvg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examples of the usage of the &lt;code&gt;svg2tvg&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;   svg2tvg [SVG file] or [SVG folder]&#xA;&#xA;Examples:&#xA;    $ svg2tvg input.svg&#xA;    $ svg2tvg svgfolder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#contents&#34;&gt;Back to contents&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API Bindings&lt;/h2&gt; &#xA;&lt;p&gt;Our main development APIs are written in C++, but ThorVG also provides API bindings for C.&lt;/p&gt; &#xA;&lt;p&gt;To enable CAPI binding, you need to activate this feature in the build options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson setup builddir -Dbindings=&#34;capi&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#contents&#34;&gt;Back to contents&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;ThorVG offers versatile support for image loading, accommodating both static and external loaders. This flexibility ensures that, even in environments without external libraries, users can still leverage static loaders as a reliable alternative. At its foundation, the ThorVG core library is engineered to function autonomously, free from external dependencies. However, it is important to note that ThorVG also encompasses a range of optional feature extensions, each with its specific set of dependencies. The dependencies associated with these selective features are outlined as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GL renderer: &lt;a href=&#34;https://www.khronos.org/egl&#34;&gt;EGL&lt;/a&gt;, &lt;a href=&#34;https://www.khronos.org/opengles/&#34;&gt;GLESv2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;External PNG support: &lt;a href=&#34;https://github.com/glennrp/libpng&#34;&gt;libpng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;External JPG support: &lt;a href=&#34;https://github.com/libjpeg-turbo/libjpeg-turbo&#34;&gt;turbojpeg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;External WebP support: &lt;a href=&#34;https://developers.google.com/speed/webp/download&#34;&gt;libwebp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Examples: &lt;a href=&#34;https://www.enlightenment.org/about-efl.md&#34;&gt;EFL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thorvg/thorvg/main/#contents&#34;&gt;Back to contents&lt;/a&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Issues or Feature Requests&lt;/h2&gt; &#xA;&lt;p&gt;For support, please reach us in &lt;a href=&#34;https://discord.gg/n25xj6J6HM&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>owasp-modsecurity/ModSecurity</title>
    <updated>2024-03-03T01:26:01Z</updated>
    <id>tag:github.com,2024-03-03:/owasp-modsecurity/ModSecurity</id>
    <link href="https://github.com/owasp-modsecurity/ModSecurity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ModSecurity is an open source, cross platform web application firewall (WAF) engine for Apache, IIS and Nginx that is developed by Trustwave&#39;s SpiderLabs. It has a robust event-based programming language which provides protection from a range of attacks against web applications and allows for HTTP traffic monitoring, logging and real-time analys…&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/owasp-modsecurity/ModSecurity/raw/v3/master/others/modsec.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/owasp-modsecurity/ModSecurity/workflows/Quality%20Assurance/badge.svg?sanitize=true&#34; alt=&#34;Quality Assurance&#34;&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=owasp-modsecurity_ModSecurity&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=owasp-modsecurity_ModSecurity&amp;amp;metric=alert_status&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=owasp-modsecurity_ModSecurity&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=owasp-modsecurity_ModSecurity&amp;amp;metric=sqale_rating&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=owasp-modsecurity_ModSecurity&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=owasp-modsecurity_ModSecurity&amp;amp;metric=reliability_rating&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=owasp-modsecurity_ModSecurity&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=owasp-modsecurity_ModSecurity&amp;amp;metric=security_rating&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=owasp-modsecurity_ModSecurity&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=owasp-modsecurity_ModSecurity&amp;amp;metric=vulnerabilities&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Libmodsecurity is one component of the ModSecurity v3 project. The library codebase serves as an interface to ModSecurity Connectors taking in web traffic and applying traditional ModSecurity processing. In general, it provides the capability to load/interpret rules written in the ModSecurity SecRules format and apply them to HTTP content provided by your application via Connectors.&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for ModSecurity for Apache (aka ModSecurity v2.x), it is still under maintenance and available: &lt;a href=&#34;https://github.com/owasp-modsecurity/ModSecurity/tree/v2/master&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What is the difference between this project and the old ModSecurity (v2.x.x)?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All Apache dependencies have been removed&lt;/li&gt; &#xA; &lt;li&gt;Higher performance&lt;/li&gt; &#xA; &lt;li&gt;New features&lt;/li&gt; &#xA; &lt;li&gt;New architecture&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Libmodsecurity is a complete rewrite of the ModSecurity platform. When it was first devised the ModSecurity project started as just an Apache module. Over time the project has been extended, due to popular demand, to support other platforms including (but not limited to) Nginx and IIS. In order to provide for the growing demand for additional platform support, it has became necessary to remove the Apache dependencies underlying this project, making it more platform independent.&lt;/p&gt; &#xA;&lt;p&gt;As a result of this goal we have rearchitected Libmodsecurity such that it is no longer dependent on the Apache web server (both at compilation and during runtime). One side effect of this is that across all platforms users can expect increased performance. Additionally, we have taken this opportunity to lay the groundwork for some new features that users have been long seeking. For example we are looking to natively support auditlogs in the JSON format, along with a host of other functionality in future versions.&lt;/p&gt; &#xA;&lt;h3&gt;It is no longer just a module.&lt;/h3&gt; &#xA;&lt;p&gt;The &#39;ModSecurity&#39; branch no longer contains the traditional module logic (for Nginx, Apache, and IIS) that has traditionally been packaged all together. Instead, this branch only contains the library portion (libmodsecurity) for this project. This library is consumed by what we have termed &#39;Connectors&#39; these connectors will interface with your webserver and provide the library with a common format that it understands. Each of these connectors is maintained as a separate GitHub project. For instance, the Nginx connector is supplied by the ModSecurity-nginx project (&lt;a href=&#34;https://github.com/owasp-modsecurity/ModSecurity-nginx&#34;&gt;https://github.com/owasp-modsecurity/ModSecurity-nginx&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Keeping these connectors separated allows each project to have different release cycles, issues and development trees. Additionally, it means that when you install ModSecurity v3 you only get exactly what you need, no extras you won&#39;t be using.&lt;/p&gt; &#xA;&lt;h1&gt;Compilation&lt;/h1&gt; &#xA;&lt;p&gt;Before starting the compilation process, make sure that you have all the dependencies in place. Read the subsection “Dependencies” for further information.&lt;/p&gt; &#xA;&lt;p&gt;After the compilation make sure that there are no issues on your build/platform. We strongly recommend the utilization of the unit tests and regression tests. These test utilities are located under the subfolder ‘tests’.&lt;/p&gt; &#xA;&lt;p&gt;As a dynamic library, don’t forget that libmodsecurity must be installed to a location (folder) where you OS will be looking for dynamic libraries.&lt;/p&gt; &#xA;&lt;h3&gt;Unix (Linux, MacOS, FreeBSD, …)&lt;/h3&gt; &#xA;&lt;p&gt;On unix the project uses autotools to help the compilation process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./build.sh&#xA;$ ./configure&#xA;$ make&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Details on distribution specific builds can be found in our Wiki: &lt;a href=&#34;https://github.com/owasp-modsecurity/ModSecurity/wiki/Compilation-recipes&#34;&gt;Compilation Recipes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Windows build is not ready yet.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;This library is written in C++ using the C++17 standards. It also uses Flex and Yacc to produce the “Sec Rules Language” parser. Other, mandatory dependencies include YAJL, as ModSecurity uses JSON for producing logs and its testing framework, libpcre (not yet mandatory) for processing regular expressions in SecRules, and libXML2 (not yet mandatory) which is used for parsing XML requests.&lt;/p&gt; &#xA;&lt;p&gt;All others dependencies are related to operators specified within SecRules or configuration directives and may not be required for compilation. A short list of such dependencies is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libinjection is needed for the operator @detectXSS and @detectSQL&lt;/li&gt; &#xA; &lt;li&gt;curl is needed for the directive SecRemoteRules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If those libraries are missing ModSecurity will be compiled without the support for the operator @detectXSS and the configuration directive SecRemoteRules.&lt;/p&gt; &#xA;&lt;h1&gt;Library documentation&lt;/h1&gt; &#xA;&lt;p&gt;The library documentation is written within the code in Doxygen format. To generate this documentation, please use the doxygen utility with the provided configuration file, “doxygen.cfg”, located with the &#34;doc/&#34; subfolder. This will generate HTML formatted documentation including usage examples.&lt;/p&gt; &#xA;&lt;h1&gt;Library utilization&lt;/h1&gt; &#xA;&lt;p&gt;The library provides a C++ and C interface. Some resources are currently only available via the C++ interface, for instance, the capability to create custom logging mechanism (see the regression test to check for how those logging mechanism works). The objective is to have both APIs (C, C++) providing the same functionality, if you find an aspect of the API that is missing via a particular interface, please open an issue.&lt;/p&gt; &#xA;&lt;p&gt;Inside the subfolder examples, there are simple examples on how to use the API. Below some are illustrated:&lt;/p&gt; &#xA;&lt;h3&gt;Simple example using C++&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;using ModSecurity::ModSecurity;&#xA;using ModSecurity::Rules;&#xA;using ModSecurity::Transaction;&#xA;&#xA;ModSecurity *modsec;&#xA;ModSecurity::Rules *rules;&#xA;&#xA;modsec = new ModSecurity();&#xA;&#xA;rules = new Rules();&#xA;&#xA;rules-&amp;gt;loadFromUri(rules_file);&#xA;&#xA;Transaction *modsecTransaction = new Transaction(modsec, rules);&#xA;&#xA;modsecTransaction-&amp;gt;processConnection(&#34;127.0.0.1&#34;);&#xA;if (modsecTransaction-&amp;gt;intervention()) {&#xA;   std::cout &amp;lt;&amp;lt; &#34;There is an intervention&#34; &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Simple example using C&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;modsecurity/modsecurity.h&#34;&#xA;#include &#34;modsecurity/transaction.h&#34;&#xA;&#xA;&#xA;char main_rule_uri[] = &#34;basic_rules.conf&#34;;&#xA;&#xA;int main (int argc, char **argv)&#xA;{&#xA;    ModSecurity *modsec = NULL;&#xA;    Transaction *transaction = NULL;&#xA;    Rules *rules = NULL;&#xA;&#xA;    modsec = msc_init();&#xA;&#xA;    rules = msc_create_rules_set();&#xA;    msc_rules_add_file(rules, main_rule_uri);&#xA;&#xA;    transaction = msc_new_transaction(modsec, rules);&#xA;&#xA;    msc_process_connection(transaction, &#34;127.0.0.1&#34;);&#xA;    msc_process_uri(transaction, &#34;http://www.modsecurity.org/test?key1=value1&amp;amp;key2=value2&amp;amp;key3=value3&amp;amp;test=args&amp;amp;test=test&#34;);&#xA;    msc_process_request_headers(transaction);&#xA;    msc_process_request_body(transaction);&#xA;    msc_process_response_headers(transaction);&#xA;    msc_process_response_body(transaction);&#xA;&#xA;    return 0;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;You are more than welcome to contribute to this project and look forward to growing the community around this new version of ModSecurity. Areas of interest include: New functionalities, fixes, bug report, support for beginning users, or anything that you are willing to help with.&lt;/p&gt; &#xA;&lt;h2&gt;Providing patches&lt;/h2&gt; &#xA;&lt;p&gt;We prefer to have your patch within the GitHub infrastructure to facilitate our review work, and our Q.A. integration. GitHub provides excellent documentation on how to perform “Pull Requests”, more information available here: &lt;a href=&#34;https://help.github.com/articles/using-pull-requests/&#34;&gt;https://help.github.com/articles/using-pull-requests/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please respect the coding style. Pull requests can include various commits, so provide one fix or one piece of functionality per commit. Please do not change anything outside the scope of your target work (e.g. coding style in a function that you have passed by). For further information about the coding style used in this project, please check: &lt;a href=&#34;https://www.chromium.org/blink/coding-style&#34;&gt;https://www.chromium.org/blink/coding-style&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Provides explanative commit messages. Your first line should give the highlights of your patch, 3rd and on give a more detailed explanation/technical details about your patch. Patch explanation is valuable during the review process.&lt;/p&gt; &#xA;&lt;h3&gt;Don’t know where to start?&lt;/h3&gt; &#xA;&lt;p&gt;Within our code there are various items marked as TODO or FIXME that may need your attention. Check the list of items by performing a grep:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd /path/to/modsecurity-nginx&#xA;$ egrep -Rin &#34;TODO|FIXME&#34; -R *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A TODO list is also available as part of the Doxygen documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Testing your patch&lt;/h3&gt; &#xA;&lt;p&gt;Along with the manual testing, we strongly recommend you to use the our regression tests and unit tests. If you have implemented an operator, don’t forget to create unit tests for it. If you implement anything else, it is encouraged that you develop complimentary regression tests for it.&lt;/p&gt; &#xA;&lt;p&gt;The regression test and unit test utilities are native and do not demand any external tool or script, although you need to fetch the test cases from other repositories, as they are shared with other versions of ModSecurity, those others repositories git submodules. To fetch the submodules repository and run the utilities, follow the commands listed below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd /path/to/your/ModSecurity&#xA;$ git submodule foreach git pull&#xA;$ cd test&#xA;$ ./regression-tests&#xA;$ ./unit-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Before start the debugging process, make sure of where your bug is. The problem could be on your connector or in libmodsecurity. In order to identify where the bug is, it is recommended that you develop a regression test that mimics the scenario where the bug is happening. If the bug is reproducible with the regression-test utility, then it will be far simpler to debug and ensure that it never occurs again. On Linux it is recommended that anyone undertaking debugging utilize gdb and/or valgrind as needed.&lt;/p&gt; &#xA;&lt;p&gt;During the configuration/compilation time, you may want to disable the compiler optimization making your “back traces” populated with readable data. Use the CFLAGS to disable the compilation optimization parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export CFLAGS=&#34;-g -O0&#34;&#xA;$ ./build.sh&#xA;$ ./configure&#xA;$ make&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are facing a configuration issue or something is not working as you expected to be, please use the ModSecurity user’s mailing list. Issues on GitHub are also welcomed, but we prefer to have user ask questions on the mailing list first so that you can reach an entire community. Also don’t forget to look for existing issues before open a new one.&lt;/p&gt; &#xA;&lt;p&gt;If you are going to open a new issue on GitHub, don’t forget to tell us the version of your libmodsecurity and the version of a specific connector if there is one.&lt;/p&gt; &#xA;&lt;h3&gt;Security issue&lt;/h3&gt; &#xA;&lt;p&gt;Please do not make public any security issue. Contact us at: &lt;a href=&#34;mailto:modsecurity@owasp.org&#34;&gt;modsecurity@owasp.org&lt;/a&gt; reporting the issue. Once the problem is fixed your credit will be given.&lt;/p&gt; &#xA;&lt;h2&gt;Feature request&lt;/h2&gt; &#xA;&lt;p&gt;We are open to discussing any new feature request with the community via the mailing lists. You can alternativly, feel free to open GitHub issues requesting new features. Before opening a new issue, please check if there is one already opened on the same topic.&lt;/p&gt; &#xA;&lt;h2&gt;Bindings&lt;/h2&gt; &#xA;&lt;p&gt;The libModSecurity design allows the integration with bindings. There is an effort to avoid breaking API [binary] compatibility to make an easy integration with possible bindings. Currently, there are two notable projects maintained by the community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python - &lt;a href=&#34;https://github.com/actions-security/pymodsecurity&#34;&gt;https://github.com/actions-security/pymodsecurity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Varnish - &lt;a href=&#34;https://github.com/xdecock/vmod-modsecurity&#34;&gt;https://github.com/xdecock/vmod-modsecurity&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Packaging&lt;/h2&gt; &#xA;&lt;p&gt;Having our packages in distros on time is a desire that we have, so let us know if there is anything we can do to facilitate your work as a packager.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsor Note&lt;/h2&gt; &#xA;&lt;p&gt;Development of ModSecurity is sponsored by Trustwave. Sponsorship will end July 1, 2024. Additional information can be found here &lt;a href=&#34;https://www.trustwave.com/en-us/resources/security-resources/software-updates/end-of-sale-and-trustwave-support-for-modsecurity-web-application-firewall/&#34;&gt;https://www.trustwave.com/en-us/resources/security-resources/software-updates/end-of-sale-and-trustwave-support-for-modsecurity-web-application-firewall/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>