<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-01T01:37:32Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>danmar/cppcheck</title>
    <updated>2022-12-01T01:37:32Z</updated>
    <id>tag:github.com,2022-12-01:/danmar/cppcheck</id>
    <link href="https://github.com/danmar/cppcheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;static analysis of C/C++ code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;Cppcheck&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;GitHub Actions&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OSS-Fuzz&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Coverity Scan Build Status&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;License&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/danmar/cppcheck/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/danmar/cppcheck/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Github Action Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:cppcheck&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/cppcheck.svg?sanitize=true&#34; alt=&#34;OSS-Fuzz&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scan.coverity.com/projects/512&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/512.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://opensource.org/licenses/GPL-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL3.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;About the name&lt;/h2&gt; &#xA;&lt;p&gt;The original name of this program was &#34;C++check&#34;, but it was later changed to &#34;Cppcheck&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Despite the name, Cppcheck is designed for both C and C++.&lt;/p&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;p&gt;A manual is available &lt;a href=&#34;https://cppcheck.sourceforge.io/manual.pdf&#34;&gt;online&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Donate CPU&lt;/h2&gt; &#xA;&lt;p&gt;Cppcheck is a hobby project with limited resources. You can help us by donating CPU (1 core or as many as you like). It is simple:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download (and extract) Cppcheck source code.&lt;/li&gt; &#xA; &lt;li&gt;Run script: &lt;code&gt;python cppcheck/tools/donate-cpu.py&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The script will analyse debian source code and upload the results to a cppcheck server. We need these results both to improve Cppcheck and to detect regressions.&lt;/p&gt; &#xA;&lt;p&gt;You can stop the script whenever you like with Ctrl C.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;Any C++11 compiler should work. For compilers with partial C++11 support it may work. If your compiler has the C++11 features that are available in Visual Studio 2013 / GCC 4.8 then it will work.&lt;/p&gt; &#xA;&lt;p&gt;To build the GUI, you need Qt.&lt;/p&gt; &#xA;&lt;p&gt;When building the command line tool, &lt;a href=&#34;http://www.pcre.org/&#34;&gt;PCRE&lt;/a&gt; is optional. It is used if you build with rules.&lt;/p&gt; &#xA;&lt;p&gt;There are multiple compilation choices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;qmake - cross platform build tool&lt;/li&gt; &#xA; &lt;li&gt;cmake - cross platform build tool&lt;/li&gt; &#xA; &lt;li&gt;Windows: Visual Studio (VS 2013 and above)&lt;/li&gt; &#xA; &lt;li&gt;Windows: Qt Creator + mingw&lt;/li&gt; &#xA; &lt;li&gt;gnu make&lt;/li&gt; &#xA; &lt;li&gt;g++ 4.8 (or later)&lt;/li&gt; &#xA; &lt;li&gt;clang++&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;cmake&lt;/h3&gt; &#xA;&lt;p&gt;Example, compiling Cppcheck with cmake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to compile the GUI you can use the flag. -DBUILD_GUI=ON&lt;/p&gt; &#xA;&lt;p&gt;For rules support (requires pcre) use the flag. -DHAVE_RULES=ON&lt;/p&gt; &#xA;&lt;p&gt;For release builds it is recommended that you use: -DUSE_MATCHCOMPILER=ON&lt;/p&gt; &#xA;&lt;p&gt;Using cmake you can generate project files for Visual Studio,XCode,etc.&lt;/p&gt; &#xA;&lt;h3&gt;qmake&lt;/h3&gt; &#xA;&lt;p&gt;You can use the gui/gui.pro file to build the GUI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd gui&#xA;qmake&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Visual Studio&lt;/h3&gt; &#xA;&lt;p&gt;Use the cppcheck.sln file. The file is configured for Visual Studio 2019, but the platform toolset can be changed easily to older or newer versions. The solution contains platform targets for both x86 and x64.&lt;/p&gt; &#xA;&lt;p&gt;To compile with rules, select &#34;Release-PCRE&#34; or &#34;Debug-PCRE&#34; configuration. pcre.lib (pcre64.lib for x64 builds) and pcre.h are expected to be in /externals then. A current version of PCRE for Visual Studio can be obtained using &lt;a href=&#34;https://github.com/microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio (from command line)&lt;/h3&gt; &#xA;&lt;p&gt;If you do not wish to use the Visual Studio IDE, you can compile cppcheck from the command line the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;msbuild cppcheck.sln&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;VS Code (on Windows)&lt;/h3&gt; &#xA;&lt;p&gt;Install MSYS2 to get GNU toolchain with g++ and gdb (&lt;a href=&#34;https://www.msys2.org/&#34;&gt;https://www.msys2.org/&lt;/a&gt;). Create a settings.json file in the .vscode folder with the following content (adjust path as necessary):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;terminal.integrated.shell.windows&#34;: &#34;C:\\msys64\\usr\\bin\\bash.exe&#34;,&#xA;    &#34;terminal.integrated.shellArgs.windows&#34;: [&#xA;        &#34;--login&#34;,&#xA;    ],&#xA;    &#34;terminal.integrated.env.windows&#34;: {&#xA;        &#34;CHERE_INVOKING&#34;: &#34;1&#34;,&#xA;        &#34;MSYSTEM&#34;: &#34;MINGW64&#34;,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &#34;make&#34; in the terminal to build cppcheck.&lt;/p&gt; &#xA;&lt;p&gt;For debugging create a launch.json file in the .vscode folder with the following content, which covers configuration for debugging cppcheck and misra.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    // Use IntelliSense to learn about possible attributes.&#xA;    // Hover to view descriptions of existing attributes.&#xA;    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387&#xA;    &#34;version&#34;: &#34;0.2.0&#34;,&#xA;    &#34;configurations&#34;: [&#xA;        {&#xA;            &#34;name&#34;: &#34;cppcheck&#34;,&#xA;            &#34;type&#34;: &#34;cppdbg&#34;,&#xA;            &#34;request&#34;: &#34;launch&#34;,&#xA;            &#34;program&#34;: &#34;${workspaceFolder}/cppcheck.exe&#34;,&#xA;            &#34;args&#34;: [&#xA;                &#34;--dump&#34;,&#xA;                &#34;${workspaceFolder}/addons/test/misra/misra-test.c&#34;&#xA;            ],&#xA;            &#34;stopAtEntry&#34;: false,&#xA;            &#34;cwd&#34;: &#34;${workspaceFolder}&#34;,&#xA;            &#34;environment&#34;: [],&#xA;            &#34;externalConsole&#34;: true,&#xA;            &#34;MIMode&#34;: &#34;gdb&#34;,&#xA;            &#34;miDebuggerPath&#34;: &#34;C:/msys64/mingw64/bin/gdb.exe&#34;,&#xA;            &#34;setupCommands&#34;: [&#xA;                {&#xA;                    &#34;description&#34;: &#34;Enable pretty-printing for gdb&#34;,&#xA;                    &#34;text&#34;: &#34;-enable-pretty-printing&#34;,&#xA;                    &#34;ignoreFailures&#34;: true&#xA;                }&#xA;            ]&#xA;        },&#xA;        {&#xA;            &#34;name&#34;: &#34;misra.py&#34;,&#xA;            &#34;type&#34;: &#34;python&#34;,&#xA;            &#34;request&#34;: &#34;launch&#34;,&#xA;            &#34;program&#34;: &#34;${workspaceFolder}/addons/misra.py&#34;,&#xA;            &#34;console&#34;: &#34;integratedTerminal&#34;,&#xA;            &#34;args&#34;: [&#xA;                &#34;${workspaceFolder}/addons/test/misra/misra-test.c.dump&#34;&#xA;            ]&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Qt Creator + MinGW&lt;/h3&gt; &#xA;&lt;p&gt;The PCRE dll is needed to build the CLI. It can be downloaded here: &lt;a href=&#34;http://software-download.name/pcre-library-windows/&#34;&gt;http://software-download.name/pcre-library-windows/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;GNU make&lt;/h3&gt; &#xA;&lt;p&gt;Simple, unoptimized build (no dependencies):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The recommended release build is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make MATCHCOMPILER=yes FILESDIR=/usr/share/cppcheck HAVE_RULES=yes CXXFLAGS=&#34;-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Flags:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;MATCHCOMPILER=yes&lt;/code&gt; Python is used to optimise cppcheck. The Token::Match patterns are converted into C++ code at compile time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FILESDIR=/usr/share/cppcheck&lt;/code&gt; Specify folder where cppcheck files are installed (addons, cfg, platform)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HAVE_RULES=yes&lt;/code&gt; Enable rules (PCRE is required if this is used)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CXXFLAGS=&#34;-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function&#34;&lt;/code&gt; Enables most compiler optimizations, disables cppcheck-internal debugging code and enables basic compiler warnings.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;g++ (for experts)&lt;/h3&gt; &#xA;&lt;p&gt;If you just want to build Cppcheck without dependencies then you can use this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;g++ -o cppcheck -std=c++11 -Iexternals -Iexternals/simplecpp -Iexternals/tinyxml2 -Iexternals/picojson -Ilib cli/*.cpp lib/*.cpp externals/simplecpp/simplecpp.cpp externals/tinyxml2/*.cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use &lt;code&gt;--rule&lt;/code&gt; and &lt;code&gt;--rule-file&lt;/code&gt; then dependencies are needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;g++ -o cppcheck -std=c++11 -lpcre -DHAVE_RULES -Ilib -Iexternals -Iexternals/simplecpp -Iexternals/tinyxml2 cli/*.cpp lib/*.cpp externals/simplecpp/simplecpp.cpp externals/tinyxml2/*.cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MinGW&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mingw32-make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter the following error with &lt;code&gt;MATCHCOMPILER=yes&lt;/code&gt; you need to specify your Python interpreter via &lt;code&gt;PYTHON_INTERPRETER&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;process_begin: CreateProcess(NULL, which python3, ...) failed.&#xA;makefile:24: pipe: No error&#xA;process_begin: CreateProcess(NULL, which python, ...) failed.&#xA;makefile:27: pipe: No error&#xA;makefile:30: *** Did not find a Python interpreter.  Stop.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Compiler/IDE&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create an empty project file / makefile.&lt;/li&gt; &#xA; &lt;li&gt;Add all cpp files in the cppcheck cli and lib folders to the project file / makefile.&lt;/li&gt; &#xA; &lt;li&gt;Add all cpp files in the externals folders to the project file / makefile.&lt;/li&gt; &#xA; &lt;li&gt;Compile.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Cross compiling Win32 (CLI) version of Cppcheck in Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install mingw32&#xA;make CXX=i586-mingw32msvc-g++ LDFLAGS=&#34;-lshlwapi&#34; RDYNAMIC=&#34;&#34;&#xA;mv cppcheck cppcheck.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;You can install Cppcheck with yum/apt/brew/etc.&lt;/p&gt; &#xA;&lt;p&gt;The official rpms are built with these files: &lt;a href=&#34;https://src.fedoraproject.org/rpms/cppcheck/tree/master&#34;&gt;https://src.fedoraproject.org/rpms/cppcheck/tree/master&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Webpage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cppcheck.sourceforge.io/&#34;&gt;https://cppcheck.sourceforge.io/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BrunoLevy/learn-fpga</title>
    <updated>2022-12-01T01:37:32Z</updated>
    <id>tag:github.com,2022-12-01:/BrunoLevy/learn-fpga</id>
    <link href="https://github.com/BrunoLevy/learn-fpga" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learning FPGA, yosys, nextpnr, and RISC-V&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;learn-fpga&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Learning FPGA, yosys, nextpnr, and RISC-V&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mission statement: create teaching material for FPGAs, processor design and RISC-V, using around $40 per students.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BrunoLevy/learn-fpga/master/FemtoRV/TUTORIALS/Images/IceStick_hello.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FemtoRV: a minimalistic RISC-V CPU&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BrunoLevy/learn-fpga/master/FemtoRV/README.md&#34;&gt;FemtoRV&lt;/a&gt; is a minimalistic RISC-V design, with easy-to-read Verilog sources directly written from the RISC-V specification. The most elementary version (quark), an RV32I core, weights 400 lines of VERILOG (documented version), and 100 lines if you remove the comments. There are also more elaborate versions, the biggest one (petitbateau) is an RV32IMFC core. The repository also includes a companion SoC, with drivers for an UART, a led matrix, a small OLED display, SPI RAM and SDCard. Its most basic configuration fits on the Lattice IceStick (&amp;lt; 1280 LUTs). It can be used for teaching processor design and RISC-V programming.&lt;/p&gt; &#xA;&lt;h2&gt;Playing with LiteX: plug-and-play system to assemble SOCs&lt;/h2&gt; &#xA;&lt;p&gt;The repository includes &lt;a href=&#34;https://raw.githubusercontent.com/BrunoLevy/learn-fpga/master/LiteX/README.md&#34;&gt;LiteX examples&lt;/a&gt;. The &lt;a href=&#34;https://github.com/enjoy-digital/litex&#34;&gt;LiteX&lt;/a&gt; framework is a well designed and an easy-to-use framework to create SoCs. It lets you create a SoC by assembling components (processor, SDRAM controller, SDCard controller, USB, ...) in Python. FemtoRV is directly supported by LiteX (that directly downloads it from this repository when selected as the SoC&#39;s processor).&lt;/p&gt; &#xA;&lt;h2&gt;From Blinky to RISC-V&lt;/h2&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://github.com/BrunoLevy/learn-fpga/raw/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV/README.md&#34;&gt;Episode I&lt;/a&gt;, you will learn to build your own RISC-V processor, step by step, starting from the simplest design (that blinks a LED), to a fully functional RISC-V core that can compute and display graphics.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://github.com/BrunoLevy/learn-fpga/raw/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV/PIPELINE.md&#34;&gt;Episode II&lt;/a&gt;, you will learn how to design a pipelined processor.&lt;/p&gt; &#xA;&lt;h2&gt;Basic: more basic things I wrote during May 2020 - June 2020&lt;/h2&gt; &#xA;&lt;p&gt;Files are &lt;a href=&#34;https://github.com/BrunoLevy/learn-fpga/tree/master/Basic&#34;&gt;here&lt;/a&gt;. This includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blinker: the &#34;hello world&#34; program&lt;/li&gt; &#xA; &lt;li&gt;LedMatrix: play with a 8x8 let matrix, driven by a MAX7219 IC.&lt;/li&gt; &#xA; &lt;li&gt;OLed: play with a SSD1351 OLed display, driven by a 4-wire SPI protocol.&lt;/li&gt; &#xA; &lt;li&gt;Serial: access the included USB-virtual UART pins&lt;/li&gt; &#xA; &lt;li&gt;LedTerminal: display scrolling messages on the LED matrix, obtained from the USB virtual UART&lt;/li&gt; &#xA; &lt;li&gt;FOMU: simple examples for the &#34;FPGA in a USB dongle&#34;, including the FrankenVGA experiment !&lt;/li&gt; &#xA; &lt;li&gt;ULX3S HDMI: simple self-contained heavily commented HDMI example.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>open-telemetry/opentelemetry-cpp</title>
    <updated>2022-12-01T01:37:32Z</updated>
    <id>tag:github.com,2022-12-01:/open-telemetry/opentelemetry-cpp</id>
    <link href="https://github.com/open-telemetry/opentelemetry-cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The OpenTelemetry C++ Client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTelemetry C++&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cloud-native.slack.com/archives/C01N3AT62SJ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-@cncf/otel/cpp-brightgreen.svg?logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/open-telemetry/opentelemetry-cpp/&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/open-telemetry/opentelemetry-cpp/branch/main/graphs/badge.svg?&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-cpp/actions&#34;&gt;&lt;img src=&#34;https://github.com/open-telemetry/opentelemetry-cpp/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-cpp/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/open-telemetry/opentelemetry-cpp?include_prereleases&amp;amp;style=&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The C++ &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt; client.&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Signal&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Traces&lt;/td&gt; &#xA;   &lt;td&gt;Public Release&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metrics&lt;/td&gt; &#xA;   &lt;td&gt;Public Release&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logs&lt;/td&gt; &#xA;   &lt;td&gt;Experimental [1]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-cpp/milestone/18&#34;&gt;Release Milestone&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[1]: The current Log Signal Implementation is Experimental, and will change as the current OpenTelemetry Log specification matures. The current implementation can be included in build by setting &lt;code&gt;ENABLE_LOGS_PREVIEW&lt;/code&gt; preprocessor macro.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported C++ Versions&lt;/h2&gt; &#xA;&lt;p&gt;Code shipped from this repository generally supports the following versions of C++ standards:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ISO/IEC 14882:2011 (C++11, C++0x)&lt;/li&gt; &#xA; &lt;li&gt;ISO/IEC 14882:2014 (C++14, C++1y)&lt;/li&gt; &#xA; &lt;li&gt;ISO/IEC 14882:2017 (C++17, C++1z)&lt;/li&gt; &#xA; &lt;li&gt;ISO/IEC 14882:2020 (C++20)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Any exceptions to this are noted in the individual &lt;code&gt;README.md&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;Please note that supporting the &lt;a href=&#34;https://en.wikipedia.org/wiki/C_(programming_language)&#34;&gt;C Programming Language&lt;/a&gt; is not a goal of the current project.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Development Platforms&lt;/h2&gt; &#xA;&lt;p&gt;Our CI pipeline builds and tests on following &lt;code&gt;x86-64&lt;/code&gt; platforms:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Build type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ubuntu-20.04 (Default GCC Compiler - 9.3.0)&lt;/td&gt; &#xA;   &lt;td&gt;CMake, Bazel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ubuntu-18.04 (GCC 4.8 with -std=c++11 flag)&lt;/td&gt; &#xA;   &lt;td&gt;CMake [1]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ubuntu-20.04 (Default GCC Compiler - 9.3.0 with -std=c++20 flags)&lt;/td&gt; &#xA;   &lt;td&gt;CMake, Bazel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS 10.15 (Xcode 12.2)&lt;/td&gt; &#xA;   &lt;td&gt;Bazel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows Server 2019 (Visual Studio Enterprise 2019)&lt;/td&gt; &#xA;   &lt;td&gt;CMake, Bazel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;[1]: Bazel build is disabled for GCC 4.8, as gRPC library 1.38 and above (required by OTLP expoter) don&#39;t build with this compiler. See gRPC &lt;a href=&#34;https://grpc.io/docs/#official-support&#34;&gt;official support&lt;/a&gt; document. CMake build doesn&#39;t build OTLP exporter with GCC 4.8.&lt;/p&gt; &#xA;&lt;p&gt;In general, the code shipped from this repository should build on all platforms having C++ compiler with &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-cpp/main/#supported-c-versions&#34;&gt;supported C++ standards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-cpp/main/docs/dependencies.md&#34;&gt;Dependencies.md&lt;/a&gt; for OSS Dependencies and license requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-cpp/main/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;As an application owner or the library author, you can find the getting started guide and reference documentation on &lt;a href=&#34;https://opentelemetry-cpp.readthedocs.io/en/latest/&#34;&gt;opentelemetry-cpp.readthedocs.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;examples/simple&lt;/code&gt; directory contains a minimal program demonstrating how to instrument a small library using a simple &lt;code&gt;processor&lt;/code&gt; and console &lt;code&gt;exporter&lt;/code&gt;, along with build files for CMake and Bazel.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-cpp/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We meet weekly, and the time of the meeting alternates between Monday at 13:00 PT and Wednesday at 9:00 PT. The meeting is subject to change depending on contributors&#39; availability. Check the &lt;a href=&#34;https://calendar.google.com/calendar/embed?src=google.com_b79e3e90j7bbsa2n2p5an5lf60%40group.calendar.google.com&#34;&gt;OpenTelemetry community calendar&lt;/a&gt; for specific dates and Zoom meeting links.&lt;/p&gt; &#xA;&lt;p&gt;Meeting notes are available as a public &lt;a href=&#34;https://docs.google.com/document/d/1i1E4-_y4uJ083lCutKGDhkpi3n4_e774SBLi9hPLocw/edit?usp=sharing&#34;&gt;Google doc&lt;/a&gt;. For edit access, get in touch on &lt;a href=&#34;https://cloud-native.slack.com/archives/C01N3AT62SJ&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/open-telemetry/community/raw/main/community-membership.md#maintainer&#34;&gt;Maintainers&lt;/a&gt; (&lt;a href=&#34;https://github.com/orgs/open-telemetry/teams/cpp-maintainers&#34;&gt;@open-telemetry/cpp-maintainers&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esigo&#34;&gt;Ehsan Saei&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lalitb&#34;&gt;Lalit Kumar Bhasin&lt;/a&gt;, Microsoft&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ThomsonTan&#34;&gt;Tom Tan&lt;/a&gt;, Microsoft&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/open-telemetry/community/raw/main/community-membership.md#approver&#34;&gt;Approvers&lt;/a&gt; (&lt;a href=&#34;https://github.com/orgs/open-telemetry/teams/cpp-approvers&#34;&gt;@open-telemetry/cpp-approvers&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jsuereth&#34;&gt;Josh Suereth&lt;/a&gt;, Google&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marcalff&#34;&gt;Marc Alff&lt;/a&gt;, Oracle&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reyang&#34;&gt;Reiley Yang&lt;/a&gt;, Microsoft&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/owent&#34;&gt;WenTao Ou&lt;/a&gt;, Tencent&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/open-telemetry/community/raw/main/community-membership.md#emeritus-maintainerapprovertriager&#34;&gt;Emeritus Maintainer/Approver/Triager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alolita&#34;&gt;Alolita Sharma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/g-easy&#34;&gt;Emil Mikulic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jodeev&#34;&gt;Jodee Varney&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyohannes&#34;&gt;Johannes Tax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maxgolov&#34;&gt;Max Golovanov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rnburn&#34;&gt;Ryan Burn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Thanks to all the people who have contributed&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-cpp/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contributors-img.web.app/image?repo=open-telemetry/opentelemetry-cpp&#34; alt=&#34;contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Release Schedule&lt;/h2&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/open-telemetry/opentelemetry-cpp/main/#project-status&#34;&gt;project status&lt;/a&gt; for current status of the project.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-cpp/releases&#34;&gt;release notes&lt;/a&gt; for existing releases.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-cpp/milestones&#34;&gt;project milestones&lt;/a&gt; for details on upcoming releases. The dates and features described in issues and milestones are estimates, and subject to change.&lt;/p&gt;</summary>
  </entry>
</feed>