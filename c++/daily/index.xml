<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-26T01:30:46Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OpenRCT2/OpenRCT2</title>
    <updated>2022-07-26T01:30:46Z</updated>
    <id>tag:github.com,2022-07-26:/OpenRCT2/OpenRCT2</id>
    <link href="https://github.com/OpenRCT2/OpenRCT2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source re-implementation of RollerCoaster Tycoon 2 🎢&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://openrct2.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/resources/logo/icon_x128.png&#34; style=&#34;width: 128px;&#34; alt=&#34;OpenRCT2 logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;OpenRCT2&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;An open-source re-implementation of RollerCoaster Tycoon 2, a construction and management simulation video game that simulates amusement park management.&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/e7CK5Sc.png&#34; alt=&#34;OpenRCT2.org Group Park 5&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Download&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Latest release&lt;/th&gt; &#xA;   &lt;th&gt;Latest development build&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://openrct2.org/downloads/master/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/master-v0.4.1-green.svg?sanitize=true&#34; alt=&#34;OpenRCT2.org&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://openrct2.org/downloads/develop/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/OpenRCT2/OpenRCT2/develop&#34; alt=&#34;OpenRCT2.org&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Chat&lt;/h3&gt; &#xA;&lt;p&gt;Chat takes place on Discord. You will need to create a Discord account if you don&#39;t yet have one.&lt;/p&gt; &#xA;&lt;p&gt;If you want to help &lt;em&gt;make&lt;/em&gt; the game, join the developer channel.&lt;/p&gt; &#xA;&lt;p&gt;If you need help, want to talk to the developers, or just want to stay up to date then join the non-developer channel for your language.&lt;/p&gt; &#xA;&lt;p&gt;If you want to help translate the game to your language, please stop by the Localisation channel.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Non Developer&lt;/th&gt; &#xA;   &lt;th&gt;Developer&lt;/th&gt; &#xA;   &lt;th&gt;Localisation&lt;/th&gt; &#xA;   &lt;th&gt;Asset Replacement&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;English&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://discord.gg/ZXZd8D8&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-%23openrct2--talk-blue.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://discord.gg/vJABqGGTEt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-%23help-blue.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://discord.gg/fsEwSWs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-%23development-yellowgreen.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://discord.gg/sxnrvX9&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-%23localisation-green.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://discord.gg/aM2Pchscnp&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-%23open--graphics-b00b69.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://discord.gg/tuz3QBBWJf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-%23open--sound--and--music-b00b69.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nederlands&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://discord.gg/cQYSXzW&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-%23nederlands-orange.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#1-introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#2-downloading-the-game-pre-built&#34;&gt;Downloading the game (pre-built)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;3 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#3-building-the-game&#34;&gt;Building the game&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;3.1 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#31-building-prerequisites&#34;&gt;Building prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;3.2 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#32-compiling-and-running&#34;&gt;Compiling and running&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;4 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#4-contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;4.1 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#41-bug-fixes&#34;&gt;Bug fixes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;4.2 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#42-new-features&#34;&gt;New features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;4.3 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#43-translation&#34;&gt;Translation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;4.4 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#44-graphics&#34;&gt;Graphics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;4.5 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#45-audio&#34;&gt;Audio&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;4.6 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#46-scenarios&#34;&gt;Scenarios&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;5 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#5-licence&#34;&gt;Licence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;6 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#6-more-information&#34;&gt;More information&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;7 - &lt;a href=&#34;https://raw.githubusercontent.com/OpenRCT2/OpenRCT2/develop/#7-sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;1. Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenRCT2&lt;/strong&gt; is an open-source re-implementation of RollerCoaster Tycoon 2 (RCT2). The gameplay revolves around building and maintaining an amusement park containing attractions, shops and facilities. The player must try to make a profit and maintain a good park reputation whilst keeping the guests happy. OpenRCT2 allows for both scenario and sandbox play. Scenarios require the player to complete a certain objective in a set time limit whilst sandbox allows the player to build a more flexible park with optionally no restrictions or finance.&lt;/p&gt; &#xA;&lt;p&gt;RollerCoaster Tycoon 2 was originally written by Chris Sawyer in x86 assembly and is the sequel to RollerCoaster Tycoon. The engine was based on Transport Tycoon, an older game which also has an equivalent open-source project, &lt;a href=&#34;https://openttd.org&#34;&gt;OpenTTD&lt;/a&gt;. OpenRCT2 attempts to provide everything from RCT2 as well as many improvements and additional features, some of these include support for modern platforms, an improved interface, improved guest and staff AI, more editing tools, increased limits, and cooperative multiplayer. It also re-introduces mechanics from RollerCoaster Tycoon that were not present in RollerCoaster Tycoon 2. Some of those include; mountain tool in-game, the &lt;em&gt;&#34;have fun&#34;&lt;/em&gt; objective, launched coasters (not passing-through the station) and several buttons on the toolbar.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;2. Downloading the game (pre-built)&lt;/h1&gt; &#xA;&lt;p&gt;OpenRCT2 requires original files of RollerCoaster Tycoon 2 to play. It can be bought at either &lt;a href=&#34;https://store.steampowered.com/app/285330/&#34;&gt;Steam&lt;/a&gt; or &lt;a href=&#34;https://www.gog.com/game/rollercoaster_tycoon_2&#34;&gt;GOG.com&lt;/a&gt;. If you have the original RollerCoaster Tycoon and its expansion packs, you can &lt;a href=&#34;https://github.com/OpenRCT2/OpenRCT2/wiki/Loading-RCT1-scenarios-and-data&#34;&gt;point OpenRCT2 to these&lt;/a&gt; in order to play the original scenarios.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openrct2.org/downloads&#34;&gt;OpenRCT2.org&lt;/a&gt; offers precompiled builds and installers of the latest master and the develop branch. There is also a cross platform &lt;a href=&#34;https://github.com/LRFLEW/OpenRCT2Launcher/releases&#34;&gt;Launcher&lt;/a&gt; available that will automatically update your build of the game so that you always have the latest version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flathub.org/&#34;&gt;Flathub&lt;/a&gt; offers flatpaks for Linux distributions that support this application distribution system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flathub.org/repo/appstream/io.openrct2.OpenRCT2.flatpakref&#34;&gt;Latest stable release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flathub.org/beta-repo/appstream/io.openrct2.OpenRCT2.flatpakref&#34;&gt;Latest development build&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some Linux distributions offer native packages already. These packages are usually third-party, but we&#39;re trying to resolve issues they are facing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ArchLinux: &lt;a href=&#34;https://aur.archlinux.org/packages/openrct2-git&#34;&gt;openrct2-git&lt;/a&gt; (AUR) and &lt;a href=&#34;https://archlinux.org/packages/community/x86_64/openrct2/&#34;&gt;openrct2&lt;/a&gt; (Community)&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu PPA: &lt;a href=&#34;https://launchpad.net/~openrct2/+archive/ubuntu/nightly&#34;&gt;&lt;code&gt;develop&lt;/code&gt; branch&lt;/a&gt; (nightly builds)&lt;/li&gt; &#xA; &lt;li&gt;openSUSE OBS: &lt;a href=&#34;https://software.opensuse.org/download.html?project=games&amp;amp;package=openrct2&#34;&gt;games/openrct2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gentoo (main portage tree): &lt;a href=&#34;https://packages.gentoo.org/packages/games-simulation/openrct2&#34;&gt;games-simulation/openrct2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NixOS (&lt;code&gt;nixos-unstable&lt;/code&gt; channel): &lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/master/pkgs/games/openrct2/default.nix&#34;&gt;openrct2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fedora 28 i386/amd64: &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/nauticalnexus/openrct2/&#34;&gt;openrct2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some *BSD operating systems offer native packages. These packages are usually third-party, but we&#39;re trying to resolve issues they are facing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FreeBSD: &lt;a href=&#34;https://www.freshports.org/games/openrct2&#34;&gt;games/openrct2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenBSD: &lt;a href=&#34;https://openports.se/games/openrct2&#34;&gt;games/openrct2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;3. Building the game&lt;/h1&gt; &#xA;&lt;h2&gt;3.1 Building prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;OpenRCT2 requires original files of RollerCoaster Tycoon 2 to play. It can be bought at either &lt;a href=&#34;https://store.steampowered.com/app/285330/&#34;&gt;Steam&lt;/a&gt; or &lt;a href=&#34;https://www.gog.com/game/rollercoaster_tycoon_2&#34;&gt;GOG.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Windows:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2022 (Enterprise / Professional / &lt;a href=&#34;https://www.visualstudio.com/vs/community/&#34;&gt;Community (Free)&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Desktop development with C++&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;macOS:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode Command Line Tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CMake (available through Homebrew)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linux:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sdl2 (only for UI client)&lt;/li&gt; &#xA; &lt;li&gt;freetype (can be disabled)&lt;/li&gt; &#xA; &lt;li&gt;fontconfig (can be disabled)&lt;/li&gt; &#xA; &lt;li&gt;libzip (&amp;gt;= 1.0)&lt;/li&gt; &#xA; &lt;li&gt;libpng (&amp;gt;= 1.2)&lt;/li&gt; &#xA; &lt;li&gt;speexdsp (only for UI client)&lt;/li&gt; &#xA; &lt;li&gt;curl (only if building with http support)&lt;/li&gt; &#xA; &lt;li&gt;nlohmann-json (&amp;gt;= 3.6.0)&lt;/li&gt; &#xA; &lt;li&gt;openssl (&amp;gt;= 1.0; only if building with multiplayer support)&lt;/li&gt; &#xA; &lt;li&gt;icu (&amp;gt;= 59.0)&lt;/li&gt; &#xA; &lt;li&gt;zlib&lt;/li&gt; &#xA; &lt;li&gt;gl (commonly provided by Mesa or GPU vendors; only for UI client, can be disabled)&lt;/li&gt; &#xA; &lt;li&gt;cmake&lt;/li&gt; &#xA; &lt;li&gt;innoextract (optional runtime dependency; used for GOG installer extraction during setup)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://github.com/OpenRCT2/OpenRCT2/wiki/Building-OpenRCT2-on-Linux#required-packages-general&#34;&gt;https://github.com/OpenRCT2/OpenRCT2/wiki/Building-OpenRCT2-on-Linux#required-packages-general&lt;/a&gt; for more information about installing the packages.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;3.2 Compiling and running&lt;/h2&gt; &#xA;&lt;h3&gt;Windows:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Check out the repository. This can be done using &lt;a href=&#34;https://desktop.github.com&#34;&gt;GitHub Desktop&lt;/a&gt; or &lt;a href=&#34;https://help.github.com/articles/which-remote-url-should-i-use&#34;&gt;other tools&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a new Developer Command Prompt for VS 2022, then navigate to the repository (e.g. &lt;code&gt;cd C:\GitHub\OpenRCT2&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To build the 64-bit version, use &lt;code&gt;msbuild openrct2.proj /t:build /p:platform=x64&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To build the 32-bit version, use &lt;code&gt;msbuild openrct2.proj /t:build /p:platform=Win32&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the game, &lt;code&gt;bin\openrct2&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once you have ran msbuild once, further development can be done within Visual Studio by opening &lt;code&gt;openrct2.sln&lt;/code&gt;. Make sure to select the correct target platform for which you ran the build in point #3 (&lt;code&gt;Win32&lt;/code&gt; for the 32-bit version, &lt;code&gt;x64&lt;/code&gt; for the 64-bit version), otherwise the build will fail in Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;Other examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set platform=x64&#xA;msbuild openrct2.proj /t:clean&#xA;msbuild openrct2.proj /t:rebuild /p:configuration=release&#xA;msbuild openrct2.proj /t:g2&#xA;msbuild openrct2.proj /t:PublishPortable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS:&lt;/h3&gt; &#xA;&lt;h4&gt;CMake:&lt;/h4&gt; &#xA;&lt;p&gt;The recommended way of building OpenRCT2 for macOS is with CMake. CMake can build either a self-contained application bundles which include all the necessary game files and dependencies, or it can build a command line version that links against system installed dependencies. CMake will retrieve the dependences from &lt;a href=&#34;https://github.com/OpenRCT2/Dependencies/&#34;&gt;Dependencies&lt;/a&gt; automatically. You can build the macOS app using CMake using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can run the game by opening &lt;code&gt;OpenRCT2.app&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build the command line version, you&#39;ll need to disable the macOS app bundle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake .. -DMACOS_BUNDLE=off&#xA;make&#xA;ln -s ../data data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can run the game by running &lt;code&gt;./openrct2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To link against system dependencies instead of letting CMake download the dependencies from &lt;a href=&#34;https://github.com/OpenRCT2/Dependencies&#34;&gt;Dependencies&lt;/a&gt;, add &lt;code&gt;-DMACOS_USE_DEPENDENCIES=off&lt;/code&gt; to your cmake args.&lt;/p&gt; &#xA;&lt;p&gt;Detailed instructions can be found on &lt;a href=&#34;https://github.com/OpenRCT2/OpenRCT2/wiki/Building-OpenRCT2-on-macOS-using-CMake&#34;&gt;Building OpenRCT2 on macOS using CMake&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linux:&lt;/h3&gt; &#xA;&lt;p&gt;The standard CMake build procedure is to install the &lt;a href=&#34;https://github.com/OpenRCT2/OpenRCT2#linux&#34;&gt;required libraries&lt;/a&gt;, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake ../ # set your standard cmake options, e.g. build type here - For example, -DCMAKE_BUILD_TYPE=RelWithDebInfo&#xA;make # you can parallelise your build job with e.g. -j8 or consider using ninja&#xA;DESTDIR=. make install # the install target creates all the necessary files in places we expect them&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use Ninja in place of Make, if you prefer, see Wiki for details.&lt;/p&gt; &#xA;&lt;p&gt;Detailed instructions can be found on &lt;a href=&#34;https://github.com/OpenRCT2/OpenRCT2/wiki/Building-OpenRCT2-on-Linux&#34;&gt;Building OpenRCT2 on Linux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;4. Contributing&lt;/h1&gt; &#xA;&lt;p&gt;OpenRCT2 uses the &lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow&#34;&gt;gitflow workflow&lt;/a&gt;. If you are implementing a new feature or logic from the original game, please branch off and perform pull requests to &lt;code&gt;develop&lt;/code&gt;. If you are fixing a bug for the next release, please branch off and perform pull requests to the correct release branch. &lt;code&gt;master&lt;/code&gt; only contains tagged releases, you should never branch off this.&lt;/p&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://github.com/OpenRCT2/OpenRCT2/raw/develop/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; for information.&lt;/p&gt; &#xA;&lt;h2&gt;4.1 Bug fixes&lt;/h2&gt; &#xA;&lt;p&gt;A list of bugs can be found on the &lt;a href=&#34;https://github.com/OpenRCT2/OpenRCT2/issues&#34;&gt;issue tracker&lt;/a&gt;. Feel free to work on any bug and submit a pull request to the develop branch with the fix. Mentioning that you intend to fix a bug on the issue will prevent other people from trying as well.&lt;/p&gt; &#xA;&lt;h2&gt;4.2 New features&lt;/h2&gt; &#xA;&lt;p&gt;Please talk to the OpenRCT2 team first before starting to develop a new feature. We may already have plans for or reasons against something that you&#39;d like to work on. Therefore contacting us will allow us to help you or prevent you from wasting any time. You can talk to us via Discord, see links at the top of this page.&lt;/p&gt; &#xA;&lt;h2&gt;4.3 Translation&lt;/h2&gt; &#xA;&lt;p&gt;You can translate the game into other languages by editing the language files in &lt;code&gt;data/language&lt;/code&gt; directory. Please join discussions in the &lt;a href=&#34;https://discordapp.com/invite/sxnrvX9&#34;&gt;#localisation channel on Discord&lt;/a&gt; and submit pull requests to &lt;a href=&#34;https://github.com/OpenRCT2/Localisation&#34;&gt;OpenRCT2/Localisation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;4.4 Graphics&lt;/h2&gt; &#xA;&lt;p&gt;You can help create new graphics for the game by visiting the &lt;a href=&#34;https://github.com/OpenRCT2/OpenGraphics&#34;&gt;OpenGraphics project&lt;/a&gt;. 3D modellers needed!&lt;/p&gt; &#xA;&lt;h2&gt;4.5 Audio&lt;/h2&gt; &#xA;&lt;p&gt;You can help create the music and sound effects for the game. Check out the OpenMusic repository and drop by our &lt;a href=&#34;https://discord.gg/9y8WbcX&#34;&gt;#open-sound-and-music channel on Discord&lt;/a&gt; to find out more.&lt;/p&gt; &#xA;&lt;h2&gt;4.6 Scenarios&lt;/h2&gt; &#xA;&lt;p&gt;We would also like to distribute additional scenarios with the game, when the time comes. For that, we need talented scenario makers! Check out the &lt;a href=&#34;https://github.com/PFCKrutonium/OpenRCT2-OpenScenarios&#34;&gt;OpenScenarios repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;5. Licence&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenRCT2&lt;/strong&gt; is licensed under the GNU General Public License version 3.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;6. More information&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenRCT2/OpenRCT2&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openrct2.org&#34;&gt;OpenRCT2.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openrct2.org/forums/&#34;&gt;Forums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.facebook.com/OpenRCT2&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/rct/&#34;&gt;RCT subreddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/openrct2/&#34;&gt;OpenRCT2 subreddit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Similar Projects&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/OpenLoco/OpenLoco&#34;&gt;OpenLoco&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/OpenTTD/OpenTTD&#34;&gt;OpenTTD&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/SFTtech/openage&#34;&gt;openage&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/OpenRA/OpenRA&#34;&gt;OpenRA&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/OpenLoco/OpenLoco&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/604665/53047651-2c533c00-3493-11e9-911a-1a3540fc1156.png&#34; alt=&#34;icon_x128&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/OpenTTD/OpenTTD&#34;&gt;&lt;img src=&#34;https://github.com/OpenTTD/OpenTTD/raw/850d05d24d4768c81d97765204ef2a487dd4972c/media/openttd.128.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/SFTtech/openage&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/550290/36507534-4693f354-175a-11e8-93a7-faa0481474fb.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/OpenRA/OpenRA&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OpenRA/OpenRA/bleed/packaging/artwork/ra_128x128.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chris Sawyer&#39;s Locomotion&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Transport Tycoon Deluxe&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Age of Empires 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Red Alert&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;7. Sponsors&lt;/h1&gt; &#xA;&lt;p&gt;Companies that kindly allow us to use their stuff:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://backtrace.io/&#34;&gt;Backtrace&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/550290/36508276-8b572f0e-175c-11e8-8622-9febbce756b2.png&#34; alt=&#34;do_logo_vertical_blue svg&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/550290/36413299-0e0985ea-161e-11e8-8a01-3ef523b5905b.png&#34; alt=&#34;jetbrains&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://backtrace.io/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/550290/47113259-d0647680-d258-11e8-97c3-1a2c6bde6d11.png&#34; alt=&#34;backtrace&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hosting of various services&lt;/td&gt; &#xA;   &lt;td&gt;CLion and other products&lt;/td&gt; &#xA;   &lt;td&gt;Minidump uploads and inspection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>sam-astro/Z-Sharp</title>
    <updated>2022-07-26T01:30:46Z</updated>
    <id>tag:github.com,2022-07-26:/sam-astro/Z-Sharp</id>
    <link href="https://github.com/sam-astro/Z-Sharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Custom programming interpreter for ZSharp (Z#), a language I made up.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sam-astro/Z-Sharp/master/ExtraResources/ZS-Gem-Icon-Small.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sam-astro/Z-Sharp/master/ExtraResources/ZS-Logo-Light-Small.png&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Z-Sharp is no longer in development! This project was never meant to go beyond the scope of a simple thing I could make pong in, yet people continue to ask for features and fixes, and I continue to oblige. So sadly, even though this was a cool project in which I learned a lot, it will be ending now. I will eventually make some docs and standards for the syntax, and will still leave this repository open. This way anybody can make their own interpreter or compiler for it. I will also still accept pull requests for any changes to this repository.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Z-Sharp is a custom programming language I made because I don&#39;t like c++ very much (Z-Sharp&#39;s interpreter is written in c++ though). Z-Sharp scripts have the file extension .ZS. The base syntax and formatting I would say is quite similar to C# or Python, but differs as task complexity increases. It also has support for graphics using SDL2.&lt;/p&gt; &#xA;&lt;p&gt;Before using Z#: There is &lt;em&gt;&lt;strong&gt;no documentation&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;strings&lt;/strong&gt;&lt;/em&gt; barely work, &lt;em&gt;&lt;strong&gt;performance&lt;/strong&gt;&lt;/em&gt; isn&#39;t great, the syntax is &lt;em&gt;&lt;strong&gt;very specific&lt;/strong&gt;&lt;/em&gt;, and most errors just cause it to &lt;em&gt;&lt;strong&gt;crash without warning&lt;/strong&gt;&lt;/em&gt;. I am just a &lt;em&gt;single developer&lt;/em&gt; working on this during my free time; between school, other projects, and YouTube. Z-Sharp will most likely never be finished, since it was really supposed to end when the video was published about it. If you are trying to use a common programming language feature, ask yourself this: &lt;em&gt;&lt;strong&gt;Is this feature required to play pong?&lt;/strong&gt;&lt;/em&gt; If not, then most likely that feature &lt;em&gt;&lt;strong&gt;has not been implemented yet&lt;/strong&gt;&lt;/em&gt;. I initially only made the language so I could create pong and make a video about it, so it really is the &lt;em&gt;&lt;strong&gt;bare minimum&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation and getting started:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://spazelectro.github.io/ZSharpDocs/#/README&#34;&gt;The docs and tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Downloading or installing is very simple, here is how depending on your version and operating system:&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to &lt;a href=&#34;https://github.com/sam-astro/Z-Sharp/releases&#34;&gt;the most recent release&lt;/a&gt; and download &lt;code&gt;ZSharp-Win-Installer.zip&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Unzip &lt;code&gt;ZSharp-Win-Installer.zip&lt;/code&gt; and open the unzipped folder.&lt;/li&gt; &#xA; &lt;li&gt;Inside is a single file titled &lt;code&gt;ZSharp-Setup.exe&lt;/code&gt;. Run it, and follow the setup instructions.&lt;/li&gt; &#xA; &lt;li&gt;If it fails to run, make sure the &lt;code&gt;MS Visual Runtime and MSVC C++ Redistribute&lt;/code&gt; are installed. You can download them &lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist&#34;&gt;here from Microsoft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Now that it is installed, there are a few ways to use it: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(recommended) Any ZSharp file that ends with .ZS will automatically be associated with the interpreter. Just double-click it, and the interpreter will run.&lt;/li&gt; &#xA;   &lt;li&gt;Drag and drop any .ZS script directly onto the executable.&lt;/li&gt; &#xA;   &lt;li&gt;Use command line, providing path to interpreter and then to script like so: &lt;code&gt;&amp;gt; ./ZSharp.exe ./Pong-Example-Project/script.zs&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Feel free to use and edit the &lt;code&gt;Pong-Example-Project&lt;/code&gt;. It is a single script called &lt;code&gt;script.zs&lt;/code&gt;, and you can open it with any of the methods above. It is also located on the releases page.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you don&#39;t want to install ZSharp on your device, or you want easier acces to the executable and .DLLs, another version is provided called &lt;code&gt;ZS_Win_Base_Raw.zip&lt;/code&gt;. This just contains all of the files the installer puts on your computer.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install requirements:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Debian&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt install libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo pacman -S sdl2 sdl2_image sdl2_ttf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Navigate to &lt;a href=&#34;https://github.com/sam-astro/Z-Sharp/releases&#34;&gt;the most recent release&lt;/a&gt; and download &lt;code&gt;ZSharp-Linux.zip&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Unzip &lt;code&gt;ZSharp-Linux.zip&lt;/code&gt; and open the unzipped folder.&lt;/li&gt; &#xA; &lt;li&gt;You will see some files. The Z# interpreter is &lt;code&gt;ZSharp&lt;/code&gt;. Any time you want to execute a script, this is the program that will be used. You can use it like so: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use terminal, providing path to executable and then to script like so: &lt;code&gt;$ ./ZSharp ./Pong-Example-Project/script.zs&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Feel free to use and edit the included &lt;code&gt;Pong-Example-Project&lt;/code&gt;. It is a single script called &lt;code&gt;script.zs&lt;/code&gt;, and you can open it with any of the methods above.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Here is some example code:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Comments are indicated by two forward slashes&#xA;// They can only be on their own line&#xA;//    int j = 4 // &amp;lt;- This is invalid comment placement&#xA;&#xA;// All programs start with a main function&#xA;func Main()&#xA;{&#xA;    int i = 0&#xA;    string s = &#34;r&#34;&#xA;    &#xA;    i += 2&#xA;    i -= 1&#xA;    i /= 3&#xA;    i *= 2&#xA;    &#xA;    while i &amp;lt; 10&#xA;    {&#xA;        i += 1&#xA;    }&#xA;    &#xA;    if s == &#34;r&#34;&#xA;    {&#xA;        Printl(s + &#34; is r&#34;)&#xA;    }&#xA;    &#xA;    int functionNumber = ExampleFunction(&#34;A&#34;, s)&#xA;    ExampleFunction(1, 3)&#xA;    &#xA;    GlobalFunction()&#xA;}&#xA;&#xA;// Declare new function with &#39;func&#39;, then it&#39;s name, and the names of any input variables.&#xA;// The input variables don&#39;t need type, as those are automatic. Also, they don&#39;t need to&#xA;/// be assigned at all on execute and can be left blank&#xA;func ExampleFunction(inputA, inputB)&#xA;{&#xA;    Printl(&#34;In A is: &#34; + inputA)&#xA;    Printl(&#34;In B is: &#34; + inputB)&#xA;    &#xA;    // Return a value to the valling location&#xA;    return 4&#xA;}&#xA;&#xA;func GlobalFunction()&#xA;{&#xA;    // Create variables that can be accessed from anywhere (ex. in Main or ExampleFunction) with the &#39;global&#39; keyword before type&#xA;    global int x = 12&#xA;    global string y = &#34;Y String&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is how to use graphics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;func Main()&#xA;{&#xA;    int screenWidth = 500&#xA;    int screenHeight = 500&#xA;    ZS.Graphics.Init(&#34;Title of window&#34;, screenWidth, screenHeight)&#xA;    // After graphics are initialized, the main function will not finish.&#xA;    // Instead, Start() will be called a single time, then Update() every frame after that.&#xA;}&#xA;&#xA;// Runs once at start of graphics initialization&#xA;func Start()&#xA;{&#xA;    // Vec2 are initialized using function &#39;NVec2(x, y)&#39;&#xA;    Vec2 position = NVec2(250, 250)&#xA;    Vec2 scale = NVec2(20, 20)&#xA;    float rotation = 0&#xA;&#xA;    // Sprite object, stores (and loads from file) the texture, location, scale, and rotation&#xA;    global Sprite exampleSprite = ZS.Graphics.Sprite(&#34;./square.png&#34;, position, scale, rotation)&#xA;}&#xA;&#xA;// Executes each frame&#xA;func Update(deltaTime)&#xA;{&#xA;    // Draws the image created in Start(). This is usually at the end of update.&#xA;    ZS.Graphics.Draw(exampleSprite)   &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, ZSharp is &lt;em&gt;&lt;strong&gt;VERY&lt;/strong&gt;&lt;/em&gt; strict with formatting, and can throw an error if you forget to put a space somewhere. Also, speaking of errors, if your code has any it will show in the console. Errors are colored red, and warnings are colored yellow. A line number will also usually be provided. This is &lt;em&gt;&lt;strong&gt;Not&lt;/strong&gt;&lt;/em&gt; the line relative to the &lt;em&gt;documents&lt;/em&gt; beginning, but rather the &lt;em&gt;functions&lt;/em&gt; beginning. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ERROR: line 5 in function Main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the 5th line &lt;em&gt;inside of Main&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;func Main()&#xA;{&#xA;   // line 1&#xA;   // line 2&#xA;   // line 3&#xA;   // line 4&#xA;   int g = &#34;s&#34;&#xA;   // ^ above line is the error, since it is line 5&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I am planning to change how error reporting works to report the document line number as well, but this is how it is for now.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>electron/electron</title>
    <updated>2022-07-26T01:30:46Z</updated>
    <id>tag:github.com,2022-07-26:/electron/electron</id>
    <link href="https://github.com/electron/electron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build cross-platform desktop apps with JavaScript, HTML, and CSS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://electronjs.org&#34;&gt;&lt;img src=&#34;https://electronjs.org/images/electron-logo.svg?sanitize=true&#34; alt=&#34;Electron Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/electron/electron/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/electron/electron/tree/main.svg?style=shield&#34; alt=&#34;CircleCI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/electron-bot/electron-ljo26/branch/main&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/4lggi9dpjc1qob7k/branch/main?svg=true&#34; alt=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/electronjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/745037351163527189?color=%237289DA&amp;amp;label=chat&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Electron Discord Invite&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;📝&lt;/span&gt; Available Translations: 🇨🇳 🇧🇷 🇪🇸 🇯🇵 🇷🇺 🇫🇷 🇺🇸 🇩🇪. View these docs in other languages at &lt;a href=&#34;https://github.com/electron/i18n/tree/master/content/&#34;&gt;electron/i18n&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Electron framework lets you write cross-platform desktop applications using JavaScript, HTML and CSS. It is based on &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; and &lt;a href=&#34;https://www.chromium.org&#34;&gt;Chromium&lt;/a&gt; and is used by the &lt;a href=&#34;https://github.com/atom/atom&#34;&gt;Atom editor&lt;/a&gt; and many other &lt;a href=&#34;https://electronjs.org/apps&#34;&gt;apps&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/electronjs&#34;&gt;@ElectronJS&lt;/a&gt; on Twitter for important announcements.&lt;/p&gt; &#xA;&lt;p&gt;This project adheres to the Contributor Covenant &lt;a href=&#34;https://github.com/electron/electron/tree/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;a href=&#34;mailto:coc@electronjs.org&#34;&gt;coc@electronjs.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install prebuilt Electron binaries, use &lt;a href=&#34;https://docs.npmjs.com/&#34;&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/a&gt;. The preferred method is to install Electron as a development dependency in your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install electron --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more installation options and troubleshooting tips, see &lt;a href=&#34;https://raw.githubusercontent.com/electron/electron/main/docs/tutorial/installation.md&#34;&gt;installation&lt;/a&gt;. For info on how to manage Electron versions in your apps, see &lt;a href=&#34;https://raw.githubusercontent.com/electron/electron/main/docs/tutorial/electron-versioning.md&#34;&gt;Electron versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Platform support&lt;/h2&gt; &#xA;&lt;p&gt;Each Electron release provides binaries for macOS, Windows, and Linux.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS (El Capitan and up): Electron provides 64-bit Intel and ARM binaries for macOS. Apple Silicon support was added in Electron 11.&lt;/li&gt; &#xA; &lt;li&gt;Windows (Windows 7 and up): Electron provides &lt;code&gt;ia32&lt;/code&gt; (&lt;code&gt;x86&lt;/code&gt;), &lt;code&gt;x64&lt;/code&gt; (&lt;code&gt;amd64&lt;/code&gt;), and &lt;code&gt;arm64&lt;/code&gt; binaries for Windows. Windows on ARM support was added in Electron 5.0.8.&lt;/li&gt; &#xA; &lt;li&gt;Linux: The prebuilt binaries of Electron are built on Ubuntu 20.04. They have also been verified to work on: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu 14.04 and newer&lt;/li&gt; &#xA;   &lt;li&gt;Fedora 24 and newer&lt;/li&gt; &#xA;   &lt;li&gt;Debian 8 and newer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start &amp;amp; Electron Fiddle&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/electron/fiddle&#34;&gt;&lt;code&gt;Electron Fiddle&lt;/code&gt;&lt;/a&gt; to build, run, and package small Electron experiments, to see code examples for all of Electron&#39;s APIs, and to try out different versions of Electron. It&#39;s designed to make the start of your journey with Electron easier.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, clone and run the &lt;a href=&#34;https://github.com/electron/electron-quick-start&#34;&gt;electron/electron-quick-start&lt;/a&gt; repository to see a minimal Electron app in action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/electron/electron-quick-start&#xA;cd electron-quick-start&#xA;npm install&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources for learning Electron&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://electronjs.org/docs&#34;&gt;electronjs.org/docs&lt;/a&gt; - All of Electron&#39;s documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/electron/fiddle&#34;&gt;electron/fiddle&lt;/a&gt; - A tool to build, run, and package small Electron experiments&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/electron/electron-quick-start&#34;&gt;electron/electron-quick-start&lt;/a&gt; - A very basic starter Electron app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://electronjs.org/community#boilerplates&#34;&gt;electronjs.org/community#boilerplates&lt;/a&gt; - Sample starter apps created by the community&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Programmatic usage&lt;/h2&gt; &#xA;&lt;p&gt;Most people use Electron from the command line, but if you require &lt;code&gt;electron&lt;/code&gt; inside your &lt;strong&gt;Node app&lt;/strong&gt; (not your Electron app) it will return the file path to the binary. Use this to spawn Electron from Node scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const electron = require(&#39;electron&#39;)&#xA;const proc = require(&#39;child_process&#39;)&#xA;&#xA;// will print something similar to /Users/maf/.../Electron&#xA;console.log(electron)&#xA;&#xA;// spawn Electron&#xA;const child = proc.spawn(electron)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mirrors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://npmmirror.com/mirrors/electron/&#34;&gt;China&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://www.electronjs.org/docs/latest/tutorial/installation#mirror&#34;&gt;Advanced Installation Instructions&lt;/a&gt; to learn how to use a custom mirror.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation translations&lt;/h2&gt; &#xA;&lt;p&gt;We crowdsource translations for our documentation via &lt;a href=&#34;https://crowdin.com/project/electron&#34;&gt;Crowdin&lt;/a&gt;. We currently accept translations for Chinese (Simplified), French, German, Japanese, Portuguese, Russian, and Spanish.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in reporting/fixing issues and contributing directly to the code base, please see &lt;a href=&#34;https://raw.githubusercontent.com/electron/electron/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information on what we&#39;re looking for and how to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Info on reporting bugs, getting help, finding third-party tools and sample apps, and more can be found on the &lt;a href=&#34;https://www.electronjs.org/community&#34;&gt;Community page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/electron/electron/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;When using Electron logos, make sure to follow &lt;a href=&#34;https://openjsf.org/wp-content/uploads/sites/84/2021/01/OpenJS-Foundation-Trademark-Policy-2021-01-12.docx.pdf&#34;&gt;OpenJS Foundation Trademark Policy&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>