<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-30T01:31:44Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nzbget/nzbget</title>
    <updated>2022-11-30T01:31:44Z</updated>
    <id>tag:github.com,2022-11-30:/nzbget/nzbget</id>
    <link href="https://github.com/nzbget/nzbget" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Efficient Usenet Downloader&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NZBGet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/nzbget/nzbget&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/nzbget/nzbget/develop.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/nzbget/nzbget/context:cpp&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/cpp/g/nzbget/nzbget.svg?label=code%20quality:%20c%2b%2b&#34; alt=&#34;Code Quality: Cpp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/nzbget/nzbget/context:javascript&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/javascript/g/nzbget/nzbget.svg?label=code%20quality:%20js&#34; alt=&#34;Code Quality: JavaScript&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/nzbget/nzbget/alerts&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/nzbget/nzbget.svg?sanitize=true&#34; alt=&#34;Total Alerts&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nzbget/nzbget/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/nzbget/nzbget/total.svg?sanitize=true&#34; alt=&#34;Total downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nzbget/nzbget/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/nzbget/nzbget/latest/total.svg?label=latest%20release&#34; alt=&#34;Downloads (latest release)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;NZBGet is a binary downloader, which downloads files from Usenet based on information given in nzb-files.&lt;/p&gt; &#xA;&lt;p&gt;NZBGet is written in C++ and is known for its performance and efficiency.&lt;/p&gt; &#xA;&lt;p&gt;NZBGet can run on almost any device - classic PC, NAS, media player, SAT-receiver, WLAN-router, etc. The download area provides precompiled binaries for Windows, macOS, Linux (compatible with many CPUs and platform variants), FreeBSD and Android. For other platforms the program can be compiled from sources.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aappleby/Metron</title>
    <updated>2022-11-30T01:31:44Z</updated>
    <id>tag:github.com,2022-11-30:/aappleby/Metron</id>
    <link href="https://github.com/aappleby/Metron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A C++ to Verilog translation tool with some basic guarantees that your code will work.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aappleby/Metron/master/docs/assets/metron_icon.svg?sanitize=true&#34; width=&#34;64&#34; height=&#34;64&#34;&gt; Metron C++ to Verilog Translator&lt;/h1&gt; &#xA;&lt;p&gt;Metron is a tool for translating a &lt;em&gt;very&lt;/em&gt; &lt;em&gt;limited&lt;/em&gt; subset of C++ into a &lt;em&gt;very&lt;/em&gt; &lt;em&gt;limited&lt;/em&gt; subset of SystemVerilog.&lt;/p&gt; &#xA;&lt;p&gt;Metron accepts plain, unannotated C++ header files as inputs and produces synthesizable SystemVerilog files that are compatible with Icarus, Verilator, Yosys, and most commercial tools.&lt;/p&gt; &#xA;&lt;p&gt;Metron is &lt;em&gt;not&lt;/em&gt; a &#34;High-Level Synthesis&#34; tool. Metron does some basic analysis to determine if your code is semantically compatible with Verilog and then produces a line-by-line translation with only the minimal set of changes needed to make the code compatible with Verilog tooling.&lt;/p&gt; &#xA;&lt;p&gt;Because it targets hardware implementation, Metron can&#39;t handle a lot of C++ language features - no pointers, no virtual functions, no pass-by-reference, limited data structures - but it&#39;s still sufficient to build CPUs and peripherals that will run on a FPGA.&lt;/p&gt; &#xA;&lt;h1&gt;TL;DR:&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aappleby/Metron/master/docs/BlueBallMachines.md&#34;&gt;Short essay about hardware vs. software programming&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://aappleby.github.io/Metron/demo/&#34;&gt;Demo&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://aappleby.github.io/Metron/tutorial/&#34;&gt;Tutorial&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://aappleby.github.io/Metron/TemporalLogic.html&#34;&gt;How Metron Works - Tracing &amp;amp; Symbolic Logic&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Metron v0.0.1 Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;First public release!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stuff that works &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Testbench has tests for Verilator, Icarus, and Yosys parsing Metron output.&lt;/li&gt; &#xA;   &lt;li&gt;Testbench has pretty good coverage of Metron via kcov.&lt;/li&gt; &#xA;   &lt;li&gt;Testbench has test suites for two RISC-V RV32I cores.&lt;/li&gt; &#xA;   &lt;li&gt;Testbench has some lock-step tests that check that Metron and Verilator outputs are bit-identical.&lt;/li&gt; &#xA;   &lt;li&gt;Tutorial and demo work and have nice responsive live code windows.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Stuff that doesn&#39;t work, but should eventually &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Struct support. It was kinda working in some tools and not in others and I need to revisit it.&lt;/li&gt; &#xA;   &lt;li&gt;Visual Studio support has bit-rotted somewhat.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Stuff that I&#39;ll be doing next &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Better error reporting. The error &lt;em&gt;checking&lt;/em&gt; is good, but the information printed out is pretty useless unless you&#39;re in a debugger. I should at least be printing filename + source line for all errors.&lt;/li&gt; &#xA;   &lt;li&gt;More complicated examples ported from Verilog to Metron. I have a full-featured UART from OpenCores and the Ibex RISC-V CPU that I&#39;ve started looking at but they&#39;re not functional yet.&lt;/li&gt; &#xA;   &lt;li&gt;More chunks of GateBoy/LogicBoy made compatible with Metron.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I&#39;m already using Verilator to convert my Verilog to C for testing, why would I want to use Metron? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Metron can help you prototype new RTL faster than writing it in Verilog.&lt;/li&gt; &#xA;   &lt;li&gt;Metron doesn&#39;t require a conversion step to integrate with an existing Verilator C++ testbench.&lt;/li&gt; &#xA;   &lt;li&gt;Metron modules usually simulate 2x - 5x faster than Verilated modules.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Wait, what? How fast do Metron models simulate? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A trivial LFSR module simulates at 600+ Mhz on my 5900x&lt;/li&gt; &#xA;   &lt;li&gt;A 640x480 &#34;Pong&#34; VGA video generator runs at 260+ Mhz with simulated video out via SDL2, or over 10x realtime.&lt;/li&gt; &#xA;   &lt;li&gt;A simple RISC-V RV32I core simulates at 360 mhz, though with the caveat that it&#39;s a single-cycle core and probably wouldn&#39;t synthesize.&lt;/li&gt; &#xA;   &lt;li&gt;The UART example in the test bench runs a loopback transmission + checksum at ~400 mhz (the Verilated version is ~130 mhz).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Have you heard of TLA+? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Yes, and I&#39;m aware that I&#39;m also using the phrase &#34;temporal logic&#34;, which might confuse some readers. I couldn&#39;t think of a better term for the &#34;How Metron Works&#34; page though, alas. Apolgies in advance to Leslie Lamport.&lt;/li&gt; &#xA;   &lt;li&gt;It would be interesting to see how Metron programs could use (or be translated into?) TLA+ proofs, but it&#39;s out of scope for now.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Why C++ instead of {language}? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When I started the project I wasn&#39;t sure if I&#39;d end up needing to do a bunch of brute-force &#34;trace every possible path&#34; stuff, and C++ is my most fluent language so I stuck with it. Now that Metron&#39;s working.... yeah, it would probably be simpler if written in Python, and Rust would probably make a better source language for conversion. Might be a future project.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building the Metron binary from source:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install git build-essential ninja-build python3 libicu-dev&#xA;git clone --recurse-submodules https://github.com/aappleby/Metron&#xA;cd Metron&#xA;./build.py&#xA;ninja bin/metron&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building everything in the repo:&lt;/h2&gt; &#xA;&lt;p&gt;The full test suite requires quite a bit of stuff. The versions of Verilator and Yosys available via apt are slightly too old and have some bugs, so build them from source - instructions tested on a clean install of Ubuntu 22.04:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#sudo apt install verilator // too old, get verilated_heavy.h error&#xA;#sudo apt install yosys // too old, doesn&#39;t like &#34;module uart_hello #(parameter int repeat_msg = 0)&#34;&#xA;sudo apt install iverilog&#xA;sudo apt install nextpnr-ice40&#xA;sudo apt install fpga-icestorm&#xA;sudo apt install libsdl2-dev&#xA;sudo apt install gcc-riscv64-unknown-elf&#xA;sudo apt install srecord&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing Emscripten:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~&#xA;git clone https://github.com/emscripten-core/emsdk.git&#xA;cd emsdk&#xA;./emsdk install latest&#xA;./emsdk activate latest&#xA;source ./emsdk_env.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Yosys from source:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~&#xA;sudo apt-get install build-essential clang bison flex libreadline-dev gawk \&#xA;  tcl-dev libffi-dev git graphviz xdot pkg-config python3 libboost-system-dev \&#xA;  libboost-python-dev libboost-filesystem-dev zlib1g-dev&#xA;git clone https://github.com/YosysHQ/yosys&#xA;cd yosys&#xA;make config-gcc&#xA;make -j$(nproc)&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Verilator from source:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~&#xA;sudo apt-get install git perl python3 make autoconf g++ flex bison ccache \&#xA;    libgoogle-perftools-dev numactl perl-doc libfl2 libfl-dev zlib1g zlib1g-dev&#xA;git clone https://github.com/verilator/verilator&#xA;cd verilator&#xA;autoconf&#xA;./configure&#xA;make -j$(nproc)&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the Metron test suite:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.py&#xA;ninja&#xA;./run_tests.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running test coverage:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.py&#xA;ninja&#xA;./run_tests.py --coverage&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>YosysHQ/yosys</title>
    <updated>2022-11-30T01:31:44Z</updated>
    <id>tag:github.com,2022-11-30:/YosysHQ/yosys</id>
    <link href="https://github.com/YosysHQ/yosys" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yosys Open SYnthesis Suite&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;yosys -- Yosys Open SYnthesis Suite&#xA;&#xA;Copyright (C) 2012 - 2020  Claire Xenia Wolf &amp;lt;claire@yosyshq.com&amp;gt;&#xA;&#xA;Permission to use, copy, modify, and/or distribute this software for any&#xA;purpose with or without fee is hereby granted, provided that the above&#xA;copyright notice and this permission notice appear in all copies.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34; AND THE AUTHOR DISCLAIMS ALL WARRANTIES&#xA;WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF&#xA;MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR&#xA;ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES&#xA;WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN&#xA;ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF&#xA;OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;yosys – Yosys Open SYnthesis Suite&lt;/h1&gt; &#xA;&lt;p&gt;This is a framework for RTL synthesis tools. It currently has extensive Verilog-2005 support and provides a basic set of synthesis algorithms for various application domains.&lt;/p&gt; &#xA;&lt;p&gt;Yosys can be adapted to perform any synthesis job by combining the existing passes (algorithms) using synthesis scripts and adding additional passes as needed by extending the yosys C++ code base.&lt;/p&gt; &#xA;&lt;p&gt;Yosys is free software licensed under the ISC license (a GPL compatible license that is similar in terms to the MIT license or the 2-clause BSD license).&lt;/p&gt; &#xA;&lt;h1&gt;Web Site and Other Resources&lt;/h1&gt; &#xA;&lt;p&gt;More information and documentation can be found on the Yosys web site:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yosyshq.net/yosys/&#34;&gt;https://yosyshq.net/yosys/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &#34;Documentation&#34; page on the web site contains links to more resources, including a manual that even describes some of the Yosys internals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yosyshq.net/yosys/documentation.html&#34;&gt;https://yosyshq.net/yosys/documentation.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The directory &lt;code&gt;guidelines&lt;/code&gt; contains additional information for people interested in using the Yosys C++ APIs.&lt;/p&gt; &#xA;&lt;p&gt;Users interested in formal verification might want to use the formal verification front-end for Yosys, SymbiYosys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symbiyosys.readthedocs.io/en/latest/&#34;&gt;https://symbiyosys.readthedocs.io/en/latest/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YosysHQ/SymbiYosys&#34;&gt;https://github.com/YosysHQ/SymbiYosys&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Yosys is part of the &lt;a href=&#34;https://www.yosyshq.com/tabby-cad-datasheet&#34;&gt;Tabby CAD Suite&lt;/a&gt; and the &lt;a href=&#34;https://github.com/YosysHQ/oss-cad-suite-build&#34;&gt;OSS CAD Suite&lt;/a&gt;! The easiest way to use yosys is to install the binary software suite, which contains all required dependencies and related tools.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yosyshq.com/contact&#34;&gt;Contact YosysHQ&lt;/a&gt; for a &lt;a href=&#34;https://www.yosyshq.com/tabby-cad-datasheet&#34;&gt;Tabby CAD Suite&lt;/a&gt; Evaluation License and download link&lt;/li&gt; &#xA; &lt;li&gt;OR go to &lt;a href=&#34;https://github.com/YosysHQ/oss-cad-suite-build/releases&#34;&gt;https://github.com/YosysHQ/oss-cad-suite-build/releases&lt;/a&gt; to download the free OSS CAD Suite&lt;/li&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://github.com/YosysHQ/oss-cad-suite-build#installation&#34;&gt;Install Instructions on GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure to get a Tabby CAD Suite Evaluation License if you need features such as industry-grade SystemVerilog and VHDL parsers!&lt;/p&gt; &#xA;&lt;p&gt;For more information about the difference between Tabby CAD Suite and the OSS CAD Suite, please visit &lt;a href=&#34;https://www.yosyshq.com/tabby-cad-datasheet&#34;&gt;https://www.yosyshq.com/tabby-cad-datasheet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Many Linux distributions also provide Yosys binaries, some more up to date than others. Check with your package manager!&lt;/p&gt; &#xA;&lt;h1&gt;Building from Source&lt;/h1&gt; &#xA;&lt;p&gt;You need a C++ compiler with C++11 support (up-to-date CLANG or GCC is recommended) and some standard tools such as GNU Flex, GNU Bison, and GNU Make. TCL, readline and libffi are optional (see &lt;code&gt;ENABLE_*&lt;/code&gt; settings in Makefile). Xdot (graphviz) is used by the &lt;code&gt;show&lt;/code&gt; command in yosys to display schematics.&lt;/p&gt; &#xA;&lt;p&gt;For example on Ubuntu Linux 16.04 LTS the following commands will install all prerequisites for building yosys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install build-essential clang bison flex \&#xA;&#x9;libreadline-dev gawk tcl-dev libffi-dev git \&#xA;&#x9;graphviz xdot pkg-config python3 libboost-system-dev \&#xA;&#x9;libboost-python-dev libboost-filesystem-dev zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarily, on Mac OS X Homebrew can be used to install dependencies (from within cloned yosys repository):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew tap Homebrew/bundle &amp;amp;&amp;amp; brew bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo port install bison flex readline gawk libffi \&#xA;&#x9;git graphviz pkgconfig python36 boost zlib tcl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD use the following command to install all prerequisites:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# pkg install bison flex readline gawk libffi\&#xA;&#x9;git graphviz pkgconf python3 python36 tcl-wrapper boost-libs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD system use gmake instead of make. To run tests use: % MAKE=gmake CC=cc gmake test&lt;/p&gt; &#xA;&lt;p&gt;For Cygwin use the following command to install all prerequisites, or select these additional packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;setup-x86_64.exe -q --packages=bison,flex,gcc-core,gcc-g++,git,libffi-devel,libreadline-devel,make,pkg-config,python3,tcl-devel,boost-build,zlib-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure the build system to use a specific compiler, use one of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make config-clang&#xA;$ make config-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For other compilers and build configurations it might be necessary to make some changes to the config section of the Makefile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ vi Makefile            # ..or..&#xA;$ vi Makefile.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build Yosys simply type &#39;make&#39; in this directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make&#xA;$ sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this also downloads, builds and installs ABC (using yosys-abc as executable name).&lt;/p&gt; &#xA;&lt;p&gt;Tests are located in the tests subdirectory and can be executed using the test target. Note that you need gawk as well as a recent version of iverilog (i.e. build from git). Then, execute tests via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a separate (out-of-tree) build directory, provide a path to the Makefile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir build; cd build&#xA;$ make -f ../Makefile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Out-of-tree builds require a clean source tree.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Yosys can be used with the interactive command shell, with synthesis scripts or with command line arguments. Let&#39;s perform a simple synthesis job using the interactive command shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./yosys&#xA;yosys&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the command &lt;code&gt;help&lt;/code&gt; can be used to print a list of all available commands and &lt;code&gt;help &amp;lt;command&amp;gt;&lt;/code&gt; to print details on the specified command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yosys&amp;gt; help help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;reading and elaborating the design using the Verilog frontend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yosys&amp;gt; read -sv tests/simple/fiedler-cooley.v&#xA;yosys&amp;gt; hierarchy -top up3down5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;writing the design to the console in Yosys&#39;s internal format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yosys&amp;gt; write_ilang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;convert processes (&lt;code&gt;always&lt;/code&gt; blocks) to netlist elements and perform some simple optimizations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yosys&amp;gt; proc; opt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;display design netlist using &lt;code&gt;xdot&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yosys&amp;gt; show&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the same thing using &lt;code&gt;gv&lt;/code&gt; as postscript viewer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yosys&amp;gt; show -format ps -viewer gv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;translating netlist to gate logic and perform some simple optimizations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yosys&amp;gt; techmap; opt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;write design netlist to a new Verilog file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yosys&amp;gt; write_verilog synth.v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using a simple synthesis script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat synth.ys&#xA;read -sv tests/simple/fiedler-cooley.v&#xA;hierarchy -top up3down5&#xA;proc; opt; techmap; opt&#xA;write_verilog synth.v&#xA;&#xA;$ ./yosys synth.ys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If ABC is enabled in the Yosys build configuration and a cell library is given in the liberty file &lt;code&gt;mycells.lib&lt;/code&gt;, the following synthesis script will synthesize for the given cell library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# read design&#xA;read -sv tests/simple/fiedler-cooley.v&#xA;hierarchy -top up3down5&#xA;&#xA;# the high-level stuff&#xA;proc; fsm; opt; memory; opt&#xA;&#xA;# mapping to internal cell library&#xA;techmap; opt&#xA;&#xA;# mapping flip-flops to mycells.lib&#xA;dfflibmap -liberty mycells.lib&#xA;&#xA;# mapping logic to mycells.lib&#xA;abc -liberty mycells.lib&#xA;&#xA;# cleanup&#xA;clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not have a liberty file but want to test this synthesis script, you can use the file &lt;code&gt;examples/cmos/cmos_cells.lib&lt;/code&gt; from the yosys sources as simple example.&lt;/p&gt; &#xA;&lt;p&gt;Liberty file downloads for and information about free and open ASIC standard cell libraries can be found here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.vlsitechnology.org/html/libraries.html&#34;&gt;http://www.vlsitechnology.org/html/libraries.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.vlsitechnology.org/synopsys/vsclib013.lib&#34;&gt;http://www.vlsitechnology.org/synopsys/vsclib013.lib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The command &lt;code&gt;synth&lt;/code&gt; provides a good default synthesis script (see &lt;code&gt;help synth&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;read -sv tests/simple/fiedler-cooley.v&#xA;synth -top up3down5&#xA;&#xA;# mapping to target cells&#xA;dfflibmap -liberty mycells.lib&#xA;abc -liberty mycells.lib&#xA;clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command &lt;code&gt;prep&lt;/code&gt; provides a good default word-level synthesis script, as used in SMT-based formal verification.&lt;/p&gt; &#xA;&lt;h1&gt;Unsupported Verilog-2005 Features&lt;/h1&gt; &#xA;&lt;p&gt;The following Verilog-2005 features are not supported by Yosys and there are currently no plans to add support for them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Non-synthesizable language features as defined in IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;tri&lt;/code&gt;, &lt;code&gt;triand&lt;/code&gt; and &lt;code&gt;trior&lt;/code&gt; net types&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;config&lt;/code&gt; and &lt;code&gt;disable&lt;/code&gt; keywords and library map files&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Verilog Attributes and non-standard features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;full_case&lt;/code&gt; attribute on case statements is supported (also the non-standard &lt;code&gt;// synopsys full_case&lt;/code&gt; directive)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;parallel_case&lt;/code&gt; attribute on case statements is supported (also the non-standard &lt;code&gt;// synopsys parallel_case&lt;/code&gt; directive)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;// synopsys translate_off&lt;/code&gt; and &lt;code&gt;// synopsys translate_on&lt;/code&gt; directives are also supported (but the use of &lt;code&gt;`ifdef .. `endif&lt;/code&gt; is strongly recommended instead).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;nomem2reg&lt;/code&gt; attribute on modules or arrays prohibits the automatic early conversion of arrays to separate registers. This is potentially dangerous. Usually the front-end has good reasons for converting an array to a list of registers. Prohibiting this step will likely result in incorrect synthesis results.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;mem2reg&lt;/code&gt; attribute on modules or arrays forces the early conversion of arrays to separate registers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;nomeminit&lt;/code&gt; attribute on modules or arrays prohibits the creation of initialized memories. This effectively puts &lt;code&gt;mem2reg&lt;/code&gt; on all memories that are written to in an &lt;code&gt;initial&lt;/code&gt; block and are not ROMs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;nolatches&lt;/code&gt; attribute on modules or always-blocks prohibits the generation of logic-loops for latches. Instead all not explicitly assigned values default to x-bits. This does not affect clocked storage elements such as flip-flops.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;nosync&lt;/code&gt; attribute on registers prohibits the generation of a storage element. The register itself will always have all bits set to &#39;x&#39; (undefined). The variable may only be used as blocking assigned temporary variable within an always block. This is mostly used internally by Yosys to synthesize Verilog functions and access arrays.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;nowrshmsk&lt;/code&gt; attribute on a register prohibits the generation of shift-and-mask type circuits for writing to bit slices of that register.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;onehot&lt;/code&gt; attribute on wires mark them as one-hot state register. This is used for example for memory port sharing and set by the fsm_map pass.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;blackbox&lt;/code&gt; attribute on modules is used to mark empty stub modules that have the same ports as the real thing but do not contain information on the internal configuration. This modules are only used by the synthesis passes to identify input and output ports of cells. The Verilog backend also does not output blackbox modules on default. &lt;code&gt;read_verilog&lt;/code&gt;, unless called with &lt;code&gt;-noblackbox&lt;/code&gt; will automatically set the blackbox attribute on any empty module it reads.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;noblackbox&lt;/code&gt; attribute set on an empty module prevents &lt;code&gt;read_verilog&lt;/code&gt; from automatically setting the blackbox attribute on the module.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;whitebox&lt;/code&gt; attribute on modules triggers the same behavior as &lt;code&gt;blackbox&lt;/code&gt;, but is for whitebox modules, i.e. library modules that contain a behavioral model of the cell type.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;lib_whitebox&lt;/code&gt; attribute overwrites &lt;code&gt;whitebox&lt;/code&gt; when &lt;code&gt;read_verilog&lt;/code&gt; is run in &lt;code&gt;-lib&lt;/code&gt; mode. Otherwise it&#39;s automatically removed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;dynports&lt;/code&gt; attribute is used by the Verilog front-end to mark modules that have ports with a width that depends on a parameter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;hdlname&lt;/code&gt; attribute is used by some passes to document the original (HDL) name of a module when renaming a module. It should contain a single name, or, when describing a hierarchical name in a flattened design, multiple names separated by a single space character.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;keep&lt;/code&gt; attribute on cells and wires is used to mark objects that should never be removed by the optimizer. This is used for example for cells that have hidden connections that are not part of the netlist, such as IO pads. Setting the &lt;code&gt;keep&lt;/code&gt; attribute on a module has the same effect as setting it on all instances of the module.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;keep_hierarchy&lt;/code&gt; attribute on cells and modules keeps the &lt;code&gt;flatten&lt;/code&gt; command from flattening the indicated cells and modules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;init&lt;/code&gt; attribute on wires is set by the frontend when a register is initialized &#34;FPGA-style&#34; with &lt;code&gt;reg foo = val&lt;/code&gt;. It can be used during synthesis to add the necessary reset logic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;top&lt;/code&gt; attribute on a module marks this module as the top of the design hierarchy. The &lt;code&gt;hierarchy&lt;/code&gt; command sets this attribute when called with &lt;code&gt;-top&lt;/code&gt;. Other commands, such as &lt;code&gt;flatten&lt;/code&gt; and various backends use this attribute to determine the top module.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;src&lt;/code&gt; attribute is set on cells and wires created by to the string &lt;code&gt;&amp;lt;hdl-file-name&amp;gt;:&amp;lt;line-number&amp;gt;&lt;/code&gt; by the HDL front-end and is then carried through the synthesis. When entities are combined, a new |-separated string is created that contains all the string from the original entities.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;defaultvalue&lt;/code&gt; attribute is used to store default values for module inputs. The attribute is attached to the input wire by the HDL front-end when the input is declared with a default value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;parameter&lt;/code&gt; and &lt;code&gt;localparam&lt;/code&gt; attributes are used to mark wires that represent module parameters or localparams (when the HDL front-end is run in &lt;code&gt;-pwires&lt;/code&gt; mode).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Wires marked with the &lt;code&gt;hierconn&lt;/code&gt; attribute are connected to wires with the same name (format &lt;code&gt;cell_name.identifier&lt;/code&gt;) when they are imported from sub-modules by &lt;code&gt;flatten&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;clkbuf_driver&lt;/code&gt; attribute can be set on an output port of a blackbox module to mark it as a clock buffer output, and thus prevent &lt;code&gt;clkbufmap&lt;/code&gt; from inserting another clock buffer on a net driven by such output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;clkbuf_sink&lt;/code&gt; attribute can be set on an input port of a module to request clock buffer insertion by the &lt;code&gt;clkbufmap&lt;/code&gt; pass.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;clkbuf_inv&lt;/code&gt; attribute can be set on an output port of a module with the value set to the name of an input port of that module. When the &lt;code&gt;clkbufmap&lt;/code&gt; would otherwise insert a clock buffer on this output, it will instead try inserting the clock buffer on the input port (this is used to implement clock inverter cells that clock buffer insertion will &#34;see through&#34;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;clkbuf_inhibit&lt;/code&gt; is the default attribute to set on a wire to prevent automatic clock buffer insertion by &lt;code&gt;clkbufmap&lt;/code&gt;. This behaviour can be overridden by providing a custom selection to &lt;code&gt;clkbufmap&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;invertible_pin&lt;/code&gt; attribute can be set on a port to mark it as invertible via a cell parameter. The name of the inversion parameter is specified as the value of this attribute. The value of the inversion parameter must be of the same width as the port, with 1 indicating an inverted bit and 0 indicating a non-inverted bit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;iopad_external_pin&lt;/code&gt; attribute on a blackbox module&#39;s port marks it as the external-facing pin of an I/O pad, and prevents &lt;code&gt;iopadmap&lt;/code&gt; from inserting another pad cell on it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The module attribute &lt;code&gt;abc9_lut&lt;/code&gt; is an integer attribute indicating to &lt;code&gt;abc9&lt;/code&gt; that this module describes a LUT with an area cost of this value, and propagation delays described using &lt;code&gt;specify&lt;/code&gt; statements.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The module attribute &lt;code&gt;abc9_box&lt;/code&gt; is a boolean specifying a black/white-box definition, with propagation delays described using &lt;code&gt;specify&lt;/code&gt; statements, for use by &lt;code&gt;abc9&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The port attribute &lt;code&gt;abc9_carry&lt;/code&gt; marks the carry-in (if an input port) and carry-out (if output port) ports of a box. This information is necessary for &lt;code&gt;abc9&lt;/code&gt; to preserve the integrity of carry-chains. Specifying this attribute onto a bus port will affect only its most significant bit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The module attribute &lt;code&gt;abc9_flop&lt;/code&gt; is a boolean marking the module as a flip-flop. This allows &lt;code&gt;abc9&lt;/code&gt; to analyse its contents in order to perform sequential synthesis.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The frontend sets attributes &lt;code&gt;always_comb&lt;/code&gt;, &lt;code&gt;always_latch&lt;/code&gt; and &lt;code&gt;always_ff&lt;/code&gt; on processes derived from SystemVerilog style always blocks according to the type of the always. These are checked for correctness in &lt;code&gt;proc_dlatch&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The cell attribute &lt;code&gt;wildcard_port_conns&lt;/code&gt; represents wildcard port connections (SystemVerilog &lt;code&gt;.*&lt;/code&gt;). These are resolved to concrete connections to matching wires in &lt;code&gt;hierarchy&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In addition to the &lt;code&gt;(* ... *)&lt;/code&gt; attribute syntax, Yosys supports the non-standard &lt;code&gt;{* ... *}&lt;/code&gt; attribute syntax to set default attributes for everything that comes after the &lt;code&gt;{* ... *}&lt;/code&gt; statement. (Reset by adding an empty &lt;code&gt;{* *}&lt;/code&gt; statement.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In module parameter and port declarations, and cell port and parameter lists, a trailing comma is ignored. This simplifies writing Verilog code generators a bit in some cases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Modules can be declared with &lt;code&gt;module mod_name(...);&lt;/code&gt; (with three dots instead of a list of module ports). With this syntax it is sufficient to simply declare a module port as &#39;input&#39; or &#39;output&#39; in the module body.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When defining a macro with `define, all text between triple double quotes is interpreted as macro body, even if it contains unescaped newlines. The triple double quotes are removed from the macro body. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;`define MY_MACRO(a, b) &#34;&#34;&#34;&#xA;   assign a = 23;&#xA;   assign b = 42;&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The attribute &lt;code&gt;via_celltype&lt;/code&gt; can be used to implement a Verilog task or function by instantiating the specified cell type. The value is the name of the cell type to use. For functions the name of the output port can be specified by appending it to the cell type separated by a whitespace. The body of the task or function is unused in this case and can be used to specify a behavioral model of the cell type for simulation. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;module my_add3(A, B, C, Y);&#xA;  parameter WIDTH = 8;&#xA;  input [WIDTH-1:0] A, B, C;&#xA;  output [WIDTH-1:0] Y;&#xA;  ...&#xA;endmodule&#xA;&#xA;module top;&#xA;  ...&#xA;  (* via_celltype = &#34;my_add3 Y&#34; *)&#xA;  (* via_celltype_defparam_WIDTH = 32 *)&#xA;  function [31:0] add3;&#xA;    input [31:0] A, B, C;&#xA;    begin&#xA;      add3 = A + B + C;&#xA;    end&#xA;  endfunction&#xA;  ...&#xA;endmodule&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;wiretype&lt;/code&gt; attribute is added by the verilog parser for wires of a typedef&#39;d type to indicate the type identifier.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Various &lt;code&gt;enum_value_{value}&lt;/code&gt; attributes are added to wires of an enumerated type to give a map of possible enum items to their values.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;enum_base_type&lt;/code&gt; attribute is added to enum items to indicate which enum they belong to (enums -- anonymous and otherwise -- are automatically named with an auto-incrementing counter). Note that enums are currently not strongly typed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A limited subset of DPI-C functions is supported. The plugin mechanism (see &lt;code&gt;help plugin&lt;/code&gt;) can be used to load .so files with implementations of DPI-C routines. As a non-standard extension it is possible to specify a plugin alias using the &lt;code&gt;&amp;lt;alias&amp;gt;:&lt;/code&gt; syntax. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;module dpitest;&#xA;  import &#34;DPI-C&#34; function foo:round = real my_round (real);&#xA;  parameter real r = my_round(12.345);&#xA;endmodule&#xA;&#xA;$ yosys -p &#39;plugin -a foo -i /lib/libm.so; read_verilog dpitest.v&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sized constants (the syntax &lt;code&gt;&amp;lt;size&amp;gt;&#39;s?[bodh]&amp;lt;value&amp;gt;&lt;/code&gt;) support constant expressions as &lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt;. If the expression is not a simple identifier, it must be put in parentheses. Examples: &lt;code&gt;WIDTH&#39;d42&lt;/code&gt;, &lt;code&gt;(4+2)&#39;b101010&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The system tasks &lt;code&gt;$finish&lt;/code&gt;, &lt;code&gt;$stop&lt;/code&gt; and &lt;code&gt;$display&lt;/code&gt; are supported in initial blocks in an unconditional context (only if/case statements on expressions over parameters and constant values are allowed). The intended use for this is synthesis-time DRC.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is limited support for converting &lt;code&gt;specify&lt;/code&gt; .. &lt;code&gt;endspecify&lt;/code&gt; statements to special &lt;code&gt;$specify2&lt;/code&gt;, &lt;code&gt;$specify3&lt;/code&gt;, and &lt;code&gt;$specrule&lt;/code&gt; cells, for use in blackboxes and whiteboxes. Use &lt;code&gt;read_verilog -specify&lt;/code&gt; to enable this functionality. (By default these blocks are ignored.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;reprocess_after&lt;/code&gt; internal attribute is used by the Verilog frontend to mark cells with bindings which might depend on the specified instantiated module. Modules with such cells will be reprocessed during the &lt;code&gt;hierarchy&lt;/code&gt; pass once the referenced module definition(s) become available.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;smtlib2_module&lt;/code&gt; attribute can be set on a blackbox module to specify a formal model directly using SMT-LIB 2. For such a module, the &lt;code&gt;smtlib2_comb_expr&lt;/code&gt; attribute can be used on output ports to define their value using an SMT-LIB 2 expression. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(* blackbox *)&#xA;(* smtlib2_module *)&#xA;module submod(a, b);&#xA;  input [7:0] a;&#xA;  (* smtlib2_comb_expr = &#34;(bvnot a)&#34; *)&#xA;  output [7:0] b;&#xA;endmodule&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Non-standard or SystemVerilog features for formal verification&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for &lt;code&gt;assert&lt;/code&gt;, &lt;code&gt;assume&lt;/code&gt;, &lt;code&gt;restrict&lt;/code&gt;, and &lt;code&gt;cover&lt;/code&gt; is enabled when &lt;code&gt;read_verilog&lt;/code&gt; is called with &lt;code&gt;-formal&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The system task &lt;code&gt;$initstate&lt;/code&gt; evaluates to 1 in the initial state and to 0 otherwise.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The system function &lt;code&gt;$anyconst&lt;/code&gt; evaluates to any constant value. This is equivalent to declaring a reg as &lt;code&gt;rand const&lt;/code&gt;, but also works outside of checkers. (Yosys also supports &lt;code&gt;rand const&lt;/code&gt; outside checkers.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The system function &lt;code&gt;$anyseq&lt;/code&gt; evaluates to any value, possibly a different value in each cycle. This is equivalent to declaring a reg as &lt;code&gt;rand&lt;/code&gt;, but also works outside of checkers. (Yosys also supports &lt;code&gt;rand&lt;/code&gt; variables outside checkers.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The system functions &lt;code&gt;$allconst&lt;/code&gt; and &lt;code&gt;$allseq&lt;/code&gt; can be used to construct formal exist-forall problems. Assumptions only hold if the trace satisfies the assumption for all &lt;code&gt;$allconst/$allseq&lt;/code&gt; values. For assertions and cover statements it is sufficient if just one &lt;code&gt;$allconst/$allseq&lt;/code&gt; value triggers the property (similar to &lt;code&gt;$anyconst/$anyseq&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Wires/registers declared using the &lt;code&gt;anyconst/anyseq/allconst/allseq&lt;/code&gt; attribute (for example &lt;code&gt;(* anyconst *) reg [7:0] foobar;&lt;/code&gt;) will behave as if driven by a &lt;code&gt;$anyconst/$anyseq/$allconst/$allseq&lt;/code&gt; function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The SystemVerilog tasks &lt;code&gt;$past&lt;/code&gt;, &lt;code&gt;$stable&lt;/code&gt;, &lt;code&gt;$rose&lt;/code&gt; and &lt;code&gt;$fell&lt;/code&gt; are supported in any clocked block.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The syntax &lt;code&gt;@($global_clock)&lt;/code&gt; can be used to create FFs that have no explicit clock input (&lt;code&gt;$ff&lt;/code&gt; cells). The same can be achieved by using &lt;code&gt;@(posedge &amp;lt;netname&amp;gt;)&lt;/code&gt; or &lt;code&gt;@(negedge &amp;lt;netname&amp;gt;)&lt;/code&gt; when &lt;code&gt;&amp;lt;netname&amp;gt;&lt;/code&gt; is marked with the &lt;code&gt;(* gclk *)&lt;/code&gt; Verilog attribute.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Supported features from SystemVerilog&lt;/h1&gt; &#xA;&lt;p&gt;When &lt;code&gt;read_verilog&lt;/code&gt; is called with &lt;code&gt;-sv&lt;/code&gt;, it accepts some language features from SystemVerilog:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;assert&lt;/code&gt; statement from SystemVerilog is supported in its most basic form. In module context: &lt;code&gt;assert property (&amp;lt;expression&amp;gt;);&lt;/code&gt; and within an always block: &lt;code&gt;assert(&amp;lt;expression&amp;gt;);&lt;/code&gt;. It is transformed to an &lt;code&gt;$assert&lt;/code&gt; cell.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;assume&lt;/code&gt;, &lt;code&gt;restrict&lt;/code&gt;, and &lt;code&gt;cover&lt;/code&gt; statements from SystemVerilog are also supported. The same limitations as with the &lt;code&gt;assert&lt;/code&gt; statement apply.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The keywords &lt;code&gt;always_comb&lt;/code&gt;, &lt;code&gt;always_ff&lt;/code&gt; and &lt;code&gt;always_latch&lt;/code&gt;, &lt;code&gt;logic&lt;/code&gt; and &lt;code&gt;bit&lt;/code&gt; are supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Declaring free variables with &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;rand const&lt;/code&gt; is supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Checkers without a port list that do not need to be instantiated (but instead behave like a named block) are supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SystemVerilog packages are supported. Once a SystemVerilog file is read into a design with &lt;code&gt;read_verilog&lt;/code&gt;, all its packages are available to SystemVerilog files being read into the same design afterwards.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;typedefs are supported (including inside packages)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;type casts are currently not supported&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;enums are supported (including inside packages)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;but are currently not strongly typed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;packed structs and unions are supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SystemVerilog interfaces (SVIs) are supported. Modports for specifying whether ports are inputs or outputs are supported.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building the documentation&lt;/h1&gt; &#xA;&lt;p&gt;Note that there is no need to build the manual if you just want to read it. Simply download the PDF from &lt;a href=&#34;https://yosyshq.net/yosys/documentation.html&#34;&gt;https://yosyshq.net/yosys/documentation.html&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu, texlive needs these packages to be able to build the manual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install texlive-binaries&#xA;sudo apt-get install texlive-science      # install algorithm2e.sty&#xA;sudo apt-get install texlive-bibtex-extra # gets multibib.sty&#xA;sudo apt-get install texlive-fonts-extra  # gets skull.sty and dsfont.sty&#xA;sudo apt-get install texlive-publishers   # IEEEtran.cls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also the non-free font luximono should be installed, there is unfortunately no Ubuntu package for this so it should be installed separately using &lt;code&gt;getnonfreefonts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://tug.org/fonts/getnonfreefonts/install-getnonfreefonts&#xA;sudo texlua install-getnonfreefonts # will install to /usr/local by default, can be changed by editing BINDIR at MANDIR at the top of the script&#xA;getnonfreefonts luximono # installs to /home/user/texmf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then execute, from the root of the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make manual&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To run &lt;code&gt;make manual&lt;/code&gt; you need to have installed Yosys with &lt;code&gt;make install&lt;/code&gt;, otherwise it will fail on finding &lt;code&gt;kernel/yosys.h&lt;/code&gt; while building &lt;code&gt;PRESENTATION_Prog&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building the website&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re seeing this, it means you are on an as yet unmerged branch (I hope), and the website version of the documentation is not yet publicly available.&lt;/p&gt; &#xA;&lt;p&gt;In addition to those listed above for building Yosys from source, the following packages are used for building the website:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install pdf2svg faketime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PDFLaTeX, included with most LaTeX distributions, is also needed during the build process for the website.&lt;/p&gt; &#xA;&lt;p&gt;The Python package, Sphinx, is needed along with those listed in &lt;code&gt;docs/source/requirements.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install -U sphinx -r docs/source/requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the root of the repository, run &lt;code&gt;make docs&lt;/code&gt;. This will build/rebuild yosys as necessary before generating the website documentation from the yosys help commands. To build for pdf instead of html, call &lt;code&gt;make docs DOC_TARGET=latexpdf&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>