<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-16T01:30:00Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wang-edward/t-juno-copy-v2</title>
    <updated>2022-12-16T01:30:00Z</updated>
    <id>tag:github.com,2022-12-16:/wang-edward/t-juno-copy-v2</id>
    <link href="https://github.com/wang-edward/t-juno-copy-v2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Teensy 3.x/4.x based polyphonic synthesizer, modelled after the Juno-106&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;teensy-juno&lt;/h1&gt; &#xA;&lt;p&gt;A Teensy 3.x/4.x based polyphonic synthesizer, modelled after the Juno-106&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wang-edward/teensy-juno/raw/main/pics/synth_pog.png&#34; alt=&#34;picture of synth&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;8 Voice polyphony&lt;/li&gt; &#xA; &lt;li&gt;Flanger! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Offset, depth, and rate parameters, and presets&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://github.com/wang-edward/teensy-juno/raw/main/pics/synth_arch_poly.png&#34; alt=&#34;gui architecture&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pulse, Saw, Sub, and noise oscillators&lt;/li&gt; &#xA; &lt;li&gt;HPF and LPF with resonance&lt;/li&gt; &#xA; &lt;li&gt;ADSR Envelope&lt;/li&gt; &#xA; &lt;li&gt;Pan&lt;/li&gt; &#xA; &lt;li&gt;Portamento with variable time&lt;/li&gt; &#xA; &lt;li&gt;LFO with delay&lt;/li&gt; &#xA; &lt;li&gt;PWM modulation&lt;/li&gt; &#xA; &lt;li&gt;VCF mod by Envelope, Lfo and Mod Wheel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Coming soon?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hardware&lt;/li&gt; &#xA; &lt;li&gt;vcf key tracking?&lt;/li&gt; &#xA; &lt;li&gt;moog ladder filter emulation (needs teensy 4.0) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;based on (&lt;a href=&#34;http://www.researchgate.net/publication/220386519_Oscillator_and_Filter_Algorithms_for_Virtual_Analog_Synthesis&#34;&gt;www.researchgate.net/publication/220386519_Oscillator_and_Filter_Algorithms_for_Virtual_Analog_Synthesis&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;filter or regular overdrive&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;don&#39;t buy this pcb right now (Feb 2022), there are some errors with clearances lol&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/ThreatExchange</title>
    <updated>2022-12-16T01:30:00Z</updated>
    <id>tag:github.com,2022-12-16:/facebook/ThreatExchange</id>
    <link href="https://github.com/facebook/ThreatExchange" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Share threat information with vetted partners&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Projects in this Repository&lt;/h1&gt; &#xA;&lt;p&gt;This repository originally started as code to support Meta&#39;s ThreatExchange API, but over time has grown to include a number of projects to support signal exchange and content moderation in general. Below are a list of sub-projects.&lt;/p&gt; &#xA;&lt;h2&gt;PDQ Image Hashing and Similarity Matching&lt;/h2&gt; &#xA;&lt;p&gt;PDQ is a photo hashing algorithm that can turn photos into 256 bit signatures which can then be used to match other photos.&lt;/p&gt; &#xA;&lt;h2&gt;TMK+PDQF (TMK) Video Hashing and Similarity Matching&lt;/h2&gt; &#xA;&lt;p&gt;TMK+PDQF (or TMK for short) is a video hashing algorithm that can turn videos into 256KB signatures which can be used to match other videos.&lt;/p&gt; &#xA;&lt;h2&gt;[Coming Soon] Video PDQ (vPDQ) Video Hashing and Similarity Matching&lt;/h2&gt; &#xA;&lt;p&gt;Video PDQ (or vPDQ for short) is a simple video hashing algorithm that determines two videos are matching based on the amount of shared similar frames. It can easily be applied for other image algorithms, and not just PDQ.&lt;/p&gt; &#xA;&lt;h2&gt;Hasher-Matcher-Actioner (HMA) Trust &amp;amp; Safety Platform&lt;/h2&gt; &#xA;&lt;p&gt;HMA is a ready-to-deploy content moderation project for AWS, containing many submodules. It allows you to maintain lists of known content to scan for, which you can either curate yourself or connect to other hash exchange programs to share and recieve lists. More can be found &lt;a href=&#34;https://github.com/facebook/ThreatExchange/wiki&#34;&gt;at the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;python-threatexchange&lt;/h2&gt; &#xA;&lt;p&gt;A python Library/CLI tool available on pypi under &lt;code&gt;threatexchange&lt;/code&gt; which provides implementations for content scanning and signal exchange. It provides reference implementations in python for downloading hashes from Meta&#39;s ThreatExchange API, scanning images with PDQ, and others. It can also be easily extended to work with other hash exchanges and other techniques, not all of which are written by the maintainers of this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Meta&#39;s ThreatExchange API Reference Examples&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;api-reference-examples&lt;/code&gt; folder contains example implementations in various languages for using the API. These implementations are at various stages of completeness and may not all implement every endpoint available on the ThreatExchange API. For full details on the ThreatExchange API and UI, data formats, and best practices are available in the &lt;a href=&#34;https://developers.facebook.com/docs/threat-exchange/&#34;&gt;ThreatExchange docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Meta&#39;s ThreatExchange API&lt;/h1&gt; &#xA;&lt;p&gt;ThreatExchange is a set of RESTful APIs on the Facebook Platform for querying, publishing, and sharing security threat information. It&#39;s a lightweight way for exchanging details on malware, phishing pages, and other threats with either specific members of the community or the ThreatExchange community at large.&lt;/p&gt; &#xA;&lt;p&gt;For full details on ThreatExchange and best practices are available in the ThreatExchange docs.&lt;/p&gt; &#xA;&lt;h2&gt;Get All Available Data&lt;/h2&gt; &#xA;&lt;p&gt;For tag-driven workloads, supporting either bulk download or incremental updates, our currently recommended best practice is a &lt;a href=&#34;https://github.com/facebook/ThreatExchange/raw/main/api-reference-examples/java/te-tag-query/README.md&#34;&gt;Java reference design&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also explore the dataset using the hosted &lt;a href=&#34;https://developers.facebook.com/docs/threat-exchange/ui&#34;&gt;ThreatExchange UI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Access&lt;/h2&gt; &#xA;&lt;p&gt;To request access to ThreatExchange, please submit an application via &lt;a href=&#34;https://developers.facebook.com/products/threat-exchange/&#34;&gt;https://developers.facebook.com/products/threat-exchange/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Other Information about this Repository&lt;/h1&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! See &lt;a href=&#34;https://github.com/facebook/ThreatExchange/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details on how to get started, and our &lt;a href=&#34;https://github.com/facebook/ThreatExchange/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All projects in this repository are under the BSD license - see &lt;a href=&#34;https://github.com/facebook/ThreatExchange/raw/main/LICENSE&#34;&gt;./LICENSE&lt;/a&gt;. However, there are some exceptions for files that were included for demonstration purposes, and their alternative licenses are noted at the top of the files themselves.&lt;/p&gt; &#xA;&lt;p&gt;As of 12/9/2021, this is the complete list of exceptions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pdq/cpp/CImg.h&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>include-what-you-use/include-what-you-use</title>
    <updated>2022-12-16T01:30:00Z</updated>
    <id>tag:github.com,2022-12-16:/include-what-you-use/include-what-you-use</id>
    <link href="https://github.com/include-what-you-use/include-what-you-use" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool for use with clang to analyze #includes in C and C++ source files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Include What You Use&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/include-what-you-use/include-what-you-use/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/include-what-you-use/include-what-you-use/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;IWYU CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more in-depth documentation, see &lt;a href=&#34;https://raw.githubusercontent.com/include-what-you-use/include-what-you-use/master/docs&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions for users&lt;/h2&gt; &#xA;&lt;p&gt;&#34;Include what you use&#34; means this: for every symbol (type, function, variable, or macro) that you use in &lt;code&gt;foo.cc&lt;/code&gt; (or &lt;code&gt;foo.cpp&lt;/code&gt;), either &lt;code&gt;foo.cc&lt;/code&gt; or &lt;code&gt;foo.h&lt;/code&gt; should include a .h file that exports the declaration of that symbol. (Similarly, for &lt;code&gt;foo_test.cc&lt;/code&gt;, either &lt;code&gt;foo_test.cc&lt;/code&gt; or &lt;code&gt;foo.h&lt;/code&gt; should do the including.) Obviously symbols defined in &lt;code&gt;foo.cc&lt;/code&gt; itself are excluded from this requirement.&lt;/p&gt; &#xA;&lt;p&gt;This puts us in a state where every file includes the headers it needs to declare the symbols that it uses. When every file includes what it uses, then it is possible to edit any file and remove unused headers, without fear of accidentally breaking the upwards dependencies of that file. It also becomes easy to automatically track and update dependencies in the source code.&lt;/p&gt; &#xA;&lt;h3&gt;CAVEAT&lt;/h3&gt; &#xA;&lt;p&gt;This is alpha quality software -- at best (as of July 2018). It was originally written to work specifically in the Google source tree, and may make assumptions, or have gaps, that are immediately and embarrassingly evident in other types of code.&lt;/p&gt; &#xA;&lt;p&gt;While we work to get IWYU quality up, we will be stinting new features, and will prioritize reported bugs along with the many existing, known bugs. The best chance of getting a problem fixed is to submit a patch that fixes it (along with a test case that verifies the fix)!&lt;/p&gt; &#xA;&lt;h3&gt;Clang compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Include-what-you-use makes heavy use of Clang internals, and will occasionally break when Clang is updated. We build IWYU regularly against Clang mainline to detect and fix such compatibility breaks as soon as possible.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: the IWYU master branch follows Clang main branch.&lt;/p&gt; &#xA;&lt;p&gt;We also have convenience tags and branches for released versions of Clang (called &lt;code&gt;clang_&amp;lt;version&amp;gt;&lt;/code&gt;, e.g. &lt;code&gt;clang_5.0&lt;/code&gt;). To build against a Clang release, check out the corresponding branch in IWYU before configuring the build. You can use this mapping table to combine Clang and IWYU versions correctly:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Clang&lt;/th&gt; &#xA;   &lt;th&gt;IWYU version&lt;/th&gt; &#xA;   &lt;th&gt;IWYU branch&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.6&lt;/td&gt; &#xA;   &lt;td&gt;0.4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_3.6&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.7&lt;/td&gt; &#xA;   &lt;td&gt;0.5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_3.7&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.8&lt;/td&gt; &#xA;   &lt;td&gt;0.6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_3.8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.9&lt;/td&gt; &#xA;   &lt;td&gt;0.7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_3.9&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.0&lt;/td&gt; &#xA;   &lt;td&gt;0.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_4.0-r2&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.0&lt;/td&gt; &#xA;   &lt;td&gt;0.9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_5.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;0.10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_6.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;0.11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_7.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;0.12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_8.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;0.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_9.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;0.14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_10&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;0.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_11&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;0.16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_12&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;0.17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_13&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;0.18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_14&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;0.19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clang_15&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;main&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;master&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: If you use the Debian/Ubuntu packaging available from &lt;a href=&#34;https://apt.llvm.org&#34;&gt;https://apt.llvm.org&lt;/a&gt;, you&#39;ll need the following packages installed:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;llvm-&amp;lt;version&amp;gt;-dev&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;libclang-&amp;lt;version&amp;gt;-dev&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;clang-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Packaging for other platforms will likely be subtly different.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;How to build standalone&lt;/h3&gt; &#xA;&lt;p&gt;This build mode assumes you already have compiled LLVM and Clang libraries on your system, either via packages for your platform or built from source. To set up an environment for building IWYU:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a directory for IWYU development, e.g. &lt;code&gt;iwyu&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the IWYU Git repo:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;iwyu$ git clone https://github.com/include-what-you-use/include-what-you-use.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Presumably, you&#39;ll be building IWYU with a released version of LLVM and Clang, so check out the corresponding branch. For example, if you have Clang 6.0 installed, use the &lt;code&gt;clang_6.0&lt;/code&gt; branch. IWYU &lt;code&gt;master&lt;/code&gt; tracks LLVM &amp;amp; Clang &lt;code&gt;main&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;iwyu$ cd include-what-you-use&#xA;iwyu/include-what-you-use$ git checkout clang_6.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a build root and use CMake to generate a build system linked with LLVM/Clang prebuilts:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# This example uses the Makefile generator, but anything should work.&#xA;iwyu/include-what-you-use$ cd ..&#xA;iwyu$ mkdir build &amp;amp;&amp;amp; cd build&#xA;&#xA;# For IWYU 0.10/Clang 6 and earlier&#xA;iwyu/build$ cmake -G &#34;Unix Makefiles&#34; -DIWYU_LLVM_ROOT_PATH=/usr/lib/llvm-6.0 ../include-what-you-use&#xA;&#xA;# For IWYU 0.11/Clang 7 and later&#xA;iwyu/build$ cmake -G &#34;Unix Makefiles&#34; -DCMAKE_PREFIX_PATH=/usr/lib/llvm-7 ../include-what-you-use&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(substitute the &lt;code&gt;llvm-6.0&lt;/code&gt; or &lt;code&gt;llvm-7&lt;/code&gt; suffixes with the actual version compatible with your IWYU branch)&lt;/p&gt; &lt;p&gt;or, if you have a local LLVM and Clang build tree, you can specify that as &lt;code&gt;CMAKE_PREFIX_PATH&lt;/code&gt; for IWYU 0.11 and later:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;iwyu/build$ cmake -G &#34;Unix Makefiles&#34; -DCMAKE_PREFIX_PATH=~/llvm-project/build ../include-what-you-use&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once CMake has generated a build system, you can invoke it directly from &lt;code&gt;build&lt;/code&gt;, e.g.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;iwyu/build$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to build as part of LLVM&lt;/h3&gt; &#xA;&lt;p&gt;Instructions for building LLVM and Clang are available at &lt;a href=&#34;https://clang.llvm.org/get_started.html&#34;&gt;https://clang.llvm.org/get_started.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To include IWYU in the LLVM build, use the &lt;code&gt;LLVM_EXTERNAL_PROJECTS&lt;/code&gt; and &lt;code&gt;LLVM_EXTERNAL_*_SOURCE_DIR&lt;/code&gt; CMake variables when configuring LLVM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  llvm-project/build$ cmake -G &#34;Unix Makefiles&#34; -DLLVM_ENABLE_PROJECTS=clang -DLLVM_EXTERNAL_PROJECTS=iwyu -DLLVM_EXTERNAL_IWYU_SOURCE_DIR=/path/to/iwyu /path/to/llvm-project/llvm&#xA;  llvm-project/build$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds all of LLVM, Clang and IWYU in a single tree.&lt;/p&gt; &#xA;&lt;h3&gt;How to install&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re building IWYU out-of-tree or installing pre-built binaries, you need to make sure it can find Clang built-in headers (&lt;code&gt;stdarg.h&lt;/code&gt; and friends.)&lt;/p&gt; &#xA;&lt;p&gt;Clang&#39;s default policy is to look in &lt;code&gt;path/to/clang-executable/../lib/clang/&amp;lt;clang ver&amp;gt;/include&lt;/code&gt;. So if Clang 3.5.0 is installed in &lt;code&gt;/usr/bin&lt;/code&gt;, it will search for built-ins in &lt;code&gt;/usr/lib/clang/3.5.0/include&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Clang tools have the same policy by default, so in order for IWYU to analyze any non-trivial code, it needs to find Clang&#39;s built-ins in &lt;code&gt;path/to/iwyu/../lib/clang/3.5.0/include&lt;/code&gt; where &lt;code&gt;3.5.0&lt;/code&gt; is a stand-in for the version of Clang your IWYU was built against.&lt;/p&gt; &#xA;&lt;p&gt;Note that some distributions/packages may have different defaults, you can use &lt;code&gt;clang -print-resource-dir&lt;/code&gt; to find the base path of the built-in headers on your system.&lt;/p&gt; &#xA;&lt;p&gt;So for IWYU to function correctly, you need to copy the Clang &lt;code&gt;include&lt;/code&gt; directory to the expected location before running (similarly, use &lt;code&gt;include-what-you-use -print-resource-dir&lt;/code&gt; to learn exactly where IWYU wants the headers).&lt;/p&gt; &#xA;&lt;p&gt;This weirdness is tracked in &lt;a href=&#34;https://github.com/include-what-you-use/include-what-you-use/issues/100&#34;&gt;issue 100&lt;/a&gt;, hopefully we can make this more transparent over time.&lt;/p&gt; &#xA;&lt;h3&gt;How to run&lt;/h3&gt; &#xA;&lt;p&gt;The original design was built for Make, but a number of alternative run modes have come up over the years.&lt;/p&gt; &#xA;&lt;h4&gt;Running on single source file&lt;/h4&gt; &#xA;&lt;p&gt;The simplest way to use IWYU is to run it against a single source file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  include-what-you-use $CXXFLAGS myfile.cc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;$CXXFLAGS&lt;/code&gt; are the flags you would normally pass to the compiler.&lt;/p&gt; &#xA;&lt;h4&gt;Plugging into existing build system&lt;/h4&gt; &#xA;&lt;p&gt;Typically there is already a build system containing the relevant compiler flags for all source files. Replace your compiler with &lt;code&gt;include-what-you-use&lt;/code&gt; to generate a large batch of IWYU advice. Depending on your build system/build tools, this can take many forms, but for a simple GNU Make system it might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  make -k CXX=include-what-you-use CXXFLAGS=&#34;-Xiwyu --error_always&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(The additional &lt;code&gt;-Xiwyu --error_always&lt;/code&gt; switch makes &lt;code&gt;include-what-you-use&lt;/code&gt; always exit with an error code, so the build system knows it didn&#39;t build a .o file. Hence the need for &lt;code&gt;-k&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;In this mode &lt;code&gt;include-what-you-use&lt;/code&gt; only analyzes the .cc (or .cpp) files known to your build system, along with their corresponding .h files. If your project has a .h file with no corresponding .cc file, IWYU will ignore it unless you use the &lt;code&gt;--check_also&lt;/code&gt; switch to add it for analysis together with a .cc file. It is possible to run IWYU against individual header files, provided the compiler flags are carefully constructed to match all includers.&lt;/p&gt; &#xA;&lt;h4&gt;Using with CMake&lt;/h4&gt; &#xA;&lt;p&gt;CMake has grown native support for IWYU as of version 3.3. See &lt;a href=&#34;https://cmake.org/cmake/help/latest/prop_tgt/LANG_INCLUDE_WHAT_YOU_USE.html&#34;&gt;their documentation&lt;/a&gt; for CMake-side details.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;CMAKE_CXX_INCLUDE_WHAT_YOU_USE&lt;/code&gt; option enables a mode where CMake first compiles a source file, and then runs IWYU on it.&lt;/p&gt; &#xA;&lt;p&gt;Use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mkdir build &amp;amp;&amp;amp; cd build&#xA;  CC=&#34;clang&#34; CXX=&#34;clang++&#34; cmake -DCMAKE_CXX_INCLUDE_WHAT_YOU_USE=include-what-you-use ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, on Windows systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mkdir build &amp;amp;&amp;amp; cd build&#xA;  cmake -DCMAKE_CXX_COMPILER=&#34;%VCINSTALLDIR%/bin/cl.exe&#34; -DCMAKE_CXX_INCLUDE_WHAT_YOU_USE=include-what-you-use -G Ninja ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These examples assume that &lt;code&gt;include-what-you-use&lt;/code&gt; is in the &lt;code&gt;PATH&lt;/code&gt;. If it isn&#39;t, consider changing the value to an absolute path. Arguments to IWYU can be added using CMake&#39;s semicolon-separated list syntax, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ... cmake -DCMAKE_CXX_INCLUDE_WHAT_YOU_USE=&#34;include-what-you-use;-w;-Xiwyu;--verbose=7&#34; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The option appears to be separately supported for both C and C++, so use &lt;code&gt;CMAKE_C_INCLUDE_WHAT_YOU_USE&lt;/code&gt; for C code.&lt;/p&gt; &#xA;&lt;p&gt;Note that with Microsoft&#39;s Visual C++ compiler, IWYU needs the &lt;code&gt;--driver-mode=cl&lt;/code&gt; argument to understand the MSVC options from CMake.&lt;/p&gt; &#xA;&lt;h4&gt;Using with a compilation database&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;iwyu_tool.py&lt;/code&gt; script pre-dates the native CMake support, and works off the &lt;a href=&#34;https://clang.llvm.org/docs/JSONCompilationDatabase.html&#34;&gt;compilation database format&lt;/a&gt;. For example, CMake generates such a database named &lt;code&gt;compile_commands.json&lt;/code&gt; with the &lt;code&gt;CMAKE_EXPORT_COMPILE_COMMANDS&lt;/code&gt; option enabled.&lt;/p&gt; &#xA;&lt;p&gt;The script&#39;s command-line syntax is designed to mimic Clang&#39;s LibTooling, but they are otherwise unrelated. It can be used like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mkdir build &amp;amp;&amp;amp; cd build&#xA;  CC=&#34;clang&#34; CXX=&#34;clang++&#34; cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ...&#xA;  iwyu_tool.py -p .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, on Windows systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mkdir build &amp;amp;&amp;amp; cd build&#xA;  cmake -DCMAKE_CXX_COMPILER=&#34;%VCINSTALLDIR%/bin/cl.exe&#34; -DCMAKE_C_COMPILER=&#34;%VCINSTALLDIR%/VC/bin/cl.exe&#34; -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja ...&#xA;  python iwyu_tool.py -p .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless a source filename is provided, all files in the project will be analyzed.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;iwyu_tool.py --help&lt;/code&gt; for more options.&lt;/p&gt; &#xA;&lt;h4&gt;Applying fixes&lt;/h4&gt; &#xA;&lt;p&gt;We also include a tool that automatically fixes up your source files based on the IWYU recommendations. This is also alpha-quality software! Here&#39;s how to use it (requires python):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  make -k CXX=include-what-you-use CXXFLAGS=&#34;-Xiwyu --error_always&#34; 2&amp;gt; /tmp/iwyu.out&#xA;  python fix_includes.py &amp;lt; /tmp/iwyu.out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t like the way &lt;code&gt;fix_includes.py&lt;/code&gt; munges your &lt;code&gt;#include&lt;/code&gt; lines, you can control its behavior via flags. &lt;code&gt;fix_includes.py --help&lt;/code&gt; will give a full list, but these are some common ones:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-b&lt;/code&gt;: Put blank lines between system and Google includes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--nocomments&lt;/code&gt;: Don&#39;t add the &#39;why&#39; comments next to includes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to correct IWYU mistakes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If &lt;code&gt;fix_includes.py&lt;/code&gt; has removed an &lt;code&gt;#include&lt;/code&gt; you actually need, add it back in with the comment &#39;&lt;code&gt;// IWYU pragma: keep&lt;/code&gt;&#39; at the end of the &lt;code&gt;#include&lt;/code&gt; line. Note that the comment is case-sensitive.&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;fix_includes.py&lt;/code&gt; has added an &lt;code&gt;#include&lt;/code&gt; you don&#39;t need, just take it out. We hope to come up with a more permanent way of fixing later.&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;fix_includes.py&lt;/code&gt; has wrongly added or removed a forward-declare, just fix it up manually.&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;fix_includes.py&lt;/code&gt; has suggested a private header file (such as &lt;code&gt;&amp;lt;bits/stl_vector.h&amp;gt;&lt;/code&gt;) instead of the proper public header file (&lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;), you can fix this by inserting a specially crafted comment near top of the private file (assuming you can write to it): &#39;&lt;code&gt;// IWYU pragma: private, include &#34;the/public/file.h&#34;&lt;/code&gt;&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Current IWYU pragmas are described in &lt;a href=&#34;https://raw.githubusercontent.com/include-what-you-use/include-what-you-use/master/docs/IWYUPragmas.md&#34;&gt;IWYUPragmas&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>