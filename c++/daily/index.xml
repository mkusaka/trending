<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-27T01:27:19Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Dr-TSNG/ZygiskNext</title>
    <updated>2023-10-27T01:27:19Z</updated>
    <id>tag:github.com,2023-10-27:/Dr-TSNG/ZygiskNext</id>
    <link href="https://github.com/Dr-TSNG/ZygiskNext" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standalone implementation of Zygisk&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zygisk Next&lt;/h1&gt; &#xA;&lt;p&gt;Standalone implementation of Zygisk, providing Zygisk API support for KernelSU and a replacement of Magisk&#39;s built-in Zygisk.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No multiple root implementation installed&lt;/li&gt; &#xA; &lt;li&gt;SELinux enforcing: Zygisk Next rely on SELinux to prevent &lt;code&gt;vold&lt;/code&gt; from aborting our fuse connection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;KernelSU&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimal KernelSU version: 10940&lt;/li&gt; &#xA; &lt;li&gt;Minimal ksud version: 10942&lt;/li&gt; &#xA; &lt;li&gt;Kernel has full SELinux patch support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Magisk&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimal version: 26300&lt;/li&gt; &#xA; &lt;li&gt;Built-in Zygisk turned off&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;PROCESS_ON_DENYLIST&lt;/code&gt; cannot be flagged correctly for isolated processes on Magisk DenyList currently.&lt;/p&gt; &#xA;&lt;p&gt;Zygisk Next only guarantees the same behavior of Zygisk API, but will NOT ensure Magisk&#39;s internal features.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/nsjail</title>
    <updated>2023-10-27T01:27:19Z</updated>
    <id>tag:github.com,2023-10-27:/google/nsjail</id>
    <link href="https://github.com/google/nsjail" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight process isolation tool that utilizes Linux namespaces, cgroups, rlimits and seccomp-bpf syscall filters, leveraging the Kafel BPF language for enhanced security.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#what-forms-of-isolation-does-it-provide&#34;&gt;What forms of isolation does it provide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Which use-cases are supported &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#isolation-of-network-services-inetd-style&#34;&gt;Isolation of network services (inetd style)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#isolation-with-access-to-a-private-cloned-interface-requires-rootsetuid&#34;&gt;Isolation with access to a private, cloned interface (requires root/setuid)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#isolation-of-local-processes&#34;&gt;Isolation of local processes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#isolation-of-local-processes-and-re-running-them-if-necessary&#34;&gt;Isolation of local processes (and re-running them, if necessary)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Examples of use &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#bash-in-a-minimal-file-system-with-uid0-and-access-to-devurandom-only&#34;&gt;Bash in a minimal file-system with uid==0 and access to /dev/urandom only&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#usrbinfind-in-a-minimal-file-system-only-usrbinfind-accessible-from-usrbin&#34;&gt;/usr/bin/find in a minimal file-system (only /usr/bin/find accessible from /usr/bin)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#using-etcsubuid&#34;&gt;Using /etc/subuid&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#even-more-contrained-shell-with-seccomp-bpf-policies&#34;&gt;Even more contrained shell (with seccomp-bpf policies)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#configuration-file&#34;&gt;Configuration file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#more-info&#34;&gt;More info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#launching-in-docker&#34;&gt;Launching in Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This is NOT an official Google product.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;NsJail is a process isolation tool for Linux. It utilizes Linux namespace subsystem, resource limits, and the seccomp-bpf syscall filters of the Linux kernel.&lt;/p&gt; &#xA;&lt;p&gt;It can help you with (among other things):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Isolating &lt;strong&gt;networking services&lt;/strong&gt; (e.g. web, time, DNS), by isolating them from the rest of the OS&lt;/li&gt; &#xA; &lt;li&gt;Hosting computer security challenges (so-called &lt;strong&gt;CTFs&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Containing invasive syscall-level OS &lt;strong&gt;fuzzers&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Offers three &lt;strong&gt;distinct operational modes&lt;/strong&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#which-use-cases-are-supported&#34;&gt;this section&lt;/a&gt; for more info.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Utilizes &lt;a href=&#34;https://github.com/google/kafel/&#34;&gt;kafel seccomp-bpf configuration language&lt;/a&gt; for &lt;strong&gt;flexible syscall policy definitions&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Uses expressive, ProtoBuf-based &lt;a href=&#34;https://raw.githubusercontent.com/google/nsjail/master/#configuration-file&#34;&gt;configuration file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; It&#39;s &lt;strong&gt;rock-solid&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;What forms of isolation does it provide&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Linux &lt;strong&gt;namespaces&lt;/strong&gt;: UTS (hostname), MOUNT (chroot), PID (separate PID tree), IPC, NET (separate networking context), USER, CGROUPS&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FS constraints&lt;/strong&gt;: chroot(), pivot_root(), RO-remounting, custom &lt;code&gt;/proc&lt;/code&gt; and &lt;code&gt;tmpfs&lt;/code&gt; mount points&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resource limits&lt;/strong&gt; (wall-time/CPU time limits, VM/mem address space limits, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Programmable seccomp-bpf &lt;strong&gt;syscall filters&lt;/strong&gt; (through the &lt;a href=&#34;https://github.com/google/kafel/&#34;&gt;kafel language&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Cloned and isolated &lt;strong&gt;Ethernet interfaces&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cgroups&lt;/strong&gt; for memory and PID utilization control&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Which use-cases are supported&lt;/h3&gt; &#xA;&lt;h4&gt;Isolation of network services (inetd style)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;PS: You&#39;ll need to have a valid file-system tree in &lt;code&gt;/chroot&lt;/code&gt;. If you don&#39;t have it, change &lt;code&gt;/chroot&lt;/code&gt; to &lt;code&gt;/&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Server:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&#xA; $ ./nsjail -Ml --port 9000 --chroot /chroot/ --user 99999 --group 99999 -- /bin/sh -i&#xA;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Client:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&#xA; $ nc 127.0.0.1 9000&#xA; / $ ifconfig&#xA; / $ ifconfig -a&#xA; lo    Link encap:Local Loopback&#xA;       LOOPBACK  MTU:65536  Metric:1&#xA;       RX packets:0 errors:0 dropped:0 overruns:0 frame:0&#xA;       TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0&#xA;       RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)&#xA; / $ ps wuax&#xA; PID   USER     COMMAND&#xA; 1 99999    /bin/sh -i&#xA; 3 99999    {busybox} ps wuax&#xA; / $&#xA;&#xA;&lt;/pre&gt; &#xA;&lt;h4&gt;Isolation with access to a private, cloned interface (requires root/setuid)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;PS: You&#39;ll need to have a valid file-system tree in &lt;code&gt;/chroot&lt;/code&gt;. If you don&#39;t have it, change &lt;code&gt;/chroot&lt;/code&gt; to &lt;code&gt;/&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;$ sudo ./nsjail --user 9999 --group 9999 --macvlan_iface eth0 --chroot /chroot/ -Mo --macvlan_vs_ip 192.168.0.44 --macvlan_vs_nm 255.255.255.0 --macvlan_vs_gw 192.168.0.1 -- /bin/sh -i&#xA;/ $ id&#xA;uid=9999 gid=9999&#xA;/ $ ip addr sh&#xA;1: lo: &#xA; &lt;loopback,up,lower_up&gt;&#xA;   mtu 65536 qdisc noqueue &#xA;    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00&#xA;    inet 127.0.0.1/8 scope host lo&#xA;       valid_lft forever preferred_lft forever&#xA;    inet6 ::1/128 scope host &#xA;       valid_lft forever preferred_lft forever&#xA;2: vs: &#xA;  &lt;broadcast,multicast,up,lower_up&gt;&#xA;    mtu 1500 qdisc noqueue link/ether ca:a2:69:21:33:66 brd ff:ff:ff:ff:ff:ff inet 192.168.0.44/24 brd 192.168.0.255 scope global vs valid_lft forever preferred_lft forever inet6 fe80::c8a2:69ff:fe21:cd66/64 scope link valid_lft forever preferred_lft forever / $ nc 217.146.165.209 80 GET / HTTP/1.0 HTTP/1.0 302 Found Cache-Control: private Content-Type: text/html; charset=UTF-8 Location: https://www.google.ch/?gfe_rd=cr&amp;amp;ei=cEzWVrG2CeTI8ge88ofwDA Content-Length: 258 Date: Wed, 02 Mar 2016 02:14:08 GMT ... ... / $ &#xA;  &lt;/broadcast,multicast,up,lower_up&gt;&#xA; &lt;/loopback,up,lower_up&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Isolation of local processes&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;PS: You&#39;ll need to have a valid file-system tree in &lt;code&gt;/chroot&lt;/code&gt;. If you don&#39;t have it, change &lt;code&gt;/chroot&lt;/code&gt; to &lt;code&gt;/&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA; $ ./nsjail -Mo --chroot /chroot/ --user 99999 --group 99999 -- /bin/sh -i&#xA; / $ ifconfig -a&#xA; lo    Link encap:Local Loopback&#xA;       LOOPBACK  MTU:65536  Metric:1&#xA;       RX packets:0 errors:0 dropped:0 overruns:0 frame:0&#xA;       TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0&#xA;       RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)&#xA; / $ id&#xA; uid=99999 gid=99999&#xA; / $ ps wuax&#xA; PID   USER     COMMAND&#xA; 1 99999    /bin/sh -i&#xA; 4 99999    {busybox} ps wuax&#xA; / $exit&#xA; $&#xA;&lt;/pre&gt; &#xA;&lt;h4&gt;Isolation of local processes (and re-running them, if necessary)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;PS: You&#39;ll need to have a valid file-system tree in &lt;code&gt;/chroot&lt;/code&gt;. If you don&#39;t have it, change &lt;code&gt;/chroot&lt;/code&gt; to &lt;code&gt;/&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA; $ ./nsjail -Mr --chroot /chroot/ --user 99999 --group 99999 -- /bin/sh -i&#xA; BusyBox v1.21.1 (Ubuntu 1:1.21.0-1ubuntu1) built-in shell (ash)&#xA; Enter &#39;help&#39; for a list of built-in commands.&#xA; / $ ps wuax&#xA; PID   USER     COMMAND&#xA; 1 99999    /bin/sh -i&#xA; 2 99999    {busybox} ps wuax&#xA; / $ exit&#xA; BusyBox v1.21.1 (Ubuntu 1:1.21.0-1ubuntu1) built-in shell (ash)&#xA; Enter &#39;help&#39; for a list of built-in commands.&#xA; / $ ps wuax&#xA; PID   USER     COMMAND&#xA; 1 99999    /bin/sh -i&#xA; 2 99999    {busybox} ps wuax&#xA; / $&#xA;&lt;/pre&gt; &#xA;&lt;h3&gt;Bash in a minimal file-system with uid==0 and access to /dev/urandom only&lt;/h3&gt; &#xA;&lt;pre&gt;&#xA;$ ./nsjail -Mo --user 0 --group 99999 -R /bin/ -R /lib -R /lib64/ -R /usr/ -R /sbin/ -T /dev -R /dev/urandom --keep_caps -- /bin/bash -i&#xA;[2017-05-24T17:08:02+0200] Mode: STANDALONE_ONCE&#xA;[2017-05-24T17:08:02+0200] Jail parameters: hostname:&#39;NSJAIL&#39;, chroot:&#39;(null)&#39;, process:&#39;/bin/bash&#39;, bind:[::]:0, max_conns_per_ip:0, time_limit:0, personality:0, daemonize:false, clone_newnet:true, clone_newuser:true, clone_newns:true, clone_newpid:true, clone_newipc:true, clonew_newuts:true, clone_newcgroup:false, keep_caps:true, tmpfs_size:4194304, disable_no_new_privs:false, pivot_root_only:false&#xA;[2017-05-24T17:08:02+0200] Mount point: src:&#39;none&#39; dst:&#39;/&#39; type:&#39;tmpfs&#39; flags:MS_RDONLY|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:08:02+0200] Mount point: src:&#39;none&#39; dst:&#39;/proc&#39; type:&#39;proc&#39; flags:MS_RDONLY|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:08:02+0200] Mount point: src:&#39;/bin/&#39; dst:&#39;/bin/&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:08:02+0200] Mount point: src:&#39;/lib&#39; dst:&#39;/lib&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:08:02+0200] Mount point: src:&#39;/lib64/&#39; dst:&#39;/lib64/&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:08:02+0200] Mount point: src:&#39;/usr/&#39; dst:&#39;/usr/&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:08:02+0200] Mount point: src:&#39;/sbin/&#39; dst:&#39;/sbin/&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:08:02+0200] Mount point: src:&#39;none&#39; dst:&#39;/dev&#39; type:&#39;tmpfs&#39; flags:0 options:&#39;size=4194304&#39; isDir:True&#xA;[2017-05-24T17:08:02+0200] Mount point: src:&#39;/dev/urandom&#39; dst:&#39;/dev/urandom&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:False&#xA;[2017-05-24T17:08:02+0200] Uid map: inside_uid:0 outside_uid:69664&#xA;[2017-05-24T17:08:02+0200] Gid map: inside_gid:99999 outside_gid:5000&#xA;[2017-05-24T17:08:02+0200] Executing &#39;/bin/bash&#39; for &#39;[STANDALONE_MODE]&#39;&#xA;bash: cannot set terminal process group (-1): Inappropriate ioctl for device&#xA;bash: no job control in this shell&#xA;bash-4.3# ls -l&#xA;total 28&#xA;drwxr-xr-x   2 65534 65534  4096 May 15 14:04 bin&#xA;drwxrwxrwt   2     0 99999    60 May 24 15:08 dev&#xA;drwxr-xr-x  28 65534 65534  4096 May 15 14:10 lib&#xA;drwxr-xr-x   2 65534 65534  4096 May 15 13:56 lib64&#xA;dr-xr-xr-x 391 65534 65534     0 May 24 15:08 proc&#xA;drwxr-xr-x   2 65534 65534 12288 May 15 14:16 sbin&#xA;drwxr-xr-x  17 65534 65534  4096 May 15 13:58 usr&#xA;bash-4.3# id&#xA;uid=0 gid=99999 groups=65534,99999&#xA;bash-4.3# exit&#xA;exit&#xA;[2017-05-24T17:08:05+0200] PID: 129839 exited with status: 0, (PIDs left: 0)&#xA;&lt;/pre&gt; &#xA;&lt;h3&gt;/usr/bin/find in a minimal file-system (only /usr/bin/find accessible from /usr/bin)&lt;/h3&gt; &#xA;&lt;pre&gt;&#xA;$ ./nsjail -Mo --user 99999 --group 99999 -R /lib/x86_64-linux-gnu/ -R /lib/x86_64-linux-gnu -R /lib64 -R /usr/bin/find -R /dev/urandom --keep_caps -- /usr/bin/find / | wc -l&#xA;[2017-05-24T17:04:37+0200] Mode: STANDALONE_ONCE&#xA;[2017-05-24T17:04:37+0200] Jail parameters: hostname:&#39;NSJAIL&#39;, chroot:&#39;(null)&#39;, process:&#39;/usr/bin/find&#39;, bind:[::]:0, max_conns_per_ip:0, time_limit:0, personality:0, daemonize:false, clone_newnet:true, clone_newuser:true, clone_newns:true, clone_newpid:true, clone_newipc:true, clonew_newuts:true, clone_newcgroup:false, keep_caps:true, tmpfs_size:4194304, disable_no_new_privs:false, pivot_root_only:false&#xA;[2017-05-24T17:04:37+0200] Mount point: src:&#39;none&#39; dst:&#39;/&#39; type:&#39;tmpfs&#39; flags:MS_RDONLY|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:04:37+0200] Mount point: src:&#39;none&#39; dst:&#39;/proc&#39; type:&#39;proc&#39; flags:MS_RDONLY|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:04:37+0200] Mount point: src:&#39;/lib/x86_64-linux-gnu/&#39; dst:&#39;/lib/x86_64-linux-gnu/&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:04:37+0200] Mount point: src:&#39;/lib/x86_64-linux-gnu&#39; dst:&#39;/lib/x86_64-linux-gnu&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:04:37+0200] Mount point: src:&#39;/lib64&#39; dst:&#39;/lib64&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:04:37+0200] Mount point: src:&#39;/usr/bin/find&#39; dst:&#39;/usr/bin/find&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:False&#xA;[2017-05-24T17:04:37+0200] Mount point: src:&#39;/dev/urandom&#39; dst:&#39;/dev/urandom&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:False&#xA;[2017-05-24T17:04:37+0200] Uid map: inside_uid:99999 outside_uid:69664&#xA;[2017-05-24T17:04:37+0200] Gid map: inside_gid:99999 outside_gid:5000&#xA;[2017-05-24T17:04:37+0200] Executing &#39;/usr/bin/find&#39; for &#39;[STANDALONE_MODE]&#39;&#xA;/usr/bin/find: `/proc/tty/driver&#39;: Permission denied&#xA;2289&#xA;[2017-05-24T17:04:37+0200] PID: 129525 exited with status: 1, (PIDs left: 0)&#xA;&lt;/pre&gt; &#xA;&lt;h3&gt;Using /etc/subuid&lt;/h3&gt; &#xA;&lt;pre&gt;&#xA;$ tail -n1 /etc/subuid&#xA;user:10000000:1&#xA;$ ./nsjail -R /lib -R /lib64/ -R /usr/lib -R /usr/bin/ -R /usr/sbin/ -R /bin/ -R /sbin/ -R /dev/null -U 0:10000000:1 -u 0 -R /tmp/ -T /tmp/ -- /bin/ls -l /usr/&#xA;[2017-05-24T17:12:31+0200] Mode: STANDALONE_ONCE&#xA;[2017-05-24T17:12:31+0200] Jail parameters: hostname:&#39;NSJAIL&#39;, chroot:&#39;(null)&#39;, process:&#39;/bin/ls&#39;, bind:[::]:0, max_conns_per_ip:0, time_limit:0, personality:0, daemonize:false, clone_newnet:true, clone_newuser:true, clone_newns:true, clone_newpid:true, clone_newipc:true, clonew_newuts:true, clone_newcgroup:false, keep_caps:false, tmpfs_size:4194304, disable_no_new_privs:false, pivot_root_only:false&#xA;[2017-05-24T17:12:31+0200] Mount point: src:&#39;none&#39; dst:&#39;/&#39; type:&#39;tmpfs&#39; flags:MS_RDONLY|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:12:31+0200] Mount point: src:&#39;none&#39; dst:&#39;/proc&#39; type:&#39;proc&#39; flags:MS_RDONLY|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:12:31+0200] Mount point: src:&#39;/lib&#39; dst:&#39;/lib&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:12:31+0200] Mount point: src:&#39;/lib64/&#39; dst:&#39;/lib64/&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:12:31+0200] Mount point: src:&#39;/usr/lib&#39; dst:&#39;/usr/lib&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:12:31+0200] Mount point: src:&#39;/usr/bin/&#39; dst:&#39;/usr/bin/&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:12:31+0200] Mount point: src:&#39;/usr/sbin/&#39; dst:&#39;/usr/sbin/&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:12:31+0200] Mount point: src:&#39;/bin/&#39; dst:&#39;/bin/&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:12:31+0200] Mount point: src:&#39;/sbin/&#39; dst:&#39;/sbin/&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:12:31+0200] Mount point: src:&#39;/dev/null&#39; dst:&#39;/dev/null&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:False&#xA;[2017-05-24T17:12:31+0200] Mount point: src:&#39;/tmp/&#39; dst:&#39;/tmp/&#39; type:&#39;&#39; flags:MS_RDONLY|MS_BIND|MS_REC|0 options:&#39;&#39; isDir:True&#xA;[2017-05-24T17:12:31+0200] Mount point: src:&#39;none&#39; dst:&#39;/tmp/&#39; type:&#39;tmpfs&#39; flags:0 options:&#39;size=4194304&#39; isDir:True&#xA;[2017-05-24T17:12:31+0200] Uid map: inside_uid:0 outside_uid:69664&#xA;[2017-05-24T17:12:31+0200] Gid map: inside_gid:5000 outside_gid:5000&#xA;[2017-05-24T17:12:31+0200] Newuid mapping: inside_uid:&#39;0&#39; outside_uid:&#39;10000000&#39; count:&#39;1&#39;&#xA;[2017-05-24T17:12:31+0200] Executing &#39;/bin/ls&#39; for &#39;[STANDALONE_MODE]&#39;&#xA;total 120&#xA;drwxr-xr-x   5 65534 65534 77824 May 24 12:25 bin&#xA;drwxr-xr-x 210 65534 65534 20480 May 22 16:11 lib&#xA;drwxr-xr-x   4 65534 65534 20480 May 24 00:24 sbin&#xA;[2017-05-24T17:12:31+0200] PID: 130841 exited with status: 0, (PIDs left: 0)&#xA;&lt;/pre&gt; &#xA;&lt;h3&gt;Even more contrained shell (with seccomp-bpf policies)&lt;/h3&gt; &#xA;&lt;pre&gt;&#xA;$ ./nsjail --chroot / --seccomp_string &#39;ALLOW { write, execve, brk, access, mmap, open, openat, newfstat, close, read, mprotect, arch_prctl, munmap, getuid, getgid, getpid, rt_sigaction, geteuid, getppid, getcwd, getegid, ioctl, fcntl, newstat, clone, wait4, rt_sigreturn, exit_group } DEFAULT KILL&#39; -- /bin/sh -i&#xA;[2017-01-15T21:53:08+0100] Mode: STANDALONE_ONCE&#xA;[2017-01-15T21:53:08+0100] Jail parameters: hostname:&#39;NSJAIL&#39;, chroot:&#39;/&#39;, process:&#39;/bin/sh&#39;, bind:[::]:0, max_conns_per_ip:0, uid:(ns:1000, global:1000), gid:(ns:1000, global:1000), time_limit:0, personality:0, daemonize:false, clone_newnet:true, clone_newuser:true, clone_newns:true, clone_newpid:true, clone_newipc:true, clonew_newuts:true, clone_newcgroup:false, keep_caps:false, tmpfs_size:4194304, disable_no_new_privs:false, pivot_root_only:false&#xA;[2017-01-15T21:53:08+0100] Mount point: src:&#39;/&#39; dst:&#39;/&#39; type:&#39;&#39; flags:0x5001 options:&#39;&#39;&#xA;[2017-01-15T21:53:08+0100] Mount point: src:&#39;(null)&#39; dst:&#39;/proc&#39; type:&#39;proc&#39; flags:0x0 options:&#39;&#39;&#xA;[2017-01-15T21:53:08+0100] PID: 18873 about to execute &#39;/bin/sh&#39; for [STANDALONE_MODE]&#xA;/bin/sh: 0: can&#39;t access tty; job control turned off&#xA;$ set&#xA;IFS=&#39;&#xA;&#39;&#xA;OPTIND=&#39;1&#39;&#xA;PATH=&#39;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#39;&#xA;PPID=&#39;0&#39;&#xA;PS1=&#39;$ &#39;&#xA;PS2=&#39;&amp;gt; &#39;&#xA;PS4=&#39;+ &#39;&#xA;PWD=&#39;/&#39;&#xA;$ id&#xA;Bad system call&#xA;$ exit&#xA;[2017-01-15T21:53:17+0100] PID: 18873 exited with status: 159, (PIDs left: 0)&#xA;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Configuration file&lt;/h3&gt; &#xA;&lt;p&gt;You will also find all examples in the &lt;a href=&#34;https://github.com/google/nsjail/raw/master/configs&#34;&gt;configs&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/nsjail/raw/master/config.proto&#34;&gt;config.proto&lt;/a&gt; contains ProtoBuf schema for nsjail&#39;s configuration format.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;You can examine an example config file in &lt;a href=&#34;https://github.com/google/nsjail/raw/master/configs/bash-with-fake-geteuid.cfg&#34;&gt;configs/bash-with-fake-geteuid.cfg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;$ ./nsjail --config configs/bash-with-fake-geteuid.cfg&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;You can also override certain options with command-line options. Here, the executed binary (&lt;em&gt;/bin/bash&lt;/em&gt;) is overriden with &lt;em&gt;/usr/bin/id&lt;/em&gt;, yet options from &lt;em&gt;configs/bash-with-fake-geteuid.cfg&lt;/em&gt; still apply&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;$ ./nsjail --config configs/bash-with-fake-geteuid.cfg -- /usr/bin/id&#xA;...&#xA;[INSIDE-JAIL]: id&#xA;uid=999999 gid=999998 euid=4294965959 groups=999998,65534&#xA;[INSIDE-JAIL]: exit&#xA;[2017-05-27T18:45:40+0200] PID: 16579 exited with status: 0, (PIDs left: 0)&#xA;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;You might also want to try using &lt;a href=&#34;https://github.com/google/nsjail/raw/master/configs/home-documents-with-xorg-no-net.cfg&#34;&gt;configs/home-documents-with-xorg-no-net.cfg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;$ ./nsjail --config configs/home-documents-with-xorg-no-net.cfg -- /usr/bin/evince /user/Documents/doc.pdf&#xA;$ ./nsjail --config configs/home-documents-with-xorg-no-net.cfg -- /usr/bin/geeqie /user/Documents/&#xA;$ ./nsjail --config configs/home-documents-with-xorg-no-net.cfg -- /usr/bin/gv /user/Documents/doc.pdf&#xA;$ ./nsjail --config configs/home-documents-with-xorg-no-net.cfg -- /usr/bin/mupdf /user/Documents/doc.pdf&#xA;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/google/nsjail/raw/master/configs/firefox-with-net.cfg&#34;&gt;configs/firefox-with-net.cfg&lt;/a&gt; config file will allow you to run firefox inside a sandboxed environment:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;$ ./nsjail --config configs/firefox-with-net.cfg&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;A more complex setup, which utilizes virtualized (cloned) Ethernet interfaces (to separate it from the main network namespace), can be found in &lt;a href=&#34;https://github.com/google/nsjail/raw/master/configs/firefox-with-cloned-net.cfg&#34;&gt;configs/firefox-with-cloned-net.cfg&lt;/a&gt;. Remember to change relevant UIDs and Ethernet interface names before use.&lt;/p&gt; &#xA;&lt;p&gt;As using cloned Ethernet interfaces (MACVTAP) required root privileges, you&#39;ll have to run it under sudo:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;$ sudo ./nsjail --config configs/firefox-with-cloned-net.cfg&#xA;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;More info&lt;/h3&gt; &#xA;&lt;p&gt;The command-line options should be self-explanatory, while the proto-buf config options are described in &lt;a href=&#34;https://github.com/google/nsjail/raw/master/config.proto&#34;&gt;config.proto&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;./nsjail --help&#xA;&lt;/pre&gt; &#xA;&lt;pre&gt;&#xA; Usage: ./nsjail [options] -- path_to_command [args]&#xA; Options:&#xA;  --help|-h &#xA; &#x9;Help plz..&#xA;  --mode|-M VALUE&#xA; &#x9;Execution mode (default: &#39;o&#39; [MODE_STANDALONE_ONCE]):&#xA;&#x9;l: Wait for connections on a TCP port (specified with --port) [MODE_LISTEN_TCP]&#xA;&#x9;o: Launch a single process on the console using clone/execve [MODE_STANDALONE_ONCE]&#xA;&#x9;e: Launch a single process on the console using execve [MODE_STANDALONE_EXECVE]&#xA;&#x9;r: Launch a single process on the console with clone/execve, keep doing it forever [MODE_STANDALONE_RERUN]&#xA;  --config|-C VALUE&#xA; &#x9;Configuration file in the config.proto ProtoBuf format (see configs/ directory for examples)&#xA;  --exec_file|-x VALUE&#xA; &#x9;File to exec (default: argv[0])&#xA;  --execute_fd &#xA; &#x9;Use execveat() to execute a file-descriptor instead of executing the binary path. In such case argv[0]/exec_file denotes a file path before mount namespacing&#xA;  --chroot|-c VALUE&#xA; &#x9;Directory containing / of the jail (default: none)&#xA;  --no_pivotroot &#xA; &#x9;When creating a mount namespace, use mount(MS_MOVE) and chroot rather than pivot_root. Usefull when pivot_root is disallowed (e.g. initramfs). Note: escapable is some configuration&#xA;  --rw &#xA; &#x9;Mount chroot dir (/) R/W (default: R/O)&#xA;  --user|-u VALUE&#xA; &#x9;Username/uid of processes inside the jail (default: your current uid). You can also use inside_ns_uid:outside_ns_uid:count convention here. Can be specified multiple times&#xA;  --group|-g VALUE&#xA; &#x9;Groupname/gid of processes inside the jail (default: your current gid). You can also use inside_ns_gid:global_ns_gid:count convention here. Can be specified multiple times&#xA;  --hostname|-H VALUE&#xA; &#x9;UTS name (hostname) of the jail (default: &#39;NSJAIL&#39;)&#xA;  --cwd|-D VALUE&#xA; &#x9;Directory in the namespace the process will run (default: &#39;/&#39;)&#xA;  --port|-p VALUE&#xA; &#x9;TCP port to bind to (enables MODE_LISTEN_TCP) (default: 0)&#xA;  --bindhost VALUE&#xA; &#x9;IP address to bind the port to (only in [MODE_LISTEN_TCP]), (default: &#39;::&#39;)&#xA;  --max_conns VALUE&#xA; &#x9;Maximum number of connections across all IPs (only in [MODE_LISTEN_TCP]), (default: 0 (unlimited))&#xA;  --max_conns_per_ip|-i VALUE&#xA; &#x9;Maximum number of connections per one IP (only in [MODE_LISTEN_TCP]), (default: 0 (unlimited))&#xA;  --log|-l VALUE&#xA; &#x9;Log file (default: use log_fd)&#xA;  --log_fd|-L VALUE&#xA; &#x9;Log FD (default: 2)&#xA;  --time_limit|-t VALUE&#xA; &#x9;Maximum time that a jail can exist, in seconds (default: 600)&#xA;  --max_cpus VALUE&#xA; &#x9;Maximum number of CPUs a single jailed process can use (default: 0 &#39;no limit&#39;)&#xA;  --daemon|-d &#xA; &#x9;Daemonize after start&#xA;  --verbose|-v &#xA; &#x9;Verbose output&#xA;  --quiet|-q &#xA; &#x9;Log warning and more important messages only&#xA;  --really_quiet|-Q &#xA; &#x9;Log fatal messages only&#xA;  --keep_env|-e &#xA; &#x9;Pass all environment variables to the child process (default: all envars are cleared)&#xA;  --env|-E VALUE&#xA; &#x9;Additional environment variable (can be used multiple times). If the envar doesn&#39;t contain &#39;=&#39; (e.g. just the &#39;DISPLAY&#39; string), the current envar value will be used&#xA;  --keep_caps &#xA; &#x9;Don&#39;t drop any capabilities&#xA;  --cap VALUE&#xA; &#x9;Retain this capability, e.g. CAP_PTRACE (can be specified multiple times)&#xA;  --silent &#xA; &#x9;Redirect child process&#39; fd:0/1/2 to /dev/null&#xA;  --stderr_to_null &#xA; &#x9;Redirect child process&#39; fd:2 (STDERR_FILENO) to /dev/null&#xA;  --skip_setsid &#xA; &#x9;Don&#39;t call setsid(), allows for terminal signal handling in the sandboxed process. Dangerous&#xA;  --pass_fd VALUE&#xA; &#x9;Don&#39;t close this FD before executing the child process (can be specified multiple times), by default: 0/1/2 are kept open&#xA;  --disable_no_new_privs &#xA; &#x9;Don&#39;t set the prctl(NO_NEW_PRIVS, 1) (DANGEROUS)&#xA;  --rlimit_as VALUE&#xA; &#x9;RLIMIT_AS in MB, &#39;max&#39; or &#39;hard&#39; for the current hard limit, &#39;def&#39; or &#39;soft&#39; for the current soft limit, &#39;inf&#39; for RLIM64_INFINITY (default: 4096)&#xA;  --rlimit_core VALUE&#xA; &#x9;RLIMIT_CORE in MB, &#39;max&#39; or &#39;hard&#39; for the current hard limit, &#39;def&#39; or &#39;soft&#39; for the current soft limit, &#39;inf&#39; for RLIM64_INFINITY (default: 0)&#xA;  --rlimit_cpu VALUE&#xA; &#x9;RLIMIT_CPU, &#39;max&#39; or &#39;hard&#39; for the current hard limit, &#39;def&#39; or &#39;soft&#39; for the current soft limit, &#39;inf&#39; for RLIM64_INFINITY (default: 600)&#xA;  --rlimit_fsize VALUE&#xA; &#x9;RLIMIT_FSIZE in MB, &#39;max&#39; or &#39;hard&#39; for the current hard limit, &#39;def&#39; or &#39;soft&#39; for the current soft limit, &#39;inf&#39; for RLIM64_INFINITY (default: 1)&#xA;  --rlimit_nofile VALUE&#xA; &#x9;RLIMIT_NOFILE, &#39;max&#39; or &#39;hard&#39; for the current hard limit, &#39;def&#39; or &#39;soft&#39; for the current soft limit, &#39;inf&#39; for RLIM64_INFINITY (default: 32)&#xA;  --rlimit_nproc VALUE&#xA; &#x9;RLIMIT_NPROC, &#39;max&#39; or &#39;hard&#39; for the current hard limit, &#39;def&#39; or &#39;soft&#39; for the current soft limit, &#39;inf&#39; for RLIM64_INFINITY (default: &#39;soft&#39;)&#xA;  --rlimit_stack VALUE&#xA; &#x9;RLIMIT_STACK in MB, &#39;max&#39; or &#39;hard&#39; for the current hard limit, &#39;def&#39; or &#39;soft&#39; for the current soft limit, &#39;inf&#39; for RLIM64_INFINITY (default: &#39;soft&#39;)&#xA;  --rlimit_memlock VALUE&#xA; &#x9;RLIMIT_MEMLOCK in KB, &#39;max&#39; or &#39;hard&#39; for the current hard limit, &#39;def&#39; or &#39;soft&#39; for the current soft limit, &#39;inf&#39; for RLIM64_INFINITY (default: &#39;soft&#39;)&#xA;  --rlimit_rtprio VALUE&#xA; &#x9;RLIMIT_RTPRIO, &#39;max&#39; or &#39;hard&#39; for the current hard limit, &#39;def&#39; or &#39;soft&#39; for the current soft limit, &#39;inf&#39; for RLIM64_INFINITY (default: &#39;soft&#39;)&#xA;  --rlimit_msgqueue VALUE&#xA; &#x9;RLIMIT_MSGQUEUE in bytes, &#39;max&#39; or &#39;hard&#39; for the current hard limit, &#39;def&#39; or &#39;soft&#39; for the current soft limit, &#39;inf&#39; for RLIM64_INFINITY (default: &#39;soft&#39;)&#xA;  --disable_rlimits &#xA; &#x9;Disable all rlimits, default to limits set by parent&#xA;  --persona_addr_compat_layout &#xA; &#x9;personality(ADDR_COMPAT_LAYOUT)&#xA;  --persona_mmap_page_zero &#xA; &#x9;personality(MMAP_PAGE_ZERO)&#xA;  --persona_read_implies_exec &#xA; &#x9;personality(READ_IMPLIES_EXEC)&#xA;  --persona_addr_limit_3gb &#xA; &#x9;personality(ADDR_LIMIT_3GB)&#xA;  --persona_addr_no_randomize &#xA; &#x9;personality(ADDR_NO_RANDOMIZE)&#xA;  --disable_clone_newnet|-N &#xA; &#x9;Don&#39;t use CLONE_NEWNET. Enable global networking inside the jail&#xA;  --disable_clone_newuser &#xA; &#x9;Don&#39;t use CLONE_NEWUSER. Requires euid==0&#xA;  --disable_clone_newns &#xA; &#x9;Don&#39;t use CLONE_NEWNS&#xA;  --disable_clone_newpid &#xA; &#x9;Don&#39;t use CLONE_NEWPID&#xA;  --disable_clone_newipc &#xA; &#x9;Don&#39;t use CLONE_NEWIPC&#xA;  --disable_clone_newuts &#xA; &#x9;Don&#39;t use CLONE_NEWUTS&#xA;  --disable_clone_newcgroup &#xA; &#x9;Don&#39;t use CLONE_NEWCGROUP. Might be required for kernel versions &amp;lt; 4.6&#xA;  --enable_clone_newtime &#xA; &#x9;Use CLONE_NEWTIME. Supported with kernel versions &amp;gt;= 5.3&#xA;  --uid_mapping|-U VALUE&#xA; &#x9;Add a custom uid mapping of the form inside_uid:outside_uid:count. Setting this requires newuidmap (set-uid) to be present&#xA;  --gid_mapping|-G VALUE&#xA; &#x9;Add a custom gid mapping of the form inside_gid:outside_gid:count. Setting this requires newgidmap (set-uid) to be present&#xA;  --bindmount_ro|-R VALUE&#xA; &#x9;List of mountpoints to be mounted --bind (ro) inside the container. Can be specified multiple times. Supports &#39;source&#39; syntax, or &#39;source:dest&#39;&#xA;  --bindmount|-B VALUE&#xA; &#x9;List of mountpoints to be mounted --bind (rw) inside the container. Can be specified multiple times. Supports &#39;source&#39; syntax, or &#39;source:dest&#39;&#xA;  --tmpfsmount|-T VALUE&#xA; &#x9;List of mountpoints to be mounted as tmpfs (R/W) inside the container. Can be specified multiple times. Supports &#39;dest&#39; syntax. Alternatively, use &#39;-m none:dest:tmpfs:size=8388608&#39;&#xA;  --mount|-m VALUE&#xA; &#x9;Arbitrary mount, format src:dst:fs_type:options&#xA;  --symlink|-s VALUE&#xA; &#x9;Symlink, format src:dst&#xA;  --disable_proc &#xA; &#x9;Disable mounting procfs in the jail&#xA;  --proc_path VALUE&#xA; &#x9;Path used to mount procfs (default: &#39;/proc&#39;)&#xA;  --proc_rw &#xA; &#x9;Is procfs mounted as R/W (default: R/O)&#xA;  --seccomp_policy|-P VALUE&#xA; &#x9;Path to file containing seccomp-bpf policy (see kafel/)&#xA;  --seccomp_string VALUE&#xA; &#x9;String with kafel seccomp-bpf policy (see kafel/)&#xA;  --seccomp_log &#xA; &#x9;Use SECCOMP_FILTER_FLAG_LOG. Log all actions except SECCOMP_RET_ALLOW). Supported since kernel version 4.14&#xA;  --nice_level VALUE&#xA; &#x9;Set jailed process niceness (-20 is highest -priority, 19 is lowest). By default, set to 19&#xA;  --cgroup_mem_max VALUE&#xA; &#x9;Maximum number of bytes to use in the group (default: &#39;0&#39; - disabled)&#xA;  --cgroup_mem_memsw_max VALUE&#xA; &#x9;Maximum number of memory+swap bytes to use (default: &#39;0&#39; - disabled)&#xA;  --cgroup_mem_swap_max VALUE&#xA; &#x9;Maximum number of swap bytes to use (default: &#39;-1&#39; - disabled)&#xA;  --cgroup_mem_mount VALUE&#xA; &#x9;Location of memory cgroup FS (default: &#39;/sys/fs/cgroup/memory&#39;)&#xA;  --cgroup_mem_parent VALUE&#xA; &#x9;Which pre-existing memory cgroup to use as a parent (default: &#39;NSJAIL&#39;)&#xA;  --cgroup_pids_max VALUE&#xA; &#x9;Maximum number of pids in a cgroup (default: &#39;0&#39; - disabled)&#xA;  --cgroup_pids_mount VALUE&#xA; &#x9;Location of pids cgroup FS (default: &#39;/sys/fs/cgroup/pids&#39;)&#xA;  --cgroup_pids_parent VALUE&#xA; &#x9;Which pre-existing pids cgroup to use as a parent (default: &#39;NSJAIL&#39;)&#xA;  --cgroup_net_cls_classid VALUE&#xA; &#x9;Class identifier of network packets in the group (default: &#39;0&#39; - disabled)&#xA;  --cgroup_net_cls_mount VALUE&#xA; &#x9;Location of net_cls cgroup FS (default: &#39;/sys/fs/cgroup/net_cls&#39;)&#xA;  --cgroup_net_cls_parent VALUE&#xA; &#x9;Which pre-existing net_cls cgroup to use as a parent (default: &#39;NSJAIL&#39;)&#xA;  --cgroup_cpu_ms_per_sec VALUE&#xA; &#x9;Number of milliseconds of CPU time per second that the process group can use (default: &#39;0&#39; - no limit)&#xA;  --cgroup_cpu_mount VALUE&#xA; &#x9;Location of cpu cgroup FS (default: &#39;/sys/fs/cgroup/cpu&#39;)&#xA;  --cgroup_cpu_parent VALUE&#xA; &#x9;Which pre-existing cpu cgroup to use as a parent (default: &#39;NSJAIL&#39;)&#xA;  --cgroupv2_mount VALUE&#xA; &#x9;Location of cgroupv2 directory (default: &#39;/sys/fs/cgroup&#39;)&#xA;  --use_cgroupv2 &#xA; &#x9;Use cgroup v2&#xA;  --detect_cgroupv2 &#xA; &#x9;Use cgroupv2, if it is available. (Specify instead of use_cgroupv2)&#xA;  --iface_no_lo &#xA; &#x9;Don&#39;t bring the &#39;lo&#39; interface up&#xA;  --iface_own VALUE&#xA; &#x9;Move this existing network interface into the new NET namespace. Can be specified multiple times&#xA;  --macvlan_iface|-I VALUE&#xA; &#x9;Interface which will be cloned (MACVLAN) and put inside the subprocess&#39; namespace as &#39;vs&#39;&#xA;  --macvlan_vs_ip VALUE&#xA; &#x9;IP of the &#39;vs&#39; interface (e.g. &#34;192.168.0.1&#34;)&#xA;  --macvlan_vs_nm VALUE&#xA; &#x9;Netmask of the &#39;vs&#39; interface (e.g. &#34;255.255.255.0&#34;)&#xA;  --macvlan_vs_gw VALUE&#xA; &#x9;Default GW for the &#39;vs&#39; interface (e.g. &#34;192.168.0.1&#34;)&#xA;  --macvlan_vs_ma VALUE&#xA; &#x9;MAC-address of the &#39;vs&#39; interface (e.g. &#34;ba:ad:ba:be:45:00&#34;)&#xA;  --macvlan_vs_mo VALUE&#xA; &#x9;Mode of the &#39;vs&#39; interface. Can be either &#39;private&#39;, &#39;vepa&#39;, &#39;bridge&#39; or &#39;passthru&#39; (default: &#39;private&#39;)&#xA;  --disable_tsc &#xA; &#x9;Disable rdtsc and rdtscp instructions. WARNING: To make it effective, you also need to forbid `prctl(PR_SET_TSC, PR_TSC_ENABLE, ...)` in seccomp rules! (x86 and x86_64 only). Dynamic binaries produced by GCC seem to rely on RDTSC, but static ones should work.&#xA;  --forward_signals &#xA; &#x9;Forward fatal signals to the child process instead of always using SIKGILL.&#xA; &#xA; Examples: &#xA;  Wait on a port 31337 for connections, and run /bin/sh&#xA;   nsjail -Ml --port 31337 --chroot / -- /bin/sh -i&#xA;  Re-run echo command as a sub-process&#xA;   nsjail -Mr --chroot / -- /bin/echo &#34;ABC&#34;&#xA;  Run echo command once only, as a sub-process&#xA;   nsjail -Mo --chroot / -- /bin/echo &#34;ABC&#34;&#xA;  Execute echo command directly, without a supervising process&#xA;   nsjail -Me --chroot / --disable_proc -- /bin/echo &#34;ABC&#34;&#xA;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Launching in Docker&lt;/h3&gt; &#xA;&lt;p&gt;To launch nsjail in a docker container clone the repository and build the docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;docker build -t nsjailcontainer .&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;This will build up an image containing njsail and kafel.&lt;/p&gt; &#xA;&lt;p&gt;From now you can either use it in another Dockerfile (&lt;code&gt;FROM nsjailcontainer&lt;/code&gt;) or directly:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;docker run --privileged --rm -it nsjailcontainer nsjail --user 99999 --group 99999 --disable_proc --chroot / --time_limit 30 /bin/bash&#xA;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User mailing list: &lt;a href=&#34;mailto:nsjail@googlegroups.com&#34;&gt;nsjail@googlegroups.com&lt;/a&gt;, sign up with this &lt;a href=&#34;https://groups.google.com/forum/#!forum/nsjail&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Sergeanur/MGSResolutionPatch</title>
    <updated>2023-10-27T01:27:19Z</updated>
    <id>tag:github.com,2023-10-27:/Sergeanur/MGSResolutionPatch</id>
    <link href="https://github.com/Sergeanur/MGSResolutionPatch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MGSResolutionPatch&lt;/h1&gt; &#xA;&lt;p&gt;This is an experimental ASI Plugin for Steam releases of Metal Gear Solid 2 and Metal Gear Solid 3. It allows to change ingame resolution via ini config.&lt;/p&gt; &#xA;&lt;p&gt;Recommended for play with MGS 3 at resolutions 1920x1080, 2560x1440 and 3840x2160. The plugin is compatible with MGS 2, however increased resolution introduces noticeable bugs to the UI. Resolutions other than above mentioned are not guaranteed to produce an adequate image (it might be stretched), but I didn&#39;t test every possible resolution that is out there, so you might as well try whatever resolution you want.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest Ultimate ASI Loader from here: &lt;a href=&#34;https://github.com/ThirteenAG/Ultimate-ASI-Loader/releases/download/x64-latest/d3d11-x64.zip&#34;&gt;https://github.com/ThirteenAG/Ultimate-ASI-Loader/releases/download/x64-latest/d3d11-x64.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Put d3d11.dll from Ultimate ASI Loader into your MGS2/MGS3 directory&lt;/li&gt; &#xA; &lt;li&gt;Download the latest MGSResolutionPatch from here: &lt;a href=&#34;https://github.com/Sergeanur/MGSResolutionPatch/releases&#34;&gt;https://github.com/Sergeanur/MGSResolutionPatch/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Put MGSResolutionPatch.asi and MGSResolutionPatch.ini into your MGS2/MGS3 directory&lt;/li&gt; &#xA; &lt;li&gt;Open MGSResolutionPatch.ini with a text editor to change the resolution to the one you desire&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>