<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-02T01:31:52Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tjfenwick/DIY-Sim-Racing-Active-Pedal</title>
    <updated>2023-05-02T01:31:52Z</updated>
    <id>tag:github.com,2023-05-02:/tjfenwick/DIY-Sim-Racing-Active-Pedal</id>
    <link href="https://github.com/tjfenwick/DIY-Sim-Racing-Active-Pedal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is my Sim Racing DIY Active Pedal prototype, an affordable alternative to the official Simucube pedals that cost over $2,000 per pedal.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;WORK IN INPROGRESS NOT A FINAL DESIGN&lt;/p&gt; &#xA;&lt;h1&gt;DIY-Sim-Racing-Active-Pedal&lt;/h1&gt; &#xA;&lt;p&gt;This is my DIY Simucube Active Pedal prototype, an affordable alternative to the official Simucube active pedals that cost over $2,000 per pedal. The pedal uses a load cell to measure the force applied to the pedal, a NEMA 23 Integrated Easy Servo Motor to drive the lead screw, and an Arduino Pro Micro to control everything. I used Fusion 360 to create CAD models for all the 3d printed parts. While there are still some issues to address, such as shaky ADC readings and a lack of computing power on the Arduino, I&#39;m proud of what I&#39;ve achieved so far and hope to inspire others to take on similar DIY projects. Check out the video of the pedal in action, and feel free to contribute to the project or share your own DIY ideas!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/17485523/231913569-695fcab1-f0bb-4af6-8d90-b1bfaece13bc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hGqJAhKMDJU&#34;&gt;https://www.youtube.com/watch?v=hGqJAhKMDJU&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Current Build of Materials ~$250&lt;/strong&gt; Some of these parts will be switched out as I only picked them cause I had them laying around&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;300kg Load Cell $36.69 (changing out for a 100Kg load cell)&lt;/li&gt; &#xA; &lt;li&gt;NEMA 23 Integrated Easy Servo Motor 130w ( iSV57T-130 ) $93.93 (Could probably get away with the smaller 90 watt version and cut down on the overall length of the pedal)&lt;/li&gt; &#xA; &lt;li&gt;ADS1256 $17.99&lt;/li&gt; &#xA; &lt;li&gt;8x 608-2RS Ball Bearing $8.99&lt;/li&gt; &#xA; &lt;li&gt;Tr8x8 Lead Screw with T8 Brass Nut $11.99 (upgrading to a 1605 150mm ball screw in the future)&lt;/li&gt; &#xA; &lt;li&gt;8mm to 8mm Shaft Coupling $9.99 (will need to change to a 12mm to 8mm coupling to work with ball screw)&lt;/li&gt; &#xA; &lt;li&gt;Arduino Pro Micro $8.00&lt;/li&gt; &#xA; &lt;li&gt;2x Micro Limit Switch $5.99&lt;/li&gt; &#xA; &lt;li&gt;DROK 48V Power Supply, AC 110V/220V to DC 0-48V 10A 480W $40.99 (Can be changed to a 24V 200W power supply)&lt;/li&gt; &#xA; &lt;li&gt;L7805CV Voltage Regulator $0.32&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;To Do List&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Solder all wire connects to hopefully get more consistant readings on the ADS1256 &amp;amp; switch to a 100kg Load Cell&lt;/li&gt; &#xA; &lt;li&gt;Create a wiring diagram&lt;/li&gt; &#xA; &lt;li&gt;Update mechanical design to be more robust and use new components like the 1605 150mm Ball Screw &amp;amp; 100kg Load Cell&lt;/li&gt; &#xA; &lt;li&gt;Create a Build of Materials with links&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>emuPlace/emuThreeDS</title>
    <updated>2023-05-02T01:31:52Z</updated>
    <id>tag:github.com,2023-05-02:/emuPlace/emuThreeDS</id>
    <link href="https://github.com/emuPlace/emuThreeDS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nintendo 3DS emulator for Apple devices based on Citra.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;emuThreeDS&lt;/h1&gt; &#xA;&lt;p&gt;Nintendo 3DS emulator for Apple devices based on Citra.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Support the development of all of my emulation work by going to the links below!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Donations are greatly appreciated but are by no means necessary.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://buymeacoffee.com/antiquecodes&#34;&gt;BuyMeACoffee&lt;/a&gt;, &lt;a href=&#34;https://ko-fi.com/antiquecodes&#34;&gt;Ko-Fi&lt;/a&gt;, &lt;a href=&#34;https://paypal.me/officialantique&#34;&gt;PayPal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Regarding Code Theft, etc.&lt;/h2&gt; &#xA;&lt;p&gt;Please be aware that if it is found you are stealing my or Citra&#39;s code &lt;strong&gt;and&lt;/strong&gt; not open-sourcing it (as per GPLv3) nor attributing it, all progress on this emulator by me will cease.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;This project is built in a way that is different from most and as such it will not be easy to build. I will not be making a guide on how to build it nor will I be providing any assistance.&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;h3&gt;Amiibo, Mii&lt;/h3&gt; &#xA;&lt;p&gt;Amiibo will now be fully supported in v1.0.5 and above. Users can place Amiibo .bin data files into &lt;code&gt;/amiibo&lt;/code&gt; in the emuThreeDS directory of the Files app and insert or remove them via the new options button.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for both inserting and removing an Amiibo is available.&lt;/li&gt; &#xA; &lt;li&gt;Amiibo naming is based on the file name currently, this should change if header data is available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;On-Screen Gamepad&lt;/h3&gt; &#xA;&lt;p&gt;The native on-screen gamepad will now be available in v1.0.5 and above and displayed when no physical controller is connected. Users can manually present or dismiss the on-screen gamepad via the new options button.&lt;/p&gt; &#xA;&lt;h3&gt;Bottom Screen Touch&lt;/h3&gt; &#xA;&lt;p&gt;Bottom screen touch has been partially added with only half of the bottom screen functional, this will hopefully be fixed before the release of v1.0.5.&lt;/p&gt; &#xA;&lt;h2&gt;Progress&lt;/h2&gt; &#xA;&lt;p&gt;Progression details for sections within the project.&lt;/p&gt; &#xA;&lt;h3&gt;Audio&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://progress-bar.dev/99?width=110&#34; alt=&#34;99%&#34;&gt;&lt;br&gt; Audio appears to work fully, progress will stay at 99% for now.&lt;/p&gt; &#xA;&lt;h3&gt;Common&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://progress-bar.dev/75?width=110&#34; alt=&#34;75%&#34;&gt;&lt;br&gt; Common appears to work fully, progress will stay at 75% until rom installation, etc. is tested.&lt;/p&gt; &#xA;&lt;h3&gt;Core&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://progress-bar.dev/99?width=110&#34; alt=&#34;99%&#34;&gt;&lt;br&gt; Core appears to work fully, progress will stay at 99% until the JIT requirement is removed.&lt;/p&gt; &#xA;&lt;h3&gt;Dedicated Room&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://progress-bar.dev/0?width=110&#34; alt=&#34;0%&#34;&gt;&lt;br&gt; No changes have been made to dedicated room yet.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;del&gt;Input Common&lt;/del&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://progress-bar.dev/90?width=110&#34; alt=&#34;90%&#34;&gt;&lt;br&gt; Input Common now supports iOS supported gamepads, the iOS native on-screen gamepad and partial bottom screen touch (currently misaligned, likely x/y value miscalculations).&lt;/p&gt; &#xA;&lt;h3&gt;Network&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://progress-bar.dev/0?width=110&#34; alt=&#34;0%&#34;&gt;&lt;br&gt; No changes have been made to network yet.&lt;/p&gt; &#xA;&lt;h3&gt;Video Core&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://progress-bar.dev/99?width=110&#34; alt=&#34;99%&#34;&gt;&lt;br&gt; Video Core appears to work fully, progress will stay at 99% until further testing is done.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I&#39;d like to implement LayoutOption::SeparateWindows into Vulkan.&lt;/li&gt; &#xA; &lt;li&gt;Current shader conversion pipeline is GLSL &amp;gt; SPIR-V &amp;gt; MSL. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This could be improved by rewriting the GLSL shaders to SPIR-V meaning one less layer of conversion is needed.&lt;/li&gt; &#xA;   &lt;li&gt;SPIR-V shaders are required for MoltenVK afaik.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Web Service&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://progress-bar.dev/0?width=110&#34; alt=&#34;0%&#34;&gt;&lt;br&gt; No changes have been made to web service yet.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nmslib/hnswlib</title>
    <updated>2023-05-02T01:31:52Z</updated>
    <id>tag:github.com,2023-05-02:/nmslib/hnswlib</id>
    <link href="https://github.com/nmslib/hnswlib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Header-only C++/python library for fast approximate nearest neighbors&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hnswlib - fast approximate nearest neighbor search&lt;/h1&gt; &#xA;&lt;p&gt;Header-only C++ HNSW implementation with python bindings, insertions and updates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NEWS:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;version 0.7.0&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added support to filtering (#402, #430) by &lt;a href=&#34;https://github.com/kishorenc&#34;&gt;@kishorenc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Added python interface for filtering (though note its performance is limited by GIL) (#417) by &lt;a href=&#34;https://github.com/gtsoukas&#34;&gt;@gtsoukas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Added support for replacing the elements that were marked as delete with newly inserted elements (to control the size of the index, #418) by &lt;a href=&#34;https://github.com/dyashuni&#34;&gt;@dyashuni&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fixed data races/deadlocks in updates/insertion, added stress test for multithreaded operation (#418) by &lt;a href=&#34;https://github.com/dyashuni&#34;&gt;@dyashuni&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Documentation, tests, exception handling, refactoring (#375, #379, #380, #395, #396, #401, #406, #404, #409, #410, #416, #415, #431, #432, #433) by &lt;a href=&#34;https://github.com/jlmelville&#34;&gt;@jlmelville&lt;/a&gt;, &lt;a href=&#34;https://github.com/dyashuni&#34;&gt;@dyashuni&lt;/a&gt;, &lt;a href=&#34;https://github.com/kishorenc&#34;&gt;@kishorenc&lt;/a&gt;, &lt;a href=&#34;https://github.com/korzhenevski&#34;&gt;@korzhenevski&lt;/a&gt;, &lt;a href=&#34;https://github.com/yoshoku&#34;&gt;@yoshoku&lt;/a&gt;, &lt;a href=&#34;https://github.com/jianshu93&#34;&gt;@jianshu93&lt;/a&gt;, &lt;a href=&#34;https://github.com/PLNech&#34;&gt;@PLNech&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;global linkages (#383) by &lt;a href=&#34;https://github.com/MasterAler&#34;&gt;@MasterAler&lt;/a&gt;, USE_SSE usage in MSVC (#408) by &lt;a href=&#34;https://github.com/alxvth&#34;&gt;@alxvth&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Highlights:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Lightweight, header-only, no dependencies other than C++ 11&lt;/li&gt; &#xA; &lt;li&gt;Interfaces for C++, Python, external support for Java and R (&lt;a href=&#34;https://github.com/jlmelville/rcpphnsw&#34;&gt;https://github.com/jlmelville/rcpphnsw&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Has full support for incremental index construction and updating the elements. Has support for element deletions (by marking them in index). Index is picklable.&lt;/li&gt; &#xA; &lt;li&gt;Can work with custom user defined distances (C++).&lt;/li&gt; &#xA; &lt;li&gt;Significantly less memory footprint and faster build time compared to current nmslib&#39;s implementation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Description of the algorithm parameters can be found in &lt;a href=&#34;https://raw.githubusercontent.com/nmslib/hnswlib/master/ALGO_PARAMS.md&#34;&gt;ALGO_PARAMS.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Python bindings&lt;/h3&gt; &#xA;&lt;h4&gt;Supported distances:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Distance&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Equation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Squared L2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#39;l2&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;d = sum((Ai-Bi)^2)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Inner product&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#39;ip&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;d = 1.0 - sum(Ai*Bi)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cosine similarity&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#39;cosine&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;d = 1.0 - sum(Ai*Bi) / sqrt(sum(Ai*Ai) * sum(Bi*Bi))&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note that inner product is not an actual metric. An element can be closer to some other element than to itself. That allows some speedup if you remove all elements that are not the closest to themselves from the index.&lt;/p&gt; &#xA;&lt;p&gt;For other spaces use the nmslib library &lt;a href=&#34;https://github.com/nmslib/nmslib&#34;&gt;https://github.com/nmslib/nmslib&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;API description&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;hnswlib.Index(space, dim)&lt;/code&gt; creates a non-initialized index an HNSW in space &lt;code&gt;space&lt;/code&gt; with integer dimension &lt;code&gt;dim&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;hnswlib.Index&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;init_index(max_elements, M = 16, ef_construction = 200, random_seed = 100, allow_replace_deleted = False)&lt;/code&gt; initializes the index from with no elements.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;max_elements&lt;/code&gt; defines the maximum number of elements that can be stored in the structure(can be increased/shrunk).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ef_construction&lt;/code&gt; defines a construction time/accuracy trade-off (see &lt;a href=&#34;https://raw.githubusercontent.com/nmslib/hnswlib/master/ALGO_PARAMS.md&#34;&gt;ALGO_PARAMS.md&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;M&lt;/code&gt; defines tha maximum number of outgoing connections in the graph (&lt;a href=&#34;https://raw.githubusercontent.com/nmslib/hnswlib/master/ALGO_PARAMS.md&#34;&gt;ALGO_PARAMS.md&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;allow_replace_deleted&lt;/code&gt; enables replacing of deleted elements with new added ones.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;add_items(data, ids, num_threads = -1, replace_deleted = False)&lt;/code&gt; - inserts the &lt;code&gt;data&lt;/code&gt;(numpy array of vectors, shape:&lt;code&gt;N*dim&lt;/code&gt;) into the structure.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;num_threads&lt;/code&gt; sets the number of cpu threads to use (-1 means use default).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ids&lt;/code&gt; are optional N-size numpy array of integer labels for all elements in &lt;code&gt;data&lt;/code&gt;. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If index already has the elements with the same labels, their features will be updated. Note that update procedure is slower than insertion of a new element, but more memory- and query-efficient.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;replace_deleted&lt;/code&gt; replaces deleted elements. Note it allows to save memory. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;to use it &lt;code&gt;init_index&lt;/code&gt; should be called with &lt;code&gt;allow_replace_deleted=True&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Thread-safe with other &lt;code&gt;add_items&lt;/code&gt; calls, but not with &lt;code&gt;knn_query&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mark_deleted(label)&lt;/code&gt; - marks the element as deleted, so it will be omitted from search results. Throws an exception if it is already deleted.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;unmark_deleted(label)&lt;/code&gt; - unmarks the element as deleted, so it will be not be omitted from search results.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;resize_index(new_size)&lt;/code&gt; - changes the maximum capacity of the index. Not thread safe with &lt;code&gt;add_items&lt;/code&gt; and &lt;code&gt;knn_query&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set_ef(ef)&lt;/code&gt; - sets the query time accuracy/speed trade-off, defined by the &lt;code&gt;ef&lt;/code&gt; parameter ( &lt;a href=&#34;https://raw.githubusercontent.com/nmslib/hnswlib/master/ALGO_PARAMS.md&#34;&gt;ALGO_PARAMS.md&lt;/a&gt;). Note that the parameter is currently not saved along with the index, so you need to set it manually after loading.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;knn_query(data, k = 1, num_threads = -1, filter = None)&lt;/code&gt; make a batch query for &lt;code&gt;k&lt;/code&gt; closest elements for each element of the&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;data&lt;/code&gt; (shape:&lt;code&gt;N*dim&lt;/code&gt;). Returns a numpy array of (shape:&lt;code&gt;N*k&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;num_threads&lt;/code&gt; sets the number of cpu threads to use (-1 means use default).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filter&lt;/code&gt; filters elements by its labels, returns elements with allowed ids. Note that search with a filter works slow in python in multithreaded mode. It is recommended to set &lt;code&gt;num_threads=1&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Thread-safe with other &lt;code&gt;knn_query&lt;/code&gt; calls, but not with &lt;code&gt;add_items&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;load_index(path_to_index, max_elements = 0, allow_replace_deleted = False)&lt;/code&gt; loads the index from persistence to the uninitialized index.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;max_elements&lt;/code&gt;(optional) resets the maximum number of elements in the structure.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;allow_replace_deleted&lt;/code&gt; specifies whether the index being loaded has enabled replacing of deleted elements.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;save_index(path_to_index)&lt;/code&gt; saves the index from persistence.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;set_num_threads(num_threads)&lt;/code&gt; set the default number of cpu threads used during data insertion/querying.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;get_items(ids)&lt;/code&gt; - returns a numpy array (shape:&lt;code&gt;N*dim&lt;/code&gt;) of vectors that have integer identifiers specified in &lt;code&gt;ids&lt;/code&gt; numpy vector (shape:&lt;code&gt;N&lt;/code&gt;). Note that for cosine similarity it currently returns &lt;strong&gt;normalized&lt;/strong&gt; vectors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;get_ids_list()&lt;/code&gt; - returns a list of all elements&#39; ids.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;get_max_elements()&lt;/code&gt; - returns the current capacity of the index&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;get_current_count()&lt;/code&gt; - returns the current number of element stored in the index&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read-only properties of &lt;code&gt;hnswlib.Index&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;space&lt;/code&gt; - name of the space (can be one of &#34;l2&#34;, &#34;ip&#34;, or &#34;cosine&#34;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dim&lt;/code&gt; - dimensionality of the space.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;M&lt;/code&gt; - parameter that defines the maximum number of outgoing connections in the graph.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ef_construction&lt;/code&gt; - parameter that controls speed/accuracy trade-off during the index construction.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;max_elements&lt;/code&gt; - current capacity of the index. Equivalent to &lt;code&gt;p.get_max_elements()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;element_count&lt;/code&gt; - number of items in the index. Equivalent to &lt;code&gt;p.get_current_count()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Properties of &lt;code&gt;hnswlib.Index&lt;/code&gt; that support reading and writing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ef&lt;/code&gt; - parameter controlling query time/accuracy trade-off.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;num_threads&lt;/code&gt; - default number of threads to use in &lt;code&gt;add_items&lt;/code&gt; or &lt;code&gt;knn_query&lt;/code&gt;. Note that calling &lt;code&gt;p.set_num_threads(3)&lt;/code&gt; is equivalent to &lt;code&gt;p.num_threads=3&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Python bindings examples&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nmslib/hnswlib/master/examples/python/EXAMPLES.md&#34;&gt;See more examples here&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creating index, inserting elements, searching, serialization/deserialization&lt;/li&gt; &#xA; &lt;li&gt;Filtering during the search with a boolean function&lt;/li&gt; &#xA; &lt;li&gt;Deleting the elements and reusing the memory of the deleted elements for newly added elements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An example of creating index, inserting elements, searching and pickle serialization:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import hnswlib&#xA;import numpy as np&#xA;import pickle&#xA;&#xA;dim = 128&#xA;num_elements = 10000&#xA;&#xA;# Generating sample data&#xA;data = np.float32(np.random.random((num_elements, dim)))&#xA;ids = np.arange(num_elements)&#xA;&#xA;# Declaring index&#xA;p = hnswlib.Index(space = &#39;l2&#39;, dim = dim) # possible options are l2, cosine or ip&#xA;&#xA;# Initializing index - the maximum number of elements should be known beforehand&#xA;p.init_index(max_elements = num_elements, ef_construction = 200, M = 16)&#xA;&#xA;# Element insertion (can be called several times):&#xA;p.add_items(data, ids)&#xA;&#xA;# Controlling the recall by setting ef:&#xA;p.set_ef(50) # ef should always be &amp;gt; k&#xA;&#xA;# Query dataset, k - number of the closest elements (returns 2 numpy arrays)&#xA;labels, distances = p.knn_query(data, k = 1)&#xA;&#xA;# Index objects support pickling&#xA;# WARNING: serialization via pickle.dumps(p) or p.__getstate__() is NOT thread-safe with p.add_items method!&#xA;# Note: ef parameter is included in serialization; random number generator is initialized with random_seed on Index load&#xA;p_copy = pickle.loads(pickle.dumps(p)) # creates a copy of index p using pickle round-trip&#xA;&#xA;### Index parameters are exposed as class properties:&#xA;print(f&#34;Parameters passed to constructor:  space={p_copy.space}, dim={p_copy.dim}&#34;) &#xA;print(f&#34;Index construction: M={p_copy.M}, ef_construction={p_copy.ef_construction}&#34;)&#xA;print(f&#34;Index size is {p_copy.element_count} and index capacity is {p_copy.max_elements}&#34;)&#xA;print(f&#34;Search speed/quality trade-off parameter: ef={p_copy.ef}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An example with updates after serialization/deserialization:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import hnswlib&#xA;import numpy as np&#xA;&#xA;dim = 16&#xA;num_elements = 10000&#xA;&#xA;# Generating sample data&#xA;data = np.float32(np.random.random((num_elements, dim)))&#xA;&#xA;# We split the data in two batches:&#xA;data1 = data[:num_elements // 2]&#xA;data2 = data[num_elements // 2:]&#xA;&#xA;# Declaring index&#xA;p = hnswlib.Index(space=&#39;l2&#39;, dim=dim)  # possible options are l2, cosine or ip&#xA;&#xA;# Initializing index&#xA;# max_elements - the maximum number of elements (capacity). Will throw an exception if exceeded&#xA;# during insertion of an element.&#xA;# The capacity can be increased by saving/loading the index, see below.&#xA;#&#xA;# ef_construction - controls index search speed/build speed tradeoff&#xA;#&#xA;# M - is tightly connected with internal dimensionality of the data. Strongly affects memory consumption (~M)&#xA;# Higher M leads to higher accuracy/run_time at fixed ef/efConstruction&#xA;&#xA;p.init_index(max_elements=num_elements//2, ef_construction=100, M=16)&#xA;&#xA;# Controlling the recall by setting ef:&#xA;# higher ef leads to better accuracy, but slower search&#xA;p.set_ef(10)&#xA;&#xA;# Set number of threads used during batch search/construction&#xA;# By default using all available cores&#xA;p.set_num_threads(4)&#xA;&#xA;print(&#34;Adding first batch of %d elements&#34; % (len(data1)))&#xA;p.add_items(data1)&#xA;&#xA;# Query the elements for themselves and measure recall:&#xA;labels, distances = p.knn_query(data1, k=1)&#xA;print(&#34;Recall for the first batch:&#34;, np.mean(labels.reshape(-1) == np.arange(len(data1))), &#34;\n&#34;)&#xA;&#xA;# Serializing and deleting the index:&#xA;index_path=&#39;first_half.bin&#39;&#xA;print(&#34;Saving index to &#39;%s&#39;&#34; % index_path)&#xA;p.save_index(&#34;first_half.bin&#34;)&#xA;del p&#xA;&#xA;# Re-initializing, loading the index&#xA;p = hnswlib.Index(space=&#39;l2&#39;, dim=dim)  # the space can be changed - keeps the data, alters the distance function.&#xA;&#xA;print(&#34;\nLoading index from &#39;first_half.bin&#39;\n&#34;)&#xA;&#xA;# Increase the total capacity (max_elements), so that it will handle the new data&#xA;p.load_index(&#34;first_half.bin&#34;, max_elements = num_elements)&#xA;&#xA;print(&#34;Adding the second batch of %d elements&#34; % (len(data2)))&#xA;p.add_items(data2)&#xA;&#xA;# Query the elements for themselves and measure recall:&#xA;labels, distances = p.knn_query(data, k=1)&#xA;print(&#34;Recall for two batches:&#34;, np.mean(labels.reshape(-1) == np.arange(len(data))), &#34;\n&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;C++ examples&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nmslib/hnswlib/master/examples/cpp/EXAMPLES.md&#34;&gt;See examples here&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;creating index, inserting elements, searching, serialization/deserialization&lt;/li&gt; &#xA; &lt;li&gt;filtering during the search with a boolean function&lt;/li&gt; &#xA; &lt;li&gt;deleting the elements and reusing the memory of the deleted elements for newly added elements&lt;/li&gt; &#xA; &lt;li&gt;multithreaded usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bindings installation&lt;/h3&gt; &#xA;&lt;p&gt;You can install from sources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install -y python-setuptools python-pip&#xA;git clone https://github.com/nmslib/hnswlib.git&#xA;cd hnswlib&#xA;pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can install via pip: &lt;code&gt;pip install hnswlib&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;For developers&lt;/h3&gt; &#xA;&lt;p&gt;Contributions are highly welcome!&lt;/p&gt; &#xA;&lt;p&gt;Please make pull requests against the &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;When making changes please run tests (and please add a test to &lt;code&gt;tests/python&lt;/code&gt; in case there is new functionality):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m unittest discover --start-directory tests/python --pattern &#34;bindings_test*.py&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other implementations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-metric space library (nmslib) - main library(python, C++), supports exotic distances: &lt;a href=&#34;https://github.com/nmslib/nmslib&#34;&gt;https://github.com/nmslib/nmslib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Faiss library by facebook, uses own HNSW implementation for coarse quantization (python, C++): &lt;a href=&#34;https://github.com/facebookresearch/faiss&#34;&gt;https://github.com/facebookresearch/faiss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code for the paper &lt;a href=&#34;https://arxiv.org/abs/1802.02422&#34;&gt;&#34;Revisiting the Inverted Indices for Billion-Scale Approximate Nearest Neighbors&#34;&lt;/a&gt; (current state-of-the-art in compressed indexes, C++): &lt;a href=&#34;https://github.com/dbaranchuk/ivf-hnsw&#34;&gt;https://github.com/dbaranchuk/ivf-hnsw&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Amazon PECOS &lt;a href=&#34;https://github.com/amzn/pecos&#34;&gt;https://github.com/amzn/pecos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TOROS N2 (python, C++): &lt;a href=&#34;https://github.com/kakao/n2&#34;&gt;https://github.com/kakao/n2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Online HNSW (C++): &lt;a href=&#34;https://github.com/andrusha97/online-hnsw&#34;&gt;https://github.com/andrusha97/online-hnsw&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Go implementation: &lt;a href=&#34;https://github.com/Bithack/go-hnsw&#34;&gt;https://github.com/Bithack/go-hnsw&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Python implementation (as a part of the clustering code by by Matteo Dell&#39;Amico): &lt;a href=&#34;https://github.com/matteodellamico/flexible-clustering&#34;&gt;https://github.com/matteodellamico/flexible-clustering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Julia implmentation &lt;a href=&#34;https://github.com/JuliaNeighbors/HNSW.jl&#34;&gt;https://github.com/JuliaNeighbors/HNSW.jl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java implementation: &lt;a href=&#34;https://github.com/jelmerk/hnswlib&#34;&gt;https://github.com/jelmerk/hnswlib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java bindings using Java Native Access: &lt;a href=&#34;https://github.com/stepstone-tech/hnswlib-jna&#34;&gt;https://github.com/stepstone-tech/hnswlib-jna&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;.Net implementation: &lt;a href=&#34;https://github.com/curiosity-ai/hnsw-sharp&#34;&gt;https://github.com/curiosity-ai/hnsw-sharp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CUDA implementation: &lt;a href=&#34;https://github.com/js1010/cuhnsw&#34;&gt;https://github.com/js1010/cuhnsw&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust implementation &lt;a href=&#34;https://github.com/rust-cv/hnsw&#34;&gt;https://github.com/rust-cv/hnsw&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rust implementation for memory and thread safety purposes and There is A Trait to enable the user to implement its own distances. It takes as data slices of types T satisfying T:Serialize+Clone+Send+Sync.: &lt;a href=&#34;https://github.com/jean-pierreBoth/hnswlib-rs&#34;&gt;https://github.com/jean-pierreBoth/hnswlib-rs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;200M SIFT test reproduction&lt;/h3&gt; &#xA;&lt;p&gt;To download and extract the bigann dataset (from root directory):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python tests/cpp/download_bigann.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;make all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the test on 200M SIFT subset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The size of the BigANN subset (in millions) is controlled by the variable &lt;strong&gt;subset_size_millions&lt;/strong&gt; hardcoded in &lt;strong&gt;sift_1b.cpp&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Updates test&lt;/h3&gt; &#xA;&lt;p&gt;To generate testing data (from root directory):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd tests/cpp&#xA;python update_gen_data.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile (from root directory):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;make &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run test &lt;strong&gt;without&lt;/strong&gt; updates (from &lt;code&gt;build&lt;/code&gt; directory)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./test_updates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run test &lt;strong&gt;with&lt;/strong&gt; updates (from &lt;code&gt;build&lt;/code&gt; directory)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./test_updates update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HNSW example demos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual search engine for 1M amazon products (MXNet + HNSW): &lt;a href=&#34;https://thomasdelteil.github.io/VisualSearch_MXNet/&#34;&gt;website&lt;/a&gt;, &lt;a href=&#34;https://github.com/ThomasDelteil/VisualSearch_MXNet&#34;&gt;code&lt;/a&gt;, demo by &lt;a href=&#34;https://github.com/ThomasDelteil&#34;&gt;@ThomasDelteil&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;References&lt;/h3&gt; &#xA;&lt;p&gt;HNSW paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{malkov2018efficient,&#xA;  title={Efficient and robust approximate nearest neighbor search using hierarchical navigable small world graphs},&#xA;  author={Malkov, Yu A and Yashunin, Dmitry A},&#xA;  journal={IEEE transactions on pattern analysis and machine intelligence},&#xA;  volume={42},&#xA;  number={4},&#xA;  pages={824--836},&#xA;  year={2018},&#xA;  publisher={IEEE}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The update algorithm supported in this repository is to be published in &#34;Dynamic Updates For HNSW, Hierarchical Navigable Small World Graphs&#34; US Patent 15/929,802 by Apoorv Sharma, Abhishek Tayal and Yury Malkov.&lt;/p&gt;</summary>
  </entry>
</feed>