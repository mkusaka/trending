<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-27T01:33:43Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>patriciogonzalezvivo/glslViewer</title>
    <updated>2022-10-27T01:33:43Z</updated>
    <id>tag:github.com,2022-10-27:/patriciogonzalezvivo/glslViewer</id>
    <link href="https://github.com/patriciogonzalezvivo/glslViewer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Console-based GLSL Sandbox for 2D/3D shaders&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;glslViewer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/patriciogonzalezvivo/glslViewer/main/.github/images/02.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=4BQMKQJDQ9XH6&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GlslViewer is a flexible console-base OpenGL Sandbox to display 2D/3D GLSL shaders without the need of an UI. You can definitely make your own UI or wrapper using the Python Module (include) or any other tool that communicates back/forth with glslViewer thought the standard POSIX console In/Out or OSC.&lt;/p&gt; &#xA;&lt;p&gt;Joing &lt;a href=&#34;https://shader.zone/&#34;&gt;#GlslViewer channel on shader.zone discord&lt;/a&gt; to learn how to use it, share work and get help.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/patriciogonzalezvivo/glslViewer/main/.github/images/03.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;GlslViewer gives support to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fragment and vertex shaders on GLSL&lt;/li&gt; &#xA; &lt;li&gt;resolve #include dependencies&lt;/li&gt; &#xA; &lt;li&gt;adding/deleting #define keys through console IN commands and OSC&lt;/li&gt; &#xA; &lt;li&gt;automatically generated set of defines based on the platform, buffer, render pass, geometry attributes and materials properties.&lt;/li&gt; &#xA; &lt;li&gt;passing custom uniforms (float, int, vec2, vec3 and vec4) through console IN or OSC&lt;/li&gt; &#xA; &lt;li&gt;Different kinds of Textures (png, bmp, jpg, tga, hdr, gif, mp4, mov, rtc, rtsp, local camera devices and audio textures)&lt;/li&gt; &#xA; &lt;li&gt;import of Cubemaps and spherical harmonics (png, jpg, tga, hdr)&lt;/li&gt; &#xA; &lt;li&gt;import LST, PLY, OBJ or GLTF files (and their dependencies)&lt;/li&gt; &#xA; &lt;li&gt;default vert/frag shaders for 2D shader and 3D material shaders with PBR lighting model&lt;/li&gt; &#xA; &lt;li&gt;hot reload of files on changes&lt;/li&gt; &#xA; &lt;li&gt;One default light and one default camera&lt;/li&gt; &#xA; &lt;li&gt;Interactive commands thought POSIX console IN/OUT or OSC&lt;/li&gt; &#xA; &lt;li&gt;different debug modes (histogram, textures, buffers, bounding box, etc)&lt;/li&gt; &#xA; &lt;li&gt;shadow maps&lt;/li&gt; &#xA; &lt;li&gt;headless rendering&lt;/li&gt; &#xA; &lt;li&gt;fullscreen and screensaver mode&lt;/li&gt; &#xA; &lt;li&gt;HoloPlay rendering on LookingGlass Display&lt;/li&gt; &#xA; &lt;li&gt;image export&lt;/li&gt; &#xA; &lt;li&gt;PNG sequence export&lt;/li&gt; &#xA; &lt;li&gt;WASM crosscompiling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/patriciogonzalezvivo/glslViewer/main/.github/images/05.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/patriciogonzalezvivo/glslViewer/main/.github/images/06.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/patriciogonzalezvivo/glslViewer/main/.github/images/09.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/patriciogonzalezvivo/glslViewer/main/.github/images/10.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/patriciogonzalezvivo/glslViewer/main/.github/images/00.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/patriciogonzalezvivo/glslViewer/main/.github/images/dof.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Wiki themes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Installing&#34;&gt;Installing&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Compile-on-linux&#34;&gt;Compile on Linux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Compile-on-MacOS&#34;&gt;Compile on MacOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Compile-on-Windows&#34;&gt;Compile on Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Compile-as-Emscripten-WebAssembly&#34;&gt;Compile as WebAssembly&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Using-GlslViewer&#34;&gt;Using GlslViewer&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Using-GlslViewer#1-loading-a-single-fragment-shader&#34;&gt;Loading a single Fragment shader&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Using-GlslViewer#2-loading-geometry-and-a-vertex-shader&#34;&gt;Loading geometry and a vertex shader&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Using-GlslViewer#21-load-a-model-and-edit-the-default-pbr-shader&#34;&gt;Load a model and edit the default PBR shader&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Using-GlslViewer#3-loading-textures&#34;&gt;Loading Textures&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Audio-and-Video-Textures&#34;&gt;Audio and video Textures&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Using-GlslViewer#4-other-arguments&#34;&gt;Other arguments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/Interacting-with-GlslViewer&#34;&gt;Console IN commands&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Convention:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/GlslViewer-DEFINES&#34;&gt;Defines&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/GlslViewer-DEFINES#platform-defines&#34;&gt;Platform&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/GlslViewer-DEFINES#buffers-and-render-passes&#34;&gt;Buffers &amp;amp; Render Passes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/GlslViewer-DEFINES#geometry-defines&#34;&gt;Geometry Attributes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/GlslViewer-DEFINES#material-defines&#34;&gt;Materials&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/patriciogonzalezvivo/glslViewer/wiki/GlslViewer-UNIFORMS&#34;&gt;Uniforms&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/patriciogv&#34;&gt;Patricio Gonzalez Vivo&lt;/a&gt;: &lt;a href=&#34;https://github.com/patriciogonzalezvivo&#34;&gt;github&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/patriciogv&#34;&gt;twitter&lt;/a&gt; | &lt;a href=&#34;https://www.instagram.com/patriciogonzalezvivo/&#34;&gt;instagram&lt;/a&gt; | &lt;a href=&#34;http://patricio.io&#34;&gt;website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://twitter.com/mihai_sebea&#34;&gt;Mihai Sebea&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/bertrandcarre&#34;&gt;Bertrand Carr√©&lt;/a&gt; for making the Windows compile happen&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://karim.naaji.fr/&#34;&gt;Karim Naaki&lt;/a&gt; lot of concept and code was inspired by this two projects: &lt;a href=&#34;https://github.com/karimnaaji/fragtool&#34;&gt;fragTool&lt;/a&gt; and &lt;a href=&#34;https://github.com/karimnaaji/hdreffects&#34;&gt;hdreffects&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/doug-moen&#34;&gt;Doug Moen&lt;/a&gt; he help to add the compatibility to ShaderToy shaders and some RayMarching features were added for his integration with his project: &lt;a href=&#34;https://github.com/doug-moen/curv&#34;&gt;curv&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://twitter.com/wraybowling&#34;&gt;Wray&lt;/a&gt; implement the OSC listener feature, opening GlslViewer to an entire new ways of communicating and interacting with other apps, devices and ecosystems.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/yvan-sraka&#34;&gt;Yvan Sraka&lt;/a&gt; for putting the code in shape and setting it up for TravisCI.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://andsz.de/&#34;&gt;Andsz&lt;/a&gt; for Spherical Harmonics code from &lt;a href=&#34;https://github.com/ands/spherical_harmonics_playground/&#34;&gt;Spherical Harmonics Playground&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patriciogonzalezvivo/glslViewer/main/syoyo.wordpress.com&#34;&gt;Syoyo Fujita&lt;/a&gt; for the work on &lt;a href=&#34;https://github.com/syoyo/tinyobjloader&#34;&gt;tinyobjloader v1.0.x&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://casual-effects.com&#34;&gt;Morgan McGuire&lt;/a&gt;&#39;s for the OBJ models on &lt;a href=&#34;https://casual-effects.com/data&#34;&gt;Computer Graphics Archive&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://prideout.net/&#34;&gt;Philip Rideout&lt;/a&gt; and &lt;a href=&#34;http://www.curious-creature.com/&#34;&gt;Romain Guy&lt;/a&gt; general generosity to share their code and experience&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/bespsm&#34;&gt;Sergei B&lt;/a&gt; for adding support for Audio textures&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ReCryptLLC/CVE-2022-42045</title>
    <updated>2022-10-27T01:33:43Z</updated>
    <id>tag:github.com,2022-10-27:/ReCryptLLC/CVE-2022-42045</id>
    <link href="https://github.com/ReCryptLLC/CVE-2022-42045" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2022-42045&lt;/h1&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;We discovered an Arbitrary code injection in Zemana amsdk.sys kernel-mode driver, a part of Zemana Antimalware SDK. The vulnerability allows to inject an arbitrary code into the one of the driver code sections and then to execute it with kernel-mode privileges (local privileges escalation from admin to kernel mode). This vulnerability could be used, for example, to disable Driver Signature Enforcement and then to install unsigned kernel-mode drivers.&lt;/p&gt; &#xA;&lt;h2&gt;Details&lt;/h2&gt; &#xA;&lt;p&gt;The vulnerable function is placed at the offset 0xBF60 from the start of the .text section of amsdk.sys. This function invokes another one at the offset 0xD664. The function at the offset 0xD664 gets 4 arguments:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Target address: address of the function in .hook section with RWX access rights. In our case this argument points to the function at the offset 0x1D0 from the start of .hook sections&lt;/li&gt; &#xA; &lt;li&gt;Source address: address of a source buffer with user controlled code&lt;/li&gt; &#xA; &lt;li&gt;Some integer value. 128 in our case&lt;/li&gt; &#xA; &lt;li&gt;Some address of a some function inside ntoskrnl.exe. This function is invoked just after invoking of the code from argument 2. BUT before it this argument value is increased by the length of a code from argument 2 minus 1. This length is calculated by the embedded to the driver lightweight disassembler. So, after the invoking of a code from argument 2 the control is transferred to the arg_4 + arg_2_length ‚Äì 1.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;IOCTL 0x80002044 calls the function at the offset 0xBF60 (.text section) and allows to fill the stub in .hook section by an arbitrary user controlled code. IOCTL 0x80002014 (read via SCSI) or IOCTL 0x80002014 (write via SCSI) transfers a control to this filled stub.&lt;/p&gt; &#xA;&lt;h3&gt;Affected products&lt;/h3&gt; &#xA;&lt;p&gt;At least Watchdog Anti-Malware 4.1.422 , Zemana AntiMalware 3.2.28. These products have the same vulnerable driver but signed with different certificates.&lt;/p&gt; &#xA;&lt;p&gt;Zemana AntiLogger v2.74.2.664 has the same vulnerability. Vulnerable drivers: zamguard64.sys, zam64.sys.&lt;/p&gt; &#xA;&lt;h3&gt;Affected operating systems&lt;/h3&gt; &#xA;&lt;p&gt;64-bit versions of Windows: from Windows 7 to Windows 11&lt;/p&gt; &#xA;&lt;h2&gt;Mitigation&lt;/h2&gt; &#xA;&lt;p&gt;Uninstall Zemana or Watchdog Antimalware products. Add driver signatures to blacklist.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ReCryptLLC/CVE-2022-42045/raw/main/PoC.png&#34; alt=&#34;Result&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aria2/aria2</title>
    <updated>2022-10-27T01:33:43Z</updated>
    <id>tag:github.com,2022-10-27:/aria2/aria2</id>
    <link href="https://github.com/aria2/aria2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;aria2 is a lightweight multi-protocol &amp; multi-source, cross platform download utility operated in command-line. It supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aria2 - The ultra fast download utility&lt;/h1&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This program comes with no warranty. You must use this program at your own risk.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;aria2 is a utility for downloading files. The supported protocols are HTTP(S), FTP, SFTP, BitTorrent, and Metalink. aria2 can download a file from multiple sources/protocols and tries to utilize your maximum download bandwidth. It supports downloading a file from HTTP(S)/FTP/SFTP and BitTorrent at the same time, while the data downloaded from HTTP(S)/FTP/SFTP is uploaded to the BitTorrent swarm. Using Metalink&#39;s chunk checksums, aria2 automatically validates chunks of data while downloading a file like BitTorrent.&lt;/p&gt; &#xA;&lt;p&gt;The project page is located at &lt;a href=&#34;https://aria2.github.io/&#34;&gt;https://aria2.github.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;aria2 Online Manual &amp;lt;https://aria2.github.io/manual/en/html/&amp;gt;&lt;/code&gt;_ (&lt;code&gt;Russian translation &amp;lt;https://aria2.github.io/manual/ru/html/&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;Portuguese translation &amp;lt;https://aria2.github.io/manual/pt/html/&amp;gt;&lt;/code&gt;&lt;/em&gt;) to learn how to use aria2.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Here is a list of features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Command-line interface&lt;/li&gt; &#xA; &lt;li&gt;Download files through HTTP(S)/FTP/SFTP/BitTorrent&lt;/li&gt; &#xA; &lt;li&gt;Segmented downloading&lt;/li&gt; &#xA; &lt;li&gt;Metalink version 4 (RFC 5854) support(HTTP/FTP/SFTP/BitTorrent)&lt;/li&gt; &#xA; &lt;li&gt;Metalink version 3.0 support(HTTP/FTP/SFTP/BitTorrent)&lt;/li&gt; &#xA; &lt;li&gt;Metalink/HTTP (RFC 6249) support&lt;/li&gt; &#xA; &lt;li&gt;HTTP/1.1 implementation&lt;/li&gt; &#xA; &lt;li&gt;HTTP Proxy support&lt;/li&gt; &#xA; &lt;li&gt;HTTP BASIC authentication support&lt;/li&gt; &#xA; &lt;li&gt;HTTP Proxy authentication support&lt;/li&gt; &#xA; &lt;li&gt;Well-known environment variables for proxy: &lt;code&gt;http_proxy&lt;/code&gt;, &lt;code&gt;https_proxy&lt;/code&gt;, &lt;code&gt;ftp_proxy&lt;/code&gt;, &lt;code&gt;all_proxy&lt;/code&gt; and &lt;code&gt;no_proxy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTTP gzip, deflate content encoding support&lt;/li&gt; &#xA; &lt;li&gt;Verify peer using given trusted CA certificate in HTTPS&lt;/li&gt; &#xA; &lt;li&gt;Client certificate authentication in HTTPS&lt;/li&gt; &#xA; &lt;li&gt;Chunked transfer encoding support&lt;/li&gt; &#xA; &lt;li&gt;Load Cookies from file using the Firefox3 format, Chromium/Google Chrome and the Mozilla/Firefox (1.x/2.x)/Netscape format.&lt;/li&gt; &#xA; &lt;li&gt;Save Cookies in the Mozilla/Firefox (1.x/2.x)/Netscape format.&lt;/li&gt; &#xA; &lt;li&gt;Custom HTTP Header support&lt;/li&gt; &#xA; &lt;li&gt;Persistent Connections support&lt;/li&gt; &#xA; &lt;li&gt;FTP/SFTP through HTTP Proxy&lt;/li&gt; &#xA; &lt;li&gt;Download/Upload speed throttling&lt;/li&gt; &#xA; &lt;li&gt;BitTorrent extensions: Fast extension, DHT, PEX, MSE/PSE, Multi-Tracker, UDP tracker&lt;/li&gt; &#xA; &lt;li&gt;BitTorrent &lt;code&gt;WEB-Seeding &amp;lt;http://getright.com/seedtorrent.html&amp;gt;&lt;/code&gt;_. aria2 requests chunks more than piece size to reduce the request overhead. It also supports pipelined requests with piece size.&lt;/li&gt; &#xA; &lt;li&gt;BitTorrent Local Peer Discovery&lt;/li&gt; &#xA; &lt;li&gt;Rename/change the directory structure of BitTorrent downloads completely&lt;/li&gt; &#xA; &lt;li&gt;JSON-RPC (over HTTP and WebSocket)/XML-RPC interface&lt;/li&gt; &#xA; &lt;li&gt;Run as a daemon process&lt;/li&gt; &#xA; &lt;li&gt;Selective download in multi-file torrent/Metalink&lt;/li&gt; &#xA; &lt;li&gt;Chunk checksum validation in Metalink&lt;/li&gt; &#xA; &lt;li&gt;Can disable segmented downloading in Metalink&lt;/li&gt; &#xA; &lt;li&gt;Netrc support&lt;/li&gt; &#xA; &lt;li&gt;Configuration file support&lt;/li&gt; &#xA; &lt;li&gt;Download URIs found in a text file or stdin and the destination directory and output file name can be specified optionally&lt;/li&gt; &#xA; &lt;li&gt;Parameterized URI support&lt;/li&gt; &#xA; &lt;li&gt;IPv6 support with Happy Eyeballs&lt;/li&gt; &#xA; &lt;li&gt;Disk cache to reduce disk activity&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versioning and release schedule&lt;/h2&gt; &#xA;&lt;p&gt;We use 3 numbers for aria2 version: MAJOR.MINOR.PATCH. We will ship MINOR update on 15th of every month. We may skip a release if we have no changes since the last release. The feature and documentation freeze happens 10 days before the release day (5th day of the month) for translation teams. We will raise an issue about the upcoming release around that day.&lt;/p&gt; &#xA;&lt;p&gt;We may release PATCH releases between regular releases if we have security issues.&lt;/p&gt; &#xA;&lt;p&gt;MAJOR version will stay at 1 for the time being.&lt;/p&gt; &#xA;&lt;h2&gt;How to get source code&lt;/h2&gt; &#xA;&lt;p&gt;We maintain the source code at Github: &lt;a href=&#34;https://github.com/aria2/aria2&#34;&gt;https://github.com/aria2/aria2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To get the latest source code, run following command::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/aria2/aria2.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create aria2 directory in your current directory and source files are stored there.&lt;/p&gt; &#xA;&lt;h2&gt;Dependency&lt;/h2&gt; &#xA;&lt;p&gt;======================== ======================================== features dependency ======================== ======================================== HTTPS OSX or GnuTLS or OpenSSL or Windows SFTP libssh2 BitTorrent None. Optional: libnettle+libgmp or libgcrypt or OpenSSL (see note) Metalink libxml2 or Expat. Checksum None. Optional: OSX or libnettle or libgcrypt or OpenSSL or Windows (see note) gzip, deflate in HTTP zlib Async DNS C-Ares Firefox3/Chromium cookie libsqlite3 XML-RPC libxml2 or Expat. JSON-RPC over WebSocket libnettle or libgcrypt or OpenSSL ======================== ========================================&lt;/p&gt; &#xA;&lt;p&gt;.. note::&lt;/p&gt; &#xA;&lt;p&gt;libxml2 has precedence over Expat if both libraries are installed. If you prefer Expat, run configure with &lt;code&gt;--without-libxml2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;.. note::&lt;/p&gt; &#xA;&lt;p&gt;On Apple OSX the OS-level SSL/TLS support will be preferred. Hence neither GnuTLS nor OpenSSL are required on that platform. If you&#39;d like to disable this behavior, run configure with &lt;code&gt;--without-appletls&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GnuTLS has precedence over OpenSSL if both libraries are installed. If you prefer OpenSSL, run configure with &lt;code&gt;--without-gnutls&lt;/code&gt; &lt;code&gt;--with-openssl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Windows there is SSL implementation available that is based on the native Windows SSL capabilities (Schannel) and it will be preferred. Hence neither GnuTLS nor OpenSSL are required on that platform. If you&#39;d like to disable this behavior, run configure with &lt;code&gt;--without-wintls&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;.. note::&lt;/p&gt; &#xA;&lt;p&gt;On Apple OSX the OS-level checksum support will be preferred, unless aria2 is configured with &lt;code&gt;--without-appletls&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;libnettle has precedence over libgcrypt if both libraries are installed. If you prefer libgcrypt, run configure with &lt;code&gt;--without-libnettle --with-libgcrypt&lt;/code&gt;. If OpenSSL is selected over GnuTLS, neither libnettle nor libgcrypt will be used.&lt;/p&gt; &#xA;&lt;p&gt;If none of the optional dependencies are installed, an internal implementation that only supports md5 and sha1 will be used.&lt;/p&gt; &#xA;&lt;p&gt;On Windows there is SSL implementation available that is based on the native Windows capabilities and it will be preferred, unless aria2 is configured with &lt;code&gt;--without-wintls&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A user can have one of the following configurations for SSL and crypto libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenSSL&lt;/li&gt; &#xA; &lt;li&gt;GnuTLS + libgcrypt&lt;/li&gt; &#xA; &lt;li&gt;GnuTLS + libnettle&lt;/li&gt; &#xA; &lt;li&gt;Apple TLS (OSX only)&lt;/li&gt; &#xA; &lt;li&gt;Windows TLS (Windows only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can disable BitTorrent and Metalink support by providing &lt;code&gt;--disable-bittorrent&lt;/code&gt; and &lt;code&gt;--disable-metalink&lt;/code&gt; to the configure script respectively.&lt;/p&gt; &#xA;&lt;p&gt;In order to enable async DNS support, you need c-ares.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;c-ares: &lt;a href=&#34;http://c-ares.haxx.se/&#34;&gt;http://c-ares.haxx.se/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;aria2 is primarily written in C++. Initially it was written based on C++98/C++03 standard features. We are now migrating aria2 to C++11 standard. The current source code requires C++11 aware compiler. For well-known compilers, such as g++ and clang, the &lt;code&gt;-std=c++11&lt;/code&gt; or &lt;code&gt;-std=c++0x&lt;/code&gt; flag must be supported.&lt;/p&gt; &#xA;&lt;p&gt;In order to build aria2 from the source package, you need following development packages (package name may vary depending on the distribution you use):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libgnutls-dev (Required for HTTPS, BitTorrent, Checksum support)&lt;/li&gt; &#xA; &lt;li&gt;nettle-dev (Required for BitTorrent, Checksum support)&lt;/li&gt; &#xA; &lt;li&gt;libgmp-dev (Required for BitTorrent)&lt;/li&gt; &#xA; &lt;li&gt;libssh2-1-dev (Required for SFTP support)&lt;/li&gt; &#xA; &lt;li&gt;libc-ares-dev (Required for async DNS support)&lt;/li&gt; &#xA; &lt;li&gt;libxml2-dev (Required for Metalink support)&lt;/li&gt; &#xA; &lt;li&gt;zlib1g-dev (Required for gzip, deflate decoding support in HTTP)&lt;/li&gt; &#xA; &lt;li&gt;libsqlite3-dev (Required for Firefox3/Chromium cookie support)&lt;/li&gt; &#xA; &lt;li&gt;pkg-config (Required to detect installed libraries)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use libgcrypt-dev instead of nettle-dev and libgmp-dev:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libgpg-error-dev (Required for BitTorrent, Checksum support)&lt;/li&gt; &#xA; &lt;li&gt;libgcrypt-dev (Required for BitTorrent, Checksum support)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use libssl-dev instead of libgnutls-dev, nettle-dev, libgmp-dev, libgpg-error-dev and libgcrypt-dev:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libssl-dev (Required for HTTPS, BitTorrent, Checksum support)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use libexpat1-dev instead of libxml2-dev:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libexpat1-dev (Required for Metalink support)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Fedora you need the following packages: gcc, gcc-c++, kernel-devel, libgcrypt-devel, libxml2-devel, openssl-devel, gettext-devel, cppunit&lt;/p&gt; &#xA;&lt;p&gt;If you downloaded source code from git repository, you have to install following packages to get autoconf macros:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libxml2-dev&lt;/li&gt; &#xA; &lt;li&gt;libcppunit-dev&lt;/li&gt; &#xA; &lt;li&gt;autoconf&lt;/li&gt; &#xA; &lt;li&gt;automake&lt;/li&gt; &#xA; &lt;li&gt;autotools-dev&lt;/li&gt; &#xA; &lt;li&gt;autopoint&lt;/li&gt; &#xA; &lt;li&gt;libtool&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And run following command to generate configure script and other files necessary to build the program::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ autoreconf -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also you need &lt;code&gt;Sphinx &amp;lt;http://sphinx-doc.org/&amp;gt;&lt;/code&gt;_ to build man page.&lt;/p&gt; &#xA;&lt;p&gt;If you are building aria2 for Mac OS X, take a look at the makerelease-osx.mk GNU Make makefile.&lt;/p&gt; &#xA;&lt;p&gt;The quickest way to build aria2 is first run configure script::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build statically linked aria2, use &lt;code&gt;ARIA2_STATIC=yes&lt;/code&gt; command-line option::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure ARIA2_STATIC=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After configuration is done, run &lt;code&gt;make&lt;/code&gt; to compile the program::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;Cross-compiling Windows binary&lt;/code&gt;_ to create a Windows binary. See &lt;code&gt;Cross-compiling Android binary&lt;/code&gt;_ to create an Android binary.&lt;/p&gt; &#xA;&lt;p&gt;The configure script checks available libraries and enables as many features as possible except for experimental features not enabled by default.&lt;/p&gt; &#xA;&lt;p&gt;Since 1.1.0, aria2 checks the certificate of HTTPS servers by default. If you build with OpenSSL or the recent version of GnuTLS which has &lt;code&gt;gnutls_certificate_set_x509_system_trust()&lt;/code&gt; function and the library is properly configured to locate the system-wide CA certificates store, aria2 will automatically load those certificates at the startup. If it is not the case, I recommend to supply the path to the CA bundle file. For example, in Debian the path to CA bundle file is &#39;/etc/ssl/certs/ca-certificates.crt&#39; (in ca-certificates package). This may vary depending on your distribution. You can give it to configure script using &lt;code&gt;--with-ca-bundle option&lt;/code&gt;::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --with-ca-bundle=&#39;/etc/ssl/certs/ca-certificates.crt&#39;&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without &lt;code&gt;--with-ca-bundle&lt;/code&gt; option, you will encounter the error when accessing HTTPS servers because the certificate cannot be verified without CA bundle. In such case, you can specify the CA bundle file using aria2&#39;s &lt;code&gt;--ca-certificate&lt;/code&gt; option. If you don&#39;t have CA bundle file installed, then the last resort is disable the certificate validation using &lt;code&gt;--check-certificate=false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Using the native OSX (AppleTLS) and/or Windows (WinTLS) implementation will automatically use the system certificate store, so &lt;code&gt;--with-ca-bundle&lt;/code&gt; is not necessary and will be ignored when using these implementations.&lt;/p&gt; &#xA;&lt;p&gt;By default, the bash_completion file named &lt;code&gt;aria2c&lt;/code&gt; is installed to the directory &lt;code&gt;$prefix/share/doc/aria2/bash_completion&lt;/code&gt;. To change the install directory of the file, use &lt;code&gt;--with-bashcompletiondir&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;After a &lt;code&gt;make&lt;/code&gt; the executable is located at &lt;code&gt;src/aria2c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;aria2 uses CppUnit for automated unit testing. To run the unit test::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cross-compiling Windows binary&lt;/h2&gt; &#xA;&lt;p&gt;In this section, we describe how to build a Windows binary using a mingw-w64 (&lt;a href=&#34;http://mingw-w64.org/doku.php&#34;&gt;http://mingw-w64.org/doku.php&lt;/a&gt;) cross-compiler on Debian Linux. The MinGW (&lt;a href=&#34;http://www.mingw.org/&#34;&gt;http://www.mingw.org/&lt;/a&gt;) may not be able to build aria2.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to build Windows binary is use Dockerfile.mingw. See Dockerfile.mingw how to build binary. If you cannot use Dockerfile, then continue to read following paragraphs.&lt;/p&gt; &#xA;&lt;p&gt;Basically, after compiling and installing depended libraries, you can do cross-compile just passing appropriate &lt;code&gt;--host&lt;/code&gt; option and specifying &lt;code&gt;CPPFLAGS&lt;/code&gt;, &lt;code&gt;LDFLAGS&lt;/code&gt; and &lt;code&gt;PKG_CONFIG_LIBDIR&lt;/code&gt; variables to configure. For convenience and lowering our own development cost, we provide easier way to configure the build settings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mingw-config&lt;/code&gt; script is a configure script wrapper for mingw-w64. We use it to create official Windows build. This script assumes following libraries have been built for cross-compile:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;c-ares&lt;/li&gt; &#xA; &lt;li&gt;expat&lt;/li&gt; &#xA; &lt;li&gt;sqlite3&lt;/li&gt; &#xA; &lt;li&gt;zlib&lt;/li&gt; &#xA; &lt;li&gt;libssh2&lt;/li&gt; &#xA; &lt;li&gt;cppunit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some environment variables can be adjusted to change build settings:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HOST&lt;/code&gt; cross-compile to build programs to run on &lt;code&gt;HOST&lt;/code&gt;. It defaults to &lt;code&gt;i686-w64-mingw32&lt;/code&gt;. To build 64bit binary, specify &lt;code&gt;x86_64-w64-mingw32&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PREFIX&lt;/code&gt; Prefix to the directory where dependent libraries are installed. It defaults to &lt;code&gt;/usr/local/$HOST&lt;/code&gt;. &lt;code&gt;-I$PREFIX/include&lt;/code&gt; will be added to &lt;code&gt;CPPFLAGS&lt;/code&gt;. &lt;code&gt;-L$PREFIX/lib&lt;/code&gt; will be added to &lt;code&gt;LDFLAGS&lt;/code&gt;. &lt;code&gt;$PREFIX/lib/pkgconfig&lt;/code&gt; will be set to &lt;code&gt;PKG_CONFIG_LIBDIR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, to build 64bit binary do this::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ HOST=x86_64-w64-mingw32 ./mingw-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want libaria2 dll with &lt;code&gt;--enable-libaria2&lt;/code&gt;, then don&#39;t use &lt;code&gt;ARIA2_STATIC=yes&lt;/code&gt; and prepare the DLL version of external libraries.&lt;/p&gt; &#xA;&lt;h2&gt;Cross-compiling Android binary&lt;/h2&gt; &#xA;&lt;p&gt;In this section, we describe how to build Android binary using Android NDK cross-compiler on Debian Linux.&lt;/p&gt; &#xA;&lt;p&gt;At the time of this writing, Android NDK r21e should compile aria2 without errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;android-config&lt;/code&gt; script is a configure script wrapper for Android build. We use it to create official Android build. This script assumes the following libraries have been built for cross-compile:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;c-ares&lt;/li&gt; &#xA; &lt;li&gt;openssl&lt;/li&gt; &#xA; &lt;li&gt;expat&lt;/li&gt; &#xA; &lt;li&gt;zlib&lt;/li&gt; &#xA; &lt;li&gt;libssh2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When building the above libraries, make sure that disable shared library and enable only static library. We are going to link those libraries statically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;android-config&lt;/code&gt; assumes that &lt;code&gt;$ANDROID_HOME&lt;/code&gt; and &lt;code&gt;$NDK&lt;/code&gt; environment variables are defined.&lt;/p&gt; &#xA;&lt;p&gt;We currently use Android NDK r21e. &lt;code&gt;$NDK&lt;/code&gt; should point to the directory to Anroid NDK. The build tools will be found under &lt;code&gt;$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All the dependent libraries must be installed under &lt;code&gt;$ANDROID_HOME/usr/local&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After &lt;code&gt;android-config&lt;/code&gt;, run &lt;code&gt;make&lt;/code&gt; to compile sources.&lt;/p&gt; &#xA;&lt;h2&gt;Building documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Sphinx &amp;lt;http://sphinx-doc.org/&amp;gt;&lt;/code&gt;_ is used to build the documentation. aria2 man pages will be build when you run &lt;code&gt;make&lt;/code&gt; if they are not up-to-date. You can also build HTML version of aria2 man page by &lt;code&gt;make html&lt;/code&gt;. The HTML version manual is also available at &lt;code&gt;online &amp;lt;https://aria2.github.io/manual/en/html/&amp;gt;&lt;/code&gt;_ (&lt;code&gt;Russian translation &amp;lt;https://aria2.github.io/manual/ru/html/&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;Portuguese translation &amp;lt;https://aria2.github.io/manual/pt/html/&amp;gt;&lt;/code&gt;&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;BitTorrent&lt;/h2&gt; &#xA;&lt;p&gt;About file names&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The file name of the downloaded file is determined as follows:&#xA;&#xA;single-file mode&#xA;    If &#34;name&#34; key is present in .torrent file, file name is the value&#xA;    of &#34;name&#34; key. Otherwise, file name is the base name of .torrent&#xA;    file appended by &#34;.file&#34;. For example, .torrent file is&#xA;    &#34;test.torrent&#34;, then file name is &#34;test.torrent.file&#34;.  The&#xA;    directory to store the downloaded file can be specified by -d&#xA;    option.&#xA;&#xA;multi-file mode&#xA;    The complete directory/file structure mentioned in .torrent file&#xA;    is created.  The directory to store the top directory of&#xA;    downloaded files can be specified by -d option.&#xA;&#xA;Before download starts, a complete directory structure is created if&#xA;needed. By default, aria2 opens at most 100 files mentioned in&#xA;.torrent file, and directly writes to and reads from these files. &#xA;The number of files to open simultaneously can be controlled by&#xA;``--bt-max-open-files`` option.&#xA;&#xA;DHT&#xA;~~~&#xA;&#xA;aria2 supports mainline compatible DHT. By default, the routing table&#xA;for IPv4 DHT is saved to ``$XDG_CACHE_HOME/aria2/dht.dat`` and the&#xA;routing table for IPv6 DHT is saved to&#xA;``$XDG_CACHE_HOME/aria2/dht6.dat`` unless files exist at&#xA;``$HOME/.aria2/dht.dat`` or ``$HOME/.aria2/dht6.dat``. aria2 uses same&#xA;port number to listen on for both IPv4 and IPv6 DHT.&#xA;&#xA;UDP tracker&#xA;~~~~~~~~~~~&#xA;&#xA;UDP tracker support is enabled when IPv4 DHT is enabled.  The port&#xA;number of UDP tracker is shared with DHT. Use ``--dht-listen-port``&#xA;option to change the port number.&#xA;&#xA;Other things should be noted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-o&lt;/code&gt; option is used to change the file name of .torrent file itself, not a file name of a file in .torrent file. For this purpose, use &lt;code&gt;--index-out&lt;/code&gt; option instead.&lt;/li&gt; &#xA; &lt;li&gt;The port numbers that aria2 uses by default are 6881-6999 for TCP and UDP.&lt;/li&gt; &#xA; &lt;li&gt;aria2 doesn&#39;t configure port-forwarding automatically. Please configure your router or firewall manually.&lt;/li&gt; &#xA; &lt;li&gt;The maximum number of peers is 55. This limit may be exceeded when download rate is low. This download rate can be adjusted using &lt;code&gt;--bt-request-peer-speed-limit&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;As of release 0.10.0, aria2 stops sending request message after selective download completes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Metalink&lt;/h2&gt; &#xA;&lt;p&gt;The current implementation supports HTTP(S)/FTP/SFTP/BitTorrent. The other P2P protocols are ignored. Both Metalink4 (RFC 5854) and Metalink version 3.0 documents are supported.&lt;/p&gt; &#xA;&lt;p&gt;For checksum verification, md5, sha-1, sha-224, sha-256, sha-384 and sha-512 are supported. If multiple hash algorithms are provided, aria2 uses stronger one. If whole file checksum verification fails, aria2 doesn&#39;t retry the download and just exits with non-zero return code.&lt;/p&gt; &#xA;&lt;p&gt;The supported user preferences are version, language, location, protocol and os.&lt;/p&gt; &#xA;&lt;p&gt;If chunk checksums are provided in Metalink file, aria2 automatically validates chunks of data during download. This behavior can be turned off by a command-line option.&lt;/p&gt; &#xA;&lt;p&gt;If signature is included in a Metalink file, aria2 saves it as a file after the completion of the download. The file name is download file name + &#34;.sig&#34;. If same file already exists, the signature file is not saved.&lt;/p&gt; &#xA;&lt;p&gt;In Metalink4, multi-file torrent could appear in metalink:metaurl element. Since aria2 cannot download 2 same torrents at the same time, aria2 groups files in metalink:file element which has same BitTorrent metaurl and downloads them from a single BitTorrent swarm. This is basically multi-file torrent download with file selection, so the adjacent files which is not in Metalink document but shares same piece with selected file are also created.&lt;/p&gt; &#xA;&lt;p&gt;If relative URI is specified in metalink:url or metalink:metaurl element, aria2 uses the URI of Metalink file as base URI to resolve the relative URI. If relative URI is found in Metalink file which is read from local disk, aria2 uses the value of &lt;code&gt;--metalink-base-uri&lt;/code&gt; option as base URI. If this option is not specified, the relative URI will be ignored.&lt;/p&gt; &#xA;&lt;h2&gt;Metalink/HTTP&lt;/h2&gt; &#xA;&lt;p&gt;The current implementation only uses rel=duplicate links only. aria2 understands Digest header fields and check whether it matches the digest value from other sources. If it differs, drop connection. aria2 also uses this digest value to perform checksum verification after download finished. aria2 recognizes geo value. To tell aria2 which location you prefer, you can use &lt;code&gt;--metalink-location&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h2&gt;netrc&lt;/h2&gt; &#xA;&lt;p&gt;netrc support is enabled by default for HTTP(S)/FTP/SFTP. To disable netrc support, specify -n command-line option. Your .netrc file should have correct permissions(600).&lt;/p&gt; &#xA;&lt;h2&gt;WebSocket&lt;/h2&gt; &#xA;&lt;p&gt;The WebSocket server embedded in aria2 implements the specification defined in RFC 6455. The supported protocol version is 13.&lt;/p&gt; &#xA;&lt;h2&gt;libaria2&lt;/h2&gt; &#xA;&lt;p&gt;The libaria2 is a C++ library which offers aria2 functionality to the client code. Currently, libaria2 is not built by default. To enable libaria2, use &lt;code&gt;--enable-libaria2&lt;/code&gt; configure option. By default, only the shared library is built. To build static library, use &lt;code&gt;--enable-static&lt;/code&gt; configure option as well. See libaria2 documentation to know how to use API.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;aria2 Online Manual &amp;lt;https://aria2.github.io/manual/en/html/&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://aria2.github.io/&#34;&gt;https://aria2.github.io/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 959 FILE TRANSFER PROTOCOL (FTP) &amp;lt;http://tools.ietf.org/html/rfc959&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 1738 Uniform Resource Locators (URL) &amp;lt;http://tools.ietf.org/html/rfc1738&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 2428 FTP Extensions for IPv6 and NATs &amp;lt;http://tools.ietf.org/html/rfc2428&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 2616 Hypertext Transfer Protocol -- HTTP/1.1 &amp;lt;http://tools.ietf.org/html/rfc2616&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 3659 Extensions to FTP &amp;lt;http://tools.ietf.org/html/rfc3659&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 3986 Uniform Resource Identifier (URI): Generic Syntax &amp;lt;http://tools.ietf.org/html/rfc3986&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 4038 Application Aspects of IPv6 Transition &amp;lt;http://tools.ietf.org/html/rfc4038&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 5854 The Metalink Download Description Format &amp;lt;http://tools.ietf.org/html/rfc5854&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 6249 Metalink/HTTP: Mirrors and Hashes &amp;lt;http://tools.ietf.org/html/rfc6249&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 6265 HTTP State Management Mechanism &amp;lt;http://tools.ietf.org/html/rfc6265&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 6266 Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP) &amp;lt;http://tools.ietf.org/html/rfc6266&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 6455 The WebSocket Protocol &amp;lt;http://tools.ietf.org/html/rfc6455&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RFC 6555 Happy Eyeballs: Success with Dual-Stack Hosts &amp;lt;http://tools.ietf.org/html/rfc6555&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;The BitTorrent Protocol Specification &amp;lt;http://www.bittorrent.org/beps/bep_0003.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BitTorrent: DHT Protocol &amp;lt;http://www.bittorrent.org/beps/bep_0005.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BitTorrent: Fast Extension &amp;lt;http://www.bittorrent.org/beps/bep_0006.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BitTorrent: IPv6 Tracker Extension &amp;lt;http://www.bittorrent.org/beps/bep_0007.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BitTorrent: Extension for Peers to Send Metadata Files &amp;lt;http://www.bittorrent.org/beps/bep_0009.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BitTorrent: Extension Protocol &amp;lt;http://www.bittorrent.org/beps/bep_0010.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BitTorrent: Multitracker Metadata Extension &amp;lt;http://www.bittorrent.org/beps/bep_0012.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BitTorrent: UDP Tracker Protocol for BitTorrent &amp;lt;http://www.bittorrent.org/beps/bep_0015.html&amp;gt;&lt;/code&gt;_ and &lt;code&gt;BitTorrent udp-tracker protocol specification &amp;lt;http://www.rasterbar.com/products/libtorrent/udp_tracker_protocol.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BitTorrent: WebSeed - HTTP/FTP Seeding (GetRight style) &amp;lt;http://www.bittorrent.org/beps/bep_0019.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BitTorrent: Private Torrents &amp;lt;http://www.bittorrent.org/beps/bep_0027.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BitTorrent: BitTorrent DHT Extensions for IPv6 &amp;lt;http://www.bittorrent.org/beps/bep_0032.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BitTorrent: Message Stream Encryption &amp;lt;http://wiki.vuze.com/w/Message_Stream_Encryption&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Kademlia: A Peer-to-peer Information System Based on the XOR Metric &amp;lt;https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>