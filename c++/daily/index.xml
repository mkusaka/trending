<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-03T01:23:46Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bpftrace/bpftrace</title>
    <updated>2024-02-03T01:23:46Z</updated>
    <id>tag:github.com,2024-02-03:/bpftrace/bpftrace</id>
    <link href="https://github.com/bpftrace/bpftrace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High-level tracing language for Linux eBPF&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bpftrace&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bpftrace/bpftrace/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/bpftrace/bpftrace/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://webchat.oftc.net/?channels=bpftrace&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/IRC-bpftrace-blue.svg?sanitize=true&#34; alt=&#34;IRC#bpftrace&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bpftrace/bpftrace/actions/workflows/codeql.yml&#34;&gt;&lt;img src=&#34;https://github.com/bpftrace/bpftrace/actions/workflows/codeql.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;bpftrace is a high-level tracing language for Linux enhanced Berkeley Packet Filter (eBPF) available in recent Linux kernels (4.x). bpftrace uses LLVM as a backend to compile scripts to BPF-bytecode and makes use of &lt;a href=&#34;https://github.com/iovisor/bcc&#34;&gt;BCC&lt;/a&gt; for interacting with the Linux BPF system, as well as existing Linux tracing capabilities: kernel dynamic tracing (kprobes), user-level dynamic tracing (uprobes), and tracepoints. The bpftrace language is inspired by awk and C, and predecessor tracers such as DTrace and SystemTap. bpftrace was created by &lt;a href=&#34;https://github.com/ajor&#34;&gt;Alastair Robertson&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about bpftrace, see the &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/man/adoc/bpftrace.adoc&#34;&gt;Manual&lt;/a&gt; the &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/docs/reference_guide.md&#34;&gt;Reference Guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/docs/tutorial_one_liners.md&#34;&gt;One-Liner Tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We are also holding regular &lt;a href=&#34;https://docs.google.com/document/d/1nt010RfL4s4gydhCPSJ-Z5mnFMFuD4NrcpVmUcyvu2E/edit?usp=sharing&#34;&gt;office hours&lt;/a&gt; open to the public.&lt;/p&gt; &#xA;&lt;h2&gt;One-Liners&lt;/h2&gt; &#xA;&lt;p&gt;The following one-liners demonstrate different capabilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Files opened by process&#xA;bpftrace -e &#39;tracepoint:syscalls:sys_enter_open { printf(&#34;%s %s\n&#34;, comm, str(args-&amp;gt;filename)); }&#39;&#xA;&#xA;# Syscall count by program&#xA;bpftrace -e &#39;tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }&#39;&#xA;&#xA;# Read bytes by process:&#xA;bpftrace -e &#39;tracepoint:syscalls:sys_exit_read /args-&amp;gt;ret/ { @[comm] = sum(args-&amp;gt;ret); }&#39;&#xA;&#xA;# Read size distribution by process:&#xA;bpftrace -e &#39;tracepoint:syscalls:sys_exit_read { @[comm] = hist(args-&amp;gt;ret); }&#39;&#xA;&#xA;# Show per-second syscall rates:&#xA;bpftrace -e &#39;tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }&#39;&#xA;&#xA;# Trace disk size by process&#xA;bpftrace -e &#39;tracepoint:block:block_rq_issue { printf(&#34;%d %s %d\n&#34;, pid, comm, args-&amp;gt;bytes); }&#39;&#xA;&#xA;# Count page faults by process&#xA;bpftrace -e &#39;software:faults:1 { @[comm] = count(); }&#39;&#xA;&#xA;# Count LLC cache misses by process name and PID (uses PMCs):&#xA;bpftrace -e &#39;hardware:cache-misses:1000000 { @[comm, pid] = count(); }&#39;&#xA;&#xA;# Profile user-level stacks at 99 Hertz, for PID 189:&#xA;bpftrace -e &#39;profile:hz:99 /pid == 189/ { @[ustack] = count(); }&#39;&#xA;&#xA;# Files opened, for processes in the root cgroup-v2&#xA;bpftrace -e &#39;tracepoint:syscalls:sys_enter_openat /cgroup == cgroupid(&#34;/sys/fs/cgroup/unified/mycg&#34;)/ { printf(&#34;%s\n&#34;, str(args-&amp;gt;filename)); }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More powerful scripts can easily be constructed. See &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools&#34;&gt;Tools&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;For build and install instructions, see &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;p&gt;bpftrace contains various tools, which also serve as examples of programming in the bpftrace language.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/bashreadline.bt&#34;&gt;bashreadline.bt&lt;/a&gt;: Print entered bash commands system wide. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/bashreadline_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/biolatency.bt&#34;&gt;biolatency.bt&lt;/a&gt;: Block I/O latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/biolatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/biosnoop.bt&#34;&gt;biosnoop.bt&lt;/a&gt;: Block I/O tracing tool, showing per I/O latency. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/biosnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/biostacks.bt&#34;&gt;biostacks.bt&lt;/a&gt;: Show disk I/O latency with initialization stacks. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/biostacks_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/bitesize.bt&#34;&gt;bitesize.bt&lt;/a&gt;: Show disk I/O size as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/bitesize_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/capable.bt&#34;&gt;capable.bt&lt;/a&gt;: Trace security capability checks. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/capable_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/cpuwalk.bt&#34;&gt;cpuwalk.bt&lt;/a&gt;: Sample which CPUs are executing processes. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/cpuwalk_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/dcsnoop.bt&#34;&gt;dcsnoop.bt&lt;/a&gt;: Trace directory entry cache (dcache) lookups. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/dcsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/execsnoop.bt&#34;&gt;execsnoop.bt&lt;/a&gt;: Trace new processes via exec() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/execsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/gethostlatency.bt&#34;&gt;gethostlatency.bt&lt;/a&gt;: Show latency for getaddrinfo/gethostbyname[2] calls. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/gethostlatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/killsnoop.bt&#34;&gt;killsnoop.bt&lt;/a&gt;: Trace signals issued by the kill() syscall. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/killsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/loads.bt&#34;&gt;loads.bt&lt;/a&gt;: Print load averages. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/loads_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/mdflush.bt&#34;&gt;mdflush.bt&lt;/a&gt;: Trace md flush events. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/mdflush_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/naptime.bt&#34;&gt;naptime.bt&lt;/a&gt;: Show voluntary sleep calls. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/naptime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/opensnoop.bt&#34;&gt;opensnoop.bt&lt;/a&gt;: Trace open() syscalls showing filenames. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/opensnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/oomkill.bt&#34;&gt;oomkill.bt&lt;/a&gt;: Trace OOM killer. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/oomkill_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/pidpersec.bt&#34;&gt;pidpersec.bt&lt;/a&gt;: Count new processes (via fork). &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/pidpersec_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/runqlat.bt&#34;&gt;runqlat.bt&lt;/a&gt;: CPU scheduler run queue latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/runqlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/runqlen.bt&#34;&gt;runqlen.bt&lt;/a&gt;: CPU scheduler run queue length as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/runqlen_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/setuids.bt&#34;&gt;setuids.bt&lt;/a&gt;: Trace the setuid syscalls: privilege escalation. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/setuids_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/ssllatency.bt&#34;&gt;ssllatency.bt&lt;/a&gt;: Summarize SSL/TLS handshake latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/ssllatency_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/sslsnoop.bt&#34;&gt;sslsnoop.bt&lt;/a&gt;: Trace SSL/TLS handshake, showing latency and return value. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/sslsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/statsnoop.bt&#34;&gt;statsnoop.bt&lt;/a&gt;: Trace stat() syscalls for general debugging. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/statsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/swapin.bt&#34;&gt;swapin.bt&lt;/a&gt;: Show swapins by process. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/swapin_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/syncsnoop.bt&#34;&gt;syncsnoop.bt&lt;/a&gt;: Trace sync() variety of syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/syncsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/syscount.bt&#34;&gt;syscount.bt&lt;/a&gt;: Count system calls. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/syscount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/tcpaccept.bt&#34;&gt;tcpaccept.bt&lt;/a&gt;: Trace TCP passive connections (accept()). &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/tcpaccept_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/tcpconnect.bt&#34;&gt;tcpconnect.bt&lt;/a&gt;: Trace TCP active connections (connect()). &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/tcpconnect_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/tcpdrop.bt&#34;&gt;tcpdrop.bt&lt;/a&gt;: Trace kernel-based TCP packet drops with details. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/tcpdrop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/tcplife.bt&#34;&gt;tcplife.bt&lt;/a&gt;: Trace TCP session lifespans with connection details. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/tcplife_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/tcpretrans.bt&#34;&gt;tcpretrans.bt&lt;/a&gt;: Trace TCP retransmits. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/tcpretrans_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/tcpsynbl.bt&#34;&gt;tcpsynbl.bt&lt;/a&gt;: Show TCP SYN backlog as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/tcpsynbl_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/threadsnoop.bt&#34;&gt;threadsnoop.bt&lt;/a&gt;: List new thread creation. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/threadsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/undump.bt&#34;&gt;undump.bt&lt;/a&gt;: Capture UNIX domain socket packages. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/undump_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/vfscount.bt&#34;&gt;vfscount.bt&lt;/a&gt;: Count VFS calls. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/vfscount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/vfsstat.bt&#34;&gt;vfsstat.bt&lt;/a&gt;: Count some VFS calls, with per-second summaries. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/vfsstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/writeback.bt&#34;&gt;writeback.bt&lt;/a&gt;: Trace file system writeback events with details. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/writeback_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/xfsdist.bt&#34;&gt;xfsdist.bt&lt;/a&gt;: Summarize XFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/tools/xfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more eBPF observability tools, see &lt;a href=&#34;https://github.com/iovisor/bcc#tools&#34;&gt;bcc tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Probe types&lt;/h2&gt; &#xA;&lt;center&gt;&#xA; &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/images/bpftrace_probes_2018.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/images/bpftrace_probes_2018.png&#34; border=&#34;0&#34; width=&#34;700&#34;&gt;&lt;/a&gt;&#xA;&lt;/center&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/docs/reference_guide.md&#34;&gt;Reference Guide&lt;/a&gt; for more detail.&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;bpftrace has several plugins/definitions, integrating the syntax into your editor.&lt;/p&gt; &#xA;&lt;!-- Feel free to add your own plugins below, in alphabetical order --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/jgkamat/bpftrace-mode&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mmarchini/bpftrace.vim&#34;&gt;Vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bolinfest/bpftrace-vscode&#34;&gt;VS Code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For additional help / discussion, please use our &lt;a href=&#34;https://github.com/bpftrace/bpftrace/discussions&#34;&gt;discussions&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Have ideas for new bpftrace tools? &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/CONTRIBUTING-TOOLS.md&#34;&gt;CONTRIBUTING-TOOLS.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bugs reports and feature requests: &lt;a href=&#34;https://github.com/bpftrace/bpftrace/issues&#34;&gt;Issue Tracker&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;bpftrace development IRC: #bpftrace at irc.oftc.net&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Development guidelines: &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/docs/developers.md&#34;&gt;developers.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/bpftrace/bpftrace/master/docs/developers.md&#34;&gt;developers.md&lt;/a&gt; for all development related topics.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2019 Alastair Robertson&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
</feed>