<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-12T02:21:06Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lsecqt/OffensiveCpp</title>
    <updated>2023-04-12T02:21:06Z</updated>
    <id>tag:github.com,2023-04-12:/lsecqt/OffensiveCpp</id>
    <link href="https://github.com/lsecqt/OffensiveCpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo contains C/C++ snippets that can be handy in specific offensive scenarios.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OffensiveCpp&lt;/h1&gt; &#xA;&lt;p&gt;Offensive C++ is a collection of offensive security snippets written in C++. It includes various tools for penetration testing and exploit development.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsecqt/OffensiveCpp/main/#offensivecpp&#34;&gt;OffensiveCpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsecqt/OffensiveCpp/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsecqt/OffensiveCpp/main/#why-cc&#34;&gt;Why C/C++?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsecqt/OffensiveCpp/main/#compiling&#34;&gt;Compiling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsecqt/OffensiveCpp/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsecqt/OffensiveCpp/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;The purpose of this project is to provide colleciton of snippets that can be used for penetration testing and exploit development. Currently, the project contains snippets for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shellcode Execution&lt;/li&gt; &#xA; &lt;li&gt;Sandbox Evasion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Why C/C++?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;C/C++ is a compiled language, which means that it can produce code that is optimized for the specific target platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;C/C++ is a low-level programming language that offers a high degree of control over system resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;C/C++ allows direct memory manipulation and flexibility.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;C/C++ provides a high level of performance and efficiency.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;C/C++ offers the ability to easily interface with other low-level languages like assembly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;C/C++ has a large and active community of developers, which means that there is a wealth of resources, libraries, and tools available for exploit development.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Compiling&lt;/h1&gt; &#xA;&lt;p&gt;This repo does not come with precompiled binaries. Before compiling, make sure you have:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;A C++ compiler: Microsoft Visual C++ compiler is included in Microsoft Visual Studio or you can install the GCC compiler through MinGW or Cygwin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An Integrated Development Environment (IDE), in my case &#34;Visual Studio 2017&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The Windows SDK: The Windows SDK includes headers, libraries, and tools that are necessary for developing Windows applications in C++.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions to Offensive C++ are welcome. To contribute, please fork the repository and submit a pull request. Please make sure that your code is well-documented and tested.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Offensive C++ is released under the MIT License (&lt;a href=&#34;https://opensource.org/license/mit/&#34;&gt;https://opensource.org/license/mit/&lt;/a&gt;). Please see the LICENSE file for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SecurityAndStuff/DllLoadPath</title>
    <updated>2023-04-12T02:21:06Z</updated>
    <id>tag:github.com,2023-04-12:/SecurityAndStuff/DllLoadPath</id>
    <link href="https://github.com/SecurityAndStuff/DllLoadPath" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DllLoadPath&lt;/h1&gt; &#xA;&lt;p&gt;Showcasing two different techniques for changing DLL load order by using undocumented APIs. These are not novel techniques but I never saw them documented anywhere.&lt;/p&gt; &#xA;&lt;p&gt;The proper signatures for RtlCreateUserProcess and RtlCreateProcessParameters are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;RtlCreateUserProcess(&#xA; IN PUNICODE_STRING      ImagePath,&#xA; IN ULONG                ObjectAttributes,&#xA; IN OUT PRTL_USER_PROCESS_PARAMETERS ProcessParameters,&#xA; IN PSECURITY_DESCRIPTOR ProcessSecurityDescriptor OPTIONAL,&#xA; IN PSECURITY_DESCRIPTOR ThreadSecurityDescriptor OPTIONAL,&#xA; IN HANDLE               ParentProcess,&#xA; IN BOOLEAN              InheritHandles,&#xA; IN HANDLE               DebugPort OPTIONAL,&#xA; IN HANDLE               ExceptionPort OPTIONAL,&#xA; OUT PRTL_USER_PROCESS_INFORMATION ProcessInformation );&#xA; &#xA;RtlCreateProcessParameters(&#xA;   _Out_ PRTL_USER_PROCESS_PARAMETERS *pProcessParameters,&#xA;   _In_ PUNICODE_STRING ImagePathName,&#xA;   _In_opt_ PUNICODE_STRING DllPath,&#xA;   _In_opt_ PUNICODE_STRING CurrentDirectory,&#xA;   _In_opt_ PUNICODE_STRING CommandLine,&#xA;   _In_opt_ PVOID Environment,&#xA;   _In_opt_ PUNICODE_STRING WindowTitle,&#xA;   _In_opt_ PUNICODE_STRING DesktopInfo,&#xA;   _In_opt_ PUNICODE_STRING ShellInfo,&#xA;   _In_opt_ PUNICODE_STRING RuntimeData&#xA;   );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By changing some values in RtlCreateProcessParameters we can achieve interesting behavior.&lt;/p&gt; &#xA;&lt;h1&gt;Changing the working DLL load order directory entirely&lt;/h1&gt; &#xA;&lt;p&gt;Writing this one up for people was inspired by this &lt;a href=&#34;https://twitter.com/Octoberfest73/status/1642165975805050881&#34;&gt;tweet&lt;/a&gt;, thank you for reminding me of it :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/74931194/230739781-bef31578-3812-44f1-944f-e757d1697454.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;  const wchar_t Path[] = LR&#34;(C:/Windows/System32/WerFault.exe)&#34;;&#xA;  const wchar_t CmdLine[] = LR&#34;(C:/ProgramData/WerFault.exe)&#34;;&#xA;  const wchar_t DllLocation[] = LR&#34;()&#34;;&#xA;  ...&#xA;  status = RtlCreateProcessParameters(&amp;amp;UserProcessParam, &amp;amp;CommandLine, &amp;amp;CommandLine, NULL, &amp;amp;CommandLine, NULL, NULL, NULL, NULL, NULL);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Changing the second search path of the DLL search order&lt;/h1&gt; &#xA;&lt;p&gt;This one will will cause the application to still look into it&#39;s own directory before the one you choose, but it may come useful in some cases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/74931194/230739994-c927101d-aa32-4eba-b0a9-91f19ce86afa.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;  const wchar_t Path[] = LR&#34;(C:/Tools/TestApplication.exe)&#34;;&#xA;  const wchar_t CmdLine[] = LR&#34;()&#34;;&#xA;  const wchar_t DllLocation[] = LR&#34;(C:/ProgramData/)&#34;;&#xA;  ...&#xA;  status = RtlCreateProcessParameters(&amp;amp;UserProcessParam, &amp;amp;ImagePathName, &amp;amp;DllPath, NULL, &amp;amp;CommandLine, NULL, NULL, NULL, NULL, NULL);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Many thanks to &lt;a href=&#34;http://www.rohitab.com/discuss/topic/41379-running-native-applications-with-rtlcreateuserprocess/&#34;&gt;this post&lt;/a&gt; for helping me work out some parts.&lt;/p&gt;</summary>
  </entry>
</feed>