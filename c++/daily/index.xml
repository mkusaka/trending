<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-09T01:31:21Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>skypjack/entt</title>
    <updated>2022-08-09T01:31:21Z</updated>
    <id>tag:github.com,2022-08-09:/skypjack/entt</id>
    <link href="https://github.com/skypjack/entt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gaming meets modern C++ - a fast and reliable entity component system (ECS) and much more&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1812216/103550016-90752280-4ea8-11eb-8667-12ed2219e137.png&#34; alt=&#34;EnTT: Gaming meets modern C++&#34;&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;@cond TURN_OFF_DOXYGEN&#xA;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/skypjack/entt/actions&#34;&gt;&lt;img src=&#34;https://github.com/skypjack/entt/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/skypjack/entt&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/skypjack/entt/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godbolt.org/z/zxW73f&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/try-online-brightgreen&#34; alt=&#34;Try online&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://entt.docsforge.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-docsforge-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/skypjack/entt&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/skypjack/entt.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/5BjPWBd&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/707607951396962417?logo=discord&#34; alt=&#34;Discord channel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.me/skypjack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-paypal-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;EnTT&lt;/code&gt; has been a dream so far, we haven&#39;t found a single bug to date and it&#39;s super easy to work with&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;EnTT&lt;/code&gt; is a header-only, tiny and easy to use library for game programming and much more written in &lt;strong&gt;modern C++&lt;/strong&gt;.&lt;br&gt; &lt;a href=&#34;https://github.com/skypjack/entt/wiki/EnTT-in-Action&#34;&gt;Among others&lt;/a&gt;, it&#39;s used in &lt;a href=&#34;https://minecraft.net/en-us/attribution/&#34;&gt;&lt;strong&gt;Minecraft&lt;/strong&gt;&lt;/a&gt; by Mojang, the &lt;a href=&#34;https://developers.arcgis.com/arcgis-runtime/&#34;&gt;&lt;strong&gt;ArcGIS Runtime SDKs&lt;/strong&gt;&lt;/a&gt; by Esri and the amazing &lt;a href=&#34;https://ragdolldynamics.com/&#34;&gt;&lt;strong&gt;Ragdoll&lt;/strong&gt;&lt;/a&gt;.&lt;br&gt; If you don&#39;t see your project in the list, please open an issue, submit a PR or add the &lt;a href=&#34;https://github.com/topics/entt&#34;&gt;#entt&lt;/a&gt; tag to your &lt;em&gt;topics&lt;/em&gt;! &lt;span&gt;üëç&lt;/span&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Do you want to &lt;strong&gt;keep up with changes&lt;/strong&gt; or do you have a &lt;strong&gt;question&lt;/strong&gt; that doesn&#39;t require you to open an issue?&lt;br&gt; Join the &lt;a href=&#34;https://gitter.im/skypjack/entt&#34;&gt;gitter channel&lt;/a&gt; and the &lt;a href=&#34;https://discord.gg/5BjPWBd&#34;&gt;discord server&lt;/a&gt;, meet other users like you. The more we are, the better for everyone.&lt;br&gt; Don&#39;t forget to check the &lt;a href=&#34;https://github.com/skypjack/entt/wiki/Frequently-Asked-Questions&#34;&gt;FAQs&lt;/a&gt; and the &lt;a href=&#34;https://github.com/skypjack/entt/wiki&#34;&gt;wiki&lt;/a&gt; too. Your answers may already be there.&lt;/p&gt; &#xA;&lt;p&gt;Do you want to support &lt;code&gt;EnTT&lt;/code&gt;? Consider becoming a &lt;a href=&#34;https://github.com/users/skypjack/sponsorship&#34;&gt;&lt;strong&gt;sponsor&lt;/strong&gt;&lt;/a&gt;. Many thanks to &lt;a href=&#34;https://skypjack.github.io/sponsorship/&#34;&gt;these people&lt;/a&gt; and &lt;strong&gt;special&lt;/strong&gt; thanks to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mojang.com&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1812216/106253145-67ca1980-6217-11eb-9c0b-d93561b37098.png&#34; alt=&#34;mojang&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.ly/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1812216/106253726-271ed000-6218-11eb-98e0-c9c681925770.png&#34; alt=&#34;imgly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#introduction&#34;&gt;Introduction&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#code-example&#34;&gt;Code Example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#integration&#34;&gt;Integration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#cmake&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#natvis-support&#34;&gt;Natvis support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#packaging-tools&#34;&gt;Packaging Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#pkg-config&#34;&gt;pkg-config&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#entt-in-action&#34;&gt;EnTT in Action&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;@endcond TURN_OFF_DOXYGEN&#xA;--&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;The entity-component-system (also known as &lt;em&gt;ECS&lt;/em&gt;) is an architectural pattern used mostly in game development. For further details:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://entity-systems.wikidot.com/&#34;&gt;Entity Systems Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/&#34;&gt;Evolve Your Hierarchy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system&#34;&gt;ECS on Wikipedia&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project started off as a pure entity-component system. Over time the codebase has grown as more and more classes and functionalities were added.&lt;br&gt; Here is a brief, yet incomplete list of what it offers today:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in &lt;strong&gt;RTTI system&lt;/strong&gt; mostly similar to the standard one.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;constexpr&lt;/code&gt; utility for human readable &lt;strong&gt;resource names&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Minimal &lt;strong&gt;configuration system&lt;/strong&gt; built using the monostate pattern.&lt;/li&gt; &#xA; &lt;li&gt;Incredibly fast &lt;strong&gt;entity-component system&lt;/strong&gt; with its own &lt;em&gt;pay for what you use&lt;/em&gt; policy, unconstrained component types with optional pointer stability and hooks for storage customization.&lt;/li&gt; &#xA; &lt;li&gt;Views and groups to iterate entities and components and allow different access patterns, from &lt;strong&gt;perfect SoA&lt;/strong&gt; to fully random.&lt;/li&gt; &#xA; &lt;li&gt;A lot of &lt;strong&gt;facilities&lt;/strong&gt; built on top of the entity-component system to help the users and avoid reinventing the wheel.&lt;/li&gt; &#xA; &lt;li&gt;General purpose &lt;strong&gt;execution graph builder&lt;/strong&gt; for optimal scheduling.&lt;/li&gt; &#xA; &lt;li&gt;The smallest and most basic implementation of a &lt;strong&gt;service locator&lt;/strong&gt; ever seen.&lt;/li&gt; &#xA; &lt;li&gt;A built-in, non-intrusive and macro-free runtime &lt;strong&gt;reflection system&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Static polymorphism&lt;/strong&gt; made simple and within everyone&#39;s reach.&lt;/li&gt; &#xA; &lt;li&gt;A few homemade containers, like a sparse set based &lt;strong&gt;hash map&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;cooperative scheduler&lt;/strong&gt; for processes of any type.&lt;/li&gt; &#xA; &lt;li&gt;All that is needed for &lt;strong&gt;resource management&lt;/strong&gt; (cache, loaders, handles).&lt;/li&gt; &#xA; &lt;li&gt;Delegates, &lt;strong&gt;signal handlers&lt;/strong&gt; and a tiny event dispatcher.&lt;/li&gt; &#xA; &lt;li&gt;A general purpose &lt;strong&gt;event emitter&lt;/strong&gt; as a CRTP idiom based class template.&lt;/li&gt; &#xA; &lt;li&gt;And &lt;strong&gt;much more&lt;/strong&gt;! Check out the &lt;a href=&#34;https://github.com/skypjack/entt/wiki&#34;&gt;&lt;strong&gt;wiki&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consider this list a work in progress as well as the project. The whole API is fully documented in-code for those who are brave enough to read it.&lt;br&gt; Please, do note that all tools are also DLL-friendly now and run smoothly across boundaries.&lt;/p&gt; &#xA;&lt;p&gt;One thing known to most is that &lt;code&gt;EnTT&lt;/code&gt; is also used in &lt;strong&gt;Minecraft&lt;/strong&gt;.&lt;br&gt; Given that the game is available literally everywhere, I can confidently say that the library has been sufficiently tested on every platform that can come to mind.&lt;/p&gt; &#xA;&lt;h2&gt;Code Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;entt/entt.hpp&amp;gt;&#xA;&#xA;struct position {&#xA;    float x;&#xA;    float y;&#xA;};&#xA;&#xA;struct velocity {&#xA;    float dx;&#xA;    float dy;&#xA;};&#xA;&#xA;void update(entt::registry &amp;amp;registry) {&#xA;    auto view = registry.view&amp;lt;const position, velocity&amp;gt;();&#xA;&#xA;    // use a callback&#xA;    view.each([](const auto &amp;amp;pos, auto &amp;amp;vel) { /* ... */ });&#xA;&#xA;    // use an extended callback&#xA;    view.each([](const auto entity, const auto &amp;amp;pos, auto &amp;amp;vel) { /* ... */ });&#xA;&#xA;    // use a range-for&#xA;    for(auto [entity, pos, vel]: view.each()) {&#xA;        // ...&#xA;    }&#xA;&#xA;    // use forward iterators and get only the components of interest&#xA;    for(auto entity: view) {&#xA;        auto &amp;amp;vel = view.get&amp;lt;velocity&amp;gt;(entity);&#xA;        // ...&#xA;    }&#xA;}&#xA;&#xA;int main() {&#xA;    entt::registry registry;&#xA;&#xA;    for(auto i = 0u; i &amp;lt; 10u; ++i) {&#xA;        const auto entity = registry.create();&#xA;        registry.emplace&amp;lt;position&amp;gt;(entity, i * 1.f, i * 1.f);&#xA;        if(i % 2 == 0) { registry.emplace&amp;lt;velocity&amp;gt;(entity, i * .1f, i * .1f); }&#xA;    }&#xA;&#xA;    update(registry);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;I started developing &lt;code&gt;EnTT&lt;/code&gt; for the &lt;em&gt;wrong&lt;/em&gt; reason: my goal was to design an entity-component system to beat another well known open source library both in terms of performance and possibly memory usage.&lt;br&gt; In the end, I did it, but it wasn&#39;t very satisfying. Actually it wasn&#39;t satisfying at all. The fastest and nothing more, fairly little indeed. When I realized it, I tried hard to keep intact the great performance of &lt;code&gt;EnTT&lt;/code&gt; and to add all the features I wanted to see in &lt;em&gt;my own library&lt;/em&gt; at the same time.&lt;/p&gt; &#xA;&lt;p&gt;Nowadays, &lt;code&gt;EnTT&lt;/code&gt; is finally what I was looking for: still faster than its &lt;em&gt;competitors&lt;/em&gt;, lower memory usage in the average case, a really good API and an amazing set of features. And even more, of course.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;The proposed entity-component system is incredibly fast to iterate entities and components, this is a fact. Some compilers make a lot of optimizations because of how &lt;code&gt;EnTT&lt;/code&gt; works, some others aren&#39;t that good. In general, if we consider real world cases, &lt;code&gt;EnTT&lt;/code&gt; is somewhere between a bit and much faster than many of the other solutions around, although I couldn&#39;t check them all for obvious reasons.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested, you can compile the &lt;code&gt;benchmark&lt;/code&gt; test in release mode (to enable compiler optimizations, otherwise it would make little sense) by setting the &lt;code&gt;ENTT_BUILD_BENCHMARK&lt;/code&gt; option of &lt;code&gt;CMake&lt;/code&gt; to &lt;code&gt;ON&lt;/code&gt;, then evaluate yourself whether you&#39;re satisfied with the results or not.&lt;/p&gt; &#xA;&lt;p&gt;Honestly I got tired of updating the README file whenever there is an improvement.&lt;br&gt; There are already a lot of projects out there that use &lt;code&gt;EnTT&lt;/code&gt; as a basis for comparison (this should already tell you a lot). Many of these benchmarks are completely wrong, many others are simply incomplete, good at omitting some information and using the wrong function to compare a given feature. Certainly there are also good ones but they age quickly if nobody updates them, especially when the library they are dealing with is actively developed.&lt;/p&gt; &#xA;&lt;p&gt;The choice to use &lt;code&gt;EnTT&lt;/code&gt; should be based on its carefully designed API, its set of features and the general performance, &lt;strong&gt;not&lt;/strong&gt; because some single benchmark shows it to be the fastest tool available.&lt;/p&gt; &#xA;&lt;p&gt;In the future I&#39;ll likely try to get even better performance while still adding new features, mainly for fun.&lt;br&gt; If you want to contribute and/or have suggestions, feel free to make a PR or open an issue to discuss your idea.&lt;/p&gt; &#xA;&lt;h1&gt;Integration&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;EnTT&lt;/code&gt; is a header-only library. This means that including the &lt;code&gt;entt.hpp&lt;/code&gt; header is enough to include the library as a whole and use it. For those who are interested only in the entity-component system, consider to include the sole &lt;code&gt;entity/registry.hpp&lt;/code&gt; header instead.&lt;br&gt; It&#39;s a matter of adding the following line to the top of a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;entt/entt.hpp&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the line below to include only the entity-component system instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;entt/entity/registry.hpp&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then pass the proper &lt;code&gt;-I&lt;/code&gt; argument to the compiler to add the &lt;code&gt;src&lt;/code&gt; directory to the include paths.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To be able to use &lt;code&gt;EnTT&lt;/code&gt;, users must provide a full-featured compiler that supports at least C++17.&lt;br&gt; The requirements below are mandatory to compile the tests and to extract the documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CMake&lt;/code&gt; version 3.7 or later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Doxygen&lt;/code&gt; version 1.8 or later.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt; is also supported as a build system (credits to &lt;a href=&#34;https://github.com/zaucy&#34;&gt;zaucy&lt;/a&gt; who offered to maintain it).&lt;br&gt; In the documentation below I&#39;ll still refer to &lt;code&gt;CMake&lt;/code&gt;, this being the official build system of the library.&lt;/p&gt; &#xA;&lt;h2&gt;CMake&lt;/h2&gt; &#xA;&lt;p&gt;To use &lt;code&gt;EnTT&lt;/code&gt; from a &lt;code&gt;CMake&lt;/code&gt; project, just link an existing target to the &lt;code&gt;EnTT::EnTT&lt;/code&gt; alias.&lt;br&gt; The library offers everything you need for locating (as in &lt;code&gt;find_package&lt;/code&gt;), embedding (as in &lt;code&gt;add_subdirectory&lt;/code&gt;), fetching (as in &lt;code&gt;FetchContent&lt;/code&gt;) or using it in many of the ways that you can think of and that involve &lt;code&gt;CMake&lt;/code&gt;.&lt;br&gt; Covering all possible cases would require a treaty and not a simple README file, but I&#39;m confident that anyone reading this section also knows what it&#39;s about and can use &lt;code&gt;EnTT&lt;/code&gt; from a &lt;code&gt;CMake&lt;/code&gt; project without problems.&lt;/p&gt; &#xA;&lt;h2&gt;Natvis support&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;CMake&lt;/code&gt;, just enable the option &lt;code&gt;ENTT_INCLUDE_NATVIS&lt;/code&gt; and enjoy it.&lt;br&gt; Otherwise, most of the tools are covered via Natvis and all files can be found in the &lt;code&gt;natvis&lt;/code&gt; directory, divided by module.&lt;br&gt; If you spot errors or have suggestions, any contribution is welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Packaging Tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;EnTT&lt;/code&gt; is available for some of the most known packaging tools. In particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/conan-io/conan-center-index&#34;&gt;&lt;code&gt;Conan&lt;/code&gt;&lt;/a&gt;, the C/C++ Package Manager for Developers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;&lt;code&gt;vcpkg&lt;/code&gt;&lt;/a&gt;, Microsoft VC++ Packaging Tool.&lt;br&gt; You can download and install &lt;code&gt;EnTT&lt;/code&gt; in just a few simple steps:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ git clone https://github.com/Microsoft/vcpkg.git&#xA;$ cd vcpkg&#xA;$ ./bootstrap-vcpkg.sh&#xA;$ ./vcpkg integrate install&#xA;$ vcpkg install entt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or you can use the &lt;code&gt;experimental&lt;/code&gt; feature to test the latest changes:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;vcpkg install entt[experimental] --head&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;EnTT&lt;/code&gt; port in &lt;code&gt;vcpkg&lt;/code&gt; is kept up to date by Microsoft team members and community contributors.&lt;br&gt; If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the &lt;code&gt;vcpkg&lt;/code&gt; repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/skypjack/homebrew-entt&#34;&gt;&lt;code&gt;Homebrew&lt;/code&gt;&lt;/a&gt;, the missing package manager for macOS.&lt;br&gt; Available as a homebrew formula. Just type the following to install it:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;brew install skypjack/entt/entt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://build2.org&#34;&gt;&lt;code&gt;build2&lt;/code&gt;&lt;/a&gt;, build toolchain for developing and packaging C and C++ code.&lt;br&gt; In order to use the &lt;a href=&#34;https://cppget.org/entt&#34;&gt;&lt;code&gt;entt&lt;/code&gt;&lt;/a&gt; package in a &lt;code&gt;build2&lt;/code&gt; project, add the following line or a similar one to the &lt;code&gt;manifest&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;depends: entt ^3.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Also check that the configuration refers to a valid repository, so that the package can be found by &lt;code&gt;build2&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://cppget.org&#34;&gt;&lt;code&gt;cppget.org&lt;/code&gt;&lt;/a&gt;, the open-source community central repository, accessible as &lt;code&gt;https://pkg.cppget.org/1/stable&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/build2-packaging/entt&#34;&gt;Package source repository&lt;/a&gt;: accessible as either &lt;code&gt;https://github.com/build2-packaging/entt.git&lt;/code&gt; or &lt;code&gt;ssh://git@github.com/build2-packaging/entt.git&lt;/code&gt;. Feel free to &lt;a href=&#34;https://github.com/build2-packaging/entt&#34;&gt;report issues&lt;/a&gt; with this package.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Both can be used with &lt;code&gt;bpkg add-repo&lt;/code&gt; or added in a project &lt;code&gt;repositories.manifest&lt;/code&gt;. See the official &lt;a href=&#34;https://build2.org/build2-toolchain/doc/build2-toolchain-intro.xhtml#guide-repositories&#34;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consider this list a work in progress and help me to make it longer if you like.&lt;/p&gt; &#xA;&lt;h2&gt;pkg-config&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;EnTT&lt;/code&gt; also supports &lt;code&gt;pkg-config&lt;/code&gt; (for some definition of &lt;em&gt;supports&lt;/em&gt; at least). A suitable file called &lt;code&gt;entt.pc&lt;/code&gt; is generated and installed in a proper directory when running &lt;code&gt;CMake&lt;/code&gt;.&lt;br&gt; This should also make it easier to use with tools such as &lt;code&gt;Meson&lt;/code&gt; or similar.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The documentation is based on &lt;a href=&#34;http://www.doxygen.nl/&#34;&gt;doxygen&lt;/a&gt;. To build it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd build&#xA;$ cmake .. -DENTT_BUILD_DOCS=ON&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The API reference will be created in HTML format within the directory &lt;code&gt;build/docs/html&lt;/code&gt;. To navigate it with your favorite browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd build&#xA;$ your_favorite_browser docs/html/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--&#xA;@cond TURN_OFF_DOXYGEN&#xA;--&gt; &#xA;&lt;p&gt;The same version is also available &lt;a href=&#34;https://skypjack.github.io/entt/&#34;&gt;online&lt;/a&gt; for the latest release, that is the last stable tag. If you are looking for something more pleasing to the eye, consider reading the nice-looking version available on &lt;a href=&#34;https://entt.docsforge.com/&#34;&gt;docsforge&lt;/a&gt;: same documentation, much more pleasant to read.&lt;br&gt; Moreover, there exists a &lt;a href=&#34;https://github.com/skypjack/entt/wiki&#34;&gt;wiki&lt;/a&gt; dedicated to the project where users can find all related documentation pages.&lt;/p&gt; &#xA;&lt;!--&#xA;@endcond TURN_OFF_DOXYGEN&#xA;--&gt; &#xA;&lt;h1&gt;Tests&lt;/h1&gt; &#xA;&lt;p&gt;To compile and run the tests, &lt;code&gt;EnTT&lt;/code&gt; requires &lt;em&gt;googletest&lt;/em&gt;.&lt;br&gt; &lt;code&gt;cmake&lt;/code&gt; will download and compile the library before compiling anything else. In order to build the tests, set the &lt;code&gt;CMake&lt;/code&gt; option &lt;code&gt;ENTT_BUILD_TESTING&lt;/code&gt; to &lt;code&gt;ON&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build the most basic set of tests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$ cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ cmake -DENTT_BUILD_TESTING=ON ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$ make test&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that benchmarks are not part of this set.&lt;/p&gt; &#xA;&lt;!--&#xA;@cond TURN_OFF_DOXYGEN&#xA;--&gt; &#xA;&lt;h1&gt;EnTT in Action&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;EnTT&lt;/code&gt; is widely used in private and commercial applications. I cannot even mention most of them because of some signatures I put on some documents time ago. Fortunately, there are also people who took the time to implement open source projects based on &lt;code&gt;EnTT&lt;/code&gt; and did not hold back when it came to documenting them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/skypjack/entt/wiki/EnTT-in-Action&#34;&gt;Here&lt;/a&gt; you can find an incomplete list of games, applications and articles that can be used as a reference.&lt;/p&gt; &#xA;&lt;p&gt;If you know of other resources out there that are about &lt;code&gt;EnTT&lt;/code&gt;, feel free to open an issue or a PR and I&#39;ll be glad to add them to the list.&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;Requests for features, PRs, suggestions ad feedback are highly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;If you find you can help and want to contribute to the project with your experience or you do want to get part of the project for some other reason, feel free to contact me directly (you can find the mail in the &lt;a href=&#34;https://github.com/skypjack&#34;&gt;profile&lt;/a&gt;).&lt;br&gt; I can&#39;t promise that each and every contribution will be accepted, but I can assure that I&#39;ll do my best to take them all as soon as possible.&lt;/p&gt; &#xA;&lt;p&gt;If you decide to participate, please see the guidelines for &lt;a href=&#34;https://raw.githubusercontent.com/skypjack/entt/master/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; before to create issues or pull requests.&lt;br&gt; Take also a look at the &lt;a href=&#34;https://github.com/skypjack/entt/raw/master/AUTHORS&#34;&gt;contributors list&lt;/a&gt; to know who has participated so far.&lt;/p&gt; &#xA;&lt;!--&#xA;@endcond TURN_OFF_DOXYGEN&#xA;--&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Code and documentation Copyright (c) 2017-2022 Michele Caini.&lt;br&gt; Colorful logo Copyright (c) 2018-2021 Richard Caseres.&lt;/p&gt; &#xA;&lt;p&gt;Code released under &lt;a href=&#34;https://github.com/skypjack/entt/raw/master/LICENSE&#34;&gt;the MIT license&lt;/a&gt;.&lt;br&gt; Documentation released under &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC BY 4.0&lt;/a&gt;.&lt;br&gt; All logos released under &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;CC BY-SA 4.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rad9800/TamperingSyscalls</title>
    <updated>2022-08-09T01:31:21Z</updated>
    <id>tag:github.com,2022-08-09:/rad9800/TamperingSyscalls</id>
    <link href="https://github.com/rad9800/TamperingSyscalls" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TamperingSyscalls&lt;/h1&gt; &#xA;&lt;p&gt;TamperingSyscalls is a 2 part novel project consisting of argument spoofing and syscall retrival which both abuse EH in order to subvert EDRs. This project consists of both of these projects in order to provide an alternative solution to direct syscalls.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tampering with syscalls.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set up a global EH which will be used later.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;SetUnhandledExceptionFilter( OneShotHardwareBreakpointHandler );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Set a hardware breakpoint on the address of a syscall instruction which has the bytes &lt;code&gt;0f05&lt;/code&gt; on the Dr0 register. We can locate the address of the syscall stub with this quick memory byte search.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;BYTE stub[] = { 0x0F, 0x05 };&#xA;for( unsigned int i = 0; i &amp;lt; (unsigned int)25; i++ )&#xA;{&#xA;&#x9;if( memcmp( (LPVOID)((DWORD_PTR)function + i), stub, 2 ) == 0 ) {&#xA;&#x9;&#x9;return (LPVOID)((DWORD_PTR)function + i);&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;We can then make a call to this function passing NULL for the &amp;lt;=4 arguments (which tend to be the more important arguments holding information such as process handles .etc) We also set the EnumState to the corresponding Enum for this function (so we can later fix the arguments).&lt;/li&gt; &#xA; &lt;li&gt;While the EDR has full introspection into our arguments, it cannot confidently make the decision we are performing a malicious action as we have passed NULL as the first &amp;lt;=4 arguments.&lt;/li&gt; &#xA; &lt;li&gt;The EDR will then return the syscall number(SSN) and store it in RAX. If you are only interested in retreiving syscalls, &lt;a href=&#34;https://github.com/rad9800/TamperingSyscalls/raw/stripped/TamperingSyscalls/entry.cpp&#34;&gt;check out the stripped branch of this repository.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The program then flows into the syscall instruction { 0x0F, 0x05 } which hits the breakpoint we previously set. This will then throw a SINGLE_STEP exception which will be handled by the exception handler we setup in Step 1.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if( ExceptionInfo-&amp;gt;ExceptionRecord-&amp;gt;ExceptionCode == STATUS_SINGLE_STEP )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;This exception handler will disable the hardware breakpoint for Dr0 only if the Dr0 and RIP match by setting the value the Dr0 register points to 0 (which should be the current RIP)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if( ExceptionInfo-&amp;gt;ExceptionRecord-&amp;gt;ExceptionCode == STATUS_SINGLE_STEP )&#xA;{&#xA;&#x9;if( ExceptionInfo-&amp;gt;ContextRecord-&amp;gt;Dr7 &amp;amp; 1 ) {&#xA;&#x9;&#x9;if( ExceptionInfo-&amp;gt;ContextRecord-&amp;gt;Rip == ExceptionInfo-&amp;gt;ContextRecord-&amp;gt;Dr0 ) {&#xA;&#x9;&#x9;&#x9;ExceptionInfo-&amp;gt;ContextRecord-&amp;gt;Dr0 = 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;We will then fix the remaining registers we had previously set to NULL. The reason it is 4 is that this the x64 calling convention dictates we use RCX, RDX, R8, R9 for the first 4 arguments, and the rest are setup on the stack. It is possible to manually set these up the &amp;gt;4 parameters on the stack but this is beyond the scope of this project as it would require inline assembly. The reason why it is R10 not RCX is that at the start of every syscall stub &lt;code&gt;mov r10, rcx&lt;/code&gt; as the RCX register is destroyed in the next instructions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;case NTMAPVIEWOFSECTION_ENUM:&#xA;&#x9;ExceptionInfo-&amp;gt;ContextRecord-&amp;gt;R10 =&#xA;&#x9;&#x9;(DWORD_PTR)((NtMapViewOfSectionArgs*)(StateArray[EnumState].arguments))-&amp;gt;SectionHandle;&#xA;&#xA;&#x9;ExceptionInfo-&amp;gt;ContextRecord-&amp;gt;Rdx =&#xA;&#x9;&#x9;(DWORD_PTR)((NtMapViewOfSectionArgs*)(StateArray[EnumState].arguments))-&amp;gt;ProcessHandle;&#xA;&#xA;&#x9;ExceptionInfo-&amp;gt;ContextRecord-&amp;gt;R8 =&#xA;&#x9;&#x9;(DWORD_PTR)((NtMapViewOfSectionArgs*)(StateArray[EnumState].arguments))-&amp;gt;BaseAddress;&#xA;&#xA;&#x9;ExceptionInfo-&amp;gt;ContextRecord-&amp;gt;R9 =&#xA;&#x9;&#x9;(DWORD_PTR)((NtMapViewOfSectionArgs*)(StateArray[EnumState].arguments))-&amp;gt;ZeroBits;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can see in this example we are fixing the arguments for NtMapViewOfSection.&lt;/p&gt; &#xA;&lt;h2&gt;Howto&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to start to fake EDR telemetry it is possible to modify the p[FunctionName] definitions where they are currently set to NULL.&lt;/p&gt; &#xA;&lt;h2&gt;Generation&lt;/h2&gt; &#xA;&lt;p&gt;To generate the required functions, use &lt;code&gt;gen.py&lt;/code&gt;. This supports either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comma separated functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gen.py NtOpenSection,NtMapViewOfSection,NtUnmapViewOfSection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will produce 3 files: TamperingSyscalls.cpp, TamperingSyscalls.h, and main.cpp. You can &lt;code&gt;#include &#34;TamperingSyscalls.h&#34;&lt;/code&gt; into your project. We can call the functions by appending the function name to p, for example &lt;code&gt;pNtOpenSection(...);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Limitations&lt;/h3&gt; &#xA;&lt;p&gt;We cannot set a breakpoint on NtSetThreadContext or it&#39;s variants as this is used to set the debug registers. There is a brief period where the debug registers are set, but this is very small and I do not think we will be detected for holding an open Dr0.&lt;/p&gt; &#xA;&lt;p&gt;I have published a small blog post, touching upon these techniques. &lt;a href=&#34;https://fool.ish.wtf/2022/08/tamperingsyscalls.html&#34;&gt;TamperingSyscall&#39;s Blog Post&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>musescore/MuseScore</title>
    <updated>2022-08-09T01:31:21Z</updated>
    <id>tag:github.com,2022-08-09:/musescore/MuseScore</id>
    <link href="https://github.com/musescore/MuseScore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MuseScore is an open source and free music notation software. For support, contribution, bug reports, visit MuseScore.org. Fork and make pull requests!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/musescore/MuseScore/master/share/icons/musescore_logo_full.png&#34; alt=&#34;MuseScore&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Music notation and composition software&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MuseScore is an open source and free music notation software. For support, contribution, and bug reports visit MuseScore.org. Fork and make pull requests!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WYSIWYG design, notes are entered on a &#34;virtual notepaper&#34;&lt;/li&gt; &#xA; &lt;li&gt;TrueType font(s) for printing &amp;amp; display allows for high quality scaling to all sizes&lt;/li&gt; &#xA; &lt;li&gt;Easy &amp;amp; fast note entry&lt;/li&gt; &#xA; &lt;li&gt;Many editing functions&lt;/li&gt; &#xA; &lt;li&gt;MusicXML import/export&lt;/li&gt; &#xA; &lt;li&gt;MIDI (SMF) import/export&lt;/li&gt; &#xA; &lt;li&gt;MuseData import&lt;/li&gt; &#xA; &lt;li&gt;MIDI input for note entry&lt;/li&gt; &#xA; &lt;li&gt;Integrated sequencer and software synthesizer to play the score&lt;/li&gt; &#xA; &lt;li&gt;Print or create pdf files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://musescore.org&#34;&gt;MuseScore Homepage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://musescore.org/en/developers-handbook/git-workflow&#34;&gt;MuseScore Git workflow instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://musescore.org/en/developers-handbook/compilation&#34;&gt;How to compile MuseScore?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MuseScore is licensed under GPL version 3.0. See &lt;a href=&#34;https://github.com/musescore/MuseScore/raw/master/LICENSE.GPL&#34;&gt;LICENSE.GPL&lt;/a&gt; in the same directory.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/musescore/MuseScore/wiki/CodeStructure&#34;&gt;Code Structure on Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read the developer handbook for a &lt;a href=&#34;https://musescore.org/en/developers-handbook/compilation&#34;&gt;complete build walkthrough&lt;/a&gt; and a list of dependencies.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Getting sources&lt;/h3&gt; &#xA;&lt;p&gt;If using git to download repo of entire code history, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/musescore/MuseScore.git&#xA;cd MuseScore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, you can just download the latest source release tarball from the &lt;a href=&#34;https://github.com/musescore/MuseScore/releases&#34;&gt;Releases page&lt;/a&gt;, and then from your download directory type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tar xzf MuseScore-x.x.x.tar.gz&#xA;cd MuseScore-x.x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Release Build&lt;/h3&gt; &#xA;&lt;p&gt;To compile MuseScore for release, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -P build.cmake -DCMAKE_BUILD_TYPE=Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If something goes wrong, append the word &#34;clean&#34; to the above command to delete the build subdirectory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -P build.cmake -DCMAKE_BUILD_TYPE=Release clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then try running the first command again.&lt;/p&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;To start MuseScore, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -P build.cmake -DCMAKE_BUILD_TYPE=Release run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or run the compiled executable directly.&lt;/p&gt; &#xA;&lt;h3&gt;Debug Build&lt;/h3&gt; &#xA;&lt;p&gt;A debug version can be built and run by replacing &lt;code&gt;-DCMAKE_BUILD_TYPE=Release&lt;/code&gt; with &lt;code&gt;-DCMAKE_BUILD_TYPE=Debug&lt;/code&gt; in the above commands.&lt;/p&gt; &#xA;&lt;p&gt;If you omit the &lt;code&gt;-DCMAKE_BUILD_TYPE&lt;/code&gt; option entirely then &lt;code&gt;RelWithDebInfo&lt;/code&gt; is used by default, as it provides a useful compromise between Release and Debug.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/musescore/MuseScore/master/mtest/README.md&#34;&gt;mtest/README.md&lt;/a&gt; or &lt;a href=&#34;https://musescore.org/handbook/developers-handbook/finding-your-way-around/automated-tests&#34;&gt;the developer handbook&lt;/a&gt; for instructions on how to run the test suite.&lt;/p&gt; &#xA;&lt;p&gt;The new &lt;a href=&#34;https://musescore.org/node/278278&#34;&gt;script testing facility&lt;/a&gt; is also available to create your own automated tests. Please try it out!&lt;/p&gt; &#xA;&lt;h3&gt;Code Formatting&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;./hooks/install.sh&lt;/code&gt; to install a pre-commit hook that will format your staged files. Requires that you install &lt;code&gt;uncrustify&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have problems, please report them. To uninstall, run &lt;code&gt;./hooks/uninstall.sh&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>