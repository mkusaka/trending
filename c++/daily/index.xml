<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-10T01:30:08Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pichenettes/eurorack</title>
    <updated>2022-12-10T01:30:08Z</updated>
    <id>tag:github.com,2022-12-10:/pichenettes/eurorack</id>
    <link href="https://github.com/pichenettes/eurorack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Eurorack modules&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Mutable Instruments&#39; Eurorack Modules.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/blades&#34;&gt;Blades&lt;/a&gt;: Dual multimode filter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/blinds&#34;&gt;Blinds&lt;/a&gt;: Quad VC-polarizer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/braids&#34;&gt;Braids&lt;/a&gt;: Macro-oscillator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/branches&#34;&gt;Branches&lt;/a&gt;: Dual Bernoulli gate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/clouds&#34;&gt;Clouds&lt;/a&gt;: Texture synthesizer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/ears&#34;&gt;Ears&lt;/a&gt;: Contact microphone.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/edges&#34;&gt;Edges&lt;/a&gt;: Quad chiptune digital oscillator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/elements&#34;&gt;Elements&lt;/a&gt;: Modal synthesizer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/frames&#34;&gt;Frames&lt;/a&gt;: Keyframer/mixer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/grids&#34;&gt;Grids&lt;/a&gt;: Topographic drum sequencer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/kinks&#34;&gt;Kinks&lt;/a&gt;: Utility module - rectifier, analog logic, S&amp;amp;H, noise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/links&#34;&gt;Links&lt;/a&gt;: Utility module - buffer, mixer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/marbles&#34;&gt;Marbles&lt;/a&gt;: Random sampler.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/peaks&#34;&gt;Peaks&lt;/a&gt;: Dual trigger converter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/plaits&#34;&gt;Plaits&lt;/a&gt;: Macro oscillator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/rings&#34;&gt;Rings&lt;/a&gt;: Resonator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/ripples&#34;&gt;Ripples&lt;/a&gt;: Liquid 2-pole BP, 2-pole LP and 4-pole LP filter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/shades&#34;&gt;Shades&lt;/a&gt;: Triple attenuverter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/shelves&#34;&gt;Shelves&lt;/a&gt;: EQ filter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/stages&#34;&gt;Stages&lt;/a&gt;: Segment generator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/streams&#34;&gt;Streams&lt;/a&gt;: Dual dynamics gate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/tides&#34;&gt;Tides&lt;/a&gt;: Tidal modulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/veils&#34;&gt;Veils&lt;/a&gt;: Quad VCA.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/volts&#34;&gt;Volts&lt;/a&gt;: +5V power module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/warps&#34;&gt;Warps&lt;/a&gt;: Meta-modulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mutable-instruments.net/modules/yarns&#34;&gt;Yarns&lt;/a&gt;: MIDI interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Code (AVR projects): GPL3.0.&lt;/p&gt; &#xA;&lt;p&gt;Code (STM32F projects): MIT license.&lt;/p&gt; &#xA;&lt;p&gt;Hardware: cc-by-sa-3.0&lt;/p&gt; &#xA;&lt;p&gt;By: Emilie Gillet (&lt;a href=&#34;mailto:emilie.o.gillet@gmail.com&#34;&gt;emilie.o.gillet@gmail.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h1&gt;Guidelines for derivative works&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mutable Instruments is a registered trademark.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The name &#34;Mutable Instruments&#34; should not be used on any of the derivative works you create from these files.&lt;/p&gt; &#xA;&lt;p&gt;We do not recommend you to keep the original name of the Mutable Instruments module for your derivative works.&lt;/p&gt; &#xA;&lt;p&gt;For example, your 5U adaptation of Mutable Instruments Clouds can be called &#34;Foobar Modular - Particle Generator&#34;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>byrnexu/betterquant</title>
    <updated>2022-12-10T01:30:08Z</updated>
    <id>tag:github.com,2022-12-10:/byrnexu/betterquant</id>
    <link href="https://github.com/byrnexu/betterquant" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📈 Better Quant&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/byrnexu/betterquant/master/README_cn.md&#34;&gt;&lt;strong&gt;中文版&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/byrnexu/betterquant/master/assets/logo.png&#34; width=&#34;180&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/byrnexu&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-byrnexu-brightgreen.svg?sanitize=true&#34; alt=&#34;github&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://visitor-badge.laobi.icu/badge?page_id=byrnexu.betterquant&#34; alt=&#34;visitors&#34;&gt; &lt;a href=&#34;https://github.com/byrnexu&#34;&gt;&lt;img src=&#34;https://badges.frapsoft.com/os/v1/open-source.svg?v=102&#34; alt=&#34;Open Source Love&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Better quant today, best quant tomorrow.&lt;/strong&gt; 💪&lt;/p&gt; &#xA;&lt;p&gt;Welcome to fork/star, your support is the greatest motivation for this project to get better and better.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;  &lt;strong&gt;I&#39;m looking for job opportunities recently, if you need a technical director/partner or architect for a quantitative hedge fund in Shanghai, China, please email: 28645861@qqcom. Of course, if you support telecommuting, It doesn&#39;t matter where the job is.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;  The main functions and features of betterquant include:&lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔥 This is a quantitative trading system designed to support multiple accounts, multiple strategies, multiple products, and multiple hosts in parallel.&lt;br&gt; &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;🔥 It supports C++ and Python to write trading strategies. A few shell commands can complete the installation and deployment of the entire system.&lt;br&gt; &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;🔥 In the current design, only the exchange needs to provide two interfaces: order status push and order information query (in fact, as long as the field information is perfect for the two interfaces is enough), the system can help you accurately calculate accounts, strategies, sub strategies, etc. The level of pnl and fee information, the recovery of various information after the system crashes, ignores various types of exchanges or counter interfaces, only these two interfaces are required.&lt;br&gt; &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;🔥 The supported trading products include spot, currency-based and USD-based perpetual contracts, currency-based and USD-based delivery contracts, as well as position management and profit and loss monitoring functions for one-way mode and hedge mode positions of the above contracts.&lt;br&gt; &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;🔥🔥 Powerful disaster recovery function, any subsystem crash will not lead to the final data exception‼ ️. If the trading service crashes, positions and PNL information will be rebuilt after restarting. After the trading gateway crashes and restarts, it will automatically process the status changes of unprocessed orders generated during the crash. After the risk control subsystem crashes and restarts, various risk control indicators will also be restored. The recovery process described above does not require cancel any open orders.&lt;br&gt; &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;🔥 All subsystems, including market data subsystem, strategy engine, trade service, trade gateway, and risk control subsystem interact through shared memory with no lock❕. Using shared memory as the ipc between subsystems enables the system to have both single-process performance and multi-process security, that is, any system crash will not cause other subsystems to crash. Of course, although the subsystems currently interact through shared memory, this is not a stand-alone trading system❕. In the future, a web service will be set up to provide restful and websocket interfaces to accept remote orders other business functions.&lt;br&gt; &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;🔥 Each subsystem has its own independent PUB_CHANNEL. You can publish TOPIC to your own PUB_CHANNEL. For example, the market data subsystem can publish the online of new contracts, the changes of contract parameters, and the risk control subsystem can customize its own risk control indicators and publish them to the PUB_CHANNEL of the risk control system. Each subsystem can subscribe and publish the topics they are interested in through the unified format of the system‼ ️.&lt;br&gt; &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;🔥 Independent position and order management functions at all levels such as account, strategy, sub-strategy, and user. &lt;br&gt; &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;🔥 After many systems receive orders, they will perform risk control processing for the orders. This step has become the bottleneck of these systems. By default, the system divides the received orders according to the account dimension, realizing parallel risk control processing with no lock. Make this link unimpeded✈️, of course, you can also slightly modify the code or add configuration items later, and achieve more fine-grained dimension request shunting according to the configuration specified parameters.&lt;br&gt; &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;🔥🔥 Plug-in risk control indicator management🔌, you can write risk control indicators in the form of dynamic link libraries according to the unified format of the system. You can enable, disable or upgrade these risk control plugins during the operation of the trading system‼ ️, so as to realize the dynamic management of risk control indicators and meet the needs of 7*24-hour trading. The open api interface allows you to get any data you want in the risk control indicator interface. Use these data to customize flexible and diversified risk control indicators based on your own needs.&lt;br&gt; &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;🔥🔥 Powerful pnl real-time monitoring function‼ ️, you can subscribe and monitor the realized profit and loss, unrealized profit and loss of each dimension such as account, strategy, sub-strategy, user, market, target, long position, short position and so on in any subsystem in real time, usage of fees. In other words, the realized profit and loss, unrealized profit and loss, and fee usage denominated in any currency with any combination of dimensions‼ ️, for example: &lt;br&gt;&lt;br&gt;   🌶️ To subscribe and monitor the pnl and fees of BTC-denominated ETH perpetual contracts with strategy number 10000 on Binance:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;    // sub&#xA;    getStgEng()-&amp;gt;sub(stgInstInfo-&amp;gt;stgInstId_,&#xA;                     &#34;shm://RISK.PubChannel.Trade/PosInfo/StgId/10000&#34;);&#xA;    // on callback                     &#xA;    const auto queryCond = &#34;stgId=10000&amp;amp;marketCode=Binance&amp;amp;symbolCode=ETH-USD-CPerp&#34;;&#xA;    const auto [statusCode, pnl] =&#xA;        posSnapshot-&amp;gt;queryPnl(queryCond, QuoteCurrencyForCalc(&#34;BTC&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;    🌶️ To subscribe and monitor pair ETH-BTC of account 10000 in Binance trading, pnl and fee denominated in BUSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;    // sub&#xA;    getStgEng()-&amp;gt;sub(stgInstInfo-&amp;gt;stgInstId_,&#xA;                     &#34;shm://RISK.PubChannel.Trade/PosInfo/AcctId/10000&#34;);&#xA;    // on callback                     &#xA;    const auto queryCond = &#34;stgId=10000&amp;amp;marketCode=Binance&amp;amp;symbolCode=ETH-BTC&#34;;&#xA;    const auto [statusCode, pnl] =&#xA;        posSnapshot-&amp;gt;queryPnl(queryCond, QuoteCurrencyForCalc(&#34;BUSD&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;  You can also monitor multiple strategy combinations at the same time, and calculate the realized profit and loss, unrealized profit and loss, and usage of fees of the strategy combination. Through these profit and loss data, you can even write a monitoring strategy for monitoring other strategies❕, triggering risk control Then send various flexible functions such as intervention instructions to other strategies. Of course, after adding the algorithmic trading function in the future, you can also track the profit and loss of an algorithmic order (including multiple sub orders) in real time. &lt;br&gt; &amp;nbsp;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔥 Dynamic maintenance of status codes from exchange. Since the trading system may be connected to multiple exchanges, each exchange has its own specific status code, and unknown external status will also be received during the execution of the strategy. After receiving these external states, they will be automatically included, and you can map them to the specified internal state codes during system in running, so that the policy side can correctly process the business logic of the new state codes. The whole process does not need to restart any subsystems❕.&lt;br&gt; &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;🔥 The symbol code table dynamic maintenance function, the system regularly detects the changes of the exchange code table, in addition to the new code online and offline, as well as some of its largest and smallest transactions and the change unit of the amount, etc., if there is a change, the local code table is updated immediately.&lt;br&gt; &amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;🔥 Each strategy can specify sub-strategy with several sets of parameters. The sub-strategy set is managed by a thread pool. The parameters of the sub-policy can be modified and automatically updated during system in running, and sub-strategy can also be added or disabled during operation❕. This is especially important for some markets that trade on 7*24 hours.&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;h3&gt;🛠 &lt;a href=&#34;https://raw.githubusercontent.com/byrnexu/betterquant/master/doc/build.md&#34;&gt;BUILD&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;🐋 &lt;a href=&#34;https://raw.githubusercontent.com/byrnexu/betterquant/master/doc/installation.md&#34;&gt;INSTALL&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;⭐ &lt;a href=&#34;https://raw.githubusercontent.com/byrnexu/betterquant/master/doc/documentation.md&#34;&gt;DOCUMENTATION&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;🧨 &lt;a href=&#34;https://raw.githubusercontent.com/byrnexu/betterquant/master/doc/caution.md&#34;&gt;WARNING&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;⁉️ &lt;a href=&#34;https://raw.githubusercontent.com/byrnexu/betterquant/master/doc/faq.md&#34;&gt;FAQ&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;🥔 &lt;a href=&#34;https://raw.githubusercontent.com/byrnexu/betterquant/master/doc/todo.md&#34;&gt;TODO&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github-readme-streak-stats.herokuapp.com?user=byrnexu&amp;amp;theme=onedark&amp;amp;date_format=M%20j%5B%2C%20Y%5D&#34;&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>mpromonet/webrtc-streamer</title>
    <updated>2022-12-10T01:30:08Z</updated>
    <id>tag:github.com,2022-12-10:/mpromonet/webrtc-streamer</id>
    <link href="https://github.com/mpromonet/webrtc-streamer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WebRTC streamer for V4L2 capture devices, RTSP sources and Screen Capture&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/mpromonet/webrtc-streamer&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/mpromonet/webrtc-streamer.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/mpromonet/webrtc-streamer&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/mpromonet/webrtc-streamer.svg?sanitize=true&#34; alt=&#34;CirusCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/webrtc-streamer&#34;&gt;&lt;img src=&#34;https://snapcraft.io//webrtc-streamer/badge.svg?sanitize=true&#34; alt=&#34;Snap Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mpromonet/webrtc-streamer/actions/workflows/cpp-linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/mpromonet/webrtc-streamer/workflows/C/C++%20CI%20linux/badge.svg?sanitize=true&#34; alt=&#34;GithubCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mpromonet/webrtc-streamer/actions/workflows/cpp-windows.yml&#34;&gt;&lt;img src=&#34;https://github.com/mpromonet/webrtc-streamer/workflows/C/C++%20CI%20windows/badge.svg?sanitize=true&#34; alt=&#34;GithubCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mpromonet/webrtc-streamer/actions/workflows/cpp-macos.yml&#34;&gt;&lt;img src=&#34;https://github.com/mpromonet/webrtc-streamer/workflows/C/C++%20CI%20macos/badge.svg?sanitize=true&#34; alt=&#34;GithubCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.codacy.com/app/michelpromonet_2643/webrtc-streamer?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=mpromonet/webrtc-streamer&amp;amp;utm_campaign=badger&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/c209c81a15854964a08df5c300f56804&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mpromonet/webrtc-streamer/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/mpromonet/webrtc-streamer.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mpromonet/webrtc-streamer/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/mpromonet/webrtc-streamer/total.svg?sanitize=true&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/mpromonet/webrtc-streamer/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/mpromonet/webrtc-streamer.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/&#34;&gt;&lt;img src=&#34;https://heroku-badge.herokuapp.com/?app=webrtc-streamer&#34; alt=&#34;Heroku&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/mpromonet/webrtc-streamer&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod ready-to-code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WebRTC-streamer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://wiki.friendlyarm.com/wiki/index.php/NanoPi_NEO_Air&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpromonet/webrtc-streamer/master/images/nanopi.jpg&#34; alt=&#34;NanoPi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WebRTC-streamer is an experiment to stream video capture devices and RTSP sources through WebRTC using simple mechanism.&lt;/p&gt; &#xA;&lt;p&gt;It embeds a HTTP server that implements API and serves a simple HTML page that use them through AJAX.&lt;/p&gt; &#xA;&lt;p&gt;The WebRTC signaling is implemented through HTTP requests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;/api/call : send offer and get answer&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;/api/hangup : close a call&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;/api/addIceCandidate : add a candidate&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;/api/getIceCandidate : get the list of candidates&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The list of HTTP API is available using /api/help.&lt;/p&gt; &#xA;&lt;p&gt;Nowdays there is builds on &lt;a href=&#34;https://circleci.com/gh/mpromonet/webrtc-streamer&#34;&gt;CircleCI&lt;/a&gt;, &lt;a href=&#34;https://cirrus-ci.com/github/mpromonet/webrtc-streamer&#34;&gt;CirrusCI&lt;/a&gt; and &lt;a href=&#34;https://github.com/mpromonet/webrtc-streamer/actions&#34;&gt;GitHub CI&lt;/a&gt; :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for x86_64 on Ubuntu Bionic&lt;/li&gt; &#xA; &lt;li&gt;for armv7 crosscompiled (this build is running on Raspberry Pi2 and NanoPi NEO)&lt;/li&gt; &#xA; &lt;li&gt;for armv6+vfp crosscompiled (this build is running on Raspberry PiB and should run on a Raspberry Zero)&lt;/li&gt; &#xA; &lt;li&gt;for arm64 crosscompiled&lt;/li&gt; &#xA; &lt;li&gt;Windows x64 build with clang&lt;/li&gt; &#xA; &lt;li&gt;MacOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The webrtc stream name could be :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;an alias defined using -n argument then the corresponding -u argument will be used to create the capturer&lt;/li&gt; &#xA; &lt;li&gt;an &#34;rtsp://&#34; url that will be openned using an RTSP capturer based on live555&lt;/li&gt; &#xA; &lt;li&gt;an &#34;file://&#34; url that will be openned using an MKV capturer based on live555&lt;/li&gt; &#xA; &lt;li&gt;an &#34;screen://&#34; url that will be openned by webrtc::DesktopCapturer::CreateScreenCapturer&lt;/li&gt; &#xA; &lt;li&gt;an &#34;window://&#34; url that will be openned by webrtc::DesktopCapturer::CreateWindowCapturer&lt;/li&gt; &#xA; &lt;li&gt;an &#34;v4l2://&#34; url that will capture H264 frames and store it using webrtc::VideoFrameBuffer::Type::kNative type (obviously not supported on Windows)&lt;/li&gt; &#xA; &lt;li&gt;a capture device name&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies :&lt;/h2&gt; &#xA;&lt;p&gt;It is based on :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.webrtc.org&#34;&gt;WebRTC Native Code Package&lt;/a&gt; for WebRTC&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/civetweb/civetweb&#34;&gt;civetweb HTTP server&lt;/a&gt; for HTTP server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.live555.com/liveMedia&#34;&gt;live555&lt;/a&gt; for RTSP/MKV source&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Build&lt;/h1&gt; &#xA;&lt;h2&gt;Install the Chromium depot tools (for WebRTC).&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pushd ..&#xA;git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git&#xA;export PATH=$PATH:`realpath depot_tools`&#xA;popd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Download WebRTC&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir ../webrtc&#xA;pushd ../webrtc&#xA;fetch --no-history webrtc &#xA;popd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build WebRTC Streamer&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake . &amp;amp;&amp;amp; make &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to specify cmake parameters WEBRTCROOT &amp;amp; WEBRTCDESKTOPCAPTURE :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;$WEBRTCROOT/src should contains source (default is $(pwd)/../webrtc)&lt;/li&gt; &#xA; &lt;li&gt;WEBRTCDESKTOPCAPTURE enabling desktop capture if available (default is ON)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;./webrtc-streamer [-H http port] [-S[embeded stun address]] -[v[v]]  [url1]...[urln]&#xA;./webrtc-streamer [-H http port] [-s[external stun address]] -[v[v]] [url1]...[urln]&#xA;./webrtc-streamer -V&#xA;&#x9;-v[v[v]]           : verbosity&#xA;&#x9;-V                 : print version&#xA;&#x9;-C config.json                     : load urls from JSON config file &#xA;&#x9;-n name -u videourl -U audiourl    : register a name for a video url and an audio url&#xA;&#x9;[url]                              : url to register in the source list&#xA;&#xA;&#x9;-H [hostname:]port : HTTP server binding (default 0.0.0.0:8000)&#xA;&#x9;-w webroot         : path to get files&#xA;&#x9;-c sslkeycert      : path to private key and certificate for HTTPS&#xA;&#x9;-N nbthreads       : number of threads for HTTP server&#xA;&#x9;-A passwd          : password file for HTTP server access&#xA;&#x9;-D authDomain      : authentication domain for HTTP server access (default:mydomain.com)&#xA;&#xA;&#x9;-S[stun_address]                   : start embeded STUN server bind to address (default 0.0.0.0:3478)&#xA;&#x9;-s[stun_address]                   : use an external STUN server (default:stun.l.google.com:19302 , -:means no STUN)&#xA;&#x9;-t[username:password@]turn_address : use an external TURN relay server (default:disabled)&#xA;&#x9;-T[username:password@]turn_address : start embeded TURN server (default:disabled)&#xA;&#x9;-R [Udp port range min:max]        : Set the webrtc udp port range (default 0:65535)&#xA;&#x9;-W webrtc_trials_fields            : Set the webrtc trials fields (default:WebRTC-FrameDropper/Disabled/)&#x9;&#x9;&#xA;&#x9;-a[audio layer]                    : spefify audio capture layer to use (default:0)&#x9;&#x9;&#xA;&#x9;-q[filter]                         : spefify publish filter (default:.*)&#xA;&#x9;-o                                 : use null codec (keep frame encoded)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments of &#39;-H&#39; are forwarded to option &lt;a href=&#34;https://github.com/civetweb/civetweb/raw/master/docs/UserManual.md#listening_ports-8080&#34;&gt;listening_ports&lt;/a&gt; of civetweb, then it is possible to use the civetweb syntax like &lt;code&gt;-H8000,9000&lt;/code&gt; or &lt;code&gt;-H8080r,8443s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;-o&lt;/code&gt; allow to store compressed frame from backend stream using &lt;code&gt;webrtc::VideoFrameBuffer::Type::kNative&lt;/code&gt;. This Hack the stucture &lt;code&gt;webrtc::VideoFrameBuffer&lt;/code&gt; storing data in a override of i420 buffer. This allow to forward H264 frames from V4L2 device or RTSP stream to WebRTC stream. It use less CPU and have less adaptation (resize, codec, bandwidth are disabled).&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./webrtc-streamer rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpromonet/webrtc-streamer/master/images/snapshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can access to the WebRTC stream using &lt;a href=&#34;https://github.com/mpromonet/webrtc-streamer-html/raw/master/webrtcstreamer.html&#34;&gt;webrtcstreamer.html&lt;/a&gt; for instance :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/webrtcstreamer.html?rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov&#34;&gt;https://webrtcstreamer.herokuapp.com/webrtcstreamer.html?rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/webrtcstreamer.html?Bunny&#34;&gt;https://webrtcstreamer.herokuapp.com/webrtcstreamer.html?Bunny&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An example displaying grid of WebRTC Streams is available using option &#34;layout=&#xA; &lt;lines&gt;&#xA;  x&#xA;  &lt;columns&gt;&#xA;   &#34; &#xA;   &lt;a href=&#34;https://webrtcstreamer.herokuapp.com/?layout=2x4&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpromonet/webrtc-streamer/master/images/layout2x4.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&#xA;  &lt;/columns&gt;&#xA; &lt;/lines&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/?layout=2x4&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Using embedded STUN/TURN server behind a NAT:&lt;/h1&gt; &#xA;&lt;p&gt;It is possible start embeded ICE server and publish its url using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./webrtc-streamer -S0.0.0.0:3478 -s$(curl -s ifconfig.me):3478&#xA;./webrtc-streamer -s- -T0.0.0.0:3478 -tturn:turn@$(curl -s ifconfig.me):3478&#xA;./webrtc-streamer -S0.0.0.0:3478 -s$(curl -s ifconfig.me):3478 -T0.0.0.0:3479 -tturn:turn@$(curl -s ifconfig.me):3479&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command &lt;code&gt;curl -s ifconfig.me&lt;/code&gt; is getting the public IP, it could also given as a static parameter.&lt;/p&gt; &#xA;&lt;p&gt;In order to configure the NAT rules using the upnp feature of the router, it is possible to use &lt;a href=&#34;https://manpages.debian.org/unstable/miniupnpc/upnpc.1.en.html&#34;&gt;upnpc&lt;/a&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;upnpc -r 8000 tcp 3478 tcp 3478 udp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adapting with the HTTP port, STUN port, TURN port.&lt;/p&gt; &#xA;&lt;h1&gt;Embed in a HTML page:&lt;/h1&gt; &#xA;&lt;p&gt;Instead of using the internal HTTP server, it is easy to display a WebRTC stream in a HTML page served by another HTTP server. The URL of the webrtc-streamer to use should be given creating the &lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/mpromonet/webrtc-streamer-html/raw/master/jsdoc/WebRtcStreamer.html&#34;&gt;WebRtcStreamer&lt;/a&gt; instance :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var webRtcServer      = new WebRtcStreamer(&amp;lt;video tag&amp;gt;, &amp;lt;webrtc-streamer url&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A short sample HTML page using webrtc-streamer running locally on port 8000 :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;&amp;lt;script src=&#34;libs/adapter.min.js&#34; &amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;webrtcstreamer.js&#34; &amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;        &#xA;    var webRtcServer      = null;&#xA;    window.onload         = function() { &#xA;        webRtcServer      = new WebRtcStreamer(&#34;video&#34;,location.protocol+&#34;//&#34;+window.location.hostname+&#34;:8000&#34;);&#xA;        webRtcServer.connect(&#34;rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov&#34;);&#xA;    }&#xA;    window.onbeforeunload = function() { webRtcServer.disconnect(); }&#xA;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt; &#xA;    &amp;lt;video id=&#34;video&#34; /&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Using WebComponent&lt;/h1&gt; &#xA;&lt;p&gt;Using web-component could be a simple way to display some webrtc stream, a minimal page could be :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;    &amp;lt;script type=&#34;module&#34; src=&#34;webrtc-streamer-element.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;   &amp;lt;webrtc-streamer url=&#34;rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov&#34;&amp;gt;&amp;lt;/webrtc-streamer&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/Bunny.html&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using the webcomponent with a stream selector :&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/webrtc-streamer-element.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpromonet/webrtc-streamer/master/images/wc-selector.jpg&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/webrtc-streamer-element.html&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using the webcomponent over google map :&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/map.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpromonet/webrtc-streamer/master/images/wc-map.jpg&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/map.html&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Object detection using tensorflow.js&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/tensorflow.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpromonet/webrtc-streamer/master/images/tensorflow.jpg&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/tensorflow.html&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Connect to Janus Gateway Video Room&lt;/h1&gt; &#xA;&lt;p&gt;A simple way to publish WebRTC stream to a &lt;a href=&#34;https://janus.conf.meetecho.com&#34;&gt;Janus Gateway&lt;/a&gt; Video Room is to use the &lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/mpromonet/webrtc-streamer-html/raw/master/jsdoc/JanusVideoRoom.html&#34;&gt;JanusVideoRoom&lt;/a&gt; interface&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    var janus = new JanusVideoRoom(&amp;lt;janus url&amp;gt;, &amp;lt;webrtc-streamer url&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A short sample to publish WebRTC streams to Janus Video Room could be :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;&amp;lt;script src=&#34;janusvideoroom.js&#34; &amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;        &#xA;&#x9;var janus = new JanusVideoRoom(&#34;https://janus.conf.meetecho.com/janus&#34;, null);&#xA;&#x9;janus.join(1234, &#34;rtsp://pi2.local:8554/unicast&#34;,&#34;pi2&#34;);&#xA;&#x9;janus.join(1234, &#34;rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov&#34;,&#34;media&#34;);&#x9;    &#xA;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/janusvideoroom.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpromonet/webrtc-streamer/master/images/janusvideoroom.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/janusvideoroom.html&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This way the communication between &lt;a href=&#34;https://janus.conf.meetecho.com/docs/JS.html&#34;&gt;Janus API&lt;/a&gt; and &lt;a href=&#34;https://webrtcstreamer.herokuapp.com/help&#34;&gt;WebRTC Streamer API&lt;/a&gt; is implemented in Javascript running in browser.&lt;/p&gt; &#xA;&lt;p&gt;The same logic could be implemented in NodeJS using the same JS API :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;global.request = require(&#39;then-request&#39;);&#xA;var JanusVideoRoom = require(&#39;./html/janusvideoroom.js&#39;); &#xA;var janus = new JanusVideoRoom(&#34;http://192.168.0.15:8088/janus&#34;, &#34;http://192.168.0.15:8000&#34;)&#xA;janus.join(1234,&#34;mmal service 16.1&#34;,&#34;video&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Connect to Jitsi&lt;/h1&gt; &#xA;&lt;p&gt;A simple way to publish WebRTC stream to a &lt;a href=&#34;https://meet.jit.si&#34;&gt;Jitsi&lt;/a&gt; Video Room is to use the &lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/mpromonet/webrtc-streamer-html/raw/master/jsdoc/XMPPVideoRoom.html&#34;&gt;XMPPVideoRoom&lt;/a&gt; interface&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    var xmpp = new XMPPVideoRoom(&amp;lt;xmpp server url&amp;gt;, &amp;lt;webrtc-streamer url&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A short sample to publish WebRTC streams to a Jitsi Video Room could be :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;&amp;lt;script src=&#34;libs/strophe.min.js&#34; &amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;libs/strophe.muc.min.js&#34; &amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;libs/strophe.disco.min.js&#34; &amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;libs/strophe.jingle.sdp.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;libs/jquery-3.5.1.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;xmppvideoroom.js&#34; &amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;        &#xA;&#x9;var xmpp = new XMPPVideoRoom(&#34;meet.jit.si&#34;, null);&#xA;&#x9;xmpp.join(&#34;testroom&#34;, &#34;rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov&#34;,&#34;Bunny&#34;);&#x9;    &#xA;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webrtcstreamer.herokuapp.com/xmppvideoroom.html&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Docker image&lt;/h1&gt; &#xA;&lt;p&gt;You can start the application using the docker image :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    docker run -p 8000:8000 -it mpromonet/webrtc-streamer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can expose V4L2 devices from your host using :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    docker run --device=/dev/video0 -p 8000:8000 -it mpromonet/webrtc-streamer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The container entry point is the webrtc-streamer application, then you can :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;get the help using :&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  docker run -p 8000:8000 -it mpromonet/webrtc-streamer -h&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;run the container registering a RTSP url using :&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  docker run -p 8000:8000 -it mpromonet/webrtc-streamer -n raspicam -u rtsp://pi2.local:8554/unicast&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;run the container giving config.json file using :&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  docker run -p 8000:8000 -v $PWD/config.json:/app/config.json mpromonet/webrtc-streamer&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>