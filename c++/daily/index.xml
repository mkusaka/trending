<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-12T01:33:02Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mawww/kakoune</title>
    <updated>2022-07-12T01:33:02Z</updated>
    <id>tag:github.com,2022-07-12:/mawww/kakoune</id>
    <link href="https://github.com/mawww/kakoune" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mawww&#39;s experiment for a better code editor&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>Aircoookie/WLED</title>
    <updated>2022-07-12T01:33:02Z</updated>
    <id>tag:github.com,2022-07-12:/Aircoookie/WLED</id>
    <link href="https://github.com/Aircoookie/WLED" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Control WS2812B and many more types of digital RGB LEDs with an ESP8266 or ESP32 over WiFi!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Aircoookie/WLED/main/images/wled_logo_akemi.png&#34;&gt; &lt;a href=&#34;https://github.com/Aircoookie/WLED/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Aircoookie/WLED.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Aircoookie/WLED/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Aircoookie/wled?color=blue&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://wled.discourse.group&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/topics?colorB=blue&amp;amp;label=forum&amp;amp;server=https%3A%2F%2Fwled.discourse.group%2F&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/KuqP7NE&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/473448917040758787.svg?colorB=blue&amp;amp;label=discord&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kno.wled.ge&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/quick_start-wiki-blue.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Aircoookie/WLED-App&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/app-wled-blue.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/Aircoookie/WLED&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?style=flat-square&amp;amp;logo=gitpod&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Welcome to my project WLED! ✨&lt;/h1&gt; &#xA;&lt;p&gt;A fast and feature-rich implementation of an ESP8266/ESP32 webserver to control NeoPixel (WS2812B, WS2811, SK6812) LEDs or also SPI based chipsets like the WS2801 and APA102!&lt;/p&gt; &#xA;&lt;h2&gt;⚙️ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WS2812FX library integrated for over 100 special effects&lt;/li&gt; &#xA; &lt;li&gt;FastLED noise effects and 50 palettes&lt;/li&gt; &#xA; &lt;li&gt;Modern UI with color, effect and segment controls&lt;/li&gt; &#xA; &lt;li&gt;Segments to set different effects and colors to parts of the LEDs&lt;/li&gt; &#xA; &lt;li&gt;Settings page - configuration over network&lt;/li&gt; &#xA; &lt;li&gt;Access Point and station mode - automatic failsafe AP&lt;/li&gt; &#xA; &lt;li&gt;Up to 10 LED outputs per instance&lt;/li&gt; &#xA; &lt;li&gt;Support for RGBW strips&lt;/li&gt; &#xA; &lt;li&gt;Up to 250 user presets to save and load colors/effects easily, supports cycling through them.&lt;/li&gt; &#xA; &lt;li&gt;Presets can be used to automatically execute API calls&lt;/li&gt; &#xA; &lt;li&gt;Nightlight function (gradually dims down)&lt;/li&gt; &#xA; &lt;li&gt;Full OTA software updatability (HTTP + ArduinoOTA), password protectable&lt;/li&gt; &#xA; &lt;li&gt;Configurable analog clock (Cronixie, 7-segment and EleksTube IPS clock support via usermods)&lt;/li&gt; &#xA; &lt;li&gt;Configurable Auto Brightness limit for safer operation&lt;/li&gt; &#xA; &lt;li&gt;Filesystem-based config for easier backup of presets and settings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;💡 Supported light control interfaces&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WLED app for &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.aircoookie.WLED&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://apps.apple.com/us/app/wled/id1475695033&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON and HTTP request APIs&lt;/li&gt; &#xA; &lt;li&gt;MQTT&lt;/li&gt; &#xA; &lt;li&gt;Blynk IoT&lt;/li&gt; &#xA; &lt;li&gt;E1.31, Art-Net, DDP and TPM2.net&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/diyhue/diyHue&#34;&gt;diyHue&lt;/a&gt; (Wled is supported by diyHue, including Hue Sync Entertainment under udp. Thanks to &lt;a href=&#34;https://github.com/gmallios&#34;&gt;Gregory Mallios&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyperion-project/hyperion.ng&#34;&gt;Hyperion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;UDP realtime&lt;/li&gt; &#xA; &lt;li&gt;Alexa voice control (including dimming and color)&lt;/li&gt; &#xA; &lt;li&gt;Sync to Philips hue lights&lt;/li&gt; &#xA; &lt;li&gt;Adalight (PC ambilight via serial) and TPM2&lt;/li&gt; &#xA; &lt;li&gt;Sync color of multiple WLED devices (UDP notifier)&lt;/li&gt; &#xA; &lt;li&gt;Infrared remotes (24-key RGB, receiver required)&lt;/li&gt; &#xA; &lt;li&gt;Simple timers/schedules (time from NTP, timezones/DST supported)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📲 Quick start guide and documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://kno.wled.ge&#34;&gt;documentation on our official site&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kno.wled.ge/basics/tutorials/&#34;&gt;On this page&lt;/a&gt; you can find excellent tutorials made by the community and helpful tools to help you get your new lamp up and running!&lt;/p&gt; &#xA;&lt;h2&gt;🖼️ User interface&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Aircoookie/WLED/main/images/macbook-pro-space-gray-on-the-wooden-table.jpg&#34; width=&#34;50%&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Aircoookie/WLED/main/images/walking-with-iphone-x.jpg&#34; width=&#34;50%&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;💾 Compatible hardware&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://kno.wled.ge/basics/compatible-hardware&#34;&gt;here&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;✌️ Other&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the MIT license&lt;br&gt; Credits &lt;a href=&#34;https://kno.wled.ge/about/contributors/&#34;&gt;here&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Join the Discord server to discuss everything about WLED!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/KuqP7NE&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/473448917040758787/widget.png?style=banner2&#34; width=&#34;25%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out the WLED &lt;a href=&#34;https://wled.discourse.group&#34;&gt;Discourse forum&lt;/a&gt;!&lt;br&gt; You can also send me mails to &lt;a href=&#34;mailto:dev.aircoookie@gmail.com&#34;&gt;dev.aircoookie@gmail.com&lt;/a&gt;, but please only do so if you want to talk to me privately.&lt;br&gt; If WLED really brightens up your every day, you can &lt;a href=&#34;https://paypal.me/aircoookie&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/send%20me%20a%20small%20gift-paypal-blue.svg?style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt;&lt;br&gt; If you are sensitive to photosensitive epilepsy it is not recommended that you use this software.&lt;br&gt; In case you still want to try, don&#39;t use strobe, lighting or noise modes or high effect speed settings. As per the MIT license, I assume no liability for any damage to you or any other person or equipment.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linyacool/WebServer</title>
    <updated>2022-07-12T01:33:02Z</updated>
    <id>tag:github.com,2022-07-12:/linyacool/WebServer</id>
    <link href="https://github.com/linyacool/WebServer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A C++ High Performance Web Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A C++ High Performance Web Server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/linyacool/WebServer&#34;&gt;&lt;img src=&#34;https://travis-ci.org/linyacool/WebServer.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;本项目为C++11编写的Web服务器，解析了get、head请求，可处理静态资源，支持HTTP长连接，支持管线化请求，并实现了异步日志，记录服务器运行状态。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Part Ⅰ&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Part Ⅱ&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Part Ⅲ&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Part Ⅳ&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Part Ⅴ&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Part Ⅵ&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/linyacool/WebServer/raw/master/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B.md&#34;&gt;并发模型&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/linyacool/WebServer/raw/master/%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%BB%B4%E6%8A%A4.md&#34;&gt;连接的维护&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/linyacool/WebServer/raw/master/%E7%89%88%E6%9C%AC%E5%8E%86%E5%8F%B2.md&#34;&gt;版本历史&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/linyacool/WebServer/raw/master/%E6%B5%8B%E8%AF%95%E5%8F%8A%E6%94%B9%E8%BF%9B.md&#34;&gt;测试及改进&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/linyacool/WebServer/raw/master/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E7%9A%84.md&#34;&gt;项目目的&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/linyacool/WebServer/raw/master/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98.md&#34;&gt;面试问题&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Envoirment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OS: Ubuntu 14.04&lt;/li&gt; &#xA; &lt;li&gt;Complier: g++ 4.8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./WebServer [-t thread_numbers] [-p port] [-l log_file_path(should begin with &#39;/&#39;)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Technical points&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用Epoll边沿触发的IO多路复用技术，非阻塞IO，使用Reactor模式&lt;/li&gt; &#xA; &lt;li&gt;使用多线程充分利用多核CPU，并使用线程池避免线程频繁创建销毁的开销&lt;/li&gt; &#xA; &lt;li&gt;使用基于小根堆的定时器关闭超时请求&lt;/li&gt; &#xA; &lt;li&gt;主线程只负责accept请求，并以Round Robin的方式分发给其它IO线程(兼计算线程)，锁的争用只会出现在主线程和某一特定线程中&lt;/li&gt; &#xA; &lt;li&gt;使用eventfd实现了线程的异步唤醒&lt;/li&gt; &#xA; &lt;li&gt;使用双缓冲区技术实现了简单的异步日志系统&lt;/li&gt; &#xA; &lt;li&gt;为减少内存泄漏的可能，使用智能指针等RAII机制&lt;/li&gt; &#xA; &lt;li&gt;使用状态机解析了HTTP请求,支持管线化&lt;/li&gt; &#xA; &lt;li&gt;支持优雅关闭连接 &amp;nbsp;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Model&lt;/h2&gt; &#xA;&lt;p&gt;并发模型为Reactor+非阻塞IO+线程池，新连接Round Robin分配，详细介绍请参考&lt;a href=&#34;https://github.com/linyacool/WebServer/raw/master/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B.md&#34;&gt;并发模型&lt;/a&gt; &lt;img src=&#34;https://github.com/linyacool/WebServer/raw/master/datum/model.png&#34; alt=&#34;并发模型&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;代码统计&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/linyacool/WebServer/raw/master/datum/cloc.png&#34; alt=&#34;cloc&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Others&lt;/h2&gt; &#xA;&lt;p&gt;除了项目基本的代码，进服务器进行压测时，对开源测试工具Webbench增加了Keep-Alive选项和测试功能: 改写后的&lt;a href=&#34;https://github.com/linyacool/WebBench&#34;&gt;Webbench&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>