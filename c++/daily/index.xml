<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-06T01:31:21Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>commaai/opendbc</title>
    <updated>2022-10-06T01:31:21Z</updated>
    <id>tag:github.com,2022-10-06:/commaai/opendbc</id>
    <link href="https://github.com/commaai/opendbc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;democratize access to car decoder rings&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;DBC file basics&lt;/h2&gt; &#xA;&lt;p&gt;A DBC file encodes, in a humanly readable way, the information needed to understand a vehicle&#39;s CAN bus traffic. A vehicle might have multiple CAN buses and every CAN bus is represented by its own dbc file. Wondering what&#39;s the DBC file format? &lt;a href=&#34;http://www.socialledge.com/sjsu/index.php?title=DBC_Format&#34;&gt;Here&lt;/a&gt; and &lt;a href=&#34;https://github.com/stefanhoelzl/CANpy/raw/master/docs/DBC_Specification.md&#34;&gt;Here&lt;/a&gt; a couple of good overviews.&lt;/p&gt; &#xA;&lt;h2&gt;How to start reverse engineering cars&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/commaai/opendbc&#34;&gt;opendbc&lt;/a&gt; is integrated with &lt;a href=&#34;https://community.comma.ai/cabana/&#34;&gt;cabana&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/commaai/panda&#34;&gt;panda&lt;/a&gt; to connect your car to a computer.&lt;/p&gt; &#xA;&lt;h2&gt;How to use reverse engineered DBC&lt;/h2&gt; &#xA;&lt;p&gt;To create custom CAN simulations or send reverse engineered signals back to the car you can use &lt;a href=&#34;https://github.com/GENIVI/CANdevStudio&#34;&gt;CANdevStudio&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h2&gt;DBC file preprocessor&lt;/h2&gt; &#xA;&lt;p&gt;DBC files for different models of the same brand have a lot of overlap. Therefore, we wrote a preprocessor to create DBC files from a brand DBC file and a model specific DBC file. The source DBC files can be found in the generator folder. After changing one of the files run the generator.py script to regenerate the output files. These output files will be placed in the root of the opendbc repository and are suffixed by _generated.&lt;/p&gt; &#xA;&lt;h2&gt;Good practices for contributing to opendbc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Comments: the best way to store comments is to add them directly to the DBC files. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;CM_ SG_ 490 LONG_ACCEL &#34;wheel speed derivative, noisy and zero snapping&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;is a comment that refers to signal &lt;code&gt;LONG_ACCEL&lt;/code&gt; in message &lt;code&gt;490&lt;/code&gt;. Using comments is highly recommended, especially for doubts and uncertainties. &lt;a href=&#34;https://community.comma.ai/cabana/&#34;&gt;cabana&lt;/a&gt; can easily display/add/edit comments to signals and messages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Units: when applicable, it&#39;s recommended to convert signals into physical units, by using a proper signal factor. Using a SI unit is preferred, unless a non-SI unit rounds the signal factor much better. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;SG_ VEHICLE_SPEED : 7|15@0+ (0.00278,0) [0|70] &#34;m/s&#34; PCM&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;is better than:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;SG_ VEHICLE_SPEED : 7|15@0+ (0.00620,0) [0|115] &#34;mph&#34; PCM&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, the cleanest option is really:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;SG_ VEHICLE_SPEED : 7|15@0+ (0.01,0) [0|250] &#34;kph&#34; PCM&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Signal size: always use the smallest amount of bits possible. For example, let&#39;s say I&#39;m reverse engineering the gas pedal position and I&#39;ve determined that it&#39;s in a 3 bytes message. For 0% pedal position I read a message value of &lt;code&gt;0x00 0x00 0x00&lt;/code&gt;, while for 100% of pedal position I read &lt;code&gt;0x64 0x00 0x00&lt;/code&gt;: clearly, the gas pedal position is within the first byte of the message and I might be tempted to define the signal &lt;code&gt;GAS_POS&lt;/code&gt; as:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;SG_ GAS_POS : 7|8@0+ (1,0) [0|100] &#34;%&#34; PCM&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, I can&#39;t be sure that the very first bit of the message is referred to the pedal position: I haven&#39;t seen it changing! Therefore, a safer way of defining the signal is:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;SG_ GAS_POS : 6|7@0+ (1,0) [0|100] &#34;%&#34; PCM&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which leaves the first bit unallocated. This prevents from very erroneous reading of the gas pedal position, in case the first bit is indeed used for something else.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>symless/synergy-core</title>
    <updated>2022-10-06T01:31:21Z</updated>
    <id>tag:github.com,2022-10-06:/symless/synergy-core</id>
    <link href="https://github.com/symless/synergy-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source core of Synergy, the keyboard and mouse sharing tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Synergy Core&lt;/h1&gt; &#xA;&lt;p&gt;This is the open source core component of Synergy, a keyboard and mouse sharing tool.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vshymanskyy.github.io/StandWithUkraine/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg?sanitize=true&#34; alt=&#34;SWUbanner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;News:&lt;/strong&gt; Visit the &lt;a href=&#34;https://symless.com/blog/&#34;&gt;Symless blog&lt;/a&gt; for updates&lt;/p&gt; &#xA;&lt;h2&gt;Recommended&lt;/h2&gt; &#xA;&lt;p&gt;Things most people will need.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://members.symless.com/download-authentication&#34;&gt;Download&lt;/a&gt; - Get the compiled version of Synergy 1 or Synergy 2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symless.com/contact-support&#34;&gt;Contact Support&lt;/a&gt; - Open a support ticket and talk directly to the Synergy team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symless.com/help&#34;&gt;Help Guides&lt;/a&gt; - Self-help guides and information for when you don&#39;t want to talk to people.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bit.ly/synergy-slack-2020&#34;&gt;Join us on Slack&lt;/a&gt; - Talk to other Synergy users in real time using instant messaging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.symless.com/&#34;&gt;Symless Forums&lt;/a&gt; - Discuss Synergy issues on the Symless Forums.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://symless.com/blog/&#34;&gt;Symless Blog&lt;/a&gt; - Find out what&#39;s happening at Symless and with Synergy development.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced Users&lt;/h2&gt; &#xA;&lt;p&gt;Not for the faint hearted. Only use these if you know what you&#39;re doing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/symless/synergy-core/wiki/Getting-Started&#34;&gt;Getting Started&lt;/a&gt; - How to checkout the code from git and use the right branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/symless/synergy-core/wiki/Compiling&#34;&gt;Compiling&lt;/a&gt; - Instructions on how to compile Synergy Core from source.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crowdin.com/project/synergy-core&#34;&gt;Translations&lt;/a&gt; - If you want to submit translations to the Synergy Core.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/symless/synergy-core/wiki/Text-Config&#34;&gt;Text Config&lt;/a&gt; - Write a text config file when running Synergy Core manually.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/symless/synergy-core/wiki/Command-Line&#34;&gt;Command Line&lt;/a&gt; - Go full manual and run Synergy Core from the command line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Synergy Vintage&lt;/h2&gt; &#xA;&lt;p&gt;For vintage computer enthusiasts, &lt;a href=&#34;https://github.com/nbolton/synergy-vintage&#34;&gt;Synergy Vintage&lt;/a&gt; aims to keep the origins of Synergy alive. You can use Synergy Vintage on operating systems available from 1995 to 2006.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CGAL/cgal</title>
    <updated>2022-10-06T01:31:21Z</updated>
    <id>tag:github.com,2022-10-06:/CGAL/cgal</id>
    <link href="https://github.com/CGAL/cgal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The public CGAL repository, see the README below&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CGAL/cgal/master/Installation/doc_html/images/cgal_2013_grey.png&#34; alt=&#34;CGAL&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Computational Geometry Algorithms Library (CGAL) is a C++ library that aims to provide easy access to efficient and reliable algorithms in computational geometry.&lt;/p&gt; &#xA;&lt;h1&gt;CGAL Releases&lt;/h1&gt; &#xA;&lt;p&gt;The primary vector of distribution of CGAL are source tarballs, released twice a year, announced on &lt;a href=&#34;https://www.cgal.org/&#34;&gt;the web site of CGAL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started with CGAL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Since version 5.0, CGAL is a header-only library, meaning that it is no longer needed to build CGAL libraries before it can be used.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Head over to the &lt;a href=&#34;https://doc.cgal.org/latest/Manual/general_intro.html&#34;&gt;CGAL manual&lt;/a&gt; for usage guides and tutorials that will get you started smoothly.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;See the file &lt;a href=&#34;https://raw.githubusercontent.com/CGAL/cgal/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;CGAL Git Repository Layout&lt;/h1&gt; &#xA;&lt;p&gt;The Git repository of CGAL has a different layout from release tarballs. It contains a &lt;code&gt;CMakeLists.txt&lt;/code&gt; file that serves as anchor for configuring and building programs, and a set of subfolders, so called &lt;em&gt;packages&lt;/em&gt;. Most packages implement a data structure or an algorithm for CGAL (e.g., &lt;code&gt;Convex_hull_2&lt;/code&gt;, or &lt;code&gt;Triangulation_3&lt;/code&gt;); however some packages serve special needs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Installation&lt;/code&gt; - meta-files and CMake-support&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Maintenance&lt;/code&gt; - infrastructural support&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Core&lt;/code&gt;, &lt;code&gt;CGALimageIO&lt;/code&gt;, &lt;code&gt;Qt_widget&lt;/code&gt;, &lt;code&gt;GraphicsView&lt;/code&gt; - component libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Scripts&lt;/code&gt; - scripts to simplify developer&#39;s and user&#39;s work&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Testsuite&lt;/code&gt; - infrastructure for testsuite&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Documentation&lt;/code&gt; - infrastructure for CGAL&#39;s manual&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STL_Extension&lt;/code&gt; - extensions to the standard template library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;More Information&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cgal.org/&#34;&gt;The CGAL web site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.cgal.org/&#34;&gt;Latest CGAL release documentation pages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cgal.geometryfactory.com/CGAL/doc/master/&#34;&gt;Latest CGAL master documentation pages, updated once a week&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cgal.geometryfactory.com/CGAL/testsuite/&#34;&gt;CGAL daily testsuite results&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CGAL/cgal/wiki/Guidelines&#34;&gt;Guidelines for CGAL developers&lt;/a&gt; and &lt;a href=&#34;https://github.com/CGAL/cgal/wiki/Information-for-New-Developers&#34;&gt;Information for new developers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>