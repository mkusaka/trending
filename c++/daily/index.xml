<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-24T01:30:52Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>XaFF-XaFF/Black-Angel-Rootkit</title>
    <updated>2023-03-24T01:30:52Z</updated>
    <id>tag:github.com,2023-03-24:/XaFF-XaFF/Black-Angel-Rootkit</id>
    <link href="https://github.com/XaFF-XaFF/Black-Angel-Rootkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Black Angel is a Windows 11/10 x64 kernel mode rootkit. Rootkit can be loaded with enabled DSE while maintaining its full functionality.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Black Angel Rootkit&lt;/h1&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Black Angel is a Windows 11/10 x64 kernel mode rootkit. Rootkit can be loaded with enabled DSE while maintaining its full functionality.&lt;/p&gt; &#xA; &lt;p&gt;Designed for Red Teams.&lt;/p&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Rootkit Features&lt;/h2&gt; &#xA;&lt;p&gt;Rootkit can be loaded with &lt;a href=&#34;https://github.com/TheCruZ/kdmapper&#34;&gt;kdmapper&lt;/a&gt; to bypass DSE, Black Angel Loader may not be working properly yet. Project &lt;a href=&#34;https://github.com/not-wlan/driver-hijack&#34;&gt;driver-hijack&lt;/a&gt; is used to maintain full driver functionality such as callback support.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DSE Bypass (No need to turn test signing on)&lt;/li&gt; &#xA; &lt;li&gt;KPP Bypass&lt;/li&gt; &#xA; &lt;li&gt;Hide processes&lt;/li&gt; &#xA; &lt;li&gt;Hide ports (TCP/UDP)&lt;/li&gt; &#xA; &lt;li&gt;Process permission elevation&lt;/li&gt; &#xA; &lt;li&gt;Process protection&lt;/li&gt; &#xA; &lt;li&gt;Shellcode injector (Unkillable shellcode. Even if process dies, shellcode can still run)&lt;/li&gt; &#xA; &lt;li&gt;(TODO) Hide files/directories&lt;/li&gt; &#xA; &lt;li&gt;(TODO) Hide registry keys&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;You can easily implement rootkit calls by copying and pasting &lt;a href=&#34;https://github.com/XaFF-XaFF/Black-Angel-Rootkit/raw/master/Black%20Angel%20Client/BlackAngel.hpp&#34;&gt;BlackAngel header&lt;/a&gt; file into your project.&lt;/p&gt; &#xA;&lt;h2&gt;Demonstration&lt;/h2&gt; &#xA;&lt;p&gt;You can find rootkit demonstration on my &lt;a href=&#34;https://www.youtube.com/watch?v=YN5A-d0iljI&#34;&gt;channel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Additional Info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remember to change &lt;a href=&#34;https://github.com/XaFF-XaFF/Black-Angel-Rootkit/raw/f4a5c762ae864b7395a6a03b8d46fdeda6a8bb25/Black%20Angel%20Rootkit/rootkit.hpp#L7&#34;&gt;ACTIVE_PROCESS_LINKS&lt;/a&gt; offset corresponding to your Windows versions. Current offset has been tested on Windows 10/11 Pro 21H2.&lt;/li&gt; &#xA; &lt;li&gt;There may still be stability issues!&lt;/li&gt; &#xA; &lt;li&gt;KM shellcode injector is OP. If you inject shellcode into protected process, no antivirus will remove it &amp;gt;:D Simple shellcodes such as Metasploit shell_reverse_tcp are able to work even if process is terminated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheCruZ/kdmapper&#34;&gt;kdmapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/not-wlan/driver-hijack&#34;&gt;driver-hijack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/XaFF-XaFF/Cronos-Rootkit&#34;&gt;Cronos-Rootkit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>TheCruZ/kdmapper</title>
    <updated>2023-03-24T01:30:52Z</updated>
    <id>tag:github.com,2023-03-24:/TheCruZ/kdmapper</id>
    <link href="https://github.com/TheCruZ/kdmapper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KDMapper is a simple tool that exploits iqvw64e.sys Intel driver to manually map non-signed drivers in memory&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KDMapper&lt;/h1&gt; &#xA;&lt;p&gt;Original creator &lt;a href=&#34;https://github.com/z175&#34;&gt;https://github.com/z175&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Updated and improved by &lt;a href=&#34;https://github.com/TheCruZ&#34;&gt;https://github.com/TheCruZ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mdl allocation writed by &lt;a href=&#34;https://github.com/TygoL&#34;&gt;https://github.com/TygoL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tested from &lt;strong&gt;Windows 10 1607&lt;/strong&gt; to &lt;strong&gt;Windows 11 22449.1&lt;/strong&gt; &lt;span&gt;✔&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Update mainly done for UnknownCheats Forum &lt;a href=&#34;https://www.unknowncheats.me/forum/members/1117395.html&#34;&gt;https://www.unknowncheats.me/forum/members/1117395.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;KDMapper is a simple tool that exploits iqvw64e.sys Intel driver to manually map non-signed drivers in memory&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Add definition &lt;strong&gt;DISABLE_OUTPUT&lt;/strong&gt; to remove all console outputs&lt;/p&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Works with /GS- compiled drivers&#xA;Hooks NtAddAtom which exists everywhere and is rarely called&#xA;Clears MmUnloadedDrivers&#xA;Clears PiDDBCacheTable&#xA;Clears g_KernelHashBucketList&#xA;Use NtLoadDriver and NtUnloadDriver for less traces&#xA;Prevent load if \Device\Nal exists (Prevents BSOD)&#xA;Header section skipped while copying driver to kernel&#xA;Added param --free to automatically unmap the allocated memory&#xA;Added param --mdl to map in mdl memory&#xA;Added param --PassAllocationPtr to pass allocation ptr as first param&#xA;Added the possibility to modify params before call driver entry&#xA;Now you can pass directly bytes to mapdriver function&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Set Custom Driver Entry Point&#xA;Create a thread and return from driver entry fastest as you can to prevent unexpected calls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Errors 0xC0000022 and 0xC000009A:&lt;/h3&gt; &#xA;&lt;p&gt;A lot of people ask me about this errors loading the vulnerable driver, both are caused by FACEIT AC since his driver is always running you have to uninstall it&lt;/p&gt; &#xA;&lt;h3&gt;Error 0xC0000603:&lt;/h3&gt; &#xA;&lt;p&gt;On versions after Windows 11 22H2 (22621.819), the certificate for the has been revoked and the mapper will return a status of STATUS_IMAGE_CERT_REVOKED.&lt;/p&gt; &#xA;&lt;p&gt;Have Fun!!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NVIDIAGameWorks/Path-Tracing-SDK</title>
    <updated>2023-03-24T01:30:52Z</updated>
    <id>tag:github.com,2023-03-24:/NVIDIAGameWorks/Path-Tracing-SDK</id>
    <link href="https://github.com/NVIDIAGameWorks/Path-Tracing-SDK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time path tracing library and sample&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Path Tracing SDK v1.0.0&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NVIDIAGameWorks/Path-Tracing-SDK/main/images/r-title.png&#34; alt=&#34;Title&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Path Tracing SDK is a code sample that strives to embody years of ray tracing and neural graphics research and experience. It is intended as a starting point for a path tracer integration, as a reference for various integrated SDKs, and/or for learning and experimentation.&lt;/p&gt; &#xA;&lt;p&gt;The base path tracing implementation derives from NVIDIA’s &lt;a href=&#34;https://github.com/NVIDIAGameWorks/Falcor&#34;&gt;Falcor Research Path Tracer&lt;/a&gt;, ported to approachable C++/HLSL &lt;a href=&#34;https://github.com/NVIDIAGameWorks/donut&#34;&gt;Donut framework&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DirectX 12 and Vulkan back-ends&lt;/li&gt; &#xA; &lt;li&gt;Reference and real-time modes&lt;/li&gt; &#xA; &lt;li&gt;Simple BSDF model that is easy to extend&lt;/li&gt; &#xA; &lt;li&gt;Simple asset pipeline based on glTF 2.0 (support for a subset of glTF extensions including animation)&lt;/li&gt; &#xA; &lt;li&gt;NEE/visibility rays and importance sampling for environment maps with MIS&lt;/li&gt; &#xA; &lt;li&gt;Basic volumes and nested dielectrics with priority&lt;/li&gt; &#xA; &lt;li&gt;RayCone for texture MIP selection&lt;/li&gt; &#xA; &lt;li&gt;Basic analytic lights (directional, spot, point)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIAGameWorks/RTXDI&#34;&gt;RTXDI&lt;/a&gt; integration for ReSTIR DI (light importance sampling) and and ReSTIR GI (indirect lighting)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIAGameWorks/Opacity-MicroMap-SDK&#34;&gt;OMM&lt;/a&gt; integration for fast ray traced alpha testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIAGameWorks/RayTracingDenoiser&#34;&gt;NRD&lt;/a&gt; ReLAX and ReBLUR denoiser integration with up to 3-layer path space decomposition (Stable Planes)&lt;/li&gt; &#xA; &lt;li&gt;Reference mode &#39;photo-mode screenshot&#39; with basic &lt;a href=&#34;https://developer.nvidia.com/optix-denoiser&#34;&gt;OptiX denoiser&lt;/a&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;Basic TAA, tone mapping, etc.&lt;/li&gt; &#xA; &lt;li&gt;Streamline + DLSS integration (coming very soon)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DLSS is currently not enabled due to upgrade to Streamline 2.0; integration is work in progress&lt;/li&gt; &#xA; &lt;li&gt;SER support on Vulkan is currently work in progress&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10 20H1 (version 2004-10.0.19041) or newer&lt;/li&gt; &#xA; &lt;li&gt;DXR Capable GPU&lt;/li&gt; &#xA; &lt;li&gt;GeForce Game Ready Driver 531.18 or newer&lt;/li&gt; &#xA; &lt;li&gt;DirectX 12 or Vulkan API&lt;/li&gt; &#xA; &lt;li&gt;DirectX Raytracing 1.1 API, or higher&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio 2019 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Folder Structure&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/bin&lt;/td&gt; &#xA;   &lt;td&gt;default folder for binaries and compiled shaders&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/build&lt;/td&gt; &#xA;   &lt;td&gt;default folder for build files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/donut&lt;/td&gt; &#xA;   &lt;td&gt;code for a custom version of the Donut framework&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/donut/nvrhi&lt;/td&gt; &#xA;   &lt;td&gt;code for the NVRHI rendering API layer (a git submodule)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/external&lt;/td&gt; &#xA;   &lt;td&gt;external libraries and SDKs, including NRD, RTXDI, and OMM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/media&lt;/td&gt; &#xA;   &lt;td&gt;models, textures, scene files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/tools&lt;/td&gt; &#xA;   &lt;td&gt;optional command line tools (denoiser, texture compressor, etc)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/pt_sdk&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Path Tracing SDK core; Sample.cpp/.h/.hlsl contain entry points&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/pt_sdk/PathTracer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Core path tracing shaders&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;At the moment, only Windows builds are supported. We are going to add Linux support in the future.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository &lt;strong&gt;with all submodules recursively&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;&lt;code&gt;git clone --recursive https://github.com/NVIDIAGameWorks/Path-Tracing-SDK.git&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull the media files from Packman:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd Path-Tracing-SDK&#xA;update_dependencies.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a build folder.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Any folder name works, but git is configured to ignore folders named &lt;code&gt;build\*&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use CMake to configure the build and generate the project files.&lt;/p&gt; &lt;p&gt;Use of CMake GUI is recommended but &lt;code&gt;cmake ..&lt;/code&gt; works too. Make sure to select the x64 platform for the generator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the solution generated by CMake in the build folder.&lt;/p&gt; &lt;p&gt;Open the generated solution (i.e. &lt;code&gt;build/PathTracingSDK.sln&lt;/code&gt;) with Visual Studio and build it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select and run the &lt;code&gt;pt_sdk&lt;/code&gt; project. Binaries get built to the &lt;code&gt;bin&lt;/code&gt; folder. Media is loaded from &lt;code&gt;media&lt;/code&gt; folder.&lt;/p&gt; &lt;p&gt;If making a binary build, the &lt;code&gt;media&lt;/code&gt; and &lt;code&gt;tools&lt;/code&gt; folders can be placed into &lt;code&gt;bin&lt;/code&gt; and packed up together (i.e. the sample app will search for both &lt;code&gt;media\&lt;/code&gt; and &lt;code&gt;..\media\&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;User Interface&lt;/h2&gt; &#xA;&lt;p&gt;Once the application is running, most of the SDK features can be accessed via the UI window on the left hand side and drop-down controls in the top-center.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NVIDIAGameWorks/Path-Tracing-SDK/main/images/r-ui.png&#34; alt=&#34;UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Camera can be moved using W/S/A/D keys and rotated by dragging with the left mouse cursor.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-debug&lt;/code&gt; to enable the graphics API debug layer or runtime, and the &lt;a href=&#34;https://github.com/NVIDIAGameWorks/nvrhi&#34;&gt;NVRHI&lt;/a&gt; validation layer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-fullscreen&lt;/code&gt; to start in full screen mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-no-vsync&lt;/code&gt; to start without VSync (can be toggled in the GUI).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-print-graph&lt;/code&gt; to print the scene graph into the output log on startup.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-width&lt;/code&gt; and &lt;code&gt;-height&lt;/code&gt; to set the window size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;FileName&amp;gt;&lt;/code&gt; to load any supported model or scene from the given file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We are working on more detailed SDK developer documentation - watch this space!&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Path Tracing SDK is under active development. Please report any issues directly through GitHub issue tracker, and for any information, suggestions or general requests please feel free to contact us at &lt;a href=&#34;mailto:pathtracing-sdk-support@nvidia.com&#34;&gt;pathtracing-sdk-support@nvidia.com&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIAGameWorks/Path-Tracing-SDK/main/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>