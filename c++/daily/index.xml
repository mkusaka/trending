<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-28T01:22:50Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DRCL-USC/Hector_Simulation</title>
    <updated>2023-10-28T01:22:50Z</updated>
    <id>tag:github.com,2023-10-28:/DRCL-USC/Hector_Simulation</id>
    <link href="https://github.com/DRCL-USC/Hector_Simulation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simulation Software for HECTOR Humanoid Robot (ROS/MATLAB)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hector Open-source Simulation Software in ROS&lt;/h1&gt; &#xA;&lt;h2&gt;HECTOR: Humanoid for Enhanced ConTrol and Open-source Research&lt;/h2&gt; &#xA;&lt;p&gt;This branch contains the ROS+Gazebo simulation for the Hector humanoid robot.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/DRCL-USC/Hector_Simulation/raw/Matlab_Simulation/STL%20files/Hector_picture.jpg&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &#xA;&lt;p&gt;Introduction Video: &lt;a href=&#34;https://youtu.be/NcW-NFwjMh0&#34;&gt;https://youtu.be/NcW-NFwjMh0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.boost.org&#34;&gt;Boost&lt;/a&gt; (version 1.5.4 or higher)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.cmake.org&#34;&gt;CMake&lt;/a&gt; (version 2.8.3 or higher)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lcm-proj.github.io&#34;&gt;LCM&lt;/a&gt; (version 1.4.0 or higher)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wiki.ros.org/&#34;&gt;ROS&lt;/a&gt; Neotic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gazebosim.org/home&#34;&gt;Gazebo&lt;/a&gt; 11&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eigen.tuxfamily.org/index.php?title=Main_Page&#34;&gt;Eigen3&lt;/a&gt; (&amp;gt;3.3)&lt;/li&gt; &#xA; &lt;li&gt;unitree_legged_sdk&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/coin-or/qpOASES&#34;&gt;qpOASES&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ROS_Packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install ros-noetic-controller-manager ros-noetic-ros-control ros-noetic-ros-controllers ros-noetic-joint-state-controller ros-noetic-effort-controllers ros-noetic-velocity-controllers ros-noetic-position-controllers ros-noetic-robot-controllers ros-noetic-robot-state-publisher ros-noetic-gazebo-ros-pkgs ros-noetic-gazebo-ros-control&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;System Requirements:&lt;/h2&gt; &#xA;&lt;p&gt;If you want to simulate with &lt;a href=&#34;http://gazebosim.org/&#34;&gt;Gazebo&lt;/a&gt;, we recommend &lt;strong&gt;x86 platform&lt;/strong&gt;. &lt;strong&gt;ARM platform&lt;/strong&gt; is not suggested for simulation. So, if you run this code on ARM platform, please remove &lt;em&gt;Simulation related&lt;/em&gt; folder first.&lt;/p&gt; &#xA;&lt;p&gt;The current system environment is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 20.04 + ROS Noetic* (recommended, tested stable)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration:&lt;/h2&gt; &#xA;&lt;p&gt;Use command to open .bashrc file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gedit ~/.bashrc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure the following exist in your &lt;code&gt;~/.bashrc&lt;/code&gt; file or export them in terminal. &lt;code&gt;noetic&lt;/code&gt;, &lt;code&gt;gazebo-11&lt;/code&gt; and &lt;code&gt;~/catkin_ws&lt;/code&gt; should be replaced in your own case.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source /opt/ros/noetic/setup.bash&#xA;source /usr/share/gazebo-11/setup.sh&#xA;source ~/catkin_ws/devel/setup.bash&#xA;export ROS_PACKAGE_PATH=~/catkin_ws:${ROS_PACKAGE_PATH}&#xA;export GAZEBO_PLUGIN_PATH=~/catkin_ws/devel/lib:${GAZEBO_PLUGIN_PATH}&#xA;export LD_LIBRARY_PATH=~/catkin_ws/devel/lib:${LD_LIBRARY_PATH}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cd ~/catkin_ws&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;catkin_make&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: If it is the first time to compile, Please compile the laikago_msgs first by following command:&lt;/p&gt; &#xA;&lt;p&gt;complie the package&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;catkin_make -DCMAKE_BUILD_TYPE=Release&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;launch and run gazebo simulation:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;roslaunch unitree_gazebo biped.launch&lt;/code&gt; The robot should be standing on the ground&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In a new terminal, enter and source your workspace, then run: &lt;code&gt;rosrun hector_control hector_ctrl&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the start button at the bottom of the simulator, the robot should stand up/move away&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In some occasions the controller does not kick in after starting, please terminate the controller with ctrl + \. Then go back to the simulator, pause, and reset (ctrl + R). Rerun controller.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Keyboard Control:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inside the terminal window, use W or S to control x direction speed&lt;/li&gt; &#xA; &lt;li&gt;Use A or D to control robot turning (TODO: seems to have a small bug when turning past 90 degrees)&lt;/li&gt; &#xA; &lt;li&gt;Use J or L to control y direction speed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cite Us:&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for choosing our software for your research and development, we highly appreciate your citing our work:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Force-and-moment-based model predictive control for achieving highly dynamic locomotion on bipedal robots: &lt;a href=&#34;https://arxiv.org/abs/2104.00065&#34;&gt;https://arxiv.org/abs/2104.00065&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;  @inproceedings{li2021force,&#xA;  title={Force-and-moment-based model predictive control for achieving highly dynamic locomotion on bipedal robots},&#xA;  author={Li, Junheng and Nguyen, Quan},&#xA;  booktitle={2021 60th IEEE Conference on Decision and Control (CDC)},&#xA;  pages={1024--1030},&#xA;  year={2021},&#xA;  organization={IEEE}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contact Information:&lt;/h2&gt; &#xA;&lt;p&gt;Yiyu Chen -- &lt;a href=&#34;mailto:yiyuc@usc.edu&#34;&gt;yiyuc@usc.edu&lt;/a&gt; Junheng Li -- &lt;a href=&#34;mailto:junhengl@usc.edu&#34;&gt;junhengl@usc.edu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please read the License.md for details.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgementï¼š&lt;/h2&gt; &#xA;&lt;p&gt;The authors would like to express special thanks to MIT Biomimetic Lab for providing the &lt;a href=&#34;https://github.com/dbdxnuliba/mit-biomimetics_Cheetah&#34;&gt;cheetah MPC framework&lt;/a&gt; and Unitree Robotics for providing the Unitree gazebo simulation framework.&lt;/p&gt;</summary>
  </entry>
</feed>