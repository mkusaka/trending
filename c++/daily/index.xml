<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-29T01:30:39Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tjumcw/6.824</title>
    <updated>2023-04-29T01:30:39Z</updated>
    <id>tag:github.com,2023-04-29:/tjumcw/6.824</id>
    <link href="https://github.com/tjumcw/6.824" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MIT 6.824 distributed system C++Version&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;6.824&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MIT 6.824 distributed system C++VersionC++版本的6.824分布式系统实现&lt;/li&gt; &#xA; &lt;li&gt;因为没有go的骨架代码以及官方底层代码的支持，很多地方处理起来比较复杂&lt;/li&gt; &#xA; &lt;li&gt;请先看各个LAB的说明文档，若有需要可参考src下的源码&lt;/li&gt; &#xA; &lt;li&gt;整个项目所有LAB都涉及RPC，我个人用的RPC库在LAB1中有详细说明，包括安装方式以及所需的依赖&lt;/li&gt; &#xA; &lt;li&gt;官方只有go的测试程序，我是自己根据各种情况模拟bug进行测试，我自己的想法可能会有漏洞&lt;/li&gt; &#xA; &lt;li&gt;用到了一些测试脚本以及makefile，编译方法都写里面了请自行阅读，MapReduce有一部分写在编译.txt中&lt;/li&gt; &#xA; &lt;li&gt;若要进行测试可以自己写测试代码，若按我的main函数的话，参数要按我给的形式传&lt;/li&gt; &#xA; &lt;li&gt;我自己制造的一些人为bug对参数有特定要求，请仔细阅读源码&lt;/li&gt; &#xA; &lt;li&gt;有问题可以留言，谢谢，有错误也烦请指正&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>harrisonvanderbyl/rwkv-cpp-cuda</title>
    <updated>2023-04-29T01:30:39Z</updated>
    <id>tag:github.com,2023-04-29:/harrisonvanderbyl/rwkv-cpp-cuda</id>
    <link href="https://github.com/harrisonvanderbyl/rwkv-cpp-cuda" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A torchless, c++ rwkv implementation using 8bit quantization, written in cuda&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RWKV Cuda &lt;a href=&#34;https://patreon.com/Unexplored_Horizons&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3DUnexplored_Horizons%26type%3Dpatrons&amp;amp;style=flat&#34; alt=&#34;Support me on Patreon&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is a super simple c++/cuda implementation of rwkv with no pytorch/libtorch dependencies.&lt;/p&gt; &#xA;&lt;p&gt;included is a simple example of how to use in both c++ and python.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Direct Disk -&amp;gt; Gpu loading ( practically no ram needed )&lt;/li&gt; &#xA; &lt;li&gt;Uint8 by default&lt;/li&gt; &#xA; &lt;li&gt;Incredibly fast&lt;/li&gt; &#xA; &lt;li&gt;No dependencies&lt;/li&gt; &#xA; &lt;li&gt;Simple to use&lt;/li&gt; &#xA; &lt;li&gt;Simple to build&lt;/li&gt; &#xA; &lt;li&gt;Optional Python binding using pytorch tensors as wrappers&lt;/li&gt; &#xA; &lt;li&gt;Native tokenizer!&lt;/li&gt; &#xA; &lt;li&gt;Windows Support!&lt;/li&gt; &#xA; &lt;li&gt;Distributable programs! (check actions for the prebuilt example apps)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/harrisonvanderbyl/godot-rwkv&#34;&gt;Godot module&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimize .pth converter (currently uses a lot of ram)&lt;/li&gt; &#xA; &lt;li&gt;Better uint8 support ( currently only uses Q8_0 algorythm)&lt;/li&gt; &#xA; &lt;li&gt;Fully fleshed out demos&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Run example app&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;go to the actions tab&lt;/li&gt; &#xA; &lt;li&gt;find a green checkmark for your platform&lt;/li&gt; &#xA; &lt;li&gt;download the executable&lt;/li&gt; &#xA; &lt;li&gt;download or convert a model (download links pending)&lt;/li&gt; &#xA; &lt;li&gt;place the model.bin file in the same place as the executable&lt;/li&gt; &#xA; &lt;li&gt;run the executable&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Build on Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build on Windows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; mkdir build&#xA;&amp;gt; cd build&#xA;&amp;gt; cmake ..&#xA;&amp;gt; cmake --build . --config release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find executable at build/release/rwkv.exe&lt;/p&gt; &#xA;&lt;p&gt;Make sure you already installed CUDA Toolkit and Visual Studio 2022.&lt;/p&gt; &#xA;&lt;h2&gt;Convert the model into the format&lt;/h2&gt; &#xA;&lt;p&gt;You can download the weights of the model here: &lt;a href=&#34;https://huggingface.co/BlinkDL/rwkv-4-raven/tree/main&#34;&gt;https://huggingface.co/BlinkDL/rwkv-4-raven/tree/main&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For conversion to a .bin model you can choose between 2 options:&lt;/p&gt; &#xA;&lt;h3&gt;GUI option&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have python + torch, tkinter, tqdm and Ninja packages installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; cd converter&#xA;&amp;gt; python3 convert_model.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CLI option&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have python + torch, tqdm and Ninja packages installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; cd converter&#xA;&amp;gt; python3 convert_model.py your_downloaded_model.pth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Windows, please run the above commands in &#34;x64 Native Tools Command Prompt for VS 2022&#34; terminal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;C++ tokenizer came from this project: &lt;a href=&#34;https://github.com/gf712/gpt2-cpp/&#34;&gt;https://github.com/gf712/gpt2-cpp/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheD1rkMtr/StackCrypt</title>
    <updated>2023-04-29T01:30:39Z</updated>
    <id>tag:github.com,2023-04-29:/TheD1rkMtr/StackCrypt</id>
    <link href="https://github.com/TheD1rkMtr/StackCrypt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create a new thread that will suspend every thread and encrypt its stack, then going to sleep , then decrypt the stacks and resume threads&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;StackCrypt&lt;/h1&gt; &#xA;&lt;p&gt;Create a new thread that will suspend every thread and encrypt its stack, then going to sleep , then decrypt the stacks and resume threads&lt;/p&gt; &#xA;&lt;h3&gt;Video&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/123980007/234462390-02ac980f-b924-478a-b4f3-b707451fb2df.mp4&#34;&gt;https://user-images.githubusercontent.com/123980007/234462390-02ac980f-b924-478a-b4f3-b707451fb2df.mp4&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>