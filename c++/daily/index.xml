<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-23T01:25:59Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Krypteria/AtlasLdr</title>
    <updated>2023-12-23T01:25:59Z</updated>
    <id>tag:github.com,2023-12-23:/Krypteria/AtlasLdr</id>
    <link href="https://github.com/Krypteria/AtlasLdr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reflective x64 PE/DLL Loader implemented using Dynamic Indirect Syscalls&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Atlas is a reflective x64 loader that has the following features:&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retrieve of DLL and PE from a remote server&lt;/li&gt; &#xA; &lt;li&gt;Manual Mapping on a remote process&lt;/li&gt; &#xA; &lt;li&gt;Position independent code&lt;/li&gt; &#xA; &lt;li&gt;Use of indirect Syscalls &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ZwAllocateVirtualMemory&lt;/li&gt; &#xA;   &lt;li&gt;ZwProtectVirtualMemory&lt;/li&gt; &#xA;   &lt;li&gt;ZwQuerySystemInformation&lt;/li&gt; &#xA;   &lt;li&gt;ZwFreeVirtualMemory&lt;/li&gt; &#xA;   &lt;li&gt;ZwCreateThreadEx&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Single stub for all Syscalls &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Dynamic SSN retrieve&lt;/li&gt; &#xA;   &lt;li&gt;Dynamic Syscall address resolution&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Atlas also uses &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;LdrLoadDll&lt;/li&gt; &#xA;   &lt;li&gt;NtWriteVirtualMemory&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Custom implementations of &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GetProcAddress&lt;/li&gt; &#xA;   &lt;li&gt;GetModuleHandle&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;API hashing&lt;/li&gt; &#xA; &lt;li&gt;Cleanup on error&lt;/li&gt; &#xA; &lt;li&gt;Variable EntryPoint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Krypteria/AtlasLdr/assets/55555187/8737996e-2da8-4025-b128-0e65d1080af0&#34; alt=&#34;atlasldr&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;p&gt;Atlas needs to be compiled using &lt;strong&gt;x86_64-w64-mingw32-g++&lt;/strong&gt;, once you have it on your system, just execute make (or mingw32-make.exe) on the project folder&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Krypteria/AtlasLdr/assets/55555187/db6b328f-a916-4ccc-bd14-1d4bead19d8a&#34; alt=&#34;atlascompilation&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Future work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve the way the syscalls are made&lt;/li&gt; &#xA; &lt;li&gt;x86 support&lt;/li&gt; &#xA; &lt;li&gt;Give more flexibility to the HTTP client&lt;/li&gt; &#xA; &lt;li&gt;Implement some form of encryption on the remote connection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;There are improvements that could be made such as modifying the way syscalls are executed with a consistent and error-proof assembly code. In the future this could be implemented.&lt;/p&gt;</summary>
  </entry>
</feed>