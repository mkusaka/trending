<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-09T01:26:10Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>andreasfertig/cppinsights</title>
    <updated>2024-04-09T01:26:10Z</updated>
    <id>tag:github.com,2024-04-09:/andreasfertig/cppinsights</id>
    <link href="https://github.com/andreasfertig/cppinsights" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C++ Insights - See your source code with the eyes of a compiler&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/andreasfertig/cppinsights/main/artwork/logo_cppinsights.png&#34; alt=&#34;cpp insights logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;C++ Insights - See your source code with the eyes of a compiler.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/andreasfertig/cppinsights/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/latest-download-blue.svg?sanitize=true&#34; alt=&#34;download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/andreasfertig/cppinsights/actions/&#34;&gt;&lt;img src=&#34;https://github.com/andreasfertig/cppinsights/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/andreasfertig/cppinsights&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/andreasfertig/cppinsights/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cppinsights.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/try-online-blue.svg?sanitize=true&#34; alt=&#34;Try online&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.cppinsights.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/view-documentation-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/cppinsights&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-support-orange.svg?sanitize=true&#34; alt=&#34;patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io#https://github.com/andreasfertig/cppinsights&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andreasfertig/cppinsights/main/#what&#34;&gt;What&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andreasfertig/cppinsights/main/#why&#34;&gt;Why&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andreasfertig/cppinsights/main/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andreasfertig/cppinsights/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andreasfertig/cppinsights/main/#get-involved&#34;&gt;Get Involved&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andreasfertig/cppinsights/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cppinsights.io&#34;&gt;C++ Insights&lt;/a&gt; is a &lt;a href=&#34;https://clang.llvm.org&#34;&gt;Clang&lt;/a&gt;-based tool that does a source-to-source transformation. The goal of C++ Insights is to make things visible that normally and intentionally happen behind the scenes. It&#39;s about the magic the compiler does for us to make things work.&lt;/p&gt; &#xA;&lt;p&gt;Take this piece of code for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-.cpp&#34;&gt;class Base {&#xA;};&#xA;&#xA;class Derived : public Base {&#xA;};&#xA;&#xA;int main() {&#xA;  Derived d;&#xA;&#xA;  Derived d2 = d;&#xA;&#xA;  d2 = d;&#xA;&#xA;  Base&amp;amp; b = d;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nothing special, and of course, it compiles. This is the compiler&#39;s view on it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-.cpp&#34;&gt;class Base&#xA;{&#xA;  public:&#xA;  // inline constexpr Base() noexcept = default;&#xA;  // inline constexpr Base(const Base &amp;amp;) noexcept = default;&#xA;  // inline constexpr Base &amp;amp; operator=(const Base &amp;amp;) noexcept = default;&#xA;};&#xA;&#xA;&#xA;&#xA;class Derived : public Base&#xA;{&#xA;  public:&#xA;  // inline constexpr Derived() noexcept = default;&#xA;  // inline constexpr Derived(const Derived &amp;amp;) noexcept = default;&#xA;  // inline constexpr Derived &amp;amp; operator=(const Derived &amp;amp;) noexcept = default;&#xA;};&#xA;&#xA;&#xA;&#xA;int main()&#xA;{&#xA;  Derived d;&#xA;  Derived d2 = Derived(d);&#xA;  d2.operator=(d);&#xA;  Base &amp;amp; b = static_cast&amp;lt;Base&amp;amp;&amp;gt;(d);&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see all the compiler-provided special member functions and the upcast from &lt;code&gt;Derived&lt;/code&gt; to &lt;code&gt;Base&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cppinsights.io&#34;&gt;C++ Insights&lt;/a&gt; is a &lt;a href=&#34;https://clang.llvm.org&#34;&gt;Clang&lt;/a&gt;-based tool that does a source-to-source transformation. The goal of C++ Insights is to make things visible that normally and intentionally happen behind the scenes. It&#39;s about the magic the compiler does for us to make things work. Or looking through the classes of a compiler.&lt;/p&gt; &#xA;&lt;p&gt;In 2017, I started looking into some new things we got with C++11, C++14, and C++17. Amazing things like lambdas, range-based for-loops, and structured bindings. I put it together in a talk. You can find the &lt;a href=&#34;https://andreasfertig.com/talks/dl/afertig-ndcolo-2017-fast-and-small.pdf&#34;&gt;slides&lt;/a&gt; and a &lt;a href=&#34;https://youtu.be/Bt7KzFxcbgc&#34;&gt;video&lt;/a&gt; online.&lt;/p&gt; &#xA;&lt;p&gt;However, all that research and some of my training and teaching got me to start thinking about how it would be if we could see with the eyes of the compiler. Sure, there is an AST dump, at least for Clang. We can see what code the compiler generates from a C++ source snippet with tools like Compiler Explorer. However, what we see is assembler. Neither the AST nor the Compiler Explorer output is in the language I write code. Hence, I&#39;m not very familiar with this output. Plus, when teaching students C++, showing an AST and explaining that it is all there was not quite satisfying for me.&lt;/p&gt; &#xA;&lt;p&gt;I started to write a Clang-based tool that can transform a range-based for-loop into the compiler-internal version. Then, I did the same for structured bindings and lambdas. In the end, I did much more than initially planned. It shows where operators are invoked and places in which the compiler does some casting. C++ Insights can deduce the type behind &lt;code&gt;auto&lt;/code&gt; or &lt;code&gt;decltype&lt;/code&gt;. The goal is to produce compilable code. However, this is not possible in all places.&lt;/p&gt; &#xA;&lt;p&gt;You can see, for example, the transformation of a &lt;a href=&#34;https://cppinsights.io/s/e4e19791&#34;&gt;lambda&lt;/a&gt;, &lt;a href=&#34;https://cppinsights.io/s/0cddd172&#34;&gt;range-based for-loop&lt;/a&gt;, or &lt;a href=&#34;https://cppinsights.io/s/6c61d601&#34;&gt;auto&lt;/a&gt;. Of course, you can transform any other C++ snippet.&lt;/p&gt; &#xA;&lt;p&gt;See yourself. C++ Insights is available online: &lt;a href=&#34;https://cppinsights.io&#34;&gt;cppinsights.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Still, there is work to do.&lt;/p&gt; &#xA;&lt;p&gt;I do not claim to get all the things right. I&#39;m also working on supporting features from new standards, like C++20, at the moment. Please remember that C++ Insights is based on Clang and its understanding of the AST.&lt;/p&gt; &#xA;&lt;p&gt;I did a couple of talks about C++ Insights since I released C++ Insights. For example, at C++ now. Here are the &lt;a href=&#34;https://andreasfertig.com/talks/dl/afertig-2021-cppnow-cpp-insights.pdf&#34;&gt;slides&lt;/a&gt; and the &lt;a href=&#34;https://youtu.be/p-8wndrTaTs&#34;&gt;video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;C++ Insights can be built inside the Clang source tree or outside.&lt;/p&gt; &#xA;&lt;h3&gt;Building on Windows&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/andreasfertig/cppinsights/main/Readme_Windows.md&#34;&gt;Readme_Windows.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building on Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;To build with &lt;code&gt;extra/clang&lt;/code&gt; use the following extra flags: &lt;code&gt;-DINSIGHTS_USE_SYSTEM_INCLUDES=off -DCLANG_LINK_CLANG_DYLIB=on -DLLVM_LINK_LLVM_DYLIB=on&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/andreasfertig/cppinsights/issues/186&#34;&gt;https://github.com/andreasfertig/cppinsights/issues/186&lt;/a&gt; for an explanation of why &lt;code&gt;INSIGHTS_USE_SYSTEM_INCLUDES&lt;/code&gt; needs to be turned off.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;extra/clang&lt;/code&gt; and &lt;code&gt;extra/llvm&lt;/code&gt; provide &lt;code&gt;/usr/lib/{libclangAST.so,libLLVM*.a,libLLVM.so}&lt;/code&gt;. &lt;code&gt;libclangAST.so&lt;/code&gt; needs &lt;code&gt;libLLVM.so&lt;/code&gt; and there would be a conflict if &lt;code&gt;libLLVM*.a&lt;/code&gt; (instead of &lt;code&gt;libLLVM.so&lt;/code&gt;) are linked. See &lt;a href=&#34;https://bugs.archlinux.org/task/60512&#34;&gt;https://bugs.archlinux.org/task/60512&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building outside Clang&lt;/h3&gt; &#xA;&lt;p&gt;You need to have a Clang installation in the search path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/andreasfertig/cppinsights.git&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake -G&#34;Ninja&#34; ../cppinsights&#xA;ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting binary (insights) can be found in the &lt;code&gt;build&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;Building inside Clang&lt;/h3&gt; &#xA;&lt;p&gt;For building it inside the Clang source tree, assuming you have your source tree already prepared under &lt;code&gt;llvm-project&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd llvm-project/clang-tools-extra/&#xA;git clone https://github.com/andreasfertig/cppinsights.git&#xA;&#xA;echo &#34;add_subdirectory(cppinsights)&#34; &amp;gt;&amp;gt; CMakeLists.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To activate the C++ Insights build you have to set &lt;code&gt;-DLLVM_ENABLE_PROJECTS=&#34;clang;clang-tools-extra&#34;&lt;/code&gt; for &lt;code&gt;cmake&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS=&#34;clang;clang-tools-extra&#34; -G &#34;Unix Makefiles&#34; ../llvm-project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, build Clang as you normally do.&lt;/p&gt; &#xA;&lt;h3&gt;cmake options&lt;/h3&gt; &#xA;&lt;p&gt;There are a couple of options that can be enabled with &lt;a href=&#34;https://cmake.org&#34;&gt;cmake&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;INSIGHTS_STRIP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Strip insight after build&lt;/td&gt; &#xA;   &lt;td&gt;ON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;INSIGHTS_STATIC&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use static linking&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;INSIGHTS_COVERAGE&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable code coverage&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;INSIGHTS_USE_LIBCPP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use libc++ for tests&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DEBUG&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable debug&lt;/td&gt; &#xA;   &lt;td&gt;OFF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Building for ARM on macOS&lt;/h3&gt; &#xA;&lt;p&gt;It seems best to supply the architecture during configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DCMAKE_OSX_ARCHITECTURES=arm64 ../cppinsights&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use it with &lt;a href=&#34;https://www.cevelop.com&#34;&gt;Cevelop&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/andreasfertig/cppinsights.git&#xA;mkdir build_eclipse&#xA;cd build_eclipse&#xA;cmake -G&#34;Eclipse CDT4 - Unix Makefiles&#34; ../cppinsights/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in &lt;a href=&#34;https://www.cevelop.com&#34;&gt;Cevelop&lt;/a&gt; Import -&amp;gt; General -&amp;gt; Existing Project into Workspace. Select &lt;code&gt;build_eclipse&lt;/code&gt;. Enjoy editing with &lt;a href=&#34;https://www.cevelop.com&#34;&gt;Cevelop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Using C++ Insights is fairly simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;insights &amp;lt;YOUR_CPP_FILE&amp;gt; -- -std=c++17&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Things get complicated when it comes to the system-include paths. These paths are hard-coded in the binary, which seems to come from the compiler C++ Insights was built with. To help with that, check out &lt;a href=&#34;https://raw.githubusercontent.com/andreasfertig/cppinsights/main/scripts/getinclude.py&#34;&gt;scripts/getinclude.py&lt;/a&gt;. The script tries to collect the system-include paths from the compiler. Without an option, &lt;code&gt;getinclude.py&lt;/code&gt; uses &lt;code&gt;g++&lt;/code&gt;. You can also pass another compiler as a first argument.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./scripts/getinclude.py&#xA;-isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1 -isystem/usr/local/include -isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.3.0/include -isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -isystem/usr/include&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script can be used together with C++ Insights:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;insights &amp;lt;YOUR_CPP_FILE&amp;gt; -- -std=c++17 `./scripts/getinclude.py`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom GCC installation&lt;/h3&gt; &#xA;&lt;p&gt;In case you have a custom build of the GCC compiler, for example, gcc-11.2.0, and &lt;em&gt;NOT&lt;/em&gt; installed in the compiler in the default system path, then after building, Clang fails to find the correct &lt;code&gt;libstdc++&lt;/code&gt; path (GCC&#39;s STL). If you run into this situation, you can use &#34;&lt;code&gt;--gcc-toolchain=/path/GCC-1x.x.x/installed/path&lt;/code&gt;&#34; to tell Clang/C++ Insights the location of the STL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./cppinsights Insights.cpp -- --gcc-toolchain=${GCC_11_2_0_INSTALL_PATH} -std=c++20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here &#34;&lt;code&gt;${GCC_11_2_0_INSTALL_PATH}&lt;/code&gt;&#34; is the installation directory of your customized-built GCC. The option for Clang is described &lt;a href=&#34;https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-gcc-toolchain&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Ready to use Docker container&lt;/h3&gt; &#xA;&lt;p&gt;There is also another GitHub project that sets up a docker container with the latest C++ Insights version in it: &lt;a href=&#34;https://github.com/andreasfertig/cppinsights-docker&#34;&gt;C++ Insights - Docker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;C++ Insights @ Vim&lt;/h3&gt; &#xA;&lt;p&gt;A plugin for Vim is available at &lt;a href=&#34;https://github.com/Freed-Wu/cppinsights.vim&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;C++ Insights @ VSCode&lt;/h3&gt; &#xA;&lt;p&gt;An extension for Visual Studio Code is available at the VS Code marketplace: &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=devtbi.vscode-cppinsights&#34;&gt;C++ Insights - VSCode Extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;C++ Insights @ brew&lt;/h3&gt; &#xA;&lt;p&gt;At least for macOS, you can install C++ Insights via Homebrew thanks to &lt;a href=&#34;https://formulae.brew.sh/formula/cppinsights&#34;&gt;this formulae&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install cppinsights&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;I aim for the repository to compile with the latest version of Clang and at least the one before. The website tries to stay close to the latest release of Clang. However, due to certain issues (building Clang for Windows), the website&#39;s version is often delayed by a few months.&lt;/p&gt; &#xA;&lt;h2&gt;C++ Insights @ YouTube&lt;/h2&gt; &#xA;&lt;p&gt;I created a &lt;a href=&#34;https://youtube.com/@andreas_fertig&#34;&gt;YouTube&lt;/a&gt; channel where I release a new video each month. In these videos, I use C++ Insights to show and explain certain C++ constructs, and sometimes I explain C++ Insights as well.&lt;/p&gt; &#xA;&lt;h2&gt;ToDo&#39;s&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/andreasfertig/cppinsights/main/TODO.md&#34;&gt;TODO&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Involved&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report bugs/issues by submitting a &lt;a href=&#34;https://github.com/andreasfertig/cppinsights/issues&#34;&gt;GitHub issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Submit contributions using &lt;a href=&#34;https://github.com/andreasfertig/cppinsights/pulls&#34;&gt;pull requests&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/andreasfertig/cppinsights/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you like to support the project, consider &lt;a href=&#34;https://raw.githubusercontent.com/andreasfertig/cppinsights/main/CONTRIBUTING.md&#34;&gt;submitting&lt;/a&gt; a patch. Another alternative is to become a &lt;a href=&#34;https://github.com/sponsors/andreasfertig&#34;&gt;GitHub Sponsor&lt;/a&gt; or a &lt;a href=&#34;https://www.patreon.com/cppinsights&#34;&gt;Patreon&lt;/a&gt; supporter.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HIllya51/LunaTranslator</title>
    <updated>2024-04-09T01:26:10Z</updated>
    <id>tag:github.com,2024-04-09:/HIllya51/LunaTranslator</id>
    <link href="https://github.com/HIllya51/LunaTranslator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Galgame翻译器，支持剪贴板、OCR、HOOK，支持40余种翻译引擎。Visual Novel translate tool , support clipboard / OCR/ HOOK, support 40+ translate engines.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LunaTranslator&lt;/h1&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/HIllya51/LunaTranslator/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/HIllya51/LunaTranslator&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HIllya51/LunaTranslator/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/HIllya51/LunaTranslator?color=ffa&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HIllya51/LunaTranslator/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/HIllya51/LunaTranslator?color=ccf&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hillya51.github.io/download.html&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/download-blue&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;简体中文 | &lt;a href=&#34;https://raw.githubusercontent.com/HIllya51/LunaTranslator/main/README_ru.md&#34;&gt;Русский язык&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/HIllya51/LunaTranslator/main/README_en.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/HIllya51/LunaTranslator/main/otherlang.md&#34;&gt;Other Language Support&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;一款galgame翻译器&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://hillya51.github.io/&#34; target=&#34;_blank&#34;&gt;使用说明&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;功能支持&lt;/h2&gt; &#xA;&lt;h4&gt;文本源&lt;/h4&gt; &#xA;&lt;p&gt;  &lt;strong&gt;剪贴板&lt;/strong&gt; 支持从剪贴板中获取文本进行翻译&lt;/p&gt; &#xA;&lt;p&gt;  &lt;strong&gt;OCR&lt;/strong&gt; 除内置OCR引擎外，还支持WindowsOCR、百度OCR、有道OCR、ocrspace、docsumo、飞书OCR等。&lt;/p&gt; &#xA;&lt;p&gt;  &lt;strong&gt;HOOK&lt;/strong&gt; 支持使用HOOK方式获取文本，支持使用特殊码，支持自动保存游戏及HOOK、自动加载HOOK等。对于部分引擎，还支持内嵌翻译。&lt;/p&gt; &#xA;&lt;h4&gt;翻译器&lt;/h4&gt; &#xA;&lt;p&gt;支持几乎所有能想得到的翻译引擎，包括：&lt;/p&gt; &#xA;&lt;p&gt;  &lt;strong&gt;离线翻译&lt;/strong&gt; 支持使用J北京7、金山快译、译典通进行离线翻译&lt;/p&gt; &#xA;&lt;p&gt;  &lt;strong&gt;免费在线翻译&lt;/strong&gt; 支持使用百度、必应、谷歌、阿里、有道、彩云、搜狗、DeepL、金山、讯飞、腾讯、字节、火山、papago、yeekit等进行翻译&lt;/p&gt; &#xA;&lt;p&gt;  &lt;strong&gt;注册在线翻译&lt;/strong&gt; 支持使用用户注册的百度、腾讯、有道、小牛、彩云、火山、deepl、yandex、google、飞书、ChatGPT、Azure翻译&lt;/p&gt; &#xA;&lt;p&gt;  &lt;strong&gt;Chrome调试翻译&lt;/strong&gt; 支持deepl、yandex、有道、百度、腾讯、必应、彩云、小牛、阿里、谷歌、Poe.com、OpenAI&lt;/p&gt; &#xA;&lt;p&gt;  &lt;strong&gt;预翻译&lt;/strong&gt; 支持读取人工翻译和聚合机器预翻译文件，支持翻译缓存&lt;/p&gt; &#xA;&lt;p&gt;  &lt;strong&gt;支持自定义翻译扩展&lt;/strong&gt; 支持使用python语言扩展其他我不知道的翻译接口&lt;/p&gt; &#xA;&lt;h4&gt;语音合成&lt;/h4&gt; &#xA;&lt;p&gt;  &lt;strong&gt;离线TTS&lt;/strong&gt; 支持windowsTTS，支持VoiceRoid2，支持VoiceRoid+，支持NeoSpeech，支持VOICEVOX&lt;/p&gt; &#xA;&lt;p&gt;  &lt;strong&gt;在线TTS&lt;/strong&gt; 支持火山TTS，有道TTS，EdgeTTS&lt;/p&gt; &#xA;&lt;h4&gt;翻译优化&lt;/h4&gt; &#xA;&lt;p&gt;  &lt;strong&gt;文本处理&lt;/strong&gt; 支持十余种常见文本处理方式，并可以通过组合和执行顺序的调整，实现复杂的文本处理&lt;/p&gt; &#xA;&lt;p&gt;  &lt;strong&gt;翻译优化&lt;/strong&gt; 支持使用自定义专有名词翻译，支持导入VNR共享辞书&lt;/p&gt; &#xA;&lt;h4&gt;日语学习&lt;/h4&gt; &#xA;&lt;p&gt;  &lt;strong&gt;日语分词及假名显示&lt;/strong&gt; 支持使用内置分词及假名显示工具，支持使用Mecab优化分词及假名显示&lt;/p&gt; &#xA;&lt;p&gt;  &lt;strong&gt;查词&lt;/strong&gt; 支持使用小学馆、灵格斯词典、EDICT(日英)词典、有道在线、weblio、Goo、Moji等在线词典进行单词查询&lt;/p&gt; &#xA;&lt;h2&gt;引用&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点击查看&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Artikash/Textractor&#34;&gt;Artikash/Textractor&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/RapidAI/RapidOcrOnnx&#34;&gt;RapidAI/RapidOcrOnnx&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/PaddlePaddle/PaddleOCR&#34;&gt;PaddlePaddle/PaddleOCR&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/UlionTse/translators&#34;&gt;UlionTse/translators&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Blinue/Magpie&#34;&gt;Blinue/Magpie&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/nanokina/ebyroid&#34;&gt;nanokina/ebyroid&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/xupefei/Locale-Emulator&#34;&gt;xupefei/Locale-Emulator&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/InWILL/Locale_Remulator&#34;&gt;InWILL/Locale_Remulator&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/zxyacb/ntlea&#34;&gt;zxyacb/ntlea&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Chuyu-Team/YY-Thunks&#34;&gt;Chuyu-Team/YY-Thunks&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/KirpichKrasniy&#34;&gt;@KirpichKrasniy&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;支持作者&lt;/h2&gt; &#xA;&lt;p&gt;如果你感觉该软件对你有帮助，欢迎微信扫码赞助，谢谢，么么哒~&lt;/p&gt; &#xA;&lt;img src=&#34;.\\LunaTranslator\\files\\zan.jpg&#34; style=&#34;height: 400px !important;&#34;&gt;</summary>
  </entry>
  <entry>
    <title>PacktPublishing/C-High-Performance-for-Financial-Systems-</title>
    <updated>2024-04-09T01:26:10Z</updated>
    <id>tag:github.com,2024-04-09:/PacktPublishing/C-High-Performance-for-Financial-Systems-</id>
    <link href="https://github.com/PacktPublishing/C-High-Performance-for-Financial-Systems-" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C-High-Performance-for-Financial-Systems-&lt;/h1&gt; &#xA;&lt;p&gt;This repository is to support the printed book.&lt;/p&gt; &#xA;&lt;p&gt;The book is available in Amazon: &lt;a href=&#34;https://www.amazon.com/High-Performance-Financial-Systems-leveraging/dp/1805124528/&#34;&gt;https://www.amazon.com/High-Performance-Financial-Systems-leveraging/dp/1805124528/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More about this book&lt;/h2&gt; &#xA;&lt;p&gt;Whether you are an experienced software developer looking to break into the financial industry, or a financial professional seeking to deepen your technical knowledge, this book is designed to help you navigate the complex landscape of financial technology. We will cover the technical requirements for building financial trading systems, including network protocols, network performance, and other critical considerations.&lt;/p&gt; &#xA;&lt;p&gt;Unlock the secrets of the finance industry and dive into the exhilarating world of high-performance trading systems with &#34;C++ High Performance for Financial Systems.&#34; If you&#39;ve ever dreamt of creating lightning-fast, scalable, and cutting-edge financial software, this comprehensive guide is your key to success.&lt;/p&gt; &#xA;&lt;p&gt;Trading systems are the backbone of the financial world, and understanding how to build them with optimal performance is crucial for success. Fortunately, this book covers all aspects of crafting robust and high-performing trading systems, right from the ground up.&lt;/p&gt; &#xA;&lt;p&gt;A cornerstone of this book is its comprehensive coverage of system design and architecture. You&#39;ll learn the principles and methodologies behind building systems that can handle vast amounts of data, execute complex trading strategies with ease, and maintain the highest levels of reliability. Armed with this knowledge, you&#39;ll be well-equipped to tackle even the most challenging trading scenarios.&lt;/p&gt; &#xA;&lt;p&gt;In the fast-paced world of finance, every millisecond counts. The book delves into low-latency strategies that will enable your trading systems to react with lightning speed. Learn the art of reducing latency, optimizing code, and leveraging the latest hardware and software techniques to gain a competitive edge in the market.&lt;/p&gt; &#xA;&lt;h2&gt;What you will learn&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Design architecture of scalable financial trading systems&lt;/li&gt; &#xA; &lt;li&gt;Understand strategies for low-latency trading and high-frequency trading&lt;/li&gt; &#xA; &lt;li&gt;Learn the implementation of machine learning algorithms for financial data analysis&lt;/li&gt; &#xA; &lt;li&gt;Understand risk management techniques for financial trading systems&lt;/li&gt; &#xA; &lt;li&gt;Advanced topics in finance and trading, including algorithmic trading and portfolio optimization&lt;/li&gt; &#xA; &lt;li&gt;Understand best practices for developing financial trading systems with C++&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>