<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-07T01:29:13Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LibreCAD/LibreCAD</title>
    <updated>2025-01-07T01:29:13Z</updated>
    <id>tag:github.com,2025-01-07:/LibreCAD/LibreCAD</id>
    <link href="https://github.com/LibreCAD/LibreCAD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LibreCAD is a cross-platform 2D CAD program written in C++17. It can read DXF/DWG files and can write DXF/PDF/SVG files. It supports point/line/circle/ellipse/parabola/spline primitives. The user interface is highly customizable, and has dozens of translations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LibreCAD &lt;a href=&#34;https://travis-ci.org/LibreCAD/LibreCAD&#34;&gt;&lt;img src=&#34;https://travis-ci.org/LibreCAD/LibreCAD.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/wiki/Download&#34;&gt;‚Üí Download ‚Üê&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.librecad.org&#34;&gt;LibreCAD&lt;/a&gt; is a 2D CAD drawing tool based on the community edition of &lt;a href=&#34;https://www.qcad.org&#34;&gt;QCAD&lt;/a&gt;. LibreCAD uses the cross-platform framework &lt;a href=&#34;https://www.qt.io/download-open-source/&#34;&gt;Qt&lt;/a&gt;, which means it works with most operating systems.&lt;br&gt; The user interface is translated in over 30 languages. &lt;a href=&#34;https://translate.librecad.org&#34;&gt;https://translate.librecad.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LibreCAD is free software; you can redistribute it and/or modify&lt;br&gt; it under the terms of the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-2.0.html&#34;&gt;GNU General Public License version 2&lt;/a&gt; (GPLv2)&lt;br&gt; as published by the Free Software Foundation.&lt;br&gt; Please read the &lt;a href=&#34;https://raw.githubusercontent.com/LibreCAD/LibreCAD/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for additional information.&lt;/p&gt; &#xA;&lt;p&gt;The master branch represents the latest pre-release code,&lt;br&gt; and now requires Qt 6.4.0 or newer.&lt;br&gt; The 2.2.1 branch requires Qt 5.15.0 or newer. The 2.2 branch requires Qt 5.2.1 or newer. The 2.1 branch will be the last to support Qt4.&lt;br&gt; The 2.0 branch will be the last to support the QCAD toolbar. &lt;a href=&#34;https://travis-ci.org/LibreCAD/LibreCAD&#34;&gt;&lt;img src=&#34;https://travis-ci.org/LibreCAD/LibreCAD.svg?branch=2.0&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;DXF Converter&lt;/h2&gt; &#xA;&lt;p&gt;LibreCAD can be used as dxf to a pdf, png or svg converter. For example, to convert a foo.dxf to foo.pdf, foo.png or foo.svg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ librecad dxf2pdf foo.dxf&#xA;$ librecad dxf2png foo.dxf&#xA;$ librecad dxf2svg foo.dxf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Releases and Milestones&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/releases&#34;&gt;Releases and Prereleases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/milestones&#34;&gt;Milestones&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;libdxfrw&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LibreCAD/libdxfrw&#34;&gt;libdxfrw&lt;/a&gt; is an associated project that allows LibreCAD to read DXF and DWG files.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requests and Bug reports&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/issues&#34;&gt;GitHub issues (preferred)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourceforge.net/p/librecad/_list/tickets?source=navbar&#34;&gt;SourceForge tickets (disabled)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Users Documentation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://librecad.readthedocs.io/&#34;&gt;Users Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dokuwiki.librecad.org/&#34;&gt;Wiki Main Page&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Questions or Comments&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.librecad.org/&#34;&gt;LibreCAD&#39;s Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;IRC: &lt;a href=&#34;https://web.libera.chat/#librecad&#34;&gt;#librecad&lt;/a&gt; at libera.chat&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Building&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qt.io/download-open-source/&#34;&gt;Qt&lt;/a&gt; 6.4.0+ (MinGW version on Windows)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.boost.org/&#34;&gt;Boost&lt;/a&gt; 1.55.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More information: &lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/wiki/Build-from-source&#34;&gt;Build from source&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/wiki/Git-and-GitHub&#34;&gt;Git and GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LibreCAD/LibreCAD/wiki/Becoming-a-developer&#34;&gt;Becoming a developer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;https://github.com/LibreCAD/Resources&#34;&gt;resources repository&lt;/a&gt; for people that want to indirectly&lt;br&gt; contribute to the project by supplying icons, stylesheets, documentation, templates...&lt;/p&gt; &#xA;&lt;p&gt;Associated downloads: &lt;a href=&#34;https://sourceforge.net/projects/librecad/files/Resources/&#34;&gt;https://sourceforge.net/projects/librecad/files/Resources/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>momo5502/emulator</title>
    <updated>2025-01-07T01:29:13Z</updated>
    <id>tag:github.com,2025-01-07:/momo5502/emulator</id>
    <link href="https://github.com/momo5502/emulator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü™Ö Windows User Space Emulator&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Windows User Space Emulator &lt;br&gt; &lt;a href=&#34;https://github.com/momo5502/emulator?tab=GPL-2.0-1-ov-file&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/momo5502/emulator?color=00B0F8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/momo5502/emulator/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/momo5502/emulator/build.yml?branch=main&amp;amp;label=build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/momo5502/emulator/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/momo5502/emulator?color=F8B000&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/momo5502/emulator?color=FF3131&#34;&gt; &lt;/h1&gt; &#xA;&lt;p&gt;A high-performance Windows process emulator that operates at syscall level, providing full control over process execution through comprehensive hooking capabilities.&lt;/p&gt; &#xA;&lt;p&gt;Perfect for security research, malware analysis, and DRM research where fine-grained control over process execution is required.&lt;/p&gt; &#xA;&lt;p&gt;Built in C++ and powered by the Unicorn Engine.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üîÑ &lt;strong&gt;Syscall-Level Emulation&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Instead of reimplementing Windows APIs, the emulator operates at the syscall level, allowing it to leverage existing system DLLs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;üìù &lt;strong&gt;Advanced Memory Management&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports Windows-specific memory types including reserved, committed, built on top of Unicorn&#39;s memory management&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;üì¶ &lt;strong&gt;Complete PE Loading&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Handles executable and DLL loading with proper memory mapping, relocations, and TLS&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;‚ö° &lt;strong&gt;Exception Handling&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implements Windows structured exception handling (SEH) with proper exception dispatcher and unwinding support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;üßµ &lt;strong&gt;Threading Support&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Provides a scheduled (round-robin) threading model&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;üíæ &lt;strong&gt;State Management&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports both full state serialization and fast in-memory snapshots&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;üíª &lt;strong&gt;Debugging Interface&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implements GDB serial protocol for integration with common debugging tools (IDA Pro, GDB, LLDB, VS Code, ...)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; The project is still in a very early, prototypy state. The code still needs a lot of cleanup and many features and syscalls need to be implemented. However, constant progress is being made :)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/momo5502/emulator/main/docs/images/preview.jpg&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;YouTube Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wY9Q0DhodOQ&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/momo5502/emulator/main/docs/images/yt.jpg&#34; alt=&#34;YouTube video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click &lt;a href=&#34;https://docs.google.com/presentation/d/1pha4tFfDMpVzJ_ehJJ21SA_HAWkufQBVYQvh1IFhVls/edit&#34;&gt;here&lt;/a&gt; for the slides.&lt;/p&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 64-bit (click &lt;a href=&#34;https://github.com/momo5502/emulator/milestone/1&#34;&gt;here&lt;/a&gt; for cross-platform status)&lt;/li&gt; &#xA; &lt;li&gt;CMake&lt;/li&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository with submodules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/momo5502/emulator.git&#xA;cd emulator&#xA;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following commands in an x64 Development Command Prompt&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio 2022&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --preset=vs2022&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Solution will be generated at &lt;code&gt;build/vs2022/emulator.sln&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Ninja&lt;/h3&gt; &#xA;&lt;p&gt;Debug build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --workflow --preset=debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Release build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --workflow --preset=release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dumping the Registry&lt;/h2&gt; &#xA;&lt;p&gt;The emulator needs a registry dump to run, otherwise it will print &lt;code&gt;Bad hive file&lt;/code&gt; errors.&lt;br&gt; You can create one by running the &lt;a href=&#34;https://raw.githubusercontent.com/momo5502/emulator/main/src/grab-registry.bat&#34;&gt;src/grab-registry.bat&lt;/a&gt; script as administrator.&lt;br&gt; This will create a &lt;code&gt;registry&lt;/code&gt; folder that needs to be placed in the working directory of the emulator.&lt;/p&gt; &#xA;&lt;h2&gt;Running Tests&lt;/h2&gt; &#xA;&lt;p&gt;The project uses CTest for testing. Choose your preferred method:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Visual Studio:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build the &lt;code&gt;RUN_TESTS&lt;/code&gt; target&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ninja:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd build/release  # or build/debug&#xA;ctest&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>