<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-15T01:31:21Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alexbatalov/fallout2-ce</title>
    <updated>2023-02-15T01:31:21Z</updated>
    <id>tag:github.com,2023-02-15:/alexbatalov/fallout2-ce</id>
    <link href="https://github.com/alexbatalov/fallout2-ce" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fallout 2 for modern operating systems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fallout 2 Community Edition&lt;/h1&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You must own the game to play. Purchase your copy on &lt;a href=&#34;https://www.gog.com/game/fallout_2&#34;&gt;GOG&lt;/a&gt; or &lt;a href=&#34;https://store.steampowered.com/app/38410&#34;&gt;Steam&lt;/a&gt;. Download latest release or build from source.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Download and copy &lt;code&gt;fallout2-ce.exe&lt;/code&gt; to your &lt;code&gt;Fallout2&lt;/code&gt; folder. It serves as a drop-in replacement for &lt;code&gt;fallout2.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Windows installation as a base - it contains data assets needed to play. Copy &lt;code&gt;Fallout2&lt;/code&gt; folder somewhere, for example &lt;code&gt;/home/john/Desktop/Fallout2&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download and copy &lt;code&gt;fallout2-ce&lt;/code&gt; to this folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://libsdl.org/download-2.0.php&#34;&gt;SDL2&lt;/a&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo apt install libsdl2-2.0-0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./fallout2-ce&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: macOS 10.11 (El Capitan) or higher is required. Runs natively on Intel-based Macs and Apple Silicon.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Windows installation as a base - it contains data assets needed to play. Copy &lt;code&gt;Fallout2&lt;/code&gt; folder somewhere, for example &lt;code&gt;/Applications/Fallout2&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alternatively you can use Fallout 2 from Macplay/The Omni Group as a base - you need to extract game assets from the original bundle. Mount CD/DMG, right click &lt;code&gt;Fallout 2&lt;/code&gt; -&amp;gt; &lt;code&gt;Show Package Contents&lt;/code&gt;, navigate to &lt;code&gt;Contents/Resources&lt;/code&gt;. Copy &lt;code&gt;GameData&lt;/code&gt; folder somewhere, for example &lt;code&gt;/Applications/Fallout2&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download and copy &lt;code&gt;fallout2-ce.app&lt;/code&gt; to this folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;fallout2-ce.app&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Fallout 2 was designed with mouse in mind. There are many controls that require precise cursor positioning, which is not possible with fingers. When playing on Android you&#39;ll use fingers to move mouse cursor, not a character, or a map. Double tap to &#34;click&#34; left mouse button in the current cursor position, triple tap to &#34;click&#34; right mouse button. It might feel awkward at first, but it&#39;s super handy - you can play with just a thumb. This is not set in stone and might change in the future.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Windows installation as a base - it contains data assets needed to play. Copy &lt;code&gt;Fallout2&lt;/code&gt; folder to your device, for example to &lt;code&gt;Downloads&lt;/code&gt;. You need &lt;code&gt;master.dat&lt;/code&gt;, &lt;code&gt;critter.dat&lt;/code&gt;, &lt;code&gt;patch000.dat&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;code&gt;fallout2-ce.apk&lt;/code&gt; and copy it to your device. Open it with file explorer, follow instructions (install from unknown source).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you run the game for the first time it will immediately present file picker. Select the folder from the first step. Wait until this data is copied. A loading dialog will appear, just wait for about 30 seconds. The game will start automatically.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: See Android note on controls.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;code&gt;fallout2-ce.ipa&lt;/code&gt;. Use sideloading applications (&lt;a href=&#34;https://altstore.io/&#34;&gt;AltStore&lt;/a&gt; or &lt;a href=&#34;https://sideloadly.io/&#34;&gt;Sideloadly&lt;/a&gt;) to install it to your device. Alternatively you can always build from source with your own signing certificate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the game once. You&#39;ll see error message saying &#34;Couldn&#39;t find/load text fonts&#34;. This step is needed for iOS to expose the game via File Sharing feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Finder (macOS Catalina and later) or iTunes (Windows and macOS Mojave or earlier) to copy &lt;code&gt;master.dat&lt;/code&gt;, &lt;code&gt;critter.dat&lt;/code&gt;, &lt;code&gt;patch000.dat&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; folder to &#34;Fallout 2&#34; app (&lt;a href=&#34;https://support.apple.com/HT210598&#34;&gt;how-to&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Integrating Sfall goodies is the top priority. Quality of life updates are OK too. Please no large scale refactorings at this time as we need to reconcile changes from Reference Edition, which will make this process slow and error-prone. In any case open up an issue with your suggestion or to notify other people that something is being worked on.&lt;/p&gt; &#xA;&lt;h3&gt;Intergrating Sfall&lt;/h3&gt; &#xA;&lt;p&gt;There are literally hundreds if not thousands of fixes and features in sfall. I guess not all of them are needed in Community Edition, but for the sake of compatibility with big mods out there, let&#39;s integrate them all.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The source code is this repository is available under the &lt;a href=&#34;https://raw.githubusercontent.com/alexbatalov/fallout2-ce/main/LICENSE.md&#34;&gt;Sustainable Use License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Joshua-Ashton/HL2-GamepadUI</title>
    <updated>2023-02-15T01:31:21Z</updated>
    <id>tag:github.com,2023-02-15:/Joshua-Ashton/HL2-GamepadUI</id>
    <link href="https://github.com/Joshua-Ashton/HL2-GamepadUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code for GamepadUI for Half-Life 2 and friends.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Half-Life 2 GamepadUI&lt;/h1&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;Source code for the Steam Deck GamepadUI I made used by Half-Life 2, Episode 1, Episode 2 and Portal 1.&lt;/p&gt; &#xA;&lt;p&gt;It looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Joshua-Ashton/HL2-GamepadUI/main/.assets/image.png&#34; alt=&#34;Image of Half-Life 2 main menu with GamepadUI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s definitely not the cleanest thing in existence, especially as it was pretty rushed for the Steam Deck launch. However, you may be able to get some use out of it.&lt;/p&gt; &#xA;&lt;h2&gt;What is here?&lt;/h2&gt; &#xA;&lt;p&gt;Provided is the full GamepadUI code, as well as the .vpc projects to build it.&lt;/p&gt; &#xA;&lt;p&gt;You will need to add gamepadui for each game to your projects.vgc and groups.vgc for the Visual Studio, etc projects to be generated.&lt;/p&gt; &#xA;&lt;p&gt;Also provided is a modified cdll_client_int.cpp with the modifications needed for GamepadUI stuff to work.&lt;br&gt;Check out the parts that reference GamepadUI and merge them into your codebase.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, the function PostMessageToAllSiblingsOfType will need to be re-enabled in Panel.h, by removing its associated #if 0 / #endif. Despite the code comment declaring otherwise, this function is safe to compile, and is necessary for GamepadUI to compile.&lt;/p&gt; &#xA;&lt;h2&gt;SDK 2013 Notes&lt;/h2&gt; &#xA;&lt;p&gt;SDK 2013 by default does not have the modifications to the regular GameUI that were made that do things such as hide the main menu logo, or have the new loading screens. &lt;br&gt; Provided in &lt;code&gt;game/bin&lt;/code&gt; is a copy of GameUI for SDK 2013 with the modifications you can use, unfortunately the code for this cannot be provided.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to Madi for taking my code and making it compile against SDK 2013.&lt;br&gt; Thanks to my friend Dan Smith for helping with getting some screenshots for the chapter art.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Dec0ne/HWSyscalls</title>
    <updated>2023-02-15T01:31:21Z</updated>
    <id>tag:github.com,2023-02-15:/Dec0ne/HWSyscalls</id>
    <link href="https://github.com/Dec0ne/HWSyscalls" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HWSyscalls is a new method to execute indirect syscalls using HWBP, HalosGate and a synthetic trampoline on kernel32 with HWBP.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HWSyscalls&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/C%2B%2B-00599C?style=for-the-badge&amp;amp;logo=c%2B%2B&amp;amp;logoColor=white&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Windows-0078D6?style=for-the-badge&amp;amp;logo=windows&amp;amp;logoColor=white&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;This project was co-authored by&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Dec0ne&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Dec0ne-FF1B2D?style=for-the-badge&amp;amp;logo=Dec0ne&amp;amp;logoColor=white&#34; alt=&#34;Dec0ne&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/idov31&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Idov31-D98634?style=for-the-badge&amp;amp;logo=Idov31&amp;amp;logoColor=white&#34; alt=&#34;idov31&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;HWSyscalls is a new method to execute indirect syscalls using 3 main components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Hardware breakpoints and Vectored Exception Handler to control the flow of execution.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HalosGate is used to find syscall numbers and addresses.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Creating a synthetic trampoline on kernel32 with hardware breakpoints.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;HWSyscalls is provided as an easy-to-include library that can be added to any project that wants to use indirect syscalls without triggering EDRs or AVs detections based on the current indirect syscalls detection.&lt;/p&gt; &#xA;&lt;p&gt;Indirect syscalls is a popular method that is used in different variations to call system calls from ntdll, however, the main issue with calling syscalls from ntdll is in its core: A weird access from a program directly to ntdll, without going through any previous dll. HWSyscalls is built upon the core idea of indirect syscalls but with a solution to this problem by combining hardware breakpoints functionality to create the synthetic trampoline in kernel32 and HalosGate to get the SSNs.&lt;/p&gt; &#xA;&lt;p&gt;To make it easy, a normal indirect syscalls flow looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dec0ne/HWSyscalls/master/Images/indirect_syscalls.png&#34; alt=&#34;indirect_syscalls&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;While ours looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dec0ne/HWSyscalls/master/Images/hwsyscalls_flow.png&#34; alt=&#34;hwsyscalls_flow&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For further information, check out our blog post &lt;strong&gt;(COMING SOON)&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ Warning: This project is a work in progress. The current version causes the stack to be unwindable. For more information regarding stack unwinding please check this &lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/cpp/exceptions-and-stack-unwinding-in-cpp?view=msvc-170&#34;&gt;blog post on MSDN&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/KlezVirus&#34;&gt;@KlezVirus&lt;/a&gt;&#39;s explanation in &lt;a href=&#34;https://klezvirus.github.io/RedTeaming/AV_Evasion/StackSpoofing/&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use the project, you will need to include the HWSyscalls.h and call &lt;code&gt;InitHWSyscalls&lt;/code&gt; to find the required gadgets and initialize the exception handler. At the end of your program&#39;s execution, call &lt;code&gt;DeinitHWSyscalls&lt;/code&gt; to remove the exception handler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;HWSyscalls.h&#34;&#xA;&#xA;typedef NTSTATUS(WINAPI* NtOpenProcess_t)(&#xA;&#x9;OUT          PHANDLE            ProcessHandle,&#xA;&#x9;IN           ACCESS_MASK        DesiredAccess,&#xA;&#x9;IN           POBJECT_ATTRIBUTES ObjectAttributes,&#xA;&#x9;IN OPTIONAL  PCLIENT_ID         ClientId);&#xA;&#xA;void main() {&#xA;&#xA;    // Initialize the exception handler and find the required gadgets.&#xA;    if (!InitHWSyscalls())&#xA;        return;&#xA;    &#xA;    // ...&#xA;&#xA;    // Execute your function!&#xA;    NtOpenProcess_t pNtOpenProcess = (NtOpenProcess_t)PrepareSyscall((char*)(&#34;NtOpenProcess&#34;));&#xA;    NTSTATUS status = pNtOpenProcess(&amp;amp;targetHandle, PROCESS_ALL_ACCESS, &amp;amp;object, &amp;amp;clientID);&#xA;&#xA;    // ...&#xA;&#xA;    // Removing the exception handler.&#xA;    DeinitHWSyscalls();&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The debug verbosity can be turned on or off by changing the &lt;code&gt;HWSYSCALLS_DEBUG&lt;/code&gt; definition in &lt;code&gt;HWSyscalls.h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#pragma once&#xA;#include &amp;lt;windows.h&amp;gt;&#xA;#include &amp;lt;inttypes.h&amp;gt;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;&#xA;#pragma region Defines&#xA;&#xA;#define HWSYSCALLS_DEBUG 0 // 0 disable, 1 enable&#xA;#define UP -32&#xA;//...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To compile this project you will need Visual Studio 2019 and forward. It is important to note that this project was made only for x64 environments and needs to be compiled without optimization. You can disable it from Project Settings -&amp;gt; C/C++ -&amp;gt; Optimization -&amp;gt; Optimization (Disabled /Od).&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dec0ne/HWSyscalls/master/Images/poc.png&#34; alt=&#34;example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://institute.sektor7.net/&#34;&gt;Sektor7&lt;/a&gt; for &lt;a href=&#34;https://blog.sektor7.net/#!res/2021/halosgate.md&#34;&gt;Halosgate&lt;/a&gt; and for the HWBP implementation which is taught in their amazing &lt;a href=&#34;https://institute.sektor7.net/rto-maldev-adv1&#34;&gt;Malware Development Advanced Vol 1&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://twitter.com/am0nsec?lang=en&#34;&gt;@Am0nsec&lt;/a&gt; and @RtlMateusz for the &lt;a href=&#34;https://github.com/am0nsec/HellsGate&#34;&gt;original Hellsgate implementation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rad9800&#34;&gt;Rad9800&lt;/a&gt; for the inspiration we got from &lt;a href=&#34;https://github.com/rad9800/TamperingSyscalls&#34;&gt;TamperingSyscalls&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/janoglezcampos&#34;&gt;Yxel&lt;/a&gt; for the binary pattern matching code we used from &lt;a href=&#34;https://github.com/Idov31/Cronos/raw/master/src/Utils.c&#34;&gt;Cronos&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>