<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-15T01:31:30Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>focus-creative-games/hybridclr</title>
    <updated>2022-07-15T01:31:30Z</updated>
    <id>tag:github.com,2022-07-15:/focus-creative-games/hybridclr</id>
    <link href="https://github.com/focus-creative-games/hybridclr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HybridCLR是一个特性完整、零成本、高性能、低内存的近乎完美的Unity全平台原生c#热更方案。 HybridCLR is a fully featured, zero-cost, high-performance, low-memory solution for Unity&#39;s all-platform native c# hotfix&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HybridCLR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/focus-creative-games/hybridclr/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;HybridCLR是一个&lt;strong&gt;特性完整、零成本、高性能、低内存&lt;/strong&gt;的&lt;strong&gt;近乎完美&lt;/strong&gt;的Unity全平台原生c#热更方案。&lt;/p&gt; &#xA;&lt;p&gt;HybridCLR扩充了il2cpp的代码，使它由纯&lt;a href=&#34;https://en.wikipedia.org/wiki/Ahead-of-time_compilation&#34;&gt;AOT&lt;/a&gt; runtime变成‘AOT+Interpreter’ 混合runtime，进而原生支持动态加载assembly，使得基于il2cpp backend打包的游戏不仅能在Android平台，也能在IOS、Consoles等限制了JIT的平台上高效地以&lt;strong&gt;AOT+interpreter&lt;/strong&gt;混合模式执行。从底层彻底支持了热更新。&lt;/p&gt; &#xA;&lt;p&gt;HybridCLR&lt;strong&gt;开创性地实现了 &lt;code&gt;differential hybrid dll&lt;/code&gt; 技术&lt;/strong&gt;====。即可以对AOT dll任意增删改，HybridCLR会智能地让变化或者新增的类和函数以interpreter模式运行，但未改动的类和函数以AOT方式运行，让热更新的游戏逻辑的运行性能基本达到原生AOT的水平。&lt;/p&gt; &#xA;&lt;h2&gt;特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;特性完整。 近乎完整实现了&lt;a href=&#34;https://www.ecma-international.org/publications-and-standards/standards/ecma-335/&#34;&gt;ECMA-335规范&lt;/a&gt;，除了 下文中&#34;限制和注意事项&#34; 之外的特性都支持。&lt;/li&gt; &#xA; &lt;li&gt;零学习和使用成本。 HybridCLR将纯AOT runtime增强为完整的runtime，使得热更新代码与AOT代码无缝工作。脚本类与AOT类在同一个运行时内，可以随意写继承、反射、多线程(volatile、ThreadStatic、Task、async)之类的代码。不需要额外写任何特殊代码、没有代码生成，也没有什么特殊限制。&lt;/li&gt; &#xA; &lt;li&gt;执行高效。实现了一个极其高效的寄存器解释器，所有指标都大幅优于其他热更新方案。&lt;a href=&#34;https://focus-creative-games.github.io/hybridclr/benchmark/#%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A&#34;&gt;性能测试报告&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;内存高效。 热更新脚本中定义的类跟普通c#类占用一样的内存空间，远优于其他热更新方案。&lt;a href=&#34;https://focus-creative-games.github.io/hybridclr/benchmark/#%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E6%8A%A5%E5%91%8A&#34;&gt;内存占用报告&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;原生支持hotfix修复AOT部分代码。几乎不增加任何开发和运行开销。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;开创性地实现了 &lt;code&gt;differential hybrid dll&lt;/code&gt; 技术&lt;/strong&gt;。即可以将某个热更新dll先AOT形式打包，后面可以对该dll任意增删改，HybridCLR会智能地让变化或者新增的类和函数以interpreter模式运行，但未改动的类和函数以AOT方式运行。这意味着热更新的游戏逻辑的运行性能将接近原生AOT的水平。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;工作原理&lt;/h2&gt; &#xA;&lt;p&gt;HybridCLR从mono的&lt;a href=&#34;https://developpaper.com/new-net-interpreter-mono-has-arrived/&#34;&gt;hybrid mode execution&lt;/a&gt;技术中得到启发，为unity的il2cpp之类的AOT runtime额外提供了interpreter模块，将它们由纯AOT运行时改造为&#34;AOT + Interpreter&#34;混合运行方式。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/focus-creative-games/hybridclr/main/docs/images/architecture.png&#34; alt=&#34;icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;更具体地说，HybridCLR做了以下几点工作：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;实现了一个高效的元数据(dll)解析库&lt;/li&gt; &#xA; &lt;li&gt;改造了元数据管理模块，实现了元数据的动态注册&lt;/li&gt; &#xA; &lt;li&gt;实现了一个IL指令集到自定义的寄存器指令集的compiler&lt;/li&gt; &#xA; &lt;li&gt;实现了一个高效的寄存器解释器&lt;/li&gt; &#xA; &lt;li&gt;额外提供大量的instinct函数，提升解释器性能&lt;/li&gt; &#xA; &lt;li&gt;提供hotfix AOT的支持&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;与其他流行的c#热更新方案的区别&lt;/h2&gt; &#xA;&lt;h3&gt;本质比较&lt;/h3&gt; &#xA;&lt;p&gt;HybridCLR是原生的c#热更新方案。通俗地说，il2cpp相当于mono的aot模块，HybridCLR相当于mono的interpreter模块，两者合一成为完整mono。HybridCLR使得il2cpp变成一个全功能的runtime，原生（即通过System.Reflection.Assembly.Load）支持动态加载dll，从而支持ios平台的热更新。&lt;/p&gt; &#xA;&lt;p&gt;正因为HybridCLR是原生runtime级别实现，热更新部分的类型与主工程AOT部分类型是完全等价并且无缝统一的。可以随意调用、继承、反射、多线程，不需要生成代码或者写适配器。&lt;/p&gt; &#xA;&lt;p&gt;其他热更新方案则是独立vm，与il2cpp的关系本质上相当于mono中嵌入lua的关系。因此类型系统不统一，为了让热更新类型能够继承AOT部分类型，需要写适配器，并且解释器中的类型不能为主工程的类型系统所识别。特性不完整、开发麻烦、运行效率低下。&lt;/p&gt; &#xA;&lt;h3&gt;实际使用体验或者特性比较&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HybridCLR学习和使用成本几乎为零。HybridCLR让il2cpp变成全功能的runtime，学习和使用成本几乎为零，几乎零侵入性。而其他方案则有大量的坑和需要规避的规则，学习和使用成本，需要对原项目作大量改造。&lt;/li&gt; &#xA; &lt;li&gt;HybridCLR可以使用所有c#的特性。而其他方案往往有大量的限制。&lt;/li&gt; &#xA; &lt;li&gt;HybridCLR中可以直接支持使用和继承主工程中的类型。其他方案要写适配器或者生成代码。&lt;/li&gt; &#xA; &lt;li&gt;HybridCLR中热更新部分元数据与AOT元数据无缝统一。像反射代码能够正常工作的，AOT部分也可以通过标准Reflection接口创建出热更新对象。其他方案做不到。&lt;/li&gt; &#xA; &lt;li&gt;HybridCLR对多线程支持良好。像多线程、ThreadStatic、async等等特性都是HybridCLR直接支持，其他方案除了async特性外均难以支持。&lt;/li&gt; &#xA; &lt;li&gt;HybridCLR中Unity工作流与原生几乎完全相同。HybridCLR中热更新MonoBehaviour可以直接挂载在热更新资源上，并且正确工作。其他方案不行。&lt;/li&gt; &#xA; &lt;li&gt;HybridCLR兼容性极高。各种第三方库只要在il2cpp下能工作，在HybridCLR下也能正常工作。其他方案往往要大量魔改源码。&lt;/li&gt; &#xA; &lt;li&gt;HybridCLR内存效率极高。HybridCLR中热更新类型与主工程的AOT类型完全等价，占用一样多的空间。其他方案的同等类型则是假类型，不仅不能被runtime识别，还多占了数倍空间。&lt;/li&gt; &#xA; &lt;li&gt;HybridCLR执行效率高。HybridCLR中热更新部分与主工程AOT部分交互属于il2cpp内部交互，效率极高。而其他方案则是独立虚拟机与il2cpp之间的效率，不仅交互麻烦还效率低下。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;文档&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://focus-creative-games.github.io/&#34;&gt;文档站&lt;/a&gt;，&lt;strong&gt;推荐使用&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://focus-creative-games.github.io/hybridclr/faq/&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://focus-creative-games.github.io/hybridclr/performance/limit/&#34;&gt;限制和注意事项&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/focus-creative-games/hybridclr_trial&#34;&gt;示例项目&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/column/c_1489549396035870720&#34;&gt;知乎专栏&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://focus-creative-games.github.io/hybridclr/donate/&#34;&gt;==&amp;gt;致谢名单&amp;lt;==&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;稳定性状况&lt;/h2&gt; &#xA;&lt;p&gt;=== &lt;strong&gt;庆祝于 2021.6.7 第一款使用HybridCLR的android和iOS双端休闲游戏正式上线&lt;/strong&gt; ===，7月份还有几款中重游戏上线或者对外测试。&lt;/p&gt; &#xA;&lt;p&gt;技术评估上目前稳定性处于Beta版本。由于HybridCLR技术原理的先进性，bug本质上不多，稳定得非常快。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;目前PC、Android、iOS 已跑通所有单元测试，可稳定体验使用。&lt;/li&gt; &#xA; &lt;li&gt;测试了游戏常用库和框架的兼容性，兼容性良好。只要能在il2cpp backend下工作的库都可以在HybridCLR下正常工作。甚至那些与il2cpp因为AOT问题不兼容的库，现在因为HybridCLR对il2cpp的能力扩充，反而可以正常运行了。&lt;/li&gt; &#xA; &lt;li&gt;已经有几十个大中型游戏项目较完整地接入HybridCLR，并且其中一些在紧锣密鼓作上线前测试。具体参见收集的一些 &lt;a href=&#34;https://focus-creative-games.github.io/hybridclr/ref_project/&#34;&gt;完整接入的商业项目列表&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;支持与联系&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;开发交流，欢迎加QQ群或邮件联系 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;QQ群：651188171 HybridCLR技术交流群 &lt;strong&gt;(官方主群)&lt;/strong&gt;。可以反馈bug，但&lt;strong&gt;不要在群里咨询基础使用问题&lt;/strong&gt;。&lt;/li&gt; &#xA;   &lt;li&gt;QQ群：428404198 HybridCLR使用疑难咨询群 &lt;strong&gt;(新手群)&lt;/strong&gt;。新手使用过程中遇到问题，都可以在群里咨询。&lt;/li&gt; &#xA;   &lt;li&gt;邮箱：taojingjian#gmail.com&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RoadMap&lt;/h2&gt; &#xA;&lt;p&gt;HybridCLR虽然与il2cpp相关，但绝大多数核心代码独立于il2cpp，很容易移植（预计一个月）到其他不支持AOT+Interpreter的CLR平台。无论unity如何版本变迁，哪怕废弃了il2cpp改用.net 6+，HybridCLR会持续跟进，稳定地提供跨平台的CLR热更新服务，直至某天.net官方直接支持AOT+Interpreter，则HybridCLR完成其历史使命。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持Unity 2019、2020和2021系列版本 (2022.6 -)&lt;/li&gt; &#xA; &lt;li&gt;指令优化，编译后指令数减少到原来1/4-1/2，基础指令和大多数对象模型指令有100%-300%的性能提升。 (2022.7 -)&lt;/li&gt; &#xA; &lt;li&gt;支持增量式gc (2022.8 -)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;license&lt;/h2&gt; &#xA;&lt;p&gt;HybridCLR is licensed under the &lt;a href=&#34;https://github.com/focus-creative-games/hybridclr/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt; license&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>raulmur/ORB_SLAM2</title>
    <updated>2022-07-15T01:31:30Z</updated>
    <id>tag:github.com,2022-07-15:/raulmur/ORB_SLAM2</id>
    <link href="https://github.com/raulmur/ORB_SLAM2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-Time SLAM for Monocular, Stereo and RGB-D Cameras, with Loop Detection and Relocalization Capabilities&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ORB-SLAM2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Authors:&lt;/strong&gt; &lt;a href=&#34;http://webdiis.unizar.es/~raulmur/&#34;&gt;Raul Mur-Artal&lt;/a&gt;, &lt;a href=&#34;http://webdiis.unizar.es/~jdtardos/&#34;&gt;Juan D. Tardos&lt;/a&gt;, &lt;a href=&#34;http://webdiis.unizar.es/~josemari/&#34;&gt;J. M. M. Montiel&lt;/a&gt; and &lt;a href=&#34;http://doriangalvez.com/&#34;&gt;Dorian Galvez-Lopez&lt;/a&gt; (&lt;a href=&#34;https://github.com/dorian3d/DBoW2&#34;&gt;DBoW2&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;13 Jan 2017&lt;/strong&gt;: OpenCV 3 and Eigen 3.3 are now supported.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;22 Dec 2016&lt;/strong&gt;: Added AR demo (see section 7).&lt;/p&gt; &#xA;&lt;p&gt;ORB-SLAM2 is a real-time SLAM library for &lt;strong&gt;Monocular&lt;/strong&gt;, &lt;strong&gt;Stereo&lt;/strong&gt; and &lt;strong&gt;RGB-D&lt;/strong&gt; cameras that computes the camera trajectory and a sparse 3D reconstruction (in the stereo and RGB-D case with true scale). It is able to detect loops and relocalize the camera in real time. We provide examples to run the SLAM system in the &lt;a href=&#34;http://www.cvlibs.net/datasets/kitti/eval_odometry.php&#34;&gt;KITTI dataset&lt;/a&gt; as stereo or monocular, in the &lt;a href=&#34;http://vision.in.tum.de/data/datasets/rgbd-dataset&#34;&gt;TUM dataset&lt;/a&gt; as RGB-D or monocular, and in the &lt;a href=&#34;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&#34;&gt;EuRoC dataset&lt;/a&gt; as stereo or monocular. We also provide a ROS node to process live monocular, stereo or RGB-D streams. &lt;strong&gt;The library can be compiled without ROS&lt;/strong&gt;. ORB-SLAM2 provides a GUI to change between a &lt;em&gt;SLAM Mode&lt;/em&gt; and &lt;em&gt;Localization Mode&lt;/em&gt;, see section 9 of this document.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/embed/ufvPS5wJAx0&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/ufvPS5wJAx0/0.jpg&#34; alt=&#34;ORB-SLAM2&#34; width=&#34;240&#34; height=&#34;180&#34; border=&#34;10&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/embed/T-9PYCKhDLM&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/T-9PYCKhDLM/0.jpg&#34; alt=&#34;ORB-SLAM2&#34; width=&#34;240&#34; height=&#34;180&#34; border=&#34;10&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/embed/kPwy8yA4CKM&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/kPwy8yA4CKM/0.jpg&#34; alt=&#34;ORB-SLAM2&#34; width=&#34;240&#34; height=&#34;180&#34; border=&#34;10&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Related Publications:&lt;/h3&gt; &#xA;&lt;p&gt;[Monocular] Raúl Mur-Artal, J. M. M. Montiel and Juan D. Tardós. &lt;strong&gt;ORB-SLAM: A Versatile and Accurate Monocular SLAM System&lt;/strong&gt;. &lt;em&gt;IEEE Transactions on Robotics,&lt;/em&gt; vol. 31, no. 5, pp. 1147-1163, 2015. (&lt;strong&gt;2015 IEEE Transactions on Robotics Best Paper Award&lt;/strong&gt;). &lt;strong&gt;&lt;a href=&#34;http://webdiis.unizar.es/~raulmur/MurMontielTardosTRO15.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[Stereo and RGB-D] Raúl Mur-Artal and Juan D. Tardós. &lt;strong&gt;ORB-SLAM2: an Open-Source SLAM System for Monocular, Stereo and RGB-D Cameras&lt;/strong&gt;. &lt;em&gt;IEEE Transactions on Robotics,&lt;/em&gt; vol. 33, no. 5, pp. 1255-1262, 2017. &lt;strong&gt;&lt;a href=&#34;https://128.84.21.199/pdf/1610.06475.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[DBoW2 Place Recognizer] Dorian Gálvez-López and Juan D. Tardós. &lt;strong&gt;Bags of Binary Words for Fast Place Recognition in Image Sequences&lt;/strong&gt;. &lt;em&gt;IEEE Transactions on Robotics,&lt;/em&gt; vol. 28, no. 5, pp. 1188-1197, 2012. &lt;strong&gt;&lt;a href=&#34;http://doriangalvez.com/php/dl.php?dlp=GalvezTRO12.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;1. License&lt;/h1&gt; &#xA;&lt;p&gt;ORB-SLAM2 is released under a &lt;a href=&#34;https://github.com/raulmur/ORB_SLAM2/raw/master/License-gpl.txt&#34;&gt;GPLv3 license&lt;/a&gt;. For a list of all code/library dependencies (and associated licenses), please see &lt;a href=&#34;https://github.com/raulmur/ORB_SLAM2/raw/master/Dependencies.md&#34;&gt;Dependencies.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a closed-source version of ORB-SLAM2 for commercial purposes, please contact the authors: orbslam (at) unizar (dot) es.&lt;/p&gt; &#xA;&lt;p&gt;If you use ORB-SLAM2 (Monocular) in an academic work, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{murTRO2015,&#xA;  title={{ORB-SLAM}: a Versatile and Accurate Monocular {SLAM} System},&#xA;  author={Mur-Artal, Ra\&#39;ul, Montiel, J. M. M. and Tard\&#39;os, Juan D.},&#xA;  journal={IEEE Transactions on Robotics},&#xA;  volume={31},&#xA;  number={5},&#xA;  pages={1147--1163},&#xA;  doi = {10.1109/TRO.2015.2463671},&#xA;  year={2015}&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you use ORB-SLAM2 (Stereo or RGB-D) in an academic work, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{murORB2,&#xA;  title={{ORB-SLAM2}: an Open-Source {SLAM} System for Monocular, Stereo and {RGB-D} Cameras},&#xA;  author={Mur-Artal, Ra\&#39;ul and Tard\&#39;os, Juan D.},&#xA;  journal={IEEE Transactions on Robotics},&#xA;  volume={33},&#xA;  number={5},&#xA;  pages={1255--1262},&#xA;  doi = {10.1109/TRO.2017.2705103},&#xA;  year={2017}&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;2. Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;We have tested the library in &lt;strong&gt;Ubuntu 12.04&lt;/strong&gt;, &lt;strong&gt;14.04&lt;/strong&gt; and &lt;strong&gt;16.04&lt;/strong&gt;, but it should be easy to compile in other platforms. A powerful computer (e.g. i7) will ensure real-time performance and provide more stable and accurate results.&lt;/p&gt; &#xA;&lt;h2&gt;C++11 or C++0x Compiler&lt;/h2&gt; &#xA;&lt;p&gt;We use the new thread and chrono functionalities of C++11.&lt;/p&gt; &#xA;&lt;h2&gt;Pangolin&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/stevenlovegrove/Pangolin&#34;&gt;Pangolin&lt;/a&gt; for visualization and user interface. Dowload and install instructions can be found at: &lt;a href=&#34;https://github.com/stevenlovegrove/Pangolin&#34;&gt;https://github.com/stevenlovegrove/Pangolin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;OpenCV&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;http://opencv.org&#34;&gt;OpenCV&lt;/a&gt; to manipulate images and features. Dowload and install instructions can be found at: &lt;a href=&#34;http://opencv.org&#34;&gt;http://opencv.org&lt;/a&gt;. &lt;strong&gt;Required at leat 2.4.3. Tested with OpenCV 2.4.11 and OpenCV 3.2&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Eigen3&lt;/h2&gt; &#xA;&lt;p&gt;Required by g2o (see below). Download and install instructions can be found at: &lt;a href=&#34;http://eigen.tuxfamily.org&#34;&gt;http://eigen.tuxfamily.org&lt;/a&gt;. &lt;strong&gt;Required at least 3.1.0&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;DBoW2 and g2o (Included in Thirdparty folder)&lt;/h2&gt; &#xA;&lt;p&gt;We use modified versions of the &lt;a href=&#34;https://github.com/dorian3d/DBoW2&#34;&gt;DBoW2&lt;/a&gt; library to perform place recognition and &lt;a href=&#34;https://github.com/RainerKuemmerle/g2o&#34;&gt;g2o&lt;/a&gt; library to perform non-linear optimizations. Both modified libraries (which are BSD) are included in the &lt;em&gt;Thirdparty&lt;/em&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;ROS (optional)&lt;/h2&gt; &#xA;&lt;p&gt;We provide some examples to process the live input of a monocular, stereo or RGB-D camera using &lt;a href=&#34;https://raw.githubusercontent.com/raulmur/ORB_SLAM2/master/ros.org&#34;&gt;ROS&lt;/a&gt;. Building these examples is optional. In case you want to use ROS, a version Hydro or newer is needed.&lt;/p&gt; &#xA;&lt;h1&gt;3. Building ORB-SLAM2 library and examples&lt;/h1&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/raulmur/ORB_SLAM2.git ORB_SLAM2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We provide a script &lt;code&gt;build.sh&lt;/code&gt; to build the &lt;em&gt;Thirdparty&lt;/em&gt; libraries and &lt;em&gt;ORB-SLAM2&lt;/em&gt;. Please make sure you have installed all required dependencies (see section 2). Execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ORB_SLAM2&#xA;chmod +x build.sh&#xA;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create &lt;strong&gt;libORB_SLAM2.so&lt;/strong&gt; at &lt;em&gt;lib&lt;/em&gt; folder and the executables &lt;strong&gt;mono_tum&lt;/strong&gt;, &lt;strong&gt;mono_kitti&lt;/strong&gt;, &lt;strong&gt;rgbd_tum&lt;/strong&gt;, &lt;strong&gt;stereo_kitti&lt;/strong&gt;, &lt;strong&gt;mono_euroc&lt;/strong&gt; and &lt;strong&gt;stereo_euroc&lt;/strong&gt; in &lt;em&gt;Examples&lt;/em&gt; folder.&lt;/p&gt; &#xA;&lt;h1&gt;4. Monocular Examples&lt;/h1&gt; &#xA;&lt;h2&gt;TUM Dataset&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download a sequence from &lt;a href=&#34;http://vision.in.tum.de/data/datasets/rgbd-dataset/download&#34;&gt;http://vision.in.tum.de/data/datasets/rgbd-dataset/download&lt;/a&gt; and uncompress it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the following command. Change &lt;code&gt;TUMX.yaml&lt;/code&gt; to TUM1.yaml,TUM2.yaml or TUM3.yaml for freiburg1, freiburg2 and freiburg3 sequences respectively. Change &lt;code&gt;PATH_TO_SEQUENCE_FOLDER&lt;/code&gt;to the uncompressed sequence folder.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Monocular/mono_tum Vocabulary/ORBvoc.txt Examples/Monocular/TUMX.yaml PATH_TO_SEQUENCE_FOLDER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;KITTI Dataset&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the dataset (grayscale images) from &lt;a href=&#34;http://www.cvlibs.net/datasets/kitti/eval_odometry.php&#34;&gt;http://www.cvlibs.net/datasets/kitti/eval_odometry.php&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the following command. Change &lt;code&gt;KITTIX.yaml&lt;/code&gt;by KITTI00-02.yaml, KITTI03.yaml or KITTI04-12.yaml for sequence 0 to 2, 3, and 4 to 12 respectively. Change &lt;code&gt;PATH_TO_DATASET_FOLDER&lt;/code&gt; to the uncompressed dataset folder. Change &lt;code&gt;SEQUENCE_NUMBER&lt;/code&gt; to 00, 01, 02,.., 11.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;EuRoC Dataset&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download a sequence (ASL format) from &lt;a href=&#34;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&#34;&gt;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the following first command for V1 and V2 sequences, or the second command for MH sequences. Change PATH_TO_SEQUENCE_FOLDER and SEQUENCE according to the sequence you want to run.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Monocular/mono_euroc Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml PATH_TO_SEQUENCE_FOLDER/mav0/cam0/data Examples/Monocular/EuRoC_TimeStamps/SEQUENCE.txt &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Monocular/mono_euroc Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml PATH_TO_SEQUENCE/cam0/data Examples/Monocular/EuRoC_TimeStamps/SEQUENCE.txt &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;5. Stereo Examples&lt;/h1&gt; &#xA;&lt;h2&gt;KITTI Dataset&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the dataset (grayscale images) from &lt;a href=&#34;http://www.cvlibs.net/datasets/kitti/eval_odometry.php&#34;&gt;http://www.cvlibs.net/datasets/kitti/eval_odometry.php&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the following command. Change &lt;code&gt;KITTIX.yaml&lt;/code&gt;to KITTI00-02.yaml, KITTI03.yaml or KITTI04-12.yaml for sequence 0 to 2, 3, and 4 to 12 respectively. Change &lt;code&gt;PATH_TO_DATASET_FOLDER&lt;/code&gt; to the uncompressed dataset folder. Change &lt;code&gt;SEQUENCE_NUMBER&lt;/code&gt; to 00, 01, 02,.., 11.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Stereo/stereo_kitti Vocabulary/ORBvoc.txt Examples/Stereo/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;EuRoC Dataset&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download a sequence (ASL format) from &lt;a href=&#34;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&#34;&gt;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the following first command for V1 and V2 sequences, or the second command for MH sequences. Change PATH_TO_SEQUENCE_FOLDER and SEQUENCE according to the sequence you want to run.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Stereo/stereo_euroc Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml PATH_TO_SEQUENCE/mav0/cam0/data PATH_TO_SEQUENCE/mav0/cam1/data Examples/Stereo/EuRoC_TimeStamps/SEQUENCE.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/Stereo/stereo_euroc Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml PATH_TO_SEQUENCE/cam0/data PATH_TO_SEQUENCE/cam1/data Examples/Stereo/EuRoC_TimeStamps/SEQUENCE.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;6. RGB-D Example&lt;/h1&gt; &#xA;&lt;h2&gt;TUM Dataset&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download a sequence from &lt;a href=&#34;http://vision.in.tum.de/data/datasets/rgbd-dataset/download&#34;&gt;http://vision.in.tum.de/data/datasets/rgbd-dataset/download&lt;/a&gt; and uncompress it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Associate RGB images and depth images using the python script &lt;a href=&#34;http://vision.in.tum.de/data/datasets/rgbd-dataset/tools&#34;&gt;associate.py&lt;/a&gt;. We already provide associations for some of the sequences in &lt;em&gt;Examples/RGB-D/associations/&lt;/em&gt;. You can generate your own associations file executing:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python associate.py PATH_TO_SEQUENCE/rgb.txt PATH_TO_SEQUENCE/depth.txt &amp;gt; associations.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Execute the following command. Change &lt;code&gt;TUMX.yaml&lt;/code&gt; to TUM1.yaml,TUM2.yaml or TUM3.yaml for freiburg1, freiburg2 and freiburg3 sequences respectively. Change &lt;code&gt;PATH_TO_SEQUENCE_FOLDER&lt;/code&gt;to the uncompressed sequence folder. Change &lt;code&gt;ASSOCIATIONS_FILE&lt;/code&gt; to the path to the corresponding associations file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./Examples/RGB-D/rgbd_tum Vocabulary/ORBvoc.txt Examples/RGB-D/TUMX.yaml PATH_TO_SEQUENCE_FOLDER ASSOCIATIONS_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;7. ROS Examples&lt;/h1&gt; &#xA;&lt;h3&gt;Building the nodes for mono, monoAR, stereo and RGB-D&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the path including &lt;em&gt;Examples/ROS/ORB_SLAM2&lt;/em&gt; to the ROS_PACKAGE_PATH environment variable. Open .bashrc file and add at the end the following line. Replace PATH by the folder where you cloned ORB_SLAM2:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;export ROS_PACKAGE_PATH=${ROS_PACKAGE_PATH}:PATH/ORB_SLAM2/Examples/ROS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;build_ros.sh&lt;/code&gt; script:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod +x build_ros.sh&#xA;./build_ros.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Monocular Node&lt;/h3&gt; &#xA;&lt;p&gt;For a monocular input from topic &lt;code&gt;/camera/image_raw&lt;/code&gt; run node ORB_SLAM2/Mono. You will need to provide the vocabulary file and a settings file. See the monocular examples above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosrun ORB_SLAM2 Mono PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Monocular Augmented Reality Demo&lt;/h3&gt; &#xA;&lt;p&gt;This is a demo of augmented reality where you can use an interface to insert virtual cubes in planar regions of the scene. The node reads images from topic &lt;code&gt;/camera/image_raw&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosrun ORB_SLAM2 MonoAR PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Stereo Node&lt;/h3&gt; &#xA;&lt;p&gt;For a stereo input from topic &lt;code&gt;/camera/left/image_raw&lt;/code&gt; and &lt;code&gt;/camera/right/image_raw&lt;/code&gt; run node ORB_SLAM2/Stereo. You will need to provide the vocabulary file and a settings file. If you &lt;strong&gt;provide rectification matrices&lt;/strong&gt; (see Examples/Stereo/EuRoC.yaml example), the node will recitify the images online, &lt;strong&gt;otherwise images must be pre-rectified&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosrun ORB_SLAM2 Stereo PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE ONLINE_RECTIFICATION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: Download a rosbag (e.g. V1_01_easy.bag) from the EuRoC dataset (&lt;a href=&#34;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&#34;&gt;http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets&lt;/a&gt;). Open 3 tabs on the terminal and run the following command at each tab:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;roscore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosrun ORB_SLAM2 Stereo Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosbag play --pause V1_01_easy.bag /cam0/image_raw:=/camera/left/image_raw /cam1/image_raw:=/camera/right/image_raw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once ORB-SLAM2 has loaded the vocabulary, press space in the rosbag tab. Enjoy!. Note: a powerful computer is required to run the most exigent sequences of this dataset.&lt;/p&gt; &#xA;&lt;h3&gt;Running RGB_D Node&lt;/h3&gt; &#xA;&lt;p&gt;For an RGB-D input from topics &lt;code&gt;/camera/rgb/image_raw&lt;/code&gt; and &lt;code&gt;/camera/depth_registered/image_raw&lt;/code&gt;, run node ORB_SLAM2/RGBD. You will need to provide the vocabulary file and a settings file. See the RGB-D example above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rosrun ORB_SLAM2 RGBD PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;8. Processing your own sequences&lt;/h1&gt; &#xA;&lt;p&gt;You will need to create a settings file with the calibration of your camera. See the settings file provided for the TUM and KITTI datasets for monocular, stereo and RGB-D cameras. We use the calibration model of OpenCV. See the examples to learn how to create a program that makes use of the ORB-SLAM2 library and how to pass images to the SLAM system. Stereo input must be synchronized and rectified. RGB-D input must be synchronized and depth registered.&lt;/p&gt; &#xA;&lt;h1&gt;9. SLAM and Localization Modes&lt;/h1&gt; &#xA;&lt;p&gt;You can change between the &lt;em&gt;SLAM&lt;/em&gt; and &lt;em&gt;Localization mode&lt;/em&gt; using the GUI of the map viewer.&lt;/p&gt; &#xA;&lt;h3&gt;SLAM Mode&lt;/h3&gt; &#xA;&lt;p&gt;This is the default mode. The system runs in parallal three threads: Tracking, Local Mapping and Loop Closing. The system localizes the camera, builds new map and tries to close loops.&lt;/p&gt; &#xA;&lt;h3&gt;Localization Mode&lt;/h3&gt; &#xA;&lt;p&gt;This mode can be used when you have a good map of your working area. In this mode the Local Mapping and Loop Closing are deactivated. The system localizes the camera in the map (which is no longer updated), using relocalization if needed.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/incubator-brpc</title>
    <updated>2022-07-15T01:31:30Z</updated>
    <id>tag:github.com,2022-07-15:/apache/incubator-brpc</id>
    <link href="https://github.com/apache/incubator-brpc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Industrial-grade RPC framework used throughout Baidu, with 1,000,000+ instances and thousands kinds of services. &#34;brpc&#34; means &#34;better RPC&#34;.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/README_cn.md&#34;&gt;中文版&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/github/apache/incubator-brpc&#34;&gt;&lt;img src=&#34;https://api.travis-ci.com/apache/incubator-brpc.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/images/logo.png&#34; alt=&#34;brpc&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;An industrial-grade RPC framework used throughout &lt;a href=&#34;http://ir.baidu.com/phoenix.zhtml?c=188488&amp;amp;p=irol-irhome&#34;&gt;Baidu&lt;/a&gt;, with 1,000,000+ instances(not counting clients) and thousands kinds of services. &#34;brpc&#34; means &#34;better RPC&#34;.&lt;/p&gt; &#xA;&lt;p&gt;You can use it to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build a server that can talk in multiple protocols (&lt;strong&gt;on same port&lt;/strong&gt;), or access all sorts of services &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;restful http/https, &lt;a href=&#34;https://http2.github.io/http2-spec&#34;&gt;h2&lt;/a&gt;/&lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt;. using http/h2 in brpc is much more friendly than &lt;a href=&#34;https://curl.haxx.se/libcurl/&#34;&gt;libcurl&lt;/a&gt;. Access protobuf-based protocols with HTTP/h2+json, probably from another language.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/redis_client.md&#34;&gt;redis&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/memcache_client.md&#34;&gt;memcached&lt;/a&gt;, thread-safe, more friendly and performant than the official clients.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/brpc/brpc/raw/master/src/brpc/rtmp.h&#34;&gt;rtmp&lt;/a&gt;/&lt;a href=&#34;https://en.wikipedia.org/wiki/Flash_Video&#34;&gt;flv&lt;/a&gt;/&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_Live_Streaming&#34;&gt;hls&lt;/a&gt;, for building &lt;a href=&#34;https://github.com/brpc/media-server&#34;&gt;streaming services&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;hadoop_rpc (may be opensourced)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_direct_memory_access&#34;&gt;rdma&lt;/a&gt; support (will be opensourced)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/thrift.md&#34;&gt;thrift&lt;/a&gt; support, thread-safe, more friendly and performant than the official clients.&lt;/li&gt; &#xA;   &lt;li&gt;all sorts of protocols used in Baidu: &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/baidu_std.md&#34;&gt;baidu_std&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/streaming_rpc.md&#34;&gt;streaming_rpc&lt;/a&gt;, hulu_pbrpc, &lt;a href=&#34;https://github.com/baidu/sofa-pbrpc&#34;&gt;sofa_pbrpc&lt;/a&gt;, nova_pbrpc, public_pbrpc, ubrpc and nshead-based ones.&lt;/li&gt; &#xA;   &lt;li&gt;Build &lt;a href=&#34;https://en.wikipedia.org/wiki/High_availability&#34;&gt;HA&lt;/a&gt; distributed services using an industrial-grade implementation of &lt;a href=&#34;https://raft.github.io&#34;&gt;RAFT consensus algorithm&lt;/a&gt; which is opensourced at &lt;a href=&#34;https://github.com/brpc/braft&#34;&gt;braft&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Servers can handle requests &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/server.md&#34;&gt;synchronously&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/server.md#asynchronous-service&#34;&gt;asynchronously&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clients can access servers &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/client.md#synchronus-call&#34;&gt;synchronously&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/client.md#asynchronous-call&#34;&gt;asynchronously&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/client.md#semi-synchronous-call&#34;&gt;semi-synchronously&lt;/a&gt;, or use &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/combo_channel.md&#34;&gt;combo channels&lt;/a&gt; to simplify sharded or parallel accesses declaratively.&lt;/li&gt; &#xA; &lt;li&gt;Debug services &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/builtin_service.md&#34;&gt;via http&lt;/a&gt;, and run &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/cpu_profiler.md&#34;&gt;cpu&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/heap_profiler.md&#34;&gt;heap&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/contention_profiler.md&#34;&gt;contention&lt;/a&gt; profilers.&lt;/li&gt; &#xA; &lt;li&gt;Get &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/overview.md#better-latency-and-throughput&#34;&gt;better latency and throughput&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/new_protocol.md&#34;&gt;Extend brpc&lt;/a&gt; with the protocols used in your organization quickly, or customize components, including &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/load_balancing.md#%E5%91%BD%E5%90%8D%E6%9C%8D%E5%8A%A1&#34;&gt;naming services&lt;/a&gt; (dns, zk, etcd), &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/load_balancing.md#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1&#34;&gt;load balancers&lt;/a&gt; (rr, random, consistent hashing)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Try it!&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/overview.md&#34;&gt;overview&lt;/a&gt; to know where brpc can be used and its advantages.&lt;/li&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/getting_started.md&#34;&gt;getting started&lt;/a&gt; for building steps and play with &lt;a href=&#34;https://github.com/brpc/brpc/tree/master/example/&#34;&gt;examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Docs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/benchmark.md&#34;&gt;Performance benchmark&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/bvar.md&#34;&gt;bvar&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/bvar_c++.md&#34;&gt;bvar_c++&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/bthread.md&#34;&gt;bthread&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/bthread_or_not.md&#34;&gt;bthread or not&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/thread_local.md&#34;&gt;thread-local&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/execution_queue.md&#34;&gt;Execution Queue&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Client &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/client.md&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/error_code.md&#34;&gt;Error code&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/combo_channel.md&#34;&gt;Combo channels&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/http_client.md&#34;&gt;Access http/h2&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/http_derivatives.md#h2grpc&#34;&gt;Access gRPC&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/thrift.md#client-accesses-thrift-server&#34;&gt;Access thrift&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/ub_client.md&#34;&gt;Access UB&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/streaming_rpc.md&#34;&gt;Streaming RPC&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/redis_client.md&#34;&gt;Access redis&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/memcache_client.md&#34;&gt;Access memcached&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/backup_request.md&#34;&gt;Backup request&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/dummy_server.md&#34;&gt;Dummy server&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Server &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/server.md&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/http_service.md&#34;&gt;Serve http/h2&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/http_derivatives.md#h2grpc&#34;&gt;Serve gRPC&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/thrift.md#server-processes-thrift-requests&#34;&gt;Serve thrift&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/nshead_service.md&#34;&gt;Serve Nshead&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/server_debugging.md&#34;&gt;Debug server issues&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/server_push.md&#34;&gt;Server push&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/avalanche.md&#34;&gt;Avalanche&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/auto_concurrency_limiter.md&#34;&gt;Auto ConcurrencyLimiter&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/brpc/media-server&#34;&gt;Media Server&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/json2pb.md&#34;&gt;json2pb&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/builtin_service.md&#34;&gt;Builtin Services&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/status.md&#34;&gt;status&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/vars.md&#34;&gt;vars&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/connections.md&#34;&gt;connections&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/flags.md&#34;&gt;flags&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/rpcz.md&#34;&gt;rpcz&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/cpu_profiler.md&#34;&gt;cpu_profiler&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/heap_profiler.md&#34;&gt;heap_profiler&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/contention_profiler.md&#34;&gt;contention_profiler&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Tools &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/rpc_press.md&#34;&gt;rpc_press&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/rpc_replay.md&#34;&gt;rpc_replay&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/rpc_view.md&#34;&gt;rpc_view&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/benchmark_http.md&#34;&gt;benchmark_http&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/parallel_http.md&#34;&gt;parallel_http&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Others &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/iobuf.md&#34;&gt;IOBuf&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/streaming_log.md&#34;&gt;Streaming Log&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/flatmap.md&#34;&gt;FlatMap&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/brpc_intro.pptx&#34;&gt;brpc外功修炼宝典&lt;/a&gt;(training material)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/tutorial_on_building_services.pptx&#34;&gt;A tutorial on building large-scale services&lt;/a&gt;(training material)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/brpc_internal.pptx&#34;&gt;brpc internal&lt;/a&gt;(training material)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;RPC in depth &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/new_protocol.md&#34;&gt;New Protocol&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/atomic_instructions.md&#34;&gt;Atomic instructions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/io.md&#34;&gt;IO&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/en/threading_overview.md&#34;&gt;Threading Overview&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/load_balancing.md&#34;&gt;Load Balancing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/lalb.md&#34;&gt;Locality-aware&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/consistent_hashing.md&#34;&gt;Consistent Hashing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/memory_management.md&#34;&gt;Memory Management&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/timer_keeping.md&#34;&gt;Timer keeping&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/bthread_id.md&#34;&gt;bthread_id&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Use cases inside Baidu &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/case_apicontrol.md&#34;&gt;百度地图api入口&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/case_baidu_dsp.md&#34;&gt;联盟DSP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/case_elf.md&#34;&gt;ELF学习框架&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/docs/cn/case_ubrpc.md&#34;&gt;云平台代理服务&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute code&lt;/h1&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-brpc/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Feedback and Getting involved&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report bugs, ask questions or give suggestions by &lt;a href=&#34;https://github.com/apache/incubator-brpc/issues&#34;&gt;Github Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Subscribe mailing list(&lt;a href=&#34;mailto:dev-subscribe@brpc.apache.org&#34;&gt;dev-subscribe@brpc.apache.org&lt;/a&gt;) to get updated with the project&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>