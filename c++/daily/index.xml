<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-30T01:24:57Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LibrePCB/LibrePCB</title>
    <updated>2023-09-30T01:24:57Z</updated>
    <id>tag:github.com,2023-09-30:/LibrePCB/LibrePCB</id>
    <link href="https://github.com/LibrePCB/LibrePCB" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful, innovative and intuitive EDA suite for everyone!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LibrePCB&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/librepcb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Patreon-donate-orange.svg?sanitize=true&#34; alt=&#34;Become a Patron&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://librepcb.discourse.group/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discourse-discuss-blueviolet.svg?sanitize=true&#34; alt=&#34;Discourse&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://telegram.me/LibrePCB_dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-chat-blue.svg?sanitize=true&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://librepcb.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Website-librepcb.org-29d682.svg?sanitize=true&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://librepcb.org/docs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Docs-read-yellow.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/LibrePCB/LibrePCB/_build/latest?definitionId=2&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/LibrePCB/LibrePCB/_apis/build/status/LibrePCB.LibrePCB?branchName=master&#34; alt=&#34;Azure Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/1652&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/1652/badge&#34; alt=&#34;OpenSSF Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About LibrePCB&lt;/h2&gt; &#xA;&lt;p&gt;LibrePCB is a free &lt;a href=&#34;https://en.wikipedia.org/wiki/Electronic_design_automation&#34;&gt;EDA&lt;/a&gt; suite to develop printed circuit boards on Windows, Linux and MacOS. More information and screenshots are available at &lt;a href=&#34;https://librepcb.org&#34;&gt;librepcb.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Official stable releases are provided at our &lt;a href=&#34;https://librepcb.org/download/&#34;&gt;download page&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please read our &lt;a href=&#34;https://librepcb.org/docs/&#34;&gt;user manual&lt;/a&gt; to see how you can install and use LibrePCB.&lt;/strong&gt; The &lt;a href=&#34;https://librepcb.org/docs/quickstart/&#34;&gt;quickstart tutorial&lt;/a&gt; provides a step-by-step guide through the whole process of designing a PCB.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! See &lt;a href=&#34;https://librepcb.org/contribute/&#34;&gt;librepcb.org/contribute&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/LibrePCB/LibrePCB/master/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;For internal details take a look at the &lt;a href=&#34;https://developers.librepcb.org/&#34;&gt;developers documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;WARNING: The &lt;code&gt;master&lt;/code&gt; branch always contains the latest UNSTABLE version of LibrePCB. Everything you do with this unstable version could break your workspace, libraries or projects, so you should not use it productively! For productive use, please install an official release as described in the &lt;a href=&#34;https://librepcb.org/docs/&#34;&gt;user manual&lt;/a&gt;. For development, please read details &lt;a href=&#34;https://developers.librepcb.org/df/d30/doc_developers.html#doc_developers_unstable_versions&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;To compile LibrePCB, you need the following software components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;g++ &amp;gt;= 4.8, MinGW &amp;gt;= 4.8, or Clang &amp;gt;= 3.3 (C++11 support is required)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.qt.io/download-open-source/&#34;&gt;Qt&lt;/a&gt; &amp;gt;= 5.5&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.opencascade.com/&#34;&gt;OpenCASCADE&lt;/a&gt; OCCT or OCE (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/OpenGL_Utility_Library&#34;&gt;OpenGL Utility Library&lt;/a&gt; GLU (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.zlib.net/&#34;&gt;zlib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; 3.5 or newer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Prepared Docker Image&lt;/h4&gt; &#xA;&lt;p&gt;Instead of installing the dependencies manually on your system (see instructions below), you can also use one of our &lt;a href=&#34;https://hub.docker.com/r/librepcb/librepcb-dev&#34;&gt;Docker images&lt;/a&gt; with all dependencies pre-installed (except GUI tools like QtCreator). These images are actually used for CI, but are also useful to build LibrePCB locally.&lt;/p&gt; &#xA;&lt;h4&gt;Installation on Debian/Ubuntu/Mint&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: For Ubuntu older than 22.04, replace &lt;code&gt;qtbase5-dev&lt;/code&gt; by &lt;code&gt;qt5-default&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install build-essential git cmake openssl zlib1g zlib1g-dev \&#xA;     qtbase5-dev qtdeclarative5-dev qttools5-dev-tools qttools5-dev \&#xA;     qtquickcontrols2-5-dev libqt5opengl5-dev libqt5svg5-dev \&#xA;     libglu1-mesa-dev liboce-*-dev&#xA;sudo apt-get install qt5-doc qtcreator # optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installation on Arch Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S base-devel git cmake openssl zlib desktop-file-utils shared-mime-info \&#xA;     qt5-base qt5-declarative qt5-quickcontrols2 qt5-svg qt5-tools opencascade&#xA;sudo pacman -S qt5-doc qtcreator # optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Instead of installing the dependencies and building LibrePCB manually, you could install the package &lt;a href=&#34;https://aur.archlinux.org/packages/librepcb-git/&#34;&gt;librepcb-git&lt;/a&gt; from the AUR. The package clones and builds the latest version of the &lt;code&gt;master&lt;/code&gt; branch from GitHub.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Installation on Mac OS X&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Xcode through the app store and start it at least once (for the license)&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/Homebrew/brew&#34;&gt;homebrew&lt;/a&gt; (&lt;strong&gt;the&lt;/strong&gt; package manager)&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies: &lt;code&gt;brew update &amp;amp;&amp;amp; brew install qt5 cmake opencascade&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make the toolchain available: &lt;code&gt;brew unlink qt &amp;amp;&amp;amp; brew link --force qt5&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Installation on Windows&lt;/h4&gt; &#xA;&lt;p&gt;Download and run the &lt;a href=&#34;http://download.qt.io/official_releases/qt/5.8/5.8.0/qt-opensource-windows-x86-mingw530-5.8.0.exe&#34;&gt;Qt for Windows (MinGW) installer&lt;/a&gt; from &lt;a href=&#34;https://www.qt.io/download-open-source/&#34;&gt;here&lt;/a&gt;. LibrePCB does not compile with MSVC, so you must install following components with the Qt installer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The MinGW compiler itself&lt;/li&gt; &#xA; &lt;li&gt;The Qt libraries for MinGW&lt;/li&gt; &#xA; &lt;li&gt;cmake&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the OpenCascade library the installation procedure is not that easy unfortunately. Basically you have to build it by yourself, see instructions &lt;a href=&#34;https://dev.opencascade.org/doc/overview/html/build_upgrade__building_occt.html&#34;&gt;here&lt;/a&gt;. However, to avoid this effort you could instead just set the CMake option &lt;code&gt;USE_OPENCASCADE=0&lt;/code&gt; (can be set in the QtCreator build config) to allow compiling LibrePCB without OpenCascade.&lt;/p&gt; &#xA;&lt;h3&gt;Cloning&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s important to clone the repository recursively to get all submodules too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/LibrePCB/LibrePCB.git &amp;amp;&amp;amp; cd LibrePCB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating&lt;/h3&gt; &#xA;&lt;p&gt;When updating the repository, make sure to also update all the submodules recursively. Otherwise you may get strange compilation errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;You can either build LibrePCB using Qt Creator, or you can build on the command line using cmake. To build LibrePCB using cmake/make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir build &amp;amp;&amp;amp; cd build&#xA;cmake ..&#xA;make -j8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The binary can then be found in &lt;code&gt;build/apps/librepcb/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more detailed instructions (including how to set up Qt Creator), see &lt;a href=&#34;https://developers.librepcb.org/d5/d96/doc_building.html&#34;&gt;https://developers.librepcb.org/d5/d96/doc_building.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First of all, many thanks to all of our &lt;a href=&#34;https://raw.githubusercontent.com/LibrePCB/LibrePCB/master/AUTHORS.md&#34;&gt;contributors&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;A big thank you goes to all &lt;a href=&#34;https://librepcb.org/sponsors/&#34;&gt;our sponsors&lt;/a&gt; which help to keep this project alive!&lt;/li&gt; &#xA; &lt;li&gt;Special thanks also to &lt;a href=&#34;https://www.cloudscale.ch/&#34;&gt;cloudscale.ch&lt;/a&gt; for sponsoring our API server!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;LibrePCB is published under the &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;GNU GPLv3&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fabiensanglard/st</title>
    <updated>2023-09-30T01:24:57Z</updated>
    <id>tag:github.com,2023-09-30:/fabiensanglard/st</id>
    <link href="https://github.com/fabiensanglard/st" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command Space-Time explorer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ste: Space-Time Explorer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;ste&lt;/code&gt; is a tool to &lt;a href=&#34;https://fabiensanglard.net/st/index.html&#34;&gt;explore how command-line program work&lt;/a&gt;. It collects PSS usage over time, process/thread spawned, and wall-time.&lt;/p&gt; &#xA;&lt;h2&gt;sudo&lt;/h2&gt; &#xA;&lt;p&gt;Since &lt;code&gt;ste&lt;/code&gt; uses netlink process monitoring, it needs to be run with &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo ste clang -o hello hello.c&#xA;&#xA;EXEC: [clang /home/leaf/hello.cc]&#xA;EXEC: [/usr/lib/llvm-14/bin/clang -cc1 ...]&#xA;EXEC: [/usr/bin/ld ...]&#xA;Num threads = 3&#xA;Num process = 3&#xA;Max PSS: 127,156,224 bytes&#xA;Walltime: 221ms - user-space: 136ms - kernel-space: 69ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;127┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓&#xA;   ┃                                                                                     ┃&#xA;   ┃                                                                                     ┃&#xA;   ┃                                                          █████████████              ┃&#xA;   ┃            █                    ██████████████████████████████████████              ┃&#xA;   ┃            █           ███████████████████████████████████████████████              ┃&#xA;   ┃            █         █████████████████████████████████████████████████      █ ████  ┃&#xA;   ┃            █  ████████████████████████████████████████████████████████  ████████████┃&#xA;   ┫            ███████████████████████████████████████████████████████████ █████████████┃&#xA;   ┃           ██████████████████████████████████████████████████████████████████████████┃&#xA;   ┃          ███████████████████████████████████████████████████████████████████████████┃&#xA;   ┃        █████████████████████████████████████████████████████████████████████████████┃&#xA;   ┃      ███████████████████████████████████████████████████████████████████████████████┃&#xA;   ┃    █████████████████████████████████████████████████████████████████████████████████┃&#xA;   ┃   ██████████████████████████████████████████████████████████████████████████████████┃&#xA;   ┃█████████████████████████████████████████████████████████████████████████████████████┃&#xA;0MB┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&#xA;   0ms                                                                                 221&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Release build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;make install prefix=&amp;lt;prefix&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For debug builds, specify &lt;code&gt;CXXFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; before running make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export CXXFLAGS=&#34;-Og -fsanitize=address&#34; LDFLAGS=-fsanitize=address&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>VASTDynamics/Vaporizer2</title>
    <updated>2023-09-30T01:24:57Z</updated>
    <id>tag:github.com,2023-09-30:/VASTDynamics/Vaporizer2</id>
    <link href="https://github.com/VASTDynamics/Vaporizer2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vaporizer2 hybrid wavetable additive / subtractive VST / AU / AAX synthesizer / sampler workstation plugin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vaporizer2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VASTDynamics/Vaporizer2/main/Artwork/vaporizer2.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;PROBABLY THE MOST VERSATILE WAVETABLE SYNTHESIZER&#34;&lt;br&gt; Vaporizer2 is a hybrid wavetable additive / subtractive VST / AU / AAX synthesizer / sampler workstation.&lt;/p&gt; &#xA;&lt;p&gt;The heart of this plugin is the alias-free versatile high-performance wavetable sound engine with low system CPU resource usage.&lt;/p&gt; &#xA;&lt;p&gt;Vaporizer2 comes with a groundbreaking wavetable editor with a vast number of editing possibilities including frequency shift, smooth, clean, bend and bloat for single-cycles, parts of single-cycles or even whole wavetables. Featuring an easy-to use wavetable draw mode with smooth Bezier curves and snap to grid function.&lt;/p&gt; &#xA;&lt;p&gt;Available formats: VST2 / VST3 / AU / AAX plugins and a standalone version for both macOS and Windows.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vaporizer2 was developed by VAST Dynamics GbR between 2017 and 2023 and is now free software under GPL3 license.&lt;/li&gt; &#xA; &lt;li&gt;Vaporizer2 is based on the &lt;a href=&#34;https://github.com/juce-framework/JUCE&#34;&gt;JUCE framework&lt;/a&gt; under GPL3 license.&lt;/li&gt; &#xA; &lt;li&gt;Vaporizer2 ueses &lt;a href=&#34;https://github.com/Themaister/muFFT/tree/master&#34;&gt;muFFT&lt;/a&gt; under GPL2 license.&lt;/li&gt; &#xA; &lt;li&gt;You need a (free) developer license from &lt;a href=&#34;https://www.steinberg.net/de/developers/&#34;&gt;Steinberg&lt;/a&gt; to use the VST2 SDK (to build a .vst instead of .vst3). In that case put the SDK in the VST_SDK folder.&lt;/li&gt; &#xA; &lt;li&gt;You need a (free) ASIO SDK 2.3 installation from &lt;a href=&#34;https://www.steinberg.net/de/developers/&#34;&gt;Steinberg&lt;/a&gt;. Place it in the asiosdk folder.&lt;/li&gt; &#xA; &lt;li&gt;You need a (free) developer license from &lt;a href=&#34;http://developer.avid.com/aax/&#34;&gt;Avid Technology&lt;/a&gt; to use the AAX SDK (to build an AAX plugin for ProTools). In that case put the SDK in the AAX_SDK folder. The compiled AAXLibrary_x64.lib is expected here C:\Vaporizer2\AAX_SDK\AAX_SDK_2p3p2\AAX_SDK_2p3p2\Libs\Release\AAXLibrary_x64.lib. You can change the folder in the global path settings of the Projucer.&lt;/li&gt; &#xA; &lt;li&gt;Code signing is required to build an AAX or an AU on MacOS. The process is not described here.&lt;/li&gt; &#xA; &lt;li&gt;To the best of our knowledge the true type fonts in &lt;a href=&#34;https://raw.githubusercontent.com/VASTDynamics/Vaporizer2/main/VASTvaporizer/Resources/Fonts/&#34;&gt;VASTvaporizer/Resources/Fonts/&lt;/a&gt; are freeware and can be distributed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Donation to support the project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=5H8QH4AU6UWWC&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=5H8QH4AU6UWWC&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VASTDynamics/Vaporizer2/main/Artwork/QR-Code.png&#34; alt=&#34;QR-Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Preparation&lt;/h2&gt; &#xA;&lt;h3&gt;1. Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The project expects to find the repository structure in c:\Vaporizer2&lt;br&gt; Use &lt;code&gt;mklink /h /J &#34;C:\Vaporizer2&#34; [lokal repository path]&lt;/code&gt; to symlink if needed.&lt;/li&gt; &#xA; &lt;li&gt;Run Projucer.exe as admininistrator.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. macOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build Projucer from JUCE/extras/Projucer/Builds/MacOSX/Projucer.xcodeproj&lt;/li&gt; &#xA; &lt;li&gt;Run Projucer&lt;/li&gt; &#xA; &lt;li&gt;Set Global Paths from Menu Projucer&amp;gt;Global Paths.&lt;/li&gt; &#xA; &lt;li&gt;Set path to JUCE, JUCE modules, VST SDK, AAX SDK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VASTDynamics/Vaporizer2/main/Artwork/vapo2box_neu_2_large.png&#34; alt=&#34;my screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find more about the plug-in &lt;a href=&#34;https://www.vast-dynamics.com/?q=Vaporizer2&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download installers&lt;/h2&gt; &#xA;&lt;p&gt;You can download installers for Windows and macOS with the built and packaged plug-ins &lt;a href=&#34;https://vast-dynamics.com/?q=products&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Plug-in features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Includes 780+ wavetables and single cycles and 410+ factory presets.&lt;/li&gt; &#xA; &lt;li&gt;Vaporizer2 features a comprehensive preset management system with tags, free text search, file system folder management and ratings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MANY MORE HIGHLIGHTS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;State-of the art wavetable engine with four independent alias-free wavetable oscillator banks with up to 24 oscillator unison&lt;/li&gt; &#xA; &lt;li&gt;Low system CPU resource usage - even with more than 1.000 oscillators playing&lt;/li&gt; &#xA; &lt;li&gt;Groundbreaking wavetable editor with a vast number of editing possibilities including frequency shift, smooth, clean, bend and bloat for single-cycles, parts of single-cycles or even whole wavetables&lt;/li&gt; &#xA; &lt;li&gt;Easy-to use wavetable draw mode with smooth Bezier curves and snap to grid function&lt;/li&gt; &#xA; &lt;li&gt;Mix-in, amplitude modulate, interpolate, convolute, time&amp;gt;frequency, frequency&amp;gt;time or normalize wavetable cycles&lt;/li&gt; &#xA; &lt;li&gt;Generate FM, PWM, harmonic morphed / reduced, low pass / high pass / band pass / comb / formant filtering and even hard sync wavetables out of an arbitrary single cycle waveform&lt;/li&gt; &#xA; &lt;li&gt;Morphing and phase shifting of wavetable cycles&lt;/li&gt; &#xA; &lt;li&gt;Import and change standard (Serum, Icarus) format wavetables - also simply via drag and drop&lt;/li&gt; &#xA; &lt;li&gt;Record single cycle changes into a new wavetable&lt;/li&gt; &#xA; &lt;li&gt;Oscillator pitch modulation and phase modulation with very fast modulations (up to ~ 2kHz)&lt;/li&gt; &#xA; &lt;li&gt;30 real-time wavetable effects per oscillator including innovative algorithms for hard sync, sincify, brew and bend / bloat&lt;/li&gt; &#xA; &lt;li&gt;Additive synthesis section that allows to freely edit all harmonics and phases in real-time&lt;/li&gt; &#xA; &lt;li&gt;FM synthesis up to a chain of 4 oscillators&lt;/li&gt; &#xA; &lt;li&gt;Sampler section (wav / aiff / ogg / mp3) with loop points, loop start modulation, zero crossing detection and key tracking&lt;/li&gt; &#xA; &lt;li&gt;Granular synthesis mode in the sampler section for stunning ambient effects&lt;/li&gt; &#xA; &lt;li&gt;Resample samples to wavetables with pitch detection&lt;/li&gt; &#xA; &lt;li&gt;Intelligent polyphonic portamento / glissando (you need to hear it!)&lt;/li&gt; &#xA; &lt;li&gt;Mono legato mode or polyphonic 4 / 16 voice modes&lt;/li&gt; &#xA; &lt;li&gt;Three effects busses including 4 x oversampling and mono cutoff to preserve a clean low end&lt;/li&gt; &#xA; &lt;li&gt;11+ highly parameterizable effects including reverb, delay, chorus, flanger, bitcrush, eq, compressor, limiter, flanger, phaser, comb filter, waveshaper and more&lt;/li&gt; &#xA; &lt;li&gt;All effect times and durations can be synced to DAW&lt;/li&gt; &#xA; &lt;li&gt;State of the art filter section (30+ different types) with 4 x oversampled LPF (biquad, state variable and diode ladder implementations) plus high pass, all pass, band pass, notch, shelf, comb and scream filters - all with resonance&lt;/li&gt; &#xA; &lt;li&gt;Very steep filter curves for punchy basses&lt;/li&gt; &#xA; &lt;li&gt;Real-time filter response display&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive modulation system with powerful modulation matrix including graphical display of modulation curves&lt;/li&gt; &#xA; &lt;li&gt;25 modulation sources including key track, random drift and four custom macro knobs&lt;/li&gt; &#xA; &lt;li&gt;220(!) modulation destinations (modulatable parameters) for almost unlimited modulation combinations&lt;/li&gt; &#xA; &lt;li&gt;Innovative audio routing system for all sound generators, filters and effect busses&lt;/li&gt; &#xA; &lt;li&gt;Five freely editable MSEG envelopes with loop function and DAW timecode sync&lt;/li&gt; &#xA; &lt;li&gt;Five LFOs (per voice - means up to 80 LFOs in total) with smooth generation optimized for lowest frequencies with ramp and phase that can be set per voice or global - can be synced to the DAW&lt;/li&gt; &#xA; &lt;li&gt;Built-in arpeggiator that is freely editable and supports polyphonic modes, hold and midi file drag and drop&lt;/li&gt; &#xA; &lt;li&gt;Three step sequencers that can be synced to the DAW&lt;/li&gt; &#xA; &lt;li&gt;All parameter knobs / sliders automatable and support manual editing for exact parameter values&lt;/li&gt; &#xA; &lt;li&gt;Support for MIDI Polyphonic Expression (MPE): receive MPE MIDI dimensions (X/Y/Z) pitchbend, aftertouch (freely assignable), release velocity / lift (controlled via MSEG) and brightness / timbre (freely assignable) form supported controllers for highly expressive control options&lt;/li&gt; &#xA; &lt;li&gt;State of the art preset management system with tags, free text search, file system folder management and ratings&lt;/li&gt; &#xA; &lt;li&gt;General setting of wavetable frequency characteristics: sharp (ideal filtering), soft (butterworth filtering), dull (linear)&lt;/li&gt; &#xA; &lt;li&gt;Comes with a daily growing number of presets – free regular updates on the website&lt;/li&gt; &#xA; &lt;li&gt;Includes 780+ wavetables and single cycles and 410+ factory presets&lt;/li&gt; &#xA; &lt;li&gt;Easy to use and intuitive user interface that is freely scalable and resizable even up to 4k and more with many drag and drop features and many graphical components, e.g. audio-out oscilloscope, filter response, MSEG / LFO / ARP&lt;/li&gt; &#xA; &lt;li&gt;Polyphonic real-time visualization of parameter modulations&lt;/li&gt; &#xA; &lt;li&gt;Four different UI themes to choose from&lt;/li&gt; &#xA; &lt;li&gt;Hotkeys for most important editor functions&lt;/li&gt; &#xA; &lt;li&gt;Plus: the sound is stunning!&lt;/li&gt; &#xA; &lt;li&gt;Available formats: VST2 / VST3 / AU / AAX plugins and a standalone version for both macOS and Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SYSTEM REQUIREMENTS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any CPU that supports AVX or SSE2 (Intel or AMD)&lt;/li&gt; &#xA; &lt;li&gt;1GB RAM&lt;/li&gt; &#xA; &lt;li&gt;Windows 8/10 (32/64bit)&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.10 or above&lt;/li&gt; &#xA; &lt;li&gt;VSTi / AU / AAX compatible Host software (32bit and 64bit).&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>