<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-25T01:30:54Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PlummersSoftwareLLC/NightDriverStrip</title>
    <updated>2023-05-25T01:30:54Z</updated>
    <id>tag:github.com,2023-05-25:/PlummersSoftwareLLC/NightDriverStrip</id>
    <link href="https://github.com/PlummersSoftwareLLC/NightDriverStrip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NightDriver client for ESP32&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NightDriverStrip&lt;/h1&gt; &#xA;&lt;p&gt;DEVELOPERS WANTED! We are searching for talented React and C++ developers to help out on this project. Check out the code and if you&#39;re interested, contact &lt;a href=&#34;mailto:davepl@davepl.com&#34;&gt;davepl@davepl.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/PlummersSoftwareLLC/NightDriverStrip/actions/workflows/CI.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- markdownlint-disable MD033 /no-inline-html --&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/assets/NightDriverLogo-small.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;!-- markdownlint-disable-next-line MD036 /no-emphasis-as-heading --&gt; &#xA;&lt;p&gt;&lt;em&gt;Davepl, 9/19/2021&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;http://github.com/PlummersSoftwareLLC/NightDriverStrip/discussions&#34;&gt;Discussions&lt;/a&gt; for questions and comments.&lt;/li&gt; &#xA; &lt;li&gt;See source code and &lt;a href=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/COPYING.txt&#34;&gt;COPYING.txt&lt;/a&gt; for detailed technical and licensing information including versions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What NightDriverStrip is&lt;/h2&gt; &#xA;&lt;p&gt;NightDriverStrip is a source code package for building a flash program that you upload to the &lt;a href=&#34;https://en.wikipedia.org/wiki/ESP32&#34;&gt;ESP32 microcontroller&lt;/a&gt;. It can drive up to 8 channels of WS2812B style LEDs connected to the chip pins and display fancy colors and patterns and designs on them. There are numerous effects built in that can be configured to be shown on the LED strip, including audio/music/beat-reactive effects for modules equipped with a microphone. It can also optionally receive color data for the LEDs in a simple LZ-compressed (or noncompressed) format over a TCP/IP socket that is opened by default on port 49152. The ESP32 keeps its clock in sync using NTP.&lt;/p&gt; &#xA;&lt;p&gt;More recently, a web installer has been added to the project with which most of the NightDriver projects can be flashed on supported devices, using nothing but a web browser. Please refer to the section called &lt;a href=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/#using-the-web-installer&#34;&gt;Using the Web Installer&lt;/a&gt; if this is how you&#39;d like to get started.&lt;/p&gt; &#xA;&lt;p&gt;To add new effects, you derive from &lt;code&gt;LEDStripEffect&lt;/code&gt; (or an existing effect class) and the good stuff happens in the only important function, &lt;code&gt;Draw()&lt;/code&gt;. Add your class to the effect list created in the &lt;code&gt;CreateDefaultEffects()&lt;/code&gt; function in &lt;code&gt;effects.cpp&lt;/code&gt; (under your build configuration section, like &lt;code&gt;DEMO&lt;/code&gt;). Check out what the built in effects do, but in short you&#39;re basically drawing into an array of CRGB objects that each represent a 24-bit color triplet. Once you&#39;re done, the CRGB array is sent to the LEDs and you are asked for the next frame immediately. Your draw method should take somewhere around 30ms, ideally, and should &lt;code&gt;delay()&lt;/code&gt; to sleep for the balance if it&#39;s quicker. You &lt;strong&gt;can&lt;/strong&gt; draw repeatedly basically in a busy loop, but its not needed.&lt;/p&gt; &#xA;&lt;p&gt;There is a global &lt;code&gt;EffectsManager&lt;/code&gt; instance that is passed and reads the effects table created in the &lt;code&gt;CreateDefaultEffects()&lt;/code&gt; function in &lt;code&gt;effect.cpp&lt;/code&gt; if the effect table has not yet been persised to JSON. It then rotates amongst those effects at a rate controlled by &lt;code&gt;DEFAULT_EFFECT_INTERVAL&lt;/code&gt;. Effects are not notified when they go active or not, they&#39;re just asked to draw when needed.&lt;/p&gt; &#xA;&lt;p&gt;Concerning JSON peristence: the effects table is persisted to a JSON file on SPIFFS at regular intervals, to retain the state of effects (and in fact the whole effect list) across reboots. This is largely in preparation for future updates to NightDriverStrip, where the configuration of individual effects can be changed using the device API, and eventually the device web application (see &lt;a href=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/#device-web-ui-and-api&#34;&gt;Device web UI and API&lt;/a&gt;, below.)&lt;/p&gt; &#xA;&lt;p&gt;This makes that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An override of &lt;code&gt;SerializeToJSON()&lt;/code&gt; and a corresponding deserializing constructor must be provided for effects that need (or want) to persist more than the friendly name and effect number. Those two properties are (de)serialized from/to JSON by &lt;code&gt;LEDStripEffect&lt;/code&gt; by default.&lt;/li&gt; &#xA; &lt;li&gt;The effect config JSON file needs to currenly be reset/cleared for a new effect to show on a device on which the effect list has already been persisted. This can be done by either clearing the SPIFFS partition using &lt;code&gt;esptool erase_flash&lt;/code&gt; or by using the &lt;a href=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/REST_API.md#reset-configuration-andor-device&#34;&gt;reset endpoint on the device API&lt;/a&gt;, with &lt;code&gt;effectsConfig&lt;/code&gt; and &lt;code&gt;board&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each channel of LEDs has an &lt;code&gt;LEDStripGfx&lt;/code&gt; instance associated with it. &lt;code&gt;_GFX[0]&lt;/code&gt; is the &lt;code&gt;LEDStripGfx&lt;/code&gt; associated with &lt;code&gt;LED_PIN0&lt;/code&gt;, and so on. You can get the LED buffer of Pin0 by calling &lt;code&gt;_GFX[0]-&amp;gt;leds()&lt;/code&gt;, and it will contain &lt;code&gt;_GFX[0]-&amp;gt;GetLEDCount&lt;/code&gt; pixels. You can draw into the buffer without ever touching the raw bytes by calling &lt;code&gt;fill_solid&lt;/code&gt;, &lt;code&gt;fill_rainbow&lt;/code&gt;, &lt;code&gt;setPixel&lt;/code&gt;, and other drawing functions.&lt;/p&gt; &#xA;&lt;p&gt;The simplest configuration, &lt;code&gt;DEMO&lt;/code&gt;, assumes you have a single meter strip of 144 LEDs and a power supply connected to your ESP32. It boots up, finds a single &lt;code&gt;PaletteEffect&lt;/code&gt; object in the &lt;code&gt;AllEffects&lt;/code&gt; table, and repeatedly calls its &lt;code&gt;Draw()&lt;/code&gt; method to update the CRGB array before sending it out to the LEDs. If working correctly it should draw a scrolling rainbow palette on your LED strip.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Web Installer&lt;/h2&gt; &#xA;&lt;p&gt;A web application has been made available that can be used to install the majority of NightDriver projects on supported devices. This will allow you to quickly flash a project on your ESP32 device, have it connect to WiFi and start using it without immediately having to work with the source code.&lt;/p&gt; &#xA;&lt;p&gt;Note that the installer requires a browser that supports Web Serial. At the time of writing, browsers that include such support are recent versions of Chrome, Edge and Opera.&lt;/p&gt; &#xA;&lt;p&gt;To use the installer, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect your device to your computer with a USB cable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the following URL in your browser: &lt;a href=&#34;https://plummerssoftwarellc.github.io/NightDriverStrip&#34;&gt;https://plummerssoftwarellc.github.io/NightDriverStrip&lt;/a&gt;. It should then show a screen that looks like this: &lt;img src=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/assets/installer-start.png&#34; alt=&#34;Installer start screen&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select your device (like &#34;M5StickC Plus&#34;) from the drop-down list. A second drop-down with supported projects on that device will then appear.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the project you want to flash in the second drop-down. When you do, a CONNECT button will appear below it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the CONNECT button. A dialog will apear asking you to select a serial port. Depending on your system, it may show only one or a list of them. In case multiple are shown, it&#39;ll generally be the one plainly called &#34;USB Serial Port (COMn)&#34;. Select the correct port and click Connect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A new dialog will show. One of the options it offers is &#34;INSTALL &amp;lt;project&amp;gt; FOR &amp;lt;device&amp;gt;&#34;. Click that option. You will be asked to confirm you want to flash the device. Click INSTALL.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A dialog will appear showing you the progress of the installation. Usually, this will take about 2 minutes. When flashing has completed, click NEXT.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your device supports WiFi, you will now be asked for the WiFi connection information. Select/enter your SSID and password. Click CONNECT. In some cases, the WiFi connection dialog appears again after a successful connection was actually made. In that case, click SKIP.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, a dialog will appear that will show the details of the project you flashed. It will also provide options to flash again, visit the device&#39;s web application, change the WiFi settings, and show the device&#39;s logs &amp;amp; console. Note that if you flashed a device image that includes a web application, it may take a minute or so to come up after the connection to the WiFi network has been made.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The images included in the installer are built using the current state of the source code in this repository. If there&#39;s anything you&#39;d like to change in (the configuration of) the project you want to use, then it is time to move to the next stage and start interacting with the source code itself.&lt;/p&gt; &#xA;&lt;h2&gt;Device web UI and API&lt;/h2&gt; &#xA;&lt;p&gt;On devices with WiFi, NightDriverStrip can start a webserver that hosts the web UI that is part of the project. It can be used to view and change what effect is running, and get live performance statistics of the device.&lt;/p&gt; &#xA;&lt;p&gt;When the device is started with the webserver enabled, the web UI can be accessed by opening a web browser and typing the IP address of your device in the address bar. Once loaded, the icons at the left of the screen can be used to toggle views within the UI on and off.&lt;/p&gt; &#xA;&lt;p&gt;More information about the web UI can be found &lt;a href=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/site/README.md&#34;&gt;in its own README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Besides the web UI, the webserver also publishes a REST-like API. More information about it is available in &lt;a href=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/REST_API.md&#34;&gt;REST_API.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started with the Source Code&lt;/h2&gt; &#xA;&lt;p&gt;I recommend you do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy include/secrets.example.h to include/secrets.h; Set your WiFi SSID and password in include/secrets.h.&lt;/li&gt; &#xA; &lt;li&gt;Build the source code. In particular, build the &lt;code&gt;DEMO&lt;/code&gt; configuration. Some pointers on what&#39;s needed to do this can be found &lt;a href=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/#build-pointers&#34;&gt;below&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Upload the resultant binary to the ESP32&lt;/li&gt; &#xA; &lt;li&gt;Connect PIN5 and GND and 5V of a WS2812B strip to the ESP32&lt;/li&gt; &#xA; &lt;li&gt;Provide an adequate power source for the LEDs and ESP32&lt;/li&gt; &#xA; &lt;li&gt;Enjoy the pretty lights&lt;/li&gt; &#xA; &lt;li&gt;Start enabling features in the &lt;code&gt;globals.h&lt;/code&gt; or platformio.ini file like WiFi and WebServer. See &lt;a href=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/#feature-defines&#34;&gt;Feature Defines&lt;/a&gt; below.&lt;/li&gt; &#xA; &lt;li&gt;Connect to the ESP32&#39;s web user interface with a browser to its IP address&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wifi Setup&lt;/h2&gt; &#xA;&lt;p&gt;Ensure your WiFi SSID and password are set in include/secrets.h.&lt;br&gt; Please do make sure you set them in include/secrets.h, NOT in include/secrets.example.h!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;enable WiFi by setting the ENABLE_WIFI define to 1 in globals.h&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#define ENABLE_WIFI 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be configured in the platformio.ini file, as described in the &lt;a href=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/#feature-defines&#34;&gt;Feature Defines&lt;/a&gt; section below.&lt;/p&gt; &#xA;&lt;h2&gt;File system&lt;/h2&gt; &#xA;&lt;p&gt;To build and upload the file system that is used by some effects (currently the &lt;a href=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/include/effects/matrix/PatternWeather.h&#34;&gt;Weather effect&lt;/a&gt; to be specific), you will need to build and upload the SPIFFS image to your board&#39;s flash using platformio. You can do this using the platformio user interface, or using the pio command line tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ShellConsole&#34;&gt;pio run --target buildfs --environment &amp;lt;project name&amp;gt;&#xA;pio run --target uploadfs --environment &amp;lt;project name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;p&gt;This repository includes a number of scrips to perform various tasks during or after building projects. They are included in the &lt;a href=&#34;https://raw.githubusercontent.com/PlummersSoftwareLLC/NightDriverStrip/main/tools&#34;&gt;&lt;code&gt;tools&lt;/code&gt;&lt;/a&gt; directory. Please note that the scripts expect to be started from the project&#39;s main directory. So, using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tools/buddybuild.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd tools&#xA;./buddybuild.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sample Parts (Plummer&#39;s Software LLC Amazon Affiliate Links)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BTF-Lighting WS2812B Strip, 144 pixels per meter, white: &lt;a href=&#34;https://amzn.to/3CtZW2g&#34;&gt;Amazon.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BTF-Lighting WS2812B Strip, 144 pixels per meter, black: &lt;a href=&#34;https://amzn.to/39ljqcO&#34;&gt;Amazon.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MakerFocus ESP32 Module with 8M Flash (not PSRAM) and built-in blue OLED: &lt;a href=&#34;https://amzn.to/3ApdF9H&#34;&gt;Amazon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;M5StickCPlus ESP32 Module with built-in LCD, Mic, buttons, battery, PSRAM, and more: &lt;a href=&#34;https://amzn.to/3CrvCFh&#34;&gt;Amazon.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;16x16 LED Matrix panels (3 per Spectrum Analyzer) &lt;a href=&#34;https://amzn.to/3ABs5DK&#34;&gt;Amazon.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Infinity Mirror for use with the MAGICMIRROR config: &lt;a href=&#34;https://amzn.to/3lEZo2D&#34;&gt;Amazon.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Super-handy breakout board for ESP32-DevKitC: &lt;a href=&#34;https://amzn.to/3nKX7Wt&#34;&gt;Amazon.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Full Disclosure: As an Amazon Associate, PlummersSoftwareLLC earns commission from qualifying purchases. It&#39;s not added to the purchase price, and does not increase your cost at all. Plus, all 2021 profits from the Dave&#39;s Garage Channel, which includes these sales, will go to the UW Autism Center.&lt;/p&gt; &#xA;&lt;h2&gt;Bonus Exercise&lt;/h2&gt; &#xA;&lt;p&gt;Write something simple to send color data to the socket. The format is very basic: which channel, how many LEDs you&#39;re drawing, when to draw it, and the color data itself. You can send uncompressed data with a zero timestamp as long as you send the correct header before your data, which is very simple. Data with a zero timestamp will just be drawn immediately with no buffering.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;BYTES&lt;/th&gt; &#xA;   &lt;th&gt;FUNCTION&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0, 1&lt;/td&gt; &#xA;   &lt;td&gt;CommandID&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;(Set it to 3, which is &lt;code&gt;WIFI_COMMAND_PIXELDATA64&lt;/code&gt;)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2, 3&lt;/td&gt; &#xA;   &lt;td&gt;ChannelID&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;(Set it to 1 for single channel, though 0 works too for historical reasons)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4 - 7&lt;/td&gt; &#xA;   &lt;td&gt;Length&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;(Number of 24-bit &lt;code&gt;PIXELS&lt;/code&gt; being set)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8 - 15&lt;/td&gt; &#xA;   &lt;td&gt;Seconds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;(Set it to 0)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16 - 24&lt;/td&gt; &#xA;   &lt;td&gt;Micros&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;(Set it to 0)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25+&lt;/td&gt; &#xA;   &lt;td&gt;RGB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;(24-bit RGB color data, one per &lt;code&gt;PIXEL&lt;/code&gt; specified in Length above)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If built with &lt;code&gt;ENABLE_WIFI&lt;/code&gt; and &lt;code&gt;INCOMING_WIFI_ENABLED&lt;/code&gt;, if the chip is able to get a WiFi connection and DHCP address it will open a socket on port 49152 and wait for packets formed as described above.&lt;/p&gt; &#xA;&lt;h2&gt;Super Bonus Exercise&lt;/h2&gt; &#xA;&lt;p&gt;Generate a series of 24 frames per second (or 30 if under 500 LEDs) and set the timestamp to &#34;Now&#34; plus 1/2 a second. Send them to the chip over WiFi and they will be drawn 1/2 second from now in a steady stream as the timestamps you gave each packet come due.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing, and the BlinkenPerBit Metric&lt;/h2&gt; &#xA;&lt;p&gt;Rather than produce a complex set of guidelines, here&#39;s what I hope open-source collaboration will bring to the project: that folks will add important features and fix defects and shortcomings in the code. When they&#39;re adding features, they&#39;ll do it in a way consistent with the way things are done in the existing code. They resist the urge to rearchitect and rewrite everything in their own image and instead put their efforts towards maximizing functional improvement while reducing source code thrash and change.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s consider the inconsistent naming, which should be fixed. Some is camelCase, some is pszHungarian, and so on, depending on the source. I&#39;d prefer it were all updated to a single standard TBD. Until the TBD is determined, I lean towards &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/stg/coding-style-conventions?redirectedfrom=MSDN&#34;&gt;the Win32 standard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When working in a function, work in the style of the function. When working on a class, work in the style of the class. When working on a file, work in the style of the file. If those are inconsistent, do whatever minimizes changes. Stylistic changes should only be introduced after discussion in the group, and generally should entain owning that style change across the entire project.&lt;/p&gt; &#xA;&lt;p&gt;Next, let&#39;s consider &lt;code&gt;#define&lt;/code&gt;s to control the build. There may be better and more elegant ways of doing things. There could be entire configuration platforms. But I&#39;d prefer to keep it simple. And I define simplest to be &#34;the least that an experienced C++ programmer needs to learn before being constructive with the code in question&#34;. I don&#39;t want to learn a new class library if I can avoid it!&lt;/p&gt; &#xA;&lt;p&gt;A lifetime of coding has taught me to err on the side of simplicity, so please don&#39;t introduce variadic template constructs unless they demonstrably shrink the source code. Anything that grows the complexity AND length of the code should be suspect.&lt;/p&gt; &#xA;&lt;p&gt;Add whatever you want and/or need to make your LED dreams come true. Fix my blunders. Fill in the obvious gaps in my knowledge. Whatever has the most blinken for the fewest bits get my vote. You only get so much additional cool blinken for every byte of code and program. That return is measured in BlinkenPerBit, the amount of blinking awesomeness the code adds divided by the impact on the source (and binary).&lt;/p&gt; &#xA;&lt;h2&gt;Build Pointers&lt;/h2&gt; &#xA;&lt;p&gt;The project can be built using &lt;a href=&#34;https://platformio.org/&#34;&gt;PlatformIO&lt;/a&gt;. There&#39;s a &lt;a href=&#34;https://platformio.org/platformio-ide&#34;&gt;PlatformIO IDE&lt;/a&gt; available, which is built on top of Visual Studio Code. Included in it are the command-line &lt;a href=&#34;https://platformio.org/install/cli&#34;&gt;PlatformIO Core&lt;/a&gt; tools. They can also be installed on their own if you prefer not using the IDE.&lt;/p&gt; &#xA;&lt;p&gt;When either the IDE or Core are installed, NightDriverStrip can be built from a command shell by entering the project/repository directory and issuing the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ShellConsole&#34;&gt;pio run -e demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the &lt;code&gt;demo&lt;/code&gt; config.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you get an error that &lt;code&gt;pio&lt;/code&gt; is not found, you might need to &lt;a href=&#34;https://docs.platformio.org/en/stable/core/installation/shell-commands.html&#34;&gt;add it to your path&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To build all available configurations, use the following command (this might take a while):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ShellConsole&#34;&gt;pio run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feature Defines&lt;/h2&gt; &#xA;&lt;p&gt;These defines enable the major features of NightDriverStrip. Define them in platformio.ini&#39;s build_flags or in globals.h. Note: Some defines are board specific, this is noted below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature Define&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_WIFI&lt;/td&gt; &#xA;   &lt;td&gt;Connect to WiFi&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;INCOMING_WIFI_ENABLED&lt;/td&gt; &#xA;   &lt;td&gt;Accepting incoming color data and commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_WEBSERVER&lt;/td&gt; &#xA;   &lt;td&gt;Turn on the internal webserver&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TIME_BEFORE_LOCAL&lt;/td&gt; &#xA;   &lt;td&gt;How many seconds before the lamp times out and shows local content&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_NTP&lt;/td&gt; &#xA;   &lt;td&gt;Set the clock from the web&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_OTA&lt;/td&gt; &#xA;   &lt;td&gt;Accept over the air flash updates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hardware Specific&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Supported Boards&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;USE_M5DISPLAY&lt;/td&gt; &#xA;   &lt;td&gt;Enable stats display on built in LCD&lt;/td&gt; &#xA;   &lt;td&gt;M5Stick-C and M5Stick-C Plus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;USE_OLED&lt;/td&gt; &#xA;   &lt;td&gt;Enable stats display on built in OLED&lt;/td&gt; &#xA;   &lt;td&gt;Heltec Wifi Kit 32&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;USE_LCD&lt;/td&gt; &#xA;   &lt;td&gt;Enable stats display on external ILI9341 LCD&lt;/td&gt; &#xA;   &lt;td&gt;Wrover32&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;USE_TFTSPI&lt;/td&gt; &#xA;   &lt;td&gt;Enable stats display on external TTGO LCD&lt;/td&gt; &#xA;   &lt;td&gt;esp32dev&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_AUDIO&lt;/td&gt; &#xA;   &lt;td&gt;Listen for audio from the microphone and process it&lt;/td&gt; &#xA;   &lt;td&gt;M5Stick-C and M5Stick-C Plus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_REMOTE&lt;/td&gt; &#xA;   &lt;td&gt;IR Remote Control&lt;/td&gt; &#xA;   &lt;td&gt;Requires IR Hardware&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;example in platformio.ini (prefix the flags with &lt;code&gt;-D&lt;/code&gt;, e.g. &lt;code&gt;ENABLE_WIFI=1&lt;/code&gt; becomes &lt;code&gt;-DENABLE_WIFI=1&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-INI&#34;&gt;build_flags = -DENABLE_WIFI=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;example in globals.h:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#define ENABLE_WIFI 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Time It Takes To Build This Project&lt;/h2&gt; &#xA;&lt;p&gt;Time to build the SPECTRUM config (&lt;code&gt;pio run -e spectrum&lt;/code&gt;). Assumes a clean build after everything has been installed and downloaded.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;AMD 3970 32-cores, 128GB, RAID SSD -&amp;gt; [davepl 09/19/2021] 12.93 seconds (Running Under WSL)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;AMD 5950X 16-cores, 64GB, SSD -&amp;gt; [davepl 09/19/2021] 16.90 seconds&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Apple MacBook Pro M1 MAX, 8+2 cores, 64GB, 4TB SSD -&amp;gt; [davepl 12/15/2021] 20.90 seconds&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Apple MacBook Air M2, 16GB, 256GB SSD -&amp;gt; [vaaski 02/28/2023] 56.17 seconds&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MacBook Pro 2020, 8 Cores 2.4GHz i9, 64GB, 4TB SSD -&amp;gt; [davepl 09/19/2021] 34.09 seconds&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mac Mini, 4 Perf cores, 16GB -&amp;gt; [davepl 09/19/2021] 39.06 seconds&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mac Pro, 6 cores, 3.5 GHz, 64GB, 1TB SSD -&amp;gt; [davepl 09/19/2021] 48.42 seconds&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Xeon Silver, 20 cores, 2.1GHz, 16GB VM -&amp;gt; [davepl 10/10/2022] 53.11 seconds&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Raspberry Pi 4, 64-bit Ubuntu LTS, 4 core, 4GB -&amp;gt; [davepl 09/23/2021] 6 min 25 seconds&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Jetson Nano 2G, 4 Core ARM A57 -&amp;gt; [davepl 10/04/2021] 2 min 56 seconds&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ByConity/ByConity</title>
    <updated>2023-05-25T01:30:54Z</updated>
    <id>tag:github.com,2023-05-25:/ByConity/ByConity</id>
    <link href="https://github.com/ByConity/ByConity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ByConity is an open source cloud-native data warehouse&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ByConity&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ByConity/ByConity/master/ByConity-architecture.png&#34; alt=&#34;ByConity-architecture&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;ByConity is a data warehouse designed for changes in modern cloud architecture. It adopts a cloud-native architecture design to meet the requirements of data warehouse users for flexible scaling, separation of reads and writes, resource isolation, and strong data consistency. At the same time, it provides excellent query and write performance.&lt;/p&gt; &#xA;&lt;p&gt;ByConity is using a large number of mature OLAP technologies, such as column storage engine, MPP execution, intelligent query optimization, vectorized execution, Codegen, indexing, and data compression; it also makes special technological innovations for the cloud scenarios and storage-computing separation architecture.&lt;/p&gt; &#xA;&lt;p&gt;ByConity is built on top of &lt;a href=&#34;https://github.com/ClickHouse/ClickHouse&#34;&gt;ClickHouse&lt;/a&gt;. We appreciate the excellent work of the ClickHouse team.&lt;/p&gt; &#xA;&lt;h2&gt;Try ByConity&lt;/h2&gt; &#xA;&lt;p&gt;You can quickly bring up a ByConity playground by following this simple &lt;a href=&#34;https://github.com/ByConity/byconity-docker&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A minimal ByConity cluster include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://www.foundationdb.org/&#34;&gt;FoundationDB&lt;/a&gt; database cluster to store meta data.&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://hadoop.apache.org/docs/r1.2.1/hdfs_design.html&#34;&gt;HDFS&lt;/a&gt; cluster to store data.&lt;/li&gt; &#xA; &lt;li&gt;A ByConity server to receive request from clients.&lt;/li&gt; &#xA; &lt;li&gt;A ByConity read worker to carry execution of read requests forward from server.&lt;/li&gt; &#xA; &lt;li&gt;A ByConity write worker to carry execution of write requests forward from server.&lt;/li&gt; &#xA; &lt;li&gt;A ByConity TSO server to provide timestamp.&lt;/li&gt; &#xA; &lt;li&gt;A ByConity daemon manager to manage background jobs that run in server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build ByConity&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to build ByConity is built in &lt;a href=&#34;https://github.com/ByConity/ByConity/tree/master/docker/builder&#34;&gt;docker&lt;/a&gt;. ByConity executable file depend on Foundation DB library &lt;code&gt;libfdb_c.so&lt;/code&gt;. So in order to run it, we need to install the FoundationDB client package. This &lt;a href=&#34;https://apple.github.io/foundationdb/getting-started-linux.html&#34;&gt;link&lt;/a&gt; tells how to install. We can download client package from FoundationDB GitHub release pages, for example &lt;a href=&#34;https://github.com/apple/foundationdb/releases/tag/7.1.0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It can also be built through the following operating systems in physical machine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1. Prepare Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;The following packages are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.17 or newer&lt;/li&gt; &#xA; &lt;li&gt;Ninja&lt;/li&gt; &#xA; &lt;li&gt;C++ compiler: clang-11 or clang-12&lt;/li&gt; &#xA; &lt;li&gt;Linker: lld&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get update&#xA;sudo apt-get install git cmake ccache python3 ninja-build libssl-dev libsnappy-dev apt-transport-https&#xA;&#xA;# install llvm 12&#xA;sudo apt install lsb-release wget software-properties-common gnupg # pre-requisites of llvm.sh&#xA;wget https://apt.llvm.org/llvm.sh&#xA;chmod +x llvm.sh&#xA;sudo ./llvm.sh 12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Checkout Source Code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recursive https://github.com/ByConity/ByConity.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ByConity&#xA;mkdir build &amp;amp;&amp;amp; cd build&#xA;export CC=clang-12&#xA;export CXX=clang++-12&#xA;cmake ..&#xA;ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can find the binary in the programs folder&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;clickhouse-client    # byconity client&#xA;clickhouse-server    # byconity server&#xA;clickhouse-worker    # byconity worker&#xA;tso_server           # byconity tso&#xA;daemon_manager       # byconity daemon manager&#xA;resource_manager     # byconity resource manager&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run ByConity Locally&lt;/h2&gt; &#xA;&lt;p&gt;The most convinience way for local development is to use &lt;code&gt;docker-compose&lt;/code&gt;. You can use &lt;code&gt;docker-compose&lt;/code&gt; to quickly create a &lt;a href=&#34;https://raw.githubusercontent.com/ByConity/ByConity/master/docker/local-deploy/README.md&#34;&gt;byconity cluster&lt;/a&gt; from your local build binary. By using this approach, you do not need to worry about the setup of ByConity dependencies (FoundationDB and HDFS), it automatically launches them all. It is recommended to use this approach for ByConity development.&lt;/p&gt; &#xA;&lt;h2&gt;Deploy ByConity in cluster&lt;/h2&gt; &#xA;&lt;p&gt;There are ways to deploy ByConity to physical machines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Deploy using &lt;a href=&#34;https://byconity.github.io/docs/deployment/package-deployment&#34;&gt;package manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deploy via docker &lt;a href=&#34;https://byconity.github.io/docs/deployment/docker-wrapper&#34;&gt;wrapper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Test ByConity in development enviroment&lt;/h2&gt; &#xA;&lt;p&gt;To test ByConity in development enviroment, follow this &lt;a href=&#34;https://github.com/ByConity/ByConity/tree/master/Testing.md&#34;&gt;guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://discord.gg/V4BvTWGEQJ&#34;&gt;Discord server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow up on &lt;a href=&#34;https://twitter.com/ByConity&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to our &lt;a href=&#34;https://www.youtube.com/@ByConity/featured&#34;&gt;Youtube Channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>