<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-30T01:31:57Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kripken/ammo.js</title>
    <updated>2022-12-30T01:31:57Z</updated>
    <id>tag:github.com,2022-12-30:/kripken/ammo.js</id>
    <link href="https://github.com/kripken/ammo.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Direct port of the Bullet physics engine to JavaScript using Emscripten&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ammo.js&lt;/h1&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rawcdn.githack.com/kripken/ammo.js/99d0ec0b1e26d7ccc13e013caba8e8a5c98d953b/examples/webgl_demo/ammo.html&#34;&gt;Cubes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rawcdn.githack.com/kripken/ammo.js/99d0ec0b1e26d7ccc13e013caba8e8a5c98d953b/examples/webgl_demo/ammo.wasm.html&#34;&gt;Cubes (WebAssembly)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rawcdn.githack.com/kripken/ammo.js/99d0ec0b1e26d7ccc13e013caba8e8a5c98d953b/examples/webgl_demo_softbody_rope/index.html&#34;&gt;SoftBody-Rope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rawcdn.githack.com/kripken/ammo.js/99d0ec0b1e26d7ccc13e013caba8e8a5c98d953b/examples/webgl_demo_softbody_cloth/index.html&#34;&gt;SoftBody-Cloth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rawcdn.githack.com/kripken/ammo.js/99d0ec0b1e26d7ccc13e013caba8e8a5c98d953b/examples/webgl_demo_softbody_volume/index.html&#34;&gt;SoftBody-Volume&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rawcdn.githack.com/kripken/ammo.js/99d0ec0b1e26d7ccc13e013caba8e8a5c98d953b/examples/webgl_demo_terrain/index.html&#34;&gt;Heightmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rawcdn.githack.com/kripken/ammo.js/99d0ec0b1e26d7ccc13e013caba8e8a5c98d953b/examples/webgl_demo_vehicle/index.html&#34;&gt;Vehicle&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example code to give you an idea of the API&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kripken/ammo.js/raw/master/examples/webgl_demo/worker.js#L6&#34;&gt;https://github.com/kripken/ammo.js/blob/master/examples/webgl_demo/worker.js#L6&lt;/a&gt; which interacts with &lt;a href=&#34;https://github.com/kripken/ammo.js/raw/master/examples/webgl_demo/ammo.html#L14&#34;&gt;https://github.com/kripken/ammo.js/blob/master/examples/webgl_demo/ammo.html#L14&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ammo.js is a direct port of the &lt;a href=&#34;http://bulletphysics.org/&#34;&gt;Bullet physics engine&lt;/a&gt; to JavaScript, using Emscripten. The source code is translated directly to JavaScript, without human rewriting, so functionality should be identical to the original Bullet.&lt;/p&gt; &#xA;&lt;p&gt;&#39;ammo&#39; stands for &#34;Avoided Making My Own js physics engine by compiling bullet from C++&#34; ;)&lt;/p&gt; &#xA;&lt;p&gt;ammo.js is zlib licensed, just like Bullet.&lt;/p&gt; &#xA;&lt;p&gt;Discussion takes place on IRC at #emscripten on Mozilla&#39;s server (irc.mozilla.org)&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;builds/ammo.js&lt;/code&gt; contains a prebuilt version of ammo.js. This is probably what you want.&lt;/p&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/kripken/ammo.js/main/#building&#34;&gt;build&lt;/a&gt; ammo.js yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The most straightforward thing is if you want to write your code in C++, and run that on the web. If so, then you can build your C++ code with emscripten normally and either build and link Bullet using&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://emscripten.org/docs/compiling/Building-Projects.html&#34;&gt;https://emscripten.org/docs/compiling/Building-Projects.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;or you can use Bullet directly from emscripten-ports, with &lt;code&gt;-s USE_BULLET=1&lt;/code&gt;. In both cases, you don&#39;t need ammo.js, just plain Bullet.&lt;/p&gt; &#xA;&lt;p&gt;If, on the other hand, you want to write code in JavaScript, you can use the autogenerated binding code in ammo.js. A complete example appears in&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;examples/hello_world.js&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;That is HelloWorld.cpp from Bullet, translated to JavaScript. Other examples in that directory might be useful as well. In particular see the WebGL demo code in&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;examples/webgl_demo/ammo.html&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bindings API&lt;/h2&gt; &#xA;&lt;p&gt;ammo.js autogenerates its API from the Bullet source code, so it should be basically identical. There are however some differences and things to be aware of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://github.com/kripken/emscripten/wiki/WebIDL-Binder&#34;&gt;https://github.com/kripken/emscripten/wiki/WebIDL-Binder&lt;/a&gt; for a description of the bindings tool we use here, which includes instructions for how to use the wrapped objects.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All ammo.js elements should be accessed through &lt;code&gt;Ammo.*&lt;/code&gt;. For example, &lt;code&gt;Ammo.btVector3&lt;/code&gt;, etc., as you can see in the example code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Member variables of structs and classes can be accessed through setter and getter functions, that are prefixed with &lt;code&gt;|get_|&lt;/code&gt; or &lt;code&gt;|set_|&lt;/code&gt;. For example,&lt;/p&gt; &lt;p&gt;&lt;code&gt;rayCallback.get_m_rayToWorld()&lt;/code&gt;&lt;/p&gt; &lt;p&gt;will get &lt;code&gt;m_rayToWorld&lt;/code&gt; from say a &lt;code&gt;ClosestRayResultCallback&lt;/code&gt;. Native JavaScript getters and setters could give a slightly nicer API here, however their performance is potentially problematic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Functions returning or getting &lt;code&gt;float&amp;amp;&lt;/code&gt; or &lt;code&gt;btScalar&amp;amp;&lt;/code&gt; are converted to float. The reason is that &lt;code&gt;float&amp;amp;&lt;/code&gt; is basically &lt;code&gt;float*&lt;/code&gt; with nicer syntax in C++, but from JavaScript you would need to write to the heap every time you call such a function, making usage very ugly. With this change, you can do &lt;code&gt;|new btVector3(5, 6, 7)|&lt;/code&gt; and it will work as expected. If you find a case where you need the float&amp;amp; method, please file an issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Not all classes are exposed, as only what is described in ammo.idl is wrapped. Please submit pull requests with extra stuff that you need and add.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is experimental support for binding operator functions. The following might work:&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Operator&lt;/th&gt; &#xA;     &lt;th&gt;Name in JS&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;op_set&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;op_add&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;op_sub&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;op_mul&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;op_div&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;op_get&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt; &#xA;     &lt;td&gt;&lt;code&gt;op_eq&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;In order to build ammo.js yourself, you will need &lt;a href=&#34;http://emscripten.org&#34;&gt;Emscripten&lt;/a&gt; and &lt;a href=&#34;https://cmake.org/download&#34;&gt;cmake&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information about setting up Emscripten, see the &lt;a href=&#34;https://emscripten.org/docs/getting_started&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To configure and build ammo into the &lt;code&gt;builds&lt;/code&gt; directory, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake -B builds&#xA;$ cmake --build builds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also some key options that can be specified during cmake configuration, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake -B builds -DCLOSURE=1                # compile with closure&#xA;$ cmake -B builds -DTOTAL_MEMORY=268435456   # allocate a 256MB heap&#xA;$ cmake -B builds -DALLOW_MEMORY_GROWTH=1    # enable a resizable heap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On windows, you can build using cmake&#39;s &lt;a href=&#34;https://chocolatey.org/packages/mingw&#34;&gt;mingw&lt;/a&gt; generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;&amp;gt; cmake -B builds -G &#39;MinGW Makefiles&#39;&#xA;&amp;gt; cmake --build builds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you have not installed emscripten via the emsdk, you can configure its location with &lt;code&gt;-DEMSCRIPTEN_ROOT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building using Docker&lt;/h3&gt; &#xA;&lt;p&gt;ammo.js can also be built with &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt;. This offers many advantages (keeping its native environment clean, portability, etc.). To do this, you just have to install Docker and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose build        # to create the Docker image&#xA;$ docker-compose up           # to create the Docker container and build ammo.js&#xA;$ docker-compose run builder  # to build again the ammojs targets after any modification&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to add arguments to cmake, you have to edit the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Reducing Build Size&lt;/h2&gt; &#xA;&lt;p&gt;The size of the ammo.js builds can be reduced in several ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Removing uneeded interfaces from ammo.idl. Some good examples of this are &lt;code&gt;btIDebugDraw&lt;/code&gt; and &lt;code&gt;DebugDrawer&lt;/code&gt;, which are both only needed if visual debug rendering is desired.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Removing methods from the &lt;code&gt;-s EXPORTED_RUNTIME_METHODS=[]&lt;/code&gt; argument in make.py. For example, &lt;code&gt;UTF8ToString&lt;/code&gt; is only needed if printable error messages are desired from &lt;code&gt;DebugDrawer&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;You can run the automatic tests with &lt;code&gt;npm test&lt;/code&gt;, which in turn will run &lt;a href=&#34;https://github.com/avajs/ava&#34;&gt;ava&lt;/a&gt; against both the javascript and WebAssembly builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm run test-js      # --&amp;gt; AMMO_PATH=builds/ammo.js ava&#xA;$ npm run test-wasm    # --&amp;gt; AMMO_PATH=builds/ammo.wasm.js ava&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to run ava directly for more options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npx ava --verbose&#xA;$ npx ava --node-arguments inspect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When no &lt;code&gt;AMMO_PATH&lt;/code&gt; is defined, &lt;code&gt;builds/ammo.js&lt;/code&gt; is tested by default.&lt;/p&gt; &#xA;&lt;h2&gt;Running the Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/http-party/http-server&#34;&gt;http-server&lt;/a&gt; is included as a dev dependency as an easy way to run the examples. Make sure to serve everything from the repo root so that the examples can find ammo in the &lt;code&gt;builds&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npx http-server -p 3000 .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s easy to forget to write |new| when creating an object, for example&lt;/p&gt; &lt;p&gt;&lt;code&gt;var vec = Ammo.btVector3(1,2,3); // This is wrong! Need &#39;new&#39;!&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This can lead to error messages like the following:&lt;/p&gt; &lt;p&gt;&lt;code&gt;Cannot read property &#39;a&#39; of undefined&lt;/code&gt; &lt;code&gt;Cannot read property &#39;ptr&#39; of undefined&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This is an annoying aspect of JavaScript, sadly.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you find a bug in ammo.js and file an issue, please include a script that reproduces the problem. That way it is easier to debug, and we can then include that script in our automatic tests.&lt;/p&gt; &#xA;&lt;h2&gt;Release Process&lt;/h2&gt; &#xA;&lt;p&gt;Pushing a new build in &lt;code&gt;builds/ammo.js&lt;/code&gt; should be done only after the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure with &lt;a href=&#34;https://github.com/google/closure-compiler&#34;&gt;closure&lt;/a&gt; enabled: &lt;code&gt;cmake -B builds -DCLOSURE=1&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build both the asm.js and wasm libraries: &lt;code&gt;cmake --build builds&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure they pass all automatic tests: &lt;code&gt;npm test&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the WebGL demo in examples/webgl_demo and make sure it looks ok, using something like &lt;code&gt;firefox examples/webgl_demo/ammo.html&lt;/code&gt; (chrome will need a webserver as it doesn&#39;t like file:// urls)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Upstream Version&lt;/h2&gt; &#xA;&lt;p&gt;Bullet 2.82 patched with &lt;a href=&#34;https://github.com/bulletphysics/bullet3/commit/7151865c16ba996996206e1fd7869cbb1e7edd8d&#34;&gt;raycast fix from 2.83&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wuspy/portal_calendar</title>
    <updated>2022-12-30T01:31:57Z</updated>
    <id>tag:github.com,2022-12-30:/wuspy/portal_calendar</id>
    <link href="https://github.com/wuspy/portal_calendar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Portal themed e-ink calendar based on the ESP32 platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Portal Calendar&lt;/h1&gt; &#xA;&lt;p&gt;An ESP32 based, Portal themed e-ink calendar that can run on AAA batteries for years, with optional weather integration through OpenWeatherMap.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/#bill-of-materials&#34;&gt;Bill of Materials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/#assembly&#34;&gt;Assembly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/#firmware&#34;&gt;Firmware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/#more-info&#34;&gt;More Info&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/#timekeeping&#34;&gt;Timekeeping&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/#graphics&#34;&gt;Graphics&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project was inspired by Reddit user u/feefifofeddit who made &lt;a href=&#34;https://www.reddit.com/r/RASPBERRY_PI_PROJECTS/comments/qujt3i/wip_portal_desktop_calendar/&#34;&gt;a prototype of a Raspberry Pi-powered Portal calendar&lt;/a&gt;. Unfortunately the display they used has been discontinued, and I wanted a battery powered and wall mountable version, so I designed my own based on the ESP32 platform with the goal of being as low-power and game accurate as possible.&lt;/p&gt; &#xA;&lt;p&gt;By default, chamber hazard icons from both Portal and Portal 2 are shown below the current date. Portal icons are shown for day 1 through 16, while Portal 2 icons are shown for day 17 through 31.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/images/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;With the weather feature enabled, the chamber hazard icons are replace by either a 5-day or 12-hour weather forecast provided by OpenWeatherMap that shows the average weather condition, the high &amp;amp; low temperatures, the chance of rain, or the humidity, at your preference.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/images/2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The weather icons are based on the designs by Lukas Bischoff and Erik Flowers, available &lt;a href=&#34;https://github.com/erikflowers/weather-icons/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Bill of Materials&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Waveshare 7.5&#34; 800x480 E-Ink display&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Available &lt;a href=&#34;https://www.waveshare.com/product/displays/e-paper/epaper-1/7.5inch-e-paper-hat.htm&#34;&gt;directly from Waveshare&lt;/a&gt; or &lt;a href=&#34;https://www.amazon.com/gp/product/B075R4QY3L&#34;&gt;from Amazon&lt;/a&gt;. The display itself is the Good Display GDEW075T7, Waveshare just resells it and gives you a breakout board.&lt;/p&gt; &lt;p&gt;Make sure you buy the bare display with breakout board. Don&#39;t buy the one preinstalled in a case. Don&#39;t buy the Black/White/Red version of this display either, just the standard Black/White one.&lt;/p&gt; &lt;p&gt;This display is intended only for 2-color greyscale (full black or full white, with no grey levels). However, this code does some hacks to it to make it support 4-color greyscale for better antialiasing. I didn&#39;t invent this technique, the &lt;a href=&#34;https://github.com/ZinggJM/GxEPD2_4G&#34;&gt;GxEPD2&lt;/a&gt; project among others does the same thing. The downside of doing this, however, is that results can vary from display to display. The greyscale levels may not look as good on your particular display as they do on mine. I&#39;ve tried to design the graphics with that in mind so that the grey level isn&#39;t critical to get things to look good, but I&#39;ve only tried this on one display, and I can&#39;t guarantee yours will look perfect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;EzSBC ESP32 breakout board&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Available &lt;a href=&#34;https://www.ezsbc.com/product/esp32-breakout-and-development-board/&#34;&gt;here&lt;/a&gt;. This will run on any ESP32, but this particular board is perfect for alkaline battery power due to its efficient voltage regulator and flexible input voltage. If you use a different board, you will need to modify the case and come up with your own power solution.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;4xAAA battery holder&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Pretty much all of them will work. &lt;a href=&#34;https://www.pololu.com/product/1145/specs&#34;&gt;This is a good one&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;9x M3x8 cap head screws&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Assembly&lt;/h1&gt; &#xA;&lt;p&gt;This project requires soldering, I&#39;m sorry. Unfortunately I didn&#39;t take many pictures during the assembly of mine but it should be fairly straightforward how things go together.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Print &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/frame/front.stl&#34;&gt;front.stl&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/frame/back.stl&#34;&gt;back.stl&lt;/a&gt;. Once those are done you can start putting things together, and get &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/frame/cover.stl&#34;&gt;cover.stl&lt;/a&gt; printing while you work. Print with a &lt;strong&gt;0.2mm layer height&lt;/strong&gt;, other than that print settings really don&#39;t matter that much.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove the protective film on the front of the e-ink display if it has one (there should be a red or green tab in one corner you can pull).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Insert the display into &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/frame/front.stl&#34;&gt;front.stl&lt;/a&gt;, oriented so the ribbon cable goes into slot on the side. The easiest way to do this is to gently pre-bend the ribbon cable, then slide the display in from the opposite side.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/images/display.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;p&gt;This should go without saying, but the display and the ribbon cable connection are very fragile. Here&#39;s a close-up of how the ribbon cable should seat in the slot&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/images/ribboncable.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;p&gt;Once it&#39;s inserted, make sure the display is sitting flat and that the edges of the display are flush with the ledges on the top and bottom.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Insert &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/frame/back.stl&#34;&gt;back.stl&lt;/a&gt; on top of the display, flat side down, being careful that the ribbon cable doesn&#39;t get snagged when sliding in the slot on the side.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/images/back.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;p&gt;The back cover should be flush with the edges of the front cover. If it&#39;s not, the display may not be seated correctly in the front cover. Don&#39;t try to force it, remove the back cover and re-seat the display.&lt;/p&gt; &lt;p&gt;Once the back cover is installed, you can secure it with an &lt;strong&gt;M3x8&lt;/strong&gt; screw in each corner.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Insert the e-Paper Driver HAT into the slot by the ribbon cable and clip the ribbon cable into the connector. Make sure you get it fully seated in the connector, and &lt;strong&gt;make sure to latch it closed&lt;/strong&gt;, otherwise the display may not work when you try to power it on. Also, make sure the &lt;strong&gt;Display Config&lt;/strong&gt; switch is in the &lt;strong&gt;B&lt;/strong&gt; position, and the &lt;strong&gt;Interface Config&lt;/strong&gt; switch is in the &lt;strong&gt;0&lt;/strong&gt; position.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now the fun part begins, cutting wires to length and soldering them to the ESP32. Note the colors listed below are the ones used in the wiring harness I got, yours is probably the same but it may be different if Waveshare changed it.&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;e-Paper HAT&lt;/th&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;     &lt;th&gt;ESP32&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;VCC (Grey)&lt;/td&gt; &#xA;     &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;     &lt;td&gt;3.3v&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;GND (Brown)&lt;/td&gt; &#xA;     &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;     &lt;td&gt;GND&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;DIN (Blue)&lt;/td&gt; &#xA;     &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;     &lt;td&gt;IO13&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;CLK (Yellow)&lt;/td&gt; &#xA;     &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;     &lt;td&gt;IO14&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;CS (Orange)&lt;/td&gt; &#xA;     &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;     &lt;td&gt;IO15&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;DC (Green)&lt;/td&gt; &#xA;     &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;     &lt;td&gt;IO23&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;RST (White)&lt;/td&gt; &#xA;     &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;     &lt;td&gt;IO33&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;BUSY (Purple)&lt;/td&gt; &#xA;     &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;     &lt;td&gt;IO27&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/images/back2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Glue in the battery holder (I used JB weld plastic bonder), and solder the red and black wires to the &lt;strong&gt;Vin&lt;/strong&gt; and &lt;strong&gt;GND&lt;/strong&gt; pins on the ESP32.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure all the wires are inside the recess on the back cover so they aren&#39;t pinched, and make sure the ESP32 is seated in its recess. Then you can install &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/frame/cover.stl&#34;&gt;cover.stl&lt;/a&gt; and secure it with an &lt;strong&gt;M3x8&lt;/strong&gt; screw in each corner, and one in the center above the battery holder.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/images/cover.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;p&gt;There&#39;s no point in putting the batteries in yet since the ESP32 still needs to be programmed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Firmware&lt;/h1&gt; &#xA;&lt;p&gt;Read through &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/config.h&#34;&gt;config.h&lt;/a&gt; and fill out the required values. At a minimum, you need to fill out &lt;code&gt;WIFI_NAME&lt;/code&gt;, &lt;code&gt;WIFI_PASS&lt;/code&gt;, and &lt;code&gt;TIME_ZONE&lt;/code&gt;. A WiFi connection is required to keep the ESP32&#39;s internal clock synchronized, and to get weather information from OpenWeatherMap if you have that enabled.&lt;/p&gt; &#xA;&lt;p&gt;The firmware can be built and flashed with the Arduino IDE once you&#39;ve installed the esp32 boards package. Go to &lt;code&gt;Tools -&amp;gt; Boards -&amp;gt; Boards Manager...&lt;/code&gt; and search for &#39;esp32&#39;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/images/arduino1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, select &lt;code&gt;ESP32 Dev Module&lt;/code&gt; for your board.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/images/arduino2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once that&#39;s selected you&#39;ll see a bunch of other options show up in the Tools menu.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/images/arduino3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The defaults &lt;em&gt;should&lt;/em&gt; already be what you want, but make sure they match these settings.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU Frequency&lt;/td&gt; &#xA;   &lt;td&gt;240 Mhz (WiFi/BT)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Core Debug Level&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Events Run On&lt;/td&gt; &#xA;   &lt;td&gt;Core 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flash Frequency&lt;/td&gt; &#xA;   &lt;td&gt;80Mhz&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flash Mode&lt;/td&gt; &#xA;   &lt;td&gt;QIO&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flash Size&lt;/td&gt; &#xA;   &lt;td&gt;4MB (32Mb)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arduino Runs On&lt;/td&gt; &#xA;   &lt;td&gt;Core 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Partition Scheme&lt;/td&gt; &#xA;   &lt;td&gt;Default 4MB with spiffs (1.2MB APP/1.5MB SPIFFS)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PSRAM&lt;/td&gt; &#xA;   &lt;td&gt;Disabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Upload Speed&lt;/td&gt; &#xA;   &lt;td&gt;921600&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Now you can just flash it like any other arduino.&lt;/p&gt; &#xA;&lt;h1&gt;More Info&lt;/h1&gt; &#xA;&lt;h2&gt;Timekeeping&lt;/h2&gt; &#xA;&lt;p&gt;The internal clock in the ESP32 is very inaccurate with a specified inaccuracy of 5%, which corresponds to 72 minutes per day. This is obviously useless for long-term timekeeping so an external clock is required. One solution would be to use an RTC module like a DS3231, but that still requires an external time source for initialization. Given that, I decided to just ditch that extra cost and require a WiFi connection for daily NTP time syncing, which would be required for OpenWeatherMap anyway if you decide to use it. The default NTP servers are &lt;code&gt;pool.ntp.org&lt;/code&gt; and &lt;code&gt;time.google.com&lt;/code&gt;, and can be changed in config.h if you want.&lt;/p&gt; &#xA;&lt;p&gt;The WiFi connection is also used to lookup information for the timezone you provide, using the &lt;code&gt;timezoned.rop.nl&lt;/code&gt; service from the &lt;a href=&#34;https://github.com/ropg/ezTime&#34;&gt;ezTime project&lt;/a&gt;. Timezoned is a relatively small service maintained by one person, so it does introduce a failure point if it ever goes down. If that&#39;s something you&#39;re worried about you have a couple options&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Host your own timezoned service. The source code is available in the ezTime repository.&lt;/li&gt; &#xA; &lt;li&gt;Provide a POSIX timezone instead of a timezone name, as explained in config.h.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Graphics&lt;/h2&gt; &#xA;&lt;p&gt;Like I mentioned in the &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/#bill-of-materials&#34;&gt;Bill of Materials&lt;/a&gt; section, I&#39;m doing some hacky stuff with the e-ink display to get it to support 4-color greyscale, both for antaialising and so the inactive chamber icons look better. The specifics on how all this works are outside the scope of this readme, but if you&#39;d like to learn the basics of how e-ink displays work I recommend watching &lt;a href=&#34;https://youtu.be/MsbiO8EAsGw&#34;&gt;Applied Science&#39;s video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A consequence of this is that I&#39;ve had to write my own simple 2-bit drawing library for this project, since &lt;a href=&#34;https://github.com/adafruit/Adafruit-GFX-Library&#34;&gt;Adafruit GFX&lt;/a&gt; doesn&#39;t support that and I don&#39;t know of any other libraries that do. The low-level code for drawing to the display is located in &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/DisplayGDEW075T7.cpp&#34;&gt;DisplayGDEW075T7.cpp&lt;/a&gt;, which includes low-level drawing commands like &lt;code&gt;setPx&lt;/code&gt;, &lt;code&gt;drawVLine&lt;/code&gt;, &lt;code&gt;drawHLine&lt;/code&gt;, &lt;code&gt;fillRect&lt;/code&gt;, and &lt;code&gt;strokeRect&lt;/code&gt;, but also more advanced commands like &lt;code&gt;drawImage&lt;/code&gt;, &lt;code&gt;drawText&lt;/code&gt;, and &lt;code&gt;drawMultilineText&lt;/code&gt;, which I&#39;d like to explain a bit further in case you want to modify the icons or fonts used in this project.&lt;/p&gt; &#xA;&lt;p&gt;All of the bitmap and font resources are in the &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/resource&#34;&gt;resource&lt;/a&gt; directory, which can be compiled to C header files using &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/resource/build_image.py&#34;&gt;build_image.py&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/resource/build_font.py&#34;&gt;build_font.py&lt;/a&gt; respectively. I chose to simply compile resources to C code that can be embedded into the firmware instead of loading them from the ESP32&#39;s SPIFFS because it greatly simplifies the flashing process.&lt;/p&gt; &#xA;&lt;p&gt;The build_image.py script can take in any image format supported by PIL and will output a C header file of the same name that can be included and drawn to the display. All of the images used in this project are inclued in this repo both as the original GIF images and the compiled C header files.&lt;/p&gt; &#xA;&lt;p&gt;The build_font.py script will take in TrueType or OpenType fonts and output a bitmap font rendered at the specified size to a C header file. Look at &lt;a href=&#34;https://raw.githubusercontent.com/wuspy/portal_calendar/master/resource/build_fonts.sh&#34;&gt;build_fonts.sh&lt;/a&gt; for usage examples. Unlike for the images, I haven&#39;t included the source fonts in this repository because they are the original, proprietary fonts used in the Portal games. If you want to rebuild those fonts, it&#39;s up to you to find them online.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All code in this repository is licensed under the MIT license.&lt;/li&gt; &#xA; &lt;li&gt;All images in this repository are licensed under the Creative Commons Attribution-NonCommercial license.&lt;/li&gt; &#xA; &lt;li&gt;All STL and 3D CAD files in this repository are licensed under the Creative Commons Attribution-ShareAlike license.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>RedisInsight/RedisDesktopManager</title>
    <updated>2022-12-30T01:31:57Z</updated>
    <id>tag:github.com,2022-12-30:/RedisInsight/RedisDesktopManager</id>
    <link href="https://github.com/RedisInsight/RedisDesktopManager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔧 Cross-platform Developer GUI for Redis&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;RESP.app - GUI for Redis ® (Formerly RedisDesktopManager)&lt;/h2&gt; &#xA;&lt;h3&gt;RESP.app is joining forces with Redis to offer the Redis community the best possible developer experience and to increase productivity when developing with Redis.&lt;/h3&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://redis.com/blog/respapp-joining-redis/&#34;&gt;this blog post&lt;/a&gt; where we share more details, and you can also visit the &lt;a href=&#34;https://resp.app/faq&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://resp.app/static/img/features/all.png?v2021&#34; alt=&#34;RESP.app screenshot&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>