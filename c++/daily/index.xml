<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-04T01:30:58Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>verilator/verilator</title>
    <updated>2022-12-04T01:30:58Z</updated>
    <id>tag:github.com,2022-12-04:/verilator/verilator</id>
    <link href="https://github.com/verilator/verilator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Verilator open-source SystemVerilog simulator and lint system&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. Github doesn&#39;t render images unless absolute URL .. Do not know of a conditional tag, &#34;only: github&#34; nor &#34;github display&#34; works&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/badge/License-LGPL%20v3-blue.svg&#34;&gt;https://img.shields.io/badge/License-LGPL%20v3-blue.svg&lt;/a&gt; :target: &lt;a href=&#34;https://www.gnu.org/licenses/lgpl-3.0%5D&#34;&gt;https://www.gnu.org/licenses/lgpl-3.0]&lt;/a&gt; .. image:: &lt;a href=&#34;https://img.shields.io/badge/License-Artistic%202.0-0298c3.svg&#34;&gt;https://img.shields.io/badge/License-Artistic%202.0-0298c3.svg&lt;/a&gt; :target: &lt;a href=&#34;https://opensource.org/licenses/Artistic-2.0&#34;&gt;https://opensource.org/licenses/Artistic-2.0&lt;/a&gt; .. image:: &lt;a href=&#34;https://repology.org/badge/tiny-repos/verilator.svg?header=distro%20packages&#34;&gt;https://repology.org/badge/tiny-repos/verilator.svg?header=distro%20packages&lt;/a&gt; :target: &lt;a href=&#34;https://repology.org/project/verilator/versions&#34;&gt;https://repology.org/project/verilator/versions&lt;/a&gt; .. image:: &lt;a href=&#34;https://api.codacy.com/project/badge/Grade/fa78caa433c84a4ab9049c43e9debc6f&#34;&gt;https://api.codacy.com/project/badge/Grade/fa78caa433c84a4ab9049c43e9debc6f&lt;/a&gt; :target: &lt;a href=&#34;https://www.codacy.com/gh/verilator/verilator&#34;&gt;https://www.codacy.com/gh/verilator/verilator&lt;/a&gt; .. image:: &lt;a href=&#34;https://codecov.io/gh/verilator/verilator/branch/master/graph/badge.svg&#34;&gt;https://codecov.io/gh/verilator/verilator/branch/master/graph/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://codecov.io/gh/verilator/verilator&#34;&gt;https://codecov.io/gh/verilator/verilator&lt;/a&gt; .. image:: &lt;a href=&#34;https://github.com/verilator/verilator/workflows/build/badge.svg&#34;&gt;https://github.com/verilator/verilator/workflows/build/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/verilator/verilator/actions?query=workflow%3Abuild&#34;&gt;https://github.com/verilator/verilator/actions?query=workflow%3Abuild&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Welcome to Verilator&lt;/h1&gt; &#xA;&lt;p&gt;.. list-table::&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Welcome to Verilator, the fastest Verilog/SystemVerilog simulator.&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Accepts Verilog or SystemVerilog&lt;/li&gt; &#xA;     &lt;li&gt;Performs lint code-quality checks&lt;/li&gt; &#xA;     &lt;li&gt;Compiles into multithreaded C++, or SystemC&lt;/li&gt; &#xA;     &lt;li&gt;Creates XML to front-end your own tools&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;|Logo|&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;|verilator multithreaded performance|&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Outperforms many closed-source commercial simulators&lt;/li&gt; &#xA;     &lt;li&gt;Single- and multi-threaded output models&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Widely Used&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Wide industry and academic deployment&lt;/li&gt; &#xA;     &lt;li&gt;Out-of-the-box support from Arm, and RISC-V vendor IP&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;|verilator usage|&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;|verilator community|&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Community Driven &amp;amp; Openly Licensed&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Guided by the &lt;code&gt;CHIPS Alliance&lt;/code&gt;_ and &lt;code&gt;Linux Foundation&lt;/code&gt;_&lt;/li&gt; &#xA;     &lt;li&gt;Open, and free as in both speech and beer&lt;/li&gt; &#xA;     &lt;li&gt;More simulation for your verification budget&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Commercial Support Available&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Commercial support contracts&lt;/li&gt; &#xA;     &lt;li&gt;Design support contracts&lt;/li&gt; &#xA;     &lt;li&gt;Enhancement contracts&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;|verilator support|&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What Verilator Does&lt;/h1&gt; &#xA;&lt;p&gt;Verilator is invoked with parameters similar to GCC or Synopsys&#39;s VCS. It &#34;Verilates&#34; the specified Verilog or SystemVerilog code by reading it, performing lint checks, and optionally inserting assertion checks and coverage-analysis points. It outputs single- or multi-threaded .cpp and .h files, the &#34;Verilated&#34; code.&lt;/p&gt; &#xA;&lt;p&gt;These Verilated C++/SystemC files are then compiled by a C++ compiler (gcc/clang/MSVC++), optionally along with a user&#39;s own C++/SystemC wrapper file to instantiate the Verilated model. Executing the resulting executable performs the design simulation. Verilator also supports linking Verilated generated libraries, optionally encrypted, into other simulators.&lt;/p&gt; &#xA;&lt;p&gt;Verilator may not be the best choice if you are expecting a full featured replacement for a closed-source Verilog simulator, need SDF annotation, mixed-signal simulation, or are doing a quick class project (we recommend &lt;code&gt;Icarus Verilog&lt;/code&gt;_ for classwork.) However, if you are looking for a path to migrate SystemVerilog to C++/SystemC, or want high speed simulation of synthesizable designs containing limited verification constructs, Verilator is the tool for you.&lt;/p&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;Verilator does not directly translate Verilog HDL to C++ or SystemC. Rather, Verilator compiles your code into a much faster optimized and optionally thread-partitioned model, which is in turn wrapped inside a C++/SystemC module. The results are a compiled Verilog model that executes even on a single-thread over 10x faster than standalone SystemC, and on a single thread is about 100 times faster than interpreted Verilog simulators such as &lt;code&gt;Icarus Verilog&lt;/code&gt;_. Another 2-10x speedup might be gained from multithreading (yielding 200-1000x total over interpreted simulators).&lt;/p&gt; &#xA;&lt;p&gt;Verilator has typically similar or better performance versus the closed-source Verilog simulators (Carbon Design Systems Carbonator, Modelsim/Questa, Cadence Incisive/NC-Verilog, Synopsys VCS, VTOC, and Pragmatic CVer/CVC). But, Verilator is open-sourced, so you can spend on computes rather than licenses. Thus Verilator gives you the best cycles/dollar.&lt;/p&gt; &#xA;&lt;h1&gt;Installation &amp;amp; Documentation&lt;/h1&gt; &#xA;&lt;p&gt;For more information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Verilator installation and package directory structure &amp;lt;https://verilator.org/install&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Verilator manual (HTML) &amp;lt;https://verilator.org/verilator_doc.html&amp;gt;&lt;/code&gt;&lt;em&gt;, or &lt;code&gt;Verilator manual (PDF) &amp;lt;https://verilator.org/verilator_doc.pdf&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Subscribe to verilator announcements &amp;lt;https://github.com/verilator/verilator-announce&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Verilator forum &amp;lt;https://verilator.org/forum&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Verilator issues &amp;lt;https://verilator.org/issues&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;Verilator is a community project, guided by the &lt;code&gt;CHIPS Alliance&lt;/code&gt;_ under the &lt;code&gt;Linux Foundation&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;We appreciate and welcome your contributions in whatever form; please see &lt;code&gt;Contributing to Verilator &amp;lt;https://github.com/verilator/verilator/blob/master/docs/CONTRIBUTING.rst&amp;gt;&lt;/code&gt;&lt;em&gt;. Thanks to our &lt;code&gt;Contributors and Sponsors &amp;lt;https://verilator.org/guide/latest/contributors.html&amp;gt;&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Verilator also supports and encourages commercial support models and organizations; please see &lt;code&gt;Verilator Commercial Support &amp;lt;https://verilator.org/verilator_commercial_support&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h1&gt;Related Projects&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GTKwave &amp;lt;http://gtkwave.sourceforge.net/&amp;gt;&lt;/code&gt;_ - Waveform viewer for Verilator traces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Icarus Verilog&lt;/code&gt;_ - Icarus is a full featured interpreted Verilog simulator. If Verilator does not support your needs, perhaps Icarus may.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Open License&lt;/h1&gt; &#xA;&lt;p&gt;Verilator is Copyright 2003-2022 by Wilson Snyder. (Report bugs to &lt;code&gt;Verilator Issues &amp;lt;https://verilator.org/issues&amp;gt;&lt;/code&gt;_.)&lt;/p&gt; &#xA;&lt;p&gt;Verilator is free software; you can redistribute it and/or modify it under the terms of either the GNU Lesser General Public License Version 3 or the Perl Artistic License Version 2.0. See the documentation for more details.&lt;/p&gt; &#xA;&lt;p&gt;.. _CHIPS Alliance: &lt;a href=&#34;https://chipsalliance.org&#34;&gt;https://chipsalliance.org&lt;/a&gt; .. _Icarus Verilog: &lt;a href=&#34;http://iverilog.icarus.com&#34;&gt;http://iverilog.icarus.com&lt;/a&gt; .. _Linux Foundation: &lt;a href=&#34;https://www.linuxfoundation.org&#34;&gt;https://www.linuxfoundation.org&lt;/a&gt; .. |Logo| image:: &lt;a href=&#34;https://www.veripool.org/img/verilator_256_200_min.png&#34;&gt;https://www.veripool.org/img/verilator_256_200_min.png&lt;/a&gt; .. |verilator multithreaded performance| image:: &lt;a href=&#34;https://www.veripool.org/img/verilator_multithreaded_performance_bg-min.png&#34;&gt;https://www.veripool.org/img/verilator_multithreaded_performance_bg-min.png&lt;/a&gt; .. |verilator usage| image:: &lt;a href=&#34;https://www.veripool.org/img/verilator_usage_400x200-min.png&#34;&gt;https://www.veripool.org/img/verilator_usage_400x200-min.png&lt;/a&gt; .. |verilator community| image:: &lt;a href=&#34;https://www.veripool.org/img/verilator_community_400x125-min.png&#34;&gt;https://www.veripool.org/img/verilator_community_400x125-min.png&lt;/a&gt; .. |verilator support| image:: &lt;a href=&#34;https://www.veripool.org/img/verilator_support_400x125-min.png&#34;&gt;https://www.veripool.org/img/verilator_support_400x125-min.png&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>abseil/abseil-cpp</title>
    <updated>2022-12-04T01:30:58Z</updated>
    <id>tag:github.com,2022-12-04:/abseil/abseil-cpp</id>
    <link href="https://github.com/abseil/abseil-cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Abseil Common Libraries (C++)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Abseil - C++ Common Libraries&lt;/h1&gt; &#xA;&lt;p&gt;The repository contains the Abseil C++ library code. Abseil is an open-source collection of C++ code (compliant to C++14) designed to augment the C++ standard library.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/#about&#34;&gt;About Abseil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/#build&#34;&gt;Building Abseil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/#codemap&#34;&gt;Codemap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/#releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/#links&#34;&gt;Links&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;about&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About Abseil&lt;/h2&gt; &#xA;&lt;p&gt;Abseil is an open-source collection of C++ library code designed to augment the C++ standard library. The Abseil library code is collected from Google&#39;s own C++ code base, has been extensively tested and used in production, and is the same code we depend on in our daily coding lives.&lt;/p&gt; &#xA;&lt;p&gt;In some cases, Abseil provides pieces missing from the C++ standard; in others, Abseil provides alternatives to the standard for special needs we&#39;ve found through usage in the Google code base. We denote those cases clearly within the library code we provide you.&lt;/p&gt; &#xA;&lt;p&gt;Abseil is not meant to be a competitor to the standard library; we&#39;ve just found that many of these utilities serve a purpose within our code base, and we now want to provide those resources to the C++ community as a whole.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;quickstart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;If you want to just get started, make sure you at least run through the &lt;a href=&#34;https://abseil.io/docs/cpp/quickstart&#34;&gt;Abseil Quickstart&lt;/a&gt;. The Quickstart contains information about setting up your development environment, downloading the Abseil code, running tests, and getting a simple binary working.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building Abseil&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt; and &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; are the official build systems for Abseil. See the &lt;a href=&#34;https://abseil.io/docs/cpp/quickstart&#34;&gt;quickstart&lt;/a&gt; for more information on building Abseil using the Bazel build system. If you require CMake support, please check the &lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/CMake/README.md&#34;&gt;CMake build instructions&lt;/a&gt; and &lt;a href=&#34;https://abseil.io/docs/cpp/quickstart-cmake&#34;&gt;CMake Quickstart&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Abseil follows Google&#39;s &lt;a href=&#34;https://opensource.google/documentation/policies/cplusplus-support&#34;&gt;Foundational C++ Support Policy&lt;/a&gt;. See &lt;a href=&#34;https://github.com/google/oss-policies-info/raw/main/foundational-cxx-support-matrix.md&#34;&gt;this table&lt;/a&gt; for a list of currently supported versions compilers, platforms, and build tools.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;codemap&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Codemap&lt;/h2&gt; &#xA;&lt;p&gt;Abseil contains the following C++ library components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/base/&#34;&gt;&lt;code&gt;base&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;base&lt;/code&gt; library contains initialization code and other code which all other Abseil code depends on. Code within &lt;code&gt;base&lt;/code&gt; may not depend on any other code (other than the C++ standard library).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/algorithm/&#34;&gt;&lt;code&gt;algorithm&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;algorithm&lt;/code&gt; library contains additions to the C++ &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt; library and container-based versions of such algorithms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/cleanup/&#34;&gt;&lt;code&gt;cleanup&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;cleanup&lt;/code&gt; library contains the control-flow-construct-like type &lt;code&gt;absl::Cleanup&lt;/code&gt; which is used for executing a callback on scope exit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/container/&#34;&gt;&lt;code&gt;container&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;container&lt;/code&gt; library contains additional STL-style containers, including Abseil&#39;s unordered &#34;Swiss table&#34; containers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/crc/&#34;&gt;&lt;code&gt;crc&lt;/code&gt;&lt;/a&gt; The &lt;code&gt;crc&lt;/code&gt; library contains code for computing error-detecting cyclic redundancy checks on data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/debugging/&#34;&gt;&lt;code&gt;debugging&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;debugging&lt;/code&gt; library contains code useful for enabling leak checks, and stacktrace and symbolization utilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/flags/&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;flags&lt;/code&gt; library contains code for handling command line flags for libraries and binaries built with Abseil.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/hash/&#34;&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;hash&lt;/code&gt; library contains the hashing framework and default hash functor implementations for hashable types in Abseil.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/iterator/&#34;&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;iterator&lt;/code&gt; library contains utilities for augmenting ranges in range-based for loops.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/log/&#34;&gt;&lt;code&gt;log&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;log&lt;/code&gt; library contains &lt;code&gt;LOG&lt;/code&gt; and &lt;code&gt;CHECK&lt;/code&gt; macros and facilities for writing logged messages out to disk, &lt;code&gt;stderr&lt;/code&gt;, or user-extensible destinations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/memory/&#34;&gt;&lt;code&gt;memory&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;memory&lt;/code&gt; library contains memory management facilities that augment C++&#39;s &lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt; library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/meta/&#34;&gt;&lt;code&gt;meta&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;meta&lt;/code&gt; library contains compatible versions of type checks available within C++14 and C++17 versions of the C++ &lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt; library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/numeric/&#34;&gt;&lt;code&gt;numeric&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;numeric&lt;/code&gt; library contains 128-bit integer types as well as implementations of C++20&#39;s bitwise math functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/profiling/&#34;&gt;&lt;code&gt;profiling&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;profiling&lt;/code&gt; library contains utility code for profiling C++ entities. It is currently a private dependency of other Abseil libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/random/&#34;&gt;&lt;code&gt;random&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;random&lt;/code&gt; library contains functions for generating psuedorandom values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/status/&#34;&gt;&lt;code&gt;status&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;status&lt;/code&gt; library contains abstractions for error handling, specifically &lt;code&gt;absl::Status&lt;/code&gt; and &lt;code&gt;absl::StatusOr&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/strings/&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;strings&lt;/code&gt; library contains a variety of strings routines and utilities, including a C++14-compatible version of the C++17 &lt;code&gt;std::string_view&lt;/code&gt; type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/synchronization/&#34;&gt;&lt;code&gt;synchronization&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;synchronization&lt;/code&gt; library contains concurrency primitives (Abseil&#39;s &lt;code&gt;absl::Mutex&lt;/code&gt; class, an alternative to &lt;code&gt;std::mutex&lt;/code&gt;) and a variety of synchronization abstractions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;time&lt;/code&gt; library contains abstractions for computing with absolute points in time, durations of time, and formatting and parsing time within time zones.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/types/&#34;&gt;&lt;code&gt;types&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;types&lt;/code&gt; library contains non-container utility types, like a C++14-compatible version of the C++17 &lt;code&gt;std::optional&lt;/code&gt; type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/absl/utility/&#34;&gt;&lt;code&gt;utility&lt;/code&gt;&lt;/a&gt; &lt;br&gt; The &lt;code&gt;utility&lt;/code&gt; library contains utility and helper code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Abseil recommends users &#34;live-at-head&#34; (update to the latest commit from the master branch as often as possible). However, we realize this philosophy doesn&#39;t work for every project, so we also provide &lt;a href=&#34;https://github.com/abseil/abseil-cpp/releases&#34;&gt;Long Term Support Releases&lt;/a&gt; to which we backport fixes for severe bugs. See our &lt;a href=&#34;https://abseil.io/about/releases&#34;&gt;release management&lt;/a&gt; document for more details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Abseil C++ library is licensed under the terms of the Apache license. See &lt;a href=&#34;https://raw.githubusercontent.com/abseil/abseil-cpp/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;links&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;p&gt;For more information about Abseil:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Consult our &lt;a href=&#34;https://abseil.io/about/intro&#34;&gt;Abseil Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://abseil.io/about/philosophy&#34;&gt;Why Adopt Abseil&lt;/a&gt; to understand our design philosophy.&lt;/li&gt; &#xA; &lt;li&gt;Peruse our &lt;a href=&#34;https://abseil.io/about/compatibility&#34;&gt;Abseil Compatibility Guarantees&lt;/a&gt; to understand both what we promise to you, and what we expect of you in return.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>NVIDIA/thrust</title>
    <updated>2022-12-04T01:30:58Z</updated>
    <id>tag:github.com,2022-12-04:/NVIDIA/thrust</id>
    <link href="https://github.com/NVIDIA/thrust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The C++ parallel algorithms library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Thrust: The C++ Parallel Algorithms Library&lt;/h1&gt; &#xA;&lt;table&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;&lt;a href=&#34;https://github.com/nvidia/thrust/tree/main/examples&#34;&gt;Examples&lt;/a&gt;&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;b&gt;&lt;a href=&#34;https://godbolt.org/z/rsdedW&#34;&gt;Godbolt&lt;/a&gt;&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;b&gt;&lt;a href=&#34;https://nvidia.github.io/thrust&#34;&gt;Documentation&lt;/a&gt;&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Thrust is the C++ parallel algorithms library which inspired the introduction of parallel algorithms to the C++ Standard Library. Thrust&#39;s &lt;strong&gt;high-level&lt;/strong&gt; interface greatly enhances programmer &lt;strong&gt;productivity&lt;/strong&gt; while enabling performance portability between GPUs and multicore CPUs. It builds on top of established parallel programming frameworks (such as CUDA, TBB, and OpenMP). It also provides a number of general-purpose facilities similar to those found in the C++ Standard Library.&lt;/p&gt; &#xA;&lt;p&gt;The NVIDIA C++ Standard Library is an open source project; it is available on &lt;a href=&#34;https://github.com/nvidia/thrust&#34;&gt;GitHub&lt;/a&gt; and included in the NVIDIA HPC SDK and CUDA Toolkit. If you have one of those SDKs installed, no additional installation or compiler flags are needed to use libcu++.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Thrust is best learned through examples.&lt;/p&gt; &#xA;&lt;p&gt;The following example generates random numbers serially and then transfers them to a parallel device where they are sorted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cuda&#34;&gt;#include &amp;lt;thrust/host_vector.h&amp;gt;&#xA;#include &amp;lt;thrust/device_vector.h&amp;gt;&#xA;#include &amp;lt;thrust/generate.h&amp;gt;&#xA;#include &amp;lt;thrust/sort.h&amp;gt;&#xA;#include &amp;lt;thrust/copy.h&amp;gt;&#xA;#include &amp;lt;thrust/random.h&amp;gt;&#xA;&#xA;int main() {&#xA;  // Generate 32M random numbers serially.&#xA;  thrust::default_random_engine rng(1337);&#xA;  thrust::uniform_int_distribution&amp;lt;int&amp;gt; dist;&#xA;  thrust::host_vector&amp;lt;int&amp;gt; h_vec(32 &amp;lt;&amp;lt; 20);&#xA;  thrust::generate(h_vec.begin(), h_vec.end(), [&amp;amp;] { return dist(rng); });&#xA;&#xA;  // Transfer data to the device.&#xA;  thrust::device_vector&amp;lt;int&amp;gt; d_vec = h_vec;&#xA;&#xA;  // Sort data on the device.&#xA;  thrust::sort(d_vec.begin(), d_vec.end());&#xA;&#xA;  // Transfer data back to host.&#xA;  thrust::copy(d_vec.begin(), d_vec.end(), h_vec.begin());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godbolt.org/z/v3fdoE&#34;&gt;See it on Godbolt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This example demonstrates computing the sum of some random numbers in parallel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cuda&#34;&gt;#include &amp;lt;thrust/host_vector.h&amp;gt;&#xA;#include &amp;lt;thrust/device_vector.h&amp;gt;&#xA;#include &amp;lt;thrust/generate.h&amp;gt;&#xA;#include &amp;lt;thrust/reduce.h&amp;gt;&#xA;#include &amp;lt;thrust/functional.h&amp;gt;&#xA;#include &amp;lt;thrust/random.h&amp;gt;&#xA;&#xA;int main() {&#xA;  // Generate random data serially.&#xA;  thrust::default_random_engine rng(1337);&#xA;  thrust::uniform_real_distribution&amp;lt;double&amp;gt; dist(-50.0, 50.0);&#xA;  thrust::host_vector&amp;lt;double&amp;gt; h_vec(32 &amp;lt;&amp;lt; 20);&#xA;  thrust::generate(h_vec.begin(), h_vec.end(), [&amp;amp;] { return dist(rng); });&#xA;&#xA;  // Transfer to device and compute the sum.&#xA;  thrust::device_vector&amp;lt;double&amp;gt; d_vec = h_vec;&#xA;  double x = thrust::reduce(d_vec.begin(), d_vec.end(), 0, thrust::plus&amp;lt;int&amp;gt;());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godbolt.org/z/119jxj&#34;&gt;See it on Godbolt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This example show how to perform such a reduction asynchronously:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cuda&#34;&gt;#include &amp;lt;thrust/host_vector.h&amp;gt;&#xA;#include &amp;lt;thrust/device_vector.h&amp;gt;&#xA;#include &amp;lt;thrust/generate.h&amp;gt;&#xA;#include &amp;lt;thrust/async/copy.h&amp;gt;&#xA;#include &amp;lt;thrust/async/reduce.h&amp;gt;&#xA;#include &amp;lt;thrust/functional.h&amp;gt;&#xA;#include &amp;lt;thrust/random.h&amp;gt;&#xA;#include &amp;lt;numeric&amp;gt;&#xA;&#xA;int main() {&#xA;  // Generate 32M random numbers serially.&#xA;  thrust::default_random_engine rng(123456);&#xA;  thrust::uniform_real_distribution&amp;lt;double&amp;gt; dist(-50.0, 50.0);&#xA;  thrust::host_vector&amp;lt;double&amp;gt; h_vec(32 &amp;lt;&amp;lt; 20);&#xA;  thrust::generate(h_vec.begin(), h_vec.end(), [&amp;amp;] { return dist(rng); });&#xA;&#xA;  // Asynchronously transfer to the device.&#xA;  thrust::device_vector&amp;lt;double&amp;gt; d_vec(h_vec.size());&#xA;  thrust::device_event e = thrust::async::copy(h_vec.begin(), h_vec.end(),&#xA;                                               d_vec.begin());&#xA;&#xA;  // After the transfer completes, asynchronously compute the sum on the device.&#xA;  thrust::device_future&amp;lt;double&amp;gt; f0 = thrust::async::reduce(thrust::device.after(e),&#xA;                                                           d_vec.begin(), d_vec.end(),&#xA;                                                           0.0, thrust::plus&amp;lt;double&amp;gt;());&#xA;&#xA;  // While the sum is being computed on the device, compute the sum serially on&#xA;  // the host.&#xA;  double f1 = std::accumulate(h_vec.begin(), h_vec.end(), 0.0, thrust::plus&amp;lt;double&amp;gt;());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godbolt.org/z/rsdedW&#34;&gt;See it on Godbolt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting The Thrust Source Code&lt;/h2&gt; &#xA;&lt;p&gt;Thrust is a header-only library; there is no need to build or install the project unless you want to run the Thrust unit tests.&lt;/p&gt; &#xA;&lt;p&gt;The CUDA Toolkit provides a recent release of the Thrust source code in &lt;code&gt;include/thrust&lt;/code&gt;. This will be suitable for most users.&lt;/p&gt; &#xA;&lt;p&gt;Users that wish to contribute to Thrust or try out newer features should recursively clone the Thrust Github repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/NVIDIA/thrust.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Thrust From Your Project&lt;/h2&gt; &#xA;&lt;p&gt;For CMake-based projects, we provide a CMake package for use with &lt;code&gt;find_package&lt;/code&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/thrust/main/thrust/cmake/README.md&#34;&gt;CMake README&lt;/a&gt; for more information. Thrust can also be added via &lt;code&gt;add_subdirectory&lt;/code&gt; or tools like the &lt;a href=&#34;https://github.com/cpm-cmake/CPM.cmake&#34;&gt;CMake Package Manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For non-CMake projects, compile with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Thrust include path (&lt;code&gt;-I&amp;lt;thrust repo root&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The libcu++ include path (&lt;code&gt;-I&amp;lt;thrust repo root&amp;gt;/dependencies/libcudacxx/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The CUB include path, if using the CUDA device system (&lt;code&gt;-I&amp;lt;thrust repo root&amp;gt;/dependencies/cub/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;By default, the CPP host system and CUDA device system are used. These can be changed using compiler definitions: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;-DTHRUST_HOST_SYSTEM=THRUST_HOST_SYSTEM_XXX&lt;/code&gt;, where &lt;code&gt;XXX&lt;/code&gt; is &lt;code&gt;CPP&lt;/code&gt; (serial, default), &lt;code&gt;OMP&lt;/code&gt; (OpenMP), or &lt;code&gt;TBB&lt;/code&gt; (Intel TBB)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-DTHRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_XXX&lt;/code&gt;, where &lt;code&gt;XXX&lt;/code&gt; is &lt;code&gt;CPP&lt;/code&gt;, &lt;code&gt;OMP&lt;/code&gt;, &lt;code&gt;TBB&lt;/code&gt;, or &lt;code&gt;CUDA&lt;/code&gt; (default).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing Thrust&lt;/h2&gt; &#xA;&lt;p&gt;Thrust uses the &lt;a href=&#34;https://cmake.org&#34;&gt;CMake build system&lt;/a&gt; to build unit tests, examples, and header tests. To build Thrust as a developer, it is recommended that you use our containerized development system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone Thrust and CUB repos recursively:&#xA;git clone --recursive https://github.com/NVIDIA/thrust.git&#xA;cd thrust&#xA;&#xA;# Build and run tests and examples:&#xA;ci/local/build.bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That does the equivalent of the following, but in a clean containerized environment which has all dependencies installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone Thrust and CUB repos recursively:&#xA;git clone --recursive https://github.com/NVIDIA/thrust.git&#xA;cd thrust&#xA;&#xA;# Create build directory:&#xA;mkdir build&#xA;cd build&#xA;&#xA;# Configure -- use one of the following:&#xA;cmake ..   # Command line interface.&#xA;ccmake ..  # ncurses GUI (Linux only).&#xA;cmake-gui  # Graphical UI, set source/build directories in the app.&#xA;&#xA;# Build:&#xA;cmake --build . -j ${NUM_JOBS} # Invokes make (or ninja, etc).&#xA;&#xA;# Run tests and examples:&#xA;ctest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, a serial &lt;code&gt;CPP&lt;/code&gt; host system, &lt;code&gt;CUDA&lt;/code&gt; accelerated device system, and C++14 standard are used. This can be changed in CMake and via flags to &lt;code&gt;ci/local/build.bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;More information on configuring your Thrust build and creating a pull request can be found in the &lt;a href=&#34;https://nvidia.github.io/thrust/contributing.html&#34;&gt;contributing section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Thrust is an open source project developed on &lt;a href=&#34;https://github.com/nvidia/thrust&#34;&gt;GitHub&lt;/a&gt;. Thrust is distributed under the &lt;a href=&#34;https://llvm.org/LICENSE.txt&#34;&gt;Apache License v2.0 with LLVM Exceptions&lt;/a&gt;; some parts are distributed under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.txt&#34;&gt;Apache License v2.0&lt;/a&gt; and the &lt;a href=&#34;https://www.boost.org/LICENSE_1_0.txt&#34;&gt;Boost License v1.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;CI Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-gpu-build/CXX_TYPE=gcc,CXX_VER=9,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-gpu-build/CXX_TYPE=gcc,CXX_VER=9,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20GCC%209%20build%20and%20device%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=11,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=11,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20GCC%2011%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=10,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=10,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20GCC%2010%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=9,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=9,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20GCC%209%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=8,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=8,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20GCC%208%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=7,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=7,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20GCC%207%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=6,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=6,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20GCC%206%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=5,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=gcc,CXX_VER=5,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20GCC%205%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=clang,CXX_VER=12,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=clang,CXX_VER=12,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20Clang%2012%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=clang,CXX_VER=11,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=clang,CXX_VER=11,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20Clang%2011%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=clang,CXX_VER=10,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=clang,CXX_VER=10,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20Clang%2010%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=clang,CXX_VER=9,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=clang,CXX_VER=9,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20Clang%209%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=clang,CXX_VER=8,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=clang,CXX_VER=8,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20Clang%208%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=clang,CXX_VER=7,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=clang,CXX_VER=7,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20Clang%207%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=icc,CXX_VER=latest,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=icc,CXX_VER=latest,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=cuda,SDK_VER=11.5.1-devel/badge/icon?subject=NVCC%2011.5.1%20%2B%20ICC%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=nvcxx,CXX_VER=22.1,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=nvhpc,SDK_VER=22.1-devel-cuda11.5/&#34;&gt;&lt;img src=&#34;https://gpuci.gpuopenanalytics.com/job/nvidia/job/thrust/job/branch/job/thrust-cpu-build/CXX_TYPE=nvcxx,CXX_VER=22.1,OS_TYPE=ubuntu,OS_VER=20.04,SDK_TYPE=nvhpc,SDK_VER=22.1-devel-cuda11.5/badge/icon?subject=NVC%2B%2B%2022.1%20build%20and%20host%20tests&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>