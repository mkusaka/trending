<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-03T01:31:49Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dmlc/xgboost</title>
    <updated>2022-07-03T01:31:49Z</updated>
    <id>tag:github.com,2022-07-03:/dmlc/xgboost</id>
    <link href="https://github.com/dmlc/xgboost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library, for Python, R, Java, Scala, C++ and more. Runs on single machine, Hadoop, Spark, Dask, Flink and DataFlow&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dmlc/dmlc.github.io/master/img/logo-m/xgboost.png&#34; width=&#34;135/&#34;&gt; eXtreme Gradient Boosting&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xgboost-ci.net/blue/organizations/jenkins/xgboost/activity&#34;&gt;&lt;img src=&#34;https://xgboost-ci.net/job/xgboost/job/master/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/dmlc/xgboost&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/dmlc/xgboost.svg?label=build&amp;amp;logo=travis&amp;amp;branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dmlc/xgboost/actions&#34;&gt;&lt;img src=&#34;https://github.com/dmlc/xgboost/workflows/XGBoost-CI/badge.svg?branch=master&#34; alt=&#34;XGBoost-CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://xgboost.readthedocs.org&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/xgboost/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/dmlc/xgboost/master/LICENSE&#34;&gt;&lt;img src=&#34;http://dmlc.github.io/img/apache2.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cran.r-project.org/web/packages/xgboost&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/xgboost&#34; alt=&#34;CRAN Status Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/xgboost/&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/xgboost.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://anaconda.org/conda-forge/py-xgboost&#34;&gt;&lt;img src=&#34;https://img.shields.io/conda/vn/conda-forge/py-xgboost.svg?sanitize=true&#34; alt=&#34;Conda version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://optuna.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Optuna-integrated-blue&#34; alt=&#34;Optuna&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/XGBoostProject&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/@XGBoostProject--_.svg?style=social&amp;amp;logo=twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xgboost.ai/community&#34;&gt;Community&lt;/a&gt; | &lt;a href=&#34;https://xgboost.readthedocs.org&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/dmlc/xgboost/master/demo/README.md&#34;&gt;Resources&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/dmlc/xgboost/master/CONTRIBUTORS.md&#34;&gt;Contributors&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/dmlc/xgboost/master/NEWS.md&#34;&gt;Release Notes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;XGBoost is an optimized distributed gradient boosting library designed to be highly &lt;em&gt;&lt;strong&gt;efficient&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;flexible&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;portable&lt;/strong&gt;&lt;/em&gt;. It implements machine learning algorithms under the &lt;a href=&#34;https://en.wikipedia.org/wiki/Gradient_boosting&#34;&gt;Gradient Boosting&lt;/a&gt; framework. XGBoost provides a parallel tree boosting (also known as GBDT, GBM) that solve many data science problems in a fast and accurate way. The same code runs on major distributed environment (Kubernetes, Hadoop, SGE, MPI, Dask) and can solve problems beyond billions of examples.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Â© Contributors, 2021. Licensed under an &lt;a href=&#34;https://github.com/dmlc/xgboost/raw/master/LICENSE&#34;&gt;Apache-2&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute to XGBoost&lt;/h2&gt; &#xA;&lt;p&gt;XGBoost has been developed and used by a group of active community members. Your help is very valuable to make the package better for everyone. Checkout the &lt;a href=&#34;https://xgboost.ai/community&#34;&gt;Community Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tianqi Chen and Carlos Guestrin. &lt;a href=&#34;http://arxiv.org/abs/1603.02754&#34;&gt;XGBoost: A Scalable Tree Boosting System&lt;/a&gt;. In 22nd SIGKDD Conference on Knowledge Discovery and Data Mining, 2016&lt;/li&gt; &#xA; &lt;li&gt;XGBoost originates from research project at University of Washington.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Become a sponsor and get a logo here. See details at &lt;a href=&#34;https://xgboost.ai/sponsors&#34;&gt;Sponsoring the XGBoost Project&lt;/a&gt;. The funds are used to defray the cost of continuous integration and testing infrastructure (&lt;a href=&#34;https://xgboost-ci.net&#34;&gt;https://xgboost-ci.net&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Open Source Collective sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmlc/xgboost/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/dmlc/xgboost/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://opencollective.com/xgboost#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;!--&lt;a href=&#34;https://opencollective.com/xgboost/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/sponsor/0/avatar.svg&#34;&gt;&lt;/a&gt;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xgboost-ai/xgboost-ai.github.io/master/images/sponsors/nvidia.jpg&#34; alt=&#34;NVIDIA&#34; width=&#34;72&#34; height=&#34;72&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xgboost/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xgboost/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xgboost/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xgboost/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xgboost/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xgboost/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xgboost/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xgboost/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xgboost/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://opencollective.com/xgboost#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/xgboost#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/xgboost/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other sponsors&lt;/h2&gt; &#xA;&lt;p&gt;The sponsors in this list are donating cloud hours in lieu of cash donation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xgboost-ai/xgboost-ai.github.io/master/images/sponsors/aws.png&#34; alt=&#34;Amazon Web Services&#34; width=&#34;72&#34; height=&#34;72&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>countercept/CallStackSpoofer</title>
    <updated>2022-07-03T01:31:49Z</updated>
    <id>tag:github.com,2022-07-03:/countercept/CallStackSpoofer</id>
    <link href="https://github.com/countercept/CallStackSpoofer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A PoC implementation for spoofing arbitrary call stacks when making sys calls (e.g. grabbing a handle via NtOpenProcess)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CallStackSpoofer&lt;/h1&gt; &#xA;&lt;p&gt;This repository demonstrates a PoC implementation to spoof arbitrary call stacks when making system calls. For a full technical walkthrough please see the accompanying blog post here: &lt;a href=&#34;https://labs.withsecure.com/blog/spoofing-call-stacks-to-confuse-edrs&#34;&gt;https://labs.withsecure.com/blog/spoofing-call-stacks-to-confuse-edrs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default it contains three sample call stacks to mimic, which can be selected via supplying either &lt;code&gt;--wmi&lt;/code&gt;, &lt;code&gt;--rpc&lt;/code&gt;, or &lt;code&gt;--svchost&lt;/code&gt;, as demonstrated below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/108275364/176182191-23cf273c-f154-411c-a1cf-428a9be323b9.PNG&#34; alt=&#34;readmeexample&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;These call stacks were obtained by running SysMon with process access events enabled and searching for events where lsass was the target of the handle operation.&lt;/p&gt; &#xA;&lt;p&gt;NB As a word of caution, this PoC was tested on the following Windows build:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;10.0.19044.1706 (21h2)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It has not been tested on any other versions and offsets may obviously vary (and hence break) on different Windows builds.&lt;/p&gt; &#xA;&lt;p&gt;If you are having trouble, one technique to debug errors is to find the process generating OpenProcess events in SysMon and attach to it in WinDbg. Once attached, run &lt;code&gt;bp ntdll!NtOpenProcess&lt;/code&gt; and when bp is hit run &lt;code&gt;knf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This will display output similar to the below, which will contain full symbol resolution and the correct stack utilisation space (indicated by the &#39;Memory&#39; column):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0:003&amp;gt; knf&#xA; #   Memory  Child-SP          RetAddr               Call Site&#xA;00           00000037`f01fe300 00007ffd`221d2ea6     ntdll!NtOpenProcess+0x12&#xA;01         8 00000037`f01fe308 00007ffd`1ffee959     KERNELBASE!ProcessIdToSessionId+0x96&#xA;02        80 00000037`f01fe388 00007ffd`23b99633     lsm!RpcOpenEnum+0x129&#xA;03       430 00000037`f01fe7b8 00007ffd`23b33711     RPCRT4!Invoke+0x73&#xA;04        40 00000037`f01fe7f8 00007ffd`23bfd77b     RPCRT4!Ndr64UnmarshallHandle+0xe1&#xA;05        70 00000037`f01fe868 00007ffd`23b7d2ac     RPCRT4!Ndr64StubWorker+0xb0b&#xA;06       6c0 00000037`f01fef28 00007ffd`23b7a408     RPCRT4!NdrServerCallAll+0x3c&#xA;07        50 00000037`f01fef78 00007ffd`23b5a266     RPCRT4!DispatchToStubInCNoAvrf+0x18&#xA;08        50 00000037`f01fefc8 00007ffd`23b59bb8     RPCRT4!RPC_INTERFACE::DispatchToStubWorker+0x1a6&#xA;09        e0 00000037`f01ff0a8 00007ffd`23b68a0f     RPCRT4!RPC_INTERFACE::DispatchToStub+0xf8&#xA;0a        70 00000037`f01ff118 00007ffd`23b67e18     RPCRT4!LRPC_SCALL::DispatchRequest+0x31f&#xA;0b        d0 00000037`f01ff1e8 00007ffd`23b67401     RPCRT4!LRPC_SCALL::HandleRequest+0x7f8&#xA;0c       110 00000037`f01ff2f8 00007ffd`23b66e6e     RPCRT4!LRPC_ADDRESS::HandleRequest+0x341&#xA;0d        a0 00000037`f01ff398 00007ffd`23b6b542     RPCRT4!LRPC_ADDRESS::ProcessIO+0x89e&#xA;0e       140 00000037`f01ff4d8 00007ffd`24ab0330     RPCRT4!LrpcIoComplete+0xc2&#xA;0f        a0 00000037`f01ff578 00007ffd`24ae2f26     ntdll!TppAlpcpExecuteCallback+0x260&#xA;10        80 00000037`f01ff5f8 00007ffd`23387034     ntdll!TppWorkerThread+0x456&#xA;11       300 00000037`f01ff8f8 00007ffd`24ae2651     KERNEL32!BaseThreadInitThunk+0x14&#xA;12        30 00000037`f01ff928 00000000`00000000     ntdll!RtlUserThreadStart+0x21&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a note, the total stack space used by the current call site is indicated in the row below (e.g. ntdll!NtOpenProcess only takes up 8 bytes). As stated previously, a complete technical walkthrough is covered in the blog linked at the start of this readme which will explain this (and concepts like Child-SP) in more detail. The values generated by windbg can then be used to correlate with what is being returned by CalculateFunctionStackSize() in the event of any problems.&lt;/p&gt; &#xA;&lt;h1&gt;Related Work&lt;/h1&gt; &#xA;&lt;p&gt;Thanks to the unicorn_pe project (&lt;a href=&#34;https://github.com/hzqst/unicorn_pe&#34;&gt;https://github.com/hzqst/unicorn_pe&lt;/a&gt;) for example code in parsing UNWIND_CODEs.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>praydog/REFramework</title>
    <updated>2022-07-03T01:31:49Z</updated>
    <id>tag:github.com,2022-07-03:/praydog/REFramework</id>
    <link href="https://github.com/praydog/REFramework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scripting platform, modding framework and VR support for all RE Engine games&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;REFramework &lt;a href=&#34;https://github.com/praydog/REFramework-nightly/releases&#34;&gt;&lt;img src=&#34;https://github.com/praydog/reframework/actions/workflows/dev-release.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A mod framework, scripting platform, and modding tool for RE Engine games. Inspired by and uses code from &lt;a href=&#34;https://github.com/cursey/kanan-new&#34;&gt;Kanan&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The last stable build can be downloaded from the &lt;a href=&#34;https://github.com/praydog/REFramework/releases&#34;&gt;Releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;For newer builds, check out the &lt;a href=&#34;https://github.com/praydog/REFramework-nightly/releases&#34;&gt;Nightly Developer Builds&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Non-VR&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract only the &lt;code&gt;dinput8.dll&lt;/code&gt; from the zip file into your game folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;VR&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install SteamVR (unless you&#39;re using OpenXR on a supported headset)&lt;/li&gt; &#xA; &lt;li&gt;Extract the whole zip file into your corresponding game folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/praydog/REFramework/wiki/VR-Troubleshooting&#34;&gt;VR Troubleshooting/FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example game folder: G:\SteamLibrary\steamapps\common\RESIDENT EVIL 2 BIOHAZARD RE2&lt;/p&gt; &#xA;&lt;p&gt;Supports both DirectX 11 and DirectX 12.&lt;/p&gt; &#xA;&lt;h2&gt;Included Mods&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lua Scripting API &amp;amp; Plugin System (All games, check out the &lt;a href=&#34;https://cursey.github.io/reframework-book/&#34;&gt;Wiki&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;VR &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Generic 6DOF VR support for all games&lt;/li&gt; &#xA;   &lt;li&gt;Motion controls for RE2/RE3/RE7/RE8&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;First Person (RE2, RE3)&lt;/li&gt; &#xA; &lt;li&gt;Manual Flashlight (RE2, RE3, RE8)&lt;/li&gt; &#xA; &lt;li&gt;Free Camera (All games)&lt;/li&gt; &#xA; &lt;li&gt;Scene Timescale (All games)&lt;/li&gt; &#xA; &lt;li&gt;FOV Slider (All games)&lt;/li&gt; &#xA; &lt;li&gt;Vignette Disabler (All games)&lt;/li&gt; &#xA; &lt;li&gt;Ultrawide/Aspect Ratio fixes (All games)&lt;/li&gt; &#xA; &lt;li&gt;GUI Hider/Disabler (All games)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Included Fixes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RE8 Startup Crash&lt;/li&gt; &#xA; &lt;li&gt;RE8 Stutters (killing enemies, taking damage, etc...)&lt;/li&gt; &#xA; &lt;li&gt;MHRise crashes related to third party DLLs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Included Tools (Developer Mode)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Game Objects Display&lt;/li&gt; &#xA; &lt;li&gt;Object Explorer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Games&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resident Evil 2&lt;/li&gt; &#xA; &lt;li&gt;Resident Evil 3&lt;/li&gt; &#xA; &lt;li&gt;Resident Evil 7&lt;/li&gt; &#xA; &lt;li&gt;Resident Evil Village&lt;/li&gt; &#xA; &lt;li&gt;Devil May Cry 5&lt;/li&gt; &#xA; &lt;li&gt;Monster Hunter Rise&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SkacikPL&#34;&gt;SkacikPL&lt;/a&gt; for originally creating the Manual Flashlight mod.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cursey/&#34;&gt;cursey&lt;/a&gt; for helping develop the VR component and the scripting system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/youwereeatenbyalid/&#34;&gt;The Hitchhiker&lt;/a&gt; and &lt;a href=&#34;https://github.com/alphazolam&#34;&gt;alphaZomega&lt;/a&gt; for the great help stress testing, creating scripts for the scripting system, and helpful suggestions.&lt;/p&gt;</summary>
  </entry>
</feed>