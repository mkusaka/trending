<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-08T01:32:05Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jbeder/yaml-cpp</title>
    <updated>2022-07-08T01:32:05Z</updated>
    <id>tag:github.com,2022-07-08:/jbeder/yaml-cpp</id>
    <link href="https://github.com/jbeder/yaml-cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A YAML parser and emitter in C++&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;yaml-cpp &lt;img src=&#34;https://github.com/jbeder/yaml-cpp/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://codedocs.xyz/jbeder/yaml-cpp/&#34;&gt;&lt;img src=&#34;https://codedocs.xyz/jbeder/yaml-cpp.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;yaml-cpp&lt;/code&gt; is a &lt;a href=&#34;http://www.yaml.org/&#34;&gt;YAML&lt;/a&gt; parser and emitter in C++ matching the &lt;a href=&#34;http://www.yaml.org/spec/1.2/spec.html&#34;&gt;YAML 1.2 spec&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jbeder/yaml-cpp/wiki/Tutorial&#34;&gt;Tutorial&lt;/a&gt; and &lt;a href=&#34;https://github.com/jbeder/yaml-cpp/wiki/How-To-Emit-YAML&#34;&gt;How to Emit YAML&lt;/a&gt; for reference. For the old API (until 0.5.0), see &lt;a href=&#34;https://github.com/jbeder/yaml-cpp/wiki/How-To-Parse-A-Document-(Old-API)&#34;&gt;How To Parse A Document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Any Problems?&lt;/h2&gt; &#xA;&lt;p&gt;If you find a bug, post an &lt;a href=&#34;https://github.com/jbeder/yaml-cpp/issues&#34;&gt;issue&lt;/a&gt;! If you have questions about how to use yaml-cpp, please post it on &lt;a href=&#34;http://stackoverflow.com&#34;&gt;http://stackoverflow.com&lt;/a&gt; and tag it &lt;a href=&#34;http://stackoverflow.com/questions/tagged/yaml-cpp&#34;&gt;&lt;code&gt;yaml-cpp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;yaml-cpp&lt;/code&gt; uses &lt;a href=&#34;http://www.cmake.org&#34;&gt;CMake&lt;/a&gt; to support cross-platform building. Install &lt;a href=&#34;http://www.cmake.org&#34;&gt;CMake&lt;/a&gt; &lt;em&gt;(Resources -&amp;gt; Download)&lt;/em&gt; before proceeding. The basic steps to build are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you don&#39;t use the provided installer for your platform, make sure that you add &lt;code&gt;CMake&lt;/code&gt;&#39;s bin folder to your path.&lt;/p&gt; &#xA;&lt;h4&gt;1. Navigate into the source directory, create build folder and run &lt;code&gt;CMake&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir build&#xA;cd build&#xA;cmake [-G generator] [-DYAML_BUILD_SHARED_LIBS=on|OFF] ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;generator&lt;/code&gt; option is the build system you&#39;d like to use. Run &lt;code&gt;cmake&lt;/code&gt; without arguments to see a full list of available generators.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;On Windows, you might use &#34;Visual Studio 12 2013&#34; (VS 2013 32-bits), or &#34;Visual Studio 14 2015 Win64&#34; (VS 2015 64-bits).&lt;/li&gt; &#xA;   &lt;li&gt;On OS X, you might use &#34;Xcode&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;On a UNIX-like system, omit the option (for a Makefile).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;yaml-cpp&lt;/code&gt; builds a static library by default, you may want to build a shared library by specifying &lt;code&gt;-DYAML_BUILD_SHARED_LIBS=ON&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For more options on customizing the build, see the &lt;a href=&#34;https://github.com/jbeder/yaml-cpp/raw/master/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2. Build it!&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The command you&#39;ll need to run depends on the generator you chose earlier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To clean up, just remove the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Recent Releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jbeder/yaml-cpp/releases/tag/yaml-cpp-0.6.0&#34;&gt;yaml-cpp 0.6.0&lt;/a&gt; released! This release requires C++11, and no longer depends on Boost.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jbeder/yaml-cpp/releases/tag/release-0.3.0&#34;&gt;yaml-cpp 0.3.0&lt;/a&gt; is still available if you want the old API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The old API will continue to be supported, and will still receive bugfixes!&lt;/strong&gt; The 0.3.x and 0.4.x versions will be old API releases, and 0.5.x and above will all be new API releases.&lt;/p&gt; &#xA;&lt;h1&gt;API Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The autogenerated API reference is hosted on &lt;a href=&#34;https://codedocs.xyz/jbeder/yaml-cpp/index.html&#34;&gt;CodeDocs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Third Party Integrations&lt;/h1&gt; &#xA;&lt;p&gt;The following projects are not officially supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/brcha/d392b2fe5f1e427cc8a6&#34;&gt;Qt wrapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jwindgassen/UnrealYAML&#34;&gt;UnrealEngine Wrapper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>valhalla/valhalla</title>
    <updated>2022-07-08T01:32:05Z</updated>
    <id>tag:github.com,2022-07-08:/valhalla/valhalla</id>
    <link href="https://github.com/valhalla/valhalla" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Routing Engine for OpenStreetMap&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt; ██▒   █▓ ▄▄▄       ██▓     ██░ ██  ▄▄▄       ██▓     ██▓    ▄▄▄&#xA;▓██░   █▒▒████▄    ▓██▒    ▓██░ ██▒▒████▄    ▓██▒    ▓██▒   ▒████▄&#xA; ▓██  █▒░▒██  ▀█▄  ▒██░    ▒██▀▀██░▒██  ▀█▄  ▒██░    ▒██░   ▒██  ▀█▄&#xA;  ▒██ █░░░██▄▄▄▄██ ▒██░    ░▓█ ░██ ░██▄▄▄▄██ ▒██░    ▒██░   ░██▄▄▄▄██&#xA;   ▒▀█░   ▓█   ▓██▒░██████▒░▓█▒░██▓ ▓█   ▓██▒░██████▒░██████▒▓█   ▓██▒&#xA;   ░ ▐░   ▒▒   ▓▒█░░ ▒░▓  ░ ▒ ░░▒░▒ ▒▒   ▓▒█░░ ▒░▓  ░░ ▒░▓  ░▒▒   ▓▒█░&#xA;   ░ ░░    ▒   ▒▒ ░░ ░ ▒  ░ ▒ ░▒░ ░  ▒   ▒▒ ░░ ░ ▒  ░░ ░ ▒  ░ ▒   ▒▒ ░&#xA;     ░░    ░   ▒     ░ ░    ░  ░░ ░  ░   ▒     ░ ░     ░ ░    ░   ▒&#xA;      ░        ░  ░    ░  ░ ░  ░  ░      ░  ░    ░  ░    ░  ░     ░  ░&#xA;     ░&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Valhalla is an open source routing engine and accompanying libraries for use with OpenStreetMap data. Valhalla also includes tools like time+distance matrix computation, isochrones, elevation sampling, map matching and tour optimization (Travelling Salesman).&lt;/p&gt; &#xA;&lt;h2&gt;Build Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Linux/MacOs&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;MinGW64&lt;/th&gt; &#xA;   &lt;th&gt;Code Coverage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://circleci.com/gh/valhalla/valhalla/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/valhalla/valhalla/tree/master.svg?style=svg&#34; alt=&#34;Circle CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/valhalla1/valhalla/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/valhalla1/valhalla/_apis/build/status/valhalla.valhalla?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/valhalla/valhalla/workflows/Valhalla%20MinGW%20Build/badge.svg?sanitize=true&#34; alt=&#34;Valhalla MinGW Build&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codecov.io/gh/valhalla/valhalla&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/valhalla/valhalla/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Valhalla, and all of the projects under the Valhalla organization, use the &lt;a href=&#34;https://raw.githubusercontent.com/valhalla/valhalla/master/COPYING&#34;&gt;MIT License&lt;/a&gt;. Avatar/logo by &lt;a href=&#34;https://www.instagram.com/jaykaydraws/&#34;&gt;Jordan&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;There are several key features that we hope can differentiate the Valhalla project from other routing and network analysis engines. They are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open source software, on open source data with a very liberal license. Should allow for transparency in development, encourage contribution and community input, and foster use in other projects.&lt;/li&gt; &#xA; &lt;li&gt;Tiled hierarchical data structure. Should allow users to have a small memory footprint on memory constrained devices, enable offline routing, provide a means for regional extracts and partial updates.&lt;/li&gt; &#xA; &lt;li&gt;Dynamic, runtime costing of edges and vertices within the graph via a plugin architecture. Should allow for customization and alternate route generation.&lt;/li&gt; &#xA; &lt;li&gt;C++ based API. Should allow for cross compilation of the various pieces to enable routing on offline portable devices.&lt;/li&gt; &#xA; &lt;li&gt;A plugin based narrative and manoeuvre generation architecture. Should allow for generation that is customized either to the administrative area or to the target locale.&lt;/li&gt; &#xA; &lt;li&gt;Multi-modal and time-based routes. Should allow for mixing auto, pedestrian, bike and public transportation in the same route or setting a time by which one must arrive at a location.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo Server&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fossgis.de&#34;&gt;FOSSGIS e.V.&lt;/a&gt; hosts a demo server which is open to the public and includes a full planet graph on &lt;a href=&#34;https://valhalla.openstreetmap.de&#34;&gt;https://valhalla.openstreetmap.de&lt;/a&gt; with an &lt;a href=&#34;https://github.com/gis-ops/valhalla-app&#34;&gt;open-source web app&lt;/a&gt;. The HTTP API is accessible on a slightly different subdomain, e.g. &lt;a href=&#34;https://valhalla1.openstreetmap.de/isochrone&#34;&gt;https://valhalla1.openstreetmap.de/isochrone&lt;/a&gt;. Usage of the demo server follows the usual fair-usage policy as OSRM &amp;amp; Nominatim demo servers (somewhat enforced by &lt;a href=&#34;https://github.com/valhalla/valhalla/discussions/3373#discussioncomment-1644713&#34;&gt;rate limits&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Platform Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Valhalla is fully functional on many Linux and Mac OS distributions.&lt;/p&gt; &#xA;&lt;p&gt;In Windows all functionality is not yet fully supported. Building the Valhalla library works flawlessly, as well as the following application modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TOOLS&lt;/code&gt;: utilities to query and benchmark various components&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DATA_TOOLS&lt;/code&gt;: utilities to build input data and handle transit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PYTHON_BINDINGS&lt;/code&gt;: use all actions (route, isochrones, matrix etc) via the Valhalla Python library (needs a full (i.e. development) Python distribution in the &lt;code&gt;PATH&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Organization&lt;/h2&gt; &#xA;&lt;p&gt;The Valhalla organization is comprised of several library modules each responsible for a different function. The layout of the various modules is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/midgard&#34;&gt;Midgard&lt;/a&gt; - Basic geographic and geometric algorithms for use in the various other projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/baldr&#34;&gt;Baldr&lt;/a&gt; - The base data structures for accessing and caching tiled route data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/sif&#34;&gt;Sif&lt;/a&gt; - Library used in costing of graph nodes and edges. This can be used as input to &lt;code&gt;loki&lt;/code&gt; and &lt;code&gt;thor&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/skadi&#34;&gt;Skadi&lt;/a&gt; - Library and service for accessing elevation data. This can be used as input to &lt;code&gt;mjolnir&lt;/code&gt; or as a standalone service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/mjolnir&#34;&gt;Mjolnir&lt;/a&gt; - Tools for turning open data into Valhalla graph tiles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/loki&#34;&gt;Loki&lt;/a&gt; - Library used to search graph tiles and correlate input locations to an entity within a tile. This correlated entity (edge or vertex) can be used as input to &lt;code&gt;thor&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/meili&#34;&gt;Meili&lt;/a&gt; - Library used to for map-matching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/thor&#34;&gt;Thor&lt;/a&gt; - Library used to generate a path through the graph tile hierarchy. This path and attribution along the path can be used as input to &lt;code&gt;odin&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/odin&#34;&gt;Odin&lt;/a&gt; - Library used to generate manoeuvres and narrative based on a path. This set of directions information can be used as input to &lt;code&gt;tyr&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/valhalla/tyr&#34;&gt;Tyr&lt;/a&gt; - Service used to handle http requests for a route communicating with all of the other valhalla APIs. The service will format output from &lt;code&gt;odin&lt;/code&gt; and support json (and eventually protocol buffer) output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/valhalla/tree/master/src&#34;&gt;Tools&lt;/a&gt; - A set command line tools that exercise bits of functionality from the library components above and provide the basis for quality testing and performance benchmarking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valhalla/demos&#34;&gt;Demos&lt;/a&gt; - A set of demos which allows interacting with the service and APIs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation is stored in the &lt;code&gt;docs/&lt;/code&gt; folder in this GitHub repository. It can be viewed at &lt;a href=&#34;https://valhalla.readthedocs.io/&#34;&gt;valhalla.readthedocs.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Checkout our &lt;code&gt;run-*&lt;/code&gt; docker containers here: &lt;a href=&#34;https://hub.docker.com/r/valhalla/valhalla/tags&#34;&gt;https://hub.docker.com/r/valhalla/valhalla/tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Valhalla uses CMake as build system. When compiling with gcc (GNU Compiler Collection), version 5 or newer is supported.&lt;/p&gt; &#xA;&lt;p&gt;Important build options include:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DENABLE_DATA_TOOLS&lt;/code&gt; (&lt;code&gt;On&lt;/code&gt;/&lt;code&gt;Off&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Build the data preprocessing tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DENABLE_PYTHON_BINDINGS&lt;/code&gt; (&lt;code&gt;On&lt;/code&gt;/&lt;code&gt;Off&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Build the python bindings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DENABLE_SERVICES&lt;/code&gt; (&lt;code&gt;On&lt;/code&gt; / &lt;code&gt;Off&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Build the HTTP service&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DBUILD_SHARED_LIBS&lt;/code&gt; (&lt;code&gt;On&lt;/code&gt; / &lt;code&gt;Off&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Build static or shared libraries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DENABLE_COMPILER_WARNINGS&lt;/code&gt; (&lt;code&gt;ON&lt;/code&gt; / &lt;code&gt;OFF&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Build with common compiler warnings (defaults to off)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DENABLE_WERROR&lt;/code&gt; (&lt;code&gt;ON&lt;/code&gt; / &lt;code&gt;OFF&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Treat compiler warnings as errors (defaults to off). Requires &lt;code&gt;-DENABLE_COMPILER_WARNINGS=ON&lt;/code&gt; to take effect.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DENABLE_BENCHMARKS&lt;/code&gt; (&lt;code&gt;ON&lt;/code&gt; / &lt;code&gt;OFF&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Enable microbenchmarking (defaults to on).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DENABLE_SANITIZERS&lt;/code&gt; (&lt;code&gt;ON&lt;/code&gt; / &lt;code&gt;OFF&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Build with all the integrated sanitizers (defaults to off).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DENABLE_ADDRESS_SANITIZER&lt;/code&gt; (&lt;code&gt;ON&lt;/code&gt; / &lt;code&gt;OFF&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Build with address sanitizer (defaults to off).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-DENABLE_UNDEFINED_SANITIZER&lt;/code&gt; (&lt;code&gt;ON&lt;/code&gt; / &lt;code&gt;OFF&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Build with undefined behavior sanitizer (defaults to off).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more build options run the interactive GUI or have a look at the root&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/valhalla/valhalla/master/CMakeLists.txt&#34;&gt;&lt;code&gt;CmakeLists.txt&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd build&#xA;cmake ..&#xA;ccmake ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re building on Apple Silicon and use the Rosetta terminal (see below), you might need to additionally specify the appropriate options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=&#34;x86_64&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from Source - Linux&lt;/h3&gt; &#xA;&lt;p&gt;To install on a Debian or Ubuntu system you need to install its dependencies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo add-apt-repository -y ppa:valhalla-core/valhalla&#xA;sudo apt-get update&#xA;sudo apt-get install -y cmake make libtool pkg-config g++ gcc curl unzip jq lcov protobuf-compiler vim-common locales libcurl4-openssl-dev zlib1g-dev liblz4-dev libprime-server-dev libprotobuf-dev prime-server-bin&#xA;#if you plan to compile with data building support, see below for more info&#xA;sudo apt-get install -y libgeos-dev libgeos++-dev libluajit-5.1-dev libspatialite-dev libsqlite3-dev wget sqlite3 spatialite-bin python3-shapely&#xA;source /etc/lsb-release&#xA;if [[ $(python3 -c &#34;print(int($DISTRIB_RELEASE &amp;gt; 15))&#34;) &amp;gt; 0 ]]; then sudo apt-get install -y libsqlite3-mod-spatialite; fi&#xA;#if you plan to compile with python bindings, see below for more info&#xA;sudo apt-get install -y python-all-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can build and install Valhalla, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# will build to ./build&#xA;cmake -B build -DCMAKE_BUILD_TYPE=Release&#xA;make -C build -j$(nproc)&#xA;sudo make -C build install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from Source - macOS&lt;/h3&gt; &#xA;&lt;h4&gt;Configuring Rosetta for ARM64 MacBook&lt;/h4&gt; &#xA;&lt;p&gt;Check your architecture typing &lt;code&gt;arch&lt;/code&gt; in the terminal. In case the result is &lt;code&gt;arm64&lt;/code&gt; set up Rosetta terminal to emulate x86_64 behavior. Otherwise, skip this step.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Finder &amp;gt; Application &amp;gt; Utilities&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Terminal&lt;/code&gt; and right-click on it, then choose &lt;code&gt;Duplicate&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Rename the duplicated app &lt;code&gt;Rosetta Terminal&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Now select &lt;code&gt;Rosetta Terminal&lt;/code&gt; application, right-click and choose &lt;code&gt;Get Info&lt;/code&gt; .&lt;/li&gt; &#xA; &lt;li&gt;Check the box for &lt;code&gt;Open using Rosetta&lt;/code&gt;, then close the &lt;code&gt;Get Info&lt;/code&gt; window.&lt;/li&gt; &#xA; &lt;li&gt;Make shure you get &lt;code&gt;i386&lt;/code&gt; after typing &lt;code&gt;arch&lt;/code&gt; command in &lt;code&gt;Rosetta Terminal&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Now it fully supports Homebrew and other x86_64 command line applications.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt; in the &lt;code&gt;Rosetta Terminal&lt;/code&gt; app and update the aliases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;alias ibrew=&#39;arch -x86_64 /usr/local/bin/brew&#39;&#34; &amp;gt;&amp;gt; ~/.zshrc&#xA;echo &#34;alias mbrew=&#39;arch -arm64e /opt/homebrew/bin/brew&#39;&#34; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will use them to specify the platform when installing a library. Note: use &lt;code&gt;ibrew&lt;/code&gt; in &lt;code&gt;Rosetta Terminal&lt;/code&gt; to install all dependencies for &lt;code&gt;valhalla&lt;/code&gt; and &lt;code&gt;prime_server&lt;/code&gt; projects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; If when installing packages below you get message &lt;code&gt;attempting to link with file built for macOS-arm64&lt;/code&gt;, you can remove already installed packages for arm64 i.e. &lt;code&gt;mbrew uninstall ...&lt;/code&gt;. Also, if there are problems with individual packages, you can install them from sources e.g. &lt;a href=&#34;https://github.com/libgeos/geos&#34;&gt;geos&lt;/a&gt; or &lt;a href=&#34;https://www.sqlite.org/download.html&#34;&gt;sqlite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; It is possible to build Valhalla natively for Apple Silicon, but some dependencies(e.g. LuaJIT) don&#39;t have stable versions supporting Apple Silicon and have to be built and installed manually from source.&lt;/p&gt; &#xA;&lt;h4&gt;Installing dependencies&lt;/h4&gt; &#xA;&lt;p&gt;To install valhalla on macOS, you need to install its dependencies with &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install dependencies (automake &amp;amp; czmq are required by prime_server)&#xA;brew install automake cmake libtool protobuf-c libspatialite pkg-config sqlite3 jq curl wget czmq lz4 spatialite-tools unzip luajit&#xA;# following packages are needed for running Linux compatible scripts&#xA;brew install bash coreutils binutils&#xA;# Update your PATH env variable to include /usr/local/opt/binutils/bin:/usr/local/opt/coreutils/libexec/gnubin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, clone the Valhalla repository&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recurse-submodules https://github.com/valhalla/valhalla.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, build &lt;a href=&#34;https://github.com/kevinkreiser/prime_server#build-and-install&#34;&gt;&lt;code&gt;prime_server&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After getting the dependencies install it with e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# will build to ./build&#xA;cmake -B build -DCMAKE_BUILD_TYPE=Release&#xA;make -C build -j$(sysctl -n hw.physicalcpu)&#xA;sudo make -C build install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from Source - Windows&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s recommended to work with the following toolset:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio with C++ support&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio Code (easier and lighter to handle)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; to install packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cmake.org/download/&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the following packages with &lt;code&gt;vcpkg&lt;/code&gt; and your platform triplet (e.g. &lt;code&gt;x64-windows&lt;/code&gt;). Note, you can remove all packages after &lt;code&gt;zlib&lt;/code&gt; in &lt;code&gt;.\.vcpkg_deps.txt&lt;/code&gt; if you don&#39;t want to build &lt;code&gt;TOOLS&lt;/code&gt; &amp;amp; &lt;code&gt;DATA_TOOLS&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Basic packages&#xA;git -C C:\path\to\vcpkg checkout f4bd6423&#xA;cd C:\path\to\project&#xA;C:\path\to\vcpkg.exe --triplet x64-windows install &#34;@.vcpkg_deps.txt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Let CMake configure the build with the required modules enabled. &lt;strong&gt;Note&lt;/strong&gt;, you have to manually link LuaJIT for some reason, e.g. the final command for &lt;code&gt;x64&lt;/code&gt; could look like&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;C:\Program Files\CMake\bin\cmake.EXE&#34; --no-warn-unused-cli -DENABLE_TOOLS=ON -DENABLE_DATA_TOOLS=ON -DENABLE_PYTHON_BINDINGS=ON -DENABLE_HTTP=ON -DENABLE_CCACHE=OFF -DENABLE_SERVICES=OFF -DENABLE_BENCHMARKS=OFF -DENABLE_TESTS=OFF -DLUA_LIBRARIES=path\to\vcpkg\installed\x64-windows\lib\lua51.lib -DLUA_INCLUDE_DIR=path\to\vcpkg\installed\x64-windows\include\luajit -DVCPKG_TARGET_TRIPLET=x64-windows -DCMAKE_TOOLCHAIN_FILE=path\to\vcpkg\scripts\buildsystems\vcpkg.cmake -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -Hpath/to/project -Bpath/to/project/build -G &#34;Visual Studio 16 2019&#34; -T host=x64 -A x64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run the build for all targets.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd C:\path\to\project&#xA;cmake -B build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;The following bash should be enough to make some routing data and start a server using it. (Note - if you would like to run an elevation lookup service with Valhalla follow the instructions &lt;a href=&#34;https://raw.githubusercontent.com/valhalla/valhalla/master/docs/elevation.md&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#download some data and make tiles out of it&#xA;#NOTE: you can feed multiple extracts into pbfgraphbuilder&#xA;wget http://download.geofabrik.de/europe/switzerland-latest.osm.pbf http://download.geofabrik.de/europe/liechtenstein-latest.osm.pbf&#xA;#get the config and setup&#xA;mkdir -p valhalla_tiles&#xA;valhalla_build_config --mjolnir-tile-dir ${PWD}/valhalla_tiles --mjolnir-tile-extract ${PWD}/valhalla_tiles.tar --mjolnir-timezone ${PWD}/valhalla_tiles/timezones.sqlite --mjolnir-admin ${PWD}/valhalla_tiles/admins.sqlite &amp;gt; valhalla.json&#xA;#build timezones.sqlite to support time-dependent routing&#xA;valhalla_build_timezones &amp;gt; valhalla_tiles/timezones.sqlite&#xA;#build routing tiles&#xA;#TODO: run valhalla_build_admins?&#xA;valhalla_build_tiles -c valhalla.json switzerland-latest.osm.pbf liechtenstein-latest.osm.pbf&#xA;#tar it up for running the server&#xA;#either run this to build a tile index for faster graph loading times&#xA;valhalla_build_extract -c valhalla.json -v&#xA;#or simply tar up the tiles&#xA;find valhalla_tiles | sort -n | tar cf valhalla_tiles.tar --no-recursion -T -&#xA;&#xA;#grab the demos repo and open up the point and click routing sample&#xA;git clone --depth=1 --recurse-submodules --single-branch --branch=gh-pages https://github.com/valhalla/demos.git&#xA;firefox demos/routing/index-internal.html &amp;amp;&#xA;#NOTE: set the environment pulldown to &#39;localhost&#39; to point it at your own server&#xA;&#xA;#start up the server&#xA;valhalla_service valhalla.json 1&#xA;#curl it directly if you like:&#xA;curl http://localhost:8002/route --data &#39;{&#34;locations&#34;:[{&#34;lat&#34;:47.365109,&#34;lon&#34;:8.546824,&#34;type&#34;:&#34;break&#34;,&#34;city&#34;:&#34;Zürich&#34;,&#34;state&#34;:&#34;Altstadt&#34;},{&#34;lat&#34;:47.108878,&#34;lon&#34;:8.394801,&#34;type&#34;:&#34;break&#34;,&#34;city&#34;:&#34;6037 Root&#34;,&#34;state&#34;:&#34;Untere Waldstrasse&#34;}],&#34;costing&#34;:&#34;auto&#34;,&#34;directions_options&#34;:{&#34;units&#34;:&#34;miles&#34;}}&#39; | jq &#39;.&#39;&#xA;&#xA;#HAVE FUN!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on binaries, see &lt;a href=&#34;https://raw.githubusercontent.com/valhalla/valhalla/master/#command-line-tools&#34;&gt;Command Line Tools&lt;/a&gt; section below and the &lt;a href=&#34;https://raw.githubusercontent.com/valhalla/valhalla/master/docs&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to valhalla. If you would like to report an issue, or even better fix an existing one, please use the &lt;a href=&#34;https://github.com/valhalla/valhalla/issues&#34;&gt;valhalla issue tracker&lt;/a&gt; on GitHub. We organize one hour each week to discuss open pull requests where everyone is welcome to join, see &lt;a href=&#34;https://github.com/valhalla/valhalla/wiki/Open-Review-Days&#34;&gt;our wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to make an improvement to the code, please be aware that all valhalla projects are written mostly in C++11. We use &lt;code&gt;clang-format&lt;/code&gt; v7.0 to format the code. We welcome contributions as pull requests to the &lt;a href=&#34;https://github.com/valhalla/valhalla&#34;&gt;repository&lt;/a&gt; and highly recommend that your pull request include a test to validate the addition/change of functionality.&lt;/p&gt; &#xA;&lt;p&gt;Note that our CI system checks that code formatting is consistent, and the build will fail if formatting rules aren&#39;t followed. Please run &lt;code&gt;./scripts/format.sh&lt;/code&gt; over your code before committing, to auto-format it in the projects preferred style. To spare yourself (and the CIs) pure &lt;code&gt;format&lt;/code&gt; commits, you can register it as a pre-commit hook so it lints your changes in-place (and will fail if files were changed, so you&#39;ll need to stage and commit again):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat ./scripts/format.sh &amp;gt; .git/hooks/pre-commit &amp;amp;&amp;amp; tail -n +7 scripts/error_on_dirty.sh &amp;gt;&amp;gt; .git/hooks/pre-commit&#xA;chmod +x .git/hooks/pre-commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also note that we run some &lt;code&gt;clang-tidy&lt;/code&gt; linting over the code as well (see &lt;code&gt;.clang-tidy&lt;/code&gt; for the list of rules enforced). You can run &lt;code&gt;./scripts/clang-tidy-only-diff.sh&lt;/code&gt; over the code before committing to ensure you haven&#39;t added any of the common problems we check for (Note: &lt;code&gt;./scripts/clang-tidy-only-diff.sh&lt;/code&gt; requires the exitence of a &lt;code&gt;compile_commands.json&lt;/code&gt; database. You can generate this file by running &lt;code&gt;cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=On ... &amp;amp;&amp;amp; make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;scripts/clang-tidy-only-diff.sh&lt;/code&gt; is run in CI and will fail the build if it detects any issues.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, a check with &lt;a href=&#34;https://clang.llvm.org/docs/AddressSanitizer.html&#34;&gt;ASan&lt;/a&gt; is run in CI. We recommend testing with ASan and debug symbols locally prior to commiting, with the &lt;code&gt;-DENABLE_ADDRESS_SANITIZER=ON -DCMAKE_BUILD_TYPE=Debug&lt;/code&gt; flags during cmake configuration. As long as leak sanitizer (which is a part of address sanitizer) is not currently supported across different platforms it is disabled in the CI. You can disable it locally with the environment variable &lt;code&gt;ASAN_OPTIONS=detect_leaks=0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;We highly encourage running and updating the tests to make sure no regressions have been made. We use the Automake test suite to run our tests by simply making the &lt;code&gt;check&lt;/code&gt; target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run an individual test, &lt;code&gt;make run-&amp;lt;test name&amp;gt;&lt;/code&gt; from the build directory or &lt;code&gt;./test/&amp;lt;testname&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may check some notes on &lt;a href=&#34;https://raw.githubusercontent.com/valhalla/valhalla/master/docs/testing.md&#34;&gt;unit tests&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Coverage reports are automatically generated using codecov for each pull request, but you can also build them locally by passing &lt;code&gt;-DENABLE_COVERAGE=On&lt;/code&gt; and running &lt;code&gt;make coverage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Valhalla includes several microbenchmarks which you can build and run using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make benchmarks&#xA;make run-benchmarks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;They are enabled by the &lt;code&gt;-DENABLE_BENCHMARKS=On&lt;/code&gt; CMake flag and are currently only available for Linux and MacOS.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Tools&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;valhalla_service&lt;/code&gt; aka one-shot mode&lt;/h3&gt; &#xA;&lt;p&gt;If you can&#39;t (e.g. Windows Server) or don&#39;t want to have the full-fledged HTTP API running, you can have the (almost) exact same behavior with the &#39;valhalla_service&#39; executable in so-called &#34;one-shot&#34; mode. It&#39;s simple, just pass the config file, the action (route, isochrone, matrix etc) and the stringified JSON request (or alternatively a file containing the request to circumvent shell command length issues):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;valhalla_service valhalla.json isochrone &#39;{&#34;locations&#34;:[{&#34;lat&#34;:42.552448,&#34;lon&#34;:1.564865}],&#34;costing&#34;:&#34;auto&#34;,&#34;contours&#34;:[{&#34;time&#34;:10,&#34;color&#34;:&#34;ff0000&#34;}], &#34;show_locations&#34;:true}&#xA;# Alternatively you can pass a file with the same contents&#xA;valhalla_service valhalla.json isochrone isochrone_request.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s important to note that all Valhalla logs for one-shot mode are piped to &lt;code&gt;stderr&lt;/code&gt; while the actual JSON response will be in &lt;code&gt;stdout&lt;/code&gt;. To completely silence the logs, pass &lt;code&gt;type: &#34;&#34;&lt;/code&gt; to &lt;code&gt;midgard.logging&lt;/code&gt; in the config file.&lt;/p&gt; &#xA;&lt;h3&gt;Batch Script Tool&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/valhalla/valhalla/master/run_route_scripts/README.md&#34;&gt;Batch Run_Route&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ydb-platform/ydb</title>
    <updated>2022-07-08T01:32:05Z</updated>
    <id>tag:github.com,2022-07-08:/ydb-platform/ydb</id>
    <link href="https://github.com/ydb-platform/ydb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YDB server (daemon) source code&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img width=&#34;64&#34; src=&#34;https://raw.githubusercontent.com/ydb-platform/ydb/main/ydb/docs/_assets/logo.svg?sanitize=true&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ydb-platform/ydb/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/py/ydb&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/ydb.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/YDBPlatform&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Telegram-2ba2d9.svg?sanitize=true&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;YDB&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ydb.tech&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://ydb.tech/docs&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://github.com/ydb-platform/ydb&#34;&gt;Official Repository&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/channel/UCHrVUvA1cRakxRP3iwA-yyw&#34;&gt;YouTube Channel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;YDB is an open-source Distributed SQL Database that combines high availability and scalability with strict consistency and ACID transactions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/bxZRUtMAlFI&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ydb-platform/ydb/main/ydb/docs/_assets/ydb-promo-video.png&#34; alt=&#34;YDB Product Video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Main YDB Advantages&lt;/h2&gt; &#xA;&lt;p&gt;YDB is designed from scratch as a response to growing demand for scalable interactive web services. Scalability, strict consistency and effective cross-row transactions were a must for such OLTP-like workload. YDB is built by people with strong background in databases and distributed systems, who had an experience of developing No-SQL database and the Map-Reduce system for one of the largest search engines in the world. We found that YDB&#39;s flexible design allows us to build more services on top of it including persistent queues and virtual block devices.&lt;/p&gt; &#xA;&lt;p&gt;Basic YDB features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fault-tolerant configuration that survive disk, node, rack or even datacenter outage;&lt;/li&gt; &#xA; &lt;li&gt;Horizontal scalability;&lt;/li&gt; &#xA; &lt;li&gt;Automatic disaster recovery with minimum latency disruptions for applications;&lt;/li&gt; &#xA; &lt;li&gt;SQL dialect (YQL) for data manipulation and scheme definition;&lt;/li&gt; &#xA; &lt;li&gt;ACID transactions across multiple nodes and tables with strict consistency.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fault-tolerant Configurations&lt;/h3&gt; &#xA;&lt;p&gt;YDB could be deployed in three availability zones. Cluster remains available for both reads and writes during complete outage of a single zone. Availability zones and regions are covered in more detail &lt;a href=&#34;https://ydb.tech/en/docs/concepts/databases#regions-az&#34;&gt;in documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Horizontal Scalability&lt;/h3&gt; &#xA;&lt;p&gt;Unlike traditional relational databases YDB &lt;a href=&#34;https://en.wikipedia.org/wiki/Scalability#Horizontal_or_scale_out&#34;&gt;scales out&lt;/a&gt; providing developers with capability to simply extend cluster with computation or storage resources to handle increasing load. YDB has desaggregated storage and compute layers which allow you to scale storage and compute resources independently.&lt;/p&gt; &#xA;&lt;p&gt;Current production installations have more than 10,000 nodes, store petabytes of data and handle millions distributed transactions per second.&lt;/p&gt; &#xA;&lt;h3&gt;Automatic Disaster Recovery&lt;/h3&gt; &#xA;&lt;p&gt;YDB has built-in automatic recovery support to survive a hardware failure. After unpredictable disk, node, rack or even datacenter failure YDB remains fully available for reads and writes and restores required data redundancy automatically.&lt;/p&gt; &#xA;&lt;h3&gt;Multitenant and Serverless Database&lt;/h3&gt; &#xA;&lt;p&gt;YDB has support for multitenant and serverless setups. A user can run a YDB cluster and create several databases that share one pool of storage and have different compute nodes. Alternatively a user can run several serverless databases that share one pool of compute resources to utilize them effectively.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;h3&gt;Minimal system requirements&lt;/h3&gt; &#xA;&lt;p&gt;YDB runs on x86 64bit platforms with minimum 8 GB of RAM.&lt;/p&gt; &#xA;&lt;h3&gt;Operating Systems&lt;/h3&gt; &#xA;&lt;p&gt;We have major experience running production systems on 64-bit x86 machines working under Ubuntu Linux.&lt;/p&gt; &#xA;&lt;p&gt;For development purposes we test that YDB could be built and run under latest versions of MacOS and Microsoft Windows on a regular basis.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install YDB using &lt;a href=&#34;https://ydb.tech/en/docs/getting_started/self_hosted/ydb_local&#34;&gt;pre-built executables&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ydb-platform/ydb/main/BUILD.md&#34;&gt;build it from source&lt;/a&gt; or &lt;a href=&#34;https://ydb.tech/en/docs/getting_started/self_hosted/ydb_docker&#34;&gt;use Docker container&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://ydb.tech/en/docs/getting_started/cli&#34;&gt;command line interface&lt;/a&gt; tool to work with scheme and run queries.&lt;/li&gt; &#xA; &lt;li&gt;Start &lt;a href=&#34;https://ydb.tech/en/docs/getting_started/self_hosted/ydb_local&#34;&gt;local cluster&lt;/a&gt; or container and run &lt;a href=&#34;https://ydb.tech/en/docs/yql/reference/&#34;&gt;YQL query&lt;/a&gt; via &lt;a href=&#34;https://ydb.tech/en/docs/getting_started/cli&#34;&gt;YDB CLI&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Access &lt;a href=&#34;https://ydb.tech/en/docs/maintenance/embedded_monitoring/&#34;&gt;Embedded UI&lt;/a&gt; via browser for schema navigation, query execution and other database development related tasks.&lt;/li&gt; &#xA; &lt;li&gt;Run available &lt;a href=&#34;https://ydb.tech/en/docs/reference/ydb-sdk/example/go/&#34;&gt;example application&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Develop an application using &lt;a href=&#34;https://ydb.tech/en/docs/reference/ydb-sdk/&#34;&gt;YDB SDK&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to Build from Source Code&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build server (ydbd) and client (ydb) binaries &lt;a href=&#34;https://raw.githubusercontent.com/ydb-platform/ydb/main/BUILD.md&#34;&gt;from source code&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Deploy&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Deploy a cluster &lt;a href=&#34;https://ydb.tech/en/docs/deploy/orchestrated/concepts&#34;&gt;using Kubernetes&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Deploy a cluster using &lt;a href=&#34;https://ydb.tech/en/docs/getting_started/self_hosted/ydb_local&#34;&gt;pre-built executables&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We are glad to welcome new contributors!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/ydb-platform/ydb/main/CONTRIBUTING.md&#34;&gt;contributor&#39;s guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We can accept your work to YDB after you have signed contributor&#39;s license agreement (aka CLA).&lt;/li&gt; &#xA; &lt;li&gt;Please don&#39;t forget to add a note to your pull request, that you agree to the terms of the CLA.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Success Stories&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at YDB &lt;a href=&#34;https://ydb.tech/&#34;&gt;web site&lt;/a&gt; for the latest success stories and user scenarios.&lt;/p&gt;</summary>
  </entry>
</feed>