<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-09T01:30:21Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>topjohnwu/Magisk</title>
    <updated>2022-06-09T01:30:21Z</updated>
    <id>tag:github.com,2022-06-09:/topjohnwu/Magisk</id>
    <link href="https://github.com/topjohnwu/Magisk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Magic Mask for Android&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/topjohnwu/Magisk/master/docs/images/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/topjohnwu/magisk-files/count/count.json&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?color=green&amp;amp;label=Downloads&amp;amp;query=totalString&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Ftopjohnwu%2Fmagisk-files%2Fcount%2Fcount.json&amp;amp;cacheSeconds=1800&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;This is not an officially supported Google product&lt;/h4&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Magisk is a suite of open source software for customizing Android, supporting devices higher than Android 5.0.&lt;br&gt; Some highlight features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;MagiskSU&lt;/strong&gt;: Provide root access for applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Magisk Modules&lt;/strong&gt;: Modify read-only partitions by installing modules&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MagiskBoot&lt;/strong&gt;: The most complete tool for unpacking and repacking Android boot images&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zygisk&lt;/strong&gt;: Run code in every Android applications&#39; processes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/topjohnwu/Magisk/&#34;&gt;Github&lt;/a&gt; is the only source where you can get official Magisk information and downloads.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/topjohnwu/Magisk/releases/tag/v24.3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Magisk-v24.3-blue&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/topjohnwu/Magisk/releases/tag/v25.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Magisk%20Beta-v25.0-blue&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/topjohnwu/magisk-files/canary/app-release.apk&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Magisk-Canary-red&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/topjohnwu/magisk-files/canary/app-debug.apk&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Magisk-Debug-red&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://topjohnwu.github.io/Magisk/install.html&#34;&gt;Installation Instruction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://topjohnwu.github.io/Magisk/&#34;&gt;Magisk Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.didgeridoohan.com/magisk/HomePage&#34;&gt;Magisk Troubleshoot Wiki&lt;/a&gt; (by &lt;a href=&#34;https://github.com/Didgeridoohan&#34;&gt;@Didgeridoohan&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bug Reports&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Only bug reports from Debug builds will be accepted.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For installation issues, upload both boot image and install logs.&lt;br&gt; For Magisk issues, upload boot logcat or dmesg.&lt;br&gt; For Magisk app crashes, record and upload the logcat when the crash occurs.&lt;/p&gt; &#xA;&lt;h2&gt;Building and Development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Magisk builds on any OS Android Studio supports. Install Android Studio and do the initial setups.&lt;/li&gt; &#xA; &lt;li&gt;Clone sources: &lt;code&gt;git clone --recurse-submodules https://github.com/topjohnwu/Magisk.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Python 3.6+ &lt;br&gt; (Windows only: select &lt;strong&gt;&#39;Add Python to PATH&#39;&lt;/strong&gt; in installer, and run &lt;code&gt;pip install colorama&lt;/code&gt; after install)&lt;/li&gt; &#xA; &lt;li&gt;Configure to use the JDK bundled in Android Studio: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;macOS: &lt;code&gt;export JAVA_HOME=&#34;/Applications/Android Studio.app/Contents/jre/Contents/Home&#34;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Linux: &lt;code&gt;export PATH=&#34;/path/to/androidstudio/jre/bin:$PATH&#34;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: Add &lt;code&gt;C:\Path\To\Android Studio\jre\bin&lt;/code&gt; to environment variable &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set environment variable &lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt; to the Android SDK folder (can be found in Android Studio settings)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./build.py ndk&lt;/code&gt; to let the script download and install NDK for you&lt;/li&gt; &#xA; &lt;li&gt;To start building, run &lt;code&gt;build.py&lt;/code&gt; to see your options. &lt;br&gt; For each action, use &lt;code&gt;-h&lt;/code&gt; to access help (e.g. &lt;code&gt;./build.py all -h&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;To start development, open the project with Android Studio. The IDE can be used for both app (Kotlin/Java) and native (C++/C) sources.&lt;/li&gt; &#xA; &lt;li&gt;Optionally, set custom configs with &lt;code&gt;config.prop&lt;/code&gt;. A sample &lt;code&gt;config.prop.sample&lt;/code&gt; is provided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Signing and Distribution&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The certificate of the key used to sign the final Magisk APK product is also directly embedded into some executables. In release builds, Magisk&#39;s root daemon will enforce this certificate check and reject and forcefully uninstall any non-matching Magisk apps to protect users from malicious and unverified Magisk APKs.&lt;/li&gt; &#xA; &lt;li&gt;To do any development on Magisk itself, switch to an &lt;strong&gt;official debug build and reinstall Magisk&lt;/strong&gt; to bypass the signature check.&lt;/li&gt; &#xA; &lt;li&gt;To distribute your own Magisk builds signed with your own keys, set your signing configs in &lt;code&gt;config.prop&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://developer.android.com/studio/publish/app-signing.html#generate-key&#34;&gt;Google&#39;s Documentation&lt;/a&gt; for more details on generating your own key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Translation Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Default string resources for the Magisk app and its stub APK are located here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;app/src/main/res/values/strings.xml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stub/src/main/res/values/strings.xml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Translate each and place them in the respective locations (&lt;code&gt;[module]/src/main/res/values-[lang]/strings.xml&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Magisk, including all git submodules are free software:&#xA;you can redistribute it and/or modify it under the terms of the&#xA;GNU General Public License as published by the Free Software Foundation,&#xA;either version 3 of the License, or (at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>gabime/spdlog</title>
    <updated>2022-06-09T01:30:21Z</updated>
    <id>tag:github.com,2022-06-09:/gabime/spdlog</id>
    <link href="https://github.com/gabime/spdlog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast C++ logging library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;spdlog&lt;/h1&gt; &#xA;&lt;p&gt;Very fast, header-only/compiled, C++ logging library. &lt;a href=&#34;https://app.travis-ci.com/gabime/spdlog&#34;&gt;&lt;img src=&#34;https://app.travis-ci.com/gabime/spdlog.svg?branch=v1.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://ci.appveyor.com/project/gabime/spdlog&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/d2jnxclg20vd0o50?svg=true&amp;amp;branch=v1.x&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gabime/spdlog/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/gabime/spdlog.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h4&gt;Header only version&lt;/h4&gt; &#xA;&lt;p&gt;Copy the include &lt;a href=&#34;https://github.com/gabime/spdlog/tree/v1.x/include/spdlog&#34;&gt;folder&lt;/a&gt; to your build tree and use a C++11 compiler.&lt;/p&gt; &#xA;&lt;h4&gt;Static lib version (recommended - much faster compile times)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git clone https://github.com/gabime/spdlog.git&#xA;$ cd spdlog &amp;amp;&amp;amp; mkdir build &amp;amp;&amp;amp; cd build&#xA;$ cmake .. &amp;amp;&amp;amp; make -j&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see example &lt;a href=&#34;https://github.com/gabime/spdlog/raw/v1.x/example/CMakeLists.txt&#34;&gt;CMakeLists.txt&lt;/a&gt; on how to use.&lt;/p&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux, FreeBSD, OpenBSD, Solaris, AIX&lt;/li&gt; &#xA; &lt;li&gt;Windows (msvc 2013+, cygwin)&lt;/li&gt; &#xA; &lt;li&gt;macOS (clang 3.5+)&lt;/li&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Package managers:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debian: &lt;code&gt;sudo apt install libspdlog-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Homebrew: &lt;code&gt;brew install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;MacPorts: &lt;code&gt;sudo port install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD: &lt;code&gt;pkg install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fedora: &lt;code&gt;dnf install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gentoo: &lt;code&gt;emerge dev-libs/spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arch Linux: &lt;code&gt;pacman -S spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;vcpkg: &lt;code&gt;vcpkg install spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;conan: &lt;code&gt;spdlog/[&amp;gt;=1.4.1]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;conda: &lt;code&gt;conda install -c conda-forge spdlog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;build2: &lt;code&gt;depends: spdlog ^1.8.2&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very fast (see &lt;a href=&#34;https://raw.githubusercontent.com/gabime/spdlog/v1.x/#benchmarks&#34;&gt;benchmarks&lt;/a&gt; below).&lt;/li&gt; &#xA; &lt;li&gt;Headers only or compiled&lt;/li&gt; &#xA; &lt;li&gt;Feature rich formatting, using the excellent &lt;a href=&#34;https://github.com/fmtlib/fmt&#34;&gt;fmt&lt;/a&gt; library.&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous mode (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gabime/spdlog/wiki/3.-Custom-formatting&#34;&gt;Custom&lt;/a&gt; formatting.&lt;/li&gt; &#xA; &lt;li&gt;Multi/Single threaded loggers.&lt;/li&gt; &#xA; &lt;li&gt;Various log targets: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rotating log files.&lt;/li&gt; &#xA;   &lt;li&gt;Daily log files.&lt;/li&gt; &#xA;   &lt;li&gt;Console logging (colors supported).&lt;/li&gt; &#xA;   &lt;li&gt;syslog.&lt;/li&gt; &#xA;   &lt;li&gt;Windows event log.&lt;/li&gt; &#xA;   &lt;li&gt;Windows debugger (&lt;code&gt;OutputDebugString(..)&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Easily &lt;a href=&#34;https://github.com/gabime/spdlog/wiki/4.-Sinks#implementing-your-own-sink&#34;&gt;extendable&lt;/a&gt; with custom log targets.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Log filtering - log levels can be modified in runtime as well as in compile time.&lt;/li&gt; &#xA; &lt;li&gt;Support for loading log levels from argv or from environment var.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gabime/spdlog/v1.x/#backtrace-support&#34;&gt;Backtrace&lt;/a&gt; support - store debug messages in a ring buffer and display later on demand.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage samples&lt;/h2&gt; &#xA;&lt;h4&gt;Basic usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/spdlog.h&#34;&#xA;&#xA;int main() &#xA;{&#xA;    spdlog::info(&#34;Welcome to spdlog!&#34;);&#xA;    spdlog::error(&#34;Some error message with arg: {}&#34;, 1);&#xA;    &#xA;    spdlog::warn(&#34;Easy padding in numbers like {:08d}&#34;, 12);&#xA;    spdlog::critical(&#34;Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}&#34;, 42);&#xA;    spdlog::info(&#34;Support for floats {:03.2f}&#34;, 1.23456);&#xA;    spdlog::info(&#34;Positional args are {1} {0}..&#34;, &#34;too&#34;, &#34;supported&#34;);&#xA;    spdlog::info(&#34;{:&amp;lt;30}&#34;, &#34;left aligned&#34;);&#xA;    &#xA;    spdlog::set_level(spdlog::level::debug); // Set global log level to debug&#xA;    spdlog::debug(&#34;This message should be displayed..&#34;);    &#xA;    &#xA;    // change log pattern&#xA;    spdlog::set_pattern(&#34;[%H:%M:%S %z] [%n] [%^---%L---%$] [thread %t] %v&#34;);&#xA;    &#xA;    // Compile time log levels&#xA;    // define SPDLOG_ACTIVE_LEVEL to desired level&#xA;    SPDLOG_TRACE(&#34;Some trace message with param {}&#34;, 42);&#xA;    SPDLOG_DEBUG(&#34;Some debug message&#34;);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Create stdout/stderr logger object&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/spdlog.h&#34;&#xA;#include &#34;spdlog/sinks/stdout_color_sinks.h&#34;&#xA;void stdout_example()&#xA;{&#xA;    // create color multi threaded logger&#xA;    auto console = spdlog::stdout_color_mt(&#34;console&#34;);    &#xA;    auto err_logger = spdlog::stderr_color_mt(&#34;stderr&#34;);    &#xA;    spdlog::get(&#34;console&#34;)-&amp;gt;info(&#34;loggers can be retrieved from a global registry using the spdlog::get(logger_name)&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Basic file logger&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/basic_file_sink.h&#34;&#xA;void basic_logfile_example()&#xA;{&#xA;    try &#xA;    {&#xA;        auto logger = spdlog::basic_logger_mt(&#34;basic_logger&#34;, &#34;logs/basic-log.txt&#34;);&#xA;    }&#xA;    catch (const spdlog::spdlog_ex &amp;amp;ex)&#xA;    {&#xA;        std::cout &amp;lt;&amp;lt; &#34;Log init failed: &#34; &amp;lt;&amp;lt; ex.what() &amp;lt;&amp;lt; std::endl;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Rotating files&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/rotating_file_sink.h&#34;&#xA;void rotating_example()&#xA;{&#xA;    // Create a file rotating logger with 5mb size max and 3 rotated files&#xA;    auto max_size = 1048576 * 5;&#xA;    auto max_files = 3;&#xA;    auto logger = spdlog::rotating_logger_mt(&#34;some_logger_name&#34;, &#34;logs/rotating.txt&#34;, max_size, max_files);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Daily files&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;&#xA;#include &#34;spdlog/sinks/daily_file_sink.h&#34;&#xA;void daily_example()&#xA;{&#xA;    // Create a daily logger - a new file is created every day on 2:30am&#xA;    auto logger = spdlog::daily_logger_mt(&#34;daily_logger&#34;, &#34;logs/daily.txt&#34;, 2, 30);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Backtrace support&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Debug messages can be stored in a ring buffer instead of being logged immediately.&#xA;// This is useful in order to display debug logs only when really needed (e.g. when error happens).&#xA;// When needed, call dump_backtrace() to see them.&#xA;&#xA;spdlog::enable_backtrace(32); // Store the latest 32 messages in a buffer. Older messages will be dropped.&#xA;// or my_logger-&amp;gt;enable_backtrace(32)..&#xA;for(int i = 0; i &amp;lt; 100; i++)&#xA;{&#xA;  spdlog::debug(&#34;Backtrace message {}&#34;, i); // not logged yet..&#xA;}&#xA;// e.g. if some error happened:&#xA;spdlog::dump_backtrace(); // log them now! show the last 32 messages&#xA;&#xA;// or my_logger-&amp;gt;dump_backtrace(32)..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Periodic flush&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// periodically flush all *registered* loggers every 3 seconds:&#xA;// warning: only use if all your loggers are thread safe (&#34;_mt&#34; loggers)&#xA;spdlog::flush_every(std::chrono::seconds(3));&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Stopwatch&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Stopwatch support for spdlog&#xA;#include &#34;spdlog/stopwatch.h&#34;&#xA;void stopwatch_example()&#xA;{&#xA;    spdlog::stopwatch sw;    &#xA;    spdlog::debug(&#34;Elapsed {}&#34;, sw);&#xA;    spdlog::debug(&#34;Elapsed {:.3}&#34;, sw);       &#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Log binary data in hex&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// many types of std::container&amp;lt;char&amp;gt; types can be used.&#xA;// ranges are supported too.&#xA;// format flags:&#xA;// {:X} - print in uppercase.&#xA;// {:s} - don&#39;t separate each byte with space.&#xA;// {:p} - don&#39;t print the position on each line start.&#xA;// {:n} - don&#39;t split the output to lines.&#xA;// {:a} - show ASCII if :n is not set.&#xA;&#xA;#include &#34;spdlog/fmt/bin_to_hex.h&#34;&#xA;&#xA;void binary_example()&#xA;{&#xA;    auto console = spdlog::get(&#34;console&#34;);&#xA;    std::array&amp;lt;char, 80&amp;gt; buf;&#xA;    console-&amp;gt;info(&#34;Binary example: {}&#34;, spdlog::to_hex(buf));&#xA;    console-&amp;gt;info(&#34;Another binary example:{:n}&#34;, spdlog::to_hex(std::begin(buf), std::begin(buf) + 10));&#xA;    // more examples:&#xA;    // logger-&amp;gt;info(&#34;uppercase: {:X}&#34;, spdlog::to_hex(buf));&#xA;    // logger-&amp;gt;info(&#34;uppercase, no delimiters: {:Xs}&#34;, spdlog::to_hex(buf));&#xA;    // logger-&amp;gt;info(&#34;uppercase, no delimiters, no position info: {:Xsp}&#34;, spdlog::to_hex(buf));&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Logger with multi sinks - each with different format and log level&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;&#xA;// create logger with 2 targets with different log levels and formats.&#xA;// the console will show only warnings or errors, while the file will log all.&#xA;void multi_sink_example()&#xA;{&#xA;    auto console_sink = std::make_shared&amp;lt;spdlog::sinks::stdout_color_sink_mt&amp;gt;();&#xA;    console_sink-&amp;gt;set_level(spdlog::level::warn);&#xA;    console_sink-&amp;gt;set_pattern(&#34;[multi_sink_example] [%^%l%$] %v&#34;);&#xA;&#xA;    auto file_sink = std::make_shared&amp;lt;spdlog::sinks::basic_file_sink_mt&amp;gt;(&#34;logs/multisink.txt&#34;, true);&#xA;    file_sink-&amp;gt;set_level(spdlog::level::trace);&#xA;&#xA;    spdlog::logger logger(&#34;multi_sink&#34;, {console_sink, file_sink});&#xA;    logger.set_level(spdlog::level::debug);&#xA;    logger.warn(&#34;this should appear in both console and file&#34;);&#xA;    logger.info(&#34;this message should not appear in the console, only in the file&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Asynchronous logging&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/async.h&#34;&#xA;#include &#34;spdlog/sinks/basic_file_sink.h&#34;&#xA;void async_example()&#xA;{&#xA;    // default thread pool settings can be modified *before* creating the async logger:&#xA;    // spdlog::init_thread_pool(8192, 1); // queue with 8k items and 1 backing thread.&#xA;    auto async_file = spdlog::basic_logger_mt&amp;lt;spdlog::async_factory&amp;gt;(&#34;async_file_logger&#34;, &#34;logs/async_log.txt&#34;);&#xA;    // alternatively:&#xA;    // auto async_file = spdlog::create_async&amp;lt;spdlog::sinks::basic_file_sink_mt&amp;gt;(&#34;async_file_logger&#34;, &#34;logs/async_log.txt&#34;);   &#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Asynchronous logger with multi sinks&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/stdout_color_sinks.h&#34;&#xA;#include &#34;spdlog/sinks/rotating_file_sink.h&#34;&#xA;&#xA;void multi_sink_example2()&#xA;{&#xA;    spdlog::init_thread_pool(8192, 1);&#xA;    auto stdout_sink = std::make_shared&amp;lt;spdlog::sinks::stdout_color_sink_mt &amp;gt;();&#xA;    auto rotating_sink = std::make_shared&amp;lt;spdlog::sinks::rotating_file_sink_mt&amp;gt;(&#34;mylog.txt&#34;, 1024*1024*10, 3);&#xA;    std::vector&amp;lt;spdlog::sink_ptr&amp;gt; sinks {stdout_sink, rotating_sink};&#xA;    auto logger = std::make_shared&amp;lt;spdlog::async_logger&amp;gt;(&#34;loggername&#34;, sinks.begin(), sinks.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);&#xA;    spdlog::register_logger(logger);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;User defined types&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// user defined types logging by implementing operator&amp;lt;&amp;lt;&#xA;#include &#34;spdlog/fmt/ostr.h&#34; // must be included&#xA;struct my_type&#xA;{&#xA;    int i;&#xA;    template&amp;lt;typename OStream&amp;gt;&#xA;    friend OStream &amp;amp;operator&amp;lt;&amp;lt;(OStream &amp;amp;os, const my_type &amp;amp;c)&#xA;    {&#xA;        return os &amp;lt;&amp;lt; &#34;[my_type i=&#34; &amp;lt;&amp;lt; c.i &amp;lt;&amp;lt; &#34;]&#34;;&#xA;    }&#xA;};&#xA;&#xA;void user_defined_example()&#xA;{&#xA;    spdlog::get(&#34;console&#34;)-&amp;gt;info(&#34;user defined type: {}&#34;, my_type{14});&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;User defined flags in the log pattern&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Log patterns can contain custom flags.&#xA;// the following example will add new flag &#39;%*&#39; - which will be bound to a &amp;lt;my_formatter_flag&amp;gt; instance.&#xA;#include &#34;spdlog/pattern_formatter.h&#34;&#xA;class my_formatter_flag : public spdlog::custom_flag_formatter&#xA;{&#xA;public:&#xA;    void format(const spdlog::details::log_msg &amp;amp;, const std::tm &amp;amp;, spdlog::memory_buf_t &amp;amp;dest) override&#xA;    {&#xA;        std::string some_txt = &#34;custom-flag&#34;;&#xA;        dest.append(some_txt.data(), some_txt.data() + some_txt.size());&#xA;    }&#xA;&#xA;    std::unique_ptr&amp;lt;custom_flag_formatter&amp;gt; clone() const override&#xA;    {&#xA;        return spdlog::details::make_unique&amp;lt;my_formatter_flag&amp;gt;();&#xA;    }&#xA;};&#xA;&#xA;void custom_flags_example()&#xA;{    &#xA;    auto formatter = std::make_unique&amp;lt;spdlog::pattern_formatter&amp;gt;();&#xA;    formatter-&amp;gt;add_flag&amp;lt;my_formatter_flag&amp;gt;(&#39;*&#39;).set_pattern(&#34;[%n] [%*] [%^%l%$] %v&#34;);&#xA;    spdlog::set_formatter(std::move(formatter));&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Custom error handler&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void err_handler_example()&#xA;{&#xA;    // can be set globally or per logger(logger-&amp;gt;set_error_handler(..))&#xA;    spdlog::set_error_handler([](const std::string &amp;amp;msg) { spdlog::get(&#34;console&#34;)-&amp;gt;error(&#34;*** LOGGER ERROR ***: {}&#34;, msg); });&#xA;    spdlog::get(&#34;console&#34;)-&amp;gt;info(&#34;some invalid message to trigger an error {}{}{}{}&#34;, 3);&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;syslog&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/syslog_sink.h&#34;&#xA;void syslog_example()&#xA;{&#xA;    std::string ident = &#34;spdlog-example&#34;;&#xA;    auto syslog_logger = spdlog::syslog_logger_mt(&#34;syslog&#34;, ident, LOG_PID);&#xA;    syslog_logger-&amp;gt;warn(&#34;This is warning that will end up in syslog.&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Android example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/sinks/android_sink.h&#34;&#xA;void android_example()&#xA;{&#xA;    std::string tag = &#34;spdlog-android&#34;;&#xA;    auto android_logger = spdlog::android_logger_mt(&#34;android&#34;, tag);&#xA;    android_logger-&amp;gt;critical(&#34;Use \&#34;adb shell logcat\&#34; to view this message.&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Load log levels from env variable or from argv&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;spdlog/cfg/env.h&#34;&#xA;int main (int argc, char *argv[])&#xA;{&#xA;    spdlog::cfg::load_env_levels();&#xA;    // or from command line:&#xA;    // ./example SPDLOG_LEVEL=info,mylogger=trace&#xA;    // #include &#34;spdlog/cfg/argv.h&#34; // for loading levels from argv&#xA;    // spdlog::cfg::load_argv_levels(argc, argv);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So then you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export SPDLOG_LEVEL=info,mylogger=trace&#xA;$ ./example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Log file open/close event handlers&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// You can get callbacks from spdlog before/after log file has been opened or closed. &#xA;// This is useful for cleanup procedures or for adding someting the start/end of the log files.&#xA;void file_events_example()&#xA;{&#xA;    // pass the spdlog::file_event_handlers to file sinks for open/close log file notifications&#xA;    spdlog::file_event_handlers handlers;&#xA;    handlers.before_open = [](spdlog::filename_t filename) { spdlog::info(&#34;Before opening {}&#34;, filename); };&#xA;    handlers.after_open = [](spdlog::filename_t filename, std::FILE *fstream) { fputs(&#34;After opening\n&#34;, fstream); };&#xA;    handlers.before_close = [](spdlog::filename_t filename, std::FILE *fstream) { fputs(&#34;Before closing\n&#34;, fstream); };&#xA;    handlers.after_close = [](spdlog::filename_t filename) { spdlog::info(&#34;After closing {}&#34;, filename); };&#xA;    auto my_logger = spdlog::basic_logger_st(&#34;some_logger&#34;, &#34;logs/events-sample.txt&#34;, true, handlers);        &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Replace the Default Logger&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void replace_default_logger_example()&#xA;{&#xA;    auto new_logger = spdlog::basic_logger_mt(&#34;new_default_logger&#34;, &#34;logs/new-default-log.txt&#34;, true);&#xA;    spdlog::set_default_logger(new_logger);&#xA;    spdlog::info(&#34;new logger log message&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Below are some &lt;a href=&#34;https://github.com/gabime/spdlog/raw/v1.x/bench/bench.cpp&#34;&gt;benchmarks&lt;/a&gt; done in Ubuntu 64 bit, Intel i7-4770 CPU @ 3.40GHz&lt;/p&gt; &#xA;&lt;h4&gt;Synchronous mode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;[info] **************************************************************&#xA;[info] Single thread, 1,000,000 iterations&#xA;[info] **************************************************************&#xA;[info] basic_st         Elapsed: 0.17 secs        5,777,626/sec&#xA;[info] rotating_st      Elapsed: 0.18 secs        5,475,894/sec&#xA;[info] daily_st         Elapsed: 0.20 secs        5,062,659/sec&#xA;[info] empty_logger     Elapsed: 0.07 secs       14,127,300/sec&#xA;[info] **************************************************************&#xA;[info] C-string (400 bytes). Single thread, 1,000,000 iterations&#xA;[info] **************************************************************&#xA;[info] basic_st         Elapsed: 0.41 secs        2,412,483/sec&#xA;[info] rotating_st      Elapsed: 0.72 secs        1,389,196/sec&#xA;[info] daily_st         Elapsed: 0.42 secs        2,393,298/sec&#xA;[info] null_st          Elapsed: 0.04 secs       27,446,957/sec&#xA;[info] **************************************************************&#xA;[info] 10 threads, competing over the same logger object, 1,000,000 iterations&#xA;[info] **************************************************************&#xA;[info] basic_mt         Elapsed: 0.60 secs        1,659,613/sec&#xA;[info] rotating_mt      Elapsed: 0.62 secs        1,612,493/sec&#xA;[info] daily_mt         Elapsed: 0.61 secs        1,638,305/sec&#xA;[info] null_mt          Elapsed: 0.16 secs        6,272,758/sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Asynchronous mode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;[info] -------------------------------------------------&#xA;[info] Messages     : 1,000,000&#xA;[info] Threads      : 10&#xA;[info] Queue        : 8,192 slots&#xA;[info] Queue memory : 8,192 x 272 = 2,176 KB &#xA;[info] -------------------------------------------------&#xA;[info] &#xA;[info] *********************************&#xA;[info] Queue Overflow Policy: block&#xA;[info] *********************************&#xA;[info] Elapsed: 1.70784 secs     585,535/sec&#xA;[info] Elapsed: 1.69805 secs     588,910/sec&#xA;[info] Elapsed: 1.7026 secs      587,337/sec&#xA;[info] &#xA;[info] *********************************&#xA;[info] Queue Overflow Policy: overrun&#xA;[info] *********************************&#xA;[info] Elapsed: 0.372816 secs    2,682,285/sec&#xA;[info] Elapsed: 0.379758 secs    2,633,255/sec&#xA;[info] Elapsed: 0.373532 secs    2,677,147/sec&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be found in the &lt;a href=&#34;https://github.com/gabime/spdlog/wiki/1.-QuickStart&#34;&gt;wiki&lt;/a&gt; pages.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://www.jetbrains.com/?from=spdlog&#34;&gt;JetBrains&lt;/a&gt; for donating product licenses to help develop &lt;strong&gt;spdlog&lt;/strong&gt; &lt;a href=&#34;https://www.jetbrains.com/?from=spdlog&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gabime/spdlog/v1.x/logos/jetbrains-variant-4.svg?sanitize=true&#34; width=&#34;94&#34; align=&#34;center&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tesseract-ocr/tesseract</title>
    <updated>2022-06-09T01:30:21Z</updated>
    <id>tag:github.com,2022-06-09:/tesseract-ocr/tesseract</id>
    <link href="https://github.com/tesseract-ocr/tesseract" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tesseract Open Source OCR Engine (main repository)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tesseract OCR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/zdenop/tesseract/&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/miah0ikfsf0j3819/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/tesseract-ocr/tesseract/workflows/sw/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;br&gt; &lt;a href=&#34;https://scan.coverity.com/projects/tesseract-ocr&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/tesseract-ocr/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/tesseract-ocr/tesseract/context:cpp&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/cpp/g/tesseract-ocr/tesseract.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Code Quality: Cpp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/tesseract-ocr/tesseract/alerts&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/tesseract-ocr/tesseract.svg?logo=lgtm&amp;amp;logoWidth=18&#34; alt=&#34;Total Alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=2&amp;amp;q=proj:tesseract-ocr&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/oss--fuzz-fuzzing-brightgreen&#34; alt=&#34;OSS-Fuzz&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tesseract-ocr/tesseract/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache--2.0-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/download-all%20releases-brightgreen.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tesseract-ocr/tesseract/main/#tesseract-ocr&#34;&gt;Tesseract OCR&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tesseract-ocr/tesseract/main/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tesseract-ocr/tesseract/main/#brief-history&#34;&gt;Brief history&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tesseract-ocr/tesseract/main/#installing-tesseract&#34;&gt;Installing Tesseract&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tesseract-ocr/tesseract/main/#running-tesseract&#34;&gt;Running Tesseract&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tesseract-ocr/tesseract/main/#for-developers&#34;&gt;For developers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tesseract-ocr/tesseract/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tesseract-ocr/tesseract/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tesseract-ocr/tesseract/main/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tesseract-ocr/tesseract/main/#latest-version-of-readme&#34;&gt;Latest Version of README&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This package contains an &lt;strong&gt;OCR engine&lt;/strong&gt; - &lt;code&gt;libtesseract&lt;/code&gt; and a &lt;strong&gt;command line program&lt;/strong&gt; - &lt;code&gt;tesseract&lt;/code&gt;. Tesseract 4 adds a new neural net (LSTM) based OCR engine which is focused on line recognition, but also still supports the legacy Tesseract OCR engine of Tesseract 3 which works by recognizing character patterns. Compatibility with Tesseract 3 is enabled by using the Legacy OCR Engine mode (--oem 0). It also needs &lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/Data-Files.html&#34;&gt;traineddata&lt;/a&gt; files which support the legacy engine, for example those from the &lt;a href=&#34;https://github.com/tesseract-ocr/tessdata&#34;&gt;tessdata&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;The lead developer is Ray Smith. The maintainer is Zdenko Podobny. For a list of contributors see &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/raw/main/AUTHORS&#34;&gt;AUTHORS&lt;/a&gt; and GitHub&#39;s log of &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Tesseract has &lt;strong&gt;unicode (UTF-8) support&lt;/strong&gt;, and can &lt;strong&gt;recognize more than 100 languages&lt;/strong&gt; &#34;out of the box&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Tesseract supports &lt;strong&gt;various output formats&lt;/strong&gt;: plain text, hOCR (HTML), PDF, invisible-text-only PDF, TSV and ALTO (the last one - since version 4.1.0).&lt;/p&gt; &#xA;&lt;p&gt;You should note that in many cases, in order to get better OCR results, you&#39;ll need to &lt;strong&gt;&lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/ImproveQuality.html&#34;&gt;improve the quality&lt;/a&gt; of the image&lt;/strong&gt; you are giving Tesseract.&lt;/p&gt; &#xA;&lt;p&gt;This project &lt;strong&gt;does not include a GUI application&lt;/strong&gt;. If you need one, please see the &lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/User-Projects-%E2%80%93-3rdParty.html&#34;&gt;3rdParty&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;p&gt;Tesseract &lt;strong&gt;can be trained to recognize other languages&lt;/strong&gt;. See &lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/Training-Tesseract.html&#34;&gt;Tesseract Training&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Brief history&lt;/h2&gt; &#xA;&lt;p&gt;Tesseract was originally developed at Hewlett-Packard Laboratories Bristol and at Hewlett-Packard Co, Greeley Colorado between 1985 and 1994, with some more changes made in 1996 to port to Windows, and some C++izing in 1998. In 2005 Tesseract was open sourced by HP. From 2006 until November 2018 it was developed by Google.&lt;/p&gt; &#xA;&lt;p&gt;Major version 5 is the current stable version and started with release &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/releases/tag/5.0.0&#34;&gt;5.0.0&lt;/a&gt; on November 30, 2021. Newer minor versions and bugfix versions are available from &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/releases/&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Latest source code is available from &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/tree/main&#34;&gt;main branch on GitHub&lt;/a&gt;. Open issues can be found in &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/issues&#34;&gt;issue tracker&lt;/a&gt;, and &lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/Planning.html&#34;&gt;planning documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;strong&gt;&lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/ReleaseNotes.html&#34;&gt;Release Notes&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/raw/main/ChangeLog&#34;&gt;Change Log&lt;/a&gt;&lt;/strong&gt; for more details of the releases.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Tesseract&lt;/h2&gt; &#xA;&lt;p&gt;You can either &lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/Home.html&#34;&gt;Install Tesseract via pre-built binary package&lt;/a&gt; or &lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/Compiling.html&#34;&gt;build it from source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A C++ compiler with good C++17 support is required for building Tesseract from source.&lt;/p&gt; &#xA;&lt;h2&gt;Running Tesseract&lt;/h2&gt; &#xA;&lt;p&gt;Basic &lt;strong&gt;&lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/Command-Line-Usage.html&#34;&gt;command line usage&lt;/a&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tesseract imagename outputbase [-l lang] [--oem ocrenginemode] [--psm pagesegmode] [configfiles...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about the various command line options use &lt;code&gt;tesseract --help&lt;/code&gt; or &lt;code&gt;man tesseract&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Examples can be found in the &lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/Command-Line-Usage.html#simplest-invocation-to-ocr-an-image&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;For developers&lt;/h2&gt; &#xA;&lt;p&gt;Developers can use &lt;code&gt;libtesseract&lt;/code&gt; &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/raw/main/include/tesseract/capi.h&#34;&gt;C&lt;/a&gt; or &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/raw/main/include/tesseract/baseapi.h&#34;&gt;C++&lt;/a&gt; API to build their own application. If you need bindings to &lt;code&gt;libtesseract&lt;/code&gt; for other programming languages, please see the &lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/AddOns.html#tesseract-wrappers&#34;&gt;wrapper&lt;/a&gt; section in the AddOns documentation.&lt;/p&gt; &#xA;&lt;p&gt;Documentation of Tesseract generated from source code by doxygen can be found on &lt;a href=&#34;https://tesseract-ocr.github.io/&#34;&gt;tesseract-ocr.github.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Before you submit an issue, please review &lt;strong&gt;&lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/raw/main/CONTRIBUTING.md&#34;&gt;the guidelines for this repository&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For support, first read the &lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/&#34;&gt;documentation&lt;/a&gt;, particularly the &lt;a href=&#34;https://tesseract-ocr.github.io/tessdoc/FAQ.html&#34;&gt;FAQ&lt;/a&gt; to see if your problem is addressed there. If not, search the &lt;a href=&#34;https://groups.google.com/g/tesseract-ocr&#34;&gt;Tesseract user forum&lt;/a&gt;, the &lt;a href=&#34;https://groups.google.com/g/tesseract-dev&#34;&gt;Tesseract developer forum&lt;/a&gt; and &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/issues&#34;&gt;past issues&lt;/a&gt;, and if you still can&#39;t find what you need, ask for support in the mailing-lists.&lt;/p&gt; &#xA;&lt;p&gt;Mailing-lists:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/tesseract-ocr&#34;&gt;tesseract-ocr&lt;/a&gt; - For tesseract users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/tesseract-dev&#34;&gt;tesseract-dev&lt;/a&gt; - For tesseract developers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please report an issue only for a &lt;strong&gt;bug&lt;/strong&gt;, not for asking questions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;The code in this repository is licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This software depends on other packages that may be licensed under different open source licenses.&lt;/p&gt; &#xA;&lt;p&gt;Tesseract uses &lt;a href=&#34;http://leptonica.com/&#34;&gt;Leptonica library&lt;/a&gt; which essentially uses a &lt;a href=&#34;http://leptonica.com/about-the-license.html&#34;&gt;BSD 2-clause license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Tesseract uses &lt;a href=&#34;https://github.com/DanBloomberg/leptonica&#34;&gt;Leptonica library&lt;/a&gt; for opening input images (e.g. not documents like pdf). It is suggested to use leptonica with built-in support for &lt;a href=&#34;https://zlib.net&#34;&gt;zlib&lt;/a&gt;, &lt;a href=&#34;https://sourceforge.net/projects/libpng&#34;&gt;png&lt;/a&gt; and &lt;a href=&#34;http://www.simplesystems.org/libtiff&#34;&gt;tiff&lt;/a&gt; (for multipage tiff).&lt;/p&gt; &#xA;&lt;h2&gt;Latest Version of README&lt;/h2&gt; &#xA;&lt;p&gt;For the latest online version of the README.md see:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tesseract-ocr/tesseract/raw/main/README.md&#34;&gt;https://github.com/tesseract-ocr/tesseract/blob/main/README.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>