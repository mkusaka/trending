<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:33:59Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hunar4321/life_code</title>
    <updated>2022-08-28T01:33:59Z</updated>
    <id>tag:github.com,2022-08-28:/hunar4321/life_code</id>
    <link href="https://github.com/hunar4321/life_code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple program to simulate attraction/reuplsion forces between many particles&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/hunar4321/life_code&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/hunar4321/life_code&#34; alt=&#34;GitHub&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Particle Life Simulation&lt;/h1&gt; &#xA;&lt;p&gt;A simple program to simulate primitive Artificial Life using simple rules of attraction/repulsion among atom like particles, producing complex self-organzing life like patterns as a result. The code is less than a page (excluding GUI elements). Video tutorial and Walkthrough is available below.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More Here (YouTube video tutorial):&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0Kx4Y9TVMGg&#34;&gt;https://youtu.be/0Kx4Y9TVMGg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interface&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hunar4321/life_code/main/images/interface.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example Results&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hunar4321/life_code/main/images/big_pic.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Some Interesting Patterns to Reproduce:&lt;/h2&gt; &#xA;&lt;p&gt;You don&#39;t need to be exact with the parameters to reproduce these patterns. The best way to get interesting patterns: First try random parameter explorations, once you find an intersting pattern, try fine-tuning it gradually. To avoid being stuck at a local maximum, you can make some occasional big parameter jumps. This way interesting &amp;amp; different patterns keep poping up.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hunar4321/life_code/main/images/some_patterns.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;To use:&lt;/h2&gt; &#xA;&lt;p&gt;Download this repo. unzip the file then go to /particle_life/bin/ folder and click on particle_life.exe&lt;/p&gt; &#xA;&lt;h2&gt;Code:&lt;/h2&gt; &#xA;&lt;p&gt;Source code available in both C++ and JavaScript ( watch this YouTube video for a walkthrough tutorial: &lt;a href=&#34;https://youtu.be/0Kx4Y9TVMGg&#34;&gt;https://youtu.be/0Kx4Y9TVMGg&lt;/a&gt; )&lt;/p&gt; &#xA;&lt;p&gt;If you like to contribute to the C++ program. The core algorithm is the first 100 lines of code at: &#34;/particle_life/src/ofApp.cpp&#34;. Everything else are GUI components &amp;amp; rendering controls which are provided by the openFrameworks library. openFrameworks is a nice, opensource, and easy to use image rendering library. To start, download this repository first, then download openFrameworks library here (&lt;a href=&#34;https://openframeworks.cc/&#34;&gt;https://openframeworks.cc/&lt;/a&gt;). Use openFramework&#39;s projectGenerator and import /particle_life/ folder to the project. Alternatively, generate a new openFramework project and add ofxGui. Once the project files are generated replace the /src/ folder with the one provided here. You can now compile the C++ code on your machine.&lt;/p&gt; &#xA;&lt;h2&gt;Todos (If I have time):&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Adding the ability to save and load parameters (so that people can easily share the interesting models they find)&lt;/li&gt; &#xA; &lt;li&gt;Ability to add more particle types (currently it&#39;s fixed to four particle types)&lt;/li&gt; &#xA; &lt;li&gt;Currently, the biggest bottle neck is the nested for-loops (which calculates the pairwise distance among all particles) making the computational complexity quadratic. It will be amazing if we could find a way around this bottle neck.&lt;/li&gt; &#xA; &lt;li&gt;Alternative to point 3, computing the pairwise distances are embarrassingly parallel so it can be computed on GPU.&lt;/li&gt; &#xA; &lt;li&gt;Adding the ability to resize the screen &amp;amp; improving the bound checking as many fast moving particles can escape the screen bounds.&lt;/li&gt; &#xA; &lt;li&gt;Adding a more intuitive UI so that it gives the ability for a finer control over the parameters.&lt;/li&gt; &#xA; &lt;li&gt;Adding a randomize button or even better having a simple meta rule to mutate the initial rule continously &amp;amp; recursively, this way the patterns will never stuck on a local maximum and will keep changing!&lt;/li&gt; &#xA; &lt;li&gt;A better way to fine-tune is to use an evolutionary algorithm to select and optimize the parameters but one needs to write a fitness function for that. I currently don&#39;t know what fitness function corresponds to in the realm of this program. In our world the fitness function is competition &amp;amp; survival of the fittest. However, here we fine-tune and select the parameters that produces interesting patterns for us, however, the word &#34;interesting&#34; here is easier to say than to define!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;The JavaScript code is as simple as this:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;  &amp;lt;canvas id=&#34;life&#34; width=&#34;500&#34; height=&#34;500&#34;&amp;gt;&amp;lt;/canvas&amp;gt;&#xA;  &amp;lt;script&amp;gt;&#xA;    //Hunar Ahmad @ brainxyz&#xA;  m=document.getElementById(&#34;life&#34;).getContext(&#39;2d&#39;)&#xA;  draw=(x,y,c,s)=&amp;gt;{m.fillStyle=c; m.fillRect(x, y, s, s)}&#xA;  atoms=[]&#xA;  atom=(x,y,c)=&amp;gt;{return{&#34;x&#34;:x, &#34;y&#34;:y, &#34;vx&#34;:0, &#34;vy&#34;:0, &#34;color&#34;:c}}&#xA;  random=()=&amp;gt;{return Math.random()*400+50}&#xA;  create=(number, color)=&amp;gt;{ &#xA;  &#x9;group=[]&#xA;    for(let i=0; i &amp;lt; number; i++){&#xA;&#x9;    group.push(atom(random(), random(), color))&#xA;&#x9;    atoms.push(group[i]) &#xA;&#x9;}&#xA;    return group &#xA;  }&#xA;  rule=(atoms1, atoms2, g)=&amp;gt;{&#xA;  for(let i=0; i &amp;lt; atoms1.length; i++){&#xA;    fx = 0&#xA;    fy = 0&#xA;    for(let j=0; j &amp;lt; atoms2.length; j++){&#xA;      a = atoms1[i]&#xA;      b = atoms2[j]&#xA;      dx = a.x-b.x&#xA;      dy = a.y-b.y&#xA;      d = Math.sqrt(dx*dx + dy*dy)&#xA;      if(d &amp;gt; 0 &amp;amp;&amp;amp; d &amp;lt; 80){&#xA;      &#x9;F = g * 1/d&#xA;        fx += (F * dx)&#xA;        fy += (F * dy)&#xA;      }&#xA;    } &#xA;    a.vx = (a.vx + fx)*0.5&#xA;    a.vy = (a.vy + fy)*0.5&#xA;    a.x += a.vx&#xA;    a.y += a.vy&#xA;    if(a.x &amp;lt;= 0 || a.x &amp;gt;= 500){ a.vx *=-1 }&#xA;    if(a.y &amp;lt;= 0 || a.y &amp;gt;= 500){ a.vy *=-1 }&#xA;    }&#xA;  }&#xA;  yellow = create(200, &#34;yellow&#34;)&#xA;  red = create(200, &#34;red&#34;)&#xA;  green = create(200, &#34;green&#34;)&#xA;  update=()=&amp;gt;{&#xA;    rule(green, green, -0.32)&#xA;    rule(green, red, -0.17)&#xA;    rule(green, yellow, 0.34)&#xA;    rule(red, red, -0.10)&#xA;    rule(red, green, -0.34)&#xA;    rule(yellow, yellow, 0.15)&#xA;    rule(yellow, green, -0.20)&#xA;    m.clearRect(0, 0, 500, 500)&#xA;    draw(0, 0, &#34;black&#34;, 500)&#xA;    for(i=0; i&amp;lt;atoms.length; i++){ &#xA;    draw(atoms[i].x, atoms[i].y, atoms[i].color, 5) &#xA;    }&#xA;    requestAnimationFrame(update)&#xA;  }&#xA;  update();&#xA;  &amp;lt;/script&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Related topics: Particle Life Simulation, Primordial Soup - Evolution, Conway&#39;s game of life, Cellular automata, Self organzing patterns,&lt;/p&gt; &#xA;&lt;p&gt;This project was inspired by: Jeffery Ventrella&#39;s Clusters &lt;a href=&#34;http://www.ventrella.com/Clusters/&#34;&gt;http://www.ventrella.com/Clusters/&lt;/a&gt; I don&#39;t have access to Ventrella&#39;s code but I guess the main difference of this project with the other particle life projects is that I didn&#39;t implement collision detection and this made simulating thousands of particles possible in real-time. Also, I added GUI controls to change the parameters in real-time this allows easy fine-tuning &amp;amp; exploration, hence, I was able to find some never-seen-before patterns emerge form some extremely simple models of relations. The code here is probably an order of magnitude simpler than any other Artificial Life codes out there because I started this code solely as an educational material for non-programmers and general audience to prove the point that complexity can arise from simplicity.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doxygen/doxygen</title>
    <updated>2022-08-28T01:33:59Z</updated>
    <id>tag:github.com,2022-08-28:/doxygen/doxygen</id>
    <link href="https://github.com/doxygen/doxygen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official doxygen git repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Doxygen&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=9HHLRBCC8B2B8&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Doxygen is the de facto standard tool for generating documentation from annotated C++ sources, but it also supports other popular programming languages such as C, Objective-C, C#, PHP, Java, Python, IDL (Corba, Microsoft, and UNO/OpenOffice flavors), Fortran, and to some extent D. Doxygen also supports the hardware description language VHDL.&lt;/p&gt; &#xA;&lt;p&gt;Doxygen can help you in three ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It can generate an on-line documentation browser (in HTML) and/or an off-line reference manual (in LaTeX) from a set of documented source files. There is also support for generating output in RTF (MS-Word), PostScript, hyperlinked PDF, compressed HTML, DocBook and Unix man pages. The documentation is extracted directly from the sources, which makes it much easier to keep the documentation consistent with the source code.&lt;/li&gt; &#xA; &lt;li&gt;You can configure doxygen to extract the code structure from undocumented source files. This is very useful to quickly find your way in large source distributions. Doxygen can also visualize the relations between the various elements by means of include dependency graphs, inheritance diagrams, and collaboration diagrams, which are all generated automatically.&lt;/li&gt; &#xA; &lt;li&gt;You can also use doxygen for creating normal documentation (as I did for the doxygen user manual and doxygen web-site).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;The latest binaries and source of Doxygen can be downloaded from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.doxygen.nl/&#34;&gt;https://www.doxygen.nl/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux &amp;amp; Windows and MacOS Build Status: &lt;a href=&#34;https://github.com/doxygen/doxygen/actions&#34;&gt;&lt;img alt=&#34;Github Actions Build Status&#34; src=&#34;https://github.com/doxygen/doxygen/workflows/CMake%20Build%20for%20Doxygen/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Coverity Scan Build Status: &lt;a href=&#34;https://scan.coverity.com/projects/2860&#34;&gt; &lt;img alt=&#34;Coverity Scan Build Status&#34; src=&#34;https://scan.coverity.com/projects/2860/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Doxygen&#39;s &lt;a href=&#34;http://doxygen.github.io/doxygen/&#34;&gt;internal source code documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install: Please read the installation section of the manual (&lt;a href=&#34;https://www.doxygen.nl/manual/install.html&#34;&gt;https://www.doxygen.nl/manual/install.html&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Project stats: &lt;a href=&#34;https://www.openhub.net/p/doxygen&#34;&gt;https://www.openhub.net/p/doxygen&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues, bugs, requests, ideas&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://github.com/doxygen/doxygen/issues&#34;&gt;issue&lt;/a&gt; tracker to report bugs.&lt;/p&gt; &#xA;&lt;h2&gt;Comms&lt;/h2&gt; &#xA;&lt;h3&gt;Mailing Lists&lt;/h3&gt; &#xA;&lt;p&gt;There are three mailing lists:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:doxygen-announce@lists.sourceforge.net&#34;&gt;doxygen-announce@lists.sourceforge.net&lt;/a&gt; - Announcement of new releases only&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:doxygen-users@lists.sourceforge.net&#34;&gt;doxygen-users@lists.sourceforge.net&lt;/a&gt; - for doxygen users&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:doxygen-develop@lists.sourceforge.net&#34;&gt;doxygen-develop@lists.sourceforge.net&lt;/a&gt; - for doxygen developers&lt;/li&gt; &#xA; &lt;li&gt;To subscribe follow the link to &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/doxygen/&#34;&gt;https://sourceforge.net/projects/doxygen/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Source Code&lt;/h2&gt; &#xA;&lt;p&gt;In May 2013, Doxygen moved from subversion to git hosted at GitHub&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/doxygen/doxygen&#34;&gt;https://github.com/doxygen/doxygen&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enjoy,&lt;/p&gt; &#xA;&lt;p&gt;Dimitri van Heesch (doxygen at gmail.com)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cemu-project/Cemu</title>
    <updated>2022-08-28T01:33:59Z</updated>
    <id>tag:github.com,2022-08-28:/cemu-project/Cemu</id>
    <link href="https://github.com/cemu-project/Cemu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cemu is a Wii U emulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;Cemu - Wii U emulator&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cemu-project/Cemu/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/cemu-project/Cemu/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Process&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/5psYsup&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/286429969104764928?label=Cemu&amp;amp;logo=discord&amp;amp;logoColor=FFFFFF&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the code repository of Cemu, a Wii U emulator that is able to run most Wii U games and homebrew in a playable state. It&#39;s written in C/C++ and is being actively developed with new features and fixes to increase compatibility, convenience and usability.&lt;/p&gt; &#xA;&lt;p&gt;Cemu is currently only available for 64-bit Windows and Linux devices.&lt;/p&gt; &#xA;&lt;h3&gt;Links:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/cemu/comments/wwa22c/cemu_20_announcement_linux_builds_opensource_and/&#34;&gt;Original 2.0 announcement post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cemu.info&#34;&gt;Official Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.cemu.info/wiki/Main_Page&#34;&gt;Compatibility List/Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reddit.com/r/Cemu&#34;&gt;Official Subreddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/5psYsup&#34;&gt;Official Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cemu.cfw.guide&#34;&gt;Unofficial Setup Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other relevant repositories:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cemu-project/Cemu-Language&#34;&gt;Cemu-Language&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ActualMandM/cemu_graphic_packs&#34;&gt;Cemu&#39;s Community Graphic Packs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download the latest Cemu releases from the &lt;a href=&#34;https://github.com/cemu-project/Cemu/releases/&#34;&gt;Github Releases&lt;/a&gt; or from &lt;a href=&#34;https://cemu.info&#34;&gt;Cemu&#39;s website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Cemu is currently only available in a portable format so no installation is required besides extracting it in a safe place.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/cemu-project/Cemu/issues/1&#34;&gt;Current State Of Linux builds&lt;/a&gt; for information on using Cemu natively on Linux.&lt;/p&gt; &#xA;&lt;p&gt;Pre-2.0 releases can be found on Cemu&#39;s &lt;a href=&#34;https://cemu.info/changelog.html&#34;&gt;changelog page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;To compile Cemu yourself on Windows or Linux, view the &lt;a href=&#34;https://raw.githubusercontent.com/cemu-project/Cemu/main/BUILD.md&#34;&gt;BUILD.md file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;Issues with the emulator should be filed using &lt;a href=&#34;https://github.com/cemu-project/Cemu/issues&#34;&gt;Github Issues&lt;/a&gt;.&lt;br&gt; The old bug tracker can be found at &lt;a href=&#34;http://bugs.cemu.info&#34;&gt;bugs.cemu.info&lt;/a&gt; and still contains relevant issues and feature suggestions.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are very welcome. For easier coordination you can visit the developer discussion channel on Discord: &lt;a href=&#34;https://discord.gg/5psYsup&#34;&gt;https://discord.gg/5psYsup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If coding isn&#39;t your thing, testing games and making detailed bug reports or updating the (usually outdated) compatibility wiki is also appreciated!&lt;/p&gt; &#xA;&lt;p&gt;Questions about Cemu&#39;s software architecture can also be answered on Discord. Alternative communication channels (like IRC) are being considered.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Cemu is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/cemu-project/Cemu/main/LICENSE.txt&#34;&gt;Mozilla Public License 2.0&lt;/a&gt;. Exempt from this are all files in the dependencies directory for which the licenses of the original code apply as well as some individual files in the src folder, as specified in those file headers respectively.&lt;/p&gt;</summary>
  </entry>
</feed>