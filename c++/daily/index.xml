<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-01T01:28:41Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>myzxcg/RealBlindingEDR</title>
    <updated>2023-11-01T01:28:41Z</updated>
    <id>tag:github.com,2023-11-01:/myzxcg/RealBlindingEDR</id>
    <link href="https://github.com/myzxcg/RealBlindingEDR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Remove AV/EDR Kernel ObRegisterCallbacks、CmRegisterCallback、MiniFilter Callback、PsSetCreateProcessNotifyRoutine Callback、PsSetCreateThreadNotifyRoutine Callback、PsSetLoadImageNotifyRoutine Callback...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RealBlindingEDR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/myzxcg/RealBlindingEDR/main/README.zh_CN.md&#34;&gt;中文介绍&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Utilize arbitrary address read/write implementation with signed driver: completely blind or kill or permanently turn off AV/EDR.&lt;/p&gt; &#xA;&lt;p&gt;If you want to understand the implementation principle, you can refer to the analysis article: &lt;a href=&#34;https://mp.weixin.qq.com/s/ZMTjDMMdQoOczxzZ7OAGtA&#34;&gt;AV/EDR 完全致盲 - 清除6大内核回调实现（Chinese）&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This project has been tested on 64-bit win7, win10, and win11. I will further test it on other versions later. If you find a problem in a certain version, you can report it through issue and I will adapt it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This project implements the clearing of the following kernel callbacks:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Delete the callback registered by &lt;code&gt;CmRegisterCallback(Ex)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the callback registered by &lt;code&gt;MiniFilter driver&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the callbacks registered by &lt;code&gt;ObRegisterCallbacks()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the callback registered by &lt;code&gt;PsSetCreateProcessNotifyRoutine(Ex)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the callback registered by &lt;code&gt;PsSetCreateThreadNotifyRoutine(Ex)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the callback registered by &lt;code&gt;PsSetLoadImageNotifyRoutine(Ex)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;After deleting the kernel callback, the following 3 effects can finally be achieved:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Blinding AV/EDR&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;While keeping the AV/EDR process running normally, it makes it impossible to monitor any process/thread activity, any file landing, registry deletion, high-privilege handle acquisition and many other sensitive behaviors. (Not killing directly is to ensure that EDR maintains communication with the master control and avoid being discovered due to disconnection)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Permanently turn off or disable AV/EDR&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Since the registry and minifilter kernel notification callbacks are deleted, AV/EDR can be permanently turned off (even if the system is restarted) by modifying the registry or directly deleting the AV/EDR file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kill AV/EDR process&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Since the object handle notification callback has been removed, it is now possible to terminate the AV/EDR process with normal administrator user rights.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This project is not targeted at any AV/EDR manufacturers. The code examples are only for research and learning, and are not allowed to be used maliciously. If there is any malicious use, it has nothing to do with me.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the project code, open the &lt;code&gt;RealBlindingEDR.h&lt;/code&gt; file, and configure the absolute path where the available driver is located.&lt;/p&gt; &lt;p&gt;This project supports two driver applications: &lt;a href=&#34;https://www.loldrivers.io/drivers/a4eabc75-edf6-4b74-9a24-6a26187adabf/&#34;&gt;dbutil_2_3.sys&lt;/a&gt; 、&lt;a href=&#34;https://www.loldrivers.io/drivers/afb8bb46-1d13-407d-9866-1daa7c82ca63/&#34;&gt;echo_driver.sys&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;#define DriverType 1&lt;/code&gt; means using echo_driver.sys&lt;/p&gt; &lt;p&gt;&lt;code&gt;#define DriverType 2&lt;/code&gt; means using dbutil_2_3.sys&lt;/p&gt; &lt;p&gt;&lt;code&gt;#define DrivePath &#34;driver_fullpath&#34;&lt;/code&gt; is used to specify the path where the driver is located&lt;/p&gt; &lt;p&gt;The dbutil_2_3.sys driver supports win7 and above.&lt;/p&gt; &lt;p&gt;The echo_driver.sys driver supports win10 and above.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Currently, these two drivers cannot be loaded on the latest version of Win11 [10.0.22621.2506] (certificate revoked, error: c0000603)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile the project and double-click to execute it on the computer with AV/EDR installed. (If the file is not immune to anti-virus, please write your own anti-virus shellcode loader, then convert it into shellcode and load it)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After execution, you will see the following effect: (listing the names of all drivers that registered these callbacks)&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myzxcg/RealBlindingEDR/main/assets/16984937060550.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;RealBlindingEDR.h&lt;/code&gt; file again and add the driver names that you are sure are AV/EDR to the &lt;code&gt;CONST CHAR* AVDriver[] = {}&lt;/code&gt; array. An example of configuring the Defender driver: &lt;img src=&#34;https://raw.githubusercontent.com/myzxcg/RealBlindingEDR/main/assets/16984942671759.jpg&#34; alt=&#34;&#34;&gt; You can also try to find the AV/EDR driver name based on the signature in the &lt;code&gt;C:\windows\system32\drivers\&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Be sure not to add the normal driver name of Windows system to this array, otherwise it may cause the system to crash.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile again and run it directly to automatically clear all the above callbacks of the specified driver.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Effect&lt;/h2&gt; &#xA;&lt;p&gt;The following demonstration content is not specific to this AV manufacturer, but is only for educational and research purposes. Most AV/EDR manufacturers are affected.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Tips:&lt;/strong&gt;&lt;/em&gt; By executing the program directly, you can achieve all of the following effects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/myzxcg/RealBlindingEDR/main/Demovideo.mp4&#34;&gt;DemoVideo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete AV/EDR object handle monitoring and kill AV process&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myzxcg/RealBlindingEDR/main/assets/16984944785334.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete AV/EDR registry monitoring and delete AV registry to permanently shut down AV&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myzxcg/RealBlindingEDR/main/assets/16984945058037.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete file landing monitoring and AV/EDR own file protection, delete AV files to permanently close AV&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myzxcg/RealBlindingEDR/main/assets/16984950206880.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;To be done&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clear the handles related to the Windows ETW event provider in the kernel.&lt;/li&gt; &#xA; &lt;li&gt;Try removing WFP related callbacks.&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to the following articles and projects for helping me.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://douggemhax.wordpress.com/2015/05/27/obregistercallbacks-and-countermeasures/&#34;&gt;OBREGISTERCALLBACKS AND COUNTERMEASURES&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.xpnsec.com/anti-debug-openprocess/&#34;&gt;Windows Anti-Debug techniques - OpenProcess filtering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@matterpreter/mimidrv-in-depth-4d273d19e148&#34;&gt;Mimidrv In Depth: Exploring Mimikatz’s Kernel Driver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aviadshamriz.medium.com/part-1-fs-minifilter-hooking-7e743b042a9d&#34;&gt;Part 1: Fs Minifilter Hooking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YOLOP0wn/EchoDrv&#34;&gt;EchoDrv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.deniable.org/posts/windows-callbacks/&#34;&gt;Windows Kernel Ps Callbacks Experiments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.matteomalvica.com/blog/2020/07/15/silencing-the-edr/&#34;&gt;Silencing the EDR. How to disable process, threads and image-loading detection callbacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://br-sn.github.io/Removing-Kernel-Callbacks-Using-Signed-Drivers/&#34;&gt;Removing-Kernel-Callbacks-Using-Signed-Drivers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ioctl.fail/echo-ac-writeup/&#34;&gt;EchOh-No! a Vulnerability and PoC demonstration in a popular Minecraft AntiCheat tool&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>Rahiche/riveo_page_curl</title>
    <updated>2023-11-01T01:28:41Z</updated>
    <id>tag:github.com,2023-11-01:/Rahiche/riveo_page_curl</id>
    <link href="https://github.com/Rahiche/riveo_page_curl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Riveo page curl effect in flutter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;riveo_page_curl&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;riveo_page_curl&lt;/code&gt; is a Flutter project aiming to replicate the unique page curl effect utilized in the Riveo app for project deletion. Dive into the shader code in &lt;code&gt;shaders/page_curl.frag&lt;/code&gt; and explore the interesting Flutter logic within &lt;code&gt;project_card.dart&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Experience the effect in action through our demos:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Rahiche/riveo_page_curl/assets/37366956/5c350ddb-950d-4234-83c0-b6f78867b785&#34; alt=&#34;Visual Demo GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Visual Demo&lt;/th&gt; &#xA;   &lt;th&gt;Demo with Audio&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#xA;    &lt;video src=&#34;https://github.com/Rahiche/riveo_page_curl/assets/37366956/c852d87a-fbf6-4ca0-b975-01f15c2dc45a&#34;&gt;&lt;/video&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#xA;    &lt;video src=&#34;https://github.com/Rahiche/riveo_page_curl/assets/37366956/22dfdf21-a169-46ba-a349-eab077b58fc0&#34;&gt;&lt;/video&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://forgeandform.co/riveo/?page=riveo&#34;&gt;Riveo app&lt;/a&gt; team for the original, inspiring effect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wcandillon&#34;&gt;@wcandillon&lt;/a&gt; for the Skia shader. You can find his code &lt;a href=&#34;https://github.com/wcandillon/can-it-be-done-in-react-native/tree/master/season5/src/Riveo&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>luau-lang/luau</title>
    <updated>2023-11-01T01:28:41Z</updated>
    <id>tag:github.com,2023-11-01:/luau-lang/luau</id>
    <link href="https://github.com/luau-lang/luau" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast, small, safe, gradually typed embeddable scripting language derived from Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Luau &lt;img src=&#34;https://github.com/luau-lang/luau/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/luau-lang/luau&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/luau-lang/luau/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Luau (lowercase u, /ˈlu.aʊ/) is a fast, small, safe, gradually typed embeddable scripting language derived from &lt;a href=&#34;https://lua.org&#34;&gt;Lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is designed to be backwards compatible with Lua 5.1, as well as incorporating &lt;a href=&#34;https://luau-lang.org/compatibility&#34;&gt;some features&lt;/a&gt; from future Lua releases, but also expands the feature set (most notably with type annotations). Luau is largely implemented from scratch, with the language runtime being a very heavily modified version of Lua 5.1 runtime, with completely rewritten interpreter and other &lt;a href=&#34;https://luau-lang.org/performance&#34;&gt;performance innovations&lt;/a&gt;. The runtime mostly preserves Lua 5.1 API, so existing bindings should be more or less compatible with a few caveats.&lt;/p&gt; &#xA;&lt;p&gt;Luau is used by Roblox game developers to write game code, as well as by Roblox engineers to implement large parts of the user-facing application code as well as portions of the editor (Roblox Studio) as plugins. Roblox chose to open-source Luau to foster collaboration within the Roblox community as well as to allow other companies and communities to benefit from the ongoing language and runtime innovation. As a consequence, Luau is now also used by games like Alan Wake 2 and Warframe.&lt;/p&gt; &#xA;&lt;p&gt;This repository hosts source code for the language implementation and associated tooling. Documentation for the language is available at &lt;a href=&#34;https://luau-lang.org/&#34;&gt;https://luau-lang.org/&lt;/a&gt; and accepts contributions via &lt;a href=&#34;https://github.com/luau-lang/site&#34;&gt;site repository&lt;/a&gt;; the language is evolved through RFCs that are located in &lt;a href=&#34;https://github.com/luau-lang/rfcs&#34;&gt;rfcs repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Luau is an embeddable language, but it also comes with two command-line tools by default, &lt;code&gt;luau&lt;/code&gt; and &lt;code&gt;luau-analyze&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;luau&lt;/code&gt; is a command-line REPL and can also run input files. Note that REPL runs in a sandboxed environment and as such doesn&#39;t have access to the underlying file system except for ability to &lt;code&gt;require&lt;/code&gt; modules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;luau-analyze&lt;/code&gt; is a command-line type checker and linter; given a set of input files, it produces errors/warnings according to the file configuration, which can be customized by using &lt;code&gt;--!&lt;/code&gt; comments in the files or &lt;a href=&#34;https://github.com/luau-lang/luau/raw/master/rfcs/config-luaurc.md&#34;&gt;&lt;code&gt;.luaurc&lt;/code&gt;&lt;/a&gt; files. For details please refer to &lt;a href=&#34;https://luau-lang.org/typecheck&#34;&gt;type checking&lt;/a&gt; and &lt;a href=&#34;https://luau-lang.org/lint&#34;&gt;linting&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install and run Luau by downloading the compiled binaries from &lt;a href=&#34;https://github.com/luau-lang/luau/releases&#34;&gt;a recent release&lt;/a&gt;; note that &lt;code&gt;luau&lt;/code&gt; and &lt;code&gt;luau-analyze&lt;/code&gt; binaries from the archives will need to be added to PATH or copied to a directory like &lt;code&gt;/usr/local/bin&lt;/code&gt; on Linux/macOS.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use one of the packaged distributions (note that these are not maintained by Luau development team):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS: &lt;a href=&#34;https://docs.brew.sh/Installation&#34;&gt;Install Homebrew&lt;/a&gt; and run &lt;code&gt;brew install luau&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arch Linux: From the AUR (Arch Linux User Repository), install one of these packages via a AUR helper or manually (by cloning their repo and using &lt;code&gt;makepkg&lt;/code&gt;): &lt;a href=&#34;https://aur.archlinux.org/packages/luau&#34;&gt;luau&lt;/a&gt; (manual build), &lt;a href=&#34;https://aur.archlinux.org/packages/luau-git&#34;&gt;luau-git&lt;/a&gt; (manual build by cloning this repo), or &lt;a href=&#34;https://aur.archlinux.org/packages/luau-bin&#34;&gt;luau-bin&lt;/a&gt; (pre-built binaries from releases)&lt;/li&gt; &#xA; &lt;li&gt;Alpine Linux: &lt;a href=&#34;https://wiki.alpinelinux.org/w/index.php?title=Enable_Community_Repository&#34;&gt;Enable community repositories&lt;/a&gt; and run &lt;code&gt;apk add luau&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gentoo Linux: Luau is &lt;a href=&#34;https://packages.gentoo.org/packages/dev-lang/luau&#34;&gt;officially packaged by Gentoo&lt;/a&gt; and can be installed using &lt;code&gt;emerge dev-lang/luau&lt;/code&gt;. You may have to unmask the package first before installing it (which can be done by including the &lt;code&gt;--autounmask=y&lt;/code&gt; option in the &lt;code&gt;emerge&lt;/code&gt; command).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After installing, you will want to validate the installation was successful by running the test case &lt;a href=&#34;https://luau-lang.org/getting-started&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;On all platforms, you can use CMake to run the following commands to build Luau binaries from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir cmake &amp;amp;&amp;amp; cd cmake&#xA;cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo&#xA;cmake --build . --target Luau.Repl.CLI --config RelWithDebInfo&#xA;cmake --build . --target Luau.Analyze.CLI --config RelWithDebInfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, on Linux/macOS you can use &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make config=release luau luau-analyze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate Luau into your CMake application projects as a library, at the minimum you&#39;ll need to depend on &lt;code&gt;Luau.Compiler&lt;/code&gt; and &lt;code&gt;Luau.VM&lt;/code&gt; projects. From there you need to create a new Luau state (using Lua 5.x API such as &lt;code&gt;lua_newstate&lt;/code&gt;), compile source to bytecode and load it into the VM like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// needs lua.h and luacode.h&#xA;size_t bytecodeSize = 0;&#xA;char* bytecode = luau_compile(source, strlen(source), NULL, &amp;amp;bytecodeSize);&#xA;int result = luau_load(L, chunkname, bytecode, bytecodeSize, 0);&#xA;free(bytecode);&#xA;&#xA;if (result == 0)&#xA;    return 1; /* return chunk main function */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details about the use of host API you currently need to consult &lt;a href=&#34;https://www.lua.org/manual/5.1/manual.html#3&#34;&gt;Lua 5.x API&lt;/a&gt;. Luau closely tracks that API but has a few deviations, such as the need to compile source separately (which is important to be able to deploy VM without a compiler), or lack of &lt;code&gt;__gc&lt;/code&gt; support (use &lt;code&gt;lua_newuserdatadtor&lt;/code&gt; instead).&lt;/p&gt; &#xA;&lt;p&gt;To gain advantage of many performance improvements it&#39;s highly recommended to use &lt;code&gt;safeenv&lt;/code&gt; feature, which sandboxes individual scripts&#39; global tables from each other as well as protects builtin libraries from monkey-patching. For this to work you need to call &lt;code&gt;luaL_sandbox&lt;/code&gt; for the global state and &lt;code&gt;luaL_sandboxthread&lt;/code&gt; for each new script&#39;s execution thread.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;Luau has an internal test suite; in CMake builds it is split into two targets, &lt;code&gt;Luau.UnitTest&lt;/code&gt; (for bytecode compiler and type checker/linter tests) and &lt;code&gt;Luau.Conformance&lt;/code&gt; (for VM tests). The unit tests are written in C++, whereas the conformance tests are largely written in Luau (see &lt;code&gt;tests/conformance&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Makefile builds combine both into a single target and can be ran via &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;Luau uses C++ as its implementation language. The runtime requires C++11, whereas the compiler and analysis components require C++17. It should build without issues using Microsoft Visual Studio 2017 or later, or gcc-7 or clang-7 or later.&lt;/p&gt; &#xA;&lt;p&gt;Other than the STL/CRT, Luau library components don&#39;t have external dependencies. The test suite depends on &lt;a href=&#34;https://github.com/onqtam/doctest&#34;&gt;doctest&lt;/a&gt; testing framework, and the REPL command-line depends on &lt;a href=&#34;https://github.com/daanx/isocline&#34;&gt;isocline&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Luau implementation is distributed under the terms of &lt;a href=&#34;https://github.com/luau-lang/luau/raw/master/LICENSE.txt&#34;&gt;MIT License&lt;/a&gt;. It is based on Lua 5.x implementation that is MIT licensed as well.&lt;/p&gt; &#xA;&lt;p&gt;When Luau is integrated into external projects, we ask to honor the license agreement and include Luau attribution into the user-facing product documentation. The attribution using &lt;a href=&#34;https://github.com/luau-lang/site/raw/master/logo.svg&#34;&gt;Luau logo&lt;/a&gt; is also encouraged.&lt;/p&gt;</summary>
  </entry>
</feed>