<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-07T01:30:56Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SoftFever/OrcaSlicer</title>
    <updated>2023-08-07T01:30:56Z</updated>
    <id>tag:github.com,2023-08-07:/SoftFever/OrcaSlicer</id>
    <link href="https://github.com/SoftFever/OrcaSlicer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;G-code generator for 3D printers (Bambu, Prusa, Voron, VzBot, RatRig, Creality, etc.)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/SoftFever/OrcaSlicer/actions/workflows/build_win.yml&#34;&gt;&lt;img src=&#34;https://github.com/SoftFever/OrcaSlicer/actions/workflows/build_win.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Win64&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SoftFever/OrcaSlicer/actions/workflows/build_mac_arm64.yml&#34;&gt;&lt;img src=&#34;https://github.com/SoftFever/OrcaSlicer/actions/workflows/build_mac_arm64.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Mac AppleSilicon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SoftFever/OrcaSlicer/actions/workflows/build_mac_x64.yml&#34;&gt;&lt;img src=&#34;https://github.com/SoftFever/OrcaSlicer/actions/workflows/build_mac_x64.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Mac Intel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SoftFever/OrcaSlicer/actions/workflows/build_linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/SoftFever/OrcaSlicer/actions/workflows/build_linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Linux&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Orca Slicer&lt;/h1&gt; &#xA;&lt;p&gt;Orca Slicer is an open source slicer for FDM printers.&lt;br&gt; You can download Orca Slicer here: &lt;a href=&#34;https://github.com/SoftFever/OrcaSlicer/releases/&#34;&gt;github releases page&lt;/a&gt;.&lt;br&gt; &lt;img src=&#34;https://github.com/SoftFever/OrcaSlicer/assets/103989404/b97d5ffc-072d-4d0a-bbda-e67ef373876f&#34; alt=&#34;discord-mark-blue&#34;&gt; Join community: &lt;a href=&#34;https://discord.gg/WTEkCR6SnV&#34;&gt;OrcaSlicer Official Discord Server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Main features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Auto calibrations for all printers&lt;/li&gt; &#xA; &lt;li&gt;Sandwich(inner-outer-inner) mode - an improved version of the &lt;code&gt;External perimeters first&lt;/code&gt; mode&lt;/li&gt; &#xA; &lt;li&gt;Precise wall&lt;/li&gt; &#xA; &lt;li&gt;Klipper support&lt;/li&gt; &#xA; &lt;li&gt;More granular controls&lt;/li&gt; &#xA; &lt;li&gt;More features can be found in &lt;a href=&#34;https://github.com/SoftFever/OrcaSlicer/releases/&#34;&gt;change notes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Some background&lt;/h3&gt; &#xA;&lt;p&gt;OrcaSlicer is fork of Bambu Studio&lt;br&gt; It was previously known as BambuStudio-SoftFever&lt;br&gt; Bambu Studio is forked from &lt;a href=&#34;https://github.com/prusa3d/PrusaSlicer&#34;&gt;PrusaSlicer&lt;/a&gt; by Prusa Research, which is from &lt;a href=&#34;https://github.com/Slic3r/Slic3r&#34;&gt;Slic3r&lt;/a&gt; by Alessandro Ranellucci and the RepRap community. Orca Slicer incorporates a lot of features from SuperSlicer by @supermerill Orca Slicer&#39;s logo is designed by community member Justin Levine(@freejstnalxndr)&lt;/p&gt; &#xA;&lt;h1&gt;How to install&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Unzip the binaries to any folder you prefer, then execute orca-slicer.exe to start the application. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;If you have troubles to run the build, you might need to install following runtimes:&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/SoftFever/BambuStudio-SoftFever/releases/download/v1.0.10-sf2/MicrosoftEdgeWebView2RuntimeInstallerX64.exe&#34;&gt;MicrosoftEdgeWebView2RuntimeInstallerX64&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/SoftFever/BambuStudio-SoftFever/releases/download/v1.0.10-sf2/vcredist2019_x64.exe&#34;&gt;vcredist2019_x64&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the right binaries for your computer: &lt;code&gt;arm64&lt;/code&gt; version for Apple Silicon and &lt;code&gt;x86_64&lt;/code&gt; for Intel CPU.&lt;/li&gt; &#xA; &lt;li&gt;Double click to unzip the package, move OrcaSlicer.app to Application folder.&lt;/li&gt; &#xA; &lt;li&gt;The app is signed but not notarized at the moment due to the proptiery network plugin.&lt;br&gt; We have two options to make it run on our machines&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Option 1 (You only need to do this once. After that the app can be oppened normally.):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Step 1: Hold &lt;em&gt;cmd&lt;/em&gt; and right click the app, from the context menu choose &lt;strong&gt;Open&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Step 2: A warning window will pop up, click &lt;em&gt;Open&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Option 2:&lt;br&gt; Execute this command in terminal: &lt;code&gt;xattr -dr com.apple.quarantine /Applications/OrcaSlicer.app&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;   softfever@mac:~$ xattr -dr com.apple.quarantine /Applications/OrcaSlicer.app&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Option 3:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Step 1: open the app, a warning window will pop up&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SoftFever/OrcaSlicer/main/SoftFever_doc/mac_cant_open.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Step 2: in &lt;code&gt;System Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Privacy &amp;amp; Security&lt;/code&gt;, click &lt;code&gt;Open Anyway&lt;/code&gt;:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SoftFever/OrcaSlicer/main/SoftFever_doc/mac_security_setting.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux(Ubuntu)&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you run into trouble to execute it, try this command in terminal:&lt;br&gt; &lt;code&gt;chmod +x /path_to_appimage/OrcaSlicer_ubu64.AppImage&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;How to compile&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows 64-bit&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tools needed: Visual Studio 2019, Cmake, git, Strawberry Perl.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;build_release.bat&lt;/code&gt; in &lt;code&gt;x64 Native Tools Command Prompt for VS 2019&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mac 64-bit&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tools needed: Xcode, Cmake, git, gettext&lt;/li&gt; &#xA;   &lt;li&gt;run &lt;code&gt;build_release_macos.sh&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ubuntu&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;run &lt;code&gt;BuildLinux.sh -udisr&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Note:&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re running Klipper, it&#39;s recommended to add the following configuration to your &lt;code&gt;printer.cfg&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Enable object exclusion&#xA;[exclude_object]&#xA;&#xA;# Enable arcs support&#xA;[gcode_arcs]&#xA;resolution: 0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Orca Slicer is licensed under the GNU Affero General Public License, version 3. Orca Slicer is based on Bambu Studio by BambuLab.&lt;/p&gt; &#xA;&lt;p&gt;Bambu Studio is licensed under the GNU Affero General Public License, version 3. Bambu Studio is based on PrusaSlicer by PrusaResearch.&lt;/p&gt; &#xA;&lt;p&gt;PrusaSlicer is licensed under the GNU Affero General Public License, version 3. PrusaSlicer is owned by Prusa Research. PrusaSlicer is originally based on Slic3r by Alessandro Ranellucci.&lt;/p&gt; &#xA;&lt;p&gt;Slic3r is licensed under the GNU Affero General Public License, version 3. Slic3r was created by Alessandro Ranellucci with the help of many other contributors.&lt;/p&gt; &#xA;&lt;p&gt;The GNU Affero General Public License, version 3 ensures that if you use any part of this software in any way (even behind a web server), your software must be released under the same license.&lt;/p&gt; &#xA;&lt;p&gt;Orca Slicer includes a pressure advance calibration pattern test adapted from Andrew Ellis&#39; generator, which is licensed under GNU General Public License, version 3. Ellis&#39; generator is itself adapted from a generator developed by Sineos for Marlin, which is licensed under GNU General Public License, version 3.&lt;/p&gt; &#xA;&lt;p&gt;The bambu networking plugin is based on non-free libraries from Bambulab. It is optional to the Orca Slicer and provides extended functionalities for Bambulab printer users.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/cpu_features</title>
    <updated>2023-08-07T01:30:56Z</updated>
    <id>tag:github.com,2023-08-07:/google/cpu_features</id>
    <link href="https://github.com/google/cpu_features" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cross platform C99 library to get cpu features at runtime.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cpu_features&lt;/h1&gt; &#xA;&lt;p&gt;A cross-platform C library to retrieve CPU features (such as available instructions) at runtime.&lt;/p&gt; &#xA;&lt;h1&gt;GitHub-CI Status&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Os&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;amd64&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;AArch64&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;ARM&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;MIPS&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;POWER&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;RISCV&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;s390x&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://github.com/google/cpu_features/actions/workflows/amd64_linux_cmake.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/google/cpu_features/amd64_linux_cmake.yml?branch=main&amp;amp;label=CMake&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/google/cpu_features/actions/workflows/amd64_linux_bazel.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/google/cpu_features/amd64_linux_bazel.yml?branch=main&amp;amp;label=Bazel&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://github.com/google/cpu_features/actions/workflows/aarch64_linux_cmake.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/google/cpu_features/aarch64_linux_cmake.yml?branch=main&amp;amp;label=CMake&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://github.com/google/cpu_features/actions/workflows/arm_linux_cmake.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/google/cpu_features/arm_linux_cmake.yml?branch=main&amp;amp;label=CMake&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://github.com/google/cpu_features/actions/workflows/mips_linux_cmake.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/google/cpu_features/mips_linux_cmake.yml?branch=main&amp;amp;label=CMake&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://github.com/google/cpu_features/actions/workflows/power_linux_cmake.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/google/cpu_features/power_linux_cmake.yml?branch=main&amp;amp;label=CMake&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://github.com/google/cpu_features/actions/workflows/riscv_linux_cmake.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/google/cpu_features/riscv_linux_cmake.yml?branch=main&amp;amp;label=CMake&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://github.com/google/cpu_features/actions/workflows/s390x_linux_cmake.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/google/cpu_features/s390x_linux_cmake.yml?branch=main&amp;amp;label=CMake&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://github.com/google/cpu_features/actions/workflows/amd64_freebsd_cmake.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/google/cpu_features/amd64_freebsd_cmake.yml?branch=main&amp;amp;label=CMake&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MacOS&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://github.com/google/cpu_features/actions/workflows/amd64_macos_cmake.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/google/cpu_features/amd64_macos_cmake.yml?branch=main&amp;amp;label=CMake&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;https://github.com/google/cpu_features/actions/workflows/amd64_windows_cmake.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/google/cpu_features/amd64_windows_cmake.yml?branch=main&amp;amp;label=CMake&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CMake-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img.shields.io/badge/Bazel-N%2FA-lightgrey&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cpu_features/main/#rationale&#34;&gt;Design Rationale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cpu_features/main/#codesample&#34;&gt;Code samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cpu_features/main/#usagesample&#34;&gt;Running sample code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cpu_features/main/#support&#34;&gt;What&#39;s supported&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cpu_features/main/#ndk&#34;&gt;Android NDK&#39;s drop in replacement&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cpu_features/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cpu_features/main/#cmake&#34;&gt;Build with cmake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cpu_features/main/#bindings&#34;&gt;Community Bindings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;rationale&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Design Rationale&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple to use.&lt;/strong&gt; See the snippets below for examples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible.&lt;/strong&gt; Easy to add missing features or architectures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatible with old compilers&lt;/strong&gt; and available on many architectures so it can be used widely. To ensure that cpu_features works on as many platforms as possible, we implemented it in a highly portable version of C: C99.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sandbox-compatible.&lt;/strong&gt; The library uses a variety of strategies to cope with sandboxed environments or when &lt;code&gt;cpuid&lt;/code&gt; is unavailable. This is useful when running integration tests in hermetic environments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Thread safe, no memory allocation, and raises no exceptions.&lt;/strong&gt; cpu_features is suitable for implementing fundamental libc functions like &lt;code&gt;malloc&lt;/code&gt;, &lt;code&gt;memcpy&lt;/code&gt;, and &lt;code&gt;memcmp&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unit tested.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;codesample&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code samples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For C++ code, the library functions are defined in the &lt;code&gt;cpu_features&lt;/code&gt; namespace.&lt;/p&gt; &#xA;&lt;h3&gt;Checking features at runtime&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s a simple example that executes a codepath if the CPU supports both the AES and the SSE4.2 instruction sets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;cpuinfo_x86.h&#34;&#xA;&#xA;// For C++, add `using namespace cpu_features;`&#xA;static const X86Features features = GetX86Info().features;&#xA;&#xA;void Compute(void) {&#xA;  if (features.aes &amp;amp;&amp;amp; features.sse4_2) {&#xA;    // Run optimized code.&#xA;  } else {&#xA;    // Run standard code.&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caching for faster evaluation of complex checks&lt;/h3&gt; &#xA;&lt;p&gt;If you wish, you can read all the features at once into a global variable, and then query for the specific features you care about. Below, we store all the ARM features and then check whether AES and NEON are supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdbool.h&amp;gt;&#xA;#include &#34;cpuinfo_arm.h&#34;&#xA;&#xA;// For C++, add `using namespace cpu_features;`&#xA;static const ArmFeatures features = GetArmInfo().features;&#xA;static const bool has_aes_and_neon = features.aes &amp;amp;&amp;amp; features.neon;&#xA;&#xA;// use has_aes_and_neon.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a good approach to take if you&#39;re checking for combinations of features when using a compiler that is slow to extract individual bits from bit-packed structures.&lt;/p&gt; &#xA;&lt;h3&gt;Checking compile time flags&lt;/h3&gt; &#xA;&lt;p&gt;The following code determines whether the compiler was told to use the AVX instruction set (e.g., &lt;code&gt;g++ -mavx&lt;/code&gt;) and sets &lt;code&gt;has_avx&lt;/code&gt; accordingly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdbool.h&amp;gt;&#xA;#include &#34;cpuinfo_x86.h&#34;&#xA;&#xA;// For C++, add `using namespace cpu_features;`&#xA;static const X86Features features = GetX86Info().features;&#xA;static const bool has_avx = CPU_FEATURES_COMPILED_X86_AVX || features.avx;&#xA;&#xA;// use has_avx.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;CPU_FEATURES_COMPILED_X86_AVX&lt;/code&gt; is set to 1 if the compiler was instructed to use AVX and 0 otherwise, combining compile time and runtime knowledge.&lt;/p&gt; &#xA;&lt;h3&gt;Rejecting poor hardware implementations based on microarchitecture&lt;/h3&gt; &#xA;&lt;p&gt;On x86, the first incarnation of a feature in a microarchitecture might not be the most efficient (e.g. AVX on Sandy Bridge). We provide a function to retrieve the underlying microarchitecture so you can decide whether to use it.&lt;/p&gt; &#xA;&lt;p&gt;Below, &lt;code&gt;has_fast_avx&lt;/code&gt; is set to 1 if the CPU supports the AVX instruction set—but only if it&#39;s not Sandy Bridge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdbool.h&amp;gt;&#xA;#include &#34;cpuinfo_x86.h&#34;&#xA;&#xA;// For C++, add `using namespace cpu_features;`&#xA;static const X86Info info = GetX86Info();&#xA;static const X86Microarchitecture uarch = GetX86Microarchitecture(&amp;amp;info);&#xA;static const bool has_fast_avx = info.features.avx &amp;amp;&amp;amp; uarch != INTEL_SNB;&#xA;&#xA;// use has_fast_avx.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature is currently available only for x86 microarchitectures.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;usagesample&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running sample code&lt;/h3&gt; &#xA;&lt;p&gt;Building &lt;code&gt;cpu_features&lt;/code&gt; (check &lt;a href=&#34;https://raw.githubusercontent.com/google/cpu_features/main/#quickstart&#34;&gt;quickstart&lt;/a&gt; below) brings a small executable to test the library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; % ./build/list_cpu_features&#xA;arch            : x86&#xA;brand           :        Intel(R) Xeon(R) CPU E5-1650 0 @ 3.20GHz&#xA;family          :   6 (0x06)&#xA;model           :  45 (0x2D)&#xA;stepping        :   7 (0x07)&#xA;uarch           : INTEL_SNB&#xA;flags           : aes,avx,cx16,smx,sse4_1,sse4_2,ssse3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;% ./build/list_cpu_features --json&#xA;{&#34;arch&#34;:&#34;x86&#34;,&#34;brand&#34;:&#34;       Intel(R) Xeon(R) CPU E5-1650 0 @ 3.20GHz&#34;,&#34;family&#34;:6,&#34;model&#34;:45,&#34;stepping&#34;:7,&#34;uarch&#34;:&#34;INTEL_SNB&#34;,&#34;flags&#34;:[&#34;aes&#34;,&#34;avx&#34;,&#34;cx16&#34;,&#34;smx&#34;,&#34;sse4_1&#34;,&#34;sse4_2&#34;,&#34;ssse3&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s supported&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;x86³&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AArch64&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ARM&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MIPS⁴&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;POWER&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;RISCV&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;s390x&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes²&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes¹&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes¹&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes¹&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes¹&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes¹&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes¹&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes²&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;not yet&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;not yet&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;not yet&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;not yet&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacOs&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes²&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;not yet&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes²&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;not yet&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;not yet&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes²&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes¹&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes¹&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes¹&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;not yet&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;not yet&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Features revealed from Linux.&lt;/strong&gt; We gather data from several sources depending on availability: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;from glibc&#39;s &lt;a href=&#34;https://www.gnu.org/software/libc/manual/html_node/Auxiliary-Vector.html&#34;&gt;getauxval&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;by parsing &lt;code&gt;/proc/self/auxv&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;by parsing &lt;code&gt;/proc/cpuinfo&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Features revealed from CPU.&lt;/strong&gt; features are retrieved by using the &lt;code&gt;cpuid&lt;/code&gt; instruction.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Microarchitecture detection.&lt;/strong&gt; On x86 some features are not always implemented efficiently in hardware (e.g. AVX on Sandybridge). Exposing the microarchitecture allows the client to reject particular microarchitectures.&lt;/li&gt; &#xA; &lt;li&gt;All flavors of Mips are supported, little and big endian as well as 32/64 bits.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a name=&#34;ndk&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Android NDK&#39;s drop in replacement&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/cpu_features&#34;&gt;cpu_features&lt;/a&gt; is now officially supporting Android and offers a drop in replacement of for the NDK&#39;s &lt;a href=&#34;https://android.googlesource.com/platform/ndk/+/main/sources/android/cpufeatures/cpu-features.h&#34;&gt;cpu-features.h&lt;/a&gt; , see &lt;a href=&#34;https://raw.githubusercontent.com/google/cpu_features/main/ndk_compat&#34;&gt;ndk_compat&lt;/a&gt; folder for details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The cpu_features library is licensed under the terms of the Apache license. See &lt;a href=&#34;https://raw.githubusercontent.com/google/cpu_features/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;cmake&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build with CMake&lt;/h2&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://raw.githubusercontent.com/google/cpu_features/main/cmake/README.md&#34;&gt;CMake build instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;quickstart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;list_cpu_features&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -S. -Bbuild -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release&#xA;cmake --build build --config Release -j&#xA;./build/list_cpu_features --json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Use &lt;code&gt;--target ALL_BUILD&lt;/code&gt; on the second line for &lt;code&gt;Visual Studio&lt;/code&gt; and &lt;code&gt;XCode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;run tests&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -S. -Bbuild -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Debug&#xA;cmake --build build --config Debug -j&#xA;cmake --build build --config Debug --target test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Use &lt;code&gt;--target RUN_TESTS&lt;/code&gt; on the last line for &lt;code&gt;Visual Studio&lt;/code&gt; and &lt;code&gt;--target RUN_TEST&lt;/code&gt; for &lt;code&gt;XCode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;install &lt;code&gt;cpu_features&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake --build build --config Release --target install -v&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Use &lt;code&gt;--target INSTALL&lt;/code&gt; for &lt;code&gt;Visual Studio&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: When using &lt;code&gt;Makefile&lt;/code&gt; or &lt;code&gt;XCode&lt;/code&gt; generator, you can use &lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/DESTDIR.html&#34;&gt;&lt;code&gt;DESTDIR&lt;/code&gt;&lt;/a&gt; to install on a local repository.&lt;br&gt; e.g.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake --build build --config Release --target install -v -- DESTDIR=install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;bindings&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community bindings&lt;/h2&gt; &#xA;&lt;p&gt;Links provided here are not affiliated with Google but are kindly provided by the OSS Community.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.Net &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/toor1245/cpu_features.NET&#34;&gt;https://github.com/toor1245/cpu_features.NET&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Python &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Narasimha1997/py_cpu&#34;&gt;https://github.com/Narasimha1997/py_cpu&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Java &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/aecsocket/cpu-features-java&#34;&gt;https://github.com/aecsocket/cpu-features-java&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Send PR to showcase your wrapper here&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>