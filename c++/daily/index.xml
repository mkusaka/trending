<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-27T01:24:21Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>liu-yi/HTLP</title>
    <updated>2024-03-27T01:24:21Z</updated>
    <id>tag:github.com,2024-03-27:/liu-yi/HTLP</id>
    <link href="https://github.com/liu-yi/HTLP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Homomorphic Time-Lock Puzzle Schemes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Homomorphic Time-Lock Puzzle Schemes&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/version-v0.1-blue&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the repository for the paper&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Towards Practical Homomorphic Time-Lock Puzzles: Applicability and Verifiability&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;by Yi Liu, Qi Wang, Siu-Ming Yiu.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This repository provides implementations for the &lt;strong&gt;additively&lt;/strong&gt; homomorphic time-lock puzzle scheme with solution space $\mathbb{Z}_n$ in &lt;a href=&#34;https://eprint.iacr.org/2019/635.pdf&#34;&gt;[MT19]&lt;/a&gt; and our &lt;strong&gt;multiplicatively&lt;/strong&gt; homomorphic time-lock puzzle scheme with solution space $\mathbb{Z}_n^*$.&lt;/p&gt; &#xA;&lt;p&gt;To avoid the redundant cost of the puzzle-solving process, we provide three &lt;em&gt;simple&lt;/em&gt; and &lt;em&gt;fast&lt;/em&gt; protocols for both the additively HTLP scheme with the solution space $\mathbb{Z}_n$ and our multiplicatively HTLP scheme, respectively, to verify the following three properties.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Correctness.&lt;/strong&gt; A puzzle solver is able to convince other parties of the &lt;em&gt;correctness of the solution&lt;/em&gt; that he solves from a puzzle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Invalidity.&lt;/strong&gt; Upon finding that a puzzle is invalid, one can convince other parties of the &lt;em&gt;invalidity of the puzzle&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Validity.&lt;/strong&gt; A puzzle generator can convince other parties of the &lt;em&gt;validity of the puzzle&lt;/em&gt; he generated.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;This project has dependencies of &lt;a href=&#34;https://github.com/libntl/ntl&#34;&gt;NTL&lt;/a&gt; and &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://github.com/libntl/ntl&#34;&gt;NTL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install libssl-dev&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/liu-yi/HTLP&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the directory&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd HTLP&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Assuming you have globally installed NTL and libssl-dev:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can test the execution by &lt;code&gt;./TestHTLP&lt;/code&gt;, which is defined in &lt;code&gt;src/main.cpp&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>