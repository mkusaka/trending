<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-26T01:30:46Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>official-stockfish/Stockfish</title>
    <updated>2022-07-26T01:30:46Z</updated>
    <id>tag:github.com,2022-07-26:/official-stockfish/Stockfish</id>
    <link href="https://github.com/official-stockfish/Stockfish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UCI chess engine&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/official-stockfish/Stockfish/actions&#34;&gt;&lt;img src=&#34;https://github.com/official-stockfish/Stockfish/actions/workflows/stockfish.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stockfishchess.org&#34;&gt;Stockfish&lt;/a&gt; is a free, powerful UCI chess engine derived from Glaurung 2.1. Stockfish is not a complete chess program and requires a UCI-compatible graphical user interface (GUI) (e.g. XBoard with PolyGlot, Scid, Cute Chess, eboard, Arena, Sigma Chess, Shredder, Chess Partner or Fritz) in order to be used comfortably. Read the documentation for your GUI of choice for information about how to use Stockfish with it.&lt;/p&gt; &#xA;&lt;p&gt;The Stockfish engine features two evaluation functions for chess. The efficiently updatable neural network (NNUE) based evaluation is the default and by far the strongest. The classical evaluation based on handcrafted terms remains available. The strongest network is integrated in the binary and downloaded automatically during the build process. The NNUE evaluation benefits from the vector intrinsics available on most CPUs (sse2, avx2, neon, or similar).&lt;/p&gt; &#xA;&lt;h2&gt;Files&lt;/h2&gt; &#xA;&lt;p&gt;This distribution of Stockfish consists of the following files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/official-stockfish/Stockfish/raw/master/README.md&#34;&gt;README.md&lt;/a&gt;, the file you are currently reading.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/official-stockfish/Stockfish/raw/master/Copying.txt&#34;&gt;Copying.txt&lt;/a&gt;, a text file containing the GNU General Public License version 3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/official-stockfish/Stockfish/raw/master/AUTHORS&#34;&gt;AUTHORS&lt;/a&gt;, a text file with the list of authors for the project&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/official-stockfish/Stockfish/tree/master/src&#34;&gt;src&lt;/a&gt;, a subdirectory containing the full source code, including a Makefile that can be used to compile Stockfish on Unix-like systems.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;a file with the .nnue extension, storing the neural network for the NNUE evaluation. Binary distributions will have this file embedded.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The UCI protocol and available options&lt;/h2&gt; &#xA;&lt;p&gt;The Universal Chess Interface (UCI) is a standard protocol used to communicate with a chess engine, and is the recommended way to do so for typical graphical user interfaces (GUI) or chess tools. Stockfish implements the majority of its options as described in &lt;a href=&#34;https://www.shredderchess.com/download/div/uci.zip&#34;&gt;the UCI protocol&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Developers can see the default values for UCI options available in Stockfish by typing &lt;code&gt;./stockfish uci&lt;/code&gt; in a terminal, but the majority of users will typically see them and change them via a chess GUI. This is a list of available UCI options in Stockfish:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;Threads&lt;/h4&gt; &lt;p&gt;The number of CPU threads used for searching a position. For best performance, set this equal to the number of CPU cores available.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Hash&lt;/h4&gt; &lt;p&gt;The size of the hash table in MB. It is recommended to set Hash after setting Threads.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Clear Hash&lt;/h4&gt; &lt;p&gt;Clear the hash table.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Ponder&lt;/h4&gt; &lt;p&gt;Let Stockfish ponder its next move while the opponent is thinking.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;MultiPV&lt;/h4&gt; &lt;p&gt;Output the N best lines (principal variations, PVs) when searching. Leave at 1 for best performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Use NNUE&lt;/h4&gt; &lt;p&gt;Toggle between the NNUE and classical evaluation functions. If set to &#34;true&#34;, the network parameters must be available to load from file (see also EvalFile), if they are not embedded in the binary.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;EvalFile&lt;/h4&gt; &lt;p&gt;The name of the file of the NNUE evaluation parameters. Depending on the GUI the filename might have to include the full path to the folder/directory that contains the file. Other locations, such as the directory that contains the binary and the working directory, are also searched.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;UCI_AnalyseMode&lt;/h4&gt; &lt;p&gt;An option handled by your GUI.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;UCI_Chess960&lt;/h4&gt; &lt;p&gt;An option handled by your GUI. If true, Stockfish will play Chess960.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;UCI_ShowWDL&lt;/h4&gt; &lt;p&gt;If enabled, show approximate WDL statistics as part of the engine output. These WDL numbers model expected game outcomes for a given evaluation and game ply for engine self-play at fishtest LTC conditions (60+0.6s per game).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;UCI_LimitStrength&lt;/h4&gt; &lt;p&gt;Enable weaker play aiming for an Elo rating as set by UCI_Elo. This option overrides Skill Level.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;UCI_Elo&lt;/h4&gt; &lt;p&gt;If enabled by UCI_LimitStrength, aim for an engine strength of the given Elo. This Elo rating has been calibrated at a time control of 60s+0.6s and anchored to CCRL 40/4.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Skill Level&lt;/h4&gt; &lt;p&gt;Lower the Skill Level in order to make Stockfish play weaker (see also UCI_LimitStrength). Internally, MultiPV is enabled, and with a certain probability depending on the Skill Level a weaker move will be played.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;SyzygyPath&lt;/h4&gt; &lt;p&gt;Path to the folders/directories storing the Syzygy tablebase files. Multiple directories are to be separated by &#34;;&#34; on Windows and by &#34;:&#34; on Unix-based operating systems. Do not use spaces around the &#34;;&#34; or &#34;:&#34;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;C:\tablebases\wdl345;C:\tablebases\wdl6;D:\tablebases\dtz345;D:\tablebases\dtz6&lt;/code&gt;&lt;/p&gt; &lt;p&gt;It is recommended to store .rtbw files on an SSD. There is no loss in storing the .rtbz files on a regular HDD. It is recommended to verify all md5 checksums of the downloaded tablebase files (&lt;code&gt;md5sum -c checksum.md5&lt;/code&gt;) as corruption will lead to engine crashes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;SyzygyProbeDepth&lt;/h4&gt; &lt;p&gt;Minimum remaining search depth for which a position is probed. Set this option to a higher value to probe less aggressively if you experience too much slowdown (in terms of nps) due to tablebase probing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Syzygy50MoveRule&lt;/h4&gt; &lt;p&gt;Disable to let fifty-move rule draws detected by Syzygy tablebase probes count as wins or losses. This is useful for ICCF correspondence games.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;SyzygyProbeLimit&lt;/h4&gt; &lt;p&gt;Limit Syzygy tablebase probing to positions with at most this many pieces left (including kings and pawns).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Move Overhead&lt;/h4&gt; &lt;p&gt;Assume a time delay of x ms due to network and GUI overheads. This is useful to avoid losses on time in those cases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Slow Mover&lt;/h4&gt; &lt;p&gt;Lower values will make Stockfish take less time in games, higher values will make it think longer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;nodestime&lt;/h4&gt; &lt;p&gt;Tells the engine to use nodes searched instead of wall time to account for elapsed time. Useful for engine testing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Debug Log File&lt;/h4&gt; &lt;p&gt;Write all communication to and from the engine into a text file.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For developers the following non-standard commands might be of interest, mainly useful for debugging:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;bench &lt;em&gt;ttSize threads limit fenFile limitType evalType&lt;/em&gt;&lt;/h4&gt; &lt;p&gt;Performs a standard benchmark using various options. The signature of a version (standard node count) is obtained using all defaults. &lt;code&gt;bench&lt;/code&gt; is currently &lt;code&gt;bench 16 1 13 default depth mixed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;compiler&lt;/h4&gt; &lt;p&gt;Give information about the compiler and environment used for building a binary.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;d&lt;/h4&gt; &lt;p&gt;Display the current position, with ascii art and fen.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;eval&lt;/h4&gt; &lt;p&gt;Return the evaluation of the current position.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;export_net [filename]&lt;/h4&gt; &lt;p&gt;Exports the currently loaded network to a file. If the currently loaded network is the embedded network and the filename is not specified then the network is saved to the file matching the name of the embedded network, as defined in evaluate.h. If the currently loaded network is not the embedded network (some net set through the UCI setoption) then the filename parameter is required and the network is saved into that file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;flip&lt;/h4&gt; &lt;p&gt;Flips the side to move.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A note on classical evaluation versus NNUE evaluation&lt;/h2&gt; &#xA;&lt;p&gt;Both approaches assign a value to a position that is used in alpha-beta (PVS) search to find the best move. The classical evaluation computes this value as a function of various chess concepts, handcrafted by experts, tested and tuned using fishtest. The NNUE evaluation computes this value with a neural network based on basic inputs (e.g. piece positions only). The network is optimized and trained on the evaluations of millions of positions at moderate search depth.&lt;/p&gt; &#xA;&lt;p&gt;The NNUE evaluation was first introduced in shogi, and ported to Stockfish afterward. It can be evaluated efficiently on CPUs, and exploits the fact that only parts of the neural network need to be updated after a typical chess move. &lt;a href=&#34;https://github.com/nodchip/Stockfish&#34;&gt;The nodchip repository&lt;/a&gt; provided the first version of the needed tools to train and develop the NNUE networks. Today, more advanced training tools are available in &lt;a href=&#34;https://github.com/glinscott/nnue-pytorch/&#34;&gt;the nnue-pytorch repository&lt;/a&gt;, while data generation tools are available in &lt;a href=&#34;https://github.com/official-stockfish/Stockfish/tree/tools&#34;&gt;a dedicated branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On CPUs supporting modern vector instructions (avx2 and similar), the NNUE evaluation results in much stronger playing strength, even if the nodes per second computed by the engine is somewhat lower (roughly 80% of nps is typical).&lt;/p&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;the NNUE evaluation depends on the Stockfish binary and the network parameter file (see the EvalFile UCI option). Not every parameter file is compatible with a given Stockfish binary, but the default value of the EvalFile UCI option is the name of a network that is guaranteed to be compatible with that binary.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;to use the NNUE evaluation, the additional data file with neural network parameters needs to be available. Normally, this file is already embedded in the binary or it can be downloaded. The filename for the default (recommended) net can be found as the default value of the &lt;code&gt;EvalFile&lt;/code&gt; UCI option, with the format &lt;code&gt;nn-[SHA256 first 12 digits].nnue&lt;/code&gt; (for instance, &lt;code&gt;nn-c157e0a5755b.nnue&lt;/code&gt;). This file can be downloaded from&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://tests.stockfishchess.org/api/nn/[filename]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;replacing &lt;code&gt;[filename]&lt;/code&gt; as needed.&lt;/p&gt; &#xA;&lt;h2&gt;What to expect from the Syzygy tablebases?&lt;/h2&gt; &#xA;&lt;p&gt;If the engine is searching a position that is not in the tablebases (e.g. a position with 8 pieces), it will access the tablebases during the search. If the engine reports a very large score (typically 153.xx), this means it has found a winning line into a tablebase position.&lt;/p&gt; &#xA;&lt;p&gt;If the engine is given a position to search that is in the tablebases, it will use the tablebases at the beginning of the search to preselect all good moves, i.e. all moves that preserve the win or preserve the draw while taking into account the 50-move rule. It will then perform a search only on those moves. &lt;strong&gt;The engine will not move immediately&lt;/strong&gt;, unless there is only a single good move. &lt;strong&gt;The engine likely will not report a mate score, even if the position is known to be won.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is therefore clear that this behaviour is not identical to what one might be used to with Nalimov tablebases. There are technical reasons for this difference, the main technical reason being that Nalimov tablebases use the DTM metric (distance-to-mate), while the Syzygy tablebases use a variation of the DTZ metric (distance-to-zero, zero meaning any move that resets the 50-move counter). This special metric is one of the reasons that the Syzygy tablebases are more compact than Nalimov tablebases, while still storing all information needed for optimal play and in addition being able to take into account the 50-move rule.&lt;/p&gt; &#xA;&lt;h2&gt;Large Pages&lt;/h2&gt; &#xA;&lt;p&gt;Stockfish supports large pages on Linux and Windows. Large pages make the hash access more efficient, improving the engine speed, especially on large hash sizes. Typical increases are 5..10% in terms of nodes per second, but speed increases up to 30% have been measured. The support is automatic. Stockfish attempts to use large pages when available and will fall back to regular memory allocation when this is not the case.&lt;/p&gt; &#xA;&lt;h3&gt;Support on Linux&lt;/h3&gt; &#xA;&lt;p&gt;Large page support on Linux is obtained by the Linux kernel transparent huge pages functionality. Typically, transparent huge pages are already enabled, and no configuration is needed.&lt;/p&gt; &#xA;&lt;h3&gt;Support on Windows&lt;/h3&gt; &#xA;&lt;p&gt;The use of large pages requires &#34;Lock Pages in Memory&#34; privilege. See &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/enable-the-lock-pages-in-memory-option-windows&#34;&gt;Enable the Lock Pages in Memory Option (Windows)&lt;/a&gt; on how to enable this privilege, then run &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/rammap&#34;&gt;RAMMap&lt;/a&gt; to double-check that large pages are used. We suggest that you reboot your computer after you have enabled large pages, because long Windows sessions suffer from memory fragmentation, which may prevent Stockfish from getting large pages: a fresh session is better in this regard.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling Stockfish yourself from the sources&lt;/h2&gt; &#xA;&lt;p&gt;Stockfish has support for 32 or 64-bit CPUs, certain hardware instructions, big-endian machines such as Power PC, and other platforms.&lt;/p&gt; &#xA;&lt;p&gt;On Unix-like systems, it should be easy to compile Stockfish directly from the source code with the included Makefile in the folder &lt;code&gt;src&lt;/code&gt;. In general it is recommended to run &lt;code&gt;make help&lt;/code&gt; to see a list of make targets with corresponding descriptions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    cd src&#xA;    make help&#xA;    make net&#xA;    make build ARCH=x86-64-modern&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When not using the Makefile to compile (for instance, with Microsoft MSVC) you need to manually set/unset some switches in the compiler command line; see file &lt;em&gt;types.h&lt;/em&gt; for a quick reference.&lt;/p&gt; &#xA;&lt;p&gt;When reporting an issue or a bug, please tell us which Stockfish version and which compiler you used to create your executable. This information can be found by typing the following command in a console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    ./stockfish compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Understanding the code base and participating in the project&lt;/h2&gt; &#xA;&lt;p&gt;Stockfish&#39;s improvement over the last decade has been a great community effort. There are a few ways to help contribute to its growth.&lt;/p&gt; &#xA;&lt;h3&gt;Donating hardware&lt;/h3&gt; &#xA;&lt;p&gt;Improving Stockfish requires a massive amount of testing. You can donate your hardware resources by installing the &lt;a href=&#34;https://github.com/glinscott/fishtest/wiki/Running-the-worker:-overview&#34;&gt;Fishtest Worker&lt;/a&gt; and view the current tests on &lt;a href=&#34;https://tests.stockfishchess.org/tests&#34;&gt;Fishtest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Improving the code&lt;/h3&gt; &#xA;&lt;p&gt;If you want to help improve the code, there are several valuable resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.chessprogramming.org&#34;&gt;In this wiki,&lt;/a&gt; many techniques used in Stockfish are explained with a lot of background information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.chessprogramming.org/Stockfish&#34;&gt;The section on Stockfish&lt;/a&gt; describes many features and techniques used by Stockfish. However, it is generic rather than being focused on Stockfish&#39;s precise implementation. Nevertheless, a helpful resource.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The latest source can always be found on &lt;a href=&#34;https://github.com/official-stockfish/Stockfish&#34;&gt;GitHub&lt;/a&gt;. Discussions about Stockfish take place these days mainly in the &lt;a href=&#34;https://groups.google.com/forum/#!forum/fishcooking&#34;&gt;FishCooking&lt;/a&gt; group and on the &lt;a href=&#34;https://discord.gg/nv8gDtt&#34;&gt;Stockfish Discord channel&lt;/a&gt;. The engine testing is done on &lt;a href=&#34;https://tests.stockfishchess.org/tests&#34;&gt;Fishtest&lt;/a&gt;. If you want to help improve Stockfish, please read this &lt;a href=&#34;https://github.com/glinscott/fishtest/wiki/Creating-my-first-test&#34;&gt;guideline&lt;/a&gt; first, where the basics of Stockfish development are explained.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Terms of use&lt;/h2&gt; &#xA;&lt;p&gt;Stockfish is free, and distributed under the &lt;strong&gt;GNU General Public License version 3&lt;/strong&gt; (GPL v3). Essentially, this means you are free to do almost exactly what you want with the program, including distributing it among your friends, making it available for download from your website, selling it (either by itself or as part of some bigger software package), or using it as the starting point for a software project of your own.&lt;/p&gt; &#xA;&lt;p&gt;The only real limitation is that whenever you distribute Stockfish in some way, you MUST always include the license and the full source code (or a pointer to where the source code can be found) to generate the exact binary you are distributing. If you make any changes to the source code, these changes must also be made available under the GPL v3.&lt;/p&gt; &#xA;&lt;p&gt;For full details, read the copy of the GPL v3 found in the file named &lt;a href=&#34;https://github.com/official-stockfish/Stockfish/raw/master/Copying.txt&#34;&gt;&lt;em&gt;Copying.txt&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>encrypted-def/basic-algo-lecture</title>
    <updated>2022-07-26T01:30:46Z</updated>
    <id>tag:github.com,2022-07-26:/encrypted-def/basic-algo-lecture</id>
    <link href="https://github.com/encrypted-def/basic-algo-lecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;바킹독의 실전 알고리즘 강의 자료&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;중요한 공지&lt;/h3&gt; &#xA;&lt;p&gt;📡문제집 풀이 집단 지성 프로젝트📡를 진행중입니다. &lt;a href=&#34;https://raw.githubusercontent.com/encrypted-def/basic-algo-lecture/master/docs/solution-request.md&#34;&gt;링크&lt;/a&gt;를 참고해주세요.&lt;/p&gt; &#xA;&lt;p&gt;질문을 하기 전 &lt;a href=&#34;https://raw.githubusercontent.com/encrypted-def/basic-algo-lecture/master/docs/how-to-ask.md&#34;&gt;이 글&lt;/a&gt;을 꼭 참고해주세요.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;🐕 바킹독의 실전 알고리즘 🐕&lt;/h1&gt; &#xA;&lt;h2&gt;설명&lt;/h2&gt; &#xA;&lt;p&gt;이 강좌는 &lt;strong&gt;실전성&lt;/strong&gt;에 가장 큰 의미를 둔 C++ 언어 기반 실전 알고리즘 강좌입니다. 청자가 C/C++ 문법은 알고 있지만 자료구조와 알고리즘에 대한 선수 지식이 없다는 가정하에 커리큘럼을 구성했습니다.&lt;/p&gt; &#xA;&lt;p&gt;주 타겟은 코딩테스트를 대비하는 대학생/취업준비생이지만 정보올림피아드/USACO/코드잼 등의 알고리즘 대회를 준비하고자 하는 분들도 이 강좌를 통해 대회에 필요한 기본기를 익힐 수 있습니다.&lt;/p&gt; &#xA;&lt;p&gt;강좌는 주제에 대한 이론을 익히고 &lt;a href=&#34;https://www.acmicpc.net/&#34;&gt;백준 온라인 저지&lt;/a&gt;에 있는 관련 문제를 풀이하는 방식으로 진행됩니다.&lt;/p&gt; &#xA;&lt;p&gt;개인차는 있겠지만 1주일에 40시간 이상 투자할 수 있다고 할 때 완강까지 2-4개월 정도 걸립니다. 완강을 한다면 앞으로 코딩테스트에서 애를 먹을 일은 절대 없을 것이고 일정상 완강을 할 수 없는 상황이라면 &lt;code&gt;0x11강 - 그리디&lt;/code&gt;까지만 익히고 코딩테스트에 임해도 충분히 승산이 있습니다.&lt;/p&gt; &#xA;&lt;h2&gt;강의의 장점&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;강의자가 알고리즘을 많이 잘하고 경험이 풍부합니다🤣(OJ 2000+ solve, 코드포스 레이팅 2400+, KOI/ICPC/SCPC/카카오 코드 페스티벌 수상 등). 수년간 강의자가 몸으로 부딪치며 쌓아온 경험을 바탕으로 고수의 시각에서 문제에 접근하고 이해한 내용을 바탕으로 실전적인 코드를 작성하는 요령을 강의에 잘 녹여냈습니다.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;처음 강의를 시작한 때로부터 지금까지 3년이 넘는 시간동안 블로그와 유튜브를 통해 모두에게 공개되어 피드백을 계속 받아왔기 때문에 강의 내용과 코드의 오류가 적고, 리뉴얼을 통해 보다 더 자세하고 초보자에게 친절한 강의가 되게끔 내용을 작성했습니다.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;백준 온라인 저지를 통해 연습 문제를 제공합니다. 그리고 강의에서 같이 다룬 80여개의 문제 이외에도 주제별로 문제 목록을 기본 문제/응용 문제로 분류해서 제공하고 풀이를 모아두었기 때문에 강의를 듣고난 후 문제를 풀며 학습을 할 수 있습니다.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;C언어는 알고 있는데 C++을 몰라요. C++을 먼저 배우고 올까요?&lt;/h3&gt; &#xA;&lt;p&gt;C언어는 알고 있는데 C++을 잘 모른다고 하면 강의를 따라오는데 큰 문제가 없습니다. 강의에서 다소 생소할 수 있는 C++문법들에 대해서는 설명을 해두었기 때문에 굳이 C++을 마스터하고 이 강의를 들으려고 하기 보다는 강의와 함께 C++ 공부도 병행하면 됩니다.&lt;/p&gt; &#xA;&lt;h3&gt;C++ 대신 자바/파이썬만 아는데 강의를 들어도 괜찮을까요?&lt;/h3&gt; &#xA;&lt;p&gt;코딩테스트 언어 선택에 대한 제 생각은 &lt;a href=&#34;https://blog.encrypted.gg/965&#34;&gt;이 글&lt;/a&gt;을 참고해주세요. 강의에서 효율적인 구현은 이론 못지않게 큰 부분을 담당하고 있습니다. 추후에 자바/파이썬 버전을 제작할 생각이 아주 약간 있긴 하지만 기약이 없고 현재로서는 모든 구현이 C++으로 제공되기 때문에 시간이 여유롭다면 주 언어를 C++로 변경하는 것을 추천드립니다.&lt;/p&gt; &#xA;&lt;p&gt;꼭 자바/파이썬으로 코딩테스트를 치려고 한다면 당장은 달리 방법이 없습니다. 그래도 C/C++에 특화된 구현을 제외한 나머지 내용은 언어와 크게 상관이 없으니 일단 강의를 한 번 보고, 도저히 안되겠다 싶으면 제 강의 대신 코딩테스트를 치고자 하는 언어에 특화된 강의를 찾아서 보시면 됩니다.&lt;/p&gt; &#xA;&lt;h3&gt;자료구조는 별도로 학습해야 하나요?&lt;/h3&gt; &#xA;&lt;p&gt;강의에는 자료구조에 대한 내용이 같이 포함되어 있습니다.&lt;/p&gt; &#xA;&lt;h3&gt;슬라이드나 기타 강의 자료를 개인 블로그에 복습용으로 올려도 되나요?&lt;/h3&gt; &#xA;&lt;p&gt;비상업적 &amp;amp; 출처 표시 조건 하에 가능합니다.&lt;/p&gt; &#xA;&lt;h3&gt;강의를 꼭 순서대로 들어야 하나요?&lt;/h3&gt; &#xA;&lt;p&gt;강의의 배치는 난이도순입니다. 또한 마치 선수과목과 같이 앞쪽 강의를 들어야 뒷쪽 강의를 이해할 수 있는 경우가 있어서(ex : 스택 -&amp;gt; 스택의 활용, 재귀 -&amp;gt; 백트래킹, 재귀 -&amp;gt; 정렬 I 등등) 가능하면 순서대로 듣는 것을 추천드립니다.&lt;/p&gt; &#xA;&lt;p&gt;부득이하게 뒷쪽 강의를 먼저 들어야 하는 상황이라면, 듣다보면 앞쪽에서 필요한 개념이 무엇인지 감이 올텐데 그걸 참고해서 필요한 앞쪽 강의만 찾아서 들으시면 됩니다.&lt;/p&gt; &#xA;&lt;h3&gt;질문은 어디에 하면 되나요?&lt;/h3&gt; &#xA;&lt;p&gt;다른 사람도 질문을 참고할 수 있게 해당 강의 블로그 글 or 동영상에 댓글로 달아주세요. 개인적인 질문은 admin [at] encrypted.gg 메일로 보내주시면 됩니다. 질문을 하기 전 &lt;a href=&#34;https://raw.githubusercontent.com/encrypted-def/basic-algo-lecture/master/docs/how-to-ask.md&#34;&gt;이 글&lt;/a&gt;을 꼭 참고해주세요.&lt;/p&gt; &#xA;&lt;h2&gt;리뉴얼 예상 목차&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;0x00강 - 오리엔테이션&#xA;0x01강 - 기초 코드 작성 요령 I&#xA;0x02강 - 기초 코드 작성 요령 II&#xA;0x03강 - 배열&#xA;0x04강 - 연결 리스트&#xA;0x05강 - 스택&#xA;0x06강 - 큐&#xA;0x07강 - 덱&#xA;0x08강 - 스택의 활용(수식의 괄호 쌍)&#xA;0x09강 - BFS&#xA;0x0A강 - DFS&#xA;0x0B강 - 재귀&#xA;0x0C강 - 백트래킹&#xA;0x0D강 - 시뮬레이션&#xA;0x0E강 - 정렬 I&#xA;0x0F강 - 정렬 II&#xA;0x10강 - 다이나믹 프로그래밍&#xA;0x11강 - 그리디&#xA;0x12강 - 수학&#xA;0x13강 - 이분탐색&#xA;0x14강 - 투 포인터&#xA;0x15강 - 해시&#xA;0x16강 - 이진 검색 트리&#xA;0x17강 - 우선순위 큐&#xA;0x18강 - 그래프&#xA;0x19강 - 트리&#xA;0x1A강 - 위상정렬&#xA;0x1B강 - 최소 신장 트리&#xA;0x1C강 - 플로이드 알고리즘&#xA;0x1D강 - 다익스트라 알고리즘&#xA;0x1E강 - KMP 알고리즘 &#xA;0x1F강 - 트라이&#xA;부록 1 - 문자열 기초&#xA;부록 2 - 동적 배열&#xA;부록 3 - 비트마스킹&#xA;부록 4 - Union Find&#xA;부록 5 - 다이나믹 프로그래밍 심화&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;External Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.encrypted.gg/category/%EA%B0%95%EC%A2%8C/%EC%8B%A4%EC%A0%84%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&#34;&gt;실전 알고리즘 강좌 블로그&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/baaarkingdog&#34;&gt;유튜브&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/encrypted-def/basic-algo-lecture&#34;&gt;깃헙 리포지토리&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/encrypted-def/basic-algo-lecture/master/workbook.md&#34;&gt;문제집 링크&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;메일 주소 : admin [at] encrypted.gg&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>stenzek/duckstation</title>
    <updated>2022-07-26T01:30:46Z</updated>
    <id>tag:github.com,2022-07-26:/stenzek/duckstation</id>
    <link href="https://github.com/stenzek/duckstation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast PlayStation 1 emulator for x86-64/AArch32/AArch64&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DuckStation - PlayStation 1, aka. PSX Emulator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#latest-news&#34;&gt;Latest News&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#features&#34;&gt;Features&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#downloading-and-running&#34;&gt;Downloading and Running&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#building&#34;&gt;Building&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#disclaimers&#34;&gt;Disclaimers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Discord Server:&lt;/strong&gt; &lt;a href=&#34;https://discord.gg/Buktv3t&#34;&gt;https://discord.gg/Buktv3t&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Latest Builds for Windows and Linux (AppImage)&lt;/strong&gt; &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/latest&#34;&gt;https://github.com/stenzek/duckstation/releases/tag/latest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Game Compatibility List:&lt;/strong&gt; &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1H66MxViRjjE5f8hOl5RQmF5woS1murio2dsLn14kEqo/edit&#34;&gt;https://docs.google.com/spreadsheets/d/1H66MxViRjjE5f8hOl5RQmF5woS1murio2dsLn14kEqo/edit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Wiki:&lt;/strong&gt; &lt;a href=&#34;https://www.duckstation.org/wiki/&#34;&gt;https://www.duckstation.org/wiki/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DuckStation is an simulator/emulator of the Sony PlayStation(TM) console, focusing on playability, speed, and long-term maintainability. The goal is to be as accurate as possible while maintaining performance suitable for low-end devices. &#34;Hack&#34; options are discouraged, the default configuration should support all playable games with only some of the enhancements having compatibility issues.&lt;/p&gt; &#xA;&lt;p&gt;A &#34;BIOS&#34; ROM image is required to to start the emulator and to play games. You can use an image from any hardware version or region, although mismatching game regions and BIOS regions may have compatibility issues. A ROM image is not provided with the emulator for legal reasons, you should dump this from your own console using Caetla or other means.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;DuckStation features a fully-featured frontend built using Qt, as well as a fullscreen/TV UI based on Dear ImGui.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/main-qt.png&#34; alt=&#34;Main Window Screenshot&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/bigduck.png&#34; alt=&#34;Fullscreen UI Screenshot&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Other features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU Recompiler/JIT (x86-64, armv7/AArch32 and AArch64)&lt;/li&gt; &#xA; &lt;li&gt;Hardware (D3D11, D3D12, OpenGL, Vulkan) and software rendering&lt;/li&gt; &#xA; &lt;li&gt;Upscaling, texture filtering, and true colour (24-bit) in hardware renderers&lt;/li&gt; &#xA; &lt;li&gt;PGXP for geometry precision, texture correction, and depth buffer emulation&lt;/li&gt; &#xA; &lt;li&gt;Adaptive downsampling filter&lt;/li&gt; &#xA; &lt;li&gt;Post processing shader chains&lt;/li&gt; &#xA; &lt;li&gt;&#34;Fast boot&#34; for skipping BIOS splash/intro&lt;/li&gt; &#xA; &lt;li&gt;Save state support&lt;/li&gt; &#xA; &lt;li&gt;Windows, Linux, &lt;strong&gt;highly experimental&lt;/strong&gt; macOS support&lt;/li&gt; &#xA; &lt;li&gt;Supports bin/cue images, raw bin/img files, MAME CHD, single-track ECM, MDS/MDF, and unencrypted PBP formats.&lt;/li&gt; &#xA; &lt;li&gt;Direct booting of homebrew executables&lt;/li&gt; &#xA; &lt;li&gt;Direct loading of Portable Sound Format (psf) files&lt;/li&gt; &#xA; &lt;li&gt;Digital and analog controllers for input (rumble is forwarded to host)&lt;/li&gt; &#xA; &lt;li&gt;Namco GunCon lightgun support (simulated with mouse)&lt;/li&gt; &#xA; &lt;li&gt;NeGcon support&lt;/li&gt; &#xA; &lt;li&gt;Qt and NoGUI frontends for desktop&lt;/li&gt; &#xA; &lt;li&gt;Automatic updates for Windows builds&lt;/li&gt; &#xA; &lt;li&gt;Automatic content scanning - game titles/hashes are provided by redump.org&lt;/li&gt; &#xA; &lt;li&gt;Optional automatic switching of memory cards for each game&lt;/li&gt; &#xA; &lt;li&gt;Supports loading cheats from existing lists&lt;/li&gt; &#xA; &lt;li&gt;Memory card editor and save importer&lt;/li&gt; &#xA; &lt;li&gt;Emulated CPU overclocking&lt;/li&gt; &#xA; &lt;li&gt;Integrated and remote debugging&lt;/li&gt; &#xA; &lt;li&gt;Multitap controllers (up to 8 devices)&lt;/li&gt; &#xA; &lt;li&gt;RetroAchievements&lt;/li&gt; &#xA; &lt;li&gt;Automatic loading/applying of PPF patches&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A CPU faster than a potato. But it needs to be x86_64, AArch32/armv7, or AArch64/ARMv8, otherwise you won&#39;t get a recompiler and it&#39;ll be slow.&lt;/li&gt; &#xA; &lt;li&gt;For the hardware renderers, a GPU capable of OpenGL 3.1/OpenGL ES 3.0/Direct3D 11 Feature Level 10.0 (or Vulkan 1.0) and above. So, basically anything made in the last 10 years or so.&lt;/li&gt; &#xA; &lt;li&gt;SDL, XInput or DInput compatible game controller (e.g. XB360/XBOne). DualShock 3 users on Windows will need to install the official DualShock 3 drivers included as part of PlayStation Now.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloading and running&lt;/h2&gt; &#xA;&lt;p&gt;Binaries of DuckStation for Windows x64/ARM64, Linux x86_64 (in AppImage format), and Android ARMv7/ARMv8 are available via GitHub Releases and are automatically built with every commit/push. Binaries or packages distributed through other sources may be out of date and are not supported by the developer, please speak to them for support, not us.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows 10 is the only version of Windows supported by the developer.&lt;/strong&gt; Windows 7/8 may work, but is not supported. I am aware some users are still using Windows 7, but it is no longer supported by Microsoft and too much effort to get running on modern hardware. Game bugs are unlikely to be affected by the operating system, however performance issues should be verified on Windows 10 before reporting.&lt;/p&gt; &#xA;&lt;p&gt;To download:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/latest&#34;&gt;https://github.com/stenzek/duckstation/releases/tag/latest&lt;/a&gt;, and download the Windows x64 build. This is a zip archive containing the prebuilt binary.&lt;/li&gt; &#xA; &lt;li&gt;Alternatively, direct download link: &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/download/latest/duckstation-windows-x64-release.zip&#34;&gt;https://github.com/stenzek/duckstation/releases/download/latest/duckstation-windows-x64-release.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract the archive &lt;strong&gt;to a subdirectory&lt;/strong&gt;. The archive has no root subdirectory, so extracting to the current directory will drop a bunch of files in your download directory if you do not extract to a subdirectory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once downloaded and extracted, you can launch the emulator with &lt;code&gt;duckstation-qt-x64-ReleaseLTCG.exe&lt;/code&gt;. To set up:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Either configure the path to a BIOS image in the settings, or copy one or more PlayStation BIOS images to the bios/ subdirectory. On Windows, by default this will be located in &lt;code&gt;C:\Users\YOUR_USERNAME\Documents\DuckStation\bios&lt;/code&gt;. If you don&#39;t want to use the Documents directory to save the BIOS/memory cards/etc, you can use portable mode. See &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#user-directories&#34;&gt;User directory&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If using the Qt frontend, add the directories containing your disc images by clicking &lt;code&gt;Settings-&amp;gt;Add Game Directory&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select a game from the list, or open a disc image file and enjoy.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you get an error about &lt;code&gt;vcruntime140_1.dll&lt;/code&gt; being missing, you will need to update your Visual C++ runtime.&lt;/strong&gt; You can do that from this page: &lt;a href=&#34;https://support.microsoft.com/en-au/help/2977003/the-latest-supported-visual-c-downloads&#34;&gt;https://support.microsoft.com/en-au/help/2977003/the-latest-supported-visual-c-downloads&lt;/a&gt;. Specifically, you want the x64 runtime, which can be downloaded from &lt;a href=&#34;https://aka.ms/vs/17/release/vc_redist.x64.exe&#34;&gt;https://aka.ms/vs/17/release/vc_redist.x64.exe&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows 7 users, TLS 1.2 is not supported by default and you will not be able to use the automatic updater or RetroAchievements.&lt;/strong&gt; This knowledge base article contains instructions for enabling TLS 1.1/1.2: &lt;a href=&#34;https://support.microsoft.com/en-us/topic/update-to-enable-tls-1-1-and-tls-1-2-as-default-secure-protocols-in-winhttp-in-windows-c4bd73d2-31d7-761e-0178-11268bb10392&#34;&gt;https://support.microsoft.com/en-us/topic/update-to-enable-tls-1-1-and-tls-1-2-as-default-secure-protocols-in-winhttp-in-windows-c4bd73d2-31d7-761e-0178-11268bb10392&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Qt frontend includes an automatic update checker. Builds downloaded after 2020/08/07 will automatically check for updates each time the emulator starts, this can be disabled in Settings. Alternatively, you can force an update check by clicking &lt;code&gt;Help-&amp;gt;Check for Updates&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Universal Windows Platform / Xbox One&lt;/h3&gt; &#xA;&lt;p&gt;The DuckStation fullscreen UI is available for the Universal Windows Platform and Xbox One.&lt;/p&gt; &#xA;&lt;p&gt;To use on Xbox One:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure your console is in developer mode. You will need to purchase a developer license from Microsoft.&lt;/li&gt; &#xA; &lt;li&gt;Download the duckstation-uwp.appx file.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the device portal for your console (displayed in the home screen).&lt;/li&gt; &#xA; &lt;li&gt;Install the appx file by clicking Add in the main page.&lt;/li&gt; &#xA; &lt;li&gt;Set the app to Game mode instead of App mode: Scroll down to DuckStation in the listinng, press the &lt;code&gt;Change View&lt;/code&gt; button, select &lt;code&gt;View Details&lt;/code&gt;, and change &lt;code&gt;App&lt;/code&gt; to &lt;code&gt;Game&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Upload a BIOS image to the local state directory for DuckStation, or place your BIOS image on a removable USB drive. If using a USB drive, you will need to set the BIOS path in DuckStation&#39;s settings to point to this directory.&lt;/li&gt; &#xA; &lt;li&gt;Add games to the local state games directory, or use a removable USB drive. Again, you will have to register this path in Game List Settings for it to scan.&lt;/li&gt; &#xA; &lt;li&gt;Launch the app, and enjoy. By default, the &lt;code&gt;Change View&lt;/code&gt; button will open the quick menu.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t forget to enable enhancements, an Xbox One S can do 8x resolution scale with 4K output, Series consoles can go higher.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; I&#39;d recommend using a USB drive for saving memory cards, as the local state directory will be removed when you uninstall the app.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;DuckStation does support Linux, but no support will be provided by the developer due to the huge range and variance of distributions. AppImage builds are provided, but we are not obliged to provide any assistance or investigate any issues, i.e. use at your own risk. However, these binaries may be incompatible with older Linux distros (e.g. Ubuntu distros earlier than 20.04 LTS) due to older distros not providing newer versions of the C/C++ standard libraries required by the AppImage binaries. If you are using a packaged version of DuckStation from another source, please do not ask us for assistance and speak to your packager instead.&lt;/p&gt; &#xA;&lt;h4&gt;Binaries&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux users are encouraged to build from source when possible and optionally create their own AppImages for features such as desktop integration if desired.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To download:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/stenzek/duckstation/releases/tag/latest&#34;&gt;https://github.com/stenzek/duckstation/releases/tag/latest&lt;/a&gt;, and download either &lt;code&gt;duckstation-qt-x64.AppImage&lt;/code&gt; or &lt;code&gt;duckstation-nogui-x64.AppImage&lt;/code&gt; for your desired frontend.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;chmod a+x&lt;/code&gt; on the downloaded AppImage -- following this step, the AppImage can be run like a typical executable.&lt;/li&gt; &#xA; &lt;li&gt;Optionally use a program such as &lt;a href=&#34;https://github.com/AppImage/appimaged&#34;&gt;appimaged&lt;/a&gt; or &lt;a href=&#34;https://github.com/TheAssassin/AppImageLauncher&#34;&gt;AppImageLauncher&lt;/a&gt; for desktop integration. &lt;a href=&#34;https://github.com/AppImage/AppImageUpdate&#34;&gt;AppImageUpdate&lt;/a&gt; can be used alongside appimaged to easily update your DuckStation AppImage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;MacOS builds are no longer provided, as I cannot support a platform which I do not own hardware for, and I&#39;m not spending $1000+ out of my own pocket for a machine which I have no other use for.&lt;/p&gt; &#xA;&lt;p&gt;You can still build from &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#building&#34;&gt;source&lt;/a&gt;, but you will have to debug any issues encountered yourself.&lt;/p&gt; &#xA;&lt;p&gt;If anyone is willing to volunteer to support the platform to ensure users have a good experience, I&#39;m more than happy to re-enable the releases.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;You will need a device with armv7 (32-bit ARM), AArch64 (64-bit ARM), or x86_64 (64-bit x86). 64-bit is preferred, the requirements are higher for 32-bit, you&#39;ll probably want at least a 1.5GHz CPU.&lt;/p&gt; &#xA;&lt;p&gt;Google Play is the preferred distribution mechanism and will result in smaller download sizes: &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.github.stenzek.duckstation&#34;&gt;https://play.google.com/store/apps/details?id=com.github.stenzek.duckstation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;No support is provided for the Android app&lt;/strong&gt;, it is free and your expectations should be in line with that. Please &lt;strong&gt;do not&lt;/strong&gt; email me about issues about it, they will be ignored. This repository should also not be used to raise issues about the app, as it does not contain the app code, only the desktop versions.&lt;/p&gt; &#xA;&lt;p&gt;If you must use an APK, download links are:&lt;/p&gt; &#xA;&lt;p&gt;Download link: &lt;a href=&#34;https://www.duckstation.org/android/duckstation-android.apk&#34;&gt;https://www.duckstation.org/android/duckstation-android.apk&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Changelog link: &lt;a href=&#34;https://www.duckstation.org/android/changelog.txt&#34;&gt;https://www.duckstation.org/android/changelog.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install and run the app for the first time.&lt;/li&gt; &#xA; &lt;li&gt;Add game directories by tapping the add button and selecting a directory. You can add additional directories afterwards by selecting &#34;Edit Game Directories&#34; from the menu.&lt;/li&gt; &#xA; &lt;li&gt;Tap a game to start. When you start a game for the first time it will prompt you to import a BIOS image.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you have an external controller, you will need to map the buttons and sticks in settings.&lt;/p&gt; &#xA;&lt;h3&gt;LibCrypt protection and SBI files&lt;/h3&gt; &#xA;&lt;p&gt;A number of PAL region games use LibCrypt protection, requiring additional CD subchannel information to run properly. libcrypt not functioning usually manifests as hanging or crashing, but can sometimes affect gameplay too, depending on how the game implemented it.&lt;/p&gt; &#xA;&lt;p&gt;For these games, make sure that the CD image and its corresponding SBI (.sbi) file have the same name and are placed in the same directory. DuckStation will automatically load the SBI file when it is found next to the CD image.&lt;/p&gt; &#xA;&lt;p&gt;For example, if your disc image was named &lt;code&gt;Spyro3.cue&lt;/code&gt;, you would place the SBI file in the same directory, and name it &lt;code&gt;Spyro3.sbi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2019&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the respository with submodules (&lt;code&gt;git clone --recursive https://github.com/stenzek/duckstation.git -b dev&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Open the Visual Studio solution &lt;code&gt;duckstation.sln&lt;/code&gt; in the root, or &#34;Open Folder&#34; for cmake build.&lt;/li&gt; &#xA; &lt;li&gt;Build solution.&lt;/li&gt; &#xA; &lt;li&gt;Binaries are located in &lt;code&gt;bin/x64&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;duckstation-qt-x64-Release.exe&lt;/code&gt; or whichever config you used.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Requirements (Debian/Ubuntu package names):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CMake (&lt;code&gt;cmake&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SDL2 (&lt;code&gt;libsdl2-dev&lt;/code&gt;, &lt;code&gt;libxrandr-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;pkgconfig (&lt;code&gt;pkg-config&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Qt 5 (&lt;code&gt;qtbase5-dev&lt;/code&gt;, &lt;code&gt;qtbase5-private-dev&lt;/code&gt;, &lt;code&gt;qtbase5-dev-tools&lt;/code&gt;, &lt;code&gt;qttools5-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;libevdev (&lt;code&gt;libevdev-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;git (&lt;code&gt;git&lt;/code&gt;) (Note: needed to clone the repository and at build time)&lt;/li&gt; &#xA; &lt;li&gt;When Wayland is enabled (default): &lt;code&gt;libwayland-dev&lt;/code&gt; &lt;code&gt;libwayland-egl-backend-dev&lt;/code&gt; &lt;code&gt;extra-cmake-modules&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Optional for RetroAchievements (on by default): libcurl (&lt;code&gt;libcurl4-gnutls-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Optional for framebuffer output: DRM/GBM (&lt;code&gt;libgbm-dev&lt;/code&gt;, &lt;code&gt;libdrm-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Optional for faster building: Ninja (&lt;code&gt;ninja-build&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository. Submodules aren&#39;t necessary, there is only one and it is only used for Windows (&lt;code&gt;git clone https://github.com/stenzek/duckstation.git -b dev&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Create a build directory, either in-tree or elsewhere.&lt;/li&gt; &#xA; &lt;li&gt;Run CMake to configure the build system. Assuming a build subdirectory of &lt;code&gt;build-release&lt;/code&gt;, run &lt;code&gt;cmake -Bbuild-release -DCMAKE_BUILD_TYPE=Release&lt;/code&gt;. If you have installed Ninja, add &lt;code&gt;-GNinja&lt;/code&gt; at the end of the CMake command line for faster builds.&lt;/li&gt; &#xA; &lt;li&gt;Compile the source code. For the example above, run &lt;code&gt;cmake --build build-release --parallel&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the binary, located in the build directory under &lt;code&gt;bin/duckstation-qt&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; macOS is highly experimental and not tested by the developer. Use at your own risk; things may be horribly broken. Vulkan support may be unstable, so sticking to OpenGL or software renderer is recommended.&lt;/p&gt; &#xA;&lt;p&gt;Requirements (can be installed with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CMake (installed by default? Otherwise, run &lt;code&gt;brew install cmake&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SDL2 (&lt;code&gt;brew install sdl2&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Qt 5 (&lt;code&gt;brew install qt5&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Optional (recommended for faster builds):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ninja (&lt;code&gt;brew install ninja&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository. Submodules aren&#39;t necessary; there is only one and it is only used for Windows (&lt;code&gt;git clone https://github.com/stenzek/duckstation.git -b dev&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Clone the macOS externals repository (for MoltenVK): &lt;code&gt;git clone https://github.com/stenzek/duckstation-ext-mac.git dep/mac&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run CMake to configure the build system: &lt;code&gt;cmake -Bbuild-release -DCMAKE_BUILD_TYPE=Release -DBUILD_NOGUI_FRONTEND=OFF -DBUILD_QT_FRONTEND=ON -DUSE_SDL2=ON -DQt5_DIR=/opt/homebrew/opt/qt@5/lib/cmake/Qt5&lt;/code&gt; depending on your system. If you have installed Ninja, add &lt;code&gt;-GNinja&lt;/code&gt; at the end of the CMake command line for faster builds. Depending on your system, the &lt;code&gt;Qt5_DIR&lt;/code&gt; value may have to be different (e.g. &lt;code&gt;/usr/local/opt/qt@5/lib/cmake/Qt5&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Compile the source code: &lt;code&gt;cmake --build build-release --parallel&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the binary, located in the build directory under &lt;code&gt;bin/DuckStation.app&lt;/code&gt;. If the app crashes on startup, resign it using &lt;a href=&#34;https://github.com/wynioux/macOS-GateKeeper-Helper&#34;&gt;macOS Gatekeeper Helper&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;User Directories&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;User Directory&#34; is where you should place your BIOS images, where settings are saved to, and memory cards/save states are saved by default. An optional &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#sdl-game-controller-database&#34;&gt;SDL game controller database file&lt;/a&gt; can be also placed here.&lt;/p&gt; &#xA;&lt;p&gt;This is located in the following places depending on the platform you&#39;re using:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: My Documents\DuckStation&lt;/li&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;$XDG_DATA_HOME/duckstation&lt;/code&gt;, or &lt;code&gt;~/.local/share/duckstation&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;macOS: &lt;code&gt;~/Library/Application Support/DuckStation&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So, if you were using Linux, you would place your BIOS images in &lt;code&gt;~/.local/share/duckstation/bios&lt;/code&gt;. This directory will be created upon running DuckStation for the first time.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to use a &#34;portable&#34; build, where the user directory is the same as where the executable is located, create an empty file named &lt;code&gt;portable.txt&lt;/code&gt; in the same directory as the DuckStation executable.&lt;/p&gt; &#xA;&lt;h2&gt;Bindings for Qt frontend&lt;/h2&gt; &#xA;&lt;p&gt;Your keyboard or game controller can be used to simulate a variety of PlayStation controllers. Controller input is supported through DInput, XInput, and SDL backends and can be changed through &lt;code&gt;Settings -&amp;gt; General Settings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To bind your input device, go to &lt;code&gt;Settings -&amp;gt; Controller Settings&lt;/code&gt;. Each of the buttons/axes for the simulated controller will be listed, alongside the corresponding key/button on your device that it is currently bound to. To rebind, click the box next to the button/axis name, and press the key or button on your input device that you wish to bind to. When binding rumble, simply press any button on the controller you wish to send rumble to.&lt;/p&gt; &#xA;&lt;h2&gt;SDL Game Controller Database&lt;/h2&gt; &#xA;&lt;p&gt;DuckStation releases ship with a database of game controller mappings for the SDL controller backend, courtesy of &lt;a href=&#34;https://github.com/gabomdq/SDL_GameControllerDB&#34;&gt;https://github.com/gabomdq/SDL_GameControllerDB&lt;/a&gt;. The included &lt;code&gt;gamecontrollerdb.txt&lt;/code&gt; file can be found in the &lt;code&gt;database&lt;/code&gt; subdirectory of the DuckStation program directory.&lt;/p&gt; &#xA;&lt;p&gt;If you are experiencing issues binding your controller with the SDL controller backend, you may need to add a custom mapping to the database file. Make a copy of &lt;code&gt;gamecontrollerdb.txt&lt;/code&gt; and place it in your &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/master/#user-directories&#34;&gt;user directory&lt;/a&gt; (or directly in the program directory, if running in portable mode) and then follow the instructions in the &lt;a href=&#34;https://github.com/gabomdq/SDL_GameControllerDB&#34;&gt;SDL_GameControllerDB repository&lt;/a&gt; for creating a new mapping. Add this mapping to the new copy of &lt;code&gt;gamecontrollerdb.txt&lt;/code&gt; and your controller should then be recognized properly.&lt;/p&gt; &#xA;&lt;h2&gt;Default bindings&lt;/h2&gt; &#xA;&lt;p&gt;Controller 1:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;D-Pad:&lt;/strong&gt; W/A/S/D&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Triangle/Square/Circle/Cross:&lt;/strong&gt; Numpad8/Numpad4/Numpad6/Numpad2&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;L1/R1:&lt;/strong&gt; Q/E&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;L2/R2:&lt;/strong&gt; 1/3&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start:&lt;/strong&gt; Enter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Select:&lt;/strong&gt; Backspace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hotkeys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Escape:&lt;/strong&gt; Power off console&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ALT+ENTER:&lt;/strong&gt; Toggle fullscreen&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tab:&lt;/strong&gt; Temporarily disable speed limiter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Space:&lt;/strong&gt; Pause/resume emulation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/monkey.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/monkey.jpg&#34; alt=&#34;Monkey Hero&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/rrt4.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/rrt4.jpg&#34; alt=&#34;Ridge Racer Type 4&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/tr2.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/tr2.jpg&#34; alt=&#34;Tomb Raider 2&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/quake2.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/quake2.jpg&#34; alt=&#34;Quake 2&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/croc.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/croc.jpg&#34; alt=&#34;Croc&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/croc2.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/croc2.jpg&#34; alt=&#34;Croc 2&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/ff7.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/ff7.jpg&#34; alt=&#34;Final Fantasy 7&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/mm8.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/mm8.jpg&#34; alt=&#34;Mega Man 8&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/ff8.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/ff8.jpg&#34; alt=&#34;Final Fantasy 8 in Fullscreen UI&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/spyro.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/spyro.jpg&#34; alt=&#34;Spyro in Fullscreen UI&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/tof.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/tof.jpg&#34; alt=&#34;Threads of Fate in Fullscreen UI&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/gamegrid.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stenzek/duckstation/md-images/gamegrid.png&#34; alt=&#34;Game Grid&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Disclaimers&lt;/h2&gt; &#xA;&lt;p&gt;Icon by icons8: &lt;a href=&#34;https://icons8.com/icon/74847/platforms.undefined.short-title&#34;&gt;https://icons8.com/icon/74847/platforms.undefined.short-title&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&#34;PlayStation&#34; and &#34;PSX&#34; are registered trademarks of Sony Interactive Entertainment Europe Limited. This project is not affiliated in any way with Sony Interactive Entertainment.&lt;/p&gt;</summary>
  </entry>
</feed>