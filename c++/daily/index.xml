<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-17T01:31:48Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ceph/ceph</title>
    <updated>2022-09-17T01:31:48Z</updated>
    <id>tag:github.com,2022-09-17:/ceph/ceph</id>
    <link href="https://github.com/ceph/ceph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ceph is a distributed object, block, and file storage platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ceph - a scalable distributed storage system&lt;/h1&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://ceph.com/&#34;&gt;https://ceph.com/&lt;/a&gt; for current info.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Code&lt;/h2&gt; &#xA;&lt;p&gt;Most of Ceph is dual licensed under the LGPL version 2.1 or 3.0. Some miscellaneous code is under a BSD-style license or is public domain. The documentation is licensed under Creative Commons Attribution Share Alike 3.0 (CC-BY-SA-3.0). There are a handful of headers included here that are licensed under the GPL. Please see the file COPYING for a full inventory of licenses by file.&lt;/p&gt; &#xA;&lt;p&gt;Code contributions must include a valid &#34;Signed-off-by&#34; acknowledging the license for the modified or contributed file. Please see the file SubmittingPatches.rst for details on what that means and on how to generate and submit patches.&lt;/p&gt; &#xA;&lt;p&gt;We do not require assignment of copyright to contribute code; code is contributed under the terms of the applicable license.&lt;/p&gt; &#xA;&lt;h2&gt;Checking out the source&lt;/h2&gt; &#xA;&lt;p&gt;You can clone from github with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:ceph/ceph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, if you are not a github user,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git://github.com/ceph/ceph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ceph contains many git submodules that need to be checked out with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;The list of Debian or RPM packages dependencies can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./install-deps.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Ceph&lt;/h2&gt; &#xA;&lt;p&gt;Note that these instructions are meant for developers who are compiling the code for development and testing. To build binaries suitable for installation we recommend you build deb or rpm packages or refer to the &lt;code&gt;ceph.spec.in&lt;/code&gt; or &lt;code&gt;debian/rules&lt;/code&gt; to see which configuration options are specified for production builds.&lt;/p&gt; &#xA;&lt;p&gt;Build instructions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./do_cmake.sh&#xA;cd build&#xA;ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(do_cmake.sh now defaults to creating a debug build of ceph that can be up to 5x slower with some workloads. Please pass &#34;-DCMAKE_BUILD_TYPE=RelWithDebInfo&#34; to do_cmake.sh to create a non-debug release.&lt;/p&gt; &#xA;&lt;p&gt;The number of jobs used by &lt;code&gt;ninja&lt;/code&gt; is derived from the number of CPU cores of the building host if unspecified. Use the &lt;code&gt;-j&lt;/code&gt; option to limit the job number if the build jobs are running out of memory. On average, each job takes around 2.5GiB memory.)&lt;/p&gt; &#xA;&lt;p&gt;This assumes you make your build dir a subdirectory of the ceph.git checkout. If you put it elsewhere, just point &lt;code&gt;CEPH_GIT_DIR&lt;/code&gt; to the correct path to the checkout. Any additional CMake args can be specified by setting ARGS before invoking do_cmake. See &lt;a href=&#34;https://raw.githubusercontent.com/ceph/ceph/main/#cmake-options&#34;&gt;cmake options&lt;/a&gt; for more details. Eg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ARGS=&#34;-DCMAKE_C_COMPILER=gcc-7&#34; ./do_cmake.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build only certain targets use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ninja [target name]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ninja install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CMake Options&lt;/h3&gt; &#xA;&lt;p&gt;If you run the &lt;code&gt;cmake&lt;/code&gt; command by hand, there are many options you can set with &#34;-D&#34;. For example, the option to build the RADOS Gateway is defaulted to ON. To build without the RADOS Gateway:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DWITH_RADOSGW=OFF [path to top-level ceph directory]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another example below is building with debugging and alternate locations for a couple of external dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DLEVELDB_PREFIX=&#34;/opt/hyperleveldb&#34; \&#xA;-DCMAKE_INSTALL_PREFIX=/opt/ceph -DCMAKE_C_FLAGS=&#34;-Og -g3 -gdwarf-4&#34; \&#xA;..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ceph has several bundled dependencies such as Boost, RocksDB and Arrow. By default, cmake will build these bundled dependencies from source instead of using libraries that are already installed on the system. You can opt-in to using these system libraries, provided they meet the minimum version required by Ceph, with cmake options like &lt;code&gt;WITH_SYSTEM_BOOST&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DWITH_SYSTEM_BOOST=ON [...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view an exhaustive list of -D options, you can invoke &lt;code&gt;cmake&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -LH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you often pipe &lt;code&gt;ninja&lt;/code&gt; to &lt;code&gt;less&lt;/code&gt; and would like to maintain the diagnostic colors for errors and warnings (and if your compiler supports it), you can invoke &lt;code&gt;cmake&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DDIAGNOSTICS_COLOR=always ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you&#39;ll get the diagnostic colors when you execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ninja | less -R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other available values for &#39;DIAGNOSTICS_COLOR&#39; are &#39;auto&#39; (default) and &#39;never&#39;.&lt;/p&gt; &#xA;&lt;h2&gt;Building a source tarball&lt;/h2&gt; &#xA;&lt;p&gt;To build a complete source tarball with everything needed to build from source and/or build a (deb or rpm) package, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./make-dist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a tarball like ceph-$version.tar.bz2 from git. (Ensure that any changes you want to include in your working directory are committed to git.)&lt;/p&gt; &#xA;&lt;h2&gt;Running a test cluster&lt;/h2&gt; &#xA;&lt;p&gt;To run a functional test cluster,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd build&#xA;ninja vstart        # builds just enough to run vstart&#xA;../src/vstart.sh --debug --new -x --localhost --bluestore&#xA;./bin/ceph -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Almost all of the usual commands are available in the bin/ directory. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bin/rados -p rbd bench 30 write&#xA;./bin/rbd create foo --size 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To shut down the test cluster,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;../src/stop.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start or stop individual daemons, the sysvinit script can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bin/init-ceph restart osd.0&#xA;./bin/init-ceph stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running unit tests&lt;/h2&gt; &#xA;&lt;p&gt;To build and run all tests (in parallel using all processors), use &lt;code&gt;ctest&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd build&#xA;ninja&#xA;ctest -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note: Many targets built from src/test are not run using &lt;code&gt;ctest&lt;/code&gt;. Targets starting with &#34;unittest&#34; are run in &lt;code&gt;ninja check&lt;/code&gt; and thus can be run with &lt;code&gt;ctest&lt;/code&gt;. Targets starting with &#34;ceph_test&#34; can not, and should be run by hand.)&lt;/p&gt; &#xA;&lt;p&gt;When failures occur, look in build/Testing/Temporary for logs.&lt;/p&gt; &#xA;&lt;p&gt;To build and run all tests and their dependencies without other unnecessary targets in Ceph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd build&#xA;ninja check -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run an individual test manually, run &lt;code&gt;ctest&lt;/code&gt; with -R (regex matching):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ctest -R [regex matching test name(s)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note: &lt;code&gt;ctest&lt;/code&gt; does not build the test it&#39;s running or the dependencies needed to run it)&lt;/p&gt; &#xA;&lt;p&gt;To run an individual test manually and see all the tests output, run &lt;code&gt;ctest&lt;/code&gt; with the -V (verbose) flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ctest -V -R [regex matching test name(s)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests manually and run the jobs in parallel, run &lt;code&gt;ctest&lt;/code&gt; with the &lt;code&gt;-j&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ctest -j [number of jobs]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many other flags you can give &lt;code&gt;ctest&lt;/code&gt; for better control over manual test execution. To view these options run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;man ctest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;The list of package dependencies for building the documentation can be found in &lt;code&gt;doc_deps.deb.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install `cat doc_deps.deb.txt`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building the Documentation&lt;/h3&gt; &#xA;&lt;p&gt;To build the documentation, ensure that you are in the top-level &lt;code&gt;/ceph&lt;/code&gt; directory, and execute the build script. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;admin/build-doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;To report an issue and view existing issues, please visit &lt;a href=&#34;https://tracker.ceph.com/projects/ceph&#34;&gt;https://tracker.ceph.com/projects/ceph&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>