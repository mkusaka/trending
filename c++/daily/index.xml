<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C++ Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-21T01:24:45Z</updated>
  <subtitle>Daily Trending of C++ in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ros-drivers/usb_cam</title>
    <updated>2024-03-21T01:24:45Z</updated>
    <id>tag:github.com,2024-03-21:/ros-drivers/usb_cam</id>
    <link href="https://github.com/ros-drivers/usb_cam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A ROS Driver for V4L2 USB Cameras&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;usb_cam &lt;a href=&#34;https://github.com/ros-drivers/usb_cam/actions/workflows/build_test.yml&#34;&gt;&lt;img src=&#34;https://github.com/ros-drivers/usb_cam/actions/workflows/build_test.yml/badge.svg?sanitize=true&#34; alt=&#34;ROS 2 CI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;A ROS 2 Driver for V4L USB Cameras&lt;/h2&gt; &#xA;&lt;p&gt;This package is based off of V4L devices specifically instead of just UVC.&lt;/p&gt; &#xA;&lt;p&gt;For ros1 documentation, see &lt;a href=&#34;http://ros.org/wiki/usb_cam&#34;&gt;the ROS wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported ROS 2 Distros and Platforms&lt;/h2&gt; &#xA;&lt;p&gt;All Officially supported Linux Distros and corresponding ROS 2 releases are supported. Please create an issue if you experience any problems on these platforms.&lt;/p&gt; &#xA;&lt;p&gt;Windows: TBD/Untested/Unproven MacOS: TBD/Untested/Unproven&lt;/p&gt; &#xA;&lt;p&gt;For either MacOS or Windows - if you would like to try and get it working please create an issue to document your effort. If it works we can add it to the instructions here!&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Assuming you have a supported ROS 2 distro installed, run the following command to install the binary release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install ros-&amp;lt;ros2-distro&amp;gt;-usb-cam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As of today this package should be available for binary installation on all active ROS 2 distros.&lt;/p&gt; &#xA;&lt;p&gt;If for some reason you cannot install the binaries, follow the directions below to compile from source.&lt;/p&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;p&gt;Clone/Download the source code into your workspace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd /path/to/colcon_ws/src&#xA;git clone https://github.com/ros-drivers/usb_cam.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or click on the green &#34;Download zip&#34; button on the repo&#39;s github webpage.&lt;/p&gt; &#xA;&lt;p&gt;Once downloaded and ensuring you have sourced your ROS 2 underlay, go ahead and install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd /path/to/colcon_ws&#xA;rosdep install --from-paths src --ignore-src -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From there you should have all the necessary dependencies installed to compile the &lt;code&gt;usb_cam&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd /path/to/colcon_ws&#xA;colcon build&#xA;source /path/to/colcon_ws/install/setup.bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to source the newly built packages after a successful build.&lt;/p&gt; &#xA;&lt;p&gt;Once sourced, you should be able to run the package in one of three ways, shown in the next section.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;usb_cam_node&lt;/code&gt; can be ran with default settings, by setting specific parameters either via the command line or by loading in a parameters file.&lt;/p&gt; &#xA;&lt;p&gt;We provide a &#34;default&#34; params file in the &lt;code&gt;usb_cam/config/params.yaml&lt;/code&gt; directory to get you started. Feel free to modify this file as you wish.&lt;/p&gt; &#xA;&lt;p&gt;Also provided is a launch file that should launch the &lt;code&gt;usb_cam_node_exe&lt;/code&gt; executable along with an additional node that displays an image topic.&lt;/p&gt; &#xA;&lt;p&gt;The commands to run each of these different ways of starting the node are shown below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: you only need to run ONE of the commands below to run the node&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# run the executable with default settings (without params file)&#xA;ros2 run usb_cam usb_cam_node_exe&#xA;&#xA;# run the executable while passing in parameters via a yaml file&#xA;ros2 run usb_cam usb_cam_node_exe --ros-args --params-file /path/to/colcon_ws/src/usb_cam/config/params.yaml&#xA;&#xA;# launch the usb_cam executable that loads parameters from the same `usb_cam/config/params.yaml` file as above&#xA;# along with an additional image viewer node&#xA;ros2 launch usb_cam camera.launch.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Launching Multiple usb_cam&#39;s&lt;/h2&gt; &#xA;&lt;p&gt;To launch multiple nodes at once, simply remap the namespace of each one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ros2 run usb_cam usb_cam_node_exe --remap __ns:=/usb_cam_0 --params-file /path/to/usb_cam/config/params_0.yaml&#xA;ros2 run usb_cam usb_cam_node_exe --remap __ns:=/usb_cam_1 --params-file /path/to/usb_cam/config/params_1.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported formats&lt;/h2&gt; &#xA;&lt;h3&gt;Device supported formats&lt;/h3&gt; &#xA;&lt;p&gt;To see a connected devices supported formats, run the &lt;code&gt;usb_cam_node&lt;/code&gt; and observe the console output.&lt;/p&gt; &#xA;&lt;p&gt;An example output is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-log&#34;&gt;This devices supproted formats:&#xA;       Motion-JPEG: 1280 x 720 (30 Hz)&#xA;       Motion-JPEG: 960 x 540 (30 Hz)&#xA;       Motion-JPEG: 848 x 480 (30 Hz)&#xA;       Motion-JPEG: 640 x 480 (30 Hz)&#xA;       Motion-JPEG: 640 x 360 (30 Hz)&#xA;       YUYV 4:2:2: 640 x 480 (30 Hz)&#xA;       YUYV 4:2:2: 1280 x 720 (10 Hz)&#xA;       YUYV 4:2:2: 640 x 360 (30 Hz)&#xA;       YUYV 4:2:2: 424 x 240 (30 Hz)&#xA;       YUYV 4:2:2: 320 x 240 (30 Hz)&#xA;       YUYV 4:2:2: 320 x 180 (30 Hz)&#xA;       YUYV 4:2:2: 160 x 120 (30 Hz)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Driver supported formats&lt;/h3&gt; &#xA;&lt;p&gt;The driver has its own supported formats. See &lt;a href=&#34;https://raw.githubusercontent.com/ros-drivers/usb_cam/ros2/include/usb_cam/formats/&#34;&gt;the source code&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;After observing &lt;a href=&#34;https://raw.githubusercontent.com/ros-drivers/usb_cam/ros2/#device-supported-formats&#34;&gt;the devices supported formats&lt;/a&gt;, specify which format to use via &lt;a href=&#34;https://raw.githubusercontent.com/ros-drivers/usb_cam/ros2/config/params.yaml&#34;&gt;the parameters file&lt;/a&gt; with the &lt;code&gt;pixel_format&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;p&gt;To see a list of all currently supported driver formats, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ros2 run usb_cam usb_cam_node_exe --ros-args -p pixel_format:=&#34;test&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &#34;test&#34; here could be replaced with any non-supported pixel format string. The driver will detect if the given pixel format is supported or not.&lt;/p&gt; &#xA;&lt;p&gt;More formats and conversions can be added, contributions welcome!&lt;/p&gt; &#xA;&lt;h3&gt;Supported IO methods&lt;/h3&gt; &#xA;&lt;p&gt;This driver supports three different IO methods as of today:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;read&lt;/code&gt;: copies the video frame between user and kernal space&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mmap&lt;/code&gt;: memory mapped buffers allocated in kernel space&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;userptr&lt;/code&gt;: memory buffers allocated in the user space&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To read more on the different methods, check out &lt;a href=&#34;https://lwn.net/Articles/240667/&#34;&gt;this article that provides a good overview of each&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compression&lt;/h2&gt; &#xA;&lt;p&gt;Big thanks to &lt;a href=&#34;https://gitlab.com/boldhearts/ros2_v4l2_camera#usage-1&#34;&gt;the &lt;code&gt;ros2_v4l2_camera&lt;/code&gt; package&lt;/a&gt; and their documentation on this topic.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;usb_cam&lt;/code&gt; should support compression by default since it uses &lt;code&gt;image_transport&lt;/code&gt; to publish its images as long as the &lt;code&gt;image_transport_plugins&lt;/code&gt; package is installed on your system. With the plugins installed the &lt;code&gt;usb_cam&lt;/code&gt; package should publish a &lt;code&gt;compressed&lt;/code&gt; topic automatically.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately &lt;code&gt;rviz2&lt;/code&gt; and &lt;code&gt;show_image.py&lt;/code&gt; do not support visualizing the compressed images just yet so you will need to republish the compressed image downstream to uncompress it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ros2 run image_transport republish compressed raw --ros-args --remap in/compressed:=image_raw/compressed --remap out:=image_raw/uncompressed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Address and leak sanitizing&lt;/h2&gt; &#xA;&lt;p&gt;Incorporated into the &lt;code&gt;CMakelists.txt&lt;/code&gt; file to assist with memory leak and address sanitizing is a flag to add these compile commands to the targets.&lt;/p&gt; &#xA;&lt;p&gt;To enable them, pass in the &lt;code&gt;SANITIZE=1&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;colcon build --packages-select usb_cam --cmake-args -DSANITIZE=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once built, run the nodes executable directly and pass any &lt;code&gt;ASAN_OPTIONS&lt;/code&gt; that are needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ASAN_OPTIONS=new_delete_type_mismatch=0 ./install/usb_cam/lib/usb_cam/usb_cam_node_exe &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After shutting down the executable with &lt;code&gt;Ctrl+C&lt;/code&gt;, the sanitizer will report any memory leaks.&lt;/p&gt; &#xA;&lt;p&gt;By default this is turned off since compiling with the sanatizer turned on causes bloat and slows down performance.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://docs.ros.org/indigo/api/usb_cam/html/&#34;&gt;Doxygen&lt;/a&gt; files can be found on the ROS wiki.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;usb_cam is released with a BSD license. For full terms and conditions, see the &lt;a href=&#34;https://raw.githubusercontent.com/ros-drivers/usb_cam/ros2/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Authors&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/ros-drivers/usb_cam/ros2/AUTHORS.md&#34;&gt;AUTHORS&lt;/a&gt; file for a full list of contributors.&lt;/p&gt;</summary>
  </entry>
</feed>